void sub_1C5033124(llvm::raw_ostream *a1, unsigned int a2, _BYTE *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  unsigned int v10;
  int v11;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[33];

  v18[32] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x4000000000;
  if (a4)
  {
    v8 = a4;
    v10 = 0;
    do
    {
      v11 = (char)*a3;
      if (((*a3 & 0xDF) - 65) < 0x1Au || (*a3 - 48) < 0xAu || v11 == 46 || v11 == 95)
        v15 = a5;
      else
        v15 = 0;
      if (a5)
        a5 = v15;
      else
        a5 = 0;
      if (v10 >= HIDWORD(v17))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, v10 + 1, 4);
        v10 = v17;
      }
      *((_DWORD *)v16 + v10) = v11;
      v10 = v17 + 1;
      LODWORD(v17) = v17 + 1;
      ++a3;
      --v8;
    }
    while (v8);
  }
  sub_1C5033274(a1, a2, (uint64_t)&v16, a5);
  if (v16 != v18)
    free(v16);
}

llvm::raw_ostream *sub_1C5033274(llvm::raw_ostream *result, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  int v26;

  v5 = a2;
  v6 = result;
  if (a4)
    return sub_1C5033490(result, a4, *(_QWORD *)a3, *(unsigned int *)(a3 + 8), 0, 0, a2 | 0x100000000);
  v7 = *(unsigned int *)(a3 + 8);
  v8 = *((_DWORD *)result + 8);
  v9 = *((_DWORD *)result + 6);
  v10 = *((_DWORD *)result + 7) | (3 << v9);
  *((_DWORD *)result + 7) = v10;
  v11 = v9 + v8;
  if (v11 >= 0x20)
  {
    result = sub_1C503027C((uint64_t *)result, v10);
    v19 = *((_DWORD *)v6 + 6);
    if (v19)
      v10 = 3u >> -(char)v19;
    else
      v10 = 0;
    *((_DWORD *)v6 + 7) = v10;
    v11 = ((_BYTE)v19 + (_BYTE)v8) & 0x1F;
  }
  *((_DWORD *)v6 + 6) = v11;
  if (v5 >= 0x20)
  {
    result = sub_1C5030204(v6, v5 & 0x1F | 0x20, 6);
    v11 = *((_DWORD *)v6 + 6);
    v10 = *((_DWORD *)v6 + 7);
    v5 = 1;
  }
  v12 = (v5 << v11) | v10;
  *((_DWORD *)v6 + 7) = v12;
  v13 = v11 + 6;
  if (v13 >= 0x20)
  {
    result = sub_1C503027C((uint64_t *)v6, v12);
    v20 = *((_DWORD *)v6 + 6);
    if (v20)
      v12 = v5 >> -(char)v20;
    else
      v12 = 0;
    v13 = ((_BYTE)v20 + 6) & 0x1F;
  }
  *((_DWORD *)v6 + 6) = v13;
  if (v7 >= 0x20)
  {
    v23 = v7;
    do
    {
      v24 = v23 & 0x1F | 0x20;
      v12 |= v24 << v13;
      *((_DWORD *)v6 + 7) = v12;
      if (v13 >= 0x1A)
      {
        result = sub_1C503027C((uint64_t *)v6, v12);
        v26 = *((_DWORD *)v6 + 6);
        if (v26)
          v12 = v24 >> -(char)v26;
        else
          v12 = 0;
        *((_DWORD *)v6 + 7) = v12;
        v13 = ((_BYTE)v26 + 6) & 0x1F;
      }
      else
      {
        v13 += 6;
      }
      *((_DWORD *)v6 + 6) = v13;
      v14 = v23 >> 5;
      v25 = v23 > 0x3FF;
      v23 >>= 5;
    }
    while (v25);
  }
  else
  {
    v14 = v7;
  }
  v15 = (v14 << v13) | v12;
  *((_DWORD *)v6 + 7) = v15;
  if (v13 >= 0x1A)
  {
    result = sub_1C503027C((uint64_t *)v6, v15);
    v21 = *((_DWORD *)v6 + 6);
    v22 = v14 >> -(char)v21;
    if (!v21)
      v22 = 0;
    *((_DWORD *)v6 + 7) = v22;
    v16 = ((_BYTE)v21 + 6) & 0x1F;
  }
  else
  {
    v16 = v13 + 6;
  }
  *((_DWORD *)v6 + 6) = v16;
  if ((_DWORD)v7)
  {
    v17 = 0;
    v18 = 4 * v7;
    do
    {
      result = sub_1C5030AF8(v6, *(unsigned int *)(*(_QWORD *)a3 + v17), 6);
      v17 += 4;
    }
    while (v18 != v17);
  }
  return result;
}

llvm::raw_ostream *sub_1C5033490(llvm::raw_ostream *result, unsigned int a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  llvm::raw_ostream *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;

  v12 = result;
  v13 = *(_QWORD *)(*((_QWORD *)result + 5) + 16 * (a2 - 4));
  v14 = *((_DWORD *)result + 8);
  v15 = *((_DWORD *)result + 6);
  v16 = *((_DWORD *)result + 7) | (a2 << v15);
  *((_DWORD *)result + 7) = v16;
  v17 = v15 + v14;
  if (v17 >= 0x20)
  {
    result = sub_1C503027C((uint64_t *)result, v16);
    v32 = *((_DWORD *)v12 + 6);
    v33 = a2 >> -(char)v32;
    if (!v32)
      v33 = 0;
    *((_DWORD *)v12 + 7) = v33;
    v17 = ((_BYTE)v32 + (_BYTE)v14) & 0x1F;
  }
  *((_DWORD *)v12 + 6) = v17;
  v18 = *(_DWORD *)(v13 + 8);
  if ((a7 & 0xFF00000000) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)v13 + 8) & 1) == 0)
      result = sub_1C503375C(v12, *(uint64_t **)v13, a7);
    v19 = 1;
  }
  else
  {
    v19 = 0;
  }
  if (v19 != v18)
  {
    v20 = 0;
    v21 = a6;
    v22 = a5;
    while (1)
    {
      v23 = *(_QWORD *)v13 + 16 * v19;
      v24 = *(unsigned __int8 *)(v23 + 8);
      if ((v24 & 1) != 0)
        goto LABEL_12;
      v25 = (v24 >> 1) & 7;
      if (v25 != 3)
        break;
      v40 = v21;
      v41 = a6;
      v26 = (uint64_t *)(*(_QWORD *)v13 + 16 * ++v19);
      if (v22)
      {
        v37 = a6;
        if (a6 >= 0x20)
        {
          do
          {
            sub_1C5030204(v12, a6 & 0x1F | 0x20, 6);
            v37 = a6 >> 5;
            v36 = a6 > 0x3FF;
            LODWORD(a6) = a6 >> 5;
          }
          while (v36);
        }
        result = sub_1C5030204(v12, v37, 6);
        if ((_DWORD)v41)
        {
          v38 = v40;
          do
          {
            v39 = *v22++;
            result = sub_1C5033894(v12, v26, v39);
            --v38;
          }
          while (v38);
        }
        v22 = 0;
      }
      else
      {
        v27 = a4 - v20;
        if (a4 - v20 >= 0x20)
        {
          do
          {
            result = sub_1C5030204(v12, v27 & 0x1F | 0x20, 6);
            v28 = v27 >> 5;
            v36 = v27 > 0x3FF;
            v27 >>= 5;
          }
          while (v36);
        }
        else
        {
          v28 = a4 - v20;
        }
        v29 = *((_DWORD *)v12 + 6);
        v30 = *((_DWORD *)v12 + 7) | (v28 << v29);
        *((_DWORD *)v12 + 7) = v30;
        v31 = v29 + 6;
        if (v31 >= 0x20)
        {
          result = sub_1C503027C((uint64_t *)v12, v30);
          v34 = *((_DWORD *)v12 + 6);
          v35 = v28 >> -(char)v34;
          if (!v34)
            v35 = 0;
          *((_DWORD *)v12 + 7) = v35;
          v31 = ((_BYTE)v34 + 6) & 0x1F;
        }
        *((_DWORD *)v12 + 6) = v31;
        if ((_DWORD)a4 != v20)
        {
          a6 = v41;
          do
            result = sub_1C503375C(v12, v26, *(_DWORD *)(a3 + 4 * v20++));
          while ((_DWORD)a4 != v20);
          v22 = 0;
          v20 = a4;
          v21 = v40;
          goto LABEL_13;
        }
        v22 = 0;
        v20 = a4;
      }
      v21 = v40;
      a6 = v41;
LABEL_13:
      if (++v19 == v18)
        return result;
    }
    if (v25 == 5)
    {
      if (v22)
      {
        result = sub_1C50339C8(v12, a5, a6, 1);
        v22 = 0;
      }
      else
      {
        result = sub_1C61D2AE4(v12, (char *)(a3 + 4 * v20), a4 - v20, 1);
      }
      goto LABEL_13;
    }
    result = sub_1C503375C(v12, (uint64_t *)v23, *(_DWORD *)(a3 + 4 * v20));
LABEL_12:
    ++v20;
    goto LABEL_13;
  }
  return result;
}

llvm::raw_ostream *sub_1C503375C(llvm::raw_ostream *result, uint64_t *a2, unsigned int a3)
{
  llvm::raw_ostream *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  char v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;

  v4 = result;
  v5 = (*((unsigned __int8 *)a2 + 8) >> 1) & 7;
  if (v5 == 1)
  {
    v6 = *a2;
    if (!*a2)
      return result;
    v7 = *((_DWORD *)result + 6);
    v8 = *((_DWORD *)result + 7) | (a3 << v7);
    *((_DWORD *)result + 7) = v8;
    v9 = v7 + v6;
    if (v9 < 0x20)
      goto LABEL_25;
    result = sub_1C503027C((uint64_t *)result, v8);
    v10 = *((_DWORD *)v4 + 6);
    v11 = a3 >> -(char)v10;
    if (!v10)
      v11 = 0;
    *((_DWORD *)v4 + 7) = v11;
    v12 = v10 + v6;
    goto LABEL_24;
  }
  if (v5 != 2)
  {
    if (a3 == 46)
      v13 = 62;
    else
      v13 = 63;
    if (a3 - 48 <= 9)
      v13 = (char)a3 + 4;
    if (a3 - 65 <= 0x19)
      v13 = (char)a3 - 39;
    if (a3 - 97 <= 0x19)
      v14 = (char)a3 - 97;
    else
      v14 = v13;
    v15 = *((_DWORD *)result + 6);
    v16 = *((_DWORD *)result + 7) | (v14 << v15);
    *((_DWORD *)result + 7) = v16;
    v9 = v15 + 6;
    if (v9 < 0x20)
      goto LABEL_25;
    result = sub_1C503027C((uint64_t *)result, v16);
    v17 = *((_DWORD *)v4 + 6);
    v18 = v14 >> -(char)v17;
    if (!v17)
      v18 = 0;
    *((_DWORD *)v4 + 7) = v18;
    v12 = v17 + 6;
LABEL_24:
    v9 = v12 & 0x1F;
LABEL_25:
    *((_DWORD *)v4 + 6) = v9;
    return result;
  }
  if (*a2)
    return sub_1C5030AF8(result, a3, *a2);
  return result;
}

llvm::raw_ostream *sub_1C5033894(llvm::raw_ostream *result, uint64_t *a2, unsigned int a3)
{
  llvm::raw_ostream *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;

  v4 = result;
  v5 = (*((unsigned __int8 *)a2 + 8) >> 1) & 7;
  if (v5 == 1)
  {
    v6 = *a2;
    if (!*a2)
      return result;
    v7 = *((_DWORD *)result + 6);
    v8 = *((_DWORD *)result + 7) | (a3 << v7);
    *((_DWORD *)result + 7) = v8;
    v9 = v7 + v6;
    if (v9 < 0x20)
      goto LABEL_27;
    result = sub_1C503027C((uint64_t *)result, v8);
    v10 = *((_DWORD *)v4 + 6);
    v11 = a3 >> -(char)v10;
    if (!v10)
      v11 = 0;
    *((_DWORD *)v4 + 7) = v11;
    v12 = v10 + v6;
    goto LABEL_26;
  }
  if (v5 != 2)
  {
    if (a3 == 46)
      v13 = 62;
    else
      v13 = 63;
    if (a3 - 48 <= 9)
      v14 = (char)a3 + 4;
    else
      v14 = v13;
    if (a3 - 65 <= 0x19)
      v15 = (char)a3 - 39;
    else
      v15 = v14;
    if (a3 - 97 <= 0x19)
      v16 = (char)a3 - 97;
    else
      v16 = v15;
    v17 = *((_DWORD *)result + 6);
    v18 = *((_DWORD *)result + 7) | (v16 << v17);
    *((_DWORD *)result + 7) = v18;
    v9 = v17 + 6;
    if (v9 < 0x20)
      goto LABEL_27;
    result = sub_1C503027C((uint64_t *)result, v18);
    v19 = *((_DWORD *)v4 + 6);
    v20 = v16 >> -(char)v19;
    if (!v19)
      v20 = 0;
    *((_DWORD *)v4 + 7) = v20;
    v12 = v19 + 6;
LABEL_26:
    v9 = v12 & 0x1F;
LABEL_27:
    *((_DWORD *)v4 + 6) = v9;
    return result;
  }
  if (*a2)
    return sub_1C5030AF8(result, a3, *a2);
  return result;
}

llvm::raw_ostream *sub_1C50339C8(llvm::raw_ostream *result, char *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  llvm::raw_ostream *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned int v21;

  v4 = a3;
  v6 = result;
  if ((a4 & 1) != 0)
  {
    if (a3 > 0x1F)
    {
      v8 = *((_DWORD *)result + 6);
      v7 = *((_DWORD *)result + 7);
      v16 = a3;
      do
      {
        v17 = v16 & 0x1F | 0x20;
        v7 |= v17 << v8;
        *((_DWORD *)v6 + 7) = v7;
        v8 += 6;
        if (v8 >= 0x20)
        {
          result = sub_1C503027C((uint64_t *)v6, v7);
          v19 = *((_DWORD *)v6 + 6);
          if (v19)
            v7 = v17 >> -(char)v19;
          else
            v7 = 0;
          *((_DWORD *)v6 + 7) = v7;
          v8 = ((_BYTE)v19 + 6) & 0x1F;
        }
        *((_DWORD *)v6 + 6) = v8;
        v9 = v16 >> 5;
        v18 = v16 > 0x3FF;
        v16 >>= 5;
      }
      while (v18);
    }
    else
    {
      v8 = *((_DWORD *)result + 6);
      v7 = *((_DWORD *)result + 7);
      v9 = a3;
    }
    v10 = (v9 << v8) | v7;
    *((_DWORD *)v6 + 7) = v10;
    v11 = v8 + 6;
    if (v11 >= 0x20)
    {
      result = sub_1C503027C((uint64_t *)v6, v10);
      v20 = *((_DWORD *)v6 + 6);
      v21 = v9 >> -(char)v20;
      if (!v20)
        v21 = 0;
      *((_DWORD *)v6 + 7) = v21;
      v11 = ((_BYTE)v20 + 6) & 0x1F;
    }
    *((_DWORD *)v6 + 6) = v11;
  }
  else
  {
    v11 = *((_DWORD *)result + 6);
  }
  if (v11)
  {
    result = sub_1C503027C((uint64_t *)v6, *((_DWORD *)v6 + 7));
    *((_QWORD *)v6 + 3) = 0;
  }
  for (; v4; --v4)
  {
    v12 = *a2++;
    result = sub_1C5033B48((uint64_t *)v6, v12);
  }
  while (1)
  {
    v13 = (_QWORD *)*((_QWORD *)v6 + 1);
    v14 = *(_QWORD *)(*(_QWORD *)v6 + 8);
    if (v13)
    {
      result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(*v13 + 80))(*((_QWORD *)v6 + 1));
      v15 = (char *)result + v13[4] - v13[2];
    }
    else
    {
      LOBYTE(v15) = 0;
    }
    if ((((_BYTE)v15 + (_BYTE)v14) & 3) == 0)
      break;
    result = sub_1C5033B48((uint64_t *)v6, 0);
  }
  return result;
}

llvm::raw_ostream *sub_1C5033B48(uint64_t *a1, char a2)
{
  _QWORD *v4;
  uint64_t v5;
  llvm::raw_ostream *result;
  size_t v7;

  v4 = (_QWORD *)*a1;
  v5 = *(_QWORD *)(*a1 + 8);
  if ((unint64_t)(v5 + 1) > *(_QWORD *)(*a1 + 16))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(*a1, v4 + 3, v5 + 1, 1);
    v5 = v4[1];
  }
  *(_BYTE *)(*v4 + v5) = a2;
  ++v4[1];
  result = (llvm::raw_ostream *)a1[1];
  if (result)
  {
    v7 = *(_QWORD *)(*a1 + 8);
    if (v7 >= a1[2])
    {
      result = llvm::raw_ostream::write(result, *(const char **)*a1, v7);
      *(_QWORD *)(*a1 + 8) = 0;
    }
  }
  return result;
}

llvm::raw_ostream *sub_1C5033BDC(llvm::raw_ostream *result, unsigned int a2, _QWORD *a3)
{
  llvm::raw_ostream *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;

  v5 = result;
  v6 = a3[1];
  v7 = *((_DWORD *)result + 8);
  v8 = *((_DWORD *)result + 6);
  v9 = *((_DWORD *)result + 7) | (3 << v8);
  *((_DWORD *)result + 7) = v9;
  v10 = v8 + v7;
  if (v10 >= 0x20)
  {
    result = sub_1C503027C((uint64_t *)result, v9);
    v18 = *((_DWORD *)v5 + 6);
    if (v18)
      v9 = 3u >> -(char)v18;
    else
      v9 = 0;
    v10 = ((_BYTE)v18 + (_BYTE)v7) & 0x1F;
  }
  v11 = (a2 << v10) | v9;
  *((_DWORD *)v5 + 6) = v10;
  *((_DWORD *)v5 + 7) = v11;
  if (v10 >= 0x1A)
  {
    result = sub_1C503027C((uint64_t *)v5, v11);
    v19 = *((_DWORD *)v5 + 6);
    if (v19)
      v11 = a2 >> -(char)v19;
    else
      v11 = 0;
    *((_DWORD *)v5 + 7) = v11;
    v12 = ((_BYTE)v19 + 6) & 0x1F;
  }
  else
  {
    v12 = v10 + 6;
  }
  *((_DWORD *)v5 + 6) = v12;
  v13 = v6;
  if (v6 >= 0x20)
  {
    v13 = v6;
    do
    {
      v22 = v13;
      result = sub_1C5030204(v5, v13 & 0x1F | 0x20, 6);
      v13 >>= 5;
    }
    while (v22 > 0x3FF);
    v12 = *((_DWORD *)v5 + 6);
    v11 = *((_DWORD *)v5 + 7);
  }
  v14 = (v13 << v12) | v11;
  *((_DWORD *)v5 + 7) = v14;
  v15 = v12 + 6;
  if (v15 >= 0x20)
  {
    result = sub_1C503027C((uint64_t *)v5, v14);
    v20 = *((_DWORD *)v5 + 6);
    v21 = v13 >> -(char)v20;
    if (!v20)
      v21 = 0;
    *((_DWORD *)v5 + 7) = v21;
    v15 = ((_BYTE)v20 + 6) & 0x1F;
  }
  *((_DWORD *)v5 + 6) = v15;
  if ((_DWORD)v6)
  {
    v16 = 0;
    v17 = 8 * v6;
    do
    {
      result = sub_1C5030AF8(v5, *(_QWORD *)(*a3 + v16), 6);
      v16 += 8;
    }
    while (v17 != v16);
  }
  return result;
}

llvm::raw_ostream *sub_1C5033D5C(llvm::raw_ostream *result, unsigned int a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  llvm::raw_ostream *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  uint64_t i;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;

  v11 = result;
  v12 = *(_QWORD *)(*((_QWORD *)result + 5) + 16 * (a2 - 4));
  v13 = *((_DWORD *)result + 8);
  v14 = *((_DWORD *)result + 6);
  v15 = *((_DWORD *)result + 7) | (a2 << v14);
  *((_DWORD *)result + 7) = v15;
  v16 = v14 + v13;
  if (v16 >= 0x20)
  {
    result = sub_1C503027C((uint64_t *)result, v15);
    v32 = *((_DWORD *)v11 + 6);
    v33 = a2 >> -(char)v32;
    if (!v32)
      v33 = 0;
    *((_DWORD *)v11 + 7) = v33;
    v16 = ((_BYTE)v32 + (_BYTE)v13) & 0x1F;
  }
  *((_DWORD *)v11 + 6) = v16;
  v17 = *(_DWORD *)(v12 + 8);
  if ((a7 & 0xFF00000000) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)v12 + 8) & 1) == 0)
      result = sub_1C503375C(v11, *(uint64_t **)v12, a7);
    v18 = 1;
  }
  else
  {
    v18 = 0;
  }
  if (v18 != v17)
  {
    v19 = 0;
    v20 = a5;
    i = a6;
    do
    {
      v22 = *(_QWORD *)v12 + 16 * v18;
      v23 = *(unsigned __int8 *)(v22 + 8);
      if ((v23 & 1) == 0)
      {
        v24 = (v23 >> 1) & 7;
        if (v24 == 3)
        {
          v43 = i;
          v25 = (uint64_t *)(*(_QWORD *)v12 + 16 * ++v18);
          if (v20)
          {
            v39 = a6;
            if (a6 >= 0x20)
            {
              v40 = a6;
              do
              {
                sub_1C5030204(v11, v40 & 0x1F | 0x20, 6);
                v39 = v40 >> 5;
                v38 = v40 > 0x3FF;
                v40 >>= 5;
              }
              while (v38);
            }
            result = sub_1C5030204(v11, v39, 6);
            if ((_DWORD)a6)
            {
              v41 = v43;
              do
              {
                v42 = *v20++;
                result = sub_1C5033894(v11, v25, v42);
                --v41;
              }
              while (v41);
            }
            v20 = 0;
            i = v43;
          }
          else
          {
            v26 = a4 - v19;
            v28 = *((_DWORD *)v11 + 6);
            v27 = *((_DWORD *)v11 + 7);
            if (a4 - v19 >= 0x20)
            {
              do
              {
                v37 = v26 & 0x1F | 0x20;
                v27 |= v37 << v28;
                *((_DWORD *)v11 + 7) = v27;
                v28 += 6;
                if (v28 >= 0x20)
                {
                  result = sub_1C503027C((uint64_t *)v11, v27);
                  v36 = *((_DWORD *)v11 + 6);
                  if (v36)
                    v27 = v37 >> -(char)v36;
                  else
                    v27 = 0;
                  *((_DWORD *)v11 + 7) = v27;
                  v28 = ((_BYTE)v36 + 6) & 0x1F;
                }
                *((_DWORD *)v11 + 6) = v28;
                v29 = v26 >> 5;
                v38 = v26 > 0x3FF;
                v26 >>= 5;
              }
              while (v38);
            }
            else
            {
              v29 = a4 - v19;
            }
            v30 = (v29 << v28) | v27;
            *((_DWORD *)v11 + 7) = v30;
            v31 = v28 + 6;
            if (v31 >= 0x20)
            {
              result = sub_1C503027C((uint64_t *)v11, v30);
              v34 = *((_DWORD *)v11 + 6);
              v35 = v29 >> -(char)v34;
              if (!v34)
                v35 = 0;
              *((_DWORD *)v11 + 7) = v35;
              v31 = ((_BYTE)v34 + 6) & 0x1F;
            }
            *((_DWORD *)v11 + 6) = v31;
            for (i = v43; (_DWORD)a4 != v19; ++v19)
              result = sub_1C5034050(v11, v25, *(_QWORD *)(a3 + 8 * v19));
            v20 = 0;
            v19 = a4;
          }
          goto LABEL_13;
        }
        if (v24 == 5)
        {
          if (v20)
          {
            result = sub_1C50339C8(v11, a5, a6, 1);
            v20 = 0;
          }
          else
          {
            result = sub_1C61D2BE0(v11, (char *)(a3 + 8 * v19), a4 - v19, 1);
          }
          goto LABEL_13;
        }
        result = sub_1C5034050(v11, (uint64_t *)v22, *(_QWORD *)(a3 + 8 * v19));
      }
      ++v19;
LABEL_13:
      ++v18;
    }
    while (v18 != v17);
  }
  return result;
}

llvm::raw_ostream *sub_1C5034050(llvm::raw_ostream *result, uint64_t *a2, unint64_t a3)
{
  unsigned int v3;
  llvm::raw_ostream *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;

  v3 = a3;
  v4 = result;
  v5 = (*((unsigned __int8 *)a2 + 8) >> 1) & 7;
  if (v5 == 1)
  {
    v6 = *a2;
    if (!*a2)
      return result;
    v7 = *((_DWORD *)result + 6);
    v8 = *((_DWORD *)result + 7) | ((_DWORD)a3 << v7);
    *((_DWORD *)result + 7) = v8;
    v9 = v7 + v6;
    if (v9 < 0x20)
      goto LABEL_27;
    result = sub_1C503027C((uint64_t *)result, v8);
    v10 = *((_DWORD *)v4 + 6);
    v11 = v3 >> -(char)v10;
    if (!v10)
      v11 = 0;
    *((_DWORD *)v4 + 7) = v11;
    v12 = v10 + v6;
    goto LABEL_26;
  }
  if (v5 != 2)
  {
    if ((char)a3 == 46)
      v13 = 62;
    else
      v13 = 63;
    if (((char)a3 - 48) <= 9)
      v14 = (char)a3 + 4;
    else
      v14 = v13;
    if (((char)a3 - 65) <= 0x19)
      v15 = (char)a3 - 39;
    else
      v15 = v14;
    if ((a3 - 97) <= 0x19u)
      v16 = (char)a3 - 97;
    else
      v16 = v15;
    v17 = *((_DWORD *)result + 6);
    v18 = *((_DWORD *)result + 7) | (v16 << v17);
    *((_DWORD *)result + 7) = v18;
    v9 = v17 + 6;
    if (v9 < 0x20)
      goto LABEL_27;
    result = sub_1C503027C((uint64_t *)result, v18);
    v19 = *((_DWORD *)v4 + 6);
    v20 = v16 >> -(char)v19;
    if (!v19)
      v20 = 0;
    *((_DWORD *)v4 + 7) = v20;
    v12 = v19 + 6;
LABEL_26:
    v9 = v12 & 0x1F;
LABEL_27:
    *((_DWORD *)v4 + 6) = v9;
    return result;
  }
  if (*a2)
    return sub_1C5030AF8(result, a3, *a2);
  return result;
}

uint64_t sub_1C5034188(llvm::raw_ostream *a1, int a2, uint64_t a3)
{
  char *v6;
  _OWORD *v7;
  char *v8;

  sub_1C5034274(a1, a2);
  sub_1C5030898(a1, *(uint64_t **)a3);
  v6 = sub_1C5034320(a1, a2);
  v7 = (_OWORD *)*((_QWORD *)v6 + 2);
  if ((unint64_t)v7 < *((_QWORD *)v6 + 3))
  {
    *v7 = *(_OWORD *)a3;
    v8 = (char *)(v7 + 1);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    v8 = sub_1C5030C7C((char **)v6 + 1, a3);
  }
  *((_QWORD *)v6 + 2) = v8;
  return ((unint64_t)&v8[-*((_QWORD *)v6 + 1)] >> 4) + 3;
}

void sub_1C5034214(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = v2 - 3;
    do
    {
      if (*v4)
      {
        sub_1C4FF80DC(v4);
        operator delete((void *)*v4);
      }
      v5 = v4 - 1;
      v4 -= 4;
    }
    while (v5 != v3);
  }
  a1[1] = v3;
}

void sub_1C5034274(llvm::raw_ostream *a1, int a2)
{
  void *v4[2];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a1 + 9) != a2)
  {
    v4[0] = &v5;
    v5 = a2;
    v4[1] = (void *)0x200000001;
    sub_1C50343BC(a1, 1u, (uint64_t)v4, 0);
    *((_DWORD *)a1 + 9) = a2;
    if (v4[0] != &v5)
      free(v4[0]);
  }
}

char *sub_1C5034320(_QWORD *a1, int a2)
{
  uint64_t *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v9;
  uint64_t v10;

  v6 = (char *)a1[11];
  v5 = (char *)a1[12];
  v4 = a1 + 11;
  if (v6 == v5 || (v7 = v5 - 32, *((_DWORD *)v5 - 8) != a2))
  {
    if (((v5 - v6) & 0x1FFFFFFFE0) != 0)
    {
      v9 = ((unint64_t)(v5 - v6) >> 5);
      v7 = v6;
      while (*(_DWORD *)v7 != a2)
      {
        v7 += 32;
        if (!--v9)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      if ((unint64_t)v5 < a1[13])
      {
        v10 = (uint64_t)(v5 + 32);
        *(_OWORD *)v5 = 0u;
        *((_OWORD *)v5 + 1) = 0u;
      }
      else
      {
        v10 = sub_1C50345B0(v4);
      }
      a1[12] = v10;
      *(_DWORD *)(v10 - 32) = a2;
      return (char *)(v10 - 32);
    }
  }
  return v7;
}

llvm::raw_ostream *sub_1C50343BC(llvm::raw_ostream *result, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v5 = a2;
  v6 = result;
  if (a4)
    return sub_1C5033490(result, a4, *(_QWORD *)a3, *(unsigned int *)(a3 + 8), 0, 0, a2 | 0x100000000);
  v7 = *(unsigned int *)(a3 + 8);
  v8 = *((_DWORD *)result + 8);
  v9 = *((_DWORD *)result + 6);
  v10 = *((_DWORD *)result + 7) | (3 << v9);
  *((_DWORD *)result + 7) = v10;
  v11 = v9 + v8;
  if (v11 >= 0x20)
  {
    result = sub_1C503027C((uint64_t *)result, v10);
    v19 = *((_DWORD *)v6 + 6);
    if (v19)
      v10 = 3u >> -(char)v19;
    else
      v10 = 0;
    *((_DWORD *)v6 + 7) = v10;
    v11 = ((_BYTE)v19 + (_BYTE)v8) & 0x1F;
  }
  *((_DWORD *)v6 + 6) = v11;
  if (v5 >= 0x20)
  {
    do
    {
      v23 = v5;
      result = sub_1C5030204(v6, v5 & 0x1F | 0x20, 6);
      v5 >>= 5;
    }
    while (v23 > 0x3FF);
    v11 = *((_DWORD *)v6 + 6);
    v10 = *((_DWORD *)v6 + 7);
  }
  v12 = (v5 << v11) | v10;
  *((_DWORD *)v6 + 7) = v12;
  v13 = v11 + 6;
  if (v13 >= 0x20)
  {
    result = sub_1C503027C((uint64_t *)v6, v12);
    v20 = *((_DWORD *)v6 + 6);
    if (v20)
      v12 = v5 >> -(char)v20;
    else
      v12 = 0;
    *((_DWORD *)v6 + 7) = v12;
    v13 = ((_BYTE)v20 + 6) & 0x1F;
  }
  *((_DWORD *)v6 + 6) = v13;
  v14 = v7;
  if (v7 >= 0x20)
  {
    v14 = v7;
    do
    {
      v24 = v14;
      result = sub_1C5030204(v6, v14 & 0x1F | 0x20, 6);
      v14 >>= 5;
    }
    while (v24 > 0x3FF);
    v13 = *((_DWORD *)v6 + 6);
    v12 = *((_DWORD *)v6 + 7);
  }
  v15 = (v14 << v13) | v12;
  *((_DWORD *)v6 + 7) = v15;
  v16 = v13 + 6;
  if (v16 >= 0x20)
  {
    result = sub_1C503027C((uint64_t *)v6, v15);
    v21 = *((_DWORD *)v6 + 6);
    v22 = v14 >> -(char)v21;
    if (!v21)
      v22 = 0;
    *((_DWORD *)v6 + 7) = v22;
    v16 = ((_BYTE)v21 + 6) & 0x1F;
  }
  *((_DWORD *)v6 + 6) = v16;
  if ((_DWORD)v7)
  {
    v17 = 0;
    v18 = 4 * v7;
    do
    {
      result = sub_1C5030AF8(v6, *(unsigned int *)(*(_QWORD *)a3 + v17), 6);
      v17 += 4;
    }
    while (v18 != v17);
  }
  return result;
}

uint64_t sub_1C50345B0(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *i;
  uint64_t *v11;
  uint64_t v12;
  void *__p;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  uint64_t *v18;

  v1 = (a1[1] - *a1) >> 5;
  v2 = v1 + 1;
  if ((unint64_t)(v1 + 1) >> 59)
    abort();
  v4 = a1[2] - *a1;
  if (v4 >> 4 > v2)
    v2 = v4 >> 4;
  if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFE0)
    v5 = 0x7FFFFFFFFFFFFFFLL;
  else
    v5 = v2;
  v18 = a1 + 2;
  if (v5 >> 59)
    sub_1C4764EE4();
  v6 = (char *)operator new(32 * v5);
  v7 = &v6[32 * v1];
  __p = v6;
  v15 = (uint64_t *)v7;
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v16 = (uint64_t *)(v7 + 32);
  v17 = &v6[32 * v5];
  sub_1C50346AC(a1, &__p);
  v8 = a1[1];
  v9 = v15;
LABEL_9:
  for (i = v16; i != v9; i = v11 - 1)
  {
    v12 = *(i - 3);
    v11 = i - 3;
    v16 = v11 - 1;
    if (v12)
    {
      sub_1C4FF80DC(v11);
      operator delete((void *)*v11);
      goto LABEL_9;
    }
  }
  if (__p)
    operator delete(__p);
  return v8;
}

uint64_t *sub_1C50346AC(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

llvm::raw_ostream *sub_1C5034740(llvm::raw_ostream *result, unsigned int a2, uint64_t a3, unsigned int a4)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  int v26;

  v6 = result;
  if (a4)
    return sub_1C5033D5C(result, a4, *(_QWORD *)a3, *(unsigned int *)(a3 + 8), 0, 0, a2 | 0x100000000);
  v7 = *(unsigned int *)(a3 + 8);
  v8 = *((_DWORD *)result + 8);
  v9 = *((_DWORD *)result + 6);
  v10 = *((_DWORD *)result + 7) | (3 << v9);
  *((_DWORD *)result + 7) = v10;
  v11 = v9 + v8;
  if (v11 >= 0x20)
  {
    result = sub_1C503027C((uint64_t *)result, v10);
    v19 = *((_DWORD *)v6 + 6);
    if (v19)
      v10 = 3u >> -(char)v19;
    else
      v10 = 0;
    v11 = ((_BYTE)v19 + (_BYTE)v8) & 0x1F;
  }
  v12 = (a2 << v11) | v10;
  *((_DWORD *)v6 + 6) = v11;
  *((_DWORD *)v6 + 7) = v12;
  if (v11 >= 0x1A)
  {
    result = sub_1C503027C((uint64_t *)v6, v12);
    v20 = *((_DWORD *)v6 + 6);
    if (v20)
      v12 = a2 >> -(char)v20;
    else
      v12 = 0;
    v13 = ((_BYTE)v20 + 6) & 0x1F;
  }
  else
  {
    v13 = v11 + 6;
  }
  *((_DWORD *)v6 + 6) = v13;
  if (v7 >= 0x20)
  {
    v23 = v7;
    do
    {
      v24 = v23 & 0x1F | 0x20;
      v12 |= v24 << v13;
      *((_DWORD *)v6 + 7) = v12;
      if (v13 >= 0x1A)
      {
        result = sub_1C503027C((uint64_t *)v6, v12);
        v26 = *((_DWORD *)v6 + 6);
        if (v26)
          v12 = v24 >> -(char)v26;
        else
          v12 = 0;
        *((_DWORD *)v6 + 7) = v12;
        v13 = ((_BYTE)v26 + 6) & 0x1F;
      }
      else
      {
        v13 += 6;
      }
      *((_DWORD *)v6 + 6) = v13;
      v14 = v23 >> 5;
      v25 = v23 > 0x3FF;
      v23 >>= 5;
    }
    while (v25);
  }
  else
  {
    v14 = v7;
  }
  v15 = (v14 << v13) | v12;
  *((_DWORD *)v6 + 7) = v15;
  if (v13 >= 0x1A)
  {
    result = sub_1C503027C((uint64_t *)v6, v15);
    v21 = *((_DWORD *)v6 + 6);
    v22 = v14 >> -(char)v21;
    if (!v21)
      v22 = 0;
    *((_DWORD *)v6 + 7) = v22;
    v16 = ((_BYTE)v21 + 6) & 0x1F;
  }
  else
  {
    v16 = v13 + 6;
  }
  *((_DWORD *)v6 + 6) = v16;
  if ((_DWORD)v7)
  {
    v17 = 0;
    v18 = 8 * v7;
    do
    {
      result = sub_1C5030AF8(v6, *(_QWORD *)(*(_QWORD *)a3 + v17), 6);
      v17 += 8;
    }
    while (v18 != v17);
  }
  return result;
}

uint64_t sub_1C503492C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;

  v6[0] = a2;
  v6[1] = a3;
  if (!a3)
    return 0;
  v7 = 0;
  if (sub_1C5034A28((uint64_t *)(a1 + 272), (uint64_t)v6, &v7))
    v4 = v7;
  else
    v4 = *(_QWORD *)(a1 + 272) + 24 * *(unsigned int *)(a1 + 288);
  return *(unsigned int *)(v4 + 16);
}

uint64_t sub_1C5034994(int a1)
{
  return qword_1C85FA1A8[a1 - 1];
}

unsigned int *sub_1C50349A8(unsigned int *result, char *a2, char *a3)
{
  char *v4;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = a2;
  v5 = result;
  v6 = (_DWORD)a3 - (_DWORD)a2;
  v7 = result[2];
  v8 = a3 - a2 + v7;
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 8);
    v7 = v5[2];
  }
  if (v4 != a3)
  {
    v9 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v10 = *v4++;
      *v9++ = v10;
    }
    while (v4 != a3);
  }
  v5[2] = v7 + v6;
  return result;
}

uint64_t sub_1C5034A28(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = ((v5 >> 4) ^ (v5 >> 9) | ((unint64_t)(37 * *(_DWORD *)a2) << 32))
       + ~((unint64_t)((v5 >> 4) ^ (v5 >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = *a1 + 24 * v11;
    v13 = *(_DWORD *)v12;
    v14 = *(_QWORD *)(v12 + 8);
    if (*(_DWORD *)a2 == *(_DWORD *)v12 && v5 == v14)
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v13 != -1 || v14 != -4)
      {
        if (v16)
          v19 = 0;
        else
          v19 = v14 == -8;
        if (v19 && v13 == -2)
          v16 = v12;
        v21 = v11 + v17++;
        v11 = v21 & v10;
        v12 = v4 + 24 * (v21 & v10);
        v13 = *(_DWORD *)v12;
        v14 = *(_QWORD *)(v12 + 8);
        if (*(_DWORD *)a2 == *(_DWORD *)v12 && v5 == v14)
          goto LABEL_8;
      }
      result = 0;
      if (v16)
        v12 = v16;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v12;
  return result;
}

unint64_t sub_1C5034B2C(uint64_t a1, _BYTE *a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 552))
    llvm::SHA1::update((_DWORD *)(a1 + 568), a2, a3);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = a3 | ((unint64_t)sub_1C5E3DF4C(a2, (uint64_t)&a2[a3]) << 32);
  return llvm::StringTableBuilder::add(v6, (uint64_t)a2, v7);
}

uint64_t sub_1C5034B90(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 72);
  if (!v2)
    return 0;
  v4 = a2;
  v5 = v2;
  return llvm::AttributeList::get(**(uint64_t ***)a1, (uint64_t)&v4, 1uLL);
}

uint64_t sub_1C5034C00(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

void sub_1C5034C9C(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  unsigned int v5;
  unsigned int v6;
  char *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  llvm::ConstantDataSequential *v29;
  uint64_t *v30;
  uint64_t **v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  llvm::APInt *v37;
  unsigned int v38;
  uint64_t **v39;
  unsigned int v40;
  llvm::detail::DoubleAPFloat *v41;
  void *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  int isCString;
  _BOOL4 v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  uint64_t v56;
  _BOOL4 v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  llvm::raw_ostream *v76;
  unsigned int v77;
  llvm::detail::DoubleAPFloat *v78;
  void *v79;
  unsigned int v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t **v87;
  uint64_t *v88;
  int v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  llvm::detail::DoubleAPFloat *v95;
  void *v96;
  uint64_t **v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int i;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  llvm::ConstantDataSequential *v105;
  uint64_t **v106;
  int j;
  uint64_t *v108;
  uint64_t v109;
  unsigned int v110;
  int v111;
  int v112;
  uint64_t ***v113;
  uint64_t **v114;
  int v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t **v123;
  unsigned __int16 v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  uint64_t ***v128;
  int v129;
  uint64_t ***v130;
  int v131;
  uint64_t *v132;
  int v133;
  uint64_t *v134;
  int v135;
  uint64_t ***v136;
  uint64_t **v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t *v141;
  unsigned int ValueID;
  uint64_t v143;
  int v144;
  char *v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t *v152;
  unsigned int v153;
  int v154;
  uint64_t *v155;
  uint64_t **v156;
  uint64_t **v157;
  unsigned int v158;
  uint64_t v159;
  int v160;
  char *v161;
  unsigned int v162;
  uint64_t v163;
  int v164;
  char *v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t *v169;
  unsigned int v170;
  uint64_t v171;
  int v172;
  char *v173;
  unsigned int v174;
  uint64_t v175;
  int v176;
  char *v177;
  unsigned int v178;
  uint64_t v179;
  int v180;
  char *v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t **v184;
  uint64_t **v185;
  int v186;
  uint64_t v187;
  int v188;
  char *v189;
  int v190;
  uint64_t v191;
  int v192;
  char *v193;
  unsigned int v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t **v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  char *v213;
  uint64_t **v214;
  int v215;
  uint64_t v216;
  int v217;
  char *v218;
  unsigned int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t *v223;
  unsigned int v224;
  uint64_t v225;
  int v226;
  char *v227;
  unsigned int v228;
  uint64_t v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t **v232;
  unsigned int v233;
  uint64_t v234;
  int v235;
  char *v236;
  int v237;
  uint64_t v238;
  int v239;
  uint64_t *v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int GlobalBasicBlockID;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  llvm::ValueEnumerator *v258;
  uint64_t *v259;
  uint64_t **v260;
  unsigned int v261;
  char *v262;
  std::__shared_weak_count *v263;
  char *v264;
  std::__shared_weak_count *v265;
  char *v266;
  std::__shared_weak_count *v267;
  char *v268;
  std::__shared_weak_count *v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  _QWORD v275[66];

  v275[64] = *MEMORY[0x1E0C80C00];
  if (a2 != a3)
  {
    v5 = a3;
    v6 = a2;
    sub_1C50244C4(*(_QWORD *)a1, 0xBu, 4u);
    if (a4)
    {
      v8 = (char *)operator new(0x228uLL);
      *(_QWORD *)v8 = &unk_1E813F300;
      *((_QWORD *)v8 + 1) = 0;
      *(_OWORD *)(v8 + 88) = 0u;
      *(_OWORD *)(v8 + 104) = 0u;
      *(_OWORD *)(v8 + 120) = 0u;
      *(_OWORD *)(v8 + 136) = 0u;
      *(_OWORD *)(v8 + 152) = 0u;
      *(_OWORD *)(v8 + 168) = 0u;
      *(_OWORD *)(v8 + 184) = 0u;
      *(_OWORD *)(v8 + 200) = 0u;
      *(_OWORD *)(v8 + 216) = 0u;
      *(_OWORD *)(v8 + 232) = 0u;
      *(_OWORD *)(v8 + 248) = 0u;
      *(_OWORD *)(v8 + 264) = 0u;
      *(_OWORD *)(v8 + 280) = 0u;
      *(_OWORD *)(v8 + 296) = 0u;
      *(_OWORD *)(v8 + 312) = 0u;
      *(_OWORD *)(v8 + 328) = 0u;
      *(_OWORD *)(v8 + 344) = 0u;
      *(_OWORD *)(v8 + 360) = 0u;
      *(_OWORD *)(v8 + 376) = 0u;
      *(_OWORD *)(v8 + 392) = 0u;
      *(_OWORD *)(v8 + 408) = 0u;
      *(_OWORD *)(v8 + 424) = 0u;
      *(_OWORD *)(v8 + 440) = 0u;
      *(_OWORD *)(v8 + 456) = 0u;
      *(_OWORD *)(v8 + 472) = 0u;
      *(_OWORD *)(v8 + 488) = 0u;
      *(_OWORD *)(v8 + 504) = 0u;
      *(_OWORD *)(v8 + 40) = xmmword_1C85F9F20;
      *(_OWORD *)(v8 + 520) = 0u;
      *(_OWORD *)(v8 + 536) = 0u;
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 3) = v8 + 40;
      *(_OWORD *)(v8 + 56) = xmmword_1C85F9DD0;
      v9 = *(_QWORD *)a1;
      *((_QWORD *)v8 + 9) = 32 - __clz(v5);
      *((_QWORD *)v8 + 10) = 2;
      *((_QWORD *)v8 + 4) = 0x2000000003;
      v268 = v8 + 24;
      v269 = (std::__shared_weak_count *)v8;
      HIDWORD(v257) = sub_1C50247B8(v9, (uint64_t)&v268);
      v10 = v269;
      if (v269)
      {
        p_shared_owners = (unint64_t *)&v269->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (char *)operator new(0x228uLL);
      *(_QWORD *)v13 = &unk_1E813F300;
      *((_QWORD *)v13 + 1) = 0;
      *(_OWORD *)(v13 + 88) = 0u;
      *(_OWORD *)(v13 + 104) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(_OWORD *)(v13 + 136) = 0u;
      *(_OWORD *)(v13 + 152) = 0u;
      *(_OWORD *)(v13 + 168) = 0u;
      *(_OWORD *)(v13 + 184) = 0u;
      *(_OWORD *)(v13 + 200) = 0u;
      *(_OWORD *)(v13 + 216) = 0u;
      *(_OWORD *)(v13 + 232) = 0u;
      *(_OWORD *)(v13 + 248) = 0u;
      *(_OWORD *)(v13 + 264) = 0u;
      *(_OWORD *)(v13 + 280) = 0u;
      *(_OWORD *)(v13 + 296) = 0u;
      *(_OWORD *)(v13 + 312) = 0u;
      *(_OWORD *)(v13 + 328) = 0u;
      *(_OWORD *)(v13 + 344) = 0u;
      *(_OWORD *)(v13 + 360) = 0u;
      *(_OWORD *)(v13 + 376) = 0u;
      *(_OWORD *)(v13 + 392) = 0u;
      *(_OWORD *)(v13 + 408) = 0u;
      *(_OWORD *)(v13 + 424) = 0u;
      *(_OWORD *)(v13 + 440) = 0u;
      *(_OWORD *)(v13 + 456) = 0u;
      *(_OWORD *)(v13 + 472) = 0u;
      *(_OWORD *)(v13 + 488) = 0u;
      *(_OWORD *)(v13 + 504) = 0u;
      *(_OWORD *)(v13 + 520) = 0u;
      *(_OWORD *)(v13 + 536) = 0u;
      *(_OWORD *)(v13 + 40) = xmmword_1C85F9EC0;
      *((_QWORD *)v13 + 2) = 0;
      *((_QWORD *)v13 + 3) = v13 + 40;
      *(_OWORD *)(v13 + 56) = xmmword_1C85F9DD0;
      v14 = *(_QWORD *)a1;
      *(_OWORD *)(v13 + 72) = xmmword_1C85F6850;
      *((_QWORD *)v13 + 4) = 0x2000000003;
      v266 = v13 + 24;
      v267 = (std::__shared_weak_count *)v13;
      LODWORD(v257) = sub_1C50247B8(v14, (uint64_t)&v266);
      v15 = v267;
      if (v267)
      {
        v16 = (unint64_t *)&v267->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (char *)operator new(0x228uLL);
      *(_QWORD *)v18 = &unk_1E813F300;
      *((_QWORD *)v18 + 1) = 0;
      *(_OWORD *)(v18 + 88) = 0u;
      *(_OWORD *)(v18 + 104) = 0u;
      *(_OWORD *)(v18 + 120) = 0u;
      *(_OWORD *)(v18 + 136) = 0u;
      *(_OWORD *)(v18 + 152) = 0u;
      *(_OWORD *)(v18 + 168) = 0u;
      *(_OWORD *)(v18 + 184) = 0u;
      *(_OWORD *)(v18 + 200) = 0u;
      *(_OWORD *)(v18 + 216) = 0u;
      *(_OWORD *)(v18 + 232) = 0u;
      *(_OWORD *)(v18 + 248) = 0u;
      *(_OWORD *)(v18 + 264) = 0u;
      *(_OWORD *)(v18 + 280) = 0u;
      *(_OWORD *)(v18 + 296) = 0u;
      *(_OWORD *)(v18 + 312) = 0u;
      *(_OWORD *)(v18 + 328) = 0u;
      *(_OWORD *)(v18 + 344) = 0u;
      *(_OWORD *)(v18 + 360) = 0u;
      *(_OWORD *)(v18 + 376) = 0u;
      *(_OWORD *)(v18 + 392) = 0u;
      *(_OWORD *)(v18 + 408) = 0u;
      *(_OWORD *)(v18 + 424) = 0u;
      *(_OWORD *)(v18 + 440) = 0u;
      *(_OWORD *)(v18 + 456) = 0u;
      *(_OWORD *)(v18 + 472) = 0u;
      *(_OWORD *)(v18 + 488) = 0u;
      *(_OWORD *)(v18 + 504) = 0u;
      *(_OWORD *)(v18 + 520) = 0u;
      *(_OWORD *)(v18 + 536) = 0u;
      *(_OWORD *)(v18 + 40) = xmmword_1C85FA010;
      *((_QWORD *)v18 + 2) = 0;
      *((_QWORD *)v18 + 3) = v18 + 40;
      *(_OWORD *)(v18 + 56) = xmmword_1C85F9DD0;
      v19 = *(_QWORD *)a1;
      *(_OWORD *)(v18 + 72) = xmmword_1C85F6870;
      *((_QWORD *)v18 + 4) = 0x2000000003;
      v264 = v18 + 24;
      v265 = (std::__shared_weak_count *)v18;
      HIDWORD(v256) = sub_1C50247B8(v19, (uint64_t)&v264);
      v20 = v265;
      if (v265)
      {
        v21 = (unint64_t *)&v265->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (char *)operator new(0x228uLL);
      *(_QWORD *)v23 = &unk_1E813F300;
      *((_QWORD *)v23 + 1) = 0;
      *(_OWORD *)(v23 + 88) = 0u;
      *(_OWORD *)(v23 + 104) = 0u;
      *(_OWORD *)(v23 + 120) = 0u;
      *(_OWORD *)(v23 + 136) = 0u;
      *(_OWORD *)(v23 + 152) = 0u;
      *(_OWORD *)(v23 + 168) = 0u;
      *(_OWORD *)(v23 + 184) = 0u;
      *(_OWORD *)(v23 + 200) = 0u;
      *(_OWORD *)(v23 + 216) = 0u;
      *(_OWORD *)(v23 + 232) = 0u;
      *(_OWORD *)(v23 + 248) = 0u;
      *(_OWORD *)(v23 + 264) = 0u;
      *(_OWORD *)(v23 + 280) = 0u;
      *(_OWORD *)(v23 + 296) = 0u;
      *(_OWORD *)(v23 + 312) = 0u;
      *(_OWORD *)(v23 + 328) = 0u;
      *(_OWORD *)(v23 + 344) = 0u;
      *(_OWORD *)(v23 + 360) = 0u;
      *(_OWORD *)(v23 + 376) = 0u;
      *(_OWORD *)(v23 + 392) = 0u;
      *(_OWORD *)(v23 + 408) = 0u;
      *(_OWORD *)(v23 + 424) = 0u;
      *(_OWORD *)(v23 + 440) = 0u;
      *(_OWORD *)(v23 + 456) = 0u;
      *(_OWORD *)(v23 + 472) = 0u;
      *(_OWORD *)(v23 + 488) = 0u;
      *(_OWORD *)(v23 + 504) = 0u;
      *(_OWORD *)(v23 + 520) = 0u;
      *(_OWORD *)(v23 + 536) = 0u;
      *(_OWORD *)(v23 + 40) = xmmword_1C85FA010;
      *((_QWORD *)v23 + 2) = 0;
      *((_QWORD *)v23 + 3) = v23 + 40;
      *(_OWORD *)(v23 + 56) = xmmword_1C85F9DD0;
      v24 = *(_QWORD *)a1;
      *(_OWORD *)(v23 + 72) = xmmword_1C6464ED0;
      *((_QWORD *)v23 + 4) = 0x2000000003;
      v262 = v23 + 24;
      v263 = (std::__shared_weak_count *)v23;
      LODWORD(v256) = sub_1C50247B8(v24, (uint64_t)&v262);
      v25 = v263;
      if (v263)
      {
        v26 = (unint64_t *)&v263->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      v256 = 0;
      v257 = 0;
    }
    v28 = 0;
    v273 = v275;
    v259 = (uint64_t *)(a1 + 48);
    v274 = 0x4000000000;
    v258 = (llvm::ValueEnumerator *)(a1 + 24);
    while (1)
    {
      v29 = *(llvm::ConstantDataSequential **)(*(_QWORD *)(a1 + 120) + 16 * v6);
      v30 = *(uint64_t **)v29;
      if (*(uint64_t **)v29 != v28)
      {
        v270 = *(uint64_t **)v29;
        v260 = 0;
        if (sub_1C4DD8A9C(v259, &v270, &v260))
          v31 = v260;
        else
          v31 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64));
        v32 = *((_DWORD *)v31 + 2);
        v33 = v274;
        if (v274 >= (unint64_t)HIDWORD(v274))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
          v33 = v274;
        }
        *((_QWORD *)v273 + v33) = (v32 - 1);
        LODWORD(v274) = v274 + 1;
        sub_1C5033D5C(*(llvm::raw_ostream **)a1, 4u, (uint64_t)v273, v274, 0, 0, 0x100000001);
        LODWORD(v274) = 0;
        v28 = v30;
      }
      if (*((_BYTE *)v29 + 16) == 24)
      {
        v270 = (uint64_t *)*((_QWORD *)v29 + 9);
        v260 = 0;
        if (sub_1C4DD8A9C(v259, &v270, &v260))
          v39 = v260;
        else
          v39 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64));
        v61 = *((_DWORD *)v39 + 2);
        v62 = v274;
        if (v274 >= (unint64_t)HIDWORD(v274))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
          v62 = v274;
        }
        *((_QWORD *)v273 + v62) = (v61 - 1);
        v63 = (v274 + 1);
        LODWORD(v274) = v63;
        v64 = *((unsigned __int8 *)v29 + 80);
        v65 = *((unsigned __int8 *)v29 + 81);
        v66 = *((_DWORD *)v29 + 21);
        v67 = *((unsigned __int8 *)v29 + 88);
        if (v63 >= HIDWORD(v274))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v63 + 1, 8);
          LODWORD(v63) = v274;
        }
        *((_QWORD *)v273 + v63) = v64 | (2 * v65) | (4 * (v66 & 1)) | (8 * v67);
        v68 = (v274 + 1);
        LODWORD(v274) = v274 + 1;
        if (*((char *)v29 + 47) < 0)
          v69 = *((_QWORD *)v29 + 4);
        else
          v69 = *((unsigned __int8 *)v29 + 47);
        if (v68 >= HIDWORD(v274))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v68 + 1, 8);
          LODWORD(v68) = v274;
        }
        *((_QWORD *)v273 + v68) = v69;
        LODWORD(v274) = v274 + 1;
        if (*((char *)v29 + 47) < 0)
        {
          v70 = (char *)*((_QWORD *)v29 + 3);
          v71 = *((_QWORD *)v29 + 4);
        }
        else
        {
          v70 = (char *)v29 + 24;
          v71 = *((unsigned __int8 *)v29 + 47);
        }
        sub_1C61D2CDC((unsigned int *)&v273, v70, &v70[v71]);
        if (*((char *)v29 + 71) < 0)
          v72 = *((_QWORD *)v29 + 7);
        else
          v72 = *((unsigned __int8 *)v29 + 71);
        v73 = v274;
        if (v274 >= (unint64_t)HIDWORD(v274))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
          v73 = v274;
        }
        *((_QWORD *)v273 + v73) = v72;
        LODWORD(v274) = v274 + 1;
        if (*((char *)v29 + 71) < 0)
        {
          v74 = (char *)*((_QWORD *)v29 + 6);
          v75 = *((_QWORD *)v29 + 7);
        }
        else
        {
          v74 = (char *)v29 + 48;
          v75 = *((unsigned __int8 *)v29 + 71);
        }
        sub_1C61D2CDC((unsigned int *)&v273, v74, &v74[v75]);
        v76 = *(llvm::raw_ostream **)a1;
        v77 = 30;
        v34 = 0;
        goto LABEL_140;
      }
      if ((llvm::Constant::isNullValue(v29) & 1) != 0)
      {
        v34 = 0;
        v35 = 2;
      }
      else
      {
        v36 = *((unsigned __int8 *)v29 + 16);
        if (v36 == 12)
        {
          v34 = 0;
          v35 = 26;
        }
        else if ((v36 - 11) >= 2)
        {
          if (v36 == 17)
          {
            v40 = *(unsigned __int8 *)(*(_QWORD *)v29 + 8);
            if (v40 < 4)
            {
              v42 = (void *)*((_QWORD *)v29 + 4);
              v41 = (llvm::ConstantDataSequential *)((char *)v29 + 32);
              if (v42 == &unk_1C866F1C0)
                llvm::detail::DoubleAPFloat::bitcastToAPInt(v41, (unsigned int *)&v270);
              else
                llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v41, (unsigned int *)&v270);
              v43 = (uint64_t *)&v270;
              if (v271 >= 0x41)
                v43 = v270;
              v44 = *v43;
              v45 = v274;
              if (v274 >= (unint64_t)HIDWORD(v274))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                v45 = v274;
              }
              *((_QWORD *)v273 + v45) = v44;
              goto LABEL_135;
            }
            if (v40 - 5 >= 2)
            {
              if (v40 == 4)
              {
                v96 = (void *)*((_QWORD *)v29 + 4);
                v95 = (llvm::ConstantDataSequential *)((char *)v29 + 32);
                if (v96 == &unk_1C866F1C0)
                  llvm::detail::DoubleAPFloat::bitcastToAPInt(v95, (unsigned int *)&v270);
                else
                  llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v95, (unsigned int *)&v270);
                if (v271 >= 0x41)
                  v97 = (uint64_t **)v270;
                else
                  v97 = &v270;
                v98 = *(uint64_t *)((char *)v97 + 2);
                v99 = v274;
                if (v274 >= (unint64_t)HIDWORD(v274))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                  v99 = v274;
                }
                *((_QWORD *)v273 + v99) = v98;
                v85 = HIDWORD(v274);
                v86 = (v274 + 1);
                LODWORD(v274) = v274 + 1;
                v88 = (uint64_t *)*(unsigned __int16 *)v97;
                goto LABEL_132;
              }
            }
            else
            {
              v79 = (void *)*((_QWORD *)v29 + 4);
              v78 = (llvm::ConstantDataSequential *)((char *)v29 + 32);
              if (v79 == &unk_1C866F1C0)
                llvm::detail::DoubleAPFloat::bitcastToAPInt(v78, (unsigned int *)&v270);
              else
                llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v78, (unsigned int *)&v270);
              v80 = v271;
              v81 = v270;
              v82 = (uint64_t *)&v270;
              if (v271 >= 0x41)
                v82 = v270;
              v83 = *v82;
              v84 = v274;
              if (v274 >= (unint64_t)HIDWORD(v274))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                v84 = v274;
              }
              *((_QWORD *)v273 + v84) = v83;
              v85 = HIDWORD(v274);
              v86 = (v274 + 1);
              LODWORD(v274) = v274 + 1;
              v87 = &v270;
              if (v80 >= 0x41)
                v87 = (uint64_t **)v81;
              v88 = v87[1];
LABEL_132:
              if (v86 >= v85)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v86 + 1, 8);
                LODWORD(v86) = v274;
              }
              *((_QWORD *)v273 + v86) = v88;
LABEL_135:
              LODWORD(v274) = v274 + 1;
              if (v271 >= 0x41 && v270)
                MEMORY[0x1CAA32F9C](v270, 0x1000C8000313F17);
            }
            v34 = 0;
            v35 = 6;
            goto LABEL_139;
          }
          if (v36 == 16)
          {
            v37 = (llvm::ConstantDataSequential *)((char *)v29 + 24);
            v38 = *((_DWORD *)v29 + 8);
            if (v38 > 0x40)
            {
              sub_1C5036C74(&v273, v37);
              v34 = 0;
              v35 = 5;
            }
            else
            {
              sub_1C5036C04(&v273, (uint64_t)(*(_QWORD *)v37 << -(char)v38) >> -(char)v38);
              v34 = 5;
              v35 = 4;
            }
            goto LABEL_139;
          }
          if ((v36 & 0xFE) != 0xE)
          {
            if ((v36 - 8) > 2)
            {
              if (v36 == 5)
              {
                v111 = *((unsigned __int16 *)v29 + 9);
                switch(*((_WORD *)v29 + 9))
                {
                  case '5':
                  case '6':
                    v112 = *((_DWORD *)v29 + 5);
                    if ((v112 & 0x40000000) != 0)
                      v113 = (uint64_t ***)*((_QWORD *)v29 - 1);
                    else
                      v113 = (uint64_t ***)((char *)v29 - 32 * (v112 & 0x7FFFFFF));
                    v270 = **v113;
                    v260 = 0;
                    if (sub_1C4DD8A9C(v259, &v270, &v260))
                      v137 = v260;
                    else
                      v137 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64));
                    v138 = *((_DWORD *)v137 + 2);
                    v139 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v139 = v274;
                    }
                    *((_QWORD *)v273 + v139) = (v138 - 1);
                    LODWORD(v274) = v274 + 1;
                    v140 = *((_DWORD *)v29 + 5);
                    if ((v140 & 0x40000000) != 0)
                      v141 = (uint64_t *)*((_QWORD *)v29 - 1);
                    else
                      v141 = (uint64_t *)((char *)v29 - 32 * (v140 & 0x7FFFFFF));
                    ValueID = llvm::ValueEnumerator::getValueID((uint64_t)v258, *v141);
                    v143 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v143 = v274;
                    }
                    *((_QWORD *)v273 + v143) = ValueID;
                    LODWORD(v274) = v274 + 1;
                    v144 = *((_DWORD *)v29 + 5);
                    if ((v144 & 0x40000000) != 0)
                      v145 = (char *)*((_QWORD *)v29 - 1);
                    else
                      v145 = (char *)v29 - 32 * (v144 & 0x7FFFFFF);
                    v146 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *((_QWORD *)v145 + 4));
                    v147 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v147 = v274;
                    }
                    *((_QWORD *)v273 + v147) = v146;
                    v148 = (v274 + 1);
                    LODWORD(v274) = v148;
                    v149 = *((unsigned __int16 *)v29 + 12);
                    if (v148 >= HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v148 + 1, 8);
                      LODWORD(v148) = v274;
                    }
                    v34 = 0;
                    *((_QWORD *)v273 + v148) = v149;
                    LODWORD(v274) = v274 + 1;
                    v35 = 17;
                    goto LABEL_139;
                  case '7':
                  case '8':
                  case ':':
                  case ';':
                  case '<':
                    goto LABEL_205;
                  case '9':
                    v131 = *((_DWORD *)v29 + 5);
                    if ((v131 & 0x40000000) != 0)
                      v132 = (uint64_t *)*((_QWORD *)v29 - 1);
                    else
                      v132 = (uint64_t *)((char *)v29 - 32 * (v131 & 0x7FFFFFF));
                    v158 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *v132);
                    v159 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v159 = v274;
                    }
                    *((_QWORD *)v273 + v159) = v158;
                    LODWORD(v274) = v274 + 1;
                    v160 = *((_DWORD *)v29 + 5);
                    if ((v160 & 0x40000000) != 0)
                      v161 = (char *)*((_QWORD *)v29 - 1);
                    else
                      v161 = (char *)v29 - 32 * (v160 & 0x7FFFFFF);
                    v170 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *((_QWORD *)v161 + 4));
                    v171 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v171 = v274;
                    }
                    *((_QWORD *)v273 + v171) = v170;
                    LODWORD(v274) = v274 + 1;
                    v172 = *((_DWORD *)v29 + 5);
                    if ((v172 & 0x40000000) != 0)
                      v173 = (char *)*((_QWORD *)v29 - 1);
                    else
                      v173 = (char *)v29 - 32 * (v172 & 0x7FFFFFF);
                    v182 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *((_QWORD *)v173 + 8));
                    v183 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v183 = v274;
                    }
                    v34 = 0;
                    *((_QWORD *)v273 + v183) = v182;
                    LODWORD(v274) = v274 + 1;
                    v35 = 13;
                    goto LABEL_139;
                  case '=':
                    v129 = *((_DWORD *)v29 + 5);
                    if ((v129 & 0x40000000) != 0)
                      v130 = (uint64_t ***)*((_QWORD *)v29 - 1);
                    else
                      v130 = (uint64_t ***)((char *)v29 - 32 * (v129 & 0x7FFFFFF));
                    v270 = **v130;
                    v260 = 0;
                    if (sub_1C4DD8A9C(v259, &v270, &v260))
                      v157 = v260;
                    else
                      v157 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64));
                    v166 = *((_DWORD *)v157 + 2);
                    v167 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v167 = v274;
                    }
                    *((_QWORD *)v273 + v167) = (v166 - 1);
                    LODWORD(v274) = v274 + 1;
                    v168 = *((_DWORD *)v29 + 5);
                    if ((v168 & 0x40000000) != 0)
                      v169 = (uint64_t *)*((_QWORD *)v29 - 1);
                    else
                      v169 = (uint64_t *)((char *)v29 - 32 * (v168 & 0x7FFFFFF));
                    v178 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *v169);
                    v179 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v179 = v274;
                    }
                    *((_QWORD *)v273 + v179) = v178;
                    LODWORD(v274) = v274 + 1;
                    v180 = *((_DWORD *)v29 + 5);
                    if ((v180 & 0x40000000) != 0)
                      v181 = (char *)*((_QWORD *)v29 - 1);
                    else
                      v181 = (char *)v29 - 32 * (v180 & 0x7FFFFFF);
                    v270 = (uint64_t *)**((_QWORD **)v181 + 4);
                    v260 = 0;
                    if (sub_1C4DD8A9C(v259, &v270, &v260))
                      v185 = v260;
                    else
                      v185 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64));
                    v190 = *((_DWORD *)v185 + 2);
                    v191 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v191 = v274;
                    }
                    *((_QWORD *)v273 + v191) = (v190 - 1);
                    LODWORD(v274) = v274 + 1;
                    v192 = *((_DWORD *)v29 + 5);
                    if ((v192 & 0x40000000) != 0)
                      v193 = (char *)*((_QWORD *)v29 - 1);
                    else
                      v193 = (char *)v29 - 32 * (v192 & 0x7FFFFFF);
                    v196 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *((_QWORD *)v193 + 4));
                    v197 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v197 = v274;
                    }
                    v34 = 0;
                    *((_QWORD *)v273 + v197) = v196;
                    LODWORD(v274) = v274 + 1;
                    v35 = 14;
                    goto LABEL_139;
                  case '>':
                    v133 = *((_DWORD *)v29 + 5);
                    if ((v133 & 0x40000000) != 0)
                      v134 = (uint64_t *)*((_QWORD *)v29 - 1);
                    else
                      v134 = (uint64_t *)((char *)v29 - 32 * (v133 & 0x7FFFFFF));
                    v162 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *v134);
                    v163 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v163 = v274;
                    }
                    *((_QWORD *)v273 + v163) = v162;
                    LODWORD(v274) = v274 + 1;
                    v164 = *((_DWORD *)v29 + 5);
                    if ((v164 & 0x40000000) != 0)
                      v165 = (char *)*((_QWORD *)v29 - 1);
                    else
                      v165 = (char *)v29 - 32 * (v164 & 0x7FFFFFF);
                    v174 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *((_QWORD *)v165 + 4));
                    v175 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v175 = v274;
                    }
                    *((_QWORD *)v273 + v175) = v174;
                    LODWORD(v274) = v274 + 1;
                    v176 = *((_DWORD *)v29 + 5);
                    if ((v176 & 0x40000000) != 0)
                      v177 = (char *)*((_QWORD *)v29 - 1);
                    else
                      v177 = (char *)v29 - 32 * (v176 & 0x7FFFFFF);
                    v270 = (uint64_t *)**((_QWORD **)v177 + 8);
                    v260 = 0;
                    if (sub_1C4DD8A9C(v259, &v270, &v260))
                      v184 = v260;
                    else
                      v184 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64));
                    v186 = *((_DWORD *)v184 + 2);
                    v187 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v187 = v274;
                    }
                    *((_QWORD *)v273 + v187) = (v186 - 1);
                    LODWORD(v274) = v274 + 1;
                    v188 = *((_DWORD *)v29 + 5);
                    if ((v188 & 0x40000000) != 0)
                      v189 = (char *)*((_QWORD *)v29 - 1);
                    else
                      v189 = (char *)v29 - 32 * (v188 & 0x7FFFFFF);
                    v194 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *((_QWORD *)v189 + 8));
                    v195 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v195 = v274;
                    }
                    v34 = 0;
                    *((_QWORD *)v273 + v195) = v194;
                    LODWORD(v274) = v274 + 1;
                    v35 = 15;
                    goto LABEL_139;
                  case '?':
                    v135 = *((_DWORD *)v29 + 5);
                    if ((v135 & 0x40000000) != 0)
                      v136 = (uint64_t ***)*((_QWORD *)v29 - 1);
                    else
                      v136 = (uint64_t ***)((char *)v29 - 32 * (v135 & 0x7FFFFFF));
                    v198 = **v136;
                    if (*(uint64_t **)v29 == v198)
                    {
                      v35 = 16;
                    }
                    else
                    {
                      v270 = v198;
                      v260 = 0;
                      if (sub_1C4DD8A9C(v259, &v270, &v260))
                        v199 = v260;
                      else
                        v199 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64));
                      v221 = *((_DWORD *)v199 + 2);
                      v222 = v274;
                      if (v274 >= (unint64_t)HIDWORD(v274))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                        v222 = v274;
                      }
                      *((_QWORD *)v273 + v222) = (v221 - 1);
                      LODWORD(v274) = v274 + 1;
                      v135 = *((_DWORD *)v29 + 5);
                      v35 = 19;
                    }
                    if ((v135 & 0x40000000) != 0)
                      v223 = (uint64_t *)*((_QWORD *)v29 - 1);
                    else
                      v223 = (uint64_t *)((char *)v29 - 32 * (v135 & 0x7FFFFFF));
                    v224 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *v223);
                    v225 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v225 = v274;
                    }
                    *((_QWORD *)v273 + v225) = v224;
                    LODWORD(v274) = v274 + 1;
                    v226 = *((_DWORD *)v29 + 5);
                    if ((v226 & 0x40000000) != 0)
                      v227 = (char *)*((_QWORD *)v29 - 1);
                    else
                      v227 = (char *)v29 - 32 * (v226 & 0x7FFFFFF);
                    v228 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *((_QWORD *)v227 + 4));
                    v229 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v229 = v274;
                    }
                    *((_QWORD *)v273 + v229) = v228;
                    LODWORD(v274) = v274 + 1;
                    v230 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *((_QWORD *)v29 + 7));
                    v231 = v274;
                    if (v274 >= (unint64_t)HIDWORD(v274))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                      v231 = v274;
                    }
                    v34 = 0;
                    *((_QWORD *)v273 + v231) = v230;
                    LODWORD(v274) = v274 + 1;
                    goto LABEL_139;
                  case '@':
                  case 'A':
                    llvm::report_fatal_error((llvm *)"extractvalue/insertvalue constexprs not supported", (const char *)1);
                  default:
                    if (v111 == 12)
                    {
                      v150 = v274;
                      if (v274 >= (unint64_t)HIDWORD(v274))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                        v150 = v274;
                      }
                      *((_QWORD *)v273 + v150) = 0;
                      LODWORD(v274) = v274 + 1;
                      v151 = *((_DWORD *)v29 + 5);
                      if ((v151 & 0x40000000) != 0)
                        v152 = (uint64_t *)*((_QWORD *)v29 - 1);
                      else
                        v152 = (uint64_t *)((char *)v29 - 32 * (v151 & 0x7FFFFFF));
                      v200 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *v152);
                      v201 = v274;
                      if (v274 >= (unint64_t)HIDWORD(v274))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                        v201 = v274;
                      }
                      *((_QWORD *)v273 + v201) = v200;
                      LODWORD(v274) = v274 + 1;
                      v202 = sub_1C5036D1C((uint64_t)v29);
                      if (v202)
                      {
                        v203 = v202;
                        v204 = v274;
                        if (v274 >= (unint64_t)HIDWORD(v274))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                          v204 = v274;
                        }
                        v34 = 0;
                        *((_QWORD *)v273 + v204) = v203;
                        LODWORD(v274) = v274 + 1;
                      }
                      else
                      {
                        v34 = 0;
                      }
                      v35 = 25;
                    }
                    else if (v111 == 34)
                    {
                      v270 = (uint64_t *)*((_QWORD *)v29 + 3);
                      v260 = 0;
                      if (sub_1C4DD8A9C(v259, &v270, &v260))
                        v123 = v260;
                      else
                        v123 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64));
                      v205 = *((_DWORD *)v123 + 2);
                      v206 = v274;
                      if (v274 >= (unint64_t)HIDWORD(v274))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                        v206 = v274;
                      }
                      *((_QWORD *)v273 + v206) = (v205 - 1);
                      v207 = (v274 + 1);
                      LODWORD(v274) = v274 + 1;
                      v208 = *((unsigned __int8 *)v29 + 17);
                      if (v208 >= 4)
                      {
                        if (v207 >= HIDWORD(v274))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v207 + 1, 8);
                          LODWORD(v207) = v274;
                        }
                        *((_QWORD *)v273 + v207) = ((v208 >> 1) - 2) & 0xFFFFFFFE | (v208 >> 1) & 1;
                        LODWORD(v274) = v274 + 1;
                        v35 = 24;
                      }
                      else if ((v208 & 2) != 0)
                      {
                        v35 = 20;
                      }
                      else
                      {
                        v35 = 12;
                      }
                      v209 = *((_DWORD *)v29 + 5) & 0x7FFFFFF;
                      if ((_DWORD)v209)
                      {
                        v210 = 0;
                        v211 = 32 * v209;
                        do
                        {
                          v212 = *((_DWORD *)v29 + 5);
                          if ((v212 & 0x40000000) != 0)
                            v213 = (char *)*((_QWORD *)v29 - 1);
                          else
                            v213 = (char *)v29 - 32 * (v212 & 0x7FFFFFF);
                          v270 = **(uint64_t ***)&v213[v210];
                          v260 = 0;
                          if (sub_1C4DD8A9C(v259, &v270, &v260))
                            v214 = v260;
                          else
                            v214 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64));
                          v215 = *((_DWORD *)v214 + 2);
                          v216 = v274;
                          if (v274 >= (unint64_t)HIDWORD(v274))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                            v216 = v274;
                          }
                          *((_QWORD *)v273 + v216) = (v215 - 1);
                          LODWORD(v274) = v274 + 1;
                          v217 = *((_DWORD *)v29 + 5);
                          if ((v217 & 0x40000000) != 0)
                            v218 = (char *)*((_QWORD *)v29 - 1);
                          else
                            v218 = (char *)v29 - 32 * (v217 & 0x7FFFFFF);
                          v219 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *(_QWORD *)&v218[v210]);
                          v220 = v274;
                          if (v274 >= (unint64_t)HIDWORD(v274))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                            v220 = v274;
                          }
                          *((_QWORD *)v273 + v220) = v219;
                          LODWORD(v274) = v274 + 1;
                          v210 += 32;
                        }
                        while (v211 != v210);
                      }
                      v34 = 0;
                    }
                    else
                    {
LABEL_205:
                      v124 = v111 - 38;
                      v125 = v274;
                      v126 = HIDWORD(v274);
                      if ((v111 - 38) > 0xC)
                      {
                        v153 = sub_1C5036D08(v111);
                        if (v125 >= v126)
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v125 + 1, 8);
                          v125 = v274;
                        }
                        *((_QWORD *)v273 + v125) = v153;
                        LODWORD(v274) = v274 + 1;
                        v154 = *((_DWORD *)v29 + 5);
                        if ((v154 & 0x40000000) != 0)
                          v155 = (uint64_t *)*((_QWORD *)v29 - 1);
                        else
                          v155 = (uint64_t *)((char *)v29 - 32 * (v154 & 0x7FFFFFF));
                        v233 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *v155);
                        v234 = v274;
                        if (v274 >= (unint64_t)HIDWORD(v274))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                          v234 = v274;
                        }
                        *((_QWORD *)v273 + v234) = v233;
                        LODWORD(v274) = v274 + 1;
                        v235 = *((_DWORD *)v29 + 5);
                        if ((v235 & 0x40000000) != 0)
                          v236 = (char *)*((_QWORD *)v29 - 1);
                        else
                          v236 = (char *)v29 - 32 * (v235 & 0x7FFFFFF);
                        v241 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *((_QWORD *)v236 + 4));
                        v242 = v274;
                        if (v274 >= (unint64_t)HIDWORD(v274))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                          v242 = v274;
                        }
                        *((_QWORD *)v273 + v242) = v241;
                        LODWORD(v274) = v274 + 1;
                        v243 = sub_1C5036D1C((uint64_t)v29);
                        if (v243)
                        {
                          v244 = v243;
                          v245 = v274;
                          if (v274 >= (unint64_t)HIDWORD(v274))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                            v245 = v274;
                          }
                          v34 = 0;
                          *((_QWORD *)v273 + v245) = v244;
                          LODWORD(v274) = v274 + 1;
                        }
                        else
                        {
                          v34 = 0;
                        }
                        v35 = 10;
                      }
                      else
                      {
                        if (v274 >= (unint64_t)HIDWORD(v274))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                          v125 = v274;
                        }
                        *((_QWORD *)v273 + v125) = v124;
                        LODWORD(v274) = v274 + 1;
                        v127 = *((_DWORD *)v29 + 5);
                        if ((v127 & 0x40000000) != 0)
                          v128 = (uint64_t ***)*((_QWORD *)v29 - 1);
                        else
                          v128 = (uint64_t ***)((char *)v29 - 32 * (v127 & 0x7FFFFFF));
                        v270 = **v128;
                        v260 = 0;
                        if (sub_1C4DD8A9C(v259, &v270, &v260))
                          v232 = v260;
                        else
                          v232 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64));
                        v237 = *((_DWORD *)v232 + 2);
                        v238 = v274;
                        if (v274 >= (unint64_t)HIDWORD(v274))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                          v238 = v274;
                        }
                        *((_QWORD *)v273 + v238) = (v237 - 1);
                        LODWORD(v274) = v274 + 1;
                        v239 = *((_DWORD *)v29 + 5);
                        if ((v239 & 0x40000000) != 0)
                          v240 = (uint64_t *)*((_QWORD *)v29 - 1);
                        else
                          v240 = (uint64_t *)((char *)v29 - 32 * (v239 & 0x7FFFFFF));
                        v246 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *v240);
                        v247 = v274;
                        if (v274 >= (unint64_t)HIDWORD(v274))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                          v247 = v274;
                        }
                        *((_QWORD *)v273 + v247) = v246;
                        LODWORD(v274) = v274 + 1;
                        v34 = 6;
                        v35 = 11;
                      }
                    }
                    break;
                }
              }
              else if (v36 == 6)
              {
                v270 = (uint64_t *)**((_QWORD **)v29 - 4);
                v260 = 0;
                if (sub_1C4DD8A9C(v259, &v270, &v260))
                  v114 = v260;
                else
                  v114 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64));
                v119 = *((_DWORD *)v114 + 2);
                v120 = v274;
                if (v274 >= (unint64_t)HIDWORD(v274))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                  v120 = v274;
                }
                *((_QWORD *)v273 + v120) = (v119 - 1);
                LODWORD(v274) = v274 + 1;
                v121 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *((_QWORD *)v29 - 4));
                v122 = v274;
                if (v274 >= (unint64_t)HIDWORD(v274))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                  v122 = v274;
                }
                v34 = 0;
                *((_QWORD *)v273 + v122) = v121;
                LODWORD(v274) = v274 + 1;
                v35 = 27;
              }
              else if (v36 == 4)
              {
                v270 = (uint64_t *)**((_QWORD **)v29 - 8);
                v260 = 0;
                if (sub_1C4DD8A9C(v259, &v270, &v260))
                  v156 = v260;
                else
                  v156 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64));
                v248 = *((_DWORD *)v156 + 2);
                v249 = v274;
                if (v274 >= (unint64_t)HIDWORD(v274))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                  v249 = v274;
                }
                *((_QWORD *)v273 + v249) = (v248 - 1);
                LODWORD(v274) = v274 + 1;
                v250 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *((_QWORD *)v29 - 8));
                v251 = v274;
                if (v274 >= (unint64_t)HIDWORD(v274))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                  v251 = v274;
                }
                *((_QWORD *)v273 + v251) = v250;
                LODWORD(v274) = v274 + 1;
                GlobalBasicBlockID = llvm::ValueEnumerator::getGlobalBasicBlockID(v258, *((const llvm::BasicBlock **)v29 - 4));
                v253 = v274;
                if (v274 >= (unint64_t)HIDWORD(v274))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                  v253 = v274;
                }
                v34 = 0;
                *((_QWORD *)v273 + v253) = GlobalBasicBlockID;
                LODWORD(v274) = v274 + 1;
                v35 = 21;
              }
              else
              {
                if (v36 == 7)
                  v105 = v29;
                else
                  v105 = 0;
                v270 = (uint64_t *)**((_QWORD **)v105 - 4);
                v260 = 0;
                if (sub_1C4DD8A9C(v259, &v270, &v260))
                  v106 = v260;
                else
                  v106 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64));
                v115 = *((_DWORD *)v106 + 2);
                v116 = v274;
                if (v274 >= (unint64_t)HIDWORD(v274))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                  v116 = v274;
                }
                *((_QWORD *)v273 + v116) = (v115 - 1);
                LODWORD(v274) = v274 + 1;
                v117 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *((_QWORD *)v105 - 4));
                v118 = v274;
                if (v274 >= (unint64_t)HIDWORD(v274))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                  v118 = v274;
                }
                v34 = 0;
                *((_QWORD *)v273 + v118) = v117;
                LODWORD(v274) = v274 + 1;
                v35 = 29;
              }
              goto LABEL_139;
            }
            v89 = *((_DWORD *)v29 + 5);
            if ((v89 & 0x40000000) != 0)
            {
              v91 = (uint64_t *)*((_QWORD *)v29 - 1);
              v90 = v89 & 0x7FFFFFF;
              if (v90)
                goto LABEL_118;
            }
            else
            {
              v90 = v89 & 0x7FFFFFF;
              v91 = (uint64_t *)((char *)v29 - 32 * v90);
              if (v90)
              {
LABEL_118:
                v92 = 32 * v90;
                do
                {
                  v93 = llvm::ValueEnumerator::getValueID((uint64_t)v258, *v91);
                  v94 = v274;
                  if (v274 >= (unint64_t)HIDWORD(v274))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                    v94 = v274;
                  }
                  *((_QWORD *)v273 + v94) = v93;
                  LODWORD(v274) = v274 + 1;
                  v91 += 4;
                  v35 = 7;
                  v92 -= 32;
                }
                while (v92);
                goto LABEL_176;
              }
            }
            v35 = 7;
LABEL_176:
            v34 = HIDWORD(v257);
            goto LABEL_139;
          }
          v46 = *(uint64_t **)v29;
          if (*(_BYTE *)(*(_QWORD *)v29 + 8) == 17 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 24) + 8) == 2061)
          {
            v255 = v5;
            v47 = *((_DWORD *)v46 + 8);
            isCString = llvm::ConstantDataSequential::isCString(v29);
            v49 = isCString;
            if (isCString)
              v35 = 9;
            else
              v35 = 8;
            v50 = v257;
            if (isCString)
              v50 = 0;
            v51 = v47 - isCString;
            v254 = v50;
            if (v47 == isCString)
            {
              v53 = isCString;
            }
            else
            {
              v52 = 0;
              LOBYTE(v53) = isCString;
              do
              {
                llvm::ConstantDataSequential::getElementAsInteger(v29);
                v55 = v54;
                v56 = v274;
                if (v274 >= (unint64_t)HIDWORD(v274))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                  v56 = v274;
                }
                *((_QWORD *)v273 + v56) = v55;
                LODWORD(v274) = v274 + 1;
                v53 = v53 & ((v55 & 0x80) == 0);
                v60 = v55 - 48 < 0xA || (v55 & 0xDFu) - 65 < 0x1A || v55 == 46 || v55 == 95;
                v49 = v49 && v60;
                ++v52;
              }
              while (v51 != v52);
            }
            v110 = HIDWORD(v256);
            v5 = v255;
            if (!v53)
              v110 = v254;
            if (v49)
              v34 = v256;
            else
              v34 = v110;
          }
          else
          {
            v100 = *((_DWORD *)v46 + 8);
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 24) + 8) == 13)
            {
              if (v100)
              {
                for (i = 0; i != v100; ++i)
                {
                  llvm::ConstantDataSequential::getElementAsInteger(v29);
                  v103 = v102;
                  v104 = v274;
                  if (v274 >= (unint64_t)HIDWORD(v274))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                    v104 = v274;
                  }
                  v34 = 0;
                  *((_QWORD *)v273 + v104) = v103;
                  LODWORD(v274) = v274 + 1;
                  v35 = 22;
                }
                goto LABEL_139;
              }
            }
            else if (v100)
            {
              for (j = 0; j != v100; ++j)
              {
                llvm::ConstantDataSequential::getElementAsAPFloat(v29);
                if ((_UNKNOWN *)v271 == &unk_1C866F1C0)
                  llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v271, (unsigned int *)&v260);
                else
                  llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v271, (unsigned int *)&v260);
                v108 = sub_1C47EE5B8(&v260, 0xFFFFFFFFFFFFFFFFLL);
                v109 = v274;
                if (v274 >= (unint64_t)HIDWORD(v274))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v273, (uint64_t)v275, v274 + 1, 8);
                  v109 = v274;
                }
                *((_QWORD *)v273 + v109) = v108;
                LODWORD(v274) = v274 + 1;
                if (v261 >= 0x41 && v260)
                  MEMORY[0x1CAA32F9C](v260, 0x1000C8000313F17);
                if ((_UNKNOWN *)v271 == &unk_1C866F1C0)
                {
                  sub_1C4773C74(&v272);
                }
                else if ((*(_DWORD *)(v271 + 8) - 64) <= 0xFFFFFF7F && v272)
                {
                  MEMORY[0x1CAA32F9C](v272, 0x1000C8000313F17);
                }
                v34 = 0;
                v35 = 22;
              }
              goto LABEL_139;
            }
            v34 = 0;
            v35 = 22;
          }
        }
        else
        {
          v34 = 0;
          v35 = 3;
        }
      }
LABEL_139:
      v76 = *(llvm::raw_ostream **)a1;
      v77 = v35;
LABEL_140:
      sub_1C5034740(v76, v77, (uint64_t)&v273, v34);
      LODWORD(v274) = 0;
      if (++v6 == v5)
      {
        sub_1C502481C(*(_QWORD *)a1);
        if (v273 != v275)
          free(v273);
        return;
      }
    }
  }
}

_DWORD *sub_1C5036C04(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  unsigned int v4;

  v2 = result;
  if (a2 < 0)
    v3 = 1 - 2 * a2;
  else
    v3 = 2 * a2;
  v4 = result[2];
  if (v4 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v4 + 1, 8);
    v4 = v2[2];
  }
  *(_QWORD *)(*(_QWORD *)v2 + 8 * v4) = v3;
  ++v2[2];
  return result;
}

_DWORD *sub_1C5036C74(_DWORD *a1, llvm::APInt *this)
{
  llvm::APInt *v2;
  unsigned int v4;
  int v5;
  unint64_t v6;
  _DWORD *result;

  v2 = this;
  v4 = *((_DWORD *)this + 2);
  if (v4 > 0x40)
  {
    v5 = llvm::APInt::countLeadingZerosSlowCase(this);
    v2 = *(llvm::APInt **)v2;
  }
  else
  {
    v5 = v4 + __clz(*(_QWORD *)this) - 64;
  }
  v6 = 0;
  do
  {
    result = sub_1C5036C04(a1, *((_QWORD *)v2 + v6));
    if (v4 == v5)
      break;
  }
  while (v6++ < (v4 + ~v5) >> 6);
  return result;
}

uint64_t sub_1C5036D08(int a1)
{
  return dword_1C85FA428[a1 - 13];
}

uint64_t sub_1C5036D1C(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  int v14;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 >= 0x1C)
  {
    HIDWORD(v4) = v2 - 41;
    LODWORD(v4) = v2 - 41;
    v3 = v4 >> 1;
    v5 = v3 > 6;
    v6 = (1 << v3) & 0x47;
    if (!v5 && v6 != 0)
      return ((unint64_t)*(unsigned __int8 *)(a1 + 17) >> 1) & 3;
    if (v2 > 0x37 || ((1 << v2) & 0xC1800000000000) == 0)
      goto LABEL_19;
    return ((unint64_t)*(unsigned __int8 *)(a1 + 17) >> 1) & 1;
  }
  if (v2 == 5)
  {
    v8 = *(unsigned __int16 *)(a1 + 18);
    HIDWORD(v10) = v8 - 13;
    LODWORD(v10) = v8 - 13;
    v9 = v10 >> 1;
    v5 = v9 > 6;
    v11 = (1 << v9) & 0x47;
    if (!v5 && v11 != 0)
      return ((unint64_t)*(unsigned __int8 *)(a1 + 17) >> 1) & 3;
    if (v8 <= 0x1B && ((1 << v8) & 0xC180000) != 0)
      return ((unint64_t)*(unsigned __int8 *)(a1 + 17) >> 1) & 1;
  }
LABEL_19:
  if (!sub_1C4774A9C(a1))
    return 0;
  v14 = *(char *)(a1 + 17);
  if (v14 >= 0)
    return (((v14 & 0x7C) >> 1) | (v14 << 6)) & 0xBELL;
  else
    return (((v14 & 0x7C) >> 1) | (v14 << 6)) & 0xBELL | 0x40;
}

uint64_t sub_1C5036E28(uint64_t *a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v9;
  std::__shared_weak_count *v10;

  v2 = (char *)operator new(0x228uLL);
  *(_QWORD *)v2 = &unk_1E813F300;
  *((_QWORD *)v2 + 1) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  *(_OWORD *)(v2 + 40) = xmmword_1C85F9F20;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 40;
  *(_OWORD *)(v2 + 56) = xmmword_1C6A5FC00;
  *(_OWORD *)(v2 + 72) = xmmword_1C85F6930;
  *(_OWORD *)(v2 + 88) = xmmword_1C85F6860;
  *(_OWORD *)(v2 + 104) = xmmword_1C85F6930;
  *(_OWORD *)(v2 + 120) = xmmword_1C85F6930;
  v3 = *a1;
  *(_OWORD *)(v2 + 136) = xmmword_1C6A5FC00;
  *((_QWORD *)v2 + 4) = 0x2000000007;
  v9 = v2 + 24;
  v10 = (std::__shared_weak_count *)v2;
  v4 = sub_1C50247B8(v3, (uint64_t)&v9);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

uint64_t sub_1C5036F50(uint64_t *a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v9;
  std::__shared_weak_count *v10;

  v2 = (char *)operator new(0x228uLL);
  *(_QWORD *)v2 = &unk_1E813F300;
  *((_QWORD *)v2 + 1) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  *(_OWORD *)(v2 + 40) = xmmword_1C85FA020;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 40;
  *(_OWORD *)(v2 + 56) = xmmword_1C6A5FC00;
  *(_OWORD *)(v2 + 72) = xmmword_1C85F6930;
  *(_OWORD *)(v2 + 88) = xmmword_1C6A5FC00;
  *(_OWORD *)(v2 + 104) = xmmword_1C85F6930;
  *(_OWORD *)(v2 + 120) = xmmword_1C85F9DD0;
  v3 = *a1;
  *(_OWORD *)(v2 + 136) = xmmword_1C85F6930;
  *((_QWORD *)v2 + 4) = 0x2000000007;
  v9 = v2 + 24;
  v10 = (std::__shared_weak_count *)v2;
  v4 = sub_1C50247B8(v3, (uint64_t)&v9);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1C5037078(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t *v22;
  size_t v23;
  const void *v24;
  size_t v25;
  unint64_t v26;
  llvm::raw_ostream *v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void **v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  void *v44;
  __int128 v45;
  _QWORD v46[33];

  v46[32] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return;
  v8 = *(unsigned int *)(a4 + 8);
  if (v8 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v8) = 35;
  v9 = *(_DWORD *)(a4 + 12);
  v10 = (*(_DWORD *)(a4 + 8) + 1);
  *(_DWORD *)(a4 + 8) = v10;
  if (v10 >= v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a4 + 8);
  }
  v11 = 0;
  v12 = 0;
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = a3;
  ++*(_DWORD *)(a4 + 8);
  v43 = 0;
  v44 = v46;
  v45 = xmmword_1C64638F0;
  v34 = &v44;
  v35 = 0;
  v36 = 0x20000000;
  LODWORD(v37) = 0;
  v38 = 2;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v13 = a2;
  do
  {
    v14 = **(_DWORD **)(*(_QWORD *)v13 + 8);
    if (v14 >= 0x20)
    {
      do
      {
        v16 = v14 & 0x1F | 0x20;
        v11 |= v16 << v12;
        HIDWORD(v37) = v11;
        v12 += 6;
        if (v12 >= 0x20)
        {
          sub_1C503027C((uint64_t *)&v34, v11);
          if ((_DWORD)v37)
            v11 = v16 >> -(char)v37;
          else
            v11 = 0;
          HIDWORD(v37) = v11;
          v12 = ((_BYTE)v37 + 6) & 0x1F;
        }
        LODWORD(v37) = v12;
        v15 = v14 >> 5;
        v17 = v14 > 0x3FF;
        v14 >>= 5;
      }
      while (v17);
    }
    else
    {
      v15 = **(_DWORD **)(*(_QWORD *)v13 + 8);
    }
    v11 |= v15 << v12;
    HIDWORD(v37) = v11;
    v12 += 6;
    if (v12 >= 0x20)
    {
      sub_1C503027C((uint64_t *)&v34, v11);
      if ((_DWORD)v37)
        v11 = v15 >> -(char)v37;
      else
        v11 = 0;
      HIDWORD(v37) = v11;
      v12 = ((_BYTE)v37 + 6) & 0x1F;
    }
    LODWORD(v37) = v12;
    v13 += 8;
  }
  while (v13 != a2 + 8 * a3);
  if (v12)
  {
    sub_1C503027C((uint64_t *)&v34, v11);
    v37 = 0;
  }
  sub_1C5037EC0((uint64_t)&v34);
  v18 = v45;
  v19 = *(unsigned int *)(a4 + 8);
  if (v19 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v19) = v18;
  ++*(_DWORD *)(a4 + 8);
  v20 = v45;
  v21 = 8 * a3;
  do
  {
    v22 = *(size_t **)(*(_QWORD *)a2 + 8);
    v25 = *v22;
    v24 = v22 + 3;
    v23 = v25;
    v26 = v20 + v25;
    if (*((_QWORD *)&v45 + 1) >= v20 + v25)
    {
      if (!v23)
        goto LABEL_31;
LABEL_30:
      memcpy((char *)v44 + v20, v24, v23);
      v20 = v45;
      goto LABEL_31;
    }
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v44, v46, v26, 1);
    v20 = v45;
    if (v23)
      goto LABEL_30;
LABEL_31:
    v20 += v23;
    *(_QWORD *)&v45 = v20;
    a2 += 8;
    v21 -= 8;
  }
  while (v21);
  v27 = *a1;
  v28 = (char *)operator new(0x228uLL);
  *(_QWORD *)v28 = &unk_1E813F300;
  *((_QWORD *)v28 + 1) = 0;
  *(_OWORD *)(v28 + 104) = 0u;
  *(_OWORD *)(v28 + 120) = 0u;
  *(_OWORD *)(v28 + 136) = 0u;
  *(_OWORD *)(v28 + 152) = 0u;
  *(_OWORD *)(v28 + 168) = 0u;
  *(_OWORD *)(v28 + 184) = 0u;
  *(_OWORD *)(v28 + 200) = 0u;
  *(_OWORD *)(v28 + 216) = 0u;
  *(_OWORD *)(v28 + 232) = 0u;
  *(_OWORD *)(v28 + 248) = 0u;
  *(_OWORD *)(v28 + 264) = 0u;
  *(_OWORD *)(v28 + 280) = 0u;
  *(_OWORD *)(v28 + 296) = 0u;
  *(_OWORD *)(v28 + 312) = 0u;
  *(_OWORD *)(v28 + 328) = 0u;
  *(_OWORD *)(v28 + 344) = 0u;
  *(_OWORD *)(v28 + 360) = 0u;
  *(_OWORD *)(v28 + 376) = 0u;
  *(_OWORD *)(v28 + 392) = 0u;
  *(_OWORD *)(v28 + 408) = 0u;
  *(_OWORD *)(v28 + 424) = 0u;
  *(_OWORD *)(v28 + 440) = 0u;
  *(_OWORD *)(v28 + 456) = 0u;
  *(_OWORD *)(v28 + 472) = 0u;
  *(_OWORD *)(v28 + 488) = 0u;
  *(_OWORD *)(v28 + 504) = 0u;
  *(_OWORD *)(v28 + 520) = 0u;
  *(_OWORD *)(v28 + 536) = 0u;
  *(_OWORD *)(v28 + 40) = xmmword_1C85FA030;
  *((_QWORD *)v28 + 2) = 0;
  *((_QWORD *)v28 + 3) = v28 + 40;
  *(_OWORD *)(v28 + 56) = xmmword_1C85F6930;
  *(_OWORD *)(v28 + 72) = xmmword_1C85F6930;
  *(_OWORD *)(v28 + 88) = xmmword_1C85FA040;
  *((_QWORD *)v28 + 4) = 0x2000000004;
  v34 = (void **)(v28 + 24);
  v35 = (std::__shared_weak_count *)v28;
  v29 = sub_1C50247B8((uint64_t)v27, (uint64_t)&v34);
  v30 = v29;
  v31 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_1C5033D5C(v27, v30, *(_QWORD *)a4, *(unsigned int *)(a4 + 8), (char *)v44, v45, 0);
  *(_DWORD *)(a4 + 8) = 0;
  if (v44 != v46)
    free(v44);
}

llvm::raw_ostream *sub_1C503748C(int *a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v5;
  llvm::raw_ostream *result;
  uint64_t i;

  v5 = a2;
  if (a4)
    return sub_1C5033D5C((llvm::raw_ostream *)a1, a4, a3, 2, 0, 0, a2 | 0x100000000);
  sub_1C5030204((llvm::raw_ostream *)a1, 3u, a1[8]);
  if (v5 >= 0x20)
  {
    sub_1C5030204((llvm::raw_ostream *)a1, v5 & 0x1F | 0x20, 6);
    v5 = 1;
  }
  sub_1C5030204((llvm::raw_ostream *)a1, v5, 6);
  sub_1C5030204((llvm::raw_ostream *)a1, 2u, 6);
  for (i = 0; i != 16; i += 8)
    result = sub_1C5030AF8((llvm::raw_ostream *)a1, *(_QWORD *)(a3 + i), 6);
  return result;
}

llvm::raw_ostream *sub_1C5037560(llvm::raw_ostream *result, uint64_t *a2, uint64_t a3, unsigned int *a4, unsigned int **a5, uint64_t a6)
{
  unsigned int **v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unsigned int ValueID;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  llvm::raw_ostream **v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  if (a3)
  {
    v7 = a5;
    v9 = a2;
    v10 = (uint64_t)result;
    v92 = &a2[a3];
    v93 = 0;
    v89 = (uint64_t *)((char *)result + 48);
    v90 = (uint64_t)result + 24;
    v88 = (uint64_t)(a4 + 4);
    do
    {
      v11 = *v9;
      if (a6)
      {
        v12 = *(_QWORD *)v10;
        v13 = *(_QWORD **)(*(_QWORD *)v10 + 8);
        v14 = *(_QWORD *)(**(_QWORD **)v10 + 8);
        if (v13)
          v15 = (*(uint64_t (**)(_QWORD))(*v13 + 80))(*(_QWORD *)(*(_QWORD *)v10 + 8)) + v13[4] - v13[2];
        else
          v15 = 0;
        v16 = *(unsigned int *)(v12 + 24) + 8 * (v15 + v14);
        v18 = *(uint64_t **)(a6 + 8);
        v17 = *(_QWORD *)(a6 + 16);
        if ((unint64_t)v18 >= v17)
        {
          v20 = *(uint64_t **)a6;
          v21 = ((uint64_t)v18 - *(_QWORD *)a6) >> 3;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
            abort();
          v23 = v17 - (_QWORD)v20;
          if (v23 >> 2 > v22)
            v22 = v23 >> 2;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            if (v24 >> 61)
              sub_1C4764EE4();
            v25 = (char *)operator new(8 * v24);
          }
          else
          {
            v25 = 0;
          }
          v26 = (uint64_t *)&v25[8 * v21];
          *v26 = v16;
          v19 = v26 + 1;
          while (v18 != v20)
          {
            v27 = *--v18;
            *--v26 = v27;
          }
          *(_QWORD *)a6 = v26;
          *(_QWORD *)(a6 + 8) = v19;
          *(_QWORD *)(a6 + 16) = &v25[8 * v24];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v18 = v16;
          v19 = v18 + 1;
        }
        v7 = a5;
        *(_QWORD *)(a6 + 8) = v19;
      }
      switch(*(_BYTE *)v11)
      {
        case 4:
          if (v7)
          {
            v29 = **v7;
            v30 = v10;
            v31 = v11;
            v32 = (uint64_t)a4;
          }
          else
          {
            v30 = v10;
            v31 = v11;
            v32 = (uint64_t)a4;
            v29 = 0;
          }
          result = sub_1C5037F94(v30, v31, v32, v29);
          break;
        case 5:
          if (v7)
            v28 = *v7 + 1;
          else
            v28 = (unsigned int *)&v93 + 1;
          result = sub_1C50380A0((uint64_t *)v10, v11, (uint64_t)a4, v28);
          break;
        case 6:
          if (v7)
          {
            v68 = (*v7)[2];
            v69 = (llvm::raw_ostream **)v10;
            v70 = v11;
            v71 = a4;
          }
          else
          {
            v69 = (llvm::raw_ostream **)v10;
            v70 = v11;
            v71 = a4;
            v68 = 0;
          }
          result = sub_1C5038300(v69, v70, v71, v68);
          break;
        case 7:
          if (!v7)
          {
            result = sub_1C50383DC(v10, v11, (uint64_t)a4, 0);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C50383DC(v10, v11, (uint64_t)a4, (*a5)[3]);
          break;
        case 8:
          if (!v7)
          {
            result = sub_1C503855C((uint64_t *)v10, v11, (uint64_t)a4, (unsigned int *)&v93);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C503855C((uint64_t *)v10, v11, (uint64_t)a4, *a5 + 4);
          break;
        case 9:
          if (!v7)
          {
            result = sub_1C5038714(v10, v11, (uint64_t)a4, 0);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C5038714(v10, v11, (uint64_t)a4, (*a5)[5]);
          break;
        case 0xA:
          if (!v7)
          {
            result = sub_1C5038970(v10, v11, a4, 0);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C5038970(v10, v11, a4, (*a5)[6]);
          break;
        case 0xB:
          if (v7)
          {
            v80 = (*v7)[7];
            v81 = v10;
            v82 = v11;
            v83 = (uint64_t)a4;
          }
          else
          {
            v81 = v10;
            v82 = v11;
            v83 = (uint64_t)a4;
            v80 = 0;
          }
          result = sub_1C5038AE0(v81, v82, v83, v80);
          break;
        case 0xC:
          if (v7)
          {
            v64 = (*v7)[8];
            v65 = v10;
            v66 = v11;
            v67 = (uint64_t)a4;
          }
          else
          {
            v65 = v10;
            v66 = v11;
            v67 = (uint64_t)a4;
            v64 = 0;
          }
          result = sub_1C5038D1C(v65, v66, v67, v64);
          break;
        case 0xD:
          if (v7)
          {
            v72 = (*v7)[9];
            v73 = v10;
            v74 = v11;
            v75 = (uint64_t)a4;
          }
          else
          {
            v73 = v10;
            v74 = v11;
            v75 = (uint64_t)a4;
            v72 = 0;
          }
          result = sub_1C5039270(v73, v74, v75, v72);
          break;
        case 0xE:
          if (v7)
          {
            v52 = (*v7)[10];
            v53 = v10;
            v54 = v11;
            v55 = (uint64_t)a4;
          }
          else
          {
            v53 = v10;
            v54 = v11;
            v55 = (uint64_t)a4;
            v52 = 0;
          }
          result = sub_1C5039AB8(v53, v54, v55, v52);
          break;
        case 0xF:
          if (v7)
          {
            v44 = (*v7)[11];
            v45 = v10;
            v46 = v11;
            v47 = (uint64_t)a4;
          }
          else
          {
            v45 = v10;
            v46 = v11;
            v47 = (uint64_t)a4;
            v44 = 0;
          }
          result = sub_1C5039C44(v45, v46, v47, v44);
          break;
        case 0x10:
          if (v7)
          {
            v48 = (*v7)[12];
            v49 = v10;
            v50 = v11;
            v51 = (uint64_t)a4;
          }
          else
          {
            v49 = v10;
            v50 = v11;
            v51 = (uint64_t)a4;
            v48 = 0;
          }
          result = sub_1C5039F28(v49, v50, v51, v48);
          break;
        case 0x11:
          if (v7)
          {
            v40 = (*v7)[13];
            v41 = v10;
            v42 = v11;
            v43 = (uint64_t)a4;
          }
          else
          {
            v41 = v10;
            v42 = v11;
            v43 = (uint64_t)a4;
            v40 = 0;
          }
          result = sub_1C503A6CC(v41, v42, v43, v40);
          break;
        case 0x12:
          if (v7)
          {
            v76 = (*v7)[14];
            v77 = v10;
            v78 = v11;
            v79 = (uint64_t)a4;
          }
          else
          {
            v77 = v10;
            v78 = v11;
            v79 = (uint64_t)a4;
            v76 = 0;
          }
          result = sub_1C503AEBC(v77, v78, v79, v76);
          break;
        case 0x13:
          if (v7)
          {
            v56 = (*v7)[15];
            v57 = v10;
            v58 = v11;
            v59 = (uint64_t)a4;
          }
          else
          {
            v57 = v10;
            v58 = v11;
            v59 = (uint64_t)a4;
            v56 = 0;
          }
          result = sub_1C503B0C4(v57, v58, v59, v56);
          break;
        case 0x14:
          if (!v7)
          {
            result = sub_1C503B290(v10, v11, (uint64_t)a4, 0);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C503B290(v10, v11, (uint64_t)a4, (*a5)[16]);
          break;
        case 0x15:
          if (!v7)
          {
            result = sub_1C503B418(v10, v11, (uint64_t)a4, 0);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C503B418(v10, v11, (uint64_t)a4, (*a5)[17]);
          break;
        case 0x16:
          if (!v7)
          {
            result = sub_1C503B5C8(v10, v11, (uint64_t)a4, 0);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C503B5C8(v10, v11, (uint64_t)a4, (*a5)[18]);
          break;
        case 0x17:
          if (!v7)
          {
            result = sub_1C503B784(v10, v11, (uint64_t)a4, 0);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C503B784(v10, v11, (uint64_t)a4, (*a5)[19]);
          break;
        case 0x18:
          if (!v7)
          {
            result = sub_1C503B9E8(v10, v11, (uint64_t)a4, 0);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C503B9E8(v10, v11, (uint64_t)a4, (*a5)[20]);
          break;
        case 0x19:
          if (v7)
          {
            v60 = (*v7)[21];
            v61 = v10;
            v62 = v11;
            v63 = (uint64_t)a4;
          }
          else
          {
            v61 = v10;
            v62 = v11;
            v63 = (uint64_t)a4;
            v60 = 0;
          }
          result = sub_1C503BEE4(v61, v62, v63, v60);
          break;
        case 0x1A:
          if (!v7)
          {
            result = sub_1C503C29C(v10, v11, (uint64_t)a4, 0);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C503C29C(v10, v11, (uint64_t)a4, (*a5)[22]);
          break;
        case 0x1B:
          if (!v7)
          {
            result = sub_1C503C4C4(v10, v11, (uint64_t)a4, 0);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C503C4C4(v10, v11, (uint64_t)a4, (*a5)[23]);
          break;
        case 0x1C:
          if (v7)
          {
            v84 = (*v7)[24];
            v85 = v10;
            v86 = v11;
            v87 = (uint64_t)a4;
          }
          else
          {
            v85 = v10;
            v86 = v11;
            v87 = (uint64_t)a4;
            v84 = 0;
          }
          result = sub_1C503C800(v85, v86, v87, v84);
          break;
        case 0x1D:
          if (!v7)
          {
            result = sub_1C503CB3C(v10, v11, (uint64_t)a4, 0);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C503CB3C(v10, v11, (uint64_t)a4, (*a5)[25]);
          break;
        case 0x1E:
          if (!v7)
          {
            result = sub_1C503CD34(v10, v11, (uint64_t)a4, 0);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C503CD34(v10, v11, (uint64_t)a4, (*a5)[26]);
          break;
        case 0x1F:
          if (!v7)
          {
            result = sub_1C503CF2C(v10, v11, (uint64_t)a4, 0);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C503CF2C(v10, v11, (uint64_t)a4, (*a5)[27]);
          break;
        case 0x20:
          if (!v7)
          {
            result = sub_1C503D1C0(v10, v11, (uint64_t)a4, 0);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C503D1C0(v10, v11, (uint64_t)a4, (*a5)[28]);
          break;
        case 0x21:
          if (!v7)
          {
            result = sub_1C503D2E8(v10, v11, (uint64_t)a4, 0);
            goto LABEL_101;
          }
          v7 = a5;
          result = sub_1C503D2E8(v10, v11, (uint64_t)a4, (*a5)[29]);
          break;
        case 0x22:
          if (v7)
          {
            v7 = a5;
            result = sub_1C503D630(v10, v11, (uint64_t)a4, (*a5)[30]);
          }
          else
          {
            result = sub_1C503D630(v10, v11, (uint64_t)a4, 0);
LABEL_101:
            v7 = a5;
          }
          break;
        default:
          v33 = *(uint64_t **)(v11 + 128);
          v34 = *v33;
          v94 = 0;
          v95 = v34;
          if (sub_1C4DD8A9C(v89, &v95, &v94))
            v35 = v94;
          else
            v35 = *(_QWORD *)(v10 + 48) + 16 * *(unsigned int *)(v10 + 64);
          v36 = *(_DWORD *)(v35 + 8);
          v37 = a4[2];
          if (v37 >= a4[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a4, v88, v37 + 1, 8);
            v37 = a4[2];
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v37) = (v36 - 1);
          ++a4[2];
          ValueID = llvm::ValueEnumerator::getValueID(v90, (uint64_t)v33);
          v39 = a4[2];
          if (v39 >= a4[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a4, v88, v39 + 1, 8);
            v39 = a4[2];
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v39) = ValueID;
          ++a4[2];
          result = sub_1C503D888(*(llvm::raw_ostream **)v10, 2u, (uint64_t)a4, 0);
          a4[2] = 0;
          break;
      }
      ++v9;
    }
    while (v9 != v92);
  }
  return result;
}

uint64_t sub_1C5037EC0(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 88);
  if (*(_QWORD *)(a1 + 88))
  {
    sub_1C5034214((uint64_t **)(a1 + 88));
    operator delete(*v2);
  }
  if (*(_QWORD *)(a1 + 64))
  {
    sub_1C5037F34((uint64_t **)(a1 + 64));
    operator delete(*(void **)(a1 + 64));
  }
  if (*(_QWORD *)(a1 + 40))
  {
    sub_1C4FF80DC((uint64_t *)(a1 + 40));
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

void sub_1C5037F34(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = v2 - 3;
    do
    {
      if (*v4)
      {
        sub_1C4FF80DC(v4);
        operator delete((void *)*v4);
      }
      v5 = v4 - 2;
      v4 -= 5;
    }
    while (v5 != v3);
  }
  a1[1] = v3;
}

llvm::raw_ostream *sub_1C5037F94(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  llvm::raw_ostream *result;
  uint64_t v15;
  uint64_t v16;

  v8 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v8)
  {
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)(v9 - 8 * *(unsigned int *)(a2 + 8));
      v15 = 0;
      v16 = v10;
      v11 = 0;
      if (sub_1C4E36534((uint64_t *)(a1 + 240), &v16, &v15))
        v11 = *(unsigned int *)(v15 + 12);
      v12 = *(unsigned int *)(a3 + 8);
      if (v12 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
        v12 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
      ++*(_DWORD *)(a3 + 8);
      v9 += 8;
      --v8;
    }
    while (v8);
  }
  if ((*(_BYTE *)(a2 + 1) & 0x7F) == 1)
    v13 = 5;
  else
    v13 = 3;
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, v13, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C50380A0(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  _BOOL8 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  llvm::raw_ostream *result;
  uint64_t v26;
  uint64_t v27;

  if (!*a4)
    *a4 = sub_1C5036E28(a1);
  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  v10 = *(_DWORD *)(a3 + 12);
  v11 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v11;
  v12 = *(unsigned int *)(a2 + 4);
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = v12;
  v13 = *(_DWORD *)(a3 + 12);
  v14 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v14;
  v15 = *(unsigned __int16 *)(a2 + 2);
  if (v14 >= v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v14) = v15;
  ++*(_DWORD *)(a3 + 8);
  v16 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v26 = 0;
  v27 = v16;
  if (sub_1C4E36534(a1 + 30, &v27, &v26))
    v17 = (*(_DWORD *)(v26 + 12) - 1);
  else
    v17 = 0xFFFFFFFFLL;
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
  ++*(_DWORD *)(a3 + 8);
  if (*(_DWORD *)(a2 + 8) == 2)
    v19 = *(_QWORD *)(a2 - 8);
  else
    v19 = 0;
  v26 = 0;
  v27 = v19;
  v20 = 0;
  if (sub_1C4E36534(a1 + 30, &v27, &v26))
    v20 = *(unsigned int *)(v26 + 12);
  v21 = *(unsigned int *)(a3 + 8);
  if (v21 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v21) = v20;
  v22 = *(_DWORD *)(a3 + 12);
  v23 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v23;
  v24 = *(unsigned __int8 *)(a2 + 1);
  if (v23 >= v22)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v23 + 1, 8);
    LODWORD(v23) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v23) = v24 >> 7;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888((llvm::raw_ostream *)*a1, 7u, a3, *a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C5038300(llvm::raw_ostream **a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  llvm::raw_ostream *result;

  v8 = ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3) + 1;
  v9 = a3[3];
  if (v8 > v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), v8, 8);
    LODWORD(v9) = a3[3];
  }
  v10 = *(_BYTE *)(a2 + 1);
  v11 = a3[2];
  if (v11 >= v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), v11 + 1, 8);
    LODWORD(v11) = a3[2];
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = ((v10 & 0x7F) == 1) | 6;
  ++a3[2];
  sub_1C4DFE610(a3, *(_BYTE **)(a2 + 24), *(_BYTE **)(a2 + 32));
  result = sub_1C503D888(*a1, 0x1Du, (uint64_t)a3, a4);
  a3[2] = 0;
  return result;
}

llvm::raw_ostream *sub_1C50383DC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::raw_ostream *result;
  uint64_t v17;
  uint64_t v18;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  ++*(_DWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v17 = 0;
  v18 = v10;
  v11 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v18, &v17))
    v11 = *(unsigned int *)(v17 + 12);
  v12 = *(unsigned int *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v17 = 0;
  v18 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v18, &v17))
    v14 = *(unsigned int *)(v17 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x25u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503855C(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  _BOOL8 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  llvm::raw_ostream *result;
  uint64_t v21;
  uint64_t v22;

  if (!*a4)
    *a4 = sub_1C5036F50(a1);
  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  v10 = *(_DWORD *)(a3 + 12);
  v11 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v11;
  v12 = *(unsigned __int16 *)(a2 + 2);
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = v12;
  v13 = *(_DWORD *)(a3 + 12);
  v14 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v14;
  if (v14 >= v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v14) = 0;
  ++*(_DWORD *)(a3 + 8);
  v15 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v15)
  {
    v16 = -8 * v15;
    do
    {
      v17 = *(_QWORD *)(a2 + v16);
      v21 = 0;
      v22 = v17;
      v18 = 0;
      if (sub_1C4E36534(a1 + 30, &v22, &v21))
        v18 = *(unsigned int *)(v21 + 12);
      v19 = *(unsigned int *)(a3 + 8);
      if (v19 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v19 + 1, 8);
        v19 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v19) = v18;
      ++*(_DWORD *)(a3 + 8);
      v16 += 8;
    }
    while (v16);
  }
  result = sub_1C503D888((llvm::raw_ostream *)*a1, 0xCu, a3, *a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C5038714(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::raw_ostream *result;
  uint64_t v23;
  uint64_t v24;

  v8 = ((*(_BYTE *)(a2 + 1) & 0x7F) == 1) | 4;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  ++*(_DWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v23 = 0;
  v24 = v10;
  v11 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v11 = *(unsigned int *)(v23 + 12);
  v12 = *(unsigned int *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v23 = 0;
  v24 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v14 = *(unsigned int *)(v23 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  v16 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v23 = 0;
  v24 = v16;
  v17 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v17 = *(unsigned int *)(v23 + 12);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
  ++*(_DWORD *)(a3 + 8);
  v19 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  v23 = 0;
  v24 = v19;
  v20 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v20 = *(unsigned int *)(v23 + 12);
  v21 = *(unsigned int *)(a3 + 8);
  if (v21 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v21) = v20;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0xDu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C5038970(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *result;
  uint64_t v18;
  uint64_t v19;

  v8 = 6;
  if (!*(_DWORD *)(a2 + 4))
    v8 = 4;
  v9 = v8 | ((*(_BYTE *)(a2 + 1) & 0x7F) == 1);
  v10 = a3[2];
  if (v10 >= a3[3])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), v10 + 1, 8);
    LODWORD(v10) = a3[2];
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
  v11 = a3[3];
  v12 = (a3[2] + 1);
  a3[2] = v12;
  v13 = *(unsigned int *)(a2 + 32);
  if (v12 >= v11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), v12 + 1, 8);
    LODWORD(v12) = a3[2];
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v13;
  ++a3[2];
  v14 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v18 = 0;
  v19 = v14;
  v15 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v19, &v18))
    v15 = *(unsigned int *)(v18 + 12);
  v16 = a3[2];
  if (v16 >= a3[3])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), v16 + 1, 8);
    LODWORD(v16) = a3[2];
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v16) = v15;
  ++a3[2];
  sub_1C5036C74(a3, (llvm::APInt *)(a2 + 24));
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0xEu, (uint64_t)a3, a4);
  a3[2] = 0;
  return result;
}

llvm::raw_ostream *sub_1C5038AE0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  llvm::raw_ostream *result;
  uint64_t v29;
  uint64_t v30;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  v10 = *(_DWORD *)(a3 + 12);
  v11 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v11;
  v12 = *(unsigned __int16 *)(a2 + 2);
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = v12;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v29 = 0;
  v30 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v30, &v29))
    v14 = *(unsigned int *)(v29 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  v16 = *(_DWORD *)(a3 + 12);
  v17 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v17;
  v18 = *(_QWORD *)(a2 + 32);
  if (v17 >= v16)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v17) = v18;
  v19 = *(_DWORD *)(a3 + 12);
  v20 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v20;
  v21 = *(unsigned int *)(a2 + 48);
  if (v20 >= v19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v20) = v21;
  v22 = *(_DWORD *)(a3 + 12);
  v23 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v23;
  v24 = *(unsigned int *)(a2 + 52);
  if (v23 >= v22)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v23 + 1, 8);
    LODWORD(v23) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v23) = v24;
  v25 = *(_DWORD *)(a3 + 12);
  v26 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v26;
  v27 = *(unsigned int *)(a2 + 28);
  if (v26 >= v25)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v26) = v27;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0xFu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C5038D1C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm::raw_ostream *result;
  uint64_t v52;
  uint64_t v53;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  v10 = *(_DWORD *)(a3 + 12);
  v11 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v11;
  v12 = *(unsigned __int16 *)(a2 + 2);
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = v12;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v52 = 0;
  v53 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v53, &v52))
    v14 = *(unsigned int *)(v52 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  v16 = a2;
  if (*(_BYTE *)a2 != 15)
    v16 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v52 = 0;
  v53 = v16;
  v17 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v53, &v52))
    v17 = *(unsigned int *)(v52 + 12);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
  v19 = *(_DWORD *)(a3 + 12);
  v20 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v20;
  v21 = *(unsigned int *)(a2 + 24);
  if (v20 >= v19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v20) = v21;
  ++*(_DWORD *)(a3 + 8);
  v22 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v52 = 0;
  v53 = v22;
  v23 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v53, &v52))
    v23 = *(unsigned int *)(v52 + 12);
  v24 = *(unsigned int *)(a3 + 8);
  if (v24 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v24 + 1, 8);
    LODWORD(v24) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v24) = v23;
  ++*(_DWORD *)(a3 + 8);
  v25 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  v52 = 0;
  v53 = v25;
  v26 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v53, &v52))
    v26 = *(unsigned int *)(v52 + 12);
  v27 = *(unsigned int *)(a3 + 8);
  if (v27 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v27 + 1, 8);
    LODWORD(v27) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v27) = v26;
  v28 = *(_DWORD *)(a3 + 12);
  v29 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v29;
  v30 = *(_QWORD *)(a2 + 32);
  if (v29 >= v28)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v29 + 1, 8);
    LODWORD(v29) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v29) = v30;
  v31 = *(_DWORD *)(a3 + 12);
  v32 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v32;
  v33 = *(unsigned int *)(a2 + 48);
  if (v32 >= v31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v32 + 1, 8);
    LODWORD(v32) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v32) = v33;
  v34 = *(_DWORD *)(a3 + 12);
  v35 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v35;
  v36 = *(_QWORD *)(a2 + 40);
  if (v35 >= v34)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v35 + 1, 8);
    LODWORD(v35) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v35) = v36;
  v37 = *(_DWORD *)(a3 + 12);
  v38 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v38;
  v39 = *(unsigned int *)(a2 + 28);
  if (v38 >= v37)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v38 + 1, 8);
    LODWORD(v38) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v38) = v39;
  ++*(_DWORD *)(a3 + 8);
  v40 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  v52 = 0;
  v53 = v40;
  v41 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v53, &v52))
    v41 = *(unsigned int *)(v52 + 12);
  v42 = *(unsigned int *)(a3 + 8);
  if (v42 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v42 + 1, 8);
    LODWORD(v42) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v42) = v41;
  v43 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v43;
  v44 = *(_QWORD *)(a2 + 52);
  if ((v44 & 0xFF00000000) != 0)
    v45 = (v44 + 1);
  else
    v45 = 0;
  if (v43 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v43 + 1, 8);
    LODWORD(v43) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v43) = v45;
  v46 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v46;
  if (*(_WORD *)(a2 + 2) == 17152)
    v47 = *(unsigned int *)(a2 + 4);
  else
    v47 = 0;
  if (v46 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v46 + 1, 8);
    LODWORD(v46) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v46) = v47;
  ++*(_DWORD *)(a3 + 8);
  v48 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40);
  v52 = 0;
  v53 = v48;
  v49 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v53, &v52))
    v49 = *(unsigned int *)(v52 + 12);
  v50 = *(unsigned int *)(a3 + 8);
  if (v50 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v50 + 1, 8);
    LODWORD(v50) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v50) = v49;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x11u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C5039270(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  llvm::raw_ostream *result;
  uint64_t v74;
  uint64_t v75;

  v8 = ((*(_BYTE *)(a2 + 1) & 0x7F) == 1) | 2;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  v10 = *(_DWORD *)(a3 + 12);
  v11 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v11;
  v12 = *(unsigned __int16 *)(a2 + 2);
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = v12;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v74 = 0;
  v75 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v75, &v74))
    v14 = *(unsigned int *)(v74 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  v16 = a2;
  if (*(_BYTE *)a2 != 15)
    v16 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v74 = 0;
  v75 = v16;
  v17 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v75, &v74))
    v17 = *(unsigned int *)(v74 + 12);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
  v19 = *(_DWORD *)(a3 + 12);
  v20 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v20;
  v21 = *(unsigned int *)(a2 + 24);
  if (v20 >= v19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v20) = v21;
  ++*(_DWORD *)(a3 + 8);
  v22 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v74 = 0;
  v75 = v22;
  v23 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v75, &v74))
    v23 = *(unsigned int *)(v74 + 12);
  v24 = *(unsigned int *)(a3 + 8);
  if (v24 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v24 + 1, 8);
    LODWORD(v24) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v24) = v23;
  ++*(_DWORD *)(a3 + 8);
  v25 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  v74 = 0;
  v75 = v25;
  v26 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v75, &v74))
    v26 = *(unsigned int *)(v74 + 12);
  v27 = *(unsigned int *)(a3 + 8);
  if (v27 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v27 + 1, 8);
    LODWORD(v27) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v27) = v26;
  v28 = *(_DWORD *)(a3 + 12);
  v29 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v29;
  v30 = *(_QWORD *)(a2 + 32);
  if (v29 >= v28)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v29 + 1, 8);
    LODWORD(v29) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v29) = v30;
  v31 = *(_DWORD *)(a3 + 12);
  v32 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v32;
  v33 = *(unsigned int *)(a2 + 48);
  if (v32 >= v31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v32 + 1, 8);
    LODWORD(v32) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v32) = v33;
  v34 = *(_DWORD *)(a3 + 12);
  v35 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v35;
  v36 = *(_QWORD *)(a2 + 40);
  if (v35 >= v34)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v35 + 1, 8);
    LODWORD(v35) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v35) = v36;
  v37 = *(_DWORD *)(a3 + 12);
  v38 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v38;
  v39 = *(unsigned int *)(a2 + 28);
  if (v38 >= v37)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v38 + 1, 8);
    LODWORD(v38) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v38) = v39;
  ++*(_DWORD *)(a3 + 8);
  v40 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  v74 = 0;
  v75 = v40;
  v41 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v75, &v74))
    v41 = *(unsigned int *)(v74 + 12);
  v42 = *(unsigned int *)(a3 + 8);
  if (v42 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v42 + 1, 8);
    LODWORD(v42) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v42) = v41;
  v43 = *(_DWORD *)(a3 + 12);
  v44 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v44;
  v45 = *(unsigned int *)(a2 + 52);
  if (v44 >= v43)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v44 + 1, 8);
    LODWORD(v44) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v44) = v45;
  ++*(_DWORD *)(a3 + 8);
  v46 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40);
  v74 = 0;
  v75 = v46;
  v47 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v75, &v74))
    v47 = *(unsigned int *)(v74 + 12);
  v48 = *(unsigned int *)(a3 + 8);
  if (v48 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v48 + 1, 8);
    LODWORD(v48) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v48) = v47;
  ++*(_DWORD *)(a3 + 8);
  v49 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 48);
  v74 = 0;
  v75 = v49;
  v50 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v75, &v74))
    v50 = *(unsigned int *)(v74 + 12);
  v51 = *(unsigned int *)(a3 + 8);
  if (v51 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v51 + 1, 8);
    LODWORD(v51) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v51) = v50;
  ++*(_DWORD *)(a3 + 8);
  v52 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56);
  v74 = 0;
  v75 = v52;
  v53 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v75, &v74))
    v53 = *(unsigned int *)(v74 + 12);
  v54 = *(unsigned int *)(a3 + 8);
  if (v54 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v54 + 1, 8);
    LODWORD(v54) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v54) = v53;
  ++*(_DWORD *)(a3 + 8);
  v55 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 64);
  v74 = 0;
  v75 = v55;
  v56 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v75, &v74))
    v56 = *(unsigned int *)(v74 + 12);
  v57 = *(unsigned int *)(a3 + 8);
  if (v57 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v57 + 1, 8);
    LODWORD(v57) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v57) = v56;
  ++*(_DWORD *)(a3 + 8);
  v58 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 72);
  v74 = 0;
  v75 = v58;
  v59 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v75, &v74))
    v59 = *(unsigned int *)(v74 + 12);
  v60 = *(unsigned int *)(a3 + 8);
  if (v60 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v60 + 1, 8);
    LODWORD(v60) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v60) = v59;
  ++*(_DWORD *)(a3 + 8);
  v61 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 80);
  v74 = 0;
  v75 = v61;
  v62 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v75, &v74))
    v62 = *(unsigned int *)(v74 + 12);
  v63 = *(unsigned int *)(a3 + 8);
  if (v63 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v63 + 1, 8);
    LODWORD(v63) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v63) = v62;
  ++*(_DWORD *)(a3 + 8);
  v64 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 88);
  v74 = 0;
  v75 = v64;
  v65 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v75, &v74))
    v65 = *(unsigned int *)(v74 + 12);
  v66 = *(unsigned int *)(a3 + 8);
  if (v66 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v66 + 1, 8);
    LODWORD(v66) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v66) = v65;
  ++*(_DWORD *)(a3 + 8);
  v67 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 96);
  v74 = 0;
  v75 = v67;
  v68 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v75, &v74))
    v68 = *(unsigned int *)(v74 + 12);
  v69 = *(unsigned int *)(a3 + 8);
  if (v69 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v69 + 1, 8);
    LODWORD(v69) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v69) = v68;
  ++*(_DWORD *)(a3 + 8);
  v70 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 104);
  v74 = 0;
  v75 = v70;
  v71 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v75, &v74))
    v71 = *(unsigned int *)(v74 + 12);
  v72 = *(unsigned int *)(a3 + 8);
  if (v72 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v72 + 1, 8);
    LODWORD(v72) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v72) = v71;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x12u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C5039AB8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *result;
  uint64_t v20;
  uint64_t v21;

  v8 = ((*(_BYTE *)(a2 + 1) & 0x7F) == 1) | 2;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  v10 = *(_DWORD *)(a3 + 12);
  v11 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v11;
  v12 = *(unsigned int *)(a2 + 28);
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = v12;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  v20 = 0;
  v21 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v21, &v20))
    v14 = *(unsigned int *)(v20 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  v16 = *(_DWORD *)(a3 + 12);
  v17 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v17;
  v18 = *(unsigned __int8 *)(a2 + 52);
  if (v17 >= v16)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v17) = v18;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x13u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C5039C44(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::raw_ostream *result;
  uint64_t v24;
  uint64_t v25;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  ++*(_DWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v24 = 0;
  v25 = v10;
  v11 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v25, &v24))
    v11 = *(unsigned int *)(v24 + 12);
  v12 = *(unsigned int *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v24 = 0;
  v25 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v25, &v24))
    v14 = *(unsigned int *)(v24 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  v16 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v16;
  if (*(_BYTE *)(a2 + 40))
  {
    v17 = *(unsigned int *)(a2 + 24);
    if (v16 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v16 + 1, 8);
      LODWORD(v16) = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v16) = v17;
    ++*(_DWORD *)(a3 + 8);
    v25 = *(_QWORD *)(a2 + 32);
  }
  else
  {
    if (v16 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v16 + 1, 8);
      LODWORD(v16) = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v16) = 0;
    ++*(_DWORD *)(a3 + 8);
    v25 = 0;
  }
  v24 = 0;
  v18 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v25, &v24))
    v18 = *(unsigned int *)(v24 + 12);
  v19 = *(_DWORD *)(a3 + 8);
  if (v19 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v19 + 1, 8);
    v19 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v19) = v18;
  ++*(_DWORD *)(a3 + 8);
  if (*(_BYTE *)(a2 + 56))
  {
    v20 = *(_QWORD *)(a2 + 48);
    v24 = 0;
    v25 = v20;
    v21 = 0;
    if (sub_1C4E36534((uint64_t *)(a1 + 240), &v25, &v24))
      v21 = *(unsigned int *)(v24 + 12);
    v22 = *(unsigned int *)(a3 + 8);
    if (v22 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v22 + 1, 8);
      LODWORD(v22) = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v22) = v21;
    ++*(_DWORD *)(a3 + 8);
  }
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x10u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C5039F28(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  llvm::raw_ostream *result;
  uint64_t v72;
  uint64_t v73;

  v8 = *(unsigned int *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = 1;
  v9 = *(_DWORD *)(a3 + 12);
  v10 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v10;
  v11 = *(unsigned int *)(a2 + 24);
  if (v10 >= v9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v11;
  ++*(_DWORD *)(a3 + 8);
  v12 = a2;
  if (*(_BYTE *)a2 != 15)
    v12 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v72 = 0;
  v73 = v12;
  v13 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v73, &v72))
    v13 = *(unsigned int *)(v72 + 12);
  v14 = *(unsigned int *)(a3 + 8);
  if (v14 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  v15 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v72 = 0;
  v73 = v15;
  v16 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v73, &v72))
    v16 = *(unsigned int *)(v72 + 12);
  v17 = *(unsigned int *)(a3 + 8);
  if (v17 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v17) = v16;
  v18 = *(_DWORD *)(a3 + 12);
  v19 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v19;
  v20 = *(unsigned __int8 *)(a2 + 28);
  if (v19 >= v18)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v19) = v20;
  ++*(_DWORD *)(a3 + 8);
  v21 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v72 = 0;
  v73 = v21;
  v22 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v73, &v72))
    v22 = *(unsigned int *)(v72 + 12);
  v23 = *(unsigned int *)(a3 + 8);
  if (v23 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v23 + 1, 8);
    LODWORD(v23) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v23) = v22;
  v24 = *(_DWORD *)(a3 + 12);
  v25 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v25;
  v26 = *(unsigned int *)(a2 + 32);
  if (v25 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v25) = v26;
  ++*(_DWORD *)(a3 + 8);
  v27 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  v72 = 0;
  v73 = v27;
  v28 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v73, &v72))
    v28 = *(unsigned int *)(v72 + 12);
  v29 = *(unsigned int *)(a3 + 8);
  if (v29 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v29 + 1, 8);
    LODWORD(v29) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v29) = v28;
  v30 = *(_DWORD *)(a3 + 12);
  v31 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v31;
  v32 = *(unsigned int *)(a2 + 36);
  if (v31 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v31 + 1, 8);
    LODWORD(v31) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v31) = v32;
  ++*(_DWORD *)(a3 + 8);
  v33 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  v72 = 0;
  v73 = v33;
  v34 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v73, &v72))
    v34 = *(unsigned int *)(v72 + 12);
  v35 = *(unsigned int *)(a3 + 8);
  if (v35 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v35 + 1, 8);
    LODWORD(v35) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v35) = v34;
  ++*(_DWORD *)(a3 + 8);
  v36 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40);
  v72 = 0;
  v73 = v36;
  v37 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v73, &v72))
    v37 = *(unsigned int *)(v72 + 12);
  v38 = *(unsigned int *)(a3 + 8);
  if (v38 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v38 + 1, 8);
    LODWORD(v38) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v38) = v37;
  v39 = *(_DWORD *)(a3 + 12);
  v40 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v40;
  if (v40 >= v39)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v40 + 1, 8);
    LODWORD(v40) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v40) = 0;
  ++*(_DWORD *)(a3 + 8);
  v41 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 48);
  v72 = 0;
  v73 = v41;
  v42 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v73, &v72))
    v42 = *(unsigned int *)(v72 + 12);
  v43 = *(unsigned int *)(a3 + 8);
  if (v43 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v43 + 1, 8);
    LODWORD(v43) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v43) = v42;
  ++*(_DWORD *)(a3 + 8);
  v44 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56);
  v72 = 0;
  v73 = v44;
  v45 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v73, &v72))
    v45 = *(unsigned int *)(v72 + 12);
  v46 = *(unsigned int *)(a3 + 8);
  if (v46 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v46 + 1, 8);
    LODWORD(v46) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v46) = v45;
  v47 = *(_DWORD *)(a3 + 12);
  v48 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v48;
  v49 = *(_QWORD *)(a2 + 40);
  if (v48 >= v47)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v48 + 1, 8);
    LODWORD(v48) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v48) = v49;
  ++*(_DWORD *)(a3 + 8);
  v50 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 64);
  v72 = 0;
  v73 = v50;
  v51 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v73, &v72))
    v51 = *(unsigned int *)(v72 + 12);
  v52 = *(unsigned int *)(a3 + 8);
  if (v52 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v52 + 1, 8);
    LODWORD(v52) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v52) = v51;
  v53 = *(_DWORD *)(a3 + 12);
  v54 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v54;
  v55 = *(unsigned __int8 *)(a2 + 48);
  if (v54 >= v53)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v54 + 1, 8);
    LODWORD(v54) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v54) = v55;
  v56 = *(_DWORD *)(a3 + 12);
  v57 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v57;
  v58 = *(unsigned __int8 *)(a2 + 49);
  if (v57 >= v56)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v57 + 1, 8);
    LODWORD(v57) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v57) = v58;
  v59 = *(_DWORD *)(a3 + 12);
  v60 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v60;
  v61 = *(unsigned int *)(a2 + 52);
  if (v60 >= v59)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v60 + 1, 8);
    LODWORD(v60) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v60) = v61;
  v62 = *(_DWORD *)(a3 + 12);
  v63 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v63;
  v64 = *(unsigned __int8 *)(a2 + 56);
  if (v63 >= v62)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v63 + 1, 8);
    LODWORD(v63) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v63) = v64;
  ++*(_DWORD *)(a3 + 8);
  v65 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 72);
  v72 = 0;
  v73 = v65;
  v66 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v73, &v72))
    v66 = *(unsigned int *)(v72 + 12);
  v67 = *(unsigned int *)(a3 + 8);
  if (v67 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v67 + 1, 8);
    LODWORD(v67) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v67) = v66;
  ++*(_DWORD *)(a3 + 8);
  v68 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 80);
  v72 = 0;
  v73 = v68;
  v69 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v73, &v72))
    v69 = *(unsigned int *)(v72 + 12);
  v70 = *(unsigned int *)(a3 + 8);
  if (v70 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v70 + 1, 8);
    LODWORD(v70) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v70) = v69;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x14u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503A6CC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  llvm::raw_ostream *result;
  uint64_t v73;
  uint64_t v74;

  v8 = ((*(_BYTE *)(a2 + 1) & 0x7F) == 1) | 6;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  ++*(_DWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v73 = 0;
  v74 = v10;
  v11 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v74, &v73))
    v11 = *(unsigned int *)(v73 + 12);
  v12 = *(unsigned int *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v73 = 0;
  v74 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v74, &v73))
    v14 = *(unsigned int *)(v73 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  v16 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  v73 = 0;
  v74 = v16;
  v17 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v74, &v73))
    v17 = *(unsigned int *)(v73 + 12);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
  ++*(_DWORD *)(a3 + 8);
  v19 = a2;
  if (*(_BYTE *)a2 != 15)
    v19 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v73 = 0;
  v74 = v19;
  v20 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v74, &v73))
    v20 = *(unsigned int *)(v73 + 12);
  v21 = *(unsigned int *)(a3 + 8);
  if (v21 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v21) = v20;
  v22 = *(_DWORD *)(a3 + 12);
  v23 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v23;
  v24 = *(unsigned int *)(a2 + 24);
  if (v23 >= v22)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v23 + 1, 8);
    LODWORD(v23) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v23) = v24;
  ++*(_DWORD *)(a3 + 8);
  v25 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  v73 = 0;
  v74 = v25;
  v26 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v74, &v73))
    v26 = *(unsigned int *)(v73 + 12);
  v27 = *(unsigned int *)(a3 + 8);
  if (v27 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v27 + 1, 8);
    LODWORD(v27) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v27) = v26;
  v28 = *(_DWORD *)(a3 + 12);
  v29 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v29;
  v30 = *(unsigned int *)(a2 + 28);
  if (v29 >= v28)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v29 + 1, 8);
    LODWORD(v29) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v29) = v30;
  ++*(_DWORD *)(a3 + 8);
  v31 = *(unsigned int *)(a2 + 8);
  if (v31 < 9)
    v32 = 0;
  else
    v32 = *(_QWORD *)(a2 - 8 * v31 + 64);
  v73 = 0;
  v74 = v32;
  v33 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v74, &v73))
    v33 = *(unsigned int *)(v73 + 12);
  v34 = *(unsigned int *)(a3 + 8);
  if (v34 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v34 + 1, 8);
    LODWORD(v34) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v34) = v33;
  v35 = *(_DWORD *)(a3 + 12);
  v36 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v36;
  v37 = *(unsigned int *)(a2 + 44);
  if (v36 >= v35)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v36) = v37;
  v38 = *(_DWORD *)(a3 + 12);
  v39 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v39;
  v40 = *(unsigned int *)(a2 + 32);
  if (v39 >= v38)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v39 + 1, 8);
    LODWORD(v39) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v39) = v40;
  v41 = *(_DWORD *)(a3 + 12);
  v42 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v42;
  v43 = *(unsigned int *)(a2 + 40);
  if (v42 >= v41)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v42 + 1, 8);
    LODWORD(v42) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v42) = v43;
  ++*(_DWORD *)(a3 + 8);
  v44 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40);
  v73 = 0;
  v74 = v44;
  v45 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v74, &v73))
    v45 = *(unsigned int *)(v73 + 12);
  v46 = *(unsigned int *)(a3 + 8);
  if (v46 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v46 + 1, 8);
    LODWORD(v46) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v46) = v45;
  ++*(_DWORD *)(a3 + 8);
  v47 = *(unsigned int *)(a2 + 8);
  if (v47 < 0xA)
    v48 = 0;
  else
    v48 = *(_QWORD *)(a2 - 8 * v47 + 72);
  v73 = 0;
  v74 = v48;
  v49 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v74, &v73))
    v49 = *(unsigned int *)(v73 + 12);
  v50 = *(unsigned int *)(a3 + 8);
  if (v50 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v50 + 1, 8);
    LODWORD(v50) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v50) = v49;
  ++*(_DWORD *)(a3 + 8);
  v51 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 48);
  v73 = 0;
  v74 = v51;
  v52 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v74, &v73))
    v52 = *(unsigned int *)(v73 + 12);
  v53 = *(unsigned int *)(a3 + 8);
  if (v53 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v53 + 1, 8);
    LODWORD(v53) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v53) = v52;
  ++*(_DWORD *)(a3 + 8);
  v54 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56);
  v73 = 0;
  v74 = v54;
  v55 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v74, &v73))
    v55 = *(unsigned int *)(v73 + 12);
  v56 = *(unsigned int *)(a3 + 8);
  if (v56 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v56 + 1, 8);
    LODWORD(v56) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v56) = v55;
  v57 = *(_DWORD *)(a3 + 12);
  v58 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v58;
  v59 = *(int *)(a2 + 36);
  if (v58 >= v57)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v58 + 1, 8);
    LODWORD(v58) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v58) = v59;
  ++*(_DWORD *)(a3 + 8);
  v60 = *(unsigned int *)(a2 + 8);
  if (v60 < 0xB)
    v61 = 0;
  else
    v61 = *(_QWORD *)(a2 - 8 * v60 + 80);
  v73 = 0;
  v74 = v61;
  v62 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v74, &v73))
    v62 = *(unsigned int *)(v73 + 12);
  v63 = *(unsigned int *)(a3 + 8);
  if (v63 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v63 + 1, 8);
    LODWORD(v63) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v63) = v62;
  ++*(_DWORD *)(a3 + 8);
  v64 = *(unsigned int *)(a2 + 8);
  if (v64 < 0xC)
    v65 = 0;
  else
    v65 = *(_QWORD *)(a2 - 8 * v64 + 88);
  v73 = 0;
  v74 = v65;
  v66 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v74, &v73))
    v66 = *(unsigned int *)(v73 + 12);
  v67 = *(unsigned int *)(a3 + 8);
  if (v67 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v67 + 1, 8);
    LODWORD(v67) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v67) = v66;
  ++*(_DWORD *)(a3 + 8);
  v68 = *(unsigned int *)(a2 + 8);
  if (v68 < 0xD)
    v69 = 0;
  else
    v69 = *(_QWORD *)(a2 - 8 * v68 + 96);
  v73 = 0;
  v74 = v69;
  v70 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v74, &v73))
    v70 = *(unsigned int *)(v73 + 12);
  v71 = *(unsigned int *)(a3 + 8);
  if (v71 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v71 + 1, 8);
    LODWORD(v71) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v71) = v70;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x15u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503AEBC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  llvm::raw_ostream *result;
  uint64_t v23;
  uint64_t v24;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  ++*(_DWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v23 = 0;
  v24 = v10;
  v11 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v11 = *(unsigned int *)(v23 + 12);
  v12 = *(unsigned int *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 8);
  v13 = a2;
  if (*(_BYTE *)a2 != 15)
    v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v23 = 0;
  v24 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v14 = *(unsigned int *)(v23 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  v16 = *(_DWORD *)(a3 + 12);
  v17 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v17;
  v18 = *(unsigned int *)(a2 + 24);
  if (v17 >= v16)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v17) = v18;
  v19 = *(_DWORD *)(a3 + 12);
  v20 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v20;
  v21 = *(unsigned __int16 *)(a2 + 28);
  if (v20 >= v19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v20) = v21;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x16u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503B0C4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *result;
  uint64_t v20;
  uint64_t v21;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  ++*(_DWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v20 = 0;
  v21 = v10;
  v11 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v21, &v20))
    v11 = *(unsigned int *)(v20 + 12);
  v12 = *(unsigned int *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 8);
  v13 = a2;
  if (*(_BYTE *)a2 != 15)
    v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v20 = 0;
  v21 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v21, &v20))
    v14 = *(unsigned int *)(v20 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  v16 = *(_DWORD *)(a3 + 12);
  v17 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v17;
  v18 = *(unsigned int *)(a2 + 24);
  if (v17 >= v16)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v17) = v18;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x17u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503B290(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::raw_ostream *result;
  uint64_t v17;
  uint64_t v18;

  v8 = ((*(_BYTE *)(a2 + 1) & 0x7F) == 1) | (2 * (*(_BYTE *)(a2 + 24) & 1));
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  ++*(_DWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v17 = 0;
  v18 = v10;
  v11 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v18, &v17))
    v11 = *(unsigned int *)(v17 + 12);
  v12 = *(unsigned int *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v17 = 0;
  v18 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v18, &v17))
    v14 = *(unsigned int *)(v17 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x18u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503B418(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  llvm::raw_ostream *result;
  uint64_t v21;
  uint64_t v22;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  v10 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v10;
  v11 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v11)
  {
    v12 = -8 * v11;
    do
    {
      v13 = *(_QWORD *)(a2 + v12);
      v21 = 0;
      v22 = v13;
      v14 = 0;
      if (sub_1C4E36534((uint64_t *)(a1 + 240), &v22, &v21))
        v14 = *(unsigned int *)(v21 + 12);
      v15 = *(unsigned int *)(a3 + 8);
      if (v15 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
        v15 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
      v10 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v10;
      v12 += 8;
    }
    while (v12);
  }
  v16 = *(unsigned int *)(a2 + 24);
  if (v10 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v10 + 1, 8);
    v10 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v16;
  v17 = *(_DWORD *)(a3 + 12);
  v18 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v18;
  v19 = *(unsigned __int8 *)(a2 + 28);
  if (v18 >= v17)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v19;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x20u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503B5C8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *result;
  uint64_t v20;
  uint64_t v21;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  ++*(_DWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v20 = 0;
  v21 = v10;
  v11 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v21, &v20))
    v11 = *(unsigned int *)(v20 + 12);
  v12 = *(unsigned int *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v20 = 0;
  v21 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v21, &v20))
    v14 = *(unsigned int *)(v20 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  v16 = *(_DWORD *)(a3 + 12);
  v17 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v17;
  v18 = *(unsigned __int8 *)(a2 + 24);
  if (v17 >= v16)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v17) = v18;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x19u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503B784(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::raw_ostream *result;
  uint64_t v26;
  uint64_t v27;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  v10 = *(_DWORD *)(a3 + 12);
  v11 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v11;
  v12 = *(unsigned __int16 *)(a2 + 2);
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = v12;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v26 = 0;
  v27 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v27, &v26))
    v14 = *(unsigned int *)(v26 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  v16 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v26 = 0;
  v27 = v16;
  v17 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v27, &v26))
    v17 = *(unsigned int *)(v26 + 12);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
  v19 = *(_DWORD *)(a3 + 12);
  v20 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v20;
  v21 = *(unsigned __int8 *)(a2 + 24);
  if (v20 >= v19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v20) = v21;
  ++*(_DWORD *)(a3 + 8);
  v22 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v26 = 0;
  v27 = v22;
  v23 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v27, &v26))
    v23 = *(unsigned int *)(v26 + 12);
  v24 = *(unsigned int *)(a3 + 8);
  if (v24 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v24 + 1, 8);
    LODWORD(v24) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v24) = v23;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x1Au, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503B9E8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::raw_ostream *result;
  uint64_t v47;
  uint64_t v48;

  v8 = ((*(_BYTE *)(a2 + 1) & 0x7F) == 1) | 4;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  ++*(_DWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v47 = 0;
  v48 = v10;
  v11 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v48, &v47))
    v11 = *(unsigned int *)(v47 + 12);
  v12 = *(unsigned int *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v47 = 0;
  v48 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v48, &v47))
    v14 = *(unsigned int *)(v47 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  v16 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40);
  v47 = 0;
  v48 = v16;
  v17 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v48, &v47))
    v17 = *(unsigned int *)(v47 + 12);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
  ++*(_DWORD *)(a3 + 8);
  v19 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v47 = 0;
  v48 = v19;
  v20 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v48, &v47))
    v20 = *(unsigned int *)(v47 + 12);
  v21 = *(unsigned int *)(a3 + 8);
  if (v21 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v21) = v20;
  v22 = *(_DWORD *)(a3 + 12);
  v23 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v23;
  v24 = *(unsigned int *)(a2 + 24);
  if (v23 >= v22)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v23 + 1, 8);
    LODWORD(v23) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v23) = v24;
  ++*(_DWORD *)(a3 + 8);
  v25 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  v47 = 0;
  v48 = v25;
  v26 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v48, &v47))
    v26 = *(unsigned int *)(v47 + 12);
  v27 = *(unsigned int *)(a3 + 8);
  if (v27 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v27 + 1, 8);
    LODWORD(v27) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v27) = v26;
  v28 = *(_DWORD *)(a3 + 12);
  v29 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v29;
  v30 = *(unsigned __int8 *)(a2 + 32);
  if (v29 >= v28)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v29 + 1, 8);
    LODWORD(v29) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v29) = v30;
  v31 = *(_DWORD *)(a3 + 12);
  v32 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v32;
  v33 = *(unsigned __int8 *)(a2 + 33);
  if (v32 >= v31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v32 + 1, 8);
    LODWORD(v32) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v32) = v33;
  ++*(_DWORD *)(a3 + 8);
  v34 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 48);
  v47 = 0;
  v48 = v34;
  v35 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v48, &v47))
    v35 = *(unsigned int *)(v47 + 12);
  v36 = *(unsigned int *)(a3 + 8);
  if (v36 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v36) = v35;
  ++*(_DWORD *)(a3 + 8);
  v37 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56);
  v47 = 0;
  v48 = v37;
  v38 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v48, &v47))
    v38 = *(unsigned int *)(v47 + 12);
  v39 = *(unsigned int *)(a3 + 8);
  if (v39 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v39 + 1, 8);
    LODWORD(v39) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v39) = v38;
  v40 = *(_DWORD *)(a3 + 12);
  v41 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v41;
  v42 = *(unsigned int *)(a2 + 28);
  if (v41 >= v40)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v41 + 1, 8);
    LODWORD(v41) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v41) = v42;
  ++*(_DWORD *)(a3 + 8);
  v43 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 64);
  v47 = 0;
  v48 = v43;
  v44 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v48, &v47))
    v44 = *(unsigned int *)(v47 + 12);
  v45 = *(unsigned int *)(a3 + 8);
  if (v45 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v45 + 1, 8);
    LODWORD(v45) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v45) = v44;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x1Bu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503BEE4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::raw_ostream *result;
  uint64_t v38;
  uint64_t v39;

  v8 = ((*(_BYTE *)(a2 + 1) & 0x7F) == 1) | 2;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  ++*(_DWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v38 = 0;
  v39 = v10;
  v11 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v39, &v38))
    v11 = *(unsigned int *)(v38 + 12);
  v12 = *(unsigned int *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v38 = 0;
  v39 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v39, &v38))
    v14 = *(unsigned int *)(v38 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  v16 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v38 = 0;
  v39 = v16;
  v17 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v39, &v38))
    v17 = *(unsigned int *)(v38 + 12);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
  v19 = *(_DWORD *)(a3 + 12);
  v20 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v20;
  v21 = *(unsigned int *)(a2 + 24);
  if (v20 >= v19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v20) = v21;
  ++*(_DWORD *)(a3 + 8);
  v22 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  v38 = 0;
  v39 = v22;
  v23 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v39, &v38))
    v23 = *(unsigned int *)(v38 + 12);
  v24 = *(unsigned int *)(a3 + 8);
  if (v24 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v24 + 1, 8);
    LODWORD(v24) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v24) = v23;
  v25 = *(_DWORD *)(a3 + 12);
  v26 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v26;
  v27 = *(unsigned __int16 *)(a2 + 32);
  if (v26 >= v25)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v26) = v27;
  v28 = *(_DWORD *)(a3 + 12);
  v29 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v29;
  v30 = *(unsigned int *)(a2 + 36);
  if (v29 >= v28)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v29 + 1, 8);
    LODWORD(v29) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v29) = v30;
  v31 = *(_DWORD *)(a3 + 12);
  v32 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v32;
  v33 = *(unsigned int *)(a2 + 28);
  if (v32 >= v31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v32 + 1, 8);
    LODWORD(v32) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v32) = v33;
  ++*(_DWORD *)(a3 + 8);
  v34 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  v38 = 0;
  v39 = v34;
  v35 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v39, &v38))
    v35 = *(unsigned int *)(v38 + 12);
  v36 = *(unsigned int *)(a3 + 8);
  if (v36 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v36) = v35;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x1Cu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503C29C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  llvm::raw_ostream *result;
  uint64_t v23;
  uint64_t v24;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  ++*(_DWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v23 = 0;
  v24 = v10;
  v11 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v11 = *(unsigned int *)(v23 + 12);
  v12 = *(unsigned int *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v23 = 0;
  v24 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v14 = *(unsigned int *)(v23 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  v16 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v23 = 0;
  v24 = v16;
  v17 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v17 = *(unsigned int *)(v23 + 12);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
  v19 = *(_DWORD *)(a3 + 12);
  v20 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v20;
  v21 = *(unsigned int *)(a2 + 24);
  if (v20 >= v19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v20) = v21;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x28u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503C4C4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::raw_ostream *result;
  uint64_t v32;
  uint64_t v33;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  ++*(_DWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v32 = 0;
  v33 = v10;
  v11 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v33, &v32))
    v11 = *(unsigned int *)(v32 + 12);
  v12 = *(unsigned int *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v32 = 0;
  v33 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v33, &v32))
    v14 = *(unsigned int *)(v32 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  v16 = *(_DWORD *)(a3 + 12);
  v17 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v17;
  v18 = *(unsigned int *)(a2 + 24);
  if (v17 >= v16)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v17) = v18;
  ++*(_DWORD *)(a3 + 8);
  v19 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  v32 = 0;
  v33 = v19;
  v20 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v33, &v32))
    v20 = *(unsigned int *)(v32 + 12);
  v21 = *(unsigned int *)(a3 + 8);
  if (v21 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v21) = v20;
  ++*(_DWORD *)(a3 + 8);
  v22 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v32 = 0;
  v33 = v22;
  v23 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v33, &v32))
    v23 = *(unsigned int *)(v32 + 12);
  v24 = *(unsigned int *)(a3 + 8);
  if (v24 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v24 + 1, 8);
    LODWORD(v24) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v24) = v23;
  v25 = *(_DWORD *)(a3 + 12);
  v26 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v26;
  v27 = *(unsigned int *)(a2 + 28);
  if (v26 >= v25)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v26) = v27;
  ++*(_DWORD *)(a3 + 8);
  v28 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  v32 = 0;
  v33 = v28;
  v29 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v33, &v32))
    v29 = *(unsigned int *)(v32 + 12);
  v30 = *(unsigned int *)(a3 + 8);
  if (v30 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v30 + 1, 8);
    LODWORD(v30) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v30) = v29;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x1Eu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503C800(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::raw_ostream *result;
  uint64_t v32;
  uint64_t v33;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  v10 = *(_DWORD *)(a3 + 12);
  v11 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v11;
  v12 = *(unsigned __int16 *)(a2 + 2);
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = v12;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v32 = 0;
  v33 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v33, &v32))
    v14 = *(unsigned int *)(v32 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  v16 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v32 = 0;
  v33 = v16;
  v17 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v33, &v32))
    v17 = *(unsigned int *)(v32 + 12);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
  v19 = *(_DWORD *)(a3 + 12);
  v20 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v20;
  v21 = *(unsigned int *)(a2 + 24);
  if (v20 >= v19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v20) = v21;
  ++*(_DWORD *)(a3 + 8);
  v22 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v32 = 0;
  v33 = v22;
  v23 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v33, &v32))
    v23 = *(unsigned int *)(v32 + 12);
  v24 = *(unsigned int *)(a3 + 8);
  if (v24 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v24 + 1, 8);
    LODWORD(v24) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v24) = v23;
  ++*(_DWORD *)(a3 + 8);
  v25 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  v32 = 0;
  v33 = v25;
  v26 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v33, &v32))
    v26 = *(unsigned int *)(v32 + 12);
  v27 = *(unsigned int *)(a3 + 8);
  if (v27 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v27 + 1, 8);
    LODWORD(v27) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v27) = v26;
  ++*(_DWORD *)(a3 + 8);
  v28 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  v32 = 0;
  v33 = v28;
  v29 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v33, &v32))
    v29 = *(unsigned int *)(v32 + 12);
  v30 = *(unsigned int *)(a3 + 8);
  if (v30 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v30 + 1, 8);
    LODWORD(v30) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v30) = v29;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x1Fu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503CB3C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::raw_ostream *result;
  uint64_t v23;
  uint64_t v24;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  v10 = *(_DWORD *)(a3 + 12);
  v11 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v11;
  v12 = *(unsigned __int16 *)(a2 + 2);
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = v12;
  v13 = *(_DWORD *)(a3 + 12);
  v14 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v14;
  v15 = *(unsigned int *)(a2 + 24);
  if (v14 >= v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v14) = v15;
  ++*(_DWORD *)(a3 + 8);
  v16 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v23 = 0;
  v24 = v16;
  v17 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v17 = *(unsigned int *)(v23 + 12);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
  ++*(_DWORD *)(a3 + 8);
  v19 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v23 = 0;
  v24 = v19;
  v20 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v20 = *(unsigned int *)(v23 + 12);
  v21 = *(unsigned int *)(a3 + 8);
  if (v21 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v21) = v20;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x21u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503CD34(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::raw_ostream *result;
  uint64_t v23;
  uint64_t v24;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  v10 = *(_DWORD *)(a3 + 12);
  v11 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v11;
  v12 = *(unsigned __int16 *)(a2 + 2);
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = v12;
  v13 = *(_DWORD *)(a3 + 12);
  v14 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v14;
  v15 = *(unsigned int *)(a2 + 24);
  if (v14 >= v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v14) = v15;
  ++*(_DWORD *)(a3 + 8);
  v16 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v23 = 0;
  v24 = v16;
  v17 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v17 = *(unsigned int *)(v23 + 12);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
  ++*(_DWORD *)(a3 + 8);
  v19 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v23 = 0;
  v24 = v19;
  v20 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v20 = *(unsigned int *)(v23 + 12);
  v21 = *(unsigned int *)(a3 + 8);
  if (v21 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v21) = v20;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x22u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503CF2C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  llvm::raw_ostream *result;
  uint64_t v26;
  uint64_t v27;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  ++*(_DWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v26 = 0;
  v27 = v10;
  v11 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v27, &v26))
    v11 = *(unsigned int *)(v26 + 12);
  v12 = *(unsigned int *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v26 = 0;
  v27 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v27, &v26))
    v14 = *(unsigned int *)(v26 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  v16 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v26 = 0;
  v27 = v16;
  v17 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v27, &v26))
    v17 = *(unsigned int *)(v26 + 12);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
  ++*(_DWORD *)(a3 + 8);
  v19 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  v26 = 0;
  v27 = v19;
  v20 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v27, &v26))
    v20 = *(unsigned int *)(v26 + 12);
  v21 = *(unsigned int *)(a3 + 8);
  if (v21 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v21) = v20;
  v22 = *(_DWORD *)(a3 + 12);
  v23 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v23;
  v24 = *(unsigned int *)(a2 + 24);
  if (v23 >= v22)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v23 + 1, 8);
    LODWORD(v23) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v23) = v24;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x2Cu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503D1C0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  llvm::raw_ostream *result;
  uint64_t v15;
  uint64_t v16;

  v8 = *(unsigned int *)(a2 + 32);
  if (*(_DWORD *)(a3 + 12) < v8)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v8, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 32);
  }
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t **)(a2 + 24);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      v15 = 0;
      v16 = v11;
      if (sub_1C4E36534((uint64_t *)(a1 + 240), &v16, &v15))
        v12 = *(_DWORD *)(v15 + 12) - 1;
      else
        v12 = -1;
      v13 = *(unsigned int *)(a3 + 8);
      if (v13 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v13 + 1, 8);
        v13 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v13) = v12;
      ++*(_DWORD *)(a3 + 8);
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x2Eu, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503D2E8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  llvm::raw_ostream *result;
  uint64_t v35;
  uint64_t v36;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  v10 = *(_DWORD *)(a3 + 12);
  v11 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v11;
  v12 = *(unsigned __int16 *)(a2 + 2);
  if (v11 >= v10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = v12;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v35 = 0;
  v36 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v36, &v35))
    v14 = *(unsigned int *)(v35 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  v16 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  v35 = 0;
  v36 = v16;
  v17 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v36, &v35))
    v17 = *(unsigned int *)(v35 + 12);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
  ++*(_DWORD *)(a3 + 8);
  v19 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  v35 = 0;
  v36 = v19;
  v20 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v36, &v35))
    v20 = *(unsigned int *)(v35 + 12);
  v21 = *(unsigned int *)(a3 + 8);
  if (v21 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v21) = v20;
  ++*(_DWORD *)(a3 + 8);
  v22 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 40);
  v35 = 0;
  v36 = v22;
  v23 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v36, &v35))
    v23 = *(unsigned int *)(v35 + 12);
  v24 = *(unsigned int *)(a3 + 8);
  if (v24 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v24 + 1, 8);
    LODWORD(v24) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v24) = v23;
  v25 = *(_DWORD *)(a3 + 12);
  v26 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v26;
  v27 = *(_QWORD *)(a2 + 32);
  if (v26 >= v25)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v26) = v27;
  v28 = *(_DWORD *)(a3 + 12);
  v29 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v29;
  v30 = *(unsigned int *)(a2 + 48);
  if (v29 >= v28)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v29 + 1, 8);
    LODWORD(v29) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v29) = v30;
  v31 = *(_DWORD *)(a3 + 12);
  v32 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v32;
  v33 = *(unsigned int *)(a2 + 52);
  if (v32 >= v31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v32 + 1, 8);
    LODWORD(v32) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v32) = v33;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x29u, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503D630(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::raw_ostream *result;
  uint64_t v23;
  uint64_t v24;

  v8 = (*(_BYTE *)(a2 + 1) & 0x7F) == 1;
  v9 = *(unsigned int *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  ++*(_DWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  v23 = 0;
  v24 = v10;
  v11 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v11 = *(unsigned int *)(v23 + 12);
  v12 = *(unsigned int *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  v23 = 0;
  v24 = v13;
  v14 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v14 = *(unsigned int *)(v23 + 12);
  v15 = *(unsigned int *)(a3 + 8);
  if (v15 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
  ++*(_DWORD *)(a3 + 8);
  v16 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  v23 = 0;
  v24 = v16;
  v17 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v17 = *(unsigned int *)(v23 + 12);
  v18 = *(unsigned int *)(a3 + 8);
  if (v18 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
  ++*(_DWORD *)(a3 + 8);
  v19 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
  v23 = 0;
  v24 = v19;
  v20 = 0;
  if (sub_1C4E36534((uint64_t *)(a1 + 240), &v24, &v23))
    v20 = *(unsigned int *)(v23 + 12);
  v21 = *(unsigned int *)(a3 + 8);
  if (v21 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v21) = v20;
  ++*(_DWORD *)(a3 + 8);
  result = sub_1C503D888(*(llvm::raw_ostream **)a1, 0x2Du, a3, a4);
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

llvm::raw_ostream *sub_1C503D888(llvm::raw_ostream *result, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  int v28;
  unsigned int v29;

  v5 = a2;
  v6 = result;
  if (a4)
    return sub_1C5033D5C(result, a4, *(_QWORD *)a3, *(unsigned int *)(a3 + 8), 0, 0, a2 | 0x100000000);
  v7 = *(unsigned int *)(a3 + 8);
  v8 = *((_DWORD *)result + 8);
  v9 = *((_DWORD *)result + 6);
  v10 = *((_DWORD *)result + 7) | (3 << v9);
  *((_DWORD *)result + 7) = v10;
  v11 = v9 + v8;
  if (v11 >= 0x20)
  {
    result = sub_1C503027C((uint64_t *)result, v10);
    v20 = *((_DWORD *)v6 + 6);
    if (v20)
      v10 = 3u >> -(char)v20;
    else
      v10 = 0;
    v11 = ((_BYTE)v20 + (_BYTE)v8) & 0x1F;
  }
  *((_DWORD *)v6 + 6) = v11;
  if (v5 >= 0x20)
  {
    do
    {
      v29 = v5 & 0x1F | 0x20;
      v10 |= v29 << v11;
      *((_DWORD *)v6 + 7) = v10;
      if (v11 >= 0x1A)
      {
        result = sub_1C503027C((uint64_t *)v6, v10);
        v28 = *((_DWORD *)v6 + 6);
        if (v28)
          v10 = v29 >> -(char)v28;
        else
          v10 = 0;
        *((_DWORD *)v6 + 7) = v10;
        v11 = ((_BYTE)v28 + 6) & 0x1F;
      }
      else
      {
        v11 += 6;
      }
      *((_DWORD *)v6 + 6) = v11;
      v12 = v5 >> 5;
      v26 = v5 > 0x3FF;
      v5 >>= 5;
    }
    while (v26);
  }
  else
  {
    v12 = v5;
  }
  v13 = (v12 << v11) | v10;
  *((_DWORD *)v6 + 7) = v13;
  if (v11 >= 0x1A)
  {
    result = sub_1C503027C((uint64_t *)v6, v13);
    v21 = *((_DWORD *)v6 + 6);
    if (v21)
      v13 = v12 >> -(char)v21;
    else
      v13 = 0;
    v14 = ((_BYTE)v21 + 6) & 0x1F;
  }
  else
  {
    v14 = v11 + 6;
  }
  *((_DWORD *)v6 + 6) = v14;
  if (v7 >= 0x20)
  {
    v24 = v7;
    do
    {
      v25 = v24 & 0x1F | 0x20;
      v13 |= v25 << v14;
      *((_DWORD *)v6 + 7) = v13;
      if (v14 >= 0x1A)
      {
        result = sub_1C503027C((uint64_t *)v6, v13);
        v27 = *((_DWORD *)v6 + 6);
        if (v27)
          v13 = v25 >> -(char)v27;
        else
          v13 = 0;
        *((_DWORD *)v6 + 7) = v13;
        v14 = ((_BYTE)v27 + 6) & 0x1F;
      }
      else
      {
        v14 += 6;
      }
      *((_DWORD *)v6 + 6) = v14;
      v15 = v24 >> 5;
      v26 = v24 > 0x3FF;
      v24 >>= 5;
    }
    while (v26);
  }
  else
  {
    v15 = v7;
  }
  v16 = (v15 << v14) | v13;
  *((_DWORD *)v6 + 7) = v16;
  if (v14 >= 0x1A)
  {
    result = sub_1C503027C((uint64_t *)v6, v16);
    v22 = *((_DWORD *)v6 + 6);
    v23 = v15 >> -(char)v22;
    if (!v22)
      v23 = 0;
    *((_DWORD *)v6 + 7) = v23;
    v17 = ((_BYTE)v22 + 6) & 0x1F;
  }
  else
  {
    v17 = v14 + 6;
  }
  *((_DWORD *)v6 + 6) = v17;
  if ((_DWORD)v7)
  {
    v18 = 0;
    v19 = 8 * v7;
    do
    {
      result = sub_1C5030AF8(v6, *(_QWORD *)(*(_QWORD *)a3 + v18), 6);
      v18 += 8;
    }
    while (v19 != v18);
  }
  return result;
}

uint64_t sub_1C503DAE8(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;

  v3 = (_DWORD)a3 - (_DWORD)a2;
  v4 = *(unsigned int *)(result + 8);
  v5 = a3 - a2 + v4;
  if (v5 > *(unsigned int *)(result + 12))
  {
    v10 = (_DWORD)a3 - (_DWORD)a2;
    v11 = result;
    v8 = a3;
    v9 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v5, 8);
    a2 = v9;
    v3 = v10;
    a3 = v8;
    result = v11;
    v4 = *(unsigned int *)(v11 + 8);
  }
  if (a2 != a3)
  {
    v6 = (_QWORD *)(*(_QWORD *)result + 8 * v4);
    do
    {
      v7 = *a2++;
      *v6++ = v7;
    }
    while (a2 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + v3;
  return result;
}

void sub_1C503DB70(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  char *v5;
  uint64_t *v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x400000000;
  llvm::Value::getAllMetadata(a3, (uint64_t)&v15);
  v5 = (char *)v15;
  if ((_DWORD)v16)
  {
    v6 = (uint64_t *)(a1 + 240);
    v7 = *(_DWORD *)(a2 + 8);
    v8 = (char *)v15 + 16 * v16;
    do
    {
      v9 = *(unsigned int *)v5;
      if (v7 >= *(_DWORD *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v7 + 1, 8);
        v7 = *(_DWORD *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v9;
      ++*(_DWORD *)(a2 + 8);
      v10 = *((_QWORD *)v5 + 1);
      v13 = 0;
      v14 = v10;
      if (sub_1C4E36534(v6, &v14, &v13))
        v11 = *(_DWORD *)(v13 + 12) - 1;
      else
        v11 = -1;
      v12 = *(unsigned int *)(a2 + 8);
      if (v12 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 8);
        v12 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v12) = v11;
      v7 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v7;
      v5 += 16;
    }
    while (v5 != v8);
    v5 = (char *)v15;
  }
  if (v5 != (char *)v17)
    free(v5);
}

void sub_1C503DCF8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t **v17;
  void *v18;
  uint64_t v19;
  int v20;
  uint64_t **v21;
  int v22;
  void ***v23;
  int v24;
  uint64_t **v25;
  int v26;
  uint64_t **v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  _DWORD *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t **v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  int ValueID;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t **v50;
  int v51;
  void ***v52;
  int v53;
  uint64_t **v54;
  int v55;
  uint64_t **v56;
  int v57;
  uint64_t **v58;
  uint64_t *v59;
  _DWORD *v60;
  int v61;
  _DWORD *v62;
  int v63;
  void ***v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  int v71;
  uint64_t **v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  _DWORD *v79;
  int v80;
  uint64_t **v81;
  int v82;
  uint64_t **v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  uint64_t **v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  _BOOL4 v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t *v123;
  void *v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  uint64_t v136;
  int v137;
  unsigned int v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  uint64_t v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t **v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int v163;
  int v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  llvm::raw_ostream *v171;
  int v172;
  int v173;
  int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  int v185;
  void ***v186;
  void *v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t *v192;
  int v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  unsigned int v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  void *v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t *v207;
  int v208;
  int v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  int v213;
  unint64_t v214;
  _BOOL4 v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  const void *v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  int v232;
  uint64_t *v233;
  int v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  unint64_t v248;
  int v249;
  uint64_t **v250;
  int v251;
  uint64_t v252;
  unsigned int v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int v257;
  int v258;
  unsigned int v259;
  uint64_t v260;
  int v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  int v269;
  int v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  int v279;
  unint64_t v280;
  int v281;
  uint64_t v282;
  const void *v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  int v294;
  unsigned int v295;
  uint64_t v296;
  int v297;
  unsigned int v298;
  uint64_t v299;
  int v300;
  unsigned int v301;
  uint64_t v302;
  int v303;
  unsigned int v304;
  uint64_t v305;
  int v306;
  uint64_t **v307;
  uint64_t **v308;
  int v309;
  int v310;
  int v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unsigned int v317;
  uint64_t v318;
  int v319;
  int v320;
  uint64_t v321;
  unsigned int v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  int v326;
  unint64_t v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  int v337;
  unsigned int v338;
  int v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unsigned int v343;
  uint64_t v344;
  int v345;
  int v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  int v357;
  uint64_t v358;
  int v359;
  unsigned int v360;
  int v361;
  uint64_t v362;
  unint64_t v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  unsigned int v368;
  int v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  unint64_t v386;
  int v387;
  uint64_t v388;
  int v389;
  unsigned int v390;
  int v391;
  uint64_t v392;
  unint64_t v393;
  int v394;
  uint64_t v395;
  int v396;
  uint64_t v397;
  _BOOL4 v398;
  void *v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  unsigned int v403;
  _BOOL4 v404;
  int v405;
  int v406;
  uint64_t v407;
  int v408;
  uint64_t v409;
  uint64_t v410;
  void *v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  unsigned int v415;
  uint64_t v416;
  int v417;
  unsigned int v418;
  uint64_t v419;
  int v420;
  uint64_t v421;
  int v422;
  int v423;
  unsigned int v424;
  llvm::raw_ostream *v425;
  int v426;
  int v427;
  int v428;
  unsigned int v429;
  uint64_t v430;
  int v431;
  int v432;
  int v433;
  unsigned int v434;
  int v435;
  unsigned int v436;
  unsigned int v437;
  int v438;
  int v439;
  uint64_t v440;
  uint64_t v441;
  unsigned int v442;
  int v443;
  int v444;
  int v445;
  unsigned int v446;
  int v447;
  unsigned int v448;
  unsigned int v449;
  BOOL v450;
  int v451;
  unsigned int v452;
  unsigned int v453;
  int v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  void *v464;
  uint64_t v465;
  _QWORD v466[130];

  v466[128] = *MEMORY[0x1E0C80C00];
  v464 = (void *)a2;
  v8 = *(_DWORD *)(a1 + 440);
  *(_DWORD *)(a1 + 440) = v8 + 1;
  *((_DWORD *)sub_1C504894C(a1 + 416, (uint64_t *)&v464) + 2) = v8;
  v9 = *(unsigned __int8 *)(a2 + 16);
  v461 = a1;
  v10 = a1 + 24;
  v11 = 15;
  v12 = 12;
  switch(*(_BYTE *)(a2 + 16))
  {
    case 0x1D:
      v48 = *(_DWORD *)(a2 + 20);
      v49 = v48 & 0x7FFFFFF;
      if ((v48 & 0x7FFFFFF) == 0)
      {
        v12 = 10;
        v11 = 10;
        goto LABEL_613;
      }
      if ((_DWORD)v49 == 1)
      {
        if ((v48 & 0x40000000) != 0)
          v50 = *(uint64_t ***)(a2 - 8);
        else
          v50 = (uint64_t **)(a2 - 32);
        v11 = 10;
        if (!sub_1C5040CAC(a1, *v50, a3, a4))
        {
          v12 = 11;
          goto LABEL_613;
        }
      }
      else
      {
        v312 = 0;
        v11 = 10;
        do
        {
          v313 = *(_DWORD *)(a2 + 20);
          if ((v313 & 0x40000000) != 0)
            v314 = *(_QWORD *)(a2 - 8);
          else
            v314 = a2 - 32 * (v313 & 0x7FFFFFF);
          sub_1C5040CAC(a1, *(uint64_t **)(v314 + v312), a3, a4);
          v312 += 32;
          --v49;
        }
        while (v49);
      }
      goto LABEL_581;
    case 0x1E:
      ValueID = llvm::ValueEnumerator::getValueID(a1 + 24, *(_QWORD *)(a2 - 32));
      v45 = *(unsigned int *)(a4 + 8);
      if (v45 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v45 + 1, 4);
        LODWORD(v45) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v45) = ValueID;
      ++*(_DWORD *)(a4 + 8);
      if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
      {
        v46 = llvm::ValueEnumerator::getValueID(a1 + 24, *(_QWORD *)(a2 - 64));
        v47 = *(unsigned int *)(a4 + 8);
        if (v47 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v47 + 1, 4);
          LODWORD(v47) = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v47) = v46;
        ++*(_DWORD *)(a4 + 8);
        sub_1C5040DBC(a1, *(_QWORD *)(a2 - 96), a3, a4);
      }
      v11 = 11;
      goto LABEL_581;
    case 0x1F:
      v63 = *(_DWORD *)(a2 + 20);
      if ((v63 & 0x40000000) != 0)
        v64 = *(void ****)(a2 - 8);
      else
        v64 = (void ***)(a2 - 32 * (v63 & 0x7FFFFFF));
      v228 = **v64;
      v463 = 0;
      v464 = v228;
      if (sub_1C4DD8A9C((uint64_t *)(a1 + 48), &v464, &v463))
        v229 = v463;
      else
        v229 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      v230 = *(_DWORD *)(v229 + 8) - 1;
      v231 = *(unsigned int *)(a4 + 8);
      if (v231 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v231 + 1, 4);
        LODWORD(v231) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v231) = v230;
      ++*(_DWORD *)(a4 + 8);
      v232 = *(_DWORD *)(a2 + 20);
      if ((v232 & 0x40000000) != 0)
        v233 = *(uint64_t **)(a2 - 8);
      else
        v233 = (uint64_t *)(a2 - 32 * (v232 & 0x7FFFFFF));
      sub_1C5040DBC(a1, *v233, a3, a4);
      v234 = *(_DWORD *)(a2 + 20);
      if ((v234 & 0x40000000) != 0)
        v235 = *(_QWORD *)(a2 - 8);
      else
        v235 = a2 - 32 * (v234 & 0x7FFFFFF);
      v236 = llvm::ValueEnumerator::getValueID(a1 + 24, *(_QWORD *)(v235 + 32));
      v237 = *(unsigned int *)(a4 + 8);
      if (v237 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v237 + 1, 4);
        LODWORD(v237) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v237) = v236;
      ++*(_DWORD *)(a4 + 8);
      if (((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF) == 1)
      {
        v11 = 12;
      }
      else
      {
        v238 = 0;
        v239 = 2 * (((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFFu) - 1);
        v11 = 12;
        do
        {
          v240 = *(_DWORD *)(a2 + 20);
          if ((v240 & 0x40000000) != 0)
            v241 = *(_QWORD *)(a2 - 8);
          else
            v241 = a2 - 32 * (v240 & 0x7FFFFFF);
          v242 = llvm::ValueEnumerator::getValueID(v10, *(_QWORD *)(v241 + 32 * (((_DWORD)v238 + 2) & 0xFFFFFFFE)));
          v243 = *(unsigned int *)(a4 + 8);
          if (v243 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v243 + 1, 4);
            v243 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v243) = v242;
          ++*(_DWORD *)(a4 + 8);
          v244 = *(_DWORD *)(a2 + 20);
          if ((v244 & 0x40000000) != 0)
            v245 = *(_QWORD *)(a2 - 8);
          else
            v245 = a2 - 32 * (v244 & 0x7FFFFFF);
          v246 = (v238 + 3);
          if (v238 == 0x1FFFFFFFCLL)
            v246 = 1;
          v247 = llvm::ValueEnumerator::getValueID(v10, *(_QWORD *)(v245 + 32 * v246));
          v248 = *(unsigned int *)(a4 + 8);
          if (v248 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v248 + 1, 4);
            v248 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v248) = v247;
          ++*(_DWORD *)(a4 + 8);
          v238 += 2;
        }
        while (v239 != v238);
      }
      goto LABEL_581;
    case 0x20:
      v51 = *(_DWORD *)(a2 + 20);
      if ((v51 & 0x40000000) != 0)
        v52 = *(void ****)(a2 - 8);
      else
        v52 = (void ***)(a2 - 32 * (v51 & 0x7FFFFFF));
      v202 = **v52;
      v463 = 0;
      v464 = v202;
      if (sub_1C4DD8A9C((uint64_t *)(a1 + 48), &v464, &v463))
        v203 = v463;
      else
        v203 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      v204 = *(_DWORD *)(v203 + 8) - 1;
      v205 = *(unsigned int *)(a4 + 8);
      if (v205 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v205 + 1, 4);
        LODWORD(v205) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v205) = v204;
      ++*(_DWORD *)(a4 + 8);
      v206 = *(_DWORD *)(a2 + 20);
      if ((v206 & 0x40000000) != 0)
        v207 = *(uint64_t **)(a2 - 8);
      else
        v207 = (uint64_t *)(a2 - 32 * (v206 & 0x7FFFFFF));
      sub_1C5040DBC(a1, *v207, a3, a4);
      v208 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      v209 = v208 - 1;
      if (v208 == 1)
      {
        v11 = 31;
      }
      else
      {
        v210 = 32;
        v11 = 31;
        do
        {
          v211 = *(_DWORD *)(a2 + 20);
          if ((v211 & 0x40000000) != 0)
            v212 = *(_QWORD *)(a2 - 8);
          else
            v212 = a2 - 32 * (v211 & 0x7FFFFFF);
          v213 = llvm::ValueEnumerator::getValueID(v10, *(_QWORD *)(v212 + v210));
          v214 = *(unsigned int *)(a4 + 8);
          if (v214 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v214 + 1, 4);
            v214 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v214) = v213;
          ++*(_DWORD *)(a4 + 8);
          v210 += 32;
          --v209;
        }
        while (v209);
      }
      goto LABEL_581;
    case 0x21:
      v59 = *(uint64_t **)(a2 - 32);
      v60 = *(_DWORD **)(a2 + 72);
      v61 = *(_DWORD *)(a2 + 20);
      if (v61 < 0 && (*(_QWORD *)(a2 - 32 * (v61 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0)
        sub_1C5040E30((llvm::raw_ostream **)v461, a2, a3);
      v463 = *(_QWORD *)(a2 + 64);
      if (v463)
      {
        v464 = 0;
        if (sub_1C5034C00((uint64_t *)(v461 + 344), &v463, &v464))
          v62 = v464;
        else
          v62 = (_DWORD *)(*(_QWORD *)(v461 + 344) + 16 * *(unsigned int *)(v461 + 360));
        v310 = v62[2];
      }
      else
      {
        v310 = 0;
      }
      v342 = *(unsigned int *)(a4 + 8);
      if (v342 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v342 + 1, 4);
        LODWORD(v342) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v342) = v310;
      v343 = *(_DWORD *)(a4 + 12);
      v344 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v344;
      v345 = (*(unsigned __int16 *)(a2 + 18) >> 2) & 0x3FF | 0x2000;
      if (v344 >= v343)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v344 + 1, 4);
        LODWORD(v344) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v344) = v345;
      ++*(_DWORD *)(a4 + 8);
      v346 = llvm::ValueEnumerator::getValueID(v10, *(_QWORD *)(a2 - 96));
      v347 = *(unsigned int *)(a4 + 8);
      if (v347 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v347 + 1, 4);
        LODWORD(v347) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v347) = v346;
      ++*(_DWORD *)(a4 + 8);
      v348 = llvm::ValueEnumerator::getValueID(v10, *(_QWORD *)(a2 - 64));
      v349 = *(unsigned int *)(a4 + 8);
      if (v349 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v349 + 1, 4);
        LODWORD(v349) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v349) = v348;
      ++*(_DWORD *)(a4 + 8);
      v463 = 0;
      v464 = v60;
      if (sub_1C4DD8A9C((uint64_t *)(v461 + 48), &v464, &v463))
        v350 = v463;
      else
        v350 = *(_QWORD *)(v461 + 48) + 16 * *(unsigned int *)(v461 + 64);
      v351 = *(_DWORD *)(v350 + 8) - 1;
      v352 = *(unsigned int *)(a4 + 8);
      if (v352 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v352 + 1, 4);
        LODWORD(v352) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v352) = v351;
      ++*(_DWORD *)(a4 + 8);
      sub_1C5040CAC(v461, v59, a3, a4);
      if (v60[3] != 1)
      {
        v353 = 0;
        v354 = 32 * (v60[3] - 1);
        do
        {
          v355 = *(_DWORD *)(a2 + 20);
          if ((v355 & 0x40000000) != 0)
            v356 = *(_QWORD *)(a2 - 8);
          else
            v356 = a2 - 32 * (v355 & 0x7FFFFFF);
          sub_1C5040DBC(v461, *(_QWORD *)(v356 + v353), a3, a4);
          v353 += 32;
        }
        while (v354 != v353);
      }
      if (v60[2] <= 0xFFu)
        goto LABEL_463;
      v357 = *(unsigned __int8 *)(a2 + 16);
      if (v357 == 84)
      {
        v358 = 0;
      }
      else if (v357 == 39)
      {
        v358 = (*(_DWORD *)(a2 + 80) + 1);
      }
      else
      {
        v358 = 2;
      }
      v359 = 0;
      v360 = v60[3] - 1;
      v361 = *(_DWORD *)(a2 + 20);
      v362 = -(uint64_t)(v361 & 0x7FFFFFF);
      if (v361 < 0)
      {
        v457 = a2 - 32 * (v361 & 0x7FFFFFF);
        v458 = *(_QWORD *)(v457 - 8);
        if ((v458 & 0xFFFFFFFF0) != 0)
          v359 = *(_DWORD *)(v457 - 12) - *(_DWORD *)(v457 - v458);
        else
          v359 = 0;
      }
      v363 = (-32 * v358 + 32 * (unint64_t)-v359 - 32 * v362 - 32) >> 5;
      if (v360 == (_DWORD)v363)
      {
LABEL_463:
        v11 = 13;
      }
      else
      {
        v11 = 13;
        do
        {
          v396 = *(_DWORD *)(a2 + 20);
          if ((v396 & 0x40000000) != 0)
            v397 = *(_QWORD *)(a2 - 8);
          else
            v397 = a2 - 32 * (v396 & 0x7FFFFFF);
          sub_1C5040CAC(v461, *(uint64_t **)(v397 + 32 * v360++), a3, a4);
        }
        while ((_DWORD)v363 != v360);
      }
      goto LABEL_581;
    case 0x22:
      v71 = *(_DWORD *)(a2 + 20);
      if ((v71 & 0x40000000) != 0)
        v72 = *(uint64_t ***)(a2 - 8);
      else
        v72 = (uint64_t **)(a2 - 32 * (v71 & 0x7FFFFFF));
      sub_1C5040CAC(a1, *v72, a3, a4);
      v11 = 39;
      goto LABEL_581;
    case 0x23:
      goto LABEL_613;
    case 0x24:
      sub_1C5040DBC(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), a3, a4);
      if ((*(_WORD *)(a2 + 18) & 1) != 0)
      {
        v73 = llvm::ValueEnumerator::getValueID(a1 + 24, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
        v74 = *(unsigned int *)(a4 + 8);
        if (v74 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v74 + 1, 4);
          LODWORD(v74) = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v74) = v73;
        ++*(_DWORD *)(a4 + 8);
      }
      v11 = 48;
      goto LABEL_581;
    case 0x25:
      sub_1C5040DBC(a1, *(_QWORD *)(a2 - 64), a3, a4);
      v28 = llvm::ValueEnumerator::getValueID(a1 + 24, *(_QWORD *)(a2 - 32));
      v29 = *(unsigned int *)(a4 + 8);
      if (v29 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v29 + 1, 4);
        LODWORD(v29) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v29) = v28;
      ++*(_DWORD *)(a4 + 8);
      v11 = 49;
      goto LABEL_581;
    case 0x26:
      v75 = *(_DWORD *)(a2 + 20);
      if ((v75 & 0x40000000) != 0)
        v76 = *(uint64_t **)(a2 - 8);
      else
        v76 = (uint64_t *)(a2 - 32 * (v75 & 0x7FFFFFF));
      sub_1C5040DBC(a1, *v76, a3, a4);
      if ((*(_WORD *)(a2 + 18) & 1) != 0)
        v269 = -2;
      else
        v269 = -1;
      v270 = v269 + (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      v271 = *(unsigned int *)(a4 + 8);
      if (v271 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v271 + 1, 4);
        LODWORD(v271) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v271) = v270;
      ++*(_DWORD *)(a4 + 8);
      v272 = *(_DWORD *)(a2 + 20);
      if ((v272 & 0x40000000) != 0)
      {
        v274 = *(_QWORD *)(a2 - 8);
        v273 = v272 & 0x7FFFFFF;
      }
      else
      {
        v273 = v272 & 0x7FFFFFF;
        v274 = a2 - 32 * v273;
      }
      v275 = *(_WORD *)(a2 + 18) & 1;
      v276 = 1;
      if ((*(_WORD *)(a2 + 18) & 1) != 0)
        v276 = 2;
      if (v276 != v273)
      {
        v277 = (uint64_t *)(v274 + 32 * v276);
        v278 = 32 * v273 - 32 * v276;
        do
        {
          v279 = llvm::ValueEnumerator::getValueID(a1 + 24, *v277);
          v280 = *(unsigned int *)(a4 + 8);
          if (v280 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v280 + 1, 4);
            v280 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v280) = v279;
          ++*(_DWORD *)(a4 + 8);
          v277 += 4;
          v278 -= 32;
        }
        while (v278);
        v275 = *(_WORD *)(a2 + 18) & 1;
      }
      if (v275)
      {
        v281 = *(_DWORD *)(a2 + 20);
        if ((v281 & 0x40000000) != 0)
          v282 = *(_QWORD *)(a2 - 8);
        else
          v282 = a2 - 32 * (v281 & 0x7FFFFFF);
        v364 = llvm::ValueEnumerator::getValueID(a1 + 24, *(_QWORD *)(v282 + 32));
        v365 = *(unsigned int *)(a4 + 8);
        if (v365 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v365 + 1, 4);
          LODWORD(v365) = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v365) = v364;
        ++*(_DWORD *)(a4 + 8);
      }
      v11 = 52;
      goto LABEL_581;
    case 0x27:
      v33 = a2 - 32;
      v32 = *(uint64_t **)(a2 - 32);
      v34 = *(_DWORD **)(a2 + 72);
      v35 = *(_DWORD *)(a2 + 20);
      if (v35 < 0 && (*(_QWORD *)(a2 - 32 * (v35 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0)
        sub_1C5040E30((llvm::raw_ostream **)a1, a2, a3);
      v463 = *(_QWORD *)(a2 + 64);
      if (v463)
      {
        v464 = 0;
        if (sub_1C5034C00((uint64_t *)(a1 + 344), &v463, &v464))
          v36 = v464;
        else
          v36 = (_DWORD *)(*(_QWORD *)(a1 + 344) + 16 * *(unsigned int *)(a1 + 360));
        v309 = v36[2];
      }
      else
      {
        v309 = 0;
      }
      v316 = *(unsigned int *)(a4 + 8);
      if (v316 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v316 + 1, 4);
        LODWORD(v316) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v316) = v309;
      v317 = *(_DWORD *)(a4 + 12);
      v318 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v318;
      v319 = (*(unsigned __int16 *)(a2 + 18) >> 1) & 0x7FE | 0x8000;
      if (v318 >= v317)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v318 + 1, 4);
        LODWORD(v318) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v318) = v319;
      ++*(_DWORD *)(a4 + 8);
      v320 = llvm::ValueEnumerator::getValueID(a1 + 24, *(_QWORD *)(v33 - 32 * *(unsigned int *)(a2 + 80) - 32));
      v321 = *(unsigned int *)(a4 + 8);
      if (v321 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v321 + 1, 4);
        LODWORD(v321) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v321) = v320;
      v322 = *(_DWORD *)(a4 + 12);
      v323 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v323;
      v324 = *(_DWORD *)(a2 + 80);
      if (v323 >= v322)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v323 + 1, 4);
        LODWORD(v323) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v323) = v324;
      ++*(_DWORD *)(a4 + 8);
      v325 = *(unsigned int *)(a2 + 80);
      if ((_DWORD)v325)
      {
        do
        {
          v326 = llvm::ValueEnumerator::getValueID(v10, *(_QWORD *)(v33 - 32 * *(unsigned int *)(a2 + 80)));
          v327 = *(unsigned int *)(a4 + 8);
          if (v327 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v327 + 1, 4);
            v327 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v327) = v326;
          ++*(_DWORD *)(a4 + 8);
          v33 += 32;
          --v325;
        }
        while (v325);
      }
      v463 = 0;
      v464 = v34;
      if (sub_1C4DD8A9C((uint64_t *)(v461 + 48), &v464, &v463))
        v328 = v463;
      else
        v328 = *(_QWORD *)(v461 + 48) + 16 * *(unsigned int *)(v461 + 64);
      v329 = *(_DWORD *)(v328 + 8) - 1;
      v330 = *(unsigned int *)(a4 + 8);
      if (v330 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v330 + 1, 4);
        LODWORD(v330) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v330) = v329;
      ++*(_DWORD *)(a4 + 8);
      sub_1C5040CAC(v461, v32, a3, a4);
      if (v34[3] != 1)
      {
        v331 = 0;
        v332 = 32 * (v34[3] - 1);
        do
        {
          v333 = *(_DWORD *)(a2 + 20);
          if ((v333 & 0x40000000) != 0)
            v334 = *(_QWORD *)(a2 - 8);
          else
            v334 = a2 - 32 * (v333 & 0x7FFFFFF);
          sub_1C5040DBC(v461, *(_QWORD *)(v334 + v331), a3, a4);
          v331 += 32;
        }
        while (v332 != v331);
      }
      if (v34[2] <= 0xFFu)
        goto LABEL_436;
      v335 = *(unsigned __int8 *)(a2 + 16);
      if (v335 == 84)
      {
        v336 = 0;
      }
      else if (v335 == 39)
      {
        v336 = (*(_DWORD *)(a2 + 80) + 1);
      }
      else
      {
        v336 = 2;
      }
      v337 = 0;
      v338 = v34[3] - 1;
      v339 = *(_DWORD *)(a2 + 20);
      v340 = -(uint64_t)(v339 & 0x7FFFFFF);
      if (v339 < 0)
      {
        v455 = a2 - 32 * (v339 & 0x7FFFFFF);
        v456 = *(_QWORD *)(v455 - 8);
        if ((v456 & 0xFFFFFFFF0) != 0)
          v337 = *(_DWORD *)(v455 - 12) - *(_DWORD *)(v455 - v456);
        else
          v337 = 0;
      }
      v341 = (-32 * v336 + 32 * (unint64_t)-v337 - 32 * v340 - 32) >> 5;
      if (v338 == (_DWORD)v341)
      {
LABEL_436:
        v11 = 57;
      }
      else
      {
        v11 = 57;
        do
        {
          v394 = *(_DWORD *)(a2 + 20);
          if ((v394 & 0x40000000) != 0)
            v395 = *(_QWORD *)(a2 - 8);
          else
            v395 = a2 - 32 * (v394 & 0x7FFFFFF);
          sub_1C5040CAC(v461, *(uint64_t **)(v395 + 32 * v338++), a3, a4);
        }
        while ((_DWORD)v341 != v338);
      }
      goto LABEL_581;
    case 0x28:
      v53 = *(_DWORD *)(a2 + 20);
      if ((v53 & 0x40000000) != 0)
        v54 = *(uint64_t ***)(a2 - 8);
      else
        v54 = (uint64_t **)(a2 - 32 * (v53 & 0x7FFFFFF));
      v215 = sub_1C5040CAC(a1, *v54, a3, a4);
      if (v215)
        v12 = 0;
      else
        v12 = 6;
      if (v215)
        v216 = 0;
      else
        v216 = 5;
      v217 = *(unsigned int *)(a4 + 8);
      if (v217 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v217 + 1, 4);
        LODWORD(v217) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v217) = 0;
      ++*(_DWORD *)(a4 + 8);
      v218 = sub_1C5036D1C(a2);
      if (!v218)
      {
        v11 = 56;
        v12 = v216;
        goto LABEL_565;
      }
      v219 = v218;
      v220 = *(unsigned int *)(a4 + 8);
      if (v220 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v220 + 1, 4);
        LODWORD(v220) = *(_DWORD *)(a4 + 8);
      }
      v11 = 56;
      goto LABEL_564;
    case 0x3B:
      v42 = *(void **)(a2 + 64);
      v463 = 0;
      v464 = v42;
      if (sub_1C4DD8A9C((uint64_t *)(a1 + 48), &v464, &v463))
        v43 = v463;
      else
        v43 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      v183 = *(_DWORD *)(v43 + 8) - 1;
      v184 = *(unsigned int *)(a4 + 8);
      if (v184 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v184 + 1, 4);
        LODWORD(v184) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v184) = v183;
      ++*(_DWORD *)(a4 + 8);
      v185 = *(_DWORD *)(a2 + 20);
      if ((v185 & 0x40000000) != 0)
        v186 = *(void ****)(a2 - 8);
      else
        v186 = (void ***)(a2 - 32 * (v185 & 0x7FFFFFF));
      v187 = **v186;
      v463 = 0;
      v464 = v187;
      if (sub_1C4DD8A9C((uint64_t *)(a1 + 48), &v464, &v463))
        v188 = v463;
      else
        v188 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      v189 = *(_DWORD *)(v188 + 8) - 1;
      v190 = *(unsigned int *)(a4 + 8);
      if (v190 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v190 + 1, 4);
        LODWORD(v190) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v190) = v189;
      ++*(_DWORD *)(a4 + 8);
      v191 = *(_DWORD *)(a2 + 20);
      if ((v191 & 0x40000000) != 0)
        v192 = *(uint64_t **)(a2 - 8);
      else
        v192 = (uint64_t *)(a2 - 32 * (v191 & 0x7FFFFFF));
      v193 = llvm::ValueEnumerator::getValueID(a1 + 24, *v192);
      v194 = *(unsigned int *)(a4 + 8);
      if (v194 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v194 + 1, 4);
        LODWORD(v194) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v194) = v193;
      v195 = *(_DWORD *)(a4 + 12);
      v196 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v196;
      v197 = *(unsigned __int16 *)(a2 + 18);
      v198 = __clz(1 << v197);
      v199 = v197 & 0x80 | (v197 >> 1) & 0x20 | (64 - v198) & 0x1F | ((((64 - v198) >> 5) & 3) << 8) | 0x40;
      if (v196 >= v195)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v196 + 1, 4);
        LODWORD(v196) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v196) = v199;
      v200 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v200;
      v201 = *(_DWORD *)(*(_QWORD *)a2 + 8) >> 8;
      if (v201 != *(_DWORD *)(*(_QWORD *)(a1 + 16) + 276))
      {
        if (v200 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v200 + 1, 4);
          LODWORD(v200) = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v200) = v201;
        ++*(_DWORD *)(a4 + 8);
      }
      v11 = 19;
      goto LABEL_581;
    case 0x3C:
      v26 = *(_DWORD *)(a2 + 20);
      if ((*(_WORD *)(a2 + 18) & 0x380) != 0)
      {
        if ((v26 & 0x40000000) != 0)
          v27 = *(uint64_t ***)(a2 - 8);
        else
          v27 = (uint64_t **)(a2 - 32 * (v26 & 0x7FFFFFF));
        v315 = a1;
        sub_1C5040CAC(a1, *v27, a3, a4);
        v12 = 0;
        v11 = 41;
      }
      else
      {
        if ((v26 & 0x40000000) != 0)
          v308 = *(uint64_t ***)(a2 - 8);
        else
          v308 = (uint64_t **)(a2 - 32 * (v26 & 0x7FFFFFF));
        v315 = a1;
        if (sub_1C5040CAC(a1, *v308, a3, a4))
          v12 = 0;
        else
          v12 = 4;
        v11 = 20;
      }
      v411 = *(void **)a2;
      v463 = 0;
      v464 = v411;
      if (sub_1C4DD8A9C((uint64_t *)(v315 + 48), &v464, &v463))
        v412 = v463;
      else
        v412 = *(_QWORD *)(v315 + 48) + 16 * *(unsigned int *)(v315 + 64);
      v413 = *(_DWORD *)(v412 + 8) - 1;
      v414 = *(unsigned int *)(a4 + 8);
      if (v414 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v414 + 1, 4);
        LODWORD(v414) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v414) = v413;
      v415 = *(_DWORD *)(a4 + 12);
      v416 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v416;
      v417 = 64 - __clz(1 << ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1));
      if (v416 >= v415)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v416 + 1, 4);
        LODWORD(v416) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v416) = v417;
      v418 = *(_DWORD *)(a4 + 12);
      v419 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v419;
      v420 = *(_WORD *)(a2 + 18) & 1;
      if (v419 >= v418)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v419 + 1, 4);
        LODWORD(v419) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v419) = v420;
      v421 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v421;
      v422 = *(unsigned __int8 *)(a2 + 16);
      if (v422 == 60 || v422 == 61)
      {
        if ((*(_WORD *)(a2 + 18) & 0x380) == 0)
          goto LABEL_565;
      }
      else if ((v422 - 63) >= 3)
      {
        goto LABEL_565;
      }
      v423 = dword_1C85FA470[((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 7) & 7];
      if (v421 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v421 + 1, 4);
        LODWORD(v421) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v421) = v423;
      v424 = *(_DWORD *)(a4 + 12);
      v220 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v220;
      v219 = *(unsigned __int8 *)(a2 + 60);
      if (v220 >= v424)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v220 + 1, 4);
        LODWORD(v220) = *(_DWORD *)(a4 + 8);
      }
      goto LABEL_564;
    case 0x3D:
      if ((*(_WORD *)(a2 + 18) & 0x380) != 0)
        v11 = 45;
      else
        v11 = 44;
      v65 = *(_DWORD *)(a2 + 20);
      if ((v65 & 0x40000000) != 0)
        v66 = *(_QWORD *)(a2 - 8);
      else
        v66 = a2 - 32 * (v65 & 0x7FFFFFF);
      sub_1C5040CAC(a1, *(uint64_t **)(v66 + 32), a3, a4);
      v249 = *(_DWORD *)(a2 + 20);
      if ((v249 & 0x40000000) != 0)
        v250 = *(uint64_t ***)(a2 - 8);
      else
        v250 = (uint64_t **)(a2 - 32 * (v249 & 0x7FFFFFF));
      sub_1C5040CAC(a1, *v250, a3, a4);
      v251 = 64 - __clz(1 << ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1));
      v252 = *(unsigned int *)(a4 + 8);
      if (v252 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v252 + 1, 4);
        LODWORD(v252) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v252) = v251;
      v253 = *(_DWORD *)(a4 + 12);
      v254 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v254;
      v255 = *(_WORD *)(a2 + 18) & 1;
      if (v254 >= v253)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v254 + 1, 4);
        LODWORD(v254) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v254) = v255;
      v256 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v256;
      v257 = *(unsigned __int8 *)(a2 + 16);
      if (v257 == 60 || v257 == 61)
      {
        if ((*(_WORD *)(a2 + 18) & 0x380) == 0)
          goto LABEL_581;
      }
      else if ((v257 - 63) >= 3)
      {
        goto LABEL_581;
      }
      v258 = dword_1C85FA470[((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 7) & 7];
      if (v256 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v256 + 1, 4);
        LODWORD(v256) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v256) = v258;
      v259 = *(_DWORD *)(a4 + 12);
      v260 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v260;
      v261 = *(unsigned __int8 *)(a2 + 60);
      if (v260 >= v259)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v260 + 1, 4);
        LODWORD(v260) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v260) = v261;
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_581;
    case 0x3E:
      v67 = (*(unsigned __int8 *)(a2 + 17) >> 1) & 1;
      v68 = *(unsigned int *)(a4 + 8);
      if (v68 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v68 + 1, 4);
        LODWORD(v68) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v68) = v67;
      ++*(_DWORD *)(a4 + 8);
      v69 = *(void **)(a2 + 64);
      v463 = 0;
      v464 = v69;
      if (sub_1C4DD8A9C((uint64_t *)(a1 + 48), &v464, &v463))
        v70 = v463;
      else
        v70 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      v262 = *(_DWORD *)(v70 + 8) - 1;
      v263 = *(unsigned int *)(a4 + 8);
      if (v263 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v263 + 1, 4);
        LODWORD(v263) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v263) = v262;
      ++*(_DWORD *)(a4 + 8);
      v264 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      if ((_DWORD)v264)
      {
        v265 = 0;
        v266 = 32 * v264;
        do
        {
          v267 = *(_DWORD *)(a2 + 20);
          if ((v267 & 0x40000000) != 0)
            v268 = *(_QWORD *)(a2 - 8);
          else
            v268 = a2 - 32 * (v267 & 0x7FFFFFF);
          sub_1C5040CAC(a1, *(uint64_t **)(v268 + v265), a3, a4);
          v265 += 32;
        }
        while (v266 != v265);
      }
      v11 = 43;
      v12 = 13;
LABEL_613:
      v425 = *(llvm::raw_ostream **)a1;
      goto LABEL_614;
    case 0x3F:
      v84 = dword_1C85FA470[*(_WORD *)(a2 + 18) & 7];
      v85 = *(unsigned int *)(a4 + 8);
      if (v85 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v85 + 1, 4);
        LODWORD(v85) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v85) = v84;
      v86 = *(_DWORD *)(a4 + 12);
      v87 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v87;
      v88 = *(unsigned __int8 *)(a2 + 60);
      if (v87 >= v86)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v87 + 1, 4);
        LODWORD(v87) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v87) = v88;
      ++*(_DWORD *)(a4 + 8);
      v11 = 36;
      goto LABEL_581;
    case 0x40:
      v82 = *(_DWORD *)(a2 + 20);
      if ((v82 & 0x40000000) != 0)
        v83 = *(uint64_t ***)(a2 - 8);
      else
        v83 = (uint64_t **)(a2 - 32 * (v82 & 0x7FFFFFF));
      sub_1C5040CAC(a1, *v83, a3, a4);
      v286 = *(_DWORD *)(a2 + 20);
      if ((v286 & 0x40000000) != 0)
        v287 = *(_QWORD *)(a2 - 8);
      else
        v287 = a2 - 32 * (v286 & 0x7FFFFFF);
      sub_1C5040CAC(a1, *(uint64_t **)(v287 + 32), a3, a4);
      v288 = *(_DWORD *)(a2 + 20);
      if ((v288 & 0x40000000) != 0)
        v289 = *(_QWORD *)(a2 - 8);
      else
        v289 = a2 - 32 * (v288 & 0x7FFFFFF);
      sub_1C5040DBC(a1, *(_QWORD *)(v289 + 64), a3, a4);
      v290 = *(_WORD *)(a2 + 18) & 1;
      v291 = *(unsigned int *)(a4 + 8);
      if (v291 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v291 + 1, 4);
        LODWORD(v291) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v291) = v290;
      v292 = *(_DWORD *)(a4 + 12);
      v293 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v293;
      v294 = *(_DWORD *)((char *)dword_1C85FA470 + (*(_WORD *)(a2 + 18) & 0x1C));
      if (v293 >= v292)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v293 + 1, 4);
        LODWORD(v293) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v293) = v294;
      v295 = *(_DWORD *)(a4 + 12);
      v296 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v296;
      v297 = *(unsigned __int8 *)(a2 + 60);
      if (v296 >= v295)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v296 + 1, 4);
        LODWORD(v296) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v296) = v297;
      v298 = *(_DWORD *)(a4 + 12);
      v299 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v299;
      v300 = dword_1C85FA470[*(_WORD *)(a2 + 18) >> 5];
      if (v299 >= v298)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v299 + 1, 4);
        LODWORD(v299) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v299) = v300;
      v301 = *(_DWORD *)(a4 + 12);
      v302 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v302;
      v303 = (*(unsigned __int16 *)(a2 + 18) >> 1) & 1;
      if (v302 >= v301)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v302 + 1, 4);
        LODWORD(v302) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v302) = v303;
      v304 = *(_DWORD *)(a4 + 12);
      v305 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v305;
      v306 = 64 - __clz(1 << *(_BYTE *)(a2 + 19));
      if (v305 >= v304)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v305 + 1, 4);
        LODWORD(v305) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v305) = v306;
      ++*(_DWORD *)(a4 + 8);
      v11 = 46;
      goto LABEL_581;
    case 0x41:
      v24 = *(_DWORD *)(a2 + 20);
      if ((v24 & 0x40000000) != 0)
        v25 = *(uint64_t ***)(a2 - 8);
      else
        v25 = (uint64_t **)(a2 - 32 * (v24 & 0x7FFFFFF));
      sub_1C5040CAC(a1, *v25, a3, a4);
      v128 = *(_DWORD *)(a2 + 20);
      if ((v128 & 0x40000000) != 0)
        v129 = *(_QWORD *)(a2 - 8);
      else
        v129 = a2 - 32 * (v128 & 0x7FFFFFF);
      sub_1C5040CAC(a1, *(uint64_t **)(v129 + 32), a3, a4);
      v130 = *(_WORD *)(a2 + 18) >> 4;
      v131 = *(unsigned int *)(a4 + 8);
      if (v131 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v131 + 1, 4);
        LODWORD(v131) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v131) = v130;
      v132 = *(_DWORD *)(a4 + 12);
      v133 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v133;
      v134 = *(_WORD *)(a2 + 18) & 1;
      if (v133 >= v132)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v133 + 1, 4);
        LODWORD(v133) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v133) = v134;
      v135 = *(_DWORD *)(a4 + 12);
      v136 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v136;
      v137 = dword_1C85FA470[((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 7];
      if (v136 >= v135)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v136 + 1, 4);
        LODWORD(v136) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v136) = v137;
      v138 = *(_DWORD *)(a4 + 12);
      v139 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v139;
      v140 = *(unsigned __int8 *)(a2 + 60);
      if (v139 >= v138)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v139 + 1, 4);
        LODWORD(v139) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v139) = v140;
      v141 = *(_DWORD *)(a4 + 12);
      v142 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v142;
      v143 = 64 - __clz(1 << *(_BYTE *)(a2 + 19));
      if (v142 >= v141)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v142 + 1, 4);
        LODWORD(v142) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v142) = v143;
      ++*(_DWORD *)(a4 + 8);
      v11 = 59;
      goto LABEL_581;
    case 0x4F:
    case 0x50:
      if (v9 == 80)
        v11 = 50;
      else
        v11 = 51;
      sub_1C5040DBC(a1, *(_QWORD *)(a2 - 32), a3, a4);
      v13 = (*(_DWORD *)(a2 + 20) & 0x7FFFFFFu) - 1;
      v14 = *(unsigned int *)(a4 + 8);
      if (v14 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v14 + 1, 4);
        LODWORD(v14) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v14) = v13;
      ++*(_DWORD *)(a4 + 8);
      if ((_DWORD)v13)
      {
        v15 = a2;
        do
        {
          sub_1C5040CAC(a1, *(uint64_t **)(v15 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), a3, a4);
          v15 += 32;
          --v13;
        }
        while (v13);
      }
      goto LABEL_581;
    case 0x51:
    case 0x52:
      v16 = *(_DWORD *)(a2 + 20);
      if ((v16 & 0x40000000) != 0)
        v17 = *(uint64_t ***)(a2 - 8);
      else
        v17 = (uint64_t **)(a2 - 32 * (v16 & 0x7FFFFFF));
      sub_1C5040CAC(a1, *v17, a3, a4);
      v89 = *(_DWORD *)(a2 + 20);
      if ((v89 & 0x40000000) != 0)
        v90 = *(_QWORD *)(a2 - 8);
      else
        v90 = a2 - 32 * (v89 & 0x7FFFFFF);
      sub_1C5040DBC(a1, *(_QWORD *)(v90 + 32), a3, a4);
      v91 = *(_WORD *)(a2 + 18) & 0x3F;
      v92 = *(unsigned int *)(a4 + 8);
      if (v92 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v92 + 1, 4);
        LODWORD(v92) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v92) = v91;
      ++*(_DWORD *)(a4 + 8);
      v93 = sub_1C5036D1C(a2);
      if (v93)
      {
        v94 = v93;
        v95 = *(unsigned int *)(a4 + 8);
        if (v95 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v95 + 1, 4);
          LODWORD(v95) = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v95) = v94;
        ++*(_DWORD *)(a4 + 8);
      }
      v11 = 28;
      goto LABEL_581;
    case 0x53:
      v465 = 0x8000000000;
      v463 = *(_QWORD *)a2;
      v464 = v466;
      v462 = 0;
      if (sub_1C4DD8A9C((uint64_t *)(a1 + 48), &v463, &v462))
        v41 = v462;
      else
        v41 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      v155 = (*(_DWORD *)(v41 + 8) - 1);
      v156 = v465;
      if (v465 >= HIDWORD(v465))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v464, (uint64_t)v466, v465 + 1, 8);
        v156 = v465;
      }
      *((_QWORD *)v464 + v156) = v155;
      LODWORD(v465) = v465 + 1;
      v157 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      if ((_DWORD)v157)
      {
        v158 = 0;
        v159 = 0;
        v160 = 32 * v157;
        do
        {
          v161 = *(_DWORD *)(a2 + 20);
          if ((v161 & 0x40000000) != 0)
            v162 = *(_QWORD *)(a2 - 8);
          else
            v162 = a2 - 32 * (v161 & 0x7FFFFFF);
          v163 = llvm::ValueEnumerator::getValueID(v10, *(_QWORD *)(v162 + v159));
          sub_1C5036C04(&v464, (int)(a3 - v163));
          v164 = *(_DWORD *)(a2 + 20);
          if ((v164 & 0x40000000) != 0)
            v165 = *(_QWORD *)(a2 - 8);
          else
            v165 = a2 - 32 * (v164 & 0x7FFFFFF);
          v166 = llvm::ValueEnumerator::getValueID(v10, *(_QWORD *)(v165 + 32 * *(unsigned int *)(a2 + 60) + v158));
          v167 = v465;
          if (v465 >= (unint64_t)HIDWORD(v465))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v464, (uint64_t)v466, v465 + 1, 8);
            v167 = v465;
          }
          *((_QWORD *)v464 + v167) = v166;
          LODWORD(v465) = v465 + 1;
          v159 += 32;
          v158 += 8;
        }
        while (v160 != v159);
      }
      v168 = sub_1C5036D1C(a2);
      v169 = v465;
      if (v168)
      {
        v170 = v168;
        if (v465 >= HIDWORD(v465))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v464, (uint64_t)v466, v465 + 1, 8);
          v169 = v465;
        }
        *((_QWORD *)v464 + v169) = v170;
        v169 = v465 + 1;
        LODWORD(v465) = v465 + 1;
      }
      v171 = *(llvm::raw_ostream **)v461;
      v172 = *(_DWORD *)(*(_QWORD *)v461 + 32);
      v173 = *(_DWORD *)(*(_QWORD *)v461 + 24);
      v174 = *(_DWORD *)(*(_QWORD *)v461 + 28) | (3 << v173);
      *(_DWORD *)(*(_QWORD *)v461 + 28) = v174;
      v175 = v173 + v172;
      if (v175 >= 0x20)
      {
        sub_1C503027C((uint64_t *)v171, v174);
        v426 = *((_DWORD *)v171 + 6);
        if (v426)
          v174 = 3u >> -(char)v426;
        else
          v174 = 0;
        v175 = ((_BYTE)v426 + (_BYTE)v172) & 0x1F;
      }
      v176 = (16 << v175) | v174;
      *((_DWORD *)v171 + 6) = v175;
      *((_DWORD *)v171 + 7) = v176;
      if (v175 >= 0x1A)
      {
        sub_1C503027C((uint64_t *)v171, v176);
        v427 = *((_DWORD *)v171 + 6);
        if (v427)
          v176 = 0x10u >> -(char)v427;
        else
          v176 = 0;
        v177 = ((_BYTE)v427 + 6) & 0x1F;
      }
      else
      {
        v177 = v175 + 6;
      }
      *((_DWORD *)v171 + 6) = v177;
      if (v169 >= 0x20)
      {
        v452 = v169;
        do
        {
          v453 = v452 & 0x1F | 0x20;
          v176 |= v453 << v177;
          *((_DWORD *)v171 + 7) = v176;
          v177 += 6;
          if (v177 >= 0x20)
          {
            sub_1C503027C((uint64_t *)v171, v176);
            v454 = *((_DWORD *)v171 + 6);
            if (v454)
              v176 = v453 >> -(char)v454;
            else
              v176 = 0;
            *((_DWORD *)v171 + 7) = v176;
            v177 = ((_BYTE)v454 + 6) & 0x1F;
          }
          *((_DWORD *)v171 + 6) = v177;
          v178 = v452 >> 5;
          v450 = v452 > 0x3FF;
          v452 >>= 5;
        }
        while (v450);
      }
      else
      {
        v178 = v169;
      }
      v179 = (v178 << v177) | v176;
      *((_DWORD *)v171 + 7) = v179;
      if (v177 >= 0x1A)
      {
        sub_1C503027C((uint64_t *)v171, v179);
        v428 = *((_DWORD *)v171 + 6);
        v429 = v178 >> -(char)v428;
        if (!v428)
          v429 = 0;
        *((_DWORD *)v171 + 7) = v429;
        v180 = ((_BYTE)v428 + 6) & 0x1F;
      }
      else
      {
        v180 = v177 + 6;
      }
      *((_DWORD *)v171 + 6) = v180;
      if (v169)
      {
        v181 = 0;
        v182 = 8 * v169;
        do
        {
          sub_1C5030AF8(v171, *(_QWORD *)((char *)v464 + v181), 6);
          v181 += 8;
        }
        while (v182 != v181);
      }
      LODWORD(v465) = 0;
      if (v464 != v466)
        free(v464);
      return;
    case 0x54:
      v77 = *(_QWORD *)(a2 + 72);
      v78 = *(_DWORD *)(a2 + 20);
      if (v78 < 0 && (*(_QWORD *)(a2 - 32 * (v78 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0)
        sub_1C5040E30((llvm::raw_ostream **)v461, a2, a3);
      v463 = *(_QWORD *)(a2 + 64);
      if (v463)
      {
        v464 = 0;
        if (sub_1C5034C00((uint64_t *)(v461 + 344), &v463, &v464))
          v79 = v464;
        else
          v79 = (_DWORD *)(*(_QWORD *)(v461 + 344) + 16 * *(unsigned int *)(v461 + 360));
        v311 = v79[2];
      }
      else
      {
        v311 = 0;
      }
      v366 = *(unsigned int *)(a4 + 8);
      if (v366 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v366 + 1, 4);
        LODWORD(v366) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v366) = v311;
      ++*(_DWORD *)(a4 + 8);
      v367 = sub_1C5036D1C(a2);
      v368 = *(unsigned __int16 *)(a2 + 18);
      v369 = (v368 >> 1) & 0x7FE;
      v370 = v368 & 3;
      v371 = v370 == 3;
      v372 = v370 == 2;
      v373 = v369 | ((v370 - 1) < 2);
      if (v367)
        v374 = 163840;
      else
        v374 = 0x8000;
      v375 = v374 | (v372 << 14) | (v371 << 16) | v373;
      v376 = *(unsigned int *)(a4 + 8);
      if (v376 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v376 + 1, 4);
        LODWORD(v376) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v376) = v375;
      v377 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v377;
      if (v367)
      {
        if (v377 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v377 + 1, 4);
          LODWORD(v377) = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v377) = v367;
        ++*(_DWORD *)(a4 + 8);
      }
      v463 = 0;
      v464 = (void *)v77;
      if (sub_1C4DD8A9C((uint64_t *)(v461 + 48), &v464, &v463))
        v378 = v463;
      else
        v378 = *(_QWORD *)(v461 + 48) + 16 * *(unsigned int *)(v461 + 64);
      v379 = *(_DWORD *)(v378 + 8) - 1;
      v380 = *(unsigned int *)(a4 + 8);
      if (v380 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v380 + 1, 4);
        LODWORD(v380) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v380) = v379;
      ++*(_DWORD *)(a4 + 8);
      sub_1C5040CAC(v461, *(uint64_t **)(a2 - 32), a3, a4);
      if (*(_DWORD *)(v77 + 12) != 1)
      {
        v381 = 0;
        v382 = 8 * (*(_DWORD *)(v77 + 12) - 1);
        v383 = a2;
        do
        {
          v384 = *(_QWORD *)(v383 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v77 + 16) + v381 + 8) + 8) == 8)
          {
            v385 = llvm::ValueEnumerator::getValueID(v10, v384);
            v386 = *(unsigned int *)(a4 + 8);
            if (v386 >= *(unsigned int *)(a4 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v386 + 1, 4);
              v386 = *(unsigned int *)(a4 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a4 + 4 * v386) = v385;
            ++*(_DWORD *)(a4 + 8);
          }
          else
          {
            sub_1C5040DBC(v461, v384, a3, a4);
          }
          v383 += 32;
          v381 += 8;
        }
        while (v382 != v381);
      }
      if (*(_DWORD *)(v77 + 8) <= 0xFFu)
        goto LABEL_500;
      v387 = *(unsigned __int8 *)(a2 + 16);
      if (v387 == 84)
      {
        v388 = 0;
      }
      else if (v387 == 39)
      {
        v388 = (*(_DWORD *)(a2 + 80) + 1);
      }
      else
      {
        v388 = 2;
      }
      v389 = 0;
      v390 = *(_DWORD *)(v77 + 12) - 1;
      v391 = *(_DWORD *)(a2 + 20);
      v392 = -(uint64_t)(v391 & 0x7FFFFFF);
      if (v391 < 0)
      {
        v459 = a2 - 32 * (v391 & 0x7FFFFFF);
        v460 = *(_QWORD *)(v459 - 8);
        if ((v460 & 0xFFFFFFFF0) != 0)
          v389 = *(_DWORD *)(v459 - 12) - *(_DWORD *)(v459 - v460);
        else
          v389 = 0;
      }
      v393 = (-32 * v388 + 32 * (unint64_t)-v389 - 32 * v392 - 32) >> 5;
      if (v390 == (_DWORD)v393)
      {
LABEL_500:
        v11 = 34;
      }
      else
      {
        v11 = 34;
        do
          sub_1C5040CAC(v461, *(uint64_t **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v390++), a3, a4);
        while ((_DWORD)v393 != v390);
      }
      goto LABEL_581;
    case 0x55:
      v37 = *(_DWORD *)(a2 + 20);
      if ((v37 & 0x40000000) != 0)
        v38 = *(_QWORD *)(a2 - 8);
      else
        v38 = a2 - 32 * (v37 & 0x7FFFFFF);
      sub_1C5040CAC(a1, *(uint64_t **)(v38 + 32), a3, a4);
      v144 = *(_DWORD *)(a2 + 20);
      if ((v144 & 0x40000000) != 0)
        v145 = *(_QWORD *)(a2 - 8);
      else
        v145 = a2 - 32 * (v144 & 0x7FFFFFF);
      sub_1C5040DBC(a1, *(_QWORD *)(v145 + 64), a3, a4);
      v146 = *(_DWORD *)(a2 + 20);
      if ((v146 & 0x40000000) != 0)
        v147 = *(uint64_t ***)(a2 - 8);
      else
        v147 = (uint64_t **)(a2 - 32 * (v146 & 0x7FFFFFF));
      sub_1C5040CAC(a1, *v147, a3, a4);
      v148 = sub_1C5036D1C(a2);
      if (v148)
      {
        v149 = v148;
        v150 = *(unsigned int *)(a4 + 8);
        if (v150 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v150 + 1, 4);
          LODWORD(v150) = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v150) = v149;
        ++*(_DWORD *)(a4 + 8);
      }
      v11 = 29;
      goto LABEL_581;
    case 0x58:
      v22 = *(_DWORD *)(a2 + 20);
      if ((v22 & 0x40000000) != 0)
        v23 = *(void ****)(a2 - 8);
      else
        v23 = (void ***)(a2 - 32 * (v22 & 0x7FFFFFF));
      v118 = **v23;
      v463 = 0;
      v464 = v118;
      if (sub_1C4DD8A9C((uint64_t *)(a1 + 48), &v464, &v463))
        v119 = v463;
      else
        v119 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      v120 = *(_DWORD *)(v119 + 8) - 1;
      v121 = *(unsigned int *)(a4 + 8);
      if (v121 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v121 + 1, 4);
        LODWORD(v121) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v121) = v120;
      ++*(_DWORD *)(a4 + 8);
      v122 = *(_DWORD *)(a2 + 20);
      if ((v122 & 0x40000000) != 0)
        v123 = *(uint64_t **)(a2 - 8);
      else
        v123 = (uint64_t *)(a2 - 32 * (v122 & 0x7FFFFFF));
      sub_1C5040DBC(a1, *v123, a3, a4);
      v124 = *(void **)a2;
      v463 = 0;
      v464 = v124;
      if (sub_1C4DD8A9C((uint64_t *)(a1 + 48), &v464, &v463))
        v125 = v463;
      else
        v125 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      v126 = *(_DWORD *)(v125 + 8) - 1;
      v127 = *(unsigned int *)(a4 + 8);
      if (v127 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v127 + 1, 4);
        LODWORD(v127) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v127) = v126;
      ++*(_DWORD *)(a4 + 8);
      v11 = 23;
      goto LABEL_581;
    case 0x59:
      v20 = *(_DWORD *)(a2 + 20);
      if ((v20 & 0x40000000) != 0)
        v21 = *(uint64_t ***)(a2 - 8);
      else
        v21 = (uint64_t **)(a2 - 32 * (v20 & 0x7FFFFFF));
      sub_1C5040CAC(a1, *v21, a3, a4);
      v116 = *(_DWORD *)(a2 + 20);
      if ((v116 & 0x40000000) != 0)
        v117 = *(_QWORD *)(a2 - 8);
      else
        v117 = a2 - 32 * (v116 & 0x7FFFFFF);
      sub_1C5040CAC(a1, *(uint64_t **)(v117 + 32), a3, a4);
      v11 = 6;
      goto LABEL_581;
    case 0x5A:
      v39 = *(_DWORD *)(a2 + 20);
      if ((v39 & 0x40000000) != 0)
        v40 = *(uint64_t ***)(a2 - 8);
      else
        v40 = (uint64_t **)(a2 - 32 * (v39 & 0x7FFFFFF));
      sub_1C5040CAC(a1, *v40, a3, a4);
      v151 = *(_DWORD *)(a2 + 20);
      if ((v151 & 0x40000000) != 0)
        v152 = *(_QWORD *)(a2 - 8);
      else
        v152 = a2 - 32 * (v151 & 0x7FFFFFF);
      sub_1C5040DBC(a1, *(_QWORD *)(v152 + 32), a3, a4);
      v153 = *(_DWORD *)(a2 + 20);
      if ((v153 & 0x40000000) != 0)
        v154 = *(_QWORD *)(a2 - 8);
      else
        v154 = a2 - 32 * (v153 & 0x7FFFFFF);
      sub_1C5040CAC(a1, *(uint64_t **)(v154 + 64), a3, a4);
      v11 = 7;
      goto LABEL_581;
    case 0x5B:
      v55 = *(_DWORD *)(a2 + 20);
      if ((v55 & 0x40000000) != 0)
        v56 = *(uint64_t ***)(a2 - 8);
      else
        v56 = (uint64_t **)(a2 - 32 * (v55 & 0x7FFFFFF));
      sub_1C5040CAC(a1, *v56, a3, a4);
      v221 = *(_DWORD *)(a2 + 20);
      if ((v221 & 0x40000000) != 0)
        v222 = *(_QWORD *)(a2 - 8);
      else
        v222 = a2 - 32 * (v221 & 0x7FFFFFF);
      sub_1C5040DBC(a1, *(_QWORD *)(v222 + 32), a3, a4);
      sub_1C5040DBC(a1, *(_QWORD *)(a2 + 96), a3, a4);
      v11 = 8;
      goto LABEL_581;
    case 0x5C:
      v80 = *(_DWORD *)(a2 + 20);
      if ((v80 & 0x40000000) != 0)
        v81 = *(uint64_t ***)(a2 - 8);
      else
        v81 = (uint64_t **)(a2 - 32 * (v80 & 0x7FFFFFF));
      sub_1C5040CAC(a1, *v81, a3, a4);
      v283 = *(const void **)(a2 + 64);
      v284 = *(unsigned int *)(a2 + 72);
      v285 = *(unsigned int *)(a4 + 8);
      if (v285 + v284 <= (unint64_t)*(unsigned int *)(a4 + 12))
      {
        if (!(_DWORD)v284)
          goto LABEL_366;
        goto LABEL_365;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v285 + v284, 4);
      LODWORD(v285) = *(_DWORD *)(a4 + 8);
      if ((_DWORD)v284)
      {
LABEL_365:
        memcpy((void *)(*(_QWORD *)a4 + 4 * v285), v283, 4 * v284);
        LODWORD(v285) = *(_DWORD *)(a4 + 8);
      }
LABEL_366:
      *(_DWORD *)(a4 + 8) = v285 + v284;
      v11 = 26;
      goto LABEL_581;
    case 0x5D:
      v57 = *(_DWORD *)(a2 + 20);
      if ((v57 & 0x40000000) != 0)
        v58 = *(uint64_t ***)(a2 - 8);
      else
        v58 = (uint64_t **)(a2 - 32 * (v57 & 0x7FFFFFF));
      sub_1C5040CAC(a1, *v58, a3, a4);
      v223 = *(_DWORD *)(a2 + 20);
      if ((v223 & 0x40000000) != 0)
        v224 = *(_QWORD *)(a2 - 8);
      else
        v224 = a2 - 32 * (v223 & 0x7FFFFFF);
      sub_1C5040CAC(a1, *(uint64_t **)(v224 + 32), a3, a4);
      v225 = *(const void **)(a2 + 64);
      v226 = *(unsigned int *)(a2 + 72);
      v227 = *(unsigned int *)(a4 + 8);
      if (v227 + v226 <= (unint64_t)*(unsigned int *)(a4 + 12))
      {
        if (!(_DWORD)v226)
          goto LABEL_284;
        goto LABEL_283;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v227 + v226, 4);
      LODWORD(v227) = *(_DWORD *)(a4 + 8);
      if ((_DWORD)v226)
      {
LABEL_283:
        memcpy((void *)(*(_QWORD *)a4 + 4 * v227), v225, 4 * v226);
        LODWORD(v227) = *(_DWORD *)(a4 + 8);
      }
LABEL_284:
      *(_DWORD *)(a4 + 8) = v227 + v226;
      v11 = 27;
LABEL_581:
      v425 = *(llvm::raw_ostream **)v461;
      goto LABEL_582;
    case 0x5E:
      v18 = *(void **)a2;
      v463 = 0;
      v464 = v18;
      if (sub_1C4DD8A9C((uint64_t *)(a1 + 48), &v464, &v463))
        v19 = v463;
      else
        v19 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
      v99 = *(_DWORD *)(v19 + 8) - 1;
      v100 = *(unsigned int *)(a4 + 8);
      if (v100 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v100 + 1, 4);
        LODWORD(v100) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v100) = v99;
      v101 = *(_DWORD *)(a4 + 12);
      v102 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v102;
      v103 = *(_WORD *)(a2 + 18) & 1;
      if (v102 >= v101)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v102 + 1, 4);
        LODWORD(v102) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v102) = v103;
      v104 = *(_DWORD *)(a4 + 12);
      v105 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v105;
      v106 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      if (v105 >= v104)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v105 + 1, 4);
        LODWORD(v105) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v105) = v106;
      ++*(_DWORD *)(a4 + 8);
      v107 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      if ((_DWORD)v107)
      {
        v108 = 0;
        v109 = 32 * v107;
        v11 = 47;
        do
        {
          v110 = *(_DWORD *)(a2 + 20);
          if ((v110 & 0x40000000) != 0)
            v111 = *(_QWORD *)(a2 - 8);
          else
            v111 = a2 - 32 * (v110 & 0x7FFFFFF);
          v112 = *(unsigned __int8 *)(**(_QWORD **)(v111 + v108) + 8) == 17;
          v113 = *(unsigned int *)(a4 + 8);
          if (v113 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v113 + 1, 4);
            v113 = *(unsigned int *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v113) = v112;
          ++*(_DWORD *)(a4 + 8);
          v114 = *(_DWORD *)(a2 + 20);
          if ((v114 & 0x40000000) != 0)
            v115 = *(_QWORD *)(a2 - 8);
          else
            v115 = a2 - 32 * (v114 & 0x7FFFFFF);
          sub_1C5040CAC(v461, *(uint64_t **)(v115 + v108), a3, a4);
          v108 += 32;
        }
        while (v109 != v108);
      }
      else
      {
        v11 = 47;
      }
      goto LABEL_581;
    case 0x5F:
      v30 = *(_DWORD *)(a2 + 20);
      if ((v30 & 0x40000000) != 0)
        v31 = *(uint64_t ***)(a2 - 8);
      else
        v31 = (uint64_t **)(a2 - 32 * (v30 & 0x7FFFFFF));
      sub_1C5040CAC(a1, *v31, a3, a4);
      v11 = 58;
      goto LABEL_581;
    default:
      v96 = v9 - 66;
      v97 = *(_DWORD *)(a2 + 20);
      if (v96 <= 0xC)
      {
        if ((v97 & 0x40000000) != 0)
          v98 = *(uint64_t ***)(a2 - 8);
        else
          v98 = (uint64_t **)(a2 - 32 * (v97 & 0x7FFFFFF));
        v398 = sub_1C5040CAC(a1, *v98, a3, a4);
        v399 = *(void **)a2;
        if (v398)
          v12 = 0;
        else
          v12 = 9;
        v463 = 0;
        v464 = v399;
        if (sub_1C4DD8A9C((uint64_t *)(a1 + 48), &v464, &v463))
          v400 = v463;
        else
          v400 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
        v401 = *(_DWORD *)(v400 + 8) - 1;
        v402 = *(unsigned int *)(a4 + 8);
        if (v402 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v402 + 1, 4);
          LODWORD(v402) = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v402) = v401;
        v403 = *(_DWORD *)(a4 + 12);
        v220 = (*(_DWORD *)(a4 + 8) + 1);
        *(_DWORD *)(a4 + 8) = v220;
        v219 = (*(_BYTE *)(a2 + 16) - 66);
        if (v220 >= v403)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v220 + 1, 4);
          LODWORD(v220) = *(_DWORD *)(a4 + 8);
        }
        v11 = 3;
LABEL_564:
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v220) = v219;
        ++*(_DWORD *)(a4 + 8);
        goto LABEL_565;
      }
      if ((v97 & 0x40000000) != 0)
        v307 = *(uint64_t ***)(a2 - 8);
      else
        v307 = (uint64_t **)(a2 - 32 * (v97 & 0x7FFFFFF));
      v404 = sub_1C5040CAC(a1, *v307, a3, a4);
      if (v404)
        v12 = 0;
      else
        v12 = 8;
      if (v404)
        v405 = 0;
      else
        v405 = 7;
      v406 = *(_DWORD *)(a2 + 20);
      if ((v406 & 0x40000000) != 0)
        v407 = *(_QWORD *)(a2 - 8);
      else
        v407 = a2 - 32 * (v406 & 0x7FFFFFF);
      sub_1C5040DBC(a1, *(_QWORD *)(v407 + 32), a3, a4);
      v408 = sub_1C5036D08(*(unsigned __int8 *)(a2 + 16) - 28);
      v409 = *(unsigned int *)(a4 + 8);
      if (v409 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v409 + 1, 4);
        LODWORD(v409) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v409) = v408;
      ++*(_DWORD *)(a4 + 8);
      v410 = sub_1C5036D1C(a2);
      if (v410)
      {
        v219 = v410;
        v220 = *(unsigned int *)(a4 + 8);
        if (v220 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v220 + 1, 4);
          LODWORD(v220) = *(_DWORD *)(a4 + 8);
        }
        v11 = 2;
        goto LABEL_564;
      }
      v11 = 2;
      v12 = v405;
LABEL_565:
      v425 = *(llvm::raw_ostream **)a1;
      if (v12)
      {
LABEL_614:
        sub_1C5033490(v425, v12, *(_QWORD *)a4, *(unsigned int *)(a4 + 8), 0, 0, v11 | 0x100000000);
      }
      else
      {
LABEL_582:
        v430 = *(unsigned int *)(a4 + 8);
        v431 = *((_DWORD *)v425 + 8);
        v432 = *((_DWORD *)v425 + 6);
        v433 = *((_DWORD *)v425 + 7) | (3 << v432);
        *((_DWORD *)v425 + 7) = v433;
        v434 = v432 + v431;
        if (v434 >= 0x20)
        {
          sub_1C503027C((uint64_t *)v425, v433);
          v443 = *((_DWORD *)v425 + 6);
          if (v443)
            v433 = 3u >> -(char)v443;
          else
            v433 = 0;
          v434 = ((_BYTE)v443 + (_BYTE)v431) & 0x1F;
        }
        *((_DWORD *)v425 + 6) = v434;
        if (v11 >= 0x20)
        {
          v442 = v11 & 0x1F | 0x20;
          v433 |= v442 << v434;
          *((_DWORD *)v425 + 7) = v433;
          if (v434 >= 0x1A)
          {
            sub_1C503027C((uint64_t *)v425, v433);
            v447 = *((_DWORD *)v425 + 6);
            if (v447)
              v433 = v442 >> -(char)v447;
            else
              v433 = 0;
            v434 = ((_BYTE)v447 + 6) & 0x1F;
          }
          else
          {
            v434 += 6;
          }
          *((_DWORD *)v425 + 6) = v434;
          v11 >>= 5;
        }
        v435 = (v11 << v434) | v433;
        *((_DWORD *)v425 + 7) = v435;
        if (v434 >= 0x1A)
        {
          sub_1C503027C((uint64_t *)v425, v435);
          v444 = *((_DWORD *)v425 + 6);
          if (v444)
            v435 = v11 >> -(char)v444;
          else
            v435 = 0;
          v436 = ((_BYTE)v444 + 6) & 0x1F;
        }
        else
        {
          v436 = v434 + 6;
        }
        *((_DWORD *)v425 + 6) = v436;
        if (v430 >= 0x20)
        {
          v448 = v430;
          do
          {
            v449 = v448 & 0x1F | 0x20;
            v435 |= v449 << v436;
            *((_DWORD *)v425 + 7) = v435;
            v436 += 6;
            if (v436 >= 0x20)
            {
              sub_1C503027C((uint64_t *)v425, v435);
              v451 = *((_DWORD *)v425 + 6);
              if (v451)
                v435 = v449 >> -(char)v451;
              else
                v435 = 0;
              *((_DWORD *)v425 + 7) = v435;
              v436 = ((_BYTE)v451 + 6) & 0x1F;
            }
            *((_DWORD *)v425 + 6) = v436;
            v437 = v448 >> 5;
            v450 = v448 > 0x3FF;
            v448 >>= 5;
          }
          while (v450);
        }
        else
        {
          v437 = v430;
        }
        v438 = (v437 << v436) | v435;
        *((_DWORD *)v425 + 7) = v438;
        if (v436 >= 0x1A)
        {
          sub_1C503027C((uint64_t *)v425, v438);
          v445 = *((_DWORD *)v425 + 6);
          v446 = v437 >> -(char)v445;
          if (!v445)
            v446 = 0;
          *((_DWORD *)v425 + 7) = v446;
          v439 = ((_BYTE)v445 + 6) & 0x1F;
        }
        else
        {
          v439 = v436 + 6;
        }
        *((_DWORD *)v425 + 6) = v439;
        if ((_DWORD)v430)
        {
          v440 = 0;
          v441 = 4 * v430;
          do
          {
            sub_1C5030AF8(v425, *(unsigned int *)(*(_QWORD *)a4 + v440), 6);
            v440 += 4;
          }
          while (v441 != v440);
        }
      }
      *(_DWORD *)(a4 + 8) = 0;
      return;
  }
}

BOOL sub_1C5040CAC(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  unsigned int ValueID;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  ValueID = llvm::ValueEnumerator::getValueID(a1 + 24, (uint64_t)a2);
  v9 = *(unsigned int *)(a4 + 8);
  if (v9 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v9 + 1, 4);
    LODWORD(v9) = *(_DWORD *)(a4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a4 + 4 * v9) = a3 - ValueID;
  ++*(_DWORD *)(a4 + 8);
  if (a3 <= ValueID)
  {
    v10 = *a2;
    v15 = 0;
    v16 = v10;
    if (sub_1C4DD8A9C((uint64_t *)(a1 + 48), &v16, &v15))
      v11 = v15;
    else
      v11 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
    v12 = *(_DWORD *)(v11 + 8) - 1;
    v13 = *(unsigned int *)(a4 + 8);
    if (v13 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v13 + 1, 4);
      LODWORD(v13) = *(_DWORD *)(a4 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a4 + 4 * v13) = v12;
    ++*(_DWORD *)(a4 + 8);
  }
  return a3 <= ValueID;
}

uint64_t sub_1C5040DBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  int v7;
  uint64_t v8;

  result = llvm::ValueEnumerator::getValueID(a1 + 24, a2);
  v7 = result;
  v8 = *(unsigned int *)(a4 + 8);
  if (v8 >= *(_DWORD *)(a4 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v8 + 1, 4);
    LODWORD(v8) = *(_DWORD *)(a4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a4 + 4 * v8) = a3 - v7;
  ++*(_DWORD *)(a4 + 8);
  return result;
}

void sub_1C5040E30(llvm::raw_ostream **a1, uint64_t a2, unsigned int a3)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  int OperandBundleTagID;
  uint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t *v16;
  void *v20;
  uint64_t v21;
  _QWORD v22[33];

  v22[32] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x4000000000;
  v3 = *(_DWORD *)(a2 + 20);
  if (v3 < 0)
  {
    v4 = *(_QWORD *)(a2 - 32 * (v3 & 0x7FFFFFF) - 8);
    if ((v4 & 0xFFFFFFFF0) != 0)
    {
      v5 = 0;
      v6 = **(uint64_t ***)a2;
      v7 = (v4 >> 4);
      do
      {
        v8 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        v9 = (unsigned int *)(v8 - 8 - *(_QWORD *)(v8 - 8) + 16 * v5);
        v10 = *(unsigned int *)(v8 - *(_QWORD *)(v8 - 8) + 16 * v5);
        v11 = v9[3];
        OperandBundleTagID = llvm::LLVMContextImpl::getOperandBundleTagID(*v6, (unsigned __int8 *)(*(_QWORD *)v9 + 16), **(_QWORD **)v9);
        v13 = v21;
        if (v21 >= (unint64_t)HIDWORD(v21))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, (uint64_t)v22, v21 + 1, 4);
          v13 = v21;
        }
        *((_DWORD *)v20 + v13) = OperandBundleTagID;
        LODWORD(v21) = v21 + 1;
        if ((_DWORD)v10 != (_DWORD)v11)
        {
          v14 = (uint64_t **)(v8 + 32 * v10);
          v15 = 32 * v11 - 32 * v10;
          do
          {
            v16 = *v14;
            v14 += 4;
            sub_1C5040CAC((uint64_t)a1, v16, a3, (uint64_t)&v20);
            v15 -= 32;
          }
          while (v15);
        }
        sub_1C5033274(*a1, 0x37u, (uint64_t)&v20, 0);
        LODWORD(v21) = 0;
        ++v5;
      }
      while (v5 != v7);
      if (v20 != v22)
        free(v20);
    }
  }
}

unsigned int *sub_1C5040FCC(unsigned int *result, uint64_t a2, char *a3, char *a4)
{
  char *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a3;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 8 * v8 == a2)
    return sub_1C6177054(result, a3, a4);
  v9 = (a2 - v7) >> 3;
  v10 = a4 - a3;
  v11 = (a4 - a3) >> 3;
  if (v8 + v11 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8 + v11, 8);
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v12 = (char *)(v7 + 8 * v9);
  v13 = (char *)(v7 + 8 * v8);
  v14 = (v13 - v12) >> 3;
  if (v14 >= v11)
  {
    result = sub_1C6177054(v6, &v13[-8 * v11], (char *)(v7 + 8 * v8));
    if (&v13[-8 * v11] != v12)
      result = (unsigned int *)memmove(&v12[8 * v11], v12, &v13[-8 * v11] - v12);
    if (a4 != v5)
      return (unsigned int *)memmove(v12, v5, a4 - v5);
  }
  else
  {
    v15 = v8 + (v10 >> 3);
    v6[2] = v15;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - v12);
      do
      {
        v16 = *(_QWORD *)v5;
        v5 += 8;
        *(_QWORD *)v12 = v16;
        v12 += 8;
        --v14;
      }
      while (v14);
    }
    while (v5 != a4)
    {
      v17 = *(_QWORD *)v5;
      v5 += 8;
      *(_QWORD *)v13 = v17;
      v13 += 8;
    }
  }
  return result;
}

uint64_t sub_1C504113C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v10;

  v2 = *(void **)(a1 + 424);
  if (v2)
  {
    *(_QWORD *)(a1 + 432) = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 392), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 368), 8);
  v3 = *(void **)(a1 + 344);
  if (v3)
  {
    *(_QWORD *)(a1 + 352) = v3;
    operator delete(v3);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 320), 8);
  v4 = *(void **)(a1 + 296);
  if (v4)
  {
    *(_QWORD *)(a1 + 304) = v4;
    operator delete(v4);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 272), 8);
  if ((*(_BYTE *)(a1 + 240) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 248), 4);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 216), 8);
  v5 = *(void **)(a1 + 192);
  if (v5)
  {
    *(_QWORD *)(a1 + 200) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 168);
  if (v6)
  {
    *(_QWORD *)(a1 + 176) = v6;
    operator delete(v6);
  }
  sub_1C5041250(a1 + 120);
  v7 = *(void **)(a1 + 96);
  if (v7)
  {
    *(_QWORD *)(a1 + 104) = v7;
    operator delete(v7);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 72), 8);
  v8 = *(void **)(a1 + 48);
  if (v8)
  {
    *(_QWORD *)(a1 + 56) = v8;
    operator delete(v8);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
  v10 = (void **)a1;
  sub_1C4EEBCC8(&v10);
  return a1;
}

uint64_t sub_1C5041250(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  sub_1C4ABB360(*(_QWORD **)(a1 + 8));
  return a1;
}

llvm::raw_ostream *sub_1C504128C(uint64_t a1, uint64_t *a2)
{
  llvm::raw_ostream **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unsigned int **v8;
  _BOOL4 v9;
  unsigned __int8 *v10;
  int v11;
  _BOOL4 v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  llvm::raw_ostream *result;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  v4 = *(llvm::raw_ostream ***)(a1 + 32);
  v6 = (char *)(a2 + 5);
  v5 = *a2;
  v7 = (char *)a2 + *a2 + 40;
  if (*a2)
  {
    LOBYTE(v9) = 1;
    v10 = (unsigned __int8 *)(a2 + 5);
    do
    {
      v11 = *v10;
      v15 = (v11 - 48) < 0xA || (v11 & 0xFFFFFFDF) - 65 < 0x1A || v11 == 46 || v11 == 95;
      v9 = v9 && v15;
      if ((v11 & 0x80) != 0)
      {
        v8 = (unsigned int **)a1;
        goto LABEL_24;
      }
      ++v10;
      --v5;
    }
    while (v5);
    if (v9)
      goto LABEL_2;
    v8 = (unsigned int **)(a1 + 16);
  }
  else
  {
LABEL_2:
    v8 = (unsigned int **)(a1 + 8);
  }
LABEL_24:
  v16 = **v8;
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *((_DWORD *)a2 + 2);
  v19 = *(unsigned int *)(v17 + 8);
  if (v19 >= *(_DWORD *)(v17 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 24), v17 + 16, v19 + 1, 4);
    LODWORD(v19) = *(_DWORD *)(v17 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v17 + 4 * v19) = v18;
  ++*(_DWORD *)(v17 + 8);
  sub_1C61D2F34(*(unsigned int **)(a1 + 24), v6, v7);
  result = sub_1C5033274(*v4, 1u, *(_QWORD *)(a1 + 24), v16);
  v21 = 0;
  v22 = (__int128 *)(a2 + 2);
  while (!*(_DWORD *)((char *)v22 + v21))
  {
    v21 += 4;
    if (v21 == 20)
      goto LABEL_34;
  }
  v23 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v23 + 8) = 0;
  if (*(_DWORD *)(v23 + 12) > 4u)
  {
    v24 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v23, v23 + 16, 5uLL, 4);
    v24 = *(unsigned int *)(v23 + 8);
  }
  v25 = *(_QWORD *)v23 + 4 * v24;
  v26 = *v22;
  *(_DWORD *)(v25 + 16) = *((_DWORD *)v22 + 4);
  *(_OWORD *)v25 = v26;
  *(_DWORD *)(v23 + 8) += 5;
  result = sub_1C5033274(*v4, 2u, *(_QWORD *)(a1 + 24), **(_DWORD **)(a1 + 40));
LABEL_34:
  *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8) = 0;
  return result;
}

uint64_t **sub_1C5041444(uint64_t **result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t **v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = result[13];
  if (v2)
  {
    v4 = result;
    v5 = (unint64_t *)*v2;
    v6 = v2[1] - *v2;
    if (!v6)
      goto LABEL_6;
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      result = sub_1C47BC21C(a2, v5, (uint64_t **)v5);
      ++v5;
      v7 -= 8;
    }
    while (v7);
    v2 = v4[13];
    if (v2)
    {
LABEL_6:
      v8 = (unint64_t *)v2[3];
      v9 = v2[4] - (_QWORD)v8;
      if (!v9)
        goto LABEL_23;
      v10 = 16 * (v9 >> 4);
      do
      {
        result = sub_1C47BC21C(a2, v8, (uint64_t **)v8);
        v8 += 2;
        v10 -= 16;
      }
      while (v10);
      v2 = v4[13];
      if (v2)
      {
LABEL_23:
        v11 = (unint64_t *)v2[6];
        v12 = v2[7] - (_QWORD)v11;
        if (!v12)
          goto LABEL_24;
        v13 = 16 * (v12 >> 4);
        do
        {
          result = sub_1C47BC21C(a2, v11, (uint64_t **)v11);
          v11 += 2;
          v13 -= 16;
        }
        while (v13);
        v2 = v4[13];
        if (v2)
        {
LABEL_24:
          v14 = (unint64_t *)v2[9];
          v15 = v2[10] - (_QWORD)v14;
          if (!v15)
            goto LABEL_18;
          v16 = 40 * (v15 / 40);
          do
          {
            result = sub_1C47BC21C(a2, v14, (uint64_t **)v14);
            v14 += 5;
            v16 -= 40;
          }
          while (v16);
          v2 = v4[13];
          if (v2)
          {
LABEL_18:
            v17 = (unint64_t *)v2[12];
            v18 = v2[13] - (_QWORD)v17;
            if (v18)
            {
              v19 = 40 * (v18 / 40);
              do
              {
                result = sub_1C47BC21C(a2, v17, (uint64_t **)v17);
                v17 += 5;
                v19 -= 40;
              }
              while (v19);
            }
          }
        }
      }
    }
  }
  return result;
}

_DWORD *sub_1C50415A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  llvm::raw_ostream **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream **v12;
  llvm::raw_ostream **v13;
  uint64_t *v14;
  BOOL v15;
  llvm::raw_ostream **v16;
  unsigned int v17;
  _DWORD *result;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  size_t v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  const void *v40;
  int v41;
  llvm::raw_ostream *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *i;
  llvm::raw_ostream *v54;
  unint64_t v55;
  llvm::raw_ostream **v56;
  unint64_t v57;
  BOOL v58;
  llvm::raw_ostream **v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  llvm::raw_ostream **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *j;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t **v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  llvm::raw_ostream *v105;
  unint64_t v106;
  llvm::raw_ostream **v107;
  unint64_t v108;
  BOOL v109;
  llvm::raw_ostream **v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const void *v116;
  size_t v117;
  int v118;
  uint64_t v119;
  unsigned __int8 *v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v127;
  _QWORD *v128;
  char *v129;
  const void *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  llvm::raw_ostream *v156;
  unint64_t v157;
  llvm::raw_ostream **v158;
  unint64_t v159;
  BOOL v160;
  llvm::raw_ostream **v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unsigned int v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  BOOL v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  int v180;
  unint64_t v181;
  llvm::raw_ostream *v182;
  unint64_t v183;
  llvm::raw_ostream **v184;
  unint64_t v185;
  BOOL v186;
  llvm::raw_ostream **v187;
  unsigned int **v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  llvm::raw_ostream **v195;
  uint64_t v196;
  llvm::raw_ostream *v197;
  unsigned int v198;
  llvm::raw_ostream *v199;
  uint64_t v200;
  uint64_t *v201[2];
  void *v202;
  unsigned int v203;
  void *v204;
  unsigned int v205;
  void *v206;
  unsigned int v207;
  void *v208;
  unsigned int v209;
  void **v210;
  void *v211;
  uint64_t v212;
  _QWORD v213[66];

  v213[64] = *MEMORY[0x1E0C80C00];
  v201[0] = a2;
  v201[1] = (uint64_t *)a3;
  v200 = a3;
  v5 = *(llvm::raw_ostream ***)(a1 + 8);
  sub_1C47BC21C(*(uint64_t ***)a1, (unint64_t *)v201, v201);
  v6 = *(uint64_t **)(a3 + 40);
  v7 = *(_QWORD *)(a3 + 48) - (_QWORD)v6;
  if (v7)
  {
    v8 = 8 * (v7 >> 3);
    do
    {
      v9 = *(uint64_t ***)a1;
      v10 = *v6++;
      v211 = *(void **)(v10 & 0xFFFFFFFFFFFFFFF8);
      sub_1C47BC21C(v9, (unint64_t *)&v211, (uint64_t **)&v211);
      v8 -= 8;
    }
    while (v8);
  }
  v12 = v5 + 5;
  v11 = v5[5];
  if (!v11)
    goto LABEL_15;
  v13 = v5 + 5;
  do
  {
    v14 = (uint64_t *)*((_QWORD *)v11 + 4);
    v15 = v14 >= v201[0];
    if (v14 >= v201[0])
      v16 = (llvm::raw_ostream **)v11;
    else
      v16 = (llvm::raw_ostream **)((char *)v11 + 8);
    if (v15)
      v13 = (llvm::raw_ostream **)v11;
    v11 = *v16;
  }
  while (*v16);
  if (v13 != v12 && (uint64_t *)v13[4] <= v201[0])
    v17 = *((_DWORD *)v13 + 10);
  else
LABEL_15:
    v17 = 0;
  result = sub_1C6144C70(*(_QWORD *)(a1 + 16), &v200);
  result[2] = v17;
  v19 = *(_DWORD *)(a3 + 8);
  if (a3 && !v19)
  {
    v20 = *(_QWORD *)(a1 + 24);
    v21 = *(unsigned int *)(v20 + 8);
    if (v21 >= *(_DWORD *)(v20 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(v20, v20 + 16, v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(v20 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v20 + 8 * v21) = a3;
    ++*(_DWORD *)(v20 + 8);
    return result;
  }
  v195 = v5;
  v196 = a3;
  if (a3 && v19 == 2)
  {
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(unsigned int *)(v22 + 8);
    if (v23 >= *(_DWORD *)(v22 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v22 + 16, v23 + 1, 8);
      LODWORD(v23) = *(_DWORD *)(v22 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v22 + 8 * v23) = v17;
    ++*(_DWORD *)(v22 + 8);
    v24 = *(_QWORD *)(a1 + 32);
    v197 = v5[2];
    v25 = *((unsigned int *)v197 + 8);
    if (!(_DWORD)v25)
      goto LABEL_246;
    v26 = *(const void **)(a3 + 24);
    v27 = *(_QWORD *)(a3 + 32);
    v193 = *(_QWORD *)(a1 + 32);
    v28 = 0;
    if (v27)
    {
      v29 = *(_QWORD *)(a3 + 32);
      v30 = *(unsigned __int8 **)(a3 + 24);
      do
      {
        v31 = *v30++;
        v28 = 33 * v28 + v31;
        --v29;
      }
      while (v29);
    }
    v32 = v25 - 1;
    v33 = *((_QWORD *)v197 + 3);
    v191 = *((unsigned int *)v197 + 8);
    v34 = v33 + 8 * v25 + 8;
    v35 = 1;
    v36 = v28;
    while (1)
    {
      v37 = v36 & v32;
      v38 = *(_QWORD **)(v33 + 8 * v37);
      if (v38 != (_QWORD *)-8)
      {
        if (!v38)
        {
          v24 = v193;
          goto LABEL_42;
        }
        if (*(_DWORD *)(v34 + 4 * v37) == v28 && v27 == *v38)
        {
          if (!v27)
            break;
          v39 = (char *)v38 + *((unsigned int *)v197 + 11);
          v40 = v26;
          v41 = memcmp(v26, v39, v27);
          v26 = v40;
          if (!v41)
            break;
        }
      }
      v36 = v35 + v37;
      ++v35;
    }
    v24 = v193;
    if ((_DWORD)v37 == -1 || (int)v37 == v191)
LABEL_246:
      v38 = 0;
    else
      v38 = *(_QWORD **)(*(_QWORD *)(v33 + 8 * (int)v37) + 8);
LABEL_42:
    v45 = *(unsigned int *)(v24 + 8);
    if (v45 >= *(_DWORD *)(v24 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v24, v24 + 16, v45 + 1, 8);
      LODWORD(v45) = *(_DWORD *)(v24 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v24 + 8 * v45) = v38;
    ++*(_DWORD *)(v24 + 8);
    v46 = *(_QWORD *)(a1 + 32);
    v47 = *(_DWORD *)(v196 + 12) & 0xFLL | (16 * (((unint64_t)*(unsigned int *)(v196 + 12) >> 6) & 0xF)) & 0xFFFFFFFFFFFFFCFFLL | ((((unint64_t)*(unsigned int *)(v196 + 12) >> 4) & 3) << 8);
    v48 = *(unsigned int *)(v46 + 8);
    if (v48 >= *(_DWORD *)(v46 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v46 + 16, v48 + 1, 8);
      LODWORD(v48) = *(_DWORD *)(v46 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v46 + 8 * v48) = v47;
    ++*(_DWORD *)(v46 + 8);
    v49 = *(_QWORD *)(a1 + 32);
    v50 = *(_DWORD *)(v196 + 72) & 0x1F;
    v51 = *(unsigned int *)(v49 + 8);
    if (v51 >= *(_DWORD *)(v49 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v49 + 16, v51 + 1, 8);
      LODWORD(v51) = *(_DWORD *)(v49 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v49 + 8 * v51) = v50;
    ++*(_DWORD *)(v49 + 8);
    v52 = *(_QWORD **)(v196 + 40);
    for (i = *(_QWORD **)(v196 + 48); v52 != i; ++v52)
    {
      v54 = *v12;
      if (*v12)
      {
        v55 = *(_QWORD *)(*v52 & 0xFFFFFFFFFFFFFFF8);
        v56 = v12;
        do
        {
          v57 = *((_QWORD *)v54 + 4);
          v58 = v57 >= v55;
          if (v57 >= v55)
            v59 = (llvm::raw_ostream **)v54;
          else
            v59 = (llvm::raw_ostream **)((char *)v54 + 8);
          if (v58)
            v56 = (llvm::raw_ostream **)v54;
          v54 = *v59;
        }
        while (*v59);
        if (v56 != v12 && (unint64_t)v56[4] <= v55)
        {
          v60 = *((unsigned int *)v56 + 10);
          v61 = *(_QWORD *)(a1 + 32);
          v62 = *(unsigned int *)(v61 + 8);
          if (v62 >= *(unsigned int *)(v61 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v61 + 16, v62 + 1, 8);
            v62 = *(unsigned int *)(v61 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v61 + 8 * v62) = v60;
          ++*(_DWORD *)(v61 + 8);
        }
      }
    }
    result = sub_1C5034740(*v195, 6u, *(_QWORD *)(a1 + 32), **(_DWORD **)(a1 + 40));
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 0;
    v63 = *(uint64_t **)(a1 + 48);
    v64 = (llvm::raw_ostream **)*v63;
    if (!*(_QWORD *)(*v63 + 24) && (*(_WORD *)(v196 + 12) & 0xFu) - 7 <= 1)
    {
      v65 = v63[1];
      v66 = *(_QWORD *)(v196 + 16);
LABEL_254:
      v190 = *(unsigned int *)(v65 + 8);
      if (v190 >= *(_DWORD *)(v65 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v65, v65 + 16, v190 + 1, 8);
        LODWORD(v190) = *(_DWORD *)(v65 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v65 + 8 * v190) = v66;
      ++*(_DWORD *)(v65 + 8);
      result = sub_1C5034740(*v64, 9u, v63[1], 0);
      *(_DWORD *)(v63[1] + 8) = 0;
      return result;
    }
    return result;
  }
  v42 = *v5;
  v43 = *(_QWORD *)(a3 + 104);
  v198 = v17;
  if (v43)
  {
    v44 = *(_QWORD *)(v43 + 8) - *(_QWORD *)v43;
    if (v44)
    {
      v211 = *(void **)v43;
      v212 = v44 >> 3;
      sub_1C5033BDC(v42, 0xBu, &v211);
      v43 = *(_QWORD *)(a3 + 104);
      v211 = v213;
      v212 = 0x4000000000;
      if (!v43)
        goto LABEL_104;
    }
    else
    {
      v211 = v213;
      v212 = 0x4000000000;
    }
    v67 = *(uint64_t **)(v43 + 24);
    v68 = *(uint64_t **)(v43 + 32);
    if (v68 == v67)
      goto LABEL_78;
    v69 = 0;
    LODWORD(v212) = 0;
    do
    {
      v70 = *v67;
      if (v69 >= HIDWORD(v212))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)v213, v69 + 1, 8);
        v69 = v212;
      }
      *((_QWORD *)v211 + v69) = v70;
      v71 = (v212 + 1);
      LODWORD(v212) = v71;
      v72 = v67[1];
      if (v71 >= HIDWORD(v212))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)v213, v71 + 1, 8);
        LODWORD(v71) = v212;
      }
      *((_QWORD *)v211 + v71) = v72;
      v69 = v212 + 1;
      LODWORD(v212) = v212 + 1;
      v67 += 2;
    }
    while (v67 != v68);
    sub_1C5034740(v42, 0xCu, (uint64_t)&v211, 0);
    v43 = *(_QWORD *)(a3 + 104);
    if (v43)
    {
LABEL_78:
      v73 = *(uint64_t **)(v43 + 48);
      v74 = *(uint64_t **)(v43 + 56);
      if (v74 == v73)
        goto LABEL_86;
      v75 = 0;
      LODWORD(v212) = 0;
      do
      {
        v76 = *v73;
        if (v75 >= HIDWORD(v212))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)v213, v75 + 1, 8);
          v75 = v212;
        }
        *((_QWORD *)v211 + v75) = v76;
        v77 = (v212 + 1);
        LODWORD(v212) = v77;
        v78 = v73[1];
        if (v77 >= HIDWORD(v212))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)v213, v77 + 1, 8);
          LODWORD(v77) = v212;
        }
        *((_QWORD *)v211 + v77) = v78;
        v75 = v212 + 1;
        LODWORD(v212) = v212 + 1;
        v73 += 2;
      }
      while (v73 != v74);
      sub_1C5034740(v42, 0xDu, (uint64_t)&v211, 0);
      v43 = *(_QWORD *)(a3 + 104);
      if (v43)
      {
LABEL_86:
        v79 = *(uint64_t **)(v43 + 72);
        v80 = *(uint64_t **)(v43 + 80);
        if (v80 == v79)
          goto LABEL_95;
        do
        {
          LODWORD(v212) = 0;
          v81 = *v79;
          if (HIDWORD(v212))
          {
            v82 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)v213, 1uLL, 8);
            v82 = v212;
          }
          *((_QWORD *)v211 + v82) = v81;
          v83 = (v212 + 1);
          LODWORD(v212) = v83;
          v84 = v79[1];
          if (v83 >= HIDWORD(v212))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)v213, v83 + 1, 8);
            LODWORD(v83) = v212;
          }
          *((_QWORD *)v211 + v83) = v84;
          LODWORD(v212) = v212 + 1;
          sub_1C5040FCC((unsigned int *)&v211, (uint64_t)v211 + 8 * v212, (char *)v79[2], (char *)v79[3]);
          sub_1C5034740(v42, 0xEu, (uint64_t)&v211, 0);
          v79 += 5;
        }
        while (v79 != v80);
        v43 = *(_QWORD *)(a3 + 104);
        if (v43)
        {
LABEL_95:
          v85 = *(uint64_t **)(v43 + 96);
          for (j = *(uint64_t **)(v43 + 104); v85 != j; v85 += 5)
          {
            LODWORD(v212) = 0;
            v87 = *v85;
            if (HIDWORD(v212))
            {
              v88 = 0;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)v213, 1uLL, 8);
              v88 = v212;
            }
            *((_QWORD *)v211 + v88) = v87;
            v89 = (v212 + 1);
            LODWORD(v212) = v89;
            v90 = v85[1];
            if (v89 >= HIDWORD(v212))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)v213, v89 + 1, 8);
              LODWORD(v89) = v212;
            }
            *((_QWORD *)v211 + v89) = v90;
            LODWORD(v212) = v212 + 1;
            sub_1C5040FCC((unsigned int *)&v211, (uint64_t)v211 + 8 * v212, (char *)v85[2], (char *)v85[3]);
            sub_1C5034740(v42, 0xFu, (uint64_t)&v211, 0);
          }
        }
      }
    }
    v5 = v195;
  }
  else
  {
    v211 = v213;
    v212 = 0x4000000000;
  }
LABEL_104:
  v210 = &v211;
  v91 = *(uint64_t ***)(a3 + 112);
  if (v91)
  {
    v92 = *v91;
    v93 = v91[1];
    if (v93 != *v91)
    {
      LODWORD(v212) = 0;
      do
      {
        v94 = *v92;
        v95 = v212;
        v96 = v212;
        if (v212 >= HIDWORD(v212))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)v213, v212 + 1, 8);
          v96 = v212;
        }
        *((_QWORD *)v211 + v96) = v94;
        LODWORD(v212) = v212 + 1;
        v207 = *((_DWORD *)v92 + 4);
        if (v207 > 0x40)
        {
          v206 = (void *)operator new[]();
          memcpy(v206, (const void *)v92[1], (((unint64_t)v207 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v206 = (void *)v92[1];
        }
        v209 = *((_DWORD *)v92 + 8);
        if (v209 > 0x40)
        {
          v208 = (void *)operator new[]();
          memcpy(v208, (const void *)v92[3], (((unint64_t)v209 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v208 = (void *)v92[3];
        }
        sub_1C5042880((_DWORD **)&v210, (llvm::ConstantRange *)&v206);
        if (v209 >= 0x41 && v208)
          MEMORY[0x1CAA32F9C](v208, 0x1000C8000313F17);
        if (v207 >= 0x41 && v206)
          MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
        v98 = v92[5];
        v97 = v92[6];
        v99 = v212;
        if (v212 >= (unint64_t)HIDWORD(v212))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)v213, v212 + 1, 8);
          v99 = v212;
        }
        *((_QWORD *)v211 + v99) = 0xAAAAAAAAAAAAAAABLL * ((v97 - v98) >> 4);
        LODWORD(v212) = v212 + 1;
        v100 = (uint64_t *)v92[5];
        v101 = (uint64_t *)v92[6];
        while (v100 != v101)
        {
          v102 = *v100;
          v103 = v212;
          if (v212 >= (unint64_t)HIDWORD(v212))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)v213, v212 + 1, 8);
            v103 = v212;
          }
          *((_QWORD *)v211 + v103) = v102;
          v104 = (v212 + 1);
          LODWORD(v212) = v212 + 1;
          v105 = *v12;
          if (!*v12)
            goto LABEL_147;
          v106 = *(_QWORD *)(v100[1] & 0xFFFFFFFFFFFFFFF8);
          v107 = v12;
          do
          {
            v108 = *((_QWORD *)v105 + 4);
            v109 = v108 >= v106;
            if (v108 >= v106)
              v110 = (llvm::raw_ostream **)v105;
            else
              v110 = (llvm::raw_ostream **)((char *)v105 + 8);
            if (v109)
              v107 = (llvm::raw_ostream **)v105;
            v105 = *v110;
          }
          while (*v110);
          if (v107 == v12 || (unint64_t)v107[4] > v106)
          {
LABEL_147:
            sub_1C6154790((uint64_t)&v211, v95);
            break;
          }
          v111 = *((unsigned int *)v107 + 10);
          if (v104 >= HIDWORD(v212))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)v213, v104 + 1, 8);
            LODWORD(v104) = v212;
          }
          *((_QWORD *)v211 + v104) = v111;
          LODWORD(v212) = v212 + 1;
          v203 = *((_DWORD *)v100 + 6);
          if (v203 > 0x40)
          {
            v202 = (void *)operator new[]();
            memcpy(v202, (const void *)v100[2], (((unint64_t)v203 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v202 = (void *)v100[2];
          }
          v205 = *((_DWORD *)v100 + 10);
          if (v205 > 0x40)
          {
            v204 = (void *)operator new[]();
            memcpy(v204, (const void *)v100[4], (((unint64_t)v205 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v204 = (void *)v100[4];
          }
          sub_1C5042880((_DWORD **)&v210, (llvm::ConstantRange *)&v202);
          if (v205 >= 0x41 && v204)
            MEMORY[0x1CAA32F9C](v204, 0x1000C8000313F17);
          if (v203 >= 0x41 && v202)
            MEMORY[0x1CAA32F9C](v202, 0x1000C8000313F17);
          v100 += 6;
        }
        v92 += 8;
      }
      while (v92 != v93);
      v5 = v195;
      if ((_DWORD)v212)
        sub_1C5034740(v42, 0x19u, (uint64_t)&v211, 0);
    }
  }
  if (v211 != v213)
    free(v211);
  sub_1C5041444((uint64_t **)v196, *(uint64_t ***)(a1 + 56));
  v112 = *(_QWORD *)(a1 + 32);
  v113 = *(unsigned int *)(v112 + 8);
  if (v113 >= *(_DWORD *)(v112 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v112 + 16, v113 + 1, 8);
    LODWORD(v113) = *(_DWORD *)(v112 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v112 + 8 * v113) = v198;
  ++*(_DWORD *)(v112 + 8);
  v114 = *(_QWORD *)(a1 + 32);
  v199 = v5[2];
  v115 = *((unsigned int *)v199 + 8);
  if (!(_DWORD)v115)
    goto LABEL_249;
  v116 = *(const void **)(v196 + 24);
  v117 = *(_QWORD *)(v196 + 32);
  v194 = *(_QWORD *)(a1 + 32);
  v118 = 0;
  if (v117)
  {
    v119 = *(_QWORD *)(v196 + 32);
    v120 = *(unsigned __int8 **)(v196 + 24);
    do
    {
      v121 = *v120++;
      v118 = 33 * v118 + v121;
      --v119;
    }
    while (v119);
  }
  v122 = v115 - 1;
  v123 = *((_QWORD *)v199 + 3);
  v192 = *((unsigned int *)v199 + 8);
  v124 = v123 + 8 * v115 + 8;
  v125 = 1;
  v126 = v118;
  while (1)
  {
    v127 = v126 & v122;
    v128 = *(_QWORD **)(v123 + 8 * v127);
    if (v128 != (_QWORD *)-8)
    {
      if (!v128)
      {
        v114 = v194;
        goto LABEL_175;
      }
      if (*(_DWORD *)(v124 + 4 * v127) == v118 && v117 == *v128)
      {
        if (!v117)
          break;
        v129 = (char *)v128 + *((unsigned int *)v199 + 11);
        v130 = v116;
        v131 = memcmp(v116, v129, v117);
        v116 = v130;
        if (!v131)
          break;
      }
    }
    v126 = v125 + v127;
    ++v125;
  }
  v114 = v194;
  if ((_DWORD)v127 == -1 || (int)v127 == v192)
LABEL_249:
    v128 = 0;
  else
    v128 = *(_QWORD **)(*(_QWORD *)(v123 + 8 * (int)v127) + 8);
LABEL_175:
  v132 = *(unsigned int *)(v114 + 8);
  if (v132 >= *(_DWORD *)(v114 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v114, v114 + 16, v132 + 1, 8);
    LODWORD(v132) = *(_DWORD *)(v114 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v114 + 8 * v132) = v128;
  ++*(_DWORD *)(v114 + 8);
  v133 = *(_QWORD *)(a1 + 32);
  v134 = *(_DWORD *)(v196 + 12) & 0xFLL | (16 * (((unint64_t)*(unsigned int *)(v196 + 12) >> 6) & 0xF)) & 0xFFFFFFFFFFFFFCFFLL | ((((unint64_t)*(unsigned int *)(v196 + 12) >> 4) & 3) << 8);
  v135 = *(unsigned int *)(v133 + 8);
  if (v135 >= *(_DWORD *)(v133 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v133 + 16, v135 + 1, 8);
    LODWORD(v135) = *(_DWORD *)(v133 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v133 + 8 * v135) = v134;
  ++*(_DWORD *)(v133 + 8);
  v136 = *(_QWORD *)(a1 + 32);
  v137 = *(unsigned int *)(v196 + 64);
  v138 = *(unsigned int *)(v136 + 8);
  if (v138 >= *(_DWORD *)(v136 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v136 + 16, v138 + 1, 8);
    LODWORD(v138) = *(_DWORD *)(v136 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v136 + 8 * v138) = v137;
  ++*(_DWORD *)(v136 + 8);
  v139 = *(_QWORD *)(a1 + 32);
  v140 = *(_DWORD *)(v196 + 68) & 0x3FF;
  v141 = *(unsigned int *)(v139 + 8);
  if (v141 >= *(_DWORD *)(v139 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v139 + 16, v141 + 1, 8);
    LODWORD(v141) = *(_DWORD *)(v139 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v139 + 8 * v141) = v140;
  ++*(_DWORD *)(v139 + 8);
  v142 = *(_QWORD *)(a1 + 32);
  v143 = *(_QWORD *)(v196 + 72);
  v144 = *(unsigned int *)(v142 + 8);
  if (v144 >= *(_DWORD *)(v142 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v142 + 16, v144 + 1, 8);
    LODWORD(v144) = *(_DWORD *)(v142 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v142 + 8 * v144) = v143;
  ++*(_DWORD *)(v142 + 8);
  v145 = *(_QWORD *)(a1 + 32);
  v146 = *(unsigned int *)(v145 + 8);
  if (v146 >= *(_DWORD *)(v145 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v145 + 16, v146 + 1, 8);
    LODWORD(v146) = *(_DWORD *)(v145 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v145 + 8 * v146) = 0;
  ++*(_DWORD *)(v145 + 8);
  v147 = *(_QWORD *)(a1 + 32);
  v148 = *(unsigned int *)(v147 + 8);
  if (v148 >= *(_DWORD *)(v147 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v147 + 16, v148 + 1, 8);
    LODWORD(v148) = *(_DWORD *)(v147 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v147 + 8 * v148) = 0;
  ++*(_DWORD *)(v147 + 8);
  v149 = *(_QWORD *)(a1 + 32);
  v150 = *(unsigned int *)(v149 + 8);
  if (v150 >= *(_DWORD *)(v149 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v149 + 16, v150 + 1, 8);
    LODWORD(v150) = *(_DWORD *)(v149 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v149 + 8 * v150) = 0;
  ++*(_DWORD *)(v149 + 8);
  v151 = *(_QWORD **)(v196 + 40);
  v152 = *(_QWORD **)(v196 + 48);
  if (v152 == v151)
  {
    v155 = 0;
    v154 = 0;
    v153 = 0;
  }
  else
  {
    v153 = 0;
    v154 = 0;
    v155 = 0;
    do
    {
      v156 = *v12;
      if (*v12)
      {
        v157 = *(_QWORD *)(*v151 & 0xFFFFFFFFFFFFFFF8);
        v158 = v12;
        do
        {
          v159 = *((_QWORD *)v156 + 4);
          v160 = v159 >= v157;
          if (v159 >= v157)
            v161 = (llvm::raw_ostream **)v156;
          else
            v161 = (llvm::raw_ostream **)((char *)v156 + 8);
          if (v160)
            v158 = (llvm::raw_ostream **)v156;
          v156 = *v161;
        }
        while (*v161);
        if (v158 != v12 && (unint64_t)v158[4] <= v157)
        {
          v162 = *((unsigned int *)v158 + 10);
          v163 = *(_QWORD *)(a1 + 32);
          v164 = *(unsigned int *)(v163 + 8);
          if (v164 >= *(unsigned int *)(v163 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v163 + 16, v164 + 1, 8);
            v164 = *(unsigned int *)(v163 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v163 + 8 * v164) = v162;
          ++*(_DWORD *)(v163 + 8);
          v154 += (*v151 & 2uLL) >> 1;
          if ((*v151 & 2) != 0)
            v165 = 0;
          else
            v165 = (*v151 >> 2) & 1;
          v153 += v165;
          ++v155;
        }
      }
      ++v151;
    }
    while (v151 != v152);
  }
  v166 = *(_QWORD **)(a1 + 32);
  v167 = (_QWORD *)*v166;
  v167[6] = v155;
  v167[7] = v154;
  v167[8] = v153;
  v169 = *(_QWORD *)(v196 + 80);
  v168 = *(_QWORD *)(v196 + 88);
  v170 = v168 - v169;
  if (v168 == v169)
  {
LABEL_250:
    v188 = (unsigned int **)(a1 + 72);
    v189 = 4;
  }
  else
  {
    v171 = 0;
    v172 = v169 + (v170 & 0xFFFFFFFFFFFFFFF0);
    v173 = 16 * (v170 >> 4) - 16;
    do
    {
      v174 = *(_DWORD *)(v169 + v171 + 8) & 7;
      if (v174)
        v175 = 1;
      else
        v175 = v173 == v171;
      v171 += 16;
    }
    while (!v175);
    do
    {
      while (1)
      {
        v182 = *v12;
        if (!*v12)
          break;
        v183 = *(_QWORD *)(*(_QWORD *)v169 & 0xFFFFFFFFFFFFFFF8);
        v184 = v12;
        do
        {
          v185 = *((_QWORD *)v182 + 4);
          v186 = v185 >= v183;
          if (v185 >= v183)
            v187 = (llvm::raw_ostream **)v182;
          else
            v187 = (llvm::raw_ostream **)((char *)v182 + 8);
          if (v186)
            v184 = (llvm::raw_ostream **)v182;
          v182 = *v187;
        }
        while (*v187);
        if (v184 == v12 || (unint64_t)v184[4] > v183)
          break;
        v176 = *((unsigned int *)v184 + 10);
        v177 = *(_QWORD *)(a1 + 32);
        v178 = *(unsigned int *)(v177 + 8);
        if (v178 >= *(unsigned int *)(v177 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v177 + 16, v178 + 1, 8);
          v178 = *(unsigned int *)(v177 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v177 + 8 * v178) = v176;
        ++*(_DWORD *)(v177 + 8);
        if (v174)
        {
          v179 = *(_QWORD *)(a1 + 32);
          v180 = *(_DWORD *)(v169 + 8);
          v181 = *(unsigned int *)(v179 + 8);
          if (v181 >= *(unsigned int *)(v179 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 32), v179 + 16, v181 + 1, 8);
            v181 = *(unsigned int *)(v179 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v179 + 8 * v181) = v180 & 7;
          ++*(_DWORD *)(v179 + 8);
          v169 += 16;
          if (v169 == v172)
          {
            v166 = *(_QWORD **)(a1 + 32);
            goto LABEL_243;
          }
        }
        else
        {
          v169 += 16;
          if (v169 == v172)
          {
            v166 = *(_QWORD **)(a1 + 32);
            goto LABEL_250;
          }
        }
      }
      v169 += 16;
    }
    while (v169 != v172);
    v166 = *(_QWORD **)(a1 + 32);
    if (!v174)
      goto LABEL_250;
LABEL_243:
    v188 = (unsigned int **)(a1 + 64);
    v189 = 5;
  }
  result = sub_1C5034740(*v195, v189, (uint64_t)v166, **v188);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 0;
  v63 = *(uint64_t **)(a1 + 48);
  v64 = (llvm::raw_ostream **)*v63;
  if (!*(_QWORD *)(*v63 + 24) && (*(_WORD *)(v200 + 12) & 0xFu) - 7 <= 1)
  {
    v65 = v63[1];
    v66 = *(_QWORD *)(v200 + 16);
    goto LABEL_254;
  }
  return result;
}

_DWORD *sub_1C5042880(_DWORD **a1, llvm::ConstantRange *this)
{
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;

  llvm::ConstantRange::sextOrTrunc(this, 0x40u, (uint64_t)&v8);
  if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
    MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
  *(_QWORD *)this = v8;
  *((_DWORD *)this + 2) = v9;
  v9 = 0;
  v4 = (uint64_t *)((char *)this + 16);
  if (*((_DWORD *)this + 6) >= 0x41u && *v4)
  {
    MEMORY[0x1CAA32F9C](*v4, 0x1000C8000313F17);
    v7 = v9;
    *((_QWORD *)this + 2) = v10;
    *((_DWORD *)this + 6) = v11;
    v11 = 0;
    if (v7 >= 0x41 && v8)
      MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
  }
  else
  {
    *((_QWORD *)this + 2) = v10;
    *((_DWORD *)this + 6) = v11;
  }
  v5 = (uint64_t *)this;
  if (*((_DWORD *)this + 2) >= 0x41u)
    v5 = *(uint64_t **)this;
  sub_1C5036C04(*a1, *v5);
  if (*((_DWORD *)this + 6) >= 0x41u)
    v4 = (uint64_t *)*v4;
  return sub_1C5036C04(*a1, *v4);
}

void sub_1C50429B8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40))
    free(v2);
}

void sub_1C50429D8(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *sub_1C5042AFC(_QWORD *result, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  char v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = a3 - a2;
  v4 = result[1];
  v5 = v4 + a3 - a2;
  if (result[2] < v5)
  {
    v10 = a3 - a2;
    v11 = result;
    v8 = a3;
    v9 = a2;
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v5, 1);
    a2 = v9;
    v3 = v10;
    a3 = v8;
    result = v11;
    v4 = v11[1];
  }
  if (a2 != a3)
  {
    v6 = (_BYTE *)(*result + v4);
    do
    {
      v7 = *a2++;
      *v6++ = v7;
    }
    while (a2 != a3);
    v4 = result[1];
  }
  result[1] = v4 + v3;
  return result;
}

uint64_t sub_1C5042B88()
{
  int v1;
  __n128 v2;
  int *v3;
  int v4;

  v4 = 1;
  v1 = 25;
  v2.n128_u64[0] = (unint64_t)"Number of metadatas above which we emit an index to enable lazy-loading";
  v2.n128_u64[1] = 71;
  v3 = &v1;
  sub_1C61798D0((uint64_t)&unk_1ED7F4B90, "bitcode-mdindex-threshold", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F4B90, &dword_1C475E000);
  v4 = 1;
  v1 = 512;
  v2.n128_u64[0] = (unint64_t)"The threshold (unit M) for flushing LLVM bitcode.";
  v2.n128_u64[1] = 49;
  v3 = &v1;
  sub_1C61798D0((uint64_t)&unk_1ED82ED90, "bitcode-flush-threshold", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82ED90, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Write relative block frequency to function summary ";
  v2.n128_u64[1] = 51;
  v3 = &v1;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F4C50, "write-relbf-to-summary", &v4, (_BYTE **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F4C50, &dword_1C475E000);
}

void llvm::initializeWriteBitcodePassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7F4D18);
  if (v1 != -1)
  {
    v4[0] = sub_1C5042D28;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7F4D18, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5042D28(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeModuleSummaryIndexWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Write Bitcode";
  *(_QWORD *)(v3 + 8) = 13;
  *(_QWORD *)(v3 + 16) = "write-bitcode";
  *(_QWORD *)(v3 + 24) = 13;
  *(_QWORD *)(v3 + 32) = &unk_1ED7F4D10;
  *(_WORD *)(v3 + 40) = 256;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5042DBC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5042DBC()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1ED7F4D10;
  *(_DWORD *)(v0 + 24) = 4;
  *(_QWORD *)v0 = &off_1E813F338;
  *(_QWORD *)(v0 + 32) = llvm::dbgs((llvm *)v0);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED7F4D18);
  if (v2 != -1)
  {
    v6[0] = sub_1C5042D28;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED7F4D18, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C5042EA8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5042ECC()
{
  return "Bitcode Writer";
}

_BYTE *sub_1C5042EDC(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  if (result[41])
    return sub_1C4771E64(a2, a2, (uint64_t)&llvm::ModuleSummaryIndexWrapperPass::ID);
  return result;
}

uint64_t sub_1C5042F00(uint64_t a1, const llvm::Module *a2)
{
  void **v4;
  void *v5;
  _QWORD *v6;

  if (*(_BYTE *)(a1 + 41))
  {
    v4 = **(void ****)(a1 + 8);
    do
    {
      v5 = *v4;
      v4 += 2;
    }
    while (v5 != &llvm::ModuleSummaryIndexWrapperPass::ID);
    v6 = (_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::ModuleSummaryIndexWrapperPass::ID)+ 32);
  }
  else
  {
    v6 = 0;
  }
  llvm::WriteBitcodeToFile(a2, *(llvm::raw_ostream **)(a1 + 32), *(unsigned __int8 *)(a1 + 40), v6, *(_BYTE *)(a1 + 42), 0);
  return 0;
}

llvm::ValueEnumerator *llvm::ValueEnumerator::ValueEnumerator(llvm::ValueEnumerator *this, const llvm::Module *a2, int a3)
{
  const llvm::Module *v3;
  char *v5;
  uint64_t i15;
  llvm::Type **v7;
  _QWORD *i16;
  const llvm::Value *v9;
  char *v10;
  uint64_t i17;
  llvm::Type **v12;
  char *v13;
  uint64_t i18;
  llvm::Type **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i19;
  uint64_t v22;
  uint64_t i20;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  const llvm::Value **v29;
  uint64_t v30;
  const llvm::Value *v31;
  __n128 v32;
  const llvm::NamedMDNode *i21;
  uint64_t i22;
  _BYTE *v35;
  uint64_t v36;
  const llvm::Value ***v37;
  const llvm::Value **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::Type **v42;
  llvm::Type **v43;
  llvm::Type **v44;
  llvm::Type *v45;
  uint64_t v46;
  const llvm::Value ***v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  const llvm::Value **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  BOOL v62;
  unsigned __int8 *v63;
  int v64;
  uint64_t v65;
  const llvm::Value ***v66;
  uint64_t v67;
  const llvm::Value **v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  const llvm::Value **v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const llvm::Value **v80;
  unsigned int v81;
  char *v83;
  uint64_t i;
  uint64_t v85;
  uint64_t v86;
  char *ii;
  uint64_t j;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t k;
  uint64_t v93;
  uint64_t v94;
  _QWORD **v95;
  _QWORD *v96;
  _QWORD *v97;
  int v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t jj;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t m;
  uint64_t v108;
  uint64_t v109;
  uint64_t n;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  unsigned __int8 *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v125;
  int v126;
  uint64_t kk;
  uint64_t v129;
  uint64_t mm;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t nn;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t i1;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  int v150;
  uint64_t i2;
  uint64_t v153;
  uint64_t v154;
  uint64_t i3;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t i4;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t i5;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t i6;
  uint64_t v178;
  uint64_t v179;
  uint64_t i7;
  uint64_t v181;
  uint64_t i8;
  uint64_t v183;
  uint64_t i9;
  uint64_t v185;
  uint64_t i10;
  uint64_t v187;
  uint64_t i11;
  uint64_t v189;
  uint64_t i12;
  uint64_t v191;
  uint64_t i13;
  uint64_t v193;
  uint64_t i14;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  const llvm::Module *v212;
  uint64_t i23;
  _QWORD **v214;
  __int128 v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;

  v3 = a2;
  v221 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = (char *)this + 128;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *(_OWORD *)((char *)this + 220) = 0u;
  *((_QWORD *)this + 30) = 1;
  *((_DWORD *)this + 62) = -1;
  *((_BYTE *)this + 264) = a3;
  *(_QWORD *)((char *)this + 452) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_DWORD *)this + 72) = 0;
  *(_OWORD *)((char *)this + 324) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 372) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_DWORD *)this + 102) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  if (!a3)
    goto LABEL_2;
  v220 = 0;
  v83 = (char *)a2 + 8;
  v217 = 0;
  v218 = 0;
  v219 = 0;
  for (i = *((_QWORD *)a2 + 2); (char *)i != v83; i = *(_QWORD *)(i + 8))
  {
    v85 = i - 56;
    if (!i)
    {
      v85 = 0;
LABEL_172:
      if (!*(_BYTE *)(v85 + 16) && *(_QWORD *)(v85 + 72) == v85 + 72 && (*(_BYTE *)(v85 + 34) & 0x80) == 0)
        continue;
      goto LABEL_175;
    }
    if (*(_BYTE *)(i - 40) != 3)
      goto LABEL_172;
    if ((*(_DWORD *)(i - 36) & 0x7FFFFFF) == 0)
      continue;
LABEL_175:
    v86 = *(_QWORD *)(v85 - 32);
    if (*(unsigned __int8 *)(v86 + 16) >= 4u)
      sub_1C50475E8(v86, (uint64_t)&v217);
  }
  ii = (char *)v3 + 40;
  for (j = *((_QWORD *)v3 + 6); (char *)j != ii; j = *(_QWORD *)(j + 8))
  {
    v89 = j - 48;
    if (!j)
      v89 = 0;
    v90 = *(_QWORD *)(v89 - 32);
    if (*(unsigned __int8 *)(v90 + 16) >= 4u)
      sub_1C50475E8(v90, (uint64_t)&v217);
  }
  v91 = (char *)v3 + 56;
  for (k = *((_QWORD *)v3 + 8); (char *)k != v91; k = *(_QWORD *)(k + 8))
  {
    v93 = k - 56;
    if (!k)
      v93 = 0;
    v94 = *(_QWORD *)(v93 - 32);
    if (*(unsigned __int8 *)(v94 + 16) >= 4u)
      sub_1C50475E8(v94, (uint64_t)&v217);
  }
  v95 = (_QWORD **)((char *)v3 + 24);
  v96 = (_QWORD *)*((_QWORD *)v3 + 4);
  v212 = v3;
  v214 = (_QWORD **)((char *)v3 + 24);
  v208 = (char *)v3 + 40;
  v210 = (char *)v3 + 8;
  v206 = (char *)v3 + 56;
  if (v96 == (_QWORD *)((char *)v3 + 24))
    goto LABEL_206;
  while (2)
  {
    if (v96)
      v97 = v96 - 7;
    else
      v97 = 0;
    v98 = *((_DWORD *)v97 + 5);
    if ((v98 & 0x40000000) != 0)
    {
      v100 = (uint64_t *)*(v97 - 1);
      v99 = v98 & 0x7FFFFFF;
      if (!v99)
        goto LABEL_204;
    }
    else
    {
      v99 = v98 & 0x7FFFFFF;
      v100 = &v97[-4 * v99];
      if (!v99)
        goto LABEL_204;
    }
    v101 = 32 * v99;
    do
    {
      if (*(unsigned __int8 *)(*v100 + 16) >= 4u)
        sub_1C50475E8(*v100, (uint64_t)&v217);
      v100 += 4;
      v101 -= 32;
    }
    while (v101);
LABEL_204:
    v96 = (_QWORD *)v96[1];
    if (v96 != v95)
      continue;
    break;
  }
  v102 = *((_QWORD *)v3 + 4);
  if ((_QWORD **)v102 == v95)
  {
LABEL_206:
    LODWORD(v220) = v218;
    goto LABEL_207;
  }
  while (2)
  {
    v105 = v102 - 56;
    if (v102)
    {
      if (*(_BYTE *)(v102 - 40) != 3)
        goto LABEL_219;
      if ((*(_DWORD *)(v102 - 36) & 0x7FFFFFF) != 0)
      {
LABEL_222:
        v106 = v105 + 72;
        for (m = *(_QWORD *)(v105 + 80); m != v106; m = *(_QWORD *)(m + 8))
        {
          v108 = m - 24;
          if (!m)
            v108 = 0;
          v109 = v108 + 40;
          for (n = *(_QWORD *)(v108 + 48); n != v109; n = *(_QWORD *)(n + 8))
          {
            if (n)
              v111 = n - 24;
            else
              v111 = 0;
            v112 = *(_DWORD *)(v111 + 20);
            if ((v112 & 0x40000000) != 0)
            {
              v114 = *(_QWORD *)(v111 - 8);
              v113 = v112 & 0x7FFFFFF;
            }
            else
            {
              v113 = v112 & 0x7FFFFFF;
              v114 = v111 - 32 * v113;
            }
            v115 = v114 + 32 * v113;
            if (v113)
            {
              do
              {
                if (*(_QWORD *)v114)
                  v116 = *(_BYTE *)(*(_QWORD *)v114 + 16) == 23;
                else
                  v116 = 0;
                if (v116)
                {
                  v117 = *(unsigned __int8 **)(*(_QWORD *)v114 + 24);
                  v118 = *v117;
                  if ((v118 - 3) >= 0xFFFFFFFE)
                  {
                    v125 = *((_QWORD *)v117 + 16);
                    v126 = *(unsigned __int8 *)(v125 + 16);
                    if (v126 == 24 || (v126 - 4) <= 0x10)
                      sub_1C50475E8(v125, (uint64_t)&v217);
                  }
                  else if (v118 == 32)
                  {
                    v119 = *((unsigned int *)v117 + 8);
                    if ((_DWORD)v119)
                    {
                      v120 = *((_QWORD *)v117 + 3);
                      v121 = 8 * v119;
                      do
                      {
                        v122 = *(_QWORD *)(*(_QWORD *)v120 + 128);
                        v123 = *(unsigned __int8 *)(v122 + 16);
                        if (v123 == 24 || (v123 - 4) <= 0x10)
                          sub_1C50475E8(v122, (uint64_t)&v217);
                        v120 += 8;
                        v121 -= 8;
                      }
                      while (v121);
                    }
                  }
                }
                v114 += 32;
              }
              while (v114 != v115);
            }
          }
        }
      }
    }
    else
    {
      v105 = 0;
LABEL_219:
      if (*(_BYTE *)(v105 + 16) || *(_QWORD *)(v105 + 72) != v105 + 72 || (*(_BYTE *)(v105 + 34) & 0x80) != 0)
        goto LABEL_222;
    }
    v102 = *(_QWORD *)(v102 + 8);
    v95 = v214;
    if ((_QWORD **)v102 != v214)
      continue;
    break;
  }
  v83 = v210;
  v3 = v212;
  v203 = *((_QWORD *)v212 + 4);
  LODWORD(v220) = v218;
  v91 = v206;
  for (ii = v208; (_QWORD **)v203 != v214; v203 = *(_QWORD *)(v203 + 8))
  {
    if (v203)
      v204 = v203 - 56;
    else
      v204 = 0;
    sub_1C50475E8(v204, (uint64_t)&v217);
  }
LABEL_207:
  for (jj = *((_QWORD *)v3 + 6); (char *)jj != ii; jj = *(_QWORD *)(jj + 8))
  {
    if (jj)
      v104 = jj - 48;
    else
      v104 = 0;
    sub_1C50475E8(v104, (uint64_t)&v217);
  }
  for (kk = *((_QWORD *)v3 + 8); (char *)kk != v91; kk = *(_QWORD *)(kk + 8))
  {
    if (kk)
      v129 = kk - 56;
    else
      v129 = 0;
    sub_1C50475E8(v129, (uint64_t)&v217);
  }
  for (mm = *((_QWORD *)v3 + 2); (char *)mm != v83; mm = *(_QWORD *)(mm + 8))
  {
    if (mm)
      v131 = mm - 56;
    else
      v131 = 0;
    sub_1C50475E8(v131, (uint64_t)&v217);
  }
  HIDWORD(v220) = v218;
  v132 = *((_QWORD *)v3 + 4);
  while (2)
  {
    if ((_QWORD **)v132 != v95)
    {
      if (v132)
        v133 = v132 - 56;
      else
        v133 = 0;
      if (v132 && *(_BYTE *)(v133 + 16) == 3)
      {
        if ((*(_DWORD *)(v133 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_327;
      }
      else if (!*(_BYTE *)(v133 + 16) && *(_QWORD *)(v133 + 72) == v133 + 72 && (*(_BYTE *)(v133 + 34) & 0x80) == 0)
      {
        goto LABEL_327;
      }
      v134 = v133 + 72;
      for (nn = *(_QWORD *)(v133 + 80); nn != v134; nn = *(_QWORD *)(nn + 8))
      {
        if (nn)
          v136 = nn - 24;
        else
          v136 = 0;
        sub_1C50475E8(v136, (uint64_t)&v217);
      }
      v137 = sub_1C485F330(v133);
      if (v137 != v138)
      {
        v139 = v137;
        v140 = v138;
        do
        {
          sub_1C50475E8(v139, (uint64_t)&v217);
          v139 += 40;
        }
        while (v139 != v140);
      }
      v141 = *(_QWORD *)(v133 + 80);
      if (v141 == v134)
      {
LABEL_327:
        v132 = *(_QWORD *)(v132 + 8);
        v95 = v214;
        continue;
      }
LABEL_293:
      v142 = v141 - 24;
      if (!v141)
        v142 = 0;
      v143 = v142 + 40;
      for (i1 = *(_QWORD *)(v142 + 48); ; i1 = *(_QWORD *)(i1 + 8))
      {
        if (i1 == v143)
        {
          v141 = *(_QWORD *)(v141 + 8);
          if (v141 == v134)
          {
            for (i2 = *(_QWORD *)(v133 + 80); i2 != v134; i2 = *(_QWORD *)(i2 + 8))
            {
              v153 = i2 - 24;
              if (!i2)
                v153 = 0;
              v154 = v153 + 40;
              for (i3 = *(_QWORD *)(v153 + 48); i3 != v154; i3 = *(_QWORD *)(i3 + 8))
              {
                if (i3)
                  v156 = i3 - 24;
                else
                  v156 = 0;
                sub_1C50475E8(v156, (uint64_t)&v217);
              }
            }
            goto LABEL_327;
          }
          goto LABEL_293;
        }
        if (i1)
          v145 = i1 - 24;
        else
          v145 = 0;
        v146 = *(_DWORD *)(v145 + 20);
        if ((v146 & 0x40000000) != 0)
        {
          v148 = *(uint64_t **)(v145 - 8);
          v147 = v146 & 0x7FFFFFF;
          if (!v147)
            goto LABEL_311;
        }
        else
        {
          v147 = v146 & 0x7FFFFFF;
          v148 = (uint64_t *)(v145 - 32 * v147);
          if (!v147)
            goto LABEL_311;
        }
        v149 = 32 * v147;
        do
        {
          v150 = *(unsigned __int8 *)(*v148 + 16);
          if (v150 == 24 || (v150 - 4) <= 0x10)
            sub_1C50475E8(*v148, (uint64_t)&v217);
          v148 += 4;
          v149 -= 32;
        }
        while (v149);
LABEL_311:
        if (i1 && *(_BYTE *)(v145 + 16) == 91)
          sub_1C50475E8(*(_QWORD *)(v145 + 96), (uint64_t)&v217);
      }
    }
    break;
  }
  v215 = 0uLL;
  v216 = 0;
  v157 = *v95;
  while (v157 != v95)
  {
    if (v157)
      v158 = (uint64_t)(v157 - 7);
    else
      v158 = 0;
    if (v157 && *(_BYTE *)(v158 + 16) == 3)
    {
      if ((*(_DWORD *)(v158 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_385;
    }
    else if (!*(_BYTE *)(v158 + 16) && *(_QWORD *)(v158 + 72) == v158 + 72 && (*(_BYTE *)(v158 + 34) & 0x80) == 0)
    {
      goto LABEL_385;
    }
    v159 = v158 + 72;
    for (i4 = *(_QWORD *)(v158 + 80); i4 != v159; i4 = *(_QWORD *)(i4 + 8))
    {
      if (i4)
        v161 = i4 - 24;
      else
        v161 = 0;
      sub_1C50474C4(v161, v158, (uint64_t)&v217, (uint64_t *)&v215);
    }
    v162 = sub_1C485F330(v158);
    if (v162 != v163)
    {
      v164 = v162;
      v165 = v163;
      do
      {
        sub_1C50474C4(v164, v158, (uint64_t)&v217, (uint64_t *)&v215);
        v164 += 40;
      }
      while (v164 != v165);
    }
    v166 = *(_QWORD *)(v158 + 80);
    if (v166 != v159)
    {
      while (1)
      {
        v167 = v166 - 24;
        if (!v166)
          v167 = 0;
        v168 = v167 + 40;
        for (i5 = *(_QWORD *)(v167 + 48); i5 != v168; i5 = *(_QWORD *)(i5 + 8))
        {
          if (i5)
            v170 = i5 - 24;
          else
            v170 = 0;
          v171 = *(_DWORD *)(v170 + 20);
          if ((v171 & 0x40000000) != 0)
          {
            v173 = *(uint64_t **)(v170 - 8);
            v172 = v171 & 0x7FFFFFF;
            if (!v172)
              goto LABEL_369;
          }
          else
          {
            v172 = v171 & 0x7FFFFFF;
            v173 = (uint64_t *)(v170 - 32 * v172);
            if (!v172)
              goto LABEL_369;
          }
          v174 = 32 * v172;
          do
          {
            v175 = *(unsigned __int8 *)(*v173 + 16);
            if (v175 < 0x15 || v175 == 24)
              sub_1C50474C4(*v173, v158, (uint64_t)&v217, (uint64_t *)&v215);
            v173 += 4;
            v174 -= 32;
          }
          while (v174);
LABEL_369:
          if (i5 && *(_BYTE *)(v170 + 16) == 91)
            sub_1C50474C4(*(_QWORD *)(v170 + 96), v158, (uint64_t)&v217, (uint64_t *)&v215);
        }
        v166 = *(_QWORD *)(v166 + 8);
        if (v166 == v159)
        {
          for (i6 = *(_QWORD *)(v158 + 80); i6 != v159; i6 = *(_QWORD *)(i6 + 8))
          {
            v178 = i6 - 24;
            if (!i6)
              v178 = 0;
            v179 = v178 + 40;
            for (i7 = *(_QWORD *)(v178 + 48); i7 != v179; i7 = *(_QWORD *)(i7 + 8))
            {
              if (i7)
                v181 = i7 - 24;
              else
                v181 = 0;
              sub_1C50474C4(v181, v158, (uint64_t)&v217, (uint64_t *)&v215);
            }
          }
          break;
        }
      }
    }
LABEL_385:
    v157 = (_QWORD *)*v157;
    v95 = v214;
  }
  v3 = v212;
  for (i8 = *((_QWORD *)v212 + 2); (char *)i8 != v210; i8 = *(_QWORD *)(i8 + 8))
  {
    if (i8)
      v183 = i8 - 56;
    else
      v183 = 0;
    sub_1C50474C4(v183, 0, (uint64_t)&v217, (uint64_t *)&v215);
  }
  for (i9 = *((_QWORD *)v212 + 4); (_QWORD **)i9 != v95; i9 = *(_QWORD *)(i9 + 8))
  {
    if (i9)
      v185 = i9 - 56;
    else
      v185 = 0;
    sub_1C50474C4(v185, 0, (uint64_t)&v217, (uint64_t *)&v215);
  }
  for (i10 = *((_QWORD *)v212 + 6); (char *)i10 != v208; i10 = *(_QWORD *)(i10 + 8))
  {
    if (i10)
      v187 = i10 - 48;
    else
      v187 = 0;
    sub_1C50474C4(v187, 0, (uint64_t)&v217, (uint64_t *)&v215);
  }
  for (i11 = *((_QWORD *)v212 + 8); (char *)i11 != v206; i11 = *(_QWORD *)(i11 + 8))
  {
    if (i11)
      v189 = i11 - 56;
    else
      v189 = 0;
    sub_1C50474C4(v189, 0, (uint64_t)&v217, (uint64_t *)&v215);
  }
  for (i12 = *((_QWORD *)v212 + 2); (char *)i12 != v210; i12 = *(_QWORD *)(i12 + 8))
  {
    v191 = i12 - 56;
    if (i12)
    {
      if (*(_BYTE *)(i12 - 40) == 3)
      {
        if ((*(_DWORD *)(i12 - 36) & 0x7FFFFFF) != 0)
          goto LABEL_419;
        continue;
      }
    }
    else
    {
      v191 = 0;
    }
    if (*(_BYTE *)(v191 + 16) || *(_QWORD *)(v191 + 72) != v191 + 72 || (*(_BYTE *)(v191 + 34) & 0x80) != 0)
    {
LABEL_419:
      sub_1C50474C4(*(_QWORD *)(v191 - 32), 0, (uint64_t)&v217, (uint64_t *)&v215);
      continue;
    }
  }
  for (i13 = *((_QWORD *)v212 + 6); (char *)i13 != v208; i13 = *(_QWORD *)(i13 + 8))
  {
    v193 = i13 - 48;
    if (!i13)
      v193 = 0;
    sub_1C50474C4(*(_QWORD *)(v193 - 32), 0, (uint64_t)&v217, (uint64_t *)&v215);
  }
  for (i14 = *((_QWORD *)v212 + 8); (char *)i14 != v206; i14 = *(_QWORD *)(i14 + 8))
  {
    v195 = i14 - 56;
    if (!i14)
      v195 = 0;
    sub_1C50474C4(*(_QWORD *)(v195 - 32), 0, (uint64_t)&v217, (uint64_t *)&v215);
  }
  v196 = *((_QWORD *)v212 + 4);
  while (2)
  {
    if ((_QWORD **)v196 != v95)
    {
      if (v196)
        v197 = v196 - 56;
      else
        v197 = 0;
      v198 = *(_DWORD *)(v197 + 20);
      if ((v198 & 0x40000000) != 0)
      {
        v200 = *(uint64_t **)(v197 - 8);
        v199 = v198 & 0x7FFFFFF;
        if (!v199)
        {
LABEL_442:
          v196 = *(_QWORD *)(v196 + 8);
          continue;
        }
      }
      else
      {
        v199 = v198 & 0x7FFFFFF;
        v200 = (uint64_t *)(v197 - 32 * v199);
        if (!v199)
          goto LABEL_442;
      }
      v201 = 32 * v199;
      do
      {
        v202 = *v200;
        v200 += 4;
        sub_1C50474C4(v202, 0, (uint64_t)&v217, (uint64_t *)&v215);
        v201 -= 32;
      }
      while (v201);
      goto LABEL_442;
    }
    break;
  }
  MEMORY[0x1CAA32FB4](v217, 8);
  sub_1C61D3650((void **)this);
  *(_OWORD *)this = v215;
  *((_QWORD *)this + 2) = v216;
  v216 = 0;
  v215 = 0uLL;
  v217 = &v215;
  sub_1C4EEBCC8((void ***)&v217);
LABEL_2:
  v5 = (char *)v3 + 8;
  for (i15 = *((_QWORD *)v3 + 2); (char *)i15 != v5; i15 = *(_QWORD *)(i15 + 8))
  {
    if (i15)
      v7 = (llvm::Type **)(i15 - 56);
    else
      v7 = 0;
    llvm::ValueEnumerator::EnumerateValue(this, (const llvm::Value *)v7);
    llvm::ValueEnumerator::EnumerateType(this, v7[3]);
  }
  for (i16 = (_QWORD *)*((_QWORD *)v3 + 4); i16 != (_QWORD *)((char *)v3 + 24); i16 = (_QWORD *)i16[1])
  {
    if (i16)
      v9 = (const llvm::Value *)(i16 - 7);
    else
      v9 = 0;
    llvm::ValueEnumerator::EnumerateValue(this, v9);
    llvm::ValueEnumerator::EnumerateType(this, *((llvm::Type **)v9 + 3));
    llvm::ValueEnumerator::EnumerateAttributes((uint64_t)this, *((_QWORD *)v9 + 14));
  }
  v207 = (char *)v3 + 24;
  v10 = (char *)v3 + 40;
  for (i17 = *((_QWORD *)v3 + 6); (char *)i17 != v10; i17 = *(_QWORD *)(i17 + 8))
  {
    if (i17)
      v12 = (llvm::Type **)(i17 - 48);
    else
      v12 = 0;
    llvm::ValueEnumerator::EnumerateValue(this, (const llvm::Value *)v12);
    llvm::ValueEnumerator::EnumerateType(this, v12[3]);
  }
  v13 = (char *)v3 + 56;
  for (i18 = *((_QWORD *)v3 + 8); (char *)i18 != v13; i18 = *(_QWORD *)(i18 + 8))
  {
    if (i18)
      v15 = (llvm::Type **)(i18 - 56);
    else
      v15 = 0;
    llvm::ValueEnumerator::EnumerateValue(this, (const llvm::Value *)v15);
    llvm::ValueEnumerator::EnumerateType(this, v15[3]);
  }
  v17 = *((_QWORD *)this + 12);
  v16 = *((_QWORD *)this + 13);
  v18 = *((_QWORD *)v3 + 2);
  while (2)
  {
    if ((char *)v18 != v5)
    {
      if (v18)
        v19 = v18 - 56;
      else
        v19 = 0;
      if (v18 && *(_BYTE *)(v19 + 16) == 3)
      {
        if ((*(_DWORD *)(v19 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_39;
      }
      else if (!*(_BYTE *)(v19 + 16) && *(_QWORD *)(v19 + 72) == v19 + 72 && (*(_BYTE *)(v19 + 34) & 0x80) == 0)
      {
        goto LABEL_39;
      }
      llvm::ValueEnumerator::EnumerateValue(this, *(const llvm::Value **)(v19 - 32));
LABEL_39:
      if (*(_QWORD *)(v19 + 72))
      {
        v20 = sub_1C5034B90(v19, -1);
        llvm::ValueEnumerator::EnumerateAttributes((uint64_t)this, v20);
      }
      v18 = *(_QWORD *)(v18 + 8);
      continue;
    }
    break;
  }
  for (i19 = *((_QWORD *)v3 + 6); (char *)i19 != v10; i19 = *(_QWORD *)(i19 + 8))
  {
    v22 = i19 - 48;
    if (!i19)
      v22 = 0;
    llvm::ValueEnumerator::EnumerateValue(this, *(const llvm::Value **)(v22 - 32));
  }
  for (i20 = *((_QWORD *)v3 + 8); (char *)i20 != v13; i20 = *(_QWORD *)(i20 + 8))
  {
    v24 = i20 - 56;
    if (!i20)
      v24 = 0;
    llvm::ValueEnumerator::EnumerateValue(this, *(const llvm::Value **)(v24 - 32));
  }
  v25 = *((_QWORD *)v3 + 4);
  while (2)
  {
    if ((char *)v25 != v207)
    {
      if (v25)
        v26 = v25 - 56;
      else
        v26 = 0;
      v27 = *(_DWORD *)(v26 + 20);
      if ((v27 & 0x40000000) != 0)
      {
        v29 = *(const llvm::Value ***)(v26 - 8);
        v28 = v27 & 0x7FFFFFF;
        if (!v28)
        {
LABEL_63:
          v25 = *(_QWORD *)(v25 + 8);
          continue;
        }
      }
      else
      {
        v28 = v27 & 0x7FFFFFF;
        v29 = (const llvm::Value **)(v26 - 32 * v28);
        if (!v28)
          goto LABEL_63;
      }
      v30 = 32 * v28;
      do
      {
        v31 = *v29;
        v29 += 4;
        llvm::ValueEnumerator::EnumerateValue(this, v31);
        v30 -= 32;
      }
      while (v30);
      goto LABEL_63;
    }
    break;
  }
  llvm::ValueEnumerator::EnumerateType(this, (llvm::Type *)(**(_QWORD **)v3 + 1720));
  llvm::ValueEnumerator::EnumerateValueSymbolTable(this, *((uint64_t ***)v3 + 14));
  for (i21 = (const llvm::NamedMDNode *)*((_QWORD *)v3 + 10);
        i21 != (const llvm::Module *)((char *)v3 + 72);
        i21 = (const llvm::NamedMDNode *)*((_QWORD *)i21 + 1))
  {
    llvm::ValueEnumerator::EnumerateNamedMDNode(this, i21);
  }
  v217 = &v219;
  v32.n128_u64[0] = 0x800000000;
  v218 = 0x800000000;
  for (i22 = *((_QWORD *)v3 + 2); (char *)i22 != v5; i22 = *(_QWORD *)(i22 + 8))
  {
    if (i22)
      v35 = (_BYTE *)(i22 - 56);
    else
      v35 = 0;
    LODWORD(v218) = 0;
    llvm::Value::getAllMetadata(v35, (uint64_t)&v217);
    if ((_DWORD)v218)
    {
      v36 = 16 * v218;
      v37 = (const llvm::Value ***)((char *)v217 + 8);
      do
      {
        v38 = *v37;
        v37 += 2;
        llvm::ValueEnumerator::EnumerateMetadata((uint64_t *)this, 0, v38);
        v36 -= 16;
      }
      while (v36);
    }
  }
  v205 = v16 - v17;
  v39 = *((_QWORD *)v3 + 4);
  while (2)
  {
    if ((char *)v39 != v207)
    {
      if (v39)
        v40 = v39 - 56;
      else
        v40 = 0;
      v41 = sub_1C485F330(v40);
      if ((llvm::Type **)v41 != v42)
      {
        v43 = (llvm::Type **)v41;
        v44 = v42;
        do
        {
          v45 = *v43;
          v43 += 5;
          llvm::ValueEnumerator::EnumerateType(this, v45);
        }
        while (v43 != v44);
      }
      LODWORD(v218) = 0;
      llvm::Value::getAllMetadata((_BYTE *)v40, (uint64_t)&v217);
      if (!(_DWORD)v218)
      {
LABEL_101:
        v52 = v40 + 72;
        v53 = *(_QWORD *)(v40 + 80);
        v209 = v40 + 72;
        while (v53 != v52)
        {
          v54 = v53 - 24;
          v211 = v53;
          if (!v53)
            v54 = 0;
          v55 = *(_QWORD *)(v54 + 48);
          for (i23 = v54 + 40; v55 != i23; v55 = *(_QWORD *)(v55 + 8))
          {
            if (v55)
              v56 = v55 - 24;
            else
              v56 = 0;
            v57 = *(_DWORD *)(v56 + 20);
            if ((v57 & 0x40000000) != 0)
            {
              v59 = *(uint64_t **)(v56 - 8);
              v58 = v57 & 0x7FFFFFF;
            }
            else
            {
              v58 = v57 & 0x7FFFFFF;
              v59 = (uint64_t *)(v56 - 32 * v58);
            }
            v60 = &v59[4 * v58];
            if (v58)
            {
              do
              {
                v61 = *v59;
                if (*v59)
                  v62 = *(_BYTE *)(*v59 + 16) == 23;
                else
                  v62 = 0;
                if (v62)
                {
                  v63 = *(unsigned __int8 **)(v61 + 24);
                  v64 = *v63;
                  if (v64 != 2)
                  {
                    if (v64 == 32)
                    {
                      v65 = *((unsigned int *)v63 + 8);
                      if ((_DWORD)v65)
                      {
                        v66 = (const llvm::Value ***)*((_QWORD *)v63 + 3);
                        v67 = 8 * v65;
                        do
                        {
                          v68 = *v66;
                          if (*(_BYTE *)*v66 == 1)
                          {
                            if (v39)
                              v69 = llvm::ValueEnumerator::getValueID((uint64_t)this, v39 - 56) + 1;
                            else
                              v69 = 0;
                            llvm::ValueEnumerator::EnumerateMetadata((uint64_t *)this, v69, v68);
                          }
                          ++v66;
                          v67 -= 8;
                        }
                        while (v67);
                      }
                    }
                    else
                    {
                      if (v39)
                        v70 = llvm::ValueEnumerator::getValueID((uint64_t)this, v39 - 56) + 1;
                      else
                        v70 = 0;
                      llvm::ValueEnumerator::EnumerateMetadata((uint64_t *)this, v70, (const llvm::Value **)v63);
                    }
                  }
                }
                else
                {
                  llvm::ValueEnumerator::EnumerateOperandType(this, (llvm::Type **)v61);
                }
                v59 += 4;
              }
              while (v59 != v60);
            }
            v71 = *(unsigned __int8 *)(v56 + 16);
            if (v55 && v71 == 91)
            {
              llvm::ValueEnumerator::EnumerateType(this, **(llvm::Type ***)(v56 + 96));
              v71 = *(unsigned __int8 *)(v56 + 16);
            }
            if (v55 && v71 == 62)
            {
              llvm::ValueEnumerator::EnumerateType(this, *(llvm::Type **)(v56 + 64));
              v71 = *(unsigned __int8 *)(v56 + 16);
            }
            if (v55 && v71 == 59)
              llvm::ValueEnumerator::EnumerateType(this, *(llvm::Type **)(v56 + 64));
            llvm::ValueEnumerator::EnumerateType(this, *(llvm::Type **)v56);
            v72 = *(unsigned __int8 *)(v56 + 16) - 33;
            if (v72 <= 0x33 && ((1 << v72) & 0x8000000000041) != 0)
            {
              llvm::ValueEnumerator::EnumerateAttributes((uint64_t)this, *(_QWORD *)(v55 + 40));
              llvm::ValueEnumerator::EnumerateType(this, *(llvm::Type **)(v55 + 48));
            }
            LODWORD(v218) = 0;
            llvm::Value::getAllMetadata((_BYTE *)v56, (uint64_t)&v217);
            if ((_DWORD)v218)
            {
              v73 = 0;
              v74 = 16 * v218;
              do
              {
                v75 = *(const llvm::Value ***)((char *)v217 + v73 + 8);
                if (v39)
                  v76 = llvm::ValueEnumerator::getValueID((uint64_t)this, v39 - 56) + 1;
                else
                  v76 = 0;
                llvm::ValueEnumerator::EnumerateMetadata((uint64_t *)this, v76, v75);
                v73 += 16;
              }
              while (v74 != v73);
            }
            v77 = *(_QWORD *)(v56 + 48);
            if (v77)
            {
              v78 = *(unsigned int *)(v77 + 8);
              if ((_DWORD)v78)
              {
                v79 = -8 * v78;
                do
                {
                  v80 = *(const llvm::Value ***)(v77 + v79);
                  if (v39)
                    v81 = llvm::ValueEnumerator::getValueID((uint64_t)this, v39 - 56) + 1;
                  else
                    v81 = 0;
                  llvm::ValueEnumerator::EnumerateMetadata((uint64_t *)this, v81, v80);
                  v79 += 8;
                }
                while (v79);
              }
            }
          }
          v52 = v209;
          v53 = *(_QWORD *)(v211 + 8);
        }
        v39 = *(_QWORD *)(v39 + 8);
        continue;
      }
      v46 = 16 * v218;
      v47 = (const llvm::Value ***)((char *)v217 + 8);
      while (2)
      {
        if (v39 && *(_BYTE *)(v40 + 16) == 3)
        {
          v48 = (*(_DWORD *)(v40 + 20) & 0x7FFFFFF) == 0;
LABEL_89:
          v49 = v48;
        }
        else
        {
          if (!*(_BYTE *)(v40 + 16) && *(_QWORD *)(v40 + 72) == v40 + 72)
          {
            v48 = (*(_BYTE *)(v40 + 34) & 0x80) == 0;
            goto LABEL_89;
          }
          v49 = 0;
        }
        v50 = 0;
        v51 = *v47;
        if (v39 && (v49 & 1) == 0)
          v50 = llvm::ValueEnumerator::getValueID((uint64_t)this, v40) + 1;
        llvm::ValueEnumerator::EnumerateMetadata((uint64_t *)this, v50, v51);
        v47 += 2;
        v46 -= 16;
        if (!v46)
          goto LABEL_101;
        continue;
      }
    }
    break;
  }
  llvm::ValueEnumerator::OptimizeConstants(this, v205 >> 4, (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 4, v32);
  llvm::ValueEnumerator::organizeMetadata(this);
  if (v217 != &v219)
    free(v217);
  return this;
}

void llvm::ValueEnumerator::EnumerateValue(llvm::ValueEnumerator *this, const llvm::Value *a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  int v6;
  unsigned int v7;
  const llvm::Value **v8;
  const llvm::Value *v9;
  const llvm::Value **v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  const llvm::Value **v14;
  int v15;
  uint64_t v16;
  llvm::Type **v17;
  unsigned int v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  const llvm::Value **v23;
  unint64_t v24;
  const llvm::Value **v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  const llvm::Value *v36;
  unint64_t v37;
  const llvm::Value **v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  const llvm::Value **v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  _QWORD *v59;
  unint64_t v60;
  const llvm::Value *v61;

  v61 = a2;
  v4 = (char *)this + 72;
  v3 = *((_QWORD *)this + 9);
  v5 = *((_DWORD *)this + 22);
  if (v5)
  {
    v6 = v5 - 1;
    v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (const llvm::Value **)(v3 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_16;
    v10 = 0;
    v11 = 1;
    while (v9 != (const llvm::Value *)-4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == (const llvm::Value *)-8192;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (const llvm::Value **)(v3 + 16 * v7);
      v9 = *v8;
      if (*v8 == a2)
        goto LABEL_16;
    }
    if (v10)
      v14 = v10;
    else
      v14 = v8;
  }
  else
  {
    v14 = 0;
  }
  v8 = (const llvm::Value **)sub_1C504A120((uint64_t)this + 72, (uint64_t)&v61, (uint64_t *)&v61, v14);
  *v8 = v61;
  *((_DWORD *)v8 + 2) = 0;
LABEL_16:
  v15 = *((_DWORD *)v8 + 2);
  if (v15)
  {
    v16 = *((_QWORD *)this + 12) + 16 * (v15 - 1);
    ++*(_DWORD *)(v16 + 8);
    return;
  }
  v17 = (llvm::Type **)v61;
  v18 = *((unsigned __int8 *)v61 + 16);
  if (v18 <= 3 && v18 != 1)
  {
    v60 = *((_QWORD *)v61 + 6);
    if (v60)
    {
      sub_1C61D33F0((uint64_t)this + 120, &v60);
      v17 = (llvm::Type **)v61;
    }
  }
  llvm::ValueEnumerator::EnumerateType(this, *v17);
  v20 = (uint64_t)v61;
  if (!v61
    || *((unsigned __int8 *)v61 + 16) - 21 < 0xFFFFFFEF
    || (v21 = *((_DWORD *)v61 + 5), v22 = v21 & 0x7FFFFFF, (v21 & 0x7FFFFFF) == 0))
  {
    v25 = (const llvm::Value **)*((_QWORD *)this + 13);
    v24 = *((_QWORD *)this + 14);
    if ((unint64_t)v25 >= v24)
    {
      v27 = (char *)*((_QWORD *)this + 12);
      v28 = ((char *)v25 - v27) >> 4;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60)
        goto LABEL_94;
      v30 = v24 - (_QWORD)v27;
      if (v30 >> 3 > v29)
        v29 = v30 >> 3;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
        v31 = 0xFFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 >> 60)
          goto LABEL_95;
        v32 = (char *)operator new(16 * v31);
      }
      else
      {
        v32 = 0;
      }
      v46 = (uint64_t *)&v32[16 * v28];
      *v46 = v20;
      v46[1] = 1;
      v26 = v46 + 2;
      if (v25 != (const llvm::Value **)v27)
      {
        do
        {
          *((_OWORD *)v46 - 1) = *((_OWORD *)v25 - 1);
          v46 -= 2;
          v25 -= 2;
        }
        while (v25 != (const llvm::Value **)v27);
        v25 = (const llvm::Value **)*((_QWORD *)this + 12);
      }
      *((_QWORD *)this + 12) = v46;
      *((_QWORD *)this + 13) = v26;
      *((_QWORD *)this + 14) = &v32[16 * v31];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v25 = v61;
      v25[1] = (const llvm::Value *)1;
      v26 = v25 + 2;
    }
    *((_QWORD *)this + 13) = v26;
    *((_DWORD *)v8 + 2) = ((unint64_t)v26 - *((_QWORD *)this + 12)) >> 4;
    return;
  }
  if ((v21 & 0x40000000) != 0)
  {
    v23 = (const llvm::Value **)*((_QWORD *)v61 - 1);
  }
  else
  {
    v22 = v22;
    v23 = (const llvm::Value **)((char *)v61 - 32 * v22);
  }
  v33 = 32 * v22;
  do
  {
    if (*((_BYTE *)*v23 + 16) != 22)
      llvm::ValueEnumerator::EnumerateValue(this, *v23);
    v23 += 4;
    v33 -= 32;
  }
  while (v33);
  if (*(_BYTE *)(v20 + 16) == 5)
  {
    v34 = *(unsigned __int16 *)(v20 + 18);
    if (v34 == 63)
    {
      llvm::ValueEnumerator::EnumerateValue(this, *(const llvm::Value **)(v20 + 56));
      v34 = *(unsigned __int16 *)(v20 + 18);
    }
    if (v34 == 34)
    {
      v35 = 24;
      if (*(_BYTE *)(v20 + 16) == 62)
        v35 = 64;
      llvm::ValueEnumerator::EnumerateType(this, *(llvm::Type **)(v20 + v35));
    }
  }
  v36 = v61;
  v38 = (const llvm::Value **)*((_QWORD *)this + 13);
  v37 = *((_QWORD *)this + 14);
  if ((unint64_t)v38 < v37)
  {
    *v38 = v61;
    v38[1] = (const llvm::Value *)1;
    v39 = v38 + 2;
    goto LABEL_77;
  }
  v40 = (char *)*((_QWORD *)this + 12);
  v41 = ((char *)v38 - v40) >> 4;
  v42 = v41 + 1;
  if ((unint64_t)(v41 + 1) >> 60)
LABEL_94:
    abort();
  v43 = v37 - (_QWORD)v40;
  if (v43 >> 3 > v42)
    v42 = v43 >> 3;
  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
    v44 = 0xFFFFFFFFFFFFFFFLL;
  else
    v44 = v42;
  if (!v44)
  {
    v45 = 0;
    goto LABEL_72;
  }
  if (v44 >> 60)
LABEL_95:
    sub_1C4764EE4();
  v45 = (char *)operator new(16 * v44);
LABEL_72:
  v47 = (const llvm::Value **)&v45[16 * v41];
  *v47 = v36;
  v47[1] = (const llvm::Value *)1;
  v39 = v47 + 2;
  if (v38 != (const llvm::Value **)v40)
  {
    do
    {
      *((_OWORD *)v47 - 1) = *((_OWORD *)v38 - 1);
      v47 -= 2;
      v38 -= 2;
    }
    while (v38 != (const llvm::Value **)v40);
    v38 = (const llvm::Value **)*((_QWORD *)this + 12);
  }
  *((_QWORD *)this + 12) = v47;
  *((_QWORD *)this + 13) = v39;
  *((_QWORD *)this + 14) = &v45[16 * v44];
  if (v38)
    operator delete(v38);
LABEL_77:
  *((_QWORD *)this + 13) = v39;
  v48 = ((unint64_t)v39 - *((_QWORD *)this + 12)) >> 4;
  v49 = *((_DWORD *)this + 22);
  if (!v49)
  {
    v59 = 0;
LABEL_91:
    v53 = sub_1C504A120((uint64_t)v4, (uint64_t)&v61, (uint64_t *)&v61, v59);
    *v53 = v61;
    *((_DWORD *)v53 + 2) = 0;
    goto LABEL_92;
  }
  v50 = *((_QWORD *)this + 9);
  v51 = v49 - 1;
  v52 = ((v61 >> 4) ^ (v61 >> 9)) & v51;
  v53 = (_QWORD *)(v50 + 16 * v52);
  v54 = *v53;
  if (v61 != (const llvm::Value *)*v53)
  {
    v55 = 0;
    v56 = 1;
    while (v54 != -4096)
    {
      if (v55)
        v57 = 0;
      else
        v57 = v54 == -8192;
      if (v57)
        v55 = v53;
      v58 = v52 + v56++;
      v52 = v58 & v51;
      v53 = (_QWORD *)(v50 + 16 * v52);
      v54 = *v53;
      if (v61 == (const llvm::Value *)*v53)
        goto LABEL_92;
    }
    if (v55)
      v59 = v55;
    else
      v59 = v53;
    goto LABEL_91;
  }
LABEL_92:
  *((_DWORD *)v53 + 2) = v48;
}

void llvm::ValueEnumerator::EnumerateType(llvm::ValueEnumerator *this, llvm::Type *a2)
{
  uint64_t v4;
  char *v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  llvm::Type *v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  llvm::Type **v17;
  uint64_t v18;
  llvm::Type *v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  llvm::Type *v25;
  uint64_t *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  llvm::Type *v43;

  v43 = a2;
  v5 = (char *)this + 24;
  v4 = *((_QWORD *)this + 3);
  v6 = *((_DWORD *)this + 10);
  v7 = a2 >> 4;
  if (v6)
  {
    v8 = v6 - 1;
    v9 = v8 & (v7 ^ (a2 >> 9));
    v10 = (uint64_t *)(v4 + 16 * v9);
    v11 = (llvm::Type *)*v10;
    if ((llvm::Type *)*v10 == a2)
      goto LABEL_11;
    v12 = 0;
    v13 = 1;
    while (v11 != (llvm::Type *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == (llvm::Type *)-8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = (llvm::Type *)*v10;
      if ((llvm::Type *)*v10 == a2)
        goto LABEL_11;
    }
    if (v12)
      v41 = v12;
    else
      v41 = v10;
  }
  else
  {
    v41 = 0;
  }
  v10 = sub_1C504CA68((uint64_t)v5, (uint64_t *)&v43, v41);
  *v10 = (uint64_t)a2;
  *((_DWORD *)v10 + 2) = 0;
LABEL_11:
  if (*((_DWORD *)v10 + 2))
    return;
  if (a2 && (*((_DWORD *)a2 + 2) & 0x4FF) == 0x10)
    *((_DWORD *)v10 + 2) = -1;
  v16 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v16)
  {
    v17 = (llvm::Type **)*((_QWORD *)a2 + 2);
    v18 = 8 * v16;
    do
    {
      v19 = *v17++;
      llvm::ValueEnumerator::EnumerateType(this, v19);
      v18 -= 8;
    }
    while (v18);
  }
  v20 = *((_DWORD *)this + 10);
  if (v20)
  {
    v21 = *((_QWORD *)this + 3);
    v22 = v20 - 1;
    v23 = v22 & (v7 ^ (a2 >> 9));
    v24 = (uint64_t *)(v21 + 16 * v23);
    v25 = (llvm::Type *)*v24;
    if ((llvm::Type *)*v24 == a2)
      goto LABEL_28;
    v26 = 0;
    v27 = 1;
    while (v25 != (llvm::Type *)-4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == (llvm::Type *)-8192;
      if (v28)
        v26 = v24;
      v29 = v23 + v27++;
      v23 = v29 & v22;
      v24 = (uint64_t *)(v21 + 16 * v23);
      v25 = (llvm::Type *)*v24;
      if ((llvm::Type *)*v24 == a2)
        goto LABEL_28;
    }
    if (v26)
      v42 = v26;
    else
      v42 = v24;
  }
  else
  {
    v42 = 0;
  }
  v24 = sub_1C504CA68((uint64_t)v5, (uint64_t *)&v43, v42);
  *v24 = (uint64_t)a2;
  *((_DWORD *)v24 + 2) = 0;
LABEL_28:
  if ((*((_DWORD *)v24 + 2) + 1) < 2)
  {
    v31 = (_QWORD *)*((_QWORD *)this + 7);
    v30 = *((_QWORD *)this + 8);
    if ((unint64_t)v31 >= v30)
    {
      v33 = (_QWORD *)*((_QWORD *)this + 6);
      v34 = v31 - v33;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61)
        abort();
      v36 = v30 - (_QWORD)v33;
      if (v36 >> 2 > v35)
        v35 = v36 >> 2;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 >> 61)
          sub_1C4764EE4();
        v38 = (char *)operator new(8 * v37);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[8 * v34];
      *(_QWORD *)v39 = a2;
      v32 = v39 + 8;
      if (v31 != v33)
      {
        do
        {
          v40 = *--v31;
          *((_QWORD *)v39 - 1) = v40;
          v39 -= 8;
        }
        while (v31 != v33);
        v31 = (_QWORD *)*((_QWORD *)this + 6);
      }
      *((_QWORD *)this + 6) = v39;
      *((_QWORD *)this + 7) = v32;
      *((_QWORD *)this + 8) = &v38[8 * v37];
      if (v31)
        operator delete(v31);
    }
    else
    {
      *v31 = a2;
      v32 = v31 + 1;
    }
    *((_QWORD *)this + 7) = v32;
    *((_DWORD *)v24 + 2) = ((unint64_t)v32 - *((_QWORD *)this + 6)) >> 3;
  }
}

void llvm::ValueEnumerator::EnumerateAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  char v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  BOOL v29;
  unint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t *v33;
  _OWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v48 = a2;
  if (!a2)
    return;
  v3 = (uint64_t *)(a1 + 320);
  *(_QWORD *)&v47 = 0;
  v4 = sub_1C5034C00((uint64_t *)(a1 + 320), &v48, &v47);
  v5 = v47;
  if ((v4 & 1) != 0)
  {
    if (*(_DWORD *)(v47 + 8))
      goto LABEL_28;
    goto LABEL_10;
  }
  v6 = *(_DWORD *)(a1 + 328);
  v7 = *(_DWORD *)(a1 + 336);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_76;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 332) <= v7 >> 3)
  {
LABEL_76:
    sub_1C504CB9C((uint64_t)v3, v7);
    *(_QWORD *)&v47 = 0;
    sub_1C5034C00(v3, &v48, &v47);
    v5 = v47;
  }
  ++*(_DWORD *)(a1 + 328);
  if (*(_QWORD *)v5 != -4)
    --*(_DWORD *)(a1 + 332);
  *(_QWORD *)v5 = v48;
  *(_DWORD *)(v5 + 8) = 0;
LABEL_10:
  v9 = *(_QWORD **)(a1 + 352);
  v8 = *(_QWORD *)(a1 + 360);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *(_QWORD **)(a1 + 344);
    v12 = v9 - v11;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
LABEL_77:
      abort();
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
LABEL_78:
        sub_1C4764EE4();
      v16 = (char *)operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v12];
    *(_QWORD *)v17 = v48;
    v10 = v17 + 8;
    if (v9 != v11)
    {
      do
      {
        v18 = *--v9;
        *((_QWORD *)v17 - 1) = v18;
        v17 -= 8;
      }
      while (v9 != v11);
      v9 = *(_QWORD **)(a1 + 344);
    }
    *(_QWORD *)(a1 + 344) = v17;
    *(_QWORD *)(a1 + 352) = v10;
    *(_QWORD *)(a1 + 360) = &v16[8 * v15];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = v48;
    v10 = v9 + 1;
  }
  *(_QWORD *)(a1 + 352) = v10;
  *(_DWORD *)(v5 + 8) = ((unint64_t)v10 - *(_QWORD *)(a1 + 344)) >> 3;
LABEL_28:
  if (v48)
  {
    v19 = *(_DWORD *)(v48 + 8);
    if (v19)
    {
      v20 = (uint64_t *)(a1 + 272);
      v21 = v19 - 2;
      v22 = -1;
      v46 = v19 - 2;
      do
      {
        v23 = v22 + 1;
        if (v48)
        {
          if (v23 < *(_DWORD *)(v48 + 8))
          {
            v24 = *(_QWORD *)(v48 + 8 * v23 + 40);
            if (v24)
            {
              LODWORD(v47) = v22;
              *((_QWORD *)&v47 + 1) = v24;
              v49 = 0;
              v25 = sub_1C5034A28(v20, (uint64_t)&v47, &v49);
              v26 = v49;
              if ((v25 & 1) == 0)
              {
                v27 = *(_DWORD *)(a1 + 280);
                v28 = *(_DWORD *)(a1 + 288);
                if (4 * v27 + 4 >= 3 * v28)
                {
                  v28 *= 2;
                }
                else if (v28 + ~v27 - *(_DWORD *)(a1 + 284) > v28 >> 3)
                {
LABEL_40:
                  ++*(_DWORD *)(a1 + 280);
                  v29 = *(_DWORD *)v26 == -1 && *(_QWORD *)(v26 + 8) == -4;
                  if (!v29)
                    --*(_DWORD *)(a1 + 284);
                  *(_DWORD *)v26 = v47;
                  *(_QWORD *)(v26 + 8) = *((_QWORD *)&v47 + 1);
                  *(_DWORD *)(v26 + 16) = 0;
LABEL_46:
                  v31 = *(_OWORD **)(a1 + 304);
                  v30 = *(_QWORD *)(a1 + 312);
                  if ((unint64_t)v31 >= v30)
                  {
                    v33 = v20;
                    v34 = *(_OWORD **)(a1 + 296);
                    v35 = v31 - v34;
                    v36 = v35 + 1;
                    if ((unint64_t)(v35 + 1) >> 60)
                      goto LABEL_77;
                    v37 = v30 - (_QWORD)v34;
                    if (v37 >> 3 > v36)
                      v36 = v37 >> 3;
                    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
                      v38 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v38 = v36;
                    if (v38)
                    {
                      if (v38 >> 60)
                        goto LABEL_78;
                      v39 = (char *)operator new(16 * v38);
                    }
                    else
                    {
                      v39 = 0;
                    }
                    v40 = &v39[16 * v35];
                    *(_OWORD *)v40 = v47;
                    v41 = v40;
                    if (v31 != v34)
                    {
                      do
                      {
                        *((_OWORD *)v41 - 1) = *(v31 - 1);
                        v41 -= 16;
                        --v31;
                      }
                      while (v31 != v34);
                      v31 = *(_OWORD **)(a1 + 296);
                    }
                    v32 = v40 + 16;
                    *(_QWORD *)(a1 + 296) = v41;
                    *(_QWORD *)(a1 + 304) = v40 + 16;
                    *(_QWORD *)(a1 + 312) = &v39[16 * v38];
                    v20 = v33;
                    if (v31)
                      operator delete(v31);
                    v21 = v46;
                  }
                  else
                  {
                    *v31 = v47;
                    v32 = v31 + 1;
                  }
                  *(_QWORD *)(a1 + 304) = v32;
                  *(_DWORD *)(v26 + 16) = ((unint64_t)v32 - *(_QWORD *)(a1 + 296)) >> 4;
                  v42 = *(unsigned int *)(v24 + 8);
                  if ((_DWORD)v42)
                  {
                    v43 = (uint64_t *)(v24 + 48);
                    v44 = 8 * v42;
                    do
                    {
                      v45 = *v43;
                      if (*v43)
                      {
                        if (*(_BYTE *)(v45 + 8) == 3)
                          llvm::ValueEnumerator::EnumerateType((llvm::ValueEnumerator *)a1, *(llvm::Type **)(v45 + 16));
                      }
                      ++v43;
                      v44 -= 8;
                    }
                    while (v44);
                  }
                  goto LABEL_70;
                }
                sub_1C504CD00((uint64_t)v20, v28);
                v49 = 0;
                sub_1C5034A28(v20, (uint64_t)&v47, &v49);
                v26 = v49;
                goto LABEL_40;
              }
              if (!*(_DWORD *)(v49 + 16))
                goto LABEL_46;
            }
          }
        }
LABEL_70:
        v29 = v22++ == v21;
      }
      while (!v29);
    }
  }
}

void llvm::ValueEnumerator::EnumerateValueSymbolTable(llvm::ValueEnumerator *this, uint64_t **a2)
{
  uint64_t v3;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v3 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v3)
  {
    for (i = *a2; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *a2;
  }
  v6 = (uint64_t)&(*a2)[v3];
  if (i != (uint64_t *)v6)
  {
    v7 = *i;
    do
    {
      llvm::ValueEnumerator::EnumerateValue(this, *(const llvm::Value **)(v7 + 8));
      do
      {
        v8 = i[1];
        ++i;
        v7 = v8;
        if (v8)
          v9 = v7 == -8;
        else
          v9 = 1;
      }
      while (v9);
    }
    while (i != (uint64_t *)v6);
  }
}

void llvm::ValueEnumerator::EnumerateNamedMetadata(llvm::ValueEnumerator *this, const llvm::Module *a2)
{
  const llvm::NamedMDNode *v2;
  const llvm::NamedMDNode *v3;

  v2 = (const llvm::Module *)((char *)a2 + 72);
  v3 = (const llvm::NamedMDNode *)*((_QWORD *)a2 + 10);
  if (v3 != (const llvm::Module *)((char *)a2 + 72))
  {
    do
    {
      llvm::ValueEnumerator::EnumerateNamedMDNode(this, v3);
      v3 = (const llvm::NamedMDNode *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
}

void llvm::ValueEnumerator::EnumerateMetadata(uint64_t *a1, uint64_t a2, const llvm::Value **a3)
{
  if (a2)
    LODWORD(a2) = llvm::ValueEnumerator::getValueID((uint64_t)a1, a2) + 1;
  llvm::ValueEnumerator::EnumerateMetadata(a1, a2, a3);
}

void llvm::ValueEnumerator::EnumerateOperandType(llvm::ValueEnumerator *this, llvm::Type **a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  const llvm::Value *v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  const llvm::Value **v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  llvm::ValueEnumerator::EnumerateType(this, *a2);
  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 > 0x14)
    return;
  v5 = *((_DWORD *)this + 22);
  if (v5)
  {
    v6 = *((_QWORD *)this + 9);
    v7 = v5 - 1;
    v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    v9 = *(const llvm::Value **)(v6 + 16 * v8);
    if (v9 == (const llvm::Value *)a2)
      return;
    v10 = 1;
    while (v9 != (const llvm::Value *)-4096)
    {
      v11 = v8 + v10++;
      v8 = v11 & v7;
      v9 = *(const llvm::Value **)(v6 + 16 * v8);
      if (v9 == (const llvm::Value *)a2)
        return;
    }
  }
  v12 = *((_DWORD *)a2 + 5);
  if ((v12 & 0x40000000) != 0)
  {
    v14 = (const llvm::Value **)*(a2 - 1);
    v13 = v12 & 0x7FFFFFF;
    if (!v13)
      goto LABEL_17;
LABEL_12:
    v15 = 32 * v13;
    do
    {
      if (*((_BYTE *)*v14 + 16) != 22)
        llvm::ValueEnumerator::EnumerateOperandType(this, *v14);
      v14 += 4;
      v15 -= 32;
    }
    while (v15);
    v4 = *((unsigned __int8 *)a2 + 16);
    goto LABEL_17;
  }
  v13 = v12 & 0x7FFFFFF;
  v14 = &a2[-4 * v13];
  if (v13)
    goto LABEL_12;
LABEL_17:
  if (v4 == 5)
  {
    v16 = *((unsigned __int16 *)a2 + 9);
    if (v16 == 63)
    {
      llvm::ValueEnumerator::EnumerateOperandType(this, a2[7]);
      v16 = *((unsigned __int16 *)a2 + 9);
    }
    if (v16 == 34)
    {
      v17 = 3;
      if (*((_BYTE *)a2 + 16) == 62)
        v17 = 8;
      llvm::ValueEnumerator::EnumerateType(this, a2[v17]);
    }
  }
}

_QWORD *llvm::ValueEnumerator::OptimizeConstants(_QWORD *this, unsigned int a2, unsigned int a3, __n128 a4)
{
  uint64_t (*v4)(uint64_t);
  uint64_t (*v5)(uint64_t);
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 *v11;
  const std::nothrow_t *v12;
  unint64_t v13;
  __n128 *v14;
  BOOL v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  unint64_t v27;
  const std::nothrow_t *v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t (*v43[13])(uint64_t);

  if (a2 != a3)
  {
    v43[11] = v4;
    v43[12] = v5;
    v7 = a2;
    if (a2 + 1 != a3)
    {
      v8 = this;
      if (!*((_BYTE *)this + 264))
      {
        v9 = this[12];
        v10 = v9 + 16 * a2;
        v11 = (__n128 *)(v9 + 16 * a3);
        v42 = a3;
        v43[0] = (uint64_t (*)(uint64_t))this;
        if ((uint64_t)(a3 - (unint64_t)a2) < 1)
        {
LABEL_9:
          sub_1C5048B80(v10, v11, v43, a3 - (unint64_t)v7, 0, 0, a4);
        }
        else
        {
          v12 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          v13 = a3 - (unint64_t)a2;
          while (1)
          {
            v14 = (__n128 *)operator new(16 * v13, v12);
            if (v14)
              break;
            v15 = v13 > 1;
            v13 >>= 1;
            if (!v15)
              goto LABEL_9;
          }
          v16 = v14;
          sub_1C5048B80(v10, v11, v43, a3 - (unint64_t)v7, v14, v13, a4);
          operator delete(v16);
        }
        v17 = v8[12];
        v43[0] = (uint64_t (*)(uint64_t))sub_1C5046214;
        v18 = (uint64_t *)(v17 + 16 * v7);
        v19 = 16 * v42 - 16 * v7;
        v20 = v18;
        while (1)
        {
          v21 = *(_QWORD *)*v20;
          v22 = (*(_DWORD *)(v21 + 8) & 0xFE) == 0x12
              ? *(unsigned __int8 *)(**(_QWORD **)(v21 + 16) + 8)
              : *(_DWORD *)(v21 + 8);
          if (v22 != 13)
            break;
          v20 += 2;
          v18 += 2;
          v19 -= 16;
          if (!v19)
            goto LABEL_32;
        }
        v23 = (uint64_t *)(v17 + 16 * v42);
        v24 = (uint64_t)(v23 - 2);
        do
        {
          v19 -= 16;
          if (!v19)
            goto LABEL_32;
          v25 = (BOOL)v43[0](v24);
          v23 -= 2;
          v24 -= 16;
        }
        while (!v25);
        v26 = (v19 >> 4) + 1;
        if (v19 < 33)
        {
LABEL_28:
          v30 = 0;
          v27 = 0;
        }
        else
        {
          if (v26 >= 0x7FFFFFFFFFFFFFFLL)
            v27 = 0x7FFFFFFFFFFFFFFLL;
          else
            v27 = (v19 >> 4) + 1;
          v28 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          while (1)
          {
            v29 = operator new(16 * v27, v28);
            if (v29)
              break;
            v15 = v27 > 1;
            v27 >>= 1;
            if (!v15)
              goto LABEL_28;
          }
          v30 = v29;
        }
        sub_1C5049E20(v18, v23, v43, v26, v30, v27);
        if (v30)
          operator delete(v30);
LABEL_32:
        while (1)
        {
          v31 = (uint64_t *)(v8[12] + 16 * v7);
          v32 = *((_DWORD *)v8 + 22);
          if (!v32)
            break;
          v33 = v8[9];
          v34 = v32 - 1;
          v35 = ((*v31 >> 4) ^ (*v31 >> 9)) & v34;
          this = (_QWORD *)(v33 + 16 * v35);
          v36 = *this;
          if (*v31 != *this)
          {
            v37 = 0;
            v38 = 1;
            while (v36 != -4096)
            {
              if (v37)
                v39 = 0;
              else
                v39 = v36 == -8192;
              if (v39)
                v37 = this;
              v40 = v35 + v38++;
              v35 = v40 & v34;
              this = (_QWORD *)(v33 + 16 * v35);
              v36 = *this;
              if (*v31 == *this)
                goto LABEL_47;
            }
            if (v37)
              v41 = v37;
            else
              v41 = this;
            goto LABEL_46;
          }
LABEL_47:
          *((_DWORD *)this + 2) = ++v7;
          if (v7 == a3)
            return this;
        }
        v41 = 0;
LABEL_46:
        this = sub_1C504A120((uint64_t)(v8 + 9), (uint64_t)v31, v31, v41);
        *this = *v31;
        *((_DWORD *)this + 2) = 0;
        goto LABEL_47;
      }
    }
  }
  return this;
}

void llvm::ValueEnumerator::organizeMetadata(llvm::ValueEnumerator *this)
{
  llvm::ValueEnumerator **v1;
  llvm::ValueEnumerator **v2;
  llvm::ValueEnumerator ***v3;
  uint64_t *v5;
  unint64_t v6;
  llvm::ValueEnumerator *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::ValueEnumerator *v18;
  unint64_t v19;
  llvm::ValueEnumerator **v20;
  llvm::ValueEnumerator **v21;
  llvm::ValueEnumerator **v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  llvm::ValueEnumerator **v28;
  llvm::ValueEnumerator *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _DWORD *v35;
  int v36;
  llvm::ValueEnumerator **v37;
  unint64_t v38;
  _DWORD *v39;
  int v40;
  llvm::ValueEnumerator *v41;
  unint64_t v42;
  _QWORD *v43;
  llvm::ValueEnumerator **v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  llvm::ValueEnumerator **v51;
  llvm::ValueEnumerator *v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  llvm::ValueEnumerator ***v58;
  llvm::ValueEnumerator ***v59;
  _QWORD *v60;
  uint64_t v61;
  llvm::ValueEnumerator *v62;
  void *v63;
  uint64_t v64;
  _QWORD v65[66];

  v65[64] = *MEMORY[0x1E0C80C00];
  v1 = (llvm::ValueEnumerator **)*((_QWORD *)this + 21);
  v58 = (llvm::ValueEnumerator ***)((char *)this + 168);
  v3 = (llvm::ValueEnumerator ***)((char *)this + 176);
  v2 = (llvm::ValueEnumerator **)*((_QWORD *)this + 22);
  if (v1 != v2)
  {
    v63 = v65;
    v64 = 0x4000000000;
    v5 = (uint64_t *)((char *)this + 216);
    v6 = *((unsigned int *)this + 56);
    if (v6 >= 0x41)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v6, 8);
      v1 = *v58;
      v2 = *v3;
    }
    if (v1 == v2)
    {
      v10 = v64;
    }
    else
    {
      do
      {
        v7 = *v1;
        v61 = 0;
        v62 = v7;
        v8 = 0;
        if (sub_1C4E36534(v5, &v62, &v61))
          v8 = *(_QWORD *)(v61 + 8);
        v9 = v64;
        if (v64 >= (unint64_t)HIDWORD(v64))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v64 + 1, 8);
          v9 = v64;
        }
        *((_QWORD *)v63 + v9) = v8;
        v10 = v64 + 1;
        LODWORD(v64) = v64 + 1;
        ++v1;
      }
      while (v1 != v2);
    }
    v62 = this;
    v11 = 126 - 2 * __clz(v10);
    if (v10)
      v12 = v11;
    else
      v12 = 0;
    sub_1C504A3A4((unint64_t)v63, (uint64_t *)v63 + v10, (uint64_t)&v62, v12, 1);
    v14 = (_QWORD *)*((_QWORD *)this + 21);
    v13 = *((_QWORD *)this + 22);
    *((_QWORD *)this + 21) = 0;
    v15 = (v13 - (uint64_t)v14) >> 3;
    *v3 = 0;
    v3[1] = 0;
    sub_1C4DB1D18((uint64_t)v58, v15);
    v16 = v64;
    v60 = v14;
    if ((_DWORD)v64)
    {
      v56 = v15;
      v17 = 0;
      do
      {
        if (*((_DWORD *)v63 + 2 * v17))
          break;
        v62 = 0;
        v18 = (llvm::ValueEnumerator *)v14[*((_DWORD *)v63 + 2 * v17 + 1) - 1];
        v62 = v18;
        v20 = (llvm::ValueEnumerator **)*((_QWORD *)this + 22);
        v19 = *((_QWORD *)this + 23);
        if ((unint64_t)v20 >= v19)
        {
          v22 = *v58;
          v23 = v20 - *v58;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61)
LABEL_74:
            abort();
          v25 = v19 - (_QWORD)v22;
          if (v25 >> 2 > v24)
            v24 = v25 >> 2;
          v26 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v24;
          if (v26)
          {
            if (v26 >> 61)
LABEL_75:
              sub_1C4764EE4();
            v27 = (char *)operator new(8 * v26);
          }
          else
          {
            v27 = 0;
          }
          v28 = (llvm::ValueEnumerator **)&v27[8 * v23];
          *v28 = v18;
          v21 = v28 + 1;
          if (v20 != v22)
          {
            do
            {
              v29 = *--v20;
              *--v28 = v29;
            }
            while (v20 != v22);
            v20 = *v58;
          }
          *((_QWORD *)this + 21) = v28;
          *((_QWORD *)this + 22) = v21;
          *((_QWORD *)this + 23) = &v27[8 * v26];
          v14 = v60;
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v20 = v18;
          v21 = v20 + 1;
        }
        *v3 = v21;
        *((_DWORD *)sub_1C504A298(v5, &v62) + 3) = ++v17;
        if (!*(_BYTE *)v62)
          ++*((_DWORD *)this + 114);
      }
      while (v17 != v16);
      v30 = v64;
      v15 = v56;
    }
    else
    {
      v30 = 0;
    }
    if (v30 != *v3 - *v58)
    {
      v59 = (llvm::ValueEnumerator ***)((char *)this + 192);
      sub_1C4DB1D18((uint64_t)this + 192, v15);
      v31 = 0;
      LODWORD(v57) = 0;
      LODWORD(v61) = 0;
      v32 = (*((_QWORD *)this + 22) - *((_QWORD *)this + 21)) >> 3;
      v33 = v64;
      if ((_DWORD)v64 != (_DWORD)v32)
      {
        v55 = v5;
        LODWORD(v57) = 0;
        v31 = 0;
        v34 = (*((_QWORD *)this + 22) - *((_QWORD *)this + 21)) >> 3;
        do
        {
          v35 = v63;
          v36 = *((_DWORD *)v63 + 2 * v34);
          if ((_DWORD)v61)
          {
            v37 = (llvm::ValueEnumerator **)*((_QWORD *)this + 25);
            if ((_DWORD)v61 != v36)
            {
              v38 = ((unint64_t)v37 - *((_QWORD *)this + 24)) >> 3;
              v39 = (_DWORD *)sub_1C504C634((_DWORD *)this + 60, (int *)&v61);
              v40 = v39[3];
              v39[1] = v57;
              v39[2] = v38;
              v39[3] = v31;
              v37 = (llvm::ValueEnumerator **)*((_QWORD *)this + 25);
              v57 = ((unint64_t)v37 - *((_QWORD *)this + 24)) >> 3;
              v32 = (*((_QWORD *)this + 22) - *((_QWORD *)this + 21)) >> 3;
              LODWORD(v61) = v36;
              v35 = v63;
              v31 = v40;
            }
          }
          else
          {
            LODWORD(v61) = *((_DWORD *)v63 + 2 * v34);
            v37 = (llvm::ValueEnumerator **)*((_QWORD *)this + 25);
          }
          v62 = 0;
          v41 = (llvm::ValueEnumerator *)v14[v35[2 * v34 + 1] - 1];
          v62 = v41;
          v42 = *((_QWORD *)this + 26);
          if ((unint64_t)v37 >= v42)
          {
            v44 = *v59;
            v45 = v37 - *v59;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61)
              goto LABEL_74;
            v47 = v33;
            v48 = v42 - (_QWORD)v44;
            if (v48 >> 2 > v46)
              v46 = v48 >> 2;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
              v49 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v49 = v46;
            if (v49)
            {
              if (v49 >> 61)
                goto LABEL_75;
              v50 = (char *)operator new(8 * v49);
            }
            else
            {
              v50 = 0;
            }
            v51 = (llvm::ValueEnumerator **)&v50[8 * v45];
            *v51 = v41;
            v43 = v51 + 1;
            if (v37 != v44)
            {
              do
              {
                v52 = *--v37;
                *--v51 = v52;
              }
              while (v37 != v44);
              v37 = *v59;
            }
            *((_QWORD *)this + 24) = v51;
            *((_QWORD *)this + 25) = v43;
            *((_QWORD *)this + 26) = &v50[8 * v49];
            if (v37)
              operator delete(v37);
            v33 = v47;
            v5 = v55;
          }
          else
          {
            *v37 = v41;
            v43 = v37 + 1;
          }
          *((_QWORD *)this + 25) = v43;
          LODWORD(v32) = v32 + 1;
          *((_DWORD *)sub_1C504A298(v5, &v62) + 3) = v32;
          if (!*(_BYTE *)v62)
            ++v31;
          ++v34;
          v14 = v60;
        }
        while (v34 != (_DWORD)v33);
      }
      v53 = (*((_QWORD *)this + 25) - *((_QWORD *)this + 24)) >> 3;
      v54 = (_DWORD *)sub_1C504C634((_DWORD *)this + 60, (int *)&v61);
      v54[1] = v57;
      v54[2] = v53;
      v54[3] = v31;
    }
    if (v14)
      operator delete(v14);
    if (v63 != v65)
      free(v63);
  }
}

uint64_t llvm::ValueEnumerator::getInstructionID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 392);
  v3 = *(unsigned int *)(a1 + 408);
  if (!(_DWORD)v3)
  {
LABEL_7:
    v5 = (uint64_t *)(v2 + 16 * v3);
    return *((unsigned int *)v5 + 2);
  }
  LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v5 = (uint64_t *)(v2 + 16 * v4);
  v6 = *v5;
  if (*v5 != a2)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        return *((unsigned int *)v5 + 2);
      }
    }
    goto LABEL_7;
  }
  return *((unsigned int *)v5 + 2);
}

_QWORD *llvm::ValueEnumerator::setInstructionID(llvm::ValueEnumerator *this, const llvm::Instruction *a2)
{
  int v2;
  _QWORD *result;
  const llvm::Instruction *v4;

  v4 = a2;
  v2 = *((_DWORD *)this + 104);
  *((_DWORD *)this + 104) = v2 + 1;
  result = sub_1C504894C((uint64_t)this + 392, (uint64_t *)&v4);
  *((_DWORD *)result + 2) = v2;
  return result;
}

uint64_t llvm::ValueEnumerator::getValueID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v12;
  uint64_t v13;

  if (!a2 || *(_BYTE *)(a2 + 16) != 23)
  {
    v4 = *(_QWORD *)(a1 + 72);
    v5 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v5)
    {
      LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v7 = (uint64_t *)(v4 + 16 * v6);
      v8 = *v7;
      if (*v7 == a2)
      {
LABEL_13:
        v3 = *((_DWORD *)v7 + 2);
        return (v3 - 1);
      }
      v9 = 1;
      while (v8 != -4096)
      {
        v10 = v6 + v9++;
        v6 = v10 & (v5 - 1);
        v8 = *(_QWORD *)(v4 + 16 * v6);
        if (v8 == a2)
        {
          v7 = (uint64_t *)(v4 + 16 * v6);
          goto LABEL_13;
        }
      }
    }
    v7 = (uint64_t *)(v4 + 16 * v5);
    goto LABEL_13;
  }
  v2 = *(_QWORD *)(a2 + 24);
  v12 = 0;
  v13 = v2;
  if (!sub_1C4E36534((uint64_t *)(a1 + 216), &v13, &v12))
    return 0xFFFFFFFFLL;
  v3 = *(_DWORD *)(v12 + 12);
  return (v3 - 1);
}

llvm::raw_ostream *llvm::ValueEnumerator::print(int a1, llvm::raw_ostream *this, uint64_t a3, const char *a4)
{
  uint64_t v7;
  llvm::raw_ostream *v8;
  size_t v9;
  void *v10;
  _BYTE *v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *result;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ***v20;
  _DWORD *v21;
  unint64_t v22;
  llvm::raw_ostream *v23;
  const char *v24;
  size_t v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ****v31;
  uint64_t ***v32;
  int v33;
  int v34;
  uint64_t ***v35;
  size_t v36;
  unint64_t v37;
  llvm::raw_ostream *v38;
  llvm *v39;
  llvm::raw_ostream *v40;
  _BYTE *v41;
  uint64_t v42;
  llvm::raw_ostream *v43;
  uint64_t **v44;
  unsigned int v45;
  _WORD *v46;
  uint64_t ****v47;
  uint64_t v48;
  uint64_t v49;
  llvm::raw_ostream *v50;
  const char *v51;
  size_t v52;
  llvm::raw_ostream *v53;
  uint64_t ***v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t ****v59;
  uint64_t ***v60;
  int v61;
  int v62;
  uint64_t ***v63;
  size_t v64;
  unint64_t v65;
  _WORD *v66;
  uint64_t v67;
  uint64_t v68;

  v7 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v7) > 9)
  {
    *(_WORD *)(v7 + 8) = 8250;
    *(_QWORD *)v7 = *(_QWORD *)"Map Name: ";
    *((_QWORD *)this + 4) += 10;
    v8 = this;
    if (!a4)
      goto LABEL_5;
  }
  else
  {
    v8 = llvm::raw_ostream::write(this, "Map Name: ", 0xAuLL);
    if (!a4)
      goto LABEL_5;
  }
  v9 = strlen(a4);
  v10 = (void *)*((_QWORD *)v8 + 4);
  if (v9 <= *((_QWORD *)v8 + 3) - (_QWORD)v10)
  {
    if (v9)
    {
      memcpy(v10, a4, v9);
      *((_QWORD *)v8 + 4) += v9;
    }
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, a4, v9);
  }
LABEL_5:
  v11 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v11)
  {
    llvm::raw_ostream::write(v8, "\n", 1uLL);
  }
  else
  {
    *v11 = 10;
    ++*((_QWORD *)v8 + 4);
  }
  v12 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v12) > 5)
  {
    *(_WORD *)(v12 + 4) = 8250;
    *(_DWORD *)v12 = 1702521171;
    *((_QWORD *)this + 4) += 6;
    v13 = this;
  }
  else
  {
    v13 = llvm::raw_ostream::write(this, "Size: ", 6uLL);
  }
  result = sub_1C5E21910(v13, *(unsigned int *)(a3 + 8), 0, 0, 0);
  v15 = (_BYTE *)*((_QWORD *)v13 + 4);
  if (*((_BYTE **)v13 + 3) == v15)
  {
    result = llvm::raw_ostream::write(v13, "\n", 1uLL);
  }
  else
  {
    *v15 = 10;
    ++*((_QWORD *)v13 + 4);
  }
  v16 = *(unsigned int *)(a3 + 16);
  v17 = *(_QWORD *)a3 + 16 * v16;
  if (*(_DWORD *)(a3 + 8))
  {
    if ((_DWORD)v16)
    {
      v18 = 16 * v16;
      v19 = *(_QWORD *)a3;
      while ((*(_QWORD *)v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v19 += 16;
        v18 -= 16;
        if (!v18)
          goto LABEL_16;
      }
    }
    else
    {
      v19 = *(_QWORD *)a3;
    }
  }
  else
  {
LABEL_16:
    v19 = *(_QWORD *)a3 + 16 * v16;
  }
  v68 = *(_QWORD *)a3 + 16 * v16;
  if (v19 != v68)
  {
    while (1)
    {
      v20 = *(uint64_t ****)v19;
      v21 = (_DWORD *)*((_QWORD *)this + 4);
      v22 = *((_QWORD *)this + 3) - (_QWORD)v21;
      if ((*(_BYTE *)(*(_QWORD *)v19 + 23) & 0x10) == 0)
      {
        if (v22 <= 0xD)
        {
          v23 = this;
          v24 = "Value: [null]\n";
          v25 = 14;
LABEL_34:
          result = llvm::raw_ostream::write(v23, v24, v25);
          goto LABEL_35;
        }
        qmemcpy(v21, "Value: [null]\n", 14);
        *((_QWORD *)this + 4) += 14;
        goto LABEL_35;
      }
      if (v22 > 6)
      {
        *(_DWORD *)((char *)v21 + 3) = 540697973;
        *v21 = 1970037078;
        *((_QWORD *)this + 4) += 7;
        v26 = this;
      }
      else
      {
        result = llvm::raw_ostream::write(this, "Value: ", 7uLL);
        v26 = result;
      }
      if ((*((_BYTE *)v20 + 23) & 0x10) == 0)
        goto LABEL_35;
      v27 = ***v20;
      v28 = *(_QWORD *)(v27 + 152);
      v29 = *(unsigned int *)(v27 + 168);
      if (!(_DWORD)v29)
        goto LABEL_31;
      LODWORD(v30) = (v29 - 1) & ((v20 >> 4) ^ (v20 >> 9));
      v31 = (uint64_t ****)(v28 + 16 * v30);
      v32 = *v31;
      if (*v31 != v20)
        break;
LABEL_32:
      v35 = v31[1];
      v37 = (unint64_t)*v35;
      v24 = (const char *)(v35 + 2);
      v36 = v37;
      result = (llvm::raw_ostream *)*((_QWORD *)v26 + 4);
      if (v37 > *((_QWORD *)v26 + 3) - (_QWORD)result)
      {
        v23 = v26;
        v25 = v36;
        goto LABEL_34;
      }
      if (v36)
      {
        result = (llvm::raw_ostream *)memcpy(result, v24, v36);
        *((_QWORD *)v26 + 4) += v36;
      }
LABEL_35:
      v38 = (llvm::raw_ostream *)llvm::errs(result);
      llvm::Value::print((llvm::Value *)v20, v38, 0);
      v40 = (llvm::raw_ostream *)llvm::errs(v39);
      v41 = (_BYTE *)*((_QWORD *)v40 + 4);
      if ((unint64_t)v41 >= *((_QWORD *)v40 + 3))
      {
        llvm::raw_ostream::write(v40, 10);
      }
      else
      {
        *((_QWORD *)v40 + 4) = v41 + 1;
        *v41 = 10;
      }
      v42 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v42) > 5)
      {
        *(_WORD *)(v42 + 4) = 10355;
        *(_DWORD *)v42 = 1702057248;
        *((_QWORD *)this + 4) += 6;
        v43 = this;
      }
      else
      {
        v43 = llvm::raw_ostream::write(this, " Uses(", 6uLL);
      }
      v44 = v20[1];
      if (v44)
      {
        v45 = 0;
        do
        {
          ++v45;
          v44 = (uint64_t **)v44[1];
        }
        while (v44);
      }
      else
      {
        v45 = 0;
      }
      result = sub_1C5E21910(v43, v45, 0, 0, 0);
      v46 = (_WORD *)*((_QWORD *)v43 + 4);
      if (*((_QWORD *)v43 + 3) - (_QWORD)v46 > 1uLL)
      {
        *v46 = 14889;
        *((_QWORD *)v43 + 4) += 2;
      }
      else
      {
        result = llvm::raw_ostream::write(v43, "):", 2uLL);
      }
      v47 = (uint64_t ****)v20[1];
      if (v47)
      {
        while (1)
        {
          v48 = *((_QWORD *)this + 4);
          if (v47 != (uint64_t ****)v20[1])
          {
            if (*((_QWORD *)this + 3) == v48)
            {
              result = llvm::raw_ostream::write(this, ",", 1uLL);
              v48 = *((_QWORD *)this + 4);
            }
            else
            {
              *(_BYTE *)v48 = 44;
              v48 = *((_QWORD *)this + 4) + 1;
              *((_QWORD *)this + 4) = v48;
            }
          }
          v49 = *((_QWORD *)this + 3);
          if ((*((_BYTE *)*v47 + 23) & 0x10) != 0)
            break;
          if ((unint64_t)(v49 - v48) > 6)
          {
            *(_DWORD *)(v48 + 3) = 1567386741;
            *(_DWORD *)v48 = 1970166560;
            *((_QWORD *)this + 4) += 7;
            goto LABEL_65;
          }
          v50 = this;
          v51 = " [null]";
          v52 = 7;
LABEL_64:
          result = llvm::raw_ostream::write(v50, v51, v52);
LABEL_65:
          v47 = (uint64_t ****)v47[1];
          if (!v47)
            goto LABEL_72;
        }
        if (v49 == v48)
        {
          result = llvm::raw_ostream::write(this, " ", 1uLL);
          v53 = result;
        }
        else
        {
          *(_BYTE *)v48 = 32;
          ++*((_QWORD *)this + 4);
          v53 = this;
        }
        v54 = *v47;
        if ((*((_BYTE *)*v47 + 23) & 0x10) == 0)
          goto LABEL_65;
        v55 = ***v54;
        v56 = *(_QWORD *)(v55 + 152);
        v57 = *(unsigned int *)(v55 + 168);
        if ((_DWORD)v57)
        {
          LODWORD(v58) = (v57 - 1) & ((v54 >> 4) ^ (v54 >> 9));
          v59 = (uint64_t ****)(v56 + 16 * v58);
          v60 = *v59;
          if (*v59 != v54)
          {
            v61 = 1;
            while (v60 != (uint64_t ***)-4096)
            {
              v62 = v58 + v61++;
              v58 = v62 & (v57 - 1);
              v60 = *(uint64_t ****)(v56 + 16 * v58);
              if (v60 == v54)
              {
                v59 = (uint64_t ****)(v56 + 16 * v58);
                goto LABEL_62;
              }
            }
            goto LABEL_61;
          }
        }
        else
        {
LABEL_61:
          v59 = (uint64_t ****)(v56 + 16 * v57);
        }
LABEL_62:
        v63 = v59[1];
        v65 = (unint64_t)*v63;
        v51 = (const char *)(v63 + 2);
        v64 = v65;
        result = (llvm::raw_ostream *)*((_QWORD *)v53 + 4);
        if (v65 <= *((_QWORD *)v53 + 3) - (_QWORD)result)
        {
          if (v64)
          {
            result = (llvm::raw_ostream *)memcpy(result, v51, v64);
            *((_QWORD *)v53 + 4) += v64;
          }
          goto LABEL_65;
        }
        v50 = v53;
        v52 = v64;
        goto LABEL_64;
      }
LABEL_72:
      v66 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v66 > 1uLL)
      {
        *v66 = 2570;
        *((_QWORD *)this + 4) += 2;
      }
      else
      {
        result = llvm::raw_ostream::write(this, "\n\n", 2uLL);
      }
      v67 = v19 + 16;
      v19 = v17;
      if (v67 != v17)
      {
        v19 = v67;
        while ((*(_QWORD *)v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v19 += 16;
          if (v19 == v17)
          {
            v19 = v17;
            break;
          }
        }
      }
      if (v19 == v68)
        return result;
    }
    v33 = 1;
    while (v32 != (uint64_t ***)-4096)
    {
      v34 = v30 + v33++;
      v30 = v34 & (v29 - 1);
      v32 = *(uint64_t ****)(v28 + 16 * v30);
      if (v32 == v20)
      {
        v31 = (uint64_t ****)(v28 + 16 * v30);
        goto LABEL_32;
      }
    }
LABEL_31:
    v31 = (uint64_t ****)(v28 + 16 * v29);
    goto LABEL_32;
  }
  return result;
}

void llvm::ValueEnumerator::print(int a1, llvm::raw_ostream *this, uint64_t a3, const char *a4)
{
  uint64_t v7;
  llvm::raw_ostream *v8;
  size_t v9;
  void *v10;
  _BYTE *v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  void *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;

  v7 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v7) > 9)
  {
    *(_WORD *)(v7 + 8) = 8250;
    *(_QWORD *)v7 = *(_QWORD *)"Map Name: ";
    *((_QWORD *)this + 4) += 10;
    v8 = this;
    if (!a4)
      goto LABEL_5;
  }
  else
  {
    v8 = llvm::raw_ostream::write(this, "Map Name: ", 0xAuLL);
    if (!a4)
      goto LABEL_5;
  }
  v9 = strlen(a4);
  v10 = (void *)*((_QWORD *)v8 + 4);
  if (v9 <= *((_QWORD *)v8 + 3) - (_QWORD)v10)
  {
    if (v9)
    {
      memcpy(v10, a4, v9);
      *((_QWORD *)v8 + 4) += v9;
    }
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, a4, v9);
  }
LABEL_5:
  v11 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v11)
  {
    llvm::raw_ostream::write(v8, "\n", 1uLL);
  }
  else
  {
    *v11 = 10;
    ++*((_QWORD *)v8 + 4);
  }
  v12 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v12) > 5)
  {
    *(_WORD *)(v12 + 4) = 8250;
    *(_DWORD *)v12 = 1702521171;
    *((_QWORD *)this + 4) += 6;
    v13 = this;
  }
  else
  {
    v13 = llvm::raw_ostream::write(this, "Size: ", 6uLL);
  }
  sub_1C5E21910(v13, *(unsigned int *)(a3 + 8), 0, 0, 0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if (*((_BYTE **)v13 + 3) == v14)
  {
    llvm::raw_ostream::write(v13, "\n", 1uLL);
  }
  else
  {
    *v14 = 10;
    ++*((_QWORD *)v13 + 4);
  }
  v15 = *(unsigned int *)(a3 + 16);
  v16 = *(_QWORD *)a3 + 16 * v15;
  if (*(_DWORD *)(a3 + 8))
  {
    if ((_DWORD)v15)
    {
      v17 = 16 * v15;
      v18 = *(_QWORD *)a3;
      while ((*(_QWORD *)v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v18 += 16;
        v17 -= 16;
        if (!v17)
          goto LABEL_16;
      }
    }
    else
    {
      v18 = *(_QWORD *)a3;
    }
  }
  else
  {
LABEL_16:
    v18 = *(_QWORD *)a3 + 16 * v15;
  }
  v19 = *(_QWORD *)a3 + 16 * v15;
  while (v18 != v19)
  {
    v20 = *(uint64_t ***)v18;
    v21 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v21) > 0x10)
    {
      *(_BYTE *)(v21 + 16) = 32;
      *(_OWORD *)v21 = *(_OWORD *)"Metadata: slot = ";
      *((_QWORD *)this + 4) += 17;
      v22 = this;
    }
    else
    {
      v22 = llvm::raw_ostream::write(this, "Metadata: slot = ", 0x11uLL);
    }
    sub_1C5E21910(v22, *(unsigned int *)(v18 + 12), 0, 0, 0);
    v23 = (_BYTE *)*((_QWORD *)v22 + 4);
    if (*((_BYTE **)v22 + 3) == v23)
    {
      llvm::raw_ostream::write(v22, "\n", 1uLL);
    }
    else
    {
      *v23 = 10;
      ++*((_QWORD *)v22 + 4);
    }
    v24 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v24 > 0x14uLL)
    {
      qmemcpy(v24, "Metadata: function = ", 21);
      *((_QWORD *)this + 4) += 21;
      v25 = this;
    }
    else
    {
      v25 = llvm::raw_ostream::write(this, "Metadata: function = ", 0x15uLL);
    }
    sub_1C5E21910(v25, *(unsigned int *)(v18 + 8), 0, 0, 0);
    v26 = (_BYTE *)*((_QWORD *)v25 + 4);
    if (*((_BYTE **)v25 + 3) == v26)
    {
      llvm::raw_ostream::write(v25, "\n", 1uLL);
    }
    else
    {
      *v26 = 10;
      ++*((_QWORD *)v25 + 4);
    }
    llvm::Metadata::print(v20, this, 0);
    v27 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v27)
    {
      llvm::raw_ostream::write(this, "\n", 1uLL);
    }
    else
    {
      *v27 = 10;
      ++*((_QWORD *)this + 4);
    }
    v28 = v18 + 16;
    v18 = v16;
    if (v28 != v16)
    {
      v18 = v28;
      while ((*(_QWORD *)v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v18 += 16;
        if (v18 == v16)
        {
          v18 = v16;
          break;
        }
      }
    }
  }
}

BOOL sub_1C5046214(uint64_t **a1)
{
  uint64_t v1;
  int v2;

  v1 = **a1;
  if ((*(_DWORD *)(v1 + 8) & 0xFE) == 0x12)
    v2 = *(unsigned __int8 *)(**(_QWORD **)(v1 + 16) + 8);
  else
    v2 = *(_DWORD *)(v1 + 8);
  return v2 == 13;
}

void llvm::ValueEnumerator::EnumerateNamedMDNode(llvm::ValueEnumerator *this, const llvm::NamedMDNode *a2)
{
  unsigned int NumOperands;
  uint64_t v5;
  uint64_t v6;

  NumOperands = llvm::NamedMDNode::getNumOperands(a2);
  if (NumOperands)
  {
    v5 = 0;
    v6 = 8 * NumOperands;
    do
    {
      llvm::ValueEnumerator::EnumerateMetadata((uint64_t *)this, 0, *(const llvm::Value ***)(**((_QWORD **)a2 + 6) + v5));
      v5 += 8;
    }
    while (v6 != v5);
  }
}

uint64_t llvm::ValueEnumerator::getMetadataFunctionID(llvm::ValueEnumerator *this, const Function *a2)
{
  if (a2)
    return llvm::ValueEnumerator::getValueID((uint64_t)this, (uint64_t)a2) + 1;
  else
    return 0;
}

void llvm::ValueEnumerator::EnumerateMetadata(uint64_t *a1, unsigned int a2, const llvm::Value **a3)
{
  const llvm::Value **v5;
  const llvm::Value **v6;
  _QWORD *v7;
  unsigned int v8;
  char *v9;
  const llvm::Value ***v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  const llvm::Value **v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  const llvm::Value ***v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[512];
  void *v39;
  uint64_t v40;
  _QWORD v41[34];

  v41[32] = *MEMORY[0x1E0C80C00];
  v39 = v41;
  v40 = 0x2000000000;
  v36 = v38;
  v37 = 0x2000000000;
  v5 = llvm::ValueEnumerator::enumerateMetadataImpl(a1, a2, a3);
  if (v5)
  {
    v6 = &v5[-*((unsigned int *)v5 + 2)];
    v7 = v36;
    *(_QWORD *)v36 = v5;
    v7[1] = v6;
    v8 = v37 + 1;
    LODWORD(v37) = v8;
    if (v8)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            v9 = (char *)v36 + 16 * v8;
            v11 = *((_QWORD *)v9 - 2);
            v10 = (const llvm::Value ***)*((_QWORD *)v9 - 1);
            if (v10 != (const llvm::Value ***)v11)
              break;
LABEL_9:
            LODWORD(v37) = v8 - 1;
            v13 = (_QWORD *)a1[22];
            v12 = a1[23];
            if ((unint64_t)v13 >= v12)
            {
              v15 = (_QWORD *)a1[21];
              v16 = v13 - v15;
              v17 = v16 + 1;
              if ((unint64_t)(v16 + 1) >> 61)
                abort();
              v18 = v12 - (_QWORD)v15;
              if (v18 >> 2 > v17)
                v17 = v18 >> 2;
              if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
                v19 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v19 = v17;
              if (v19)
              {
                if (v19 >> 61)
                  sub_1C4764EE4();
                v20 = (char *)operator new(8 * v19);
              }
              else
              {
                v20 = 0;
              }
              v26 = &v20[8 * v16];
              *(_QWORD *)v26 = v11;
              v14 = v26 + 8;
              if (v13 != v15)
              {
                do
                {
                  v27 = *--v13;
                  *((_QWORD *)v26 - 1) = v27;
                  v26 -= 8;
                }
                while (v13 != v15);
                v13 = (_QWORD *)a1[21];
              }
              a1[21] = (uint64_t)v26;
              a1[22] = (uint64_t)v14;
              a1[23] = (uint64_t)&v20[8 * v19];
              if (v13)
                operator delete(v13);
            }
            else
            {
              *v13 = v11;
              v14 = v13 + 1;
            }
            a1[22] = (uint64_t)v14;
            v28 = ((unint64_t)v14 - a1[21]) >> 3;
            v35 = v11;
            *((_DWORD *)sub_1C504A298(a1 + 27, &v35) + 3) = v28;
            v8 = v37;
            if (!(_DWORD)v37 || (*(_BYTE *)(*((_QWORD *)v36 + 2 * v37 - 2) + 1) & 0x7F) == 1)
            {
              if ((_DWORD)v40)
              {
                v29 = (char *)v39;
                v30 = 8 * v40;
                do
                {
                  v31 = *(_QWORD *)v29;
                  v32 = *(unsigned int *)(*(_QWORD *)v29 + 8);
                  if (v8 >= HIDWORD(v37))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v8 + 1, 16);
                    v8 = v37;
                  }
                  v33 = (char *)v36 + 16 * v8;
                  *v33 = v31;
                  v33[1] = v31 - 8 * v32;
                  v8 = v37 + 1;
                  LODWORD(v37) = v37 + 1;
                  v29 += 8;
                  v30 -= 8;
                }
                while (v30);
              }
              LODWORD(v40) = 0;
            }
            if (!v8)
              goto LABEL_45;
          }
          while (!llvm::ValueEnumerator::enumerateMetadataImpl(a1, a2, *v10))
          {
            if (++v10 == (const llvm::Value ***)v11)
            {
              v8 = v37;
              goto LABEL_9;
            }
          }
          v21 = *v10;
          v22 = (char *)v36;
          v23 = v37;
          *((_QWORD *)v36 + 2 * v37 - 1) = v10 + 1;
          if ((*((_BYTE *)v21 + 1) & 0x7F) == 1 && (*(_BYTE *)(v11 + 1) & 0x7F) != 1)
            break;
          v24 = *((unsigned int *)v21 + 2);
          if (v23 >= HIDWORD(v37))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v23 + 1, 16);
            v22 = (char *)v36;
            v23 = v37;
          }
          v25 = (const llvm::Value ***)&v22[16 * v23];
          *v25 = v21;
          v25[1] = &v21[-v24];
          v8 = v37 + 1;
          LODWORD(v37) = v8;
          if (!v8)
            goto LABEL_45;
        }
        v34 = v40;
        if (v40 >= (unint64_t)HIDWORD(v40))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v40 + 1, 8);
          v34 = v40;
        }
        *((_QWORD *)v39 + v34) = v21;
        LODWORD(v40) = v40 + 1;
        v8 = v37;
      }
      while ((_DWORD)v37);
    }
  }
LABEL_45:
  if (v36 != v38)
    free(v36);
  if (v39 != v41)
    free(v39);
}

void llvm::ValueEnumerator::EnumerateFunctionLocalMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;

  v5 = llvm::ValueEnumerator::getValueID(a1, a2) + 1;
  llvm::ValueEnumerator::EnumerateFunctionLocalMetadata(a1, v5, a3);
}

_QWORD *llvm::ValueEnumerator::EnumerateFunctionLocalListMetadata(llvm::ValueEnumerator *this, const llvm::Function *a2, const llvm::Value ****a3)
{
  unsigned int v5;

  v5 = llvm::ValueEnumerator::getValueID((uint64_t)this, (uint64_t)a2) + 1;
  return llvm::ValueEnumerator::EnumerateFunctionLocalListMetadata(this, v5, a3);
}

void llvm::ValueEnumerator::dropFunctionFromMetadata(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD v17[65];

  v17[64] = *MEMORY[0x1E0C80C00];
  v14 = v17;
  v16 = 64;
  if (*((_DWORD *)a2 + 2))
  {
    *((_DWORD *)a2 + 2) = 0;
    if (*((_DWORD *)a2 + 3))
    {
      if (**a2 - 4 <= 0x1E)
      {
        v17[0] = *a2;
        v3 = (uint64_t *)(a1 + 216);
        v4 = 1;
        do
        {
          v5 = *((_QWORD *)v14 + --v4);
          v15 = v4;
          v6 = *(unsigned int *)(v5 + 8);
          if ((_DWORD)v6)
          {
            v7 = -8 * v6;
            do
            {
              if (*(_QWORD *)(v5 + v7))
              {
                v12 = *(_QWORD *)(v5 + v7);
                v13 = 0;
                v8 = sub_1C4E36534(v3, &v12, &v13);
                v9 = v13;
                if ((v8 & 1) == 0)
                  v9 = (unsigned __int8 **)(*(_QWORD *)(a1 + 216) + 16 * *(unsigned int *)(a1 + 232));
                if (v9 != (unsigned __int8 **)(*(_QWORD *)(a1 + 216) + 16 * *(unsigned int *)(a1 + 232)))
                {
                  if (*((_DWORD *)v9 + 2))
                  {
                    *((_DWORD *)v9 + 2) = 0;
                    if (*((_DWORD *)v9 + 3))
                    {
                      v10 = *v9;
                      if (**v9 - 4 <= 0x1E)
                      {
                        v11 = v15;
                        if (v15 >= (unint64_t)v16)
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v17, v15 + 1, 8);
                          v11 = v15;
                        }
                        *((_QWORD *)v14 + v11) = v10;
                        ++v15;
                      }
                    }
                  }
                }
              }
              v7 += 8;
            }
            while (v7);
            v4 = v15;
          }
        }
        while (v4);
        if (v14 != v17)
          free(v14);
      }
    }
  }
}

const llvm::Value **llvm::ValueEnumerator::enumerateMetadataImpl(uint64_t *a1, unsigned int a2, const llvm::Value **a3)
{
  const llvm::Value **v3;
  uint64_t v6;
  int v7;
  BOOL v8;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  const llvm::Value ***v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  const llvm::Value ***v22;
  const llvm::Value **v23;
  const llvm::Value **v24;
  uint64_t v25;
  _QWORD *v26;

  v3 = a3;
  if (a3)
  {
    v6 = (uint64_t)(a1 + 27);
    v24 = a3;
    v25 = a2;
    v26 = 0;
    if (sub_1C4E36534(a1 + 27, &v24, &v26))
    {
      v7 = *((_DWORD *)v26 + 2);
      if (v7)
        v8 = v7 == a2;
      else
        v8 = 1;
      if (!v8)
        llvm::ValueEnumerator::dropFunctionFromMetadata((uint64_t)a1, (unsigned __int8 **)v26);
    }
    else
    {
      v10 = sub_1C504A2F4(v6, &v24, v26);
      *v10 = v24;
      v10[1] = v25;
      v11 = *(unsigned __int8 *)v3;
      if ((v11 - 4) < 0x1F)
        return v3;
      v12 = v10;
      v14 = (const llvm::Value ***)a1[22];
      v13 = a1[23];
      if ((unint64_t)v14 >= v13)
      {
        v16 = (_QWORD *)a1[21];
        v17 = v14 - (const llvm::Value ***)v16;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          abort();
        v19 = v13 - (_QWORD)v16;
        if (v19 >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          if (v20 >> 61)
            sub_1C4764EE4();
          v21 = (char *)operator new(8 * v20);
        }
        else
        {
          v21 = 0;
        }
        v22 = (const llvm::Value ***)&v21[8 * v17];
        *v22 = v3;
        v15 = v22 + 1;
        if (v14 != v16)
        {
          do
          {
            v23 = *--v14;
            *--v22 = v23;
          }
          while (v14 != v16);
          v14 = (const llvm::Value ***)a1[21];
        }
        a1[21] = (uint64_t)v22;
        a1[22] = (uint64_t)v15;
        a1[23] = (uint64_t)&v21[8 * v20];
        if (v14)
        {
          operator delete(v14);
          v11 = *(unsigned __int8 *)v3;
        }
      }
      else
      {
        *v14 = v3;
        v15 = v14 + 1;
      }
      a1[22] = (uint64_t)v15;
      *((_DWORD *)v12 + 3) = ((unint64_t)v15 - a1[21]) >> 3;
      if (v11 == 1)
        llvm::ValueEnumerator::EnumerateValue((llvm::ValueEnumerator *)a1, v3[16]);
    }
    return 0;
  }
  return v3;
}

void llvm::ValueEnumerator::incorporateFunctionMetadata(llvm::ValueEnumerator *this, const llvm::Function *a2)
{
  char *v3;
  int ValueID;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  char *v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  uint64_t *__src;
  uint64_t v40;

  *((_DWORD *)this + 113) = (*((_QWORD *)this + 22) - *((_QWORD *)this + 21)) >> 3;
  v3 = (char *)this + 240;
  ValueID = llvm::ValueEnumerator::getValueID((uint64_t)this, (uint64_t)a2);
  v40 = 0;
  if (sub_1C504C71C((uint64_t)v3, ValueID + 1, &v40))
  {
    v6 = *(_QWORD *)(v40 + 4);
    v5 = *(_DWORD *)(v40 + 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  *((_DWORD *)this + 114) = v5;
  v7 = HIDWORD(v6);
  v8 = HIDWORD(v6) - v6;
  if (v8 < 1)
    return;
  v10 = *((_QWORD *)this + 23);
  v9 = *((_QWORD *)this + 24);
  v11 = (char *)(v9 + 8 * v6);
  v13 = *((_QWORD *)this + 21);
  v12 = (uint64_t *)*((_QWORD *)this + 22);
  v14 = (uint64_t)v12 - v13;
  v15 = v13 + (((unint64_t)v12 - v13) & 0xFFFFFFFFFFFFFFF8);
  if (v8 > (v10 - (uint64_t)v12) >> 3)
  {
    __src = (uint64_t *)(v13 + (((unint64_t)v12 - v13) & 0xFFFFFFFFFFFFFFF8));
    v16 = v14 >> 3;
    v17 = (v14 >> 3) + v8;
    if (v17 >> 61)
      abort();
    v18 = v10 - v13;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        sub_1C4764EE4();
      v20 = (char *)operator new(8 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = v6;
    v22 = &v20[8 * v16];
    v23 = &v22[8 * v8];
    v24 = v22;
    v25 = 8 * v7 - 8 * v21;
    do
    {
      v26 = *(_QWORD *)v11;
      v11 += 8;
      *(_QWORD *)v24 = v26;
      v24 += 8;
      v25 -= 8;
    }
    while (v25);
    if ((unint64_t)v14 >= 8)
    {
      v27 = 8 * v16;
      do
      {
        *(_QWORD *)&v20[v27 - 8] = *(_QWORD *)(v13 - 8 + v27);
        v27 -= 8;
      }
      while (v27);
      v12 = (uint64_t *)*((_QWORD *)this + 22);
      v22 = v20;
    }
    v28 = &v20[8 * v19];
    if (v12 != __src)
      memmove(v23, __src, (char *)v12 - (char *)__src);
    v29 = (void *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v22;
    *((_QWORD *)this + 22) = &v23[(char *)v12 - (char *)__src];
    *((_QWORD *)this + 23) = v28;
    if (v29)
      operator delete(v29);
    return;
  }
  v30 = (char *)(v9 + 8 * v7);
  v31 = ((uint64_t)v12 - v15) >> 3;
  if (v31 >= v8)
  {
    v34 = (char *)*((_QWORD *)this + 22);
    v32 = v30;
LABEL_31:
    v35 = (char *)(v15 + 8 * v8);
    v36 = (uint64_t *)&v34[-8 * v8];
    v37 = v34;
    if (v36 < v12)
    {
      v37 = v34;
      do
      {
        v38 = *v36++;
        *(_QWORD *)v37 = v38;
        v37 += 8;
      }
      while (v36 < v12);
    }
    *((_QWORD *)this + 22) = v37;
    if (v34 != v35)
      memmove(&v34[-8 * ((v34 - v35) >> 3)], (const void *)(v13 + (((unint64_t)v12 - v13) & 0xFFFFFFFFFFFFFFF8)), v34 - v35);
    if (v32 != v11)
      memmove((void *)(v13 + (((unint64_t)v12 - v13) & 0xFFFFFFFFFFFFFFF8)), v11, v32 - v11);
    return;
  }
  v32 = &v11[8 * v31];
  v33 = v30 - v32;
  if (v30 != v32)
    memmove(*((void **)this + 22), &v11[8 * v31], v30 - v32);
  v34 = (char *)v12 + v33;
  *((_QWORD *)this + 22) = (char *)v12 + v33;
  if ((uint64_t)v12 - v15 >= 1)
    goto LABEL_31;
}

void llvm::ValueEnumerator::incorporateFunction(llvm::ValueEnumerator *this, const llvm::Function *a2)
{
  const llvm::Function *v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::AttributeList *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Type *ParamByValType;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  char *v23;
  char *i;
  char *v25;
  int v26;
  uint64_t v27;
  const llvm::Value **v28;
  uint64_t v29;
  int v30;
  unint64_t v32;
  char **v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  BOOL v53;
  unsigned __int8 *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int ValueID;
  const llvm::Value *****v67;
  uint64_t v68;
  const llvm::Value ****v69;
  int v70;
  uint64_t v71;
  char *v72;
  void *v73;
  uint64_t v74;
  _BYTE v75[64];
  void *v76;
  uint64_t v77;
  _QWORD v78[10];

  v2 = a2;
  v78[8] = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 104) = 0;
  *((_DWORD *)this + 112) = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 4;
  llvm::ValueEnumerator::incorporateFunctionMetadata(this, a2);
  v4 = sub_1C485F330((uint64_t)v2);
  if (v4 != v5)
  {
    v7 = v4;
    v8 = v5;
    do
    {
      llvm::ValueEnumerator::EnumerateValue(this, (const llvm::Value *)v7);
      v9 = *(_QWORD *)(v7 + 24);
      v12 = *(_QWORD *)(v9 + 112);
      v10 = (llvm::AttributeList *)(v9 + 112);
      v11 = v12;
      if (!v12)
        goto LABEL_5;
      v13 = *(_DWORD *)(v7 + 32);
      v14 = (v13 + 2);
      if (v14 >= *(_DWORD *)(v11 + 8))
        goto LABEL_5;
      v15 = v11 + 40;
      v16 = *(_QWORD *)(v15 + 8 * v14);
      if (v16 && (*(_BYTE *)(v16 + 20) & 0x20) != 0)
      {
        ParamByValType = (llvm::Type *)llvm::AttributeList::getParamByValType(v10, v13);
      }
      else
      {
        v17 = *(_QWORD *)(v15 + 8 * v14);
        if (v17 && (*(_BYTE *)(v17 + 21) & 2) != 0)
        {
          ParamByValType = (llvm::Type *)llvm::AttributeList::getParamStructRetType(v10, v13);
        }
        else
        {
          v18 = *(_QWORD *)(v15 + 8 * v14);
          if (!v18 || (*(_BYTE *)(v18 + 20) & 0x10) == 0)
            goto LABEL_5;
          ParamByValType = (llvm::Type *)llvm::AttributeList::getParamByRefType(v10, v13);
        }
      }
      llvm::ValueEnumerator::EnumerateType(this, ParamByValType);
LABEL_5:
      v7 += 40;
    }
    while (v7 != v8);
  }
  v20 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 4;
  *((_DWORD *)this + 115) = v20;
  v21 = (char *)*((_QWORD *)v2 + 10);
  v22 = v20;
  v72 = (char *)v2 + 72;
  v71 = (uint64_t)v2;
  if (v21 == (char *)v2 + 72)
    goto LABEL_60;
  do
  {
    if (v21)
      v23 = v21 - 24;
    else
      v23 = 0;
    for (i = (char *)*((_QWORD *)v23 + 6); i != v23 + 40; i = (char *)*((_QWORD *)i + 1))
    {
      if (i)
        v25 = i - 24;
      else
        v25 = 0;
      v26 = *((_DWORD *)v25 + 5);
      if ((v26 & 0x40000000) != 0)
      {
        v28 = (const llvm::Value **)*((_QWORD *)v25 - 1);
        v27 = v26 & 0x7FFFFFF;
        if (!v27)
          goto LABEL_37;
      }
      else
      {
        v27 = v26 & 0x7FFFFFF;
        v28 = (const llvm::Value **)&v25[-32 * v27];
        if (!v27)
          goto LABEL_37;
      }
      v29 = 32 * v27;
      do
      {
        v30 = *((unsigned __int8 *)*v28 + 16);
        if (v30 == 24 || (v30 - 4) <= 0x10)
          llvm::ValueEnumerator::EnumerateValue(this, *v28);
        v28 += 4;
        v29 -= 32;
      }
      while (v29);
LABEL_37:
      if (i)
      {
        if (v25[16] == 91)
          llvm::ValueEnumerator::EnumerateValue(this, *((const llvm::Value **)v25 + 12));
      }
    }
    v33 = (char **)*((_QWORD *)this + 54);
    v32 = *((_QWORD *)this + 55);
    if ((unint64_t)v33 >= v32)
    {
      v35 = (_QWORD *)*((_QWORD *)this + 53);
      v36 = v33 - (char **)v35;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 61)
        abort();
      v38 = v32 - (_QWORD)v35;
      if (v38 >> 2 > v37)
        v37 = v38 >> 2;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
      {
        if (v39 >> 61)
          sub_1C4764EE4();
        v40 = (char *)operator new(8 * v39);
      }
      else
      {
        v40 = 0;
      }
      v41 = &v40[8 * v36];
      *(_QWORD *)v41 = v23;
      v34 = v41 + 8;
      if (v33 != v35)
      {
        do
        {
          v42 = (uint64_t)*--v33;
          *((_QWORD *)v41 - 1) = v42;
          v41 -= 8;
        }
        while (v33 != v35);
        v33 = (char **)*((_QWORD *)this + 53);
      }
      *((_QWORD *)this + 53) = v41;
      *((_QWORD *)this + 54) = v34;
      *((_QWORD *)this + 55) = &v40[8 * v39];
      if (v33)
        operator delete(v33);
    }
    else
    {
      *v33 = v23;
      v34 = v33 + 1;
    }
    *((_QWORD *)this + 54) = v34;
    v43 = ((unint64_t)v34 - *((_QWORD *)this + 53)) >> 3;
    v76 = v23;
    *((_DWORD *)sub_1C504CE94((uint64_t)this + 72, (uint64_t *)&v76) + 2) = v43;
    v21 = (char *)*((_QWORD *)v21 + 1);
  }
  while (v21 != v72);
  v22 = *((_DWORD *)this + 115);
  v20 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 4;
  v2 = (const llvm::Function *)v71;
LABEL_60:
  llvm::ValueEnumerator::OptimizeConstants(this, v22, v20, v6);
  llvm::ValueEnumerator::EnumerateAttributes((uint64_t)this, *((_QWORD *)v2 + 14));
  *((_DWORD *)this + 116) = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 4;
  v76 = v78;
  v77 = 0x800000000;
  v73 = v75;
  v74 = 0x800000000;
  v44 = *((_QWORD *)v2 + 10);
  if ((char *)v44 != v72)
  {
    do
    {
      v45 = v44 - 24;
      if (!v44)
        v45 = 0;
      v46 = v45 + 40;
      for (j = *(_QWORD *)(v45 + 48); j != v46; j = *(_QWORD *)(j + 8))
      {
        if (j)
          v48 = (_DWORD *)(j - 24);
        else
          v48 = 0;
        v49 = v48[5];
        if ((v49 & 0x40000000) != 0)
        {
          v51 = (_DWORD *)*((_QWORD *)v48 - 1);
          v50 = v49 & 0x7FFFFFF;
        }
        else
        {
          v50 = v49 & 0x7FFFFFF;
          v51 = &v48[-8 * v50];
        }
        v52 = &v51[8 * v50];
        if (v50)
        {
          do
          {
            if (*(_QWORD *)v51)
              v53 = *(_BYTE *)(*(_QWORD *)v51 + 16) == 23;
            else
              v53 = 0;
            if (v53)
            {
              v54 = *(unsigned __int8 **)(*(_QWORD *)v51 + 24);
              v55 = *v54;
              if (v55 == 32)
              {
                v57 = v74;
                if (v74 >= (unint64_t)HIDWORD(v74))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, (uint64_t)v75, v74 + 1, 8);
                  v57 = v74;
                }
                *((_QWORD *)v73 + v57) = v54;
                LODWORD(v74) = v74 + 1;
                v58 = *((unsigned int *)v54 + 8);
                if ((_DWORD)v58)
                {
                  v59 = (_QWORD *)*((_QWORD *)v54 + 3);
                  v60 = 8 * v58;
                  do
                  {
                    v61 = (_BYTE *)*v59;
                    if (*(_BYTE *)*v59 == 2)
                    {
                      v62 = v77;
                      if (v77 >= (unint64_t)HIDWORD(v77))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, (uint64_t)v78, v77 + 1, 8);
                        v62 = v77;
                      }
                      *((_QWORD *)v76 + v62) = v61;
                      LODWORD(v77) = v77 + 1;
                    }
                    ++v59;
                    v60 -= 8;
                  }
                  while (v60);
                }
              }
              else if (v55 == 2)
              {
                v56 = v77;
                if (v77 >= (unint64_t)HIDWORD(v77))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, (uint64_t)v78, v77 + 1, 8);
                  v56 = v77;
                }
                *((_QWORD *)v76 + v56) = v54;
                LODWORD(v77) = v77 + 1;
              }
            }
            v51 += 8;
          }
          while (v51 != v52);
        }
        if (*(_BYTE *)(*(_QWORD *)v48 + 8) != 7)
          llvm::ValueEnumerator::EnumerateValue(this, (const llvm::Value *)v48);
      }
      v44 = *(_QWORD *)(v44 + 8);
    }
    while ((char *)v44 != v72);
    if ((_DWORD)v77)
    {
      v63 = 0;
      v64 = 8 * v77;
      do
      {
        v65 = *(_QWORD *)((char *)v76 + v63);
        ValueID = llvm::ValueEnumerator::getValueID((uint64_t)this, v71);
        llvm::ValueEnumerator::EnumerateFunctionLocalMetadata((uint64_t)this, ValueID + 1, v65);
        v63 += 8;
      }
      while (v64 != v63);
    }
    v67 = (const llvm::Value *****)v73;
    if ((_DWORD)v74)
    {
      v68 = 8 * v74;
      do
      {
        v69 = *v67++;
        v70 = llvm::ValueEnumerator::getValueID((uint64_t)this, v71);
        llvm::ValueEnumerator::EnumerateFunctionLocalListMetadata(this, v70 + 1, v69);
        v68 -= 8;
      }
      while (v68);
      v67 = (const llvm::Value *****)v73;
    }
    if (v67 != (const llvm::Value *****)v75)
      free(v67);
  }
  if (v76 != v78)
    free(v76);
}

void llvm::ValueEnumerator::purgeFunction(llvm::ValueEnumerator *this)
{
  void **v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t i;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;

  v2 = (void **)((char *)this + 96);
  v3 = *((_DWORD *)this + 112);
  v4 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 4;
  if (v3 != (_DWORD)v4)
  {
    v5 = *((_DWORD *)this + 22);
    v6 = v5 - 1;
    do
    {
      if (v5)
      {
        v7 = *((_QWORD *)this + 9);
        v8 = *((_QWORD *)*v2 + 2 * v3);
        LODWORD(v9) = ((v8 >> 4) ^ (v8 >> 9)) & v6;
        v10 = (uint64_t *)(v7 + 16 * v9);
        v11 = *v10;
        if (v8 == *v10)
        {
LABEL_9:
          *v10 = -8192;
          *((int32x2_t *)this + 10) = vadd_s32(*(int32x2_t *)((char *)this + 80), (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          v12 = 1;
          while (v11 != -4096)
          {
            v13 = v9 + v12++;
            v9 = v13 & v6;
            v11 = *(_QWORD *)(v7 + 16 * v9);
            if (v8 == v11)
            {
              v10 = (uint64_t *)(v7 + 16 * v9);
              goto LABEL_9;
            }
          }
        }
      }
      ++v3;
    }
    while (v3 != (_DWORD)v4);
  }
  v14 = (_QWORD *)((char *)this + 168);
  v15 = *((_DWORD *)this + 113);
  for (i = (*((_QWORD *)this + 22) - *((_QWORD *)this + 21)) >> 3; (_DWORD)i != v15; ++v15)
  {
    v17 = (_QWORD *)(*v14 + 8 * v15);
    v34 = 0;
    if (sub_1C4E36534((uint64_t *)this + 27, v17, &v34))
    {
      *v34 = -8192;
      *((int32x2_t *)this + 28) = vadd_s32(*(int32x2_t *)((char *)this + 224), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  v18 = (_QWORD *)*((_QWORD *)this + 53);
  v19 = (_QWORD *)*((_QWORD *)this + 54);
  if (v18 != v19)
  {
    v20 = *((_DWORD *)this + 22);
    v21 = v20 - 1;
    do
    {
      if (v20)
      {
        v22 = *((_QWORD *)this + 9);
        LODWORD(v23) = ((*v18 >> 4) ^ (*v18 >> 9)) & v21;
        v24 = (uint64_t *)(v22 + 16 * v23);
        v25 = *v24;
        if (*v18 == *v24)
        {
LABEL_23:
          *v24 = -8192;
          *((int32x2_t *)this + 10) = vadd_s32(*(int32x2_t *)((char *)this + 80), (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          v26 = 1;
          while (v25 != -4096)
          {
            v27 = v23 + v26++;
            v23 = v27 & v21;
            v25 = *(_QWORD *)(v22 + 16 * v23);
            if (*v18 == v25)
            {
              v24 = (uint64_t *)(v22 + 16 * v23);
              goto LABEL_23;
            }
          }
        }
      }
      ++v18;
    }
    while (v18 != v19);
  }
  v28 = *((unsigned int *)this + 112);
  v29 = *((_QWORD *)this + 12);
  v30 = (*((_QWORD *)this + 13) - v29) >> 4;
  if (v28 > v30)
  {
    sub_1C504CF50(v2, v28 - v30);
  }
  else if (v28 < v30)
  {
    *((_QWORD *)this + 13) = v29 + 16 * v28;
  }
  v31 = *((unsigned int *)this + 113);
  v32 = *((_QWORD *)this + 21);
  v33 = (*((_QWORD *)this + 22) - v32) >> 3;
  if (v31 > v33)
  {
    sub_1C50100A0((char **)this + 21, v31 - v33);
  }
  else if (v31 < v33)
  {
    *((_QWORD *)this + 22) = v32 + 8 * v31;
  }
  *((_QWORD *)this + 54) = *((_QWORD *)this + 53);
  *((_DWORD *)this + 114) = 0;
}

void sub_1C50474C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  _QWORD *i;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = a1;
  v14 = a1;
  for (i = sub_1C61D3534(a3, &v14); !*((_BYTE *)i + 12); i = sub_1C61D3534(a3, &v14))
  {
    *((_BYTE *)i + 12) = 1;
    v9 = *(_QWORD *)(v7 + 8);
    if (v9 && *(_QWORD *)(v9 + 8))
      sub_1C50476F0(v7, a2, *((_DWORD *)i + 2), a3, a4);
    if (*(unsigned __int8 *)(v7 + 16) > 0x14u)
      break;
    v10 = *(_DWORD *)(v7 + 20);
    v11 = v10 & 0x7FFFFFF;
    if ((v10 & 0x7FFFFFF) == 0)
      break;
    if ((v10 & 0x40000000) != 0)
    {
      v12 = *(_QWORD *)(v7 - 8);
    }
    else
    {
      v11 = v11;
      v12 = v7 - 32 * v11;
    }
    v13 = 32 * v11;
    do
    {
      if (*(unsigned __int8 *)(*(_QWORD *)v12 + 16) <= 0x14u)
        sub_1C50474C4();
      v12 += 32;
      v13 -= 32;
    }
    while (v13);
    if (*(_BYTE *)(v7 + 16) != 5)
      break;
    if (*(_WORD *)(v7 + 18) != 63)
      break;
    v7 = *(_QWORD *)(v7 + 56);
    v14 = v7;
  }
}

uint64_t sub_1C50475E8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v12;
  uint64_t v13;

  v13 = 0;
  result = sub_1C6144BDC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a1, &v13);
  if ((result & 1) == 0 || !*(_DWORD *)(v13 + 8))
  {
    if (a1)
    {
      v5 = *(unsigned __int8 *)(a1 + 16);
      if (v5 <= 0x14 && v5 >= 4)
      {
        v6 = *(_DWORD *)(a1 + 20);
        v7 = v6 & 0x7FFFFFF;
        if ((v6 & 0x7FFFFFF) != 0)
        {
          if ((v6 & 0x40000000) != 0)
          {
            v8 = *(_QWORD *)(a1 - 8);
          }
          else
          {
            v7 = v7;
            v8 = a1 - 32 * v7;
          }
          v9 = 32 * v7;
          do
          {
            v10 = *(unsigned __int8 *)(*(_QWORD *)v8 + 16);
            if (v10 >= 4 && v10 != 22)
              ((void (*)(void))sub_1C50475E8)();
            v8 += 32;
            v9 -= 32;
          }
          while (v9);
          if (*(_BYTE *)(a1 + 16) == 5 && *(_WORD *)(a1 + 18) == 63)
            sub_1C50475E8(*(_QWORD *)(a1 + 56), a2);
        }
      }
    }
    v13 = a1;
    v12 = *(_DWORD *)(a2 + 8) + 1;
    result = (uint64_t)sub_1C61D3534(a2, &v13);
    *(_DWORD *)(result + 8) = v12;
  }
  return result;
}

void sub_1C50476F0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26[3];
  void *v27;
  uint64_t v28;
  _QWORD v29[129];

  v29[128] = *MEMORY[0x1E0C80C00];
  v25 = a3;
  v27 = v29;
  v28 = 0x4000000000;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    do
    {
      v11 = *(_QWORD *)(v5 + 24);
      v26[0] = 0;
      if ((sub_1C6144BDC(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), v11, v26) & 1) != 0 && *(_DWORD *)(v26[0] + 8))
      {
        v12 = v28;
        v13 = v28;
        if (v28 >= HIDWORD(v28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 16);
          v13 = v28;
        }
        v14 = (char *)v27 + 16 * v13;
        *v14 = v5;
        v14[1] = v12;
        LODWORD(v28) = v28 + 1;
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
    v15 = v27;
    if (v28 >= 2)
    {
      v16 = *(_DWORD *)(a4 + 28) < a3 || *(_DWORD *)(a4 + 24) >= a3;
      v17 = !v16;
      v24 = v17;
      v26[0] = a4;
      v26[1] = (uint64_t)&v25;
      v26[2] = (uint64_t)&v24;
      sub_1C50478E4((uint64_t)v27, (unint64_t)v27 + 16 * v28, v26, 126 - 2 * __clz(v28), 1);
      v15 = v27;
      if ((_DWORD)v28)
      {
        v18 = 0;
        while (16 * v28 - 16 != v18)
        {
          v19 = *(_DWORD *)((char *)v27 + v18 + 24);
          v20 = *(_DWORD *)((char *)v27 + v18 + 8);
          v18 += 16;
          if (v19 < v20)
          {
            sub_1C61D35A4(a5, a1, a2, v28);
            v15 = v27;
            if ((_DWORD)v28)
            {
              v21 = 0;
              v22 = *(_QWORD *)(a5[1] - 24);
              v23 = 4 * v28;
              do
              {
                *(_DWORD *)(v22 + v21) = v15[v21 + 2];
                v21 += 4;
              }
              while (v23 != v21);
            }
            break;
          }
        }
      }
    }
    if (v15 != (_DWORD *)v29)
      free(v15);
  }
}

uint64_t sub_1C50478E4(uint64_t result, unint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _DWORD *v77;
  _DWORD *v78;
  int v79;
  unint64_t v80;
  uint64_t *v81;
  int v82;
  int v83;
  int64_t v85;
  uint64_t v86;

  v8 = result;
LABEL_2:
  v81 = (uint64_t *)(a2 - 16);
  v9 = v8;
  while (2)
  {
    v8 = v9;
    v10 = a2 - v9;
    v11 = (uint64_t)(a2 - v9) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_1C5048100(a3, *(_QWORD *)(a2 - 16), *(_QWORD *)v8);
        if ((_DWORD)result)
        {
          v37 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v37;
          LODWORD(v37) = *(_DWORD *)(v8 + 8);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v37;
        }
        return result;
      case 3:
        return sub_1C5048400(v8, v8 + 16, (uint64_t)v81, a3);
      case 4:
        return sub_1C50486F4(v8, v8 + 16, v8 + 32, (uint64_t)v81, a3);
      case 5:
        return sub_1C50482E8(v8, v8 + 16, v8 + 32, v8 + 48, (uint64_t)v81, a3);
      default:
        if (v10 <= 383)
        {
          v38 = v8 + 16;
          v40 = v8 == a2 || v38 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v40)
            {
              v41 = 0;
              v42 = v8;
              do
              {
                v43 = *(_QWORD *)(v42 + 16);
                v44 = *(_QWORD *)v42;
                v42 = v38;
                result = sub_1C5048100(a3, v43, v44);
                if ((_DWORD)result)
                {
                  v45 = *(_QWORD *)v42;
                  v46 = *(_DWORD *)(v42 + 8);
                  v47 = v41;
                  while (1)
                  {
                    v48 = v8 + v47;
                    *(_QWORD *)(v48 + 16) = *(_QWORD *)(v8 + v47);
                    *(_DWORD *)(v48 + 24) = *(_DWORD *)(v8 + v47 + 8);
                    if (!v47)
                      break;
                    result = sub_1C5048100(a3, v45, *(_QWORD *)(v48 - 16));
                    v47 -= 16;
                    if ((result & 1) == 0)
                    {
                      v49 = v8 + v47 + 16;
                      goto LABEL_72;
                    }
                  }
                  v49 = v8;
LABEL_72:
                  *(_QWORD *)v49 = v45;
                  *(_DWORD *)(v49 + 8) = v46;
                }
                v38 = v42 + 16;
                v41 += 16;
              }
              while (v42 + 16 != a2);
            }
          }
          else if (!v40)
          {
            v72 = (_DWORD *)(v8 + 24);
            do
            {
              v73 = *(_QWORD *)(v8 + 16);
              v74 = *(_QWORD *)v8;
              v8 = v38;
              result = sub_1C5048100(a3, v73, v74);
              if ((_DWORD)result)
              {
                v75 = *(_QWORD *)v8;
                v76 = *(_DWORD *)(v8 + 8);
                v77 = v72;
                do
                {
                  v78 = v77;
                  *((_QWORD *)v77 - 1) = *((_QWORD *)v77 - 3);
                  v79 = *(v77 - 4);
                  v77 -= 4;
                  *v78 = v79;
                  result = sub_1C5048100(a3, v75, *((_QWORD *)v78 - 5));
                }
                while ((result & 1) != 0);
                *((_QWORD *)v77 - 1) = v75;
                *v77 = v76;
              }
              v38 = v8 + 16;
              v72 += 4;
            }
            while (v8 + 16 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != a2)
          {
            v80 = a2;
            v50 = (unint64_t)(v11 - 2) >> 1;
            v85 = v50;
            do
            {
              v51 = v50;
              if (v85 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = v8 + 16 * v52;
                if (2 * v50 + 2 < v11 && sub_1C5048100(a3, *(_QWORD *)v53, *(_QWORD *)(v53 + 16)))
                {
                  v53 += 16;
                  v52 = 2 * v51 + 2;
                }
                v54 = v8 + 16 * v51;
                result = sub_1C5048100(a3, *(_QWORD *)v53, *(_QWORD *)v54);
                if ((result & 1) == 0)
                {
                  v55 = *(_QWORD *)v54;
                  v82 = *(_DWORD *)(v54 + 8);
                  do
                  {
                    v56 = v53;
                    *(_QWORD *)v54 = *(_QWORD *)v53;
                    *(_DWORD *)(v54 + 8) = *(_DWORD *)(v53 + 8);
                    if (v85 < v52)
                      break;
                    v57 = (2 * v52) | 1;
                    v53 = v8 + 16 * v57;
                    if (2 * v52 + 2 < v11 && sub_1C5048100(a3, *(_QWORD *)v53, *(_QWORD *)(v53 + 16)))
                    {
                      v53 += 16;
                      v57 = 2 * v52 + 2;
                    }
                    result = sub_1C5048100(a3, *(_QWORD *)v53, v55);
                    v54 = v56;
                    v52 = v57;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v56 = v55;
                  *(_DWORD *)(v56 + 8) = v82;
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            v58 = v80;
            do
            {
              v59 = 0;
              v86 = *(_QWORD *)v8;
              v83 = *(_DWORD *)(v8 + 8);
              v60 = v8;
              do
              {
                v61 = v60 + 16 * v59 + 16;
                v62 = (2 * v59) | 1;
                v63 = 2 * v59 + 2;
                if (v63 < v11)
                {
                  result = sub_1C5048100(a3, *(_QWORD *)v61, *(_QWORD *)(v60 + 16 * v59 + 32));
                  if ((_DWORD)result)
                  {
                    v61 += 16;
                    v62 = v63;
                  }
                }
                *(_QWORD *)v60 = *(_QWORD *)v61;
                *(_DWORD *)(v60 + 8) = *(_DWORD *)(v61 + 8);
                v60 = v61;
                v59 = v62;
              }
              while (v62 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
              v64 = v58 - 16;
              if (v61 == v58 - 16)
              {
                *(_QWORD *)v61 = v86;
                *(_DWORD *)(v61 + 8) = v83;
              }
              else
              {
                *(_QWORD *)v61 = *(_QWORD *)(v58 - 16);
                *(_DWORD *)(v61 + 8) = *(_DWORD *)(v58 - 8);
                *(_QWORD *)(v58 - 16) = v86;
                *(_DWORD *)(v58 - 8) = v83;
                v65 = v61 - v8 + 16;
                if (v65 >= 17)
                {
                  v66 = (((unint64_t)v65 >> 4) - 2) >> 1;
                  v67 = v8 + 16 * v66;
                  result = sub_1C5048100(a3, *(_QWORD *)v67, *(_QWORD *)v61);
                  if ((_DWORD)result)
                  {
                    v68 = *(_QWORD *)v61;
                    v69 = *(_DWORD *)(v61 + 8);
                    do
                    {
                      v70 = v67;
                      *(_QWORD *)v61 = *(_QWORD *)v67;
                      *(_DWORD *)(v61 + 8) = *(_DWORD *)(v67 + 8);
                      if (!v66)
                        break;
                      v66 = (v66 - 1) >> 1;
                      v67 = v8 + 16 * v66;
                      result = sub_1C5048100(a3, *(_QWORD *)v67, v68);
                      v61 = v70;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v70 = v68;
                    *(_DWORD *)(v70 + 8) = v69;
                  }
                }
              }
              v58 = v64;
            }
            while (v11-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v8 + 16 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0x801)
        {
          sub_1C5048400(v13, v8, (uint64_t)v81, a3);
        }
        else
        {
          sub_1C5048400(v8, v13, (uint64_t)v81, a3);
          sub_1C5048400(v8 + 16, v13 - 16, a2 - 32, a3);
          sub_1C5048400(v8 + 32, v8 + 16 + 16 * v12, a2 - 48, a3);
          sub_1C5048400(v13 - 16, v13, v8 + 16 + 16 * v12, a3);
          v14 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)v13;
          *(_QWORD *)v13 = v14;
          LODWORD(v14) = *(_DWORD *)(v8 + 8);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(v13 + 8);
          *(_DWORD *)(v13 + 8) = v14;
        }
        --a4;
        if ((a5 & 1) == 0 && !sub_1C5048100(a3, *(_QWORD *)(v8 - 16), *(_QWORD *)v8))
        {
          v28 = *(_QWORD *)v8;
          v29 = *(_DWORD *)(v8 + 8);
          result = sub_1C5048100(a3, *(_QWORD *)v8, *v81);
          if ((result & 1) != 0)
          {
            v9 = v8;
            do
            {
              v30 = *(_QWORD *)(v9 + 16);
              v9 += 16;
              result = sub_1C5048100(a3, v28, v30);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v31 = v8 + 16;
            do
            {
              v9 = v31;
              if (v31 >= a2)
                break;
              v31 += 16;
              result = sub_1C5048100(a3, v28, *(_QWORD *)v9);
            }
            while (!(_DWORD)result);
          }
          v32 = a2;
          if (v9 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(_QWORD *)(v32 - 16);
              v32 -= 16;
              result = sub_1C5048100(a3, v28, v33);
            }
            while ((result & 1) != 0);
          }
          while (v9 < v32)
          {
            v34 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v32;
            *(_QWORD *)v32 = v34;
            LODWORD(v34) = *(_DWORD *)(v9 + 8);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v32 + 8);
            *(_DWORD *)(v32 + 8) = v34;
            do
            {
              v35 = *(_QWORD *)(v9 + 16);
              v9 += 16;
            }
            while (!sub_1C5048100(a3, v28, v35));
            do
            {
              v36 = *(_QWORD *)(v32 - 16);
              v32 -= 16;
              result = sub_1C5048100(a3, v28, v36);
            }
            while ((result & 1) != 0);
          }
          if (v9 - 16 != v8)
          {
            *(_QWORD *)v8 = *(_QWORD *)(v9 - 16);
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 - 8);
          }
          a5 = 0;
          *(_QWORD *)(v9 - 16) = v28;
          *(_DWORD *)(v9 - 8) = v29;
          continue;
        }
        v15 = 0;
        v16 = *(_QWORD *)v8;
        v17 = *(_DWORD *)(v8 + 8);
        do
        {
          v18 = sub_1C5048100(a3, *(_QWORD *)(v8 + v15 + 16), v16);
          v15 += 16;
        }
        while (v18);
        v19 = v8 + v15;
        v20 = a2;
        if (v15 == 16)
        {
          v20 = a2;
          do
          {
            if (v19 >= v20)
              break;
            v22 = *(_QWORD *)(v20 - 16);
            v20 -= 16;
          }
          while (!sub_1C5048100(a3, v22, v16));
        }
        else
        {
          do
          {
            v21 = *(_QWORD *)(v20 - 16);
            v20 -= 16;
          }
          while (!sub_1C5048100(a3, v21, v16));
        }
        v9 = v8 + v15;
        if (v19 < v20)
        {
          v23 = v20;
          do
          {
            v24 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v23;
            *(_QWORD *)v23 = v24;
            LODWORD(v24) = *(_DWORD *)(v9 + 8);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v23 + 8);
            *(_DWORD *)(v23 + 8) = v24;
            do
            {
              v25 = *(_QWORD *)(v9 + 16);
              v9 += 16;
            }
            while (sub_1C5048100(a3, v25, v16));
            do
            {
              v26 = *(_QWORD *)(v23 - 16);
              v23 -= 16;
            }
            while (!sub_1C5048100(a3, v26, v16));
          }
          while (v9 < v23);
        }
        if (v9 - 16 != v8)
        {
          *(_QWORD *)v8 = *(_QWORD *)(v9 - 16);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 - 8);
        }
        *(_QWORD *)(v9 - 16) = v16;
        *(_DWORD *)(v9 - 8) = v17;
        if (v19 < v20)
        {
LABEL_30:
          result = sub_1C50478E4(v8, v9 - 16, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v27 = sub_1C5048528(v8, v9 - 16, a3);
        result = sub_1C5048528(v9, a2, a3);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_30;
        }
        a2 = v9 - 16;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C5048100(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD v35[7];

  if (a2 == a3)
    return 0;
  v35[5] = v3;
  v35[6] = v4;
  v9 = *a1;
  v10 = *(_QWORD *)(a2 + 24);
  v35[0] = 0;
  if (sub_1C6144BDC(*(_QWORD *)v9, *(_DWORD *)(v9 + 16), v10, v35))
    v11 = *(_DWORD *)(v35[0] + 8);
  else
    v11 = 0;
  v12 = *a1;
  v13 = *(_QWORD *)(a3 + 24);
  v35[0] = 0;
  if (sub_1C6144BDC(*(_QWORD *)v12, *(_DWORD *)(v12 + 16), v13, v35))
    v14 = *(_DWORD *)(v35[0] + 8);
  else
    v14 = 0;
  v15 = *(_DWORD *)(*a1 + 28);
  if (v15 >= v11)
  {
    v16 = *(_DWORD *)(*a1 + 24);
    v17 = v16 < v11 && v15 >= v14;
    if (v17 && v16 < v14)
    {
      v20 = v11 >= v14;
      if (v11 != v14)
        return !v20;
      goto LABEL_31;
    }
  }
  if (v11 < v14)
    return *(_DWORD *)a1[1] >= v14 && !*(_BYTE *)a1[2];
  v19 = *(_DWORD *)a1[1];
  if (v14 < v11)
    return v19 < v11 || *(_BYTE *)a1[2];
  if (v19 >= v11 && !*(_BYTE *)a1[2])
  {
    v28 = *(_QWORD *)(a2 + 24);
    v29 = *(_DWORD *)(v28 + 20);
    if ((v29 & 0x40000000) != 0)
      v30 = *(_QWORD *)(v28 - 8);
    else
      v30 = v28 - 32 * (v29 & 0x7FFFFFF);
    v31 = (unint64_t)(a2 - v30) >> 5;
    v32 = *(_QWORD *)(a3 + 24);
    v33 = *(_DWORD *)(v32 + 20);
    if ((v33 & 0x40000000) != 0)
      v34 = *(_QWORD *)(v32 - 8);
    else
      v34 = v32 - 32 * (v33 & 0x7FFFFFF);
    v20 = v31 >= ((unint64_t)(a3 - v34) >> 5);
    return !v20;
  }
LABEL_31:
  v21 = *(_QWORD *)(a2 + 24);
  v22 = *(_DWORD *)(v21 + 20);
  if ((v22 & 0x40000000) != 0)
    v23 = *(_QWORD *)(v21 - 8);
  else
    v23 = v21 - 32 * (v22 & 0x7FFFFFF);
  v24 = (unint64_t)(a2 - v23) >> 5;
  v25 = *(_QWORD *)(a3 + 24);
  v26 = *(_DWORD *)(v25 + 20);
  if ((v26 & 0x40000000) != 0)
    v27 = *(_QWORD *)(v25 - 8);
  else
    v27 = v25 - 32 * (v26 & 0x7FFFFFF);
  return v24 > ((unint64_t)(a3 - v27) >> 5);
}

BOOL sub_1C50482E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1C50486F4(a1, a2, a3, a4, a6);
  result = sub_1C5048100(a6, *(_QWORD *)a5, *(_QWORD *)a4);
  if (result)
  {
    v13 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v13;
    LODWORD(v13) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v13;
    result = sub_1C5048100(a6, *(_QWORD *)a4, *(_QWORD *)a3);
    if (result)
    {
      v14 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v14;
      LODWORD(v14) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v14;
      result = sub_1C5048100(a6, *(_QWORD *)a3, *(_QWORD *)a2);
      if (result)
      {
        v15 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v15;
        LODWORD(v15) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v15;
        result = sub_1C5048100(a6, *(_QWORD *)a2, *(_QWORD *)a1);
        if (result)
        {
          v16 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v16;
          LODWORD(v16) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v16;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C5048400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  BOOL v8;
  _BOOL8 result;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v8 = sub_1C5048100(a4, *(_QWORD *)a2, *(_QWORD *)a1);
  result = sub_1C5048100(a4, *(_QWORD *)a3, *(_QWORD *)a2);
  if (v8)
  {
    v10 = *(_QWORD *)a1;
    if (result)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      v11 = (int *)(a3 + 8);
      v12 = (int *)(a1 + 8);
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v10;
      v17 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v17;
      result = sub_1C5048100(a4, *(_QWORD *)a3, v10);
      if (!result)
        return result;
      v18 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v18;
      v11 = (int *)(a3 + 8);
      v12 = (int *)(a2 + 8);
    }
    v15 = v11;
    goto LABEL_10;
  }
  if (result)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    v15 = (int *)(a2 + 8);
    v14 = *(_DWORD *)(a2 + 8);
    *(_QWORD *)a3 = v13;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v14;
    result = sub_1C5048100(a4, *(_QWORD *)a2, *(_QWORD *)a1);
    if (result)
    {
      v16 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v12 = (int *)(a1 + 8);
      *(_QWORD *)a2 = v16;
LABEL_10:
      v19 = *v12;
      *v12 = *v15;
      *v15 = v19;
    }
  }
  return result;
}

BOOL sub_1C5048528(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1C5048100(a3, *(_QWORD *)(a2 - 16), *(_QWORD *)a1))
      {
        v8 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v8;
        LODWORD(v8) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v8;
      }
      return 1;
    case 3:
      sub_1C5048400(a1, a1 + 16, a2 - 16, a3);
      return 1;
    case 4:
      sub_1C50486F4(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      sub_1C50482E8(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16, a3);
      return 1;
    default:
      v9 = (uint64_t *)(a1 + 32);
      sub_1C5048400(a1, a1 + 16, a1 + 32, a3);
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_1C5048100(a3, *(_QWORD *)v10, *v9))
    {
      v13 = *(_QWORD *)v10;
      v14 = *(_DWORD *)(v10 + 8);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_QWORD *)(v16 + 48) = *(_QWORD *)(a1 + v15 + 32);
        *(_DWORD *)(v16 + 56) = *(_DWORD *)(a1 + v15 + 40);
        if (v15 == -32)
          break;
        v15 -= 16;
        if (!sub_1C5048100(a3, v13, *(_QWORD *)(v16 + 16)))
        {
          v17 = a1 + v15 + 48;
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(_QWORD *)v17 = v13;
      *(_DWORD *)(v17 + 8) = v14;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = (uint64_t *)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

BOOL sub_1C50486F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1C5048400(a1, a2, a3, a5);
  result = sub_1C5048100(a5, *(_QWORD *)a4, *(_QWORD *)a3);
  if (result)
  {
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v11;
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v11;
    result = sub_1C5048100(a5, *(_QWORD *)a3, *(_QWORD *)a2);
    if (result)
    {
      v12 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v12;
      LODWORD(v12) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v12;
      result = sub_1C5048100(a5, *(_QWORD *)a2, *(_QWORD *)a1);
      if (result)
      {
        v13 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v13;
      }
    }
  }
  return result;
}

uint64_t sub_1C50487D4(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[5];

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v5)
    v5 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v5;
  v15[4] = a1 + 2;
  if (v10)
  {
    if (v10 > 0x666666666666666)
      sub_1C4764EE4();
    v11 = (char *)operator new(40 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[40 * v4];
  v15[0] = v11;
  v15[1] = v12;
  v15[3] = &v11[40 * v10];
  *(_QWORD *)v12 = a2;
  *((_QWORD *)v12 + 1) = a3;
  sub_1C50488E4((_QWORD *)v12 + 2, a4);
  v15[2] = v12 + 40;
  sub_1C61A7D7C(a1, v15);
  v13 = a1[1];
  sub_1C61A7E10((uint64_t)v15);
  return v13;
}

_QWORD *sub_1C50488E4(_QWORD *a1, unint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 62)
      abort();
    v4 = 4 * a2;
    v5 = (char *)operator new(4 * a2);
    *a1 = v5;
    v6 = &v5[4 * a2];
    a1[2] = v6;
    bzero(v5, v4);
    a1[1] = v6;
  }
  return a1;
}

_QWORD *sub_1C504894C(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_15:
    v6 = sub_1C5048A08(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_15;
  }
  return v6;
}

_QWORD *sub_1C5048A08(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C49D7AB8(a1, 2 * v7);
    v8 = *a3;
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
    v12 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = a4;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
        v12 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      v8 = *a4;
      goto LABEL_4;
    }
    sub_1C49D7AB8(a1, v7);
    v8 = *a3;
    v17 = *(_DWORD *)(a1 + 16) - 1;
    v18 = ((*a3 >> 4) ^ (*a3 >> 9)) & v17;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
    v19 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v20 = 1;
      while (v19 != -4096)
      {
        if (v13)
          v21 = 0;
        else
          v21 = v19 == -8192;
        if (v21)
          v13 = a4;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
        v19 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
LABEL_27:
      if (v13)
        a4 = v13;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void sub_1C5048B80(uint64_t a1, __n128 *a2, _QWORD *a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  __n128 *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t **v17;
  unint64_t v18;
  __n128 *v19;
  unsigned __int32 v20;
  unsigned __int32 v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  __n128 *v52;
  __n128 *v53;
  __n128 *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned __int32 v61;
  unsigned __int32 v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 *v67;
  uint64_t v68;
  uint64_t v69;
  __n128 *v70;
  uint64_t v71;
  unsigned int v73;
  uint64_t v75;
  uint64_t v76;

  if (a4 < 2)
    return;
  v7 = a2;
  v8 = a1;
  if (a4 == 2)
  {
    v9 = (uint64_t *)a2[-1].n128_u64[0];
    v10 = *v9;
    v11 = *(uint64_t **)a1;
    if (*v9 == **(_QWORD **)a1)
    {
      v20 = a2[-1].n128_u32[2];
      v21 = *(_DWORD *)(a1 + 8);
      if (v20 <= v21)
        return;
    }
    else
    {
      v12 = *a3;
      v13 = (uint64_t *)(*a3 + 24);
      v75 = 0;
      v76 = v10;
      if (sub_1C4DD8A9C(v13, &v76, &v75))
        v14 = v75;
      else
        v14 = *(_QWORD *)(v12 + 24) + 16 * *(unsigned int *)(v12 + 40);
      v48 = *(_DWORD *)(v14 + 8) - 1;
      v49 = **(_QWORD **)v8;
      v75 = 0;
      v76 = v49;
      if (sub_1C4DD8A9C(v13, &v76, &v75))
        v50 = v75;
      else
        v50 = *(_QWORD *)(v12 + 24) + 16 * *(unsigned int *)(v12 + 40);
      if (v48 >= *(_DWORD *)(v50 + 8) - 1)
        return;
      v11 = *(uint64_t **)v8;
      v9 = (uint64_t *)v7[-1].n128_u64[0];
      v21 = *(_DWORD *)(v8 + 8);
      v20 = v7[-1].n128_u32[2];
    }
    *(_QWORD *)v8 = v9;
    v7[-1].n128_u64[0] = (unint64_t)v11;
    *(_DWORD *)(v8 + 8) = v20;
    v7[-1].n128_u32[2] = v21;
    return;
  }
  if ((uint64_t)a4 <= 0)
  {
    if ((__n128 *)a1 == a2)
      return;
    v22 = (uint64_t **)(a1 + 16);
    if ((__n128 *)(a1 + 16) == a2)
      return;
    v23 = 0;
    v24 = (uint64_t **)a1;
    while (1)
    {
      v25 = (uint64_t)v24;
      v24 = v22;
      v26 = *v22;
      v27 = **v22;
      v28 = *(uint64_t **)v25;
      if (v27 == **(_QWORD **)v25)
      {
        v32 = *(_DWORD *)(v25 + 8);
        if (*(_DWORD *)(v25 + 24) <= v32)
          goto LABEL_45;
        v73 = *(_DWORD *)(v25 + 24);
      }
      else
      {
        v29 = *a3;
        v30 = (uint64_t *)(*a3 + 24);
        v75 = 0;
        v76 = v27;
        if (sub_1C4DD8A9C(v30, &v76, &v75))
          v31 = v75;
        else
          v31 = *(_QWORD *)(v29 + 24) + 16 * *(unsigned int *)(v29 + 40);
        v33 = *(_DWORD *)(v31 + 8);
        v34 = **(_QWORD **)v25;
        v75 = 0;
        v76 = v34;
        if (sub_1C4DD8A9C(v30, &v76, &v75))
          v35 = v75;
        else
          v35 = *(_QWORD *)(v29 + 24) + 16 * *(unsigned int *)(v29 + 40);
        if (v33 - 1 >= (*(_DWORD *)(v35 + 8) - 1))
          goto LABEL_45;
        v26 = *v24;
        v73 = *(_DWORD *)(v25 + 24);
        v28 = *(uint64_t **)v25;
        v32 = *(_DWORD *)(v25 + 8);
      }
      *v24 = v28;
      *((_DWORD *)v24 + 2) = v32;
      if (v25 == v8)
      {
        v25 = v8;
        goto LABEL_44;
      }
      v36 = v23;
      while (1)
      {
        v37 = v8 + v36;
        v38 = *v26;
        v39 = *(_QWORD **)(v8 + v36 - 16);
        if (*v26 == *v39)
        {
          v43 = *(_DWORD *)(v37 - 8);
          if (v73 <= v43)
            goto LABEL_43;
          goto LABEL_39;
        }
        v40 = *a3;
        v41 = (uint64_t *)(*a3 + 24);
        v75 = 0;
        v76 = v38;
        v42 = sub_1C4DD8A9C(v41, &v76, &v75)
            ? v75
            : *(_QWORD *)(v40 + 24) + 16 * *(unsigned int *)(v40 + 40);
        v44 = *(_DWORD *)(v42 + 8);
        v45 = **(_QWORD **)(v37 - 16);
        v75 = 0;
        v76 = v45;
        v46 = sub_1C4DD8A9C(v41, &v76, &v75)
            ? v75
            : *(_QWORD *)(v40 + 24) + 16 * *(unsigned int *)(v40 + 40);
        if (v44 - 1 >= (*(_DWORD *)(v46 + 8) - 1))
          break;
        v39 = *(_QWORD **)(v37 - 16);
        v43 = *(_DWORD *)(v8 + v36 - 8);
LABEL_39:
        v25 -= 16;
        v47 = v8 + v36;
        *(_QWORD *)v47 = v39;
        *(_DWORD *)(v47 + 8) = v43;
        v36 -= 16;
        if (!v36)
        {
          v25 = v8;
          goto LABEL_43;
        }
      }
      v25 = v8 + v36;
LABEL_43:
      v7 = a2;
LABEL_44:
      *(_QWORD *)v25 = v26;
      *(_DWORD *)(v25 + 8) = v73;
LABEL_45:
      v22 = v24 + 2;
      v23 += 16;
      if (v24 + 2 == (uint64_t **)v7)
        return;
    }
  }
  v17 = (uint64_t **)a5;
  v18 = a4 >> 1;
  v19 = (__n128 *)(a1 + 16 * (a4 >> 1));
  if ((uint64_t)a4 > a6)
  {
    sub_1C5048B80(a1, v19, a3, a4 >> 1, a5, a6);
    sub_1C5048B80(v8 + 16 * (a4 >> 1), v7, a3, a4 - (a4 >> 1), v17, a6);
    sub_1C50495D0(v8, (uint64_t *)(v8 + 16 * (a4 >> 1)), (uint64_t *)v7, a3, a4 >> 1, a4 - (a4 >> 1), v17, a6);
    return;
  }
  v51 = sub_1C50490F8(a1, v19, a3, a4 >> 1, a5, a7);
  v52 = (__n128 *)&v17[2 * v18];
  sub_1C50490F8(v8 + 16 * (a4 >> 1), v7, a3, a4 - (a4 >> 1), v52, v51);
  v53 = (__n128 *)&v17[2 * a4];
  v54 = v52;
  while (v54 != v53)
  {
    v55 = (_QWORD *)v54->n128_u64[0];
    v56 = *(_QWORD *)v54->n128_u64[0];
    v57 = *v17;
    if (v56 == **v17)
    {
      v61 = v54->n128_u32[2];
      v62 = *((_DWORD *)v17 + 2);
      if (v61 <= v62)
        goto LABEL_65;
    }
    else
    {
      v58 = *a3;
      v59 = (uint64_t *)(*a3 + 24);
      v75 = 0;
      v76 = v56;
      if (sub_1C4DD8A9C(v59, &v76, &v75))
        v60 = v75;
      else
        v60 = *(_QWORD *)(v58 + 24) + 16 * *(unsigned int *)(v58 + 40);
      v63 = *(_DWORD *)(v60 + 8);
      v64 = **v17;
      v75 = 0;
      v76 = v64;
      if (sub_1C4DD8A9C(v59, &v76, &v75))
        v65 = v75;
      else
        v65 = *(_QWORD *)(v58 + 24) + 16 * *(unsigned int *)(v58 + 40);
      if (v63 - 1 >= (*(_DWORD *)(v65 + 8) - 1))
      {
        v57 = *v17;
        v62 = *((_DWORD *)v17 + 2);
LABEL_65:
        *(_QWORD *)v8 = v57;
        *(_DWORD *)(v8 + 8) = v62;
        v17 += 2;
        goto LABEL_66;
      }
      v55 = (_QWORD *)v54->n128_u64[0];
      v61 = v54->n128_u32[2];
    }
    *(_QWORD *)v8 = v55;
    *(_DWORD *)(v8 + 8) = v61;
    ++v54;
LABEL_66:
    v8 += 16;
    if (v17 == (uint64_t **)v52)
    {
      if (v54 != v53)
      {
        v66 = 0;
        do
        {
          v67 = &v54[v66];
          v68 = v8 + v66 * 16;
          *(_QWORD *)v68 = v54[v66].n128_u64[0];
          *(_DWORD *)(v68 + 8) = v54[v66++].n128_u32[2];
        }
        while (&v67[1] != v53);
      }
      return;
    }
  }
  if (v17 != (uint64_t **)v52)
  {
    v69 = 0;
    do
    {
      v70 = (__n128 *)&v17[v69];
      v71 = v8 + v69 * 8;
      *(_QWORD *)v71 = v17[v69];
      *(_DWORD *)(v71 + 8) = v17[v69 + 1];
      v69 += 2;
    }
    while (&v70[1] != v52);
  }
}

__n128 sub_1C50490F8(uint64_t a1, __n128 *a2, _QWORD *a3, unint64_t a4, __n128 *a5, __n128 result)
{
  __n128 *v6;
  __n128 *v8;
  uint64_t **v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  uint64_t **v19;
  _QWORD *v20;
  uint64_t v21;
  __n128 *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t **v42;
  __n128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  __n128 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __n128 *v59;
  uint64_t v61;
  uint64_t v62;

  if (!a4)
    return result;
  v6 = a5;
  v8 = a2;
  v9 = (uint64_t **)a1;
  if (a4 == 2)
  {
    v10 = a2 - 1;
    v11 = *(_QWORD *)a2[-1].n128_u64[0];
    if (v11 == **(_QWORD **)a1)
    {
      if (a2[-1].n128_u32[2] > *(_DWORD *)(a1 + 8))
      {
LABEL_67:
        *v6 = *v10;
        result = *(__n128 *)v9;
        goto LABEL_68;
      }
    }
    else
    {
      v12 = *a3;
      v13 = (uint64_t *)(*a3 + 24);
      v61 = 0;
      v62 = v11;
      if (sub_1C4DD8A9C(v13, &v62, &v61))
        v14 = v61;
      else
        v14 = *(_QWORD *)(v12 + 24) + 16 * *(unsigned int *)(v12 + 40);
      v54 = *(_DWORD *)(v14 + 8) - 1;
      v55 = **v9;
      v61 = 0;
      v62 = v55;
      if (sub_1C4DD8A9C(v13, &v62, &v61))
        v56 = v61;
      else
        v56 = *(_QWORD *)(v12 + 24) + 16 * *(unsigned int *)(v12 + 40);
      if (v54 < *(_DWORD *)(v56 + 8) - 1)
        goto LABEL_67;
    }
    *v6 = *(__n128 *)v9;
    result = *v10;
LABEL_68:
    v6[1] = result;
    return result;
  }
  if (a4 == 1)
  {
    result = *(__n128 *)a1;
    *a5 = *(__n128 *)a1;
    return result;
  }
  if ((uint64_t)a4 > 8)
  {
    v42 = (uint64_t **)(a1 + 16 * (a4 >> 1));
    sub_1C5048B80(a1, v42, a3, a4 >> 1, a5, a4 >> 1);
    sub_1C5048B80(&v9[2 * (a4 >> 1)], v8, a3, a4 - (a4 >> 1), &v6[a4 >> 1], a4 - (a4 >> 1));
    v43 = (__n128 *)&v9[2 * (a4 >> 1)];
    while (1)
    {
      if (v43 == v8)
      {
        if (v9 != v42)
        {
          v57 = 0;
          do
          {
            result = *(__n128 *)&v9[v57 / 8];
            v6[v57 / 0x10] = result;
            v57 += 16;
          }
          while (&v9[v57 / 8] != v42);
        }
        return result;
      }
      v44 = *(_QWORD *)v43->n128_u64[0];
      if (v44 == **v9)
      {
        if (v43->n128_u32[2] > *((_DWORD *)v9 + 2))
          goto LABEL_54;
      }
      else
      {
        v45 = *a3;
        v46 = (uint64_t *)(*a3 + 24);
        v61 = 0;
        v62 = v44;
        if (sub_1C4DD8A9C(v46, &v62, &v61))
          v47 = v61;
        else
          v47 = *(_QWORD *)(v45 + 24) + 16 * *(unsigned int *)(v45 + 40);
        v49 = *(_DWORD *)(v47 + 8);
        v50 = **v9;
        v61 = 0;
        v62 = v50;
        if (sub_1C4DD8A9C(v46, &v62, &v61))
          v51 = v61;
        else
          v51 = *(_QWORD *)(v45 + 24) + 16 * *(unsigned int *)(v45 + 40);
        if (v49 - 1 < (*(_DWORD *)(v51 + 8) - 1))
        {
LABEL_54:
          v52 = *v43++;
          result = v52;
          goto LABEL_55;
        }
      }
      v48 = *(__n128 *)v9;
      v9 += 2;
      result = v48;
LABEL_55:
      *v6++ = result;
      if (v9 == v42)
      {
        if (v43 != v8)
        {
          v53 = 0;
          do
          {
            result = v43[v53];
            v6[v53++] = result;
          }
          while (&v43[v53] != v8);
        }
        return result;
      }
    }
  }
  if ((__n128 *)a1 == a2)
    return result;
  result = *(__n128 *)a1;
  *a5 = *(__n128 *)a1;
  v15 = (uint64_t **)(a1 + 16);
  if ((__n128 *)(a1 + 16) == a2)
    return result;
  v16 = 0;
  v17 = a5;
  v18 = a5;
  do
  {
    v19 = v15;
    v20 = (_QWORD *)v18->n128_u64[0];
    ++v18;
    v21 = **v15;
    if (v21 == *v20)
    {
      if (*((_DWORD *)v9 + 6) <= v17->n128_u32[2])
        goto LABEL_16;
    }
    else
    {
      v22 = v18;
      v23 = *a3;
      v24 = (uint64_t *)(*a3 + 24);
      v61 = 0;
      v62 = v21;
      if (sub_1C4DD8A9C(v24, &v62, &v61))
        v25 = v61;
      else
        v25 = *(_QWORD *)(v23 + 24) + 16 * *(unsigned int *)(v23 + 40);
      v26 = *(_DWORD *)(v25 + 8);
      v27 = *(_QWORD *)v17->n128_u64[0];
      v61 = 0;
      v62 = v27;
      if (sub_1C4DD8A9C(v24, &v62, &v61))
        v28 = v61;
      else
        v28 = *(_QWORD *)(v23 + 24) + 16 * *(unsigned int *)(v23 + 40);
      v18 = v22;
      if (v26 - 1 >= (*(_DWORD *)(v28 + 8) - 1))
      {
LABEL_16:
        result = *(__n128 *)v19;
        *v18 = *(__n128 *)v19;
        goto LABEL_40;
      }
    }
    result = *v17;
    *v18 = *v17;
    v29 = v6;
    if (v17 == v6)
      goto LABEL_39;
    v59 = v18;
    v30 = v16;
    while (1)
    {
      v31 = (char *)v6 + v30;
      v32 = **v19;
      v33 = *(_QWORD **)((char *)v6[-1].n128_u64 + v30);
      if (v32 == *v33)
      {
        v37 = *((_DWORD *)v31 - 2);
        if (*((_DWORD *)v9 + 6) <= v37)
        {
          v29 = v17;
          goto LABEL_38;
        }
        goto LABEL_35;
      }
      v34 = *a3;
      v35 = (uint64_t *)(*a3 + 24);
      v61 = 0;
      v62 = v32;
      v36 = sub_1C4DD8A9C(v35, &v62, &v61)
          ? v61
          : *(_QWORD *)(v34 + 24) + 16 * *(unsigned int *)(v34 + 40);
      v38 = *(_DWORD *)(v36 + 8);
      v39 = **((_QWORD **)v31 - 2);
      v61 = 0;
      v62 = v39;
      v40 = sub_1C4DD8A9C(v35, &v62, &v61)
          ? v61
          : *(_QWORD *)(v34 + 24) + 16 * *(unsigned int *)(v34 + 40);
      if (v38 - 1 >= (*(_DWORD *)(v40 + 8) - 1))
        break;
      v33 = (_QWORD *)*((_QWORD *)v31 - 2);
      v37 = *(unsigned __int32 *)((char *)&v6->n128_u32[-2] + v30);
LABEL_35:
      --v17;
      v41 = (char *)v6 + v30;
      *(_QWORD *)v41 = v33;
      *((_DWORD *)v41 + 2) = v37;
      v30 -= 16;
      if (!v30)
      {
        v29 = v6;
        goto LABEL_38;
      }
    }
    v29 = (__n128 *)((char *)v6 + v30);
LABEL_38:
    v8 = a2;
    v18 = v59;
LABEL_39:
    v29->n128_u64[0] = (unint64_t)*v19;
    v29->n128_u32[2] = *((_DWORD *)v9 + 6);
LABEL_40:
    v15 = v19 + 2;
    v16 += 16;
    v17 = v18;
    v9 = v19;
  }
  while (v19 + 2 != (uint64_t **)v8);
  return result;
}

uint64_t sub_1C50495D0(uint64_t result, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t **a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t **v59;
  uint64_t *i;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t **v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t **v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t **v94;
  uint64_t **v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v100;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;

  v102 = a6;
  if (!a6)
    return result;
  v12 = result;
  do
  {
    if (a5 <= a8 || v102 <= a8)
    {
      if (a5 > v102)
      {
        if (a2 == a3)
          return result;
        v58 = 0;
        do
        {
          *(_OWORD *)&a7[v58] = *(_OWORD *)&a2[v58];
          v58 += 2;
        }
        while (&a2[v58] != a3);
        if (!(v58 * 8))
          return result;
        v59 = &a7[v58];
        for (i = a3 - 1; ; i -= 2)
        {
          if (a2 == (uint64_t *)v12)
          {
            if (v59 != a7)
            {
              v87 = 0;
              do
              {
                v88 = &i[v87];
                *(v88 - 1) = (uint64_t)v59[v87 - 2];
                *(_DWORD *)v88 = v59[v87 - 1];
                v87 -= 2;
              }
              while (&v59[v87] != a7);
            }
            return result;
          }
          v61 = a2 - 2;
          v62 = *(v59 - 2);
          v63 = *v62;
          if (*v62 == *(_QWORD *)*(a2 - 2))
          {
            v67 = *((_DWORD *)v59 - 2);
            if (v67 <= *((_DWORD *)a2 - 2))
              goto LABEL_91;
            v62 = (uint64_t *)*(a2 - 2);
            v67 = *((_DWORD *)a2 - 2);
          }
          else
          {
            v64 = *a4;
            v65 = (uint64_t *)(*a4 + 24);
            v104 = 0;
            v105 = v63;
            v98 = a2;
            if (sub_1C4DD8A9C(v65, &v105, &v104))
              v66 = v104;
            else
              v66 = *(_QWORD *)(v64 + 24) + 16 * *(unsigned int *)(v64 + 40);
            v68 = *(_DWORD *)(v66 + 8);
            v69 = *(_QWORD *)*v61;
            v104 = 0;
            v105 = v69;
            result = sub_1C4DD8A9C(v65, &v105, &v104);
            if ((_DWORD)result)
              v70 = v104;
            else
              v70 = *(_QWORD *)(v64 + 24) + 16 * *(unsigned int *)(v64 + 40);
            if (v68 - 1 >= (*(_DWORD *)(v70 + 8) - 1))
            {
              v62 = *(v59 - 2);
              v67 = *((_DWORD *)v59 - 2);
              a2 = v98;
LABEL_91:
              v59 -= 2;
              goto LABEL_92;
            }
            v62 = (uint64_t *)*(v98 - 2);
            v67 = *((_DWORD *)v98 - 2);
          }
          a2 = v61;
LABEL_92:
          *(i - 1) = (uint64_t)v62;
          *(_DWORD *)i = v67;
          if (v59 == a7)
            return result;
        }
      }
      if ((uint64_t *)v12 == a2)
        return result;
      v71 = 0;
      do
      {
        *(_OWORD *)&a7[v71] = *(_OWORD *)(v12 + v71 * 8);
        v71 += 2;
      }
      while ((uint64_t *)(v12 + v71 * 8) != a2);
      if (!(v71 * 8))
        return result;
      v72 = &a7[v71];
      v73 = (uint64_t)&a7[v71 - 2];
      while (1)
      {
        if (a2 == a3)
        {
          if (v72 != a7)
          {
            v89 = 0;
            do
            {
              v90 = v12 + v89 * 8;
              v91 = &a7[v89];
              *(_QWORD *)v90 = a7[v89];
              *(_DWORD *)(v90 + 8) = a7[v89 + 1];
              v89 += 2;
            }
            while ((uint64_t **)v73 != v91);
          }
          return result;
        }
        v74 = (_QWORD *)*a2;
        v75 = *(_QWORD *)*a2;
        v76 = *a7;
        if (v75 == **a7)
        {
          v80 = *((_DWORD *)a2 + 2);
          v81 = *((_DWORD *)a7 + 2);
          if (v80 <= v81)
            goto LABEL_113;
        }
        else
        {
          v77 = *a4;
          v78 = (uint64_t *)(*a4 + 24);
          v104 = 0;
          v105 = v75;
          if (sub_1C4DD8A9C(v78, &v105, &v104))
            v79 = v104;
          else
            v79 = *(_QWORD *)(v77 + 24) + 16 * *(unsigned int *)(v77 + 40);
          v82 = *(_DWORD *)(v79 + 8);
          v83 = **a7;
          v104 = 0;
          v105 = v83;
          result = sub_1C4DD8A9C(v78, &v105, &v104);
          if ((_DWORD)result)
            v84 = v104;
          else
            v84 = *(_QWORD *)(v77 + 24) + 16 * *(unsigned int *)(v77 + 40);
          if (v82 - 1 >= (*(_DWORD *)(v84 + 8) - 1))
          {
            v76 = *a7;
            v81 = *((_DWORD *)a7 + 2);
LABEL_113:
            *(_QWORD *)v12 = v76;
            *(_DWORD *)(v12 + 8) = v81;
            a7 += 2;
            goto LABEL_114;
          }
          v74 = (_QWORD *)*a2;
          v80 = *((_DWORD *)a2 + 2);
        }
        *(_QWORD *)v12 = v74;
        *(_DWORD *)(v12 + 8) = v80;
        a2 += 2;
LABEL_114:
        v12 += 16;
        if (v72 == a7)
          return result;
      }
    }
    if (!a5)
      return result;
    v13 = 0;
    v14 = -a5;
    while (1)
    {
      v15 = *(_QWORD *)*a2;
      if (v15 != **(_QWORD **)(v12 + v13))
        break;
      if (*((_DWORD *)a2 + 2) > *(_DWORD *)(v12 + v13 + 8))
        goto LABEL_20;
LABEL_17:
      v13 += 16;
      if (__CFADD__(v14++, 1))
        return result;
    }
    v16 = *a4;
    v17 = (uint64_t *)(*a4 + 24);
    v104 = 0;
    v105 = v15;
    if (sub_1C4DD8A9C(v17, &v105, &v104))
      v18 = v104;
    else
      v18 = *(_QWORD *)(v16 + 24) + 16 * *(unsigned int *)(v16 + 40);
    v19 = *(_DWORD *)(v18 + 8);
    v20 = **(_QWORD **)(v12 + v13);
    v104 = 0;
    v105 = v20;
    result = sub_1C4DD8A9C(v17, &v105, &v104);
    if ((_DWORD)result)
      v21 = v104;
    else
      v21 = *(_QWORD *)(v16 + 24) + 16 * *(unsigned int *)(v16 + 40);
    if (v19 - 1 >= (*(_DWORD *)(v21 + 8) - 1))
      goto LABEL_17;
LABEL_20:
    v23 = -v14;
    v24 = v102;
    v96 = v12;
    v97 = a2;
    v93 = v12 + v13;
    if (-v14 < v102)
    {
      if (v102 >= 0)
        v25 = v102;
      else
        v25 = v102 + 1;
      v26 = v25 >> 1;
      v27 = a2;
      v92 = v26;
      a2 += 2 * v26;
      if ((uint64_t *)(v12 + v13) == v27)
      {
        v29 = v27;
      }
      else
      {
        v94 = a7;
        v28 = ((uint64_t)v27 - v12 - v13) >> 4;
        v29 = (uint64_t *)(v12 + v13);
        do
        {
          v30 = &v29[2 * (v28 >> 1)];
          v31 = *(_QWORD *)*a2;
          if (v31 == *(_QWORD *)*v30)
          {
            v35 = *((_DWORD *)a2 + 2) > *((_DWORD *)v30 + 2);
          }
          else
          {
            v32 = *a4;
            v33 = (uint64_t *)(*a4 + 24);
            v104 = 0;
            v105 = v31;
            if (sub_1C4DD8A9C(v33, &v105, &v104))
              v34 = v104;
            else
              v34 = *(_QWORD *)(v32 + 24) + 16 * *(unsigned int *)(v32 + 40);
            v36 = *(_DWORD *)(v34 + 8);
            v37 = *(_QWORD *)*v30;
            v104 = 0;
            v105 = v37;
            if (sub_1C4DD8A9C(v33, &v105, &v104))
              v38 = v104;
            else
              v38 = *(_QWORD *)(v32 + 24) + 16 * *(unsigned int *)(v32 + 40);
            v35 = v36 - 1 < (*(_DWORD *)(v38 + 8) - 1);
          }
          if (v35)
          {
            v28 >>= 1;
          }
          else
          {
            v29 = v30 + 2;
            v28 += ~(v28 >> 1);
          }
        }
        while (v28);
        a7 = v94;
        v24 = v102;
      }
      v52 = v92;
      v51 = v97;
      v53 = ((uint64_t)v29 - v96 - v13) >> 4;
      goto LABEL_63;
    }
    if (v14 == -1)
    {
      v85 = v12 + v13;
      v86 = *(_QWORD *)(v12 + v13);
      *(_QWORD *)v85 = *a2;
      *a2 = v86;
      LODWORD(v86) = *(_DWORD *)(v12 + v13 + 8);
      *(_DWORD *)(v85 + 8) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = v86;
      return result;
    }
    v103 = a4;
    v95 = a7;
    if (v14 > 0)
      v23 = 1 - v14;
    v100 = v23 >> 1;
    v29 = (uint64_t *)(v12 + 16 * (v23 >> 1) + v13);
    v39 = a2;
    a2 = a3;
    v40 = (char *)a3 - (char *)v39;
    if (v40)
    {
      v41 = v40 >> 4;
      v42 = *a4;
      v43 = (uint64_t *)(*a4 + 24);
      a2 = v97;
      do
      {
        v44 = &a2[2 * (v41 >> 1)];
        v45 = *(_QWORD *)*v44;
        if (v45 == *(_QWORD *)*v29)
        {
          v47 = *((_DWORD *)v44 + 2) > *((_DWORD *)v29 + 2);
        }
        else
        {
          v104 = 0;
          v105 = v45;
          if (sub_1C4DD8A9C(v43, &v105, &v104))
            v46 = v104;
          else
            v46 = *(_QWORD *)(v42 + 24) + 16 * *(unsigned int *)(v42 + 40);
          v48 = *(_DWORD *)(v46 + 8);
          v49 = *(_QWORD *)*v29;
          v104 = 0;
          v105 = v49;
          if (sub_1C4DD8A9C(v43, &v105, &v104))
            v50 = v104;
          else
            v50 = *(_QWORD *)(v42 + 24) + 16 * *(unsigned int *)(v42 + 40);
          v47 = v48 - 1 < (*(_DWORD *)(v50 + 8) - 1);
        }
        if (v47)
          v41 += ~(v41 >> 1);
        else
          v41 >>= 1;
        if (v47)
          a2 = v44 + 2;
      }
      while (v41);
    }
    v51 = v97;
    v52 = ((char *)a2 - (char *)v97) >> 4;
    a7 = v95;
    v24 = v102;
    a4 = v103;
    v53 = v100;
LABEL_63:
    v54 = a2;
    if (v29 != v51)
    {
      v54 = v29;
      if (v51 != a2)
      {
        v55 = v52;
        v56 = sub_1C5049D5C(v29, v51, a2);
        v52 = v55;
        v24 = v102;
        v54 = v56;
      }
    }
    a5 = -(v53 + v14);
    v57 = v24 - v52;
    if (v53 + v52 >= v24 - (v53 + v52) - v14)
    {
      v57 = v52;
      result = sub_1C50495D0(v54, a2, a3, a4, -(v53 + v14), v24 - v52, a7, a8);
      a2 = v29;
      a5 = v53;
      a3 = v54;
      v12 = v93;
    }
    else
    {
      result = sub_1C50495D0(v96 + v13, v29, v54, a4, v53, v52, a7, a8);
      v12 = (uint64_t)v54;
    }
    v102 = v57;
  }
  while (v57);
  return result;
}

uint64_t *sub_1C5049D5C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t *i;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  v3 = *a1;
  *a1 = *a2;
  *a2 = v3;
  LODWORD(v3) = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v3;
  result = a1 + 2;
  for (i = a2 + 2; i != a3; i += 2)
  {
    if (result == a2)
      a2 = i;
    v6 = *result;
    *result = *i;
    *i = v6;
    LODWORD(v6) = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = *((_DWORD *)i + 2);
    *((_DWORD *)i + 2) = v6;
    result += 2;
  }
  if (result != a2)
  {
    v7 = result;
    v8 = a2;
    do
    {
      while (1)
      {
        v9 = *v7;
        *v7 = *v8;
        *v8 = v9;
        LODWORD(v9) = *((_DWORD *)v7 + 2);
        *((_DWORD *)v7 + 2) = *((_DWORD *)v8 + 2);
        *((_DWORD *)v8 + 2) = v9;
        v7 += 2;
        v8 += 2;
        if (v8 == a3)
          break;
        if (v7 == a2)
          a2 = v8;
      }
      v8 = a2;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t *sub_1C5049E20(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t), uint64_t a4, _OWORD *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  unint64_t v29;
  _OWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  char v35;

  v8 = a1;
  if (a4 == 3)
  {
    v11 = a1 + 2;
    if (!(*a3)((uint64_t)(a1 + 2)))
    {
      v21 = v8[2];
      v8[2] = *a2;
      *a2 = v21;
      LODWORD(v21) = *((_DWORD *)v8 + 6);
      *((_DWORD *)v8 + 6) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = v21;
      v22 = *v8;
      *v8 = v8[2];
      v8[2] = v22;
      LODWORD(v22) = *((_DWORD *)v8 + 2);
      *((_DWORD *)v8 + 2) = *((_DWORD *)v8 + 6);
      *((_DWORD *)v8 + 6) = v22;
      return v11;
    }
    v12 = *v8;
    *v8 = v8[2];
    v8[2] = v12;
    v13 = *((_DWORD *)v8 + 2);
    *((_DWORD *)v8 + 2) = *((_DWORD *)v8 + 6);
    *((_DWORD *)v8 + 6) = v13;
    v8[2] = *a2;
    *a2 = v12;
    *((_DWORD *)v8 + 6) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v13;
    return a2;
  }
  if (a4 == 2)
  {
    v10 = *a1;
    *a1 = *a2;
    *a2 = v10;
    LODWORD(v10) = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v10;
    return a2;
  }
  if (a6 >= a4)
  {
    *a5 = *(_OWORD *)a1;
    v23 = a5 + 1;
    v24 = (uint64_t)(a1 + 2);
    if (a1 + 2 == a2)
    {
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 6);
      v11 = a2;
    }
    else
    {
      do
      {
        if ((*a3)(v24))
        {
          *v8 = *(_QWORD *)v24;
          *((_DWORD *)v8 + 2) = *(_DWORD *)(v24 + 8);
          v8 += 2;
        }
        else
        {
          *v23++ = *(_OWORD *)v24;
        }
        v24 += 16;
      }
      while ((uint64_t *)v24 != a2);
      *v8 = *a2;
      *((_DWORD *)v8 + 2) = *(_DWORD *)(v24 + 8);
      v11 = v8 + 2;
      if (v23 <= a5)
        return v11;
    }
    v29 = 0;
    do
    {
      v30 = &a5[v29 / 0x10];
      v31 = &v11[v29 / 8];
      *v31 = *(_QWORD *)&a5[v29 / 0x10];
      *((_DWORD *)v31 + 2) = DWORD2(a5[v29 / 0x10]);
      v29 += 16;
    }
    while (v30 + 1 < v23);
    return v11;
  }
  if (a4 >= 0)
    v16 = a4;
  else
    v16 = a4 + 1;
  v17 = v16 >> 1;
  v18 = &a1[2 * (v16 >> 1)];
  v19 = (uint64_t)(v18 - 2);
  if (((*a3)((uint64_t)(v18 - 2)) & 1) != 0)
  {
    v20 = v17;
LABEL_25:
    v28 = (uint64_t *)sub_1C5049E20(v8, v19, a3, v20, a5, a6);
  }
  else
  {
    v25 = 16 * v17;
    v20 = v17;
    while (1)
    {
      v26 = v25 - 16;
      if (v25 == 16)
        break;
      --v20;
      v27 = (*a3)((uint64_t)v8 + v25 - 32);
      v25 = v26;
      if (v27)
      {
        v19 = (uint64_t)v8 + v26 - 16;
        goto LABEL_25;
      }
    }
    v28 = v8;
  }
  v32 = a4 - v17;
  if ((*a3)((uint64_t)v18))
  {
    v11 = a2 + 2;
    v33 = &v8[2 * v17];
    v34 = v33 + 2;
    while (v34 != a2)
    {
      --v32;
      v35 = (*a3)((uint64_t)v34);
      v33 += 2;
      v34 += 2;
      if ((v35 & 1) == 0)
        goto LABEL_37;
    }
  }
  else
  {
    v33 = v18;
LABEL_37:
    v11 = (uint64_t *)sub_1C5049E20(v33, a2, a3, v32, a5, a6);
  }
  if (v28 != v18)
  {
    if (v18 == v11)
      return v28;
    else
      return sub_1C5049D5C(v28, v18, v11);
  }
  return v11;
}

_QWORD *sub_1C504A120(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C49D7AB8(a1, 2 * v7);
    v8 = *a3;
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
    v12 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = a4;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
        v12 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      v8 = *a4;
      goto LABEL_4;
    }
    sub_1C49D7AB8(a1, v7);
    v8 = *a3;
    v17 = *(_DWORD *)(a1 + 16) - 1;
    v18 = ((*a3 >> 4) ^ (*a3 >> 9)) & v17;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
    v19 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v20 = 1;
      while (v19 != -4096)
      {
        if (v13)
          v21 = 0;
        else
          v21 = v19 == -8192;
        if (v21)
          v13 = a4;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
        v19 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
LABEL_27:
      if (v13)
        a4 = v13;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C504A298(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4E36534(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C504A2F4((uint64_t)a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C504A2F4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4EADA60(a1, v6);
  v8 = 0;
  sub_1C4E36534((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

unint64_t sub_1C504A3A4(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *i;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned int v26;
  _BOOL4 v28;
  unsigned int v29;
  uint64_t k;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t *v36;
  uint64_t *m;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  BOOL v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t *v64;
  BOOL v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  BOOL v70;
  unsigned int v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned int v74;
  uint64_t *j;
  _BOOL4 v77;
  unsigned int v78;
  unsigned int v79;
  unsigned __int8 *v80;
  unsigned int v81;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned __int8 *v90;
  unsigned int v91;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  uint64_t *v97;
  unsigned int v98;
  uint64_t v99;
  unsigned __int8 *v100;
  unsigned int v101;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned int v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unsigned int v116;
  uint64_t *v117;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  unsigned int v128;
  uint64_t v129;
  unsigned __int8 *v130;
  unsigned int v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 *v135;
  unsigned int v136;
  unsigned __int8 *v137;
  unsigned int v138;
  BOOL v140;
  int64_t v141;
  int64_t v142;
  int64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unsigned __int8 *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned __int8 *v153;
  unsigned int v154;
  unint64_t v155;
  unsigned __int8 *v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int8 *v160;
  unsigned int v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unsigned __int8 *v169;
  unsigned int v170;
  uint64_t v171;
  unsigned __int8 *v172;
  unsigned int v173;
  BOOL v174;
  uint64_t v175;
  unint64_t v176;
  unsigned __int8 *v177;
  unsigned int v178;
  unsigned __int8 *v179;
  BOOL v181;
  BOOL v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unsigned __int8 *v192;
  uint64_t v193;
  unsigned __int8 *v194;
  unsigned int v195;
  BOOL v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  unsigned __int8 *v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unsigned __int8 *v208;
  unsigned int v209;
  BOOL v210;
  uint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned __int8 *v215;
  unsigned int v216;
  unsigned __int8 *v217;
  unsigned int v218;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned __int8 *v226;
  unsigned int v227;
  uint64_t v228;
  unint64_t v229;
  unsigned int v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned __int8 *v235;
  unsigned int v236;
  unsigned int v237;
  BOOL v239;
  unsigned __int8 *v240;
  unsigned int v241;
  unsigned __int8 *v242;
  unsigned int v243;
  BOOL v244;
  BOOL v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned __int8 *v252;
  unsigned int v253;
  unsigned __int8 *v254;
  unsigned int v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unsigned __int8 *v259;
  unsigned int v260;
  BOOL v261;
  unsigned __int8 *v262;
  unsigned int v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unsigned __int8 *v267;
  unsigned int v268;
  BOOL v269;
  unsigned __int8 *v270;
  unsigned int v271;
  BOOL v272;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  i = v8;
  while (2)
  {
    v8 = i;
    v11 = (char *)a2 - (char *)i;
    v12 = a2 - i;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v103 = *(a2 - 1);
        v104 = *i;
        v105 = HIDWORD(*i);
        v106 = *(_QWORD *)(*(_QWORD *)a3 + 168);
        v107 = *(unsigned __int8 **)(v106 + 8 * (HIDWORD(v103) - 1));
        v108 = *v107;
        if (*v107)
        {
          if (v108 - 4 > 0x1E)
          {
            v108 = 1;
          }
          else if ((v107[1] & 0x7F) == 1)
          {
            v108 = 2;
          }
          else
          {
            v108 = 3;
          }
        }
        v240 = *(unsigned __int8 **)(v106 + 8 * (v105 - 1));
        v241 = *v240;
        if (*v240)
        {
          if (v241 - 4 > 0x1E)
          {
            v241 = 1;
          }
          else if ((v240[1] & 0x7F) == 1)
          {
            v241 = 2;
          }
          else
          {
            v241 = 3;
          }
        }
        if (v103 < v104
          || v104 >= v103
          && (v108 < v241 || (v241 >= v108 ? (v244 = HIDWORD(v103) >= v105) : (v244 = 1), !v244)))
        {
          *i = v103;
          *(a2 - 1) = v104;
        }
        return result;
      case 3:
        return (unint64_t)sub_1C504BA38(i, i + 1, a2 - 1, a3);
      case 4:
        return (unint64_t)sub_1C504C3CC(i, i + 1, i + 2, a2 - 1, a3);
      case 5:
        v109 = i + 1;
        v110 = i + 2;
        v111 = i + 3;
        result = (unint64_t)sub_1C504C3CC(i, i + 1, i + 2, i + 3, a3);
        v112 = *(a2 - 1);
        v113 = i[3];
        v114 = *(_QWORD *)(*(_QWORD *)a3 + 168);
        v115 = *(unsigned __int8 **)(v114 + 8 * (HIDWORD(v112) - 1));
        v116 = *v115;
        if (*v115)
        {
          if (v116 - 4 > 0x1E)
          {
            v116 = 1;
          }
          else if ((v115[1] & 0x7F) == 1)
          {
            v116 = 2;
          }
          else
          {
            v116 = 3;
          }
        }
        v242 = *(unsigned __int8 **)(v114 + 8 * (HIDWORD(v113) - 1));
        v243 = *v242;
        if (*v242)
        {
          if (v243 - 4 > 0x1E)
          {
            v243 = 1;
          }
          else if ((v242[1] & 0x7F) == 1)
          {
            v243 = 2;
          }
          else
          {
            v243 = 3;
          }
        }
        if (v112 < v113
          || v113 >= v112
          && (v116 < v243 || (v243 >= v116 ? (v245 = HIDWORD(v112) >= HIDWORD(v113)) : (v245 = 1), !v245)))
        {
          *v111 = v112;
          *(a2 - 1) = v113;
          v246 = *v111;
          v247 = *v110;
          v248 = HIDWORD(*v111);
          v249 = HIDWORD(*v110);
          v250 = *(_QWORD *)(*(_QWORD *)a3 + 168);
          v251 = (v248 - 1);
          v252 = *(unsigned __int8 **)(v250 + 8 * v251);
          v253 = *v252;
          if (*v252)
          {
            if (v253 - 4 > 0x1E)
            {
              v253 = 1;
            }
            else if ((v252[1] & 0x7F) == 1)
            {
              v253 = 2;
            }
            else
            {
              v253 = 3;
            }
          }
          v254 = *(unsigned __int8 **)(v250 + 8 * (v249 - 1));
          v255 = *v254;
          if (*v254)
          {
            if (v255 - 4 > 0x1E)
            {
              v255 = 1;
            }
            else if ((v254[1] & 0x7F) == 1)
            {
              v255 = 2;
            }
            else
            {
              v255 = 3;
            }
          }
          if (v246 < v247
            || v247 >= v246
            && (v253 < v255 || (v255 >= v253 ? (v261 = v248 >= v249) : (v261 = 1), !v261)))
          {
            *v110 = v246;
            *v111 = v247;
            v256 = *v109;
            v257 = HIDWORD(*v109);
            v258 = *(_QWORD *)(*(_QWORD *)a3 + 168);
            v259 = *(unsigned __int8 **)(v258 + 8 * v251);
            v260 = *v259;
            if (*v259)
            {
              if (v260 - 4 > 0x1E)
              {
                v260 = 1;
              }
              else if ((v259[1] & 0x7F) == 1)
              {
                v260 = 2;
              }
              else
              {
                v260 = 3;
              }
            }
            v262 = *(unsigned __int8 **)(v258 + 8 * (v257 - 1));
            v263 = *v262;
            if (*v262)
            {
              if (v263 - 4 > 0x1E)
              {
                v263 = 1;
              }
              else if ((v262[1] & 0x7F) == 1)
              {
                v263 = 2;
              }
              else
              {
                v263 = 3;
              }
            }
            if (v246 < v256
              || v256 >= v246
              && (v260 < v263 || (v263 >= v260 ? (v269 = v248 >= v257) : (v269 = 1), !v269)))
            {
              i[1] = v246;
              i[2] = v256;
              v264 = *i;
              v265 = HIDWORD(*i);
              v266 = *(_QWORD *)(*(_QWORD *)a3 + 168);
              v267 = *(unsigned __int8 **)(v266 + 8 * v251);
              v268 = *v267;
              if (*v267)
              {
                if (v268 - 4 > 0x1E)
                {
                  v268 = 1;
                }
                else if ((v267[1] & 0x7F) == 1)
                {
                  v268 = 2;
                }
                else
                {
                  v268 = 3;
                }
              }
              v270 = *(unsigned __int8 **)(v266 + 8 * (v265 - 1));
              v271 = *v270;
              if (*v270)
              {
                if (v271 - 4 > 0x1E)
                {
                  v271 = 1;
                }
                else if ((v270[1] & 0x7F) == 1)
                {
                  v271 = 2;
                }
                else
                {
                  v271 = 3;
                }
              }
              if (v246 < v264
                || v264 >= v246
                && (v268 < v271 || (v271 >= v268 ? (v272 = v248 >= v265) : (v272 = 1), !v272)))
              {
                *i = v246;
                i[1] = v264;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          v117 = i + 1;
          v119 = i == a2 || v117 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v119)
            {
              v120 = 0;
              v121 = *(_QWORD *)a3;
              v122 = i;
              do
              {
                v123 = v122;
                v122 = v117;
                v124 = v123[1];
                v125 = *(_QWORD *)(v121 + 168);
                v126 = (HIDWORD(v124) - 1);
                v127 = *(unsigned __int8 **)(v125 + 8 * v126);
                v128 = *v127;
                if (*v127)
                {
                  if (v128 - 4 > 0x1E)
                  {
                    v128 = 1;
                  }
                  else if ((v127[1] & 0x7F) == 1)
                  {
                    v128 = 2;
                  }
                  else
                  {
                    v128 = 3;
                  }
                }
                v129 = *v123;
                result = HIDWORD(*v123);
                v130 = *(unsigned __int8 **)(v125 + 8 * (result - 1));
                v131 = *v130;
                if (*v130)
                {
                  if (v131 - 4 > 0x1E)
                  {
                    v131 = 1;
                  }
                  else if ((v130[1] & 0x7F) == 1)
                  {
                    v131 = 2;
                  }
                  else
                  {
                    v131 = 3;
                  }
                }
                if (v124 < v129
                  || v129 >= v124
                  && (v128 < v131 || (v131 >= v128 ? (v140 = HIDWORD(v124) >= result) : (v140 = 1), !v140)))
                {
                  v123[1] = v129;
                  v132 = i;
                  if (v123 != i)
                  {
                    v133 = v120;
                    while (1)
                    {
                      v134 = *(_QWORD *)(*(_QWORD *)a3 + 168);
                      v135 = *(unsigned __int8 **)(v134 + 8 * v126);
                      v136 = *v135;
                      if (*v135)
                      {
                        if (v136 - 4 > 0x1E)
                        {
                          v136 = 1;
                        }
                        else if ((v135[1] & 0x7F) == 1)
                        {
                          v136 = 2;
                        }
                        else
                        {
                          v136 = 3;
                        }
                      }
                      result = *(uint64_t *)((char *)i + v133 - 8);
                      v137 = *(unsigned __int8 **)(v134 + 8 * (HIDWORD(result) - 1));
                      v138 = *v137;
                      if (*v137)
                      {
                        if (v138 - 4 > 0x1E)
                        {
                          v138 = 1;
                        }
                        else if ((v137[1] & 0x7F) == 1)
                        {
                          v138 = 2;
                        }
                        else
                        {
                          v138 = 3;
                        }
                      }
                      if (v124 >= result)
                      {
                        if (result < v124)
                        {
                          v132 = (uint64_t *)((char *)i + v133);
                          goto LABEL_332;
                        }
                        if (v136 >= v138 && (v138 < v136 || HIDWORD(v124) >= HIDWORD(result)))
                          break;
                      }
                      --v123;
                      *(uint64_t *)((char *)i + v133) = result;
                      v133 -= 8;
                      if (!v133)
                      {
                        v132 = i;
                        goto LABEL_332;
                      }
                    }
                    v132 = v123;
                  }
LABEL_332:
                  *v132 = v124;
                  v121 = *(_QWORD *)a3;
                }
                v117 = v122 + 1;
                v120 += 8;
              }
              while (v122 + 1 != a2);
            }
          }
          else if (!v119)
          {
            v221 = *(_QWORD *)a3;
            do
            {
              v222 = v8;
              v8 = v117;
              v223 = v222[1];
              v224 = *(_QWORD *)(v221 + 168);
              v225 = (HIDWORD(v223) - 1);
              v226 = *(unsigned __int8 **)(v224 + 8 * v225);
              v227 = *v226;
              if (*v226)
              {
                if (v227 - 4 > 0x1E)
                {
                  v227 = 1;
                }
                else if ((v226[1] & 0x7F) == 1)
                {
                  v227 = 2;
                }
                else
                {
                  v227 = 3;
                }
              }
              v228 = *v222;
              v229 = HIDWORD(*v222);
              result = *(_QWORD *)(v224 + 8 * (v229 - 1));
              v230 = *(unsigned __int8 *)result;
              if (*(_BYTE *)result)
              {
                if (v230 - 4 > 0x1E)
                {
                  v230 = 1;
                }
                else if ((*(_BYTE *)(result + 1) & 0x7F) == 1)
                {
                  v230 = 2;
                }
                else
                {
                  v230 = 3;
                }
              }
              if (v223 < v228
                || v228 >= v223
                && (v227 < v230 || (v230 >= v227 ? (v239 = HIDWORD(v223) >= v229) : (v239 = 1), !v239)))
              {
                while (1)
                {
                  v231 = v222;
                  v232 = v228;
                  v233 = *--v222;
                  v228 = v233;
                  v222[2] = v232;
                  v234 = *(_QWORD *)(*(_QWORD *)a3 + 168);
                  v235 = *(unsigned __int8 **)(v234 + 8 * v225);
                  v236 = *v235;
                  if (*v235)
                  {
                    if (v236 - 4 > 0x1E)
                    {
                      v236 = 1;
                    }
                    else if ((v235[1] & 0x7F) == 1)
                    {
                      v236 = 2;
                    }
                    else
                    {
                      v236 = 3;
                    }
                  }
                  result = *(_QWORD *)(v234 + 8 * (HIDWORD(v228) - 1));
                  v237 = *(unsigned __int8 *)result;
                  if (*(_BYTE *)result)
                  {
                    if (v237 - 4 > 0x1E)
                    {
                      v237 = 1;
                    }
                    else if ((*(_BYTE *)(result + 1) & 0x7F) == 1)
                    {
                      v237 = 2;
                    }
                    else
                    {
                      v237 = 3;
                    }
                  }
                  if (v223 >= v228)
                  {
                    if (v228 < v223)
                      break;
                    if (v236 >= v237 && (v237 < v236 || HIDWORD(v223) >= HIDWORD(v228)))
                      break;
                  }
                }
                *v231 = v223;
                v221 = *(_QWORD *)a3;
              }
              ++v117;
            }
            while (v8 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (i != a2)
          {
            v141 = (unint64_t)(v12 - 2) >> 1;
            v142 = v141;
            do
            {
              v143 = v142;
              if (v141 >= v142)
              {
                v144 = (2 * v142) | 1;
                v145 = &i[v144];
                v146 = *(_QWORD *)a3;
                if (2 * v143 + 2 >= v12)
                {
                  v149 = *(_QWORD *)(v146 + 168);
                }
                else
                {
                  v147 = *v145;
                  v148 = HIDWORD(*v145);
                  v149 = *(_QWORD *)(v146 + 168);
                  v150 = *(unsigned __int8 **)(v149 + 8 * (v148 - 1));
                  v151 = *v150;
                  if (*v150)
                  {
                    if (v151 - 4 > 0x1E)
                    {
                      v151 = 1;
                    }
                    else if ((v150[1] & 0x7F) == 1)
                    {
                      v151 = 2;
                    }
                    else
                    {
                      v151 = 3;
                    }
                  }
                  v152 = v145[1];
                  v153 = *(unsigned __int8 **)(v149 + 8 * (HIDWORD(v152) - 1));
                  v154 = *v153;
                  if (*v153)
                  {
                    if (v154 - 4 > 0x1E)
                    {
                      v154 = 1;
                    }
                    else if ((v153[1] & 0x7F) == 1)
                    {
                      v154 = 2;
                    }
                    else
                    {
                      v154 = 3;
                    }
                  }
                  if (v147 < v152
                    || v152 >= v147
                    && (v151 < v154 || (v148 < HIDWORD(v152) ? (v182 = v154 >= v151) : (v182 = 0), v182)))
                  {
                    ++v145;
                    v144 = 2 * v143 + 2;
                  }
                }
                result = *v145;
                v155 = HIDWORD(*v145);
                v156 = *(unsigned __int8 **)(v149 + 8 * (v155 - 1));
                v157 = *v156;
                if (*v156)
                {
                  if (v157 - 4 > 0x1E)
                  {
                    v157 = 1;
                  }
                  else if ((v156[1] & 0x7F) == 1)
                  {
                    v157 = 2;
                  }
                  else
                  {
                    v157 = 3;
                  }
                }
                v158 = i[v143];
                v159 = (HIDWORD(v158) - 1);
                v160 = *(unsigned __int8 **)(v149 + 8 * v159);
                v161 = *v160;
                if (*v160)
                {
                  if (v161 - 4 > 0x1E)
                  {
                    v161 = 1;
                  }
                  else if ((v160[1] & 0x7F) == 1)
                  {
                    v161 = 2;
                  }
                  else
                  {
                    v161 = 3;
                  }
                }
                if (result >= v158)
                {
                  if (v158 < result
                    || v157 >= v161 && (v161 >= v157 ? (v181 = v155 >= HIDWORD(v158)) : (v181 = 1), v181))
                  {
                    i[v143] = result;
                    if (v141 >= v144)
                    {
                      while (1)
                      {
                        v163 = 2 * v144;
                        v144 = (2 * v144) | 1;
                        v162 = &i[v144];
                        v164 = v163 + 2;
                        v165 = *(_QWORD *)a3;
                        if (v164 >= v12)
                        {
                          v168 = *(_QWORD *)(v165 + 168);
                        }
                        else
                        {
                          v166 = *v162;
                          v167 = HIDWORD(*v162);
                          v168 = *(_QWORD *)(v165 + 168);
                          v169 = *(unsigned __int8 **)(v168 + 8 * (v167 - 1));
                          v170 = *v169;
                          if (*v169)
                          {
                            if (v170 - 4 > 0x1E)
                            {
                              v170 = 1;
                            }
                            else if ((v169[1] & 0x7F) == 1)
                            {
                              v170 = 2;
                            }
                            else
                            {
                              v170 = 3;
                            }
                          }
                          v171 = v162[1];
                          v172 = *(unsigned __int8 **)(v168 + 8 * (HIDWORD(v171) - 1));
                          v173 = *v172;
                          if (*v172)
                          {
                            if (v173 - 4 > 0x1E)
                            {
                              v173 = 1;
                            }
                            else if ((v172[1] & 0x7F) == 1)
                            {
                              v173 = 2;
                            }
                            else
                            {
                              v173 = 3;
                            }
                          }
                          if (v166 < v171
                            || v171 >= v166
                            && (v170 < v173
                             || (v167 < HIDWORD(v171) ? (v174 = v173 >= v170) : (v174 = 0), v174)))
                          {
                            ++v162;
                            v144 = v164;
                          }
                        }
                        v175 = *v162;
                        v176 = HIDWORD(*v162);
                        v177 = *(unsigned __int8 **)(v168 + 8 * (v176 - 1));
                        v178 = *v177;
                        if (*v177)
                        {
                          if (v178 - 4 > 0x1E)
                          {
                            v178 = 1;
                          }
                          else if ((v177[1] & 0x7F) == 1)
                          {
                            v178 = 2;
                          }
                          else
                          {
                            v178 = 3;
                          }
                        }
                        v179 = *(unsigned __int8 **)(v168 + 8 * v159);
                        result = *v179;
                        if (*v179)
                        {
                          if ((result - 4) > 0x1E)
                          {
                            result = 1;
                          }
                          else if ((v179[1] & 0x7F) == 1)
                          {
                            result = 2;
                          }
                          else
                          {
                            result = 3;
                          }
                        }
                        if (v175 < v158)
                          break;
                        if (v158 >= v175)
                        {
                          if (v178 < result)
                            break;
                          if (result >= v178 && v176 < HIDWORD(v158))
                            break;
                        }
                        *v145 = v175;
                        v145 = v162;
                        if (v141 < v144)
                          goto LABEL_371;
                      }
                    }
                    v162 = v145;
LABEL_371:
                    *v162 = v158;
                  }
                }
              }
              v142 = v143 - 1;
            }
            while (v143);
            do
            {
              v183 = 0;
              v184 = *i;
              v185 = i;
              do
              {
                v186 = v185;
                v185 += v183 + 1;
                v187 = 2 * v183;
                v183 = (2 * v183) | 1;
                v188 = v187 + 2;
                if (v188 < v12)
                {
                  v189 = *v185;
                  v190 = HIDWORD(*v185);
                  v191 = *(_QWORD *)(*(_QWORD *)a3 + 168);
                  v192 = *(unsigned __int8 **)(v191 + 8 * (v190 - 1));
                  result = *v192;
                  if (*v192)
                  {
                    if ((result - 4) > 0x1E)
                    {
                      result = 1;
                    }
                    else if ((v192[1] & 0x7F) == 1)
                    {
                      result = 2;
                    }
                    else
                    {
                      result = 3;
                    }
                  }
                  v193 = v185[1];
                  v194 = *(unsigned __int8 **)(v191 + 8 * (HIDWORD(v193) - 1));
                  v195 = *v194;
                  if (*v194)
                  {
                    if (v195 - 4 > 0x1E)
                    {
                      v195 = 1;
                    }
                    else if ((v194[1] & 0x7F) == 1)
                    {
                      v195 = 2;
                    }
                    else
                    {
                      v195 = 3;
                    }
                  }
                  if (v189 < v193
                    || v193 >= v189
                    && (result < v195
                     || (v190 < HIDWORD(v193) ? (v196 = v195 >= result) : (v196 = 0), v196)))
                  {
                    ++v185;
                    v183 = v188;
                  }
                }
                *v186 = *v185;
              }
              while (v183 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
              if (v185 == --a2)
              {
                *v185 = v184;
              }
              else
              {
                *v185 = *a2;
                *a2 = v184;
                v197 = (char *)v185 - (char *)i + 8;
                if (v197 >= 9)
                {
                  v198 = ((unint64_t)v197 >> 3) - 2;
                  v199 = v198 >> 1;
                  v200 = &i[v198 >> 1];
                  v201 = *v200;
                  result = HIDWORD(*v200);
                  v202 = *(_QWORD *)(*(_QWORD *)a3 + 168);
                  v203 = *(unsigned __int8 **)(v202 + 8 * (result - 1));
                  v204 = *v203;
                  if (*v203)
                  {
                    if (v204 - 4 > 0x1E)
                    {
                      v204 = 1;
                    }
                    else if ((v203[1] & 0x7F) == 1)
                    {
                      v204 = 2;
                    }
                    else
                    {
                      v204 = 3;
                    }
                  }
                  v205 = *v185;
                  v206 = HIDWORD(*v185);
                  v207 = (v206 - 1);
                  v208 = *(unsigned __int8 **)(v202 + 8 * v207);
                  v209 = *v208;
                  if (*v208)
                  {
                    if (v209 - 4 > 0x1E)
                    {
                      v209 = 1;
                    }
                    else if ((v208[1] & 0x7F) == 1)
                    {
                      v209 = 2;
                    }
                    else
                    {
                      v209 = 3;
                    }
                  }
                  if (v201 < v205
                    || v205 >= v201
                    && (v204 < v209
                     || (v209 >= v204 ? (v210 = result >= v206) : (v210 = 1), !v210)))
                  {
                    *v185 = v201;
                    if (v198 >= 2)
                    {
                      while (1)
                      {
                        v212 = v199 - 1;
                        v199 = (v199 - 1) >> 1;
                        v211 = &i[v199];
                        v213 = *v211;
                        result = HIDWORD(*v211);
                        v214 = *(_QWORD *)(*(_QWORD *)a3 + 168);
                        v215 = *(unsigned __int8 **)(v214 + 8 * (result - 1));
                        v216 = *v215;
                        if (*v215)
                        {
                          if (v216 - 4 > 0x1E)
                          {
                            v216 = 1;
                          }
                          else if ((v215[1] & 0x7F) == 1)
                          {
                            v216 = 2;
                          }
                          else
                          {
                            v216 = 3;
                          }
                        }
                        v217 = *(unsigned __int8 **)(v214 + 8 * v207);
                        v218 = *v217;
                        if (*v217)
                        {
                          if (v218 - 4 > 0x1E)
                          {
                            v218 = 1;
                          }
                          else if ((v217[1] & 0x7F) == 1)
                          {
                            v218 = 2;
                          }
                          else
                          {
                            v218 = 3;
                          }
                        }
                        if (v213 >= v205)
                        {
                          if (v205 < v213)
                            break;
                          if (v216 >= v218 && (v218 < v216 || result >= v206))
                            break;
                        }
                        *v200 = v213;
                        v200 = &i[v199];
                        if (v212 <= 1)
                          goto LABEL_498;
                      }
                    }
                    v211 = v200;
LABEL_498:
                    *v211 = v205;
                  }
                }
              }
            }
            while (v12-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &i[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1C504BA38(&v8[(unint64_t)v12 >> 1], v8, a2 - 1, a3);
        }
        else
        {
          sub_1C504BA38(v8, &v8[(unint64_t)v12 >> 1], a2 - 1, a3);
          sub_1C504BA38(v8 + 1, v14 - 1, a2 - 2, a3);
          sub_1C504BA38(v8 + 2, &v8[v13 + 1], a2 - 3, a3);
          sub_1C504BA38(v14 - 1, v14, &v8[v13 + 1], a3);
          v15 = *v8;
          *v8 = *v14;
          *v14 = v15;
        }
        --a4;
        v16 = *v8;
        v17 = *(_QWORD *)a3;
        if ((a5 & 1) == 0)
        {
          v23 = *(v8 - 1);
          v18 = *(_QWORD *)(v17 + 168);
          v24 = *(unsigned __int8 **)(v18 + 8 * (HIDWORD(v23) - 1));
          v25 = *v24;
          if (*v24)
          {
            if (v25 - 4 > 0x1E)
            {
              v25 = 1;
            }
            else if ((v24[1] & 0x7F) == 1)
            {
              v25 = 2;
            }
            else
            {
              v25 = 3;
            }
          }
          v19 = HIDWORD(v16);
          v20 = (HIDWORD(v16) - 1);
          v21 = *(unsigned __int8 **)(v18 + 8 * v20);
          v22 = *v21;
          if (*v21)
          {
            if ((v22 - 4) > 0x1E)
            {
              v26 = 1;
            }
            else if ((v21[1] & 0x7F) == 1)
            {
              v26 = 2;
            }
            else
            {
              v26 = 3;
            }
          }
          else
          {
            v26 = 0;
          }
          if (v23 < v16)
            goto LABEL_31;
          if (v16 >= v23)
          {
            if (v25 < v26)
              goto LABEL_31;
            if (v26 >= v25 && HIDWORD(v23) < HIDWORD(v16))
              goto LABEL_31;
          }
          if (*v21)
          {
            if ((v22 - 4) > 0x1E)
            {
              v66 = 1;
            }
            else if ((v21[1] & 0x7F) == 1)
            {
              v66 = 2;
            }
            else
            {
              v66 = 3;
            }
          }
          else
          {
            v66 = 0;
          }
          v67 = *v9;
          v68 = HIDWORD(*v9);
          result = *(_QWORD *)(v18 + 8 * (v68 - 1));
          v69 = *(unsigned __int8 *)result;
          if (*(_BYTE *)result)
          {
            if (v69 - 4 > 0x1E)
            {
              v69 = 1;
            }
            else if ((*(_BYTE *)(result + 1) & 0x7F) == 1)
            {
              v69 = 2;
            }
            else
            {
              v69 = 3;
            }
          }
          if (v16 >= v67
            && (v67 < v16
             || v66 >= v69 && (v69 >= v66 ? (v70 = HIDWORD(v16) >= v68) : (v70 = 1), v70)))
          {
            for (i = v8 + 1; i < a2; ++i)
            {
              v71 = v22 != 0;
              if ((v22 - 35) >= 0xFFFFFFE1)
              {
                if ((v21[1] & 0x7F) == 1)
                  v71 = 2;
                else
                  v71 = 3;
              }
              v72 = *i;
              result = HIDWORD(*i);
              v73 = *(unsigned __int8 **)(v18 + 8 * (result - 1));
              v74 = *v73;
              if (*v73)
              {
                if (v74 - 4 > 0x1E)
                {
                  v74 = 1;
                }
                else if ((v73[1] & 0x7F) == 1)
                {
                  v74 = 2;
                }
                else
                {
                  v74 = 3;
                }
              }
              if (v16 < v72)
                break;
              if (v72 >= v16)
              {
                if (v71 < v74)
                  break;
                if (v74 >= v71 && HIDWORD(v16) < result)
                  break;
              }
            }
          }
          else
          {
            for (i = v8 + 1; ; ++i)
            {
              v98 = v22 != 0;
              if ((v22 - 35) >= 0xFFFFFFE1)
              {
                if ((v21[1] & 0x7F) == 1)
                  v98 = 2;
                else
                  v98 = 3;
              }
              v99 = *i;
              result = HIDWORD(*i);
              v100 = *(unsigned __int8 **)(v18 + 8 * (result - 1));
              v101 = *v100;
              if (*v100)
              {
                if (v101 - 4 > 0x1E)
                {
                  v101 = 1;
                }
                else if ((v100[1] & 0x7F) == 1)
                {
                  v101 = 2;
                }
                else
                {
                  v101 = 3;
                }
              }
              if (v16 < v99)
                break;
              if (v99 >= v16)
              {
                if (v98 < v101)
                  break;
                if (v101 >= v98 && HIDWORD(v16) < result)
                  break;
              }
            }
          }
          j = a2;
          if (i < a2)
          {
            v77 = v22 != 0;
            v78 = v22 - 35;
            for (j = a2 - 1; ; --j)
            {
              v79 = v77;
              if (v78 >= 0xFFFFFFE1)
              {
                if ((v21[1] & 0x7F) == 1)
                  v79 = 2;
                else
                  v79 = 3;
              }
              result = HIDWORD(v67);
              v80 = *(unsigned __int8 **)(v18 + 8 * (HIDWORD(v67) - 1));
              v81 = *v80;
              if (*v80)
              {
                if (v81 - 4 > 0x1E)
                {
                  v81 = 1;
                }
                else if ((v80[1] & 0x7F) == 1)
                {
                  v81 = 2;
                }
                else
                {
                  v81 = 3;
                }
              }
              if (v16 >= v67)
              {
                if (v67 < v16)
                  break;
                if (v79 >= v81 && (v81 < v79 || HIDWORD(v16) >= HIDWORD(v67)))
                  break;
              }
              v83 = *(j - 1);
              v67 = v83;
            }
          }
          if (i < j)
          {
            v84 = *i;
            v85 = *j;
            do
            {
              *i++ = v85;
              *j = v84;
              v86 = *(_QWORD *)(*(_QWORD *)a3 + 168);
              v87 = *(unsigned __int8 **)(v86 + 8 * v20);
              v88 = *v87 - 35;
              while (1)
              {
                v84 = *i;
                v89 = *v87 != 0;
                if (v88 >= 0xFFFFFFE1)
                {
                  if ((v87[1] & 0x7F) == 1)
                    v89 = 2;
                  else
                    v89 = 3;
                }
                v90 = *(unsigned __int8 **)(v86 + 8 * (HIDWORD(v84) - 1));
                v91 = *v90;
                if (*v90)
                {
                  if (v91 - 4 > 0x1E)
                  {
                    v91 = 1;
                  }
                  else if ((v90[1] & 0x7F) == 1)
                  {
                    v91 = 2;
                  }
                  else
                  {
                    v91 = 3;
                  }
                }
                if (v16 < v84)
                  break;
                if (v84 >= v16)
                {
                  if (v89 < v91)
                    break;
                  if (v91 >= v89 && HIDWORD(v16) < HIDWORD(v84))
                    break;
                }
                ++i;
              }
              while (1)
              {
                v93 = *--j;
                v85 = v93;
                result = *v87 != 0;
                if (v88 >= 0xFFFFFFE1)
                {
                  if ((v87[1] & 0x7F) == 1)
                    result = 2;
                  else
                    result = 3;
                }
                v94 = *(unsigned __int8 **)(v86 + 8 * (HIDWORD(v85) - 1));
                v95 = *v94;
                if (*v94)
                {
                  if (v95 - 4 > 0x1E)
                  {
                    v95 = 1;
                  }
                  else if ((v94[1] & 0x7F) == 1)
                  {
                    v95 = 2;
                  }
                  else
                  {
                    v95 = 3;
                  }
                }
                if (v16 >= v85)
                {
                  if (v85 < v16)
                    break;
                  if (result >= v95 && (v95 < result || HIDWORD(v16) >= HIDWORD(v85)))
                    break;
                }
              }
            }
            while (i < j);
          }
          v97 = i - 1;
          if (i - 1 != v8)
            *v8 = *v97;
          a5 = 0;
          *v97 = v16;
          continue;
        }
        v18 = *(_QWORD *)(v17 + 168);
        v19 = HIDWORD(v16);
        v20 = (HIDWORD(v16) - 1);
        v21 = *(unsigned __int8 **)(v18 + 8 * v20);
        v22 = *v21;
LABEL_31:
        v28 = v22 != 0;
        v29 = v22 - 35;
        for (k = 1; ; ++k)
        {
          v31 = v8[k];
          v32 = *(unsigned __int8 **)(v18 + 8 * (HIDWORD(v31) - 1));
          v33 = *v32;
          if (*v32)
          {
            if (v33 - 4 > 0x1E)
            {
              v33 = 1;
            }
            else if ((v32[1] & 0x7F) == 1)
            {
              v33 = 2;
            }
            else
            {
              v33 = 3;
            }
          }
          v34 = v28;
          if (v29 >= 0xFFFFFFE1)
          {
            if ((v21[1] & 0x7F) == 1)
              v34 = 2;
            else
              v34 = 3;
          }
          if (v16 <= v31)
          {
            if (v16 < v31)
              break;
            if (v33 >= v34 && (v19 <= HIDWORD(v31) || v34 < v33))
              break;
          }
        }
        v36 = &v8[k];
        m = a2 - 1;
        if (k == 1)
        {
          m = a2;
          if (v36 < a2)
          {
            for (m = a2 - 1; ; --m)
            {
              v43 = *m;
              v44 = HIDWORD(*m);
              v45 = *(unsigned __int8 **)(v18 + 8 * (v44 - 1));
              v46 = *v45;
              if (*v45)
              {
                if (v46 - 4 > 0x1E)
                {
                  v46 = 1;
                }
                else if ((v45[1] & 0x7F) == 1)
                {
                  v46 = 2;
                }
                else
                {
                  v46 = 3;
                }
              }
              v47 = v28;
              if (v29 >= 0xFFFFFFE1)
              {
                if ((v21[1] & 0x7F) == 1)
                  v47 = 2;
                else
                  v47 = 3;
              }
              if (v16 > v43)
                break;
              if (v16 >= v43)
              {
                if (v46 < v47)
                  break;
                v48 = v19 > v44 && v47 >= v46;
                v49 = !v48;
                if (v36 >= m || !v49)
                  break;
              }
              else if (v36 >= m)
              {
                break;
              }
            }
          }
        }
        else
        {
          while (1)
          {
            v38 = *m;
            v39 = HIDWORD(*m);
            v40 = *(unsigned __int8 **)(v18 + 8 * (v39 - 1));
            v41 = *v40;
            if (*v40)
            {
              if (v41 - 4 > 0x1E)
              {
                v41 = 1;
              }
              else if ((v40[1] & 0x7F) == 1)
              {
                v41 = 2;
              }
              else
              {
                v41 = 3;
              }
            }
            v42 = v28;
            if (v29 >= 0xFFFFFFE1)
            {
              if ((v21[1] & 0x7F) == 1)
                v42 = 2;
              else
                v42 = 3;
            }
            if (v16 > v38
              || v16 >= v38
              && (v41 < v42 || v19 > v39 && v42 >= v41))
            {
              break;
            }
            --m;
          }
        }
        if (v36 >= m)
        {
          i = v36;
        }
        else
        {
          v50 = *m;
          i = v36;
          v51 = m;
          do
          {
            *i++ = v50;
            *v51 = v31;
            v52 = *(_QWORD *)(*(_QWORD *)a3 + 168);
            v53 = *(unsigned __int8 **)(v52 + 8 * v20);
            v54 = *v53 - 35;
            while (1)
            {
              v31 = *i;
              v55 = HIDWORD(*i);
              v56 = *(unsigned __int8 **)(v52 + 8 * (v55 - 1));
              v57 = *v56;
              if (*v56)
              {
                if (v57 - 4 > 0x1E)
                {
                  v57 = 1;
                }
                else if ((v56[1] & 0x7F) == 1)
                {
                  v57 = 2;
                }
                else
                {
                  v57 = 3;
                }
              }
              v58 = *v53 != 0;
              if (v54 >= 0xFFFFFFE1)
              {
                if ((v53[1] & 0x7F) == 1)
                  v58 = 2;
                else
                  v58 = 3;
              }
              if (v16 <= v31
                && (v16 < v31
                 || v57 >= v58 && (v19 <= v55 || v58 < v57)))
              {
                break;
              }
              ++i;
            }
            do
            {
              v59 = *--v51;
              v50 = v59;
              v60 = HIDWORD(v59);
              v61 = *(unsigned __int8 **)(v52 + 8 * (HIDWORD(v59) - 1));
              v62 = *v61;
              if (*v61)
              {
                if (v62 - 4 > 0x1E)
                {
                  v62 = 1;
                }
                else if ((v61[1] & 0x7F) == 1)
                {
                  v62 = 2;
                }
                else
                {
                  v62 = 3;
                }
              }
              v63 = *v53 != 0;
              if (v54 >= 0xFFFFFFE1)
              {
                if ((v53[1] & 0x7F) == 1)
                  v63 = 2;
                else
                  v63 = 3;
              }
            }
            while (v16 <= v50
                 && (v16 < v50
                  || v62 >= v63 && (v19 <= v60 || v63 < v62)));
          }
          while (i < v51);
        }
        v64 = i - 1;
        if (i - 1 != v8)
          *v8 = *v64;
        *v64 = v16;
        if (v36 < m)
        {
LABEL_136:
          result = sub_1C504A3A4(v8, i - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v65 = sub_1C504BDA8(v8, i - 1, a3);
        result = sub_1C504BDA8(i, a2, a3);
        if (!(_DWORD)result)
        {
          if (v65)
            continue;
          goto LABEL_136;
        }
        a2 = i - 1;
        if (!v65)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C504BA38(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned int v39;
  unsigned __int8 *v40;
  unsigned int v41;
  BOOL v42;
  BOOL v43;

  v4 = *a2;
  v5 = *result;
  v6 = HIDWORD(*a2);
  v7 = HIDWORD(*result);
  v8 = *(_QWORD *)(*(_QWORD *)a4 + 168);
  v9 = *(unsigned __int8 **)(v8 + 8 * (v6 - 1));
  v10 = *v9;
  if (*v9)
  {
    if ((v10 - 4) > 0x1E)
    {
      v11 = 1;
    }
    else if ((v9[1] & 0x7F) == 1)
    {
      v11 = 2;
    }
    else
    {
      v11 = 3;
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = (v7 - 1);
  v13 = *(unsigned __int8 **)(v8 + 8 * v12);
  v14 = *v13;
  if (*v13)
  {
    if (v14 - 4 > 0x1E)
    {
      v14 = 1;
    }
    else if ((v13[1] & 0x7F) == 1)
    {
      v14 = 2;
    }
    else
    {
      v14 = 3;
    }
  }
  if (v4 >= v5)
  {
    if (v5 < v4
      || v11 >= v14 && (v14 >= v11 ? (v15 = v6 >= v7) : (v15 = 1), v15))
    {
      v16 = *a3;
      v17 = HIDWORD(*a3);
      v18 = *(unsigned __int8 **)(v8 + 8 * (v17 - 1));
      v19 = *v18;
      if (*v18)
      {
        if (v19 - 4 > 0x1E)
        {
          v19 = 1;
          if (*v9)
          {
LABEL_28:
            if ((v10 - 4) > 0x1E)
            {
              v20 = 1;
            }
            else if ((v9[1] & 0x7F) == 1)
            {
              v20 = 2;
            }
            else
            {
              v20 = 3;
            }
LABEL_60:
            if (v16 < v4
              || v4 >= v16
              && (v19 < v20 || v17 < v6 && v20 >= v19))
            {
              *a2 = v16;
              *a3 = v4;
              v31 = *a2;
              v32 = *result;
              v33 = HIDWORD(*a2);
              v34 = HIDWORD(*result);
              v35 = *(_QWORD *)(*(_QWORD *)a4 + 168);
              v36 = *(unsigned __int8 **)(v35 + 8 * (v33 - 1));
              v37 = *v36;
              if (*v36)
              {
                if (v37 - 4 > 0x1E)
                {
                  v37 = 1;
                }
                else if ((v36[1] & 0x7F) == 1)
                {
                  v37 = 2;
                }
                else
                {
                  v37 = 3;
                }
              }
              v40 = *(unsigned __int8 **)(v35 + 8 * (v34 - 1));
              v41 = *v40;
              if (*v40)
              {
                if (v41 - 4 > 0x1E)
                {
                  v41 = 1;
                }
                else if ((v40[1] & 0x7F) == 1)
                {
                  v41 = 2;
                }
                else
                {
                  v41 = 3;
                }
              }
              if (v31 < v32
                || v32 >= v31
                && (v37 < v41 || (v41 >= v37 ? (v43 = v33 >= v34) : (v43 = 1), !v43)))
              {
                *result = v31;
                *a2 = v32;
              }
            }
            return result;
          }
LABEL_59:
          v20 = 0;
          goto LABEL_60;
        }
        if ((v18[1] & 0x7F) == 1)
          v19 = 2;
        else
          v19 = 3;
      }
      if (*v9)
        goto LABEL_28;
      goto LABEL_59;
    }
  }
  v21 = *a3;
  v22 = HIDWORD(*a3);
  v23 = *(unsigned __int8 **)(v8 + 8 * (v22 - 1));
  v24 = *v23;
  if (!*v23)
    goto LABEL_37;
  if (v24 - 4 <= 0x1E)
  {
    if ((v23[1] & 0x7F) == 1)
      v24 = 2;
    else
      v24 = 3;
LABEL_37:
    if (*v9)
      goto LABEL_38;
    goto LABEL_44;
  }
  v24 = 1;
  if (*v9)
  {
LABEL_38:
    if ((v10 - 4) > 0x1E)
    {
      v25 = 1;
    }
    else if ((v9[1] & 0x7F) == 1)
    {
      v25 = 2;
    }
    else
    {
      v25 = 3;
    }
    goto LABEL_45;
  }
LABEL_44:
  v25 = 0;
LABEL_45:
  if (v21 < v4
    || v4 >= v21 && (v24 < v25 || v22 < v6 && v25 >= v24))
  {
    *result = v21;
LABEL_92:
    *a3 = v5;
    return result;
  }
  *result = v4;
  *a2 = v5;
  v26 = *a3;
  v27 = HIDWORD(*a3);
  v28 = *(_QWORD *)(*(_QWORD *)a4 + 168);
  v29 = *(unsigned __int8 **)(v28 + 8 * (v27 - 1));
  v30 = *v29;
  if (*v29)
  {
    if (v30 - 4 > 0x1E)
    {
      v30 = 1;
    }
    else if ((v29[1] & 0x7F) == 1)
    {
      v30 = 2;
    }
    else
    {
      v30 = 3;
    }
  }
  v38 = *(unsigned __int8 **)(v28 + 8 * v12);
  v39 = *v38;
  if (*v38)
  {
    if (v39 - 4 > 0x1E)
    {
      v39 = 1;
    }
    else if ((v38[1] & 0x7F) == 1)
    {
      v39 = 2;
    }
    else
    {
      v39 = 3;
    }
  }
  if (v26 < v5
    || v5 >= v26
    && (v30 < v39 || (v39 >= v30 ? (v42 = v27 >= v7) : (v42 = 1), !v42)))
  {
    *a2 = v26;
    goto LABEL_92;
  }
  return result;
}

BOOL sub_1C504BDA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  BOOL v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unsigned __int8 *v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned int v67;
  BOOL v68;
  unsigned __int8 *v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned int v75;
  BOOL v76;
  unsigned __int8 *v77;
  unsigned int v78;
  BOOL v79;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = HIDWORD(*a1);
      v11 = *(_QWORD *)(*(_QWORD *)a3 + 168);
      v12 = *(unsigned __int8 **)(v11 + 8 * (HIDWORD(v8) - 1));
      v13 = *v12;
      if (*v12)
      {
        if (v13 - 4 > 0x1E)
        {
          v13 = 1;
        }
        else if ((v12[1] & 0x7F) == 1)
        {
          v13 = 2;
        }
        else
        {
          v13 = 3;
        }
      }
      v47 = *(unsigned __int8 **)(v11 + 8 * (v10 - 1));
      v48 = *v47;
      if (*v47)
      {
        if (v48 - 4 > 0x1E)
        {
          v48 = 1;
        }
        else if ((v47[1] & 0x7F) == 1)
        {
          v48 = 2;
        }
        else
        {
          v48 = 3;
        }
      }
      if (v8 < v9
        || v9 >= v8
        && (v13 < v48 || (v48 >= v13 ? (v51 = HIDWORD(v8) >= v10) : (v51 = 1), !v51)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1C504BA38(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C504C3CC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v39 = a1 + 1;
      v40 = a1 + 2;
      v41 = a1 + 3;
      sub_1C504C3CC(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v42 = *(a2 - 1);
      v43 = a1[3];
      v44 = *(_QWORD *)(*(_QWORD *)a3 + 168);
      v45 = *(unsigned __int8 **)(v44 + 8 * (HIDWORD(v42) - 1));
      v46 = *v45;
      if (*v45)
      {
        if (v46 - 4 > 0x1E)
        {
          v46 = 1;
        }
        else if ((v45[1] & 0x7F) == 1)
        {
          v46 = 2;
        }
        else
        {
          v46 = 3;
        }
      }
      v49 = *(unsigned __int8 **)(v44 + 8 * (HIDWORD(v43) - 1));
      v50 = *v49;
      if (*v49)
      {
        if (v50 - 4 > 0x1E)
        {
          v50 = 1;
        }
        else if ((v49[1] & 0x7F) == 1)
        {
          v50 = 2;
        }
        else
        {
          v50 = 3;
        }
      }
      if (v42 < v43
        || v43 >= v42
        && (v46 < v50 || (v50 >= v46 ? (v52 = HIDWORD(v42) >= HIDWORD(v43)) : (v52 = 1), !v52)))
      {
        *v41 = v42;
        *(a2 - 1) = v43;
        v53 = *v41;
        v54 = *v40;
        v55 = HIDWORD(*v41);
        v56 = HIDWORD(*v40);
        v57 = *(_QWORD *)(*(_QWORD *)a3 + 168);
        v58 = (v55 - 1);
        v59 = *(unsigned __int8 **)(v57 + 8 * v58);
        v60 = *v59;
        if (*v59)
        {
          if (v60 - 4 > 0x1E)
          {
            v60 = 1;
          }
          else if ((v59[1] & 0x7F) == 1)
          {
            v60 = 2;
          }
          else
          {
            v60 = 3;
          }
        }
        v61 = *(unsigned __int8 **)(v57 + 8 * (v56 - 1));
        v62 = *v61;
        if (*v61)
        {
          if (v62 - 4 > 0x1E)
          {
            v62 = 1;
          }
          else if ((v61[1] & 0x7F) == 1)
          {
            v62 = 2;
          }
          else
          {
            v62 = 3;
          }
        }
        if (v53 < v54
          || v54 >= v53
          && (v60 < v62 || (v62 >= v60 ? (v68 = v55 >= v56) : (v68 = 1), !v68)))
        {
          *v40 = v53;
          *v41 = v54;
          v63 = *v39;
          v64 = HIDWORD(*v39);
          v65 = *(_QWORD *)(*(_QWORD *)a3 + 168);
          v66 = *(unsigned __int8 **)(v65 + 8 * v58);
          v67 = *v66;
          if (*v66)
          {
            if (v67 - 4 > 0x1E)
            {
              v67 = 1;
            }
            else if ((v66[1] & 0x7F) == 1)
            {
              v67 = 2;
            }
            else
            {
              v67 = 3;
            }
          }
          v69 = *(unsigned __int8 **)(v65 + 8 * (v64 - 1));
          v70 = *v69;
          if (*v69)
          {
            if (v70 - 4 > 0x1E)
            {
              v70 = 1;
            }
            else if ((v69[1] & 0x7F) == 1)
            {
              v70 = 2;
            }
            else
            {
              v70 = 3;
            }
          }
          if (v53 < v63
            || v63 >= v53
            && (v67 < v70 || (v70 >= v67 ? (v76 = v55 >= v64) : (v76 = 1), !v76)))
          {
            a1[1] = v53;
            a1[2] = v63;
            v71 = *a1;
            v72 = HIDWORD(*a1);
            v73 = *(_QWORD *)(*(_QWORD *)a3 + 168);
            v74 = *(unsigned __int8 **)(v73 + 8 * v58);
            v75 = *v74;
            if (*v74)
            {
              if (v75 - 4 > 0x1E)
              {
                v75 = 1;
              }
              else if ((v74[1] & 0x7F) == 1)
              {
                v75 = 2;
              }
              else
              {
                v75 = 3;
              }
            }
            v77 = *(unsigned __int8 **)(v73 + 8 * (v72 - 1));
            v78 = *v77;
            if (*v77)
            {
              if (v78 - 4 > 0x1E)
              {
                v78 = 1;
              }
              else if ((v77[1] & 0x7F) == 1)
              {
                v78 = 2;
              }
              else
              {
                v78 = 3;
              }
            }
            if (v53 < v71
              || v71 >= v53
              && (v75 < v78 || (v78 >= v75 ? (v79 = v55 >= v72) : (v79 = 1), !v79)))
            {
              *a1 = v53;
              a1[1] = v71;
            }
          }
        }
      }
      return 1;
    default:
      v14 = a1 + 2;
      sub_1C504BA38(a1, a1 + 1, a1 + 2, a3);
      v15 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      v18 = *(_QWORD *)a3;
      break;
  }
  do
  {
    v19 = *v15;
    v20 = HIDWORD(*v15);
    v21 = *(_QWORD *)(v18 + 168);
    v22 = (v20 - 1);
    v23 = *(unsigned __int8 **)(v21 + 8 * v22);
    v24 = *v23;
    if (*v23)
    {
      if (v24 - 4 > 0x1E)
      {
        v24 = 1;
      }
      else if ((v23[1] & 0x7F) == 1)
      {
        v24 = 2;
      }
      else
      {
        v24 = 3;
      }
    }
    v25 = *v14;
    v26 = HIDWORD(*v14);
    v27 = *(unsigned __int8 **)(v21 + 8 * (v26 - 1));
    v28 = *v27;
    if (*v27)
    {
      if (v28 - 4 > 0x1E)
      {
        v28 = 1;
      }
      else if ((v27[1] & 0x7F) == 1)
      {
        v28 = 2;
      }
      else
      {
        v28 = 3;
      }
    }
    if (v19 < v25
      || v25 >= v19
      && (v24 < v28 || (v28 >= v24 ? (v38 = v20 >= v26) : (v38 = 1), !v38)))
    {
      *v15 = v25;
      v29 = a1;
      if (v14 != a1)
      {
        v30 = v16;
        while (1)
        {
          v31 = *(_QWORD *)(*(_QWORD *)a3 + 168);
          v32 = *(unsigned __int8 **)(v31 + 8 * v22);
          v33 = *v32;
          if (*v32)
          {
            if (v33 - 4 > 0x1E)
            {
              v33 = 1;
            }
            else if ((v32[1] & 0x7F) == 1)
            {
              v33 = 2;
            }
            else
            {
              v33 = 3;
            }
          }
          v34 = *(uint64_t *)((char *)a1 + v30 + 8);
          v35 = *(unsigned __int8 **)(v31 + 8 * (HIDWORD(v34) - 1));
          v36 = *v35;
          if (*v35)
          {
            if (v36 - 4 > 0x1E)
            {
              v36 = 1;
            }
            else if ((v35[1] & 0x7F) == 1)
            {
              v36 = 2;
            }
            else
            {
              v36 = 3;
            }
          }
          if (v19 >= v34)
          {
            if (v34 < v19)
            {
              v29 = (uint64_t *)((char *)a1 + v30 + 16);
              goto LABEL_55;
            }
            if (v33 >= v36 && (v36 < v33 || v20 >= HIDWORD(v34)))
              break;
          }
          --v14;
          *(uint64_t *)((char *)a1 + v30 + 16) = v34;
          v30 -= 8;
          if (v30 == -16)
          {
            v29 = a1;
            goto LABEL_55;
          }
        }
        v29 = v14;
      }
LABEL_55:
      *v29 = v19;
      if (++v17 == 8)
        return v15 + 1 == a2;
      v18 = *(_QWORD *)a3;
    }
    v14 = v15;
    v16 += 8;
    ++v15;
  }
  while (v15 != a2);
  return 1;
}

uint64_t *sub_1C504C3CC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  BOOL v27;
  unsigned __int8 *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  BOOL v37;
  unsigned __int8 *v38;
  unsigned int v39;
  BOOL v40;

  result = sub_1C504BA38(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = HIDWORD(*a4);
  v14 = HIDWORD(*a3);
  v15 = *(_QWORD *)(*(_QWORD *)a5 + 168);
  v16 = *(unsigned __int8 **)(v15 + 8 * (v13 - 1));
  v17 = *v16;
  if (*v16)
  {
    if (v17 - 4 > 0x1E)
    {
      v17 = 1;
    }
    else if ((v16[1] & 0x7F) == 1)
    {
      v17 = 2;
    }
    else
    {
      v17 = 3;
    }
  }
  v18 = *(unsigned __int8 **)(v15 + 8 * (v14 - 1));
  v19 = *v18;
  if (*v18)
  {
    if (v19 - 4 > 0x1E)
    {
      v19 = 1;
    }
    else if ((v18[1] & 0x7F) == 1)
    {
      v19 = 2;
    }
    else
    {
      v19 = 3;
    }
  }
  if (v11 < v12
    || v12 >= v11
    && (v17 < v19 || (v19 >= v17 ? (v27 = v13 >= v14) : (v27 = 1), !v27)))
  {
    *a3 = v11;
    *a4 = v12;
    v20 = *a3;
    v21 = *a2;
    v22 = HIDWORD(*a3);
    v23 = HIDWORD(*a2);
    v24 = *(_QWORD *)(*(_QWORD *)a5 + 168);
    v25 = *(unsigned __int8 **)(v24 + 8 * (v22 - 1));
    v26 = *v25;
    if (*v25)
    {
      if (v26 - 4 > 0x1E)
      {
        v26 = 1;
      }
      else if ((v25[1] & 0x7F) == 1)
      {
        v26 = 2;
      }
      else
      {
        v26 = 3;
      }
    }
    v28 = *(unsigned __int8 **)(v24 + 8 * (v23 - 1));
    v29 = *v28;
    if (*v28)
    {
      if (v29 - 4 > 0x1E)
      {
        v29 = 1;
      }
      else if ((v28[1] & 0x7F) == 1)
      {
        v29 = 2;
      }
      else
      {
        v29 = 3;
      }
    }
    if (v20 < v21
      || v21 >= v20
      && (v26 < v29 || (v29 >= v26 ? (v37 = v22 >= v23) : (v37 = 1), !v37)))
    {
      *a2 = v20;
      *a3 = v21;
      v30 = *a2;
      v31 = *a1;
      v32 = HIDWORD(*a2);
      v33 = HIDWORD(*a1);
      v34 = *(_QWORD *)(*(_QWORD *)a5 + 168);
      v35 = *(unsigned __int8 **)(v34 + 8 * (v32 - 1));
      v36 = *v35;
      if (*v35)
      {
        if (v36 - 4 > 0x1E)
        {
          v36 = 1;
        }
        else if ((v35[1] & 0x7F) == 1)
        {
          v36 = 2;
        }
        else
        {
          v36 = 3;
        }
      }
      v38 = *(unsigned __int8 **)(v34 + 8 * (v33 - 1));
      v39 = *v38;
      if (*v38)
      {
        if (v39 - 4 > 0x1E)
        {
          v39 = 1;
        }
        else if ((v38[1] & 0x7F) == 1)
        {
          v39 = 2;
        }
        else
        {
          v39 = 3;
        }
      }
      if (v30 < v31
        || v31 >= v30
        && (v36 < v39 || (v39 >= v36 ? (v40 = v32 >= v33) : (v40 = 1), !v40)))
      {
        *a1 = v30;
        *a2 = v31;
      }
    }
  }
  return result;
}

uint64_t sub_1C504C634(_DWORD *a1, int *a2)
{
  char v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v4 = sub_1C504C71C((uint64_t)a1, *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 1;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_11;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_11:
    sub_1C504C7C0((uint64_t)a1, v7);
    v8 = 0;
    sub_1C504C71C((uint64_t)a1, *a2, &v8);
    result = v8;
  }
  *a1 += 2;
  if (*(_DWORD *)result != -1)
    --a1[1];
  *(_DWORD *)result = *a2;
  *(_QWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

uint64_t sub_1C504C71C(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -1)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -2;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_DWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1C504C7C0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2 >= 2)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      v12 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    sub_1C504C924(a1, v7, v7 + 16 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = (uint64_t *)&v13;
  if (*(_DWORD *)(a1 + 8) <= 0xFFFFFFFD)
  {
    v13 = *(_DWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 12);
    v15 = *(_DWORD *)(a1 + 20);
    v9 = &v16;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    v10 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v10;
  }
  return sub_1C504C924(a1, (uint64_t)&v13, (uint64_t)v9);
}

uint64_t sub_1C504C924(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(result + 8);
    v9 = (_DWORD *)(result + 24);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_DWORD **)(result + 8);
    v9 = &v8[4 * v7];
  }
  do
  {
    *v8 = -1;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v13 = 0;
      result = sub_1C504C71C((uint64_t)v5, v10, &v13);
      v11 = v13;
      *v13 = *(_DWORD *)a2;
      v12 = *(_QWORD *)(a2 + 4);
      v11[3] = *(_DWORD *)(a2 + 12);
      *(_QWORD *)(v11 + 1) = v12;
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C504C9E8(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 16 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 16 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_3;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

uint64_t *sub_1C504CA68(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1C4DE40D0(a1, v6);
      v16 = 0;
      sub_1C504C9E8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    v7 = *a3;
    goto LABEL_5;
  }
  sub_1C4DE40D0(a1, 2 * v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(_QWORD *)a1 + 16 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 16 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_5;
    }
    if (v12)
      a3 = v12;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C504CB9C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C504CC54(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C504CC54(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 4) != 0xFFFFFFFFFFFFFFFCLL)
    {
      v10 = 0;
      result = sub_1C5034C00((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

_OWORD *sub_1C504CD00(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C504CDC8(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = xmmword_1C85FA4C0;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C504CDC8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v12;
  _DWORD *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_1C85FA4C0;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)(a2 + 8);
    if ((*(_DWORD *)a2 != -1 || v9 != -4) && (*(_DWORD *)a2 != -2 || v9 != -8))
    {
      v13 = 0;
      result = sub_1C5034A28((uint64_t *)v5, a2, (uint64_t *)&v13);
      v12 = v13;
      *v13 = *(_DWORD *)a2;
      *((_QWORD *)v12 + 1) = *(_QWORD *)(a2 + 8);
      v12[4] = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

_QWORD *sub_1C504CE94(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_15:
    v6 = sub_1C504A120(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_15;
  }
  return v6;
}

void sub_1C504CF50(void **a1, unint64_t a2)
{
  _BYTE *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - (_BYTE *)v5) >> 4)
  {
    if (a2)
    {
      v12 = &v5[4 * a2];
      do
      {
        *(_QWORD *)v5 = 0;
        v5[2] = 0;
        v5 += 4;
      }
      while (v5 != v12);
      v5 = v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (char *)v5 - (_BYTE *)*a1;
    v8 = a2 + (v7 >> 4);
    if (v8 >> 60)
      abort();
    v9 = v4 - (_BYTE *)v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_1C4764EE4();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * (v7 >> 4)];
    v14 = &v13[16 * a2];
    v15 = v13;
    do
    {
      *(_QWORD *)v15 = 0;
      *((_DWORD *)v15 + 2) = 0;
      v15 += 16;
    }
    while (v15 != v14);
    v16 = &v11[16 * v10];
    if (v5 == v6)
    {
      v17 = &v11[16 * (v7 >> 4)];
    }
    else
    {
      do
      {
        v17 = v13 - 16;
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v5 -= 4;
        v13 -= 16;
      }
      while (v5 != v6);
    }
    v18 = *a1;
    *a1 = v17;
    a1[1] = v14;
    a1[2] = v16;
    if (v18)
      operator delete(v18);
  }
}

_QWORD *sub_1C504D08C(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_15:
    v6 = sub_1C4DC1798(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_15;
  }
  return v6;
}

void llvm::BitstreamCursor::EnterSubBlock(llvm::BitstreamCursor *this@<X0>, unsigned int *a2@<X2>, int a3@<W1>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  char *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  const std::error_category *v65;
  int v66;
  void **v67;
  uint64_t v68;
  unsigned int v69;
  BOOL v70;
  char v71;
  int v72;
  const char *v73;
  std::error_category *v74;
  const char *v75;
  unsigned int v76;
  std::error_category *v77;
  const char *v78;
  unint64_t v79;
  BOOL v80;
  char *v81;
  void *v82;
  std::error_category *v83;
  void *v84[2];
  uint64_t v85;
  void *v86;
  void *__p;
  char *v88;
  char *v89;
  char *v90;
  char v91;
  uint64_t v92;
  int v93;
  void **v94;
  const char *v95;
  const char *v96;
  uint64_t v97;
  int v98;
  __int16 v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v9 = (unint64_t *)((char *)this + 64);
  v8 = *((_QWORD *)this + 8);
  LODWORD(v86) = *((_DWORD *)this + 9);
  v88 = 0;
  v89 = 0;
  __p = 0;
  v10 = *((unsigned int *)this + 18);
  v11 = &v86;
  if (v10 >= *((_DWORD *)this + 19))
  {
    v79 = v10 + 1;
    v80 = v8 + 32 * v10 > (unint64_t)&v86;
    if (v8 <= (unint64_t)&v86 && v80)
    {
      v81 = (char *)&v86 - v8;
      sub_1C61D04D4((uint64_t)this + 64, v79);
      v8 = *v9;
      v11 = (void **)&v81[*v9];
    }
    else
    {
      sub_1C61D04D4((uint64_t)this + 64, v79);
      v8 = *v9;
      v11 = &v86;
    }
  }
  v12 = *((unsigned int *)this + 18);
  v13 = v8 + 32 * v12;
  *(_DWORD *)v13 = *(_DWORD *)v11;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)(v11 + 1);
  *(_QWORD *)(v13 + 24) = v11[3];
  v14 = v12 + 1;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = 0;
  *((_DWORD *)this + 18) = v12 + 1;
  v15 = (char *)__p;
  if (__p)
  {
    v16 = v88;
    v17 = __p;
    if (v88 != __p)
    {
      do
      {
        v18 = (std::__shared_weak_count *)*((_QWORD *)v16 - 1);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v16 -= 16;
      }
      while (v16 != v15);
      v17 = __p;
    }
    v88 = v15;
    operator delete(v17);
    v14 = *((_DWORD *)this + 18);
  }
  v21 = *((_QWORD *)this + 8) + 32 * v14;
  v22 = *(_QWORD *)(v21 - 24);
  *(_QWORD *)(v21 - 24) = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v22;
  v23 = *(_QWORD *)(v21 - 16);
  *(_QWORD *)(v21 - 16) = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v23;
  v24 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v21 - 8) = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v24;
  v25 = (uint64_t *)*((_QWORD *)this + 42);
  if (v25)
  {
    v27 = *v25;
    v26 = v25[1];
    if (*v25 == v26 || (v28 = v26 - 80, *(_DWORD *)(v26 - 80) != a3))
    {
      v40 = -858993459 * ((unint64_t)(v26 - v27) >> 4);
      if (!(_DWORD)v40)
        goto LABEL_65;
      v28 = v27;
      while (*(_DWORD *)v28 != a3)
      {
        v28 += 80;
        if (!--v40)
          goto LABEL_65;
      }
    }
    v30 = *(uint64_t **)(v28 + 8);
    v29 = *(uint64_t **)(v28 + 16);
    if ((char *)v29 - (char *)v30 < 1)
      goto LABEL_65;
    v31 = ((char *)v29 - (char *)v30) >> 4;
    v32 = *((_QWORD *)this + 5);
    v33 = *((_QWORD *)this + 6);
    v34 = (uint64_t)(v33 - v32) >> 4;
    v35 = (_QWORD *)(v32 + ((v33 - v32) & 0xFFFFFFFFFFFFFFF0));
    if (v31 > (uint64_t)(v24 - v33) >> 4)
    {
      v36 = v34 + v31;
      if ((unint64_t)(v34 + v31) >> 60)
        abort();
      v37 = v24 - v32;
      if (v37 >> 3 > v36)
        v36 = v37 >> 3;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
        v38 = 0xFFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      v90 = (char *)this + 56;
      if (v38)
      {
        if (v38 >> 60)
          sub_1C4764EE4();
        v39 = (char *)operator new(16 * v38);
      }
      else
      {
        v39 = 0;
      }
      v48 = (uint64_t *)&v39[16 * v34];
      v86 = v39;
      __p = v48;
      v89 = &v39[16 * v38];
      v49 = &v48[2 * v31];
      do
      {
        *v48 = *v30;
        v50 = v30[1];
        v48[1] = v50;
        if (v50)
        {
          v51 = (unint64_t *)(v50 + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        v48 += 2;
        v30 += 2;
      }
      while (v48 != v49);
      v88 = (char *)v49;
      sub_1C5030788((_QWORD *)this + 5, &v86, v35);
      v53 = (char *)__p;
      while (1)
      {
        v54 = v88;
        if (v88 == v53)
          break;
        v88 -= 16;
        v55 = (std::__shared_weak_count *)*((_QWORD *)v54 - 1);
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
      }
      if (v86)
        operator delete(v86);
      goto LABEL_65;
    }
    v41 = (uint64_t)(v33 - (_QWORD)v35) >> 4;
    if (v41 >= v31)
    {
      v42 = &v30[2 * v31];
      v44 = (uint64_t *)*((_QWORD *)this + 6);
LABEL_57:
      v58 = (char *)&v35[2 * v31];
      v59 = &v44[-2 * v31];
      v60 = v44;
      if ((unint64_t)v59 < v33)
      {
        v60 = v44;
        do
        {
          *(_OWORD *)v60 = *(_OWORD *)v59;
          v60 += 2;
          *v59 = 0;
          v59[1] = 0;
          v59 += 2;
        }
        while ((unint64_t)v59 < v33);
      }
      *((_QWORD *)this + 6) = v60;
      if (v44 != (uint64_t *)v58)
      {
        v61 = (uint64_t)(v44 - 2);
        v62 = 16 * (((char *)v44 - v58) >> 4);
        v63 = v32 + 16 * v34 - 16;
        do
        {
          sub_1C5030834(v61, (__int128 *)(v63 + v62));
          v61 -= 16;
          v62 -= 16;
        }
        while (v62);
      }
      for (; v30 != v42; v35 += 2)
      {
        sub_1C4D82DC0(v35, v30);
        v30 += 2;
      }
      goto LABEL_65;
    }
    v42 = &v30[2 * v41];
    if (v42 == v29)
    {
      v44 = (uint64_t *)*((_QWORD *)this + 6);
    }
    else
    {
      v43 = &v30[2 * v41];
      v44 = (uint64_t *)*((_QWORD *)this + 6);
      do
      {
        *v44 = *v43;
        v45 = v43[1];
        v44[1] = v45;
        if (v45)
        {
          v46 = (unint64_t *)(v45 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        v43 += 2;
        v44 += 2;
      }
      while (v43 != v29);
    }
    *((_QWORD *)this + 6) = v44;
    if ((uint64_t)(v33 - (_QWORD)v35) >= 1)
      goto LABEL_57;
  }
LABEL_65:
  sub_1C4FF7E04((uint64_t)this, 4u, (uint64_t)&v86);
  if ((__p & 1) != 0)
  {
LABEL_102:
    v82 = v86;
LABEL_103:
    *a4 = v82;
    return;
  }
  v64 = v86;
  if ((v86 & 8) != 0)
  {
    v76 = 0;
    v64 = v86 & 7;
    while (v76 < 0x1D)
    {
      sub_1C4FF7E04((uint64_t)this, 4u, (uint64_t)&v86);
      if ((__p & 1) != 0)
        goto LABEL_102;
      v64 |= (v86 & 7) << (v76 + 3);
      v76 += 3;
      if ((v86 & 8) == 0)
        goto LABEL_67;
    }
    v83 = (std::error_category *)std::generic_category();
    v86 = (void *)92;
    __p = v83;
    v95 = "Unterminated VBR";
    sub_1C5DF1730((_BYTE **)&v95, (uint64_t *)&v86, v84);
    v82 = v84[0];
    goto LABEL_103;
  }
LABEL_67:
  *((_DWORD *)this + 9) = v64;
  if (v64 >= 0x21)
  {
    v65 = std::generic_category();
    v84[0] = 0;
    v84[1] = 0;
    v85 = 0;
    LODWORD(__p) = 0;
    v91 = 0;
    v92 = 0;
    v86 = &unk_1E81A7208;
    v94 = v84;
    v93 = 0;
    v89 = 0;
    v90 = 0;
    v88 = 0;
    v66 = *((_DWORD *)this + 9);
    v95 = (const char *)&unk_1E813F3D8;
    v96 = "can't read more than %zu at a time, trying to read %u";
    v97 = 32;
    v98 = v66;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v86, (uint64_t)&v95);
    v67 = v94;
    v68 = operator new();
    v99 = 260;
    v95 = (const char *)v67;
    *(_QWORD *)v68 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v95, (_QWORD *)(v68 + 8));
    *(_QWORD *)(v68 + 32) = 92;
    *(_QWORD *)(v68 + 40) = v65;
    *(_BYTE *)(v68 + 48) = 1;
    *a4 = v68;
    v86 = off_1E81A6E70;
    if (v93 == 1 && v88)
      MEMORY[0x1CAA32F9C](v88, 0x1000C8077774924);
    if (SHIBYTE(v85) < 0)
      operator delete(v84[0]);
    return;
  }
  v69 = *((_DWORD *)this + 8);
  v70 = v69 >= 0x20;
  v71 = v69 - 32;
  if (v70)
  {
    *((_QWORD *)this + 3) >>= v71;
    v72 = 32;
  }
  else
  {
    v72 = 0;
  }
  *((_DWORD *)this + 8) = v72;
  sub_1C4FF7E04((uint64_t)this, 0x20u, (uint64_t)&v95);
  if ((v96 & 1) != 0)
  {
    v73 = v95;
    v95 = 0;
    *a4 = v73;
    goto LABEL_90;
  }
  if (a2)
    *a2 = v95;
  if (!*((_DWORD *)this + 9))
  {
    v74 = (std::error_category *)std::generic_category();
    v86 = (void *)92;
    __p = v74;
    v75 = "can't enter sub-block: current code size is 0";
LABEL_89:
    v84[0] = (void *)v75;
    sub_1C5DF1730((_BYTE **)v84, (uint64_t *)&v86, a4);
    goto LABEL_90;
  }
  if (!*((_DWORD *)this + 8) && *((_QWORD *)this + 1) <= *((_QWORD *)this + 2))
  {
    v77 = (std::error_category *)std::generic_category();
    v86 = (void *)92;
    __p = v77;
    v75 = "can't enter sub block: already at end of stream";
    goto LABEL_89;
  }
  *a4 = 0;
LABEL_90:
  if ((v96 & 1) != 0)
  {
    v78 = v95;
    v95 = 0;
    if (v78)
      (*(void (**)(const char *))(*(_QWORD *)v78 + 8))(v78);
  }
}

void llvm::BitstreamCursor::skipRecord(llvm::BitstreamCursor *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t *v12;
  unsigned int v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  BOOL v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  const std::error_category *v46;
  const std::error_category *v47;
  const std::error_category *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  const std::error_category *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (a2 == 3)
  {
    sub_1C4FF7E04((uint64_t)this, 6u, (uint64_t)&v54);
    if ((v55 & 1) == 0)
    {
      v7 = v54;
      if ((v54 & 0x20) != 0)
      {
        v44 = 0;
        v7 = v54 & 0x1F;
        while (v44 < 0x1B)
        {
          sub_1C4FF7E04((uint64_t)this, 6u, (uint64_t)&v54);
          if ((v55 & 1) != 0)
            goto LABEL_82;
          v7 |= (v54 & 0x1F) << (v44 + 5);
          v44 += 5;
          if ((v54 & 0x20) == 0)
            goto LABEL_4;
        }
        goto LABEL_91;
      }
LABEL_4:
      sub_1C4FF7E04((uint64_t)this, 6u, (uint64_t)&v54);
      if ((v55 & 1) == 0)
      {
        v8 = v54;
        if ((v54 & 0x20) == 0)
        {
LABEL_6:
          if (!v8)
          {
LABEL_9:
            *(_BYTE *)(a3 + 8) &= ~1u;
            *(_DWORD *)a3 = v7;
            return;
          }
          while (1)
          {
            sub_1C504DE28((uint64_t)&v54, (uint64_t)this, 6u);
            if ((v55 & 1) != 0)
              goto LABEL_82;
            if (!--v8)
              goto LABEL_9;
          }
        }
        v45 = 0;
        v8 = v54 & 0x1F;
        while (v45 < 0x1B)
        {
          sub_1C4FF7E04((uint64_t)this, 6u, (uint64_t)&v54);
          if ((v55 & 1) != 0)
            goto LABEL_82;
          v8 |= (v54 & 0x1F) << (v45 + 5);
          v45 += 5;
          if ((v54 & 0x20) == 0)
            goto LABEL_6;
        }
LABEL_91:
        v48 = std::generic_category();
        v54 = 92;
        v55 = v48;
        v53 = "Unterminated VBR";
        sub_1C5DF1730((_BYTE **)&v53, &v54, &v52);
        v16 = v52;
LABEL_83:
        v43 = *(_BYTE *)(a3 + 8);
LABEL_84:
        *(_BYTE *)(a3 + 8) = v43 | 1;
        goto LABEL_85;
      }
    }
LABEL_82:
    v16 = v54;
    goto LABEL_83;
  }
  v9 = (a2 - 4);
  v10 = *((_QWORD *)this + 5);
  if (v9 >= (*((_QWORD *)this + 6) - v10) >> 4)
  {
    v54 = 92;
    v55 = std::generic_category();
    v53 = "Invalid abbrev number";
    sub_1C5DF1730((_BYTE **)&v53, &v54, (_QWORD *)a3);
    *(_BYTE *)(a3 + 8) |= 1u;
    return;
  }
  v11 = *(_DWORD **)(v10 + 16 * v9);
  v12 = *(uint64_t **)v11;
  v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 8);
  if ((v13 & 1) != 0)
  {
    v17 = *v12;
  }
  else
  {
    v14 = (v13 >> 1) & 7;
    if (v14 == 5 || v14 == 3)
    {
      v54 = 92;
      v55 = std::generic_category();
      v53 = "Abbreviation starts with an Array or a Blob";
      sub_1C5DF1730((_BYTE **)&v53, &v54, &v51);
      *(_BYTE *)(a3 + 8) |= 1u;
      v16 = v51;
LABEL_85:
      *(_QWORD *)a3 = v16;
      return;
    }
    sub_1C504DF84((uint64_t)&v54, (uint64_t)this, *v12, v13);
    if ((v55 & 1) != 0)
      goto LABEL_82;
    LODWORD(v17) = v54;
  }
  v18 = v11[2];
  if (v18 <= 1)
  {
    v42 = *(_BYTE *)(a3 + 8);
    goto LABEL_87;
  }
  v49 = *(_BYTE *)(a3 + 8);
  v19 = 1;
  while (1)
  {
    v20 = *(_QWORD *)v11 + 16 * v19;
    v21 = *(unsigned __int8 *)(v20 + 8);
    if ((v21 & 1) != 0)
      goto LABEL_53;
    v22 = (v21 >> 1) & 7;
    if (v22 != 3 && v22 != 5)
    {
      sub_1C504DF84((uint64_t)&v54, (uint64_t)this, *(_QWORD *)v20, v21);
      if ((v55 & 1) != 0)
        goto LABEL_70;
      goto LABEL_53;
    }
    if ((v21 & 0xE) != 6)
      break;
    sub_1C4FF7E04((uint64_t)this, 6u, (uint64_t)&v54);
    if ((v55 & 1) != 0)
      goto LABEL_70;
    if ((v54 & 0x20) != 0)
    {
      v40 = 0;
      LODWORD(v25) = v54 & 0x1F;
      while (v40 < 0x1B)
      {
        sub_1C4FF7E04((uint64_t)this, 6u, (uint64_t)&v54);
        if ((v55 & 1) != 0)
          goto LABEL_70;
        v25 = ((v54 & 0x1F) << (v40 + 5)) | v25;
        v40 += 5;
        if ((v54 & 0x20) == 0)
        {
          v24 = v3 & 0xFFFFFFFF00000000;
          goto LABEL_31;
        }
      }
      goto LABEL_90;
    }
    v24 = v54;
    v25 = v3 & 0xFFFFFFFF00000000;
LABEL_31:
    v3 = v24 | v25;
    v26 = *(_QWORD *)v11 + 16 * ++v19;
    v27 = (*(unsigned __int8 *)(v26 + 8) >> 1) & 7;
    if (v27 == 1)
    {
      v38 = *((_QWORD *)this + 2);
      v39 = *(_QWORD *)v26 * v3 - *((unsigned int *)this + 8);
LABEL_50:
      v37 = v39 + 8 * v38;
LABEL_51:
      *((_QWORD *)this + 2) = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8;
      *((_DWORD *)this + 8) = 0;
      if ((v37 & 0x3F) != 0)
      {
        sub_1C4FF7E04((uint64_t)this, v37 & 0x3F, (uint64_t)&v54);
        if ((v55 & 1) != 0)
        {
          v16 = v54;
          if (v54)
            goto LABEL_71;
        }
      }
      goto LABEL_53;
    }
    if (v27 == 4)
    {
      v38 = *((_QWORD *)this + 2);
      v39 = (6 * v3) - (unint64_t)*((unsigned int *)this + 8);
      goto LABEL_50;
    }
    if (v27 != 2)
    {
      v46 = std::generic_category();
      v54 = 92;
      v55 = v46;
      v53 = "Array element type can't be an Array or a Blob";
      sub_1C5DF1730((_BYTE **)&v53, &v54, &v50);
      *(_BYTE *)(a3 + 8) = v49 | 1;
      v16 = v50;
      goto LABEL_85;
    }
    v28 = v3;
    if ((_DWORD)v3)
    {
      while (1)
      {
        sub_1C504DE28((uint64_t)&v54, (uint64_t)this, *(_DWORD *)v26);
        if ((v55 & 1) != 0)
          break;
        if (!--v28)
          goto LABEL_53;
      }
LABEL_70:
      v16 = v54;
      goto LABEL_71;
    }
LABEL_53:
    if (++v19 >= v18)
      goto LABEL_86;
  }
  sub_1C4FF7E04((uint64_t)this, 6u, (uint64_t)&v54);
  if ((v55 & 1) != 0)
    goto LABEL_70;
  if ((v54 & 0x20) != 0)
  {
    v41 = 0;
    LODWORD(v30) = v54 & 0x1F;
    while (v41 < 0x1B)
    {
      sub_1C4FF7E04((uint64_t)this, 6u, (uint64_t)&v54);
      if ((v55 & 1) != 0)
        goto LABEL_70;
      v30 = ((v54 & 0x1F) << (v41 + 5)) | v30;
      v41 += 5;
      if ((v54 & 0x20) == 0)
      {
        v29 = v4 & 0xFFFFFFFF00000000;
        goto LABEL_41;
      }
    }
LABEL_90:
    v47 = std::generic_category();
    v54 = 92;
    v55 = v47;
    v53 = "Unterminated VBR";
    sub_1C5DF1730((_BYTE **)&v53, &v54, &v52);
    v16 = v52;
LABEL_71:
    v43 = v49;
    goto LABEL_84;
  }
  v29 = v54;
  v30 = v4 & 0xFFFFFFFF00000000;
LABEL_41:
  v31 = *((_DWORD *)this + 8);
  v32 = v31 >= 0x20;
  v33 = v31 - 32;
  if (v32)
  {
    *((_QWORD *)this + 3) >>= v33;
    v34 = 32;
  }
  else
  {
    v34 = 0;
  }
  v4 = v29 | v30;
  *((_DWORD *)this + 8) = v34;
  v35 = ((8 * (v29 | v30) + 24) & 0xFFFFFFFE0) - v34;
  v36 = *((_QWORD *)this + 1);
  v37 = v35 + 8 * *((_QWORD *)this + 2);
  if (v36 >= v37 >> 3)
    goto LABEL_51;
  *((_QWORD *)this + 2) = v36;
LABEL_86:
  v42 = v49;
LABEL_87:
  *(_BYTE *)(a3 + 8) = v42 & 0xFE;
  *(_DWORD *)a3 = v17;
}

void sub_1C504DE28(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  const std::error_category *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const std::error_category *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  sub_1C4FF7E04(a2, a3, (uint64_t)&v14);
  if ((v15 & 1) != 0)
  {
LABEL_8:
    v9 = v14;
    v10 = *(_BYTE *)(a1 + 8) | 1;
LABEL_10:
    *(_BYTE *)(a1 + 8) = v10;
    goto LABEL_11;
  }
  v6 = 1 << (a3 - 1);
  if ((v14 & v6) == 0)
  {
    v9 = v14;
    v10 = *(_BYTE *)(a1 + 8) & 0xFE;
    goto LABEL_10;
  }
  v7 = ((_DWORD)v6 - 1) & v14;
  v8 = a3 - 1;
  while (v8 < 0x40)
  {
    sub_1C4FF7E04(a2, a3, (uint64_t)&v14);
    if ((v15 & 1) != 0)
      goto LABEL_8;
    v7 |= (unint64_t)(((_DWORD)v6 - 1) & v14) << v8;
    v8 += a3 - 1;
    if ((v14 & v6) == 0)
    {
      *(_BYTE *)(a1 + 8) &= ~1u;
      *(_QWORD *)a1 = v7;
      return;
    }
  }
  v11 = std::generic_category();
  v14 = 92;
  v15 = v11;
  v13 = "Unterminated VBR";
  sub_1C5DF1730((_BYTE **)&v13, &v14, &v12);
  *(_BYTE *)(a1 + 8) |= 1u;
  v9 = v12;
LABEL_11:
  *(_QWORD *)a1 = v9;
}

void sub_1C504DF84(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = (a4 >> 1) & 7;
  if (v5 == 4)
  {
    sub_1C4FF7E04(a2, 6u, (uint64_t)&v8);
    if ((v9 & 1) != 0)
    {
      v6 = v8;
      v7 = *(_BYTE *)(a1 + 8) | 1;
    }
    else
    {
      v6 = aAbcdefghijklmn_0[v8];
      v7 = *(_BYTE *)(a1 + 8) & 0xFE;
    }
    *(_BYTE *)(a1 + 8) = v7;
  }
  else
  {
    if (v5 == 2)
    {
      sub_1C504DE28(a1, a2, a3);
      return;
    }
    sub_1C4FF7E04(a2, a3, (uint64_t)&v8);
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a1 + 8) & 0xFE | v9 & 1;
    v6 = v8;
  }
  *(_QWORD *)a1 = v6;
}

void llvm::BitstreamCursor::readRecord(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned __int8 **a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v5;
  int v9;
  unsigned int v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v18;
  uint64_t *v19;
  unsigned int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  const std::error_category *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  BOOL v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  unint64_t v54;
  unsigned __int8 *v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  char v65;
  char v66;
  unsigned int v67;
  unsigned int v68;
  const std::error_category *v69;
  const std::error_category *v70;
  const std::error_category *v71;
  const std::error_category *v72;
  const std::error_category *v73;
  char *v74;
  std::string *v75;
  std::string::size_type v76;
  __int128 *v77;
  const std::error_category *v78;
  char *v79;
  char *v80;
  const std::error_category *v81;
  const std::error_category *v82;
  std::string *v83;
  std::string::size_type v84;
  __int128 *v85;
  const std::error_category *v86;
  const std::error_category *v87;
  const std::error_category *v88;
  int v89;
  uint64_t v90;
  char v91;
  unsigned __int8 **v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  std::string v104;
  uint64_t v105;
  __int128 *v106;
  uint64_t v107;
  const std::error_category *v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  if (a2 == 3)
  {
    sub_1C4FF7E04(a1, 6u, (uint64_t)&v109);
    if ((BYTE8(v109) & 1) == 0)
    {
      v9 = v109;
      if ((v109 & 0x20) == 0)
      {
LABEL_4:
        sub_1C4FF7E04(a1, 6u, (uint64_t)&v109);
        if ((BYTE8(v109) & 1) != 0)
        {
LABEL_132:
          v74 = (char *)v109;
        }
        else
        {
          v10 = v109;
          if ((v109 & 0x20) == 0)
          {
LABEL_6:
            if (v10 >= (unint64_t)(8 * *(_QWORD *)(a1 + 8)))
            {
              v27 = std::generic_category();
              *(_QWORD *)&v109 = 92;
              *((_QWORD *)&v109 + 1) = v27;
              v104.__r_.__value_.__r.__words[0] = (std::string::size_type)"Size is not plausible";
              sub_1C5DF1730(&v104.__r_.__value_.__l.__data_, (uint64_t *)&v109, &v102);
              *(_BYTE *)(a5 + 8) |= 1u;
              v23 = v102;
              goto LABEL_120;
            }
            v11 = *(unsigned int *)(a3 + 8) + (unint64_t)v10;
            if (v11 > *(unsigned int *)(a3 + 12))
              llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11, 8);
            if (!v10)
            {
              v12 = *(_BYTE *)(a5 + 8);
LABEL_104:
              *(_BYTE *)(a5 + 8) = v12 & 0xFE;
              *(_DWORD *)a5 = v9;
              return;
            }
            v12 = *(_BYTE *)(a5 + 8);
            while (1)
            {
              sub_1C504DE28((uint64_t)&v109, a1, 6u);
              if ((BYTE8(v109) & 1) != 0)
                break;
              v13 = v109;
              v14 = *(unsigned int *)(a3 + 8);
              if (v14 >= *(unsigned int *)(a3 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v14 + 1, 8);
                v14 = *(unsigned int *)(a3 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a3 + 8 * v14) = v13;
              ++*(_DWORD *)(a3 + 8);
              if (!--v10)
                goto LABEL_104;
            }
            v23 = v109;
            v65 = v12 | 1;
LABEL_119:
            *(_BYTE *)(a5 + 8) = v65;
            goto LABEL_120;
          }
          v68 = 0;
          v10 = v109 & 0x1F;
          while (v68 < 0x1B)
          {
            sub_1C4FF7E04(a1, 6u, (uint64_t)&v109);
            if ((BYTE8(v109) & 1) != 0)
              goto LABEL_132;
            v10 |= (v109 & 0x1F) << (v68 + 5);
            v68 += 5;
            if ((v109 & 0x20) == 0)
              goto LABEL_6;
          }
          v88 = std::generic_category();
          *(_QWORD *)&v109 = 92;
          *((_QWORD *)&v109 + 1) = v88;
          v104.__r_.__value_.__r.__words[0] = (std::string::size_type)"Unterminated VBR";
          sub_1C5DF1730(&v104.__r_.__value_.__l.__data_, (uint64_t *)&v109, &v107);
          v74 = (char *)v107;
        }
        v103 = v74;
        sub_1C61D2548(&v103, &v104);
        v75 = std::string::insert(&v104, 0, "Failed to read size: ");
        v76 = v75->__r_.__value_.__r.__words[2];
        v109 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v110 = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        if (v110 >= 0)
          v77 = &v109;
        else
          v77 = (__int128 *)v109;
        v78 = std::generic_category();
        v107 = 92;
        v108 = v78;
        v106 = v77;
        sub_1C5DF1730((_BYTE **)&v106, &v107, &v105);
        *(_BYTE *)(a5 + 8) |= 1u;
        *(_QWORD *)a5 = v105;
        v105 = 0;
        if (SHIBYTE(v110) < 0)
          operator delete((void *)v109);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        v79 = v103;
        if (v103)
          goto LABEL_154;
        return;
      }
      v67 = 0;
      v9 = v109 & 0x1F;
      while (v67 < 0x1B)
      {
        sub_1C4FF7E04(a1, 6u, (uint64_t)&v109);
        if ((BYTE8(v109) & 1) != 0)
          goto LABEL_116;
        v9 |= (v109 & 0x1F) << (v67 + 5);
        v67 += 5;
        if ((v109 & 0x20) == 0)
          goto LABEL_4;
      }
      v87 = std::generic_category();
      *(_QWORD *)&v109 = 92;
      *((_QWORD *)&v109 + 1) = v87;
      v104.__r_.__value_.__r.__words[0] = (std::string::size_type)"Unterminated VBR";
      sub_1C5DF1730(&v104.__r_.__value_.__l.__data_, (uint64_t *)&v109, &v107);
      v23 = v107;
LABEL_117:
      v66 = *(_BYTE *)(a5 + 8);
LABEL_118:
      v65 = v66 | 1;
      goto LABEL_119;
    }
LABEL_116:
    v23 = v109;
    goto LABEL_117;
  }
  v15 = (a2 - 4);
  v16 = *(_QWORD *)(a1 + 40);
  if (v15 >= (*(_QWORD *)(a1 + 48) - v16) >> 4)
  {
    *(_QWORD *)&v109 = 92;
    *((_QWORD *)&v109 + 1) = std::generic_category();
    v104.__r_.__value_.__r.__words[0] = (std::string::size_type)"Invalid abbrev number";
    sub_1C5DF1730(&v104.__r_.__value_.__l.__data_, (uint64_t *)&v109, (_QWORD *)a5);
    *(_BYTE *)(a5 + 8) |= 1u;
    return;
  }
  v18 = *(_DWORD **)(v16 + 16 * v15);
  v19 = *(uint64_t **)v18;
  v20 = *(unsigned __int8 *)(*(_QWORD *)v18 + 8);
  if ((v20 & 1) != 0)
  {
    v24 = *v19;
  }
  else
  {
    v21 = (v20 >> 1) & 7;
    if (v21 == 5 || v21 == 3)
    {
      *(_QWORD *)&v109 = 92;
      *((_QWORD *)&v109 + 1) = std::generic_category();
      v104.__r_.__value_.__r.__words[0] = (std::string::size_type)"Abbreviation starts with an Array or a Blob";
      sub_1C5DF1730(&v104.__r_.__value_.__l.__data_, (uint64_t *)&v109, &v101);
      *(_BYTE *)(a5 + 8) |= 1u;
      v23 = v101;
      goto LABEL_120;
    }
    sub_1C504DF84((uint64_t)&v109, a1, *v19, v20);
    if ((BYTE8(v109) & 1) != 0)
      goto LABEL_116;
    LODWORD(v24) = v109;
  }
  v25 = v18[2];
  if (v25 == 1)
  {
    v26 = *(_BYTE *)(a5 + 8);
LABEL_110:
    *(_BYTE *)(a5 + 8) = v26 & 0xFE;
    *(_DWORD *)a5 = v24;
    return;
  }
  v92 = a4;
  v89 = v24;
  v90 = a3 + 16;
  v91 = *(_BYTE *)(a5 + 8);
  v28 = 1;
  while (1)
  {
    v29 = *(_QWORD *)v18 + 16 * v28;
    v30 = *(unsigned __int8 *)(v29 + 8);
    if ((v30 & 1) != 0)
    {
      v44 = *(_QWORD *)v29;
LABEL_65:
      v50 = *(unsigned int *)(a3 + 8);
      if (v50 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v90, v50 + 1, 8);
        v50 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v50) = v44;
      ++*(_DWORD *)(a3 + 8);
      goto LABEL_68;
    }
    v31 = (v30 >> 1) & 7;
    if (v31 != 3 && v31 != 5)
    {
      sub_1C504DF84((uint64_t)&v109, a1, *(_QWORD *)v29, v30);
      if ((BYTE8(v109) & 1) != 0)
        goto LABEL_108;
      v44 = v109;
      goto LABEL_65;
    }
    if ((v30 & 0xE) != 6)
    {
      sub_1C4FF7E04(a1, 6u, (uint64_t)&v109);
      if ((BYTE8(v109) & 1) != 0)
        goto LABEL_108;
      if ((v109 & 0x20) != 0)
      {
        v64 = 0;
        LODWORD(v46) = v109 & 0x1F;
        while (v64 < 0x1B)
        {
          sub_1C4FF7E04(a1, 6u, (uint64_t)&v109);
          if ((BYTE8(v109) & 1) != 0)
            goto LABEL_108;
          v46 = ((v109 & 0x1F) << (v64 + 5)) | v46;
          v64 += 5;
          if ((v109 & 0x20) == 0)
          {
            v45 = v93 & 0xFFFFFFFF00000000;
            goto LABEL_60;
          }
        }
        v81 = std::generic_category();
        *(_QWORD *)&v109 = 92;
        *((_QWORD *)&v109 + 1) = v81;
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)"Unterminated VBR";
        sub_1C5DF1730(&v104.__r_.__value_.__l.__data_, (uint64_t *)&v109, &v107);
        v23 = v107;
        goto LABEL_109;
      }
      v45 = v109;
      v46 = v93 & 0xFFFFFFFF00000000;
LABEL_60:
      v47 = *(_DWORD *)(a1 + 32);
      v48 = v47 >= 0x20;
      v49 = v47 - 32;
      if (v48)
      {
        *(_QWORD *)(a1 + 24) >>= v49;
        v51 = 32;
      }
      else
      {
        v51 = 0;
      }
      *(_DWORD *)(a1 + 32) = v51;
      v52 = 8 * *(_QWORD *)(a1 + 16) - v51;
      v93 = v45 | v46;
      v53 = (unsigned __int8 *)(v45 | v46);
      v54 = v52 + ((8 * (_QWORD)v53 + 24) & 0xFFFFFFFE0);
      if (*(_QWORD *)(a1 + 8) < v54 >> 3)
      {
        v70 = std::generic_category();
        *(_QWORD *)&v109 = 92;
        *((_QWORD *)&v109 + 1) = v70;
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)"Blob ends too soon";
        sub_1C5DF1730(&v104.__r_.__value_.__l.__data_, (uint64_t *)&v109, &v94);
        *(_BYTE *)(a5 + 8) = v91 | 1;
        v23 = v94;
        goto LABEL_120;
      }
      *(_QWORD *)(a1 + 16) = (v54 >> 3) & 0x1FFFFFFFFFFFFFF8;
      *(_DWORD *)(a1 + 32) = 0;
      if ((v54 & 0x3F) != 0)
      {
        sub_1C4FF7E04(a1, v54 & 0x3F, (uint64_t)&v109);
        if ((BYTE8(v109) & 1) != 0)
        {
          v23 = v109;
          if ((_QWORD)v109)
            goto LABEL_109;
        }
      }
      v55 = (unsigned __int8 *)(*(_QWORD *)a1 + (v52 >> 3));
      if (v92)
      {
        *v92 = v55;
        v92[1] = v53;
      }
      else
      {
        sub_1C503DAE8(a3, v55, &v53[(_QWORD)v55]);
      }
      goto LABEL_68;
    }
    sub_1C4FF7E04(a1, 6u, (uint64_t)&v109);
    if ((BYTE8(v109) & 1) != 0)
    {
LABEL_143:
      v80 = (char *)v109;
      goto LABEL_146;
    }
    if ((v109 & 0x20) != 0)
      break;
    v33 = v109;
    v34 = v5 & 0xFFFFFFFF00000000;
LABEL_39:
    v5 = v33 | v34;
    v35 = v33 | v34;
    if (v35 >= 8 * *(_QWORD *)(a1 + 8))
    {
      v69 = std::generic_category();
      *(_QWORD *)&v109 = 92;
      *((_QWORD *)&v109 + 1) = v69;
      v104.__r_.__value_.__r.__words[0] = (std::string::size_type)"Size is not plausible";
      sub_1C5DF1730(&v104.__r_.__value_.__l.__data_, (uint64_t *)&v109, &v98);
      *(_BYTE *)(a5 + 8) = v91 | 1;
      v23 = v98;
      goto LABEL_120;
    }
    v36 = v35 + *(unsigned int *)(a3 + 8);
    if (v36 > *(unsigned int *)(a3 + 12))
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v90, v36, 8);
    if (v28 + 2 != v25)
    {
      v71 = std::generic_category();
      *(_QWORD *)&v109 = 92;
      *((_QWORD *)&v109 + 1) = v71;
      v104.__r_.__value_.__r.__words[0] = (std::string::size_type)"Array op not second to last";
      sub_1C5DF1730(&v104.__r_.__value_.__l.__data_, (uint64_t *)&v109, &v97);
      *(_BYTE *)(a5 + 8) = v91 | 1;
      v23 = v97;
      goto LABEL_120;
    }
    v37 = *(_QWORD *)v18 + 16 * ++v28;
    v38 = *(unsigned __int8 *)(v37 + 8);
    if ((v38 & 1) != 0)
    {
      v72 = std::generic_category();
      *(_QWORD *)&v109 = 92;
      *((_QWORD *)&v109 + 1) = v72;
      v104.__r_.__value_.__r.__words[0] = (std::string::size_type)"Array element type has to be an encoding of a type";
      sub_1C5DF1730(&v104.__r_.__value_.__l.__data_, (uint64_t *)&v109, &v96);
      *(_BYTE *)(a5 + 8) = v91 | 1;
      v23 = v96;
      goto LABEL_120;
    }
    v39 = (v38 >> 1) & 7;
    switch(v39)
    {
      case 1:
        v59 = v5;
        if ((_DWORD)v5)
        {
          while (1)
          {
            sub_1C4FF7E04(a1, *(_DWORD *)v37, (uint64_t)&v109);
            if ((BYTE8(v109) & 1) != 0)
              goto LABEL_108;
            v60 = v109;
            v61 = *(unsigned int *)(a3 + 8);
            if (v61 >= *(unsigned int *)(a3 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v90, v61 + 1, 8);
              v61 = *(unsigned int *)(a3 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v61) = v60;
            ++*(_DWORD *)(a3 + 8);
            if ((BYTE8(v109) & 1) != 0)
            {
              v62 = v109;
              *(_QWORD *)&v109 = 0;
              if (v62)
                (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
            }
            if (!--v59)
              goto LABEL_68;
          }
        }
        break;
      case 2:
        v56 = v5;
        if ((_DWORD)v5)
        {
          while (1)
          {
            sub_1C504DE28((uint64_t)&v109, a1, *(_DWORD *)v37);
            if ((BYTE8(v109) & 1) != 0)
              goto LABEL_108;
            v57 = v109;
            v58 = *(unsigned int *)(a3 + 8);
            if (v58 >= *(unsigned int *)(a3 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v90, v58 + 1, 8);
              v58 = *(unsigned int *)(a3 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v58) = v57;
            ++*(_DWORD *)(a3 + 8);
            if (!--v56)
              goto LABEL_68;
          }
        }
        break;
      case 4:
        v40 = v5;
        if ((_DWORD)v5)
        {
          while (1)
          {
            sub_1C4FF7E04(a1, 6u, (uint64_t)&v109);
            if ((BYTE8(v109) & 1) != 0)
              break;
            v41 = aAbcdefghijklmn_0[v109];
            v42 = *(unsigned int *)(a3 + 8);
            if (v42 >= *(unsigned int *)(a3 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v90, v42 + 1, 8);
              v42 = *(unsigned int *)(a3 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v42) = v41;
            ++*(_DWORD *)(a3 + 8);
            if ((BYTE8(v109) & 1) != 0)
            {
              v43 = v109;
              *(_QWORD *)&v109 = 0;
              if (v43)
                (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
            }
            if (!--v40)
              goto LABEL_68;
          }
LABEL_108:
          v23 = v109;
LABEL_109:
          v66 = v91;
          goto LABEL_118;
        }
        break;
      default:
        v73 = std::generic_category();
        *(_QWORD *)&v109 = 92;
        *((_QWORD *)&v109 + 1) = v73;
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)"Array element type can't be an Array or a Blob";
        sub_1C5DF1730(&v104.__r_.__value_.__l.__data_, (uint64_t *)&v109, &v95);
        *(_BYTE *)(a5 + 8) = v91 | 1;
        v23 = v95;
LABEL_120:
        *(_QWORD *)a5 = v23;
        return;
    }
LABEL_68:
    if (++v28 == v25)
    {
      v26 = v91;
      LODWORD(v24) = v89;
      goto LABEL_110;
    }
  }
  v63 = 0;
  LODWORD(v34) = v109 & 0x1F;
  while (v63 < 0x1B)
  {
    sub_1C4FF7E04(a1, 6u, (uint64_t)&v109);
    if ((BYTE8(v109) & 1) != 0)
      goto LABEL_143;
    v34 = ((v109 & 0x1F) << (v63 + 5)) | v34;
    v63 += 5;
    if ((v109 & 0x20) == 0)
    {
      v33 = v5 & 0xFFFFFFFF00000000;
      goto LABEL_39;
    }
  }
  v82 = std::generic_category();
  *(_QWORD *)&v109 = 92;
  *((_QWORD *)&v109 + 1) = v82;
  v104.__r_.__value_.__r.__words[0] = (std::string::size_type)"Unterminated VBR";
  sub_1C5DF1730(&v104.__r_.__value_.__l.__data_, (uint64_t *)&v109, &v107);
  v80 = (char *)v107;
LABEL_146:
  v99 = v80;
  sub_1C61D2548(&v99, &v104);
  v83 = std::string::insert(&v104, 0, "Failed to read size: ");
  v84 = v83->__r_.__value_.__r.__words[2];
  v109 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  v110 = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  if (v110 >= 0)
    v85 = &v109;
  else
    v85 = (__int128 *)v109;
  v86 = std::generic_category();
  v107 = 92;
  v108 = v86;
  v106 = v85;
  sub_1C5DF1730((_BYTE **)&v106, &v107, &v100);
  *(_BYTE *)(a5 + 8) = v91 | 1;
  *(_QWORD *)a5 = v100;
  v100 = 0;
  if (SHIBYTE(v110) < 0)
    operator delete((void *)v109);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  v79 = v99;
  if (!v99)
    return;
LABEL_154:
  (*(void (**)(char *))(*(_QWORD *)v79 + 8))(v79);
}

void llvm::BitstreamCursor::ReadAbbrevRecord(llvm::BitstreamCursor *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  int v12;
  const char *v13;
  char v14;
  unint64_t v15;
  _QWORD *v16;
  const char *v17;
  const char *v18;
  const std::error_category *v19;
  const char **v20;
  uint64_t v21;
  const char *v22;
  const std::error_category *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  const char **v27;
  uint64_t *v28;
  const std::error_category *v29;
  char *v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  const std::error_category *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  const char *v41;
  const char *v42;
  char v43;
  uint64_t v44;
  char v45;
  const char *v46;
  char v47;
  uint64_t v48;
  const std::error_category *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v5 = (char *)operator new(0x228uLL);
  *(_QWORD *)v5 = &unk_1E813F300;
  *((_QWORD *)v5 + 1) = 0;
  v6 = (uint64_t)(v5 + 24);
  *(_OWORD *)(v5 + 40) = 0u;
  v7 = (uint64_t)(v5 + 40);
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = v5 + 40;
  *((_QWORD *)v5 + 4) = 0x2000000000;
  v39 = v5 + 24;
  v40 = v5;
  sub_1C4FF7E04((uint64_t)this, 5u, (uint64_t)&v48);
  if ((v49 & 1) != 0)
  {
LABEL_61:
    v34 = v48;
LABEL_62:
    *a2 = v34;
LABEL_50:
    v31 = (unint64_t *)(v5 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      (*(void (**)(char *))(*(_QWORD *)v5 + 16))(v5);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    }
    return;
  }
  v8 = v48;
  if ((v48 & 0x10) != 0)
  {
    v33 = 0;
    v8 = v48 & 0xF;
    while (v33 < 0x1C)
    {
      sub_1C4FF7E04((uint64_t)this, 5u, (uint64_t)&v48);
      if ((v49 & 1) != 0)
        goto LABEL_61;
      v8 |= (v48 & 0xF) << (v33 + 4);
      v33 += 4;
      if ((v48 & 0x10) == 0)
        goto LABEL_3;
    }
    v35 = std::generic_category();
    v48 = 92;
    v49 = v35;
    v46 = "Unterminated VBR";
    sub_1C5DF1730((_BYTE **)&v46, &v48, &v44);
    v34 = v44;
    goto LABEL_62;
  }
LABEL_3:
  if (v8)
  {
    while (1)
    {
      sub_1C4FF7E04((uint64_t)this, 1u, (uint64_t)&v46);
      if ((v47 & 1) != 0)
      {
        v13 = v46;
        v46 = 0;
LABEL_18:
        *a2 = v13;
        v12 = 1;
        goto LABEL_19;
      }
      if (!v46)
        break;
      sub_1C504DE28((uint64_t)&v48, (uint64_t)this, 8u);
      if ((v49 & 1) != 0)
      {
        v13 = (const char *)v48;
        goto LABEL_18;
      }
      v9 = v48;
      v10 = *((unsigned int *)v5 + 8);
      if (v10 >= *((unsigned int *)v5 + 9))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v7, v10 + 1, 16);
        v10 = *((unsigned int *)v5 + 8);
      }
      v2 |= 1uLL;
      v11 = (uint64_t *)(*((_QWORD *)v5 + 3) + 16 * v10);
      *v11 = v9;
      v11[1] = v2;
      ++*((_DWORD *)v5 + 8);
      v12 = 4;
LABEL_19:
      if ((v47 & 1) != 0)
      {
        v17 = v46;
        v46 = 0;
        if (v17)
          (*(void (**)(const char *))(*(_QWORD *)v17 + 8))(v17);
      }
      if ((v12 | 4) != 4)
        goto LABEL_50;
      if (!--v8)
        goto LABEL_45;
    }
    sub_1C4FF7E04((uint64_t)this, 3u, (uint64_t)&v44);
    if ((v45 & 1) != 0)
    {
      v18 = (const char *)v44;
      v44 = 0;
    }
    else
    {
      v14 = v44;
      if ((unint64_t)(v44 - 1) >= 5)
      {
        v19 = std::generic_category();
        v48 = 92;
        v49 = v19;
        v42 = "Invalid encoding";
        v20 = &v42;
LABEL_28:
        sub_1C5DF1730((_BYTE **)v20, &v48, a2);
        goto LABEL_29;
      }
      if ((v44 - 3) < 3)
      {
        v15 = *((unsigned int *)v5 + 8);
        if (v15 >= *((unsigned int *)v5 + 9))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v7, v15 + 1, 16);
          v15 = *((unsigned int *)v5 + 8);
        }
        v12 = 0;
        v16 = (_QWORD *)(*((_QWORD *)v5 + 3) + 16 * v15);
        *v16 = 0;
        v16[1] = v38 & 0xFFFFFFFFFFFFFFF0 | (2 * (v14 & 7));
        v38 = v38 & 0xFFFFFFFFFFFFFFF0 | (2 * (v14 & 7));
        ++*((_DWORD *)v5 + 8);
        goto LABEL_30;
      }
      if ((v44 - 1) >= 2)
        llvm::report_fatal_error((llvm *)"Invalid encoding", (const char *)1);
      sub_1C504DE28((uint64_t)&v42, (uint64_t)this, 5u);
      if ((v43 & 1) == 0)
      {
        v22 = v42;
        if (!v42)
        {
          v24 = *((unsigned int *)v5 + 8);
          if (v24 >= *((unsigned int *)v5 + 9))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v7, v24 + 1, 16);
            v24 = *((unsigned int *)v5 + 8);
          }
          v25 = (_QWORD *)(*((_QWORD *)v5 + 3) + 16 * v24);
          *v25 = 0;
          v25[1] = v37 | 1;
          v37 |= 1uLL;
          ++*((_DWORD *)v5 + 8);
          v12 = 4;
          goto LABEL_30;
        }
        if ((unint64_t)v42 < 0x21)
        {
          v26 = *((unsigned int *)v5 + 8);
          if (v26 >= *((unsigned int *)v5 + 9))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v7, v26 + 1, 16);
            v26 = *((unsigned int *)v5 + 8);
          }
          v12 = 0;
          v27 = (const char **)(*((_QWORD *)v5 + 3) + 16 * v26);
          *v27 = v22;
          v27[1] = (const char *)(v36 & 0xFFFFFFFFFFFFFFF0 | (2 * (v14 & 7)));
          v36 = v36 & 0xFFFFFFFFFFFFFFF0 | (2 * (v14 & 7));
          ++*((_DWORD *)v5 + 8);
          goto LABEL_30;
        }
        v23 = std::generic_category();
        v48 = 92;
        v49 = v23;
        v41 = "Fixed or VBR abbrev record with size > MaxChunkData";
        v20 = &v41;
        goto LABEL_28;
      }
      v18 = v42;
    }
    *a2 = v18;
LABEL_29:
    v12 = 1;
LABEL_30:
    if ((v45 & 1) != 0)
    {
      v21 = v44;
      v44 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    goto LABEL_19;
  }
LABEL_45:
  if (!*((_DWORD *)v5 + 8))
  {
    v29 = std::generic_category();
    v48 = 92;
    v49 = v29;
    v46 = "Abbrev record with no operands";
    sub_1C5DF1730((_BYTE **)&v46, &v48, a2);
    goto LABEL_50;
  }
  v28 = (uint64_t *)*((_QWORD *)this + 6);
  if ((unint64_t)v28 < *((_QWORD *)this + 7))
  {
    *v28 = v6;
    v28[1] = (uint64_t)v5;
    *((_QWORD *)this + 6) = v28 + 2;
    *a2 = 0;
    return;
  }
  v30 = sub_1C5030C7C((char **)this + 5, (uint64_t)&v39);
  v5 = v40;
  *((_QWORD *)this + 6) = v30;
  *a2 = 0;
  if (v5)
    goto LABEL_50;
}

void llvm::BitstreamCursor::ReadBlockInfoBlock(llvm::BitstreamCursor *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  int v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void **v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  int v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  char *v59;
  void *__p[2];
  uint64_t v61;
  void *v62;
  char v63;
  void *v64;
  uint64_t v65;
  _QWORD v66[66];

  v66[64] = *MEMORY[0x1E0C80C00];
  llvm::BitstreamCursor::EnterSubBlock(this, 0, 0, &v64);
  v6 = v64;
  if (v64)
  {
    *(_BYTE *)(a3 + 32) |= 1u;
    *(_QWORD *)a3 = v6;
    return;
  }
  v7 = 0;
  v58 = 0uLL;
  v59 = 0;
  v64 = v66;
  v65 = 0x4000000000;
  while (1)
  {
    sub_1C4FF7B90((uint64_t)this, 2, (uint64_t)__p);
    if (((uint64_t)__p[1] & 1) != 0)
      break;
    switch(LODWORD(__p[0]))
    {
      case 2:
        sub_1C4FF3F30((uint64_t)this, (uint64_t *)&v62);
        v14 = v62;
        if (((uint64_t)__p[1] & 1) != 0)
        {
          v17 = __p[0];
          __p[0] = 0;
          if (v17)
            (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
        }
        if (v14)
          goto LABEL_109;
        break;
      case 1:
        *(_BYTE *)(a3 + 32) &= ~1u;
        *(_OWORD *)a3 = v58;
        *(_QWORD *)(a3 + 16) = v59;
        v58 = 0uLL;
        v59 = 0;
        *(_BYTE *)(a3 + 24) = 1;
        goto LABEL_103;
      case 0:
        goto LABEL_100;
      default:
        if (HIDWORD(__p[0]) == 2)
        {
          if (!v7)
          {
LABEL_100:
            *(_BYTE *)(a3 + 32) &= ~1u;
            *(_BYTE *)a3 = 0;
            *(_BYTE *)(a3 + 24) = 0;
            goto LABEL_103;
          }
          llvm::BitstreamCursor::ReadAbbrevRecord(this, __p);
          v8 = __p[0];
          if (__p[0])
          {
            *(_BYTE *)(a3 + 32) |= 1u;
            *(_QWORD *)a3 = v8;
            goto LABEL_103;
          }
          v9 = *((_QWORD *)this + 6) - 16;
          v10 = *(_OWORD **)(v7 + 16);
          if ((unint64_t)v10 >= *(_QWORD *)(v7 + 24))
          {
            v11 = sub_1C5030C7C((char **)(v7 + 8), v9);
          }
          else
          {
            *v10 = *(_OWORD *)v9;
            v11 = (char *)(v10 + 1);
            *(_QWORD *)v9 = 0;
            *(_QWORD *)(v9 + 8) = 0;
          }
          *(_QWORD *)(v7 + 16) = v11;
          v12 = *((_QWORD *)this + 6);
          v13 = *(std::__shared_weak_count **)(v12 - 8);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          *((_QWORD *)this + 6) = v12 - 16;
        }
        else
        {
          LODWORD(v65) = 0;
          llvm::BitstreamCursor::readRecord((uint64_t)this, SHIDWORD(__p[0]), (uint64_t)&v64, 0, (uint64_t)&v62);
          if ((v63 & 1) != 0)
          {
            v23 = 0;
            v24 = (uint64_t)v62;
            v62 = 0;
            *(_BYTE *)(a3 + 32) |= 1u;
            *(_QWORD *)a3 = v24;
            goto LABEL_95;
          }
          switch((_DWORD)v62)
          {
            case 3:
              if (!v7)
              {
LABEL_48:
                v23 = 0;
                *(_BYTE *)(a3 + 32) &= ~1u;
                *(_BYTE *)a3 = 0;
                *(_BYTE *)(a3 + 24) = 0;
                goto LABEL_95;
              }
              if (a2)
              {
                v26 = *(_DWORD *)v64;
                sub_1C502188C(__p, (uint64_t *)v64 + 1, (uint64_t *)v64 + v65, (8 * v65 - 8) >> 3);
                v27 = *(_QWORD *)(v7 + 64);
                v28 = *(_QWORD *)(v7 + 72);
                if (v27 >= v28)
                {
                  v42 = *(_QWORD *)(v7 + 56);
                  v43 = (uint64_t)(v27 - v42) >> 5;
                  v44 = v43 + 1;
                  if ((unint64_t)(v43 + 1) >> 59)
LABEL_106:
                    abort();
                  v45 = v28 - v42;
                  if (v45 >> 4 > v44)
                    v44 = v45 >> 4;
                  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFE0)
                    v46 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v46 = v44;
                  if (v46)
                  {
                    if (v46 >> 59)
                      goto LABEL_107;
                    v47 = (char *)operator new(32 * v46);
                  }
                  else
                  {
                    v47 = 0;
                  }
                  v48 = &v47[32 * v43];
                  *(_DWORD *)v48 = v26;
                  *((_QWORD *)v48 + 3) = v61;
                  *(_OWORD *)(v48 + 8) = *(_OWORD *)__p;
                  __p[0] = 0;
                  __p[1] = 0;
                  v61 = 0;
                  v49 = *(_QWORD *)(v7 + 56);
                  v50 = *(_QWORD *)(v7 + 64);
                  if (v50 == v49)
                  {
                    v30 = v48 + 32;
                    *(_QWORD *)(v7 + 56) = v48;
                    *(_QWORD *)(v7 + 64) = v48 + 32;
                    *(_QWORD *)(v7 + 72) = &v47[32 * v46];
                  }
                  else
                  {
                    v51 = v46;
                    v52 = &v47[32 * v43];
                    do
                    {
                      v53 = *(_DWORD *)(v50 - 32);
                      v50 -= 32;
                      *((_DWORD *)v52 - 8) = v53;
                      v52 -= 32;
                      v54 = *(_OWORD *)(v50 + 8);
                      *((_QWORD *)v52 + 3) = *(_QWORD *)(v50 + 24);
                      *(_OWORD *)(v52 + 8) = v54;
                      *(_QWORD *)(v50 + 16) = 0;
                      *(_QWORD *)(v50 + 24) = 0;
                      *(_QWORD *)(v50 + 8) = 0;
                    }
                    while (v50 != v49);
                    v50 = *(_QWORD *)(v7 + 56);
                    v55 = *(_QWORD *)(v7 + 64);
                    v30 = v48 + 32;
                    *(_QWORD *)(v7 + 56) = v52;
                    *(_QWORD *)(v7 + 64) = v48 + 32;
                    *(_QWORD *)(v7 + 72) = &v47[32 * v51];
                    while (v55 != v50)
                    {
                      if (*(char *)(v55 - 1) < 0)
                        operator delete(*(void **)(v55 - 24));
                      v55 -= 32;
                    }
                  }
                  if (v50)
                    operator delete((void *)v50);
                }
                else
                {
                  *(_DWORD *)v27 = v26;
                  v29 = v61;
                  *(_OWORD *)(v27 + 8) = *(_OWORD *)__p;
                  *(_QWORD *)(v27 + 24) = v29;
                  __p[1] = 0;
                  v61 = 0;
                  __p[0] = 0;
                  v30 = (char *)(v27 + 32);
                }
                *(_QWORD *)(v7 + 64) = v30;
                if (SHIBYTE(v61) < 0)
                  operator delete(__p[0]);
              }
              break;
            case 2:
              if (!v7)
                goto LABEL_48;
              if (a2)
              {
                sub_1C502188C(__p, (uint64_t *)v64, (uint64_t *)v64 + v65, v65);
                v25 = (void **)(v7 + 32);
                if (*(char *)(v7 + 55) < 0)
                  operator delete(*v25);
                *(_OWORD *)v25 = *(_OWORD *)__p;
                *(_QWORD *)(v7 + 48) = v61;
              }
              break;
            case 1:
              if (!(_DWORD)v65)
                goto LABEL_48;
              v18 = *(_DWORD *)v64;
              v19 = v58;
              if ((_QWORD)v58 == *((_QWORD *)&v58 + 1)
                || (v7 = *((_QWORD *)&v58 + 1) - 80, *(_DWORD *)(*((_QWORD *)&v58 + 1) - 80) != v18))
              {
                v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v58 + 1) - v58) >> 4);
                v21 = -858993459 * ((uint64_t)(*((_QWORD *)&v58 + 1) - v58) >> 4);
                if (-858993459 * ((uint64_t)(*((_QWORD *)&v58 + 1) - v58) >> 4))
                {
                  v7 = v58;
                  while (*(_DWORD *)v7 != v18)
                  {
                    v7 += 80;
                    if (!--v21)
                      goto LABEL_36;
                  }
                }
                else
                {
LABEL_36:
                  if (*((_QWORD *)&v58 + 1) >= (unint64_t)v59)
                  {
                    v31 = v20 + 1;
                    if (v20 + 1 > 0x333333333333333)
                      goto LABEL_106;
                    v57 = *(_DWORD *)v64;
                    if (0x999999999999999ALL * ((uint64_t)&v59[-v58] >> 4) > v31)
                      v31 = 0x999999999999999ALL * ((uint64_t)&v59[-v58] >> 4);
                    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v59[-v58] >> 4) >= 0x199999999999999)
                      v32 = 0x333333333333333;
                    else
                      v32 = v31;
                    if (v32 > 0x333333333333333)
LABEL_107:
                      sub_1C4764EE4();
                    v33 = 5 * v32;
                    v34 = (char *)operator new(80 * v32);
                    v35 = &v34[16 * ((uint64_t)(*((_QWORD *)&v58 + 1) - v58) >> 4)];
                    *(_OWORD *)v35 = 0u;
                    *((_OWORD *)v35 + 1) = 0u;
                    v36 = &v34[16 * v33];
                    v22 = (uint64_t)(v35 + 80);
                    *((_OWORD *)v35 + 2) = 0u;
                    *((_OWORD *)v35 + 3) = 0u;
                    *((_OWORD *)v35 + 4) = 0u;
                    if ((_QWORD)v19 == *((_QWORD *)&v19 + 1))
                    {
                      *(_QWORD *)&v58 = &v34[80 * v20];
                      v59 = v36;
                    }
                    else
                    {
                      v37 = 0;
                      do
                      {
                        v38 = &v35[v37];
                        v39 = *((_QWORD *)&v19 + 1) + v37;
                        *((_DWORD *)v38 - 20) = *(_DWORD *)(*((_QWORD *)&v19 + 1) + v37 - 80);
                        *(_OWORD *)(v38 - 72) = *(_OWORD *)(*((_QWORD *)&v19 + 1) + v37 - 72);
                        *((_QWORD *)v38 - 7) = *(_QWORD *)(*((_QWORD *)&v19 + 1) + v37 - 56);
                        *(_QWORD *)(v39 - 72) = 0;
                        *(_QWORD *)(v39 - 64) = 0;
                        *(_QWORD *)(v39 - 56) = 0;
                        v40 = *(_OWORD *)(*((_QWORD *)&v19 + 1) + v37 - 48);
                        *((_QWORD *)v38 - 4) = *(_QWORD *)(*((_QWORD *)&v19 + 1) + v37 - 32);
                        *((_OWORD *)v38 - 3) = v40;
                        *(_QWORD *)(v39 - 40) = 0;
                        *(_QWORD *)(v39 - 32) = 0;
                        *(_QWORD *)(v39 - 48) = 0;
                        *(_OWORD *)(v38 - 24) = *(_OWORD *)(*((_QWORD *)&v19 + 1) + v37 - 24);
                        *((_QWORD *)v38 - 1) = *(_QWORD *)(*((_QWORD *)&v19 + 1) + v37 - 8);
                        *(_QWORD *)(v39 - 24) = 0;
                        *(_QWORD *)(v39 - 16) = 0;
                        *(_QWORD *)(v39 - 8) = 0;
                        v37 -= 80;
                      }
                      while (*((_QWORD *)&v19 + 1) + v37 != (_QWORD)v19);
                      *(_QWORD *)&v58 = &v35[v37];
                      *((_QWORD *)&v58 + 1) = v35 + 80;
                      v59 = v36;
                      v41 = *((_QWORD *)&v19 + 1) - 72;
                      do
                      {
                        __p[0] = (void *)(v41 + 48);
                        sub_1C4FF890C((void ***)__p);
                        if (*(char *)(v41 + 47) < 0)
                          operator delete(*(void **)(v41 + 24));
                        if (*(_QWORD *)v41)
                        {
                          sub_1C4FF80DC((uint64_t *)v41);
                          operator delete(*(void **)v41);
                        }
                        v41 = *((_QWORD *)&v19 + 1) - 80;
                      }
                      while (*((_QWORD *)&v19 + 1) - 8 != (_QWORD)v19);
                    }
                    if ((_QWORD)v19)
                      operator delete((void *)v19);
                    v18 = v57;
                  }
                  else
                  {
                    v22 = *((_QWORD *)&v58 + 1) + 80;
                    *(_OWORD *)(*((_QWORD *)&v58 + 1) + 48) = 0u;
                    *(_OWORD *)(*((_QWORD *)&v19 + 1) + 64) = 0u;
                    *(_OWORD *)(*((_QWORD *)&v19 + 1) + 16) = 0u;
                    *(_OWORD *)(*((_QWORD *)&v19 + 1) + 32) = 0u;
                    **((_OWORD **)&v19 + 1) = 0u;
                  }
                  *((_QWORD *)&v58 + 1) = v22;
                  *(_DWORD *)(v22 - 80) = v18;
                  v7 = v22 - 80;
                }
              }
              break;
          }
          v23 = 1;
LABEL_95:
          if ((v63 & 1) != 0)
          {
            v56 = (uint64_t)v62;
            v62 = 0;
            if (v56)
              (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
          }
          if ((v23 & 1) == 0)
            goto LABEL_103;
        }
        break;
    }
  }
  v14 = __p[0];
LABEL_109:
  *(_BYTE *)(a3 + 32) |= 1u;
  *(_QWORD *)a3 = v14;
LABEL_103:
  if (v64 != v66)
    free(v64);
  v64 = &v58;
  sub_1C4FF8984((void ***)&v64);
}

_QWORD *llvm::cas::CacheKey::CacheKey(_QWORD *__dst, uint64_t a2)
{
  const void *v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(const void **)(a2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v4 >= 0x17)
    {
      v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v6 = v4 | 7;
      v7 = v6 + 1;
      v5 = operator new(v6 + 1);
      __dst[1] = v4;
      __dst[2] = v7 | 0x8000000000000000;
      *__dst = v5;
    }
    else
    {
      *((_BYTE *)__dst + 23) = v4;
      v5 = __dst;
      if (!v4)
        goto LABEL_11;
    }
    memmove(v5, v3, v4);
LABEL_11:
    *((_BYTE *)v5 + v4) = 0;
    return __dst;
  }
  *__dst = 0;
  __dst[1] = 0;
  __dst[2] = 0;
  return __dst;
}

{
  const void *v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(const void **)(a2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v4 >= 0x17)
    {
      v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v6 = v4 | 7;
      v7 = v6 + 1;
      v5 = operator new(v6 + 1);
      __dst[1] = v4;
      __dst[2] = v7 | 0x8000000000000000;
      *__dst = v5;
    }
    else
    {
      *((_BYTE *)__dst + 23) = v4;
      v5 = __dst;
      if (!v4)
        goto LABEL_11;
    }
    memmove(v5, v3, v4);
LABEL_11:
    *((_BYTE *)v5 + v4) = 0;
    return __dst;
  }
  *__dst = 0;
  __dst[1] = 0;
  __dst[2] = 0;
  return __dst;
}

_QWORD *llvm::cas::CacheKey::CacheKey(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *a2;
  v4 = a2[1];
  return llvm::cas::CacheKey::CacheKey(a1, v2, &v4);
}

{
  uint64_t v2;
  uint64_t v4;

  v2 = *a2;
  v4 = a2[1];
  return llvm::cas::CacheKey::CacheKey(a1, v2, &v4);
}

_QWORD *llvm::cas::CacheKey::CacheKey(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  size_t v4;
  void *v5;
  void *v6;
  size_t v7;
  size_t v8;
  uint64_t v10;
  void *__src;
  size_t __len;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(&v10, a2, *a3);
  v4 = __len;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = __src;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v4;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
    goto LABEL_8;
  }
  *((_BYTE *)a1 + 23) = __len;
  v6 = a1;
  if (v4)
LABEL_8:
    memmove(v6, v5, v4);
  *((_BYTE *)v6 + v4) = 0;
  if (__src != v13)
    free(__src);
  return a1;
}

void llvm::cas::getDefaultOnDiskActionCachePath(_QWORD *a1@<X8>)
{
  void *v3;
  size_t v4;
  void *v5;
  size_t v6;
  size_t v7;
  _QWORD *v8;
  void **v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  _QWORD *v13[4];
  __int16 v14;
  _QWORD *v15[4];
  __int16 v16;
  void *__src;
  size_t __len[2];
  _QWORD v19[17];

  v19[16] = *MEMORY[0x1E0C80C00];
  __src = v19;
  *(_OWORD *)__len = xmmword_1C85F20B0;
  if ((llvm::sys::path::cache_directory(&__src) & 1) == 0)
    llvm::report_fatal_error((llvm *)"cannot get default cache directory", (const char *)1);
  v16 = 261;
  v15[0] = "llvm.cas.builtin.default";
  v15[1] = (_QWORD *)24;
  v14 = 261;
  v13[0] = "actioncache";
  v13[1] = (_QWORD *)11;
  v12 = 257;
  v10 = 257;
  llvm::sys::path::append(&__src, 0, v15, v13, &v11, &v9);
  v3 = __src;
  if (__src)
  {
    v4 = __len[0];
    if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len[0] >= 0x17)
    {
      v6 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17)
        v6 = __len[0] | 7;
      v7 = v6 + 1;
      v8 = operator new(v6 + 1);
      a1[1] = v4;
      a1[2] = v7 | 0x8000000000000000;
      *a1 = v8;
      a1 = v8;
    }
    else
    {
      *((_BYTE *)a1 + 23) = __len[0];
      if (!v4)
      {
LABEL_12:
        *((_BYTE *)a1 + v4) = 0;
        v5 = __src;
        if (__src == v19)
          return;
        goto LABEL_13;
      }
    }
    memmove(a1, v3, v4);
    goto LABEL_12;
  }
  v5 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
LABEL_13:
  free(v5);
}

void llvm::cas::createOnDiskActionCache(uint64_t a1@<X8>)
{
  const char *v3;
  uint64_t v4[2];

  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v4[0] = 3;
  v4[1] = qword_1ED836B58[0];
  v3 = "OnDiskCache is disabled";
  sub_1C5DF1730((_BYTE **)&v3, v4, (_QWORD *)a1);
  *(_BYTE *)(a1 + 8) |= 1u;
}

uint64_t sub_1C504FC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::cas::ThreadSafeHashMappedTrieBase::destroyImpl(a1 + 16, 0, a3);
  return a1;
}

void sub_1C504FCC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::cas::ThreadSafeHashMappedTrieBase::destroyImpl(a1 + 16, 0, a3);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C504FCFC(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *v6;
  int v7;
  __int128 v9;
  uint64_t v10;
  void *v11;
  int64x2_t v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = llvm::cas::ThreadSafeHashMappedTrieBase::find(a1 + 16, a2, a3);
  if (v7 != -2 || v6 == 0)
  {
    *(_BYTE *)(a4 + 72) &= ~1u;
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 64) = 0;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = v13;
    v9 = *((_OWORD *)v6 + 2);
    v13[1] = *((_OWORD *)v6 + 3);
    v13[0] = v9;
    v12 = vdupq_n_s64(0x20uLL);
    *(_BYTE *)(a4 + 72) &= ~1u;
    *(_QWORD *)a4 = v10;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_OWORD *)(a4 + 16) = xmmword_1C677F680;
    sub_1C4FE6ED8(a4 + 8, (uint64_t)&v11);
    *(_BYTE *)(a4 + 64) = 1;
    if (v11 != v13)
      free(v11);
  }
}

void sub_1C504FDEC(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  const void **v10;
  size_t v11;
  _BYTE *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v21;
  unsigned int v22;
  __n128 (*v23)(uint64_t *, uint64_t);
  size_t v24;
  void *v25;
  __n128 (*v26)(uint64_t *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void *v29;
  size_t v30;
  __n128 (*v31)(uint64_t *, uint64_t);
  __int128 v32;
  const std::error_category *v33;
  void **v34;
  void *v35;
  size_t v36;
  int64_t v37;
  void *v38[2];
  char v39;
  _QWORD v40[4];
  __int16 v41;
  _QWORD v42[4];
  __int16 v43;
  _QWORD v44[4];
  __int16 v45;
  _QWORD v46[4];
  __int16 v47;
  _QWORD v48[4];
  __int16 v49;
  void *v50[2];
  char v51;
  void *__p[2];
  char v53;
  void **v54;
  uint64_t v55[2];
  uint64_t v56;
  void *v57;
  __int128 v58;
  _BYTE v59[32];
  _QWORD __dst[4];
  __n128 (*v61)(uint64_t *, uint64_t);
  _BYTE v62[24];
  _OWORD v63[3];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v10 = (const void **)(a4 + 1);
  v11 = a4[2];
  if (v11)
    memmove(__dst, *v10, v11);
  v46[0] = __dst;
  v61 = sub_1C5050204;
  *(_QWORD *)v62 = v46;
  v48[0] = &v61;
  v12 = llvm::cas::ThreadSafeHashMappedTrieBase::insert((unsigned __int16 *)(a1 + 16), 0, 0xFFFFFFFFuLL, (unint64_t)a2, a3, (uint64_t (*)(uint64_t, _BYTE *, void *, size_t))sub_1C50501C8, (uint64_t)v48);
  if (v13 == -2)
    v14 = v12;
  else
    v14 = 0;
  v15 = *((_QWORD *)v14 + 4);
  v16 = *((_QWORD *)v14 + 5);
  v17 = v14 + 32;
  if (__dst[0] == v15 && __dst[1] == v16 && __dst[2] == *((_QWORD *)v17 + 2) && __dst[3] == *((_QWORD *)v17 + 3))
  {
    *a5 = 0;
    return;
  }
  v61 = (__n128 (*)(uint64_t *, uint64_t))&v62[16];
  *(_OWORD *)v62 = xmmword_1C64638C0;
  sub_1C5050254(&v61, 2 * a3);
  if (a3)
  {
    v21 = 0;
    do
    {
      v22 = *a2++;
      *((_BYTE *)v61 + v21) = a0123456789abcd_6[(unint64_t)v22 >> 4] | 0x20;
      *((_BYTE *)v61 + v21 + 1) = a0123456789abcd_6[v22 & 0xF] | 0x20;
      v21 += 2;
      --a3;
    }
    while (a3);
  }
  v23 = v61;
  if (!v61)
  {
    v26 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
LABEL_31:
    free(v26);
    goto LABEL_32;
  }
  v24 = *(_QWORD *)v62;
  if (*(_QWORD *)v62 >= 0x7FFFFFFFFFFFFFF8uLL)
    abort();
  if (*(_QWORD *)v62 >= 0x17uLL)
  {
    v27 = (*(_QWORD *)v62 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((*(_QWORD *)v62 | 7) != 0x17)
      v27 = *(_QWORD *)v62 | 7;
    v28 = v27 + 1;
    v25 = operator new(v27 + 1);
    v36 = v24;
    v37 = v28 | 0x8000000000000000;
    v35 = v25;
    goto LABEL_29;
  }
  HIBYTE(v37) = v62[0];
  v25 = &v35;
  if (*(_QWORD *)v62)
LABEL_29:
    memmove(v25, v23, v24);
  *((_BYTE *)v25 + v24) = 0;
  v26 = v61;
  if ((char *)v61 != &v62[16])
    goto LABEL_31;
LABEL_32:
  if (v37 >= 0)
    v29 = &v35;
  else
    v29 = v35;
  if (v37 >= 0)
    v30 = HIBYTE(v37) & 0x7F;
  else
    v30 = v36;
  v31 = *(__n128 (**)(uint64_t *, uint64_t))(a1 + 8);
  v56 = *a4;
  v57 = v59;
  v58 = xmmword_1C677F680;
  if (a4[2])
    sub_1C50502AC((uint64_t)&v57, (uint64_t)v10);
  v61 = v31;
  *(_QWORD *)v62 = v63;
  v32 = *(_OWORD *)v17;
  v63[1] = *((_OWORD *)v17 + 1);
  v63[0] = v32;
  *(int64x2_t *)&v62[8] = vdupq_n_s64(0x20uLL);
  llvm::cas::CASID::toString((llvm::cas::CASID *)&v61, v50);
  if (*(_OWORD **)v62 != v63)
    free(*(void **)v62);
  v33 = std::generic_category();
  v41 = 1283;
  v40[0] = "cache poisoned for '";
  v40[2] = v29;
  v40[3] = v30;
  v42[0] = v40;
  v42[2] = "' (new='";
  v43 = 770;
  llvm::cas::CASID::toString((llvm::cas::CASID *)&v56, v38);
  v44[0] = v42;
  v44[2] = v38;
  v45 = 1026;
  v46[0] = v44;
  v46[2] = "' vs. existing '";
  v47 = 770;
  v48[0] = v46;
  v48[2] = v50;
  v49 = 1026;
  v61 = (__n128 (*)(uint64_t *, uint64_t))v48;
  *(_QWORD *)&v62[8] = "')";
  LOWORD(v63[0]) = 770;
  llvm::Twine::str((llvm::Twine *)&v61, __p);
  if (v53 >= 0)
    v34 = __p;
  else
    v34 = (void **)__p[0];
  v55[0] = 22;
  v55[1] = (uint64_t)v33;
  v54 = v34;
  sub_1C5DF1730((_BYTE **)&v54, v55, a5);
  if (v53 < 0)
    operator delete(__p[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  if (v57 != v59)
    free(v57);
  if (SHIBYTE(v37) < 0)
    operator delete(v35);
}

uint64_t sub_1C50501C8(void (***a1)(_QWORD, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v4)(_QWORD, _QWORD *);
  void (*v5)(_QWORD, _QWORD *);
  uint64_t v7;
  _QWORD v8[4];

  v7 = 0;
  v5 = **a1;
  v4 = (*a1)[1];
  v8[0] = a2;
  v8[1] = &v7;
  v8[2] = a3;
  v8[3] = a4;
  v5(v4, v8);
  return v7;
}

__n128 sub_1C5050204(uint64_t *a1, uint64_t a2)
{
  _OWORD *v3;
  _QWORD *v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  v3 = *(_OWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = *(const void **)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)a2 = 0;
  v7 = *a1;
  if (v6)
    memmove(v3, v5, v6);
  result = *(__n128 *)v7;
  v9 = *(_OWORD *)(v7 + 16);
  v3[2] = *(_OWORD *)v7;
  v3[3] = v9;
  *v4 = v3;
  return result;
}

_QWORD *sub_1C5050254(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v5;

  v2 = result[1];
  if (v2 != a2)
  {
    v3 = a2;
    if (v2 <= a2 && result[2] < a2)
    {
      v5 = result;
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, a2, 1);
      v3 = a2;
      result = v5;
    }
    result[1] = v3;
  }
  return result;
}

uint64_t sub_1C50502AC(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
        memmove(*(void **)a1, *(const void **)a2, v4);
    }
    else
    {
      if (*(_QWORD *)(a1 + 16) < v4)
      {
        *(_QWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), v4, 1);
        v5 = 0;
      }
      else if (v5)
      {
        memmove(*(void **)a1, *(const void **)a2, *(_QWORD *)(a1 + 8));
      }
      v6 = *(_QWORD *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + v5), (const void *)(*(_QWORD *)a2 + v5), *(_QWORD *)a2 + v6 - (*(_QWORD *)a2 + v5));
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void llvm::cas::builtin::BuiltinCAS::parseID(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  BOOL v8;
  const std::error_category *v9;
  void **v10;
  uint64_t v11;
  uint64_t v13;
  std::string *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  std::string *v19;
  std::string::size_type size;
  const std::error_category *v21;
  void **v22;
  const std::error_category *v23;
  void **v24;
  uint64_t v25;
  std::string v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  _QWORD v32[2];
  const char *v33;
  __int16 v34;
  uint64_t v35;
  void *v36[2];
  char v37;
  void **v38;
  _BYTE *v39[2];

  v7 = a3 - 10;
  if (a3 < 0xA
    || (*(_QWORD *)a2 == 0x3A7361636D766C6CLL ? (v8 = *(unsigned __int16 *)(a2 + 8) == 12079) : (v8 = 0), !v8))
  {
    v9 = std::generic_category();
    v31 = 1283;
    v28[0] = "invalid cas-id '";
    v29 = a2;
    v30 = a3;
    v32[0] = v28;
    v33 = "'";
    v34 = 770;
    llvm::Twine::str((llvm::Twine *)v32, v36);
    if (v37 >= 0)
      v10 = v36;
    else
      v10 = (void **)v36[0];
    v26.__r_.__value_.__r.__words[0] = 22;
    v26.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
    v39[0] = v10;
    sub_1C5DF1730(v39, (uint64_t *)&v26, &v35);
    if (v37 < 0)
      operator delete(v36[0]);
    *(_BYTE *)(a4 + 64) |= 1u;
    v11 = v35;
LABEL_12:
    *(_QWORD *)a4 = v11;
    return;
  }
  if (a3 != 74)
  {
    v21 = std::generic_category();
    v31 = 1283;
    v28[0] = "wrong size for cas-id hash '";
    v29 = a2 + 10;
    v30 = v7;
    v32[0] = v28;
    v33 = "'";
    v34 = 770;
    llvm::Twine::str((llvm::Twine *)v32, v36);
    if (v37 >= 0)
      v22 = v36;
    else
      v22 = (void **)v36[0];
    v26.__r_.__value_.__r.__words[0] = 22;
    v26.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
    v39[0] = v22;
    sub_1C5DF1730(v39, (uint64_t *)&v26, &v27);
    if (v37 < 0)
      operator delete(v36[0]);
    *(_BYTE *)(a4 + 64) |= 1u;
    v11 = v27;
    goto LABEL_12;
  }
  memset(&v26, 0, sizeof(v26));
  std::string::resize(&v26, 0x20uLL, 0);
  v13 = 0;
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v26;
  else
    v14 = (std::string *)v26.__r_.__value_.__r.__words[0];
  v15 = (unsigned __int8 *)(a2 + 11);
  while (1)
  {
    v16 = (unsigned __int16)word_1C85F7092[*(v15 - 1)];
    v17 = (unsigned __int16)word_1C85F7092[*v15];
    if (v16 == 0xFFFF || v17 == 0xFFFF)
      break;
    v15 += 2;
    v14->__r_.__value_.__s.__data_[v13++] = v17 | (16 * v16);
    if (v13 == 32)
    {
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v26;
      else
        v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v26.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v26.__r_.__value_.__l.__size_;
      (*(void (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)a1 + 136))(a1, v19, size);
      goto LABEL_43;
    }
  }
  v23 = std::generic_category();
  v31 = 1283;
  v28[0] = "invalid hash in cas-id '";
  v29 = a2 + 10;
  v30 = 64;
  v32[0] = v28;
  v33 = "'";
  v34 = 770;
  llvm::Twine::str((llvm::Twine *)v32, v36);
  if (v37 >= 0)
    v24 = v36;
  else
    v24 = (void **)v36[0];
  v39[0] = (_BYTE *)22;
  v39[1] = v23;
  v38 = v24;
  sub_1C5DF1730((_BYTE **)&v38, (uint64_t *)v39, &v25);
  if (v37 < 0)
    operator delete(v36[0]);
  *(_BYTE *)(a4 + 64) |= 1u;
  *(_QWORD *)a4 = v25;
  v25 = 0;
LABEL_43:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

_QWORD *sub_1C5050690(unsigned __int8 *a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v6;
  _QWORD *result;
  uint64_t v9;
  char v10;
  unsigned int v11;

  v6 = a2;
  result = sub_1C5050254(a4, 2 * a2);
  if (v6)
  {
    v9 = 0;
    if (a3)
      v10 = 32;
    else
      v10 = 0;
    do
    {
      v11 = *a1++;
      *(_BYTE *)(*a4 + v9) = a0123456789abcd_6[(unint64_t)v11 >> 4] | v10;
      *(_BYTE *)(*a4 + v9 + 1) = a0123456789abcd_6[v11 & 0xF] | v10;
      v9 += 2;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_1C5050724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  _BYTE v14[32768];
  _QWORD v15[5];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v7 = v4;
  v15[4] = *MEMORY[0x1E0C80C00];
  v12 = v14;
  v13 = xmmword_1C85FA4F0;
  llvm::sys::fs::readNativeFileToEOF(v8, &v12, 0x4000uLL, v15);
  v9 = v15[0];
  if (v15[0])
  {
    *(_BYTE *)(v7 + 8) |= 1u;
    *(_QWORD *)v7 = v9;
  }
  else
  {
    v10 = v12;
    v11 = v13;
    sub_1C61D3B34((char *)v15, v6, 0, 0, (int *)v12, v13);
    (*(void (**)(uint64_t, _QWORD *, uint64_t, _QWORD, _QWORD, void *, uint64_t))(*(_QWORD *)v6 + 144))(v6, v15, 32, 0, 0, v10, v11);
  }
  if (v12 != v14)
    free(v12);
}

void llvm::cas::builtin::BuiltinCAS::validate(llvm::cas::builtin::BuiltinCAS *this@<X0>, const llvm::cas::CASID *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  const std::error_category *v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  void **v15;
  int *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  const std::error_category *v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string v32;
  std::string v33;
  std::string v34;
  void *__p[2];
  char v36;
  __int16 v37;
  std::string v38;
  std::string *v39;
  uint64_t v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t *v43;
  uint64_t v44;
  _WORD v45[24];
  uint64_t v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(llvm::cas::builtin::BuiltinCAS *))(*(_QWORD *)this + 32))(this);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr, llvm::cas::builtin::BuiltinCAS *, uint64_t))(*(_QWORD *)this + 48))(&v46, this, v6);
    if ((v47 & 1) != 0)
    {
      *a3 = v46;
    }
    else
    {
      v8 = v46;
      v43 = (uint64_t *)v45;
      v44 = 0x600000000;
      __p[0] = &v43;
      (*(void (**)(llvm::cas::builtin::BuiltinCAS *, uint64_t, uint64_t *(*)@<X0>(uint64_t *@<X0>, uint64_t@<X1>, _QWORD *@<X8>), void **))(*(_QWORD *)this + 64))(this, v46, sub_1C5050C98, __p);
      if (!*a3)
      {
        v16 = (int *)(*(uint64_t (**)(llvm::cas::builtin::BuiltinCAS *, uint64_t, _QWORD))(*(_QWORD *)this
                                                                                                  + 88))(this, v8, 0);
        (*(void (**)(llvm::cas::builtin::BuiltinCAS *, uint64_t, _QWORD))(*(_QWORD *)this + 88))(this, v8, 0);
        v41 = 0u;
        v42 = 0u;
        sub_1C61D3B34((char *)&v41, (uint64_t)this, v43, v44, v16, v17);
        if (*((_QWORD *)a2 + 2) != 32)
          goto LABEL_33;
        v18 = (uint64_t *)*((_QWORD *)a2 + 1);
        v19 = *v18;
        v20 = v18[1];
        v22 = v18[2];
        v21 = v18[3];
        v23 = v19 == (_QWORD)v41 && v20 == *((_QWORD *)&v41 + 1);
        v24 = v23 && v22 == (_QWORD)v42;
        if (v24 && v21 == *((_QWORD *)&v42 + 1))
        {
          *a3 = 0;
        }
        else
        {
LABEL_33:
          v26 = std::generic_category();
          llvm::cas::CASID::toString(a2, &v32);
          v27 = std::string::insert(&v32, 0, "corrupt object '");
          v28 = v27->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          v33.__r_.__value_.__r.__words[2] = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          v29 = std::string::append(&v33, "'");
          v30 = v29->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          v34.__r_.__value_.__r.__words[2] = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          v37 = 260;
          __p[0] = &v34;
          llvm::Twine::str((llvm::Twine *)__p, &v38);
          if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &v38;
          else
            v31 = (std::string *)v38.__r_.__value_.__r.__words[0];
          v40[0] = 22;
          v40[1] = (uint64_t)v26;
          v39 = v31;
          sub_1C5DF1730((_BYTE **)&v39, v40, a3);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v38.__r_.__value_.__l.__data_);
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v34.__r_.__value_.__l.__data_);
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v33.__r_.__value_.__l.__data_);
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v32.__r_.__value_.__l.__data_);
        }
      }
      if (v43 != (uint64_t *)v45)
        free(v43);
      if ((v47 & 1) != 0)
      {
        v9 = v46;
        v46 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
    }
  }
  else
  {
    v10 = std::generic_category();
    llvm::cas::CASID::toString(a2, &v34);
    v11 = std::string::insert(&v34, 0, "unknown object '");
    v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v38, "'");
    v14 = v13->__r_.__value_.__r.__words[2];
    v41 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    *(_QWORD *)&v42 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v45[8] = 260;
    v43 = (uint64_t *)&v41;
    llvm::Twine::str((llvm::Twine *)&v43, __p);
    if (v36 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    v33.__r_.__value_.__r.__words[0] = 22;
    v33.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    sub_1C5DF1730(&v32.__r_.__value_.__l.__data_, (uint64_t *)&v33, a3);
    if (v36 < 0)
      operator delete(__p[0]);
    if (SBYTE7(v42) < 0)
      operator delete((void *)v41);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
}

uint64_t llvm::sys::fs::mapped_file_region::alignment(llvm::sys::fs::mapped_file_region *this)
{
  char *v2;
  char *v3;
  char *v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  llvm::sys::Process::getPageSize((uint64_t)&v4);
  if ((v5 & 1) == 0)
    return v4;
  v2 = v4;
  sub_1C4D62BD4(&v2, &v3);
  if (v2)
    (*(void (**)(char *))(*(_QWORD *)v2 + 8))(v2);
  return 4096;
}

uint64_t *sub_1C5050C98@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *result;
  v6 = *(unsigned int *)(*result + 8);
  if (v6 >= *(_DWORD *)(*result + 12))
  {
    result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod(*result, v5 + 16, v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = a2;
  ++*(_DWORD *)(v5 + 8);
  *a3 = 0;
  return result;
}

uint64_t llvm::cas::createCASFileSystem@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *(_DWORD *)(v6 + 8) = 0;
  *(_QWORD *)v6 = off_1E813F558;
  *(_QWORD *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  v9 = v6;
  sub_1C5050E0C((uint64_t)&v10, &v9, a2);
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(a3 + 8) & 0xFE | v11 & 1;
  result = v9;
  *(_QWORD *)a3 = v10;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C5050E0C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  __int128 *p_dst;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  const char *v24;
  __int128 __dst;
  unint64_t v26;
  const char *v27;

  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*a2 + 16) + 32))(*(_QWORD *)(*a2 + 16), a3);
  if (v6)
  {
    v7 = v5;
    v8 = *a2;
    v9 = (unsigned int *)operator new();
    llvm::cas::FileSystemCache::FileSystemCache((uint64_t)v9, v7, 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = *(unsigned int **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v9;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = sub_1C5051410((uint64_t)v11);
        MEMORY[0x1CAA32FC0](v14, 0x10B2C40A65E917ELL);
      }
    }
    v15 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 528);
    *(_QWORD *)(v8 + 48) = v15;
    v16 = *(const void **)v15;
    if (!*(_QWORD *)v15)
    {
      __dst = 0uLL;
      v26 = 0;
LABEL_22:
      v23 = (void **)(v8 + 56);
      if (*(char *)(v8 + 79) < 0)
        operator delete(*v23);
      *(_OWORD *)v23 = __dst;
      *(_QWORD *)(v8 + 72) = v26;
      sub_1C5051144((uint64_t *)&v27, v8, *(_QWORD *)(v8 + 48));
      v20 = v27;
      if (v27)
      {
        *(_BYTE *)(a1 + 8) |= 1u;
      }
      else
      {
        *(_BYTE *)(a1 + 8) &= ~1u;
        v20 = (const char *)*a2;
        *a2 = 0;
      }
      goto LABEL_27;
    }
    v17 = *(_QWORD *)(v15 + 8);
    if (v17 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v17 >= 0x17)
    {
      v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v21 = v17 | 7;
      v22 = v21 + 1;
      p_dst = (__int128 *)operator new(v21 + 1);
      *((_QWORD *)&__dst + 1) = v17;
      v26 = v22 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v26) = *(_QWORD *)(v15 + 8);
      p_dst = &__dst;
      if (!v17)
        goto LABEL_21;
    }
    memmove(p_dst, v16, v17);
LABEL_21:
    *((_BYTE *)p_dst + v17) = 0;
    goto LABEL_22;
  }
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  *(_QWORD *)&__dst = 3;
  *((_QWORD *)&__dst + 1) = qword_1ED836B58[0];
  v27 = "cannot get reference to root FS";
  sub_1C5DF1730((_BYTE **)&v27, (uint64_t *)&__dst, &v24);
  *(_BYTE *)(a1 + 8) |= 1u;
  v20 = v24;
LABEL_27:
  *(_QWORD *)a1 = v20;
}

uint64_t llvm::cas::createCASFileSystem@<X0>(llvm::cas *this@<X0>, llvm::cas::ObjectStore *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = operator new();
  *(_DWORD *)(v7 + 8) = 0;
  *(_QWORD *)v7 = off_1E813F558;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  v9 = v7;
  sub_1C5050E0C((uint64_t)&v10, &v9, (uint64_t)a2);
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(a3 + 8) & 0xFE | v11 & 1;
  result = v9;
  *(_QWORD *)a3 = v10;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C5051144(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned __int8 v5;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm *v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  std::string v21;
  std::string v22;
  std::string v23;
  _OWORD v24[2];
  __int16 v25;
  uint64_t v26;
  _BYTE v27[16];
  llvm *v28;
  _QWORD v29[4];
  uint64_t v30;
  _OWORD v31[2];
  char v32;
  char *v33;
  __int128 v34;
  _QWORD v35[17];

  v35[16] = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unint64_t *)(a3 + 72));
  v5 = atomic_load((unsigned __int8 *)(v4 + 64));
  if ((v5 & 1) != 0)
  {
    *a1 = 0;
    return;
  }
  v9 = *(const void **)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v33 = (char *)v35;
  v34 = xmmword_1C85F20B0;
  if (v8 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v33, v35, v8, 1);
    v10 = v34;
    goto LABEL_4;
  }
  v10 = 0;
  if (v8)
  {
LABEL_4:
    memcpy(&v33[v10], v9, v8);
    v10 = v34;
  }
  *(_QWORD *)&v34 = v10 + v8;
  v29[3] = a3;
  v30 = v10 + v8;
  v29[0] = &v33;
  v29[1] = &v30;
  v29[2] = a2;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a3 + 80);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v31, v11, v12);
  if ((BYTE8(v31[0]) & 1) == 0 || !*(_QWORD *)&v31[0])
  {
    if ((BYTE8(v31[0]) & 1) != 0)
      v13 = 0;
    else
      v13 = *(_QWORD *)&v31[0];
    llvm::cas::TreeSchema::TreeSchema((llvm::cas::TreeSchema *)v27, *(llvm::cas::ObjectStore **)(a2 + 16));
    v14 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 80))(v11, v13);
    if (!v14
      || (v14 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 72))(v11, v13, 0),
          v14 != v28))
    {
      v17 = llvm::inconvertibleErrorCode(v14);
      v19 = v18;
      (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(v31, v11, v13);
      llvm::cas::CASID::toString((llvm::cas::CASID *)v31, &v21);
      sub_1C486A9C4("invalid tree '", &v21, &v22);
      sub_1C5051730(&v22, "'", &v23);
      v25 = 260;
      *(_QWORD *)&v24[0] = &v23;
      sub_1C50516B4(v17, v19, (llvm::Twine *)v24, &v26);
      llvm::report_fatal_error(&v26);
    }
    llvm::cas::FileSystemCache::Directory::Writer::Writer((uint64_t)&v23, (std::mutex *)v4);
    v15 = atomic_load((unsigned __int8 *)(v4 + 64));
    if ((v15 & 1) != 0)
    {
      *a1 = 0;
      goto LABEL_19;
    }
    v20[0] = v11;
    v20[1] = v12;
    v20[2] = v13;
    llvm::cas::TreeSchema::load((uint64_t)v27, v20, (uint64_t)v31);
    if ((v32 & 1) != 0)
    {
      v16 = *(_QWORD *)&v31[0];
      *(_QWORD *)&v31[0] = 0;
    }
    else
    {
      v22.__r_.__value_.__r.__words[0] = v4;
      v22.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
      v24[0] = v31[0];
      v24[1] = v31[1];
      llvm::cas::TreeSchema::forEachTreeEntry(v24, (uint64_t (*)(uint64_t, _BYTE *))sub_1C5051768, (uint64_t)&v22, a1);
      v16 = *a1;
      if (*a1)
        goto LABEL_19;
      atomic_store(1u, (unsigned __int8 *)(v4 + 64));
    }
    *a1 = v16;
LABEL_19:
    if (v23.__r_.__value_.__s.__data_[8])
      std::mutex::unlock((std::mutex *)v23.__r_.__value_.__l.__data_);
    goto LABEL_8;
  }
  *a1 = *(_QWORD *)&v31[0];
LABEL_8:
  if (v33 != (char *)v35)
    free(v33);
}

uint64_t sub_1C5051410(uint64_t a1)
{
  if (*(char *)(a1 + 567) < 0)
    operator delete(*(void **)(a1 + 544));
  sub_1C4926A50(a1 + 424);
  sub_1C4926AE8(a1 + 424);
  sub_1C4926A50(a1 + 320);
  sub_1C4926AE8(a1 + 320);
  sub_1C50514A4(a1 + 216);
  sub_1C4926AE8(a1 + 216);
  sub_1C50515A0(a1 + 112);
  sub_1C4926AE8(a1 + 112);
  sub_1C4926A50(a1 + 8);
  sub_1C4926AE8(a1 + 8);
  return a1;
}

uint64_t sub_1C50514A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      v10 = v9 + 112;
      while (v10 <= v8)
      {
        sub_1C61D3F04(v9);
        v10 = v11 + 224;
        v9 = v11 + 112;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v12 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD **)(a1 + 64);
    v14 = &v13[2 * v12];
    do
    {
      v15 = (*v13 + 7) & 0xFFFFFFFFFFFFFFF8;
      v16 = *v13 + v13[1];
      v17 = v15 + 112;
      while (v17 <= v16)
      {
        sub_1C61D3F04(v15);
        v17 = v18 + 224;
        v15 = v18 + 112;
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C50515A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t j;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 40; i <= v8; i += 40)
      {
        if (*(char *)(i - 17) < 0)
          operator delete(*(void **)(i - 40));
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v10 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD **)(a1 + 64);
    v12 = &v11[2 * v10];
    do
    {
      v13 = *v11 + v11[1];
      for (j = ((*v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 40; j <= v13; j += 40)
      {
        if (*(char *)(j - 17) < 0)
          operator delete(*(void **)(j - 40));
      }
      v11 += 2;
    }
    while (v11 != v12);
  }
  return sub_1C4926A50(a1);
}

void sub_1C50516B4(uint64_t a1@<X0>, uint64_t a2@<X1>, llvm::Twine *a3@<X2>, _QWORD *a4@<X8>)
{
  void **v7;
  void *__p[2];
  char v9;
  void **v10;
  uint64_t v11[2];

  llvm::Twine::str(a3, __p);
  if (v9 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  v11[0] = a1;
  v11[1] = a2;
  v10 = v7;
  sub_1C5DF1730((_BYTE **)&v10, v11, a4);
  if (v9 < 0)
    operator delete(__p[0]);
}

__n128 sub_1C5051730@<Q0>(std::string *a1@<X0>, const std::string::value_type *a2@<X1>, std::string *a3@<X8>)
{
  __n128 *v4;
  __n128 result;

  v4 = (__n128 *)std::string::append(a1, a2);
  result = *v4;
  *a3 = *(std::string *)v4->n128_u8;
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_1C5051768@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _BYTE ***v6;
  _BYTE **v7;
  _QWORD *v8;
  _BYTE *v9;
  _BYTE *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  size_t v19;
  uint64_t v20;
  _QWORD *DirectoryAlreadyLocked;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  void **v29;
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  _QWORD *v33[4];
  __int16 v34;
  _QWORD *v35[4];
  __int16 v36;

  v5 = *a1;
  v6 = (_BYTE ***)a1[1];
  v7 = v6[2];
  v8 = *v6;
  v9 = *v6[1];
  v10 = (*v6)[1];
  if (v10 != v9)
  {
    if (v10 <= v9)
    {
      if (v8[2] < (unint64_t)v9)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)*v6, v8 + 3, (unint64_t)*v6[1], 1);
        v10 = (_BYTE *)v8[1];
      }
      if (v9 != v10)
        bzero(&v10[*v8], v9 - v10);
    }
    v8[1] = v9;
    v8 = *v6;
  }
  v11 = (_QWORD *)*((_QWORD *)a2 + 2);
  v12 = (_QWORD *)*((_QWORD *)a2 + 3);
  v36 = 261;
  v35[0] = v11;
  v35[1] = v12;
  v34 = 257;
  v32 = 257;
  v30 = 257;
  llvm::sys::path::append(v8, (const llvm::Twine *)1, v35, v33, &v31, &v29);
  v15 = *a2;
  if (*a2 >= 2)
  {
    if (v15 == 2)
    {
      v22 = v7[5];
      v23 = (uint64_t)v6[3];
      v24 = **v6;
      v25 = (size_t)(*v6)[1];
      v26 = *((_QWORD *)a2 + 1);
      v27 = atomic_load((unint64_t *)(v23 + 72));
      DirectoryAlreadyLocked = (_QWORD *)sub_1C5058880((uint64_t)(v22 + 424), (uint64_t)(v22 + 320), v23, v27, v24, v25, 2, v14, v26, 1);
    }
    else
    {
      DirectoryAlreadyLocked = (_QWORD *)llvm::cas::FileSystemCache::makeDirectoryAlreadyLocked((uint64_t)v7[5], (uint64_t)v6[3], **v6, (size_t)(*v6)[1], *((_QWORD *)a2 + 1), 1, v13, v14);
    }
  }
  else
  {
    v16 = v7[5];
    v17 = (uint64_t)v6[3];
    v18 = **v6;
    v19 = (size_t)(*v6)[1];
    v20 = atomic_load((unint64_t *)(v17 + 72));
    DirectoryAlreadyLocked = (_QWORD *)sub_1C5058880((uint64_t)(v16 + 424), (uint64_t)(v16 + 320), v17, v20, v18, v19, v15 == 1, v14, *((_QWORD *)a2 + 1), 1);
  }
  v33[0] = DirectoryAlreadyLocked;
  result = sub_1C61D3F30(v5 + 72, v33, (uint64_t)v35);
  *a3 = 0;
  return result;
}

_QWORD *sub_1C5051904(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61D4124(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C50519BC(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)a1 = off_1E813F558;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(unsigned int **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      v5 = sub_1C5051410((uint64_t)v2);
      MEMORY[0x1CAA32FC0](v5, 0x10B2C40A65E917ELL);
    }
  }
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_1C5051A64(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)a1 = off_1E813F558;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(unsigned int **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      v5 = sub_1C5051410((uint64_t)v2);
      MEMORY[0x1CAA32FC0](v5, 0x10B2C40A65E917ELL);
    }
  }
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5051B1C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t (**v6)();
  llvm::cas::FileSystemCache::DirectoryEntry *v7;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  llvm::cas::FileSystemCache::DirectoryEntry *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char v17;
  uint64_t (**v18)();
  uint64_t v19;
  __int16 v20;
  uint64_t (**v21)();
  uint64_t (**v22)();
  llvm::cas::FileSystemCache::DirectoryEntry *v23;
  char v24;
  void *v25;
  __int128 v26;
  _QWORD v27[17];

  v27[16] = *MEMORY[0x1E0C80C00];
  v25 = v27;
  v26 = xmmword_1C85F20B0;
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v5 = 0;
    v6 = 0;
    switch(*(_BYTE *)(a2 + 32))
    {
      case 1:
        break;
      case 3:
        v6 = *(uint64_t (***)())a2;
        if (*(_QWORD *)a2)
          v5 = strlen(*(const char **)a2);
        else
          v5 = 0;
        break;
      case 4:
        v16 = *(const char **)a2;
        v17 = *(_BYTE *)(*(_QWORD *)a2 + 23);
        if (v17 >= 0)
          v6 = *(uint64_t (***)())a2;
        else
          v6 = *(uint64_t (***)())v16;
        if (v17 >= 0)
          v5 = v17 & 0x7F;
        else
          v5 = *((_QWORD *)v16 + 1);
        break;
      case 5:
        v6 = *(uint64_t (***)())a2;
        v5 = *(_QWORD *)(a2 + 8);
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector(a2, (uint64_t)&v25);
    v6 = (uint64_t (**)())v25;
    v5 = v26;
  }
  v18 = &off_1E813F5E8;
  v19 = a1;
  llvm::cas::FileSystemCache::lookupPath(*(_QWORD *)(a1 + 40), (uint64_t)&v18, v6, v5, *(_QWORD *)(a1 + 48), 1, (uint64_t)&v23);
  if ((v24 & 1) != 0)
  {
    v22 = (uint64_t (**)())v23;
    v23 = 0;
    v10 = llvm::errorToErrorCode(&v22);
    *(_BYTE *)(a3 + 80) |= 1u;
    *(_QWORD *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v11;
    v12 = v22;
    if (v22)
LABEL_11:
      (*((void (**)(uint64_t (**)()))*v12 + 1))(v12);
  }
  else
  {
    v7 = v23;
    if (!atomic_load((unint64_t *)v23 + 9))
    {
      if (*((_DWORD *)v23 + 10) == 2)
        sub_1C50527CC(&v18, a1, (uint64_t)v23);
      else
        sub_1C5052898(&v18, a1, v23);
      if (v18)
      {
        v21 = v18;
        v14 = llvm::errorToErrorCode(&v21);
        *(_BYTE *)(a3 + 80) |= 1u;
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = v15;
        v12 = v21;
        if (!v21)
          goto LABEL_12;
        goto LABEL_11;
      }
    }
    v20 = 261;
    v18 = v6;
    v19 = v5;
    v9.n128_f64[0] = llvm::cas::FileSystemCache::DirectoryEntry::getStatus((uint64_t)v7, (llvm::Twine *)&v18, a3);
  }
LABEL_12:
  if ((v24 & 1) != 0)
  {
    v13 = v23;
    v23 = 0;
    if (v13)
      (*(void (**)(llvm::cas::FileSystemCache::DirectoryEntry *, __n128))(*(_QWORD *)v13 + 8))(v13, v9);
  }
  if (v25 != v27)
    free(v25);
}

void sub_1C5051D54(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  _BYTE *v6;
  llvm::cas::FileSystemCache::DirectoryEntry *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  llvm::cas::FileSystemCache::DirectoryEntry *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::cas::FileSystemCache::DirectoryEntry *v16;
  const std::error_category *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::cas::FileSystemCache::DirectoryEntry *v22;
  const char *v23;
  char v24;
  llvm::cas::FileSystemCache::DirectoryEntry *v25;
  llvm::cas::FileSystemCache::DirectoryEntry *v26;
  _QWORD v27[2];
  llvm::cas::FileSystemCache::DirectoryEntry *v28;
  char v29;
  void *v30;
  __int128 v31;
  _QWORD v32[17];

  v32[16] = *MEMORY[0x1E0C80C00];
  v30 = v32;
  v31 = xmmword_1C85F20B0;
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v5 = 0;
    v6 = 0;
    switch(*(_BYTE *)(a2 + 32))
    {
      case 1:
        break;
      case 3:
        v6 = *(_BYTE **)a2;
        if (*(_QWORD *)a2)
          v5 = strlen(*(const char **)a2);
        else
          v5 = 0;
        break;
      case 4:
        v23 = *(const char **)a2;
        v24 = *(_BYTE *)(*(_QWORD *)a2 + 23);
        if (v24 >= 0)
          v6 = *(_BYTE **)a2;
        else
          v6 = *(_BYTE **)v23;
        if (v24 >= 0)
          v5 = v24 & 0x7F;
        else
          v5 = *((_QWORD *)v23 + 1);
        break;
      case 5:
        v6 = *(_BYTE **)a2;
        v5 = *(_QWORD *)(a2 + 8);
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector(a2, (uint64_t)&v30);
    v6 = v30;
    v5 = v31;
  }
  v27[0] = &off_1E813F5E8;
  v27[1] = a1;
  llvm::cas::FileSystemCache::lookupPath(a1[5], (uint64_t)v27, v6, v5, a1[6], 1, (uint64_t)&v28);
  if ((v29 & 1) == 0)
  {
    v7 = v28;
    if (*((_DWORD *)v28 + 10) >= 2u)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      v17 = std::generic_category();
      *(_QWORD *)a3 = 22;
      *(_QWORD *)(a3 + 8) = v17;
      goto LABEL_28;
    }
    if (!atomic_load((unint64_t *)v28 + 9))
    {
      sub_1C5052898(v27, (uint64_t)a1, v28);
      if (v27[0])
      {
        v25 = (llvm::cas::FileSystemCache::DirectoryEntry *)v27[0];
        v18 = llvm::errorToErrorCode((_QWORD **)&v25);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v18;
        *(_QWORD *)(a3 + 8) = v19;
        v16 = v25;
        if (!v25)
          goto LABEL_28;
        goto LABEL_16;
      }
    }
    v9 = a1[2];
    v10 = operator new();
    v11 = (_QWORD *)v10;
    *(_QWORD *)v10 = off_1E813F628;
    *(_QWORD *)(v10 + 8) = v9;
    v12 = (_QWORD *)(v10 + 16);
    if (!v6)
    {
      *v12 = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
LABEL_27:
      v11[5] = v7;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v11;
      goto LABEL_28;
    }
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v5 >= 0x17)
    {
      v20 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v20 = v5 | 7;
      v21 = v20 + 1;
      v12 = operator new(v20 + 1);
      v11[3] = v5;
      v11[4] = v21 | 0x8000000000000000;
      v11[2] = v12;
    }
    else
    {
      *(_BYTE *)(v10 + 39) = v5;
      if (!v5)
        goto LABEL_26;
    }
    memmove(v12, v6, v5);
LABEL_26:
    *((_BYTE *)v12 + v5) = 0;
    goto LABEL_27;
  }
  v13 = v28;
  v28 = 0;
  v26 = v13;
  v14 = llvm::errorToErrorCode((_QWORD **)&v26);
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v15;
  v16 = v26;
  if (v26)
LABEL_16:
    (*(void (**)(llvm::cas::FileSystemCache::DirectoryEntry *))(*(_QWORD *)v16 + 8))(v16);
LABEL_28:
  if ((v29 & 1) != 0)
  {
    v22 = v28;
    v28 = 0;
    if (v22)
      (*(void (**)(llvm::cas::FileSystemCache::DirectoryEntry *))(*(_QWORD *)v22 + 8))(v22);
  }
  if (v30 != v32)
    free(v30);
}

void sub_1C505204C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  size_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t v25;
  const char *v26;
  char v27;
  _QWORD *v28[4];
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  char v32;
  void *v33;
  __int128 v34;
  _QWORD v35[17];

  v35[16] = *MEMORY[0x1E0C80C00];
  v33 = v35;
  v34 = xmmword_1C85F20B0;
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v7 = 0;
    v8 = 0;
    switch(*(_BYTE *)(a2 + 32))
    {
      case 1:
        break;
      case 3:
        v8 = *(unsigned int **)a2;
        if (*(_QWORD *)a2)
          v7 = strlen(*(const char **)a2);
        else
          v7 = 0;
        break;
      case 4:
        v26 = *(const char **)a2;
        v27 = *(_BYTE *)(*(_QWORD *)a2 + 23);
        if (v27 >= 0)
          v8 = *(unsigned int **)a2;
        else
          v8 = *(unsigned int **)v26;
        if (v27 >= 0)
          v7 = v27 & 0x7F;
        else
          v7 = *((_QWORD *)v26 + 1);
        break;
      case 5:
        v8 = *(unsigned int **)a2;
        v7 = *(_QWORD *)(a2 + 8);
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector(a2, (uint64_t)&v33);
    v8 = (unsigned int *)v33;
    v7 = v34;
  }
  v28[0] = &off_1E813F5E8;
  v28[1] = (_QWORD *)a1;
  llvm::cas::FileSystemCache::lookupPath(*(_QWORD *)(a1 + 40), (uint64_t)v28, v8, v7, *(_QWORD *)(a1 + 48), 1, (uint64_t)&v31);
  if ((v32 & 1) != 0)
  {
    v13 = (_QWORD *)v31;
    v31 = 0;
    v28[0] = v13;
    v10 = llvm::errorToErrorCode(v28);
    v12 = v14;
  }
  else
  {
    v9 = v31;
    if (*(_DWORD *)(v31 + 40) != 3)
    {
      v12 = (std::__shared_weak_count *)std::generic_category();
      v15 = 0;
      v10 = 20;
      goto LABEL_24;
    }
    sub_1C5051144((uint64_t *)v28, a1, v31);
    if (!v28[0])
    {
      v16 = atomic_load((unint64_t *)(v9 + 72));
      v28[0] = (_QWORD *)a1;
      v28[3] = (uint64_t (**)())((char *)off_1EF8EB1F0 + 2);
      v17 = *(_BYTE *)(a1 + 79);
      v18 = v17;
      if (v17 >= 0)
        v19 = (void *)(a1 + 56);
      else
        v19 = *(void **)(a1 + 56);
      v20 = v17 & 0x7F;
      if (v18 >= 0)
        v21 = v20;
      else
        v21 = *(_QWORD *)(a1 + 64);
      llvm::cas::FileSystemCache::getCachedVFSDirIter(v16, (uint64_t)v28, v19, v21, v8, v7, &v29);
      v10 = (uint64_t)v29;
      v12 = v30;
      v29 = 0;
      v30 = 0;
      sub_1C5052E10(v28);
      v15 = 1;
      goto LABEL_24;
    }
    v29 = v28[0];
    v28[0] = 0;
    v10 = llvm::errorToErrorCode(&v29);
    v12 = v11;
    if (v29)
      (*(void (**)(_QWORD *))(*v29 + 8))(v29);
  }
  if (v28[0])
    (*(void (**)(_QWORD *))(*v28[0] + 8))(v28[0]);
  v15 = 0;
LABEL_24:
  if ((v32 & 1) != 0)
  {
    v22 = v31;
    v31 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if (v33 != v35)
    free(v33);
  if (v15)
  {
    *a4 = v10;
    a4[1] = (uint64_t)v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *a3 = v10;
    a3[1] = (uint64_t)v12;
    *a4 = 0;
    a4[1] = 0;
  }
}

unint64_t sub_1C5052338(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  int v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  __int128 *v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char v25;
  void *v26;
  __int128 v27;
  _QWORD v28[17];

  v28[16] = *MEMORY[0x1E0C80C00];
  v26 = v28;
  v27 = xmmword_1C85F20B0;
  v4 = a1 + 56;
  v5 = *(_BYTE *)(a1 + 79);
  v6 = v5;
  if (v5 >= 0)
    v7 = (char *)(a1 + 56);
  else
    v7 = *(char **)(a1 + 56);
  v8 = v5 & 0x7F;
  if (v6 >= 0)
    v9 = v8;
  else
    v9 = *(_QWORD *)(a1 + 64);
  v10 = llvm::cas::FileSystemCache::canonicalizeWorkingDirectory(a2, v7, v9, (uint64_t *)&v26);
  v12 = v11;
  *(_QWORD *)&v21 = &off_1E813F5E8;
  *((_QWORD *)&v21 + 1) = a1;
  llvm::cas::FileSystemCache::lookupPath(*(_QWORD *)(a1 + 40), (uint64_t)&v21, v10, v11, *(_QWORD *)(a1 + 48), 1, (uint64_t)&v24);
  if ((v25 & 1) == 0)
  {
    if (!v10)
    {
      v21 = 0uLL;
      v22 = 0;
LABEL_21:
      if (*(char *)(a1 + 79) < 0)
        operator delete(*(void **)v4);
      *(_OWORD *)v4 = v21;
      *(_QWORD *)(v4 + 16) = v22;
      *(_QWORD *)(a1 + 48) = v24;
      std::system_category();
      v15 = 0;
      LODWORD(v16) = 0;
      goto LABEL_24;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v12 >= 0x17)
    {
      v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v17 = v12 | 7;
      v18 = v17 + 1;
      v13 = (__int128 *)operator new(v17 + 1);
      *((_QWORD *)&v21 + 1) = v12;
      v22 = v18 | 0x8000000000000000;
      *(_QWORD *)&v21 = v13;
    }
    else
    {
      HIBYTE(v22) = v12;
      v13 = &v21;
      if (!v12)
        goto LABEL_20;
    }
    memmove(v13, v10, v12);
LABEL_20:
    *((_BYTE *)v13 + v12) = 0;
    goto LABEL_21;
  }
  v23 = v24;
  v24 = 0;
  v14 = llvm::errorToErrorCode(&v23);
  v15 = v14;
  v16 = HIDWORD(v14);
  if (v23)
    (*(void (**)(_QWORD *))(*v23 + 8))(v23);
LABEL_24:
  if ((v25 & 1) != 0)
  {
    v19 = v24;
    v24 = 0;
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  }
  if (v26 != v28)
    free(v26);
  return v15 | ((unint64_t)v16 << 32);
}

char *sub_1C5052548@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + 24) &= ~1u;
  if (result[79] < 0)
    return (char *)sub_1C47EBC30((_BYTE *)a2, *((void **)result + 7), *((_QWORD *)result + 8));
  *(_OWORD *)a2 = *(_OWORD *)(result + 56);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 9);
  return result;
}

void sub_1C5052580(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _BYTE *v8;
  const char *v9;
  char v10;
  _QWORD v11[2];
  uint64_t v12;
  char v13;
  void *v14;
  __int128 v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = xmmword_1C85F20B0;
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v7 = 0;
    v8 = 0;
    switch(*(_BYTE *)(a2 + 32))
    {
      case 1:
        break;
      case 3:
        v8 = *(_BYTE **)a2;
        if (*(_QWORD *)a2)
          v7 = strlen(*(const char **)a2);
        else
          v7 = 0;
        break;
      case 4:
        v9 = *(const char **)a2;
        v10 = *(_BYTE *)(*(_QWORD *)a2 + 23);
        if (v10 >= 0)
          v8 = *(_BYTE **)a2;
        else
          v8 = *(_BYTE **)v9;
        if (v10 >= 0)
          v7 = v10 & 0x7F;
        else
          v7 = *((_QWORD *)v9 + 1);
        break;
      case 5:
        v8 = *(_BYTE **)a2;
        v7 = *(_QWORD *)(a2 + 8);
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector(a2, (uint64_t)&v14);
    v8 = v14;
    v7 = v15;
  }
  v11[0] = &off_1E813F5E8;
  v11[1] = a1;
  llvm::cas::FileSystemCache::lookupPath(*(_QWORD *)(a1 + 40), (uint64_t)v11, v8, v7, *(_QWORD *)(a1 + 48), a3, (uint64_t)&v12);
  *(_BYTE *)(a4 + 8) = *(_BYTE *)(a4 + 8) & 0xFE | v13 & 1;
  *(_QWORD *)a4 = v12;
  if (v14 != v16)
    free(v14);
}

_BYTE *sub_1C50526E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _BYTE *result;
  unsigned int v13;

  v4 = operator new();
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 0;
  v6 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = off_1E813F558;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v4 + 32) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(v4 + 40) = v10;
  if (v10)
  {
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a1 + 48);
  result = (_BYTE *)(v4 + 56);
  if (*(char *)(a1 + 79) < 0)
  {
    result = sub_1C47EBC30(result, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(v5 + 72) = *(_QWORD *)(a1 + 72);
  }
  do
    v13 = __ldxr(v6);
  while (__stxr(v13 + 1, v6));
  *a2 = v5;
  return result;
}

void sub_1C50527CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 48))(&v12, v6, *(_QWORD *)(a3 + 80));
  v7 = v12;
  if ((v13 & 1) == 0 || !v12)
  {
    if ((v13 & 1) != 0)
      v8 = 0;
    else
      v8 = v12;
    v9 = *(_QWORD *)(a2 + 40);
    v10 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 88))(v6, v8, 0);
    llvm::cas::FileSystemCache::finishLazySymlink(v9, a3, v10, v11);
    v7 = 0;
  }
  *a1 = v7;
}

void sub_1C5052898(_QWORD *a1, uint64_t a2, llvm::cas::FileSystemCache::DirectoryEntry *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::cas::FileSystemCache *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 48))(&v11, v6, *((_QWORD *)a3 + 10));
  v7 = v11;
  if ((v12 & 1) == 0 || !v11)
  {
    if ((v12 & 1) != 0)
      v8 = 0;
    else
      v8 = v11;
    v9 = *(llvm::cas::FileSystemCache **)(a2 + 40);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 88))(v6, v8, 0);
    llvm::cas::FileSystemCache::finishLazyFile(v9, a3, v10);
    v7 = 0;
  }
  *a1 = v7;
}

void sub_1C5052964()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5052978(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, const void *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  const std::error_category *v14;
  uint64_t v15;

  v6 = atomic_load((unint64_t *)(a2 + 72));
  LOBYTE(v6) = atomic_load((unsigned __int8 *)(v6 + 64));
  if ((v6 & 1) != 0)
    goto LABEL_6;
  sub_1C5051144(&v15, *(_QWORD *)(a1 + 8), a2);
  v10 = v15;
  if (v15)
  {
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v10;
    return;
  }
  v11 = atomic_load((unint64_t *)(a2 + 72));
  v12 = (_QWORD *)sub_1C5052A6C(v11, a3, a4);
  if (!v12)
  {
LABEL_6:
    v14 = std::generic_category();
    v12 = (_QWORD *)operator new();
    *v12 = &off_1E81A0D28;
    v12[1] = 2;
    v12[2] = v14;
    v13 = *(_BYTE *)(a5 + 8) | 1;
  }
  else
  {
    v13 = *(_BYTE *)(a5 + 8) & 0xFE;
  }
  *(_BYTE *)(a5 + 8) = v13;
  *(_QWORD *)a5 = v12;
}

void sub_1C5052A5C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sub_1C50527CC(a3, *(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1C5052A6C(uint64_t a1, const void *a2, const void *a3)
{
  int v4;
  uint64_t result;
  const void *v6[2];
  uint64_t *v7;

  v6[0] = a2;
  v6[1] = a3;
  v7 = 0;
  v4 = sub_1C61D4238((uint64_t *)(a1 + 72), v6, &v7);
  result = 0;
  if (v4)
  {
    if (v7 != (uint64_t *)(*(_QWORD *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 88)))
      return *v7;
  }
  return result;
}

uint64_t sub_1C5052AD0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E813F628;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5052B0C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E813F628;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

double sub_1C5052B58@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD v4[4];
  __int16 v5;

  v2 = *(_QWORD *)(a1 + 40);
  v5 = 260;
  v4[0] = a1 + 16;
  return llvm::cas::FileSystemCache::DirectoryEntry::getStatus(v2, (llvm::Twine *)v4, a2);
}

char *sub_1C5052B90@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + 24) &= ~1u;
  if (result[39] < 0)
    return (char *)sub_1C47EBC30((_BYTE *)a2, *((void **)result + 2), *((_QWORD *)result + 3));
  *(_OWORD *)a2 = *((_OWORD *)result + 1);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 4);
  return result;
}

void sub_1C5052BC8(uint64_t a1@<X0>, void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  void *v15;
  __int128 v16;
  _QWORD v17[33];

  v17[32] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 8);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(&v15, v5, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80));
  if ((v16 & 1) != 0 && v15)
  {
    v14 = v15;
    v6 = llvm::errorToErrorCode(&v14);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v7;
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
  else
  {
    if ((v16 & 1) != 0)
      v8 = 0;
    else
      v8 = v15;
    v15 = v17;
    v16 = xmmword_1C64638F0;
    if (*((_BYTE *)a2 + 33) == 1)
    {
      v9 = 0;
      v10 = 0;
      switch(*((_BYTE *)a2 + 32))
      {
        case 1:
          break;
        case 3:
          v10 = *a2;
          if (*a2)
            v9 = strlen((const char *)*a2);
          else
            v9 = 0;
          break;
        case 4:
          v13 = *((_BYTE *)*a2 + 23);
          if (v13 >= 0)
            v10 = *a2;
          else
            v10 = **a2;
          if (v13 >= 0)
            v9 = v13 & 0x7F;
          else
            v9 = (uint64_t)(*a2)[1];
          break;
        case 5:
          v10 = *a2;
          v9 = (uint64_t)a2[1];
          break;
        default:
          goto LABEL_13;
      }
    }
    else
    {
LABEL_13:
      llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v15);
      v10 = v15;
      v9 = v16;
    }
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v5 + 88))(v5, v8, 1);
    llvm::MemoryBuffer::getMemBuffer(v11, v12, (uint64_t)v10, v9, (char **)a3);
    *(_BYTE *)(a3 + 16) &= ~1u;
    if (v15 != v17)
      free(v15);
  }
}

__n128 sub_1C5052D98@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v2;
  __n128 result;

  v2 = *(__n128 **)(a1 + 40);
  a2[1].n128_u8[0] &= ~1u;
  result = v2[5];
  *a2 = result;
  return result;
}

uint64_t sub_1C5052DB4()
{
  std::system_category();
  return 0;
}

void sub_1C5052DD0(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD v5[2];

  v4 = *a1;
  v5[0] = &off_1E813F5E8;
  v5[1] = v4;
  llvm::cas::FileSystemCache::lookupPath(*(_QWORD *)(v4 + 40), (uint64_t)v5, a2, a3, *(_QWORD *)(v4 + 48), 1, a4);
}

_QWORD *sub_1C5052E10(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = a1;
  v2 = a1[3];
  if (v2 >= 8)
  {
    if ((v2 & 4) != 0)
    {
      if ((v2 & 2) == 0)
        a1 = (_QWORD *)*a1;
      (*(void (**)(_QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 16))(a1);
    }
    if ((v2 & 2) == 0)
      MEMORY[0x1CAA32FB4](*v1, v1[2]);
  }
  return v1;
}

uint64_t llvm::cas::SchemaPool::getSchemaForRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v2)
    return 0;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = 8 * v2;
  while (!(*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 40))(*v4, a2))
  {
    ++v4;
    v5 -= 8;
    if (!v5)
      return 0;
  }
  return *v4;
}

void *sub_1C5052ED4()
{
  return &llvm::cas::NodeSchema::ID;
}

BOOL sub_1C5052EE0(uint64_t a1, void *a2)
{
  return a2 == &llvm::cas::NodeSchema::ID || a2 == &llvm::RTTIRoot::ID;
}

uint64_t llvm::cas::CASOutputBackend::CASOutputBackend(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E813F6C0;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x100000000;
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1C5030834(a1 + 72, a2);
  return a1;
}

{
  uint64_t v3;

  v3 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E813F6C0;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x100000000;
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1C5030834(a1 + 72, a2);
  return a1;
}

double llvm::cas::CASOutputBackend::CASOutputBackend(uint64_t a1, uint64_t a2)
{
  double result;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E813F6C0;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)(a1 + 24) = 0x100000000;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = a2;
  return result;
}

_QWORD *llvm::cas::CASOutputBackend::createFileImpl@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *result;
  __int128 v18;
  uint64_t v19;
  char *v20;

  v8 = operator new();
  v9 = v8;
  v10 = (unint64_t)off_1EF8EB1F8 + 2;
  *(_QWORD *)&v18 = a1;
  v20 = (char *)off_1EF8EB1F8 + 2;
  *(_QWORD *)v8 = off_1E813F6F8;
  v11 = (_QWORD *)(v8 + 8);
  if (!a2)
  {
    *v11 = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    goto LABEL_12;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v12 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v12 = a3 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    *(_QWORD *)(v9 + 16) = a3;
    *(_QWORD *)(v9 + 24) = v13 | 0x8000000000000000;
    *(_QWORD *)(v9 + 8) = v11;
  }
  else
  {
    *(_BYTE *)(v8 + 31) = a3;
    if (!a3)
      goto LABEL_11;
  }
  memmove(v11, a2, a3);
LABEL_11:
  *((_BYTE *)v11 + a3) = 0;
  v10 = (unint64_t)v20;
LABEL_12:
  *(_QWORD *)(v9 + 32) = v9 + 56;
  *(_OWORD *)(v9 + 40) = xmmword_1C6612EE0;
  sub_1C613932C(v9 + 72, v9 + 32);
  *(_QWORD *)(v9 + 168) = v10;
  if (v10 >= 8)
  {
    v16 = (uint64_t *)(v9 + 144);
    if ((v10 & 2) != 0 && (v10 & 4) != 0)
    {
      (*(void (**)(uint64_t *@<X0>, _BYTE *@<X1>, uint64_t@<X2>, uint64_t@<X7>, uint64_t@<X8>))((v10 & 0xFFFFFFFFFFFFFFF8) + 8))(v16, &v18, v14, v15, *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8));
    }
    else
    {
      *(_OWORD *)v16 = v18;
      *(_QWORD *)(v9 + 160) = v19;
    }
    v20 = 0;
  }
  result = sub_1C5052E10(&v18);
  *(_BYTE *)(a4 + 8) &= ~1u;
  *(_QWORD *)a4 = v9;
  return result;
}

char **sub_1C5053158(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    do
    {
      if (v2[v4 - 9] < 0)
        operator delete(*(void **)&v2[v4 - 32]);
      v4 -= 32;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C50531C4(uint64_t *a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, void ***a4@<X8>)
{
  uint64_t v7;
  void **v8;
  void **v9;
  void **p_dst;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void **v15;
  uint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  BOOL v20;
  char *v21;
  void **__dst;
  size_t v23;
  unint64_t v24;
  void **v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  (*(void (**)(void ***__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*a1 + 64) + 8))(&__dst, *(_QWORD *)(*a1 + 64), 0, 0);
  v8 = __dst;
  if ((v23 & 1) != 0)
    v9 = 0;
  else
    v9 = __dst;
  if ((v23 & 1) != 0)
  {
    *a4 = __dst;
    if (v8)
      return;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v11 = a3 | 7;
    v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    v23 = a3;
    v24 = v12 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v24) = a3;
    p_dst = (void **)&__dst;
    if (!a3)
      goto LABEL_14;
  }
  memmove(p_dst, a2, a3);
LABEL_14:
  *((_BYTE *)p_dst + a3) = 0;
  v25 = v9;
  v13 = *(unsigned int *)(v7 + 24);
  v14 = *(_QWORD *)(v7 + 16);
  v15 = (void **)&__dst;
  if (v13 >= *(_DWORD *)(v7 + 28))
  {
    v18 = (unint64_t *)(v7 + 16);
    v19 = v13 + 1;
    v20 = v14 + 32 * v13 > (unint64_t)&__dst;
    if (v14 <= (unint64_t)&__dst && v20)
    {
      v21 = (char *)&__dst - v14;
      sub_1C61D4408(v7 + 16, v19);
      v14 = *v18;
      v15 = (void **)&v21[*v18];
    }
    else
    {
      sub_1C61D4408(v7 + 16, v19);
      v14 = *v18;
      v15 = (void **)&__dst;
    }
  }
  v16 = v14 + 32 * *(unsigned int *)(v7 + 24);
  v17 = *(_OWORD *)v15;
  *(_QWORD *)(v16 + 16) = v15[2];
  *(_OWORD *)v16 = v17;
  v15[1] = 0;
  v15[2] = 0;
  *v15 = 0;
  *(_QWORD *)(v16 + 24) = v15[3];
  ++*(_DWORD *)(v7 + 24);
  if (SHIBYTE(v24) < 0)
    operator delete(__dst);
  *a4 = 0;
}

void sub_1C505338C(__int128 **a1, uint64_t a2)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = (uint64_t)&(*a1)[2 * v2];
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(a2 + 24) = *((_QWORD *)v3 + 3);
      v3 += 2;
      a2 += 32;
    }
    while (v3 != (__int128 *)v4);
    v6 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v6)
    {
      v7 = *a1;
      v8 = 2 * v6;
      do
      {
        if (SBYTE7(v7[v8 - 1]) < 0)
          operator delete(*(void **)&v7[v8 - 2]);
        v8 -= 2;
      }
      while (v8 * 16);
    }
  }
}

uint64_t sub_1C5053410(uint64_t a1)
{
  void *v2;
  uint64_t v4;

  sub_1C5052E10((_QWORD *)(a1 + 144));
  *(_QWORD *)(a1 + 72) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 128) == 1)
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8077774924);
  }
  v2 = *(void **)(a1 + 32);
  if (v2 != (void *)(a1 + 56))
    free(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C5053498(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  sub_1C5052E10((_QWORD *)(a1 + 144));
  *(_QWORD *)(a1 + 72) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 128) == 1)
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8077774924);
  }
  v2 = *(void **)(a1 + 32);
  if (v2 != (void *)(a1 + 56))
    free(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5053530(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  v1 = a1 + 8;
  v2 = v3;
  v4 = (_QWORD *)(v1 + 136);
  v5 = *(_BYTE *)(v1 + 23);
  v6 = *(_QWORD *)(v1 + 160);
  if ((v6 & 2) == 0)
    v4 = (_QWORD *)*v4;
  if (v5 >= 0)
    v7 = v1;
  else
    v7 = v2;
  if (v5 >= 0)
    v8 = v5 & 0x7F;
  else
    v8 = *(_QWORD *)(v1 + 8);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(v6 & 0xFFFFFFFFFFFFFFF8))(v4, v7, v8, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_1C5053574(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1C505357C(uint64_t a1)
{
  return a1 + 72;
}

_QWORD *sub_1C5053584(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E813F748;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *a1 = &off_1E81A4310;
  v5 = (unsigned int *)a1[2];
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return a1;
}

void sub_1C5053624(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E813F748;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *a1 = &off_1E81A4310;
  v5 = (unsigned int *)a1[2];
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C50536D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 16) + 24))(v12);
  if ((v13 & 1) != 0)
  {
    v10 = v12[0];
    v11 = v12[1];
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v11;
  }
  else
  {
    result = (_QWORD *)operator new();
    v6 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      v7 = (unint64_t *)(v5 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v12[0];
    *result = &off_1E813F7D0;
    result[1] = v6;
    result[2] = v5;
    result[3] = v9;
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = result;
  }
  return result;
}

uint64_t sub_1C50537B4(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_1C5053824(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50538A4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

void sub_1C50538B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *p_p;
  size_t v4;
  __int128 *p_dst;
  void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 __dst;
  unint64_t v11;
  void *__p;
  size_t v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  if ((v15 & 1) != 0)
  {
    v6 = __p;
    v7 = v13;
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    return;
  }
  if (v14 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (!p_p)
  {
    __dst = 0uLL;
    v11 = 0;
    goto LABEL_20;
  }
  if (v14 >= 0)
    v4 = v14 & 0x7F;
  else
    v4 = v13;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v4;
    v11 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v11) = v4;
    p_dst = &__dst;
    if (!v4)
      goto LABEL_19;
  }
  memmove(p_dst, p_p, v4);
LABEL_19:
  *((_BYTE *)p_dst + v4) = 0;
LABEL_20:
  *(_BYTE *)(a2 + 24) &= ~1u;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v11;
  if ((v15 & 1) == 0 && v14 < 0)
    operator delete(__p);
}

uint64_t sub_1C5053A24(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

char *sub_1C5053A34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const char *v13;
  char v14;
  __int16 v15;
  _QWORD v16[2];
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  result = (char *)(*(_QWORD *(**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 24) + 40))(&v18);
  if ((v19 & 1) != 0 || BYTE8(v18))
  {
    v6 = *(_BYTE *)(a2 + 16);
    if ((v19 & 1) != 0)
    {
      *(_BYTE *)(a2 + 16) = v6 | 1;
      v7 = *((_QWORD *)&v18 + 1);
      *(_QWORD *)a2 = v18;
      *(_QWORD *)(a2 + 8) = v7;
    }
    else
    {
      *(_BYTE *)(a2 + 16) = v6 & 0xFE;
      *(_OWORD *)a2 = v18;
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    v13 = "<contents>";
    v15 = 259;
    result = (char *)(*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, const char **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v16, v5, &v13, -1, 0, 0);
    if ((v17 & 1) != 0)
    {
      v8 = v16[0];
      v9 = v16[1];
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v8;
      *(_QWORD *)(a2 + 8) = v9;
    }
    else
    {
      result = (char *)(*(_QWORD *(**)(const char **__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 8))(&v13, *(_QWORD *)(a1 + 8), 0, 0, *(_QWORD *)(v16[0] + 8), *(_QWORD *)(v16[0] + 16) - *(_QWORD *)(v16[0] + 8));
      if ((v14 & 1) != 0)
      {
        v12 = (char *)v13;
        v13 = 0;
        v10 = llvm::errorToErrorCode((_QWORD **)&v12);
        *(_BYTE *)(a2 + 16) |= 1u;
        *(_QWORD *)a2 = v10;
        *(_QWORD *)(a2 + 8) = v11;
        result = v12;
        if (v12)
          result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v12 + 8))(v12);
      }
      else
      {
        *(_BYTE *)(a2 + 16) &= ~1u;
        *(_QWORD *)a2 = v13;
        *(_BYTE *)(a2 + 8) = 1;
      }
      if ((v14 & 1) != 0)
      {
        result = (char *)v13;
        v13 = 0;
        if (result)
          result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
      }
      if ((v17 & 1) == 0)
      {
        result = (char *)v16[0];
        v16[0] = 0;
        if (result)
          return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t sub_1C5053BFC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C5053C0C@<X0>(uint64_t result@<X0>, uint64_t **a2@<X1>, char **a3@<X8>)
{
  char *v4;
  char **v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v4 = *(char **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v4 + 48))(v4, &llvm::ErrorList::ID))
    {
      *a3 = 0;
      v6 = (char **)*((_QWORD *)v4 + 1);
      v7 = (char **)*((_QWORD *)v4 + 2);
      if (v6 != v7)
      {
        v8 = 0;
        do
        {
          v12 = v8;
          v9 = *v6;
          *v6 = 0;
          if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v9 + 48))(v9, &llvm::ErrorInfoBase::ID))
          {
            v10 = **a2;
            **a2 = (uint64_t)v9;
            if (v10)
              (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
            v9 = 0;
          }
          v11 = v9;
          sub_1C6174794(&v12, &v11, &v13);
          v8 = v13;
          *a3 = v13;
          v13 = 0;
          if (v11)
            (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
          if (v12)
            (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
          ++v6;
        }
        while (v6 != v7);
      }
      return (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 8))(v4);
    }
    else
    {
      result = (*(uint64_t (**)(char *, void *))(*(_QWORD *)v4 + 48))(v4, &llvm::ErrorInfoBase::ID);
      if ((_DWORD)result)
      {
        result = **a2;
        **a2 = (uint64_t)v4;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v4 = 0;
      }
      *a3 = v4;
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t sub_1C5053D84(uint64_t a1, llvm::Twine *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)(a1 + 8) = 0;
  v9 = a1 + 8;
  *(_QWORD *)a1 = &unk_1E81A0E10;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  llvm::Twine::str(a2, &v13);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v9);
  *(_OWORD *)v9 = v13;
  *(_QWORD *)(v9 + 16) = v14;
  v10 = *a5;
  *a5 = 0;
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  return a1;
}

__n128 llvm::cas::CachingOnDiskFileSystem::CachingOnDiskFileSystem(uint64_t a1, _QWORD *a2)
{
  __n128 result;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1E813F820;
  *(_QWORD *)(a1 + 16) = *a2;
  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t llvm::cas::CachingOnDiskFileSystem::CachingOnDiskFileSystem(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)result = off_1E813F820;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = a2;
  return result;
}

void llvm::cas::createCachingOnDiskFileSystem(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  __int128 v6;
  unsigned int v7;

  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 0;
  v5 = (unsigned int *)(v4 + 8);
  v6 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *(_QWORD *)(v4 + 16) = v6;
  *(_OWORD *)(v4 + 24) = v6;
  *(_QWORD *)v4 = &off_1E813F978;
  *(_QWORD *)(v4 + 40) = v4 + 56;
  *(_QWORD *)(v4 + 48) = 0x200000000;
  *(_QWORD *)(v4 + 104) = v4 + 120;
  *(_QWORD *)(v4 + 112) = 0x200000000;
  *(_QWORD *)(v4 + 168) = 850045863;
  *(_BYTE *)(v4 + 280) = 0;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_QWORD *)(v4 + 248) = 0;
  *(_QWORD *)(v4 + 256) = 0;
  *(_BYTE *)(v4 + 272) = 0;
  *(_QWORD *)(v4 + 264) = 0;
  sub_1C5054028(v4);
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = v4;
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
}

void llvm::cas::createCachingOnDiskFileSystem(llvm::cas *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v5 = operator new();
  *(_DWORD *)(v5 + 8) = 0;
  v6 = (unsigned int *)(v5 + 8);
  *(_QWORD *)(v5 + 16) = this;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)v5 = &off_1E813F978;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = v5 + 56;
  *(_QWORD *)(v5 + 48) = 0x200000000;
  *(_QWORD *)(v5 + 104) = v5 + 120;
  *(_QWORD *)(v5 + 112) = 0x200000000;
  *(_QWORD *)(v5 + 168) = 850045863;
  *(_BYTE *)(v5 + 280) = 0;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_QWORD *)(v5 + 256) = 0;
  *(_QWORD *)(v5 + 264) = 0;
  *(_QWORD *)(v5 + 248) = 0;
  *(_BYTE *)(v5 + 272) = 0;
  sub_1C5054028(v5);
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
}

void sub_1C5054028(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  __int128 v15;
  __int16 v16;
  _BYTE __dst[24];
  _QWORD v18[17];

  v18[16] = *MEMORY[0x1E0C80C00];
  v2 = (unsigned int *)operator new();
  llvm::cas::FileSystemCache::FileSystemCache((uint64_t)v2, 0, 0);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  v4 = *(unsigned int **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v2;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      v7 = sub_1C5051410((uint64_t)v4);
      MEMORY[0x1CAA32FC0](v7, 0x10B2C40A65E917ELL);
    }
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 528);
  *(_QWORD *)(a1 + 240) = v8;
  v9 = *(const void **)v8;
  if (!*(_QWORD *)v8)
  {
    memset(__dst, 0, sizeof(__dst));
    goto LABEL_18;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    *(_QWORD *)&__dst[8] = v10;
    *(_QWORD *)&__dst[16] = v13 | 0x8000000000000000;
    *(_QWORD *)__dst = v11;
  }
  else
  {
    __dst[23] = *(_QWORD *)(v8 + 8);
    v11 = __dst;
    if (!v10)
      goto LABEL_17;
  }
  memmove(v11, v9, v10);
LABEL_17:
  v11[v10] = 0;
LABEL_18:
  v14 = (void **)(a1 + 248);
  if (*(char *)(a1 + 271) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 264) = *(_QWORD *)&__dst[16];
  *(_QWORD *)__dst = v18;
  *(_OWORD *)&__dst[8] = xmmword_1C85F20B0;
  if (!llvm::sys::fs::current_path((uint64_t)__dst))
  {
    v16 = 261;
    v15 = *(_OWORD *)__dst;
    sub_1C5054CF4(a1, (uint64_t)&v15);
  }
  if (*(_QWORD **)__dst != v18)
    free(*(void **)__dst);
}

void sub_1C50541FC(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  v2 = *(unsigned int **)(a1 + 232);
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      v5 = sub_1C5051410((uint64_t)v2);
      MEMORY[0x1CAA32FC0](v5, 0x10B2C40A65E917ELL);
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 168));
  sub_1C61D47A0((char **)(a1 + 104));
  v6 = *(char **)(a1 + 40);
  v7 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v7)
  {
    v8 = 24 * v7;
    v9 = v6 - 24;
    do
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v9[v8], 8);
      v8 -= 24;
    }
    while (v8);
    v6 = *(char **)(a1 + 40);
  }
  if (v6 != (char *)(a1 + 56))
    free(v6);
  sub_1C61D473C((llvm::vfs::FileSystem *)a1);
}

void sub_1C50542B8(uint64_t a1)
{
  sub_1C50541FC(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C50542DC(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v3[8];
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v6 = 0;
  sub_1C5055534(a1, a2, (uint64_t)v3, a3);
  if (v6)
  {
    if (v4 != &v5)
      free(v4);
  }
}

void sub_1C5054358(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  size_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  const std::error_category *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  void *v24;
  __int128 v25;
  _QWORD v26[17];

  v26[16] = *MEMORY[0x1E0C80C00];
  v24 = v26;
  v25 = xmmword_1C85F20B0;
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v6 = 0;
    v7 = 0;
    switch(*((_BYTE *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        v7 = *a2;
        if (*a2)
          v6 = strlen(*a2);
        else
          v6 = 0;
        break;
      case 4:
        v19 = (*a2)[23];
        if (v19 >= 0)
          v7 = *a2;
        else
          v7 = *(char **)*a2;
        if (v19 >= 0)
          v6 = v19 & 0x7F;
        else
          v6 = *((_QWORD *)*a2 + 1);
        break;
      case 5:
        v7 = *a2;
        v6 = (size_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v24);
    v7 = (char *)v24;
    v6 = v25;
  }
  sub_1C5056280((uint64_t)&v22, a1, v7, v6, 1, 1, 1, a3, 0, v20);
  if ((v23 & 1) != 0)
  {
    v21 = (_QWORD *)v22;
    v22 = 0;
    v13 = llvm::errorToErrorCode(&v21);
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v13;
    *(_QWORD *)(a4 + 8) = v14;
    if (v21)
      (*(void (**)(_QWORD *))(*v21 + 8))(v21);
  }
  else
  {
    v8 = v22;
    if (*(_DWORD *)(v22 + 40) < 2u)
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = operator new();
      v11 = (_QWORD *)v10;
      *(_QWORD *)v10 = off_1E813FA80;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(v10 + 16) = v8;
      v12 = (_QWORD *)(v10 + 24);
      if (!v7)
      {
        *v12 = 0;
        *(_QWORD *)(v10 + 32) = 0;
        *(_QWORD *)(v10 + 40) = 0;
LABEL_23:
        *(_BYTE *)(a4 + 16) &= ~1u;
        *(_QWORD *)a4 = v11;
        goto LABEL_24;
      }
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v6 >= 0x17)
      {
        v16 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v16 = v6 | 7;
        v17 = v16 + 1;
        v12 = operator new(v16 + 1);
        v11[4] = v6;
        v11[5] = v17 | 0x8000000000000000;
        v11[3] = v12;
      }
      else
      {
        *(_BYTE *)(v10 + 47) = v6;
        if (!v6)
          goto LABEL_22;
      }
      memmove(v12, v7, v6);
LABEL_22:
      *((_BYTE *)v12 + v6) = 0;
      goto LABEL_23;
    }
    *(_BYTE *)(a4 + 16) |= 1u;
    v15 = std::generic_category();
    *(_QWORD *)a4 = 22;
    *(_QWORD *)(a4 + 8) = v15;
  }
LABEL_24:
  if ((v23 & 1) != 0)
  {
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  if (v24 != v26)
    free(v24);
}

void sub_1C50545F4(uint64_t a1@<X0>, char **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X7>, uint64_t *a5@<X8>)
{
  size_t v8;
  char *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  char v12;
  uint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  DIR **v26;
  _QWORD *v27;
  char *v28;
  __int128 v29;
  int v30;
  const std::error_category *v31;
  char *v32;
  __int128 v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::mutex *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char v42;
  BOOL v43;
  char *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  char *v47;
  char v48;
  BOOL v49;
  char *v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  char v61;
  BOOL v62;
  char *v63;
  uint64_t v64;
  size_t v65;
  char v66;
  int v67;
  void *v68;
  unint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  char *v79;
  std::__shared_weak_count *v80;
  const void *v81;
  const void *v82;
  std::__shared_weak_count *v83;
  int v84;
  char v85;
  unint64_t v86;
  const std::error_category *v87;
  DIR **v88;
  std::__shared_weak_count *v89;
  char *v90;
  void *v91;
  uint64_t v92;
  _BYTE v93[48];
  uint64_t v94;
  char v95;
  char *v96;
  __int128 v97;
  _QWORD v98[18];

  v98[16] = *MEMORY[0x1E0C80C00];
  v96 = (char *)v98;
  v97 = xmmword_1C85F20B0;
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v8 = 0;
    v9 = 0;
    switch(*((_BYTE *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        v9 = *a2;
        if (*a2)
          v8 = strlen(*a2);
        else
          v8 = 0;
        break;
      case 4:
        v25 = (*a2)[23];
        if (v25 >= 0)
          v9 = *a2;
        else
          v9 = *(char **)*a2;
        if (v25 >= 0)
          v8 = v25 & 0x7F;
        else
          v8 = *((_QWORD *)*a2 + 1);
        break;
      case 5:
        v9 = *a2;
        v8 = (size_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v96);
    v9 = v96;
    v8 = v97;
  }
  sub_1C5056280((uint64_t)&v94, a1, v9, v8, 1, 1, 1, a4, 0, v72);
  if ((v95 & 1) != 0)
  {
    v14 = (char *)v94;
    v94 = 0;
    v79 = v14;
    v13 = llvm::errorToErrorCode((_QWORD **)&v79);
    v11 = v15;
    if (v79)
      (*(void (**)(char *))(*(_QWORD *)v79 + 8))(v79);
    v12 = -1;
  }
  else
  {
    v10 = (_QWORD *)v94;
    if (*(_DWORD *)(v94 + 40) == 3)
    {
      LODWORD(v86) = 0;
      v87 = std::system_category();
      v91 = v93;
      v92 = 0x200000000;
      v20 = (char *)*v10;
      v21 = (std::__shared_weak_count *)v10[1];
      LOWORD(v83) = 261;
      v79 = v20;
      v80 = v21;
      sub_1C61D4808((uint64_t)&v88, (const char **)&v79, &v86, 1);
      v79 = 0;
      v80 = 0;
      LOBYTE(v81) = 1;
      if (!(_DWORD)v86)
      {
        do
        {
          if (sub_1C5057AF4((uint64_t *)&v88, (uint64_t *)&v79))
            break;
          v26 = v88;
          v27 = v88 + 1;
          if (v92 >= HIDWORD(v92))
          {
            v77 = 0;
            v75 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v91, 0, 24, (unint64_t *)&v77);
            v32 = &v75[24 * v92];
            if (*((char *)v26 + 31) < 0)
            {
              sub_1C47EBC30(v32, v26[1], (unint64_t)v26[2]);
            }
            else
            {
              v33 = *(_OWORD *)v27;
              *((_QWORD *)v32 + 2) = v27[2];
              *(_OWORD *)v32 = v33;
            }
            sub_1C4E018F8((__int128 **)&v91, (uint64_t)v75);
            v34 = v77;
            if (v91 != v93)
              free(v91);
            v91 = v75;
            v30 = v92 + 1;
            HIDWORD(v92) = v34;
          }
          else
          {
            v28 = (char *)v91 + 24 * v92;
            if (*((char *)v88 + 31) < 0)
            {
              sub_1C47EBC30(v28, v88[1], (unint64_t)v88[2]);
            }
            else
            {
              v29 = *(_OWORD *)v27;
              *((_QWORD *)v28 + 2) = v88[3];
              *(_OWORD *)v28 = v29;
            }
            v30 = v92 + 1;
          }
          LODWORD(v92) = v30;
          v86 = llvm::sys::fs::detail::directory_iterator_increment(v88);
          v87 = v31;
        }
        while (!(_DWORD)v86);
        v35 = v80;
        if (v80)
        {
          p_shared_owners = (unint64_t *)&v80->__shared_owners_;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
      v22 = v89;
      if (v89)
      {
        v23 = (unint64_t *)&v89->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if ((_DWORD)v86)
      {
        v12 = -1;
        v13 = v86;
        v11 = (std::__shared_weak_count *)v87;
      }
      else
      {
        v38 = (std::mutex *)atomic_load(v10 + 9);
        v76 = (uint64_t)v38;
        sub_1C61D496C(&v88, v38);
        v39 = (char *)v91;
        if ((_DWORD)v92)
        {
          v40 = 0;
          v74 = 24 * v92;
          v73 = (char *)v91 + v74;
          while (1)
          {
            v41 = v39;
            v39 += v40;
            v42 = v39[23];
            v43 = v42 < 0;
            v44 = *(char **)v39;
            if (v42 >= 0)
              v44 = v39;
            v45 = (std::__shared_weak_count *)(v42 & 0x7F);
            if (v43)
              v45 = (std::__shared_weak_count *)*((_QWORD *)v39 + 1);
            v81 = 0;
            v82 = 0;
            v79 = v44;
            v80 = v45;
            v83 = v45;
            v84 = 0;
            llvm::sys::path::reverse_iterator::operator++((uint64_t)&v79);
            if (sub_1C5052A6C(v76, v81, v82))
              break;
            v40 += 24;
            v39 = v41;
            if (v74 == v40)
            {
              v39 = v73;
              goto LABEL_81;
            }
          }
          if (v74 - 24 != v40)
          {
            v46 = v74 - v40 - 24;
            v47 = v39 + 24;
            do
            {
              v48 = v47[23];
              v49 = v48 < 0;
              v50 = *(char **)v47;
              if (v48 >= 0)
                v50 = v47;
              v51 = (std::__shared_weak_count *)(v48 & 0x7F);
              if (v49)
                v51 = (std::__shared_weak_count *)*((_QWORD *)v47 + 1);
              v81 = 0;
              v82 = 0;
              v79 = v50;
              v80 = v51;
              v83 = v51;
              v84 = 0;
              llvm::sys::path::reverse_iterator::operator++((uint64_t)&v79);
              if (!sub_1C5052A6C(v76, v81, v82))
              {
                if (v39[23] < 0)
                  operator delete(*(void **)v39);
                v52 = *(_OWORD *)v47;
                *((_QWORD *)v39 + 2) = *((_QWORD *)v47 + 2);
                *(_OWORD *)v39 = v52;
                v39 += 24;
                v47[23] = 0;
                *v47 = 0;
              }
              v47 += 24;
              v46 -= 24;
            }
            while (v46);
          }
        }
LABEL_81:
        sub_1C5057CC0((__int128 *)((char *)v91 + 24 * v92), (__int128 *)((char *)v91 + 24 * v92), (uint64_t)v39);
        v54 = v53;
        v55 = (char *)v91;
        v56 = (char *)v91 + 24 * v92;
        if (v56 != v53)
        {
          do
          {
            if (*(v56 - 1) < 0)
              operator delete(*((void **)v56 - 3));
            v56 -= 24;
          }
          while (v56 != v54);
          v55 = (char *)v91;
        }
        v57 = -1431655765 * ((unint64_t)(v54 - v55) >> 3);
        LODWORD(v92) = v57;
        v58 = (unsigned int *)v88;
        if (v88)
        {
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          v57 = v92;
          v55 = (char *)v91;
        }
        if (v57)
        {
          v60 = 24 * v57;
          while (1)
          {
            v61 = v55[23];
            v62 = v61 < 0;
            v63 = v61 >= 0 ? v55 : *(char **)v55;
            v64 = v61 & 0x7F;
            v65 = v62 ? *((_QWORD *)v55 + 1) : v64;
            LOBYTE(v79) = 0;
            v85 = 0;
            sub_1C5057004((uint64_t)&v88, a1, (uint64_t)v10, v63, v65, (uint64_t)&v79);
            if ((v89 & 1) != 0)
            {
              if (v88)
                break;
            }
            v55 += 24;
            v60 -= 24;
            if (!v60)
              goto LABEL_100;
          }
          v13 = llvm::errorToErrorCode(&v88);
          v11 = v71;
          if (v88)
            ((void (*)(DIR **))(*v88)->__dd_loc)(v88);
          v12 = -1;
        }
        else
        {
LABEL_100:
          v88 = (DIR **)a1;
          v90 = (char *)&off_1EF8EB200 + 2;
          v66 = *(_BYTE *)(a1 + 271);
          v67 = v66;
          if (v66 >= 0)
            v68 = (void *)(a1 + 248);
          else
            v68 = *(void **)(a1 + 248);
          v69 = v66 & 0x7F;
          if (v67 >= 0)
            v70 = v69;
          else
            v70 = *(_QWORD *)(a1 + 256);
          llvm::cas::FileSystemCache::getCachedVFSDirIter(v76, (uint64_t)&v88, v68, v70, (unsigned int *)v9, v8, &v77);
          v13 = v77;
          v11 = v78;
          v77 = 0;
          v78 = 0;
          sub_1C5052E10(&v88);
          v12 = 0;
        }
      }
      sub_1C4E01820((char **)&v91);
    }
    else
    {
      v11 = (std::__shared_weak_count *)std::generic_category();
      v12 = -1;
      v13 = 20;
    }
  }
  if ((v95 & 1) != 0)
  {
    v16 = v94;
    v94 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  if (v96 != (char *)v98)
    free(v96);
  if ((v12 & 1) != 0)
  {
    *a3 = v13;
    a3[1] = (uint64_t)v11;
    *a5 = 0;
    a5[1] = 0;
  }
  else
  {
    *a5 = v13;
    a5[1] = (uint64_t)v11;
    if (v11)
    {
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

unint64_t sub_1C5054CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  int v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char v31;
  void *v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE __dst[24];
  _QWORD v36[17];

  v36[16] = *MEMORY[0x1E0C80C00];
  v32 = v34;
  v33 = xmmword_1C85F20B0;
  v3 = a1 + 248;
  v4 = *(_BYTE *)(a1 + 271);
  v5 = v4;
  if (v4 >= 0)
    v6 = (_BYTE *)(a1 + 248);
  else
    v6 = *(_BYTE **)(a1 + 248);
  v7 = v4 & 0x7F;
  if (v5 >= 0)
    v8 = v7;
  else
    v8 = *(_QWORD *)(a1 + 256);
  llvm::Twine::toVector(a2, (uint64_t)&v32);
  if (!(_QWORD)v33)
    goto LABEL_22;
  if (*(_BYTE *)v32 != 47)
  {
    *(_QWORD *)__dst = v36;
    *(_OWORD *)&__dst[8] = xmmword_1C85F20B0;
    if (v8 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__dst, v36, v8, 1);
      v24 = *(_QWORD *)&__dst[8];
      v25 = *(_QWORD **)__dst;
    }
    else
    {
      v24 = 0;
      if (!v8)
      {
        v26 = 128;
        goto LABEL_49;
      }
      v25 = v36;
    }
    memcpy((char *)v25 + v24, v6, v8);
    v24 = *(_QWORD *)&__dst[8];
    v26 = *(_QWORD *)&__dst[16];
LABEL_49:
    v27 = v24 + v8;
    *(_QWORD *)&__dst[8] = v27;
    if (v27 + 1 > v26)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__dst, v36, v27 + 1, 1);
      v27 = *(_QWORD *)&__dst[8];
    }
    *(_BYTE *)(*(_QWORD *)__dst + v27) = 47;
    ++*(_QWORD *)&__dst[8];
    sub_1C61D49FC((uint64_t *)&v32, (uint64_t)v32, *(char **)__dst, (char *)(*(_QWORD *)__dst + *(_QWORD *)&__dst[8]));
    if (*(_QWORD **)__dst != v36)
      free(*(void **)__dst);
  }
  llvm::sys::path::remove_dots((unsigned __int8 **)&v32, 1, 1u);
  v8 = v33;
  v10 = v33;
  if ((_DWORD)v33)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = *((unsigned __int8 *)v32 + v11);
      if (v12 && v14 == 47)
      {
        v12 = 1;
      }
      else
      {
        *((_BYTE *)v32 + v13++) = v14;
        v12 = v14 == 47;
      }
      ++v11;
    }
    while (v10 != v11);
    v8 = v33;
  }
  else
  {
    v13 = 0;
  }
  v15 = v13;
  if (v8 != v13)
  {
    if (v8 <= v13)
    {
      if (*((_QWORD *)&v33 + 1) < (unint64_t)v13)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v32, v34, v13, 1);
        v8 = v33;
      }
      if (v15 != v8)
        bzero((char *)v32 + v8, v15 - v8);
    }
    *(_QWORD *)&v33 = v15;
    v8 = v15;
  }
  v6 = v32;
  if (v15 > 1 && *((char *)v32 + v15 - 1) == 47)
  {
    v8 = v15 - 1;
    *(_QWORD *)&v33 = v15 - 1;
  }
LABEL_22:
  sub_1C5056280((uint64_t)&v30, a1, v6, v8, 1, 1, 1, v9, 0, v28);
  if ((v31 & 1) == 0)
  {
    if (!v6)
    {
      memset(__dst, 0, sizeof(__dst));
LABEL_36:
      if (*(char *)(a1 + 271) < 0)
        operator delete(*(void **)v3);
      *(_OWORD *)v3 = *(_OWORD *)__dst;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)&__dst[16];
      *(_QWORD *)(a1 + 240) = v30;
      std::system_category();
      v18 = 0;
      LODWORD(v19) = 0;
      goto LABEL_39;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v8 >= 0x17)
    {
      v20 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v20 = v8 | 7;
      v21 = v20 + 1;
      v16 = operator new(v20 + 1);
      *(_QWORD *)&__dst[8] = v8;
      *(_QWORD *)&__dst[16] = v21 | 0x8000000000000000;
      *(_QWORD *)__dst = v16;
    }
    else
    {
      __dst[23] = v8;
      v16 = __dst;
      if (!v8)
        goto LABEL_35;
    }
    memmove(v16, v6, v8);
LABEL_35:
    v16[v8] = 0;
    goto LABEL_36;
  }
  v29 = v30;
  v30 = 0;
  v17 = llvm::errorToErrorCode(&v29);
  v18 = v17;
  v19 = HIDWORD(v17);
  if (v29)
    (*(void (**)(_QWORD *))(*v29 + 8))(v29);
LABEL_39:
  if ((v31 & 1) != 0)
  {
    v22 = v30;
    v30 = 0;
    if (v22)
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
  }
  if (v32 != v34)
    free(v32);
  return v18 | ((unint64_t)v19 << 32);
}

char *sub_1C50550C8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + 24) &= ~1u;
  if (result[271] < 0)
    return (char *)sub_1C47EBC30((_BYTE *)a2, *((void **)result + 31), *((_QWORD *)result + 32));
  *(_OWORD *)a2 = *(_OWORD *)(result + 248);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 33);
  return result;
}

unint64_t sub_1C5055100(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void **v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  const void *v13;
  unint64_t v14;
  unint64_t v15;
  const void **v17;
  const void **v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sub_1C5055234(a1, a2, 1, a8, (uint64_t)&v18);
  v9 = v18;
  if ((v19 & 1) == 0 || !v18)
  {
    if ((v19 & 1) != 0)
      v9 = 0;
    v13 = *v9;
    v14 = (unint64_t)v9[1];
    v15 = *(_QWORD *)(a3 + 8);
    if (v15 == v14)
    {
      if (!v14)
      {
LABEL_10:
        std::system_category();
        v11 = 0;
        LODWORD(v12) = 0;
        return v11 | ((unint64_t)v12 << 32);
      }
    }
    else
    {
      if (v15 <= v14)
      {
        if (*(_QWORD *)(a3 + 16) < v14)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a3, (void *)(a3 + 24), v14, 1);
          v15 = *(_QWORD *)(a3 + 8);
        }
        if (v14 != v15)
          bzero((void *)(*(_QWORD *)a3 + v15), v14 - v15);
      }
      *(_QWORD *)(a3 + 8) = v14;
      if (!v14)
        goto LABEL_10;
    }
    memmove(*(void **)a3, v13, v14);
    goto LABEL_10;
  }
  v17 = v18;
  v10 = llvm::errorToErrorCode(&v17);
  v11 = v10;
  v12 = HIDWORD(v10);
  if (v17)
    (*((void (**)(const void **))*v17 + 1))(v17);
  return v11 | ((unint64_t)v12 << 32);
}

void sub_1C5055234(uint64_t a1@<X0>, char **a2@<X1>, int a3@<W2>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  __int128 v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = xmmword_1C85F20B0;
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v8 = 0;
    v9 = 0;
    switch(*((_BYTE *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        v9 = *a2;
        if (*a2)
          v8 = strlen(*a2);
        else
          v8 = 0;
        break;
      case 4:
        v10 = (*a2)[23];
        if (v10 >= 0)
          v9 = *a2;
        else
          v9 = *(char **)*a2;
        if (v10 >= 0)
          v8 = v10 & 0x7F;
        else
          v8 = *((_QWORD *)*a2 + 1);
        break;
      case 5:
        v9 = *a2;
        v8 = (uint64_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v14);
    v9 = (char *)v14;
    v8 = v15;
  }
  sub_1C5056280((uint64_t)&v12, a1, v9, v8, a3, 1, 1, a4, 0, v11);
  *(_BYTE *)(a5 + 8) = *(_BYTE *)(a5 + 8) & 0xFE | v13 & 1;
  *(_QWORD *)a5 = v12;
  if (v14 != v16)
    free(v14);
}

BOOL sub_1C5055398(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char *v10;
  char v11;
  char *v12;
  char *v13;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char v20;
  void *v21;
  __int128 v22;
  _QWORD v23[17];

  v23[16] = *MEMORY[0x1E0C80C00];
  v21 = v23;
  v22 = xmmword_1C85F20B0;
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v9 = 0;
    v10 = 0;
    switch(*((_BYTE *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        v10 = *a2;
        if (*a2)
          v9 = strlen(*a2);
        else
          v9 = 0;
        break;
      case 4:
        v15 = (*a2)[23];
        if (v15 >= 0)
          v10 = *a2;
        else
          v10 = *(char **)*a2;
        if (v15 >= 0)
          v9 = v15 & 0x7F;
        else
          v9 = *((_QWORD *)*a2 + 1);
        break;
      case 5:
        v10 = *a2;
        v9 = (uint64_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v21);
    v10 = (char *)v21;
    v9 = v22;
  }
  sub_1C5056280((uint64_t)&v19, a1, v10, v9, 1, 1, 0, a8, 0, v16);
  v11 = v20;
  if ((v20 & 1) != 0)
  {
    v12 = v19;
    v19 = 0;
    v17 = v12;
    sub_1C4D62BD4(&v17, &v18);
    if (v17)
      (*(void (**)(char *))(*(_QWORD *)v17 + 8))(v17);
    if ((v20 & 1) != 0)
    {
      v13 = v19;
      v19 = 0;
      if (v13)
        (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  if (v21 != v23)
    free(v21);
  return (v11 & 1) == 0;
}

void sub_1C5055534(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double Status;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  void *v23;
  __int16 v24;
  void *__p[2];
  char v26;
  char v27;
  _QWORD *v28;
  char v29;
  void *v30;
  void *v31[2];
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  LOBYTE(v30) = 0;
  v34 = 0;
  sub_1C61D4B40(a3, (uint64_t)&v30);
  if (v34 && v31[0] != &v33)
    free(v31[0]);
  v30 = &v32;
  *(_OWORD *)v31 = xmmword_1C85F20B0;
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v9 = 0;
    v10 = 0;
    switch(*((_BYTE *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        v10 = *a2;
        if (*a2)
          v9 = strlen(*a2);
        else
          v9 = 0;
        break;
      case 4:
        v19 = (*a2)[23];
        if (v19 >= 0)
          v10 = *a2;
        else
          v10 = *(char **)*a2;
        if (v19 >= 0)
          v9 = v19 & 0x7F;
        else
          v9 = *((_QWORD *)*a2 + 1);
        break;
      case 5:
        v10 = *a2;
        v9 = (uint64_t)a2[1];
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v30);
    v10 = (char *)v30;
    v9 = (uint64_t)v31[0];
  }
  sub_1C5056280((uint64_t)&v28, a1, v10, v9, 1, 1, 1, v8, 0, v20);
  if ((v29 & 1) != 0)
  {
    v13 = v28;
    v28 = 0;
    v21 = v13;
    v14 = llvm::errorToErrorCode(&v21);
    *(_BYTE *)(a4 + 80) |= 1u;
    *(_QWORD *)a4 = v14;
    *(_QWORD *)(a4 + 8) = v15;
    if (v21)
      (*(void (**)(_QWORD *))(*v21 + 8))(v21);
  }
  else
  {
    v11 = (uint64_t)v28;
    v24 = 261;
    v22 = v10;
    v23 = (void *)v9;
    Status = llvm::cas::FileSystemCache::DirectoryEntry::getStatus((uint64_t)v28, (llvm::Twine *)&v22, (uint64_t)__p);
    if ((v27 & 1) != 0)
    {
      v16 = __p[0];
      v17 = __p[1];
      *(_BYTE *)(a4 + 80) |= 1u;
      *(_QWORD *)a4 = v16;
      *(_QWORD *)(a4 + 8) = v17;
    }
    else
    {
      if (*(_DWORD *)(v11 + 40) <= 1u)
      {
        (*(void (**)(char **__return_ptr, _QWORD, _QWORD, double))(**(_QWORD **)(a1 + 16) + 16))(&v22, *(_QWORD *)(a1 + 16), *(_QWORD *)(v11 + 80), Status);
        sub_1C61D4BD4(a3, &v22);
        if (v23 != &v24)
          free(v23);
      }
      sub_1C5057D6C((std::error_category *)a4, (__int128 *)__p);
      if ((v27 & 1) == 0 && v26 < 0)
        operator delete(__p[0]);
    }
  }
  if ((v29 & 1) != 0)
  {
    v18 = (uint64_t)v28;
    v28 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  if (v30 != &v32)
    free(v30);
}

void sub_1C50557D4(uint64_t a1)
{
  std::mutex *v2;
  unsigned int v3;
  char *v4;
  char *v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  unint64_t v19;

  v2 = (std::mutex *)(a1 + 168);
  std::mutex::lock((std::mutex *)(a1 + 168));
  v3 = *(_DWORD *)(a1 + 48);
  if (v3 >= *(_DWORD *)(a1 + 52))
  {
    v19 = 0;
    v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 40, 0, 24, &v19);
    v8 = *(unsigned int *)(a1 + 48);
    v9 = &v4[24 * v8];
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_DWORD *)v9 + 4) = 0;
    v10 = *(char **)(a1 + 40);
    if ((_DWORD)v8)
    {
      v11 = &v10[24 * v8];
      v12 = v4;
      do
      {
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        *((_DWORD *)v12 + 4) = 0;
        *(_QWORD *)v12 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        *((_DWORD *)v12 + 2) = *((_DWORD *)v10 + 2);
        *((_DWORD *)v10 + 2) = 0;
        v13 = *((_DWORD *)v12 + 3);
        *((_DWORD *)v12 + 3) = *((_DWORD *)v10 + 3);
        *((_DWORD *)v10 + 3) = v13;
        v14 = *((_DWORD *)v12 + 4);
        *((_DWORD *)v12 + 4) = *((_DWORD *)v10 + 4);
        *((_DWORD *)v10 + 4) = v14;
        v10 += 24;
        v12 += 24;
      }
      while (v10 != v11);
      v10 = *(char **)(a1 + 40);
      v15 = *(unsigned int *)(a1 + 48);
      if ((_DWORD)v15)
      {
        v16 = 24 * v15;
        v17 = v10 - 24;
        do
        {
          MEMORY[0x1CAA32FB4](*(_QWORD *)&v17[v16], 8);
          v16 -= 24;
        }
        while (v16);
        v10 = *(char **)(a1 + 40);
      }
    }
    v18 = v19;
    if (v10 != (char *)(a1 + 56))
      free(v10);
    *(_QWORD *)(a1 + 40) = v4;
    v6 = *(_DWORD *)(a1 + 48) + 1;
    *(_DWORD *)(a1 + 52) = v18;
  }
  else
  {
    v4 = *(char **)(a1 + 40);
    v5 = &v4[24 * v3];
    v6 = v3 + 1;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    *((_DWORD *)v5 + 4) = 0;
  }
  *(_DWORD *)(a1 + 48) = v6;
  v7 = &v4[24 * v6];
  if (*((_DWORD *)v7 - 2) <= 0xFFu)
    sub_1C505767C((uint64_t)(v7 - 24), 256);
  sub_1C61D4C3C(a1 + 104);
  std::mutex::unlock(v2);
}

unint64_t sub_1C5055958(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  const char *v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v14[5];
  __int16 v15;
  char v16;
  _QWORD *v17;
  char v18;
  void *v19;
  __int128 v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = xmmword_1C85F20B0;
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*(_BYTE *)(a2 + 32))
    {
      case 1:
        break;
      case 3:
        v4 = *(_BYTE **)a2;
        if (*(_QWORD *)a2)
          v3 = strlen(*(const char **)a2);
        else
          v3 = 0;
        break;
      case 4:
        v10 = *(const char **)a2;
        v11 = *(_BYTE *)(*(_QWORD *)a2 + 23);
        if (v11 >= 0)
          v4 = *(_BYTE **)a2;
        else
          v4 = *(_BYTE **)v10;
        if (v11 >= 0)
          v3 = v11 & 0x7F;
        else
          v3 = *((_QWORD *)v10 + 1);
        break;
      case 5:
        v4 = *(_BYTE **)a2;
        v3 = *(_QWORD *)(a2 + 8);
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector(a2, (uint64_t)&v19);
    v4 = v19;
    v3 = v20;
  }
  v13 = 0;
  v14[0] = &off_1E813FA40;
  v14[1] = a1;
  v14[2] = 0;
  v14[4] = 0;
  v15 = 256;
  v16 = 0;
  llvm::cas::FileSystemCache::lookupPath(*(_QWORD *)(a1 + 232), (uint64_t)v14, v4, v3, *(_QWORD *)(a1 + 240), 1, (uint64_t)&v17);
  if ((v18 & 1) == 0)
  {
    v13 = v17;
LABEL_12:
    std::mutex::lock((std::mutex *)(a1 + 168));
    v8 = *(_DWORD *)(a1 + 112);
    if (v8)
      sub_1C61B7564((uint64_t)v14, *(_QWORD *)(a1 + 104) + 24 * v8 - 24, (uint64_t *)&v13);
    std::system_category();
    std::mutex::unlock((std::mutex *)(a1 + 168));
    v6 = 0;
    LODWORD(v7) = 0;
    goto LABEL_15;
  }
  if (!v17)
    goto LABEL_12;
  v12 = v17;
  v5 = llvm::errorToErrorCode(&v12);
  v6 = v5;
  v7 = HIDWORD(v5);
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
LABEL_15:
  if (v19 != v21)
    free(v19);
  return v6 | ((unint64_t)v7 << 32);
}

uint64_t sub_1C5055B54@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  _BYTE v33[32];
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  char *v40[2];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = (std::mutex *)(a1 + 168);
  std::mutex::lock((std::mutex *)(a1 + 168));
  v8 = *(_QWORD *)(a1 + 40) + 24 * *(unsigned int *)(a1 + 48);
  v9 = *(_QWORD *)(v8 - 24);
  *(_QWORD *)(v8 - 24) = 0;
  v10 = *(_DWORD *)(v8 - 16);
  *(_QWORD *)(v8 - 16) = 0;
  v11 = *(unsigned int *)(v8 - 8);
  *(_DWORD *)(v8 - 8) = 0;
  LODWORD(v8) = *(_DWORD *)(a1 + 48) - 1;
  *(_DWORD *)(a1 + 48) = v8;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * v8), 8);
  MEMORY[0x1CAA32FB4](0, 8);
  MEMORY[0x1CAA32FB4](0, 8);
  v12 = *(_QWORD *)(a1 + 104) + 24 * *(unsigned int *)(a1 + 112);
  v13 = *(_QWORD *)(v12 - 24);
  *(_QWORD *)(v12 - 24) = 0;
  v32 = *(_DWORD *)(v12 - 16);
  *(_QWORD *)(v12 - 16) = 0;
  v14 = *(unsigned int *)(v12 - 8);
  *(_DWORD *)(v12 - 8) = 0;
  LODWORD(v12) = *(_DWORD *)(a1 + 112) - 1;
  *(_DWORD *)(a1 + 112) = v12;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(*(_QWORD *)(a1 + 104) + 24 * v12), 8);
  MEMORY[0x1CAA32FB4](0, 8);
  MEMORY[0x1CAA32FB4](0, 8);
  std::mutex::unlock(v7);
  llvm::cas::TreeSchema::TreeSchema((llvm::cas::TreeSchema *)v33, *(llvm::cas::ObjectStore **)(a1 + 16));
  if (v10)
  {
    v30 = a3;
    *(_QWORD *)&v37 = &v38;
    *((_QWORD *)&v37 + 1) = 0x800000000;
    v40[0] = (char *)&v41;
    v40[1] = 0;
    v15 = v9;
    if ((_DWORD)v11)
    {
      v16 = 16 * v11;
      v15 = v9;
      while ((*(_QWORD *)v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v15 += 16;
        v16 -= 16;
        if (!v16)
          goto LABEL_35;
      }
    }
    v18 = v9 + 16 * v11;
    if (v15 != v18)
    {
      v19 = *(_QWORD *)v15;
LABEL_11:
      v28 = *(_BYTE *)(v15 + 8);
      if (v32)
      {
        v20 = v19;
        do
        {
          v34 = 0;
          if (sub_1C61B75F0(v13, v14, v20, &v34) && v34 != v13 + 8 * v14)
            goto LABEL_32;
          v20 = *(_QWORD *)(v20 + 32);
        }
        while (v20);
      }
      if (a2)
      {
        v21 = a2(v30, v19);
        v22 = v23;
      }
      else
      {
        v21 = *(_QWORD *)v19;
        v22 = *(_QWORD *)(v19 + 8);
      }
      v24 = *(_DWORD *)(v19 + 40);
      if (v24 == 3)
      {
        v36 = 261;
        v34 = v21;
        v35 = v22;
        v25 = 0;
        v26 = 0;
      }
      else
      {
        v25 = *(_QWORD *)(v19 + 80);
        if (v24 <= 1 && (v28 & 1) == 0)
        {
          if (!*(_BYTE *)(a1 + 280))
          {
            v29 = v21;
            (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16)
                                                                                                  + 8))(&v34, *(_QWORD *)(a1 + 16), 0, 0, 0, 0);
            if ((v35 & 1) != 0)
            {
              v21 = v29;
              if (v34)
                llvm::report_fatal_error(&v34);
            }
            else
            {
              if (!*(_BYTE *)(a1 + 280))
                *(_BYTE *)(a1 + 280) = 1;
              *(_QWORD *)(a1 + 272) = v34;
              v21 = v29;
            }
          }
          v25 = *(_QWORD *)(a1 + 272);
          v24 = *(_DWORD *)(v19 + 40);
        }
        v36 = 261;
        v34 = v21;
        v35 = v22;
        v26 = 1;
      }
      llvm::cas::HierarchicalTreeBuilder::pushImpl((uint64_t)&v37, v25, v26, v24, (uint64_t)&v34);
LABEL_32:
      while (1)
      {
        v15 += 16;
        if (v15 == v18)
          break;
        v19 = *(_QWORD *)v15;
        if ((*(_QWORD *)v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v15 != v18)
            goto LABEL_11;
          break;
        }
      }
    }
LABEL_35:
    llvm::cas::HierarchicalTreeBuilder::create((llvm::cas::HierarchicalTreeBuilder *)&v37, *(llvm::cas::ObjectStore **)(a1 + 16), a4);
    sub_1C4FCE9E8(v40);
    sub_1C4FCE9E8((char **)&v37);
  }
  else
  {
    llvm::cas::TreeProxy::create((llvm::cas::TreeProxy::Builder *)v33, 0, 0, (uint64_t)&v37);
    v17 = v39;
    *(_BYTE *)(a4 + 24) = *(_BYTE *)(a4 + 24) & 0xFE | v39 & 1;
    if ((v17 & 1) != 0)
    {
      *(_QWORD *)a4 = v37;
    }
    else
    {
      *(_OWORD *)a4 = v37;
      *(_QWORD *)(a4 + 16) = v38;
    }
  }
  MEMORY[0x1CAA32FB4](v13, 8);
  return MEMORY[0x1CAA32FB4](v9, 8);
}

uint64_t sub_1C5055F14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();
  char *v8;
  __int16 v9;
  uint64_t (**v10)();

  v4 = operator new();
  *(_QWORD *)v4 = off_1E813FAD0;
  *(_QWORD *)(v4 + 8) = v4 + 24;
  *(_QWORD *)(v4 + 16) = 0x800000000;
  *(_QWORD *)(v4 + 408) = v4 + 424;
  *(_QWORD *)(v4 + 416) = 0;
  *(_QWORD *)(v4 + 424) = a1;
  *(_QWORD *)(v4 + 432) = v4 + 456;
  *(_QWORD *)(v4 + 440) = 0;
  *(_QWORD *)(v4 + 448) = 128;
  *(_QWORD *)(v4 + 584) = v4 + 600;
  *(_QWORD *)(v4 + 592) = 0x600000000;
  *(_DWORD *)(v4 + 664) = 0;
  *(_OWORD *)(v4 + 648) = 0u;
  v8 = "/";
  v9 = 259;
  sub_1C5057DFC(v4, &v8, v5, &v10);
  v6 = v10;
  if (v10)
  {
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v6;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

double sub_1C5056014@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;

  v4 = operator new();
  *(_QWORD *)v4 = off_1E813FAD0;
  *(_QWORD *)(v4 + 8) = v4 + 24;
  *(_QWORD *)(v4 + 16) = 0x800000000;
  *(_QWORD *)(v4 + 408) = v4 + 424;
  *(_QWORD *)(v4 + 416) = 0;
  *(_QWORD *)(v4 + 424) = a1;
  *(_QWORD *)(v4 + 432) = v4 + 456;
  *(_QWORD *)(v4 + 440) = 0;
  *(_QWORD *)(v4 + 448) = 128;
  *(_QWORD *)(v4 + 584) = v4 + 600;
  *(_QWORD *)(v4 + 592) = 0x600000000;
  *(_DWORD *)(v4 + 664) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 648) = 0u;
  *a2 = v4;
  return result;
}

_BYTE *sub_1C50560A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _BYTE *result;
  unsigned int v13;

  v4 = operator new();
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 0;
  v6 = (unsigned int *)(v4 + 8);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v4 + 32) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)v4 = &off_1E813F978;
  *(_QWORD *)(v4 + 40) = v4 + 56;
  *(_QWORD *)(v4 + 48) = 0x200000000;
  *(_QWORD *)(v4 + 104) = v4 + 120;
  *(_QWORD *)(v4 + 112) = 0x200000000;
  *(_QWORD *)(v4 + 168) = 850045863;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  v10 = *(unsigned int **)(a1 + 232);
  *(_QWORD *)(v4 + 224) = 0;
  *(_QWORD *)(v4 + 232) = v10;
  if (v10)
  {
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(v4 + 240) = *(_QWORD *)(a1 + 240);
  result = (_BYTE *)(v4 + 248);
  if (*(char *)(a1 + 271) < 0)
  {
    result = sub_1C47EBC30(result, *(void **)(a1 + 248), *(_QWORD *)(a1 + 256));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 248);
    *(_QWORD *)(v5 + 264) = *(_QWORD *)(a1 + 264);
  }
  *(_BYTE *)(v5 + 272) = 0;
  *(_BYTE *)(v5 + 280) = 0;
  do
    v13 = __ldxr(v6);
  while (__stxr(v13 + 1, v6));
  *a2 = v5;
  return result;
}

const char *sub_1C50561CC(const char **a1, uint64_t a2)
{
  const char *v3;

  if (*((_BYTE *)a1 + 33) == 1)
  {
    v3 = 0;
    switch(*((_BYTE *)a1 + 32))
    {
      case 1:
        return v3;
      case 3:
        v3 = *a1;
        if (*a1)
          strlen(*a1);
        break;
      case 4:
        if ((*a1)[23] >= 0)
          v3 = *a1;
        else
          v3 = *(const char **)*a1;
        break;
      case 5:
        v3 = *a1;
        break;
      default:
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    llvm::Twine::toVector((uint64_t)a1, a2);
    return *(const char **)a2;
  }
  return v3;
}

void sub_1C5056280(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, int a5, char a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::mutex *v15;
  int v16;
  _QWORD v19[5];
  BOOL v20;
  char v21;
  char v22;

  v15 = (std::mutex *)(a2 + 168);
  std::mutex::lock((std::mutex *)(a2 + 168));
  v16 = *(_DWORD *)(a2 + 48);
  std::mutex::unlock(v15);
  v19[0] = &off_1E813FA40;
  v19[1] = a2;
  v19[2] = a9;
  v19[3] = a10;
  v19[4] = 0;
  v20 = v16 != 0;
  v21 = a6;
  v22 = 0;
  llvm::cas::FileSystemCache::lookupPath(*(_QWORD *)(a2 + 232), (uint64_t)v19, a3, a4, *(_QWORD *)(a2 + 240), a5, a1);
  if (v16 && (*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    if (*(_QWORD *)a1)
      sub_1C5056358(a2, *(_QWORD *)a1, a7);
  }
}

void sub_1C5056358(uint64_t a1, uint64_t a2, char a3)
{
  std::mutex *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (std::mutex *)(a1 + 168);
  std::mutex::lock((std::mutex *)(a1 + 168));
  v7 = *(_DWORD *)(a1 + 48);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 40) + 24 * v7;
    v9 = *(_QWORD *)(v8 - 24);
    v15 = 0;
    v10 = sub_1C49F21C0(v9, *(_DWORD *)(v8 - 8), a2, &v15);
    v11 = v15;
    if (v10)
    {
      v12 = *(_BYTE *)(v15 + 8);
LABEL_9:
      *(_BYTE *)(v11 + 8) = v12 | a3;
      goto LABEL_10;
    }
    v16 = v15;
    v13 = *(_DWORD *)(v8 - 16);
    v14 = *(_DWORD *)(v8 - 8);
    if (4 * v13 + 4 >= 3 * v14)
    {
      v14 *= 2;
    }
    else if (v14 + ~v13 - *(_DWORD *)(v8 - 12) > v14 >> 3)
    {
LABEL_6:
      *(_DWORD *)(v8 - 16) = v13 + 1;
      if (*(_QWORD *)v11 != -4096)
        --*(_DWORD *)(v8 - 12);
      *(_QWORD *)v11 = a2;
      v12 = *(_BYTE *)(v11 + 8) & 0xFE;
      *(_BYTE *)(v11 + 8) = v12;
      goto LABEL_9;
    }
    sub_1C505767C(v8 - 24, v14);
    sub_1C49F21C0(*(_QWORD *)(v8 - 24), *(_DWORD *)(v8 - 8), a2, &v16);
    v13 = *(_DWORD *)(v8 - 16);
    v11 = v16;
    goto LABEL_6;
  }
LABEL_10:
  std::mutex::unlock(v6);
}

void sub_1C5056484()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5056498(uint64_t a1@<X0>, const void **a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  size_t v6;
  unsigned __int8 *v7;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  const char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const void **v19;
  const void **v20;
  const void **v21;
  unint64_t v22;
  unsigned __int8 *v23;
  const void *v24;
  const void *v25;
  const char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[4];
  char v33;
  _QWORD v34[4];
  __int16 v35;
  _OWORD v36[3];
  int v37;
  uint64_t v38;
  _BYTE v39[64];
  unsigned __int8 *v40[2];
  stat v41;
  _BYTE v42[24];
  _BYTE v43[256];
  unsigned __int8 *v44;
  __int128 v45;
  _WORD v46[64];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v40[0] = a3;
  v40[1] = a4;
  if (!*(_BYTE *)(a1 + 41))
  {
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = 0;
    return;
  }
  v6 = (size_t)a4;
  v7 = a3;
  v11 = *a2;
  v10 = (unint64_t)a2[1];
  *(_QWORD *)v42 = v43;
  *(_OWORD *)&v42[8] = xmmword_1C64638F0;
  if (v10 >= 0x101)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v42, v43, v10, 1);
    v12 = *(_QWORD *)&v42[8];
  }
  else
  {
    v12 = 0;
  }
  if (v10)
  {
    memcpy((void *)(*(_QWORD *)v42 + v12), v11, v10);
    v12 = *(_QWORD *)&v42[8];
  }
  *(_QWORD *)&v42[8] = v12 + v10;
  v46[4] = 261;
  v44 = v7;
  *(_QWORD *)&v45 = v6;
  LOWORD(v41.st_atimespec.tv_sec) = 257;
  *(_WORD *)&v39[32] = 257;
  LOWORD(v36[2]) = 257;
  llvm::sys::path::append(v42, 0, (_QWORD **)&v44, &v41, (_QWORD **)v39, (void ***)v36);
  memset(v39, 0, 44);
  *(_QWORD *)&v39[44] = 0xFFFFLL;
  *(_WORD *)&v39[52] = 0;
  *(_QWORD *)&v39[56] = 0;
  LOWORD(v36[2]) = 261;
  v36[0] = *(_OWORD *)v42;
  v44 = (unsigned __int8 *)v46;
  v45 = xmmword_1C85F20B0;
  v13 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)v36, (uint64_t)&v44);
  v14 = lstat(v13, &v41);
  v15 = sub_1C5E7F828(v14, &v41.st_dev, (uint64_t)v39);
  v17 = v16;
  if (v44 == (unsigned __int8 *)v46)
  {
    if ((_DWORD)v15)
      goto LABEL_8;
  }
  else
  {
    free(v44);
    if ((_DWORD)v15)
    {
LABEL_8:
      v18 = (_QWORD *)operator new();
      *v18 = &off_1E81A0D28;
      v18[1] = v15;
      v18[2] = v17;
LABEL_9:
      *(_BYTE *)(a5 + 8) |= 1u;
      *(_QWORD *)a5 = v18;
      goto LABEL_10;
    }
  }
  v19 = *(const void ***)(a1 + 32);
  if (!v19)
  {
LABEL_20:
    sub_1C50569A4((uint64_t)&v44, *(_QWORD *)(a1 + 8), (unint64_t)a2, v7, v6);
    v21 = (const void **)v44;
    if ((v45 & 1) != 0)
    {
      *(_BYTE *)(a5 + 8) |= 1u;
      *(_QWORD *)a5 = v21;
      goto LABEL_10;
    }
    if (v44)
    {
      while (1)
      {
        v20 = v21;
        v21 = (const void **)v21[4];
        if (!v21)
          break;
        if (v21 == a2)
          goto LABEL_24;
      }
    }
    goto LABEL_35;
  }
  do
  {
    v20 = v19;
    v19 = (const void **)v19[4];
    if (!v19)
      goto LABEL_20;
  }
  while (v19 != a2);
LABEL_24:
  v23 = (unsigned __int8 *)v20[2];
  v22 = (unint64_t)v20[3];
  if (v6 == v22)
  {
    if (!v6 || !memcmp(v7, v20[2], v6))
    {
      *(_BYTE *)(a5 + 8) &= ~1u;
      *(_QWORD *)a5 = v20;
      goto LABEL_10;
    }
    if (llvm::StringRef::compare_insensitive(v40, v23, v22))
      goto LABEL_33;
  }
  else
  {
    if (!v6)
    {
LABEL_35:
      v31 = *(_QWORD *)(a1 + 8);
      v32[0] = *(_OWORD *)v39;
      v32[1] = *(_OWORD *)&v39[16];
      v32[2] = *(_OWORD *)&v39[32];
      v32[3] = *(_OWORD *)&v39[48];
      v33 = 1;
      sub_1C5057004(a5, v31, (uint64_t)a2, *(_BYTE **)v42, *(size_t *)&v42[8], (uint64_t)v32);
      goto LABEL_10;
    }
LABEL_33:
    while (((char)*v7 & 0x80000000) == 0)
    {
      ++v7;
      if (!--v6)
        goto LABEL_35;
    }
  }
  memset(v36, 0, 44);
  v37 = 0;
  v38 = 0;
  v24 = *v20;
  v25 = v20[1];
  v35 = 261;
  v34[0] = v24;
  v34[1] = v25;
  v44 = (unsigned __int8 *)v46;
  v45 = xmmword_1C85F20B0;
  v26 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)v34, (uint64_t)&v44);
  v27 = lstat(v26, &v41);
  v28 = sub_1C5E7F828(v27, &v41.st_dev, (uint64_t)v36);
  v30 = v29;
  if (v44 == (unsigned __int8 *)v46)
  {
    if ((_DWORD)v28)
    {
LABEL_30:
      v18 = (_QWORD *)operator new();
      *v18 = &off_1E81A0D28;
      v18[1] = v28;
      v18[2] = v30;
      goto LABEL_9;
    }
  }
  else
  {
    free(v44);
    if ((_DWORD)v28)
      goto LABEL_30;
  }
  if (*(_DWORD *)&v39[48] != v37 || *(_QWORD *)&v39[56] != v38)
    goto LABEL_35;
  sub_1C5056EF0(a5, *(_QWORD *)(a1 + 8), (uint64_t)a2, *(_BYTE **)v42, *(size_t *)&v42[8], v23, v22);
LABEL_10:
  if (*(_BYTE **)v42 != v43)
    free(*(void **)v42);
}

void sub_1C50568A4(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1C50568AC(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 41) && !*(_BYTE *)(a1 + 42))
  {
    *(_BYTE *)(a1 + 42) = 1;
    sub_1C50569A4((uint64_t)&v8, *(_QWORD *)(a1 + 8), a2, a3, a4);
    v7 = v8;
    if ((v9 & 1) == 0)
    {
      *(_QWORD *)(a1 + 32) = v8;
      v7 = 0;
    }
    *a5 = v7;
  }
  else
  {
    *a5 = 0;
  }
}

void sub_1C5056950(uint64_t a1, uint64_t a2)
{
  void (*v4)(_QWORD, uint64_t);

  v4 = *(void (**)(_QWORD, uint64_t))(a1 + 16);
  if (v4)
    v4(*(_QWORD *)(a1 + 24), a2);
  if (*(_BYTE *)(a1 + 40))
    sub_1C5056358(*(_QWORD *)(a1 + 8), a2, 1);
}

void sub_1C50569A4(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5)
{
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  const char *v13;
  int v14;
  uint64_t v15;
  const std::error_category *v16;
  const std::error_category *v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  _QWORD *v23;
  llvm::sys::Process *v24;
  unint64_t v25;
  const char *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  const char *v30;
  size_t v31;
  unint64_t v32;
  size_t v33;
  unint64_t v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  const char *v38;
  BOOL v39;
  unint64_t v40;
  size_t v41;
  unint64_t Directory;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  _OWORD v47[4];
  __n128 v48[3];
  unint64_t v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  unint64_t v53;
  __int128 v54;
  _BYTE v55[48];
  char *v56;
  char *v57;
  llvm::sys::Process *v58;
  char v59;
  void *v60;
  __int128 v61;
  _WORD v62[128];
  _BYTE __s2[24];
  _BYTE v64[256];
  stat v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)__s2 = v64;
  v11 = *(const void **)a3;
  v10 = *(_QWORD *)(a3 + 8);
  *(_OWORD *)&__s2[8] = xmmword_1C64638F0;
  if (v10 >= 0x101)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__s2, v64, v10, 1);
    v12 = *(_QWORD *)&__s2[8];
  }
  else
  {
    v12 = 0;
  }
  if (v10)
  {
    memcpy((void *)(*(_QWORD *)__s2 + v12), v11, v10);
    v12 = *(_QWORD *)&__s2[8];
  }
  *(_QWORD *)&__s2[8] = v12 + v10;
  v62[4] = 261;
  v60 = a4;
  *(_QWORD *)&v61 = a5;
  LOWORD(v65.st_atimespec.tv_sec) = 257;
  *(_WORD *)&v55[16] = 257;
  v52.n128_u16[0] = 257;
  llvm::sys::path::append(__s2, 0, (_QWORD **)&v60, &v65, (_QWORD **)&v54, (void ***)&v50);
  v54 = 0u;
  memset(v55, 0, 28);
  *(_QWORD *)&v55[28] = 0xFFFFLL;
  *(_WORD *)&v55[36] = 0;
  *(_QWORD *)&v55[40] = 0;
  v52.n128_u16[0] = 261;
  v50 = *(__n128 *)__s2;
  v60 = v62;
  v61 = xmmword_1C85F20B0;
  v13 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)&v50, (uint64_t)&v60);
  v14 = stat(v13, &v65);
  v15 = sub_1C5E7F828(v14, &v65.st_dev, (uint64_t)&v54);
  v17 = v16;
  if (v60 == v62)
  {
    if ((_DWORD)v15)
    {
LABEL_13:
      v23 = (_QWORD *)operator new();
      *v23 = &off_1E81A0D28;
      v23[1] = v15;
      v23[2] = v17;
      *(_BYTE *)(a1 + 8) |= 1u;
      *(_QWORD *)a1 = v23;
      goto LABEL_14;
    }
  }
  else
  {
    free(v60);
    if ((_DWORD)v15)
      goto LABEL_13;
  }
  if (*(_DWORD *)&v55[24] <= 1u)
  {
    v17 = std::generic_category();
    v15 = 2;
    goto LABEL_13;
  }
  v60 = v62;
  v61 = xmmword_1C64638F0;
  LOWORD(v65.st_atimespec.tv_sec) = 261;
  *(_OWORD *)&v65.st_dev = *(_OWORD *)__s2;
  llvm::sys::fs::openNativeFileForRead((unsigned __int8 *)&v65, 0, &v60, (uint64_t)&v58);
  if ((v59 & 1) != 0)
  {
    v24 = v58;
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v24;
    goto LABEL_63;
  }
  v19 = v60;
  v20 = v61;
  v50.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(a2 + 232) + 528);
  v50.n128_u64[1] = (unint64_t)v60;
  v51.n128_u64[0] = v61;
  if ((_QWORD)v61 && (v21 = memchr(v60, 47, v61)) != 0)
    v22 = v21 - v19;
  else
    v22 = -1;
  if (v20 >= v22)
    v25 = v22;
  else
    v25 = v20;
  v51.n128_u64[1] = (unint64_t)v19;
  v52.n128_u64[0] = v25;
  v26 = &v19[v25];
  v27 = v20 - v25;
  v28 = v22 == -1;
  if (v22 == -1)
    v29 = 0;
  else
    v29 = v27;
  if (v28)
    v30 = "";
  else
    v30 = v26;
  v52.n128_u64[1] = (unint64_t)v30;
  v53 = v29;
  if (*(_QWORD *)&__s2[8] >= (unint64_t)(*(_QWORD *)&__s2[8] - a5))
    v31 = *(_QWORD *)&__s2[8] - a5;
  else
    v31 = *(_QWORD *)&__s2[8];
  if (v20 >= v31 && (!v31 || !memcmp(v19, *(const void **)__s2, v31)))
  {
    if (v20 >= v31)
      v33 = v31;
    else
      v33 = v20;
    v32 = v20 - v33;
    v34 = (unint64_t)&v19[v33];
    if (v20 > v31 && (v35 = memchr(&v19[v33], 47, v20 - v33)) != 0)
      v36 = (unint64_t)v35 - v34;
    else
      v36 = -1;
    if (v32 >= v36)
      v37 = v36;
    else
      v37 = v32;
    v38 = (const char *)(v34 + v37);
    v50.n128_u64[0] = a3;
    v50.n128_u64[1] = v34;
    v39 = v36 == -1;
    if (v36 == -1)
      v40 = 0;
    else
      v40 = v32 - v37;
    if (v39)
      v38 = "";
    v51.n128_u64[0] = v32;
    v51.n128_u64[1] = v34;
    v52.n128_u64[0] = v37;
    v52.n128_u64[1] = (unint64_t)v38;
    v53 = v40;
  }
  else
  {
    v48[0] = v50;
    v48[1] = v51;
    v48[2] = v52;
    v49 = v53;
    llvm::cas::FileSystemCache::lookupRealPathPrefixFromCached(v48, 0, v18, &v50);
    v32 = v51.n128_u64[0];
  }
  if (v32)
  {
    while (v53)
    {
      if ((unint64_t)v61 >= v51.n128_u64[1] + v52.n128_u64[0] - (unint64_t)v60)
        v41 = v51.n128_u64[1] + v52.n128_u64[0] - (_QWORD)v60;
      else
        v41 = v61;
      Directory = llvm::cas::FileSystemCache::makeDirectory(*(_QWORD *)(a2 + 232), v50.n128_i64[0], v60, v41, 0, 0);
      if (*(_DWORD *)(Directory + 40) != 3)
        goto LABEL_59;
      sub_1C5057398(&v50, Directory);
    }
    v54 = 0u;
    memset(v55, 0, 28);
    *(_QWORD *)&v55[28] = 0xFFFFLL;
    *(_WORD *)&v55[36] = 0;
    *(_QWORD *)&v55[40] = 0;
    v43 = v58;
    v44 = fstat((int)v58, &v65);
    if (sub_1C5E7F828(v44, &v65.st_dev, (uint64_t)&v54))
    {
LABEL_59:
      *(_BYTE *)(a1 + 8) &= ~1u;
      *(_QWORD *)a1 = 0;
      goto LABEL_62;
    }
    if (*(_DWORD *)&v55[24] == 3)
    {
      v46 = llvm::cas::FileSystemCache::makeDirectory(*(_QWORD *)(a2 + 232), v50.n128_i64[0], v60, v61, 0, 0);
      *(_BYTE *)(a1 + 8) &= ~1u;
      *(_QWORD *)a1 = v46;
      goto LABEL_62;
    }
    v47[0] = v54;
    v47[1] = *(_OWORD *)v55;
    v47[2] = *(_OWORD *)&v55[16];
    v47[3] = *(_OWORD *)&v55[32];
    sub_1C505747C((uint64_t)&v65, a2, v50.n128_i64[0], v60, v61, v43, (uint64_t)v47);
    if ((v65.st_ino & 1) != 0)
    {
      v56 = *(char **)&v65.st_dev;
      sub_1C4D62BD4(&v56, &v57);
      if (v56)
        (*(void (**)(char *))(*(_QWORD *)v56 + 8))(v56);
      v45 = 0;
      *(_BYTE *)(a1 + 8) &= ~1u;
    }
    else
    {
      *(_BYTE *)(a1 + 8) &= ~1u;
      v45 = *(_QWORD *)&v65.st_dev;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 8) &= ~1u;
    v45 = v50.n128_u64[0];
  }
  *(_QWORD *)a1 = v45;
LABEL_62:
  llvm::sys::Process::SafelyCloseFileDescriptor((llvm::sys::Process *)v58);
LABEL_63:
  if (v60 != v62)
    free(v60);
LABEL_14:
  if (*(_BYTE **)__s2 != v64)
    free(*(void **)__s2);
}

_QWORD *sub_1C5056EF0(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, size_t a5, const void *a6, size_t a7)
{
  _QWORD *result;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  result = (*(_QWORD *(**)(_QWORD **__return_ptr, _QWORD, _QWORD, _QWORD, const void *, size_t))(**(_QWORD **)(a2 + 16) + 8))(&v17, *(_QWORD *)(a2 + 16), 0, 0, a6, a7);
  if ((v18 & 1) != 0)
  {
    v16 = (uint64_t)v17;
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v16;
  }
  else
  {
    result = (_QWORD *)llvm::cas::FileSystemCache::makeSymlink(*(_QWORD *)(a2 + 232), a3, a4, a5, (uint64_t)v17, a6, a7);
    *(_BYTE *)(a1 + 8) &= ~1u;
    v15 = v18;
    *(_QWORD *)a1 = result;
    if ((v15 & 1) != 0)
    {
      result = v17;
      v17 = 0;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

void sub_1C5057004(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, size_t a5, uint64_t a6)
{
  __int128 v11;
  __int128 v12;
  _QWORD *Directory;
  char v14;
  const char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  ssize_t v21;
  uint64_t v22;
  const std::error_category *v23;
  const std::error_category *v24;
  _QWORD *v25;
  uint64_t v26;
  ssize_t v27;
  size_t v28;
  llvm::sys::Process *st_dev;
  uint64_t v30;
  _OWORD v31[4];
  _BYTE v32[64];
  _QWORD v33[4];
  __int16 v34;
  void *v35;
  __int128 v36;
  _WORD v37[64];
  char __src[8];
  __int128 v39;
  _WORD v40[500];
  stat v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  memset(v32, 0, 44);
  *(_QWORD *)&v32[44] = 0xFFFFLL;
  *(_WORD *)&v32[52] = 0;
  *(_QWORD *)&v32[56] = 0;
  if (*(_BYTE *)(a6 + 64))
  {
    v11 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)v32 = *(_OWORD *)a6;
    *(_OWORD *)&v32[16] = v11;
    v12 = *(_OWORD *)(a6 + 48);
    *(_OWORD *)&v32[32] = *(_OWORD *)(a6 + 32);
    *(_OWORD *)&v32[48] = v12;
    goto LABEL_3;
  }
  v37[4] = 261;
  v35 = a4;
  *(_QWORD *)&v36 = a5;
  *(_QWORD *)__src = v40;
  v39 = xmmword_1C85F20B0;
  v15 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)&v35, (uint64_t)__src);
  v16 = lstat(v15, &v41);
  v17 = sub_1C5E7F828(v16, &v41.st_dev, (uint64_t)v32);
  v19 = v18;
  if (*(_WORD **)__src == v40)
  {
    if ((_DWORD)v17)
    {
LABEL_8:
      Directory = (_QWORD *)operator new();
      *Directory = &off_1E81A0D28;
      Directory[1] = v17;
      Directory[2] = v19;
      v14 = *(_BYTE *)(a1 + 8) | 1;
      goto LABEL_9;
    }
  }
  else
  {
    free(*(void **)__src);
    if ((_DWORD)v17)
      goto LABEL_8;
  }
LABEL_3:
  if (*(_DWORD *)&v32[40] == 4)
  {
    v35 = v37;
    v36 = xmmword_1C85F20B0;
    v34 = 261;
    v33[0] = a4;
    v33[1] = a5;
    *(_QWORD *)&v41.st_dev = &v41.st_rdev;
    *(_OWORD *)&v41.st_ino = xmmword_1C85F20B0;
    v20 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)v33, (uint64_t)&v41);
    bzero(__src, 0x400uLL);
    v21 = readlink(v20, __src, 0x400uLL);
    if ((_DWORD)v21 == -1)
    {
      v22 = *__error();
      v23 = std::generic_category();
      if ((_DWORD)v22)
      {
        v24 = v23;
        v25 = (_QWORD *)operator new();
        *v25 = &off_1E81A0D28;
        v25[1] = v22;
        v25[2] = v24;
      }
      else
      {
        v25 = 0;
      }
      goto LABEL_17;
    }
    v26 = 0;
    v27 = v21 << 32;
    v28 = (int)v21;
    *(_QWORD *)&v36 = 0;
    if (*((_QWORD *)&v36 + 1) < (unint64_t)(int)v21)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v35, v37, (int)v21, 1);
      v26 = v36;
      if (!v27)
        goto LABEL_16;
    }
    else if (!v27)
    {
LABEL_16:
      v25 = 0;
      *(_QWORD *)&v36 = v26 + v28;
LABEL_17:
      if (*(stat **)&v41.st_dev != (stat *)&v41.st_rdev)
        free(*(void **)&v41.st_dev);
      if (v25)
      {
        *(_BYTE *)(a1 + 8) |= 1u;
        *(_QWORD *)a1 = v25;
      }
      else
      {
        sub_1C5056EF0(a1, a2, a3, a4, a5, v35, v36);
      }
      if (v35 != v37)
        free(v35);
      return;
    }
    memcpy((char *)v35 + v26, __src, v28);
    v26 = v36;
    goto LABEL_16;
  }
  if (*(_DWORD *)&v32[40] == 3)
  {
    Directory = (_QWORD *)llvm::cas::FileSystemCache::makeDirectory(*(_QWORD *)(a2 + 232), a3, a4, a5, 0, 0);
    v14 = *(_BYTE *)(a1 + 8) & 0xFE;
LABEL_9:
    *(_BYTE *)(a1 + 8) = v14;
    *(_QWORD *)a1 = Directory;
    return;
  }
  v40[4] = 261;
  *(_QWORD *)__src = a4;
  *(_QWORD *)&v39 = a5;
  llvm::sys::fs::openNativeFile((unsigned __int8 *)__src, 2, 1, 0, 438, (uint64_t)&v41);
  if ((v41.st_ino & 1) != 0)
  {
    v30 = *(_QWORD *)&v41.st_dev;
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v30;
  }
  else
  {
    st_dev = (llvm::sys::Process *)v41.st_dev;
    v31[0] = *(_OWORD *)v32;
    v31[1] = *(_OWORD *)&v32[16];
    v31[2] = *(_OWORD *)&v32[32];
    v31[3] = *(_OWORD *)&v32[48];
    sub_1C505747C(a1, a2, a3, a4, a5, v41.st_dev, (uint64_t)v31);
    llvm::sys::Process::SafelyCloseFileDescriptor(st_dev);
  }
}

void *sub_1C5057398(void *result, uint64_t a2)
{
  _QWORD *v3;
  size_t v4;
  size_t v5;
  uint64_t v6;
  char *v7;
  const char *v8;
  _BYTE *v9;
  unint64_t v10;
  BOOL v11;

  v3 = result;
  v4 = *((_QWORD *)result + 6);
  v5 = v4 - 1;
  if (v4 == 1)
  {
    v9 = (_BYTE *)*((_QWORD *)result + 5);
    if (*v9 == 47)
    {
      v4 = 0;
      v8 = "";
      v5 = 1;
      v6 = 1;
      v7 = ".";
      goto LABEL_18;
    }
    v5 = 0;
    v7 = v9 + 1;
LABEL_9:
    v10 = -1;
    goto LABEL_10;
  }
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = (char *)*((_QWORD *)result + 5);
    v8 = "";
    goto LABEL_18;
  }
  v7 = (char *)(*((_QWORD *)result + 5) + 1);
  result = memchr(v7, 47, v5);
  if (!result)
    goto LABEL_9;
  v10 = (_BYTE *)result - v7;
LABEL_10:
  if (v5 >= v10)
    v6 = v10;
  else
    v6 = v5;
  v8 = &v7[v6];
  v11 = v10 == -1;
  if (v10 == -1)
    v4 = 0;
  else
    v4 = v5 - v6;
  if (v11)
    v8 = "";
LABEL_18:
  *v3 = a2;
  v3[1] = v7;
  v3[2] = v5;
  v3[3] = v7;
  v3[4] = v6;
  v3[5] = v8;
  v3[6] = v4;
  return result;
}

_QWORD *sub_1C505747C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _QWORD *result;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  _OWORD v26[4];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_OWORD *)(a7 + 16);
  v26[0] = *(_OWORD *)a7;
  v26[1] = v14;
  v15 = *(_OWORD *)(a7 + 48);
  v26[2] = *(_OWORD *)(a7 + 32);
  v26[3] = v15;
  v27 = 1;
  result = (*(_QWORD *(**)(_QWORD **__return_ptr, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v13 + 96))(&v24, v13, a6, v26);
  if ((v25 & 1) != 0)
  {
    v19 = v24;
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v19;
  }
  else
  {
    v17 = *(_QWORD *)(a2 + 16);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v17 + 48))(v26, v17, v24);
    result = *(_QWORD **)&v26[0];
    if ((BYTE8(v26[0]) & 1) != 0 && *(_QWORD *)&v26[0])
    {
      v18 = *(_BYTE *)(a1 + 8) | 1;
    }
    else
    {
      if ((BYTE8(v26[0]) & 1) != 0)
        v20 = 0;
      else
        v20 = *(_QWORD *)&v26[0];
      v21 = *(_QWORD *)(a2 + 232);
      v22 = (uint64_t)v24;
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v17 + 88))(v17, v20, 0);
      result = (_QWORD *)llvm::cas::FileSystemCache::makeFile(v21, a3, a4, a5, v22, v23, (*(_DWORD *)(a7 + 44) >> 6) & 1);
      v18 = *(_BYTE *)(a1 + 8) & 0xFE;
    }
    *(_BYTE *)(a1 + 8) = v18;
    *(_QWORD *)a1 = result;
    if ((v25 & 1) != 0)
    {
      result = v24;
      v24 = 0;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

_QWORD *sub_1C50575FC(_QWORD *result, _BYTE *__src, _BYTE *a3)
{
  _QWORD *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = result;
  v6 = a3 - __src;
  v7 = result[1];
  v8 = v7 + a3 - __src;
  if (result[2] < v8)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v8, 1);
    v7 = v5[1];
  }
  if (__src != a3)
  {
    result = memcpy((void *)(*v5 + v7), __src, v6);
    v7 = v5[1];
  }
  v5[1] = v7 + v6;
  return result;
}

_QWORD *sub_1C505767C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (_BYTE *)(v4 + 8);
      do
      {
        v14 = *((_QWORD *)v13 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = v14;
          *((_BYTE *)v15 + 8) = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1C50577B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E813FA80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_1C50577F4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E813FA80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1CAA32FC0);
}

double sub_1C5057840@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD v4[4];
  __int16 v5;

  v2 = *(_QWORD *)(a1 + 16);
  v5 = 260;
  v4[0] = a1 + 24;
  return llvm::cas::FileSystemCache::DirectoryEntry::getStatus(v2, (llvm::Twine *)v4, a2);
}

char *sub_1C5057878@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + 24) &= ~1u;
  if (result[47] < 0)
    return (char *)sub_1C47EBC30((_BYTE *)a2, *((void **)result + 3), *((_QWORD *)result + 4));
  *(_OWORD *)a2 = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 5);
  return result;
}

void sub_1C50578B0(uint64_t a1@<X0>, void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  void *v15;
  __int128 v16;
  _QWORD v17[33];

  v17[32] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 8);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(&v15, v5, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80));
  if ((v16 & 1) != 0 && v15)
  {
    v14 = v15;
    v6 = llvm::errorToErrorCode(&v14);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v7;
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
  else
  {
    if ((v16 & 1) != 0)
      v8 = 0;
    else
      v8 = v15;
    v15 = v17;
    v16 = xmmword_1C64638F0;
    if (*((_BYTE *)a2 + 33) == 1)
    {
      v9 = 0;
      v10 = 0;
      switch(*((_BYTE *)a2 + 32))
      {
        case 1:
          break;
        case 3:
          v10 = *a2;
          if (*a2)
            v9 = strlen((const char *)*a2);
          else
            v9 = 0;
          break;
        case 4:
          v13 = *((_BYTE *)*a2 + 23);
          if (v13 >= 0)
            v10 = *a2;
          else
            v10 = **a2;
          if (v13 >= 0)
            v9 = v13 & 0x7F;
          else
            v9 = (uint64_t)(*a2)[1];
          break;
        case 5:
          v10 = *a2;
          v9 = (uint64_t)a2[1];
          break;
        default:
          goto LABEL_13;
      }
    }
    else
    {
LABEL_13:
      llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v15);
      v10 = v15;
      v9 = v16;
    }
    v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v5 + 88))(v5, v8, 1);
    llvm::MemoryBuffer::getMemBuffer(v11, v12, (uint64_t)v10, v9, (char **)a3);
    *(_BYTE *)(a3 + 16) &= ~1u;
    if (v15 != v17)
      free(v15);
  }
}

__n128 sub_1C5057A7C@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v2;
  __n128 result;

  v2 = *(__n128 **)(a1 + 16);
  a2[1].n128_u8[0] &= ~1u;
  result = v2[5];
  *a2 = result;
  return result;
}

uint64_t sub_1C5057A98()
{
  std::system_category();
  return 0;
}

void sub_1C5057AB4(uint64_t a1)
{
  llvm::sys::fs::detail::directory_iterator_destruct(a1 + 24);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

BOOL sub_1C5057AF4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  size_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  const void **v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  char v21;
  _BOOL8 result;
  char v23;
  uint64_t v24;
  const void **v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char v41;
  const void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[28];
  int v47;

  v2 = *a1;
  v3 = *a2;
  if (*a1 == *a2)
    return 1;
  if (v3)
  {
    if (v2)
    {
      v4 = *(_BYTE *)(v2 + 31);
      v5 = *(_QWORD *)(v2 + 16);
      if (v4 >= 0)
        v6 = v4 & 0x7F;
      else
        v6 = *(_QWORD *)(v2 + 16);
      v7 = *(_BYTE *)(v3 + 31);
      v8 = v7;
      v9 = v7 & 0x7F;
      if (v8 < 0)
        v9 = *(_QWORD *)(v3 + 16);
      if (v6 == v9)
      {
        v10 = (const void **)(v2 + 8);
        v13 = *(unsigned __int8 **)(v3 + 8);
        v11 = (unsigned __int8 *)(v3 + 8);
        v12 = v13;
        if (v8 >= 0)
          v14 = v11;
        else
          v14 = v12;
        if ((v4 & 0x80) == 0)
        {
          if ((v4 & 0x7F) != 0)
          {
            v15 = (v4 & 0x7F) - 1;
            do
            {
              v17 = *(unsigned __int8 *)v10;
              v10 = (const void **)((char *)v10 + 1);
              v16 = v17;
              v19 = *v14++;
              v18 = v19;
              v20 = v15-- != 0;
              v21 = v20;
              result = v16 == v18;
            }
            while (v16 == v18 && (v21 & 1) != 0);
            return result;
          }
          return 1;
        }
        v42 = *v10;
        return memcmp(v42, v14, v5) == 0;
      }
      return 0;
    }
    v43 = 0u;
    v44 = 0u;
    DWORD2(v44) = 9;
    BYTE12(v44) = 1;
    v45 = 0u;
    memset(v46, 0, sizeof(v46));
    v47 = 0xFFFF;
    v33 = *(_BYTE *)(v3 + 31);
    v5 = *(_QWORD *)(v3 + 16);
    if (v33 >= 0)
      v34 = v33 & 0x7F;
    else
      v34 = *(_QWORD *)(v3 + 16);
    if (v34)
      return 0;
    v25 = (const void **)(v3 + 8);
    if ((v33 & 0x80) == 0)
    {
      if ((v33 & 0x7F) == 0)
        return 1;
      v35 = (v33 & 0x7F) - 1;
      v36 = (unsigned __int8 *)&v43;
      do
      {
        v38 = *(unsigned __int8 *)v25;
        v25 = (const void **)((char *)v25 + 1);
        v37 = v38;
        v40 = *v36++;
        v39 = v40;
        v20 = v35-- != 0;
        v41 = v20;
        result = v37 == v39;
      }
      while (v37 == v39 && (v41 & 1) != 0);
      return result;
    }
LABEL_51:
    v42 = *v25;
    v14 = (unsigned __int8 *)&v43;
    return memcmp(v42, v14, v5) == 0;
  }
  v43 = 0u;
  v44 = 0u;
  DWORD2(v44) = 9;
  BYTE12(v44) = 1;
  v45 = 0u;
  memset(v46, 0, sizeof(v46));
  v47 = 0xFFFF;
  v23 = *(_BYTE *)(v2 + 31);
  v5 = *(_QWORD *)(v2 + 16);
  if (v23 >= 0)
    v24 = v23 & 0x7F;
  else
    v24 = *(_QWORD *)(v2 + 16);
  if (v24)
    return 0;
  v25 = (const void **)(v2 + 8);
  if ((*(_BYTE *)(v2 + 31) & 0x80) != 0)
    goto LABEL_51;
  if ((v23 & 0x7F) == 0)
    return 1;
  v26 = (v23 & 0x7F) - 1;
  v27 = (unsigned __int8 *)&v43;
  do
  {
    v29 = *(unsigned __int8 *)v25;
    v25 = (const void **)((char *)v25 + 1);
    v28 = v29;
    v31 = *v27++;
    v30 = v31;
    v20 = v26-- != 0;
    v32 = v20;
    result = v28 == v30;
  }
  while (v28 == v30 && (v32 & 1) != 0);
  return result;
}

__int128 *sub_1C5057CC0(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;
  __int128 v6;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      v6 = *v4;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v4 + 2);
      *(_OWORD *)a3 = v6;
      a3 += 24;
      *((_BYTE *)v4 + 23) = 0;
      *(_BYTE *)v4 = 0;
      v4 = (__int128 *)((char *)v4 + 24);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_1C5057D30(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;

  sub_1C5056280(a5, *a1, a2, a3, 1, 1, 1, a4, 0, v5);
}

std::error_category *sub_1C5057D6C(std::error_category *result, __int128 *a2)
{
  std::error_category *v2;
  char v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::error_category_vtbl *v8;

  v2 = result;
  v3 = (char)result[10].__vftable;
  if ((a2[5] & 1) != 0)
  {
    LOBYTE(result[10].__vftable) = v3 | 1;
    if ((a2[5] & 1) != 0)
    {
      v8 = *(std::error_category_vtbl **)a2;
      result = (std::error_category *)*((_QWORD *)a2 + 1);
    }
    else
    {
      result = (std::error_category *)std::system_category();
      v8 = 0;
    }
    v2->__vftable = v8;
    v2[1].__vftable = (std::error_category_vtbl *)result;
  }
  else
  {
    LOBYTE(result[10].__vftable) = v3 & 0xFE;
    v4 = *a2;
    result[2].__vftable = (std::error_category_vtbl *)a2[1];
    *(_OWORD *)&result->__vftable = v4;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v5 = *(__int128 *)((char *)a2 + 24);
    v6 = *(__int128 *)((char *)a2 + 40);
    v7 = *(__int128 *)((char *)a2 + 56);
    LOWORD(result[9].__vftable) = *((_WORD *)a2 + 36);
    *(_OWORD *)&result[7].__vftable = v7;
    *(_OWORD *)&result[5].__vftable = v6;
    *(_OWORD *)&result[3].__vftable = v5;
  }
  return result;
}

void sub_1C5057DFC(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X7>, uint64_t (***a4)()@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (**v9)();
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  unsigned int i;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t *v27;
  uint64_t *v28;
  char v29;
  char *v30;
  char *v31;
  char v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[48];
  uint64_t (**v36)();
  uint64_t v37;
  void (*v38)(uint64_t *, uint64_t);
  char **v39;
  _QWORD v40[4];

  v40[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 440) = 0;
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v6 = 0;
    v7 = 0;
    switch(*((_BYTE *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        v7 = *a2;
        if (*a2)
          v6 = strlen(*a2);
        else
          v6 = 0;
        break;
      case 4:
        v29 = (*a2)[23];
        if (v29 >= 0)
          v7 = *a2;
        else
          v7 = *(char **)*a2;
        if (v29 >= 0)
          v6 = v29 & 0x7F;
        else
          v6 = *((_QWORD *)*a2 + 1);
        break;
      case 5:
        v7 = *a2;
        v6 = (uint64_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector((uint64_t)a2, a1 + 432);
    v7 = *(char **)(a1 + 432);
    v6 = *(_QWORD *)(a1 + 440);
  }
  v33 = v35;
  v34 = 0x600000000;
  v8 = *(_QWORD *)(a1 + 424);
  v31 = (char *)&v33;
  sub_1C5056280((uint64_t)&v36, v8, v7, v6, 0, 0, 1, a3, (uint64_t)sub_1C5058328, (uint64_t)&v31);
  v9 = v36;
  if ((v37 & 1) == 0)
  {
    sub_1C5058280(a1, (uint64_t)v36);
    if ((_DWORD)v34)
    {
      v10 = (uint64_t **)v33;
      v11 = 8 * v34;
      do
      {
        v12 = *v10;
        if (*((_DWORD *)*v10 + 10) == 2)
        {
          v31 = (char *)*v10;
          sub_1C61B7564((uint64_t)&v36, a1 + 648, (uint64_t *)&v31);
          if ((_BYTE)v38)
            sub_1C5058384(a1 + 8, v12);
        }
        else
        {
          v13 = (char *)*v12;
          v14 = v12[1];
          LOWORD(v40[0]) = 261;
          v36 = (uint64_t (**)())v13;
          v37 = v14;
          llvm::cas::HierarchicalTreeBuilder::pushImpl(a1 + 8, 0, 0, 3, (uint64_t)&v36);
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
    for (i = *(_DWORD *)(a1 + 592); i; i = *(_DWORD *)(a1 + 592))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 8 * i - 8);
      *(_DWORD *)(a1 + 592) = i - 1;
      if (*(_DWORD *)(v16 + 40) == 2)
      {
        v17 = *(_QWORD *)(a1 + 424);
        v18 = *(_BYTE **)v16;
        v19 = *(_QWORD *)(v16 + 8);
        v30 = (char *)a1;
        v36 = &off_1E813FA40;
        v37 = v17;
        v38 = sub_1C50583C8;
        v39 = &v30;
        v40[0] = 0;
        *(_DWORD *)((char *)v40 + 7) = 0;
        llvm::cas::FileSystemCache::lookupPath(*(_QWORD *)(v17 + 232), (uint64_t)&v36, v18, v19, *(_QWORD *)(v17 + 240), 1, (uint64_t)&v31);
        if ((v32 & 1) != 0)
        {
          v30 = v31;
          v31 = 0;
          sub_1C4D62BD4(&v30, (char **)&v36);
          if (v30)
            (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
        }
        else
        {
          sub_1C5058280(a1, (uint64_t)v31);
        }
        if ((v32 & 1) != 0)
        {
          v26 = v31;
          v31 = 0;
          if (v26)
            (*(void (**)(char *))(*(_QWORD *)v26 + 8))(v26);
        }
      }
      else
      {
        v20 = atomic_load((unint64_t *)(v16 + 72));
        v21 = *(_QWORD *)(v20 + 72);
        v22 = *(unsigned int *)(v20 + 88);
        v23 = (uint64_t *)(v21 + 8 * v22);
        if (*(_DWORD *)(v20 + 80))
        {
          if (*(_DWORD *)(v20 + 88))
          {
            v24 = 8 * v22;
            v25 = *(uint64_t **)(v20 + 72);
            while ((*v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              ++v25;
              v24 -= 8;
              if (!v24)
                goto LABEL_24;
            }
          }
          else
          {
            v25 = *(uint64_t **)(v20 + 72);
          }
        }
        else
        {
LABEL_24:
          v25 = (uint64_t *)(v21 + 8 * v22);
        }
        v27 = (uint64_t *)(v21 + 8 * v22);
LABEL_34:
        while (v25 != v27)
        {
          v28 = v25 + 1;
          sub_1C5058280(a1, *v25);
          v25 = v23;
          if (v28 != v23)
          {
            v25 = v28;
            while ((*v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              if (++v25 == v23)
              {
                v25 = v23;
                goto LABEL_34;
              }
            }
          }
        }
      }
    }
    v9 = 0;
  }
  *a4 = v9;
  if (v33 != v35)
    free(v33);
}

void sub_1C505818C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  llvm::cas::HierarchicalTreeBuilder::create((llvm::cas::HierarchicalTreeBuilder *)(a1 + 8), *(llvm::cas::ObjectStore **)(*(_QWORD *)(a1 + 424) + 16), a2);
}

uint64_t sub_1C50581A0(uint64_t a1)
{
  void *v2;
  void *v3;

  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 648), 8);
  v2 = *(void **)(a1 + 584);
  if (v2 != (void *)(a1 + 600))
    free(v2);
  v3 = *(void **)(a1 + 432);
  if (v3 != (void *)(a1 + 456))
    free(v3);
  sub_1C4FCE9E8((char **)(a1 + 408));
  sub_1C4FCE9E8((char **)(a1 + 8));
  return a1;
}

void sub_1C5058208(uint64_t a1)
{
  void *v2;
  void *v3;

  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 648), 8);
  v2 = *(void **)(a1 + 584);
  if (v2 != (void *)(a1 + 600))
    free(v2);
  v3 = *(void **)(a1 + 432);
  if (v3 != (void *)(a1 + 456))
    free(v3);
  sub_1C4FCE9E8((char **)(a1 + 408));
  sub_1C4FCE9E8((char **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5058280(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];

  v5 = a2;
  sub_1C61B7564((uint64_t)v6, a1 + 648, &v5);
  if (v6[16])
  {
    if (*(_DWORD *)(a2 + 40) > 2u || (sub_1C5058384(a1 + 8, (uint64_t *)a2), *(_DWORD *)(a2 + 40) >= 2u))
    {
      v4 = *(unsigned int *)(a1 + 592);
      if (v4 >= *(_DWORD *)(a1 + 596))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 584, a1 + 600, v4 + 1, 8);
        LODWORD(v4) = *(_DWORD *)(a1 + 592);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 584) + 8 * v4) = a2;
      ++*(_DWORD *)(a1 + 592);
    }
  }
}

uint64_t *sub_1C5058328(uint64_t *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  v4 = *(unsigned int *)(*result + 8);
  if (v4 >= *(_DWORD *)(*result + 12))
  {
    result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod(*result, v3 + 16, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

void sub_1C5058384(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;

  v3 = *((_DWORD *)a2 + 10);
  v4 = a2[10];
  v6 = *a2;
  v5 = a2[1];
  v8 = 261;
  v7[0] = v6;
  v7[1] = v5;
  llvm::cas::HierarchicalTreeBuilder::pushImpl(a1, v4, 1, v3, (uint64_t)v7);
}

void sub_1C50583C8(uint64_t *a1, uint64_t a2)
{
  sub_1C5058280(*a1, a2);
}

uint64_t llvm::cas::FileSystemCache::FileSystemCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t *v13;
  unsigned __int8 v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int8 v20;
  unsigned __int8 v21;
  _QWORD v22[2];
  __int128 v23;
  uint64_t v24;
  int v25;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_QWORD *)(a1 + 136) = 0x400000000;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 192;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 248;
  *(_QWORD *)(a1 + 240) = 0x400000000;
  *(_QWORD *)(a1 + 296) = 0;
  v7 = a1 + 296;
  *(_BYTE *)(a1 + 312) = 0;
  v8 = (unsigned __int8 *)(a1 + 312);
  v6 = a1 + 216;
  *(_QWORD *)(a1 + 320) = 0;
  v9 = a1 + 320;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 64) = v7;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = v6 + 136;
  *(_QWORD *)(v6 + 128) = 0x400000000;
  *(_QWORD *)(v6 + 184) = 0;
  *(_BYTE *)(v6 + 200) = 0;
  v10 = (unsigned __int8 *)(v6 + 200);
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 168) = v6 + 184;
  *(_QWORD *)(v6 + 176) = 0;
  *(_QWORD *)(v6 + 208) = 0;
  *(_QWORD *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 224) = v6 + 240;
  *(_QWORD *)(v6 + 232) = 0x400000000;
  *(_BYTE *)(v6 + 304) = 0;
  *(_QWORD *)(v6 + 272) = v6 + 288;
  *(_QWORD *)(v6 + 280) = 0;
  *(_QWORD *)(v6 + 288) = 0;
  *(_QWORD *)(v6 + 296) = 0;
  *(_QWORD *)(v6 + 344) = 0;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  do
    v11 = __ldaxr(v10);
  while (__stxr(1u, v10));
  if ((v11 & 1) != 0)
  {
    do
      v20 = __ldaxr(v10);
    while (__stxr(1u, v10) | v20 & 1);
  }
  v12 = sub_1C484358C(v9, 96, 3);
  atomic_store(0, v10);
  *(_QWORD *)v12 = "/";
  *(_QWORD *)(v12 + 8) = 1;
  v23 = 0uLL;
  v22[0] = "/";
  v22[1] = 1;
  v24 = 1;
  v25 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v22);
  *(_OWORD *)(v12 + 16) = v23;
  *(_QWORD *)(v12 + 32) = 0;
  *(_DWORD *)(v12 + 40) = 3;
  *(_BYTE *)(v12 + 48) = 0;
  *(_BYTE *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  v13 = (unint64_t *)(v12 + 72);
  *(_QWORD *)(v12 + 80) = a2;
  *(_QWORD *)(v12 + 88) = a3;
  *(_QWORD *)(v6 + 312) = v12;
  do
    v14 = __ldaxr(v8);
  while (__stxr(1u, v8));
  if ((v14 & 1) != 0)
  {
    do
      v21 = __ldaxr(v8);
    while (__stxr(1u, v8) | v21 & 1);
  }
  v15 = sub_1C484358C(v6, 112, 3);
  atomic_store(0, v8);
  *(_QWORD *)v15 = 850045863;
  *(_OWORD *)(v15 + 8) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 50) = 0u;
  *(_QWORD *)(v15 + 68) = 0;
  *(_QWORD *)(v15 + 84) = 0;
  *(_QWORD *)(v15 + 76) = 0;
  do
  {
    v16 = __ldaxr((unsigned int *)&unk_1EF8F7330);
    v17 = v16 + 1;
  }
  while (__stlxr(v17, (unsigned int *)&unk_1EF8F7330));
  *(_QWORD *)(v15 + 96) = -1;
  *(_QWORD *)(v15 + 104) = v17;
  while (!__ldaxr(v13))
  {
    if (!__stlxr(v15, v13))
      return a1;
  }
  __clrex();
  return a1;
}

char *llvm::cas::FileSystemCache::canonicalizeWorkingDirectory(uint64_t a1, char *a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  _QWORD v18[17];

  v18[16] = *MEMORY[0x1E0C80C00];
  llvm::Twine::toVector(a1, (uint64_t)a4);
  if (!a4[1])
    return a2;
  if (*(_BYTE *)*a4 != 47)
  {
    v16 = v18;
    v17 = xmmword_1C85F20B0;
    if (a3 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v16, v18, a3, 1);
      v14 = v17;
    }
    else
    {
      v14 = 0;
      if (!a3)
      {
LABEL_20:
        v15 = v14 + a3;
        *(_QWORD *)&v17 = v15;
        if ((unint64_t)(v15 + 1) > *((_QWORD *)&v17 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v16, v18, v15 + 1, 1);
          v15 = v17;
        }
        *((_BYTE *)v16 + v15) = 47;
        *(_QWORD *)&v17 = v17 + 1;
        sub_1C61D49FC(a4, *a4, (char *)v16, (char *)v16 + v17);
        if (v16 != v18)
          free(v16);
        goto LABEL_3;
      }
    }
    memcpy((char *)v16 + v14, a2, a3);
    v14 = v17;
    goto LABEL_20;
  }
LABEL_3:
  llvm::sys::path::remove_dots((unsigned __int8 **)a4, 1, 1u);
  v7 = a4[1];
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(unsigned __int8 *)(*a4 + v8);
      if (v9 && v11 == 47)
      {
        v9 = 1;
      }
      else
      {
        *(_BYTE *)(*a4 + v10++) = v11;
        v9 = v11 == 47;
      }
      ++v8;
    }
    while (v7 != v8);
    v7 = a4[1];
  }
  else
  {
    v10 = 0;
  }
  v12 = v10;
  if (v7 != v10)
  {
    if (v7 <= v10)
    {
      if (a4[2] < (unint64_t)v10)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a4, a4 + 3, v10, 1);
        v7 = a4[1];
      }
      if (v12 != v7)
        bzero((void *)(*a4 + v7), v12 - v7);
    }
    a4[1] = v12;
  }
  a2 = (char *)*a4;
  if (v12 > 1 && a2[v12 - 1] == 47)
    a4[1] = v12 - 1;
  return a2;
}

unint64_t sub_1C5058880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, size_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  size_t v11;
  char *v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  unint64_t v22;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unint64_t v26;
  _QWORD v27[2];
  __int128 v28;
  size_t v29;
  int v30;

  v11 = a6;
  if (a6)
  {
    if (a6 == 1 && *a5 == 47)
    {
      v17 = "/";
      v11 = 1;
    }
    else
    {
      v18 = (unsigned __int8 *)(a1 + 96);
      do
        v19 = __ldaxr(v18);
      while (__stxr(1u, v18));
      if ((v19 & 1) != 0)
      {
        do
          v25 = __ldaxr(v18);
        while (__stxr(1u, v18) | v25 & 1);
      }
      v17 = (char *)sub_1C484358C(a1, a6 + 1, 0);
      atomic_store(0, (unsigned __int8 *)(a1 + 96));
      memmove(v17, a5, v11);
      v17[v11] = 0;
      v11 = strlen(v17);
    }
  }
  else
  {
    v17 = "";
  }
  v20 = (unsigned __int8 *)(a2 + 96);
  do
    v21 = __ldaxr(v20);
  while (__stxr(1u, v20));
  if ((v21 & 1) != 0)
  {
    do
      v24 = __ldaxr(v20);
    while (__stxr(1u, v20) | v24 & 1);
  }
  v22 = sub_1C484358C(a2, 96, 3);
  atomic_store(0, (unsigned __int8 *)(a2 + 96));
  *(_QWORD *)v22 = v17;
  *(_QWORD *)(v22 + 8) = v11;
  v28 = 0uLL;
  v27[0] = v17;
  v27[1] = v11;
  v29 = v11;
  v30 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v27);
  *(_OWORD *)(v22 + 16) = v28;
  *(_QWORD *)(v22 + 32) = a3;
  *(_DWORD *)(v22 + 40) = a7;
  *(_BYTE *)(v22 + 48) = 0;
  *(_BYTE *)(v22 + 64) = 0;
  *(_QWORD *)(v22 + 72) = 0;
  *(_QWORD *)(v22 + 80) = a9;
  *(_QWORD *)(v22 + 88) = a10;
  v26 = v22;
  sub_1C61D3F30(a4 + 72, &v26, (uint64_t)v27);
  return v22;
}

unint64_t llvm::cas::FileSystemCache::makeDirectory(uint64_t a1, uint64_t a2, _BYTE *a3, size_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t DirectoryAlreadyLocked;
  _QWORD v18[2];
  const void *v19;
  const void *v20;
  size_t v21;
  int v22;

  v12 = atomic_load((unint64_t *)(a2 + 72));
  atomic_store(1u, (unsigned __int8 *)(v12 + 65));
  std::mutex::lock((std::mutex *)v12);
  do
    v13 = atomic_load((unsigned int *)(v12 + 68));
  while (v13 > 0);
  v19 = 0;
  v20 = 0;
  v18[0] = a3;
  v18[1] = a4;
  v21 = a4;
  v22 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v18);
  DirectoryAlreadyLocked = sub_1C5052A6C(v12, v19, v20);
  if (!DirectoryAlreadyLocked)
    DirectoryAlreadyLocked = llvm::cas::FileSystemCache::makeDirectoryAlreadyLocked(a1, a2, a3, a4, a5, a6, v14, v15);
  std::mutex::unlock((std::mutex *)v12);
  return DirectoryAlreadyLocked;
}

unint64_t llvm::cas::FileSystemCache::makeSymlink(uint64_t a1, uint64_t a2, _BYTE *a3, size_t a4, uint64_t a5, const void *a6, size_t a7)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 v20;
  unint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t *v28;
  unsigned __int8 v31;
  _QWORD v32[2];
  const void *v33;
  const void *v34;
  size_t v35;
  int v36;

  v14 = atomic_load((unint64_t *)(a2 + 72));
  atomic_store(1u, (unsigned __int8 *)(v14 + 65));
  std::mutex::lock((std::mutex *)v14);
  do
    v15 = atomic_load((unsigned int *)(v14 + 68));
  while (v15 > 0);
  v33 = 0;
  v34 = 0;
  v32[0] = a3;
  v32[1] = a4;
  v35 = a4;
  v36 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v32);
  v17 = sub_1C5052A6C(v14, v33, v34);
  if (v17)
    goto LABEL_22;
  v18 = atomic_load((unint64_t *)(a2 + 72));
  v17 = sub_1C5058880(a1 + 424, a1 + 320, a2, v18, a3, a4, 2, v16, a5, 1);
  v19 = (unsigned __int8 *)(a1 + 208);
  do
    v20 = __ldaxr(v19);
  while (__stxr(1u, v19));
  if ((v20 & 1) != 0)
  {
    do
      v31 = __ldaxr(v19);
    while (__stxr(1u, v19) | v31 & 1);
  }
  v21 = sub_1C484358C(a1 + 112, 40, 3);
  atomic_store(0, v19);
  if (a7 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v22 = (_QWORD *)v21;
  if (a7 >= 0x17)
  {
    v24 = (a7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a7 | 7) != 0x17)
      v24 = a7 | 7;
    v25 = v24 + 1;
    v23 = operator new(v24 + 1);
    v22[1] = a7;
    v22[2] = v25 | 0x8000000000000000;
    *v22 = v23;
  }
  else
  {
    *(_BYTE *)(v21 + 23) = a7;
    v23 = (void *)v21;
    if (!a7)
      goto LABEL_15;
  }
  memmove(v23, a6, a7);
LABEL_15:
  *((_BYTE *)v23 + a7) = 0;
  do
  {
    v26 = __ldaxr((unsigned int *)&unk_1EF8F7330);
    v27 = v26 + 1;
  }
  while (__stlxr(v27, (unsigned int *)&unk_1EF8F7330));
  v22[3] = -1;
  v22[4] = v27;
  v28 = (unint64_t *)(v17 + 72);
  while (!__ldaxr(v28))
  {
    if (!__stlxr((unint64_t)v22, v28))
      goto LABEL_22;
  }
  __clrex();
LABEL_22:
  std::mutex::unlock((std::mutex *)v14);
  return v17;
}

unint64_t llvm::cas::FileSystemCache::makeFile(uint64_t a1, uint64_t a2, _BYTE *a3, size_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t *v25;
  unsigned __int8 v28;
  _QWORD v29[2];
  const void *v30;
  const void *v31;
  size_t v32;
  int v33;

  v14 = atomic_load((unint64_t *)(a2 + 72));
  atomic_store(1u, (unsigned __int8 *)(v14 + 65));
  std::mutex::lock((std::mutex *)v14);
  do
    v15 = atomic_load((unsigned int *)(v14 + 68));
  while (v15 > 0);
  v30 = 0;
  v31 = 0;
  v29[0] = a3;
  v29[1] = a4;
  v32 = a4;
  v33 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v29);
  v17 = sub_1C5052A6C(v14, v30, v31);
  if (!v17)
  {
    v18 = atomic_load((unint64_t *)(a2 + 72));
    v17 = sub_1C5058880(a1 + 424, a1 + 320, a2, v18, a3, a4, a7, v16, a5, 1);
    v19 = a1 + 8;
    v20 = (unsigned __int8 *)(a1 + 104);
    do
      v21 = __ldaxr(v20);
    while (__stxr(1u, v20));
    if ((v21 & 1) != 0)
    {
      do
        v28 = __ldaxr(v20);
      while (__stxr(1u, v20) | v28 & 1);
    }
    v22 = (_QWORD *)sub_1C484358C(v19, 24, 3);
    atomic_store(0, v20);
    *v22 = a6;
    do
    {
      v23 = __ldaxr((unsigned int *)&unk_1EF8F7330);
      v24 = v23 + 1;
    }
    while (__stlxr(v24, (unsigned int *)&unk_1EF8F7330));
    v22[1] = -1;
    v22[2] = v24;
    v25 = (unint64_t *)(v17 + 72);
    while (!__ldaxr(v25))
    {
      if (!__stlxr((unint64_t)v22, v25))
        goto LABEL_14;
    }
    __clrex();
  }
LABEL_14:
  std::mutex::unlock((std::mutex *)v14);
  return v17;
}

uint64_t llvm::cas::FileSystemCache::DirectoryEntry::getFileType(llvm::cas::FileSystemCache::DirectoryEntry *this)
{
  if (*((_DWORD *)this + 10) == 3)
    return 3;
  else
    return 2;
}

double llvm::cas::FileSystemCache::DirectoryEntry::getStatus@<D0>(uint64_t a1@<X0>, llvm::Twine *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  const std::error_category *v5;
  double result;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 < 2)
  {
    v7 = atomic_load((unint64_t *)(a1 + 72));
    v8 = *(_QWORD *)v7;
    v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 1)
      v9 = 493;
    else
      v9 = 420;
    v12 = *(_OWORD *)(v7 + 8);
  }
  else if (v4 == 3)
  {
    v8 = 0;
    v10 = atomic_load((unint64_t *)(a1 + 72));
    v12 = *(_OWORD *)(v10 + 96);
    v4 = *(_DWORD *)(a1 + 40);
    v9 = 493;
  }
  else
  {
    if (v4 == 2)
    {
      *(_BYTE *)(a3 + 80) |= 1u;
      v5 = std::generic_category();
      *(_QWORD *)a3 = 2;
      *(_QWORD *)(a3 + 8) = v5;
      return result;
    }
    v9 = 0;
    v8 = 0;
  }
  if (v4 == 3)
    v11 = 3;
  else
    v11 = 2;
  llvm::Twine::str(a2, &v13);
  v15 = v12;
  v16 = 0uLL;
  *(_QWORD *)&v17 = v8;
  *((_QWORD *)&v17 + 1) = __PAIR64__(v9, v11);
  *(_BYTE *)(a3 + 80) &= ~1u;
  *(_OWORD *)a3 = v13;
  *(_QWORD *)(a3 + 16) = v14;
  *(_WORD *)(a3 + 72) = 0;
  *(_OWORD *)(a3 + 56) = v17;
  *(_OWORD *)(a3 + 40) = v16;
  result = *(double *)&v15;
  *(_OWORD *)(a3 + 24) = v15;
  return result;
}

void llvm::cas::FileSystemCache::lookupPath(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  unsigned int v10;
  char *v11;
  _BYTE *v12;
  size_t v13;
  int v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  size_t v19;
  BOOL v20;
  size_t v21;
  const char *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  char *v27;
  unint64_t *v28;
  char *v29;
  __int128 v30;
  int v31;
  unint64_t v33;
  unint64_t v34;
  char v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  char *v40;
  unint64_t *v41;
  char *v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int64_t v47;
  int64_t v48;
  unint64_t *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  __int16 v60;
  uint64_t v61;
  __n128 v62;
  size_t v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  __n128 v67;
  uint64_t v68;
  char v69;
  unint64_t *v70;
  uint64_t v71;
  _QWORD v72[2];
  int v73;
  uint64_t v74;
  std::error_code v75;
  std::error_code v76;

  v74 = *MEMORY[0x1E0C80C00];
  v70 = v72;
  v71 = 0x200000000;
  if (!a4)
  {
LABEL_72:
    *(_BYTE *)(a7 + 8) &= ~1u;
    *(_QWORD *)a7 = a5;
    goto LABEL_73;
  }
  if (*a3 == 47)
  {
    a5 = *(_QWORD *)(a1 + 528);
    if (!--a4)
      goto LABEL_72;
    ++a3;
  }
  v10 = 1;
  v50 = a3;
  v51 = a4;
  v72[0] = a3;
  v72[1] = a4;
  v73 = 0;
  LODWORD(v71) = 1;
  v49 = (unint64_t *)(a1 + 528);
  while (1)
  {
    v11 = (char *)&v70[3 * v10];
    v12 = (_BYTE *)*((_QWORD *)v11 - 3);
    v13 = *((_QWORD *)v11 - 2);
    v14 = *((_DWORD *)v11 - 2);
    LODWORD(v71) = v10 - 1;
    v62.n128_u64[0] = a5;
    v62.n128_u64[1] = (unint64_t)v12;
    v63 = v13;
    v64 = 0u;
    v65 = 0u;
    if (v13 && (v15 = memchr(v12, 47, v13)) != 0)
      v16 = v15 - v12;
    else
      v16 = -1;
    if (v13 >= v16)
      v17 = v16;
    else
      v17 = v13;
    *(_QWORD *)&v64 = v12;
    *((_QWORD *)&v64 + 1) = v17;
    v18 = &v12[v17];
    v19 = v13 - v17;
    v20 = v16 == -1;
    if (v16 == -1)
      v21 = 0;
    else
      v21 = v19;
    if (v20)
      v22 = "";
    else
      v22 = v18;
    *(_QWORD *)&v65 = v22;
    *((_QWORD *)&v65 + 1) = v21;
    llvm::cas::FileSystemCache::lookupRealPathPrefixFrom(a2, &v62, &v67);
    if ((v69 & 1) != 0)
    {
      v60 = 261;
      v57 = (unint64_t)v50;
      v58 = v51;
      v66 = v67.n128_u64[0];
      v67.n128_u64[0] = 0;
      sub_1C61D4644((llvm::Twine *)&v57, 0, 0, (uint64_t *)&v66, &v61);
      if (v66)
        (*(void (**)(unint64_t))(*(_QWORD *)v66 + 8))(v66);
      *(_BYTE *)(a7 + 8) |= 1u;
      *(_QWORD *)a7 = v61;
      v61 = 0;
      goto LABEL_51;
    }
    a5 = v67.n128_u64[0];
    v23 = v68;
    if (*(_DWORD *)(v67.n128_u64[0] + 40) != 2)
    {
      if (!v68)
      {
        v31 = 2;
        goto LABEL_52;
      }
      v60 = 261;
      v57 = (unint64_t)v50;
      v58 = v51;
      *(_QWORD *)&v75.__val_ = std::generic_category();
      sub_1C61D45C4((llvm *)2, v75, (llvm::Twine *)&v57, &v56);
      *(_BYTE *)(a7 + 8) |= 1u;
      *(_QWORD *)a7 = v56;
      v56 = 0;
LABEL_51:
      v31 = 1;
      goto LABEL_52;
    }
    v24 = v67.n128_u64[1];
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 40))(a2, v67.n128_u64[0]);
    v25 = v14 + 1;
    v26 = v71;
    if (v23)
    {
      v57 = v24;
      v58 = v23;
      v59 = v14 + 1;
      v27 = (char *)v70;
      if (v71 >= HIDWORD(v71))
      {
        v45 = v71 + 1;
        if (v70 <= &v57 && &v70[3 * v71] > &v57)
        {
          v47 = (char *)&v57 - (char *)v70;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)v72, v45, 24);
          v27 = (char *)v70;
          v28 = (unint64_t *)((char *)v70 + v47);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)v72, v45, 24);
          v28 = &v57;
          v27 = (char *)v70;
        }
      }
      else
      {
        v28 = &v57;
      }
      v29 = &v27[24 * v71];
      v30 = *(_OWORD *)v28;
      *((_QWORD *)v29 + 2) = v28[2];
      *(_OWORD *)v29 = v30;
      v26 = v71 + 1;
      LODWORD(v71) = v71 + 1;
    }
    if (!v26 && !a6)
    {
      v31 = 3;
      goto LABEL_52;
    }
    if (v25 >= 0x11)
    {
      v60 = 261;
      v57 = (unint64_t)v50;
      v58 = v51;
      *(_QWORD *)&v76.__val_ = std::generic_category();
      sub_1C61D45C4((llvm *)0x3E, v76, (llvm::Twine *)&v57, &v55);
      *(_BYTE *)(a7 + 8) |= 1u;
      *(_QWORD *)a7 = v55;
      v55 = 0;
      goto LABEL_51;
    }
    if (!atomic_load((unint64_t *)(a5 + 72)))
    {
      (*(void (**)(unint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a2 + 24))(&v54, a2, a5);
      v33 = v54;
      if (v54)
      {
        v60 = 261;
        v57 = (unint64_t)v50;
        v58 = v51;
        v54 = 0;
        v66 = v33;
        sub_1C61D4644((llvm::Twine *)&v57, 0, 0, (uint64_t *)&v66, &v53);
        if (v66)
          (*(void (**)(unint64_t))(*(_QWORD *)v66 + 8))(v66);
        *(_BYTE *)(a7 + 8) |= 1u;
        v44 = v54;
        *(_QWORD *)a7 = v53;
        v53 = 0;
        if (v44)
          (*(void (**)(unint64_t))(*(_QWORD *)v44 + 8))(v44);
        goto LABEL_51;
      }
    }
    v34 = atomic_load((unint64_t *)(a5 + 72));
    v35 = *(_BYTE *)(v34 + 23);
    v36 = v35 < 0;
    v37 = *(_QWORD *)(v34 + 8);
    if (v35 < 0)
      v34 = *(_QWORD *)v34;
    v38 = v35 & 0x7F;
    if (v36)
      v38 = v37;
    if (v38 && *(_BYTE *)v34 == 47)
    {
      ++v34;
      --v38;
      v39 = v49;
    }
    else
    {
      v39 = (unint64_t *)(a5 + 32);
    }
    a5 = *v39;
    if (v38)
    {
      v57 = v34;
      v58 = v38;
      v59 = v25;
      v40 = (char *)v70;
      if (v71 >= HIDWORD(v71))
      {
        v46 = v71 + 1;
        if (v70 <= &v57 && &v70[3 * v71] > &v57)
        {
          v48 = (char *)&v57 - (char *)v70;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)v72, v46, 24);
          v40 = (char *)v70;
          v41 = (unint64_t *)((char *)v70 + v48);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)v72, v46, 24);
          v41 = &v57;
          v40 = (char *)v70;
        }
      }
      else
      {
        v41 = &v57;
      }
      v31 = 0;
      v42 = &v40[24 * v71];
      v43 = *(_OWORD *)v41;
      *((_QWORD *)v42 + 2) = v41[2];
      *(_OWORD *)v42 = v43;
      LODWORD(v71) = v71 + 1;
    }
    else
    {
      v31 = 0;
    }
LABEL_52:
    if ((v69 & 1) != 0 && v67.n128_u64[0])
      (*(void (**)(unint64_t))(*(_QWORD *)v67.n128_u64[0] + 8))(v67.n128_u64[0]);
    if (v31 && v31 != 2)
      break;
    v10 = v71;
    if (!(_DWORD)v71)
      goto LABEL_72;
  }
  if (v31 == 3)
    goto LABEL_72;
LABEL_73:
  if (v70 != v72)
    free(v70);
}

void llvm::cas::FileSystemCache::lookupRealPathPrefixFrom(uint64_t a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  char v6;
  __n128 v7;
  __n128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 v13;
  uint64_t v14;
  __n128 v15[3];
  unint64_t v16;
  __n128 v17[3];
  unint64_t v18;
  uint64_t v19;

  v6 = 0;
  v19 = *MEMORY[0x1E0C80C00];
  while (1)
  {
    v7 = a2[1];
    v15[0] = *a2;
    v15[1] = v7;
    v15[2] = a2[2];
    v16 = a2[3].n128_u64[0];
    v14 = a1;
    llvm::cas::FileSystemCache::lookupRealPathPrefixFromCached(v15, (void (*)(uint64_t))sub_1C5059FAC, (uint64_t)&v14, v17);
    v8 = v17[1];
    *a2 = v17[0];
    a2[1] = v8;
    a2[2] = v17[2];
    a2[3].n128_u64[0] = v18;
    if (!a2[1].n128_u64[0]
      || *(_DWORD *)(a2->n128_u64[0] + 40) != 3
      || (v9 = atomic_load((unint64_t *)(a2->n128_u64[0] + 72)),
          LOBYTE(v9) = atomic_load((unsigned __int8 *)(v9 + 64)),
          (v9 & 1) != 0))
    {
LABEL_13:
      a3[3].n128_u8[8] &= ~1u;
      v13 = a2[1];
      *a3 = *a2;
      a3[1] = v13;
      a3[2] = a2[2];
      a3[3].n128_u64[0] = a2[3].n128_u64[0];
      return;
    }
    if ((v6 & 1) == 0)
      break;
    (*(void (**)(__n128 *__return_ptr, uint64_t, unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1 + 16))(v17, a1, a2->n128_u64[0], a2[1].n128_u64[1], a2[2].n128_u64[0]);
    v10 = v17[0].n128_u64[0];
    if ((v17[0].n128_u8[8] & 1) != 0)
    {
      a3[3].n128_u8[8] |= 1u;
      a3->n128_u64[0] = v10;
      return;
    }
    if (!v17[0].n128_u64[0])
      goto LABEL_13;
    sub_1C5057398(a2, v17[0].n128_i64[0]);
    if ((v17[0].n128_u8[8] & 1) != 0)
    {
      v11 = v17[0].n128_u64[0];
      v17[0].n128_u64[0] = 0;
      if (v11)
        (*(void (**)(unint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
LABEL_12:
    v6 = 1;
  }
  (*(void (**)(__n128 *__return_ptr, uint64_t, unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1 + 32))(v17, a1, a2->n128_u64[0], a2->n128_u64[1], a2[1].n128_u64[0]);
  v12 = v17[0].n128_u64[0];
  if (!v17[0].n128_u64[0])
    goto LABEL_12;
  a3[3].n128_u8[8] |= 1u;
  a3->n128_u64[0] = v12;
}

__n128 llvm::cas::FileSystemCache::lookupRealPathPrefixFromCached@<Q0>(__n128 *a1@<X1>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, __n128 *a4@<X8>)
{
  uint64_t v8;
  const void *v9;
  _WORD *v10;
  uint64_t v11;
  std::mutex *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  __n128 v16;
  __n128 result;
  unsigned int *v18;

  while (a1[1].n128_u64[0])
  {
    v8 = a1->n128_u64[0];
    if (*(_DWORD *)(a1->n128_u64[0] + 40) != 3)
      break;
    v9 = (const void *)a1[2].n128_u64[0];
    if (v9)
    {
      v10 = (_WORD *)a1[1].n128_u64[1];
      if (v9 == (const void *)2)
      {
        if (*v10 == 11822)
        {
          if (a2)
          {
            a2(a3);
            v8 = a1->n128_u64[0];
          }
          v11 = *(_QWORD *)(v8 + 32);
          if (v11)
          {
            a1->n128_u64[0] = v11;
            v8 = v11;
          }
          goto LABEL_13;
        }
      }
      else if (v9 == (const void *)1 && *(_BYTE *)v10 == 46)
      {
        goto LABEL_13;
      }
      v12 = (std::mutex *)atomic_load((unint64_t *)(v8 + 72));
      sub_1C61D496C(&v18, v12);
      v13 = sub_1C5052A6C((uint64_t)v12, v10, v9);
      v8 = v13;
      v14 = v18;
      if (v18)
      {
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
      }
      if (!v13)
        break;
    }
LABEL_13:
    sub_1C5057398(a1, v8);
  }
  v16 = a1[1];
  *a4 = *a1;
  a4[1] = v16;
  result = a1[2];
  a4[2] = result;
  a4[3].n128_u64[0] = a1[3].n128_u64[0];
  return result;
}

uint64_t llvm::cas::FileSystemCache::lookupNameFromCached(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  std::mutex *v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v6 = (std::mutex *)atomic_load((unint64_t *)(a2 + 72));
  sub_1C61D496C(&v10, v6);
  result = sub_1C5052A6C((uint64_t)v6, a3, a4);
  v8 = v10;
  if (v10)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
  }
  return result;
}

void llvm::cas::FileSystemCache::getCachedVFSDirIter(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, unint64_t a4@<X4>, unsigned int *a5@<X5>, size_t a6@<X6>, _QWORD *a7@<X8>)
{
  size_t v7;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t last_not_of;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  void **v37;
  __int16 v38;
  _QWORD *v39;
  __int16 v40;
  _QWORD *v41;
  __int16 v42;
  _OWORD v43[2];
  __int16 v44;
  void *v45;
  uint64_t v46;
  unsigned int *v47;
  size_t v48;
  unsigned int *v49;
  __int128 v50;
  _QWORD v51[17];

  v7 = a6;
  v51[16] = *MEMORY[0x1E0C80C00];
  v47 = a5;
  v48 = a6;
  v45 = &v47;
  v46 = 0;
  sub_1C61D496C(&v49, (std::mutex *)a1);
  sub_1C6154790((uint64_t)&v45, *(unsigned int *)(a1 + 80));
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(unsigned int *)(a1 + 88);
  v15 = (_QWORD *)(v13 + 8 * v14);
  if (*(_DWORD *)(a1 + 80))
  {
    if ((_DWORD)v14)
    {
      v17 = 8 * v14;
      v16 = *(_QWORD **)(a1 + 72);
      while ((*v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v16;
        v17 -= 8;
        if (!v17)
          goto LABEL_7;
      }
    }
    else
    {
      v16 = *(_QWORD **)(a1 + 72);
    }
  }
  else
  {
LABEL_7:
    v16 = (_QWORD *)(v13 + 8 * v14);
  }
  v18 = (_QWORD *)(v13 + 8 * v14);
  if (v16 != v18)
  {
    v19 = v45;
    do
    {
      v20 = v16 + 1;
      *v19 = *v16;
      v16 = v15;
      if (v20 != v15)
      {
        v16 = v20;
        while ((*v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v16 == v15)
          {
            v16 = v15;
            break;
          }
        }
      }
      ++v19;
    }
    while (v16 != v18);
  }
  v21 = v49;
  if (v49)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    v7 = v48;
  }
  v49 = (unsigned int *)v51;
  v50 = xmmword_1C85F20B0;
  if (v7)
  {
    v23 = v47;
    if (*(_BYTE *)v47 == 47)
      goto LABEL_27;
    if (a4 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v49, v51, a4, 1);
      v24 = v50;
    }
    else
    {
      v24 = 0;
      if (!a4)
      {
LABEL_25:
        *(_QWORD *)&v50 = v24 + a4;
        v44 = 261;
        *(_QWORD *)&v43[0] = v23;
        *((_QWORD *)&v43[0] + 1) = v7;
        v42 = 257;
        v40 = 257;
        v38 = 257;
        llvm::sys::path::append(&v49, (const llvm::Twine *)1, (_QWORD **)v43, &v41, &v39, &v37);
        v23 = v49;
        v7 = v50;
        goto LABEL_26;
      }
    }
    memcpy((char *)v49 + v24, a3, a4);
    v24 = v50;
    goto LABEL_25;
  }
  v23 = (unsigned int *)a3;
  v7 = a4;
LABEL_26:
  v47 = v23;
  v48 = v7;
LABEL_27:
  last_not_of = llvm::StringRef::find_last_not_of(&v47, "/", 1, 0xFFFFFFFFFFFFFFFFLL);
  if (last_not_of + 1 < v7)
    v7 = last_not_of + 1;
  v47 = v23;
  v48 = v7;
  v26 = *(_QWORD *)(a2 + 24);
  v36 = v26;
  if (v26 >= 8)
  {
    if ((v26 & 2) != 0 && (v26 & 4) != 0)
    {
      (*(void (**)(__int128 *, uint64_t))((v26 & 0xFFFFFFFFFFFFFFF8) + 8))(&v34, a2);
    }
    else
    {
      v34 = *(_OWORD *)a2;
      v35 = *(_QWORD *)(a2 + 16);
    }
    *(_QWORD *)(a2 + 24) = 0;
  }
  llvm::cas::FileSystemCache::VFSDirIterImpl::create(&v34, v23, v7, v45, v46, v43);
  sub_1C5052E10(&v34);
  v33 = v43[0];
  v43[0] = 0uLL;
  sub_1C61D51BC(a7, (uint64_t)&v33);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v43[0] + 1);
    if (*((_QWORD *)&v43[0] + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v43[0] + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  if (v49 != (unsigned int *)v51)
    free(v49);
  if (v45 != &v47)
    free(v45);
}

_QWORD *llvm::cas::FileSystemCache::VFSDirIterImpl::create@<X0>(__int128 *a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, const void *a4@<X3>, unint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  size_t v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  _OWORD *v20;
  _QWORD *v21;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;

  v12 = a5;
  v13 = (char *)malloc_type_malloc(a3 + 8 * a5 + 113, 0x2A82A2E9uLL);
  v14 = v13;
  v15 = (uint64_t *)(v13 + 112);
  if (a5)
    memmove(v13 + 112, a4, v12 * 8);
  v16 = 126 - 2 * __clz(a5);
  if (a5)
    v17 = v16;
  else
    v17 = 0;
  sub_1C5059FBC(v15, &v15[a5], v17, 1);
  v18 = &v15[v12];
  if (a3)
    memmove(v18, a2, a3);
  *((_BYTE *)v18 + a3) = 0;
  v19 = *((_QWORD *)a1 + 3);
  v25 = v19;
  if (v19 <= 7)
  {
    *((_QWORD *)v14 + 2) = 0;
    *((_QWORD *)v14 + 3) = 0;
    *((_DWORD *)v14 + 8) = 9;
    *(_QWORD *)v14 = off_1E813FB38;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 8) = v19;
  }
  else
  {
    if ((v19 & 2) != 0 && (v19 & 4) != 0)
    {
      (*(void (**)(__int128 *, __int128 *))((v19 & 0xFFFFFFFFFFFFFFF8) + 8))(&v23, a1);
      v19 = v25;
    }
    else
    {
      v23 = *a1;
      v24 = *((_QWORD *)a1 + 2);
    }
    *((_QWORD *)a1 + 3) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *((_QWORD *)v14 + 3) = 0;
    *((_DWORD *)v14 + 8) = 9;
    *(_QWORD *)v14 = off_1E813FB38;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 8) = v19;
    if (v19 >= 8)
    {
      v20 = v14 + 40;
      if ((v19 & 2) != 0 && (v19 & 4) != 0)
      {
        (*(void (**)(_OWORD *, __int128 *))((v19 & 0xFFFFFFFFFFFFFFF8) + 8))(v20, &v23);
      }
      else
      {
        *v20 = v23;
        *((_QWORD *)v14 + 7) = v24;
      }
      v25 = 0;
    }
  }
  *((_QWORD *)v14 + 9) = v18;
  *((_QWORD *)v14 + 10) = a3;
  *((_QWORD *)v14 + 11) = v15;
  *((_QWORD *)v14 + 12) = a5;
  *((_QWORD *)v14 + 13) = v15;
  llvm::cas::FileSystemCache::VFSDirIterImpl::setEntry((llvm::cas::FileSystemCache::VFSDirIterImpl *)v14);
  *a6 = v14;
  v21 = (_QWORD *)operator new();
  *v21 = &off_1E813FBA0;
  v21[1] = 0;
  v21[2] = 0;
  v21[3] = v14;
  a6[1] = v21;
  return sub_1C5052E10(&v23);
}

void llvm::cas::FileSystemCache::VFSDirIterImpl::setEntry(llvm::cas::FileSystemCache::VFSDirIterImpl *this)
{
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  int v5;
  _QWORD *v6;
  void *p_p;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void **v11;
  void *v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  uint64_t v19;
  char *v20[4];
  __int16 v21;
  void *__p;
  __int128 v23;
  char *v24;
  _BYTE v25[15];
  __int128 v26;
  __int16 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)*((_QWORD *)this + 13);
  if (v2 == (uint64_t *)(*((_QWORD *)this + 11) + 8 * *((_QWORD *)this + 12)))
  {
    v11 = (void **)((char *)this + 8);
    if (*((char *)this + 31) < 0)
      operator delete(*v11);
    *v11 = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 9;
  }
  else
  {
    v3 = *v2;
    v21 = 773;
    v4 = (char *)*((_QWORD *)this + 10);
    v20[0] = *((char **)this + 9);
    v20[1] = v4;
    v20[2] = "/";
    *(_QWORD *)v25 = v20;
    v26 = *(_OWORD *)(v3 + 16);
    v27 = 1282;
    llvm::Twine::str((llvm::Twine *)v25, &__p);
    v5 = *(_DWORD *)(v3 + 40);
    if (v5 == 2)
    {
      v6 = (_QWORD *)((char *)this + 40);
      if (v23 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v23 >= 0)
        v8 = HIBYTE(v23) & 0x7F;
      else
        v8 = v23;
      v9 = *((_QWORD *)this + 8);
      if ((v9 & 2) == 0)
        v6 = (_QWORD *)*v6;
      (*(void (**)(_BYTE *__return_ptr, _QWORD *, void *, uint64_t))(v9 & 0xFFFFFFFFFFFFFFF8))(v25, v6, p_p, v8);
      if ((v25[8] & 1) != 0)
      {
        v24 = *(char **)v25;
        *(_QWORD *)v25 = 0;
        sub_1C4D62BD4(&v24, v20);
        if (v24)
          (*(void (**)(char *))(*(_QWORD *)v24 + 8))(v24);
        if ((v25[8] & 1) != 0)
        {
          v16 = *(_QWORD *)v25;
          *(_QWORD *)v25 = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
        v10 = 0;
      }
      else if (*(_DWORD *)(*(_QWORD *)v25 + 40) == 3)
      {
        v10 = 3;
      }
      else
      {
        v10 = 2;
      }
      v17 = __p;
      *(_QWORD *)v25 = v23;
      *(_QWORD *)&v25[7] = *(_QWORD *)((char *)&v23 + 7);
      v18 = HIBYTE(v23);
      v23 = 0uLL;
      __p = 0;
      if (*((char *)this + 31) < 0)
        operator delete(*((void **)this + 1));
      v19 = *(_QWORD *)v25;
      *((_QWORD *)this + 1) = v17;
      *((_QWORD *)this + 2) = v19;
      *(_QWORD *)((char *)this + 23) = *(_QWORD *)&v25[7];
      *((_BYTE *)this + 31) = v18;
      *((_DWORD *)this + 8) = v10;
    }
    else
    {
      v12 = __p;
      *(_QWORD *)v25 = v23;
      *(_QWORD *)&v25[7] = *(_QWORD *)((char *)&v23 + 7);
      v13 = HIBYTE(v23);
      v23 = 0uLL;
      __p = 0;
      if (v5 == 3)
        v14 = 3;
      else
        v14 = 2;
      if (*((char *)this + 31) < 0)
        operator delete(*((void **)this + 1));
      v15 = *(_QWORD *)v25;
      *((_QWORD *)this + 1) = v12;
      *((_QWORD *)this + 2) = v15;
      *(_QWORD *)((char *)this + 23) = *(_QWORD *)&v25[7];
      *((_BYTE *)this + 31) = v13;
      *((_DWORD *)this + 8) = v14;
    }
    if (SHIBYTE(v23) < 0)
      operator delete(__p);
  }
}

uint64_t sub_1C5059FAC(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
}

uint64_t *sub_1C5059FBC(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  uint64_t *v20;
  size_t v21;
  size_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  size_t v34;
  size_t v35;
  int v36;
  int v37;
  uint64_t *v38;
  size_t v39;
  size_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  size_t v46;
  size_t v47;
  int v48;
  int v49;
  uint64_t *v50;
  size_t v51;
  size_t v52;
  int v53;
  int v54;
  uint64_t *v55;
  BOOL v56;
  uint64_t *v57;
  size_t v58;
  size_t v59;
  int v60;
  uint64_t *v61;
  uint64_t *v62;
  size_t v63;
  size_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  size_t v69;
  size_t v70;
  int v71;
  uint64_t *v72;
  size_t v73;
  size_t v74;
  int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  size_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  size_t v88;
  uint64_t *v89;
  BOOL v90;
  char v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  size_t v98;
  size_t v99;
  uint64_t v100;
  uint64_t *v101;
  size_t v102;
  size_t v103;
  int v104;
  int64_t v105;
  int64_t v106;
  int64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  size_t v114;
  int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  size_t v121;
  uint64_t v122;
  uint64_t *v123;
  int64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  size_t v128;
  int v129;
  unint64_t v130;
  size_t v131;
  int v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  size_t v141;
  int v142;
  uint64_t *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  size_t v151;
  uint64_t *v152;
  unint64_t v153;
  size_t v154;
  int v155;
  uint64_t v157;
  uint64_t v158;
  size_t v159;
  size_t v160;
  size_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  size_t v165;
  size_t v166;
  size_t v167;
  uint64_t *v168;
  uint64_t v169;
  size_t v170;
  size_t v171;
  int v172;
  uint64_t v173;
  size_t v174;
  size_t v175;
  uint64_t v176;
  size_t v177;
  size_t v178;
  uint64_t *v179;
  uint64_t v181;
  int64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;

  v5 = result;
LABEL_2:
  v6 = a2;
  v183 = a2 - 1;
  v7 = v5;
  while (2)
  {
    v5 = v7;
    v8 = (char *)v6 - (char *)v7;
    v9 = v6 - v7;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v77 = *(a2 - 1);
        v78 = *v5;
        v79 = *(_QWORD *)(v77 + 24);
        v80 = *(_QWORD *)(*v5 + 24);
        if (v80 >= v79)
          v81 = *(_QWORD *)(v77 + 24);
        else
          v81 = *(_QWORD *)(*v5 + 24);
        if (v81
          && (result = (uint64_t *)memcmp(*(const void **)(v77 + 16), *(const void **)(v78 + 16), v81), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v79 >= v80)
        {
          return result;
        }
        *v5 = v77;
        *(a2 - 1) = v78;
        return result;
      case 3:
        return sub_1C505ACF8(v5, v5 + 1, v183);
      case 4:
        return sub_1C505B180(v5, v5 + 1, v5 + 2, v183);
      case 5:
        v82 = v5 + 2;
        v83 = v5 + 3;
        result = sub_1C505B180(v5, v5 + 1, v5 + 2, v5 + 3);
        v84 = *(a2 - 1);
        v85 = v5[3];
        v86 = *(_QWORD *)(v84 + 24);
        v87 = *(_QWORD *)(v85 + 24);
        if (v87 >= v86)
          v88 = *(_QWORD *)(v84 + 24);
        else
          v88 = *(_QWORD *)(v85 + 24);
        if (v88
          && (result = (uint64_t *)memcmp(*(const void **)(v84 + 16), *(const void **)(v85 + 16), v88), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v86 >= v87)
        {
          return result;
        }
        *v83 = v84;
        *(a2 - 1) = v85;
        v157 = *v83;
        v158 = *v82;
        v159 = *(_QWORD *)(*v83 + 24);
        v160 = *(_QWORD *)(*v82 + 24);
        if (v160 >= v159)
          v161 = *(_QWORD *)(*v83 + 24);
        else
          v161 = *(_QWORD *)(*v82 + 24);
        if (v161
          && (result = (uint64_t *)memcmp(*(const void **)(v157 + 16), *(const void **)(v158 + 16), v161), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v159 >= v160)
        {
          return result;
        }
        *v82 = v157;
        *v83 = v158;
        v173 = v5[1];
        v174 = *(_QWORD *)(v173 + 24);
        if (v174 >= v159)
          v175 = v159;
        else
          v175 = *(_QWORD *)(v173 + 24);
        if (v175
          && (result = (uint64_t *)memcmp(*(const void **)(v157 + 16), *(const void **)(v173 + 16), v175), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v159 >= v174)
        {
          return result;
        }
        v5[1] = v157;
        v5[2] = v173;
        v176 = *v5;
        v177 = *(_QWORD *)(*v5 + 24);
        if (v177 >= v159)
          v178 = v159;
        else
          v178 = *(_QWORD *)(*v5 + 24);
        if (v178
          && (result = (uint64_t *)memcmp(*(const void **)(v157 + 16), *(const void **)(v176 + 16), v178), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v159 >= v177)
        {
          return result;
        }
        *v5 = v157;
        v5[1] = v176;
        return result;
      default:
        if (v8 <= 191)
        {
          v89 = v5 + 1;
          v90 = v5 == v6 || v89 == v6;
          v91 = v90;
          if ((a4 & 1) == 0)
          {
            if ((v91 & 1) != 0)
              return result;
            while (1)
            {
              v162 = v5;
              v5 = v89;
              v164 = *v162;
              v163 = v162[1];
              v165 = *(_QWORD *)(v163 + 24);
              v166 = *(_QWORD *)(*v162 + 24);
              if (v166 >= v165)
                v167 = *(_QWORD *)(v163 + 24);
              else
                v167 = *(_QWORD *)(*v162 + 24);
              if (v167
                && (result = (uint64_t *)memcmp(*(const void **)(v163 + 16), *(const void **)(v164 + 16), v167),
                    (_DWORD)result))
              {
                if ((result & 0x80000000) != 0)
                {
                  do
                  {
LABEL_331:
                    v168 = v162;
                    v169 = *--v162;
                    v162[2] = v164;
                    v164 = v169;
                    v170 = *(_QWORD *)(v169 + 24);
                    if (v170 >= v165)
                      v171 = v165;
                    else
                      v171 = v170;
                    if (v171
                      && (result = (uint64_t *)memcmp(*(const void **)(v163 + 16), *(const void **)(v164 + 16), v171),
                          (_DWORD)result))
                    {
                      v172 = ((int)result >> 31) | 1;
                    }
                    else
                    {
                      if (v165 >= v170)
                        break;
                      v172 = -1;
                    }
                  }
                  while (v172 == -1);
                  *v168 = v163;
                }
              }
              else if (v165 < v166)
              {
                goto LABEL_331;
              }
              v89 = v5 + 1;
              if (v5 + 1 == a2)
                return result;
            }
          }
          if ((v91 & 1) != 0)
            return result;
          v92 = 0;
          v93 = v5;
LABEL_189:
          v94 = v93;
          v93 = v89;
          v96 = *v94;
          v95 = v94[1];
          v97 = *(_QWORD *)(v95 + 24);
          v98 = *(_QWORD *)(*v94 + 24);
          if (v98 >= v97)
            v99 = *(_QWORD *)(v95 + 24);
          else
            v99 = *(_QWORD *)(*v94 + 24);
          if (v99
            && (result = (uint64_t *)memcmp(*(const void **)(v95 + 16), *(const void **)(v96 + 16), v99), (_DWORD)result))
          {
            if ((result & 0x80000000) == 0)
              goto LABEL_212;
          }
          else if (v97 >= v98)
          {
            goto LABEL_212;
          }
          v100 = v92;
          while (1)
          {
            *(uint64_t *)((char *)v5 + v100 + 8) = v96;
            if (!v100)
            {
              v101 = v5;
              goto LABEL_211;
            }
            v101 = v94;
            v96 = *(uint64_t *)((char *)v5 + v100 - 8);
            v102 = *(_QWORD *)(v96 + 24);
            if (v102 >= v97)
              v103 = v97;
            else
              v103 = *(_QWORD *)(v96 + 24);
            if (v103
              && (result = (uint64_t *)memcmp(*(const void **)(v95 + 16), *(const void **)(v96 + 16), v103),
                  (_DWORD)result))
            {
              v104 = ((int)result >> 31) | 1;
            }
            else
            {
              if (v97 >= v102)
              {
                v101 = (uint64_t *)((char *)v5 + v100);
LABEL_211:
                *v101 = v95;
LABEL_212:
                v89 = v93 + 1;
                v92 += 8;
                if (v93 + 1 == a2)
                  return result;
                goto LABEL_189;
              }
              v104 = -1;
            }
            v94 = v101 - 1;
            v100 -= 8;
            if (v104 != -1)
              goto LABEL_211;
          }
        }
        if (a3)
        {
          v10 = (unint64_t)v9 >> 1;
          v11 = &v5[(unint64_t)v9 >> 1];
          if ((unint64_t)v8 < 0x401)
          {
            result = sub_1C505ACF8(v11, v5, v183);
          }
          else
          {
            sub_1C505ACF8(v5, v11, v183);
            sub_1C505ACF8(v5 + 1, v11 - 1, a2 - 2);
            sub_1C505ACF8(v5 + 2, &v5[v10 + 1], a2 - 3);
            result = sub_1C505ACF8(v11 - 1, v11, &v5[v10 + 1]);
            v12 = *v5;
            *v5 = *v11;
            *v11 = v12;
          }
          --a3;
          v13 = *v5;
          if ((a4 & 1) == 0)
          {
            v15 = *(v5 - 1);
            v16 = *(_QWORD *)(v15 + 24);
            v14 = *(_QWORD *)(v13 + 24);
            if (v14 >= v16)
              v17 = *(_QWORD *)(v15 + 24);
            else
              v17 = *(_QWORD *)(v13 + 24);
            if (v17
              && (result = (uint64_t *)memcmp(*(const void **)(v15 + 16), *(const void **)(v13 + 16), v17), (_DWORD)result))
            {
              if ((result & 0x80000000) != 0)
                goto LABEL_38;
            }
            else if (v16 < v14)
            {
              goto LABEL_38;
            }
            v18 = *(_QWORD *)(*v183 + 24);
            if (v18 >= v14)
              v19 = v14;
            else
              v19 = *(_QWORD *)(*v183 + 24);
            if (v19
              && (result = (uint64_t *)memcmp(*(const void **)(v13 + 16), *(const void **)(*v183 + 16), v19),
                  (_DWORD)result))
            {
              if ((result & 0x80000000) == 0)
                goto LABEL_23;
            }
            else if (v14 >= v18)
            {
LABEL_23:
              v20 = v5 + 1;
              do
              {
                v7 = v20;
                if (v20 >= v6)
                  break;
                v21 = *(_QWORD *)(*v20 + 24);
                v22 = v21 >= v14 ? v14 : *(_QWORD *)(*v20 + 24);
                if (v22
                  && (result = (uint64_t *)memcmp(*(const void **)(v13 + 16), *(const void **)(*v20 + 16), v22),
                      (_DWORD)result))
                {
                  v23 = ((int)result >> 31) | 1;
                }
                else if (v14 == v21)
                {
                  v23 = 0;
                }
                else
                {
                  if (v14 < v21)
                    goto LABEL_122;
                  v23 = 1;
                }
                v20 = v7 + 1;
              }
              while (v23 != -1);
              goto LABEL_122;
            }
            v57 = v5 + 1;
            do
            {
              v7 = v57;
              v58 = *(_QWORD *)(*v57 + 24);
              if (v58 >= v14)
                v59 = v14;
              else
                v59 = *(_QWORD *)(*v57 + 24);
              if (v59
                && (result = (uint64_t *)memcmp(*(const void **)(v13 + 16), *(const void **)(*v57 + 16), v59),
                    (_DWORD)result))
              {
                v60 = ((int)result >> 31) | 1;
              }
              else if (v14 == v58)
              {
                v60 = 0;
              }
              else
              {
                if (v14 < v58)
                  break;
                v60 = 1;
              }
              v57 = v7 + 1;
            }
            while (v60 != -1);
LABEL_122:
            v61 = v6;
            if (v7 < v6)
            {
              v62 = a2 - 1;
              do
              {
                v61 = v62;
                v63 = *(_QWORD *)(*v62 + 24);
                if (v63 >= v14)
                  v64 = v14;
                else
                  v64 = *(_QWORD *)(*v62 + 24);
                if (v64
                  && (result = (uint64_t *)memcmp(*(const void **)(v13 + 16), *(const void **)(*v62 + 16), v64),
                      (_DWORD)result))
                {
                  v65 = ((int)result >> 31) | 1;
                }
                else
                {
                  if (v14 >= v63)
                    break;
                  v65 = -1;
                }
                v62 = v61 - 1;
              }
              while (v65 == -1);
            }
            if (v7 < v61)
            {
              v66 = *v7;
              v67 = *v61;
              do
              {
                *v7 = v67;
                *v61 = v66;
                v68 = v7 + 1;
                do
                {
                  v7 = v68;
                  v66 = *v68;
                  v69 = *(_QWORD *)(*v68 + 24);
                  if (v69 >= v14)
                    v70 = v14;
                  else
                    v70 = *(_QWORD *)(*v68 + 24);
                  if (v70
                    && (result = (uint64_t *)memcmp(*(const void **)(v13 + 16), *(const void **)(v66 + 16), v70),
                        (_DWORD)result))
                  {
                    v71 = ((int)result >> 31) | 1;
                  }
                  else if (v14 == v69)
                  {
                    v71 = 0;
                  }
                  else
                  {
                    if (v14 < v69)
                      break;
                    v71 = 1;
                  }
                  v68 = v7 + 1;
                }
                while (v71 != -1);
                v72 = v61 - 1;
                do
                {
                  v61 = v72;
                  v67 = *v72;
                  v73 = *(_QWORD *)(*v72 + 24);
                  if (v73 >= v14)
                    v74 = v14;
                  else
                    v74 = *(_QWORD *)(*v72 + 24);
                  if (v74
                    && (result = (uint64_t *)memcmp(*(const void **)(v13 + 16), *(const void **)(v67 + 16), v74),
                        (_DWORD)result))
                  {
                    v75 = ((int)result >> 31) | 1;
                  }
                  else
                  {
                    if (v14 >= v73)
                      break;
                    v75 = -1;
                  }
                  v72 = v61 - 1;
                }
                while (v75 == -1);
              }
              while (v7 < v61);
            }
            v76 = v7 - 1;
            v6 = a2;
            if (v7 - 1 != v5)
              *v5 = *v76;
            a4 = 0;
            *v76 = v13;
            continue;
          }
          v14 = *(_QWORD *)(v13 + 24);
LABEL_38:
          v24 = 8;
          do
          {
            v25 = v24;
            v26 = *(uint64_t *)((char *)v5 + v24);
            v27 = *(_QWORD *)(v26 + 24);
            if (v14 >= v27)
              v28 = *(_QWORD *)(v26 + 24);
            else
              v28 = v14;
            if (v28 && (v29 = memcmp(*(const void **)(v26 + 16), *(const void **)(v13 + 16), v28)) != 0)
            {
              v30 = (v29 >> 31) | 1;
            }
            else
            {
              if (v27 >= v14)
                break;
              v30 = -1;
            }
            v24 = v25 + 8;
          }
          while (v30 == -1);
          v31 = (unint64_t)v5 + v25;
          v32 = a2 - 1;
          if (v25 == 8)
          {
            v38 = a2 - 1;
            while (v31 < (unint64_t)(v38 + 1))
            {
              v33 = v38;
              v39 = *(_QWORD *)(*v38 + 24);
              if (v14 >= v39)
                v40 = *(_QWORD *)(*v38 + 24);
              else
                v40 = v14;
              if (v40 && (v41 = memcmp(*(const void **)(*v38 + 16), *(const void **)(v13 + 16), v40)) != 0)
              {
                v42 = (v41 >> 31) | 1;
              }
              else if (v39 == v14)
              {
                v42 = 0;
              }
              else
              {
                if (v39 < v14)
                  goto LABEL_76;
                v42 = 1;
              }
              v38 = v33 - 1;
              if (v42 == -1)
                goto LABEL_76;
            }
            v33 = v38 + 1;
          }
          else
          {
            do
            {
              v33 = v32;
              v34 = *(_QWORD *)(*v32 + 24);
              if (v14 >= v34)
                v35 = *(_QWORD *)(*v32 + 24);
              else
                v35 = v14;
              if (v35 && (v36 = memcmp(*(const void **)(*v32 + 16), *(const void **)(v13 + 16), v35)) != 0)
              {
                v37 = (v36 >> 31) | 1;
              }
              else if (v34 == v14)
              {
                v37 = 0;
              }
              else
              {
                if (v34 < v14)
                  break;
                v37 = 1;
              }
              v32 = v33 - 1;
            }
            while (v37 != -1);
          }
LABEL_76:
          v181 = a3;
          if (v31 >= (unint64_t)v33)
          {
            v7 = (uint64_t *)v31;
          }
          else
          {
            v43 = *v33;
            v7 = (uint64_t *)v31;
            v44 = v33;
            do
            {
              *v7 = v43;
              *v44 = v26;
              v45 = v7 + 1;
              do
              {
                v7 = v45;
                v26 = *v45;
                v46 = *(_QWORD *)(*v45 + 24);
                if (v14 >= v46)
                  v47 = *(_QWORD *)(*v45 + 24);
                else
                  v47 = v14;
                if (v47 && (v48 = memcmp(*(const void **)(v26 + 16), *(const void **)(v13 + 16), v47)) != 0)
                {
                  v49 = (v48 >> 31) | 1;
                }
                else
                {
                  if (v46 >= v14)
                    break;
                  v49 = -1;
                }
                v45 = v7 + 1;
              }
              while (v49 == -1);
              v50 = v44 - 1;
              do
              {
                v44 = v50;
                v43 = *v50;
                v51 = *(_QWORD *)(*v50 + 24);
                if (v14 >= v51)
                  v52 = *(_QWORD *)(*v50 + 24);
                else
                  v52 = v14;
                if (v52 && (v53 = memcmp(*(const void **)(v43 + 16), *(const void **)(v13 + 16), v52)) != 0)
                {
                  v54 = (v53 >> 31) | 1;
                }
                else if (v51 == v14)
                {
                  v54 = 0;
                }
                else
                {
                  if (v51 < v14)
                    break;
                  v54 = 1;
                }
                v50 = v44 - 1;
              }
              while (v54 != -1);
            }
            while (v7 < v44);
          }
          v55 = v7 - 1;
          if (v7 - 1 != v5)
            *v5 = *v55;
          *v55 = v13;
          v6 = a2;
          a3 = v181;
          if (v31 < (unint64_t)v33)
            goto LABEL_108;
          v56 = sub_1C505AE74(v5, v7 - 1);
          result = (uint64_t *)sub_1C505AE74(v7, a2);
          if (!(_DWORD)result)
          {
            if (v56)
              continue;
LABEL_108:
            result = (uint64_t *)sub_1C5059FBC(v5, v7 - 1, v181, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v7 - 1;
          if (v56)
            return result;
          goto LABEL_2;
        }
        if (v5 == v6)
          return result;
        v105 = (unint64_t)(v9 - 2) >> 1;
        v106 = v105;
        v179 = v5;
        while (2)
        {
          v107 = v106;
          if (v105 >= v106)
          {
            v108 = (2 * v106) | 1;
            v109 = &v5[v108];
            v110 = 2 * v106 + 2;
            v182 = v106;
            if (v110 < v9)
            {
              v111 = v109[1];
              v112 = *(_QWORD *)(*v109 + 24);
              v113 = *(_QWORD *)(v111 + 24);
              if (v113 >= v112)
                v114 = *(_QWORD *)(*v109 + 24);
              else
                v114 = *(_QWORD *)(v111 + 24);
              if (v114
                && (result = (uint64_t *)memcmp(*(const void **)(*v109 + 16), *(const void **)(v111 + 16), v114),
                    (_DWORD)result))
              {
                v115 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v112 < v113)
                  v115 = -1;
                else
                  v115 = 1;
                if (v112 == v113)
                  v115 = 0;
              }
              if (v115 == -1)
              {
                ++v109;
                v108 = v110;
              }
              v107 = v182;
            }
            v116 = &v5[v107];
            v117 = *v109;
            v118 = *v116;
            v119 = *(_QWORD *)(*v109 + 24);
            v120 = *(_QWORD *)(*v116 + 24);
            if (v120 >= v119)
              v121 = *(_QWORD *)(*v109 + 24);
            else
              v121 = *(_QWORD *)(*v116 + 24);
            if (v121
              && (v122 = *v116,
                  result = (uint64_t *)memcmp(*(const void **)(v117 + 16), *(const void **)(v118 + 16), v121),
                  v118 = v122,
                  (_DWORD)result))
            {
              v107 = v182;
              if ((result & 0x80000000) != 0)
                goto LABEL_270;
            }
            else
            {
              v107 = v182;
              if (v119 < v120)
                goto LABEL_270;
            }
            v184 = v118;
            do
            {
              v123 = v109;
              *v116 = v117;
              if (v105 < v108)
                break;
              v109 = &v5[(2 * v108) | 1];
              if (2 * v108 + 2 >= v9)
              {
                v108 = (2 * v108) | 1;
              }
              else
              {
                v124 = v105;
                v125 = v109[1];
                v126 = *(_QWORD *)(*v109 + 24);
                v127 = *(_QWORD *)(v125 + 24);
                v128 = v127 >= v126 ? *(_QWORD *)(*v109 + 24) : *(_QWORD *)(v125 + 24);
                if (v128
                  && (result = (uint64_t *)memcmp(*(const void **)(*v109 + 16), *(const void **)(v125 + 16), v128),
                      (_DWORD)result))
                {
                  v129 = ((int)result >> 31) | 1;
                }
                else
                {
                  if (v126 < v127)
                    v129 = -1;
                  else
                    v129 = 1;
                  if (v126 == v127)
                    v129 = 0;
                }
                v105 = v124;
                v5 = v179;
                if (v129 == -1)
                {
                  ++v109;
                  v108 = 2 * v108 + 2;
                }
                else
                {
                  v108 = (2 * v108) | 1;
                }
              }
              v117 = *v109;
              v130 = *(_QWORD *)(*v109 + 24);
              v131 = v120 >= v130 ? *(_QWORD *)(*v109 + 24) : v120;
              if (v131
                && (result = (uint64_t *)memcmp(*(const void **)(v117 + 16), *(const void **)(v184 + 16), v131),
                    (_DWORD)result))
              {
                v132 = ((int)result >> 31) | 1;
              }
              else if (v130 == v120)
              {
                v132 = 0;
              }
              else
              {
                if (v130 < v120)
                  break;
                v132 = 1;
              }
              v116 = v123;
            }
            while (v132 != -1);
            v107 = v182;
            *v123 = v184;
          }
LABEL_270:
          v106 = v107 - 1;
          if (v107)
            continue;
          break;
        }
        do
        {
          v133 = 0;
          v185 = *v5;
          v134 = v5;
          do
          {
            v135 = (uint64_t)&v134[v133 + 1];
            v136 = (2 * v133) | 1;
            v137 = 2 * v133 + 2;
            if (v137 < v9)
            {
              v138 = v134[v133 + 2];
              v139 = *(_QWORD *)(*(_QWORD *)v135 + 24);
              v140 = *(_QWORD *)(v138 + 24);
              if (v140 >= v139)
                v141 = *(_QWORD *)(*(_QWORD *)v135 + 24);
              else
                v141 = *(_QWORD *)(v138 + 24);
              if (v141
                && (result = (uint64_t *)memcmp(*(const void **)(*(_QWORD *)v135 + 16), *(const void **)(v138 + 16), v141), (_DWORD)result))
              {
                v142 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v139 < v140)
                  v142 = -1;
                else
                  v142 = 1;
                if (v139 == v140)
                  v142 = 0;
              }
              if (v142 == -1)
              {
                v135 += 8;
                v136 = v137;
              }
            }
            *v134 = *(_QWORD *)v135;
            v134 = (_QWORD *)v135;
            v133 = v136;
          }
          while (v136 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
          v143 = a2 - 1;
          v90 = v135 == (_QWORD)--a2;
          if (v90)
          {
            *(_QWORD *)v135 = v185;
          }
          else
          {
            *(_QWORD *)v135 = *v143;
            *v143 = v185;
            v144 = v135 - (_QWORD)v5 + 8;
            if (v144 >= 9)
            {
              v145 = (((unint64_t)v144 >> 3) - 2) >> 1;
              v146 = &v5[v145];
              v147 = *v146;
              v148 = *(_QWORD *)v135;
              v149 = *(_QWORD *)(*v146 + 24);
              v150 = *(_QWORD *)(*(_QWORD *)v135 + 24);
              if (v150 >= v149)
                v151 = *(_QWORD *)(*v146 + 24);
              else
                v151 = *(_QWORD *)(*(_QWORD *)v135 + 24);
              if (v151
                && (result = (uint64_t *)memcmp(*(const void **)(v147 + 16), *(const void **)(v148 + 16), v151),
                    (_DWORD)result))
              {
                if ((result & 0x80000000) != 0)
                {
                  do
                  {
LABEL_298:
                    v152 = v146;
                    *(_QWORD *)v135 = v147;
                    if (!v145)
                      break;
                    v145 = (v145 - 1) >> 1;
                    v146 = &v5[v145];
                    v147 = *v146;
                    v153 = *(_QWORD *)(*v146 + 24);
                    v154 = v150 >= v153 ? *(_QWORD *)(*v146 + 24) : v150;
                    if (v154
                      && (result = (uint64_t *)memcmp(*(const void **)(v147 + 16), *(const void **)(v148 + 16), v154),
                          (_DWORD)result))
                    {
                      v155 = ((int)result >> 31) | 1;
                    }
                    else
                    {
                      if (v153 >= v150)
                        break;
                      v155 = -1;
                    }
                    v135 = (uint64_t)v152;
                  }
                  while (v155 == -1);
                  *v152 = v148;
                }
              }
              else if (v149 < v150)
              {
                goto LABEL_298;
              }
            }
          }
        }
        while (v9-- > 2);
        return result;
    }
  }
}

uint64_t *sub_1C505ACF8(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;

  v5 = result;
  v6 = *a2;
  v7 = *result;
  v8 = *(_QWORD *)(*a2 + 24);
  v9 = *(_QWORD *)(*result + 24);
  if (v9 >= v8)
    v10 = *(_QWORD *)(*a2 + 24);
  else
    v10 = *(_QWORD *)(*result + 24);
  if (v10)
  {
    result = (uint64_t *)memcmp(*(const void **)(v6 + 16), *(const void **)(v7 + 16), v10);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        goto LABEL_7;
LABEL_15:
      v14 = *a3;
      v15 = *(_QWORD *)(*a3 + 24);
      if (v8 >= v15)
        v16 = *(_QWORD *)(*a3 + 24);
      else
        v16 = v8;
      if (v16
        && (result = (uint64_t *)memcmp(*(const void **)(v14 + 16), *(const void **)(v6 + 16), v16), (_DWORD)result))
      {
        if ((result & 0x80000000) == 0)
        {
LABEL_21:
          *v5 = v6;
          *a2 = v7;
          v17 = *a3;
          v18 = *(_QWORD *)(*a3 + 24);
          if (v9 >= v18)
            v19 = *(_QWORD *)(*a3 + 24);
          else
            v19 = v9;
          if (v19
            && (result = (uint64_t *)memcmp(*(const void **)(v17 + 16), *(const void **)(v7 + 16), v19), (_DWORD)result))
          {
            if ((result & 0x80000000) == 0)
              return result;
          }
          else if (v18 >= v9)
          {
            return result;
          }
          *a2 = v17;
          goto LABEL_40;
        }
      }
      else if (v15 >= v8)
      {
        goto LABEL_21;
      }
      *v5 = v14;
LABEL_40:
      *a3 = v7;
      return result;
    }
  }
  if (v8 < v9)
    goto LABEL_15;
LABEL_7:
  v11 = *a3;
  v12 = *(_QWORD *)(*a3 + 24);
  if (v8 >= v12)
    v13 = *(_QWORD *)(*a3 + 24);
  else
    v13 = v8;
  if (v13 && (result = (uint64_t *)memcmp(*(const void **)(v11 + 16), *(const void **)(v6 + 16), v13), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v12 >= v8)
  {
    return result;
  }
  *a2 = v11;
  *a3 = v6;
  v20 = *a2;
  v21 = *v5;
  v22 = *(_QWORD *)(*a2 + 24);
  v23 = *(_QWORD *)(*v5 + 24);
  if (v23 >= v22)
    v24 = *(_QWORD *)(*a2 + 24);
  else
    v24 = *(_QWORD *)(*v5 + 24);
  if (v24 && (result = (uint64_t *)memcmp(*(const void **)(v20 + 16), *(const void **)(v21 + 16), v24), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v22 >= v23)
  {
    return result;
  }
  *v5 = v20;
  *a2 = v21;
  return result;
}

BOOL sub_1C505AE74(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  size_t v25;
  size_t v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  size_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  size_t v41;
  size_t v42;
  int v43;
  uint64_t v44;
  size_t v45;
  size_t v46;
  int v47;
  uint64_t v48;
  size_t v49;
  size_t v50;
  int v51;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *(_QWORD *)(v6 + 24);
      v9 = *(_QWORD *)(*a1 + 24);
      if (v9 >= v8)
        v10 = *(_QWORD *)(v6 + 24);
      else
        v10 = *(_QWORD *)(*a1 + 24);
      if (v10 && (v11 = memcmp(*(const void **)(v6 + 16), *(const void **)(v7 + 16), v10)) != 0)
      {
        if ((v11 & 0x80000000) == 0)
          return 1;
      }
      else if (v8 >= v9)
      {
        return 1;
      }
      *a1 = v6;
      *(a2 - 1) = v7;
      return 1;
    case 3:
      sub_1C505ACF8(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C505B180(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v30 = a1 + 2;
      v31 = a1 + 3;
      sub_1C505B180(a1, a1 + 1, a1 + 2, a1 + 3);
      v32 = *(a2 - 1);
      v33 = a1[3];
      v34 = *(_QWORD *)(v32 + 24);
      v35 = *(_QWORD *)(v33 + 24);
      if (v35 >= v34)
        v36 = *(_QWORD *)(v32 + 24);
      else
        v36 = *(_QWORD *)(v33 + 24);
      if (v36 && (v37 = memcmp(*(const void **)(v32 + 16), *(const void **)(v33 + 16), v36)) != 0)
      {
        if ((v37 & 0x80000000) == 0)
          return 1;
      }
      else if (v34 >= v35)
      {
        return 1;
      }
      *v31 = v32;
      *(a2 - 1) = v33;
      v38 = *v31;
      v39 = *v30;
      v40 = *(_QWORD *)(*v31 + 24);
      v41 = *(_QWORD *)(*v30 + 24);
      if (v41 >= v40)
        v42 = *(_QWORD *)(*v31 + 24);
      else
        v42 = *(_QWORD *)(*v30 + 24);
      if (v42 && (v43 = memcmp(*(const void **)(v38 + 16), *(const void **)(v39 + 16), v42)) != 0)
      {
        if ((v43 & 0x80000000) == 0)
          return 1;
      }
      else if (v40 >= v41)
      {
        return 1;
      }
      *v30 = v38;
      *v31 = v39;
      v44 = a1[1];
      v45 = *(_QWORD *)(v44 + 24);
      if (v45 >= v40)
        v46 = v40;
      else
        v46 = *(_QWORD *)(v44 + 24);
      if (v46 && (v47 = memcmp(*(const void **)(v38 + 16), *(const void **)(v44 + 16), v46)) != 0)
      {
        if ((v47 & 0x80000000) == 0)
          return 1;
      }
      else if (v40 >= v45)
      {
        return 1;
      }
      a1[1] = v38;
      a1[2] = v44;
      v48 = *a1;
      v49 = *(_QWORD *)(*a1 + 24);
      if (v49 >= v40)
        v50 = v40;
      else
        v50 = *(_QWORD *)(*a1 + 24);
      if (v50 && (v51 = memcmp(*(const void **)(v38 + 16), *(const void **)(v48 + 16), v50)) != 0)
      {
        if ((v51 & 0x80000000) == 0)
          return 1;
      }
      else if (v40 >= v49)
      {
        return 1;
      }
      *a1 = v38;
      a1[1] = v48;
      return 1;
    default:
      v12 = a1 + 2;
      sub_1C505ACF8(a1, a1 + 1, a1 + 2);
      v13 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  do
  {
    v16 = *v13;
    v17 = *v12;
    v18 = *(_QWORD *)(*v13 + 24);
    v19 = *(_QWORD *)(v17 + 24);
    if (v19 >= v18)
      v20 = *(_QWORD *)(*v13 + 24);
    else
      v20 = *(_QWORD *)(v17 + 24);
    if (v20 && (v21 = memcmp(*(const void **)(v16 + 16), *(const void **)(v17 + 16), v20)) != 0)
    {
      if ((v21 & 0x80000000) == 0)
        goto LABEL_33;
    }
    else if (v18 >= v19)
    {
      goto LABEL_33;
    }
    v22 = v14;
    while (1)
    {
      v23 = v22;
      v24 = (char *)a1 + v22;
      *((_QWORD *)v24 + 3) = v17;
      if (v23 == -16)
        break;
      v17 = *((_QWORD *)v24 + 1);
      v25 = *(_QWORD *)(v17 + 24);
      if (v25 >= v18)
        v26 = v18;
      else
        v26 = *(_QWORD *)(v17 + 24);
      if (v26 && (v27 = memcmp(*(const void **)(v16 + 16), *(const void **)(v17 + 16), v26)) != 0)
      {
        v28 = (v27 >> 31) | 1;
      }
      else
      {
        if (v18 >= v25)
          goto LABEL_30;
        v28 = -1;
      }
      v22 = v23 - 8;
      if (v28 != -1)
      {
LABEL_30:
        v29 = (uint64_t *)((char *)a1 + v23 + 16);
        goto LABEL_32;
      }
    }
    v29 = a1;
LABEL_32:
    *v29 = v16;
    if (++v15 == 8)
      return v13 + 1 == a2;
LABEL_33:
    v12 = v13;
    v14 += 8;
    ++v13;
  }
  while (v13 != a2);
  return 1;
}

uint64_t *sub_1C505B180(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;

  result = sub_1C505ACF8(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = *(_QWORD *)(*a4 + 24);
  v12 = *(_QWORD *)(*a3 + 24);
  if (v12 >= v11)
    v13 = *(_QWORD *)(*a4 + 24);
  else
    v13 = *(_QWORD *)(*a3 + 24);
  if (v13 && (result = (uint64_t *)memcmp(*(const void **)(v9 + 16), *(const void **)(v10 + 16), v13), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v11 >= v12)
  {
    return result;
  }
  *a3 = v9;
  *a4 = v10;
  v14 = *a3;
  v15 = *a2;
  v16 = *(_QWORD *)(*a3 + 24);
  v17 = *(_QWORD *)(*a2 + 24);
  if (v17 >= v16)
    v18 = *(_QWORD *)(*a3 + 24);
  else
    v18 = *(_QWORD *)(*a2 + 24);
  if (v18 && (result = (uint64_t *)memcmp(*(const void **)(v14 + 16), *(const void **)(v15 + 16), v18), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v16 >= v17)
  {
    return result;
  }
  *a2 = v14;
  *a3 = v15;
  v19 = *a2;
  v20 = *a1;
  v21 = *(_QWORD *)(*a2 + 24);
  v22 = *(_QWORD *)(*a1 + 24);
  if (v22 >= v21)
    v23 = *(_QWORD *)(*a2 + 24);
  else
    v23 = *(_QWORD *)(*a1 + 24);
  if (v23 && (result = (uint64_t *)memcmp(*(const void **)(v19 + 16), *(const void **)(v20 + 16), v23), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v21 >= v22)
  {
    return result;
  }
  *a1 = v19;
  *a2 = v20;
  return result;
}

_BYTE *llvm::cas::ThreadSafeHashMappedTrieBase::find(uint64_t a1, const void *a2, size_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _QWORD v11[4];
  uint64_t v12;
  char v13;

  v3 = atomic_load((unint64_t *)(a1 + 16));
  if (!v3)
    return 0;
  v4 = v3 + 104;
  v8 = *(unsigned __int16 *)(a1 + 8);
  v11[0] = *(unsigned __int16 *)(a1 + 6);
  v11[1] = v8;
  v11[2] = a2;
  v11[3] = a3;
  LOBYTE(v12) = 0;
  v13 = 0;
  v9 = (_BYTE *)atomic_load((unint64_t *)(*(_QWORD *)(v3 + 128) + 8 * sub_1C61D53A0((uint64_t)v11)));
  if ((unint64_t)(v9 + 1) >= 2)
  {
    if (*v9)
    {
      v10 = v9;
      while (1)
      {
        v9 = (_BYTE *)atomic_load((unint64_t *)(*((_QWORD *)v10 + 3) + 8 * sub_1C61D53A0((uint64_t)v11)));
        if ((unint64_t)(v9 + 1) < 2)
          return v10;
        v4 = (unint64_t)v10;
        v10 = v9;
        if (!*v9)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if (a3 == v9[2] && !memcmp(&v9[v9[3]], a2, a3))
        return &v9[v9[1]];
    }
  }
  return (_BYTE *)v4;
}

_BYTE *llvm::cas::ThreadSafeHashMappedTrieBase::insert(unsigned __int16 *a1, _QWORD *a2, unint64_t a3, unint64_t a4, size_t a5, uint64_t (*a6)(uint64_t, _BYTE *, void *, size_t), uint64_t a7)
{
  int v13;
  unint64_t Impl;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  _BYTE *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  _QWORD *v28;
  unint64_t *v29;
  char *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 v44;
  char v45;
  char v46;
  unsigned __int8 v48;
  unsigned __int16 *v50;
  uint64_t (*v51)(uint64_t, _BYTE *, void *, size_t);
  uint64_t v52;
  void *__s2;
  size_t __n;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57[2];
  size_t v58;
  unint64_t v59;
  char v60;

  v13 = ~(_DWORD)a3;
  Impl = llvm::cas::ThreadSafeHashMappedTrieBase::getOrCreateImpl((llvm::cas::ThreadSafeHashMappedTrieBase *)a1);
  v15 = Impl;
  v16 = a1[4];
  v56 = a1[3];
  v57[0] = v16;
  __s2 = (void *)a4;
  __n = a5;
  v57[1] = a4;
  v58 = a5;
  LOBYTE(v59) = 0;
  v60 = 0;
  v50 = a1;
  v51 = a6;
  if ((v13 & 0xFFFFFFFE) != 0)
  {
    v59 = HIDWORD(a3);
    v60 = 1;
    v17 = a3;
  }
  else
  {
    a2 = (_QWORD *)(Impl + 104);
    v17 = sub_1C61D53A0((uint64_t)&v56);
  }
  v52 = v15;
  v18 = (unint64_t *)(v15 + 120);
LABEL_4:
  while (1)
  {
    v19 = (unint64_t *)(a2[3] + 8 * v17);
    v20 = (_BYTE *)atomic_load(v19);
    if (v20 != (_BYTE *)-1)
      break;
    do
    {
      v20 = (_BYTE *)atomic_load(v19);
LABEL_13:
      ;
    }
    while (v20 == (_BYTE *)-1);
LABEL_14:
    if (!*v20)
    {
      if (__n == v20[2] && !memcmp(&v20[v20[3]], __s2, __n))
        return &v20[v20[1]];
      v22 = a2;
LABEL_18:
      v55 = v17;
      v17 = sub_1C61D53A0((uint64_t)&v56);
      v23 = sub_1C505B9F4((uint64_t)&v20[v20[3]], v20[2], v59, v57[0]);
      if (v59)
        v24 = v57;
      else
        v24 = (unint64_t *)&v56;
      v25 = *v24;
      if (8 * v58 - v59 >= v25)
        v26 = v25;
      else
        v26 = 8 * v58 - v59;
      v27 = *((_DWORD *)v22 + 2) + *((_DWORD *)v22 + 1);
      v28 = malloc_type_malloc((8 << v26) + 40, 0x42725486uLL);
      a2 = v28;
      *(_BYTE *)v28 = 1;
      v28[2] = 0;
      v29 = v28 + 2;
      *((_DWORD *)v28 + 1) = v27;
      *((_DWORD *)v28 + 2) = v26;
      v30 = (char *)(v28 + 5);
      v28[3] = v28 + 5;
      v28[4] = 1 << v26;
      if (v26 <= 0x3C)
        bzero(v28 + 5, 8 << v26);
      v31 = 0;
      v32 = (unint64_t *)&v30[8 * v23];
      while (2)
      {
        v33 = __ldaxr(v32);
        if (v33 == v31)
        {
          if (!__stlxr((unint64_t)v20, v32))
          {
            v34 = 1;
            goto LABEL_32;
          }
        }
        else
        {
          __clrex();
        }
        v34 = 0;
LABEL_32:
        if (v33 == -1)
          v31 = 0;
        else
          v31 = v33;
        if (!v34)
          continue;
        break;
      }
      v35 = (unint64_t *)(v22[3] + 8 * v55);
      while (2)
      {
        v36 = __ldaxr(v35);
        if ((_BYTE *)v36 == v20)
        {
          if (__stlxr((unint64_t)a2, v35))
            continue;
LABEL_41:
          v37 = __ldaxr(v18);
          if (v37)
          {
            __clrex();
            goto LABEL_46;
          }
          if (__stlxr((unint64_t)a2, v18))
          {
            do
LABEL_46:
              __ldaxr(v29);
            while (__stlxr(v37, v29));
            v38 = __ldaxr(v18);
            if (v38 == v37)
            {
              if (!__stlxr((unint64_t)a2, v18))
              {
                v39 = 1;
                goto LABEL_52;
              }
            }
            else
            {
              __clrex();
            }
            v39 = 0;
LABEL_52:
            v37 = v38;
            if ((v39 & 1) != 0)
              goto LABEL_53;
            goto LABEL_46;
          }
LABEL_53:
          v22 = a2;
          if (v17 != v23)
            goto LABEL_4;
          goto LABEL_18;
        }
        break;
      }
      __clrex();
      if (v36 != -1)
      {
LABEL_44:
        free(a2);
        a2 = (_QWORD *)v36;
        goto LABEL_53;
      }
      while (2)
      {
        if (v36 != -1)
          goto LABEL_44;
        v36 = __ldaxr(v35);
        if ((_BYTE *)v36 == v20)
        {
          if (!__stlxr((unint64_t)a2, v35))
          {
            v40 = 1;
            goto LABEL_62;
          }
        }
        else
        {
          __clrex();
        }
        v40 = 0;
LABEL_62:
        if (v40)
          goto LABEL_41;
        continue;
      }
    }
    v17 = sub_1C61D53A0((uint64_t)&v56);
    a2 = v20;
  }
  if (v20)
    goto LABEL_14;
  while (1)
  {
    v20 = (_BYTE *)__ldaxr(v19);
    if (v20)
      break;
    if (!__stlxr(0xFFFFFFFFFFFFFFFFLL, v19))
    {
      v21 = 1;
      goto LABEL_10;
    }
  }
  v21 = 0;
  __clrex();
LABEL_10:
  if ((v21 & 1) == 0)
    goto LABEL_13;
  v41 = *v50;
  v42 = v50[1];
  v43 = (unsigned __int8 *)(v52 + 96);
  do
    v44 = __ldaxr(v43);
  while (__stxr(1u, v43));
  if ((v44 & 1) != 0)
  {
    do
      v48 = __ldaxr(v43);
    while (__stxr(1u, v43) | v48 & 1);
  }
  v20 = (_BYTE *)sub_1C484358C(v52, v41, 63 - __clz(v42));
  atomic_store(0, (unsigned __int8 *)(v52 + 96));
  v45 = v51(a7, &v20[v50[2]], __s2, __n);
  v46 = *((_BYTE *)v50 + 4);
  *v20 = 0;
  v20[1] = v46;
  v20[2] = __n;
  v20[3] = v45 - (_BYTE)v20;
  atomic_store((unint64_t)v20, v19);
  return &v20[v20[1]];
}

void llvm::cas::ThreadSafeHashMappedTrieBase::print(llvm::cas::ThreadSafeHashMappedTrieBase *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  void *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  void *__p;
  char v11;
  char v12;

  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 9)
  {
    *(_WORD *)(v4 + 8) = 15731;
    *(_QWORD *)v4 = *(_QWORD *)"root-bits=";
    *((_QWORD *)a2 + 4) += 10;
    v5 = a2;
  }
  else
  {
    v5 = llvm::raw_ostream::write(a2, "root-bits=", 0xAuLL);
  }
  sub_1C5E21910(v5, *((unsigned __int16 *)this + 3), 0, 0, 0);
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 0xDuLL)
  {
    qmemcpy(v6, " subtrie-bits=", 14);
    *((_QWORD *)v5 + 4) += 14;
  }
  else
  {
    v5 = llvm::raw_ostream::write(v5, " subtrie-bits=", 0xEuLL);
  }
  sub_1C5E21910(v5, *((unsigned __int16 *)this + 4), 0, 0, 0);
  v7 = (_BYTE *)*((_QWORD *)v5 + 4);
  if (*((_BYTE **)v5 + 3) == v7)
  {
    llvm::raw_ostream::write(v5, "\n", 1uLL);
  }
  else
  {
    *v7 = 10;
    ++*((_QWORD *)v5 + 4);
  }
  v8 = atomic_load((unint64_t *)this + 2);
  if (v8)
  {
    LOBYTE(__p) = 0;
    v12 = 0;
    sub_1C505BA84(v8 + 104, a2, (uint64_t)&__p);
    if (v12)
    {
      if (v11 < 0)
        operator delete(__p);
    }
  }
  else
  {
    v9 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v9) > 9)
    {
      *(_WORD *)(v9 + 8) = 2653;
      *(_QWORD *)v9 = *(_QWORD *)"[no-root]\n";
      *((_QWORD *)a2 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(a2, "[no-root]\n", 0xAuLL);
    }
  }
}

uint64_t llvm::cas::ThreadSafeHashMappedTrieBase::ThreadSafeHashMappedTrieBase(uint64_t result, __int16 a2, __int16 a3, __int16 a4, __int16 a5, char a6, __int16 a7, char a8)
{
  __int16 v8;
  __int16 v9;

  *(_WORD *)result = a2;
  *(_WORD *)(result + 2) = a3;
  *(_WORD *)(result + 4) = a4;
  if (a6)
    v8 = a5;
  else
    v8 = 6;
  *(_WORD *)(result + 6) = v8;
  if (a8)
    v9 = a7;
  else
    v9 = 4;
  *(_WORD *)(result + 8) = v9;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

{
  __int16 v8;
  __int16 v9;

  *(_WORD *)result = a2;
  *(_WORD *)(result + 2) = a3;
  *(_WORD *)(result + 4) = a4;
  if (a6)
    v8 = a5;
  else
    v8 = 6;
  *(_WORD *)(result + 6) = v8;
  if (a8)
    v9 = a7;
  else
    v9 = 4;
  *(_WORD *)(result + 8) = v9;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t llvm::cas::ThreadSafeHashMappedTrieBase::ThreadSafeHashMappedTrieBase(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;

  *(_QWORD *)result = *(_QWORD *)a2;
  *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
  v2 = (unint64_t *)(a2 + 16);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(0, v2));
  atomic_store(v3, (unint64_t *)(result + 16));
  return result;
}

{
  unint64_t *v2;
  unint64_t v3;

  *(_QWORD *)result = *(_QWORD *)a2;
  *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
  v2 = (unint64_t *)(a2 + 16);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(0, v2));
  atomic_store(v3, (unint64_t *)(result + 16));
  return result;
}

uint64_t sub_1C505B9F4(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;

  v4 = a3 >> 3;
  if (a3 >> 3 == a2)
    return 0;
  result = 0;
  v7 = a3 & 7;
  v8 = (unsigned __int8 *)(a1 + v4);
  v9 = ~v4 + a2;
  do
  {
    v11 = *v8++;
    v10 = v11;
    if (v7)
      v12 = ~(-1 << (8 - v7));
    else
      v12 = -1;
    v13 = v12 & v10;
    v14 = 8 - v7;
    if (v14 > a4)
      v13 >>= v14 - a4;
    if (v14 >= a4)
      v14 = a4;
    result = (result << v14) | v13 & ~(-1 << v14);
    a4 -= v14;
    if (!a4)
      break;
    v7 = 0;
  }
  while (v9--);
  return result;
}

void sub_1C505BA84(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t i;
  _BYTE *v18;
  _QWORD *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  _BYTE *v34;
  unint64_t v35;
  int v36;
  _BYTE *v37;
  _BYTE *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  _BYTE *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t j;
  char v47;
  std::string::size_type size;
  std::string *v49;
  std::string::size_type v50;
  char *v51;
  _QWORD *v52;
  std::string *p_dst;
  unint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  void *__p[2];
  uint64_t v65;
  char v66;
  std::string __dst;
  std::string v68;
  char *v69[2];
  uint64_t v70;
  void *v71;
  uint64_t v72;
  _QWORD v73[8];

  v3 = a3;
  v73[6] = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)*((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 3) - (_QWORD)v6;
  if (*(_BYTE *)(a3 + 24))
  {
    if (v7 > 7)
    {
      *v6 = 0x3D65697274627573;
      *((_QWORD *)a2 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a2, "subtrie=", 8uLL);
    }
    v8 = *(_BYTE *)(v3 + 23);
    v9 = v8 < 0;
    if (v8 >= 0)
      v10 = (unsigned __int8 *)v3;
    else
      v10 = *(unsigned __int8 **)v3;
    v11 = v8 & 0x7F;
    if (v9)
      v12 = *(_QWORD *)(v3 + 8);
    else
      v12 = v11;
    sub_1C505C1E4(a2, v10, v12);
  }
  else
  {
    if (v7 > 3)
    {
      *(_DWORD *)v6 = 1953460082;
      *((_QWORD *)a2 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(a2, "root", 4uLL);
    }
    if (*(_BYTE *)(v3 + 24) && *(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_BYTE *)(v3 + 24) = 1;
  }
  v13 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v13) > 0xA)
  {
    *(_DWORD *)(v13 + 7) = 1030976623;
    *(_QWORD *)v13 = *(_QWORD *)" num-slots=";
    *((_QWORD *)a2 + 4) += 11;
    v14 = a2;
  }
  else
  {
    v14 = llvm::raw_ostream::write(a2, " num-slots=", 0xBuLL);
  }
  sub_1C5E21910(v14, *(_QWORD *)(a1 + 32), 0, 0, 0);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if (*((_BYTE **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, "\n", 1uLL);
  }
  else
  {
    *v15 = 10;
    ++*((_QWORD *)v14 + 4);
  }
  v71 = v73;
  v72 = 0x600000000;
  v69[0] = (char *)&v70;
  v69[1] = (char *)0x200000000;
  v16 = *(_QWORD *)(a1 + 32);
  if (v16)
  {
    v63 = v3;
    for (i = 0; i != v16; ++i)
    {
      v18 = (_BYTE *)atomic_load((unint64_t *)(*(_QWORD *)(a1 + 24) + 8 * i));
      if ((unint64_t)(v18 + 1) >= 2)
      {
        v19 = (_QWORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v19 > 7uLL)
        {
          *v19 = 0x3D7865646E69202DLL;
          *((_QWORD *)a2 + 4) += 8;
          v20 = a2;
        }
        else
        {
          v20 = llvm::raw_ostream::write(a2, "- index=", 8uLL);
        }
        sub_1C5E21910(v20, i, 0, 0, 0);
        v21 = (_BYTE *)*((_QWORD *)v20 + 4);
        if (*((_BYTE **)v20 + 3) == v21)
        {
          llvm::raw_ostream::write(v20, " ", 1uLL);
        }
        else
        {
          *v21 = 32;
          ++*((_QWORD *)v20 + 4);
        }
        if (*v18)
        {
          if (*(char *)(v3 + 23) < 0)
            sub_1C47EBC30(&__dst, *(void **)v3, *(_QWORD *)(v3 + 8));
          else
            __dst = *(std::string *)v3;
          v44 = *(_QWORD *)(a1 + 32);
          memset(&v68, 0, sizeof(v68));
          if (v44 < 2)
          {
            size = 0;
            v49 = 0;
            v47 = 0;
          }
          else
          {
            v45 = i;
            for (j = 1; j < v44; j *= 2)
            {
              std::string::push_back(&v68, v45 & 1 | 0x30);
              v45 >>= 1;
            }
            v47 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
            size = v68.__r_.__value_.__l.__size_;
            v49 = (std::string *)v68.__r_.__value_.__r.__words[0];
          }
          if (v47 < 0)
          {
            v50 = size;
          }
          else
          {
            v49 = &v68;
            v50 = v47 & 0x7F;
          }
          if (v50)
          {
            v51 = (char *)&v49[-1].__r_.__value_.__r.__words[2] + 7;
            do
              std::string::push_back(&__dst, v51[v50--]);
            while (v50);
            v47 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
          }
          if (v47 < 0)
            operator delete(v68.__r_.__value_.__l.__data_);
          v52 = (_QWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v52 > 7uLL)
          {
            *v52 = 0x3D65697274627573;
            *((_QWORD *)a2 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(a2, "subtrie=", 8uLL);
          }
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_dst = &__dst;
          else
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v54 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
          else
            v54 = __dst.__r_.__value_.__l.__size_;
          sub_1C505C1E4(a2, (unsigned __int8 *)p_dst, v54);
          v55 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v55)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            *v55 = 10;
            ++*((_QWORD *)a2 + 4);
          }
          v56 = v72;
          if (v72 >= (unint64_t)HIDWORD(v72))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, (uint64_t)v73, v72 + 1, 8);
            v56 = v72;
          }
          *((_QWORD *)v71 + v56) = v18;
          LODWORD(v72) = v72 + 1;
          sub_1C505C3A0((uint64_t)v69, (unint64_t)&__dst);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
        }
        else
        {
          v22 = (_QWORD *)*((_QWORD *)a2 + 4);
          v23 = v16;
          if (*((_QWORD *)a2 + 3) - (_QWORD)v22 > 7uLL)
          {
            *v22 = 0x3D746E65746E6F63;
            *((_QWORD *)a2 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(a2, "content=", 8uLL);
          }
          v24 = &v18[v18[3]];
          v25 = v18[2];
          v27 = *(_DWORD *)(a1 + 4);
          v26 = *(_DWORD *)(a1 + 8);
          v28 = v27 & 0xFFFFFFFC;
          if ((v27 & 0xFFFFFFFC) != 0)
          {
            v29 = 0;
            do
            {
              v30 = v24[v29 >> 3];
              v31 = v30 >> 4;
              v32 = v30 & 0xF;
              if ((v29 & 4) != 0)
                v33 = v32;
              else
                v33 = v31;
              sub_1C505C408(a2, v33);
              v29 += 4;
            }
            while (v28 != v29);
          }
          v34 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v34)
          {
            llvm::raw_ostream::write(a2, "[", 1uLL);
          }
          else
          {
            *v34 = 91;
            ++*((_QWORD *)a2 + 4);
          }
          v16 = v23;
          v35 = (v27 + v26 + 3) & 0xFFFFFFFC;
          if ((_DWORD)v28 != (_DWORD)v35)
          {
            do
            {
              v36 = (v24[v28 >> 3] >> (~(_BYTE)v28 & 7)) & 1 | 0x30;
              v37 = (_BYTE *)*((_QWORD *)a2 + 4);
              if ((unint64_t)v37 >= *((_QWORD *)a2 + 3))
              {
                llvm::raw_ostream::write(a2, v36);
              }
              else
              {
                *((_QWORD *)a2 + 4) = v37 + 1;
                *v37 = v36;
              }
              ++v28;
            }
            while (v35 != v28);
          }
          v38 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v38)
          {
            llvm::raw_ostream::write(a2, "]", 1uLL);
          }
          else
          {
            *v38 = 93;
            ++*((_QWORD *)a2 + 4);
          }
          while (8 * v25 != v35)
          {
            v39 = v24[v35 >> 3];
            v40 = v39 >> 4;
            v41 = v39 & 0xF;
            if ((v35 & 4) != 0)
              v42 = v41;
            else
              v42 = v40;
            sub_1C505C408(a2, v42);
            v35 += 4;
          }
          v43 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v43)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            *v43 = 10;
            ++*((_QWORD *)a2 + 4);
          }
          v3 = v63;
        }
      }
    }
    if ((_DWORD)v72)
    {
      v57 = 0;
      v58 = 0;
      v59 = 8 * v72;
      do
      {
        v60 = *(_QWORD *)((char *)v71 + v58);
        v61 = &v69[0][v57];
        if (v69[0][v57 + 23] < 0)
        {
          sub_1C47EBC30(__p, *(void **)v61, *((_QWORD *)v61 + 1));
        }
        else
        {
          v62 = *(_OWORD *)v61;
          v65 = *((_QWORD *)v61 + 2);
          *(_OWORD *)__p = v62;
        }
        v66 = 1;
        sub_1C505BA84(v60, a2, __p);
        if (v66)
        {
          if (SHIBYTE(v65) < 0)
            operator delete(__p[0]);
          v66 = 0;
        }
        v58 += 8;
        v57 += 24;
      }
      while (v59 != v58);
    }
  }
  sub_1C4E01820(v69);
  if (v71 != v73)
    free(v71);
}

llvm::raw_ostream *sub_1C505C1E4(llvm::raw_ostream *this, unsigned __int8 *a2, unint64_t a3)
{
  size_t v3;
  llvm::raw_ostream *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned __int8 v12;
  _BYTE *v13;
  void *v14;
  _BYTE *v15;

  v3 = a3;
  v5 = this;
  if (a3 >= 4)
  {
    do
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = a2[v6];
        if ((v8 - 48) >= 0xA)
        {
          if ((v8 - 97) >= 0x1A)
          {
            if ((v8 - 65) > 0x19)
              goto LABEL_18;
            v9 = -55;
          }
          else
          {
            v9 = -87;
          }
        }
        else
        {
          v9 = -48;
        }
        v10 = v9 + v8;
        if (v10 > 1 || (v11 = 2 * v7 + v10, v7 > v11 >> 1))
        {
LABEL_18:
          v12 = 0;
          goto LABEL_16;
        }
        ++v6;
        v7 = v11;
      }
      while (v6 != 4);
      if (v11 >= 0x100)
        v12 = 0;
      else
        v12 = v11;
LABEL_16:
      this = sub_1C505C408(v5, v12);
      a2 += 4;
      v3 -= 4;
    }
    while (v3 > 3);
  }
  if (v3)
  {
    v13 = (_BYTE *)*((_QWORD *)v5 + 4);
    if (*((_BYTE **)v5 + 3) == v13)
    {
      v5 = llvm::raw_ostream::write(v5, "[", 1uLL);
      v14 = (void *)*((_QWORD *)v5 + 4);
    }
    else
    {
      *v13 = 91;
      v14 = (void *)(*((_QWORD *)v5 + 4) + 1);
      *((_QWORD *)v5 + 4) = v14;
    }
    if (v3 <= *((_QWORD *)v5 + 3) - (_QWORD)v14)
    {
      this = (llvm::raw_ostream *)memcpy(v14, a2, v3);
      v15 = (_BYTE *)(*((_QWORD *)v5 + 4) + v3);
      *((_QWORD *)v5 + 4) = v15;
    }
    else
    {
      this = llvm::raw_ostream::write(v5, (const char *)a2, v3);
      v5 = this;
      v15 = (_BYTE *)*((_QWORD *)this + 4);
    }
    if (*((_BYTE **)v5 + 3) == v15)
    {
      return llvm::raw_ostream::write(v5, "]", 1uLL);
    }
    else
    {
      *v15 = 93;
      ++*((_QWORD *)v5 + 4);
    }
  }
  return this;
}

unint64_t sub_1C505C3A0(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  __int128 v5;

  result = sub_1C4E01890(a1, a2, 1);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
  if (*(char *)(result + 23) < 0)
  {
    result = (unint64_t)sub_1C47EBC30((_BYTE *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8)), *(void **)result, *(_QWORD *)(result + 8));
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)v4 = v5;
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

llvm::raw_ostream *sub_1C505C408(llvm::raw_ostream *result, unsigned int a2)
{
  char *v2;
  char v3;

  v2 = (char *)*((_QWORD *)result + 4);
  if (a2 > 9)
    v3 = a2 + 87;
  else
    v3 = a2 + 48;
  if ((unint64_t)v2 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, v3);
  *((_QWORD *)result + 4) = v2 + 1;
  *v2 = v3;
  return result;
}

uint64_t sub_1C505C440(uint64_t a1, _OWORD *a2, int *a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  int v10;
  size_t v11;
  const void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  char *v20;
  char *v21;
  int v22;
  size_t v23;
  const void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  unsigned int v30;
  unint64_t v31;

  v8 = *(_DWORD *)(a1 + 8);
  if (v8 < *(_DWORD *)(a1 + 12))
  {
    v9 = *(_QWORD *)a1 + 48 * v8;
    v10 = *a3;
    v12 = *(const void **)a4;
    v11 = *(_QWORD *)(a4 + 8);
    *(_OWORD *)v9 = *a2;
    *(_DWORD *)(v9 + 16) = v10;
    v13 = (_QWORD *)(v9 + 24);
    if (!v12)
    {
      *v13 = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
LABEL_13:
      v17 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v17;
      v18 = *(_QWORD *)a1 + 48 * v17;
      return v18 - 48;
    }
    if (v11 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v11 >= 0x17)
      {
        v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v14 = v11 | 7;
        v15 = v14 + 1;
        v16 = operator new(v14 + 1);
        v13[1] = v11;
        v13[2] = v15 | 0x8000000000000000;
        *v13 = v16;
        v13 = v16;
      }
      else
      {
        *(_BYTE *)(v9 + 47) = v11;
        if (!v11)
          goto LABEL_12;
      }
      memmove(v13, v12, v11);
LABEL_12:
      *((_BYTE *)v13 + v11) = 0;
      goto LABEL_13;
    }
LABEL_29:
    abort();
  }
  v31 = 0;
  v20 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 48, &v31);
  v21 = &v20[48 * *(unsigned int *)(a1 + 8)];
  v22 = *a3;
  v24 = *(const void **)a4;
  v23 = *(_QWORD *)(a4 + 8);
  *(_OWORD *)v21 = *a2;
  *((_DWORD *)v21 + 4) = v22;
  v25 = v21 + 24;
  if (v24)
  {
    if (v23 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_29;
    if (v23 >= 0x17)
    {
      v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v26 = v23 | 7;
      v27 = v26 + 1;
      v28 = operator new(v26 + 1);
      v25[1] = v23;
      v25[2] = v27 | 0x8000000000000000;
      *v25 = v28;
      v25 = v28;
    }
    else
    {
      v21[47] = v23;
      if (!v23)
        goto LABEL_25;
    }
    memmove(v25, v24, v23);
LABEL_25:
    *((_BYTE *)v25 + v23) = 0;
    goto LABEL_26;
  }
  *v25 = 0;
  *((_QWORD *)v21 + 4) = 0;
  *((_QWORD *)v21 + 5) = 0;
LABEL_26:
  sub_1C505D34C((uint64_t *)a1, (uint64_t)v20);
  v29 = v31;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v20;
  v30 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v30;
  *(_DWORD *)(a1 + 12) = v29;
  v18 = (uint64_t)&v20[48 * v30];
  return v18 - 48;
}

uint64_t sub_1C505C640(uint64_t *a1, int a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  BOOL v10;
  uint64_t result;
  _BYTE *v12;
  char v13;

  v4 = (_BYTE *)*a1;
  if (!a1[1] || *v4 != 47)
  {
    v13 = 47;
    sub_1C61D5618(a1, (uint64_t)v4, &v13);
  }
  llvm::sys::path::remove_dots((unsigned __int8 **)a1, 1, 1u);
  v5 = (_BYTE *)*a1;
  v6 = *((unsigned int *)a1 + 2);
  if (!*((_DWORD *)a1 + 2))
  {
    v12 = 0;
    a1[1] = 0;
    result = (uint64_t)v5;
LABEL_14:
    if ((unint64_t)(v12 + 1) > a1[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, (unint64_t)(v12 + 1), 1);
      result = *a1;
      v12 = (_BYTE *)a1[1];
    }
    v12[result] = 47;
    result = *a1;
    ++a1[1];
    return result;
  }
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = *(unsigned __int8 *)(*a1 + v7);
    v10 = v9 == 47;
    if (v9 != 47)
    {
      if (v8)
      {
        *v5++ = 47;
        LOBYTE(v9) = *(_BYTE *)(*a1 + v7);
      }
      *v5++ = v9;
    }
    ++v7;
    v8 = v10;
  }
  while (v6 != v7);
  result = *a1;
  v12 = &v5[-*a1];
  a1[1] = (uint64_t)v12;
  if (a2 == 3 || v5 == (_BYTE *)result)
    goto LABEL_14;
  return result;
}

void llvm::cas::HierarchicalTreeBuilder::pushTreeContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  const void *v7;
  size_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  void *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  _QWORD v26[33];

  v26[32] = *MEMORY[0x1E0C80C00];
  v24 = v26;
  v25 = xmmword_1C64638F0;
  llvm::Twine::toVector(a3, (uint64_t)&v24);
  v5 = sub_1C505C640((uint64_t *)&v24, 3);
  v7 = (const void *)v5;
  v8 = v6;
  v9 = *(_DWORD *)(a1 + 408);
  if (v9 < *(_DWORD *)(a1 + 412))
  {
    v10 = *(_QWORD *)(a1 + 400) + 48 * v9;
    *(_QWORD *)v10 = a2;
    *(_QWORD *)(v10 + 8) = 1;
    *(_DWORD *)(v10 + 16) = 3;
    v11 = (_QWORD *)(v10 + 24);
    if (!v5)
    {
      *v11 = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = 0;
      goto LABEL_13;
    }
    if (v6 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v6 >= 0x17)
      {
        v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v12 = v6 | 7;
        v13 = v12 + 1;
        v14 = operator new(v12 + 1);
        v11[1] = v8;
        v11[2] = v13 | 0x8000000000000000;
        *v11 = v14;
        v11 = v14;
      }
      else
      {
        *(_BYTE *)(v10 + 47) = v6;
        if (!v6)
          goto LABEL_12;
      }
      memmove(v11, v7, v8);
LABEL_12:
      *((_BYTE *)v11 + v8) = 0;
      goto LABEL_13;
    }
LABEL_30:
    abort();
  }
  v23 = 0;
  v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 400, 0, 48, &v23);
  v16 = &v15[48 * *(unsigned int *)(a1 + 408)];
  *(_QWORD *)v16 = a2;
  *((_QWORD *)v16 + 1) = 1;
  *((_DWORD *)v16 + 4) = 3;
  v17 = v16 + 24;
  if (v7)
  {
    if (v8 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_30;
    if (v8 >= 0x17)
    {
      v18 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v18 = v8 | 7;
      v19 = v18 + 1;
      v20 = operator new(v18 + 1);
      v17[1] = v8;
      v17[2] = v19 | 0x8000000000000000;
      *v17 = v20;
      v17 = v20;
    }
    else
    {
      v16[47] = v8;
      if (!v8)
        goto LABEL_26;
    }
    memmove(v17, v7, v8);
LABEL_26:
    *((_BYTE *)v17 + v8) = 0;
    goto LABEL_27;
  }
  *v17 = 0;
  *((_QWORD *)v16 + 4) = 0;
  *((_QWORD *)v16 + 5) = 0;
LABEL_27:
  sub_1C505D34C((uint64_t *)(a1 + 400), (uint64_t)v15);
  v21 = v23;
  v22 = *(void **)(a1 + 400);
  if (v22 != (void *)(a1 + 416))
    free(v22);
  *(_QWORD *)(a1 + 400) = v15;
  *(_DWORD *)(a1 + 412) = v21;
LABEL_13:
  ++*(_DWORD *)(a1 + 408);
  if (v24 != v26)
    free(v24);
}

void llvm::cas::HierarchicalTreeBuilder::create(llvm::cas::HierarchicalTreeBuilder *this@<X0>, llvm::cas::ObjectStore *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  BOOL v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  __int128 *v20;
  const std::nothrow_t *v21;
  unint64_t v22;
  __int128 *v23;
  __n128 v24;
  BOOL v25;
  char v26;
  __int128 *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  const void *v32;
  size_t v33;
  char *v34;
  char v35;
  char v36;
  const void *v37;
  size_t v38;
  size_t v39;
  uint64_t v40;
  int v41;
  char *v42;
  size_t v43;
  _BYTE *v44;
  unint64_t v45;
  _QWORD *v46;
  size_t v47;
  size_t v48;
  char *v49;
  size_t v50;
  size_t v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t *j;
  int v59;
  uint64_t *i;
  uint64_t v61;
  void *v62;
  const std::error_category *v63;
  char v64;
  BOOL v65;
  char *v66;
  unint64_t v67;
  _BYTE *v68;
  void *v69;
  const std::error_category *v70;
  char v71;
  BOOL v72;
  char *v73;
  unint64_t v74;
  _BYTE *v75;
  const std::error_category *v76;
  char v77;
  BOOL v78;
  char *v79;
  unint64_t v80;
  _BYTE *p_p;
  const std::error_category *v82;
  char v83;
  BOOL v84;
  char *v85;
  unint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[2];
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  _BYTE v101[32];
  _BYTE *v102;
  uint64_t v103;
  const std::error_category *v104;
  void *__p;
  uint64_t v106;
  char v107;
  char v108;
  void *v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  __int16 v113;
  void *v114[2];
  _QWORD v115[2];
  __int16 v116;
  llvm::cas::HierarchicalTreeBuilder *v117;
  void **v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD v121[6];
  _QWORD v122[4];

  v122[2] = *MEMORY[0x1E0C80C00];
  llvm::cas::TreeSchema::TreeSchema((llvm::cas::TreeSchema *)v101, a2);
  v6 = *((unsigned int *)this + 102);
  if (!(_DWORD)v6)
    goto LABEL_14;
  v7 = 48 * v6;
  v8 = *((_QWORD *)this + 50) + 24;
  do
  {
    v9 = *(_BYTE *)(v8 + 23);
    v10 = v9 < 0;
    v11 = *(void **)v8;
    if (v9 >= 0)
      v11 = (void *)v8;
    v12 = (void *)(v9 & 0x7F);
    if (v10)
      v12 = *(void **)(v8 + 8);
    v114[0] = v11;
    v114[1] = v12;
    v13 = *(_QWORD *)(v8 - 24);
    v117 = this;
    v118 = v114;
    llvm::cas::TreeSchema::walkFileTreeRecursively((uint64_t)v101, v13, (void (*)(uint64_t, __int128 *, _QWORD **))sub_1C505D3E0, (uint64_t)&v117, v94);
    v14 = (void *)v94[0];
    if (v94[0])
    {
      *(_BYTE *)(a3 + 24) |= 1u;
LABEL_129:
      *(_QWORD *)a3 = v14;
      return;
    }
    v8 += 48;
    v7 -= 48;
  }
  while (v7);
  v15 = *((unsigned int *)this + 102);
  if ((_DWORD)v15)
  {
    v16 = *((_QWORD *)this + 50);
    v17 = 48 * v15;
    do
    {
      if (*(char *)(v16 + v17 - 1) < 0)
        operator delete(*(void **)(v16 + v17 - 24));
      v17 -= 48;
    }
    while (v17);
  }
LABEL_14:
  *((_DWORD *)this + 102) = 0;
  v18 = *((unsigned int *)this + 2);
  if (!(_DWORD)v18)
  {
    llvm::cas::TreeProxy::create((llvm::cas::TreeProxy::Builder *)v101, 0, 0, (uint64_t)v114);
    v26 = v116;
    *(_BYTE *)(a3 + 24) = *(_BYTE *)(a3 + 24) & 0xFE | v116 & 1;
    if ((v26 & 1) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)v114;
      *(_QWORD *)(a3 + 16) = v115[0];
      return;
    }
    v14 = v114[0];
    goto LABEL_129;
  }
  v88 = a3;
  v19 = *(__int128 **)this;
  v20 = (__int128 *)(*(_QWORD *)this + 48 * v18);
  v21 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v22 = *((unsigned int *)this + 2);
  while (1)
  {
    v23 = (__int128 *)operator new(48 * v22, v21);
    if (v23)
      break;
    v25 = v22 >= 2;
    v22 >>= 1;
    if (!v25)
    {
      sub_1C505D4AC(v19, v20, v18, 0, 0, v24);
      goto LABEL_23;
    }
  }
  v27 = v23;
  sub_1C505D4AC(v19, v20, v18, v23, v22, v24);
  operator delete(v27);
LABEL_23:
  v117 = 0;
  v118 = 0;
  v119 = v121;
  v120 = 0x400000000;
  v121[4] = v122;
  v121[5] = 0;
  v122[0] = 0;
  v122[1] = 1;
  v96 = 0;
  v94[0] = 0;
  v94[1] = 0;
  LOBYTE(v95) = 0;
  v98 = 0;
  v99 = 0;
  v97 = 0;
  v100 = 0;
  v28 = *((_DWORD *)this + 2);
  if (v28)
  {
    v29 = 0;
    v30 = *(_QWORD *)this;
    v89 = *(_QWORD *)this + 48 * v28;
    do
    {
      if (v29)
      {
        v31 = *(_BYTE *)(v29 + 47);
        if (v31 >= 0)
          v32 = (const void *)(v29 + 24);
        else
          v32 = *(const void **)(v29 + 24);
        if (v31 >= 0)
          v33 = v31 & 0x7F;
        else
          v33 = *(_QWORD *)(v29 + 32);
        v34 = *(char **)(v30 + 24);
        v35 = *(_BYTE *)(v30 + 47);
        v36 = v35;
        if (v35 >= 0)
          v37 = (const void *)(v30 + 24);
        else
          v37 = *(const void **)(v30 + 24);
        v38 = *(_QWORD *)(v30 + 32);
        v39 = v35 & 0x7F;
        if (v35 >= 0)
          v40 = v35 & 0x7F;
        else
          v40 = *(_QWORD *)(v30 + 32);
        if (v33 == v40 && (!v33 || !memcmp(v32, v37, v33)))
        {
          if (*(_DWORD *)(v30 + 16) != *(_DWORD *)(v29 + 16))
          {
            v76 = std::generic_category();
            v77 = *(_BYTE *)(v30 + 47);
            v78 = v77 < 0;
            v79 = *(char **)(v30 + 24);
            if (v77 >= 0)
              v79 = (char *)(v30 + 24);
            v80 = v77 & 0x7F;
            if (v78)
              v80 = *(_QWORD *)(v30 + 32);
            v113 = 1283;
            v109 = "duplicate path '";
            v111 = v79;
            v112 = v80;
            v114[0] = &v109;
            v115[0] = "' with different kind";
            v116 = 770;
            llvm::Twine::str((llvm::Twine *)v114, &__p);
            if (v107 >= 0)
              p_p = &__p;
            else
              p_p = __p;
            v103 = 22;
            v104 = v76;
            v102 = p_p;
            sub_1C5DF1730(&v102, &v103, &v93);
            if (v107 < 0)
              operator delete(__p);
            *(_BYTE *)(v88 + 24) |= 1u;
            *(_QWORD *)v88 = v93;
            v93 = 0;
            goto LABEL_147;
          }
          if (*(_BYTE *)(v30 + 8) && *(_QWORD *)v30 != *(_QWORD *)v29)
          {
            v82 = std::generic_category();
            v83 = *(_BYTE *)(v30 + 47);
            v84 = v83 < 0;
            v85 = *(char **)(v30 + 24);
            if (v83 >= 0)
              v85 = (char *)(v30 + 24);
            v86 = v83 & 0x7F;
            if (v84)
              v86 = *(_QWORD *)(v30 + 32);
            v113 = 1283;
            v109 = "duplicate path '";
            v111 = v85;
            v112 = v86;
            v114[0] = &v109;
            v115[0] = "' with different ID";
            v116 = 770;
            llvm::Twine::str((llvm::Twine *)v114, &__p);
            if (v107 >= 0)
              v87 = &__p;
            else
              v87 = __p;
            v103 = 22;
            v104 = v82;
            v102 = v87;
            sub_1C5DF1730(&v102, &v103, &v92);
            if (v107 < 0)
              operator delete(__p);
            *(_BYTE *)(v88 + 24) |= 1u;
            *(_QWORD *)v88 = v92;
            v92 = 0;
            goto LABEL_147;
          }
          goto LABEL_97;
        }
      }
      else
      {
        v36 = *(_BYTE *)(v30 + 47);
        v34 = *(char **)(v30 + 24);
        v38 = *(_QWORD *)(v30 + 32);
        v39 = v36 & 0x7F;
      }
      v41 = v36;
      if (v36 >= 0)
        v42 = (char *)(v30 + 24);
      else
        v42 = v34;
      if (v41 >= 0)
        v43 = v39;
      else
        v43 = v38;
      v29 = v30;
      if (v43)
      {
        if (*v42 != 47)
          goto LABEL_56;
        v29 = v30;
        if (--v43)
        {
          ++v42;
LABEL_56:
          v44 = memchr(v42, 47, v43);
          v45 = v44 - v42;
          if (!v44)
            v45 = -1;
          v46 = v94;
          while (2)
          {
            if (v43 >= v45)
              v47 = v45;
            else
              v47 = v43;
            if (v43 >= v45 + 1)
              v48 = v45 + 1;
            else
              v48 = v43;
            v49 = &v42[v48];
            v50 = v43 - v48;
            if (v45 == -1)
              v51 = v43;
            else
              v51 = v47;
            if (v45 == -1)
              v52 = "";
            else
              v52 = v49;
            if (v45 == -1)
              v43 = 0;
            else
              v43 = v50;
            if (*((_BYTE *)v46 + 24))
            {
              v63 = std::generic_category();
              v64 = *(_BYTE *)(v30 + 47);
              v65 = v64 < 0;
              v66 = *(char **)(v30 + 24);
              if (v64 >= 0)
                v66 = (char *)(v30 + 24);
              v67 = v64 & 0x7F;
              if (v65)
                v67 = *(_QWORD *)(v30 + 32);
              v113 = 1283;
              v109 = "cannot add '";
              v111 = v66;
              v112 = v67;
              v114[0] = &v109;
              v115[0] = "' under fixed tree";
              v116 = 770;
              llvm::Twine::str((llvm::Twine *)v114, &__p);
              if (v107 >= 0)
                v68 = &__p;
              else
                v68 = __p;
              v103 = 22;
              v104 = v63;
              v102 = v68;
              sub_1C5DF1730(&v102, &v103, &v91);
              if (v107 < 0)
                operator delete(__p);
              *(_BYTE *)(v88 + 24) |= 1u;
              *(_QWORD *)v88 = v91;
              v91 = 0;
              goto LABEL_147;
            }
            v53 = v46[7];
            if (v53 && v51 == *(_QWORD *)(v53 + 48) && (!v51 || !memcmp(v42, *(const void **)(v53 + 40), v51)))
            {
              if (!v43 && *(_DWORD *)(v30 + 16) == 3)
              {
LABEL_96:
                v29 = v30;
                break;
              }
              if (*(_DWORD *)(v53 + 32) != 3)
              {
                v70 = std::generic_category();
                v71 = *(_BYTE *)(v30 + 47);
                v72 = v71 < 0;
                v73 = *(char **)(v30 + 24);
                if (v71 >= 0)
                  v73 = (char *)(v30 + 24);
                v74 = v71 & 0x7F;
                if (v72)
                  v74 = *(_QWORD *)(v30 + 32);
                v113 = 1283;
                if (v74 >= &v42[v51] - v73)
                  v74 = &v42[v51] - v73;
                v109 = "duplicate path '";
                v111 = v73;
                v112 = v74;
                v114[0] = &v109;
                v115[0] = "'";
                v116 = 770;
                llvm::Twine::str((llvm::Twine *)v114, &__p);
                if (v107 >= 0)
                  v75 = &__p;
                else
                  v75 = __p;
                v103 = 22;
                v104 = v70;
                v102 = v75;
                sub_1C5DF1730(&v102, &v103, &v90);
                if (v107 < 0)
                  operator delete(__p);
                *(_BYTE *)(v88 + 24) |= 1u;
                *(_QWORD *)v88 = v90;
                v90 = 0;
                goto LABEL_147;
              }
              if (v43)
                goto LABEL_92;
            }
            else
            {
              if (v43 || *(_DWORD *)(v30 + 16) == 3)
              {
                v54 = sub_1C484358C((uint64_t)&v117, 72, 3);
                *(_OWORD *)v54 = 0u;
                *(_OWORD *)(v54 + 16) = 0u;
                *(_QWORD *)(v54 + 64) = 0;
                *(_OWORD *)(v54 + 32) = 0u;
                *(_OWORD *)(v54 + 48) = 0u;
                *(_QWORD *)(v54 + 8) = v46;
                *(_QWORD *)v54 = v46[7];
                *(_QWORD *)(v54 + 40) = v42;
                *(_QWORD *)(v54 + 48) = v51;
                if (v43)
                {
                  *(_DWORD *)(v54 + 32) = 3;
                  v53 = v54;
                  goto LABEL_91;
                }
                v53 = v54;
              }
              else
              {
                v54 = sub_1C484358C((uint64_t)&v117, 56, 3);
                v53 = 0;
                *(_OWORD *)v54 = 0u;
                *(_OWORD *)(v54 + 16) = 0u;
                *(_OWORD *)(v54 + 32) = 0u;
                *(_QWORD *)(v54 + 48) = 0;
                *(_QWORD *)(v54 + 8) = v46;
                *(_QWORD *)v54 = v46[7];
                *(_QWORD *)(v54 + 40) = v42;
                *(_QWORD *)(v54 + 48) = v51;
              }
              *(_DWORD *)(v54 + 32) = *(_DWORD *)(v30 + 16);
              *(_OWORD *)(v54 + 16) = *(_OWORD *)v30;
LABEL_91:
              v46[7] = v54;
              if (v43)
              {
LABEL_92:
                v55 = memchr(v52, 47, v43);
                if (v55)
                {
                  v45 = v55 - v52;
                  goto LABEL_95;
                }
              }
            }
            v45 = -1;
LABEL_95:
            v46 = (_QWORD *)v53;
            v42 = v52;
            if (!v43)
              goto LABEL_96;
            continue;
          }
        }
      }
LABEL_97:
      v30 += 48;
    }
    while (v30 != v89);
  }
  v114[0] = v115;
  v114[1] = (void *)0x800000000;
  v109 = &v111;
  v111 = (char *)v94;
  v110 = 0x600000001;
  v56 = 1;
  do
  {
    while (1)
    {
      v57 = *((_QWORD *)v109 + v56 - 1);
      if (*(_BYTE *)(v57 + 64))
        break;
      for (i = *(uint64_t **)(v57 + 56); i; i = (uint64_t *)*i)
      {
        if (!*((_BYTE *)i + 24))
        {
          if (v56 >= HIDWORD(v110))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)&v111, v56 + 1, 8);
            v56 = v110;
          }
          *((_QWORD *)v109 + v56) = i;
          v56 = v110 + 1;
          LODWORD(v110) = v110 + 1;
        }
      }
      *(_BYTE *)(v57 + 64) = 1;
      if (!v56)
        goto LABEL_114;
    }
    LODWORD(v110) = v56 - 1;
    for (j = *(uint64_t **)(v57 + 56); j; j = (uint64_t *)*j)
      sub_1C61D55E4((uint64_t)v114, j[2], *((_DWORD *)j + 8), j[5], j[6]);
    llvm::cas::TreeProxy::create((llvm::cas::TreeProxy::Builder *)v101, (_BYTE *)v114[0], LODWORD(v114[1]), (uint64_t)&__p);
    LODWORD(v114[1]) = 0;
    if ((v108 & 1) != 0)
    {
      v69 = __p;
      *(_BYTE *)(v88 + 24) |= 1u;
      *(_QWORD *)v88 = v69;
      goto LABEL_131;
    }
    v59 = *(unsigned __int8 *)(v57 + 24);
    *(_QWORD *)(v57 + 16) = v106;
    if (!v59)
      *(_BYTE *)(v57 + 24) = 1;
    v56 = v110;
  }
  while ((_DWORD)v110);
LABEL_114:
  v61 = v95;
  (*(void (**)(void **__return_ptr, llvm::cas::ObjectStore *, uint64_t))(*(_QWORD *)a2 + 48))(&__p, a2, v95);
  if ((v106 & 1) != 0)
    v62 = 0;
  else
    v62 = __p;
  *(_QWORD *)v88 = a2;
  *(_QWORD *)(v88 + 8) = v61;
  *(_QWORD *)(v88 + 16) = v62;
  *(_BYTE *)(v88 + 24) &= ~1u;
LABEL_131:
  if (v109 != &v111)
    free(v109);
  if (v114[0] != v115)
    free(v114[0]);
LABEL_147:
  sub_1C4926AE8((uint64_t)&v117);
}

void sub_1C505D34C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = (__int128 *)*a1;
    v4 = *a1 + 48 * v2;
    do
    {
      v5 = *v3;
      *(_DWORD *)(a2 + 16) = *((_DWORD *)v3 + 4);
      *(_OWORD *)a2 = v5;
      v6 = *(__int128 *)((char *)v3 + 24);
      *(_QWORD *)(a2 + 40) = *((_QWORD *)v3 + 5);
      *(_OWORD *)(a2 + 24) = v6;
      *((_QWORD *)v3 + 4) = 0;
      *((_QWORD *)v3 + 5) = 0;
      *((_QWORD *)v3 + 3) = 0;
      v3 += 3;
      a2 += 48;
    }
    while (v3 != (__int128 *)v4);
    v7 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v7)
    {
      v8 = (__int128 *)*a1;
      v9 = 3 * v7;
      do
      {
        if (SHIBYTE(v8[v9 - 1]) < 0)
          operator delete(*((void **)&v8[v9 - 1] - 1));
        v9 -= 3;
      }
      while (v9 * 16);
    }
  }
}

void sub_1C505D3E0(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int16 v21;

  v7 = *a1;
  v8 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 != 3)
  {
    v9 = *(_QWORD *)(a2 + 8);
    v10 = (uint64_t *)a1[1];
    v12 = *v10;
    v11 = v10[1];
    v18 = v12;
    v19 = v11;
    v20 = *(_OWORD *)(a2 + 16);
    v21 = 1285;
    v13 = v7;
    v14 = 1;
LABEL_6:
    llvm::cas::HierarchicalTreeBuilder::pushImpl(v13, v9, v14, v8, (uint64_t)&v18);
    goto LABEL_3;
  }
  if ((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 80))(*a3, a3[2]) == 1)
  {
    v15 = (uint64_t *)a1[1];
    v17 = *v15;
    v16 = v15[1];
    v18 = v17;
    v19 = v16;
    v20 = *(_OWORD *)(a2 + 16);
    v21 = 1285;
    v13 = v7;
    v9 = 0;
    v14 = 0;
    v8 = 3;
    goto LABEL_6;
  }
LABEL_3:
  *a4 = 0;
}

void sub_1C505D4AC(__int128 *a1, __int128 *a2, unint64_t a3, __int128 *a4, uint64_t a5, __n128 a6)
{
  __int128 *v6;
  __int128 *v7;
  char v8;
  int v9;
  size_t v10;
  size_t v11;
  char v12;
  int v13;
  size_t v14;
  size_t v15;
  size_t v16;
  const void *v17;
  char *v18;
  int v19;
  unint64_t v23;
  __int128 *v24;
  unint64_t v25;
  __int128 *v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  char v30;
  int v31;
  size_t v32;
  size_t v33;
  char v34;
  int v35;
  size_t v36;
  size_t v37;
  size_t v38;
  const void *v39;
  const void *v40;
  int v41;
  size_t v42;
  __int128 *v43;
  char v44;
  uint64_t i;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  char v49;
  int v50;
  size_t v51;
  size_t v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const void *v57;
  int v58;
  __int128 *v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  __int128 *v65;
  char v66;
  int v67;
  size_t v68;
  size_t v69;
  char v70;
  int v71;
  size_t v72;
  size_t v73;
  size_t v74;
  const void *v75;
  const void *v76;
  int v77;
  __int128 v78;
  void **v79;
  __int128 v80;
  __int128 v81;
  void **v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  __int128 v87;
  __int128 v88;
  __int128 *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  __int128 *v95;
  __int128 v96;
  void **v97;
  __int128 v98;
  unint64_t v99;
  void **v100;
  __int128 v102;
  __int128 v103;
  int v104;
  int v105;
  __int128 v106;
  uint64_t v107;
  _QWORD v108[3];

  v108[2] = *MEMORY[0x1E0C80C00];
  if (a3 < 2)
    return;
  v6 = a2;
  v7 = a1;
  if (a3 == 2)
  {
    v8 = *((_BYTE *)a2 - 1);
    v9 = v8;
    v10 = v8 & 0x7F;
    if (v9 >= 0)
      v11 = v10;
    else
      v11 = *((_QWORD *)a2 - 2);
    v12 = *((_BYTE *)a1 + 47);
    v13 = v12;
    v14 = v12 & 0x7F;
    if (v13 >= 0)
      v15 = v14;
    else
      v15 = *((_QWORD *)a1 + 4);
    if (v15 >= v11)
      v16 = v11;
    else
      v16 = v15;
    if (v16
      && (v13 >= 0 ? (v17 = (char *)a1 + 24) : (v17 = (const void *)*((_QWORD *)a1 + 3)),
          v9 >= 0 ? (v18 = (char *)v6 - 24) : (v18 = (char *)*((_QWORD *)v6 - 3)),
          (v19 = memcmp(v18, v17, v16)) != 0))
    {
      if ((v19 & 0x80000000) == 0)
        return;
    }
    else if (v11 == v15)
    {
      if (!*((_BYTE *)v6 - 40) || *((_BYTE *)v7 + 8))
        return;
    }
    else if (v11 >= v15)
    {
      return;
    }
    v89 = v6 - 3;
    v103 = *v7;
    v105 = *((_DWORD *)v7 + 4);
    v90 = *((_QWORD *)v7 + 3);
    v108[0] = *((_QWORD *)v7 + 4);
    *(_QWORD *)((char *)v108 + 7) = *(_QWORD *)((char *)v7 + 39);
    *((_QWORD *)v7 + 4) = 0;
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 3) = 0;
    v91 = *(v6 - 3);
    *((_DWORD *)v7 + 4) = *((_DWORD *)v6 - 8);
    *v7 = v91;
    v92 = *((_QWORD *)v6 - 1);
    *(__int128 *)((char *)v7 + 24) = *(__int128 *)((char *)v6 - 24);
    *((_QWORD *)v7 + 5) = v92;
    *v89 = v103;
    *((_DWORD *)v89 + 4) = v105;
    *((_QWORD *)v6 - 3) = v90;
    *((_QWORD *)v6 - 2) = v108[0];
    *(_QWORD *)((char *)v6 - 9) = *(_QWORD *)((char *)v108 + 7);
    *((_BYTE *)v6 - 1) = v13;
    return;
  }
  if ((uint64_t)a3 <= 0)
  {
    if (a1 == a2)
      return;
    v26 = a1 + 3;
    if (a1 + 3 == a2)
      return;
    v27 = 0;
    v28 = a1;
    while (1)
    {
      v29 = v28;
      v28 = v26;
      v30 = *((_BYTE *)v29 + 95);
      v31 = v30;
      v32 = v30 & 0x7F;
      if (v31 >= 0)
        v33 = v32;
      else
        v33 = *((_QWORD *)v29 + 10);
      v34 = *((_BYTE *)v29 + 47);
      v35 = v34;
      v36 = v34 & 0x7F;
      if (v35 >= 0)
        v37 = v36;
      else
        v37 = *((_QWORD *)v29 + 4);
      if (v37 >= v33)
        v38 = v33;
      else
        v38 = v37;
      if (v38
        && (v35 >= 0 ? (v39 = (char *)v29 + 24) : (v39 = (const void *)*((_QWORD *)v29 + 3)),
            v31 >= 0 ? (v40 = (char *)v29 + 72) : (v40 = (const void *)*((_QWORD *)v29 + 9)),
            (v41 = memcmp(v40, v39, v38)) != 0))
      {
        if ((v41 & 0x80000000) == 0)
          goto LABEL_89;
      }
      else if (v33 == v37)
      {
        if (!*((_BYTE *)v29 + 56) || *((_BYTE *)v29 + 8))
          goto LABEL_89;
      }
      else if (v33 >= v37)
      {
        goto LABEL_89;
      }
      v102 = *v28;
      v104 = *((_DWORD *)v28 + 4);
      v107 = *((_QWORD *)v29 + 11);
      v106 = *(__int128 *)((char *)v29 + 72);
      *((_QWORD *)v29 + 10) = 0;
      *((_QWORD *)v29 + 11) = 0;
      *((_QWORD *)v29 + 9) = 0;
      if (v107 >= 0)
        v42 = HIBYTE(v107) & 0x7F;
      else
        v42 = *((_QWORD *)&v106 + 1);
      if (v107 >= 0)
        v43 = &v106;
      else
        v43 = (__int128 *)v106;
      v44 = *((_BYTE *)v28 + 47);
      for (i = v27; ; i -= 48)
      {
        v46 = (uint64_t)v7 + i;
        *(_OWORD *)(v46 + 48) = *(__int128 *)((char *)v7 + i);
        *(_DWORD *)(v46 + 64) = *(_DWORD *)((char *)v7 + i + 16);
        v47 = (void **)((char *)v7 + i + 72);
        if (v44 < 0)
          operator delete(*v47);
        *(_OWORD *)v47 = *(_OWORD *)(v46 + 24);
        *(_QWORD *)((char *)v7 + i + 88) = *(_QWORD *)(v46 + 40);
        *(_BYTE *)(v46 + 47) = 0;
        *(_BYTE *)(v46 + 24) = 0;
        if (!i)
        {
          v59 = v7;
          goto LABEL_88;
        }
        v48 = (uint64_t)v7 + i;
        v49 = *((_BYTE *)v7 + i - 1);
        v50 = v49;
        v51 = v49 & 0x7F;
        if (v50 >= 0)
          v52 = v51;
        else
          v52 = *(_QWORD *)((char *)v7 + i - 16);
        if (v52 >= v42)
          v53 = v42;
        else
          v53 = v52;
        if (v53)
        {
          v56 = *(_QWORD *)(v48 - 24);
          v54 = v48 - 24;
          v55 = v56;
          v57 = (const void *)(v50 >= 0 ? v54 : v55);
          v58 = memcmp(v43, v57, v53);
          if (v58)
          {
            if ((v58 & 0x80000000) == 0)
              goto LABEL_87;
            goto LABEL_85;
          }
        }
        if (v42 == v52)
          break;
        if (v42 >= v52)
          goto LABEL_87;
LABEL_85:
        v44 = 0;
      }
      if (BYTE8(v102) && !*((_BYTE *)v7 + i - 40))
        goto LABEL_85;
LABEL_87:
      v59 = (__int128 *)((char *)v7 + i);
LABEL_88:
      *v59 = v102;
      *((_DWORD *)v59 + 4) = v104;
      v60 = (uint64_t)v7 + i;
      *(_OWORD *)(v60 + 24) = v106;
      *(_QWORD *)(v60 + 40) = v107;
      v6 = a2;
LABEL_89:
      v26 = v28 + 3;
      v27 += 48;
      if (v28 + 3 == v6)
        return;
    }
  }
  v23 = a3 >> 1;
  v24 = &a1[3 * (a3 >> 1)];
  v25 = a3 >> 1;
  if ((uint64_t)a3 > a5)
  {
    sub_1C505D4AC(a1, v24, v25, a4, a5);
    sub_1C505D4AC(&v7[3 * (a3 >> 1)], v6, a3 - (a3 >> 1), a4, a5);
    sub_1C505E154((char *)v7, &v7[3 * (a3 >> 1)], v6, a3 >> 1, a3 - (a3 >> 1), a4, a5);
    return;
  }
  v61 = sub_1C505DB2C(a1, v24, v25, (uint64_t)a4, a6);
  v62 = (uint64_t)&a4[3 * v23];
  sub_1C505DB2C(&v7[3 * (a3 >> 1)], v6, a3 - (a3 >> 1), v62, v61);
  v63 = &a4[3 * a3];
  v64 = v62;
  v65 = a4;
  while ((__int128 *)v64 != v63)
  {
    v66 = *(_BYTE *)(v64 + 47);
    v67 = v66;
    v68 = v66 & 0x7F;
    if (v67 >= 0)
      v69 = v68;
    else
      v69 = *(_QWORD *)(v64 + 32);
    v70 = *((_BYTE *)v65 + 47);
    v71 = v70;
    v72 = v70 & 0x7F;
    if (v71 >= 0)
      v73 = v72;
    else
      v73 = *((_QWORD *)v65 + 4);
    if (v73 >= v69)
      v74 = v69;
    else
      v74 = v73;
    if (v74
      && (v71 >= 0 ? (v75 = (char *)v65 + 24) : (v75 = (const void *)*((_QWORD *)v65 + 3)),
          v67 >= 0 ? (v76 = (const void *)(v64 + 24)) : (v76 = *(const void **)(v64 + 24)),
          (v77 = memcmp(v76, v75, v74)) != 0))
    {
      if ((v77 & 0x80000000) == 0)
        goto LABEL_119;
    }
    else if (v69 == v73)
    {
      if (!*(_BYTE *)(v64 + 8) || *((_BYTE *)v65 + 8))
      {
LABEL_119:
        v81 = *v65;
        *((_DWORD *)v7 + 4) = *((_DWORD *)v65 + 4);
        *v7 = v81;
        v82 = (void **)v7 + 3;
        if (*((char *)v7 + 47) < 0)
          operator delete(*v82);
        v83 = *(__int128 *)((char *)v65 + 24);
        *((_QWORD *)v7 + 5) = *((_QWORD *)v65 + 5);
        *(_OWORD *)v82 = v83;
        *((_BYTE *)v65 + 47) = 0;
        *((_BYTE *)v65 + 24) = 0;
        v65 += 3;
        goto LABEL_122;
      }
    }
    else if (v69 >= v73)
    {
      goto LABEL_119;
    }
    v78 = *(_OWORD *)v64;
    *((_DWORD *)v7 + 4) = *(_DWORD *)(v64 + 16);
    *v7 = v78;
    v79 = (void **)v7 + 3;
    if (*((char *)v7 + 47) < 0)
      operator delete(*v79);
    v80 = *(_OWORD *)(v64 + 24);
    *((_QWORD *)v7 + 5) = *(_QWORD *)(v64 + 40);
    *(_OWORD *)v79 = v80;
    *(_BYTE *)(v64 + 47) = 0;
    *(_BYTE *)(v64 + 24) = 0;
    v64 += 48;
LABEL_122:
    v7 += 3;
    if (v65 == (__int128 *)v62)
    {
      if ((__int128 *)v64 != v63)
      {
        v84 = 0;
        do
        {
          v85 = v64 + v84 * 16;
          v86 = &v7[v84];
          v87 = *(_OWORD *)(v64 + v84 * 16);
          *((_DWORD *)v86 + 4) = *(_DWORD *)(v64 + v84 * 16 + 16);
          *v86 = v87;
          if (SHIBYTE(v7[v84 + 2]) < 0)
            operator delete(*((void **)v86 + 3));
          v88 = *(_OWORD *)(v85 + 24);
          *((_QWORD *)v86 + 5) = *(_QWORD *)(v85 + 40);
          *(__int128 *)((char *)v86 + 24) = v88;
          *(_BYTE *)(v85 + 47) = 0;
          *(_BYTE *)(v85 + 24) = 0;
          v84 += 3;
        }
        while ((__int128 *)(v85 + 48) != v63);
      }
      goto LABEL_136;
    }
  }
  if (v65 != (__int128 *)v62)
  {
    v93 = 0;
    do
    {
      v94 = &v7[v93];
      v95 = &v65[v93];
      v96 = v65[v93];
      *((_DWORD *)v94 + 4) = v65[v93 + 1];
      *v94 = v96;
      v97 = (void **)&v7[v93 + 1] + 1;
      if (SHIBYTE(v7[v93 + 2]) < 0)
        operator delete(*v97);
      v98 = *(__int128 *)((char *)v95 + 24);
      *((_QWORD *)&v7[v93 + 2] + 1) = *((_QWORD *)v95 + 5);
      *(_OWORD *)v97 = v98;
      *((_BYTE *)v95 + 47) = 0;
      *((_BYTE *)v95 + 24) = 0;
      v93 += 3;
    }
    while (v95 + 3 != (__int128 *)v62);
  }
LABEL_136:
  if (a4)
  {
    v99 = a3;
    v100 = (void **)a4 + 3;
    do
    {
      if (*((char *)v100 + 23) < 0)
        operator delete(*v100);
      v100 += 6;
      --v99;
    }
    while (v99);
  }
}

__n128 sub_1C505DB2C(__int128 *a1, __int128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v5;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  _QWORD *v10;
  __int128 *v11;
  char v12;
  int v13;
  size_t v14;
  size_t v15;
  char v16;
  int v17;
  size_t v18;
  size_t v19;
  size_t v20;
  const void *v21;
  _QWORD *v22;
  int v23;
  __int128 v24;
  __int128 *v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 *v28;
  _OWORD *v29;
  char v30;
  int v31;
  size_t v32;
  size_t v33;
  char v34;
  int v35;
  size_t v36;
  size_t v37;
  size_t v38;
  const void *v39;
  const void *v40;
  int v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  size_t v47;
  size_t v48;
  char v49;
  int v50;
  size_t v51;
  size_t v52;
  size_t v53;
  const void *v54;
  char *v55;
  int v56;
  uint64_t v57;
  void **v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  __int128 *v67;
  char v68;
  int v69;
  size_t v70;
  size_t v71;
  char v72;
  int v73;
  size_t v74;
  size_t v75;
  size_t v76;
  const void *v77;
  const void *v78;
  int v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 *v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  __int128 *v91;
  __int128 v92;
  _OWORD *v94;

  if (!a3)
    return result;
  v5 = a4;
  v7 = a2;
  v8 = a1;
  if (a3 == 2)
  {
    v11 = a2 - 3;
    v12 = *((_BYTE *)a2 - 1);
    v13 = v12;
    v14 = v12 & 0x7F;
    if (v13 >= 0)
      v15 = v14;
    else
      v15 = *((_QWORD *)a2 - 2);
    v16 = *((_BYTE *)a1 + 47);
    v17 = v16;
    v18 = v16 & 0x7F;
    if (v17 >= 0)
      v19 = v18;
    else
      v19 = *((_QWORD *)a1 + 4);
    if (v19 >= v15)
      v20 = v15;
    else
      v20 = v19;
    if (v20
      && (v17 >= 0 ? (v21 = (char *)a1 + 24) : (v21 = (const void *)*((_QWORD *)a1 + 3)),
          v13 >= 0 ? (v22 = (_QWORD *)v7 - 3) : (v22 = (_QWORD *)*((_QWORD *)v7 - 3)),
          (v23 = memcmp(v22, v21, v20)) != 0))
    {
      if (v23 < 0)
        goto LABEL_93;
    }
    else if (v15 == v19)
    {
      if (*((_BYTE *)v7 - 40) && !*((_BYTE *)v8 + 8))
        goto LABEL_93;
    }
    else if (v15 < v19)
    {
LABEL_93:
      v62 = *v11;
      *(_DWORD *)(v5 + 16) = *((_DWORD *)v7 - 8);
      *(_OWORD *)v5 = v62;
      v63 = *(__int128 *)((char *)v7 - 24);
      *(_QWORD *)(v5 + 40) = *((_QWORD *)v7 - 1);
      *(_OWORD *)(v5 + 24) = v63;
      *((_QWORD *)v7 - 2) = 0;
      *((_QWORD *)v7 - 1) = 0;
      *((_QWORD *)v7 - 3) = 0;
      v64 = *v8;
      *(_DWORD *)(v5 + 64) = *((_DWORD *)v8 + 4);
      *(_OWORD *)(v5 + 48) = v64;
      v10 = (_QWORD *)v8 + 3;
      result = *(__n128 *)((char *)v8 + 24);
      v65 = *((_QWORD *)v8 + 5);
LABEL_128:
      *(_QWORD *)(v5 + 88) = v65;
      *(__n128 *)(v5 + 72) = result;
      goto LABEL_129;
    }
    v86 = *v8;
    *(_DWORD *)(v5 + 16) = *((_DWORD *)v8 + 4);
    *(_OWORD *)v5 = v86;
    v87 = *(__int128 *)((char *)v8 + 24);
    *(_QWORD *)(v5 + 40) = *((_QWORD *)v8 + 5);
    *(_OWORD *)(v5 + 24) = v87;
    *((_QWORD *)v8 + 4) = 0;
    *((_QWORD *)v8 + 5) = 0;
    *((_QWORD *)v8 + 3) = 0;
    v88 = *v11;
    *(_DWORD *)(v5 + 64) = *((_DWORD *)v7 - 8);
    *(_OWORD *)(v5 + 48) = v88;
    v10 = (_QWORD *)v7 - 3;
    result = *(__n128 *)((char *)v7 - 24);
    v65 = *((_QWORD *)v7 - 1);
    goto LABEL_128;
  }
  if (a3 == 1)
  {
    v9 = *a1;
    *(_DWORD *)(a4 + 16) = *((_DWORD *)a1 + 4);
    *(_OWORD *)a4 = v9;
    v10 = (_QWORD *)a1 + 3;
    result = *(__n128 *)((char *)a1 + 24);
    *(_QWORD *)(a4 + 40) = *((_QWORD *)a1 + 5);
    *(__n128 *)(a4 + 24) = result;
LABEL_129:
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    v66 = &a1[3 * (a3 >> 1)];
    sub_1C505D4AC(a1, v66, a3 >> 1, a4, a3 >> 1);
    sub_1C505D4AC(&v8[3 * (a3 >> 1)], v7, a3 - (a3 >> 1), v5 + 48 * (a3 >> 1), a3 - (a3 >> 1));
    v67 = &v8[3 * (a3 >> 1)];
    while (1)
    {
      if (v67 == v7)
      {
        if (v8 != v66)
        {
          v89 = 0;
          do
          {
            v90 = v5 + v89 * 16;
            v91 = &v8[v89];
            v92 = v8[v89];
            *(_DWORD *)(v90 + 16) = v8[v89 + 1];
            *(_OWORD *)v90 = v92;
            result = *(__n128 *)((char *)&v8[v89 + 1] + 8);
            *(_QWORD *)(v90 + 40) = *((_QWORD *)&v8[v89 + 2] + 1);
            *(__n128 *)(v90 + 24) = result;
            *((_QWORD *)v91 + 4) = 0;
            *((_QWORD *)v91 + 5) = 0;
            *((_QWORD *)v91 + 3) = 0;
            v89 += 3;
          }
          while (v91 + 3 != v66);
        }
        return result;
      }
      v68 = *((_BYTE *)v67 + 47);
      v69 = v68;
      v70 = v68 & 0x7F;
      if (v69 >= 0)
        v71 = v70;
      else
        v71 = *((_QWORD *)v67 + 4);
      v72 = *((_BYTE *)v8 + 47);
      v73 = v72;
      v74 = v72 & 0x7F;
      if (v73 >= 0)
        v75 = v74;
      else
        v75 = *((_QWORD *)v8 + 4);
      if (v75 >= v71)
        v76 = v71;
      else
        v76 = v75;
      if (v76
        && (v73 >= 0 ? (v77 = (char *)v8 + 24) : (v77 = (const void *)*((_QWORD *)v8 + 3)),
            v69 >= 0 ? (v78 = (char *)v67 + 24) : (v78 = (const void *)*((_QWORD *)v67 + 3)),
            (v79 = memcmp(v78, v77, v76)) != 0))
      {
        if ((v79 & 0x80000000) == 0)
          goto LABEL_120;
      }
      else if (v71 == v75)
      {
        if (!*((_BYTE *)v67 + 8) || *((_BYTE *)v8 + 8))
        {
LABEL_120:
          v81 = *v8;
          *(_DWORD *)(v5 + 16) = *((_DWORD *)v8 + 4);
          *(_OWORD *)v5 = v81;
          result = *(__n128 *)((char *)v8 + 24);
          *(_QWORD *)(v5 + 40) = *((_QWORD *)v8 + 5);
          *(__n128 *)(v5 + 24) = result;
          *((_QWORD *)v8 + 4) = 0;
          *((_QWORD *)v8 + 5) = 0;
          *((_QWORD *)v8 + 3) = 0;
          v8 += 3;
          goto LABEL_121;
        }
      }
      else if (v71 >= v75)
      {
        goto LABEL_120;
      }
      v80 = *v67;
      *(_DWORD *)(v5 + 16) = *((_DWORD *)v67 + 4);
      *(_OWORD *)v5 = v80;
      result = *(__n128 *)((char *)v67 + 24);
      *(_QWORD *)(v5 + 40) = *((_QWORD *)v67 + 5);
      *(__n128 *)(v5 + 24) = result;
      *((_QWORD *)v67 + 4) = 0;
      *((_QWORD *)v67 + 5) = 0;
      *((_QWORD *)v67 + 3) = 0;
      v67 += 3;
LABEL_121:
      v5 += 48;
      if (v8 == v66)
      {
        if (v67 != v7)
        {
          v82 = 0;
          do
          {
            v83 = &v67[v82];
            v84 = v5 + v82 * 16;
            v85 = v67[v82];
            *(_DWORD *)(v84 + 16) = v67[v82 + 1];
            *(_OWORD *)v84 = v85;
            result = *(__n128 *)((char *)&v67[v82 + 1] + 8);
            *(_QWORD *)(v84 + 40) = *((_QWORD *)&v67[v82 + 2] + 1);
            *(__n128 *)(v84 + 24) = result;
            *((_QWORD *)v83 + 4) = 0;
            *((_QWORD *)v83 + 5) = 0;
            *((_QWORD *)v83 + 3) = 0;
            v82 += 3;
          }
          while (v83 + 3 != v7);
        }
        return result;
      }
    }
  }
  if (a1 == a2)
    return result;
  v24 = *a1;
  *(_DWORD *)(a4 + 16) = *((_DWORD *)a1 + 4);
  *(_OWORD *)a4 = v24;
  result = *(__n128 *)((char *)a1 + 24);
  *(_QWORD *)(a4 + 40) = *((_QWORD *)a1 + 5);
  *(__n128 *)(a4 + 24) = result;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 3) = 0;
  v25 = a1 + 3;
  if (a1 + 3 == a2)
    return result;
  v26 = 0;
  v27 = (_OWORD *)a4;
  do
  {
    v28 = v25;
    v29 = v27 + 3;
    v30 = *((_BYTE *)v8 + 95);
    v31 = v30;
    v32 = v30 & 0x7F;
    if (v31 >= 0)
      v33 = v32;
    else
      v33 = *((_QWORD *)v8 + 10);
    v34 = *((_BYTE *)v27 + 47);
    v35 = v34;
    v36 = v34 & 0x7F;
    if (v35 >= 0)
      v37 = v36;
    else
      v37 = *((_QWORD *)v27 + 4);
    if (v37 >= v33)
      v38 = v33;
    else
      v38 = v37;
    if (v38
      && (v35 >= 0 ? (v39 = (char *)v27 + 24) : (v39 = (const void *)*((_QWORD *)v27 + 3)),
          v31 >= 0 ? (v40 = (char *)v8 + 72) : (v40 = (const void *)*((_QWORD *)v8 + 9)),
          (v41 = memcmp(v40, v39, v38)) != 0))
    {
      if ((v41 & 0x80000000) == 0)
        goto LABEL_81;
    }
    else if (v33 == v37)
    {
      if (!*((_BYTE *)v8 + 56) || *((_BYTE *)v27 + 8))
      {
LABEL_81:
        v59 = *v28;
        *((_DWORD *)v27 + 16) = *((_DWORD *)v28 + 4);
        *v29 = v59;
        result = *(__n128 *)((char *)v8 + 72);
        *((_QWORD *)v27 + 11) = *((_QWORD *)v8 + 11);
        *(__n128 *)((char *)v27 + 72) = result;
        *((_QWORD *)v8 + 10) = 0;
        *((_QWORD *)v8 + 11) = 0;
        *((_QWORD *)v8 + 9) = 0;
        goto LABEL_88;
      }
    }
    else if (v33 >= v37)
    {
      goto LABEL_81;
    }
    *v29 = *v27;
    *((_DWORD *)v27 + 16) = *((_DWORD *)v27 + 4);
    *(_OWORD *)((char *)v27 + 72) = *(_OWORD *)((char *)v27 + 24);
    *((_QWORD *)v27 + 11) = *((_QWORD *)v27 + 5);
    *((_QWORD *)v27 + 3) = 0;
    *((_QWORD *)v27 + 4) = 0;
    v42 = (_OWORD *)v5;
    *((_QWORD *)v27 + 5) = 0;
    if (v27 == (_OWORD *)v5)
      goto LABEL_85;
    v94 = v27 + 3;
    v43 = v26;
    while (1)
    {
      v44 = v5 + v43;
      v45 = *((_BYTE *)v8 + 95);
      v46 = v45;
      v47 = v45 & 0x7F;
      if (v46 >= 0)
        v48 = v47;
      else
        v48 = *((_QWORD *)v8 + 10);
      v49 = *(_BYTE *)(v44 - 1);
      v50 = v49;
      v51 = v49 & 0x7F;
      if (v50 >= 0)
        v52 = v51;
      else
        v52 = *(_QWORD *)(v44 - 16);
      if (v52 >= v48)
        v53 = v48;
      else
        v53 = v52;
      if (v53)
      {
        v54 = v50 >= 0 ? (const void *)(v44 - 24) : *(const void **)(v44 - 24);
        v55 = v46 >= 0 ? (char *)v8 + 72 : (char *)*((_QWORD *)v8 + 9);
        v56 = memcmp(v55, v54, v53);
        if (v56)
        {
          if ((v56 & 0x80000000) == 0)
            goto LABEL_82;
          goto LABEL_76;
        }
      }
      if (v48 != v52)
        break;
      if (!*((_BYTE *)v8 + 56) || *(_BYTE *)(v5 + v43 - 40))
      {
LABEL_82:
        v42 = v27;
        goto LABEL_84;
      }
LABEL_76:
      *(_OWORD *)v44 = *(_OWORD *)(v44 - 48);
      *(_DWORD *)(v44 + 16) = *(_DWORD *)(v44 - 32);
      v57 = v5 + v43;
      v58 = (void **)(v5 + v43 + 24);
      if (*(char *)(v5 + v43 + 47) < 0)
        operator delete(*v58);
      v27 -= 3;
      *(_OWORD *)v58 = *(_OWORD *)(v57 - 24);
      *(_QWORD *)(v5 + v43 + 40) = *(_QWORD *)(v57 - 8);
      *(_BYTE *)(v44 - 1) = 0;
      *(_BYTE *)(v57 - 24) = 0;
      v43 -= 48;
      if (!v43)
      {
        v42 = (_OWORD *)v5;
        goto LABEL_84;
      }
    }
    if (v48 < v52)
      goto LABEL_76;
    v42 = (_OWORD *)(v5 + v43);
LABEL_84:
    v7 = a2;
    v29 = v94;
LABEL_85:
    v60 = *v28;
    *((_DWORD *)v42 + 4) = *((_DWORD *)v28 + 4);
    *v42 = v60;
    v61 = (uint64_t)v42 + 24;
    if (*((char *)v42 + 47) < 0)
      operator delete(*(void **)v61);
    result = *(__n128 *)((char *)v8 + 72);
    *(_QWORD *)(v61 + 16) = *((_QWORD *)v8 + 11);
    *(__n128 *)v61 = result;
    *((_BYTE *)v8 + 95) = 0;
    *((_BYTE *)v8 + 72) = 0;
LABEL_88:
    v25 = v28 + 3;
    v26 += 48;
    v27 = v29;
    v8 = v28;
  }
  while (v28 + 3 != v7);
  return result;
}

void sub_1C505E154(char *a1, __int128 *a2, __int128 *a3, int64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  uint64_t v10;
  char v11;
  int v12;
  _QWORD *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  __int128 *v17;
  char v18;
  int v19;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  char *v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  unint64_t v34;
  char v35;
  int v36;
  __int128 *v37;
  size_t v38;
  size_t v39;
  size_t v40;
  unint64_t v41;
  __int128 *v42;
  char v43;
  int v44;
  size_t v45;
  size_t v46;
  size_t v47;
  __int128 *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  int v54;
  unsigned int v55;
  BOOL v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __int128 *v61;
  char v62;
  int v63;
  size_t v64;
  size_t v65;
  _QWORD *v66;
  unint64_t v67;
  char *v68;
  char v69;
  int v70;
  size_t v71;
  size_t v72;
  size_t v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  int v80;
  unsigned int v81;
  BOOL v82;
  int v83;
  __int128 *v84;
  uint64_t v85;
  char v86;
  __int128 v87;
  __int128 v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char v92;
  __int128 v93;
  __int128 v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 *v98;
  __int128 *v99;
  __int128 *v100;
  __int128 *v101;
  __int128 v102;
  __int128 v103;
  __int128 *v104;
  char v105;
  _BYTE *v106;
  char v107;
  int v108;
  size_t v109;
  size_t v110;
  int v111;
  size_t v112;
  size_t v113;
  size_t v114;
  char *v115;
  char *v116;
  int v117;
  __int128 v118;
  void **v119;
  _BYTE *v120;
  __int128 v121;
  __int128 v122;
  void **v123;
  __int128 v124;
  unint64_t v125;
  __int128 *v126;
  __int128 *v127;
  __int128 v128;
  __int128 v129;
  __int128 *v130;
  uint64_t v131;
  __int128 *v132;
  char v133;
  int v134;
  size_t v135;
  size_t v136;
  char v137;
  int v138;
  size_t v139;
  size_t v140;
  size_t v141;
  const void *v142;
  const void *v143;
  int v144;
  __int128 v145;
  void **v146;
  __int128 v147;
  __int128 v148;
  void **v149;
  __int128 v150;
  __int128 *v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  unint64_t v155;
  __int128 *v156;
  __int128 *v157;
  __int128 v158;
  void **v159;
  __int128 v160;
  uint64_t v161;
  __int128 *v162;
  __int128 *v163;
  __int128 v164;
  void **v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 *v170;
  const void **v174;
  __int128 *v175;
  int v176;
  int v177;
  uint64_t v178;
  char *v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  int v186;
  int v187;
  int v188;

  v178 = a5;
  if (!a5)
    return;
  while (a4 > a7 && v178 > a7)
  {
    if (!a4)
      return;
    v10 = 0;
    v11 = *((_BYTE *)a2 + 47);
    v12 = v11;
    v13 = (_QWORD *)a2 + 3;
    v14 = v11 & 0x7F;
    if (v12 >= 0)
      v15 = v14;
    else
      v15 = *((_QWORD *)a2 + 4);
    v16 = -a4;
    while (1)
    {
      v17 = (__int128 *)&a1[v10];
      v18 = a1[v10 + 47];
      v19 = v18;
      v20 = v18 & 0x7F;
      if (v19 >= 0)
        v21 = v20;
      else
        v21 = *(_QWORD *)&a1[v10 + 32];
      if (v21 >= v15)
        v22 = v15;
      else
        v22 = v21;
      if (v22)
      {
        v25 = *((_QWORD *)v17 + 3);
        v23 = (uint64_t)v17 + 24;
        v24 = v25;
        v26 = (const void *)(v19 >= 0 ? v23 : v24);
        v27 = v12 >= 0 ? (char *)a2 + 24 : (char *)*v13;
        v28 = memcmp(v27, v26, v22);
        if (v28)
        {
          if (v28 < 0)
            break;
          goto LABEL_30;
        }
      }
      if (v15 != v21)
      {
        if (v15 < v21)
          break;
        goto LABEL_30;
      }
      if (*((_BYTE *)a2 + 8) && !a1[v10 + 8])
        break;
LABEL_30:
      v10 += 48;
      if (__CFADD__(v16++, 1))
        return;
    }
    v30 = -v16;
    v179 = a1;
    v170 = (__int128 *)&a1[v10];
    if (-v16 >= v178)
    {
      if (v16 == -1)
      {
        v151 = (__int128 *)&a1[v10];
        v188 = *(_DWORD *)&a1[v10 + 16];
        v185 = *(_OWORD *)&a1[v10];
        v152 = *(_QWORD *)&a1[v10 + 24];
        *(_QWORD *)((char *)&v182 + 7) = *(_QWORD *)&a1[v10 + 39];
        *(_QWORD *)&v182 = *(_QWORD *)&a1[v10 + 32];
        *((_QWORD *)v151 + 4) = 0;
        *((_QWORD *)v151 + 5) = 0;
        *((_QWORD *)v151 + 3) = 0;
        v153 = *a2;
        *((_DWORD *)v151 + 4) = *((_DWORD *)a2 + 4);
        *v151 = v153;
        v154 = *(_OWORD *)v13;
        *((_QWORD *)v151 + 5) = *((_QWORD *)a2 + 5);
        *(__int128 *)((char *)v151 + 24) = v154;
        *a2 = v185;
        *((_DWORD *)a2 + 4) = v188;
        *((_QWORD *)a2 + 3) = v152;
        *((_QWORD *)a2 + 4) = v182;
        *(_QWORD *)((char *)a2 + 39) = *(_QWORD *)((char *)&v182 + 7);
        *((_BYTE *)a2 + 47) = v19;
        return;
      }
      if (v16 > 0)
        v30 = 1 - v16;
      v169 = v30 >> 1;
      v32 = (char *)a3;
      if (a3 == a2)
      {
LABEL_113:
        v58 = v169;
        v33 = (__int128 *)&a1[48 * v169 + v10];
        v59 = 0xAAAAAAAAAAAAAAABLL * ((v32 - (char *)a2) >> 4);
        goto LABEL_114;
      }
      v60 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
      v61 = (__int128 *)&a1[48 * v169 + v10];
      v62 = *((_BYTE *)v61 + 47);
      v63 = v62;
      v64 = v62 & 0x7F;
      v177 = v63;
      if (v63 >= 0)
        v65 = v64;
      else
        v65 = *((_QWORD *)v61 + 4);
      v175 = (__int128 *)&a1[48 * v169 + v10];
      v66 = (_QWORD *)v61 + 3;
      v32 = (char *)a2;
      while (2)
      {
        v67 = v60 >> 1;
        v68 = &v32[48 * (v60 >> 1)];
        v69 = v68[47];
        v70 = v69;
        v71 = v69 & 0x7F;
        if (v70 >= 0)
          v72 = v71;
        else
          v72 = *((_QWORD *)v68 + 4);
        if (v65 >= v72)
          v73 = v72;
        else
          v73 = v65;
        if (v73)
        {
          v74 = v177 >= 0 ? v66 : (_QWORD *)*v66;
          v75 = &v32[48 * v67];
          v78 = (_QWORD *)*((_QWORD *)v75 + 3);
          v76 = v75 + 24;
          v77 = v78;
          v79 = v70 >= 0 ? v76 : v77;
          v80 = memcmp(v79, v74, v73);
          if (v80)
          {
            v81 = (v80 >> 31) | 1;
            goto LABEL_106;
          }
        }
        if (v72 == v65)
        {
          if (v68[8])
            v82 = *((_BYTE *)v175 + 8) == 0;
          else
            v82 = 0;
          v83 = v82;
          a1 = v179;
        }
        else
        {
          if (v72 < v65)
            v81 = -1;
          else
            v81 = 1;
LABEL_106:
          a1 = v179;
          v83 = v81 >> 31;
        }
        if (v83)
          v60 += ~v67;
        else
          v60 >>= 1;
        if (v83)
          v32 = v68 + 48;
        if (!v60)
          goto LABEL_113;
        continue;
      }
    }
    if (v178 >= 0)
      v31 = v178;
    else
      v31 = v178 + 1;
    v168 = v31 >> 1;
    v32 = (char *)&a2[3 * (v31 >> 1)];
    v33 = a2;
    if (&a1[v10] != (char *)a2)
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - a1 - v10) >> 4);
      v35 = v32[47];
      v36 = v35;
      v33 = (__int128 *)&a1[v10];
      v37 = &a2[3 * v168];
      v174 = (const void **)v37 + 3;
      v38 = *((_QWORD *)v37 + 4);
      v39 = v35 & 0x7F;
      v176 = v36;
      if (v36 >= 0)
        v40 = v39;
      else
        v40 = v38;
      do
      {
        v41 = v34 >> 1;
        v42 = &v33[3 * (v34 >> 1)];
        v43 = *((_BYTE *)v42 + 47);
        v44 = v43;
        v45 = v43 & 0x7F;
        if (v44 >= 0)
          v46 = v45;
        else
          v46 = *((_QWORD *)v42 + 4);
        if (v46 >= v40)
          v47 = v40;
        else
          v47 = v46;
        if (v47
          && ((v48 = &v33[3 * v41], v51 = (const void *)*((_QWORD *)v48 + 3),
                                    v49 = (char *)v48 + 24,
                                    v50 = v51,
                                    v44 >= 0)
            ? (v52 = v49)
            : (v52 = v50),
              v176 >= 0 ? (v53 = v174) : (v53 = *v174),
              (v54 = memcmp(v53, v52, v47)) != 0))
        {
          v55 = (v54 >> 31) | 1;
        }
        else
        {
          if (v40 == v46)
          {
            if (v32[8])
              v56 = *((_BYTE *)v42 + 8) == 0;
            else
              v56 = 0;
            v57 = v56;
            goto LABEL_67;
          }
          if (v40 < v46)
            v55 = -1;
          else
            v55 = 1;
        }
        v57 = v55 >> 31;
LABEL_67:
        if (v57)
        {
          v34 >>= 1;
        }
        else
        {
          v33 = v42 + 3;
          v34 += ~v41;
        }
      }
      while (v34);
    }
    v58 = 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - v179 - v10) >> 4);
    v59 = v168;
LABEL_114:
    a1 = v32;
    if (v33 != a2)
    {
      a1 = (char *)v33;
      if (a2 != (__int128 *)v32)
      {
        v84 = v33 + 3;
        a1 = (char *)a2;
        while (1)
        {
          v186 = *((_DWORD *)v84 - 8);
          v183 = *(v84 - 3);
          v85 = *((_QWORD *)v84 - 3);
          *(_QWORD *)((char *)&v180 + 7) = *(_QWORD *)((char *)v84 - 9);
          *(_QWORD *)&v180 = *((_QWORD *)v84 - 2);
          v86 = *((_BYTE *)v84 - 1);
          *((_QWORD *)v84 - 3) = 0;
          *((_QWORD *)v84 - 2) = 0;
          *((_QWORD *)v84 - 1) = 0;
          v87 = *a2;
          *((_DWORD *)v84 - 8) = *((_DWORD *)a2 + 4);
          *(v84 - 3) = v87;
          v88 = *(__int128 *)((char *)a2 + 24);
          *((_QWORD *)v84 - 1) = *((_QWORD *)a2 + 5);
          *(__int128 *)((char *)v84 - 24) = v88;
          *a2 = v183;
          *((_DWORD *)a2 + 4) = v186;
          *((_QWORD *)a2 + 3) = v85;
          *(_QWORD *)((char *)a2 + 39) = *(_QWORD *)((char *)&v180 + 7);
          *((_QWORD *)a2 + 4) = v180;
          *((_BYTE *)a2 + 47) = v86;
          a2 += 3;
          if (a2 == (__int128 *)v32)
            break;
          if (v84 == (__int128 *)a1)
            a1 = (char *)a2;
          v84 += 3;
        }
        if (v84 != (__int128 *)a1)
        {
          v89 = (char *)v84;
          v90 = a1;
          do
          {
            while (1)
            {
              v187 = *((_DWORD *)v89 + 4);
              v184 = *(_OWORD *)v89;
              v91 = *((_QWORD *)v89 + 3);
              *(_QWORD *)&v181 = *((_QWORD *)v89 + 4);
              *(_QWORD *)((char *)&v181 + 7) = *(_QWORD *)(v89 + 39);
              v92 = v89[47];
              *((_QWORD *)v89 + 4) = 0;
              *((_QWORD *)v89 + 5) = 0;
              *((_QWORD *)v89 + 3) = 0;
              v93 = *(_OWORD *)a1;
              *((_DWORD *)v89 + 4) = *((_DWORD *)a1 + 4);
              *(_OWORD *)v89 = v93;
              v94 = *(_OWORD *)(a1 + 24);
              *((_QWORD *)v89 + 5) = *((_QWORD *)a1 + 5);
              *(_OWORD *)(v89 + 24) = v94;
              *(_OWORD *)a1 = v184;
              *((_DWORD *)a1 + 4) = v187;
              *((_QWORD *)a1 + 3) = v91;
              *((_QWORD *)a1 + 4) = v181;
              *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)&v181 + 7);
              a1[47] = v92;
              v89 += 48;
              a1 += 48;
              if (a1 == v32)
                break;
              if (v89 == v90)
                v90 = a1;
            }
            a1 = v90;
          }
          while (v89 != v90);
          a1 = (char *)v84;
        }
      }
    }
    a4 = -(uint64_t)(v58 + v16);
    v95 = v178 - v59;
    if ((uint64_t)(v58 + v59) >= (uint64_t)(v178 - (v58 + v59) - v16))
    {
      sub_1C505E154(a1, v32, a3, -(uint64_t)(v58 + v16), v178 - v59, a6, a7);
      v32 = (char *)v33;
      v95 = v59;
      a4 = v58;
      a3 = (__int128 *)a1;
      a1 = (char *)v170;
    }
    else
    {
      sub_1C505E154(v170, v33, a1, v58, v59, a6, a7);
    }
    v178 = v95;
    a2 = (__int128 *)v32;
    if (!v95)
      return;
  }
  if (a4 > v178)
  {
    if (a2 == a3)
      return;
    v96 = 0;
    v97 = 0;
    v98 = a6;
    v99 = a3;
    do
    {
      v100 = &a6[v96];
      v101 = &a2[v96];
      v102 = a2[v96];
      *((_DWORD *)v100 + 4) = a2[v96 + 1];
      *v100 = v102;
      v103 = *(__int128 *)((char *)&a2[v96 + 1] + 8);
      *((_QWORD *)v100 + 5) = *((_QWORD *)&a2[v96 + 2] + 1);
      *(__int128 *)((char *)v100 + 24) = v103;
      *((_QWORD *)v101 + 4) = 0;
      *((_QWORD *)v101 + 5) = 0;
      *((_QWORD *)v101 + 3) = 0;
      ++v97;
      v96 += 3;
    }
    while (v101 + 3 != a3);
    if (!(v96 * 16))
      goto LABEL_221;
    v104 = &a6[v96];
    while (1)
    {
      if (a2 == (__int128 *)a1)
      {
        if (v104 != a6)
        {
          v155 = 0;
          do
          {
            v156 = &v104[v155];
            v157 = &v99[v155];
            v158 = v104[v155 - 3];
            *((_DWORD *)v157 - 8) = v104[v155 - 2];
            *(v157 - 3) = v158;
            v159 = (void **)&v99[v155 - 1] - 1;
            if (SHIBYTE(v99[v155 - 1]) < 0)
              operator delete(*v159);
            v160 = *(__int128 *)((char *)v156 - 24);
            *((_QWORD *)&v99[v155 - 1] + 1) = *((_QWORD *)v156 - 1);
            *(_OWORD *)v159 = v160;
            *((_BYTE *)v156 - 1) = 0;
            *((_BYTE *)v156 - 24) = 0;
            v155 -= 3;
          }
          while (&v104[v155] != a6);
        }
        goto LABEL_221;
      }
      v106 = (char *)a2 - 1;
      v105 = *((_BYTE *)a2 - 1);
      v107 = *((_BYTE *)v104 - 1);
      v108 = v107;
      v109 = v107 & 0x7F;
      if (v108 >= 0)
        v110 = v109;
      else
        v110 = *((_QWORD *)v104 - 2);
      v111 = v105;
      v112 = v105 & 0x7F;
      if (v111 >= 0)
        v113 = v112;
      else
        v113 = *((_QWORD *)a2 - 2);
      if (v113 >= v110)
        v114 = v110;
      else
        v114 = v113;
      if (v114
        && (v111 >= 0 ? (v115 = (char *)a2 - 24) : (v115 = (char *)*((_QWORD *)a2 - 3)),
            v108 >= 0 ? (v116 = (char *)v104 - 24) : (v116 = (char *)*((_QWORD *)v104 - 3)),
            (v117 = memcmp(v116, v115, v114)) != 0))
      {
        if ((v117 & 0x80000000) == 0)
          goto LABEL_167;
      }
      else if (v110 == v113)
      {
        if (!*((_BYTE *)v104 - 40) || *((_BYTE *)a2 - 40))
        {
LABEL_167:
          v122 = *(v104 - 3);
          *((_DWORD *)v99 - 8) = *((_DWORD *)v104 - 8);
          *(v99 - 3) = v122;
          v123 = (void **)v99 - 3;
          if (*((char *)v99 - 1) < 0)
            operator delete(*v123);
          v120 = (char *)v104 - 24;
          v124 = *(__int128 *)((char *)v104 - 24);
          *((_QWORD *)v99 - 1) = *((_QWORD *)v104 - 1);
          *(_OWORD *)v123 = v124;
          v106 = (char *)v104 - 1;
          v104 -= 3;
          goto LABEL_170;
        }
      }
      else if (v110 >= v113)
      {
        goto LABEL_167;
      }
      v118 = *(a2 - 3);
      *((_DWORD *)v99 - 8) = *((_DWORD *)a2 - 8);
      *(v99 - 3) = v118;
      v119 = (void **)v99 - 3;
      if (*((char *)v99 - 1) < 0)
        operator delete(*v119);
      v120 = (char *)a2 - 24;
      v121 = *(__int128 *)((char *)a2 - 24);
      *((_QWORD *)v99 - 1) = *((_QWORD *)a2 - 1);
      *(_OWORD *)v119 = v121;
      a2 -= 3;
LABEL_170:
      *v106 = 0;
      *v120 = 0;
      v99 -= 3;
      if (v104 == a6)
        goto LABEL_221;
    }
  }
  if (a1 == (char *)a2)
    return;
  v125 = 0;
  v97 = 0;
  v98 = a6;
  do
  {
    v126 = &a6[v125 / 0x10];
    v127 = (__int128 *)&a1[v125];
    v128 = *(_OWORD *)&a1[v125];
    *((_DWORD *)v126 + 4) = *(_DWORD *)&a1[v125 + 16];
    *v126 = v128;
    v129 = *(_OWORD *)&a1[v125 + 24];
    *((_QWORD *)v126 + 5) = *(_QWORD *)&a1[v125 + 40];
    *(__int128 *)((char *)v126 + 24) = v129;
    *((_QWORD *)v127 + 4) = 0;
    *((_QWORD *)v127 + 5) = 0;
    *((_QWORD *)v127 + 3) = 0;
    ++v97;
    v125 += 48;
  }
  while (v127 + 3 != a2);
  if (!v125)
    goto LABEL_221;
  v130 = &a6[v125 / 0x10];
  v131 = (uint64_t)&a6[v125 / 0x10 - 3];
  v132 = a6;
  while (a2 != a3)
  {
    v133 = *((_BYTE *)a2 + 47);
    v134 = v133;
    v135 = v133 & 0x7F;
    if (v134 >= 0)
      v136 = v135;
    else
      v136 = *((_QWORD *)a2 + 4);
    v137 = *((_BYTE *)v132 + 47);
    v138 = v137;
    v139 = v137 & 0x7F;
    if (v138 >= 0)
      v140 = v139;
    else
      v140 = *((_QWORD *)v132 + 4);
    if (v140 >= v136)
      v141 = v136;
    else
      v141 = v140;
    if (v141
      && (v138 >= 0 ? (v142 = (char *)v132 + 24) : (v142 = (const void *)*((_QWORD *)v132 + 3)),
          v134 >= 0 ? (v143 = (char *)a2 + 24) : (v143 = (const void *)*((_QWORD *)a2 + 3)),
          (v144 = memcmp(v143, v142, v141)) != 0))
    {
      if ((v144 & 0x80000000) == 0)
        goto LABEL_204;
    }
    else if (v136 == v140)
    {
      if (!*((_BYTE *)a2 + 8) || *((_BYTE *)v132 + 8))
      {
LABEL_204:
        v148 = *v132;
        *((_DWORD *)a1 + 4) = *((_DWORD *)v132 + 4);
        *(_OWORD *)a1 = v148;
        v149 = (void **)(a1 + 24);
        if (a1[47] < 0)
          operator delete(*v149);
        v150 = *(__int128 *)((char *)v132 + 24);
        *((_QWORD *)a1 + 5) = *((_QWORD *)v132 + 5);
        *(_OWORD *)v149 = v150;
        *((_BYTE *)v132 + 47) = 0;
        *((_BYTE *)v132 + 24) = 0;
        v132 += 3;
        goto LABEL_207;
      }
    }
    else if (v136 >= v140)
    {
      goto LABEL_204;
    }
    v145 = *a2;
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)a1 = v145;
    v146 = (void **)(a1 + 24);
    if (a1[47] < 0)
      operator delete(*v146);
    v147 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v146 = v147;
    *((_BYTE *)a2 + 47) = 0;
    *((_BYTE *)a2 + 24) = 0;
    a2 += 3;
LABEL_207:
    a1 += 48;
    if (v130 == v132)
      goto LABEL_221;
  }
  if (v130 != v132)
  {
    v161 = 0;
    do
    {
      v162 = (__int128 *)&a1[v161 * 16];
      v163 = &v132[v161];
      v164 = v132[v161];
      *((_DWORD *)v162 + 4) = v132[v161 + 1];
      *v162 = v164;
      v165 = (void **)&a1[v161 * 16 + 24];
      if (a1[v161 * 16 + 47] < 0)
        operator delete(*v165);
      v166 = *(__int128 *)((char *)v163 + 24);
      *(_QWORD *)&a1[v161 * 16 + 40] = *((_QWORD *)v163 + 5);
      *(_OWORD *)v165 = v166;
      *((_BYTE *)v163 + 47) = 0;
      *((_BYTE *)v163 + 24) = 0;
      v161 += 3;
    }
    while ((__int128 *)v131 != v163);
  }
LABEL_221:
  if (v98)
  {
    v167 = (uint64_t)a6 + 24;
    do
    {
      if (*(char *)(v167 + 23) < 0)
        operator delete(*(void **)v167);
      v167 += 48;
      --v97;
    }
    while (v97);
  }
}

uint64_t sub_1C505EBBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = a3;
  v12 = a2;
  v13 = a4;
  v14 = a5;
  v6 = (_OWORD *)sub_1C47C0F60(a1, (unint64_t)&v11, 1);
  v7 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 8));
  v8 = v6[1];
  *v7 = *v6;
  v7[1] = v8;
  v9 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v9;
  return *(_QWORD *)a1 + 32 * v9 - 32;
}

void *sub_1C505EC24@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C505F510(a3, *(_QWORD *)(a1 + 8), a2);
}

void *sub_1C505EC34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C505F510(a3, *(_QWORD *)(a1 + 8), a2);
}

unint64_t sub_1C505EC44(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  size_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v8;
  unint64_t v9;
  void *v11;
  __int128 v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = xmmword_1C677F680;
  if (*(_QWORD *)(a2 + 16))
  {
    sub_1C50502AC((uint64_t)&v11, a2 + 8);
    v3 = v11;
    v4 = v12;
  }
  else
  {
    v4 = 0;
    v3 = v13;
  }
  v5 = (unint64_t *)llvm::cas::ThreadSafeHashMappedTrieBase::find(a1 + 16, v3, v4);
  if (v6 != -2 || v5 == 0)
  {
    v8 = 0;
  }
  else
  {
    v9 = atomic_load(v5 + 4);
    if (v9 == -1)
      v8 = 0;
    else
      v8 = v9;
  }
  if (v11 != v13)
    free(v11);
  return v8;
}

void sub_1C505ED1C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = a1;
}

uint64_t sub_1C505ED30@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, _QWORD)@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  if ((*(_BYTE *)a1 & 6) != 0)
  {
    v7 = (_QWORD *)(a1 + 16);
    v8 = *(unsigned int *)(a1 + 8);
    if (!*(_DWORD *)(a1 + 8))
      goto LABEL_8;
  }
  else
  {
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
    {
LABEL_8:
      *a4 = 0;
      return result;
    }
  }
  v9 = 8 * v8;
  while (1)
  {
    result = a2(a3, *v7);
    if (*a4)
      return result;
    ++v7;
    v9 -= 8;
    if (!v9)
      goto LABEL_8;
  }
}

uint64_t sub_1C505EDB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if ((*(_BYTE *)a2 & 6) != 0)
    v3 = a2 + 16;
  else
    v3 = *(_QWORD *)(a2 + 8);
  return *(_QWORD *)(v3 + 8 * a3);
}

uint64_t sub_1C505EDD4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)a2 & 6) != 0)
    return *(unsigned int *)(a2 + 8);
  else
    return *(_QWORD *)(a2 + 16);
}

void sub_1C505EDF0(uint64_t a1, llvm::raw_ostream *this)
{
  _DWORD *v4;
  uint64_t v5;

  v4 = (_DWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 6uLL)
  {
    *(_DWORD *)((char *)v4 + 3) = 540702821;
    *v4 = 1701080681;
    *((_QWORD *)this + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(this, "index: ", 7uLL);
  }
  llvm::cas::ThreadSafeHashMappedTrieBase::print((llvm::cas::ThreadSafeHashMappedTrieBase *)(a1 + 16), this);
  v5 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v5) > 8)
  {
    *(_BYTE *)(v5 + 8) = 32;
    *(_QWORD *)v5 = *(_QWORD *)"strings: ";
    *((_QWORD *)this + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(this, "strings: ", 9uLL);
  }
  llvm::cas::ThreadSafeHashMappedTrieBase::print((llvm::cas::ThreadSafeHashMappedTrieBase *)(a1 + 40), this);
}

_QWORD *sub_1C505EEBC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E813FBD8;
  v2 = (uint64_t)(a1 + 2);
  v3 = (uint64_t)(a1 + 34);
  sub_1C505F598((uint64_t)(a1 + 34));
  sub_1C4926AE8(v3);
  sub_1C4926AE8((uint64_t)(a1 + 21));
  sub_1C4926AE8((uint64_t)(a1 + 8));
  llvm::cas::ThreadSafeHashMappedTrieBase::destroyImpl((uint64_t)(a1 + 5), 0, v4);
  llvm::cas::ThreadSafeHashMappedTrieBase::destroyImpl(v2, 0, v5);
  return a1;
}

void sub_1C505EF30(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E813FBD8;
  v2 = (uint64_t)(a1 + 2);
  v3 = (uint64_t)(a1 + 34);
  sub_1C505F598((uint64_t)(a1 + 34));
  sub_1C4926AE8(v3);
  sub_1C4926AE8((uint64_t)(a1 + 21));
  sub_1C4926AE8((uint64_t)(a1 + 8));
  llvm::cas::ThreadSafeHashMappedTrieBase::destroyImpl((uint64_t)(a1 + 5), 0, v4);
  llvm::cas::ThreadSafeHashMappedTrieBase::destroyImpl(v2, 0, v5);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C505EFB4(uint64_t a1@<X0>, unint64_t a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *v6;
  uint64_t v7;
  int v8;
  __int128 *v9;
  __int128 v10;
  char v11;
  void *(**v12)(uint64_t, uint64_t);
  void *(*v13)(uint64_t, uint64_t);
  void *v14[3];
  _OWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v13 = sub_1C505F6E8;
  v14[0] = &v11;
  v12 = &v13;
  v6 = (__int128 *)llvm::cas::ThreadSafeHashMappedTrieBase::insert((unsigned __int16 *)(a1 + 16), 0, 0xFFFFFFFFuLL, a2, a3, (uint64_t (*)(uint64_t, _BYTE *, void *, size_t))sub_1C505F6AC, (uint64_t)&v12);
  v7 = *(_QWORD *)(a1 + 8);
  if (v8 == -2)
    v9 = v6;
  else
    v9 = 0;
  v13 = *(void *(**)(uint64_t, uint64_t))(a1 + 8);
  v14[0] = v15;
  v14[2] = (void *)32;
  v10 = *v9;
  v15[1] = v9[1];
  v15[0] = v10;
  v14[1] = (void *)32;
  *(_BYTE *)(a4 + 64) &= ~1u;
  *(_QWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_OWORD *)(a4 + 16) = xmmword_1C677F680;
  sub_1C4FE6ED8(a4 + 8, (uint64_t)v14);
  if (v14[0] != v15)
    free(v14[0]);
}

void sub_1C505F0B8(uint64_t a1@<X0>, unint64_t a2@<X1>, size_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, size_t a7@<X6>, uint64_t a8@<X8>)
{
  unint64_t *v14;
  int v15;
  unint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  size_t v25;
  unsigned __int8 *v26;
  unsigned __int8 v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  unsigned __int8 v31;
  void *__src;
  char v33;
  void **v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[7];

  v37[6] = *MEMORY[0x1E0C80C00];
  v35 = sub_1C505F6E8;
  v36 = (uint64_t)&v33;
  v34 = &v35;
  v14 = (unint64_t *)llvm::cas::ThreadSafeHashMappedTrieBase::insert((unsigned __int16 *)(a1 + 16), 0, 0xFFFFFFFFuLL, a2, a3, (uint64_t (*)(uint64_t, _BYTE *, void *, size_t))sub_1C505F6AC, (uint64_t)&v34);
  if (v15 == -2)
    v16 = v14;
  else
    v16 = 0;
  v35 = v37;
  v36 = 0x600000000;
  if (a5)
  {
    v17 = 0;
    v18 = 8 * a5;
    do
    {
      v19 = *a4;
      if (v17 >= HIDWORD(v36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, (uint64_t)v37, v17 + 1, 8);
        v17 = v36;
      }
      *((_QWORD *)v35 + v17) = v19;
      v17 = v36 + 1;
      LODWORD(v36) = v36 + 1;
      ++a4;
      v18 -= 8;
    }
    while (v18);
  }
  v20 = v16 + 4;
  v21 = atomic_load(v16 + 4);
  if (v21 == -1)
    goto LABEL_27;
  if (!v21)
  {
    while (1)
    {
      v21 = __ldaxr(v20);
      if (v21)
        break;
      if (!__stlxr(0xFFFFFFFFFFFFFFFFLL, v20))
      {
        v22 = 1;
        goto LABEL_15;
      }
    }
    v22 = 0;
    __clrex();
LABEL_15:
    if ((v22 & 1) != 0)
    {
      __src = a6;
      v23 = v35;
      v24 = v36;
      v25 = 8 * v36;
      v26 = (unsigned __int8 *)(a1 + 160);
      do
        v27 = __ldaxr(v26);
      while (__stxr(1u, v26));
      if ((v27 & 1) != 0)
      {
        do
          v31 = __ldaxr(v26);
        while (__stxr(1u, v26) | v31 & 1);
      }
      v28 = sub_1C484358C(a1 + 64, a7 + v25 + 17, 3);
      v21 = v28;
      atomic_store(0, (unsigned __int8 *)(a1 + 160));
      *(_QWORD *)v28 = (unint64_t)v16 | 2;
      *(_DWORD *)(v28 + 8) = v24;
      *(_DWORD *)(v28 + 12) = a7;
      v29 = v28 + 16;
      if ((_DWORD)v24)
        memmove((void *)(v28 + 16), v23, v25);
      v30 = (void *)(v29 + 8 * v24);
      if (a7)
        memmove(v30, __src, a7);
      *((_BYTE *)v30 + a7) = 0;
      atomic_store(v21, v20);
    }
    else
    {
      while (v21 == -1)
LABEL_27:
        v21 = atomic_load(v20);
    }
  }
  *(_BYTE *)(a8 + 8) &= ~1u;
  *(_QWORD *)a8 = v21;
  if (v35 != v37)
    free(v35);
}

_QWORD *sub_1C505F30C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, size_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  int v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  unsigned __int8 *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  char v23;
  _QWORD *v24;
  _QWORD v25[2];

  v9 = *a4;
  v8 = a4[1];
  v25[0] = sub_1C505F6E8;
  v25[1] = &v23;
  v24 = v25;
  result = llvm::cas::ThreadSafeHashMappedTrieBase::insert((unsigned __int16 *)(a1 + 16), 0, 0xFFFFFFFFuLL, a2, a3, (uint64_t (*)(uint64_t, _BYTE *, void *, size_t))sub_1C505F6AC, (uint64_t)&v24);
  if (v11 == -2)
    v12 = result;
  else
    v12 = 0;
  v13 = v12 + 4;
  v14 = atomic_load(v12 + 4);
  if (v14 == -1)
    goto LABEL_18;
  if (!v14)
  {
    while (1)
    {
      v14 = __ldaxr(v13);
      if (v14)
        break;
      if (!__stlxr(0xFFFFFFFFFFFFFFFFLL, v13))
      {
        v15 = 1;
        goto LABEL_10;
      }
    }
    v15 = 0;
    __clrex();
LABEL_10:
    if ((v15 & 1) != 0)
    {
      v16 = (unsigned __int8 *)(a1 + 160);
      do
        v17 = __ldaxr(v16);
      while (__stxr(1u, v16));
      if ((v17 & 1) != 0)
      {
        do
          v18 = __ldaxr(v16);
        while (__stxr(1u, v16) | v18 & 1);
      }
      result = (_QWORD *)sub_1C484358C(a1 + 64, 40, 3);
      v14 = (unint64_t)result;
      atomic_store(0, (unsigned __int8 *)(a1 + 160));
      *result = v12;
      result[1] = 0;
      result[2] = 0;
      result[3] = v8;
      result[4] = v9;
      atomic_store((unint64_t)result, v12 + 4);
    }
    else
    {
      while (v14 == -1)
LABEL_18:
        v14 = atomic_load(v13);
    }
  }
  if ((*(_BYTE *)v14 & 6) == 0 && a4[1] == *(_QWORD *)(v14 + 24))
  {
    v19 = a1 + 272;
    v20 = (unsigned __int8 *)(a1 + 368);
    do
      v21 = __ldaxr(v20);
    while (__stxr(1u, v20));
    if ((v21 & 1) != 0)
    {
      do
        v22 = __ldaxr(v20);
      while (__stxr(1u, v20) | v22 & 1);
    }
    result = (_QWORD *)sub_1C484358C(v19, 24, 3);
    atomic_store(0, v20);
    *result = 0;
    result[1] = 0;
    *((_DWORD *)result + 4) = 0;
    *result = *a4;
    result[1] = a4[1];
    *((_DWORD *)result + 4) = *((_DWORD *)a4 + 4);
    *a4 = 0;
    a4[1] = 0;
    *((_DWORD *)a4 + 4) = 0;
  }
  *(_BYTE *)(a5 + 8) &= ~1u;
  *(_QWORD *)a5 = v14;
  return result;
}

uint64_t sub_1C505F4E8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)a2 & 6) != 0)
    return a2 + 8 * *(unsigned int *)(a2 + 8) + 16;
  else
    return *(_QWORD *)(a2 + 24);
}

void *sub_1C505F510(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const void *v4;
  void *result;

  v4 = (const void *)(*a3 & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 16) = xmmword_1C677F680;
  result = memcpy((void *)(a1 + 32), v4, 0x20uLL);
  *(_QWORD *)(a1 + 16) += 32;
  return result;
}

uint64_t sub_1C505F598(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t j;
  void *v16;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 24; i <= v8; i += 24)
      {
        v10 = *(void **)(i - 16);
        if (v10)
          munmap(v10, *(_QWORD *)(i - 24));
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v11 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(a1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      v14 = *v12 + v12[1];
      for (j = ((*v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 24; j <= v14; j += 24)
      {
        v16 = *(void **)(j - 16);
        if (v16)
          munmap(v16, *(_QWORD *)(j - 24));
      }
      v12 += 2;
    }
    while (v12 != v13);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C505F6AC(void (***a1)(_QWORD, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v4)(_QWORD, _QWORD *);
  void (*v5)(_QWORD, _QWORD *);
  uint64_t v7;
  _QWORD v8[4];

  v7 = 0;
  v5 = **a1;
  v4 = (*a1)[1];
  v8[0] = a2;
  v8[1] = &v7;
  v8[2] = a3;
  v8[3] = a4;
  v5(v4, v8);
  return v7;
}

void *sub_1C505F6E8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  size_t v6;
  void *result;

  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = *(const void **)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)a2 = 0;
  if (v6)
    result = memmove(v3, v5, v6);
  v3[4] = 0;
  *v4 = v3;
  return result;
}

uint64_t llvm::cas::CASID::toString@<X0>(llvm::cas::CASID *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  void (**v3)(llvm::raw_ostream *__hidden);
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = 0;
  v8 = 0;
  v9 = 0;
  v3 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v11 = a2;
  v10 = 0;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  result = (*(uint64_t (**)(_QWORD, void (***)(llvm::raw_ostream *__hidden), llvm::cas::CASID *))(**(_QWORD **)this + 32))(*(_QWORD *)this, &v3, this);
  v3 = off_1E81A6E70;
  if (v10 == 1)
  {
    result = v5;
    if (v5)
      return MEMORY[0x1CAA32F9C](v5, 0x1000C8077774924);
  }
  return result;
}

llvm::raw_ostream *sub_1C505F7D0(void **this, const void *a2, size_t a3, unint64_t a4, _BYTE *a5)
{
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *result;
  _BYTE *v12;
  _BYTE *v13;

  v8 = (llvm::raw_ostream *)this;
  v9 = this[4];
  if (a3 <= (_BYTE *)this[3] - v9)
  {
    if (a3)
    {
      memcpy(this[4], a2, a3);
      v9 = (_BYTE *)(*((_QWORD *)v8 + 4) + a3);
      *((_QWORD *)v8 + 4) = v9;
    }
    v10 = v8;
  }
  else
  {
    v10 = llvm::raw_ostream::write((llvm::raw_ostream *)this, (const char *)a2, a3);
    v9 = (_BYTE *)*((_QWORD *)v10 + 4);
  }
  if (*((_BYTE **)v10 + 3) == v9)
  {
    v10 = llvm::raw_ostream::write(v10, "=", 1uLL);
  }
  else
  {
    *v9 = 61;
    ++*((_QWORD *)v10 + 4);
  }
  result = sub_1C5E21910(v10, a4, 0, 0, 0);
  if (a5[64])
  {
    v12 = (_BYTE *)*((_QWORD *)v8 + 4);
    if (*((_BYTE **)v8 + 3) == v12)
    {
      v8 = llvm::raw_ostream::write(v8, "[", 1uLL);
    }
    else
    {
      *v12 = 91;
      ++*((_QWORD *)v8 + 4);
    }
    result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD, llvm::raw_ostream *, _BYTE *))(**(_QWORD **)a5
                                                                                                  + 32))(*(_QWORD *)a5, v8, a5);
    v13 = (_BYTE *)*((_QWORD *)v8 + 4);
    if (*((_BYTE **)v8 + 3) == v13)
    {
      return llvm::raw_ostream::write(v8, "]", 1uLL);
    }
    else
    {
      *v13 = 93;
      ++*((_QWORD *)v8 + 4);
    }
  }
  return result;
}

char *llvm::cas::ObjectStore::getMemoryBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char **a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *result;
  _QWORD v13[4];
  __int16 v14;
  const void ***v15;

  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, a5);
  v11 = v10;
  v14 = 261;
  v13[0] = a3;
  v13[1] = a4;
  v15 = (const void ***)v13;
  result = sub_1C5E1F380(24, &v15);
  *(_QWORD *)result = &off_1E81A17B0;
  *((_QWORD *)result + 1) = v9;
  *((_QWORD *)result + 2) = v9 + v11;
  *a6 = result;
  return result;
}

void llvm::cas::ObjectStore::createUnknownObjectError(llvm::cas::ObjectStore *this@<X0>, _QWORD *a2@<X8>)
{
  const std::error_category *v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  void **v10;
  std::string v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  void **v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  std::string *v23;
  void *v24[2];
  char v25;
  void **v26;
  uint64_t v27[2];

  v5 = std::generic_category();
  memset(&v11, 0, sizeof(v11));
  v16 = 0;
  v20 = 0;
  v21 = 0;
  v15 = (void **)&unk_1E81A7208;
  v23 = &v11;
  v22 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  (*(void (**)(_QWORD, void ***, llvm::cas::ObjectStore *))(**(_QWORD **)this + 32))(*(_QWORD *)this, &v15, this);
  v15 = (void **)off_1E81A6E70;
  if (v22 == 1 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8077774924);
  v6 = std::string::insert(&v11, 0, "unknown object '");
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v12, "'");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  LOWORD(v19) = 260;
  v15 = __p;
  llvm::Twine::str((llvm::Twine *)&v15, v24);
  if (v25 >= 0)
    v10 = v24;
  else
    v10 = (void **)v24[0];
  v27[0] = 22;
  v27[1] = (uint64_t)v5;
  v26 = v10;
  sub_1C5DF1730((_BYTE **)&v26, v27, a2);
  if (v25 < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void llvm::cas::createCASFromIdentifier(_DWORD *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  size_t **i;
  uint64_t v10;
  size_t *v11;
  const void *v12;
  size_t v13;
  size_t *v14;
  BOOL v15;
  size_t v16;
  void (*v17)(uint64_t *, const void *);
  void *__p[2];
  char v19;
  uint64_t v20;
  uint64_t v21;
  const std::error_category *v22;
  __int16 v23;

  v6 = sub_1C505FCDC();
  v7 = *(unsigned int *)(v6 + 8);
  if ((_DWORD)v7)
  {
    for (i = *(size_t ***)v6; !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = *(size_t ***)v6;
  }
  v10 = *(_QWORD *)v6 + 8 * v7;
  if (i == (size_t **)v10)
  {
LABEL_20:
    if (a2 == 4)
    {
      if (*a1 == 1869903201)
      {
        llvm::cas::getDefaultOnDiskCASPath(__p);
        llvm::cas::createOnDiskCAS(a3);
        if (v19 < 0)
          operator delete(__p[0]);
        return;
      }
    }
    else if (!a2)
    {
      v21 = 22;
      v22 = std::generic_category();
      __p[0] = "No CAS identifier is provided";
      sub_1C5DF1730((_BYTE **)__p, &v21, &v20);
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v20;
      return;
    }
    llvm::cas::createOnDiskCAS(a3);
    return;
  }
  v11 = *i;
  while (1)
  {
    v12 = v11 + 2;
    v13 = *v11;
    if (a2 >= *v11 && (!v13 || !memcmp(a1, v12, *v11)))
      break;
    do
    {
      v14 = i[1];
      ++i;
      v11 = v14;
      if (v14)
        v15 = v11 + 1 == 0;
      else
        v15 = 1;
    }
    while (v15);
    if (i == (size_t **)v10)
      goto LABEL_20;
  }
  if (a2 >= v13)
    v16 = v13;
  else
    v16 = a2;
  v17 = (void (*)(uint64_t *, const void *))v11[1];
  v23 = 261;
  v21 = (uint64_t)a1 + v16;
  v22 = (const std::error_category *)(a2 - v16);
  v17(&v21, v12);
}

uint64_t sub_1C505FCDC()
{
  uint64_t v5[3];
  void (*v6)(uint64_t@<X8>);

  if (!atomic_load((unint64_t *)&qword_1EF8EFC08))
  {
    if (!atomic_load((unint64_t *)&qword_1EF8EFC08))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EF8EFC08, (void *(*)(void))sub_1C505FE70, (void (*)(void *))sub_1C505FEA4);
    v5[1] = (uint64_t)"mem://";
    v5[2] = 6;
    v6 = sub_1C505FE44;
    sub_1C505FF98(qword_1EF8EFC08, "mem://", 6uLL, (uint64_t *)&v6);
    if (!atomic_load((unint64_t *)&qword_1EF8EFC08))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EF8EFC08, (void *(*)(void))sub_1C505FE70, (void (*)(void *))sub_1C505FEA4);
    v5[0] = (uint64_t)llvm::cas::createOnDiskCAS;
    sub_1C505FF98(qword_1EF8EFC08, "file://", 7uLL, v5);
  }
  if (!atomic_load((unint64_t *)&qword_1EF8EFC08))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EF8EFC08, (void *(*)(void))sub_1C505FE70, (void (*)(void *))sub_1C505FEA4);
  return qword_1EF8EFC08;
}

uint64_t llvm::cas::registerCASURLScheme(unsigned __int8 *a1, size_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;

  v6 = sub_1C505FCDC();
  v8 = a3;
  return sub_1C505FF98(v6, a1, a2, &v8);
}

void sub_1C505FE44(uint64_t a1@<X8>)
{
  llvm::cas::createInMemoryCAS((uint64_t *)a1);
  *(_BYTE *)(a1 + 8) &= ~1u;
}

_QWORD *sub_1C505FE70()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  result[1] = 0;
  result[2] = 0x1000000000;
  return result;
}

uint64_t sub_1C505FEA4(uint64_t result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v1 = (void **)result;
    if (*(_DWORD *)(result + 12))
    {
      v2 = *(unsigned int *)(result + 8);
      if ((_DWORD)v2)
      {
        v3 = 0;
        v4 = 8 * v2;
        do
        {
          v5 = *(_QWORD *)((char *)*v1 + v3);
          if (v5 != -8 && v5 != 0)
            MEMORY[0x1CAA32FB4]();
          v3 += 8;
        }
        while (v4 != v3);
      }
    }
    free(*v1);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t *sub_1C505FF2C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *result;
  v6 = *(unsigned int *)(*result + 8);
  if (v6 >= *(_DWORD *)(*result + 12))
  {
    result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod(*result, v5 + 16, v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = a2;
  ++*(_DWORD *)(v5 + 8);
  *a3 = 0;
  return result;
}

uint64_t sub_1C505FF98(uint64_t result, unsigned __int8 *a2, size_t __n, uint64_t *a4)
{
  llvm::StringMapImpl *v6;
  unsigned int v7;
  int v8;
  size_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *i;
  uint64_t *v27;

  v6 = (llvm::StringMapImpl *)result;
  v7 = *(_DWORD *)(result + 8);
  if (!v7)
  {
    *(_DWORD *)(result + 12) = 0;
    *(_DWORD *)(result + 16) = 0;
    result = (uint64_t)malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!result)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *(_QWORD *)(result + 128) = 2;
    *(_QWORD *)v6 = result;
    v7 = 16;
    *((_DWORD *)v6 + 2) = 16;
  }
  v27 = a4;
  v8 = 0;
  if (__n)
  {
    v9 = __n;
    v10 = a2;
    do
    {
      v11 = *v10++;
      v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  v12 = *(_QWORD *)v6;
  v13 = v7 - 1;
  v14 = *(_QWORD *)v6 + 8 * v7 + 8;
  v15 = -1;
  v16 = 1;
  v17 = v8;
  while (1)
  {
    v18 = v17 & v13;
    v19 = *(_QWORD **)(v12 + 8 * v18);
    if (!v19)
      break;
    if (v19 == (_QWORD *)-8)
    {
      if (v15 == -1)
        v15 = v17 & v13;
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8 && __n == *v19)
    {
      if (!__n)
        goto LABEL_20;
      result = memcmp(a2, (char *)v19 + *((unsigned int *)v6 + 5), __n);
      if (!(_DWORD)result)
        goto LABEL_20;
    }
    v17 = v16 + v18;
    ++v16;
  }
  v20 = v15;
  if (v15 == -1)
  {
    v20 = v18;
    v18 = v18;
  }
  else
  {
    v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  v19 = *(_QWORD **)(v12 + 8 * v18);
LABEL_20:
  if (v19 == (_QWORD *)-8)
  {
    --*((_DWORD *)v6 + 4);
  }
  else if (v19)
  {
    return result;
  }
  v21 = operator new(__n + 17, (std::align_val_t)8uLL);
  v22 = v21;
  v23 = (char *)(v21 + 2);
  if (__n)
    memcpy(v21 + 2, a2, __n);
  v23[__n] = 0;
  v24 = *v27;
  *v22 = __n;
  v22[1] = v24;
  *(_QWORD *)(v12 + 8 * v18) = v22;
  ++*((_DWORD *)v6 + 3);
  result = llvm::StringMapImpl::RehashTable(v6, v18);
  for (i = (_QWORD *)(*(_QWORD *)v6 + 8 * result); !*i || *i == -8; ++i)
    ;
  return result;
}

void llvm::cas::createOnDiskCAS(uint64_t a1@<X8>)
{
  const char *v3;
  uint64_t v4[2];

  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v4[0] = 3;
  v4[1] = qword_1ED836B58[0];
  v3 = "OnDiskCAS is disabled";
  sub_1C5DF1730((_BYTE **)&v3, v4, (_QWORD *)a1);
  *(_BYTE *)(a1 + 8) |= 1u;
}

void llvm::cas::getDefaultOnDiskCASStableID(_QWORD *a1@<X8>)
{
  void *v3;
  size_t v4;
  void *v5;
  size_t v6;
  size_t v7;
  _QWORD *v8;
  void *__src;
  size_t __len[2];
  _QWORD v11[17];

  v11[16] = *MEMORY[0x1E0C80C00];
  __src = v11;
  *(_OWORD *)__len = xmmword_1C85F20B0;
  llvm::cas::getDefaultOnDiskCASStableID(&__src);
  v3 = __src;
  if (__src)
  {
    v4 = __len[0];
    if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len[0] >= 0x17)
    {
      v6 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17)
        v6 = __len[0] | 7;
      v7 = v6 + 1;
      v8 = operator new(v6 + 1);
      a1[1] = v4;
      a1[2] = v7 | 0x8000000000000000;
      *a1 = v8;
      a1 = v8;
    }
    else
    {
      *((_BYTE *)a1 + 23) = __len[0];
      if (!v4)
      {
LABEL_11:
        *((_BYTE *)a1 + v4) = 0;
        v5 = __src;
        if (__src == v11)
          return;
        goto LABEL_12;
      }
    }
    memmove(a1, v3, v4);
    goto LABEL_11;
  }
  v5 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
LABEL_12:
  free(v5);
}

void llvm::cas::getDefaultOnDiskCASPath(_QWORD *a1@<X8>)
{
  void *v3;
  size_t v4;
  void *v5;
  size_t v6;
  size_t v7;
  _QWORD *v8;
  void *__src;
  size_t __len[2];
  _QWORD v11[17];

  v11[16] = *MEMORY[0x1E0C80C00];
  __src = v11;
  *(_OWORD *)__len = xmmword_1C85F20B0;
  llvm::cas::getDefaultOnDiskCASPath(&__src);
  v3 = __src;
  if (__src)
  {
    v4 = __len[0];
    if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len[0] >= 0x17)
    {
      v6 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17)
        v6 = __len[0] | 7;
      v7 = v6 + 1;
      v8 = operator new(v6 + 1);
      a1[1] = v4;
      a1[2] = v7 | 0x8000000000000000;
      *a1 = v8;
      a1 = v8;
    }
    else
    {
      *((_BYTE *)a1 + 23) = __len[0];
      if (!v4)
      {
LABEL_11:
        *((_BYTE *)a1 + v4) = 0;
        v5 = __src;
        if (__src == v11)
          return;
        goto LABEL_12;
      }
    }
    memmove(a1, v3, v4);
    goto LABEL_11;
  }
  v5 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
LABEL_12:
  free(v5);
}

uint64_t llvm::cas::TreeSchema::getKindRef(llvm::cas::TreeSchema *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t llvm::cas::TreeSchema::forEachTreeEntry@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(uint64_t, _BYTE *)@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD v12[2];
  _BYTE v13[32];

  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 80))(*a1, a1[2]);
  v9 = result - 1;
  if (result == 1)
  {
LABEL_5:
    *a4 = 0;
  }
  else
  {
    v10 = 0;
    while (1)
    {
      v11 = *((_OWORD *)a1 + 1);
      v12[0] = *(_OWORD *)a1;
      v12[1] = v11;
      llvm::cas::TreeSchema::loadTreeEntry((llvm::cas::TreeProxy *)v12, v10, (uint64_t)v13);
      result = a2(a3, v13);
      if (*a4)
        break;
      if (v9 == ++v10)
        goto LABEL_5;
    }
  }
  return result;
}

uint64_t llvm::cas::TreeSchema::loadTreeEntry@<X0>(llvm::cas::TreeProxy *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t Name;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)a1 + 88))(*(_QWORD *)a1, *((_QWORD *)a1 + 2), 0);
  v7 = *(char *)(v6
               + a2
               + 4
               * (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 80))(*(_QWORD *)a1, *((_QWORD *)a1 + 2)));
  Name = llvm::cas::TreeProxy::getName(a1, a2);
  v10 = v9;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)a1 + 72))(*(_QWORD *)a1, *((_QWORD *)a1 + 2), a2 + 1);
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 16) = Name;
  *(_QWORD *)(a3 + 24) = v10;
  return result;
}

uint64_t llvm::cas::TreeSchema::walkFileTreeRecursively@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void (*a3)(uint64_t, __int128 *, _QWORD **)@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  int v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  int v29;
  _BYTE *v31;
  uint64_t v32;
  void *v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  void **v40;
  __int16 v41;
  _QWORD *v42;
  __int16 v43;
  _QWORD *v44[4];
  __int16 v45;
  __int128 v46;
  __int128 v47;
  _QWORD *v48;
  _QWORD *v49;
  __int128 v50;
  __int16 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  void *v55;
  uint64_t v56;
  _BYTE v57[32];
  void *v58;
  __int128 v59;
  _BYTE v60[128];
  _QWORD v61[4];
  _QWORD v62[6];
  _QWORD v63[5];

  v63[2] = *MEMORY[0x1E0C80C00];
  v61[0] = 0;
  v61[1] = 0;
  v61[2] = v62;
  v61[3] = 0x400000000;
  v62[4] = v63;
  v62[5] = 0;
  v63[0] = 0;
  v63[1] = 1;
  v9 = v60;
  v58 = v60;
  v59 = xmmword_1C85F20B0;
  v10 = v57;
  v55 = v57;
  v56 = 0x100000000;
  sub_1C61D5F80((uint64_t)&v55, a2, 3);
  while (1)
  {
LABEL_2:
    if (!(_DWORD)v56)
    {
      *a5 = 0;
      goto LABEL_28;
    }
    v11 = (char *)v55 + 32 * v56;
    v13 = *((_DWORD *)v11 - 8);
    v12 = v11 - 32;
    if (v13 != 3)
      break;
    v15 = *(_OWORD *)v12;
    v47 = *((_OWORD *)v12 + 1);
    v46 = v15;
    LODWORD(v56) = v56 - 1;
    llvm::cas::TreeSchema::load(a1, *((uint64_t *)&v15 + 1), (uint64_t)&v52);
    v34 = v54;
    if ((v54 & 1) != 0)
    {
      v17 = v52;
      *a5 = v52;
      if (v17)
        goto LABEL_28;
      v16 = 0;
    }
    else
    {
      *a5 = 0;
      v16 = (_QWORD *)v52;
    }
    v18 = v53;
    v48 = v16;
    v49 = (_QWORD *)*((_QWORD *)&v52 + 1);
    v36 = *((_QWORD *)&v53 + 1);
    v37 = (_QWORD *)*((_QWORD *)&v52 + 1);
    v50 = v53;
    LOBYTE(v51) = 1;
    a3(a4, &v46, &v48);
    if (*a5)
    {
      if ((v34 & 1) != 0 && v16)
        (*(void (**)(_QWORD *))(*v16 + 8))(v16);
      goto LABEL_28;
    }
    v19 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v16 + 80))(v16, v18);
    if (v19 == 1)
    {
      if ((v34 & 1) != 0)
        (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    }
    else
    {
      v31 = v10;
      v32 = a1;
      v33 = v9;
      v20 = v19 - 1 - 1;
      v35 = v16;
      do
      {
        v48 = v16;
        v49 = v37;
        *(_QWORD *)&v50 = v18;
        *((_QWORD *)&v50 + 1) = v36;
        llvm::cas::TreeSchema::loadTreeEntry((llvm::cas::TreeProxy *)&v48, v20, (uint64_t)v44);
        v21 = 0;
        v39 = (int)v44[0];
        v22 = v44[2];
        v38 = v44[1];
        v23 = v44[3];
        v24 = v47;
        *(_QWORD *)&v59 = 0;
        if (*((_QWORD *)&v59 + 1) >= *((_QWORD *)&v47 + 1))
        {
          if (!*((_QWORD *)&v47 + 1))
            goto LABEL_16;
LABEL_15:
          memcpy((char *)v58 + v21, (const void *)v24, *((size_t *)&v24 + 1));
          v21 = v59;
          goto LABEL_16;
        }
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v58, v33, *((unint64_t *)&v47 + 1), 1);
        v21 = v59;
        if (*((_QWORD *)&v24 + 1))
          goto LABEL_15;
LABEL_16:
        *(_QWORD *)&v59 = v21 + *((_QWORD *)&v24 + 1);
        v51 = 261;
        v48 = v22;
        v49 = v23;
        v45 = 257;
        v43 = 257;
        v41 = 257;
        llvm::sys::path::append(&v58, (const llvm::Twine *)1, &v48, v44, &v42, &v40);
        v26 = v58;
        v25 = v59;
        v27 = (void *)sub_1C484358C((uint64_t)v61, v59 + 1, 0);
        v28 = (uint64_t)v27;
        if (v25)
          memcpy(v27, v26, v25);
        *(_BYTE *)(v28 + v25) = 0;
        sub_1C61D55E4((uint64_t)&v55, (uint64_t)v38, v39, v28, v25);
        v29 = v20--;
        v16 = v35;
      }
      while (v29);
      if ((v34 & 1) != 0)
        (*(void (**)(_QWORD *))(*v35 + 8))(v35);
      a1 = v32;
      v9 = v33;
      v10 = v31;
    }
  }
  v14 = *((_OWORD *)v12 + 1);
  v52 = *(_OWORD *)v12;
  v53 = v14;
  LODWORD(v56) = v56 - 1;
  LOBYTE(v48) = 0;
  LOBYTE(v51) = 0;
  a3(a4, &v52, &v48);
  if (!*a5)
    goto LABEL_2;
LABEL_28:
  if (v55 != v10)
    free(v55);
  if (v58 != v9)
    free(v58);
  return sub_1C4926AE8((uint64_t)v61);
}

uint64_t llvm::cas::TreeProxy::getName(llvm::cas::TreeProxy *this, uint64_t a2)
{
  uint64_t v3;

  v3 = *(unsigned int *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)this + 88))(*(_QWORD *)this, *((_QWORD *)this + 2), 0)+ 4 * a2);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)this + 88))(*(_QWORD *)this, *((_QWORD *)this + 2), 0);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)this + 88))(*(_QWORD *)this, *((_QWORD *)this + 2), 0)+ v3;
}

unint64_t llvm::cas::TreeSchema::lookupTreeEntry(uint64_t a1, llvm::cas::TreeProxy *a2, const void *a3, size_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const void *Name;
  size_t v13;
  size_t v14;
  size_t v15;
  int v16;
  const void *v17;
  uint64_t v18;
  unint64_t v19;

  v7 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a2 + 80))(*(_QWORD *)a2, *((_QWORD *)a2 + 2));
  v8 = v7 - 1;
  if (v7 == 1)
    goto LABEL_21;
  if (v8 >= 5)
  {
    v9 = 0;
    v10 = v7 - 1;
    v11 = v7 - 1;
    while (1)
    {
      v8 = v9 + (v10 >> 1);
      Name = (const void *)llvm::cas::TreeProxy::getName(a2, v8);
      v14 = v13;
      if (v13 >= a4)
        v15 = a4;
      else
        v15 = v13;
      if (v15)
      {
        v16 = memcmp(a3, Name, v15);
        if (v16 < 0)
          goto LABEL_13;
        if (v16)
          goto LABEL_12;
      }
      if (a4 == v14)
      {
        v19 = v8 & 0xFFFFFFFFFFFFFF00;
        LOBYTE(v9) = v8;
        return v19 | v9;
      }
      if (a4 >= v14)
      {
LABEL_12:
        v9 = v8 + 1;
        v8 = v11;
      }
LABEL_13:
      v10 = v8 - v9;
      v11 = v8;
      if (v8 - v9 <= 4)
        goto LABEL_16;
    }
  }
  v9 = 0;
LABEL_16:
  if (v9 == v8)
  {
LABEL_21:
    LOBYTE(v9) = 0;
    v19 = 0;
  }
  else
  {
    while (1)
    {
      v17 = (const void *)llvm::cas::TreeProxy::getName(a2, v9);
      if (a4 == v18 && (!a4 || !memcmp(a3, v17, a4)))
        break;
      if (v8 == ++v9)
        goto LABEL_21;
    }
    v19 = v9 & 0xFFFFFFFFFFFFFF00;
  }
  return v19 | v9;
}

uint64_t llvm::cas::TreeProxy::get@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  uint64_t v4;

  if ((a2[3] & 1) != 0)
  {
    v4 = *a2;
    *a2 = 0;
    v3 = *(_BYTE *)(a3 + 32) | 1;
    *(_QWORD *)a3 = v4;
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    v3 = *(_BYTE *)(a3 + 32) & 0xFE;
    *(_QWORD *)(a3 + 16) = a2[2];
    *(_QWORD *)(a3 + 24) = result;
  }
  *(_BYTE *)(a3 + 32) = v3;
  return result;
}

void llvm::cas::TreeProxy::create(llvm::cas::TreeProxy::Builder *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  llvm::cas::TreeProxy::Builder::startNode(a1, (uint64_t)&v9);
  if ((v14 & 1) != 0)
  {
    v8 = v9;
    v9 = 0;
    *(_BYTE *)(a4 + 32) |= 1u;
    *(_QWORD *)a4 = v8;
LABEL_3:
    v7 = v9;
    v9 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    return;
  }
  llvm::cas::TreeProxy::Builder::build(&v9, a2, a3, a4);
  if ((v14 & 1) != 0)
    goto LABEL_3;
  if (v12 != &v13)
    free(v12);
  if (v10 != &v11)
    free(v10);
}

void llvm::cas::TreeProxy::Builder::build(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 v6;
  void *v7;
  unint64_t v8;
  char *v9;
  const std::nothrow_t *v10;
  unint64_t v11;
  _OWORD *v12;
  BOOL v13;
  void *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _OWORD *v19;
  _BOOL4 v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  int v24;
  int *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  size_t *v29;
  const void *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  char v45[4];
  __int128 v46;
  uint64_t v47;
  char v48;
  void *v49;
  uint64_t v50;
  _QWORD v51[6];

  v51[4] = *MEMORY[0x1E0C80C00];
  v49 = v51;
  v50 = 0x100000000;
  sub_1C61D6350((unsigned int *)&v49, a2, &a2[32 * a3]);
  v7 = v49;
  v8 = v50;
  v9 = (char *)v49 + 32 * v50;
  if (v50 < 0x81)
  {
LABEL_5:
    sub_1C5060FB8((uint64_t)v7, v9, v8, 0, 0, v6);
  }
  else
  {
    v10 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v11 = v50;
    while (1)
    {
      v12 = operator new(32 * v11, v10);
      if (v12)
        break;
      v13 = v11 > 1;
      v11 >>= 1;
      if (!v13)
        goto LABEL_5;
    }
    v14 = v12;
    sub_1C5060FB8((uint64_t)v7, v9, v8, v12, v11, v6);
    operator delete(v14);
  }
  v15 = v49;
  if ((_DWORD)v50)
  {
    v16 = (char *)v49 + 32 * v50;
    v17 = 32 * v50 - 32;
    v18 = (char *)v49;
    while (v17)
    {
      v19 = v18 + 32;
      v20 = sub_1C61D63D4((uint64_t)v18, (uint64_t)(v18 + 32));
      v17 -= 32;
      v18 = (char *)v19;
      if (v20)
      {
        v21 = (uint64_t)(v19 - 2);
        if (v17)
        {
          v22 = v19 + 2;
          do
          {
            if (!sub_1C61D63D4(v21, (uint64_t)v22))
            {
              v23 = v22[1];
              *(_OWORD *)(v21 + 32) = *v22;
              *(_OWORD *)(v21 + 48) = v23;
              v21 += 32;
            }
            v22 += 2;
            v17 -= 32;
          }
          while (v17);
        }
        v16 = (char *)(v21 + 32);
        break;
      }
    }
  }
  else
  {
    v16 = (char *)v49;
  }
  LODWORD(v50) = (unint64_t)(v16 - v15) >> 5;
  sub_1C613932C((uint64_t)v40, (uint64_t)(a1 + 1));
  v24 = 5 * v50 + 4;
  if ((_DWORD)v50)
  {
    v34 = 32 * v50;
    v35 = (uint64_t *)((char *)v49 + 24);
    do
    {
      *(_DWORD *)v45 = v24;
      llvm::raw_ostream::write((llvm::raw_ostream *)v40, v45, 4uLL);
      v36 = *v35;
      v37 = *(v35 - 2);
      v38 = *((unsigned int *)a1 + 74);
      if (v38 >= *((unsigned int *)a1 + 75))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 36), (uint64_t)(a1 + 38), v38 + 1, 8);
        v38 = *((unsigned int *)a1 + 74);
      }
      v24 += v36;
      v35 += 4;
      *(_QWORD *)(a1[36] + 8 * v38) = v37;
      ++*((_DWORD *)a1 + 74);
      v34 -= 32;
    }
    while (v34);
  }
  *(_DWORD *)v45 = v24;
  llvm::raw_ostream::write((llvm::raw_ostream *)v40, v45, 4uLL);
  if ((_DWORD)v50)
  {
    v25 = (int *)v49;
    v26 = 32 * v50;
    do
    {
      v27 = *v25;
      v25 += 8;
      v45[0] = v27;
      llvm::raw_ostream::write((llvm::raw_ostream *)v40, v45, 1uLL);
      v26 -= 32;
    }
    while (v26);
    if ((_DWORD)v50)
    {
      v28 = 32 * v50;
      v29 = (size_t *)((char *)v49 + 24);
      do
      {
        v30 = (const void *)*(v29 - 1);
        v31 = *v29;
        if (*v29 <= v42 - (uint64_t)v43)
        {
          if (v31)
          {
            memcpy(v43, v30, *v29);
            v43 += v31;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v40, (const char *)v30, *v29);
        }
        v29 += 4;
        v28 -= 32;
      }
      while (v28);
    }
  }
  v32 = *a1;
  llvm::cas::ObjectStore::createProxy(*(_QWORD *)(*a1 + 8), (uint64_t)&v46);
  if ((v48 & 1) != 0)
  {
    v39 = v46;
    *(_BYTE *)(a4 + 32) |= 1u;
    *(_QWORD *)a4 = v39;
  }
  else
  {
    *(_OWORD *)a4 = v46;
    v33 = v47;
    *(_BYTE *)(a4 + 32) &= ~1u;
    *(_QWORD *)(a4 + 16) = v33;
    *(_QWORD *)(a4 + 24) = v32;
  }
  v40[0] = off_1E81A6E70;
  if (v44 == 1 && v41)
    MEMORY[0x1CAA32F9C](v41, 0x1000C8077774924);
  if (v49 != v51)
    free(v49);
}

__n128 sub_1C5060FB8(uint64_t a1, char *a2, unint64_t a3, _OWORD *a4, uint64_t a5, __n128 result)
{
  uint64_t v7;
  __n128 v8;
  __int128 v9;
  uint64_t v11;
  uint64_t v12;
  __n128 *v13;
  void *v14;
  size_t v15;
  size_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  _OWORD *v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __n128 v38;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      if (sub_1C50619A4(*((const void **)a2 - 2), *((_QWORD *)a2 - 1), *(void **)(a1 + 16), *(_QWORD *)(a1 + 24)))
      {
        v8 = *(__n128 *)v7;
        result = *(__n128 *)(v7 + 16);
        v9 = *((_OWORD *)a2 - 1);
        *(_OWORD *)v7 = *((_OWORD *)a2 - 2);
        *(_OWORD *)(v7 + 16) = v9;
        *((__n128 *)a2 - 2) = v8;
        *((__n128 *)a2 - 1) = result;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v23 = a4;
      v24 = a3 >> 1;
      v25 = a1 + 32 * (a3 >> 1);
      v26 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v27 = sub_1C5061200(a1, v25, v26, a4, result);
        v28 = &v23[2 * v24];
        result.n128_u64[0] = sub_1C5061200(v7 + 32 * (a3 >> 1), (uint64_t)a2, a3 - (a3 >> 1), v28, v27).n128_u64[0];
        v29 = &v23[2 * a3];
        v30 = v28;
        while (v30 != v29)
        {
          if (sub_1C50619A4(*((const void **)v30 + 2), *((_QWORD *)v30 + 3), *((void **)v23 + 2), *((_QWORD *)v23 + 3)))
          {
            result = *(__n128 *)v30;
            v31 = v30[1];
            v30 += 2;
          }
          else
          {
            result = *(__n128 *)v23;
            v31 = v23[1];
            v23 += 2;
          }
          *(__n128 *)v7 = result;
          *(_OWORD *)(v7 + 16) = v31;
          v7 += 32;
          if (v23 == v28)
          {
            if (v30 != v29)
            {
              v32 = 0;
              do
              {
                v33 = v7 + v32 * 16;
                result = (__n128)v30[v32];
                v34 = v30[v32 + 1];
                *(__n128 *)v33 = result;
                *(_OWORD *)(v33 + 16) = v34;
                v32 += 2;
              }
              while (&v30[v32] != v29);
            }
            return result;
          }
        }
        if (v23 != v28)
        {
          v35 = 0;
          do
          {
            v36 = v7 + v35 * 16;
            result = (__n128)v23[v35];
            v37 = v23[v35 + 1];
            *(__n128 *)v36 = result;
            *(_OWORD *)(v36 + 16) = v37;
            v35 += 2;
          }
          while (&v23[v35] != v28);
        }
      }
      else
      {
        sub_1C5060FB8(a1, v25, v26, a4, a5);
        sub_1C5060FB8(v7 + 32 * (a3 >> 1), a2, a3 - (a3 >> 1), v23, a5);
        sub_1C5061400(v7, (char *)(v7 + 32 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (char *)v23, a5);
      }
    }
    else if ((char *)a1 != a2)
    {
      v11 = a1 + 32;
      if ((char *)(a1 + 32) != a2)
      {
        v12 = 0;
        v13 = (__n128 *)a1;
        do
        {
          v14 = (void *)v13[1].n128_u64[0];
          v15 = v13[1].n128_u64[1];
          v13 = (__n128 *)v11;
          v17 = *(const void **)(v11 + 16);
          v16 = *(_QWORD *)(v11 + 24);
          if (sub_1C50619A4(v17, v16, v14, v15))
          {
            v38 = *v13;
            v18 = v12;
            while (1)
            {
              v19 = v7 + v18;
              v20 = *(_OWORD *)(v7 + v18 + 16);
              *(_OWORD *)(v19 + 32) = *(_OWORD *)(v7 + v18);
              *(_OWORD *)(v19 + 48) = v20;
              if (!v18)
                break;
              v18 -= 32;
              if (!sub_1C50619A4(v17, v16, *(void **)(v19 - 16), *(_QWORD *)(v19 - 8)))
              {
                v21 = v7 + v18 + 32;
                goto LABEL_15;
              }
            }
            v21 = v7;
LABEL_15:
            result = v38;
            *(__n128 *)v21 = v38;
            *(_QWORD *)(v21 + 16) = v17;
            *(_QWORD *)(v21 + 24) = v16;
          }
          v11 = (uint64_t)&v13[2];
          v12 += 32;
        }
        while (&v13[2] != (__n128 *)a2);
      }
    }
  }
  return result;
}

__n128 sub_1C5061200(uint64_t a1, uint64_t a2, unint64_t a3, _OWORD *a4, __n128 result)
{
  _OWORD *v5;
  uint64_t v8;
  __int128 v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  _OWORD *v28;
  __int128 v29;
  unint64_t v30;
  _OWORD *v31;
  __int128 v32;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v10 = (_OWORD *)(a2 - 32);
      if (sub_1C50619A4(*(const void **)(a2 - 16), *(_QWORD *)(a2 - 8), *(void **)(a1 + 16), *(_QWORD *)(a1 + 24)))
      {
        v11 = *(_OWORD *)(a2 - 16);
        *v5 = *v10;
        v5[1] = v11;
        result = *(__n128 *)v8;
        v12 = *(_OWORD *)(v8 + 16);
      }
      else
      {
        v23 = *(_OWORD *)(v8 + 16);
        *v5 = *(_OWORD *)v8;
        v5[1] = v23;
        result = *(__n128 *)v10;
        v12 = *(_OWORD *)(a2 - 16);
      }
      v5[2] = result;
      v5[3] = v12;
    }
    else if (a3 == 1)
    {
      result = *(__n128 *)a1;
      v9 = *(_OWORD *)(a1 + 16);
      *a4 = *(_OWORD *)a1;
      a4[1] = v9;
    }
    else if ((uint64_t)a3 > 8)
    {
      v24 = a1 + 32 * (a3 >> 1);
      sub_1C5060FB8(a1, v24, a3 >> 1, a4, a3 >> 1);
      sub_1C5060FB8(v8 + 32 * (a3 >> 1), a2, a3 - (a3 >> 1), &v5[2 * (a3 >> 1)], a3 - (a3 >> 1));
      v25 = v8 + 32 * (a3 >> 1);
      while (v25 != a2)
      {
        if (sub_1C50619A4(*(const void **)(v25 + 16), *(_QWORD *)(v25 + 24), *(void **)(v8 + 16), *(_QWORD *)(v8 + 24)))
        {
          result = *(__n128 *)v25;
          v26 = *(_OWORD *)(v25 + 16);
          v25 += 32;
        }
        else
        {
          result = *(__n128 *)v8;
          v26 = *(_OWORD *)(v8 + 16);
          v8 += 32;
        }
        *v5 = result;
        v5[1] = v26;
        v5 += 2;
        if (v8 == v24)
        {
          if (v25 != a2)
          {
            v27 = 0;
            do
            {
              v28 = &v5[v27 / 0x10];
              result = *(__n128 *)(v25 + v27);
              v29 = *(_OWORD *)(v25 + v27 + 16);
              *v28 = result;
              v28[1] = v29;
              v27 += 32;
            }
            while (v25 + v27 != a2);
          }
          return result;
        }
      }
      if (v8 != v24)
      {
        v30 = 0;
        do
        {
          v31 = &v5[v30 / 0x10];
          result = *(__n128 *)(v8 + v30);
          v32 = *(_OWORD *)(v8 + v30 + 16);
          *v31 = result;
          v31[1] = v32;
          v30 += 32;
        }
        while (v8 + v30 != v24);
      }
    }
    else if (a1 != a2)
    {
      result = *(__n128 *)a1;
      v14 = *(_OWORD *)(a1 + 16);
      v13 = a1 + 32;
      *a4 = *(_OWORD *)a1;
      a4[1] = v14;
      if (a1 + 32 != a2)
      {
        v15 = 0;
        v16 = a4;
        do
        {
          v17 = v16;
          v16 += 2;
          v18 = v16;
          if (sub_1C50619A4(*(const void **)(v13 + 16), *(_QWORD *)(v13 + 24), *((void **)v17 + 2), *((_QWORD *)v17 + 3)))
          {
            v19 = v17[1];
            *v16 = *v17;
            v16[1] = v19;
            v18 = v5;
            if (v17 != v5)
            {
              v20 = v15;
              while (1)
              {
                v18 = (_OWORD *)((char *)v5 + v20);
                if (!sub_1C50619A4(*(const void **)(v13 + 16), *(_QWORD *)(v13 + 24), *(void **)((char *)v5 + v20 - 16), *(_QWORD *)((char *)v5 + v20 - 8)))break;
                v21 = *(v18 - 1);
                *v18 = *(v18 - 2);
                v18[1] = v21;
                v20 -= 32;
                if (!v20)
                {
                  v18 = v5;
                  break;
                }
              }
            }
          }
          result = *(__n128 *)v13;
          v22 = *(_OWORD *)(v13 + 16);
          v13 += 32;
          *v18 = result;
          v18[1] = v22;
          v15 += 32;
        }
        while (v13 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C5061400(uint64_t result, char *a2, char *a3, int64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  char *v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  void *v28;
  size_t v29;
  char *v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  char *v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  const void **v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  __int128 v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char *v72;
  __int128 v73;
  unint64_t v74;
  char *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  const void *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;

  if (!a5)
    return result;
  v8 = a5;
  v11 = (char *)result;
  while (a4 > a7 && v8 > a7)
  {
    if (!a4)
      return result;
    v12 = 0;
    v13 = (const void *)*((_QWORD *)a2 + 2);
    v14 = *((_QWORD *)a2 + 3);
    v15 = -a4;
    while (1)
    {
      v16 = v11;
      v11 += v12;
      result = sub_1C50619A4(v13, v14, *((void **)v11 + 2), *((_QWORD *)v11 + 3));
      if ((result & 1) != 0)
        break;
      v12 += 32;
      v17 = __CFADD__(v15++, 1);
      v11 = v16;
      if (v17)
        return result;
    }
    v18 = -v15;
    v78 = a7;
    v79 = a3;
    v80 = v8;
    if (-v15 >= v8)
    {
      v25 = a2;
      if (v15 == -1)
      {
        v72 = &v16[v12];
        v87 = *(_OWORD *)&v16[v12];
        v92 = *(_OWORD *)&v16[v12 + 16];
        v73 = *((_OWORD *)a2 + 1);
        *(_OWORD *)v72 = *(_OWORD *)a2;
        *((_OWORD *)v72 + 1) = v73;
        *(_OWORD *)a2 = v87;
        *((_OWORD *)a2 + 1) = v92;
        return result;
      }
      if (v15 > 0)
        v18 = 1 - v15;
      v22 = v18 >> 1;
      v20 = &v16[32 * (v18 >> 1) + v12];
      v27 = (a3 - a2) >> 5;
      if (a3 == a2)
      {
        v21 = a3;
      }
      else
      {
        v28 = (void *)*((_QWORD *)v20 + 2);
        v29 = *((_QWORD *)v20 + 3);
        v21 = a2;
        do
        {
          v30 = &v21[32 * (v27 >> 1)];
          v31 = sub_1C50619A4(*((const void **)v30 + 2), *((_QWORD *)v30 + 3), v28, v29);
          if (v31)
            v27 += ~(v27 >> 1);
          else
            v27 >>= 1;
          if (v31)
            v21 = v30 + 32;
        }
        while (v27);
        v25 = a2;
        v27 = (v21 - a2) >> 5;
      }
      v26 = a6;
      goto LABEL_37;
    }
    if (v8 >= 0)
      v19 = v8;
    else
      v19 = v8 + 1;
    v20 = a2;
    v77 = v19 >> 1;
    v21 = &a2[32 * (v19 >> 1)];
    v22 = (a2 - v16 - v12) >> 5;
    if (v11 != a2)
    {
      v23 = *((_QWORD *)v21 + 3);
      v83 = (const void *)*((_QWORD *)v21 + 2);
      v20 = v11;
      do
      {
        v24 = &v20[32 * (v22 >> 1)];
        if (sub_1C50619A4(v83, v23, *((void **)v24 + 2), *((_QWORD *)v24 + 3)))
        {
          v22 >>= 1;
        }
        else
        {
          v20 = v24 + 32;
          v22 += ~(v22 >> 1);
        }
      }
      while (v22);
      v22 = (v20 - v16 - v12) >> 5;
      v26 = a6;
      v25 = a2;
      v27 = v77;
LABEL_37:
      if (v20 == v25)
      {
        v20 = v25;
        v25 = v21;
      }
      else if (v25 == v21)
      {
        v21 = v25;
        v25 = v20;
      }
      else if (v20 + 32 == v25)
      {
        v85 = *(_OWORD *)v20;
        v89 = *((_OWORD *)v20 + 1);
        v37 = v26;
        v38 = v21 - v25;
        memmove(v20, v25, v21 - v25);
        v25 = &v20[v38];
        v26 = v37;
        *(_OWORD *)v25 = v85;
        *((_OWORD *)v25 + 1) = v89;
      }
      else if (v25 + 32 == v21)
      {
        v25 = v20 + 32;
        v86 = *((_OWORD *)v21 - 2);
        v90 = *((_OWORD *)v21 - 1);
        if (v21 - 32 != v20)
        {
          memmove(v20 + 32, v20, v21 - 32 - v20);
          v25 = v20 + 32;
        }
        *(_OWORD *)v20 = v86;
        *((_OWORD *)v20 + 1) = v90;
      }
      else
      {
        v32 = (v25 - v20) >> 5;
        if (v32 == (v21 - v25) >> 5)
        {
          v33 = 0;
          do
          {
            v34 = &v25[v33];
            v35 = &v20[v33];
            v84 = *(_OWORD *)&v20[v33];
            v88 = *(_OWORD *)&v20[v33 + 16];
            v36 = *(_OWORD *)&v25[v33 + 16];
            *(_OWORD *)v35 = *(_OWORD *)&v25[v33];
            *((_OWORD *)v35 + 1) = v36;
            *(_OWORD *)v34 = v84;
            *((_OWORD *)v34 + 1) = v88;
            if (&v20[v33 + 32] == v25)
              break;
            v33 += 32;
          }
          while (v34 + 32 != v21);
        }
        else
        {
          v39 = (v21 - v25) >> 5;
          v40 = v39;
          v41 = v32;
          do
          {
            v42 = v41;
            v41 = v40;
            v40 = v42 % v40;
          }
          while (v40);
          if (v41)
          {
            v43 = &v20[32 * v41];
            do
            {
              v44 = *((_OWORD *)v43 - 2);
              v45 = *((_OWORD *)v43 - 1);
              v43 -= 32;
              v91 = v45;
              v46 = &v43[32 * v32];
              v47 = v43;
              do
              {
                v48 = v47;
                v47 = v46;
                v49 = *((_OWORD *)v46 + 1);
                *(_OWORD *)v48 = *(_OWORD *)v46;
                *((_OWORD *)v48 + 1) = v49;
                v50 = __OFSUB__(v32, (v21 - v46) >> 5);
                v52 = v32 - ((v21 - v46) >> 5);
                v51 = (v52 < 0) ^ v50;
                v46 = &v20[32 * v52];
                if (v51)
                  v46 = &v47[32 * v32];
              }
              while (v46 != v43);
              *(_OWORD *)v47 = v44;
              *((_OWORD *)v47 + 1) = v91;
            }
            while (v43 != v20);
          }
          v25 = &v20[32 * v39];
        }
      }
      goto LABEL_62;
    }
    v11 = a2;
    v25 = &a2[32 * (v19 >> 1)];
    v26 = a6;
    v27 = v19 >> 1;
LABEL_62:
    a4 = -(uint64_t)(v22 + v15);
    v53 = v80 - v27;
    if ((uint64_t)(v27 + v22) >= (uint64_t)(v80 - (v27 + v22) - v15))
    {
      v55 = v78;
      v56 = v26;
      a3 = v25;
      result = sub_1C5061400(v25, v21, v79, a4, v80 - v27, v56, v78);
      v21 = v20;
      v53 = v27;
      a4 = v22;
    }
    else
    {
      v54 = v11;
      v55 = v78;
      v11 = v25;
      result = sub_1C5061400(v54, v20, v25, v22, v27, v26, v78);
      a3 = v79;
    }
    v8 = v53;
    a2 = v21;
    a7 = v55;
    if (!v53)
      return result;
  }
  if (a4 <= v8)
  {
    if (v11 != a2)
    {
      v65 = 0;
      do
      {
        v66 = &a6[v65];
        v67 = *(_OWORD *)&v11[v65 + 16];
        *(_OWORD *)v66 = *(_OWORD *)&v11[v65];
        *((_OWORD *)v66 + 1) = v67;
        v65 += 32;
      }
      while (&v11[v65] != a2);
      if (v65)
      {
        v68 = a6;
        while (a2 != a3)
        {
          result = sub_1C50619A4(*((const void **)a2 + 2), *((_QWORD *)a2 + 3), *((void **)v68 + 2), *((_QWORD *)v68 + 3));
          if ((_DWORD)result)
          {
            v69 = *((_OWORD *)a2 + 1);
            *(_OWORD *)v11 = *(_OWORD *)a2;
            *((_OWORD *)v11 + 1) = v69;
            a2 += 32;
          }
          else
          {
            v70 = *(_OWORD *)v68;
            v71 = *((_OWORD *)v68 + 1);
            v68 += 32;
            *(_OWORD *)v11 = v70;
            *((_OWORD *)v11 + 1) = v71;
          }
          v11 += 32;
          if (&a6[v65] == v68)
            return result;
        }
        return (uint64_t)memmove(v11, v68, a6 - v68 + v65);
      }
    }
  }
  else if (a2 != a3)
  {
    v57 = 0;
    do
    {
      v58 = &a6[v57];
      v59 = *(_OWORD *)&a2[v57 + 16];
      *(_OWORD *)v58 = *(_OWORD *)&a2[v57];
      *((_OWORD *)v58 + 1) = v59;
      v57 += 32;
    }
    while (&a2[v57] != a3);
    if (v57)
    {
      v60 = (const void **)&a6[v57];
      v61 = a3 - 32;
      while (a2 != v11)
      {
        v62 = a2;
        result = sub_1C50619A4(*(v60 - 2), (size_t)*(v60 - 1), *((void **)a2 - 2), *((_QWORD *)a2 - 1));
        if ((_DWORD)result)
          v63 = a2 - 32;
        else
          v63 = (char *)(v60 - 4);
        if ((_DWORD)result)
          v62 = a2 - 32;
        a2 = v62;
        v64 = *((_OWORD *)v63 + 1);
        if (!(_DWORD)result)
          v60 -= 4;
        *(_OWORD *)v61 = *(_OWORD *)v63;
        *((_OWORD *)v61 + 1) = v64;
        v61 -= 32;
        if (v60 == (const void **)a6)
          return result;
      }
      if (v60 != (const void **)a6)
      {
        v74 = 0;
        do
        {
          v75 = &v61[v74 * 8];
          v76 = *(_OWORD *)&v60[v74 - 2];
          *(_OWORD *)v75 = *(_OWORD *)&v60[v74 - 4];
          *((_OWORD *)v75 + 1) = v76;
          v74 -= 4;
        }
        while (&v60[v74] != (const void **)a6);
      }
    }
  }
  return result;
}

BOOL sub_1C50619A4(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v6;
  int v7;
  int v8;

  if (a4 >= a2)
    v6 = a2;
  else
    v6 = a4;
  if (v6 && (v7 = memcmp(a1, __s2, v6)) != 0)
  {
    v8 = (v7 >> 31) | 1;
  }
  else
  {
    if (a2 < a4)
      v8 = -1;
    else
      v8 = 1;
    if (a2 == a4)
      v8 = 0;
  }
  return v8 == -1;
}

void llvm::cas::NamedTreeEntry::print(llvm::cas::NamedTreeEntry *this, llvm::raw_ostream *a2, llvm::cas::ObjectStore *a3)
{
  int *v6;
  const char *v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  void *v11;
  const void *v12;
  unint64_t v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  _DWORD *v17;
  size_t v18;
  const void *v19;
  size_t v20;
  void *v21;
  _BYTE *v22;
  int v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x1E0C80C00];
  switch(*(_DWORD *)this)
  {
    case 0:
      v6 = (int *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v6 <= 3uLL)
      {
        v7 = "file";
        goto LABEL_10;
      }
      v23 = 1701603686;
      goto LABEL_47;
    case 1:
      v6 = (int *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v6 <= 3uLL)
      {
        v7 = "exec";
        goto LABEL_10;
      }
      v23 = 1667594341;
      goto LABEL_47;
    case 2:
      v6 = (int *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v6 <= 3uLL)
      {
        v7 = "syml";
        goto LABEL_10;
      }
      v23 = 1819113843;
      goto LABEL_47;
    case 3:
      v6 = (int *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v6 > 3uLL)
      {
        v23 = 1701147252;
LABEL_47:
        *v6 = v23;
        *((_QWORD *)a2 + 4) += 4;
      }
      else
      {
        v7 = "tree";
LABEL_10:
        llvm::raw_ostream::write(a2, v7, 4uLL);
      }
LABEL_11:
      v8 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*((_BYTE **)a2 + 3) == v8)
      {
        v9 = llvm::raw_ostream::write(a2, " ", 1uLL);
      }
      else
      {
        *v8 = 32;
        ++*((_QWORD *)a2 + 4);
        v9 = a2;
      }
      (*(void (**)(uint64_t *__return_ptr, llvm::cas::ObjectStore *, _QWORD))(*(_QWORD *)a3 + 16))(&v24, a3, *((_QWORD *)this + 1));
      (*(void (**)(uint64_t, llvm::raw_ostream *, uint64_t *))(*(_QWORD *)v24 + 32))(v24, v9, &v24);
      v10 = (_BYTE *)*((_QWORD *)v9 + 4);
      if (*((_BYTE **)v9 + 3) == v10)
      {
        v9 = llvm::raw_ostream::write(v9, " ", 1uLL);
        v11 = (void *)*((_QWORD *)v9 + 4);
      }
      else
      {
        *v10 = 32;
        v11 = (void *)(*((_QWORD *)v9 + 4) + 1);
        *((_QWORD *)v9 + 4) = v11;
      }
      v12 = (const void *)*((_QWORD *)this + 2);
      v13 = *((_QWORD *)this + 3);
      if (v13 <= *((_QWORD *)v9 + 3) - (_QWORD)v11)
      {
        if (v13)
        {
          memcpy(v11, v12, *((_QWORD *)this + 3));
          *((_QWORD *)v9 + 4) += v13;
        }
      }
      else
      {
        llvm::raw_ostream::write(v9, (const char *)v12, *((_QWORD *)this + 3));
      }
      if (v25 != v26)
        free(v25);
      v14 = *(_DWORD *)this;
      if (*(_DWORD *)this == 3)
      {
        v15 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (*((_BYTE **)a2 + 3) == v15)
        {
          llvm::raw_ostream::write(a2, "/", 1uLL);
        }
        else
        {
          *v15 = 47;
          ++*((_QWORD *)a2 + 4);
        }
        v14 = *(_DWORD *)this;
      }
      if (v14 == 2)
      {
        (*(void (**)(uint64_t *__return_ptr, llvm::cas::ObjectStore *, _QWORD))(*(_QWORD *)a3 + 48))(&v24, a3, *((_QWORD *)this + 1));
        if ((v25 & 1) != 0)
          v16 = 0;
        else
          v16 = v24;
        v17 = (_DWORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v17 > 3uLL)
        {
          *v17 = 540945696;
          *((_QWORD *)a2 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(a2, " -> ", 4uLL);
        }
        v19 = (const void *)(*(uint64_t (**)(llvm::cas::ObjectStore *, uint64_t, _QWORD))(*(_QWORD *)a3 + 88))(a3, v16, 0);
        v20 = v18;
        v21 = (void *)*((_QWORD *)a2 + 4);
        if (v18 <= *((_QWORD *)a2 + 3) - (_QWORD)v21)
        {
          if (v18)
          {
            memcpy(v21, v19, v18);
            *((_QWORD *)a2 + 4) += v20;
          }
        }
        else
        {
          llvm::raw_ostream::write(a2, (const char *)v19, v18);
        }
      }
      v22 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*((_BYTE **)a2 + 3) == v22)
      {
        llvm::raw_ostream::write(a2, "\n", 1uLL);
      }
      else
      {
        *v22 = 10;
        ++*((_QWORD *)a2 + 4);
      }
      return;
    default:
      goto LABEL_11;
  }
}

void llvm::initializeCFGuardPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7F4D60);
  if (v1 != -1)
  {
    v4[0] = sub_1C5061DFC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7F4D60, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5061DFC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "CFGuard";
  *(_QWORD *)(v2 + 8) = 7;
  *(_QWORD *)(v2 + 16) = "CFGuard";
  *(_QWORD *)(v2 + 24) = 7;
  *(_QWORD *)(v2 + 32) = &unk_1ED7F4D58;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5061FB8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createCFGuardCheckPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5061EAC(v1, 0);
}

uint64_t sub_1C5061EAC(uint64_t a1, int a2)
{
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7F4D58;
  *(_QWORD *)a1 = &off_1E813FDB8;
  *(_QWORD *)(a1 + 24) = 2;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v7 = qword_1ED830BC0[0];
  v5 = atomic_load(&qword_1ED7F4D60);
  if (v5 != -1)
  {
    v9[0] = sub_1C5061DFC;
    v9[1] = &v7;
    v8 = v9;
    std::__call_once(&qword_1ED7F4D60, &v8, (void (__cdecl *)(void *))sub_1C4776838);
  }
  *(_DWORD *)(a1 + 32) = a2;
  return a1;
}

uint64_t llvm::createCFGuardDispatchPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5061EAC(v1, 1);
}

uint64_t sub_1C5061FB8()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1ED7F4D58;
  *(_QWORD *)v0 = &off_1E813FDB8;
  *(_QWORD *)(v0 + 24) = 2;
  *(_DWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED7F4D60);
  if (v2 != -1)
  {
    v6[0] = sub_1C5061DFC;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED7F4D60, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  *(_DWORD *)(v0 + 32) = 0;
  return v0;
}

void sub_1C50620B0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C50620D4(uint64_t a1, uint64_t **a2)
{
  uint64_t ModuleFlag;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v9;
  uint64_t **v10;
  llvm::PointerType *v11;
  llvm::PointerType *v12;
  int v13;
  char *v14;
  unint64_t v15;
  uint64_t v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  ModuleFlag = llvm::Module::getModuleFlag((uint64_t)a2, "cfguard", 7uLL);
  if (ModuleFlag)
  {
    v5 = *(_QWORD *)(ModuleFlag + 128);
    if (v5)
    {
      v6 = (_QWORD *)(v5 + 24);
      if (*(_DWORD *)(v5 + 32) >= 0x41u)
        v6 = (_QWORD *)*v6;
      *(_DWORD *)(a1 + 28) = *v6;
    }
  }
  v7 = *(_DWORD *)(a1 + 28);
  if (v7 == 2)
  {
    v9 = **a2;
    v10 = (uint64_t **)(v9 + 1576);
    v16[0] = llvm::PointerType::get((llvm::PointerType *)(v9 + 1912), 0);
    v11 = (llvm::PointerType *)llvm::FunctionType::get(v10, v16, 1, 0);
    *(_QWORD *)(a1 + 40) = v11;
    v12 = (llvm::PointerType *)llvm::PointerType::get(v11, 0);
    *(_QWORD *)(a1 + 48) = v12;
    v13 = *(_DWORD *)(a1 + 32);
    if (v13)
      v14 = "__guard_dispatch_icall_fptr";
    else
      v14 = "__guard_check_icall_fptr";
    if (v13)
      v15 = 27;
    else
      v15 = 24;
    *(_QWORD *)(a1 + 56) = llvm::Module::getOrInsertGlobal((uint64_t)a2, (unsigned __int8 *)v14, v15, v12);
  }
  return v7 == 2;
}

uint64_t sub_1C50621FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  unsigned int v19;
  int j;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  llvm::PointerType **v30;
  llvm::PointerType *v31;
  llvm::Constant *v32;
  uint64_t v33;
  llvm::UndefValue *v34;
  char v35;
  char v36;
  char *v37;
  char *v38;
  llvm::Value *v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  char *v46;
  _QWORD *v47;
  unsigned int v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  void *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  unsigned __int8 **v62;
  int v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  char *v85;
  char *v86;
  llvm::Value *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t **v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  void *v97;
  char *v98;
  char *v99;
  unsigned __int8 **v100;
  int v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  uint64_t v107;
  uint64_t *v108;
  _QWORD v109[3];
  char v110;
  __int16 v111;
  void *v112[2];
  uint64_t v113;
  void *__p;
  void *v115;
  void *v116;
  uint64_t v117;
  _BYTE v118[64];
  void *v119;
  uint64_t v120;
  _WORD v121[24];
  char *v122;
  int v123;
  _BYTE v124[32];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129[3];

  v129[1] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 28) != 2)
    return 0;
  v116 = v118;
  v117 = 0x800000000;
  v2 = *(_QWORD *)(a2 + 80);
  v107 = a2 + 72;
  if (v2 != a2 + 72)
  {
    do
    {
      v3 = v2 - 24;
      if (!v2)
        v3 = 0;
      v4 = v3 + 40;
      for (i = *(_QWORD *)(v3 + 48); i != v4; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v6 = i - 24;
        else
          v6 = 0;
        v7 = *(unsigned __int8 *)(v6 + 16) - 33;
        v8 = v7 > 0x33;
        v9 = (1 << v7) & 0x8000000000041;
        if (!v8 && v9 != 0)
        {
          v11 = *(unsigned __int8 *)(*(_QWORD *)(i - 56) + 16);
          if (v11 >= 0x15 && v11 != 24)
          {
            v13 = *(_QWORD *)(i + 40);
            if (v13)
            {
              if (*(_DWORD *)(v13 + 8))
              {
                v14 = *(_QWORD *)(v13 + 40);
                if (v14)
                {
                  v15 = *(_DWORD *)(v14 + 40);
                  if (v15)
                  {
                    v16 = *(_QWORD *)(v14 + 24);
                    v17 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
                    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
                    {
                      v26 = llvm::hashing::detail::fixed_seed_override;
                      if (!llvm::hashing::detail::fixed_seed_override)
                        v26 = 0xFF51AFD7ED558CCDLL;
                      qword_1ED7EAC80 = v26;
                      __cxa_guard_release(&qword_1ED7EAC88);
                    }
                    v18 = 0x9DDFEA08EB382D69
                        * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xF5B7C7BFA9F6AC7BLL)) ^ ((0x9DDFEA08EB382D69
                                                                                               * (qword_1ED7EAC80 ^ 0xF5B7C7BFA9F6AC7BLL)) >> 47) ^ 0x9AD998DBDB97D91CLL);
                    v19 = (-348639895 * ((v18 >> 47) ^ v18)) ^ 0x5F647261;
                    for (j = 1; ; ++j)
                    {
                      v21 = v19 & (v15 - 1);
                      v22 = (uint64_t *)(v16 + 24 * v21);
                      v23 = *v22;
                      if (*v22 == -1)
                      {
                        if ("guard_nocf" == (char *)-1)
                          goto LABEL_42;
                      }
                      else if (v23 == -2)
                      {
                        if ("guard_nocf" == (char *)-2)
                          goto LABEL_42;
                      }
                      else if (v22[1] == 10 && *(_QWORD *)v23 == 0x6F6E5F6472617567 && *(_WORD *)(v23 + 8) == 26211)
                      {
                        goto LABEL_42;
                      }
                      if (v23 == -1)
                        break;
                      v19 = j + v21;
                    }
                  }
                }
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(i - 24, "guard_nocf", 0xAuLL) & 1) == 0)
            {
              v25 = v117;
              if (v117 >= (unint64_t)HIDWORD(v117))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, (uint64_t)v118, v117 + 1, 8);
                v25 = v117;
              }
              *((_QWORD *)v116 + v25) = i - 24;
              LODWORD(v117) = v117 + 1;
            }
          }
        }
LABEL_42:
        ;
      }
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != v107);
    if ((_DWORD)v117)
    {
      v27 = a1;
      v28 = (uint64_t *)v116;
      v108 = (uint64_t *)((char *)v116 + 8 * v117);
      if (*(_DWORD *)(a1 + 32) == 1)
      {
        while (1)
        {
          v29 = *v28;
          sub_1C4773D54((uint64_t)&v122, *v28, 0, 0, 0);
          v30 = *(llvm::PointerType ***)(v29 - 32);
          v31 = *v30;
          v32 = (llvm::Constant *)llvm::PointerType::get(*v30, 0);
          v33 = v27;
          v34 = *(llvm::UndefValue **)(v27 + 56);
          if (*(llvm::Constant **)v34 != v32)
          {
            v34 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v34, v32, 0);
            *(_QWORD *)(v33 + 56) = v34;
          }
          LOWORD(v115) = 257;
          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v125 + 56) + 40) + 272, (uint64_t)v31);
          v36 = v35;
          v37 = (char *)operator new(0x60uLL);
          v38 = v37;
          v39 = (llvm::Value *)(v37 + 32);
          *((_QWORD *)v37 + 2) = 0;
          *((_QWORD *)v37 + 3) = v37 + 32;
          v121[8] = 257;
          *((_QWORD *)v37 + 4) = v31;
          *((_QWORD *)v37 + 5) = 0;
          v40 = (uint64_t *)(v37 + 40);
          *((_WORD *)v37 + 24) = 60;
          *((_DWORD *)v37 + 13) = 1;
          *(_OWORD *)(v37 + 56) = 0u;
          *(_OWORD *)(v37 + 72) = 0u;
          *((_DWORD *)v37 + 22) = 0;
          *(_QWORD *)v37 = v34;
          *((_QWORD *)v37 + 1) = 0;
          if (v34)
          {
            v43 = *((_QWORD *)v34 + 1);
            v42 = (_QWORD *)((char *)v34 + 8);
            v41 = v43;
            *((_QWORD *)v37 + 1) = v43;
            if (v43)
              *(_QWORD *)(v41 + 16) = v37 + 8;
            *((_QWORD *)v37 + 2) = v42;
            *v42 = v37;
          }
          *((_WORD *)v37 + 25) = 2 * (v36 & 0x3F);
          v37[92] = 1;
          llvm::Value::setName((uint64_t ***)v37 + 4, (uint64_t)&v119);
          (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v128 + 16))(v128, v39, v112, v125, v126);
          if (v123)
            break;
LABEL_57:
          v119 = v121;
          v120 = 0x100000000;
          v44 = *(_DWORD *)(v29 + 20);
          if (v44 < 0)
          {
            v67 = *(_QWORD *)(v29 - 32 * (v44 & 0x7FFFFFF) - 8);
            if ((v67 & 0xFFFFFFFF0) != 0)
            {
              v68 = (v67 >> 4);
              v69 = v29;
              do
              {
                v70 = *(_DWORD *)(v29 + 20) & 0x7FFFFFF;
                v71 = v29 - 32 * v70;
                v72 = (unsigned int *)(v69 - (*(_QWORD *)(v71 - 8) + 32 * v70));
                v73 = *v72;
                v74 = v72[1];
                v75 = *((_QWORD *)v72 - 1);
                v112[0] = (void *)(v71 + 32 * v73);
                v112[1] = (void *)(v74 - v73);
                v113 = v75;
                sub_1C623D924((uint64_t)&v119, (uint64_t)v112);
                v69 += 16;
                --v68;
              }
              while (v68);
              v45 = v120;
              v27 = a1;
              if (v120 >= (unint64_t)HIDWORD(v120))
              {
                v112[0] = 0;
                v49 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v119, 0, 48, (unint64_t *)v112);
                v76 = &v49[48 * v120];
                strcpy(v76, "cfguardtarget");
                v76[23] = 13;
                *((_QWORD *)v76 + 4) = 0;
                *((_QWORD *)v76 + 5) = 0;
                v77 = operator new(8uLL);
                *((_QWORD *)v76 + 3) = v77;
                *((_QWORD *)v76 + 5) = v77 + 1;
                *v77 = v30;
                *((_QWORD *)v76 + 4) = v77 + 1;
                sub_1C4FCE92C((uint64_t *)&v119, (uint64_t)v49);
                v78 = (int)v112[0];
                if (v119 != v121)
                  free(v119);
                v119 = v49;
                v48 = v120 + 1;
                LODWORD(v120) = v120 + 1;
                HIDWORD(v120) = v78;
                v27 = a1;
                goto LABEL_60;
              }
            }
            else
            {
              v45 = 0;
              v27 = a1;
            }
          }
          else
          {
            v45 = 0;
            v27 = a1;
          }
          v46 = (char *)v119 + 48 * v45;
          strcpy(v46, "cfguardtarget");
          v46[23] = 13;
          *((_QWORD *)v46 + 4) = 0;
          *((_QWORD *)v46 + 5) = 0;
          v47 = operator new(8uLL);
          *((_QWORD *)v46 + 3) = v47;
          *((_QWORD *)v46 + 5) = v47 + 1;
          *v47 = v30;
          *((_QWORD *)v46 + 4) = v47 + 1;
          v48 = v120 + 1;
          LODWORD(v120) = v120 + 1;
          v49 = (char *)v119;
LABEL_60:
          v50 = llvm::CallBase::Create((uint64_t ***)v29, (uint64_t)v49, v48, (llvm::Instruction *)v29);
          if (*((_QWORD *)v50 - 4))
          {
            **((_QWORD **)v50 - 2) = *((_QWORD *)v50 - 3);
            v51 = *((_QWORD *)v50 - 3);
            if (v51)
              *(_QWORD *)(v51 + 16) = *((_QWORD *)v50 - 2);
          }
          *((_QWORD *)v50 - 4) = v39;
          v52 = *v40;
          *((_QWORD *)v50 - 3) = *v40;
          if (v52)
            *(_QWORD *)(v52 + 16) = v50 - 24;
          *((_QWORD *)v50 - 2) = v40;
          *v40 = (uint64_t)(v50 - 32);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v29, (llvm::Value *)v50, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v29 + 40) + 40, (uint64_t ***)v29);
          v53 = *(_QWORD *)(v29 + 24);
          v54 = *(_QWORD **)(v29 + 32);
          *v54 = v53;
          *(_QWORD *)(v53 + 8) = v54;
          *(_QWORD *)(v29 + 24) = 0;
          *(_QWORD *)(v29 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v29);
          v55 = (char *)v119;
          if ((_DWORD)v120)
          {
            v56 = 48 * v120;
            do
            {
              v57 = &v55[v56];
              v58 = *(void **)&v55[v56 - 24];
              if (v58)
              {
                *((_QWORD *)v57 - 2) = v58;
                operator delete(v58);
              }
              if (*(v57 - 25) < 0)
                operator delete(*((void **)v57 - 6));
              v56 -= 48;
            }
            while (v56);
            v55 = (char *)v119;
          }
          if (v55 != (char *)v121)
            free(v55);
          if (v122 != v124)
            free(v122);
          ++v28;
          v59 = 1;
          if (v28 == v108)
            goto LABEL_143;
        }
        v60 = v122;
        v61 = &v122[16 * v123];
        v62 = (unsigned __int8 **)(v38 + 80);
        while (1)
        {
          v63 = *(_DWORD *)v60;
          v64 = (unsigned __int8 *)*((_QWORD *)v60 + 1);
          if (v64)
          {
            if (!v63)
            {
              v109[0] = *((_QWORD *)v60 + 1);
              llvm::MetadataTracking::track((uint64_t)v109, v64, 2);
              v65 = *v62;
              goto LABEL_90;
            }
          }
          else
          {
            v65 = *v62;
            if (!*v62 && (v38[55] & 0x20) == 0)
              goto LABEL_87;
            if (!v63)
            {
              v109[0] = 0;
LABEL_90:
              if (v65)
                llvm::MetadataTracking::untrack((uint64_t)(v38 + 80), v65);
              v66 = (unsigned __int8 *)v109[0];
              *v62 = (unsigned __int8 *)v109[0];
              if (v66)
                llvm::MetadataTracking::retrack((uint64_t)v109, v66, (uint64_t)(v38 + 80));
              goto LABEL_87;
            }
          }
          llvm::Value::setMetadata(v39, *(_DWORD *)v60, (llvm::MDNode *)v64);
LABEL_87:
          v60 += 16;
          if (v60 == v61)
            goto LABEL_57;
        }
      }
      while (1)
      {
        v79 = *v28;
        sub_1C4773D54((uint64_t)&v122, *v28, 0, 0, 0);
        v80 = *(unsigned __int8 **)(v79 - 32);
        v119 = v121;
        v120 = 0x100000000;
        sub_1C5062CEC(v79, 1, (uint64_t)v109);
        if (v110)
        {
          sub_1C5063174((uint64_t)v112, (uint64_t)v109);
          sub_1C5062D60((uint64_t)&v119, (unint64_t)v112);
          if (__p)
          {
            v115 = __p;
            operator delete(__p);
          }
          if (SHIBYTE(v113) < 0)
            operator delete(v112[0]);
        }
        v82 = *(_QWORD *)(v27 + 48);
        v81 = *(_QWORD *)(v27 + 56);
        v111 = 257;
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v125 + 56) + 40) + 272, v82);
        v84 = v83;
        v85 = (char *)operator new(0x60uLL);
        v86 = v85;
        v87 = (llvm::Value *)(v85 + 32);
        *((_QWORD *)v85 + 2) = 0;
        *((_QWORD *)v85 + 3) = v85 + 32;
        LOWORD(v115) = 257;
        *((_QWORD *)v85 + 4) = v82;
        *((_QWORD *)v85 + 5) = 0;
        *((_WORD *)v85 + 24) = 60;
        *((_DWORD *)v85 + 13) = 1;
        *(_OWORD *)(v85 + 56) = 0u;
        *(_OWORD *)(v85 + 72) = 0u;
        *((_DWORD *)v85 + 22) = 0;
        *(_QWORD *)v85 = v81;
        *((_QWORD *)v85 + 1) = 0;
        if (v81)
        {
          v90 = *(_QWORD *)(v81 + 8);
          v89 = (_QWORD *)(v81 + 8);
          v88 = v90;
          *((_QWORD *)v85 + 1) = v90;
          if (v90)
            *(_QWORD *)(v88 + 16) = v85 + 8;
          *((_QWORD *)v85 + 2) = v89;
          *v89 = v85;
        }
        *((_WORD *)v85 + 25) = 2 * (v84 & 0x3F);
        v85[92] = 1;
        llvm::Value::setName((uint64_t ***)v85 + 4, (uint64_t)v112);
        (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v128 + 16))(v128, v87, v109, v125, v126);
        if (v123)
          break;
LABEL_114:
        v27 = a1;
        v91 = *(uint64_t ***)(a1 + 40);
        v92 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v127 + 1912), 0);
        LOWORD(v115) = 257;
        v129[0] = (uint64_t)sub_1C4773E38((uint64_t *)&v122, 49, v80, v92, (uint64_t)v112);
        v111 = 257;
        v93 = sub_1C5062DD8((uint64_t *)&v122, v91, (uint64_t)v87, v129, 1, (uint64_t)v119, v120, (uint64_t)v109, 0);
        *(_WORD *)(v93 + 18) = *(_WORD *)(v93 + 18) & 0xF003 | 0x4C;
        v94 = (char *)v119;
        if ((_DWORD)v120)
        {
          v95 = 48 * v120;
          do
          {
            v96 = &v94[v95];
            v97 = *(void **)&v94[v95 - 24];
            if (v97)
            {
              *((_QWORD *)v96 - 2) = v97;
              operator delete(v97);
            }
            if (*(v96 - 25) < 0)
              operator delete(*((void **)v96 - 6));
            v95 -= 48;
          }
          while (v95);
          v94 = (char *)v119;
        }
        if (v94 != (char *)v121)
          free(v94);
        if (v122 != v124)
          free(v122);
        if (++v28 == v108)
        {
          v59 = 1;
          goto LABEL_143;
        }
      }
      v98 = v122;
      v99 = &v122[16 * v123];
      v100 = (unsigned __int8 **)(v86 + 80);
      while (1)
      {
        v101 = *(_DWORD *)v98;
        v102 = (unsigned __int8 *)*((_QWORD *)v98 + 1);
        if (v102)
        {
          if (!v101)
          {
            v129[0] = *((_QWORD *)v98 + 1);
            llvm::MetadataTracking::track((uint64_t)v129, v102, 2);
            v103 = *v100;
            goto LABEL_139;
          }
        }
        else
        {
          v103 = *v100;
          if (!*v100 && (v86[55] & 0x20) == 0)
            goto LABEL_136;
          if (!v101)
          {
            v129[0] = 0;
LABEL_139:
            if (v103)
              llvm::MetadataTracking::untrack((uint64_t)(v86 + 80), v103);
            v104 = (unsigned __int8 *)v129[0];
            *v100 = (unsigned __int8 *)v129[0];
            if (v104)
              llvm::MetadataTracking::retrack((uint64_t)v129, v104, (uint64_t)(v86 + 80));
            goto LABEL_136;
          }
        }
        llvm::Value::setMetadata(v87, *(_DWORD *)v98, (llvm::MDNode *)v102);
LABEL_136:
        v98 += 16;
        if (v98 == v99)
          goto LABEL_114;
      }
    }
  }
  v59 = 0;
LABEL_143:
  if (v116 != v118)
    free(v116);
  return v59;
}

uint64_t sub_1C5062CEC@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v3 = *(_DWORD *)(result + 20);
  if (v3 < 0 && (v5 = v3 & 0x7FFFFFF, v6 = result - 32 * v5, v7 = *(_QWORD *)(v6 - 8), (v7 & 0xFFFFFFFF0) != 0))
  {
    v8 = (v7 >> 4);
    v9 = (unsigned int *)(result - (v7 + 32 * v5));
    while (1)
    {
      v10 = *((_QWORD *)v9 - 1);
      if (*(_DWORD *)(v10 + 8) == a2)
        break;
      v9 += 4;
      if (!--v8)
        goto LABEL_2;
    }
    v12 = v9;
    v11 = *v9;
    v13 = v12[1] - v11;
    *(_QWORD *)a3 = v6 + 32 * v11;
    *(_QWORD *)(a3 + 8) = v13;
    *(_QWORD *)(a3 + 16) = v10;
    v4 = 1;
  }
  else
  {
LABEL_2:
    v4 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 24) = v4;
  return result;
}

__n128 sub_1C5062D60(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __n128 result;

  v3 = sub_1C506310C(a1, a2, 1);
  v4 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 8);
  v5 = *(_OWORD *)v3;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
  *(_OWORD *)v4 = v5;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  result = *(__n128 *)(v3 + 24);
  *(__n128 *)(v4 + 24) = result;
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C5062DD8(uint64_t *a1, uint64_t **a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, llvm::MDNode *a9)
{
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  llvm::MDNode *v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD v45[4];
  __int16 v46;

  v46 = 257;
  if (a7)
  {
    v33 = 0;
    v34 = 48 * a7;
    v35 = (_QWORD *)(a6 + 32);
    do
    {
      v33 += (*v35 - *(v35 - 1)) >> 3;
      v35 += 6;
      v34 -= 48;
    }
    while (v34);
    LODWORD(v15) = a5 + 1;
    v36 = (v33 + a5 + 1);
    v42 = (16 * a7);
    if ((_DWORD)v42)
      v37 = (16 * (_DWORD)a7) | 8u;
    else
      v37 = 0;
    v38 = (char *)operator new(v37 + 32 * v36 + 80);
    v39 = &v38[v37];
    v18 = (uint64_t)&v38[32 * v36 + v37];
    v19 = v18 + 20;
    *(_DWORD *)(v18 + 20) = v36 & 0x7FFFFFF | (((_DWORD)v42 != 0) << 31) | *(_DWORD *)(v18 + 20) & 0x38000000;
    if ((_DWORD)v36)
    {
      do
      {
        *(_QWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = 0;
        *((_QWORD *)v39 + 2) = 0;
        *((_QWORD *)v39 + 3) = v18;
        v39 += 32;
      }
      while (v39 != (char *)v18);
    }
    if ((_DWORD)v42)
      *(_QWORD *)&v38[v42] = v42;
    v21 = *a2[2];
    v20 = 0;
    if (a7)
    {
      v40 = 48 * a7;
      v41 = (_QWORD *)(a6 + 32);
      do
      {
        v20 += (*v41 - *(v41 - 1)) >> 3;
        v41 += 6;
        v40 -= 48;
      }
      while (v40);
    }
  }
  else
  {
    v15 = (a5 + 1);
    v16 = (_DWORD)a5 == -1;
    v17 = operator new(32 * v15 + 80);
    v18 = (uint64_t)&v17[4 * v15];
    v19 = v18 + 20;
    *(_DWORD *)(v18 + 20) = *(_DWORD *)(v18 + 20) & 0x38000000 | v15 & 0x7FFFFFF;
    if (!v16)
    {
      do
      {
        *v17 = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = v18;
        v17 += 4;
      }
      while (v17 != (_QWORD *)v18);
    }
    v20 = 0;
    v21 = *a2[2];
  }
  *(_QWORD *)v18 = v21;
  *(_QWORD *)(v18 + 8) = 0;
  v22 = *(_DWORD *)(v18 + 20) & 0xC0000000 | (v20 + v15) & 0x7FFFFFF;
  *(_DWORD *)(v18 + 16) = 84;
  *(_DWORD *)(v18 + 20) = v22;
  *(_OWORD *)(v18 + 24) = 0u;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_DWORD *)(v18 + 56) = 0;
  *(_QWORD *)(v18 + 64) = 0;
  llvm::CallInst::init((uint64_t ***)v18, a2, a3, a4, a5, a6, a7, (uint64_t)v45);
  if (*((_BYTE *)a1 + 100))
    *(_QWORD *)(v18 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v18 + 64), **(uint64_t ***)v18, -1, 61);
  if (sub_1C4774A9C(v18))
  {
    v30 = a9;
    v31 = *((_DWORD *)a1 + 24);
    if (a9 || (v30 = (llvm::MDNode *)a1[11]) != 0)
      llvm::Value::setMetadata((llvm::Value *)v18, 3, v30);
    *(_BYTE *)(v18 + 17) |= 2 * (_BYTE)v31;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v18, a8, a1[6], a1[7]);
  v23 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v23)
  {
    v25 = *a1;
    v26 = *a1 + 16 * v23;
    do
    {
      v27 = *(_DWORD *)v25;
      v28 = *(unsigned __int8 **)(v25 + 8);
      if (v28)
      {
        if (!v27)
        {
          v45[0] = *(_QWORD *)(v25 + 8);
          llvm::MetadataTracking::track((uint64_t)v45, v28, 2);
          v29 = *(unsigned __int8 **)(v18 + 48);
          goto LABEL_24;
        }
      }
      else
      {
        v29 = *(unsigned __int8 **)(v18 + 48);
        if (!v29 && (*(_BYTE *)(v19 + 3) & 0x20) == 0)
          goto LABEL_18;
        if (!v27)
        {
          v45[0] = 0;
LABEL_24:
          if (v29)
            llvm::MetadataTracking::untrack(v18 + 48, v29);
          v32 = (unsigned __int8 *)v45[0];
          *(_QWORD *)(v18 + 48) = v45[0];
          if (v32)
            llvm::MetadataTracking::retrack((uint64_t)v45, v32, v18 + 48);
          goto LABEL_18;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v18, *(_DWORD *)v25, (llvm::MDNode *)v28);
LABEL_18:
      v25 += 16;
    }
    while (v25 != v26);
  }
  return v18;
}

unint64_t sub_1C506310C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 48 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C61D6438(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C61D6438(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C5063174(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  size_t v3;
  const void *v4;
  unint64_t v5;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  __int128 __dst;
  unint64_t v13;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v2 = *(unint64_t **)(a2 + 16);
  v5 = *v2;
  v4 = v2 + 2;
  v3 = v5;
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v3 >= 0x17)
  {
    v9 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v9 = v3 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = v3;
    v13 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v13) = v3;
  p_dst = &__dst;
  if (v3)
LABEL_8:
    memmove(p_dst, v4, v3);
  *((_BYTE *)p_dst + v3) = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v13;
  sub_1C5063264((char **)(a1 + 24), *(_QWORD *)(a1 + 32), *(uint64_t **)a2, (uint64_t *)(*(_QWORD *)a2 + 32 * *(_QWORD *)(a2 + 8)), *(_QWORD *)(a2 + 8));
  return a1;
}

char *sub_1C5063264(char **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t *v9;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;

  v5 = *a1;
  v6 = a2 - (_QWORD)*a1;
  v7 = &(*a1)[v6 & 0xFFFFFFFFFFFFFFF8];
  if (a5 < 1)
    return v7;
  v9 = a3;
  v12 = a1[1];
  v11 = a1[2];
  if (a5 <= (v11 - v12) >> 3)
  {
    v18 = (v12 - v7) >> 3;
    if (v18 >= a5)
    {
      v19 = &a3[4 * a5];
      v20 = a1[1];
    }
    else
    {
      v19 = &a3[4 * v18];
      v20 = a1[1];
      if (v19 != a4)
      {
        v21 = v19;
        v22 = a1[1];
        do
        {
          v23 = *v21;
          v21 += 4;
          *(_QWORD *)v22 = v23;
          v22 += 8;
          v20 += 8;
        }
        while (v21 != a4);
      }
      a1[1] = v20;
      if (v12 - v7 < 1)
        return v7;
    }
    v24 = &v7[8 * a5];
    v25 = &v20[-8 * a5];
    v26 = v20;
    if (v25 < v12)
    {
      v26 = v20;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while (v25 < v12);
    }
    a1[1] = v26;
    if (v20 != v24)
      memmove(&v20[-8 * ((v20 - v24) >> 3)], v7, v20 - v24);
    if (v19 != v9)
    {
      v28 = v7;
      do
      {
        v29 = *v9;
        v9 += 4;
        *(_QWORD *)v28 = v29;
        v28 += 8;
      }
      while (v9 != v19);
    }
    return v7;
  }
  v13 = a5 + ((v12 - v5) >> 3);
  if (v13 >> 61)
    abort();
  v14 = v11 - v5;
  v15 = v14 >> 2;
  if (v14 >> 2 <= v13)
    v15 = v13;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
  {
    if (v16 >> 61)
      sub_1C4764EE4();
    v17 = (char *)operator new(8 * v16);
  }
  else
  {
    v17 = 0;
  }
  v30 = &v17[8 * (v6 >> 3)];
  v31 = &v30[8 * a5];
  v32 = 8 * a5;
  v33 = v30;
  do
  {
    v34 = *v9;
    v9 += 4;
    *(_QWORD *)v33 = v34;
    v33 += 8;
    v32 -= 8;
  }
  while (v32);
  v35 = *a1;
  if (v7 == *a1)
  {
    v37 = v30;
  }
  else
  {
    v36 = v7;
    v37 = v30;
    do
    {
      v38 = *((_QWORD *)v36 - 1);
      v36 -= 8;
      *((_QWORD *)v37 - 1) = v38;
      v37 -= 8;
    }
    while (v36 != v35);
    v12 = a1[1];
  }
  v39 = &v17[8 * v16];
  if (v12 != v7)
    memmove(v31, v7, v12 - v7);
  v40 = *a1;
  *a1 = v37;
  a1[1] = &v31[v12 - v7];
  a1[2] = v39;
  if (v40)
    operator delete(v40);
  return v30;
}

void sub_1C506346C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v16;
  _QWORD *v17[2];

  v17[0] = 0;
  v17[1] = 0;
  v16 = (uint64_t *)v17;
  sub_1C61D6B7C(a1, a2, &v16);
  sub_1C5063570((unsigned __int16 *)a1, a2, a3, (uint64_t)&v16);
  sub_1C61D6C8C((uint64_t *)a1, a2, a3);
  v8 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v8 + 16))
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 120);
    do
    {
      v11 = *(_QWORD **)(a1 + 120);
      v12 = v9;
      if (*(_DWORD *)(v11[10] + 4 * v9) != -1 && *(_DWORD *)(v11[13] + 4 * v9) == -1)
      {
        sub_1C61D65A0(v11, v9, 0);
        v8 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        v13 = *(_QWORD *)(v10 + 104);
        v14 = *(_DWORD *)(v13 + 4 * v12);
        if (v14 < a4 && v14 >= a3)
          *(_DWORD *)(v13 + 4 * v12) = a3;
      }
      v9 = v12 + 1;
    }
    while ((_DWORD)v12 + 1 != *(_DWORD *)(v8 + 16));
  }
  sub_1C47655E8((uint64_t)&v16, v17[0]);
}

unsigned __int16 *sub_1C5063570(unsigned __int16 *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned __int16 *v28;
  int v29;
  _QWORD *v30;
  unsigned __int16 *v31;
  __int16 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  _WORD *v40;
  uint64_t *v41;
  unsigned int v42;
  uint64_t *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned __int16 *v53;
  int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  int v59;
  unsigned int v60;
  unsigned __int16 *v61;
  uint64_t v62;
  unsigned int *v63;
  _WORD *v64;
  _BOOL4 v65;
  unsigned int v66;
  unsigned __int16 *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  int v73;
  unsigned int v74;
  unsigned __int16 *v75;
  uint64_t v76;
  int v77;
  uint64_t v79;
  uint64_t **v80;
  unsigned __int16 *v81;
  unsigned int v82;
  _DWORD *v83;
  uint64_t v84;

  v4 = *(unsigned int *)(a2 + 40);
  if (!(_DWORD)v4)
    return result;
  v7 = (uint64_t)result;
  v8 = *((_QWORD *)result + 15);
  v80 = (uint64_t **)(v8 + 56);
  v81 = result;
  v9 = a3 + 1;
  v10 = 32 * v4;
  v11 = (unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
  do
  {
    if ((*(v11 - 1) & 0x10000FF) == 0x1000000 && *v11)
    {
      result = (unsigned __int16 *)sub_1C61D6F40(v7, *v11, v9);
      v7 = (uint64_t)v81;
    }
    v11 += 8;
    v10 -= 32;
  }
  while (v10);
  v12 = *(unsigned int *)(a2 + 40);
  if (!(_DWORD)v12)
    return result;
  v76 = v8;
  v77 = a3;
  v13 = 0;
  v79 = *(unsigned int *)(a2 + 40);
  do
  {
    v14 = (_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v13);
    if ((*v14 & 0x10000FF) != 0x1000000)
      goto LABEL_52;
    v15 = v14[1];
    if (!v15)
      goto LABEL_52;
    v16 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
    v17 = (*(_WORD *)(a2 + 44) & 0xC) != 0 && (*(_WORD *)(a2 + 44) & 4) == 0;
    if (v17)
    {
      v35 = a2;
      if ((v16 & 0x80) == 0)
      {
        while ((*(_WORD *)(v35 + 44) & 8) != 0)
        {
          v35 = *(_QWORD *)(v35 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v35 + 16) + 8) & 0x80) != 0)
            goto LABEL_58;
        }
        if ((v16 & 0x100000000) == 0)
        {
          v36 = a2;
          while ((*(_WORD *)(v36 + 44) & 8) != 0)
          {
            v36 = *(_QWORD *)(v36 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v36 + 16) + 12) & 1) != 0)
              goto LABEL_58;
          }
LABEL_16:
          v18 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 24) + 768))(*(_QWORD *)(v7 + 24), a2);
          v7 = (uint64_t)v81;
          if ((v18 & 1) == 0 && **(unsigned __int16 **)(a2 + 16) - 1 > 1)
            goto LABEL_18;
        }
      }
    }
    else if ((v16 & 0x100000080) == 0)
    {
      goto LABEL_16;
    }
LABEL_58:
    sub_1C61D65A0(*(_QWORD **)(v7 + 120), v15, 0);
    v7 = (uint64_t)v81;
LABEL_18:
    v19 = *(_QWORD *)(v7 + 32);
    if (v19)
      v20 = (_QWORD *)(v19 + 8);
    else
      v20 = 0;
    v22 = v20[5];
    v21 = v20[6];
    v23 = (_WORD *)(v21 + (((unint64_t)*(unsigned int *)(*v20 + 24 * v15 + 16) >> 3) & 0x1FFFFFFE));
    v24 = (unsigned __int16)*v23 + (*(_DWORD *)(*v20 + 24 * v15 + 16) & 0xF) * v15;
    while (1)
    {
      ++v23;
      LOWORD(v25) = *(_WORD *)(v22 + 4 * (unsigned __int16)v24);
      if ((_WORD)v25)
        break;
LABEL_30:
      v24 += (unsigned __int16)*v23;
      if (!*v23)
        goto LABEL_44;
    }
    v26 = *(unsigned __int16 *)(v22 + 4 * (unsigned __int16)v24 + 2);
    v27 = v26 << 16;
    while (!v21)
    {
LABEL_28:
      v27 = 0;
      LOWORD(v25) = v26;
      v17 = (unsigned __int16)v26 == 0;
      LOWORD(v26) = 0;
      if (v17)
        goto LABEL_30;
    }
    v28 = (unsigned __int16 *)(v21 + 2 * *(unsigned int *)(*v20 + 24 * (unsigned __int16)v25 + 8));
    while (v15 == (unsigned __int16)v25)
    {
      v29 = *v28++;
      LOWORD(v25) = v29 + v25;
      if (!v29)
        goto LABEL_28;
    }
    do
    {
      v30 = *(_QWORD **)(v7 + 120);
      if (*(_DWORD *)(v30[10] + 4 * (unsigned __int16)v25) != -1
        && *(_DWORD *)(v30[13] + 4 * (unsigned __int16)v25) == -1)
      {
        sub_1C61D65A0(v30, v15, (unsigned __int16)v25);
        v7 = (uint64_t)v81;
      }
      do
      {
        v33 = *v28++;
        v32 = v33;
        if (v33)
        {
          LOWORD(v25) = v32 + v25;
        }
        else
        {
          v25 = HIWORD(v27);
          if (HIWORD(v27))
          {
            v27 >>= 16;
          }
          else
          {
            if (!*v23)
              goto LABEL_44;
            v24 += (unsigned __int16)*v23++;
            v31 = (unsigned __int16 *)(v20[5] + 4 * (unsigned __int16)v24);
            v25 = *v31;
            v27 = v31[1] << 16;
          }
          v28 = (unsigned __int16 *)(v20[6] + 2 * *(unsigned int *)(*v20 + 24 * v25 + 8));
        }
      }
      while (v15 == (unsigned __int16)v25);
    }
    while (v23);
LABEL_44:
    if (v13 >= *(unsigned __int16 *)(*(_QWORD *)(a2 + 16) + 2))
      v34 = 0;
    else
      v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 16))(*(_QWORD *)(v7 + 24));
    v82 = v15;
    v83 = v14;
    v84 = v34;
    result = (unsigned __int16 *)sub_1C5065534(v80, (int *)&v82);
    v7 = (uint64_t)v81;
    v12 = v79;
LABEL_52:
    ++v13;
  }
  while (v13 != v12);
  v37 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v37)
  {
    v38 = *(_DWORD **)(a2 + 32);
    v39 = &v38[8 * v37];
    v40 = *(_WORD **)(a2 + 16);
    v41 = *(uint64_t **)(a4 + 8);
    while (1)
    {
      if ((*v38 & 0x10000FF) == 0x1000000)
      {
        v42 = v38[1];
        if (v42)
        {
          if (*v40 != 7)
            break;
        }
      }
LABEL_64:
      v38 += 8;
      if (v38 == v39)
        return result;
    }
    if (v41)
    {
      v43 = v41;
      do
      {
        v44 = *((_DWORD *)v43 + 7);
        if (v42 >= v44)
        {
          if (v44 >= v42)
            goto LABEL_64;
          ++v43;
        }
        v43 = (uint64_t *)*v43;
      }
      while (v43);
    }
    v45 = *(_QWORD *)(v7 + 32);
    if (v45)
      v46 = (uint64_t *)(v45 + 8);
    else
      v46 = 0;
    v47 = *v46;
    v48 = *(_DWORD *)(*v46 + 24 * v42 + 16) & 0xF;
    v49 = ((unint64_t)*(unsigned int *)(*v46 + 24 * v42 + 16) >> 3) & 0x1FFFFFFE;
    v52 = v46 + 5;
    v51 = v46[5];
    v50 = v52[1];
    v53 = (unsigned __int16 *)(v50 + v49);
    v54 = *v53;
    result = v53 + 1;
    v55 = v54 + v48 * v42;
    while (1)
    {
      v56 = 4 * (unsigned __int16)v55;
      v57 = *(unsigned __int16 *)(v51 + v56);
      if (*(_WORD *)(v51 + v56) && v50 != 0)
        break;
      v59 = *result++;
      v55 += v59;
      if (!v59)
        goto LABEL_64;
    }
    v60 = *(unsigned __int16 *)(v51 + 4 * (unsigned __int16)v55 + 2) << 16;
    v61 = (unsigned __int16 *)(v50 + 2 * *(unsigned int *)(v47 + 24 * v57 + 8));
    v62 = *(_QWORD *)(v45 + 56);
    v63 = (unsigned int *)(*(_QWORD *)(v45 + 8) + 24 * v42 + 8);
    while (2)
    {
      v64 = (_WORD *)(v62 + 2 * *v63);
      v65 = *v64 == 0;
      if (*v64)
      {
        v66 = (unsigned __int16)*v64 + v42;
        if ((unsigned __int16)(*v64 + v42) != (unsigned __int16)v57)
        {
          v67 = v64 + 1;
          do
          {
            v69 = *v67++;
            v68 = v69;
            v65 = v69 == 0;
            if (!v69)
              v67 = 0;
            if (!v68)
              break;
            v66 += v68;
          }
          while ((unsigned __int16)v66 != (unsigned __int16)v57);
        }
      }
      if (v65)
      {
        v70 = (unsigned __int16)v57;
        goto LABEL_94;
      }
      v71 = *(_QWORD *)(v7 + 120);
      v70 = (unsigned __int16)v57;
      if (*(_DWORD *)(*(_QWORD *)(v71 + 80) + 4 * (unsigned __int16)v57) == -1
        || *(_DWORD *)(*(_QWORD *)(v71 + 104) + 4 * (unsigned __int16)v57) != -1)
      {
LABEL_94:
        *(_DWORD *)(*(_QWORD *)(v76 + 104) + 4 * v70) = v77;
      }
      v73 = *v61++;
      v72 = v73;
      if (v73)
      {
        LOWORD(v57) = v72 + v57;
        if (!result)
          goto LABEL_64;
      }
      else
      {
        v74 = HIWORD(v60);
        if (HIWORD(v60))
        {
          v57 = HIWORD(v60);
          v60 >>= 16;
        }
        else
        {
          if (!*result)
            goto LABEL_64;
          v55 += *result++;
          v75 = (unsigned __int16 *)(v51 + 4 * (unsigned __int16)v55);
          v74 = *v75;
          v60 = v75[1] << 16;
          LOWORD(v57) = v74;
        }
        v61 = (unsigned __int16 *)(v50 + 2 * *(unsigned int *)(v47 + 24 * v74 + 8));
        if (!result)
          goto LABEL_64;
      }
      continue;
    }
  }
  return result;
}

uint64_t sub_1C5063AE0(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t *v13;
  unint64_t v14;
  uint64_t **p_i;
  uint64_t **v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t **v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  BOOL v58;
  char *j;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *k;
  unsigned int v64;
  unsigned int RegisterDefOperandIdx;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unsigned __int16 *v84;
  _WORD *v85;
  int v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  int v91;
  uint64_t v92;
  _DWORD *v93;
  _DWORD *v94;
  unint64_t v95;
  _WORD *v96;
  int v97;
  unsigned __int16 v98;
  _BOOL4 v99;
  unsigned __int16 *v101;
  int v102;
  int v103;
  BOOL v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  unsigned __int16 *v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  _WORD *v129;
  int v130;
  unsigned __int16 v131;
  BOOL v132;
  unsigned __int16 *v134;
  int v135;
  int v136;
  BOOL v137;
  unsigned int v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t *v142;
  char v143;
  _QWORD *v144;
  unsigned int v145;
  uint64_t v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t *v153;
  _QWORD *v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _BYTE *v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t **v166;
  void **v167;
  uint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  _WORD *v173;
  int v174;
  unsigned __int16 v175;
  _BOOL4 v176;
  unsigned __int16 *v178;
  int v179;
  int v180;
  BOOL v181;
  uint64_t v182;
  unsigned __int16 ****v183;
  unsigned __int16 ****v184;
  unsigned __int16 ***v185;
  unint64_t v186;
  unsigned __int16 **v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t **m;
  uint64_t **v194;
  unint64_t v195;
  uint64_t *v196;
  uint64_t *v197;
  int v198;
  int v199;
  int v200;
  unint64_t v201;
  _QWORD *v202;
  unsigned int v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  _QWORD *v207;
  int SubRegIndex;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned __int16 v212;
  unsigned __int16 *v213;
  unsigned __int16 *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  int v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  _WORD *v228;
  int v229;
  unsigned int v230;
  int v231;
  unsigned int v232;
  unsigned __int16 *v233;
  int v234;
  char v235;
  __int16 v236;
  int v237;
  unsigned __int16 *v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t *v242;
  uint64_t v243;
  unsigned int v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t *v247;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t *v253;
  uint64_t *v254;
  uint64_t **v255;
  uint64_t **v256;
  unsigned int *v257;
  unsigned int v258;
  _DWORD *v259;
  uint64_t *v260;
  uint64_t **v261;
  uint64_t *v262;
  uint64_t *v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t **v274;
  uint64_t *v275;
  uint64_t **v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t **v279;
  unsigned int v280;
  uint64_t v281;
  unsigned int v283;
  unsigned int *__p;
  uint64_t v286;
  unint64_t v287;
  int v288;
  unsigned int *v289;
  int v290;
  int v291;
  uint64_t v292;
  int v293;
  unsigned int v294;
  uint64_t *v295;
  unsigned int v296;
  unsigned int v297;
  int *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t **v301;
  uint64_t v302;
  uint64_t **v303;
  _QWORD *v304;
  unsigned int *v305;
  unint64_t v306;
  unsigned int *v307;
  uint64_t *v308;
  unsigned int *v309;
  unsigned int *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t **v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t *v316;
  _QWORD *v317[2];
  uint64_t **v318;
  uint64_t *i;
  uint64_t v320;
  uint64_t *v321;
  uint64_t *v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t *v325;
  _QWORD *v326[2];
  void *v327;
  uint64_t v328;
  _DWORD v329[14];
  _BYTE *v330;
  uint64_t v331;
  _BYTE v332[48];
  unsigned int v333;
  __int128 v334;
  _BYTE v335[16];
  _QWORD *v336;
  _QWORD v337[3];
  unsigned int v338;
  uint64_t v339;

  v339 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
    return 0;
  v11 = a1;
  v13 = 0;
  v278 = *(_QWORD *)(a1 + 120);
  v322 = 0;
  v323 = 0;
  v279 = (uint64_t **)(v278 + 56);
  v320 = 0;
  v321 = (uint64_t *)&v322;
  v318 = &i;
  for (i = 0; ; v13 = i)
  {
    v14 = *(_QWORD *)(v6 + 8);
    p_i = &i;
    v16 = &i;
    if (v13)
    {
      while (1)
      {
        while (1)
        {
          v16 = (uint64_t **)v13;
          v17 = v13[4];
          if (v17 <= v14)
            break;
          v13 = *v16;
          p_i = v16;
          if (!*v16)
            goto LABEL_11;
        }
        if (v17 >= v14)
          break;
        v13 = v16[1];
        if (!v13)
        {
          p_i = v16 + 1;
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      v18 = (uint64_t *)operator new(0x30uLL);
      v18[4] = v14;
      v18[5] = v6;
      *v18 = 0;
      v18[1] = 0;
      v18[2] = (uint64_t)v16;
      *p_i = v18;
      if (*v318)
      {
        v318 = (uint64_t **)*v318;
        v19 = *p_i;
      }
      else
      {
        v19 = v18;
      }
      sub_1C4768E74(i, v19);
      ++v320;
    }
    v6 += 272;
    if (v6 == v7)
      break;
  }
  v20 = *(_QWORD **)(v11 + 48);
  v281 = v11 + 48;
  v21 = *(unsigned int *)(v11 + 56);
  if ((_DWORD)v21)
  {
    v24 = 8 * v21;
    v23 = a5;
    while (!*v20)
    {
      ++v20;
      v24 -= 8;
      if (!v24)
      {
        v286 = 0;
        v22 = 0;
        goto LABEL_33;
      }
    }
    v22 = 0;
    v26 = *a2;
    v25 = a2[1];
    do
    {
      if (!v22)
        goto LABEL_30;
      if ((*(_BYTE *)(v26 + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth((llvm::SUnit *)v26);
      v27 = *(_DWORD *)(v26 + 240);
      v28 = *(unsigned __int16 *)(v26 + 226);
      if ((*(_BYTE *)(v22 + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth((llvm::SUnit *)v22);
      if (v27 + v28 > *(_DWORD *)(v22 + 240) + *(unsigned __int16 *)(v22 + 226))
LABEL_30:
        v22 = v26;
      v26 += 272;
    }
    while (v26 != v25);
    v286 = *(_QWORD *)(v22 + 8);
  }
  else
  {
    v286 = 0;
    v22 = 0;
    v23 = a5;
  }
LABEL_33:
  v29 = *(_DWORD *)(*(_QWORD *)(v11 + 32) + 16);
  v327 = v329;
  v328 = 0x600000000;
  sub_1C4765AA4((char *)&v327, (v29 + 63) >> 6, 0);
  v329[12] = v29;
  v30 = a3;
  if (a4 != a3)
  {
    v280 = 0;
    v312 = v11;
    while (1)
    {
      a4 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
      if (!a4 || (*(_BYTE *)a4 & 4) == 0)
      {
        while ((*(_WORD *)(a4 + 44) & 4) != 0)
          a4 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
      }
      --v23;
      if (**(unsigned __int16 **)(a4 + 16) - 13 >= 5)
        break;
LABEL_45:
      if (a4 == v30)
        goto LABEL_35;
    }
    v317[0] = 0;
    v317[1] = 0;
    v316 = (uint64_t *)v317;
    sub_1C61D6B7C(v11, a4, &v316);
    v288 = v23;
    sub_1C5063570((unsigned __int16 *)v11, a4, v23, (uint64_t)&v316);
    *(_QWORD *)&v334 = a4;
    v31 = sub_1C506577C((uint64_t **)&v318, a4, (uint64_t **)&v334);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = v31[5];
    *(_QWORD *)&v334 = v335;
    *((_QWORD *)&v334 + 1) = 0x400000000;
    v337[0] = 0;
    v337[1] = 0;
    v336 = v337;
    v36 = *((unsigned int *)v35 + 10);
    if ((_DWORD)v36)
    {
      v37 = 0;
      v34 = 0;
      v33 = 0;
      v38 = (_DWORD *)v35[4];
      v39 = &v38[4 * v36];
      do
      {
        if (((*v38 >> 1) & 3u) - 1 <= 1)
        {
          LODWORD(v330) = v38[2];
          if ((sub_1C4854E58((uint64_t)&v334, (unsigned int *)&v330) & 0x100000000) != 0)
          {
            if (v34 >= v37)
            {
              v40 = (v34 - v33) >> 3;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 61)
LABEL_448:
                abort();
              if ((v37 - v33) >> 2 > v41)
                v41 = (v37 - v33) >> 2;
              if ((unint64_t)(v37 - v33) >= 0x7FFFFFFFFFFFFFF8)
                v42 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v42 = v41;
              if (v42)
              {
                if (v42 >> 61)
LABEL_449:
                  sub_1C4764EE4();
                v43 = (char *)operator new(8 * v42);
              }
              else
              {
                v43 = 0;
              }
              v44 = &v43[8 * v40];
              *(_QWORD *)v44 = v38;
              v45 = v44 + 8;
              if (v34 != v33)
              {
                do
                {
                  v46 = *((_QWORD *)v34 - 1);
                  v34 -= 8;
                  *((_QWORD *)v44 - 1) = v46;
                  v44 -= 8;
                }
                while (v34 != v33);
                v34 = v33;
              }
              v33 = v44;
              v37 = &v43[8 * v42];
              if (v34)
                operator delete(v34);
              v34 = v45;
            }
            else
            {
              *(_QWORD *)v34 = v38;
              v34 += 8;
            }
          }
        }
        v38 += 4;
      }
      while (v38 != v39);
      v32 = (_QWORD *)v337[0];
    }
    sub_1C47655E8((uint64_t)&v336, v32);
    if ((_BYTE *)v334 != v335)
      free((void *)v334);
    v295 = v35;
    if (a4 != v286)
    {
      v48 = *(unsigned int *)(v11 + 56);
      if ((_DWORD)v48)
      {
        v49 = *(_QWORD **)(v11 + 48);
        v47 = 8 * v48;
        while (!*v49)
        {
          ++v49;
          v47 -= 8;
          if (!v47)
            goto LABEL_97;
        }
        v47 = v281;
      }
      else
      {
        v47 = 0;
      }
      goto LABEL_97;
    }
    if (v22)
    {
      v50 = *(unsigned int *)(v22 + 40);
      if (!(_DWORD)v50)
      {
        v47 = 0;
        v286 = 0;
        v22 = 0;
        goto LABEL_97;
      }
      v51 = 0;
      v52 = 0;
      v53 = *(_QWORD *)(v22 + 32);
      v54 = 16 * v50;
      do
      {
        v55 = *(_QWORD *)v53 & 0xFFFFFFFFFFFFFFF8;
        v56 = *(_DWORD *)(v53 + 12);
        if ((*(_BYTE *)(v55 + 236) & 1) == 0)
          llvm::SUnit::ComputeDepth((llvm::SUnit *)(*(_QWORD *)v53 & 0xFFFFFFFFFFFFFFF8));
        v57 = *(_DWORD *)(v55 + 240) + v56;
        if (v52 < v57 || v52 == v57 && (*(_QWORD *)v53 & 6) == 2)
        {
          v52 = *(_DWORD *)(v55 + 240) + v56;
          v51 = (_QWORD *)v53;
        }
        v53 += 16;
        v54 -= 16;
      }
      while (v54);
      if (!v51)
      {
        v47 = 0;
        v286 = 0;
        v22 = 0;
        goto LABEL_97;
      }
      v22 = *v51 & 0xFFFFFFFFFFFFFFF8;
      if (v22)
      {
        v47 = 0;
        v286 = *(_QWORD *)(v22 + 8);
        goto LABEL_97;
      }
    }
    v47 = 0;
    v286 = 0;
LABEL_97:
    v287 = v22;
    v58 = **(_WORD **)(a4 + 16) == 7 || v33 == v34;
    if (!v58)
    {
      v304 = (_QWORD *)v47;
      for (j = v33; j != v34; j += 8)
      {
        v60 = **(_QWORD **)j;
        if (((v60 >> 1) & 3) - 1 <= 1)
        {
          v61 = *(unsigned int *)(*(_QWORD *)j + 8);
          v62 = *(_QWORD **)(v11 + 16);
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v62 + 16) + 176))(*(_QWORD *)(*v62 + 16))
                                                + 216)
                                    + 16)
                        + v61))
          {
            if (((*(_QWORD *)(v62[44] + ((v61 >> 3) & 0x1FFFFFF8)) >> v61) & 1) == 0
              && (!v304 || ((*(_QWORD *)(*v304 + ((v61 >> 3) & 0x1FFFFFF8)) >> v61) & 1) == 0))
            {
              for (k = v317[0]; k; k = (_QWORD *)*k)
              {
                v64 = *((_DWORD *)k + 7);
                if (v61 >= v64)
                {
                  if (v64 >= v61)
                    goto LABEL_108;
                  ++k;
                }
              }
              RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(a4, v61, 0, 0, 0);
              if (RegisterDefOperandIdx != -1)
              {
                v66 = *(_QWORD *)(a4 + 32);
                if (v66)
                {
                  if ((*(_BYTE *)(v66 + 32 * RegisterDefOperandIdx + 3) & 2) == 0)
                  {
                    v67 = *((unsigned int *)v295 + 10);
                    if ((_DWORD)v67)
                    {
                      v68 = v60 & 0xFFFFFFFFFFFFFFF8;
                      v69 = 16 * v67;
                      v70 = (_DWORD *)(v295[4] + 8);
                      v71 = v70;
                      v72 = v69;
                      while (1)
                      {
                        v73 = *((_QWORD *)v71 - 1) & 6;
                        if ((*((_QWORD *)v71 - 1) & 0xFFFFFFFFFFFFFFF8) == v68)
                        {
                          if (v73 != 2 || *v71 != (_DWORD)v61)
                          {
LABEL_130:
                            LODWORD(v61) = 0;
                            goto LABEL_131;
                          }
                        }
                        else if (!v73 && *v71 == (_DWORD)v61)
                        {
                          goto LABEL_130;
                        }
                        v71 += 4;
                        v72 -= 16;
                        if (!v72)
                        {
                          while (1)
                          {
LABEL_131:
                            v74 = *((_QWORD *)v70 - 1);
                            if ((v74 & 0xFFFFFFFFFFFFFFF8) == v68)
                            {
                              if (((v74 >> 1) & 3) - 1 >= 2)
                                goto LABEL_108;
                            }
                            else if ((v74 & 6) == 0 && *v70 == (_DWORD)v61)
                            {
                              goto LABEL_108;
                            }
                            v70 += 4;
                            v69 -= 16;
                            if (!v69)
                              goto LABEL_137;
                          }
                        }
                      }
                    }
LABEL_137:
                    if (!(_DWORD)v61)
                      continue;
                    v75 = v327;
                    if ((_DWORD)v328)
                      bzero(v327, 8 * v328);
                    v76 = *(_QWORD *)(v11 + 32);
                    if (v76)
                      v77 = (uint64_t *)(v76 + 8);
                    else
                      v77 = 0;
                    v78 = *v77;
                    v79 = *(_DWORD *)(*v77 + 24 * v61 + 16) & 0xF;
                    v80 = ((unint64_t)*(unsigned int *)(*v77 + 24 * v61 + 16) >> 3) & 0x1FFFFFFE;
                    v83 = v77 + 5;
                    v82 = v77[5];
                    v81 = v83[1];
                    v84 = (unsigned __int16 *)(v81 + v80);
                    v86 = *v84;
                    v85 = v84 + 1;
                    v87 = v86 + v79 * v61;
                    while (1)
                    {
                      v88 = (unsigned __int16)v87;
                      v89 = *(unsigned __int16 *)(v82 + 4 * (unsigned __int16)v87);
                      if (*(_WORD *)(v82 + 4 * (unsigned __int16)v87) && v81 != 0)
                        break;
                      v91 = (unsigned __int16)*v85++;
                      v87 += v91;
                      if (!v91)
                        goto LABEL_150;
                    }
                    while (1)
                    {
                      v123 = *(unsigned __int16 *)(v82 + 4 * v88 + 2) << 16;
                      v124 = (unsigned __int16)v89;
                      while (1)
                      {
                        v125 = (unsigned __int16 *)(v81 + 2 * *(unsigned int *)(v78 + 24 * v124 + 8));
                        do
                        {
                          v75[(unsigned __int16)v89 >> 6] |= 1 << v89;
                          v126 = *v125++;
                          v89 += v126;
                        }
                        while (v126);
                        v124 = HIWORD(v123);
                        if (!(_DWORD)v124)
                          break;
                        v89 = HIWORD(v123);
                        v123 >>= 16;
                      }
                      if (!*v85)
                        break;
                      v87 += (unsigned __int16)*v85++;
                      v88 = (unsigned __int16)v87;
                      v89 = *(unsigned __int16 *)(v82 + 4 * (unsigned __int16)v87);
                    }
LABEL_150:
                    v92 = *((unsigned int *)v295 + 30);
                    if ((_DWORD)v92)
                    {
                      v93 = (_DWORD *)v295[14];
                      v94 = &v93[4 * v92];
                      while (1)
                      {
                        if ((~*v93 & 6) != 0)
                        {
                          v95 = v93[2];
                          if (((*(_QWORD *)((char *)v75 + ((v95 >> 3) & 0x1FFFFFF8)) >> v95) & 1) != 0
                            && (_DWORD)v95 != (_DWORD)v61)
                          {
                            v96 = (_WORD *)(*(_QWORD *)(v76 + 56)
                                          + 2 * *(unsigned int *)(*(_QWORD *)(v76 + 8) + 24 * v95 + 8));
                            v97 = (unsigned __int16)*v96;
                            v98 = v97 + v95;
                            v58 = v97 == 0;
                            v99 = *v96 != 0;
                            if (!v58 && (_DWORD)v61 != v98)
                            {
                              v101 = v96 + 1;
                              do
                              {
                                v103 = *v101++;
                                v102 = v103;
                                v98 += v103;
                                v99 = v103 != 0;
                                if (!v103)
                                  v101 = 0;
                                if (v102)
                                  v104 = (_DWORD)v61 == v98;
                                else
                                  v104 = 1;
                              }
                              while (!v104);
                            }
                            if (!v99)
                              break;
                          }
                        }
                        v93 += 4;
                        if (v93 == v94)
                          goto LABEL_169;
                      }
                    }
                    else
                    {
LABEL_169:
                      v105 = *(int **)(v11 + 120);
                      v106 = *(unsigned int *)(*((_QWORD *)v105 + 4) + 4 * v61);
                      v298 = v105;
                      do
                      {
                        v107 = v106;
                        v106 = *(unsigned int *)(*((_QWORD *)v105 + 1) + 4 * v106);
                      }
                      while (v106 != v107);
                      if (v107)
                      {
                        v314 = 0;
                        v315 = 0;
                        v313 = &v314;
                        v108 = *v105;
                        v299 = (uint64_t)(v105 + 14);
                        if (!*v105)
                          goto LABEL_447;
                        v305 = 0;
                        v109 = 0;
                        v110 = 0;
                        v111 = 0;
                        do
                        {
                          v112 = v110;
                          v113 = *(unsigned int *)(*((_QWORD *)v298 + 4) + 4 * v111);
                          do
                          {
                            v114 = v113;
                            v113 = *(unsigned int *)(*((_QWORD *)v298 + 1) + 4 * v113);
                          }
                          while (v113 != v114);
                          if (v114 == v107)
                          {
                            v309 = v109;
                            if (sub_1C50653CC(v299, v111))
                            {
                              v115 = v309;
                              v110 = v112;
                              if (v309 >= v305)
                              {
                                v117 = v309 - v112;
                                v118 = v117 + 1;
                                if ((unint64_t)(v117 + 1) >> 62)
                                  goto LABEL_448;
                                if (((char *)v305 - (char *)v112) >> 1 > v118)
                                  v118 = ((char *)v305 - (char *)v112) >> 1;
                                v119 = 0x3FFFFFFFFFFFFFFFLL;
                                if ((unint64_t)((char *)v305 - (char *)v112) < 0x7FFFFFFFFFFFFFFCLL)
                                  v119 = v118;
                                v306 = v119;
                                if (v119)
                                {
                                  if (v119 >> 62)
                                    goto LABEL_449;
                                  v120 = (char *)operator new(4 * v119);
                                  v115 = v309;
                                }
                                else
                                {
                                  v120 = 0;
                                }
                                v121 = (unsigned int *)&v120[4 * v117];
                                *v121 = v111;
                                v116 = v121 + 1;
                                while (v115 != v112)
                                {
                                  v122 = *--v115;
                                  *--v121 = v122;
                                }
                                v305 = (unsigned int *)&v120[4 * v306];
                                if (v112)
                                  operator delete(v112);
                                v110 = v121;
                              }
                              else
                              {
                                *v309 = v111;
                                v116 = v309 + 1;
                              }
                              v108 = *v298;
                              v109 = v116;
                              v11 = v312;
                            }
                            else
                            {
                              v110 = v112;
                              v109 = v309;
                            }
                          }
                          else
                          {
                            v110 = v112;
                          }
                          ++v111;
                        }
                        while (v111 != v108);
                        if (v110 == v109)
                        {
                          if (!v109)
                            goto LABEL_447;
                          goto LABEL_201;
                        }
                        v127 = 0;
                        v326[0] = 0;
                        v326[1] = 0;
                        __p = v110;
                        v325 = (uint64_t *)v326;
                        v310 = v109;
LABEL_210:
                        v307 = v110;
                        v128 = *v110;
                        v324 = *v110;
                        if (!v127)
                          goto LABEL_224;
                        v129 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 56)
                                       + 2
                                       * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 8) + 24 * v127 + 8));
                        v130 = (unsigned __int16)*v129;
                        v131 = v130 + v127;
                        v58 = v130 == 0;
                        v132 = *v129 == 0;
                        if (!v58 && v128 != v131)
                        {
                          v134 = v129 + 1;
                          do
                          {
                            v136 = *v134++;
                            v135 = v136;
                            v131 += v136;
                            v132 = v136 == 0;
                            if (!v136)
                              v134 = 0;
                            if (v135)
                              v137 = v128 == v131;
                            else
                              v137 = 1;
                          }
                          while (!v137);
                        }
                        if (!v132)
LABEL_224:
                          v127 = v128;
                        if (sub_1C50653CC(v299, v128))
                        {
                          v296 = v127;
                          v301 = sub_1C50655E4(&v325, v128, &v324);
                          v138 = *(_DWORD *)(*(_QWORD *)(v11 + 32) + 16);
                          v330 = v332;
                          v331 = 0x600000000;
                          sub_1C4765AA4((char *)&v330, (v138 + 63) >> 6, 0);
                          v333 = v138;
                          v139 = sub_1C50654A4(*(_QWORD *)(v11 + 120) + 56, v128);
                          if (v139 != v140)
                          {
                            v141 = v139;
                            v142 = v140;
                            v143 = 1;
                            do
                            {
                              v144 = (_QWORD *)v141[6];
                              if (v144)
                              {
                                llvm::TargetRegisterInfo::getAllocatableSet(*(_QWORD *)(v11 + 32), *(_QWORD *)(v11 + 8), v144, (char *)&v334);
                                if ((v143 & 1) != 0)
                                {
                                  v145 = v338;
                                  if (v333 < v338)
                                  {
                                    v146 = v331;
                                    if ((v333 & 0x3F) != 0)
                                      *(_QWORD *)&v330[8 * v331 - 8] &= ~(-1 << (v333 & 0x3F));
                                    v147 = v146;
                                    v333 = v145;
                                    v148 = v145 + 63;
                                    if ((_DWORD)v146 != (v145 + 63) >> 6)
                                    {
                                      v149 = v148 >> 6;
                                      if (v146 > v149)
                                      {
                                        LODWORD(v331) = v148 >> 6;
                                        v147 = v148 >> 6;
                                      }
                                      else
                                      {
                                        v150 = v146;
                                        if (v149 > HIDWORD(v331))
                                        {
                                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v330, (uint64_t)v332, v148 >> 6, 8);
                                          v150 = v331;
                                          v147 = v331;
                                        }
                                        if (v149 != v146)
                                          bzero(&v330[8 * v150], 8 * (v149 - v146));
                                        v147 += v149 - v146;
                                        LODWORD(v331) = v147;
                                        LOBYTE(v145) = v333;
                                      }
                                    }
                                    v151 = v145 & 0x3F;
                                    v11 = v312;
                                    if (v151)
                                      *(_QWORD *)&v330[8 * v147 - 8] &= ~(-1 << v151);
                                  }
                                  v152 = DWORD2(v334);
                                  if (DWORD2(v334))
                                  {
                                    v153 = (uint64_t *)v334;
                                    v154 = v330;
                                    do
                                    {
                                      v155 = *v153++;
                                      *v154++ |= v155;
                                      --v152;
                                    }
                                    while (v152);
                                  }
                                }
                                else
                                {
                                  v156 = v331;
                                  v157 = DWORD2(v334);
                                  if (DWORD2(v334) >= v331)
                                    v158 = v331;
                                  else
                                    v158 = DWORD2(v334);
                                  if ((_DWORD)v158)
                                  {
                                    v159 = (uint64_t *)v334;
                                    v160 = v330;
                                    v161 = v158;
                                    do
                                    {
                                      v162 = *v159++;
                                      *v160++ &= v162;
                                      --v161;
                                    }
                                    while (v161);
                                  }
                                  if (v156 > v157)
                                  {
                                    v163 = v330;
                                    do
                                    {
                                      *(_QWORD *)&v163[8 * v158] = 0;
                                      LODWORD(v158) = v158 + 1;
                                    }
                                    while (v156 != (_DWORD)v158);
                                  }
                                }
                                if ((_BYTE *)v334 != v335)
                                  free((void *)v334);
                                v143 = 0;
                              }
                              v164 = (uint64_t *)v141[1];
                              if (v164)
                              {
                                do
                                {
                                  v165 = v164;
                                  v164 = (uint64_t *)*v164;
                                }
                                while (v164);
                              }
                              else
                              {
                                do
                                {
                                  v165 = (uint64_t *)v141[2];
                                  v58 = *v165 == (_QWORD)v141;
                                  v141 = v165;
                                }
                                while (!v58);
                              }
                              v141 = v165;
                            }
                            while (v165 != v142);
                          }
                          v166 = v301;
                          v167 = (void **)(v301 + 5);
                          v168 = (uint64_t *)v330;
                          if (v301 + 5 == (uint64_t **)&v330)
                          {
                            v127 = v296;
                          }
                          else
                          {
                            if (v330 == v332)
                            {
                              v169 = v331;
                              v170 = *((unsigned int *)v301 + 12);
                              if (v170 >= v331)
                              {
                                if ((_DWORD)v331)
                                {
                                  memmove(*v167, v332, 8 * v331);
                                  goto LABEL_271;
                                }
                                goto LABEL_272;
                              }
                              if (*((_DWORD *)v301 + 13) < v331)
                              {
                                *((_DWORD *)v301 + 12) = 0;
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v167, (uint64_t)(v301 + 7), v169, 8);
LABEL_280:
                                v170 = 0;
                              }
                              else
                              {
                                if (!(_DWORD)v170)
                                  goto LABEL_280;
                                memmove(*v167, v332, 8 * v170);
                              }
                              if (v170 != v331)
                                memcpy((char *)*v167 + 8 * v170, &v330[8 * v170], 8 * v331 - 8 * v170);
LABEL_271:
                              v166 = v301;
LABEL_272:
                              *((_DWORD *)v166 + 12) = v169;
                            }
                            else
                            {
                              if (v301[5] != (uint64_t *)(v301 + 7))
                              {
                                free(v301[5]);
                                v166 = v301;
                                v168 = (uint64_t *)v330;
                              }
                              v166[5] = v168;
                              v166[6] = (uint64_t *)v331;
                              v330 = v332;
                              HIDWORD(v331) = 0;
                            }
                            v127 = v296;
                            LODWORD(v331) = 0;
                            v168 = (uint64_t *)v330;
                          }
                          *((_DWORD *)v166 + 26) = v333;
                          if (v168 != (uint64_t *)v332)
                            free(v168);
                        }
                        v110 = v307 + 1;
                        if (v307 + 1 == v310)
                        {
                          v171 = __p;
                          while (1)
                          {
                            v172 = *v171;
                            if (*v171 != v127)
                            {
                              v173 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 56)
                                             + 2
                                             * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 8)
                                                               + 24 * v172
                                                               + 8));
                              v174 = (unsigned __int16)*v173;
                              v175 = v174 + v172;
                              v58 = v174 == 0;
                              v176 = *v173 != 0;
                              if (!v58 && v127 != v175)
                              {
                                v178 = v173 + 1;
                                do
                                {
                                  v180 = *v178++;
                                  v179 = v180;
                                  v175 += v180;
                                  v176 = v180 != 0;
                                  if (!v180)
                                    v178 = 0;
                                  if (v179)
                                    v181 = v127 == v175;
                                  else
                                    v181 = 1;
                                }
                                while (!v181);
                              }
                              if (!v176)
                                break;
                            }
                            if (++v171 == v310)
                            {
                              v182 = *(_QWORD *)(v11 + 32);
                              v183 = *(unsigned __int16 *****)(v182 + 240);
                              v184 = *(unsigned __int16 *****)(v182 + 248);
                              v283 = v127;
                              v185 = 0;
                              if (v183 != v184)
                              {
                                v186 = (unint64_t)v127 >> 3;
                                do
                                {
                                  if (v127 - 0x40000000 >= 0xC0000001)
                                  {
                                    v187 = **v183;
                                    if (v186 < *((unsigned __int16 *)v187 + 11)
                                      && ((1 << (v127 & 7)) & *((unsigned __int8 *)v187[1] + v186)) != 0
                                      && (!v185
                                       || *v183 != v185
                                       && ((*(_DWORD *)((char *)v185[1]
                                                      + ((*((unsigned __int16 *)v187 + 12) >> 3) & 0x1FFCLL)) >> *((_WORD *)v187 + 12)) & 1) != 0))
                                    {
                                      v185 = *v183;
                                    }
                                  }
                                  ++v183;
                                }
                                while (v183 != v184);
                              }
                              v297 = v127;
                              v188 = *(_QWORD *)(v11 + 40);
                              v277 = (unint64_t)v185;
                              v189 = *((unsigned __int16 *)*v185 + 12);
                              v190 = *(_QWORD *)v188;
                              if (*(_DWORD *)(v188 + 8) != *(_DWORD *)(*(_QWORD *)v188
                                                                      + 24 * *((unsigned __int16 *)*v185 + 12)))
                                llvm::RegisterClassInfo::compute((uint64_t *)v188, v185);
                              v191 = v190 + 24 * v189;
                              v293 = *(_DWORD *)(v191 + 4);
                              if (v293)
                              {
                                v292 = *(_QWORD *)(v191 + 16);
                                *(_QWORD *)&v334 = v277;
                                DWORD2(v334) = v293;
                                sub_1C50656C4((uint64_t *)&v321, v277, &v334);
                                v192 = v322;
                                for (m = &v322; ; v192 = *m)
                                {
                                  v194 = m;
                                  if (!v192)
                                    break;
                                  while (1)
                                  {
                                    m = (uint64_t **)v192;
                                    v195 = v192[4];
                                    if (v195 > v277)
                                      break;
                                    if (v195 >= v277)
                                      goto LABEL_328;
                                    v192 = m[1];
                                    if (!v192)
                                    {
                                      v194 = m + 1;
                                      goto LABEL_325;
                                    }
                                  }
                                }
LABEL_325:
                                v196 = (uint64_t *)m;
                                m = (uint64_t **)operator new(0x30uLL);
                                m[4] = (uint64_t *)v277;
                                *((_DWORD *)m + 10) = 0;
                                *m = 0;
                                m[1] = 0;
                                m[2] = v196;
                                *v194 = (uint64_t *)m;
                                v197 = (uint64_t *)m;
                                if (*v321)
                                {
                                  v321 = (uint64_t *)*v321;
                                  v197 = *v194;
                                }
                                sub_1C4768E74(v322, v197);
                                ++v323;
LABEL_328:
                                v198 = *((_DWORD *)m + 10);
                                if (v293 == v198)
                                  v199 = 0;
                                else
                                  v199 = *((_DWORD *)m + 10);
                                v291 = v199;
                                do
                                {
                                  v200 = v293;
                                  if (v198)
                                    v200 = v198;
                                  v198 = v200 - 1;
                                  v201 = *(unsigned __int16 *)(v292 + 2 * (v200 - 1));
                                  v202 = *(_QWORD **)(v11 + 16);
                                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v202 + 16) + 176))(*(_QWORD *)(*v202 + 16))
                                                                        + 216)
                                                            + 16)
                                                + v201)
                                    && ((*(_QWORD *)(v202[44] + ((v201 >> 3) & 0x1FF8)) >> v201) & 1) == 0
                                    && v297 != (_DWORD)v201)
                                  {
                                    v294 = v201;
                                    sub_1C47655E8((uint64_t)&v313, v314);
                                    v203 = v201;
                                    v314 = 0;
                                    v315 = 0;
                                    v204 = __p;
                                    v313 = &v314;
                                    v290 = v198;
                                    while (1)
                                    {
                                      v289 = v204;
                                      LODWORD(v334) = *v204;
                                      v205 = v334;
                                      v206 = v203;
                                      v302 = v334;
                                      if ((_DWORD)v334 != v297)
                                      {
                                        v207 = *(_QWORD **)(v11 + 32);
                                        SubRegIndex = llvm::MCRegisterInfo::getSubRegIndex(v207 + 1, v283, v334);
                                        if (SubRegIndex
                                          && (v209 = v207[1],
                                              v210 = v207[7],
                                              v211 = *(unsigned int *)(v209 + 24 * v294 + 4),
                                              *(_WORD *)(v210 + 2 * v211)))
                                        {
                                          v212 = *(_WORD *)(v210 + 2 * v211) + v294;
                                          v213 = (unsigned __int16 *)(v207[11]
                                                                    + 2 * *(unsigned int *)(v209 + 24 * v294 + 12));
                                          v214 = (unsigned __int16 *)(v210 + 2 * v211 + 2);
                                          v205 = v302;
                                          while (SubRegIndex != *v213)
                                          {
                                            v206 = 0;
                                            v215 = *v214++;
                                            v212 += v215;
                                            ++v213;
                                            if (!v215)
                                              goto LABEL_347;
                                          }
                                          v206 = v212;
                                        }
                                        else
                                        {
                                          v206 = 0;
                                          v205 = v302;
                                        }
                                      }
LABEL_347:
                                      if ((((unint64_t)sub_1C50655E4(&v325, v205, &v334)[5][v206 >> 6] >> v206) & 1) == 0)
                                        break;
                                      v216 = *(_QWORD *)(v11 + 120);
                                      v217 = *(_QWORD *)(v216 + 80);
                                      if (*(_DWORD *)(v217 + 4 * v206) != -1
                                        && *(_DWORD *)(*(_QWORD *)(v216 + 104) + 4 * v206) == -1)
                                      {
                                        break;
                                      }
                                      v218 = *(_DWORD *)(*((_QWORD *)v298 + 10) + 4 * v302);
                                      v219 = *((_QWORD *)v298 + 13);
                                      if (v218 > *(_DWORD *)(v219 + 4 * v206))
                                        break;
                                      v220 = *(_QWORD *)(v11 + 32);
                                      if (v220)
                                        v221 = (uint64_t *)(v220 + 8);
                                      else
                                        v221 = 0;
                                      v222 = *v221;
                                      v223 = *(_DWORD *)(*v221 + 24 * v206 + 16) & 0xF;
                                      v224 = ((unint64_t)*(unsigned int *)(*v221 + 24 * v206 + 16) >> 3) & 0x1FFFFFFE;
                                      v227 = v221 + 5;
                                      v226 = v221[5];
                                      v225 = v227[1];
                                      v228 = (_WORD *)(v225 + v224);
                                      v229 = (unsigned __int16)*v228 + v223 * v206;
                                      while (1)
                                      {
                                        ++v228;
                                        LOWORD(v230) = *(_WORD *)(v226 + 4 * (unsigned __int16)v229);
                                        if ((_WORD)v230)
                                          break;
LABEL_363:
                                        v229 += (unsigned __int16)*v228;
                                        if (!*v228)
                                          goto LABEL_381;
                                      }
                                      v231 = *(unsigned __int16 *)(v226 + 4 * (unsigned __int16)v229 + 2);
                                      v232 = v231 << 16;
                                      while (!v225)
                                      {
LABEL_361:
                                        v232 = 0;
                                        LOWORD(v230) = v231;
                                        v58 = (unsigned __int16)v231 == 0;
                                        LOWORD(v231) = 0;
                                        if (v58)
                                          goto LABEL_363;
                                      }
                                      v233 = (unsigned __int16 *)(v225
                                                                + 2
                                                                * *(unsigned int *)(v222
                                                                                  + 24 * (unsigned __int16)v230
                                                                                  + 8));
                                      while (v206 == (unsigned __int16)v230)
                                      {
                                        v234 = *v233++;
                                        LOWORD(v230) = v234 + v230;
                                        if (!v234)
                                          goto LABEL_361;
                                      }
                                      v235 = 0;
LABEL_366:
                                      if (*(_DWORD *)(v217 + 4 * (unsigned __int16)v230) != -1
                                        && *(_DWORD *)(*(_QWORD *)(v216 + 104) + 4 * (unsigned __int16)v230) == -1
                                        || v218 > *(_DWORD *)(v219 + 4 * (unsigned __int16)v230))
                                      {
                                        break;
                                      }
                                      v235 |= v218 > *(_DWORD *)(v219 + 4 * (unsigned __int16)v230);
                                      do
                                      {
                                        v237 = *v233++;
                                        v236 = v237;
                                        if (v237)
                                        {
                                          LOWORD(v230) = v236 + v230;
                                        }
                                        else
                                        {
                                          v230 = HIWORD(v232);
                                          if (HIWORD(v232))
                                          {
                                            v232 >>= 16;
                                          }
                                          else
                                          {
                                            if (!*v228)
                                              goto LABEL_380;
                                            v229 += (unsigned __int16)*v228++;
                                            v238 = (unsigned __int16 *)(v226 + 4 * (unsigned __int16)v229);
                                            v230 = *v238;
                                            v232 = v238[1] << 16;
                                          }
                                          v233 = (unsigned __int16 *)(v225
                                                                    + 2 * *(unsigned int *)(v222 + 24 * v230 + 8));
                                        }
                                      }
                                      while (v206 == (unsigned __int16)v230);
                                      if (v228)
                                        goto LABEL_366;
LABEL_380:
                                      if ((v235 & 1) != 0)
                                        break;
LABEL_381:
                                      v239 = sub_1C50654A4(v299, v302);
                                      if (v239 != v240)
                                      {
                                        v241 = v239;
                                        v242 = v240;
                                        do
                                        {
                                          v243 = *(_QWORD *)(v241[5] + 8);
                                          v244 = llvm::MachineInstr::findRegisterDefOperandIdx(v243, v206, 0, 1, *(_QWORD *)(v11 + 32));
                                          if (v244 != -1
                                            && (*(_BYTE *)(*(_QWORD *)(v243 + 32) + 32 * v244 + 3) & 0x40) != 0)
                                          {
                                            goto LABEL_414;
                                          }
                                          v245 = (uint64_t *)v241[1];
                                          if (v245)
                                          {
                                            do
                                            {
                                              v246 = v245;
                                              v245 = (uint64_t *)*v245;
                                            }
                                            while (v245);
                                          }
                                          else
                                          {
                                            do
                                            {
                                              v246 = (uint64_t *)v241[2];
                                              v58 = *v246 == (_QWORD)v241;
                                              v241 = v246;
                                            }
                                            while (!v58);
                                          }
                                          v241 = v246;
                                        }
                                        while (v246 != v242);
                                      }
                                      v247 = sub_1C50654A4(v299, v302);
                                      if (v247 != v248)
                                      {
                                        v249 = v247;
                                        v250 = v248;
                                        do
                                        {
                                          v251 = v249[5];
                                          if ((~*(_DWORD *)v251 & 0x41000000) == 0
                                            && llvm::MachineInstr::findRegisterUseOperandIdx(*(_QWORD *)(v251 + 8), v206, 0, *(_QWORD *)(v11 + 32)) != -1)
                                          {
                                            goto LABEL_414;
                                          }
                                          v252 = (uint64_t *)v249[1];
                                          if (v252)
                                          {
                                            do
                                            {
                                              v253 = v252;
                                              v252 = (uint64_t *)*v252;
                                            }
                                            while (v252);
                                          }
                                          else
                                          {
                                            do
                                            {
                                              v253 = (uint64_t *)v249[2];
                                              v58 = *v253 == (_QWORD)v249;
                                              v249 = v253;
                                            }
                                            while (!v58);
                                          }
                                          v249 = v253;
                                        }
                                        while (v253 != v250);
                                      }
                                      v254 = v314;
                                      v255 = &v314;
                                      v256 = &v314;
                                      v257 = v310;
                                      v203 = v294;
                                      if (v314)
                                      {
                                        while (1)
                                        {
                                          while (1)
                                          {
                                            v255 = (uint64_t **)v254;
                                            v258 = *((_DWORD *)v254 + 7);
                                            if (v258 <= v302)
                                              break;
                                            v254 = *v255;
                                            v256 = v255;
                                            if (!*v255)
                                              goto LABEL_408;
                                          }
                                          if (v258 >= v302)
                                            break;
                                          v254 = v255[1];
                                          if (!v254)
                                          {
                                            v256 = v255 + 1;
                                            goto LABEL_408;
                                          }
                                        }
                                      }
                                      else
                                      {
LABEL_408:
                                        v259 = operator new(0x28uLL);
                                        v259[7] = v302;
                                        v259[8] = v206;
                                        *(_QWORD *)v259 = 0;
                                        *((_QWORD *)v259 + 1) = 0;
                                        *((_QWORD *)v259 + 2) = v255;
                                        *v256 = (uint64_t *)v259;
                                        if (*v313)
                                        {
                                          v313 = (uint64_t **)*v313;
                                          v260 = *v256;
                                        }
                                        else
                                        {
                                          v260 = (uint64_t *)v259;
                                        }
                                        sub_1C4768E74(v314, v260);
                                        ++v315;
                                        v257 = v310;
                                        v203 = v294;
                                      }
                                      v204 = v289 + 1;
                                      if (v289 + 1 == v257)
                                      {
                                        sub_1C61A6188((uint64_t)&v321, v277);
                                        *(_QWORD *)&v334 = v277;
                                        DWORD2(v334) = v290;
                                        sub_1C50656C4((uint64_t *)&v321, v277, &v334);
                                        sub_1C61D72D8(v326[0]);
                                        if (__p)
                                          operator delete(__p);
                                        v261 = v313;
                                        if (v313 != &v314)
                                        {
                                          do
                                          {
                                            v300 = *((unsigned int *)v261 + 7);
                                            v303 = v261;
                                            v311 = *((unsigned int *)v261 + 8);
                                            v262 = sub_1C50654A4((uint64_t)v279, *((_DWORD *)v261 + 7));
                                            v308 = v263;
                                            if (v262 != v263)
                                            {
                                              v264 = v262;
                                              do
                                              {
                                                llvm::MachineOperand::setReg(v264[5], v311);
                                                *(_QWORD *)&v334 = *(_QWORD *)(v264[5] + 8);
                                                if (sub_1C506577C((uint64_t **)&v318, v334, (uint64_t **)&v334)[5])
                                                {
                                                  v266 = *a6;
                                                  v265 = a6[1];
                                                  if (v265 != *a6)
                                                  {
                                                    v267 = 0;
                                                    v268 = *(_QWORD *)(v264[5] + 8);
                                                    do
                                                    {
                                                      v269 = *(_QWORD *)(v265 - 8);
                                                      if (v269 == v268 || v269 == v267)
                                                      {
                                                        v267 = *(_QWORD *)(v265 - 16);
                                                        sub_1C61D721C(v312, v267, v61, v311);
                                                      }
                                                      else if (v267)
                                                      {
                                                        break;
                                                      }
                                                      v265 -= 16;
                                                    }
                                                    while (v265 != v266);
                                                  }
                                                }
                                                v271 = (uint64_t *)v264[1];
                                                if (v271)
                                                {
                                                  do
                                                  {
                                                    v272 = v271;
                                                    v271 = (uint64_t *)*v271;
                                                  }
                                                  while (v271);
                                                }
                                                else
                                                {
                                                  do
                                                  {
                                                    v272 = (uint64_t *)v264[2];
                                                    v58 = *v272 == (_QWORD)v264;
                                                    v264 = v272;
                                                  }
                                                  while (!v58);
                                                }
                                                v264 = v272;
                                              }
                                              while (v272 != v308);
                                            }
                                            v11 = v312;
                                            sub_1C61D65A0(*(_QWORD **)(v312 + 120), v311, 0);
                                            sub_1C61D727C(v279, v311);
                                            *(_DWORD *)(*(_QWORD *)(v278 + 104) + 4 * v311) = *(_DWORD *)(*(_QWORD *)(v278 + 104) + 4 * v300);
                                            *(_DWORD *)(*(_QWORD *)(v278 + 80) + 4 * v311) = *(_DWORD *)(*(_QWORD *)(v278 + 80) + 4 * v300);
                                            sub_1C61D65A0(*(_QWORD **)(v312 + 120), v300, 0);
                                            sub_1C61D727C(v279, v300);
                                            v273 = *(_QWORD *)(v278 + 80);
                                            *(_DWORD *)(*(_QWORD *)(v278 + 104) + 4 * v300) = *(_DWORD *)(v273 + 4 * v300);
                                            *(_DWORD *)(v273 + 4 * v300) = -1;
                                            v274 = v303;
                                            v275 = v303[1];
                                            if (v275)
                                            {
                                              do
                                              {
                                                v276 = (uint64_t **)v275;
                                                v275 = (uint64_t *)*v275;
                                              }
                                              while (v275);
                                            }
                                            else
                                            {
                                              do
                                              {
                                                v276 = (uint64_t **)v274[2];
                                                v58 = *v276 == (uint64_t *)v274;
                                                v274 = v276;
                                              }
                                              while (!v58);
                                            }
                                            v261 = v276;
                                          }
                                          while (v276 != &v314);
                                        }
                                        ++v280;
                                        goto LABEL_447;
                                      }
                                    }
LABEL_414:
                                    v198 = v290;
                                  }
                                }
                                while (v198 != v291);
                              }
                              break;
                            }
                          }
                          sub_1C61D72D8(v326[0]);
                          v109 = __p;
                          if (!__p)
                          {
LABEL_447:
                            sub_1C47655E8((uint64_t)&v313, v314);
                            continue;
                          }
LABEL_201:
                          operator delete(v109);
                          goto LABEL_447;
                        }
                        goto LABEL_210;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_108:
        ;
      }
    }
    v23 = v288;
    sub_1C61D6C8C((uint64_t *)v11, a4, v288);
    if (v33)
      operator delete(v33);
    sub_1C47655E8((uint64_t)&v316, v317[0]);
    v30 = a3;
    v22 = v287;
    goto LABEL_45;
  }
  v280 = 0;
LABEL_35:
  if (v327 != v329)
    free(v327);
  sub_1C6143384(i);
  sub_1C6143384(v322);
  return v280;
}

_QWORD *sub_1C5065358(_QWORD *a1, unint64_t a2, int *a3)
{
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 62)
      abort();
    v6 = 4 * a2;
    v7 = operator new(4 * a2);
    *a1 = v7;
    v8 = &v7[a2];
    a1[2] = v8;
    v9 = *a3;
    do
    {
      *v7++ = v9;
      v6 -= 4;
    }
    while (v6);
    a1[1] = v8;
  }
  return a1;
}

uint64_t *sub_1C50653CC(uint64_t a1, unsigned int a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v3;
  while (1)
  {
    v5 = *((_DWORD *)v3 + 8);
    if (v5 <= a2)
      break;
    v2 = v3;
LABEL_6:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return v3;
  }
  if (v5 < a2)
  {
    ++v3;
    goto LABEL_6;
  }
  v6 = *v3;
  v7 = v3;
  if (*v3)
  {
    v7 = v3;
    do
    {
      v8 = *(_DWORD *)(v6 + 32);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = (uint64_t *)v6;
      else
        v10 = (uint64_t *)(v6 + 8);
      if (v9)
        v7 = (_QWORD *)v6;
      v6 = *v10;
    }
    while (*v10);
  }
  v11 = v3[1];
  if (v11)
  {
    do
    {
      v12 = *(_DWORD *)(v11 + 32);
      v13 = v12 > a2;
      if (v12 <= a2)
        v14 = (uint64_t *)(v11 + 8);
      else
        v14 = (uint64_t *)v11;
      if (v13)
        v2 = (_QWORD *)v11;
      v11 = *v14;
    }
    while (*v14);
  }
  if (v7 == v2)
    return 0;
  v3 = 0;
  do
  {
    v15 = (_QWORD *)v7[1];
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = (_QWORD *)v7[2];
        v17 = *v16 == (_QWORD)v7;
        v7 = v16;
      }
      while (!v17);
    }
    v3 = (uint64_t *)((char *)v3 + 1);
    v7 = v16;
  }
  while (v16 != v2);
  return v3;
}

uint64_t *sub_1C50654A4(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned int v4;
  uint64_t *result;
  uint64_t *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  while (1)
  {
    v4 = *((_DWORD *)v3 + 8);
    if (v4 <= a2)
      break;
    v2 = v3;
LABEL_6:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return v2;
  }
  if (v4 < a2)
  {
    ++v3;
    goto LABEL_6;
  }
  v6 = (uint64_t *)*v3;
  result = v3;
  if (*v3)
  {
    result = v3;
    do
    {
      v7 = *((_DWORD *)v6 + 8);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        result = v6;
      v6 = *v9;
    }
    while (*v9);
  }
  v10 = v3[1];
  if (v10)
  {
    do
    {
      if (*(_DWORD *)(v10 + 32) <= a2)
        v11 = (uint64_t *)(v10 + 8);
      else
        v11 = (uint64_t *)v10;
      v10 = *v11;
    }
    while (*v11);
  }
  return result;
}

uint64_t *sub_1C5065534(uint64_t **a1, int *a2)
{
  char *v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *result;

  v4 = (char *)operator new(0x38uLL);
  v5 = (uint64_t *)v4;
  v6 = *a2;
  *((_DWORD *)v4 + 8) = *a2;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 2);
  v7 = a1 + 1;
  v8 = (uint64_t **)a1[1];
  if (v8)
  {
    do
    {
      while (1)
      {
        v7 = v8;
        if (v6 >= *((_DWORD *)v8 + 8))
          break;
        v8 = (uint64_t **)*v8;
        v9 = v7;
        if (!*v7)
          goto LABEL_8;
      }
      v8 = (uint64_t **)v8[1];
    }
    while (v8);
    v9 = v7 + 1;
  }
  else
  {
    v9 = a1 + 1;
  }
LABEL_8:
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = v7;
  *v9 = (uint64_t *)v4;
  v10 = (uint64_t *)**a1;
  if (v10)
  {
    *a1 = v10;
    v5 = *v9;
  }
  result = sub_1C4768E74(a1[1], v5);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t **sub_1C50655E4(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x70uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = (uint64_t *)(v7 + 7);
    v7[6] = (uint64_t *)0x600000000;
    *((_DWORD *)v7 + 26) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *sub_1C50656C4(uint64_t *result, unint64_t a2, _OWORD *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = operator new(0x30uLL);
    v9[2] = *a3;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    result = sub_1C4768E74((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

uint64_t **sub_1C506577C(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_1C5065844()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Debug control for aggressive anti-dep breaker";
  v4.n128_u64[1] = 45;
  v3 = &v2;
  v1 = 1;
  v2 = 0;
  sub_1C619A5AC((llvm::cl::Option *)&unk_1ED7F4D68, "agg-antidep-debugdiv", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED7F4D68, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Debug control for aggressive anti-dep breaker";
  v4.n128_u64[1] = 45;
  v1 = 1;
  v2 = 0;
  v3 = &v2;
  sub_1C619A5AC((llvm::cl::Option *)&unk_1ED7F4E28, "agg-antidep-debugmod", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED7F4E28, &dword_1C475E000);
}

void sub_1C506591C(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 ***v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  __int128 v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a2 + 264);
  v8 = *(_QWORD *)(a2 + 272);
  v10 = a1;
  v11 = (unsigned __int16 ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 24) + 16 * (a1 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  v12 = *((unsigned __int16 *)*v11 + 12);
  v13 = *(_QWORD *)a3;
  if (*(_DWORD *)(a3 + 8) != *(_DWORD *)(*(_QWORD *)a3 + 24 * *((unsigned __int16 *)*v11 + 12)))
    llvm::RegisterClassInfo::compute((uint64_t *)a3, v11);
  v14 = v13 + 24 * v12;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(unsigned int *)(v14 + 4);
  v25 = v27;
  v26 = xmmword_1C6612EE0;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 344))(v9, v10, v15, v16, &v25, v8, a2, a4);
  v18 = v17;
  v19 = (void *)(a5 + 24);
  *(_QWORD *)a5 = a5 + 24;
  *(_OWORD *)(a5 + 8) = xmmword_1C6612EE0;
  v20 = v25;
  v21 = v26;
  if (!(_QWORD)v26 || &v25 == (_QWORD **)a5)
    goto LABEL_14;
  if (v25 != v27)
  {
    *(_QWORD *)a5 = v25;
    *(_QWORD *)(a5 + 8) = v21;
    *(_QWORD *)(a5 + 16) = *((_QWORD *)&v26 + 1);
    *(_QWORD *)(a5 + 56) = v15;
    *(_QWORD *)(a5 + 64) = v16;
    if (v17)
      v22 = 0;
    else
      v22 = v16;
    *(_DWORD *)(a5 + 72) = v22;
    return;
  }
  if ((unint64_t)v26 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a5, (void *)(a5 + 24), v26, 2);
    v20 = v25;
    v23 = v26;
    if (!(_QWORD)v26)
      goto LABEL_13;
    v19 = *(void **)a5;
  }
  else
  {
    v23 = v26;
    v20 = v27;
  }
  memcpy(v19, v20, 2 * v23);
  v20 = v25;
LABEL_13:
  *(_QWORD *)(a5 + 8) = v21;
  *(_QWORD *)&v26 = 0;
LABEL_14:
  *(_QWORD *)(a5 + 56) = v15;
  *(_QWORD *)(a5 + 64) = v16;
  if (v20 == v27 && v18 != 1)
  {
    *(_DWORD *)(a5 + 72) = v16;
  }
  else
  {
    if (v18)
      v24 = 0;
    else
      v24 = v16;
    *(_DWORD *)(a5 + 72) = v24;
    if (v20 != v27)
      free(v20);
  }
}

const unsigned int *llvm::ComputeLinearIndex(llvm *a1, _DWORD *a2, _DWORD *a3, const unsigned int *a4, unsigned int a5)
{
  _DWORD *v7;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm *v16;
  int v17;

  v7 = a2;
  v9 = a2 != 0;
  if (!a2)
    goto LABEL_3;
  while (v7 != a3)
  {
LABEL_3:
    v10 = *((unsigned __int8 *)a1 + 8);
    if (a1 && v10 == 16)
    {
      v11 = *((unsigned int *)a1 + 3);
      if (!(_DWORD)v11)
        return a4;
      v12 = 0;
      v13 = *((_QWORD *)a1 + 2);
      v14 = 8 * v11;
      while (1)
      {
        a1 = *(llvm **)(v13 + 8 * v12);
        if (v9 && v12 == *v7)
          break;
        a4 = (const unsigned int *)llvm::ComputeLinearIndex(*(llvm **)(v13 + 8 * v12++), 0, 0, a4, a5);
        v14 -= 8;
        if (!v14)
          return a4;
      }
    }
    else
    {
      if (!a1 || v10 != 17)
        return (const unsigned int *)((_DWORD)a4 + 1);
      v16 = (llvm *)*((_QWORD *)a1 + 3);
      v17 = llvm::ComputeLinearIndex(v16, 0, 0, 0, a5);
      if (!v9)
        return (const unsigned int *)((_DWORD)a4 + v17 * *((_DWORD *)a1 + 8));
      a4 = (const unsigned int *)((_DWORD)a4 + *v7 * v17);
      a1 = v16;
    }
    ++v7;
    v9 = 1;
  }
  return a4;
}

void llvm::ComputeValueVTs(uint64_t a1, llvm::DataLayout *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14;
  llvm::StructLayout *StructLayout;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v14 = *(unsigned __int8 *)(a3 + 8);
  if (a3 && v14 == 16)
  {
    if (a6)
      StructLayout = llvm::DataLayout::getStructLayout(a2, (llvm::StructType *)a3);
    else
      StructLayout = 0;
    v32 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v32)
    {
      v33 = *(uint64_t **)(a3 + 16);
      v34 = (uint64_t *)((char *)StructLayout + 16);
      v35 = 8 * v32;
      do
      {
        if (StructLayout)
          v36 = *v34;
        else
          v36 = 0;
        v37 = *v33++;
        llvm::ComputeValueVTs(a1, a2, v37, a4, a5, a6, v36 + a7);
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  else if (a3 && v14 == 17)
  {
    v16 = *(_QWORD *)(a3 + 24);
    sub_1C4768AD0((uint64_t)a2, v16);
    v18 = v17;
    llvm::DataLayout::getAlignment((uint64_t)a2, v16);
    v20 = *(unsigned int *)(a3 + 32);
    if (v20)
    {
      v21 = ((1 << v19) + ((unint64_t)(v18 + 7) >> 3) - 1) & -(1 << v19);
      do
      {
        llvm::ComputeValueVTs(a1, a2, v16, a4, a5, a6, a7);
        a7 += v21;
        --v20;
      }
      while (v20);
    }
  }
  else if (v14 != 7)
  {
    v23 = sub_1C47A7FD0(a1, (uint64_t)a2, a3, 0);
    v24 = *(unsigned int *)(a4 + 8);
    if (v24 >= *(_DWORD *)(a4 + 12))
    {
      v38 = v22;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v24 + 1, 16);
      v22 = v38;
      LODWORD(v24) = *(_DWORD *)(a4 + 8);
    }
    v25 = (unint64_t *)(*(_QWORD *)a4 + 16 * v24);
    *v25 = v23;
    v25[1] = v22;
    ++*(_DWORD *)(a4 + 8);
    if (a5)
    {
      v26 = sub_1C5065E80(a1, (uint64_t)a2, a3, 0);
      v28 = v27;
      v29 = *(unsigned int *)(a5 + 8);
      if (v29 >= *(_DWORD *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v29 + 1, 16);
        LODWORD(v29) = *(_DWORD *)(a5 + 8);
      }
      v30 = (unint64_t *)(*(_QWORD *)a5 + 16 * v29);
      *v30 = v26;
      v30[1] = v28;
      ++*(_DWORD *)(a5 + 8);
    }
    if (a6)
    {
      v31 = *(unsigned int *)(a6 + 8);
      if (v31 >= *(_DWORD *)(a6 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v31 + 1, 8);
        LODWORD(v31) = *(_DWORD *)(a6 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a6 + 8 * v31) = a7;
      ++*(_DWORD *)(a6 + 8);
    }
  }
}

unint64_t sub_1C5065E80(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Type *a4)
{
  unint64_t v5;
  unint64_t v6;
  llvm::EVT *v7;
  llvm::EVT *v8;
  llvm::LLVMContext *v9;
  unint64_t EVT;
  uint64_t v11;
  char v13[8];
  uint64_t v14;

  if (a3 && *(_DWORD *)(a3 + 8) == 15)
  {
    LOBYTE(v5) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *(_DWORD *)(a3 + 8) >> 8);
    v6 = 0;
  }
  else if (a3 && (*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
  {
    v7 = *(llvm::EVT **)(a3 + 24);
    if (v7 && *((_DWORD *)v7 + 2) == 15)
    {
      v13[0] = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *((_DWORD *)v7 + 2) >> 8);
      v14 = 0;
      llvm::EVT::getTypeForEVT((llvm::EVT *)v13, *(llvm::LLVMContext **)a3);
      v7 = v8;
    }
    v9 = *(llvm::LLVMContext **)a3;
    EVT = llvm::EVT::getEVT(v7, 0, a3);
    v5 = sub_1C47AC578(v9, EVT, v11, (llvm::Type *)(*(unsigned int *)(a3 + 32) | ((unint64_t)(*(_BYTE *)(a3 + 8) == 19) << 32)));
    v6 = v5 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    v5 = sub_1C47A7FD0(a1, a2, a3, a4);
    v6 = v5 & 0xFFFFFFFFFFFFFF00;
  }
  return v6 | v5;
}

void llvm::ComputeValueVTs(uint64_t a1, llvm::DataLayout *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  llvm::ComputeValueVTs(a1, a2, a3, a4, 0, a5, a6);
}

void llvm::computeValueLLTs(llvm::DataLayout *a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  int v5;
  llvm::StructLayout *StructLayout;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t LLTForType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *(unsigned __int8 *)(a2 + 8);
  if (v5 != 7)
  {
    if (v5 == 17)
    {
      v12 = *(_QWORD *)(a2 + 24);
      sub_1C4768AD0((uint64_t)a1, v12);
      v14 = v13;
      llvm::DataLayout::getAlignment((uint64_t)a1, v12);
      v16 = *(unsigned int *)(a2 + 32);
      if (v16)
      {
        v17 = ((1 << v15) + ((unint64_t)(v14 + 7) >> 3) - 1) & -(1 << v15);
        do
        {
          llvm::computeValueLLTs(a1, v12, a3, a4, a5);
          a5 += v17;
          --v16;
        }
        while (v16);
      }
    }
    else if (v5 == 16)
    {
      if (a4)
        StructLayout = llvm::DataLayout::getStructLayout(a1, (llvm::StructType *)a2);
      else
        StructLayout = 0;
      v22 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v22)
      {
        v23 = 0;
        v24 = 8 * v22;
        do
        {
          if (StructLayout)
            v25 = *(_QWORD *)((char *)StructLayout + v23 + 16);
          else
            v25 = 0;
          llvm::computeValueLLTs(a1, *(_QWORD *)(*(_QWORD *)(a2 + 16) + v23), a3, a4, v25 + a5);
          v23 += 8;
        }
        while (v24 != v23);
      }
    }
    else
    {
      LLTForType = llvm::getLLTForType((llvm *)a2, a1, (const llvm::DataLayout *)a3);
      v19 = a3[2];
      if (v19 >= a3[3])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), v19 + 1, 8);
        LODWORD(v19) = a3[2];
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v19) = LLTForType;
      ++a3[2];
      if (a4)
      {
        v20 = 8 * a5;
        v21 = *(unsigned int *)(a4 + 8);
        if (v21 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v21 + 1, 8);
          LODWORD(v21) = *(_DWORD *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v21) = v20;
        ++*(_DWORD *)(a4 + 8);
      }
    }
  }
}

llvm::Value *llvm::ExtractTypeInfo(llvm *this, llvm::Value *a2)
{
  llvm::Value *result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;

  result = llvm::Value::stripPointerCasts(this);
  v3 = (uint64_t)result;
  v4 = *((unsigned __int8 *)result + 16);
  if (v4 >= 4)
    result = 0;
  if (v3 && v4 == 3 && (*(_BYTE *)(v3 + 23) & 0x10) != 0)
  {
    v5 = ***(_QWORD ***)v3;
    v6 = *(_QWORD *)(v5 + 152);
    v7 = *(unsigned int *)(v5 + 168);
    if ((_DWORD)v7)
    {
      LODWORD(v8) = (v7 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      v9 = (uint64_t *)(v6 + 16 * v8);
      v10 = *v9;
      if (*v9 == v3)
        goto LABEL_13;
      v11 = 1;
      while (v10 != -4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v7 - 1);
        v10 = *(_QWORD *)(v6 + 16 * v8);
        if (v10 == v3)
        {
          v9 = (uint64_t *)(v6 + 16 * v8);
          goto LABEL_13;
        }
      }
    }
    v9 = (uint64_t *)(v6 + 16 * v7);
LABEL_13:
    v13 = (_QWORD *)v9[1];
    if (*v13 == 23)
    {
      v14 = v13[2];
      v15 = v13[3];
      v16 = *(_QWORD *)((char *)v13 + 31);
      if (v14 == 0x2E68652E6D766C6CLL && v15 == 0x6C612E6863746163 && v16 == 0x65756C61762E6C6CLL)
      {
        v19 = *(_QWORD *)(v3 - 32);
        if (*(unsigned __int8 *)(v19 + 16) >= 4u)
          return 0;
        else
          return (llvm::Value *)v19;
      }
    }
  }
  return result;
}

uint64_t llvm::getICmpCondCode(int a1)
{
  return dword_1C85FA5AC[a1 - 32];
}

{
  return dword_1C85FA5D4[a1 - 10];
}

uint64_t llvm::isInTailCallPosition(llvm *this, const llvm::CallBase *a2, const llvm::TargetMachine *a3)
{
  uint64_t v5;
  _QWORD **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  const llvm::Instruction *v10;
  _QWORD *v11;
  uint64_t v12;
  llvm *v13;
  uint64_t result;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  uint64_t v33;
  uint64_t **v34;
  uint64_t v35;
  const char **v36;
  const llvm::TargetLoweringBase *v37;
  BOOL *v38;
  int v39;
  __int32 v41;

  v5 = *((_QWORD *)this + 5);
  v6 = *(_QWORD ***)(v5 + 40);
  if (v6 == (_QWORD **)(v5 + 40))
  {
    v8 = 0;
  }
  else
  {
    v7 = (unsigned __int8 *)(v6 - 3);
    if (!v6)
      v7 = 0;
    if (v7[16] - 29 >= 0xB)
      v8 = 0;
    else
      v8 = v7;
  }
  v9 = v8[16];
  if (v9 == 29)
    v10 = (const llvm::Instruction *)v8;
  else
    v10 = 0;
  if (!v10)
  {
    if ((*((_WORD *)a2 + 510) & 0x200) == 0)
    {
      v39 = (*((unsigned __int16 *)this + 9) >> 2) & 0x3FF;
      if (v39 != 20 && v39 != 18)
        return 0;
    }
    if (v9 != 35)
      return 0;
  }
  v11 = *v6;
  v12 = (uint64_t)(*v6 - 3);
  if (v11)
    v13 = (llvm *)v12;
  else
    v13 = 0;
  if (v13 == this)
  {
LABEL_79:
    v34 = *(uint64_t ***)(v5 + 56);
    v35 = (*(uint64_t (**)(const llvm::CallBase *, uint64_t **))(*(_QWORD *)a2 + 16))(a2, v34);
    v36 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 120))(v35);
    return llvm::returnTypeIsEligibleForTailCall(v34, this, v10, v36, v37, v38);
  }
  while (1)
  {
    if (sub_1C4D99D08((uint64_t)v13) || sub_1C509DDB0((uint64_t)v13))
      goto LABEL_55;
    result = 0;
    v15 = v11 ? (uint64_t)(v11 - 3) : 0;
    v16 = *(unsigned __int8 *)(v15 + 16);
    if (v16 <= 0x3B)
      break;
    v17 = v16 - 60;
    if (v17 <= 0x1C)
    {
      if (v17 != 24)
      {
        if (((1 << v17) & 0x1010003A) != 0)
          return result;
        if (!v17 && (*(_WORD *)(v15 + 18) & 0x301) != 0)
          return 0;
        goto LABEL_32;
      }
      v18 = *(_QWORD *)(v15 - 32);
      if (v18)
      {
        if (!*(_BYTE *)(v18 + 16) && *(_QWORD *)(v18 + 24) == *(_QWORD *)(v15 + 72))
        {
          if (v11)
          {
            if ((*(_DWORD *)(v18 + 32) & 0x2000) != 0)
            {
              v23 = *(_DWORD *)(*(v11 - 7) + 36);
              if (v23 == 7 || v23 == 126 || v23 == 167)
                goto LABEL_55;
            }
          }
        }
      }
      goto LABEL_27;
    }
LABEL_32:
    if ((llvm::Instruction::mayThrow((llvm::Instruction *)v15) & 1) != 0)
      return 0;
    result = llvm::Instruction::willReturn((llvm::Instruction *)v15);
    if (!(_DWORD)result)
      return result;
    v21 = *(unsigned __int8 *)(v15 + 16) - 33;
    if (v21 <= 0x37)
    {
      if (((1 << (*(_BYTE *)(v15 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v22 = *(_QWORD *)(v15 + 64);
        if (!v22 || (*(_BYTE *)(v22 + 20) & 4) == 0 && (*(_BYTE *)(v22 + 17) & 0x10) == 0)
        {
          v41 = 7;
          if (sub_1C53E4BBC(v15, &v41, 1uLL))
          {
            v33 = *(_QWORD *)(v15 - 32);
            if (!v33
              || *(_BYTE *)(v33 + 16)
              || *(_QWORD *)(v33 + 24) != *(_QWORD *)(v15 + 72)
              || *(_DWORD *)(v33 + 36) != 7)
            {
              return 0;
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v15, 66) & 1) == 0)
          {
            result = llvm::CallBase::hasFnAttrOnCalledFunction(v15, 44);
            if (!(_DWORD)result)
              return result;
          }
        }
      }
      else if (((1 << (*(_BYTE *)(v15 + 16) - 33)) & 0x808001C8000010) != 0
             || v21 == 28 && (*(_WORD *)(v15 + 18) & 0x301) != 0)
      {
        return 0;
      }
    }
    result = llvm::isSafeToSpeculativelyExecute(v15, 0, 0, 0);
    if (!(_DWORD)result)
      return result;
LABEL_55:
    v11 = (_QWORD *)*v11;
    if (v11)
      v13 = (llvm *)(v11 - 3);
    else
      v13 = 0;
    if (v13 == this)
      goto LABEL_79;
  }
  if (v16 == 37)
    return result;
  if (v16 != 33 && v16 != 39)
    goto LABEL_32;
LABEL_27:
  v19 = *(_QWORD *)(v15 + 64);
  if (v19 && (*(_BYTE *)(v19 + 17) & 0x30) != 0)
    goto LABEL_32;
  v20 = *(_DWORD *)(v15 + 20);
  if ((v20 & 0x80000000) == 0
    || (v24 = v15 - 32 * (v20 & 0x7FFFFFF), v27 = *(_QWORD *)(v24 - 8), v25 = v24 - 8, (v26 = v27) == 0))
  {
LABEL_30:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v15, 45) & 1) == 0)
    {
      result = llvm::CallBase::hasFnAttrOnCalledFunction(v15, 44);
      if (!(_DWORD)result)
        return result;
    }
    goto LABEL_32;
  }
  v28 = -v26;
  while (1)
  {
    v29 = *(_DWORD *)(*(_QWORD *)(v25 + v28) + 8);
    v30 = v29 > 7;
    v31 = (1 << v29) & 0x83;
    if (v30 || v31 == 0)
      return 0;
    v28 += 16;
    if (!v28)
      goto LABEL_30;
  }
}

uint64_t llvm::returnTypeIsEligibleForTailCall(uint64_t **this, const llvm::Function *a2, const llvm::Instruction *a3, const char **a4, const llvm::TargetLoweringBase *a5, BOOL *a6)
{
  uint64_t v7;
  uint64_t v8;
  llvm::UndefValue *v11;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  char v16;
  llvm::Type *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  BOOL v24;
  llvm::UndefValue **v25;
  llvm::UndefValue *v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned __int8 *v29;
  int v30;
  _BOOL4 v31;
  const char **v32;
  int v33;
  const char *v34;
  int v35;
  BOOL v36;
  int v37;
  const char *v38;
  const char *v39;
  uint64_t *v41;
  int v42;
  unsigned __int8 v43;
  unsigned int v44;
  unsigned int v45;
  void *__s1;
  uint64_t v47;
  _BYTE v48[16];
  void *__s2;
  uint64_t v50;
  _BYTE v51[16];
  void *v52[2];
  _BYTE v53[32];
  void *v54;
  uint64_t v55;
  _BYTE v56[32];
  _BYTE *v57;
  uint64_t v58;
  _BYTE v59[16];
  unsigned int *v60;
  uint64_t v61;
  _QWORD v62[4];

  v62[2] = *MEMORY[0x1E0C80C00];
  if (!a3
    || (v7 = *((_DWORD *)a3 + 5) & 0x7FFFFFF, !(_DWORD)v7)
    || *(unsigned __int8 *)(*((_QWORD *)a3 - 4 * v7) + 16) - 11 < 2)
  {
LABEL_4:
    LOBYTE(v8) = 1;
    return v8 & 1;
  }
  v11 = a2;
  v43 = 0;
  LOBYTE(v8) = 0;
  if (!llvm::attributesPermitTailCall(this, a2, a3, (const llvm::ReturnInst *)a4, (const llvm::TargetLoweringBase *)&v43, a6))return v8 & 1;
  v13 = (uint64_t *)*((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
  v14 = *((_QWORD *)v11 - 4);
  if (v14 && !*(_BYTE *)(v14 + 16) && *(_QWORD *)(v14 + 24) == *((_QWORD *)v11 + 9))
  {
    v32 = a4 + 22135;
    v33 = *(_DWORD *)(v14 + 36);
    switch(v33)
    {
      case 199:
        v38 = a4[22137];
        if (!v38 || strlen(a4[22137]) != 6)
          goto LABEL_10;
        v35 = *((unsigned __int16 *)v38 + 2);
        v36 = *(_DWORD *)v38 == 1936549229;
        v37 = 29797;
        break;
      case 197:
        v39 = a4[22136];
        if (!v39 || strlen(a4[22136]) != 7)
          goto LABEL_10;
        v35 = *(_DWORD *)(v39 + 3);
        v36 = *(_DWORD *)v39 == 1835885933;
        v37 = 1702260589;
        break;
      case 194:
        v34 = *v32;
        if (!*v32 || strlen(*v32) != 6)
          goto LABEL_10;
        v35 = *((unsigned __int16 *)v34 + 2);
        v36 = *(_DWORD *)v34 == 1668113773;
        v37 = 31088;
        break;
      default:
        goto LABEL_10;
    }
    if (v36 && v35 == v37)
    {
      v41 = (uint64_t *)*((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
      if (v13 == v41
        || v41
        && *((_BYTE *)v41 + 16) == 77
        && *(_BYTE *)(*v13 + 8) == 15
        && *(_BYTE *)(*v41 + 8) == 15
        && (uint64_t *)*(v41 - 4) == v13)
      {
        goto LABEL_4;
      }
    }
  }
LABEL_10:
  v60 = (unsigned int *)v62;
  v61 = 0x400000000;
  v57 = v59;
  v58 = 0x400000000;
  v54 = v56;
  v55 = 0x400000000;
  v52[0] = v53;
  v52[1] = (void *)0x400000000;
  v15 = sub_1C5066E1C(*v13, (uint64_t)&v54, (uint64_t)&v60);
  v16 = sub_1C5066E1C(*(_QWORD *)v11, (uint64_t)v52, (uint64_t)&v57);
  if (v15)
  {
    LOBYTE(v18) = v16 ^ 1;
    v19 = 1;
    while (1)
    {
      if ((v18 & 1) == 0)
        goto LABEL_26;
      v20 = *((_QWORD *)v54 + v55 - 1);
      v21 = v60[v61 - 1];
      v22 = *(unsigned __int8 *)(v20 + 8);
      if (v20)
        v23 = v22 == 17;
      else
        v23 = 0;
      if (v23)
      {
        if (*(_QWORD *)(v20 + 32) <= v21)
          goto LABEL_46;
        v25 = (llvm::UndefValue **)(v20 + 24);
      }
      else
      {
        if (v20)
          v24 = v22 == 16;
        else
          v24 = 0;
        if (!v24 || v21 >= *(_DWORD *)(v20 + 12))
        {
LABEL_46:
          v26 = 0;
          goto LABEL_25;
        }
        v25 = (llvm::UndefValue **)(*(_QWORD *)(v20 + 16) + 8 * v21);
      }
      v26 = *v25;
LABEL_25:
      v11 = llvm::UndefValue::get(v26, v17);
LABEL_26:
      __s2 = v51;
      v50 = 0x400000000;
      sub_1C61D7360((unsigned int *)&__s2, (uint64_t)&v60[v61], (uint64_t)&v60[v61], (uint64_t)v60, (uint64_t)v60);
      __s1 = v48;
      v47 = 0x400000000;
      sub_1C61D7360((unsigned int *)&__s1, (uint64_t)&v57[4 * v58], (uint64_t)&v57[4 * v58], (uint64_t)v57, (uint64_t)v57);
      v42 = v43;
      v27 = (uint64_t)(this[5] + 34);
      v45 = -1;
      v28 = v13;
      v29 = (unsigned __int8 *)sub_1C506773C((llvm::GetElementPtrInst *)v13, (unsigned int *)&__s2, &v45, (uint64_t)a4, v27);
      if (v29[16] - 11 > 1)
      {
        v44 = -1;
        if (sub_1C506773C(v11, (unsigned int *)&__s1, &v44, (uint64_t)a4, v27) != (llvm::GetElementPtrInst *)v29
          || (_DWORD)v47 != (_DWORD)v50
          || memcmp(__s1, __s2, 4 * v47))
        {
          v30 = 0;
          v8 = 0;
          goto LABEL_32;
        }
        v30 = 0;
        v31 = v42 != 0;
        if (v44 == v45)
          v31 = 1;
        v8 = 0;
        if (v44 < v45 || !v31)
          goto LABEL_32;
      }
      v18 = sub_1C5066F94((uint64_t)v52, (uint64_t)&v57) ^ 1;
      v30 = 1;
      v8 = v19;
LABEL_32:
      if (__s1 != v48)
        free(__s1);
      if (__s2 != v51)
        free(__s2);
      if (!v30)
        goto LABEL_48;
      v19 = v8;
      v13 = v28;
      if ((sub_1C5066F94((uint64_t)&v54, (uint64_t)&v60) & 1) == 0)
      {
        LOBYTE(v8) = 1;
        goto LABEL_48;
      }
    }
  }
  LOBYTE(v8) = 1;
LABEL_48:
  if (v52[0] != v53)
    free(v52[0]);
  if (v54 != v56)
    free(v54);
  if (v57 != v59)
    free(v57);
  if (v60 != (unsigned int *)v62)
    free(v60);
  return v8 & 1;
}

BOOL llvm::attributesPermitTailCall(uint64_t **this, const llvm::Function *a2, const llvm::Instruction *a3, const llvm::ReturnInst *a4, const llvm::TargetLoweringBase *a5, BOOL *a6)
{
  uint64_t *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t i;
  int v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[64];
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[9];

  v36[8] = *MEMORY[0x1E0C80C00];
  v9 = this[14];
  if (v9 && *((char *)v9 + 31) < 0)
    return 0;
  if (a5)
    *(_BYTE *)a5 = 1;
  if (v9 && *((_DWORD *)v9 + 2) > 1u)
  {
    v27 = v9[6];
    v33 = **this;
    v34 = v36;
    v35 = 0x800000000;
    if (v27)
    {
      v10 = (char *)(v27 + 48);
      v11 = (char *)(v27 + 48 + 8 * *(unsigned int *)(v27 + 8));
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v33 = **this;
    v34 = v36;
    v35 = 0x800000000;
  }
  sub_1C53321EC((unsigned int *)&v34, (uint64_t)v36, v10, v11);
  v12 = *((_QWORD *)a2 + 8);
  if (v12 && *(_DWORD *)(v12 + 8) > 1u)
  {
    v28 = *(_QWORD *)(v12 + 48);
    v29 = **this;
    v30 = v32;
    v31 = 0x800000000;
    if (v28)
    {
      v13 = (char *)(v28 + 48);
      v14 = (char *)(v28 + 48 + 8 * *(unsigned int *)(v28 + 8));
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v29 = **this;
    v30 = v32;
    v31 = 0x800000000;
  }
  sub_1C53321EC((unsigned int *)&v30, (uint64_t)v32, v13, v14);
  for (i = 0; i != 6; ++i)
  {
    v16 = dword_1C85FA55C[i];
    llvm::AttrBuilder::removeAttribute((uint64_t)&v33, v16);
    llvm::AttrBuilder::removeAttribute((uint64_t)&v29, v16);
  }
  if (llvm::AttrBuilder::getAttribute((uint64_t)&v33, 67))
  {
    if (llvm::AttrBuilder::getAttribute((uint64_t)&v29, 67))
    {
      v17 = 67;
      if (!a5)
      {
LABEL_17:
        llvm::AttrBuilder::removeAttribute((uint64_t)&v33, v17);
        llvm::AttrBuilder::removeAttribute((uint64_t)&v29, v17);
        goto LABEL_22;
      }
LABEL_16:
      *(_BYTE *)a5 = 0;
      goto LABEL_17;
    }
    goto LABEL_33;
  }
  if (llvm::AttrBuilder::getAttribute((uint64_t)&v33, 48))
  {
    if (llvm::AttrBuilder::getAttribute((uint64_t)&v29, 48))
    {
      v17 = 48;
      if (!a5)
        goto LABEL_17;
      goto LABEL_16;
    }
LABEL_33:
    v24 = 0;
    goto LABEL_34;
  }
LABEL_22:
  if (!*((_QWORD *)a2 + 1))
  {
    llvm::AttrBuilder::removeAttribute((uint64_t)&v29, 48);
    llvm::AttrBuilder::removeAttribute((uint64_t)&v29, 67);
  }
  if ((_DWORD)v35 != (_DWORD)v31)
    goto LABEL_33;
  if ((_DWORD)v35)
  {
    v18 = (uint64_t *)v34;
    v19 = (uint64_t *)v30;
    v20 = 8 * v35 - 8;
    do
    {
      v22 = *v19++;
      v21 = v22;
      v23 = *v18++;
      v24 = v23 == v21;
      v25 = v23 != v21 || v20 == 0;
      v20 -= 8;
    }
    while (!v25);
  }
  else
  {
    v24 = 1;
  }
LABEL_34:
  if (v30 != v32)
    free(v30);
  if (v34 != v36)
    free(v34);
  return v24;
}

uint64_t sub_1C5066E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  _BOOL8 v17;

  v6 = a2 + 16;
  v7 = a3 + 16;
  while (1)
  {
    v8 = *(unsigned __int8 *)(a1 + 8);
    if (!a1 || v8 != 17)
      break;
    if (!*(_QWORD *)(a1 + 32))
      goto LABEL_16;
    v9 = (uint64_t *)(a1 + 24);
LABEL_8:
    v10 = *v9;
    if (!*v9)
      goto LABEL_16;
    v11 = *(unsigned int *)(a2 + 8);
    if (v11 >= *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v6, v11 + 1, 8);
      v11 = *(unsigned int *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = a1;
    ++*(_DWORD *)(a2 + 8);
    v12 = *(unsigned int *)(a3 + 8);
    if (v12 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v7, v12 + 1, 4);
      v12 = *(unsigned int *)(a3 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a3 + 4 * v12) = 0;
    ++*(_DWORD *)(a3 + 8);
    a1 = v10;
  }
  if (a1 && v8 == 16 && *(_DWORD *)(a1 + 12))
  {
    v9 = *(uint64_t **)(a1 + 16);
    goto LABEL_8;
  }
LABEL_16:
  if (!*(_DWORD *)(a3 + 8))
    return 1;
  do
  {
    v13 = *(_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8) - 8);
    if (v13)
      v14 = *(_BYTE *)(v13 + 8) == 17;
    else
      v14 = 0;
    if (v14)
      v15 = v13 + 24;
    else
      v15 = *(_QWORD *)(v13 + 16) + 8 * *(unsigned int *)(*(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8) - 4);
    v16 = *(_DWORD *)(*(_QWORD *)v15 + 8) & 0xFE;
    v17 = v16 != 16;
  }
  while (v16 == 16 && (sub_1C5067540(a2, a3) & 1) != 0);
  return v17;
}

uint64_t sub_1C5066F94(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  do
  {
    result = sub_1C5067540(a1, a2);
    if (!(_DWORD)result)
      break;
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8) - 8);
    v6 = v5 && *(_BYTE *)(v5 + 8) == 17;
    v7 = v6
       ? v5 + 24
       : *(_QWORD *)(v5 + 16) + 8 * *(unsigned int *)(*(_QWORD *)a2 + 4 * *(unsigned int *)(a2 + 8) - 4);
  }
  while ((*(_DWORD *)(*(_QWORD *)v7 + 8) & 0xFE) == 0x10);
  return result;
}

void llvm::getEHScopeMembership(llvm *this@<X0>, const llvm::MachineFunction *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  llvm::Value **v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void **v15;
  unint64_t FirstTerminator;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[256];
  void *v36;
  uint64_t v37;
  _BYTE v38[128];
  void *v39;
  uint64_t v40;
  _BYTE v41[128];
  uint64_t *v42;
  uint64_t v43;
  _QWORD v44[18];

  v44[16] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if (!*((_BYTE *)this + 635))
    return;
  v5 = *(_QWORD *)this;
  v6 = *(_DWORD *)(*(_QWORD *)this + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(llvm::Value ***)(v5 - 8);
  else
    v7 = (llvm::Value **)(v5 - 32 * (v6 & 0x7FFFFFF));
  v8 = *(_DWORD *)(*((_QWORD *)this + 41) + 24);
  v9 = llvm::classifyEHPersonality(*v7, a2);
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  v42 = v44;
  v43 = 0x1000000000;
  v39 = v41;
  v40 = 0x1000000000;
  v36 = v38;
  v37 = 0x1000000000;
  v33 = v35;
  v34 = 0x1000000000;
  v11 = *((_QWORD *)this + 41);
  if ((llvm *)v11 == (llvm *)((char *)this + 320))
    goto LABEL_42;
  v12 = v10;
  v13 = v9 - 7;
  do
  {
    if (*(_BYTE *)(v11 + 187))
    {
      v14 = v43;
      v15 = (void **)&v42;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v43 + 1, 8);
        v14 = v43;
      }
    }
    else if (v13 <= 1 && *(_BYTE *)(v11 + 184))
    {
      v14 = v37;
      v15 = &v36;
      if (v37 >= (unint64_t)HIDWORD(v37))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v37 + 1, 8);
        v14 = v37;
      }
    }
    else
    {
      if (*(_QWORD *)(v11 + 64) != *(_QWORD *)(v11 + 72))
        goto LABEL_11;
      v14 = v40;
      v15 = &v39;
      if (v40 >= (unint64_t)HIDWORD(v40))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v40 + 1, 8);
        v14 = v40;
      }
    }
    *((_QWORD *)*v15 + v14) = v11;
    ++*((_DWORD *)v15 + 2);
LABEL_11:
    FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v11);
    if (v11 + 48 != FirstTerminator && *(_DWORD *)(v12 + 72) == **(unsigned __int16 **)(FirstTerminator + 16))
    {
      v17 = *(_QWORD *)(FirstTerminator + 32);
      v18 = v8;
      if (v13 >= 2)
        v18 = *(_DWORD *)(*(_QWORD *)(v17 + 48) + 24);
      v19 = *(_QWORD *)(v17 + 16);
      v20 = v34;
      if (v34 >= (unint64_t)HIDWORD(v34))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v35, v34 + 1, 16);
        v20 = v34;
      }
      v21 = (char *)v33 + 16 * v20;
      *v21 = v19;
      v21[1] = v18;
      LODWORD(v34) = v34 + 1;
    }
    v11 = *(_QWORD *)(v11 + 8);
  }
  while ((llvm *)v11 != (llvm *)((char *)this + 320));
  if ((_DWORD)v43)
  {
    sub_1C50673C4(a3, v8, *((_QWORD *)this + 41));
    if ((_DWORD)v40)
    {
      v22 = (uint64_t *)v39;
      v23 = 8 * v40;
      do
      {
        v24 = *v22++;
        sub_1C50673C4(a3, v8, v24);
        v23 -= 8;
      }
      while (v23);
    }
    if ((_DWORD)v43)
    {
      v25 = v42;
      v26 = 8 * v43;
      do
      {
        v27 = *v25++;
        sub_1C50673C4(a3, *(_DWORD *)(v27 + 24), v27);
        v26 -= 8;
      }
      while (v26);
    }
    if ((_DWORD)v37)
    {
      v28 = (uint64_t *)v36;
      v29 = 8 * v37;
      do
      {
        v30 = *v28++;
        sub_1C50673C4(a3, v8, v30);
        v29 -= 8;
      }
      while (v29);
    }
    if ((_DWORD)v34)
    {
      v31 = (char *)v33;
      v32 = (char *)v33 + 16 * v34;
      do
      {
        sub_1C50673C4(a3, *((_DWORD *)v31 + 2), *(_QWORD *)v31);
        v31 += 16;
      }
      while (v31 != v32);
    }
  }
LABEL_42:
  if (v33 != v35)
    free(v33);
  if (v36 != v38)
    free(v36);
  if (v39 != v41)
    free(v39);
  if (v42 != v44)
    free(v42);
}

void sub_1C50673C4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v9;
  __int16 v10;
  int v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  void *v18;
  unsigned int v19;
  int v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x1E0C80C00];
  v18 = v21;
  v20 = 16;
  v21[0] = a3;
  v5 = a2;
  v6 = 1;
  do
  {
    while (1)
    {
      v7 = *((_QWORD *)v18 + --v6);
      v19 = v6;
      if (v7 == a3 || *(_BYTE *)(v7 + 184) == 0)
        break;
      if (!v6)
        goto LABEL_26;
    }
    v15 = v7;
    v16 = v5;
    sub_1C61D73E4((uint64_t)v17, a1, &v15, &v16);
    if (v17[16])
    {
      v9 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFFFF8;
      if (v7 + 48 == v9)
        goto LABEL_20;
      if (v9 && (*(_BYTE *)v9 & 4) != 0)
      {
        v10 = *(_WORD *)(v9 + 44);
      }
      else
      {
        while (1)
        {
          v10 = *(_WORD *)(v9 + 44);
          if ((v10 & 4) == 0)
            break;
          v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      v11 = v10 & 0xC;
      v12 = v10 & 4;
      v13 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8);
      if (v11)
        v14 = v12 == 0;
      else
        v14 = 0;
      if (!v14)
      {
        if ((v13 & 0x40) != 0)
          goto LABEL_21;
LABEL_20:
        sub_1C485BB4C((unsigned int *)&v18, *(char **)(v7 + 88), *(char **)(v7 + 96));
        goto LABEL_21;
      }
      while ((v13 & 0x40) == 0)
      {
        if ((*(_WORD *)(v9 + 44) & 8) == 0)
          goto LABEL_20;
        v9 = *(_QWORD *)(v9 + 8);
        LOBYTE(v13) = *(_BYTE *)(*(_QWORD *)(v9 + 16) + 8);
      }
    }
LABEL_21:
    v6 = v19;
  }
  while (v19);
LABEL_26:
  if (v18 != v21)
    free(v18);
}

uint64_t sub_1C5067540(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t *v23;

  v2 = *(_DWORD *)(a2 + 8);
  if (!v2)
    return 0;
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 - 8;
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)a2 - 4;
  v9 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9);
    v11 = v2;
    v12 = *(_DWORD *)(v8 + 4 * v2) + 1;
    if (v10)
      v13 = *(_BYTE *)(v10 + 8) == 17;
    else
      v13 = 0;
    if (!v13)
    {
      if (*(_DWORD *)(v10 + 12) > v12)
        break;
      goto LABEL_10;
    }
    if (*(_QWORD *)(v10 + 32) > (unint64_t)v12)
      break;
LABEL_10:
    *(_DWORD *)(a2 + 8) = v11 - 1;
    v9 = *(_DWORD *)(a1 + 8) - 1;
    *(_DWORD *)(a1 + 8) = v9;
    v2 = *(_DWORD *)(a2 + 8);
    if (!v2)
      return 0;
  }
  *(_DWORD *)(v7 + 4 * v11 - 4) = v12;
  v15 = *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 8) - 8);
  if (v15)
    v16 = *(_BYTE *)(v15 + 8) == 17;
  else
    v16 = 0;
  if (v16)
    v17 = v15 + 24;
  else
    v17 = *(_QWORD *)(v15 + 16) + 8 * *(unsigned int *)(v7 + 4 * *(unsigned int *)(a2 + 8) - 4);
  v18 = *(_QWORD *)v17;
  v19 = *(_DWORD *)(*(_QWORD *)v17 + 8);
  if ((v19 & 0xFE) == 0x10)
  {
    do
    {
      if (v19 == 17)
      {
        if (!*(_QWORD *)(v18 + 32))
          return 1;
      }
      else if (!*(_DWORD *)(v18 + 12))
      {
        return 1;
      }
      v20 = *(unsigned int *)(a1 + 8);
      if (v20 >= *(unsigned int *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v20 + 1, 8);
        v20 = *(unsigned int *)(a1 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v18;
      ++*(_DWORD *)(a1 + 8);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 4);
        v21 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v21) = 0;
      ++*(_DWORD *)(a2 + 8);
      v22 = *(unsigned __int8 *)(v18 + 8);
      if (v22 == 16)
      {
        if (!*(_DWORD *)(v18 + 12))
          goto LABEL_35;
        v23 = *(uint64_t **)(v18 + 16);
      }
      else
      {
        if (v22 != 17 || !*(_QWORD *)(v18 + 32))
        {
LABEL_35:
          v18 = 0;
          goto LABEL_30;
        }
        v23 = (uint64_t *)(v18 + 24);
      }
      v18 = *v23;
LABEL_30:
      LOBYTE(v19) = *(_DWORD *)(v18 + 8);
    }
    while ((*(_DWORD *)(v18 + 8) & 0xFE) == 0x10);
  }
  return 1;
}

llvm::GetElementPtrInst *sub_1C506773C(llvm::GetElementPtrInst *this, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  llvm::GetElementPtrInst *v10;
  int v11;
  int v12;
  llvm::GetElementPtrInst **v13;
  unint64_t v14;
  unint64_t PrimitiveSizeInBits;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;

  do
  {
    v10 = this;
    if (!this)
      break;
    v11 = *((unsigned __int8 *)this + 16);
    if (v11 < 0x1C)
      break;
    v12 = *((_DWORD *)this + 5);
    if ((v12 & 0x7FFFFFF) == 0)
      break;
    if ((v12 & 0x40000000) != 0)
      v13 = (llvm::GetElementPtrInst **)*((_QWORD *)this - 1);
    else
      v13 = (llvm::GetElementPtrInst **)((char *)this - 32 * (v12 & 0x7FFFFFF));
    this = *v13;
    if (v11 <= 74)
    {
      if (v11 == 62)
      {
        if ((llvm::GetElementPtrInst::hasAllZeroIndices(v10) & 1) == 0)
          return v10;
        continue;
      }
      if (v11 == 66)
      {
        if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 1152))(a4, *(_QWORD *)this, *(_QWORD *)v10) & 1) != 0)
        {
          v14 = *a3;
          PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v10);
          if (PrimitiveSizeInBits >= v14)
            v16 = v14;
          else
            v16 = PrimitiveSizeInBits;
          *a3 = v16;
          continue;
        }
        v11 = *((unsigned __int8 *)v10 + 16);
      }
    }
    else
    {
      switch(v11)
      {
        case 'K':
          if ((*(_DWORD *)(*(_QWORD *)v10 + 8) & 0xFE) == 0x12
            || *(_DWORD *)(*(_QWORD *)(a5 + 232) + 4) != *(_DWORD *)(*(_QWORD *)v10 + 8) >> 8)
          {
            return v10;
          }
          continue;
        case 'L':
          if ((*(_DWORD *)(*(_QWORD *)v10 + 8) & 0xFE) == 0x12
            || *(_DWORD *)(*(_QWORD *)(a5 + 232) + 4) != *(_DWORD *)(*(_QWORD *)this + 8) >> 8)
          {
            return v10;
          }
          continue;
        case 'M':
          goto LABEL_11;
      }
    }
    if (v11 <= 83)
    {
      if (v11 != 33 && v11 != 39)
        return v10;
LABEL_42:
      v28 = 0;
      if (!llvm::AttributeList::hasAttrSomewhere((uint64_t *)v10 + 8, 46, &v28))
      {
        v23 = *((_QWORD *)v10 - 4);
        if (!v23)
          return v10;
        if (*(_BYTE *)(v23 + 16))
          return v10;
        if (*(_QWORD *)(v23 + 24) != *((_QWORD *)v10 + 9))
          return v10;
        v27 = *(_QWORD *)(v23 + 112);
        if (!llvm::AttributeList::hasAttrSomewhere(&v27, 46, &v28))
          return v10;
      }
      this = (llvm::GetElementPtrInst *)*((_QWORD *)v10
                                        + 4 * (v28 - 1)
                                        + -4 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF));
      if (!this)
        return v10;
LABEL_11:
      if (!sub_1C50679CC(*(unsigned __int8 **)this, *(unsigned __int8 **)v10, a4))
        return v10;
      continue;
    }
    switch(v11)
    {
      case 'T':
        goto LABEL_42;
      case ']':
        v17 = *((unsigned int *)v10 + 18);
        v18 = a2[2];
        if (v18 >= v17)
        {
          if ((_DWORD)v17)
          {
            v19 = (_DWORD *)*((_QWORD *)v10 + 8);
            v20 = 4 * v17;
            v21 = (int *)(*(_QWORD *)a2 + 4 * v18 - 4);
            while (1)
            {
              v22 = *v21--;
              if (*v19 != v22)
                break;
              ++v19;
              v20 -= 4;
              if (!v20)
              {
                a2[2] = v18 - v17;
                goto LABEL_39;
              }
            }
          }
          else
          {
LABEL_39:
            this = (llvm::GetElementPtrInst *)*((_QWORD *)v10 - 4);
          }
        }
        break;
      case '\\':
        v24 = *((_QWORD *)v10 + 8);
        v25 = v24 + 4 * *((unsigned int *)v10 + 18);
        sub_1C61D7360(a2, v25, v25, v24, v24);
        break;
      default:
        return v10;
    }
  }
  while (this);
  return v10;
}

BOOL sub_1C50679CC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5;
  unsigned __int8 EVT;
  BOOL v8;
  unsigned __int8 v9;

  if (a1 == a2)
    return 1;
  v5 = a1[8];
  if (v5 == 15 && a2[8] == 15)
    return 1;
  if ((v5 & 0xFE) == 0x12 && (*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
  {
    EVT = llvm::EVT::getEVT((llvm::EVT *)a1, 0, a3);
    if (EVT)
    {
      if (*(_QWORD *)(a3 + 8 * EVT + 96))
      {
        v9 = llvm::EVT::getEVT((llvm::EVT *)a2, 0, v8);
        if (v9)
          return *(_QWORD *)(a3 + 8 * v9 + 96) != 0;
      }
    }
  }
  return 0;
}

uint64_t sub_1C5067A80(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Expand Atomic instructions";
  *(_QWORD *)(v2 + 8) = 26;
  *(_QWORD *)(v2 + 16) = "atomic-expand";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1ED7F4EE8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5067F64;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createAtomicExpandPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5067B38(v1);
}

uint64_t sub_1C5067B38(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7F4EE8;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E813FEA0;
  *(_QWORD *)(a1 + 32) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F4EF0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5067A80;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F4EF0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5067C04(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, unsigned int a6, uint64_t (*a7)(uint64_t, uint64_t *, llvm::PHINode *), uint64_t a8, void (*a9)(uint64_t, uint64_t *, uint64_t, llvm::PHINode *, uint64_t, uint64_t, uint64_t, _QWORD, llvm::Value **, uint64_t *), uint64_t a10)
{
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  llvm::Value *v29;
  char *v30;
  uint64_t v31;
  llvm::PHINode *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Value *v35;
  char *v36;
  uint64_t v37;
  unsigned __int8 **v38;
  char *v39;
  llvm::Value *v46;
  uint64_t v47;
  _QWORD v48[4];
  __int16 v49;

  v13 = (uint64_t *)a1[7];
  v14 = (_QWORD *)a1[8];
  v15 = (uint64_t *)a1[6];
  v16 = v15[7];
  v48[0] = "atomicrmw.end";
  v49 = 259;
  v17 = (uint64_t *)llvm::BasicBlock::splitBasicBlock(v15, v13, (uint64_t)v48, 0);
  v48[0] = "atomicrmw.start";
  v49 = 259;
  v18 = operator new();
  *(_QWORD *)v18 = *v14 + 1600;
  *(_QWORD *)(v18 + 8) = 0;
  v19 = *(_DWORD *)(v18 + 20) & 0xC0000000;
  *(_QWORD *)(v18 + 24) = 0;
  v20 = v18 + 24;
  *(_DWORD *)(v18 + 16) = 22;
  *(_DWORD *)(v18 + 20) = v19;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = v18 + 40;
  *(_QWORD *)(v18 + 48) = v18 + 40;
  *(_QWORD *)(v18 + 56) = 0;
  if (v16)
  {
    v21 = v16 + 72;
    if (v17)
      v22 = v17 + 3;
    else
      v22 = (uint64_t *)(v16 + 72);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v21, (_QWORD *)v18);
    v23 = *v22;
    *(_QWORD *)(v18 + 24) = *v22;
    *(_QWORD *)(v18 + 32) = v22;
    *(_QWORD *)(v23 + 8) = v20;
    *v22 = v20;
  }
  llvm::Value::setName((uint64_t ***)v18, (uint64_t)v48);
  v24 = v15[5];
  if (v24)
    v25 = v24 - 24;
  else
    v25 = 0;
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v25 + 40) + 40, (uint64_t ***)v25);
  v26 = *(_QWORD *)(v25 + 24);
  v27 = *(_QWORD **)(v25 + 32);
  *v27 = v26;
  *(_QWORD *)(v26 + 8) = v27;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v25);
  a1[6] = (uint64_t)v15;
  a1[7] = (uint64_t)(v15 + 5);
  v28 = a4;
  v49 = 257;
  v29 = sub_1C506D920(a1, a2, a3, a4 | 0x100u, 0, (uint64_t)v48);
  v30 = (char *)operator new(0x60uLL);
  *((_DWORD *)v30 + 13) = *((_DWORD *)v30 + 13) & 0x38000000 | 1;
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 2) = 0;
  *((_QWORD *)v30 + 1) = 0;
  v31 = *(_QWORD *)(v18 + 8);
  *((_QWORD *)v30 + 4) = ***(_QWORD ***)v18 + 1576;
  v30[48] = 30;
  *((_DWORD *)v30 + 13) = 1;
  *((_QWORD *)v30 + 3) = v30 + 32;
  *((_QWORD *)v30 + 5) = 0;
  v30[49] = 0;
  *((_WORD *)v30 + 25) = 0;
  *((_DWORD *)v30 + 22) = 0;
  *(_OWORD *)(v30 + 72) = 0u;
  *(_OWORD *)(v30 + 56) = 0u;
  *(_QWORD *)v30 = v18;
  *((_QWORD *)v30 + 1) = v31;
  if (v31)
    *(_QWORD *)(v31 + 16) = v30 + 8;
  *((_QWORD *)v30 + 2) = v18 + 8;
  *(_QWORD *)(v18 + 8) = v30;
  v49 = 257;
  sub_1C4867F8C(a1, (unsigned __int8 **)v30 + 4, (uint64_t)v48);
  a1[6] = v18;
  a1[7] = v18 + 40;
  v48[0] = "loaded";
  v49 = 259;
  v32 = (llvm::PHINode *)sub_1C4867E94((uint64_t)a1, a2, 2, (uint64_t)v48);
  sub_1C477667C(v32, (uint64_t)v29, (uint64_t)v15);
  v33 = a7(a8, a1, v32);
  v46 = 0;
  v47 = 0;
  if (a5 == 1)
    v34 = 2;
  else
    v34 = a5;
  a9(a10, a1, a3, v32, v33, v28, v34, a6, &v46, &v47);
  sub_1C477667C(v32, v47, v18);
  v35 = v46;
  v36 = (char *)operator new(0xA0uLL);
  v37 = 0;
  v38 = (unsigned __int8 **)(v36 + 96);
  *((_DWORD *)v36 + 29) = *((_DWORD *)v36 + 29) & 0x38000000 | 3;
  do
  {
    v39 = &v36[v37];
    *(_QWORD *)v39 = 0;
    *((_QWORD *)v39 + 1) = 0;
    *((_QWORD *)v39 + 2) = 0;
    *((_QWORD *)v39 + 3) = v38;
    v37 += 32;
  }
  while (v37 != 96);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v36 + 96), (llvm::BasicBlock *)v17, (llvm::BasicBlock *)v18, v35, 0);
  v49 = 257;
  sub_1C4867F8C(a1, v38, (uint64_t)v48);
  sub_1C4D8AE2C((uint64_t)a1, (uint64_t)v17, v17[6]);
  return v47;
}

uint64_t sub_1C5067F64()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5067B38(v0);
}

void sub_1C5067F90(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5067FB4(uint64_t a1, uint64_t a2)
{
  uint64_t AnalysisPass;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 ***v20;
  unsigned __int8 ***v21;
  unsigned __int8 **v22;
  int v23;
  unsigned __int8 **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  __int16 v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Instruction *v46;
  llvm::Instruction *v47;
  _BOOL4 v48;
  llvm::PointerType *v49;
  unsigned __int8 *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  char v54;
  char v55;
  char *v56;
  char *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  __int16 v62;
  __int16 v63;
  char v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  int v69;
  llvm::PointerType *v70;
  unsigned __int8 *v71;
  uint64_t *v72;
  unsigned __int8 *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned __int8 *v76;
  char v77;
  char v78;
  char *v79;
  char *v80;
  unsigned __int8 **v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 ***v86;
  uint64_t v87;
  __int16 v88;
  __int16 v89;
  char v90;
  uint64_t v91;
  _QWORD *v92;
  int v93;
  uint64_t v94;
  BOOL v95;
  __int16 v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v101;
  char *v102;
  unsigned int v103;
  llvm::APInt *v104;
  unsigned int v105;
  char *v106;
  char *v107;
  unsigned __int8 **v108;
  int v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  unsigned int v113;
  llvm::APInt *v114;
  uint64_t *v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  __int16 v118;
  int v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  uint64_t v122;
  uint64_t *v123;
  unsigned __int8 **v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  char *v128;
  char *v129;
  unsigned __int8 **v130;
  int v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  llvm::PointerType *v135;
  unsigned __int8 *v136;
  unsigned int v137;
  uint64_t v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  uint64_t *v143;
  __int16 v144;
  unsigned __int8 *v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int8 *v148;
  llvm::Type *v149;
  llvm::UndefValue *v150;
  uint64_t v151;
  llvm::Value *v152;
  uint64_t v153;
  _QWORD *v154;
  llvm::PointerType *v155;
  unsigned __int8 *v156;
  unsigned int v157;
  unsigned __int8 *v158;
  uint64_t v159;
  unsigned __int8 *v160;
  uint64_t *v161;
  uint64_t v162;
  unsigned __int8 *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  char *v167;
  unsigned __int8 ***v168;
  uint64_t v169[3];
  unsigned __int8 v170;
  uint64_t v171;
  _QWORD *v172;
  const char *v173;
  __int16 v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  __int16 v179;
  char *v180;
  int v181;
  _BYTE v182[16];
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::TargetPassConfig::ID, 1);
  if (!AnalysisPass
    || (v5 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetPassConfig::ID)) == 0|| (v6 = *(_QWORD *)(v5 + 112), v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2), !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 280))(v7)))
  {
LABEL_10:
    LOBYTE(v13) = 0;
    return v13 & 1;
  }
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  v175 = &v177;
  v176 = 0x100000000;
  v9 = a2 + 72;
  for (i = *(_QWORD *)(a2 + 80); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v9)
      goto LABEL_10;
    v11 = i - 24;
    if (!i)
      v11 = 0;
    v12 = *(_QWORD *)(v11 + 48);
    if (v12 != v11 + 40)
      break;
  }
  v15 = 0;
  while (1)
  {
    v16 = v12 ? v12 - 24 : 0;
    v17 = *(unsigned __int8 *)(v16 + 16);
    if (v17 == 60 || v17 == 61)
    {
      if ((*(_WORD *)(v16 + 18) & 0x380) == 0)
        goto LABEL_21;
    }
    else if ((v17 - 64) >= 2)
    {
      goto LABEL_21;
    }
    if (v15 >= HIDWORD(v176))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, (uint64_t)&v177, v15 + 1, 8);
      v15 = v176;
    }
    *((_QWORD *)v175 + v15) = v16;
    v15 = v176 + 1;
    LODWORD(v176) = v176 + 1;
LABEL_21:
    v12 = *(_QWORD *)(v12 + 8);
    v18 = i - 24;
    if (!i)
      v18 = 0;
    if (v12 == v18 + 40)
      break;
LABEL_28:
    if (i == v9)
      goto LABEL_33;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if (i == v9)
      break;
    v19 = i - 24;
    if (!i)
      v19 = 0;
    v12 = *(_QWORD *)(v19 + 48);
    if (v12 != v19 + 40)
      goto LABEL_28;
  }
LABEL_33:
  v20 = (unsigned __int8 ***)v175;
  if (v15)
  {
    v13 = 0;
    v21 = (unsigned __int8 ***)((char *)v175 + 8 * v15);
    v168 = v21;
    while (1)
    {
      v22 = *v20;
      v23 = *((unsigned __int8 *)*v20 + 16);
      v24 = v23 == 60 ? *v20 : 0;
      v25 = v23 == 61 ? (uint64_t)*v20 : 0;
      v26 = v23 == 65 ? (uint64_t)*v20 : 0;
      v27 = v23 == 64 ? (uint64_t)*v20 : 0;
      if (v24)
      {
        v28 = *(_QWORD *)(a1 + 32);
        v29 = sub_1C506BD24((uint64_t)*v24, *(_QWORD *)(*((_QWORD *)v24[5] + 7) + 40));
        if (1 << ((unint64_t)*((unsigned __int16 *)v24 + 9) >> 1) < (unint64_t)v29
          || v29 > *(_DWORD *)(v28 + 76) >> 3)
        {
          v30 = sub_1C506BD24((uint64_t)*v24, *(_QWORD *)(*((_QWORD *)v24[5] + 7) + 40));
          if ((sub_1C506C36C(a1, (uint64_t)v24, v30, ((unint64_t)*((unsigned __int16 *)v24 + 9) >> 1) & 0x3F, *(v24 - 4), 0, 0, (*((unsigned __int16 *)v24 + 9) >> 7) & 7, 0, dword_1C85FA654) & 1) == 0)
          {
            v167 = "expandAtomicOpToLibcall shouldn't fail for Load";
            goto LABEL_217;
          }
          goto LABEL_146;
        }
      }
      else if (v25)
      {
        v31 = *(_QWORD *)(a1 + 32);
        v32 = sub_1C506BD24(**(_QWORD **)(v25 - 64), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 40) + 56) + 40));
        if (1 << ((unint64_t)*(unsigned __int16 *)(v25 + 18) >> 1) < (unint64_t)v32
          || v32 > *(_DWORD *)(v31 + 76) >> 3)
        {
          v33 = sub_1C506BD24(**(_QWORD **)(v25 - 64), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 40) + 56) + 40));
          if ((sub_1C506C36C(a1, v25, v33, ((unint64_t)*(unsigned __int16 *)(v25 + 18) >> 1) & 0x3F, *(unsigned __int8 **)(v25 - 32), *(_QWORD *)(v25 - 64), 0, (*(unsigned __int16 *)(v25 + 18) >> 7) & 7, 0, dword_1C85FA68C) & 1) == 0)
          {
            v167 = "expandAtomicOpToLibcall shouldn't fail for Store";
LABEL_217:
            llvm::report_fatal_error((llvm *)v167, (const char *)1);
          }
          goto LABEL_146;
        }
      }
      else if (v26)
      {
        v34 = *(_QWORD *)(a1 + 32);
        v35 = sub_1C506BD24(**(_QWORD **)(v26 - 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 40) + 56) + 40));
        v36 = *(_WORD *)(v26 + 18);
        if (1 << SHIBYTE(v36) < (unint64_t)v35 || v35 > *(_DWORD *)(v34 + 76) >> 3)
          __asm { BR              X9 }
      }
      else if (v27)
      {
        v37 = *(_QWORD *)(a1 + 32);
        v38 = sub_1C506BD24(**(_QWORD **)(v27 - 64), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 40) + 56) + 40));
        if (1 << *(_BYTE *)(v27 + 19) < (unint64_t)v38 || v38 > *(_DWORD *)(v37 + 76) >> 3)
        {
          sub_1C506BA5C(a1, v27);
          goto LABEL_146;
        }
      }
      if ((*(unsigned int (**)(_QWORD, unsigned __int8 **))(**(_QWORD **)(a1 + 32) + 856))(*(_QWORD *)(a1 + 32), v22))
      {
        break;
      }
LABEL_90:
      if (!v24)
      {
        if (v25)
        {
          if (*(unsigned __int8 *)(**(_QWORD **)(v25 - 64) + 8) > 6u)
          {
LABEL_119:
            v93 = (*(uint64_t (**)(_QWORD, unsigned __int8 **))(**(_QWORD **)(a1 + 32) + 952))(*(_QWORD *)(a1 + 32), v22);
            if (!v93)
              goto LABEL_147;
            if (v93 == 7)
            {
              *((_WORD *)v22 + 9) &= 0xFC7Fu;
              v13 = 1;
              *((_BYTE *)v22 + 60) = 1;
              goto LABEL_147;
            }
            v115 = (uint64_t *)sub_1C4773D54((uint64_t)&v180, (uint64_t)v22, 0, 0, 0);
            sub_1C61D775C(v115, 0, (uint64_t)*(v22 - 4), (uint64_t *)*(v22 - 8), (*((_WORD *)v22 + 9) >> 1) & 0x3F | 0x100, (*((_WORD *)v22 + 9) >> 7) & 7, 1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v22[5] + 40), (uint64_t ***)v22);
            v116 = v22[3];
            v117 = v22[4];
            *(_QWORD *)v117 = v116;
            *((_QWORD *)v116 + 1) = v117;
            v22[3] = 0;
            v22[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v22);
            sub_1C506BD78(a1);
            if (v180 != v182)
              free(v180);
LABEL_146:
            v13 = 1;
            goto LABEL_147;
          }
          sub_1C4773D54((uint64_t)&v180, v25, 0, 0, 0);
          v70 = (llvm::PointerType *)sub_1C506DEAC(*(_QWORD *)(a1 + 32), **(_QWORD ***)(v25 - 64), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 40) + 56) + 40) + 272);
          v71 = *(unsigned __int8 **)(v25 - 64);
          LOWORD(v171) = 257;
          v72 = (uint64_t *)sub_1C4773E38((uint64_t *)&v180, 49, v71, (uint64_t)v70, (uint64_t)v169);
          v73 = *(unsigned __int8 **)(v25 - 32);
          v74 = *(_DWORD *)(*(_QWORD *)v73 + 8);
          if ((v74 & 0xFE) == 0x12)
            v74 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v73 + 16) + 8);
          v75 = llvm::PointerType::get(v70, (llvm::Type *)(v74 >> 8));
          LOWORD(v171) = 257;
          v76 = sub_1C4773E38((uint64_t *)&v180, 49, v73, v75, (uint64_t)v169);
          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v183 + 56) + 40) + 272, *v72);
          v78 = v77;
          v79 = (char *)operator new(0x80uLL);
          v80 = v79;
          *((_DWORD *)v79 + 21) = *((_DWORD *)v79 + 21) & 0x38000000 | 2;
          *(_QWORD *)v79 = 0;
          *((_QWORD *)v79 + 2) = 0;
          *((_QWORD *)v79 + 1) = 0;
          *((_QWORD *)v79 + 5) = 0;
          *((_QWORD *)v79 + 6) = 0;
          *((_QWORD *)v79 + 4) = 0;
          v81 = (unsigned __int8 **)(v79 + 32);
          *((_QWORD *)v79 + 8) = **(_QWORD **)*v72 + 1576;
          v22 = (unsigned __int8 **)(v79 + 64);
          *((_QWORD *)v79 + 3) = v79 + 64;
          *((_QWORD *)v79 + 7) = v79 + 64;
          *((_QWORD *)v79 + 9) = 0;
          v79[80] = 61;
          v79[81] = 0;
          *((_WORD *)v79 + 41) = 0;
          *((_DWORD *)v79 + 21) = 2;
          *(_OWORD *)(v79 + 88) = 0u;
          *(_OWORD *)(v79 + 104) = 0u;
          *((_DWORD *)v79 + 30) = 0;
          *(_QWORD *)v79 = v72;
          v84 = v72[1];
          v83 = v72 + 1;
          v82 = v84;
          *((_QWORD *)v79 + 1) = v84;
          if (v84)
            *(_QWORD *)(v82 + 16) = v79 + 8;
          *((_QWORD *)v79 + 2) = v83;
          *v83 = v79;
          if (*((_QWORD *)v79 + 4))
          {
            **((_QWORD **)v79 + 6) = *((_QWORD *)v79 + 5);
            v166 = *((_QWORD *)v79 + 5);
            if (v166)
              *(_QWORD *)(v166 + 16) = *((_QWORD *)v79 + 6);
          }
          *v81 = v76;
          if (v76)
          {
            v87 = *((_QWORD *)v76 + 1);
            v86 = (unsigned __int8 ***)(v76 + 8);
            v85 = v87;
            *((_QWORD *)v79 + 5) = v87;
            if (v87)
              *(_QWORD *)(v85 + 16) = v79 + 40;
            *((_QWORD *)v79 + 6) = v86;
            *v86 = v81;
          }
          *((_WORD *)v79 + 41) = 2 * (v78 & 0x3F);
          v79[124] = 1;
          LOWORD(v171) = 257;
          (*(void (**)(uint64_t, unsigned __int8 **, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v185 + 16))(v185, v22, v169, v183, v184);
          if (!v181)
          {
LABEL_116:
            v88 = *((_WORD *)v80 + 41) & 0xFF81 | (2
                                                 * __clz(1 << ((unint64_t)*(unsigned __int16 *)(v25 + 18) >> 1))) ^ 0x7E;
            *((_WORD *)v80 + 41) = v88;
            v89 = v88 & 0xFFFE | *(_WORD *)(v25 + 18) & 1;
            *((_WORD *)v80 + 41) = v89;
            v90 = *(_BYTE *)(v25 + 60);
            *((_WORD *)v80 + 41) = v89 & 0xFC7F | *(_WORD *)(v25 + 18) & 0x380;
            v80[124] = v90;
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v25 + 40) + 40, (uint64_t ***)v25);
            v91 = *(_QWORD *)(v25 + 24);
            v92 = *(_QWORD **)(v25 + 32);
            *v92 = v91;
            *(_QWORD *)(v91 + 8) = v92;
            *(_QWORD *)(v25 + 24) = 0;
            *(_QWORD *)(v25 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v25);
            if (v180 != v182)
              free(v180);
            v13 = 1;
            goto LABEL_119;
          }
          v128 = v180;
          v129 = &v180[16 * v181];
          v130 = (unsigned __int8 **)(v80 + 112);
          while (2)
          {
            v131 = *(_DWORD *)v128;
            v132 = (unsigned __int8 *)*((_QWORD *)v128 + 1);
            if (v132)
            {
              if (v131)
                goto LABEL_194;
              v173 = (const char *)*((_QWORD *)v128 + 1);
              llvm::MetadataTracking::track((uint64_t)&v173, v132, 2);
              v133 = *v130;
LABEL_198:
              if (v133)
                llvm::MetadataTracking::untrack((uint64_t)(v80 + 112), v133);
              v134 = (unsigned __int8 *)v173;
              *v130 = (unsigned __int8 *)v173;
              if (v134)
                llvm::MetadataTracking::retrack((uint64_t)&v173, v134, (uint64_t)(v80 + 112));
            }
            else
            {
              v133 = *v130;
              if (*v130 || (v80[87] & 0x20) != 0)
              {
                if (!v131)
                {
                  v173 = 0;
                  goto LABEL_198;
                }
LABEL_194:
                llvm::Value::setMetadata((llvm::Value *)v22, *(_DWORD *)v128, (llvm::MDNode *)v132);
              }
            }
            v128 += 16;
            if (v128 == v129)
              goto LABEL_116;
            continue;
          }
        }
        if (!v26)
        {
          if (v27)
          {
            v101 = **(_QWORD **)(v27 - 64);
            if (*(_BYTE *)(v101 + 8) == 15)
            {
              v135 = (llvm::PointerType *)sub_1C506DEAC(*(_QWORD *)(a1 + 32), (_QWORD *)v101, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 40) + 56) + 40) + 272);
              sub_1C4773D54((uint64_t)&v180, v27, 0, 0, 0);
              v136 = *(unsigned __int8 **)(v27 - 96);
              v137 = *(_DWORD *)(*(_QWORD *)v136 + 8);
              if ((v137 & 0xFE) == 0x12)
                v137 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v136 + 16) + 8);
              v138 = llvm::PointerType::get(v135, (llvm::Type *)(v137 >> 8));
              LOWORD(v171) = 257;
              v139 = sub_1C4773E38((uint64_t *)&v180, 49, v136, v138, (uint64_t)v169);
              v140 = *(unsigned __int8 **)(v27 - 64);
              LOWORD(v171) = 257;
              v141 = sub_1C4773E38((uint64_t *)&v180, 47, v140, (uint64_t)v135, (uint64_t)v169);
              v142 = *(unsigned __int8 **)(v27 - 32);
              LOWORD(v171) = 257;
              v143 = (uint64_t *)sub_1C4773E38((uint64_t *)&v180, 47, v142, (uint64_t)v135, (uint64_t)v169);
              v22 = sub_1C61D75CC((uint64_t *)&v180, (uint64_t)v139, (uint64_t ***)v141, v143, HIBYTE(*(_WORD *)(v27 + 18)) & 0x3F | 0x100u, (*(_WORD *)(v27 + 18) >> 2) & 7, *(_WORD *)(v27 + 18) >> 5, *(_BYTE *)(v27 + 60));
              v144 = *((_WORD *)v22 + 9) & 0xFFFE | *(_WORD *)(v27 + 18) & 1;
              *((_WORD *)v22 + 9) = v144;
              *((_WORD *)v22 + 9) = *(_WORD *)(v27 + 18) & 2 | v144 & 0xFFFD;
              LODWORD(v173) = 0;
              LOWORD(v171) = 257;
              v145 = (unsigned __int8 *)sub_1C506DBC4((uint64_t)&v180, (uint64_t *)v22, (unsigned int *)&v173, 1, (uint64_t)v169);
              LODWORD(v173) = 1;
              LOWORD(v171) = 257;
              v146 = sub_1C506DBC4((uint64_t)&v180, (uint64_t *)v22, (unsigned int *)&v173, 1, (uint64_t)v169);
              v147 = **(_QWORD **)(v27 - 64);
              LOWORD(v171) = 257;
              v148 = sub_1C4773E38((uint64_t *)&v180, 48, v145, v147, (uint64_t)v169);
              v150 = llvm::UndefValue::get(*(llvm::UndefValue **)v27, v149);
              LODWORD(v173) = 0;
              LOWORD(v171) = 257;
              v151 = sub_1C506D788((uint64_t)&v180, (uint64_t)v150, (uint64_t)v148, &v173, 1, (uint64_t)v169);
              LODWORD(v173) = 1;
              LOWORD(v171) = 257;
              v152 = (llvm::Value *)sub_1C506D788((uint64_t)&v180, v151, v146, &v173, 1, (uint64_t)v169);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v27, v152, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v27 + 40) + 40, (uint64_t ***)v27);
              v153 = *(_QWORD *)(v27 + 24);
              v154 = *(_QWORD **)(v27 + 32);
              *v154 = v153;
              *(_QWORD *)(v153 + 8) = v154;
              *(_QWORD *)(v27 + 24) = 0;
              *(_QWORD *)(v27 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v27);
              if (v180 != v182)
                free(v180);
            }
            sub_1C506BD24(*(_QWORD *)*(v22 - 8), *(_QWORD *)(*((_QWORD *)v22[5] + 7) + 40));
            v102 = (char *)&loc_1C5068BB0
                 + 4
                 * word_1C85FA622[(*(unsigned int (**)(_QWORD, unsigned __int8 **))(**(_QWORD **)(a1 + 32)
                                                                                             + 960))(*(_QWORD *)(a1 + 32), v22)];
            __asm { BR              X9 }
          }
          goto LABEL_147;
        }
        v94 = *(_QWORD *)(v26 - 32);
        if (v94)
          v95 = *(_BYTE *)(v94 + 16) == 16;
        else
          v95 = 0;
        if (!v95)
          goto LABEL_127;
        v103 = *(_WORD *)(v26 + 18) >> 4;
        if (v103 > 6)
          goto LABEL_127;
        if (((1 << v103) & 0x66) != 0)
        {
          v104 = (llvm::APInt *)(v94 + 24);
          v105 = *(_DWORD *)(v94 + 32);
          if (v105 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(v104) == v105)
              goto LABEL_185;
          }
          else if (!*(_QWORD *)v104)
          {
            goto LABEL_185;
          }
LABEL_127:
          v96 = *(_WORD *)(v26 + 18);
          v97 = v96 >> 4;
          if (!(v96 >> 4) && *(unsigned __int8 *)(**(_QWORD **)(v26 - 32) + 8) <= 6u)
          {
            v155 = (llvm::PointerType *)sub_1C506DEAC(*(_QWORD *)(a1 + 32), *(_QWORD **)v26, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 40) + 56) + 40) + 272);
            sub_1C4773D54((uint64_t)&v180, v26, 0, 0, 0);
            v156 = *(unsigned __int8 **)(v26 - 64);
            v157 = *(_DWORD *)(*(_QWORD *)v156 + 8);
            if ((v157 & 0xFE) == 0x12)
              v157 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v156 + 16) + 8);
            v158 = *(unsigned __int8 **)(v26 - 32);
            v159 = llvm::PointerType::get(v155, (llvm::Type *)(v157 >> 8));
            LOWORD(v171) = 257;
            v160 = sub_1C4773E38((uint64_t *)&v180, 49, v156, v159, (uint64_t)v169);
            LOWORD(v171) = 257;
            v161 = (uint64_t *)sub_1C4773E38((uint64_t *)&v180, 49, v158, (uint64_t)v155, (uint64_t)v169);
            v22 = sub_1C61D775C((uint64_t *)&v180, 0, (uint64_t)v160, v161, HIBYTE(*(_WORD *)(v26 + 18)) & 0x3F | 0x100u, (*(_WORD *)(v26 + 18) >> 1) & 7, 1);
            *((_WORD *)v22 + 9) = *((_WORD *)v22 + 9) & 0xFFFE | *(_WORD *)(v26 + 18) & 1;
            v162 = *(_QWORD *)v26;
            LOWORD(v171) = 257;
            v163 = sub_1C4773E38((uint64_t *)&v180, 49, (unsigned __int8 *)v22, v162, (uint64_t)v169);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v26, (llvm::Value *)v163, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v26 + 40) + 40, (uint64_t ***)v26);
            v164 = *(_QWORD *)(v26 + 24);
            v165 = *(_QWORD **)(v26 + 32);
            *v165 = v164;
            *(_QWORD *)(v164 + 8) = v165;
            *(_QWORD *)(v26 + 24) = 0;
            *(_QWORD *)(v26 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v26);
            if (v180 != v182)
              free(v180);
            v13 = 1;
          }
          v98 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 80);
          if (sub_1C506BD24(*(_QWORD *)*(v22 - 4), *(_QWORD *)(*((_QWORD *)v22[5] + 7) + 40)) < v98 >> 3
            && v97 <= 6
            && ((1 << v97) & 0x68) != 0)
          {
            sub_1C4773D54((uint64_t)&v180, (uint64_t)v22, 0, 0, 0);
            v118 = *((_WORD *)v22 + 9);
            v119 = v118 >> 4;
            sub_1C506E46C((uint64_t)v169, (uint64_t *)&v180, *(llvm::LLVMContext ***)(*((_QWORD *)v22[5] + 7) + 40), (llvm::ConstantInt *)*v22, *(v22 - 8), HIBYTE(v118) & 0x3F, *(_DWORD *)(*(_QWORD *)(a1 + 32) + 80) >> 3);
            v120 = *(v22 - 4);
            v174 = 257;
            v121 = sub_1C4773E38((uint64_t *)&v180, 39, v120, v169[0], (uint64_t)&v173);
            v178 = "ValOperand_Shifted";
            v179 = 259;
            v122 = sub_1C506E874((uint64_t)&v180, (uint64_t)v121, v171, (uint64_t)&v178, 0, 0);
            v123 = (uint64_t *)v122;
            if (v119 == 3)
            {
              v173 = "AndOperand";
              v174 = 259;
              v123 = (uint64_t *)sub_1C4773594((uint64_t)&v180, v172, v122, (uint64_t)&v173);
            }
            v124 = sub_1C61D775C((uint64_t *)&v180, v119, v169[2], v123, v170 | 0x100u, (*((_WORD *)v22 + 9) >> 1) & 7, 1);
            v125 = sub_1C506EA10((uint64_t *)&v180, (uint64_t)v124, v169);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v22, (llvm::Value *)v125, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v22[5] + 40), (uint64_t ***)v22);
            v126 = v22[3];
            v127 = v22[4];
            *(_QWORD *)v127 = v126;
            *((_QWORD *)v126 + 1) = v127;
            v22[3] = 0;
            v22[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v22);
            if (v180 != v182)
              free(v180);
            v13 = 1;
          }
          sub_1C506BD78(a1);
          goto LABEL_103;
        }
        if (v103 != 3)
          goto LABEL_127;
        v113 = *(_DWORD *)(v94 + 32);
        if (v113)
        {
          v114 = (llvm::APInt *)(v94 + 24);
          if (v113 <= 0x40)
          {
            if (*(_QWORD *)v114 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v113)
              goto LABEL_185;
            goto LABEL_127;
          }
          if (llvm::APInt::countTrailingOnesSlowCase(v114) != v113)
            goto LABEL_127;
        }
LABEL_185:
        if ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 976))(*(_QWORD *)(a1 + 32), v26))
        {
          sub_1C506BAF0(a1);
          goto LABEL_146;
        }
        goto LABEL_127;
      }
      if ((*v24)[8] <= 6u)
      {
        v49 = (llvm::PointerType *)sub_1C506DEAC(*(_QWORD *)(a1 + 32), *v24, *(_QWORD *)(*((_QWORD *)v24[5] + 7) + 40) + 272);
        sub_1C4773D54((uint64_t)&v180, (uint64_t)v24, 0, 0, 0);
        v50 = *(v24 - 4);
        v51 = *(_DWORD *)(*(_QWORD *)v50 + 8);
        if ((v51 & 0xFE) == 0x12)
          v51 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v50 + 16) + 8);
        v52 = llvm::PointerType::get(v49, (llvm::Type *)(v51 >> 8));
        LOWORD(v171) = 257;
        v53 = sub_1C4773E38((uint64_t *)&v180, 49, v50, v52, (uint64_t)v169);
        v174 = 257;
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v183 + 56) + 40) + 272, (uint64_t)v49);
        v55 = v54;
        v56 = (char *)operator new(0x60uLL);
        v57 = v56;
        v58 = (unsigned __int8 *)(v56 + 32);
        *((_QWORD *)v56 + 2) = 0;
        *((_QWORD *)v56 + 3) = v56 + 32;
        LOWORD(v171) = 257;
        *((_QWORD *)v56 + 4) = v49;
        *((_QWORD *)v56 + 5) = 0;
        *((_WORD *)v56 + 24) = 60;
        *((_DWORD *)v56 + 13) = 1;
        *(_OWORD *)(v56 + 56) = 0u;
        *(_OWORD *)(v56 + 72) = 0u;
        *((_DWORD *)v56 + 22) = 0;
        *(_QWORD *)v56 = v53;
        *((_QWORD *)v56 + 1) = 0;
        if (v53)
        {
          v61 = *((_QWORD *)v53 + 1);
          v60 = v53 + 8;
          v59 = v61;
          *((_QWORD *)v56 + 1) = v61;
          if (v61)
            *(_QWORD *)(v59 + 16) = v56 + 8;
          *((_QWORD *)v56 + 2) = v60;
          *v60 = v56;
        }
        *((_WORD *)v56 + 25) = 2 * (v55 & 0x3F);
        v56[92] = 1;
        llvm::Value::setName((uint64_t ***)v56 + 4, (uint64_t)v169);
        (*(void (**)(uint64_t, unsigned __int8 *, const char **, uint64_t, uint64_t))(*(_QWORD *)v185 + 16))(v185, v58, &v173, v183, v184);
        if (!v181)
        {
LABEL_99:
          v62 = *((_WORD *)v57 + 25) & 0xFF81 | (2
                                               * __clz(1 << ((unint64_t)*((unsigned __int16 *)v24 + 9) >> 1))) ^ 0x7E;
          *((_WORD *)v57 + 25) = v62;
          v63 = v62 & 0xFFFE | *((_WORD *)v24 + 9) & 1;
          *((_WORD *)v57 + 25) = v63;
          v64 = *((_BYTE *)v24 + 60);
          *((_WORD *)v57 + 25) = v63 & 0xFC7F | *((_WORD *)v24 + 9) & 0x380;
          v57[92] = v64;
          v65 = (uint64_t)*v24;
          LOWORD(v171) = 257;
          v66 = sub_1C4773E38((uint64_t *)&v180, 49, v58, v65, (uint64_t)v169);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v24, (llvm::Value *)v66, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v24[5] + 40), (uint64_t ***)v24);
          v67 = v24[3];
          v68 = v24[4];
          *(_QWORD *)v68 = v67;
          *((_QWORD *)v67 + 1) = v68;
          v24[3] = 0;
          v24[4] = 0;
          llvm::Value::deleteValue((llvm::Value *)v24);
          if (v180 != v182)
            free(v180);
          v13 = 1;
          goto LABEL_102;
        }
        v106 = v180;
        v107 = &v180[16 * v181];
        v108 = (unsigned __int8 **)(v57 + 80);
        while (2)
        {
          v109 = *(_DWORD *)v106;
          v110 = (unsigned __int8 *)*((_QWORD *)v106 + 1);
          if (v110)
          {
            if (v109)
              goto LABEL_156;
            v178 = (void *)*((_QWORD *)v106 + 1);
            llvm::MetadataTracking::track((uint64_t)&v178, v110, 2);
            v111 = *v108;
LABEL_160:
            if (v111)
              llvm::MetadataTracking::untrack((uint64_t)(v57 + 80), v111);
            v112 = (unsigned __int8 *)v178;
            *v108 = (unsigned __int8 *)v178;
            if (v112)
              llvm::MetadataTracking::retrack((uint64_t)&v178, v112, (uint64_t)(v57 + 80));
          }
          else
          {
            v111 = *v108;
            if (*v108 || (v57[55] & 0x20) != 0)
            {
              if (!v109)
              {
                v178 = 0;
                goto LABEL_160;
              }
LABEL_156:
              llvm::Value::setMetadata((llvm::Value *)v58, *(_DWORD *)v106, (llvm::MDNode *)v110);
            }
          }
          v106 += 16;
          if (v106 == v107)
            goto LABEL_99;
          continue;
        }
      }
LABEL_102:
      sub_1C506BAF0(a1);
LABEL_103:
      v13 |= v69;
LABEL_147:
      if (++v20 == v21)
      {
        v20 = (unsigned __int8 ***)v175;
        goto LABEL_215;
      }
    }
    if (v24 && (v39 = *((unsigned __int16 *)v24 + 9), v40 = (v39 >> 7) & 7, ((0xD0uLL >> v40) & 1) != 0))
    {
      *((_WORD *)v24 + 9) = v39 & 0xFC7F | 0x100;
    }
    else
    {
      if (v25)
      {
        v41 = *(unsigned __int16 *)(v25 + 18);
        v40 = (v41 >> 7) & 7;
        if ((unint64_t)(v40 - 5) <= 2)
        {
          *(_WORD *)(v25 + 18) = v41 & 0xFC7F | 0x100;
          goto LABEL_84;
        }
      }
      if (v26
        && ((v42 = *(unsigned __int16 *)(v26 + 18), v40 = (v42 >> 1) & 7, (unint64_t)(v40 - 5) < 3)
         || ((0xD0uLL >> v40) & 1) != 0))
      {
        *(_WORD *)(v26 + 18) = v42 & 0xFFF1 | 4;
      }
      else
      {
        if (!v27)
          goto LABEL_90;
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 960))(*(_QWORD *)(a1 + 32), v27))
        {
          goto LABEL_90;
        }
        v43 = *(unsigned __int16 *)(v27 + 18);
        v44 = (v43 >> 2) & 7;
        if ((unint64_t)(v44 - 5) >= 3
          && ((0xD0uLL >> v44) & 1) == 0
          && ((0xD0uLL >> (v43 >> 5)) & 1) == 0)
        {
          goto LABEL_90;
        }
        v40 = v43 >> 5;
        if ((_DWORD)v40 == 4)
        {
          if ((_DWORD)v44 == 2)
          {
            v40 = 4;
          }
          else
          {
            if ((_DWORD)v44 != 5)
              goto LABEL_174;
            v40 = 6;
          }
        }
        else if ((_DWORD)v40 != 7)
        {
LABEL_174:
          v40 = (v43 >> 2) & 7;
        }
        *(_WORD *)(v27 + 18) = v43 & 0xFF03 | 0x48;
      }
    }
LABEL_84:
    if ((_DWORD)v40 != 2)
    {
      sub_1C4773D54((uint64_t)&v180, (uint64_t)v22, 0, 0, 0);
      v45 = (*(uint64_t (**)(_QWORD, char **, unsigned __int8 **, uint64_t))(**(_QWORD **)(a1 + 32) + 904))(*(_QWORD *)(a1 + 32), &v180, v22, v40);
      v46 = (llvm::Instruction *)(*(uint64_t (**)(_QWORD, char **, unsigned __int8 **, uint64_t))(**(_QWORD **)(a1 + 32) + 912))(*(_QWORD *)(a1 + 32), &v180, v22, v40);
      v47 = v46;
      if (v46)
        llvm::Instruction::moveAfter(v46, (llvm::Instruction *)v22);
      v48 = (v45 | (unint64_t)v47) != 0;
      if (v180 != v182)
        free(v180);
      v13 |= v48;
      v21 = v168;
    }
    goto LABEL_90;
  }
  LOBYTE(v13) = 0;
LABEL_215:
  if (v20 != (unsigned __int8 ***)&v177)
    free(v20);
  return v13 & 1;
}

uint64_t sub_1C506BA5C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t result;

  v4 = sub_1C506BD24(**(_QWORD **)(a2 - 64), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40));
  result = sub_1C506C36C(a1, a2, v4, HIBYTE(*(_WORD *)(a2 + 18)) & 0x3F, *(unsigned __int8 **)(a2 - 96), *(_QWORD *)(a2 - 32), *(_QWORD *)(a2 - 64), (*(unsigned __int16 *)(a2 + 18) >> 2) & 7, *(_WORD *)(a2 + 18) >> 5, dword_1C85FA74C);
  if ((result & 1) == 0)
    llvm::report_fatal_error((llvm *)"expandAtomicOpToLibcall shouldn't fail for CAS", (const char *)1);
  return result;
}

void sub_1C506BAF0(uint64_t a1)
{
  char *v1;

  v1 = (char *)sub_1C506BB50
     + 4
     * byte_1C85FA632[(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 944))(*(_QWORD *)(a1 + 32))];
  __asm { BR              X10 }
}

uint64_t sub_1C506BB50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,__int16 a43,int a44,int a45,int a46,char a47)
{
  unsigned __int16 *v47;
  uint64_t v48;
  uint64_t v50;

  sub_1C506DFD4(v48, (llvm::ValueAsMetadata *)v47, *(_QWORD *)v47, *((_QWORD *)v47 - 4), (v47[9] >> 7) & 7, (uint64_t (*)(uint64_t, uint64_t *, uint64_t))sub_1C506E464, (uint64_t)&v50);
  return 1;
}

unint64_t sub_1C506BD24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v5;

  sub_1C4768AD0(a2 + 272, a1);
  if ((_DWORD)v3 == 1)
  {
    v5 = v2;
    v2 = v5;
  }
  return (unint64_t)(v2 + 7) >> 3;
}

void sub_1C506BD78(uint64_t a1)
{
  char *v1;

  v1 = (char *)sub_1C506BDF0
     + 4
     * word_1C85FA63A[(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 968))(*(_QWORD *)(a1 + 32))];
  __asm { BR              X10 }
}

uint64_t sub_1C506BDF0()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;
  uint64_t *v5;

  v2 = *(_DWORD *)(*(_QWORD *)(v1 + 32) + 80);
  if (sub_1C506BD24(**(_QWORD **)(v0 - 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 56) + 40)) >= v2 >> 3)
  {
    v5 = &v4;
    sub_1C506DFD4(v1, (llvm::ValueAsMetadata *)v0, *(_QWORD *)v0, *(_QWORD *)(v0 - 64), (*(unsigned __int16 *)(v0 + 18) >> 1) & 7, (uint64_t (*)(uint64_t, uint64_t *, uint64_t))sub_1C506F710, (uint64_t)&v5);
  }
  else
  {
    sub_1C506EFE8(v1, v0, 1);
  }
  return 1;
}

uint64_t sub_1C506C36C(uint64_t a1, uint64_t a2, unsigned int a3, char a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int *a10)
{
  llvm::LLVMContext *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  uint64_t **v27;
  const llvm::APInt *v28;
  unsigned __int8 v29;
  llvm::ConstantInt *v30;
  unsigned int v31;
  int v32;
  const llvm::APInt *v33;
  uint64_t v34;
  llvm::ConstantInt *v35;
  unsigned int v36;
  unint64_t v37;
  const llvm::APInt *v38;
  llvm::ValueHandleBase *v39;
  uint64_t v40;
  llvm::ConstantInt *v41;
  unsigned int v42;
  unint64_t v43;
  llvm::ValueHandleBase *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *IntPtrType;
  const llvm::APInt *v49;
  llvm::ConstantInt *v50;
  unsigned int v51;
  unint64_t v52;
  llvm::ValueHandleBase *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unsigned int v61;
  llvm::PointerType *v62;
  unsigned __int8 **v63;
  unsigned __int8 **v64;
  unsigned int v65;
  uint64_t v66;
  char *v67;
  char *v68;
  llvm::Value *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  unsigned __int8 *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 **v78;
  unsigned int v79;
  llvm::ValueHandleBase *v80;
  llvm::ValueHandleBase *v81;
  llvm::PointerType *v82;
  unsigned __int8 **v83;
  uint64_t v84;
  char *v85;
  char *v86;
  llvm::Value *v87;
  _QWORD *v88;
  uint64_t v89;
  unsigned __int8 *v90;
  _QWORD *v91;
  unsigned __int8 *v92;
  unsigned int v93;
  BOOL v94;
  char v95;
  llvm::LLVMContext **v96;
  unsigned __int8 **v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  llvm::PointerType *v108;
  uint64_t v109;
  unsigned __int8 *v110;
  size_t v111;
  uint64_t **inserted;
  uint64_t v113;
  llvm::Type *v114;
  uint64_t v115;
  char v116;
  llvm::UndefValue *v117;
  llvm::PointerType *v118;
  char *v119;
  char *v120;
  llvm::Value *v121;
  unsigned __int8 *v122;
  _QWORD *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  llvm::Value *v127;
  uint64_t v128;
  _QWORD *v129;
  llvm::LLVMContext **v131;
  char *v132;
  char *v133;
  unsigned __int8 *v134;
  _QWORD *v135;
  unsigned __int8 *v136;
  char *v137;
  char *v138;
  unsigned __int8 **v139;
  int v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  _DWORD *v144;
  _DWORD *v145;
  int v146;
  char *v147;
  char *v148;
  unsigned __int8 **v149;
  int v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  unsigned __int8 **v153;
  unsigned __int8 *v154;
  char *v155;
  char *v156;
  unsigned __int8 **v157;
  int v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  char *v162;
  char *v163;
  unsigned __int8 **v164;
  int v165;
  unsigned __int8 *v166;
  unsigned __int8 *v167;
  unsigned __int8 *v168;
  unsigned __int8 v169;
  unsigned __int8 *v170;
  unint64_t v171;
  unsigned __int8 *v172;
  unsigned __int8 v173;
  unsigned int v174;
  BOOL v175;
  llvm::Value *v176;
  llvm::Value *v177;
  llvm::Value *v178;
  llvm::LLVMContext **v179;
  char *v180;
  unsigned __int8 **v181;
  unsigned __int8 **v182;
  unsigned __int8 **v183;
  llvm::ValueHandleBase *v184;
  llvm::ValueHandleBase *v185;
  _QWORD *v186;
  llvm::LLVMContext **v187;
  unsigned __int8 v188;
  uint64_t **v189;
  llvm::ValueHandleBase *v190;
  _BOOL4 v193;
  _DWORD v194[8];
  __int16 v195;
  uint64_t v196;
  _QWORD v197[4];
  __int16 v198;
  unsigned __int8 *v199;
  void *v200;
  uint64_t v201;
  _BYTE v202[16];
  __int16 v203;
  void *v204;
  uint64_t v205;
  _BYTE v206[48];
  void *v207[2];
  uint64_t v208;
  char *v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;

  v215 = *MEMORY[0x1E0C80C00];
  v16 = **(llvm::LLVMContext ***)a2;
  v17 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40);
  sub_1C4773D54((uint64_t)&v209, a2, 0, 0, 0);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 80);
  if (v18)
    v19 = v18 - 24;
  else
    v19 = 0;
  v20 = *(_QWORD *)(v19 + 48);
  if (v20)
    v21 = v20 - 24;
  else
    v21 = 0;
  sub_1C4773D54((uint64_t)v207, v21, 0, 0, 0);
  v22 = (unsigned __int8 *)v17[38];
  v23 = v17[39];
  v24 = &v22[v23];
  if (v23 >= 2)
  {
    v170 = v22 + 1;
    v169 = *v22;
    v171 = v23 - 1;
    v172 = v22 + 1;
    do
    {
      v174 = *v172++;
      v173 = v174;
      v175 = v169 >= v174;
      if (v169 <= v174)
        v169 = v173;
      if (!v175)
        v22 = v170;
      v170 = v172;
      --v171;
    }
    while (v171);
  }
  v25 = 8;
  if (v22 != v24)
  {
    if ((*v22 & 0xC0) != 0)
      v25 = 16;
    else
      v25 = 8;
  }
  if (1 << a4 >= (unint64_t)a3)
  {
    v193 = 0;
    if (a3 <= 0x10 && ((1 << a3) & 0x10116) != 0)
      v193 = v25 >= a3;
  }
  else
  {
    v193 = 0;
  }
  v26 = 8 * a3;
  LODWORD(v204) = 8 * a3;
  v186 = v17;
  if ((int)(8 * a3) <= 63)
  {
    switch(v26)
    {
      case 32:
        v27 = (uint64_t **)(*(_QWORD *)v16 + 1960);
        goto LABEL_24;
      case 16:
        v27 = (uint64_t **)(*(_QWORD *)v16 + 1936);
        goto LABEL_24;
      case 8:
        v27 = (uint64_t **)(*(_QWORD *)v16 + 1912);
        goto LABEL_24;
    }
  }
  else
  {
    if (v26 == 64)
    {
      v27 = (uint64_t **)(*(_QWORD *)v16 + 1984);
      goto LABEL_24;
    }
    if (v26 == 128)
    {
      v27 = (uint64_t **)(*(_QWORD *)v16 + 2008);
      goto LABEL_24;
    }
  }
  v144 = sub_1C5270984(*(_QWORD *)v16 + 2168, &v204);
  v27 = (uint64_t **)*((_QWORD *)v144 + 1);
  if (!v27)
  {
    v145 = v144;
    v27 = (uint64_t **)sub_1C484358C(*(_QWORD *)v16 + 2040, 24, 3);
    v146 = (int)v204;
    *v27 = (uint64_t *)v16;
    v27[2] = 0;
    v27[1] = (uint64_t *)((v146 << 8) | 0xDu);
    *((_QWORD *)v145 + 1) = v27;
  }
LABEL_24:
  v189 = v27;
  llvm::DataLayout::getAlignment((uint64_t)(v17 + 34), (uint64_t)v27);
  v188 = v29;
  v30 = *(llvm::ConstantInt **)(*(_QWORD *)v16 + 1984);
  v31 = *(_DWORD *)(*(_QWORD *)v16 + 1992);
  LODWORD(v205) = v31 >> 8;
  if (v31 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v204, a3, 0);
  }
  else
  {
    if (v31 <= 0xFF)
      v32 = 0;
    else
      v32 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v31);
    v204 = (void *)(v32 & a3);
  }
  v190 = llvm::ConstantInt::get(v30, (llvm::LLVMContext *)&v204, v28);
  if (v205 >= 0x41 && v204)
    MEMORY[0x1CAA32F9C](v204, 0x1000C8000313F17);
  v34 = dword_1C85FA66C[a8];
  v35 = *(llvm::ConstantInt **)(*(_QWORD *)v16 + 1960);
  v36 = *(_DWORD *)(*(_QWORD *)v16 + 1968);
  LODWORD(v205) = v36 >> 8;
  if (v36 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v204, v34, 0);
  }
  else
  {
    if (v36 <= 0xFF)
      v37 = 0;
    else
      v37 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v36);
    v204 = (void *)(v37 & v34);
  }
  v39 = llvm::ConstantInt::get(v35, (llvm::LLVMContext *)&v204, v33);
  if (v205 >= 0x41 && v204)
    MEMORY[0x1CAA32F9C](v204, 0x1000C8000313F17);
  v185 = v39;
  if (a7)
  {
    v40 = dword_1C85FA66C[a9];
    v41 = *(llvm::ConstantInt **)(*(_QWORD *)v16 + 1960);
    v42 = *(_DWORD *)(*(_QWORD *)v16 + 1968);
    LODWORD(v205) = v42 >> 8;
    if (v42 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v204, v40, 0);
    }
    else
    {
      if (v42 <= 0xFF)
        v43 = 0;
      else
        v43 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v42);
      v204 = (void *)(v43 & v40);
    }
    v44 = llvm::ConstantInt::get(v41, (llvm::LLVMContext *)&v204, v38);
    if (v205 >= 0x41 && v204)
      MEMORY[0x1CAA32F9C](v204, 0x1000C8000313F17);
    v184 = v44;
  }
  else
  {
    v184 = 0;
  }
  v187 = *(llvm::LLVMContext ***)a2;
  v45 = *(_QWORD *)v16;
  if (v193)
  {
    v46 = 0;
    v47 = a3;
    switch(a3)
    {
      case 1u:
        goto LABEL_52;
      case 2u:
        v47 = 2;
        goto LABEL_52;
      case 3u:
      case 5u:
      case 6u:
      case 7u:
        break;
      case 4u:
        v47 = 3;
        goto LABEL_52;
      case 8u:
        v47 = 4;
        goto LABEL_52;
      default:
        if (a3 != 16)
          break;
        v47 = 5;
LABEL_52:
        v46 = a10[v47];
        break;
    }
  }
  else
  {
    v46 = *a10;
    if (*a10 == 637)
      goto LABEL_78;
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v46 + 174048))
  {
LABEL_78:
    v75 = 0;
    goto LABEL_144;
  }
  v204 = v206;
  v205 = 0x600000000;
  v196 = 0;
  if (!v193)
  {
    IntPtrType = llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(v17 + 34), v16, 0);
    v50 = (llvm::ConstantInt *)*IntPtrType;
    v51 = *((_DWORD *)IntPtrType + 2);
    LODWORD(v201) = v51 >> 8;
    if (v51 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v200, a3, 0);
    }
    else
    {
      if (v51 <= 0xFF)
        LODWORD(v52) = 0;
      else
        v52 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v51);
      v200 = (void *)(v52 & a3);
    }
    v53 = llvm::ConstantInt::get(v50, (llvm::LLVMContext *)&v200, v49);
    if (v201 >= 0x41 && v200)
      MEMORY[0x1CAA32F9C](v200, 0x1000C8000313F17);
    v54 = v205;
    if (v205 >= HIDWORD(v205))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)v206, v205 + 1, 8);
      v54 = v205;
    }
    *((_QWORD *)v204 + v54) = v53;
    LODWORD(v205) = v205 + 1;
  }
  v55 = *(_DWORD *)(*(_QWORD *)a5 + 8);
  if ((v55 & 0xFE) == 0x12)
    v55 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a5 + 16) + 8);
  v56 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v16 + 1912), (llvm::Type *)(v55 >> 8));
  v203 = 257;
  v57 = sub_1C4773E38((uint64_t *)&v209, 49, a5, v56, (uint64_t)&v200);
  v58 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v16 + 1912), 0);
  v203 = 257;
  v59 = sub_1C4773E38((uint64_t *)&v209, 50, v57, v58, (uint64_t)&v200);
  v60 = v205;
  if (v205 >= HIDWORD(v205))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)v206, v205 + 1, 8);
    v60 = v205;
  }
  *((_QWORD *)v204 + v60) = v59;
  v61 = v205 + 1;
  LODWORD(v205) = v205 + 1;
  if (!a7)
  {
    v178 = 0;
    v64 = 0;
    goto LABEL_80;
  }
  v62 = *(llvm::PointerType **)a7;
  v203 = 257;
  v63 = sub_1C486A5CC((uint64_t *)v207, v62, 0, (uint64_t)&v200);
  v64 = v63;
  *((_WORD *)v63 + 9) = *((_WORD *)v63 + 9) & 0xFFC0 | v188;
  v65 = *((_DWORD *)*v63 + 2);
  if ((v65 & 0xFE) == 0x12)
    v65 = *(_DWORD *)(**((_QWORD **)*v63 + 2) + 8);
  v66 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v16 + 1912), (llvm::Type *)(v65 >> 8));
  v203 = 257;
  v178 = (llvm::Value *)sub_1C4773E38((uint64_t *)&v209, 49, (unsigned __int8 *)v64, v66, (uint64_t)&v200);
  llvm::IRBuilderBase::CreateLifetimeStart((llvm::IRBuilderBase *)&v209, v178, v190);
  v67 = (char *)operator new(0x80uLL);
  v68 = v67;
  *((_DWORD *)v67 + 21) = *((_DWORD *)v67 + 21) & 0x38000000 | 2;
  *(_QWORD *)v67 = 0;
  *((_QWORD *)v67 + 2) = 0;
  *((_QWORD *)v67 + 1) = 0;
  *((_QWORD *)v67 + 5) = 0;
  *((_QWORD *)v67 + 6) = 0;
  *((_QWORD *)v67 + 4) = 0;
  *((_QWORD *)v67 + 8) = ***(_QWORD ***)a7 + 1576;
  v69 = (llvm::Value *)(v67 + 64);
  *((_QWORD *)v67 + 3) = v67 + 64;
  *((_QWORD *)v67 + 7) = v67 + 64;
  *((_QWORD *)v67 + 9) = 0;
  v67[80] = 61;
  v67[81] = 0;
  *((_DWORD *)v67 + 21) = 2;
  *(_OWORD *)(v67 + 88) = 0u;
  *(_OWORD *)(v67 + 104) = 0u;
  *((_DWORD *)v67 + 30) = 0;
  v70 = (_QWORD *)(a7 + 8);
  v71 = *(_QWORD *)(a7 + 8);
  *(_QWORD *)v67 = a7;
  *((_QWORD *)v67 + 1) = v71;
  if (v71)
    *(_QWORD *)(v71 + 16) = v67 + 8;
  *((_QWORD *)v67 + 2) = v70;
  *v70 = v67;
  *((_QWORD *)v67 + 4) = v64;
  v72 = v64 + 1;
  v73 = v64[1];
  *((_QWORD *)v67 + 5) = v73;
  if (v73)
    *((_QWORD *)v73 + 2) = v67 + 40;
  *((_QWORD *)v67 + 6) = v72;
  *v72 = v67 + 32;
  *((_WORD *)v67 + 41) = 2 * (v188 & 0x3F);
  v67[124] = 1;
  v203 = 257;
  (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v214 + 16))(v214, v69, &v200, v212, v213);
  if (v210)
  {
    v147 = v209;
    v148 = &v209[16 * v210];
    v149 = (unsigned __int8 **)(v68 + 112);
    do
    {
      v150 = *(_DWORD *)v147;
      v151 = (unsigned __int8 *)*((_QWORD *)v147 + 1);
      if (v151)
      {
        if (!v150)
        {
          v197[0] = *((_QWORD *)v147 + 1);
          v181 = v149;
          llvm::MetadataTracking::track((uint64_t)v197, v151, 2);
          v149 = v181;
          v152 = *v181;
          goto LABEL_190;
        }
      }
      else
      {
        v152 = *v149;
        if (!*v149 && (v68[87] & 0x20) == 0)
          goto LABEL_187;
        if (!v150)
        {
          v197[0] = 0;
LABEL_190:
          if (v152)
          {
            v183 = v149;
            llvm::MetadataTracking::untrack((uint64_t)v149, v152);
            v149 = v183;
          }
          v154 = (unsigned __int8 *)v197[0];
          *v149 = (unsigned __int8 *)v197[0];
          if (v154)
          {
            v182 = v149;
            llvm::MetadataTracking::retrack((uint64_t)v197, v154, (uint64_t)v149);
            v149 = v182;
          }
          goto LABEL_187;
        }
      }
      v180 = v148;
      v153 = v149;
      llvm::Value::setMetadata(v69, *(_DWORD *)v147, (llvm::MDNode *)v151);
      v149 = v153;
      v148 = v180;
LABEL_187:
      v147 += 16;
    }
    while (v147 != v148);
  }
  v74 = v205;
  if (v205 >= HIDWORD(v205))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)v206, v205 + 1, 8);
    v74 = v205;
  }
  *((_QWORD *)v204 + v74) = v178;
  v61 = v205 + 1;
  LODWORD(v205) = v205 + 1;
LABEL_80:
  v179 = (llvm::LLVMContext **)(v45 + 1576);
  if (!a6)
  {
    v177 = 0;
    goto LABEL_93;
  }
  if (!v193)
  {
    v82 = *(llvm::PointerType **)a6;
    v203 = 257;
    v83 = sub_1C486A5CC((uint64_t *)v207, v82, 0, (uint64_t)&v200);
    *((_WORD *)v83 + 9) = *((_WORD *)v83 + 9) & 0xFFC0 | v188;
    v84 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v16 + 1912), 0);
    v203 = 257;
    v177 = (llvm::Value *)sub_1C4773E38((uint64_t *)&v209, 49, (unsigned __int8 *)v83, v84, (uint64_t)&v200);
    llvm::IRBuilderBase::CreateLifetimeStart((llvm::IRBuilderBase *)&v209, v177, v190);
    v85 = (char *)operator new(0x80uLL);
    v86 = v85;
    *((_DWORD *)v85 + 21) = *((_DWORD *)v85 + 21) & 0x38000000 | 2;
    *(_QWORD *)v85 = 0;
    *((_QWORD *)v85 + 2) = 0;
    *((_QWORD *)v85 + 1) = 0;
    *((_QWORD *)v85 + 5) = 0;
    *((_QWORD *)v85 + 6) = 0;
    *((_QWORD *)v85 + 4) = 0;
    *((_QWORD *)v85 + 8) = ***(_QWORD ***)a6 + 1576;
    v87 = (llvm::Value *)(v85 + 64);
    *((_QWORD *)v85 + 3) = v85 + 64;
    *((_QWORD *)v85 + 7) = v85 + 64;
    *((_QWORD *)v85 + 9) = 0;
    v85[80] = 61;
    v85[81] = 0;
    *((_DWORD *)v85 + 21) = 2;
    *(_OWORD *)(v85 + 88) = 0u;
    *(_OWORD *)(v85 + 104) = 0u;
    *((_DWORD *)v85 + 30) = 0;
    v88 = (_QWORD *)(a6 + 8);
    v89 = *(_QWORD *)(a6 + 8);
    *(_QWORD *)v85 = a6;
    *((_QWORD *)v85 + 1) = v89;
    if (v89)
      *(_QWORD *)(v89 + 16) = v85 + 8;
    *((_QWORD *)v85 + 2) = v88;
    *v88 = v85;
    *((_QWORD *)v85 + 4) = v83;
    v92 = v83[1];
    v91 = v83 + 1;
    v90 = v92;
    *((_QWORD *)v85 + 5) = v92;
    if (v92)
      *((_QWORD *)v90 + 2) = v85 + 40;
    *((_QWORD *)v85 + 6) = v91;
    *v91 = v85 + 32;
    *((_WORD *)v85 + 41) = 2 * (v188 & 0x3F);
    v85[124] = 1;
    v203 = 257;
    (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v214 + 16))(v214, v87, &v200, v212, v213);
    if (!v210)
    {
LABEL_90:
      v93 = v205;
      if (v205 >= HIDWORD(v205))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)v206, v205 + 1, 8);
        v93 = v205;
      }
      *((_QWORD *)v204 + v93) = v177;
      v61 = v205 + 1;
      LODWORD(v205) = v205 + 1;
LABEL_93:
      v81 = v184;
      v80 = v185;
      if (a7)
        v94 = 1;
      else
        v94 = v187 == v179;
      v95 = v193;
      if (v94)
        v95 = 1;
      if ((v95 & 1) != 0)
      {
        v176 = 0;
        v78 = 0;
        goto LABEL_105;
      }
      v96 = *(llvm::LLVMContext ***)a2;
      v203 = 257;
      v97 = sub_1C486A5CC((uint64_t *)v207, (llvm::PointerType *)v96, 0, (uint64_t)&v200);
      v78 = v97;
      *((_WORD *)v97 + 9) = *((_WORD *)v97 + 9) & 0xFFC0 | v188;
      v98 = *((_DWORD *)*v97 + 2);
      if ((v98 & 0xFE) == 0x12)
        v98 = *(_DWORD *)(**((_QWORD **)*v97 + 2) + 8);
      v99 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v16 + 1912), (llvm::Type *)(v98 >> 8));
      v203 = 257;
      v76 = sub_1C4773E38((uint64_t *)&v209, 49, (unsigned __int8 *)v78, v99, (uint64_t)&v200);
      llvm::IRBuilderBase::CreateLifetimeStart((llvm::IRBuilderBase *)&v209, (llvm::Value *)v76, v190);
      v79 = v205;
      v77 = v76;
      v176 = (llvm::Value *)v76;
      if (v205 >= HIDWORD(v205))
        goto LABEL_83;
      goto LABEL_104;
    }
    v162 = v209;
    v163 = &v209[16 * v210];
    v164 = (unsigned __int8 **)(v86 + 112);
    while (1)
    {
      v165 = *(_DWORD *)v162;
      v166 = (unsigned __int8 *)*((_QWORD *)v162 + 1);
      if (v166)
      {
        if (!v165)
        {
          v197[0] = *((_QWORD *)v162 + 1);
          llvm::MetadataTracking::track((uint64_t)v197, v166, 2);
          v167 = *v164;
          goto LABEL_220;
        }
      }
      else
      {
        v167 = *v164;
        if (!*v164 && (v86[87] & 0x20) == 0)
          goto LABEL_217;
        if (!v165)
        {
          v197[0] = 0;
LABEL_220:
          if (v167)
            llvm::MetadataTracking::untrack((uint64_t)(v86 + 112), v167);
          v168 = (unsigned __int8 *)v197[0];
          *v164 = (unsigned __int8 *)v197[0];
          if (v168)
            llvm::MetadataTracking::retrack((uint64_t)v197, v168, (uint64_t)(v86 + 112));
          goto LABEL_217;
        }
      }
      llvm::Value::setMetadata(v87, *(_DWORD *)v162, (llvm::MDNode *)v166);
LABEL_217:
      v162 += 16;
      if (v162 == v163)
        goto LABEL_90;
    }
  }
  v203 = 257;
  v76 = sub_1C506D6A8((uint64_t *)&v209, (unsigned __int8 *)a6, (uint64_t)v189, (uint64_t)&v200);
  v176 = 0;
  v177 = 0;
  v77 = 0;
  v78 = 0;
  v79 = v205;
  v81 = v184;
  v80 = v185;
  if (v205 >= HIDWORD(v205))
  {
LABEL_83:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)v206, v79 + 1, 8);
    v79 = v205;
    v176 = (llvm::Value *)v77;
  }
LABEL_104:
  *((_QWORD *)v204 + v79) = v76;
  v61 = v205 + 1;
  LODWORD(v205) = v205 + 1;
LABEL_105:
  if (v61 >= HIDWORD(v205))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)v206, v61 + 1, 8);
    v61 = v205;
  }
  *((_QWORD *)v204 + v61) = v80;
  v100 = (v205 + 1);
  LODWORD(v205) = v205 + 1;
  if (v81)
  {
    if (v100 >= HIDWORD(v205))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)v206, v100 + 1, 8);
      LODWORD(v100) = v205;
    }
    *((_QWORD *)v204 + v100) = v81;
    LODWORD(v100) = v205 + 1;
    LODWORD(v205) = v205 + 1;
  }
  v101 = v46;
  if (a7)
  {
    v189 = (uint64_t **)(*(_QWORD *)v16 + 1888);
    v196 = llvm::AttributeList::addAttributeAtIndex(&v196, (uint64_t *)v16, 0, 67);
    LODWORD(v100) = v205;
    v102 = (uint64_t)v186;
  }
  else
  {
    v102 = (uint64_t)v186;
    if (v187 == v179 || !v193)
      v189 = (uint64_t **)(*(_QWORD *)v16 + 1576);
  }
  v200 = v202;
  v201 = 0x600000000;
  if ((_DWORD)v100)
  {
    LODWORD(v103) = 0;
    v104 = (uint64_t **)v204;
    v105 = 8 * v100;
    do
    {
      v106 = **v104;
      if (v103 >= HIDWORD(v201))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v200, (uint64_t)v202, v103 + 1, 8);
        LODWORD(v103) = v201;
      }
      *((_QWORD *)v200 + v103) = v106;
      v103 = (v201 + 1);
      LODWORD(v201) = v201 + 1;
      ++v104;
      v105 -= 8;
    }
    while (v105);
    v107 = (uint64_t *)v200;
  }
  else
  {
    v103 = 0;
    v107 = (uint64_t *)v202;
  }
  v108 = (llvm::PointerType *)llvm::FunctionType::get(v189, v107, v103, 0);
  v109 = *(_QWORD *)(a1 + 32) + 8 * v101;
  v110 = *(unsigned __int8 **)(v109 + 174048);
  if (v110)
    v111 = strlen(*(const char **)(v109 + 174048));
  else
    v111 = 0;
  inserted = (uint64_t **)llvm::Module::getOrInsertFunction(v102, v110, v111, v108, v196);
  v198 = 257;
  v115 = sub_1C4774778((uint64_t *)&v209, inserted, v113, (uint64_t *)v204, v205, (uint64_t)v197, 0);
  *(_QWORD *)(v115 + 64) = v196;
  v116 = v193;
  if (!a6)
    v116 = 1;
  if ((v116 & 1) == 0)
    llvm::IRBuilderBase::CreateLifetimeEnd((llvm::IRBuilderBase *)&v209, v177, v190);
  if (!a7)
  {
    if (v187 == v179)
      goto LABEL_139;
    v131 = *(llvm::LLVMContext ***)a2;
    if (v193)
    {
      v198 = 257;
      v126 = (uint64_t)sub_1C506D6A8((uint64_t *)&v209, (unsigned __int8 *)v115, (uint64_t)v131, (uint64_t)v197);
      goto LABEL_137;
    }
    v195 = 257;
    v132 = (char *)operator new(0x60uLL);
    v133 = v132;
    v127 = (llvm::Value *)(v132 + 32);
    *((_QWORD *)v132 + 2) = 0;
    *((_QWORD *)v132 + 3) = v132 + 32;
    v198 = 257;
    *((_QWORD *)v132 + 4) = v131;
    *((_QWORD *)v132 + 5) = 0;
    *((_WORD *)v132 + 24) = 60;
    *((_DWORD *)v132 + 13) = 1;
    *(_OWORD *)(v132 + 56) = 0u;
    *(_OWORD *)(v132 + 72) = 0u;
    *((_DWORD *)v132 + 22) = 0;
    *(_QWORD *)v132 = v78;
    *((_QWORD *)v132 + 1) = 0;
    if (v78)
    {
      v136 = v78[1];
      v135 = v78 + 1;
      v134 = v136;
      *((_QWORD *)v132 + 1) = v136;
      if (v136)
        *((_QWORD *)v134 + 2) = v132 + 8;
      *((_QWORD *)v132 + 2) = v135;
      *v135 = v132;
    }
    *((_WORD *)v132 + 25) = 2 * (v188 & 0x3F);
    v132[92] = 1;
    llvm::Value::setName((uint64_t ***)v132 + 4, (uint64_t)v197);
    (*(void (**)(uint64_t, llvm::Value *, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)v214 + 16))(v214, v127, v194, v212, v213);
    if (!v210)
    {
LABEL_157:
      llvm::IRBuilderBase::CreateLifetimeEnd((llvm::IRBuilderBase *)&v209, v176, v190);
      goto LABEL_138;
    }
    v155 = v209;
    v156 = &v209[16 * v210];
    v157 = (unsigned __int8 **)(v133 + 80);
    while (1)
    {
      v158 = *(_DWORD *)v155;
      v159 = (unsigned __int8 *)*((_QWORD *)v155 + 1);
      if (v159)
      {
        if (!v158)
        {
          v199 = (unsigned __int8 *)*((_QWORD *)v155 + 1);
          llvm::MetadataTracking::track((uint64_t)&v199, v159, 2);
          v160 = *v157;
          goto LABEL_205;
        }
      }
      else
      {
        v160 = *v157;
        if (!*v157 && (v133[55] & 0x20) == 0)
          goto LABEL_202;
        if (!v158)
        {
          v199 = 0;
LABEL_205:
          if (v160)
            llvm::MetadataTracking::untrack((uint64_t)(v133 + 80), v160);
          v161 = v199;
          *v157 = v199;
          if (v161)
            llvm::MetadataTracking::retrack((uint64_t)&v199, v161, (uint64_t)(v133 + 80));
          goto LABEL_202;
        }
      }
      llvm::Value::setMetadata(v127, *(_DWORD *)v155, (llvm::MDNode *)v159);
LABEL_202:
      v155 += 16;
      if (v155 == v156)
        goto LABEL_157;
    }
  }
  v117 = llvm::UndefValue::get(*(llvm::UndefValue **)a2, v114);
  v118 = *(llvm::PointerType **)a7;
  v195 = 257;
  v119 = (char *)operator new(0x60uLL);
  v120 = v119;
  v121 = (llvm::Value *)(v119 + 32);
  *((_QWORD *)v119 + 2) = 0;
  *((_QWORD *)v119 + 3) = v119 + 32;
  v198 = 257;
  *((_QWORD *)v119 + 4) = v118;
  *((_QWORD *)v119 + 5) = 0;
  *((_WORD *)v119 + 24) = 60;
  *((_DWORD *)v119 + 13) = 1;
  *(_OWORD *)(v119 + 56) = 0u;
  *(_OWORD *)(v119 + 72) = 0u;
  *((_DWORD *)v119 + 22) = 0;
  *(_QWORD *)v119 = v64;
  *((_QWORD *)v119 + 1) = 0;
  if (v64)
  {
    v124 = v64[1];
    v123 = v64 + 1;
    v122 = v124;
    *((_QWORD *)v119 + 1) = v124;
    if (v124)
      *((_QWORD *)v122 + 2) = v119 + 8;
    *((_QWORD *)v119 + 2) = v123;
    *v123 = v119;
  }
  *((_WORD *)v119 + 25) = 2 * (v188 & 0x3F);
  v119[92] = 1;
  llvm::Value::setName((uint64_t ***)v119 + 4, (uint64_t)v197);
  (*(void (**)(uint64_t, llvm::Value *, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)v214 + 16))(v214, v121, v194, v212, v213);
  if (v210)
  {
    v137 = v209;
    v138 = &v209[16 * v210];
    v139 = (unsigned __int8 **)(v120 + 80);
    do
    {
      v140 = *(_DWORD *)v137;
      v141 = (unsigned __int8 *)*((_QWORD *)v137 + 1);
      if (v141)
      {
        if (!v140)
        {
          v199 = (unsigned __int8 *)*((_QWORD *)v137 + 1);
          llvm::MetadataTracking::track((uint64_t)&v199, v141, 2);
          v142 = *v139;
          goto LABEL_169;
        }
      }
      else
      {
        v142 = *v139;
        if (!*v139 && (v120[55] & 0x20) == 0)
          goto LABEL_166;
        if (!v140)
        {
          v199 = 0;
LABEL_169:
          if (v142)
            llvm::MetadataTracking::untrack((uint64_t)(v120 + 80), v142);
          v143 = v199;
          *v139 = v199;
          if (v143)
            llvm::MetadataTracking::retrack((uint64_t)&v199, v143, (uint64_t)(v120 + 80));
          goto LABEL_166;
        }
      }
      llvm::Value::setMetadata(v121, *(_DWORD *)v137, (llvm::MDNode *)v141);
LABEL_166:
      v137 += 16;
    }
    while (v137 != v138);
  }
  llvm::IRBuilderBase::CreateLifetimeEnd((llvm::IRBuilderBase *)&v209, v178, v190);
  v194[0] = 0;
  v198 = 257;
  v125 = sub_1C506D788((uint64_t)&v209, (uint64_t)v117, (uint64_t)v121, v194, 1, (uint64_t)v197);
  v194[0] = 1;
  v198 = 257;
  v126 = sub_1C506D788((uint64_t)&v209, v125, v115, v194, 1, (uint64_t)v197);
LABEL_137:
  v127 = (llvm::Value *)v126;
LABEL_138:
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, v127, (llvm::Value *)1);
LABEL_139:
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a2 + 40) + 40, (uint64_t ***)a2);
  v128 = *(_QWORD *)(a2 + 24);
  v129 = *(_QWORD **)(a2 + 32);
  *v129 = v128;
  *(_QWORD *)(v128 + 8) = v129;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)a2);
  if (v200 != v202)
    free(v200);
  if (v204 != v206)
    free(v204);
  v75 = 1;
LABEL_144:
  if (v207[0] != &v208)
    free(v207[0]);
  if (v209 != (char *)&v211)
    free(v209);
  return v75;
}

unsigned __int8 *sub_1C506D6A8(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v13;

  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == a3)
    return a2;
  v8 = *(_DWORD *)(v7 + 8);
  v9 = v8;
  if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12)
    v9 = *(unsigned __int8 *)(**(_QWORD **)(v7 + 16) + 8);
  if (v9 == 15
    && ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12
      ? (v13 = *(unsigned __int8 *)(**(_QWORD **)(a3 + 16) + 8))
      : (v13 = *(_DWORD *)(a3 + 8)),
        v13 == 13))
  {
    v11 = 47;
  }
  else
  {
    if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12)
      v8 = *(unsigned __int8 *)(**(_QWORD **)(v7 + 16) + 8);
    if (v8 == 13
      && ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12
        ? (v10 = *(unsigned __int8 *)(**(_QWORD **)(a3 + 16) + 8))
        : (v10 = *(_DWORD *)(a3 + 8)),
          v10 == 15))
    {
      v11 = 48;
    }
    else
    {
      v11 = 49;
    }
  }
  return sub_1C4773E38(a1, v11, a2, a3, a4);
}

uint64_t sub_1C506D788(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  char *v17;
  unsigned __int8 *v19[4];
  __int16 v20;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v8 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 352))(*(_QWORD *)(a1 + 72));
    if (v8)
      v9 = v8[16] >= 0x1Cu;
    else
      v9 = 0;
    if (v9)
    {
      (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v8, a6, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v10 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)a1;
        v12 = *(_QWORD *)a1 + 16 * v10;
        v13 = (unsigned __int8 **)(v8 + 48);
        do
        {
          v14 = *(_DWORD *)v11;
          v15 = *(unsigned __int8 **)(v11 + 8);
          if (v15)
          {
            if (!v14)
            {
              v19[0] = *(unsigned __int8 **)(v11 + 8);
              llvm::MetadataTracking::track((uint64_t)v19, v15, 2);
LABEL_22:
              if (v19 == v13)
              {
                if (v19[0])
                  llvm::MetadataTracking::untrack((uint64_t)v19, v19[0]);
              }
              else
              {
                if (*v13)
                  llvm::MetadataTracking::untrack((uint64_t)(v8 + 48), *v13);
                v16 = v19[0];
                *v13 = v19[0];
                if (v16)
                  llvm::MetadataTracking::retrack((uint64_t)v19, v16, (uint64_t)(v8 + 48));
              }
              goto LABEL_19;
            }
          }
          else
          {
            if (!*v13 && (v8[23] & 0x20) == 0)
              goto LABEL_19;
            if (!v14)
            {
              v19[0] = 0;
              goto LABEL_22;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v8, v14, (llvm::MDNode *)v15);
LABEL_19:
          v11 += 16;
        }
        while (v11 != v12);
      }
    }
  }
  else
  {
    v20 = 257;
    v17 = sub_1C61BD4C4((llvm::Type **)a2, a3, a4, a5, (uint64_t)v19, 0);
    return sub_1C477438C((uint64_t *)a1, (uint64_t)v17, a6);
  }
  return (uint64_t)v8;
}

llvm::Value *sub_1C506D920(uint64_t *a1, uint64_t a2, uint64_t a3, __int16 a4, __int16 a5, uint64_t a6)
{
  char v8;
  char v12;
  char *v13;
  char *v14;
  llvm::Value *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 **v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  _WORD v28[20];
  unsigned __int8 *v29;

  v8 = a4;
  if ((a4 & 0xFF00) == 0)
  {
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(a1[6] + 56) + 40) + 272, a2);
    v8 = v12;
  }
  v13 = (char *)operator new(0x60uLL);
  v14 = v13;
  v15 = (llvm::Value *)(v13 + 32);
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = v13 + 32;
  v28[16] = 257;
  *((_QWORD *)v13 + 4) = a2;
  *((_QWORD *)v13 + 5) = 0;
  *((_WORD *)v13 + 24) = 60;
  *((_DWORD *)v13 + 13) = 1;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *((_DWORD *)v13 + 22) = 0;
  *(_QWORD *)v13 = a3;
  *((_QWORD *)v13 + 1) = 0;
  if (a3)
  {
    v18 = *(_QWORD *)(a3 + 8);
    v17 = (_QWORD *)(a3 + 8);
    v16 = v18;
    *((_QWORD *)v13 + 1) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = v13 + 8;
    *((_QWORD *)v13 + 2) = v17;
    *v17 = v13;
  }
  *((_WORD *)v13 + 25) = a5 & 0xFF81 | (2 * (v8 & 0x3F));
  v13[92] = 1;
  llvm::Value::setName((uint64_t ***)v13 + 4, (uint64_t)v28);
  (*(void (**)(uint64_t, llvm::Value *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v15, a6, a1[6], a1[7]);
  v19 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v19)
  {
    v21 = *a1;
    v22 = *a1 + 16 * v19;
    v23 = (unsigned __int8 **)(v14 + 80);
    do
    {
      v24 = *(_DWORD *)v21;
      v25 = *(unsigned __int8 **)(v21 + 8);
      if (v25)
      {
        if (!v24)
        {
          v29 = *(unsigned __int8 **)(v21 + 8);
          llvm::MetadataTracking::track((uint64_t)&v29, v25, 2);
          v26 = *v23;
          goto LABEL_20;
        }
      }
      else
      {
        v26 = *v23;
        if (!*v23 && (v14[55] & 0x20) == 0)
          goto LABEL_17;
        if (!v24)
        {
          v29 = 0;
LABEL_20:
          if (v26)
            llvm::MetadataTracking::untrack((uint64_t)(v14 + 80), v26);
          v27 = v29;
          *v23 = v29;
          if (v27)
            llvm::MetadataTracking::retrack((uint64_t)&v29, v27, (uint64_t)(v14 + 80));
          goto LABEL_17;
        }
      }
      llvm::Value::setMetadata(v15, *(_DWORD *)v21, (llvm::MDNode *)v25);
LABEL_17:
      v21 += 16;
    }
    while (v21 != v22);
  }
  return v15;
}

uint64_t sub_1C506DAD8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t ***a4, uint64_t *a5, unsigned __int8 a6, int a7, char a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v11;
  uint64_t *v12;
  _QWORD v14[4];
  __int16 v15;
  unsigned int v16;

  v11 = *a1;
  v12 = (uint64_t *)sub_1C61D75CC(a2, a3, a4, a5, a6 | 0x100u, a7, dword_1C85FA764[a7 - 2], a8);
  v16 = 1;
  v14[0] = "success";
  v15 = 259;
  *a9 = sub_1C506DBC4((uint64_t)a2, v12, &v16, 1, (uint64_t)v14);
  v16 = 0;
  v14[0] = "newloaded";
  v15 = 259;
  *a10 = sub_1C506DBC4((uint64_t)a2, v12, &v16, 1, (uint64_t)v14);
  return sub_1C506BA5C(v11, (uint64_t)v12);
}

uint64_t sub_1C506DBC4(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  char *v19;
  char *v20;
  uint64_t ***v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned __int8 *v36[4];
  __int16 v37;

  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
  {
    v10 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t *, unsigned int *, uint64_t))(**(_QWORD **)(a1 + 72) + 344))(*(_QWORD *)(a1 + 72), a2, a3, a4);
    if (v10)
      v11 = v10[16] >= 0x1Cu;
    else
      v11 = 0;
    if (!v11)
      return (uint64_t)v10;
    (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v10, a5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v12 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v12)
      return (uint64_t)v10;
    v13 = *(_QWORD *)a1;
    v14 = *(_QWORD *)a1 + 16 * v12;
    v15 = (unsigned __int8 **)(v10 + 48);
    while (1)
    {
      v16 = *(_DWORD *)v13;
      v17 = *(unsigned __int8 **)(v13 + 8);
      if (v17)
      {
        if (!v16)
        {
          v36[0] = *(unsigned __int8 **)(v13 + 8);
          llvm::MetadataTracking::track((uint64_t)v36, v17, 2);
LABEL_20:
          if (v36 == v15)
          {
            if (v36[0])
              llvm::MetadataTracking::untrack((uint64_t)v36, v36[0]);
          }
          else
          {
            if (*v15)
              llvm::MetadataTracking::untrack((uint64_t)(v10 + 48), *v15);
            v18 = v36[0];
            *v15 = v36[0];
            if (v18)
              llvm::MetadataTracking::retrack((uint64_t)v36, v18, (uint64_t)(v10 + 48));
          }
          goto LABEL_17;
        }
      }
      else
      {
        if (!*v15 && (v10[23] & 0x20) == 0)
          goto LABEL_17;
        if (!v16)
        {
          v36[0] = 0;
          goto LABEL_20;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v10, v16, (llvm::MDNode *)v17);
LABEL_17:
      v13 += 16;
      if (v13 == v14)
        return (uint64_t)v10;
    }
  }
  v37 = 257;
  v19 = (char *)operator new(0x80uLL);
  v20 = v19;
  v21 = (uint64_t ***)(v19 + 32);
  *((_DWORD *)v19 + 13) = *((_DWORD *)v19 + 13) & 0x38000000 | 1;
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *((_QWORD *)v19 + 3) = v19 + 32;
  v22 = *a2;
  if (!a4)
  {
    v27 = *a2;
    goto LABEL_40;
  }
  v23 = 4 * a4;
  v24 = a3;
  while (1)
  {
    v25 = *v24;
    v26 = *(unsigned __int8 *)(v22 + 8);
    if (!v22 || v26 != 17)
      break;
    if (*(_QWORD *)(v22 + 32) <= v25)
      goto LABEL_49;
    v28 = (uint64_t *)(v22 + 24);
LABEL_35:
    v22 = *v28;
    ++v24;
    v27 = v22;
    v23 -= 4;
    if (!v23)
      goto LABEL_40;
  }
  v27 = 0;
  if (!v22 || v26 != 16)
    goto LABEL_40;
  if (v25 < *(_DWORD *)(v22 + 12))
  {
    v28 = (uint64_t *)(*(_QWORD *)(v22 + 16) + 8 * v25);
    goto LABEL_35;
  }
LABEL_49:
  v27 = 0;
LABEL_40:
  *((_QWORD *)v19 + 4) = v27;
  *((_QWORD *)v19 + 5) = 0;
  *((_QWORD *)v19 + 6) = 0x10000005CLL;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *((_DWORD *)v19 + 22) = 0;
  v29 = a2 + 1;
  v30 = a2[1];
  *(_QWORD *)v19 = a2;
  *((_QWORD *)v19 + 1) = v30;
  if (v30)
    *(_QWORD *)(v30 + 16) = v19 + 8;
  *((_QWORD *)v19 + 2) = v29;
  v31 = (uint64_t)(v19 + 112);
  *((_QWORD *)v19 + 12) = v19 + 112;
  v32 = (uint64_t)(v19 + 96);
  *v29 = v20;
  *((_QWORD *)v20 + 13) = 0x400000000;
  v33 = 4 * a4;
  if ((unint64_t)(4 * a4) >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v32, v31, v33 >> 2, 4);
    v34 = *((_DWORD *)v20 + 26);
    if (a4)
    {
LABEL_44:
      memcpy((void *)(*((_QWORD *)v20 + 12) + 4 * v34), a3, 4 * a4);
      v34 = *((_DWORD *)v20 + 26);
    }
  }
  else
  {
    v34 = 0;
    if (a4)
      goto LABEL_44;
  }
  *((_DWORD *)v20 + 26) = v34 + ((unint64_t)v33 >> 2);
  llvm::Value::setName(v21, (uint64_t)v36);
  return sub_1C477438C((uint64_t *)a1, (uint64_t)v21, a5);
}

_QWORD *sub_1C506DEAC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  _QWORD *v8;
  _QWORD *result;
  _DWORD *v10;
  int v11;
  int v12;
  _QWORD v13[2];
  int v14;

  v13[0] = sub_1C5065E80(a1, a3, (uint64_t)a2, 0);
  v13[1] = v4;
  v5 = sub_1C47C1C70((unsigned __int8 *)v13);
  if ((_DWORD)v6 == 1)
  {
    v12 = v5;
    v5 = v12;
  }
  v7 = 8 * v5;
  v8 = (_QWORD *)*a2;
  v14 = 8 * v5;
  if (8 * v5 <= 63)
  {
    switch(v7)
    {
      case 32:
        return (_QWORD *)(*v8 + 1960);
      case 16:
        return (_QWORD *)(*v8 + 1936);
      case 8:
        return (_QWORD *)(*v8 + 1912);
    }
  }
  else
  {
    if (v7 == 64)
      return (_QWORD *)(*v8 + 1984);
    if (v7 == 128)
      return (_QWORD *)(*v8 + 2008);
  }
  v10 = sub_1C5270984(*v8 + 2168, &v14);
  result = (_QWORD *)*((_QWORD *)v10 + 1);
  if (!result)
  {
    result = (_QWORD *)sub_1C484358C(*v8 + 2040, 24, 3);
    v11 = v14;
    *result = v8;
    result[2] = 0;
    result[1] = (v11 << 8) | 0xDu;
    *((_QWORD *)v10 + 1) = result;
  }
  return result;
}

void sub_1C506DFD4(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t (*a6)(uint64_t, uint64_t *, uint64_t), uint64_t a7)
{
  llvm::Value *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17[2];
  _QWORD v18[16];

  v18[15] = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v17, (uint64_t)a2, 0, 0, 0);
  v14 = (llvm::Value *)sub_1C506E0DC(a1, (uint64_t *)v17, a3, a4, a5, a6, a7);
  llvm::Value::doRAUW(a2, v14, (llvm::Value *)1);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)a2 + 5) + 40, (uint64_t ***)a2);
  v15 = *((_QWORD *)a2 + 3);
  v16 = (_QWORD *)*((_QWORD *)a2 + 4);
  *v16 = v15;
  *(_QWORD *)(v15 + 8) = v16;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  llvm::Value::deleteValue(a2);
  if (v17[0] != v18)
    free(v17[0]);
}

uint64_t sub_1C506E0DC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t (*a6)(uint64_t, uint64_t *, uint64_t), uint64_t a7)
{
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const llvm::APInt *v30;
  uint64_t v31;
  llvm::ConstantInt *v32;
  llvm::ValueHandleBase *v33;
  llvm::Value *v34;
  char *v35;
  uint64_t v36;
  unsigned __int8 **v37;
  char *v38;
  _QWORD *v43;
  const char *v45;
  unsigned int v46;
  __int16 v47;

  v10 = (uint64_t *)a2[6];
  v13 = a2 + 7;
  v11 = (uint64_t *)a2[7];
  v12 = (_QWORD *)v13[1];
  v14 = v10[7];
  v45 = "atomicrmw.end";
  v47 = 259;
  v15 = (uint64_t *)llvm::BasicBlock::splitBasicBlock(v10, v11, (uint64_t)&v45, 0);
  v45 = "atomicrmw.start";
  v47 = 259;
  v16 = operator new();
  v43 = v12;
  *(_QWORD *)v16 = *v12 + 1600;
  *(_QWORD *)(v16 + 8) = 0;
  v17 = *(_DWORD *)(v16 + 20) & 0xC0000000;
  *(_QWORD *)(v16 + 24) = 0;
  v18 = v16 + 24;
  *(_DWORD *)(v16 + 16) = 22;
  *(_DWORD *)(v16 + 20) = v17;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = v16 + 40;
  *(_QWORD *)(v16 + 48) = v16 + 40;
  *(_QWORD *)(v16 + 56) = 0;
  if (v14)
  {
    v19 = v14 + 72;
    if (v15)
      v20 = v15 + 3;
    else
      v20 = (uint64_t *)(v14 + 72);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v19, (_QWORD *)v16);
    v21 = *v20;
    *(_QWORD *)(v16 + 24) = *v20;
    *(_QWORD *)(v16 + 32) = v20;
    *(_QWORD *)(v21 + 8) = v18;
    *v20 = v18;
  }
  llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v45);
  v22 = v10[5];
  if (v22)
    v23 = v22 - 24;
  else
    v23 = 0;
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v23 + 40) + 40, (uint64_t ***)v23);
  v24 = *(_QWORD *)(v23 + 24);
  v25 = *(_QWORD **)(v23 + 32);
  *v25 = v24;
  *(_QWORD *)(v24 + 8) = v25;
  *(_QWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v23);
  a2[6] = (uint64_t)v10;
  a2[7] = (uint64_t)(v10 + 5);
  v26 = (char *)operator new(0x60uLL);
  *((_DWORD *)v26 + 13) = *((_DWORD *)v26 + 13) & 0x38000000 | 1;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 2) = 0;
  *((_QWORD *)v26 + 1) = 0;
  v27 = *(_QWORD *)(v16 + 8);
  *((_QWORD *)v26 + 4) = ***(_QWORD ***)v16 + 1576;
  v26[48] = 30;
  *((_DWORD *)v26 + 13) = 1;
  *((_QWORD *)v26 + 3) = v26 + 32;
  *((_QWORD *)v26 + 5) = 0;
  v26[49] = 0;
  *((_WORD *)v26 + 25) = 0;
  *((_DWORD *)v26 + 22) = 0;
  *(_OWORD *)(v26 + 72) = 0u;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_QWORD *)v26 = v16;
  *((_QWORD *)v26 + 1) = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v26 + 8;
  *((_QWORD *)v26 + 2) = v16 + 8;
  *(_QWORD *)(v16 + 8) = v26;
  v47 = 257;
  sub_1C4867F8C(a2, (unsigned __int8 **)v26 + 4, (uint64_t)&v45);
  a2[6] = v16;
  a2[7] = v16 + 40;
  v28 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 32) + 864))(*(_QWORD *)(a1 + 32), a2, a3, a4, a5);
  v29 = a6(a7, a2, v28);
  v31 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 32) + 872))(*(_QWORD *)(a1 + 32), a2, v29, a4, a5);
  v32 = *(llvm::ConstantInt **)(*v43 + 1960);
  v46 = *(_DWORD *)(*v43 + 1968) >> 8;
  if (v46 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v45, 0, 0);
  else
    v45 = 0;
  v33 = llvm::ConstantInt::get(v32, (llvm::LLVMContext *)&v45, v30);
  if (v46 >= 0x41 && v45)
    MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
  v45 = "tryagain";
  v47 = 259;
  v34 = (llvm::Value *)sub_1C4774B48((uint64_t)a2, 33, v31, (uint64_t)v33, (uint64_t)&v45);
  v35 = (char *)operator new(0xA0uLL);
  v36 = 0;
  v37 = (unsigned __int8 **)(v35 + 96);
  *((_DWORD *)v35 + 29) = *((_DWORD *)v35 + 29) & 0x38000000 | 3;
  do
  {
    v38 = &v35[v36];
    *(_QWORD *)v38 = 0;
    *((_QWORD *)v38 + 1) = 0;
    *((_QWORD *)v38 + 2) = 0;
    *((_QWORD *)v38 + 3) = v37;
    v36 += 32;
  }
  while (v36 != 96);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v35 + 96), (llvm::BasicBlock *)v16, (llvm::BasicBlock *)v15, v34, 0);
  v47 = 257;
  sub_1C4867F8C(a2, v37, (uint64_t)&v45);
  sub_1C4D8AE2C((uint64_t)a2, (uint64_t)v15, v15[6]);
  return v28;
}

uint64_t sub_1C506E464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_1C506E46C(uint64_t a1, uint64_t *a2, llvm::LLVMContext **a3, llvm::ConstantInt *a4, unsigned __int8 *a5, char a6, unsigned int a7)
{
  llvm::DataLayout *v13;
  llvm::LLVMContext *v14;
  const char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  llvm::Type *v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *IntPtrType;
  unsigned __int8 *v25;
  llvm::Value **v26;
  unsigned __int8 *v27;
  llvm::Value **v28;
  llvm::ConstantInt **v29;
  llvm::ConstantInt **v30;
  llvm::Value **v31;
  unsigned __int8 *v32;
  llvm::Value **v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  llvm::Value **v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  _DWORD *v44;
  llvm::Type *v45;
  llvm::Type *v46;
  _QWORD v47[4];
  __int16 v48;
  _QWORD v49[4];
  __int16 v50;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v13 = (llvm::DataLayout *)(a3 + 34);
  v14 = *a3;
  sub_1C4768AD0((uint64_t)(a3 + 34), (uint64_t)a4);
  v17 = v16 + 7;
  if ((_DWORD)v15 == 1)
  v18 = v17 >> 3;
  *(_QWORD *)(a1 + 8) = a4;
  v19 = (llvm::Type *)(a7 - (v17 >> 3));
  if (a7 <= (v17 >> 3))
  {
    *(_QWORD *)a1 = a4;
LABEL_17:
    *(_QWORD *)(a1 + 16) = a5;
    *(_BYTE *)(a1 + 24) = a6;
    *(_QWORD *)(a1 + 32) = llvm::ConstantInt::get(a4, 0, 0);
    result = (uint64_t)llvm::ConstantInt::get(a4, -1, (const llvm::APInt *)1);
    *(_QWORD *)(a1 + 40) = result;
    return result;
  }
  v20 = 8 * a7;
  LODWORD(v49[0]) = 8 * a7;
  if ((int)(8 * a7) <= 63)
  {
    switch(v20)
    {
      case 32:
        v21 = *(_QWORD *)v14 + 1960;
        goto LABEL_12;
      case 16:
        v21 = *(_QWORD *)v14 + 1936;
        goto LABEL_12;
      case 8:
        v21 = *(_QWORD *)v14 + 1912;
        goto LABEL_12;
    }
  }
  else
  {
    if (v20 == 64)
    {
      v21 = *(_QWORD *)v14 + 1984;
      goto LABEL_12;
    }
    if (v20 == 128)
    {
      v21 = *(_QWORD *)v14 + 2008;
      goto LABEL_12;
    }
  }
  v46 = (llvm::Type *)(a7 - (v17 >> 3));
  v42 = sub_1C5270984(*(_QWORD *)v14 + 2168, v49);
  v19 = v46;
  v21 = *((_QWORD *)v42 + 1);
  if (!v21)
  {
    v44 = v42;
    v21 = sub_1C484358C(*(_QWORD *)v14 + 2040, 24, 3);
    v43 = v49[0];
    *(_QWORD *)v21 = v14;
    *(_QWORD *)(v21 + 16) = 0;
    *(_DWORD *)(v21 + 8) = (v43 << 8) | 0xD;
    *(_DWORD *)(v21 + 12) = 0;
    v19 = v46;
    *((_QWORD *)v44 + 1) = v21;
  }
LABEL_12:
  *(_QWORD *)a1 = v21;
  if ((llvm::ConstantInt *)v21 == a4)
    goto LABEL_17;
  v45 = v19;
  v22 = *(_DWORD *)(*(_QWORD *)a5 + 8);
  if ((v22 & 0xFE) == 0x12)
    v22 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a5 + 16) + 8);
  v23 = llvm::PointerType::get((llvm::PointerType *)v21, (llvm::Type *)(v22 >> 8));
  IntPtrType = llvm::DataLayout::getIntPtrType(v13, v14, 0);
  v50 = 257;
  v25 = sub_1C4773E38(a2, 47, a5, (uint64_t)IntPtrType, (uint64_t)v49);
  v50 = 257;
  v26 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v25, ~(unint64_t)(a7 - 1), 0);
  v27 = (unsigned __int8 *)sub_1C4D89BCC((uint64_t)a2, v25, (uint64_t)v26, (uint64_t)v49);
  v47[0] = "AlignedAddr";
  v48 = 259;
  *(_QWORD *)(a1 + 16) = sub_1C4773E38(a2, 48, v27, v23, (uint64_t)v47);
  *(_BYTE *)(a1 + 24) = __clz(a7) ^ 0x3F;
  v49[0] = "PtrLSB";
  v50 = 259;
  v28 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v25, a7 - 1, 0);
  v29 = (llvm::ConstantInt **)sub_1C4D89BCC((uint64_t)a2, v25, (uint64_t)v28, (uint64_t)v49);
  v30 = v29;
  if (*(_BYTE *)v13)
  {
    v50 = 257;
    v31 = llvm::ConstantInt::get(*v29, (uint64_t)v45, 0);
    v32 = sub_1C506EC1C(a2, v30, (uint64_t)v31, (uint64_t)v49);
    v48 = 257;
    v33 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v32, 3, 0);
    v34 = v47;
    v35 = (uint64_t)a2;
    v36 = (uint64_t)v32;
  }
  else
  {
    v50 = 257;
    v33 = llvm::ConstantInt::get(*v29, 3, 0);
    v34 = v49;
    v35 = (uint64_t)a2;
    v36 = (uint64_t)v30;
  }
  v38 = (unsigned __int8 *)sub_1C506E874(v35, v36, (uint64_t)v33, (uint64_t)v34, 0, 0);
  v49[0] = "ShiftAmt";
  v50 = 259;
  v39 = sub_1C4773E38(a2, 38, v38, v21, (uint64_t)v49);
  *(_QWORD *)(a1 + 32) = v39;
  v40 = llvm::ConstantInt::get((llvm::ConstantInt *)v21, ~(-1 << (8 * v18)), 0);
  v49[0] = "Mask";
  v50 = 259;
  v41 = sub_1C506E874((uint64_t)a2, (uint64_t)v40, (uint64_t)v39, (uint64_t)v49, 0, 0);
  *(_QWORD *)(a1 + 40) = v41;
  v49[0] = "Inv_Mask";
  v50 = 259;
  result = sub_1C506EAA0((uint64_t)a2, v41, (uint64_t)v49);
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

uint64_t sub_1C506E874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v8 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72)
                                                                                                  + 152))(*(_QWORD *)(a1 + 72), a2, a3, a5, a6);
    if (v8)
      v9 = v8[16] >= 0x1Cu;
    else
      v9 = 0;
    if (!v9)
      return (uint64_t)v8;
    (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v8, a4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v10 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v10)
      return (uint64_t)v8;
    v12 = *(_QWORD *)a1;
    v13 = *(_QWORD *)a1 + 16 * v10;
    v14 = (unsigned __int8 **)(v8 + 48);
    while (1)
    {
      v15 = *(_DWORD *)v12;
      v16 = *(unsigned __int8 **)(v12 + 8);
      if (v16)
      {
        if (!v15)
        {
          v18 = *(unsigned __int8 **)(v12 + 8);
          llvm::MetadataTracking::track((uint64_t)&v18, v16, 2);
LABEL_24:
          if (&v18 == v14)
          {
            if (v18)
              llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
          }
          else
          {
            if (*v14)
              llvm::MetadataTracking::untrack((uint64_t)(v8 + 48), *v14);
            v17 = v18;
            *v14 = v18;
            if (v17)
              llvm::MetadataTracking::retrack((uint64_t)&v18, v17, (uint64_t)(v8 + 48));
          }
          goto LABEL_21;
        }
      }
      else
      {
        if (!*v14 && (v8[23] & 0x20) == 0)
          goto LABEL_21;
        if (!v15)
        {
          v18 = 0;
          goto LABEL_24;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v8, v15, (llvm::MDNode *)v16);
LABEL_21:
      v12 += 16;
      if (v12 == v13)
        return (uint64_t)v8;
    }
  }
  return sub_1C4774D04((uint64_t *)a1, 25, (_QWORD *)a2, a3, a4, a5, a6);
}

unsigned __int8 *sub_1C506EA10(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  _QWORD v9[4];
  __int16 v10;

  if (*a3 != a3[1])
  {
    v5 = a3[4];
    v9[0] = "shifted";
    v10 = 259;
    v6 = (unsigned __int8 *)sub_1C506ED1C((uint64_t)a1, a2, v5, (uint64_t)v9, 0);
    v7 = a3[1];
    v9[0] = "extracted";
    v10 = 259;
    return sub_1C4773E38(a1, 38, v6, v7, (uint64_t)v9);
  }
  return (unsigned __int8 *)a2;
}

uint64_t sub_1C506EAA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  llvm::Value *Not;
  unsigned __int8 *v16[4];
  __int16 v17;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u)
  {
    v5 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 208))(*(_QWORD *)(a1 + 72), a2);
    if (v5)
      v6 = v5[16] >= 0x1Cu;
    else
      v6 = 0;
    if (v6)
    {
      (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v5, a3, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v7 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)a1;
        v9 = *(_QWORD *)a1 + 16 * v7;
        v10 = (unsigned __int8 **)(v5 + 48);
        do
        {
          v11 = *(_DWORD *)v8;
          v12 = *(unsigned __int8 **)(v8 + 8);
          if (v12)
          {
            if (!v11)
            {
              v16[0] = *(unsigned __int8 **)(v8 + 8);
              llvm::MetadataTracking::track((uint64_t)v16, v12, 2);
LABEL_20:
              if (v16 == v10)
              {
                if (v16[0])
                  llvm::MetadataTracking::untrack((uint64_t)v16, v16[0]);
              }
              else
              {
                if (*v10)
                  llvm::MetadataTracking::untrack((uint64_t)(v5 + 48), *v10);
                v13 = v16[0];
                *v10 = v16[0];
                if (v13)
                  llvm::MetadataTracking::retrack((uint64_t)v16, v13, (uint64_t)(v5 + 48));
              }
              goto LABEL_17;
            }
          }
          else
          {
            if (!*v10 && (v5[23] & 0x20) == 0)
              goto LABEL_17;
            if (!v11)
            {
              v16[0] = 0;
              goto LABEL_20;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v5, v11, (llvm::MDNode *)v12);
LABEL_17:
          v8 += 16;
        }
        while (v8 != v9);
      }
    }
  }
  else
  {
    v17 = 257;
    Not = llvm::BinaryOperator::CreateNot(a2, (llvm::Type *)v16, 0);
    return sub_1C4773754((uint64_t *)a1, (uint64_t)Not, a3);
  }
  return (uint64_t)v5;
}

unsigned __int8 *sub_1C506EC1C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *result;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v18[32];
  __int16 v19;

  result = sub_1C477422C(a1, 30, (uint64_t)a2, a3, a4);
  if (!result)
  {
    v19 = 257;
    v9 = (char *)operator new(0x80uLL);
    *((_QWORD *)v9 + 8) = *a2;
    v10 = (uint64_t)(v9 + 64);
    *((_QWORD *)v9 + 3) = v9 + 64;
    *((_QWORD *)v9 + 5) = 0;
    v11 = v9 + 40;
    *((_QWORD *)v9 + 6) = 0;
    *((_QWORD *)v9 + 7) = v9 + 64;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0x20000003ALL;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_DWORD *)v9 + 30) = 0;
    *(_QWORD *)v9 = a2;
    v14 = a2[1];
    v13 = a2 + 1;
    v12 = v14;
    *((_QWORD *)v9 + 1) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v9 + 8;
    *((_QWORD *)v9 + 2) = v13;
    *v13 = v9;
    *((_QWORD *)v9 + 4) = a3;
    if (a3)
    {
      v17 = *(_QWORD *)(a3 + 8);
      v16 = (_QWORD *)(a3 + 8);
      v15 = v17;
      *v11 = v17;
      if (v17)
        *(_QWORD *)(v15 + 16) = v11;
      *((_QWORD *)v9 + 6) = v16;
      *v16 = v9 + 32;
    }
    llvm::Value::setName((uint64_t ***)v9 + 8, (uint64_t)v18);
    return (unsigned __int8 *)sub_1C4773754(a1, v10, a4);
  }
  return result;
}

uint64_t sub_1C506ED1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned __int8 *v40[4];
  __int16 v41;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v9 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 160))(*(_QWORD *)(a1 + 72), a2, a3, a5);
    if (v9)
      v10 = v9[16] >= 0x1Cu;
    else
      v10 = 0;
    if (v10)
    {
      (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v9, a4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v11 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)a1;
        v13 = *(_QWORD *)a1 + 16 * v11;
        v14 = (unsigned __int8 **)(v9 + 48);
        do
        {
          v15 = *(_DWORD *)v12;
          v16 = *(unsigned __int8 **)(v12 + 8);
          if (v16)
          {
            if (!v15)
            {
              v40[0] = *(unsigned __int8 **)(v12 + 8);
              llvm::MetadataTracking::track((uint64_t)v40, v16, 2);
LABEL_22:
              if (v40 == v14)
              {
                if (v40[0])
                  llvm::MetadataTracking::untrack((uint64_t)v40, v40[0]);
              }
              else
              {
                if (*v14)
                  llvm::MetadataTracking::untrack((uint64_t)(v9 + 48), *v14);
                v17 = v40[0];
                *v14 = v40[0];
                if (v17)
                  llvm::MetadataTracking::retrack((uint64_t)v40, v17, (uint64_t)(v9 + 48));
              }
              goto LABEL_19;
            }
          }
          else
          {
            if (!*v14 && (v9[23] & 0x20) == 0)
              goto LABEL_19;
            if (!v15)
            {
              v40[0] = 0;
              goto LABEL_22;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v9, v15, (llvm::MDNode *)v16);
LABEL_19:
          v12 += 16;
        }
        while (v12 != v13);
      }
    }
  }
  else
  {
    if ((a5 & 1) != 0)
    {
      v41 = 257;
      v18 = (char *)operator new(0x80uLL);
      v19 = v18;
      *((_QWORD *)v18 + 8) = *(_QWORD *)a2;
      v20 = v18 + 64;
      *((_QWORD *)v18 + 3) = v18 + 64;
      *((_QWORD *)v18 + 5) = 0;
      v21 = v18 + 40;
      *((_QWORD *)v18 + 6) = 0;
      *((_QWORD *)v18 + 7) = v18 + 64;
      *((_QWORD *)v18 + 9) = 0;
      *((_QWORD *)v18 + 10) = 0x200000036;
      *(_OWORD *)(v18 + 88) = 0u;
      *(_OWORD *)(v18 + 104) = 0u;
      *((_DWORD *)v18 + 30) = 0;
      *(_QWORD *)v18 = a2;
      v24 = *(_QWORD *)(a2 + 8);
      v23 = (_QWORD *)(a2 + 8);
      v22 = v24;
      *((_QWORD *)v18 + 1) = v24;
      if (v24)
        *(_QWORD *)(v22 + 16) = v18 + 8;
      *((_QWORD *)v18 + 2) = v23;
      *v23 = v18;
      *((_QWORD *)v18 + 4) = a3;
      if (a3)
      {
        v27 = *(_QWORD *)(a3 + 8);
        v26 = (_QWORD *)(a3 + 8);
        v25 = v27;
        *v21 = v27;
        if (v27)
          *(_QWORD *)(v25 + 16) = v21;
        *((_QWORD *)v18 + 6) = v26;
        *v26 = v18 + 32;
      }
      llvm::Value::setName((uint64_t ***)v18 + 8, (uint64_t)v40);
      v19[81] |= 2u;
      v28 = (uint64_t *)a1;
      v29 = (uint64_t)v20;
    }
    else
    {
      v41 = 257;
      v30 = (char *)operator new(0x80uLL);
      *((_QWORD *)v30 + 8) = *(_QWORD *)a2;
      v31 = v30 + 64;
      *((_QWORD *)v30 + 3) = v30 + 64;
      *((_QWORD *)v30 + 5) = 0;
      v32 = v30 + 40;
      *((_QWORD *)v30 + 6) = 0;
      *((_QWORD *)v30 + 7) = v30 + 64;
      *((_QWORD *)v30 + 9) = 0;
      *((_QWORD *)v30 + 10) = 0x200000036;
      *(_OWORD *)(v30 + 88) = 0u;
      *(_OWORD *)(v30 + 104) = 0u;
      *((_DWORD *)v30 + 30) = 0;
      *(_QWORD *)v30 = a2;
      v35 = *(_QWORD *)(a2 + 8);
      v34 = (_QWORD *)(a2 + 8);
      v33 = v35;
      *((_QWORD *)v30 + 1) = v35;
      if (v35)
        *(_QWORD *)(v33 + 16) = v30 + 8;
      *((_QWORD *)v30 + 2) = v34;
      *v34 = v30;
      *((_QWORD *)v30 + 4) = a3;
      if (a3)
      {
        v38 = *(_QWORD *)(a3 + 8);
        v37 = (_QWORD *)(a3 + 8);
        v36 = v38;
        *v32 = v38;
        if (v38)
          *(_QWORD *)(v36 + 16) = v32;
        *((_QWORD *)v30 + 6) = v37;
        *v37 = v30 + 32;
      }
      llvm::Value::setName((uint64_t ***)v30 + 8, (uint64_t)v40);
      v28 = (uint64_t *)a1;
      v29 = (uint64_t)v31;
    }
    return sub_1C4773754(v28, v29, a4);
  }
  return (uint64_t)v9;
}

void sub_1C506EFE8(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  llvm::ValueAsMetadata *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  uint64_t v20[2];
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  llvm::ValueAsMetadata *v24;
  void *v25[2];
  _QWORD v26[16];

  v26[15] = *MEMORY[0x1E0C80C00];
  v24 = (llvm::ValueAsMetadata *)a2;
  v6 = (*(unsigned __int16 *)(a2 + 18) >> 1) & 7;
  v7 = *(unsigned __int8 *)(a2 + 60);
  sub_1C4773D54((uint64_t)v25, a2, 0, 0, 0);
  sub_1C506E46C((uint64_t)v20, (uint64_t *)v25, *(llvm::LLVMContext ***)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40), *(llvm::ConstantInt **)a2, *(unsigned __int8 **)(a2 - 64), *(_BYTE *)(a2 + 19) & 0x3F, *(_DWORD *)(*(_QWORD *)(a1 + 32) + 80) >> 3);
  v8 = *(unsigned __int8 **)(a2 - 32);
  v9 = v20[0];
  v19 = 257;
  v10 = sub_1C4773E38((uint64_t *)v25, 39, v8, v20[0], (uint64_t)v18);
  v16[0] = "ValOperand_Shifted";
  v17 = 259;
  v16[0] = sub_1C506E874((uint64_t)v25, (uint64_t)v10, v23, (uint64_t)v16, 0, 0);
  v18[0] = &v24;
  v18[1] = v16;
  v18[2] = v20;
  if (a3 == 3)
    v11 = sub_1C5067C04((uint64_t *)v25, v9, v21, v22, v6, v7, (uint64_t (*)(uint64_t, uint64_t *, llvm::PHINode *))sub_1C506F4DC, (uint64_t)v18, (void (*)(uint64_t, uint64_t *, uint64_t, llvm::PHINode *, uint64_t, uint64_t, uint64_t, _QWORD, llvm::Value **, uint64_t *))sub_1C61D7864, (uint64_t)sub_1C506F1F4);
  else
    v11 = sub_1C506E0DC(a1, (uint64_t *)v25, v9, v21, v6, (uint64_t (*)(uint64_t, uint64_t *, uint64_t))sub_1C506F4DC, (uint64_t)v18);
  v12 = sub_1C506EA10((uint64_t *)v25, v11, v20);
  llvm::Value::doRAUW(v24, (llvm::Value *)v12, (llvm::Value *)1);
  v13 = v24;
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v24 + 5) + 40, (uint64_t ***)v24);
  v14 = *((_QWORD *)v13 + 3);
  v15 = (_QWORD *)*((_QWORD *)v13 + 4);
  *v15 = v14;
  *(_QWORD *)(v14 + 8) = v15;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 4) = 0;
  llvm::Value::deleteValue(v13);
  if (v25[0] != v26)
    free(v25[0]);
}

unsigned __int8 *sub_1C506F1F4(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 a5, int a6, char a7, uint64_t *a8, unsigned __int8 **a9)
{
  char v9;
  unsigned __int8 *v12;
  unsigned __int8 **v16;
  llvm::Type *v17;
  unsigned int v18;
  const char *v19;
  int PrimitiveSizeInBits;
  _QWORD *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned __int8 *result;
  _DWORD *v27;
  int v28;
  _DWORD *v29;
  unsigned int v32;
  _QWORD v33[4];
  __int16 v34;

  v9 = a7;
  v12 = a4;
  v16 = a9;
  v17 = *(llvm::Type **)a4;
  v18 = *(unsigned __int8 *)(*(_QWORD *)a4 + 8);
  if (v18 > 6)
    goto LABEL_15;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v17);
  if ((_DWORD)v19 == 1)
  v21 = (_QWORD *)a1[8];
  LODWORD(v33[0]) = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits <= 63)
  {
    if (PrimitiveSizeInBits <= 31)
    {
      switch(PrimitiveSizeInBits)
      {
        case 16:
          v22 = *v21 + 1936;
          goto LABEL_12;
        case 8:
          v22 = *v21 + 1912;
          goto LABEL_12;
        case 1:
          v22 = *v21 + 1888;
          goto LABEL_12;
      }
    }
    else if (PrimitiveSizeInBits == 32)
    {
      v22 = *v21 + 1960;
      goto LABEL_12;
    }
LABEL_24:
    v27 = sub_1C5270984(*v21 + 2168, v33);
    v22 = *((_QWORD *)v27 + 1);
    if (!v22)
    {
      v29 = v27;
      v22 = sub_1C484358C(*v21 + 2040, 24, 3);
      v28 = v33[0];
      *(_QWORD *)v22 = v21;
      *(_QWORD *)(v22 + 16) = 0;
      *(_DWORD *)(v22 + 8) = (v28 << 8) | 0xD;
      *(_DWORD *)(v22 + 12) = 0;
      *((_QWORD *)v29 + 1) = v22;
    }
    goto LABEL_12;
  }
  if (PrimitiveSizeInBits != 64)
  {
    if (PrimitiveSizeInBits == 128)
    {
      v22 = *v21 + 2008;
      goto LABEL_12;
    }
    goto LABEL_24;
  }
  v22 = *v21 + 1984;
LABEL_12:
  v23 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v23 & 0xFE) == 0x12)
    v23 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  v24 = llvm::PointerType::get((llvm::PointerType *)v22, (llvm::Type *)(v23 >> 8));
  v34 = 257;
  a2 = sub_1C4773E38(a1, 49, a2, v24, (uint64_t)v33);
  v34 = 257;
  v12 = sub_1C4773E38(a1, 49, v12, v22, (uint64_t)v33);
  v34 = 257;
  a3 = sub_1C4773E38(a1, 49, a3, v22, (uint64_t)v33);
  v16 = a9;
  v9 = a7;
LABEL_15:
  v25 = (uint64_t *)sub_1C61D75CC(a1, (uint64_t)a2, (uint64_t ***)a3, (uint64_t *)v12, a5 | 0x100u, a6, dword_1C85FA764[a6 - 2], v9);
  v32 = 1;
  v33[0] = "success";
  v34 = 259;
  *a8 = sub_1C506DBC4((uint64_t)a1, v25, &v32, 1, (uint64_t)v33);
  v32 = 0;
  v33[0] = "newloaded";
  v34 = 259;
  result = (unsigned __int8 *)sub_1C506DBC4((uint64_t)a1, v25, &v32, 1, (uint64_t)v33);
  *v16 = result;
  if (v18 <= 6)
  {
    v34 = 257;
    result = sub_1C4773E38(a1, 49, result, (uint64_t)v17, (uint64_t)v33);
    *v16 = result;
  }
  return result;
}

uint64_t sub_1C506F4DC(uint64_t **a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned __int8 *v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v15[32];
  __int16 v16;

  v3 = *(_WORD *)(**a1 + 18) >> 4;
  v4 = *a1[1];
  v5 = a1[2];
  if (((1 << v3) & 0x780) != 0)
  {
    sub_1C506EA10(a2, (uint64_t)a3, v5);
    llvm::buildAtomicRMWValue(v3);
    return sub_1C506F624(a2, a3, v8, v5);
  }
  else
  {
    if (((1 << v3) & 0x16) != 0)
    {
      llvm::buildAtomicRMWValue(v3);
      v10 = v5[5];
      v16 = 257;
      v4 = sub_1C4D89BCC((uint64_t)a2, v11, v10, (uint64_t)v15);
      v12 = v5[6];
      v16 = 257;
      v13 = (_QWORD *)sub_1C4D89BCC((uint64_t)a2, a3, v12, (uint64_t)v15);
    }
    else
    {
      v14 = v5[6];
      v16 = 257;
      v13 = (_QWORD *)sub_1C4D89BCC((uint64_t)a2, a3, v14, (uint64_t)v15);
    }
    v16 = 257;
    return sub_1C4773594((uint64_t)a2, v13, v4, (uint64_t)v15);
  }
}

uint64_t sub_1C506F624(uint64_t *a1, _QWORD *a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v5;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v14[4];
  __int16 v15;

  v5 = *a4;
  if (v5 != a4[1])
  {
    v14[0] = "extended";
    v15 = 259;
    v8 = sub_1C4773E38(a1, 39, a3, v5, (uint64_t)v14);
    v9 = a4[4];
    v14[0] = "shifted";
    v15 = 259;
    v10 = sub_1C506E874((uint64_t)a1, (uint64_t)v8, v9, (uint64_t)v14, 1, 0);
    v11 = a4[6];
    v14[0] = "unmasked";
    v15 = 259;
    v12 = (_QWORD *)sub_1C4D89BCC((uint64_t)a1, a2, v11, (uint64_t)v14);
    v14[0] = "inserted";
    v15 = 259;
    return sub_1C4773594((uint64_t)a1, v12, v10, (uint64_t)v14);
  }
  return (uint64_t)a3;
}

void sub_1C506F710(uint64_t a1)
{
  llvm::buildAtomicRMWValue(*(_WORD *)(**(_QWORD **)a1 + 18) >> 4);
}

void sub_1C506F728(uint64_t a1)
{
  llvm::buildAtomicRMWValue(*(_WORD *)(**(_QWORD **)a1 + 18) >> 4);
}

_QWORD *llvm::BasicTTIImpl::BasicTTIImpl(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a3 + 40) + 272;
  *a1 = &unk_1E813FF40;
  a1[1] = v4;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a3);
  a1[2] = v5;
  a1[3] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 120))(v5);
  return a1;
}

uint64_t sub_1C506F7A0(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  if ((result & 0xFF00000000) == 0)
    return 0;
  return result;
}

uint64_t sub_1C506F7C8()
{
  int v1;
  __int128 v2;
  int v3;
  int *v4;

  v3 = 0;
  v4 = &v3;
  *(_QWORD *)&v2 = "Threshold for partial unrolling";
  *((_QWORD *)&v2 + 1) = 31;
  v1 = 1;
  sub_1C61D79D0(&v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &llvm::PartialUnrollingThreshold, &dword_1C475E000);
}

_QWORD *sub_1C506F830(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E8140060;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      return sub_1C47A80D0(a1);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C506F890(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Control Flow Optimizer";
  *(_QWORD *)(v2 + 8) = 22;
  *(_QWORD *)(v2 + 16) = "branch-folder";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6CCA;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C507390C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C506F920(uint64_t a1, const llvm::MachineFunction *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  llvm *v10;
  void *v13;
  void *v14;
  llvm::SmallPtrSetImplBase *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;
  char v20;
  char v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  int v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  llvm::MachineBasicBlock *v47;
  int v48;
  llvm::MachineBasicBlock *v49;
  int v50;
  llvm::LivePhysRegs *v51;
  llvm::TargetInstrInfo *v52;
  unint64_t FirstTerminator;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  void **v59;
  BOOL v60;
  unint64_t *kk;
  uint64_t v62;
  llvm::MachineInstr *v63;
  unint64_t v64;
  llvm::TargetInstrInfo *v65;
  llvm::LivePhysRegs **i;
  int v67;
  uint64_t v69;
  _DWORD *v70;
  _DWORD *v71;
  char *v72;
  unsigned int v73;
  _QWORD *j;
  unsigned int v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  BOOL v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  _QWORD *m;
  unsigned int v90;
  _QWORD *k;
  unsigned int v92;
  _DWORD *v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  _QWORD *n;
  unsigned int v98;
  _DWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  unsigned int v102;
  _DWORD *v103;
  uint64_t v104;
  _QWORD *ii;
  unsigned int v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  _DWORD *v111;
  unsigned int v112;
  _QWORD *jj;
  unsigned int v114;
  _DWORD *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _WORD *v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  BOOL v129;
  int v130;
  unsigned int *v131;
  unsigned __int16 *v132;
  int v133;
  int v134;
  _QWORD *v135;
  unsigned __int16 *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  int v140;
  int v141;
  int v142;
  unint64_t v144;
  unint64_t *v145;
  const llvm::MachineBasicBlock *v146;
  llvm::LivePhysRegs *v147;
  const llvm::LivePhysRegs *v148;
  const llvm::MachineBasicBlock *v149;
  llvm::LivePhysRegs *v150;
  const llvm::LivePhysRegs *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  unsigned int v156;
  void **v157;
  _BOOL4 v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  unsigned __int16 *v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  llvm::MachineBasicBlock **v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  llvm::MachineBasicBlock **v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  char v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  __int128 *v200;
  uint64_t v201;
  void *v202;
  void *v203;
  int v204;
  int v205;
  unint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  char *v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  llvm::MachineBasicBlock *v220;
  uint64_t v221;
  unint64_t v222;
  _QWORD *mm;
  uint64_t nn;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  _DWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v234;
  unsigned int v236;
  int v237;
  unsigned int v238;
  void *v239;
  _QWORD *v240;
  int v241;
  unsigned int v242;
  _DWORD *v243;
  unint64_t *v244;
  char v245;
  llvm::MachineFunction *v246;
  int v247;
  char *v248;
  char *v249;
  _QWORD *v250;
  llvm::MachineBasicBlock *v251;
  llvm::SmallPtrSetImplBase *v252;
  uint64_t v253;
  unsigned int v254;
  uint64_t v255;
  _QWORD *v256;
  unsigned int v257;
  BOOL v258;
  llvm::LivePhysRegs *v259;
  llvm::LivePhysRegs *v260;
  void *v261;
  void *v262;
  __int128 v263;
  _BYTE v264[16];
  void *v265;
  int v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  _QWORD **v271;
  _QWORD *v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  _BYTE v276[16];
  _QWORD **v277;
  _QWORD *v278;
  uint64_t v279;
  void *v280;
  uint64_t v281;
  _BYTE v282[16];
  _QWORD **v283;
  _QWORD *v284;
  uint64_t v285;
  void *v286;
  uint64_t v287;
  _BYTE v288[16];
  _QWORD **v289;
  _QWORD *v290;
  uint64_t v291;
  _DWORD *v292;
  uint64_t v293;
  _DWORD v294[32];
  uint64_t v295;

  v295 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v19 = 0;
    return v19 & 1;
  }
  v10 = a2;
  v14 = *(void **)(a1 + 24);
  v13 = *(void **)(a1 + 32);
  v15 = (llvm::SmallPtrSetImplBase *)(a1 + 24);
  if (v13 == v14)
    goto LABEL_3;
  v234 = *(unsigned int *)(a1 + 40);
  if (v234 < 0x21 || 4 * (*(_DWORD *)(a1 + 44) - *(_DWORD *)(a1 + 48)) >= v234)
  {
    memset(v13, 255, 8 * v234);
LABEL_3:
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    goto LABEL_4;
  }
  free(v13);
  v236 = *(_DWORD *)(a1 + 44) - *(_DWORD *)(a1 + 48);
  v237 = 1 << (33 - __clz(v236 - 1));
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  if (v236 <= 0x10)
    v238 = 32;
  else
    v238 = v237;
  *(_DWORD *)(a1 + 40) = v238;
  v239 = malloc_type_malloc(8 * v238, 0x4065EBACuLL);
  if (!v239)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 32) = v239;
  memset(v239, 255, 8 * *(unsigned int *)(a1 + 40));
LABEL_4:
  v16 = *((_QWORD *)v10 + 5);
  *(_BYTE *)(a1 + 120) = a6;
  *(_QWORD *)(a1 + 144) = a4;
  *(_QWORD *)(a1 + 152) = a5;
  *(_QWORD *)(a1 + 128) = a3;
  *(_QWORD *)(a1 + 136) = v16;
  v17 = *(unint64_t **)(*(_QWORD *)v16 + 360);
  v18 = *v17;
  if ((*v17 & 4) == 0)
  {
    *(_BYTE *)(a1 + 123) = 0;
LABEL_9:
    *v17 = v18 & 0xFFFFFFFFFFFFFFFBLL;
    goto LABEL_10;
  }
  v20 = (*(uint64_t (**)(uint64_t, llvm *))(*(_QWORD *)a4 + 424))(a4, v10);
  *(_BYTE *)(a1 + 123) = v20;
  if ((v20 & 1) == 0)
  {
    v17 = *(unint64_t **)(*(_QWORD *)v16 + 360);
    v18 = *v17;
    goto LABEL_9;
  }
LABEL_10:
  llvm::getEHScopeMembership(v10, a2, (uint64_t)&v292);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 72), 8);
  *(_QWORD *)(a1 + 72) = v292;
  *(_QWORD *)(a1 + 80) = v293;
  v292 = 0;
  v293 = 0;
  *(_DWORD *)(a1 + 88) = v294[0];
  v294[0] = 0;
  MEMORY[0x1CAA32FB4](0, 8);
  v21 = 0;
  v22 = (_QWORD *)((char *)v10 + 320);
  v246 = v10;
  v256 = (_QWORD *)((char *)v10 + 320);
  v252 = v15;
  do
  {
    while (1)
    {
      v245 = v21;
      if (*(_BYTE *)(a1 + 121))
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
        v23 = (_QWORD *)*((_QWORD *)v10 + 41);
        if (v23 == v22)
        {
          v247 = 0;
        }
        else
        {
          while (1)
          {
            v25 = *(_QWORD *)a1;
            v24 = *(_QWORD *)(a1 + 8);
            v26 = v24 - *(_QWORD *)a1;
            v27 = v26 >> 4;
            if (v26 >> 4 == dword_1ED7F5040)
              break;
            v28 = sub_1C477672C((uint64_t)v15, (uint64_t)v23);
            v29 = *(_QWORD *)(a1 + 32);
            v30 = 40;
            if (v29 == *(_QWORD *)(a1 + 24))
              v30 = 44;
            v31 = v256;
            if (v28 == (_QWORD *)(v29 + 8 * *(unsigned int *)(a1 + v30)) && v23[11] == v23[12])
            {
              v32 = sub_1C50720EC((uint64_t)v23);
              v33 = v32;
              v35 = *(_QWORD **)(a1 + 8);
              v34 = *(_QWORD *)(a1 + 16);
              if ((unint64_t)v35 >= v34)
              {
                v37 = *(_QWORD **)a1;
                v38 = ((uint64_t)v35 - *(_QWORD *)a1) >> 4;
                v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 60)
LABEL_497:
                  abort();
                v40 = v34 - (_QWORD)v37;
                if (v40 >> 3 > v39)
                  v39 = v40 >> 3;
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
                  v41 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v41 = v39;
                if (v41)
                {
                  if (v41 >> 60)
LABEL_498:
                    sub_1C4764EE4();
                  v42 = (char *)operator new(16 * v41);
                }
                else
                {
                  v42 = 0;
                }
                v43 = &v42[16 * v38];
                *(_DWORD *)v43 = v33;
                *((_QWORD *)v43 + 1) = v23;
                v44 = v43;
                if (v35 != v37)
                {
                  do
                  {
                    *((_OWORD *)v44 - 1) = *((_OWORD *)v35 - 1);
                    v44 -= 16;
                    v35 -= 2;
                  }
                  while (v35 != v37);
                  v35 = *(_QWORD **)a1;
                }
                v36 = v43 + 16;
                *(_QWORD *)a1 = v44;
                *(_QWORD *)(a1 + 8) = v43 + 16;
                *(_QWORD *)(a1 + 16) = &v42[16 * v41];
                if (v35)
                  operator delete(v35);
                v31 = v256;
              }
              else
              {
                *(_DWORD *)v35 = v32;
                v35[1] = v23;
                v36 = v35 + 2;
              }
              *(_QWORD *)(a1 + 8) = v36;
            }
            v23 = (_QWORD *)v23[1];
            if (v23 == v31)
            {
              v25 = *(_QWORD *)a1;
              v24 = *(_QWORD *)(a1 + 8);
              v27 = dword_1ED7F5040;
              v26 = v24 - *(_QWORD *)a1;
              v45 = v26 >> 4;
              goto LABEL_342;
            }
          }
          v45 = v26 >> 4;
LABEL_342:
          if (v45 == v27 && v25 != v24)
          {
            do
            {
              sub_1C4774094(v15, *(_QWORD *)(v25 + 8));
              v25 += 16;
            }
            while (v25 != v24);
            v26 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
          }
          if ((unint64_t)v26 >= 0x11)
            v247 = sub_1C61D87E4((_QWORD *)a1, 0, 0, *(_DWORD *)(a1 + 124));
          else
            v247 = 0;
          v22 = v256;
        }
        v167 = *(llvm::MachineBasicBlock ***)(*((_QWORD *)v10 + 41) + 8);
LABEL_352:
        if (v167 == v22)
          goto LABEL_40;
        v169 = (uint64_t *)v167[8];
        v168 = (uint64_t *)v167[9];
        if ((((char *)v168 - (char *)v169) & 0x7FFFFFFF0) == 0)
          goto LABEL_454;
        v267 = &v271;
        v268 = (uint64_t)&v271;
        v269 = 8;
        v270 = 0;
        v251 = *v167;
        v170 = *(_QWORD *)a1;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
        if (*(_BYTE *)(a1 + 120))
        {
          v171 = *(_QWORD *)(a1 + 152);
          if (v171)
          {
            v172 = *(_DWORD *)(v171 + 264);
            if (v172)
            {
              v173 = *(_QWORD *)(v171 + 248);
              v174 = v172 - 1;
              v175 = (v172 - 1) & ((v167 >> 4) ^ (v167 >> 9));
              v176 = *(llvm::MachineBasicBlock ***)(v173 + 16 * v175);
              if (v167 == v176)
              {
LABEL_361:
                v179 = *(_QWORD *)(v173 + 16 * v175 + 8);
                if (v179 && v167 == **(llvm::MachineBasicBlock ****)(v179 + 32))
                  goto LABEL_452;
                goto LABEL_365;
              }
              v177 = 1;
              while (v176 != (llvm::MachineBasicBlock **)-4096)
              {
                v178 = v175 + v177++;
                v175 = v178 & v174;
                v176 = *(llvm::MachineBasicBlock ***)(v173 + 16 * v175);
                if (v167 == v176)
                  goto LABEL_361;
              }
            }
          }
        }
        v179 = 0;
LABEL_365:
        if (v169 == v168)
        {
          v217 = v170;
          goto LABEL_449;
        }
        v255 = v179;
        while (1)
        {
          if (dword_1ED7F5040 == (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4)
          {
LABEL_439:
            v170 = *(_QWORD *)a1;
            v217 = *(_QWORD *)(a1 + 8);
            v218 = v217 - *(_QWORD *)a1;
            if (v217 != *(_QWORD *)a1 && v218 >> 4 == dword_1ED7F5040)
            {
              do
              {
                sub_1C4774094(v15, *(_QWORD *)(v170 + 8));
                v170 += 16;
              }
              while (v170 != v217);
              v170 = *(_QWORD *)a1;
              v217 = *(_QWORD *)(a1 + 8);
              v218 = v217 - *(_QWORD *)a1;
            }
            if ((unint64_t)v218 >= 0x11)
            {
              v247 |= sub_1C61D87E4((_QWORD *)a1, (uint64_t)v167, v251, *(_DWORD *)(a1 + 124));
              v170 = *(_QWORD *)a1;
              v217 = *(_QWORD *)(a1 + 8);
            }
LABEL_449:
            if (v217 - v170 == 16)
            {
              v220 = *(llvm::MachineBasicBlock **)(v170 + 8);
              if (v220 != *v167)
                sub_1C5071AC8(v220, (uint64_t)v167, *(_QWORD *)(a1 + 128));
            }
LABEL_452:
            if ((void *)v268 != v267)
              free((void *)v268);
LABEL_454:
            v167 = (llvm::MachineBasicBlock **)v167[1];
            goto LABEL_352;
          }
          v180 = *v169;
          v181 = sub_1C477672C((uint64_t)v15, *v169);
          v182 = *(_QWORD *)(a1 + 32);
          v183 = 40;
          if (v182 == *(_QWORD *)(a1 + 24))
            v183 = 44;
          if (v181 != (_QWORD *)(v182 + 8 * *(unsigned int *)(a1 + v183)) || v180 == (_QWORD)v167)
            goto LABEL_433;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v267, v180);
          if (!v185)
            goto LABEL_433;
          v186 = *(_QWORD *)(v180 + 88);
          v187 = *(_QWORD *)(v180 + 96);
          v188 = v186;
          if (v186 != v187)
          {
            while (!*(_BYTE *)(*(_QWORD *)v188 + 184))
            {
              v188 += 8;
              if (v188 == v187)
              {
                while (!*(_BYTE *)(*(_QWORD *)v186 + 202))
                {
                  v186 += 8;
                  if (v186 == v187)
                    goto LABEL_380;
                }
                goto LABEL_433;
              }
            }
            goto LABEL_433;
          }
LABEL_380:
          if (!*(_BYTE *)(a1 + 120) || (v189 = *(_QWORD *)(a1 + 152)) == 0)
          {
LABEL_390:
            v286 = 0;
            v280 = 0;
            v292 = v294;
            v293 = 0x400000000;
            if (((*(uint64_t (**)(_QWORD, uint64_t, void **, void **, _DWORD **, uint64_t))(**(_QWORD **)(a1 + 128) + 248))(*(_QWORD *)(a1 + 128), v180, &v286, &v280, &v292, 1) & 1) == 0)
            {
              v261 = &v263;
              v262 = (void *)0x400000000;
              v199 = v293;
              if (!(_DWORD)v293)
                goto LABEL_399;
              v200 = &v263;
              v201 = v293;
              if (v293 >= 5uLL)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v261, (uint64_t)&v263, v293, 32);
                v201 = v293;
                if ((_DWORD)v293)
                {
                  v200 = (__int128 *)v261;
                  v22 = v256;
                  goto LABEL_393;
                }
                LODWORD(v262) = v199;
                v22 = v256;
                if (v286)
                  goto LABEL_401;
                goto LABEL_410;
              }
LABEL_393:
              memcpy(v200, v292, 32 * v201);
              LODWORD(v262) = v199;
              v202 = v286;
              if (!(_DWORD)v293 || v286 != v167)
                goto LABEL_400;
              if (((*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 128) + 728))(*(_QWORD *)(a1 + 128), &v261) & 1) == 0)
              {
                if (!v280 && *(_QWORD **)(v180 + 8) != v22)
                  v280 = *(void **)(v180 + 8);
LABEL_399:
                v202 = v286;
LABEL_400:
                if (v202)
                {
LABEL_401:
                  if (!(_DWORD)v293 || v280)
                  {
                    llvm::MachineBasicBlock::findBranchDebugLoc((llvm::MachineBasicBlock *)v180, (unsigned __int8 **)&v274);
                    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 128) + 264))(*(_QWORD *)(a1 + 128), v180, 0);
                    if ((_DWORD)v293)
                    {
                      if (v286 == v167)
                        v203 = v280;
                      else
                        v203 = v286;
                      (*(void (**)(_QWORD, uint64_t, void *, _QWORD, void *, _QWORD, void **, _QWORD))(**(_QWORD **)(a1 + 128) + 272))(*(_QWORD *)(a1 + 128), v180, v203, 0, v261, v262, &v274, 0);
                    }
                    if (v274)
                      llvm::MetadataTracking::untrack((uint64_t)&v274, (unsigned __int8 *)v274);
                  }
                }
LABEL_410:
                v204 = sub_1C50720EC(v180);
                v205 = v204;
                v207 = *(_QWORD **)(a1 + 8);
                v206 = *(_QWORD *)(a1 + 16);
                if ((unint64_t)v207 >= v206)
                {
                  v209 = *(_QWORD **)a1;
                  v210 = ((uint64_t)v207 - *(_QWORD *)a1) >> 4;
                  v211 = v210 + 1;
                  if ((unint64_t)(v210 + 1) >> 60)
                    goto LABEL_497;
                  v212 = v206 - (_QWORD)v209;
                  if (v212 >> 3 > v211)
                    v211 = v212 >> 3;
                  if ((unint64_t)v212 >= 0x7FFFFFFFFFFFFFF0)
                    v213 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v213 = v211;
                  if (v213)
                  {
                    if (v213 >> 60)
                      goto LABEL_498;
                    v214 = (char *)operator new(16 * v213);
                  }
                  else
                  {
                    v214 = 0;
                  }
                  v215 = &v214[16 * v210];
                  *(_DWORD *)v215 = v205;
                  *((_QWORD *)v215 + 1) = v180;
                  v216 = v215;
                  if (v207 != v209)
                  {
                    do
                    {
                      *((_OWORD *)v216 - 1) = *((_OWORD *)v207 - 1);
                      v216 -= 16;
                      v207 -= 2;
                    }
                    while (v207 != v209);
                    v207 = *(_QWORD **)a1;
                  }
                  v208 = v215 + 16;
                  *(_QWORD *)a1 = v216;
                  *(_QWORD *)(a1 + 8) = v215 + 16;
                  *(_QWORD *)(a1 + 16) = &v214[16 * v213];
                  v22 = v256;
                  if (v207)
                    operator delete(v207);
                }
                else
                {
                  *(_DWORD *)v207 = v204;
                  v207[1] = v180;
                  v208 = v207 + 2;
                }
                *(_QWORD *)(a1 + 8) = v208;
              }
              if (v261 != &v263)
                free(v261);
            }
            if (v292 != v294)
              free(v292);
            v15 = v252;
            goto LABEL_433;
          }
          v190 = *(_DWORD *)(v189 + 264);
          if (v190)
          {
            v191 = *(_QWORD *)(v189 + 248);
            v192 = v190 - 1;
            v193 = (v190 - 1) & ((v180 >> 4) ^ (v180 >> 9));
            v194 = *(_QWORD *)(v191 + 16 * v193);
            if (v180 == v194)
            {
LABEL_387:
              v197 = v255;
              v198 = *(_QWORD *)(v191 + 16 * v193 + 8);
              goto LABEL_389;
            }
            v195 = 1;
            while (v194 != -4096)
            {
              v196 = v193 + v195++;
              v193 = v196 & v192;
              v194 = *(_QWORD *)(v191 + 16 * v193);
              if (v180 == v194)
                goto LABEL_387;
            }
          }
          v198 = 0;
          v197 = v255;
LABEL_389:
          if (v197 == v198)
            goto LABEL_390;
LABEL_433:
          if (++v169 == v168)
            goto LABEL_439;
        }
      }
      v247 = 0;
LABEL_40:
      if (*(_BYTE *)(a1 + 120) && (v247 & 1) == 0)
        break;
      v10 = v246;
      v46 = v247 | sub_1C61D7D18(a1, v246);
      if (*(_BYTE *)(a1 + 122))
        goto LABEL_44;
      v21 = 1;
      if ((v46 & 1) == 0)
        goto LABEL_459;
    }
    v10 = v246;
    if (!*(_BYTE *)(a1 + 122))
      break;
    v46 = 0;
LABEL_44:
    v47 = (llvm::MachineBasicBlock *)*((_QWORD *)v10 + 41);
    if (v47 == (llvm::MachineBasicBlock *)v22)
    {
      v48 = 0;
      goto LABEL_338;
    }
    v48 = 0;
    do
    {
      v49 = (llvm::MachineBasicBlock *)*((_QWORD *)v47 + 1);
      v259 = 0;
      v260 = 0;
      v292 = v294;
      v293 = 0x400000000;
      v50 = 0;
      if (((*(uint64_t (**)(_QWORD, llvm::MachineBasicBlock *, llvm::LivePhysRegs **, llvm::LivePhysRegs **, _DWORD **, uint64_t))(**(_QWORD **)(a1 + 128) + 248))(*(_QWORD *)(a1 + 128), v47, &v260, &v259, &v292, 1) & 1) != 0|| !v260|| !(_DWORD)v293)
      {
        goto LABEL_78;
      }
      v51 = v259;
      if (!v259)
      {
        for (i = (llvm::LivePhysRegs **)*((_QWORD *)v47 + 11); ; ++i)
        {
          if (i == *((llvm::LivePhysRegs ***)v47 + 12))
          {
            v50 = 0;
            v259 = 0;
            goto LABEL_78;
          }
          v51 = *i;
          if (*i != v260)
            break;
        }
        v259 = *i;
        if (!v51)
          goto LABEL_77;
      }
      if (((*((_QWORD *)v260 + 9) - *((_QWORD *)v260 + 8)) & 0x7FFFFFFF0) != 0
        || ((*((_QWORD *)v51 + 9) - *((_QWORD *)v51 + 8)) & 0x7FFFFFFF0) != 0)
      {
LABEL_77:
        v50 = 0;
        goto LABEL_78;
      }
      v267 = &v269;
      v268 = 0x400000000;
      v272 = 0;
      v273 = 0;
      v271 = &v272;
      v286 = v288;
      v287 = 0x400000000;
      v290 = 0;
      v291 = 0;
      v289 = &v290;
      v52 = *(llvm::TargetInstrInfo **)(a1 + 128);
      v253 = *(_QWORD *)(a1 + 144);
      FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v47);
      if (!llvm::TargetInstrInfo::isUnpredicatedTerminator(v52, (const llvm::MachineInstr *)FirstTerminator))
      {
        v50 = 0;
        goto LABEL_333;
      }
      v54 = *(unsigned int *)(FirstTerminator + 40);
      if ((_DWORD)v54)
      {
        v55 = (unsigned int *)(*(_QWORD *)(FirstTerminator + 32) + 4);
        v56 = 32 * v54;
        do
        {
          v57 = *(v55 - 1);
          if (!(_BYTE)v57)
          {
            v58 = *v55;
            if ((_DWORD)v58)
            {
              if ((v57 & 0x1000000) != 0)
              {
                if ((~v57 & 0x5000000) != 0)
                  goto LABEL_289;
                v59 = &v286;
              }
              else
              {
                v59 = &v267;
              }
              sub_1C50737B0(v58, v253, (uint64_t)v59);
            }
          }
          v55 += 8;
          v56 -= 32;
        }
        while (v56);
      }
      if ((_DWORD)v268)
        v60 = 0;
      else
        v60 = v273 == 0;
      kk = (unint64_t *)FirstTerminator;
      if (v60)
        goto LABEL_125;
      v62 = v46;
      v63 = (llvm::MachineInstr *)*((_QWORD *)v47 + 7);
      if (v63 == (llvm::MachineInstr *)FirstTerminator)
        goto LABEL_124;
      v64 = *(_QWORD *)FirstTerminator & 0xFFFFFFFFFFFFFFF8;
      if (v64)
      {
        v65 = v52;
        if ((*(_BYTE *)v64 & 4) != 0)
          goto LABEL_86;
      }
      else
      {
        v65 = v52;
      }
      while ((*(_WORD *)(v64 + 44) & 4) != 0)
        v64 = *(_QWORD *)v64 & 0xFFFFFFFFFFFFFFF8;
LABEL_86:
      while ((llvm::MachineInstr *)v64 != v63)
      {
        v67 = **(unsigned __int16 **)(v64 + 16);
        if ((v67 - 13) >= 5 && v67 != 23)
        {
          v63 = (llvm::MachineInstr *)v64;
          break;
        }
        v64 = *(_QWORD *)v64 & 0xFFFFFFFFFFFFFFF8;
        if (!v64 || (*(_BYTE *)v64 & 4) == 0)
        {
          while ((*(_WORD *)(v64 + 44) & 4) != 0)
            v64 = *(_QWORD *)v64 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      v69 = *((unsigned int *)v63 + 10);
      if (!(_DWORD)v69)
        goto LABEL_124;
      v70 = (_DWORD *)*((_QWORD *)v63 + 4);
      v71 = &v70[8 * v69];
      v72 = (char *)v267 + 4 * v268;
      while (1)
      {
        if (*v70)
        {
          if (*v70 == 12)
            goto LABEL_124;
          goto LABEL_118;
        }
        if ((*v70 & 0x1000000) != 0)
        {
          v73 = v70[1];
          if (v73)
            break;
        }
LABEL_118:
        v70 += 8;
        if (v70 == v71)
          goto LABEL_124;
      }
      if (v273)
      {
        for (j = v272; j; j = (_QWORD *)*j)
        {
          v75 = *((_DWORD *)j + 7);
          if (v73 >= v75)
          {
            if (v75 >= v73)
              goto LABEL_120;
            ++j;
          }
        }
        goto LABEL_118;
      }
      if (!(_DWORD)v268)
        goto LABEL_118;
      v76 = (char *)v267;
      while (*(_DWORD *)v76 != v73)
      {
        v76 += 4;
        if (v76 == v72)
          goto LABEL_118;
      }
      if (v76 == v72)
        goto LABEL_118;
LABEL_120:
      LOBYTE(v274) = 1;
      if (llvm::MachineInstr::isSafeToMove(v63, 0, (BOOL *)&v274)
        && !(*(unsigned int (**)(llvm::TargetInstrInfo *, llvm::MachineInstr *))(*(_QWORD *)v65 + 768))(v65, v63))
      {
        v152 = *((unsigned int *)v63 + 10);
        if ((_DWORD)v152)
        {
          v153 = *((_QWORD *)v63 + 4);
          v154 = v153 + 32 * v152;
          if (v253)
            v155 = (_QWORD *)(v253 + 8);
          else
            v155 = 0;
          v250 = v155;
          do
          {
            if (!*(_BYTE *)v153)
            {
              v156 = *(_DWORD *)(v153 + 4);
              LODWORD(v261) = v156;
              if (v156)
              {
                if ((*(_BYTE *)(v153 + 3) & 1) != 0)
                {
                  v158 = sub_1C507371C((uint64_t)&v267, (unsigned int *)&v261);
                  v156 = v261;
                  v157 = &v286;
                  if (v158 && ((_DWORD)v261 - 1) <= 0x3FFFFFFE)
                  {
                    v159 = v155[6];
                    v160 = *(unsigned int *)(*v155 + 24 * v261 + 4);
                    if (*(_WORD *)(v159 + 2 * v160))
                    {
                      v161 = *(unsigned __int16 *)(v159 + 2 * v160) + (_DWORD)v261;
                      v162 = (unsigned __int16 *)(v159 + 2 * v160 + 2);
                      do
                      {
                        LODWORD(v280) = (unsigned __int16)v161;
                        sub_1C507371C((uint64_t)&v267, (unsigned int *)&v280);
                        v163 = *v162++;
                        v161 += v163;
                      }
                      while (v163);
                      v157 = &v286;
                      v156 = v261;
                      v15 = v252;
                      v155 = v250;
                    }
                    else
                    {
                      v157 = &v286;
                    }
                  }
                }
                else
                {
                  v157 = &v267;
                }
                sub_1C50737B0(v156, v253, (uint64_t)v157);
              }
            }
            v153 += 32;
          }
          while (v153 != v154);
        }
      }
      else
      {
        v63 = (llvm::MachineBasicBlock *)((char *)v47 + 48);
      }
      kk = (unint64_t *)v63;
LABEL_124:
      v46 = v62;
LABEL_125:
      if (kk == (unint64_t *)((char *)v47 + 48))
      {
LABEL_289:
        v50 = 0;
        v22 = v256;
        goto LABEL_333;
      }
      v254 = v46;
      v280 = v282;
      v281 = 0x400000000;
      v284 = 0;
      v285 = 0;
      v283 = &v284;
      v274 = v276;
      v275 = 0x400000000;
      v278 = 0;
      v279 = 0;
      v277 = &v278;
      v77 = (char *)v260 + 48;
      v78 = *((_QWORD *)v260 + 7);
      v79 = (char *)v259 + 48;
      v80 = *((_QWORD *)v259 + 7);
      v81 = (llvm::LivePhysRegs *)v78 == (llvm::LivePhysRegs *)((char *)v260 + 48) || v80 == (_QWORD)v79;
      v22 = v256;
      if (v81)
      {
LABEL_327:
        v50 = 0;
        goto LABEL_328;
      }
      v82 = 0;
      do
      {
LABEL_131:
        v83 = **(unsigned __int16 **)(v78 + 16) - 13;
        if (v83 > 4)
          goto LABEL_141;
        if ((*(_BYTE *)v78 & 4) == 0)
        {
          while ((*(_WORD *)(v78 + 44) & 8) != 0)
            v78 = *(_QWORD *)(v78 + 8);
        }
        v78 = *(_QWORD *)(v78 + 8);
      }
      while ((char *)v78 != v77);
      v78 = (uint64_t)v77;
      while (1)
      {
LABEL_141:
        if ((char *)v80 == v79)
          goto LABEL_291;
        if (**(unsigned __int16 **)(v80 + 16) - 13 > 4)
          break;
        if ((*(_BYTE *)v80 & 4) == 0)
        {
          while ((*(_WORD *)(v80 + 44) & 8) != 0)
            v80 = *(_QWORD *)(v80 + 8);
        }
        v80 = *(_QWORD *)(v80 + 8);
      }
      if (v83 < 5)
        goto LABEL_290;
      v248 = v77;
      v249 = v79;
      v244 = kk;
      if (!llvm::MachineInstr::isIdenticalTo(v78, v80, 1)
        || ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 128) + 768))(*(_QWORD *)(a1 + 128), v78) & 1) != 0)
      {
        v79 = (char *)v80;
        kk = v244;
        goto LABEL_291;
      }
      v84 = *(unsigned int *)(v78 + 40);
      kk = v244;
      if ((_DWORD)v84)
      {
        v85 = *(unsigned int **)(v78 + 32);
        v86 = &v85[8 * v84];
        while (1)
        {
          v87 = *v85;
          if (*v85)
          {
            if (*v85 == 12)
              goto LABEL_290;
            goto LABEL_224;
          }
          v88 = v85[1];
          if (!v88)
            goto LABEL_224;
          if ((v87 & 0x1000000) == 0)
            break;
          if (v273)
          {
            for (k = v272; k; k = (_QWORD *)*k)
            {
              v92 = *((_DWORD *)k + 7);
              if (v88 >= v92)
              {
                if (v92 >= v88)
                  goto LABEL_290;
                ++k;
              }
            }
          }
          else if ((_DWORD)v268)
          {
            v95 = v267;
            v96 = 4 * v268;
            while (*v95 != v88)
            {
              ++v95;
              v96 -= 4;
              if (!v96)
                goto LABEL_191;
            }
            if (v96)
              goto LABEL_290;
          }
LABEL_191:
          if (v291)
          {
            v101 = v290;
            if (!v290)
              goto LABEL_224;
            while (1)
            {
              v102 = *((_DWORD *)v101 + 7);
              if (v88 >= v102)
              {
                if (v102 >= v88)
                {
                  if ((~v87 & 0x5000000) != 0)
                    goto LABEL_290;
                  goto LABEL_224;
                }
                ++v101;
              }
              v101 = (_QWORD *)*v101;
              if (!v101)
                goto LABEL_224;
            }
          }
          if (!(_DWORD)v287)
            goto LABEL_224;
          v103 = v286;
          v104 = 4 * v287;
          while (*v103 != v88)
          {
            ++v103;
            v104 -= 4;
            if (!v104)
              goto LABEL_224;
          }
          if ((~v87 & 0x5000000) != 0 && v104)
            goto LABEL_290;
LABEL_224:
          v85 += 8;
          if (v85 == v86)
            goto LABEL_225;
        }
        if (v285)
        {
          for (m = v284; m; m = (_QWORD *)*m)
          {
            v90 = *((_DWORD *)m + 7);
            if (v88 >= v90)
            {
              if (v90 >= v88)
                goto LABEL_224;
              ++m;
            }
          }
        }
        else if ((_DWORD)v281)
        {
          v93 = v280;
          v94 = 4 * v281;
          while (*v93 != v88)
          {
            ++v93;
            v94 -= 4;
            if (!v94)
              goto LABEL_178;
          }
          if (v94)
            goto LABEL_224;
        }
LABEL_178:
        if (v291)
        {
          for (n = v290; n; n = (_QWORD *)*n)
          {
            v98 = *((_DWORD *)n + 7);
            if (v88 >= v98)
            {
              if (v98 >= v88)
                goto LABEL_290;
              ++n;
            }
          }
LABEL_209:
          if (((v87 >> 26) & ~HIBYTE(v87) & 1) != 0)
          {
            if (v273)
            {
              for (ii = v272; ii; ii = (_QWORD *)*ii)
              {
                v106 = *((_DWORD *)ii + 7);
                if (v88 >= v106)
                {
                  if (v106 >= v88)
                    goto LABEL_223;
                  ++ii;
                }
              }
            }
            else if ((_DWORD)v268)
            {
              v107 = v267;
              v108 = 4 * v268;
              while (*v107 != v88)
              {
                ++v107;
                v108 -= 4;
                if (!v108)
                  goto LABEL_224;
              }
              if (v108)
LABEL_223:
                *v85 = v87 & 0xFBFFFFFF;
            }
          }
          goto LABEL_224;
        }
        if (!(_DWORD)v287)
          goto LABEL_209;
        v99 = v286;
        v100 = 4 * v287;
        while (*v99 != v88)
        {
          ++v99;
          v100 -= 4;
          if (!v100)
            goto LABEL_209;
        }
        if (!v100)
          goto LABEL_209;
LABEL_290:
        v79 = (char *)v80;
LABEL_291:
        v80 = (uint64_t)v79;
        if ((v82 & 1) == 0)
          goto LABEL_327;
        goto LABEL_292;
      }
LABEL_225:
      v258 = 1;
      if (llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v78, 0, &v258))
      {
        v109 = *(unsigned int *)(v78 + 40);
        v79 = v249;
        v77 = v248;
        if ((_DWORD)v109)
        {
          v110 = *(_DWORD **)(v78 + 32);
          v111 = &v110[8 * v109];
          v243 = v111;
          do
          {
            if ((*v110 & 0x10000FF) == 0 && ((*v110 >> 26) & ~HIBYTE(*v110) & 1) != 0)
            {
              v112 = v110[1];
              LODWORD(v261) = v112;
              if (v112)
              {
                if (v279)
                {
                  for (jj = v278; jj; jj = (_QWORD *)*jj)
                  {
                    v114 = *((_DWORD *)jj + 7);
                    if (v112 >= v114)
                    {
                      if (v114 >= v112)
                        goto LABEL_244;
                      ++jj;
                    }
                  }
                }
                else if ((_DWORD)v275)
                {
                  v115 = v274;
                  v116 = 4 * v275;
                  while (*v115 != v112)
                  {
                    ++v115;
                    v116 -= 4;
                    if (!v116)
                      goto LABEL_257;
                  }
                  if (v116)
                  {
LABEL_244:
                    if (v112 >> 30)
                    {
                      sub_1C507371C((uint64_t)&v280, (unsigned int *)&v261);
                      v111 = v243;
                      v77 = v248;
                      v79 = v249;
                    }
                    else
                    {
                      v117 = *(_QWORD *)(a1 + 144);
                      if (v117)
                        v118 = (_QWORD *)(v117 + 8);
                      else
                        v118 = 0;
                      v119 = *v118;
                      v120 = *(_DWORD *)(*v118 + 24 * v112 + 16) & 0xF;
                      v121 = ((unint64_t)*(unsigned int *)(*v118 + 24 * v112 + 16) >> 3) & 0x1FFFFFFE;
                      v240 = v118;
                      v124 = v118 + 5;
                      v123 = v118[5];
                      v122 = v124[1];
                      v125 = (_WORD *)(v122 + v121 + 2);
                      v126 = *(unsigned __int16 *)(v122 + v121) + v120 * v112;
                      do
                      {
                        v127 = 4 * (unsigned __int16)v126;
                        v128 = *(unsigned __int16 *)(v123 + v127);
                        if (*(_WORD *)(v123 + v127))
                          v129 = v122 == 0;
                        else
                          v129 = 1;
                        if (!v129)
                        {
                          v242 = *(unsigned __int16 *)(v123 + 4 * (unsigned __int16)v126 + 2) << 16;
                          v131 = (unsigned int *)(v119
                                                + 24 * *(unsigned __int16 *)(v123 + 4 * (unsigned __int16)v126)
                                                + 8);
                          v241 = v126;
                          while (1)
                          {
                            v132 = (unsigned __int16 *)(v122 + 2 * *v131);
                            do
                            {
                              v257 = (unsigned __int16)v128;
                              sub_1C507371C((uint64_t)&v280, &v257);
                              v133 = *v132++;
                              v128 += v133;
                            }
                            while (v133);
                            v128 = HIWORD(v242);
                            if (HIWORD(v242))
                            {
                              v242 >>= 16;
                              v135 = v240;
                            }
                            else
                            {
                              v134 = (unsigned __int16)*v125;
                              v15 = v252;
                              v79 = v249;
                              v77 = v248;
                              v111 = v243;
                              if (!*v125)
                                goto LABEL_257;
                              v135 = v240;
                              ++v125;
                              v241 += v134;
                              v136 = (unsigned __int16 *)(v240[5] + 4 * (unsigned __int16)v241);
                              v128 = *v136;
                              v242 = v136[1] << 16;
                            }
                            v122 = v135[6];
                            v131 = (unsigned int *)(*v135 + 24 * v128 + 8);
                          }
                        }
                        v130 = (unsigned __int16)*v125++;
                        v126 += v130;
                      }
                      while (v130);
                    }
                  }
                }
              }
LABEL_257:
              v22 = v256;
            }
            v110 += 8;
          }
          while (v110 != v111);
          v137 = *(unsigned int *)(v78 + 40);
          if ((_DWORD)v137)
          {
            v138 = 32 * v137;
            v139 = (unsigned int *)(*(_QWORD *)(v78 + 32) + 4);
            do
            {
              v140 = *(v139 - 1);
              v141 = v140 & 0x10000FF;
              v142 = v140 & 0x5000000;
              if (v141 == 0x1000000 && v142 != 83886080)
              {
                v144 = *v139;
                if ((int)v144 >= 1)
                {
                  sub_1C50737B0(*v139, *(_QWORD *)(a1 + 144), (uint64_t)&v280);
                  sub_1C50737B0(v144, *(_QWORD *)(a1 + 144), (uint64_t)&v274);
                  v77 = v248;
                  v79 = v249;
                }
              }
              v139 += 8;
              v138 -= 32;
            }
            while (v138);
            v22 = v256;
            if (!v78)
              goto LABEL_280;
          }
        }
        if ((*(_BYTE *)v78 & 4) == 0)
        {
LABEL_280:
          while ((*(_WORD *)(v78 + 44) & 8) != 0)
            v78 = *(_QWORD *)(v78 + 8);
        }
        v78 = *(_QWORD *)(v78 + 8);
        if ((*(_BYTE *)v80 & 4) != 0)
        {
          kk = v244;
        }
        else
        {
          for (kk = v244; (*(_WORD *)(v80 + 44) & 8) != 0; v80 = *(_QWORD *)(v80 + 8))
            ;
        }
        v80 = *(_QWORD *)(v80 + 8);
        if ((char *)v78 == v77)
          goto LABEL_292;
        v82 = 1;
        if ((char *)v80 == v79)
          goto LABEL_292;
        goto LABEL_131;
      }
      kk = v244;
      if ((v82 & 1) == 0)
        goto LABEL_327;
LABEL_292:
      if (kk != (unint64_t *)v78)
      {
        v145 = (unint64_t *)*((_QWORD *)v260 + 7);
        if (v145 != (unint64_t *)v78)
        {
          if (v260 != v47)
          {
            v164 = *((_QWORD *)v47 + 5);
            v165 = *((_QWORD *)v260 + 7);
            do
            {
              *(_QWORD *)(v165 + 24) = v164;
              v165 = *(_QWORD *)(v165 + 8);
            }
            while (v165 != v78);
          }
          sub_1C4785D30(kk, v145, (unint64_t *)v78);
        }
      }
      sub_1C487FE80((uint64_t)v259 + 40, *((_QWORD *)v259 + 7), v80);
      if (!*(_BYTE *)(a1 + 123))
      {
        v50 = 1;
LABEL_328:
        v46 = v254;
        goto LABEL_329;
      }
      v147 = v260;
      v261 = 0;
      v262 = v264;
      v263 = xmmword_1C6464ED0;
      v265 = 0;
      v266 = 0;
      *((_QWORD *)v260 + 20) = *((_QWORD *)v260 + 19);
      llvm::computeLiveIns((llvm *)&v261, v147, v146);
      llvm::addLiveIns(v147, (llvm::MachineBasicBlock *)&v261, v148);
      free(v265);
      v46 = v254;
      if (v262 != v264)
        free(v262);
      v150 = v259;
      v261 = 0;
      v262 = v264;
      v263 = xmmword_1C6464ED0;
      v265 = 0;
      v266 = 0;
      *((_QWORD *)v259 + 20) = *((_QWORD *)v259 + 19);
      llvm::computeLiveIns((llvm *)&v261, v150, v149);
      llvm::addLiveIns(v150, (llvm::MachineBasicBlock *)&v261, v151);
      free(v265);
      if (v262 != v264)
        free(v262);
      v50 = 1;
LABEL_329:
      sub_1C47655E8((uint64_t)&v277, v278);
      if (v274 != v276)
        free(v274);
      sub_1C47655E8((uint64_t)&v283, v284);
      if (v280 != v282)
        free(v280);
LABEL_333:
      sub_1C47655E8((uint64_t)&v289, v290);
      if (v286 != v288)
        free(v286);
      sub_1C47655E8((uint64_t)&v271, v272);
      if (v267 != &v269)
        free(v267);
LABEL_78:
      if (v292 != v294)
        free(v292);
      v48 |= v50;
      v47 = v49;
    }
    while (v49 != (llvm::MachineBasicBlock *)v22);
LABEL_338:
    v21 = 1;
    v10 = v246;
  }
  while (((v46 | v48) & 1) != 0);
LABEL_459:
  v221 = *((_QWORD *)v10 + 9);
  if (v221)
  {
    v222 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v221 + 16) - *(_QWORD *)(v221 + 8)) >> 3);
    v292 = v294;
    v293 = 0x600000000;
    sub_1C4765AA4((char *)&v292, (v222 + 63) >> 6, 0);
    v294[12] = v222;
    for (mm = (_QWORD *)*((_QWORD *)v10 + 41); mm != v22; mm = (_QWORD *)mm[1])
    {
      for (nn = mm[7]; (_QWORD *)nn != mm + 6; nn = *(_QWORD *)(nn + 8))
      {
        v225 = *(unsigned int *)(nn + 40);
        if ((_DWORD)v225)
        {
          v226 = (char *)v292;
          v227 = 32 * v225;
          v228 = (_DWORD *)(*(_QWORD *)(nn + 32) + 16);
          do
          {
            if (*((_BYTE *)v228 - 16) == 8)
              *(_QWORD *)&v226[((unint64_t)*v228 >> 3) & 0x1FFFFFF8] |= 1 << *v228;
            v228 += 8;
            v227 -= 32;
          }
          while (v227);
          if (!nn)
            goto LABEL_472;
        }
        if ((*(_BYTE *)nn & 4) == 0)
        {
LABEL_472:
          while ((*(_WORD *)(nn + 44) & 8) != 0)
            nn = *(_QWORD *)(nn + 8);
        }
      }
    }
    v229 = v292;
    if ((_DWORD)v222)
    {
      v230 = 0;
      v231 = 0;
      v232 = v222;
      v19 = v245;
      do
      {
        if (((v229[v231 >> 6] >> v231) & 1) == 0)
        {
          *(_QWORD *)(*(_QWORD *)(v221 + 8) + v230 + 8) = *(_QWORD *)(*(_QWORD *)(v221 + 8) + v230);
          v19 = 1;
        }
        ++v231;
        v230 += 24;
      }
      while (v232 != v231);
    }
    else
    {
      v19 = v245;
    }
    if (v229 != (_QWORD *)v294)
      free(v229);
  }
  else
  {
    v19 = v245;
  }
  return v19 & 1;
}

void sub_1C5071178(_QWORD *a1, int a2, unsigned int a3, uint64_t a4, llvm::MachineBasicBlock *a5)
{
  _DWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::MBFIWrapper *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::MachineBasicBlock *v18;
  unint64_t v19;
  llvm::MachineBasicBlock *v20;
  unint64_t v21;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int isIdenticalTo;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  llvm::MachineBasicBlock *v39;
  unint64_t v40;
  llvm::MachineBasicBlock *v41;
  unsigned int v42;
  __int16 v43;
  int v44;
  int v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _BOOL4 v53;
  _QWORD *v54;
  int v55;
  char v56;
  BOOL v57;
  _BOOL4 v58;
  unsigned int v59;
  unint64_t v60;
  __int16 v61;
  int v62;
  int v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  __int16 v67;
  int v68;
  int v69;
  unint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  int shouldOptimizeForSize;
  _QWORD *v76;
  uint64_t FallThrough;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t v93;
  char *v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  _QWORD *v106;
  unsigned int v107;
  uint64_t *v110;
  _DWORD *v111;
  llvm::MBFIWrapper *v112;
  uint64_t v114;
  uint64_t v116;
  _DWORD *v118;
  _DWORD *v119;
  int v120;
  unint64_t v121;
  unsigned int v122;
  _DWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD v126[2];

  a1[13] = a1[12];
  v5 = (_DWORD *)(a1[1] - 16);
  v119 = (_DWORD *)*a1;
  if (v5 != (_DWORD *)*a1)
  {
    v6 = a2;
    v7 = a1;
    v8 = 0;
    v124 = 0;
    v9 = 0;
    v110 = a1 + 9;
    v114 = a1[1] - 16;
    do
    {
      if (*v5 != v6)
        return;
      v10 = v5;
      v111 = v5 - 4;
      v11 = v5 - 4;
      v12 = v8;
      v118 = v5;
      if (*(v5 - 4) != v6)
        goto LABEL_202;
      do
      {
        v121 = (unint64_t)v9;
        v122 = v8;
        v13 = *((_QWORD *)v10 + 1);
        v14 = *((_QWORD *)v11 + 1);
        v120 = *((unsigned __int8 *)v7 + 120);
        v15 = (llvm::MBFIWrapper *)v7[28];
        v16 = v7[30];
        if (*((_DWORD *)v7 + 20))
        {
          v125 = v13;
          v126[0] = 0;
          if (sub_1C61252B8(v110, &v125, v126))
            v50 = v126[0];
          else
            v50 = v7[9] + 16 * *((unsigned int *)v7 + 22);
          v125 = v14;
          v126[0] = 0;
          v51 = sub_1C61252B8(v110, &v125, v126);
          v52 = v126[0];
          if (!v51)
            v52 = v7[9] + 16 * *((unsigned int *)v7 + 22);
          if (*(_DWORD *)(v50 + 8) != *(_DWORD *)(v52 + 8))
          {
            v12 = v122;
            v10 = v118;
            v9 = (_QWORD *)v121;
            v6 = a2;
            goto LABEL_74;
          }
        }
        v116 = v16;
        v123 = v11;
        v17 = v13 + 48;
        v18 = (llvm::MachineBasicBlock *)v13;
        v19 = sub_1C5073E64(v13 + 48, v13);
        v20 = (llvm::MachineBasicBlock *)v14;
        v21 = sub_1C5073E64(v14 + 48, v14);
        if (v17 == v19 || v14 + 48 == v21)
        {
          v12 = v122;
          v10 = v118;
          v9 = (_QWORD *)v121;
          goto LABEL_12;
        }
        v23 = v21;
        v24 = (_QWORD *)v17;
        v25 = (_QWORD *)(v14 + 48);
        v112 = v15;
        if (!llvm::MachineInstr::isIdenticalTo(v19, v21, 0))
        {
          v31 = v121;
          v30 = (unint64_t)v124;
          goto LABEL_72;
        }
        v27 = 0;
        v28 = v121;
        v29 = v24;
        while (1)
        {
          v12 = v27;
          if (**(unsigned __int16 **)(v19 + 16) - 1 < 2
            || (v30 = v19, *(__int16 *)(v19 + 44) < 0)
            || (v31 = v23, *(__int16 *)(v23 + 44) < 0))
          {
            v31 = v28;
            v30 = (unint64_t)v124;
            if ((_DWORD)v27)
              goto LABEL_24;
LABEL_72:
            v124 = (_QWORD *)v30;
            v9 = (_QWORD *)v31;
            v12 = v122;
            v6 = a2;
            v7 = a1;
            v10 = v118;
            goto LABEL_73;
          }
          v27 = (v27 + 1);
          v19 = sub_1C5073E64(v19, (uint64_t)v18);
          v32 = sub_1C5073E64(v23, (uint64_t)v20);
          if (v29 == (_QWORD *)v19)
            break;
          v23 = v32;
          if (v25 == (_QWORD *)v32)
            break;
          isIdenticalTo = llvm::MachineInstr::isIdenticalTo(v19, v32, 0);
          v28 = v31;
          v124 = (_QWORD *)v30;
          if (!isIdenticalTo)
          {
            v12 = (v12 + 1);
            if ((_DWORD)v12)
              goto LABEL_24;
            goto LABEL_72;
          }
        }
        v12 = (v12 + 1);
        if (!(_DWORD)v27)
          goto LABEL_72;
LABEL_24:
        v34 = (_QWORD *)*((_QWORD *)v18 + 7);
        v35 = v29;
        if (v34 != v29)
        {
          v35 = (_QWORD *)*((_QWORD *)v18 + 7);
          do
          {
            if (*(unsigned __int16 *)v35[2] - 13 > 4)
              goto LABEL_32;
            if ((*(_BYTE *)v35 & 4) == 0)
            {
              while ((*((_WORD *)v35 + 22) & 8) != 0)
                v35 = (_QWORD *)v35[1];
            }
            v35 = (_QWORD *)v35[1];
          }
          while (v35 != v29);
          v35 = v29;
        }
LABEL_32:
        if (v35 == (_QWORD *)v30)
          v36 = *((_QWORD *)v18 + 7);
        else
          v36 = v30;
        v124 = (_QWORD *)v36;
        v37 = (_QWORD *)*((_QWORD *)v20 + 7);
        v38 = v25;
        if (v37 != v25)
        {
          v38 = (_QWORD *)*((_QWORD *)v20 + 7);
          do
          {
            if (*(unsigned __int16 *)v38[2] - 13 > 4)
              goto LABEL_43;
            if ((*(_BYTE *)v38 & 4) == 0)
            {
              while ((*((_WORD *)v38 + 22) & 8) != 0)
                v38 = (_QWORD *)v38[1];
            }
            v38 = (_QWORD *)v38[1];
          }
          while (v38 != v25);
          v38 = v25;
        }
LABEL_43:
        if (v38 == (_QWORD *)v31)
          v9 = (_QWORD *)*((_QWORD *)v20 + 7);
        else
          v9 = (_QWORD *)v31;
        if (v18 != a5 && v20 != a5 || v120 && ((*((_QWORD *)v18 + 12) - *((_QWORD *)v18 + 11)) & 0x7FFFFFFF8) != 8)
          goto LABEL_88;
        if (v18 == a5)
          v39 = v20;
        else
          v39 = v18;
        v40 = (unint64_t)v39 + 48;
        v41 = (llvm::MachineBasicBlock *)*((_QWORD *)v39 + 7);
        if ((llvm::MachineBasicBlock *)((char *)v39 + 48) == v41)
        {
          v42 = 0;
          goto LABEL_87;
        }
        v42 = 0;
        while (2)
        {
          v40 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
          if (v40 && (*(_BYTE *)v40 & 4) != 0)
          {
            v43 = *(_WORD *)(v40 + 44);
          }
          else
          {
            while (1)
            {
              v43 = *(_WORD *)(v40 + 44);
              if ((v43 & 4) == 0)
                break;
              v40 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
            }
          }
          v44 = v43 & 0xC;
          v45 = v43 & 4;
          v46 = *(_QWORD *)(*(_QWORD *)(v40 + 16) + 8);
          if (v44)
            v47 = v45 == 0;
          else
            v47 = 0;
          if (!v47)
          {
            if ((v46 & 0x200) == 0)
              goto LABEL_87;
LABEL_65:
            ++v42;
            if ((llvm::MachineBasicBlock *)v40 == v41)
              goto LABEL_87;
            continue;
          }
          break;
        }
        v48 = v40;
        if ((v46 & 0x200) != 0)
          goto LABEL_65;
        while ((*(_WORD *)(v48 + 44) & 8) != 0)
        {
          v48 = *(_QWORD *)(v48 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v48 + 16) + 9) & 2) != 0)
            goto LABEL_65;
        }
LABEL_87:
        if (v12 > v42)
        {
LABEL_153:
          v84 = v122;
          v7 = a1;
          v10 = v118;
          if (v12 <= v122)
            goto LABEL_166;
          v85 = (_QWORD *)a1[12];
          a1[13] = v85;
          v86 = a1[14];
          if ((unint64_t)v85 < v86)
          {
            *v85 = v118;
            v85[1] = v124;
            v87 = v85 + 2;
            goto LABEL_165;
          }
          v88 = v86 - (_QWORD)v85;
          v89 = v88 >> 3;
          if ((unint64_t)(v88 >> 3) <= 1)
            v89 = 1;
          if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0)
            v90 = 0xFFFFFFFFFFFFFFFLL;
          else
            v90 = v89;
          if (!(v90 >> 60))
          {
            v91 = v9;
            v92 = operator new(16 * v90);
            *v92 = v118;
            v92[1] = v124;
            v87 = v92 + 2;
            a1[12] = v92;
            a1[13] = v92 + 2;
            a1[14] = &v92[2 * v90];
            if (v85)
              operator delete(v85);
            v9 = v91;
LABEL_165:
            a1[13] = v87;
            v114 = (uint64_t)v118;
            v84 = v12;
LABEL_166:
            v6 = a2;
            v11 = v123;
            if ((_DWORD *)v114 != v118 || (_DWORD)v12 != (_DWORD)v84)
            {
              v12 = v84;
              goto LABEL_74;
            }
            v94 = (char *)a1[13];
            v93 = a1[14];
            if ((unint64_t)v94 < v93)
            {
              *(_QWORD *)v94 = v123;
              *((_QWORD *)v94 + 1) = v9;
              v95 = v94 + 16;
LABEL_189:
              v7[13] = v95;
              v114 = (uint64_t)v118;
              goto LABEL_74;
            }
            v96 = (char *)a1[12];
            v97 = (v94 - v96) >> 4;
            v98 = v97 + 1;
            if ((unint64_t)(v97 + 1) >> 60)
              abort();
            v99 = v93 - (_QWORD)v96;
            if (v99 >> 3 > v98)
              v98 = v99 >> 3;
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF0)
              v100 = 0xFFFFFFFFFFFFFFFLL;
            else
              v100 = v98;
            if (!v100)
            {
              v102 = 0;
              goto LABEL_181;
            }
            if (!(v100 >> 60))
            {
              v101 = v9;
              v102 = (char *)operator new(16 * v100);
              v9 = v101;
LABEL_181:
              v103 = &v102[16 * v97];
              *(_QWORD *)v103 = v123;
              *((_QWORD *)v103 + 1) = v9;
              v104 = v103;
              if (v94 == v96)
              {
                v7 = a1;
              }
              else
              {
                v7 = a1;
                do
                {
                  *((_OWORD *)v104 - 1) = *((_OWORD *)v94 - 1);
                  v104 -= 16;
                  v94 -= 16;
                }
                while (v94 != v96);
                v94 = (char *)a1[12];
              }
              v95 = v103 + 16;
              v7[12] = v104;
              v7[13] = v103 + 16;
              v7[14] = &v102[16 * v100];
              if (v94)
              {
                v105 = v94;
                v106 = v9;
                operator delete(v105);
                v9 = v106;
              }
              v11 = v123;
              goto LABEL_189;
            }
          }
          sub_1C4764EE4();
        }
LABEL_88:
        v53 = v9 != v37;
        if (v124 == v34 && v9 == v37)
        {
          v54 = v9;
          v55 = sub_1C5073D54(v18);
          v9 = v54;
          if (v55)
          {
            v56 = sub_1C5073D54(v20);
            v9 = v54;
            if ((v56 & 1) != 0)
              goto LABEL_153;
          }
        }
        v57 = *((llvm::MachineBasicBlock **)v18 + 1) == v20 && v9 == v37;
        if (v57 || v124 == v34 && *((llvm::MachineBasicBlock **)v20 + 1) == v18)
          goto LABEL_153;
        v58 = !v120 || v124 != v34;
        if (!v58 && !v53)
        {
          if (*((_QWORD *)v18 + 11) != *((_QWORD *)v18 + 12))
          {
            v76 = v9;
            FallThrough = llvm::MachineBasicBlock::getFallThrough(v18);
            v9 = v76;
            if (!FallThrough)
              goto LABEL_153;
          }
          if (*(llvm::MachineBasicBlock **)(*((_QWORD *)v18 + 4) + 328) == v18)
            goto LABEL_153;
          v78 = v9;
          v79 = llvm::MachineBasicBlock::getFallThrough(*(llvm::MachineBasicBlock **)v18);
          v9 = v78;
          if (!v79)
            goto LABEL_153;
          if (*((_QWORD *)v20 + 11) != *((_QWORD *)v20 + 12))
          {
            v80 = llvm::MachineBasicBlock::getFallThrough(v20);
            v9 = v78;
            if (!v80)
              goto LABEL_153;
          }
          if (*(llvm::MachineBasicBlock **)(*((_QWORD *)v20 + 4) + 328) == v20)
            goto LABEL_153;
          v81 = llvm::MachineBasicBlock::getFallThrough(*(llvm::MachineBasicBlock **)v20);
          v9 = v78;
          if (!v81)
            goto LABEL_153;
        }
        v59 = v12;
        if (a4)
        {
          v59 = v12;
          if (v18 != a5)
          {
            v59 = v12;
            if (v20 != a5)
            {
              if (!v120 || (v59 = v12, ((*((_QWORD *)v18 + 12) - *((_QWORD *)v18 + 11)) & 0x7FFFFFFF8) == 8))
              {
                v60 = *v29 & 0xFFFFFFFFFFFFFFF8;
                if (v60 && (*(_BYTE *)v60 & 4) != 0)
                {
                  v61 = *(_WORD *)(v60 + 44);
                }
                else
                {
                  while (1)
                  {
                    v61 = *(_WORD *)(v60 + 44);
                    if ((v61 & 4) == 0)
                      break;
                    v60 = *(_QWORD *)v60 & 0xFFFFFFFFFFFFFFF8;
                  }
                }
                v62 = v61 & 0xC;
                v63 = v61 & 4;
                v64 = *(_QWORD *)(*(_QWORD *)(v60 + 16) + 8);
                v59 = v12;
                if (v62)
                  v65 = v63 == 0;
                else
                  v65 = 0;
                if (v65)
                {
                  if ((v64 & 0x100) == 0)
                  {
                    while ((*(_WORD *)(v60 + 44) & 8) != 0)
                    {
                      v60 = *(_QWORD *)(v60 + 8);
                      if ((*(_BYTE *)(*(_QWORD *)(v60 + 16) + 9) & 1) != 0)
                      {
                        v59 = v12;
                        goto LABEL_128;
                      }
                    }
LABEL_117:
                    v66 = *v25 & 0xFFFFFFFFFFFFFFF8;
                    if (v66 && (*(_BYTE *)v66 & 4) != 0)
                    {
                      v67 = *(_WORD *)(v66 + 44);
                    }
                    else
                    {
                      while (1)
                      {
                        v67 = *(_WORD *)(v66 + 44);
                        if ((v67 & 4) == 0)
                          break;
                        v66 = *(_QWORD *)v66 & 0xFFFFFFFFFFFFFFF8;
                      }
                    }
                    v68 = v67 & 0xC;
                    v69 = v67 & 4;
                    v70 = *(_QWORD *)(*(_QWORD *)(v66 + 16) + 8);
                    if (v68)
                      v71 = v69 == 0;
                    else
                      v71 = 0;
                    if (v71)
                    {
                      if ((v70 & 0x100) != 0)
                      {
                        LODWORD(v72) = 1;
                      }
                      else
                      {
                        do
                        {
                          v107 = *(unsigned __int16 *)(v66 + 44);
                          LODWORD(v72) = (v107 >> 3) & 1;
                          if ((v107 & 8) == 0)
                            break;
                          v66 = *(_QWORD *)(v66 + 8);
                        }
                        while ((*(_BYTE *)(*(_QWORD *)(v66 + 16) + 9) & 1) == 0);
                      }
                    }
                    else
                    {
                      v72 = (v70 >> 8) & 1;
                    }
                    v59 = v12 + (v72 ^ 1);
                  }
                }
                else if ((v64 & 0x100) == 0)
                {
                  goto LABEL_117;
                }
              }
            }
          }
        }
LABEL_128:
        if (v59 >= a3)
          goto LABEL_153;
        v73 = *(_QWORD *)(**((_QWORD **)v18 + 4) + 112);
        if (v73 && ((*(_BYTE *)(v73 + 17) & 4) != 0 || *(char *)(v73 + 13) < 0))
        {
          shouldOptimizeForSize = 1;
          v10 = v118;
LABEL_144:
          v6 = a2;
          v11 = v123;
          v83 = v124 == v34 || v9 == v37;
          if (v59 >= 2 && shouldOptimizeForSize)
          {
            if (v83)
              goto LABEL_153;
            v12 = v122;
            v7 = a1;
            v10 = v118;
            goto LABEL_12;
          }
          v12 = v122;
          v7 = a1;
        }
        else
        {
          v74 = v9;
          if (llvm::shouldOptimizeForSize(v18, v116, v112))
          {
            shouldOptimizeForSize = llvm::shouldOptimizeForSize(v20, v116, v112);
            v10 = v118;
            v9 = v74;
            goto LABEL_144;
          }
          v12 = v122;
          v7 = a1;
          v10 = v118;
          v9 = v74;
LABEL_12:
          v6 = a2;
LABEL_73:
          v11 = v123;
        }
LABEL_74:
        if (v11 == v119)
          break;
        v49 = *(v11 - 4);
        v11 -= 4;
        LODWORD(v8) = v12;
      }
      while (v49 == v6);
LABEL_202:
      v8 = v12;
      v5 = v111;
    }
    while (v111 != v119);
  }
}

void sub_1C5071AC8(llvm::MachineBasicBlock *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a1 + 4);
  v7 = *((_QWORD *)a1 + 1);
  v9 = 0;
  v10 = 0;
  v11 = v13;
  v12 = 0x400000000;
  llvm::MachineBasicBlock::findBranchDebugLoc(a1, &v8);
  if (v7 == v6 + 320
    || ((*(uint64_t (**)(uint64_t, llvm::MachineBasicBlock *, uint64_t *, uint64_t *, void **, uint64_t))(*(_QWORD *)a3 + 248))(a3, a1, &v10, &v9, &v11, 1) & 1) != 0|| v10 != v7|| !(_DWORD)v12|| v9|| ((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a3 + 728))(a3, &v11) & 1) != 0)
  {
    (*(void (**)(uint64_t, llvm::MachineBasicBlock *, uint64_t, _QWORD, unsigned __int8 **, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)a3 + 272))(a3, a1, a2, 0, &v8, 0, &v8, 0);
  }
  else
  {
    (*(void (**)(uint64_t, llvm::MachineBasicBlock *, _QWORD))(*(_QWORD *)a3 + 264))(a3, a1, 0);
    (*(void (**)(uint64_t, llvm::MachineBasicBlock *, uint64_t, _QWORD, void *, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)a3 + 272))(a3, a1, a2, 0, v11, v12, &v8, 0);
  }
  if (v8)
    llvm::MetadataTracking::untrack((uint64_t)&v8, v8);
  if (v11 != v13)
    free(v11);
}

BOOL sub_1C5071C7C(uint64_t a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int16 *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;

  v7 = 0;
  *a4 = 0;
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 104) - v8;
  if ((v9 & 0xFFFFFFFF0) != 0)
  {
    v7 = 0;
    v10 = 0;
    v11 = *a2;
    v12 = (v9 >> 4);
    v13 = -1;
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v8 + 16 * v10) + 8);
      if (v14 == v11)
      {
        *a4 = v10;
        v7 = v10;
        break;
      }
      v15 = *(_QWORD *)(v14 + 56);
      v16 = *(_QWORD *)(v8 + 16 * v10 + 8);
      if (v15 == v16)
      {
        v17 = 0;
LABEL_47:
        *a4 = v10;
        v7 = v10;
        v13 = v17;
        goto LABEL_48;
      }
      v17 = 0;
      do
      {
        v18 = *(unsigned __int16 **)(v15 + 16);
        v19 = *v18;
        v20 = (v19 - 13) < 5 || v19 == 3;
        if (!v20)
        {
          v21 = *(unsigned __int16 *)(v15 + 44);
          v20 = (v21 & 0xC) == 0;
          v22 = (v21 >> 2) & 1;
          if (v20)
            LOBYTE(v22) = 1;
          v23 = *((_QWORD *)v18 + 1);
          if ((v22 & 1) != 0)
          {
            if ((v23 & 0x80) != 0)
              goto LABEL_31;
          }
          else
          {
            v25 = v15;
            if ((v23 & 0x80) != 0)
            {
LABEL_31:
              v17 += 10;
              goto LABEL_11;
            }
            while ((*(_WORD *)(v25 + 44) & 8) != 0)
            {
              v25 = *(_QWORD *)(v25 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v25 + 16) + 8) & 0x80) != 0)
                goto LABEL_31;
            }
          }
          v24 = v19 - 1;
          if (v24 <= 1 && (*(_BYTE *)(*(_QWORD *)(v15 + 32) + 48) & 8) != 0)
            goto LABEL_43;
          if ((v22 & 1) != 0)
          {
            if ((v23 & 0x80000) == 0)
            {
LABEL_24:
              if (v24 > 1 || (*(_BYTE *)(*(_QWORD *)(v15 + 32) + 48) & 0x10) == 0)
              {
                if ((v22 & 1) != 0)
                {
                  if ((v23 & 0x100000) == 0)
                    goto LABEL_27;
                }
                else
                {
                  v27 = v15;
                  if ((v23 & 0x100000) == 0)
                  {
                    while ((*(_WORD *)(v27 + 44) & 8) != 0)
                    {
                      v27 = *(_QWORD *)(v27 + 8);
                      if ((*(_BYTE *)(*(_QWORD *)(v27 + 16) + 10) & 0x10) != 0)
                        goto LABEL_43;
                    }
LABEL_27:
                    ++v17;
                    goto LABEL_11;
                  }
                }
              }
            }
          }
          else
          {
            v26 = v15;
            if ((v23 & 0x80000) == 0)
            {
              while ((*(_WORD *)(v26 + 44) & 8) != 0)
              {
                v26 = *(_QWORD *)(v26 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v26 + 16) + 10) & 8) != 0)
                  goto LABEL_43;
              }
              goto LABEL_24;
            }
          }
LABEL_43:
          v17 += 2;
        }
LABEL_11:
        if ((*(_BYTE *)v15 & 4) == 0)
        {
          while ((*(_WORD *)(v15 + 44) & 8) != 0)
            v15 = *(_QWORD *)(v15 + 8);
        }
        v15 = *(_QWORD *)(v15 + 8);
      }
      while (v15 != v16);
      if (v17 <= v13)
        goto LABEL_47;
LABEL_48:
      ++v10;
    }
    while (v10 != v12);
  }
  v30 = (_QWORD *)(v8 + 16 * v7);
  v29 = *v30;
  v28 = (unint64_t *)v30[1];
  v31 = *(_QWORD *)(*v30 + 8);
  if (!a3 || ((*(_QWORD *)(v31 + 96) - *(_QWORD *)(v31 + 88)) & 0x7FFFFFFF8) != 8)
    a3 = *(_QWORD *)(v29 + 8);
  v32 = sub_1C61D7F30(a1, v31, v28, *(const llvm::BasicBlock **)(a3 + 16));
  if (v32)
  {
    v33 = (_QWORD *)(*(_QWORD *)(a1 + 96) + 16 * *a4);
    *(_QWORD *)(*v33 + 8) = v32;
    v33[1] = *(_QWORD *)(v32 + 56);
    if (*a2 == v31)
      *a2 = v32;
  }
  return v32 != 0;
}

void sub_1C5071EC4(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const llvm::MachineBasicBlock *v8;
  uint64_t BlockFreq;
  const llvm::MachineBasicBlock **v10;
  const llvm::MachineBasicBlock **v11;
  uint64_t v13;
  uint64_t *v14;
  const llvm::MachineBasicBlock *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  v4 = ((a2[12] - a2[11]) >> 3);
  v37 = v39;
  v38 = 0x200000000;
  sub_1C4765AA4((char *)&v37, v4, 0);
  v5 = 0;
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  if (v6 != v7)
  {
    v5 = 0;
    do
    {
      v8 = *(const llvm::MachineBasicBlock **)(*(_QWORD *)v6 + 8);
      BlockFreq = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(a1 + 224), v8);
      if (__CFADD__(BlockFreq, v5))
        v5 = -1;
      else
        v5 += BlockFreq;
      v11 = (const llvm::MachineBasicBlock **)a2[11];
      v10 = (const llvm::MachineBasicBlock **)a2[12];
      if (v10 != v11 && (((char *)v10 - (char *)v11) & 0x7FFFFFFF0) != 0)
      {
        v13 = BlockFreq;
        v14 = (uint64_t *)v37;
        do
        {
          v15 = *v11++;
          LODWORD(v36) = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 232), v8, v15);
          v16 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v36, v13);
          v17 = v16 + *v14;
          if (__CFADD__(v16, *v14))
            v17 = -1;
          *v14++ = v17;
        }
        while (v11 != v10);
      }
      v6 += 16;
    }
    while (v6 != v7);
  }
  v18 = *(_QWORD *)(a1 + 224);
  v36 = a2;
  sub_1C6204DEC((uint64_t *)(v18 + 8), &v36)[1] = v5;
  v20 = a2[11];
  v19 = a2[12];
  v21 = v37;
  if (((v19 - v20) & 0x7FFFFFFF0) != 0 && (_DWORD)v38)
  {
    v22 = 0;
    v23 = 8 * v38;
    v24 = (uint64_t *)v37;
    do
    {
      v25 = *v24++;
      v26 = __CFADD__(v25, v22);
      v22 += v25;
      if (v26)
        v22 = -1;
      v23 -= 8;
    }
    while (v23);
    if (v20 != v19 && v22)
    {
      v27 = a2[14];
      v28 = a2[15];
      v29 = v37;
      v30 = a2[11];
      do
      {
        v31 = 0;
        if (HIDWORD(v22))
        {
          v34 = v22;
          do
          {
            v32 = v34 >> 1;
            ++v31;
            v35 = v34 >> 33;
            v34 >>= 1;
          }
          while (v35);
        }
        else
        {
          v32 = v22;
        }
        v33 = *v29 >> v31;
        if (v32 != 0x80000000)
          v33 = (((unint64_t)v33 << 31) | (v32 >> 1)) / v32;
        if (v27 != v28)
          *(_DWORD *)(v27 + ((v30 - v20) >> 1)) = v33;
        v30 += 8;
        ++v29;
      }
      while (v30 != v19);
    }
  }
  if (v21 != v39)
    free(v21);
}

uint64_t sub_1C50720EC(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v1 = *(_QWORD *)(a1 + 56);
  if (a1 + 48 != v1)
  {
    v2 = a1 + 48;
    while (1)
    {
      v2 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8;
      if (**(unsigned __int16 **)(v2 + 16) - 13 >= 5 && (*(_WORD *)(v2 + 44) & 4) == 0)
        break;
      if (v1 == v2)
        return 0;
    }
    v1 = v2;
  }
  if (a1 + 48 == v1)
    return 0;
  result = **(unsigned __int16 **)(v1 + 16);
  v4 = *(unsigned int *)(v1 + 40);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)(v1 + 32) + 16;
    do
    {
      v7 = 0;
      switch(*(_BYTE *)(v6 - 16))
      {
        case 0:
        case 9:
        case 0xA:
          v7 = *(_DWORD *)(v6 - 12);
          break;
        case 1:
        case 5:
        case 6:
        case 8:
          v7 = *(_DWORD *)v6;
          break;
        case 4:
          v7 = *(_DWORD *)(*(_QWORD *)v6 + 24);
          break;
        default:
          break;
      }
      result = ((*(unsigned __int8 *)(v6 - 16) | (8 * v7)) << v5++) + result;
      v6 += 32;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t sub_1C50721C0(uint64_t a1, uint64_t *a2)
{
  llvm::MachineBasicBlock **v4;
  unint64_t *v5;
  llvm::MachineBasicBlock **v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t i;
  int v10;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int shouldOptimizeForSize;
  void (*v24)(void);
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t FallThrough;
  llvm::MachineBasicBlock *v31;
  llvm::MachineBasicBlock **v35;
  llvm::MachineBasicBlock **v36;
  llvm::MachineBasicBlock *v37;
  unint64_t FirstTerminator;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v43;
  int v44;
  _BYTE *v45;
  uint64_t v46;
  int v47;
  _BYTE *v48;
  uint64_t v49;
  int v50;
  char v51;
  _DWORD *v52;
  unint64_t *v53;
  int v54;
  unint64_t v56;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v62;
  uint64_t **v63;
  uint64_t **v64;
  uint64_t *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  char v72;
  llvm::MachineBasicBlock **v73;
  llvm::MachineBasicBlock *v74;
  BOOL v75;
  int v76;
  llvm::MachineBasicBlock **v77;
  llvm::MachineBasicBlock **v78;
  int v79;
  unint64_t *v80;
  int v81;
  llvm::MachineBasicBlock *v83;
  int v84;
  _DWORD *v85;
  llvm::MachineBasicBlock ***v86;
  llvm::MachineBasicBlock ***v87;
  llvm::MachineJumpTableInfo *v88;
  int v89;
  _BYTE *v90;
  uint64_t v91;
  int v92;
  llvm::MachineBasicBlock **v93;
  llvm::MachineBasicBlock *v95;
  uint64_t v96;
  llvm::MachineBasicBlock *v97;
  llvm::MachineBasicBlock *v98;
  uint64_t LastNonDebugInstr;
  uint64_t v100;
  uint64_t **v101;
  uint64_t **v102;
  llvm::MachineBasicBlock **v103;
  llvm::MachineBasicBlock **v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v109;
  char v110;
  uint64_t **v111;
  uint64_t **v112;
  uint64_t **v113;
  uint64_t **v114;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  char v129;
  uint64_t v130;
  llvm::MachineBasicBlock *v131;
  BOOL v132;
  llvm::MachineJumpTableInfo *v134;
  uint64_t v136;
  uint64_t *v137;
  llvm::MachineBasicBlock **v138;
  llvm::MachineBasicBlock **v139;
  char v140;
  llvm::MachineBasicBlock *v141;
  char v142;
  char v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  llvm::MachineBasicBlock *v148;
  llvm::MachineBasicBlock *v149;
  uint64_t *v150;
  llvm::MachineBasicBlock *v151;
  void *v152;
  uint64_t v153;
  _BYTE v154[128];
  void *__src;
  uint64_t v156;
  _BYTE v157[128];
  _QWORD *v158;
  uint64_t v159;
  _QWORD v160[18];

  v142 = 0;
  v160[16] = *MEMORY[0x1E0C80C00];
  v139 = (llvm::MachineBasicBlock **)a2[4];
  v4 = v139 + 40;
  v5 = (unint64_t *)(a2 + 6);
  v136 = (uint64_t)(a2 + 5);
  v137 = (uint64_t *)(a1 + 72);
  v138 = v139 + 40;
  do
  {
    v6 = (llvm::MachineBasicBlock **)a2[1];
    if (*(_DWORD *)(a1 + 80))
      v7 = v6 == v4;
    else
      v7 = 1;
    if (v7)
    {
      v8 = 1;
    }
    else
    {
      __src = a2;
      v158 = 0;
      v51 = sub_1C61252B8(v137, &__src, &v158);
      if ((v51 & 1) != 0)
        v52 = v158;
      else
        v52 = (_DWORD *)(*(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 88));
      __src = v6;
      v158 = 0;
      if ((sub_1C61252B8(v137, &__src, &v158) & 1) != 0)
        v85 = v158;
      else
        v85 = (_DWORD *)(*(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 88));
      v8 = v52[2] == v85[2];
    }
    v150 = 0;
    v151 = 0;
    v158 = v160;
    v159 = 0x400000000;
    v143 = (*(uint64_t (**)(_QWORD, uint64_t *, llvm::MachineBasicBlock **, uint64_t **, _QWORD **, uint64_t))(**(_QWORD **)(a1 + 128) + 248))(*(_QWORD *)(a1 + 128), a2, &v151, &v150, &v158, 1);
    for (i = a2[7]; ; i = *(_QWORD *)(i + 8))
    {
      if ((unint64_t *)i == v5)
        goto LABEL_20;
      v10 = **(unsigned __int16 **)(i + 16);
      if ((v10 - 13) >= 5 && v10 != 23)
        break;
      if ((*(_BYTE *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
    }
    if (v5 != (unint64_t *)i)
    {
LABEL_34:
      v141 = (llvm::MachineBasicBlock *)v6;
      v20 = *a2;
      v148 = 0;
      v149 = 0;
      __src = v157;
      v156 = 0x400000000;
      v21 = (*(uint64_t (**)(_QWORD, uint64_t, llvm::MachineBasicBlock **, llvm::MachineBasicBlock **, void **, uint64_t))(**(_QWORD **)(a1 + 128) + 248))(*(_QWORD *)(a1 + 128), v20, &v149, &v148, &__src, 1);
      if ((v21 & 1) != 0)
        goto LABEL_35;
      if (v149 && v149 == v148)
      {
        sub_1C507367C((unsigned __int8 **)&v152, (llvm::MachineBasicBlock *)v20);
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 128) + 264))(*(_QWORD *)(a1 + 128), v20, 0);
        LODWORD(v156) = 0;
        if (v149 == (llvm::MachineBasicBlock *)a2)
          goto LABEL_233;
        v24 = *(void (**)(void))(**(_QWORD **)(a1 + 128) + 272);
LABEL_232:
        v24();
LABEL_233:
        if (v152)
          llvm::MetadataTracking::untrack((uint64_t)&v152, (unsigned __int8 *)v152);
        goto LABEL_235;
      }
      v25 = v156;
      if (!v149
        && !(_DWORD)v156
        && ((a2[9] - a2[8]) & 0x7FFFFFFF8) == 8
        && ((*(_QWORD *)(v20 + 96) - *(_QWORD *)(v20 + 88)) & 0x7FFFFFFF8) == 8
        && !*((_BYTE *)a2 + 185)
        && !*((_BYTE *)a2 + 184))
      {
        v116 = *(_QWORD *)(v20 + 48) & 0xFFFFFFFFFFFFFFF8;
        if (v20 + 48 != v116)
        {
          if (!v116 || (*(_BYTE *)v116 & 4) == 0)
          {
            while ((*(_WORD *)(v116 + 44) & 4) != 0)
              v116 = *(_QWORD *)v116 & 0xFFFFFFFFFFFFFFF8;
          }
          v117 = a2[7];
          if (v116 != *(_QWORD *)(v20 + 56) && v117 != (_QWORD)v5)
          {
            do
            {
              if (**(unsigned __int16 **)(v116 + 16) - 13 > 4
                || **(unsigned __int16 **)(v117 + 16) - 13 > 4
                || !llvm::MachineInstr::isIdenticalTo(v117, v116, 0))
              {
                break;
              }
              v122 = v117;
              if ((*(_QWORD *)v117 & 4) == 0)
              {
                v122 = v117;
                if ((*(_WORD *)(v117 + 44) & 8) != 0)
                {
                  v122 = v117;
                  do
                    v122 = *(_QWORD *)(v122 + 8);
                  while ((*(_WORD *)(v122 + 44) & 8) != 0);
                }
              }
              v116 = *(_QWORD *)v116 & 0xFFFFFFFFFFFFFFF8;
              if (!v116 || (*(_BYTE *)v116 & 4) == 0)
              {
                while ((*(_WORD *)(v116 + 44) & 4) != 0)
                  v116 = *(_QWORD *)v116 & 0xFFFFFFFFFFFFFFF8;
              }
              v123 = v117;
              if ((*(_QWORD *)v117 & 4) == 0)
              {
                v123 = v117;
                if ((*(_WORD *)(v117 + 44) & 8) != 0)
                {
                  v123 = v117;
                  do
                    v123 = *(_QWORD *)(v123 + 8);
                  while ((*(_WORD *)(v123 + 44) & 8) != 0);
                }
              }
              v124 = *(unint64_t **)(v122 + 8);
              sub_1C487FE80(*(_QWORD *)(v117 + 24) + 40, v117, *(_QWORD *)(v123 + 8));
              v125 = v116 == *(_QWORD *)(v20 + 56) || v124 == v5;
              v117 = (uint64_t)v124;
            }
            while (!v125);
          }
        }
        v4 = v139 + 40;
        if ((uint64_t *)v20 != a2)
        {
          v119 = (unint64_t *)a2[7];
          if (v119 != v5)
          {
            v120 = *(_QWORD *)(v20 + 40);
            v121 = (unint64_t *)a2[7];
            do
            {
              v121[3] = v120;
              v121 = (unint64_t *)v121[1];
            }
            while (v121 != v5);
            sub_1C4785D30((unint64_t *)(v20 + 48), v119, v5);
          }
        }
        llvm::MachineBasicBlock::removeSuccessor(v20, *(char **)(v20 + 88), 0);
        llvm::MachineBasicBlock::transferSuccessors((char *)v20, (llvm::MachineBasicBlock *)a2);
        v43 = 1;
        v142 = 1;
        v140 = 1;
        goto LABEL_236;
      }
      if (v149 == (llvm::MachineBasicBlock *)a2 && !v148)
      {
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 128) + 264))(*(_QWORD *)(a1 + 128), v20, 0);
LABEL_235:
        v142 = 1;
        v43 = 2;
        goto LABEL_236;
      }
      if (v148 == (llvm::MachineBasicBlock *)a2)
      {
        sub_1C507367C((unsigned __int8 **)&v152, (llvm::MachineBasicBlock *)v20);
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 128) + 264))(*(_QWORD *)(a1 + 128), v20, 0);
        v24 = *(void (**)(void))(**(_QWORD **)(a1 + 128) + 272);
        goto LABEL_232;
      }
      if (v149 != (llvm::MachineBasicBlock *)a2)
      {
LABEL_268:
        if (a2[11] != a2[12]
          || !(_DWORD)v156
          || v148
          || v149 != v141
          || llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)a2))
        {
          goto LABEL_35;
        }
        if (v141 == *v4)
        {
          v98 = v149;
          LastNonDebugInstr = llvm::MachineBasicBlock::getLastNonDebugInstr(v149, 1);
          v100 = llvm::MachineBasicBlock::getLastNonDebugInstr((llvm::MachineBasicBlock *)a2, 1);
          if ((llvm::MachineBasicBlock *)((char *)v98 + 48) == (llvm::MachineBasicBlock *)LastNonDebugInstr
            || v5 == (unint64_t *)v100)
          {
            goto LABEL_35;
          }
          v101 = (uint64_t **)*((_QWORD *)v98 + 11);
          v102 = (uint64_t **)*((_QWORD *)v98 + 12);
          if (v101 != v102)
          {
            while (*v101 != a2)
            {
              if (++v101 == v102)
              {
                v101 = (uint64_t **)*((_QWORD *)v98 + 12);
                break;
              }
            }
          }
          if (v101 == v102)
          {
            v103 = (llvm::MachineBasicBlock **)a2[11];
            v104 = (llvm::MachineBasicBlock **)a2[12];
            if (v103 != v104)
            {
              while (*v103 != v98)
              {
                if (++v103 == v104)
                {
                  v103 = (llvm::MachineBasicBlock **)a2[12];
                  break;
                }
              }
            }
            if (v103 != v104)
              goto LABEL_35;
            v105 = *(_QWORD *)(*(_QWORD *)(v100 + 16) + 8);
            if ((*(_WORD *)(v100 + 44) & 0xC) != 0 && (*(_WORD *)(v100 + 44) & 4) == 0)
            {
              while ((v105 & 0x80) == 0)
              {
                if ((*(_WORD *)(v100 + 44) & 8) == 0)
                  goto LABEL_35;
                v100 = *(_QWORD *)(v100 + 8);
                LOBYTE(v105) = *(_BYTE *)(*(_QWORD *)(v100 + 16) + 8);
              }
            }
            else if ((v105 & 0x80) == 0)
            {
              goto LABEL_35;
            }
            v107 = *(_QWORD *)(*(_QWORD *)(LastNonDebugInstr + 16) + 8);
            if ((*(_WORD *)(LastNonDebugInstr + 44) & 0xC) != 0 && (*(_WORD *)(LastNonDebugInstr + 44) & 4) == 0)
            {
              if ((v107 & 0x80) != 0)
                goto LABEL_35;
              while ((*(_WORD *)(LastNonDebugInstr + 44) & 8) != 0)
              {
                LastNonDebugInstr = *(_QWORD *)(LastNonDebugInstr + 8);
                if ((*(_BYTE *)(*(_QWORD *)(LastNonDebugInstr + 16) + 8) & 0x80) != 0)
                  goto LABEL_35;
              }
            }
            else if ((v107 & 0x80) != 0)
            {
              goto LABEL_35;
            }
          }
        }
        v152 = v154;
        v153 = 0x400000000;
        v89 = v156;
        if (!(_DWORD)v156)
        {
LABEL_278:
          v92 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 128) + 728))(*(_QWORD *)(a1 + 128), &v152);
          if ((v92 & 1) == 0)
          {
            sub_1C507367C(&v147, (llvm::MachineBasicBlock *)v20);
            (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 128) + 264))(*(_QWORD *)(a1 + 128), v20, 0);
            (*(void (**)(_QWORD, uint64_t, uint64_t *, _QWORD, void *, _QWORD, unsigned __int8 **, _QWORD))(**(_QWORD **)(a1 + 128) + 272))(*(_QWORD *)(a1 + 128), v20, a2, 0, v152, v153, &v147, 0);
            llvm::MachineBasicBlock::moveAfter(a2, *v4);
            if (v147)
              llvm::MetadataTracking::untrack((uint64_t)&v147, v147);
            v142 = 1;
            v140 = 1;
          }
          if (v152 != v154)
            free(v152);
          if (!v92)
            goto LABEL_282;
LABEL_35:
          v22 = *((_QWORD *)*v139 + 14);
          if (v22 && ((*(_BYTE *)(v22 + 17) & 4) != 0 || *(char *)(v22 + 13) < 0))
            shouldOptimizeForSize = 1;
          else
            shouldOptimizeForSize = llvm::shouldOptimizeForSize((llvm::MachineBasicBlock *)a2, *(_QWORD *)(a1 + 240), *(llvm::MBFIWrapper **)(a1 + 224));
          v26 = a2[7];
          if ((unint64_t *)v26 != v5)
          {
            v27 = a2[7];
            while (1)
            {
              v28 = **(unsigned __int16 **)(v27 + 16);
              if ((v28 - 13) >= 5 && v28 != 23)
                break;
              if ((*(_BYTE *)v27 & 4) == 0)
              {
                while ((*(_WORD *)(v27 + 44) & 8) != 0)
                  v27 = *(_QWORD *)(v27 + 8);
              }
              v27 = *(_QWORD *)(v27 + 8);
              if ((unint64_t *)v27 == v5)
                goto LABEL_64;
            }
            if (v5 != (unint64_t *)v27)
            {
              v79 = ((a2[9] - a2[8]) & 0x7FFFFFFF8) == 8 ? shouldOptimizeForSize : 0;
              if (v79 == 1)
              {
                v80 = v5;
                if ((unint64_t *)v26 != v5)
                {
                  do
                  {
                    v81 = **(unsigned __int16 **)(v26 + 16);
                    if ((v81 - 13) >= 5 && v81 != 23)
                    {
                      v80 = (unint64_t *)v26;
                      goto LABEL_220;
                    }
                    if ((*(_BYTE *)v26 & 4) == 0)
                    {
                      while ((*(_WORD *)(v26 + 44) & 8) != 0)
                        v26 = *(_QWORD *)(v26 + 8);
                    }
                    v26 = *(_QWORD *)(v26 + 8);
                  }
                  while ((unint64_t *)v26 != v5);
                  v80 = v5;
                }
LABEL_220:
                if ((*(unsigned int (**)(_QWORD, unint64_t *))(**(_QWORD **)(a1 + 128) + 784))(*(_QWORD *)(a1 + 128), v80))
                {
                  v83 = *(llvm::MachineBasicBlock **)a2[8];
                  v146 = 0;
                  v147 = 0;
                  v152 = v154;
                  v153 = 0x400000000;
                  v84 = 1;
                  if (((*(uint64_t (**)(_QWORD, llvm::MachineBasicBlock *, unsigned __int8 **, unsigned __int8 **, void **, uint64_t))(**(_QWORD **)(a1 + 128) + 248))(*(_QWORD *)(a1 + 128), v83, &v147, &v146, &v152, 1) & 1) == 0&& (_DWORD)v153&& v147 == (unsigned __int8 *)a2&& v147 != v146&& (*(unsigned int (**)(_QWORD, void **, unint64_t *))(**(_QWORD **)(a1 + 128)+ 792))(*(_QWORD *)(a1 + 128), &v152, v80))
                  {
                    (*(void (**)(_QWORD, llvm::MachineBasicBlock *, void **, unint64_t *))(**(_QWORD **)(a1 + 128) + 800))(*(_QWORD *)(a1 + 128), v83, &v152, v80);
                    llvm::MachineBasicBlock::removeSuccessor(v83, (llvm::MachineBasicBlock *)a2, 0);
                    v84 = 0;
                    v142 = 1;
                    v140 = 1;
                  }
                  if (v152 != v154)
                    free(v152);
                  if (!v84)
                  {
                    v43 = 1;
                    goto LABEL_236;
                  }
                }
              }
            }
          }
LABEL_64:
          if ((v143 & 1) != 0)
            goto LABEL_65;
          v31 = v151;
          if (v151 == (llvm::MachineBasicBlock *)a2 || v151 == 0 || v150 == 0 || v150 != a2)
          {
            if (!v151)
              goto LABEL_65;
LABEL_119:
            if ((_DWORD)v159 || v150)
              goto LABEL_65;
            v53 = v5;
            if ((unint64_t *)a2[7] != v5)
            {
              v53 = (unint64_t *)a2[7];
              while (1)
              {
                v54 = *(unsigned __int16 *)v53[2];
                if ((v54 - 13) >= 5 && v54 != 23)
                  break;
                if ((*(_BYTE *)v53 & 4) == 0)
                {
                  while ((*((_WORD *)v53 + 22) & 8) != 0)
                    v53 = (unint64_t *)v53[1];
                }
                v53 = (unint64_t *)v53[1];
                if (v53 == v5)
                {
                  v53 = v5;
                  break;
                }
              }
            }
            v56 = *(_QWORD *)(v53[2] + 8);
            if ((*((_WORD *)v53 + 22) & 0xC) != 0 && (*((_WORD *)v53 + 22) & 4) == 0)
            {
              if ((v56 & 0x400) == 0)
              {
                while ((*((_WORD *)v53 + 22) & 8) != 0)
                {
                  v53 = (unint64_t *)v53[1];
                  if ((*(_BYTE *)(v53[2] + 9) & 4) != 0)
                    goto LABEL_138;
                }
                goto LABEL_65;
              }
            }
            else if (((v56 >> 10) & 1) == 0)
            {
LABEL_65:
              if (llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)v20))
              {
LABEL_203:
                v43 = 1;
                v140 = v142;
                goto LABEL_236;
              }
              FallThrough = llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)a2);
              if (*((_BYTE *)a2 + 184))
              {
LABEL_67:
                if (FallThrough)
                {
                  v4 = v139 + 40;
                  goto LABEL_203;
                }
                v4 = v139 + 40;
                if ((v143 & 1) == 0)
                {
                  v70 = 0;
                  v71 = 0;
                  v152 = v150;
                  v153 = (uint64_t)v151;
                  while (1)
                  {
                    v72 = v70;
                    v73 = (llvm::MachineBasicBlock **)*(&v152 + v71);
                    if (v73)
                    {
                      v74 = *v73;
                      v75 = v73 == (llvm::MachineBasicBlock **)a2 || v74 == (llvm::MachineBasicBlock *)a2;
                      if (!v75 && !llvm::MachineBasicBlock::getFallThrough(v74))
                        break;
                    }
                    v70 = 1;
                    v71 = 1;
                    if ((v72 & 1) != 0)
                      goto LABEL_191;
                  }
                  v93 = (llvm::MachineBasicBlock **)a2[1];
                  if (v93 != v73 && v93 != (llvm::MachineBasicBlock **)a2)
                  {
                    v95 = *v93;
                    v96 = *a2;
                    *(_QWORD *)(v96 + 8) = v93;
                    *v93 = (llvm::MachineBasicBlock *)v96;
                    v97 = *v73;
                    *((_QWORD *)v95 + 1) = v73;
                    *a2 = (uint64_t)v97;
                    *((_QWORD *)v97 + 1) = a2;
                    *v73 = v95;
                  }
                  goto LABEL_235;
                }
LABEL_191:
                v146 = 0;
                v147 = 0;
                v152 = v154;
                v153 = 0x400000000;
                if (v141 == (llvm::MachineBasicBlock *)v138 || *((_BYTE *)v141 + 184))
                  goto LABEL_199;
                v76 = 1;
                if (((*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 **, unsigned __int8 **, void **, uint64_t))(**(_QWORD **)(a1 + 128) + 248))(*(_QWORD *)(a1 + 128), v20, &v147, &v146, &v152, 1) & 1) != 0)goto LABEL_200;
                v77 = *(llvm::MachineBasicBlock ***)(v20 + 88);
                v78 = *(llvm::MachineBasicBlock ***)(v20 + 96);
                if (v77 != v78)
                {
                  while (*v77 != v141)
                  {
                    if (++v77 == v78)
                    {
                      v77 = *(llvm::MachineBasicBlock ***)(v20 + 96);
                      break;
                    }
                  }
                }
                if (v77 == v78)
                {
LABEL_199:
                  v76 = 1;
                }
                else
                {
                  llvm::MachineBasicBlock::moveAfter(a2, *v138);
                  v76 = 0;
                  v142 = 1;
                  v140 = 1;
                }
LABEL_200:
                if (v152 != v154)
                  free(v152);
                if (v76)
                  goto LABEL_203;
                goto LABEL_282;
              }
              v63 = (uint64_t **)a2[8];
              v64 = (uint64_t **)a2[9];
              while (1)
              {
                if (v63 == v64)
                  goto LABEL_67;
                v65 = *v63;
                v146 = 0;
                v147 = 0;
                v152 = v154;
                v153 = 0x400000000;
                if (v65 == a2 || llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)v65))
                {
                  v43 = 0;
                  v66 = 1;
                  goto LABEL_173;
                }
                v66 = 1;
                if (((*(uint64_t (**)(_QWORD, uint64_t *, unsigned __int8 **, unsigned __int8 **, void **, uint64_t))(**(_QWORD **)(a1 + 128) + 248))(*(_QWORD *)(a1 + 128), v65, &v147, &v146, &v152, 1) & 1) != 0|| v147 != (unsigned __int8 *)a2 && v146 != (unsigned __int8 *)a2)
                {
                  break;
                }
                if (FallThrough && v151 && v150)
                  break;
                if (FallThrough)
                {
                  if (*((_DWORD *)a2 + 6) < *((_DWORD *)v65 + 6))
                    break;
                  v67 = a2[1];
                  LODWORD(v159) = 0;
                  v68 = *(_QWORD *)(a1 + 128);
                  v145 = 0;
                  (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD *, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v68 + 272))(v68, a2, v67, 0, v158, 0, &v145, 0);
                  if (v145)
                    llvm::MetadataTracking::untrack((uint64_t)&v145, v145);
                }
                llvm::MachineBasicBlock::moveAfter(a2, (llvm::MachineBasicBlock *)v65);
                v66 = 0;
                v142 = 1;
                v43 = 2;
LABEL_173:
                if (v152 != v154)
                  free(v152);
                if ((v66 & 1) == 0)
                {
                  v4 = v139 + 40;
                  goto LABEL_236;
                }
                ++v63;
              }
              v43 = 0;
              goto LABEL_173;
            }
LABEL_138:
            if (v31 == (llvm::MachineBasicBlock *)a2 || *((_BYTE *)a2 + 185) || *((_BYTE *)a2 + 184))
              goto LABEL_65;
            sub_1C507367C(&v147, (llvm::MachineBasicBlock *)a2);
            (*(void (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(a1 + 128) + 264))(*(_QWORD *)(a1 + 128), a2, 0);
            v58 = a2[7];
            if ((unint64_t *)v58 == v5)
              goto LABEL_152;
            v59 = a2[7];
            while (1)
            {
              v60 = **(unsigned __int16 **)(v59 + 16);
              if ((v60 - 13) >= 5 && v60 != 23)
                break;
              if ((*(_BYTE *)v59 & 4) == 0)
              {
                while ((*(_WORD *)(v59 + 44) & 8) != 0)
                  v59 = *(_QWORD *)(v59 + 8);
              }
              v59 = *(_QWORD *)(v59 + 8);
              if ((unint64_t *)v59 == v5)
                goto LABEL_152;
            }
            if (v5 == (unint64_t *)v59)
LABEL_152:
              sub_1C487FE80(v136, v58, (uint64_t)v5);
            if (v5 == (unint64_t *)(*v5 & 0xFFFFFFFFFFFFFFF8))
            {
              v109 = llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)v20);
              v110 = v21 ^ 1;
              if (!v109)
                v110 = 1;
              if ((v110 & 1) != 0)
                goto LABEL_319;
              v111 = *(uint64_t ***)(v20 + 88);
              v112 = *(uint64_t ***)(v20 + 96);
              if (v111 != v112)
              {
                while (*v111 != a2)
                {
                  if (++v111 == v112)
                  {
                    v111 = *(uint64_t ***)(v20 + 96);
                    break;
                  }
                }
              }
              if (v111 == v112)
              {
LABEL_319:
                if (v109)
                {
                  v113 = *(uint64_t ***)(v20 + 88);
                  v114 = *(uint64_t ***)(v20 + 96);
                  if (v113 != v114)
                  {
                    while (*v113 != a2)
                    {
                      if (++v113 == v114)
                      {
                        v113 = *(uint64_t ***)(v20 + 96);
                        break;
                      }
                    }
                  }
                  if (v113 != v114 && v149 != (llvm::MachineBasicBlock *)a2 && v148 != (llvm::MachineBasicBlock *)a2)
                  {
                    if (v149)
                      v148 = (llvm::MachineBasicBlock *)a2;
                    else
                      v149 = (llvm::MachineBasicBlock *)a2;
                    sub_1C507367C((unsigned __int8 **)&v152, (llvm::MachineBasicBlock *)v20);
                    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 128) + 264))(*(_QWORD *)(a1 + 128), v20, 0);
                    (*(void (**)(_QWORD, uint64_t, llvm::MachineBasicBlock *, llvm::MachineBasicBlock *, void *, _QWORD, void **, _QWORD))(**(_QWORD **)(a1 + 128) + 272))(*(_QWORD *)(a1 + 128), v20, v149, v148, __src, v156, &v152, 0);
                    if (v152)
                      llvm::MetadataTracking::untrack((uint64_t)&v152, (unsigned __int8 *)v152);
                  }
                }
                v127 = a2[8];
                v126 = a2[9];
                if (((v126 - v127) & 0x7FFFFFFF8) != 0)
                {
                  v128 = 0;
                  v129 = 0;
                  v130 = 0;
                  do
                  {
                    v131 = *(llvm::MachineBasicBlock **)(v127 + 8 * v130);
                    if (v131 == (llvm::MachineBasicBlock *)a2)
                    {
                      ++v130;
                      v128 = 1;
                    }
                    else
                    {
                      llvm::MachineBasicBlock::ReplaceUsesOfBlockWith(*(llvm::MachineBasicBlock **)(v127 + 8 * v130), (llvm::MachineBasicBlock *)a2, v151);
                      v145 = 0;
                      v146 = 0;
                      v152 = v154;
                      v153 = 0x400000000;
                      if ((*(unsigned int (**)(_QWORD, llvm::MachineBasicBlock *, unsigned __int8 **, unsigned __int8 **, void **, uint64_t))(**(_QWORD **)(a1 + 128) + 248))(*(_QWORD *)(a1 + 128), v131, &v146, &v145, &v152, 1))
                      {
                        v132 = 1;
                      }
                      else
                      {
                        v132 = v146 == 0;
                      }
                      if (!v132 && v146 == v145)
                      {
                        sub_1C507367C(&v144, v131);
                        (*(void (**)(_QWORD, llvm::MachineBasicBlock *, _QWORD))(**(_QWORD **)(a1 + 128)
                                                                                          + 264))(*(_QWORD *)(a1 + 128), v131, 0);
                        LODWORD(v153) = 0;
                        (*(void (**)(_QWORD, llvm::MachineBasicBlock *, unsigned __int8 *, _QWORD, void *, _QWORD, unsigned __int8 **, _QWORD))(**(_QWORD **)(a1 + 128) + 272))(*(_QWORD *)(a1 + 128), v131, v146, 0, v152, 0, &v144, 0);
                        if (v144)
                          llvm::MetadataTracking::untrack((uint64_t)&v144, v144);
                        v142 = 1;
                      }
                      if (v152 != v154)
                        free(v152);
                      v127 = a2[8];
                      v126 = a2[9];
                      v129 = 1;
                    }
                  }
                  while (v130 != ((unint64_t)(v126 - v127) >> 3));
                }
                else
                {
                  v129 = 0;
                  v128 = 0;
                }
                v134 = v139[9];
                if (v134)
                  llvm::MachineJumpTableInfo::ReplaceMBBInJumpTables(v134, (llvm::MachineBasicBlock *)a2, v151);
                if (!(v128 & 1 | ((v129 & 1) == 0)))
                {
                  v62 = 0;
                  v142 = 1;
                  v140 = 1;
                  v4 = v139 + 40;
LABEL_155:
                  if (v147)
                    llvm::MetadataTracking::untrack((uint64_t)&v147, v147);
                  if (v62)
                    goto LABEL_65;
LABEL_282:
                  v43 = 1;
LABEL_236:
                  if (__src != v157)
                    free(__src);
                  goto LABEL_238;
                }
                v142 |= v129;
                v4 = v139 + 40;
              }
            }
            (*(void (**)(_QWORD, uint64_t *, llvm::MachineBasicBlock *, _QWORD, _QWORD *, _QWORD, unsigned __int8 **, _QWORD))(**(_QWORD **)(a1 + 128) + 272))(*(_QWORD *)(a1 + 128), a2, v151, 0, v158, v159, &v147, 0);
            v62 = 1;
            goto LABEL_155;
          }
          v152 = v154;
          v153 = 0x400000000;
          v44 = v159;
          if (!(_DWORD)v159)
          {
LABEL_99:
            v47 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 128) + 728))(*(_QWORD *)(a1 + 128), &v152);
            if ((v47 & 1) != 0)
            {
              v43 = 0;
            }
            else
            {
              sub_1C507367C(&v147, (llvm::MachineBasicBlock *)a2);
              (*(void (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(a1 + 128) + 264))(*(_QWORD *)(a1 + 128), a2, 0);
              (*(void (**)(_QWORD, uint64_t *, uint64_t *, llvm::MachineBasicBlock *, void *, _QWORD, unsigned __int8 **, _QWORD))(**(_QWORD **)(a1 + 128) + 272))(*(_QWORD *)(a1 + 128), a2, v150, v151, v152, v153, &v147, 0);
              if (v147)
                llvm::MetadataTracking::untrack((uint64_t)&v147, v147);
              v142 = 1;
              v43 = 2;
            }
            if (v152 != v154)
              free(v152);
            if (!v47)
              goto LABEL_236;
            v31 = v151;
            if (!v151)
              goto LABEL_65;
            goto LABEL_119;
          }
          v45 = v154;
          v46 = v159;
          if (v159 >= 5uLL)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v159, 32);
            v46 = v159;
            if (!(_DWORD)v159)
              goto LABEL_98;
            v45 = v152;
          }
          memcpy(v45, v158, 32 * v46);
LABEL_98:
          LODWORD(v153) = v44;
          goto LABEL_99;
        }
        v90 = v154;
        v91 = v156;
        if (v156 >= 5uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v156, 32);
          v91 = v156;
          if (!(_DWORD)v156)
            goto LABEL_277;
          v90 = v152;
        }
        memcpy(v90, __src, 32 * v91);
LABEL_277:
        LODWORD(v153) = v89;
        goto LABEL_278;
      }
      v152 = v154;
      v153 = 0x400000000;
      if (!(_DWORD)v156)
      {
LABEL_107:
        v50 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 128) + 728))(*(_QWORD *)(a1 + 128), &v152);
        if ((v50 & 1) != 0)
        {
          v43 = 0;
        }
        else
        {
          sub_1C507367C(&v147, (llvm::MachineBasicBlock *)v20);
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 128) + 264))(*(_QWORD *)(a1 + 128), v20, 0);
          (*(void (**)(_QWORD, uint64_t, llvm::MachineBasicBlock *, _QWORD, void *, _QWORD, unsigned __int8 **, _QWORD))(**(_QWORD **)(a1 + 128) + 272))(*(_QWORD *)(a1 + 128), v20, v148, 0, v152, v153, &v147, 0);
          if (v147)
            llvm::MetadataTracking::untrack((uint64_t)&v147, v147);
          v142 = 1;
          v43 = 2;
        }
        if (v152 != v154)
          free(v152);
        if (!v50)
          goto LABEL_236;
        goto LABEL_268;
      }
      v48 = v154;
      v49 = v156;
      if (v156 >= 5uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v156, 32);
        v49 = v156;
        if (!(_DWORD)v156)
          goto LABEL_106;
        v48 = v152;
      }
      memcpy(v48, __src, 32 * v49);
LABEL_106:
      LODWORD(v153) = v25;
      goto LABEL_107;
    }
LABEL_20:
    if (*((_BYTE *)a2 + 184))
      goto LABEL_34;
    if (*((_BYTE *)a2 + 185) || !v8)
      goto LABEL_34;
    v13 = *(_QWORD *)(a1 + 128);
    v14 = (uint64_t *)a2[11];
    v15 = (uint64_t *)a2[12];
    while (v14 != v15)
    {
      v16 = *v14;
      if (((*(_QWORD *)(*v14 + 72) - *(_QWORD *)(*v14 + 64)) & 0x7FFFFFFF8) == 8)
      {
        v17 = llvm::MachineBasicBlock::SkipPHIsAndLabels(*v14, *(_QWORD *)(v16 + 56));
        v18 = a2[7];
        if ((unint64_t *)v18 != v5)
        {
          v19 = v17;
          do
          {
            if (**(unsigned __int16 **)(v18 + 16) - 13 <= 4)
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 184))(v13, v16, v19, v18);
            v18 = *(_QWORD *)(v18 + 8);
          }
          while ((unint64_t *)v18 != v5);
        }
      }
      ++v14;
    }
    v35 = (llvm::MachineBasicBlock **)a2[8];
    v36 = (llvm::MachineBasicBlock **)a2[9];
    if (v35 == v36)
    {
      v43 = 1;
      v140 = v142;
      v4 = v139 + 40;
    }
    else
    {
      do
      {
        v37 = *v35;
        if (((*((_QWORD *)*v35 + 12) - *((_QWORD *)*v35 + 11)) & 0x7FFFFFFF8) == 8)
        {
          FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(*v35);
          v39 = a2[7];
          if ((unint64_t *)v39 != v5)
          {
            v40 = FirstTerminator;
            do
            {
              if (**(unsigned __int16 **)(v39 + 16) - 13 <= 4)
                (*(void (**)(uint64_t, llvm::MachineBasicBlock *, unint64_t, uint64_t))(*(_QWORD *)v13 + 184))(v13, v37, v40, v39);
              v39 = *(_QWORD *)(v39 + 8);
            }
            while ((unint64_t *)v39 != v5);
          }
        }
        ++v35;
      }
      while (v35 != v36);
      v41 = a2[9];
      v4 = v139 + 40;
      if (a2[8] == v41 || v6 == v138)
      {
        v43 = 1;
        v140 = v142;
      }
      else
      {
        if (*((_BYTE *)v6 + 184))
          goto LABEL_181;
        v86 = (llvm::MachineBasicBlock ***)a2[11];
        v87 = (llvm::MachineBasicBlock ***)a2[12];
        if (v86 != v87)
        {
          while (*v86 != v6)
          {
            if (++v86 == v87)
            {
              v86 = (llvm::MachineBasicBlock ***)a2[12];
              break;
            }
          }
        }
        if (v86 == v87)
        {
LABEL_181:
          v43 = 1;
          v69 = v142;
        }
        else
        {
          do
          {
            llvm::MachineBasicBlock::ReplaceUsesOfBlockWith(*(llvm::MachineBasicBlock **)(v41 - 8), (llvm::MachineBasicBlock *)a2, (llvm::MachineBasicBlock *)v6);
            v41 = a2[9];
          }
          while (a2[8] != v41);
          v88 = v139[9];
          if (v88)
            llvm::MachineJumpTableInfo::ReplaceMBBInJumpTables(v88, (llvm::MachineBasicBlock *)a2, (llvm::MachineBasicBlock *)v6);
          v43 = 1;
          v69 = 1;
          v142 = 1;
        }
        v140 = v69;
      }
    }
LABEL_238:
    if (v158 != v160)
      free(v158);
  }
  while (v43 == 2);
  return v140 & 1;
}

uint64_t sub_1C507367C(unsigned __int8 **a1, llvm::MachineBasicBlock *this)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v7;
  unsigned __int8 *v8;

  result = llvm::MachineBasicBlock::getLastNonDebugInstr(this, 1);
  if ((llvm::MachineBasicBlock *)((char *)this + 48) == (llvm::MachineBasicBlock *)result)
    goto LABEL_7;
  v5 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  if ((*(_WORD *)(result + 44) & 0xC) != 0 && (*(_WORD *)(result + 44) & 4) == 0)
  {
    if ((v5 & 0x400) == 0)
    {
      v7 = result;
      while ((*(_WORD *)(v7 + 44) & 8) != 0)
      {
        v7 = *(_QWORD *)(v7 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v7 + 16) + 9) & 4) != 0)
          goto LABEL_13;
      }
      goto LABEL_7;
    }
  }
  else if ((v5 & 0x400) == 0)
  {
LABEL_7:
    *a1 = 0;
    return result;
  }
LABEL_13:
  v8 = *(unsigned __int8 **)(result + 56);
  *a1 = v8;
  if (v8)
    return llvm::MetadataTracking::track((uint64_t)a1, v8, 2);
  return result;
}

BOOL sub_1C507371C(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  int *v4;
  size_t v5;
  int *v6;
  int v7;

  if (*(_QWORD *)(a1 + 48))
    return sub_1C61D9060(a1 + 32, a2) != 0;
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = *(int **)a1;
  v5 = 4 * v3 - 4;
  v6 = *(int **)a1;
  while (1)
  {
    v7 = *v6++;
    if (v7 == *a2)
      break;
    v5 -= 4;
    v4 = v6;
    if (v5 == -4)
      return 0;
  }
  if (v5)
  {
    memmove(v4, v4 + 1, v5);
    LODWORD(v3) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v3 - 1;
  return 1;
}

unint64_t sub_1C50737B0(unint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  unsigned int *i;
  unsigned __int16 *v16;
  int v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;

  v20 = result;
  if ((result - 1) > 0x3FFFFFFE)
    return sub_1C4854E58(a3, &v20);
  if (a2)
    v4 = (_QWORD *)(a2 + 8);
  else
    v4 = 0;
  v5 = ((unint64_t)*(unsigned int *)(*v4 + 24 * result + 16) >> 3) & 0x1FFFFFFE;
  v7 = v4[5];
  v6 = v4[6];
  v8 = (_WORD *)(v6 + v5 + 2);
  v9 = *(unsigned __int16 *)(v6 + v5) + (*(_DWORD *)(*v4 + 24 * result + 16) & 0xF) * result;
  do
  {
    v10 = 4 * (unsigned __int16)v9;
    v11 = *(unsigned __int16 *)(v7 + v10);
    if (*(_WORD *)(v7 + v10))
      v12 = v6 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      v14 = *(unsigned __int16 *)(v7 + 4 * (unsigned __int16)v9 + 2) << 16;
      for (i = (unsigned int *)(*v4 + 24 * *(unsigned __int16 *)(v7 + 4 * (unsigned __int16)v9) + 8);
            ;
            i = (unsigned int *)(*v4 + 24 * v11 + 8))
      {
        v16 = (unsigned __int16 *)(v6 + 2 * *i);
        do
        {
          v19 = (unsigned __int16)v11;
          result = sub_1C4854E58(a3, &v19);
          v17 = *v16++;
          v11 += v17;
        }
        while (v17);
        v11 = HIWORD(v14);
        if (HIWORD(v14))
        {
          v14 >>= 16;
        }
        else
        {
          if (!*v8)
            return result;
          v9 += (unsigned __int16)*v8++;
          v18 = (unsigned __int16 *)(v4[5] + 4 * (unsigned __int16)v9);
          v11 = *v18;
          v14 = v18[1] << 16;
        }
        v6 = v4[6];
      }
    }
    v13 = (unsigned __int16)*v8++;
    v9 += v13;
  }
  while (v13);
  return result;
}

uint64_t sub_1C50738F8(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C507390C()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6CCA);
  *result = &off_1E813FF98;
  return result;
}

void sub_1C507394C(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C50739E0(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5073A6C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBranchProbabilityInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::ProfileSummaryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::TargetPassConfig::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C5073AE0(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v4;
  void **v6;
  void *v7;
  uint64_t v8;
  BOOL v9;
  void **v10;
  void *v11;
  uint64_t v12;
  void **v13;
  void *v14;
  uint64_t v15;
  void **v16;
  void *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD v26[6];
  int v27;
  _QWORD v28[4];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  __int128 v38;
  _QWORD v39[3];
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, *(const llvm::Function **)a2) & 1) == 0)
  {
    v6 = (void **)**((_QWORD **)a1 + 1);
    do
    {
      v7 = *v6;
      v6 += 2;
    }
    while (v7 != &llvm::TargetPassConfig::ID);
    v8 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::TargetPassConfig::ID);
    v9 = (*(_BYTE *)(*(_QWORD *)(a2 + 8) + 592) & 1) == 0 && *(_BYTE *)(v8 + 130) != 0;
    v10 = (void **)**((_QWORD **)a1 + 1);
    do
    {
      v11 = *v10;
      v10 += 2;
    }
    while (v11 != &llvm::MachineBlockFrequencyInfo::ID);
    v12 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::MachineBlockFrequencyInfo::ID);
    v23 = 0;
    v24 = 0;
    v22 = v12;
    v25 = 0;
    v13 = (void **)**((_QWORD **)a1 + 1);
    do
    {
      v14 = *v13;
      v13 += 2;
    }
    while (v14 != &llvm::MachineBranchProbabilityInfo::ID);
    v15 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::MachineBranchProbabilityInfo::ID);
    v16 = (void **)**((_QWORD **)a1 + 1);
    do
    {
      v17 = *v16;
      v16 += 2;
    }
    while (v17 != &llvm::ProfileSummaryInfoWrapperPass::ID);
    v18 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), &llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
    memset(v26, 0, 24);
    v26[3] = v28;
    v26[4] = v28;
    v26[5] = 2;
    v27 = 0;
    v28[2] = 0;
    v28[3] = 0;
    v29 = 0;
    v31 = 0;
    v32 = 0;
    v30 = 0;
    v19 = 1;
    v34 = 1;
    v36 = 0;
    v37 = v39;
    v38 = xmmword_1C6464ED0;
    v39[2] = 0;
    v40 = 0;
    v41 = &v22;
    v42 = v15;
    v43 = v18;
    v35 = dword_1ED7F5100;
    if (dword_1ED7F4F80 == 2)
    {
      v19 = 0;
    }
    else if (dword_1ED7F4F80 != 1)
    {
      if (dword_1ED7F4F80)
      {
LABEL_21:
        v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
        v4 = sub_1C506F920((uint64_t)v26, (const llvm::MachineFunction *)a2, v20, v21, 0, 0);
        sub_1C61D8C9C((uint64_t)v26);
        MEMORY[0x1CAA32FB4](v23, 8);
        return v4;
      }
      v19 = v9;
    }
    v33 = v19;
    goto LABEL_21;
  }
  return 0;
}

uint64_t sub_1C5073D54(_QWORD *a1)
{
  uint64_t result;
  unint64_t v2;
  unint64_t v3;
  __int16 v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int16 v12;

  if (a1[11] != a1[12])
    return 0;
  v2 = a1[6] & 0xFFFFFFFFFFFFFFF8;
  if (a1 + 6 == (_QWORD *)v2)
    return 1;
  if (!v2)
  {
    v3 = 0;
LABEL_10:
    while (1)
    {
      v4 = *(_WORD *)(v3 + 44);
      if ((v4 & 4) == 0)
        break;
      v3 = *(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8;
    }
    goto LABEL_11;
  }
  v3 = a1[6] & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)v2 & 4) == 0)
    goto LABEL_10;
  v4 = *(_WORD *)(v2 + 44);
  v3 = a1[6] & 0xFFFFFFFFFFFFFFF8;
LABEL_11:
  v5 = v4 & 0xC;
  v6 = v4 & 4;
  v7 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8);
  if (v5)
    v8 = v6 == 0;
  else
    v8 = 0;
  if (v8)
  {
    if ((v7 & 0x20) == 0)
    {
      result = 0;
      while ((*(_WORD *)(v3 + 44) & 8) != 0)
      {
        v3 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v3 + 16) + 8) & 0x20) != 0)
          return result;
      }
      goto LABEL_16;
    }
    return 0;
  }
  if ((v7 & 0x20) != 0)
    return 0;
LABEL_16:
  if (v2 && (*(_BYTE *)v2 & 4) != 0)
  {
    v9 = *(unsigned __int16 *)(v2 + 44);
  }
  else
  {
    while (1)
    {
      v9 = *(unsigned __int16 *)(v2 + 44);
      if ((v9 & 4) == 0)
        break;
      v2 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  v8 = (v9 & 0xC) == 0;
  v10 = (v9 >> 2) & 1;
  if (v8)
    v11 = 1;
  else
    v11 = v10;
  if ((*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) & 0x800) != 0)
    result = 0;
  else
    result = v11;
  if ((v11 & 1) == 0 && (*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) & 0x800) == 0)
  {
    do
    {
      v12 = *(_WORD *)(v2 + 44);
      result = (v12 & 8) == 0;
      if ((v12 & 8) == 0)
        break;
      v2 = *(_QWORD *)(v2 + 8);
    }
    while ((*(_BYTE *)(*(_QWORD *)(v2 + 16) + 9) & 8) == 0);
  }
  return result;
}

unint64_t sub_1C5073E64(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a2 + 56);
  if (v2 == result)
    return a2 + 48;
  while (1)
  {
    result = *(_QWORD *)result & 0xFFFFFFFFFFFFFFF8;
    if (!result || (*(_BYTE *)result & 4) == 0)
    {
      while ((*(_WORD *)(result + 44) & 4) != 0)
        result = *(_QWORD *)result & 0xFFFFFFFFFFFFFFF8;
    }
    v3 = **(unsigned __int16 **)(result + 16);
    if ((v3 - 13) >= 5 && v3 != 3)
      break;
    if (result == v2)
      return a2 + 48;
  }
  return result;
}

uint64_t sub_1C5073EC0(uint64_t a1, int a2)
{
  unsigned __int16 *v2;
  _BOOL8 v4;

  v2 = *(unsigned __int16 **)(a1 + 16);
  if (*v2 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) & 8) != 0)
    return 1;
  if (a2)
  {
    if ((*(_WORD *)(a1 + 44) & 0xC) != 0 && (*(_WORD *)(a1 + 44) & 4) == 0)
    {
      v4 = a2 == 2;
      while (1)
      {
        if ((v2[5] & 8) != 0)
        {
          if (a2 == 1)
            return 1;
        }
        else if (a2 == 2 && *v2 != 20)
        {
          return 0;
        }
        if ((*(_WORD *)(a1 + 44) & 8) == 0)
          return v4;
        a1 = *(_QWORD *)(a1 + 8);
        v2 = *(unsigned __int16 **)(a1 + 16);
      }
    }
  }
  return (*((unsigned __int8 *)v2 + 10) >> 3) & 1;
}

uint64_t sub_1C5073F60(uint64_t a1, int a2)
{
  unsigned __int16 *v2;
  _BOOL8 v4;

  v2 = *(unsigned __int16 **)(a1 + 16);
  if (*v2 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) & 0x10) != 0)
    return 1;
  if (a2)
  {
    if ((*(_WORD *)(a1 + 44) & 0xC) != 0 && (*(_WORD *)(a1 + 44) & 4) == 0)
    {
      v4 = a2 == 2;
      while (1)
      {
        if ((v2[5] & 0x10) != 0)
        {
          if (a2 == 1)
            return 1;
        }
        else if (a2 == 2 && *v2 != 20)
        {
          return 0;
        }
        if ((*(_WORD *)(a1 + 44) & 8) == 0)
          return v4;
        a1 = *(_QWORD *)(a1 + 8);
        v2 = *(unsigned __int16 **)(a1 + 16);
      }
    }
  }
  return (*((unsigned __int8 *)v2 + 10) >> 4) & 1;
}

void *sub_1C5074000(size_t a1, size_t a2)
{
  void *result;

  result = malloc_type_calloc(a1, a2, 0x6D9A4F0CuLL);
  if (!result && (a1 && a2 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  return result;
}

uint64_t sub_1C5074060(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)a1 > *(_DWORD *)a2)
    return 1;
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v4 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 24);
  if (v3 >= v4)
    return v4 < v3;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1C50740A8()
{
  int v1;
  int v2;
  int *v3;
  __int128 v4;

  *(_QWORD *)&v4 = &v3;
  v2 = 1;
  LODWORD(v3) = 0;
  sub_1C61D8D64((int **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C506F830, &qword_1ED7F4F00, &dword_1C475E000);
  *(_QWORD *)&v4 = "Max number of predecessors to consider tail merging";
  *((_QWORD *)&v4 + 1) = 51;
  v1 = 1;
  v2 = 150;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED7F4FC0, "tail-merge-threshold", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F4FC0, &dword_1C475E000);
  *(_QWORD *)&v4 = "Min number of instructions to consider tail merging";
  *((_QWORD *)&v4 + 1) = 51;
  v1 = 1;
  v2 = 3;
  v3 = &v2;
  sub_1C61D8F84(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7F5080, &dword_1C475E000);
}

uint64_t sub_1C50741B0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Branch relaxation pass";
  *(_QWORD *)(v2 + 8) = 22;
  *(_QWORD *)(v2 + 16) = "branch-relaxation";
  *(_QWORD *)(v2 + 24) = 17;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFC20;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5074300;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

llvm::raw_ostream *sub_1C5074240(llvm::raw_ostream *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm::raw_ostream *v4;
  unsigned int *v5;
  llvm *v6;
  uint64_t v7;
  unint64_t v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD v12[3];

  v1 = *((_QWORD *)result + 58);
  v2 = v1 + 320;
  v3 = *(_QWORD *)(v1 + 328);
  if (v3 != v1 + 320)
  {
    v4 = result;
    do
    {
      v5 = (unsigned int *)(*((_QWORD *)v4 + 31) + 8 * *(int *)(v3 + 24));
      v6 = llvm::dbgs(result);
      v7 = *(unsigned int *)(v3 + 24);
      v12[0] = &off_1E81401D8;
      v8 = v7 | ((unint64_t)*v5 << 32);
      v12[1] = "%%bb.%u\toffset=%08x\t";
      v12[2] = v8;
      v9 = llvm::raw_ostream::operator<<(v6, (uint64_t)v12);
      v11[0] = &off_1E8132728;
      v10 = v5[1];
      v11[1] = "size=%#x\n";
      v11[2] = v10;
      result = llvm::raw_ostream::operator<<(v9, (uint64_t)v11);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return result;
}

double sub_1C5074300()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8EFC20);
  *(_QWORD *)v1 = &off_1E8140118;
  *(_QWORD *)(v1 + 248) = v1 + 264;
  *(_QWORD *)(v1 + 256) = 0x1000000000;
  *(_QWORD *)(v1 + 392) = 0;
  *(_QWORD *)(v1 + 400) = 0;
  *(_QWORD *)(v1 + 408) = v1 + 432;
  result = 0.0;
  *(_OWORD *)(v1 + 416) = xmmword_1C6464ED0;
  *(_QWORD *)(v1 + 448) = 0;
  *(_DWORD *)(v1 + 456) = 0;
  return result;
}

void sub_1C5074374(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  *(_QWORD *)a1 = &off_1E8140118;
  free(*(void **)(a1 + 448));
  v2 = *(void **)(a1 + 408);
  if (v2 != (void *)(a1 + 432))
    free(v2);
  v3 = *(_QWORD **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  if (v3)
  {
    v4 = (_QWORD *)v3[40];
    if (v4 != v3 + 42)
    {
      v13 = v3;
      free(v4);
      v3 = v13;
    }
    v5 = (_QWORD *)v3[31];
    if (v5 != v3 + 33)
    {
      v14 = v3;
      free(v5);
      v3 = v14;
    }
    v6 = (_QWORD *)v3[22];
    if (v6 != v3 + 24)
    {
      v15 = v3;
      free(v6);
      v3 = v15;
    }
    v7 = (_QWORD *)v3[13];
    if (v7 != v3 + 15)
    {
      v16 = v3;
      free(v7);
      v3 = v16;
    }
    v8 = (_QWORD *)v3[6];
    if (v8 != v3 + 8)
      free(v8);
    MEMORY[0x1CAA32FC0]();
  }
  v9 = *(void **)(a1 + 248);
  if (v9 != (void *)(a1 + 264))
    free(v9);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v10 = *(void **)(a1 + 176);
  if (v10 != (void *)(a1 + 192))
    free(v10);
  v11 = *(void **)(a1 + 104);
  if (v11 != (void *)(a1 + 120))
    free(v11);
  v12 = *(void **)(a1 + 32);
  if (v12 != (void *)(a1 + 48))
    free(v12);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C5074504(uint64_t a1)
{
  sub_1C5074374(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5074528()
{
  return "Branch relaxation pass";
}

uint64_t sub_1C5074538(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::MachineBasicBlock *v20;
  llvm::MachineBasicBlock *v21;
  uint64_t v22;
  char v23;
  uint64_t LastNonDebugInstr;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  _OWORD *v41;
  unint64_t v42;
  _OWORD *v43;
  _OWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  llvm::MachineBasicBlock *v55;
  uint64_t FallThrough;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v62;
  uint64_t v63;
  llvm::MachineBasicBlock *v64;
  const llvm::MachineBasicBlock *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t FirstTerminator;
  _QWORD *v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  llvm::MachineBasicBlock *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  __int16 v85;
  uint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  char v89;
  llvm::MachineBasicBlock *v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const llvm::MachineBasicBlock *v102;
  const llvm::LivePhysRegs *v103;
  llvm::MachineBasicBlock *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  llvm::BasicBlock *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  uint64_t v120;
  const llvm::MachineBasicBlock *v121;
  const llvm::LivePhysRegs *v122;
  const llvm::LivePhysRegs *v123;
  uint64_t v124;
  unsigned int *v126;
  llvm *v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  llvm::MachineBasicBlock *v131;
  llvm::MachineBasicBlock *v132;
  llvm::MachineBasicBlock *v133;
  unsigned int v134;
  uint64_t v135;
  _QWORD *v136;
  llvm::MachineBasicBlock *v137;
  llvm::MachineBasicBlock *v138;
  unsigned __int8 *v139;
  int v140;
  void *v141;
  uint64_t v142;
  _QWORD v143[18];

  v2 = a1;
  v143[16] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 464) = a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 480) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 176))(v3);
  *(_QWORD *)(v2 + 472) = v4;
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 424))(v4, *(_QWORD *)(v2 + 464)))
  {
    v5 = operator new();
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 208) = 0u;
    *(_OWORD *)(v5 + 224) = 0u;
    *(_OWORD *)(v5 + 240) = 0u;
    *(_OWORD *)(v5 + 256) = 0u;
    *(_OWORD *)(v5 + 272) = 0u;
    *(_OWORD *)(v5 + 288) = 0u;
    *(_OWORD *)(v5 + 304) = 0u;
    *(_OWORD *)(v5 + 320) = 0u;
    *(_OWORD *)(v5 + 336) = 0u;
    *(_OWORD *)(v5 + 352) = 0u;
    *(_OWORD *)(v5 + 368) = 0u;
    *(_QWORD *)(v5 + 384) = 0;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_QWORD *)(v5 + 48) = v5 + 64;
    *(_DWORD *)(v5 + 60) = 2;
    *(_QWORD *)(v5 + 104) = v5 + 120;
    *(_DWORD *)(v5 + 116) = 6;
    *(_QWORD *)(v5 + 176) = v5 + 192;
    *(_DWORD *)(v5 + 188) = 6;
    *(_QWORD *)(v5 + 248) = v5 + 264;
    *(_DWORD *)(v5 + 260) = 6;
    *(_QWORD *)(v5 + 320) = v5 + 336;
    *(_DWORD *)(v5 + 332) = 6;
    v6 = *(_QWORD **)(v2 + 392);
    *(_QWORD *)(v2 + 392) = v5;
    if (v6)
    {
      v7 = (_QWORD *)v6[40];
      if (v7 != v6 + 42)
        free(v7);
      v8 = (_QWORD *)v6[31];
      if (v8 != v6 + 33)
        free(v8);
      v9 = (_QWORD *)v6[22];
      if (v9 != v6 + 24)
        free(v9);
      v10 = (_QWORD *)v6[13];
      if (v10 != v6 + 15)
        free(v10);
      v11 = (_QWORD *)v6[6];
      if (v11 != v6 + 8)
        free(v11);
      MEMORY[0x1CAA32FC0](v6, 0x10E0C4069A138BFLL);
    }
  }
  llvm::MachineFunction::RenumberBlocks(*(llvm::MachineFunction **)(v2 + 464), 0);
  *(_DWORD *)(v2 + 256) = 0;
  v12 = *(_QWORD **)(v2 + 464);
  v13 = v12[14] - v12[13];
  v14 = (v13 >> 3);
  if (!(v13 >> 3))
    goto LABEL_21;
  v15 = v13 >> 3;
  if (v14 <= *(unsigned int *)(v2 + 260))
  {
    v16 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 248, v2 + 264, (v13 >> 3), 8);
    v16 = *(unsigned int *)(v2 + 256);
    if (v14 == v16)
      goto LABEL_20;
  }
  bzero((void *)(*(_QWORD *)(v2 + 248) + 8 * v16), 8 * v14 - 8 * v16);
LABEL_20:
  *(_DWORD *)(v2 + 256) = v15;
  v12 = *(_QWORD **)(v2 + 464);
LABEL_21:
  v17 = v12 + 40;
  v18 = v12[41];
  if ((_QWORD *)v18 != v12 + 40)
  {
    do
    {
      *(_DWORD *)(*(_QWORD *)(v2 + 248) + 8 * *(int *)(v18 + 24) + 4) = sub_1C50755B0(v2, v18);
      v18 = *(_QWORD *)(v18 + 8);
    }
    while ((_QWORD *)v18 != v17);
    v17 = *(_QWORD **)(*(_QWORD *)(v2 + 464) + 328);
  }
  sub_1C5075634(v2, v17[1], *((_DWORD *)v17 + 6));
  v19 = *(_QWORD *)(v2 + 464);
  v20 = (llvm::MachineBasicBlock *)(v19 + 320);
  v21 = *(llvm::MachineBasicBlock **)(v19 + 328);
  if (v21 == (llvm::MachineBasicBlock *)(v19 + 320))
  {
    LOBYTE(v22) = 0;
    goto LABEL_172;
  }
  v22 = 0;
  v126 = (unsigned int *)(v2 + 248);
  v127 = (llvm *)(v2 + 400);
  v128 = v2;
  do
  {
    v23 = 0;
    do
    {
      LastNonDebugInstr = llvm::MachineBasicBlock::getLastNonDebugInstr(v21, 1);
      if ((llvm::MachineBasicBlock *)((char *)v21 + 48) != (llvm::MachineBasicBlock *)LastNonDebugInstr)
      {
        v25 = LastNonDebugInstr;
        v136 = (_QWORD *)((char *)v21 + 48);
        if (sub_1C61D913C(LastNonDebugInstr, 1))
        {
          v26 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 480) + 232))(*(_QWORD *)(v2 + 480), v25);
          if (v26)
          {
            v27 = v26;
            v28 = sub_1C50756D0(v2, v25);
            if (((*(uint64_t (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(v2 + 480) + 224))(*(_QWORD *)(v2 + 480), **(unsigned __int16 **)(v25 + 16), *(unsigned int *)(*(_QWORD *)(v2 + 248) + 8 * *(int *)(v27 + 24)) - (unint64_t)v28) & 1) == 0)
            {
              v29 = *(_QWORD *)(v25 + 24);
              v30 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 480) + 144))(*(_QWORD *)(v2 + 480), v25);
              v31 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 480) + 232))(*(_QWORD *)(v2 + 480), v25);
              v32 = *(unsigned int *)(*(_QWORD *)(v2 + 248) + 8 * *(int *)(v31 + 24));
              v33 = sub_1C50756D0(v2, v25);
              v34 = v33;
              v35 = *(_QWORD *)(v2 + 248) + 8 * *(int *)(v29 + 24);
              *(_DWORD *)(v35 + 4) -= v30;
              v36 = v29;
              if (v29 + 48 != (*(_QWORD *)(v29 + 48) & 0xFFFFFFFFFFFFFFF8))
              {
                v129 = v33;
                v130 = v32;
                v132 = (llvm::MachineBasicBlock *)v31;
                v133 = v20;
                v134 = v22;
                v36 = sub_1C507575C(v2, v29);
                v38 = *(_QWORD *)(v29 + 88);
                v37 = *(_QWORD *)(v29 + 96);
                v131 = (llvm::MachineBasicBlock *)v29;
                v135 = v37;
                while (v38 != v37)
                {
                  v40 = *(_OWORD **)(*(_QWORD *)v38 + 152);
                  v39 = *(_OWORD **)(*(_QWORD *)v38 + 160);
                  if (v39 != v40)
                  {
                    v41 = *(_OWORD **)(v36 + 160);
                    do
                    {
                      v42 = *(_QWORD *)(v36 + 168);
                      if ((unint64_t)v41 >= v42)
                      {
                        v44 = *(_OWORD **)(v36 + 152);
                        v45 = v41 - v44;
                        v46 = v45 + 1;
                        if ((unint64_t)(v45 + 1) >> 60)
                          abort();
                        v47 = v42 - (_QWORD)v44;
                        if (v47 >> 3 > v46)
                          v46 = v47 >> 3;
                        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
                          v48 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v48 = v46;
                        if (v48)
                        {
                          if (v48 >> 60)
                            sub_1C4764EE4();
                          v49 = (char *)operator new(16 * v48);
                        }
                        else
                        {
                          v49 = 0;
                        }
                        v50 = &v49[16 * v45];
                        *(_OWORD *)v50 = *v40;
                        v51 = v50;
                        if (v41 != v44)
                        {
                          do
                          {
                            *((_OWORD *)v51 - 1) = *(v41 - 1);
                            v51 -= 16;
                            --v41;
                          }
                          while (v41 != v44);
                          v41 = *(_OWORD **)(v36 + 152);
                        }
                        v43 = v50 + 16;
                        *(_QWORD *)(v36 + 152) = v51;
                        *(_QWORD *)(v36 + 160) = v50 + 16;
                        *(_QWORD *)(v36 + 168) = &v49[16 * v48];
                        if (v41)
                          operator delete(v41);
                      }
                      else
                      {
                        *v41 = *v40;
                        v43 = v41 + 1;
                      }
                      *(_QWORD *)(v36 + 160) = v43;
                      ++v40;
                      v41 = v43;
                    }
                    while (v40 != v39);
                  }
                  v38 += 8;
                  v37 = v135;
                }
                llvm::MachineBasicBlock::sortUniqueLiveIns((llvm::MachineBasicBlock *)v36);
                v31 = (uint64_t)v132;
                llvm::MachineBasicBlock::addSuccessor((_QWORD *)v36, v132, -1);
                v29 = (uint64_t)v131;
                llvm::MachineBasicBlock::replaceSuccessor(v131, v132, (llvm::MachineBasicBlock *)v36);
                v2 = v128;
                v22 = v134;
                v20 = v133;
                v32 = v130;
                v34 = v129;
              }
              v52 = *(void **)(v25 + 56);
              v141 = v52;
              if (v52)
                llvm::MetadataTracking::track((uint64_t)&v141, (unsigned __int8 *)v52, 2);
              if ((*(_BYTE *)v25 & 4) != 0)
              {
                v53 = v25;
              }
              else
              {
                v53 = v25;
                if ((*(_WORD *)(v25 + 44) & 8) != 0)
                {
                  v53 = v25;
                  do
                    v53 = *(_QWORD *)(v53 + 8);
                  while ((*(_WORD *)(v53 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(v25 + 24) + 40, v25, *(_QWORD *)(v53 + 8));
              v54 = sub_1C507575C(v2, *(_QWORD *)(*(_QWORD *)(v2 + 464) + 320));
              (*(void (**)(_QWORD, unint64_t, uint64_t, unint64_t, void **, uint64_t, _QWORD))(**(_QWORD **)(v2 + 480) + 240))(*(_QWORD *)(v2 + 480), v36, v31, v54, &v141, v32 - v34, *(_QWORD *)(v2 + 392));
              *(_DWORD *)(*(_QWORD *)(v2 + 248) + 8 * *(int *)(v36 + 24) + 4) = sub_1C50755B0(v2, v36);
              sub_1C5075634(v2, *(_QWORD *)(v29 + 8), *(_DWORD *)(v29 + 24));
              if (v54 + 48 == (*(_QWORD *)(v54 + 48) & 0xFFFFFFFFFFFFFFF8))
              {
                v66 = *(_QWORD *)(v2 + 464) + 320;
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 32) + 104) + 8 * *(unsigned int *)(v54 + 24)) = 0;
                *(_DWORD *)(v54 + 24) = -1;
                v67 = *(_QWORD *)v54;
                v68 = *(_QWORD **)(v54 + 8);
                *v68 = *(_QWORD *)v54;
                *(_QWORD *)(v67 + 8) = v68;
                *(_QWORD *)v54 = 0;
                *(_QWORD *)(v54 + 8) = 0;
                llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v66, (llvm::MachineBasicBlock *)v54);
              }
              else
              {
                v55 = *(llvm::MachineBasicBlock **)v31;
                FallThrough = llvm::MachineBasicBlock::getFallThrough(*(llvm::MachineBasicBlock **)v31);
                if (FallThrough)
                {
                  v57 = FallThrough;
                  v58 = *(_QWORD *)(v2 + 480);
                  v139 = 0;
                  (*(void (**)(uint64_t, llvm::MachineBasicBlock *, uint64_t, _QWORD, _QWORD, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v58 + 272))(v58, v55, v57, 0, 0, 0, &v139, 0);
                  if (v139)
                    llvm::MetadataTracking::untrack((uint64_t)&v139, v139);
                  *(_DWORD *)(*(_QWORD *)(v2 + 248) + 8 * *((int *)v55 + 6) + 4) = sub_1C50755B0(v2, (uint64_t)v55);
                }
                v59 = *(uint64_t **)(v54 + 8);
                if (v31 != v54 && v59 != (uint64_t *)v31 && v59 != (uint64_t *)v54)
                {
                  v62 = *v59;
                  v63 = *(_QWORD *)v54;
                  *(_QWORD *)(v63 + 8) = v59;
                  *v59 = v63;
                  v64 = *(llvm::MachineBasicBlock **)v31;
                  *(_QWORD *)(v62 + 8) = v31;
                  *(_QWORD *)v54 = v64;
                  *((_QWORD *)v64 + 1) = v54;
                  *(_QWORD *)v31 = v62;
                }
                llvm::MachineBasicBlock::addSuccessor((_QWORD *)v54, (_QWORD *)v31, -1);
                llvm::MachineBasicBlock::replaceSuccessor((llvm::MachineBasicBlock *)v36, (llvm::MachineBasicBlock *)v31, (llvm::MachineBasicBlock *)v54);
                if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 472) + 424))(*(_QWORD *)(v2 + 472), *(_QWORD *)(v2 + 464)))
                {
                  llvm::computeLiveIns(v127, (llvm::LivePhysRegs *)v54, v65);
                  llvm::addLiveIns((llvm *)v54, v127, v123);
                }
                *(_DWORD *)(*(_QWORD *)(v2 + 248) + 8 * *(int *)(v54 + 24) + 4) = sub_1C50755B0(v2, v54);
                sub_1C5075634(v2, *((_QWORD *)v55 + 1), *((_DWORD *)v55 + 6));
              }
              if (v141)
                llvm::MetadataTracking::untrack((uint64_t)&v141, (unsigned __int8 *)v141);
              v23 = 1;
            }
          }
        }
        FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v21);
        v70 = (_QWORD *)((char *)v21 + 48);
        if (v136 != (_QWORD *)FirstTerminator)
        {
          v71 = FirstTerminator;
          while (!v71 || (*(_BYTE *)v71 & 4) == 0)
          {
            v72 = *(_WORD *)(v71 + 44);
            if ((v72 & 8) == 0)
              goto LABEL_91;
            v73 = v71;
            do
              v73 = *(_QWORD *)(v73 + 8);
            while ((*(_WORD *)(v73 + 44) & 8) != 0);
LABEL_92:
            v74 = *(_QWORD *)(v73 + 8);
            v75 = *(_QWORD *)(v71 + 16);
            v76 = *(_QWORD *)(v75 + 8);
            if ((v72 & 0xC) != 0 && (v72 & 4) == 0)
            {
              v77 = v20;
              v78 = v22;
              v79 = v2;
              v80 = v71;
              if ((v76 & 0x400) == 0)
              {
                while ((*(_WORD *)(v80 + 44) & 8) != 0)
                {
                  v80 = *(_QWORD *)(v80 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v80 + 16) + 9) & 4) != 0)
                    goto LABEL_100;
                }
LABEL_109:
                v2 = v79;
                v22 = v78;
                v20 = v77;
                goto LABEL_136;
              }
LABEL_100:
              if ((v76 & 0x100) != 0)
                goto LABEL_109;
              v81 = v71;
              while ((*(_WORD *)(v81 + 44) & 8) != 0)
              {
                v81 = *(_QWORD *)(v81 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v81 + 16) + 9) & 1) != 0)
                  goto LABEL_109;
              }
              if ((v76 & 0x800) != 0)
                goto LABEL_109;
              v82 = v71;
              while (1)
              {
                v2 = v79;
                v22 = v78;
                v20 = v77;
                v70 = (_QWORD *)((char *)v21 + 48);
                if ((*(_WORD *)(v82 + 44) & 8) == 0)
                  break;
                v82 = *(_QWORD *)(v82 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v82 + 16) + 9) & 8) != 0)
                  goto LABEL_109;
              }
            }
            else if ((*(_QWORD *)(v75 + 8) & 0xD00) != 0x400)
            {
              goto LABEL_95;
            }
            if (*(_WORD *)v75 != 33)
            {
              v83 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 480) + 232))(*(_QWORD *)(v2 + 480), v71);
              v84 = sub_1C50756D0(v2, v71);
              if (((*(uint64_t (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(v2 + 480) + 224))(*(_QWORD *)(v2 + 480), **(unsigned __int16 **)(v71 + 16), *(unsigned int *)(*(_QWORD *)(v2 + 248) + 8 * *(int *)(v83 + 24)) - (unint64_t)v84) & 1) != 0)goto LABEL_136;
              if ((_QWORD *)v74 == v136)
                goto LABEL_116;
              v85 = *(_WORD *)(v74 + 44);
              v86 = *(_QWORD *)(*(_QWORD *)(v74 + 16) + 8);
              if ((v85 & 0xC) == 0 || (v85 & 4) != 0)
              {
                if ((*(_QWORD *)(*(_QWORD *)(v74 + 16) + 8) & 0xD00) != 0x400)
                  goto LABEL_116;
LABEL_150:
                v110 = *(_QWORD *)(v74 + 24);
                v111 = *(_QWORD *)(v2 + 464);
                v112 = *(llvm::BasicBlock **)(v110 + 16);
                v113 = *(_QWORD *)(v111 + 312);
                if (v113)
                  *(_QWORD *)(v111 + 312) = *(_QWORD *)v113;
                else
                  v113 = sub_1C484358C(v111 + 128, 232, 3);
                *(_QWORD *)v113 = 0;
                *(_QWORD *)(v113 + 8) = 0;
                *(_QWORD *)(v113 + 16) = v112;
                *(_DWORD *)(v113 + 24) = -1;
                *(_QWORD *)(v113 + 48) = (v113 + 48) | 4;
                *(_QWORD *)(v113 + 56) = v113 + 48;
                *(_BYTE *)(v113 + 144) = 0;
                *(_OWORD *)(v113 + 64) = 0u;
                *(_OWORD *)(v113 + 80) = 0u;
                *(_OWORD *)(v113 + 96) = 0u;
                *(_OWORD *)(v113 + 112) = 0u;
                *(_OWORD *)(v113 + 121) = 0u;
                *(_QWORD *)(v113 + 160) = 0;
                *(_QWORD *)(v113 + 168) = 0;
                *(_QWORD *)(v113 + 152) = 0;
                *(_BYTE *)(v113 + 176) = 0;
                *(_DWORD *)(v113 + 187) = 0;
                *(_QWORD *)(v113 + 180) = 0;
                *(_QWORD *)(v113 + 192) = 0;
                *(_DWORD *)(v113 + 199) = 0;
                *(_QWORD *)(v113 + 216) = 0;
                *(_QWORD *)(v113 + 224) = 0;
                *(_QWORD *)(v113 + 208) = 0;
                *(_QWORD *)(v113 + 32) = v111;
                *(_QWORD *)(v113 + 40) = v113;
                if (v112)
                {
                  *(_QWORD *)(v113 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v112);
                  *(_QWORD *)(v113 + 144) = v114;
                }
                v115 = *(unint64_t **)(v110 + 8);
                llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(*(_QWORD *)(v2 + 464) + 320, v113);
                v116 = *v115;
                *(_QWORD *)v113 = *v115;
                *(_QWORD *)(v113 + 8) = v115;
                *(_QWORD *)(v116 + 8) = v113;
                *v115 = v113;
                v117 = (unint64_t *)(v110 + 48);
                if (v110 + 48 != v74 && v113 != v110)
                {
                  v118 = *(_QWORD *)(v113 + 40);
                  v119 = (unint64_t *)v74;
                  do
                  {
                    v119[3] = v118;
                    v119 = (unint64_t *)v119[1];
                  }
                  while (v119 != v117);
                  sub_1C4785D30((unint64_t *)(v113 + 48), (unint64_t *)v74, v117);
                }
                v120 = *(_QWORD *)(v2 + 480);
                v141 = 0;
                (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD, _QWORD, void **, _QWORD))(*(_QWORD *)v120 + 272))(v120, v110, v113, 0, 0, 0, &v141, 0);
                if (v141)
                  llvm::MetadataTracking::untrack((uint64_t)&v141, (unsigned __int8 *)v141);
                sub_1C5075864(v126, *(_QWORD *)(v2 + 248) + 8 * *(int *)(v113 + 24), 0);
                llvm::MachineBasicBlock::transferSuccessors((char *)v113, (llvm::MachineBasicBlock *)v110);
                llvm::MachineBasicBlock::addSuccessor((_QWORD *)v110, (_QWORD *)v113, -1);
                llvm::MachineBasicBlock::addSuccessor((_QWORD *)v110, (_QWORD *)v83, -1);
                llvm::MachineBasicBlock::updateTerminator((llvm::MachineBasicBlock *)v110, (llvm::MachineBasicBlock *)v113);
                *(_DWORD *)(*(_QWORD *)(v2 + 248) + 8 * *(int *)(v110 + 24) + 4) = sub_1C50755B0(v2, v110);
                *(_DWORD *)(*(_QWORD *)(v2 + 248) + 8 * *(int *)(v113 + 24) + 4) = sub_1C50755B0(v2, v113);
                sub_1C5075634(v2, *(_QWORD *)(v110 + 8), *(_DWORD *)(v110 + 24));
                if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 472) + 424))(*(_QWORD *)(v2 + 472), *(_QWORD *)(v2 + 464)))
                {
                  llvm::computeLiveIns(v127, (llvm::LivePhysRegs *)v113, v121);
                  llvm::addLiveIns((llvm *)v113, v127, v122);
                }
LABEL_135:
                v74 = llvm::MachineBasicBlock::getFirstTerminator(v21);
                v23 = 1;
LABEL_136:
                v70 = (_QWORD *)((char *)v21 + 48);
                goto LABEL_95;
              }
              v104 = v20;
              v105 = v22;
              v106 = v2;
              v107 = v74;
              if ((v86 & 0x400) != 0)
              {
LABEL_140:
                v2 = v106;
                v22 = v105;
                v20 = v104;
                if ((v86 & 0x100) == 0)
                {
                  v108 = v74;
                  while ((*(_WORD *)(v108 + 44) & 8) != 0)
                  {
                    v108 = *(_QWORD *)(v108 + 8);
                    v2 = v106;
                    v22 = v105;
                    v20 = v104;
                    if ((*(_BYTE *)(*(_QWORD *)(v108 + 16) + 9) & 1) != 0)
                      goto LABEL_116;
                  }
                  v2 = v106;
                  v22 = v105;
                  v20 = v104;
                  if ((v86 & 0x800) == 0)
                  {
                    v109 = v74;
                    while ((*(_WORD *)(v109 + 44) & 8) != 0)
                    {
                      v109 = *(_QWORD *)(v109 + 8);
                      if ((*(_BYTE *)(*(_QWORD *)(v109 + 16) + 9) & 8) != 0)
                        goto LABEL_116;
                    }
                    goto LABEL_150;
                  }
                }
              }
              else
              {
                while (1)
                {
                  v2 = v106;
                  v22 = v105;
                  v20 = v104;
                  if ((*(_WORD *)(v107 + 44) & 8) == 0)
                    break;
                  v107 = *(_QWORD *)(v107 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v107 + 16) + 9) & 4) != 0)
                    goto LABEL_140;
                }
              }
LABEL_116:
              v87 = *(unsigned __int8 **)(v71 + 56);
              v139 = v87;
              if (v87)
                llvm::MetadataTracking::track((uint64_t)&v139, v87, 2);
              v88 = *(_QWORD *)(v71 + 24);
              v137 = 0;
              v138 = 0;
              v141 = v143;
              v142 = 0x400000000;
              (*(void (**)(_QWORD, uint64_t, llvm::MachineBasicBlock **, llvm::MachineBasicBlock **, void **, _QWORD))(**(_QWORD **)(v2 + 480) + 248))(*(_QWORD *)(v2 + 480), v88, &v138, &v137, &v141, 0);
              v89 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(v2 + 480) + 728))(*(_QWORD *)(v2 + 480), &v141);
              v90 = v137;
              if ((v89 & 1) != 0)
              {
                if (!v137)
                  v137 = *(llvm::MachineBasicBlock **)(v88 + 8);
                v91 = (int *)sub_1C507575C(v2, v88);
                v92 = *(_QWORD *)(v2 + 248) + 8 * v91[6];
                v140 = 0;
                (*(void (**)(_QWORD, int *, llvm::MachineBasicBlock *, _QWORD, _QWORD, _QWORD, unsigned __int8 **, int *))(**(_QWORD **)(v2 + 480) + 272))(*(_QWORD *)(v2 + 480), v91, v138, 0, 0, 0, &v139, &v140);
                *(_DWORD *)(v92 + 4) += v140;
                llvm::MachineBasicBlock::replaceSuccessor((llvm::MachineBasicBlock *)v88, v138, (llvm::MachineBasicBlock *)v91);
                llvm::MachineBasicBlock::addSuccessor(v91, v138, -1);
                v93 = *(_QWORD *)(v2 + 248) + 8 * *(int *)(v88 + 24);
                v140 = 0;
                (*(void (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(v2 + 480) + 264))(*(_QWORD *)(v2 + 480), v88, &v140);
                *(_DWORD *)(v93 + 4) -= v140;
                v94 = *(_QWORD *)(v2 + 248) + 8 * *(int *)(v88 + 24);
                v140 = 0;
                (*(void (**)(_QWORD, uint64_t, int *, llvm::MachineBasicBlock *, void *, _QWORD, unsigned __int8 **, int *))(**(_QWORD **)(v2 + 480) + 272))(*(_QWORD *)(v2 + 480), v88, v91, v137, v141, v142, &v139, &v140);
                *(_DWORD *)(v94 + 4) += v140;
                sub_1C5075634(v2, *(_QWORD *)(v88 + 8), *(_DWORD *)(v88 + 24));
LABEL_129:
                if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 472) + 424))(*(_QWORD *)(v2 + 472), *(_QWORD *)(v2 + 464)))
                {
                  llvm::computeLiveIns(v127, (llvm::LivePhysRegs *)v91, v102);
                  llvm::addLiveIns((llvm *)v91, v127, v103);
                }
              }
              else
              {
                if (!v137)
                  goto LABEL_127;
                v95 = sub_1C50756D0(v2, v71);
                if ((*(unsigned int (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(v2 + 480) + 224))(*(_QWORD *)(v2 + 480), **(unsigned __int16 **)(v71 + 16), *(unsigned int *)(*(_QWORD *)(v2 + 248) + 8 * *((int *)v90 + 6)) - (unint64_t)v95))
                {
                  v96 = *(_QWORD *)(v2 + 248) + 8 * *(int *)(v88 + 24);
                  v140 = 0;
                  (*(void (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(v2 + 480) + 264))(*(_QWORD *)(v2 + 480), v88, &v140);
                  *(_DWORD *)(v96 + 4) -= v140;
                  v97 = *(_QWORD *)(v2 + 248) + 8 * *(int *)(v88 + 24);
                  v140 = 0;
                  (*(void (**)(_QWORD, uint64_t, llvm::MachineBasicBlock *, llvm::MachineBasicBlock *, void *, _QWORD, unsigned __int8 **, int *))(**(_QWORD **)(v2 + 480) + 272))(*(_QWORD *)(v2 + 480), v88, v137, v138, v141, v142, &v139, &v140);
                  *(_DWORD *)(v97 + 4) += v140;
                  sub_1C5075634(v2, *(_QWORD *)(v88 + 8), *(_DWORD *)(v88 + 24));
                  goto LABEL_131;
                }
                if (v137)
                {
                  v91 = (int *)sub_1C507575C(v2, v88);
                  v98 = *(_QWORD *)(v2 + 248) + 8 * v91[6];
                  v140 = 0;
                  (*(void (**)(_QWORD, int *, llvm::MachineBasicBlock *, _QWORD, _QWORD, _QWORD, unsigned __int8 **, int *))(**(_QWORD **)(v2 + 480) + 272))(*(_QWORD *)(v2 + 480), v91, v137, 0, 0, 0, &v139, &v140);
                  *(_DWORD *)(v98 + 4) += v140;
                  llvm::MachineBasicBlock::replaceSuccessor((llvm::MachineBasicBlock *)v88, v137, (llvm::MachineBasicBlock *)v91);
                  llvm::MachineBasicBlock::addSuccessor(v91, v137, -1);
                }
                else
                {
LABEL_127:
                  v91 = 0;
                }
                v99 = *(_QWORD *)(v88 + 8);
                v100 = *(_QWORD *)(v2 + 248) + 8 * *(int *)(v88 + 24);
                v140 = 0;
                (*(void (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(v2 + 480) + 264))(*(_QWORD *)(v2 + 480), v88, &v140);
                *(_DWORD *)(v100 + 4) -= v140;
                v101 = *(_QWORD *)(v2 + 248) + 8 * *(int *)(v88 + 24);
                v140 = 0;
                (*(void (**)(_QWORD, uint64_t, uint64_t, llvm::MachineBasicBlock *, void *, _QWORD, unsigned __int8 **, int *))(**(_QWORD **)(v2 + 480) + 272))(*(_QWORD *)(v2 + 480), v88, v99, v138, v141, v142, &v139, &v140);
                *(_DWORD *)(v101 + 4) += v140;
                sub_1C5075634(v2, *(_QWORD *)(v88 + 8), *(_DWORD *)(v88 + 24));
                if (v91)
                  goto LABEL_129;
              }
LABEL_131:
              if (v141 != v143)
                free(v141);
              if (v139)
                llvm::MetadataTracking::untrack((uint64_t)&v139, v139);
              goto LABEL_135;
            }
LABEL_95:
            v71 = v74;
            if (v70 == (_QWORD *)v74)
              goto LABEL_28;
          }
          v72 = *(_WORD *)(v71 + 44);
LABEL_91:
          v73 = v71;
          goto LABEL_92;
        }
      }
LABEL_28:
      v21 = (llvm::MachineBasicBlock *)*((_QWORD *)v21 + 1);
    }
    while (v21 != v20);
    if ((v23 & 1) == 0)
      break;
    v124 = *(_QWORD *)(v2 + 464);
    v20 = (llvm::MachineBasicBlock *)(v124 + 320);
    v21 = *(llvm::MachineBasicBlock **)(v124 + 328);
    v22 = 1;
  }
  while (v21 != (llvm::MachineBasicBlock *)(v124 + 320));
LABEL_172:
  *(_DWORD *)(v2 + 256) = 0;
  return v22 & 1;
}

uint64_t sub_1C50755B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;

  v2 = a2 + 48;
  v3 = *(_QWORD *)(a2 + 56);
  if (v3 == a2 + 48)
    return 0;
  v5 = 0;
  do
  {
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 480) + 144))(*(_QWORD *)(a1 + 480), v3);
    if (!v3 || (*(_BYTE *)v3 & 4) == 0)
    {
      while ((*(_WORD *)(v3 + 44) & 8) != 0)
        v3 = *(_QWORD *)(v3 + 8);
    }
    v5 += v6;
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3 != v2);
  return v5;
}

uint64_t sub_1C5075634(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_QWORD *)(result + 464) + 320;
  if (v3 != a2)
  {
    v4 = a3;
    v5 = *(_QWORD *)(result + 248);
    LODWORD(v6) = *(_DWORD *)(v5 + 8 * a3);
    do
    {
      v7 = *(unsigned int *)(a2 + 24);
      v8 = *(_DWORD *)(v5 + 8 * v4 + 4) + v6;
      v9 = *(unsigned __int8 *)(a2 + 176);
      v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 352);
      result = -(1 << v9);
      v11 = (((1 << v9) + v8 - 1) & result) + (1 << v9) + (-1 << v10);
      v6 = ((1 << v9) + v8 - 1) & result;
      if (v9 > v10)
        LODWORD(v6) = v11;
      *(_DWORD *)(v5 + 8 * v7) = v6;
      a2 = *(_QWORD *)(a2 + 8);
      v4 = v7;
    }
    while (a2 != v3);
  }
  return result;
}

uint64_t sub_1C50756D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  int v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 248) + 8 * *(int *)(v2 + 24));
  for (i = *(_QWORD *)(v2 + 56); i != a2; i = *(_QWORD *)(i + 8))
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 480) + 144))(*(_QWORD *)(a1 + 480), i);
    if (!i || (*(_BYTE *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 8) != 0)
        i = *(_QWORD *)(i + 8);
    }
    v3 = (v7 + v3);
  }
  return v3;
}

unint64_t sub_1C507575C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  llvm::BasicBlock *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 464);
  v5 = *(llvm::BasicBlock **)(a2 + 16);
  v6 = *(_QWORD *)(v4 + 312);
  if (v6)
    *(_QWORD *)(v4 + 312) = *(_QWORD *)v6;
  else
    v6 = sub_1C484358C(v4 + 128, 232, 3);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = v5;
  *(_DWORD *)(v6 + 24) = -1;
  *(_QWORD *)(v6 + 48) = (v6 + 48) | 4;
  *(_QWORD *)(v6 + 56) = v6 + 48;
  *(_BYTE *)(v6 + 144) = 0;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 121) = 0u;
  *(_QWORD *)(v6 + 160) = 0;
  *(_QWORD *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 152) = 0;
  *(_BYTE *)(v6 + 176) = 0;
  *(_DWORD *)(v6 + 187) = 0;
  *(_QWORD *)(v6 + 180) = 0;
  *(_QWORD *)(v6 + 192) = 0;
  *(_DWORD *)(v6 + 199) = 0;
  *(_QWORD *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 208) = 0;
  *(_QWORD *)(v6 + 32) = v4;
  *(_QWORD *)(v6 + 40) = v6;
  if (v5)
  {
    *(_QWORD *)(v6 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v5);
    *(_QWORD *)(v6 + 144) = v7;
  }
  v8 = *(unint64_t **)(a2 + 8);
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(*(_QWORD *)(a1 + 464) + 320, v6);
  v9 = *v8;
  *(_QWORD *)v6 = *v8;
  *(_QWORD *)(v6 + 8) = v8;
  *(_QWORD *)(v9 + 8) = v6;
  *v8 = v6;
  sub_1C5075864((unsigned int *)(a1 + 248), *(_QWORD *)(a1 + 248) + 8 * *(int *)(v6 + 24), 0);
  return v6;
}

unsigned int *sub_1C5075864(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = result;
  v5 = *(_QWORD *)result;
  v6 = result[2];
  if (*(_QWORD *)result + 8 * v6 == a2)
  {
    if (v6 >= result[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 8);
      v5 = *(_QWORD *)v4;
      v6 = v4[2];
    }
    *(_QWORD *)(v5 + 8 * v6) = a3;
    ++v4[2];
  }
  else
  {
    v7 = (a2 - v5) >> 3;
    if (v6 >= result[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 8);
      v5 = *(_QWORD *)v4;
      v6 = v4[2];
    }
    v8 = (_QWORD *)(v5 + 8 * v7);
    *(_QWORD *)(v5 + 8 * v6) = *(_QWORD *)(v5 + 8 * v6 - 8);
    v9 = v4[2];
    v10 = *(_QWORD *)v4 + 8 * v9 - 8;
    if ((_QWORD *)v10 != v8)
    {
      result = (unsigned int *)memmove(v8 + 1, v8, v10 - (_QWORD)v8);
      LODWORD(v9) = v4[2];
    }
    v4[2] = v9 + 1;
    *v8 = a3;
  }
  return result;
}

void llvm::initializeBreakFalseDepsPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8EFC28);
  if (v1 != -1)
  {
    v4[0] = sub_1C50759B8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8EFC28, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C50759B8(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeReachingDefAnalysisPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "BreakFalseDeps";
  *(_QWORD *)(v2 + 8) = 14;
  *(_QWORD *)(v2 + 16) = "break-false-deps";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &llvm::BreakFalseDeps::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::BreakFalseDeps>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createBreakFalseDeps(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5076468(v1);
}

uint64_t llvm::BreakFalseDeps::pickBestRegisterForUndef(llvm::BreakFalseDeps *this, llvm::MachineInstr *a2, unsigned int a3, unsigned int a4)
{
  uint64_t result;
  uint64_t v6;
  int *v7;
  int v8;
  BOOL v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  __int16 v19;
  uint64_t v20;
  _QWORD *v21;
  _WORD *v22;
  unsigned __int16 v23;
  char v24;
  unsigned __int16 *v25;
  int v26;
  int v27;
  char v28;
  unsigned __int16 ***v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned __int16 *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int Clearance;
  int v43;
  uint64_t v45;

  result = 0;
  v6 = *((_QWORD *)a2 + 4);
  v7 = (int *)(v6 + 32 * a3);
  v8 = *v7;
  v9 = (*v7 & 0x10000FF) == 0;
  if ((*v7 & 0xF00000) == 0)
    v9 = 0;
  if ((v8 & 0x8000000) != 0 && !v9)
  {
    v12 = v6 + 32 * a3;
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 8);
      if ((v8 & 0x1000000) != 0)
      {
        if ((v14 & 0x100000000) != 0)
          return 0;
      }
      else if ((v14 & 0x80000000) != 0)
      {
        return 0;
      }
    }
    v15 = *(_DWORD *)(v12 + 4);
    v16 = *((_QWORD *)this + 33);
    v17 = (_QWORD *)(v16 + 8);
    if (!v16)
      v17 = 0;
    v18 = *(unsigned int *)(*v17 + 24 * v15 + 16);
    v19 = v18 & 0xF;
    v21 = v17 + 5;
    v20 = v17[5];
    v22 = (_WORD *)(v21[1] + ((v18 >> 3) & 0x1FFFFFFE));
    v23 = *v22 + v19 * v15;
    do
    {
      v24 = 0;
      ++v22;
      v25 = (unsigned __int16 *)(v20 + 4 * v23);
      v26 = *v25;
      v27 = v25[1];
      while (v26)
      {
        v28 = v24;
        v24 = 1;
        v26 = v27;
        v27 = 0;
        if ((v28 & 1) != 0)
          return 0;
      }
      v23 += *v22;
    }
    while (*v22);
    v29 = (unsigned __int16 ***)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 32) + 16))(*((_QWORD *)this + 32), *((_QWORD *)a2 + 2));
    v30 = *((unsigned int *)a2 + 10);
    if ((_DWORD)v30)
    {
      v31 = 32 * v30;
      v32 = (_DWORD *)(*((_QWORD *)a2 + 4) + 4);
      while (1)
      {
        if ((*(v32 - 1) & 0x110000FF) == 0)
        {
          v33 = *v32;
          if ((v33 - 1) <= 0x3FFFFFFE
            && *v32 >> 3 < *((unsigned __int16 *)*v29 + 11)
            && ((*((unsigned __int8 *)(*v29)[1] + (v33 >> 3)) >> (v33 & 7)) & 1) != 0)
          {
            break;
          }
        }
        v32 += 8;
        v31 -= 32;
        if (!v31)
          goto LABEL_25;
      }
      v45 = 1;
      goto LABEL_44;
    }
LABEL_25:
    v34 = *((unsigned __int16 *)*v29 + 12);
    v35 = *((_QWORD *)this + 34);
    if (*((_DWORD *)this + 70) != *(_DWORD *)(v35 + 24 * *((unsigned __int16 *)*v29 + 12)))
      llvm::RegisterClassInfo::compute((uint64_t *)this + 34, v29);
    v36 = v35 + 24 * v34;
    v37 = *(unsigned int *)(v36 + 4);
    if (!(_DWORD)v37)
      return 0;
    v38 = 0;
    v39 = *(unsigned __int16 **)(v36 + 16);
    v40 = 2 * v37;
    LODWORD(v33) = v15;
    do
    {
      v41 = *v39;
      Clearance = llvm::ReachingDefAnalysis::getClearance(*((_QWORD *)this + 75), (uint64_t)a2, v41);
      if (Clearance <= a4)
        v43 = 0;
      else
        v43 = 10;
      if (Clearance <= v38)
        v43 = 11;
      else
        LODWORD(v33) = v41;
      if (v43 != 11 && v43 != 0)
        break;
      if (Clearance > v38)
        v38 = Clearance;
      ++v39;
      v40 -= 2;
    }
    while (v40);
    v45 = 0;
    result = 0;
    if ((_DWORD)v33 != v15)
    {
LABEL_44:
      llvm::MachineOperand::setReg((uint64_t)v7, v33);
      return v45;
    }
  }
  return result;
}

BOOL llvm::BreakFalseDeps::shouldBreakDependence(llvm::BreakFalseDeps *this, llvm::MachineInstr *a2, unsigned int a3, unsigned int a4)
{
  return llvm::ReachingDefAnalysis::getClearance(*((_QWORD *)this + 75), (uint64_t)a2, *(_DWORD *)(*((_QWORD *)a2 + 4) + 32 * a3 + 4)) < a4;
}

void llvm::BreakFalseDeps::processDefs(llvm::BreakFalseDeps *this, llvm::MachineInstr *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;

  v4 = *((_QWORD *)a2 + 2);
  v5 = *(unsigned __int8 *)(v4 + 4);
  v6 = *(unsigned __int16 *)(v4 + 2);
  if (v5 != v6)
  {
    do
    {
      v7 = *((_QWORD *)a2 + 4);
      v8 = v5;
      v9 = *(_DWORD *)(v7 + 32 * v5);
      if (!(_BYTE)v9)
      {
        v10 = *(_DWORD *)(v7 + 32 * v8 + 4);
        if ((v9 & 0x11000000) == 0x10000000 && v10 != 0)
        {
          v12 = (*(uint64_t (**)(_QWORD, llvm::MachineInstr *, uint64_t, _QWORD))(**((_QWORD **)this + 32)
                                                                                         + 1040))(*((_QWORD *)this + 32), a2, v8, *((_QWORD *)this + 33));
          if (v12)
          {
            v13 = v12;
            if ((llvm::BreakFalseDeps::pickBestRegisterForUndef(this, a2, v8, v12) & 1) == 0
              && llvm::ReachingDefAnalysis::getClearance(*((_QWORD *)this + 75), (uint64_t)a2, *(_DWORD *)(*((_QWORD *)a2 + 4) + 32 * v8 + 4)) < v13)
            {
              v14 = (char *)*((_QWORD *)this + 65);
              v15 = *((_QWORD *)this + 66);
              if ((unint64_t)v14 >= v15)
              {
                v17 = (char *)*((_QWORD *)this + 64);
                v18 = (v14 - v17) >> 4;
                v19 = v18 + 1;
                if ((unint64_t)(v18 + 1) >> 60)
                  abort();
                v20 = v15 - (_QWORD)v17;
                if (v20 >> 3 > v19)
                  v19 = v20 >> 3;
                if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
                  v19 = 0xFFFFFFFFFFFFFFFLL;
                v31 = v19;
                if (v19)
                {
                  if (v19 >> 60)
                    sub_1C4764EE4();
                  v21 = (char *)operator new(16 * v19);
                }
                else
                {
                  v21 = 0;
                }
                v22 = &v21[16 * v18];
                *(_QWORD *)v22 = a2;
                *((_QWORD *)v22 + 1) = v8;
                v23 = v22;
                if (v14 != v17)
                {
                  do
                  {
                    *((_OWORD *)v23 - 1) = *((_OWORD *)v14 - 1);
                    v23 -= 16;
                    v14 -= 16;
                  }
                  while (v14 != v17);
                  v14 = (char *)*((_QWORD *)this + 64);
                }
                *((_QWORD *)this + 64) = v23;
                v16 = v22 + 16;
                *((_QWORD *)this + 65) = v22 + 16;
                *((_QWORD *)this + 66) = &v21[16 * v31];
                if (v14)
                  operator delete(v14);
              }
              else
              {
                *(_QWORD *)v14 = a2;
                *((_QWORD *)v14 + 1) = v8;
                v16 = v14 + 16;
              }
              *((_QWORD *)this + 65) = v16;
            }
          }
        }
      }
      v5 = v8 + 1;
    }
    while ((_DWORD)v8 + 1 != v6);
  }
  v24 = *(_QWORD *)(**((_QWORD **)this + 31) + 112);
  if (!v24 || (*(char *)(v24 + 13) & 0x80000000) == 0)
  {
    if ((*(_BYTE *)(*((_QWORD *)a2 + 2) + 8) & 2) != 0)
    {
      v25 = *((_DWORD *)a2 + 10);
      if (!v25)
        return;
    }
    else
    {
      v25 = *(unsigned __int8 *)(v4 + 4);
      if (!*(_BYTE *)(v4 + 4))
        return;
    }
    v26 = 0;
    v27 = 0;
    v28 = v25;
    do
    {
      v29 = *((_QWORD *)a2 + 4);
      if (!*(_DWORD *)(v29 + v26) && (*(_DWORD *)(v29 + v26) & 0x1000000) != 0)
      {
        if (*(_DWORD *)(v29 + v26 + 4))
        {
          v30 = (*(uint64_t (**)(_QWORD, llvm::MachineInstr *, uint64_t, _QWORD))(**((_QWORD **)this + 32)
                                                                                         + 1032))(*((_QWORD *)this + 32), a2, v27, *((_QWORD *)this + 33));
          if (v30)
          {
            if (llvm::ReachingDefAnalysis::getClearance(*((_QWORD *)this + 75), (uint64_t)a2, *(_DWORD *)(*((_QWORD *)a2 + 4) + v26 + 4)) < v30)(*(void (**)(_QWORD, llvm::MachineInstr *, uint64_t, _QWORD))(**((_QWORD **)this + 32) + 1048))(*((_QWORD *)this + 32), a2, v27, *((_QWORD *)this + 33));
          }
        }
      }
      ++v27;
      v26 += 32;
    }
    while (v28 != v27);
  }
}

_QWORD *llvm::BreakFalseDeps::processUndefReads(_QWORD *this, llvm::MachineBasicBlock *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  const llvm::MachineInstr *v6;
  uint64_t v7;
  const llvm::MachineInstr *v8;
  uint64_t v9;
  const llvm::MachineInstr *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  if (this[64] != this[65])
  {
    v3 = this;
    v4 = *(_QWORD *)(*(_QWORD *)this[31] + 112);
    if (!v4 || (*(char *)(v4 + 13) & 0x80000000) == 0)
    {
      v5 = this[33];
      this[67] = v5;
      this[69] = 0;
      sub_1C61D8D14(this + 68, *(_DWORD *)(v5 + 16));
      this = (_QWORD *)llvm::LivePhysRegs::addLiveOutsNoPristines((llvm::LivePhysRegs *)(v3 + 67), a2);
      v7 = *((_QWORD *)a2 + 6);
      v6 = (llvm::MachineBasicBlock *)((char *)a2 + 48);
      v8 = (const llvm::MachineInstr *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v8 & 4) == 0)
      {
        while ((*((_WORD *)v8 + 22) & 4) != 0)
          v8 = (const llvm::MachineInstr *)(*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8);
      }
      if (v8 != v6)
      {
        v9 = v3[65];
        v10 = *(const llvm::MachineInstr **)(v9 - 16);
        v11 = *(unsigned int *)(v9 - 8);
        do
        {
          llvm::LivePhysRegs::removeDefs((llvm::LivePhysRegs *)(v3 + 67), v8);
          this = llvm::LivePhysRegs::addUses((llvm::LivePhysRegs *)(v3 + 67), v8);
          if (v10 == v8)
          {
            v12 = *(unsigned __int16 *)(*((_QWORD *)v10 + 4) + 32 * v11 + 4);
            v13 = *(unsigned __int8 *)(v3[73] + v12);
            v14 = v3[69];
            if (v13 >= v14)
              goto LABEL_17;
            while (1)
            {
              v15 = v13;
              if (*(unsigned __int16 *)(v3[68] + 2 * v13) == (_DWORD)v12)
                break;
              v13 += 256;
              if (v15 + 256 >= v14)
                goto LABEL_17;
            }
            if (v14 == v13)
LABEL_17:
              this = (_QWORD *)(*(uint64_t (**)(_QWORD, const llvm::MachineInstr *, uint64_t, _QWORD))(*(_QWORD *)v3[32] + 1048))(v3[32], v10, v11, v3[33]);
            v16 = v3[65];
            v3[65] = v16 - 16;
            if (v3[64] == v16 - 16)
              return this;
            v10 = *(const llvm::MachineInstr **)(v16 - 32);
            v11 = *(unsigned int *)(v16 - 24);
          }
          v8 = (const llvm::MachineInstr *)(*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8);
          if (!v8 || (*(_BYTE *)v8 & 4) == 0)
          {
            while ((*((_WORD *)v8 + 22) & 4) != 0)
              v8 = (const llvm::MachineInstr *)(*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8);
          }
        }
        while (v8 != v6);
      }
    }
  }
  return this;
}

_QWORD *llvm::BreakFalseDeps::processBasicBlock(llvm::BreakFalseDeps *this, llvm::MachineBasicBlock *a2)
{
  char *v4;
  uint64_t i;

  *((_QWORD *)this + 65) = *((_QWORD *)this + 64);
  v4 = (char *)a2 + 48;
  for (i = *((_QWORD *)a2 + 7); (char *)i != v4; i = *(_QWORD *)(i + 8))
  {
    if (**(unsigned __int16 **)(i + 16) - 13 >= 5)
      llvm::BreakFalseDeps::processDefs(this, (llvm::MachineInstr *)i);
    if ((*(_BYTE *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 8) != 0)
        i = *(_QWORD *)(i + 8);
    }
  }
  return llvm::BreakFalseDeps::processUndefReads(this, a2);
}

uint64_t llvm::BreakFalseDeps::runOnMachineFunction(llvm::BreakFalseDeps *this, llvm::MachineFunction *a2)
{
  void **v5;
  void *v6;
  llvm::MachineBasicBlock *v7;
  llvm::MachineBasicBlock *i;

  if ((llvm::FunctionPass::skipFunction(this, *(const llvm::Function **)a2) & 1) == 0)
  {
    *((_QWORD *)this + 31) = a2;
    *((_QWORD *)this + 32) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 104))(*((_QWORD *)a2 + 2));
    *((_QWORD *)this + 33) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 31) + 16) + 176))(*(_QWORD *)(*((_QWORD *)this + 31) + 16));
    v5 = (void **)**((_QWORD **)this + 1);
    do
    {
      v6 = *v5;
      v5 += 2;
    }
    while (v6 != &llvm::ReachingDefAnalysis::ID);
    *((_QWORD *)this + 75) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::ReachingDefAnalysis::ID);
    llvm::RegisterClassInfo::runOnMachineFunction((llvm::BreakFalseDeps *)((char *)this + 272), a2);
    v7 = (llvm::MachineFunction *)((char *)a2 + 320);
    for (i = (llvm::MachineBasicBlock *)*((_QWORD *)a2 + 41); i != v7; i = (llvm::MachineBasicBlock *)*((_QWORD *)i + 1))
      llvm::BreakFalseDeps::processBasicBlock(this, i);
  }
  return 0;
}

void sub_1C50762B0(uint64_t a1)
{
  sub_1C50765A4(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C50762D4(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::ReachingDefAnalysis::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

void sub_1C5076314(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 8uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

uint64_t llvm::callDefaultCtor<llvm::BreakFalseDeps>()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5076468(v0);
}

uint64_t sub_1C5076468(uint64_t a1)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  v2 = sub_1C4776848(a1, (uint64_t)&llvm::BreakFalseDeps::ID);
  *(_QWORD *)v2 = &off_1E81401F8;
  *(_QWORD *)(v2 + 272) = 0;
  *(_DWORD *)(v2 + 280) = 0;
  *(_QWORD *)(v2 + 288) = 0;
  *(_QWORD *)(v2 + 296) = 0;
  *(_QWORD *)(v2 + 304) = 0;
  *(_QWORD *)(v2 + 312) = v2 + 336;
  *(_OWORD *)(v2 + 320) = xmmword_1C6612EF0;
  *(_QWORD *)(v2 + 344) = v2 + 360;
  *(_QWORD *)(v2 + 352) = 0x600000000;
  *(_DWORD *)(v2 + 408) = 0;
  *(_QWORD *)(v2 + 416) = v2 + 432;
  *(_QWORD *)(v2 + 424) = 0x600000000;
  *(_DWORD *)(v2 + 480) = 0;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_QWORD *)(v2 + 536) = 0;
  *(_QWORD *)(v2 + 544) = v2 + 568;
  *(_QWORD *)(v2 + 552) = 0;
  *(_QWORD *)(v2 + 560) = 8;
  *(_QWORD *)(v2 + 584) = 0;
  *(_DWORD *)(v2 + 592) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1EF8EFC28);
  if (v4 != -1)
  {
    v8[0] = sub_1C50759B8;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1EF8EFC28, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C50765A4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &off_1E81401F8;
  free(*(void **)(a1 + 584));
  v2 = *(void **)(a1 + 544);
  if (v2 != (void *)(a1 + 568))
    free(v2);
  v3 = *(void **)(a1 + 512);
  if (v3)
  {
    *(_QWORD *)(a1 + 520) = v3;
    operator delete(v3);
  }
  sub_1C61D92E0((uint64_t *)(a1 + 272));
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v4 = *(void **)(a1 + 176);
  if (v4 != (void *)(a1 + 192))
    free(v4);
  v5 = *(void **)(a1 + 104);
  if (v5 != (void *)(a1 + 120))
    free(v5);
  v6 = *(void **)(a1 + 32);
  if (v6 != (void *)(a1 + 48))
    free(v6);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C507665C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3 = a2 - 8;
    v2 = *(_QWORD *)(a2 - 8);
    if (v2)
    {
      v4 = 24 * v2;
      do
      {
        v5 = *(_QWORD *)(v3 + v4);
        *(_QWORD *)(v3 + v4) = 0;
        if (v5)
          MEMORY[0x1CAA32F9C](v5, 0x1000C80BDFB0063);
        v4 -= 24;
      }
      while (v4);
    }
    JUMPOUT(0x1CAA32F9CLL);
  }
}

uint64_t sub_1C50766D8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Prepares for basic block sections, by splitting functions into clusters of basic blocks.";
  *(_QWORD *)(v2 + 8) = 88;
  *(_QWORD *)(v2 + 16) = "bbsections-prepare";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6CD0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5076960;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::sortBasicBlocksAndUpdateBranches(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t *, uint64_t *), uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t FallThrough;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::MachineBasicBlock *v13;
  uint64_t v15;
  unsigned __int8 *v16;
  void *v17[2];
  _BYTE v18[32];
  void *v19;
  uint64_t v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x1E0C80C00];
  v6 = ((*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 3);
  v17[0] = v18;
  v17[1] = (void *)0x400000000;
  sub_1C4848C0C((unsigned int *)v17, v6, 0);
  v7 = a1 + 320;
  for (i = *(_QWORD *)(a1 + 328); i != v7; i = *(_QWORD *)(i + 8))
  {
    FallThrough = llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)i);
    *((_QWORD *)v17[0] + *(int *)(i + 24)) = FallThrough;
  }
  sub_1C5078038(a1 + 320, a2, a3);
  llvm::MachineFunction::assignBeginEndSections(a1);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
  v19 = v21;
  v20 = 0x400000000;
  v11 = *(_QWORD *)(a1 + 328);
  if (v11 != v7)
  {
    v12 = v10;
    do
    {
      v13 = (llvm::MachineBasicBlock *)*((_QWORD *)v17[0] + *(int *)(v11 + 24));
      if (v13)
      {
        if (*(_BYTE *)(v11 + 201) || *(_QWORD *)(v11 + 8) != (_QWORD)v13)
        {
          llvm::MachineBasicBlock::findBranchDebugLoc((llvm::MachineBasicBlock *)v11, &v16);
          (*(void (**)(uint64_t, uint64_t, llvm::MachineBasicBlock *, _QWORD, _QWORD, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v12 + 272))(v12, v11, v13, 0, 0, 0, &v16, 0);
          if (v16)
            llvm::MetadataTracking::untrack((uint64_t)&v16, v16);
        }
      }
      if (!*(_BYTE *)(v11 + 201))
      {
        LODWORD(v20) = 0;
        v15 = 0;
        v16 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t *, void **, _QWORD))(*(_QWORD *)v12 + 248))(v12, v11, &v16, &v15, &v19, 0) & 1) == 0)llvm::MachineBasicBlock::updateTerminator((llvm::MachineBasicBlock *)v11, v13);
      }
      v11 = *(_QWORD *)(v11 + 8);
    }
    while (v11 != v7);
    if (v19 != v21)
      free(v19);
  }
  if (v17[0] != v18)
    free(v17[0]);
}

uint64_t sub_1C5076960()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6CD0);
  *v1 = &off_1E81402B8;
  v1[31] = 0;
  v1[32] = 0;
  v1[33] = 0;
  v1[34] = 0x4800000000;
  v1[36] = 0;
  v1[37] = 0;
  v1[38] = 0x1800000000;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82F0B8);
  if (v3 != -1)
  {
    v7[0] = sub_1C50766D8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82F0B8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C5076A50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(_QWORD *)a1 = &off_1E81402B8;
  sub_1C61A8A20(a1 + 288);
  if (*(_DWORD *)(a1 + 268))
  {
    v2 = *(unsigned int *)(a1 + 264);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + v3);
        if (v5 != -8 && v5 != 0)
        {
          v7 = *(void **)(v5 + 8);
          if (v7 != (void *)(v5 + 24))
            free(v7);
          MEMORY[0x1CAA32FB4](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)(a1 + 256));
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v8 = *(void **)(a1 + 176);
  if (v8 != (void *)(a1 + 192))
    free(v8);
  v9 = *(void **)(a1 + 104);
  if (v9 != (void *)(a1 + 120))
    free(v9);
  v10 = *(void **)(a1 + 32);
  if (v10 != (void *)(a1 + 48))
    free(v10);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C5076B44(uint64_t a1)
{
  sub_1C5076A50(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5076B68()
{
  return "Basic Block Sections Analysis";
}

uint64_t sub_1C5076B78(uint64_t a1)
{
  const llvm::MemoryBuffer *v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  int v8;
  int v9;
  int v10;
  const char **v11;
  const char **v12;
  const char *v13;
  const char *v14;
  const char *v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  unsigned int v28;
  int v29;
  size_t v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  size_t *v43;
  char *v44;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  llvm::StringMapImpl *v59;
  unsigned __int8 *__s1;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[4];
  __int16 v64;
  _QWORD v65[4];
  __int16 v66;
  unsigned __int8 *v67;
  uint64_t v68;
  _QWORD *v69[2];
  _BYTE v70[32];
  char v71;
  unsigned int v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[4];
  __int16 v78;
  _QWORD v79[2];
  const char *v80;
  uint64_t v81;
  __int16 v82;
  _QWORD v83[2];
  const char *v84;
  __int16 v85;
  _QWORD v86[2];
  const char *v87;
  __int16 v88;
  unsigned int v89[4];
  const char *v90;
  const char *v91;
  __int16 v92;
  void **v93;
  uint64_t v94;
  _QWORD v95[2];
  __int16 v96;
  _BYTE *v97;
  uint64_t v98;
  _BYTE v99[16];
  _QWORD **v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v1 = *(const llvm::MemoryBuffer **)(a1 + 248);
  if (!v1)
    return 0;
  v75 = *(_QWORD *)(a1 + 248);
  llvm::line_iterator::line_iterator((llvm::line_iterator *)v70, v1, 1, 35);
  v69[0] = &v75;
  v69[1] = v70;
  v4 = *(_QWORD *)(a1 + 256);
  v5 = *(unsigned int *)(a1 + 264);
  v97 = v99;
  v98 = 0x400000000;
  v101 = 0;
  v102 = 0;
  v100 = &v101;
  if (!v71)
  {
LABEL_84:
    v62 = 0;
    goto LABEL_85;
  }
  v6 = 0;
  v59 = (llvm::StringMapImpl *)(a1 + 256);
  i = v4 + 8 * v5;
  v58 = (_QWORD *)(a1 + 268);
  while (1)
  {
    v8 = *v73;
    if (v8 == 64)
      goto LABEL_77;
    if (!v74)
      goto LABEL_84;
    if (v8 != 33)
      goto LABEL_84;
    v67 = v73 + 1;
    v68 = v74 - 1;
    if (v74 == 1)
      goto LABEL_84;
    if (v73[1] != 33)
    {
      v93 = (void **)v95;
      v94 = 0x400000000;
      llvm::StringRef::split((char *)&v67, (uint64_t)&v93, 47, -1, 1);
      if (v94 >= 2)
      {
        v25 = 0;
        v26 = 1;
        do
        {
          sub_1C61CE250(a1 + 288, (unsigned __int8 *)v93[v25 + 2], (size_t)v93[v25 + 3], v93);
          ++v26;
          v25 += 2;
        }
        while (v26 < v94);
      }
      v27 = (size_t)v93[1];
      __s1 = (unsigned __int8 *)*v93;
      v28 = *(_DWORD *)(a1 + 264);
      if (!v28)
      {
        *v58 = 0;
        v52 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
        if (!v52)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        v52[16] = 2;
        *(_QWORD *)(a1 + 256) = v52;
        v28 = 16;
        *(_DWORD *)(a1 + 264) = 16;
      }
      v29 = 0;
      if (v27)
      {
        v30 = v27;
        v31 = __s1;
        do
        {
          v32 = *v31++;
          v29 = 33 * v29 + v32;
          --v30;
        }
        while (v30);
      }
      v33 = *(_QWORD *)v59;
      v34 = v28 - 1;
      v35 = *(_QWORD *)v59 + 8 * v28 + 8;
      v36 = -1;
      v37 = 1;
      v38 = v29;
      while (1)
      {
        v39 = v38 & v34;
        v40 = *(_QWORD **)(v33 + 8 * v39);
        if (!v40)
          break;
        if (v40 == (_QWORD *)-8)
        {
          if (v36 == -1)
            v36 = v38 & v34;
        }
        else if (*(_DWORD *)(v35 + 4 * v39) == v29
               && v27 == *v40
               && (!v27 || !memcmp(__s1, (char *)v40 + *(unsigned int *)(a1 + 276), v27)))
        {
          goto LABEL_55;
        }
        v38 = v37 + v39;
        ++v37;
      }
      v41 = v36;
      if (v36 == -1)
      {
        v41 = v39;
        v39 = v39;
      }
      else
      {
        v39 = v36;
      }
      *(_DWORD *)(v35 + 4 * v41) = v29;
      v40 = *(_QWORD **)(v33 + 8 * v39);
LABEL_55:
      i = v33 + 8 * v39;
      if (v40 == (_QWORD *)-8)
      {
        --*(_DWORD *)(a1 + 272);
      }
      else if (v40)
      {
LABEL_57:
        LODWORD(v98) = 0;
        sub_1C47655E8((uint64_t)&v100, v101);
        v101 = 0;
        v102 = 0;
        v100 = &v101;
        if (v93 != v95)
          free(v93);
        v6 = 0;
        goto LABEL_77;
      }
      v42 = operator new(v27 + 73, (std::align_val_t)8uLL);
      v43 = v42;
      v44 = (char *)(v42 + 9);
      if (v27)
        memcpy(v42 + 9, __s1, v27);
      v44[v27] = 0;
      *v43 = v27;
      v43[1] = (size_t)(v43 + 3);
      v43[2] = 0x400000000;
      *(_QWORD *)i = v43;
      ++*(_DWORD *)v58;
      for (i = *(_QWORD *)v59 + 8 * llvm::StringMapImpl::RehashTable(v59, v39);
            !*(_QWORD *)i || *(_QWORD *)i == -8;
      goto LABEL_57;
    }
    v67 = v73 + 2;
    v68 = v74 - 2;
    if (i == *(_QWORD *)(a1 + 256) + 8 * *(unsigned int *)(a1 + 264))
      break;
    v93 = (void **)v95;
    v94 = 0x400000000;
    v9 = 1;
    llvm::StringRef::split((char *)&v67, (uint64_t)&v93, 32, -1, 1);
    if ((_DWORD)v94)
    {
      v10 = 0;
      v11 = (const char **)v93;
      v12 = (const char **)&v93[2 * v94];
LABEL_13:
      v14 = *v11;
      v13 = v11[1];
      if (v13)
      {
        v15 = 0;
        v16 = 0;
        while (1)
        {
          v17 = v15[(_QWORD)v14];
          if ((v17 - 48) >= 0xA)
          {
            if ((v17 - 97) >= 0x1A)
            {
              if ((v17 - 65) > 0x19)
                break;
              v18 = -55;
            }
            else
            {
              v18 = -87;
            }
          }
          else
          {
            v18 = -48;
          }
          v19 = v18 + v17;
          if (v19 > 9)
            break;
          v20 = 10 * v16 + v19;
          if (v16 > v20 / 0xA)
            break;
          ++v15;
          v16 = 10 * v16 + v19;
          if (v13 == v15)
          {
            v89[0] = v20;
            if ((sub_1C4854E58((uint64_t)&v97, v89) & 0x100000000) == 0)
            {
              *(_QWORD *)v89 = "Duplicate basic block id found '";
              v90 = v14;
              v91 = v13;
              v92 = 1283;
              v63[0] = v89;
              v63[2] = "'.";
              v64 = 770;
              v46 = v63;
              goto LABEL_72;
            }
            if (!v20 && v10)
            {
              v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 16))(v75);
              v78 = 1283;
              v77[2] = v47;
              v77[3] = v48;
              v79[0] = v77;
              v80 = " at line ";
              v82 = 770;
              v76 = v72;
              v77[0] = "Invalid profile ";
              v83[0] = v79;
              v84 = (const char *)&v76;
              v85 = 3330;
              v86[0] = v83;
              v87 = ": ";
              v88 = 770;
              *(_QWORD *)v89 = v86;
              v90 = "Entry BB (0) does not begin a cluster.";
              v92 = 770;
              if (!atomic_load(qword_1ED836B58))
                llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
              v50 = qword_1ED836B58[0];
              v51 = operator new();
              *(_QWORD *)v51 = off_1E81A0C88;
              llvm::Twine::str((llvm::Twine *)v89, (_QWORD *)(v51 + 8));
              v9 = 0;
              *(_QWORD *)(v51 + 32) = 3;
              *(_QWORD *)(v51 + 40) = v50;
              *(_BYTE *)(v51 + 48) = 1;
              v62 = v51;
              goto LABEL_73;
            }
            v21 = *(_QWORD *)i;
            v22 = (_QWORD *)(*(_QWORD *)i + 8);
            v23 = *(unsigned int *)(*(_QWORD *)i + 16);
            if (v23 >= *(_DWORD *)(*(_QWORD *)i + 20))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v22, v21 + 24, v23 + 1, 12);
              v24 = *(_QWORD *)(v21 + 8) + 12 * *(unsigned int *)(v21 + 16);
            }
            else
            {
              v24 = *v22 + 12 * v23;
            }
            *(_QWORD *)v24 = v20 | (unint64_t)(v6 << 32);
            *(_DWORD *)(v24 + 8) = v10++;
            ++*(_DWORD *)(v21 + 16);
            v11 += 2;
            if (v11 == v12)
            {
              v9 = 1;
              goto LABEL_73;
            }
            goto LABEL_13;
          }
        }
      }
      *(_QWORD *)v89 = "Unsigned integer expected: '";
      v90 = v14;
      v91 = v13;
      v92 = 1283;
      v65[0] = v89;
      v65[2] = "'.";
      v66 = 770;
      v46 = v65;
LABEL_72:
      sub_1C5077D00(&v62, v69, v46);
      v9 = 0;
    }
LABEL_73:
    if (v93 != v95)
      free(v93);
    if ((v9 & 1) == 0)
      goto LABEL_85;
    v6 = (v6 + v9);
LABEL_77:
    llvm::line_iterator::advance((uint64_t)v70);
    if (!v71)
      goto LABEL_84;
  }
  v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 16))(v75);
  v82 = 1283;
  v79[0] = "Invalid profile ";
  v80 = (const char *)v53;
  v81 = v54;
  v83[0] = v79;
  v84 = " at line ";
  v85 = 770;
  v77[0] = v72;
  v86[0] = v83;
  v87 = (const char *)v77;
  v88 = 3330;
  *(_QWORD *)v89 = v86;
  v90 = ": ";
  v92 = 770;
  v93 = (void **)v89;
  v95[0] = "Cluster list does not follow a function name specifier.";
  v96 = 770;
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v56 = qword_1ED836B58[0];
  v57 = operator new();
  *(_QWORD *)v57 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v93, (_QWORD *)(v57 + 8));
  *(_QWORD *)(v57 + 32) = 3;
  *(_QWORD *)(v57 + 40) = v56;
  *(_BYTE *)(v57 + 48) = 1;
  v62 = v57;
LABEL_85:
  sub_1C47655E8((uint64_t)&v100, v101);
  if (v97 != v99)
    free(v97);
  if (v62)
  {
    v61 = v62;
    llvm::report_fatal_error(&v61);
  }
  return 0;
}

void *sub_1C50773E8(llvm::MachineFunctionPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(this, a2);
}

uint64_t sub_1C50773F4(uint64_t a1, llvm::MachineFunction *this)
{
  llvm::MachineFunction *v2;
  int v3;
  uint64_t ***v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD ***v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *Name;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  size_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  size_t v39;
  int v40;
  uint64_t v41;
  char *v42;
  int v43;
  uint64_t v44;
  int v45;
  int i;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  BOOL v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v75;
  uint64_t k;
  uint64_t m;
  uint64_t v78;
  uint64_t v79;
  llvm::MachineFunction *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *j;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unsigned int *v106;
  unsigned int *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  llvm::MachineFunction *v120;
  _QWORD v122[2];
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  void *__p;
  void *v128;
  uint64_t v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  uint64_t v132[2];
  void *v133;
  _QWORD v134[19];

  v2 = this;
  v134[17] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(*((_QWORD *)this + 1) + 1044);
  if (v3 != 1 || byte_1ED82F078 == 0)
    goto LABEL_6;
  v5 = *(uint64_t ****)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 23) & 0x20) == 0)
  {
LABEL_23:
    llvm::MachineFunction::RenumberBlocks(v2, 0);
    __p = 0;
    v128 = 0;
    v129 = 0;
    goto LABEL_24;
  }
  v6 = ***v5;
  v132[0] = *(_QWORD *)this;
  v7 = *(_DWORD *)(v6 + 2496);
  if (!v7)
  {
    v102 = 0;
LABEL_151:
    v11 = sub_1C541AB24(v6 + 2480, (uint64_t)v132, v132, v102);
    v103 = v132[0];
    v11[3] = 0;
    v11[4] = 0;
    *v11 = v103;
    v11[1] = v11 + 3;
    v11[2] = 0x100000000;
    goto LABEL_19;
  }
  v8 = *(_QWORD *)(v6 + 2480);
  v9 = v7 - 1;
  v10 = v9 & ((v5 >> 4) ^ (v5 >> 9));
  v11 = (_QWORD *)(v8 + 40 * v10);
  v12 = (_QWORD ***)*v11;
  if ((uint64_t ***)*v11 != v5)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != (_QWORD ***)-4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == (_QWORD ***)-8192;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = (_QWORD *)(v8 + 40 * v10);
      v12 = (_QWORD ***)*v11;
      if ((uint64_t ***)*v11 == v5)
        goto LABEL_19;
    }
    if (v13)
      v102 = v13;
    else
      v102 = v11;
    goto LABEL_151;
  }
LABEL_19:
  v17 = *((unsigned int *)v11 + 4);
  if (!(_DWORD)v17)
    goto LABEL_23;
  v18 = (_QWORD *)(v11[1] + 8);
  v19 = 16 * v17;
  while (*((_DWORD *)v18 - 2) != 30)
  {
    v18 += 2;
    v19 -= 16;
    if (!v19)
      goto LABEL_23;
  }
  v66 = *v18;
  if (!v66)
    goto LABEL_23;
  v67 = *(unsigned int *)(v66 + 8);
  if (!(_DWORD)v67)
    goto LABEL_23;
  v68 = -8 * v67;
  do
  {
    v69 = *(_QWORD **)(*(_QWORD *)(v66 + v68) + 8);
    if (*v69 == 24)
    {
      v70 = v69[3];
      v71 = v69[4];
      v72 = v69[5];
      v73 = v70 == 0x72705F7274736E69 && v71 == 0x5F687361685F666FLL;
      if (v73 && v72 == 0x686374616D73696DLL)
        return 1;
    }
    v68 += 8;
  }
  while (v68);
LABEL_6:
  llvm::MachineFunction::RenumberBlocks(v2, 0);
  if (v3 == 2)
  {
    *((_DWORD *)v2 + 160) = 2;
    return 1;
  }
  v49 = 0;
  __p = 0;
  v128 = 0;
  v129 = 0;
  if (v3 != 1)
    goto LABEL_50;
LABEL_24:
  sub_1C61D94C8((llvm::StringMapImpl *)&v124, (uint64_t *)(a1 + 288));
  Name = llvm::Value::getName(*(llvm::Value **)v2);
  v22 = Name;
  v132[0] = (uint64_t)Name;
  v132[1] = v21;
  v23 = v125;
  v120 = v2;
  v119 = v3;
  if (v125)
  {
    v24 = 0;
    v25 = v21;
    if (v21)
    {
      v26 = v21;
      v27 = Name;
      do
      {
        v28 = *v27++;
        v24 = 33 * v24 + v28;
        --v26;
      }
      while (v26);
    }
    v29 = v125 - 1;
    v30 = v124;
    v31 = v124 + 8 * v125 + 8;
    v32 = v126;
    v33 = 1;
    v34 = v24;
    while (1)
    {
      v35 = v34 & v29;
      v36 = *(_QWORD **)(v30 + 8 * v35);
      if (v36 != (_QWORD *)-8)
      {
        if (!v36)
          goto LABEL_36;
        if (*(_DWORD *)(v31 + 4 * v35) == v24 && v25 == *v36 && (!v25 || !memcmp(v22, (char *)v36 + v32, v25)))
          break;
      }
      v34 = v33 + v35;
      ++v33;
    }
    v37 = v132;
    if ((_DWORD)v35 != -1 && (int)v35 != v23)
    {
      v83 = *(_QWORD *)(v30 + 8 * (int)v35);
      v84 = *(char **)(v83 + 8);
      v37 = (uint64_t *)(v83 + 8);
      v22 = v84;
    }
  }
  else
  {
LABEL_36:
    v37 = v132;
  }
  v38 = *(unsigned int *)(a1 + 264);
  if (!(_DWORD)v38)
    goto LABEL_130;
  v39 = v37[1];
  if (v39)
  {
    v40 = 0;
    v41 = v37[1];
    v42 = v22;
    do
    {
      v43 = *v42++;
      v40 = 33 * v40 + v43;
      --v41;
    }
    while (v41);
  }
  else
  {
    v40 = 0;
  }
  v44 = *(_QWORD *)(a1 + 256);
  v45 = 1;
  for (i = v40; ; i = v47 + v45++)
  {
    v47 = i & (v38 - 1);
    v48 = *(_QWORD **)(v44 + 8 * v47);
    if (v48 != (_QWORD *)-8)
    {
      if (!v48)
        goto LABEL_130;
      if (*(_DWORD *)(v44 + 8 * v38 + 8 + 4 * v47) == v40
        && v39 == *v48
        && (!v39 || !memcmp(v22, (char *)v48 + *(unsigned int *)(a1 + 276), v39)))
      {
        break;
      }
    }
  }
  if ((_DWORD)v47 == -1 || (v85 = (int)v47, (int)v47 == v38))
  {
LABEL_130:
    sub_1C61A8A20((uint64_t)&v124);
    return 1;
  }
  if (*(_DWORD *)(*(_QWORD *)(v44 + 8 * (int)v47) + 16))
  {
    v2 = v120;
    v86 = ((*((_QWORD *)v120 + 14) - *((_QWORD *)v120 + 13)) >> 3);
    v87 = (char *)v128;
    v88 = (uint64_t)v128 >> 4;
    if (v86 <= (uint64_t)v128 >> 4)
    {
      if (v86 >= v88)
      {
        v49 = 0;
        goto LABEL_156;
      }
      v49 = 0;
      v101 = (char *)(16 * v86);
    }
    else
    {
      if (v86 - v88 > (v129 - (uint64_t)v128) >> 4)
      {
        v89 = v129 >> 3;
        if (v129 >> 3 <= v86)
          v89 = ((*((_QWORD *)v120 + 14) - *((_QWORD *)v120 + 13)) >> 3);
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF0)
          v90 = 0xFFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90 >> 60)
          sub_1C4764EE4();
        v91 = (char *)operator new(16 * v90);
        v49 = &v91[16 * v88];
        bzero(v49, ((16 * v86 - (_QWORD)v87 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v87)
        {
          v92 = v87 - 16;
          for (j = &v87[(_QWORD)v91 - 16]; ; j -= 16)
          {
            v94 = *(_OWORD *)v92;
            v92 -= 16;
            *(_OWORD *)j = v94;
          }
        }
        __p = &v91[16 * v88];
        v128 = &v91[16 * v86];
        v129 = (uint64_t)&v91[16 * v90];
LABEL_156:
        v3 = v119;
        v104 = *(_QWORD *)(v44 + 8 * v85);
        v105 = *(_DWORD *)(v104 + 16);
        if (v105)
        {
          v106 = *(unsigned int **)(v104 + 8);
          v107 = &v106[3 * v105];
          v108 = (*((_QWORD *)v120 + 14) - *((_QWORD *)v120 + 13)) >> 3;
          do
          {
            v109 = *v106;
            if (v109 >= v108)
            {
              if (v119 == 1)
                sub_1C61A8A20((uint64_t)&v124);
              goto LABEL_142;
            }
            v110 = *(_QWORD *)(v106 + 1);
            v111 = &v49[16 * v109];
            if (!v111[12])
              v111[12] = 1;
            *(_DWORD *)v111 = v109;
            *(_QWORD *)(v111 + 4) = v110;
            v106 += 3;
          }
          while (v106 != v107);
        }
        if (v119 != 1)
          goto LABEL_50;
        goto LABEL_180;
      }
      bzero(v128, ((16 * v86 - (_QWORD)v128 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      v49 = 0;
      v101 = &v87[16 * (v86 - v88)];
    }
    v128 = v101;
    goto LABEL_156;
  }
  v49 = 0;
  v128 = 0;
  v2 = v120;
  v3 = v119;
LABEL_180:
  sub_1C61A8A20((uint64_t)&v124);
LABEL_50:
  *((_DWORD *)v2 + 160) = v3;
  v50 = (char *)v2 + 320;
  v51 = *((_QWORD *)v2 + 41);
  if ((llvm::MachineFunction *)v51 == (llvm::MachineFunction *)((char *)v2 + 320))
  {
    v65 = (char *)v2 + 320;
    goto LABEL_100;
  }
  v52 = 0;
  v53 = llvm::MBBSectionID::ColdSectionID;
  v55 = llvm::MBBSectionID::ExceptionSectionID;
  v54 = HIDWORD(llvm::MBBSectionID::ExceptionSectionID);
  v56 = llvm::MBBSectionID::ExceptionSectionID;
  v57 = 1;
LABEL_52:
  v58 = HIDWORD(v52);
  v60 = v55 == (_DWORD)v52 && v54 == HIDWORD(v52);
  do
  {
    while (1)
    {
      if (!*(_DWORD *)(*((_QWORD *)v2 + 1) + 1044) || v49 == v128)
      {
        v63 = *(unsigned int *)(v51 + 24);
      }
      else
      {
        v61 = &v49[16 * *(int *)(v51 + 24)];
        v62 = v53;
        if (!v61[12])
          goto LABEL_64;
        v63 = *((unsigned int *)v61 + 1);
      }
      v62 = v63 << 32;
LABEL_64:
      *(_QWORD *)(v51 + 192) = v62;
      if (!*(_BYTE *)(v51 + 184))
        break;
      if ((v57 & 1) != 0)
      {
        v52 = v62;
LABEL_76:
        v57 = 0;
        v51 = *(_QWORD *)(v51 + 8);
        if ((char *)v51 != v50)
          goto LABEL_52;
        v65 = (char *)*((_QWORD *)v2 + 41);
        v58 = HIDWORD(v52);
        goto LABEL_93;
      }
      v64 = v52 == v62 || v60;
      if ((v64 & 1) == 0)
      {
        v52 = v56;
        goto LABEL_76;
      }
      v51 = *(_QWORD *)(v51 + 8);
      if ((char *)v51 == v50)
      {
        v65 = (char *)*((_QWORD *)v2 + 41);
        goto LABEL_93;
      }
    }
    v51 = *(_QWORD *)(v51 + 8);
  }
  while ((char *)v51 != v50);
  v65 = (char *)*((_QWORD *)v2 + 41);
  if ((v57 & 1) != 0)
    goto LABEL_100;
LABEL_93:
  if ((_DWORD)v52 == (_DWORD)v56 && v54 == (_DWORD)v58 && v65 != v50)
  {
    do
    {
      if (v65[184])
        *((_QWORD *)v65 + 24) = v52;
      v65 = (char *)*((_QWORD *)v65 + 1);
    }
    while (v65 != v50);
    v65 = (char *)*((_QWORD *)v2 + 41);
  }
LABEL_100:
  v75 = *((_QWORD *)v65 + 24);
  v122[0] = &v123;
  v122[1] = &__p;
  v123 = v75;
  llvm::sortBasicBlocksAndUpdateBranches((uint64_t)v2, (uint64_t (*)(uint64_t, uint64_t *, uint64_t *))sub_1C5077E9C, (uint64_t)v122);
  for (k = *((_QWORD *)v2 + 41); (char *)k != v50; k = *(_QWORD *)(k + 8))
  {
    if (*(_BYTE *)(k + 200) && *(_BYTE *)(k + 184))
    {
      for (m = *(_QWORD *)(k + 56); **(_WORD **)(m + 16) != 4; m = *(_QWORD *)(m + 8))
      {
        if ((*(_BYTE *)m & 4) == 0)
        {
          while ((*(_WORD *)(m + 44) & 8) != 0)
            m = *(_QWORD *)(m + 8);
        }
      }
      v78 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 2) + 104))(*((_QWORD *)v2 + 2));
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v78 + 752))(v132);
      v79 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 2) + 104))(*((_QWORD *)v2 + 2)) + 8);
      v80 = *(llvm::MachineFunction **)(k + 32);
      v130 = 0;
      v81 = v79 + 48 * LODWORD(v132[0]);
      v82 = *((_QWORD *)v80 + 28);
      if (v82)
        *((_QWORD *)v80 + 28) = *(_QWORD *)v82;
      else
        v82 = sub_1C484358C((uint64_t)v80 + 128, 72, 3);
      v131 = 0;
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v82, v80, v81, &v131, 0);
      if (v131)
        llvm::MetadataTracking::untrack((uint64_t)&v131, v131);
      if (v130)
        llvm::MetadataTracking::untrack((uint64_t)&v130, v130);
      v95 = *(_QWORD *)(k + 40);
      *(_QWORD *)(v82 + 24) = v95;
      v96 = *(_QWORD *)(v95 + 32);
      v97 = *(unsigned int *)(v82 + 40);
      if ((_DWORD)v97)
      {
        v112 = *(_QWORD *)(v82 + 32);
        v113 = *(_QWORD *)(v96 + 40);
        v114 = 32 * v97;
        do
        {
          if (!*(_BYTE *)v112)
          {
            v115 = *(unsigned int *)(v112 + 4);
            if ((int)v115 >= 0)
              v116 = (uint64_t *)(*(_QWORD *)(v113 + 272) + 8 * v115);
            else
              v116 = (uint64_t *)(*(_QWORD *)(v113 + 24) + 16 * (v115 & 0x7FFFFFFF) + 8);
            v117 = *v116;
            if (*v116)
            {
              v118 = *(_QWORD *)(v117 + 16);
              *(_QWORD *)(v117 + 16) = v112;
              *(_QWORD *)(v112 + 16) = v118;
              if ((*(_BYTE *)(v112 + 3) & 1) != 0)
              {
                *(_QWORD *)(v112 + 24) = v117;
              }
              else
              {
                *(_QWORD *)(v112 + 24) = 0;
                v116 = (uint64_t *)(v118 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v112 + 16) = v112;
              *(_QWORD *)(v112 + 24) = 0;
            }
            *v116 = v112;
          }
          v112 += 32;
          v114 -= 32;
        }
        while (v114);
      }
      v98 = *(_QWORD *)(v96 + 728);
      if (v98)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v98 + 24))(v98, v82);
      v99 = *(_QWORD *)m & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v82 = v99 | *(_QWORD *)v82 & 7;
      *(_QWORD *)(v82 + 8) = m;
      *(_QWORD *)(v99 + 8) = v82;
      *(_QWORD *)m = *(_QWORD *)m & 7 | v82;
      if (v133 != v134)
        free(v133);
      break;
    }
  }
  v49 = (char *)__p;
LABEL_142:
  if (v49)
  {
    v128 = v49;
    operator delete(v49);
  }
  return 1;
}

void sub_1C5077D00(uint64_t *a1, _QWORD **a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a2 + 16))(**a2);
  v16 = 1283;
  v15[2] = v6;
  v15[3] = v7;
  v17[0] = v15;
  v17[2] = " at line ";
  v18 = 770;
  v14 = *((unsigned int *)a2[1] + 11);
  v15[0] = "Invalid profile ";
  v19[0] = v17;
  v19[2] = &v14;
  v20 = 3330;
  *(_QWORD *)&v21 = v19;
  *(_QWORD *)&v22 = ": ";
  LOWORD(v23) = 770;
  v8 = *((unsigned __int8 *)a3 + 32);
  if (v8 == 1)
  {
    v24 = v21;
    v25 = v22;
    v26 = v23;
  }
  else if (*((_BYTE *)a3 + 32))
  {
    v9 = (uint64_t *)*a3;
    v10 = a3[1];
    if (*((_BYTE *)a3 + 33) != 1)
    {
      LOBYTE(v8) = 2;
      v9 = a3;
    }
    *(_QWORD *)&v24 = &v21;
    *(_QWORD *)&v25 = v9;
    *((_QWORD *)&v25 + 1) = v10;
    LOBYTE(v26) = 2;
    BYTE1(v26) = v8;
  }
  else
  {
    LOWORD(v26) = 256;
  }
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v12 = qword_1ED836B58[0];
  v13 = operator new();
  *(_QWORD *)v13 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v24, (_QWORD *)(v13 + 8));
  *(_QWORD *)(v13 + 32) = 3;
  *(_QWORD *)(v13 + 40) = v12;
  *(_BYTE *)(v13 + 48) = 1;
  *a1 = v13;
}

BOOL sub_1C5077E9C(int **a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  int *v8;
  int v9;
  int v10;
  _BOOL4 v12;
  _BOOL4 v13;

  v4 = a2[48];
  v3 = a2[49];
  v6 = a3[48];
  v5 = a3[49];
  v7 = v4 == v6 && v3 == v5;
  if (v7)
  {
    if (v4)
      return a2[6] < a3[6];
    else
      return *(_DWORD *)(*(_QWORD *)a1[1] + 16 * (int)a2[6] + 8) < *(_DWORD *)(*(_QWORD *)a1[1] + 16 * (int)a3[6] + 8);
  }
  else
  {
    v8 = *a1;
    v9 = **a1;
    if (v9 == v4)
    {
      v10 = a2[49];
      if (v8[1] == v3)
        return v10 == v3;
    }
    if (v9 == v6 && v8[1] == v5)
    {
      v10 = a3[49];
      if (v9 == v4)
        return v10 == v3;
      return 0;
    }
    else
    {
      v12 = v3 < v5;
      v7 = v4 == v6;
      v13 = v4 < v6;
      if (v7)
        return v12;
      else
        return v13;
    }
  }
}

void sub_1C5077F60(const char *a1)
{
  size_t v2;
  std::string::size_type v3;
  std::string *p_dst;
  uint64_t v5;
  uint64_t v6;
  std::string __dst;

  v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v2;
  p_dst = &__dst;
  if (v2)
LABEL_8:
    memcpy(p_dst, a1, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  std::string::operator=((std::string *)&qword_1ED82EF90, &__dst);
  byte_1ED82EFC8 = 1;
  std::string::operator=((std::string *)&qword_1ED82EFB0, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

uint64_t sub_1C5078038(uint64_t result, uint64_t (*a2)(uint64_t, uint64_t *, uint64_t *), uint64_t a3)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;

  v3 = *(_QWORD **)result;
  if (*(_QWORD *)result != result)
  {
    v4 = (uint64_t *)result;
    v5 = *(uint64_t **)(result + 8);
    if (v5[1] != result)
    {
      if (v5 == (uint64_t *)result)
      {
        v21 = &v21;
        v22 = (uint64_t *)&v21;
        v10 = &v21 == (_QWORD **)result;
      }
      else
      {
        v8 = *(_QWORD *)(result + 8);
        do
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 == result)
            break;
          v5 = (uint64_t *)v5[1];
          v8 = *(_QWORD *)(v9 + 8);
        }
        while (v8 != result);
        v21 = &v21;
        v22 = (uint64_t *)&v21;
        v10 = &v21 == (_QWORD **)result;
        if (&v21 != (_QWORD **)result && v5 != (uint64_t *)result)
        {
          v10 = 0;
          v11 = (_QWORD *)*v5;
          v11[1] = result;
          *(_QWORD *)result = v11;
          v3[1] = &v21;
          *v5 = (uint64_t)&v21;
          v21 = v3;
          v22 = v5;
        }
      }
      sub_1C5078038(result, a2, a3);
      result = sub_1C5078038(&v21, a2, a3);
      if (!v10 && v21 != &v21)
      {
        v12 = v22;
        v13 = (uint64_t *)v4[1];
        if (v13 != v4)
        {
          while (1)
          {
            result = a2(a3, v12, v13);
            if ((_DWORD)result)
            {
              v14 = v12;
              do
              {
                v14 = (uint64_t *)v14[1];
                v15 = (uint64_t *)&v21;
                if (v14 == (uint64_t *)&v21)
                  break;
                result = a2(a3, v14, v13);
                v15 = v14;
              }
              while ((result & 1) != 0);
              if (v13 != v15 && v12 != v15)
              {
                v16 = *v15;
                v17 = *v12;
                *(_QWORD *)(v17 + 8) = v15;
                *v15 = v17;
                v18 = *v13;
                *(_QWORD *)(v16 + 8) = v13;
                *v12 = v18;
                *(_QWORD *)(v18 + 8) = v12;
                *v13 = v16;
              }
              if (v14 == (uint64_t *)&v21)
                return result;
            }
            else
            {
              v15 = v12;
            }
            v13 = (uint64_t *)v13[1];
            v12 = v15;
            if (v13 == v4)
              goto LABEL_27;
          }
        }
        v15 = v22;
LABEL_27:
        if (v15 != (uint64_t *)&v21)
        {
          v19 = v21;
          *(_QWORD *)(*v15 + 8) = &v21;
          v20 = *v4;
          v19[1] = v4;
          *v15 = v20;
          *(_QWORD *)(v20 + 8) = v15;
          *v4 = (uint64_t)v19;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5078224()
{
  int v1;
  char v2;
  char *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"The text prefix to use for cold basic block clusters";
  v4.n128_u64[1] = 52;
  v3 = ".text.split.";
  v1 = 1;
  sub_1C47AD050((uint64_t)&llvm::BBSectionsColdTextPrefix, 0, 0);
  qword_1ED82EF90 = 0;
  qword_1ED82EF98 = 0;
  qword_1ED82EFB8 = 0;
  unk_1ED82EFC0 = 0;
  qword_1ED82EFB0 = 0;
  byte_1ED82EFC8 = 0;
  qword_1ED82EFA0 = 0;
  unk_1ED82EFA8 = &unk_1E819E950;
  llvm::BBSectionsColdTextPrefix = (uint64_t)&unk_1E819E480;
  qword_1ED82EFD0 = (uint64_t)&unk_1E819E970;
  qword_1ED82EFD8 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED82EFF0 = (uint64_t)&qword_1ED82EFD8;
  sub_1C61D95E8((__int128 *)&v4, (const char **)&v3, &v1);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::BBSectionsColdTextPrefix);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &llvm::BBSectionsColdTextPrefix, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"This checks if there is a fdo instr. profile hash mismatch for this function";
  v4.n128_u64[1] = 76;
  v2 = 1;
  v3 = &v2;
  v1 = 1;
  sub_1C6147A00((llvm::cl::Option *)&BBSectionsDetectSourceDrift, "bbsections-detect-source-drift", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &BBSectionsDetectSourceDrift, &dword_1C475E000);
}

void llvm::VirtRegAuxInfo::calculateSpillWeightsAndHints(llvm::VirtRegAuxInfo *this)
{
  uint64_t v1;
  int v2;
  int i;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v16;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
  v2 = *(_DWORD *)(v1 + 32);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v5 = i & 0x7FFFFFFF;
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 16 * v5 + 8);
      if (v6)
      {
        while ((*(_DWORD *)v6 & 0x80000000) != 0)
        {
          v6 = *(_QWORD *)(v6 + 24);
          if (!v6)
            goto LABEL_4;
        }
        v7 = *((_QWORD *)this + 2);
        if (v5 >= *(unsigned int *)(v7 + 416) || (v8 = *(_QWORD *)(*(_QWORD *)(v7 + 408) + 8 * v5)) == 0)
        {
          v8 = sub_1C4851220(*((_QWORD *)this + 2), i | 0x80000000);
          v10 = *(_QWORD *)(v7 + 304);
          v11 = *(_QWORD *)(v7 + 248);
          v12 = *(_QWORD *)(v11 + 40);
          *(_QWORD *)v10 = v11;
          *(_QWORD *)(v10 + 8) = v12;
          *(_OWORD *)(v10 + 16) = *(_OWORD *)(v7 + 288);
          *(_QWORD *)(v10 + 32) = v7 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v10);
          *(_DWORD *)(v10 + 184) = 0;
          v13 = *(_QWORD *)(v7 + 256);
          v15 = *(_BYTE *)(v13 + 16) == 0;
          v14 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v13 + 24) + 16 * (*(_DWORD *)(v8 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                   + 34);
          v15 = v15 || v14 == 0;
          v16 = !v15;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v7 + 304), (llvm::LiveInterval *)v8, v16);
          llvm::LiveIntervals::computeDeadValues(v7, v8, 0);
        }
        v9 = llvm::VirtRegAuxInfo::weightCalcHelper(this, (llvm::LiveInterval *)v8, 0, 0);
        if (v9 >= 0.0)
          *(float *)(v8 + 116) = v9;
      }
LABEL_4:
      ;
    }
  }
}

void llvm::VirtRegAuxInfo::calculateSpillWeightAndHint(llvm::VirtRegAuxInfo *this, llvm::LiveInterval *a2)
{
  float v3;

  v3 = llvm::VirtRegAuxInfo::weightCalcHelper(this, a2, 0, 0);
  if (v3 >= 0.0)
    *((float *)a2 + 29) = v3;
}

uint64_t llvm::VirtRegAuxInfo::copyHint(llvm::VirtRegAuxInfo *this, const llvm::MachineInstr *a2, uint64_t a3, const llvm::TargetRegisterInfo *a4, const llvm::MachineRegisterInfo *a5)
{
  _DWORD *v5;
  uint64_t result;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v5 = (_DWORD *)*((_QWORD *)this + 4);
  result = v5[1];
  if ((_DWORD)result == (_DWORD)a2)
  {
    result = v5[9];
    v7 = v5 + 8;
  }
  else
  {
    v7 = v5;
    v5 += 8;
  }
  if ((_DWORD)result)
  {
    v8 = (*v5 >> 8) & 0xFFF;
    v9 = (*v7 >> 8) & 0xFFF;
    if ((result & 0x80000000) != 0)
    {
      if (v8 == v9)
        return result;
      else
        return 0;
    }
    else
    {
      v10 = *(_QWORD *)(*((_QWORD *)a4 + 3) + 16 * (a2 & 0x7FFFFFFF));
      if (v9)
      {
        v14 = a3;
        v13 = v8;
        v12 = *(_QWORD *)(*((_QWORD *)a4 + 3) + 16 * (a2 & 0x7FFFFFFF));
        result = llvm::MCRegisterInfo::getSubReg((_QWORD *)(a3 + 8), result, v9);
        v10 = v12;
        v8 = v13;
        a3 = v14;
      }
      v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((result - 1) > 0x3FFFFFFE
        || result >> 3 >= *(unsigned __int16 *)(*v11 + 22)
        || ((*(unsigned __int8 *)(*(_QWORD *)(*v11 + 8) + ((unint64_t)result >> 3)) >> (result & 7)) & 1) == 0)
      {
        if (v8)
          return llvm::MCRegisterInfo::getMatchingSuperReg((uint64_t *)(a3 + 8), result, v8, *v11);
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t llvm::VirtRegAuxInfo::isRematerializable(llvm::VirtRegAuxInfo *this, llvm::AAResults **a2, const llvm::LiveIntervals *a3, const llvm::VirtRegMap *a4, const llvm::TargetInstrInfo *a5)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  const llvm::MachineInstr *v15;
  unsigned __int16 *v16;
  int v17;
  llvm::AAResults *v18;
  _DWORD *v20;
  unint64_t v21;
  int v22;
  llvm::LiveInterval *v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;

  v5 = *((_DWORD *)this + 28);
  if (*(_DWORD *)(*((_QWORD *)a3 + 41) + 4 * (v5 & 0x7FFFFFFF)))
    v6 = *(_DWORD *)(*((_QWORD *)a3 + 41) + 4 * (v5 & 0x7FFFFFFF));
  else
    v6 = *((_DWORD *)this + 28);
  v7 = *((unsigned int *)this + 18);
  if (!(_DWORD)v7)
    return 1;
  v11 = (uint64_t *)*((_QWORD *)this + 8);
  v12 = &v11[v7];
  do
  {
    v13 = *v11;
    v14 = *(_QWORD *)(*v11 + 8);
    if (v14 < 8)
      goto LABEL_15;
    if ((v14 & 6) == 0)
      return 0;
LABEL_8:
    v15 = *(const llvm::MachineInstr **)((v14 & 0xFFFFFFFFFFFFFFF8) + 16);
    while (1)
    {
      v16 = (unsigned __int16 *)*((_QWORD *)v15 + 2);
      v17 = *v16;
      if (v17 != 19)
        break;
      v20 = (_DWORD *)*((_QWORD *)v15 + 4);
      if ((*v20 & 0xFFF00) != 0 || (v20[8] & 0xFFF00) != 0)
        goto LABEL_11;
      if (v20[1] != v5)
        return 0;
      v5 = v20[9];
      if ((v5 & 0x80000000) == 0)
        return 0;
      v21 = v5 & 0x7FFFFFFF;
      v22 = *(_DWORD *)(*((_QWORD *)a3 + 41) + 4 * v21);
      if (!v22)
        v22 = v5;
      if (v22 != v6)
        return 0;
      if (v21 >= *((unsigned int *)a2 + 104) || (v23 = (llvm::LiveInterval *)*((_QWORD *)a2[51] + v21)) == 0)
      {
        v23 = (llvm::LiveInterval *)sub_1C4851220((uint64_t)a2, v5);
        llvm::LiveIntervals::computeVirtRegInterval((llvm::LiveIntervals *)a2, v23);
        v14 = *(_QWORD *)(v13 + 8);
      }
      v24 = v14 & 0xFFFFFFFFFFFFFFF8;
      v25 = *((_DWORD *)v23 + 2);
      v26 = *(_QWORD *)v23;
      if (!v25)
      {
        v25 = 0;
LABEL_44:
        v30 = v26 + 24 * v25;
        goto LABEL_34;
      }
      v27 = *(_QWORD *)(v26 + 24 * v25 - 16);
      v28 = *(_DWORD *)(v24 + 24);
      v29 = (v27 >> 1) & 3 | *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24);
      v30 = *(_QWORD *)v23;
      v31 = *((unsigned int *)v23 + 2);
      if (v28 >= v29)
        goto LABEL_44;
      do
      {
        v32 = v31 >> 1;
        v33 = *(_QWORD *)(v30 + 24 * (v31 >> 1) + 8);
        LODWORD(v33) = (v33 >> 1) & 3 | *(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24);
        v31 -= (v31 >> 1) + 1;
        v34 = v28 >= v33;
        if (v28 >= v33)
          v35 = v32 + 1;
        else
          v35 = 0;
        v30 += 24 * v35;
        if (!v34)
          v31 = v32;
      }
      while (v31);
LABEL_34:
      v36 = v26 + 24 * v25;
      v13 = *(_QWORD *)(v30 + 16);
      v37 = *(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF8;
      v38 = v30 + 24;
      v39 = v24 == v37 && v38 == v36;
      if (!v39 && *(_QWORD *)(v13 + 8) == v24)
        v13 = 0;
      v14 = *(_QWORD *)(v13 + 8);
      if ((v14 & 6) == 0)
        return 0;
      v15 = 0;
      if (v14 > 7)
        goto LABEL_8;
    }
    if (v17 == 10)
      goto LABEL_15;
LABEL_11:
    if ((*((_BYTE *)v16 + 11) & 0x20) == 0)
      return 0;
    v18 = a2[35];
    if (((*(uint64_t (**)(const llvm::VirtRegMap *, const llvm::MachineInstr *, llvm::AAResults *, const llvm::VirtRegMap *, const llvm::TargetInstrInfo *))(*(_QWORD *)a4 + 32))(a4, v15, v18, a4, a5) & 1) == 0&& (llvm::TargetInstrInfo::isReallyTriviallyReMaterializableGeneric(a4, v15, v18) & 1) == 0)
    {
      return 0;
    }
LABEL_15:
    ++v11;
  }
  while (v11 != v12);
  return 1;
}

uint64_t llvm::VirtRegAuxInfo::isLiveAtStatepointVarArg(llvm::VirtRegAuxInfo *this, llvm::LiveInterval *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  llvm::MachineInstr *v6;
  uint64_t v8;
  int NumExplicitDefs;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 248);
  v3 = *((unsigned int *)a2 + 28);
  if ((v3 & 0x80000000) != 0)
    v4 = (uint64_t *)(*(_QWORD *)(v2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v2 + 272) + 8 * v3);
  v5 = *v4;
  if (!v5)
    return 0;
  while (1)
  {
    v6 = *(llvm::MachineInstr **)(v5 + 8);
    if (**((_WORD **)v6 + 2) == 31)
    {
      v12 = *(_QWORD *)(v5 + 8);
      v13 = v5;
      v8 = *((_QWORD *)v6 + 2);
      NumExplicitDefs = llvm::MachineInstr::getNumExplicitDefs(v6);
      v10 = *(_QWORD *)(v8 + 32);
      if (v10)
      {
        v11 = -1;
        do
          ++v11;
        while (*(_WORD *)(v10 + 2 * v11));
      }
      else
      {
        v11 = 0;
      }
      v5 = v13;
      if (v11 + NumExplicitDefs + *(_DWORD *)(*(_QWORD *)(v12 + 32) + 32 * (v11 + NumExplicitDefs + 2) + 16) + 4 <= ((unint64_t)(v13 - *(_QWORD *)(v12 + 32)) >> 5))
        break;
    }
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5)
      return 0;
  }
  return 1;
}

float llvm::VirtRegAuxInfo::weightCalcHelper(llvm::VirtRegAuxInfo *this, llvm::LiveInterval *a2, llvm::SlotIndex *a3, llvm::SlotIndex *a4)
{
  llvm::VirtRegAuxInfo *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  llvm::LiveInterval *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  float v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  __int16 v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  BOOL v53;
  int v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  _DWORD *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  BOOL v85;
  float v86;
  unsigned __int16 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  int v93;
  float v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float v101;
  float v102;
  float v103;
  uint64_t v104;
  unsigned int v105;
  unint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  _QWORD *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  BOOL v117;
  unint64_t v118;
  int v119;
  int v120;
  int v121;
  _DWORD *v122;
  unsigned int MatchingSuperReg;
  _DWORD *v124;
  int v125;
  int v126;
  float *v127;
  unsigned int v128;
  unsigned int v129;
  int v130;
  float *v131;
  int v132;
  BOOL v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  float *v138;
  int v139;
  BOOL v140;
  unsigned int v141;
  float v142;
  int v143;
  uint64_t *v144;
  uint64_t **v145;
  uint64_t **v146;
  unsigned int v147;
  float v148;
  _DWORD *v149;
  uint64_t *v150;
  uint64_t *v151;
  unint64_t v152;
  llvm::SlotIndex *v153;
  llvm::LiveInterval *v154;
  unsigned int v155;
  unsigned int v156;
  float v157;
  float *v158;
  int v159;
  BOOL v160;
  unsigned int v161;
  llvm::VirtRegAuxInfo *v162;
  llvm::SlotIndex *v163;
  llvm::LiveInterval *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int16 v168;
  unsigned __int16 *v169;
  unsigned __int16 *v170;
  int v171;
  char v172;
  uint64_t **v173;
  char v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t *v179;
  uint64_t **v180;
  _QWORD *v181;
  int v182;
  int v183;
  int v184;
  int v185;
  float v186;
  const llvm::LiveIntervals *v187;
  llvm::AAResults **v188;
  const llvm::VirtRegMap *v189;
  const llvm::TargetInstrInfo *v190;
  int isRematerializable;
  __n128 v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  _QWORD *v196;
  uint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  int v211;
  uint64_t v212;
  unsigned int v213;
  int v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v223;
  llvm::VirtRegAuxInfo *v224;
  llvm::LiveInterval *v225;
  _QWORD *v226;
  uint64_t *v227;
  llvm::SlotIndex *v228;
  _QWORD *v229;
  llvm::SlotIndex *v230;
  int v231;
  int v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t *v237;
  _QWORD v238[2];
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t **v242;
  uint64_t *v243;
  uint64_t v244;
  _BYTE *v245;
  _BYTE *v246;
  uint64_t v247;
  int v248;
  _BYTE v249[72];

  v7 = this;
  v8 = *((_QWORD *)this + 1);
  v9 = *(_QWORD **)(v8 + 40);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 176))(*(_QWORD *)(v8 + 16));
  v234 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v7 + 1) + 16) + 104))(*(_QWORD *)(*((_QWORD *)v7 + 1) + 16));
  v245 = v249;
  v246 = v249;
  v247 = 8;
  v248 = 0;
  v11 = *((_DWORD *)a2 + 28) & 0x7FFFFFFF;
  v12 = v9[26];
  v13 = v12 + 40 * v11;
  if (*(_DWORD *)(v13 + 16))
    v231 = **(_DWORD **)(v13 + 8);
  else
    v231 = 0;
  v233 = *(_DWORD *)(v12 + 40 * v11);
  v14 = INFINITY;
  v230 = a4;
  if (*((float *)a2 + 29) != INFINITY)
  {
    v15 = a2;
    v16 = *((_QWORD *)v7 + 2);
    v17 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 3) + 328) + 4 * v11);
    if (v17)
      v18 = v17;
    else
      v18 = *((_DWORD *)a2 + 28);
    if ((v18 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v16 + 416)
      || (v19 = *(_QWORD *)(*(_QWORD *)(v16 + 408) + 8 * (v18 & 0x7FFFFFFF))) == 0)
    {
      v19 = sub_1C4851220(*((_QWORD *)v7 + 2), v18);
      v217 = v10;
      v218 = *(_QWORD *)(v16 + 304);
      v219 = *(_QWORD *)(v16 + 248);
      *(_QWORD *)v218 = v219;
      *(_QWORD *)(v218 + 8) = *(_QWORD *)(v219 + 40);
      *(_OWORD *)(v218 + 16) = *(_OWORD *)(v16 + 288);
      *(_QWORD *)(v218 + 32) = v16 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v218);
      *(_DWORD *)(v218 + 184) = 0;
      v10 = v217;
      v220 = *(_QWORD *)(v16 + 256);
      v21 = *(_BYTE *)(v220 + 16) == 0;
      v221 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v220 + 24) + 16 * (*(_DWORD *)(v19 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                + 34);
      v223 = !v21 && v221 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v16 + 304), (llvm::LiveInterval *)v19, v223);
      llvm::LiveIntervals::computeDeadValues(v16, v19, 0);
    }
    v20 = *(float *)(v19 + 116);
    a4 = v230;
    a2 = v15;
    if (v20 == INFINITY)
    {
      *((_DWORD *)v15 + 29) = 2139095040;
      v14 = INFINITY;
    }
    else
    {
      v14 = *((float *)v15 + 29);
    }
  }
  if (a3)
    v21 = a4 == 0;
  else
    v21 = 1;
  v22 = !v21;
  if (v21)
  {
    v42 = 0;
    v41 = 0.0;
    goto LABEL_31;
  }
  v23 = sub_1C499C548(*(_QWORD *)(*((_QWORD *)v7 + 2) + 288), *(_QWORD *)a4);
  v24 = *(_QWORD *)(*((_QWORD *)v7 + 5) + 248);
  if (!v24)
  {
    v40 = 0;
    v33 = 0.0;
    v34 = NAN;
    goto LABEL_29;
  }
  v25 = *(_QWORD *)(v24 + 160);
  v26 = *(_DWORD *)(v24 + 176);
  v27 = v23 >> 4;
  if (!v26)
    goto LABEL_313;
  v28 = (v26 - 1) & (v27 ^ (v23 >> 9));
  v29 = *(_QWORD *)(v25 + 16 * v28);
  if (v29 != v23)
  {
    v182 = 1;
    while (v29 != -4096)
    {
      v183 = v28 + v182++;
      v28 = v183 & (v26 - 1);
      v29 = *(_QWORD *)(v25 + 16 * v28);
      if (v29 == v23)
        goto LABEL_23;
    }
    goto LABEL_313;
  }
LABEL_23:
  v30 = *(unsigned int *)(v25 + 16 * v28 + 8);
  if (v30 == 0xFFFFFFFFLL)
  {
LABEL_313:
    v31 = 0;
    goto LABEL_25;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v24 + 8) + 24 * v30 + 16);
LABEL_25:
  v32 = *(_QWORD *)(v24 + 8);
  v33 = (float)*(unint64_t *)(v32 + 16);
  v34 = (float)((float)(1.0 / v33) * (float)v31) + 0.0;
  if (!v26)
    goto LABEL_314;
  v35 = v27 ^ (v23 >> 9);
  v36 = v26 - 1;
  v37 = (v26 - 1) & v35;
  v38 = *(_QWORD *)(v25 + 16 * v37);
  if (v38 != v23)
  {
    v184 = 1;
    while (v38 != -4096)
    {
      v185 = v37 + v184++;
      v37 = v185 & v36;
      v38 = *(_QWORD *)(v25 + 16 * v37);
      if (v38 == v23)
        goto LABEL_27;
    }
    goto LABEL_314;
  }
LABEL_27:
  v39 = *(unsigned int *)(v25 + 16 * v37 + 8);
  if (v39 == 0xFFFFFFFFLL)
  {
LABEL_314:
    v40 = 0;
    goto LABEL_29;
  }
  v40 = *(_QWORD *)(v32 + 24 * v39 + 16);
LABEL_29:
  v41 = v34 + (float)((float)(1.0 / v33) * (float)v40);
  v42 = 2;
LABEL_31:
  v243 = 0;
  v244 = 0;
  v242 = &v243;
  v239 = 0;
  v240 = 0;
  v241 = 0;
  v43 = *((unsigned int *)a2 + 28);
  if ((v43 & 0x80000000) != 0)
    v44 = (uint64_t *)(v9[3] + 16 * (v43 & 0x7FFFFFFF) + 8);
  else
    v44 = (uint64_t *)(v9[34] + 8 * v43);
  v45 = *v44;
  v232 = v22;
  if (!*v44)
    goto LABEL_265;
  while ((*(_DWORD *)v45 & 0x80000000) != 0)
  {
    v45 = *(_QWORD *)(v45 + 24);
    if (!v45)
      goto LABEL_265;
  }
  v228 = a3;
  v229 = v9;
  v235 = 0;
  v46 = 0;
  v226 = (_QWORD *)v10;
  v227 = (uint64_t *)(v10 + 8);
  do
  {
    v47 = *(_QWORD *)(v45 + 8);
    do
      v45 = *(_QWORD *)(v45 + 24);
    while (v45 && ((*(_DWORD *)v45 & 0x80000000) != 0 || *(_QWORD *)(v45 + 8) == v47));
    v48 = *(_WORD *)(v47 + 44);
    v49 = v47;
    if ((v48 & 4) != 0)
    {
      do
        v49 = *(_QWORD *)v49 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v49 + 44) & 4) != 0);
    }
    v50 = v47;
    if ((v48 & 8) != 0)
    {
      do
        v50 = *(_QWORD *)(v50 + 8);
      while ((*(_WORD *)(v50 + 44) & 8) != 0);
    }
    v51 = *(_QWORD *)(v50 + 8);
    if (v49 != v51)
    {
      while (1)
      {
        v52 = **(unsigned __int16 **)(v49 + 16);
        v53 = v52 > 0x17;
        v54 = (1 << v52) & 0x83E000;
        if (v53 || v54 == 0)
          break;
        v49 = *(_QWORD *)(v49 + 8);
        if (v49 == v51)
        {
          v49 = v51;
          break;
        }
      }
    }
    v56 = *(_QWORD *)(*((_QWORD *)v7 + 2) + 288);
    v57 = *(_QWORD *)(v56 + 368);
    v58 = *(unsigned int *)(v56 + 384);
    if (!(_DWORD)v58)
      goto LABEL_61;
    LODWORD(v59) = ((v49 >> 4) ^ (v49 >> 9)) & (v58 - 1);
    v60 = (uint64_t *)(v57 + 16 * v59);
    v61 = *v60;
    if (v49 != *v60)
    {
      v62 = 1;
      while (v61 != -4096)
      {
        v63 = v59 + v62++;
        v59 = v63 & (v58 - 1);
        v61 = *(_QWORD *)(v57 + 16 * v59);
        if (v49 == v61)
        {
          v60 = (uint64_t *)(v57 + 16 * v59);
          if (!v22)
            goto LABEL_64;
          goto LABEL_62;
        }
      }
LABEL_61:
      v60 = (uint64_t *)(v57 + 16 * v58);
      if (!v22)
        goto LABEL_64;
      goto LABEL_62;
    }
    if (!v22)
      goto LABEL_64;
LABEL_62:
    v64 = (v60[1] >> 1) & 3 | *(_DWORD *)((v60[1] & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v64 < ((*(_QWORD *)a3 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) + 24))
      || v64 > ((*(_QWORD *)a4 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) + 24)))
    {
      continue;
    }
LABEL_64:
    v42 = (v42 + 1);
    v65 = **(unsigned __int16 **)(v47 + 16);
    if (v65 == 10)
      continue;
    if (v65 == 19)
    {
      v66 = *(_DWORD **)(v47 + 32);
      if (v66[1] == v66[9] && ((v66[8] ^ *v66) & 0xFFF00) == 0)
        continue;
    }
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v245, v47);
    if (!v67)
      continue;
    if (sub_1C5079C7C(v234, v47)
      && llvm::MachineInstr::findRegisterDefOperandIdx(v47, *((_DWORD *)a2 + 28), 0, 0, 0) != -1)
    {
      *((_DWORD *)a2 + 29) = 2139095040;
      v186 = -1.0;
      goto LABEL_286;
    }
    v236 = v42;
    if (v14 == INFINITY)
    {
      v86 = 1.0;
      goto LABEL_130;
    }
    v68 = *(_QWORD *)(v47 + 24);
    if (v68 != v235)
    {
      v69 = *((_QWORD *)v7 + 4);
      v70 = *(_DWORD *)(v69 + 264);
      if (!v70)
        goto LABEL_92;
      v71 = *(_QWORD *)(v69 + 248);
      v72 = v70 - 1;
      v73 = (v70 - 1) & ((v68 >> 4) ^ (v68 >> 9));
      v74 = *(_QWORD *)(v71 + 16 * v73);
      if (v68 != v74)
      {
        v75 = 1;
        while (v74 != -4096)
        {
          v76 = v73 + v75++;
          v73 = v76 & v72;
          v74 = *(_QWORD *)(v71 + 16 * v73);
          if (v68 == v74)
            goto LABEL_78;
        }
LABEL_92:
        v46 = 0;
        v235 = *(_QWORD *)(v47 + 24);
        goto LABEL_95;
      }
LABEL_78:
      v77 = *(_QWORD *)(v71 + 16 * v73 + 8);
      if (!v77 || (v78 = *(_QWORD *)(v68 + 88), v79 = *(_QWORD *)(v68 + 96), v78 == v79))
      {
        v46 = 0;
        v235 = *(_QWORD *)(v47 + 24);
      }
      else
      {
        v225 = a2;
        v80 = v78 + 8;
        do
        {
          v81 = sub_1C477672C(v77 + 56, *(_QWORD *)(v80 - 8));
          v82 = *(_QWORD *)(v77 + 64);
          if (v82 == *(_QWORD *)(v77 + 56))
            v83 = 76;
          else
            v83 = 72;
          v84 = (_QWORD *)(v82 + 8 * *(unsigned int *)(v77 + v83));
          v46 = v81 == v84;
          v85 = v81 == v84 || v80 == v79;
          v80 += 8;
        }
        while (!v85);
        v235 = v68;
        a2 = v225;
      }
      a3 = v228;
      a4 = v230;
    }
LABEL_95:
    v87 = llvm::MachineInstr::readsWritesVirtualRegister(v47, *((_DWORD *)a2 + 28), 0);
    v88 = *((_QWORD *)v7 + 5);
    v89 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 24) + 32) + 16);
    v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 176))(v89);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v90 + 336))(v90, v47);
    v92 = *(_QWORD *)(v88 + 248);
    if (v92)
    {
      v93 = *(_DWORD *)(v92 + 176);
      v94 = 0.0;
      v42 = v236;
      if (v93)
      {
        v95 = *(_QWORD *)(v47 + 24);
        v96 = *(_QWORD *)(v92 + 160);
        v97 = v93 - 1;
        v98 = (v93 - 1) & ((v95 >> 4) ^ (v95 >> 9));
        v99 = *(_QWORD *)(v96 + 16 * v98);
        if (v99 == v95)
        {
LABEL_98:
          v100 = *(unsigned int *)(v96 + 16 * v98 + 8);
          if (v100 != 0xFFFFFFFFLL)
            v94 = (float)*(unint64_t *)(*(_QWORD *)(v92 + 8) + 24 * v100 + 16);
        }
        else
        {
          v119 = 1;
          while (v99 != -4096)
          {
            v120 = v98 + v119++;
            v98 = v120 & v97;
            v99 = *(_QWORD *)(v96 + 16 * v98);
            if (v99 == v95)
              goto LABEL_98;
          }
        }
      }
      v101 = (float)*(unint64_t *)(*(_QWORD *)(v92 + 8) + 16);
    }
    else
    {
      v94 = 0.0;
      v101 = 0.0;
      v42 = v236;
    }
    if ((v87 & 0xFF00) != 0)
      v102 = 1.0;
    else
      v102 = 0.0;
    if ((_BYTE)v87)
      v103 = 1.0;
    else
      v103 = 0.0;
    v86 = (float)(v103 + (float)(v102 * v91)) * (float)(v94 * (float)(1.0 / v101));
    if (v87 > 0xFFu && v46)
    {
      v104 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 2) + 288) + 392)
                       + 16 * *(unsigned int *)(v235 + 24)
                       + 8);
      v105 = (v104 >> 1) & 3;
      v106 = v104 & 0xFFFFFFFFFFFFFFF8;
      v22 = v232;
      if (v105)
        v107 = v106 | (2 * (v105 - 1));
      else
        v107 = *(_QWORD *)v106 | 6;
      v108 = *((_DWORD *)a2 + 2);
      v109 = *(_QWORD *)a2;
      if (v108)
      {
        v110 = *(_QWORD *)(v109 + 24 * v108 - 16);
        v111 = *(_DWORD *)((v107 & 0xFFFFFFFFFFFFFFF8) + 24) | (v107 >> 1) & 3;
        v112 = (v110 >> 1) & 3 | *(_DWORD *)((v110 & 0xFFFFFFFFFFFFFFF8) + 24);
        v113 = *(_QWORD **)a2;
        v114 = *((unsigned int *)a2 + 2);
        if (v111 < v112)
        {
          do
          {
            v115 = v114 >> 1;
            v116 = v113[3 * (v114 >> 1) + 1];
            LODWORD(v116) = (v116 >> 1) & 3 | *(_DWORD *)((v116 & 0xFFFFFFFFFFFFFFF8) + 24);
            v114 -= (v114 >> 1) + 1;
            v117 = v111 >= v116;
            if (v111 >= v116)
              v118 = v115 + 1;
            else
              v118 = 0;
            v113 += 3 * v118;
            if (!v117)
              v114 = v115;
          }
          while (v114);
          goto LABEL_126;
        }
      }
      else
      {
        v108 = 0;
      }
      v113 = (_QWORD *)(v109 + 24 * v108);
LABEL_126:
      if (v113 != (_QWORD *)(v109 + 24 * v108)
        && ((*v113 >> 1) & 3 | *(_DWORD *)((*v113 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v107 & 0xFFFFFFFFFFFFFFF8) + 24) | (v107 >> 1) & 3))
      {
        v86 = v86 * 3.0;
      }
      goto LABEL_129;
    }
    v22 = v232;
LABEL_129:
    v41 = v41 + v86;
LABEL_130:
    if (**(_WORD **)(v47 + 16) != 19)
      continue;
    v121 = *((_DWORD *)a2 + 28);
    v122 = *(_DWORD **)(v47 + 32);
    MatchingSuperReg = v122[1];
    if (MatchingSuperReg == v121)
    {
      MatchingSuperReg = v122[9];
      v124 = v122 + 8;
      if (!MatchingSuperReg)
        continue;
    }
    else
    {
      v124 = v122;
      v122 += 8;
      if (!MatchingSuperReg)
        continue;
    }
    v125 = (*v122 >> 8) & 0xFFF;
    v126 = (*v124 >> 8) & 0xFFF;
    if ((MatchingSuperReg & 0x80000000) != 0)
    {
      if (v125 != v126)
        continue;
      goto LABEL_137;
    }
    v151 = (uint64_t *)(*(_QWORD *)(v229[3] + 16 * (v121 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
    if (!v126)
      goto LABEL_196;
    v162 = v7;
    v163 = a3;
    v164 = a2;
    v165 = v226[1];
    v166 = v226[7];
    v167 = *(unsigned int *)(v165 + 24 * MatchingSuperReg + 4);
    if (*(_WORD *)(v166 + 2 * v167))
    {
      v168 = *(_WORD *)(v166 + 2 * v167) + MatchingSuperReg;
      v169 = (unsigned __int16 *)(v226[11] + 2 * *(unsigned int *)(v165 + 24 * MatchingSuperReg + 12));
      v170 = (unsigned __int16 *)(v166 + 2 * v167 + 2);
      while (v126 != *v169)
      {
        MatchingSuperReg = 0;
        v171 = *v170++;
        v168 += v171;
        ++v169;
        a2 = v164;
        a3 = v163;
        a4 = v230;
        v22 = v232;
        v42 = v236;
        v7 = v162;
        if (!v171)
          goto LABEL_199;
      }
      MatchingSuperReg = v168;
      a2 = v164;
      a3 = v163;
      a4 = v230;
      v22 = v232;
      v42 = v236;
      v7 = v162;
LABEL_196:
      if (MatchingSuperReg - 1 <= 0x3FFFFFFE)
      {
        v152 = (unint64_t)MatchingSuperReg >> 3;
        if (v152 < *(unsigned __int16 *)(*v151 + 22)
          && ((*(unsigned __int8 *)(*(_QWORD *)(*v151 + 8) + v152) >> (MatchingSuperReg & 7)) & 1) != 0)
        {
          goto LABEL_137;
        }
      }
      goto LABEL_199;
    }
    MatchingSuperReg = 0;
    a4 = v230;
    v22 = v232;
    v42 = v236;
LABEL_199:
    if (!v125)
      continue;
    MatchingSuperReg = llvm::MCRegisterInfo::getMatchingSuperReg(v227, MatchingSuperReg, v125, *v151);
    if (!MatchingSuperReg)
      continue;
LABEL_137:
    LODWORD(v237) = 0;
    if (!v241)
    {
      v127 = 0;
LABEL_151:
      if (4 * (int)v240 + 4 < 3 * v241)
      {
        if (v241 + ~(_DWORD)v240 - HIDWORD(v240) <= v241 >> 3)
        {
          v224 = v7;
          v153 = a3;
          v154 = a2;
          sub_1C5079CDC((uint64_t)&v239, v241);
          if (v241)
          {
            v155 = v241 - 1;
            v156 = (v241 - 1) & (37 * MatchingSuperReg);
            v127 = (float *)(v239 + 8 * v156);
            v157 = *v127;
            if (MatchingSuperReg != *(_DWORD *)v127)
            {
              v158 = 0;
              v159 = 1;
              while (v157 != NAN)
              {
                if (v158)
                  v160 = 0;
                else
                  v160 = LODWORD(v157) == -2;
                if (v160)
                  v158 = v127;
                v161 = v156 + v159++;
                v156 = v161 & v155;
                v127 = (float *)(v239 + 8 * (v161 & v155));
                v157 = *v127;
                a2 = v154;
                a3 = v153;
                a4 = v230;
                v22 = v232;
                v7 = v224;
                if (MatchingSuperReg == *(_DWORD *)v127)
                  goto LABEL_167;
              }
              if (v158)
                v127 = v158;
            }
          }
          else
          {
            v127 = 0;
          }
          a2 = v154;
          a3 = v153;
          a4 = v230;
          v22 = v232;
          v7 = v224;
        }
      }
      else
      {
        sub_1C5079CDC((uint64_t)&v239, 2 * v241);
        if (v241)
        {
          v135 = v241 - 1;
          v136 = (v241 - 1) & (37 * MatchingSuperReg);
          v127 = (float *)(v239 + 8 * v136);
          v137 = *(_DWORD *)v127;
          if (MatchingSuperReg != *(_DWORD *)v127)
          {
            v138 = 0;
            v139 = 1;
            while (v137 != -1)
            {
              if (v138)
                v140 = 0;
              else
                v140 = v137 == -2;
              if (v140)
                v138 = v127;
              v141 = v136 + v139++;
              v136 = v141 & v135;
              v127 = (float *)(v239 + 8 * (v141 & v135));
              v137 = *(_DWORD *)v127;
              if (MatchingSuperReg == *(_DWORD *)v127)
                goto LABEL_167;
            }
            if (v138)
              v127 = v138;
          }
        }
        else
        {
          v127 = 0;
        }
      }
LABEL_167:
      LODWORD(v240) = v240 + 1;
      if (*(_DWORD *)v127 != -1)
        --HIDWORD(v240);
      *(_DWORD *)v127 = MatchingSuperReg;
      v127[1] = 0.0;
      goto LABEL_170;
    }
    v128 = v241 - 1;
    v129 = (v241 - 1) & (37 * MatchingSuperReg);
    v127 = (float *)(v239 + 8 * v129);
    v130 = *(_DWORD *)v127;
    if (MatchingSuperReg != *(_DWORD *)v127)
    {
      v131 = 0;
      v132 = 1;
      while (v130 != -1)
      {
        if (v131)
          v133 = 0;
        else
          v133 = v130 == -2;
        if (v133)
          v131 = v127;
        v134 = v129 + v132++;
        v129 = v134 & v128;
        v127 = (float *)(v239 + 8 * (v134 & v128));
        v130 = *(_DWORD *)v127;
        if (MatchingSuperReg == *(_DWORD *)v127)
          goto LABEL_170;
      }
      if (v131)
        v127 = v131;
      goto LABEL_151;
    }
LABEL_170:
    v142 = v86 + v127[1];
    v127[1] = v142;
    *(float *)&v237 = v142;
    if ((MatchingSuperReg & 0x80000000) == 0
      && (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v229 + 16) + 176))(*(_QWORD *)(*v229 + 16))
                                            + 216)
                                + 16)
                    + MatchingSuperReg)
       || ((*(_QWORD *)(v229[44] + (((unint64_t)MatchingSuperReg >> 3) & 0x1FFFFFF8)) >> MatchingSuperReg) & 1) != 0))
    {
      goto LABEL_192;
    }
    v143 = (int)v237;
    v144 = v243;
    v145 = &v243;
LABEL_174:
    v146 = v145;
    if (v144)
    {
      while (1)
      {
        v145 = (uint64_t **)v144;
        v147 = *((_DWORD *)v144 + 7);
        if ((MatchingSuperReg >> 30 == 0) != v147 - 1 < 0x3FFFFFFF)
        {
          if (!(MatchingSuperReg >> 30))
            goto LABEL_187;
          if (v147 - 1 > 0x3FFFFFFE)
            goto LABEL_192;
        }
        else
        {
          v148 = *((float *)v145 + 8);
          if (*(float *)&v237 == v148)
          {
            if (MatchingSuperReg < v147)
            {
LABEL_187:
              v144 = *v145;
              goto LABEL_174;
            }
            if (v147 >= MatchingSuperReg)
              goto LABEL_192;
          }
          else
          {
            if (*(float *)&v237 > v148)
              goto LABEL_187;
            if (v148 <= *(float *)&v237)
              goto LABEL_192;
          }
        }
        v144 = v145[1];
        if (!v144)
        {
          v146 = v145 + 1;
          break;
        }
      }
    }
    v149 = operator new(0x28uLL);
    v149[7] = MatchingSuperReg;
    v149[8] = v143;
    *(_QWORD *)v149 = 0;
    *((_QWORD *)v149 + 1) = 0;
    *((_QWORD *)v149 + 2) = v145;
    *v146 = (uint64_t *)v149;
    if (*v242)
    {
      v242 = (uint64_t **)*v242;
      v150 = *v146;
    }
    else
    {
      v150 = (uint64_t *)v149;
    }
    sub_1C4768E74(v243, v150);
    ++v244;
LABEL_192:
    v42 = v236;
  }
  while (v45);
  if (v244)
    v172 = v22;
  else
    v172 = 1;
  if ((v172 & 1) == 0)
  {
    if (!v233 && v231)
      *(_DWORD *)(v229[26] + 40 * (*((_DWORD *)a2 + 28) & 0x7FFFFFFF) + 16) = 0;
    v238[0] = 0;
    v238[1] = 0;
    v237 = v238;
    v173 = v242;
    if (v242 == &v243)
    {
      v181 = 0;
    }
    else
    {
      do
      {
        sub_1C4778ED8(&v237, (unsigned int *)v173 + 7, (_DWORD *)v173 + 7);
        if ((v174 & 1) != 0)
        {
          v175 = *((_DWORD *)v173 + 7);
          if (!v233 || v175 != v231)
          {
            v176 = v229[26] + 40 * (*((_DWORD *)a2 + 28) & 0x7FFFFFFF);
            v177 = v176 + 8;
            v178 = *(unsigned int *)(v176 + 16);
            if (v178 >= *(unsigned int *)(v176 + 20))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v176 + 8, v176 + 24, v178 + 1, 4);
              v178 = *(unsigned int *)(v177 + 8);
            }
            *(_DWORD *)(*(_QWORD *)v177 + 4 * v178) = v175;
            ++*(_DWORD *)(v177 + 8);
          }
        }
        v179 = v173[1];
        if (v179)
        {
          do
          {
            v180 = (uint64_t **)v179;
            v179 = (uint64_t *)*v179;
          }
          while (v179);
        }
        else
        {
          do
          {
            v180 = (uint64_t **)v173[2];
            v21 = *v180 == (uint64_t *)v173;
            v173 = v180;
          }
          while (!v21);
        }
        v173 = v180;
      }
      while (v180 != &v243);
      v181 = (_QWORD *)v238[0];
      a3 = v228;
    }
    v41 = v41 * 1.01;
    sub_1C47655E8((uint64_t)&v237, v181);
  }
LABEL_265:
  v186 = -1.0;
  if (v14 != INFINITY)
  {
    if ((v22 & 1) != 0)
      goto LABEL_267;
    v194 = *((_QWORD *)v7 + 2);
    v195 = *((_DWORD *)a2 + 2);
    if (v195)
    {
      v196 = *(_QWORD **)a2;
      v197 = *(_QWORD *)a2 + 24 * v195;
      v198 = (unint64_t *)(*(_QWORD *)(v194 + 288) + 344);
      while (1)
      {
        v199 = *v196 & 0xFFFFFFFFFFFFFFF8;
        while (1)
        {
          v199 = *(_QWORD *)(v199 + 8);
          if ((unint64_t *)v199 == v198)
            break;
          if (*(_QWORD *)(v199 + 16))
            goto LABEL_276;
        }
        v199 = *v198;
LABEL_276:
        if (*(_DWORD *)((v199 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((v196[1] & 0xFFFFFFFFFFFFFFF8) + 24))
          break;
        v196 += 3;
        if (v196 == (_QWORD *)v197)
          goto LABEL_290;
      }
LABEL_267:
      v188 = (llvm::AAResults **)*((_QWORD *)v7 + 2);
      v187 = (const llvm::LiveIntervals *)*((_QWORD *)v7 + 3);
      v189 = (const llvm::VirtRegMap *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v7 + 1) + 16)
                                                                         + 104))(*(_QWORD *)(*((_QWORD *)v7 + 1) + 16));
      isRematerializable = llvm::VirtRegAuxInfo::isRematerializable(a2, v188, v187, v189, v190);
      v192.n128_f32[0] = v41 * 0.5;
      if (!isRematerializable)
        v192.n128_f32[0] = v41;
      if (v22)
      {
        v193 = ((*(_QWORD *)a4 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) + 24))
             - ((*(_QWORD *)a3 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) + 24));
      }
      else
      {
        v200 = *((unsigned int *)a2 + 2);
        if ((_DWORD)v200)
        {
          LODWORD(v193) = 0;
          v201 = 24 * v200;
          v202 = (_QWORD *)(*(_QWORD *)a2 + 8);
          do
          {
            v193 = ((*v202 >> 1) & 3 | *(_DWORD *)((*v202 & 0xFFFFFFFFFFFFFFF8) + 24))
                 + (_DWORD)v193
                 - ((*(v202 - 1) >> 1) & 3 | *(_DWORD *)((*(v202 - 1) & 0xFFFFFFFFFFFFFFF8) + 24));
            v202 += 3;
            v201 -= 24;
          }
          while (v201);
        }
        else
        {
          v193 = 0;
        }
      }
      v186 = (*(float (**)(llvm::VirtRegAuxInfo *, uint64_t, uint64_t, __n128))(*(_QWORD *)v7 + 16))(v7, v193, v42, v192);
    }
    else
    {
LABEL_290:
      if ((llvm::LiveRange::isLiveAtIndexes((uint64_t)a2, *(uint64_t **)(v194 + 440), *(unsigned int *)(v194 + 448)) & 1) != 0)
        goto LABEL_267;
      v204 = *(_QWORD *)(*((_QWORD *)v7 + 3) + 248);
      v205 = *((unsigned int *)a2 + 28);
      if ((v205 & 0x80000000) != 0)
        v206 = (uint64_t *)(*(_QWORD *)(v204 + 24) + 16 * (v205 & 0x7FFFFFFF) + 8);
      else
        v206 = (uint64_t *)(*(_QWORD *)(v204 + 272) + 8 * v205);
      v207 = *v206;
      if (v207)
      {
        a4 = v230;
        v22 = v232;
        do
        {
          v208 = *(_QWORD *)(v207 + 8);
          v209 = *(_QWORD *)(v208 + 16);
          if (*(_WORD *)v209 == 31)
          {
            v210 = *(unsigned __int8 *)(v209 + 4);
            if ((*(_BYTE *)(v209 + 8) & 2) == 0 || (v214 = *(_DWORD *)(v208 + 40), v214 == v210))
            {
              v211 = *(unsigned __int8 *)(v209 + 4);
            }
            else
            {
              v215 = v214 - 1;
              v211 = *(unsigned __int8 *)(v209 + 4);
              do
              {
                v216 = *(_DWORD *)(*(_QWORD *)(v208 + 32) + 32 * v210);
                if ((v216 & 0x10000FF) != 0x1000000)
                  break;
                v211 += (v216 & 0x2000000) == 0;
                if (v215 == v210)
                  break;
                ++v210;
              }
              while ((v216 & 0x2000000) == 0);
            }
            v212 = *(_QWORD *)(v209 + 32);
            if (v212)
            {
              v213 = -1;
              do
                ++v213;
              while (*(_WORD *)(v212 + 2 * v213));
            }
            else
            {
              v213 = 0;
            }
            if (v213 + v211 + *(_DWORD *)(*(_QWORD *)(v208 + 32) + 32 * (v213 + v211 + 2) + 16) + 4 <= ((unint64_t)(v207 - *(_QWORD *)(v208 + 32)) >> 5))
              goto LABEL_267;
          }
          v207 = *(_QWORD *)(v207 + 24);
        }
        while (v207);
      }
      *((_DWORD *)a2 + 29) = 2139095040;
    }
  }
LABEL_286:
  MEMORY[0x1CAA32FB4](v239, 4);
  sub_1C49F3440(v243);
  if (v246 != v245)
    free(v246);
  return v186;
}

float llvm::VirtRegAuxInfo::futureWeight(llvm::VirtRegAuxInfo *a1, llvm::LiveInterval *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a4;
  v6 = a3;
  return llvm::VirtRegAuxInfo::weightCalcHelper(a1, a2, (llvm::SlotIndex *)&v6, (llvm::SlotIndex *)&v5);
}

uint64_t sub_1C5079C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((*(_WORD *)(a2 + 44) & 0xC) != 0 && (*(_WORD *)(a2 + 44) & 4) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + 9) & 2) == 0)
    {
      v4 = a2;
      while ((*(_WORD *)(v4 + 44) & 8) != 0)
      {
        v4 = *(_QWORD *)(v4 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v4 + 16) + 9) & 2) != 0)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
      }
      return 0;
    }
  }
  else if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + 9) & 2) == 0)
  {
    return 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
}

_DWORD *sub_1C5079CDC(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  int v14;
  int *v15;
  int v16;
  unsigned int v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      v12 = result;
      do
      {
        *v12 = -1;
        v12 += 2;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 0;
      v14 = v10 - 1;
      v15 = v4;
      do
      {
        v16 = *v15;
        if (*v15 <= 0xFFFFFFFD)
        {
          v17 = (37 * v16) & v14;
          v18 = &result[2 * v17];
          v19 = *v18;
          if (v16 != *v18)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -2;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v14;
              v18 = &result[2 * (v23 & v14)];
              v19 = *v18;
              if (v16 == *v18)
                goto LABEL_23;
            }
            if (v20)
              v18 = v20;
          }
LABEL_23:
          *v18 = v16;
          v18[1] = v15[1];
          *(_DWORD *)(a1 + 8) = ++v13;
        }
        v15 += 2;
      }
      while (v15 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v24 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v24)
  {
    v25 = 8 * v24;
    do
    {
      *result = -1;
      result += 2;
      v25 -= 8;
    }
    while (v25);
  }
  return result;
}

uint64_t llvm::CCState::CCState(uint64_t a1, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;

  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 4) = a3;
  *(_BYTE *)(a1 + 5) = 0;
  *(_QWORD *)(a1 + 8) = a4;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 16) + 176))(*(_QWORD *)(a4 + 16));
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_BYTE *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 56) = 0x1000000000;
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_QWORD *)(a1 + 136) = 0x400000000;
  *(_QWORD *)(a1 + 192) = a1 + 208;
  *(_QWORD *)(a1 + 200) = 0x400000000;
  *(_QWORD *)(a1 + 256) = a1 + 272;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 264) = 0x400000000;
  v10 = *(_DWORD *)(v9 + 16) + 31;
  if (v10 >= 0x20)
  {
    v11 = v10 >> 5;
    if (v10 >= 0x220)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 48, a1 + 64, v10 >> 5, 4);
      v12 = *(_DWORD *)(a1 + 56);
    }
    else
    {
      v12 = 0;
    }
    if (v12 != (_DWORD)v11)
      bzero((void *)(*(_QWORD *)(a1 + 48) + 4 * v12), 4 * (v11 - v12));
    *(_DWORD *)(a1 + 56) = v11;
  }
  return a1;
}

_DWORD *llvm::CCState::HandleByVal(uint64_t a1, unsigned int a2, unsigned __int8 a3, unsigned __int8 a4, char a5, int a6, unsigned __int8 a7, uint64_t a8, unsigned int a9, int a10)
{
  int v16;
  int v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v25;

  v16 = ((a9 >> 19) & 0xF) - 1;
  if (((a9 >> 19) & 0xF) == 0)
    LOBYTE(v16) = 0;
  if (a10 <= a6)
    v17 = a6;
  else
    v17 = a10;
  v25 = v17;
  if (a7 <= v16)
    v18 = v16;
  else
    v18 = a7;
  if (!*(_BYTE *)(a1 + 5))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
    if (*(unsigned __int8 *)(v19 + 60) < v18)
      *(_BYTE *)(v19 + 60) = v18;
  }
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
  (*(void (**)(uint64_t, uint64_t, int *, _QWORD))(*(_QWORD *)v20 + 1848))(v20, a1, &v25, v18);
  v25 = ((1 << a7) + v25 - 1) & -(int)(1 << a7);
  v21 = ((1 << v18) + *(unsigned int *)(a1 + 40) + 0xFFFFFFFFLL) & -(1 << v18);
  *(_DWORD *)(a1 + 40) = (((1 << v18) + *(_DWORD *)(a1 + 40) - 1) & -(1 << v18)) + v25;
  v22 = *(unsigned __int8 *)(a1 + 44);
  if (v22 <= v18)
    LOBYTE(v22) = v18;
  *(_BYTE *)(a1 + 44) = v22;
  if (!*(_BYTE *)(a1 + 5))
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
    if (*(unsigned __int8 *)(v23 + 60) < v18)
      *(_BYTE *)(v23 + 60) = v18;
  }
  return sub_1C476CB98(*(_DWORD **)(a1 + 24), a2 | (unint64_t)(v21 << 32), (a4 << 16) | (a3 << 8) | (4 * (a5 & 0x3F)) | 1u);
}

uint64_t llvm::CCState::ensureMaxAlignment(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(result + 5))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 56);
    if (*(unsigned __int8 *)(v2 + 60) < a2)
      *(_BYTE *)(v2 + 60) = a2;
  }
  return result;
}

unsigned __int16 *llvm::CCState::MarkAllocated(unsigned __int16 *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int16 *v10;
  _WORD *v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned __int16 *v19;
  int v20;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = (uint64_t *)(v2 + 8);
  else
    v3 = 0;
  v4 = *v3;
  v5 = *(_DWORD *)(*v3 + 24 * a2 + 16) & 0xF;
  v6 = ((unint64_t)*(unsigned int *)(*v3 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE;
  v9 = v3 + 5;
  v8 = v3[5];
  v7 = v9[1];
  v10 = (unsigned __int16 *)(v7 + v6);
  v12 = *v10;
  v11 = v10 + 1;
  v13 = v12 + v5 * a2;
  while (1)
  {
    v14 = *(unsigned __int16 *)(v8 + 4 * (unsigned __int16)v13);
    if (*(_WORD *)(v8 + 4 * (unsigned __int16)v13) && v7 != 0)
      break;
    v20 = (unsigned __int16)*v11++;
    v13 += v20;
    if (!v20)
      return this;
  }
  v16 = *(unsigned __int16 *)(v8 + 4 * (unsigned __int16)v13 + 2) << 16;
  v17 = *((_QWORD *)this + 6);
  while (1)
  {
    while (1)
    {
      this = (unsigned __int16 *)(v7 + 2 * *(unsigned int *)(v4 + 24 * v14 + 8));
      do
      {
        *(_DWORD *)(v17 + 4 * ((unsigned __int16)v14 >> 5)) |= 1 << v14;
        v18 = *this++;
        LODWORD(v14) = v18 + v14;
      }
      while (v18);
      v14 = HIWORD(v16);
      if (!(_DWORD)v14)
        break;
      v16 >>= 16;
    }
    if (!*v11)
      break;
    v13 += (unsigned __int16)*v11++;
    v19 = (unsigned __int16 *)(v8 + 4 * (unsigned __int16)v13);
    v14 = *v19;
    v16 = v19[1] << 16;
  }
  return this;
}

unsigned __int16 *llvm::CCState::MarkUnallocated(unsigned __int16 *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int16 *v10;
  _WORD *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned __int16 *v20;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = (uint64_t *)(v2 + 8);
  else
    v3 = 0;
  v4 = *v3;
  v5 = *(_DWORD *)(*v3 + 24 * a2 + 16) & 0xF;
  v6 = ((unint64_t)*(unsigned int *)(*v3 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE;
  v9 = v3 + 5;
  v8 = v3[5];
  v7 = v9[1];
  v10 = (unsigned __int16 *)(v7 + v6);
  v12 = *v10;
  v11 = v10 + 1;
  v13 = v12 + v5 * a2;
  while (1)
  {
    v14 = *(unsigned __int16 *)(v8 + 4 * (unsigned __int16)v13);
    if (*(_WORD *)(v8 + 4 * (unsigned __int16)v13) && v7 != 0)
      break;
    v16 = (unsigned __int16)*v11++;
    v13 += v16;
    if (!v16)
      return this;
  }
  v17 = *(unsigned __int16 *)(v8 + 4 * (unsigned __int16)v13 + 2) << 16;
  v18 = *((_QWORD *)this + 6);
  while (1)
  {
    while (1)
    {
      this = (unsigned __int16 *)(v7 + 2 * *(unsigned int *)(v4 + 24 * v14 + 8));
      do
      {
        *(_DWORD *)(v18 + 4 * ((unsigned __int16)v14 >> 5)) &= ~(1 << v14);
        v19 = *this++;
        LODWORD(v14) = v19 + v14;
      }
      while (v19);
      v14 = HIWORD(v17);
      if (!(_DWORD)v14)
        break;
      v17 >>= 16;
    }
    if (!*v11)
      break;
    v13 += (unsigned __int16)*v11++;
    v20 = (unsigned __int16 *)(v8 + 4 * (unsigned __int16)v13);
    v14 = *v20;
    v17 = v20[1] << 16;
  }
  return this;
}

uint64_t llvm::CCState::IsShadowAllocatedReg(_QWORD *a1, unsigned int a2)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _BYTE *i;
  unsigned int v9;

  if (((*(_DWORD *)(a1[6] + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    v4 = (unsigned int *)a1[3];
    v5 = v4[2];
    if (!(_DWORD)v5)
      return 1;
    v6 = a2 - 1;
    v7 = 12 * v5;
    for (i = (_BYTE *)(*(_QWORD *)v4 + 8); ; i += 12)
    {
      if ((*i & 1) == 0)
      {
        v9 = *((_DWORD *)i - 1);
        if (v9 == a2
          || v6 <= 0x3FFFFFFE
          && v9 - 1 <= 0x3FFFFFFE
          && llvm::MCRegisterInfo::regsOverlap((_QWORD *)(a1[2] + 8), v9, a2))
        {
          break;
        }
      }
      v7 -= 12;
      if (!v7)
        return 1;
    }
  }
  return 0;
}

uint64_t llvm::CCState::AnalyzeCallOperands(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, uint64_t))
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4)
  {
    v7 = result;
    v8 = 0;
    for (i = 0; i != v4; ++i)
    {
      v10 = *(_QWORD *)a2 + v8;
      v3 = v3 & 0xFFFFFFFF00000000 | *(unsigned int *)(v10 + 8);
      result = a3(i, *(unsigned __int8 *)(v10 + 12), *(unsigned __int8 *)(v10 + 12), 0, *(_QWORD *)v10, v3, v7);
      v8 += 48;
    }
  }
  return result;
}

uint64_t llvm::CCState::AnalyzeCallOperands(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, uint64_t))
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(unsigned int *)(a2 + 8);
  if (*(_DWORD *)(a2 + 8))
  {
    v9 = result;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *a3 + v10;
      v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(v12 + 8);
      result = a4(v11, *(unsigned __int8 *)(*(_QWORD *)a2 + v11), *(unsigned __int8 *)(*(_QWORD *)a2 + v11), 0, *(_QWORD *)v12, v4, v9);
      ++v11;
      v10 += 12;
    }
    while (v5 != v11);
  }
  return result;
}

uint64_t llvm::CCState::AnalyzeCallResult(uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  return a3(0, a2, a2, 0, 0, 0, a1);
}

void llvm::CCState::getRemainingRegParmsForType(uint64_t a1, _QWORD *a2, unsigned __int8 a3, void (*a4)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))
{
  char v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;

  v21 = *(_DWORD *)(a1 + 40);
  v7 = *(_BYTE *)(a1 + 44);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 8);
  v9 = a3;
  v10 = *(_DWORD *)a1 == 65 || *(_DWORD *)a1 == 80;
  v11 = 4;
  if (!v10)
    v11 = 0;
  if (a3 - 2 > 5)
    v11 = 0;
  if (a3 - 15 >= 0x9C)
    v12 = v11;
  else
    v12 = 4;
  do
  {
    a4(0, v9, v9, 0, v12, 0, a1);
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_DWORD *)(v13 + 8);
  }
  while ((*(_BYTE *)(*(_QWORD *)v13 + 12 * v14 - 4) & 1) == 0);
  if ((_DWORD)v8 != v14)
  {
    v15 = v8;
    do
    {
      v16 = v15;
      v17 = **(_QWORD **)(a1 + 24);
      if ((*(_BYTE *)(v17 + 12 * v15 + 8) & 1) == 0)
      {
        v18 = *(_DWORD *)(v17 + 12 * v15 + 4);
        v19 = a2[1];
        if ((unint64_t)(v19 + 1) > a2[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v19 + 1, 2);
          v19 = a2[1];
        }
        *(_WORD *)(*a2 + 2 * v19) = v18;
        ++a2[1];
      }
      v15 = v16 + 1;
    }
    while (v14 != v16 + 1);
    v13 = *(_QWORD *)(a1 + 24);
  }
  *(_DWORD *)(a1 + 40) = v21;
  *(_BYTE *)(a1 + 44) = v7;
  v20 = *(_DWORD *)(v13 + 8);
  if (v20 != (_DWORD)v8)
  {
    if (v20 <= v8)
    {
      if (*(_DWORD *)(v13 + 12) < v8)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v13 + 16, v8, 12);
        v20 = *(_DWORD *)(v13 + 8);
      }
      if (v20 != (_DWORD)v8)
        bzero((void *)(*(_QWORD *)v13 + 12 * v20), 12 * ((12 * (v8 - v20) - 12) / 0xC) + 12);
    }
    *(_DWORD *)(v13 + 8) = v8;
  }
}

void llvm::CCState::analyzeMustTailForwardedRegisters(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, void (*a5)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))
{
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  unsigned __int8 *v21;
  unsigned __int16 *v23;
  __int128 v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v19 = *(_BYTE *)(a1 + 5);
  v20 = *(_BYTE *)(a1 + 4);
  *(_WORD *)(a1 + 4) = 256;
  if (a4)
  {
    v6 = a3;
    v21 = &a3[a4];
    v18 = a2 + 16;
    do
    {
      v8 = *v6;
      v23 = (unsigned __int16 *)v25;
      v24 = xmmword_1C6464ED0;
      llvm::CCState::getRemainingRegParmsForType(a1, &v23, v8, a5);
      v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 424))(v9, v8, 0);
      v11 = v23;
      if ((_QWORD)v24)
      {
        v12 = v10;
        v13 = v8 << 48;
        v14 = 2 * v24;
        do
        {
          v15 = *v11;
          v16 = llvm::MachineFunction::addLiveIn(*(_QWORD *)(a1 + 8), *v11, v12);
          v17 = *(unsigned int *)(a2 + 8);
          if (v17 >= *(unsigned int *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v18, v17 + 1, 8);
            v17 = *(unsigned int *)(a2 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = v13 | (v15 << 32) | v16;
          ++*(_DWORD *)(a2 + 8);
          ++v11;
          v14 -= 2;
        }
        while (v14);
        v11 = v23;
      }
      if (v11 != (unsigned __int16 *)v25)
        free(v11);
      ++v6;
    }
    while (v6 != v21);
  }
  *(_BYTE *)(a1 + 5) = v19;
  *(_BYTE *)(a1 + 4) = v20;
}

uint64_t llvm::CCState::resultsCompatible(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _BYTE *), void (*a7)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _BYTE *))
{
  unint64_t v7;
  uint64_t v9;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  _BOOL4 v31;
  _BYTE v33[48];
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[48];
  _BYTE v45[48];
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD v56[8];

  v56[6] = *MEMORY[0x1E0C80C00];
  if (a1 == a2)
    return 1;
  v14 = a3;
  v54 = (char *)v56;
  v55 = 0x400000000;
  llvm::CCState::CCState((uint64_t)v45, a1, 0, a3, (uint64_t)&v54, a4);
  v15 = *(unsigned int *)(a5 + 8);
  if ((_DWORD)v15)
  {
    v16 = 0;
    for (i = 0; i != v15; ++i)
    {
      v18 = *(_QWORD *)a5 + v16;
      v7 = v7 & 0xFFFFFFFF00000000 | *(unsigned int *)(v18 + 8);
      a6(i, *(unsigned __int8 *)(v18 + 12), *(unsigned __int8 *)(v18 + 12), 0, *(_QWORD *)v18, v7, v45);
      v16 += 48;
    }
  }
  v42 = v44;
  v43 = 0x400000000;
  llvm::CCState::CCState((uint64_t)v33, a2, 0, v14, (uint64_t)&v42, a4);
  v19 = *(unsigned int *)(a5 + 8);
  if ((_DWORD)v19)
  {
    v20 = 0;
    for (j = 0; j != v19; ++j)
    {
      v22 = *(_QWORD *)a5 + v20;
      v14 = v14 & 0xFFFFFFFF00000000 | *(unsigned int *)(v22 + 8);
      a7(j, *(unsigned __int8 *)(v22 + 12), *(unsigned __int8 *)(v22 + 12), 0, *(_QWORD *)v22, v14, v33);
      v20 += 48;
    }
  }
  v23 = v55;
  if ((_DWORD)v55 == (_DWORD)v43)
  {
    if ((_DWORD)v55)
    {
      v24 = v54 + 8;
      v25 = (char *)v42 + 8;
      v26 = v54 + 8;
      v27 = (char *)v42 + 8;
      while (1)
      {
        v9 = 0;
        v29 = *v26;
        v26 += 12;
        v28 = v29;
        v30 = *v27;
        v27 += 12;
        v31 = (v30 & 1) == 0;
        if ((v30 ^ v28) > 3 || ((v28 ^ v31) & 1) == 0)
          break;
        if (*((_DWORD *)v24 - 1) != *((_DWORD *)v25 - 1))
          goto LABEL_17;
        v25 = v27;
        v24 = v26;
        if (!--v23)
          goto LABEL_16;
      }
    }
    else
    {
LABEL_16:
      v9 = 1;
    }
  }
  else
  {
LABEL_17:
    v9 = 0;
  }
  if (v40 != &v41)
    free(v40);
  if (v38 != &v39)
    free(v38);
  if (v36 != &v37)
    free(v36);
  if (v34 != &v35)
    free(v34);
  if (v42 != v44)
    free(v42);
  if (v52 != &v53)
    free(v52);
  if (v50 != &v51)
    free(v50);
  if (v48 != &v49)
    free(v48);
  if (v46 != &v47)
    free(v46);
  if (v54 != (char *)v56)
    free(v54);
  return v9;
}

uint64_t sub_1C507AB64(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Insert symbols at valid longjmp targets for /guard:cf";
  *(_QWORD *)(v2 + 8) = 53;
  *(_QWORD *)(v2 + 16) = "CFGuardLongjmp";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1ED7F5148;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C507ACDC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createCFGuardLongjmpPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C507AC1C(v1);
}

uint64_t sub_1C507AC1C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7F5148) = &off_1E8140378;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F5150);
  if (v3 != -1)
  {
    v7[0] = sub_1C507AB64;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F5150, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C507ACDC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C507AC1C(v0);
}

void sub_1C507AD04(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C507AD98(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C507AE24()
{
  return "Control Flow Guard longjmp targets";
}

BOOL sub_1C507AE34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _DWORD *v20;
  size_t v21;
  char *Name;
  size_t v23;
  uint64_t v24;
  llvm::MCSymbol *Symbol;
  unint64_t v26;
  llvm::MCSymbol **v27;
  _QWORD *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  llvm::MCSymbol **v37;
  llvm::MCSymbol *v38;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  void *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  _QWORD v50[10];

  v50[8] = *MEMORY[0x1E0C80C00];
  if (!llvm::Module::getModuleFlag(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 2064), "cfguard", 7uLL))
    return 0;
  if (!llvm::Function::callsFunctionThatReturnsTwice(*(llvm::Function **)a2))
    return 0;
  v48 = v50;
  v49 = 0x800000000;
  v3 = *(_QWORD *)(a2 + 328);
  if (v3 == a2 + 320)
    return 0;
  v4 = 0;
  do
  {
    for (i = *(_QWORD *)(v3 + 56); i != v3 + 48; i = *(_QWORD *)(i + 8))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(i + 16) + 8);
      if ((*(_WORD *)(i + 44) & 0xC) != 0 && (*(_WORD *)(i + 44) & 4) == 0)
      {
        v13 = i;
        if ((v6 & 0x80) == 0)
        {
          while ((*(_WORD *)(v13 + 44) & 8) != 0)
          {
            v13 = *(_QWORD *)(v13 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v13 + 16) + 8) & 0x80) != 0)
              goto LABEL_12;
          }
LABEL_24:
          if ((*(_BYTE *)i & 4) != 0)
            continue;
          goto LABEL_35;
        }
      }
      else if ((v6 & 0x80) == 0)
      {
        goto LABEL_24;
      }
LABEL_12:
      v8 = *(unsigned int *)(i + 40);
      if (!(_DWORD)v8)
        goto LABEL_24;
      v9 = 32 * v8;
      v10 = *(_QWORD *)(i + 32) + 16;
      while (1)
      {
        if (*(_BYTE *)(v10 - 16) == 10 && *(_QWORD *)v10 && *(_BYTE *)(*(_QWORD *)v10 + 16) == 0)
        {
          v12 = *(_QWORD *)(*(_QWORD *)v10 + 112);
          if (v12)
          {
            if (*(char *)(v12 + 17) < 0)
              break;
          }
        }
        v10 += 32;
        v9 -= 32;
        if (!v9)
        {
          if (!i)
            goto LABEL_35;
          goto LABEL_24;
        }
      }
      if (v4 >= HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, (uint64_t)v50, v4 + 1, 8);
        v4 = v49;
      }
      v48[v4] = i;
      v4 = v49 + 1;
      LODWORD(v49) = v49 + 1;
      if (i)
        goto LABEL_24;
LABEL_35:
      while ((*(_WORD *)(i + 44) & 8) != 0)
        i = *(_QWORD *)(i + 8);
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3 != a2 + 320);
  v14 = v48;
  v15 = v4 != 0;
  if (v4)
  {
    v16 = 0;
    v17 = &v48[v4];
    v18 = &v47;
    do
    {
      v19 = *v14;
      v45 = v18;
      v46 = xmmword_1C85F20B0;
      sub_1C613932C((uint64_t)v40, (uint64_t)&v45);
      v20 = v43;
      if ((unint64_t)(v42 - (_QWORD)v43) > 6)
      {
        *(_DWORD *)(v43 + 3) = 1600811879;
        *v20 = 1734763300;
        v43 += 7;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v40, "$cfgsj_", 7uLL);
      }
      Name = llvm::Value::getName(*(llvm::Value **)a2);
      v23 = v21;
      if (v21 <= v42 - (uint64_t)v43)
      {
        if (v21)
        {
          memcpy(v43, Name, v21);
          v43 += v23;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v40, Name, v21);
      }
      sub_1C5E21910((llvm::raw_ostream *)v40, v16, 0, 0, 0);
      v40[0] = off_1E81A6E70;
      if (v44 == 1 && v41)
        MEMORY[0x1CAA32F9C](v41, 0x1000C8077774924);
      v24 = *(_QWORD *)(a2 + 24);
      LOWORD(v43) = 261;
      v40[0] = v45;
      v40[1] = v46;
      Symbol = (llvm::MCSymbol *)llvm::MCContext::getOrCreateSymbol(v24, (uint64_t)v40);
      llvm::MachineInstr::setPostInstrSymbol(v19, (llvm::MachineFunction *)a2, Symbol);
      v27 = *(llvm::MCSymbol ***)(a2 + 472);
      v26 = *(_QWORD *)(a2 + 480);
      if ((unint64_t)v27 >= v26)
      {
        v29 = v17;
        v30 = *(_QWORD **)(a2 + 464);
        v31 = v27 - (llvm::MCSymbol **)v30;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61)
          abort();
        v33 = v18;
        v34 = v26 - (_QWORD)v30;
        if (v34 >> 2 > v32)
          v32 = v34 >> 2;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v32;
        if (v35)
        {
          if (v35 >> 61)
            sub_1C4764EE4();
          v36 = (char *)operator new(8 * v35);
        }
        else
        {
          v36 = 0;
        }
        v37 = (llvm::MCSymbol **)&v36[8 * v31];
        *v37 = Symbol;
        v28 = v37 + 1;
        if (v27 != v30)
        {
          do
          {
            v38 = *--v27;
            *--v37 = v38;
          }
          while (v27 != v30);
          v27 = *(llvm::MCSymbol ***)(a2 + 464);
        }
        *(_QWORD *)(a2 + 464) = v37;
        *(_QWORD *)(a2 + 472) = v28;
        *(_QWORD *)(a2 + 480) = &v36[8 * v35];
        if (v27)
          operator delete(v27);
        v17 = v29;
        v18 = v33;
      }
      else
      {
        *v27 = Symbol;
        v28 = v27 + 1;
      }
      *(_QWORD *)(a2 + 472) = v28;
      if (v45 != v18)
        free(v45);
      ++v16;
      ++v14;
    }
    while (v14 != v17);
    v14 = v48;
    v15 = 1;
  }
  if (v14 != v50)
    free(v14);
  return v15;
}

uint64_t sub_1C507B2B0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Insert CFI remember/restore state instructions";
  *(_QWORD *)(v2 + 8) = 46;
  *(_QWORD *)(v2 + 16) = "cfi-fixup";
  *(_QWORD *)(v2 + 24) = 9;
  *(_QWORD *)(v2 + 32) = &llvm::CFIFixup::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::CFIFixup>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::CFIFixup::runOnMachineFunction(llvm::CFIFixup *this, llvm::MachineFunction *a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  size_t v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  char v17;
  uint64_t i;
  unint64_t v20;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unsigned __int8 v27;
  char v28;
  int v29;
  char v30;
  char v31;
  char v32;
  unint64_t *v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  llvm::MachineFunction *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  llvm::MachineFunction *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  void *__p;
  char v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  size_t v92;
  uint64_t v93;
  _QWORD v94[6];

  v94[4] = *MEMORY[0x1E0C80C00];
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 112))(*((_QWORD *)a2 + 2));
  if (!(*(unsigned int (**)(uint64_t, llvm::MachineFunction *))(*(_QWORD *)v3 + 128))(v3, a2)
    || (v4 = *((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13), (v4 & 0x7FFFFFFF0) == 0))
  {
    v5 = 0;
    return v5 & 1;
  }
  v7 = (v4 >> 3);
  v91 = (unsigned __int8 *)v94;
  v93 = 32;
  if (v7 < 0x21)
  {
    if ((v4 >> 3))
      bzero(v94, v7);
    v8 = v94;
  }
  else
  {
    v92 = 0;
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v91, v94, v7, 1);
    bzero(v91, v7);
    v8 = v91;
  }
  v92 = v7;
  *v8 |= 1u;
  *v91 |= 2u;
  v79 = (unsigned __int8 *)*((_QWORD *)a2 + 41);
  v88 = 0;
  v89 = 0;
  v87 = 0;
  sub_1C61D9B18(&v87, (uint64_t *)&v79);
  v10 = v87;
  v9 = v88;
  if (v88 == v87)
  {
    v5 = 0;
    goto LABEL_141;
  }
  v11 = 0;
  do
  {
    v13 = *((_QWORD *)v9 - 1);
    v9 -= 8;
    v12 = (_QWORD *)v13;
    v14 = *(int *)(v13 + 24);
    v15 = v91;
    if (v11)
    {
      v16 = 0;
      v17 = 0;
      if ((v91[v14] & 4) == 0)
        goto LABEL_44;
      goto LABEL_26;
    }
    if ((v91[v14] & 4) != 0)
    {
      v11 = 0;
      v16 = 0;
LABEL_26:
      v20 = v12[6] & 0xFFFFFFFFFFFFFFF8;
      if (!v20 || (*(_BYTE *)v20 & 4) == 0)
      {
        while ((*(_WORD *)(v20 + 44) & 4) != 0)
          v20 = *(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((_QWORD *)v20 != v12 + 6)
      {
        if (**(_WORD **)(v20 + 16) == 3 && (*(_WORD *)(v20 + 44) & 2) != 0)
          goto LABEL_42;
        v20 = *(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8;
        if (!v20 || (*(_BYTE *)v20 & 4) == 0)
        {
          while ((*(_WORD *)(v20 + 44) & 4) != 0)
            v20 = *(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      v17 = 8;
      goto LABEL_44;
    }
    for (i = v12[7]; (_QWORD *)i != v12 + 6; i = *(_QWORD *)(i + 8))
    {
      if (**(_WORD **)(i + 16) == 3 && (*(_WORD *)(i + 44) & 1) != 0)
      {
        v16 = 1;
        v11 = v12;
        goto LABEL_26;
      }
    }
    v11 = 0;
    v16 = 0;
LABEL_42:
    v17 = 0;
LABEL_44:
    v91[v14] = v17 | v91[v14] & 0xF7;
    v23 = (uint64_t *)v12[11];
    v22 = (uint64_t *)v12[12];
    while (v23 != v22)
    {
      v24 = *v23++;
      v25 = *(int *)(v24 + 24);
      v26 = v91;
      v27 = v91[v25];
      v28 = v27 | 1;
      v91[v25] = v27 | 1;
      if ((v15[v14] & 2) != 0)
        v29 = v16;
      else
        v29 = 1;
      v30 = v27 & 2;
      v31 = v28 & 0xFD;
      if (!v29)
        v30 = 2;
      v32 = v30 | v31;
      v26[v25] = v32;
      v26[v25] = v32 & 0xFB | (v15[v14] >> 1) & 4;
    }
  }
  while (v9 != v10);
  if (!v11)
    goto LABEL_138;
  v77 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 104))(*((_QWORD *)a2 + 2));
  v33 = (unint64_t *)v11[7];
  if (v33 != v11 + 6)
  {
    v34 = v11[7];
    do
    {
      v35 = *(_WORD *)(v34 + 44);
      if (**(_WORD **)(v34 + 16) == 3 && (v35 & 1) != 0)
        v33 = *(unint64_t **)(v34 + 8);
      if ((*(_BYTE *)v34 & 4) == 0 && (v35 & 8) != 0)
      {
        do
          v34 = *(_QWORD *)(v34 + 8);
        while ((*(_WORD *)(v34 + 44) & 8) != 0);
      }
      v34 = *(_QWORD *)(v34 + 8);
    }
    while ((_QWORD *)v34 != v11 + 6);
  }
  v37 = v11[1];
  v38 = (char *)a2 + 320;
  if ((llvm::MachineFunction *)v37 == (llvm::MachineFunction *)((char *)a2 + 320))
  {
LABEL_138:
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v39 = (v91[*((int *)v11 + 6)] >> 3) & 1;
    do
    {
      v40 = *(int *)(v37 + 24);
      v41 = v91;
      if ((v91[v40] & 1) != 0)
      {
        if (((v91[v40] & 6) != 4) | v39 & 1)
        {
          if ((((v91[v40] & 6) != 4) & v39) == 1)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 136))(v3, v37);
            v5 = 1;
          }
        }
        else
        {
          LODWORD(v79) = 1;
          v86 = 0;
          v80 = 0;
          v81 = 0;
          v83 = 0;
          v84 = 0;
          v82 = 0;
          LOBYTE(__p) = 0;
          v74 = llvm::MachineFunction::addFrameInst((uint64_t *)a2, (uint64_t)&v79);
          if (v86 < 0)
            operator delete(__p);
          v76 = v40;
          v42 = v38;
          if (v82)
          {
            v83 = v82;
            operator delete(v82);
          }
          v78 = 0;
          v43 = *(_QWORD *)(v77 + 8);
          v44 = (llvm::MachineFunction *)v11[4];
          v90 = 0;
          v45 = *((_QWORD *)v44 + 28);
          if (v45)
          {
            *((_QWORD *)v44 + 28) = *(_QWORD *)v45;
            v79 = 0;
          }
          else
          {
            v45 = sub_1C484358C((uint64_t)v44 + 128, 72, 3);
            v79 = v90;
            if (v90)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v90, v90, (uint64_t)&v79);
              v90 = 0;
            }
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v45, v44, v43 + 144, &v79, 0);
          if (v79)
            llvm::MetadataTracking::untrack((uint64_t)&v79, v79);
          v38 = v42;
          if (v90)
            llvm::MetadataTracking::untrack((uint64_t)&v90, v90);
          v46 = v11[5];
          *(_QWORD *)(v45 + 24) = v46;
          v47 = *(_QWORD *)(v46 + 32);
          v48 = *(unsigned int *)(v45 + 40);
          if ((_DWORD)v48)
          {
            v60 = *(_QWORD *)(v45 + 32);
            v61 = *(_QWORD *)(v47 + 40);
            v62 = 32 * v48;
            do
            {
              if (!*(_BYTE *)v60)
              {
                v63 = *(unsigned int *)(v60 + 4);
                if ((int)v63 >= 0)
                  v64 = (uint64_t *)(*(_QWORD *)(v61 + 272) + 8 * v63);
                else
                  v64 = (uint64_t *)(*(_QWORD *)(v61 + 24) + 16 * (v63 & 0x7FFFFFFF) + 8);
                v65 = *v64;
                if (*v64)
                {
                  v66 = *(_QWORD *)(v65 + 16);
                  *(_QWORD *)(v65 + 16) = v60;
                  *(_QWORD *)(v60 + 16) = v66;
                  if ((*(_BYTE *)(v60 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v60 + 24) = v65;
                  }
                  else
                  {
                    *(_QWORD *)(v60 + 24) = 0;
                    v64 = (uint64_t *)(v66 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v60 + 16) = v60;
                  *(_QWORD *)(v60 + 24) = 0;
                }
                *v64 = v60;
              }
              v60 += 32;
              v62 -= 32;
            }
            while (v62);
          }
          v49 = *(_QWORD *)(v47 + 728);
          if (v49)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v49 + 24))(v49, v45);
          v50 = *v33 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v45 = v50 | *(_QWORD *)v45 & 7;
          *(_QWORD *)(v45 + 8) = v33;
          *(_QWORD *)(v50 + 8) = v45;
          *v33 = *v33 & 7 | v45;
          LODWORD(v79) = 16;
          v80 = 0;
          LODWORD(v81) = v74;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v44, (const llvm::MachineOperand *)&v79);
          if (v78)
            llvm::MetadataTracking::untrack((uint64_t)&v78, v78);
          LODWORD(v79) = 2;
          v86 = 0;
          v80 = 0;
          v81 = 0;
          v83 = 0;
          v84 = 0;
          v82 = 0;
          LOBYTE(__p) = 0;
          v75 = llvm::MachineFunction::addFrameInst((uint64_t *)a2, (uint64_t)&v79);
          if (v86 < 0)
            operator delete(__p);
          if (v82)
          {
            v83 = v82;
            operator delete(v82);
          }
          v51 = *(unint64_t **)(v37 + 56);
          v78 = 0;
          v52 = *(_QWORD *)(v77 + 8);
          v53 = *(llvm::MachineFunction **)(v37 + 32);
          v90 = 0;
          v54 = *((_QWORD *)v53 + 28);
          if (v54)
          {
            *((_QWORD *)v53 + 28) = *(_QWORD *)v54;
            v79 = 0;
          }
          else
          {
            v54 = sub_1C484358C((uint64_t)v53 + 128, 72, 3);
            v79 = v90;
            if (v90)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v90, v90, (uint64_t)&v79);
              v90 = 0;
            }
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v54, v53, v52 + 144, &v79, 0);
          if (v79)
            llvm::MetadataTracking::untrack((uint64_t)&v79, v79);
          if (v90)
            llvm::MetadataTracking::untrack((uint64_t)&v90, v90);
          v55 = *(_QWORD *)(v37 + 40);
          *(_QWORD *)(v54 + 24) = v55;
          v56 = *(_QWORD *)(v55 + 32);
          v57 = *(unsigned int *)(v54 + 40);
          if ((_DWORD)v57)
          {
            v67 = *(_QWORD *)(v54 + 32);
            v68 = *(_QWORD *)(v56 + 40);
            v69 = 32 * v57;
            do
            {
              if (!*(_BYTE *)v67)
              {
                v70 = *(unsigned int *)(v67 + 4);
                if ((int)v70 >= 0)
                  v71 = (uint64_t *)(*(_QWORD *)(v68 + 272) + 8 * v70);
                else
                  v71 = (uint64_t *)(*(_QWORD *)(v68 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8);
                v72 = *v71;
                if (*v71)
                {
                  v73 = *(_QWORD *)(v72 + 16);
                  *(_QWORD *)(v72 + 16) = v67;
                  *(_QWORD *)(v67 + 16) = v73;
                  if ((*(_BYTE *)(v67 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v67 + 24) = v72;
                  }
                  else
                  {
                    *(_QWORD *)(v67 + 24) = 0;
                    v71 = (uint64_t *)(v73 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v67 + 16) = v67;
                  *(_QWORD *)(v67 + 24) = 0;
                }
                *v71 = v67;
              }
              v67 += 32;
              v69 -= 32;
            }
            while (v69);
          }
          v58 = *(_QWORD *)(v56 + 728);
          if (v58)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v58 + 24))(v58, v54);
          v59 = *v51 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v54 = v59 | *(_QWORD *)v54 & 7;
          *(_QWORD *)(v54 + 8) = v51;
          *(_QWORD *)(v59 + 8) = v54;
          *v51 = *v51 & 7 | v54;
          LODWORD(v79) = 16;
          v80 = 0;
          LODWORD(v81) = v75;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v53, (const llvm::MachineOperand *)&v79);
          if (v78)
            llvm::MetadataTracking::untrack((uint64_t)&v78, v78);
          v40 = v76;
          if ((*(_BYTE *)v54 & 4) == 0)
          {
            while ((*(_WORD *)(v54 + 44) & 8) != 0)
              v54 = *(_QWORD *)(v54 + 8);
          }
          v33 = *(unint64_t **)(v54 + 8);
          v5 = 1;
          v11 = (_QWORD *)v37;
        }
        v39 = (v41[v40] >> 3) & 1;
      }
      v37 = *(_QWORD *)(v37 + 8);
    }
    while ((char *)v37 != v38);
  }
  v9 = v87;
LABEL_141:
  if (v9)
  {
    v88 = v9;
    operator delete(v9);
  }
  if (v91 != (unsigned __int8 *)v94)
    free(v91);
  return v5 & 1;
}

uint64_t sub_1C507BB8C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Check CFA info and insert CFI instructions if needed";
  *(_QWORD *)(v2 + 8) = 52;
  *(_QWORD *)(v2 + 16) = "cfi-instr-inserter";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1ED7F5220;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C507BD30;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createCFIInstrInserter(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C507BC44(v1);
}

uint64_t sub_1C507BC44(uint64_t a1)
{
  _QWORD *v2;
  uint64_t i;
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];

  v2 = (_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7F5220);
  *v2 = off_1E81404F8;
  v2[32] = 0;
  v2[33] = 0;
  v2[31] = 0;
  v2[34] = 1;
  for (i = 280; i != 600; i += 20)
    *(_DWORD *)(a1 + i) = -1;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v7 = qword_1ED830BC0[0];
  v5 = atomic_load(&qword_1ED7F5228);
  if (v5 != -1)
  {
    v9[0] = sub_1C507BB8C;
    v9[1] = &v7;
    v8 = v9;
    std::__call_once(&qword_1ED7F5228, &v8, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C507BD30()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C507BC44(v0);
}

void sub_1C507BD58(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = off_1E81404F8;
  if ((*((_BYTE *)this + 272) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 35), 4);
  v2 = (char *)*((_QWORD *)this + 31);
  if (v2)
  {
    sub_1C507F1FC((uint64_t)this + 248, v2);
    operator delete(*((void **)this + 31));
  }
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
}

void sub_1C507BE0C(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = off_1E81404F8;
  if ((*((_BYTE *)this + 272) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 35), 4);
  v2 = (char *)*((_QWORD *)this + 31);
  if (v2)
  {
    sub_1C507F1FC((uint64_t)this + 248, v2);
    operator delete(*((void **)this + 31));
  }
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C507BED4(llvm::MachineFunctionPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(this, a2);
}

uint64_t sub_1C507BEE0(uint64_t a1, llvm::MachineFunction *this)
{
  llvm::MachineFunction *v2;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  void **v22;
  unsigned int v23;
  BOOL v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  char *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  float *v52;
  int *v53;
  int v54;
  int *v55;
  char v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int *v64;
  int v65;
  int *v66;
  char v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  int v73;
  _DWORD *v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  _DWORD *v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  _DWORD *v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 **v121;
  unsigned int v122;
  void *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  const void **v127;
  int v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  _DWORD *v151;
  void **v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  int v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char **v162;
  int v163;
  char *v164;
  char *v165;
  uint64_t v166;
  unint64_t *v167;
  uint64_t v168;
  unsigned int v169;
  BOOL v170;
  int v171;
  void *v173;
  int v174;
  unsigned int v175;
  int v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  llvm::MachineFunction *v182;
  unint64_t v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  llvm::MachineFunction *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  int v213;
  uint64_t v214;
  unsigned int v215;
  unsigned int v216;
  unint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t *v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  int v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  int v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  llvm::MachineFunction *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  unsigned int v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t *v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  int v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  int v280;
  int v281;
  uint64_t v282;
  BOOL v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  llvm::MachineFunction *v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _DWORD *v319;
  int v320;
  _DWORD *v321;
  _BYTE *v322;
  unsigned __int8 *v323;
  unsigned __int8 *v324;
  unsigned int v325;
  unsigned int v326;
  _WORD *v327;
  void *v328;
  void *v329;
  unsigned int v330;
  unsigned int v331;
  uint64_t v332;
  char *v333;
  char *v334;
  char *v335;
  int v336;
  BOOL v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  const void **v341;
  int *v342;
  int v343;
  uint64_t v344;
  int *v345;
  llvm::raw_ostream *v346;
  void *v347;
  llvm::raw_ostream *v348;
  llvm::raw_ostream *v349;
  uint64_t v350;
  llvm::Value *v351;
  size_t v352;
  char *Name;
  size_t v354;
  _WORD *v355;
  unint64_t v356;
  llvm::raw_ostream *v357;
  int v358;
  _DWORD *v359;
  size_t v360;
  char *v361;
  size_t v362;
  _WORD *v363;
  llvm *v364;
  _BYTE *v365;
  llvm::raw_ostream *v366;
  llvm::raw_ostream *v367;
  uint64_t v368;
  llvm::Value *v369;
  size_t v370;
  char *v371;
  size_t v372;
  _WORD *v373;
  unint64_t v374;
  llvm::raw_ostream *v375;
  int v376;
  _DWORD *v377;
  size_t v378;
  char *v379;
  size_t v380;
  void *v381;
  unint64_t v382;
  llvm::raw_ostream *v383;
  int v384;
  llvm *v385;
  _BYTE *v386;
  llvm::raw_ostream *v387;
  llvm::raw_ostream *v388;
  uint64_t v389;
  llvm::Value *v390;
  size_t v391;
  char *v392;
  size_t v393;
  _WORD *v394;
  unint64_t v395;
  llvm::raw_ostream *v396;
  int v397;
  uint64_t v398;
  llvm *v399;
  _BYTE *v400;
  llvm::raw_ostream *v401;
  llvm::raw_ostream *v402;
  uint64_t v403;
  llvm::Value *v404;
  size_t v405;
  char *v406;
  size_t v407;
  _WORD *v408;
  unint64_t v409;
  llvm::raw_ostream *v410;
  int v411;
  void *v412;
  unint64_t v413;
  llvm::raw_ostream *v414;
  int v415;
  _BYTE *v416;
  uint64_t v417;
  int *v418;
  int v419;
  llvm::raw_ostream *v420;
  llvm::raw_ostream *v421;
  void *v422;
  size_t v423;
  char *v424;
  size_t v425;
  llvm::raw_ostream *v426;
  llvm::raw_ostream *v427;
  llvm::raw_ostream *v428;
  uint64_t v429;
  llvm::Value *v430;
  size_t v431;
  char *v432;
  size_t v433;
  _WORD *v434;
  unint64_t v435;
  llvm::raw_ostream *v436;
  int v437;
  void *v438;
  llvm *i;
  int v440;
  llvm::raw_ostream *v441;
  llvm::raw_ostream *v442;
  unint64_t v443;
  int v444;
  _BYTE *v445;
  llvm::raw_ostream *v446;
  _BYTE *v447;
  llvm::raw_ostream *v448;
  llvm::raw_ostream *v449;
  uint64_t v450;
  llvm::Value *v451;
  size_t v452;
  char *v453;
  size_t v454;
  _WORD *v455;
  unint64_t v456;
  llvm::raw_ostream *v457;
  int v458;
  void *v459;
  llvm *v460;
  int v461;
  llvm::raw_ostream *v462;
  llvm::raw_ostream *v463;
  unint64_t v464;
  int v465;
  _BYTE *v466;
  _BYTE *v467;
  unsigned int v468;
  unsigned int v469;
  uint64_t v470;
  uint64_t v471;
  unsigned int v472;
  uint64_t v473;
  unsigned __int8 **v474;
  char *v475;
  uint64_t v476;
  int v477;
  _DWORD *v478;
  int *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  char *v484;
  _DWORD *v485;
  uint64_t v486;
  int v487;
  int *v488;
  llvm::MachineFunction *v489;
  uint64_t v490;
  char *v491;
  int v492;
  char *v493;
  unint64_t v494;
  int v495;
  int *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t *v499;
  uint64_t v500[4];
  __int16 v501;
  uint64_t v502;
  void *v503;
  unsigned int v504;
  unsigned int v505;
  _QWORD v506[2];
  __int16 v507;
  void *v508;
  uint64_t v509;
  _DWORD v510[4];
  _WORD v511[16];
  int v512;
  char *v513;
  char *v514;
  uint64_t v515;
  void *v516;
  uint64_t v517;
  _DWORD v518[4];
  _BYTE v519[32];
  int v520;
  void *v521;
  char *v522;
  uint64_t v523;
  unsigned __int8 *v524;
  void *__src;
  unsigned int v526;
  unsigned int v527;
  int v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  void *v532;
  _BYTE *v533;
  void *v534;
  void *v535;
  unsigned int v536;
  unsigned int v537;
  int v538;
  void *v539;
  _BYTE *v540;
  uint64_t v541;
  float32x2x2_t v542;

  v2 = this;
  v541 = *MEMORY[0x1E0C80C00];
  if (!llvm::MachineFunction::needsFrameMoves(this))
  {
    v34 = 0;
    return v34 & 1;
  }
  v4 = *(char **)(a1 + 248);
  v5 = a1;
  v6 = ((*((_QWORD *)v2 + 14) - *((_QWORD *)v2 + 13)) >> 3);
  v499 = (uint64_t *)(a1 + 248);
  v7 = *(char **)(a1 + 256);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((v7 - v4) >> 4);
  v9 = v6 - v8;
  v489 = v2;
  v483 = v5;
  if (v6 <= v8)
  {
    if (v6 < v8)
      sub_1C507F1FC((uint64_t)v499, &v4[176 * v6]);
    goto LABEL_57;
  }
  v10 = *(_QWORD *)(v5 + 264);
  if (0x2E8BA2E8BA2E8BA3 * ((v10 - (uint64_t)v7) >> 4) >= v9)
  {
    v35 = &v7[176 * v9];
    do
    {
      *(_OWORD *)v7 = 0uLL;
      *((_OWORD *)v7 + 1) = 0uLL;
      *((_OWORD *)v7 + 5) = 0uLL;
      *((_OWORD *)v7 + 6) = 0uLL;
      *((_OWORD *)v7 + 9) = 0uLL;
      *((_OWORD *)v7 + 10) = 0uLL;
      *((_OWORD *)v7 + 8) = 0uLL;
      *((_OWORD *)v7 + 3) = 0uLL;
      *((_OWORD *)v7 + 4) = 0uLL;
      *((_OWORD *)v7 + 2) = 0uLL;
      *((_OWORD *)v7 + 7) = 0uLL;
      *((_QWORD *)v7 + 1) = -1;
      *((_QWORD *)v7 + 3) = v7 + 40;
      *((_DWORD *)v7 + 9) = 6;
      *((_QWORD *)v7 + 12) = v7 + 112;
      *((_DWORD *)v7 + 27) = 6;
      v7 += 176;
    }
    while (v7 != v35);
    *(_QWORD *)(v5 + 256) = v35;
    goto LABEL_57;
  }
  v11 = 0x5D1745D1745D1746 * ((v10 - (uint64_t)v4) >> 4);
  if (v11 <= v6)
    v11 = ((*((_QWORD *)v2 + 14) - *((_QWORD *)v2 + 13)) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v10 - (uint64_t)v4) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
    v12 = 0x1745D1745D1745DLL;
  else
    v12 = v11;
  if (v12 > 0x1745D1745D1745DLL)
    sub_1C4764EE4();
  v13 = (char *)operator new(176 * v12);
  v14 = &v13[16 * ((v7 - v4) >> 4)];
  v15 = &v13[176 * v6];
  v16 = v14;
  do
  {
    *(_OWORD *)v16 = 0uLL;
    *((_OWORD *)v16 + 1) = 0uLL;
    *((_OWORD *)v16 + 5) = 0uLL;
    *((_OWORD *)v16 + 6) = 0uLL;
    *((_OWORD *)v16 + 9) = 0uLL;
    *((_OWORD *)v16 + 10) = 0uLL;
    *((_OWORD *)v16 + 8) = 0uLL;
    *((_OWORD *)v16 + 3) = 0uLL;
    *((_OWORD *)v16 + 4) = 0uLL;
    *((_OWORD *)v16 + 2) = 0uLL;
    *((_OWORD *)v16 + 7) = 0uLL;
    *((_QWORD *)v16 + 1) = -1;
    *((_QWORD *)v16 + 3) = v16 + 40;
    *((_DWORD *)v16 + 9) = 6;
    *((_QWORD *)v16 + 12) = v16 + 112;
    *((_DWORD *)v16 + 27) = 6;
    v16 += 176;
  }
  while (v16 != v15);
  if (v7 == v4)
  {
    *(_QWORD *)(v483 + 248) = v14;
    *(_QWORD *)(v483 + 256) = v15;
    *(_QWORD *)(v483 + 264) = &v13[176 * v12];
    goto LABEL_55;
  }
  v493 = &v13[176 * v12];
  v17 = 0;
  do
  {
    v18 = &v7[v17];
    v19 = &v14[v17];
    v20 = *(_OWORD *)&v7[v17 - 176];
    *((_QWORD *)v19 - 20) = *(_QWORD *)&v7[v17 - 160];
    *((_OWORD *)v19 - 11) = v20;
    v21 = &v14[v17 - 136];
    *(_QWORD *)&v14[v17 - 152] = v21;
    v22 = (void **)&v14[v17 - 152];
    *((_QWORD *)v19 - 18) = 0x600000000;
    v23 = *(_DWORD *)&v7[v17 - 144];
    if (v23)
      v24 = v19 == v18;
    else
      v24 = 1;
    if (!v24)
    {
      v25 = (char *)*((_QWORD *)v18 - 19);
      if (v18 - 136 != v25)
      {
        *v22 = v25;
        *((_DWORD *)v19 - 36) = v23;
        *((_DWORD *)v19 - 35) = *(_DWORD *)&v7[v17 - 140];
        *((_QWORD *)v18 - 19) = v18 - 136;
        *(_DWORD *)&v7[v17 - 140] = 0;
        goto LABEL_23;
      }
      if (v23 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14[v17 - 152], (uint64_t)&v14[v17 - 136], *(unsigned int *)&v7[v17 - 144], 8);
        v26 = *((unsigned int *)v18 - 36);
        if (!(_DWORD)v26)
          goto LABEL_22;
        v25 = (char *)*((_QWORD *)v18 - 19);
        v21 = (char *)*v22;
      }
      else
      {
        v26 = *(unsigned int *)&v7[v17 - 144];
      }
      memcpy(v21, v25, 8 * v26);
LABEL_22:
      *((_DWORD *)v19 - 36) = v23;
LABEL_23:
      *((_DWORD *)v18 - 36) = 0;
    }
    *((_DWORD *)v19 - 22) = *((_DWORD *)v18 - 22);
    v27 = v19 - 64;
    *((_QWORD *)v19 - 10) = v19 - 64;
    *((_QWORD *)v19 - 9) = 0x600000000;
    v28 = *((_DWORD *)v18 - 18);
    if (v28 && v19 != v18)
    {
      v29 = &v7[v17];
      v30 = *(const void **)&v7[v17 - 80];
      v31 = (uint64_t)&v7[v17 - 64];
      if ((const void *)v31 == v30)
      {
        if (v28 < 7)
        {
          v32 = *((unsigned int *)v18 - 18);
          goto LABEL_29;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v19 - 80), (uint64_t)(v19 - 64), *((unsigned int *)v18 - 18), 8);
        v32 = *((unsigned int *)v18 - 18);
        if ((_DWORD)v32)
        {
          v30 = (const void *)*((_QWORD *)v29 - 10);
          v27 = (char *)*((_QWORD *)v19 - 10);
LABEL_29:
          memcpy(v27, v30, 8 * v32);
        }
        *((_DWORD *)v19 - 18) = v28;
      }
      else
      {
        *((_QWORD *)v19 - 10) = v30;
        *((_DWORD *)v19 - 18) = v28;
        *((_DWORD *)v19 - 17) = *(_DWORD *)&v7[v17 - 68];
        *((_QWORD *)v29 - 10) = v31;
        *(_DWORD *)&v7[v17 - 68] = 0;
      }
      *((_DWORD *)v18 - 18) = 0;
    }
    v33 = &v14[v17];
    *((_DWORD *)v33 - 4) = *(_DWORD *)&v7[v17 - 16];
    *(v33 - 8) = v7[v17 - 8];
    v17 -= 176;
  }
  while (&v7[v17] != v4);
  v7 = *(char **)(v483 + 248);
  v36 = *(char **)(v483 + 256);
  *(_QWORD *)(v483 + 248) = &v14[v17];
  *(_QWORD *)(v483 + 256) = v15;
  *(_QWORD *)(v483 + 264) = v493;
  if (v36 == v7)
  {
    v2 = v489;
    if (v7)
      goto LABEL_56;
  }
  else
  {
    v37 = v36 - 64;
    v2 = v489;
    do
    {
      v38 = (char *)*((_QWORD *)v37 - 2);
      if (v37 != v38)
        free(v38);
      v39 = (char *)*((_QWORD *)v37 - 11);
      if (v37 - 72 != v39)
        free(v39);
      v40 = v37 - 112;
      v37 -= 176;
    }
    while (v40 != v7);
LABEL_55:
    if (v7)
LABEL_56:
      operator delete(v7);
  }
LABEL_57:
  v41 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 2) + 112))(*((_QWORD *)v2 + 2));
  v42 = (*(uint64_t (**)(uint64_t, llvm::MachineFunction *))(*(_QWORD *)v41 + 352))(v41, v2);
  v43 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 2) + 112))(*((_QWORD *)v2 + 2));
  v44 = (*(uint64_t (**)(uint64_t, llvm::MachineFunction *))(*(_QWORD *)v43 + 360))(v43, v2);
  v45 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 2) + 176))(*((_QWORD *)v2 + 2));
  v46 = *((_QWORD *)v2 + 41);
  v475 = (char *)v2 + 320;
  if ((llvm::MachineFunction *)v46 != (llvm::MachineFunction *)((char *)v2 + 320))
  {
    v47 = *(_DWORD *)(v45 + 16);
    v48 = (v47 + 63) >> 6;
    v494 = __PAIR64__(v44, v42);
    do
    {
      v49 = *(_DWORD *)(v46 + 24);
      v50 = *v499;
      v51 = *v499 + 176 * v49;
      *(_QWORD *)v51 = v46;
      v52 = (float *)(v51 + 8);
      v542.val[0] = (float32x2_t)v494;
      v542.val[1] = (float32x2_t)v494;
      vst2_f32(v52, v542);
      v54 = *(_DWORD *)(v51 + 88);
      v53 = (int *)(v51 + 88);
      v55 = v53 - 16;
      v56 = v54 & 0x3F;
      v57 = *(v53 - 14);
      if ((v54 & 0x3F) != 0)
        *(_QWORD *)(*(_QWORD *)v55 + 8 * v57 - 8) &= ~(-1 << v56);
      v58 = v57;
      *v53 = v47;
      v59 = (v47 + 63) >> 6;
      LOBYTE(v60) = v47;
      if ((_DWORD)v57 != (_DWORD)v48)
      {
        if (v57 > v48)
        {
          *(v53 - 14) = v48;
          v59 = (v47 + 63) >> 6;
          LOBYTE(v60) = v47;
        }
        else
        {
          v61 = v57;
          if (v48 > *(v53 - 13))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v53 - 16), (uint64_t)(v53 - 12), (v47 + 63) >> 6, 8);
            v61 = *(v53 - 14);
            v58 = *(v53 - 14);
          }
          if (v48 != v57)
            bzero((void *)(*(_QWORD *)v55 + 8 * v61), 8 * (v48 - v57));
          v59 = v58 + v48 - v57;
          *(v53 - 14) = v59;
          v60 = *v53;
        }
      }
      v62 = v60 & 0x3F;
      if (v62)
        *(_QWORD *)(*(_QWORD *)v55 + 8 * v59 - 8) &= ~(-1 << v62);
      v63 = v50 + 176 * v49;
      v65 = *(_DWORD *)(v63 + 160);
      v64 = (int *)(v63 + 160);
      v66 = v64 - 16;
      v67 = v65 & 0x3F;
      v2 = v489;
      v68 = *(v64 - 14);
      if ((v65 & 0x3F) != 0)
        *(_QWORD *)(*(_QWORD *)v66 + 8 * v68 - 8) &= ~(-1 << v67);
      v69 = v68;
      *v64 = v47;
      v70 = (v47 + 63) >> 6;
      LOBYTE(v71) = v47;
      if ((_DWORD)v68 != (_DWORD)v48)
      {
        if (v68 > v48)
        {
          *(v64 - 14) = v48;
          v70 = (v47 + 63) >> 6;
          LOBYTE(v71) = v47;
        }
        else
        {
          v72 = v68;
          if (v48 > *(v64 - 13))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v64 - 16), (uint64_t)(v64 - 12), (v47 + 63) >> 6, 8);
            v72 = *(v64 - 14);
            v69 = *(v64 - 14);
          }
          if (v48 != v68)
            bzero((void *)(*(_QWORD *)v66 + 8 * v72), 8 * (v48 - v68));
          v70 = v69 + v48 - v68;
          *(v64 - 14) = v70;
          v71 = *v64;
        }
      }
      v73 = v71 & 0x3F;
      if (v73)
        *(_QWORD *)(*(_QWORD *)v66 + 8 * v70 - 8) &= ~(-1 << v73);
      v46 = *(_QWORD *)(v46 + 8);
    }
    while ((char *)v46 != v475);
  }
  v74 = (_DWORD *)(v483 + 272);
  v75 = *(_DWORD *)(v483 + 272);
  if (v75 <= 1 && !*(_DWORD *)(v483 + 276))
    goto LABEL_106;
  if ((v75 & 1) != 0)
  {
    v82 = (_DWORD *)(v483 + 280);
    v83 = (_DWORD *)(v483 + 600);
    goto LABEL_103;
  }
  v76 = *(unsigned int *)(v483 + 288);
  if (((2 * v75) & 0xFFFFFFFC) >= v76 || v76 < 0x41)
  {
    if (!(_DWORD)v76)
    {
LABEL_105:
      *(_DWORD *)(v483 + 272) = v76;
      *(_DWORD *)(v483 + 276) = 0;
      goto LABEL_106;
    }
    v82 = *(_DWORD **)(v483 + 280);
    v83 = &v82[5 * v76];
    do
    {
LABEL_103:
      *v82 = -1;
      v82 += 5;
    }
    while (v82 != v83);
    LODWORD(v76) = *v74 & 1;
    goto LABEL_105;
  }
  v77 = __clz((v75 >> 1) - 1);
  if (v77 == 28)
    v78 = 64;
  else
    v78 = 1 << (33 - v77);
  if (v75 >= 2)
    v79 = v78;
  else
    v79 = 0;
  if ((_DWORD)v79 == (_DWORD)v76)
  {
    *(_QWORD *)(v483 + 272) = 0;
    v80 = *(_DWORD **)(v483 + 280);
    v81 = 20 * v76;
    do
    {
      *v80 = -1;
      v80 += 5;
      v81 -= 20;
    }
    while (v81);
    goto LABEL_106;
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(v483 + 280), 4);
  if (v79 <= 0x10)
  {
    *(_QWORD *)v74 = 1;
    goto LABEL_703;
  }
  *(_DWORD *)(v483 + 272) &= ~1u;
  v319 = operator new(20 * v79, (std::align_val_t)4uLL);
  *(_QWORD *)(v483 + 280) = v319;
  *(_QWORD *)(v483 + 288) = v79;
  v320 = *(_DWORD *)(v483 + 272);
  *(_QWORD *)(v483 + 272) = v320 & 1;
  if ((v320 & 1) != 0)
  {
LABEL_703:
    v319 = (_DWORD *)(v483 + 280);
    v321 = (_DWORD *)(v483 + 600);
    goto LABEL_704;
  }
  v321 = &v319[5 * v79];
  do
  {
LABEL_704:
    *v319 = -1;
    v319 += 5;
  }
  while (v319 != v321);
LABEL_106:
  v84 = *(_QWORD *)(v483 + 248);
  v85 = 176 * *(int *)(*((_QWORD *)v2 + 41) + 24);
  v503 = v506;
  v505 = 4;
  v506[0] = *(_QWORD *)(v84 + v85);
  v479 = (int *)(v483 + 272);
  v86 = 1;
  while (2)
  {
    v87 = *((_QWORD *)v503 + v86 - 1);
    v504 = v86 - 1;
    v476 = *v499;
    v477 = *(_DWORD *)(v87 + 24);
    v88 = (_DWORD *)(*v499 + 176 * v477);
    v89 = v88[2];
    v495 = v88[4];
    v90 = *(_QWORD *)(*(_QWORD *)v88 + 32);
    v91 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v90 + 16) + 176))(*(_QWORD *)(v90 + 16)) + 16);
    v516 = v518;
    v517 = 0x600000000;
    sub_1C4765AA4((char *)&v516, (v91 + 63) >> 6, 0);
    v520 = v91;
    v508 = v510;
    v509 = 0x600000000;
    sub_1C4765AA4((char *)&v508, (v91 + 63) >> 6, 0);
    v512 = v91;
    v478 = v88;
    v92 = *(_QWORD *)v88 + 48;
    v93 = *(_QWORD *)(*(_QWORD *)v88 + 56);
    if (v93 != v92)
    {
      v480 = 0;
      v486 = 0;
      v94 = (_BYTE *)(v483 + 272);
      do
      {
        if (**(_WORD **)(v93 + 16) == 3)
        {
          v95 = *(_DWORD *)(*(_QWORD *)(v93 + 32) + 16);
          v96 = *(_QWORD *)(v90 + 440);
          switch(*(_DWORD *)(v96 + 80 * v95))
          {
            case 3:
              v490 = 0;
              v97 = 0;
              v98 = *(_DWORD *)(v96 + 80 * v95 + 20);
              v99 = *(_DWORD *)(v96 + 80 * v95 + 20) >> 8;
              goto LABEL_119;
            case 5:
              v495 = *(_DWORD *)(v96 + 80 * v95 + 16);
              break;
            case 6:
              v89 = *(_DWORD *)(v96 + 80 * v95 + 20);
              break;
            case 7:
              v102 = v96 + 80 * v95;
              v89 = *(_DWORD *)(v102 + 20);
              v495 = *(_DWORD *)(v102 + 16);
              break;
            case 8:
              v490 = 0;
              v97 = 0;
              v98 = (*(_BYTE *)(v96 + 80 * v95 + 20) - v89);
              v99 = (*(_DWORD *)(v96 + 80 * v95 + 20) - v89) >> 8;
LABEL_119:
              v486 = v99;
              v101 = 0x100000000;
              goto LABEL_120;
            case 9:
              v89 += *(_DWORD *)(v96 + 80 * v95 + 20);
              break;
            case 0xB:
              v100 = *(unsigned int *)(v96 + 80 * v95 + 16);
              *(_QWORD *)((char *)v508 + ((v100 >> 3) & 0x1FFFFFF8)) |= 1 << v100;
              break;
            case 0xD:
              v98 = 0;
              v101 = 0;
              v490 = *(_DWORD *)(v96 + 80 * v95 + 20);
              v480 = *(_DWORD *)(v96 + 80 * v95 + 20) >> 8;
              v97 = 0x100000000;
LABEL_120:
              v103 = v96 + 80 * v95;
              v105 = *(_DWORD *)(v103 + 16);
              v104 = (int *)(v103 + 16);
              v106 = sub_1C507F26C((uint64_t)v94, v105);
              if ((*v94 & 1) != 0)
              {
                v107 = v483 + 280;
                v108 = 16;
              }
              else
              {
                v107 = *(_QWORD *)(v483 + 280);
                v108 = *(_DWORD *)(v483 + 288);
              }
              if (v107 + 20 * v108 != v106)
                goto LABEL_133;
              v109 = *v104;
              v502 = 0;
              if ((sub_1C507F2CC((uint64_t)v94, v109, &v502) & 1) != 0)
                goto LABEL_133;
              v110 = v502;
              v500[0] = v502;
              v111 = *(_DWORD *)v94;
              if ((*(_DWORD *)v94 & 1) != 0)
                v112 = 16;
              else
                v112 = *(_DWORD *)(v483 + 288);
              v113 = *(_DWORD *)v94 & 1;
              if (4 * (v111 >> 1) + 4 >= 3 * v112)
              {
                v112 *= 2;
              }
              else if (v112 + ~(v111 >> 1) - *(_DWORD *)(v483 + 276) > v112 >> 3)
              {
                goto LABEL_130;
              }
              if (v112 >= 0x11)
              {
                v114 = (v112 - 1) | ((unint64_t)(v112 - 1) >> 1);
                v115 = v114 | (v114 >> 2) | ((v114 | (v114 >> 2)) >> 4);
                v116 = ((v115 | (v115 >> 8)) >> 16) | v115 | (v115 >> 8);
                if ((v116 + 1) > 0x40)
                  v112 = v116 + 1;
                else
                  v112 = 64;
              }
              if ((v111 & 1) != 0)
              {
                v120 = 0;
                v121 = &v524;
                do
                {
                  v122 = *(_DWORD *)(v483 + v120 + 280);
                  if (v122 <= 0xFFFFFFFD)
                  {
                    *(_DWORD *)v121 = v122;
                    *(_OWORD *)((char *)v121 + 4) = *(_OWORD *)(v483 + v120 + 284);
                    v121 = (unsigned __int8 **)((char *)v121 + 20);
                  }
                  v120 += 20;
                }
                while (v120 != 320);
                if (v112 > 0x10)
                {
                  *(_DWORD *)(v483 + 272) &= ~1u;
                  v471 = v112;
                  v474 = v121;
                  v123 = operator new(20 * v112, (std::align_val_t)4uLL);
                  v121 = v474;
                  *(_QWORD *)(v483 + 280) = v123;
                  *(_QWORD *)(v483 + 288) = v471;
                  v94 = (_BYTE *)(v483 + 272);
                }
                sub_1C507F37C((uint64_t)v94, (uint64_t)&v524, (uint64_t)v121);
              }
              else
              {
                v473 = *(_QWORD *)(v483 + 280);
                v117 = *(_DWORD *)(v483 + 288);
                if (v112 > 0x10)
                {
                  v470 = v112;
                  v472 = *(_DWORD *)(v483 + 288);
                  v124 = operator new(20 * v112, (std::align_val_t)4uLL);
                  v117 = v472;
                  *(_QWORD *)(v483 + 280) = v124;
                  *(_QWORD *)(v483 + 288) = v470;
                  v119 = v483 + 272;
                }
                else
                {
                  v118 = v111 | 1;
                  v119 = v483 + 272;
                  *v479 = v118;
                }
                sub_1C507F37C(v119, v473, v473 + 20 * v117);
                MEMORY[0x1CAA32FB4](v473, 4);
                v94 = (_BYTE *)(v483 + 272);
              }
              sub_1C507F2CC((uint64_t)v94, v109, v500);
              v111 = *(_DWORD *)v94;
              v110 = v500[0];
              v113 = *(_DWORD *)v94 & 1;
LABEL_130:
              *(_DWORD *)v94 = (v111 & 0xFFFFFFFE | v113) + 2;
              if (*(_DWORD *)v110 != -1)
                --*(_DWORD *)(v483 + 276);
              *(_DWORD *)v110 = v109;
              *(_QWORD *)(v110 + 4) = v490 | (v480 << 8) | v97;
              *(_QWORD *)(v110 + 12) = v98 | (v486 << 8) | v101;
LABEL_133:
              *(_QWORD *)((char *)v516 + (((unint64_t)*v104 >> 3) & 0x1FFFFFF8)) |= 1 << *v104;
              break;
            default:
              break;
          }
        }
        if ((*(_BYTE *)v93 & 4) == 0)
        {
          while ((*(_WORD *)(v93 + 44) & 8) != 0)
            v93 = *(_QWORD *)(v93 + 8);
        }
        v93 = *(_QWORD *)(v93 + 8);
      }
      while (v93 != v92);
    }
    v125 = v476 + 176 * v477;
    *(_DWORD *)(v125 + 12) = v89;
    v126 = v125 + 12;
    *(_BYTE *)(v126 + 156) = 1;
    *(_DWORD *)(v126 + 8) = v495;
    v127 = (const void **)(v126 + 84);
    v128 = *(_DWORD *)(v126 + 76);
    v496 = (int *)(v126 + 148);
    v129 = *(unsigned int *)(v126 + 92);
    if ((*(_DWORD *)(v126 + 148) & 0x3F) != 0)
      *((_QWORD *)*v127 + v129 - 1) &= ~(-1 << (*(_DWORD *)(v126 + 148) & 0x3F));
    v130 = v129;
    *v496 = v128;
    v131 = v128 + 63;
    if ((_DWORD)v129 != (v128 + 63) >> 6)
    {
      v132 = v131 >> 6;
      if (v129 > v132)
      {
        *(_DWORD *)(v126 + 92) = v132;
        v130 = v131 >> 6;
      }
      else
      {
        v133 = v129;
        if (v132 > *(_DWORD *)(v126 + 96))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v126 + 84, v126 + 100, v132, 8);
          v133 = *(unsigned int *)(v126 + 92);
          v130 = *(_DWORD *)(v126 + 92);
        }
        if (v132 != v129)
          bzero((char *)*v127 + 8 * v133, 8 * (v132 - v129));
        v130 += v132 - v129;
        *(_DWORD *)(v126 + 92) = v130;
        v128 = *v496;
      }
    }
    v134 = v128 & 0x3F;
    if (v134)
      *((_QWORD *)*v127 + v130 - 1) &= ~(-1 << v134);
    v135 = *(unsigned int *)(v476 + 176 * v477 + 32);
    if ((_DWORD)v135)
    {
      v136 = *(uint64_t **)(v126 + 12);
      v137 = (uint64_t *)v516;
      v138 = (uint64_t *)v508;
      v139 = (uint64_t *)*v127;
      do
      {
        v141 = *v136++;
        v140 = v141;
        v143 = *v137++;
        v142 = v143;
        v144 = *v138++;
        *v139++ = (v142 | v140) & ~v144;
        --v135;
      }
      while (v135);
    }
    if (v134)
      *((_QWORD *)*v127 + v130 - 1) &= ~(-1 << v134);
    if (v508 != v510)
      free(v508);
    if (v516 != v518)
      free(v516);
    v145 = *(uint64_t **)(*(_QWORD *)v478 + 88);
    v146 = *(uint64_t **)(*(_QWORD *)v478 + 96);
    v147 = v499;
    if (v145 != v146)
    {
      while (2)
      {
        v148 = *v145;
        v149 = *(_DWORD *)(*v145 + 24);
        v150 = *v147;
        if (*(_BYTE *)(*v147 + 176 * v149 + 168))
          goto LABEL_195;
        v151 = (_DWORD *)(v150 + 176 * v149);
        v151[2] = *(_DWORD *)v126;
        v151[4] = *(_DWORD *)(v126 + 8);
        v152 = (void **)(v151 + 6);
        if (v151 + 6 == (_DWORD *)v127)
          goto LABEL_192;
        v153 = *(unsigned int *)(v126 + 92);
        v154 = v151[8];
        if (v154 >= v153)
        {
          if ((_DWORD)v153)
            memmove(*v152, *v127, 8 * v153);
          goto LABEL_191;
        }
        if (v151[9] < v153)
        {
          v151[8] = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v151 + 6), (uint64_t)(v151 + 10), v153, 8);
        }
        else if ((_DWORD)v154)
        {
          memmove(*v152, *v127, 8 * v154);
LABEL_189:
          v155 = *(unsigned int *)(v126 + 92);
          if (v154 != v155)
            memcpy((char *)*v152 + 8 * v154, (char *)*v127 + 8 * v154, (_BYTE *)*v127 + 8 * v155 - ((_BYTE *)*v127 + 8 * v154));
LABEL_191:
          *((_DWORD *)v152 + 2) = v153;
LABEL_192:
          *(_DWORD *)(v150 + 176 * v149 + 88) = *v496;
          v156 = v504;
          if (v504 >= (unint64_t)v505)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v503, (uint64_t)v506, v504 + 1, 8);
            v156 = v504;
          }
          *((_QWORD *)v503 + v156) = v148;
          ++v504;
          v147 = v499;
LABEL_195:
          if (++v145 == v146)
            goto LABEL_196;
          continue;
        }
        break;
      }
      v154 = 0;
      goto LABEL_189;
    }
LABEL_196:
    v86 = v504;
    if (v504)
      continue;
    break;
  }
  if (v503 != v506)
    free(v503);
  v157 = (uint64_t *)v489;
  if (byte_1ED7F51E0)
  {
    v516 = v489;
    sub_1C61D9C90((uint64_t)&v516, &v524);
    v322 = v519;
    v516 = v519;
    v323 = (unsigned __int8 *)__src;
    if (__src == v524)
    {
      v517 = (uint64_t)v519;
      v324 = (unsigned __int8 *)__src;
    }
    else
    {
      v468 = v526;
      v322 = malloc_type_malloc(8 * v526, 0x4065EBACuLL);
      if (!v322)
      {
        if (v468)
          goto LABEL_716;
        v322 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        v157 = (uint64_t *)v489;
        if (!v322)
          goto LABEL_716;
      }
      v517 = (uint64_t)v322;
      v324 = v524;
      v323 = (unsigned __int8 *)__src;
    }
    v325 = v527;
    v518[0] = v526;
    if (v323 == v324)
      v326 = v527;
    else
      v326 = v526;
    if (v326)
    {
      memmove(v322, v323, 8 * v326);
      v325 = v527;
    }
    v518[1] = v325;
    v518[2] = v528;
    v523 = 0;
    v521 = 0;
    v522 = 0;
    sub_1C4D6CDA0(&v521, v532, v533, 0xAAAAAAAAAAAAAAABLL * ((v533 - (_BYTE *)v532) >> 3));
    v327 = v511;
    v508 = v511;
    v328 = v535;
    if (v535 == v534)
    {
      v509 = (uint64_t)v511;
      v329 = v535;
      goto LABEL_470;
    }
    v469 = v536;
    v327 = malloc_type_malloc(8 * v536, 0x4065EBACuLL);
    if (v327 || !v469 && (v327 = malloc_type_malloc(1uLL, 0x4065EBACuLL), v157 = (uint64_t *)v489, v327))
    {
      v509 = (uint64_t)v327;
      v329 = v534;
      v328 = v535;
LABEL_470:
      v330 = v537;
      v510[0] = v536;
      if (v328 == v329)
        v331 = v537;
      else
        v331 = v536;
      if (v331)
      {
        memmove(v327, v328, 8 * v331);
        v330 = v537;
      }
      v510[1] = v330;
      v510[2] = v538;
      v514 = 0;
      v515 = 0;
      v513 = 0;
      sub_1C4D6CDA0(&v513, v539, v540, 0xAAAAAAAAAAAAAAABLL * ((v540 - (_BYTE *)v539) >> 3));
      v492 = 0;
      while (1)
      {
        v332 = (uint64_t)v513;
        if (v522 - (_BYTE *)v521 == v514 - v513)
        {
          if (v521 == v522)
          {
LABEL_682:
            if (v513)
            {
              v514 = v513;
              operator delete(v513);
            }
            if ((void *)v509 != v508)
              free((void *)v509);
            if (v521)
            {
              v522 = (char *)v521;
              operator delete(v521);
            }
            if ((void *)v517 != v516)
              free((void *)v517);
            if (v539)
            {
              v540 = v539;
              operator delete(v539);
            }
            if (v535 != v534)
              free(v535);
            if (v532)
            {
              v533 = v532;
              operator delete(v532);
            }
            if (__src != v524)
              free(__src);
            if (v492)
            {
              v508 = "Found ";
              v511[0] = 259;
              v507 = 264;
              LODWORD(v503) = v492;
              sub_1C6131AAC((uint64_t *)&v508, (uint64_t *)&v503, (uint64_t)&v516);
              v500[0] = (uint64_t)" in/out CFI information errors.";
              v501 = 259;
              sub_1C6131AAC((uint64_t *)&v516, v500, (uint64_t)&v524);
              llvm::report_fatal_error((uint64_t)&v524, 1);
            }
            goto LABEL_202;
          }
          v333 = v513 + 8;
          v334 = (char *)v521 + 8;
          while (1)
          {
            v335 = v334 - 8;
            if (*((_QWORD *)v334 - 1) != *((_QWORD *)v333 - 1))
              break;
            v336 = v333[8];
            if (v334[8])
              v337 = v336 == 0;
            else
              v337 = 1;
            if (v337)
            {
              if ((v334[8] == 0) == (v336 != 0))
                break;
            }
            else if (*(_QWORD *)v334 != *(_QWORD *)v333)
            {
              break;
            }
            v333 += 24;
            v334 += 24;
            if (v335 + 24 == v522)
              goto LABEL_682;
          }
        }
        v338 = *((_QWORD *)v522 - 3);
        v339 = *(_QWORD *)(v338 + 88);
        v482 = *(_QWORD *)(v338 + 96);
        if (v339 != v482)
          break;
LABEL_491:
        sub_1C61D9EC8((char *)&v516);
      }
      v498 = *v499 + 176 * *(int *)(v338 + 24);
      v340 = v499;
      v488 = (int *)(v498 + 12);
      v485 = (_DWORD *)(v498 + 20);
      v341 = (const void **)(v498 + 96);
      v342 = (int *)(v498 + 160);
      while (1)
      {
        v343 = *(_DWORD *)(*(_QWORD *)v339 + 24);
        v344 = *v340;
        v345 = (int *)(*v340 + 176 * v343);
        if (v345[2] == *v488 && *(_DWORD *)(v344 + 176 * v343 + 16) == *v485)
          goto LABEL_580;
        v332 = *(_QWORD *)v345;
        if (*(_QWORD *)(*(_QWORD *)v345 + 88) == *(_QWORD *)(*(_QWORD *)v345 + 96))
        {
          v332 = sub_1C498FBAC(v332);
          if (!(_DWORD)v332)
            goto LABEL_596;
        }
        v346 = (llvm::raw_ostream *)llvm::errs((llvm *)v332);
        v347 = (void *)*((_QWORD *)v346 + 4);
        if (*((_QWORD *)v346 + 3) - (_QWORD)v347 > 0x45uLL)
        {
          qmemcpy(v347, "*** Inconsistent CFA register and/or offset between pred and succ ***\n", 70);
          *((_QWORD *)v346 + 4) += 70;
        }
        else
        {
          v346 = llvm::raw_ostream::write(v346, "*** Inconsistent CFA register and/or offset between pred and succ ***\n", 0x46uLL);
        }
        v348 = (llvm::raw_ostream *)llvm::errs(v346);
        v349 = v348;
        v350 = *((_QWORD *)v348 + 4);
        if ((unint64_t)(*((_QWORD *)v348 + 3) - v350) > 5)
        {
          *(_WORD *)(v350 + 4) = 8250;
          *(_DWORD *)v350 = 1684370000;
          *((_QWORD *)v348 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v348, "Pred: ", 6uLL);
        }
        v351 = *(llvm::Value **)(*(_QWORD *)v498 + 16);
        if (!v351)
          goto LABEL_504;
        Name = llvm::Value::getName(v351);
        v354 = v352;
        v355 = (_WORD *)*((_QWORD *)v349 + 4);
        if (v352 > *((_QWORD *)v349 + 3) - (_QWORD)v355)
          break;
        if (v352)
        {
          memcpy(v355, Name, v352);
          v355 = (_WORD *)(*((_QWORD *)v349 + 4) + v354);
          *((_QWORD *)v349 + 4) = v355;
        }
LABEL_507:
        if (*((_QWORD *)v349 + 3) - (_QWORD)v355 > 1uLL)
        {
          *v355 = 8992;
          *((_QWORD *)v349 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v349, " #", 2uLL);
        }
        v356 = *(int *)(*(_QWORD *)v498 + 24);
        if ((v356 & 0x80000000) != 0)
        {
          v356 = -(uint64_t)v356;
          v357 = v349;
          v358 = 1;
        }
        else
        {
          v357 = v349;
          v358 = 0;
        }
        sub_1C5E21910(v357, v356, 0, 0, v358);
        v359 = (_DWORD *)*((_QWORD *)v349 + 4);
        if (*((_QWORD *)v349 + 3) - (_QWORD)v359 > 3uLL)
        {
          *v359 = 544106784;
          *((_QWORD *)v349 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v349, " in ", 4uLL);
        }
        v361 = llvm::Value::getName(**(llvm::Value ***)(*(_QWORD *)v498 + 32));
        v362 = v360;
        v363 = (_WORD *)*((_QWORD *)v349 + 4);
        if (v360 <= *((_QWORD *)v349 + 3) - (_QWORD)v363)
        {
          if (v360)
          {
            memcpy(v363, v361, v360);
            v363 = (_WORD *)(*((_QWORD *)v349 + 4) + v362);
            *((_QWORD *)v349 + 4) = v363;
          }
        }
        else
        {
          llvm::raw_ostream::write(v349, v361, v360);
          v363 = (_WORD *)*((_QWORD *)v349 + 4);
        }
        if (*((_QWORD *)v349 + 3) - (_QWORD)v363 > 0x11uLL)
        {
          v363[8] = 14951;
          *(_OWORD *)v363 = *(_OWORD *)" outgoing CFA Reg:";
          *((_QWORD *)v349 + 4) += 18;
        }
        else
        {
          llvm::raw_ostream::write(v349, " outgoing CFA Reg:", 0x12uLL);
        }
        v364 = sub_1C5E21910(v349, *v485, 0, 0, 0);
        v365 = (_BYTE *)*((_QWORD *)v349 + 4);
        if (*((_BYTE **)v349 + 3) == v365)
        {
          v364 = llvm::raw_ostream::write(v349, "\n", 1uLL);
        }
        else
        {
          *v365 = 10;
          ++*((_QWORD *)v349 + 4);
        }
        v366 = (llvm::raw_ostream *)llvm::errs(v364);
        v367 = v366;
        v368 = *((_QWORD *)v366 + 4);
        if ((unint64_t)(*((_QWORD *)v366 + 3) - v368) > 5)
        {
          *(_WORD *)(v368 + 4) = 8250;
          *(_DWORD *)v368 = 1684370000;
          *((_QWORD *)v366 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v366, "Pred: ", 6uLL);
        }
        v369 = *(llvm::Value **)(*(_QWORD *)v498 + 16);
        if (!v369)
          goto LABEL_526;
        v371 = llvm::Value::getName(v369);
        v372 = v370;
        v373 = (_WORD *)*((_QWORD *)v367 + 4);
        if (v370 > *((_QWORD *)v367 + 3) - (_QWORD)v373)
        {
          llvm::raw_ostream::write(v367, v371, v370);
LABEL_526:
          v373 = (_WORD *)*((_QWORD *)v367 + 4);
          goto LABEL_529;
        }
        if (v370)
        {
          memcpy(v373, v371, v370);
          v373 = (_WORD *)(*((_QWORD *)v367 + 4) + v372);
          *((_QWORD *)v367 + 4) = v373;
        }
LABEL_529:
        if (*((_QWORD *)v367 + 3) - (_QWORD)v373 > 1uLL)
        {
          *v373 = 8992;
          *((_QWORD *)v367 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v367, " #", 2uLL);
        }
        v374 = *(int *)(*(_QWORD *)v498 + 24);
        if ((v374 & 0x80000000) != 0)
        {
          v374 = -(uint64_t)v374;
          v375 = v367;
          v376 = 1;
        }
        else
        {
          v375 = v367;
          v376 = 0;
        }
        sub_1C5E21910(v375, v374, 0, 0, v376);
        v377 = (_DWORD *)*((_QWORD *)v367 + 4);
        if (*((_QWORD *)v367 + 3) - (_QWORD)v377 > 3uLL)
        {
          *v377 = 544106784;
          *((_QWORD *)v367 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v367, " in ", 4uLL);
        }
        v379 = llvm::Value::getName(**(llvm::Value ***)(*(_QWORD *)v498 + 32));
        v380 = v378;
        v381 = (void *)*((_QWORD *)v367 + 4);
        if (v378 <= *((_QWORD *)v367 + 3) - (_QWORD)v381)
        {
          if (v378)
          {
            memcpy(v381, v379, v378);
            v381 = (void *)(*((_QWORD *)v367 + 4) + v380);
            *((_QWORD *)v367 + 4) = v381;
          }
        }
        else
        {
          llvm::raw_ostream::write(v367, v379, v378);
          v381 = (void *)*((_QWORD *)v367 + 4);
        }
        if (*((_QWORD *)v367 + 3) - (_QWORD)v381 > 0x14uLL)
        {
          qmemcpy(v381, " outgoing CFA Offset:", 21);
          *((_QWORD *)v367 + 4) += 21;
        }
        else
        {
          llvm::raw_ostream::write(v367, " outgoing CFA Offset:", 0x15uLL);
        }
        v382 = *v488;
        if ((v382 & 0x80000000) != 0)
        {
          v382 = -(uint64_t)v382;
          v383 = v367;
          v384 = 1;
        }
        else
        {
          v383 = v367;
          v384 = 0;
        }
        v385 = sub_1C5E21910(v383, v382, 0, 0, v384);
        v386 = (_BYTE *)*((_QWORD *)v367 + 4);
        if (*((_BYTE **)v367 + 3) == v386)
        {
          v385 = llvm::raw_ostream::write(v367, "\n", 1uLL);
        }
        else
        {
          *v386 = 10;
          ++*((_QWORD *)v367 + 4);
        }
        v387 = (llvm::raw_ostream *)llvm::errs(v385);
        v388 = v387;
        v389 = *((_QWORD *)v387 + 4);
        if ((unint64_t)(*((_QWORD *)v387 + 3) - v389) > 5)
        {
          *(_WORD *)(v389 + 4) = 8250;
          *(_DWORD *)v389 = 1667462483;
          *((_QWORD *)v387 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v387, "Succ: ", 6uLL);
        }
        v390 = *(llvm::Value **)(*(_QWORD *)v345 + 16);
        if (!v390)
          goto LABEL_550;
        v392 = llvm::Value::getName(v390);
        v393 = v391;
        v394 = (_WORD *)*((_QWORD *)v388 + 4);
        if (v391 > *((_QWORD *)v388 + 3) - (_QWORD)v394)
        {
          llvm::raw_ostream::write(v388, v392, v391);
LABEL_550:
          v394 = (_WORD *)*((_QWORD *)v388 + 4);
          goto LABEL_553;
        }
        if (v391)
        {
          memcpy(v394, v392, v391);
          v394 = (_WORD *)(*((_QWORD *)v388 + 4) + v393);
          *((_QWORD *)v388 + 4) = v394;
        }
LABEL_553:
        if (*((_QWORD *)v388 + 3) - (_QWORD)v394 > 1uLL)
        {
          *v394 = 8992;
          *((_QWORD *)v388 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v388, " #", 2uLL);
        }
        v395 = *(int *)(*(_QWORD *)v345 + 24);
        if ((v395 & 0x80000000) != 0)
        {
          v395 = -(uint64_t)v395;
          v396 = v388;
          v397 = 1;
        }
        else
        {
          v396 = v388;
          v397 = 0;
        }
        sub_1C5E21910(v396, v395, 0, 0, v397);
        v398 = *((_QWORD *)v388 + 4);
        if ((unint64_t)(*((_QWORD *)v388 + 3) - v398) > 0x11)
        {
          *(_WORD *)(v398 + 16) = 14951;
          *(_OWORD *)v398 = *(_OWORD *)" incoming CFA Reg:";
          *((_QWORD *)v388 + 4) += 18;
        }
        else
        {
          llvm::raw_ostream::write(v388, " incoming CFA Reg:", 0x12uLL);
        }
        v399 = sub_1C5E21910(v388, *(unsigned int *)(v344 + 176 * v343 + 16), 0, 0, 0);
        v400 = (_BYTE *)*((_QWORD *)v388 + 4);
        if (*((_BYTE **)v388 + 3) == v400)
        {
          v399 = llvm::raw_ostream::write(v388, "\n", 1uLL);
        }
        else
        {
          *v400 = 10;
          ++*((_QWORD *)v388 + 4);
        }
        v401 = (llvm::raw_ostream *)llvm::errs(v399);
        v402 = v401;
        v403 = *((_QWORD *)v401 + 4);
        if ((unint64_t)(*((_QWORD *)v401 + 3) - v403) > 5)
        {
          *(_WORD *)(v403 + 4) = 8250;
          *(_DWORD *)v403 = 1667462483;
          *((_QWORD *)v401 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v401, "Succ: ", 6uLL);
        }
        v404 = *(llvm::Value **)(*(_QWORD *)v345 + 16);
        if (v404)
        {
          v406 = llvm::Value::getName(v404);
          v407 = v405;
          v408 = (_WORD *)*((_QWORD *)v402 + 4);
          if (v405 <= *((_QWORD *)v402 + 3) - (_QWORD)v408)
          {
            if (v405)
            {
              memcpy(v408, v406, v405);
              v408 = (_WORD *)(*((_QWORD *)v402 + 4) + v407);
              *((_QWORD *)v402 + 4) = v408;
            }
            goto LABEL_569;
          }
          llvm::raw_ostream::write(v402, v406, v405);
        }
        v408 = (_WORD *)*((_QWORD *)v402 + 4);
LABEL_569:
        if (*((_QWORD *)v402 + 3) - (_QWORD)v408 > 1uLL)
        {
          *v408 = 8992;
          *((_QWORD *)v402 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v402, " #", 2uLL);
        }
        v409 = *(int *)(*(_QWORD *)v345 + 24);
        if ((v409 & 0x80000000) != 0)
        {
          v409 = -(uint64_t)v409;
          v410 = v402;
          v411 = 1;
        }
        else
        {
          v410 = v402;
          v411 = 0;
        }
        sub_1C5E21910(v410, v409, 0, 0, v411);
        v412 = (void *)*((_QWORD *)v402 + 4);
        if (*((_QWORD *)v402 + 3) - (_QWORD)v412 > 0x14uLL)
        {
          qmemcpy(v412, " incoming CFA Offset:", 21);
          *((_QWORD *)v402 + 4) += 21;
        }
        else
        {
          llvm::raw_ostream::write(v402, " incoming CFA Offset:", 0x15uLL);
        }
        v413 = v345[2];
        if ((v413 & 0x80000000) != 0)
        {
          v413 = -(uint64_t)v413;
          v414 = v402;
          v415 = 1;
        }
        else
        {
          v414 = v402;
          v415 = 0;
        }
        v332 = (uint64_t)sub_1C5E21910(v414, v413, 0, 0, v415);
        v416 = (_BYTE *)*((_QWORD *)v402 + 4);
        if (*((_BYTE **)v402 + 3) == v416)
        {
          v332 = (uint64_t)llvm::raw_ostream::write(v402, "\n", 1uLL);
        }
        else
        {
          *v416 = 10;
          ++*((_QWORD *)v402 + 4);
        }
        ++v492;
LABEL_580:
        v417 = v344 + 176 * v343;
        v419 = *(_DWORD *)(v417 + 88);
        v418 = (int *)(v417 + 88);
        if (v419 != *v342
          || (v332 = memcmp(*((const void **)v418 - 8), *v341, 8 * *(v418 - 14)), (_DWORD)v332))
        {
          v420 = (llvm::raw_ostream *)llvm::errs((llvm *)v332);
          v421 = v420;
          v422 = (void *)*((_QWORD *)v420 + 4);
          if (*((_QWORD *)v420 + 3) - (_QWORD)v422 > 0x3CuLL)
          {
            qmemcpy(v422, "*** Inconsistent CSR Saved between pred and succ in function ", 61);
            *((_QWORD *)v420 + 4) += 61;
          }
          else
          {
            llvm::raw_ostream::write(v420, "*** Inconsistent CSR Saved between pred and succ in function ", 0x3DuLL);
          }
          v424 = llvm::Value::getName(**(llvm::Value ***)(*(_QWORD *)v498 + 32));
          v425 = v423;
          v426 = (llvm::raw_ostream *)*((_QWORD *)v421 + 4);
          if (v423 <= *((_QWORD *)v421 + 3) - (_QWORD)v426)
          {
            if (v423)
            {
              memcpy(v426, v424, v423);
              v426 = (llvm::raw_ostream *)(*((_QWORD *)v421 + 4) + v425);
              *((_QWORD *)v421 + 4) = v426;
            }
          }
          else
          {
            llvm::raw_ostream::write(v421, v424, v423);
            v426 = (llvm::raw_ostream *)*((_QWORD *)v421 + 4);
          }
          if (*((_QWORD *)v421 + 3) - (_QWORD)v426 > 4uLL)
          {
            *((_BYTE *)v426 + 4) = 10;
            *(_DWORD *)v426 = 707406368;
            *((_QWORD *)v421 + 4) += 5;
          }
          else
          {
            v426 = llvm::raw_ostream::write(v421, " ***\n", 5uLL);
          }
          v427 = (llvm::raw_ostream *)llvm::errs(v426);
          v428 = v427;
          v429 = *((_QWORD *)v427 + 4);
          if ((unint64_t)(*((_QWORD *)v427 + 3) - v429) > 5)
          {
            *(_WORD *)(v429 + 4) = 8250;
            *(_DWORD *)v429 = 1684370000;
            *((_QWORD *)v427 + 4) += 6;
          }
          else
          {
            llvm::raw_ostream::write(v427, "Pred: ", 6uLL);
          }
          v430 = *(llvm::Value **)(*(_QWORD *)v498 + 16);
          if (v430)
          {
            v432 = llvm::Value::getName(v430);
            v433 = v431;
            v434 = (_WORD *)*((_QWORD *)v428 + 4);
            if (v431 > *((_QWORD *)v428 + 3) - (_QWORD)v434)
            {
              llvm::raw_ostream::write(v428, v432, v431);
              goto LABEL_595;
            }
            if (v431)
            {
              memcpy(v434, v432, v431);
              v434 = (_WORD *)(*((_QWORD *)v428 + 4) + v433);
              *((_QWORD *)v428 + 4) = v434;
            }
          }
          else
          {
LABEL_595:
            v434 = (_WORD *)*((_QWORD *)v428 + 4);
          }
          if (*((_QWORD *)v428 + 3) - (_QWORD)v434 > 1uLL)
          {
            *v434 = 8992;
            *((_QWORD *)v428 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v428, " #", 2uLL);
          }
          v435 = *(int *)(*(_QWORD *)v498 + 24);
          if ((v435 & 0x80000000) != 0)
          {
            v435 = -(uint64_t)v435;
            v436 = v428;
            v437 = 1;
          }
          else
          {
            v436 = v428;
            v437 = 0;
          }
          sub_1C5E21910(v436, v435, 0, 0, v437);
          v438 = (void *)*((_QWORD *)v428 + 4);
          if (*((_QWORD *)v428 + 3) - (_QWORD)v438 > 0x14uLL)
          {
            qmemcpy(v438, " outgoing CSR Saved: ", 21);
            *((_QWORD *)v428 + 4) += 21;
          }
          else
          {
            llvm::raw_ostream::write(v428, " outgoing CSR Saved: ", 0x15uLL);
          }
          for (i = (llvm *)sub_1C476B7EC((uint64_t)v341); ; i = (llvm *)sub_1C476BA0C(v341, v440 + 1, *v342, 1u))
          {
            v440 = (int)i;
            if ((_DWORD)i == -1)
              break;
            v441 = (llvm::raw_ostream *)llvm::errs(i);
            v442 = v441;
            if (v440 < 0)
            {
              v443 = -(uint64_t)v440;
              v444 = 1;
            }
            else
            {
              v443 = v440;
              v444 = 0;
            }
            sub_1C5E21910(v441, v443, 0, 0, v444);
            v445 = (_BYTE *)*((_QWORD *)v442 + 4);
            if (*((_BYTE **)v442 + 3) == v445)
            {
              llvm::raw_ostream::write(v442, " ", 1uLL);
            }
            else
            {
              *v445 = 32;
              ++*((_QWORD *)v442 + 4);
            }
          }
          v446 = (llvm::raw_ostream *)llvm::errs(i);
          v447 = (_BYTE *)*((_QWORD *)v446 + 4);
          if (*((_BYTE **)v446 + 3) == v447)
          {
            v446 = llvm::raw_ostream::write(v446, "\n", 1uLL);
          }
          else
          {
            *v447 = 10;
            ++*((_QWORD *)v446 + 4);
          }
          v448 = (llvm::raw_ostream *)llvm::errs(v446);
          v449 = v448;
          v450 = *((_QWORD *)v448 + 4);
          if ((unint64_t)(*((_QWORD *)v448 + 3) - v450) > 5)
          {
            *(_WORD *)(v450 + 4) = 8250;
            *(_DWORD *)v450 = 1667462483;
            *((_QWORD *)v448 + 4) += 6;
          }
          else
          {
            llvm::raw_ostream::write(v448, "Succ: ", 6uLL);
          }
          v451 = *(llvm::Value **)(*(_QWORD *)v345 + 16);
          if (v451)
          {
            v453 = llvm::Value::getName(v451);
            v454 = v452;
            v455 = (_WORD *)*((_QWORD *)v449 + 4);
            if (v452 > *((_QWORD *)v449 + 3) - (_QWORD)v455)
            {
              llvm::raw_ostream::write(v449, v453, v452);
              goto LABEL_621;
            }
            if (v452)
            {
              memcpy(v455, v453, v452);
              v455 = (_WORD *)(*((_QWORD *)v449 + 4) + v454);
              *((_QWORD *)v449 + 4) = v455;
            }
          }
          else
          {
LABEL_621:
            v455 = (_WORD *)*((_QWORD *)v449 + 4);
          }
          if (*((_QWORD *)v449 + 3) - (_QWORD)v455 > 1uLL)
          {
            *v455 = 8992;
            *((_QWORD *)v449 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v449, " #", 2uLL);
          }
          v456 = *(int *)(*(_QWORD *)v345 + 24);
          if ((v456 & 0x80000000) != 0)
          {
            v456 = -(uint64_t)v456;
            v457 = v449;
            v458 = 1;
          }
          else
          {
            v457 = v449;
            v458 = 0;
          }
          sub_1C5E21910(v457, v456, 0, 0, v458);
          v459 = (void *)*((_QWORD *)v449 + 4);
          if (*((_QWORD *)v449 + 3) - (_QWORD)v459 > 0x14uLL)
          {
            qmemcpy(v459, " incoming CSR Saved: ", 21);
            *((_QWORD *)v449 + 4) += 21;
          }
          else
          {
            llvm::raw_ostream::write(v449, " incoming CSR Saved: ", 0x15uLL);
          }
          v460 = (llvm *)sub_1C476B7EC((uint64_t)(v418 - 16));
          if ((_DWORD)v460 != -1)
          {
            v461 = (int)v460;
            do
            {
              v462 = (llvm::raw_ostream *)llvm::errs(v460);
              v463 = v462;
              if (v461 < 0)
              {
                v464 = -(uint64_t)v461;
                v465 = 1;
              }
              else
              {
                v464 = v461;
                v465 = 0;
              }
              sub_1C5E21910(v462, v464, 0, 0, v465);
              v466 = (_BYTE *)*((_QWORD *)v463 + 4);
              if (*((_BYTE **)v463 + 3) == v466)
              {
                llvm::raw_ostream::write(v463, " ", 1uLL);
              }
              else
              {
                *v466 = 32;
                ++*((_QWORD *)v463 + 4);
              }
              v460 = (llvm *)sub_1C476BA0C((_QWORD *)v418 - 8, v461 + 1, *v418, 1u);
              v461 = (int)v460;
            }
            while ((_DWORD)v460 != -1);
          }
          v332 = (uint64_t)llvm::errs(v460);
          v467 = *(_BYTE **)(v332 + 32);
          if (*(_BYTE **)(v332 + 24) == v467)
          {
            v332 = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)v332, "\n", 1uLL);
          }
          else
          {
            *v467 = 10;
            ++*(_QWORD *)(v332 + 32);
          }
          v340 = v499;
          v157 = (uint64_t *)v489;
          ++v492;
          goto LABEL_643;
        }
LABEL_596:
        v340 = v499;
        v157 = (uint64_t *)v489;
LABEL_643:
        v339 += 8;
        if (v339 == v482)
          goto LABEL_491;
      }
      llvm::raw_ostream::write(v349, Name, v352);
LABEL_504:
      v355 = (_WORD *)*((_QWORD *)v349 + 4);
      goto LABEL_507;
    }
LABEL_716:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
LABEL_202:
  v158 = *(_DWORD *)(v157[41] + 24);
  v159 = *v499;
  v497 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v157[2] + 104))(v157[2]);
  v516 = v518;
  v517 = 0x600000000;
  v520 = 0;
  v160 = (char *)v157[41];
  if (v160 != v475)
  {
    v34 = 0;
    v161 = (char *)(v159 + 176 * v158);
    v162 = (char **)v499;
    while (1)
    {
      v163 = *((_DWORD *)v160 + 6);
      if (v163 != *(_DWORD *)(v157[41] + 24))
        break;
LABEL_419:
      v160 = (char *)*((_QWORD *)v160 + 1);
      if (v160 == v475)
      {
        if (v516 != v518)
        {
          free(v516);
          goto LABEL_455;
        }
        goto LABEL_456;
      }
    }
    v164 = *v162;
    v165 = &(*v162)[176 * v163];
    v166 = *(_QWORD *)v165 + 48;
    v167 = *(unint64_t **)(*(_QWORD *)v165 + 56);
    v491 = v161;
    v484 = *v162;
    v487 = *((_DWORD *)v160 + 6);
    if ((unint64_t *)v166 == v167)
    {
LABEL_212:
      v503 = 0;
    }
    else
    {
      v168 = *(_QWORD *)(*(_QWORD *)v165 + 56);
      while (1)
      {
        v169 = **(unsigned __int16 **)(v168 + 16);
        v170 = v169 > 0x17;
        v171 = (1 << v169) & 0x83E000;
        if (v170 || v171 == 0)
          break;
        v168 = *(_QWORD *)(v168 + 8);
        if (v168 == v166)
          goto LABEL_212;
      }
      v173 = *(void **)(v168 + 56);
      v503 = v173;
      if (v173)
      {
        llvm::MetadataTracking::track((uint64_t)&v503, (unsigned __int8 *)v173, 2);
        v164 = v484;
        v163 = v487;
        v161 = v491;
      }
    }
    v174 = v160[200];
    if (*((_DWORD *)v161 + 3) == *(_DWORD *)&v164[176 * v163 + 8])
    {
      if (v160[200])
      {
        v175 = *(_DWORD *)&v164[176 * v163 + 16];
        v176 = *((_DWORD *)v160 + 6);
        v177 = *v499;
        goto LABEL_228;
      }
      v196 = *(_DWORD *)&v164[176 * v163 + 16];
      if (*((_DWORD *)v161 + 5) != v196)
      {
        LODWORD(v524) = 5;
        __src = 0;
        v526 = v196;
        v527 = 0;
        HIBYTE(v531) = 0;
        *(_QWORD *)&v530 = 0;
        v529 = 0uLL;
        BYTE8(v530) = 0;
        v179 = llvm::MachineFunction::addFrameInst(v157, (uint64_t)&v524);
        if (SHIBYTE(v531) < 0)
          operator delete(*((void **)&v530 + 1));
        if ((_QWORD)v529)
        {
          *((_QWORD *)&v529 + 1) = v529;
          operator delete((void *)v529);
        }
        v197 = *(_QWORD *)v165;
        v198 = *(_QWORD *)(v497 + 8);
        v182 = *(llvm::MachineFunction **)(*(_QWORD *)v165 + 32);
        v508 = v503;
        if (v503)
          llvm::MetadataTracking::track((uint64_t)&v508, (unsigned __int8 *)v503, 2);
        v183 = *((_QWORD *)v182 + 28);
        if (v183)
          *((_QWORD *)v182 + 28) = *(_QWORD *)v183;
        else
          v183 = sub_1C484358C((uint64_t)v182 + 128, 72, 3);
        v524 = (unsigned __int8 *)v508;
        if (v508)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v508, (unsigned __int8 *)v508, (uint64_t)&v524);
          v508 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v183, v182, v198 + 144, &v524, 0);
        if (v524)
          llvm::MetadataTracking::untrack((uint64_t)&v524, v524);
        if (v508)
          llvm::MetadataTracking::untrack((uint64_t)&v508, (unsigned __int8 *)v508);
        v209 = *(_QWORD *)(v197 + 40);
        *(_QWORD *)(v183 + 24) = v209;
        v200 = *(_QWORD *)(v209 + 32);
        v210 = *(unsigned int *)(v183 + 40);
        if ((_DWORD)v210)
        {
          v310 = *(_QWORD *)(v183 + 32);
          v311 = *(_QWORD *)(v200 + 40);
          v312 = 32 * v210;
          do
          {
            if (!*(_BYTE *)v310)
            {
              v313 = *(unsigned int *)(v310 + 4);
              if ((int)v313 >= 0)
                v314 = (uint64_t *)(*(_QWORD *)(v311 + 272) + 8 * v313);
              else
                v314 = (uint64_t *)(*(_QWORD *)(v311 + 24) + 16 * (v313 & 0x7FFFFFFF) + 8);
              v315 = *v314;
              if (*v314)
              {
                v316 = *(_QWORD *)(v315 + 16);
                *(_QWORD *)(v315 + 16) = v310;
                *(_QWORD *)(v310 + 16) = v316;
                if ((*(_BYTE *)(v310 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v310 + 24) = v315;
                }
                else
                {
                  *(_QWORD *)(v310 + 24) = 0;
                  v314 = (uint64_t *)(v316 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v310 + 16) = v310;
                *(_QWORD *)(v310 + 24) = 0;
              }
              *v314 = v310;
            }
            v310 += 32;
            v312 -= 32;
          }
          while (v312);
        }
        goto LABEL_286;
      }
LABEL_290:
      v213 = *((_DWORD *)v161 + 40);
      v214 = v517;
      if ((v520 & 0x3F) != 0)
      {
        *((_QWORD *)v516 + v517 - 1) &= ~(-1 << (v520 & 0x3F));
        v215 = v214;
      }
      else
      {
        v215 = v517;
      }
      v520 = v213;
      v216 = v213 + 63;
      if (v215 != (v213 + 63) >> 6)
      {
        v217 = v216 >> 6;
        if (v215 > v217)
        {
          LODWORD(v517) = v216 >> 6;
          v215 = v216 >> 6;
        }
        else
        {
          v218 = v214;
          if (v217 > HIDWORD(v517))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v516, (uint64_t)v518, v217, 8);
            v164 = v484;
            v163 = v487;
            v218 = v517;
            v215 = v517;
          }
          if (v217 != v214)
          {
            bzero((char *)v516 + 8 * v218, 8 * (v217 - v214));
            v164 = v484;
            v163 = v487;
          }
          v215 += v217 - v214;
          LODWORD(v517) = v215;
          v213 = v520;
          v161 = v491;
        }
      }
      v219 = v213 & 0x3F;
      if ((v213 & 0x3F) != 0)
        *((_QWORD *)v516 + v215 - 1) &= ~(-1 << v219);
      v220 = (uint64_t)&v164[176 * v163 + 24];
      v221 = *((unsigned int *)v161 + 26);
      if ((_DWORD)v221)
      {
        v222 = (uint64_t *)*((_QWORD *)v161 + 12);
        v223 = *(uint64_t **)v220;
        v224 = (uint64_t *)v516;
        do
        {
          v226 = *v222++;
          v225 = v226;
          v227 = *v223++;
          *v224++ = v225 & ~v227;
          --v221;
        }
        while (v221);
      }
      if ((v213 & 0x3F) != 0)
      {
        v228 = (uint64_t *)v516;
        *((_QWORD *)v516 + v215 - 1) &= ~(-1 << v219);
LABEL_308:
        v229 = 0;
        v230 = v213 - 1;
        v231 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v213;
        v232 = v230 & 0xFFFFFFC0;
        while (1)
        {
          v234 = *v228++;
          v233 = v234;
          v235 = v232 + v229 ? -1 : v231;
          v236 = v235 & v233;
          if (v236)
            break;
          v229 -= 64;
          if (v232 + v229 == -64)
            goto LABEL_350;
        }
        v237 = __clz(__rbit64(v236));
        if (v237 + 1 != (_DWORD)v229)
        {
          v481 = (uint64_t)&v164[176 * v163 + 24];
          v238 = v237 - v229;
          do
          {
            LODWORD(v524) = 11;
            __src = 0;
            v526 = v238;
            v527 = 0;
            HIBYTE(v531) = 0;
            *(_QWORD *)&v530 = 0;
            v529 = 0uLL;
            BYTE8(v530) = 0;
            v239 = llvm::MachineFunction::addFrameInst(v157, (uint64_t)&v524);
            if (SHIBYTE(v531) < 0)
              operator delete(*((void **)&v530 + 1));
            if ((_QWORD)v529)
            {
              *((_QWORD *)&v529 + 1) = v529;
              operator delete((void *)v529);
            }
            v240 = *(_QWORD *)v165;
            v241 = *(_QWORD *)(v497 + 8);
            v242 = *(llvm::MachineFunction **)(*(_QWORD *)v165 + 32);
            v508 = v503;
            if (v503)
              llvm::MetadataTracking::track((uint64_t)&v508, (unsigned __int8 *)v503, 2);
            v243 = *((_QWORD *)v242 + 28);
            if (v243)
              *((_QWORD *)v242 + 28) = *(_QWORD *)v243;
            else
              v243 = sub_1C484358C((uint64_t)v242 + 128, 72, 3);
            v524 = (unsigned __int8 *)v508;
            if (v508)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v508, (unsigned __int8 *)v508, (uint64_t)&v524);
              v508 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v243, v242, v241 + 144, &v524, 0);
            if (v524)
              llvm::MetadataTracking::untrack((uint64_t)&v524, v524);
            if (v508)
              llvm::MetadataTracking::untrack((uint64_t)&v508, (unsigned __int8 *)v508);
            v244 = *(_QWORD *)(v240 + 40);
            *(_QWORD *)(v243 + 24) = v244;
            v245 = *(_QWORD *)(v244 + 32);
            v246 = *(unsigned int *)(v243 + 40);
            if ((_DWORD)v246)
            {
              v249 = *(_QWORD *)(v243 + 32);
              v250 = *(_QWORD *)(v245 + 40);
              v251 = 32 * v246;
              do
              {
                if (!*(_BYTE *)v249)
                {
                  v252 = *(unsigned int *)(v249 + 4);
                  if ((int)v252 >= 0)
                    v253 = (uint64_t *)(*(_QWORD *)(v250 + 272) + 8 * v252);
                  else
                    v253 = (uint64_t *)(*(_QWORD *)(v250 + 24) + 16 * (v252 & 0x7FFFFFFF) + 8);
                  v254 = *v253;
                  if (*v253)
                  {
                    v255 = *(_QWORD *)(v254 + 16);
                    *(_QWORD *)(v254 + 16) = v249;
                    *(_QWORD *)(v249 + 16) = v255;
                    if ((*(_BYTE *)(v249 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v249 + 24) = v254;
                    }
                    else
                    {
                      *(_QWORD *)(v249 + 24) = 0;
                      v253 = (uint64_t *)(v255 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v249 + 16) = v249;
                    *(_QWORD *)(v249 + 24) = 0;
                  }
                  *v253 = v249;
                }
                v249 += 32;
                v251 -= 32;
              }
              while (v251);
            }
            v247 = *(_QWORD *)(v245 + 728);
            if (v247)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v247 + 24))(v247, v243);
            v248 = *v167 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v243 = v248 | *(_QWORD *)v243 & 7;
            *(_QWORD *)(v243 + 8) = v167;
            *(_QWORD *)(v248 + 8) = v243;
            *v167 = *v167 & 7 | v243;
            LODWORD(v524) = 16;
            __src = 0;
            v526 = v239;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v243, v242, (const llvm::MachineOperand *)&v524);
            v238 = sub_1C476BA0C(&v516, v238 + 1, v520, 1u);
            v157 = (uint64_t *)v489;
          }
          while (v238 != -1);
          v215 = v517;
          v219 = v520 & 0x3F;
          v34 = 1;
          v161 = v491;
          v164 = v484;
          v163 = v487;
          v220 = v481;
        }
LABEL_350:
        v256 = *(_DWORD *)&v164[176 * v163 + 88];
        if (!v219)
          goto LABEL_351;
        v257 = v215;
        *((_QWORD *)v516 + v215 - 1) &= ~(-1 << v219);
      }
      else
      {
        if (v213)
        {
          v228 = (uint64_t *)v516;
          goto LABEL_308;
        }
        v256 = *(_DWORD *)&v164[176 * v163 + 88];
LABEL_351:
        v257 = v215;
      }
      v520 = v256;
      v258 = v256 + 63;
      if (v215 != (v256 + 63) >> 6)
      {
        v259 = v258 >> 6;
        if (v215 > v259)
        {
          LODWORD(v517) = v258 >> 6;
          v215 = v258 >> 6;
        }
        else
        {
          v260 = v257;
          if (v259 > HIDWORD(v517))
          {
            v317 = v220;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v516, (uint64_t)v518, v259, 8);
            v220 = v317;
            v260 = v517;
            v215 = v517;
          }
          if (v259 != v257)
          {
            v261 = v220;
            bzero((char *)v516 + 8 * v260, 8 * (v259 - v257));
            v220 = v261;
          }
          v215 += v259 - v257;
          LODWORD(v517) = v215;
          v256 = v520;
          v161 = v491;
        }
      }
      v262 = v256 & 0x3F;
      if ((v256 & 0x3F) != 0)
        *((_QWORD *)v516 + v215 - 1) &= ~(-1 << v262);
      v263 = *(unsigned int *)(v220 + 8);
      if ((_DWORD)v263)
      {
        v264 = *(uint64_t **)v220;
        v265 = (uint64_t *)*((_QWORD *)v161 + 12);
        v266 = (uint64_t *)v516;
        do
        {
          v268 = *v264++;
          v267 = v268;
          v269 = *v265++;
          *v266++ = v267 & ~v269;
          --v263;
        }
        while (v263);
      }
      if ((v256 & 0x3F) != 0)
      {
        v270 = -1 << v262;
        v271 = (uint64_t *)v516;
        *((_QWORD *)v516 + v215 - 1) &= ~v270;
LABEL_368:
        v272 = 0;
        v273 = v256 - 1;
        v274 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v256;
        v275 = v273 & 0xFFFFFFC0;
        while (1)
        {
          v277 = *v271++;
          v276 = v277;
          v278 = v275 + v272 ? -1 : v274;
          v279 = v278 & v276;
          if (v279)
            break;
          v272 -= 64;
          if (v275 + v272 == -64)
            goto LABEL_416;
        }
        v280 = __clz(__rbit64(v279));
        if (v280 + 1 != (_DWORD)v272)
        {
          v281 = v280 - v272;
          do
          {
            v282 = sub_1C507F26C((uint64_t)v479, v281);
            if (*(_BYTE *)(v282 + 8))
              v283 = 1;
            else
              v283 = *(_BYTE *)(v282 + 16) == 0;
            if (v283)
            {
              v284 = *(_DWORD *)(v282 + 4);
              LODWORD(v524) = 13;
              __src = 0;
              v526 = v281;
              v527 = v284;
              v529 = 0u;
              v530 = 0u;
              v531 = 0u;
            }
            else
            {
              v285 = *(_DWORD *)(v282 + 12);
              LODWORD(v524) = 3;
              __src = 0;
              v526 = v281;
              v527 = v285;
              HIBYTE(v531) = 0;
              *(_QWORD *)&v530 = 0;
              v529 = 0uLL;
              BYTE8(v530) = 0;
            }
            v286 = llvm::MachineFunction::addFrameInst(v157, (uint64_t)&v524);
            if (SHIBYTE(v531) < 0)
              operator delete(*((void **)&v530 + 1));
            if ((_QWORD)v529)
            {
              *((_QWORD *)&v529 + 1) = v529;
              operator delete((void *)v529);
            }
            v287 = *(_QWORD *)v165;
            v288 = *(_QWORD *)(v497 + 8);
            v289 = *(llvm::MachineFunction **)(*(_QWORD *)v165 + 32);
            v508 = v503;
            if (v503)
              llvm::MetadataTracking::track((uint64_t)&v508, (unsigned __int8 *)v503, 2);
            v290 = *((_QWORD *)v289 + 28);
            if (v290)
              *((_QWORD *)v289 + 28) = *(_QWORD *)v290;
            else
              v290 = sub_1C484358C((uint64_t)v289 + 128, 72, 3);
            v524 = (unsigned __int8 *)v508;
            if (v508)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v508, (unsigned __int8 *)v508, (uint64_t)&v524);
              v508 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v290, v289, v288 + 144, &v524, 0);
            if (v524)
              llvm::MetadataTracking::untrack((uint64_t)&v524, v524);
            if (v508)
              llvm::MetadataTracking::untrack((uint64_t)&v508, (unsigned __int8 *)v508);
            v291 = *(_QWORD *)(v287 + 40);
            *(_QWORD *)(v290 + 24) = v291;
            v292 = *(_QWORD *)(v291 + 32);
            v293 = *(unsigned int *)(v290 + 40);
            if ((_DWORD)v293)
            {
              v296 = *(_QWORD *)(v290 + 32);
              v297 = *(_QWORD *)(v292 + 40);
              v298 = 32 * v293;
              do
              {
                if (!*(_BYTE *)v296)
                {
                  v299 = *(unsigned int *)(v296 + 4);
                  if ((int)v299 >= 0)
                    v300 = (uint64_t *)(*(_QWORD *)(v297 + 272) + 8 * v299);
                  else
                    v300 = (uint64_t *)(*(_QWORD *)(v297 + 24) + 16 * (v299 & 0x7FFFFFFF) + 8);
                  v301 = *v300;
                  if (*v300)
                  {
                    v302 = *(_QWORD *)(v301 + 16);
                    *(_QWORD *)(v301 + 16) = v296;
                    *(_QWORD *)(v296 + 16) = v302;
                    if ((*(_BYTE *)(v296 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v296 + 24) = v301;
                    }
                    else
                    {
                      *(_QWORD *)(v296 + 24) = 0;
                      v300 = (uint64_t *)(v302 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v296 + 16) = v296;
                    *(_QWORD *)(v296 + 24) = 0;
                  }
                  *v300 = v296;
                }
                v296 += 32;
                v298 -= 32;
              }
              while (v298);
            }
            v294 = *(_QWORD *)(v292 + 728);
            if (v294)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v294 + 24))(v294, v290);
            v295 = *v167 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v290 = v295 | *(_QWORD *)v290 & 7;
            *(_QWORD *)(v290 + 8) = v167;
            *(_QWORD *)(v295 + 8) = v290;
            *v167 = *v167 & 7 | v290;
            LODWORD(v524) = 16;
            __src = 0;
            v526 = v286;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v290, v289, (const llvm::MachineOperand *)&v524);
            v34 = 1;
            v281 = sub_1C476BA0C(&v516, v281 + 1, v520, 1u);
            v157 = (uint64_t *)v489;
          }
          while (v281 != -1);
        }
      }
      else if (v256)
      {
        v271 = (uint64_t *)v516;
        goto LABEL_368;
      }
LABEL_416:
      if (v503)
        llvm::MetadataTracking::untrack((uint64_t)&v503, (unsigned __int8 *)v503);
      v161 = v165;
      v162 = (char **)v499;
      goto LABEL_419;
    }
    v175 = *(_DWORD *)&v164[176 * v163 + 16];
    v176 = *((_DWORD *)v160 + 6);
    v177 = *v499;
    if (v160[200] || *((_DWORD *)v161 + 5) != v175)
    {
LABEL_228:
      v184 = *(_DWORD *)(v177 + 176 * v176 + 8);
      LODWORD(v524) = 7;
      __src = 0;
      v526 = v175;
      v527 = v184;
      HIBYTE(v531) = 0;
      *(_QWORD *)&v530 = 0;
      v529 = 0uLL;
      BYTE8(v530) = 0;
      v185 = llvm::MachineFunction::addFrameInst(v157, (uint64_t)&v524);
      if (SHIBYTE(v531) < 0)
        operator delete(*((void **)&v530 + 1));
      if ((_QWORD)v529)
      {
        *((_QWORD *)&v529 + 1) = v529;
        operator delete((void *)v529);
      }
      v186 = *(_QWORD *)v165;
      v187 = *(_QWORD *)(v497 + 8);
      v188 = *(llvm::MachineFunction **)(*(_QWORD *)v165 + 32);
      v508 = v503;
      if (v503)
        llvm::MetadataTracking::track((uint64_t)&v508, (unsigned __int8 *)v503, 2);
      v189 = *((_QWORD *)v188 + 28);
      if (v189)
        *((_QWORD *)v188 + 28) = *(_QWORD *)v189;
      else
        v189 = sub_1C484358C((uint64_t)v188 + 128, 72, 3);
      v524 = (unsigned __int8 *)v508;
      if (v508)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v508, (unsigned __int8 *)v508, (uint64_t)&v524);
        v508 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v189, v188, v187 + 144, &v524, 0);
      if (v524)
        llvm::MetadataTracking::untrack((uint64_t)&v524, v524);
      v157 = (uint64_t *)v489;
      if (v508)
        llvm::MetadataTracking::untrack((uint64_t)&v508, (unsigned __int8 *)v508);
      v190 = *(_QWORD *)(v186 + 40);
      *(_QWORD *)(v189 + 24) = v190;
      v191 = *(_QWORD *)(v190 + 32);
      v192 = *(unsigned int *)(v189 + 40);
      if ((_DWORD)v192)
      {
        v303 = *(_QWORD *)(v189 + 32);
        v304 = *(_QWORD *)(v191 + 40);
        v305 = 32 * v192;
        do
        {
          if (!*(_BYTE *)v303)
          {
            v306 = *(unsigned int *)(v303 + 4);
            if ((int)v306 >= 0)
              v307 = (uint64_t *)(*(_QWORD *)(v304 + 272) + 8 * v306);
            else
              v307 = (uint64_t *)(*(_QWORD *)(v304 + 24) + 16 * (v306 & 0x7FFFFFFF) + 8);
            v308 = *v307;
            if (*v307)
            {
              v309 = *(_QWORD *)(v308 + 16);
              *(_QWORD *)(v308 + 16) = v303;
              *(_QWORD *)(v303 + 16) = v309;
              if ((*(_BYTE *)(v303 + 3) & 1) != 0)
              {
                *(_QWORD *)(v303 + 24) = v308;
              }
              else
              {
                *(_QWORD *)(v303 + 24) = 0;
                v307 = (uint64_t *)(v309 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v303 + 16) = v303;
              *(_QWORD *)(v303 + 24) = 0;
            }
            *v307 = v303;
          }
          v303 += 32;
          v305 -= 32;
        }
        while (v305);
      }
      v193 = *(_QWORD *)(v191 + 728);
      if (v193)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v193 + 24))(v193, v189);
      v194 = *v167 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v189 = v194 | *(_QWORD *)v189 & 7;
      *(_QWORD *)(v189 + 8) = v167;
      *(_QWORD *)(v194 + 8) = v189;
      *v167 = *v167 & 7 | v189;
      LODWORD(v524) = 16;
      __src = 0;
      v526 = v185;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v189, v188, (const llvm::MachineOperand *)&v524);
      if (v174)
      {
        v195 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v489 + 2) + 112))(*((_QWORD **)v489 + 2));
        (*(void (**)(uint64_t, _QWORD, unint64_t *))(*(_QWORD *)v195 + 120))(v195, *(_QWORD *)v165, v167);
        v34 = 1;
        goto LABEL_416;
      }
    }
    else
    {
      v178 = *(_DWORD *)(v177 + 176 * v176 + 8);
      LODWORD(v524) = 6;
      __src = 0;
      v526 = 0;
      v527 = v178;
      HIBYTE(v531) = 0;
      *(_QWORD *)&v530 = 0;
      v529 = 0uLL;
      BYTE8(v530) = 0;
      v179 = llvm::MachineFunction::addFrameInst(v157, (uint64_t)&v524);
      if (SHIBYTE(v531) < 0)
        operator delete(*((void **)&v530 + 1));
      if ((_QWORD)v529)
      {
        *((_QWORD *)&v529 + 1) = v529;
        operator delete((void *)v529);
      }
      v180 = *(_QWORD *)v165;
      v181 = *(_QWORD *)(v497 + 8);
      v182 = *(llvm::MachineFunction **)(*(_QWORD *)v165 + 32);
      v508 = v503;
      if (v503)
        llvm::MetadataTracking::track((uint64_t)&v508, (unsigned __int8 *)v503, 2);
      v183 = *((_QWORD *)v182 + 28);
      if (v183)
        *((_QWORD *)v182 + 28) = *(_QWORD *)v183;
      else
        v183 = sub_1C484358C((uint64_t)v182 + 128, 72, 3);
      v524 = (unsigned __int8 *)v508;
      if (v508)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v508, (unsigned __int8 *)v508, (uint64_t)&v524);
        v508 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v183, v182, v181 + 144, &v524, 0);
      if (v524)
        llvm::MetadataTracking::untrack((uint64_t)&v524, v524);
      if (v508)
        llvm::MetadataTracking::untrack((uint64_t)&v508, (unsigned __int8 *)v508);
      v199 = *(_QWORD *)(v180 + 40);
      *(_QWORD *)(v183 + 24) = v199;
      v200 = *(_QWORD *)(v199 + 32);
      v201 = *(unsigned int *)(v183 + 40);
      if ((_DWORD)v201)
      {
        v202 = *(_QWORD *)(v183 + 32);
        v203 = *(_QWORD *)(v200 + 40);
        v204 = 32 * v201;
        do
        {
          if (!*(_BYTE *)v202)
          {
            v205 = *(unsigned int *)(v202 + 4);
            if ((int)v205 >= 0)
              v206 = (uint64_t *)(*(_QWORD *)(v203 + 272) + 8 * v205);
            else
              v206 = (uint64_t *)(*(_QWORD *)(v203 + 24) + 16 * (v205 & 0x7FFFFFFF) + 8);
            v207 = *v206;
            if (*v206)
            {
              v208 = *(_QWORD *)(v207 + 16);
              *(_QWORD *)(v207 + 16) = v202;
              *(_QWORD *)(v202 + 16) = v208;
              if ((*(_BYTE *)(v202 + 3) & 1) != 0)
              {
                *(_QWORD *)(v202 + 24) = v207;
              }
              else
              {
                *(_QWORD *)(v202 + 24) = 0;
                v206 = (uint64_t *)(v208 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v202 + 16) = v202;
              *(_QWORD *)(v202 + 24) = 0;
            }
            *v206 = v202;
          }
          v202 += 32;
          v204 -= 32;
        }
        while (v204);
      }
LABEL_286:
      v211 = *(_QWORD *)(v200 + 728);
      if (v211)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v211 + 24))(v211, v183);
      v212 = *v167 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v183 = v212 | *(_QWORD *)v183 & 7;
      *(_QWORD *)(v183 + 8) = v167;
      *(_QWORD *)(v212 + 8) = v183;
      *v167 = *v167 & 7 | v183;
      LODWORD(v524) = 16;
      __src = 0;
      v526 = v179;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v183, v182, (const llvm::MachineOperand *)&v524);
    }
    v34 = 1;
    v161 = v491;
    v164 = v484;
    v163 = v487;
    goto LABEL_290;
  }
  v34 = 0;
LABEL_455:
  v162 = (char **)v499;
LABEL_456:
  sub_1C507F1FC((uint64_t)v162, *v162);
  return v34 & 1;
}

void sub_1C507F1FC(uint64_t a1, char *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;

  v4 = *(char **)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 64;
    do
    {
      v6 = (char *)*((_QWORD *)v5 - 2);
      if (v5 != v6)
        free(v6);
      v7 = (char *)*((_QWORD *)v5 - 11);
      if (v5 - 72 != v7)
        free(v7);
      v8 = v5 - 112;
      v5 -= 176;
    }
    while (v8 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t sub_1C507F26C(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v6 = 0;
  if (sub_1C507F2CC(a1, a2, &v6))
    return v6;
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 16;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 20 * v5;
}

uint64_t sub_1C507F2CC(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 20 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 20 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1C507F37C(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  int v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(result + 8);
    v9 = (_DWORD *)(result + 328);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_10;
    v8 = *(_DWORD **)(result + 8);
    v9 = &v8[5 * v7];
  }
  do
  {
    *v8 = -1;
    v8 += 5;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v12 = 0;
      result = sub_1C507F2CC((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_DWORD *)a2;
      *(_OWORD *)(v11 + 1) = *(_OWORD *)(a2 + 4);
      *v5 += 2;
    }
    a2 += 20;
  }
  return result;
}

uint64_t sub_1C507F43C()
{
  int v1;
  char v2;
  char *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Verify Call Frame Information instructions";
  v4.n128_u64[1] = 42;
  v2 = 0;
  v3 = &v2;
  v1 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7F5160, "verify-cfiinstrs", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F5160, &dword_1C475E000);
}

unint64_t llvm::findSplitPointForStackProtector(llvm *this, llvm::MachineBasicBlock *a2, const llvm::TargetInstrInfo *a3)
{
  _QWORD *FirstTerminator;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v12;
  unint64_t v14;
  __int16 v15;
  int v16;
  int v17;
  unsigned __int16 *v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;

  FirstTerminator = (_QWORD *)llvm::MachineBasicBlock::getFirstTerminator(this);
  v6 = FirstTerminator;
  v7 = (_QWORD *)*((_QWORD *)this + 7);
  if (v7 != FirstTerminator)
  {
    v8 = *FirstTerminator & 0xFFFFFFFFFFFFFFF8;
    if (!v8 || (*(_BYTE *)v8 & 4) == 0)
    {
      while ((*(_WORD *)(v8 + 44) & 4) != 0)
        v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
    }
    while (1)
    {
      v9 = v8;
      v10 = **(unsigned __int16 **)(v8 + 16);
      if (v10 == 10 || v10 == 19)
      {
        v12 = *(_QWORD *)(v8 + 32);
        if ((*(_DWORD *)v12 & 0x10000FF) != 0x1000000
          || v10 != 10
          && (*(_BYTE *)(v12 + 32)
           || (*(_DWORD *)(v12 + 4) - 1) >= 0x3FFFFFFF
           && (*(_DWORD *)(v12 + 36) - 1) < 0x3FFFFFFF))
        {
          goto LABEL_30;
        }
      }
      else if ((v10 - 13) >= 5
             && ((v10 - 73) > 0x35 || ((1 << (v10 - 73)) & 0x2860000000005BLL) == 0))
      {
        goto LABEL_30;
      }
      if ((_QWORD *)v9 == v7)
        break;
      v8 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
        v6 = (_QWORD *)v9;
        if ((*(_BYTE *)v8 & 4) != 0)
          continue;
      }
      v6 = (_QWORD *)v9;
      if ((*(_WORD *)(v8 + 44) & 4) != 0)
      {
        do
          v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v8 + 44) & 4) != 0);
        v6 = (_QWORD *)v9;
      }
    }
    v9 = *((_QWORD *)this + 7);
    v6 = (_QWORD *)v9;
LABEL_30:
    v14 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFF8;
    if (!v14 || (*(_BYTE *)v14 & 4) == 0)
    {
      while ((*(_WORD *)(v14 + 44) & 4) != 0)
        v14 = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((*(unsigned int (**)(llvm::MachineBasicBlock *))(*(_QWORD *)a2 + 1136))(a2)
      && *((_DWORD *)a2 + 17) == **(unsigned __int16 **)(v9 + 16))
    {
      while (1)
      {
        v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
        if (v9 && (*(_BYTE *)v9 & 4) != 0)
        {
          v15 = *(_WORD *)(v9 + 44);
        }
        else
        {
          while (1)
          {
            v15 = *(_WORD *)(v9 + 44);
            if ((v15 & 4) == 0)
              break;
            v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        v16 = v15 & 0xC;
        v17 = v15 & 4;
        v18 = *(unsigned __int16 **)(v9 + 16);
        v19 = *((_QWORD *)v18 + 1);
        if (v16)
          v20 = v17 == 0;
        else
          v20 = 0;
        if (v20)
        {
          v21 = v9;
          if ((v19 & 0x80) != 0)
            return (unint64_t)v6;
          while ((*(_WORD *)(v21 + 44) & 8) != 0)
          {
            v21 = *(_QWORD *)(v21 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v21 + 16) + 8) & 0x80) != 0)
              return (unint64_t)v6;
          }
        }
        else if ((v19 & 0x80) != 0)
        {
          return (unint64_t)v6;
        }
        if (*((_DWORD *)a2 + 16) == *v18)
          return v9;
      }
    }
  }
  return (unint64_t)v6;
}

uint64_t sub_1C507F6EC(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v2);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetPassConfigPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Optimize for code generation";
  *(_QWORD *)(v3 + 8) = 28;
  *(_QWORD *)(v3 + 16) = "codegenprepare";
  *(_QWORD *)(v3 + 24) = 14;
  *(_QWORD *)(v3 + 32) = &unk_1ED7F5230;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C507FFDC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C507F7A0(uint64_t a1, char a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  unint64_t v10;
  unint64_t v12;
  _QWORD *v13;
  _QWORD v14[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7F5230;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81405B8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 144) = 128;
  v4 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  *(_QWORD *)(a1 + 128) = v4;
  *(_QWORD *)(a1 + 136) = 0;
  v5 = *(unsigned int *)(a1 + 144);
  if ((_DWORD)v5)
  {
    v6 = v5 << 6;
    v7 = v4 + 16;
    do
    {
      *v7 = 0;
      v7[1] = -4096;
      *(v7 - 2) = &off_1E8140658;
      *(v7 - 1) = 2;
      v7[2] = 0;
      v7 += 8;
      v6 -= 64;
    }
    while (v6);
  }
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 224;
  *(_QWORD *)(a1 + 200) = a1 + 224;
  *(_QWORD *)(a1 + 208) = 16;
  *(_DWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = a1 + 408;
  *(_QWORD *)(a1 + 384) = a1 + 408;
  *(_QWORD *)(a1 + 392) = 16;
  *(_DWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_DWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 608) = a1 + 624;
  *(_QWORD *)(a1 + 616) = 0x200000000;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 640) = a1 + 648;
  *(_DWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  if (byte_1ED7F52C0)
    v8 = 1;
  else
    v8 = a2;
  *(_BYTE *)(a1 + 112) = v8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v12 = qword_1ED830BC0[0];
  v10 = atomic_load(&qword_1ED7F5238);
  if (v10 != -1)
  {
    v14[0] = sub_1C507F6EC;
    v14[1] = &v12;
    v13 = v14;
    std::__call_once(&qword_1ED7F5238, &v13, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t matchIncrement(const llvm::Instruction *a1, llvm::Instruction **a2, llvm::Constant **a3)
{
  int v6;
  unsigned __int8 *v7;
  BOOL v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  llvm::ConstantFP *v16;
  unsigned int v17;
  llvm::Constant *Zero;
  llvm::Constant *v19;
  llvm::Constant *v20;
  llvm::Constant *v21;
  uint64_t result;
  _QWORD **v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned __int8 *)a1 + 16);
  if (v6 != 5)
  {
    if (v6 != 41)
    {
      v25 = 301;
      v26 = 0;
      v27 = (uint64_t)a2;
      *(_QWORD *)&v28 = 1;
      *((_QWORD *)&v28 + 1) = a3;
      if (v6 != 92 || *((_DWORD *)a1 + 18) != 1 || **((_DWORD **)a1 + 8))
        goto LABEL_24;
      if ((sub_1C50A034C((uint64_t)&v25, *((_QWORD *)a1 - 4)) & 1) == 0)
      {
        v6 = *((unsigned __int8 *)a1 + 16);
        goto LABEL_24;
      }
      return 1;
    }
    v7 = (unsigned __int8 *)*((_QWORD *)a1 - 8);
    if (v7)
      v8 = v7[16] >= 0x1Cu;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_24;
    *a2 = (llvm::Instruction *)v7;
    v9 = (unsigned __int8 *)*((_QWORD *)a1 - 4);
    if (!v9 || v9[16] > 0x14u)
      goto LABEL_24;
LABEL_18:
    *a3 = (llvm::Constant *)v9;
    return 1;
  }
  if (*((_WORD *)a1 + 9) == 13)
  {
    v10 = (unsigned __int8 *)*((_QWORD *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
    if (v10 && v10[16] >= 0x1Cu)
    {
      *a2 = (llvm::Instruction *)v10;
      v9 = (unsigned __int8 *)((_QWORD *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF))[4];
      if (v9)
        goto LABEL_18;
    }
  }
LABEL_24:
  if (v6 == 5)
  {
    if (*((_WORD *)a1 + 9) != 15)
      return 0;
    v14 = (unsigned __int8 *)*((_QWORD *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
    if (!v14 || v14[16] < 0x1Cu)
      return 0;
    *a2 = (llvm::Instruction *)v14;
    v13 = (unsigned __int8 *)((_QWORD *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF))[4];
    if (!v13)
      return 0;
LABEL_38:
    *a3 = (llvm::Constant *)v13;
LABEL_39:
    v16 = *(llvm::ConstantFP **)v13;
    if ((*(_DWORD *)(*(_QWORD *)v13 + 8) & 0xFE) == 0x12)
      v17 = *(unsigned __int8 *)(**((_QWORD **)v16 + 2) + 8);
    else
      v17 = *(_DWORD *)(*(_QWORD *)v13 + 8);
    if (v17 <= 6)
      Zero = llvm::ConstantFP::getZero(v16, (llvm::Type *)1);
    else
      Zero = (llvm::Constant *)llvm::Constant::getNullValue(v16, (llvm::Type *)a2);
    v20 = Zero;
    v21 = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, (llvm::Constant *)v13, v19);
    if (!v21)
    {
      v23 = *(_QWORD ***)v20;
      if (*(_QWORD *)v20)
      {
        v31[0] = v20;
        v31[1] = v13;
        v24 = **v23 + 1512;
        v25 = 15;
        v26 = v31;
        v27 = 2;
        v28 = 0u;
        v29 = 0u;
        v30 = 0;
        v21 = (llvm::Constant *)sub_1C537D4FC(v24, (uint64_t)v23, (unsigned __int8 *)&v25);
      }
      else
      {
        v21 = 0;
      }
    }
    *a3 = v21;
    return 1;
  }
  if (v6 == 43)
  {
    v12 = (unsigned __int8 *)*((_QWORD *)a1 - 8);
    if (!v12)
      return 0;
    if (v12[16] < 0x1Cu)
      return 0;
    *a2 = (llvm::Instruction *)v12;
    v13 = (unsigned __int8 *)*((_QWORD *)a1 - 4);
    if (!v13 || v13[16] > 0x14u)
      return 0;
    goto LABEL_38;
  }
  v25 = 312;
  v26 = 0;
  v27 = (uint64_t)a2;
  *(_QWORD *)&v28 = 1;
  *((_QWORD *)&v28 + 1) = a3;
  if (v6 != 92 || *((_DWORD *)a1 + 18) != 1 || **((_DWORD **)a1 + 8))
    return 0;
  result = sub_1C50A034C((uint64_t)&v25, *((_QWORD *)a1 - 4));
  if ((_DWORD)result)
  {
    v13 = (unsigned __int8 *)*a3;
    goto LABEL_39;
  }
  return result;
}

llvm *sub_1C507FC3C(llvm *a1)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  _BYTE *v4;
  unint64_t v5;
  llvm::Value *v6;
  _BOOL4 v7;
  size_t v8;
  const char *v9;
  llvm::raw_ostream *v10;
  size_t v11;
  const char *v12;
  llvm::raw_ostream *v13;
  size_t v14;
  const char *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  llvm *result;
  _BYTE *v20;

  v2 = llvm::dbgs(a1);
  v3 = v2;
  v4 = (_BYTE *)*((_QWORD *)v2 + 4);
  if (*((_BYTE **)v2 + 3) == v4)
  {
    v2 = llvm::raw_ostream::write(v2, "[", 1uLL);
    v5 = *((_QWORD *)v3 + 4);
  }
  else
  {
    *v4 = 91;
    v5 = *((_QWORD *)v2 + 4) + 1;
    *((_QWORD *)v2 + 4) = v5;
  }
  if (*((_BYTE *)a1 + 56))
  {
    if (*((_QWORD *)v3 + 3) - v5 > 8)
    {
      *(_BYTE *)(v5 + 8) = 32;
      *(_QWORD *)v5 = *(_QWORD *)"inbounds ";
      v5 = *((_QWORD *)v3 + 4) + 9;
      *((_QWORD *)v3 + 4) = v5;
    }
    else
    {
      v2 = llvm::raw_ostream::write(v3, "inbounds ", 9uLL);
      v5 = *((_QWORD *)v3 + 4);
    }
  }
  v6 = *(llvm::Value **)a1;
  v7 = *(_QWORD *)a1 != 0;
  if (*(_QWORD *)a1)
  {
    if (*((_QWORD *)v3 + 3) - v5 > 2)
    {
      *(_BYTE *)(v5 + 2) = 58;
      *(_WORD *)v5 = 22087;
      *((_QWORD *)v3 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v3, "GV:", 3uLL);
    }
    v2 = (llvm::raw_ostream *)llvm::Value::printAsOperand(*(llvm::Value **)a1, v3, 0, 0);
    v5 = *((_QWORD *)v3 + 4);
  }
  if (*((_QWORD *)a1 + 1))
  {
    if (v6)
      v8 = 3;
    else
      v8 = 0;
    if (v8 <= *((_QWORD *)v3 + 3) - v5)
    {
      v10 = v3;
      if (v6)
      {
        *(_BYTE *)(v5 + 2) = 32;
        *(_WORD *)v5 = 11040;
        *((_QWORD *)v3 + 4) += 3;
        v10 = v3;
      }
    }
    else
    {
      if (v6)
        v9 = " + ";
      else
        v9 = "";
      v10 = llvm::raw_ostream::write(v3, v9, v8);
    }
    v2 = llvm::raw_ostream::operator<<(v10, *((_QWORD *)a1 + 1));
    v5 = *((_QWORD *)v3 + 4);
    v7 = 1;
  }
  if (*((_QWORD *)a1 + 4))
  {
    if (v7)
      v11 = 3;
    else
      v11 = 0;
    if (v11 <= *((_QWORD *)v3 + 3) - v5)
    {
      if (v7)
      {
        *(_BYTE *)(v5 + 2) = 32;
        *(_WORD *)v5 = 11040;
        v5 = *((_QWORD *)v3 + 4) + 3;
        *((_QWORD *)v3 + 4) = v5;
      }
      v13 = v3;
    }
    else
    {
      if (v7)
        v12 = " + ";
      else
        v12 = "";
      v13 = llvm::raw_ostream::write(v3, v12, v11);
      v5 = *((_QWORD *)v13 + 4);
    }
    if (*((_QWORD *)v13 + 3) - v5 > 4)
    {
      *(_BYTE *)(v5 + 4) = 58;
      *(_DWORD *)v5 = 1702060354;
      *((_QWORD *)v13 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v13, "Base:", 5uLL);
    }
    v2 = (llvm::raw_ostream *)llvm::Value::printAsOperand(*((llvm::Value **)a1 + 4), v3, 0, 0);
    v5 = *((_QWORD *)v3 + 4);
    v7 = 1;
  }
  if (*((_QWORD *)a1 + 3))
  {
    if (v7)
      v14 = 3;
    else
      v14 = 0;
    if (v14 <= *((_QWORD *)v3 + 3) - v5)
    {
      v16 = v3;
      if (v7)
      {
        *(_BYTE *)(v5 + 2) = 32;
        *(_WORD *)v5 = 11040;
        *((_QWORD *)v3 + 4) += 3;
        v16 = v3;
      }
    }
    else
    {
      if (v7)
        v15 = " + ";
      else
        v15 = "";
      v16 = llvm::raw_ostream::write(v3, v15, v14);
    }
    v17 = llvm::raw_ostream::operator<<(v16, *((_QWORD *)a1 + 3));
    v18 = (_BYTE *)*((_QWORD *)v17 + 4);
    if (*((_BYTE **)v17 + 3) == v18)
    {
      llvm::raw_ostream::write(v17, "*", 1uLL);
    }
    else
    {
      *v18 = 42;
      ++*((_QWORD *)v17 + 4);
    }
    v2 = (llvm::raw_ostream *)llvm::Value::printAsOperand(*((llvm::Value **)a1 + 5), v3, 0, 0);
    v5 = *((_QWORD *)v3 + 4);
  }
  if (v5 >= *((_QWORD *)v3 + 3))
  {
    v2 = llvm::raw_ostream::write(v3, 93);
  }
  else
  {
    *((_QWORD *)v3 + 4) = v5 + 1;
    *(_BYTE *)v5 = 93;
  }
  result = llvm::dbgs(v2);
  v20 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v20 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v20 + 1;
  *v20 = 10;
  return result;
}

uint64_t sub_1C507FFDC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C507F7A0(v0, 0);
}

void sub_1C5080008(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_1E81405B8;
  v2 = *(_QWORD *)(a1 + 728);
  *(_QWORD *)(a1 + 728) = 0;
  if (v2)
    sub_1C4DC4DE4(a1 + 728, v2);
  sub_1C61DA9E8(a1 + 688);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 688), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 664), 8);
  sub_1C4ABB360(*(_QWORD **)(a1 + 648));
  v3 = *(void **)(a1 + 608);
  if (v3 != (void *)(a1 + 624))
    free(v3);
  sub_1C61DAA4C(a1 + 560);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 536), 8);
  v4 = *(void **)(a1 + 384);
  if (v4 != *(void **)(a1 + 376))
    free(v4);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 352), 8);
  v5 = *(void **)(a1 + 200);
  if (v5 != *(void **)(a1 + 192))
    free(v5);
  if (*(_BYTE *)(a1 + 176))
  {
    sub_1C4E43068(a1 + 152);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 152), 8);
    *(_BYTE *)(a1 + 176) = 0;
  }
  sub_1C5087068((_QWORD *)(a1 + 128));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 128), 8);
  v6 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v6)
  {
    v7 = sub_1C4DC0BBC(v6);
    MEMORY[0x1CAA32FC0](v7, 0x1060C40D526B124);
  }
  v8 = *(uint64_t **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v8)
  {
    v9 = *v8;
    *v8 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    MEMORY[0x1CAA32FC0](v8, 0x20C4093837F09);
  }
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C5080160(uint64_t a1)
{
  sub_1C5080008(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5080184()
{
  return "CodeGen Prepare";
}

void *sub_1C5080194(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::ProfileSummaryInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::TargetPassConfig::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1C508020C(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  void **v23;
  void **v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void **v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  void **v47;
  void *v48;
  llvm::ProfileSummaryInfo *v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  _BYTE *v53;
  llvm::Function *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t *v62;
  llvm::BasicBlock *v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  void *v73;
  void *v74;
  int64x2_t *v75;
  int v76;
  uint64_t v77;
  llvm *v78;
  int v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  void (**v91)(void);
  int v92;
  unint64_t v93;
  uint64_t v94;
  int32x2_t *v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  uint64_t v111;
  int32x2_t *v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  int v119;
  int v120;
  unint64_t v121;
  unint64_t *v122;
  uint64_t v123;
  int32x2_t *v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  _QWORD *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  unsigned int i;
  uint64_t v139;
  uint64_t LoopPredecessor;
  uint64_t v141;
  uint64_t v142;
  int v143;
  llvm *v144;
  uint64_t v145;
  _QWORD *v147;
  int v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v153;
  uint64_t *v154;
  unsigned int v155;
  unint64_t v156;
  uint64_t v157;
  int32x2_t *v158;
  unint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  int v165;
  int v166;
  int v167;
  char *v168;
  char *v169;
  llvm::BasicBlock *v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t *v174;
  llvm::BasicBlock *SinglePredecessor;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  BOOL v180;
  BOOL v181;
  uint64_t UniquePredecessor;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  BOOL v200;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  BOOL v207;
  _QWORD *v209;
  void *v210;
  void *v211;
  uint64_t *v212;
  _BOOL4 v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  llvm::BasicBlock **v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int v232;
  BOOL v233;
  llvm::BasicBlock **v235;
  llvm::BasicBlock *v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  llvm::BasicBlock *v243;
  uint64_t v244;
  BOOL v245;
  uint64_t j;
  uint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  BOOL v267;
  unsigned int v269;
  BOOL v270;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  int v278;
  int v279;
  llvm::Type **v280;
  uint64_t v281;
  llvm::Type *v282;
  char v283;
  llvm *v284;
  llvm *v285;
  uint64_t v286;
  int v287;
  int v288;
  _QWORD **v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t *v293;
  uint64_t v294;
  unsigned __int8 v295;
  int v296;
  char v297;
  uint64_t *v298;
  void (**v299)(void);
  char v300;
  _QWORD *v301;
  _QWORD *v302;
  unsigned int v303;
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _DWORD *v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t *v319;
  uint64_t v320;
  int32x2_t *v321;
  unint64_t v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  int v328;
  int v329;
  unint64_t v330;
  unint64_t *v331;
  uint64_t v332;
  int32x2_t *v333;
  unint64_t v334;
  uint64_t v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  int v340;
  int v341;
  uint64_t m;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  BOOL v346;
  llvm::DomTreeUpdater *v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t **v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int v356;
  BOOL v357;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  llvm::Value *v365;
  llvm::Value *v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  BOOL *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  llvm::Instruction *v375;
  const llvm::Function *PrevNonDebugInstruction;
  const llvm::Function *v377;
  BOOL *v378;
  uint64_t v379;
  unsigned int v380;
  BOOL v381;
  char v383;
  llvm::BasicBlock **v384;
  llvm::BasicBlock **v385;
  llvm::BasicBlock *v386;
  char *v387;
  unsigned int v388;
  BOOL v389;
  uint64_t *v390;
  unint64_t v391;
  llvm::BasicBlock *v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unsigned int v398;
  BOOL v399;
  unsigned int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  char v405;
  uint64_t v406;
  uint64_t *v407;
  uint64_t *v408;
  uint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  uint64_t v412;
  int v413;
  _QWORD *v414;
  uint64_t v415;
  llvm::ValueAsMetadata **v416;
  uint64_t v417;
  llvm::DominatorTree *v418;
  llvm::DominatorTree *v419;
  unint64_t v420;
  llvm::ValueAsMetadata *v421;
  uint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  _QWORD *v425;
  uint64_t *v426;
  uint64_t *v427;
  char v428;
  uint64_t *v429;
  unint64_t v430;
  unint64_t v431;
  uint64_t v432;
  _QWORD *v433;
  uint64_t v434;
  char *v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  _QWORD *v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unsigned __int8 *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unsigned int v456;
  int v457;
  llvm *v458;
  uint64_t v459;
  llvm::ConstantInt *v460;
  llvm::ConstantInt *v461;
  unsigned int v462;
  const llvm::Twine *v463;
  uint64_t v464;
  llvm::GetElementPtrInst *v465;
  unsigned int v466;
  llvm *v467;
  uint64_t *v468;
  uint64_t v469;
  llvm *v470;
  uint64_t v471;
  _QWORD *n;
  _QWORD *v473;
  _QWORD *v474;
  llvm::BasicBlock *v475;
  _QWORD *v476;
  unsigned int v477;
  uint64_t v478;
  llvm::Value **v480;
  uint64_t *v481;
  uint64_t ***v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t ****v487;
  unint64_t v488;
  llvm::Type *v489;
  unsigned __int8 *v490;
  llvm::Value **v491;
  llvm::Type *v492;
  uint64_t v493;
  uint64_t v494;
  _QWORD *v495;
  uint64_t v496;
  uint64_t v497;
  _QWORD *v498;
  llvm *v499;
  unsigned __int8 v500;
  char *v501;
  llvm::UndefValue *v502;
  llvm::UndefValue **v503;
  uint64_t v504;
  llvm::UndefValue *v505;
  _QWORD *v506;
  uint64_t *v507;
  char v508;
  unsigned int v509;
  BOOL v510;
  unsigned int v511;
  llvm::UndefValue *v512;
  int v513;
  uint64_t v514;
  int v515;
  uint64_t v516;
  uint64_t *v517;
  uint64_t v518;
  uint64_t v519;
  int v520;
  _QWORD *v521;
  char *v522;
  _QWORD *v523;
  uint64_t *v524;
  void **v525;
  _QWORD *v526;
  uint64_t *v527;
  uint64_t v528;
  llvm::UndefValue *v529;
  _QWORD *v530;
  uint64_t *v531;
  uint64_t v532;
  int v533;
  _BOOL4 v535;
  uint64_t ii;
  uint64_t v537;
  int v538;
  _QWORD *v539;
  char *v540;
  _QWORD *v541;
  uint64_t *v542;
  uint64_t v543;
  llvm::UndefValue *v544;
  uint64_t v545;
  int v546;
  _BOOL4 v547;
  llvm::UndefValue *v548;
  llvm::Type *v549;
  uint64_t *v550;
  uint64_t v551;
  uint64_t v552;
  unint64_t *v553;
  unint64_t *v554;
  unsigned __int8 *v555;
  int v556;
  unsigned __int8 *v557;
  _DWORD *v558;
  char *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unsigned __int8 **v564;
  unsigned __int8 *v565;
  int v566;
  int v567;
  uint64_t v568;
  unsigned __int8 *v569;
  uint64_t v570;
  unsigned __int8 *v571;
  uint64_t v572;
  uint64_t v573;
  BOOL v574;
  uint64_t v575;
  unint64_t *v576;
  unint64_t v577;
  unint64_t *v578;
  unint64_t *v579;
  unsigned int v580;
  unsigned int v581;
  uint64_t v582;
  unint64_t *v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t *v591;
  uint64_t v592;
  int v593;
  int v594;
  _QWORD *v595;
  uint64_t v596;
  unsigned __int8 *v597;
  uint64_t v598;
  _QWORD *v599;
  _QWORD *v600;
  llvm::Value *v601;
  char *v602;
  uint64_t v603;
  _QWORD *v604;
  _QWORD *v605;
  unint64_t *v606;
  unint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  llvm::ValueSymbolTable *v611;
  uint64_t v612;
  unint64_t *v613;
  uint64_t v614;
  unint64_t *v615;
  unint64_t v616;
  llvm::PHINode *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  int v622;
  unint64_t v623;
  _QWORD *v624;
  int v625;
  unint64_t v626;
  unint64_t *v627;
  unint64_t v628;
  uint64_t *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t *v632;
  unint64_t *v633;
  uint64_t v634;
  int v635;
  unsigned __int8 **v636;
  char *v637;
  uint64_t v638;
  int v639;
  unsigned __int8 **v640;
  _QWORD *v641;
  uint64_t v642;
  int v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t *v647;
  uint64_t v648;
  unint64_t *v649;
  unint64_t v650;
  char *v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t *v654;
  uint64_t v655;
  uint64_t v656;
  unint64_t *v657;
  unint64_t v658;
  uint64_t *v659;
  uint64_t *v660;
  uint64_t v661;
  unsigned int v662;
  char v663;
  unint64_t *v664;
  uint64_t v665;
  unint64_t *v666;
  unint64_t v667;
  llvm::UndefValue *v668;
  uint64_t v669;
  _QWORD *v670;
  unint64_t *v671;
  unint64_t v672;
  char v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unint64_t *v678;
  unint64_t *v679;
  llvm::Value *v680;
  unint64_t *v681;
  unint64_t v682;
  int v683;
  unsigned int v684;
  void *v685;
  uint64_t v686;
  uint64_t jj;
  int v688;
  uint64_t v689;
  unsigned int v691;
  int v692;
  unsigned int v693;
  void *v694;
  unsigned int v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  void *v699;
  unsigned int v700;
  int v701;
  int v702;
  _QWORD *v703;
  uint64_t v704;
  void *v705;
  unsigned int v706;
  int v707;
  int v708;
  _QWORD *v709;
  uint64_t v710;
  _QWORD *v711;
  uint64_t v712;
  _QWORD *v713;
  uint64_t v714;
  unint64_t v715;
  unint64_t v716;
  _QWORD *v717;
  uint64_t v718;
  uint64_t v719;
  unint64_t v720;
  unint64_t v721;
  _QWORD *v722;
  uint64_t v723;
  uint64_t v724;
  int v725;
  _QWORD *v726;
  uint64_t v727;
  unint64_t v728;
  unint64_t v729;
  _QWORD *v730;
  unsigned int v731;
  uint64_t v732;
  llvm::BasicBlock *v733;
  int v734;
  uint64_t v735;
  llvm *v736;
  int v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  int v741;
  int v742;
  uint64_t v743;
  uint64_t *v744;
  int v745;
  uint64_t v746;
  uint64_t *v747;
  int v748;
  uint64_t v749;
  void **v750;
  void **v751;
  _QWORD *v752;
  uint64_t v753;
  unsigned int v754;
  BOOL v755;
  uint64_t v757;
  int kk;
  char *v759;
  llvm *v760;
  _QWORD *v761;
  _QWORD *v762;
  int v763;
  int v764;
  uint64_t v765;
  uint64_t *v766;
  int v767;
  uint64_t v768;
  uint64_t *v769;
  int v770;
  _QWORD *v771;
  void **v772;
  void **v773;
  _QWORD *v774;
  uint64_t v775;
  unsigned int v776;
  BOOL v777;
  char v779;
  char v780;
  llvm *v781;
  _QWORD *v782;
  _QWORD *v783;
  _QWORD *mm;
  uint64_t v785;
  _BOOL4 v786;
  uint64_t v787;
  uint64_t *v788;
  uint64_t *v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  _BOOL4 v793;
  BOOL v794;
  uint64_t v795;
  uint64_t *v796;
  char v797;
  uint64_t v798;
  void *v799;
  uint64_t v800;
  uint64_t v801;
  unsigned int *v802;
  uint64_t v803;
  uint64_t v804;
  _QWORD *v805;
  void *v806;
  int v807;
  char *v808;
  unsigned int v809;
  char *v810;
  uint64_t v811;
  int v812;
  char *v815;
  llvm::Value *v816;
  uint64_t v817;
  _QWORD *v819;
  _QWORD *v820;
  unint64_t v821;
  int v822;
  char *v823;
  int v824;
  int v827;
  uint64_t v828;
  llvm::Value *v829;
  llvm::Value *v830;
  uint64_t v831;
  llvm::Value *v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t nn;
  uint64_t v837;
  unsigned int v838;
  uint64_t v839;
  BOOL v841;
  llvm::GCProjectionInst *v842;
  _BOOL4 v843;
  uint64_t Statepoint;
  uint64_t v845;
  _QWORD *v846;
  uint64_t v847;
  _QWORD *v848;
  uint64_t v849;
  llvm::GCRelocateInst **v850;
  llvm::GCRelocateInst **v851;
  llvm::GCRelocateInst *v852;
  uint64_t v853;
  uint64_t v854;
  _QWORD *v855;
  uint64_t v856;
  _QWORD *v857;
  uint64_t BasePtr;
  uint64_t DerivedPtr;
  uint64_t v860;
  unint64_t v861;
  uint64_t v862;
  uint64_t v863;
  _QWORD *v865;
  unsigned int v866;
  uint64_t v867;
  unint64_t i1;
  uint64_t v869;
  uint64_t v870;
  BOOL v871;
  uint64_t v872;
  unsigned __int8 *v873;
  unsigned __int8 *v874;
  uint64_t v875;
  uint64_t *v876;
  llvm::GetElementPtrInst *v877;
  llvm::Value *v878;
  uint64_t v879;
  uint64_t v880;
  _QWORD *v881;
  uint64_t v882;
  char *v883;
  char *v884;
  llvm *v885;
  char v886;
  _QWORD *v887;
  _QWORD *v888;
  _QWORD *v889;
  _QWORD *v890;
  uint64_t v891;
  _BOOL4 v892;
  uint64_t v893;
  void *v894;
  unsigned int v895;
  unint64_t *v896;
  unint64_t v897;
  uint64_t v898;
  const llvm::Value **v899;
  const llvm::Value **v900;
  _QWORD *v901;
  const llvm::Value *v902;
  int v903;
  uint64_t v904;
  uint64_t v905;
  unsigned int v906;
  uint64_t v907;
  uint64_t v909;
  _QWORD *v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t i2;
  uint64_t v914;
  unsigned int v915;
  uint64_t v916;
  uint64_t v918;
  uint64_t v919;
  _QWORD *v920;
  uint64_t v921;
  uint64_t v922;
  llvm::ValueSymbolTable *v923;
  char v924;
  llvm *v925;
  char v926;
  _QWORD *v927;
  _QWORD *v928;
  _QWORD *i3;
  _QWORD *v930;
  unsigned int v931;
  uint64_t v932;
  uint64_t v934;
  _QWORD *v935;
  llvm::Instruction *v936;
  _QWORD *v937;
  llvm::Instruction *v938;
  _BOOL4 v939;
  uint64_t v941;
  _QWORD *v942;
  _QWORD *v943;
  uint64_t v944;
  uint64_t v945;
  unint64_t v946;
  unint64_t *v947;
  uint64_t v948;
  int32x2_t *v949;
  unint64_t v950;
  uint64_t v951;
  unsigned int v952;
  uint64_t v953;
  uint64_t *v954;
  uint64_t v955;
  int v956;
  int v957;
  unint64_t v958;
  unint64_t *v959;
  uint64_t v960;
  int32x2_t *v961;
  unint64_t v962;
  uint64_t v963;
  unsigned int v964;
  uint64_t v965;
  uint64_t *v966;
  uint64_t v967;
  int v968;
  int v969;
  llvm *v970;
  void **v971;
  void **v972;
  llvm *v973;
  uint64_t *v974;
  void *v975;
  void *v976;
  llvm::BasicBlock *v977;
  llvm::BasicBlock *v978;
  char *v979;
  unsigned int v980;
  uint64_t v982;
  uint64_t v983;
  llvm::BasicBlock *v984;
  llvm::BasicBlock *v985;
  llvm::Value *v986;
  uint64_t v987;
  int v988;
  uint64_t v989;
  int v990;
  unsigned int v991;
  llvm::Value **v992;
  llvm::Value *v993;
  llvm::Value **v994;
  int v995;
  BOOL v996;
  unsigned int v997;
  uint64_t v998;
  _QWORD *v999;
  uint64_t v1000;
  int v1001;
  int v1002;
  int v1003;
  _QWORD *v1004;
  BOOL v1005;
  unsigned __int8 *v1007;
  uint64_t v1008;
  int isNullValue;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  int v1014;
  int v1015;
  int v1016;
  _QWORD *v1017;
  unsigned __int8 *v1018;
  uint64_t v1019;
  llvm::Value *v1020;
  uint64_t v1021;
  uint64_t v1022;
  void **v1023;
  llvm::Value **v1024;
  llvm::Value *v1025;
  uint64_t v1026;
  _BOOL4 v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  llvm::BasicBlock **v1032;
  llvm::BasicBlock *v1033;
  int v1034;
  int v1035;
  llvm::BasicBlock *v1036;
  uint64_t v1037;
  char *v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  unsigned int v1043;
  uint64_t v1044;
  uint64_t ***v1045;
  uint64_t v1046;
  BOOL v1047;
  uint64_t v1048;
  uint64_t **v1049;
  uint64_t **v1050;
  uint64_t *v1051;
  _QWORD *v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  _QWORD *v1056;
  uint64_t **v1057;
  uint64_t v1058;
  uint64_t **v1059;
  char *v1060;
  uint64_t v1061;
  uint64_t *v1062;
  _DWORD *v1063;
  uint64_t v1064;
  llvm::Value *v1065;
  _DWORD *v1066;
  _QWORD *v1067;
  llvm *v1068;
  llvm *v1069;
  unsigned __int8 **v1070;
  int v1071;
  unsigned __int8 *v1072;
  unsigned __int8 *v1073;
  unsigned __int8 *v1074;
  uint64_t v1075;
  _QWORD *v1076;
  char *v1077;
  uint64_t v1078;
  uint64_t v1079;
  llvm::BasicBlock *v1080;
  uint64_t v1081;
  uint64_t k;
  uint64_t v1083;
  uint64_t v1084;
  int v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  llvm::MDNode *BranchWeights;
  llvm::MDNode *v1092;
  uint64_t v1093;
  llvm::ValueSymbolTable *v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  _QWORD *v1101;
  _DWORD *v1102;
  _QWORD *v1103;
  llvm::Type **v1104;
  int v1105;
  char v1106;
  llvm::SmallPtrSetImplBase *v1107;
  llvm::Function *v1108;
  uint64_t *v1109;
  uint64_t v1110;
  uint64_t v1111;
  llvm *v1112;
  void **v1113;
  int v1114;
  uint64_t v1115;
  _QWORD *v1116;
  llvm::Value *v1117;
  uint64_t *v1118;
  uint64_t *v1119;
  void **v1120;
  llvm::Value *v1121;
  llvm::Value *v1122;
  llvm::Value *v1123;
  uint64_t v1124;
  llvm::Value *v1125;
  void *v1126;
  void *v1127;
  unint64_t BlockFreq;
  void *v1129;
  void *v1130;
  uint64_t v1131;
  uint64_t *v1132;
  uint64_t *v1133;
  llvm *v1134;
  uint64_t **v1135;
  llvm *v1136;
  int v1137;
  llvm *v1138;
  llvm *v1139;
  int v1140;
  int v1141;
  llvm *v1142;
  llvm *v1143;
  int v1144;
  uint64_t v1145;
  uint64_t *v1146;
  llvm *v1147;
  unsigned __int8 *v1148;
  unsigned __int8 *v1149;
  uint64_t v1150;
  const char *v1151;
  __int16 v1152;
  uint64_t v1153[2];
  int v1154;
  void *v1155;
  int64x2_t __src;
  int64x2_t v1157;
  int64x2_t v1158;
  int64x2_t v1159;
  void *v1160;
  uint64_t v1161;
  uint64_t v1162;
  int v1163;
  __int16 v1164;
  char v1165;
  uint64_t v1166;
  void *v1167;
  void *v1168;
  void *v1169;
  void *v1170;
  uint64_t v1171;
  int v1172;
  _BYTE v1173[112];
  void *v1174;
  void *v1175;
  uint64_t v1176;
  int v1177;
  _BYTE v1178[128];
  void *v1179;
  void *v1180;
  uint64_t v1181;
  void **v1182;
  uint64_t v1183;
  int v1184;
  uint64_t v1185;
  uint64_t v1186;
  int v1187;
  uint64_t *v1188;
  uint64_t v1189;
  uint64_t v1190;
  int v1191;
  _BYTE v1192[32];
  _QWORD *v1193;
  uint64_t v1194;
  _QWORD v1195[6];

  v3 = (uint64_t)a1;
  v1195[4] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
  {
    v4 = 0;
    return v4 & 1;
  }
  v1108 = a2;
  *(_QWORD *)(v3 + 720) = *((_QWORD *)a2 + 5) + 272;
  v5 = *(void **)(v3 + 200);
  if (v5 == *(void **)(v3 + 192))
    goto LABEL_4;
  v68 = *(unsigned int *)(v3 + 208);
  v69 = v68 < 0x21 || 4 * (*(_DWORD *)(v3 + 212) - *(_DWORD *)(v3 + 216)) >= v68;
  if (v69)
  {
    memset(v5, 255, 8 * v68);
LABEL_4:
    *(_DWORD *)(v3 + 212) = 0;
    *(_DWORD *)(v3 + 216) = 0;
    goto LABEL_5;
  }
  free(v5);
  v70 = *(_DWORD *)(v3 + 212) - *(_DWORD *)(v3 + 216);
  v71 = 1 << (33 - __clz(v70 - 1));
  *(_DWORD *)(v3 + 212) = 0;
  *(_DWORD *)(v3 + 216) = 0;
  if (v70 <= 0x10)
    v72 = 32;
  else
    v72 = v71;
  *(_DWORD *)(v3 + 208) = v72;
  v73 = malloc_type_malloc(8 * v72, 0x4065EBACuLL);
  if (!v73)
    goto LABEL_1961;
  *(_QWORD *)(v3 + 200) = v73;
  memset(v73, 255, 8 * *(unsigned int *)(v3 + 208));
LABEL_5:
  v6 = (_QWORD *)(v3 + 352);
  v7 = *(_DWORD *)(v3 + 360);
  if (v7)
  {
    v8 = *(unsigned int *)(v3 + 368);
    if (v8 > 4 * v7 && v8 >= 0x41)
    {
      v9 = (_QWORD *)*v6;
      v10 = 1 << (33 - __clz(v7 - 1));
      if (v10 <= 64)
        v11 = 64;
      else
        v11 = v10;
      if (v11 == (_DWORD)v8)
      {
        *(_QWORD *)(v3 + 360) = 0;
        v12 = 16 * v8;
        do
        {
          *v9 = -4096;
          v9 += 2;
          v12 -= 16;
        }
        while (v12);
      }
      else
      {
        MEMORY[0x1CAA32FB4](v9, 8);
        v27 = (4 * v11 / 3u + 1) | ((unint64_t)(4 * v11 / 3u + 1) >> 1);
        v28 = v27 | (v27 >> 2) | ((v27 | (v27 >> 2)) >> 4);
        LODWORD(v28) = (((v28 | (v28 >> 8)) >> 16) | v28 | (v28 >> 8)) + 1;
        *(_DWORD *)(v3 + 368) = v28;
        v29 = operator new(16 * v28, (std::align_val_t)8uLL);
        *(_QWORD *)(v3 + 352) = v29;
        *(_QWORD *)(v3 + 360) = 0;
        v30 = *(unsigned int *)(v3 + 368);
        if ((_DWORD)v30)
        {
          v31 = 16 * v30;
          do
          {
            *v29 = -4096;
            v29 += 2;
            v31 -= 16;
          }
          while (v31);
        }
      }
      goto LABEL_22;
    }
  }
  else
  {
    if (!*(_DWORD *)(v3 + 364))
      goto LABEL_22;
    LODWORD(v8) = *(_DWORD *)(v3 + 368);
    if (v8 > 0x40)
    {
      MEMORY[0x1CAA32FB4](*v6, 8);
      *v6 = 0;
      *(_QWORD *)(v3 + 360) = 0;
      *(_DWORD *)(v3 + 368) = 0;
      goto LABEL_22;
    }
  }
  if ((_DWORD)v8)
  {
    v13 = (_QWORD *)*v6;
    v14 = 16 * v8;
    do
    {
      *v13 = -4096;
      v13 += 2;
      v14 -= 16;
    }
    while (v14);
  }
  *(_QWORD *)(v3 + 360) = 0;
LABEL_22:
  v15 = **(void ****)(v3 + 8);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != &llvm::TargetPassConfig::ID);
  v17 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), &llvm::TargetPassConfig::ID)+ 112);
  *(_QWORD *)(v3 + 32) = v17;
  v18 = (*(uint64_t (**)(uint64_t, llvm::Function *))(*(_QWORD *)v17 + 16))(v17, v1108);
  *(_QWORD *)(v3 + 40) = v18;
  *(_QWORD *)(v3 + 48) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 120))(v18);
  *(_QWORD *)(v3 + 56) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 40) + 176))(*(_QWORD *)(v3 + 40));
  v19 = **(void ****)(v3 + 8);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != &llvm::TargetLibraryInfoWrapperPass::ID);
  v21 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), &llvm::TargetLibraryInfoWrapperPass::ID);
  v22 = (uint64_t *)&v1182;
  v1180 = 0;
  v1179 = 0;
  LODWORD(v1181) = 0;
  v1183 = 0;
  v1182 = 0;
  v1184 = 0;
  v1186 = 0;
  v1185 = 0;
  v1187 = 0;
  llvm::TargetLibraryAnalysis::run(v21 + 32, (uint64_t)v1108, (uint64_t)&v1155);
  *(_QWORD *)(v21 + 240) = v1155;
  v23 = (void **)(v21 + 240);
  v1145 = v3;
  if (*(_BYTE *)(v21 + 320))
  {
    if (v23 == &v1155)
    {
LABEL_43:
      *(_DWORD *)(v21 + 312) = (_DWORD)v1160;
      goto LABEL_44;
    }
    v24 = (void **)(v21 + 248);
    v25 = __src.u32[2];
    v26 = *(unsigned int *)(v21 + 256);
    if (v26 >= __src.i32[2])
    {
      if (__src.i32[2])
        memmove(*v24, (const void *)__src.i64[0], 8 * __src.u32[2]);
      goto LABEL_42;
    }
    if (*(_DWORD *)(v21 + 260) < __src.i32[2])
    {
      *(_DWORD *)(v21 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v21 + 248, v21 + 264, v25, 8);
    }
    else if ((_DWORD)v26)
    {
      memmove(*v24, (const void *)__src.i64[0], 8 * v26);
      goto LABEL_40;
    }
    v26 = 0;
LABEL_40:
    if (v26 != __src.u32[2])
      memcpy((char *)*v24 + 8 * v26, (const void *)(__src.i64[0] + 8 * v26), 8 * __src.u32[2] - 8 * v26);
LABEL_42:
    *(_DWORD *)(v21 + 256) = v25;
    v3 = v1145;
    goto LABEL_43;
  }
  v74 = (void *)(v21 + 264);
  *(_QWORD *)(v21 + 248) = v21 + 264;
  v75 = (int64x2_t *)(v21 + 248);
  *(_QWORD *)(v21 + 256) = 0x600000000;
  v76 = __src.i32[2];
  if (__src.i32[2] && v75 != &__src)
  {
    if (__src.i32[2] >= 7u)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v21 + 248, v21 + 264, __src.u32[2], 8);
      v77 = __src.u32[2];
      if (!__src.i32[2])
      {
LABEL_126:
        *(_DWORD *)(v21 + 256) = v76;
        goto LABEL_127;
      }
      v74 = (void *)v75->i64[0];
    }
    else
    {
      v77 = __src.u32[2];
    }
    memcpy(v74, (const void *)__src.i64[0], 8 * v77);
    goto LABEL_126;
  }
LABEL_127:
  *(_DWORD *)(v21 + 312) = (_DWORD)v1160;
  *(_BYTE *)(v21 + 320) = 1;
  v3 = v1145;
LABEL_44:
  if ((int64x2_t *)__src.i64[0] != &v1157)
    free((void *)__src.i64[0]);
  MEMORY[0x1CAA32FB4](v1185, 8);
  sub_1C4D8B440((uint64_t *)&v1182);
  sub_1C4D8B52C((uint64_t *)&v1179);
  *(_QWORD *)(v3 + 72) = v23;
  v32 = **(void ****)(v3 + 8);
  do
  {
    v33 = *v32;
    v32 += 2;
  }
  while (v33 != &llvm::TargetTransformInfoWrapperPass::ID);
  v34 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v32 - 1) + 96))(*(v32 - 1), &llvm::TargetTransformInfoWrapperPass::ID);
  v1155 = 0;
  __src.i64[0] = 0;
  __src.i32[2] = 0;
  v1157 = 0uLL;
  v1158.i32[0] = 0;
  v1158.i64[1] = 0;
  v1159.i64[0] = 0;
  v1159.i32[2] = 0;
  v35 = *(_QWORD *)(v34 + 56);
  if (!v35)
  {
    sub_1C485C2F0();
    goto LABEL_129;
  }
  v22 = (uint64_t *)&v1157;
  (*(void (**)(void **__return_ptr, uint64_t, llvm::Function *))(*(_QWORD *)v35 + 48))(&v1179, v35, v1108);
  v23 = (void **)(v34 + 64);
  v36 = v1179;
  if (!*(_BYTE *)(v34 + 72))
  {
    *(_QWORD *)(v34 + 64) = v1179;
    *(_BYTE *)(v34 + 72) = 1;
    goto LABEL_52;
  }
  v1179 = 0;
  v37 = *v23;
  *v23 = v36;
  if (v37)
  {
    (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
    v38 = v1179;
    v1179 = 0;
    if (v38)
LABEL_129:
      (*(void (**)(void *))(*(_QWORD *)v38 + 8))(v38);
  }
LABEL_52:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v22);
  sub_1C4D8B52C((uint64_t *)&v1155);
  *(_QWORD *)(v3 + 64) = v23;
  v39 = **(void ****)(v3 + 8);
  do
  {
    v40 = *v39;
    v39 += 2;
  }
  while (v40 != &llvm::LoopInfoWrapperPass::ID);
  *(_QWORD *)(v3 + 80) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v39 - 1) + 96))(*(v39 - 1), &llvm::LoopInfoWrapperPass::ID)+ 32;
  v41 = operator new();
  sub_1C4EEA178(v41, v1108, *(_QWORD *)(v3 + 80), 0, 0, 0);
  v42 = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(v3 + 96) = v41;
  if (v42)
  {
    v43 = sub_1C4DC0BBC(v42);
    MEMORY[0x1CAA32FC0](v43, 0x1060C40D526B124);
  }
  v44 = (uint64_t **)operator new();
  *v44 = 0;
  llvm::BlockFrequencyInfo::calculate(v44, v1108);
  v45 = *(uint64_t **)(v3 + 88);
  *(_QWORD *)(v3 + 88) = v44;
  if (v45)
  {
    v46 = *v45;
    *v45 = 0;
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    MEMORY[0x1CAA32FC0](v45, 0x20C4093837F09);
  }
  v47 = **(void ****)(v3 + 8);
  do
  {
    v48 = *v47;
    v47 += 2;
  }
  while (v48 != &llvm::ProfileSummaryInfoWrapperPass::ID);
  v49 = *(llvm::ProfileSummaryInfo **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v47 - 1) + 96))(*(v47 - 1), &llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
  *(_QWORD *)(v3 + 104) = v49;
  v51 = *((_QWORD *)v1108 + 14);
  if (!v51)
  {
    *(_BYTE *)(v3 + 712) = 0;
    if (!byte_1ED7F5A40)
      goto LABEL_83;
    v53 = (_BYTE *)(v3 + 712);
    goto LABEL_70;
  }
  v52 = (*(_BYTE *)(v51 + 17) & 4) != 0 || *(char *)(v51 + 13) < 0;
  *(_BYTE *)(v3 + 712) = v52;
  if (byte_1ED7F5A40)
  {
    v53 = (_BYTE *)(v3 + 712);
    if ((*(_BYTE *)(v51 + 13) & 1) != 0)
    {
      v57 = "hot";
      v58 = 3;
LABEL_108:
      v54 = v1108;
      goto LABEL_109;
    }
LABEL_70:
    v54 = v1108;
    if ((llvm::ProfileSummaryInfo::isFunctionHotInCallGraph(v49, (uint64_t ***)v1108, *(uint64_t ***)(v3 + 88)) & 1) != 0)
    {
      v57 = "hot";
      v58 = 3;
    }
    else
    {
      if ((llvm::ProfileSummaryInfo::isFunctionColdInCallGraph(*(llvm::ProfileSummaryInfo **)(v3 + 104), (uint64_t ***)v1108, *(uint64_t ***)(v3 + 88)) & 1) == 0)
      {
        v55 = *((_QWORD *)v1108 + 14);
        if (!v55 || (*(_BYTE *)(v55 + 12) & 0x20) == 0)
        {
          if (!byte_1ED7F5B00 || (v56 = *(_QWORD *)(*(_QWORD *)(v3 + 104) + 8)) == 0)
          {
LABEL_111:
            if (*v53)
              goto LABEL_112;
            goto LABEL_82;
          }
          if (*(_DWORD *)v56 != 2
            || !byte_1ED82E960 && !*(_BYTE *)(v56 + 72)
            || (llvm::Function::getEntryCount((uint64_t ***)v1108, 0, (uint64_t)&v1155), __src.i8[8]))
          {
LABEL_110:
            v54 = v1108;
            goto LABEL_111;
          }
          v57 = "unknown";
          v58 = 7;
          goto LABEL_108;
        }
      }
      v57 = "unlikely";
      v58 = 8;
    }
LABEL_109:
    llvm::Function::setSectionPrefix(v54, (unsigned __int8 *)v57, v58);
    goto LABEL_110;
  }
  v54 = v1108;
  if (!v52)
  {
LABEL_82:
    v49 = *(llvm::ProfileSummaryInfo **)(v3 + 104);
LABEL_83:
    if (*((_BYTE *)v49 + 49) && *((_BYTE *)v49 + 48) || (v59 = *(_QWORD *)(v3 + 48), !*(_DWORD *)(v59 + 32)))
    {
      v1140 = 0;
      v54 = v1108;
    }
    else
    {
      v60 = *((_QWORD *)v1108 + 10);
      if (v60)
      {
        v61 = 0;
        v62 = (uint64_t *)(v59 + 24);
        do
        {
          v63 = (llvm::BasicBlock *)(v60 - 24);
          v64 = *(_QWORD *)(v60 + 32);
          v60 = *(_QWORD *)(v60 + 8);
          v65 = v60 == v64 + 72 || v60 == 0;
          v66 = v65;
          if (!llvm::shouldOptimizeForSize(v63, *(_QWORD *)(v1145 + 104), *(uint64_t ***)(v1145 + 88)))
            v61 = v61 & 1 | llvm::bypassSlowDivision((uint64_t)v63, v62, v67);
        }
        while (!v66);
      }
      else
      {
        v61 = 0;
      }
      v1140 = v61 & 1;
      v54 = v1108;
      v3 = v1145;
    }
    goto LABEL_132;
  }
LABEL_112:
  v1140 = 0;
LABEL_132:
  v78 = (llvm *)*((_QWORD *)v54 + 10);
  v1112 = (llvm::Function *)((char *)v54 + 72);
  if (v78 == (llvm::Function *)((char *)v54 + 72))
  {
    v79 = 0;
    goto LABEL_222;
  }
  v79 = 0;
  v80 = (_QWORD *)(v3 + 128);
  v1134 = (llvm *)(v3 + 152);
  do
  {
    if (v78)
      v81 = (_QWORD *)((char *)v78 - 24);
    else
      v81 = 0;
    v82 = (_QWORD *)v81[6];
    *(_QWORD *)(v3 + 120) = v82;
    while (v82 != v81 + 5)
    {
      *(_QWORD *)(v3 + 120) = v82[1];
      if (v82)
        v83 = (uint64_t)(v82 - 3);
      else
        v83 = 0;
      v84 = sub_1C4D9F8B4(v83);
      if (!v82 || !v84)
        goto LABEL_176;
      v85 = *(_QWORD *)(v83 - 32 * (*(_DWORD *)(v83 + 20) & 0x7FFFFFF));
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v83 + 40) + 40, (uint64_t ***)v83);
      v86 = *(_QWORD *)(v83 + 24);
      v87 = *(_QWORD **)(v83 + 32);
      *v87 = v86;
      *(_QWORD *)(v86 + 8) = v87;
      *(_QWORD *)(v83 + 24) = 0;
      *(_QWORD *)(v83 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v83);
      v88 = *(_QWORD *)(v1145 + 120);
      if (v88)
        v89 = v88 - 24;
      else
        v89 = 0;
      v1179 = (void *)6;
      v1180 = 0;
      v1181 = v89;
      if (v89 != -8192 && v89 != -4096 && v89)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v1179);
      v90 = *(uint64_t **)(v1145 + 72);
      v1157.i64[0] = 0;
      llvm::RecursivelyDeleteTriviallyDeadInstructions(v85, v90, 0, &v1155);
      if ((void **)v1157.i64[0] == &v1155)
      {
        v91 = (void (**)(void))((char *)v1155 + 32);
        goto LABEL_155;
      }
      if (v1157.i64[0])
      {
        v91 = (void (**)(void))(*(_QWORD *)v1157.i64[0] + 40);
LABEL_155:
        (*v91)();
      }
      if (v1181 != v89)
      {
        *(_QWORD *)(v1145 + 120) = v81[6];
        v92 = *(_DWORD *)(v1145 + 136);
        if (v92 || *(_DWORD *)(v1145 + 140))
        {
          v104 = *(unsigned int *)(v1145 + 144);
          if (v104 > 4 * v92 && v104 >= 0x41)
          {
            sub_1C509F99C(v80);
          }
          else
          {
            if ((_DWORD)v104)
            {
              v105 = (_QWORD *)*v80;
              v106 = (_QWORD *)(*v80 + (v104 << 6));
              do
              {
                v107 = v105[3];
                if (v107 != -4096)
                {
                  if (v107 == -8192)
                    goto LABEL_205;
                  v108 = v105[7];
                  if (v108 && v108 != -8192 && v108 != -4096)
                  {
                    v109 = v105[5] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v109 = v105[6];
                    v110 = (unint64_t *)v105[6];
                    if (v110)
                    {
                      *v110 = *v110 & 7 | v109;
                    }
                    else
                    {
                      v111 = v105[7];
                      v112 = ***(int32x2_t ****)v111;
                      v113 = (unint64_t)v112[303];
                      if (v113 <= v109)
                      {
                        v114 = v112[305].u32[0];
                        if (v113 + 16 * v114 > v109)
                        {
                          v115 = v114 - 1;
                          LODWORD(v116) = v115 & ((v111 >> 4) ^ (v111 >> 9));
                          v117 = (uint64_t *)(v113 + 16 * v116);
                          v118 = *v117;
                          if (v111 == *v117)
                          {
LABEL_196:
                            *v117 = -8192;
                            v112[304] = vadd_s32(v112[304], (int32x2_t)0x1FFFFFFFFLL);
                            v111 = v105[7];
                          }
                          else
                          {
                            v119 = 1;
                            while (v118 != -4096)
                            {
                              v120 = v116 + v119++;
                              v116 = v120 & v115;
                              v118 = *(_QWORD *)(v113 + 16 * v116);
                              if (v111 == v118)
                              {
                                v117 = (uint64_t *)(v113 + 16 * v116);
                                goto LABEL_196;
                              }
                            }
                          }
                          *(_BYTE *)(v111 + 17) &= ~1u;
                        }
                      }
                    }
                    v107 = v105[3];
                  }
                  if (v107 != -4096)
                  {
LABEL_205:
                    if (v107 && v107 != -8192)
                    {
                      v121 = v105[1] & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v121 = v105[2];
                      v122 = (unint64_t *)v105[2];
                      if (v122)
                      {
                        *v122 = *v122 & 7 | v121;
                      }
                      else
                      {
                        v123 = v105[3];
                        v124 = ***(int32x2_t ****)v123;
                        v125 = (unint64_t)v124[303];
                        if (v125 <= v121)
                        {
                          v126 = v124[305].u32[0];
                          if (v125 + 16 * v126 > v121)
                          {
                            v127 = v126 - 1;
                            LODWORD(v128) = v127 & ((v123 >> 4) ^ (v123 >> 9));
                            v129 = (uint64_t *)(v125 + 16 * v128);
                            v130 = *v129;
                            if (v123 == *v129)
                            {
LABEL_214:
                              *v129 = -8192;
                              v124[304] = vadd_s32(v124[304], (int32x2_t)0x1FFFFFFFFLL);
                              v123 = v105[3];
                            }
                            else
                            {
                              v131 = 1;
                              while (v130 != -4096)
                              {
                                v132 = v128 + v131++;
                                v128 = v132 & v127;
                                v130 = *(_QWORD *)(v125 + 16 * v128);
                                if (v123 == v130)
                                {
                                  v129 = (uint64_t *)(v125 + 16 * v128);
                                  goto LABEL_214;
                                }
                              }
                            }
                            *(_BYTE *)(v123 + 17) &= ~1u;
                          }
                        }
                      }
                    }
                    v105[3] = -4096;
                  }
                  v105[4] = 0;
                }
                v105 += 8;
              }
              while (v105 != v106);
            }
            *(_QWORD *)(v1145 + 136) = 0;
          }
        }
        if (*(_BYTE *)(v1145 + 176))
        {
          sub_1C4E43068((uint64_t)v1134);
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v1145 + 152), 8);
          *(_BYTE *)(v1145 + 176) = 0;
        }
      }
      if (v1181 != -8192 && v1181 != -4096 && v1181)
      {
        v93 = (unint64_t)v1179 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v1179 & 0xFFFFFFFFFFFFFFF8) = v1180;
        if (v1180)
        {
          *(_QWORD *)v1180 = *(_QWORD *)v1180 & 7 | v93;
        }
        else
        {
          v94 = v1181;
          v95 = ***(int32x2_t ****)v1181;
          v96 = (unint64_t)v95[303];
          if (v96 <= v93)
          {
            v97 = v95[305].u32[0];
            if (v96 + 16 * v97 > v93)
            {
              v98 = v97 - 1;
              LODWORD(v99) = v98 & ((v1181 >> 4) ^ (v1181 >> 9));
              v100 = (uint64_t *)(v96 + 16 * v99);
              v101 = *v100;
              if (v1181 == *v100)
              {
LABEL_172:
                *v100 = -8192;
                v95[304] = vadd_s32(v95[304], (int32x2_t)0x1FFFFFFFFLL);
                v94 = v1181;
              }
              else
              {
                v102 = 1;
                while (v101 != -4096)
                {
                  v103 = v99 + v102++;
                  v99 = v103 & v98;
                  v101 = *(_QWORD *)(v96 + 16 * v99);
                  if (v1181 == v101)
                  {
                    v100 = (uint64_t *)(v96 + 16 * v99);
                    goto LABEL_172;
                  }
                }
              }
              *(_BYTE *)(v94 + 17) &= ~1u;
            }
          }
        }
      }
      v79 = 1;
LABEL_176:
      v3 = v1145;
      v82 = *(_QWORD **)(v1145 + 120);
    }
    v78 = (llvm *)*((_QWORD *)v78 + 1);
  }
  while (v78 != v1112);
LABEL_222:
  v133 = v1140 | v79;
  v134 = &unk_1C640F000;
  if (!*(_BYTE *)(v3 + 112))
  {
    v1174 = v1178;
    v1175 = v1178;
    v1176 = 16;
    v1177 = 0;
    v135 = *(_QWORD *)(v3 + 80);
    v136 = *(char **)(v135 + 24);
    v137 = *(char **)(v135 + 32);
    v1169 = &v1171;
    v1170 = (void *)0x1000000000;
    sub_1C499C3FC((unsigned int *)&v1169, v136, v137);
    for (i = v1170; (_DWORD)v1170; i = v1170)
    {
      v139 = *((_QWORD *)v1169 + i - 1);
      LODWORD(v1170) = i - 1;
      sub_1C4F5F34C((unsigned int *)&v1169, (uint64_t)v1169 + 8 * i - 8, *(char **)(v139 + 8), *(char **)(v139 + 16));
      LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v139);
      if (LoopPredecessor)
      {
        v141 = *(_QWORD *)(LoopPredecessor + 40);
        if (v141 != LoopPredecessor + 40)
        {
          if (v141)
            v142 = v141 - 24;
          else
            v142 = 0;
          if (*(_BYTE *)(v142 + 16) != 30)
          {
            switch(*(_BYTE *)(v142 + 16))
            {
              case 0x1E:
LABEL_1960:
                __break(1u);
                goto LABEL_1961;
              case 0x1F:
                v143 = (*(_DWORD *)(v142 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_236;
              case 0x20:
                v143 = (*(_DWORD *)(v142 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_236;
              case 0x27:
                v143 = *(_DWORD *)(v142 + 80) + 1;
LABEL_236:
                if (v143 != 1)
                  continue;
                goto LABEL_231;
              default:
                continue;
            }
          }
          if ((*(_DWORD *)(v142 + 20) & 0x7FFFFFF) != 3)
LABEL_231:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1174, LoopPredecessor);
        }
      }
    }
    v1155 = &__src.u64[1];
    __src.i64[0] = 0x1000000000;
    v144 = *(llvm **)(*((_QWORD *)v1108 + 10) + 8);
    v1141 = v133;
    if (v144 == v1112)
      goto LABEL_493;
    do
    {
      v145 = (uint64_t)v144 - 24;
      if (!v144)
        v145 = 0;
      v1179 = (void *)6;
      v1180 = 0;
      v1181 = v145;
      if (v145 != -8192 && v145 != -4096 && v145 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v1179);
      v147 = (_QWORD *)sub_1C5087E70((unsigned int *)&v1155, (unint64_t)&v1179, 1);
      v148 = __src.i32[0];
      v149 = (unint64_t *)((char *)v1155 + 24 * __src.u32[0]);
      *v149 = 6;
      v149[1] = 0;
      v150 = (unint64_t)(v149 + 1);
      v151 = v147[2];
      v149[2] = v151;
      if (v151 != -8192 && v151 != -4096 && v151 != 0)
      {
        v153 = *v147 & 0xFFFFFFFFFFFFFFF8;
        v149[1] = *(_QWORD *)v153;
        *(_QWORD *)v153 = v149;
        *v149 = v153 | 6;
        v154 = (uint64_t *)v149[1];
        if (v154)
          *v154 = *v154 & 7 | v150;
      }
      v155 = v148 + 1;
      __src.i32[0] = v155;
      if (v1181 != -8192 && v1181 != -4096 && v1181)
      {
        v156 = (unint64_t)v1179 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)((unint64_t)v1179 & 0xFFFFFFFFFFFFFFF8) = v1180;
        if (v1180)
        {
          *(_QWORD *)v1180 = *(_QWORD *)v1180 & 7 | v156;
        }
        else
        {
          v157 = v1181;
          v158 = ***(int32x2_t ****)v1181;
          v159 = (unint64_t)v158[303];
          if (v159 <= v156)
          {
            v160 = v158[305].u32[0];
            if (v159 + 16 * v160 > v156)
            {
              v161 = v160 - 1;
              LODWORD(v162) = v161 & ((v1181 >> 4) ^ (v1181 >> 9));
              v163 = (uint64_t *)(v159 + 16 * v162);
              v164 = *v163;
              if (v1181 == *v163)
              {
LABEL_267:
                *v163 = -8192;
                v158[304] = vadd_s32(v158[304], (int32x2_t)0x1FFFFFFFFLL);
                v157 = v1181;
              }
              else
              {
                v165 = 1;
                while (v164 != -4096)
                {
                  v166 = v162 + v165++;
                  v162 = v166 & v161;
                  v164 = *(_QWORD *)(v159 + 16 * v162);
                  if (v1181 == v164)
                  {
                    v163 = (uint64_t *)(v159 + 16 * v162);
                    goto LABEL_267;
                  }
                }
              }
              *(_BYTE *)(v157 + 17) &= ~1u;
            }
          }
        }
      }
      v144 = (llvm *)*((_QWORD *)v144 + 1);
    }
    while (v144 != v1112);
    if (!v155)
    {
LABEL_493:
      v167 = 0;
      goto LABEL_494;
    }
    v167 = 0;
    v168 = (char *)v1155;
    v169 = (char *)v1155 + 24 * v155;
LABEL_273:
    v170 = (llvm::BasicBlock *)*((_QWORD *)v168 + 2);
    if (!v170)
      goto LABEL_491;
    v171 = sub_1C5087954(*((_QWORD **)v168 + 2));
    if (!v171)
      goto LABEL_491;
    v172 = v171;
    v173 = sub_1C477672C((uint64_t)&v1174, (uint64_t)v170);
    v174 = v1175 == v1174 ? (uint64_t *)((char *)&v1176 + 4) : &v1176;
    if (!byte_1ED7F5980 && v173 != (_QWORD *)((char *)v1175 + 8 * *(unsigned int *)v174))
    {
      SinglePredecessor = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(v170);
      if (!SinglePredecessor || !llvm::BasicBlock::getSingleSuccessor(SinglePredecessor))
        goto LABEL_491;
    }
    v177 = *((_QWORD *)v170 + 1);
    if (v177)
    {
      while (1)
      {
        v178 = *(_QWORD *)(v177 + 24);
        v179 = *(unsigned __int8 *)(v178 + 16);
        v180 = v178 && v179 >= 0x1C;
        v181 = !v180 || v179 - 29 > 0xA;
        if (!v181)
          break;
        v177 = *(_QWORD *)(v177 + 8);
        if (!v177)
          goto LABEL_294;
      }
LABEL_308:
      v189 = *(_QWORD *)(v178 + 40);
      v190 = *(_QWORD *)(v189 + 40);
      if (v190 != v189 + 40)
      {
        v191 = v190 - 24;
        if (!v190)
          v191 = 0;
        v192 = *(unsigned __int8 *)(v191 + 16) - 40;
        if (v192 < 0xFFFFFFF5)
          v191 = 0;
        if (v190)
        {
          if (*(_BYTE *)(v191 + 16) == 39 && v192 >= 0xFFFFFFF5)
          {
            v194 = *(unsigned int *)(v191 + 80);
            if ((_DWORD)v194 != -1)
            {
              v195 = 0;
              v196 = v191 - 32 * v194 - 32;
              v197 = v194 + 1;
              do
              {
                v198 = (v195 - 1);
                if (!v195)
                  v198 = -1;
                if (*(_QWORD **)(v196 + 32 * v198) == v172)
                  goto LABEL_491;
                ++v195;
              }
              while (v197 != v195);
            }
          }
        }
      }
      while (1)
      {
        v177 = *(_QWORD *)(v177 + 8);
        if (!v177)
          break;
        v178 = *(_QWORD *)(v177 + 24);
        v199 = *(unsigned __int8 *)(v178 + 16);
        if (v178)
          v200 = v199 >= 0x1C;
        else
          v200 = 0;
        if (v200 && v199 - 29 < 0xB)
          goto LABEL_308;
      }
    }
LABEL_294:
    UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(v170);
    if (!UniquePredecessor)
      goto LABEL_421;
    v183 = UniquePredecessor;
    v184 = *(_QWORD *)(UniquePredecessor + 40);
    if (v184)
      v185 = v184 - 24;
    else
      v185 = 0;
    if (*(unsigned __int8 *)(v185 + 16) - 29 >= 0xB)
      v185 = 0;
    if (*(unsigned __int8 *)(v185 + 16) - 31 > 1)
      goto LABEL_421;
    v186 = (_QWORD *)*((_QWORD *)v170 + 5);
    if (v186 == (_QWORD *)((char *)v170 + 40))
    {
      v188 = 0;
    }
    else
    {
      v187 = v186 ? (uint64_t)(v186 - 3) : 0;
      v188 = *(unsigned __int8 *)(v187 + 16) - 29 >= 0xB ? 0 : (char *)v187;
    }
    if (v188 != llvm::BasicBlock::getFirstNonPHIOrDbg(v170, 1))
      goto LABEL_421;
    v202 = v172[6];
    v203 = v202 ? v202 - 24 : 0;
    if (*(_BYTE *)(v203 + 16) != 83)
      goto LABEL_421;
    v1179 = &v1183;
    v1180 = &v1183;
    v1181 = 16;
    LODWORD(v1182) = 0;
    v204 = v172[1];
    if (!v204)
      goto LABEL_350;
    while (1)
    {
      v205 = *(_QWORD *)(v204 + 24);
      v206 = *(unsigned __int8 *)(v205 + 16);
      v207 = v205 && v206 >= 0x1C;
      if (v207 && v206 - 29 <= 0xA)
        break;
      v204 = *(_QWORD *)(v204 + 8);
      if (!v204)
        goto LABEL_350;
    }
LABEL_363:
    v219 = *(_QWORD *)(v205 + 40);
    if ((llvm::BasicBlock *)v219 == v170)
      goto LABEL_394;
    if ((_QWORD *)v172[5] == v172 + 5)
    {
LABEL_393:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1179, v219);
      goto LABEL_394;
    }
    v220 = v172[6];
    while (2)
    {
      v221 = v220 - 24;
      if (v220)
        v222 = v220 - 24;
      else
        v222 = 0;
      if (!v220 || *(_BYTE *)(v222 + 16) != 83)
        goto LABEL_393;
      v223 = *(_DWORD *)(v220 - 4);
      v224 = v223 & 0x7FFFFFF;
      if ((v223 & 0x7FFFFFF) != 0)
      {
        v225 = 0;
        while (1)
        {
          v226 = v221 - 32 * v224;
          if ((v223 & 0x40000000) != 0)
            v226 = *(_QWORD *)(v221 - 8);
          if (*(llvm::BasicBlock **)(v226 + 32 * *(unsigned int *)(v221 + 60) + 8 * v225) == v170)
            break;
          if (v224 == ++v225)
            goto LABEL_377;
        }
      }
      else
      {
LABEL_377:
        LODWORD(v225) = -1;
      }
      v227 = v224;
      if ((v223 & 0x40000000) != 0)
      {
        v228 = *(_QWORD *)(v221 - 8);
        if ((_DWORD)v224)
        {
LABEL_380:
          v229 = 0;
          while (1)
          {
            v230 = v221 - 32 * v227;
            if ((v223 & 0x40000000) != 0)
              v230 = *(_QWORD *)(v221 - 8);
            if (*(_QWORD *)(v230 + 32 * *(unsigned int *)(v221 + 60) + 8 * v229) == v219)
              break;
            if (v227 == ++v229)
              goto LABEL_387;
          }
LABEL_388:
          if ((v223 & 0x40000000) != 0)
            v231 = *(_QWORD *)(v221 - 8);
          else
            v231 = v221 - 32 * v227;
          if (*(_QWORD *)(v228 + 32 * v225) == *(_QWORD *)(v231 + 32 * v229))
          {
            v220 = *(_QWORD *)(v221 + 32);
            continue;
          }
LABEL_394:
          while (1)
          {
            v204 = *(_QWORD *)(v204 + 8);
            if (!v204)
              break;
            v205 = *(_QWORD *)(v204 + 24);
            v232 = *(unsigned __int8 *)(v205 + 16);
            if (v205)
              v233 = v232 >= 0x1C;
            else
              v233 = 0;
            if (v233 && v232 - 29 < 0xB)
              goto LABEL_363;
          }
LABEL_350:
          v209 = sub_1C477672C((uint64_t)&v1179, v183);
          v210 = v1180;
          v211 = v1179;
          if (v1180 == v1179)
            v212 = (uint64_t *)((char *)&v1181 + 4);
          else
            v212 = &v1181;
          if (v209 == (_QWORD *)((char *)v1180 + 8 * *(unsigned int *)v212))
          {
            BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(*(uint64_t **)(v1145 + 88), v183);
            v214 = llvm::BlockFrequencyInfo::getBlockFreq(*(uint64_t **)(v1145 + 88), (uint64_t)v170);
            v210 = v1180;
            v211 = v1179;
            if (v1180 == v1179)
              v215 = (uint64_t *)((char *)&v1181 + 4);
            else
              v215 = &v1181;
            v216 = *(unsigned int *)v215;
            v217 = (llvm::BasicBlock **)v1180;
            if ((_DWORD)v216)
            {
              v218 = 0;
              while (*(_QWORD *)((char *)v1180 + v218) >= 0xFFFFFFFFFFFFFFFELL)
              {
                v218 += 8;
                if (8 * v216 == v218)
                  goto LABEL_417;
              }
              v217 = (llvm::BasicBlock **)((char *)v1180 + v218);
            }
            v235 = (llvm::BasicBlock **)((char *)v1180 + 8 * v216);
            if (v217 != v235)
            {
              v1124 = v214;
              v236 = *v217;
LABEL_406:
              if (llvm::BasicBlock::getUniquePredecessor(v236) == v183 && sub_1C5087954(v236) == v172)
              {
                v237 = llvm::BlockFrequencyInfo::getBlockFreq(*(uint64_t **)(v1145 + 88), (uint64_t)v236);
                v238 = v237 + v1124;
                if (__CFADD__(v237, v1124))
                  v238 = -1;
                v1124 = v238;
              }
              v239 = (unint64_t *)(v217 + 1);
              while (v239 != (unint64_t *)v235)
              {
                v240 = *v239++;
                v236 = (llvm::BasicBlock *)v240;
                if (v240 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v217 = (llvm::BasicBlock **)(v239 - 1);
                  goto LABEL_406;
                }
              }
              v210 = v1180;
              v211 = v1179;
              v214 = v1124;
            }
LABEL_417:
            v213 = BlockFreq <= v214 * (unint64_t)dword_1ED7F5BC0;
          }
          else
          {
            v213 = 1;
          }
          if (v210 != v211)
            free(v210);
          if (v213)
          {
LABEL_421:
            v241 = *((_QWORD *)v170 + 5);
            if (v241)
              v242 = v241 - 24;
            else
              v242 = 0;
            if (*(unsigned __int8 *)(v242 + 16) - 29 >= 0xB)
              v242 = 0;
            v243 = *(llvm::BasicBlock **)(v242 - 32);
            v244 = llvm::BasicBlock::getSinglePredecessor(v243);
            if (v244)
              v245 = v244 == (_QWORD)v243;
            else
              v245 = 1;
            if (v245)
            {
              if (*((llvm::BasicBlock **)v243 + 5) != (llvm::BasicBlock *)((char *)v243 + 40))
              {
                for (j = *((_QWORD *)v243 + 6); ; j = *(_QWORD *)(v247 + 32))
                {
                  v247 = j - 24;
                  v248 = j ? j - 24 : 0;
                  if (!j || *(_BYTE *)(v248 + 16) != 83)
                    break;
                  v249 = *(_DWORD *)(j - 4);
                  v250 = v249 & 0x7FFFFFF;
                  if ((v249 & 0x7FFFFFF) != 0)
                  {
                    v251 = 0;
                    while (1)
                    {
                      v252 = v247 - 32 * v250;
                      if ((v249 & 0x40000000) != 0)
                        v252 = *(_QWORD *)(v247 - 8);
                      if (*(llvm::BasicBlock **)(v252 + 32 * *(unsigned int *)(v247 + 60) + 8 * v251) == v170)
                        break;
                      if (v250 == ++v251)
                        goto LABEL_444;
                    }
                  }
                  else
                  {
LABEL_444:
                    LODWORD(v251) = -1;
                  }
                  v253 = llvm::PHINode::removeIncomingValue((llvm::PHINode *)v247, v251, 0);
                  v254 = v253;
                  if (v253 && *(_BYTE *)(v253 + 16) == 83 && *(llvm::BasicBlock **)(v253 + 40) == v170)
                  {
                    v272 = *(_DWORD *)(v253 + 20) & 0x7FFFFFF;
                    if ((_DWORD)v272)
                    {
                      v273 = 0;
                      v274 = 0;
                      v275 = 32 * v272;
                      do
                      {
                        v276 = *(_DWORD *)(v254 + 20);
                        if ((v276 & 0x40000000) != 0)
                          v277 = *(_QWORD *)(v254 - 8);
                        else
                          v277 = v254 - 32 * (v276 & 0x7FFFFFF);
                        sub_1C477667C((llvm::PHINode *)v247, *(_QWORD *)(v277 + v274), *(_QWORD *)(v277 + 32 * *(unsigned int *)(v254 + 60) + v273));
                        v274 += 32;
                        v273 += 8;
                      }
                      while (v275 != v274);
                    }
                  }
                  else
                  {
                    v255 = *((_QWORD *)v170 + 6);
                    v256 = v255 - 24;
                    if (!v255)
                      v256 = 0;
                    v257 = *(unsigned __int8 *)(v256 + 16);
                    if (v257 == 83)
                      v258 = v256;
                    else
                      v258 = 0;
                    if (v255 && v257 == 83)
                    {
                      v259 = *(_DWORD *)(v258 + 20) & 0x7FFFFFF;
                      if ((_DWORD)v259)
                      {
                        v260 = 0;
                        v261 = 8 * v259;
                        do
                        {
                          v262 = *(_DWORD *)(v258 + 20);
                          if ((v262 & 0x40000000) != 0)
                            v263 = *(_QWORD *)(v258 - 8);
                          else
                            v263 = v258 - 32 * (v262 & 0x7FFFFFF);
                          sub_1C477667C((llvm::PHINode *)v247, v254, *(_QWORD *)(v263 + 32 * *(unsigned int *)(v258 + 60) + v260));
                          v260 += 8;
                        }
                        while (v261 != v260);
                      }
                    }
                    else
                    {
                      v264 = *((_QWORD *)v170 + 1);
                      if (v264)
                      {
                        while (1)
                        {
                          v265 = *(_QWORD *)(v264 + 24);
                          v266 = *(unsigned __int8 *)(v265 + 16);
                          v267 = v265 && v266 >= 0x1C;
                          if (v267 && v266 - 29 <= 0xA)
                            break;
                          v264 = *(_QWORD *)(v264 + 8);
                          if (!v264)
                            goto LABEL_489;
                        }
LABEL_473:
                        sub_1C477667C((llvm::PHINode *)v247, v254, *(_QWORD *)(v265 + 40));
                        while (1)
                        {
                          v264 = *(_QWORD *)(v264 + 8);
                          if (!v264)
                            break;
                          v265 = *(_QWORD *)(v264 + 24);
                          v269 = *(unsigned __int8 *)(v265 + 16);
                          if (v265)
                            v270 = v269 >= 0x1C;
                          else
                            v270 = 0;
                          if (v270 && v269 - 29 < 0xB)
                            goto LABEL_473;
                        }
                      }
                    }
                  }
LABEL_489:
                  ;
                }
              }
              v167 = 1;
              llvm::Value::doRAUW(v170, v243, (llvm::Value *)1);
              llvm::BasicBlock::eraseFromParent(v170);
            }
            else
            {
              llvm::MergeBlockIntoPredecessor((uint64_t)v243, 0, 0, 0, 0, 0);
              v167 = 1;
            }
          }
LABEL_491:
          v168 += 24;
          v3 = v1145;
          if (v168 != v169)
            goto LABEL_273;
LABEL_494:
          sub_1C50880D4((char **)&v1155);
          if (v1169 != &v1171)
            free(v1169);
          if (v1175 != v1174)
            free(v1175);
          v133 = v1141 | v167;
          v134 = &unk_1C640F000;
          if (!*(_BYTE *)(v3 + 112))
          {
            if ((*(_WORD *)(*(_QWORD *)(v3 + 32) + 1020) & 0x800) != 0 && !*(_BYTE *)(*(_QWORD *)(v3 + 48) + 48))
            {
              v970 = (llvm *)*((_QWORD *)v1108 + 10);
              if (v970 != v1112)
              {
                v278 = 0;
                v971 = &v1167;
                v972 = &v1168;
                v973 = (llvm *)&__src.u64[1];
                v974 = &v1166;
                v975 = &unk_1E8167888;
                v976 = &unk_1E8167A08;
                v50 = -8192;
                while (1)
                {
                  if (v970)
                    v977 = (llvm *)((char *)v970 - 24);
                  else
                    v977 = 0;
                  v978 = (llvm::BasicBlock *)*((_QWORD *)v977 + 5);
                  if (v978 == (llvm::BasicBlock *)((char *)v977 + 40))
                    goto LABEL_1938;
                  if (v978)
                    v979 = (char *)v978 - 24;
                  else
                    v979 = 0;
                  v980 = v979[16] - 40;
                  if (v980 < 0xFFFFFFF5)
                    v979 = 0;
                  if (!v978)
                    goto LABEL_1938;
                  if (v979[16] != 30 || v980 < 0xFFFFFFF5)
                    goto LABEL_1938;
                  if ((*((_DWORD *)v979 + 5) & 0x7FFFFFF) != 3)
                    goto LABEL_1938;
                  v982 = *((_QWORD *)v979 - 12);
                  v983 = *(_QWORD *)(v982 + 8);
                  if (!v983)
                    goto LABEL_1938;
                  if (*(_QWORD *)(v983 + 8))
                    goto LABEL_1938;
                  if (*(unsigned __int8 *)(v982 + 16) < 0x1Cu)
                    goto LABEL_1938;
                  v984 = (llvm::BasicBlock *)*((_QWORD *)v979 - 4);
                  if (!v984)
                    goto LABEL_1938;
                  v985 = (llvm::BasicBlock *)*((_QWORD *)v979 - 8);
                  if (!v985)
                    goto LABEL_1938;
                  if (*((unsigned __int8 *)v978 - 8) - 29 >= 0xB)
                    v986 = 0;
                  else
                    v986 = (llvm::BasicBlock *)((char *)v978 - 24);
                  if ((*((_BYTE *)v986 + 23) & 0x20) == 0)
                    goto LABEL_1796;
                  v987 = ***(_QWORD ***)v986;
                  v1155 = v986;
                  v988 = *(_DWORD *)(v987 + 2496);
                  if (v988)
                  {
                    v989 = *(_QWORD *)(v987 + 2480);
                    v990 = v988 - 1;
                    v991 = v990 & ((v986 >> 4) ^ (v986 >> 9));
                    v992 = (llvm::Value **)(v989 + 40 * v991);
                    v993 = *v992;
                    if (*v992 == v986)
                      goto LABEL_1792;
                    v994 = 0;
                    v995 = 1;
                    while (v993 != (llvm::Value *)-4096)
                    {
                      if (v994)
                        v996 = 0;
                      else
                        v996 = v993 == (llvm::Value *)-8192;
                      if (v996)
                        v994 = v992;
                      v997 = v991 + v995++;
                      v991 = v997 & v990;
                      v992 = (llvm::Value **)(v989 + 40 * v991);
                      v993 = *v992;
                      if (*v992 == v986)
                        goto LABEL_1792;
                    }
                    v1123 = v986;
                    v1127 = v976;
                    v1130 = v975;
                    v1133 = v974;
                    v1139 = v973;
                    v1023 = v972;
                    if (v994)
                      v1024 = v994;
                    else
                      v1024 = v992;
                  }
                  else
                  {
                    v1123 = v986;
                    v1127 = v976;
                    v1130 = v975;
                    v1133 = v974;
                    v1139 = v973;
                    v1023 = v972;
                    v1024 = 0;
                  }
                  v992 = (llvm::Value **)sub_1C541AB24(v987 + 2480, (uint64_t)&v1155, (uint64_t *)&v1155, v1024);
                  v1025 = (llvm::Value *)v1155;
                  v992[4] = 0;
                  v992[3] = 0;
                  *v992 = v1025;
                  v992[1] = (llvm::Value *)(v992 + 3);
                  v992[2] = (llvm::Value *)0x100000000;
                  v972 = v1023;
                  v974 = v1133;
                  v973 = v1139;
                  v976 = v1127;
                  v975 = v1130;
                  v50 = -8192;
                  v986 = v1123;
LABEL_1792:
                  v998 = *((unsigned int *)v992 + 4);
                  if ((_DWORD)v998)
                  {
                    v999 = (_QWORD *)((char *)v992[1] + 8);
                    v1000 = 16 * v998;
                    while (*((_DWORD *)v999 - 2) != 15)
                    {
                      v999 += 2;
                      v1000 -= 16;
                      if (!v1000)
                        goto LABEL_1796;
                    }
                    if (*v999)
                      v1005 = 1;
                    else
                      v1005 = v984 == v985;
                    if (v1005 || v982 == 0)
                      goto LABEL_1938;
                    goto LABEL_1798;
                  }
LABEL_1796:
                  if (v984 == v985 || !v982)
                    goto LABEL_1938;
LABEL_1798:
                  v1001 = *(_DWORD *)(*(_QWORD *)v982 + 8);
                  if ((v1001 & 0xFE) == 0x12)
                    v1001 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v982 + 16) + 8);
                  if (v1001 == 269)
                  {
                    v1002 = *(unsigned __int8 *)(v982 + 16);
                    if (v1002 == 85)
                    {
                      v1007 = *(unsigned __int8 **)(v982 - 32);
                      if (v1007)
                      {
                        if (v1007[16] <= 0x14u)
                        {
                          v1008 = *(_QWORD *)(v982 - 96);
                          v1117 = *(llvm::Value **)(v982 - 64);
                          v1120 = v972;
                          v1132 = v974;
                          v1138 = v973;
                          v1126 = v976;
                          v1129 = v975;
                          v1122 = v986;
                          isNullValue = llvm::Constant::isNullValue((llvm::Constant *)v1007);
                          v986 = v1122;
                          v976 = v1126;
                          v50 = -8192;
                          v975 = v1129;
                          v974 = v1132;
                          v973 = v1138;
                          v972 = v1120;
                          if (isNullValue)
                          {
                            v1010 = *(_QWORD *)(v1008 + 8);
                            if (v1010)
                            {
                              if (!*(_QWORD *)(v1010 + 8))
                              {
                                v1011 = *((_QWORD *)v1117 + 1);
                                if (v1011)
                                {
                                  if (!*(_QWORD *)(v1011 + 8))
                                  {
                                    v1115 = v1008;
LABEL_1852:
                                    v1114 = 1;
                                    goto LABEL_1853;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    else if (v1002 == 56)
                    {
                      v1003 = *(_DWORD *)(v982 + 20);
                      v1004 = (v1003 & 0x40000000) != 0
                            ? *(_QWORD **)(v982 - 8)
                            : (_QWORD *)(v982 - 32 * (v1003 & 0x7FFFFFF));
                      v1012 = *v1004;
                      v1013 = *(_QWORD *)(*v1004 + 8);
                      if (v1013)
                      {
                        if (!*(_QWORD *)(v1013 + 8))
                        {
                          v1117 = (llvm::Value *)v1004[4];
                          v1026 = *((_QWORD *)v1117 + 1);
                          if (v1026)
                          {
                            if (!*(_QWORD *)(v1026 + 8))
                            {
                              v1115 = v1012;
                              v1122 = v986;
                              v1126 = v976;
                              v1129 = v975;
                              v1132 = v974;
                              v1138 = v973;
                              v1120 = v972;
                              goto LABEL_1852;
                            }
                          }
                        }
                      }
                    }
                  }
                  v1014 = *(_DWORD *)(*(_QWORD *)v982 + 8);
                  if ((v1014 & 0xFE) == 0x12)
                    v1014 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v982 + 16) + 8);
                  if (v1014 != 269)
                    goto LABEL_1938;
                  v1015 = *(unsigned __int8 *)(v982 + 16);
                  if (v1015 == 85)
                  {
                    v1018 = *(unsigned __int8 **)(v982 - 64);
                    if (!v1018)
                      goto LABEL_1938;
                    v1122 = v986;
                    v1126 = v976;
                    v1129 = v975;
                    v1132 = v974;
                    v1138 = v973;
                    v1120 = v972;
                    if (v1018[16] > 0x14u)
                      goto LABEL_1937;
                    v1115 = *(_QWORD *)(v982 - 96);
                    v1117 = *(llvm::Value **)(v982 - 32);
                    if (!llvm::Constant::isOneValue((llvm::Constant *)v1018))
                      goto LABEL_1937;
                    v1019 = *(_QWORD *)(v1115 + 8);
                    if (!v1019 || *(_QWORD *)(v1019 + 8))
                      goto LABEL_1937;
                    v1020 = v1117;
                  }
                  else
                  {
                    if (v1015 != 57)
                      goto LABEL_1938;
                    v1016 = *(_DWORD *)(v982 + 20);
                    v1017 = (v1016 & 0x40000000) != 0
                          ? *(_QWORD **)(v982 - 8)
                          : (_QWORD *)(v982 - 32 * (v1016 & 0x7FFFFFF));
                    v1021 = *(_QWORD *)(*v1017 + 8);
                    if (!v1021)
                      goto LABEL_1938;
                    v1115 = *v1017;
                    v1122 = v986;
                    if (*(_QWORD *)(v1021 + 8))
                      goto LABEL_1938;
                    v1126 = v976;
                    v1129 = v975;
                    v1132 = v974;
                    v1138 = v973;
                    v1020 = (llvm::Value *)v1017[4];
                    v1117 = v1020;
                    v1120 = v972;
                  }
                  v1022 = *((_QWORD *)v1020 + 1);
                  if (!v1022 || *(_QWORD *)(v1022 + 8))
                    goto LABEL_1937;
                  v1114 = 0;
LABEL_1853:
                  BYTE4(v1155) = 0;
                  LODWORD(v1155) = 0;
                  if (!sub_1C5088210((uint64_t)&v1155, (unsigned __int8 *)v1115))
                    goto LABEL_1937;
                  BYTE4(v1155) = 0;
                  LODWORD(v1155) = 0;
                  v1027 = sub_1C5088210((uint64_t)&v1155, (unsigned __int8 *)v1117);
                  v972 = v1120;
                  v974 = v1132;
                  v973 = v1138;
                  v976 = v1126;
                  v975 = v1129;
                  v50 = -8192;
                  if (v1027)
                  {
                    v1113 = v971;
                    v1144 = v133;
                    v1028 = **(_QWORD **)v977;
                    if ((*((_BYTE *)v977 + 23) & 0x10) != 0)
                    {
                      v1029 = *(_QWORD *)(*(_QWORD *)v1028 + 152);
                      v1030 = *(unsigned int *)(*(_QWORD *)v1028 + 168);
                      if (!(_DWORD)v1030)
                        goto LABEL_1862;
                      LODWORD(v1031) = (v1030 - 1) & ((v977 >> 4) ^ (v977 >> 9));
                      v1032 = (llvm::BasicBlock **)(v1029 + 16 * v1031);
                      v1033 = *v1032;
                      if (*v1032 != v977)
                      {
                        v1034 = 1;
                        while (v1033 != (llvm::BasicBlock *)-4096)
                        {
                          v1035 = v1031 + v1034++;
                          v1031 = v1035 & (v1030 - 1);
                          v1033 = *(llvm::BasicBlock **)(v1029 + 16 * v1031);
                          if (v1033 == v977)
                          {
                            v1032 = (llvm::BasicBlock **)(v1029 + 16 * v1031);
                            goto LABEL_1863;
                          }
                        }
LABEL_1862:
                        v1032 = (llvm::BasicBlock **)(v1029 + 16 * v1030);
                      }
LABEL_1863:
                      v1036 = v1032[1];
                      v1039 = *(_QWORD *)v1036;
                      v1038 = (char *)v1036 + 16;
                      v1037 = v1039;
                    }
                    else
                    {
                      v1037 = 0;
                      v1038 = &byte_1C871356D;
                    }
                    v1157.i16[4] = 773;
                    v1155 = v1038;
                    __src.i64[0] = v1037;
                    __src.i64[1] = (uint64_t)".cond.split";
                    v1040 = *((_QWORD *)v977 + 7);
                    v1041 = *((_QWORD *)v977 + 4);
                    v1042 = operator new();
                    *(_QWORD *)v1042 = *(_QWORD *)v1028 + 1600;
                    *(_QWORD *)(v1042 + 8) = 0;
                    v1110 = v1042 + 8;
                    v1043 = *(_DWORD *)(v1042 + 20) & 0xC0000000;
                    *(_QWORD *)(v1042 + 24) = 0;
                    v1044 = v1042 + 24;
                    *(_DWORD *)(v1042 + 16) = 22;
                    *(_DWORD *)(v1042 + 20) = v1043;
                    *(_QWORD *)(v1042 + 32) = 0;
                    *(_QWORD *)(v1042 + 40) = v1042 + 40;
                    v1111 = v1042 + 40;
                    *(_QWORD *)(v1042 + 48) = v1042 + 40;
                    *(_QWORD *)(v1042 + 56) = 0;
                    v1045 = (uint64_t ***)v1042;
                    if (v1040)
                    {
                      v1046 = v1040 + 72;
                      v1047 = v1041 == v1040 + 72 || v1041 == 0;
                      v1048 = v1041 - 24;
                      if (v1047)
                        v1048 = 0;
                      v1049 = (uint64_t **)(v1048 + 24);
                      if (v1047)
                        v1050 = (uint64_t **)(v1040 + 72);
                      else
                        v1050 = v1049;
                      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v1046, v1045);
                      v1051 = *v1050;
                      v1045[3] = (uint64_t **)*v1050;
                      v1045[4] = v1050;
                      v1051[1] = v1044;
                      *v1050 = (uint64_t *)v1044;
                    }
                    llvm::Value::setName(v1045, (uint64_t)&v1155);
                    v1052 = (_QWORD *)((char *)v1122 - 96);
                    if (*((_QWORD *)v1122 - 12))
                    {
                      **((_QWORD **)v1122 - 10) = *((_QWORD *)v1122 - 11);
                      v1053 = *((_QWORD *)v1122 - 11);
                      if (v1053)
                        *(_QWORD *)(v1053 + 16) = *((_QWORD *)v1122 - 10);
                    }
                    *v1052 = v1115;
                    if (v1115)
                    {
                      v1054 = *(_QWORD *)(v1115 + 8);
                      v1116 = (_QWORD *)(v1115 + 8);
                      *((_QWORD *)v1122 - 11) = v1054;
                      if (v1054)
                        *(_QWORD *)(v1054 + 16) = (char *)v1122 - 88;
                      *((_QWORD *)v1122 - 10) = v1116;
                      *v1116 = v1052;
                    }
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v982 + 40) + 40, (uint64_t ***)v982);
                    v1055 = *(_QWORD *)(v982 + 24);
                    v1056 = *(_QWORD **)(v982 + 32);
                    *v1056 = v1055;
                    *(_QWORD *)(v1055 + 8) = v1056;
                    *(_QWORD *)(v982 + 24) = 0;
                    *(_QWORD *)(v982 + 32) = 0;
                    llvm::Value::deleteValue((llvm::Value *)v982);
                    if (v1114)
                    {
                      v1057 = (uint64_t **)((char *)v1122 - 32);
                      if (*((_QWORD *)v1122 - 4))
                      {
                        **((_QWORD **)v1122 - 2) = *((_QWORD *)v1122 - 3);
                        v1058 = *((_QWORD *)v1122 - 3);
                        if (v1058)
                          *(_QWORD *)(v1058 + 16) = *((_QWORD *)v1122 - 2);
                      }
                      *((_QWORD *)v1122 - 4) = v1045;
                      v1059 = v1045[1];
                      *((_QWORD *)v1122 - 3) = v1059;
                      v1060 = (char *)v1122 - 24;
                      v1061 = -1;
                      if (v1059)
                        goto LABEL_1886;
                    }
                    else
                    {
                      v1057 = (uint64_t **)((char *)v1122 - 64);
                      if (*((_QWORD *)v1122 - 8))
                      {
                        **((_QWORD **)v1122 - 6) = *((_QWORD *)v1122 - 7);
                        v1090 = *((_QWORD *)v1122 - 7);
                        if (v1090)
                          *(_QWORD *)(v1090 + 16) = *((_QWORD *)v1122 - 6);
                      }
                      *((_QWORD *)v1122 - 8) = v1045;
                      v1059 = v1045[1];
                      *((_QWORD *)v1122 - 7) = v1059;
                      v1060 = (char *)v1122 - 56;
                      v1061 = -2;
                      if (v1059)
LABEL_1886:
                        v1059[2] = (uint64_t *)v1060;
                    }
                    *((_QWORD *)v1122 + 4 * v1061 + 2) = v1110;
                    v1045[1] = v1057;
                    v1062 = **v1045;
                    v1155 = v1138;
                    __src.i64[0] = 0x200000000;
                    v1159.i64[1] = (uint64_t)v1062;
                    v1160 = v1113;
                    v1161 = (uint64_t)v1120;
                    v1162 = 0;
                    v1163 = 0;
                    v1164 = 512;
                    v1165 = 7;
                    *v1132 = 0;
                    v1132[1] = 0;
                    v1167 = v1129;
                    v1168 = v1126;
                    v1158.i64[1] = (uint64_t)v1045;
                    v1159.i64[0] = v1111;
                    v1063 = operator new(0xA0uLL);
                    v1064 = 0;
                    v1065 = (llvm::Value *)(v1063 + 24);
                    v1066 = v1063;
                    v1063[29] = v1063[29] & 0x38000000 | 3;
                    do
                    {
                      v1067 = &v1063[v1064];
                      *v1067 = 0;
                      v1067[1] = 0;
                      v1067[2] = 0;
                      v1067[3] = v1065;
                      v1064 += 8;
                    }
                    while (v1064 != 24);
                    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v1063 + 24), v984, v985, v1117, 0);
                    LOWORD(v1183) = 257;
                    (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v1161 + 16))(v1161, v1065, &v1179, v1158.i64[1], v1159.i64[0]);
                    v1068 = (llvm *)v1155;
                    if (__src.i32[0])
                    {
                      v1069 = (llvm *)((char *)v1155 + 16 * __src.u32[0]);
                      v1070 = (unsigned __int8 **)(v1066 + 36);
                      while (1)
                      {
                        v1071 = *(_DWORD *)v1068;
                        v1072 = (unsigned __int8 *)*((_QWORD *)v1068 + 1);
                        if (v1072)
                        {
                          if (!v1071)
                          {
                            v1174 = (void *)*((_QWORD *)v1068 + 1);
                            llvm::MetadataTracking::track((uint64_t)&v1174, v1072, 2);
                            v1073 = *v1070;
                            goto LABEL_1901;
                          }
                        }
                        else
                        {
                          v1073 = *v1070;
                          if (!*v1070 && (*((_BYTE *)v1066 + 119) & 0x20) == 0)
                            goto LABEL_1898;
                          if (!v1071)
                          {
                            v1174 = 0;
LABEL_1901:
                            if (v1073)
                              llvm::MetadataTracking::untrack((uint64_t)(v1066 + 36), v1073);
                            v1074 = (unsigned __int8 *)v1174;
                            *v1070 = (unsigned __int8 *)v1174;
                            if (v1074)
                              llvm::MetadataTracking::retrack((uint64_t)&v1174, v1074, (uint64_t)(v1066 + 36));
                            goto LABEL_1898;
                          }
                        }
                        llvm::Value::setMetadata(v1065, *(_DWORD *)v1068, (llvm::MDNode *)v1072);
LABEL_1898:
                        v1068 = (llvm *)((char *)v1068 + 16);
                        if (v1068 == v1069)
                        {
                          v1068 = (llvm *)v1155;
                          break;
                        }
                      }
                    }
                    if (v1068 != v1138)
                      free(v1068);
                    if (v1117 && *((unsigned __int8 *)v1117 + 16) >= 0x1Cu)
                    {
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v1117 + 5) + 40, (uint64_t ***)v1117);
                      v1075 = *((_QWORD *)v1117 + 3);
                      v1076 = (_QWORD *)*((_QWORD *)v1117 + 4);
                      v1077 = (char *)v1117 + 24;
                      *v1076 = v1075;
                      *(_QWORD *)(v1075 + 8) = v1076;
                      *((_QWORD *)v1117 + 3) = 0;
                      *((_QWORD *)v1117 + 4) = 0;
                      v1078 = *((_QWORD *)v1066 + 17);
                      *((_QWORD *)v1117 + 5) = v1078;
                      *(_WORD *)(v1078 + 18) &= ~0x8000u;
                      if ((*((_BYTE *)v1117 + 23) & 0x10) != 0)
                      {
                        v1093 = *(_QWORD *)(v1078 + 56);
                        if (v1093)
                        {
                          v1094 = *(llvm::ValueSymbolTable **)(v1093 + 104);
                          if (v1094)
                            llvm::ValueSymbolTable::reinsertValue(v1094, v1117);
                        }
                      }
                      v1079 = *((_QWORD *)v1066 + 15);
                      *((_QWORD *)v1117 + 3) = v1079;
                      *((_QWORD *)v1117 + 4) = v1066 + 30;
                      *(_QWORD *)(v1079 + 8) = v1077;
                      *((_QWORD *)v1066 + 15) = v1077;
                    }
                    if (v1114)
                      v1080 = v985;
                    else
                      v1080 = v984;
                    if (v1114)
                      v1081 = (uint64_t)v984;
                    else
                      v1081 = (uint64_t)v985;
                    llvm::BasicBlock::replacePhiUsesWith(v1081, v977, (llvm::BasicBlock *)v1045);
                    if (*((llvm::BasicBlock **)v1080 + 5) != (llvm::BasicBlock *)((char *)v1080 + 40))
                    {
                      for (k = *((_QWORD *)v1080 + 6); ; k = *(_QWORD *)(v1083 + 32))
                      {
                        v1083 = k - 24;
                        v1084 = k ? k - 24 : 0;
                        if (!k || *(_BYTE *)(v1084 + 16) != 83)
                          break;
                        v1085 = *(_DWORD *)(k - 4);
                        v1086 = v1085 & 0x7FFFFFF;
                        if ((v1085 & 0x7FFFFFF) != 0)
                        {
                          v1087 = 0;
                          while (1)
                          {
                            v1088 = v1083 - 32 * v1086;
                            if ((v1085 & 0x40000000) != 0)
                              v1088 = *(_QWORD *)(v1083 - 8);
                            if (*(llvm::BasicBlock **)(v1088 + 32 * *(unsigned int *)(v1083 + 60) + 8 * v1087) == v977)
                              break;
                            if (v1086 == ++v1087)
                              goto LABEL_1930;
                          }
                        }
                        else
                        {
LABEL_1930:
                          LODWORD(v1087) = -1;
                        }
                        if ((v1085 & 0x40000000) != 0)
                          v1089 = *(_QWORD *)(v1083 - 8);
                        else
                          v1089 = v1083 - 32 * v1086;
                        sub_1C477667C((llvm::PHINode *)v1083, *(_QWORD *)(v1089 + 32 * v1087), (uint64_t)v1045);
                      }
                    }
                    v1179 = 0;
                    v1174 = 0;
                    if (llvm::Instruction::extractProfMetadata(v1122, (unint64_t *)&v1179, (unint64_t *)&v1174))
                    {
                      v1169 = **(void ***)v1122;
                      v1155 = (void *)__PAIR64__(v1174, v1179);
                      BranchWeights = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&v1169, (uint64_t)&v1155, 2);
                      if (BranchWeights || *((_QWORD *)v1122 + 6) || (*((_BYTE *)v1122 + 23) & 0x20) != 0)
                        llvm::Value::setMetadata(v1122, 2, BranchWeights);
                      v1169 = **(void ***)v1065;
                      v1155 = (void *)__PAIR64__(v1174, v1179);
                      v1092 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&v1169, (uint64_t)&v1155, 2);
                      if (v1092 || *((_QWORD *)v1066 + 18) || (*((_BYTE *)v1066 + 119) & 0x20) != 0)
                        llvm::Value::setMetadata(v1065, 2, v1092);
                    }
                    v278 = 1;
                    v134 = (_QWORD *)&unk_1C640F000;
                    v133 = v1144;
                    v971 = v1113;
LABEL_1937:
                    v972 = v1120;
                    v974 = v1132;
                    v973 = v1138;
                    v976 = v1126;
                    v975 = v1129;
                    v50 = -8192;
                  }
LABEL_1938:
                  v970 = (llvm *)*((_QWORD *)v970 + 1);
                  v3 = v1145;
                  if (v970 == v1112)
                    goto LABEL_502;
                }
              }
            }
            v278 = 0;
LABEL_502:
            v133 |= v278;
          }
          goto LABEL_503;
        }
      }
      else
      {
        v228 = v221 - 32 * v224;
        if ((_DWORD)v224)
          goto LABEL_380;
      }
      break;
    }
LABEL_387:
    LODWORD(v229) = -1;
    goto LABEL_388;
  }
LABEL_503:
  v279 = v133 | llvm::SplitIndirectBrCriticalEdges(v1108, (llvm::Function *)1, 0, 0, (llvm::BlockFrequencyInfo *)v50);
  v280 = (llvm::Type **)(v3 + 728);
  v1098 = v3 + 152;
  v1101 = (_QWORD *)(v3 + 128);
  v1107 = (llvm::SmallPtrSetImplBase *)(v3 + 376);
  v1103 = (_QWORD *)(v3 + 396);
  v1102 = (_DWORD *)(v3 + 560);
  v1100 = v3 + 608;
  v1096 = v3 + 664;
  v1097 = v3 + 688;
  v1095 = v3 + 536;
  v1099 = v3 + 624;
  v281 = v134[230];
  v1104 = (llvm::Type **)(v3 + 728);
  v1118 = (uint64_t *)(v3 + 640);
  do
  {
    v1105 = v279;
    v282 = *v280;
    *v280 = 0;
    if (v282)
      sub_1C4DC4DE4((uint64_t)v280, (uint64_t)v282);
    v283 = 0;
    v284 = (llvm *)*((_QWORD *)v1108 + 10);
    do
    {
      if (v284 == v1112)
        break;
      v285 = (llvm *)*((_QWORD *)v284 + 1);
      if (v284)
        v286 = (uint64_t)v284 - 24;
      else
        v286 = 0;
      LOBYTE(v1174) = 0;
      v287 = *(_DWORD *)(v3 + 136);
      if (v287 || *(_DWORD *)(v3 + 140))
      {
        v313 = *(unsigned int *)(v3 + 144);
        if (v313 > 4 * v287 && v313 >= 0x41)
        {
          sub_1C509F99C(v1101);
        }
        else
        {
          if ((_DWORD)v313)
          {
            v314 = (_QWORD *)*v1101;
            v315 = (_QWORD *)(*v1101 + (v313 << 6));
            do
            {
              v316 = v314[3];
              if (v316 != -4096)
              {
                if (v316 == -8192)
                  goto LABEL_603;
                v317 = v314[7];
                if (v317 && v317 != -8192 && v317 != -4096)
                {
                  v318 = v314[5] & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v318 = v314[6];
                  v319 = (unint64_t *)v314[6];
                  if (v319)
                  {
                    *v319 = *v319 & 7 | v318;
                  }
                  else
                  {
                    v320 = v314[7];
                    v321 = ***(int32x2_t ****)v320;
                    v322 = (unint64_t)v321[303];
                    if (v322 <= v318)
                    {
                      v323 = v321[305].u32[0];
                      if (v322 + 16 * v323 > v318)
                      {
                        v324 = v323 - 1;
                        LODWORD(v325) = v324 & ((v320 >> 4) ^ (v320 >> 9));
                        v326 = (uint64_t *)(v322 + 16 * v325);
                        v327 = *v326;
                        if (v320 == *v326)
                        {
LABEL_594:
                          *v326 = -8192;
                          v321[304] = vadd_s32(v321[304], (int32x2_t)0x1FFFFFFFFLL);
                          v320 = v314[7];
                        }
                        else
                        {
                          v328 = 1;
                          while (v327 != -4096)
                          {
                            v329 = v325 + v328++;
                            v325 = v329 & v324;
                            v327 = *(_QWORD *)(v322 + 16 * v325);
                            if (v320 == v327)
                            {
                              v326 = (uint64_t *)(v322 + 16 * v325);
                              goto LABEL_594;
                            }
                          }
                        }
                        *(_BYTE *)(v320 + 17) &= ~1u;
                      }
                    }
                  }
                  v316 = v314[3];
                }
                if (v316 != -4096)
                {
LABEL_603:
                  if (v316 && v316 != -8192)
                  {
                    v330 = v314[1] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v330 = v314[2];
                    v331 = (unint64_t *)v314[2];
                    if (v331)
                    {
                      *v331 = *v331 & 7 | v330;
                    }
                    else
                    {
                      v332 = v314[3];
                      v333 = ***(int32x2_t ****)v332;
                      v334 = (unint64_t)v333[303];
                      if (v334 <= v330)
                      {
                        v335 = v333[305].u32[0];
                        if (v334 + 16 * v335 > v330)
                        {
                          v336 = v335 - 1;
                          LODWORD(v337) = v336 & ((v332 >> 4) ^ (v332 >> 9));
                          v338 = (uint64_t *)(v334 + 16 * v337);
                          v339 = *v338;
                          if (v332 == *v338)
                          {
LABEL_612:
                            *v338 = -8192;
                            v333[304] = vadd_s32(v333[304], (int32x2_t)0x1FFFFFFFFLL);
                            v332 = v314[3];
                          }
                          else
                          {
                            v340 = 1;
                            while (v339 != -4096)
                            {
                              v341 = v337 + v340++;
                              v337 = v341 & v336;
                              v339 = *(_QWORD *)(v334 + 16 * v337);
                              if (v332 == v339)
                              {
                                v338 = (uint64_t *)(v334 + 16 * v337);
                                goto LABEL_612;
                              }
                            }
                          }
                          *(_BYTE *)(v332 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v314[3] = -4096;
                }
                v314[4] = 0;
              }
              v314 += 8;
            }
            while (v314 != v315);
          }
          *(_QWORD *)(v3 + 136) = 0;
        }
      }
      if (*(_BYTE *)(v3 + 176))
      {
        sub_1C4E43068(v1098);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v3 + 152), 8);
        *(_BYTE *)(v3 + 176) = 0;
      }
      v288 = 0;
      v284 = v285;
      v289 = (_QWORD **)(v286 + 40);
      *(_QWORD *)(v3 + 120) = *(_QWORD *)(v286 + 48);
      while (1)
      {
        v290 = *(_QWORD *)(v3 + 120);
        if ((_QWORD **)v290 == v289)
          break;
        *(_QWORD *)(v3 + 120) = *(_QWORD *)(v290 + 8);
        if (v290)
          v291 = v290 - 24;
        else
          v291 = 0;
        v288 |= sub_1C50882EC(v3, v291, &v1174);
        if ((_BYTE)v1174)
        {
          v283 = 1;
          goto LABEL_749;
        }
      }
      v292 = *v289;
      if (*v289 == v289)
        goto LABEL_648;
      do
      {
        while (1)
        {
          if (v292)
            v293 = v292 - 3;
          else
            v293 = 0;
          if (*(_BYTE *)(*v293 + 8) != 13)
            break;
          v294 = *(_QWORD *)(v1145 + 48);
          v295 = sub_1C47A7FD0(v294, *(_QWORD *)(v1145 + 720), *v293, (llvm::Type *)1);
          if (!v295 || v295 != 1 && !*(_QWORD *)(v294 + 8 * v295 + 96))
            break;
          if ((*(unsigned __int8 *)(v294 + 390 * v295 + 4048) | 4) != 4)
            break;
          v1155 = &__src.u64[1];
          __src.i64[0] = 0x400000000;
          v296 = llvm::recognizeBSwapOrBitReverseIdiom((_QWORD **)v293, 0, 1, (uint64_t)&v1155);
          v297 = v296;
          if (v296)
          {
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v293, *((llvm::Value **)v1155 + __src.u32[0] - 1), (llvm::Value *)1);
            v298 = *(uint64_t **)(v1145 + 72);
            v1179 = &off_1E8140950;
            v1180 = (void *)v1145;
            v1182 = &v1179;
            llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)v293, v298, 0, &v1179);
            if (v1182 == &v1179)
            {
              v299 = (void (**)(void))((char *)v1179 + 32);
            }
            else
            {
              if (!v1182)
                goto LABEL_537;
              v299 = (void (**)(void))((char *)*v1182 + 40);
            }
            (*v299)();
          }
LABEL_537:
          if (v1155 != &__src.u64[1])
            free(v1155);
          if ((v297 & 1) == 0)
            break;
          v300 = 0;
          v292 = *v289;
          LOBYTE(v288) = 1;
          if (*v289 == v289)
            goto LABEL_649;
        }
        v292 = (_QWORD *)*v292;
      }
      while (v292 != v289);
      v301 = *v289;
      if (*v289 == v289)
        goto LABEL_648;
      v300 = 0;
      if (v301)
        v302 = v301 - 3;
      else
        v302 = 0;
      v303 = *((unsigned __int8 *)v302 + 16) - 40;
      if (v303 < 0xFFFFFFF5)
        v302 = 0;
      if (!v301)
        goto LABEL_649;
      if (*((_BYTE *)v302 + 16) != 29 || v303 < 0xFFFFFFF5)
        goto LABEL_649;
      v305 = *((_DWORD *)v302 + 5) & 0x7FFFFFF;
      v1142 = (llvm *)v302;
      if (!(_DWORD)v305)
      {
        v306 = 0;
LABEL_617:
        v309 = 0;
        v308 = 0;
        v300 = 1;
        goto LABEL_618;
      }
      v306 = v302[-4 * v305];
      if (!v306)
        goto LABEL_617;
      v307 = *(unsigned __int8 *)(v306 + 16);
      if (v307 == 77)
        v308 = v306;
      else
        v308 = 0;
      if (v308)
      {
        v306 = *(_QWORD *)(v308 - 32);
        v307 = *(unsigned __int8 *)(v306 + 16);
      }
      if (v307 == 92)
        v309 = v306;
      else
        v309 = 0;
      if (v309)
      {
        v306 = *(_QWORD *)(v309 - 32);
        v310 = *(unsigned int *)(v309 + 72);
        if ((_DWORD)v310)
        {
          v311 = *(_DWORD **)(v309 + 64);
          v312 = 4 * v310;
          do
          {
            if (*v311)
              goto LABEL_648;
            ++v311;
            v312 -= 4;
          }
          while (v312);
        }
      }
      v300 = 0;
      if (!v306)
        goto LABEL_649;
      if (*(_BYTE *)(v306 + 16) != 83)
        goto LABEL_649;
      v300 = 0;
      if (*(_QWORD *)(v306 + 40) != v286)
        goto LABEL_649;
LABEL_618:
      for (m = *(_QWORD *)(v286 + 48); ; m = *(_QWORD *)(m + 8))
      {
        if ((_QWORD **)m == v289)
        {
          v343 = 0;
          break;
        }
        v343 = m - 24;
        v344 = m ? m - 24 : 0;
        if (*(_BYTE *)(v344 + 16) != 83)
          break;
      }
      while (2)
      {
        if (sub_1C4D99D08(v343) || v343 == v308 || v343 == v309 || sub_1C509DDB0(v343))
          goto LABEL_627;
        v348 = *(unsigned __int8 *)(v343 + 16);
        v349 = v343;
        if (!v343 || v348 != 77)
          goto LABEL_641;
        v350 = *(_QWORD *)(v343 + 8);
        if (v350 && !*(_QWORD *)(v350 + 8))
        {
          v349 = *(_QWORD *)(v350 + 24);
          v348 = *(unsigned __int8 *)(v349 + 16);
LABEL_641:
          if (v348 != 84)
            break;
          v351 = *(_QWORD *)(v349 - 32);
          if (!v351
            || *(_BYTE *)(v351 + 16)
            || *(_QWORD *)(v351 + 24) != *(_QWORD *)(v349 + 72)
            || (*(_BYTE *)(v351 + 33) & 0x20) == 0
            || *(_DWORD *)(v351 + 36) != 167)
          {
            break;
          }
LABEL_627:
          v345 = *(_QWORD *)(v343 + 32);
          if (v345)
            v346 = v345 == *(_QWORD *)(v343 + 40) + 40;
          else
            v346 = 1;
          if (v346)
            v343 = 0;
          else
            v343 = v345 - 24;
          continue;
        }
        break;
      }
      if ((llvm *)v343 != v1142)
      {
LABEL_648:
        v300 = 0;
        goto LABEL_649;
      }
      v352 = *(uint64_t ***)(v286 + 56);
      v1179 = &v1181;
      v1180 = (void *)0x400000000;
      if ((v300 & 1) == 0)
      {
        v1135 = v352;
        v359 = *(_DWORD *)(v306 + 20) & 0x7FFFFFF;
        v354 = v1145;
        if (!(_DWORD)v359)
          goto LABEL_709;
        v360 = 0;
        v361 = 0;
        v362 = 32 * v359;
        while (2)
        {
          v363 = *(_DWORD *)(v306 + 20);
          if ((v363 & 0x40000000) != 0)
            v364 = *(_QWORD *)(v306 - 8);
          else
            v364 = v306 - 32 * (v363 & 0x7FFFFFF);
          v365 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v364 + v361));
          if (*((_BYTE *)v365 + 16) == 84)
            v366 = v365;
          else
            v366 = 0;
          v367 = *(_DWORD *)(v306 + 20);
          if ((v367 & 0x40000000) != 0)
          {
            v368 = *(_QWORD *)(v306 - 8);
            if (!v366)
              goto LABEL_683;
          }
          else
          {
            v368 = v306 - 32 * (v367 & 0x7FFFFFF);
            if (!v366)
              goto LABEL_683;
          }
          v369 = *((_QWORD *)v366 + 1);
          if (v369)
          {
            if (!*(_QWORD *)(v369 + 8))
            {
              v370 = *(_QWORD *)(v368 + 32 * *(unsigned int *)(v306 + 60) + v360);
              if (*((_QWORD *)v366 + 5) == v370
                && (*(unsigned int (**)(_QWORD, llvm::Value *))(**(_QWORD **)(v1145 + 48) + 1880))(*(_QWORD *)(v1145 + 48), v366)&& llvm::attributesPermitTailCall(v1135, v366, v1142, *(const llvm::ReturnInst **)(v1145 + 48), 0, v371))
              {
                v372 = v1180;
                if (v1180 >= (unint64_t)HIDWORD(v1180))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1179, (uint64_t)&v1181, v1180 + 1, 8);
                  v372 = v1180;
                }
                *((_QWORD *)v1179 + v372) = v370;
                LODWORD(v1180) = (_DWORD)v1180 + 1;
              }
            }
          }
LABEL_683:
          v361 += 32;
          v360 += 8;
          v354 = v1145;
          if (v362 == v361)
            goto LABEL_709;
          continue;
        }
      }
      v1155 = &v1157.u64[1];
      __src.i64[0] = (uint64_t)&v1157.i64[1];
      __src.i64[1] = 4;
      v1157.i32[0] = 0;
      v353 = *(_QWORD *)(v286 + 8);
      v354 = v1145;
      if (v353)
      {
        while (1)
        {
          v355 = *(_QWORD *)(v353 + 24);
          v356 = *(unsigned __int8 *)(v355 + 16);
          v357 = v355 && v356 >= 0x1C;
          if (v357 && v356 - 29 <= 0xA)
            break;
          v353 = *(_QWORD *)(v353 + 8);
          if (!v353)
            goto LABEL_709;
        }
LABEL_685:
        v373 = *(_QWORD *)(v355 + 40);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1155, v373);
        if ((_BYTE)v282)
        {
          v374 = *(_QWORD *)(v373 + 40);
          v375 = v374 ? (llvm::Instruction *)(v374 - 24) : 0;
          PrevNonDebugInstruction = (const llvm::Function *)llvm::Instruction::getPrevNonDebugInstruction(v375, 1);
          if (PrevNonDebugInstruction)
          {
            v377 = PrevNonDebugInstruction;
            if (*((_BYTE *)PrevNonDebugInstruction + 16) == 84
              && !*((_QWORD *)PrevNonDebugInstruction + 1)
              && (*(unsigned int (**)(_QWORD, const llvm::Function *))(**(_QWORD **)(v1145 + 48) + 1880))(*(_QWORD *)(v1145 + 48), PrevNonDebugInstruction)&& llvm::attributesPermitTailCall(v352, v377, v1142, *(const llvm::ReturnInst **)(v1145 + 48), 0, v378))
            {
              v379 = v1180;
              if (v1180 >= (unint64_t)HIDWORD(v1180))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1179, (uint64_t)&v1181, v1180 + 1, 8);
                v379 = v1180;
              }
              *((_QWORD *)v1179 + v379) = v373;
              LODWORD(v1180) = (_DWORD)v1180 + 1;
            }
          }
        }
        v354 = v1145;
        while (1)
        {
          v353 = *(_QWORD *)(v353 + 8);
          if (!v353)
            break;
          v355 = *(_QWORD *)(v353 + 24);
          v380 = *(unsigned __int8 *)(v355 + 16);
          if (v355)
            v381 = v380 >= 0x1C;
          else
            v381 = 0;
          if (v381 && v380 - 29 < 0xB)
            goto LABEL_685;
        }
        if ((void *)__src.i64[0] != v1155)
          free((void *)__src.i64[0]);
      }
LABEL_709:
      if ((_DWORD)v1180)
      {
        v383 = 0;
        v384 = (llvm::BasicBlock **)v1179;
        v385 = (llvm::BasicBlock **)((char *)v1179 + 8 * v1180);
        do
        {
          while (1)
          {
            v386 = (llvm::BasicBlock *)*((_QWORD *)*v384 + 5);
            if (v386 == (llvm::BasicBlock *)((char *)*v384 + 40))
              break;
            v387 = (char *)v386 - 24;
            if (!v386)
              v387 = 0;
            v388 = v387[16] - 40;
            if (v388 < 0xFFFFFFF5)
              v387 = 0;
            if (!v386)
              break;
            v389 = v387[16] == 30 && v388 >= 0xFFFFFFF5;
            if (!v389 || (*((_DWORD *)v387 + 5) & 0x7FFFFFF) != 1 || *((_QWORD *)v387 - 4) != v286)
              break;
            llvm::FoldReturnIntoUncondBranch(v1142, (llvm::ReturnInst *)v286, *v384, 0, v347);
            v390 = *(uint64_t **)(v354 + 88);
            v391 = llvm::BlockFrequencyInfo::getBlockFreq(v390, v286);
            v392 = *v384++;
            v393 = llvm::BlockFrequencyInfo::getBlockFreq(*(uint64_t **)(v1145 + 88), (uint64_t)v392);
            v69 = v391 >= v393;
            v394 = v391 - v393;
            v354 = v1145;
            if (v69)
              v395 = v394;
            else
              v395 = 0;
            sub_1C4DAD074(*v390, v286, v395);
            v383 = 1;
            LOBYTE(v1174) = 1;
            if (v384 == v385)
              goto LABEL_732;
          }
          ++v384;
        }
        while (v384 != v385);
        if ((v383 & 1) == 0)
          goto LABEL_745;
LABEL_732:
        if ((*(_WORD *)(v286 + 18) & 0x7FFF) == 0)
        {
          v396 = *(_QWORD *)(v286 + 8);
          if (v396)
          {
            while (1)
            {
              v397 = *(_QWORD *)(v396 + 24);
              v398 = *(unsigned __int8 *)(v397 + 16);
              v399 = v397 && v398 >= 0x1C;
              if (v399 && v398 - 29 < 0xB)
                break;
              v396 = *(_QWORD *)(v396 + 8);
              if (!v396)
                goto LABEL_743;
            }
          }
          else
          {
LABEL_743:
            llvm::BasicBlock::eraseFromParent((llvm::BasicBlock *)v286);
          }
        }
        v300 = 1;
      }
      else
      {
LABEL_745:
        v300 = 0;
      }
      if (v1179 != &v1181)
        free(v1179);
LABEL_649:
      v283 |= v288 | v300;
      v3 = v1145;
    }
    while (!(_BYTE)v1174);
LABEL_749:
    v1106 = v283;
    if (byte_1ED7F5D40 && *(_DWORD *)(v3 + 696))
    {
      v401 = *(_DWORD *)(v3 + 704);
      if (v401)
      {
        v402 = 152 * v401;
        v403 = *(_QWORD *)(v3 + 688);
        while ((*(_QWORD *)v403 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v403 += 152;
          v402 -= 152;
          if (!v402)
            goto LABEL_789;
        }
      }
      else
      {
        v403 = *(_QWORD *)(v3 + 688);
      }
      v404 = *(_QWORD *)(v3 + 688) + 152 * v401;
      if (v403 == v404)
      {
LABEL_789:
        v405 = 0;
      }
      else
      {
        v405 = 0;
LABEL_760:
        v1155 = &__src.u64[1];
        __src.i64[0] = v281;
        v406 = *(unsigned int *)(v403 + 16);
        if (!(_DWORD)v406)
          goto LABEL_785;
        v407 = *(uint64_t **)(v403 + 8);
        v408 = &v407[v406];
        do
        {
          v409 = *v407;
          v410 = sub_1C477672C((uint64_t)v1107, *v407);
          v411 = *(_QWORD *)(v1145 + 384);
          v412 = 392;
          if (v411 == *(_QWORD *)(v1145 + 376))
            v412 = 396;
          if (v410 == (_QWORD *)(v411 + 8 * *(unsigned int *)(v1145 + v412)) && *(_BYTE *)(v409 + 16) == 68)
          {
            v413 = *(_DWORD *)(v409 + 20);
            v414 = (v413 & 0x40000000) != 0 ? *(_QWORD **)(v409 - 8) : (_QWORD *)(v409 - 32 * (v413 & 0x7FFFFFF));
            if (*v414 == *(_QWORD *)v403)
            {
              v415 = (uint64_t)v1108;
              if (__src.i32[0])
              {
                v416 = (llvm::ValueAsMetadata **)v1155;
                v417 = 8 * __src.u32[0];
                while (1)
                {
                  v418 = (llvm::DominatorTree *)sub_1C50986C8(v1145, v415);
                  if (llvm::DominatorTree::dominates(v418, (const llvm::Value *)v409, *v416))
                  {
                    v405 = 1;
                    llvm::Value::doRAUW(*v416, (llvm::Value *)v409, (llvm::Value *)1);
                    sub_1C4774094(v1107, (uint64_t)*v416);
                    v421 = *v416;
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)*v416 + 5) + 40, (uint64_t ***)*v416);
                    v422 = *((_QWORD *)v421 + 3);
                    v423 = (_QWORD *)*((_QWORD *)v421 + 4);
                    *v423 = v422;
                    *(_QWORD *)(v422 + 8) = v423;
                    *((_QWORD *)v421 + 3) = 0;
                    *((_QWORD *)v421 + 4) = 0;
                    *v416 = (llvm::ValueAsMetadata *)v409;
                    goto LABEL_782;
                  }
                  v419 = (llvm::DominatorTree *)sub_1C50986C8(v1145, v415);
                  if (llvm::DominatorTree::dominates(v419, *v416, (const llvm::Instruction *)v409))
                    break;
                  ++v416;
                  v417 -= 8;
                  v415 = (uint64_t)v1108;
                  if (!v417)
                  {
                    v420 = __src.u32[0];
                    goto LABEL_777;
                  }
                }
                v405 = 1;
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v409, *v416, (llvm::Value *)1);
                sub_1C4774094(v1107, v409);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v409 + 40) + 40, (uint64_t ***)v409);
                v424 = *(_QWORD *)(v409 + 24);
                v425 = *(_QWORD **)(v409 + 32);
                *v425 = v424;
                *(_QWORD *)(v424 + 8) = v425;
                *(_QWORD *)(v409 + 24) = 0;
                *(_QWORD *)(v409 + 32) = 0;
              }
              else
              {
                v420 = 0;
LABEL_777:
                if (v420 >= __src.u32[1])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1155, (uint64_t)&__src.i64[1], v420 + 1, 8);
                  v420 = __src.u32[0];
                }
                *((_QWORD *)v1155 + v420) = v409;
                ++__src.i32[0];
              }
            }
          }
LABEL_782:
          ++v407;
        }
        while (v407 != v408);
        if (v1155 != &__src.u64[1])
          free(v1155);
LABEL_785:
        while (1)
        {
          v403 += 152;
          if (v403 == v404)
            break;
          if ((*(_QWORD *)v403 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            if (v403 != v404)
              goto LABEL_760;
            break;
          }
        }
      }
      v1106 |= v405;
      v3 = v1145;
    }
    v426 = *(uint64_t **)(v3 + 584);
    v427 = *(uint64_t **)(v3 + 592);
    if (v426 == v427)
      goto LABEL_898;
    v428 = 0;
    v1109 = *(uint64_t **)(v3 + 592);
    while (2)
    {
      v429 = (uint64_t *)v426[1];
      v1131 = *v426;
      v430 = *((unsigned int *)v426 + 4);
      v1155 = (void *)v3;
      v431 = 126 - 2 * __clz(v430);
      if ((_DWORD)v430)
        v432 = v431;
      else
        v432 = 0;
      sub_1C509DDFC(v429, &v429[2 * v430], (uint64_t *)&v1155, v432, 1);
      v433 = (_QWORD *)v426[1];
      v434 = *((unsigned int *)v426 + 4);
      v435 = (char *)v433;
      if ((_DWORD)v434)
      {
        v436 = 0;
        v435 = (char *)&v433[2 * v434];
        v437 = 16 * v434 - 16;
        while (v437 != v436)
        {
          v438 = v433[v436 / 8];
          v439 = v433[v436 / 8 + 1];
          v441 = v433[v436 / 8 + 2];
          v440 = v433[v436 / 8 + 3];
          v436 += 16;
          if (v438 == v441 && v439 == v440)
          {
            v443 = &v433[v436 / 8 - 2];
            if (v437 != v436)
            {
              v444 = (char *)&v433[v436 / 8 + 2];
              do
              {
                v445 = v438;
                v438 = *(_QWORD *)v444;
                v446 = *((_QWORD *)v444 + 1);
                if (v445 != *(_QWORD *)v444 || v443[1] != v446)
                {
                  v443[2] = v438;
                  v443[3] = v446;
                  v443 += 2;
                }
                v444 += 16;
              }
              while (v444 != v435);
            }
            v435 = (char *)(v443 + 2);
            break;
          }
        }
      }
      v448 = v435 - (char *)v433;
      *((_DWORD *)v426 + 4) = v448 >> 4;
      v449 = v433[1];
      v450 = v448 & 0xFFFFFFFF0;
      if (v449 != *(_QWORD *)((char *)v433 + v450 - 8) && v450 != 0)
      {
        v452 = 0;
        v1136 = (llvm *)*v433;
        while (1)
        {
          v454 = *v433;
          v453 = v433[1];
          if (v453 != v449)
          {
            v1157.i64[0] = 0;
            __src.i8[8] = 0;
            v1155 = 0;
            __src.i64[0] = v453 - v449;
            v455 = **(_QWORD **)(v454 - 32 * (*(_DWORD *)(v454 + 20) & 0x7FFFFFF));
            v456 = *(_DWORD *)(v455 + 8);
            if ((v456 & 0xFE) == 0x12)
              v456 = *(_DWORD *)(**(_QWORD **)(v455 + 16) + 8);
            v457 = (*(uint64_t (**)(_QWORD, _QWORD, void **, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v3 + 48)
                                                                                              + 1064))(*(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 720), &v1155, *(_QWORD *)(v454 + 72), v456 >> 8, 0);
            if (!v457)
            {
              v452 = 0;
              v449 = v453;
            }
            v458 = v1136;
            if (!v457)
              v458 = (llvm *)v454;
            v1136 = v458;
          }
          v459 = **(_QWORD **)v454;
          llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(v3 + 720), *(llvm::Type **)v454);
          v461 = v460;
          v462 = *(_DWORD *)(*(_QWORD *)v454 + 8);
          if ((v462 & 0xFE) == 0x12)
            v462 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v454 + 16) + 8);
          v464 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v459 + 1912), (llvm::Type *)(v462 >> 8));
          v465 = (llvm::GetElementPtrInst *)(*(_QWORD *)v459 + 1912);
          if (!v452)
            break;
LABEL_880:
          sub_1C4773D54((uint64_t)&v1155, v454, 0, 0, 0);
          if (v453 == v449)
          {
            v489 = *(llvm::Type **)v454;
            v490 = v452;
            v3 = v1145;
            if (*(_QWORD *)v454 != v464)
            {
              LOWORD(v1183) = 257;
              v490 = sub_1C5098D9C((uint64_t *)&v1155, v452, (uint64_t)v489, (uint64_t)&v1179);
            }
          }
          else
          {
            v491 = llvm::ConstantInt::get(v461, v453 - v449, 0);
            LOWORD(v1183) = 257;
            v490 = (unsigned __int8 *)sub_1C4867B70((uint64_t *)&v1155, v465, (uint64_t *)v452, (uint64_t)v491, (uint64_t)&v1179);
            v492 = *(llvm::Type **)v454;
            if (*(_QWORD *)v454 != v464)
            {
              LOWORD(v1183) = 257;
              v490 = sub_1C5098D9C((uint64_t *)&v1155, v490, (uint64_t)v492, (uint64_t)&v1179);
            }
            v3 = v1145;
          }
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v454, (llvm::Value *)v490, (llvm::Value *)1);
          v1179 = 0;
          if (sub_1C4E2F6FC(*(_QWORD *)(v3 + 664), *(_DWORD *)(v3 + 680), v454, &v1179))
          {
            *(_QWORD *)v1179 = -8192;
            *(int32x2_t *)(v3 + 672) = vadd_s32(*(int32x2_t *)(v3 + 672), (int32x2_t)0x1FFFFFFFFLL);
          }
          v493 = *((unsigned int *)v426 + 4);
          v494 = v426[1] + 16 * v493;
          if (v433 + 2 != (_QWORD *)v494)
          {
            v495 = v433 + 2;
            do
            {
              v496 = v495[1];
              *(v495 - 2) = *v495;
              *(v495 - 1) = v496;
              v495 += 2;
            }
            while (v495 != (_QWORD *)v494);
          }
          *((_DWORD *)v426 + 4) = v493 - 1;
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v454 + 40) + 40, (uint64_t ***)v454);
          v497 = *(_QWORD *)(v454 + 24);
          v498 = *(_QWORD **)(v454 + 32);
          *v498 = v497;
          *(_QWORD *)(v497 + 8) = v498;
          *(_QWORD *)(v454 + 24) = 0;
          *(_QWORD *)(v454 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v454);
          if (v1155 != &__src.u64[1])
            free(v1155);
          if (v433 == (_QWORD *)(v426[1] + 16 * *((unsigned int *)v426 + 4)))
          {
            v428 = 1;
            v427 = v1109;
            goto LABEL_896;
          }
        }
        v466 = *(unsigned __int8 *)(v1131 + 16);
        if (v466 >= 0x1C && v1131)
        {
          v467 = *(llvm **)(v1131 + 40);
          if (v466 == 83)
          {
            v471 = (uint64_t)v467 + 40;
            for (n = (_QWORD *)*((_QWORD *)v467 + 6); n != (_QWORD *)v471; n = (_QWORD *)n[1])
            {
              v474 = n - 3;
              if (!n)
                v474 = 0;
              if (*((_BYTE *)v474 + 16) != 83)
                goto LABEL_856;
            }
          }
          else
          {
            if (v466 != 33)
            {
              v468 = (uint64_t *)(v1131 + 32);
              goto LABEL_861;
            }
            v475 = *(llvm::BasicBlock **)(v1131 - 96);
            v1157.i16[4] = 257;
            v467 = (llvm *)llvm::SplitEdge(v467, v475, 0, 0, 0, (llvm::MemorySSAUpdater *)&v1155, v463);
            v471 = (uint64_t)v467 + 40;
            for (n = (_QWORD *)*((_QWORD *)v467 + 6); n != (_QWORD *)v471; n = (_QWORD *)n[1])
            {
              v476 = n - 3;
              if (!n)
                v476 = 0;
              if (*((_BYTE *)v476 + 16) != 83)
                goto LABEL_856;
            }
          }
        }
        else
        {
          v469 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1136 + 5) + 56) + 80);
          v470 = (llvm *)(v469 - 24);
          if (v469)
            v467 = (llvm *)(v469 - 24);
          else
            v467 = 0;
          v471 = (uint64_t)v467 + 40;
          n = (_QWORD *)*((_QWORD *)v467 + 6);
          if (n == (_QWORD *)((char *)v467 + 40))
          {
            v467 = v470;
          }
          else
          {
            while (1)
            {
              v473 = n - 3;
              if (!n)
                v473 = 0;
              if (*((_BYTE *)v473 + 16) != 83)
                break;
              n = (_QWORD *)n[1];
              if (n == (_QWORD *)v471)
                goto LABEL_862;
            }
LABEL_856:
            v477 = *((unsigned __int8 *)n - 8) - 38;
            v181 = v477 > 0x38;
            v478 = (1 << v477) & 0x100060000000001;
            if (v181 || v478 == 0)
            {
              v471 = (uint64_t)n;
            }
            else
            {
              v468 = n + 1;
LABEL_861:
              v471 = *v468;
            }
          }
        }
LABEL_862:
        sub_1C4D8ADA0((uint64_t)&v1155, (uint64_t **)v467, v471, 0, 0, 0);
        v480 = llvm::ConstantInt::get(v461, v449, 0);
        v481 = (uint64_t *)v1131;
        if (*(_QWORD *)v1131 != v464)
        {
          LOWORD(v1183) = 257;
          v481 = (uint64_t *)sub_1C5098D9C((uint64_t *)&v1155, (unsigned __int8 *)v1131, v464, (uint64_t)&v1179);
        }
        v1179 = "splitgep";
        LOWORD(v1183) = 259;
        v482 = sub_1C4867B70((uint64_t *)&v1155, v465, v481, (uint64_t)v480, (uint64_t)&v1179);
        v452 = (unsigned __int8 *)v482;
        v483 = v1145;
        if (*(_QWORD *)(v1145 + 656))
        {
          sub_1C509F7DC(v1118, (unint64_t)v482, (uint64_t)v482);
        }
        else
        {
          v484 = *(_QWORD *)(v1145 + 608);
          v485 = *(unsigned int *)(v1145 + 616);
          if (!(_DWORD)v485)
            goto LABEL_873;
          v486 = 8 * v485;
          v487 = *(uint64_t *****)(v1145 + 608);
          while (*v487 != v482)
          {
            ++v487;
            v486 -= 8;
            if (!v486)
              goto LABEL_872;
          }
          if (v486)
            goto LABEL_878;
LABEL_872:
          v483 = v1145;
          if (v485 >= 2)
          {
            do
            {
              v488 = *(_QWORD *)(*(_QWORD *)(v1145 + 608) + 8 * v485 - 8);
              sub_1C509F7DC(v1118, v488, v488);
              LODWORD(v485) = *(_DWORD *)(v1145 + 616) - 1;
              *(_DWORD *)(v1145 + 616) = v485;
            }
            while ((_DWORD)v485);
            sub_1C509F7DC(v1118, (unint64_t)v452, (uint64_t)v452);
          }
          else
          {
LABEL_873:
            if (v485 >= *(_DWORD *)(v483 + 620))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v1100, v1099, v485 + 1, 8);
              v484 = *(_QWORD *)(v1145 + 608);
              v485 = *(unsigned int *)(v1145 + 616);
            }
            *(_QWORD *)(v484 + 8 * v485) = v452;
            ++*(_DWORD *)(v1145 + 616);
          }
        }
LABEL_878:
        if (v1155 != &__src.u64[1])
          free(v1155);
        goto LABEL_880;
      }
LABEL_896:
      v426 += 67;
      if (v426 != v427)
        continue;
      break;
    }
    v1106 |= v428;
LABEL_898:
    if (byte_1EF8EFFB0)
    {
      v1169 = v1173;
      v1170 = v1173;
      v1171 = 4;
      v1172 = 0;
      v1188 = (uint64_t *)v1192;
      v1189 = (uint64_t)v1192;
      v1190 = 4;
      v1191 = 0;
      v499 = (llvm *)*((_QWORD *)v1108 + 10);
      if (v499 != v1112)
      {
        v500 = 0;
        while (1)
        {
          v501 = (char *)v499 - 24;
          v1143 = v499;
          if (!v499)
            v501 = 0;
          if (*((char **)v501 + 5) != v501 + 40)
            break;
LABEL_1164:
          v499 = (llvm *)*((_QWORD *)v1143 + 1);
          if (v499 == v1112)
          {
            v660 = v1188;
            v659 = (uint64_t *)v1189;
            v662 = v1190;
            LODWORD(v661) = HIDWORD(v1190);
            goto LABEL_1168;
          }
        }
        v502 = (llvm::UndefValue *)*((_QWORD *)v501 + 6);
        while (2)
        {
          v503 = (llvm::UndefValue **)((char *)v502 - 24);
          if (v502)
            v504 = (uint64_t)v502 - 24;
          else
            v504 = 0;
          if (!v502 || *(_BYTE *)(v504 + 16) != 83)
            goto LABEL_1164;
          v505 = *v503;
          v506 = sub_1C477672C((uint64_t)&v1169, (uint64_t)v502 - 24);
          if (v1170 == v1169)
            v507 = (uint64_t *)((char *)&v1171 + 4);
          else
            v507 = &v1171;
          if (v506 != (_QWORD *)((char *)v1170 + 8 * *(unsigned int *)v507)
            || ((v509 = *((unsigned __int8 *)*v503 + 8), v509 >= 7) ? (v510 = v509 == 13) : (v510 = 1), !v510))
          {
            v508 = 0;
            goto LABEL_1019;
          }
          v1193 = v1195;
          v1195[0] = v503;
          v1194 = 0x400000001;
          v1155 = &v1157.u64[1];
          __src.i64[0] = (uint64_t)&v1157.i64[1];
          __src.i64[1] = 4;
          v1157.i32[0] = 0;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1155, (uint64_t)v503);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1169, (uint64_t)v503);
          v1179 = &v1183;
          v1180 = &v1183;
          v1181 = 4;
          LODWORD(v1182) = 0;
          v1174 = v1178;
          v1175 = v1178;
          v1176 = 4;
          v1177 = 0;
          v511 = v1194;
          if (!(_DWORD)v1194)
          {
LABEL_1010:
            v508 = 0;
            goto LABEL_1011;
          }
          v512 = 0;
          v513 = 0;
LABEL_922:
          v514 = v1193[v511 - 1];
          LODWORD(v1194) = v511 - 1;
          if (!v514 || *(_BYTE *)(v514 + 16) != 83)
          {
LABEL_976:
            for (ii = *(_QWORD *)(v514 + 8); ii; ii = *(_QWORD *)(ii + 8))
            {
              v537 = *(_QWORD *)(ii + 24);
              v538 = *(unsigned __int8 *)(v537 + 16);
              if (v537 && v538 == 83)
              {
                v539 = sub_1C477672C((uint64_t)&v1155, *(_QWORD *)(ii + 24));
                if ((void *)__src.i64[0] == v1155)
                  v540 = &__src.i8[12];
                else
                  v540 = &__src.i8[8];
                if (v539 == (_QWORD *)(__src.i64[0] + 8 * *(unsigned int *)v540))
                {
                  v541 = sub_1C477672C((uint64_t)&v1169, v537);
                  if (v1170 == v1169)
                    v542 = (uint64_t *)((char *)&v1171 + 4);
                  else
                    v542 = &v1171;
                  if (v541 != (_QWORD *)((char *)v1170 + 8 * *(unsigned int *)v542))
                    goto LABEL_1010;
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1155, v537);
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1169, v537);
                  v543 = v1194;
                  if (v1194 >= (unint64_t)HIDWORD(v1194))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1193, (uint64_t)v1195, v1194 + 1, 8);
                    v543 = v1194;
                  }
                  v1193[v543] = v537;
                  LODWORD(v1194) = v1194 + 1;
                }
              }
              else if (v537 && v538 == 61)
              {
                if ((*(_WORD *)(v537 + 18) & 0x381) != 0 || *(_QWORD *)(v537 - 64) != v514)
                  goto LABEL_1010;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1174, *(_QWORD *)(ii + 24));
              }
              else
              {
                v508 = 0;
                if (!v537 || v538 != 77)
                  goto LABEL_1011;
                v544 = *(llvm::UndefValue **)v537;
                if (v512 && v544 != v512)
                  goto LABEL_1010;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1174, *(_QWORD *)(ii + 24));
                v545 = *(_QWORD *)(v537 + 8);
                if (v545)
                {
                  do
                  {
                    v546 = *(unsigned __int8 *)(*(_QWORD *)(v545 + 24) + 16);
                    v65 = v546 == 61;
                    v547 = v546 != 61;
                    if (!v65)
                      break;
                    v545 = *(_QWORD *)(v545 + 8);
                  }
                  while (v545);
                }
                else
                {
                  v547 = 0;
                }
                v513 |= v547;
                v512 = v544;
              }
            }
            v511 = v1194;
            if (!(_DWORD)v1194)
            {
              if (((v512 != 0) & v513) != 1
                || !(*(unsigned int (**)(_QWORD, llvm::UndefValue *, llvm::UndefValue *))(**(_QWORD **)(v1145 + 48) + 1120))(*(_QWORD *)(v1145 + 48), v505, v512))
              {
                goto LABEL_1010;
              }
              v1153[0] = 0;
              v1153[1] = 0;
              v1154 = 0;
              v548 = llvm::UndefValue::get(v512, v282);
              v1149 = (unsigned __int8 *)llvm::UndefValue::get(v505, v549);
              sub_1C61DB70C(v1153, &v1149)[1] = v548;
              if (v1180 == v1179)
                v550 = (uint64_t *)((char *)&v1181 + 4);
              else
                v550 = &v1181;
              v551 = *(unsigned int *)v550;
              if ((_DWORD)v551)
              {
                v552 = 8 * v551;
                v553 = (unint64_t *)v1180;
                while (*v553 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v553;
                  v552 -= 8;
                  if (!v552)
                    goto LABEL_1058;
                }
              }
              else
              {
                v553 = (unint64_t *)v1180;
              }
              v554 = (unint64_t *)((char *)v1180 + 8 * v551);
              if (v553 == v554)
                goto LABEL_1058;
              v555 = (unsigned __int8 *)*v553;
LABEL_1032:
              if (v555[16] != 77)
              {
                v558 = operator new(0x60uLL);
                v559 = (char *)(v558 + 8);
                v558[13] = v558[13] & 0x38000000 | 1;
                *(_QWORD *)v558 = 0;
                *((_QWORD *)v558 + 1) = 0;
                *((_QWORD *)v558 + 2) = 0;
                *((_QWORD *)v558 + 3) = v558 + 8;
                if ((v555[23] & 0x10) != 0)
                {
                  v560 = ***(_QWORD ***)v555;
                  v561 = *(_QWORD *)(v560 + 152);
                  v562 = *(unsigned int *)(v560 + 168);
                  if (!(_DWORD)v562)
                    goto LABEL_1044;
                  LODWORD(v563) = (v562 - 1) & ((v555 >> 4) ^ (v555 >> 9));
                  v564 = (unsigned __int8 **)(v561 + 16 * v563);
                  v565 = *v564;
                  if (*v564 != v555)
                  {
                    v566 = 1;
                    while (v565 != (unsigned __int8 *)-4096)
                    {
                      v567 = v563 + v566++;
                      v563 = v567 & (v562 - 1);
                      v565 = *(unsigned __int8 **)(v561 + 16 * v563);
                      if (v565 == v555)
                      {
                        v564 = (unsigned __int8 **)(v561 + 16 * v563);
                        goto LABEL_1045;
                      }
                    }
LABEL_1044:
                    v564 = (unsigned __int8 **)(v561 + 16 * v562);
                  }
LABEL_1045:
                  v569 = v564[1];
                  v572 = *(_QWORD *)v569;
                  v571 = v569 + 16;
                  v570 = v572;
                }
                else
                {
                  v570 = 0;
                  v571 = (unsigned __int8 *)&byte_1C871356D;
                }
                v1152 = 773;
                v1149 = v571;
                v1150 = v570;
                v1151 = ".bc";
                v573 = *((_QWORD *)v555 + 4);
                if (v573)
                  v574 = v573 == *((_QWORD *)v555 + 5) + 40;
                else
                  v574 = 1;
                if (v574)
                  v575 = 0;
                else
                  v575 = v573 - 24;
                llvm::BitCastInst::BitCastInst((uint64_t)(v558 + 8), (uint64_t)v555, (uint64_t)v512, (uint64_t)&v1149, v575);
                v1148 = v555;
                sub_1C61DB70C(v1153, &v1148)[1] = v559;
                goto LABEL_1053;
              }
              v556 = *((_DWORD *)v555 + 5);
              if ((v556 & 0x40000000) != 0)
                v557 = (unsigned __int8 *)*((_QWORD *)v555 - 1);
              else
                v557 = &v555[-32 * (v556 & 0x7FFFFFF)];
              v568 = *(_QWORD *)v557;
              v1149 = v555;
              sub_1C61DB70C(v1153, &v1149)[1] = v568;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1188, (uint64_t)v555);
LABEL_1053:
              v576 = v553 + 1;
              while (v576 != v554)
              {
                v577 = *v576++;
                v555 = (unsigned __int8 *)v577;
                if (v577 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v553 = v576 - 1;
                  goto LABEL_1032;
                }
              }
LABEL_1058:
              v579 = (unint64_t *)v1155;
              v578 = (unint64_t *)__src.i64[0];
              v580 = __src.u32[3];
              v581 = __src.u32[2];
              if ((void *)__src.i64[0] == v1155)
                v582 = __src.u32[3];
              else
                v582 = __src.u32[2];
              v583 = (unint64_t *)__src.i64[0];
              if ((_DWORD)v582)
              {
                v584 = 0;
                while (*(_QWORD *)(__src.i64[0] + v584) >= 0xFFFFFFFFFFFFFFFELL)
                {
                  v584 += 8;
                  if (8 * v582 == v584)
                    goto LABEL_1093;
                }
                v583 = (unint64_t *)(__src.i64[0] + v584);
              }
              v585 = __src.i64[0] + 8 * v582;
              if (v583 != (unint64_t *)v585)
              {
                v586 = *v583;
LABEL_1069:
                v1137 = *(_DWORD *)(v586 + 20);
                if ((v1137 & 0x10000000) != 0)
                {
                  v587 = ***(_QWORD ***)v586;
                  v588 = *(_QWORD *)(v587 + 152);
                  v589 = *(unsigned int *)(v587 + 168);
                  if (!(_DWORD)v589)
                    goto LABEL_1076;
                  LODWORD(v590) = (v589 - 1) & ((v586 >> 4) ^ (v586 >> 9));
                  v591 = (uint64_t *)(v588 + 16 * v590);
                  v592 = *v591;
                  if (*v591 != v586)
                  {
                    v593 = 1;
                    while (v592 != -4096)
                    {
                      v594 = v590 + v593++;
                      v590 = v594 & (v589 - 1);
                      v592 = *(_QWORD *)(v588 + 16 * v590);
                      if (v592 == v586)
                      {
                        v591 = (uint64_t *)(v588 + 16 * v590);
                        goto LABEL_1077;
                      }
                    }
LABEL_1076:
                    v591 = (uint64_t *)(v588 + 16 * v589);
                  }
LABEL_1077:
                  v595 = (_QWORD *)v591[1];
                  v598 = *v595;
                  v597 = (unsigned __int8 *)(v595 + 2);
                  v596 = v598;
                }
                else
                {
                  v596 = 0;
                  v597 = (unsigned __int8 *)&byte_1C871356D;
                }
                v1152 = 773;
                v1149 = v597;
                v1150 = v596;
                v1151 = ".tc";
                v599 = operator new(0x48uLL);
                v600 = v599;
                v599[1] = v512;
                v601 = (llvm::Value *)(v599 + 1);
                *v599 = 0;
                v599[2] = 0;
                v599[3] = 0x4000000000000053;
                *((_OWORD *)v599 + 2) = 0u;
                v602 = (char *)(v599 + 4);
                *((_OWORD *)v599 + 3) = 0u;
                *((_DWORD *)v599 + 16) = 0;
                if (v586)
                {
                  v608 = *(_QWORD *)(v586 + 40);
                  v599[6] = v608;
                  *(_WORD *)(v608 + 18) &= ~0x8000u;
                  if ((*((_BYTE *)v599 + 31) & 0x10) != 0)
                  {
                    v610 = *(_QWORD *)(v608 + 56);
                    if (v610)
                    {
                      v611 = *(llvm::ValueSymbolTable **)(v610 + 104);
                      if (v611)
                        llvm::ValueSymbolTable::reinsertValue(v611, v601);
                    }
                  }
                  v609 = *(_QWORD *)(v586 + 24);
                  v600[4] = v609;
                  v600[5] = v586 + 24;
                  *(_QWORD *)(v609 + 8) = v602;
                  *(_QWORD *)(v586 + 24) = v602;
                }
                *((_DWORD *)v600 + 17) = v1137 & 0x7FFFFFF;
                llvm::Value::setName((uint64_t ***)v601, (uint64_t)&v1149);
                v603 = *((unsigned int *)v600 + 17);
                v604 = operator new(40 * v603);
                *v600 = v604;
                if ((_DWORD)v603)
                {
                  v605 = &v604[4 * v603];
                  do
                  {
                    *v604 = 0;
                    v604[1] = 0;
                    v604[2] = 0;
                    v604[3] = v601;
                    v604 += 4;
                  }
                  while (v604 != v605);
                }
                v1148 = (unsigned __int8 *)v586;
                sub_1C61DB70C(v1153, &v1148)[1] = v601;
                v606 = v583 + 1;
                while (v606 != (unint64_t *)v585)
                {
                  v607 = *v606++;
                  v586 = v607;
                  if (v607 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v583 = v606 - 1;
                    goto LABEL_1069;
                  }
                }
                v579 = (unint64_t *)v1155;
                v578 = (unint64_t *)__src.i64[0];
                v580 = __src.u32[3];
                v581 = __src.u32[2];
              }
LABEL_1093:
              if (v578 == v579)
                v612 = v580;
              else
                v612 = v581;
              v613 = v578;
              if ((_DWORD)v612)
              {
                v614 = 8 * v612;
                v613 = v578;
                while (*v613 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v613;
                  v614 -= 8;
                  if (!v614)
                    goto LABEL_1116;
                }
              }
              v615 = &v578[v612];
              if (v613 != v615)
              {
                v616 = *v613;
LABEL_1103:
                v1149 = (unsigned __int8 *)v616;
                v617 = (llvm::PHINode *)sub_1C61DB70C(v1153, &v1149)[1];
                v618 = *(_DWORD *)(v616 + 20) & 0x7FFFFFF;
                if ((_DWORD)v618)
                {
                  v619 = 0;
                  v620 = 0;
                  v621 = 32 * v618;
                  do
                  {
                    v622 = *(_DWORD *)(v616 + 20);
                    if ((v622 & 0x40000000) != 0)
                      v623 = *(_QWORD *)(v616 - 8);
                    else
                      v623 = v616 - 32 * (v622 & 0x7FFFFFF);
                    v1149 = *(unsigned __int8 **)(v623 + v620);
                    v624 = sub_1C61DB70C(v1153, &v1149);
                    v625 = *(_DWORD *)(v616 + 20);
                    if ((v625 & 0x40000000) != 0)
                      v626 = *(_QWORD *)(v616 - 8);
                    else
                      v626 = v616 - 32 * (v625 & 0x7FFFFFF);
                    sub_1C477667C(v617, v624[1], *(_QWORD *)(v626 + 32 * *(unsigned int *)(v616 + 60) + v619));
                    v620 += 32;
                    v619 += 8;
                  }
                  while (v621 != v620);
                }
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1169, (uint64_t)v617);
                v627 = v613 + 1;
                while (v627 != v615)
                {
                  v628 = *v627++;
                  v616 = v628;
                  if (v628 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v613 = v627 - 1;
                    goto LABEL_1103;
                  }
                }
              }
LABEL_1116:
              if (v1175 == v1174)
                v629 = (uint64_t *)((char *)&v1176 + 4);
              else
                v629 = &v1176;
              v630 = *(unsigned int *)v629;
              if ((_DWORD)v630)
              {
                v631 = 8 * v630;
                v632 = (uint64_t *)v1175;
                while ((unint64_t)*v632 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v632;
                  v631 -= 8;
                  if (!v631)
                    goto LABEL_1148;
                }
              }
              else
              {
                v632 = (uint64_t *)v1175;
              }
              v633 = (unint64_t *)((char *)v1175 + 8 * v630);
              if (v632 != (uint64_t *)v633)
              {
                v634 = *v632;
LABEL_1127:
                if (*(_BYTE *)(v634 + 16) == 77)
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1188, v634);
                  v635 = *(_DWORD *)(v634 + 20);
                  if ((v635 & 0x40000000) != 0)
                    v636 = *(unsigned __int8 ***)(v634 - 8);
                  else
                    v636 = (unsigned __int8 **)(v634 - 32 * (v635 & 0x7FFFFFF));
                  v1149 = *v636;
                  v641 = sub_1C61DB70C(v1153, &v1149);
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v634, (llvm::Value *)v641[1], (llvm::Value *)1);
                }
                else
                {
                  v637 = (char *)operator new(0x60uLL);
                  v638 = (uint64_t)(v637 + 32);
                  *((_DWORD *)v637 + 13) = *((_DWORD *)v637 + 13) & 0x38000000 | 1;
                  *(_QWORD *)v637 = 0;
                  *((_QWORD *)v637 + 1) = 0;
                  *((_QWORD *)v637 + 2) = 0;
                  *((_QWORD *)v637 + 3) = v637 + 32;
                  v639 = *(_DWORD *)(v634 + 20);
                  if ((v639 & 0x40000000) != 0)
                    v640 = *(unsigned __int8 ***)(v634 - 8);
                  else
                    v640 = (unsigned __int8 **)(v634 - 32 * (v639 & 0x7FFFFFF));
                  v1148 = *v640;
                  v642 = sub_1C61DB70C(v1153, &v1148)[1];
                  v1149 = "bc";
                  v1152 = 259;
                  llvm::BitCastInst::BitCastInst(v638, v642, (uint64_t)v505, (uint64_t)&v1149, v634);
                  v643 = *(_DWORD *)(v634 + 20);
                  if ((v643 & 0x40000000) != 0)
                    v644 = *(_QWORD *)(v634 - 8);
                  else
                    v644 = v634 - 32 * (v643 & 0x7FFFFFF);
                  if (*(_QWORD *)v644)
                  {
                    **(_QWORD **)(v644 + 16) = *(_QWORD *)(v644 + 8);
                    v645 = *(_QWORD *)(v644 + 8);
                    if (v645)
                      *(_QWORD *)(v645 + 16) = *(_QWORD *)(v644 + 16);
                  }
                  *(_QWORD *)v644 = v638;
                  v648 = *((_QWORD *)v637 + 5);
                  v647 = (uint64_t *)(v637 + 40);
                  v646 = v648;
                  *(_QWORD *)(v644 + 8) = v648;
                  if (v648)
                    *(_QWORD *)(v646 + 16) = v644 + 8;
                  *(_QWORD *)(v644 + 16) = v647;
                  *v647 = v644;
                }
                v649 = (unint64_t *)(v632 + 1);
                while (v649 != v633)
                {
                  v650 = *v649++;
                  v634 = v650;
                  if (v650 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v632 = (uint64_t *)(v649 - 1);
                    goto LABEL_1127;
                  }
                }
              }
LABEL_1148:
              if ((void *)__src.i64[0] == v1155)
                v651 = &__src.i8[12];
              else
                v651 = &__src.i8[8];
              v652 = *(unsigned int *)v651;
              if ((_DWORD)v652)
              {
                v653 = 8 * v652;
                v654 = (uint64_t *)__src.i64[0];
                while ((unint64_t)*v654 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v654;
                  v653 -= 8;
                  if (!v653)
                    goto LABEL_1163;
                }
              }
              else
              {
                v654 = (uint64_t *)__src.i64[0];
              }
              v655 = __src.i64[0] + 8 * v652;
              if (v654 != (uint64_t *)v655)
              {
                v656 = *v654;
LABEL_1159:
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1188, v656);
                v657 = (unint64_t *)(v654 + 1);
                while (v657 != (unint64_t *)v655)
                {
                  v658 = *v657++;
                  v656 = v658;
                  if (v658 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v654 = (uint64_t *)(v657 - 1);
                    goto LABEL_1159;
                  }
                }
              }
LABEL_1163:
              MEMORY[0x1CAA32FB4](v1153[0], 8);
              v508 = 1;
LABEL_1011:
              if (v1175 != v1174)
                free(v1175);
              if (v1180 != v1179)
                free(v1180);
              if ((void *)__src.i64[0] != v1155)
                free((void *)__src.i64[0]);
              v3 = v1145;
              if (v1193 != v1195)
                free(v1193);
LABEL_1019:
              v502 = v503[4];
              v500 |= v508;
              continue;
            }
            goto LABEL_922;
          }
          break;
        }
        v515 = *(_DWORD *)(v514 + 20);
        if ((v515 & 0x40000000) == 0)
        {
          v516 = v515 & 0x7FFFFFF;
          v517 = (uint64_t *)(v514 - 32 * v516);
          if (v516)
            goto LABEL_928;
          goto LABEL_976;
        }
        v517 = *(uint64_t **)(v514 - 8);
        v516 = v515 & 0x7FFFFFF;
        if (!v516)
          goto LABEL_976;
LABEL_928:
        v518 = 32 * v516;
        while (2)
        {
          v519 = *v517;
          v520 = *(unsigned __int8 *)(*v517 + 16);
          if (*v517 && v520 == 83)
          {
            v521 = sub_1C477672C((uint64_t)&v1155, *v517);
            if ((void *)__src.i64[0] == v1155)
              v522 = &__src.i8[12];
            else
              v522 = &__src.i8[8];
            if (v521 == (_QWORD *)(__src.i64[0] + 8 * *(unsigned int *)v522))
            {
              v523 = sub_1C477672C((uint64_t)&v1169, v519);
              if (v1170 == v1169)
                v524 = (uint64_t *)((char *)&v1171 + 4);
              else
                v524 = &v1171;
              if (v523 != (_QWORD *)((char *)v1170 + 8 * *(unsigned int *)v524))
                goto LABEL_1010;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1155, v519);
              v525 = &v1169;
LABEL_951:
              sub_1C4774094((llvm::SmallPtrSetImplBase *)v525, v519);
              v528 = v1194;
              if (v1194 >= (unint64_t)HIDWORD(v1194))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1193, (uint64_t)v1195, v1194 + 1, 8);
                v528 = v1194;
              }
              v1193[v528] = v519;
              LODWORD(v1194) = v1194 + 1;
            }
          }
          else
          {
            if (v519 && v520 == 60)
            {
              if ((*(_WORD *)(v519 + 18) & 0x381) != 0)
                goto LABEL_1010;
            }
            else if (!v519 || v520 != 89)
            {
              if (v519 && v520 == 77)
              {
                v529 = **(llvm::UndefValue ***)(v519 - 32);
                if (v512 && v529 != v512)
                {
                  v508 = 0;
                  goto LABEL_1011;
                }
                v530 = sub_1C477672C((uint64_t)&v1179, *v517);
                if (v1180 == v1179)
                  v531 = (uint64_t *)((char *)&v1181 + 4);
                else
                  v531 = &v1181;
                if (v530 == (_QWORD *)((char *)v1180 + 8 * *(unsigned int *)v531))
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1179, v519);
                  v532 = v1194;
                  if (v1194 >= (unint64_t)HIDWORD(v1194))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1193, (uint64_t)v1195, v1194 + 1, 8);
                    v532 = v1194;
                  }
                  v1193[v532] = v519;
                  LODWORD(v1194) = v1194 + 1;
                  v533 = *(unsigned __int8 *)(*(_QWORD *)(v519 - 32) + 16);
                  v535 = v533 != 60 && v533 != 89;
                  v513 |= v535;
                }
                v512 = v529;
              }
              else if ((v520 - 11) > 1)
              {
                goto LABEL_1010;
              }
              goto LABEL_954;
            }
            v526 = sub_1C477672C((uint64_t)&v1179, *v517);
            if (v1180 == v1179)
              v527 = (uint64_t *)((char *)&v1181 + 4);
            else
              v527 = &v1181;
            if (v526 == (_QWORD *)((char *)v1180 + 8 * *(unsigned int *)v527))
            {
              v525 = &v1179;
              goto LABEL_951;
            }
          }
LABEL_954:
          v517 += 4;
          v518 -= 32;
          if (!v518)
            goto LABEL_976;
          continue;
        }
      }
      LODWORD(v661) = 0;
      v500 = 0;
      v662 = 4;
      v660 = (uint64_t *)v1192;
      v659 = (uint64_t *)v1192;
LABEL_1168:
      if (v659 == v660)
        v661 = v661;
      else
        v661 = v662;
      v664 = (unint64_t *)v659;
      v663 = v1106;
      if ((_DWORD)v661)
      {
        v665 = 0;
        while ((unint64_t)v659[v665] >= 0xFFFFFFFFFFFFFFFELL)
        {
          if (v661 == ++v665)
            goto LABEL_1184;
        }
        v664 = (unint64_t *)&v659[v665];
      }
      v666 = (unint64_t *)&v659[v661];
      if (v664 != v666)
      {
        v667 = *v664;
LABEL_1179:
        v668 = llvm::UndefValue::get(*(llvm::UndefValue **)v667, v282);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v667, v668, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v667 + 40) + 40, (uint64_t ***)v667);
        v669 = *(_QWORD *)(v667 + 24);
        v670 = *(_QWORD **)(v667 + 32);
        *v670 = v669;
        *(_QWORD *)(v669 + 8) = v670;
        *(_QWORD *)(v667 + 24) = 0;
        *(_QWORD *)(v667 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v667);
        v671 = v664 + 1;
        while (v671 != v666)
        {
          v672 = *v671++;
          v667 = v672;
          if (v672 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v664 = v671 - 1;
            goto LABEL_1179;
          }
        }
        v660 = v1188;
        v659 = (uint64_t *)v1189;
      }
LABEL_1184:
      if (v659 != v660)
        free(v659);
      if (v1170 != v1169)
        free(v1170);
    }
    else
    {
      v500 = 0;
      v663 = v1106;
    }
    v673 = v663 | v500;
    if (((v663 | v500) & 1) != 0)
      sub_1C50871CC((uint64_t)v1108, v282);
    v674 = *(_QWORD *)(v3 + 384);
    v675 = 392;
    if (v674 == *(_QWORD *)(v3 + 376))
      v675 = 396;
    v676 = *(unsigned int *)(v3 + v675);
    v280 = v1104;
    if ((_DWORD)v676)
    {
      v677 = 8 * v676;
      v678 = *(unint64_t **)(v3 + 384);
      while (*v678 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v678;
        v677 -= 8;
        if (!v677)
          goto LABEL_1204;
      }
    }
    else
    {
      v678 = *(unint64_t **)(v3 + 384);
    }
    v679 = (unint64_t *)(v674 + 8 * v676);
    if (v678 != v679)
    {
      v680 = (llvm::Value *)*v678;
LABEL_1200:
      llvm::Value::deleteValue(v680);
      v681 = v678 + 1;
      while (v681 != v679)
      {
        v682 = *v681++;
        v680 = (llvm::Value *)v682;
        if (v682 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v678 = v681 - 1;
          goto LABEL_1200;
        }
      }
    }
LABEL_1204:
    v683 = *(_DWORD *)(v3 + 544);
    if (!v683)
    {
      if (!*(_DWORD *)(v3 + 548))
        goto LABEL_1206;
      v700 = *(_DWORD *)(v3 + 552);
      if (v700 > 0x40)
      {
        v702 = 0;
        goto LABEL_1245;
      }
LABEL_1264:
      if (v700)
      {
        v711 = *(_QWORD **)v1095;
        v712 = 16 * v700;
        do
        {
          *v711 = -4096;
          v711 += 2;
          v712 -= 16;
        }
        while (v712);
      }
      v3 = v1145;
      *(_QWORD *)(v1145 + 544) = 0;
LABEL_1268:
      v280 = v1104;
      goto LABEL_1206;
    }
    v700 = *(_DWORD *)(v3 + 552);
    if (v700 <= 4 * v683 || v700 < 0x41)
      goto LABEL_1264;
    v701 = 1 << (33 - __clz(v683 - 1));
    if (v701 <= 64)
      v702 = 64;
    else
      v702 = v701;
LABEL_1245:
    if (v702 == v700)
    {
      v3 = v1145;
      *(_QWORD *)(v1145 + 544) = 0;
      v703 = *(_QWORD **)(v1145 + 536);
      v704 = 16 * v700;
      v280 = v1104;
      do
      {
        *v703 = -4096;
        v703 += 2;
        v704 -= 16;
      }
      while (v704);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)v1095, 8);
      if (!v702)
      {
        *(_QWORD *)v1095 = 0;
        *(_QWORD *)(v1095 + 8) = 0;
        *(_DWORD *)(v1095 + 16) = 0;
        v3 = v1145;
        goto LABEL_1268;
      }
      v715 = (4 * v702 / 3u + 1) | ((unint64_t)(4 * v702 / 3u + 1) >> 1);
      v716 = v715 | (v715 >> 2) | ((v715 | (v715 >> 2)) >> 4);
      LODWORD(v716) = (((v716 | (v716 >> 8)) >> 16) | v716 | (v716 >> 8)) + 1;
      v3 = v1145;
      *(_DWORD *)(v1145 + 552) = v716;
      v717 = operator new(16 * v716, (std::align_val_t)8uLL);
      *(_QWORD *)(v1145 + 536) = v717;
      *(_QWORD *)(v1145 + 544) = 0;
      v718 = *(unsigned int *)(v1145 + 552);
      v280 = v1104;
      if ((_DWORD)v718)
      {
        v719 = 16 * v718;
        do
        {
          *v717 = -4096;
          v717 += 2;
          v719 -= 16;
        }
        while (v719);
      }
    }
LABEL_1206:
    v684 = *(_DWORD *)(v3 + 696);
    if (v684 || *(_DWORD *)(v3 + 700))
    {
      v695 = *(_DWORD *)(v3 + 704);
      if (v695 > 4 * v684 && v695 >= 0x41)
      {
        sub_1C61DA9E8(v1097);
        if (v684)
        {
          v725 = 1 << (33 - __clz(v684 - 1));
          if (v725 <= 64)
            v684 = 64;
          else
            v684 = v725;
        }
        if (v684 == *(_DWORD *)(v1145 + 704))
        {
          v3 = v1145;
          *(_QWORD *)(v1145 + 696) = 0;
          v280 = v1104;
          if (v684)
          {
            v726 = *(_QWORD **)(v1145 + 688);
            v727 = 152 * v684;
            do
            {
              *v726 = -4096;
              v726 += 19;
              v727 -= 152;
            }
            while (v727);
          }
          goto LABEL_1208;
        }
        MEMORY[0x1CAA32FB4](*(_QWORD *)v1097, 8);
        if (v684)
        {
          v728 = (4 * v684 / 3 + 1) | ((unint64_t)(4 * v684 / 3 + 1) >> 1);
          v729 = v728 | (v728 >> 2) | ((v728 | (v728 >> 2)) >> 4);
          LODWORD(v729) = (((v729 | (v729 >> 8)) >> 16) | v729 | (v729 >> 8)) + 1;
          v3 = v1145;
          *(_DWORD *)(v1145 + 704) = v729;
          v730 = operator new(152 * v729, (std::align_val_t)8uLL);
          *(_QWORD *)(v1145 + 688) = v730;
          *(_QWORD *)(v1145 + 696) = 0;
          v731 = *(_DWORD *)(v1145 + 704);
          v280 = v1104;
          if (v731)
          {
            v732 = 152 * v731;
            do
            {
              *v730 = -4096;
              v730 += 19;
              v732 -= 152;
            }
            while (v732);
          }
          goto LABEL_1208;
        }
        *(_QWORD *)v1097 = 0;
        *(_QWORD *)(v1097 + 8) = 0;
        *(_DWORD *)(v1097 + 16) = 0;
        v3 = v1145;
      }
      else
      {
        if (v695)
        {
          v696 = *(_QWORD *)v1097 + 24;
          v697 = 152 * v695;
          while (1)
          {
            v698 = *(_QWORD *)(v696 - 24);
            if (v698 == -8192)
              goto LABEL_1234;
            if (v698 != -4096)
              break;
LABEL_1235:
            v696 += 152;
            v697 -= 152;
            if (!v697)
              goto LABEL_1236;
          }
          v699 = *(void **)(v696 - 16);
          if ((void *)v696 != v699)
            free(v699);
LABEL_1234:
          *(_QWORD *)(v696 - 24) = -4096;
          goto LABEL_1235;
        }
LABEL_1236:
        v3 = v1145;
        *(_QWORD *)(v1145 + 696) = 0;
      }
      v280 = v1104;
    }
LABEL_1208:
    v685 = *(void **)(v3 + 384);
    if (v685 == *(void **)(v3 + 376))
      goto LABEL_1209;
    v689 = *(unsigned int *)(v3 + 392);
    if (v689 >= 0x21 && 4 * (*(_DWORD *)(v3 + 396) - *(_DWORD *)(v3 + 400)) < v689)
    {
      free(v685);
      v691 = *(_DWORD *)(v3 + 396) - *(_DWORD *)(v3 + 400);
      v692 = 1 << (33 - __clz(v691 - 1));
      if (v691 <= 0x10)
        v693 = 32;
      else
        v693 = v692;
      *(_DWORD *)(v3 + 392) = v693;
      *v1103 = 0;
      v694 = malloc_type_malloc(8 * v693, 0x4065EBACuLL);
      if (v694)
      {
        *(_QWORD *)(v3 + 384) = v694;
        memset(v694, 255, 8 * *(unsigned int *)(v3 + 392));
        goto LABEL_1210;
      }
LABEL_1961:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    memset(v685, 255, 8 * v689);
LABEL_1209:
    *v1103 = 0;
LABEL_1210:
    sub_1C5015F50(v1102);
    v686 = *(_QWORD *)(v3 + 592);
    for (jj = *(_QWORD *)(v3 + 584); v686 != jj; v280 = v1104)
    {
      v705 = *(void **)(v686 - 528);
      if ((void *)(v686 - 512) != v705)
        free(v705);
      v686 -= 536;
      v3 = v1145;
    }
    *(_QWORD *)(v3 + 592) = jj;
    v688 = *(_DWORD *)(v3 + 672);
    if (v688)
    {
      v706 = *(_DWORD *)(v3 + 680);
      if (v706 <= 4 * v688 || v706 < 0x41)
        goto LABEL_1269;
      v707 = 1 << (33 - __clz(v688 - 1));
      if (v707 <= 64)
        v708 = 64;
      else
        v708 = v707;
LABEL_1260:
      if (v708 == v706)
      {
        v3 = v1145;
        *(_QWORD *)(v1145 + 672) = 0;
        v709 = *(_QWORD **)(v1145 + 664);
        v710 = 16 * v706;
        v280 = v1104;
        do
        {
          *v709 = -4096;
          v709 += 2;
          v710 -= 16;
        }
        while (v710);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v1096, 8);
        if (!v708)
        {
          *(_QWORD *)v1096 = 0;
          *(_QWORD *)(v1096 + 8) = 0;
          *(_DWORD *)(v1096 + 16) = 0;
          v3 = v1145;
          goto LABEL_1273;
        }
        v720 = (4 * v708 / 3u + 1) | ((unint64_t)(4 * v708 / 3u + 1) >> 1);
        v721 = v720 | (v720 >> 2) | ((v720 | (v720 >> 2)) >> 4);
        LODWORD(v721) = (((v721 | (v721 >> 8)) >> 16) | v721 | (v721 >> 8)) + 1;
        v3 = v1145;
        *(_DWORD *)(v1145 + 680) = v721;
        v722 = operator new(16 * v721, (std::align_val_t)8uLL);
        *(_QWORD *)(v1145 + 664) = v722;
        *(_QWORD *)(v1145 + 672) = 0;
        v723 = *(unsigned int *)(v1145 + 680);
        v280 = v1104;
        if ((_DWORD)v723)
        {
          v724 = 16 * v723;
          do
          {
            *v722 = -4096;
            v722 += 2;
            v724 -= 16;
          }
          while (v724);
        }
      }
    }
    else
    {
      if (!*(_DWORD *)(v3 + 676))
        goto LABEL_1213;
      v706 = *(_DWORD *)(v3 + 680);
      if (v706 > 0x40)
      {
        v708 = 0;
        goto LABEL_1260;
      }
LABEL_1269:
      if (v706)
      {
        v713 = *(_QWORD **)v1096;
        v714 = 16 * v706;
        do
        {
          *v713 = -4096;
          v713 += 2;
          v714 -= 16;
        }
        while (v714);
      }
      v3 = v1145;
      *(_QWORD *)(v1145 + 672) = 0;
LABEL_1273:
      v280 = v1104;
    }
LABEL_1213:
    v279 = 1;
  }
  while ((v673 & 1) != 0);
  *(_DWORD *)(v3 + 616) = 0;
  sub_1C4ABB360(*(_QWORD **)(v3 + 648));
  *(_QWORD *)(v3 + 640) = v3 + 648;
  *(_QWORD *)(v3 + 656) = 0;
  *(_QWORD *)(v3 + 648) = 0;
  v734 = *(_DWORD *)(v3 + 136);
  if (v734 || *(_DWORD *)(v3 + 140))
  {
    v941 = *(unsigned int *)(v3 + 144);
    if (v941 > 4 * v734 && v941 >= 0x41)
    {
      sub_1C509F99C(v1101);
    }
    else
    {
      if ((_DWORD)v941)
      {
        v942 = (_QWORD *)*v1101;
        v943 = (_QWORD *)(*v1101 + (v941 << 6));
        do
        {
          v944 = v942[3];
          if (v944 != -4096)
          {
            if (v944 == -8192)
              goto LABEL_1742;
            v945 = v942[7];
            if (v945 && v945 != -8192 && v945 != -4096)
            {
              v946 = v942[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v946 = v942[6];
              v947 = (unint64_t *)v942[6];
              if (v947)
              {
                *v947 = *v947 & 7 | v946;
              }
              else
              {
                v948 = v942[7];
                v949 = ***(int32x2_t ****)v948;
                v950 = (unint64_t)v949[303];
                if (v950 <= v946)
                {
                  v951 = v949[305].u32[0];
                  if (v950 + 16 * v951 > v946)
                  {
                    v952 = v951 - 1;
                    LODWORD(v953) = v952 & ((v948 >> 4) ^ (v948 >> 9));
                    v954 = (uint64_t *)(v950 + 16 * v953);
                    v955 = *v954;
                    if (v948 == *v954)
                    {
LABEL_1733:
                      *v954 = -8192;
                      v949[304] = vadd_s32(v949[304], (int32x2_t)0x1FFFFFFFFLL);
                      v948 = v942[7];
                    }
                    else
                    {
                      v956 = 1;
                      while (v955 != -4096)
                      {
                        v957 = v953 + v956++;
                        v953 = v957 & v952;
                        v955 = *(_QWORD *)(v950 + 16 * v953);
                        if (v948 == v955)
                        {
                          v954 = (uint64_t *)(v950 + 16 * v953);
                          goto LABEL_1733;
                        }
                      }
                    }
                    *(_BYTE *)(v948 + 17) &= ~1u;
                  }
                }
              }
              v944 = v942[3];
            }
            if (v944 != -4096)
            {
LABEL_1742:
              if (v944 && v944 != -8192)
              {
                v958 = v942[1] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v958 = v942[2];
                v959 = (unint64_t *)v942[2];
                if (v959)
                {
                  *v959 = *v959 & 7 | v958;
                }
                else
                {
                  v960 = v942[3];
                  v961 = ***(int32x2_t ****)v960;
                  v962 = (unint64_t)v961[303];
                  if (v962 <= v958)
                  {
                    v963 = v961[305].u32[0];
                    if (v962 + 16 * v963 > v958)
                    {
                      v964 = v963 - 1;
                      LODWORD(v965) = v964 & ((v960 >> 4) ^ (v960 >> 9));
                      v966 = (uint64_t *)(v962 + 16 * v965);
                      v967 = *v966;
                      if (v960 == *v966)
                      {
LABEL_1751:
                        *v966 = -8192;
                        v961[304] = vadd_s32(v961[304], (int32x2_t)0x1FFFFFFFFLL);
                        v960 = v942[3];
                      }
                      else
                      {
                        v968 = 1;
                        while (v967 != -4096)
                        {
                          v969 = v965 + v968++;
                          v965 = v969 & v964;
                          v967 = *(_QWORD *)(v962 + 16 * v965);
                          if (v960 == v967)
                          {
                            v966 = (uint64_t *)(v962 + 16 * v965);
                            goto LABEL_1751;
                          }
                        }
                      }
                      *(_BYTE *)(v960 + 17) &= ~1u;
                    }
                  }
                }
              }
              v942[3] = -4096;
            }
            v942[4] = 0;
          }
          v942 += 8;
        }
        while (v942 != v943);
      }
      *(_QWORD *)(v3 + 136) = 0;
    }
  }
  if (*(_BYTE *)(v3 + 176))
  {
    sub_1C4E43068(v1098);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v3 + 152), 8);
    *(_BYTE *)(v3 + 176) = 0;
  }
  if (*(_BYTE *)(v3 + 112))
  {
LABEL_1306:
    v735 = (uint64_t)v1108;
    goto LABEL_1413;
  }
  v1155 = (void *)1;
  __src = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v1157 = __src;
  v1158 = __src;
  v1159 = __src;
  v1160 = &v1162;
  v1161 = 0x800000000;
  v735 = (uint64_t)v1108;
  v736 = (llvm *)*((_QWORD *)v1108 + 10);
  if (v736 == v1112)
  {
    kk = 0;
    goto LABEL_1407;
  }
  v737 = 0;
  while (2)
  {
    if (v736)
      v738 = (uint64_t)v736 - 24;
    else
      v738 = 0;
    v739 = *(_QWORD *)(v738 + 40);
    if (v739 == v738 + 40)
    {
LABEL_1353:
      v741 = 0;
      v742 = 0;
      v1179 = &v1181;
      HIDWORD(v1180) = 2;
    }
    else
    {
      if (v739)
        v740 = v739 - 24;
      else
        v740 = 0;
      if (*(_BYTE *)(v740 + 16) == 30)
      {
        if ((*(_DWORD *)(v740 + 20) & 0x7FFFFFF) == 3)
          v741 = 2;
        else
          v741 = 1;
LABEL_1320:
        v1179 = &v1181;
        v1180 = (void *)0x200000000;
LABEL_1321:
        v742 = 0;
        if (v741)
        {
          v743 = 0;
          v744 = &v1181;
          goto LABEL_1323;
        }
        v741 = 0;
      }
      else
      {
        v741 = 0;
        switch(*(_BYTE *)(v740 + 16))
        {
          case 0x1D:
          case 0x22:
          case 0x23:
            goto LABEL_1320;
          case 0x1E:
            goto LABEL_1960;
          case 0x1F:
            v741 = (*(_DWORD *)(v740 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_1351;
          case 0x20:
          case 0x26:
            v741 = (*(_DWORD *)(v740 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_1351;
          case 0x21:
            v741 = 2;
            goto LABEL_1320;
          case 0x24:
            v741 = *(_WORD *)(v740 + 18) & 1;
            goto LABEL_1320;
          case 0x25:
            v741 = 1;
            goto LABEL_1320;
          case 0x27:
            v741 = *(_DWORD *)(v740 + 80) + 1;
LABEL_1351:
            v1179 = &v1181;
            v1180 = (void *)0x200000000;
            if (v741 < 3)
              goto LABEL_1321;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1179, (uint64_t)&v1181, v741, 8);
            v742 = (int)v1180;
            v744 = (uint64_t *)v1179;
            v743 = v1180;
            break;
          default:
            goto LABEL_1353;
        }
LABEL_1323:
        v745 = 0;
        v746 = 0;
        v747 = &v744[v743];
        v748 = *(unsigned __int8 *)(v739 - 8);
        v749 = v739 - 88;
        do
        {
          if (v748 != 30)
            __asm { BR              X1 }
          v747[v746] = *(_QWORD *)(v739 - 56 - 32 * v746);
          ++v746;
          v745 += 2;
          v749 += 32;
        }
        while (v741 != v746);
      }
    }
    LODWORD(v1180) = v742 + v741;
    v737 |= llvm::ConstantFoldTerminator(v738, 1, 0, 0);
    v750 = (void **)v1179;
    if ((v737 & 1) != 0 && (_DWORD)v1180)
    {
      v751 = (void **)((char *)v1179 + 8 * v1180);
      do
      {
        v1174 = 0;
        v752 = *v750;
        v1174 = *v750;
        while (1)
        {
          v752 = (_QWORD *)v752[1];
          if (!v752)
            break;
          v753 = v752[3];
          v754 = *(unsigned __int8 *)(v753 + 16);
          if (v753)
            v755 = v754 >= 0x1C;
          else
            v755 = 0;
          if (v755 && v754 - 29 < 0xB)
            goto LABEL_1343;
        }
        sub_1C50878C8((uint64_t)&v1155, (uint64_t *)&v1174);
LABEL_1343:
        ++v750;
      }
      while (v750 != v751);
      v750 = (void **)v1179;
    }
    if (v750 != (void **)&v1181)
      free(v750);
    v736 = (llvm *)*((_QWORD *)v736 + 1);
    if (v736 != v1112)
      continue;
    break;
  }
  v757 = v1161;
  for (kk = v737 | ((_DWORD)v1161 != 0); (_DWORD)v1161; v757 = v1161)
  {
    v759 = (char *)v1160 + 8 * v757;
    v760 = (llvm *)*((_QWORD *)v759 - 1);
    sub_1C50A0088((uint64_t)&v1155, (_QWORD *)v759 - 1);
    LODWORD(v1161) = v1161 - 1;
    v761 = (_QWORD *)*((_QWORD *)v760 + 5);
    if (v761 == (_QWORD *)((char *)v760 + 40))
    {
LABEL_1399:
      v763 = 0;
      v764 = 0;
      v1179 = &v1181;
      HIDWORD(v1180) = 2;
    }
    else
    {
      if (v761)
        v762 = v761 - 3;
      else
        v762 = 0;
      if (*((_BYTE *)v762 + 16) != 30)
      {
        v763 = 0;
        switch(*((_BYTE *)v762 + 16))
        {
          case 0x1D:
          case 0x22:
          case 0x23:
            goto LABEL_1368;
          case 0x1E:
            goto LABEL_1960;
          case 0x1F:
            v763 = (*((_DWORD *)v762 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_1397;
          case 0x20:
          case 0x26:
            v763 = (*((_DWORD *)v762 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_1397;
          case 0x21:
            v763 = 2;
            goto LABEL_1368;
          case 0x24:
            v763 = *((_WORD *)v762 + 9) & 1;
            goto LABEL_1368;
          case 0x25:
            v763 = 1;
            goto LABEL_1368;
          case 0x27:
            v763 = *((_DWORD *)v762 + 20) + 1;
LABEL_1397:
            v1179 = &v1181;
            v1180 = (void *)0x200000000;
            if (v763 < 3)
              goto LABEL_1369;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1179, (uint64_t)&v1181, v763, 8);
            v764 = (int)v1180;
            v766 = (uint64_t *)v1179;
            v765 = v1180;
            break;
          default:
            goto LABEL_1399;
        }
        goto LABEL_1371;
      }
      if ((*((_DWORD *)v762 + 5) & 0x7FFFFFF) == 3)
        v763 = 2;
      else
        v763 = 1;
LABEL_1368:
      v1179 = &v1181;
      v1180 = (void *)0x200000000;
LABEL_1369:
      v764 = 0;
      if (v763)
      {
        v765 = 0;
        v766 = &v1181;
LABEL_1371:
        v767 = 0;
        v768 = 0;
        v769 = &v766[v765];
        v770 = *((unsigned __int8 *)v761 - 8);
        v771 = v761 - 11;
        do
        {
          if (v770 != 30)
            __asm { BR              X1 }
          v769[v768] = v761[-4 * v768 - 7];
          ++v768;
          v767 += 2;
          v771 += 4;
        }
        while (v763 != v768);
        goto LABEL_1377;
      }
      v763 = 0;
    }
LABEL_1377:
    LODWORD(v1180) = v764 + v763;
    llvm::DeleteDeadBlock(v760, 0, 0);
    v772 = (void **)v1179;
    v773 = (void **)((char *)v1179 + 8 * v1180);
    if ((_DWORD)v1180)
    {
      do
      {
        v1174 = 0;
        v774 = *v772;
        v1174 = *v772;
        while (1)
        {
          v774 = (_QWORD *)v774[1];
          if (!v774)
            break;
          v775 = v774[3];
          v776 = *(unsigned __int8 *)(v775 + 16);
          if (v775)
            v777 = v776 >= 0x1C;
          else
            v777 = 0;
          if (v777 && v776 - 29 < 0xB)
            goto LABEL_1389;
        }
        sub_1C50878C8((uint64_t)&v1155, (uint64_t *)&v1174);
LABEL_1389:
        ++v772;
      }
      while (v772 != v773);
      v772 = (void **)v1179;
    }
    if (v772 != (void **)&v1181)
      free(v772);
  }
  v735 = (uint64_t)v1108;
LABEL_1407:
  if (((v1105 | kk) & 1) != 0)
  {
    v779 = sub_1C50871CC(v735, v733);
    v735 = (uint64_t)v1108;
    v780 = kk | v779;
  }
  else
  {
    v780 = 0;
  }
  if (v1160 != &v1162)
  {
    free(v1160);
    v735 = (uint64_t)v1108;
  }
  LOBYTE(v1105) = v1105 | v780;
  if ((v1155 & 1) == 0)
  {
    MEMORY[0x1CAA32FB4](__src.i64[0], 8);
    goto LABEL_1306;
  }
LABEL_1413:
  if (!byte_1ED7F5380)
  {
    v1188 = &v1190;
    v1189 = 0x200000000;
    v781 = *(llvm **)(v735 + 80);
    if (v781 != v1112)
    {
      do
      {
        v782 = (_QWORD *)((char *)v781 - 24);
        if (!v781)
          v782 = 0;
        v783 = v782 + 5;
        for (mm = (_QWORD *)v782[6]; mm != v783; mm = (_QWORD *)mm[1])
        {
          if (mm)
            v785 = (uint64_t)(mm - 3);
          else
            v785 = 0;
          v786 = sub_1C50A011C(v785);
          if (mm && v786)
          {
            v787 = v1189;
            if (v1189 >= (unint64_t)HIDWORD(v1189))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1188, (uint64_t)&v1190, v1189 + 1, 8);
              v787 = v1189;
            }
            v1188[v787] = v785;
            LODWORD(v1189) = v1189 + 1;
          }
        }
        v781 = (llvm *)*((_QWORD *)v781 + 1);
      }
      while (v781 != v1112);
      v788 = v1188;
      if ((_DWORD)v1189)
      {
        v789 = &v1188[v1189];
        v1146 = v789;
        while (1)
        {
          v790 = *v788;
          v1169 = &v1171;
          v1170 = (void *)0x200000000;
          v791 = *(_QWORD *)(v790 + 8);
          if (v791)
            break;
          v797 = 0;
LABEL_1597:
          LOBYTE(v1105) = v1105 | v797;
          if (++v788 == v789)
          {
            v788 = v1188;
            goto LABEL_1599;
          }
        }
        do
        {
          v792 = *(_QWORD *)(v791 + 24);
          v793 = sub_1C4E9AE24(v792);
          if (v792)
            v794 = !v793;
          else
            v794 = 1;
          if (!v794)
          {
            v795 = v1170;
            if (v1170 >= (unint64_t)HIDWORD(v1170))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1169, (uint64_t)&v1171, v1170 + 1, 8);
              v795 = v1170;
            }
            *((_QWORD *)v1169 + v795) = v792;
            LODWORD(v1170) = (_DWORD)v1170 + 1;
          }
          v791 = *(_QWORD *)(v791 + 8);
        }
        while (v791);
        v796 = (uint64_t *)v1169;
        if (v1170 < 2)
        {
          v797 = 0;
          goto LABEL_1595;
        }
        v1193 = 0;
        v1194 = 0;
        LODWORD(v1195[0]) = 0;
        v1155 = 0;
        __src.i64[0] = 0;
        v798 = 8 * v1170;
        __src.i32[2] = 0;
        do
        {
          v799 = (void *)*v796;
          v800 = *v796 - 32 * (*(_DWORD *)(*v796 + 20) & 0x7FFFFFF);
          v801 = *(_QWORD *)(v800 + 32);
          v802 = (unsigned int *)(v801 + 24);
          if (*(_DWORD *)(v801 + 32) >= 0x41u)
            v802 = *(unsigned int **)v802;
          v803 = *v802;
          v804 = *(_QWORD *)(v800 + 64);
          v805 = (_QWORD *)(v804 + 24);
          if (*(_DWORD *)(v804 + 32) >= 0x41u)
            v805 = (_QWORD *)*v805;
          v1174 = (void *)(v803 | (*v805 << 32));
          v1175 = v799;
          sub_1C61DB808((uint64_t)&v1179, (uint64_t)&v1155, (int *)&v1174, &v1175);
          ++v796;
          v798 -= 8;
        }
        while (v798);
        v806 = v1155;
        v807 = __src.i32[2];
        v808 = (char *)v1155 + 16 * __src.u32[2];
        v809 = __src.u32[2];
        v810 = v808;
        if (__src.i32[0])
        {
          if (__src.i32[2])
          {
            v811 = 16 * __src.u32[2];
            v810 = (char *)v1155;
            do
            {
              v812 = *((_DWORD *)v810 + 1);
              if ((*(_DWORD *)v810 != -1 || v812 != -1) && (*(_DWORD *)v810 != -2 || v812 != -2))
              {
                v809 = __src.u32[2];
                goto LABEL_1464;
              }
              v810 += 16;
              v811 -= 16;
            }
            while (v811);
            v809 = __src.u32[2];
            v810 = (char *)v1155 + 16 * __src.u32[2];
          }
          else
          {
            v809 = 0;
            v810 = (char *)v1155;
          }
        }
LABEL_1464:
        v815 = (char *)v1155 + 16 * v809;
        if (v810 == v815)
        {
          MEMORY[0x1CAA32FB4](v1155, 8);
          v797 = 0;
          v816 = 0;
          v789 = v1146;
LABEL_1594:
          MEMORY[0x1CAA32FB4](v816, 8);
          v796 = (uint64_t *)v1169;
LABEL_1595:
          if (v796 != &v1171)
            free(v796);
          goto LABEL_1597;
        }
        do
        {
          v822 = *(_DWORD *)v810;
          if (*(_DWORD *)v810 != *((_DWORD *)v810 + 1))
          {
            v817 = *((_QWORD *)v810 + 1);
            v1179 = 0;
            if (sub_1C61DB8AC((uint64_t)v806, v807, v822, v822, &v1179) && v1179 != v808)
            {
              v819 = sub_1C61DBB0C((uint64_t)&v1193, (uint64_t *)v1179 + 1);
              v820 = v819;
              v821 = *((unsigned int *)v819 + 4);
              if (v821 >= *((unsigned int *)v819 + 5))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v819 + 1), (uint64_t)(v819 + 3), v821 + 1, 8);
                v821 = *((unsigned int *)v820 + 4);
              }
              *(_QWORD *)(v820[1] + 8 * v821) = v817;
              ++*((_DWORD *)v820 + 4);
            }
          }
          v823 = v810 + 16;
          v810 = v808;
          if (v823 != v808)
          {
            v810 = v823;
            while (1)
            {
              v824 = *((_DWORD *)v810 + 1);
              if ((*(_DWORD *)v810 != -1 || v824 != -1) && (*(_DWORD *)v810 != -2 || v824 != -2))
                break;
              v810 += 16;
              if (v810 == v808)
              {
                v810 = v808;
                break;
              }
            }
          }
        }
        while (v810 != v815);
        v827 = v1194;
        v828 = LODWORD(v1195[0]);
        v829 = (llvm::Value *)v1193;
        MEMORY[0x1CAA32FB4](v806, 8);
        if (v827)
        {
          v830 = v829;
          v789 = v1146;
          if (v828)
          {
            v831 = 0;
            while ((*(_QWORD *)((char *)v829 + v831) | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v831 += 40;
              if (40 * v828 == v831)
                goto LABEL_1585;
            }
            v830 = (llvm::Value *)((char *)v829 + v831);
          }
          v832 = (llvm::Value *)((char *)v829 + 40 * v828);
          if (v830 == v832)
          {
LABEL_1585:
            v797 = 0;
            v816 = v829;
            if (!v828)
              goto LABEL_1594;
          }
          else
          {
            v1121 = v829;
            v833 = *(_QWORD *)v830;
            do
            {
              v834 = *(_QWORD *)(v833 + 40);
              v835 = v834 + 40;
              for (nn = *(_QWORD *)(v834 + 48); nn != v835; nn = *(_QWORD *)(nn + 8))
              {
                v837 = nn - 24;
                if (!nn)
                  v837 = 0;
                if (*(_BYTE *)(v837 + 16) != 83)
                {
                  v838 = *(unsigned __int8 *)(nn - 8) - 38;
                  v181 = v838 > 0x38;
                  v839 = (1 << v838) & 0x100060000000001;
                  if (v181 || v839 == 0)
                    v835 = nn;
                  else
                    v835 = *(_QWORD *)(nn + 8);
                  break;
                }
              }
              v841 = v835 != 0;
              if (v835)
                v842 = (llvm::GCProjectionInst *)(v835 - 24);
              else
                v842 = 0;
              if (v842 != (llvm::GCProjectionInst *)v833)
              {
                while (1)
                {
                  v843 = sub_1C4E9AE24((uint64_t)v842);
                  if (!v843)
                    v842 = 0;
                  if (v841 && v843)
                  {
                    Statepoint = llvm::GCProjectionInst::getStatepoint(v842);
                    if (Statepoint == llvm::GCProjectionInst::getStatepoint((llvm::GCProjectionInst *)v833))
                    {
                      v845 = ((_QWORD *)v842 - 4 * (*((_DWORD *)v842 + 5) & 0x7FFFFFF))[4];
                      v846 = (_QWORD *)(v845 + 24);
                      if (*(_DWORD *)(v845 + 32) >= 0x41u)
                        v846 = (_QWORD *)*v846;
                      v847 = *(_QWORD *)(v833 + 32 - 32 * (*(_DWORD *)(v833 + 20) & 0x7FFFFFF));
                      v848 = (_QWORD *)(v847 + 24);
                      if (*(_DWORD *)(v847 + 32) >= 0x41u)
                        v848 = (_QWORD *)*v848;
                      if (*(_DWORD *)v846 == *(_DWORD *)v848)
                        break;
                    }
                  }
                  v835 = *(_QWORD *)(v835 + 8);
                  v841 = v835 != 0;
                  if (v835)
                    v842 = (llvm::GCProjectionInst *)(v835 - 24);
                  else
                    v842 = 0;
                  if (v842 == (llvm::GCProjectionInst *)v833)
                    goto LABEL_1528;
                }
                llvm::Instruction::moveBefore((llvm::Instruction *)v833, v842);
              }
LABEL_1528:
              v849 = *((unsigned int *)v830 + 4);
              if ((_DWORD)v849)
              {
                v797 = 0;
                v850 = (llvm::GCRelocateInst **)*((_QWORD *)v830 + 1);
                v851 = &v850[v849];
                v1125 = v832;
                do
                {
                  v852 = *v850;
                  v853 = (uint64_t)*v850 - 32 * (*((_DWORD *)*v850 + 5) & 0x7FFFFFF);
                  v854 = *(_QWORD *)(v853 + 32);
                  v855 = (_QWORD *)(v854 + 24);
                  if (*(_DWORD *)(v854 + 32) >= 0x41u)
                    v855 = (_QWORD *)*v855;
                  v856 = *(_QWORD *)(v853 + 64);
                  v857 = (_QWORD *)(v856 + 24);
                  if (*(_DWORD *)(v856 + 32) >= 0x41u)
                    v857 = (_QWORD *)*v857;
                  if (*(_DWORD *)v855 != *(_DWORD *)v857 && *(_QWORD *)(v833 + 40) == *((_QWORD *)v852 + 5))
                  {
                    BasePtr = llvm::GCRelocateInst::getBasePtr(*v850);
                    DerivedPtr = llvm::GCRelocateInst::getDerivedPtr(v852);
                    if (DerivedPtr)
                    {
                      v860 = DerivedPtr;
                      if (*(_BYTE *)(DerivedPtr + 16) == 62)
                      {
                        v861 = *(_DWORD *)(DerivedPtr + 20) & 0x7FFFFFF;
                        if (*(_QWORD *)(DerivedPtr - 32 * v861) == BasePtr)
                        {
                          v1119 = (uint64_t *)BasePtr;
                          v1174 = &v1176;
                          v1175 = (void *)0x200000000;
                          if (v861 < 2)
                          {
LABEL_1556:
                            v870 = *(_QWORD *)(v833 + 32);
                            if (v870)
                              v871 = v870 == *(_QWORD *)(v833 + 40) + 40;
                            else
                              v871 = 1;
                            if (v871)
                              v872 = 0;
                            else
                              v872 = v870 - 24;
                            sub_1C4773D54((uint64_t)&v1155, v872, 0, 0, 0);
                            v873 = (unsigned __int8 *)*((_QWORD *)v852 + 6);
                            v1149 = v873;
                            if (v873)
                            {
                              llvm::MetadataTracking::track((uint64_t)&v1149, v873, 2);
                              v874 = v1149;
                            }
                            else
                            {
                              v874 = 0;
                            }
                            sub_1C4774EF4((uint64_t)&v1155, 0, (uint64_t)v874);
                            if (v1149)
                              llvm::MetadataTracking::untrack((uint64_t)&v1149, v1149);
                            v875 = *v1119;
                            v876 = (uint64_t *)v833;
                            if (*(_QWORD *)v833 != *v1119)
                            {
                              LOWORD(v1183) = 257;
                              v876 = (uint64_t *)sub_1C4773E38((uint64_t *)&v1155, 49, (unsigned __int8 *)v833, v875, (uint64_t)&v1179);
                            }
                            v877 = *(llvm::GetElementPtrInst **)(v860 + 64);
                            LOWORD(v1183) = 257;
                            v878 = (llvm::Value *)sub_1C509D7B0((uint64_t *)&v1155, v877, v876, (llvm::Value *)v1174, v1175, (uint64_t)&v1179);
                            llvm::Value::takeName(v878, v852);
                            v879 = *(_QWORD *)v852;
                            if (*(_QWORD *)v878 != *(_QWORD *)v852)
                            {
                              LOWORD(v1183) = 257;
                              v878 = (llvm::Value *)sub_1C4773E38((uint64_t *)&v1155, 49, (unsigned __int8 *)v878, v879, (uint64_t)&v1179);
                            }
                            v832 = v1125;
                            llvm::Value::doRAUW(v852, v878, (llvm::Value *)1);
                            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v852 + 5) + 40, (uint64_t ***)v852);
                            v880 = *((_QWORD *)v852 + 3);
                            v881 = (_QWORD *)*((_QWORD *)v852 + 4);
                            *v881 = v880;
                            *(_QWORD *)(v880 + 8) = v881;
                            *((_QWORD *)v852 + 3) = 0;
                            *((_QWORD *)v852 + 4) = 0;
                            llvm::Value::deleteValue(v852);
                            if (v1155 != &__src.u64[1])
                              free(v1155);
                            if (v1174 != &v1176)
                              free(v1174);
                            v797 = 1;
                          }
                          else
                          {
                            v862 = -32 * v861;
                            v832 = v1125;
                            while (1)
                            {
                              v863 = *(_QWORD *)(DerivedPtr + 32 + v862);
                              if (!v863 || *(_BYTE *)(v863 + 16) != 16)
                                break;
                              v865 = (_QWORD *)(v863 + 24);
                              if (*(_DWORD *)(v863 + 32) >= 0x41u)
                                v865 = (_QWORD *)*v865;
                              if (*v865 > 0x14uLL)
                                break;
                              v862 += 32;
                              if (v862 == -32)
                              {
                                v866 = 0;
                                v867 = DerivedPtr + 32;
                                for (i1 = 1; i1 < v861; ++i1)
                                {
                                  v869 = *(_QWORD *)(v867 - 32 * v861);
                                  if (v866 >= HIDWORD(v1175))
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1174, (uint64_t)&v1176, v866 + 1, 8);
                                    v866 = v1175;
                                  }
                                  *((_QWORD *)v1174 + v866) = v869;
                                  v866 = (_DWORD)v1175 + 1;
                                  LODWORD(v1175) = (_DWORD)v1175 + 1;
                                  v861 = *(_DWORD *)(v860 + 20) & 0x7FFFFFF;
                                  v867 += 32;
                                }
                                goto LABEL_1556;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  ++v850;
                }
                while (v850 != v851);
              }
              else
              {
                v797 = 0;
              }
              v830 = (llvm::Value *)((char *)v830 + 40);
              if (v830 == v832)
                break;
              while (1)
              {
                v833 = *(_QWORD *)v830;
                if ((*(_QWORD *)v830 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  break;
                v830 = (llvm::Value *)((char *)v830 + 40);
                if (v830 == v832)
                  goto LABEL_1587;
              }
            }
            while (v830 != v832);
LABEL_1587:
            v828 = LODWORD(v1195[0]);
            v816 = (llvm::Value *)v1193;
            v789 = v1146;
            v829 = v1121;
            if (!LODWORD(v1195[0]))
              goto LABEL_1594;
          }
        }
        else
        {
          v797 = 0;
          v816 = v829;
          v789 = v1146;
          if (!v828)
            goto LABEL_1594;
        }
        v882 = 40 * v828;
        v883 = (char *)v816 + 24;
        do
        {
          if ((*((_QWORD *)v883 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v884 = (char *)*((_QWORD *)v883 - 2);
            if (v883 != v884)
              free(v884);
          }
          v883 += 40;
          v882 -= 40;
        }
        while (v882);
        v816 = v829;
        goto LABEL_1594;
      }
LABEL_1599:
      if (v788 != &v1190)
        free(v788);
      v735 = (uint64_t)v1108;
    }
  }
  v1155 = &__src.u64[1];
  __src.i64[0] = 0x100000000;
  v1159.i32[3] = 0;
  v1157 = 0uLL;
  v1158.i32[0] = 0;
  v1159.i8[8] = 0;
  v1158.i64[1] = 0;
  v1159.i64[0] = v735;
  sub_1C53BA620((uint64_t)&v1155, 0);
  v885 = (llvm *)*((_QWORD *)v1108 + 10);
  if (v885 == v1112)
  {
    v886 = 0;
  }
  else
  {
    v886 = 0;
    do
    {
      v887 = (_QWORD *)((char *)v885 - 24);
      v1147 = v885;
      if (!v885)
        v887 = 0;
      v888 = v887 + 5;
      v889 = (_QWORD *)v887[6];
      while (v889 != v888)
      {
        v890 = v889;
        v889 = (_QWORD *)v889[1];
        if (v890)
          v891 = (uint64_t)(v890 - 3);
        else
          v891 = 0;
        v892 = sub_1C50A0300(v891);
        if (!v892)
          v891 = 0;
        if (v890 && v892)
        {
          v1179 = &v1181;
          v1180 = (void *)0x400000000;
          llvm::DbgVariableIntrinsic::location_ops(v891, &v1174);
          v893 = (uint64_t)v1174;
          v894 = v1175;
          if (v1174 != v1175)
          {
            v895 = 0;
            do
            {
              v896 = (unint64_t *)(v893 & 0xFFFFFFFFFFFFFFF8);
              v897 = v893 & 0xFFFFFFFFFFFFFFF8;
              if ((v893 & 4) != 0)
                v897 = *v896;
              v898 = *(_QWORD *)(v897 + 128);
              if (v898 && *(unsigned __int8 *)(v898 + 16) >= 0x1Cu)
              {
                if (v895 >= HIDWORD(v1180))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1179, (uint64_t)&v1181, v895 + 1, 8);
                  v895 = v1180;
                }
                *((_QWORD *)v1179 + v895) = v898;
                v895 = (_DWORD)v1180 + 1;
                LODWORD(v1180) = (_DWORD)v1180 + 1;
              }
              if ((v893 & 4) != 0)
                v893 = (unint64_t)(v896 + 1) | 4;
              else
                v893 = (uint64_t)(v896 + 17);
            }
            while ((void *)v893 != v894);
            if (v895)
            {
              v899 = (const llvm::Value **)v1179;
              v900 = (const llvm::Value **)((char *)v1179 + 8 * v895);
              v901 = (_QWORD *)(v891 + 24);
              do
              {
                v902 = *v899;
                v903 = *((unsigned __int8 *)*v899 + 16);
                if ((v903 - 29) >= 0xB)
                {
                  if (v903 != 83)
                    goto LABEL_1642;
                  v904 = *(_QWORD *)(*((_QWORD *)v902 + 5) + 40);
                  if (v904)
                    v905 = v904 - 24;
                  else
                    v905 = 0;
                  if (*(unsigned __int8 *)(v905 + 16) - 29 >= 0xB)
                    v905 = 0;
                  v906 = *(unsigned __int8 *)(v905 + 16) - 38;
                  v181 = v906 > 0x38;
                  v907 = (1 << v906) & 0x100060000000001;
                  if (v181 || v907 == 0)
                  {
LABEL_1642:
                    if (!llvm::DominatorTree::dominates((llvm::DominatorTree *)&v1155, *v899, (const llvm::Instruction *)v891))
                    {
                      if (v1180 > 1)
                      {
                        sub_1C61DBDC8((llvm::DbgVariableIntrinsic *)v891);
                        break;
                      }
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v891 + 40) + 40, (uint64_t ***)v891);
                      v909 = *(_QWORD *)(v891 + 24);
                      v910 = *(_QWORD **)(v891 + 32);
                      *v910 = v909;
                      *(_QWORD *)(v909 + 8) = v910;
                      *v901 = 0;
                      *(_QWORD *)(v891 + 32) = 0;
                      v911 = *((_QWORD *)v902 + 5);
                      if (*((_BYTE *)v902 + 16) == 83)
                      {
                        v912 = v911 + 40;
                        for (i2 = *(_QWORD *)(v911 + 48); i2 != v912; i2 = *(_QWORD *)(i2 + 8))
                        {
                          v914 = i2 - 24;
                          if (!i2)
                            v914 = 0;
                          if (*(_BYTE *)(v914 + 16) != 83)
                          {
                            v915 = *(unsigned __int8 *)(i2 - 8) - 38;
                            v181 = v915 > 0x38;
                            v916 = (1 << v915) & 0x100060000000001;
                            if (v181 || v916 == 0)
                              v912 = i2;
                            else
                              v912 = *(_QWORD *)(i2 + 8);
                            break;
                          }
                        }
                        if (v912)
                          v918 = v912 - 24;
                        else
                          v918 = 0;
                        v919 = *(_QWORD *)(v918 + 40);
                        *(_QWORD *)(v891 + 40) = v919;
                        *(_WORD *)(v919 + 18) &= ~0x8000u;
                        if ((*(_BYTE *)(v891 + 23) & 0x10) != 0)
                        {
                          v922 = *(_QWORD *)(v919 + 56);
                          if (v922)
                          {
                            v923 = *(llvm::ValueSymbolTable **)(v922 + 104);
                            if (v923)
                              llvm::ValueSymbolTable::reinsertValue(v923, (llvm::Value *)v891);
                          }
                        }
                        v921 = *(_QWORD *)(v918 + 24);
                        v920 = (_QWORD *)(v918 + 24);
                        *(_QWORD *)(v891 + 24) = v921;
                        *(_QWORD *)(v891 + 32) = v920;
                        *(_QWORD *)(v921 + 8) = v901;
                        *v920 = v901;
                      }
                      else
                      {
                        sub_1C53DF664((_QWORD *)(v911 + 40), (uint64_t)v902 + 24, v891);
                      }
                      v886 = 1;
                    }
                  }
                }
                ++v899;
              }
              while (v899 != v900);
            }
          }
          if (v1179 != &v1181)
            free(v1179);
        }
      }
      v885 = (llvm *)*((_QWORD *)v1147 + 1);
    }
    while (v885 != v1112);
  }
  sub_1C4DC4E38(v1157.i64);
  if (v1155 != &__src.u64[1])
    free(v1155);
  v924 = v1105 | v886;
  v925 = (llvm *)*((_QWORD *)v1108 + 10);
  if (v925 == v1112)
  {
    v926 = 0;
  }
  else
  {
    v926 = 0;
    do
    {
      v927 = (_QWORD *)((char *)v925 - 24);
      if (!v925)
        v927 = 0;
      v928 = v927 + 5;
      for (i3 = (_QWORD *)v927[6]; ; i3 = (_QWORD *)i3[1])
      {
        if (i3 == v928)
          goto LABEL_1699;
        v930 = i3 - 3;
        if (!i3)
          v930 = 0;
        if (*((_BYTE *)v930 + 16) != 83)
          break;
      }
      v931 = *((unsigned __int8 *)i3 - 8) - 38;
      v181 = v931 > 0x38;
      v932 = (1 << v931) & 0x100060000000001;
      if (!v181 && v932 != 0)
        i3 = (_QWORD *)i3[1];
      if (v928 == i3)
      {
LABEL_1699:
        i3 = v928;
        goto LABEL_1700;
      }
      while (1)
      {
        v934 = i3 ? (uint64_t)(i3 - 3) : 0;
        if (!sub_1C4D99D08(v934) && !sub_1C509DDB0(v934))
          break;
        i3 = (_QWORD *)i3[1];
        if (i3 == v928)
          goto LABEL_1699;
      }
LABEL_1700:
      v935 = (_QWORD *)i3[1];
      if (v935 != v928)
      {
        v936 = (llvm::Instruction *)(i3 - 3);
        do
        {
          v937 = v935;
          v935 = (_QWORD *)v935[1];
          if (v937)
            v938 = (llvm::Instruction *)(v937 - 3);
          else
            v938 = 0;
          v939 = sub_1C509DDB0((uint64_t)v938);
          if (v937 && v939)
          {
            llvm::Instruction::moveBefore(v938, v936);
            v926 = 1;
          }
        }
        while (v935 != v928);
      }
      v925 = (llvm *)*((_QWORD *)v925 + 1);
    }
    while (v925 != v1112);
  }
  v4 = v924 | v926;
  return v4 & 1;
}

_QWORD *sub_1C5086564(_QWORD *result)
{
  uint64_t v1;
  int32x2_t ****v2;
  int32x2_t *v4;
  int32x2_t ****v5;
  __int32 v6;
  __int32 v7;
  uint64_t v8;
  _QWORD *v9;
  int32x2_t ****v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  int32x2_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v28;
  int32x2_t ****v29;
  int32x2_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int32x2_t *****v35;
  int32x2_t ****v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  int32x2_t *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t *v52;
  int32x2_t ****v53;
  int32x2_t *v54;

  v1 = result[1];
  v51 = v1 & 6;
  v52 = 0;
  v2 = (int32x2_t ****)result[3];
  v53 = v2;
  if (v2 != (int32x2_t ****)-8192 && v2 != (int32x2_t ****)-4096 && v2 != 0)
  {
    v52 = *(unint64_t **)(v1 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) = &v51;
    v51 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (v52)
      *v52 = *v52 & 7 | (unint64_t)&v52;
  }
  v4 = (int32x2_t *)result[4];
  v54 = v4;
  v5 = v53;
  v6 = v4[2].i32[0];
  if (v6)
  {
    v7 = v6 - 1;
    v8 = ((v53 >> 4) ^ (v53 >> 9)) & (v6 - 1);
    v9 = (_QWORD *)(*(_QWORD *)v4 + (v8 << 6));
    v10 = (int32x2_t ****)v9[3];
    if (v10 == v53)
    {
LABEL_10:
      v11 = v9[7];
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
      {
        v13 = v9[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v13 = v9[6];
        v14 = (unint64_t *)v9[6];
        if (v14)
        {
          *v14 = *v14 & 7 | v13;
        }
        else
        {
          v15 = v9[7];
          v16 = ***(int32x2_t ****)v15;
          v17 = (unint64_t)v16[303];
          if (v17 <= v13)
          {
            v18 = v16[305].u32[0];
            if (v17 + 16 * v18 > v13)
            {
              v19 = v18 - 1;
              LODWORD(v20) = v19 & ((v15 >> 4) ^ (v15 >> 9));
              v21 = (uint64_t *)(v17 + 16 * v20);
              v22 = *v21;
              if (v15 == *v21)
              {
LABEL_23:
                *v21 = -8192;
                v16[304] = vadd_s32(v16[304], (int32x2_t)0x1FFFFFFFFLL);
                v15 = v9[7];
              }
              else
              {
                v23 = 1;
                while (v22 != -4096)
                {
                  v24 = v20 + v23++;
                  v20 = v24 & v19;
                  v22 = *(_QWORD *)(v17 + 16 * v20);
                  if (v15 == v22)
                  {
                    v21 = (uint64_t *)(v17 + 16 * v20);
                    goto LABEL_23;
                  }
                }
              }
              *(_BYTE *)(v15 + 17) &= ~1u;
            }
          }
        }
        v5 = (int32x2_t ****)v9[3];
      }
      if (v5 != (int32x2_t ****)-8192)
      {
        if (v5 != (int32x2_t ****)-4096 && v5 != 0)
        {
          v39 = v9[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v39 = v9[2];
          v40 = (unint64_t *)v9[2];
          if (v40)
          {
            *v40 = *v40 & 7 | v39;
          }
          else
          {
            v41 = v9[3];
            v42 = ***(int32x2_t ****)v41;
            v43 = (unint64_t)v42[303];
            if (v43 <= v39)
            {
              v44 = v42[305].u32[0];
              if (v43 + 16 * v44 > v39)
              {
                v45 = v44 - 1;
                LODWORD(v46) = v45 & ((v41 >> 4) ^ (v41 >> 9));
                v47 = (uint64_t *)(v43 + 16 * v46);
                v48 = *v47;
                if (v41 == *v47)
                {
LABEL_62:
                  *v47 = -8192;
                  v42[304] = vadd_s32(v42[304], (int32x2_t)0x1FFFFFFFFLL);
                  v41 = v9[3];
                }
                else
                {
                  v49 = 1;
                  while (v48 != -4096)
                  {
                    v50 = v46 + v49++;
                    v46 = v50 & v45;
                    v48 = *(_QWORD *)(v43 + 16 * v46);
                    if (v41 == v48)
                    {
                      v47 = (uint64_t *)(v43 + 16 * v46);
                      goto LABEL_62;
                    }
                  }
                }
                *(_BYTE *)(v41 + 17) &= ~1u;
              }
            }
          }
        }
        v9[3] = -8192;
      }
      v9[4] = 0;
      v4[1] = vadd_s32(v4[1], (int32x2_t)0x1FFFFFFFFLL);
      v5 = v53;
    }
    else
    {
      v25 = 1;
      while (v10 != (int32x2_t ****)-4096)
      {
        v26 = v8 + v25++;
        v8 = v26 & v7;
        v9 = (_QWORD *)(*(_QWORD *)v4 + (v8 << 6));
        v10 = (int32x2_t ****)v9[3];
        if (v10 == v53)
          goto LABEL_10;
      }
    }
  }
  if (v5 != (int32x2_t ****)-8192 && v5 != (int32x2_t ****)-4096 && v5)
  {
    v28 = v51 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF8) = v52;
    if (v52)
    {
      *v52 = *v52 & 7 | v28;
    }
    else
    {
      v29 = v53;
      v30 = ***v53;
      v31 = (unint64_t)v30[303];
      if (v31 <= v28)
      {
        v32 = v30[305].u32[0];
        if (v31 + 16 * v32 > v28)
        {
          v33 = v32 - 1;
          LODWORD(v34) = v33 & ((v53 >> 4) ^ (v53 >> 9));
          v35 = (int32x2_t *****)(v31 + 16 * v34);
          v36 = *v35;
          if (v53 == *v35)
          {
LABEL_50:
            *v35 = (int32x2_t ****)-8192;
            v30[304] = vadd_s32(v30[304], (int32x2_t)0x1FFFFFFFFLL);
            v29 = v53;
          }
          else
          {
            v37 = 1;
            while (v36 != (int32x2_t ****)-4096)
            {
              v38 = v34 + v37++;
              v34 = v38 & v33;
              v36 = *(int32x2_t *****)(v31 + 16 * v34);
              if (v53 == v36)
              {
                v35 = (int32x2_t *****)(v31 + 16 * v34);
                goto LABEL_50;
              }
            }
          }
          *((_BYTE *)v29 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5086900(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = a1 + (v4 << 6);
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = a1 + (v4 << 6);
        v6 = *(_QWORD *)(v5 + 24);
        v7 = 1;
        if (v6 == a3)
          goto LABEL_4;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_4:
  *a4 = v5;
  return v7;
}

uint64_t sub_1C5086994(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  _DWORD *v7;
  uint64_t v8;

  v3 = a1[2];
  v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[3] > v4 >> 3)
  {
    goto LABEL_3;
  }
  v7 = a1;
  sub_1C5086A50((uint64_t)a1, v4);
  v8 = 0;
  sub_1C5086900(*(_QWORD *)v7, v7[4], *(_QWORD *)(a2 + 24), &v8);
  a1 = v7;
  a3 = v8;
LABEL_3:
  ++a1[2];
  if (*(_QWORD *)(a3 + 24) != -4096)
    --a1[3];
  return a3;
}

char *sub_1C5086A50(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5086B24(a1, v4, &v4[8 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = v10 << 6;
    v12 = result + 16;
    do
    {
      *v12 = 0;
      v12[1] = -4096;
      *(v12 - 2) = &off_1E8140658;
      *(v12 - 1) = 2;
      v12[2] = 0;
      v12 += 8;
      v11 -= 64;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5086B24(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  int32x2_t *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  int32x2_t *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  BOOL v50;
  int v51;
  unint64_t v52;
  _QWORD *v53;
  int32x2_t v54;
  _QWORD *v55;
  uint64_t v56;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = v3 << 6;
    v5 = (_QWORD *)(*(_QWORD *)result + 16);
    do
    {
      *v5 = 0;
      v5[1] = -4096;
      *(v5 - 2) = &off_1E8140658;
      *(v5 - 1) = 2;
      v5[2] = 0;
      v5 += 8;
      v4 -= 64;
    }
    while (v4);
  }
  if (a2 != a3)
  {
    v6 = (int32x2_t)0x1FFFFFFFFLL;
    do
    {
      v7 = a2[3];
      if ((v7 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v22 = *(_DWORD *)(result + 16) - 1;
        v23 = v22 & ((v7 >> 4) ^ (v7 >> 9));
        v24 = (_QWORD *)(*(_QWORD *)result + (v23 << 6));
        v25 = v24[3];
        if (v7 != v25)
        {
          v31 = 0;
          v32 = 1;
          while (v25 != -4096)
          {
            if (v31)
              v50 = 0;
            else
              v50 = v25 == -8192;
            if (v50)
              v31 = v24;
            v51 = v23 + v32++;
            v23 = v51 & v22;
            v24 = (_QWORD *)(*(_QWORD *)result + (v23 << 6));
            v25 = v24[3];
            if (v7 == v25)
              goto LABEL_23;
          }
          if (v31)
            v24 = v31;
          v33 = v24[3];
          if (v33 != v7)
          {
            v34 = v33 == -4096 || v33 == 0;
            if (!v34 && v33 != -8192)
            {
              v38 = v24[1] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v38 = v24[2];
              v39 = (unint64_t *)v24[2];
              if (v39)
              {
                *v39 = *v39 & 7 | v38;
              }
              else
              {
                v40 = v24[3];
                v41 = ***(int32x2_t ****)v40;
                v42 = (unint64_t)v41[303];
                if (v42 <= v38)
                {
                  v43 = v41[305].u32[0];
                  if (v42 + 16 * v43 > v38)
                  {
                    v44 = v43 - 1;
                    LODWORD(v45) = v44 & ((v40 >> 4) ^ (v40 >> 9));
                    v46 = (uint64_t *)(v42 + 16 * v45);
                    v47 = *v46;
                    if (v40 == *v46)
                    {
LABEL_55:
                      *v46 = -8192;
                      v41[304] = vadd_s32(v41[304], v6);
                      v40 = v24[3];
                    }
                    else
                    {
                      v48 = 1;
                      while (v47 != -4096)
                      {
                        v49 = v45 + v48++;
                        v45 = v49 & v44;
                        v47 = *(_QWORD *)(v42 + 16 * v45);
                        if (v40 == v47)
                        {
                          v46 = (uint64_t *)(v42 + 16 * v45);
                          goto LABEL_55;
                        }
                      }
                    }
                    *(_BYTE *)(v40 + 17) &= ~1u;
                  }
                }
              }
              v7 = a2[3];
            }
            v24[3] = v7;
            if (v7 != -4096 && v7 != -8192 && v7 != 0)
            {
              v36 = a2[1];
              v24[2] = *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF8) = v24 + 1;
              v24[1] = v36 & 0xFFFFFFFFFFFFFFF8 | v24[1] & 7;
              v37 = (unint64_t *)v24[2];
              if (v37)
                *v37 = *v37 & 7 | (unint64_t)(v24 + 2);
            }
          }
        }
LABEL_23:
        v26 = a2[4];
        v24[5] = 6;
        v27 = v24 + 5;
        *(v27 - 1) = v26;
        v27[1] = 0;
        v28 = (unint64_t)(v27 + 1);
        v29 = a2[7];
        v27[2] = v29;
        if (v29)
        {
          if (v29 != -8192 && v29 != -4096)
          {
            v52 = a2[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v28 = *(_QWORD *)v52;
            *(_QWORD *)v52 = v27;
            *v27 = v52 | 6;
            if (*(_QWORD *)v28)
              **(_QWORD **)v28 = **(_QWORD **)v28 & 7 | v28;
          }
        }
        ++*(_DWORD *)(result + 8);
        v30 = a2[7];
        if (v30 && v30 != -8192 && v30 != -4096)
        {
          v56 = result;
          v55 = a3;
          v53 = a2;
          v54 = v6;
          llvm::ValueHandleBase::RemoveFromUseList(a2 + 5);
          v6 = v54;
          result = v56;
          a2 = v53;
          a3 = v55;
        }
      }
      v8 = a2[3];
      if (v8 != -4096 && v8 != -8192 && v8 != 0)
      {
        v10 = a2[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v10 = a2[2];
        v11 = (unint64_t *)a2[2];
        if (v11)
        {
          *v11 = *v11 & 7 | v10;
        }
        else
        {
          v12 = a2[3];
          v13 = ***(int32x2_t ****)v12;
          v14 = (unint64_t)v13[303];
          if (v14 <= v10)
          {
            v15 = v13[305].u32[0];
            if (v14 + 16 * v15 > v10)
            {
              v16 = v15 - 1;
              LODWORD(v17) = v16 & ((v12 >> 4) ^ (v12 >> 9));
              v18 = (uint64_t *)(v14 + 16 * v17);
              v19 = *v18;
              if (v12 == *v18)
              {
LABEL_20:
                *v18 = -8192;
                v13[304] = vadd_s32(v13[304], v6);
                v12 = a2[3];
              }
              else
              {
                v20 = 1;
                while (v19 != -4096)
                {
                  v21 = v17 + v20++;
                  v17 = v21 & v16;
                  v19 = *(_QWORD *)(v14 + 16 * v17);
                  if (v12 == v19)
                  {
                    v18 = (uint64_t *)(v14 + 16 * v17);
                    goto LABEL_20;
                  }
                }
              }
              *(_BYTE *)(v12 + 17) &= ~1u;
            }
          }
        }
      }
      a2 += 8;
    }
    while (a2 != a3);
  }
  return result;
}

_QWORD *sub_1C5086F04(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = a2[1] & 6;
  result[1] = v3;
  v4 = result + 1;
  result[2] = 0;
  v5 = (unint64_t)(result + 2);
  v6 = a2[3];
  result[3] = v6;
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
  {
    v8 = a2[1] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v5 = *(_QWORD *)v8;
    *(_QWORD *)v8 = v4;
    *v4 = v8 | v3;
    if (*(_QWORD *)v5)
      **(_QWORD **)v5 = **(_QWORD **)v5 & 7 | v5;
  }
  *result = &off_1E8140658;
  result[4] = a2[4];
  result[5] = 6;
  v9 = result + 5;
  result[6] = 0;
  v10 = (unint64_t)(result + 6);
  v11 = a3[2];
  result[7] = v11;
  if (v11 != -8192 && v11 != -4096 && v11)
  {
    v12 = *a3 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v12;
    *(_QWORD *)v12 = v9;
    *v9 = v12 | 6;
    if (*(_QWORD *)v10)
      **(_QWORD **)v10 = **(_QWORD **)v10 & 7 | v10;
  }
  return result;
}

void sub_1C5086FE8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v4 - 66);
        if (v4 - 512 != v6)
          free(v6);
        v4 -= 536;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1C5087068(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  int32x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;

  v1 = *((unsigned int *)result + 4);
  if ((_DWORD)v1)
  {
    v2 = (_QWORD *)*result;
    v3 = (_QWORD *)(*result + (v1 << 6));
    do
    {
      v4 = v2[3];
      if ((v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v5 = v2[7];
        if (v5)
        {
          if (v5 != -8192 && v5 != -4096)
          {
            v6 = v2[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v6 = v2[6];
            v7 = (unint64_t *)v2[6];
            if (v7)
            {
              *v7 = *v7 & 7 | v6;
            }
            else
            {
              v8 = v2[7];
              v9 = ***(int32x2_t ****)v8;
              v10 = (unint64_t)v9[303];
              if (v10 <= v6)
              {
                v11 = v9[305].u32[0];
                if (v10 + 16 * v11 > v6)
                {
                  v12 = v11 - 1;
                  LODWORD(v13) = v12 & ((v8 >> 4) ^ (v8 >> 9));
                  v14 = (uint64_t *)(v10 + 16 * v13);
                  v15 = *v14;
                  if (v8 == *v14)
                  {
LABEL_18:
                    *v14 = -8192;
                    v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
                    v8 = v2[7];
                  }
                  else
                  {
                    v16 = 1;
                    while (v15 != -4096)
                    {
                      v17 = v13 + v16++;
                      v13 = v17 & v12;
                      v15 = *(_QWORD *)(v10 + 16 * v13);
                      if (v8 == v15)
                      {
                        v14 = (uint64_t *)(v10 + 16 * v13);
                        goto LABEL_18;
                      }
                    }
                  }
                  *(_BYTE *)(v8 + 17) &= ~1u;
                }
              }
            }
            v4 = v2[3];
          }
        }
      }
      if (v4 != -4096 && v4 != -8192 && v4 != 0)
        result = llvm::ValueHandleBase::RemoveFromUseList(v2 + 1);
      v2 += 8;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_1C50871CC(uint64_t a1, llvm::BasicBlock *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  int v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int32x2_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  _QWORD *v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t SinglePredecessor;
  _QWORD ***v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  int v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v47;
  uint64_t *v48;
  char *v50;
  uint64_t v51;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  int32x2_t *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  _QWORD ***v66;
  int32x2_t *v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD ***v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  llvm *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v85;
  unint64_t *v86;
  _QWORD ***v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD v90[48];
  _QWORD **v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  _QWORD v96[50];

  v96[48] = *MEMORY[0x1E0C80C00];
  v2 = (char *)v96;
  v94 = (char *)v96;
  v95 = 0x1000000000;
  v3 = a1 + 72;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  if (v4 == a1 + 72)
  {
    v15 = 0;
  }
  else
  {
    do
    {
      v5 = v4 - 24;
      if (!v4)
        v5 = 0;
      v88 = 6;
      v89 = 0;
      v90[0] = v5;
      if (v5 != -8192)
      {
        v6 = v5 == -4096 || v5 == 0;
        if (!v6)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v88);
      }
      v7 = (_QWORD *)sub_1C5087E70((unsigned int *)&v94, (unint64_t)&v88, 1);
      v8 = v95;
      v9 = &v94[24 * v95];
      *(_QWORD *)v9 = 6;
      *((_QWORD *)v9 + 1) = 0;
      v10 = (unint64_t)(v9 + 8);
      v11 = v7[2];
      *((_QWORD *)v9 + 2) = v11;
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
      {
        v13 = *v7 & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)v9 + 1) = *(_QWORD *)v13;
        *(_QWORD *)v13 = v9;
        *(_QWORD *)v9 = v13 | 6;
        v14 = (uint64_t *)*((_QWORD *)v9 + 1);
        if (v14)
          *v14 = *v14 & 7 | v10;
      }
      v15 = v8 + 1;
      LODWORD(v95) = v15;
      if (v90[0] != -8192 && v90[0] != -4096 && v90[0])
      {
        v16 = v88 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v88 & 0xFFFFFFFFFFFFFFF8) = v89;
        if (v89)
        {
          *(_QWORD *)v89 = *(_QWORD *)v89 & 7 | v16;
        }
        else
        {
          v17 = v90[0];
          v18 = ***(int32x2_t ****)v90[0];
          v19 = (unint64_t)v18[303];
          if (v19 <= v16)
          {
            v20 = v18[305].u32[0];
            if (v19 + 16 * v20 > v16)
            {
              v21 = v20 - 1;
              LODWORD(v22) = v21 & ((LODWORD(v90[0]) >> 4) ^ (LODWORD(v90[0]) >> 9));
              v23 = (uint64_t *)(v19 + 16 * v22);
              v24 = *v23;
              if (v90[0] == *v23)
              {
LABEL_28:
                *v23 = -8192;
                v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
                v17 = v90[0];
              }
              else
              {
                v25 = 1;
                while (v24 != -4096)
                {
                  v26 = v22 + v25++;
                  v22 = v26 & v21;
                  v24 = *(_QWORD *)(v19 + 16 * v22);
                  if (v90[0] == v24)
                  {
                    v23 = (uint64_t *)(v19 + 16 * v22);
                    goto LABEL_28;
                  }
                }
              }
              *(_BYTE *)(v17 + 17) &= ~1u;
            }
          }
        }
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
    v2 = v94;
  }
  v27 = v90;
  v88 = (unint64_t)v90;
  v89 = 0x1000000000;
  v92 = 0;
  v93 = 0;
  v91 = &v92;
  v28 = 0;
  if (!v15)
  {
    v76 = 0;
    goto LABEL_117;
  }
  v29 = &v2[24 * v15];
  do
  {
    v30 = *((_QWORD *)v2 + 2);
    if (!v30)
      goto LABEL_42;
    SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(*((llvm::BasicBlock **)v2 + 2));
    if (!SinglePredecessor || SinglePredecessor == v30)
      goto LABEL_42;
    if ((*(_WORD *)(v30 + 18) & 0x7FFF) != 0)
      goto LABEL_42;
    v33 = (_QWORD ***)SinglePredecessor;
    v34 = *(_QWORD *)(SinglePredecessor + 40);
    if (v34 == SinglePredecessor + 40)
      goto LABEL_42;
    v35 = v34 - 24;
    if (!v34)
      v35 = 0;
    v36 = *(unsigned __int8 *)(v35 + 16) - 40;
    if (v36 < 0xFFFFFFF5)
      v35 = 0;
    if (!v34)
      goto LABEL_42;
    v37 = *(_BYTE *)(v35 + 16) == 30 && v36 >= 0xFFFFFFF5;
    if (!v37 || (*(_DWORD *)(v35 + 20) & 0x7FFFFFF) == 3)
      goto LABEL_42;
    llvm::MergeBlockIntoPredecessor(v30, 0, 0, 0, 0, 0);
    v85 = 6;
    v86 = 0;
    v87 = v33;
    if (v33 != (_QWORD ***)-8192 && v33 != (_QWORD ***)-4096 && v33)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v85);
    if (!v93)
    {
      v38 = v89;
      if (!(_DWORD)v89)
        goto LABEL_69;
      v39 = 24 * v89;
      v40 = (char *)(v88 + 16);
      while (*(_QWORD ****)v40 != v87)
      {
        v40 += 24;
        v39 -= 24;
        if (!v39)
          goto LABEL_68;
      }
      if (v39)
        goto LABEL_77;
LABEL_68:
      if (v89 < 0x10)
      {
LABEL_69:
        v41 = (_QWORD *)sub_1C5087E70((unsigned int *)&v88, (unint64_t)&v85, 1);
        v42 = v89;
        v43 = (char *)(v88 + 24 * v89);
        *(_QWORD *)v43 = 6;
        *((_QWORD *)v43 + 1) = 0;
        v44 = (unint64_t)(v43 + 8);
        v45 = v41[2];
        *((_QWORD *)v43 + 2) = v45;
        if (v45 != -8192 && v45 != -4096 && v45 != 0)
        {
          v47 = *v41 & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)v43 + 1) = *(_QWORD *)v47;
          *(_QWORD *)v47 = v43;
          *(_QWORD *)v43 = v47 | 6;
          v48 = (uint64_t *)*((_QWORD *)v43 + 1);
          if (v48)
            *v48 = *v48 & 7 | v44;
        }
        LODWORD(v89) = v42 + 1;
        goto LABEL_77;
      }
      do
      {
        sub_1C509F890((uint64_t *)&v91, *(_QWORD *)(v88 + 24 * v38 - 8), *(_QWORD *)(v88 + 24 * v38 - 24), *(_QWORD *)(v88 + 24 * v38 - 8));
        v38 = v89 - 1;
        LODWORD(v89) = v38;
        v50 = (char *)(v88 + 24 * v38);
        v51 = *((_QWORD *)v50 + 2);
        if (v51 != -8192 && v51 != -4096 && v51 != 0)
        {
          v53 = *(_QWORD *)v50 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v53 = *((_QWORD *)v50 + 1);
          v54 = (unint64_t *)*((_QWORD *)v50 + 1);
          if (v54)
          {
            *v54 = *v54 & 7 | v53;
          }
          else
          {
            v55 = *((_QWORD *)v50 + 2);
            v56 = ***(int32x2_t ****)v55;
            v57 = (unint64_t)v56[303];
            if (v57 <= v53)
            {
              v58 = v56[305].u32[0];
              if (v57 + 16 * v58 > v53)
              {
                v59 = v58 - 1;
                LODWORD(v60) = v59 & ((v55 >> 4) ^ (v55 >> 9));
                v61 = (uint64_t *)(v57 + 16 * v60);
                v62 = *v61;
                if (v55 == *v61)
                {
LABEL_100:
                  *v61 = -8192;
                  v56[304] = vadd_s32(v56[304], (int32x2_t)0x1FFFFFFFFLL);
                  v55 = *((_QWORD *)v50 + 2);
                }
                else
                {
                  v63 = 1;
                  while (v62 != -4096)
                  {
                    v64 = v60 + v63++;
                    v60 = v64 & v59;
                    v62 = *(_QWORD *)(v57 + 16 * v60);
                    if (v55 == v62)
                    {
                      v61 = (uint64_t *)(v57 + 16 * v60);
                      goto LABEL_100;
                    }
                  }
                }
                *(_BYTE *)(v55 + 17) &= ~1u;
              }
            }
          }
        }
      }
      while (v38);
    }
    sub_1C509F890((uint64_t *)&v91, (unint64_t)v87, v85, (uint64_t)v87);
LABEL_77:
    if (v87 != (_QWORD ***)-8192 && v87 != (_QWORD ***)-4096 && v87 != 0)
    {
      v65 = v85 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v85 & 0xFFFFFFFFFFFFFFF8) = v86;
      if (v86)
      {
        *v86 = *v86 & 7 | v65;
      }
      else
      {
        v66 = v87;
        v67 = (int32x2_t *)***v87;
        v68 = (unint64_t)v67[303];
        if (v68 <= v65)
        {
          v69 = v67[305].u32[0];
          if (v68 + 16 * v69 > v65)
          {
            v70 = v69 - 1;
            LODWORD(v71) = v70 & ((v87 >> 4) ^ (v87 >> 9));
            v72 = (_QWORD *)(v68 + 16 * v71);
            v73 = (_QWORD ***)*v72;
            if (v87 == (_QWORD ***)*v72)
            {
LABEL_111:
              *v72 = -8192;
              v67[304] = vadd_s32(v67[304], (int32x2_t)0x1FFFFFFFFLL);
              v66 = v87;
            }
            else
            {
              v74 = 1;
              while (v73 != (_QWORD ***)-4096)
              {
                v75 = v71 + v74++;
                v71 = v75 & v70;
                v73 = *(_QWORD ****)(v68 + 16 * v71);
                if (v87 == v73)
                {
                  v72 = (_QWORD *)(v68 + 16 * v71);
                  goto LABEL_111;
                }
              }
            }
            *((_BYTE *)v66 + 17) &= ~1u;
          }
        }
      }
    }
    v28 = 1;
LABEL_42:
    v2 += 24;
  }
  while (v2 != v29);
  v27 = (_QWORD *)v88;
  v76 = v89;
  if (v93)
  {
    v77 = 0;
    v78 = (uint64_t)v91;
    goto LABEL_118;
  }
LABEL_117:
  v77 = 1;
  v78 = (uint64_t)v27;
LABEL_118:
  v79 = &v27[3 * v76];
  while (2)
  {
    if (v77)
    {
      if ((_QWORD *)v78 == v79)
        break;
      goto LABEL_123;
    }
    if ((_QWORD **)v78 != &v92)
    {
LABEL_123:
      if (v77)
        v80 = 16;
      else
        v80 = 48;
      v81 = *(llvm **)(v78 + v80);
      if (v81)
        llvm::RemoveRedundantDbgInstrs(v81, a2);
      if (v77)
      {
        v78 += 24;
      }
      else
      {
        v82 = *(_QWORD **)(v78 + 8);
        v83 = v78;
        if (v82)
        {
          do
          {
            v78 = (uint64_t)v82;
            v82 = (_QWORD *)*v82;
          }
          while (v82);
        }
        else
        {
          do
          {
            v78 = *(_QWORD *)(v83 + 16);
            v6 = *(_QWORD *)v78 == v83;
            v83 = v78;
          }
          while (!v6);
        }
      }
      continue;
    }
    break;
  }
  sub_1C509F944(v92);
  sub_1C50880D4((char **)&v88);
  sub_1C50880D4(&v94);
  return v28 & 1;
}

BOOL sub_1C50878C8(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 v9;

  sub_1C509FAE4(a1, a2, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 80);
    if (v6 >= *(_DWORD *)(a1 + 84))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 80);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 80);
  }
  return v4 != 0;
}

_QWORD *sub_1C5087954(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t *v54;
  uint64_t j;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  BOOL v75;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  int v80;
  _BYTE v81[128];

  v2 = a1 + 5;
  v1 = (_QWORD *)a1[5];
  if (v1 == a1 + 5)
    return 0;
  v3 = 0;
  if (v1)
    v4 = v1 - 3;
  else
    v4 = 0;
  v5 = *((unsigned __int8 *)v4 + 16) - 40;
  if (v5 >= 0xFFFFFFF5)
    v6 = v4;
  else
    v6 = 0;
  if (!v1)
    return v3;
  if (*((_BYTE *)v6 + 16) != 30 || v5 < 0xFFFFFFF5)
    return v3;
  if ((*((_DWORD *)v6 + 5) & 0x7FFFFFF) != 1)
    return 0;
  v9 = v6 + 3;
  if (v6 + 3 != (_QWORD *)a1[6])
  {
    do
    {
      v9 = (_QWORD *)*v9;
      if (v9)
        v10 = (uint64_t)(v9 - 3);
      else
        v10 = 0;
    }
    while (sub_1C4D99D08(v10) && v9 != (_QWORD *)a1[6]);
    if (!sub_1C4D99D08(v10) && *(_BYTE *)(v10 + 16) != 83)
      return 0;
  }
  v3 = (_QWORD *)*(v6 - 4);
  if (v3 == a1)
    return 0;
  if ((_QWORD *)*v2 != v2)
  {
    for (i = a1[6]; ; i = *(_QWORD *)(v12 + 32))
    {
      v12 = i - 24;
      if (i)
        v13 = i - 24;
      else
        v13 = 0;
      if (!i || *(_BYTE *)(v13 + 16) != 83)
        goto LABEL_52;
      v14 = *(_QWORD *)(i - 16);
      if (v14)
        break;
LABEL_49:
      ;
    }
    while (1)
    {
      v15 = *(_QWORD *)(v14 + 24);
      if (*(_QWORD **)(v15 + 40) != v3 || *(_BYTE *)(v15 + 16) != 83)
        return 0;
      v16 = *(_DWORD *)(v15 + 20);
      v17 = v16 & 0x7FFFFFF;
      if ((v16 & 0x7FFFFFF) != 0)
      {
        v18 = 0;
        v19 = 0;
        v20 = 32 * v17;
        v21 = v15 - 32 * v17;
        do
        {
          v22 = v21;
          if ((v16 & 0x40000000) != 0)
            v22 = *(_QWORD *)(v15 - 8);
          v23 = *(_QWORD *)(v22 + v19);
          v24 = v23 && *(unsigned __int8 *)(v23 + 16) >= 0x1Cu;
          if (v24 && *(_QWORD **)(v23 + 40) == a1)
          {
            v25 = v21;
            if ((v16 & 0x40000000) != 0)
              v25 = *(_QWORD *)(v15 - 8);
            if (*(_QWORD **)(v25 + 32 * *(unsigned int *)(v15 + 60) + v18) != a1)
              return 0;
          }
          v19 += 32;
          v18 += 8;
        }
        while (v20 != v19);
      }
      v14 = *(_QWORD *)(v14 + 8);
      if (!v14)
        goto LABEL_49;
    }
  }
LABEL_52:
  v27 = v3[6];
  v28 = v27 - 24;
  if (!v27)
    v28 = 0;
  v29 = *(unsigned __int8 *)(v28 + 16);
  if (v29 == 83)
    v30 = v28;
  else
    v30 = 0;
  if (v27 && v29 == 83)
  {
    v77 = v81;
    v78 = v81;
    v79 = 16;
    v80 = 0;
    v31 = a1[6];
    v32 = v31 - 24;
    if (!v31)
      v32 = 0;
    v33 = *(unsigned __int8 *)(v32 + 16);
    if (v33 == 83)
      v34 = v32;
    else
      v34 = 0;
    if (v31 && v33 == 83)
    {
      v35 = *(_DWORD *)(v34 + 20) & 0x7FFFFFF;
      if ((_DWORD)v35)
      {
        v36 = 0;
        v37 = 8 * v35;
        do
        {
          v38 = *(_DWORD *)(v34 + 20);
          if ((v38 & 0x40000000) != 0)
            v39 = *(_QWORD *)(v34 - 8);
          else
            v39 = v34 - 32 * (v38 & 0x7FFFFFF);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v77, *(_QWORD *)(v39 + 32 * *(unsigned int *)(v34 + 60) + v36));
          v36 += 8;
        }
        while (v37 != v36);
      }
    }
    else
    {
      v40 = a1[1];
      if (v40)
      {
        while (1)
        {
          v41 = *(_QWORD *)(v40 + 24);
          v42 = *(unsigned __int8 *)(v41 + 16);
          v43 = v41 && v42 >= 0x1C;
          if (v43 && v42 - 29 <= 0xA)
            break;
          v40 = *(_QWORD *)(v40 + 8);
          if (!v40)
            goto LABEL_83;
        }
LABEL_143:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v77, *(_QWORD *)(v41 + 40));
        while (1)
        {
          v40 = *(_QWORD *)(v40 + 8);
          if (!v40)
            break;
          v41 = *(_QWORD *)(v40 + 24);
          v74 = *(unsigned __int8 *)(v41 + 16);
          if (v41)
            v75 = v74 >= 0x1C;
          else
            v75 = 0;
          if (v75 && v74 - 29 < 0xB)
            goto LABEL_143;
        }
      }
    }
LABEL_83:
    v45 = *(_DWORD *)(v30 + 20);
    v46 = v45 & 0x7FFFFFF;
    if ((v45 & 0x7FFFFFF) != 0)
    {
      v47 = 0;
      while (1)
      {
        v48 = *(_DWORD *)(v30 + 20);
        if ((v48 & 0x40000000) != 0)
          v49 = *(_QWORD *)(v30 - 8);
        else
          v49 = v30 - 32 * (v48 & 0x7FFFFFF);
        v50 = *(_QWORD *)(v49 + 32 * *(unsigned int *)(v30 + 60) + 8 * v47);
        v51 = sub_1C477672C((uint64_t)&v77, v50);
        v53 = v77;
        v52 = v78;
        v54 = (uint64_t *)((char *)&v79 + 4);
        if (v78 != v77)
          v54 = &v79;
        if (v51 != (_QWORD *)&v78[8 * *(unsigned int *)v54] && (_QWORD *)v3[5] != v3 + 5)
          break;
LABEL_134:
        if (++v47 == v46)
        {
          v73 = 1;
          goto LABEL_138;
        }
      }
      for (j = v3[6]; ; j = *(_QWORD *)(v56 + 32))
      {
        v56 = j - 24;
        if (j)
          v57 = j - 24;
        else
          v57 = 0;
        if (!j || *(_BYTE *)(v57 + 16) != 83)
          goto LABEL_134;
        v58 = *(_DWORD *)(j - 4);
        v59 = v58 & 0x7FFFFFF;
        if ((v58 & 0x7FFFFFF) != 0)
        {
          v60 = 0;
          while (1)
          {
            v61 = v56 - 32 * v59;
            if ((v58 & 0x40000000) != 0)
              v61 = *(_QWORD *)(v56 - 8);
            if (*(_QWORD *)(v61 + 32 * *(unsigned int *)(v56 + 60) + 8 * v60) == v50)
              break;
            if (v59 == ++v60)
              goto LABEL_104;
          }
        }
        else
        {
LABEL_104:
          LODWORD(v60) = -1;
        }
        if ((v58 & 0x40000000) != 0)
        {
          v62 = *(_QWORD *)(v56 - 8);
          if (!(_DWORD)v59)
            goto LABEL_114;
        }
        else
        {
          v62 = v56 - 32 * v59;
          if (!(_DWORD)v59)
          {
LABEL_114:
            LODWORD(v63) = -1;
            goto LABEL_115;
          }
        }
        v63 = 0;
        while (1)
        {
          v64 = v56 - 32 * v59;
          if ((v58 & 0x40000000) != 0)
            v64 = *(_QWORD *)(v56 - 8);
          if (*(_QWORD **)(v64 + 32 * *(unsigned int *)(v56 + 60) + 8 * v63) == a1)
            break;
          if (v59 == ++v63)
            goto LABEL_114;
        }
LABEL_115:
        if ((v58 & 0x40000000) != 0)
          v65 = *(_QWORD *)(v56 - 8);
        else
          v65 = v56 - 32 * v59;
        v66 = *(_QWORD *)(v62 + 32 * v60);
        v67 = *(_QWORD *)(v65 + 32 * v63);
        if (v67 && *(_BYTE *)(v67 + 16) == 83 && *(_QWORD **)(v67 + 40) == a1)
        {
          v68 = *(_DWORD *)(v67 + 20);
          v69 = v68 & 0x7FFFFFF;
          if ((v68 & 0x7FFFFFF) != 0)
          {
            v70 = 0;
            while (1)
            {
              v71 = v67 - 32 * v69;
              if ((v68 & 0x40000000) != 0)
                v71 = *(_QWORD *)(v67 - 8);
              if (*(_QWORD *)(v71 + 32 * *(unsigned int *)(v67 + 60) + 8 * v70) == v50)
                break;
              if (v69 == ++v70)
                goto LABEL_126;
            }
          }
          else
          {
LABEL_126:
            LODWORD(v70) = -1;
          }
          if ((v68 & 0x40000000) != 0)
            v72 = *(_QWORD *)(v67 - 8);
          else
            v72 = v67 - 32 * v69;
          v67 = *(_QWORD *)(v72 + 32 * v70);
        }
        if (v66 != v67)
        {
          v73 = 0;
          goto LABEL_138;
        }
      }
    }
    v73 = 1;
    v53 = v77;
    v52 = v78;
LABEL_138:
    if (v52 != v53)
      free(v52);
    if (!v73)
      return 0;
  }
  return v3;
}

unint64_t sub_1C5087E70(unsigned int *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = a1[2];
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)a1[3])
  {
    v7 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C5087ED8(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C5087ED8(a1, v5);
    }
  }
  return a2;
}

void sub_1C5087ED8(unsigned int *a1, unint64_t a2)
{
  unint64_t *v3;
  unsigned int v4;
  unint64_t v5;

  v5 = 0;
  v3 = (unint64_t *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a2, 24, &v5);
  sub_1C5087F44(a1, v3);
  v4 = v5;
  if (*(unsigned int **)a1 != a1 + 4)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  a1[3] = v4;
}

unsigned int *sub_1C5087F44(unsigned int *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  int32x2_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;

  v2 = result[2];
  if ((_DWORD)v2)
  {
    v3 = (unint64_t *)(*(_QWORD *)result + 16);
    v4 = (unint64_t)(a2 + 1);
    v5 = 24 * v2;
    do
    {
      *a2 = 6;
      a2[1] = 0;
      v6 = *v3;
      a2[2] = *v3;
      if (v6 != -8192 && v6 != -4096 && v6 != 0)
      {
        v8 = *(v3 - 2) & 0xFFFFFFFFFFFFFFF8;
        a2[1] = *(_QWORD *)v8;
        *(_QWORD *)v8 = a2;
        *a2 = v8 | 6;
        v9 = (uint64_t *)a2[1];
        if (v9)
          *v9 = *v9 & 7 | v4;
      }
      a2 += 3;
      v3 += 3;
      v4 += 24;
      v5 -= 24;
    }
    while (v5);
    v10 = *(_QWORD *)result;
    v11 = *(_QWORD *)result + 24 * v2;
    do
    {
      v12 = *(_QWORD *)(v11 - 8);
      if (v12 != -8192 && v12 != -4096 && v12 != 0)
      {
        v14 = *(_QWORD *)(v11 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v14 = *(_QWORD *)(v11 - 16);
        v15 = *(unint64_t **)(v11 - 16);
        if (v15)
        {
          *v15 = *v15 & 7 | v14;
        }
        else
        {
          v16 = *(_QWORD *)(v11 - 8);
          v17 = ***(int32x2_t ****)v16;
          v18 = (unint64_t)v17[303];
          if (v18 <= v14)
          {
            v19 = v17[305].u32[0];
            if (v18 + 16 * v19 > v14)
            {
              v20 = v19 - 1;
              LODWORD(v21) = v20 & ((v16 >> 4) ^ (v16 >> 9));
              v22 = (uint64_t *)(v18 + 16 * v21);
              v23 = *v22;
              if (v16 == *v22)
              {
LABEL_28:
                *v22 = -8192;
                v17[304] = vadd_s32(v17[304], (int32x2_t)0x1FFFFFFFFLL);
                v16 = *(_QWORD *)(v11 - 8);
              }
              else
              {
                v24 = 1;
                while (v23 != -4096)
                {
                  v25 = v21 + v24++;
                  v21 = v25 & v20;
                  v23 = *(_QWORD *)(v18 + 16 * v21);
                  if (v16 == v23)
                  {
                    v22 = (uint64_t *)(v18 + 16 * v21);
                    goto LABEL_28;
                  }
                }
              }
              *(_BYTE *)(v16 + 17) &= ~1u;
            }
          }
        }
      }
      v11 -= 24;
    }
    while (v11 != v10);
  }
  return result;
}

char **sub_1C50880D4(char **a1)
{
  char *v2;
  int v3;
  char *v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = &v2[24 * v3];
    do
    {
      v5 = *((_QWORD *)v4 - 1);
      if (v5 != -8192 && v5 != -4096 && v5 != 0)
      {
        v7 = *((_QWORD *)v4 - 3) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v7 = *((_QWORD *)v4 - 2);
        v8 = (unint64_t *)*((_QWORD *)v4 - 2);
        if (v8)
        {
          *v8 = *v8 & 7 | v7;
        }
        else
        {
          v9 = *((_QWORD *)v4 - 1);
          v10 = ***(int32x2_t ****)v9;
          v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              v15 = (uint64_t *)(v11 + 16 * v14);
              v16 = *v15;
              if (v9 == *v15)
              {
LABEL_16:
                *v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                v9 = *((_QWORD *)v4 - 1);
              }
              else
              {
                v17 = 1;
                while (v16 != -4096)
                {
                  v18 = v14 + v17++;
                  v14 = v18 & v13;
                  v16 = *(_QWORD *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_16;
                  }
                }
              }
              *(_BYTE *)(v9 + 17) &= ~1u;
            }
          }
        }
      }
      v4 -= 24;
    }
    while (v4 != v2);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

BOOL sub_1C5088210(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  BOOL v3;

  v2 = a2[16];
  v3 = v2 < 0x1C || v2 - 81 >= 2;
  return !v3 || sub_1C5088268(a1 + 1, a2) || sub_1C48491B0(a1 + 3, a2);
}

BOOL sub_1C5088268(uint64_t a1, unsigned __int8 *a2)
{
  _BOOL8 result;
  unsigned int v3;
  int v4;
  unsigned __int8 *v5;

  result = 0;
  if (a2)
  {
    v3 = a2[16];
    if (v3 >= 0x1C)
    {
      v4 = *(_DWORD *)(*(_QWORD *)a2 + 8);
      if ((v4 & 0xFE) == 0x12)
        v4 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
      result = 0;
      if (v4 == 269)
      {
        if (v3 == 56)
          return 1;
        if (v3 == 85)
        {
          v5 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
          if (v5)
          {
            if (v5[16] <= 0x14u && (llvm::Constant::isNullValue((llvm::Constant *)v5) & 1) != 0)
              return 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C50882EC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  llvm::EVT ***v4;
  llvm::SmallPtrSetImplBase *v6;
  _QWORD *v7;
  llvm::Type *v8;
  llvm::DSOLocalEquivalent **v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v14;
  void *v15;
  int v16;
  unint64_t v17;
  llvm::EVT ***v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  llvm::EVT **v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  void *v33;
  unsigned __int8 v34;
  _QWORD **v35;
  _QWORD **v36;
  void *v37;
  uint64_t v38;
  _BOOL8 v39;
  void *v40;
  int v41;
  int v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t *v48;
  llvm::Constant *v49;
  llvm::UndefValue *v50;
  _QWORD *v51;
  llvm::ValueAsMetadata *v52;
  llvm::Value *v53;
  llvm::EVT **v54;
  llvm::EVT **v55;
  llvm::EVT **v56;
  char v57;
  llvm::EVT **v58;
  llvm::EVT ***v59;
  llvm::EVT **v60;
  uint64_t v61;
  unsigned int v62;
  char v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  uint64_t j;
  uint64_t v68;
  llvm::EVT ***v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v72;
  int v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  llvm::EVT **v81;
  unsigned __int8 **v82;
  unsigned __int8 *v83;
  llvm::EVT *v84;
  llvm::EVT ***v85;
  llvm::EVT **v86;
  llvm::EVT **v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  int v94;
  unint64_t ExtendedSizeInBits;
  int v96;
  int v97;
  uint64_t *v98;
  int v99;
  llvm::EVT **v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  llvm::EVT **v104;
  int v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  llvm::EVT *v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  void *v113;
  uint64_t *v114;
  int v115;
  llvm::EVT **v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  llvm::EVT **v120;
  int v121;
  int v122;
  uint64_t v123;
  llvm::EVT **v124;
  llvm::EVT **v125;
  void *v126;
  int v127;
  llvm *v128;
  uint64_t v129;
  uint64_t *v130;
  int v131;
  uint64_t **v132;
  uint64_t *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v150;
  int v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  uint64_t v156;
  unsigned int v157;
  BOOL v158;
  __int16 v159;
  int v160;
  llvm *v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  int v165;
  uint64_t *v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  llvm *v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  void **v181;
  _QWORD *v182;
  _QWORD *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  llvm *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  void **v192;
  char v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  unsigned int v197;
  int v198;
  unsigned __int8 *v199;
  unsigned __int8 *v200;
  int v201;
  llvm::ConstantInt **v202;
  int v203;
  uint64_t v204;
  llvm::Value **v205;
  uint64_t v206;
  int v207;
  void **v208;
  unsigned __int8 *v209;
  unsigned __int8 *v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  unsigned __int8 *v214;
  unsigned __int8 **v215;
  int v216;
  uint64_t v217;
  llvm *v218;
  llvm *v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int v222;
  const void *v223;
  unint64_t v224;
  unsigned int v225;
  void *v226;
  uint64_t v227;
  BOOL v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  _BOOL8 v233;
  uint64_t v234;
  int v235;
  llvm::EVT **v236;
  llvm::EVT **v237;
  llvm::EVT *v238;
  int v239;
  llvm::BasicBlock *v240;
  uint64_t SinglePredecessor;
  uint64_t v242;
  uint64_t v243;
  unsigned int v244;
  uint64_t v246;
  llvm::BasicBlock *v247;
  int v249;
  int v250;
  __int16 v251;
  llvm::EVT ***v252;
  llvm::EVT **v253;
  unsigned int v254;
  llvm::EVT *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  int v262;
  int v263;
  uint64_t v264;
  uint64_t v266;
  const char *v267;
  uint64_t v268;
  const char *v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  llvm::EVT *v273;
  _QWORD *v274;
  uint64_t v275;
  llvm::EVT **v276;
  int v277;
  llvm::EVT **v278;
  uint64_t v279;
  unsigned int v280;
  const char *v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;
  char v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  void *v291;
  unsigned int v292;
  const char *v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  BOOL v301;
  _QWORD **v302;
  unsigned int v303;
  _QWORD *v304;
  _QWORD *v305;
  unint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  void *v309;
  int v310;
  llvm::EVT ****v311;
  int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  int v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  char v324;
  int v325;
  int64_t v326;
  unint64_t v327;
  int v328;
  int v329;
  void *v330;
  uint64_t v331;
  llvm::EVT *v332;
  int v333;
  llvm::EVT *v334;
  uint64_t v335;
  llvm::APInt *v337;
  unsigned int v338;
  llvm::Value **v339;
  llvm::Value **v340;
  _QWORD *v341;
  uint64_t v342;
  int v343;
  llvm::EVT ***v344;
  llvm::EVT **v345;
  uint64_t v346;
  llvm::Value *v347;
  llvm::EVT **v348;
  unsigned __int8 **v349;
  unsigned __int8 *v350;
  llvm::Value *v351;
  uint64_t v352;
  llvm::Value ***v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  int v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  llvm::EVT **v371;
  llvm::EVT **v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  const char *v382;
  unint64_t v383;
  unint64_t v384;
  const char *v385;
  BOOL v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  _BOOL8 v392;
  uint64_t v393;
  int v394;
  uint64_t v395;
  llvm::ConstantInt *v396;
  _QWORD *v397;
  uint64_t *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  char v404;
  unint64_t *v405;
  uint64_t v406;
  _QWORD *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  char *v414;
  uint64_t v415;
  llvm *v416;
  uint64_t v417;
  uint64_t v418;
  int v419;
  void **v420;
  _QWORD *v421;
  _QWORD *v422;
  unint64_t v423;
  char *v424;
  uint64_t v425;
  char *v426;
  uint64_t v427;
  unint64_t *v428;
  unint64_t v429;
  uint64_t *v430;
  uint64_t v431;
  char *v432;
  uint64_t v433;
  int v434;
  uint64_t *v435;
  void *v436;
  uint64_t *v437;
  uint64_t v438;
  char v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unsigned int v444;
  int v445;
  void *v447;
  unsigned int v448;
  _QWORD *v449;
  void *v450;
  _QWORD *v451;
  int v452;
  BOOL v453;
  unsigned int v454;
  _QWORD *v455;
  uint64_t v456;
  char *v457;
  char *i;
  char *v459;
  unsigned int v460;
  uint64_t v461;
  _DWORD *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t *v468;
  uint64_t v469;
  uint64_t v470;
  llvm::EVT **v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  llvm::EVT **v476;
  unsigned __int8 v477;
  _BOOL4 v478;
  llvm::EVT **v479;
  llvm::EVT **v480;
  llvm::EVT ***v481;
  llvm::EVT **v482;
  int v483;
  int v484;
  llvm::EVT *v485;
  uint64_t v486;
  llvm::EVT **v487;
  uint64_t v488;
  _QWORD *v489;
  BOOL v490;
  uint64_t v491;
  uint64_t v492;
  int64_t v493;
  int v494;
  unint64_t v495;
  int v496;
  int v497;
  llvm::EVT **v498;
  unsigned __int8 v500;
  _QWORD *v502;
  llvm::EVT ***v503;
  _QWORD *v504;
  llvm::EVT *v505;
  llvm::EVT *m;
  _QWORD *v507;
  unsigned int v508;
  uint64_t v509;
  _QWORD *v511;
  uint64_t v512;
  char v513;
  llvm::Value *v514;
  llvm::Value *v515;
  llvm::EVT **v516;
  unsigned __int8 **v517;
  unsigned __int8 *v518;
  llvm::EVT *v519;
  llvm::EVT ***v520;
  llvm::EVT **v521;
  llvm::EVT **v522;
  _DWORD *v523;
  _DWORD *v524;
  llvm::Value *v525;
  int v526;
  uint64_t v527;
  llvm::EVT **v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  llvm::EVT ****v533;
  llvm::EVT ***v534;
  int v535;
  int v536;
  uint64_t v537;
  int v538;
  uint64_t v539;
  int v540;
  _QWORD *v541;
  BOOL v542;
  unsigned int v543;
  uint64_t v544;
  uint64_t v545;
  unsigned int v546;
  unsigned int v547;
  uint64_t v548;
  _QWORD *v549;
  uint64_t *v550;
  _QWORD *v551;
  unsigned __int8 *v552;
  llvm::Value *Select;
  llvm::EVT **v554;
  llvm::EVT **v555;
  void *v556;
  llvm::EVT **v557;
  llvm::EVT *v558;
  _QWORD *v559;
  llvm::ConstantInt ***v560;
  _QWORD *v561;
  unint64_t **v562;
  int v563;
  BOOL v564;
  llvm::EVT **v565;
  llvm::EVT **v566;
  llvm::EVT *v567;
  BOOL v568;
  llvm::EVT **v569;
  llvm::EVT **v570;
  int v571;
  uint64_t **v572;
  llvm::EVT ***v573;
  char *v574;
  llvm::EVT **v575;
  llvm::EVT **v576;
  unsigned __int8 *v577;
  unsigned __int8 *v578;
  unsigned __int8 **v579;
  unsigned __int8 *v580;
  unsigned __int8 *v581;
  llvm::EVT **v582;
  llvm::EVT **v583;
  llvm::EVT **v584;
  llvm::EVT **v585;
  uint64_t v586;
  llvm::EVT **v587;
  uint64_t v588;
  uint64_t *v589;
  char *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  _QWORD *v595;
  uint64_t v596;
  void *v597;
  uint64_t v598;
  _QWORD *v599;
  uint64_t v600;
  unsigned int v601;
  void *v602;
  _QWORD *v603;
  uint64_t v604;
  int v605;
  uint64_t v606;
  uint64_t v607;
  int v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  _QWORD *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  llvm::ValueSymbolTable *v617;
  int v618;
  unsigned int v619;
  uint64_t v620;
  int v621;
  uint64_t *v622;
  int v623;
  uint64_t v624;
  uint64_t v625;
  llvm::EVT **v626;
  uint64_t v627;
  llvm::FixedVectorType *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  void *v633;
  llvm::EVT *v634;
  llvm::EVT **v635;
  uint64_t v636;
  int v637;
  uint64_t v638;
  _QWORD ***v639;
  llvm::EVT **v640;
  unsigned int v641;
  llvm::EVT **v642;
  int v643;
  llvm::EVT **v644;
  int v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  int8x8_t *v650;
  _QWORD *v651;
  uint64_t v652;
  uint64_t v653;
  unsigned int v654;
  int v655;
  uint64_t v657;
  char *v658;
  uint64_t *v659;
  uint64_t v660;
  uint64_t v661;
  unint64_t v662;
  uint64_t ****v663;
  uint64_t ****v664;
  uint64_t ***v665;
  uint64_t **v666;
  uint64_t **v667;
  uint64_t *v668;
  uint64_t v669;
  llvm::EVT *v670;
  unint64_t v671;
  uint64_t v672;
  uint64_t v673;
  const char *v674;
  signed int v675;
  unsigned int v676;
  _DWORD *v677;
  _DWORD *v678;
  char *v679;
  _QWORD *v680;
  llvm::Value *v681;
  int v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t *v688;
  uint64_t v689;
  uint64_t v690;
  _DWORD *v691;
  _DWORD *v692;
  int v693;
  llvm *v694;
  uint64_t v695;
  unint64_t v696;
  llvm::EVT **v697;
  BOOL v698;
  uint64_t v699;
  const llvm::APInt *v700;
  llvm::ValueHandleBase *v701;
  llvm::Value *v702;
  int v703;
  _DWORD *v704;
  uint64_t v705;
  llvm::EVT **v706;
  llvm *v707;
  uint64_t k;
  llvm::ValueAsMetadata *v709;
  int v710;
  _QWORD *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  llvm::ValueAsMetadata *v715;
  uint64_t v716;
  _QWORD *v717;
  void *v718;
  llvm::EVT **v719;
  uint64_t *v720;
  uint64_t *v721;
  BOOL v722;
  unint64_t EVT;
  uint64_t v724;
  uint64_t v725;
  llvm::EVT ***v726;
  unint64_t v727;
  uint64_t v728;
  void *v729;
  llvm::EVT *v730;
  llvm::EVT **v731;
  llvm::EVT **v732;
  unsigned __int8 *v733;
  uint64_t v734;
  unsigned __int8 *v735;
  uint64_t v736;
  llvm::EVT **v737;
  llvm::EVT **v738;
  uint64_t v739;
  unsigned __int8 *v740;
  int v741;
  BOOL v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  __int128 v746;
  _QWORD *v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  int v752;
  uint64_t v753;
  int v754;
  unsigned int v755;
  llvm::EVT ****v756;
  llvm::EVT ***v757;
  llvm::EVT ****v758;
  int v759;
  BOOL v760;
  unsigned int v761;
  uint64_t v762;
  _QWORD *v763;
  uint64_t v764;
  _QWORD *v765;
  unint64_t v766;
  unint64_t v767;
  unint64_t v768;
  unint64_t v769;
  uint64_t v770;
  unsigned int v771;
  uint64_t v773;
  uint64_t v774;
  uint64_t *v775;
  uint64_t *v776;
  uint64_t v777;
  uint64_t *v778;
  uint64_t BlockFreq;
  uint64_t *v780;
  uint64_t *v781;
  int v782;
  llvm::EVT ***v783;
  int v784;
  uint64_t v785;
  uint64_t v786;
  int v787;
  uint64_t v788;
  uint64_t v789;
  llvm::EVT **v790;
  uint64_t v791;
  uint64_t v792;
  llvm::EVT **v793;
  llvm::EVT *v794;
  unsigned int v795;
  int v796;
  uint64_t v797;
  _QWORD *v798;
  uint64_t v799;
  _QWORD *v800;
  unsigned int v801;
  int v802;
  uint64_t v804;
  int v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  int v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  llvm::EVT **v814;
  llvm::EVT **v815;
  llvm::EVT **v816;
  unsigned __int8 **v817;
  unsigned __int8 *v818;
  int v819;
  llvm::EVT ***v820;
  llvm::EVT **v821;
  llvm::EVT ****v822;
  llvm::EVT **v823;
  uint64_t v824;
  uint64_t v825;
  int v826;
  llvm::EVT ***v827;
  uint64_t v828;
  llvm::EVT **v829;
  const llvm::APInt *v830;
  llvm::ValueHandleBase *v831;
  int v832;
  llvm::EVT ***v833;
  llvm::ValueHandleBase **v834;
  llvm::ValueHandleBase ***v835;
  llvm::EVT **v836;
  llvm::EVT **v837;
  llvm::EVT ***v838;
  llvm::ValueHandleBase *v839;
  llvm::EVT **v840;
  int v841;
  uint64_t v842;
  uint64_t v843;
  llvm::EVT *v844;
  llvm::ValueSymbolTable *v845;
  uint64_t v846;
  uint64_t v847;
  llvm::EVT *v848;
  char *v849;
  uint64_t v850;
  unsigned int v851;
  uint64_t v852;
  int v853;
  BOOL v854;
  uint64_t v855;
  unint64_t v856;
  char *v857;
  char *v858;
  char *v859;
  uint64_t v860;
  char *v861;
  uint64_t v862;
  uint64_t v863;
  unint64_t v864;
  void *v865;
  uint64_t v866;
  unint64_t *v867;
  unint64_t v868;
  unint64_t *v869;
  unint64_t v870;
  unint64_t v871;
  unint64_t v872;
  _BOOL4 v873;
  unint64_t v874;
  int v875;
  const llvm::APInt *v876;
  BOOL v877;
  BOOL v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  llvm::EVT ****v882;
  uint64_t v883;
  _QWORD *v884;
  _QWORD *v885;
  uint64_t v886;
  llvm::EVT **v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  unint64_t v891;
  void *v892;
  uint64_t v893;
  unint64_t *v894;
  unint64_t v895;
  unint64_t *v896;
  unint64_t v897;
  unint64_t v898;
  unint64_t v899;
  _BOOL4 v900;
  unint64_t v901;
  llvm::Value **v902;
  uint64_t v903;
  llvm::Value ***v904;
  uint64_t v905;
  llvm::Value *v906;
  llvm::Value ****v907;
  llvm::Value *v908;
  llvm *v909;
  _DWORD *v910;
  _DWORD *v911;
  int v912;
  uint64_t v913;
  uint64_t v914;
  unsigned __int8 *v915;
  unsigned __int8 *v916;
  llvm::Type *v917;
  unsigned __int8 *VectorSplat;
  unsigned __int8 *v919;
  uint64_t *v920;
  void (**v921)(void);
  int v922;
  unsigned __int8 *v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  int v928;
  uint8x8_t v929;
  uint64_t v930;
  unsigned int v931;
  BOOL v932;
  llvm::BasicBlock *v933;
  __int16 v934;
  int v935;
  int v936;
  int8x8_t *v937;
  unint64_t v938;
  int8x8_t v939;
  uint8x8_t v940;
  __int16 v941;
  int v942;
  int64_t v943;
  unint64_t v944;
  int v945;
  uint64_t v946;
  uint64_t v947;
  unsigned int v948;
  BOOL v949;
  unint64_t v950;
  unsigned int v951;
  void *v952;
  int v953;
  uint64_t v954;
  int v955;
  BOOL v956;
  void *v957;
  void *v958;
  int v959;
  uint64_t v960;
  uint64_t v961;
  unsigned int v962;
  unsigned int v964;
  uint64_t v965;
  uint64_t *v967;
  uint64_t v968;
  _QWORD *v969;
  uint64_t v970;
  uint64_t v971;
  llvm::Instruction *v972;
  llvm::Instruction *v973;
  llvm *v974;
  uint64_t v975;
  uint64_t v976;
  _QWORD *v977;
  uint64_t v978;
  unsigned int v979;
  uint64_t v980;
  uint64_t v981;
  char *v982;
  _QWORD *v983;
  unsigned __int8 *v984;
  _QWORD *v985;
  unsigned __int8 *v986;
  unsigned __int8 *v987;
  _QWORD *v988;
  uint64_t v989;
  unsigned int v990;
  uint64_t v991;
  uint64_t v992;
  char *v993;
  void *v994;
  unsigned __int8 *v995;
  void **v996;
  unsigned __int8 *v997;
  unsigned __int8 *v998;
  llvm::EVT *v999;
  uint64_t v1000;
  unsigned int v1001;
  uint64_t v1002;
  uint64_t v1003;
  char *v1004;
  llvm::EVT **v1005;
  unsigned __int8 *v1006;
  void **v1007;
  unsigned __int8 *v1008;
  unsigned __int8 *v1009;
  llvm::BasicBlock *v1010;
  llvm::BasicBlock *v1011;
  _QWORD *v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  llvm::EVT ****v1017;
  llvm::EVT ***v1018;
  int v1019;
  int v1020;
  llvm::EVT ****v1021;
  llvm::EVT ***v1022;
  _DWORD *v1023;
  _DWORD *v1024;
  _QWORD *v1025;
  int v1026;
  llvm::EVT ***v1027;
  char *v1028;
  uint64_t v1029;
  uint64_t v1030;
  char *v1031;
  llvm::Value *v1032;
  llvm *v1033;
  uint64_t v1034;
  uint64_t v1035;
  llvm::Value *v1036;
  uint64_t v1037;
  uint64_t *v1038;
  _QWORD *v1039;
  _QWORD *v1040;
  llvm::Value *v1041;
  char *v1042;
  uint64_t v1043;
  _QWORD *v1044;
  _QWORD *v1045;
  _QWORD *v1046;
  uint64_t *v1047;
  uint64_t v1048;
  _QWORD *v1049;
  uint64_t *v1050;
  _QWORD *v1051;
  uint64_t *v1052;
  uint64_t v1053;
  _QWORD *v1054;
  uint64_t *v1055;
  llvm *v1056;
  unsigned __int8 *v1057;
  llvm **v1058;
  unsigned __int8 *v1059;
  unsigned __int8 *v1060;
  uint64_t v1061;
  _QWORD *v1062;
  _QWORD *v1063;
  uint64_t *v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  llvm::ValueSymbolTable *v1068;
  void *v1069;
  void *v1070;
  char *v1071;
  char *v1072;
  unsigned __int8 **v1073;
  int v1074;
  unsigned __int8 *v1075;
  unsigned __int8 *v1076;
  unsigned __int8 *v1077;
  uint64_t v1078;
  llvm::Value **v1079;
  llvm::Value *FCmpHelper;
  char *v1081;
  llvm::Value **v1082;
  llvm::Value *v1083;
  unint64_t v1084;
  unint64_t v1085;
  char v1086;
  uint64_t v1087;
  _BOOL4 v1088;
  char v1089;
  llvm::EVT **v1090;
  int v1091;
  uint64_t v1092;
  uint64_t *v1093;
  int v1094;
  llvm::ConstantInt *v1095;
  llvm::ConstantInt **v1096;
  llvm *v1097;
  char v1098;
  uint64_t v1099;
  char *v1100;
  unint64_t v1101;
  char *v1102;
  uint64_t v1103;
  uint64_t *v1104;
  llvm::BasicBlock *v1105;
  llvm *v1106;
  _BYTE *v1107;
  llvm::EVT *****v1108;
  llvm *v1109;
  llvm::SmallPtrSetImplBase *__p;
  llvm::SmallPtrSetImplBase *__pa;
  _QWORD *__pb;
  llvm::BasicBlock *__pc;
  char *__pd;
  unsigned __int8 *v1115;
  _QWORD v1116[2];
  void *__dst;
  unsigned int v1118;
  llvm *v1119;
  uint64_t v1120;
  _DWORD v1121[4];
  __int16 v1122;
  llvm *v1123;
  uint64_t v1124;
  _QWORD v1125[8];
  void *p_s2;
  __int128 v1127;
  llvm::Instruction *v1128;
  void *v1129[2];
  llvm::EVT **v1130;
  _QWORD ***v1131;
  llvm::EVT *v1132;
  void **v1133;
  _QWORD *v1134;
  llvm::EVT *v1135;
  int v1136;
  __int16 v1137;
  char v1138;
  uint64_t v1139;
  uint64_t v1140;
  void *v1141;
  _QWORD v1142[4];
  void *__s2;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t ****v1146;
  _QWORD v1147[6];
  void *v1148;
  uint64_t v1149;
  llvm::EVT ***v1150;
  void *v1151[2];
  uint64_t v1152;
  void **v1153;
  void **v1154;
  __int16 v1155;
  uint64_t v1156;
  _QWORD *v1157;
  uint64_t v1158;
  _QWORD v1159[3];

  v4 = (llvm::EVT ***)a2;
  v1159[1] = *MEMORY[0x1E0C80C00];
  v6 = (llvm::SmallPtrSetImplBase *)(a1 + 192);
  v7 = sub_1C477672C(a1 + 192, a2);
  v10 = *(_QWORD *)(a1 + 200);
  v11 = 208;
  if (v10 == *(_QWORD *)(a1 + 192))
    v11 = 212;
  if (v7 != (_QWORD *)(v10 + 8 * *(unsigned int *)(a1 + v11)))
    goto LABEL_4;
  v14 = *((unsigned __int8 *)v4 + 16);
  if (v4 && v14 == 83)
  {
    v15 = *(void **)(a1 + 72);
    v1151[0] = *(void **)(a1 + 720);
    v1151[1] = v15;
    v1154 = 0;
    v1152 = 0;
    v1153 = 0;
    v1155 = 257;
    v16 = *((_DWORD *)v4 + 5);
    if ((v16 & 0x40000000) != 0)
    {
      v18 = (llvm::EVT ***)*(v4 - 1);
      v17 = v16 & 0x7FFFFFF;
    }
    else
    {
      v17 = v16 & 0x7FFFFFF;
      v18 = &v4[-4 * v17];
    }
    p_s2 = (char *)&v1127 + 8;
    *(_QWORD *)&v1127 = 0x800000000;
    if (v17 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&p_s2, (uint64_t)&v1127 + 8, v17, 8);
      v19 = v1127;
      v21 = (char *)p_s2;
      v20 = v1127;
    }
    else
    {
      v19 = 0;
      if (!v17)
      {
        v25 = (char *)&v1127 + 8;
        goto LABEL_47;
      }
      v20 = 0;
      v21 = (char *)&v1127 + 8;
    }
    v22 = 32 * v17;
    v23 = &v21[8 * v20];
    do
    {
      v24 = *v18;
      v18 += 4;
      *(_QWORD *)v23 = v24;
      v23 += 8;
      v22 -= 32;
    }
    while (v22);
    v25 = (char *)p_s2;
LABEL_47:
    LODWORD(v1127) = v19 + v17;
    v50 = llvm::SimplifyInstructionWithOperands((llvm *)v4, (uint64_t)v25, (v19 + v17), (uint64_t)v1151, v8, v9);
    if (p_s2 == (char *)&v1127 + 8)
    {
      if (v50)
      {
LABEL_49:
        v51 = (_QWORD *)sub_1C5095410((uint64_t *)(a1 + 560), (uint64_t)v4);
        if (*(_QWORD **)(a1 + 592) != v51)
          sub_1C5095498((int32x2_t *)(a1 + 560), v51);
        v12 = 1;
        v52 = (llvm::ValueAsMetadata *)v4;
        v53 = v50;
        goto LABEL_52;
      }
    }
    else
    {
      free(p_s2);
      if (v50)
        goto LABEL_49;
    }
LABEL_4:
    v12 = 0;
    return v12 & 1;
  }
  if (v4 && (v14 - 79) >= 0xFFFFFFF3)
  {
    v26 = (uint64_t)*(v4 - 4);
    if (*(unsigned __int8 *)(v26 + 16) < 0x15u)
      goto LABEL_4;
    __p = v6;
    v27 = *(_QWORD *)(a1 + 48);
    v28 = *(_QWORD *)(a1 + 720);
    if (v14 == 78)
    {
      v29 = *(_QWORD *)v26;
      v30 = *(_DWORD *)(v29 + 8);
      if ((v30 & 0xFE) == 0x12)
        v30 = *(_DWORD *)(**(_QWORD **)(v29 + 16) + 8);
      v31 = v30 >> 8;
      v32 = *((_DWORD *)*v4 + 2);
      if ((v32 & 0xFE) == 0x12)
        v32 = *(_DWORD *)(*(_QWORD *)(*v4)[2] + 8);
      if (!(*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)v27 + 840))(*(_QWORD *)(a1 + 48), v31, v32 >> 8))goto LABEL_139;
      v26 = (uint64_t)*(v4 - 4);
    }
    v33 = (void *)sub_1C47A7FD0(v27, v28, *(_QWORD *)v26, 0);
    v34 = v33;
    v36 = v35;
    v1151[0] = v33;
    v1151[1] = v35;
    v37 = (void *)sub_1C47A7FD0(v27, v28, (uint64_t)*v4, 0);
    v39 = (_BOOL8)v37;
    v40 = (void *)v38;
    v41 = v37;
    if (v34)
    {
      v42 = 1;
      if (v34 - 2 >= 6)
        v42 = v34 - 15 < 0x3C || v34 - 120 < 0x20;
    }
    else
    {
      if (((_DWORD)v36[1] & 0xFE) == 0x12)
        v88 = *(unsigned __int8 *)(*v36[2] + 8);
      else
        v88 = *((_DWORD *)v36 + 2);
      v42 = v88 == 13;
    }
    if ((_BYTE)v37)
    {
      if (v37 - 2 < 6 || v37 - 15 <= 0x3B)
      {
        if ((v42 & 1) == 0)
          goto LABEL_139;
LABEL_119:
        if (v34 == v37)
        {
          if (v34 || v36 == (_QWORD **)v38)
          {
LABEL_131:
            llvm::TargetLoweringBase::getTypeConversion(v27, **v4, (_BOOL8)v1151[0], (uint64_t)v1151[1], (uint64_t)&p_s2);
            if (p_s2 == 1)
            {
              llvm::TargetLoweringBase::getTypeConversion(v27, **v4, (_BOOL8)v1151[0], (uint64_t)v1151[1], (uint64_t)&p_s2);
              *(_OWORD *)v1151 = v1127;
            }
            llvm::TargetLoweringBase::getTypeConversion(v27, **v4, v39, (uint64_t)v40, (uint64_t)&p_s2);
            if (p_s2 == 1)
            {
              llvm::TargetLoweringBase::getTypeConversion(v27, **v4, v39, (uint64_t)v40, (uint64_t)&p_s2);
              v41 = v1127;
              v40 = (void *)*((_QWORD *)&v1127 + 1);
            }
            if (LOBYTE(v1151[0]) == v41
              && (LOBYTE(v1151[0]) || v1151[1] == v40)
              && (sub_1C508F870((uint64_t)v4) & 1) != 0)
            {
              goto LABEL_167;
            }
LABEL_139:
            v97 = *((unsigned __int8 *)v4 + 16);
            if ((v97 - 66) > 5 || ((1 << (v97 - 66)) & 0x29) == 0)
              goto LABEL_150;
            v98 = *(uint64_t **)(a1 + 80);
            v99 = *((_DWORD *)v98 + 4);
            if (v99)
            {
              v100 = v4[5];
              v101 = *v98;
              v102 = v99 - 1;
              v103 = ((v100 >> 4) ^ (v100 >> 9)) & (v99 - 1);
              v104 = *(llvm::EVT ***)(v101 + 16 * v103);
              if (v100 == v104)
              {
LABEL_146:
                v107 = *(_QWORD *)(v101 + 16 * v103 + 8);
LABEL_148:
                if (((*(uint64_t (**)(_QWORD, llvm::EVT ***, uint64_t))(**(_QWORD **)(a1 + 48) + 1232))(*(_QWORD *)(a1 + 48), v4, v107) & 1) != 0)goto LABEL_167;
                v97 = *((unsigned __int8 *)v4 + 16);
LABEL_150:
                if ((v97 - 67) > 1)
                  goto LABEL_4;
                v108 = *(_QWORD *)(a1 + 48);
                v109 = **v4;
                v110 = sub_1C47A7FD0(v108, *(_QWORD *)(a1 + 720), (uint64_t)*v4, 0);
                llvm::TargetLoweringBase::getTypeConversion(v108, v109, v110, v111, (uint64_t)&p_s2);
                if (p_s2 == 2)
                {
                  v112 = sub_1C508F870((uint64_t)v4);
LABEL_699:
                  v12 = v112;
                  return v12 & 1;
                }
                v114 = *(uint64_t **)(a1 + 80);
                v115 = *((_DWORD *)v114 + 4);
                if (v115)
                {
                  v116 = v4[5];
                  v117 = *v114;
                  v118 = v115 - 1;
                  v119 = ((v116 >> 4) ^ (v116 >> 9)) & (v115 - 1);
                  v120 = *(llvm::EVT ***)(v117 + 16 * v119);
                  if (v116 == v120)
                  {
LABEL_161:
                    v123 = *(_QWORD *)(v117 + 16 * v119 + 8);
                    goto LABEL_166;
                  }
                  v121 = 1;
                  while (v120 != (llvm::EVT **)-4096)
                  {
                    v122 = v119 + v121++;
                    v119 = v122 & v118;
                    v120 = *(llvm::EVT ***)(v117 + 16 * v119);
                    if (v116 == v120)
                      goto LABEL_161;
                  }
                }
                v123 = 0;
LABEL_166:
                if (((*(uint64_t (**)(_QWORD, llvm::EVT ***, uint64_t))(**(_QWORD **)(a1 + 48) + 1232))(*(_QWORD *)(a1 + 48), v4, v123) & 1) != 0)goto LABEL_167;
                LOBYTE(v1116[0]) = 0;
                v127 = (*(uint64_t (**)(_QWORD, llvm::EVT ***, _QWORD *))(***(_QWORD ***)(a1 + 64) + 752))(**(_QWORD **)(a1 + 64), v4, v1116);
                v1151[0] = &v1152;
                v1151[1] = (void *)0x1000000000;
                v1156 = a1 + 376;
                v1148 = &v1150;
                v1119 = (llvm *)v1121;
                v1120 = 0x200000000;
                v1150 = v4;
                v1149 = 0x100000001;
                v1098 = sub_1C5095948(a1, (uint64_t)v1151, (uint64_t)&v1148, (uint64_t)&v1119, 0);
                if ((_DWORD)v1120)
                {
                  v128 = v1119;
                  v129 = 8 * v1120;
                  while (1)
                  {
                    v130 = *(uint64_t **)v128;
                    v131 = *(_DWORD *)(*(_QWORD *)v128 + 20);
                    v132 = (v131 & 0x40000000) != 0
                         ? (uint64_t **)*(v130 - 1)
                         : (uint64_t **)&v130[-4 * (v131 & 0x7FFFFFF)];
                    v133 = *v132;
                    if (*((_BYTE *)*v132 + 16) == 60)
                      break;
                    v128 = (llvm *)((char *)v128 + 8);
                    v129 -= 8;
                    if (!v129)
                      goto LABEL_264;
                  }
                  if ((v1098 & 1) != 0 || v133[5] != v130[5])
                  {
                    v135 = *(_QWORD *)(a1 + 48);
                    v136 = *(_QWORD *)(a1 + 720);
                    v137 = sub_1C47A7FD0(v135, v136, *v130, 0);
                    v138 = sub_1C47A7FD0(v135, v136, *v133, 0);
                    v139 = v133[1];
                    if (v139 && !*(_QWORD *)(v139 + 8))
                    {
                      v140 = v138;
                    }
                    else
                    {
                      v140 = v138;
                      if ((v138 && *(_QWORD *)(v135 + 8 * v138 + 96) || !v137 || !*(_QWORD *)(v135 + 8 * v137 + 96))
                        && !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v135 + 1144))(v135, *v130, *v133))
                      {
                        goto LABEL_264;
                      }
                    }
                    if (v137)
                      v158 = v140 == 0;
                    else
                      v158 = 1;
                    if (!v158)
                    {
                      v159 = *((_BYTE *)v130 + 16) == 67 ? -4096 : 3840;
                      if (((unsigned __int16)v159 & *(_WORD *)(v135 + 358 * v137 + 2 * v140 + 73672)) == 0)
                      {
                        if (LODWORD(v1151[1]))
                        {
                          v398 = (uint64_t *)v1151[0];
                          v399 = 8 * LODWORD(v1151[1]);
                          do
                          {
                            v400 = *v398++;
                            (*(void (**)(uint64_t))(*(_QWORD *)v400 + 24))(v400);
                            v399 -= 8;
                          }
                          while (v399);
                          if (LODWORD(v1151[1]))
                          {
                            v401 = 8 * LODWORD(v1151[1]);
                            v402 = (char *)v1151[0] - 8;
                            do
                            {
                              v403 = *(_QWORD *)&v402[v401];
                              *(_QWORD *)&v402[v401] = 0;
                              if (v403)
                                (*(void (**)(uint64_t))(*(_QWORD *)v403 + 8))(v403);
                              v401 -= 8;
                            }
                            while (v401);
                          }
                        }
                        LODWORD(v1151[1]) = 0;
                        llvm::Instruction::moveAfter((llvm::Instruction *)v130, (llvm::Instruction *)v133);
                        v404 = 1;
LABEL_774:
                        if (v1119 != (llvm *)v1121)
                          free(v1119);
                        if (v1148 != &v1150)
                          free(v1148);
                        v430 = (uint64_t *)v1151[0];
                        if (LODWORD(v1151[1]))
                        {
                          v431 = 8 * LODWORD(v1151[1]);
                          v432 = (char *)v1151[0] - 8;
                          do
                          {
                            v433 = *(_QWORD *)&v432[v431];
                            *(_QWORD *)&v432[v431] = 0;
                            if (v433)
                              (*(void (**)(uint64_t))(*(_QWORD *)v433 + 8))(v433);
                            v431 -= 8;
                          }
                          while (v431);
                          v430 = (uint64_t *)v1151[0];
                        }
                        if (v430 != &v1152)
                          free(v430);
                        v434 = *((_DWORD *)v130 + 5);
                        if ((v434 & 0x40000000) != 0)
                          v435 = (uint64_t *)*(v130 - 1);
                        else
                          v435 = &v130[-4 * (v434 & 0x7FFFFFF)];
                        v436 = (void *)v130[5];
                        v437 = (uint64_t *)*v435;
                        v438 = *(_QWORD *)(*v435 + 8);
                        if ((!v438 || *(_QWORD *)(v438 + 8))
                          && (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 1144))(*(_QWORD *)(a1 + 48), *v130, *v437)&& *((unsigned __int8 *)v437 + 16) >= 0x1Cu&& v436 == (void *)v437[5]&& (v440 = v130[1]) != 0)
                        {
                          while (*(void **)(*(_QWORD *)(v440 + 24) + 40) == v436)
                          {
                            v439 = 0;
                            v440 = *(_QWORD *)(v440 + 8);
                            if (!v440)
                              goto LABEL_795;
                          }
                          v441 = v437[1];
                          if (v441)
                          {
                            v442 = v437[1];
                            do
                            {
                              v443 = *(_QWORD *)(v442 + 24);
                              if (*(void **)(v443 + 40) != v436)
                              {
                                v444 = *(unsigned __int8 *)(v443 + 16) - 60;
                                v71 = v444 > 0x17;
                                v445 = (1 << v444) & 0x800003;
                                if (!v71 && v445 != 0)
                                  goto LABEL_794;
                              }
                              v442 = *(_QWORD *)(v442 + 8);
                            }
                            while (v442);
                            v439 = 0;
                            v1151[1] = 0;
                            v1151[0] = 0;
                            LODWORD(v1152) = 0;
                            while (1)
                            {
                              v447 = *(void **)(*(_QWORD *)(v441 + 24) + 40);
                              __s2 = v447;
                              if (v447 != v436)
                                break;
LABEL_851:
                              v441 = *(_QWORD *)(v441 + 8);
                              if (!v441)
                              {
                                v718 = v1151[0];
                                goto LABEL_1215;
                              }
                            }
                            if ((_DWORD)v1152)
                            {
                              v448 = (v1152 - 1) & ((v447 >> 4) ^ (v447 >> 9));
                              v449 = (char *)v1151[0] + 16 * v448;
                              v450 = (void *)*v449;
                              if (v447 == (void *)*v449)
                              {
LABEL_827:
                                v456 = v449[1];
                                if (!v456)
                                {
                                  v457 = (char *)__s2 + 40;
                                  for (i = (char *)*((_QWORD *)__s2 + 6); i != v457; i = (char *)*((_QWORD *)i + 1))
                                  {
                                    v459 = i - 24;
                                    if (!i)
                                      v459 = 0;
                                    if (v459[16] != 83)
                                    {
                                      v460 = *(i - 8) - 38;
                                      v71 = v460 > 0x38;
                                      v461 = (1 << v460) & 0x100060000000001;
                                      if (v71 || v461 == 0)
                                        v457 = i;
                                      else
                                        v457 = (char *)*((_QWORD *)i + 1);
                                      break;
                                    }
                                  }
                                  v463 = operator new(0x60uLL);
                                  v464 = (uint64_t)(v463 + 8);
                                  v463[13] = v463[13] & 0x38000000 | 1;
                                  *(_QWORD *)v463 = 0;
                                  *((_QWORD *)v463 + 1) = 0;
                                  *((_QWORD *)v463 + 2) = 0;
                                  *((_QWORD *)v463 + 3) = v463 + 8;
                                  v465 = *v437;
                                  if (v457)
                                    v466 = (uint64_t)(v457 - 24);
                                  else
                                    v466 = 0;
                                  LOWORD(v1129[0]) = 257;
                                  llvm::TruncInst::TruncInst((uint64_t)(v463 + 8), (uint64_t)v130, v465, (uint64_t)&p_s2, v466);
                                  v449[1] = v464;
                                  sub_1C4774094(__p, v464);
                                  v456 = v449[1];
                                }
                                if (*(_QWORD *)v441)
                                {
                                  **(_QWORD **)(v441 + 16) = *(_QWORD *)(v441 + 8);
                                  v467 = *(_QWORD *)(v441 + 8);
                                  if (v467)
                                    *(_QWORD *)(v467 + 16) = *(_QWORD *)(v441 + 16);
                                }
                                *(_QWORD *)v441 = v456;
                                if (v456)
                                {
                                  v470 = *(_QWORD *)(v456 + 8);
                                  v468 = (uint64_t *)(v456 + 8);
                                  v469 = v470;
                                  *(_QWORD *)(v441 + 8) = v470;
                                  if (v470)
                                    *(_QWORD *)(v469 + 16) = v441 + 8;
                                  *(_QWORD *)(v441 + 16) = v468;
                                  *v468 = v441;
                                }
                                v439 = 1;
                                goto LABEL_851;
                              }
                              v451 = 0;
                              v452 = 1;
                              while (v450 != (void *)-4096)
                              {
                                if (v451)
                                  v453 = 0;
                                else
                                  v453 = v450 == (void *)-8192;
                                if (v453)
                                  v451 = v449;
                                v454 = v448 + v452++;
                                v448 = v454 & (v1152 - 1);
                                v449 = (char *)v1151[0] + 16 * v448;
                                v450 = (void *)*v449;
                                if (v447 == (void *)*v449)
                                  goto LABEL_827;
                              }
                              if (v451)
                                v455 = v451;
                              else
                                v455 = v449;
                            }
                            else
                            {
                              v455 = 0;
                            }
                            v449 = sub_1C4775118((uint64_t)v1151, (uint64_t)&__s2, (uint64_t *)&__s2, v455);
                            *v449 = __s2;
                            v449[1] = 0;
                            goto LABEL_827;
                          }
                          v718 = 0;
                          v439 = 0;
                          v1151[1] = 0;
                          v1151[0] = 0;
                          LODWORD(v1152) = 0;
LABEL_1215:
                          MEMORY[0x1CAA32FB4](v718, 8);
                        }
                        else
                        {
LABEL_794:
                          v439 = 0;
                        }
LABEL_795:
                        v12 = v404 | v439;
                        return v12 & 1;
                      }
                    }
                  }
                }
LABEL_264:
                if (!v127)
                  goto LABEL_772;
                v160 = LOBYTE(v1116[0]);
                __s2 = v1147;
                v1144 = (uint64_t)v1147;
                v1145 = 1;
                LODWORD(v1146) = 0;
                if ((_DWORD)v1120)
                {
                  v161 = v1119;
                  v162 = 8 * v1120;
                  v163 = 1;
                  do
                  {
                    v164 = *(_QWORD *)v161;
                    v165 = *(_DWORD *)(*(_QWORD *)v161 + 20);
                    if ((v165 & 0x40000000) != 0)
                      v166 = *(uint64_t **)(v164 - 8);
                    else
                      v166 = (uint64_t *)(v164 - 32 * (v165 & 0x7FFFFFF));
                    v167 = *v166;
                    p_s2 = 0;
                    if (sub_1C6144BDC(*(_QWORD *)(a1 + 536), *(_DWORD *)(a1 + 552), v167, &p_s2))
                      v168 = p_s2 == (void *)(*(_QWORD *)(a1 + 536) + 16 * *(unsigned int *)(a1 + 552));
                    else
                      v168 = 1;
                    if (!v168)
                    {
                      v169 = *((_QWORD *)p_s2 + 1);
                      if (v169)
                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&__s2, v169);
                      v163 = 0;
                    }
                    v161 = (llvm *)((char *)v161 + 8);
                    v162 -= 8;
                  }
                  while (v162);
                  if ((v163 & 1) == 0 || v160 && (_DWORD)v1120 == 1)
                  {
                    if (LODWORD(v1151[1]))
                    {
                      v170 = (uint64_t *)v1151[0];
                      v171 = 8 * LODWORD(v1151[1]);
                      do
                      {
                        v172 = *v170++;
                        (*(void (**)(uint64_t))(*(_QWORD *)v172 + 24))(v172);
                        v171 -= 8;
                      }
                      while (v171);
                      if (LODWORD(v1151[1]))
                      {
                        v173 = 8 * LODWORD(v1151[1]);
                        v174 = (char *)v1151[0] - 8;
                        do
                        {
                          v175 = *(_QWORD *)&v174[v173];
                          *(_QWORD *)&v174[v173] = 0;
                          if (v175)
                            (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
                          v173 -= 8;
                        }
                        while (v173);
                      }
                    }
                    LODWORD(v1151[1]) = 0;
                    v176 = v1119;
                    v177 = v1120;
                    if ((_DWORD)v1120)
                    {
                      v178 = 8 * v1120;
                      do
                      {
                        v179 = *(_QWORD *)v176;
                        v180 = *(_DWORD *)(*(_QWORD *)v176 + 20);
                        if ((v180 & 0x40000000) != 0)
                          v181 = *(void ***)(v179 - 8);
                        else
                          v181 = (void **)(v179 - 32 * (v180 & 0x7FFFFFF));
                        p_s2 = *v181;
                        sub_1C6180A54(a1 + 536, (uint64_t *)&p_s2)[1] = 0;
                        v182 = sub_1C61DAA90(a1 + 688, (uint64_t *)&p_s2);
                        v183 = v182;
                        v184 = *((unsigned int *)v182 + 4);
                        if (v184 >= *((unsigned int *)v182 + 5))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v182 + 1), (uint64_t)(v182 + 3), v184 + 1, 8);
                          v184 = *((unsigned int *)v183 + 4);
                        }
                        *(_QWORD *)(v183[1] + 8 * v184) = v179;
                        ++*((_DWORD *)v183 + 4);
                        v176 = (llvm *)((char *)v176 + 8);
                        v178 -= 8;
                      }
                      while (v178);
                      v176 = v1119;
                      v177 = v1120;
                    }
                    v4 = (llvm::EVT ***)*((_QWORD *)v176 + v177 - 1);
                    LODWORD(v1120) = v177 - 1;
                    if ((v163 & 1) == 0 && HIDWORD(v1145) != (_DWORD)v1146)
                    {
                      if ((void *)v1144 == __s2)
                        v185 = HIDWORD(v1145);
                      else
                        v185 = v1145;
                      if ((_DWORD)v185)
                      {
                        v186 = 8 * v185;
                        v187 = (uint64_t *)v1144;
                        while ((unint64_t)*v187 >= 0xFFFFFFFFFFFFFFFELL)
                        {
                          ++v187;
                          v186 -= 8;
                          if (!v186)
                            goto LABEL_767;
                        }
                      }
                      else
                      {
                        v187 = (uint64_t *)v1144;
                      }
                      v405 = (unint64_t *)(v1144 + 8 * v185);
                      if (v187 != (uint64_t *)v405)
                      {
                        v406 = *v187;
LABEL_729:
                        v407 = sub_1C477672C(a1 + 376, v406);
                        v408 = *(_QWORD *)(a1 + 384);
                        if (v408 == *(_QWORD *)(a1 + 376))
                          v409 = 396;
                        else
                          v409 = 392;
                        if (v407 == (_QWORD *)(v408 + 8 * *(unsigned int *)(a1 + v409)))
                        {
                          p_s2 = (char *)&v1127 + 8;
                          *(_QWORD *)&v1127 = 0x1000000000;
                          v1142[2] = a1 + 376;
                          v1157 = v1159;
                          v1123 = (llvm *)v1125;
                          v1124 = 0x200000000;
                          v1159[0] = v406;
                          v1158 = 0x100000001;
                          v1086 = sub_1C5095948(a1, (uint64_t)&p_s2, (uint64_t)&v1157, (uint64_t)&v1123, 0);
                          if ((_DWORD)v1127)
                          {
                            v410 = (uint64_t *)p_s2;
                            v411 = 8 * v1127;
                            do
                            {
                              v412 = *v410++;
                              (*(void (**)(uint64_t))(*(_QWORD *)v412 + 24))(v412);
                              v411 -= 8;
                            }
                            while (v411);
                            if ((_DWORD)v1127)
                            {
                              v413 = 8 * v1127;
                              v414 = (char *)p_s2 - 8;
                              do
                              {
                                v415 = *(_QWORD *)&v414[v413];
                                *(_QWORD *)&v414[v413] = 0;
                                if (v415)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v415 + 8))(v415);
                                v413 -= 8;
                              }
                              while (v413);
                            }
                          }
                          LODWORD(v1127) = 0;
                          v416 = v1123;
                          if ((_DWORD)v1124)
                          {
                            v417 = 8 * v1124;
                            do
                            {
                              v418 = *(_QWORD *)v416;
                              v419 = *(_DWORD *)(*(_QWORD *)v416 + 20);
                              if ((v419 & 0x40000000) != 0)
                                v420 = *(void ***)(v418 - 8);
                              else
                                v420 = (void **)(v418 - 32 * (v419 & 0x7FFFFFF));
                              __dst = *v420;
                              sub_1C6180A54(a1 + 536, (uint64_t *)&__dst)[1] = 0;
                              v421 = sub_1C61DAA90(a1 + 688, (uint64_t *)&__dst);
                              v422 = v421;
                              v423 = *((unsigned int *)v421 + 4);
                              if (v423 >= *((unsigned int *)v421 + 5))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v421 + 1), (uint64_t)(v421 + 3), v423 + 1, 8);
                                v423 = *((unsigned int *)v422 + 4);
                              }
                              *(_QWORD *)(v422[1] + 8 * v423) = v418;
                              ++*((_DWORD *)v422 + 4);
                              v416 = (llvm *)((char *)v416 + 8);
                              v417 -= 8;
                            }
                            while (v417);
                            v416 = v1123;
                          }
                          if (v416 != (llvm *)v1125)
                            free(v416);
                          if (v1157 != v1159)
                            free(v1157);
                          v424 = (char *)p_s2;
                          if ((_DWORD)v1127)
                          {
                            v425 = 8 * v1127;
                            v426 = (char *)p_s2 - 8;
                            do
                            {
                              v427 = *(_QWORD *)&v426[v425];
                              *(_QWORD *)&v426[v425] = 0;
                              if (v427)
                                (*(void (**)(uint64_t))(*(_QWORD *)v427 + 8))(v427);
                              v425 -= 8;
                            }
                            while (v425);
                            v424 = (char *)p_s2;
                          }
                          if (v424 != (char *)&v1127 + 8)
                            free(v424);
                          v1098 |= v1086;
                        }
                        v428 = (unint64_t *)(v187 + 1);
                        while (v428 != v405)
                        {
                          v429 = *v428++;
                          v406 = v429;
                          if (v429 <= 0xFFFFFFFFFFFFFFFDLL)
                          {
                            v187 = (uint64_t *)(v428 - 1);
                            goto LABEL_729;
                          }
                        }
                      }
                    }
LABEL_767:
                    v193 = v1098;
LABEL_768:
                    if ((void *)v1144 != __s2)
                      free((void *)v1144);
                    if ((v193 & 1) != 0)
                    {
                      v404 = 1;
LABEL_773:
                      v130 = (uint64_t *)v4;
                      goto LABEL_774;
                    }
LABEL_772:
                    sub_1C5095E90((uint64_t)v1151, 0);
                    v404 = 0;
                    goto LABEL_773;
                  }
                  if ((_DWORD)v1120)
                  {
                    v188 = v1119;
                    v189 = 8 * v1120;
                    do
                    {
                      v190 = *(_QWORD *)v188;
                      v191 = *(_DWORD *)(*(_QWORD *)v188 + 20);
                      if ((v191 & 0x40000000) != 0)
                        v192 = *(void ***)(v190 - 8);
                      else
                        v192 = (void **)(v190 - 32 * (v191 & 0x7FFFFFF));
                      p_s2 = *v192;
                      sub_1C6180A54(a1 + 536, (uint64_t *)&p_s2)[1] = v4;
                      v188 = (llvm *)((char *)v188 + 8);
                      v189 -= 8;
                    }
                    while (v189);
                  }
                }
                v193 = 0;
                goto LABEL_768;
              }
              v105 = 1;
              while (v104 != (llvm::EVT **)-4096)
              {
                v106 = v103 + v105++;
                v103 = v106 & v102;
                v104 = *(llvm::EVT ***)(v101 + 16 * v103);
                if (v100 == v104)
                  goto LABEL_146;
              }
            }
            v107 = 0;
            goto LABEL_148;
          }
          p_s2 = v37;
          *(_QWORD *)&v1127 = v38;
        }
        else
        {
          p_s2 = v37;
          *(_QWORD *)&v1127 = v38;
          if (v34)
          {
            v91 = sub_1C47A8C74((unsigned __int8 *)v1151);
LABEL_126:
            v93 = v91;
            v94 = v92;
            if (v39)
              ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&p_s2);
            else
              ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&p_s2);
            if ((v94 != 1 || v96 == 1) && v93 < ExtendedSizeInBits)
              goto LABEL_139;
            goto LABEL_131;
          }
        }
        v91 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1151);
        goto LABEL_126;
      }
      v89 = v37 - 120 < 0x20;
    }
    else
    {
      if ((*(_DWORD *)(v38 + 8) & 0xFE) == 0x12)
        v90 = *(unsigned __int8 *)(**(_QWORD **)(v38 + 16) + 8);
      else
        v90 = *(_DWORD *)(v38 + 8);
      v89 = v90 == 13;
    }
    if (v42 != v89)
      goto LABEL_139;
    goto LABEL_119;
  }
  v1107 = a3;
  __pa = v6;
  if (!v4 || (v14 - 83) < 0xFFFFFFFE)
    goto LABEL_445;
  v43 = *(_BYTE **)(a1 + 48);
  if (v43[16])
    goto LABEL_34;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v43 + 24))(v43))
  {
    v14 = *((unsigned __int8 *)v4 + 16);
    if (v14 == 82)
      goto LABEL_34;
  }
  v1151[1] = 0;
  v1151[0] = 0;
  LODWORD(v1152) = 0;
  v56 = v4[1];
  if (!v56)
  {
    v113 = 0;
    goto LABEL_163;
  }
  v57 = 0;
  do
  {
    v58 = v56;
    v59 = (llvm::EVT ***)(v56 + 1);
    v56 = (llvm::EVT **)v56[1];
    v60 = v59[2];
    if (*((_BYTE *)v60 + 16) == 83)
      continue;
    v61 = (uint64_t)v60[5];
    if ((llvm::EVT **)v61 == v4[5])
      continue;
    p_s2 = 0;
    v62 = v1152;
    v63 = sub_1C509801C((uint64_t)v1151[0], v1152, v61, &p_s2);
    v64 = p_s2;
    if ((v63 & 1) == 0)
    {
      if (4 * LODWORD(v1151[1]) + 4 < 3 * v62)
      {
        if (v62 + ~LODWORD(v1151[1]) - HIDWORD(v1151[1]) > v62 >> 3)
          goto LABEL_64;
        v65 = v62;
      }
      else
      {
        v65 = 2 * v62;
      }
      sub_1C50980B0((uint64_t)v1151, v65);
      p_s2 = 0;
      sub_1C509801C((uint64_t)v1151[0], v1152, v61, &p_s2);
      v64 = p_s2;
LABEL_64:
      ++LODWORD(v1151[1]);
      if (*v64 != -4096)
        --HIDWORD(v1151[1]);
      *v64 = v61;
      v64[1] = 0;
LABEL_67:
      v66 = v61 + 40;
      for (j = *(_QWORD *)(v61 + 48); j != v66; j = *(_QWORD *)(j + 8))
      {
        v68 = j - 24;
        if (!j)
          v68 = 0;
        if (*(_BYTE *)(v68 + 16) != 83)
        {
          v70 = *(unsigned __int8 *)(j - 8) - 38;
          v71 = v70 > 0x38;
          v72 = (1 << v70) & 0x100060000000001;
          if (v71 || v72 == 0)
            v66 = j;
          else
            v66 = *(_QWORD *)(j + 8);
          break;
        }
      }
      v74 = *((unsigned __int8 *)v4 + 16) - 28;
      v75 = *((_WORD *)v4 + 9) & 0x3F;
      v76 = (uint64_t)*(v4 - 8);
      v77 = (uint64_t)*(v4 - 4);
      if (v66)
        v78 = v66 - 24;
      else
        v78 = 0;
      LOWORD(v1129[0]) = 257;
      v79 = llvm::CmpInst::Create(v74, v75, v76, v77, (uint64_t)&p_s2, v78);
      v64[1] = v79;
      v80 = v79;
      v81 = v4[6];
      __s2 = v81;
      if (v81)
        llvm::MetadataTracking::track((uint64_t)&__s2, (unsigned __int8 *)v81, 2);
      v82 = (unsigned __int8 **)(v80 + 48);
      if (&__s2 == (void **)(v80 + 48))
      {
        if (__s2)
          llvm::MetadataTracking::untrack((uint64_t)&__s2, (unsigned __int8 *)__s2);
      }
      else
      {
        if (*v82)
          llvm::MetadataTracking::untrack((uint64_t)(v80 + 48), *v82);
        v83 = (unsigned __int8 *)__s2;
        *v82 = (unsigned __int8 *)__s2;
        if (v83)
        {
          llvm::MetadataTracking::retrack((uint64_t)&__s2, v83, (uint64_t)(v80 + 48));
          __s2 = 0;
        }
      }
      v69 = (llvm::EVT ***)v64[1];
      goto LABEL_91;
    }
    v69 = (llvm::EVT ***)*((_QWORD *)p_s2 + 1);
    if (!v69)
      goto LABEL_67;
LABEL_91:
    if (*v58)
    {
      *(_QWORD *)v58[2] = v58[1];
      v84 = v58[1];
      if (v84)
        *((_QWORD *)v84 + 2) = v58[2];
    }
    *v58 = (llvm::EVT *)v69;
    if (v69)
    {
      v87 = v69[1];
      v85 = v69 + 1;
      v86 = v87;
      *v59 = v87;
      if (v87)
        v86[2] = (llvm::EVT *)v59;
      v58[2] = (llvm::EVT *)v85;
      *v85 = v58;
    }
    v57 = 1;
  }
  while (v56);
  v113 = v1151[0];
  if (!v4[1])
  {
LABEL_163:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v4[5] + 5), (uint64_t ***)v4);
    v124 = v4[3];
    v125 = v4[4];
    *v125 = (llvm::EVT *)v124;
    v124[1] = (llvm::EVT *)v125;
    v4[3] = 0;
    v4[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v4);
    v126 = v113;
    goto LABEL_164;
  }
  MEMORY[0x1CAA32FB4](v1151[0], 8);
  if ((v57 & 1) != 0)
    goto LABEL_167;
  v14 = *((unsigned __int8 *)v4 + 16);
LABEL_34:
  if (v14 != 81)
    goto LABEL_327;
  v44 = (uint64_t)*(v4 - 8);
  if (!v44)
    goto LABEL_327;
  v45 = (uint64_t)*(v4 - 4);
  if (!v45)
    goto LABEL_327;
  v46 = *((_WORD *)v4 + 9) & 0x3F;
  if (v46 == 34)
  {
    v134 = *(unsigned __int8 *)(v45 + 16);
    if (v134 == 5)
    {
      if (*(_WORD *)(v45 + 18) == 13)
      {
        v146 = (uint64_t *)(v45 - 32 * (*(_DWORD *)(v45 + 20) & 0x7FFFFFF));
        v147 = *v146;
        if (*v146)
        {
          v148 = v146[4];
          if (v148)
          {
            if (v44 == v147 || v44 == v148)
              goto LABEL_327;
          }
        }
      }
    }
    else if (v134 == 41)
    {
      v48 = *(uint64_t **)(v45 - 64);
      if (v48)
      {
        v49 = *(llvm::Constant **)(v45 - 32);
        if (v49)
        {
          if ((uint64_t *)v44 == v48 || (llvm::Constant *)v44 == v49)
            goto LABEL_701;
        }
      }
    }
    v1151[0] = 0;
    p_s2 = v1151;
    v150 = *(_QWORD *)(v45 + 8);
    if (!v150 || *(_QWORD *)(v150 + 8))
      goto LABEL_220;
    if (v134 == 5)
    {
      if (*(_WORD *)(v45 + 18) != 30)
        goto LABEL_220;
      v196 = v45 - 32 * (*(_DWORD *)(v45 + 20) & 0x7FFFFFF);
      if (!*(_QWORD *)v196)
        goto LABEL_220;
      v1151[0] = *(void **)v196;
      if (!sub_1C4D9EED4((uint64_t)&v1127, *(llvm::Constant **)(v196 + 32)))
        goto LABEL_220;
    }
    else
    {
      if (v134 != 58)
        goto LABEL_220;
      if (!*(_QWORD *)(v45 - 64))
        goto LABEL_220;
      v1151[0] = *(void **)(v45 - 64);
      if ((sub_1C4D9ED34((uint64_t)&v1127, *(llvm::Constant **)(v45 - 32)) & 1) == 0)
        goto LABEL_220;
    }
    v48 = (uint64_t *)v1151[0];
    if (!v1151[0])
      goto LABEL_327;
    v197 = *(unsigned __int8 *)(v45 + 16);
    if (v197 < 0x1C)
      goto LABEL_327;
    v154 = v197 - 59;
    v49 = (llvm::Constant *)v44;
LABEL_247:
    v44 = v45;
    goto LABEL_248;
  }
  if (v46 != 36)
  {
    v1151[0] = 0;
    p_s2 = v1151;
    goto LABEL_220;
  }
  v47 = *(unsigned __int8 *)(v44 + 16);
  if (v47 == 5)
  {
    if (*(_WORD *)(v44 + 18) != 13)
      goto LABEL_204;
    v141 = (uint64_t *)(v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF));
    v142 = *v141;
    if (!*v141)
      goto LABEL_204;
    v143 = v141[4];
    if (!v143)
      goto LABEL_204;
    if (v45 != v142 && v45 != v143)
      goto LABEL_204;
    goto LABEL_327;
  }
  if (v47 == 41)
  {
    v48 = *(uint64_t **)(v44 - 64);
    if (v48)
    {
      v49 = *(llvm::Constant **)(v44 - 32);
      if (v49)
      {
        if ((uint64_t *)v45 == v48 || (llvm::Constant *)v45 == v49)
          goto LABEL_249;
      }
    }
  }
LABEL_204:
  v1151[0] = 0;
  p_s2 = v1151;
  v145 = *(_QWORD *)(v44 + 8);
  if (!v145 || *(_QWORD *)(v145 + 8))
    goto LABEL_220;
  if (v47 == 5)
  {
    if (*(_WORD *)(v44 + 18) != 30)
      goto LABEL_220;
    v194 = v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF);
    if (!*(_QWORD *)v194)
      goto LABEL_220;
    v1151[0] = *(void **)v194;
    if (!sub_1C4D9EED4((uint64_t)&v1127, *(llvm::Constant **)(v194 + 32)))
      goto LABEL_220;
LABEL_318:
    v48 = (uint64_t *)v1151[0];
    if (!v1151[0])
      goto LABEL_327;
    v195 = *(unsigned __int8 *)(v44 + 16);
    if (v195 < 0x1C)
      goto LABEL_327;
    v154 = v195 - 59;
    v49 = (llvm::Constant *)v45;
LABEL_248:
    if (v154 < 0xFFFFFFEE)
      goto LABEL_327;
LABEL_249:
    v45 = v44;
LABEL_701:
    v389 = *(_QWORD *)(a1 + 48);
    v391 = sub_1C47A7FD0(v389, *(_QWORD *)(a1 + 720), *(_QWORD *)v45, 0);
    v392 = 0;
    v393 = *(_QWORD *)(v45 + 8);
    if (v393)
    {
      v394 = -1;
      do
      {
        v392 = v394 == 0;
        if (!v394)
          break;
        v393 = *(_QWORD *)(v393 + 8);
        ++v394;
      }
      while (v393);
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t, uint64_t, _BOOL8))(*(_QWORD *)v389 + 1432))(v389, 77, v391, v390, v392))
    {
      if (*(llvm::EVT ***)(v45 + 40) == v4[5] || (v395 = *(_QWORD *)(v45 + 8)) != 0 && !*(_QWORD *)(v395 + 8))
      {
        if (sub_1C5098214(a1, v45, v48, v49, (llvm::ValueAsMetadata *)v4, 301))
          goto LABEL_710;
      }
    }
    goto LABEL_328;
  }
  if (v47 == 58)
  {
    if (*(_QWORD *)(v44 - 64))
    {
      v1151[0] = *(void **)(v44 - 64);
      if ((sub_1C4D9ED34((uint64_t)&v1127, *(llvm::Constant **)(v44 - 32)) & 1) != 0)
        goto LABEL_318;
    }
  }
LABEL_220:
  if (v46 != 32)
    goto LABEL_327;
  v151 = *(unsigned __int8 *)(v44 + 16);
  if (v151 != 5)
  {
    if (v151 != 41)
      goto LABEL_234;
    v48 = *(uint64_t **)(v44 - 64);
    if (!v48)
      goto LABEL_234;
    v49 = *(llvm::Constant **)(v44 - 32);
    if (!v49)
      goto LABEL_234;
LABEL_229:
    if (!sub_1C4D8AC3C((uint64_t)&__s2, (llvm::Constant *)v45)
      || (sub_1C4D89CC8((uint64_t)&v1123, (llvm::Constant *)v48) & 1) == 0
      && (sub_1C4D89CC8((uint64_t)&v1119, v49) & 1) == 0)
    {
      goto LABEL_234;
    }
    v153 = *(unsigned __int8 *)(v44 + 16);
    if (v153 >= 0x1C)
    {
      v154 = v153 - 59;
      goto LABEL_248;
    }
    goto LABEL_327;
  }
  if (*(_WORD *)(v44 + 18) == 13)
  {
    v152 = v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF);
    v48 = *(uint64_t **)v152;
    if (*(_QWORD *)v152)
    {
      v49 = *(llvm::Constant **)(v152 + 32);
      if (v49)
        goto LABEL_229;
    }
  }
LABEL_234:
  if (sub_1C4D8AC3C((uint64_t)&__s2, (llvm::Constant *)v44))
  {
    v155 = *(unsigned __int8 *)(v45 + 16);
    if (v155 == 5)
    {
      if (*(_WORD *)(v45 + 18) != 13)
        goto LABEL_327;
      v156 = v45 - 32 * (*(_DWORD *)(v45 + 20) & 0x7FFFFFF);
      v48 = *(uint64_t **)v156;
      if (!*(_QWORD *)v156)
        goto LABEL_327;
      v49 = *(llvm::Constant **)(v156 + 32);
      if (!v49)
        goto LABEL_327;
    }
    else
    {
      if (v155 != 41)
        goto LABEL_327;
      v48 = *(uint64_t **)(v45 - 64);
      if (!v48)
        goto LABEL_327;
      v49 = *(llvm::Constant **)(v45 - 32);
      if (!v49)
        goto LABEL_327;
    }
    if ((sub_1C4D89CC8((uint64_t)&v1123, (llvm::Constant *)v48) & 1) != 0
      || (sub_1C4D89CC8((uint64_t)&v1119, v49) & 1) != 0)
    {
      v157 = *(unsigned __int8 *)(v45 + 16);
      if (v157 >= 0x1C)
      {
        v154 = v157 - 59;
        goto LABEL_247;
      }
    }
  }
LABEL_327:
  v48 = (uint64_t *)*(v4 - 8);
  if (*((unsigned __int8 *)v48 + 16) >= 0x15u)
  {
    v202 = *(v4 - 4);
    v203 = *((_WORD *)v4 + 9) & 0x3F;
    if (v203 == 32)
    {
      if ((sub_1C4D9ED34((uint64_t)&p_s2, (llvm::Constant *)*(v4 - 4)) & 1) == 0)
        goto LABEL_328;
      v204 = 1;
    }
    else
    {
      if (v203 != 33 || (sub_1C4D8AC3C((uint64_t)&p_s2, (llvm::Constant *)*(v4 - 4)) & 1) == 0)
        goto LABEL_328;
      v204 = -1;
    }
    v205 = llvm::ConstantInt::get(*v202, v204, 0);
    v206 = v48[1];
    if (v206)
    {
      v49 = (llvm::Constant *)v205;
      do
      {
        v45 = *(_QWORD *)(v206 + 24);
        v207 = *(unsigned __int8 *)(v45 + 16);
        if (v207 == 5)
        {
          if (*(_WORD *)(v45 + 18) == 13)
          {
            v208 = (void **)(v45 - 32 * (*(_DWORD *)(v45 + 20) & 0x7FFFFFF));
            if (v48 == *v208 && v205 == v208[4])
            {
              v48 = *(uint64_t **)(v45 - 64);
              v49 = *(llvm::Constant **)(v45 - 32);
              goto LABEL_701;
            }
          }
        }
        else if (v207 == 41 && v48 == *(uint64_t **)(v45 - 64) && v205 == *(llvm::Value ***)(v45 - 32))
        {
          goto LABEL_701;
        }
        v206 = *(_QWORD *)(v206 + 8);
      }
      while (v206);
    }
  }
LABEL_328:
  if (*((unsigned __int8 *)*(v4 - 8) + 16) <= 0x14u && *((unsigned __int8 *)*(v4 - 4) + 16) < 0x15u)
    goto LABEL_413;
  v198 = *((_WORD *)v4 + 9) & 0x3F;
  if (v198 == 34)
    v199 = (unsigned __int8 *)*(v4 - 8);
  else
    v199 = (unsigned __int8 *)*(v4 - 4);
  if (v198 == 34)
    v200 = (unsigned __int8 *)*(v4 - 4);
  else
    v200 = (unsigned __int8 *)*(v4 - 8);
  if (v198 == 34)
    v201 = 36;
  else
    v201 = *((_WORD *)v4 + 9) & 0x3F;
  if (v201 != 32)
  {
    if (v201 != 33)
      goto LABEL_364;
    if ((sub_1C4D8AC3C((uint64_t)&p_s2, (llvm::Constant *)v199) & 1) == 0)
      goto LABEL_413;
LABEL_365:
    if (v199[16] >= 0x15u)
      v210 = v199;
    else
      v210 = v200;
    v211 = *((_QWORD *)v210 + 1);
    if (!v211)
      goto LABEL_413;
    while (1)
    {
      v212 = *(_QWORD *)(v211 + 24);
      v213 = *(unsigned __int8 *)(v212 + 16);
      if (v213 == 5)
      {
        if (*(_WORD *)(v212 + 18) != 15)
          goto LABEL_377;
        v215 = (unsigned __int8 **)(v212 - 32 * (*(_DWORD *)(v212 + 20) & 0x7FFFFFF));
        if (v199 != *v215)
          goto LABEL_377;
        v214 = v215[4];
      }
      else
      {
        if (v213 != 43 || v199 != *(unsigned __int8 **)(v212 - 64))
          goto LABEL_377;
        v214 = *(unsigned __int8 **)(v212 - 32);
      }
      if (v200 == v214)
        goto LABEL_407;
LABEL_377:
      v1123 = 0;
      v1119 = 0;
      p_s2 = v199;
      *(_QWORD *)&v1127 = &v1119;
      *((_QWORD *)&v1127 + 1) = 0;
      v216 = *(unsigned __int8 *)(v212 + 16);
      if (v216 == 5)
      {
        if (*(_WORD *)(v212 + 18) != 13)
          goto LABEL_404;
        v217 = v212 - 32 * (*(_DWORD *)(v212 + 20) & 0x7FFFFFF);
        if (v199 != *(unsigned __int8 **)v217
          || (sub_1C4D8A004((uint64_t)&v1127, *(llvm::Constant **)(v217 + 32)) & 1) == 0)
        {
          goto LABEL_404;
        }
      }
      else if (v216 != 41
             || v199 != *(unsigned __int8 **)(v212 - 64)
             || !sub_1C4D89F84((uint64_t)&v1127, *(unsigned __int8 **)(v212 - 32)))
      {
        goto LABEL_404;
      }
      v1151[0] = &v1123;
      v1151[1] = 0;
      if (sub_1C4D89F84((uint64_t)v1151, v200))
      {
        v218 = v1119;
        v219 = v1123;
        v220 = *((_DWORD *)v1123 + 2);
        LODWORD(v1144) = v220;
        if (v220 <= 0x40)
        {
          v221 = *(_QWORD *)v1123;
          v222 = v220;
          goto LABEL_389;
        }
        v221 = operator new[]();
        __s2 = (void *)v221;
        v223 = *(const void **)v219;
        v222 = v1144;
        memcpy((void *)v221, v223, (((unint64_t)v1144 + 63) >> 3) & 0x3FFFFFF8);
        if (v222 > 0x40)
        {
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&__s2);
        }
        else
        {
LABEL_389:
          v224 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v222;
          if (!v222)
            v224 = 0;
          __s2 = (void *)(v224 & ~v221);
        }
        llvm::APInt::operator++((uint64_t)&__s2);
        v225 = v1144;
        v226 = __s2;
        LODWORD(v1144) = 0;
        v227 = *((unsigned int *)v218 + 2);
        if (v227 > 0x40)
          v228 = memcmp(*(const void **)v218, __s2, ((unint64_t)(v227 + 63) >> 3) & 0x3FFFFFF8) == 0;
        else
          v228 = *(_QWORD *)v218 == (_QWORD)__s2;
        v229 = v228;
        if (v225 >= 0x41)
        {
          if (v226)
          {
            MEMORY[0x1CAA32F9C](v226, 0x1000C8000313F17);
            if (v1144 >= 0x41)
            {
              if (__s2)
                MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
            }
          }
        }
        if ((v229 & 1) != 0)
        {
LABEL_407:
          v230 = *(_QWORD *)(a1 + 48);
          v232 = sub_1C47A7FD0(v230, *(_QWORD *)(a1 + 720), *(_QWORD *)v212, 0);
          v233 = 0;
          v234 = *(_QWORD *)(v212 + 8);
          if (v234)
          {
            v235 = -1;
            do
            {
              v233 = v235 == 0;
              if (!v235)
                break;
              v234 = *(_QWORD *)(v234 + 8);
              ++v235;
            }
            while (v234);
          }
          if (!(*(unsigned int (**)(uint64_t, uint64_t, unint64_t, uint64_t, _BOOL8))(*(_QWORD *)v230 + 1432))(v230, 79, v232, v231, v233)|| !sub_1C5098214(a1, v212, *(uint64_t **)(v212 - 64), *(llvm::Constant **)(v212 - 32), (llvm::ValueAsMetadata *)v4, 312))
          {
            goto LABEL_413;
          }
LABEL_710:
          v12 = 1;
          *v1107 = 1;
          return v12 & 1;
        }
      }
LABEL_404:
      v211 = *(_QWORD *)(v211 + 8);
      if (!v211)
        goto LABEL_413;
    }
  }
  if (sub_1C4D8AC3C((uint64_t)&p_s2, (llvm::Constant *)v199))
  {
    v199 = (unsigned __int8 *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v199, 1, 0);
    v201 = 36;
  }
  else
  {
    v201 = 32;
  }
LABEL_364:
  v209 = v199;
  v199 = v200;
  v200 = v209;
  if (v201 == 36)
    goto LABEL_365;
LABEL_413:
  if ((byte_1EF8EFE30
     || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 248))(*(_QWORD *)(a1 + 48)) & 1) == 0)
    && (*((_WORD *)v4 + 9) & 0x3F) == 0x20)
  {
    v236 = v4[1];
    if (v236)
    {
      v237 = v4[1];
      while (1)
      {
        v238 = v237[3];
        v239 = *((unsigned __int8 *)v238 + 16);
        if (v239 != 30 && (v239 != 85 || *((llvm::EVT ****)v238 - 12) != v4))
          break;
        v237 = (llvm::EVT **)v237[1];
        if (!v237)
          goto LABEL_422;
      }
    }
    else
    {
LABEL_422:
      v240 = (llvm::BasicBlock *)v4[5];
      SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v240);
      if (SinglePredecessor)
      {
        v242 = *(_QWORD *)(SinglePredecessor + 40);
        if (v242 != SinglePredecessor + 40)
        {
          v243 = v242 - 24;
          if (!v242)
            v243 = 0;
          v244 = *(unsigned __int8 *)(v243 + 16) - 40;
          if (v244 < 0xFFFFFFF5)
            v243 = 0;
          if (v242)
          {
            if (*(_BYTE *)(v243 + 16) == 30 && v244 >= 0xFFFFFFF5 && (*(_DWORD *)(v243 + 20) & 0x7FFFFFF) == 3)
            {
              v246 = *(_QWORD *)(v243 - 96);
              if (v246)
              {
                if (*(_QWORD *)(v243 - 32))
                {
                  v247 = *(llvm::BasicBlock **)(v243 - 64);
                  if (v247
                    && v240 == v247
                    && *(_BYTE *)(v246 + 16) == 81
                    && *(v4 - 8) == *(llvm::EVT ***)(v246 - 64)
                    && *(v4 - 4) == *(llvm::EVT ***)(v246 - 32))
                  {
                    v739 = *(_WORD *)(v246 + 18) & 0x3F;
                    if ((_DWORD)v739 == 40 || (_DWORD)v739 == 38)
                    {
                      while (v236)
                      {
                        v740 = (unsigned __int8 *)v236[3];
                        v741 = v740[16];
                        if (v740)
                          v742 = v741 == 30;
                        else
                          v742 = 0;
                        if (v742)
                        {
                          llvm::BranchInst::swapSuccessors((llvm::Instruction *)v740);
                        }
                        else
                        {
                          if (v741 != 85)
                            v740 = 0;
                          if (v740)
                          {
                            v743 = *((_QWORD *)v740 - 8);
                            v744 = *((_QWORD *)v740 - 4);
                            if (v743 != v744)
                            {
                              v745 = *((_QWORD *)v740 - 3);
                              *((_QWORD *)v740 - 8) = v744;
                              *((_QWORD *)v740 - 4) = v743;
                              v746 = *(_OWORD *)(v740 - 56);
                              v747 = (_QWORD *)*((_QWORD *)v740 - 2);
                              *((_QWORD *)v740 - 7) = v745;
                              *((_QWORD *)v740 - 6) = v747;
                              *(_OWORD *)(v740 - 24) = v746;
                              *v747 = v740 - 64;
                              v748 = *((_QWORD *)v740 - 7);
                              if (v748)
                                *(_QWORD *)(v748 + 16) = v740 - 56;
                              **((_QWORD **)v740 - 2) = v740 - 32;
                              v749 = *((_QWORD *)v740 - 3);
                              if (v749)
                                *(_QWORD *)(v749 + 16) = v740 - 24;
                            }
                            llvm::Instruction::swapProfMetadata((llvm::Instruction *)v740);
                          }
                        }
                        v236 = (llvm::EVT **)v236[1];
                      }
                      __asm { BR              X9 }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_445:
  v249 = *((unsigned __int8 *)v4 + 16);
  if (v4 && v249 == 60)
  {
    if (!v4[6] && (*((_BYTE *)v4 + 23) & 0x20) == 0
      || (llvm::Value::setMetadata((llvm::Value *)v4, 16, 0), v250 = *((unsigned __int8 *)v4 + 16), v250 == 60)
      || v250 == 61)
    {
      v251 = *((_WORD *)v4 + 9);
      if ((v251 & 0x380) == 0 && (v251 & 1) == 0)
        goto LABEL_453;
LABEL_584:
      v324 = 0;
LABEL_585:
      v12 = v324 | sub_1C508FBB4();
      return v12 & 1;
    }
    if ((v250 - 63) < 3 || (*((_WORD *)v4 + 9) & 1) != 0)
      goto LABEL_584;
LABEL_453:
    if (((_DWORD)(*v4)[1] & 0xFD) != 0xD)
      goto LABEL_584;
    v252 = v4 + 1;
    v253 = v4[1];
    if (v253 && !v253[1])
    {
      v321 = sub_1C477672C((uint64_t)__pa, (uint64_t)v253[3]);
      v322 = *(_QWORD *)(a1 + 200);
      v323 = 208;
      if (v322 == *(_QWORD *)(a1 + 192))
        v323 = 212;
      if (v321 != (_QWORD *)(v322 + 8 * *(unsigned int *)(a1 + v323)))
        goto LABEL_584;
      v253 = *v252;
    }
    __s2 = &v1145;
    v1144 = 0x800000000;
    p_s2 = v1129;
    *(_QWORD *)&v1127 = v1129;
    *((_QWORD *)&v1127 + 1) = 16;
    LODWORD(v1128) = 0;
    v1123 = (llvm *)v1125;
    v1124 = 0x800000000;
    if (v253)
    {
      v254 = 0;
      do
      {
        v255 = v253[3];
        if (v254 >= HIDWORD(v1144))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)&v1145, v254 + 1, 8);
          v254 = v1144;
        }
        *((_QWORD *)__s2 + v254) = v255;
        v254 = v1144 + 1;
        LODWORD(v1144) = v1144 + 1;
        v253 = (llvm::EVT **)v253[1];
      }
      while (v253);
    }
    v1157 = (_QWORD *)sub_1C47A7FD0(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 720), (uint64_t)*v4, 0);
    v1158 = v279;
    if ((_BYTE)v1157)
      v280 = sub_1C47A8C74((unsigned __int8 *)&v1157);
    else
      v280 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1157);
    v282 = v280;
    if ((_DWORD)v281 != 1)
    {
      if (v280)
        goto LABEL_495;
LABEL_1825:
      v324 = 0;
LABEL_1826:
      if (v1123 != (llvm *)v1125)
        free(v1123);
      if ((void *)v1127 != p_s2)
        free((void *)v1127);
      if (__s2 != &v1145)
        free(__s2);
      goto LABEL_585;
    }
    if (!v282)
      goto LABEL_1825;
LABEL_495:
    LODWORD(v1149) = v282;
    if (v282 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v1148, 0, 0);
      v1118 = v282;
      llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 0, 0);
    }
    else
    {
      v1148 = 0;
      v1118 = v282;
      __dst = 0;
    }
    v283 = v1144;
    if ((_DWORD)v1144)
    {
      while (2)
      {
        v284 = *((_QWORD *)__s2 + v283 - 1);
        LODWORD(v1144) = v283 - 1;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&p_s2, v284);
        if (!v285)
          goto LABEL_552;
        v286 = *(unsigned __int8 *)(v284 + 16);
        if (v284 && v286 == 83)
        {
          v287 = *(_QWORD *)(v284 + 8);
          if (v287)
          {
            v283 = v1144;
            do
            {
              v288 = *(_QWORD *)(v287 + 24);
              if (v283 >= HIDWORD(v1144))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)&v1145, v283 + 1, 8);
                v283 = v1144;
              }
              *((_QWORD *)__s2 + v283) = v288;
              v283 = v1144 + 1;
              LODWORD(v1144) = v1144 + 1;
              v287 = *(_QWORD *)(v287 + 8);
            }
            while (v287);
LABEL_553:
            if (!v283)
              goto LABEL_576;
            continue;
          }
LABEL_552:
          v283 = v1144;
          goto LABEL_553;
        }
        break;
      }
      if (v286 != 53)
      {
        if (v286 != 66)
        {
          if (v286 != 56)
            goto LABEL_666;
          v289 = *(_DWORD *)(v284 + 20);
          v290 = (v289 & 0x40000000) != 0 ? *(_QWORD *)(v284 - 8) : v284 - 32 * (v289 & 0x7FFFFFF);
          v296 = *(_QWORD *)(v290 + 32);
          if (!v296 || *(_BYTE *)(v296 + 16) != 16)
            goto LABEL_666;
          v298 = *(unsigned int *)(v296 + 32);
          if (v298 > 0x40)
          {
            v299 = operator new[]();
            memcpy((void *)v299, *(const void **)(v296 + 24), ((unint64_t)(v298 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v299 = *(_QWORD *)(v296 + 24);
          }
          if (v1149 > 0x40)
          {
            v305 = v1148;
            v306 = ((unint64_t)v1149 + 63) >> 6;
            v307 = (uint64_t *)v299;
            do
            {
              v308 = *v307++;
              *v305++ |= v308;
              --v306;
            }
            while (v306);
          }
          else
          {
            v1148 = (void *)((unint64_t)v1148 | v299);
          }
          if (v298 > 0x40)
          {
            v309 = __dst;
            v317 = ((unint64_t)(v298 + 63) >> 3) & 0x3FFFFFF8;
            while (v317)
            {
              v318 = *(_QWORD *)(v299 - 8 + v317);
              v319 = *(_QWORD *)((char *)__dst + v317 - 8);
              v317 -= 8;
              if (v318 != v319)
              {
                if (v318 <= v319)
                  break;
                goto LABEL_567;
              }
            }
          }
          else
          {
            v309 = __dst;
            if (v299 <= (unint64_t)__dst)
            {
LABEL_539:
              if ((void *)v299 != v309)
                goto LABEL_552;
              goto LABEL_540;
            }
LABEL_567:
            if (v298 <= 0x40 && v1118 <= 0x40)
            {
              __dst = (void *)v299;
              v1118 = v298;
              v309 = (void *)v299;
              goto LABEL_539;
            }
            llvm::APInt::reallocate((uint64_t)&__dst, v298);
            if (v1118 <= 0x40)
            {
              __dst = (void *)v299;
              v309 = (void *)v299;
            }
            else
            {
              v309 = __dst;
              memcpy(__dst, (const void *)v299, (((unint64_t)v1118 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
          if (v298 <= 0x40)
            goto LABEL_539;
          if (!memcmp((const void *)v299, v309, ((unint64_t)(v298 + 63) >> 3) & 0x3FFFFFF8))
          {
LABEL_540:
            v310 = *(_DWORD *)(v284 + 20);
            if ((v310 & 0x40000000) != 0)
              v311 = *(llvm::EVT *****)(v284 - 8);
            else
              v311 = (llvm::EVT ****)(v284 - 32 * (v310 & 0x7FFFFFF));
            if (*v311 == v4)
            {
              v316 = v1124;
              if (v1124 >= (unint64_t)HIDWORD(v1124))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1123, (uint64_t)v1125, v1124 + 1, 8);
                v316 = v1124;
              }
              *((_QWORD *)v1123 + v316) = v284;
              LODWORD(v1124) = v1124 + 1;
            }
            if (v298 < 0x41)
              goto LABEL_552;
          }
          if (v299)
            MEMORY[0x1CAA32F9C](v299, 0x1000C8000313F17);
          goto LABEL_552;
        }
        v1151[0] = (void *)sub_1C47A7FD0(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 720), *(_QWORD *)v284, 0);
        v1151[1] = v291;
        if (LOBYTE(v1151[0]))
          v292 = sub_1C47A8C74((unsigned __int8 *)v1151);
        else
          v292 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1151);
        v315 = v292;
        if ((_DWORD)v293 == 1)
        v314 = v315;
LABEL_551:
        sub_1C4912E54(&v1148, 0, v314);
        goto LABEL_552;
      }
      v294 = *(_DWORD *)(v284 + 20);
      if ((v294 & 0x40000000) != 0)
        v295 = *(_QWORD *)(v284 - 8);
      else
        v295 = v284 - 32 * (v294 & 0x7FFFFFF);
      v300 = *(_QWORD *)(v295 + 32);
      if (v300)
        v301 = *(_BYTE *)(v300 + 16) == 16;
      else
        v301 = 0;
      if (!v301)
      {
LABEL_666:
        v324 = 0;
        goto LABEL_597;
      }
      v302 = (_QWORD **)(v300 + 24);
      v303 = *(_DWORD *)(v300 + 32);
      if (v303 >= 0x41)
      {
        v312 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v300 + 24));
        v313 = v282 - 1;
        if (v303 - v312 <= 0x40)
        {
          v304 = (_QWORD *)**v302;
          goto LABEL_544;
        }
      }
      else
      {
        v304 = *v302;
LABEL_544:
        v313 = v282 - 1;
        if ((unint64_t)v304 <= v282 - 1)
          v313 = v304;
      }
      v314 = v282 - v313;
      goto LABEL_551;
    }
LABEL_576:
    if (v1149 > 0x40)
    {
      v325 = 0;
      v326 = ((unint64_t)v1149 + 63) >> 6;
      do
      {
        v71 = v326-- < 1;
        if (v71)
          break;
        v327 = *((_QWORD *)v1148 + v326);
        v325 += __clz(v327);
      }
      while (!v327);
      v328 = v1149 | 0xFFFFFFC0;
      if ((v1149 & 0x3F) == 0)
        v328 = 0;
      v320 = v325 + v328;
    }
    else
    {
      v320 = v1149 + __clz((unint64_t)v1148) - 64;
    }
    v329 = v1149 - v320;
    if ((v1149 - v320) < 2 || !sub_1C4F30574((llvm::APInt *)&v1148, v1149 - v320))
    {
LABEL_596:
      v324 = 0;
      goto LABEL_597;
    }
    if (v1118 > 0x40)
    {
      v330 = __dst;
      if (!memcmp(__dst, v1148, (((unint64_t)v1118 + 63) >> 3) & 0x3FFFFFF8))
        goto LABEL_714;
      v324 = 0;
      if (v330)
        goto LABEL_599;
    }
    else
    {
      if (__dst != v1148)
        goto LABEL_596;
LABEL_714:
      v396 = **v4;
      LODWORD(v1151[0]) = v329;
      if (v329 <= 63)
      {
        switch(v329)
        {
          case 32:
            v397 = (_QWORD *)(*(_QWORD *)v396 + 1960);
            goto LABEL_1172;
          case 16:
            v397 = (_QWORD *)(*(_QWORD *)v396 + 1936);
            goto LABEL_1172;
          case 8:
            v397 = (_QWORD *)(*(_QWORD *)v396 + 1912);
            goto LABEL_1172;
        }
      }
      else
      {
        if (v329 == 64)
        {
          v397 = (_QWORD *)(*(_QWORD *)v396 + 1984);
          goto LABEL_1172;
        }
        if (v329 == 128)
        {
          v397 = (_QWORD *)(*(_QWORD *)v396 + 2008);
          goto LABEL_1172;
        }
      }
      v910 = sub_1C5270984(*(_QWORD *)v396 + 2168, v1151);
      v397 = (_QWORD *)*((_QWORD *)v910 + 1);
      if (!v397)
      {
        v911 = v910;
        v397 = (_QWORD *)sub_1C484358C(*(_QWORD *)v396 + 2040, 24, 3);
        v912 = (int)v1151[0];
        *v397 = v396;
        v397[2] = 0;
        v397[1] = (v912 << 8) | 0xDu;
        *((_QWORD *)v911 + 1) = v397;
      }
LABEL_1172:
      v696 = sub_1C47A7FD0(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 720), (uint64_t)v397, 0);
      v1116[0] = v696;
      v1116[1] = v695;
      if (v1157 != v696 || (v324 = 0, !(_BYTE)v1157) && v1158 != v695)
      {
        if (!sub_1C50989E0((unsigned __int8 *)&v1157, v696, v695))
        {
          v324 = 0;
          goto LABEL_597;
        }
        if (!sub_1C5098958((unsigned __int8 *)v1116))
          goto LABEL_1213;
        v324 = 0;
        if (!(_BYTE)v1157 || !LOBYTE(v1116[0]))
          goto LABEL_597;
        if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 358 * v1157 + 2 * LOBYTE(v1116[0]) + 73672) > 0xFFFu)
        {
LABEL_1213:
          v324 = 0;
          goto LABEL_597;
        }
        v697 = v4[4];
        if (v697)
          v698 = v697 == v4[5] + 5;
        else
          v698 = 1;
        if (v698)
          v699 = 0;
        else
          v699 = (uint64_t)(v697 - 3);
        sub_1C4773D54((uint64_t)v1151, v699, 0, 0, 0);
        v701 = llvm::ConstantInt::get(v396, (llvm::LLVMContext *)&v1148, v700);
        v1122 = 257;
        v702 = (llvm::Value *)sub_1C4D89BCC((uint64_t)v1151, v4, (uint64_t)v701, (uint64_t)&v1119);
        sub_1C4774094(__pa, (uint64_t)v702);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v4, v702, (llvm::Value *)1);
        v703 = *((_DWORD *)v702 + 5);
        if ((v703 & 0x40000000) != 0)
          v704 = (_DWORD *)*((_QWORD *)v702 - 1);
        else
          v704 = (_DWORD *)((char *)v702 - 32 * (v703 & 0x7FFFFFF));
        if (*(_QWORD *)v704)
        {
          **((_QWORD **)v704 + 2) = *((_QWORD *)v704 + 1);
          v705 = *((_QWORD *)v704 + 1);
          if (v705)
            *(_QWORD *)(v705 + 16) = *((_QWORD *)v704 + 2);
        }
        *(_QWORD *)v704 = v4;
        v706 = v4[1];
        *((_QWORD *)v704 + 1) = v706;
        if (v706)
          v706[2] = (llvm::EVT *)(v704 + 2);
        *((_QWORD *)v704 + 2) = v252;
        *v252 = (llvm::EVT **)v704;
        if ((_DWORD)v1124)
        {
          v707 = v1123;
          for (k = 8 * v1124; k; k -= 8)
          {
            v709 = *(llvm::ValueAsMetadata **)v707;
            v710 = *(_DWORD *)(*(_QWORD *)v707 + 20);
            if ((v710 & 0x40000000) != 0)
              v711 = (_QWORD *)*((_QWORD *)v709 - 1);
            else
              v711 = (_QWORD *)((char *)v709 - 32 * (v710 & 0x7FFFFFF));
            v712 = v711[4];
            v713 = *(unsigned int *)(v712 + 32);
            if (v713 > 0x40)
            {
              if (!memcmp(*(const void **)(v712 + 24), v1148, ((unint64_t)(v713 + 63) >> 3) & 0x3FFFFFF8))
              {
LABEL_1202:
                llvm::Value::doRAUW(v709, v702, (llvm::Value *)1);
                v714 = *(_QWORD *)(a1 + 120);
                if (v714)
                  v715 = (llvm::ValueAsMetadata *)(v714 - 24);
                else
                  v715 = 0;
                if (v715 == v709)
                  *(_QWORD *)(a1 + 120) = *((_QWORD *)v709 + 4);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v709 + 5) + 40, (uint64_t ***)v709);
                v716 = *((_QWORD *)v709 + 3);
                v717 = (_QWORD *)*((_QWORD *)v709 + 4);
                *v717 = v716;
                *(_QWORD *)(v716 + 8) = v717;
                *((_QWORD *)v709 + 3) = 0;
                *((_QWORD *)v709 + 4) = 0;
                llvm::Value::deleteValue(v709);
              }
            }
            else if (*(void **)(v712 + 24) == v1148)
            {
              goto LABEL_1202;
            }
            v707 = (llvm *)((char *)v707 + 8);
          }
        }
        if (v1151[0] != &v1152)
          free(v1151[0]);
        v324 = 1;
      }
LABEL_597:
      if (v1118 >= 0x41)
      {
        v330 = __dst;
        if (__dst)
LABEL_599:
          MEMORY[0x1CAA32F9C](v330, 0x1000C8000313F17);
      }
    }
    if (v1149 >= 0x41 && v1148)
      MEMORY[0x1CAA32F9C](v1148, 0x1000C8000313F17);
    goto LABEL_1826;
  }
  if (v4 && v249 == 61)
  {
    v256 = (uint64_t)**(v4 - 8);
    if (*(_BYTE *)(v256 + 8) == 19)
      goto LABEL_695;
    v257 = *(_QWORD *)(a1 + 720);
    v258 = *(_QWORD *)(a1 + 48);
    sub_1C4768AD0(v257, (uint64_t)**(v4 - 8));
    v260 = v259;
    v262 = v261;
    sub_1C4768AD0(v257, v256);
    if (v260 != ((v264 + 7) & 0xFFFFFFFFFFFFFFF8) || v262 != (v263 == 1))
      goto LABEL_695;
    sub_1C4768AD0(v257, v256);
    v268 = v266;
    if ((_DWORD)v267 != 1)
    {
      if (v266)
        goto LABEL_472;
      goto LABEL_695;
    }
    if (!v268)
      goto LABEL_695;
LABEL_472:
    sub_1C4768AD0(v257, v256);
    v271 = v270;
    if ((_DWORD)v269 == 1)
    v272 = v271 >> 1;
    LODWORD(v1157) = v271 >> 1;
    v273 = **v4;
    LODWORD(p_s2) = (_DWORD)v1157;
    if ((int)v1157 <= 63)
    {
      if ((int)v272 <= 31)
      {
        switch((_DWORD)v272)
        {
          case 0x10:
            v274 = (_QWORD *)(*(_QWORD *)v273 + 1936);
            goto LABEL_652;
          case 8:
            v274 = (_QWORD *)(*(_QWORD *)v273 + 1912);
            goto LABEL_652;
          case 1:
            v274 = (_QWORD *)(*(_QWORD *)v273 + 1888);
            goto LABEL_652;
        }
      }
      else if ((_DWORD)v272 == 32)
      {
        v274 = (_QWORD *)(*(_QWORD *)v273 + 1960);
        goto LABEL_652;
      }
    }
    else
    {
      if ((_DWORD)v272 == 64)
      {
        v274 = (_QWORD *)(*(_QWORD *)v273 + 1984);
        goto LABEL_652;
      }
      if ((_DWORD)v272 == 128)
      {
        v274 = (_QWORD *)(*(_QWORD *)v273 + 2008);
        goto LABEL_652;
      }
    }
    v691 = sub_1C5270984(*(_QWORD *)v273 + 2168, &p_s2);
    v274 = (_QWORD *)*((_QWORD *)v691 + 1);
    if (!v274)
    {
      v692 = v691;
      v274 = (_QWORD *)sub_1C484358C(*(_QWORD *)v273 + 2040, 24, 3);
      v693 = (int)p_s2;
      *v274 = v273;
      v274[2] = 0;
      v274[1] = (v693 << 8) | 0xDu;
      *((_QWORD *)v692 + 1) = v274;
    }
LABEL_652:
    __s2 = v274;
    sub_1C4768AD0(v257, (uint64_t)v274);
    v356 = v355;
    v358 = v357;
    sub_1C4768AD0(v257, (uint64_t)v274);
    if (v356 != ((v360 + 7) & 0xFFFFFFFFFFFFFFF8) || v358 != (v359 == 1) || (*((_WORD *)v4 + 9) & 1) != 0)
      goto LABEL_695;
    v1123 = 0;
    v1119 = 0;
    v361 = (uint64_t)*(v4 - 8);
    v362 = (v271 >> 1);
    p_s2 = &v1123;
    *(_QWORD *)&v1127 = &v1119;
    LODWORD(v1128) = 64;
    *((_QWORD *)&v1127 + 1) = v362;
    v363 = *(unsigned __int8 *)(v361 + 16);
    if (v363 == 5)
    {
      if (*(_WORD *)(v361 + 18) != 29)
        goto LABEL_681;
      v373 = *(_QWORD *)(v361 - 32 * (*(_DWORD *)(v361 + 20) & 0x7FFFFFF));
      v374 = *(_QWORD *)(v373 + 8);
      if (v374)
      {
        if (!*(_QWORD *)(v374 + 8))
        {
          if (sub_1C4B0378C((_QWORD **)&p_s2, v373))
          {
            v375 = *(_QWORD *)(v361 - 32 * (*(_DWORD *)(v361 + 20) & 0x7FFFFFF) + 32);
            v376 = *(_QWORD *)(v375 + 8);
            if (v376)
            {
              if (!*(_QWORD *)(v376 + 8))
              {
                v841 = *(unsigned __int8 *)(v375 + 16);
                if (v841 == 5)
                {
                  if (*(_WORD *)(v375 + 18) == 25)
                  {
                    v913 = *(_QWORD *)(v375 - 32 * (*(_DWORD *)(v375 + 20) & 0x7FFFFFF));
                    v914 = *(_QWORD *)(v913 + 8);
                    if (v914)
                    {
                      if (!*(_QWORD *)(v914 + 8)
                        && sub_1C4B0378C((_QWORD **)&v1127, v913)
                        && sub_1C4D8A86C((llvm::APInt *)((char *)&v1127 + 8), *(llvm::Constant **)(v375 - 32 * (*(_DWORD *)(v375 + 20) & 0x7FFFFFF) + 32)))
                      {
                        goto LABEL_1527;
                      }
                    }
                  }
                }
                else if (v841 == 53)
                {
                  v842 = *(_QWORD *)(v375 - 64);
                  v843 = *(_QWORD *)(v842 + 8);
                  if (v843)
                  {
                    if (!*(_QWORD *)(v843 + 8)
                      && sub_1C4B0378C((_QWORD **)&v1127, v842)
                      && sub_1C4D8A7F0((llvm::APInt *)((char *)&v1127 + 8), *(unsigned __int8 **)(v375 - 32)))
                    {
                      goto LABEL_1527;
                    }
                  }
                }
              }
            }
          }
        }
      }
      v377 = *(_QWORD *)(v361 - 32 * (*(_DWORD *)(v361 + 20) & 0x7FFFFFF) + 32);
      v378 = *(_QWORD *)(v377 + 8);
      if (v378 && !*(_QWORD *)(v378 + 8) && sub_1C4B0378C((_QWORD **)&p_s2, v377))
      {
        v370 = *(_QWORD *)(v361 - 32 * (*(_DWORD *)(v361 + 20) & 0x7FFFFFF));
        goto LABEL_679;
      }
LABEL_681:
      v381 = 0;
    }
    else
    {
      if (v363 != 57)
        goto LABEL_695;
      v364 = *(_QWORD *)(v361 - 64);
      v365 = *(_QWORD *)(v364 + 8);
      if (v365)
      {
        if (!*(_QWORD *)(v365 + 8))
        {
          if (sub_1C4B0378C((_QWORD **)&p_s2, v364))
          {
            v366 = *(_QWORD *)(v361 - 32);
            v367 = *(_QWORD *)(v366 + 8);
            if (v367)
            {
              if (!*(_QWORD *)(v367 + 8))
              {
                v787 = *(unsigned __int8 *)(v366 + 16);
                if (v787 == 5)
                {
                  if (*(_WORD *)(v366 + 18) != 25)
                    goto LABEL_662;
                  v846 = *(_QWORD *)(v366 - 32 * (*(_DWORD *)(v366 + 20) & 0x7FFFFFF));
                  v847 = *(_QWORD *)(v846 + 8);
                  if (!v847
                    || *(_QWORD *)(v847 + 8)
                    || !sub_1C4B0378C((_QWORD **)&v1127, v846)
                    || !sub_1C4D8A86C((llvm::APInt *)((char *)&v1127 + 8), *(llvm::Constant **)(v366 - 32 * (*(_DWORD *)(v366 + 20) & 0x7FFFFFF) + 32)))
                  {
                    goto LABEL_662;
                  }
                }
                else
                {
                  if (v787 != 53)
                    goto LABEL_662;
                  v788 = *(_QWORD *)(v366 - 64);
                  v789 = *(_QWORD *)(v788 + 8);
                  if (!v789
                    || *(_QWORD *)(v789 + 8)
                    || !sub_1C4B0378C((_QWORD **)&v1127, v788)
                    || !sub_1C4D8A7F0((llvm::APInt *)((char *)&v1127 + 8), *(unsigned __int8 **)(v366 - 32)))
                  {
                    goto LABEL_662;
                  }
                }
                goto LABEL_1527;
              }
            }
          }
        }
      }
LABEL_662:
      v368 = *(_QWORD *)(v361 - 32);
      v369 = *(_QWORD *)(v368 + 8);
      if (!v369 || *(_QWORD *)(v369 + 8) || !sub_1C4B0378C((_QWORD **)&p_s2, v368))
        goto LABEL_681;
      v370 = *(_QWORD *)(v361 - 64);
LABEL_679:
      v379 = *(_QWORD *)(v370 + 8);
      if (!v379)
        goto LABEL_681;
      v380 = *(_QWORD *)(v379 + 8);
      if (v380)
        goto LABEL_681;
      v784 = *(unsigned __int8 *)(v370 + 16);
      if (v784 == 53)
      {
        v785 = *(_QWORD *)(v370 - 64);
        v786 = *(_QWORD *)(v785 + 8);
        if (!v786
          || *(_QWORD *)(v786 + 8)
          || !sub_1C4B0378C((_QWORD **)&v1127, v785)
          || !sub_1C4D8A7F0((llvm::APInt *)((char *)&v1127 + 8), *(unsigned __int8 **)(v370 - 32)))
        {
          goto LABEL_681;
        }
LABEL_1527:
        v381 = 1;
      }
      else
      {
        if (v784 == 5)
          LOBYTE(v380) = *(_WORD *)(v370 + 18) == 25
                      && (v807 = *(_QWORD *)(v370 - 32 * (*(_DWORD *)(v370 + 20) & 0x7FFFFFF)),
                          (v808 = *(_QWORD *)(v807 + 8)) != 0)
                      && !*(_QWORD *)(v808 + 8)
                      && sub_1C4B0378C((_QWORD **)&v1127, v807)
                      && sub_1C4D8A86C((llvm::APInt *)((char *)&v1127 + 8), *(llvm::Constant **)(v370 - 32 * (*(_DWORD *)(v370 + 20) & 0x7FFFFFF) + 32));
        v381 = (v784 == 5) & v380;
      }
    }
    if (v1128 >= 0x41 && *((_QWORD *)&v1127 + 1))
    {
      MEMORY[0x1CAA32F9C](*((_QWORD *)&v1127 + 1), 0x1000C8000313F17);
      if ((v381 & 1) == 0)
        goto LABEL_695;
    }
    else if (!v381)
    {
      goto LABEL_695;
    }
    if (*(_BYTE *)(*(_QWORD *)v1123 + 8) == 13)
    {
      sub_1C4768AD0(v257, *(_QWORD *)v1123);
      v384 = v383;
      if ((_DWORD)v382 == 1)
      if (v384 <= v362 && *(_BYTE *)(*(_QWORD *)v1119 + 8) == 13)
      {
        sub_1C4768AD0(v257, *(_QWORD *)v1119);
        v388 = v387;
        if ((_DWORD)v385 == 1)
        if (v388 <= v362)
        {
          v719 = (llvm::EVT **)v1123;
          if (*((_BYTE *)v1123 + 16) == 77)
            v720 = (uint64_t *)v1123;
          else
            v720 = 0;
          if (*((_BYTE *)v1119 + 16) == 77)
            v721 = (uint64_t *)v1119;
          else
            v721 = 0;
          if (v720)
            v719 = (llvm::EVT **)*(v720 - 4);
          EVT = llvm::EVT::getEVT(*v719, 0, v386);
          v725 = v724;
          v726 = (llvm::EVT ***)(v721 - 4);
          if (!v721)
            v726 = (llvm::EVT ***)&v1119;
          v727 = llvm::EVT::getEVT(**v726, 0, v722);
          if (byte_1ED7F5C80
            || (*(unsigned int (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v258 + 272))(v258, EVT, v725, v727, v728))
          {
            v729 = 0;
            v730 = **v4;
            p_s2 = (char *)&v1127 + 8;
            *(_QWORD *)&v1127 = 0x200000000;
            v1132 = v730;
            v1133 = &v1141;
            v1134 = v1142;
            v1135 = 0;
            v1136 = 0;
            v1137 = 512;
            v1138 = 7;
            v1139 = 0;
            v1140 = 0;
            v1141 = &unk_1E8167888;
            v1142[0] = &unk_1E8167A08;
            v731 = v4[6];
            v1130 = v4[5];
            v1131 = (_QWORD ***)(v4 + 3);
            v1151[0] = v731;
            if (v731)
            {
              llvm::MetadataTracking::track((uint64_t)v1151, (unsigned __int8 *)v731, 2);
              v729 = v1151[0];
            }
            sub_1C4774EF4((uint64_t)&p_s2, 0, (uint64_t)v729);
            if (v1151[0])
              llvm::MetadataTracking::untrack((uint64_t)v1151, (unsigned __int8 *)v1151[0]);
            v732 = v4[5];
            if (v720 && (llvm::EVT **)v720[5] != v732)
            {
              v733 = (unsigned __int8 *)*(v720 - 4);
              v734 = *v720;
              LOWORD(v1154) = 257;
              v1123 = (llvm *)sub_1C4773E38((uint64_t *)&p_s2, 49, v733, v734, (uint64_t)v1151);
              v732 = v4[5];
            }
            if (v721 && (llvm::EVT **)v721[5] != v732)
            {
              v735 = (unsigned __int8 *)*(v721 - 4);
              v736 = *v721;
              LOWORD(v1154) = 257;
              v1119 = (llvm *)sub_1C4773E38((uint64_t *)&p_s2, 49, v735, v736, (uint64_t)v1151);
              v732 = v4[5];
            }
            LOBYTE(v1148) = *(_BYTE *)(*((_QWORD *)v732[7] + 5) + 272) ^ 1;
            v1151[0] = &p_s2;
            v1151[1] = &__s2;
            v1152 = (uint64_t)v4;
            v1153 = &v1148;
            v1154 = (void **)&v1157;
            sub_1C509C8A4((uint64_t)v1151, (unsigned __int8 *)v1123, 0);
            sub_1C509C8A4((uint64_t)v1151, (unsigned __int8 *)v1119, 1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v4[5] + 5), (uint64_t ***)v4);
            v737 = v4[3];
            v738 = v4[4];
            *v738 = (llvm::EVT *)v737;
            v737[1] = (llvm::EVT *)v738;
            v4[3] = 0;
            v4[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v4);
            v556 = p_s2;
            if (p_s2 == (char *)&v1127 + 8)
              goto LABEL_167;
            goto LABEL_1661;
          }
        }
      }
    }
LABEL_695:
    if (v4[6] || (*((_BYTE *)v4 + 23) & 0x20) != 0)
      llvm::Value::setMetadata((llvm::Value *)v4, 16, 0);
LABEL_698:
    v112 = sub_1C508FBB4();
    goto LABEL_699;
  }
  if (v4 && v249 == 65 || v4 && v249 == 64)
    goto LABEL_698;
  if (!v4 || (v249 - 59) < 0xFFFFFFEE)
    goto LABEL_955;
  if (v249 == 56 && byte_1ED7F55C0)
  {
    v275 = *(_QWORD *)(a1 + 48);
    v276 = v4[1];
    if (v276 && !v276[1] && v4[5] == *((llvm::EVT ***)v276[3] + 5))
      goto LABEL_866;
    v277 = *((_DWORD *)v4 + 5);
    v278 = (v277 & 0x40000000) != 0 ? *(v4 - 1) : (llvm::EVT **)&v4[-4 * (v277 & 0x7FFFFFF)];
    if (*((_BYTE *)*v278 + 16) != 16 && *((_BYTE *)v278[4] + 16) != 16)
    {
      v331 = *((_QWORD *)*v278 + 1);
      if (v331)
      {
        if (!*(_QWORD *)(v331 + 8))
        {
          v471 = (v277 & 0x40000000) != 0 ? *(v4 - 1) : (llvm::EVT **)&v4[-4 * (v277 & 0x7FFFFFF)];
          v472 = *((_QWORD *)v471[4] + 1);
          if (v472)
          {
            if (!*(_QWORD *)(v472 + 8))
              goto LABEL_866;
          }
        }
      }
    }
    if (v276)
    {
      while (1)
      {
        v332 = v276[3];
        if (*((_BYTE *)v332 + 16) != 81)
          break;
        v333 = *((_DWORD *)v332 + 5);
        v334 = (v333 & 0x40000000) != 0
             ? (llvm::EVT *)*((_QWORD *)v332 - 1)
             : (llvm::EVT *)((char *)v332 - 32 * (v333 & 0x7FFFFFF));
        v335 = *((_QWORD *)v334 + 4);
        if (!v335 || *(_BYTE *)(v335 + 16) != 16)
          break;
        v337 = (llvm::APInt *)(v335 + 24);
        v338 = *(_DWORD *)(v335 + 32);
        if (v338 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v337) != v338)
            break;
        }
        else if (*(_QWORD *)v337)
        {
          break;
        }
        v276 = (llvm::EVT **)v276[1];
        if (!v276)
          goto LABEL_623;
      }
LABEL_866:
      v249 = 56;
    }
    else
    {
LABEL_623:
      if (((*(uint64_t (**)(uint64_t, llvm::EVT ***))(*(_QWORD *)v275 + 280))(v275, v4) & 1) != 0)
      {
        v339 = v4[1];
        if (v339)
        {
          do
          {
            v341 = v339 + 1;
            v340 = (llvm::Value **)v339[1];
            if (*((llvm::EVT ***)v339[3] + 5) == v4[5])
              v342 = (uint64_t)v4;
            else
              v342 = (uint64_t)v339[3];
            v343 = *((_DWORD *)v4 + 5);
            if ((v343 & 0x40000000) != 0)
              v344 = (llvm::EVT ***)*(v4 - 1);
            else
              v344 = &v4[-4 * (v343 & 0x7FFFFFF)];
            v345 = *v344;
            v346 = (uint64_t)v344[4];
            LOWORD(v1129[0]) = 257;
            v347 = llvm::BinaryOperator::Create(28, v345, v346, (uint64_t)&p_s2, v342);
            v348 = v4[6];
            v1151[0] = v348;
            if (v348)
              llvm::MetadataTracking::track((uint64_t)v1151, (unsigned __int8 *)v348, 2);
            v349 = (unsigned __int8 **)((char *)v347 + 48);
            if (v1151 == (void **)((char *)v347 + 48))
            {
              if (v1151[0])
                llvm::MetadataTracking::untrack((uint64_t)v1151, (unsigned __int8 *)v1151[0]);
            }
            else
            {
              if (*v349)
                llvm::MetadataTracking::untrack((uint64_t)v347 + 48, *v349);
              v350 = (unsigned __int8 *)v1151[0];
              *v349 = (unsigned __int8 *)v1151[0];
              if (v350)
              {
                llvm::MetadataTracking::retrack((uint64_t)v1151, v350, (uint64_t)v347 + 48);
                v1151[0] = 0;
              }
            }
            if (*v339)
            {
              *(_QWORD *)v339[2] = v339[1];
              v351 = v339[1];
              if (v351)
                *((_QWORD *)v351 + 2) = v339[2];
            }
            *v339 = v347;
            if (v347)
            {
              v354 = *((_QWORD *)v347 + 1);
              v353 = (llvm::Value ***)((char *)v347 + 8);
              v352 = v354;
              *v341 = v354;
              if (v354)
                *(_QWORD *)(v352 + 16) = v341;
              v339[2] = (llvm::Value *)v353;
              *v353 = v339;
            }
            v339 = v340;
          }
          while (v340);
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v4[5] + 5), (uint64_t ***)v4);
        v371 = v4[3];
        v372 = v4[4];
        *v372 = (llvm::EVT *)v371;
        v371[1] = (llvm::EVT *)v372;
        v4[3] = 0;
        v4[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v4);
        goto LABEL_167;
      }
      v249 = *((unsigned __int8 *)v4 + 16);
    }
  }
  if ((v249 & 0xFE) != 0x36)
  {
LABEL_955:
    if (v4 && v249 == 62)
    {
      if (!llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v4))
      {
        v557 = v4[5];
        v558 = v557[5];
        if (v558)
          v559 = (_QWORD *)((char *)v558 - 24);
        else
          v559 = 0;
        if (*((unsigned __int8 *)v559 + 16) - 29 >= 0xB)
          v559 = 0;
        if (*((_BYTE *)v559 + 16) == 32 && (*((_DWORD *)v4 + 5) & 0x7FFFFFF) == 2)
        {
          v560 = (llvm::ConstantInt ***)*(v4 - 4);
          if (*((_BYTE *)v560 + 16) == 16)
          {
            v561 = *(_QWORD **)(a1 + 64);
            v562 = (unint64_t **)(v560 + 3);
            v564 = (*(uint64_t (**)(_QWORD, llvm::ConstantInt ***, llvm::ConstantInt **, uint64_t))(*(_QWORD *)*v561 + 648))(*v561, v560 + 3, *v560, 3) > 1;
            if (v563)
              v564 = v563 > 0;
            if (!v564)
            {
              v565 = v4[-4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)];
              if (*((unsigned __int8 *)v565 + 16) >= 0x1Cu && v565[5] == (llvm::EVT *)v557)
              {
                v566 = v4[1];
                v1108 = (llvm::EVT *****)(v4 + 1);
                if (v566)
                {
                  while (1)
                  {
                    v567 = v566[3];
                    v568 = v567 && *((unsigned __int8 *)v567 + 16) >= 0x1Cu;
                    if (v568 && *((llvm::EVT ***)v567 + 5) != v557)
                      break;
                    v12 = 0;
                    v566 = (llvm::EVT **)v566[1];
                    if (!v566)
                      return v12 & 1;
                  }
                  v848 = v565[1];
                  if (v848)
                  {
                    __pd = 0;
                    v849 = 0;
                    v1100 = 0;
                    do
                    {
                      v850 = *((_QWORD *)v848 + 3);
                      if ((llvm::EVT ***)v850 != v4)
                      {
                        v851 = *(unsigned __int8 *)(v850 + 16);
                        if (v851 < 0x1C)
                          goto LABEL_1528;
                        if (*(llvm::EVT ***)(v850 + 40) != v557)
                        {
                          if (v851 != 62)
                            goto LABEL_1528;
                          if ((*(_DWORD *)(v850 + 20) & 0x7FFFFFF) != 2)
                            goto LABEL_1528;
                          v852 = *(_QWORD *)(v850 - 32);
                          if (*(_BYTE *)(v852 + 16) != 16
                            || *(llvm::EVT ***)(v850 - 64) != v565
                            || *v560 != *(llvm::ConstantInt ***)v852)
                          {
                            goto LABEL_1528;
                          }
                          v854 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v561 + 648))(*v561, v852 + 24) > 1;
                          if (v853)
                            v854 = v853 > 0;
                          if (v854)
                            goto LABEL_1528;
                          if (v849 >= v1100)
                          {
                            v855 = (v849 - __pd) >> 3;
                            v856 = v855 + 1;
                            if ((unint64_t)(v855 + 1) >> 61)
                              abort();
                            if ((v1100 - __pd) >> 2 > v856)
                              v856 = (v1100 - __pd) >> 2;
                            if ((unint64_t)(v1100 - __pd) >= 0x7FFFFFFFFFFFFFF8)
                              v856 = 0x1FFFFFFFFFFFFFFFLL;
                            v1101 = v856;
                            if (v856)
                            {
                              if (v856 >> 61)
                                sub_1C4764EE4();
                              v857 = (char *)operator new(8 * v856);
                            }
                            else
                            {
                              v857 = 0;
                            }
                            v858 = &v857[8 * v855];
                            *(_QWORD *)v858 = v850;
                            v859 = v858 + 8;
                            while (v849 != __pd)
                            {
                              v860 = *((_QWORD *)v849 - 1);
                              v849 -= 8;
                              *((_QWORD *)v858 - 1) = v860;
                              v858 -= 8;
                            }
                            v1100 = &v857[8 * v1101];
                            if (__pd)
                              operator delete(__pd);
                            v849 = v859;
                            __pd = v858;
                          }
                          else
                          {
                            *(_QWORD *)v849 = v850;
                            v849 += 8;
                          }
                        }
                      }
                      v848 = (llvm::EVT *)*((_QWORD *)v848 + 1);
                    }
                    while (v848);
                    if (v849 != __pd)
                    {
                      v861 = __pd;
                      while (1)
                      {
                        v862 = *(_QWORD *)(*(_QWORD *)v861
                                         - 32 * (*(_DWORD *)(*(_QWORD *)v861 + 20) & 0x7FFFFFF)
                                         + 32);
                        v863 = *(unsigned int *)(v862 + 32);
                        if (v863 >= 0x41)
                        {
                          v865 = (void *)operator new[]();
                          memcpy(v865, *(const void **)(v862 + 24), ((unint64_t)(v863 + 63) >> 3) & 0x3FFFFFF8);
                          v866 = 0;
                          v867 = *v562;
                          v868 = (unint64_t)(v863 + 63) >> 6;
                          v869 = (unint64_t *)v865;
                          v870 = v868;
                          do
                          {
                            v871 = *v867++;
                            v872 = *v869 - v871;
                            v873 = *v869 < v871;
                            v874 = *v869 + ~v871;
                            if (v866)
                            {
                              v866 = v874 >= *v869;
                            }
                            else
                            {
                              v874 = v872;
                              v866 = v873;
                            }
                            *v869++ = v874;
                            --v870;
                          }
                          while (v870);
                          *((_QWORD *)v865 + (v868 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v863;
                        }
                        else
                        {
                          v864 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v863;
                          if (!(_DWORD)v863)
                            v864 = 0;
                          v865 = (void *)(v864 & (*(_QWORD *)(v862 + 24) - (_QWORD)*v562));
                        }
                        LODWORD(v1127) = v863;
                        p_s2 = v865;
                        v877 = (*(uint64_t (**)(_QWORD, void **, llvm::ConstantInt **, uint64_t))(*(_QWORD *)*v561 + 648))(*v561, &p_s2, *v560, 3) > 1;
                        if (v875)
                          v878 = v875 > 0;
                        else
                          v878 = v877;
                        if (v1127 >= 0x41 && p_s2)
                          MEMORY[0x1CAA32F9C](p_s2, 0x1000C8000313F17);
                        if (v878)
                          break;
                        v861 += 8;
                        if (v861 == v849)
                        {
                          v1102 = __pd;
                          do
                          {
                            v879 = *(_QWORD *)v1102;
                            v880 = *(_DWORD *)(*(_QWORD *)v1102 + 20) & 0x7FFFFFF;
                            v881 = -v880;
                            v882 = (llvm::EVT ****)(*(_QWORD *)v1102 - 32 * v880);
                            if (*v882)
                            {
                              v883 = v879 + 32 * v881;
                              v885 = *(_QWORD **)(v883 + 16);
                              v884 = (_QWORD *)(v883 + 16);
                              *v885 = *(v884 - 1);
                              v886 = *(v884 - 1);
                              if (v886)
                                *(_QWORD *)(v886 + 16) = *v884;
                            }
                            *v882 = v4;
                            v887 = v4[1];
                            v888 = v879 + 32 * v881;
                            *(_QWORD *)(v888 + 8) = v887;
                            if (v887)
                              v887[2] = (llvm::EVT *)(v888 + 8);
                            *(_QWORD *)(v888 + 16) = v1108;
                            *v1108 = v882;
                            v889 = *(_QWORD *)(v879 - 32 * (*(_DWORD *)(v879 + 20) & 0x7FFFFFF) + 32);
                            v1096 = *v560;
                            v890 = *(unsigned int *)(v889 + 32);
                            if (v890 >= 0x41)
                            {
                              v892 = (void *)operator new[]();
                              memcpy(v892, *(const void **)(v889 + 24), ((unint64_t)(v890 + 63) >> 3) & 0x3FFFFFF8);
                              v893 = 0;
                              v894 = *v562;
                              v895 = (unint64_t)(v890 + 63) >> 6;
                              v896 = (unint64_t *)v892;
                              v897 = v895;
                              do
                              {
                                v898 = *v894++;
                                v899 = *v896 - v898;
                                v900 = *v896 < v898;
                                v901 = *v896 + ~v898;
                                if (v893)
                                {
                                  v893 = v901 >= *v896;
                                }
                                else
                                {
                                  v901 = v899;
                                  v893 = v900;
                                }
                                *v896++ = v901;
                                --v897;
                              }
                              while (v897);
                              *((_QWORD *)v892 + (v895 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v890;
                            }
                            else
                            {
                              v891 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v890;
                              if (!(_DWORD)v890)
                                v891 = 0;
                              v892 = (void *)(v891 & (*(_QWORD *)(v889 + 24) - (_QWORD)*v562));
                            }
                            LODWORD(v1127) = v890;
                            p_s2 = v892;
                            v902 = llvm::ConstantInt::get(v1096, (llvm::Type *)&p_s2, v876);
                            if (v1127 >= 0x41 && p_s2)
                              MEMORY[0x1CAA32F9C](p_s2, 0x1000C8000313F17);
                            v903 = v879 - 32 * (*(_DWORD *)(v879 + 20) & 0x7FFFFFF);
                            v904 = (llvm::Value ***)(v903 + 32);
                            if (*(_QWORD *)(v903 + 32))
                            {
                              **(_QWORD **)(v903 + 48) = *(_QWORD *)(v903 + 40);
                              v905 = *(_QWORD *)(v903 + 40);
                              if (v905)
                                *(_QWORD *)(v905 + 16) = *(_QWORD *)(v903 + 48);
                            }
                            *v904 = v902;
                            if (v902)
                            {
                              v908 = v902[1];
                              v907 = (llvm::Value ****)(v902 + 1);
                              v906 = v908;
                              *(_QWORD *)(v903 + 40) = v908;
                              if (v908)
                                *((_QWORD *)v906 + 2) = v903 + 40;
                              *(_QWORD *)(v903 + 48) = v907;
                              *v907 = v904;
                            }
                            if ((*((_BYTE *)v4 + 17) & 2) == 0)
                              *(_BYTE *)(v879 + 17) &= ~2u;
                            v1102 += 8;
                          }
                          while (v1102 != v849);
                          v12 = 1;
                          goto LABEL_1529;
                        }
                      }
LABEL_1528:
                      v12 = 0;
                      goto LABEL_1529;
                    }
                    v12 = 0;
                    __pd = v849;
LABEL_1529:
                    if (__pd)
                      operator delete(__pd);
                    return v12 & 1;
                  }
                }
              }
            }
          }
        }
        goto LABEL_4;
      }
      v523 = operator new(0x60uLL);
      v524 = v523;
      v525 = (llvm::Value *)(v523 + 8);
      v523[13] = v523[13] & 0x38000000 | 1;
      *(_QWORD *)v523 = 0;
      *((_QWORD *)v523 + 1) = 0;
      *((_QWORD *)v523 + 2) = 0;
      *((_QWORD *)v523 + 3) = v523 + 8;
      v526 = *((_DWORD *)v4 + 5);
      v527 = (uint64_t)v4[-4 * (v526 & 0x7FFFFFF)];
      v528 = *v4;
      if ((v526 & 0x10000000) == 0)
      {
        v575 = 0;
        v574 = &byte_1C871356D;
        goto LABEL_1025;
      }
      v529 = *(_QWORD *)*v528;
      v530 = *(_QWORD *)(v529 + 152);
      v531 = *(unsigned int *)(v529 + 168);
      if ((_DWORD)v531)
      {
        LODWORD(v532) = (v531 - 1) & ((v4 >> 4) ^ (v4 >> 9));
        v533 = (llvm::EVT ****)(v530 + 16 * v532);
        v534 = *v533;
        if (*v533 == v4)
        {
LABEL_1024:
          v573 = v533[1];
          v576 = *v573;
          v574 = (char *)(v573 + 2);
          v575 = v576;
LABEL_1025:
          LOWORD(v1129[0]) = 261;
          p_s2 = v574;
          *(_QWORD *)&v1127 = v575;
          llvm::BitCastInst::BitCastInst((uint64_t)(v523 + 8), v527, (uint64_t)v528, (uint64_t)&p_s2, (uint64_t)v4);
          v577 = (unsigned __int8 *)v4[6];
          v1115 = v577;
          if (v577)
            llvm::MetadataTracking::track((uint64_t)&v1115, v577, 2);
          v580 = (unsigned __int8 *)*((_QWORD *)v524 + 10);
          v579 = (unsigned __int8 **)(v524 + 20);
          v578 = v580;
          if (v580)
            llvm::MetadataTracking::untrack((uint64_t)v579, v578);
          v581 = v1115;
          *v579 = v1115;
          if (v581)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v1115, v581, (uint64_t)v579);
            v1115 = 0;
          }
          v12 = 1;
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v4, v525, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v4[5] + 5), (uint64_t ***)v4);
          v582 = v4[3];
          v583 = v4[4];
          *v583 = (llvm::EVT *)v582;
          v582[1] = (llvm::EVT *)v583;
          v4[3] = 0;
          v4[4] = 0;
          llvm::Value::deleteValue((llvm::Value *)v4);
          sub_1C50882EC(a1, v525, v1107);
          return v12 & 1;
        }
        v535 = 1;
        while (v534 != (llvm::EVT ***)-4096)
        {
          v536 = v532 + v535++;
          v532 = v536 & (v531 - 1);
          v534 = *(llvm::EVT ****)(v530 + 16 * v532);
          if (v534 == v4)
          {
            v533 = (llvm::EVT ****)(v530 + 16 * v532);
            goto LABEL_1024;
          }
        }
      }
      v533 = (llvm::EVT ****)(v530 + 16 * v531);
      goto LABEL_1024;
    }
    if (!v4 || v249 != 95)
      goto LABEL_973;
    v537 = (uint64_t)*(v4 - 4);
    v538 = *(unsigned __int8 *)(v537 + 16);
    if ((!v537 || v538 != 81) && (v538 != 82 || *(unsigned __int8 *)(v537 + 17) > 1u))
      goto LABEL_4;
    v539 = *(_QWORD *)(v537 + 8);
    if (!v539 || *(_QWORD *)(v539 + 8))
      goto LABEL_4;
    v540 = *(_DWORD *)(v537 + 20);
    if ((v540 & 0x40000000) != 0)
      v541 = *(_QWORD **)(v537 - 8);
    else
      v541 = (_QWORD *)(v537 - 32 * (v540 & 0x7FFFFFF));
    v651 = (_QWORD *)*v541;
    v652 = v541[4];
    v653 = (*(unsigned __int8 *)(*v541 + 16) < 0x14uLL) & (0xB0000u >> *(_BYTE *)(*v541 + 16));
    v654 = *(unsigned __int8 *)(v652 + 16);
    v71 = v654 > 0x13;
    v655 = (1 << v654) & 0xB0000;
    if (v71 || v655 == 0)
    {
      if ((v653 & 1) == 0)
        goto LABEL_4;
    }
    else if ((v653 & 1) != 0)
    {
LABEL_1162:
      v12 = 1;
      v52 = (llvm::ValueAsMetadata *)v4;
      v53 = (llvm::Value *)v537;
LABEL_52:
      llvm::Value::doRAUW(v52, v53, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v4[5] + 5), (uint64_t ***)v4);
      v54 = v4[3];
      v55 = v4[4];
      *v55 = (llvm::EVT *)v54;
      v54[1] = (llvm::EVT *)v55;
      v4[3] = 0;
      v4[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v4);
      return v12 & 1;
    }
    v677 = operator new(0x60uLL);
    v678 = v677;
    v677[13] = v677[13] & 0x38000000 | 1;
    v679 = (char *)(v677 + 8);
    *(_QWORD *)v677 = 0;
    *((_QWORD *)v677 + 1) = 0;
    *((_QWORD *)v677 + 2) = 0;
    *((_QWORD *)v677 + 3) = v677 + 8;
    if ((_DWORD)v653)
      v680 = (_QWORD *)v652;
    else
      v680 = v651;
    LOWORD(v1129[0]) = 257;
    v681 = (llvm::Value *)llvm::FreezeInst::FreezeInst((uint64_t)(v677 + 8), v680, (uint64_t)&p_s2, v537);
    llvm::Value::takeName(v681, (llvm::Value *)v4);
    v682 = *(_DWORD *)(v537 + 20);
    if ((v682 & 0x40000000) != 0)
      v683 = *(_QWORD *)(v537 - 8);
    else
      v683 = v537 - 32 * (v682 & 0x7FFFFFF);
    v684 = v683 + 32 * v653;
    v685 = v684;
    if (*(_QWORD *)v684)
    {
      **(_QWORD **)(v684 + 16) = *(_QWORD *)(v684 + 8);
      v686 = *(_QWORD *)(v684 + 8);
      if (v686)
        *(_QWORD *)(v686 + 16) = *(_QWORD *)(v684 + 16);
    }
    *(_QWORD *)v684 = v679;
    v689 = *((_QWORD *)v678 + 5);
    v688 = (uint64_t *)(v678 + 10);
    v687 = v689;
    *(_QWORD *)(v684 + 8) = v689;
    v690 = v684 + 8;
    if (v689)
      *(_QWORD *)(v687 + 16) = v690;
    *(_QWORD *)(v683 + 32 * v653 + 16) = v688;
    *v688 = v685;
    goto LABEL_1162;
  }
  v473 = (uint64_t)*(v4 - 4);
  if (v473)
  {
    if (*(_BYTE *)(v473 + 16) == 16)
    {
      v474 = *(_QWORD *)(a1 + 48);
      if (*(_BYTE *)(v474 + 17))
      {
        v475 = *(_QWORD *)(a1 + 720);
        v476 = v4[5];
        __s2 = 0;
        v1144 = 0;
        LODWORD(v1145) = 0;
        v1099 = v475;
        v477 = sub_1C47A7FD0(v474, v475, (uint64_t)*v4, 0);
        if (v477)
          v478 = *(_QWORD *)(v474 + 8 * v477 + 96) != 0;
        else
          v478 = 0;
        v479 = v4[1];
        if (!v479)
          goto LABEL_1016;
        v1087 = v473;
        v1089 = 0;
        v1090 = v476;
        v1092 = v474;
        v1088 = v478;
        while (1)
        {
          v480 = v479;
          v481 = (llvm::EVT ***)(v479 + 1);
          v479 = (llvm::EVT **)v479[1];
          v482 = v481[2];
          v483 = *((unsigned __int8 *)v482 + 16);
          if (v483 == 83)
            goto LABEL_913;
          if (v483 != 66)
          {
            if (v483 != 56)
              goto LABEL_913;
            v484 = *((_DWORD *)v482 + 5);
            v485 = (v484 & 0x40000000) != 0 ? (uint64_t)*(v482 - 1) : (uint64_t)&v482[-4 * (v484 & 0x7FFFFFF)];
            v486 = *(_QWORD *)(v485 + 32);
            if (*(_BYTE *)(v486 + 16) != 16)
              goto LABEL_913;
            LODWORD(v1127) = *(_DWORD *)(v486 + 32);
            v487 = v479;
            if (v1127 > 0x40)
            {
              p_s2 = (void *)operator new[]();
              memcpy(p_s2, *(const void **)(v486 + 24), (((unint64_t)v1127 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              p_s2 = *(void **)(v486 + 24);
            }
            llvm::APInt::operator+=((uint64_t)&p_s2, 1uLL);
            v488 = v1127;
            v489 = p_s2;
            LODWORD(v1127) = 0;
            if (v488 >= 0x41)
            {
              v491 = 0;
              v492 = *(_QWORD *)(v486 + 24);
              v493 = (unint64_t)(v488 + 63) >> 6;
              do
              {
                v489[v491] &= *(_QWORD *)(v492 + v491 * 8);
                ++v491;
              }
              while (v493 != v491);
              v494 = 0;
              do
              {
                v71 = v493-- < 1;
                if (v71)
                  break;
                v495 = v489[v493];
                v494 += __clz(v495);
              }
              while (!v495);
              v496 = v488 | 0xFFFFFFC0;
              if ((v488 & 0x3F) == 0)
                v496 = 0;
              v497 = v494 + v496;
              if (v489)
              {
                MEMORY[0x1CAA32F9C](v489, 0x1000C8000313F17);
                if (v1127 >= 0x41)
                {
                  if (p_s2)
                    MEMORY[0x1CAA32F9C](p_s2, 0x1000C8000313F17);
                }
              }
              v490 = v497 == (_DWORD)v488;
            }
            else
            {
              v490 = (*(_QWORD *)(v486 + 24) & (unint64_t)p_s2) == 0;
            }
            v479 = v487;
            v476 = v1090;
            if (!v490)
              goto LABEL_913;
          }
          v498 = (llvm::EVT **)v482[5];
          v1148 = v498;
          if (v498 == v476)
          {
            if (*((_BYTE *)v482 + 16) != 66 || !v478)
              goto LABEL_913;
            v500 = sub_1C47A7FD0(v1092, v1099, (uint64_t)*v482, 0);
            if (v500)
            {
              if (*(_QWORD *)(v1092 + 8 * v500 + 96))
                goto LABEL_913;
            }
            v1151[1] = 0;
            v1151[0] = 0;
            LODWORD(v1152) = 0;
            if (v482[1])
              __asm { BR              X9 }
            v1089 = 0;
            MEMORY[0x1CAA32FB4](0, 8);
          }
          else
          {
            v502 = sub_1C6180A54((uint64_t)&__s2, (uint64_t *)&v1148);
            v503 = (llvm::EVT ***)v502[1];
            if (!v503)
            {
              v504 = v502;
              v505 = (llvm::EVT *)(v498 + 5);
              for (m = v498[6]; m != v505; m = (llvm::EVT *)*((_QWORD *)m + 1))
              {
                v507 = (_QWORD *)((char *)m - 24);
                if (!m)
                  v507 = 0;
                if (*((_BYTE *)v507 + 16) != 83)
                {
                  v508 = *((unsigned __int8 *)m - 8) - 38;
                  v71 = v508 > 0x38;
                  v509 = (1 << v508) & 0x100060000000001;
                  if (v71 || v509 == 0)
                    v505 = m;
                  else
                    v505 = (llvm::EVT *)*((_QWORD *)m + 1);
                  break;
                }
              }
              v511 = *(v4 - 8);
              if (v505)
                v512 = (uint64_t)v505 - 24;
              else
                v512 = 0;
              if (*((_BYTE *)v4 + 16) == 55)
              {
                LOWORD(v1129[0]) = 257;
                v513 = 27;
              }
              else
              {
                LOWORD(v1129[0]) = 257;
                v513 = 26;
              }
              v514 = llvm::BinaryOperator::Create(v513, v511, v1087, (uint64_t)&p_s2, v512);
              v504[1] = v514;
              v515 = v514;
              v516 = v4[6];
              __dst = v516;
              if (v516)
                llvm::MetadataTracking::track((uint64_t)&__dst, (unsigned __int8 *)v516, 2);
              v517 = (unsigned __int8 **)((char *)v515 + 48);
              if (&__dst == (void **)((char *)v515 + 48))
              {
                if (__dst)
                  llvm::MetadataTracking::untrack((uint64_t)&__dst, (unsigned __int8 *)__dst);
              }
              else
              {
                if (*v517)
                  llvm::MetadataTracking::untrack((uint64_t)v515 + 48, *v517);
                v518 = (unsigned __int8 *)__dst;
                *v517 = (unsigned __int8 *)__dst;
                if (v518)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&__dst, v518, (uint64_t)v515 + 48);
                  __dst = 0;
                }
              }
              v503 = (llvm::EVT ***)v504[1];
              v1089 = 1;
            }
            if (*v480)
            {
              *(_QWORD *)v480[2] = v480[1];
              v519 = v480[1];
              if (v519)
                *((_QWORD *)v519 + 2) = v480[2];
            }
            *v480 = (llvm::EVT *)v503;
            if (v503)
            {
              v522 = v503[1];
              v520 = v503 + 1;
              v521 = v522;
              *v481 = v522;
              if (v522)
                v521[2] = (llvm::EVT *)v481;
              v480[2] = (llvm::EVT *)v520;
              *v520 = v480;
            }
            v476 = v1090;
          }
          v478 = v1088;
LABEL_913:
          if (!v479)
          {
            if (v4[1])
            {
              MEMORY[0x1CAA32FB4](__s2, 8);
              if ((v1089 & 1) == 0)
              {
                v249 = *((unsigned __int8 *)v4 + 16);
                goto LABEL_955;
              }
LABEL_167:
              v12 = 1;
              return v12 & 1;
            }
LABEL_1016:
            p_s2 = (char *)&v1127 + 8;
            *(_QWORD *)&v1127 = 0x100000000;
            llvm::findDbgUsers((uint64_t)&p_s2, (uint64_t)v4);
            llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)v4, (uint64_t *)p_s2, v1127);
            if (p_s2 != (char *)&v1127 + 8)
              free(p_s2);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v4[5] + 5), (uint64_t ***)v4);
            v569 = v4[3];
            v570 = v4[4];
            *v570 = (llvm::EVT *)v569;
            v569[1] = (llvm::EVT *)v570;
            v4[3] = 0;
            v4[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v4);
            v126 = __s2;
LABEL_164:
            MEMORY[0x1CAA32FB4](v126, 8);
            goto LABEL_167;
          }
        }
      }
    }
  }
LABEL_973:
  p_s2 = (char *)&v1127 + 8;
  *(_QWORD *)&v1127 = 0x400000000;
  if (!(*(unsigned int (**)(_QWORD, llvm::EVT ***, void **))(**(_QWORD **)(a1 + 48) + 1224))(*(_QWORD *)(a1 + 48), v4, &p_s2))
  {
    v542 = 0;
    goto LABEL_975;
  }
  v584 = v4[5];
  v1151[0] = &v1152;
  v1151[1] = (void *)0x400000000;
  v1157 = v4;
  v1123 = 0;
  v1124 = 0;
  LODWORD(v1125[0]) = 0;
  v585 = (llvm::EVT **)v584[6];
  if (v585 != v584 + 5)
  {
    v586 = 0;
    do
    {
      v587 = v585 - 3;
      if (!v585)
        v587 = 0;
      __s2 = v587;
      sub_1C617C470((uint64_t)&v1123, (uint64_t *)&__s2)[1] = v586;
      v585 = (llvm::EVT **)v585[1];
      ++v586;
    }
    while (v585 != v584 + 5);
  }
  v588 = (uint64_t)v4;
  if ((_DWORD)v1127)
  {
    v657 = 8 * v1127;
    v658 = (char *)p_s2 - 8;
    v588 = (uint64_t)v4;
    do
    {
      v659 = *(uint64_t **)&v658[v657];
      v660 = *v659;
      __s2 = (void *)v660;
      if (*(_BYTE *)(v660 + 16) != 83)
      {
        if (*(llvm::EVT ***)(v660 + 40) == v584)
        {
          v662 = sub_1C617C470((uint64_t)&v1123, (uint64_t *)&__s2)[1];
          if (v662 < sub_1C617C470((uint64_t)&v1123, (uint64_t *)&v1157)[1])
          {
            v1157 = (_QWORD *)v660;
            v588 = v660;
          }
        }
        else
        {
          v661 = LODWORD(v1151[1]);
          if (LODWORD(v1151[1]) >= (unint64_t)HIDWORD(v1151[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1151, (uint64_t)&v1152, LODWORD(v1151[1]) + 1, 8);
            v661 = LODWORD(v1151[1]);
          }
          *((_QWORD *)v1151[0] + v661) = v659;
          ++LODWORD(v1151[1]);
        }
      }
      v657 -= 8;
    }
    while (v657);
  }
  __s2 = 0;
  v1144 = 0;
  LODWORD(v1145) = 0;
  v1147[0] = 0;
  v1147[1] = 0;
  v1146 = 0;
  v1119 = 0;
  v1120 = 0;
  v1121[0] = 0;
  v542 = LODWORD(v1151[1]) != 0;
  if (LODWORD(v1151[1]))
  {
    v589 = (uint64_t *)v1151[0];
    v590 = (char *)v1151[0] + 8 * LODWORD(v1151[1]);
    while (1)
    {
      v591 = v588;
      v592 = *v589;
      v1148 = 0;
      v1148 = *(void **)v592;
      llvm::Instruction::clone((llvm::Instruction *)v1148);
      v588 = v593;
      sub_1C61B6040((uint64_t *)&v1119, &v1148)[1] = v593;
      sub_1C509CEFC(&__s2, &v1148);
      v594 = *(_QWORD *)(v591 + 40);
      *(_QWORD *)(v588 + 40) = v594;
      *(_WORD *)(v594 + 18) &= ~0x8000u;
      if ((*(_BYTE *)(v588 + 23) & 0x10) != 0)
      {
        v616 = *(_QWORD *)(v594 + 56);
        if (v616)
        {
          v617 = *(llvm::ValueSymbolTable **)(v616 + 104);
          if (v617)
            llvm::ValueSymbolTable::reinsertValue(v617, (llvm::Value *)v588);
        }
      }
      v596 = *(_QWORD *)(v591 + 24);
      v595 = (_QWORD *)(v591 + 24);
      *(_QWORD *)(v588 + 32) = v595;
      *(_QWORD *)(v588 + 24) = v596;
      *(_QWORD *)(v596 + 8) = v588 + 24;
      *v595 = v588 + 24;
      sub_1C4774094(__pa, v588);
      v597 = *(void **)(v592 + 24);
      __dst = v597;
      if (v1121[0])
      {
        v601 = ((v597 >> 4) ^ (v597 >> 9)) & (v1121[0] - 1);
        v602 = (void *)*((_QWORD *)v1119 + 2 * v601);
        if (v597 == v602)
        {
LABEL_1050:
          v603 = sub_1C61B6040((uint64_t *)&v1119, &__dst);
          v604 = *(_QWORD *)(v592 + 24);
          v605 = *(_DWORD *)(v604 + 20);
          if ((v605 & 0x40000000) != 0)
            v606 = *(_QWORD *)(v604 - 8);
          else
            v606 = v604 - 32 * (v605 & 0x7FFFFFF);
          v607 = v603[1];
          v608 = *(_DWORD *)(v607 + 20);
          if ((v608 & 0x40000000) != 0)
            v609 = *(_QWORD *)(v607 - 8);
          else
            v609 = v607 - 32 * (v608 & 0x7FFFFFF);
          v610 = ((unint64_t)(v592 - v606) >> 5);
          v611 = v609 + 32 * v610;
          if (*(_QWORD *)v611)
          {
            **(_QWORD **)(v611 + 16) = *(_QWORD *)(v611 + 8);
            v612 = *(_QWORD *)(v611 + 8);
            if (v612)
              *(_QWORD *)(v612 + 16) = *(_QWORD *)(v611 + 16);
          }
          *(_QWORD *)v611 = v588;
          if (v588)
          {
            v613 = (_QWORD *)(v588 + 8);
            v614 = *(_QWORD *)(v588 + 8);
            v615 = v609 + 32 * v610;
            *(_QWORD *)(v615 + 8) = v614;
            if (v614)
              *(_QWORD *)(v614 + 16) = v615 + 8;
            *(_QWORD *)(v615 + 16) = v613;
            *v613 = v611;
          }
          goto LABEL_1061;
        }
        v618 = 1;
        while (v602 != (void *)-4096)
        {
          v619 = v601 + v618++;
          v601 = v619 & (v1121[0] - 1);
          v602 = (void *)*((_QWORD *)v1119 + 2 * v601);
          if (v597 == v602)
            goto LABEL_1050;
        }
      }
      if (*(_QWORD *)v592)
      {
        **(_QWORD **)(v592 + 16) = *(_QWORD *)(v592 + 8);
        v598 = *(_QWORD *)(v592 + 8);
        if (v598)
          *(_QWORD *)(v598 + 16) = *(_QWORD *)(v592 + 16);
      }
      *(_QWORD *)v592 = v588;
      if (v588)
      {
        v599 = (_QWORD *)(v588 + 8);
        v600 = *(_QWORD *)(v588 + 8);
        *(_QWORD *)(v592 + 8) = v600;
        if (v600)
          *(_QWORD *)(v600 + 16) = v592 + 8;
        *(_QWORD *)(v592 + 16) = v599;
        *v599 = v592;
      }
LABEL_1061:
      if (++v589 == (uint64_t *)v590)
      {
        v663 = v1146;
        v664 = (uint64_t ****)v1147[0];
        while (v663 != v664)
        {
          v665 = *v663;
          if (!(*v663)[1])
          {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v665[5] + 5), *v663);
            v666 = v665[3];
            v667 = v665[4];
            *v667 = (uint64_t *)v666;
            v666[1] = (uint64_t *)v667;
            v665[3] = 0;
            v665[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v665);
          }
          ++v663;
        }
        break;
      }
    }
  }
  MEMORY[0x1CAA32FB4](v1119, 8);
  sub_1C6176BF8(&__s2);
  MEMORY[0x1CAA32FB4](v1123, 8);
  if (v1151[0] != &v1152)
    free(v1151[0]);
LABEL_975:
  if (p_s2 != (char *)&v1127 + 8)
    free(p_s2);
  if (v542)
    goto LABEL_167;
  v12 = 0;
  v543 = *((unsigned __int8 *)v4 + 16);
  if (v543 > 0x53)
  {
    switch(*((_BYTE *)v4 + 16))
    {
      case 'T':
        v112 = sub_1C5093378(a1, (uint64_t)v4, v1107);
        goto LABEL_699;
      case 'U':
        if (byte_1ED7F5440)
          goto LABEL_4;
        v1109 = (llvm *)v1125;
        v1123 = (llvm *)v1125;
        v1125[0] = v4;
        v1124 = 0x200000001;
        v639 = (_QWORD ***)(v4 + 3);
        if (!v4)
          v639 = 0;
        v640 = (llvm::EVT **)v639[1];
        if (v640 == v4[5] + 5)
        {
          v641 = 1;
          v694 = (llvm *)v1125;
        }
        else
        {
          v641 = 1;
          do
          {
            v642 = v640 - 3;
            if (!v640)
              v642 = 0;
            v643 = *((unsigned __int8 *)v642 + 16);
            if (v643 == 85)
              v644 = v642;
            else
              v644 = 0;
            if (!v640 || v643 != 85 || *(v4 - 12) != (llvm::EVT **)*(v644 - 12))
              break;
            if (v641 >= HIDWORD(v1124))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1123, (uint64_t)v1125, v641 + 1, 8);
              v641 = v1124;
            }
            *((_QWORD *)v1123 + v641) = v644;
            v641 = v1124 + 1;
            LODWORD(v1124) = v1124 + 1;
            v640 = (llvm::EVT **)v640[1];
          }
          while (v640 != v4[5] + 5);
          v694 = v1123;
        }
        v750 = *((_QWORD *)v694 + v641 - 1);
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(v750 + 32);
        if (*((_DWORD *)**(v4 - 12) + 2) != 269)
          goto LABEL_1517;
        if ((*((_BYTE *)v4 + 23) & 0x20) == 0)
          goto LABEL_1280;
        v751 = *(_QWORD *)**v4;
        p_s2 = v4;
        v752 = *(_DWORD *)(v751 + 2496);
        if (v752)
        {
          v753 = *(_QWORD *)(v751 + 2480);
          v754 = v752 - 1;
          v755 = v754 & ((v4 >> 4) ^ (v4 >> 9));
          v756 = (llvm::EVT ****)(v753 + 40 * v755);
          v757 = *v756;
          if (*v756 == v4)
            goto LABEL_1276;
          v758 = 0;
          v759 = 1;
          while (v757 != (llvm::EVT ***)-4096)
          {
            if (v758)
              v760 = 0;
            else
              v760 = v757 == (llvm::EVT ***)-8192;
            if (v760)
              v758 = v756;
            v761 = v755 + v759++;
            v755 = v761 & v754;
            v756 = (llvm::EVT ****)(v753 + 40 * v755);
            v757 = *v756;
            if (*v756 == v4)
            {
LABEL_1276:
              v762 = *((unsigned int *)v756 + 4);
              if ((_DWORD)v762)
              {
                v763 = v756[1] + 1;
                v764 = 16 * v762;
                while (*((_DWORD *)v763 - 2) != 15)
                {
                  v763 += 2;
                  v764 -= 16;
                  if (!v764)
                    goto LABEL_1280;
                }
                if (*v763)
                {
LABEL_1517:
                  v12 = 0;
                  goto LABEL_1518;
                }
              }
LABEL_1280:
              if ((*(unsigned int (**)(_QWORD, BOOL))(**(_QWORD **)(a1 + 48) + 96))(*(_QWORD *)(a1 + 48), ((_DWORD)(*v4)[1] & 0xFE) == 18))
              {
                if (!*(_BYTE *)(*(_QWORD *)(a1 + 48) + 184288))
                  goto LABEL_1517;
                v765 = *(_QWORD **)(a1 + 64);
                p_s2 = 0;
                v1151[0] = 0;
                if (!llvm::Instruction::extractProfMetadata((llvm::Instruction *)v4, (unint64_t *)&p_s2, (unint64_t *)v1151))goto LABEL_1299;
                v766 = (unint64_t)p_s2;
                v767 = (unint64_t)v1151[0] + (unint64_t)p_s2;
                if (!((char *)v1151[0] + (unint64_t)p_s2))
                  goto LABEL_1299;
                if (p_s2 <= v1151[0])
                  v766 = (unint64_t)v1151[0];
                v768 = HIDWORD(v767);
                if (HIDWORD(v767))
                {
                  LOBYTE(v768) = 0;
                  v1084 = (unint64_t)v1151[0] + (unint64_t)p_s2;
                  do
                  {
                    v767 = v1084 >> 1;
                    LOBYTE(v768) = v768 + 1;
                    v1085 = v1084 >> 33;
                    v1084 >>= 1;
                  }
                  while (v1085);
                }
                v769 = v766 >> v768;
                if (v767 != 0x80000000)
                  v769 = (((unint64_t)(v766 >> v768) << 31) | (v767 >> 1)) / v767;
                if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v765 + 80))(*v765) >= v769)
                {
LABEL_1299:
                  v770 = (uint64_t)*(v4 - 12);
                  if (!v770)
                    goto LABEL_1517;
                  v771 = *(unsigned __int8 *)(v770 + 16);
                  if (v771 < 0x1C || v771 - 83 < 0xFFFFFFFE)
                    goto LABEL_1517;
                  v773 = *(_QWORD *)(v770 + 8);
                  if (!v773
                    || *(_QWORD *)(v773 + 8)
                    || (sub_1C509DB3C(v765, (uint64_t)*(v4 - 8)) & 1) == 0
                    && (sub_1C509DB3C(v765, (uint64_t)*(v4 - 4)) & 1) == 0)
                  {
                    goto LABEL_1517;
                  }
                }
                if (*(_BYTE *)(a1 + 712)
                  || llvm::shouldOptimizeForSize((llvm::BasicBlock *)v4[5], *(_QWORD *)(a1 + 104), *(uint64_t ***)(a1 + 88)))
                {
                  goto LABEL_1517;
                }
              }
              v774 = *(_QWORD *)(a1 + 728);
              *(_QWORD *)(a1 + 728) = 0;
              if (v774)
                sub_1C4DC4DE4(a1 + 728, v774);
              v775 = (uint64_t *)v4[5];
              v776 = *(uint64_t **)(v750 + 32);
              p_s2 = "select.end";
              LOWORD(v1129[0]) = 259;
              v777 = llvm::BasicBlock::splitBasicBlock(v775, v776, (uint64_t)&p_s2, 0);
              v778 = *(uint64_t **)(a1 + 88);
              BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(v778, (uint64_t)v775);
              __pc = (llvm::BasicBlock *)v777;
              sub_1C4DAD074(*v778, v777, BlockFreq);
              v1095 = (llvm::ConstantInt *)v775;
              v780 = (uint64_t *)v775[5];
              v1093 = v775 + 5;
              if (v780 == v775 + 5)
              {
                v781 = 0;
              }
              else
              {
                if (v780)
                  v967 = v780 - 3;
                else
                  v967 = 0;
                if (*((unsigned __int8 *)v967 + 16) - 29 >= 0xB)
                  v781 = 0;
                else
                  v781 = v967;
              }
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v781[5] + 40, (uint64_t ***)v781);
              v968 = v781[3];
              v969 = (_QWORD *)v781[4];
              *v969 = v968;
              *(_QWORD *)(v968 + 8) = v969;
              v781[3] = 0;
              v781[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v781);
              v970 = 0;
              if (!(_DWORD)v1124)
                goto LABEL_1694;
              v970 = 0;
              v971 = 0;
              v972 = 0;
              v973 = 0;
              v974 = v1123;
              v1104 = (uint64_t *)(v777 + 24);
              v975 = 8 * v1124;
              do
              {
                v976 = *(_QWORD *)v974;
                if (sub_1C509DB3C(*(_QWORD **)(a1 + 64), *(_QWORD *)(*(_QWORD *)v974 - 64)))
                {
                  if (!v970)
                  {
                    v977 = **(_QWORD ***)v976;
                    p_s2 = "select.true.sink";
                    LOWORD(v1129[0]) = 259;
                    v978 = *((_QWORD *)__pc + 7);
                    v970 = operator new();
                    *(_QWORD *)v970 = *v977 + 1600;
                    *(_QWORD *)(v970 + 8) = 0;
                    v979 = *(_DWORD *)(v970 + 20) & 0xC0000000;
                    *(_QWORD *)(v970 + 24) = 0;
                    v980 = v970 + 24;
                    *(_DWORD *)(v970 + 16) = 22;
                    *(_DWORD *)(v970 + 20) = v979;
                    *(_QWORD *)(v970 + 32) = 0;
                    *(_QWORD *)(v970 + 40) = v970 + 40;
                    *(_QWORD *)(v970 + 48) = v970 + 40;
                    *(_QWORD *)(v970 + 56) = 0;
                    if (v978)
                    {
                      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v978 + 72, (_QWORD *)v970);
                      v981 = *v1104;
                      *(_QWORD *)(v970 + 24) = *v1104;
                      *(_QWORD *)(v970 + 32) = v1104;
                      *(_QWORD *)(v981 + 8) = v980;
                      *v1104 = v980;
                    }
                    llvm::Value::setName((uint64_t ***)v970, (uint64_t)&p_s2);
                    v982 = (char *)operator new(0x60uLL);
                    *((_DWORD *)v982 + 13) = *((_DWORD *)v982 + 13) & 0x38000000 | 1;
                    v972 = (llvm::Instruction *)(v982 + 32);
                    *(_QWORD *)v982 = 0;
                    *((_QWORD *)v982 + 1) = 0;
                    *((_QWORD *)v982 + 2) = 0;
                    *((_QWORD *)v982 + 3) = v982 + 32;
                    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v982 + 32), __pc, (llvm::BasicBlock *)v970);
                    v983 = *(_QWORD **)(v976 + 48);
                    v1157 = v983;
                    if (v983)
                      llvm::MetadataTracking::track((uint64_t)&v1157, (unsigned __int8 *)v983, 2);
                    v986 = (unsigned __int8 *)*((_QWORD *)v982 + 10);
                    v985 = v982 + 80;
                    v984 = v986;
                    if (v986)
                      llvm::MetadataTracking::untrack((uint64_t)v985, v984);
                    v987 = (unsigned __int8 *)v1157;
                    *v985 = v1157;
                    if (v987)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)&v1157, v987, (uint64_t)v985);
                      v1157 = 0;
                    }
                  }
                  llvm::Instruction::moveBefore(*(llvm::Instruction **)(v976 - 64), v972);
                }
                if (sub_1C509DB3C(*(_QWORD **)(a1 + 64), *(_QWORD *)(v976 - 32)))
                {
                  if (!v971)
                  {
                    v988 = **(_QWORD ***)v976;
                    p_s2 = "select.false.sink";
                    LOWORD(v1129[0]) = 259;
                    v989 = *((_QWORD *)__pc + 7);
                    v971 = operator new();
                    *(_QWORD *)v971 = *v988 + 1600;
                    *(_QWORD *)(v971 + 8) = 0;
                    v990 = *(_DWORD *)(v971 + 20) & 0xC0000000;
                    *(_QWORD *)(v971 + 24) = 0;
                    v991 = v971 + 24;
                    *(_DWORD *)(v971 + 16) = 22;
                    *(_DWORD *)(v971 + 20) = v990;
                    *(_QWORD *)(v971 + 32) = 0;
                    *(_QWORD *)(v971 + 40) = v971 + 40;
                    *(_QWORD *)(v971 + 48) = v971 + 40;
                    *(_QWORD *)(v971 + 56) = 0;
                    if (v989)
                    {
                      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v989 + 72, (_QWORD *)v971);
                      v992 = *v1104;
                      *(_QWORD *)(v971 + 24) = *v1104;
                      *(_QWORD *)(v971 + 32) = v1104;
                      *(_QWORD *)(v992 + 8) = v991;
                      *v1104 = v991;
                    }
                    llvm::Value::setName((uint64_t ***)v971, (uint64_t)&p_s2);
                    v993 = (char *)operator new(0x60uLL);
                    *((_DWORD *)v993 + 13) = *((_DWORD *)v993 + 13) & 0x38000000 | 1;
                    v973 = (llvm::Instruction *)(v993 + 32);
                    *(_QWORD *)v993 = 0;
                    *((_QWORD *)v993 + 1) = 0;
                    *((_QWORD *)v993 + 2) = 0;
                    *((_QWORD *)v993 + 3) = v993 + 32;
                    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v993 + 32), __pc, (llvm::BasicBlock *)v971);
                    v994 = *(void **)(v976 + 48);
                    v1148 = v994;
                    if (v994)
                      llvm::MetadataTracking::track((uint64_t)&v1148, (unsigned __int8 *)v994, 2);
                    v997 = (unsigned __int8 *)*((_QWORD *)v993 + 10);
                    v996 = (void **)(v993 + 80);
                    v995 = v997;
                    if (v997)
                      llvm::MetadataTracking::untrack((uint64_t)v996, v995);
                    v998 = (unsigned __int8 *)v1148;
                    *v996 = v1148;
                    if (v998)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)&v1148, v998, (uint64_t)v996);
                      v1148 = 0;
                    }
                  }
                  llvm::Instruction::moveBefore(*(llvm::Instruction **)(v976 - 32), v973);
                }
                v974 = (llvm *)((char *)v974 + 8);
                v975 -= 8;
              }
              while (v975);
              if (v970 == v971)
              {
LABEL_1694:
                v999 = **v4;
                p_s2 = "select.false";
                LOWORD(v1129[0]) = 259;
                v1000 = *((_QWORD *)__pc + 7);
                v971 = operator new();
                *(_QWORD *)v971 = *(_QWORD *)v999 + 1600;
                *(_QWORD *)(v971 + 8) = 0;
                v1001 = *(_DWORD *)(v971 + 20) & 0xC0000000;
                *(_QWORD *)(v971 + 24) = 0;
                v1002 = v971 + 24;
                *(_DWORD *)(v971 + 16) = 22;
                *(_DWORD *)(v971 + 20) = v1001;
                *(_QWORD *)(v971 + 32) = 0;
                *(_QWORD *)(v971 + 40) = v971 + 40;
                *(_QWORD *)(v971 + 48) = v971 + 40;
                *(_QWORD *)(v971 + 56) = 0;
                if (v1000)
                {
                  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v1000 + 72, (_QWORD *)v971);
                  v1003 = *((_QWORD *)__pc + 3);
                  *(_QWORD *)(v971 + 24) = v1003;
                  *(_QWORD *)(v971 + 32) = (char *)__pc + 24;
                  *(_QWORD *)(v1003 + 8) = v1002;
                  *((_QWORD *)__pc + 3) = v1002;
                }
                llvm::Value::setName((uint64_t ***)v971, (uint64_t)&p_s2);
                v1004 = (char *)operator new(0x60uLL);
                *((_DWORD *)v1004 + 13) = *((_DWORD *)v1004 + 13) & 0x38000000 | 1;
                *(_QWORD *)v1004 = 0;
                *((_QWORD *)v1004 + 1) = 0;
                *((_QWORD *)v1004 + 2) = 0;
                *((_QWORD *)v1004 + 3) = v1004 + 32;
                llvm::BranchInst::BranchInst((llvm::BranchInst *)(v1004 + 32), __pc, (llvm::BasicBlock *)v971);
                v1005 = v4[6];
                __dst = v1005;
                if (v1005)
                  llvm::MetadataTracking::track((uint64_t)&__dst, (unsigned __int8 *)v1005, 2);
                v1008 = (unsigned __int8 *)*((_QWORD *)v1004 + 10);
                v1007 = (void **)(v1004 + 80);
                v1006 = v1008;
                if (v1008)
                  llvm::MetadataTracking::untrack((uint64_t)v1007, v1006);
                v1009 = (unsigned __int8 *)__dst;
                *v1007 = __dst;
                if (v1009)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&__dst, v1009, (uint64_t)v1007);
                  __dst = 0;
                }
              }
              if (v970)
              {
                v1011 = __pc;
                if (v971)
                  v1011 = (llvm::BasicBlock *)v971;
                v1105 = v1011;
                if (!v971)
                  v971 = (uint64_t)v1095;
                v1010 = (llvm::BasicBlock *)v970;
              }
              else
              {
                v970 = (uint64_t)v1095;
                v1010 = __pc;
                v1105 = (llvm::BasicBlock *)v971;
              }
              sub_1C4773D54((uint64_t)&p_s2, (uint64_t)v4, 0, 0, 0);
              v1012 = *(v4 - 12);
              if ((*((_BYTE *)v4 + 23) & 0x10) != 0)
              {
                v1013 = *(_QWORD *)**v4;
                v1014 = *(_QWORD *)(v1013 + 152);
                v1015 = *(unsigned int *)(v1013 + 168);
                if ((_DWORD)v1015)
                {
                  LODWORD(v1016) = (v1015 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                  v1017 = (llvm::EVT ****)(v1014 + 16 * v1016);
                  v1018 = *v1017;
                  if (*v1017 != v4)
                  {
                    v1019 = 1;
                    do
                    {
                      if (v1018 == (llvm::EVT ***)-4096)
                        goto LABEL_1724;
                      v1020 = v1016 + v1019++;
                      v1016 = v1020 & (v1015 - 1);
                      v1018 = *(llvm::EVT ****)(v1014 + 16 * v1016);
                    }
                    while (v1018 != v4);
                    v1017 = (llvm::EVT ****)(v1014 + 16 * v1016);
                  }
                }
                else
                {
LABEL_1724:
                  v1017 = (llvm::EVT ****)(v1014 + 16 * v1015);
                }
                v1027 = v1017[1];
                v1030 = (uint64_t)*v1027;
                v1028 = (char *)(v1027 + 2);
                v1029 = v1030;
              }
              else
              {
                v1029 = 0;
                v1028 = &byte_1C871356D;
              }
              LOWORD(v1147[0]) = 773;
              __s2 = v1028;
              v1144 = v1029;
              v1145 = (uint64_t)".frozen";
              v1031 = (char *)operator new(0x60uLL);
              *((_DWORD *)v1031 + 13) = *((_DWORD *)v1031 + 13) & 0x38000000 | 1;
              v1032 = (llvm::Value *)(v1031 + 32);
              *(_QWORD *)v1031 = 0;
              *((_QWORD *)v1031 + 1) = 0;
              *((_QWORD *)v1031 + 2) = 0;
              *((_QWORD *)v1031 + 3) = v1031 + 32;
              LOWORD(v1154) = 257;
              llvm::FreezeInst::FreezeInst((uint64_t)(v1031 + 32), v1012, (uint64_t)v1151, 0);
              (*(void (**)(_QWORD *, char *, void **, llvm::EVT **, _QWORD ***))(*v1134 + 16))(v1134, v1031 + 32, &__s2, v1130, v1131);
              if (!(_DWORD)v1127)
              {
LABEL_1727:
                sub_1C61DB60C((uint64_t *)&p_s2, v1032, v1010, v1105, (uint64_t)v4);
                v1151[0] = &v1154;
                v1151[1] = &v1154;
                v1152 = 2;
                LODWORD(v1153) = 0;
                if ((_DWORD)v1124)
                {
                  v1033 = v1123;
                  v1034 = 8 * v1124;
                  do
                  {
                    v1035 = *(_QWORD *)v1033;
                    v1033 = (llvm *)((char *)v1033 + 8);
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)v1151, v1035);
                    v1034 -= 8;
                  }
                  while (v1034);
                  if ((_DWORD)v1124)
                  {
                    v1097 = v1123;
                    v1106 = (llvm *)((char *)v1123 + 8 * v1124);
                    do
                    {
                      v1036 = (llvm::Value *)*((_QWORD *)v1106 - 1);
                      v1106 = (llvm *)((char *)v1106 - 8);
                      v1037 = *(_QWORD *)v1036;
                      LOWORD(v1147[0]) = 257;
                      v1038 = (uint64_t *)*((_QWORD *)__pc + 6);
                      v1039 = operator new(0x48uLL);
                      v1040 = v1039;
                      v1039[1] = v1037;
                      v1041 = (llvm::Value *)(v1039 + 1);
                      *v1039 = 0;
                      v1039[2] = 0;
                      v1039[3] = 0x4000000000000053;
                      *((_OWORD *)v1039 + 2) = 0u;
                      v1042 = (char *)(v1039 + 4);
                      *((_OWORD *)v1039 + 3) = 0u;
                      *((_DWORD *)v1039 + 16) = 0;
                      if (v1038)
                      {
                        v1065 = v1038[2];
                        v1039[6] = v1065;
                        *(_WORD *)(v1065 + 18) &= ~0x8000u;
                        if ((*((_BYTE *)v1039 + 31) & 0x10) != 0)
                        {
                          v1067 = *(_QWORD *)(v1065 + 56);
                          if (v1067)
                          {
                            v1068 = *(llvm::ValueSymbolTable **)(v1067 + 104);
                            if (v1068)
                              llvm::ValueSymbolTable::reinsertValue(v1068, v1041);
                          }
                        }
                        v1066 = *v1038;
                        v1040[4] = *v1038;
                        v1040[5] = v1038;
                        *(_QWORD *)(v1066 + 8) = v1042;
                        *v1038 = (uint64_t)v1042;
                      }
                      *((_DWORD *)v1040 + 17) = 2;
                      llvm::Value::setName((uint64_t ***)v1041, (uint64_t)&__s2);
                      v1043 = *((unsigned int *)v1040 + 17);
                      v1044 = operator new(40 * v1043);
                      *v1040 = v1044;
                      if ((_DWORD)v1043)
                      {
                        v1045 = &v1044[4 * v1043];
                        do
                        {
                          *v1044 = 0;
                          v1044[1] = 0;
                          v1044[2] = 0;
                          v1044[3] = v1041;
                          v1044 += 4;
                        }
                        while (v1044 != v1045);
                      }
                      llvm::Value::takeName(v1041, v1036);
                      v1046 = sub_1C477672C((uint64_t)v1151, (uint64_t)v1036);
                      if (v1151[1] == v1151[0])
                        v1047 = (uint64_t *)((char *)&v1152 + 4);
                      else
                        v1047 = &v1152;
                      v1048 = (uint64_t)v1036;
                      if (v1046 == (_QWORD *)((char *)v1151[1] + 8 * *(unsigned int *)v1047))
                      {
                        v1048 = 0;
                      }
                      else
                      {
                        do
                        {
                          v1048 = *(_QWORD *)(v1048 - 64);
                          if (!v1048 || *(_BYTE *)(v1048 + 16) != 85)
                            break;
                          v1049 = sub_1C477672C((uint64_t)v1151, v1048);
                          v1050 = v1151[1] == v1151[0] ? (uint64_t *)((char *)&v1152 + 4) : &v1152;
                        }
                        while (v1049 != (_QWORD *)((char *)v1151[1] + 8 * *(unsigned int *)v1050));
                      }
                      sub_1C477667C(v1041, v1048, v970);
                      v1051 = sub_1C477672C((uint64_t)v1151, (uint64_t)v1036);
                      if (v1151[1] == v1151[0])
                        v1052 = (uint64_t *)((char *)&v1152 + 4);
                      else
                        v1052 = &v1152;
                      v1053 = (uint64_t)v1036;
                      if (v1051 == (_QWORD *)((char *)v1151[1] + 8 * *(unsigned int *)v1052))
                      {
                        v1053 = 0;
                      }
                      else
                      {
                        do
                        {
                          v1053 = *(_QWORD *)(v1053 - 32);
                          if (!v1053 || *(_BYTE *)(v1053 + 16) != 85)
                            break;
                          v1054 = sub_1C477672C((uint64_t)v1151, v1053);
                          v1055 = v1151[1] == v1151[0] ? (uint64_t *)((char *)&v1152 + 4) : &v1152;
                        }
                        while (v1054 != (_QWORD *)((char *)v1151[1] + 8 * *(unsigned int *)v1055));
                      }
                      sub_1C477667C(v1041, v1053, v971);
                      v1056 = (llvm *)*((_QWORD *)v1036 + 6);
                      v1119 = v1056;
                      if (v1056)
                        llvm::MetadataTracking::track((uint64_t)&v1119, (unsigned __int8 *)v1056, 2);
                      v1059 = (unsigned __int8 *)v1040[7];
                      v1058 = (llvm **)(v1040 + 7);
                      v1057 = v1059;
                      if (v1059)
                        llvm::MetadataTracking::untrack((uint64_t)v1058, v1057);
                      v1060 = (unsigned __int8 *)v1119;
                      *v1058 = v1119;
                      if (v1060)
                      {
                        llvm::MetadataTracking::retrack((uint64_t)&v1119, v1060, (uint64_t)v1058);
                        v1119 = 0;
                      }
                      llvm::Value::doRAUW(v1036, v1041, (llvm::Value *)1);
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v1036 + 5) + 40, (uint64_t ***)v1036);
                      v1061 = *((_QWORD *)v1036 + 3);
                      v1062 = (_QWORD *)*((_QWORD *)v1036 + 4);
                      *v1062 = v1061;
                      *(_QWORD *)(v1061 + 8) = v1062;
                      *((_QWORD *)v1036 + 3) = 0;
                      *((_QWORD *)v1036 + 4) = 0;
                      llvm::Value::deleteValue(v1036);
                      v1063 = sub_1C477672C((uint64_t)v1151, (uint64_t)v1036);
                      if (v1151[1] == v1151[0])
                        v1064 = (uint64_t *)((char *)&v1152 + 4);
                      else
                        v1064 = &v1152;
                      if (v1063 != (_QWORD *)((char *)v1151[1] + 8 * *(unsigned int *)v1064))
                      {
                        *v1063 = -2;
                        LODWORD(v1153) = (_DWORD)v1153 + 1;
                      }
                    }
                    while (v1106 != v1097);
                  }
                  v1069 = v1151[1];
                  v1070 = v1151[0];
                  *(_QWORD *)(a1 + 120) = v1093;
                  if (v1069 != v1070)
                    free(v1069);
                }
                else
                {
                  *(_QWORD *)(a1 + 120) = v1093;
                }
                if (p_s2 != (char *)&v1127 + 8)
                  free(p_s2);
                v12 = 1;
LABEL_1518:
                v909 = v1123;
LABEL_1805:
                if (v909 != v1109)
                  free(v909);
                return v12 & 1;
              }
              v1071 = (char *)p_s2;
              v1072 = (char *)p_s2 + 16 * v1127;
              v1073 = (unsigned __int8 **)(v1031 + 80);
              while (2)
              {
                v1074 = *(_DWORD *)v1071;
                v1075 = (unsigned __int8 *)*((_QWORD *)v1071 + 1);
                if (v1075)
                {
                  if (v1074)
                    goto LABEL_1787;
                  v1119 = (llvm *)*((_QWORD *)v1071 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v1119, v1075, 2);
                  v1076 = *v1073;
LABEL_1791:
                  if (v1076)
                    llvm::MetadataTracking::untrack((uint64_t)(v1031 + 80), v1076);
                  v1077 = (unsigned __int8 *)v1119;
                  *v1073 = (unsigned __int8 *)v1119;
                  if (v1077)
                    llvm::MetadataTracking::retrack((uint64_t)&v1119, v1077, (uint64_t)(v1031 + 80));
                }
                else
                {
                  v1076 = *v1073;
                  if (*v1073 || (v1031[55] & 0x20) != 0)
                  {
                    if (!v1074)
                    {
                      v1119 = 0;
                      goto LABEL_1791;
                    }
LABEL_1787:
                    llvm::Value::setMetadata(v1032, *(_DWORD *)v1071, (llvm::MDNode *)v1075);
                  }
                }
                v1071 += 16;
                if (v1071 == v1072)
                  goto LABEL_1727;
                continue;
              }
            }
          }
          if (v758)
            v1021 = v758;
          else
            v1021 = v756;
        }
        else
        {
          v1021 = 0;
        }
        v756 = (llvm::EVT ****)sub_1C541AB24(v751 + 2480, (uint64_t)&p_s2, (uint64_t *)&p_s2, v1021);
        v1022 = (llvm::EVT ***)p_s2;
        v756[3] = 0;
        v756[4] = 0;
        *v756 = v1022;
        v756[1] = (llvm::EVT ***)(v756 + 3);
        v756[2] = (llvm::EVT ***)0x100000000;
        goto LABEL_1276;
      case 'Y':
        LODWORD(__s2) = -1;
        if (byte_1ED7F5680)
          goto LABEL_4;
        if (byte_1ED7F5740)
        {
          v645 = -1;
        }
        else
        {
          v782 = *((_DWORD *)v4 + 5);
          if ((v782 & 0x40000000) != 0)
            v783 = (llvm::EVT ***)*(v4 - 1);
          else
            v783 = &v4[-4 * (v782 & 0x7FFFFFF)];
          if (!(*(unsigned int (**)(_QWORD, llvm::EVT *, llvm::EVT **, void **))(**(_QWORD **)(a1 + 48)
                                                                                           + 368))(*(_QWORD *)(a1 + 48), **v783, v783[4], &__s2))goto LABEL_4;
          v645 = (int)__s2;
        }
        v790 = v4[5];
        v791 = *(_QWORD *)(a1 + 48);
        v792 = *(_QWORD *)(a1 + 64);
        p_s2 = *(void **)(a1 + 720);
        *(_QWORD *)&v1127 = v791;
        *((_QWORD *)&v1127 + 1) = v792;
        v1128 = (llvm::Instruction *)v4;
        v1109 = (llvm *)&v1130;
        v1129[0] = &v1130;
        v1129[1] = (void *)0x400000000;
        LODWORD(v1134) = v645;
        v1135 = 0;
        v793 = v4[1];
        if (v793)
        {
          if (!v793[1])
          {
            v794 = v793[3];
            if (*((llvm::EVT ***)v794 + 5) == v790)
            {
              v795 = *((unsigned __int8 *)v794 + 16);
              if (v795 == 61)
              {
                v1135 = v794;
              }
              else if (v795 - 41 <= 0x11)
              {
                v796 = *((_DWORD *)v794 + 5);
                if ((v796 & 0x40000000) != 0)
                {
                  v798 = (_QWORD *)*((_QWORD *)v794 - 1);
                  v797 = v796 & 0x7FFFFFF;
                }
                else
                {
                  v797 = v796 & 0x7FFFFFF;
                  v798 = (_QWORD *)((char *)v794 - 32 * v797);
                }
                if (!v797)
LABEL_1354:
                  __asm { BR              X10 }
                v799 = 32 * v797;
                v800 = v798;
                while (1)
                {
                  if ((llvm::Instruction *)*v798 == v1128)
                  {
                    v804 = v798[3];
                    v805 = *(_DWORD *)(v804 + 20);
                    if ((v805 & 0x40000000) != 0)
                      v806 = *(_QWORD *)(v804 - 8);
                    else
                      v806 = v804 - 32 * (v805 & 0x7FFFFFF);
                    if ((((unint64_t)v800 - v806) & 0x1FFFFFFFE0) == 0x20 && v795 <= 0x34)
                    {
                      if (((1 << v795) & 0x12000000000000) != 0)
                      {
                        if ((*((_BYTE *)v794 + 17) & 4) == 0)
                          break;
                      }
                      else if (((1 << v795) & 0xD800000000000) != 0)
                      {
                        break;
                      }
                    }
                  }
                  else
                  {
                    v801 = *(unsigned __int8 *)(*v798 + 16);
                    v71 = v801 > 0x11;
                    v802 = (1 << v801) & 0x31800;
                    if (v71 || v802 == 0)
                      break;
                  }
                  v798 += 4;
                  v800 += 4;
                  v799 -= 32;
                  if (!v799)
                    goto LABEL_1354;
                }
              }
            }
          }
        }
        v12 = 0;
        v909 = (llvm *)v1129[0];
        goto LABEL_1805;
      case '[':
        BYTE4(p_s2) = 0;
        LODWORD(p_s2) = 0;
        v620 = (uint64_t)*(v4 - 8);
        if (*(_BYTE *)(v620 + 16) != 90)
          goto LABEL_4;
        v621 = *(_DWORD *)(v620 + 20);
        v622 = (v621 & 0x40000000) != 0 ? *(uint64_t **)(v620 - 8) : (uint64_t *)(v620 - 32 * (v621 & 0x7FFFFFF));
        if (!sub_1C4E7B480(*v622))
          goto LABEL_4;
        v623 = *(_DWORD *)(v620 + 20);
        v624 = (v623 & 0x40000000) != 0 ? *(_QWORD *)(v620 - 8) : v620 - 32 * (v623 & 0x7FFFFFF);
        if (!sub_1C4D8AC3C((uint64_t)&p_s2 + 2, *(llvm::Constant **)(v624 + 64))
          || !sub_1C4E7B480((uint64_t)*(v4 - 4)))
        {
          goto LABEL_4;
        }
        v625 = *((unsigned int *)v4 + 18);
        if (!(_DWORD)v625)
          goto LABEL_1084;
        v626 = v4[8];
        v627 = 4 * v625;
        do
        {
          if ((*(_DWORD *)v626 + 1) >= 2)
            goto LABEL_4;
          v626 = (llvm::EVT **)((char *)v626 + 4);
          v627 -= 4;
        }
        while (v627);
LABEL_1084:
        v628 = (llvm::FixedVectorType *)(*(uint64_t (**)(_QWORD, llvm::EVT ***))(**(_QWORD **)(a1 + 48)
                                                                                         + 1112))(*(_QWORD *)(a1 + 48), v4);
        if (!v628)
          goto LABEL_4;
        v629 = (uint64_t)v628;
        v630 = (uint64_t)*v4;
        llvm::FixedVectorType::get(v628, (llvm::Type *)*((unsigned int *)*v4 + 8));
        v632 = v631;
        v633 = 0;
        v634 = **v4;
        p_s2 = (char *)&v1127 + 8;
        *(_QWORD *)&v1127 = 0x200000000;
        v1132 = v634;
        v1133 = &v1141;
        v1134 = v1142;
        v1135 = 0;
        v1136 = 0;
        v1137 = 512;
        v1138 = 7;
        v1139 = 0;
        v1140 = 0;
        v1141 = &unk_1E8167888;
        v1142[0] = &unk_1E8167A08;
        v635 = v4[6];
        v1130 = v4[5];
        v1131 = (_QWORD ***)(v4 + 3);
        v1151[0] = v635;
        if (v635)
        {
          llvm::MetadataTracking::track((uint64_t)v1151, (unsigned __int8 *)v635, 2);
          v633 = v1151[0];
        }
        sub_1C4774EF4((uint64_t)&p_s2, 0, (uint64_t)v633);
        if (v1151[0])
          llvm::MetadataTracking::untrack((uint64_t)v1151, (unsigned __int8 *)v1151[0]);
        v636 = (uint64_t)*(v4 - 8);
        v637 = *(_DWORD *)(v636 + 20);
        if ((v637 & 0x40000000) != 0)
          v638 = *(_QWORD *)(v636 - 8);
        else
          v638 = v636 - 32 * (v637 & 0x7FFFFFF);
        v915 = *(unsigned __int8 **)(v638 + 32);
        LOWORD(v1154) = 257;
        v916 = sub_1C4773E38((uint64_t *)&p_s2, 49, v915, v629, (uint64_t)v1151);
        v917 = (llvm::Type *)*(unsigned int *)(v632 + 32);
        LOWORD(v1154) = 257;
        VectorSplat = (unsigned __int8 *)llvm::IRBuilderBase::CreateVectorSplat((uint64_t)&p_s2, v917, (uint64_t ***)v916, (uint64_t)v1151);
        LOWORD(v1154) = 257;
        v919 = sub_1C4773E38((uint64_t *)&p_s2, 49, VectorSplat, v630, (uint64_t)v1151);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v4, (llvm::Value *)v919, (llvm::Value *)1);
        v920 = *(uint64_t **)(a1 + 72);
        v1151[0] = &off_1E8140908;
        v1151[1] = (void *)a1;
        v1153 = v1151;
        llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)v4, v920, 0, v1151);
        if (v1153 == v1151)
        {
          v921 = (void (**)(void))((char *)v1151[0] + 32);
        }
        else
        {
          if (!v1153)
            goto LABEL_1537;
          v921 = (void (**)(void))((char *)*v1153 + 40);
        }
        (*v921)();
LABEL_1537:
        if (v916 && v916[16] >= 0x1Cu)
        {
          v922 = *((_DWORD *)v916 + 5);
          v923 = (v922 & 0x40000000) != 0 ? (unsigned __int8 *)*((_QWORD *)v916 - 1) : &v916[-32 * (v922 & 0x7FFFFFF)];
          v961 = *(_QWORD *)v923;
          if (*(_QWORD *)v923)
          {
            v962 = *(unsigned __int8 *)(v961 + 16);
            if (v962 >= 0x1C && *((_QWORD *)v916 + 5) != *(_QWORD *)(v961 + 40) && v962 != 83 && v962 - 29 >= 0xB)
            {
              v964 = v962 - 38;
              v71 = v964 > 0x38;
              v965 = (1 << v964) & 0x100060000000001;
              if (v71 || v965 == 0)
                llvm::Instruction::moveAfter((llvm::Instruction *)v916, (llvm::Instruction *)v961);
            }
          }
        }
        v556 = p_s2;
        if (p_s2 == (char *)&v1127 + 8)
          goto LABEL_167;
        goto LABEL_1661;
      default:
        return v12 & 1;
    }
  }
  if (v543 - 53 < 3)
  {
    if (((_DWORD)(*v4)[1] & 0xFE) != 0x12)
      goto LABEL_4;
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 1104))(*(_QWORD *)(a1 + 48)))
      goto LABEL_4;
    __s2 = 0;
    v1123 = 0;
    v1119 = 0;
    v544 = (uint64_t)*(v4 - 4);
    p_s2 = &__s2;
    *(_QWORD *)&v1127 = &v1123;
    *((_QWORD *)&v1127 + 1) = &v1119;
    v545 = *(_QWORD *)(v544 + 8);
    if (!v545 || *(_QWORD *)(v545 + 8) || !sub_1C4FA9CBC((_QWORD **)&p_s2, v544))
      goto LABEL_4;
    v12 = 0;
    if (!llvm::isSplatValue((const void **)v1123, (const llvm::Value *)0xFFFFFFFFLL, 0, v546))
      return v12 & 1;
    v12 = 0;
    if (!llvm::isSplatValue((const void **)v1119, (const llvm::Value *)0xFFFFFFFFLL, 0, v547))
      return v12 & 1;
    sub_1C4773D54((uint64_t)&p_s2, (uint64_t)v4, 0, 0, 0);
    v548 = *((unsigned __int8 *)v4 + 16) - 28;
    v549 = *(v4 - 8);
    LOWORD(v1154) = 257;
    v550 = (uint64_t *)sub_1C4773860((uint64_t)&p_s2, v548, v549, (uint64_t)v1123, (uint64_t)v1151, 0);
    v551 = *(v4 - 8);
    LOWORD(v1154) = 257;
    v552 = sub_1C4773860((uint64_t)&p_s2, v548, v551, (uint64_t)v1119, (uint64_t)v1151, 0);
    LOWORD(v1154) = 257;
    Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)&p_s2, (uint64_t)__s2, v550, (uint64_t)v552, (uint64_t)v1151, 0);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v4, Select, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v4[5] + 5), (uint64_t ***)v4);
    v554 = v4[3];
    v555 = v4[4];
    *v555 = (llvm::EVT *)v554;
    v554[1] = (llvm::EVT *)v555;
    v4[3] = 0;
    v4[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v4);
    v556 = p_s2;
    if (p_s2 == (char *)&v1127 + 8)
      goto LABEL_167;
LABEL_1661:
    free(v556);
    goto LABEL_167;
  }
  if (v543 != 30)
  {
    if (v543 != 31)
      return v12 & 1;
    v571 = *((_DWORD *)v4 + 5);
    if ((v571 & 0x40000000) != 0)
      v572 = (uint64_t **)*(v4 - 1);
    else
      v572 = (uint64_t **)&v4[-4 * (v571 & 0x7FFFFFF)];
    v668 = *v572;
    v669 = **v572;
    v670 = *(llvm::EVT **)v669;
    v671 = sub_1C47A7FD0(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 720), v669, 0);
    v673 = v672;
    LOBYTE(v1123) = sub_1C47A8BD8(*(_QWORD *)(a1 + 48), v670, v671, v672);
    v675 = sub_1C47A8C74((unsigned __int8 *)&v1123);
    if ((_DWORD)v674 == 1)
    v676 = *(_DWORD *)(v669 + 8) >> 8;
    v12 = v676 < v675;
    if (v676 >= v675)
      return v12 & 1;
    LODWORD(p_s2) = v675;
    if (v675 <= 63)
    {
      if (v675 <= 31)
      {
        if (v675 == 16 || v675 == 8 || v675 == 1)
        {
LABEL_1363:
          if ((*(unsigned int (**)(_QWORD, unint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 48)
                                                                                                 + 1208))(*(_QWORD *)(a1 + 48), v671, v673, v1123, 0))
          {
            v809 = 40;
          }
          else
          {
            v809 = 39;
          }
          if (*((_BYTE *)v668 + 16) == 21)
          {
            v810 = *(_QWORD *)(v668[3] + 112);
            if (v810)
            {
              v811 = (*((_DWORD *)v668 + 8) + 2);
              if (v811 < *(_DWORD *)(v810 + 8))
              {
                v924 = v810 + 40;
                v925 = *(_QWORD *)(v924 + 8 * v811);
                if (v925 && (*(_BYTE *)(v925 + 18) & 1) != 0)
                  v809 = 40;
                v926 = *(_QWORD *)(v924 + 8 * v811);
                if (v926 && (*(_BYTE *)(v926 + 20) & 8) != 0)
                  v809 = 39;
              }
            }
          }
          LOWORD(v1129[0]) = 257;
          llvm::CastInst::Create(v809);
          v813 = v812;
          v814 = v4[5];
          *(_QWORD *)(v812 + 40) = v814;
          *((_WORD *)v814 + 9) &= ~0x8000u;
          if ((*(_BYTE *)(v812 + 23) & 0x10) != 0)
          {
            v844 = v814[7];
            if (v844)
            {
              v845 = (llvm::ValueSymbolTable *)*((_QWORD *)v844 + 13);
              if (v845)
                llvm::ValueSymbolTable::reinsertValue(v845, (llvm::Value *)v813);
            }
          }
          v815 = v4[3];
          *(_QWORD *)(v813 + 24) = v815;
          *(_QWORD *)(v813 + 32) = v4 + 3;
          v815[1] = (llvm::EVT *)(v813 + 24);
          v4[3] = (llvm::EVT **)(v813 + 24);
          v816 = v4[6];
          __s2 = v816;
          if (v816)
            llvm::MetadataTracking::track((uint64_t)&__s2, (unsigned __int8 *)v816, 2);
          v817 = (unsigned __int8 **)(v813 + 48);
          if (&__s2 == (void **)(v813 + 48))
          {
            if (__s2)
              llvm::MetadataTracking::untrack((uint64_t)&__s2, (unsigned __int8 *)__s2);
          }
          else
          {
            if (*v817)
              llvm::MetadataTracking::untrack(v813 + 48, *v817);
            v818 = (unsigned __int8 *)__s2;
            *v817 = (unsigned __int8 *)__s2;
            if (v818)
            {
              llvm::MetadataTracking::retrack((uint64_t)&__s2, v818, v813 + 48);
              __s2 = 0;
            }
          }
          v819 = *((_DWORD *)v4 + 5);
          if ((v819 & 0x40000000) != 0)
            v820 = (llvm::EVT ***)*(v4 - 1);
          else
            v820 = &v4[-4 * (v819 & 0x7FFFFFF)];
          if (*v820)
          {
            *v820[2] = (llvm::EVT *)v820[1];
            v840 = v820[1];
            if (v840)
              v840[2] = (llvm::EVT *)v820[2];
          }
          *v820 = (llvm::EVT **)v813;
          v823 = *(llvm::EVT ***)(v813 + 8);
          v822 = (llvm::EVT ****)(v813 + 8);
          v821 = v823;
          v820[1] = v823;
          if (v823)
            v821[2] = (llvm::EVT *)(v820 + 1);
          v820[2] = (llvm::EVT **)v822;
          *v822 = v820;
          if (((*((_DWORD *)v4 + 5) >> 1) & 0x3FFFFFF) != 1)
          {
            v824 = 0;
            v825 = 2 * (((*((_DWORD *)v4 + 5) >> 1) & 0x3FFFFFFu) - 1);
            do
            {
              v826 = *((_DWORD *)v4 + 5);
              if ((v826 & 0x40000000) != 0)
                v827 = (llvm::EVT ***)*(v4 - 1);
              else
                v827 = &v4[-4 * (v826 & 0x7FFFFFF)];
              v828 = ((_DWORD)v824 + 2) & 0xFFFFFFFE;
              v829 = v827[4 * v828];
              LODWORD(v1127) = *((_DWORD *)v829 + 8);
              if (v1127 > 0x40)
              {
                p_s2 = (void *)operator new[]();
                memcpy(p_s2, v829[3], (((unint64_t)v1127 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                p_s2 = v829[3];
              }
              if (v809 == 39)
                llvm::APInt::zext((llvm::APInt *)&p_s2, v675, (uint64_t)v1151);
              else
                llvm::APInt::sext((llvm::APInt *)&p_s2, v675, (llvm::APInt *)v1151);
              v831 = llvm::ConstantInt::get(v670, (llvm::LLVMContext *)v1151, v830);
              v832 = *((_DWORD *)v4 + 5);
              if ((v832 & 0x40000000) != 0)
                v833 = (llvm::EVT ***)*(v4 - 1);
              else
                v833 = &v4[-4 * (v832 & 0x7FFFFFF)];
              v834 = (llvm::ValueHandleBase **)&v833[4 * v828];
              if (*v834)
              {
                *(_QWORD *)v834[2] = v834[1];
                v839 = v834[1];
                if (v839)
                  *((_QWORD *)v839 + 2) = v834[2];
              }
              *v834 = v831;
              if (v831)
              {
                v837 = (llvm::EVT **)*((_QWORD *)v831 + 1);
                v835 = (llvm::ValueHandleBase ***)((char *)v831 + 8);
                v836 = v837;
                v838 = &v833[4 * v828];
                v838[1] = v837;
                if (v837)
                  v836[2] = (llvm::EVT *)(v838 + 1);
                v838[2] = (llvm::EVT **)v835;
                *v835 = v834;
              }
              if (LODWORD(v1151[1]) >= 0x41 && v1151[0])
                MEMORY[0x1CAA32F9C](v1151[0], 0x1000C8000313F17);
              if (v1127 >= 0x41 && p_s2)
                MEMORY[0x1CAA32F9C](p_s2, 0x1000C8000313F17);
              v824 += 2;
            }
            while (v825 != v824);
          }
          return v12 & 1;
        }
      }
      else if (v675 == 32)
      {
        goto LABEL_1363;
      }
    }
    else if (v675 == 64 || v675 == 128)
    {
      goto LABEL_1363;
    }
    v1023 = sub_1C5270984(*(_QWORD *)v670 + 2168, &p_s2);
    if (!*((_QWORD *)v1023 + 1))
    {
      v1024 = v1023;
      v1025 = (_QWORD *)sub_1C484358C(*(_QWORD *)v670 + 2040, 24, 3);
      v1026 = (int)p_s2;
      *v1025 = v670;
      v1025[2] = 0;
      v1025[1] = (v1026 << 8) | 0xDu;
      *((_QWORD *)v1024 + 1) = v1025;
    }
    goto LABEL_1363;
  }
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 256))(*(_QWORD *)(a1 + 48))
    || (*((_DWORD *)v4 + 5) & 0x7FFFFFF) != 3)
  {
    goto LABEL_4;
  }
  v12 = 0;
  v646 = (uint64_t)*(v4 - 12);
  if (!v646 || *(_BYTE *)(v646 + 16) != 81)
    return v12 & 1;
  v647 = *(_QWORD *)(v646 - 32);
  if (*(_BYTE *)(v647 + 16) != 16)
    goto LABEL_4;
  v648 = *(_QWORD *)(v646 + 8);
  if (!v648 || *(_QWORD *)(v648 + 8))
    goto LABEL_4;
  __pb = *(_QWORD **)(v646 - 64);
  v649 = *(unsigned int *)(v647 + 32);
  if (v649 > 0x40)
  {
    v650 = (int8x8_t *)operator new[]();
    memcpy(v650, *(const void **)(v647 + 24), ((unint64_t)(v649 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v650 = *(int8x8_t **)(v647 + 24);
  }
  v927 = __pb[1];
  if (!v927)
  {
LABEL_1642:
    v12 = 0;
    goto LABEL_1643;
  }
  v928 = v649 | 0xFFFFFFC0;
  if ((v649 & 0x3F) == 0)
    v928 = 0;
  v1094 = v928;
  v929 = (uint8x8_t)vcnt_s8((int8x8_t)v650);
  v929.i16[0] = vaddlv_u8(v929);
  v1103 = v929.u32[0];
  v1091 = v649 + __clz((unint64_t)v650) - 64;
  while (2)
  {
    v930 = *(_QWORD *)(v927 + 24);
    v931 = *(unsigned __int8 *)(v930 + 16);
    if (v930)
      v932 = v931 >= 0x1C;
    else
      v932 = 0;
    if (!v932)
      goto LABEL_1638;
    v933 = *(llvm::BasicBlock **)(v930 + 40);
    if (v933 != (llvm::BasicBlock *)v4[5]
      && (v933 != (llvm::BasicBlock *)*(v4 - 4) && v933 != (llvm::BasicBlock *)*(v4 - 8)
       || !llvm::BasicBlock::getSinglePredecessor(v933)))
    {
      goto LABEL_1638;
    }
    if (v649 >= 0x41)
    {
      v936 = 0;
      v937 = v650;
      v938 = (unint64_t)(v649 + 63) >> 6;
      do
      {
        v939 = *v937++;
        v940 = (uint8x8_t)vcnt_s8(v939);
        v940.i16[0] = vaddlv_u8(v940);
        v936 += v940.i32[0];
        --v938;
      }
      while (v938);
      v941 = *(_WORD *)(v646 + 18);
      if (v936 == 1 && (v941 & 0x3F) == 0x24)
      {
        v942 = 0;
        v943 = (unint64_t)(v649 + 63) >> 6;
        do
        {
          v71 = v943-- < 1;
          if (v71)
            break;
          v944 = (unint64_t)v650[v943];
          v942 += __clz(v944);
        }
        while (!v944);
        v935 = v942 + v1094;
        goto LABEL_1577;
      }
LABEL_1589:
      if ((v941 & 0x3E) == 0x20)
      {
        LODWORD(v1144) = v649;
        v947 = (uint64_t)v650;
        v948 = v649;
        if (v649 >= 0x41)
        {
          v947 = operator new[]();
          __s2 = (void *)v947;
          v948 = v1144;
          memcpy((void *)v947, v650, (((unint64_t)v1144 + 63) >> 3) & 0x3FFFFFF8);
          if (v948 > 0x40)
          {
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&__s2);
            goto LABEL_1595;
          }
        }
LABEL_1592:
        if (v948)
          v950 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v948;
        else
          v950 = 0;
        __s2 = (void *)(v950 & ~v947);
LABEL_1595:
        llvm::APInt::operator++((uint64_t)&__s2);
        v951 = v1144;
        v952 = __s2;
        LODWORD(v1144) = 0;
        p_s2 = __pb;
        DWORD2(v1127) = v951;
        if (v951 > 0x40)
        {
          *(_QWORD *)&v1127 = operator new[]();
          memcpy((void *)v1127, v952, (((unint64_t)DWORD2(v1127) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *(_QWORD *)&v1127 = __s2;
        }
        v953 = *(unsigned __int8 *)(v930 + 16);
        if (v953 == 5)
        {
          if (*(_WORD *)(v930 + 18) != 13
            || (v954 = v930 - 32 * (*(_DWORD *)(v930 + 20) & 0x7FFFFFF), p_s2 != *(void **)v954)
            || !sub_1C4D8A86C((llvm::APInt *)&v1127, *(llvm::Constant **)(v954 + 32)))
          {
LABEL_1607:
            if (v649 > 0x40)
            {
              v958 = (void *)operator new[]();
              memcpy(v958, v650, ((unint64_t)(v649 + 63) >> 3) & 0x3FFFFFF8);
              v1151[0] = __pb;
              LODWORD(v1152) = v649;
              v957 = (void *)operator new[]();
              memcpy(v957, v958, (((unint64_t)v1152 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v956 = (char)__pb;
              v1151[0] = __pb;
              LODWORD(v1152) = v649;
              v957 = v650;
              v958 = v650;
            }
            v1151[1] = v957;
            v959 = *(unsigned __int8 *)(v930 + 16);
            if (v959 == 43)
            {
              v955 = v1151[0] == *(void **)(v930 - 64)
                  && sub_1C4D8A7F0((llvm::APInt *)&v1151[1], *(unsigned __int8 **)(v930 - 32));
            }
            else
            {
              if (v959 == 5)
              {
                v956 = 0;
                if (*(_WORD *)(v930 + 18) == 15)
                {
                  v960 = v930 - 32 * (*(_DWORD *)(v930 + 20) & 0x7FFFFFF);
                  if (v1151[0] == *(void **)v960
                    && sub_1C4D8A86C((llvm::APInt *)&v1151[1], *(llvm::Constant **)(v960 + 32)))
                  {
                    v956 = 1;
                  }
                }
              }
              v955 = v959 == 5 && v956;
            }
            if (v1152 >= 0x41 && v1151[1])
              MEMORY[0x1CAA32F9C](v1151[1], 0x1000C8000313F17);
            if (v649 >= 0x41 && v958)
              MEMORY[0x1CAA32F9C](v958, 0x1000C8000313F17);
LABEL_1628:
            if (DWORD2(v1127) >= 0x41 && (_QWORD)v1127)
              MEMORY[0x1CAA32F9C](v1127, 0x1000C8000313F17);
            if (v951 >= 0x41 && v952)
              MEMORY[0x1CAA32F9C](v952, 0x1000C8000313F17);
            if (v1144 >= 0x41 && __s2)
              MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
            if (v955)
            {
              sub_1C4773D54((uint64_t)&p_s2, (uint64_t)v4, 0, 0, 0);
              if (*(llvm::EVT ***)(v930 + 40) != v4[5])
                llvm::Instruction::moveBefore((llvm::Instruction *)v930, (llvm::Instruction *)v4);
              v1078 = *(_WORD *)(v646 + 18) & 0x3F;
              v1079 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v930, 0, 0);
              LOWORD(v1154) = 257;
              if (v1078 > 0xF)
                FCmpHelper = (llvm::Value *)sub_1C4774B48((uint64_t)&p_s2, v1078, v930, (uint64_t)v1079, (uint64_t)v1151);
              else
                FCmpHelper = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&p_s2, v1078, (uint64_t *)v930, (uint64_t)v1079, (uint64_t)v1151, 0, 0);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v646, FCmpHelper, (llvm::Value *)1);
              v1081 = (char *)p_s2;
              goto LABEL_1809;
            }
            goto LABEL_1638;
          }
        }
        else if (v953 != 41
               || p_s2 != *(void **)(v930 - 64)
               || !sub_1C4D8A7F0((llvm::APInt *)&v1127, *(unsigned __int8 **)(v930 - 32)))
        {
          goto LABEL_1607;
        }
        v955 = 1;
        goto LABEL_1628;
      }
LABEL_1638:
      v927 = *(_QWORD *)(v927 + 8);
      if (!v927)
        goto LABEL_1642;
      continue;
    }
    break;
  }
  v934 = *(_WORD *)(v646 + 18);
  if (v1103 != 1 || (v934 & 0x3F) != 0x24)
  {
    if ((v934 & 0x3E) == 0x20)
    {
      LODWORD(v1144) = v649;
      v947 = (uint64_t)v650;
      v948 = v649;
      goto LABEL_1592;
    }
    goto LABEL_1638;
  }
  v935 = v1091;
LABEL_1577:
  DWORD2(v1127) = 64;
  p_s2 = __pb;
  *(_QWORD *)&v1127 = (v649 + ~v935);
  if ((v931 & 0xFE) != 0x36)
    goto LABEL_1588;
  v945 = *(_DWORD *)(v930 + 20);
  v946 = (v945 & 0x40000000) != 0 ? *(_QWORD *)(v930 - 8) : v930 - 32 * (v945 & 0x7FFFFFF);
  if (__pb != *(_QWORD **)v946)
    goto LABEL_1588;
  v949 = sub_1C4D8A7F0((llvm::APInt *)&v1127, *(unsigned __int8 **)(v946 + 32));
  if (DWORD2(v1127) >= 0x41 && (_QWORD)v1127)
    MEMORY[0x1CAA32F9C](v1127, 0x1000C8000313F17);
  if (!v949)
  {
LABEL_1588:
    v941 = *(_WORD *)(v646 + 18);
    goto LABEL_1589;
  }
  sub_1C4773D54((uint64_t)&p_s2, (uint64_t)v4, 0, 0, 0);
  if (*(llvm::EVT ***)(v930 + 40) != v4[5])
    llvm::Instruction::moveBefore((llvm::Instruction *)v930, (llvm::Instruction *)v4);
  v1082 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v930, 0, 0);
  LOWORD(v1154) = 257;
  v1083 = (llvm::Value *)sub_1C4774B48((uint64_t)&p_s2, 32, v930, (uint64_t)v1082, (uint64_t)v1151);
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v646, v1083, (llvm::Value *)1);
  v1081 = (char *)p_s2;
LABEL_1809:
  if (v1081 != (char *)&v1127 + 8)
    free(v1081);
  v12 = 1;
LABEL_1643:
  if (v649 >= 0x41 && v650)
    MEMORY[0x1CAA32F9C](v650, 0x1000C8000313F17);
  return v12 & 1;
}

uint64_t sub_1C508F870(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t i;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 **v29;
  unsigned __int8 *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned __int8 *v38;
  uint64_t v39;
  _QWORD v40[2];
  int v41;
  void *v42;
  uint64_t v43;
  _WORD v44[12];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
LABEL_56:
    v42 = v44;
    v43 = 0x100000000;
    llvm::findDbgUsers((uint64_t)&v42, a1);
    llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)a1, (uint64_t *)v42, v43);
    if (v42 != v44)
      free(v42);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a1 + 40) + 40, (uint64_t ***)a1);
    v35 = *(_QWORD *)(a1 + 24);
    v36 = *(_QWORD **)(a1 + 32);
    *v36 = v35;
    *(_QWORD *)(v35 + 8) = v36;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)a1);
    v4 = 1;
    goto LABEL_59;
  }
  v4 = 0;
  do
  {
    v5 = *(_QWORD *)(v3 + 24);
    v6 = *(_QWORD *)(v5 + 40);
    v39 = v6;
    v7 = *(unsigned __int8 *)(v5 + 16);
    if (v5 && v7 == 83)
    {
      v8 = *(_DWORD *)(v5 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(_QWORD *)(v5 - 8);
      else
        v9 = v5 - 32 * (v8 & 0x7FFFFFF);
      v6 = *(_QWORD *)(v9 + 32 * *(unsigned int *)(v5 + 60) + 8 * ((unint64_t)(v3 - v9) >> 5));
      v39 = v6;
      v10 = (_QWORD *)(v3 + 8);
      v11 = *(_QWORD *)(v3 + 8);
    }
    else
    {
      v10 = (_QWORD *)(v3 + 8);
      v11 = *(_QWORD *)(v3 + 8);
      if ((v7 - 38) <= 0x38 && ((1 << (v7 - 38)) & 0x100060000000001) != 0)
        goto LABEL_28;
    }
    v13 = *(_QWORD *)(v6 + 40);
    if (v13)
      v14 = v13 - 24;
    else
      v14 = 0;
    if (*(unsigned __int8 *)(v14 + 16) - 29 >= 0xB)
      v14 = 0;
    v15 = *(unsigned __int8 *)(v14 + 16) - 38;
    v16 = v15 > 0x38;
    v17 = (1 << v15) & 0x100060000000001;
    if ((v16 || v17 == 0) && v6 != v2)
    {
      v20 = sub_1C50956A8((uint64_t)v40, &v39);
      v21 = v20[1];
      if (!v21)
      {
        v22 = v20;
        for (i = *(_QWORD *)(v6 + 48); i != v6 + 40; i = *(_QWORD *)(i + 8))
        {
          v24 = i - 24;
          if (!i)
            v24 = 0;
          if (*(_BYTE *)(v24 + 16) != 83)
            break;
        }
        v25 = *(unsigned __int8 *)(a1 + 16) - 28;
        v44[8] = 257;
        llvm::CastInst::Create(v25);
        v22[1] = v26;
        v27 = v26;
        v28 = *(unsigned __int8 **)(a1 + 48);
        v38 = v28;
        if (v28)
          llvm::MetadataTracking::track((uint64_t)&v38, v28, 2);
        v29 = (unsigned __int8 **)(v27 + 48);
        if (&v38 == v29)
        {
          if (v38)
            llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
        }
        else
        {
          if (*v29)
            llvm::MetadataTracking::untrack((uint64_t)v29, *v29);
          v30 = v38;
          *v29 = v38;
          if (v30)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v38, v30, (uint64_t)v29);
            v38 = 0;
          }
        }
        v21 = v22[1];
      }
      if (*(_QWORD *)v3)
      {
        **(_QWORD **)(v3 + 16) = *(_QWORD *)(v3 + 8);
        v31 = *(_QWORD *)(v3 + 8);
        if (v31)
          *(_QWORD *)(v31 + 16) = *(_QWORD *)(v3 + 16);
      }
      *(_QWORD *)v3 = v21;
      if (v21)
      {
        v34 = *(_QWORD *)(v21 + 8);
        v32 = (_QWORD *)(v21 + 8);
        v33 = v34;
        *v10 = v34;
        if (v34)
          *(_QWORD *)(v33 + 16) = v10;
        *(_QWORD *)(v3 + 16) = v32;
        *v32 = v3;
      }
      v4 = 1;
    }
LABEL_28:
    v3 = v11;
  }
  while (v11);
  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_56;
LABEL_59:
  MEMORY[0x1CAA32FB4](v40[0], 8);
  return v4 & 1;
}

uint64_t sub_1C508FBB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  llvm::User *v3;
  llvm::SmallPtrSetImplBase *v4;
  uint64_t v5;
  uint64_t v6;
  int32x2_t ****v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  void (**v28)(void);
  uint64_t v29;
  void (**v30)(void);
  void *v31;
  _QWORD *i;
  void *v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  BOOL v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  BOOL v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  llvm::ConstantInt *v55;
  llvm::Type *v56;
  llvm::ConstantInt *v57;
  unint64_t v58;
  uint64_t *v59;
  llvm::Value **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  llvm::Value **v66;
  int v67;
  uint64_t j;
  uint64_t *v69;
  int32x2_t ****v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  _DWORD *v74;
  uint64_t v75;
  _DWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t **v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  BOOL v95;
  unsigned int v96;
  uint64_t v97;
  llvm::Type *v98;
  llvm::DSOLocalEquivalent **v99;
  char v100;
  int v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  llvm::UndefValue *v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  _DWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  unsigned int v131;
  BOOL v132;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _BYTE *v143;
  int v144;
  int v145;
  uint64_t v146;
  int v147;
  llvm::Constant *v148;
  _QWORD *v149;
  llvm::Value *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  unsigned int v158;
  _QWORD *v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  char *v163;
  _QWORD *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  llvm::Value *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  llvm::ValueSymbolTable *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  unsigned int v183;
  char v184;
  char *v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  unint64_t *v193;
  int v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  _DWORD *v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  unint64_t *v225;
  uint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  char *v229;
  llvm::Value *v230;
  llvm::Value *v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  int v236;
  unsigned int v237;
  void *v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  char v249;
  llvm::SmallPtrSetImplBase *v250;
  unsigned __int8 *v251;
  unsigned __int8 *v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  int32x2_t ****v256;
  _DWORD *v257;
  _QWORD *v258;
  uint64_t v259;
  unint64_t v261;
  uint64_t v262;
  llvm::Value *v263;
  char *v264;
  uint64_t v265;
  BOOL v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  int32x2_t *v270;
  unint64_t v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  int v277;
  int v278;
  int32x2_t ***v279;
  unsigned __int8 *v280;
  llvm::Value *NullValue;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v286;
  _QWORD *v287;
  unint64_t *v288;
  _QWORD *v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  llvm::ConstantInt *v296;
  int v297;
  uint64_t v298;
  unsigned __int8 *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t *v304;
  void (**v305)(void);
  unint64_t v306;
  uint64_t v307;
  int32x2_t *v308;
  unint64_t v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  int v315;
  int v316;
  unint64_t v317;
  uint64_t v318;
  int32x2_t *v319;
  unint64_t v320;
  uint64_t v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  int v326;
  int v327;
  unint64_t v328;
  unint64_t *v329;
  uint64_t v330;
  int32x2_t *v331;
  unint64_t v332;
  uint64_t v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  int v338;
  int v339;
  llvm::ConstantInt *v340;
  int v341;
  unint64_t v342;
  uint64_t v343;
  int32x2_t *v344;
  unint64_t v345;
  uint64_t v346;
  unsigned int v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  int v351;
  int v352;
  llvm::ConstantInt *v353;
  unsigned __int8 *v354;
  int32x2_t ***v355;
  uint64_t v356;
  llvm::ConstantInt *v357;
  uint64_t v358;
  uint64_t v359;
  __int32 v360;
  __int32 *v361;
  size_t v362;
  __int32 *v363;
  __int32 *v364;
  uint64_t v365;
  __int32 *v366;
  size_t v367;
  __int32 *v368;
  __int32 *v369;
  uint64_t v370;
  __int32 *v371;
  size_t v372;
  __int32 *v373;
  __int32 *v374;
  uint64_t v375;
  llvm::ConstantInt *v376;
  llvm::ConstantInt *v377;
  unsigned __int8 *v378;
  unsigned __int8 *v379;
  int32x2_t ***v380;
  int32x2_t ***v381;
  unsigned __int32 v382;
  uint64_t v383;
  uint64_t v384;
  llvm::ConstantInt *v385;
  unsigned __int8 *v386;
  llvm::GetElementPtrInst *v387;
  llvm::Value **v388;
  llvm::Value *v389;
  char *v390;
  char *v391;
  uint64_t *v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t **v397;
  uint64_t v398;
  char *v399;
  char *v400;
  unsigned __int8 **v401;
  int v402;
  unsigned __int8 *v403;
  unsigned __int8 *v404;
  unsigned __int8 *v405;
  uint64_t v406;
  _QWORD *v407;
  _QWORD *v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  unint64_t *v412;
  uint64_t v413;
  int32x2_t *v414;
  unint64_t v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418;
  uint64_t *v419;
  uint64_t v420;
  int v421;
  int v422;
  unint64_t v423;
  unint64_t *v424;
  uint64_t v425;
  int32x2_t *v426;
  unint64_t v427;
  uint64_t v428;
  unsigned int v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  int v433;
  int v434;
  uint64_t v435;
  llvm::Value **v436;
  uint64_t v437;
  uint64_t ***v438;
  uint64_t ***v439;
  llvm::Value **v440;
  llvm::Value *v441;
  unsigned __int8 *v442;
  char *v443;
  char *v444;
  unsigned __int8 **v445;
  uint64_t v446;
  _QWORD *v447;
  llvm::ConstantInt *v448;
  uint64_t v449;
  unsigned __int8 ***v450;
  uint64_t v451;
  char *v452;
  char *v453;
  unsigned __int8 **v454;
  int v455;
  unsigned __int8 *v456;
  unsigned __int8 *v457;
  unsigned __int8 *v458;
  llvm::ConstantInt *v459;
  unsigned __int8 *v460;
  unsigned __int8 *v461;
  llvm::Value *v462;
  char *v463;
  char *v464;
  unsigned __int8 **v465;
  uint64_t v466;
  _QWORD *v467;
  uint64_t v468;
  _DWORD *v469;
  uint64_t v470;
  unsigned __int8 ***v471;
  uint64_t v472;
  char *v473;
  char *v474;
  unsigned __int8 **v475;
  int v476;
  unsigned __int8 *v477;
  unsigned __int8 *v478;
  unsigned __int8 *v479;
  llvm::Value **v480;
  llvm::Value **v481;
  llvm::Value *v482;
  char *v483;
  char *v484;
  llvm::Value ***v485;
  uint64_t v486;
  _QWORD *v487;
  uint64_t v488;
  _DWORD *v489;
  llvm::Value *v490;
  llvm::Value ****v491;
  llvm::Value *v492;
  char *v493;
  char *v494;
  unsigned __int8 **v495;
  int v496;
  unsigned __int8 *v497;
  uint64_t v498;
  unsigned __int8 *v499;
  uint64_t v500;
  _QWORD *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  char v506;
  int v507;
  __int128 v508;
  uint64_t v509;
  uint64_t v510;
  int32x2_t ****v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unsigned __int8 *v515;
  unsigned __int8 *v516;
  llvm::SmallPtrSetImplBase *v517;
  llvm::SmallPtrSetImplBase *v518;
  llvm::User *v519;
  _QWORD v520[5];
  __int16 v521;
  _BYTE *v522;
  _BYTE *v523;
  uint64_t v524;
  int v525;
  _BYTE v526[128];
  uint64_t v527[2];
  unsigned int v528;
  _DWORD *v529;
  void *v530;
  uint64_t v531;
  int v532;
  _BYTE v533[64];
  uint64_t v534[2];
  __int128 v535;
  _BYTE *v536;
  void *v537[2];
  int v538;
  _BYTE v539[64];
  uint64_t (**v540)();
  __int128 v541;
  uint64_t (***v542)();
  void *v543;
  uint64_t v544;
  _QWORD v545[17];
  void *v546;
  uint64_t v547;
  _BYTE v548[1024];
  unsigned int v549;
  unsigned __int8 v550;
  llvm::Constant *v551;
  llvm::DataLayout **v552;
  int32x2_t ****v553;
  void *v554;
  uint64_t v555;
  _BYTE v556[128];
  void *v557;
  uint64_t v558;
  _QWORD v559[8];
  void *v560[2];
  _QWORD v561[33];
  void *v562;
  uint64_t v563;
  int v564;
  llvm::DataLayout **v565;
  void *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t *v570;
  uint64_t v571;
  uint64_t v572;
  _QWORD v573[2];
  unsigned int v574;
  uint64_t v575;
  _BYTE *v576;
  void *v577;
  uint64_t v578;
  int v579;
  _BYTE v580[256];
  __int128 v581;
  _BYTE v582[96];
  void *v583;
  uint64_t v584;
  _BYTE v585[136];
  void *v586;
  __int128 v587;
  void **v588;
  __int16 v589;
  _QWORD **v590;
  _QWORD *v591;
  uint64_t v592;
  void *v593;
  uint64_t v594;
  _QWORD v595[19];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v517 = v4;
  v519 = v3;
  v5 = v0;
  v6 = 0;
  v595[16] = *MEMORY[0x1E0C80C00];
  v557 = v559;
  v522 = v526;
  v523 = v526;
  v524 = 16;
  v525 = 0;
  v559[0] = v7;
  v558 = 0x800000001;
  v554 = v556;
  v555 = 0x1000000000;
  v8 = *(_QWORD *)(v0 + 72);
  v520[0] = *(_QWORD *)(v0 + 720);
  v520[1] = v8;
  memset(&v520[2], 0, 24);
  v521 = 257;
  v546 = v548;
  v547 = 0x1000000000;
  v549 = 0;
  v550 = 1;
  v513 = v0 + 192;
  v512 = v0 + 352;
  v551 = 0;
  v552 = (llvm::DataLayout **)v520;
  v510 = v0 + 560;
  v511 = v7;
  v553 = v7;
  v509 = v0 + 664;
  v544 = 0x1000000000;
  v545[16] = v0 + 376;
  v543 = v545;
  while ((_DWORD)v558)
  {
    v9 = *((_QWORD *)v557 + v558 - 1);
    LODWORD(v558) = v558 - 1;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v522, v9);
    if (!v10)
      goto LABEL_21;
    v11 = *(unsigned __int8 *)(v9 + 16);
    if (v9 && v11 == 83)
    {
      v12 = *(_DWORD *)(v9 + 20);
      if ((v12 & 0x40000000) != 0)
      {
        v14 = *(char **)(v9 - 8);
        v13 = v12 & 0x7FFFFFF;
      }
      else
      {
        v13 = v12 & 0x7FFFFFF;
        v14 = (char *)(v9 - 32 * v13);
      }
      sub_1C4DA9878((unsigned int *)&v557, (uint64_t)v557 + 8 * v558, v14, &v14[32 * v13]);
LABEL_20:
      v6 = 1;
LABEL_21:
      v27 = 2;
      goto LABEL_22;
    }
    if (v9 && v11 == 85)
    {
      v15 = *(_QWORD *)(v9 - 32);
      v16 = v558;
      if (v558 >= (unint64_t)HIDWORD(v558))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v557, (uint64_t)v559, v558 + 1, 8);
        v16 = v558;
      }
      *((_QWORD *)v557 + v16) = v15;
      v17 = (v558 + 1);
      LODWORD(v558) = v17;
      v18 = *(_QWORD *)(v9 - 64);
      if (v17 >= HIDWORD(v558))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v557, (uint64_t)v559, v17 + 1, 8);
        LODWORD(v17) = v558;
      }
      *((_QWORD *)v557 + v17) = v18;
      LODWORD(v558) = v558 + 1;
      goto LABEL_20;
    }
    LODWORD(v555) = 0;
    v560[1] = 0;
    v560[0] = 0;
    v540 = &off_1E8140830;
    *(_QWORD *)&v541 = v519;
    *((_QWORD *)&v541 + 1) = v5;
    v542 = &v540;
    v19 = *(_QWORD *)(v5 + 48);
    v20 = *(_QWORD *)(v5 + 56);
    v21 = *(_BYTE *)(v5 + 712);
    v22 = *(_QWORD *)(v5 + 104);
    v23 = *(_QWORD *)(v5 + 80);
    v24 = *(_QWORD *)(v5 + 88);
    v581 = 0uLL;
    v582[0] = 0;
    memset(&v582[8], 0, 32);
    v582[40] = 1;
    v588 = &v586;
    v586 = &off_1E8140830;
    v587 = v541;
    sub_1C5099258((uint64_t)&v562, (uint64_t)&v554, v19, v20, v23, (uint64_t)&v586, (uint64_t)v517, v2, (uint64_t)v519, (uint64_t)&v581, v513, v512, (uint64_t)&v543, (uint64_t)v560, v21, v22, v24);
    sub_1C5099340((uint64_t)&v562, v9, 0);
    v25 = v570;
    if (v570 == &v567)
    {
      v25 = &v567;
      v26 = 4;
    }
    else
    {
      if (!v570)
        goto LABEL_26;
      v26 = 5;
    }
    (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_26:
    if (v588 == &v586)
    {
      v28 = (void (**)(void))((char *)v586 + 32);
    }
    else
    {
      if (!v588)
        goto LABEL_31;
      v28 = (void (**)(void))((char *)*v588 + 40);
    }
    (*v28)();
LABEL_31:
    v29 = v6;
    if (v542 == &v540)
    {
      v30 = (void (**)(void))(v540 + 4);
    }
    else
    {
      if (!v542)
        goto LABEL_36;
      v30 = (void (**)(void))(*v542 + 5);
    }
    (*v30)();
LABEL_36:
    v31 = v560[0];
    if (v560[0])
    {
      if (*(_QWORD *)(v5 + 656))
      {
        for (i = *(_QWORD **)(v5 + 648); i; i = (_QWORD *)*i)
        {
          v33 = (void *)i[4];
          if (v560[0] >= v33)
          {
            if (v33 >= v560[0])
              goto LABEL_54;
            ++i;
          }
        }
      }
      else
      {
        v34 = *(unsigned int *)(v5 + 616);
        if ((_DWORD)v34)
        {
          v35 = *(void ***)(v5 + 608);
          v36 = 8 * v34;
          while (*v35 != v560[0])
          {
            ++v35;
            v36 -= 8;
            if (!v36)
              goto LABEL_50;
          }
          if (v36)
            goto LABEL_54;
        }
      }
LABEL_50:
      v37 = v2;
      v562 = (void *)*((_QWORD *)v560[0] - 4 * (*((_DWORD *)v560[0] + 5) & 0x7FFFFFF));
      v38 = sub_1C61DAD48(v510, (uint64_t *)&v562);
      v39 = v38;
      v40 = *(_OWORD *)v560;
      v41 = *(unsigned int *)(v38 + 8);
      if (v41 >= *(unsigned int *)(v38 + 12))
      {
        v508 = *(_OWORD *)v560;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v38, v38 + 16, v41 + 1, 16);
        v40 = v508;
        v41 = *(unsigned int *)(v39 + 8);
      }
      *(_OWORD *)(*(_QWORD *)v39 + 16 * v41) = v40;
      ++*(_DWORD *)(v39 + 8);
      v562 = 0;
      if (!sub_1C4E2F6FC(*(_QWORD *)(v5 + 664), *(_DWORD *)(v5 + 680), (uint64_t)v31, &v562)
        || (v2 = v37, v562 == (void *)(*(_QWORD *)(v5 + 664) + 16 * *(unsigned int *)(v5 + 680))))
      {
        v54 = *(_DWORD *)(v5 + 672);
        v562 = v31;
        *((_DWORD *)sub_1C61DAFE8(v509, (uint64_t *)&v562) + 2) = v54;
        v2 = v37;
      }
    }
LABEL_54:
    *(_QWORD *)&v582[32] = v9;
    v42 = v550;
    if (v550)
    {
      v6 = v29;
      if (*((_QWORD *)&v581 + 1) | *(_QWORD *)&v582[8])
      {
        v42 = 0;
      }
      else if ((_QWORD)v581)
      {
        v42 = *(_QWORD *)&v582[16] == 0;
      }
      else
      {
        v42 = 1;
      }
    }
    else
    {
      v6 = v29;
    }
    v550 = v42;
    if ((_DWORD)v547)
    {
      v43 = (_QWORD *)*((_QWORD *)v546 + 4);
      if ((!v43 || !*(_QWORD *)&v582[16] || *v43 == **(_QWORD **)&v582[16])
        && ((v44 = *(unsigned __int8 **)v546) != 0 ? (v45 = (_QWORD)v581 == 0) : (v45 = 1),
            (v45 || *(_QWORD *)v44 == *(_QWORD *)v581)
         && ((v46 = (_QWORD *)*((_QWORD *)v546 + 5)) == 0 || !*(_QWORD *)&v582[24] || *v46 == **(_QWORD **)&v582[24])
         && *((unsigned __int8 *)v546 + 56) == v582[40]))
      {
        v47 = v43 != *(_QWORD **)&v582[16];
        if (v44 != (unsigned __int8 *)v581)
          v47 |= 2u;
        if (*((_QWORD *)v546 + 1) != *((_QWORD *)&v581 + 1))
          v47 |= 4u;
        if (v46 != *(_QWORD **)&v582[24])
          v47 |= 8u;
        v48 = *((_QWORD *)v546 + 3);
        if (v48)
        {
          if (v48 != *(_QWORD *)&v582[8] && *(_QWORD *)&v582[8] != 0)
            v47 |= 0x10u;
        }
        if ((v47 & (v47 - 1)) != 0)
          v47 = 255;
      }
      else
      {
        v47 = 255;
      }
      if (v549)
      {
        if (v549 != v47)
        {
          v549 = 255;
LABEL_102:
          LODWORD(v547) = 0;
          v27 = 3;
          goto LABEL_22;
        }
      }
      else
      {
        v549 = v47;
      }
      if (v47 == 16 || v47 == 255 || v47 == 4 && *(_QWORD *)&v582[24] || v47 == 2 && v582[0])
        goto LABEL_102;
      if (v547 >= HIDWORD(v547))
      {
LABEL_107:
        sub_1C509B65C((uint64_t)&v546, &v581);
        v27 = 0;
        goto LABEL_22;
      }
      v27 = 0;
      v50 = (char *)v546 + 64 * (unint64_t)v547;
    }
    else
    {
      if (!HIDWORD(v547))
        goto LABEL_107;
      v27 = 0;
      v50 = v546;
    }
    v51 = v581;
    v52 = *(_OWORD *)v582;
    v53 = *(_OWORD *)&v582[32];
    v50[2] = *(_OWORD *)&v582[16];
    v50[3] = v53;
    *v50 = v51;
    v50[1] = v52;
    LODWORD(v547) = v547 + 1;
LABEL_22:
    if (v27 == 3)
      break;
  }
  if (!(_DWORD)v547)
    goto LABEL_448;
  if ((_DWORD)v547 == 1 || !v549)
  {
    if (!(_DWORD)v544)
      goto LABEL_458;
    v243 = (uint64_t *)v543;
    v244 = 8 * v544;
    do
    {
      v245 = *v243++;
      (*(void (**)(uint64_t))(*(_QWORD *)v245 + 24))(v245);
      v244 -= 8;
    }
    while (v244);
    if ((_DWORD)v544)
    {
      v246 = 8 * v544;
      v247 = (char *)v543 - 8;
      do
      {
        v248 = *(_QWORD *)&v247[v246];
        *(_QWORD *)&v247[v246] = 0;
        if (v248)
          (*(void (**)(uint64_t))(*(_QWORD *)v248 + 8))(v248);
        v246 -= 8;
      }
      while (v246);
      v249 = v6;
      v242 = 1;
    }
    else
    {
LABEL_458:
      v249 = v6;
      v242 = 0;
    }
    LODWORD(v544) = 0;
    v251 = *(unsigned __int8 **)v546;
    v250 = (llvm::SmallPtrSetImplBase *)*((_QWORD *)v546 + 1);
    v253 = *((_QWORD *)v546 + 3);
    v252 = (unsigned __int8 *)*((_QWORD *)v546 + 4);
    v254 = *((_QWORD *)v546 + 5);
    v255 = *((_BYTE *)v546 + 56);
    v256 = v511;
    if ((v249 & 1) == 0)
    {
      if (!(_DWORD)v555)
        goto LABEL_533;
      v264 = (char *)v554;
      v265 = 8 * v555;
      while (1)
      {
        v266 = *(_QWORD *)v264 && *(unsigned __int8 *)(*(_QWORD *)v264 + 16) >= 0x1Cu;
        if (v266 && *(_QWORD *)(*(_QWORD *)v264 + 40) != *((_QWORD *)v519 + 5))
          break;
        v264 += 8;
        v265 -= 8;
        if (!v265)
          goto LABEL_533;
      }
    }
    sub_1C4773D54((uint64_t)&v562, (uint64_t)v519, 0, 0, 0);
    v257 = (_DWORD *)(v5 + 128);
    v258 = sub_1C5098A68((_DWORD *)(v5 + 128), v511);
    v560[0] = (void *)6;
    v560[1] = 0;
    v259 = v258[2];
    v561[0] = v259;
    if (v259 != -8192 && v259 != -4096 && v259 != 0)
    {
      v261 = *v258 & 0xFFFFFFFFFFFFFFF8;
      v560[1] = *(void **)v261;
      *(_QWORD *)v261 = v560;
      v560[0] = (void *)(v261 | 6);
      if (v560[1])
        *(_QWORD *)v560[1] = *(_QWORD *)v560[1] & 7 | (unint64_t)&v560[1];
      v259 = v561[0];
    }
    v518 = v250;
    if (v259 == -8192 || v259 == -4096 || !v259)
    {
      v262 = 0;
      v263 = 0;
      *(_QWORD *)v582 = 0;
      v581 = 6uLL;
    }
    else
    {
      *((_QWORD *)&v581 + 1) = 0;
      *(_QWORD *)v582 = v259;
      v267 = (unint64_t)v560[0] & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)&v581 + 1) = *(_QWORD *)((unint64_t)v560[0] & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)v267 = &v581;
      *(_QWORD *)&v581 = v267 | 6;
      v262 = *((_QWORD *)&v581 + 1);
      if (*((_QWORD *)&v581 + 1))
        **((_QWORD **)&v581 + 1) = **((_QWORD **)&v581 + 1) & 7 | ((unint64_t)&v581 + 8);
      v263 = *(llvm::Value **)v582;
    }
    if (v263 != (llvm::Value *)-8192 && v263 != (llvm::Value *)-4096 && v263)
    {
      v268 = v581 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v581 & 0xFFFFFFFFFFFFFFF8) = v262;
      if (*((_QWORD *)&v581 + 1))
      {
        **((_QWORD **)&v581 + 1) = **((_QWORD **)&v581 + 1) & 7 | v268;
      }
      else
      {
        v269 = *(_QWORD *)v582;
        v270 = ****(int32x2_t *****)v582;
        v271 = (unint64_t)v270[303];
        if (v271 <= v268)
        {
          v272 = v270[305].u32[0];
          if (v271 + 16 * v272 > v268)
          {
            v273 = v272 - 1;
            LODWORD(v274) = v273 & ((*(_DWORD *)v582 >> 4) ^ (*(_DWORD *)v582 >> 9));
            v275 = (uint64_t *)(v271 + 16 * v274);
            v276 = *v275;
            if (*(_QWORD *)v582 != *v275)
            {
              v277 = 1;
              do
              {
                if (v276 == -4096)
                  goto LABEL_497;
                v278 = v274 + v277++;
                v274 = v278 & v273;
                v276 = *(_QWORD *)(v271 + 16 * v274);
              }
              while (*(_QWORD *)v582 != v276);
              v275 = (uint64_t *)(v271 + 16 * v274);
            }
            *v275 = -8192;
            v270[304] = vadd_s32(v270[304], (int32x2_t)0x1FFFFFFFFLL);
            v269 = *(_QWORD *)v582;
LABEL_497:
            *(_BYTE *)(v269 + 17) &= ~1u;
          }
        }
      }
    }
    if (v263)
    {
      v279 = *v511;
      if (*(int32x2_t ****)v263 == *v511)
      {
LABEL_504:
        llvm::User::replaceUsesOfWith(v519, (llvm::Value *)v256, v263);
        v581 = 6uLL;
        *(_QWORD *)v582 = v263;
        if (v263 != (llvm::Value *)-8192 && v263 != (llvm::Value *)-4096 && v263)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v581);
        v282 = sub_1C5098A68(v257, v256);
        v283 = v282[2];
        v284 = *(_QWORD *)v582;
        if (v283 != *(_QWORD *)v582)
        {
          if (v283 != -4096 && v283 && v283 != -8192)
          {
            v328 = *v282 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v328 = v282[1];
            v329 = (unint64_t *)v282[1];
            if (v329)
            {
              *v329 = *v329 & 7 | v328;
            }
            else
            {
              v330 = v282[2];
              v331 = ***(int32x2_t ****)v330;
              v332 = (unint64_t)v331[303];
              if (v332 <= v328)
              {
                v333 = v331[305].u32[0];
                if (v332 + 16 * v333 > v328)
                {
                  v334 = v333 - 1;
                  LODWORD(v335) = v334 & ((v330 >> 4) ^ (v330 >> 9));
                  v336 = (uint64_t *)(v332 + 16 * v335);
                  v337 = *v336;
                  if (v330 != *v336)
                  {
                    v338 = 1;
                    do
                    {
                      if (v337 == -4096)
                        goto LABEL_603;
                      v339 = v335 + v338++;
                      v335 = v339 & v334;
                      v337 = *(_QWORD *)(v332 + 16 * v335);
                    }
                    while (v330 != v337);
                    v336 = (uint64_t *)(v332 + 16 * v335);
                  }
                  *v336 = -8192;
                  v331[304] = vadd_s32(v331[304], (int32x2_t)0x1FFFFFFFFLL);
                  v330 = v282[2];
LABEL_603:
                  *(_BYTE *)(v330 + 17) &= ~1u;
                }
              }
            }
            v284 = *(_QWORD *)v582;
          }
          v282[2] = v284;
          if (v284 != -4096 && v284 != -8192 && v284 != 0)
          {
            v286 = v581;
            v287 = (_QWORD *)(v581 & 0xFFFFFFFFFFFFFFF8);
            v282[1] = *(_QWORD *)(v581 & 0xFFFFFFFFFFFFFFF8);
            *v287 = v282;
            *v282 = v286 & 0xFFFFFFFFFFFFFFF8 | *v282 & 7;
            v288 = (unint64_t *)v282[1];
            if (v288)
              *v288 = *v288 & 7 | (unint64_t)(v282 + 1);
          }
        }
        if (*(_QWORD *)v582 != -8192 && *(_QWORD *)v582 != -4096 && *(_QWORD *)v582 != 0)
        {
          v317 = v581 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v581 & 0xFFFFFFFFFFFFFFF8) = *((_QWORD *)&v581 + 1);
          if (*((_QWORD *)&v581 + 1))
          {
            **((_QWORD **)&v581 + 1) = **((_QWORD **)&v581 + 1) & 7 | v317;
          }
          else
          {
            v318 = *(_QWORD *)v582;
            v319 = ****(int32x2_t *****)v582;
            v320 = (unint64_t)v319[303];
            if (v320 <= v317)
            {
              v321 = v319[305].u32[0];
              if (v320 + 16 * v321 > v317)
              {
                v322 = v321 - 1;
                LODWORD(v323) = v322 & ((*(_DWORD *)v582 >> 4) ^ (*(_DWORD *)v582 >> 9));
                v324 = (uint64_t *)(v320 + 16 * v323);
                v325 = *v324;
                if (*(_QWORD *)v582 != *v324)
                {
                  v326 = 1;
                  do
                  {
                    if (v325 == -4096)
                      goto LABEL_591;
                    v327 = v323 + v326++;
                    v323 = v327 & v322;
                    v325 = *(_QWORD *)(v320 + 16 * v323);
                  }
                  while (*(_QWORD *)v582 != v325);
                  v324 = (uint64_t *)(v320 + 16 * v323);
                }
                *v324 = -8192;
                v319[304] = vadd_s32(v319[304], (int32x2_t)0x1FFFFFFFFLL);
                v318 = *(_QWORD *)v582;
LABEL_591:
                *(_BYTE *)(v318 + 17) &= ~1u;
              }
            }
          }
        }
        if (v256[1])
          goto LABEL_524;
        v300 = *(_QWORD *)(v5 + 120);
        if (v300)
          v301 = v300 - 24;
        else
          v301 = 0;
        v302 = *(_QWORD *)(v301 + 40);
        v586 = (void *)6;
        *(_QWORD *)&v587 = 0;
        *((_QWORD *)&v587 + 1) = v301;
        if (v301 != -8192 && v301 != -4096 && v301 != 0)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v586);
        v304 = *(uint64_t **)(v5 + 72);
        *(_QWORD *)&v581 = &off_1E8140878;
        *((_QWORD *)&v581 + 1) = v5;
        *(_QWORD *)&v582[8] = &v581;
        llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)v511, v304, 0, &v581);
        if (*(__int128 **)&v582[8] == &v581)
        {
          v305 = (void (**)(void))(v581 + 32);
        }
        else
        {
          if (!*(_QWORD *)&v582[8])
          {
LABEL_610:
            if (*((_QWORD *)&v587 + 1) != v301)
            {
              *(_QWORD *)(v5 + 120) = *(_QWORD *)(v302 + 48);
              v341 = *(_DWORD *)(v5 + 136);
              if (v341 || *(_DWORD *)(v5 + 140))
              {
                v406 = *(unsigned int *)(v5 + 144);
                if (v406 > 4 * v341 && v406 >= 0x41)
                {
                  sub_1C509F99C(v257);
                }
                else
                {
                  if ((_DWORD)v406)
                  {
                    v407 = *(_QWORD **)v257;
                    v408 = (_QWORD *)(*(_QWORD *)v257 + (v406 << 6));
                    do
                    {
                      v409 = v407[3];
                      if (v409 != -4096)
                      {
                        if (v409 == -8192)
                          goto LABEL_756;
                        v410 = v407[7];
                        if (v410 && v410 != -8192 && v410 != -4096)
                        {
                          v411 = v407[5] & 0xFFFFFFFFFFFFFFF8;
                          *(_QWORD *)v411 = v407[6];
                          v412 = (unint64_t *)v407[6];
                          if (v412)
                          {
                            *v412 = *v412 & 7 | v411;
                          }
                          else
                          {
                            v413 = v407[7];
                            v414 = ***(int32x2_t ****)v413;
                            v415 = (unint64_t)v414[303];
                            if (v415 <= v411)
                            {
                              v416 = v414[305].u32[0];
                              if (v415 + 16 * v416 > v411)
                              {
                                v417 = v416 - 1;
                                LODWORD(v418) = v417 & ((v413 >> 4) ^ (v413 >> 9));
                                v419 = (uint64_t *)(v415 + 16 * v418);
                                v420 = *v419;
                                if (v413 != *v419)
                                {
                                  v421 = 1;
                                  do
                                  {
                                    if (v420 == -4096)
                                      goto LABEL_748;
                                    v422 = v418 + v421++;
                                    v418 = v422 & v417;
                                    v420 = *(_QWORD *)(v415 + 16 * v418);
                                  }
                                  while (v413 != v420);
                                  v419 = (uint64_t *)(v415 + 16 * v418);
                                }
                                *v419 = -8192;
                                v414[304] = vadd_s32(v414[304], (int32x2_t)0x1FFFFFFFFLL);
                                v413 = v407[7];
LABEL_748:
                                *(_BYTE *)(v413 + 17) &= ~1u;
                              }
                            }
                          }
                          v409 = v407[3];
                        }
                        if (v409 != -4096)
                        {
LABEL_756:
                          if (v409 && v409 != -8192)
                          {
                            v423 = v407[1] & 0xFFFFFFFFFFFFFFF8;
                            *(_QWORD *)v423 = v407[2];
                            v424 = (unint64_t *)v407[2];
                            if (v424)
                            {
                              *v424 = *v424 & 7 | v423;
                            }
                            else
                            {
                              v425 = v407[3];
                              v426 = ***(int32x2_t ****)v425;
                              v427 = (unint64_t)v426[303];
                              if (v427 <= v423)
                              {
                                v428 = v426[305].u32[0];
                                if (v427 + 16 * v428 > v423)
                                {
                                  v429 = v428 - 1;
                                  LODWORD(v430) = v429 & ((v425 >> 4) ^ (v425 >> 9));
                                  v431 = (uint64_t *)(v427 + 16 * v430);
                                  v432 = *v431;
                                  if (v425 != *v431)
                                  {
                                    v433 = 1;
                                    do
                                    {
                                      if (v432 == -4096)
                                        goto LABEL_766;
                                      v434 = v430 + v433++;
                                      v430 = v434 & v429;
                                      v432 = *(_QWORD *)(v427 + 16 * v430);
                                    }
                                    while (v425 != v432);
                                    v431 = (uint64_t *)(v427 + 16 * v430);
                                  }
                                  *v431 = -8192;
                                  v426[304] = vadd_s32(v426[304], (int32x2_t)0x1FFFFFFFFLL);
                                  v425 = v407[3];
LABEL_766:
                                  *(_BYTE *)(v425 + 17) &= ~1u;
                                }
                              }
                            }
                          }
                          v407[3] = -4096;
                        }
                        v407[4] = 0;
                      }
                      v407 += 8;
                    }
                    while (v407 != v408);
                  }
                  *(_QWORD *)(v5 + 136) = 0;
                }
              }
              if (*(_BYTE *)(v5 + 176))
              {
                sub_1C4E43068(v5 + 152);
                MEMORY[0x1CAA32FB4](*(_QWORD *)(v5 + 152), 8);
                *(_BYTE *)(v5 + 176) = 0;
              }
            }
            if (*((_QWORD *)&v587 + 1) != -8192 && *((_QWORD *)&v587 + 1) != -4096 && *((_QWORD *)&v587 + 1))
            {
              v342 = (unint64_t)v586 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)((unint64_t)v586 & 0xFFFFFFFFFFFFFFF8) = v587;
              if ((_QWORD)v587)
              {
                *(_QWORD *)v587 = *(_QWORD *)v587 & 7 | v342;
              }
              else
              {
                v343 = *((_QWORD *)&v587 + 1);
                v344 = (int32x2_t *)****((_QWORD ****)&v587 + 1);
                v345 = (unint64_t)v344[303];
                if (v345 <= v342)
                {
                  v346 = v344[305].u32[0];
                  if (v345 + 16 * v346 > v342)
                  {
                    v347 = v346 - 1;
                    LODWORD(v348) = v347 & ((DWORD2(v587) >> 4) ^ (DWORD2(v587) >> 9));
                    v349 = (uint64_t *)(v345 + 16 * v348);
                    v350 = *v349;
                    if (*((_QWORD *)&v587 + 1) != *v349)
                    {
                      v351 = 1;
                      do
                      {
                        if (v350 == -4096)
                          goto LABEL_627;
                        v352 = v348 + v351++;
                        v348 = v352 & v347;
                        v350 = *(_QWORD *)(v345 + 16 * v348);
                      }
                      while (*((_QWORD *)&v587 + 1) != v350);
                      v349 = (uint64_t *)(v345 + 16 * v348);
                    }
                    *v349 = -8192;
                    v344[304] = vadd_s32(v344[304], (int32x2_t)0x1FFFFFFFFLL);
                    v343 = *((_QWORD *)&v587 + 1);
LABEL_627:
                    *(_BYTE *)(v343 + 17) &= ~1u;
                  }
                }
              }
            }
LABEL_524:
            v242 = 1;
            goto LABEL_525;
          }
          v305 = (void (**)(void))(**(_QWORD **)&v582[8] + 40);
        }
        (*v305)();
        goto LABEL_610;
      }
      *(_WORD *)&v582[16] = 257;
      v280 = (unsigned __int8 *)v263;
      goto LABEL_502;
    }
    if (!byte_1ED7F5500
      && (word_1ED7F5488
       || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 40) + 376))(*(_QWORD *)(v5 + 40))))
    {
      if (v252)
        v340 = *(llvm::ConstantInt **)v252;
      else
        v340 = 0;
      if (v253)
        v356 = *(_QWORD *)v254;
      else
        v356 = 0;
      if (v340)
      {
        if (*((_BYTE *)v340 + 8) == 15)
          v357 = v340;
        else
          v357 = 0;
      }
      else
      {
        v357 = 0;
      }
      if (v356)
      {
        if (*(_BYTE *)(v356 + 8) == 15)
          v358 = v356;
        else
          v358 = 0;
      }
      else
      {
        v358 = 0;
      }
      if (!sub_1C4DEB33C(*(_QWORD *)(v5 + 720), (uint64_t)*v511))
      {
        v515 = v251;
        if (!v357
          || ((v359 = *(_QWORD *)(v5 + 720),
               v360 = *((_DWORD *)v357 + 2) >> 8,
               v361 = *(__int32 **)(v359 + 384),
               v362 = *(unsigned int *)(v359 + 392),
               (v363 = wmemchr(v361, v360, v362)) != 0)
            ? (v364 = v363)
            : (v364 = &v361[v362]),
              v362 == v364 - v361))
        {
          if (!v358
            || ((v365 = *(_QWORD *)(v5 + 720),
                 v366 = *(__int32 **)(v365 + 384),
                 v367 = *(unsigned int *)(v365 + 392),
                 (v368 = wmemchr(v366, *(_DWORD *)(v358 + 8) >> 8, v367)) != 0)
              ? (v369 = v368)
              : (v369 = &v366[v367]),
                v367 == v369 - v366))
          {
            if (!v251
              || ((v370 = *(_QWORD *)(v5 + 720),
                   v371 = *(__int32 **)(v370 + 384),
                   v372 = *(unsigned int *)(v370 + 392),
                   (v373 = wmemchr(v371, *(_DWORD *)(*(_QWORD *)v251 + 8) >> 8, v372)) != 0)
                ? (v374 = v373)
                : (v374 = &v371[v372]),
                  v372 == v374 - v371))
            {
              v256 = v511;
              llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(v5 + 720), (llvm::Type *)*v511);
              v376 = (llvm::ConstantInt *)v375;
              if (v252)
              {
                v377 = *(llvm::ConstantInt **)v252;
                v378 = (unsigned __int8 *)v254;
                if (*(_BYTE *)(*(_QWORD *)v252 + 8) == 15)
                {
                  *(_QWORD *)&v581 = "sunkaddr";
                  *(_WORD *)&v582[16] = 259;
                  v379 = sub_1C4773E38((uint64_t *)&v562, 47, v252, v375, (uint64_t)&v581);
                  v377 = *(llvm::ConstantInt **)v379;
                }
                else
                {
                  v379 = v252;
                }
                if (v377 != v376)
                {
                  *(_QWORD *)&v581 = "sunkaddr";
                  *(_WORD *)&v582[16] = 259;
                  v379 = sub_1C4D8D514((uint64_t *)&v562, v379, (uint64_t)v376, 1, (uint64_t)&v581);
                }
              }
              else
              {
                v378 = (unsigned __int8 *)v254;
                v379 = 0;
              }
              if (!v253)
              {
LABEL_832:
                if (v251)
                {
                  *(_QWORD *)&v581 = "sunkaddr";
                  *(_WORD *)&v582[16] = 259;
                  v459 = v376;
                  v460 = sub_1C4773E38((uint64_t *)&v562, 47, v515, (uint64_t)v376, (uint64_t)&v581);
                  v461 = v460;
                  if (v379)
                  {
                    v586 = "sunkaddr";
                    v589 = 259;
                    v462 = (llvm::Value *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)v571 + 16))(v571, v379, v460, 0, 0);
                    if (!v462)
                    {
                      *(_WORD *)&v582[16] = 257;
                      v463 = (char *)operator new(0x80uLL);
                      v464 = v463;
                      *(_QWORD *)v463 = 0;
                      *((_QWORD *)v463 + 2) = 0;
                      *((_QWORD *)v463 + 1) = 0;
                      *((_QWORD *)v463 + 5) = 0;
                      *((_QWORD *)v463 + 6) = 0;
                      *((_QWORD *)v463 + 4) = 0;
                      v465 = (unsigned __int8 **)(v463 + 32);
                      *((_QWORD *)v463 + 8) = *(_QWORD *)v379;
                      v462 = (llvm::Value *)(v463 + 64);
                      *((_QWORD *)v463 + 3) = v463 + 64;
                      *((_QWORD *)v463 + 7) = v463 + 64;
                      *((_QWORD *)v463 + 9) = 0;
                      v463[80] = 41;
                      v463[81] = 0;
                      *((_WORD *)v463 + 41) = 0;
                      *((_DWORD *)v463 + 21) = 2;
                      *((_DWORD *)v463 + 30) = 0;
                      *(_OWORD *)(v463 + 104) = 0u;
                      *(_OWORD *)(v463 + 88) = 0u;
                      *(_QWORD *)v463 = v379;
                      v468 = *((_QWORD *)v379 + 1);
                      v467 = v379 + 8;
                      v466 = v468;
                      *((_QWORD *)v463 + 1) = v468;
                      if (v468)
                        *(_QWORD *)(v466 + 16) = v463 + 8;
                      *((_QWORD *)v463 + 2) = v467;
                      *v467 = v463;
                      if (*((_QWORD *)v463 + 4))
                      {
                        **((_QWORD **)v463 + 6) = *((_QWORD *)v463 + 5);
                        v503 = *((_QWORD *)v463 + 5);
                        if (v503)
                          *(_QWORD *)(v503 + 16) = *((_QWORD *)v463 + 6);
                      }
                      v469 = v257;
                      *v465 = v461;
                      if (v461)
                      {
                        v472 = *((_QWORD *)v461 + 1);
                        v471 = (unsigned __int8 ***)(v461 + 8);
                        v470 = v472;
                        *((_QWORD *)v463 + 5) = v472;
                        if (v472)
                          *(_QWORD *)(v470 + 16) = v463 + 40;
                        *((_QWORD *)v463 + 6) = v471;
                        *v471 = v465;
                      }
                      llvm::Value::setName((uint64_t ***)v463 + 8, (uint64_t)&v581);
                      (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v572 + 16))(v572, v462, &v586, v568, v569);
                      if ((_DWORD)v563)
                      {
                        v473 = (char *)v562;
                        v474 = (char *)v562 + 16 * v563;
                        v475 = (unsigned __int8 **)(v464 + 112);
                        do
                        {
                          v476 = *(_DWORD *)v473;
                          v477 = (unsigned __int8 *)*((_QWORD *)v473 + 1);
                          if (v477)
                          {
                            if (!v476)
                            {
                              v593 = (void *)*((_QWORD *)v473 + 1);
                              llvm::MetadataTracking::track((uint64_t)&v593, v477, 2);
                              v478 = *v475;
                              goto LABEL_854;
                            }
                          }
                          else
                          {
                            v478 = *v475;
                            if (!*v475 && (v464[87] & 0x20) == 0)
                              goto LABEL_851;
                            if (!v476)
                            {
                              v593 = 0;
LABEL_854:
                              if (v478)
                                llvm::MetadataTracking::untrack((uint64_t)(v464 + 112), v478);
                              v479 = (unsigned __int8 *)v593;
                              *v475 = (unsigned __int8 *)v593;
                              if (v479)
                                llvm::MetadataTracking::retrack((uint64_t)&v593, v479, (uint64_t)(v464 + 112));
                              goto LABEL_851;
                            }
                          }
                          llvm::Value::setMetadata(v462, *(_DWORD *)v473, (llvm::MDNode *)v477);
LABEL_851:
                          v473 += 16;
                        }
                        while (v473 != v474);
                      }
                      v257 = v469;
                    }
                    v379 = (unsigned __int8 *)v462;
                  }
                  else
                  {
                    v379 = v460;
                  }
                  v256 = v511;
                  v354 = (unsigned __int8 *)v518;
                  v376 = v459;
                }
                else
                {
                  v354 = (unsigned __int8 *)v518;
                }
                if (v354)
                {
                  v480 = llvm::ConstantInt::get(v376, (uint64_t)v354, 0);
                  v481 = v480;
                  if (v379)
                  {
                    v586 = "sunkaddr";
                    v589 = 259;
                    v482 = (llvm::Value *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v571 + 16))(v571, v379, v480, 0, 0);
                    if (!v482)
                    {
                      *(_WORD *)&v582[16] = 257;
                      v483 = (char *)operator new(0x80uLL);
                      v484 = v483;
                      *(_QWORD *)v483 = 0;
                      *((_QWORD *)v483 + 2) = 0;
                      *((_QWORD *)v483 + 1) = 0;
                      *((_QWORD *)v483 + 5) = 0;
                      *((_QWORD *)v483 + 6) = 0;
                      *((_QWORD *)v483 + 4) = 0;
                      v485 = (llvm::Value ***)(v483 + 32);
                      *((_QWORD *)v483 + 8) = *(_QWORD *)v379;
                      v482 = (llvm::Value *)(v483 + 64);
                      *((_QWORD *)v483 + 3) = v483 + 64;
                      *((_QWORD *)v483 + 7) = v483 + 64;
                      *((_QWORD *)v483 + 9) = 0;
                      v483[80] = 41;
                      v483[81] = 0;
                      *((_WORD *)v483 + 41) = 0;
                      *((_DWORD *)v483 + 21) = 2;
                      *((_DWORD *)v483 + 30) = 0;
                      *(_OWORD *)(v483 + 104) = 0u;
                      *(_OWORD *)(v483 + 88) = 0u;
                      *(_QWORD *)v483 = v379;
                      v488 = *((_QWORD *)v379 + 1);
                      v487 = v379 + 8;
                      v486 = v488;
                      *((_QWORD *)v483 + 1) = v488;
                      if (v488)
                        *(_QWORD *)(v486 + 16) = v483 + 8;
                      *((_QWORD *)v483 + 2) = v487;
                      *v487 = v483;
                      if (*((_QWORD *)v483 + 4))
                      {
                        **((_QWORD **)v483 + 6) = *((_QWORD *)v483 + 5);
                        v504 = *((_QWORD *)v483 + 5);
                        if (v504)
                          *(_QWORD *)(v504 + 16) = *((_QWORD *)v483 + 6);
                      }
                      v489 = v257;
                      *v485 = v481;
                      if (v481)
                      {
                        v492 = v481[1];
                        v491 = (llvm::Value ****)(v481 + 1);
                        v490 = v492;
                        *((_QWORD *)v483 + 5) = v492;
                        if (v492)
                          *((_QWORD *)v490 + 2) = v483 + 40;
                        *((_QWORD *)v483 + 6) = v491;
                        *v491 = v485;
                      }
                      llvm::Value::setName((uint64_t ***)v483 + 8, (uint64_t)&v581);
                      (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v572 + 16))(v572, v482, &v586, v568, v569);
                      if ((_DWORD)v563)
                      {
                        v493 = (char *)v562;
                        v494 = (char *)v562 + 16 * v563;
                        v495 = (unsigned __int8 **)(v484 + 112);
                        do
                        {
                          v496 = *(_DWORD *)v493;
                          v497 = (unsigned __int8 *)*((_QWORD *)v493 + 1);
                          if (v497)
                          {
                            if (!v496)
                            {
                              v593 = (void *)*((_QWORD *)v493 + 1);
                              llvm::MetadataTracking::track((uint64_t)&v593, v497, 2);
                              v354 = *v495;
                              goto LABEL_885;
                            }
                          }
                          else
                          {
                            v354 = *v495;
                            if (!*v495 && (v484[87] & 0x20) == 0)
                              goto LABEL_882;
                            if (!v496)
                            {
                              v593 = 0;
LABEL_885:
                              if (v354)
                                llvm::MetadataTracking::untrack((uint64_t)(v484 + 112), v354);
                              v354 = (unsigned __int8 *)v593;
                              *v495 = (unsigned __int8 *)v593;
                              if (v354)
                                llvm::MetadataTracking::retrack((uint64_t)&v593, v354, (uint64_t)(v484 + 112));
                              goto LABEL_882;
                            }
                          }
                          llvm::Value::setMetadata(v482, *(_DWORD *)v493, (llvm::MDNode *)v497);
LABEL_882:
                          v493 += 16;
                        }
                        while (v493 != v494);
                      }
                      v256 = v511;
                      v257 = v489;
                    }
                    v379 = (unsigned __int8 *)v482;
                  }
                  else
                  {
                    v379 = (unsigned __int8 *)v480;
                  }
                }
                v498 = (uint64_t)*v256;
                if (v379)
                {
                  *(_QWORD *)&v581 = "sunkaddr";
                  *(_WORD *)&v582[16] = 259;
                  NullValue = (llvm::Value *)sub_1C4773E38((uint64_t *)&v562, 48, v379, v498, (uint64_t)&v581);
                  goto LABEL_503;
                }
                v381 = *v256;
LABEL_687:
                NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)v381, (llvm::Type *)v354);
                goto LABEL_503;
              }
              if (*(llvm::ConstantInt **)v378 == v376)
              {
LABEL_802:
                if (v253 != 1)
                {
                  v440 = llvm::ConstantInt::get(v376, v253, 0);
                  *(_QWORD *)&v581 = "sunkaddr";
                  *(_WORD *)&v582[16] = 259;
                  v378 = (unsigned __int8 *)sub_1C4EC4040((uint64_t)&v562, (uint64_t)v378, (uint64_t)v440, (uint64_t)&v581, 0, 0);
                }
                if (v379)
                {
                  v586 = "sunkaddr";
                  v589 = 259;
                  v441 = (llvm::Value *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)v571 + 16))(v571, v379, v378, 0, 0);
                  if (!v441)
                  {
                    v442 = v378;
                    *(_WORD *)&v582[16] = 257;
                    v443 = (char *)operator new(0x80uLL);
                    v444 = v443;
                    *(_QWORD *)v443 = 0;
                    *((_QWORD *)v443 + 2) = 0;
                    *((_QWORD *)v443 + 1) = 0;
                    *((_QWORD *)v443 + 5) = 0;
                    *((_QWORD *)v443 + 6) = 0;
                    *((_QWORD *)v443 + 4) = 0;
                    v445 = (unsigned __int8 **)(v443 + 32);
                    *((_QWORD *)v443 + 8) = *(_QWORD *)v379;
                    v441 = (llvm::Value *)(v443 + 64);
                    *((_QWORD *)v443 + 3) = v443 + 64;
                    *((_QWORD *)v443 + 7) = v443 + 64;
                    *((_QWORD *)v443 + 9) = 0;
                    v443[80] = 41;
                    v443[81] = 0;
                    *((_WORD *)v443 + 41) = 0;
                    *((_DWORD *)v443 + 21) = 2;
                    *((_DWORD *)v443 + 30) = 0;
                    *(_OWORD *)(v443 + 104) = 0u;
                    *(_OWORD *)(v443 + 88) = 0u;
                    *(_QWORD *)v443 = v379;
                    v446 = *((_QWORD *)v379 + 1);
                    v447 = v379 + 8;
                    *((_QWORD *)v443 + 1) = v446;
                    if (v446)
                      *(_QWORD *)(v446 + 16) = v443 + 8;
                    v448 = v376;
                    *((_QWORD *)v443 + 2) = v447;
                    *v447 = v443;
                    if (*((_QWORD *)v443 + 4))
                    {
                      **((_QWORD **)v443 + 6) = *((_QWORD *)v443 + 5);
                      v505 = *((_QWORD *)v443 + 5);
                      if (v505)
                        *(_QWORD *)(v505 + 16) = *((_QWORD *)v443 + 6);
                    }
                    *v445 = v442;
                    if (v442)
                    {
                      v451 = *((_QWORD *)v442 + 1);
                      v450 = (unsigned __int8 ***)(v442 + 8);
                      v449 = v451;
                      *((_QWORD *)v443 + 5) = v451;
                      if (v451)
                        *(_QWORD *)(v449 + 16) = v443 + 40;
                      *((_QWORD *)v443 + 6) = v450;
                      *v450 = v445;
                    }
                    llvm::Value::setName((uint64_t ***)v443 + 8, (uint64_t)&v581);
                    (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v572 + 16))(v572, v441, &v586, v568, v569);
                    if ((_DWORD)v563)
                    {
                      v452 = (char *)v562;
                      v453 = (char *)v562 + 16 * v563;
                      v454 = (unsigned __int8 **)(v444 + 112);
                      do
                      {
                        v455 = *(_DWORD *)v452;
                        v456 = (unsigned __int8 *)*((_QWORD *)v452 + 1);
                        if (v456)
                        {
                          if (!v455)
                          {
                            v593 = (void *)*((_QWORD *)v452 + 1);
                            llvm::MetadataTracking::track((uint64_t)&v593, v456, 2);
                            v457 = *v454;
                            goto LABEL_825;
                          }
                        }
                        else
                        {
                          v457 = *v454;
                          if (!*v454 && (v444[87] & 0x20) == 0)
                            goto LABEL_822;
                          if (!v455)
                          {
                            v593 = 0;
LABEL_825:
                            if (v457)
                              llvm::MetadataTracking::untrack((uint64_t)(v444 + 112), v457);
                            v458 = (unsigned __int8 *)v593;
                            *v454 = (unsigned __int8 *)v593;
                            if (v458)
                              llvm::MetadataTracking::retrack((uint64_t)&v593, v458, (uint64_t)(v444 + 112));
                            goto LABEL_822;
                          }
                        }
                        llvm::Value::setMetadata(v441, *(_DWORD *)v452, (llvm::MDNode *)v456);
LABEL_822:
                        v452 += 16;
                      }
                      while (v452 != v453);
                    }
                    v256 = v511;
                    v257 = (_DWORD *)(v5 + 128);
                    v376 = v448;
                  }
                  v379 = (unsigned __int8 *)v441;
                }
                else
                {
                  v379 = v378;
                }
                goto LABEL_832;
              }
              if (*(_DWORD *)(*(_QWORD *)v378 + 8) == 15)
              {
                *(_QWORD *)&v581 = "sunkaddr";
                *(_WORD *)&v582[16] = 259;
                v435 = 47;
LABEL_801:
                v378 = sub_1C4773E38((uint64_t *)&v562, v435, v378, (uint64_t)v376, (uint64_t)&v581);
                goto LABEL_802;
              }
              if (*((_DWORD *)v376 + 2) >> 8 < *(_DWORD *)(*(_QWORD *)v378 + 8) >> 8)
              {
                *(_QWORD *)&v581 = "sunkaddr";
                *(_WORD *)&v582[16] = 259;
                v435 = 38;
                goto LABEL_801;
              }
              if (v379)
              {
                v499 = v379[16] <= 0x1Bu ? 0 : v379;
                if (v499 && v379 != v252)
                {
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v499 + 5) + 40, (uint64_t ***)v499);
                  v500 = *((_QWORD *)v499 + 3);
                  v501 = (_QWORD *)*((_QWORD *)v499 + 4);
                  *v501 = v500;
                  *(_QWORD *)(v500 + 8) = v501;
                  *((_QWORD *)v499 + 3) = 0;
                  *((_QWORD *)v499 + 4) = 0;
                  llvm::Value::deleteValue((llvm::Value *)v499);
                }
              }
            }
          }
        }
      }
LABEL_525:
      if (v561[0] != -8192 && v561[0] != -4096 && v561[0] != 0)
      {
        v306 = (unint64_t)v560[0] & 0xFFFFFFFFFFFFFFF8;
        *(void **)((unint64_t)v560[0] & 0xFFFFFFFFFFFFFFF8) = v560[1];
        if (v560[1])
        {
          *(_QWORD *)v560[1] = *(_QWORD *)v560[1] & 7 | v306;
        }
        else
        {
          v307 = v561[0];
          v308 = ***(int32x2_t ****)v561[0];
          v309 = (unint64_t)v308[303];
          if (v309 <= v306)
          {
            v310 = v308[305].u32[0];
            if (v309 + 16 * v310 > v306)
            {
              v311 = v310 - 1;
              LODWORD(v312) = v311 & ((LODWORD(v561[0]) >> 4) ^ (LODWORD(v561[0]) >> 9));
              v313 = (uint64_t *)(v309 + 16 * v312);
              v314 = *v313;
              if (v561[0] != *v313)
              {
                v315 = 1;
                do
                {
                  if (v314 == -4096)
                    goto LABEL_581;
                  v316 = v312 + v315++;
                  v312 = v316 & v311;
                  v314 = *(_QWORD *)(v309 + 16 * v312);
                }
                while (v561[0] != v314);
                v313 = (uint64_t *)(v309 + 16 * v312);
              }
              *v313 = -8192;
              v308[304] = vadd_s32(v308[304], (int32x2_t)0x1FFFFFFFFLL);
              v307 = v561[0];
LABEL_581:
              *(_BYTE *)(v307 + 17) &= ~1u;
            }
          }
        }
      }
      if (v562 != &v564)
        free(v562);
      goto LABEL_533;
    }
    llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(v5 + 720), (llvm::Type *)*v511);
    if (v252)
    {
      v297 = *(unsigned __int8 *)(*(_QWORD *)v252 + 8);
      if (v297 == 15)
        v298 = 0;
      else
        v298 = (uint64_t)v252;
      if (v297 == 15)
        v299 = v252;
      else
        v299 = 0;
      if (!v253)
        goto LABEL_634;
    }
    else
    {
      v298 = 0;
      v299 = 0;
      if (!v253)
        goto LABEL_634;
    }
    if (*(_DWORD *)(*(_QWORD *)v254 + 8) == 15)
    {
      if (v299 || v253 != 1)
        goto LABEL_525;
      v253 = 0;
      v299 = (unsigned __int8 *)v254;
    }
    else if (*((_DWORD *)v296 + 2) >> 8 > *(_DWORD *)(*(_QWORD *)v254 + 8) >> 8)
    {
      goto LABEL_525;
    }
LABEL_634:
    if (v251)
    {
      if (v299)
        goto LABEL_525;
    }
    else
    {
      v251 = v299;
    }
    v353 = v296;
    if (!sub_1C4DEB33C(*(_QWORD *)(v5 + 720), (uint64_t)*v511))
    {
      if (v251 || !v298)
      {
        if (v253 == 1 && !v251)
        {
          v380 = *v511;
          *(_QWORD *)&v581 = "sunkaddr";
          *(_WORD *)&v582[16] = 259;
          v251 = sub_1C4773E38((uint64_t *)&v562, 48, (unsigned __int8 *)v254, (uint64_t)v380, (uint64_t)&v581);
          v253 = 0;
        }
      }
      else
      {
        v355 = *v511;
        *(_QWORD *)&v581 = "sunkaddr";
        *(_WORD *)&v582[16] = 259;
        v251 = sub_1C4773E38((uint64_t *)&v562, 48, (unsigned __int8 *)v298, (uint64_t)v355, (uint64_t)&v581);
        v298 = 0;
      }
    }
    if (!v253 && !v251 && !v298 && !v518)
    {
      v256 = v511;
      v381 = *v511;
      goto LABEL_687;
    }
    if (!v251)
      goto LABEL_525;
    v382 = *((_DWORD *)*v511 + 2);
    if ((v382 & 0xFE) == 0x12)
      v382 = (*(*v511)[2])[1].u32[0];
    v383 = llvm::PointerType::get((llvm::PointerType *)(*v570 + 1912), (llvm::Type *)(v382 >> 8));
    v384 = *v570;
    v514 = v383;
    if (v298)
    {
      v385 = v353;
      if (*(llvm::ConstantInt **)v298 != v353)
      {
        *(_QWORD *)&v581 = "sunkaddr";
        *(_WORD *)&v582[16] = 259;
        v386 = sub_1C4D8D514((uint64_t *)&v562, (unsigned __int8 *)v298, (uint64_t)v353, 1, (uint64_t)&v581);
        v385 = v353;
        v298 = (uint64_t)v386;
      }
    }
    else
    {
      v385 = v353;
    }
    v387 = (llvm::GetElementPtrInst *)(v384 + 1912);
    if (v253)
    {
      if (*(llvm::ConstantInt **)v254 != v385)
      {
        *(_QWORD *)&v581 = "sunkaddr";
        *(_WORD *)&v582[16] = 259;
        v254 = (uint64_t)sub_1C4773E38((uint64_t *)&v562, 38, (unsigned __int8 *)v254, (uint64_t)v385, (uint64_t)&v581);
      }
      if (v253 != 1)
      {
        v388 = llvm::ConstantInt::get(v353, v253, 0);
        *(_QWORD *)&v581 = "sunkaddr";
        *(_WORD *)&v582[16] = 259;
        v254 = sub_1C4EC4040((uint64_t)&v562, v254, (uint64_t)v388, (uint64_t)&v581, 0, 0);
      }
      if (v298)
      {
        v586 = "sunkaddr";
        v589 = 259;
        v389 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v571 + 16))(v571, v298, v254, 0, 0);
        if (!v389)
        {
          *(_WORD *)&v582[16] = 257;
          v390 = (char *)operator new(0x80uLL);
          v391 = v390;
          *(_QWORD *)v390 = 0;
          *((_QWORD *)v390 + 2) = 0;
          *((_QWORD *)v390 + 1) = 0;
          *((_QWORD *)v390 + 5) = 0;
          *((_QWORD *)v390 + 6) = 0;
          *((_QWORD *)v390 + 4) = 0;
          v392 = (uint64_t *)(v390 + 32);
          *((_QWORD *)v390 + 8) = *(_QWORD *)v298;
          v389 = (llvm::Value *)(v390 + 64);
          *((_QWORD *)v390 + 3) = v390 + 64;
          *((_QWORD *)v390 + 7) = v390 + 64;
          *((_QWORD *)v390 + 9) = 0;
          v390[80] = 41;
          v390[81] = 0;
          *((_WORD *)v390 + 41) = 0;
          *((_DWORD *)v390 + 21) = 2;
          *((_DWORD *)v390 + 30) = 0;
          *(_OWORD *)(v390 + 104) = 0u;
          *(_OWORD *)(v390 + 88) = 0u;
          *(_QWORD *)v390 = v298;
          v395 = *(_QWORD *)(v298 + 8);
          v394 = (_QWORD *)(v298 + 8);
          v393 = v395;
          *((_QWORD *)v390 + 1) = v395;
          if (v395)
            *(_QWORD *)(v393 + 16) = v390 + 8;
          *((_QWORD *)v390 + 2) = v394;
          *v394 = v390;
          if (*((_QWORD *)v390 + 4))
          {
            **((_QWORD **)v390 + 6) = *((_QWORD *)v390 + 5);
            v502 = *((_QWORD *)v390 + 5);
            if (v502)
              *(_QWORD *)(v502 + 16) = *((_QWORD *)v390 + 6);
          }
          v516 = v251;
          *v392 = v254;
          if (v254)
          {
            v398 = *(_QWORD *)(v254 + 8);
            v397 = (uint64_t **)(v254 + 8);
            v396 = v398;
            *((_QWORD *)v390 + 5) = v398;
            if (v398)
              *(_QWORD *)(v396 + 16) = v390 + 40;
            *((_QWORD *)v390 + 6) = v397;
            *v397 = v392;
          }
          llvm::Value::setName((uint64_t ***)v390 + 8, (uint64_t)&v581);
          (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v572 + 16))(v572, v389, &v586, v568, v569);
          if ((_DWORD)v563)
          {
            v399 = (char *)v562;
            v400 = (char *)v562 + 16 * v563;
            v401 = (unsigned __int8 **)(v391 + 112);
            do
            {
              v402 = *(_DWORD *)v399;
              v403 = (unsigned __int8 *)*((_QWORD *)v399 + 1);
              if (v403)
              {
                if (!v402)
                {
                  v593 = (void *)*((_QWORD *)v399 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v593, v403, 2);
                  v404 = *v401;
                  goto LABEL_722;
                }
              }
              else
              {
                v404 = *v401;
                if (!*v401 && (v391[87] & 0x20) == 0)
                  goto LABEL_719;
                if (!v402)
                {
                  v593 = 0;
LABEL_722:
                  if (v404)
                    llvm::MetadataTracking::untrack((uint64_t)(v391 + 112), v404);
                  v405 = (unsigned __int8 *)v593;
                  *v401 = (unsigned __int8 *)v593;
                  if (v405)
                    llvm::MetadataTracking::retrack((uint64_t)&v593, v405, (uint64_t)(v391 + 112));
                  goto LABEL_719;
                }
              }
              llvm::Value::setMetadata(v389, *(_DWORD *)v399, (llvm::MDNode *)v403);
LABEL_719:
              v399 += 16;
            }
            while (v399 != v400);
          }
          v257 = (_DWORD *)(v5 + 128);
          v251 = v516;
        }
        v298 = (uint64_t)v389;
      }
      else
      {
        v298 = v254;
      }
      v385 = v353;
    }
    if (v518)
    {
      v436 = llvm::ConstantInt::get(v385, (uint64_t)v518, 0);
      v437 = v514;
      if (v298)
      {
        if (*(_QWORD *)v251 != v514)
        {
          *(_WORD *)&v582[16] = 257;
          v251 = sub_1C5098D9C((uint64_t *)&v562, v251, v514, (uint64_t)&v581);
        }
        *(_QWORD *)&v581 = "sunkaddr";
        *(_WORD *)&v582[16] = 259;
        if ((v255 & 1) != 0)
          v438 = sub_1C5098FF4((uint64_t *)&v562, v387, (uint64_t *)v251, v298, (uint64_t)&v581);
        else
          v438 = sub_1C4867B70((uint64_t *)&v562, v387, (uint64_t *)v251, v298, (uint64_t)&v581);
        v251 = (unsigned __int8 *)v438;
      }
      v256 = v511;
    }
    else
    {
      v436 = (llvm::Value **)v298;
      v256 = v511;
      v437 = v514;
    }
    if (v436)
    {
      if (*(_QWORD *)v251 != v437)
      {
        *(_WORD *)&v582[16] = 257;
        v251 = sub_1C5098D9C((uint64_t *)&v562, v251, v437, (uint64_t)&v581);
      }
      *(_QWORD *)&v581 = "sunkaddr";
      *(_WORD *)&v582[16] = 259;
      if ((v255 & 1) != 0)
        v439 = sub_1C5098FF4((uint64_t *)&v562, v387, (uint64_t *)v251, (uint64_t)v436, (uint64_t)&v581);
      else
        v439 = sub_1C4867B70((uint64_t *)&v562, v387, (uint64_t *)v251, (uint64_t)v436, (uint64_t)&v581);
      v251 = (unsigned __int8 *)v439;
    }
    v279 = *v256;
    if (*(int32x2_t ****)v251 == *v256)
    {
      v263 = (llvm::Value *)v251;
      goto LABEL_504;
    }
    *(_WORD *)&v582[16] = 257;
    v280 = v251;
LABEL_502:
    NullValue = (llvm::Value *)sub_1C5098D9C((uint64_t *)&v562, v280, (uint64_t)v279, (uint64_t)&v581);
LABEL_503:
    v263 = NullValue;
    goto LABEL_504;
  }
  if (v550 | byte_1ED7F5E00
    || v549 > 8
    || ((0x8Bu >> (v549 - 1)) & 1) == 0
    || !*(_BYTE *)*(&off_1E8140988 + (int)(v549 - 1)))
  {
    goto LABEL_448;
  }
  v527[0] = 0;
  v527[1] = 0;
  v528 = 0;
  v562 = &v564;
  v563 = 0x200000000;
  llvm::DataLayout::getIntPtrType(*v552, **((llvm::Type ***)v546 + 6));
  if ((_DWORD)v547)
  {
    v57 = v55;
    v58 = (unint64_t)v547 << 6;
    v59 = (uint64_t *)((char *)v546 + 48);
    while (1)
    {
      switch(v549)
      {
        case 1u:
          v60 = (llvm::Value **)*(v59 - 2);
          if (v60)
            goto LABEL_123;
          goto LABEL_119;
        case 2u:
          v60 = (llvm::Value **)*(v59 - 6);
          if (!v60)
            goto LABEL_119;
          goto LABEL_123;
        case 4u:
          v60 = llvm::ConstantInt::get(v57, *(v59 - 5), 0);
          if (v60)
            goto LABEL_123;
          goto LABEL_119;
        case 8u:
          v60 = (llvm::Value **)*(v59 - 1);
          if (!v60)
            goto LABEL_119;
LABEL_123:
          if (v551 && v551 != *v60)
          {
            v67 = 0;
            goto LABEL_137;
          }
          v551 = *v60;
          sub_1C509B72C(v527, v59)[1] = v60;
LABEL_126:
          v59 += 8;
          v58 -= 64;
          if (!v58)
            goto LABEL_132;
          break;
        default:
LABEL_119:
          v61 = *v59;
          v62 = v563;
          if (v563 >= (unint64_t)HIDWORD(v563))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v562, (uint64_t)&v564, v563 + 1, 8);
            v62 = v563;
          }
          *((_QWORD *)v562 + v62) = v61;
          LODWORD(v563) = v563 + 1;
          goto LABEL_126;
      }
    }
  }
LABEL_132:
  if ((_DWORD)v563)
  {
    v63 = (uint64_t *)v562;
    v64 = 8 * v563;
    do
    {
      *(_QWORD *)&v581 = 0;
      v65 = *v63++;
      *(_QWORD *)&v581 = v65;
      v66 = llvm::Constant::getNullValue(v551, v56);
      sub_1C509B72C(v527, &v581)[1] = v66;
      v64 -= 8;
    }
    while (v64);
  }
  v67 = 1;
LABEL_137:
  if (v562 != &v564)
    free(v562);
  if (!v67)
    goto LABEL_447;
  v563 = 0;
  v562 = 0;
  v564 = 0;
  v565 = v552;
  v566 = &v568;
  v567 = 0x2000000000;
  v573[0] = 1;
  for (j = 312; j != 824; j += 16)
    *(void **)((char *)&v562 + j) = (void *)-4096;
  v575 = 0;
  v576 = v580;
  v577 = v580;
  v578 = 32;
  v579 = 0;
  v560[0] = v561;
  v560[1] = (void *)0x2000000000;
  *(_QWORD *)&v581 = v582;
  *((_QWORD *)&v581 + 1) = 0x2000000000;
  v69 = (uint64_t *)llvm::UndefValue::get(v551, v56);
  v70 = v553;
  v71 = DWORD2(v581);
  if (DWORD2(v581) >= HIDWORD(v581))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v581, (uint64_t)v582, DWORD2(v581) + 1, 8);
    v71 = DWORD2(v581);
  }
  *(_QWORD *)(v581 + 8 * v71) = v70;
  v94 = __CFADD__(DWORD2(v581), 1);
  v72 = ++DWORD2(v581);
  if (!v94)
  {
    while (2)
    {
      while (2)
      {
        v536 = 0;
        v134 = *(_BYTE **)(v581 + 8 * v72 - 8);
        DWORD2(v581) = v72 - 1;
        v536 = v134;
        v593 = v134;
        v586 = 0;
        if (sub_1C4926528((uint64_t)v527, &v593, &v586) && v586 != (void *)(v527[0] + 16 * v528))
          goto LABEL_272;
        v135 = (uint64_t)v536;
        v136 = LODWORD(v560[1]);
        if (LODWORD(v560[1]) >= (unint64_t)HIDWORD(v560[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v560, (uint64_t)v561, LODWORD(v560[1]) + 1, 8);
          v136 = LODWORD(v560[1]);
        }
        *((_QWORD *)v560[0] + v136) = v135;
        ++LODWORD(v560[1]);
        v137 = (uint64_t)v536;
        if (!v536 || v536[16] != 85)
        {
          v146 = v6;
          v147 = *((_DWORD *)v536 + 5);
          v148 = v551;
          v586 = "sunk_phi";
          v589 = 259;
          v149 = operator new(0x48uLL);
          v149[1] = v148;
          v150 = (llvm::Value *)(v149 + 1);
          *v149 = 0;
          v149[2] = 0;
          v149[3] = 0x4000000000000053;
          *((_OWORD *)v149 + 2) = 0u;
          v151 = (char *)(v149 + 4);
          *((_OWORD *)v149 + 3) = 0u;
          *((_DWORD *)v149 + 16) = 0;
          v152 = *(_QWORD *)(v137 + 40);
          v149[6] = v152;
          *(_WORD *)(v152 + 18) &= ~0x8000u;
          if ((*((_BYTE *)v149 + 31) & 0x10) != 0)
          {
            v174 = *(_QWORD *)(v152 + 56);
            if (v174)
            {
              v175 = *(llvm::ValueSymbolTable **)(v174 + 104);
              if (v175)
                llvm::ValueSymbolTable::reinsertValue(v175, v150);
            }
          }
          v153 = *(_QWORD *)(v137 + 24);
          v149[4] = v153;
          v149[5] = v137 + 24;
          *(_QWORD *)(v153 + 8) = v151;
          *(_QWORD *)(v137 + 24) = v151;
          *((_DWORD *)v149 + 17) = v147 & 0x7FFFFFF;
          llvm::Value::setName((uint64_t ***)v150, (uint64_t)&v586);
          v154 = *((unsigned int *)v149 + 17);
          v155 = operator new(40 * v154);
          *v149 = v155;
          if ((_DWORD)v154)
          {
            v156 = &v155[4 * v154];
            do
            {
              *v155 = 0;
              v155[1] = 0;
              v155[2] = 0;
              v155[3] = v150;
              v155 += 4;
            }
            while (v155 != v156);
          }
          sub_1C509B72C(v527, &v536)[1] = v150;
          v157 = v567;
          v586 = 0;
          if ((sub_1C509BB64((uint64_t)v573, (uint64_t)v150, &v586) & 1) == 0)
          {
            if ((v573[0] & 1) != 0)
              v158 = 32;
            else
              v158 = v574;
            if (4 * (LODWORD(v573[0]) >> 1) + 4 >= 3 * v158)
            {
              v158 *= 2;
            }
            else if (v158 + ~(LODWORD(v573[0]) >> 1) - HIDWORD(v573[0]) > v158 >> 3)
            {
              goto LABEL_263;
            }
            sub_1C509BC08((uint64_t)v573, v158);
            v586 = 0;
            sub_1C509BB64((uint64_t)v573, (uint64_t)v150, &v586);
LABEL_263:
            v159 = v586;
            LODWORD(v573[0]) += 2;
            if (*(_QWORD *)v586 != -4096)
              --HIDWORD(v573[0]);
            *(_QWORD *)v586 = v150;
            v159[1] = v157;
            v160 = v567;
            if (v567 >= (unint64_t)HIDWORD(v567))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v566, (uint64_t)&v568, v567 + 1, 8);
              v160 = v567;
            }
            *((_QWORD *)v566 + v160) = v150;
            LODWORD(v567) = v567 + 1;
          }
          v161 = *(_DWORD *)(v137 + 20);
          if ((v161 & 0x40000000) != 0)
          {
            v163 = *(char **)(v137 - 8);
            v162 = v161 & 0x7FFFFFF;
          }
          else
          {
            v162 = v161 & 0x7FFFFFF;
            v163 = (char *)(v137 - 32 * v162);
          }
          v6 = v146;
          sub_1C4DA9878((unsigned int *)&v581, v581 + 8 * DWORD2(v581), v163, &v163[32 * v162]);
LABEL_272:
          v72 = DWORD2(v581);
          if (!DWORD2(v581))
            goto LABEL_146;
          continue;
        }
        break;
      }
      if ((v536[23] & 0x10) != 0)
      {
        v138 = ***(_QWORD ***)v536;
        v139 = *(_QWORD *)(v138 + 152);
        v140 = *(unsigned int *)(v138 + 168);
        if (!(_DWORD)v140)
          goto LABEL_274;
        LODWORD(v141) = (v140 - 1) & ((v536 >> 4) ^ (v536 >> 9));
        v142 = (_QWORD *)(v139 + 16 * v141);
        v143 = (_BYTE *)*v142;
        if ((_BYTE *)*v142 != v536)
        {
          v144 = 1;
          while (v143 != (_BYTE *)-4096)
          {
            v145 = v141 + v144++;
            v141 = v145 & (v140 - 1);
            v143 = *(_BYTE **)(v139 + 16 * v141);
            if (v143 == v536)
            {
              v142 = (_QWORD *)(v139 + 16 * v141);
              goto LABEL_275;
            }
          }
LABEL_274:
          v142 = (_QWORD *)(v139 + 16 * v140);
        }
LABEL_275:
        v164 = (_QWORD *)v142[1];
        v167 = *v164;
        v166 = (char *)(v164 + 2);
        v165 = v167;
      }
      else
      {
        v165 = 0;
        v166 = &byte_1C871356D;
      }
      v168 = *((_QWORD *)v536 - 12);
      v589 = 261;
      v586 = v166;
      *(_QWORD *)&v587 = v165;
      v169 = sub_1C4FC8748(v168, v69, (uint64_t)v69, (uint64_t)&v586, (uint64_t)v536, (uint64_t)v536);
      sub_1C509B72C(v527, &v536)[1] = v169;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v576, (uint64_t)v169);
      v170 = *(_QWORD *)(v137 - 64);
      v171 = DWORD2(v581);
      if (DWORD2(v581) >= (unint64_t)HIDWORD(v581))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v581, (uint64_t)v582, DWORD2(v581) + 1, 8);
        v171 = DWORD2(v581);
      }
      *(_QWORD *)(v581 + 8 * v171) = v170;
      v172 = (DWORD2(v581) + 1);
      DWORD2(v581) = v172;
      v173 = *(_QWORD *)(v137 - 32);
      if (v172 >= HIDWORD(v581))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v581, (uint64_t)v582, v172 + 1, 8);
        LODWORD(v172) = DWORD2(v581);
      }
      *(_QWORD *)(v581 + 8 * v172) = v173;
      v72 = DWORD2(v581) + 1;
      DWORD2(v581) = v72;
      if (!v72)
        break;
      continue;
    }
  }
LABEL_146:
  if ((_BYTE *)v581 != v582)
    free((void *)v581);
  v73 = v560[1];
  if (LODWORD(v560[1]))
  {
LABEL_149:
    v529 = 0;
    v74 = (_DWORD *)*((_QWORD *)v560[0] + v73 - 1);
    LODWORD(v560[1]) = v73 - 1;
    v529 = v74;
    v75 = sub_1C509B72C(v527, &v529)[1];
    if (v75 && *(_BYTE *)(v75 + 16) == 85)
    {
      v76 = v529;
      *(_QWORD *)&v581 = 0;
      *(_QWORD *)&v581 = *((_QWORD *)v529 - 8);
      v77 = sub_1C509B72C(v527, &v581);
      v78 = sub_1C509BAF4((uint64_t)&v562, v77[1]);
      v79 = (uint64_t *)(v75 - 64);
      if (*(_QWORD *)(v75 - 64))
      {
        **(_QWORD **)(v75 - 48) = *(_QWORD *)(v75 - 56);
        v80 = *(_QWORD *)(v75 - 56);
        if (v80)
          *(_QWORD *)(v80 + 16) = *(_QWORD *)(v75 - 48);
      }
      *v79 = v78;
      if (v78)
      {
        v83 = *(_QWORD *)(v78 + 8);
        v81 = (uint64_t **)(v78 + 8);
        v82 = v83;
        *(_QWORD *)(v75 - 56) = v83;
        if (v83)
          *(_QWORD *)(v82 + 16) = v75 - 56;
        *(_QWORD *)(v75 - 48) = v81;
        *v81 = v79;
      }
      v586 = 0;
      v586 = (void *)*((_QWORD *)v76 - 4);
      v84 = sub_1C509B72C(v527, &v586);
      v85 = sub_1C509BAF4((uint64_t)&v562, v84[1]);
      v86 = (uint64_t *)(v75 - 32);
      if (*(_QWORD *)(v75 - 32))
      {
        **(_QWORD **)(v75 - 16) = *(_QWORD *)(v75 - 24);
        v87 = *(_QWORD *)(v75 - 24);
        if (v87)
          *(_QWORD *)(v87 + 16) = *(_QWORD *)(v75 - 16);
      }
      *v86 = v85;
      if (v85)
      {
        v90 = *(_QWORD *)(v85 + 8);
        v88 = (uint64_t **)(v85 + 8);
        v89 = v90;
        *(_QWORD *)(v75 - 24) = v90;
        if (v90)
          *(_QWORD *)(v89 + 16) = v75 - 24;
        *(_QWORD *)(v75 - 16) = v88;
        *v88 = v86;
      }
    }
    else
    {
      v91 = *(_QWORD *)(*(_QWORD *)(v75 + 40) + 8);
      if (v91)
      {
        while (1)
        {
          v92 = *(_QWORD *)(v91 + 24);
          v93 = *(unsigned __int8 *)(v92 + 16);
          v94 = v92 && v93 >= 0x1C;
          v95 = !v94 || v93 - 29 > 0xA;
          if (!v95)
            break;
          v91 = *(_QWORD *)(v91 + 8);
          if (!v91)
            goto LABEL_175;
        }
LABEL_221:
        v123 = *(_QWORD *)(v92 + 40);
        *(_QWORD *)&v581 = 0;
        v124 = v529[5];
        v125 = v124 & 0x7FFFFFF;
        if ((v124 & 0x7FFFFFF) != 0)
        {
          v126 = 0;
          while (1)
          {
            v127 = &v529[-8 * v125];
            if ((v124 & 0x40000000) != 0)
              v127 = (_DWORD *)*((_QWORD *)v529 - 1);
            if (*(_QWORD *)&v127[8 * v529[15] + 2 * v126] == v123)
              break;
            if (v125 == ++v126)
              goto LABEL_227;
          }
        }
        else
        {
LABEL_227:
          LODWORD(v126) = -1;
        }
        if ((v124 & 0x40000000) != 0)
          v128 = (_DWORD *)*((_QWORD *)v529 - 1);
        else
          v128 = &v529[-8 * v125];
        *(_QWORD *)&v581 = *(_QWORD *)&v128[8 * v126];
        v129 = sub_1C509B72C(v527, &v581);
        v130 = sub_1C509BAF4((uint64_t)&v562, v129[1]);
        sub_1C477667C((llvm::PHINode *)v75, v130, v123);
        while (1)
        {
          v91 = *(_QWORD *)(v91 + 8);
          if (!v91)
            break;
          v92 = *(_QWORD *)(v91 + 24);
          v131 = *(unsigned __int8 *)(v92 + 16);
          if (v92)
            v132 = v131 >= 0x1C;
          else
            v132 = 0;
          if (v132 && v131 - 29 < 0xB)
            goto LABEL_221;
        }
      }
    }
LABEL_175:
    v586 = (char *)&v587 + 8;
    DWORD1(v587) = 32;
    *(_QWORD *)&v581 = &v582[16];
    *((_QWORD *)&v581 + 1) = &v582[16];
    *(_QWORD *)v582 = 32;
    *(_DWORD *)&v582[8] = 0;
    v96 = 1;
    *((_QWORD *)&v587 + 1) = v75;
    while (1)
    {
      v97 = *((_QWORD *)v586 + v96 - 1);
      LODWORD(v587) = v96 - 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v581, v97);
      if (!v100)
        goto LABEL_209;
      if (!v97 || *(unsigned __int8 *)(v97 + 16) < 0x1Cu)
        goto LABEL_209;
      v102 = *(_DWORD *)(v97 + 20);
      if ((v102 & 0x40000000) != 0)
      {
        v104 = *(uint64_t **)(v97 - 8);
        v103 = v102 & 0x7FFFFFF;
      }
      else
      {
        v103 = v102 & 0x7FFFFFF;
        v104 = (uint64_t *)(v97 - 32 * v103);
      }
      v105 = (uint64_t)v565;
      v593 = v595;
      v594 = 0x800000000;
      if (v103 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v593, (uint64_t)v595, v103, 8);
        v106 = v594;
        v108 = v593;
        v107 = v594;
      }
      else
      {
        v106 = 0;
        if (!v103)
        {
          v112 = v595;
          goto LABEL_191;
        }
        v107 = 0;
        v108 = v595;
      }
      v109 = 32 * v103;
      v110 = &v108[v107];
      do
      {
        v111 = *v104;
        v104 += 4;
        *v110++ = v111;
        v109 -= 32;
      }
      while (v109);
      v112 = v593;
LABEL_191:
      LODWORD(v594) = v106 + v103;
      v113 = llvm::SimplifyInstructionWithOperands((llvm *)v97, (uint64_t)v112, (v106 + v103), v105, v98, v99);
      if (v593 == v595)
      {
        if (v113)
          goto LABEL_193;
      }
      else
      {
        free(v593);
        if (v113)
        {
LABEL_193:
          v114 = *(_QWORD *)(v97 + 8);
          if (v114)
          {
            v115 = v587;
            do
            {
              v116 = *(_QWORD *)(v114 + 24);
              if (v115 >= DWORD1(v587))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v586, (uint64_t)&v587 + 8, v115 + 1, 8);
                v115 = v587;
              }
              *((_QWORD *)v586 + v115) = v116;
              v115 = v587 + 1;
              LODWORD(v587) = v587 + 1;
              v114 = *(_QWORD *)(v114 + 8);
            }
            while (v114);
          }
          v536 = (_BYTE *)v97;
          v537[0] = v113;
          sub_1C509BD8C((uint64_t)&v562, &v536, v537, (uint64_t)&v593);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v97, v113, (llvm::Value *)1);
          v117 = *(unsigned __int8 *)(v97 + 16);
          if (v117 == 83)
          {
            if (sub_1C509BE1C(v573, v97))
              sub_1C509BE6C((uint64_t)&v566, &v575);
            v117 = *(unsigned __int8 *)(v97 + 16);
          }
          if (v117 == 85)
          {
            v118 = sub_1C477672C((uint64_t)&v576, v97);
            v119 = v577 == v576 ? (uint64_t *)((char *)&v578 + 4) : &v578;
            if (v118 != (_QWORD *)((char *)v577 + 8 * *(unsigned int *)v119))
            {
              *v118 = -2;
              ++v579;
            }
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v97 + 40) + 40, (uint64_t ***)v97);
          v120 = *(_QWORD *)(v97 + 24);
          v121 = *(_QWORD **)(v97 + 32);
          *v121 = v120;
          *(_QWORD *)(v120 + 8) = v121;
          *(_QWORD *)(v97 + 24) = 0;
          *(_QWORD *)(v97 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v97);
        }
      }
LABEL_209:
      v96 = v587;
      if (!(_DWORD)v587)
      {
        v122 = sub_1C509BAF4((uint64_t)&v562, v75);
        if (*((_QWORD *)&v581 + 1) != (_QWORD)v581)
          free(*((void **)&v581 + 1));
        if (v586 != (char *)&v587 + 8)
          free(v586);
        sub_1C509B72C(v527, &v529)[1] = v122;
        v73 = v560[1];
        if (!LODWORD(v560[1]))
          break;
        goto LABEL_149;
      }
    }
  }
  if (!byte_1ED7F5F80 && HIDWORD(v578) != v579)
  {
LABEL_436:
    sub_1C509B78C((uint64_t)&v562, v551);
    v241 = 0;
    goto LABEL_437;
  }
  v507 = byte_1ED7F5EC0;
  *(_QWORD *)&v581 = 1;
  memset_pattern16((char *)&v581 + 8, &unk_1C85F2160, 0x80uLL);
  v583 = v585;
  v584 = 0x800000000;
  v529 = v533;
  v530 = v533;
  v531 = 8;
  v532 = 0;
  v506 = 1;
  if (LODWORD(v573[0]) < 2)
    goto LABEL_428;
  do
  {
    v176 = v575;
    if (!v575)
    {
      sub_1C509BE6C((uint64_t)&v566, &v575);
      v176 = v575;
    }
    v177 = (_QWORD *)*((_QWORD *)v566 + v176);
    if (v530 == v529)
      goto LABEL_295;
    if (v531 < 0x21 || 4 * (HIDWORD(v531) - v532) >= v531)
    {
      memset(v530, 255, 8 * v531);
LABEL_295:
      v532 = 0;
      HIDWORD(v531) = 0;
      goto LABEL_296;
    }
    free(v530);
    v236 = 1 << (33 - __clz(HIDWORD(v531) - v532 - 1));
    v95 = (HIDWORD(v531) - v532) > 0x10;
    v532 = 0;
    if (v95)
      v237 = v236;
    else
      v237 = 32;
    v531 = v237;
    v238 = malloc_type_malloc(8 * v237, 0x4065EBACuLL);
    if (!v238)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v530 = v238;
    memset(v238, 255, 8 * v531);
LABEL_296:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v529, (uint64_t)v177);
    if (*(_QWORD *)(v177[5] + 40) != v177[5] + 40)
    {
      v178 = *(_QWORD *)(v177[5] + 48);
LABEL_298:
      v179 = v178 - 24;
      if (v178)
        v180 = v178 - 24;
      else
        v180 = 0;
      if (!v178 || *(_BYTE *)(v180 + 16) != 83)
        goto LABEL_385;
      if ((sub_1C509BF40((uint64_t)v573, v178 - 24, &v586) & 1) != 0)
        goto LABEL_384;
      v593 = v595;
      v594 = 0x800000000;
      v586 = v177;
      *(_QWORD *)&v587 = v179;
      sub_1C509BFEC((uint64_t)&v581, (uint64_t *)&v586);
      v536 = v539;
      v537[0] = v539;
      v537[1] = (void *)8;
      v538 = 0;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v536, (uint64_t)v177);
      v181 = v594;
      if (v594 >= (unint64_t)HIDWORD(v594))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v593, (uint64_t)v595, v594 + 1, 16);
        v181 = v594;
      }
      v182 = (char *)v593 + 16 * v181;
      *v182 = v177;
      v182[1] = v179;
      v586 = (char *)&v587 + 8;
      *(_QWORD *)&v587 = 0x800000000;
      v591 = 0;
      v592 = 0;
      v590 = &v591;
      v94 = __CFADD__((_DWORD)v594, 1);
      v183 = v594 + 1;
      LODWORD(v594) = v594 + 1;
      if (v94)
      {
        v184 = 1;
        goto LABEL_373;
      }
      while (1)
      {
        v185 = (char *)v593 + 16 * v183;
        v187 = *((_QWORD *)v185 - 2);
        v186 = *((_QWORD *)v185 - 1);
        LODWORD(v594) = v183 - 1;
        *(_QWORD *)&v535 = v187;
        *((_QWORD *)&v535 + 1) = v186;
        if (v592)
        {
          if ((sub_1C61DB2E8((uint64_t)&v590, v187, v186, &v535) & 1) == 0)
            goto LABEL_370;
        }
        else
        {
          v188 = (char *)v586;
          v189 = v587;
          if (!(_DWORD)v587)
            goto LABEL_914;
          v190 = 16 * v587;
          v191 = (char *)v586 + 8;
          while (*(v191 - 1) != v187 || *v191 != v186)
          {
            v191 += 2;
            v190 -= 16;
            if (!v190)
              goto LABEL_319;
          }
          if (v190)
            goto LABEL_370;
LABEL_319:
          if (v587 >= 8)
          {
            do
            {
              sub_1C61DB2E8((uint64_t)&v590, *((_QWORD *)v586 + 2 * v189 - 2), *((_QWORD *)v586 + 2 * v189 - 1), (_OWORD *)v586 + v189 - 1);
              LODWORD(v189) = v587 - 1;
              LODWORD(v587) = v587 - 1;
            }
            while ((_DWORD)v587);
            sub_1C61DB2E8((uint64_t)&v590, v187, v186, &v535);
          }
          else
          {
LABEL_914:
            if (v587 >= DWORD1(v587))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v586, (uint64_t)&v587 + 8, v587 + 1, 16);
              v188 = (char *)v586;
              v189 = v587;
            }
            v193 = (unint64_t *)&v188[16 * v189];
            *v193 = v187;
            v193[1] = v186;
            LODWORD(v587) = v587 + 1;
          }
        }
        v194 = *(_DWORD *)(v187 + 20);
        if ((v194 & 0x40000000) != 0)
          break;
        v195 = v194 & 0x7FFFFFF;
        v196 = v187 - 32 * v195;
        if (v195)
          goto LABEL_329;
LABEL_370:
        v183 = v594;
        if (!(_DWORD)v594)
        {
          v184 = 1;
          goto LABEL_373;
        }
      }
      v196 = *(_QWORD *)(v187 - 8);
      v195 = v194 & 0x7FFFFFF;
      if (!v195)
        goto LABEL_370;
LABEL_329:
      v197 = (uint64_t *)(v196 + 32 * *(unsigned int *)(v187 + 60));
      v198 = &v197[v195];
      while (1)
      {
        v199 = *v197;
        v200 = *(_DWORD *)(v187 + 20);
        v201 = v200 & 0x7FFFFFF;
        if ((v200 & 0x7FFFFFF) != 0)
        {
          v202 = 0;
          while (1)
          {
            v203 = v187 - 32 * v201;
            if ((v200 & 0x40000000) != 0)
              v203 = *(_QWORD *)(v187 - 8);
            if (*(_QWORD *)(v203 + 32 * *(unsigned int *)(v187 + 60) + 8 * v202) == v199)
              break;
            if (v201 == ++v202)
              goto LABEL_336;
          }
        }
        else
        {
LABEL_336:
          LODWORD(v202) = -1;
        }
        if ((v200 & 0x40000000) != 0)
          v204 = *(_QWORD *)(v187 - 8);
        else
          v204 = v187 - 32 * v201;
        v205 = *(_DWORD *)(v186 + 20);
        v206 = v205 & 0x7FFFFFF;
        if ((v205 & 0x7FFFFFF) != 0)
        {
          v207 = 0;
          while (1)
          {
            v208 = v186 - 32 * v206;
            if ((v205 & 0x40000000) != 0)
              v208 = *(_QWORD *)(v186 - 8);
            if (*(_QWORD *)(v208 + 32 * *(unsigned int *)(v186 + 60) + 8 * v207) == v199)
              break;
            if (v206 == ++v207)
              goto LABEL_345;
          }
        }
        else
        {
LABEL_345:
          LODWORD(v207) = -1;
        }
        if ((v205 & 0x40000000) != 0)
          v209 = *(_QWORD *)(v186 - 8);
        else
          v209 = v186 - 32 * v206;
        v210 = *(_QWORD *)(v204 + 32 * v202);
        v211 = *(_QWORD *)(v209 + 32 * v207);
        if (v210 != v211)
        {
          if (*(_BYTE *)(v210 + 16) == 83)
            v212 = v210;
          else
            v212 = 0;
          if (*(_BYTE *)(v211 + 16) == 83)
            v213 = v211;
          else
            v213 = 0;
          if (!v212
            || !v213
            || !sub_1C509BF40((uint64_t)v573, v212, v534)
            || *(_QWORD *)(v212 + 40) != *(_QWORD *)(v213 + 40))
          {
            v184 = 0;
LABEL_373:
            sub_1C4ABB360(v591);
            if (v586 != (char *)&v587 + 8)
              free(v586);
            if (v537[0] != v536)
              free(v537[0]);
            if (v593 != v595)
              free(v593);
            v217 = (char *)v583;
            if ((v184 & 1) != 0)
            {
              v229 = (char *)v583 + 16 * v584;
              if ((_DWORD)v584)
              {
                do
                {
                  v230 = *(llvm::Value **)v217;
                  v231 = (llvm::Value *)*((_QWORD *)v217 + 1);
                  while (1)
                  {
                    v232 = sub_1C509BAF4((uint64_t)&v562, (uint64_t)v230);
                    if ((llvm::Value *)v232 == v230)
                      break;
                    v230 = v231;
                    if (*(_BYTE *)(v232 + 16) == 83)
                      v231 = (llvm::Value *)v232;
                    else
                      v231 = 0;
                  }
                  v593 = v230;
                  v594 = (uint64_t)v231;
                  sub_1C509BD8C((uint64_t)&v562, &v593, &v594, (uint64_t)&v586);
                  llvm::Value::doRAUW(v230, v231, (llvm::Value *)1);
                  if (sub_1C509BE1C(v573, (uint64_t)v230))
                    sub_1C509BE6C((uint64_t)&v566, &v575);
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v230 + 5) + 40, (uint64_t ***)v230);
                  v233 = *((_QWORD *)v230 + 3);
                  v234 = (_QWORD *)*((_QWORD *)v230 + 4);
                  *v234 = v233;
                  *(_QWORD *)(v233 + 8) = v234;
                  *((_QWORD *)v230 + 3) = 0;
                  *((_QWORD *)v230 + 4) = 0;
                  llvm::Value::deleteValue(v230);
                  v217 += 16;
                }
                while (v217 != v229);
              }
              sub_1C509C4C0((uint64_t)&v581);
              LODWORD(v584) = 0;
              goto LABEL_412;
            }
            if ((_DWORD)v584)
            {
              v218 = 16 * v584;
              do
              {
                v219 = *(_QWORD *)v217;
                v217 += 16;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v529, v219);
                v218 -= 16;
              }
              while (v218);
            }
            sub_1C509C4C0((uint64_t)&v581);
            LODWORD(v584) = 0;
LABEL_384:
            v178 = *(_QWORD *)(v179 + 32);
            goto LABEL_298;
          }
          if ((sub_1C509C11C((uint64_t)&v581, v212, v213, v534) & 1) == 0)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v536, v212);
            if (v214)
            {
              v534[0] = v212;
              v534[1] = v213;
              sub_1C509BFEC((uint64_t)&v581, v534);
            }
            v215 = v594;
            if (v594 >= (unint64_t)HIDWORD(v594))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v593, (uint64_t)v595, v594 + 1, 16);
              v215 = v594;
            }
            v216 = (uint64_t *)((char *)v593 + 16 * v215);
            *v216 = v212;
            v216[1] = v213;
            LODWORD(v594) = v594 + 1;
          }
        }
        if (++v197 == v198)
          goto LABEL_370;
      }
    }
LABEL_385:
    v220 = v530;
    if (!v507)
    {
      v506 = 0;
      goto LABEL_426;
    }
    v221 = (uint64_t *)((char *)&v531 + 4);
    if (v530 != v529)
      v221 = &v531;
    v222 = *(unsigned int *)v221;
    if ((_DWORD)v222)
    {
      v223 = 8 * v222;
      v224 = (uint64_t *)v530;
      while ((unint64_t)*v224 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v224;
        v223 -= 8;
        if (!v223)
          goto LABEL_412;
      }
    }
    else
    {
      v224 = (uint64_t *)v530;
    }
    v225 = (unint64_t *)((char *)v530 + 8 * v222);
    if (v224 != (uint64_t *)v225)
    {
      v226 = *v224;
LABEL_396:
      if (sub_1C509BE1C(v573, v226))
        sub_1C509BE6C((uint64_t)&v566, &v575);
      v227 = (unint64_t *)(v224 + 1);
      while (v227 != v225)
      {
        v228 = *v227++;
        v226 = v228;
        if (v228 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v224 = (uint64_t *)(v227 - 1);
          goto LABEL_396;
        }
      }
    }
LABEL_412:
    ;
  }
  while (LODWORD(v573[0]) > 1);
  v506 = 1;
  v220 = v530;
LABEL_426:
  if (v220 != v529)
    free(v220);
LABEL_428:
  if (v583 != v585)
    free(v583);
  if ((v581 & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)&v581 + 1), 8);
  if ((v506 & 1) == 0)
    goto LABEL_436;
  v586 = v553;
  *(_QWORD *)&v581 = 0;
  v239 = sub_1C4926528((uint64_t)v527, &v586, &v581);
  v240 = v581;
  if (!v239)
    v240 = v527[0] + 16 * v528;
  v241 = sub_1C509BAF4((uint64_t)&v562, *(_QWORD *)(v240 + 8));
LABEL_437:
  if (v560[0] != v561)
    free(v560[0]);
  if (v577 != v576)
    free(v577);
  if ((v573[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v573[1], 8);
  if (v566 != &v568)
    free(v566);
  MEMORY[0x1CAA32FB4](v562, 8);
  if (v241)
    __asm { BR              X11 }
LABEL_447:
  MEMORY[0x1CAA32FB4](v527[0], 8);
LABEL_448:
  sub_1C5095E90((uint64_t)&v543, 0);
  v242 = 0;
LABEL_533:
  v291 = v543;
  if ((_DWORD)v544)
  {
    v292 = 8 * v544;
    v293 = (char *)v543 - 8;
    do
    {
      v294 = *(_QWORD *)&v293[v292];
      *(_QWORD *)&v293[v292] = 0;
      if (v294)
        (*(void (**)(uint64_t))(*(_QWORD *)v294 + 8))(v294);
      v292 -= 8;
    }
    while (v292);
    v291 = v543;
  }
  if (v291 != v545)
    free(v291);
  if (v546 != v548)
    free(v546);
  if (v554 != v556)
    free(v554);
  if (v523 != v522)
    free(v523);
  if (v557 != v559)
    free(v557);
  return v242;
}

