uint64_t sub_1C5FA0BF0(uint64_t ***this, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  llvm::Instruction *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 *v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  const llvm::DILocation **v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  const llvm::DILocation **v41;
  int v42;
  unint64_t v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  BOOL v64;
  llvm *UnderlyingObject;
  uint64_t v66;
  int v67;
  int hasFnAttrOnCalledFunction;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  BOOL v75;
  int v76;
  char v78;
  __int16 v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  int v98;
  int v99;
  BOOL v100;
  int v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  _QWORD *v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  int v120;
  uint64_t v121;
  _QWORD *v122;
  __int128 *v123;
  uint64_t **v124;
  BOOL v125;
  _QWORD *v126;
  unsigned int v127;
  __int128 *v128;
  int v129;
  uint64_t v130;
  __int128 *v131;
  uint64_t v132;
  int v133;
  int v134;
  int64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  char v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  llvm::Constant *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  unint64_t v156;
  uint64_t *v157;
  int v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  unint64_t v170;
  uint64_t *v171;
  int v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  int v179;
  int64_t v180;
  int v181;
  _BOOL4 v182;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  void *v187;
  BOOL v188;
  unsigned __int8 *v190;
  llvm::Value **v191;
  uint64_t *v192;
  uint64_t v193;
  llvm::Value *Select;
  uint64_t v195;
  const llvm::DILocation *v196;
  const llvm::DILocation *v197;
  const llvm::DILocation *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  unsigned __int8 **v202;
  unsigned __int8 *v203;
  uint64_t *v204;
  uint64_t *v205;
  uint64_t *v206;
  llvm::ValueSymbolTable *v207;
  uint64_t *v208;
  llvm::ValueSymbolTable *v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  llvm::Value *v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  unint64_t v239;
  unint64_t v240;
  llvm *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  llvm **v246;
  llvm *v247;
  int v248;
  int v249;
  uint64_t v250;
  size_t *v251;
  int v252;
  size_t v253;
  unsigned __int8 *v254;
  int v255;
  uint64_t v256;
  int v257;
  int v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  int64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  uint64_t *__s1;
  unsigned __int8 *__s1a;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  llvm *v277;
  llvm *v278;
  unsigned int v279;
  unsigned int v280;
  const llvm::DILocation **__n;
  size_t __na;
  unsigned __int8 *v283;
  void *v284;
  uint64_t v285;
  _BYTE v286[32];
  uint64_t v287;
  _QWORD *v288;
  unsigned int v289;
  __int128 v290;
  _BYTE v291[24];
  _BYTE *v292;
  __int128 v293;
  _QWORD v294[3];
  _QWORD *v295;
  unint64_t v296[2];
  _BYTE v297[16];
  __int16 v298;
  _BYTE *v299;
  __int128 v300;
  uint64_t v301;
  uint64_t v302;
  void *v303[2];
  _QWORD v304[3];
  _QWORD *v305;
  __int128 v306;
  _QWORD v307[3];
  _QWORD *v308;
  __int128 v309;
  _QWORD v310[3];
  _QWORD *v311;
  __int128 v312;
  _QWORD v313[3];
  _QWORD *v314;
  __int128 v315;
  uint64_t v316;
  uint64_t v317;
  __int128 v318;
  _BYTE v319[24];
  _BYTE *v320;
  uint64_t v321;

  v321 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t)*(this - 12);
  if (*(_BYTE *)(v3 + 16) == 82)
    return 0;
  v5 = a2;
  v6 = (llvm::Instruction *)this;
  v7 = this[5];
  v8 = (uint64_t *)a2[5];
  __s1 = a2 + 5;
  if (v8 == a2 + 5)
  {
    v9 = 0;
  }
  else
  {
    if (v8)
      v9 = (uint64_t)(v8 - 3);
    else
      v9 = 0;
    if (*(unsigned __int8 *)(v9 + 16) - 29 >= 0xB)
      v9 = 0;
  }
  v10 = *(unsigned __int8 *)(v9 + 16);
  if (v10 != 30)
    __asm { BR              X11 }
  v265 = *(_QWORD *)(v9 - 32);
  v11 = dword_1ED8284B8;
  v12 = (uint64_t *)*(this - 4);
  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    goto LABEL_27;
  v13 = ***this;
  v303[0] = this;
  v14 = *(_DWORD *)(v13 + 2496);
  if (!v14)
    goto LABEL_397;
  v15 = *(_QWORD *)(v13 + 2480);
  v16 = v14 - 1;
  v17 = v16 & ((this >> 4) ^ (this >> 9));
  v18 = (_QWORD *)(v15 + 40 * v17);
  v19 = *v18;
  if ((llvm::Instruction *)*v18 != v6)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      if (v19 == -4096)
      {
        if (v20)
          v186 = v20;
        else
          v186 = v18;
        goto LABEL_395;
      }
      if (v20)
        v22 = 0;
      else
        v22 = v19 == -8192;
      if (v22)
        v20 = v18;
      v23 = v17 + v21++;
      v17 = v23 & v16;
      v18 = (_QWORD *)(v15 + 40 * v17);
      v19 = *v18;
    }
    while ((llvm::Instruction *)*v18 != v6);
  }
LABEL_23:
  v24 = *((unsigned int *)v18 + 4);
  if (!(_DWORD)v24)
    goto LABEL_27;
  v25 = (_QWORD *)(v18[1] + 8);
  v26 = 16 * v24;
  while (*((_DWORD *)v25 - 2) != 15)
  {
    v25 += 2;
    v26 -= 16;
    if (!v26)
      goto LABEL_27;
  }
  if (!*v25)
  {
LABEL_27:
    v303[0] = 0;
    v296[0] = 0;
    if (llvm::Instruction::extractProfMetadata(v6, (unint64_t *)v303, v296)
      && (char *)v303[0] + v296[0])
    {
      if (v12 == v5)
        v27 = v296[0];
      else
        v27 = (unint64_t)v303[0];
      v28 = (unint64_t)v303[0] + v296[0];
      v29 = ((unint64_t)v303[0] + v296[0]) >> 32;
      if (v29)
      {
        LOBYTE(v29) = 0;
        v239 = (unint64_t)v303[0] + v296[0];
        do
        {
          v28 = v239 >> 1;
          LOBYTE(v29) = v29 + 1;
          v240 = v239 >> 33;
          v239 >>= 1;
        }
        while (v240);
      }
      v30 = v27 >> v29;
      if (v28 != 0x80000000)
        v30 = (((unint64_t)(v27 >> v29) << 31) | (v28 >> 1)) / v28;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3) <= v30)
        return 0;
    }
  }
  v287 = 1;
  v31 = &v290;
  for (i = 8; i != 72; i += 16)
    *(uint64_t *)((char *)&v287 + i) = -4096;
  v263 = (uint64_t)v6;
  v264 = v11;
  v261 = v12;
  v262 = v3;
  v284 = v286;
  v285 = 0x400000000;
  v34 = v5[5];
  v33 = v5[6];
  v266 = v5;
  if (v33 != v34)
  {
    v11 = 0;
    v35 = 0;
    v36 = 0;
    v37 = &v301;
    v38 = &v316;
    v267 = v5[5];
    while (1)
    {
      v5 = v38;
      if (v33)
        v39 = v33 - 24;
      else
        v39 = 0;
      if (sub_1C4D99D08(v39) || sub_1C509DDB0(v39))
      {
        v40 = v285;
        if (v285 >= (unint64_t)HIDWORD(v285))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v284, (uint64_t)v286, v285 + 1, 8);
          v40 = v285;
        }
        *((_QWORD *)v284 + v40) = v39;
        LODWORD(v285) = v285 + 1;
LABEL_50:
        v38 = v5;
        goto LABEL_51;
      }
      if (v36)
        goto LABEL_407;
      if ((llvm::isSafeToSpeculativelyExecute(v39, 0, 0, 0) & 1) == 0)
      {
        if (!byte_1ED8287B8)
          goto LABEL_407;
        v4 = 0;
        if (!v33 || *(_BYTE *)(v39 + 16) != 61)
          goto LABEL_408;
        if ((*(_WORD *)(v39 + 18) & 0x381) != 0)
          goto LABEL_407;
        v274 = **(_QWORD **)(v39 - 64);
        v277 = *(llvm **)(v39 - 32);
        llvm::BasicBlock::instructionsWithoutDebug((llvm::BasicBlock *)v7, 1, (uint64_t)v296);
        sub_1C5FA49B8((uint64_t)v303, (uint64_t *)v296);
        v52 = (_QWORD *)v302;
        if ((uint64_t *)v302 == v37)
        {
          v52 = v37;
          v53 = 4;
          v12 = (uint64_t *)v319;
          goto LABEL_70;
        }
        v12 = (uint64_t *)v319;
        if (v302)
        {
          v53 = 5;
LABEL_70:
          (*(void (**)(void))(*v52 + 8 * v53))();
        }
        v54 = v299;
        if (v299 == v297)
        {
          v54 = v297;
          v55 = 4;
          goto LABEL_73;
        }
        if (v299)
        {
          v55 = 5;
LABEL_73:
          (*(void (**)(void))(*v54 + 8 * v55))();
        }
        *(_OWORD *)v296 = *(_OWORD *)v303;
        if (v305)
        {
          if (v305 == v304)
          {
            v299 = v297;
            (*(void (**)(_QWORD *))(v304[0] + 24))(v304);
          }
          else
          {
            v299 = (_BYTE *)(*(uint64_t (**)(void))(*v305 + 16))();
          }
        }
        else
        {
          v299 = 0;
        }
        v300 = v306;
        if (v308)
        {
          if (v308 == v307)
          {
            v302 = (uint64_t)v37;
            (*(void (**)(_QWORD *, uint64_t *))(v307[0] + 24))(v307, v37);
          }
          else
          {
            v302 = (*(uint64_t (**)(void))(*v308 + 16))();
          }
        }
        else
        {
          v302 = 0;
        }
        v290 = v309;
        if (v311)
        {
          if (v311 == v310)
          {
            v292 = v291;
            (*(void (**)(_QWORD *))(v310[0] + 24))(v310);
          }
          else
          {
            v292 = (_BYTE *)(*(uint64_t (**)(void))(*v311 + 16))();
          }
        }
        else
        {
          v292 = 0;
        }
        v293 = v312;
        if (v314)
        {
          if (v314 == v313)
          {
            v295 = v294;
            (*(void (**)(_QWORD *, _QWORD *))(v313[0] + 24))(v313, v294);
          }
          else
          {
            v295 = (_QWORD *)(*(uint64_t (**)(void))(*v314 + 16))();
          }
        }
        else
        {
          v295 = 0;
        }
        LODWORD(v3) = 9;
LABEL_87:
        v318 = v300;
        if (v302)
        {
          if ((uint64_t *)v302 == v37)
          {
            v320 = v319;
            (*(void (**)(uint64_t *, _BYTE *))(v301 + 24))(v37, v319);
          }
          else
          {
            v320 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v302 + 16))();
          }
        }
        else
        {
          v320 = 0;
        }
        v315 = v293;
        if (v295)
        {
          v56 = v37;
          if (v295 == v294)
          {
            v58 = v5;
            v317 = (uint64_t)v5;
            (*(void (**)(_QWORD *, uint64_t *))(v294[0] + 24))(v294, v5);
            v57 = v317;
          }
          else
          {
            v57 = (*(uint64_t (**)(void))(*v295 + 16))();
            v317 = v57;
            v58 = v5;
          }
          v6 = (llvm::Instruction *)v318;
          v11 = v315;
          if ((uint64_t *)v57 == v58)
          {
            (*(void (**)(uint64_t *))(v316 + 32))(v58);
          }
          else if (v57)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
          }
          v37 = v56;
          v12 = (uint64_t *)v319;
        }
        else
        {
          v11 = v293;
          v6 = (llvm::Instruction *)v318;
        }
        v59 = v320;
        if (v320 == v319)
        {
          v59 = v319;
          v60 = 4;
LABEL_106:
          (*(void (**)(void))(*v59 + 8 * v60))();
        }
        else if (v320)
        {
          v60 = 5;
          goto LABEL_106;
        }
        if (v6 == (llvm::Instruction *)v11 || (v61 = sub_1C5FA503C((uint64_t)v296), !(_DWORD)v3))
        {
          v78 = 1;
          goto LABEL_153;
        }
        v11 = v61;
        v62 = *(unsigned __int8 *)(v61 + 16);
        v63 = (v62 - 33);
        if (v63 > 0x37)
          goto LABEL_113;
        if (((1 << (v62 - 33)) & 0x8000000000041) != 0)
        {
          v66 = *(_QWORD *)(v61 + 64);
          if (!v66 || (*(_BYTE *)(v66 + 17) & 0x30) == 0)
          {
            v67 = *(_DWORD *)(v61 + 20);
            if (v67 < 0)
            {
              v69 = v61 - 32 * (v67 & 0x7FFFFFF);
              v72 = *(_QWORD *)(v69 - 8);
              v70 = v69 - 8;
              v71 = v72;
              if (v72)
              {
                v73 = -v71;
                while (1)
                {
                  v74 = *(_DWORD *)(*(_QWORD *)(v70 + v73) + 8);
                  v75 = v74 > 7;
                  v76 = (1 << v74) & 0x83;
                  if (v75 || v76 == 0)
                    break;
                  v73 += 16;
                  v12 = (uint64_t *)v319;
                  if (!v73)
                    goto LABEL_132;
                }
                v12 = (uint64_t *)v319;
                goto LABEL_136;
              }
            }
LABEL_132:
            if (llvm::CallBase::hasFnAttrOnCalledFunction(v61, 45))
            {
              v62 = *(unsigned __int8 *)(v11 + 16);
            }
            else
            {
              hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(v11, 44);
              v62 = *(unsigned __int8 *)(v11 + 16);
              if (hasFnAttrOnCalledFunction != 1)
                goto LABEL_136;
            }
          }
        }
        else if (v63 == 27)
        {
          v62 = 60;
          if ((*(_WORD *)(v61 + 18) & 0x301) != 0)
            goto LABEL_136;
        }
        else
        {
          if (((1 << (v62 - 33)) & 0x808001D0000010) == 0)
            goto LABEL_113;
LABEL_136:
          if (v62 != 61)
          {
LABEL_152:
            v78 = 0;
            v11 = 0;
            goto LABEL_153;
          }
        }
LABEL_113:
        if (v62 == 60)
        {
          v64 = *(llvm **)(v11 - 32) == v277 && *(_QWORD *)v11 == v274;
          if (!v64
            || (*(_WORD *)(v11 + 18) & 0x381) != 0
            || (UnderlyingObject = llvm::getUnderlyingObject(v277, (const llvm::Value *)6)) == 0
            || *((_BYTE *)UnderlyingObject + 16) != 59
            || llvm::PointerMayBeCaptured(UnderlyingObject, 0, 1, 0))
          {
LABEL_125:
            v3 = (v3 - 1);
            while (1)
            {
              *(_QWORD *)&v300 = *(_QWORD *)v300;
              if (!v302)
                break;
              if (((*(uint64_t (**)(void))(*(_QWORD *)v302 + 48))() & 1) != 0)
                goto LABEL_87;
            }
            sub_1C485C2F0();
LABEL_397:
            v186 = 0;
LABEL_395:
            v18 = sub_1C541AB24(v13 + 2480, (uint64_t)v303, (uint64_t *)v303, v186);
            v187 = v303[0];
            v18[3] = 0;
            v18[4] = 0;
            *v18 = v187;
            v18[1] = v18 + 3;
            v18[2] = 0x100000000;
            goto LABEL_23;
          }
          v78 = 0;
        }
        else
        {
          if (v62 != 61)
            goto LABEL_125;
          if (*(llvm **)(v11 - 32) != v277)
            goto LABEL_152;
          if (**(_QWORD **)(v11 - 64) != v274)
            goto LABEL_152;
          v79 = *(_WORD *)(v11 + 18);
          if ((v79 & 0x380) != 0)
            goto LABEL_152;
          v78 = 0;
          if ((v79 & 1) != 0)
            v11 = 0;
          else
            v11 = *(_QWORD *)(v11 - 64);
        }
LABEL_153:
        v80 = v295;
        if (v295 == v294)
        {
          v80 = v294;
          v81 = 4;
          goto LABEL_155;
        }
        if (v295)
        {
          v81 = 5;
LABEL_155:
          (*(void (**)(void))(*v80 + 8 * v81))();
        }
        v82 = v292;
        if (v292 == v291)
        {
          v82 = v291;
          v83 = 4;
          goto LABEL_158;
        }
        if (v292)
        {
          v83 = 5;
LABEL_158:
          (*(void (**)(void))(*v82 + 8 * v83))();
        }
        v84 = (_QWORD *)v302;
        if ((uint64_t *)v302 == v37)
        {
          v84 = v37;
          v85 = 4;
          goto LABEL_161;
        }
        if (v302)
        {
          v85 = 5;
LABEL_161:
          (*(void (**)(void))(*v84 + 8 * v85))();
        }
        v86 = v299;
        if (v299 == v297)
        {
          v86 = v297;
          v87 = 4;
          goto LABEL_164;
        }
        if (v299)
        {
          v87 = 5;
LABEL_164:
          (*(void (**)(void))(*v86 + 8 * v87))();
        }
        v88 = v314;
        if (v314 == v313)
        {
          v88 = v313;
          v89 = 4;
          goto LABEL_167;
        }
        if (v314)
        {
          v89 = 5;
LABEL_167:
          (*(void (**)(void))(*v88 + 8 * v89))();
        }
        v90 = v311;
        if (v311 == v310)
        {
          v90 = v310;
          v91 = 4;
          goto LABEL_170;
        }
        if (v311)
        {
          v91 = 5;
LABEL_170:
          (*(void (**)(void))(*v90 + 8 * v91))();
        }
        v92 = v308;
        if (v308 == v307)
        {
          v92 = v307;
          v93 = 4;
          goto LABEL_173;
        }
        if (v308)
        {
          v93 = 5;
LABEL_173:
          (*(void (**)(void))(*v92 + 8 * v93))();
        }
        v94 = v305;
        if (v305 == v304)
        {
          v94 = v304;
          v95 = 4;
          goto LABEL_176;
        }
        if (v305)
        {
          v95 = 5;
LABEL_176:
          (*(void (**)(void))(*v94 + 8 * v95))();
        }
        if (v11)
          v96 = v78;
        else
          v96 = 1;
        v35 = (const llvm::DILocation **)v39;
        if ((v96 & 1) != 0)
          goto LABEL_407;
        goto LABEL_189;
      }
      v41 = v35;
      v35 = (const llvm::DILocation **)v39;
      if (v11)
        goto LABEL_189;
      v42 = *(_DWORD *)(v39 + 20);
      if ((v42 & 0x40000000) != 0)
      {
        v44 = *(uint64_t **)(v39 - 8);
        v43 = v42 & 0x7FFFFFF;
      }
      else
      {
        v43 = v42 & 0x7FFFFFF;
        v44 = (uint64_t *)(v39 - 32 * v43);
      }
      v35 = v41;
      v303[0] = v304;
      v303[1] = (void *)0x400000000;
      if (v43 >= 5)
        break;
      v45 = 0;
      if (v43)
      {
        v46 = 0;
        v47 = v304;
        goto LABEL_61;
      }
      v51 = v304;
LABEL_183:
      LODWORD(v303[1]) = v45 + v43;
      v97 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)*a3 + 72))(*a3, v39, v51);
      v99 = v98;
      if (v303[0] != v304)
        free(v303[0]);
      v100 = v97 > dword_1ED8284B8;
      if (v99)
        v100 = v99 > 0;
      if (v100)
        goto LABEL_407;
      v11 = 0;
LABEL_189:
      v101 = *(_DWORD *)(v39 + 20);
      if ((v101 & 0x40000000) != 0)
      {
        v103 = *(uint64_t **)(v39 - 8);
        v102 = v101 & 0x7FFFFFF;
      }
      else
      {
        v102 = v101 & 0x7FFFFFF;
        v103 = (uint64_t *)(v39 - 32 * v102);
      }
      v38 = v5;
      if (v102)
      {
        v104 = &v103[4 * v102];
        while (1)
        {
          v296[0] = 0;
          if (*(unsigned __int8 *)(*v103 + 16) <= 0x1Bu)
            v105 = 0;
          else
            v105 = *v103;
          v296[0] = v105;
          if (v105 && *(uint64_t ***)(v105 + 40) == v7)
          {
            v106 = *(unsigned __int8 *)(v105 + 16) - 33;
            if (v106 > 0x37)
              goto LABEL_203;
            if (((1 << (*(_BYTE *)(v105 + 16) - 33)) & 0x808001D0000010) == 0)
            {
              if (((1 << (*(_BYTE *)(v105 + 16) - 33)) & 0x8000000000041) != 0)
              {
                v110 = *(_QWORD *)(v105 + 64);
                if (v110 && (*(_BYTE *)(v110 + 17) & 0x30) != 0)
                  goto LABEL_203;
                v111 = *(_DWORD *)(v105 + 20);
                if (v111 < 0)
                {
                  v112 = v105 - 32 * (v111 & 0x7FFFFFF);
                  v115 = *(_QWORD *)(v112 - 8);
                  v113 = v112 - 8;
                  v114 = v115;
                  if (v115)
                  {
                    v116 = -v114;
                    do
                    {
                      v117 = *(_DWORD *)(*(_QWORD *)(v113 + v116) + 8);
                      v75 = v117 > 7;
                      v118 = (1 << v117) & 0x83;
                      if (v75 || v118 == 0)
                        goto LABEL_208;
                      v116 += 16;
                    }
                    while (v116);
                  }
                }
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v105, 45) & 1) != 0
                  || llvm::CallBase::hasFnAttrOnCalledFunction(v105, 44))
                {
LABEL_203:
                  if ((llvm::Instruction::mayThrow((llvm::Instruction *)v105) & 1) == 0
                    && llvm::Instruction::willReturn((llvm::Instruction *)v105))
                  {
                    v303[0] = 0;
                    v107 = sub_1C5C2276C((uint64_t)&v287, v296, v303);
                    v108 = v303[0];
                    if (v107)
                    {
                      v109 = *((_DWORD *)v303[0] + 2);
                    }
                    else
                    {
                      v108 = sub_1C5C22814(&v287, (uint64_t)v296, v296, (_QWORD *)v303[0]);
                      v109 = 0;
                      *v108 = v296[0];
                      *((_DWORD *)v108 + 2) = 0;
                    }
                    *((_DWORD *)v108 + 2) = v109 + 1;
                  }
                }
              }
              else if (v106 != 27 || (*(_WORD *)(v105 + 18) & 0x301) == 0)
              {
                goto LABEL_203;
              }
            }
          }
LABEL_208:
          v103 += 4;
          if (v103 == v104)
          {
            v36 = 1;
            v34 = v267;
            goto LABEL_50;
          }
        }
      }
      v36 = 1;
      v34 = v267;
LABEL_51:
      v33 = *(_QWORD *)(v33 + 8);
      if (v33 == v34)
        goto LABEL_263;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v303, (uint64_t)v304, v43, 8);
    v45 = (int)v303[1];
    v47 = v303[0];
    v46 = LODWORD(v303[1]);
LABEL_61:
    v48 = 32 * v43;
    v49 = &v47[v46];
    do
    {
      v50 = *v44;
      v44 += 4;
      *v49++ = v50;
      v48 -= 32;
    }
    while (v48);
    v51 = v303[0];
    goto LABEL_183;
  }
  v35 = 0;
  v11 = 0;
  v36 = 0;
LABEL_263:
  v120 = v287;
  if (v287 <= 1)
  {
    if ((_DWORD)v287)
    {
      v121 = 4;
      v122 = &v288;
    }
    else
    {
      v122 = v288;
      v121 = v289;
    }
    v123 = (__int128 *)&v122[2 * v121];
    v31 = v123;
    v124 = (uint64_t **)v266;
    goto LABEL_267;
  }
  v123 = (__int128 *)&v288;
  if ((v287 & 1) == 0)
  {
    v123 = (__int128 *)v288;
    if (!v289)
    {
      v120 = 0;
      v31 = (__int128 *)v288;
      v124 = (uint64_t **)v266;
      goto LABEL_267;
    }
    v31 = (__int128 *)&v288[2 * v289];
  }
  v120 = v287 & 1;
  v124 = (uint64_t **)v266;
  while ((*(_QWORD *)v123 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    if (++v123 == v31)
    {
      v123 = v31;
      break;
    }
  }
LABEL_267:
  v125 = v120 == 0;
  if (v120)
    v126 = &v288;
  else
    v126 = v288;
  v127 = v289;
  if (!v125)
    v127 = 4;
  v128 = (__int128 *)&v126[2 * v127];
LABEL_273:
  while (v123 != v128)
  {
    v129 = *((_DWORD *)v123 + 2);
    v130 = *(_QWORD *)(*(_QWORD *)v123 + 8);
    if (v129)
    {
      while (v130)
      {
        v130 = *(_QWORD *)(v130 + 8);
        if (!--v129)
          goto LABEL_277;
      }
    }
    else
    {
LABEL_277:
      if (!v130)
      {
        if (v36)
          goto LABEL_407;
        v36 = 1;
      }
    }
    v131 = v123 + 1;
    v123 = v31;
    if (v131 != v31)
    {
      v123 = v131;
      while ((*(_QWORD *)v123 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v123 == v31)
        {
          v123 = v31;
          goto LABEL_273;
        }
      }
    }
  }
  v132 = v7[7][14];
  if (v132)
  {
    if (*(char *)(v132 + 13) < 0)
      v133 = 2;
    else
      v133 = 3;
  }
  else
  {
    v133 = 3;
  }
  v279 = v133;
  __n = v35;
  if (*(_QWORD *)(v265 + 40) == v265 + 40)
  {
    v135 = 0;
    v134 = 0;
LABEL_401:
    v140 = 0;
  }
  else
  {
    v134 = 0;
    v135 = 0;
    v136 = *(_QWORD *)(v265 + 48);
    v137 = v136 - 24;
    if (v136)
      v138 = v136 - 24;
    else
      v138 = 0;
    if (v136)
    {
      v139 = *(unsigned __int8 *)(v138 + 16);
      v140 = 0;
      if (v139 != 83)
        goto LABEL_402;
      v140 = 0;
      v134 = 0;
      v135 = 0;
      while (1)
      {
        v141 = *(_DWORD *)(v137 + 20);
        v142 = v141 & 0x7FFFFFF;
        if ((v141 & 0x7FFFFFF) != 0)
        {
          v143 = 0;
          while (1)
          {
            v144 = v137 - 32 * v142;
            if ((v141 & 0x40000000) != 0)
              v144 = *(_QWORD *)(v137 - 8);
            if (*(uint64_t ***)(v144 + 32 * *(unsigned int *)(v137 + 60) + 8 * v143) == v7)
              break;
            if (v142 == ++v143)
              goto LABEL_303;
          }
        }
        else
        {
LABEL_303:
          LODWORD(v143) = -1;
        }
        v145 = v142;
        if ((v141 & 0x40000000) != 0)
        {
          v146 = *(_QWORD *)(v137 - 8);
          if (!(_DWORD)v142)
            goto LABEL_313;
        }
        else
        {
          v146 = v137 - 32 * v142;
          if (!(_DWORD)v142)
          {
LABEL_313:
            LODWORD(v147) = -1;
            goto LABEL_314;
          }
        }
        v147 = 0;
        while (1)
        {
          v148 = v137 - 32 * v145;
          if ((v141 & 0x40000000) != 0)
            v148 = *(_QWORD *)(v137 - 8);
          if (*(uint64_t ***)(v148 + 32 * *(unsigned int *)(v137 + 60) + 8 * v147) == v124)
            break;
          if (v145 == ++v147)
            goto LABEL_313;
        }
LABEL_314:
        if ((v141 & 0x40000000) != 0)
          v149 = *(_QWORD *)(v137 - 8);
        else
          v149 = v137 - 32 * v145;
        v150 = *(llvm::Constant **)(v146 + 32 * v143);
        v151 = *(_QWORD *)(v149 + 32 * v147);
        if ((llvm::Constant *)v151 == v150)
          goto LABEL_374;
        v152 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a3 + 864))(*a3, 57, *(_QWORD *)v137, 0, 42, v279, 0);
        if (v153 == 1)
          v134 = 1;
        if (__OFADD__(v135, v152))
          v135 = ((v135 + v152) >> 63) ^ 0x8000000000000000;
        else
          v135 += v152;
        if ((sub_1C5F9705C(v150, v137) & 1) != 0 || (sub_1C5F9705C((llvm::Constant *)v151, v137) & 1) != 0)
          goto LABEL_401;
        if (*((_BYTE *)v150 + 16) == 5)
          v154 = (uint64_t)v150;
        else
          v154 = 0;
        if (*(_BYTE *)(v151 + 16) != 5)
          v151 = 0;
        if (!(v154 | v151))
        {
          v140 = 1;
          goto LABEL_374;
        }
        if (v151 && !llvm::isSafeToSpeculativelyExecute(v151, 0, 0, 0))
          goto LABEL_401;
        if (!v154)
        {
          v165 = 0;
          if (v151)
            goto LABEL_349;
          goto LABEL_344;
        }
        if (!llvm::isSafeToSpeculativelyExecute(v154, 0, 0, 0))
          goto LABEL_401;
        v155 = *(_DWORD *)(v154 + 20);
        if ((v155 & 0x40000000) != 0)
        {
          v157 = *(uint64_t **)(v154 - 8);
          v156 = v155 & 0x7FFFFFF;
        }
        else
        {
          v156 = v155 & 0x7FFFFFF;
          v157 = (uint64_t *)(v154 - 32 * v156);
        }
        v303[0] = v304;
        v303[1] = (void *)0x400000000;
        if (v156 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v303, (uint64_t)v304, v156, 8);
          v158 = (int)v303[1];
          v160 = v303[0];
          v159 = LODWORD(v303[1]);
        }
        else
        {
          v158 = 0;
          if (!v156)
          {
            v164 = v304;
            goto LABEL_346;
          }
          v159 = 0;
          v160 = v304;
        }
        v161 = 32 * v156;
        v162 = &v160[v159];
        do
        {
          v163 = *v157;
          v157 += 4;
          *v162++ = v163;
          v161 -= 32;
        }
        while (v161);
        v164 = v303[0];
LABEL_346:
        LODWORD(v303[1]) = v158 + v156;
        v154 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)*a3 + 72))(*a3, v154, v164);
        v168 = v167;
        if (v303[0] != v304)
          free(v303[0]);
        v165 = v168;
        if (v151)
        {
LABEL_349:
          v275 = v154;
          v169 = *(_DWORD *)(v151 + 20);
          if ((v169 & 0x40000000) != 0)
          {
            v171 = *(uint64_t **)(v151 - 8);
            v170 = v169 & 0x7FFFFFF;
          }
          else
          {
            v170 = v169 & 0x7FFFFFF;
            v171 = (uint64_t *)(v151 - 32 * v170);
          }
          v303[0] = v304;
          v303[1] = (void *)0x400000000;
          if (v170 < 5)
          {
            v172 = 0;
            if (v170)
            {
              v173 = 0;
              v174 = v304;
LABEL_354:
              v175 = 32 * v170;
              v176 = &v174[v173];
              do
              {
                v177 = *v171;
                v171 += 4;
                *v176++ = v177;
                v175 -= 32;
              }
              while (v175);
              v178 = v303[0];
            }
            else
            {
              v178 = v304;
            }
            LODWORD(v303[1]) = v172 + v170;
            v151 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)*a3 + 72))(*a3, v151, v178);
            v166 = v179;
            if (v303[0] != v304)
              free(v303[0]);
            v154 = v275;
            goto LABEL_361;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v303, (uint64_t)v304, v170, 8);
          v172 = (int)v303[1];
          v174 = v303[0];
          v173 = LODWORD(v303[1]);
          goto LABEL_354;
        }
LABEL_344:
        v166 = 0;
LABEL_361:
        v180 = v154 + v151;
        if (__OFADD__(v154, v151))
          v180 = ((v154 + v151) >> 63) ^ 0x8000000000000000;
        if (v166 == 1)
          v181 = 1;
        else
          v181 = v165;
        v182 = v180 <= (2 * dword_1ED8284B8);
        if (v181)
          v182 = v181 < 1;
        if (!v182 || v36 != 0)
        {
          v140 = 0;
          v124 = (uint64_t **)v266;
          goto LABEL_402;
        }
        v140 = 1;
        v36 = 1;
        v124 = (uint64_t **)v266;
LABEL_374:
        v184 = *(_QWORD *)(v137 + 32);
        v137 = v184 - 24;
        if (v184)
          v185 = v184 - 24;
        else
          v185 = 0;
        if (!v184 || *(_BYTE *)(v185 + 16) != 83)
          goto LABEL_402;
      }
    }
    v140 = 0;
  }
LABEL_402:
  if (__n || (v140 & 1) != 0)
  {
    v188 = v135 > v264;
    if (v134)
      v188 = v134 > 0;
    if (!v188)
    {
      v190 = (unsigned __int8 *)v263;
      if (v11)
      {
        sub_1C5673D1C((uint64_t)v303, v263, 0, 0, 0);
        v191 = __n - 8;
        if (v261 == (uint64_t *)v124)
          v192 = (uint64_t *)*(__n - 8);
        else
          v192 = (uint64_t *)v11;
        if (v261 == (uint64_t *)v124)
          v193 = v11;
        else
          v193 = (uint64_t)*(__n - 8);
        v296[0] = (unint64_t)"spec.store.select";
        v298 = 259;
        Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)v303, v262, v192, v193, (uint64_t)v296, (unsigned __int8 *)v263);
        if (*v191)
        {
          *(_QWORD *)*(__n - 6) = *(__n - 7);
          v195 = (uint64_t)*(__n - 7);
          if (v195)
            *(_QWORD *)(v195 + 16) = *(__n - 6);
        }
        *v191 = Select;
        if (Select)
        {
          v198 = (const llvm::DILocation *)*((_QWORD *)Select + 1);
          v196 = (llvm::Value *)((char *)Select + 8);
          v197 = v198;
          *(__n - 7) = v198;
          if (v198)
            *((_QWORD *)v197 + 2) = __n - 7;
          *(__n - 6) = v196;
          *(_QWORD *)v196 = v191;
        }
        llvm::Instruction::applyMergedLocation((llvm::Instruction *)__n, *(const llvm::DILocation **)(v263 + 48), __n[6]);
        if (v303[0] != v304)
          free(v303[0]);
      }
      v199 = v124[6];
      v200 = __s1;
      if (v199 != __s1)
      {
        do
        {
          if (v199)
            v201 = v199 - 3;
          else
            v201 = 0;
          if (!v11 || v201 != (uint64_t *)__n)
          {
            v283 = 0;
            v202 = (unsigned __int8 **)(v201 + 6);
            if (&v283 != (unsigned __int8 **)(v201 + 6))
            {
              if (*v202)
              {
                llvm::MetadataTracking::untrack((uint64_t)(v201 + 6), *v202);
                v203 = v283;
                *v202 = v283;
                if (v203)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v283, v203, (uint64_t)(v201 + 6));
                  v283 = 0;
                }
              }
              else
              {
                *v202 = 0;
              }
            }
          }
          llvm::Instruction::dropUndefImplyingAttrsAndUnknownMetadata((uint64_t ***)v201, 0, 0);
          v199 = (uint64_t *)v199[1];
        }
        while (v199 != __s1);
        v200 = v124[6];
      }
      v204 = (uint64_t *)*__s1;
      if (v200 == (uint64_t *)*__s1 || (v205 = (uint64_t *)(v263 + 24), (uint64_t *)(v263 + 24) == v204))
      {
LABEL_455:
        sub_1C5673D1C((uint64_t)v303, (uint64_t)v190, 0, 0, 0);
        if (*(_QWORD *)(v265 + 40) == v265 + 40
          || ((v215 = *(_QWORD *)(v265 + 48), v216 = v215 - 24, v215) ? (v217 = v215 - 24) : (v217 = 0),
              !v215 || *(_BYTE *)(v217 + 16) != 83))
        {
LABEL_493:
          if ((_DWORD)v285)
          {
            v234 = (uint64_t *)v284;
            v235 = 8 * v285;
            do
            {
              v236 = *v234++;
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v236 + 40) + 40, (uint64_t ***)v236);
              v237 = *(_QWORD *)(v236 + 24);
              v238 = *(_QWORD **)(v236 + 32);
              *v238 = v237;
              *(_QWORD *)(v237 + 8) = v238;
              *(_QWORD *)(v236 + 24) = 0;
              *(_QWORD *)(v236 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v236);
              v235 -= 8;
            }
            while (v235);
          }
          if (v303[0] != v304)
            free(v303[0]);
          v4 = 1;
          goto LABEL_408;
        }
        while (1)
        {
          v218 = *(_DWORD *)(v216 + 20);
          v219 = v218 & 0x7FFFFFF;
          if ((v218 & 0x7FFFFFF) != 0)
            break;
          LODWORD(v220) = -1;
          LODWORD(v223) = -1;
          if ((v218 & 0x40000000) == 0)
            goto LABEL_478;
LABEL_476:
          v225 = *(_QWORD *)(v216 - 8);
LABEL_479:
          v226 = *(uint64_t **)(v225 + 32 * v220);
          v227 = *(uint64_t **)(v225 + 32 * v223);
          if (v226 != v227)
          {
            if (v261 == (uint64_t *)v124)
              v230 = v227;
            else
              v230 = v226;
            if (v261 == (uint64_t *)v124)
              v231 = (uint64_t)v226;
            else
              v231 = (uint64_t)v227;
            v296[0] = (unint64_t)"spec.select";
            v298 = 259;
            v232 = llvm::IRBuilderBase::CreateSelect((uint64_t *)v303, v262, v230, v231, (uint64_t)v296, v190);
            sub_1C6125834(v216, v220, (uint64_t)v232);
            v233 = (uint64_t)v232;
            v190 = (unsigned __int8 *)v263;
            sub_1C6125834(v216, v223, v233);
          }
          v228 = *(_QWORD *)(v216 + 32);
          v216 = v228 - 24;
          if (v228)
            v229 = v228 - 24;
          else
            v229 = 0;
          if (!v228 || *(_BYTE *)(v229 + 16) != 83)
            goto LABEL_493;
        }
        v220 = 0;
        v221 = 32 * *(unsigned int *)(v216 + 60);
        while (1)
        {
          v222 = v216 - 32 * v219;
          if ((v218 & 0x40000000) != 0)
            v222 = *(_QWORD *)(v216 - 8);
          if (*(uint64_t ***)(v222 + v221 + 8 * v220) == v7)
            break;
          if (v219 == ++v220)
          {
            LODWORD(v220) = -1;
            break;
          }
        }
        v223 = 0;
        while (1)
        {
          v224 = v216 - 32 * v219;
          if ((v218 & 0x40000000) != 0)
            v224 = *(_QWORD *)(v216 - 8);
          if (*(uint64_t ***)(v224 + v221 + 8 * v223) == v124)
            break;
          if (v219 == ++v223)
          {
            LODWORD(v223) = -1;
            if ((v218 & 0x40000000) == 0)
              goto LABEL_478;
            goto LABEL_476;
          }
        }
        if ((v218 & 0x40000000) != 0)
          goto LABEL_476;
LABEL_478:
        v225 = v216 - 32 * v219;
        goto LABEL_479;
      }
      *((_WORD *)v7 + 9) &= ~0x8000u;
      if (v7 == v124)
      {
LABEL_454:
        v212 = *v204;
        v213 = *v200;
        *(_QWORD *)(v213 + 8) = v204;
        *v204 = v213;
        v214 = *v205;
        *(_QWORD *)(v212 + 8) = v205;
        *v200 = v214;
        *(_QWORD *)(v214 + 8) = v200;
        *v205 = v212;
        goto LABEL_455;
      }
      v206 = v7[7];
      if (v206)
        v207 = (llvm::ValueSymbolTable *)v206[13];
      else
        v207 = 0;
      v208 = v124[7];
      if (v208)
        v209 = (llvm::ValueSymbolTable *)v208[13];
      else
        v209 = 0;
      if (v207 == v209)
      {
        v210 = v200;
        do
        {
          v211 = v210 - 3;
          if (!v210)
            v211 = 0;
          v211[5] = (uint64_t)v7;
          v210 = (uint64_t *)v210[1];
        }
        while (v210 != v204);
        goto LABEL_454;
      }
      v273 = v200;
      while (1)
      {
        v241 = (llvm *)(v273 - 3);
        if (!v273)
          v241 = 0;
        v278 = v241;
        v269 = *((_DWORD *)v241 + 5) & 0x10000000;
        if (v209)
        {
          if (v269)
            break;
        }
LABEL_530:
        *((_QWORD *)v278 + 5) = v7;
        if (v207 && v269)
          llvm::ValueSymbolTable::reinsertValue(v207, v278);
        v273 = (uint64_t *)v273[1];
        v124 = (uint64_t **)v266;
        v190 = (unsigned __int8 *)v263;
        if (v273 == v204)
          goto LABEL_454;
      }
      v242 = ***(_QWORD ***)v241;
      v243 = *(_QWORD *)(v242 + 152);
      v244 = *(unsigned int *)(v242 + 168);
      if ((_DWORD)v244)
      {
        LODWORD(v245) = (v244 - 1) & ((v278 >> 4) ^ (v278 >> 9));
        v246 = (llvm **)(v243 + 16 * v245);
        v247 = *v246;
        if (*v246 == v278)
          goto LABEL_517;
        v248 = 1;
        while (v247 != (llvm *)-4096)
        {
          v249 = v245 + v248++;
          v245 = v249 & (v244 - 1);
          v247 = *(llvm **)(v243 + 16 * v245);
          if (v247 == v278)
          {
            v246 = (llvm **)(v243 + 16 * v245);
            goto LABEL_517;
          }
        }
      }
      v246 = (llvm **)(v243 + 16 * v244);
LABEL_517:
      v250 = *((unsigned int *)v209 + 2);
      if ((_DWORD)v250)
      {
        v251 = (size_t *)v246[1];
        v268 = *((unsigned int *)v209 + 5);
        __s1a = (unsigned __int8 *)v251 + v268;
        __na = *v251;
        v252 = 0;
        if (*v251)
        {
          v253 = *v251;
          v254 = __s1a;
          do
          {
            v255 = *v254++;
            v252 = 33 * v252 + v255;
            --v253;
          }
          while (v253);
        }
        v280 = v250 - 1;
        v256 = *(_QWORD *)v209;
        v276 = *(_QWORD *)v209 + 8 * v250 + 8;
        v257 = 1;
        v258 = v252;
        while (1)
        {
          v259 = v258 & v280;
          v260 = *(_QWORD **)(v256 + 8 * v259);
          if (v260 != (_QWORD *)-8)
          {
            if (!v260)
              goto LABEL_530;
            if (*(_DWORD *)(v276 + 4 * v259) == v252
              && __na == *v260
              && (!__na || !memcmp(__s1a, (char *)v260 + v268, __na)))
            {
              break;
            }
          }
          v258 = v257 + v259;
          ++v257;
        }
        *(_QWORD *)(v256 + 8 * (int)v259) = -8;
        *(int32x2_t *)((char *)v209 + 12) = vadd_s32(*(int32x2_t *)((char *)v209 + 12), (int32x2_t)0x1FFFFFFFFLL);
      }
      goto LABEL_530;
    }
  }
LABEL_407:
  v4 = 0;
LABEL_408:
  if (v284 != v286)
    free(v284);
  if ((v287 & 1) == 0)
    MEMORY[0x1CAA32FB4](v288, 8);
  return v4;
}

uint64_t sub_1C5FA25CC(uint64_t a1, uint64_t a2, llvm::DomTreeUpdater *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  llvm::BasicBlock *v10;
  llvm::BasicBlock *v11;
  uint64_t SingleSuccessor;
  llvm::BasicBlock *v13;
  uint64_t v14;
  llvm::BasicBlock *v15;
  uint64_t v16;
  llvm::BasicBlock *v17;
  llvm::BasicBlock *v18;
  llvm::BasicBlock *v19;
  llvm::BasicBlock *v20;
  uint64_t v21;
  llvm::BasicBlock *v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  char *v39;
  uint64_t i;
  char v41;
  uint64_t v42;
  char v43;
  char *v44;
  char *v45;
  uint64_t j;
  unint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  char *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t SinglePredecessor;
  uint64_t v72;
  uint64_t k;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  BOOL v89;
  uint64_t m;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  uint64_t n;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  uint64_t v124;
  char *v125;
  unsigned __int8 *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  int v141;
  uint64_t **v143;
  uint64_t *v144;
  unsigned int v145;
  BOOL v146;
  unint64_t v148;
  uint64_t *v149;
  unsigned int v150;
  BOOL v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t ii;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v169;
  uint64_t v170;
  llvm::Value *v171;
  uint64_t *v172;
  char *v173;
  llvm::MDNode *v174;
  llvm::MDNode *v175;
  char v176;
  char v177;
  char *v178;
  char *v179;
  unint64_t *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  char *v191;
  char *v192;
  int v193;
  unsigned __int8 *v194;
  unsigned __int8 *v195;
  unsigned __int8 *v196;
  uint64_t v197;
  llvm::Value *v198;
  llvm::Value *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t **v202;
  unsigned __int8 **v203;
  llvm::Instruction *v204;
  uint64_t **v205;
  uint64_t v206;
  llvm::BasicBlock *v207;
  llvm::BasicBlock *v208;
  uint64_t **v209;
  uint64_t v210;
  llvm::DomTreeUpdater *v211;
  _QWORD *v212;
  llvm::BasicBlock *v213;
  char *v214;
  char *v215;
  uint64_t v216;
  int v217;
  _BYTE v218[32];
  char *v219;
  char *v220;
  uint64_t v221;
  int v222;
  _BYTE v223[32];
  llvm::MDNode *v224[4];
  llvm::MDNode *v225[4];
  _QWORD v226[2];
  _QWORD *v227;
  llvm::MDNode *v228;
  llvm::MDNode *v229;
  llvm::MDNode *v230;
  llvm::MDNode *v231;
  __int16 v232;
  llvm::BasicBlock *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;

  v239 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 - 32);
  v9 = *(_QWORD *)(a1 - 64);
  v10 = *(llvm::BasicBlock **)(a2 - 32);
  v11 = *(llvm::BasicBlock **)(a2 - 64);
  SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v11);
  if ((llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(v10) == v11)
    v13 = v11;
  else
    v13 = (llvm::BasicBlock *)SingleSuccessor;
  if (!v13)
    goto LABEL_27;
  v211 = a3;
  v212 = a4;
  v14 = *(_QWORD *)(a2 + 40);
  v15 = (llvm::BasicBlock *)(v9 == v14 ? v8 : v9);
  v16 = v9 == v14 ? v9 : v8;
  v17 = v11 == v13 ? v10 : v11;
  v213 = v17;
  v210 = v9;
  v18 = v11 == v13 ? v11 : v10;
  v19 = v16 == v14 ? 0 : (llvm::BasicBlock *)v16;
  v20 = v18 == v13 ? 0 : v18;
  v21 = *(_QWORD *)(a1 + 40);
  v22 = v11;
  v23 = (uint64_t **)v13;
  if (llvm::BasicBlock::getSinglePredecessor(v15) != v21)
    goto LABEL_27;
  v206 = (uint64_t)v18;
  v207 = v20;
  v205 = (uint64_t **)v22;
  v208 = v19;
  v209 = v23;
  if (llvm::BasicBlock::getSingleSuccessor(v15) != v14)
    goto LABEL_27;
  v24 = v14;
  v25 = *(_QWORD *)(a2 + 40);
  v26 = (uint64_t)v213;
  if (llvm::BasicBlock::getSinglePredecessor(v213) != v25)
    goto LABEL_27;
  if ((uint64_t **)llvm::BasicBlock::getSingleSuccessor(v213) != v23)
    goto LABEL_27;
  v29 = (uint64_t)v19;
  if (v19)
  {
    v30 = *(_QWORD *)(a1 + 40);
    if (llvm::BasicBlock::getSinglePredecessor(v19) != v30)
      goto LABEL_27;
    v31 = *(_QWORD *)(a2 + 40);
    v89 = llvm::BasicBlock::getSingleSuccessor(v19) == v31;
    v26 = (uint64_t)v213;
    if (!v89)
      goto LABEL_27;
  }
  if (v20
    && ((v32 = *(_QWORD *)(a2 + 40), llvm::BasicBlock::getSinglePredecessor(v20) != v32)
     || (v26 = (uint64_t)v213, (uint64_t **)llvm::BasicBlock::getSingleSuccessor(v20) != v23))
    || (v33 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8)) == 0
    || (v34 = *(_QWORD *)(v33 + 8)) == 0
    || (v35 = *(_QWORD *)(v34 + 8)) != 0)
  {
LABEL_27:
    v27 = 0;
    return v27 & 1;
  }
  v36 = 0;
  v219 = v223;
  v220 = v223;
  v221 = 4;
  v222 = 0;
  v214 = v218;
  v215 = v218;
  v216 = 4;
  v217 = 0;
  v233 = v19;
  v234 = (uint64_t)v15;
  do
  {
    v37 = v35;
    v38 = (char *)*(&v233 + v36);
    if (v38)
    {
      v39 = v38 + 40;
      for (i = *((_QWORD *)v38 + 6); (char *)i != v39; i = *(_QWORD *)(i + 8))
      {
        if (i && *(_BYTE *)(i - 8) == 61)
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v219, *(_QWORD *)(i - 56));
      }
    }
    LOBYTE(v35) = 1;
    v36 = 1;
  }
  while ((v37 & 1) == 0);
  v41 = 0;
  v42 = 0;
  v233 = v207;
  v234 = v26;
  do
  {
    v43 = v41;
    v44 = (char *)*(&v233 + v42);
    if (v44)
    {
      v45 = v44 + 40;
      for (j = *((_QWORD *)v44 + 6); (char *)j != v45; j = *(_QWORD *)(j + 8))
      {
        if (j && *(_BYTE *)(j - 8) == 61)
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v214, *(_QWORD *)(j - 56));
      }
    }
    v41 = 1;
    v42 = 1;
  }
  while ((v43 & 1) == 0);
  v47 = (unint64_t *)v220;
  if (v220 == v219)
    v48 = (uint64_t *)((char *)&v221 + 4);
  else
    v48 = &v221;
  v49 = *(unsigned int *)v48;
  v50 = (unint64_t *)&v220[8 * v49];
  v51 = v220;
  if ((_DWORD)v49)
  {
    v52 = 0;
    while (*(_QWORD *)&v220[v52] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v52 += 8;
      if (8 * v49 == v52)
      {
        v53 = (uint64_t)v207;
        goto LABEL_86;
      }
    }
    v51 = &v220[v52];
  }
  if (v51 != (char *)v50)
  {
    do
    {
      v56 = *(_QWORD *)v51;
      v55 = (unint64_t *)(v51 + 8);
      v54 = v56;
      while (v55 != v50)
      {
        v57 = *v55++;
        if (v57 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v51 = (char *)(v55 - 1);
          goto LABEL_72;
        }
      }
      v51 = (char *)v50;
LABEL_72:
      v58 = (char *)sub_1C477672C((uint64_t)&v214, v54);
      if (v215 == v214)
        v59 = (uint64_t *)((char *)&v216 + 4);
      else
        v59 = &v216;
      if (v58 == &v215[8 * *(unsigned int *)v59])
      {
        v60 = (char *)sub_1C477672C((uint64_t)&v219, v54);
        v61 = v220 == v219 ? (uint64_t *)((char *)&v221 + 4) : &v221;
        if (v60 != &v220[8 * *(unsigned int *)v61])
        {
          *(_QWORD *)v60 = -2;
          ++v222;
        }
      }
      v47 = (unint64_t *)v220;
      if (v220 == v219)
        v62 = (uint64_t *)((char *)&v221 + 4);
      else
        v62 = &v221;
      v49 = *(unsigned int *)v62;
    }
    while (v51 != &v220[8 * v49]);
  }
  v50 = &v47[v49];
  v53 = (uint64_t)v207;
  if ((_DWORD)v49)
  {
LABEL_86:
    while (*v47 >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (++v47 == v50)
        goto LABEL_404;
    }
  }
  if (v47 == v50)
  {
LABEL_404:
    v27 = 0;
    goto LABEL_405;
  }
  v27 = 0;
  v63 = v53 + 40;
  v200 = v26 + 40;
  v201 = *v47;
LABEL_91:
  v64 = sub_1C5FA52D4(v29, (uint64_t)v15);
  v65 = sub_1C5FA52D4(v53, v26);
  v66 = 0;
  v204 = (llvm::Instruction *)v64;
  if (!v64 || !v65)
    goto LABEL_99;
  if ((*(_WORD *)(v65 + 18) & 0x301) != 0)
  {
    v66 = 0;
    goto LABEL_99;
  }
  if ((*(_WORD *)(v64 + 18) & 0x301) != 0)
    goto LABEL_97;
  v67 = v65;
  if (**(_QWORD **)(v64 - 64) != **(_QWORD **)(v65 - 64))
    goto LABEL_97;
  SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v213);
  v72 = SinglePredecessor + 40;
  for (k = *(_QWORD *)(SinglePredecessor + 48); k != v72; k = *(_QWORD *)(k + 8))
  {
    if (k)
      v74 = k - 24;
    else
      v74 = 0;
    v75 = *(unsigned __int8 *)(v74 + 16);
    v76 = (v75 - 33);
    if (v76 <= 0x37)
    {
      if (((1 << (v75 - 33)) & 0x8000000000041) != 0)
      {
        v77 = *(_QWORD *)(v74 + 64);
        if (!v77 || (*(_BYTE *)(v77 + 20) & 4) == 0 && (*(_BYTE *)(v77 + 17) & 0x10) == 0)
        {
          LODWORD(v233) = 7;
          if (sub_1C53E4BBC(v74, (__int32 *)&v233, 1uLL))
          {
            v81 = *(_QWORD *)(v74 - 32);
            if (!v81
              || *(_BYTE *)(v81 + 16)
              || *(_QWORD *)(v81 + 24) != *(_QWORD *)(v74 + 72)
              || *(_DWORD *)(v81 + 36) != 7)
            {
              goto LABEL_97;
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v74, 66) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction(v74, 44))
          {
            goto LABEL_97;
          }
        }
LABEL_120:
        v75 = *(unsigned __int8 *)(v74 + 16);
        goto LABEL_121;
      }
      if (((1 << (v75 - 33)) & 0x808001C8000010) != 0)
        goto LABEL_97;
      if (v76 == 28)
      {
        if ((*(_WORD *)(v74 + 18) & 0x301) != 0)
          goto LABEL_97;
        goto LABEL_120;
      }
    }
LABEL_121:
    v78 = (v75 - 33);
    if (v78 <= 0x37)
    {
      if (((1 << v78) & 0x8000000000041) != 0)
      {
        v79 = *(_QWORD *)(v74 + 64);
        if (!v79 || (*(_BYTE *)(v79 + 17) & 0x30) == 0)
        {
          v80 = *(_DWORD *)(v74 + 20);
          if (v80 < 0)
          {
            v82 = v74 - 32 * (v80 & 0x7FFFFFF);
            v85 = *(_QWORD *)(v82 - 8);
            v83 = v82 - 8;
            v84 = v85;
            if (v85)
            {
              v86 = -v84;
              do
              {
                v87 = *(_DWORD *)(*(_QWORD *)(v83 + v86) + 8);
                v152 = v87 > 7;
                v88 = (1 << v87) & 0x83;
                v89 = v152 || v88 == 0;
                if (v89)
                  goto LABEL_97;
                v86 += 16;
              }
              while (v86);
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v74, 45) & 1) == 0
            && (llvm::CallBase::hasFnAttrOnCalledFunction(v74, 44) & 1) == 0)
          {
LABEL_97:
            v66 = 0;
            goto LABEL_98;
          }
        }
      }
      else if (v78 == 27)
      {
        if ((*(_WORD *)(v74 + 18) & 0x301) != 0)
          goto LABEL_97;
      }
      else if (((1 << v78) & 0x808001D0000010) != 0)
      {
        goto LABEL_97;
      }
    }
  }
  for (m = *((_QWORD *)v213 + 6); m != v200; m = *(_QWORD *)(m + 8))
  {
    if (m)
      v91 = m - 24;
    else
      v91 = 0;
    if (v91 == v67)
      continue;
    v92 = *(unsigned __int8 *)(v91 + 16);
    v93 = (v92 - 33);
    if (v93 <= 0x37)
    {
      if (((1 << (v92 - 33)) & 0x8000000000041) != 0)
      {
        v94 = *(_QWORD *)(v91 + 64);
        if (!v94 || (*(_BYTE *)(v94 + 20) & 4) == 0 && (*(_BYTE *)(v94 + 17) & 0x10) == 0)
        {
          LODWORD(v233) = 7;
          if (sub_1C53E4BBC(v91, (__int32 *)&v233, 1uLL))
          {
            v98 = *(_QWORD *)(v91 - 32);
            if (!v98
              || *(_BYTE *)(v98 + 16)
              || *(_QWORD *)(v98 + 24) != *(_QWORD *)(v91 + 72)
              || *(_DWORD *)(v98 + 36) != 7)
            {
              goto LABEL_97;
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v91, 66) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction(v91, 44))
          {
            goto LABEL_97;
          }
        }
LABEL_165:
        v92 = *(unsigned __int8 *)(v91 + 16);
        goto LABEL_166;
      }
      if (((1 << (v92 - 33)) & 0x808001C8000010) != 0)
        goto LABEL_97;
      if (v93 == 28)
      {
        if ((*(_WORD *)(v91 + 18) & 0x301) != 0)
          goto LABEL_97;
        goto LABEL_165;
      }
    }
LABEL_166:
    v95 = (v92 - 33);
    if (v95 <= 0x37)
    {
      if (((1 << v95) & 0x8000000000041) != 0)
      {
        v96 = *(_QWORD *)(v91 + 64);
        if (!v96 || (*(_BYTE *)(v96 + 17) & 0x30) == 0)
        {
          v97 = *(_DWORD *)(v91 + 20);
          if (v97 < 0)
          {
            v99 = v91 - 32 * (v97 & 0x7FFFFFF);
            v102 = *(_QWORD *)(v99 - 8);
            v100 = v99 - 8;
            v101 = v102;
            if (v102)
            {
              v103 = -v101;
              do
              {
                v104 = *(_DWORD *)(*(_QWORD *)(v100 + v103) + 8);
                v152 = v104 > 7;
                v105 = (1 << v104) & 0x83;
                if (v152 || v105 == 0)
                  goto LABEL_97;
                v103 += 16;
              }
              while (v103);
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v91, 45) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction(v91, 44))
          {
            goto LABEL_97;
          }
        }
      }
      else if (v95 == 27)
      {
        if ((*(_WORD *)(v91 + 18) & 0x301) != 0)
          goto LABEL_97;
      }
      else if (((1 << v95) & 0x808001D0000010) != 0)
      {
        goto LABEL_97;
      }
    }
  }
  if (v207)
  {
    for (n = *((_QWORD *)v207 + 6); ; n = *(_QWORD *)(n + 8))
    {
      if (n == v63)
        goto LABEL_238;
      v108 = n ? n - 24 : 0;
      if (v108 != v67)
        break;
LABEL_216:
      ;
    }
    v109 = *(unsigned __int8 *)(v108 + 16);
    v110 = (v109 - 33);
    if (v110 <= 0x37)
    {
      if (((1 << (v109 - 33)) & 0x8000000000041) != 0)
      {
        v111 = *(_QWORD *)(v108 + 64);
        if (!v111 || (*(_BYTE *)(v111 + 20) & 4) == 0 && (*(_BYTE *)(v111 + 17) & 0x10) == 0)
        {
          LODWORD(v233) = 7;
          if (sub_1C53E4BBC(v108, (__int32 *)&v233, 1uLL))
          {
            v115 = *(_QWORD *)(v108 - 32);
            if (!v115
              || *(_BYTE *)(v115 + 16)
              || *(_QWORD *)(v115 + 24) != *(_QWORD *)(v108 + 72)
              || *(_DWORD *)(v115 + 36) != 7)
            {
              goto LABEL_97;
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v108, 66) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction(v108, 44))
          {
            goto LABEL_97;
          }
        }
LABEL_211:
        v109 = *(unsigned __int8 *)(v108 + 16);
        goto LABEL_212;
      }
      if (((1 << (v109 - 33)) & 0x808001C8000010) != 0)
        goto LABEL_97;
      if (v110 == 28)
      {
        if ((*(_WORD *)(v108 + 18) & 0x301) != 0)
          goto LABEL_97;
        goto LABEL_211;
      }
    }
LABEL_212:
    v112 = (v109 - 33);
    if (v112 <= 0x37)
    {
      if (((1 << v112) & 0x8000000000041) != 0)
      {
        v113 = *(_QWORD *)(v108 + 64);
        if (!v113 || (*(_BYTE *)(v113 + 17) & 0x30) == 0)
        {
          v114 = *(_DWORD *)(v108 + 20);
          if (v114 < 0)
          {
            v116 = v108 - 32 * (v114 & 0x7FFFFFF);
            v119 = *(_QWORD *)(v116 - 8);
            v117 = v116 - 8;
            v118 = v119;
            if (v119)
            {
              v120 = -v118;
              do
              {
                v121 = *(_DWORD *)(*(_QWORD *)(v117 + v120) + 8);
                v152 = v121 > 7;
                v122 = (1 << v121) & 0x83;
                if (v152 || v122 == 0)
                  goto LABEL_97;
                v120 += 16;
              }
              while (v120);
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v108, 45) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction(v108, 44))
          {
            goto LABEL_97;
          }
        }
      }
      else if (v112 == 27)
      {
        if ((*(_WORD *)(v108 + 18) & 0x301) != 0)
          goto LABEL_97;
      }
      else if (((1 << v112) & 0x808001D0000010) != 0)
      {
        goto LABEL_97;
      }
    }
    goto LABEL_216;
  }
LABEL_238:
  v124 = *((_QWORD *)v204 + 5) + 40;
  if ((llvm::Instruction *)((char *)v204 + 24) != (llvm::Instruction *)v124)
  {
    v125 = (char *)v204 + 24;
    do
    {
      if (v125)
        v126 = (unsigned __int8 *)(v125 - 24);
      else
        v126 = 0;
      if (v126 == (unsigned __int8 *)v204)
        goto LABEL_261;
      v127 = (uint64_t)v126;
      v128 = v126[16];
      v129 = (v128 - 33);
      if (v129 <= 0x37)
      {
        if (((1 << (v128 - 33)) & 0x8000000000041) != 0)
        {
          v130 = *(_QWORD *)(v127 + 64);
          if (!v130 || (*(_BYTE *)(v130 + 20) & 4) == 0 && (*(_BYTE *)(v130 + 17) & 0x10) == 0)
          {
            LODWORD(v233) = 7;
            if (sub_1C53E4BBC(v127, (__int32 *)&v233, 1uLL))
            {
              v134 = *(_QWORD *)(v127 - 32);
              if (!v134
                || *(_BYTE *)(v134 + 16)
                || *(_QWORD *)(v134 + 24) != *(_QWORD *)(v127 + 72)
                || *(_DWORD *)(v134 + 36) != 7)
              {
                goto LABEL_97;
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v127, 66) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v127, 44))
            {
              goto LABEL_97;
            }
          }
          goto LABEL_256;
        }
        if (((1 << (v128 - 33)) & 0x808001C8000010) != 0)
          goto LABEL_97;
        if (v129 == 28)
        {
          if ((*(_WORD *)(v127 + 18) & 0x301) != 0)
            goto LABEL_97;
LABEL_256:
          v128 = *(unsigned __int8 *)(v127 + 16);
        }
      }
      v131 = (v128 - 33);
      if (v131 <= 0x37)
      {
        if (((1 << v131) & 0x8000000000041) != 0)
        {
          v132 = *(_QWORD *)(v127 + 64);
          if (!v132 || (*(_BYTE *)(v132 + 17) & 0x30) == 0)
          {
            v133 = *(_DWORD *)(v127 + 20);
            if (v133 < 0)
            {
              v135 = v127 - 32 * (v133 & 0x7FFFFFF);
              v138 = *(_QWORD *)(v135 - 8);
              v136 = v135 - 8;
              v137 = v138;
              if (v138)
              {
                v139 = -v137;
                do
                {
                  v140 = *(_DWORD *)(*(_QWORD *)(v136 + v139) + 8);
                  v152 = v140 > 7;
                  v141 = (1 << v140) & 0x83;
                  if (v152 || v141 == 0)
                    goto LABEL_97;
                  v139 += 16;
                }
                while (v139);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v127, 45) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v127, 44))
            {
              goto LABEL_97;
            }
          }
        }
        else if (v131 == 27)
        {
          if ((*(_WORD *)(v127 + 18) & 0x301) != 0)
            goto LABEL_97;
        }
        else if (((1 << v131) & 0x808001D0000010) != 0)
        {
          goto LABEL_97;
        }
      }
LABEL_261:
      v125 = (char *)*((_QWORD *)v125 + 1);
    }
    while (v125 != (char *)v124);
  }
  v226[1] = v67;
  v227 = v212;
  v226[0] = v204;
  if (!byte_1ED828938
    && (!sub_1C5FA53A0(&v227, v208, (uint64_t)v226)
     || !sub_1C5FA53A0(&v227, v15, (uint64_t)v226)
     || !sub_1C5FA53A0(&v227, v207, (uint64_t)v226)
     || !sub_1C5FA53A0(&v227, v213, (uint64_t)v226)))
  {
    goto LABEL_97;
  }
  v143 = v209;
  do
  {
    v143 = (uint64_t **)v143[1];
    if (!v143)
      break;
    v144 = v143[3];
    v145 = *((unsigned __int8 *)v144 + 16);
    v146 = v144 && v145 >= 0x1C;
  }
  while (!v146 || v145 - 29 >= 0xB);
  v148 = 2;
  do
  {
    while (1)
    {
      v143 = (uint64_t **)v143[1];
      if (v143)
        break;
      if (v148 <= 1)
      {
        v155 = (uint64_t)v209;
        goto LABEL_317;
      }
LABEL_306:
      --v148;
    }
    v149 = v143[3];
    v150 = *((unsigned __int8 *)v149 + 16);
    if (v149)
      v151 = v150 >= 0x1C;
    else
      v151 = 0;
    v152 = !v151 || v150 - 29 > 0xA;
  }
  while (v152);
  if (v148 >= 2)
    goto LABEL_306;
  v153 = v206;
  if (!v207)
    v153 = llvm::BasicBlock::getSinglePredecessor(v213);
  v233 = v213;
  v234 = v153;
  v154 = sub_1C5EBE3AC(v209, (uint64_t *)&v233, 2, "condstore.split", v211, 0, 0, 0, 0);
  v66 = 0;
  if (v154)
  {
    v155 = v154;
LABEL_317:
    v156 = *(_QWORD *)(llvm::BasicBlock::getSinglePredecessor(v15) + 40);
    if (v156)
      v157 = v156 - 24;
    else
      v157 = 0;
    if (*(unsigned __int8 *)(v157 + 16) - 29 >= 0xB)
      v157 = 0;
    v198 = *(llvm::Value **)(v157 - 96);
    v158 = *(_QWORD *)(llvm::BasicBlock::getSinglePredecessor(v213) + 40);
    if (v158)
      v159 = v158 - 24;
    else
      v159 = 0;
    if (*(unsigned __int8 *)(v159 + 16) - 29 >= 0xB)
      v159 = 0;
    v160 = *(_QWORD *)(v159 - 96);
    v161 = sub_1C5FA5850(*((_QWORD *)v204 - 8), *((llvm::BasicBlock **)v204 + 5), 0);
    v162 = sub_1C5FA5850(*(_QWORD *)(v67 - 64), *(llvm::BasicBlock **)(v67 + 40), (llvm::Type *)v161);
    v163 = v155 + 40;
    for (ii = *(_QWORD *)(v155 + 48); ii != v163; ii = *(_QWORD *)(ii + 8))
    {
      v165 = ii - 24;
      if (!ii)
        v165 = 0;
      if (*(_BYTE *)(v165 + 16) != 83)
      {
        v166 = *(unsigned __int8 *)(ii - 8) - 38;
        v152 = v166 > 0x38;
        v167 = (1 << v166) & 0x100060000000001;
        if (v152 || v167 == 0)
          v163 = ii;
        else
          v163 = *(_QWORD *)(ii + 8);
        break;
      }
    }
    if (v163)
      v169 = v163 - 24;
    else
      v169 = 0;
    v170 = sub_1C4773D54((uint64_t)&v233, v169, 0, 0, 0);
    if (*((llvm::BasicBlock **)v204 + 5) != v208)
    {
      v232 = 257;
      v198 = (llvm::Value *)sub_1C506EAA0(v170, (uint64_t)v198, (uint64_t)&v228);
    }
    if (*(llvm::BasicBlock **)(v67 + 40) != v207)
    {
      v232 = 257;
      v160 = sub_1C506EAA0((uint64_t)&v233, v160, (uint64_t)&v228);
    }
    if (v210 == v24)
    {
      v232 = 257;
      v198 = (llvm::Value *)sub_1C506EAA0((uint64_t)&v233, (uint64_t)v198, (uint64_t)&v228);
    }
    if (v205 == v209)
    {
      v232 = 257;
      v160 = sub_1C506EAA0((uint64_t)&v233, v160, (uint64_t)&v228);
    }
    v232 = 257;
    v171 = (llvm::Value *)sub_1C4773594((uint64_t)&v233, v198, v160, (uint64_t)&v228);
    if (v237)
      v172 = (uint64_t *)(v237 - 24);
    else
      v172 = 0;
    v173 = sub_1C5EBFBC0(v171, v172, 0, 0, (uint64_t)v211, 0, 0, 0);
    v174 = 0;
    v236 = *((_QWORD *)v173 + 5);
    v237 = v173 + 24;
    v175 = (llvm::MDNode *)*((_QWORD *)v173 + 6);
    v228 = v175;
    if (v175)
    {
      llvm::MetadataTracking::track((uint64_t)&v228, (unsigned __int8 *)v175, 2);
      v174 = v228;
    }
    sub_1C4774EF4((uint64_t)&v233, 0, (uint64_t)v174);
    if (v228)
      llvm::MetadataTracking::untrack((uint64_t)&v228, (unsigned __int8 *)v228);
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v236 + 56) + 40) + 272, *v162);
    v177 = v176;
    v178 = (char *)operator new(0x80uLL);
    v179 = v178;
    *((_DWORD *)v178 + 21) = *((_DWORD *)v178 + 21) & 0x38000000 | 2;
    *(_QWORD *)v178 = 0;
    *((_QWORD *)v178 + 2) = 0;
    *((_QWORD *)v178 + 1) = 0;
    *((_QWORD *)v178 + 5) = 0;
    *((_QWORD *)v178 + 6) = 0;
    *((_QWORD *)v178 + 4) = 0;
    v180 = (unint64_t *)(v178 + 32);
    *((_QWORD *)v178 + 8) = **(_QWORD **)*v162 + 1576;
    *((_QWORD *)v178 + 3) = v178 + 64;
    v199 = (llvm::Value *)(v178 + 64);
    *((_QWORD *)v178 + 7) = v178 + 64;
    *((_QWORD *)v178 + 9) = 0;
    v178[80] = 61;
    v178[81] = 0;
    *((_WORD *)v178 + 41) = 0;
    *((_DWORD *)v178 + 21) = 2;
    *(_OWORD *)(v178 + 88) = 0u;
    *(_OWORD *)(v178 + 104) = 0u;
    *((_DWORD *)v178 + 30) = 0;
    *(_QWORD *)v178 = v162;
    v183 = v162[1];
    v182 = v162 + 1;
    v181 = v183;
    *((_QWORD *)v178 + 1) = v183;
    if (v183)
      *(_QWORD *)(v181 + 16) = v178 + 8;
    *((_QWORD *)v178 + 2) = v182;
    *v182 = v178;
    if (*((_QWORD *)v178 + 4))
    {
      **((_QWORD **)v178 + 6) = *((_QWORD *)v178 + 5);
      v197 = *((_QWORD *)v178 + 5);
      if (v197)
        *(_QWORD *)(v197 + 16) = *((_QWORD *)v178 + 6);
    }
    *v180 = v201;
    if (v201)
    {
      v184 = *(_QWORD *)(v201 + 8);
      v202 = (unint64_t **)(v201 + 8);
      *((_QWORD *)v178 + 5) = v184;
      if (v184)
        *(_QWORD *)(v184 + 16) = v178 + 40;
      *((_QWORD *)v178 + 6) = v202;
      *v202 = v180;
    }
    *((_WORD *)v178 + 41) = 2 * (v177 & 0x3F);
    v178[124] = 1;
    v232 = 257;
    (*(void (**)(uint64_t, llvm::Value *, llvm::MDNode **, uint64_t, char *))(*(_QWORD *)v238 + 16))(v238, v199, &v228, v236, v237);
    if (!(_DWORD)v234)
    {
LABEL_364:
      llvm::Instruction::getAAMetadata((uint64_t ***)v204, v225);
      llvm::Instruction::getAAMetadata((uint64_t ***)v67, v224);
      llvm::AAMDNodes::merge(v225, v224, &v228);
      if (v228 || *((_QWORD *)v179 + 14) || (v179[87] & 0x20) != 0)
        llvm::Value::setMetadata(v199, 1, v228);
      if (v229 || *((_QWORD *)v179 + 14) || (v179[87] & 0x20) != 0)
        llvm::Value::setMetadata(v199, 5, v229);
      if (v230 || *((_QWORD *)v179 + 14) || (v179[87] & 0x20) != 0)
        llvm::Value::setMetadata(v199, 7, v230);
      if (v231 || *((_QWORD *)v179 + 14) || (v179[87] & 0x20) != 0)
        llvm::Value::setMetadata(v199, 8, v231);
      v185 = __clz(1 << ((unint64_t)*((unsigned __int16 *)v204 + 9) >> 1)) ^ 0x3F;
      v186 = __clz(1 << ((unint64_t)*(unsigned __int16 *)(v67 + 18) >> 1)) ^ 0x3F;
      if (v186 < v185)
        LOWORD(v185) = v186;
      *((_WORD *)v179 + 41) = *((_WORD *)v179 + 41) & 0xFF81 | (2 * v185);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v67 + 40) + 40, (uint64_t ***)v67);
      v187 = *(_QWORD *)(v67 + 24);
      v188 = *(_QWORD **)(v67 + 32);
      *v188 = v187;
      *(_QWORD *)(v187 + 8) = v188;
      *(_QWORD *)(v67 + 24) = 0;
      *(_QWORD *)(v67 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v67);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v204 + 5) + 40, (uint64_t ***)v204);
      v189 = *((_QWORD *)v204 + 3);
      v190 = (_QWORD *)*((_QWORD *)v204 + 4);
      *v190 = v189;
      *(_QWORD *)(v189 + 8) = v190;
      *((_QWORD *)v204 + 3) = 0;
      *((_QWORD *)v204 + 4) = 0;
      llvm::Value::deleteValue(v204);
      if (v233 != (llvm::BasicBlock *)&v235)
        free(v233);
      v66 = 1;
      goto LABEL_98;
    }
    v191 = (char *)v233;
    v192 = (char *)v233 + 16 * v234;
    v203 = (unsigned __int8 **)(v179 + 112);
    while (2)
    {
      v193 = *(_DWORD *)v191;
      v194 = (unsigned __int8 *)*((_QWORD *)v191 + 1);
      if (v194)
      {
        if (v193)
          goto LABEL_394;
        v225[0] = *((llvm::MDNode **)v191 + 1);
        llvm::MetadataTracking::track((uint64_t)v225, v194, 2);
        v195 = *v203;
LABEL_398:
        if (v195)
          llvm::MetadataTracking::untrack((uint64_t)v203, v195);
        v196 = (unsigned __int8 *)v225[0];
        *v203 = (unsigned __int8 *)v225[0];
        if (v196)
          llvm::MetadataTracking::retrack((uint64_t)v225, v196, (uint64_t)v203);
      }
      else
      {
        v195 = *v203;
        if (*v203 || (v179[87] & 0x20) != 0)
        {
          if (!v193)
          {
            v225[0] = 0;
            goto LABEL_398;
          }
LABEL_394:
          llvm::Value::setMetadata(v199, *(_DWORD *)v191, (llvm::MDNode *)v194);
        }
      }
      v191 += 16;
      if (v191 == v192)
        goto LABEL_364;
      continue;
    }
  }
LABEL_98:
  v26 = (uint64_t)v213;
  v53 = (uint64_t)v207;
  v29 = (uint64_t)v208;
LABEL_99:
  v27 |= v66;
  v68 = v47 + 1;
  while (v68 != v50)
  {
    v70 = *v68++;
    v69 = v70;
    if (v70 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v201 = v69;
      v47 = v68 - 1;
      goto LABEL_91;
    }
  }
LABEL_405:
  if (v215 != v214)
    free(v215);
  if (v220 != v219)
    free(v220);
  return v27 & 1;
}

unsigned __int8 *sub_1C5FA3A0C(unsigned __int8 *result, llvm::DataLayout *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  const llvm::APInt *v6;
  llvm::Type ***v7;
  int v8;
  llvm::ConstantInt *v9;
  unsigned __int8 *v10;
  uint64_t v12;
  unsigned int v13;

  v2 = (uint64_t)result;
  v3 = result[16];
  if (v3 != 16)
    result = 0;
  if (v3 <= 0x14 && result == 0)
  {
    if (*(_BYTE *)(*(_QWORD *)v2 + 8) == 15)
    {
      llvm::DataLayout::getIntPtrType(this, *(llvm::Type **)v2);
      v7 = (llvm::Type ***)v5;
      v8 = *(unsigned __int8 *)(v2 + 16);
      if (v8 == 5)
      {
        if (*(_WORD *)(v2 + 18) == 48)
        {
          result = *(unsigned __int8 **)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
          if (result && result[16] == 16)
          {
            if (*(llvm::Type ****)result != v7)
              return (unsigned __int8 *)llvm::ConstantExpr::getIntegerCast((llvm::ConstantExpr *)result, v7, 0);
            return result;
          }
        }
      }
      else if (v8 == 19)
      {
        v9 = *(llvm::ConstantInt **)v5;
        v13 = *(_DWORD *)(v5 + 8) >> 8;
        if (v13 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v12, 0, 0);
        else
          v12 = 0;
        result = (unsigned __int8 *)llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v12, v6);
        if (v13 >= 0x41)
        {
          if (v12)
          {
            v10 = result;
            MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
            return v10;
          }
        }
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C5FA3B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unsigned __int8 **v22;
  _QWORD *v23;
  unsigned __int8 **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unsigned __int8 **v40;
  _QWORD *v41;
  unsigned __int8 **v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  unsigned __int8 **v49;
  uint64_t v50;

  if (a2 && *(_BYTE *)(a2 + 16) == 31)
  {
    v5 = ((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFFu) - 1;
    v6 = *(unsigned __int8 ***)a3;
    if (v5 > (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)a3) >> 4)
    {
      v7 = *(unsigned __int8 ***)(a3 + 8);
      v8 = (char *)operator new(16 * v5);
      v9 = &v8[((char *)v7 - (char *)v6) & 0xFFFFFFFFFFFFFFF0];
      v10 = v9;
      if (v7 != v6)
      {
        v11 = &v8[((char *)v7 - (char *)v6) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          v10 = v11 - 16;
          *((_OWORD *)v11 - 1) = *((_OWORD *)v7 - 1);
          v7 -= 2;
          v11 -= 16;
        }
        while (v7 != v6);
      }
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v9;
      *(_QWORD *)(a3 + 16) = &v8[16 * v5];
      if (v6)
        operator delete(v6);
    }
    v12 = *(_DWORD *)(a2 + 20);
    v13 = (v12 >> 1) & 0x3FFFFFF;
    v14 = (v13 - 1);
    if (v13 != 1)
    {
      v15 = 0;
      do
      {
        v16 = *(_DWORD *)(a2 + 20);
        if ((v16 & 0x40000000) != 0)
          v17 = *(_QWORD *)(a2 - 8);
        else
          v17 = a2 - 32 * (v16 & 0x7FFFFFF);
        v18 = *(unsigned __int8 **)(v17 + 32 * (2 * v15 + 2));
        v19 = (2 * v15 + 3);
        if (v15 == 4294967294)
          v19 = 1;
        v20 = *(unsigned __int8 **)(v17 + 32 * v19);
        v22 = *(unsigned __int8 ***)(a3 + 8);
        v21 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v22 >= v21)
        {
          v24 = *(unsigned __int8 ***)a3;
          v25 = ((uint64_t)v22 - *(_QWORD *)a3) >> 4;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 60)
            goto LABEL_64;
          v27 = v21 - (_QWORD)v24;
          if (v27 >> 3 > v26)
            v26 = v27 >> 3;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
            v28 = 0xFFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            if (v28 >> 60)
              goto LABEL_65;
            v29 = (char *)operator new(16 * v28);
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[16 * v25];
          *(_QWORD *)v30 = v18;
          *((_QWORD *)v30 + 1) = v20;
          v31 = v30;
          if (v22 != v24)
          {
            do
            {
              *((_OWORD *)v31 - 1) = *((_OWORD *)v22 - 1);
              v31 -= 16;
              v22 -= 2;
            }
            while (v22 != v24);
            v22 = *(unsigned __int8 ***)a3;
          }
          v23 = v30 + 16;
          *(_QWORD *)a3 = v31;
          *(_QWORD *)(a3 + 8) = v30 + 16;
          *(_QWORD *)(a3 + 16) = &v29[16 * v28];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v22 = v18;
          v22[1] = v20;
          v23 = v22 + 2;
        }
        *(_QWORD *)(a3 + 8) = v23;
        ++v15;
      }
      while (v15 != v14);
      v12 = *(_DWORD *)(a2 + 20);
    }
    if ((v12 & 0x40000000) != 0)
      v32 = *(_QWORD *)(a2 - 8);
    else
      v32 = a2 - 32 * (v12 & 0x7FFFFFF);
    v48 = v32 + 32;
  }
  else
  {
    v33 = *(_QWORD *)(a2 - 96);
    v34 = a2 - 32;
    if ((*(_WORD *)(v33 + 18) & 0x3F) == 0x21)
      v35 = -1;
    else
      v35 = 0;
    v36 = *(unsigned __int8 **)(v34 + 32 * v35);
    v37 = sub_1C5FA3A0C(*(unsigned __int8 **)(v33 - 32), *(llvm::DataLayout **)(a1 + 16));
    v38 = v37;
    v40 = *(unsigned __int8 ***)(a3 + 8);
    v39 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v40 >= v39)
    {
      v42 = *(unsigned __int8 ***)a3;
      v43 = ((uint64_t)v40 - *(_QWORD *)a3) >> 4;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60)
LABEL_64:
        abort();
      v45 = v39 - (_QWORD)v42;
      if (v45 >> 3 > v44)
        v44 = v45 >> 3;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
        v46 = 0xFFFFFFFFFFFFFFFLL;
      else
        v46 = v44;
      if (v46)
      {
        if (v46 >> 60)
LABEL_65:
          sub_1C4764EE4();
        v47 = (char *)operator new(16 * v46);
      }
      else
      {
        v47 = 0;
      }
      v49 = (unsigned __int8 **)&v47[16 * v43];
      *v49 = v38;
      v49[1] = v36;
      v41 = v49 + 2;
      if (v40 != v42)
      {
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v40 - 1);
          v49 -= 2;
          v40 -= 2;
        }
        while (v40 != v42);
        v40 = *(unsigned __int8 ***)a3;
      }
      *(_QWORD *)a3 = v49;
      *(_QWORD *)(a3 + 8) = v41;
      *(_QWORD *)(a3 + 16) = &v47[16 * v46];
      if (v40)
        operator delete(v40);
    }
    else
    {
      *v40 = v37;
      v40[1] = v36;
      v41 = v40 + 2;
    }
    *(_QWORD *)(a3 + 8) = v41;
    if ((*(_WORD *)(v33 + 18) & 0x3F) == 0x20)
      v50 = -1;
    else
      v50 = 0;
    v48 = v34 + 32 * v50;
  }
  return *(_QWORD *)v48;
}

uint64_t sub_1C5FA3E60(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2[1];
  v3 = *a2;
  if (*a2 != v2)
  {
    while (*(_QWORD *)(v3 + 8) != result)
    {
      v3 += 16;
      if (v3 == v2)
      {
        v3 = a2[1];
        break;
      }
    }
  }
  v4 = v3 + 16;
  if (v3 != v2 && v4 != v2)
  {
    do
    {
      if (*(_QWORD *)(v4 + 8) != result)
      {
        *(_OWORD *)v3 = *(_OWORD *)v4;
        v3 += 16;
      }
      v4 += 16;
    }
    while (v4 != v2);
    v2 = a2[1];
  }
  if (v3 != v2)
    a2[1] = v3;
  return result;
}

void sub_1C5FA3F18(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void (*v8)(void);
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v2 == 31)
  {
LABEL_3:
    v3 = *(_DWORD *)(a1 + 20);
    if ((v3 & 0x40000000) != 0)
      v4 = *(uint64_t **)(a1 - 8);
    else
      v4 = (uint64_t *)(a1 - 32 * (v3 & 0x7FFFFFF));
    v5 = *v4;
    goto LABEL_11;
  }
  if (!a1 || v2 != 30)
  {
    if (!a1 || v2 != 32)
      goto LABEL_17;
    goto LABEL_3;
  }
  if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) != 3)
  {
LABEL_17:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a1 + 40) + 40, (uint64_t ***)a1);
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD **)(a1 + 32);
    *v10 = v9;
    *(_QWORD *)(v9 + 8) = v10;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)a1);
    return;
  }
  v5 = *(_QWORD *)(a1 - 96);
LABEL_11:
  if (*(unsigned __int8 *)(v5 + 16) <= 0x1Bu)
    goto LABEL_17;
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a1 + 40) + 40, (uint64_t ***)a1);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD **)(a1 + 32);
  *v7 = v6;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)a1);
  v12 = 0;
  llvm::RecursivelyDeleteTriviallyDeadInstructions(v5, 0, 0, v11);
  if (v12 == v11)
  {
    v8 = *(void (**)(void))(v11[0] + 32);
  }
  else
  {
    if (!v12)
      return;
    v8 = *(void (**)(void))(*v12 + 40);
  }
  v8();
}

uint64_t sub_1C5FA408C(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > *a2;
}

_BYTE *sub_1C5FA40A4(_BYTE *result, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD **v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v3 = result;
  if ((result[23] & 0x20) == 0)
    goto LABEL_17;
  v4 = ***(_QWORD ***)result;
  v31 = (uint64_t)result;
  v5 = *(_DWORD *)(v4 + 2496);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 2480);
    v7 = v5 - 1;
    v8 = v7 & ((result >> 4) ^ (result >> 9));
    result = (_BYTE *)(v6 + 40 * v8);
    v9 = *(_QWORD ***)result;
    if (*(_BYTE **)result == v3)
      goto LABEL_12;
    v10 = 0;
    v11 = 1;
    while (v9 != (_QWORD **)-4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == (_QWORD **)-8192;
      if (v12)
        v10 = result;
      v13 = v8 + v11++;
      v8 = v13 & v7;
      result = (_BYTE *)(v6 + 40 * v8);
      v9 = *(_QWORD ***)result;
      if (*(_BYTE **)result == v3)
        goto LABEL_12;
    }
    if (v10)
      v29 = v10;
    else
      v29 = result;
  }
  else
  {
    v29 = 0;
  }
  result = sub_1C541AB24(v4 + 2480, (uint64_t)&v31, &v31, v29);
  v30 = v31;
  *((_QWORD *)result + 3) = 0;
  *((_QWORD *)result + 4) = 0;
  *(_QWORD *)result = v30;
  *((_QWORD *)result + 1) = result + 24;
  *((_QWORD *)result + 2) = 0x100000000;
LABEL_12:
  v14 = *((unsigned int *)result + 4);
  if (!(_DWORD)v14)
  {
LABEL_17:
    v17 = 0;
    goto LABEL_18;
  }
  v15 = (_QWORD *)(*((_QWORD *)result + 1) + 8);
  v16 = 16 * v14;
  while (*((_DWORD *)v15 - 2) != 2)
  {
    v17 = 0;
    v15 += 2;
    v16 -= 16;
    if (!v16)
      goto LABEL_18;
  }
  v17 = *v15;
LABEL_18:
  v20 = *(_DWORD *)(v17 + 8);
  v19 = (unsigned int *)(v17 + 8);
  v18 = v20;
  if (v20 >= 2)
  {
    v21 = v18 - 1;
    v22 = v19;
    do
    {
      v23 = *(_QWORD *)(*(_QWORD *)&v22[-2 * *v19] + 128);
      v24 = (_QWORD *)(v23 + 24);
      if (*(_DWORD *)(v23 + 32) >= 0x41u)
        v24 = (_QWORD *)*v24;
      v25 = (_QWORD *)*v24;
      v26 = *(unsigned int *)(a2 + 8);
      if (v26 >= *(unsigned int *)(a2 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v26 + 1, 8);
        v26 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v26) = v25;
      ++*(_DWORD *)(a2 + 8);
      v22 += 2;
      --v21;
    }
    while (v21);
  }
  if (v3 && v3[16] == 30 && (*(_WORD *)(*((_QWORD *)v3 - 12) + 18) & 0x3F) == 0x20)
  {
    v27 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8);
    v28 = **(_QWORD **)a2;
    **(_QWORD **)a2 = *(_QWORD *)(v27 - 8);
    *(_QWORD *)(v27 - 8) = v28;
  }
  return result;
}

uint64_t *sub_1C5FA42B8(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;

  v3 = result;
  v5 = (uint64_t **)(result + 1);
  v4 = (uint64_t *)result[1];
  if (v4)
  {
    v6 = *(unsigned int *)(a2 + 32);
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = v4[4];
        if (v6 <= 0x40)
          break;
        v9 = *(_QWORD *)(a2 + 24);
        v10 = *(_QWORD *)(v8 + 24);
        v11 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
        while (v11)
        {
          v12 = *(_QWORD *)(v9 + v11 - 8);
          v13 = *(_QWORD *)(v10 + v11 - 8);
          v11 -= 8;
          if (v12 != v13)
          {
            if (v12 <= v13)
              goto LABEL_5;
            break;
          }
        }
LABEL_11:
        v14 = *(unsigned int *)(v8 + 32);
        if (v14 > 0x40)
        {
          v15 = v9 - 8;
          v16 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
          v17 = v10 - 8;
          while (v16)
          {
            v18 = *(_QWORD *)(v17 + v16);
            v19 = *(_QWORD *)(v15 + v16);
            v16 -= 8;
            if (v18 != v19)
            {
              if (v18 <= v19)
                goto LABEL_13;
              return result;
            }
          }
          return result;
        }
        if (v10 >= v9)
          return result;
LABEL_13:
        v4 = v7[1];
        if (!v4)
        {
          v5 = v7 + 1;
          goto LABEL_21;
        }
      }
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_QWORD *)(v8 + 24);
      if (v9 >= v10)
        goto LABEL_11;
LABEL_5:
      v4 = *v7;
      v5 = v7;
      if (!*v7)
        goto LABEL_21;
    }
  }
  v7 = (uint64_t **)(result + 1);
LABEL_21:
  v20 = (uint64_t *)operator new(0x28uLL);
  v20[4] = a2;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = (uint64_t)v7;
  *v5 = v20;
  v21 = *(_QWORD *)*v3;
  if (v21)
  {
    *v3 = v21;
    v22 = *v5;
  }
  else
  {
    v22 = v20;
  }
  result = sub_1C4768E74((uint64_t *)v3[1], v22);
  ++v3[2];
  return result;
}

uint64_t sub_1C5FA4404(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;

  v12 = *a2;
  v13 = 0;
  sub_1C5FA458C((uint64_t)&v10, a1, &v12, &v13);
  v4 = v10;
  if (v11)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 144);
    if (v6 >= *(_DWORD *)(a1 + 148))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 136, a1 + 152, v6 + 1, 16);
      LODWORD(v6) = *(_DWORD *)(a1 + 144);
    }
    v7 = (_QWORD *)(*(_QWORD *)(a1 + 136) + 16 * v6);
    *v7 = v5;
    v7[1] = 0;
    v8 = *(_DWORD *)(a1 + 144);
    *(_DWORD *)(a1 + 144) = v8 + 1;
    *(_DWORD *)(v4 + 8) = v8;
  }
  else
  {
    v8 = *(_DWORD *)(v10 + 8);
  }
  return *(_QWORD *)(a1 + 136) + 16 * v8 + 8;
}

uint64_t sub_1C5FA44C0(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  if (!result)
    return result;
  v2 = (_QWORD *)result;
  v3 = *(unsigned int *)(a2 + 32);
  result = 1;
  while (1)
  {
    v4 = v2[4];
    if (v3 > 0x40)
      break;
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(v4 + 24);
    if (v5 >= v6)
      goto LABEL_5;
LABEL_8:
    v2 = (_QWORD *)*v2;
    if (!v2)
      return 0;
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(v4 + 24);
  v8 = ((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8;
  while (v8)
  {
    v9 = *(_QWORD *)(v5 + v8 - 8);
    v10 = *(_QWORD *)(v6 + v8 - 8);
    v8 -= 8;
    if (v9 != v10)
    {
      if (v9 <= v10)
        goto LABEL_8;
      break;
    }
  }
LABEL_5:
  v7 = *(unsigned int *)(v4 + 32);
  if (v7 <= 0x40)
  {
    if (v6 >= v5)
      return result;
LABEL_7:
    ++v2;
    goto LABEL_8;
  }
  v11 = v5 - 8;
  v12 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
  v13 = v6 - 8;
  while (v12)
  {
    v14 = *(_QWORD *)(v13 + v12);
    v15 = *(_QWORD *)(v11 + v12);
    v12 -= 8;
    if (v14 != v15)
    {
      if (v14 <= v15)
        goto LABEL_7;
      return result;
    }
  }
  return result;
}

uint64_t sub_1C5FA458C(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_1C483DE40(a2, a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 8;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(unsigned int *)(a2 + 16);
    }
    v13 = 0;
    v12 = v14 + 16 * v15;
  }
  else
  {
    result = (uint64_t)sub_1C483DEE8((_DWORD *)a2, (uint64_t)a3, a3, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 8;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned int *)(a2 + 16);
    }
    v12 = v10 + 16 * v11;
    v13 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v13;
  return result;
}

uint64_t sub_1C5FA4658(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v2 = *a1;
  v3 = *a2;
  if (*a1 == *a2)
    return 0;
  v4 = *(unsigned int *)(v2 + 32);
  if (v4 > 0x40)
  {
    v6 = *(_QWORD *)(v2 + 24);
    v7 = *(_QWORD *)(v3 + 24) - 8;
    v8 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
    v9 = v6 - 8;
    do
    {
      if (!v8)
        return 0xFFFFFFFFLL;
      v10 = *(_QWORD *)(v9 + v8);
      v11 = *(_QWORD *)(v7 + v8);
      v8 -= 8;
    }
    while (v10 == v11);
    if (v10 > v11)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  else if (*(_QWORD *)(v2 + 24) < *(_QWORD *)(v3 + 24))
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1C5FA46DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4 != a1 + 40)
  {
    v5 = v4 - 24;
    if (!v4)
      v5 = 0;
    v6 = *(unsigned __int8 *)(v5 + 16);
    v7 = 1;
    if (v6 == 30)
    {
      if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3)
        v8 = 2;
      else
        v8 = 1;
      goto LABEL_8;
    }
    v8 = 2;
    switch(*(_BYTE *)(v5 + 16))
    {
      case 0x1D:
      case 0x22:
      case 0x23:
        return v7;
      case 0x1E:
        __break(1u);
        goto LABEL_50;
      case 0x1F:
        v8 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
      case 0x26:
LABEL_50:
        v8 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x21:
        goto LABEL_8;
      case 0x24:
        v8 = *(_WORD *)(v5 + 18) & 1;
        break;
      case 0x25:
        v8 = 1;
        goto LABEL_8;
      case 0x27:
        v8 = *(_DWORD *)(v5 + 80) + 1;
        break;
      default:
        return 1;
    }
    if (v8)
    {
LABEL_8:
      v9 = 0;
      while (1)
      {
        if (v6 != 30)
          __asm { BR              X5 }
        v10 = *(_QWORD *)(v5 - 32 - 32 * v9);
        if (*(_QWORD *)(v10 + 40) != v10 + 40)
          break;
LABEL_41:
        if (++v9 == v8)
          return 1;
      }
      for (i = *(_QWORD *)(v10 + 48); ; i = *(_QWORD *)(v12 + 32))
      {
        v12 = i - 24;
        if (i)
          v13 = i - 24;
        else
          v13 = 0;
        if (!i || *(_BYTE *)(v13 + 16) != 83)
          goto LABEL_41;
        v14 = *(_DWORD *)(i - 4);
        v15 = v14 & 0x7FFFFFF;
        if ((v14 & 0x7FFFFFF) != 0)
        {
          v16 = 0;
          while (1)
          {
            v17 = v12 - 32 * v15;
            if ((v14 & 0x40000000) != 0)
              v17 = *(_QWORD *)(v12 - 8);
            if (*(_QWORD *)(v17 + 32 * *(unsigned int *)(v12 + 60) + 8 * v16) == a1)
              break;
            if (v15 == ++v16)
              goto LABEL_23;
          }
        }
        else
        {
LABEL_23:
          LODWORD(v16) = -1;
        }
        v18 = v15;
        if ((v14 & 0x40000000) != 0)
        {
          v19 = *(_QWORD *)(v12 - 8);
          if (!(_DWORD)v15)
            goto LABEL_33;
        }
        else
        {
          v19 = v12 - 32 * v15;
          if (!(_DWORD)v15)
          {
LABEL_33:
            LODWORD(v20) = -1;
            goto LABEL_34;
          }
        }
        v20 = 0;
        while (1)
        {
          v21 = v12 - 32 * v18;
          if ((v14 & 0x40000000) != 0)
            v21 = *(_QWORD *)(v12 - 8);
          if (*(_QWORD *)(v21 + 32 * *(unsigned int *)(v12 + 60) + 8 * v20) == a2)
            break;
          if (v18 == ++v20)
            goto LABEL_33;
        }
LABEL_34:
        if ((v14 & 0x40000000) != 0)
          v22 = *(_QWORD *)(v12 - 8);
        else
          v22 = v12 - 32 * v18;
        v23 = *(_QWORD *)(v19 + 32 * v16);
        v24 = *(_QWORD *)(v22 + 32 * v20);
        if (v23 != v24)
        {
          v7 = 0;
          if (v23 == a3 || v24 == a4)
            return v7;
        }
      }
    }
  }
  return 1;
}

_QWORD *sub_1C5FA49B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *result;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _QWORD v37[3];
  _QWORD *v38;
  __int128 v39;
  _BYTE v40[24];
  _BYTE *v41;
  __int128 v42;
  _BYTE v43[24];
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  _QWORD *v48;
  __int128 v49;
  _BYTE v50[24];
  _BYTE *v51;
  __int128 v52;
  _BYTE v53[24];
  _BYTE *v54;
  __int128 v55;
  _QWORD v56[3];
  _QWORD *v57;
  __int128 v58;
  _QWORD v59[3];
  _QWORD *v60;
  __int128 v61;
  _QWORD v62[3];
  _QWORD *v63;
  __int128 v64;
  _QWORD v65[3];
  _QWORD *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v4 = a2[6];
  v5 = a2[7];
  v45 = v4;
  v46 = v5;
  v6 = v47;
  v7 = (uint64_t *)a2[11];
  if (!v7)
  {
    v48 = 0;
    *(_QWORD *)&v61 = v4;
    *((_QWORD *)&v61 + 1) = v5;
    v9 = v62;
LABEL_80:
    v63 = 0;
    goto LABEL_7;
  }
  if (v7 == a2 + 8)
  {
    v48 = v47;
    (*(void (**)(uint64_t *, _QWORD *))(*v7 + 24))(v7, v47);
    v4 = v45;
    v5 = v46;
    v8 = v48;
  }
  else
  {
    v8 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
    v48 = v8;
  }
  *(_QWORD *)&v61 = v4;
  *((_QWORD *)&v61 + 1) = v5;
  v9 = v62;
  if (!v8)
    goto LABEL_80;
  if (v8 == v47)
  {
    v63 = v62;
    (*(void (**)(_QWORD *, _QWORD *))(v47[0] + 24))(v47, v62);
  }
  else
  {
    v63 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
  }
LABEL_7:
  sub_1C5FA5154(&v49, &v61);
  if (v63 == v62)
  {
    v10 = 4;
  }
  else
  {
    if (!v63)
      goto LABEL_11;
    v10 = 5;
    v9 = v63;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
LABEL_11:
  v11 = *a2;
  v12 = a2[1];
  *(_QWORD *)&v36 = *a2;
  *((_QWORD *)&v36 + 1) = v12;
  v13 = v37;
  v14 = (uint64_t *)a2[5];
  if (!v14)
  {
    v38 = 0;
    *(_QWORD *)&v61 = v11;
    *((_QWORD *)&v61 + 1) = v12;
    v16 = v62;
LABEL_83:
    v63 = 0;
    goto LABEL_17;
  }
  if (v14 == a2 + 2)
  {
    v38 = v37;
    (*(void (**)(uint64_t *, _QWORD *))(*v14 + 24))(v14, v37);
    v15 = v38;
  }
  else
  {
    v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v14 + 16))(v14);
    v38 = v15;
  }
  v61 = v36;
  v16 = v62;
  if (!v15)
    goto LABEL_83;
  if (v15 == v37)
  {
    v63 = v62;
    (*(void (**)(_QWORD *, _QWORD *))(v37[0] + 24))(v37, v62);
  }
  else
  {
    v63 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
  }
LABEL_17:
  sub_1C5FA5154(&v39, &v61);
  if (v63 == v62)
  {
    v17 = 4;
  }
  else
  {
    if (!v63)
      goto LABEL_21;
    v17 = 5;
    v16 = v63;
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v17))(v16);
LABEL_21:
  v61 = v49;
  v18 = v62;
  if (v51)
  {
    if (v51 == v50)
    {
      v63 = v62;
      (*(void (**)(void))(*(_QWORD *)v51 + 24))();
    }
    else
    {
      v63 = v51;
      v51 = 0;
    }
  }
  else
  {
    v63 = 0;
  }
  v64 = v52;
  v19 = v65;
  if (v54)
  {
    if (v54 == v53)
    {
      v66 = v65;
      (*(void (**)(void))(*(_QWORD *)v54 + 24))();
    }
    else
    {
      v66 = v54;
      v54 = 0;
    }
  }
  else
  {
    v66 = 0;
  }
  v55 = v39;
  v20 = v56;
  if (v41)
  {
    if (v41 == v40)
    {
      v57 = v56;
      (*(void (**)(void))(*(_QWORD *)v41 + 24))();
    }
    else
    {
      v57 = v41;
      v41 = 0;
    }
  }
  else
  {
    v57 = 0;
  }
  v58 = v42;
  v21 = v59;
  if (v44)
  {
    if (v44 == v43)
    {
      v60 = v59;
      (*(void (**)(void))(*(_QWORD *)v44 + 24))();
    }
    else
    {
      v60 = v44;
      v44 = 0;
    }
  }
  else
  {
    v60 = 0;
  }
  *(_OWORD *)a1 = v61;
  if (v63)
  {
    if (v63 == v62)
    {
      *(_QWORD *)(a1 + 40) = a1 + 16;
      (*(void (**)(_QWORD *))(v62[0] + 24))(v62);
    }
    else
    {
      *(_QWORD *)(a1 + 40) = v63;
      v63 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 48) = v64;
  if (v66)
  {
    if (v66 == v65)
    {
      *(_QWORD *)(a1 + 88) = a1 + 64;
      (*(void (**)(_QWORD *))(v65[0] + 24))(v65);
    }
    else
    {
      *(_QWORD *)(a1 + 88) = v66;
      v66 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 96) = v55;
  if (v57)
  {
    if (v57 == v56)
    {
      *(_QWORD *)(a1 + 136) = a1 + 112;
      (*(void (**)(_QWORD *))(v56[0] + 24))(v56);
    }
    else
    {
      *(_QWORD *)(a1 + 136) = v57;
      v57 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 144) = v58;
  if (v60)
  {
    if (v60 == v59)
    {
      *(_QWORD *)(a1 + 184) = a1 + 160;
      (*(void (**)(_QWORD *))(v59[0] + 24))(v59);
      if (v60 == v59)
      {
        v22 = 4;
LABEL_46:
        (*(void (**)(_QWORD *))(*v21 + 8 * v22))(v21);
        goto LABEL_47;
      }
      if (v60)
      {
        v22 = 5;
        v21 = v60;
        goto LABEL_46;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 184) = v60;
      v60 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 184) = 0;
  }
LABEL_47:
  if (v57 == v56)
  {
    v23 = 4;
LABEL_49:
    (*(void (**)(_QWORD *))(*v20 + 8 * v23))(v20);
    goto LABEL_50;
  }
  if (v57)
  {
    v23 = 5;
    v20 = v57;
    goto LABEL_49;
  }
LABEL_50:
  if (v66 == v65)
  {
    v24 = 4;
LABEL_52:
    (*(void (**)(_QWORD *))(*v19 + 8 * v24))(v19);
    goto LABEL_53;
  }
  if (v66)
  {
    v24 = 5;
    v19 = v66;
    goto LABEL_52;
  }
LABEL_53:
  if (v63 == v62)
  {
    v25 = 4;
LABEL_55:
    (*(void (**)(_QWORD *))(*v18 + 8 * v25))(v18);
    goto LABEL_56;
  }
  if (v63)
  {
    v25 = 5;
    v18 = v63;
    goto LABEL_55;
  }
LABEL_56:
  v26 = v44;
  if (v44 == v43)
  {
    v27 = 4;
    v26 = v43;
LABEL_58:
    (*(void (**)(void))(*v26 + 8 * v27))();
    goto LABEL_59;
  }
  if (v44)
  {
    v27 = 5;
    goto LABEL_58;
  }
LABEL_59:
  v28 = v41;
  if (v41 == v40)
  {
    v29 = 4;
    v28 = v40;
LABEL_61:
    (*(void (**)(void))(*v28 + 8 * v29))();
    goto LABEL_62;
  }
  if (v41)
  {
    v29 = 5;
    goto LABEL_61;
  }
LABEL_62:
  if (v38 == v37)
  {
    v30 = 4;
LABEL_64:
    (*(void (**)(_QWORD *))(*v13 + 8 * v30))(v13);
    goto LABEL_65;
  }
  if (v38)
  {
    v30 = 5;
    v13 = v38;
    goto LABEL_64;
  }
LABEL_65:
  v31 = v54;
  if (v54 == v53)
  {
    v32 = 4;
    v31 = v53;
LABEL_67:
    (*(void (**)(void))(*v31 + 8 * v32))();
    goto LABEL_68;
  }
  if (v54)
  {
    v32 = 5;
    goto LABEL_67;
  }
LABEL_68:
  result = v51;
  if (v51 == v50)
  {
    v34 = 4;
    result = v50;
LABEL_70:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v34))();
    goto LABEL_71;
  }
  if (v51)
  {
    v34 = 5;
    goto LABEL_70;
  }
LABEL_71:
  if (v48 == v47)
  {
    v35 = 4;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8 * v35))(v6);
  }
  if (v48)
  {
    v35 = 5;
    v6 = v48;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8 * v35))(v6);
  }
  return result;
}

uint64_t sub_1C5FA503C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a1 + 48);
  v2 = v7;
  v3 = *(_QWORD *)(a1 + 88);
  if (v3)
  {
    if (v3 == a1 + 64)
    {
      v8 = v7;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 24))(v3, v7);
    }
    else
    {
      v8 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    v8 = 0;
  }
  do
  {
    *(_QWORD *)&v6 = *(_QWORD *)v6;
    if (!v8)
      sub_1C485C2F0();
  }
  while (!(*(unsigned int (**)(void))(*(_QWORD *)v8 + 48))());
  if (v8 == v7)
  {
    v4 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_13;
    v4 = 5;
    v2 = v8;
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v4))(v2);
LABEL_13:
  if ((_QWORD)v6)
    return v6 - 24;
  else
    return 0;
}

_QWORD *sub_1C5FA5154(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = (_QWORD *)a2[5];
  if (v4)
  {
    if (v4 == a2 + 2)
    {
      a1[5] = a1 + 2;
      (*(void (**)(_QWORD))(*(_QWORD *)a2[5] + 24))(a2[5]);
    }
    else
    {
      a1[5] = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    a1[5] = 0;
  }
  a1[6] = *a2;
  a1[7] = a2[1];
  v5 = (_QWORD *)a2[5];
  if (v5)
  {
    if (v5 == a2 + 2)
    {
      a1[11] = a1 + 8;
      (*(void (**)(_QWORD))(*(_QWORD *)a2[5] + 24))(a2[5]);
    }
    else
    {
      a1[11] = (*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    a1[11] = 0;
  }
  return a1;
}

uint64_t sub_1C5FA5228(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;

  v12 = *a2;
  v13 = 0;
  result = sub_1C5FA458C((uint64_t)&v10, a1, &v12, &v13);
  if (v11)
  {
    v5 = v10;
    v6 = *(_OWORD *)a2;
    v7 = *(unsigned int *)(a1 + 144);
    if (v7 >= *(_DWORD *)(a1 + 148))
    {
      v9 = *(_OWORD *)a2;
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 136, a1 + 152, v7 + 1, 16);
      v6 = v9;
      LODWORD(v7) = *(_DWORD *)(a1 + 144);
    }
    *(_OWORD *)(*(_QWORD *)(a1 + 136) + 16 * v7) = v6;
    v8 = *(_DWORD *)(a1 + 144);
    *(_DWORD *)(a1 + 144) = v8 + 1;
    *(_DWORD *)(v5 + 8) = v8;
  }
  return result;
}

uint64_t sub_1C5FA52D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[3];

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v11[2] = *MEMORY[0x1E0C80C00];
  v11[0] = a1;
  v11[1] = a2;
  do
  {
    v5 = v3;
    v6 = v11[v4];
    if (v6)
    {
      v7 = v6 + 40;
      v8 = *(_QWORD *)(v6 + 48);
      if (v8 != v7)
      {
        while (1)
        {
          result = v8 - 24;
          if (v8)
            v10 = v8 - 24;
          else
            v10 = 0;
          if (v8 && *(_BYTE *)(v10 + 16) == 61)
          {
            if (v2)
              return 0;
          }
          else
          {
            result = v2;
          }
          v8 = *(_QWORD *)(v8 + 8);
          v2 = result;
          if (v8 == v7)
            goto LABEL_15;
        }
      }
    }
    result = v2;
LABEL_15:
    v3 = 1;
    v2 = result;
    v4 = 1;
  }
  while ((v5 & 1) == 0);
  return result;
}

uint64_t sub_1C5FA53A0(_QWORD **a1, llvm::BasicBlock *this, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  int64_t v8;
  uint64_t v9;
  int v10;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  _BOOL4 v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE *v46;
  __int128 v47;
  _BYTE v48[24];
  _BYTE *v49;
  __int128 v50;
  _BYTE v51[24];
  _BYTE *v52;
  __int128 v53;
  _BYTE v54[24];
  _BYTE *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD v58[6];

  v58[4] = *MEMORY[0x1E0C80C00];
  if (!this)
    return 1;
  v43 = dword_1ED8284B8;
  llvm::BasicBlock::instructionsWithoutDebug(this, 0, (uint64_t)&v50);
  v47 = v50;
  if (v52)
  {
    if (v52 == v51)
    {
      v49 = v48;
      (*(void (**)(void))(*(_QWORD *)v52 + 24))();
    }
    else
    {
      v49 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v52 + 16))();
    }
  }
  else
  {
    v49 = 0;
  }
  v44 = v53;
  v5 = v45;
  if (v55)
  {
    if (v55 == v54)
    {
      v46 = v45;
      (*(void (**)(void))(*(_QWORD *)v55 + 24))();
    }
    else
    {
      v46 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v55 + 16))();
    }
  }
  else
  {
    v46 = 0;
  }
  v6 = v47;
  if ((_QWORD)v47 == v44)
  {
LABEL_55:
    if (v46 == v45)
    {
      v29 = 4;
      v28 = v48;
    }
    else
    {
      v28 = v48;
      if (!v46)
        goto LABEL_60;
      v29 = 5;
      v5 = v46;
    }
    (*(void (**)(_QWORD *))(*v5 + 8 * v29))(v5);
LABEL_60:
    if (v49 == v48)
    {
      v30 = 4;
    }
    else
    {
      if (!v49)
        goto LABEL_65;
      v30 = 5;
      v28 = v49;
    }
    (*(void (**)(_QWORD *))(*v28 + 8 * v30))(v28);
LABEL_65:
    v31 = v55;
    if (v55 == v54)
    {
      v32 = 4;
      v31 = v54;
    }
    else
    {
      if (!v55)
      {
LABEL_68:
        v33 = v52;
        if (v52 == v51)
        {
          v34 = 4;
          v33 = v51;
        }
        else
        {
          if (!v52)
            return 1;
          v34 = 5;
        }
        (*(void (**)(void))(*v33 + 8 * v34))();
        return 1;
      }
      v32 = 5;
    }
    (*(void (**)(void))(*v31 + 8 * v32))();
    goto LABEL_68;
  }
  v7 = 0;
  v8 = 0;
  while (1)
  {
    if (v6)
      v9 = v6 - 24;
    else
      v9 = 0;
    v10 = *(unsigned __int8 *)(v9 + 16);
    if ((v10 - 29) < 0xB)
      goto LABEL_47;
    if (v6)
    {
      if (v10 == 61 && a3 != 0)
        goto LABEL_47;
    }
    if (v10 != 62 && (v10 - 41) > 0x11)
      break;
    v13 = *(_DWORD *)(v9 + 20);
    if ((v13 & 0x40000000) != 0)
    {
      v15 = *(uint64_t **)(v9 - 8);
      v14 = v13 & 0x7FFFFFF;
    }
    else
    {
      v14 = v13 & 0x7FFFFFF;
      v15 = (uint64_t *)(v9 - 32 * v14);
    }
    v16 = *a1;
    v56 = v58;
    v57 = 0x400000000;
    if (v14 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v14, 8);
      v17 = v57;
      v19 = v56;
      v18 = v57;
    }
    else
    {
      v17 = 0;
      if (!v14)
      {
        v23 = v58;
        goto LABEL_37;
      }
      v18 = 0;
      v19 = v58;
    }
    v20 = 32 * v14;
    v21 = &v19[v18];
    do
    {
      v22 = *v15;
      v15 += 4;
      *v21++ = v22;
      v20 -= 32;
    }
    while (v20);
    v23 = v56;
LABEL_37:
    LODWORD(v57) = v17 + v14;
    v24 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)*v16 + 72))(*v16, v9, v23);
    v26 = v25;
    if (v56 != v58)
      free(v56);
    if (v26 == 1)
      v7 = 1;
    if (__OFADD__(v8, v24))
      v8 = ((v8 + v24) >> 63) ^ 0x8000000000000000;
    else
      v8 += v24;
    v27 = v7 < 1;
    if (!v7)
      v27 = v8 <= v43;
    if (!v27)
      break;
LABEL_47:
    while (1)
    {
      v6 = *(_QWORD *)(v47 + 8);
      *(_QWORD *)&v47 = v6;
      if (v6 == *((_QWORD *)&v47 + 1))
        break;
      if (!v49)
        sub_1C485C2F0();
      if ((*(unsigned int (**)(void))(*(_QWORD *)v49 + 48))())
      {
        v6 = v47;
        break;
      }
    }
    if (v6 == v44)
      goto LABEL_55;
  }
  if (v46 == v45)
  {
    v37 = 4;
    v36 = v48;
LABEL_76:
    (*(void (**)(_QWORD *))(*v5 + 8 * v37))(v5);
  }
  else
  {
    v36 = v48;
    if (v46)
    {
      v37 = 5;
      v5 = v46;
      goto LABEL_76;
    }
  }
  if (v49 == v48)
  {
    v38 = 4;
LABEL_81:
    (*(void (**)(_QWORD *))(*v36 + 8 * v38))(v36);
  }
  else if (v49)
  {
    v38 = 5;
    v36 = v49;
    goto LABEL_81;
  }
  v39 = v55;
  if (v55 == v54)
  {
    v40 = 4;
    v39 = v54;
    goto LABEL_84;
  }
  if (v55)
  {
    v40 = 5;
LABEL_84:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  v41 = v52;
  if (v52 == v51)
  {
    v42 = 4;
    v41 = v51;
    goto LABEL_87;
  }
  if (v52)
  {
    v42 = 5;
LABEL_87:
    (*(void (**)(void))(*v41 + 8 * v42))();
  }
  return 0;
}

uint64_t *sub_1C5FA5850(uint64_t a1, llvm::BasicBlock *this, llvm::Type *a3)
{
  uint64_t SingleSuccessor;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t i;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  llvm::BasicBlock *v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  llvm::UndefValue *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  llvm::BasicBlock *v45;
  llvm::UndefValue *v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  llvm::ValueSymbolTable *v54;
  const char *v55;
  __int16 v56;

  SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(this);
  v7 = SingleSuccessor;
  v8 = *(uint64_t **)(SingleSuccessor + 48);
  v9 = v8 - 3;
  v10 = v8 == 0;
  if (v8)
    v11 = v8 - 3;
  else
    v11 = 0;
  if (*((_BYTE *)v11 + 16) == 83)
  {
    v12 = *(_QWORD *)(SingleSuccessor + 48);
    do
    {
      v13 = *((_DWORD *)v9 + 5);
      v14 = v13 & 0x7FFFFFF;
      if ((v13 & 0x7FFFFFF) != 0)
      {
        v15 = 0;
        while (1)
        {
          v16 = &v9[-4 * v14];
          if ((v13 & 0x40000000) != 0)
            v16 = (uint64_t *)*(v9 - 1);
          if ((llvm::BasicBlock *)v16[4 * *((unsigned int *)v9 + 15) + v15] == this)
            break;
          if (v14 == ++v15)
            goto LABEL_12;
        }
      }
      else
      {
LABEL_12:
        LODWORD(v15) = -1;
      }
      if ((v13 & 0x40000000) != 0)
        v17 = (uint64_t *)*(v9 - 1);
      else
        v17 = &v9[-4 * v14];
      if (v17[4 * v15] == a1)
      {
        if (!a3)
        {
          if (v10)
            goto LABEL_87;
          return v9;
        }
        for (i = *(_QWORD *)(SingleSuccessor + 8); i; i = *(_QWORD *)(i + 8))
        {
          v19 = *(_QWORD *)(i + 24);
          v20 = *(unsigned __int8 *)(v19 + 16);
          if (v19)
            v21 = v20 >= 0x1C;
          else
            v21 = 0;
          if (v21 && v20 - 29 < 0xB)
            break;
        }
        v23 = *(llvm::BasicBlock **)(*(_QWORD *)(i + 24) + 40);
        if (v23 == this)
        {
          while (1)
          {
            i = *(_QWORD *)(i + 8);
            if (!i)
              break;
            v24 = *(_QWORD *)(i + 24);
            v25 = *(unsigned __int8 *)(v24 + 16);
            if (v24)
              v26 = v25 >= 0x1C;
            else
              v26 = 0;
            if (v26 && v25 - 29 <= 0xA)
              goto LABEL_38;
          }
          v24 = MEMORY[0x18];
LABEL_38:
          v23 = *(llvm::BasicBlock **)(v24 + 40);
        }
        if ((_DWORD)v14)
        {
          v28 = 0;
          while (1)
          {
            v29 = &v9[-4 * v14];
            if ((v13 & 0x40000000) != 0)
              v29 = (uint64_t *)*(v9 - 1);
            if ((llvm::BasicBlock *)v29[4 * *((unsigned int *)v9 + 15) + v28] == v23)
              break;
            if (v14 == ++v28)
              goto LABEL_45;
          }
        }
        else
        {
LABEL_45:
          LODWORD(v28) = -1;
        }
        if ((v13 & 0x40000000) != 0)
          v30 = (uint64_t *)*(v9 - 1);
        else
          v30 = &v9[-4 * v14];
        if ((llvm::Type *)v30[4 * v28] == a3)
          return v9;
      }
      v12 = *(_QWORD *)(v12 + 8);
      v9 = (uint64_t *)(v12 - 24);
      v10 = v12 == 0;
      if (v12)
        v31 = v12 - 24;
      else
        v31 = 0;
    }
    while (*(_BYTE *)(v31 + 16) == 83);
  }
  if (a3)
  {
    v32 = 0;
  }
  else
  {
LABEL_87:
    if (*(unsigned __int8 *)(a1 + 16) < 0x1Cu || *(llvm::BasicBlock **)(a1 + 40) != this)
      return (uint64_t *)a1;
    v32 = 1;
  }
  v33 = *(llvm::UndefValue **)a1;
  v55 = "simplifycfg.merge";
  v56 = 259;
  v34 = (char *)operator new(0x48uLL);
  v35 = v34;
  *((_QWORD *)v34 + 1) = v33;
  v9 = (uint64_t *)(v34 + 8);
  *(_QWORD *)v34 = 0;
  *((_QWORD *)v34 + 2) = 0;
  *((_QWORD *)v34 + 3) = 0x4000000000000053;
  *((_OWORD *)v34 + 2) = 0u;
  v36 = v34 + 32;
  *((_OWORD *)v34 + 3) = 0u;
  *((_DWORD *)v34 + 16) = 0;
  if (v8)
  {
    v51 = v8[2];
    *((_QWORD *)v34 + 6) = v51;
    *(_WORD *)(v51 + 18) &= ~0x8000u;
    if ((v34[31] & 0x10) != 0)
    {
      v53 = *(_QWORD *)(v51 + 56);
      if (v53)
      {
        v54 = *(llvm::ValueSymbolTable **)(v53 + 104);
        if (v54)
          llvm::ValueSymbolTable::reinsertValue(v54, (llvm::Value *)v9);
      }
    }
    v52 = *v8;
    *((_QWORD *)v35 + 4) = *v8;
    *((_QWORD *)v35 + 5) = v8;
    *(_QWORD *)(v52 + 8) = v36;
    *v8 = (uint64_t)v36;
  }
  *((_DWORD *)v35 + 17) = 2;
  llvm::Value::setName((uint64_t ***)v9, (uint64_t)&v55);
  v37 = *((unsigned int *)v35 + 17);
  v38 = operator new(40 * v37);
  *(_QWORD *)v35 = v38;
  if ((_DWORD)v37)
  {
    v39 = &v38[4 * v37];
    do
    {
      *v38 = 0;
      v38[1] = 0;
      v38[2] = 0;
      v38[3] = v9;
      v38 += 4;
    }
    while (v38 != v39);
  }
  sub_1C477667C((llvm::PHINode *)v9, a1, (uint64_t)this);
  v40 = *(_QWORD *)(v7 + 8);
  if (v40)
  {
    while (1)
    {
      v41 = *(_QWORD *)(v40 + 24);
      v42 = *(unsigned __int8 *)(v41 + 16);
      v43 = v41 && v42 >= 0x1C;
      if (v43 && v42 - 29 <= 0xA)
        break;
      v40 = *(_QWORD *)(v40 + 8);
      if (!v40)
        return v9;
    }
LABEL_73:
    v45 = *(llvm::BasicBlock **)(v41 + 40);
    if (v45 != this)
    {
      v46 = a3;
      if (v32)
        v46 = llvm::UndefValue::get(*(llvm::UndefValue **)a1, a3);
      sub_1C477667C((llvm::PHINode *)v9, (uint64_t)v46, (uint64_t)v45);
    }
    while (1)
    {
      v40 = *(_QWORD *)(v40 + 8);
      if (!v40)
        break;
      v41 = *(_QWORD *)(v40 + 24);
      v47 = *(unsigned __int8 *)(v41 + 16);
      if (v41)
        v48 = v47 >= 0x1C;
      else
        v48 = 0;
      if (v48 && v47 - 29 < 0xB)
        goto LABEL_73;
    }
  }
  return v9;
}

uint64_t sub_1C5FA5BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  while (a1 != a2)
  {
    v2 = a1 - 24;
    if (!a1)
      v2 = 0;
    if (*(_BYTE *)(v2 + 16) != 84)
      return 0;
    v3 = *(_QWORD *)(v2 - 32);
    if (!v3)
      return 0;
    if (*(_BYTE *)(v3 + 16))
      return 0;
    if (*(_QWORD *)(v3 + 24) != *(_QWORD *)(v2 + 72))
      return 0;
    if ((*(_BYTE *)(v3 + 33) & 0x20) == 0)
      return 0;
    v4 = *(_DWORD *)(*(_QWORD *)(a1 - 56) + 36);
    if ((v4 - 56) >= 3 && v4 != 167)
      return 0;
    a1 = *(_QWORD *)(a1 + 8);
  }
  return 1;
}

void sub_1C5FA5C68(uint64_t a1, uint64_t a2, llvm::Value *a3, _QWORD ***a4, _QWORD ***a5, int a6, int a7)
{
  llvm::BasicBlock *v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  _QWORD ***v19;
  int v20;
  int64x2_t *v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  void *v25;
  uint64_t *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  char *v36;
  char *v37;
  llvm::Value *v38;
  _QWORD *v39;
  _QWORD **v40;
  char *v41;
  char *v42;
  unsigned __int8 **v43;
  int v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  llvm::Value *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unsigned __int8 **v56;
  int v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  char *v61;
  char *v62;
  llvm::Value *v63;
  _QWORD *v64;
  _QWORD **v65;
  char *v66;
  char *v67;
  unsigned __int8 **v68;
  int v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  char *v73;
  char *v74;
  llvm::Value *v75;
  _QWORD *v76;
  _QWORD **v77;
  char *v78;
  char *v79;
  unsigned __int8 **v80;
  int v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  llvm::UnreachableInst *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  llvm::BasicBlock **v91;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  void *v98;
  uint64_t v99;
  _BYTE v100[16];
  __int16 v101;
  void *v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int64x2_t v109;
  uint64_t *v110;
  uint64_t v111;
  _QWORD v112[4];

  v112[2] = *MEMORY[0x1E0C80C00];
  v10 = *(llvm::BasicBlock **)(a2 + 40);
  v108 = 1;
  v109 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  if (a4 == a5)
    v11 = 0;
  else
    v11 = (unint64_t)a5;
  v110 = v112;
  v111 = 0x200000000;
  if (a2)
  {
    v12 = *(unsigned __int8 *)(a2 + 16);
    if (v12 != 30)
      __asm { BR              X12 }
    if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
      v13 = 2;
    else
      v13 = 1;
    v14 = 0;
    v15 = a2 - 32;
    v16 = v13;
    v17 = (unint64_t)a4;
    while (1)
    {
      v102 = 0;
      v18 = *(unsigned __int8 *)(a2 + 16);
      if (v18 != 30)
        __asm { BR              X9 }
      v19 = *(_QWORD ****)(v15 - 32 * v14);
      v102 = v19;
      if (v19 == (_QWORD ***)v17)
      {
        v17 = 0;
      }
      else if (v19 == (_QWORD ***)v11)
      {
        v11 = 0;
      }
      else
      {
        llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v19, v10, 1);
        if (v102 != a4 && v102 != a5)
        {
          if ((v108 & 1) != 0)
          {
            v20 = 2;
            v21 = &v109;
          }
          else
          {
            v20 = v109.i32[2];
            if (!v109.i32[2])
            {
              v30 = 0;
LABEL_34:
              v31 = sub_1C4EE5C58((uint64_t)&v108, (uint64_t)&v102, &v102, v30);
              *v31 = v102;
              v32 = v102;
              v33 = v111;
              if (v111 >= (unint64_t)HIDWORD(v111))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, (uint64_t)v112, v111 + 1, 8);
                v33 = v111;
              }
              v110[v33] = (uint64_t)v32;
              LODWORD(v111) = v111 + 1;
              goto LABEL_37;
            }
            v21 = (int64x2_t *)v109.i64[0];
          }
          v22 = v20 - 1;
          v23 = v22 & ((v102 >> 4) ^ (v102 >> 9));
          v24 = &v21->i64[v23];
          v25 = (void *)*v24;
          if (v102 != (void *)*v24)
          {
            v26 = 0;
            v27 = 1;
            while (v25 != (void *)-4096)
            {
              if (v26)
                v28 = 0;
              else
                v28 = v25 == (void *)-8192;
              if (v28)
                v26 = v24;
              v29 = v23 + v27++;
              v23 = v29 & v22;
              v24 = &v21->i64[v23];
              v25 = (void *)*v24;
              if (v102 == (void *)*v24)
                goto LABEL_37;
            }
            if (v26)
              v30 = v26;
            else
              v30 = v24;
            goto LABEL_34;
          }
        }
      }
LABEL_37:
      if (++v14 == v16)
        goto LABEL_43;
    }
  }
  v17 = (unint64_t)a4;
LABEL_43:
  sub_1C4773D54((uint64_t)&v102, a2, 0, 0, 0);
  v34 = *(unsigned __int8 **)(a2 + 48);
  v96 = v34;
  if (v34)
  {
    llvm::MetadataTracking::track((uint64_t)&v96, v34, 2);
    v35 = v96;
  }
  else
  {
    v35 = 0;
  }
  sub_1C4774EF4((uint64_t)&v102, 0, (uint64_t)v35);
  if (v96)
    llvm::MetadataTracking::untrack((uint64_t)&v96, v96);
  if (v17 | v11)
  {
    if (v17)
    {
      if (a4 == a5 || v11)
      {
        v85 = (llvm::UnreachableInst *)operator new(0x40uLL);
        *((_DWORD *)v85 + 5) &= 0x38000000u;
        llvm::UnreachableInst::UnreachableInst(v85, **(llvm::LLVMContext ***)a2, (llvm::Instruction *)a2);
      }
      else
      {
        v36 = (char *)operator new(0x60uLL);
        v37 = v36;
        *((_DWORD *)v36 + 13) = *((_DWORD *)v36 + 13) & 0x38000000 | 1;
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v36 + 2) = 0;
        *((_QWORD *)v36 + 1) = 0;
        *((_QWORD *)v36 + 4) = ***a5 + 1576;
        v38 = (llvm::Value *)(v36 + 32);
        *((_QWORD *)v36 + 3) = v36 + 32;
        *((_QWORD *)v36 + 5) = 0;
        v36[48] = 30;
        v36[49] = 0;
        *((_WORD *)v36 + 25) = 0;
        *((_DWORD *)v36 + 13) = 1;
        *((_DWORD *)v36 + 22) = 0;
        *(_OWORD *)(v36 + 72) = 0u;
        *(_OWORD *)(v36 + 56) = 0u;
        v39 = a5 + 1;
        v40 = a5[1];
        *(_QWORD *)v36 = a5;
        *((_QWORD *)v36 + 1) = v40;
        if (v40)
          v40[2] = v36 + 8;
        *((_QWORD *)v36 + 2) = v39;
        *v39 = v36;
        v101 = 257;
        (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v107 + 16))(v107, v38, &v98, v105, v106);
        if (v103)
        {
          v41 = (char *)v102;
          v42 = (char *)v102 + 16 * v103;
          v43 = (unsigned __int8 **)(v37 + 80);
          while (1)
          {
            v44 = *(_DWORD *)v41;
            v45 = (unsigned __int8 *)*((_QWORD *)v41 + 1);
            if (v45)
            {
              if (!v44)
              {
                v97 = (unsigned __int8 *)*((_QWORD *)v41 + 1);
                llvm::MetadataTracking::track((uint64_t)&v97, v45, 2);
                v46 = *v43;
                if (!*v43)
                {
LABEL_67:
                  v47 = v97;
                  *v43 = v97;
                  if (v47)
                    llvm::MetadataTracking::retrack((uint64_t)&v97, v47, (uint64_t)(v37 + 80));
                  goto LABEL_64;
                }
LABEL_61:
                llvm::MetadataTracking::untrack((uint64_t)(v37 + 80), v46);
                goto LABEL_67;
              }
            }
            else
            {
              v46 = *v43;
              if (!*v43 && (v37[55] & 0x20) == 0)
                goto LABEL_64;
              if (!v44)
              {
                v97 = 0;
                if (!v46)
                  goto LABEL_67;
                goto LABEL_61;
              }
            }
            llvm::Value::setMetadata(v38, *(_DWORD *)v41, (llvm::MDNode *)v45);
LABEL_64:
            v41 += 16;
            if (v41 == v42)
              goto LABEL_124;
          }
        }
      }
      goto LABEL_124;
    }
    v61 = (char *)operator new(0x60uLL);
    v62 = v61;
    *((_DWORD *)v61 + 13) = *((_DWORD *)v61 + 13) & 0x38000000 | 1;
    *(_QWORD *)v61 = 0;
    *((_QWORD *)v61 + 2) = 0;
    *((_QWORD *)v61 + 1) = 0;
    *((_QWORD *)v61 + 4) = ***a4 + 1576;
    v63 = (llvm::Value *)(v61 + 32);
    *((_QWORD *)v61 + 3) = v61 + 32;
    *((_QWORD *)v61 + 5) = 0;
    v61[48] = 30;
    v61[49] = 0;
    *((_WORD *)v61 + 25) = 0;
    *((_DWORD *)v61 + 13) = 1;
    *((_DWORD *)v61 + 22) = 0;
    *(_OWORD *)(v61 + 72) = 0u;
    *(_OWORD *)(v61 + 56) = 0u;
    v64 = a4 + 1;
    v65 = a4[1];
    *(_QWORD *)v61 = a4;
    *((_QWORD *)v61 + 1) = v65;
    if (v65)
      v65[2] = v61 + 8;
    *((_QWORD *)v61 + 2) = v64;
    *v64 = v61;
    v101 = 257;
    (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v107 + 16))(v107, v63, &v98, v105, v106);
    if (v103)
    {
      v66 = (char *)v102;
      v67 = (char *)v102 + 16 * v103;
      v68 = (unsigned __int8 **)(v62 + 80);
      do
      {
        v69 = *(_DWORD *)v66;
        v70 = (unsigned __int8 *)*((_QWORD *)v66 + 1);
        if (v70)
        {
          if (!v69)
          {
            v97 = (unsigned __int8 *)*((_QWORD *)v66 + 1);
            llvm::MetadataTracking::track((uint64_t)&v97, v70, 2);
            v71 = *v68;
            if (!*v68)
            {
LABEL_104:
              v72 = v97;
              *v68 = v97;
              if (v72)
                llvm::MetadataTracking::retrack((uint64_t)&v97, v72, (uint64_t)(v62 + 80));
              goto LABEL_101;
            }
LABEL_98:
            llvm::MetadataTracking::untrack((uint64_t)(v62 + 80), v71);
            goto LABEL_104;
          }
        }
        else
        {
          v71 = *v68;
          if (!*v68 && (v62[55] & 0x20) == 0)
            goto LABEL_101;
          if (!v69)
          {
            v97 = 0;
            if (!v71)
              goto LABEL_104;
            goto LABEL_98;
          }
        }
        llvm::Value::setMetadata(v63, *(_DWORD *)v66, (llvm::MDNode *)v70);
LABEL_101:
        v66 += 16;
      }
      while (v66 != v67);
    }
LABEL_124:
    v53 = a1;
    goto LABEL_125;
  }
  if (a4 == a5)
  {
    v73 = (char *)operator new(0x60uLL);
    v74 = v73;
    *((_DWORD *)v73 + 13) = *((_DWORD *)v73 + 13) & 0x38000000 | 1;
    *(_QWORD *)v73 = 0;
    *((_QWORD *)v73 + 2) = 0;
    *((_QWORD *)v73 + 1) = 0;
    *((_QWORD *)v73 + 4) = ***a4 + 1576;
    v75 = (llvm::Value *)(v73 + 32);
    *((_QWORD *)v73 + 3) = v73 + 32;
    *((_QWORD *)v73 + 5) = 0;
    v73[48] = 30;
    v73[49] = 0;
    *((_WORD *)v73 + 25) = 0;
    *((_DWORD *)v73 + 13) = 1;
    *((_DWORD *)v73 + 22) = 0;
    *(_OWORD *)(v73 + 72) = 0u;
    *(_OWORD *)(v73 + 56) = 0u;
    v76 = a4 + 1;
    v77 = a4[1];
    *(_QWORD *)v73 = a4;
    *((_QWORD *)v73 + 1) = v77;
    if (v77)
      v77[2] = v73 + 8;
    *((_QWORD *)v73 + 2) = v76;
    *v76 = v73;
    v101 = 257;
    (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v107 + 16))(v107, v75, &v98, v105, v106);
    if (!v103)
      goto LABEL_124;
    v78 = (char *)v102;
    v79 = (char *)v102 + 16 * v103;
    v80 = (unsigned __int8 **)(v74 + 80);
    while (1)
    {
      v81 = *(_DWORD *)v78;
      v82 = (unsigned __int8 *)*((_QWORD *)v78 + 1);
      if (v82)
      {
        if (!v81)
        {
          v97 = (unsigned __int8 *)*((_QWORD *)v78 + 1);
          llvm::MetadataTracking::track((uint64_t)&v97, v82, 2);
          v83 = *v80;
          if (!*v80)
          {
LABEL_121:
            v84 = v97;
            *v80 = v97;
            if (v84)
              llvm::MetadataTracking::retrack((uint64_t)&v97, v84, (uint64_t)(v74 + 80));
            goto LABEL_118;
          }
LABEL_115:
          llvm::MetadataTracking::untrack((uint64_t)(v74 + 80), v83);
          goto LABEL_121;
        }
      }
      else
      {
        v83 = *v80;
        if (!*v80 && (v74[55] & 0x20) == 0)
          goto LABEL_118;
        if (!v81)
        {
          v97 = 0;
          if (!v83)
            goto LABEL_121;
          goto LABEL_115;
        }
      }
      llvm::Value::setMetadata(v75, *(_DWORD *)v78, (llvm::MDNode *)v82);
LABEL_118:
      v78 += 16;
      if (v78 == v79)
        goto LABEL_124;
    }
  }
  v48 = operator new(0xA0uLL);
  v49 = v48;
  v50 = 0;
  v51 = (llvm::Value *)(v48 + 24);
  v48[29] = v48[29] & 0x38000000 | 3;
  do
  {
    v52 = &v48[v50];
    *v52 = 0;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v51;
    v50 += 8;
  }
  while (v50 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v48 + 24), (llvm::BasicBlock *)a4, (llvm::BasicBlock *)a5, a3, 0);
  v101 = 257;
  (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v107 + 16))(v107, v51, &v98, v105, v106);
  v53 = a1;
  if (v103)
  {
    v54 = (char *)v102;
    v55 = (char *)v102 + 16 * v103;
    v56 = (unsigned __int8 **)(v49 + 36);
    do
    {
      v57 = *(_DWORD *)v54;
      v58 = (unsigned __int8 *)*((_QWORD *)v54 + 1);
      if (v58)
      {
        if (!v57)
        {
          v97 = (unsigned __int8 *)*((_QWORD *)v54 + 1);
          llvm::MetadataTracking::track((uint64_t)&v97, v58, 2);
          v59 = *v56;
          if (!*v56)
          {
LABEL_85:
            v60 = v97;
            *v56 = v97;
            if (v60)
              llvm::MetadataTracking::retrack((uint64_t)&v97, v60, (uint64_t)(v49 + 36));
            goto LABEL_82;
          }
LABEL_79:
          llvm::MetadataTracking::untrack((uint64_t)(v49 + 36), v59);
          goto LABEL_85;
        }
      }
      else
      {
        v59 = *v56;
        if (!*v56 && (*((_BYTE *)v49 + 119) & 0x20) == 0)
          goto LABEL_82;
        if (!v57)
        {
          v97 = 0;
          if (!v59)
            goto LABEL_85;
          goto LABEL_79;
        }
      }
      llvm::Value::setMetadata(v51, *(_DWORD *)v54, (llvm::MDNode *)v58);
LABEL_82:
      v54 += 16;
    }
    while (v54 != v55);
  }
  if (a6 != a7)
    sub_1C5F91118(v51, a6, a7);
LABEL_125:
  sub_1C5FA3F18(a2);
  if (!*(_QWORD *)(v53 + 8))
    goto LABEL_136;
  v98 = v100;
  v99 = 0x200000000;
  v86 = v111;
  if (v111 < 3)
  {
    v87 = 0;
    if (!(_DWORD)v111)
      goto LABEL_134;
LABEL_130:
    v88 = v110;
    v89 = 8 * v86;
    do
    {
      v90 = *v88;
      if (v87 >= HIDWORD(v99))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v100, v87 + 1, 16);
        v87 = v99;
      }
      v91 = (llvm::BasicBlock **)((char *)v98 + 16 * v87);
      *v91 = v10;
      v91[1] = (llvm::BasicBlock *)(v90 | 4);
      v87 = v99 + 1;
      LODWORD(v99) = v99 + 1;
      ++v88;
      v89 -= 8;
    }
    while (v89);
    goto LABEL_134;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v100, v111, 16);
  v86 = v111;
  v87 = v99;
  if ((_DWORD)v111)
    goto LABEL_130;
LABEL_134:
  llvm::DomTreeUpdater::applyUpdates(*(_QWORD *)(v53 + 8), (unint64_t *)v98, v87);
  if (v98 != v100)
    free(v98);
LABEL_136:
  if (v102 != &v104)
    free(v102);
  if (v110 != v112)
    free(v110);
  if ((v108 & 1) == 0)
    MEMORY[0x1CAA32FB4](v109.i64[0], 8);
}

void sub_1C5FA66DC()
{
  JUMPOUT(0x1C5FA5F90);
}

void sub_1C5FA66EC()
{
  JUMPOUT(0x1C5FA5F90);
}

void sub_1C5FA66F8()
{
  JUMPOUT(0x1C5FA5D18);
}

void sub_1C5FA6700()
{
  JUMPOUT(0x1C5FA5F90);
}

uint64_t sub_1C5FA670C(uint64_t a1)
{
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  void *__s2;
  unsigned int v16;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 >= 2)
  {
    qsort(*(void **)a1, v2, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C5FA4658);
    LODWORD(v2) = *(_DWORD *)(a1 + 8);
  }
  if ((_DWORD)v2 == 1)
    return 1;
  v4 = 0;
  v5 = v2 - 2;
  do
  {
    v6 = (uint64_t *)(*(_QWORD *)a1 + 8 * v4);
    v7 = *v6;
    v8 = v6[1];
    v16 = *(_DWORD *)(v8 + 32);
    if (v16 > 0x40)
    {
      __s2 = (void *)operator new[]();
      memcpy(__s2, *(const void **)(v8 + 24), (((unint64_t)v16 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      __s2 = *(void **)(v8 + 24);
    }
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    v9 = v16;
    v10 = __s2;
    v16 = 0;
    v11 = *(unsigned int *)(v7 + 32);
    if (v11 > 0x40)
      v12 = memcmp(*(const void **)(v7 + 24), __s2, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v12 = *(_QWORD *)(v7 + 24) == (_QWORD)__s2;
    v3 = v12;
    if (v9 >= 0x41)
    {
      if (v10)
      {
        MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
        if (v16 >= 0x41)
        {
          if (__s2)
            MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        }
      }
    }
    if (v5 == v4)
      v13 = 0;
    else
      v13 = v3;
    ++v4;
  }
  while ((v13 & 1) != 0);
  return v3;
}

void sub_1C5FA6894(uint64_t a1, uint64_t a2)
{
  llvm::BasicBlock *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::BasicBlock **v12;
  llvm::BasicBlock *v13;
  int v14;
  int v15;
  llvm::BasicBlock *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD **v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  llvm::BasicBlock **v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unint64_t v43[2];
  llvm::BasicBlock *v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = *(llvm::BasicBlock **)(a1 + 40);
  v5 = *(_DWORD *)(a1 + 20);
  if ((v5 & 0x40000000) != 0)
    v6 = *(_QWORD *)(a1 - 8);
  else
    v6 = a1 - 32 * (v5 & 0x7FFFFFF);
  v7 = *(_QWORD *)(v6 + 32);
  llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v7, v4, 0);
  v8 = **(_QWORD **)v4;
  if ((*((_BYTE *)v4 + 23) & 0x10) != 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)v8 + 152);
    v10 = *(unsigned int *)(*(_QWORD *)v8 + 168);
    if ((_DWORD)v10)
    {
      LODWORD(v11) = (v10 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v12 = (llvm::BasicBlock **)(v9 + 16 * v11);
      v13 = *v12;
      if (*v12 == v4)
      {
LABEL_12:
        v16 = v12[1];
        v19 = *(_QWORD *)v16;
        v17 = (char *)v16 + 16;
        v18 = v19;
        goto LABEL_13;
      }
      v14 = 1;
      while (v13 != (llvm::BasicBlock *)-4096)
      {
        v15 = v11 + v14++;
        v11 = v15 & (v10 - 1);
        v13 = *(llvm::BasicBlock **)(v9 + 16 * v11);
        if (v13 == v4)
        {
          v12 = (llvm::BasicBlock **)(v9 + 16 * v11);
          goto LABEL_12;
        }
      }
    }
    v12 = (llvm::BasicBlock **)(v9 + 16 * v10);
    goto LABEL_12;
  }
  v18 = 0;
  v17 = &byte_1C871356D;
LABEL_13:
  LOWORD(v44) = 773;
  v41 = v17;
  v42 = v18;
  v43[0] = (unint64_t)".unreachabledefault";
  v20 = (_QWORD *)*((_QWORD *)v4 + 7);
  v21 = operator new();
  *(_QWORD *)v21 = *(_QWORD *)v8 + 1600;
  *(_QWORD *)(v21 + 8) = 0;
  v22 = (_QWORD *)(v21 + 8);
  v23 = *(_DWORD *)(v21 + 20) & 0xC0000000;
  *(_QWORD *)(v21 + 24) = 0;
  v24 = v21 + 24;
  *(_DWORD *)(v21 + 16) = 22;
  *(_DWORD *)(v21 + 20) = v23;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 40) = v21 + 40;
  *(_QWORD *)(v21 + 48) = v21 + 40;
  *(_QWORD *)(v21 + 56) = 0;
  if (v20)
  {
    v25 = (uint64_t)(v20 + 9);
    if (v7)
      v26 = (uint64_t *)(v7 + 24);
    else
      v26 = v20 + 9;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v25, (_QWORD *)v21);
    v27 = *v26;
    *(_QWORD *)(v21 + 24) = *v26;
    *(_QWORD *)(v21 + 32) = v26;
    *(_QWORD *)(v27 + 8) = v24;
    *v26 = v24;
  }
  llvm::Value::setName((uint64_t ***)v21, (uint64_t)&v41);
  v28 = (char *)operator new(0x40uLL);
  *(_QWORD *)v28 = ***(_QWORD ***)a1 + 1576;
  *((_QWORD *)v28 + 1) = 0;
  v28[16] = 35;
  *(_OWORD *)(v28 + 44) = 0u;
  *(_OWORD *)(v28 + 33) = 0u;
  *(_OWORD *)(v28 + 17) = 0u;
  *(_WORD *)(v21 + 18) &= ~0x8000u;
  v29 = *(_QWORD *)(v21 + 40);
  *((_QWORD *)v28 + 4) = v21 + 40;
  *((_QWORD *)v28 + 5) = v21;
  *((_QWORD *)v28 + 3) = v29;
  v28 += 24;
  *(_QWORD *)(v29 + 8) = v28;
  *(_QWORD *)(v21 + 40) = v28;
  v30 = *(_DWORD *)(a1 + 20);
  if ((v30 & 0x40000000) != 0)
    v31 = *(_QWORD *)(a1 - 8);
  else
    v31 = a1 - 32 * (v30 & 0x7FFFFFF);
  if (*(_QWORD *)(v31 + 32))
  {
    **(_QWORD **)(v31 + 48) = *(_QWORD *)(v31 + 40);
    v40 = *(_QWORD *)(v31 + 40);
    if (v40)
      *(_QWORD *)(v40 + 16) = *(_QWORD *)(v31 + 48);
  }
  *(_QWORD *)(v31 + 32) = v21;
  v32 = *(_QWORD *)(v21 + 8);
  *(_QWORD *)(v31 + 40) = v32;
  if (v32)
    *(_QWORD *)(v32 + 16) = v31 + 40;
  *(_QWORD *)(v31 + 48) = v22;
  *v22 = v31 + 32;
  if (a2)
  {
    v41 = v43;
    v43[0] = (unint64_t)v4;
    v43[1] = v21 & 0xFFFFFFFFFFFFFFFBLL;
    v42 = 0x200000001;
    v33 = (_QWORD **)*((_QWORD *)v4 + 5);
    if (v33 != (_QWORD **)((char *)v4 + 40))
    {
      if (v33)
        v34 = v33 - 3;
      else
        v34 = 0;
      v35 = *((unsigned __int8 *)v34 + 16);
      if (v35 == 30)
      {
        if ((*((_DWORD *)v34 + 5) & 0x7FFFFFF) == 3)
          v36 = 2;
        else
          v36 = 1;
        goto LABEL_32;
      }
      v36 = 2;
      switch(*((_BYTE *)v34 + 16))
      {
        case 0x1E:
          __break(1u);
          goto LABEL_51;
        case 0x1F:
          v36 = (*((_DWORD *)v34 + 5) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
LABEL_51:
          v36 = (*((_DWORD *)v34 + 5) & 0x7FFFFFF) - 1;
          break;
        case 0x21:
          goto LABEL_32;
        case 0x24:
          v36 = *((_WORD *)v34 + 9) & 1;
          break;
        case 0x25:
          v36 = 1;
          goto LABEL_32;
        case 0x27:
          v36 = *((_DWORD *)v34 + 20) + 1;
          break;
        default:
          goto LABEL_41;
      }
      if (v36)
      {
LABEL_32:
        v37 = 0;
        v38 = 1;
        v39 = (llvm::BasicBlock **)(v34 - 4);
        do
        {
          if (v35 != 30)
            __asm { BR              X3 }
          if (*v39 == (llvm::BasicBlock *)v7)
            goto LABEL_42;
          ++v37;
          v39 -= 4;
        }
        while (v36 != v37);
      }
    }
LABEL_41:
    v44 = v4;
    v45 = v7 | 4;
    v38 = 2;
    LODWORD(v42) = 2;
LABEL_42:
    llvm::DomTreeUpdater::applyUpdates(a2, v43, v38);
    if (v41 != v43)
      free(v41);
  }
}

BOOL sub_1C5FA6D20(uint64_t a1, uint64_t a2, llvm::BasicBlock *a3, llvm::BasicBlock **a4, uint64_t a5, llvm::DataLayout *a6, _QWORD *a7)
{
  llvm::BasicBlock *v11;
  uint64_t i;
  int v13;
  void **v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  llvm::UndefValue *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  _BOOL8 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  llvm::BasicBlock *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  BOOL v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  llvm::BasicBlock **v64;
  _QWORD *v65;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  _BYTE v70[24];
  _BYTE *v71;
  __int128 v72;
  _BYTE v73[24];
  _BYTE *v74;
  __int128 v75;
  _BYTE v76[24];
  _BYTE *v77;
  __int128 v78;
  _BYTE v79[24];
  _BYTE *v80;
  _QWORD v81[9];
  uint64_t *v82;
  uint64_t v83;
  _QWORD v84[6];

  v84[4] = *MEMORY[0x1E0C80C00];
  v11 = *(llvm::BasicBlock **)(a1 + 40);
  v81[0] = 1;
  for (i = 1; i != 9; i += 2)
    v81[i] = -4096;
  v13 = *(_DWORD *)(a1 + 20);
  if ((v13 & 0x40000000) != 0)
    v14 = *(void ***)(a1 - 8);
  else
    v14 = (void **)(a1 - 32 * (v13 & 0x7FFFFFF));
  v82 = (uint64_t *)*v14;
  v83 = a2;
  sub_1C5FA75C0((uint64_t)&v75, (uint64_t)v81, (uint64_t *)&v82, &v83);
  llvm::BasicBlock::instructionsWithoutDebug(a3, 0, (uint64_t)&v75);
  v72 = v75;
  v15 = v73;
  if (v77)
  {
    if (v77 == v76)
    {
      v74 = v73;
      (*(void (**)(void))(*(_QWORD *)v77 + 24))();
    }
    else
    {
      v74 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v77 + 16))();
    }
  }
  else
  {
    v74 = 0;
  }
  v69 = v78;
  v16 = v70;
  v17 = v80;
  if (v80)
  {
    if (v80 == v79)
    {
      v71 = v70;
      v17 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v80 + 24))();
    }
    else
    {
      v17 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v80 + 16))();
      v71 = v17;
    }
  }
  else
  {
    v71 = 0;
  }
  v18 = v72;
  if ((_QWORD)v72 == (_QWORD)v69)
  {
LABEL_98:
    v40 = 1;
    goto LABEL_99;
  }
  while (2)
  {
    if (v18)
      v19 = v18 - 24;
    else
      v19 = 0;
    v20 = *(unsigned __int8 *)(v19 + 16);
    if (v20 == 30)
    {
      if ((*(_DWORD *)(v19 + 20) & 0x7FFFFFF) != 3)
      {
        v11 = a3;
        a3 = *(llvm::BasicBlock **)(v19 - 32);
        goto LABEL_84;
      }
      goto LABEL_97;
    }
    v40 = 0;
    switch(*(_BYTE *)(v19 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x25:
        goto LABEL_99;
      case 0x1E:
        __break(1u);
        goto LABEL_157;
      case 0x1F:
        v41 = (*(_DWORD *)(v19 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_92;
      case 0x20:
      case 0x26:
        v41 = (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_92;
      case 0x24:
        v41 = *(_WORD *)(v19 + 18) & 1;
        goto LABEL_92;
      case 0x27:
        v41 = *(_DWORD *)(v19 + 80) + 1;
LABEL_92:
        if (v41 == 1)
          __asm { BR              X9 }
        goto LABEL_97;
      default:
        if (v18 && v20 == 85)
        {
          v21 = *(unsigned __int8 **)(v19 - 96);
          if (v21)
            v22 = v21[16] >= 0x15u;
          else
            v22 = 1;
          if (v22)
          {
            v82 = 0;
            if ((sub_1C5FA7940((uint64_t)v81, (uint64_t)v21, &v82) & 1) == 0)
              goto LABEL_98;
            v21 = (unsigned __int8 *)v82[1];
            if (!v21)
              goto LABEL_98;
          }
          if (llvm::Constant::isAllOnesValue((llvm::Constant *)v21))
          {
            v23 = *(_QWORD *)(v19 - 64);
            if (!v23)
            {
LABEL_55:
              v82 = 0;
              v32 = sub_1C5FA7940((uint64_t)v81, v23, &v82);
              v23 = 0;
              if (v32)
                v23 = v82[1];
              goto LABEL_68;
            }
          }
          else
          {
            if (!llvm::Constant::isNullValue((llvm::Constant *)v21))
              goto LABEL_98;
            v23 = *(_QWORD *)(v19 - 32);
            if (!v23)
              goto LABEL_55;
          }
          if (*(unsigned __int8 *)(v23 + 16) < 0x15u)
            goto LABEL_69;
          goto LABEL_55;
        }
        v82 = v84;
        v83 = 0x400000000;
        v24 = *(_DWORD *)(v19 + 20);
        v25 = v24 & 0x7FFFFFF;
        if ((v24 & 0x7FFFFFF) != 0)
        {
          v64 = a4;
          v65 = a7;
          v26 = 0;
          v27 = 0;
          v28 = 32 * v25;
          do
          {
            v29 = *(_DWORD *)(v19 + 20);
            if ((v29 & 0x40000000) != 0)
              v30 = *(_QWORD *)(v19 - 8);
            else
              v30 = v19 - 32 * (v29 & 0x7FFFFFF);
            v23 = *(_QWORD *)(v30 + v26);
            if (v23)
              v31 = *(unsigned __int8 *)(v23 + 16) >= 0x15u;
            else
              v31 = 1;
            if (v31)
            {
              v67 = 0;
              if ((sub_1C5FA7940((uint64_t)v81, v23, &v67) & 1) == 0)
              {
                v23 = 0;
LABEL_65:
                a4 = v64;
                a7 = v65;
                goto LABEL_66;
              }
              v23 = *(_QWORD *)(v67 + 8);
              if (!v23)
                goto LABEL_65;
              v27 = v83;
            }
            if (v27 >= HIDWORD(v83))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, (uint64_t)v84, v27 + 1, 8);
              v27 = v83;
            }
            v82[v27] = v23;
            v27 = v83 + 1;
            LODWORD(v83) = v83 + 1;
            v26 += 32;
          }
          while (v28 != v26);
          v20 = *(unsigned __int8 *)(v19 + 16);
          a4 = v64;
          a7 = v65;
          if (!v18)
            goto LABEL_62;
        }
        else
        {
          v27 = 0;
          if (!v18)
            goto LABEL_62;
        }
        if ((v20 - 83) >= 0xFFFFFFFE)
        {
          v33 = llvm::ConstantFoldCompareInstOperands(*(_WORD *)(v19 + 18) & 0x3F, *v82, v82[1], a6, 0);
          goto LABEL_63;
        }
LABEL_62:
        v33 = sub_1C4DECDA4((int **)v19, (llvm *)(v20 - 28), (llvm::Type **)v82, v27, (__int32 **)a6, 0);
LABEL_63:
        v23 = (uint64_t)v33;
LABEL_66:
        if (v82 != v84)
          free(v82);
LABEL_68:
        if (!v23)
          goto LABEL_98;
LABEL_69:
        v34 = *(_QWORD *)(v19 + 8);
        if (!v34)
        {
LABEL_83:
          v67 = v19;
          v68 = v23;
          v17 = (_QWORD *)sub_1C5FA75C0((uint64_t)&v82, (uint64_t)v81, &v67, &v68);
LABEL_84:
          while (1)
          {
            v18 = *(_QWORD *)(v72 + 8);
            *(_QWORD *)&v72 = v18;
            if (v18 == *((_QWORD *)&v72 + 1))
              break;
            if (!v74)
              sub_1C485C2F0();
            v17 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v74 + 48))();
            if ((_DWORD)v17)
            {
              v18 = v72;
              break;
            }
          }
          if (v18 == (_QWORD)v69)
            goto LABEL_98;
          continue;
        }
        while (1)
        {
          v35 = *(_QWORD *)(v34 + 24);
          v36 = *(unsigned __int8 *)(v35 + 16);
          v37 = v35 && v36 >= 0x1C;
          if (!v37 || *(llvm::BasicBlock **)(v35 + 40) != a3)
          {
            if (!v35 || v36 != 83)
              break;
            v38 = *(_DWORD *)(v35 + 20);
            v39 = (v38 & 0x40000000) != 0 ? *(_QWORD *)(v35 - 8) : v35 - 32 * (v38 & 0x7FFFFFF);
            if (*(llvm::BasicBlock **)(v39
                                      + 32 * *(unsigned int *)(v35 + 60)
                                      + 8 * ((unint64_t)(v34 - v39) >> 5)) != a3)
              break;
          }
          v34 = *(_QWORD *)(v34 + 8);
          if (!v34)
            goto LABEL_83;
        }
LABEL_97:
        v40 = 0;
LABEL_99:
        if (v71 == v70)
        {
          v42 = 4;
LABEL_103:
          (*(void (**)(_QWORD *))(*v16 + 8 * v42))(v16);
        }
        else if (v71)
        {
          v42 = 5;
          v16 = v71;
          goto LABEL_103;
        }
        if (v74 == v73)
        {
          v43 = 4;
LABEL_108:
          (*(void (**)(_QWORD *))(*v15 + 8 * v43))(v15);
        }
        else if (v74)
        {
          v43 = 5;
          v15 = v74;
          goto LABEL_108;
        }
        v17 = v80;
        if (v80 == v79)
        {
          v44 = 4;
          v17 = v79;
          goto LABEL_111;
        }
LABEL_157:
        if (v17)
        {
          v44 = 5;
LABEL_111:
          (*(void (**)(void))(*v17 + 8 * v44))();
        }
        v45 = v77;
        if (v77 == v76)
        {
          v46 = 4;
          v45 = v76;
          goto LABEL_114;
        }
        if (v77)
        {
          v46 = 5;
LABEL_114:
          (*(void (**)(void))(*v45 + 8 * v46))();
        }
        if (!v40)
          goto LABEL_152;
        v47 = *a4;
        if (!*a4)
        {
          *a4 = a3;
          v47 = a3;
        }
        if (a3 != v47)
        {
LABEL_119:
          v40 = 0;
          goto LABEL_152;
        }
        if (*((llvm::BasicBlock **)a3 + 5) == (llvm::BasicBlock *)((char *)a3 + 40))
          goto LABEL_151;
        v48 = *((_QWORD *)a3 + 6);
        v49 = v48 - 24;
        v50 = v48 ? v48 - 24 : 0;
        if (!v48 || *(_BYTE *)(v50 + 16) != 83)
          goto LABEL_151;
        while (2)
        {
          v51 = *(_DWORD *)(v49 + 20);
          v52 = v51 & 0x7FFFFFF;
          if ((v51 & 0x7FFFFFF) == 0)
            goto LABEL_146;
          v53 = 0;
          v54 = v49 - 32 * v52;
          v55 = 32 * *(unsigned int *)(v49 + 60);
          v56 = 32 * v52;
          while (2)
          {
            if ((v51 & 0x40000000) == 0)
            {
              if (*(llvm::BasicBlock **)(v54 + v55) == v11)
                goto LABEL_135;
              goto LABEL_132;
            }
            if (*(llvm::BasicBlock **)(*(_QWORD *)(v49 - 8) + v55) != v11)
            {
LABEL_132:
              v53 += 32;
              v55 += 8;
              if (v56 == v53)
                goto LABEL_146;
              continue;
            }
            break;
          }
          v54 = *(_QWORD *)(v49 - 8);
LABEL_135:
          v57 = *(unsigned __int8 **)(v54 + v53);
          if (v57)
            v58 = v57[16] >= 0x15u;
          else
            v58 = 1;
          if (v58)
          {
            *(_QWORD *)&v75 = 0;
            if ((sub_1C5FA7940((uint64_t)v81, (uint64_t)v57, &v75) & 1) == 0)
              goto LABEL_119;
            v57 = *(unsigned __int8 **)(v75 + 8);
            if (!v57)
              goto LABEL_119;
          }
          if (!sub_1C5FA7510(v57, a7))
            goto LABEL_119;
          v59 = *(unsigned int *)(a5 + 8);
          if (v59 >= *(unsigned int *)(a5 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v59 + 1, 16);
            v59 = *(unsigned int *)(a5 + 8);
          }
          v60 = (_QWORD *)(*(_QWORD *)a5 + 16 * v59);
          *v60 = v49;
          v60[1] = v57;
          ++*(_DWORD *)(a5 + 8);
LABEL_146:
          v61 = *(_QWORD *)(v49 + 32);
          v49 = v61 - 24;
          if (v61)
            v62 = v61 - 24;
          else
            v62 = 0;
          if (v61 && *(_BYTE *)(v62 + 16) == 83)
            continue;
          break;
        }
LABEL_151:
        v40 = *(_DWORD *)(a5 + 8) != 0;
LABEL_152:
        if ((v81[0] & 1) == 0)
          MEMORY[0x1CAA32FB4](v81[1], 8);
        return v40;
    }
  }
}

uint64_t sub_1C5FA7510(unsigned __int8 *a1, _QWORD *a2)
{
  unsigned int v5;
  llvm::Value *v6;

  if ((sub_1C53775E8((uint64_t)a1, (uint64_t (*)(uint64_t))sub_1C5381FC0) & 1) != 0)
    return 0;
  if ((sub_1C53775E8((uint64_t)a1, (uint64_t (*)(uint64_t))sub_1C5381FD0) & 1) != 0)
    return 0;
  v5 = a1[16];
  if (v5 > 0x13)
    return 0;
  if (((1 << v5) & 0xB180F) == 0
    && (v5 != 5
     || (v6 = llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)a1), v6 == (llvm::Value *)a1)
     || !sub_1C5FA7510(v6, a2)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD, unsigned __int8 *))(*(_QWORD *)*a2 + 504))(*a2, a1);
  }
}

uint64_t sub_1C5FA75C0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v19 = 0;
  result = sub_1C4E85724(a2, *a3, &v19);
  v9 = v19;
  v10 = *(_DWORD *)a2;
  if ((_DWORD)result)
  {
    if ((v10 & 1) != 0)
    {
      v17 = a2 + 8;
      v18 = 4;
    }
    else
    {
      v17 = *(_QWORD *)(a2 + 8);
      v18 = *(unsigned int *)(a2 + 16);
    }
    v16 = 0;
    v15 = v17 + 16 * v18;
    goto LABEL_11;
  }
  v11 = v10 >> 1;
  if ((v10 & 1) != 0)
    v12 = 4;
  else
    v12 = *(_DWORD *)(a2 + 16);
  if (4 * v11 + 4 >= 3 * v12)
  {
    v12 *= 2;
    goto LABEL_14;
  }
  if (v12 + ~v11 - *(_DWORD *)(a2 + 4) <= v12 >> 3)
  {
LABEL_14:
    sub_1C5FA7708(a2, v12);
    v19 = 0;
    result = sub_1C4E85724(a2, *a3, &v19);
    v9 = v19;
  }
  *(_DWORD *)a2 += 2;
  if (*v9 != -4096)
    --*(_DWORD *)(a2 + 4);
  *v9 = *a3;
  v9[1] = *a4;
  v13 = a2 + 8;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v14 = 4;
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 8);
    v14 = *(unsigned int *)(a2 + 16);
  }
  v15 = v13 + 16 * v14;
  v16 = 1;
LABEL_11:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v15;
  *(_BYTE *)(a1 + 16) = v16;
  return result;
}

uint64_t sub_1C5FA7708(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5FA7880(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5FA7880(a1, v14, v9);
}

uint64_t sub_1C5FA7880(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C4E85724((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C5FA7940(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_12:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_12;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

void sub_1C5FA79E4(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  int v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  unint64_t v14;

  v14 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 56, &v14);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[56 * v5];
    v7 = v3 + 8;
    v8 = (uint64_t)(v4 + 8);
    do
    {
      v9 = v8 - 8;
      *(v7 - 1) = *(_QWORD *)(v8 - 8);
      *v7 = v7 + 2;
      v7[1] = 0x400000000;
      if (*(_DWORD *)(v8 + 8))
        sub_1C4FCE718((uint64_t)v7, v8);
      v7 += 7;
      v8 += 56;
    }
    while ((char *)(v9 + 56) != v6);
    v4 = *(char **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        if (&v4[v11 - 32] != *(char **)&v4[v11 - 48])
        {
          v13 = v4;
          free(*(void **)&v4[v11 - 48]);
          v4 = v13;
        }
        v11 -= 56;
      }
      while (v11);
      v4 = *(char **)a1;
    }
  }
  v12 = v14;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v12;
}

char **sub_1C5FA7AFC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v5 = 56 * v3;
    do
    {
      v6 = *(char **)&v2[v5 - 48];
      if (&v2[v5 - 32] != v6)
        free(v6);
      v5 -= 56;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C5FA7B7C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 40 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_9;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_9:
  *a4 = v6;
  return v10;
}

_QWORD *sub_1C5FA7C18(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63B7B84(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

void sub_1C5FA7CDC(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  _BYTE v14[352];
  uint64_t v15;

  v2 = a2;
  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(88 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C63B7E5C(a1, v7, v7 + 88 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v14;
  do
  {
    v11 = a1 + v9;
    v12 = *(_QWORD *)(a1 + v9 + 8);
    if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v10 = v12;
      v10[1] = v10 + 3;
      v13 = (void **)(v11 + 16);
      v10[2] = 0x400000000;
      if (*(_DWORD *)(v11 + 24))
        sub_1C486F510((uint64_t)(v10 + 1), (uint64_t)v13);
      v10 += 11;
      if ((void *)(a1 + v9 + 32) != *v13)
        free(*v13);
    }
    v9 += 88;
  }
  while (v9 != 352);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(88 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C63B7E5C(a1, (uint64_t)v14, (uint64_t)v10);
}

__n128 sub_1C5FA7EB8(_WORD *a1, int **a2, __n128 *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED828AF8, "simplifycfg-max-small-block-size", 0x20uLL);
  word_1ED828B02 = (32 * (*a1 & 3)) | word_1ED828B02 & 0xFF9F;
  v6 = *a2;
  dword_1ED828B78 = **a2;
  byte_1ED828B8C = 1;
  dword_1ED828B88 = *v6;
  result = *a3;
  xmmword_1ED828B18 = (__int128)*a3;
  return result;
}

__n128 sub_1C5FA7F3C(_WORD *a1, char **a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED828D38, "simplifycfg-merge-compatible-invokes", 0x24uLL);
  word_1ED828D42 = (32 * (*a1 & 3)) | word_1ED828D42 & 0xFF9F;
  v6 = *a2;
  byte_1ED828DB8 = **a2;
  byte_1ED828DC9 = 1;
  byte_1ED828DC8 = *v6;
  result = *a3;
  xmmword_1ED828D58 = (__int128)*a3;
  return result;
}

uint64_t sub_1C5FA7FC0()
{
  char v1;
  __n128 v2;
  int v3;
  int *v4;
  int v5;

  v5 = 1;
  v3 = 1;
  v1 = 0;
  v4 = (int *)&v1;
  v2.n128_u64[0] = (unint64_t)"Temorary development switch used to gradually uplift SimplifyCFG into preserving DomTree,";
  v2.n128_u64[1] = 89;
  sub_1C63B808C(&v5, &v3, (char **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::RequireAndPreserveDomTree, &dword_1C475E000);
  v5 = 1;
  v3 = 2;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Control the amount of phi node folding to perform (default = 2)";
  v2.n128_u64[1] = 63;
  sub_1C61798D0((uint64_t)&unk_1ED828438, "phi-node-folding-threshold", &v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED828438, &dword_1C475E000);
  v5 = 1;
  v3 = 4;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Control the maximal total instruction cost that we are willing to speculatively exe"
                                     "cute to fold a 2-entry PHI node into a select (default = 4)";
  v2.n128_u64[1] = 142;
  sub_1C63B81D4(&v5, &v4, (__int128 *)&v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED8284F8, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Hoist common instructions up to the parent block";
  v2.n128_u64[1] = 48;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED8285B8, "simplifycfg-hoist-common", &v5, (_BYTE **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8285B8, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Sink common instructions down to the end block";
  v2.n128_u64[1] = 46;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED828678, "simplifycfg-sink-common", &v5, (_BYTE **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED828678, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Hoist conditional stores if an unconditional store precedes";
  v2.n128_u64[1] = 59;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED828738, "simplifycfg-hoist-cond-stores", &v5, (_BYTE **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED828738, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Hoist conditional stores even if an unconditional store does not precede - hoist mu"
                                     "ltiple conditional stores into a single predicated store";
  v2.n128_u64[1] = 139;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED8287F8, "simplifycfg-merge-cond-stores", &v5, (_BYTE **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8287F8, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v3) = 0;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"When merging conditional stores, do so even if the resultant basic blocks are unlik"
                                     "ely to be if-converted as a result";
  v2.n128_u64[1] = 117;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED8288B8, "simplifycfg-merge-cond-stores-aggressively", &v5, (_BYTE **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8288B8, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Allow exactly one expensive instruction to be speculatively executed";
  v2.n128_u64[1] = 68;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED828978, "speculate-one-expensive-inst", &v5, (_BYTE **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED828978, &dword_1C475E000);
  v5 = 1;
  v3 = 10;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Limit maximum recursion depth when calculating costs of speculatively executed instructions";
  v2.n128_u64[1] = 91;
  sub_1C61798D0((uint64_t)&unk_1ED828A38, "max-speculation-depth", &v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED828A38, &dword_1C475E000);
  v5 = 1;
  v3 = 10;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Max size of a block which is still considered small enough to thread through";
  v2.n128_u64[1] = 76;
  sub_1C63B82B0(&v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED828AF8, &dword_1C475E000);
  v5 = 1;
  v3 = 2;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Maximum cost of combining conditions when folding branches";
  v2.n128_u64[1] = 58;
  sub_1C61798D0((uint64_t)&unk_1ED828BB8, "simplifycfg-branch-fold-threshold", &v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED828BB8, &dword_1C475E000);
  v5 = 1;
  v3 = 2;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Multiplier to apply to threshold when determining whether or not to fold branch to "
                                     "common destination when vector operations are present";
  v2.n128_u64[1] = 136;
  sub_1C63B834C(&v5, &v4, (__int128 *)&v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED828C78, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Allow SimplifyCFG to merge invokes together when appropriate";
  v2.n128_u64[1] = 60;
  sub_1C63B8428(&v5, (char **)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED828D38, &dword_1C475E000);
  v5 = 1;
  v3 = 16;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Limit cases to analyze when converting a switch to select";
  v2.n128_u64[1] = 57;
  sub_1C61798D0((uint64_t)&unk_1ED828DF8, "max-switch-cases-per-result", &v5, &v4, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED828DF8, &dword_1C475E000);
}

uint64_t llvm::simplifyUsersOfIV(llvm::Value *a1, uint64_t a2, llvm::DominatorTree *a3, uint64_t *a4, uint64_t a5, unsigned int *a6, llvm::SCEVExpander *a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  const llvm::Loop *v20;
  const llvm::APInt *v21;
  unsigned int v22;
  char *v23;
  llvm::Value *v24;
  char *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  llvm::Value *v30;
  int v31;
  unsigned int v32;
  llvm::Instruction **SCEVIter;
  llvm::Instruction *v34;
  uint64_t LoopPredecessor;
  llvm::ScalarEvolution *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  llvm::Instruction *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unint64_t v44;
  llvm::ValueHandleBase *v45;
  llvm::Instruction *v46;
  int v47;
  int v48;
  llvm::Value *v49;
  int v50;
  unint64_t *v51;
  char *v52;
  unint64_t v53;
  llvm::ValueHandleBase *v54;
  llvm::ConstantInt **v55;
  unint64_t v56;
  unint64_t v57;
  llvm::APInt *v58;
  unsigned int v59;
  _QWORD *v60;
  llvm::ConstantInt *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  const llvm::SCEV *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  llvm::ValueHandleBase *v78;
  int v79;
  unsigned int v80;
  const llvm::SCEV *v81;
  const llvm::SCEV *UDivExpr;
  _BOOL4 v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  llvm::ValueHandleBase *v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t MulExpr;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  llvm::Instruction *v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  int v110;
  char *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  char *v115;
  unsigned int v116;
  llvm::ValueHandleBase *v117;
  unsigned int v118;
  llvm::Value *v119;
  llvm::ValueHandleBase *v120;
  llvm::Value *v121;
  int v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  char *v133;
  int v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  const llvm::Loop *v144;
  const llvm::SCEV *SCEVAtScope;
  const llvm::Value **v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  const llvm::Value *v150;
  unsigned __int16 v151;
  const llvm::APInt *v152;
  uint64_t v153;
  uint64_t v154;
  llvm::Value *Bool;
  unint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  unsigned int v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  unsigned int v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  unsigned int v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  const llvm::Loop *v194;
  llvm::Value **v195;
  const llvm::SCEV *v196;
  llvm::Value **v197;
  const llvm::SCEV *v198;
  unint64_t v199;
  const llvm::SCEV *v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int v208;
  const llvm::Loop *v209;
  const llvm::SCEV *v210;
  unint64_t v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  unsigned int v218;
  uint64_t *v219;
  const llvm::SCEV *v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  const llvm::Loop *v230;
  const llvm::SCEV *v231;
  uint64_t v232;
  unsigned int v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  unsigned int v238;
  const llvm::SCEV *v239;
  const llvm::SCEV *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  llvm::Value **v245;
  llvm::Value *v246;
  int v247;
  int v248;
  const llvm::SCEV *v249;
  const llvm::SCEV *v250;
  unsigned int v251;
  unint64_t Constant;
  const llvm::SCEV *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  llvm::Value **v258;
  llvm::Value *v259;
  int v260;
  int v261;
  int v262;
  char v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  unsigned int v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  unsigned int v282;
  uint64_t v283;
  unsigned int v284;
  int v285;
  llvm::Type **v286;
  uint64_t v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  uint64_t v291;
  llvm::Type **v292;
  int v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int v297;
  unsigned int v298;
  uint64_t v299;
  llvm::Value *v300;
  int v301;
  unsigned int v302;
  const llvm::SCEV *v303;
  uint64_t SignExtendExpr;
  unint64_t ZeroExtendExpr;
  llvm::Type *v306;
  uint64_t v308;
  uint64_t v309;
  int v310;
  uint64_t v313;
  char v314;
  uint64_t v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  uint64_t v319;
  llvm::Value *v320;
  int v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t v324;
  unsigned int v325;
  unsigned int v326;
  uint64_t v327;
  char *v328;
  int v329;
  unsigned int v330;
  uint64_t v331;
  llvm::Value *v332;
  int v333;
  unsigned int v334;
  unint64_t v335;
  BOOL v336;
  int v337;
  unint64_t StrengthenedNoWrapFlagsFromBinOp;
  uint64_t v340;
  unsigned int v341;
  unsigned int v342;
  uint64_t v343;
  char *v344;
  int v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t RangeRef;
  uint64_t v349;
  unsigned int v350;
  uint64_t v351;
  char v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  int v356;
  char *v357;
  llvm::Constant **v358;
  llvm::Constant *v359;
  int v360;
  char *v361;
  int v362;
  uint64_t v363;
  int v364;
  char *v365;
  llvm::Constant **v366;
  llvm::Constant *v367;
  int v368;
  char *v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  int v373;
  char *v374;
  _QWORD *v375;
  uint64_t v376;
  llvm::Value *v377;
  const llvm::APInt *v378;
  llvm::Value *v379;
  unsigned int v380;
  char v381;
  uint64_t v382;
  unsigned int v383;
  uint64_t v384;
  llvm::Value *v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t v388;
  llvm::ConstantInt *v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  _QWORD *v396;
  llvm::Value *v397;
  uint64_t v398;
  unsigned int v399;
  unint64_t v400;
  llvm::ValueHandleBase *v401;
  llvm::Value *v402;
  uint64_t v403;
  unsigned int v404;
  unsigned int v405;
  uint64_t v406;
  llvm::Value *v407;
  int v408;
  unsigned int v409;
  uint64_t v410;
  BOOL v411;
  uint64_t v412;
  const llvm::SCEV **v413;
  uint64_t i;
  llvm::Value *v415;
  llvm::Value *v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  char *v421;
  uint64_t v422;
  uint64_t v423;
  char v424;
  llvm::Value *v425;
  uint64_t v426;
  char *v427;
  uint64_t v428;
  _QWORD *v429;
  uint64_t v430;
  llvm::Value *v431;
  _QWORD *v432;
  unsigned int v433;
  unint64_t *v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t v437;
  uint64_t *v438;
  unint64_t v439;
  char *v440;
  int32x2_t *v441;
  unint64_t v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  void **v446;
  char *v447;
  int v448;
  int v449;
  int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  llvm::Value **v455;
  llvm::Value *v456;
  int v457;
  int v458;
  llvm::Value *v459;
  uint64_t v460;
  char *v461;
  uint64_t v462;
  char *v463;
  _QWORD *v464;
  uint64_t v465;
  llvm::Value *v466;
  unsigned int v467;
  int v468;
  char v470;
  uint64_t *v471;
  uint64_t v472;
  llvm::UndefValue *v473;
  llvm::ConstantInt **v474;
  _DWORD **v475;
  uint64_t v476;
  _DWORD *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t *v480;
  llvm::Value *v481;
  const llvm::SCEV **v482;
  const llvm::SCEV *v483;
  _BOOL4 isLoopInvariant;
  uint64_t v485;
  uint64_t v486;
  __int16 v487;
  uint64_t v488;
  int v489;
  unsigned int v490;
  _DWORD *v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  unsigned int v496;
  unsigned int v497;
  unsigned int v498;
  uint64_t v499;
  uint64_t v500;
  int v501;
  unsigned int v502;
  const llvm::SCEV *v503;
  unint64_t v504;
  uint64_t v505;
  unsigned int v506;
  unsigned int v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  unsigned int v511;
  const llvm::SCEV *v512;
  _DWORD *v513;
  _DWORD *v514;
  llvm::Value *v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  unsigned int v519;
  unsigned int v520;
  uint64_t v521;
  uint64_t v522;
  int v523;
  unsigned int v524;
  uint64_t v525;
  uint64_t v526;
  const llvm::SCEV *v527;
  uint64_t v528;
  uint64_t v529;
  _QWORD *v530;
  uint64_t v531;
  uint64_t v532;
  _QWORD *v533;
  uint64_t v534;
  uint64_t v535;
  llvm::Value *v536;
  uint64_t v537;
  char *v538;
  uint64_t v539;
  _QWORD *v540;
  uint64_t v541;
  const void *v542;
  unsigned int v543;
  int v544;
  const llvm::SCEV **v545;
  uint64_t v546;
  llvm::Type **v547;
  __int16 v548;
  uint64_t v549;
  llvm::Value *v550;
  llvm::Value *v551;
  int v552;
  llvm::Type *v553;
  llvm::SCEV *v556;
  llvm::SCEV *v557;
  llvm::Value *v560;
  int v561;
  unsigned int *v562;
  llvm::Value *v563;
  _BYTE *v564;
  _BYTE *v565;
  uint64_t v566;
  int v567;
  _BYTE v568[128];
  llvm::Value *v569;
  uint64_t v570;
  const llvm::SCEV **v571;
  uint64_t v572;
  const llvm::SCEV *v573;
  llvm::Value *v574;
  uint64_t v575;
  const llvm::SCEV **v576;
  uint64_t v577;
  const llvm::SCEV *v578;
  void *v579;
  uint64_t v580;
  _BYTE v581[128];
  char *v582;
  uint64_t v583;
  _QWORD v584[2];
  __int16 v585;
  unint64_t v586;
  uint64_t v587;
  char *v588;
  uint64_t v589;
  __int16 v590;
  uint64_t v591;

  v591 = *MEMORY[0x1E0C80C00];
  v12 = *((_DWORD *)a4 + 4);
  if (v12)
  {
    v13 = *((_QWORD *)a1 + 5);
    v14 = *a4;
    v15 = v12 - 1;
    v16 = ((v13 >> 4) ^ (v13 >> 9)) & (v12 - 1);
    v17 = *(_QWORD *)(*a4 + 16 * v16);
    if (v13 == v17)
    {
LABEL_6:
      v20 = *(const llvm::Loop **)(v14 + 16 * v16 + 8);
      goto LABEL_8;
    }
    v18 = 1;
    while (v17 != -4096)
    {
      v19 = v16 + v18++;
      v16 = v19 & v15;
      v17 = *(_QWORD *)(v14 + 16 * v16);
      if (v13 == v17)
        goto LABEL_6;
    }
  }
  v20 = 0;
LABEL_8:
  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFD) == 0xD)
  {
    v564 = v568;
    v565 = v568;
    v566 = 16;
    v567 = 0;
    v579 = v581;
    v580 = 0x800000000;
    sub_1C5FAE5A4(a1, (uint64_t)v20, (llvm::SmallPtrSetImplBase *)&v564, (uint64_t)&v579);
    v22 = v580;
    if (!(_DWORD)v580)
    {
      v561 = 0;
      goto LABEL_738;
    }
    v560 = a1;
    v549 = a8;
    v561 = 0;
    v562 = a6;
    while (1)
    {
      v23 = (char *)v579 + 16 * v22;
      v24 = (llvm::Value *)*((_QWORD *)v23 - 2);
      v25 = (char *)*((_QWORD *)v23 - 1);
      LODWORD(v580) = v22 - 1;
      v563 = v24;
      if (!*((_QWORD *)v24 + 1))
      {
        if ((llvm::wouldInstructionBeTriviallyDead((uint64_t)v24, 0) & 1) != 0)
        {
          v118 = a6[2];
          if (v118 >= a6[3])
          {
            sub_1C578EDF4(a6, (uint64_t *)&v563);
          }
          else
          {
            v119 = v563;
            v120 = (llvm::ValueHandleBase *)(*(_QWORD *)a6 + 24 * v118);
            *(_QWORD *)v120 = 6;
            *((_QWORD *)v120 + 1) = 0;
            *((_QWORD *)v120 + 2) = v119;
            if (v119 != (llvm::Value *)-8192 && v119 != (llvm::Value *)-4096 && v119)
            {
              llvm::ValueHandleBase::AddToUseList(v120);
              v118 = a6[2];
            }
            a6[2] = v118 + 1;
          }
          goto LABEL_538;
        }
        v24 = v563;
      }
      if (v24 == v560)
        goto LABEL_538;
      v586 = (unint64_t)v24;
      if ((*(_DWORD *)(*(_QWORD *)v24 + 8) & 0xFD) != 0xD)
        goto LABEL_42;
      v26 = *(_QWORD *)(a2 + 104);
      v27 = *(_DWORD *)(a2 + 120);
      if (!v27)
        goto LABEL_20;
      v28 = (v27 - 1) & ((v24 >> 4) ^ (v24 >> 9));
      v29 = v26 + 48 * v28;
      v30 = *(llvm::Value **)(v29 + 24);
      if (v30 != v24)
        break;
LABEL_21:
      if (v29 == v26 + 48 * v27 || (SCEVIter = *(llvm::Instruction ***)(v29 + 40)) == 0)
        SCEVIter = (llvm::Instruction **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v24);
      if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a2, (const llvm::SCEV *)SCEVIter, v20) == 1&& (sub_1C5B2BDCC((llvm::ScalarEvolution **)a7, (uint64_t)SCEVIter, v20, dword_1ED8377D0, a5, (llvm::Instruction *)v586) & 1) == 0)
      {
        v34 = (llvm::Instruction *)v586;
        LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v20);
        if (LoopPredecessor)
        {
          v39 = *(_QWORD *)(LoopPredecessor + 40);
          result = LoopPredecessor + 40;
          v38 = v39;
          if (v39 != result)
          {
            v40 = (llvm::Instruction *)(v38 - 24);
            if (v38)
              v41 = v38 - 24;
            else
              v41 = 0;
            if (*(_BYTE *)(v41 + 16) != 30)
            {
              switch(*(_BYTE *)(v41 + 16))
              {
                case 0x1E:
                  __break(1u);
                  return result;
                case 0x1F:
                  v373 = (*(_DWORD *)(v41 + 20) >> 1) & 0x3FFFFFF;
                  goto LABEL_504;
                case 0x20:
                  v373 = (*(_DWORD *)(v41 + 20) & 0x7FFFFFF) - 1;
                  goto LABEL_504;
                case 0x27:
                  v373 = *(_DWORD *)(v41 + 80) + 1;
LABEL_504:
                  if (v373 != 1)
                    goto LABEL_34;
                  goto LABEL_33;
                default:
                  goto LABEL_34;
              }
            }
            if ((*(_DWORD *)(v41 + 20) & 0x7FFFFFF) != 3)
LABEL_33:
              v34 = v40;
          }
        }
LABEL_34:
        if (llvm::isSafeToExpandAt((llvm *)SCEVIter, (const llvm::BasicBlock **)v34, (const llvm::Instruction *)a2, v36))
        {
          v42 = llvm::SCEVExpander::expandCodeForImpl(a7, SCEVIter, *(llvm::Type **)v586, v34);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v586, (llvm::Value *)v42, (llvm::Value *)1);
          v43 = a6[2];
          if (v43 >= a6[3])
          {
            sub_1C578EDF4(a6, (uint64_t *)&v586);
          }
          else
          {
            v44 = v586;
            v45 = (llvm::ValueHandleBase *)(*(_QWORD *)a6 + 24 * v43);
            *(_QWORD *)v45 = 6;
            *((_QWORD *)v45 + 1) = 0;
            *((_QWORD *)v45 + 2) = v44;
            if (v44 != -8192 && v44 != -4096 && v44)
            {
              llvm::ValueHandleBase::AddToUseList(v45);
              v43 = a6[2];
            }
            a6[2] = v43 + 1;
          }
          v561 = 1;
          goto LABEL_538;
        }
      }
LABEL_42:
      if (!v25)
        goto LABEL_538;
      while (1)
      {
        v46 = v563;
        v582 = v25;
        v47 = *((unsigned __int8 *)v563 + 16);
        if (v47 != 54 && v47 != 47)
          goto LABEL_163;
        v48 = *((_DWORD *)v563 + 5);
        v49 = (v48 & 0x40000000) != 0
            ? (llvm::Value *)*((_QWORD *)v563 - 1)
            : (llvm::Value *)((char *)v563 - 32 * (v48 & 0x7FFFFFF));
        if (v25 != *(char **)v49
          || *(_BYTE *)(*((_QWORD *)v49 + 4) + 16) != 16
          || v25[16] - 41 > 0x11)
        {
          goto LABEL_163;
        }
        v50 = *((_DWORD *)v25 + 5);
        v51 = (v50 & 0x40000000) != 0
            ? (unint64_t *)*((_QWORD *)v25 - 1)
            : (unint64_t *)&v25[-32 * (v50 & 0x7FFFFFF)];
        if (*(_BYTE *)(v51[4] + 16) != 16)
          goto LABEL_163;
        if ((v48 & 0x40000000) != 0)
          v52 = (char *)*((_QWORD *)v563 - 1);
        else
          v52 = (char *)v563 - 32 * (v48 & 0x7FFFFFF);
        v53 = *v51;
        v54 = (llvm::ValueHandleBase *)*((_QWORD *)v52 + 4);
        if (v47 == 54)
        {
          v55 = *(llvm::ConstantInt ***)v563;
          v56 = *(unsigned int *)(*(_QWORD *)v563 + 8);
          v57 = v56 >> 8;
          v58 = (llvm::ValueHandleBase *)((char *)v54 + 24);
          v59 = *((_DWORD *)v54 + 8);
          if (v59 >= 0x41)
          {
            if (v59 - llvm::APInt::countLeadingZerosSlowCase(v58) >= 0x41)
              goto LABEL_163;
            v60 = **(_QWORD ***)v58;
          }
          else
          {
            v60 = *(_QWORD **)v58;
          }
          if ((unint64_t)v60 >= v57)
            goto LABEL_163;
          v61 = *v55;
          LODWORD(v587) = v56 >> 8;
          if (v56 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v586, 0, 0);
            LODWORD(v57) = v587;
          }
          else
          {
            v586 = 0;
          }
          v62 = 1 << (char)v60;
          if (v57 > 0x40)
            *(_QWORD *)(v586 + 8 * (v60 >> 6)) |= v62;
          else
            v586 |= v62;
          v54 = llvm::ConstantInt::get(v61, (llvm::LLVMContext *)&v586, v21);
          if (v587 >= 0x41 && v586)
            MEMORY[0x1CAA32F9C](v586, 0x1000C8000313F17);
        }
        v63 = *(_QWORD *)(a2 + 104);
        v64 = *(_DWORD *)(a2 + 120);
        v65 = v53 >> 4;
        if (!v64)
          goto LABEL_78;
        v66 = v64 - 1;
        v67 = (v64 - 1) & (v65 ^ (v53 >> 9));
        v68 = v63 + 48 * v67;
        v69 = *(_QWORD *)(v68 + 24);
        if (v69 != v53)
        {
          v70 = 1;
          while (v69 != -4096)
          {
            v71 = v67 + v70++;
            v67 = v71 & v66;
            v68 = v63 + 48 * (v71 & v66);
            v69 = *(_QWORD *)(v68 + 24);
            if (v69 == v53)
              goto LABEL_79;
          }
LABEL_78:
          v68 = v63 + 48 * v64;
        }
LABEL_79:
        if (v68 == v63 + 48 * v64 || (v72 = *(const llvm::SCEV **)(v68 + 40)) == 0)
        {
          v72 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v53);
          v63 = *(_QWORD *)(a2 + 104);
          v64 = *(_DWORD *)(a2 + 120);
        }
        v73 = v54 >> 4;
        v74 = v63 + 48 * v64;
        if (!v64)
          goto LABEL_88;
        v75 = v64 - 1;
        v76 = v75 & (v73 ^ (v54 >> 9));
        v77 = v63 + 48 * v76;
        v78 = *(llvm::ValueHandleBase **)(v77 + 24);
        if (v78 != v54)
        {
          v79 = 1;
          while (v78 != (llvm::ValueHandleBase *)-4096)
          {
            v80 = v76 + v79++;
            v76 = v80 & v75;
            v77 = v63 + 48 * v76;
            v78 = *(llvm::ValueHandleBase **)(v77 + 24);
            if (v78 == v54)
              goto LABEL_89;
          }
LABEL_88:
          v77 = v74;
        }
LABEL_89:
        if (v77 == v74 || (v81 = *(const llvm::SCEV **)(v77 + 40)) == 0)
          v81 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v54);
        UDivExpr = llvm::ScalarEvolution::getUDivExpr((llvm::ScalarEvolution *)a2, v72, v81);
        if ((*((_BYTE *)v46 + 17) & 2) == 0)
        {
          v83 = 0;
          goto LABEL_117;
        }
        v84 = *(_QWORD *)(a2 + 104);
        v85 = *(_DWORD *)(a2 + 120);
        if (!v85)
          goto LABEL_100;
        v86 = v85 - 1;
        v87 = (v85 - 1) & (v65 ^ (v53 >> 9));
        v88 = v84 + 48 * v87;
        v89 = *(_QWORD *)(v88 + 24);
        if (v89 != v53)
        {
          v90 = 1;
          while (v89 != -4096)
          {
            v91 = v87 + v90++;
            v87 = v91 & v86;
            v88 = v84 + 48 * (v91 & v86);
            v89 = *(_QWORD *)(v88 + 24);
            if (v89 == v53)
              goto LABEL_101;
          }
LABEL_100:
          v88 = v84 + 48 * v85;
        }
LABEL_101:
        if (v88 == v84 + 48 * v85 || (v92 = *(_QWORD *)(v88 + 40)) == 0)
        {
          v92 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v53);
          v84 = *(_QWORD *)(a2 + 104);
          v85 = *(_DWORD *)(a2 + 120);
        }
        v93 = v84 + 48 * v85;
        if (v85)
        {
          v94 = v85 - 1;
          v95 = v94 & (v73 ^ (v54 >> 9));
          v96 = v84 + 48 * v95;
          v97 = *(llvm::ValueHandleBase **)(v96 + 24);
          if (v97 == v54)
            goto LABEL_111;
          v98 = 1;
          while (v97 != (llvm::ValueHandleBase *)-4096)
          {
            v99 = v95 + v98++;
            v95 = v99 & v94;
            v96 = v84 + 48 * v95;
            v97 = *(llvm::ValueHandleBase **)(v96 + 24);
            if (v97 == v54)
              goto LABEL_111;
          }
        }
        v96 = v93;
LABEL_111:
        if (v96 == v93 || (v100 = *(_QWORD *)(v96 + 40)) == 0)
          v100 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v54);
        v586 = (unint64_t)&v588;
        v588 = (char *)UDivExpr;
        v589 = v100;
        v587 = 0x200000002;
        MulExpr = llvm::ScalarEvolution::getMulExpr(a2, (uint64_t)&v586, 0, 0);
        if ((char **)v586 != &v588)
          free((void *)v586);
        v83 = v92 != MulExpr;
LABEL_117:
        if ((*(_DWORD *)(*(_QWORD *)v46 + 8) & 0xFD) != 0xD)
          goto LABEL_163;
        v102 = *(_QWORD *)(a2 + 104);
        v103 = *(_DWORD *)(a2 + 120);
        if (!v103)
          goto LABEL_124;
        v104 = (v103 - 1) & ((v46 >> 4) ^ (v46 >> 9));
        v105 = v102 + 48 * v104;
        v106 = *(llvm::Instruction **)(v105 + 24);
        if (v106 != v46)
        {
          v107 = 1;
          while (v106 != (llvm::Instruction *)-4096)
          {
            v108 = v104 + v107++;
            v104 = v108 & (v103 - 1);
            v105 = v102 + 48 * v104;
            v106 = *(llvm::Instruction **)(v105 + 24);
            if (v106 == v46)
              goto LABEL_125;
          }
LABEL_124:
          v105 = v102 + 48 * v103;
        }
LABEL_125:
        if (v105 == v102 + 48 * v103 || (v109 = *(_QWORD *)(v105 + 40)) == 0)
          v109 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v46);
        if ((const llvm::SCEV *)v109 != UDivExpr)
          goto LABEL_163;
        v110 = *((_DWORD *)v46 + 5);
        if ((v110 & 0x40000000) != 0)
          v111 = (char *)*((_QWORD *)v46 - 1);
        else
          v111 = (char *)v46 - 32 * (v110 & 0x7FFFFFF);
        if (*(_QWORD *)v111)
        {
          **((_QWORD **)v111 + 2) = *((_QWORD *)v111 + 1);
          v112 = *((_QWORD *)v111 + 1);
          if (v112)
            *(_QWORD *)(v112 + 16) = *((_QWORD *)v111 + 2);
        }
        *(_QWORD *)v111 = v53;
        a6 = v562;
        if (v53)
        {
          v113 = (_QWORD *)(v53 + 8);
          v114 = *(_QWORD *)(v53 + 8);
          *((_QWORD *)v111 + 1) = v114;
          if (v114)
            *(_QWORD *)(v114 + 16) = v111 + 8;
          *((_QWORD *)v111 + 2) = v113;
          *v113 = v111;
        }
        if (v83)
          llvm::Instruction::dropPoisonGeneratingFlags(v46);
        v115 = v582;
        if (*((_QWORD *)v582 + 1))
          goto LABEL_147;
        v116 = v562[2];
        if (v116 >= v562[3])
          break;
        v117 = (llvm::ValueHandleBase *)(*(_QWORD *)v562 + 24 * v116);
        *(_QWORD *)v117 = 6;
        *((_QWORD *)v117 + 1) = 0;
        *((_QWORD *)v117 + 2) = v115;
        if (v115 != (char *)-8192 && v115 != (char *)-4096 && v115)
        {
          llvm::ValueHandleBase::AddToUseList(v117);
          v116 = v562[2];
        }
        v562[2] = v116 + 1;
LABEL_147:
        if (!v53)
          goto LABEL_162;
LABEL_148:
        v561 = 1;
        v25 = (char *)v53;
        if (*(unsigned __int8 *)(v53 + 16) < 0x1Cu)
          goto LABEL_538;
      }
      sub_1C578EDF4(v562, (uint64_t *)&v582);
      if (v53)
        goto LABEL_148;
LABEL_162:
      v561 = 1;
LABEL_163:
      v121 = v563;
      v122 = *((unsigned __int8 *)v563 + 16);
      if (v563 && v122 == 81)
      {
        v569 = v563;
        v123 = (char *)v563 - 64;
        a6 = v562;
        v552 = *((_WORD *)v563 + 9) & 0x3F;
        if (*((char **)v563 - 8) == v25)
        {
          v125 = 0;
          v124 = *((_WORD *)v563 + 9) & 0x3F;
        }
        else
        {
          v124 = dword_1C8676494[*((_WORD *)v563 + 9) & 0x3F];
          v125 = 1;
        }
        v136 = *((_DWORD *)a4 + 4);
        if (!v136)
          goto LABEL_188;
        v137 = *((_QWORD *)v563 + 5);
        v138 = *a4;
        v139 = v136 - 1;
        v140 = ((v137 >> 4) ^ (v137 >> 9)) & (v136 - 1);
        v141 = *(_QWORD *)(*a4 + 16 * v140);
        if (v137 == v141)
        {
LABEL_187:
          v144 = *(const llvm::Loop **)(v138 + 16 * v140 + 8);
        }
        else
        {
          v142 = 1;
          while (v141 != -4096)
          {
            v143 = v140 + v142++;
            v140 = v143 & v139;
            v141 = *(_QWORD *)(v138 + 16 * v140);
            if (v137 == v141)
              goto LABEL_187;
          }
LABEL_188:
          v144 = 0;
        }
        SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, *(llvm::Value **)&v123[32 * v125], v144);
        v556 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, *(llvm::Value **)&v123[32 * (v125 ^ 1)], v144);
        v146 = (const llvm::Value **)v584;
        v582 = (char *)v584;
        v583 = 0x400000000;
        v147 = *((_QWORD *)v121 + 1);
        if (v147)
        {
          v148 = 0;
          do
          {
            v149 = *(_QWORD *)(v147 + 24);
            if (v148 >= HIDWORD(v583))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v582, (uint64_t)v584, v148 + 1, 8);
              v148 = v583;
            }
            *(_QWORD *)&v582[8 * v148] = v149;
            v148 = v583 + 1;
            LODWORD(v583) = v583 + 1;
            v147 = *(_QWORD *)(v147 + 8);
          }
          while (v147);
          v146 = (const llvm::Value **)v582;
        }
        else
        {
          v148 = 0;
        }
        v150 = sub_1C5FAE698(v146, v148, a3);
        v151 = llvm::ScalarEvolution::evaluatePredicateAt((uint64_t ****)a2, v124, SCEVAtScope, v556, (uint64_t)v150);
        if (v151 >= 0x100u)
        {
          Bool = llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)v121, (llvm::LLVMContext *)(v151 != 0), v152);
          v561 = 1;
          llvm::Value::doRAUW(v121, Bool, (llvm::Value *)1);
          sub_1C5FAE768(v562, (uint64_t *)&v569);
          goto LABEL_247;
        }
        v153 = *((_WORD *)v121 + 9) & 0x3F;
        if (*((char **)v121 - 8) == v25)
        {
          v154 = 0;
        }
        else
        {
          v153 = dword_1C8676494[v153];
          v154 = 1;
        }
        v186 = *((_DWORD *)a4 + 4);
        v550 = v121;
        if (v186)
        {
          v187 = *((_QWORD *)v121 + 5);
          v188 = *a4;
          v189 = v186 - 1;
          v190 = ((v187 >> 4) ^ (v187 >> 9)) & (v186 - 1);
          v191 = *(_QWORD *)(*a4 + 16 * v190);
          if (v187 != v191)
          {
            v192 = 1;
            while (v191 != -4096)
            {
              v193 = v190 + v192++;
              v190 = v193 & v189;
              v191 = *(_QWORD *)(v188 + 16 * v190);
              if (v187 == v191)
                goto LABEL_238;
            }
            goto LABEL_239;
          }
LABEL_238:
          v194 = *(const llvm::Loop **)(v188 + 16 * v190 + 8);
        }
        else
        {
LABEL_239:
          v194 = 0;
        }
        v195 = (llvm::Value **)&v123[32 * v154];
        v196 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, *v195, v194);
        v578 = v196;
        v197 = (llvm::Value **)&v123[32 * (v154 ^ 1)];
        v198 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, *v197, v194);
        v573 = v198;
        if (v25[16] != 83
          || (llvm::ScalarEvolution::getLoopInvariantPredicate((llvm::ScalarEvolution *)a2, v153, (uint64_t)v196, v198, v20, (uint64_t)&v574), !(_BYTE)v577))
        {
          a6 = v562;
          goto LABEL_243;
        }
        v548 = (__int16)v574;
        v412 = v575;
        v413 = v576;
        v571 = v576;
        v572 = v575;
        v586 = 1;
        for (i = 8; i != 72; i += 16)
          *(unint64_t *)((char *)&v586 + i) = -4096;
        v415 = *v195;
        sub_1C61B5A08(&v586, (uint64_t *)&v578)[1] = v415;
        v416 = *v197;
        sub_1C61B5A08(&v586, (uint64_t *)&v573)[1] = v416;
        v417 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v20);
        a6 = v562;
        if (!v417)
          goto LABEL_694;
        v418 = *((_DWORD *)v25 + 5);
        v419 = v418 & 0x7FFFFFF;
        if ((v418 & 0x7FFFFFF) == 0)
          goto LABEL_694;
        v420 = 0;
        v421 = &v25[-32 * v419];
        v422 = 32 * *((unsigned int *)v25 + 15);
        v423 = 32 * v419;
        while (1)
        {
          if ((v418 & 0x40000000) != 0)
          {
            if (*(_QWORD *)(*((_QWORD *)v25 - 1) + v422) == v417)
            {
              v421 = (char *)*((_QWORD *)v25 - 1);
LABEL_683:
              v517 = *(_QWORD *)&v421[v420];
              v518 = *(_QWORD *)(a2 + 104);
              v519 = *(_DWORD *)(a2 + 120);
              if (v519)
              {
                v520 = (v519 - 1) & ((v517 >> 4) ^ (v517 >> 9));
                v521 = v518 + 48 * v520;
                v522 = *(_QWORD *)(v521 + 24);
                if (v522 != v517)
                {
                  v523 = 1;
                  while (v522 != -4096)
                  {
                    v524 = v520 + v523++;
                    v520 = v524 & (v519 - 1);
                    v521 = v518 + 48 * v520;
                    v522 = *(_QWORD *)(v521 + 24);
                    if (v522 == v517)
                      goto LABEL_690;
                  }
                  goto LABEL_689;
                }
              }
              else
              {
LABEL_689:
                v521 = v518 + 48 * v519;
              }
LABEL_690:
              if (v521 == v518 + 48 * v519 || (v525 = *(_QWORD *)(v521 + 40)) == 0)
                v525 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v517);
              v570 = v525;
              sub_1C61B5A08(&v586, &v570)[1] = v517;
LABEL_694:
              v526 = sub_1C61B5A08(&v586, &v572)[1];
              v527 = (const llvm::SCEV *)sub_1C61B5A08(&v586, (uint64_t *)&v571)[1];
              if (!v526 && v412 && !*(_WORD *)(v412 + 24))
                v526 = *(_QWORD *)(v412 + 32);
              if (v527)
              {
LABEL_702:
                if (!v526 || !v527)
                  goto LABEL_717;
                *((_WORD *)v550 + 9) = *((_WORD *)v550 + 9) & 0xFFC0 | v548;
                if (*((_QWORD *)v550 - 8))
                {
                  **((_QWORD **)v550 - 6) = *((_QWORD *)v550 - 7);
                  v528 = *((_QWORD *)v550 - 7);
                  if (v528)
                    *(_QWORD *)(v528 + 16) = *((_QWORD *)v550 - 6);
                }
                *((_QWORD *)v550 - 8) = v526;
                v531 = *(_QWORD *)(v526 + 8);
                v530 = (_QWORD *)(v526 + 8);
                v529 = v531;
                *((_QWORD *)v550 - 7) = v531;
                if (v531)
                  *(_QWORD *)(v529 + 16) = (char *)v550 - 56;
                *((_QWORD *)v550 - 6) = v530;
                *v530 = v123;
                if (*((_QWORD *)v550 - 4))
                {
                  **((_QWORD **)v550 - 2) = *((_QWORD *)v550 - 3);
                  v532 = *((_QWORD *)v550 - 3);
                  if (v532)
                    *(_QWORD *)(v532 + 16) = *((_QWORD *)v550 - 2);
                }
                *((_QWORD *)v550 - 4) = v527;
                v535 = *((_QWORD *)v527 + 1);
                v533 = (_QWORD *)((char *)v527 + 8);
                v534 = v535;
                *((_QWORD *)v550 - 3) = v535;
                if (v535)
                  *(_QWORD *)(v534 + 16) = (char *)v550 - 24;
                *((_QWORD *)v550 - 2) = v533;
                *v533 = (char *)v550 - 32;
                if ((v586 & 1) == 0)
                  MEMORY[0x1CAA32FB4](v587, 8);
                v561 = 1;
              }
              else
              {
                if (v413 && !*((_WORD *)v413 + 12))
                {
                  v527 = v413[4];
                  goto LABEL_702;
                }
LABEL_717:
                if ((v586 & 1) == 0)
                  MEMORY[0x1CAA32FB4](v587, 8);
LABEL_243:
                if ((v552 - 38) <= 3
                  && llvm::ScalarEvolution::isKnownNonNegative((llvm::ScalarEvolution *)a2, SCEVAtScope)
                  && llvm::ScalarEvolution::isKnownNonNegative((llvm::ScalarEvolution *)a2, v556))
                {
                  *((_WORD *)v550 + 9) = *((_WORD *)v550 + 9) & 0xFFC0 | (v552 - 4);
                  v561 = 1;
                }
              }
LABEL_247:
              if (v582 != (char *)v584)
                free(v582);
LABEL_536:
              v397 = (llvm::Value *)v25;
              v398 = (uint64_t)v20;
LABEL_537:
              sub_1C5FAE5A4(v397, v398, (llvm::SmallPtrSetImplBase *)&v564, (uint64_t)&v579);
              goto LABEL_538;
            }
          }
          else if (*(_QWORD *)&v421[v422] == v417)
          {
            goto LABEL_683;
          }
          v420 += 32;
          v422 += 8;
          if (v423 == v420)
            goto LABEL_694;
        }
      }
      a6 = v562;
      if (v563 && (v122 - 59) >= 0xFFFFFFEE)
      {
        if ((v122 - 50) < 2)
        {
          v126 = (char *)*((_QWORD *)v563 - 8);
          if (v122 != 51 && v126 != v25)
            goto LABEL_536;
          v128 = *(_QWORD *)(a2 + 104);
          v129 = *(_DWORD *)(a2 + 120);
          if (!v129)
            goto LABEL_249;
          v130 = v129 - 1;
          v131 = (v129 - 1) & ((v126 >> 4) ^ (v126 >> 9));
          v132 = v128 + 48 * v131;
          v133 = *(char **)(v132 + 24);
          if (v133 != v126)
          {
            v134 = 1;
            while (v133 != (char *)-4096)
            {
              v135 = v131 + v134++;
              v131 = v135 & v130;
              v132 = v128 + 48 * (v135 & v130);
              v133 = *(char **)(v132 + 24);
              if (v133 == v126)
                goto LABEL_250;
            }
LABEL_249:
            v132 = v128 + 48 * v129;
          }
LABEL_250:
          v199 = *((_QWORD *)v563 - 4);
          if (v132 == v128 + 48 * v129 || (v200 = *(const llvm::SCEV **)(v132 + 40)) == 0)
            v200 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, *((_QWORD *)v563 - 8));
          v201 = *((_DWORD *)a4 + 4);
          if (v201)
          {
            v202 = *((_QWORD *)v121 + 5);
            v203 = *a4;
            v204 = v201 - 1;
            v205 = ((v202 >> 4) ^ (v202 >> 9)) & (v201 - 1);
            v206 = *(_QWORD *)(*a4 + 16 * v205);
            if (v202 != v206)
            {
              v207 = 1;
              while (v206 != -4096)
              {
                v208 = v205 + v207++;
                v205 = v208 & v204;
                v206 = *(_QWORD *)(v203 + 16 * v205);
                if (v202 == v206)
                  goto LABEL_258;
              }
              goto LABEL_279;
            }
LABEL_258:
            v209 = *(const llvm::Loop **)(v203 + 16 * v205 + 8);
          }
          else
          {
LABEL_279:
            v209 = 0;
          }
          v231 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, v200, v209);
          if (v122 == 51 && !llvm::ScalarEvolution::isKnownNonNegative((llvm::ScalarEvolution *)a2, v231))
            goto LABEL_536;
          v232 = *(_QWORD *)(a2 + 104);
          v233 = *(_DWORD *)(a2 + 120);
          if (v233)
          {
            v234 = (v233 - 1) & ((v199 >> 4) ^ (v199 >> 9));
            v235 = v232 + 48 * v234;
            v236 = *(_QWORD *)(v235 + 24);
            if (v236 != v199)
            {
              v237 = 1;
              while (v236 != -4096)
              {
                v238 = v234 + v237++;
                v234 = v238 & (v233 - 1);
                v235 = v232 + 48 * v234;
                v236 = *(_QWORD *)(v235 + 24);
                if (v236 == v199)
                  goto LABEL_299;
              }
              goto LABEL_298;
            }
          }
          else
          {
LABEL_298:
            v235 = v232 + 48 * v233;
          }
LABEL_299:
          if (v235 == v232 + 48 * v233 || (v249 = *(const llvm::SCEV **)(v235 + 40)) == 0)
            v249 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v199);
          v250 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, v249, v209);
          if (v126 == v25)
          {
            if (v122 == 51)
              v251 = 40;
            else
              v251 = 36;
            if (llvm::ScalarEvolution::isKnownPredicate((uint64_t ****)a2, v251, v231, v250))
            {
              v586 = (unint64_t)v121;
              v561 = 1;
              llvm::Value::doRAUW(v121, *((llvm::Value **)v121 - 8), (llvm::Value *)1);
              v471 = (uint64_t *)&v586;
            }
            else
            {
              Constant = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a2, *(llvm::Type **)v121, 1, 0);
              llvm::ScalarEvolution::getMinusSCEV(a2, (uint64_t)v231, Constant);
              if (!llvm::ScalarEvolution::isKnownPredicate((uint64_t ****)a2, v251, v253, v250))
                goto LABEL_308;
              v582 = (char *)v121;
              v474 = *(llvm::ConstantInt ***)v121;
              v475 = (_DWORD **)*((_QWORD *)v121 - 8);
              v476 = *((_QWORD *)v121 - 4);
              v477 = operator new(0x80uLL);
              v477[21] = v477[21] & 0x38000000 | 2;
              v478 = (uint64_t)(v477 + 16);
              *(_QWORD *)v477 = 0;
              *((_QWORD *)v477 + 1) = 0;
              *((_QWORD *)v477 + 2) = 0;
              *((_QWORD *)v477 + 3) = v477 + 16;
              *((_QWORD *)v477 + 4) = 0;
              *((_QWORD *)v477 + 5) = 0;
              *((_QWORD *)v477 + 6) = 0;
              *((_QWORD *)v477 + 7) = v477 + 16;
              v590 = 257;
              sub_1C4774CC4(*v475);
              llvm::CmpInst::CmpInst(v478, v479, 53, 32, (uint64_t)v475, v476, (uint64_t)&v586, (uint64_t)v121, 0);
              v480 = (uint64_t *)llvm::ConstantInt::get((llvm::ConstantInt *)v474, 0, 0);
              v586 = (unint64_t)"iv.rem";
              v590 = 259;
              v481 = sub_1C4FC8748(v478, v480, (uint64_t)v475, (uint64_t)&v586, (uint64_t)v121, 0);
LABEL_723:
              v561 = 1;
              llvm::Value::doRAUW(v121, v481, (llvm::Value *)1);
              v471 = (uint64_t *)&v582;
            }
            sub_1C6317B3C(v562, v471);
            goto LABEL_536;
          }
LABEL_308:
          if (v122 != 51 || !llvm::ScalarEvolution::isKnownNonNegative((llvm::ScalarEvolution *)a2, v250))
            goto LABEL_536;
          v582 = (char *)v121;
          if ((*((_BYTE *)v121 + 23) & 0x10) != 0)
          {
            v254 = ***(_QWORD ***)v121;
            v255 = *(_QWORD *)(v254 + 152);
            v256 = *(unsigned int *)(v254 + 168);
            if ((_DWORD)v256)
            {
              LODWORD(v257) = (v256 - 1) & ((v121 >> 4) ^ (v121 >> 9));
              v258 = (llvm::Value **)(v255 + 16 * v257);
              v259 = *v258;
              if (*v258 != v121)
              {
                v260 = 1;
                do
                {
                  if (v259 == (llvm::Value *)-4096)
                    goto LABEL_720;
                  v261 = v257 + v260++;
                  v257 = v261 & (v256 - 1);
                  v259 = *(llvm::Value **)(v255 + 16 * v257);
                }
                while (v259 != v121);
                v258 = (llvm::Value **)(v255 + 16 * v257);
              }
            }
            else
            {
LABEL_720:
              v258 = (llvm::Value **)(v255 + 16 * v256);
            }
            v536 = v258[1];
            v539 = *(_QWORD *)v536;
            v538 = (char *)v536 + 16;
            v537 = v539;
          }
          else
          {
            v537 = 0;
            v538 = &byte_1C871356D;
          }
          v540 = (_QWORD *)*((_QWORD *)v121 - 8);
          v541 = *((_QWORD *)v121 - 4);
          v590 = 773;
          v586 = (unint64_t)v538;
          v587 = v537;
          v588 = ".urem";
          v481 = llvm::BinaryOperator::Create(22, v540, v541, (uint64_t)&v586, (uint64_t)v121);
          goto LABEL_723;
        }
        if (v122 == 48)
        {
          v156 = *((_QWORD *)v563 - 8);
          v157 = *(_QWORD *)(a2 + 104);
          v158 = *(_DWORD *)(a2 + 120);
          if (!v158)
            goto LABEL_259;
          v159 = v158 - 1;
          v160 = ((v156 >> 4) ^ (v156 >> 9)) & (v158 - 1);
          v161 = v157 + 48 * v160;
          v162 = *(_QWORD *)(v161 + 24);
          if (v162 != v156)
          {
            v163 = 1;
            while (v162 != -4096)
            {
              v164 = v160 + v163++;
              v160 = v164 & v159;
              v161 = v157 + 48 * (v164 & v159);
              v162 = *(_QWORD *)(v161 + 24);
              if (v162 == v156)
                goto LABEL_260;
            }
LABEL_259:
            v161 = v157 + 48 * v158;
          }
LABEL_260:
          if (v161 == v157 + 48 * v158 || (v210 = *(const llvm::SCEV **)(v161 + 40)) == 0)
          {
            v210 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v156);
            v157 = *(_QWORD *)(a2 + 104);
            v158 = *(_DWORD *)(a2 + 120);
          }
          v211 = *((_QWORD *)v121 - 4);
          v212 = v157 + 48 * v158;
          if (v158)
          {
            v213 = v158 - 1;
            v214 = ((v211 >> 4) ^ (v211 >> 9)) & v213;
            v215 = v157 + 48 * v214;
            v216 = *(_QWORD *)(v215 + 24);
            if (v216 != v211)
            {
              v217 = 1;
              while (v216 != -4096)
              {
                v218 = v214 + v217++;
                v214 = v218 & v213;
                v215 = v157 + 48 * v214;
                v216 = *(_QWORD *)(v215 + 24);
                if (v216 == v211)
                  goto LABEL_270;
              }
              goto LABEL_269;
            }
          }
          else
          {
LABEL_269:
            v215 = v212;
          }
LABEL_270:
          v219 = a4;
          if (v215 == v212 || (v220 = *(const llvm::SCEV **)(v215 + 40)) == 0)
          {
            v221 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v211);
            v219 = a4;
            v220 = (const llvm::SCEV *)v221;
          }
          v222 = *((_DWORD *)v219 + 4);
          if (v222)
          {
            v223 = *((_QWORD *)v121 + 5);
            v224 = *v219;
            v225 = v222 - 1;
            v226 = ((v223 >> 4) ^ (v223 >> 9)) & (v222 - 1);
            v227 = *(_QWORD *)(v224 + 16 * v226);
            if (v223 != v227)
            {
              v228 = 1;
              while (v227 != -4096)
              {
                v229 = v226 + v228++;
                v226 = v229 & v225;
                v227 = *(_QWORD *)(v224 + 16 * v226);
                if (v223 == v227)
                  goto LABEL_278;
              }
              goto LABEL_288;
            }
LABEL_278:
            v230 = *(const llvm::Loop **)(v224 + 16 * v226 + 8);
          }
          else
          {
LABEL_288:
            v230 = 0;
          }
          v239 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, v210, v230);
          v240 = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)a2, v220, v230);
          if (llvm::ScalarEvolution::isKnownNonNegative((llvm::ScalarEvolution *)a2, v239)
            && llvm::ScalarEvolution::isKnownNonNegative((llvm::ScalarEvolution *)a2, v240))
          {
            if ((*((_BYTE *)v121 + 23) & 0x10) != 0)
            {
              v241 = ***(_QWORD ***)v121;
              v242 = *(_QWORD *)(v241 + 152);
              v243 = *(unsigned int *)(v241 + 168);
              if ((_DWORD)v243)
              {
                LODWORD(v244) = (v243 - 1) & ((v121 >> 4) ^ (v121 >> 9));
                v245 = (llvm::Value **)(v242 + 16 * v244);
                v246 = *v245;
                if (*v245 != v121)
                {
                  v247 = 1;
                  do
                  {
                    if (v246 == (llvm::Value *)-4096)
                      goto LABEL_594;
                    v248 = v244 + v247++;
                    v244 = v248 & (v243 - 1);
                    v246 = *(llvm::Value **)(v242 + 16 * v244);
                  }
                  while (v246 != v121);
                  v245 = (llvm::Value **)(v242 + 16 * v244);
                }
              }
              else
              {
LABEL_594:
                v245 = (llvm::Value **)(v242 + 16 * v243);
              }
              v425 = v245[1];
              v428 = *(_QWORD *)v425;
              v427 = (char *)v425 + 16;
              v426 = v428;
            }
            else
            {
              v426 = 0;
              v427 = &byte_1C871356D;
            }
            v429 = (_QWORD *)*((_QWORD *)v121 - 8);
            v430 = *((_QWORD *)v121 - 4);
            v590 = 773;
            v586 = (unint64_t)v427;
            v587 = v426;
            v588 = ".udiv";
            v431 = llvm::BinaryOperator::Create(19, v429, v430, (uint64_t)&v586, (uint64_t)v121);
            *((_BYTE *)v431 + 17) = *((_BYTE *)v431 + 17) & 0xFD | *((_BYTE *)v121 + 17) & 2;
            llvm::Value::doRAUW(v121, v431, (llvm::Value *)1);
            v586 = 6;
            v587 = 0;
            v588 = (char *)v121;
            if (v121 != (llvm::Value *)-8192 && v121 != (llvm::Value *)-4096 && v121)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v586);
            v432 = (_QWORD *)sub_1C5087E70(v562, (unint64_t)&v586, 1);
            v433 = v562[2];
            v434 = (unint64_t *)(*(_QWORD *)v562 + 24 * v433);
            *v434 = 6;
            v434[1] = 0;
            v435 = (unint64_t)(v434 + 1);
            v436 = v432[2];
            v434[2] = v436;
            if (v436 != -8192 && v436 != -4096)
            {
              if (v436)
              {
                v437 = *v432 & 0xFFFFFFFFFFFFFFF8;
                v434[1] = *(_QWORD *)v437;
                *(_QWORD *)v437 = v434;
                *v434 = v437 | 6;
                v438 = (uint64_t *)v434[1];
                if (v438)
                  *v438 = *v438 & 7 | v435;
              }
            }
            v562[2] = v433 + 1;
            if (v588 != (char *)-8192 && v588 != (char *)-4096 && v588)
            {
              v439 = v586 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v586 & 0xFFFFFFFFFFFFFFF8) = v587;
              if (v587)
              {
                *(_QWORD *)v587 = *(_QWORD *)v587 & 7 | v439;
              }
              else
              {
                v440 = v588;
                v441 = ***(int32x2_t ****)v588;
                v442 = (unint64_t)v441[303];
                if (v442 <= v439)
                {
                  v443 = v441[305].u32[0];
                  if (v442 + 16 * v443 > v439)
                  {
                    v444 = v443 - 1;
                    LODWORD(v445) = v444 & ((v588 >> 4) ^ (v588 >> 9));
                    v446 = (void **)(v442 + 16 * v445);
                    v447 = (char *)*v446;
                    if (v588 != *v446)
                    {
                      v448 = 1;
                      do
                      {
                        if (v447 == (char *)-4096)
                          goto LABEL_617;
                        v449 = v445 + v448++;
                        v445 = v449 & v444;
                        v447 = *(char **)(v442 + 16 * v445);
                      }
                      while (v588 != v447);
                      v446 = (void **)(v442 + 16 * v445);
                    }
                    *v446 = (void *)-8192;
                    v441[304] = vadd_s32(v441[304], (int32x2_t)0x1FFFFFFFFLL);
                    v440 = v588;
LABEL_617:
                    v440[17] &= ~1u;
                  }
                }
              }
            }
LABEL_535:
            v561 = 1;
            goto LABEL_536;
          }
          goto LABEL_425;
        }
      }
      if (sub_1C4E8FD48((uint64_t)v563))
      {
        v165 = *((_DWORD *)v121 + 5) & 0x7FFFFFF;
        v166 = *((_QWORD *)v121 - 4 * v165);
        v167 = *(_QWORD *)(a2 + 104);
        v168 = *(_DWORD *)(a2 + 120);
        if (!v168)
          goto LABEL_215;
        v169 = v168 - 1;
        v170 = ((v166 >> 4) ^ (v166 >> 9)) & (v168 - 1);
        v171 = v167 + 48 * v170;
        v172 = *(_QWORD *)(v171 + 24);
        if (v172 != v166)
        {
          v173 = 1;
          while (v172 != -4096)
          {
            v174 = v170 + v173++;
            v170 = v174 & v169;
            v171 = v167 + 48 * (v174 & v169);
            v172 = *(_QWORD *)(v171 + 24);
            if (v172 == v166)
              goto LABEL_216;
          }
LABEL_215:
          v171 = v167 + 48 * v168;
        }
LABEL_216:
        if (v171 == v167 + 48 * v168 || (v175 = *(_QWORD *)(v171 + 40)) == 0)
        {
          v175 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v166);
          v167 = *(_QWORD *)(a2 + 104);
          v168 = *(_DWORD *)(a2 + 120);
          v165 = *((_DWORD *)v121 + 5) & 0x7FFFFFF;
        }
        v176 = ((_QWORD *)v121 - 4 * v165)[4];
        v177 = v167 + 48 * v168;
        if (v168)
        {
          v178 = v168 - 1;
          v179 = ((v176 >> 4) ^ (v176 >> 9)) & v178;
          v180 = v167 + 48 * v179;
          v181 = *(_QWORD *)(v180 + 24);
          if (v181 != v176)
          {
            v182 = 1;
            while (v181 != -4096)
            {
              v183 = v179 + v182++;
              v179 = v183 & v178;
              v180 = v167 + 48 * v179;
              v181 = *(_QWORD *)(v180 + 24);
              if (v181 == v176)
                goto LABEL_226;
            }
            goto LABEL_225;
          }
        }
        else
        {
LABEL_225:
          v180 = v177;
        }
LABEL_226:
        if (v180 == v177 || !*(_QWORD *)(v180 + 40))
          llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v176);
        v184 = 13;
        v185 = *(_DWORD *)(*((_QWORD *)v121 - 4) + 36) - 262;
        if (((1 << (*(_BYTE *)(*((_QWORD *)v121 - 4) + 36) - 6)) & 0xC000000003) == 0)
        {
          if (((1 << v185) & 0x6000000600000) != 0)
            v184 = 15;
          else
            v184 = 17;
        }
        llvm::ScalarEvolution::willNotOverflow(a2, v184, (v185 < 0x17) & (0x610003u >> v185), v175);
        if (v262)
        {
          v263 = 13;
          if (((1 << (*(_BYTE *)(*((_QWORD *)v121 - 4) + 36) - 6)) & 0xC000000003) == 0)
          {
            if (((1 << (*(_BYTE *)(*((_QWORD *)v121 - 4) + 36) - 6)) & 0x6000000600000) != 0)
              v263 = 15;
            else
              v263 = 17;
          }
          v374 = (char *)v121 - 32 * (*((_DWORD *)v121 + 5) & 0x7FFFFFF);
          v375 = *(_QWORD **)v374;
          v376 = *((_QWORD *)v374 + 4);
          v590 = 257;
          v377 = llvm::BinaryOperator::Create(v263, v375, v376, (uint64_t)&v586, (uint64_t)v121);
          v379 = v377;
          v380 = *(_DWORD *)(*((_QWORD *)v121 - 4) + 36) - 262;
          if (v380 <= 0x16 && ((1 << v380) & 0x610003) != 0)
            v381 = 4;
          else
            v381 = 2;
          *((_BYTE *)v377 + 17) |= v381;
          v586 = (unint64_t)&v588;
          v587 = 0x400000000;
          v382 = *((_QWORD *)v121 + 1);
          if (!v382)
            goto LABEL_532;
          v383 = 0;
          do
          {
            v384 = *(_QWORD *)(v382 + 24);
            if (v384 && *(_BYTE *)(v384 + 16) == 92)
            {
              v385 = v379;
              if (**(_DWORD **)(v384 + 64) == 1)
              {
                v386 = **(uint64_t ***)v121;
                v387 = *v386;
                v385 = *(llvm::Value **)(*v386 + 1568);
                if (!v385)
                {
                  v389 = *(llvm::ConstantInt **)(v387 + 1888);
                  LODWORD(v583) = *(_DWORD *)(v387 + 1896) >> 8;
                  if (v583 > 0x40)
                    llvm::APInt::initSlowCase((llvm::APInt *)&v582, 0, 0);
                  else
                    v582 = 0;
                  v385 = llvm::ConstantInt::get(v389, (llvm::LLVMContext *)&v582, v378);
                  if (v583 >= 0x41 && v582)
                    MEMORY[0x1CAA32F9C](v582, 0x1000C8000313F17);
                  *(_QWORD *)(v387 + 1568) = v385;
                }
              }
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v384, v385, (llvm::Value *)1);
              v388 = v587;
              if (v587 >= (unint64_t)HIDWORD(v587))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v586, (uint64_t)&v588, v587 + 1, 8);
                v388 = v587;
              }
              *(_QWORD *)(v586 + 8 * v388) = v384;
              v383 = v587 + 1;
              LODWORD(v587) = v587 + 1;
            }
            v382 = *(_QWORD *)(v382 + 8);
          }
          while (v382);
          if (v383)
          {
            v390 = (uint64_t *)v586;
            v391 = 8 * v383;
            do
            {
              v392 = *v390++;
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v392 + 40) + 40, (uint64_t ***)v392);
              v393 = *(_QWORD *)(v392 + 24);
              v394 = *(_QWORD **)(v392 + 32);
              *v394 = v393;
              *(_QWORD *)(v393 + 8) = v394;
              *(_QWORD *)(v392 + 24) = 0;
              *(_QWORD *)(v392 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v392);
              v391 -= 8;
            }
            while (v391);
          }
          if (!*((_QWORD *)v121 + 1))
          {
LABEL_532:
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v121 + 5) + 40, (uint64_t ***)v121);
            v395 = *((_QWORD *)v121 + 3);
            v396 = (_QWORD *)*((_QWORD *)v121 + 4);
            *v396 = v395;
            *(_QWORD *)(v395 + 8) = v396;
            *((_QWORD *)v121 + 3) = 0;
            *((_QWORD *)v121 + 4) = 0;
            llvm::Value::deleteValue(v121);
          }
          if ((char **)v586 != &v588)
            free((void *)v586);
          goto LABEL_535;
        }
      }
      if (sub_1C5AE360C((uint64_t)v121))
      {
        v582 = (char *)v121;
        v264 = *((_DWORD *)v121 + 5) & 0x7FFFFFF;
        v265 = *((_QWORD *)v121 - 4 * v264);
        v266 = *(_QWORD *)(a2 + 104);
        v267 = *(_DWORD *)(a2 + 120);
        if (!v267)
          goto LABEL_329;
        v268 = v267 - 1;
        v269 = ((v265 >> 4) ^ (v265 >> 9)) & (v267 - 1);
        v270 = v266 + 48 * v269;
        v271 = *(_QWORD *)(v270 + 24);
        if (v271 != v265)
        {
          v272 = 1;
          while (v271 != -4096)
          {
            v273 = v269 + v272++;
            v269 = v273 & v268;
            v270 = v266 + 48 * (v273 & v268);
            v271 = *(_QWORD *)(v270 + 24);
            if (v271 == v265)
              goto LABEL_330;
          }
LABEL_329:
          v270 = v266 + 48 * v267;
        }
LABEL_330:
        if (v270 == v266 + 48 * v267 || (v274 = *(_QWORD *)(v270 + 40)) == 0)
        {
          v274 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v265);
          v266 = *(_QWORD *)(a2 + 104);
          v267 = *(_DWORD *)(a2 + 120);
          v264 = *((_DWORD *)v121 + 5) & 0x7FFFFFF;
        }
        v275 = ((_QWORD *)v121 - 4 * v264)[4];
        v276 = v266 + 48 * v267;
        if (v267)
        {
          v277 = v267 - 1;
          v278 = ((v275 >> 4) ^ (v275 >> 9)) & v277;
          v279 = v266 + 48 * v278;
          v280 = *(_QWORD *)(v279 + 24);
          if (v280 != v275)
          {
            v281 = 1;
            while (v280 != -4096)
            {
              v282 = v278 + v281++;
              v278 = v282 & v277;
              v279 = v266 + 48 * v278;
              v280 = *(_QWORD *)(v279 + 24);
              if (v280 == v275)
                goto LABEL_340;
            }
            goto LABEL_339;
          }
        }
        else
        {
LABEL_339:
          v279 = v276;
        }
LABEL_340:
        if (v279 == v276 || !*(_QWORD *)(v279 + 40))
          llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v275);
        v283 = 13;
        v284 = *(_DWORD *)(*((_QWORD *)v121 - 4) + 36) - 262;
        if (((1 << (*(_BYTE *)(*((_QWORD *)v121 - 4) + 36) - 6)) & 0xC000000003) == 0)
        {
          if (((1 << v284) & 0x6000000600000) != 0)
            v283 = 15;
          else
            v283 = 17;
        }
        llvm::ScalarEvolution::willNotOverflow(a2, v283, (v284 < 0x17) & (0x610003u >> v284), v274);
        if (v285)
        {
          v424 = 13;
          if (((1 << (*(_BYTE *)(*((_QWORD *)v121 - 4) + 36) - 6)) & 0xC000000003) == 0)
          {
            if (((1 << (*(_BYTE *)(*((_QWORD *)v121 - 4) + 36) - 6)) & 0x6000000600000) != 0)
              v424 = 15;
            else
              v424 = 17;
          }
          v450 = *((_DWORD *)v121 + 5);
          if ((v450 & 0x10000000) != 0)
          {
            v451 = ***(_QWORD ***)v121;
            v452 = *(_QWORD *)(v451 + 152);
            v453 = *(unsigned int *)(v451 + 168);
            if ((_DWORD)v453)
            {
              LODWORD(v454) = (v453 - 1) & ((v121 >> 4) ^ (v121 >> 9));
              v455 = (llvm::Value **)(v452 + 16 * v454);
              v456 = *v455;
              if (*v455 != v121)
              {
                v457 = 1;
                do
                {
                  if (v456 == (llvm::Value *)-4096)
                    goto LABEL_626;
                  v458 = v454 + v457++;
                  v454 = v458 & (v453 - 1);
                  v456 = *(llvm::Value **)(v452 + 16 * v454);
                }
                while (v456 != v121);
                v455 = (llvm::Value **)(v452 + 16 * v454);
              }
            }
            else
            {
LABEL_626:
              v455 = (llvm::Value **)(v452 + 16 * v453);
            }
            v459 = v455[1];
            v462 = *(_QWORD *)v459;
            v461 = (char *)v459 + 16;
            v460 = v462;
          }
          else
          {
            v460 = 0;
            v461 = &byte_1C871356D;
          }
          v463 = (char *)v121 - 32 * (v450 & 0x7FFFFFF);
          v464 = *(_QWORD **)v463;
          v465 = *((_QWORD *)v463 + 4);
          v590 = 261;
          v586 = (unint64_t)v461;
          v587 = v460;
          v466 = llvm::BinaryOperator::Create(v424, v464, v465, (uint64_t)&v586, (uint64_t)v121);
          v467 = *(_DWORD *)(*((_QWORD *)v121 - 4) + 36) - 262;
          v336 = v467 > 0x16;
          v468 = (1 << v467) & 0x610003;
          if (v336 || v468 == 0)
            v470 = 2;
          else
            v470 = 4;
          *((_BYTE *)v466 + 17) |= v470;
          v561 = 1;
          llvm::Value::doRAUW(v121, v466, (llvm::Value *)1);
          sub_1C6317B3C(v562, (uint64_t *)&v582);
          goto LABEL_536;
        }
      }
      if (v121 && *((_BYTE *)v121 + 16) == 66)
      {
        v574 = v121;
        v286 = (llvm::Type **)*((_QWORD *)v121 - 4);
        v287 = *(_QWORD *)(a2 + 104);
        v288 = *(_DWORD *)(a2 + 120);
        if (!v288)
          goto LABEL_356;
        v289 = v288 - 1;
        v290 = (v288 - 1) & ((v286 >> 4) ^ (v286 >> 9));
        v291 = v287 + 48 * v290;
        v292 = *(llvm::Type ***)(v291 + 24);
        if (v292 != v286)
        {
          v293 = 1;
          while (v292 != (llvm::Type **)-4096)
          {
            v294 = v290 + v293++;
            v290 = v294 & v289;
            v291 = v287 + 48 * (v294 & v289);
            v292 = *(llvm::Type ***)(v291 + 24);
            if (v292 == v286)
              goto LABEL_357;
          }
LABEL_356:
          v291 = v287 + 48 * v288;
        }
LABEL_357:
        v553 = *v286;
        if (v291 == v287 + 48 * v288 || (v295 = *(_QWORD *)(v291 + 40)) == 0)
        {
          v295 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v286);
          v287 = *(_QWORD *)(a2 + 104);
          v288 = *(_DWORD *)(a2 + 120);
        }
        v296 = v287 + 48 * v288;
        if (v288)
        {
          v297 = v288 - 1;
          v298 = v297 & ((v121 >> 4) ^ (v121 >> 9));
          v299 = v287 + 48 * v298;
          v300 = *(llvm::Value **)(v299 + 24);
          if (v300 != v121)
          {
            v301 = 1;
            while (v300 != (llvm::Value *)-4096)
            {
              v302 = v298 + v301++;
              v298 = v302 & v297;
              v299 = v287 + 48 * v298;
              v300 = *(llvm::Value **)(v299 + 24);
              if (v300 == v121)
                goto LABEL_367;
            }
            goto LABEL_366;
          }
        }
        else
        {
LABEL_366:
          v299 = v296;
        }
LABEL_367:
        if (v299 == v296 || (v303 = *(const llvm::SCEV **)(v299 + 40)) == 0)
          v303 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v121);
        SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr((llvm::ScalarEvolution *)a2, v303, v553, 0);
        ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr((llvm::ScalarEvolution *)a2, v303, v553, 0);
        v557 = (llvm::SCEV *)ZeroExtendExpr;
        if (v295 == SignExtendExpr || v295 == ZeroExtendExpr)
        {
          v547 = v286;
          v586 = (unint64_t)&v588;
          v587 = 0x400000000;
          v308 = *((_QWORD *)v121 + 1);
          if (!v308)
            goto LABEL_639;
          while (1)
          {
            v309 = *(_QWORD *)(v308 + 24);
            if (*(unsigned __int8 *)(v309 + 16) < 0x1Cu)
              break;
            if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)a3, *(_QWORD *)(v309 + 40)))
            {
              if (*(_BYTE *)(v309 + 16) != 81
                || (*(llvm::Value **)(v309 - 64) != v121
                 || !llvm::Loop::isLoopInvariant((uint64_t)v20, *(_QWORD *)(v309 - 32)))
                && (*(llvm::Value **)(v309 - 32) != v121
                 || !llvm::Loop::isLoopInvariant((uint64_t)v20, *(_QWORD *)(v309 - 64))))
              {
                break;
              }
              v310 = *(_WORD *)(v309 + 18) & 0x3F;
              if ((v310 - 38) <= 3 && v295 != SignExtendExpr)
                break;
              if ((v310 - 34) <= 3 && v295 != (_QWORD)v557)
                break;
              v313 = v587;
              if (v587 >= (unint64_t)HIDWORD(v587))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v586, (uint64_t)&v588, v587 + 1, 8);
                v313 = v587;
              }
              *(_QWORD *)(v586 + 8 * v313) = v309;
              LODWORD(v587) = v587 + 1;
            }
            v308 = *(_QWORD *)(v308 + 8);
            if (!v308)
            {
              v472 = (uint64_t)v20;
              if (!(_DWORD)v587)
              {
LABEL_639:
                v473 = llvm::UndefValue::get(*(llvm::UndefValue **)v121, v306);
                v314 = 1;
                llvm::Value::doRAUW(v121, v473, (llvm::Value *)1);
                sub_1C6317B3C(a6, (uint64_t *)&v574);
                goto LABEL_399;
              }
              v482 = (const llvm::SCEV **)v586;
              v545 = (const llvm::SCEV **)(v586 + 8 * v587);
              v546 = v295;
              v551 = v121;
              while (2)
              {
                v483 = *v482;
                v578 = v483;
                isLoopInvariant = llvm::Loop::isLoopInvariant(v472, *((_QWORD *)v483 - 8));
                v485 = -32;
                if (isLoopInvariant)
                  v485 = -64;
                v486 = *(_QWORD *)((char *)v483 + v485);
                v487 = *((_WORD *)v483 + 9);
                v488 = v487 & 0x3F;
                v489 = v487 & 0x3F;
                if (isLoopInvariant)
                  __asm { BR              X10 }
                v490 = v488 - 34;
                if (v490 < 4 || v295 != (_QWORD)v557)
                {
                  if (v490 > 3)
                    goto LABEL_678;
LABEL_654:
                  v492 = operator new(0x60uLL);
                  v492[13] = v492[13] & 0x38000000 | 1;
                  v493 = (uint64_t)(v492 + 8);
                  *(_QWORD *)v492 = 0;
                  *((_QWORD *)v492 + 1) = 0;
                  *((_QWORD *)v492 + 2) = 0;
                  *((_QWORD *)v492 + 3) = v492 + 8;
                  v582 = "zext";
                  v585 = 259;
                  llvm::ZExtInst::ZExtInst((uint64_t)(v492 + 8), v486, (uint64_t)v553, (uint64_t)&v582, (uint64_t)v483);
                  if ((v489 - 32) >= 6)
                    __asm { BR              X9 }
                  goto LABEL_679;
                }
                if ((v487 & 0x3E) == 0x20)
                  goto LABEL_654;
                v494 = *((_QWORD *)v483 - 8);
                v495 = *(_QWORD *)(a2 + 104);
                v496 = *(_DWORD *)(a2 + 120);
                if (v496)
                {
                  v497 = v496 - 1;
                  v498 = ((v494 >> 4) ^ (v494 >> 9)) & (v496 - 1);
                  v499 = v495 + 48 * v498;
                  v500 = *(_QWORD *)(v499 + 24);
                  if (v500 != v494)
                  {
                    v501 = 1;
                    while (v500 != -4096)
                    {
                      v502 = v498 + v501++;
                      v498 = v502 & v497;
                      v499 = v495 + 48 * (v502 & v497);
                      v500 = *(_QWORD *)(v499 + 24);
                      if (v500 == v494)
                        goto LABEL_663;
                    }
                    goto LABEL_662;
                  }
                }
                else
                {
LABEL_662:
                  v499 = v495 + 48 * v496;
                }
LABEL_663:
                if (v499 == v495 + 48 * v496 || (v503 = *(const llvm::SCEV **)(v499 + 40)) == 0)
                {
                  v503 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v494);
                  v495 = *(_QWORD *)(a2 + 104);
                  v496 = *(_DWORD *)(a2 + 120);
                }
                v504 = *((_QWORD *)v483 - 4);
                v505 = v495 + 48 * v496;
                if (v496)
                {
                  v506 = v496 - 1;
                  v507 = ((v504 >> 4) ^ (v504 >> 9)) & v506;
                  v508 = v495 + 48 * v507;
                  v509 = *(_QWORD *)(v508 + 24);
                  if (v509 != v504)
                  {
                    v510 = 1;
                    while (v509 != -4096)
                    {
                      v511 = v507 + v510++;
                      v507 = v511 & v506;
                      v508 = v495 + 48 * v507;
                      v509 = *(_QWORD *)(v508 + 24);
                      if (v509 == v504)
                        goto LABEL_673;
                    }
                    goto LABEL_672;
                  }
                }
                else
                {
LABEL_672:
                  v508 = v505;
                }
LABEL_673:
                if (v508 == v505 || (v512 = *(const llvm::SCEV **)(v508 + 40)) == 0)
                  v512 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, v504);
                if (llvm::ScalarEvolution::isKnownNonNegative((llvm::ScalarEvolution *)a2, v503)
                  && llvm::ScalarEvolution::isKnownNonNegative((llvm::ScalarEvolution *)a2, v512))
                {
                  goto LABEL_654;
                }
LABEL_678:
                v513 = operator new(0x60uLL);
                v513[13] = v513[13] & 0x38000000 | 1;
                v493 = (uint64_t)(v513 + 8);
                *(_QWORD *)v513 = 0;
                *((_QWORD *)v513 + 1) = 0;
                *((_QWORD *)v513 + 2) = 0;
                *((_QWORD *)v513 + 3) = v513 + 8;
                v582 = "sext";
                v585 = 259;
                llvm::SExtInst::SExtInst((uint64_t)(v513 + 8), v486, (uint64_t)v553, (uint64_t)&v582, (uint64_t)v483);
LABEL_679:
                LOBYTE(v573) = 0;
                v472 = (uint64_t)v20;
                llvm::Loop::makeLoopInvariant((uint64_t)v20, v493, &v573, 0, 0);
                v514 = operator new(0x80uLL);
                v514[21] = v514[21] & 0x38000000 | 2;
                v515 = (llvm::Value *)(v514 + 16);
                *(_QWORD *)v514 = 0;
                *((_QWORD *)v514 + 1) = 0;
                *((_QWORD *)v514 + 2) = 0;
                *((_QWORD *)v514 + 3) = v514 + 16;
                *((_QWORD *)v514 + 4) = 0;
                *((_QWORD *)v514 + 5) = 0;
                *((_QWORD *)v514 + 6) = 0;
                *((_QWORD *)v514 + 7) = v514 + 16;
                v585 = 257;
                sub_1C4774CC4(*v547);
                llvm::CmpInst::CmpInst((uint64_t)v515, v516, 53, v489, (uint64_t)v547, v493, (uint64_t)&v582, (uint64_t)v483, 0);
                llvm::Value::doRAUW(v483, v515, (llvm::Value *)1);
                a6 = v562;
                sub_1C5FAE768(v562, (uint64_t *)&v578);
                ++v482;
                v295 = v546;
                v121 = v551;
                if (v482 == v545)
                  goto LABEL_639;
                continue;
              }
            }
          }
          v314 = 0;
LABEL_399:
          if ((char **)v586 != &v588)
            free((void *)v586);
          if ((v314 & 1) != 0)
            goto LABEL_536;
        }
      }
      v586 = (unint64_t)v121;
      if ((*(_DWORD *)(*(_QWORD *)v121 + 8) & 0xFD) != 0xD || *(_QWORD *)v121 != *(_QWORD *)v25)
        goto LABEL_425;
      v315 = *(_QWORD *)(a2 + 104);
      v316 = *(_DWORD *)(a2 + 120);
      if (v316)
      {
        v317 = v316 - 1;
        v318 = (v316 - 1) & ((v121 >> 4) ^ (v121 >> 9));
        v319 = v315 + 48 * v318;
        v320 = *(llvm::Value **)(v319 + 24);
        if (v320 != v121)
        {
          v321 = 1;
          while (v320 != (llvm::Value *)-4096)
          {
            v322 = v318 + v321++;
            v318 = v322 & v317;
            v319 = v315 + 48 * (v322 & v317);
            v320 = *(llvm::Value **)(v319 + 24);
            if (v320 == v121)
              goto LABEL_411;
          }
          goto LABEL_410;
        }
      }
      else
      {
LABEL_410:
        v319 = v315 + 48 * v316;
      }
LABEL_411:
      if (v319 == v315 + 48 * v316 || (v323 = *(_QWORD *)(v319 + 40)) == 0)
      {
        v323 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v121);
        v315 = *(_QWORD *)(a2 + 104);
        v316 = *(_DWORD *)(a2 + 120);
      }
      v324 = v315 + 48 * v316;
      if (v316)
      {
        v325 = v316 - 1;
        v326 = v325 & ((v25 >> 4) ^ (v25 >> 9));
        v327 = v315 + 48 * v326;
        v328 = *(char **)(v327 + 24);
        if (v328 != v25)
        {
          v329 = 1;
          while (v328 != (char *)-4096)
          {
            v330 = v326 + v329++;
            v326 = v330 & v325;
            v327 = v315 + 48 * v326;
            v328 = *(char **)(v327 + 24);
            if (v328 == v25)
              goto LABEL_421;
          }
          goto LABEL_420;
        }
      }
      else
      {
LABEL_420:
        v327 = v324;
      }
LABEL_421:
      if (v327 == v324 || (v331 = *(_QWORD *)(v327 + 40)) == 0)
        v331 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v25);
      if (v323 == v331)
      {
        v21 = (const llvm::APInt *)v586;
        if (*(_BYTE *)(v586 + 16) == 83)
        {
          if (!a3 || !llvm::DominatorTree::dominates(a3, (const llvm::Value *)v25, (const llvm::Instruction *)v586))
            goto LABEL_425;
          v21 = (const llvm::APInt *)v586;
        }
        if (sub_1C4F20780(a4, (uint64_t)v21, (uint64_t)v25))
        {
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v586, (llvm::Value *)v25, (llvm::Value *)1);
          v399 = a6[2];
          if (v399 >= a6[3])
          {
            sub_1C578EDF4(a6, (uint64_t *)&v586);
          }
          else
          {
            v400 = v586;
            v401 = (llvm::ValueHandleBase *)(*(_QWORD *)a6 + 24 * v399);
            *(_QWORD *)v401 = 6;
            *((_QWORD *)v401 + 1) = 0;
            *((_QWORD *)v401 + 2) = v400;
            if (v400 != -8192 && v400 != -4096 && v400)
            {
              llvm::ValueHandleBase::AddToUseList(v401);
              v399 = a6[2];
            }
            a6[2] = v399 + 1;
          }
          goto LABEL_535;
        }
      }
LABEL_425:
      v332 = v563;
      if (!v563)
        goto LABEL_556;
      v333 = *((unsigned __int8 *)v563 + 16);
      if ((v333 - 59) < 0xFFFFFFEE)
        goto LABEL_556;
      HIDWORD(v335) = v333 - 41;
      LODWORD(v335) = v333 - 41;
      v334 = v335 >> 1;
      v336 = v334 > 6;
      v337 = (1 << v334) & 0x47;
      if (!v336 && v337 != 0)
      {
        StrengthenedNoWrapFlagsFromBinOp = llvm::ScalarEvolution::getStrengthenedNoWrapFlagsFromBinOp(a2, (uint64_t)v563);
        if ((StrengthenedNoWrapFlagsFromBinOp & 0xFF00000000) != 0)
        {
          *((_BYTE *)v332 + 17) = StrengthenedNoWrapFlagsFromBinOp & 6 | *((_BYTE *)v332 + 17) & 0xF9;
LABEL_433:
          sub_1C5FAE5A4(v25, (uint64_t)v20, (llvm::SmallPtrSetImplBase *)&v564, (uint64_t)&v579);
          goto LABEL_556;
        }
        v333 = *((unsigned __int8 *)v332 + 16);
      }
      if (v333 != 53)
        goto LABEL_556;
      v340 = *(_QWORD *)(a2 + 104);
      v341 = *(_DWORD *)(a2 + 120);
      if (v341)
      {
        v342 = (v341 - 1) & ((v25 >> 4) ^ (v25 >> 9));
        v343 = v340 + 48 * v342;
        v344 = *(char **)(v343 + 24);
        if (v344 != v25)
        {
          v345 = 1;
          while (v344 != (char *)-4096)
          {
            v346 = v342 + v345++;
            v342 = v346 & (v341 - 1);
            v343 = v340 + 48 * v342;
            v344 = *(char **)(v343 + 24);
            if (v344 == v25)
              goto LABEL_443;
          }
          goto LABEL_442;
        }
      }
      else
      {
LABEL_442:
        v343 = v340 + 48 * v341;
      }
LABEL_443:
      if (v343 == v340 + 48 * v341 || (v347 = *(_QWORD *)(v343 + 40)) == 0)
        v347 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v25);
      RangeRef = llvm::ScalarEvolution::getRangeRef(a2, v347, 0, 0);
      v349 = RangeRef;
      LODWORD(v587) = *(_DWORD *)(RangeRef + 8);
      if (v587 > 0x40)
      {
        v586 = operator new[]();
        memcpy((void *)v586, *(const void **)v349, (((unint64_t)v587 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v586 = *(_QWORD *)RangeRef;
      }
      v350 = *(_DWORD *)(v349 + 24);
      LODWORD(v589) = v350;
      if (v350 > 0x40)
      {
        v588 = (char *)operator new[]();
        v542 = *(const void **)(v349 + 16);
        v543 = v589;
        memcpy(v588, v542, (((unint64_t)v589 + 63) >> 3) & 0x3FFFFFF8);
        v350 = v543;
      }
      else
      {
        v588 = *(char **)(v349 + 16);
      }
      v351 = *((_QWORD *)v332 + 1);
      if (!v351)
      {
        v352 = 0;
        goto LABEL_553;
      }
      v352 = 0;
      while (2)
      {
        v353 = *(_QWORD *)(v351 + 24);
        v578 = 0;
        v583 = (uint64_t)v25;
        v584[0] = &v578;
        v584[1] = 0;
        v354 = *(unsigned __int8 *)(v353 + 16);
        if (v354 == 5)
        {
          if (*(_WORD *)(v353 + 18) != 27)
            goto LABEL_470;
          v358 = (llvm::Constant **)(v353 - 32 * (*(_DWORD *)(v353 + 20) & 0x7FFFFFF));
          v359 = *v358;
          v360 = *((unsigned __int8 *)*v358 + 16);
          if (v360 == 5)
          {
            if (*((_WORD *)v359 + 9) != 25)
              goto LABEL_470;
            v361 = (char *)((_QWORD *)v359 - 4 * (*((_DWORD *)v359 + 5) & 0x7FFFFFF))[4];
          }
          else
          {
            if (v360 != 53)
              goto LABEL_470;
            v361 = (char *)*((_QWORD *)v359 - 4);
          }
          if (v25 == v361 && (sub_1C4D8A004((uint64_t)v584, v358[4]) & 1) != 0)
            goto LABEL_488;
        }
        else if (v354 == 55)
        {
          v355 = *(_QWORD *)(v353 - 64);
          v356 = *(unsigned __int8 *)(v355 + 16);
          if (v356 == 5)
          {
            if (*(_WORD *)(v355 + 18) == 25)
            {
              v357 = *(char **)(v355 - 32 * (*(_DWORD *)(v355 + 20) & 0x7FFFFFF) + 32);
              goto LABEL_463;
            }
          }
          else if (v356 == 53)
          {
            v357 = *(char **)(v355 - 32);
LABEL_463:
            if (v25 == v357 && sub_1C4D89F84((uint64_t)v584, *(unsigned __int8 **)(v353 - 32)))
            {
LABEL_488:
              if ((*(_BYTE *)(v353 + 17) & 2) == 0)
              {
                llvm::ConstantRange::getUnsignedMin((llvm::APInt *)&v586, (llvm::APInt *)&v582);
                if (v583 > 0x40)
                {
                  v370 = (((unint64_t)v583 + 63) >> 3) & 0x3FFFFFF8;
                  do
                  {
                    if (!v370)
                    {
                      if (v582)
                        MEMORY[0x1CAA32F9C](v582, 0x1000C8000313F17);
                      a6 = v562;
                      goto LABEL_491;
                    }
                    v371 = *(_QWORD *)&v582[v370 - 8];
                    v372 = *(_QWORD *)(*(_QWORD *)v578 - 8 + v370);
                    v370 -= 8;
                  }
                  while (v371 == v372);
                  MEMORY[0x1CAA32F9C](v582, 0x1000C8000313F17);
                  if (v371 > v372)
                    goto LABEL_491;
                }
                else if ((unint64_t)v582 >= *(_QWORD *)v578)
                {
LABEL_491:
                  *(_BYTE *)(v353 + 17) |= 2u;
                  v352 = 1;
                }
              }
              goto LABEL_492;
            }
          }
        }
LABEL_470:
        v575 = (uint64_t)v25;
        v576 = &v578;
        v577 = 0;
        v362 = *(unsigned __int8 *)(v353 + 16);
        if (v362 == 5)
        {
          if (*(_WORD *)(v353 + 18) != 26)
            goto LABEL_492;
          v366 = (llvm::Constant **)(v353 - 32 * (*(_DWORD *)(v353 + 20) & 0x7FFFFFF));
          v367 = *v366;
          v368 = *((unsigned __int8 *)*v366 + 16);
          if (v368 == 5)
          {
            if (*((_WORD *)v367 + 9) != 25)
              goto LABEL_492;
            v369 = (char *)((_QWORD *)v367 - 4 * (*((_DWORD *)v367 + 5) & 0x7FFFFFF))[4];
          }
          else
          {
            if (v368 != 53)
              goto LABEL_492;
            v369 = (char *)*((_QWORD *)v367 - 4);
          }
          if (v25 == v369 && (sub_1C4D8A004((uint64_t)&v576, v366[4]) & 1) != 0)
            goto LABEL_488;
        }
        else
        {
          if (v362 != 54)
            goto LABEL_492;
          v363 = *(_QWORD *)(v353 - 64);
          v364 = *(unsigned __int8 *)(v363 + 16);
          if (v364 == 5)
          {
            if (*(_WORD *)(v363 + 18) != 25)
              goto LABEL_492;
            v365 = *(char **)(v363 - 32 * (*(_DWORD *)(v363 + 20) & 0x7FFFFFF) + 32);
          }
          else
          {
            if (v364 != 53)
              goto LABEL_492;
            v365 = *(char **)(v363 - 32);
          }
          if (v25 == v365 && sub_1C4D89F84((uint64_t)&v576, *(unsigned __int8 **)(v353 - 32)))
            goto LABEL_488;
        }
LABEL_492:
        v351 = *(_QWORD *)(v351 + 8);
        if (v351)
          continue;
        break;
      }
      v350 = v589;
LABEL_553:
      if (v350 >= 0x41 && v588)
        MEMORY[0x1CAA32F9C](v588, 0x1000C8000313F17);
      if (v587 >= 0x41 && v586)
        MEMORY[0x1CAA32F9C](v586, 0x1000C8000313F17);
      if ((v352 & 1) != 0)
        goto LABEL_433;
LABEL_556:
      if (*((unsigned __int8 *)v563 + 16) - 66 >= 0xD)
        v402 = 0;
      else
        v402 = v563;
      if (v549 && v402)
      {
        (*(void (**)(void))(*(_QWORD *)v549 + 24))();
        goto LABEL_538;
      }
      if ((*(_DWORD *)(*(_QWORD *)v563 + 8) & 0xFD) == 0xD)
      {
        v403 = *(_QWORD *)(a2 + 104);
        v404 = *(_DWORD *)(a2 + 120);
        if (!v404)
          goto LABEL_569;
        v405 = (v404 - 1) & ((v563 >> 4) ^ (v563 >> 9));
        v406 = v403 + 48 * v405;
        v407 = *(llvm::Value **)(v406 + 24);
        if (v407 != v563)
        {
          v408 = 1;
          while (v407 != (llvm::Value *)-4096)
          {
            v409 = v405 + v408++;
            v405 = v409 & (v404 - 1);
            v406 = v403 + 48 * v405;
            v407 = *(llvm::Value **)(v406 + 24);
            if (v407 == v563)
              goto LABEL_570;
          }
LABEL_569:
          v406 = v403 + 48 * v404;
        }
LABEL_570:
        if (v406 == v403 + 48 * v404 || (v410 = *(_QWORD *)(v406 + 40)) == 0)
          v410 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a2, (unint64_t)v563);
        if (v410)
          v411 = *(unsigned __int16 *)(v410 + 24) == 7;
        else
          v411 = 0;
        if (v411)
        {
          v398 = (uint64_t)v20;
          if (*(const llvm::Loop **)(v410 + 48) == v20)
          {
            v397 = v563;
            goto LABEL_537;
          }
        }
      }
LABEL_538:
      v22 = v580;
      if (!(_DWORD)v580)
      {
LABEL_738:
        if (v579 != v581)
          free(v579);
        if (v565 != v564)
          free(v565);
        v544 = v561;
        return v544 != 0;
      }
    }
    v31 = 1;
    while (v30 != (llvm::Value *)-4096)
    {
      v32 = v28 + v31++;
      v28 = v32 & (v27 - 1);
      v29 = v26 + 48 * v28;
      v30 = *(llvm::Value **)(v29 + 24);
      if (v30 == v24)
        goto LABEL_21;
    }
LABEL_20:
    v29 = v26 + 48 * v27;
    goto LABEL_21;
  }
  v544 = 0;
  return v544 != 0;
}

uint64_t llvm::simplifyLoopIVs(uint64_t a1, uint64_t ***a2, llvm::DominatorTree *a3, uint64_t *a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v12;
  llvm::Value *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _BYTE v18[768];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  sub_1C50D02DC((uint64_t)v18, a2, (uint64_t)((*a2)[5] + 34), (uint64_t)"indvars", 1);
  v12 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 48);
  v13 = (llvm::Value *)(v12 - 24);
  if (v12)
    v14 = v12 - 24;
  else
    v14 = 0;
  if (*(_BYTE *)(v14 + 16) == 83)
  {
    v15 = 0;
    do
    {
      v15 |= llvm::simplifyUsersOfIV(v13, (uint64_t)a2, a3, a4, a5, a6, (llvm::SCEVExpander *)v18, 0);
      v12 = *(_QWORD *)(v12 + 8);
      v13 = (llvm::Value *)(v12 - 24);
      if (v12)
        v16 = v12 - 24;
      else
        v16 = 0;
    }
    while (*(_BYTE *)(v16 + 16) == 83);
  }
  else
  {
    LOBYTE(v15) = 0;
  }
  sub_1C50D05E0((uint64_t)v18);
  return v15 & 1;
}

llvm::Value *llvm::createWideIV(__int128 *a1, uint64_t a2, llvm::ScalarEvolution *a3, llvm::SCEVExpander *a4, llvm::DominatorTree *a5, unsigned int *a6, _DWORD *a7, _DWORD *a8, char a9, char a10)
{
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  llvm::Type *v28;
  int v29;
  unsigned int v30;
  unsigned __int16 *SCEVIter;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Type *v35;
  int v36;
  int v37;
  unint64_t v38;
  llvm::Instruction **v39;
  uint64_t v41;
  llvm::Value *v42;
  int v43;
  uint64_t v44;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  _QWORD *v58;
  char v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  BOOL v64;
  int v65;
  int v67;
  int v68;
  llvm::Value **v69;
  llvm::Value *v70;
  int v71;
  uint64_t v72;
  llvm::Value *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  char **v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t i;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  llvm::Instruction *v114;
  unsigned __int8 *v115;
  llvm::Value *v116;
  uint64_t LoopLatch;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  llvm::Value *v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  llvm::Value *v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  llvm::Value *v138;
  unsigned __int8 *v139;
  unsigned __int8 **v140;
  unsigned __int8 *v141;
  llvm::DominatorTree *v142;
  unsigned int v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  llvm::ValueAsMetadata *v147;
  unsigned int v148;
  llvm::Value **v149;
  uint64_t *v150;
  llvm::Value *v151;
  int v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  llvm::Value *v156;
  int v157;
  int v158;
  _QWORD *v159;
  int v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  llvm::Value ***v167;
  llvm::Value **v168;
  int v169;
  int v170;
  llvm::Value *v171;
  uint64_t v172;
  uint64_t v173;
  llvm::Value *v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  llvm::Value *v179;
  int v180;
  int v181;
  int v182;
  llvm::Value **v183;
  llvm::DominatorTree *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  llvm::Value *v188;
  int v189;
  int v190;
  llvm::Value *v191;
  llvm::Value *v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  const char *v202;
  unsigned int v203;
  unsigned int v204;
  uint64_t v205;
  llvm::Value *v206;
  unsigned int *v207;
  unsigned int v208;
  llvm::Value *v209;
  llvm::ValueHandleBase *v210;
  llvm::ScalarEvolution *v211;
  unint64_t v212;
  uint64_t v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  unsigned int v219;
  const llvm::SCEV *v220;
  unint64_t SignExtendExpr;
  llvm::ScalarEvolution *v222;
  unint64_t v223;
  uint64_t v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  unsigned int v230;
  const llvm::SCEV *v231;
  unint64_t v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int v235;
  uint64_t v236;
  llvm::Value *v237;
  int v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  BOOL v244;
  unsigned __int8 *v245;
  uint64_t v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  uint64_t v250;
  llvm::Value *v251;
  int v252;
  unsigned int v253;
  uint64_t v254;
  llvm::Value **v255;
  llvm::Value *v256;
  char *v257;
  llvm::Value *v258;
  uint64_t v259;
  _QWORD *v260;
  llvm::Value *v261;
  llvm::Value *v262;
  llvm::Value *v263;
  llvm::Value *v264;
  uint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  int v268;
  llvm::Value **v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t j;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v277;
  uint64_t v278;
  unsigned __int8 *v279;
  void *v280;
  llvm::Value *v281;
  llvm::Value *v282;
  llvm::Value *v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  llvm::Value **v287;
  llvm::Value *v288;
  int v289;
  uint64_t v290;
  unsigned __int8 *v291;
  uint64_t v292;
  uint64_t v293;
  const char *v294;
  unsigned int v295;
  unsigned int IndexTypeSizeInBits;
  uint64_t v297;
  const char *v298;
  unsigned int v299;
  unsigned int v300;
  uint64_t v301;
  llvm::Value *v302;
  uint64_t v304;
  uint64_t v305;
  llvm::Value *v306;
  int v307;
  int v308;
  int v309;
  _BOOL4 v310;
  BOOL v311;
  char v312;
  llvm::Value *v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  unsigned int v322;
  int v323;
  _BOOL4 v325;
  uint64_t v327;
  void **v328;
  const llvm::Value *v329;
  int v330;
  uint64_t v331;
  unsigned int v332;
  uint64_t v333;
  unsigned int v334;
  uint64_t v335;
  llvm::Value *v336;
  int v337;
  unsigned int v338;
  unsigned int *v339;
  unsigned int v340;
  llvm::Value *v341;
  llvm::ValueHandleBase *v342;
  char v343;
  llvm::ValueAsMetadata *v344;
  unsigned int v345;
  llvm::Value *v346;
  llvm::Value *v347;
  uint64_t v348;
  uint64_t v349;
  llvm::Value *v350;
  int v351;
  int v352;
  char v353;
  uint64_t v354;
  int v355;
  unint64_t *v356;
  uint64_t v357;
  BOOL v358;
  llvm::Value *v359;
  unsigned int *v360;
  unsigned int v361;
  llvm::ValueHandleBase *v362;
  int v363;
  llvm::Value **v364;
  _QWORD *v365;
  llvm::ValueSymbolTable *v366;
  int v367;
  int v368;
  unsigned __int8 **v369;
  llvm::Value *v370;
  char *v371;
  unsigned __int8 *v372;
  char v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  llvm::ValueAsMetadata **v378;
  llvm::ValueAsMetadata *v379;
  int v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  llvm::Value *v384;
  int v385;
  int v386;
  llvm::ScalarEvolution *v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int v390;
  unsigned int v391;
  uint64_t v392;
  uint64_t v393;
  int v394;
  unsigned int v395;
  const llvm::SCEV *v396;
  char *v397;
  unint64_t v398;
  uint64_t v399;
  unsigned int v400;
  unsigned int v401;
  uint64_t v402;
  uint64_t v403;
  int v404;
  unsigned int v405;
  const llvm::SCEV *v406;
  int v407;
  llvm::Value **v408;
  int v409;
  char v410;
  int v411;
  unsigned __int8 **v412;
  llvm::Value *v413;
  llvm::Value *v414;
  int v415;
  unsigned __int8 **v416;
  char *v417;
  unsigned __int8 *v418;
  llvm::Value *v419;
  char v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  llvm::ValueAsMetadata **v425;
  llvm::ValueAsMetadata *v426;
  int v427;
  int v428;
  llvm::ValueAsMetadata *v429;
  void *v430;
  char *v431;
  void *v432;
  char *v433;
  char *v434;
  llvm::Value **v435;
  uint64_t v436;
  _QWORD *v437;
  uint64_t v438;
  uint64_t v439;
  llvm::Value ***v440;
  uint64_t v441;
  char *v442;
  char *v443;
  unsigned __int8 **v444;
  int v445;
  unsigned __int8 *v446;
  unsigned __int8 *v447;
  unsigned __int8 *v448;
  _QWORD *v449;
  llvm::ValueAsMetadata *v450;
  void *v451;
  char *v452;
  void *v453;
  char *v454;
  char *v455;
  llvm::Value **v456;
  uint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  uint64_t v460;
  llvm::Value ***v461;
  uint64_t v462;
  char *v463;
  char *v464;
  unsigned __int8 **v465;
  int v466;
  unsigned __int8 *v467;
  unsigned __int8 *v468;
  unsigned __int8 *v469;
  uint64_t v470;
  unsigned int v471;
  unsigned int v472;
  uint64_t v473;
  llvm::Value *v474;
  int v475;
  unsigned int v476;
  uint64_t v477;
  unsigned int *v478;
  unsigned int v479;
  llvm::Value *v480;
  llvm::ValueHandleBase *v481;
  char *v482;
  unsigned __int8 *v483;
  char v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  llvm::Value **v489;
  llvm::Value *v490;
  int v491;
  int v492;
  llvm::Value *v493;
  void *v494;
  char *v495;
  void *v496;
  char *v497;
  char *v498;
  uint64_t *v499;
  llvm::Value *v500;
  uint64_t v501;
  _QWORD *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t **v505;
  uint64_t v506;
  char *v507;
  char *v508;
  unsigned __int8 **v509;
  int v510;
  unsigned __int8 *v511;
  unsigned __int8 *v512;
  unsigned __int8 *v513;
  llvm::ValueAsMetadata **v514;
  uint64_t v515;
  unsigned int *v516;
  unsigned int v517;
  llvm::ValueAsMetadata *v518;
  llvm::ValueHandleBase *v519;
  llvm::ValueAsMetadata **v520;
  llvm::Value **v521;
  unsigned __int8 *v522;
  unsigned __int8 *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  llvm::ValueAsMetadata *v530;
  int v531;
  int v532;
  _QWORD *v533;
  uint64_t v534;
  unsigned __int8 *v535;
  uint64_t v536;
  llvm::PHINode *v537;
  uint64_t SinglePredecessor;
  uint64_t v539;
  uint64_t v540;
  uint64_t k;
  uint64_t v542;
  unsigned int v543;
  uint64_t v544;
  unsigned __int8 *v546;
  uint64_t v547;
  unsigned __int8 *v548;
  uint64_t **v549;
  unsigned __int8 *v550;
  char **v551;
  char *v552;
  char *v553;
  unsigned __int8 *v554;
  unsigned __int8 *v555;
  __int16 v556;
  unsigned __int8 *v557;
  uint64_t v558;
  unsigned __int8 *v559;
  unsigned __int8 *v560;
  uint64_t v561;
  unsigned __int8 *v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  char **v568;
  char *v569;
  int v570;
  int v571;
  char *v572;
  uint64_t v573;
  unsigned __int8 *v574;
  uint64_t v575;
  llvm::Value *v576;
  uint64_t ****v577;
  const llvm::SCEV *NegativeSCEV;
  int isKnownPredicateAt;
  llvm::Value **v580;
  int v581;
  BOOL v582;
  unsigned int v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  _BOOL4 v594;
  llvm::SCEVExpander *v595;
  llvm::Value *v596;
  llvm::SCEV *v597;
  _DWORD *v598;
  _DWORD *v599;
  llvm::Value *v600[2];
  llvm::Value *v601[2];
  llvm::Value *v602[2];
  __int128 v603;
  unsigned __int8 *v604;
  unsigned __int8 *v605;
  llvm::Value *v606;
  _OWORD v607[2];
  _OWORD v608[2];
  _BOOL4 v609;
  llvm::Value *v610;
  llvm::ValueAsMetadata *v611;
  uint64_t v612;
  const char *v613;
  __int16 v614;
  llvm::ValueAsMetadata *v615;
  llvm::Type *v616[2];
  uint64_t *v617;
  _QWORD *v618;
  llvm::ScalarEvolution *v619;
  llvm::DominatorTree *v620;
  char v621;
  char v622;
  int v623;
  int v624;
  llvm::Value *v625;
  llvm::Value *v626;
  uint64_t v627;
  unsigned int *v628;
  _BYTE *v629;
  _BYTE *v630;
  uint64_t v631;
  int v632;
  _BYTE v633[128];
  _QWORD v634[2];
  unsigned int v635;
  uint64_t v636;
  uint64_t v637;
  unsigned int v638;
  void *v639;
  uint64_t v640;
  _BYTE v641[256];
  void *v642;
  int v643[2];
  _QWORD v644[2];
  llvm::ValueAsMetadata **v645;
  void *v646;
  void *v647;
  uint64_t v648;
  int v649;
  _WORD v650[8];
  _QWORD **v651;
  char *v652;
  uint64_t v653;
  char **v654;
  uint64_t v655;
  _QWORD v656[4];
  llvm::Value **v657;
  uint64_t v658;
  _QWORD v659[2];
  _OWORD *v660;
  uint64_t v661;

  v661 = *MEMORY[0x1E0C80C00];
  v13 = *a1;
  *(_OWORD *)v616 = *a1;
  v617 = (uint64_t *)a2;
  v14 = *(_DWORD *)(a2 + 16);
  if (v14)
  {
    v15 = *(_QWORD *)(v13 + 40);
    v16 = *(_QWORD *)a2;
    v17 = v14 - 1;
    v18 = ((v15 >> 4) ^ (v15 >> 9)) & (v14 - 1);
    v19 = *(_QWORD *)(*(_QWORD *)a2 + 16 * v18);
    if (v15 == v19)
    {
LABEL_6:
      v22 = *(_QWORD *)(v16 + 16 * v18 + 8);
      goto LABEL_8;
    }
    v20 = 1;
    while (v19 != -4096)
    {
      v21 = v18 + v20++;
      v18 = v21 & v17;
      v19 = *(_QWORD *)(v16 + 16 * v18);
      if (v15 == v19)
        goto LABEL_6;
    }
  }
  v22 = 0;
LABEL_8:
  v618 = (_QWORD *)v22;
  v619 = a3;
  v620 = a5;
  v621 = a9;
  v622 = a10;
  v624 = 0;
  v623 = 0;
  v625 = 0;
  v626 = 0;
  v627 = 0;
  v628 = a6;
  v629 = v633;
  v630 = v633;
  v631 = 16;
  v632 = 0;
  v634[1] = 0;
  v634[0] = 0;
  v635 = 0;
  v638 = 0;
  v636 = 0;
  v637 = 0;
  v639 = v641;
  v640 = 0x800000000;
  v23 = *((unsigned __int8 *)a1 + 16);
  v646 = (void *)v13;
  *(_DWORD *)sub_1C56D136C((uint64_t)v634, (uint64_t *)&v646) = v23;
  v24 = *((_QWORD *)v619 + 13);
  v25 = *((_DWORD *)v619 + 30);
  if (v25)
  {
    v26 = ((LODWORD(v616[0]) >> 4) ^ (LODWORD(v616[0]) >> 9)) & (v25 - 1);
    v27 = v24 + 48 * v26;
    v28 = *(llvm::Type **)(v27 + 24);
    if (v28 == v616[0])
      goto LABEL_15;
    v29 = 1;
    while (v28 != (llvm::Type *)-4096)
    {
      v30 = v26 + v29++;
      v26 = v30 & (v25 - 1);
      v27 = v24 + 48 * v26;
      v28 = *(llvm::Type **)(v27 + 24);
      if (v28 == v616[0])
        goto LABEL_15;
    }
  }
  v27 = v24 + 48 * v25;
LABEL_15:
  if (v27 == v24 + 48 * v25 || (SCEVIter = *(unsigned __int16 **)(v27 + 40)) == 0)
    SCEVIter = (unsigned __int16 *)llvm::ScalarEvolution::createSCEVIter(v619, (unint64_t)v616[0]);
  if (SCEVIter)
    v32 = SCEVIter[12] == 7;
  else
    v32 = 0;
  if (!v32)
    goto LABEL_39;
  if (v635)
  {
    LODWORD(v33) = ((LODWORD(v616[0]) >> 4) ^ (LODWORD(v616[0]) >> 9)) & (v635 - 1);
    v34 = v634[0] + 16 * v33;
    v35 = *(llvm::Type **)v34;
    if (v616[0] != *(llvm::Type **)v34)
    {
      v36 = 1;
      while (v35 != (llvm::Type *)-4096)
      {
        v37 = v33 + v36++;
        v33 = v37 & (v635 - 1);
        v35 = *(llvm::Type **)(v634[0] + 16 * v33);
        if (v616[0] == v35)
        {
          v34 = v634[0] + 16 * v33;
          goto LABEL_30;
        }
      }
      v34 = v634[0] + 16 * v635;
    }
  }
  else
  {
    v34 = v634[0];
  }
LABEL_30:
  v38 = *(_DWORD *)(v34 + 8) == 1
      ? llvm::ScalarEvolution::getSignExtendExpr(v619, (const llvm::SCEV *)SCEVIter, v616[1], 0)
      : llvm::ScalarEvolution::getZeroExtendExpr(v619, (const llvm::SCEV *)SCEVIter, v616[1], 0);
  v39 = (llvm::Instruction **)v38;
  if (!v38 || *(_WORD *)(v38 + 24) != 7)
    goto LABEL_39;
  v41 = *(_QWORD *)(v38 + 48);
  if ((_QWORD *)v41 != v618)
    goto LABEL_39;
  v598 = a8;
  v599 = a7;
  v595 = a4;
  if (v622)
  {
    v597 = (llvm::SCEV *)v38;
    v646 = v650;
    v647 = v650;
    v648 = 16;
    v649 = 0;
    v642 = v644;
    v644[0] = v616[0];
    *(_QWORD *)v643 = 0x600000001;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v646, (uint64_t)v616[0]);
    v46 = v643[0];
    if (!v643[0])
      goto LABEL_133;
    while (1)
    {
      v47 = *((_QWORD *)v642 + --v46);
      v643[0] = v46;
      v48 = *(_QWORD *)(v47 + 8);
      if (!v48)
        goto LABEL_132;
      do
      {
        v49 = *((_DWORD *)v617 + 4);
        if (!v49)
          goto LABEL_130;
        v50 = *(_QWORD *)(v48 + 24);
        v51 = *(_QWORD *)(v50 + 40);
        v52 = *v617;
        v53 = v49 - 1;
        v54 = ((v51 >> 4) ^ (v51 >> 9)) & (v49 - 1);
        v55 = *(_QWORD *)(*v617 + 16 * v54);
        if (v51 == v55)
        {
LABEL_54:
          v58 = *(_QWORD **)(v52 + 16 * v54 + 8);
          if (v58)
          {
            while (v58 != v618)
            {
              if (!v58)
                goto LABEL_130;
              v58 = (_QWORD *)*v58;
            }
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v646, *(_QWORD *)(v48 + 24));
            if (v59)
            {
              v60 = v643[0];
              if (v643[0] >= (unint64_t)v643[1])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v642, (uint64_t)v644, v643[0] + 1, 8);
                v60 = v643[0];
              }
              *((_QWORD *)v642 + v60) = v50;
              ++v643[0];
              *(_QWORD *)&v608[0] = v47;
              *(_QWORD *)&v607[0] = v50;
              v602[0] = 0;
              v600[0] = 0;
              v657 = v602;
              v658 = (uint64_t)v600;
              v659[0] = 0;
              v61 = *(unsigned __int8 *)(v47 + 16);
              HIDWORD(v63) = v61 - 41;
              LODWORD(v63) = v61 - 41;
              v62 = v63 >> 1;
              v64 = v62 > 6;
              v65 = (1 << v62) & 0x47;
              if (!v64 && v65 != 0)
              {
                v67 = v61 > 0x1B ? v61 - 28 : *(unsigned __int16 *)(v47 + 18);
                if (v67 == 13 && (*(_BYTE *)(v47 + 17) & 4) != 0)
                {
                  v68 = *(_DWORD *)(v47 + 20);
                  v69 = (v68 & 0x40000000) != 0
                      ? *(llvm::Value ***)(v47 - 8)
                      : (llvm::Value **)(v47 - 32 * (v68 & 0x7FFFFFF));
                  v70 = *v69;
                  if (v70)
                  {
                    v602[0] = v70;
                    v71 = *(_DWORD *)(v47 + 20);
                    v72 = (v71 & 0x40000000) != 0 ? *(_QWORD *)(v47 - 8) : v47 - 32 * (v71 & 0x7FFFFFF);
                    if (sub_1C4D89F84((uint64_t)&v658, *(unsigned __int8 **)(v72 + 32)))
                    {
                      v73 = v600[0];
                      v74 = *((_DWORD *)v600[0] + 2);
                      v75 = v74 - 1;
                      if (v74 >= 0x41)
                        v73 = (llvm::Value *)(*(_QWORD *)v600[0] + 8 * (v75 >> 6));
                      if (((*(_QWORD *)v73 >> v75) & 1) == 0)
                      {
                        v657 = v602;
                        v658 = (uint64_t)v616;
                        v659[0] = v600;
                        v659[1] = v608;
                        v660 = v607;
                        v76 = *(_QWORD *)&v607[0];
                        if (v621)
                        {
                          v77 = (_QWORD *)(*(_QWORD *)&v607[0] + 24);
                          v78 = *(_QWORD *)(*(_QWORD *)&v607[0] + 40) + 40;
                          if (*(_QWORD *)&v607[0] + 24 != v78)
                          {
                            do
                            {
                              v611 = 0;
                              if (v77)
                                v79 = (uint64_t)(v77 - 3);
                              else
                                v79 = 0;
                              LODWORD(v654) = 125;
                              v655 = 0;
                              v656[0] = &v611;
                              if (sub_1C4E75A6C((uint64_t)&v654, v79))
                                sub_1C5FAEBF0((char *)&v657, (uint64_t)v611, 1);
                              v77 = (_QWORD *)*v77;
                            }
                            while (v77 != (_QWORD *)v78);
                            v76 = *(_QWORD *)&v607[0];
                          }
                        }
                        v80 = *(_QWORD *)(v76 + 40);
                        if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)v620, v80))
                        {
                          v81 = *((_QWORD *)v620 + 3);
                          v82 = *((unsigned int *)v620 + 10);
                          if (!(_DWORD)v82)
                            goto LABEL_97;
                          LODWORD(v83) = (v82 - 1) & ((v80 >> 4) ^ (v80 >> 9));
                          v84 = (uint64_t *)(v81 + 16 * v83);
                          v85 = *v84;
                          if (v80 != *v84)
                          {
                            v86 = 1;
                            while (v85 != -4096)
                            {
                              v87 = v83 + v86++;
                              v83 = v87 & (v82 - 1);
                              v85 = *(_QWORD *)(v81 + 16 * v83);
                              if (v80 == v85)
                              {
                                v84 = (uint64_t *)(v81 + 16 * v83);
                                goto LABEL_98;
                              }
                            }
LABEL_97:
                            v84 = (uint64_t *)(v81 + 16 * v82);
                          }
LABEL_98:
                          v88 = *(uint64_t **)(v84[1] + 8);
                          v89 = (uint64_t)v618;
                          v90 = sub_1C477672C((uint64_t)(v618 + 7), *v88);
                          v91 = *(_QWORD *)(v89 + 64);
                          v92 = 72;
                          if (v91 == *(_QWORD *)(v89 + 56))
                            v92 = 76;
                          if (v90 != (_QWORD *)(v91 + 8 * *(unsigned int *)(v89 + v92)))
                          {
                            do
                            {
                              v93 = (char **)*v88;
                              v94 = *(_QWORD *)(*v88 + 40);
                              if (v94 == *v88 + 40)
                              {
                                v96 = 0;
                              }
                              else
                              {
                                if (v94)
                                  v95 = v94 - 24;
                                else
                                  v95 = 0;
                                if (*(unsigned __int8 *)(v95 + 16) - 29 >= 0xB)
                                  v96 = 0;
                                else
                                  v96 = v95;
                              }
                              if (v621)
                              {
                                v97 = (_QWORD *)(v96 + 24);
                                v98 = *(_QWORD *)(v96 + 40) + 40;
                                while (v97 != (_QWORD *)v98)
                                {
                                  v611 = 0;
                                  if (v97)
                                    v99 = (uint64_t)(v97 - 3);
                                  else
                                    v99 = 0;
                                  LODWORD(v654) = 125;
                                  v655 = 0;
                                  v656[0] = &v611;
                                  if (sub_1C4E75A6C((uint64_t)&v654, v99))
                                    sub_1C5FAEBF0((char *)&v657, (uint64_t)v611, 1);
                                  v97 = (_QWORD *)*v97;
                                }
                              }
                              if (v96 && *(_BYTE *)(v96 + 16) == 30 && (*(_DWORD *)(v96 + 20) & 0x7FFFFFF) == 3)
                              {
                                v100 = *(_QWORD *)(v96 - 32);
                                v101 = *(_QWORD *)(v96 - 64);
                                v102 = *(_QWORD *)&v607[0];
                                v654 = v93;
                                v655 = v100;
                                if (llvm::BasicBlockEdge::isSingleEdge((llvm::BasicBlockEdge *)&v654)
                                  && llvm::DominatorTree::dominates(v620, (const llvm::BasicBlockEdge *)&v654, *(const llvm::BasicBlock **)(v102 + 40)))
                                {
                                  sub_1C5FAEBF0((char *)&v657, *(_QWORD *)(v96 - 96), 1);
                                }
                                v654 = v93;
                                v655 = v101;
                                if (llvm::BasicBlockEdge::isSingleEdge((llvm::BasicBlockEdge *)&v654)
                                  && llvm::DominatorTree::dominates(v620, (const llvm::BasicBlockEdge *)&v654, *(const llvm::BasicBlock **)(v102 + 40)))
                                {
                                  sub_1C5FAEBF0((char *)&v657, *(_QWORD *)(v96 - 96), 0);
                                }
                              }
                              v88 = (uint64_t *)v88[1];
                              v103 = (uint64_t)v618;
                              v104 = sub_1C477672C((uint64_t)(v618 + 7), *v88);
                              v105 = *(_QWORD *)(v103 + 64);
                              v106 = 72;
                              if (v105 == *(_QWORD *)(v103 + 56))
                                v106 = 76;
                            }
                            while (v104 != (_QWORD *)(v105 + 8 * *(unsigned int *)(v103 + v106)));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v56 = 1;
          while (v55 != -4096)
          {
            v57 = v54 + v56++;
            v54 = v57 & v53;
            v55 = *(_QWORD *)(v52 + 16 * v54);
            if (v51 == v55)
              goto LABEL_54;
          }
        }
LABEL_130:
        v48 = *(_QWORD *)(v48 + 8);
      }
      while (v48);
      v46 = v643[0];
LABEL_132:
      if (!v46)
      {
LABEL_133:
        if (v642 != v644)
          free(v642);
        a4 = v595;
        if (v647 != v646)
          free(v647);
        v41 = (uint64_t)v618;
        a7 = v599;
        v39 = (llvm::Instruction **)v597;
        break;
      }
    }
  }
  v107 = **(_QWORD **)(v41 + 32);
  v108 = v107 + 40;
  for (i = *(_QWORD *)(v107 + 48); i != v108; i = *(_QWORD *)(i + 8))
  {
    v110 = i - 24;
    if (!i)
      v110 = 0;
    if (*(_BYTE *)(v110 + 16) != 83)
    {
      v111 = *(unsigned __int8 *)(i - 8) - 38;
      v64 = v111 > 0x38;
      v112 = (1 << v111) & 0x100060000000001;
      if (v64 || v112 == 0)
        v108 = i;
      else
        v108 = *(_QWORD *)(i + 8);
      break;
    }
  }
  if (v108)
    v114 = (llvm::Instruction *)(v108 - 24);
  else
    v114 = 0;
  v115 = llvm::SCEVExpander::expandCodeForImpl(a4, v39, v616[1], v114);
  v605 = v115;
  if (v115[16] == 83)
    v116 = (llvm::Value *)v115;
  else
    v116 = 0;
  v625 = v116;
  if (!v116)
  {
    if (!*((_QWORD *)v115 + 1) && sub_1C5BA2178((uint64_t)a4, (uint64_t)v115))
      sub_1C5B2DB10(v628, (uint64_t *)&v605);
LABEL_39:
    v42 = 0;
    goto LABEL_40;
  }
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v618);
  if (LoopLatch)
  {
    v118 = LoopLatch;
    v119 = *((_DWORD *)v625 + 5);
    v120 = v119 & 0x7FFFFFF;
    if ((v119 & 0x7FFFFFF) != 0)
    {
      v121 = 0;
      while (1)
      {
        v122 = (char *)v625 - 32 * v120;
        if ((v119 & 0x40000000) != 0)
          v122 = (char *)*((_QWORD *)v625 - 1);
        if (*(_QWORD *)&v122[32 * *((unsigned int *)v625 + 15) + 8 * v121] == LoopLatch)
          break;
        if (v120 == ++v121)
          goto LABEL_163;
      }
    }
    else
    {
LABEL_163:
      LODWORD(v121) = -1;
    }
    if ((v119 & 0x40000000) != 0)
      v123 = (char *)*((_QWORD *)v625 - 1);
    else
      v123 = (char *)v625 - 32 * v120;
    v124 = *(llvm::Value **)&v123[32 * v121];
    v626 = v124;
    v125 = *((_QWORD *)v619 + 13);
    v126 = *((_DWORD *)v619 + 30);
    if (v126)
    {
      v127 = (v126 - 1) & ((v124 >> 4) ^ (v124 >> 9));
      v128 = v125 + 48 * v127;
      v129 = *(llvm::Value **)(v128 + 24);
      if (v129 == v124)
        goto LABEL_176;
      v130 = 1;
      while (v129 != (llvm::Value *)-4096)
      {
        v131 = v127 + v130++;
        v127 = v131 & (v126 - 1);
        v128 = v125 + 48 * v127;
        v129 = *(llvm::Value **)(v128 + 24);
        if (v129 == v124)
          goto LABEL_176;
      }
    }
    v128 = v125 + 48 * v126;
LABEL_176:
    if (v128 == v125 + 48 * v126 || (v132 = *(_QWORD *)(v128 + 40)) == 0)
      v132 = llvm::ScalarEvolution::createSCEVIter(v619, (unint64_t)v124);
    v627 = v132;
    v133 = *((_DWORD *)v616[0] + 5);
    v134 = v133 & 0x7FFFFFF;
    if ((v133 & 0x7FFFFFF) != 0)
    {
      v135 = 0;
      while (1)
      {
        v136 = (char *)v616[0] - 32 * v134;
        if ((v133 & 0x40000000) != 0)
          v136 = (char *)*((_QWORD *)v616[0] - 1);
        if (*(_QWORD *)&v136[32 * *((unsigned int *)v616[0] + 15) + 8 * v135] == v118)
          break;
        if (v134 == ++v135)
          goto LABEL_185;
      }
    }
    else
    {
LABEL_185:
      LODWORD(v135) = -1;
    }
    if ((v133 & 0x40000000) != 0)
      v137 = (char *)*((_QWORD *)v616[0] - 1);
    else
      v137 = (char *)v616[0] - 32 * v134;
    v138 = v626;
    v139 = *(unsigned __int8 **)(*(_QWORD *)&v137[32 * v135] + 48);
    v604 = v139;
    if (v139)
      llvm::MetadataTracking::track((uint64_t)&v604, v139, 2);
    v140 = (unsigned __int8 **)((char *)v138 + 48);
    if (&v604 == (unsigned __int8 **)((char *)v138 + 48))
    {
      if (v604)
        llvm::MetadataTracking::untrack((uint64_t)&v604, v604);
    }
    else
    {
      if (*v140)
        llvm::MetadataTracking::untrack((uint64_t)v138 + 48, *v140);
      v141 = v604;
      *v140 = v604;
      if (v141)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v604, v141, (uint64_t)v138 + 48);
        v604 = 0;
      }
    }
  }
  ++v624;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v629, (uint64_t)v616[0]);
  sub_1C5FAE7E0((uint64_t)v616, v616[0]);
  v143 = v640;
  while ((_DWORD)v640)
  {
    v144 = (char *)v639 + 32 * v143;
    v146 = *((_OWORD *)v144 - 2);
    v145 = *((_OWORD *)v144 - 1);
    *(_OWORD *)v602 = v146;
    v603 = v145;
    LODWORD(v640) = v143 - 1;
    *(_OWORD *)v600 = v146;
    *(_OWORD *)v601 = v145;
    v147 = (llvm::ValueAsMetadata *)*((_QWORD *)&v146 + 1);
    v148 = *(unsigned __int8 *)(*((_QWORD *)&v146 + 1) + 16);
    if (v148 == 83)
      v149 = (llvm::Value **)*((_QWORD *)&v146 + 1);
    else
      v149 = 0;
    v657 = v149;
    if (!v149)
      goto LABEL_222;
    v150 = v617;
    v151 = v149[5];
    v152 = *((_DWORD *)v617 + 4);
    if (v152)
    {
      v153 = *v617;
      v154 = v152 - 1;
      v155 = ((v151 >> 4) ^ (v151 >> 9)) & (v152 - 1);
      v156 = *(llvm::Value **)(*v617 + 16 * v155);
      if (v151 == v156)
      {
LABEL_205:
        v159 = *(_QWORD **)(v153 + 16 * v155 + 8);
        goto LABEL_207;
      }
      v157 = 1;
      while (v156 != (llvm::Value *)-4096)
      {
        v158 = v155 + v157++;
        v155 = v158 & v154;
        v156 = *(llvm::Value **)(v153 + 16 * v155);
        if (v151 == v156)
          goto LABEL_205;
      }
    }
    v159 = 0;
LABEL_207:
    if (v159 != v618)
    {
      v160 = *((_DWORD *)v149 + 5);
      if ((v160 & 0x7FFFFFF) == 1)
      {
        v161 = (_QWORD *)*((_QWORD *)v151 + 5);
        if (v161)
          v162 = v161 - 3;
        else
          v162 = 0;
        if (*((unsigned __int8 *)v162 + 16) - 29 >= 0xB)
          v162 = 0;
        if (*((_BYTE *)v162 + 16) == 38)
          goto LABEL_497;
        if ((v160 & 0x10000000) == 0)
        {
          v256 = 0;
          v257 = &byte_1C871356D;
LABEL_345:
          v259 = *(_QWORD *)v601[0];
          v650[0] = 773;
          v646 = v257;
          v647 = v256;
          v648 = (uint64_t)".wide";
          v260 = operator new(0x48uLL);
          v260[1] = v259;
          v261 = (llvm::Value *)(v260 + 1);
          *v260 = 0;
          v260[2] = 0;
          v260[3] = 0x4000000000000053;
          *((_OWORD *)v260 + 2) = 0u;
          v262 = (llvm::Value *)(v260 + 4);
          *((_OWORD *)v260 + 3) = 0u;
          *((_DWORD *)v260 + 16) = 0;
          v263 = v149[5];
          v260[6] = v263;
          *((_WORD *)v263 + 9) &= ~0x8000u;
          if ((*((_BYTE *)v260 + 31) & 0x10) != 0)
          {
            v365 = (_QWORD *)*((_QWORD *)v263 + 7);
            if (v365)
            {
              v366 = (llvm::ValueSymbolTable *)v365[13];
              if (v366)
                llvm::ValueSymbolTable::reinsertValue(v366, v261);
            }
          }
          v264 = v149[3];
          v260[4] = v264;
          v260[5] = v149 + 3;
          *((_QWORD *)v264 + 1) = v262;
          v149[3] = v262;
          *((_DWORD *)v260 + 17) = 1;
          llvm::Value::setName((uint64_t ***)v261, (uint64_t)&v646);
          v265 = *((unsigned int *)v260 + 17);
          v266 = operator new(40 * v265);
          *v260 = v266;
          if ((_DWORD)v265)
          {
            v267 = &v266[4 * v265];
            do
            {
              *v266 = 0;
              v266[1] = 0;
              v266[2] = 0;
              v266[3] = v261;
              v266 += 4;
            }
            while (v266 != v267);
          }
          v268 = *((_DWORD *)v657 + 5);
          if ((v268 & 0x40000000) != 0)
            v269 = (llvm::Value **)*(v657 - 1);
          else
            v269 = &v657[-4 * (v268 & 0x7FFFFFF)];
          sub_1C477667C(v261, (uint64_t)v601[0], (uint64_t)v269[4 * *((unsigned int *)v657 + 15)]);
          v270 = v260[6];
          v271 = v270 + 40;
          for (j = *(_QWORD *)(v270 + 48); j != v271; j = *(_QWORD *)(j + 8))
          {
            v273 = j - 24;
            if (!j)
              v273 = 0;
            if (*(_BYTE *)(v273 + 16) != 83)
            {
              v274 = *(unsigned __int8 *)(j - 8) - 38;
              v64 = v274 > 0x38;
              v275 = (1 << v274) & 0x100060000000001;
              if (v64 || v275 == 0)
                v271 = j;
              else
                v271 = *(_QWORD *)(j + 8);
              break;
            }
          }
          if (v271)
            v277 = v271 - 24;
          else
            v277 = 0;
          sub_1C4773D54((uint64_t)&v646, v277, 0, 0, 0);
          v278 = *(_QWORD *)v600[0];
          LOWORD(v645) = 257;
          v279 = sub_1C4773E38((uint64_t *)&v646, 38, (unsigned __int8 *)v261, v278, (uint64_t)&v642);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v657, (llvm::Value *)v279, (llvm::Value *)1);
          sub_1C5B2DB10(v628, (uint64_t *)&v657);
          v280 = v646;
          if (v646 == &v648)
            goto LABEL_497;
LABEL_388:
          free(v280);
          goto LABEL_497;
        }
        v163 = **(_QWORD **)*v149;
        v164 = *(_QWORD *)(v163 + 152);
        v165 = *(unsigned int *)(v163 + 168);
        if ((_DWORD)v165)
        {
          LODWORD(v166) = (v165 - 1) & ((v149 >> 4) ^ (v149 >> 9));
          v167 = (llvm::Value ***)(v164 + 16 * v166);
          v168 = *v167;
          if (*v167 == v149)
          {
LABEL_344:
            v255 = v167[1];
            v258 = *v255;
            v257 = (char *)(v255 + 2);
            v256 = v258;
            goto LABEL_345;
          }
          v169 = 1;
          while (v168 != (llvm::Value **)-4096)
          {
            v170 = v166 + v169++;
            v166 = v170 & (v165 - 1);
            v168 = *(llvm::Value ***)(v164 + 16 * v166);
            if (v168 == v149)
            {
              v167 = (llvm::Value ***)(v164 + 16 * v166);
              goto LABEL_344;
            }
          }
        }
        v167 = (llvm::Value ***)(v164 + 16 * v165);
        goto LABEL_344;
      }
      v608[0] = *(_OWORD *)v602;
      v608[1] = v603;
      v184 = v620;
      v185 = (uint64_t *)v608;
LABEL_496:
      sub_1C5FAF4E4(v185, (uint64_t)v184, v150);
      goto LABEL_497;
    }
LABEL_222:
    if (v148 != 67)
    {
      if (v148 == 68)
      {
        if (!LOBYTE(v601[1]))
        {
          v171 = v600[0];
          if (v635)
          {
            LODWORD(v172) = ((LODWORD(v600[0]) >> 4) ^ (LODWORD(v600[0]) >> 9)) & (v635 - 1);
            v173 = v634[0] + 16 * v172;
            v174 = *(llvm::Value **)v173;
            if (v600[0] != *(llvm::Value **)v173)
            {
              v175 = 1;
              while (v174 != (llvm::Value *)-4096)
              {
                v176 = v172 + v175++;
                v172 = v176 & (v635 - 1);
                v174 = *(llvm::Value **)(v634[0] + 16 * v172);
                if (v600[0] == v174)
                {
                  v173 = v634[0] + 16 * v172;
                  goto LABEL_817;
                }
              }
              v173 = v634[0] + 16 * v635;
LABEL_817:
              a8 = v598;
              a7 = v599;
            }
          }
          else
          {
            v173 = v634[0];
          }
          if (*(_DWORD *)(v173 + 8) != 1)
            goto LABEL_239;
        }
        goto LABEL_265;
      }
      v171 = v600[0];
LABEL_239:
      if (v148 > 0x2D || ((1 << v148) & 0x2A0000000000) == 0)
        goto LABEL_331;
      v182 = *(_DWORD *)(*((_QWORD *)&v146 + 1) + 20);
      if ((v182 & 0x40000000) != 0)
        v183 = *(llvm::Value ***)(*((_QWORD *)&v146 + 1) - 8);
      else
        v183 = (llvm::Value **)(*((_QWORD *)&v146 + 1) - 32 * (v182 & 0x7FFFFFF));
      if (v635)
      {
        LODWORD(v186) = (v635 - 1) & ((v171 >> 4) ^ (v171 >> 9));
        v187 = v634[0] + 16 * v186;
        v188 = *(llvm::Value **)v187;
        if (v171 != *(llvm::Value **)v187)
        {
          v189 = 1;
          while (v188 != (llvm::Value *)-4096)
          {
            v190 = v186 + v189++;
            v186 = v190 & (v635 - 1);
            v188 = *(llvm::Value **)(v634[0] + 16 * v186);
            if (v171 == v188)
            {
              v187 = v634[0] + 16 * v186;
              goto LABEL_802;
            }
          }
          v187 = v634[0] + 16 * v635;
LABEL_802:
          a8 = v598;
        }
      }
      else
      {
        v187 = v634[0];
      }
      v191 = v601[0];
      v192 = *v183;
      v193 = *(_DWORD *)(v187 + 8);
      if (v193)
      {
        if (v193 != 1 || (*(_BYTE *)(*((_QWORD *)&v146 + 1) + 17) & 4) == 0)
          goto LABEL_331;
        if ((v182 & 0x40000000) != 0)
          v194 = *(_QWORD *)(*((_QWORD *)&v146 + 1) - 8);
        else
          v194 = *((_QWORD *)&v146 + 1) - 32 * (v182 & 0x7FFFFFF);
        v211 = v619;
        v212 = *(_QWORD *)(v194 + 32 * (v192 == v171));
        v213 = *((_QWORD *)v619 + 13);
        v214 = *((_DWORD *)v619 + 30);
        if (!v214)
          goto LABEL_292;
        v215 = ((v212 >> 4) ^ (v212 >> 9)) & (v214 - 1);
        v216 = v213 + 48 * v215;
        v217 = *(_QWORD *)(v216 + 24);
        if (v217 != v212)
        {
          v218 = 1;
          while (v217 != -4096)
          {
            v219 = v215 + v218++;
            v215 = v219 & (v214 - 1);
            v216 = v213 + 48 * v215;
            v217 = *(_QWORD *)(v216 + 24);
            if (v217 == v212)
              goto LABEL_293;
          }
LABEL_292:
          v216 = v213 + 48 * v214;
        }
LABEL_293:
        if (v216 == v213 + 48 * v214 || (v220 = *(const llvm::SCEV **)(v216 + 40)) == 0)
          v220 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(v619, v212);
        SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr(v211, v220, v616[1], 0);
LABEL_309:
        v232 = SignExtendExpr;
        v233 = *((_QWORD *)v619 + 13);
        v234 = *((_DWORD *)v619 + 30);
        if (v234)
        {
          v235 = (v234 - 1) & ((v191 >> 4) ^ (v191 >> 9));
          v236 = v233 + 48 * v235;
          v237 = *(llvm::Value **)(v236 + 24);
          if (v237 != v191)
          {
            v238 = 1;
            while (v237 != (llvm::Value *)-4096)
            {
              v239 = v235 + v238++;
              v235 = v239 & (v234 - 1);
              v236 = v233 + 48 * v235;
              v237 = *(llvm::Value **)(v236 + 24);
              if (v237 == v191)
                goto LABEL_316;
            }
            goto LABEL_315;
          }
        }
        else
        {
LABEL_315:
          v236 = v233 + 48 * v234;
        }
LABEL_316:
        if (v236 == v233 + 48 * v234 || (v240 = *(_QWORD *)(v236 + 40)) == 0)
          v240 = llvm::ScalarEvolution::createSCEVIter(v619, (unint64_t)v191);
        v241 = v192 == v171 ? v240 : v232;
        v242 = v192 == v171 ? v232 : v240;
        sub_1C5FAF86C((uint64_t)v616, v241, v242, v148 - 28);
        v244 = v243 && *(_WORD *)(v243 + 24) == 7;
        if (!v244 || (v245 = (unsigned __int8 *)v243, *(_QWORD **)(v243 + 48) != v618))
        {
LABEL_331:
          if (*(_BYTE *)(*(_QWORD *)v600[1] + 8) == 13)
          {
            v246 = *((_QWORD *)v619 + 13);
            v247 = *((_DWORD *)v619 + 30);
            if (!v247)
              goto LABEL_338;
            v248 = v247 - 1;
            v249 = (v247 - 1) & ((LODWORD(v600[1]) >> 4) ^ (LODWORD(v600[1]) >> 9));
            v250 = v246 + 48 * v249;
            v251 = *(llvm::Value **)(v250 + 24);
            if (v251 != v600[1])
            {
              v252 = 1;
              while (v251 != (llvm::Value *)-4096)
              {
                v253 = v249 + v252++;
                v249 = v253 & v248;
                v250 = v246 + 48 * (v253 & v248);
                v251 = *(llvm::Value **)(v250 + 24);
                if (v251 == v600[1])
                  goto LABEL_339;
              }
LABEL_338:
              v250 = v246 + 48 * v247;
            }
LABEL_339:
            if (v250 == v246 + 48 * v247 || (v254 = *(_QWORD *)(v250 + 40)) == 0)
              v254 = llvm::ScalarEvolution::createSCEVIter(v619, (unint64_t)v600[1]);
            __asm { BR              X10 }
          }
          v282 = v600[0];
          v281 = v600[1];
          v283 = v601[0];
          v284 = *((unsigned __int8 *)v600[1] + 16);
          if (!v600[1] || v284 != 81)
            goto LABEL_390;
          if (v635)
          {
            v285 = v635 - 1;
            v286 = (v635 - 1) & ((LODWORD(v600[0]) >> 4) ^ (LODWORD(v600[0]) >> 9));
            v287 = (llvm::Value **)(v634[0] + 16 * v286);
            v288 = *v287;
            if (v600[0] == *v287)
            {
              v289 = 1;
            }
            else
            {
              v580 = 0;
              v581 = 1;
              while (v288 != (llvm::Value *)-4096)
              {
                if (v580)
                  v582 = 0;
                else
                  v582 = v288 == (llvm::Value *)-8192;
                if (v582)
                  v580 = v287;
                v583 = v286 + v581++;
                v286 = v583 & v285;
                v287 = (llvm::Value **)(v634[0] + 16 * (v583 & v285));
                v288 = *v287;
                v289 = 1;
                a8 = v598;
                if (v600[0] == *v287)
                  goto LABEL_374;
              }
              v289 = 0;
              if (v580)
                v287 = v580;
              a8 = v598;
            }
          }
          else
          {
            v287 = 0;
            v289 = 0;
          }
LABEL_374:
          if (!LOBYTE(v601[1]))
          {
            v290 = v634[0] + 16 * v635;
            if (v289)
              v290 = (uint64_t)v287;
            if ((*(_DWORD *)(v290 + 8) != 1) == (*((_WORD *)v600[1] + 9) & 0x3Eu) - 38 < 4)
              goto LABEL_400;
          }
          v291 = (unsigned __int8 *)*((_QWORD *)v600[1] + 4 * (*((llvm::Value **)v600[1] - 8) == v600[0]) - 8);
          v292 = *(_QWORD *)v291;
          v293 = *(_QWORD *)(*(_QWORD *)v619 + 40) + 272;
          if (*(_BYTE *)(*(_QWORD *)v291 + 8) == 15)
          {
            IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v293, v292);
          }
          else
          {
            sub_1C4768AD0(v293, v292);
            IndexTypeSizeInBits = v295;
            if ((_DWORD)v294 == 1)
          }
          v297 = *(_QWORD *)(*(_QWORD *)v619 + 40) + 272;
          if (*((_BYTE *)v616[1] + 8) == 15)
          {
            v300 = llvm::DataLayout::getIndexTypeSizeInBits(v297, (uint64_t)v616[1]);
          }
          else
          {
            sub_1C4768AD0(v297, (uint64_t)v616[1]);
            v300 = v299;
            if ((_DWORD)v298 == 1)
          }
          v301 = sub_1C5FAF5B0((uint64_t)v281, (uint64_t)v282, (uint64_t)v620, v617);
          if (v301)
          {
            sub_1C4773D54((uint64_t)&v646, v301, 0, 0, 0);
            llvm::User::replaceUsesOfWith(v281, v282, v283);
            if (IndexTypeSizeInBits < v300)
            {
              v302 = (llvm::Value *)sub_1C5FAF9AC((uint64_t)v616, v291, (uint64_t)v616[1], (*((_WORD *)v281 + 9) & 0x3Eu) - 38 < 4, (uint64_t)v281);
              llvm::User::replaceUsesOfWith(v281, (llvm::Value *)v291, v302);
            }
            v280 = v646;
            a7 = v599;
            if (v646 == &v648)
              goto LABEL_497;
            goto LABEL_388;
          }
          v282 = v600[0];
          v281 = v600[1];
          v283 = v601[0];
          v284 = *((unsigned __int8 *)v600[1] + 16);
LABEL_390:
          v610 = v281;
          if (v284 <= 0x2D && ((1 << v284) & 0x2A0000000000) != 0)
          {
            if (v635)
            {
              LODWORD(v304) = (v635 - 1) & ((v282 >> 4) ^ (v282 >> 9));
              v305 = v634[0] + 16 * v304;
              v306 = *(llvm::Value **)v305;
              if (v282 != *(llvm::Value **)v305)
              {
                v307 = 1;
                while (v306 != (llvm::Value *)-4096)
                {
                  v308 = v304 + v307++;
                  v304 = v308 & (v635 - 1);
                  v306 = *(llvm::Value **)(v634[0] + 16 * v304);
                  if (v282 == v306)
                  {
                    v305 = v634[0] + 16 * v304;
                    goto LABEL_402;
                  }
                }
                v305 = v634[0] + 16 * v635;
              }
            }
            else
            {
              v305 = v634[0];
            }
LABEL_402:
            v309 = *(_DWORD *)(v305 + 8);
            v310 = v309 != 1;
            v596 = v283;
            if (v309 == 1)
            {
              v312 = 4;
            }
            else
            {
              if (v309)
              {
                v310 = 0;
                v311 = 0;
LABEL_411:
                v642 = v644;
                *(_QWORD *)v643 = 0x400000000;
                v657 = (llvm::Value **)v659;
                v658 = 0x400000000;
                v654 = (char **)v656;
                v655 = 0x400000000;
                v314 = *((_QWORD *)v281 + 1);
                if (!v314)
                  goto LABEL_456;
                v594 = v310;
                v315 = !v310;
                do
                {
                  v316 = *(_QWORD *)(v314 + 24);
                  if ((llvm::Value *)v316 != v282)
                  {
                    v317 = (uint64_t)v618;
                    v318 = sub_1C477672C((uint64_t)(v618 + 7), *(_QWORD *)(v316 + 40));
                    v319 = *(_QWORD *)(v317 + 64);
                    v320 = 72;
                    if (v319 == *(_QWORD *)(v317 + 56))
                      v320 = 76;
                    if (v318 == (_QWORD *)(v319 + 8 * *(unsigned int *)(v317 + v320)))
                    {
                      if ((*(_DWORD *)(v316 + 20) & 0x7FFFFFF) != 1)
                        goto LABEL_486;
                      v327 = v658;
                      v328 = (void **)&v657;
                      if (v658 >= (unint64_t)HIDWORD(v658))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v657, (uint64_t)v659, v658 + 1, 8);
                        v327 = v658;
                      }
                    }
                    else
                    {
                      v321 = *(unsigned __int8 *)(v316 + 16);
                      if (v321 == 81)
                      {
                        v322 = (*(_WORD *)(v316 + 18) & 0x3F) - 38;
                        if (v322 > 3)
                          v323 = 1;
                        else
                          v323 = v315;
                        v325 = v309 != 1 || v322 < 0xFFFFFFFC;
                        if (v323 != 1 || !v325)
                          goto LABEL_486;
                        v327 = v655;
                        v328 = (void **)&v654;
                        if (v655 >= (unint64_t)HIDWORD(v655))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v654, (uint64_t)v656, v655 + 1, 8);
                          v327 = v655;
                        }
                      }
                      else
                      {
                        if (v309 == 1)
                        {
                          if (v321 != 68)
                            goto LABEL_486;
                        }
                        else if (v321 != 67)
                        {
                          goto LABEL_486;
                        }
                        if (*(llvm::Type **)v316 != v616[1])
                          goto LABEL_486;
                        v327 = v643[0];
                        v328 = &v642;
                        if (v643[0] >= (unint64_t)v643[1])
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v642, (uint64_t)v644, v643[0] + 1, 8);
                          v327 = v643[0];
                        }
                      }
                    }
                    *((_QWORD *)*v328 + v327) = v316;
                    ++*((_DWORD *)v328 + 2);
                  }
                  v314 = *(_QWORD *)(v314 + 8);
                }
                while (v314);
                if (v643[0])
                {
                  v329 = sub_1C5FAE698((const llvm::Value **)v642, v643[0], v620);
                  v330 = v309;
                  if (v311)
                    goto LABEL_450;
                  v353 = !v594;
                  if (v284 != 41)
                    v353 = 1;
                  if ((v353 & 1) != 0)
                    goto LABEL_486;
                  v354 = (uint64_t)v329;
                  v355 = *((_DWORD *)v281 + 5);
                  a8 = v598;
                  if ((v355 & 0x40000000) != 0)
                    v356 = (unint64_t *)*((_QWORD *)v281 - 1);
                  else
                    v356 = (unint64_t *)((char *)v281 - 32 * (v355 & 0x7FFFFFF));
                  v387 = v619;
                  v388 = *v356;
                  v389 = *((_QWORD *)v619 + 13);
                  v390 = *((_DWORD *)v619 + 30);
                  if (!v390)
                    goto LABEL_547;
                  v391 = ((v388 >> 4) ^ (v388 >> 9)) & (v390 - 1);
                  v392 = v389 + 48 * v391;
                  v393 = *(_QWORD *)(v392 + 24);
                  if (v393 != v388)
                  {
                    v394 = 1;
                    while (v393 != -4096)
                    {
                      v395 = v391 + v394++;
                      v391 = v395 & (v390 - 1);
                      v392 = v389 + 48 * v391;
                      v393 = *(_QWORD *)(v392 + 24);
                      if (v393 == v388)
                        goto LABEL_548;
                    }
LABEL_547:
                    v392 = v389 + 48 * v390;
                  }
LABEL_548:
                  if (v392 == v389 + 48 * v390 || (v396 = *(const llvm::SCEV **)(v392 + 40)) == 0)
                  {
                    v396 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(v619, v388);
                    v387 = v619;
                    v355 = *((_DWORD *)v281 + 5);
                  }
                  if ((v355 & 0x40000000) != 0)
                    v397 = (char *)*((_QWORD *)v281 - 1);
                  else
                    v397 = (char *)v281 - 32 * (v355 & 0x7FFFFFF);
                  v398 = *((_QWORD *)v397 + 4);
                  v399 = *((_QWORD *)v387 + 13);
                  v400 = *((_DWORD *)v387 + 30);
                  if (v400)
                  {
                    v401 = ((v398 >> 4) ^ (v398 >> 9)) & (v400 - 1);
                    v402 = v399 + 48 * v401;
                    v403 = *(_QWORD *)(v402 + 24);
                    if (v403 != v398)
                    {
                      v404 = 1;
                      while (v403 != -4096)
                      {
                        v405 = v401 + v404++;
                        v401 = v405 & (v400 - 1);
                        v402 = v399 + 48 * v401;
                        v403 = *(_QWORD *)(v402 + 24);
                        if (v403 == v398)
                          goto LABEL_561;
                      }
                      goto LABEL_560;
                    }
                  }
                  else
                  {
LABEL_560:
                    v402 = v399 + 48 * v400;
                  }
LABEL_561:
                  if (v402 == v399 + 48 * v400 || (v406 = *(const llvm::SCEV **)(v402 + 40)) == 0)
                    v406 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(v387, v398);
                  v407 = *((_DWORD *)v610 + 5);
                  if ((v407 & 0x40000000) != 0)
                    v408 = (llvm::Value **)*((_QWORD *)v610 - 1);
                  else
                    v408 = (llvm::Value **)((char *)v610 - 32 * (v407 & 0x7FFFFFF));
                  if (*v408 != v282 || !llvm::ScalarEvolution::isKnownNegative(v619, v406))
                  {
                    v343 = 0;
                    goto LABEL_488;
                  }
                  v577 = (uint64_t ****)v619;
                  NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV((uint64_t)v619, (uint64_t)v406);
                  isKnownPredicateAt = llvm::ScalarEvolution::isKnownPredicateAt(v577, 35, v396, NegativeSCEV, v354);
                  v343 = 0;
                  if (!isKnownPredicateAt)
                    goto LABEL_488;
                  v330 = 1;
LABEL_450:
                  v331 = *((_QWORD *)v619 + 13);
                  v332 = *((_DWORD *)v619 + 30);
                  v333 = (uint64_t)v596;
                  if (v332)
                  {
                    v334 = (v332 - 1) & ((v596 >> 4) ^ (v596 >> 9));
                    v335 = v331 + 48 * v334;
                    v336 = *(llvm::Value **)(v335 + 24);
                    if (v336 != v596)
                    {
                      v337 = 1;
                      while (v336 != (llvm::Value *)-4096)
                      {
                        v338 = v334 + v337++;
                        v334 = v338 & (v332 - 1);
                        v335 = v331 + 48 * v334;
                        v336 = *(llvm::Value **)(v335 + 24);
                        if (v336 == v596)
                          goto LABEL_477;
                      }
                      goto LABEL_476;
                    }
                  }
                  else
                  {
LABEL_476:
                    v335 = v331 + 48 * v332;
                  }
LABEL_477:
                  if (v335 == v331 + 48 * v332 || (v357 = *(_QWORD *)(v335 + 40)) == 0)
                    v357 = llvm::ScalarEvolution::createSCEVIter(v619, (unint64_t)v596);
                  v358 = v357 && *(_WORD *)(v357 + 24) == 7;
                  if (!v358 || *(_QWORD **)(v357 + 48) != v618)
                  {
LABEL_486:
                    v343 = 0;
                    goto LABEL_487;
                  }
                  v414 = v610;
                  v415 = *((_DWORD *)v610 + 5);
                  if ((v415 & 0x40000000) != 0)
                    v416 = (unsigned __int8 **)*((_QWORD *)v610 - 1);
                  else
                    v416 = (unsigned __int8 **)((char *)v610 - 32 * (v415 & 0x7FFFFFF));
                  if (*v416 == (unsigned __int8 *)v282)
                  {
                    v449 = v596;
                  }
                  else
                  {
                    v449 = (_QWORD *)sub_1C5FAF9AC((uint64_t)v616, *v416, (uint64_t)v616[1], v330 != 0, (uint64_t)v610);
                    v414 = v610;
                    v415 = *((_DWORD *)v610 + 5);
                  }
                  if ((v415 & 0x40000000) != 0)
                    v482 = (char *)*((_QWORD *)v414 - 1);
                  else
                    v482 = (char *)v414 - 32 * (v415 & 0x7FFFFFF);
                  v483 = (unsigned __int8 *)*((_QWORD *)v482 + 4);
                  if (v483 != (unsigned __int8 *)v282)
                  {
                    v333 = sub_1C5FAF9AC((uint64_t)v616, v483, (uint64_t)v616[1], v330 != 0, (uint64_t)v414);
                    v414 = v610;
                  }
                  a8 = v598;
                  v484 = *((_BYTE *)v414 + 16);
                  if ((*((_BYTE *)v414 + 23) & 0x10) != 0)
                  {
                    v485 = ***(_QWORD ***)v414;
                    v486 = *(_QWORD *)(v485 + 152);
                    v487 = *(unsigned int *)(v485 + 168);
                    if (!(_DWORD)v487)
                      goto LABEL_688;
                    LODWORD(v488) = (v487 - 1) & ((v414 >> 4) ^ (v414 >> 9));
                    v489 = (llvm::Value **)(v486 + 16 * v488);
                    v490 = *v489;
                    if (*v489 != v414)
                    {
                      v491 = 1;
                      while (v490 != (llvm::Value *)-4096)
                      {
                        v492 = v488 + v491++;
                        v488 = v492 & (v487 - 1);
                        v490 = *(llvm::Value **)(v486 + 16 * v488);
                        if (v490 == v414)
                        {
                          v489 = (llvm::Value **)(v486 + 16 * v488);
                          goto LABEL_689;
                        }
                      }
LABEL_688:
                      v489 = (llvm::Value **)(v486 + 16 * v487);
                    }
LABEL_689:
                    v493 = v489[1];
                    v496 = *(void **)v493;
                    v495 = (char *)v493 + 16;
                    v494 = v496;
                  }
                  else
                  {
                    v494 = 0;
                    v495 = &byte_1C871356D;
                  }
                  v650[0] = 261;
                  v646 = v495;
                  v647 = v494;
                  v497 = (char *)operator new(0x80uLL);
                  v498 = v497;
                  *(_QWORD *)v497 = 0;
                  *((_QWORD *)v497 + 1) = 0;
                  *((_QWORD *)v497 + 2) = 0;
                  *((_QWORD *)v497 + 5) = 0;
                  *((_QWORD *)v497 + 6) = 0;
                  *((_QWORD *)v497 + 4) = 0;
                  v499 = (uint64_t *)(v497 + 32);
                  *((_QWORD *)v497 + 8) = *v449;
                  v500 = (llvm::Value *)(v497 + 64);
                  *((_QWORD *)v497 + 3) = v497 + 64;
                  *((_QWORD *)v497 + 7) = v497 + 64;
                  *((_QWORD *)v497 + 9) = 0;
                  v497[80] = v484;
                  v497[81] = 0;
                  *((_WORD *)v497 + 41) = 0;
                  *((_DWORD *)v497 + 21) = 2;
                  *((_DWORD *)v497 + 30) = 0;
                  *(_OWORD *)(v497 + 104) = 0u;
                  *(_OWORD *)(v497 + 88) = 0u;
                  *(_QWORD *)v497 = v449;
                  v503 = v449[1];
                  v502 = v449 + 1;
                  v501 = v503;
                  *((_QWORD *)v497 + 1) = v503;
                  if (v503)
                    *(_QWORD *)(v501 + 16) = v497 + 8;
                  *((_QWORD *)v497 + 2) = v502;
                  *v502 = v497;
                  if (*((_QWORD *)v497 + 4))
                  {
                    **((_QWORD **)v497 + 6) = *((_QWORD *)v497 + 5);
                    v586 = *((_QWORD *)v497 + 5);
                    if (v586)
                      *(_QWORD *)(v586 + 16) = *((_QWORD *)v497 + 6);
                  }
                  *v499 = v333;
                  if (v333)
                  {
                    v506 = *(_QWORD *)(v333 + 8);
                    v505 = (uint64_t **)(v333 + 8);
                    v504 = v506;
                    *((_QWORD *)v497 + 5) = v506;
                    if (v506)
                      *(_QWORD *)(v504 + 16) = v497 + 40;
                    *((_QWORD *)v497 + 6) = v505;
                    *v505 = v499;
                  }
                  llvm::Value::setName((uint64_t ***)v497 + 8, (uint64_t)&v646);
                  sub_1C4773D54((uint64_t)&v646, (uint64_t)v610, 0, 0, 0);
                  v614 = 257;
                  (*(void (**)(uint64_t, llvm::Value *, llvm::ValueAsMetadata **, _QWORD **, char *))(*(_QWORD *)v653 + 16))(v653, v500, &v611, v651, v652);
                  if ((_DWORD)v647)
                  {
                    v507 = (char *)v646;
                    v508 = (char *)v646 + 16 * v647;
                    v509 = (unsigned __int8 **)(v498 + 112);
                    do
                    {
                      v510 = *(_DWORD *)v507;
                      v511 = (unsigned __int8 *)*((_QWORD *)v507 + 1);
                      if (v511)
                      {
                        if (!v510)
                        {
                          v615 = (llvm::ValueAsMetadata *)*((_QWORD *)v507 + 1);
                          llvm::MetadataTracking::track((uint64_t)&v615, v511, 2);
                          v512 = *v509;
                          goto LABEL_709;
                        }
                      }
                      else
                      {
                        v512 = *v509;
                        if (!*v509 && (v498[87] & 0x20) == 0)
                          goto LABEL_706;
                        if (!v510)
                        {
                          v615 = 0;
LABEL_709:
                          if (v512)
                            llvm::MetadataTracking::untrack((uint64_t)(v498 + 112), v512);
                          v513 = (unsigned __int8 *)v615;
                          *v509 = (unsigned __int8 *)v615;
                          if (v513)
                            llvm::MetadataTracking::retrack((uint64_t)&v615, v513, (uint64_t)(v498 + 112));
                          goto LABEL_706;
                        }
                      }
                      llvm::Value::setMetadata(v500, *(_DWORD *)v507, (llvm::MDNode *)v511);
LABEL_706:
                      v507 += 16;
                    }
                    while (v507 != v508);
                  }
                  llvm::Instruction::copyIRFlags((uint64_t)v500, (uint64_t)v414, 1);
                  v611 = v610;
                  *(_DWORD *)sub_1C56D136C((uint64_t)v634, (uint64_t *)&v611) = v309;
                  if (v643[0])
                  {
                    v514 = (llvm::ValueAsMetadata **)v642;
                    v515 = 8 * v643[0];
                    do
                    {
                      v611 = 0;
                      v611 = *v514;
                      ++v623;
                      llvm::Value::doRAUW(v611, v500, (llvm::Value *)1);
                      v516 = v628;
                      v517 = v628[2];
                      if (v517 >= v628[3])
                      {
                        sub_1C578EDF4(v628, (uint64_t *)&v611);
                      }
                      else
                      {
                        v518 = v611;
                        v519 = (llvm::ValueHandleBase *)(*(_QWORD *)v628 + 24 * v517);
                        *(_QWORD *)v519 = 6;
                        *((_QWORD *)v519 + 1) = 0;
                        *((_QWORD *)v519 + 2) = v518;
                        if (v518 != (llvm::ValueAsMetadata *)-8192
                          && v518 != (llvm::ValueAsMetadata *)-4096
                          && v518)
                        {
                          llvm::ValueHandleBase::AddToUseList(v519);
                          v517 = v516[2];
                        }
                        v516[2] = v517 + 1;
                      }
                      ++v514;
                      v515 -= 8;
                    }
                    while (v515);
                  }
                  if ((_DWORD)v658)
                  {
                    v520 = v657;
                    v521 = &v657[v658];
                    while (1)
                    {
                      v522 = 0;
                      v615 = 0;
                      v615 = *v520;
                      v651 = (_QWORD **)*((_QWORD *)v615 + 5);
                      v652 = (char *)v615 + 24;
                      v523 = (unsigned __int8 *)*((_QWORD *)v615 + 6);
                      v611 = (llvm::ValueAsMetadata *)v523;
                      if (v523)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v611, v523, 2);
                        v522 = (unsigned __int8 *)v611;
                      }
                      sub_1C4774EF4((uint64_t)&v646, 0, (uint64_t)v522);
                      if (v611)
                        llvm::MetadataTracking::untrack((uint64_t)&v611, (unsigned __int8 *)v611);
                      v524 = *(_QWORD *)v500;
                      if ((*((_BYTE *)v615 + 23) & 0x10) != 0)
                        break;
                      v534 = 0;
                      v535 = (unsigned __int8 *)&byte_1C871356D;
LABEL_739:
                      v614 = 773;
                      v611 = (llvm::ValueAsMetadata *)v535;
                      v612 = v534;
                      v613 = ".wide";
                      v537 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v646, v524, 1, (uint64_t)&v611);
                      SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(*((llvm::BasicBlock **)v615 + 5));
                      sub_1C477667C(v537, (uint64_t)v500, SinglePredecessor);
                      v539 = *((_QWORD *)v615 + 5);
                      v540 = v539 + 40;
                      for (k = *(_QWORD *)(v539 + 48); k != v540; k = *(_QWORD *)(k + 8))
                      {
                        v542 = k - 24;
                        if (!k)
                          v542 = 0;
                        if (*(_BYTE *)(v542 + 16) != 83)
                        {
                          v543 = *(unsigned __int8 *)(k - 8) - 38;
                          v64 = v543 > 0x38;
                          v544 = (1 << v543) & 0x100060000000001;
                          if (v64 || v544 == 0)
                            v540 = k;
                          else
                            v540 = *(_QWORD *)(k + 8);
                          break;
                        }
                      }
                      v546 = 0;
                      if (v540)
                        v547 = v540 - 24;
                      else
                        v547 = 0;
                      v651 = *(_QWORD ***)(v547 + 40);
                      v652 = (char *)(v547 + 24);
                      v548 = *(unsigned __int8 **)(v547 + 48);
                      v611 = (llvm::ValueAsMetadata *)v548;
                      if (v548)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v611, v548, 2);
                        v546 = (unsigned __int8 *)v611;
                      }
                      sub_1C4774EF4((uint64_t)&v646, 0, (uint64_t)v546);
                      if (v611)
                        llvm::MetadataTracking::untrack((uint64_t)&v611, (unsigned __int8 *)v611);
                      v549 = *(uint64_t ***)v615;
                      v614 = 257;
                      v550 = sub_1C4773E38((uint64_t *)&v646, 38, (unsigned __int8 *)v537, (uint64_t)v549, (uint64_t)&v611);
                      llvm::Value::doRAUW(v615, (llvm::Value *)v550, (llvm::Value *)1);
                      sub_1C5B2DB10(v628, (uint64_t *)&v615);
                      if (++v520 == v521)
                        goto LABEL_761;
                    }
                    v525 = ***(_QWORD ***)v615;
                    v526 = *(_QWORD *)(v525 + 152);
                    v527 = *(unsigned int *)(v525 + 168);
                    if ((_DWORD)v527)
                    {
                      LODWORD(v528) = (v527 - 1) & ((v615 >> 4) ^ (v615 >> 9));
                      v529 = v526 + 16 * v528;
                      v530 = *(llvm::ValueAsMetadata **)v529;
                      if (*(llvm::ValueAsMetadata **)v529 != v615)
                      {
                        v531 = 1;
                        while (v530 != (llvm::ValueAsMetadata *)-4096)
                        {
                          v532 = v528 + v531++;
                          v528 = v532 & (v527 - 1);
                          v530 = *(llvm::ValueAsMetadata **)(v526 + 16 * v528);
                          if (v530 == v615)
                          {
                            v529 = v526 + 16 * v528;
                            goto LABEL_738;
                          }
                        }
                        goto LABEL_737;
                      }
                    }
                    else
                    {
LABEL_737:
                      v529 = v526 + 16 * v527;
                    }
LABEL_738:
                    v533 = *(_QWORD **)(v529 + 8);
                    v536 = *v533;
                    v535 = (unsigned __int8 *)(v533 + 2);
                    v534 = v536;
                    goto LABEL_739;
                  }
LABEL_761:
                  if ((_DWORD)v655)
                  {
                    v551 = v654;
                    v552 = (char *)&v654[v655];
                    while (1)
                    {
                      v553 = *v551;
                      v615 = (llvm::ValueAsMetadata *)v553;
                      v651 = (_QWORD **)*((_QWORD *)v553 + 5);
                      v652 = v553 + 24;
                      v554 = (unsigned __int8 *)*((_QWORD *)v553 + 6);
                      v611 = (llvm::ValueAsMetadata *)v554;
                      if (v554)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v611, v554, 2);
                        v555 = (unsigned __int8 *)v611;
                      }
                      else
                      {
                        v555 = 0;
                      }
                      sub_1C4774EF4((uint64_t)&v646, 0, (uint64_t)v555);
                      if (v611)
                        llvm::MetadataTracking::untrack((uint64_t)&v611, (unsigned __int8 *)v611);
                      v556 = *((_WORD *)v553 + 9);
                      v557 = (unsigned __int8 *)*((_QWORD *)v553 - 8);
                      if (v610 == (llvm::Value *)v557)
                        break;
                      v558 = *(_QWORD *)v500;
                      if (v594)
                      {
                        v614 = 257;
                        v559 = sub_1C4773E38((uint64_t *)&v646, 39, v557, v558, (uint64_t)&v611);
                        v560 = (unsigned __int8 *)*((_QWORD *)v553 - 4);
                        if (v610 != (llvm::Value *)v560)
                        {
                          v561 = *(_QWORD *)v500;
                          goto LABEL_773;
                        }
                      }
                      else
                      {
                        v614 = 257;
                        v559 = sub_1C4773E38((uint64_t *)&v646, 40, v557, v558, (uint64_t)&v611);
                        v560 = (unsigned __int8 *)*((_QWORD *)v553 - 4);
                        if (v610 != (llvm::Value *)v560)
                        {
                          v561 = *(_QWORD *)v500;
                          goto LABEL_776;
                        }
                      }
                      v562 = (unsigned __int8 *)v500;
LABEL_779:
                      if ((v553[23] & 0x10) == 0)
                      {
                        v573 = 0;
                        v574 = (unsigned __int8 *)&byte_1C871356D;
                        goto LABEL_788;
                      }
                      v564 = ***(_QWORD ***)v553;
                      v565 = *(_QWORD *)(v564 + 152);
                      v566 = *(unsigned int *)(v564 + 168);
                      if (!(_DWORD)v566)
                        goto LABEL_786;
                      LODWORD(v567) = (v566 - 1) & ((v553 >> 4) ^ (v553 >> 9));
                      v568 = (char **)(v565 + 16 * v567);
                      v569 = *v568;
                      if (*v568 != v553)
                      {
                        v570 = 1;
                        while (v569 != (char *)-4096)
                        {
                          v571 = v567 + v570++;
                          v567 = v571 & (v566 - 1);
                          v569 = *(char **)(v565 + 16 * v567);
                          if (v569 == v553)
                          {
                            v568 = (char **)(v565 + 16 * v567);
                            goto LABEL_787;
                          }
                        }
LABEL_786:
                        v568 = (char **)(v565 + 16 * v566);
                      }
LABEL_787:
                      v572 = v568[1];
                      v575 = *(_QWORD *)v572;
                      v574 = (unsigned __int8 *)(v572 + 16);
                      v573 = v575;
LABEL_788:
                      v614 = 773;
                      v611 = (llvm::ValueAsMetadata *)v574;
                      v612 = v573;
                      v613 = ".wide";
                      v576 = (llvm::Value *)sub_1C4774B48((uint64_t)&v646, v556 & 0x3F, (uint64_t)v559, (uint64_t)v562, (uint64_t)&v611);
                      llvm::Value::doRAUW(v615, v576, (llvm::Value *)1);
                      sub_1C5FAE768(v628, (uint64_t *)&v615);
                      ++v551;
                      a8 = v598;
                      if (v551 == (char **)v552)
                        goto LABEL_792;
                    }
                    v560 = (unsigned __int8 *)*((_QWORD *)v553 - 4);
                    v559 = (unsigned __int8 *)v500;
                    v562 = (unsigned __int8 *)v500;
                    if (v557 == v560)
                      goto LABEL_779;
                    v561 = *(_QWORD *)v500;
                    v559 = (unsigned __int8 *)v500;
                    if (v594)
                    {
LABEL_773:
                      v614 = 257;
                      v563 = 39;
                    }
                    else
                    {
LABEL_776:
                      v614 = 257;
                      v563 = 40;
                    }
                    v562 = sub_1C4773E38((uint64_t *)&v646, v563, v560, v561, (uint64_t)&v611);
                    goto LABEL_779;
                  }
LABEL_792:
                  if (v646 != &v648)
                    free(v646);
LABEL_462:
                  v343 = 1;
                }
                else
                {
LABEL_456:
                  v339 = v628;
                  v340 = v628[2];
                  if (v340 < v628[3])
                  {
                    v341 = v610;
                    v342 = (llvm::ValueHandleBase *)(*(_QWORD *)v628 + 24 * v340);
                    *(_QWORD *)v342 = 6;
                    *((_QWORD *)v342 + 1) = 0;
                    *((_QWORD *)v342 + 2) = v341;
                    a8 = v598;
                    if (v341 != (llvm::Value *)-8192 && v341 != (llvm::Value *)-4096 && v341)
                    {
                      llvm::ValueHandleBase::AddToUseList(v342);
                      v340 = v339[2];
                    }
                    v339[2] = v340 + 1;
                    goto LABEL_462;
                  }
                  sub_1C578EDF4(v628, (uint64_t *)&v610);
                  v343 = 1;
LABEL_487:
                  a8 = v598;
                }
LABEL_488:
                if (v654 != v656)
                  free(v654);
                a7 = v599;
                if (v657 != v659)
                  free(v657);
                if (v642 != v644)
                  free(v642);
                if ((v343 & 1) != 0)
                  goto LABEL_497;
LABEL_495:
                v607[0] = *(_OWORD *)v600;
                v607[1] = *(_OWORD *)v601;
                v184 = v620;
                v150 = v617;
                v185 = (uint64_t *)v607;
                goto LABEL_496;
              }
              v312 = 2;
            }
            v311 = (*((_BYTE *)v281 + 17) & v312) != 0;
            goto LABEL_411;
          }
LABEL_400:
          a7 = v599;
          goto LABEL_495;
        }
        v606 = 0;
        if (v627 == v243 && llvm::SCEVExpander::hoistIVInc(v595, v626, v600[1]))
        {
          v313 = v626;
          v606 = v626;
          goto LABEL_654;
        }
        v344 = v600[1];
        v345 = *((unsigned __int8 *)v600[1] + 16);
        if (v345 > 0x3A)
          goto LABEL_671;
        v346 = v600[0];
        v347 = v601[0];
        if (((1 << v345) & 0x7E0000000000000) != 0)
        {
          if (v635)
          {
            LODWORD(v348) = (v635 - 1) & ((LODWORD(v600[0]) >> 4) ^ (LODWORD(v600[0]) >> 9));
            v349 = v634[0] + 16 * v348;
            v350 = *(llvm::Value **)v349;
            if (v600[0] != *(llvm::Value **)v349)
            {
              v351 = 1;
              while (v350 != (llvm::Value *)-4096)
              {
                v352 = v348 + v351++;
                v348 = v352 & (v635 - 1);
                v350 = *(llvm::Value **)(v634[0] + 16 * v348);
                if (v600[0] == v350)
                {
                  v349 = v634[0] + 16 * v348;
                  goto LABEL_821;
                }
              }
              v349 = v634[0] + 16 * v635;
LABEL_821:
              a8 = v598;
            }
          }
          else
          {
            v349 = v634[0];
          }
          v367 = *(_DWORD *)(v349 + 8);
          v368 = *((_DWORD *)v600[1] + 5);
          if ((v368 & 0x40000000) != 0)
            v369 = (unsigned __int8 **)*((_QWORD *)v600[1] - 1);
          else
            v369 = (unsigned __int8 **)((char *)v600[1] - 32 * (v368 & 0x7FFFFFF));
          v370 = v601[0];
          if (*v369 != (unsigned __int8 *)v600[0])
          {
            v370 = (llvm::Value *)sub_1C5FAF9AC((uint64_t)v616, *v369, (uint64_t)v616[1], v367 == 1, (uint64_t)v600[1]);
            v368 = *((_DWORD *)v344 + 5);
          }
          if ((v368 & 0x40000000) != 0)
            v371 = (char *)*((_QWORD *)v344 - 1);
          else
            v371 = (char *)v344 - 32 * (v368 & 0x7FFFFFF);
          v372 = (unsigned __int8 *)*((_QWORD *)v371 + 4);
          if (v372 != (unsigned __int8 *)v346)
          {
            v347 = (llvm::Value *)sub_1C5FAF9AC((uint64_t)v616, v372, (uint64_t)v616[1], v367 == 1, (uint64_t)v344);
            v368 = *((_DWORD *)v344 + 5);
          }
          v373 = *((_BYTE *)v344 + 16);
          if ((v368 & 0x10000000) != 0)
          {
            v374 = ***(_QWORD ***)v344;
            v375 = *(_QWORD *)(v374 + 152);
            v376 = *(unsigned int *)(v374 + 168);
            if (!(_DWORD)v376)
              goto LABEL_597;
            LODWORD(v377) = (v376 - 1) & ((v344 >> 4) ^ (v344 >> 9));
            v378 = (llvm::ValueAsMetadata **)(v375 + 16 * v377);
            v379 = *v378;
            if (*v378 != v344)
            {
              v380 = 1;
              while (v379 != (llvm::ValueAsMetadata *)-4096)
              {
                v381 = v377 + v380++;
                v377 = v381 & (v376 - 1);
                v379 = *(llvm::ValueAsMetadata **)(v375 + 16 * v377);
                if (v379 == v344)
                {
                  v378 = (llvm::ValueAsMetadata **)(v375 + 16 * v377);
                  goto LABEL_598;
                }
              }
LABEL_597:
              v378 = (llvm::ValueAsMetadata **)(v375 + 16 * v376);
            }
LABEL_598:
            v429 = v378[1];
            v432 = *(void **)v429;
            v431 = (char *)v429 + 16;
            v430 = v432;
          }
          else
          {
            v430 = 0;
            v431 = &byte_1C871356D;
          }
          v650[0] = 261;
          v646 = v431;
          v647 = v430;
          v433 = (char *)operator new(0x80uLL);
          v434 = v433;
          *(_QWORD *)v433 = 0;
          *((_QWORD *)v433 + 1) = 0;
          *((_QWORD *)v433 + 2) = 0;
          *((_QWORD *)v433 + 5) = 0;
          *((_QWORD *)v433 + 6) = 0;
          *((_QWORD *)v433 + 4) = 0;
          v435 = (llvm::Value **)(v433 + 32);
          *((_QWORD *)v433 + 8) = *(_QWORD *)v370;
          v313 = (llvm::Value *)(v433 + 64);
          *((_QWORD *)v433 + 3) = v433 + 64;
          *((_QWORD *)v433 + 7) = v433 + 64;
          *((_QWORD *)v433 + 9) = 0;
          v433[80] = v373;
          v433[81] = 0;
          *((_WORD *)v433 + 41) = 0;
          *((_DWORD *)v433 + 21) = 2;
          *((_DWORD *)v433 + 30) = 0;
          *(_OWORD *)(v433 + 104) = 0u;
          *(_OWORD *)(v433 + 88) = 0u;
          *(_QWORD *)v433 = v370;
          v438 = *((_QWORD *)v370 + 1);
          v437 = (_QWORD *)((char *)v370 + 8);
          v436 = v438;
          *((_QWORD *)v433 + 1) = v438;
          if (v438)
            *(_QWORD *)(v436 + 16) = v433 + 8;
          *((_QWORD *)v433 + 2) = v437;
          *v437 = v433;
          if (*((_QWORD *)v433 + 4))
          {
            **((_QWORD **)v433 + 6) = *((_QWORD *)v433 + 5);
            v584 = *((_QWORD *)v433 + 5);
            if (v584)
              *(_QWORD *)(v584 + 16) = *((_QWORD *)v433 + 6);
          }
          *v435 = v347;
          if (v347)
          {
            v441 = *((_QWORD *)v347 + 1);
            v440 = (llvm::Value ***)((char *)v347 + 8);
            v439 = v441;
            *((_QWORD *)v433 + 5) = v441;
            if (v441)
              *(_QWORD *)(v439 + 16) = v433 + 40;
            *((_QWORD *)v433 + 6) = v440;
            *v440 = v435;
          }
          llvm::Value::setName((uint64_t ***)v433 + 8, (uint64_t)&v646);
          sub_1C4773D54((uint64_t)&v646, (uint64_t)v344, 0, 0, 0);
          LOWORD(v645) = 257;
          (*(void (**)(uint64_t, llvm::Value *, void **, _QWORD **, char *))(*(_QWORD *)v653 + 16))(v653, v313, &v642, v651, v652);
          if ((_DWORD)v647)
          {
            v442 = (char *)v646;
            v443 = (char *)v646 + 16 * v647;
            v444 = (unsigned __int8 **)(v434 + 112);
            do
            {
              v445 = *(_DWORD *)v442;
              v446 = (unsigned __int8 *)*((_QWORD *)v442 + 1);
              if (v446)
              {
                if (!v445)
                {
                  v657 = (llvm::Value **)*((_QWORD *)v442 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v657, v446, 2);
                  v447 = *v444;
                  goto LABEL_618;
                }
              }
              else
              {
                v447 = *v444;
                if (!*v444 && (v434[87] & 0x20) == 0)
                  goto LABEL_615;
                if (!v445)
                {
                  v657 = 0;
LABEL_618:
                  if (v447)
                    llvm::MetadataTracking::untrack((uint64_t)(v434 + 112), v447);
                  v448 = (unsigned __int8 *)v657;
                  *v444 = (unsigned __int8 *)v657;
                  if (v448)
                    llvm::MetadataTracking::retrack((uint64_t)&v657, v448, (uint64_t)(v434 + 112));
                  goto LABEL_615;
                }
              }
              llvm::Value::setMetadata(v313, *(_DWORD *)v442, (llvm::MDNode *)v446);
LABEL_615:
              v442 += 16;
            }
            while (v442 != v443);
          }
LABEL_651:
          llvm::Instruction::copyIRFlags((uint64_t)v313, (uint64_t)v344, 1);
          if (v646 != &v648)
            free(v646);
          v606 = v313;
LABEL_654:
          v470 = *((_QWORD *)v619 + 13);
          v471 = *((_DWORD *)v619 + 30);
          if (v471)
          {
            v472 = (v471 - 1) & ((v313 >> 4) ^ (v313 >> 9));
            v473 = v470 + 48 * v472;
            v474 = *(llvm::Value **)(v473 + 24);
            if (v474 != v313)
            {
              v475 = 1;
              while (v474 != (llvm::Value *)-4096)
              {
                v476 = v472 + v475++;
                v472 = v476 & (v471 - 1);
                v473 = v470 + 48 * v472;
                v474 = *(llvm::Value **)(v473 + 24);
                if (v474 == v313)
                  goto LABEL_661;
              }
              goto LABEL_660;
            }
          }
          else
          {
LABEL_660:
            v473 = v470 + 48 * v471;
          }
LABEL_661:
          if (v473 == v470 + 48 * v471 || (v477 = *(_QWORD *)(v473 + 40)) == 0)
            v477 = llvm::ScalarEvolution::createSCEVIter(v619, (unint64_t)v313);
          if ((unsigned __int8 *)v477 == v245)
          {
            llvm::replaceAllDbgUsesWith(v600[1], v606, v606, v620, v142);
            v646 = v600[1];
            *(_DWORD *)sub_1C56D136C((uint64_t)v634, (uint64_t *)&v646) = v193;
            a7 = v599;
            if (v606)
              sub_1C5FAE7E0((uint64_t)v616, v602[1]);
            goto LABEL_497;
          }
          v478 = v628;
          v479 = v628[2];
          if (v479 >= v628[3])
          {
            sub_1C578EDF4(v628, (uint64_t *)&v606);
          }
          else
          {
            v480 = v606;
            v481 = (llvm::ValueHandleBase *)(*(_QWORD *)v628 + 24 * v479);
            *(_QWORD *)v481 = 6;
            *((_QWORD *)v481 + 1) = 0;
            *((_QWORD *)v481 + 2) = v480;
            if (v480 != (llvm::Value *)-8192 && v480 != (llvm::Value *)-4096 && v480)
            {
              llvm::ValueHandleBase::AddToUseList(v481);
              v479 = v478[2];
            }
            v478[2] = v479 + 1;
          }
LABEL_671:
          a7 = v599;
          goto LABEL_497;
        }
        if (((1 << v345) & 0xAA0000000000) == 0)
          goto LABEL_671;
        v610 = v601[0];
        v611 = (llvm::ValueAsMetadata *)v245;
        v615 = v600[1];
        v363 = *((_DWORD *)v600[1] + 5);
        v364 = (v363 & 0x40000000) != 0
             ? (llvm::Value **)*((_QWORD *)v600[1] - 1)
             : (llvm::Value **)((char *)v600[1] - 32 * (v363 & 0x7FFFFFF));
        v609 = *v364 != v600[0];
        v642 = v616;
        *(_QWORD *)v643 = &v609;
        v644[0] = &v610;
        v644[1] = &v615;
        v645 = &v611;
        if (v635)
        {
          LODWORD(v382) = (v635 - 1) & ((LODWORD(v600[0]) >> 4) ^ (LODWORD(v600[0]) >> 9));
          v383 = v634[0] + 16 * v382;
          v384 = *(llvm::Value **)v383;
          if (v600[0] != *(llvm::Value **)v383)
          {
            v385 = 1;
            while (v384 != (llvm::Value *)-4096)
            {
              v386 = v382 + v385++;
              v382 = v386 & (v635 - 1);
              v384 = *(llvm::Value **)(v634[0] + 16 * v382);
              if (v600[0] == v384)
              {
                v383 = v634[0] + 16 * v382;
                goto LABEL_823;
              }
            }
            v383 = v634[0] + 16 * v635;
LABEL_823:
            a8 = v598;
          }
        }
        else
        {
          v383 = v634[0];
        }
        v409 = *(_DWORD *)(v383 + 8);
        v410 = v409 == 1;
        if (!sub_1C5FAFCC8((uint64_t)&v642, v409 == 1))
        {
          v410 = v409 != 1;
          if (!sub_1C5FAFCC8((uint64_t)&v642, v409 != 1))
            goto LABEL_671;
        }
        v344 = v615;
        v411 = *((_DWORD *)v615 + 5);
        if ((v411 & 0x40000000) != 0)
          v412 = (unsigned __int8 **)*((_QWORD *)v615 - 1);
        else
          v412 = (unsigned __int8 **)((char *)v615 - 32 * (v411 & 0x7FFFFFF));
        if (*v412 == (unsigned __int8 *)v346)
        {
          v413 = v610;
        }
        else
        {
          v413 = (llvm::Value *)sub_1C5FAF9AC((uint64_t)v616, *v412, (uint64_t)v616[1], v410, (uint64_t)v615);
          v344 = v615;
          v411 = *((_DWORD *)v615 + 5);
        }
        if ((v411 & 0x40000000) != 0)
          v417 = (char *)*((_QWORD *)v344 - 1);
        else
          v417 = (char *)v344 - 32 * (v411 & 0x7FFFFFF);
        v418 = (unsigned __int8 *)*((_QWORD *)v417 + 4);
        if (v418 == (unsigned __int8 *)v346)
        {
          v419 = v610;
        }
        else
        {
          v419 = (llvm::Value *)sub_1C5FAF9AC((uint64_t)v616, v418, (uint64_t)v616[1], v410, (uint64_t)v344);
          v344 = v615;
        }
        v420 = *((_BYTE *)v344 + 16);
        if ((*((_BYTE *)v344 + 23) & 0x10) != 0)
        {
          v421 = ***(_QWORD ***)v344;
          v422 = *(_QWORD *)(v421 + 152);
          v423 = *(unsigned int *)(v421 + 168);
          if (!(_DWORD)v423)
            goto LABEL_626;
          LODWORD(v424) = (v423 - 1) & ((v344 >> 4) ^ (v344 >> 9));
          v425 = (llvm::ValueAsMetadata **)(v422 + 16 * v424);
          v426 = *v425;
          if (*v425 != v344)
          {
            v427 = 1;
            while (v426 != (llvm::ValueAsMetadata *)-4096)
            {
              v428 = v424 + v427++;
              v424 = v428 & (v423 - 1);
              v426 = *(llvm::ValueAsMetadata **)(v422 + 16 * v424);
              if (v426 == v344)
              {
                v425 = (llvm::ValueAsMetadata **)(v422 + 16 * v424);
                goto LABEL_627;
              }
            }
LABEL_626:
            v425 = (llvm::ValueAsMetadata **)(v422 + 16 * v423);
          }
LABEL_627:
          v450 = v425[1];
          v453 = *(void **)v450;
          v452 = (char *)v450 + 16;
          v451 = v453;
        }
        else
        {
          v451 = 0;
          v452 = &byte_1C871356D;
        }
        v650[0] = 261;
        v646 = v452;
        v647 = v451;
        v454 = (char *)operator new(0x80uLL);
        v455 = v454;
        *(_QWORD *)v454 = 0;
        *((_QWORD *)v454 + 1) = 0;
        *((_QWORD *)v454 + 2) = 0;
        *((_QWORD *)v454 + 5) = 0;
        *((_QWORD *)v454 + 6) = 0;
        *((_QWORD *)v454 + 4) = 0;
        v456 = (llvm::Value **)(v454 + 32);
        *((_QWORD *)v454 + 8) = *(_QWORD *)v413;
        v313 = (llvm::Value *)(v454 + 64);
        *((_QWORD *)v454 + 3) = v454 + 64;
        *((_QWORD *)v454 + 7) = v454 + 64;
        *((_QWORD *)v454 + 9) = 0;
        v454[80] = v420;
        v454[81] = 0;
        *((_WORD *)v454 + 41) = 0;
        *((_DWORD *)v454 + 21) = 2;
        *((_DWORD *)v454 + 30) = 0;
        *(_OWORD *)(v454 + 104) = 0u;
        *(_OWORD *)(v454 + 88) = 0u;
        *(_QWORD *)v454 = v413;
        v459 = *((_QWORD *)v413 + 1);
        v458 = (_QWORD *)((char *)v413 + 8);
        v457 = v459;
        *((_QWORD *)v454 + 1) = v459;
        if (v459)
          *(_QWORD *)(v457 + 16) = v454 + 8;
        *((_QWORD *)v454 + 2) = v458;
        *v458 = v454;
        if (*((_QWORD *)v454 + 4))
        {
          **((_QWORD **)v454 + 6) = *((_QWORD *)v454 + 5);
          v585 = *((_QWORD *)v454 + 5);
          if (v585)
            *(_QWORD *)(v585 + 16) = *((_QWORD *)v454 + 6);
        }
        *v456 = v419;
        if (v419)
        {
          v462 = *((_QWORD *)v419 + 1);
          v461 = (llvm::Value ***)((char *)v419 + 8);
          v460 = v462;
          *((_QWORD *)v454 + 5) = v462;
          if (v462)
            *(_QWORD *)(v460 + 16) = v454 + 40;
          *((_QWORD *)v454 + 6) = v461;
          *v461 = v456;
        }
        llvm::Value::setName((uint64_t ***)v454 + 8, (uint64_t)&v646);
        sub_1C4773D54((uint64_t)&v646, (uint64_t)v615, 0, 0, 0);
        LOWORD(v660) = 257;
        (*(void (**)(uint64_t, llvm::Value *, llvm::Value ***, _QWORD **, char *))(*(_QWORD *)v653 + 16))(v653, v313, &v657, v651, v652);
        if (!(_DWORD)v647)
          goto LABEL_651;
        v463 = (char *)v646;
        v464 = (char *)v646 + 16 * v647;
        v465 = (unsigned __int8 **)(v455 + 112);
        while (2)
        {
          v466 = *(_DWORD *)v463;
          v467 = (unsigned __int8 *)*((_QWORD *)v463 + 1);
          if (v467)
          {
            if (v466)
              goto LABEL_643;
            v654 = (char **)*((_QWORD *)v463 + 1);
            llvm::MetadataTracking::track((uint64_t)&v654, v467, 2);
            v468 = *v465;
LABEL_647:
            if (v468)
              llvm::MetadataTracking::untrack((uint64_t)(v455 + 112), v468);
            v469 = (unsigned __int8 *)v654;
            *v465 = (unsigned __int8 *)v654;
            if (v469)
              llvm::MetadataTracking::retrack((uint64_t)&v654, v469, (uint64_t)(v455 + 112));
          }
          else
          {
            v468 = *v465;
            if (*v465 || (v455[87] & 0x20) != 0)
            {
              if (!v466)
              {
                v654 = 0;
                goto LABEL_647;
              }
LABEL_643:
              llvm::Value::setMetadata(v313, *(_DWORD *)v463, (llvm::MDNode *)v467);
            }
          }
          v463 += 16;
          if (v463 == v464)
            goto LABEL_651;
          continue;
        }
      }
      if ((*(_BYTE *)(*((_QWORD *)&v146 + 1) + 17) & 2) == 0)
        goto LABEL_331;
      if ((v182 & 0x40000000) != 0)
        v195 = *(_QWORD *)(*((_QWORD *)&v146 + 1) - 8);
      else
        v195 = *((_QWORD *)&v146 + 1) - 32 * (v182 & 0x7FFFFFF);
      v222 = v619;
      v223 = *(_QWORD *)(v195 + 32 * (v192 == v171));
      v224 = *((_QWORD *)v619 + 13);
      v225 = *((_DWORD *)v619 + 30);
      if (v225)
      {
        v226 = ((v223 >> 4) ^ (v223 >> 9)) & (v225 - 1);
        v227 = v224 + 48 * v226;
        v228 = *(_QWORD *)(v227 + 24);
        if (v228 != v223)
        {
          v229 = 1;
          while (v228 != -4096)
          {
            v230 = v226 + v229++;
            v226 = v230 & (v225 - 1);
            v227 = v224 + 48 * v226;
            v228 = *(_QWORD *)(v227 + 24);
            if (v228 == v223)
              goto LABEL_305;
          }
          goto LABEL_304;
        }
      }
      else
      {
LABEL_304:
        v227 = v224 + 48 * v225;
      }
LABEL_305:
      if (v227 == v224 + 48 * v225 || (v231 = *(const llvm::SCEV **)(v227 + 40)) == 0)
        v231 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(v619, v223);
      SignExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr(v222, v231, v616[1], 0);
      goto LABEL_309;
    }
    if (!LOBYTE(v601[1]))
    {
      v171 = v600[0];
      if (v635)
      {
        LODWORD(v177) = ((LODWORD(v600[0]) >> 4) ^ (LODWORD(v600[0]) >> 9)) & (v635 - 1);
        v178 = v634[0] + 16 * v177;
        v179 = *(llvm::Value **)v178;
        if (v600[0] != *(llvm::Value **)v178)
        {
          v180 = 1;
          while (v179 != (llvm::Value *)-4096)
          {
            v181 = v177 + v180++;
            v177 = v181 & (v635 - 1);
            v179 = *(llvm::Value **)(v634[0] + 16 * v177);
            if (v600[0] == v179)
            {
              v178 = v634[0] + 16 * v177;
              goto LABEL_819;
            }
          }
          v178 = v634[0] + 16 * v635;
LABEL_819:
          a8 = v598;
          a7 = v599;
        }
      }
      else
      {
        v178 = v634[0];
      }
      if (*(_DWORD *)(v178 + 8))
        goto LABEL_239;
    }
LABEL_265:
    v196 = **((_QWORD **)&v146 + 1);
    if (**((llvm::Type ***)&v146 + 1) == v616[1])
    {
      v206 = v601[0];
LABEL_277:
      if (v206 != v147)
      {
        ++v623;
        llvm::Value::doRAUW(v147, v206, (llvm::Value *)1);
        v207 = v628;
        v208 = v628[2];
        if (v208 >= v628[3])
        {
          sub_1C578EDF4(v628, (uint64_t *)&v600[1]);
        }
        else
        {
          v209 = v600[1];
          v210 = (llvm::ValueHandleBase *)(*(_QWORD *)v628 + 24 * v208);
          *(_QWORD *)v210 = 6;
          *((_QWORD *)v210 + 1) = 0;
          *((_QWORD *)v210 + 2) = v209;
          if (v209 != (llvm::Value *)-8192 && v209 != (llvm::Value *)-4096 && v209)
          {
            llvm::ValueHandleBase::AddToUseList(v210);
            v208 = v207[2];
          }
          v207[2] = v208 + 1;
        }
      }
      goto LABEL_497;
    }
    v197 = *(_QWORD *)(*(_QWORD *)v619 + 40) + 272;
    if (*(_BYTE *)(v196 + 8) == 15)
    {
      v200 = llvm::DataLayout::getIndexTypeSizeInBits(v197, v196);
    }
    else
    {
      sub_1C4768AD0(v197, v196);
      v200 = v199;
      if ((_DWORD)v198 == 1)
    }
    v201 = *(_QWORD *)(*(_QWORD *)v619 + 40) + 272;
    if (*((_BYTE *)v616[1] + 8) == 15)
    {
      v204 = llvm::DataLayout::getIndexTypeSizeInBits(v201, (uint64_t)v616[1]);
    }
    else
    {
      sub_1C4768AD0(v201, (uint64_t)v616[1]);
      v204 = v203;
      if ((_DWORD)v202 == 1)
    }
    if (v200 < v204)
    {
      sub_1C4773D54((uint64_t)&v646, (uint64_t)v600[1], 0, 0, 0);
      v205 = *(_QWORD *)v600[1];
      LOWORD(v645) = 257;
      v206 = (llvm::Value *)sub_1C4773E38((uint64_t *)&v646, 38, (unsigned __int8 *)v601[0], v205, (uint64_t)&v642);
      if (v646 != &v648)
        free(v646);
      v147 = v600[1];
      goto LABEL_277;
    }
    llvm::User::replaceUsesOfWith(v600[1], v600[0], v601[0]);
LABEL_497:
    v359 = v602[0];
    if (!*((_QWORD *)v602[0] + 1))
    {
      v360 = v628;
      v361 = v628[2];
      if (v361 >= v628[3])
      {
        sub_1C578EDF4(v628, (uint64_t *)v602);
      }
      else
      {
        v362 = (llvm::ValueHandleBase *)(*(_QWORD *)v628 + 24 * v361);
        *(_QWORD *)v362 = 6;
        *((_QWORD *)v362 + 1) = 0;
        *((_QWORD *)v362 + 2) = v359;
        if (v359 != (llvm::Value *)-8192 && v359 != (llvm::Value *)-4096 && v359)
        {
          llvm::ValueHandleBase::AddToUseList(v362);
          v361 = v360[2];
        }
        v360[2] = v361 + 1;
      }
    }
    v143 = v640;
  }
  llvm::replaceAllDbgUsesWith(v616[0], v625, v625, v620, v142);
  v42 = v625;
LABEL_40:
  v43 = v624;
  *a7 = v623;
  *a8 = v43;
  if (v639 != v641)
    free(v639);
  v44 = v636;
  if (v638)
  {
    v587 = v636 + 48 * v638;
    v588 = v636 + 24;
    do
    {
      v590 = *(_QWORD *)(v588 - 24);
      v589 = *(_QWORD *)(v588 - 16);
      v591 = v588 - 24;
      if ((v590 != -4096 || v589 != -4096) && (v590 != -8192 || v589 != -8192))
      {
        if (*(_DWORD *)(v588 + 16) >= 0x41u)
        {
          v592 = *(_QWORD *)(v588 + 8);
          if (v592)
            MEMORY[0x1CAA32F9C](v592, 0x1000C8000313F17);
        }
        if (*(_DWORD *)v588 >= 0x41u)
        {
          v593 = *(_QWORD *)(v588 - 8);
          if (v593)
            MEMORY[0x1CAA32F9C](v593, 0x1000C8000313F17);
        }
      }
      v588 += 48;
    }
    while (v591 + 48 != v587);
    v44 = v636;
  }
  MEMORY[0x1CAA32FB4](v44, 8);
  MEMORY[0x1CAA32FB4](v634[0], 8);
  if (v630 != v629)
    free(v630);
  return v42;
}

_QWORD *sub_1C5FAE5A4(_QWORD *result, uint64_t a2, llvm::SmallPtrSetImplBase *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t *v16;

  v4 = result[1];
  if (v4)
  {
    v8 = result;
    v9 = a2 + 56;
    v10 = a4 + 16;
    do
    {
      v11 = *(_QWORD *)(v4 + 24);
      if ((_QWORD *)v11 != v8)
      {
        result = sub_1C477672C(v9, *(_QWORD *)(v11 + 40));
        v12 = *(_QWORD *)(a2 + 64);
        v13 = v12 == *(_QWORD *)(a2 + 56) ? 76 : 72;
        if (result != (_QWORD *)(v12 + 8 * *(unsigned int *)(a2 + v13)))
        {
          result = sub_1C4774094(a3, v11);
          if (v14)
          {
            v15 = *(unsigned int *)(a4 + 8);
            if (v15 >= *(unsigned int *)(a4 + 12))
            {
              result = llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v10, v15 + 1, 16);
              v15 = *(unsigned int *)(a4 + 8);
            }
            v16 = (uint64_t *)(*(_QWORD *)a4 + 16 * v15);
            *v16 = v11;
            v16[1] = (uint64_t)v8;
            ++*(_DWORD *)(a4 + 8);
          }
        }
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
  }
  return result;
}

const llvm::Value *sub_1C5FAE698(const llvm::Value **a1, uint64_t a2, llvm::DominatorTree *this)
{
  uint64_t *v5;
  uint64_t v6;
  const llvm::Value *v7;
  uint64_t NearestCommonDominator;
  uint64_t v9;
  unsigned __int8 *v10;

  if (!a2)
    return 0;
  v5 = 0;
  v6 = 8 * a2;
  do
  {
    v7 = *a1;
    if (v5 && !llvm::DominatorTree::dominates(this, *a1, (const llvm::Instruction *)v5))
    {
      if (llvm::DominatorTree::dominates(this, (const llvm::Value *)v5, v7))
      {
        v7 = (const llvm::Value *)v5;
      }
      else
      {
        NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator((uint64_t)this, v5[5], *((_QWORD *)v7 + 5));
        v9 = *(_QWORD *)(NearestCommonDominator + 40);
        if (v9 == NearestCommonDominator + 40)
        {
          v7 = 0;
        }
        else
        {
          if (v9)
            v10 = (unsigned __int8 *)(v9 - 24);
          else
            v10 = 0;
          if (v10[16] - 29 >= 0xB)
            v7 = 0;
          else
            v7 = (const llvm::Value *)v10;
        }
      }
    }
    ++a1;
    v5 = (uint64_t *)v7;
    v6 -= 8;
  }
  while (v6);
  return v7;
}

uint64_t ****sub_1C5FAE768(unsigned int *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t ****result;
  uint64_t v5;

  v3 = a1[2];
  if (v3 >= a1[3])
    return (uint64_t ****)sub_1C5F2E684(a1, a2);
  result = (uint64_t ****)(*(_QWORD *)a1 + 24 * v3);
  v5 = *a2;
  *result = (uint64_t ***)6;
  result[1] = 0;
  result[2] = (uint64_t ***)v5;
  if (v5 != -8192 && v5 != -4096 && v5 != 0)
  {
    result = llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)result);
    v3 = a1[2];
  }
  a1[2] = v3 + 1;
  return result;
}

void sub_1C5FAE7E0(uint64_t a1, llvm::Value *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  llvm::Value *v8;
  int v9;
  unsigned int v10;
  uint64_t SCEVIter;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 104);
  v4 = *(_DWORD *)(v2 + 120);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = v3 + 48 * v6;
    v8 = *(llvm::Value **)(v7 + 24);
    if (v8 == a2)
    {
LABEL_8:
      if (v7 == v3 + 48 * v4 || (SCEVIter = *(_QWORD *)(v7 + 40)) == 0)
        SCEVIter = llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a1 + 32), (unint64_t)a2);
      __asm { BR              X11 }
    }
    v9 = 1;
    while (v8 != (llvm::Value *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & v5;
      v7 = v3 + 48 * (v10 & v5);
      v8 = *(llvm::Value **)(v7 + 24);
      if (v8 == a2)
        goto LABEL_8;
    }
  }
  v7 = v3 + 48 * v4;
  goto LABEL_8;
}

void sub_1C5FAE8C0()
{
  JUMPOUT(0x1C5FAE8ACLL);
}

void sub_1C5FAE8CC()
{
  JUMPOUT(0x1C5FAE8C4);
}

_DWORD *sub_1C5FAE8D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  void *v32;
  const void **v33;
  uint64_t v34;
  llvm::ScalarEvolution *v35;
  const llvm::SCEV *v36;
  const llvm::SCEV *Constant;
  _DWORD *result;
  _QWORD *v39;
  char v40;
  uint64_t v41;
  char v42;
  BOOL v43;
  const void **v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  char *v52;
  _OWORD *v53;
  __int128 v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  _DWORD *v58;
  unsigned int v59;
  const void **v60;
  uint64_t v61;
  void *v62;
  unsigned int v63;
  char v64;

  Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v35, **(llvm::Type ***)(v31 + 32), 0, 0);
  result = (_DWORD *)llvm::ScalarEvolution::isKnownPredicate((uint64_t ****)v35, 0x27u, v36, Constant);
  v39 = v33[1];
  if (v39)
  {
    v40 = (char)result;
    v56 = v34 + 320;
    v57 = (uint64_t *)(v34 + 304);
    do
    {
      v41 = v39[3];
      result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(v34 + 96), v41);
      if (v42)
      {
        if ((v40 & 1) != 0)
        {
          v43 = 1;
        }
        else
        {
          v60 = 0;
          result = (_DWORD *)sub_1C5FAF32C(*(_QWORD *)(v34 + 280), *(_DWORD *)(v34 + 296), (uint64_t)v33, v41, &v60);
          v43 = 0;
          if ((_DWORD)result)
          {
            v44 = v60;
            if (v60 != (const void **)(*(_QWORD *)(v34 + 280) + 48 * *(unsigned int *)(v34 + 296)))
            {
              LODWORD(v61) = *((_DWORD *)v60 + 6);
              if (v61 > 0x40)
              {
                v60 = (const void **)operator new[]();
                memcpy(v60, v44[2], (((unint64_t)v61 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v60 = (const void **)v60[2];
              }
              v63 = *((_DWORD *)v44 + 10);
              if (v63 > 0x40)
              {
                v62 = (void *)operator new[]();
                memcpy(v62, v44[4], (((unint64_t)v63 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v62 = (void *)v44[4];
              }
              v64 = 1;
              llvm::ConstantRange::getSignedMin((uint64_t)&v60, (llvm::APInt *)&v58);
              result = v58;
              v45 = &v58[2 * ((v59 - 1) >> 6)];
              if (v59 < 0x41)
                v45 = &v58;
              v43 = ((*v45 >> (v59 - 1)) & 1) == 0;
              if (v59 >= 0x41 && v58)
                result = (_DWORD *)MEMORY[0x1CAA32F9C]();
              if (v64)
              {
                if (v63 >= 0x41)
                {
                  result = v62;
                  if (v62)
                    result = (_DWORD *)MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
                }
                if (v61 >= 0x41)
                {
                  result = v60;
                  if (v60)
                    result = (_DWORD *)MEMORY[0x1CAA32F9C](v60, 0x1000C8000313F17);
                }
              }
            }
          }
        }
        v46 = *(unsigned int *)(v34 + 312);
        if (v46 >= *(_DWORD *)(v34 + 316))
        {
          v60 = v33;
          v61 = v41;
          v62 = v32;
          LOBYTE(v63) = v43;
          v49 = v46 + 1;
          v50 = *v57 + 32 * v46 > (unint64_t)&v60;
          if (*v57 <= (unint64_t)&v60 && v50)
          {
            v55 = (char *)&v60 - *v57;
            result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v57, v56, v49, 32);
            v51 = *v57;
            v52 = &v55[*v57];
          }
          else
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v57, v56, v49, 32);
            v51 = *v57;
            v52 = (char *)&v60;
          }
          v53 = (_OWORD *)(v51 + 32 * *(unsigned int *)(v34 + 312));
          v54 = *((_OWORD *)v52 + 1);
          *v53 = *(_OWORD *)v52;
          v53[1] = v54;
          v48 = *(_DWORD *)(v34 + 312) + 1;
        }
        else
        {
          v47 = *(_QWORD *)(v34 + 304) + 32 * v46;
          *(_QWORD *)v47 = v33;
          *(_QWORD *)(v47 + 8) = v41;
          *(_QWORD *)(v47 + 16) = v32;
          *(_BYTE *)(v47 + 24) = v43;
          v48 = v46 + 1;
        }
        *(_DWORD *)(v34 + 312) = v48;
      }
      v39 = (_QWORD *)v39[1];
    }
    while (v39);
  }
  return result;
}

void sub_1C5FAEBE8()
{
  JUMPOUT(0x1C5FAE8E8);
}

char *sub_1C5FAEBF0(char *result, uint64_t a2, char a3)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t SCEVIter;
  uint64_t RangeRef;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void ***v22;
  const void **v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  char *v27;
  char **v28;
  uint64_t v29;
  char **v30;
  char **v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  size_t v36;
  uint64_t v37;
  unint64_t v38;
  size_t v39;
  unsigned int v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *__src;
  void *v47;
  void *v48;
  void *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int v54[2];
  uint64_t v55;
  int v56[2];
  uint64_t v57;
  int v58;
  void *v59;
  int v60;
  char **v61;
  uint64_t v62;
  char *v63;
  unsigned int v64;
  char *v65;
  unsigned int v66;

  if (!a2)
    return result;
  if (*(_BYTE *)(a2 + 16) != 81)
    return result;
  v4 = result;
  if (**(_QWORD **)result != *(_QWORD *)(a2 - 64))
    return result;
  v5 = *(_QWORD *)(a2 - 32);
  if (!v5)
    return result;
  v6 = *((_QWORD *)result + 1);
  v7 = *(_WORD *)(a2 + 18) & 0x3FLL;
  if ((a3 & 1) == 0)
    LODWORD(v7) = dword_1C867653C[v7];
  v8 = *(_QWORD *)(v6 + 32);
  v9 = *(_QWORD *)(v8 + 104);
  v10 = *(_DWORD *)(v8 + 120);
  if (!v10)
    goto LABEL_13;
  v11 = v10 - 1;
  v12 = (v10 - 1) & ((v5 >> 4) ^ (v5 >> 9));
  v13 = v9 + 48 * v12;
  v14 = *(_QWORD *)(v13 + 24);
  if (v14 != v5)
  {
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & v11;
      v13 = v9 + 48 * (v16 & v11);
      v14 = *(_QWORD *)(v13 + 24);
      if (v14 == v5)
        goto LABEL_14;
    }
LABEL_13:
    v13 = v9 + 48 * v10;
  }
LABEL_14:
  if (v13 == v9 + 48 * v10 || (SCEVIter = *(_QWORD *)(v13 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(v6 + 32), v5);
  RangeRef = llvm::ScalarEvolution::getRangeRef(v8, SCEVIter, 1u, 0);
  v19 = RangeRef;
  v20 = *(unsigned int *)(RangeRef + 8);
  LODWORD(v55) = v20;
  if (v20 > 0x40)
  {
    v34 = v6;
    v35 = ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8;
    *(_QWORD *)v54 = operator new[]();
    v36 = v35;
    v6 = v34;
    memcpy(*(void **)v54, *(const void **)v19, v36);
  }
  else
  {
    *(_QWORD *)v54 = *(_QWORD *)RangeRef;
  }
  v21 = *(unsigned int *)(v19 + 24);
  LODWORD(v57) = v21;
  if (v21 > 0x40)
  {
    v37 = v6;
    v38 = ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8;
    *(_QWORD *)v56 = operator new[]();
    v39 = v38;
    v6 = v37;
    memcpy(*(void **)v56, *(const void **)(v19 + 16), v39);
  }
  else
  {
    *(_QWORD *)v56 = *(_QWORD *)(v19 + 16);
  }
  llvm::ConstantRange::makeAllowedICmpRegion(v7, (uint64_t)v54, (uint64_t)&v50, v41, (uint64_t)v42, v43, (int)v44, v45, (int)__src, v47, (int)v48, v49, (int)v50, v51, (int)v52, v53, v54[0], v55, v56[0],
    v57,
    v58,
    v59,
    v60);
  v22 = (const void ***)*((_QWORD *)v4 + 2);
  v23 = *v22;
  v24 = *((unsigned int *)*v22 + 2);
  if (v24 > 0x40)
  {
    v26 = ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8;
    v27 = (char *)operator new[]();
    memcpy(v27, *v23, v26);
    LODWORD(v62) = v24;
    v61 = (char **)v27;
    LODWORD(v47) = v24;
    v25 = (char *)operator new[]();
    memcpy(v25, v61, v26);
  }
  else
  {
    v25 = (char *)*v23;
    LODWORD(v62) = *((_DWORD *)*v22 + 2);
    v61 = (char **)v25;
    LODWORD(v47) = v24;
  }
  __src = v25;
  llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
  v64 = v47;
  v63 = (char *)__src;
  llvm::ConstantRange::addWithNoWrap((llvm::ConstantRange *)&v50, (llvm::ConstantRange *)&v61, 2, 0, (uint64_t)&__src);
  if (v64 >= 0x41 && v63)
    MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
  if (v62 >= 0x41 && v61)
    MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
  v28 = (char **)**((_QWORD **)v4 + 3);
  v29 = **((_QWORD **)v4 + 4);
  LODWORD(v43) = (_DWORD)v47;
  if (v47 > 0x40)
  {
    v42 = (void *)operator new[]();
    memcpy(v42, __src, (((unint64_t)v43 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v42 = __src;
  }
  LODWORD(v45) = (_DWORD)v49;
  if (v49 > 0x40)
  {
    v44 = (void *)operator new[]();
    memcpy(v44, v48, (((unint64_t)v45 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v44 = v48;
  }
  v61 = 0;
  if (!sub_1C5FAF32C(*(_QWORD *)(v6 + 280), *(_DWORD *)(v6 + 296), (uint64_t)v28, v29, &v61)
    || (v30 = v61, v61 == (char **)(*(_QWORD *)(v6 + 280) + 48 * *(unsigned int *)(v6 + 296))))
  {
    v61 = v28;
    v62 = v29;
    v64 = v43;
    if (v43 > 0x40)
    {
      v32 = (char *)operator new[]();
      memcpy(v32, v42, (((unint64_t)v43 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v32 = (char *)v42;
    }
    v63 = v32;
    v66 = v45;
    if (v45 > 0x40)
    {
      v33 = (char *)operator new[]();
      memcpy(v33, v44, (((unint64_t)v45 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v33 = (char *)v44;
    }
    v65 = v33;
    result = (char *)sub_1C63B84D0((uint64_t)&v58, v6 + 280, (uint64_t *)&v61, (uint64_t)&v63);
    if (v66 >= 0x41)
    {
      result = v65;
      if (v65)
        result = (char *)MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
    }
    if (v64 < 0x41)
      goto LABEL_35;
    result = v63;
    if (!v63)
      goto LABEL_35;
  }
  else
  {
    v31 = v61 + 2;
    result = (char *)llvm::ConstantRange::intersectWith((uint64_t)&v42, (llvm::ConstantRange *)(v61 + 2), 0, (uint64_t)&v61);
    if (*((_DWORD *)v30 + 6) >= 0x41u)
    {
      result = *v31;
      if (*v31)
        result = (char *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    }
    v30[2] = (char *)v61;
    *((_DWORD *)v30 + 6) = v62;
    LODWORD(v62) = 0;
    if (*((_DWORD *)v30 + 10) < 0x41u || (result = v30[4]) == 0)
    {
      v30[4] = v63;
      *((_DWORD *)v30 + 10) = v64;
      goto LABEL_35;
    }
    result = (char *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    v40 = v62;
    v30[4] = v63;
    *((_DWORD *)v30 + 10) = v64;
    v64 = 0;
    if (v40 < 0x41)
      goto LABEL_35;
    result = (char *)v61;
    if (!v61)
      goto LABEL_35;
  }
  result = (char *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
LABEL_35:
  if (v45 >= 0x41)
  {
    result = (char *)v44;
    if (v44)
      result = (char *)MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
  }
  if (v43 >= 0x41)
  {
    result = (char *)v42;
    if (v42)
      result = (char *)MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
  }
  if (v49 >= 0x41)
  {
    result = (char *)v48;
    if (v48)
      result = (char *)MEMORY[0x1CAA32F9C](v48, 0x1000C8000313F17);
  }
  if (v47 >= 0x41)
  {
    result = (char *)__src;
    if (__src)
      result = (char *)MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  if (v53 >= 0x41)
  {
    result = v52;
    if (v52)
      result = (char *)MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
  }
  if (v51 >= 0x41)
  {
    result = v50;
    if (v50)
      result = (char *)MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
  }
  if (v57 >= 0x41)
  {
    result = *(char **)v56;
    if (*(_QWORD *)v56)
      result = (char *)MEMORY[0x1CAA32F9C](*(_QWORD *)v56, 0x1000C8000313F17);
  }
  if (v55 >= 0x41)
  {
    result = *(char **)v54;
    if (*(_QWORD *)v54)
      return (char *)MEMORY[0x1CAA32F9C](*(_QWORD *)v54, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1C5FAF32C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v8 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
    v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
    v11 = a2 - 1;
    v12 = (a2 - 1) & (((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~((_DWORD)v10 << 27)));
    v5 = (_QWORD *)(a1 + 48 * v12);
    v13 = *v5;
    v14 = v5[1];
    if (*v5 == a3 && v14 == a4)
    {
      v6 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v13 != -4096 || v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18 && v13 == -8192)
          v16 = v5;
        v20 = v12 + v17++;
        v12 = v20 & v11;
        v5 = (_QWORD *)(a1 + 48 * (v20 & v11));
        v13 = *v5;
        v14 = v5[1];
        v6 = 1;
        if (*v5 == a3 && v14 == a4)
          goto LABEL_3;
      }
      v6 = 0;
      if (v16)
        v5 = v16;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
LABEL_3:
  *a5 = v5;
  return v6;
}

_OWORD *sub_1C5FAF41C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63B864C(a1, v4, v4 + 48 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 48 * v10;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v12;
      result += 3;
      v11 -= 48;
    }
    while (v11);
  }
  return result;
}

void sub_1C5FAF4E4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  _BYTE v8[32];
  __int16 v9;
  void *v10[2];
  _QWORD v11[16];

  v11[15] = *MEMORY[0x1E0C80C00];
  v4 = sub_1C5FAF5B0(a1[1], *a1, a2, a3);
  if (v4)
  {
    sub_1C4773D54((uint64_t)v10, v4, 0, 0, 0);
    v5 = (unsigned __int8 *)a1[2];
    v6 = *(_QWORD *)*a1;
    v9 = 257;
    v7 = sub_1C4773E38((uint64_t *)v10, 38, v5, v6, (uint64_t)v8);
    llvm::User::replaceUsesOfWith((llvm::User *)a1[1], (llvm::Value *)*a1, (llvm::Value *)v7);
    if (v10[0] != v11)
      free(v10[0]);
  }
}

uint64_t sub_1C5FAF5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t NearestCommonDominator;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = a1;
  if (!a1 || *(_BYTE *)(a1 + 16) != 83)
    return v4;
  v5 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
  if (!(_DWORD)v5)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 32 * v5;
  do
  {
    v13 = *(_DWORD *)(v4 + 20);
    if ((v13 & 0x40000000) != 0)
      v14 = *(_QWORD *)(v4 - 8);
    else
      v14 = v4 - 32 * (v13 & 0x7FFFFFF);
    if (*(_QWORD *)(v14 + v10) == a2)
    {
      v15 = *(_QWORD *)(v14 + 32 * *(unsigned int *)(v4 + 60) + v9);
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a3, v15))
      {
        if (v11)
        {
          NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(a3, *(_QWORD *)(v11 + 40), v15);
          v16 = *(_QWORD *)(NearestCommonDominator + 40);
          if (v16 == NearestCommonDominator + 40)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        else
        {
          v16 = *(_QWORD *)(v15 + 40);
          if (v16 == v15 + 40)
            goto LABEL_19;
        }
        if (v16)
          v17 = v16 - 24;
        else
          v17 = 0;
        if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB)
          v11 = 0;
        else
          v11 = v17;
      }
    }
LABEL_20:
    v10 += 32;
    v9 += 8;
  }
  while (v12 != v10);
  if (!v11)
    return 0;
  if (!a2 || *(unsigned __int8 *)(a2 + 16) < 0x1Cu)
    return v11;
  v19 = *a4;
  v20 = *((_DWORD *)a4 + 4);
  if (!v20)
    goto LABEL_31;
  v21 = *(_QWORD *)(a2 + 40);
  v22 = ((v21 >> 4) ^ (v21 >> 9)) & (v20 - 1);
  v23 = *(_QWORD *)(v19 + 16 * v22);
  if (v21 == v23)
  {
LABEL_29:
    v26 = *(_QWORD *)(v19 + 16 * v22 + 8);
  }
  else
  {
    v24 = 1;
    while (v23 != -4096)
    {
      v25 = v22 + v24++;
      v22 = v25 & (v20 - 1);
      v23 = *(_QWORD *)(v19 + 16 * v22);
      if (v21 == v23)
        goto LABEL_29;
    }
LABEL_31:
    v26 = 0;
  }
  v27 = *(_QWORD *)(a3 + 24);
  v28 = *(unsigned int *)(a3 + 40);
  if ((_DWORD)v28)
  {
    v29 = *(_QWORD *)(v11 + 40);
    LODWORD(v30) = ((v29 >> 4) ^ (v29 >> 9)) & (v28 - 1);
    v31 = (uint64_t *)(v27 + 16 * v30);
    v32 = *v31;
    if (v29 != *v31)
    {
      v33 = 1;
      while (v32 != -4096)
      {
        v34 = v30 + v33++;
        v30 = v34 & (v28 - 1);
        v32 = *(_QWORD *)(v27 + 16 * v30);
        if (v29 == v32)
        {
          v31 = (uint64_t *)(v27 + 16 * v30);
          goto LABEL_39;
        }
      }
      goto LABEL_38;
    }
  }
  else
  {
LABEL_38:
    v31 = (uint64_t *)(v27 + 16 * v28);
  }
LABEL_39:
  if (v31 == (uint64_t *)(v27 + 16 * v28))
    return v4;
  v35 = (uint64_t *)v31[1];
  if (!v35)
    return v4;
  v36 = v20 - 1;
  while (2)
  {
    v37 = *v35;
    if (v20)
    {
      v38 = ((v37 >> 4) ^ (v37 >> 9)) & v36;
      v39 = *(_QWORD *)(v19 + 16 * v38);
      if (v37 != v39)
      {
        v40 = 1;
        while (v39 != -4096)
        {
          v41 = v38 + v40++;
          v38 = v41 & v36;
          v39 = *(_QWORD *)(v19 + 16 * v38);
          if (v37 == v39)
            goto LABEL_47;
        }
        goto LABEL_48;
      }
LABEL_47:
      v42 = *(_QWORD *)(v19 + 16 * v38 + 8);
    }
    else
    {
LABEL_48:
      v42 = 0;
    }
    if (v42 != v26)
    {
      v35 = (uint64_t *)v35[1];
      if (!v35)
        return v4;
      continue;
    }
    break;
  }
  v43 = *(_QWORD *)(v37 + 40);
  if (v43 == v37 + 40)
    return 0;
  if (v43)
    v44 = v43 - 24;
  else
    v44 = 0;
  if (*(unsigned __int8 *)(v44 + 16) - 29 >= 0xB)
    return 0;
  else
    return v44;
}

void sub_1C5FAF86C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1C5FAF8A8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t AddExpr;
  void *v36[2];
  _QWORD v37[17];

  v33 = *(_QWORD *)(a1 + 32);
  v36[0] = v37;
  v37[0] = a2;
  v37[1] = a3;
  v36[1] = (void *)0x200000002;
  AddExpr = llvm::ScalarEvolution::getAddExpr(v33, (uint64_t)v36, 0, 0);
  if (v36[0] != v37)
    free(v36[0]);
  return AddExpr;
}

uint64_t sub_1C5FAF9AC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD *v19;
  uint64_t LoopPredecessor;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38[4];
  __int16 v39;
  void *v40[2];
  _QWORD v41[16];

  v41[15] = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v40, a5, 0, 0, 0);
  v10 = *(uint64_t **)(a1 + 16);
  v11 = *((_DWORD *)v10 + 4);
  if (!v11)
    goto LABEL_46;
  v12 = *(_QWORD *)(a5 + 40);
  v13 = *v10;
  v14 = v11 - 1;
  v15 = ((v12 >> 4) ^ (v12 >> 9)) & (v11 - 1);
  v16 = *(_QWORD *)(v13 + 16 * v15);
  if (v12 == v16)
  {
LABEL_6:
    v19 = *(_QWORD **)(v13 + 16 * v15 + 8);
    if (!v19)
      goto LABEL_46;
    while (1)
    {
      LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v19);
      if (!LoopPredecessor)
        goto LABEL_46;
      v23 = *(_QWORD *)(LoopPredecessor + 40);
      result = LoopPredecessor + 40;
      v22 = v23;
      if (v23 == result)
        goto LABEL_46;
      if (v22)
        v24 = v22 - 24;
      else
        v24 = 0;
      if (*(_BYTE *)(v24 + 16) != 30)
      {
        switch(*(_BYTE *)(v24 + 16))
        {
          case 0x1E:
LABEL_52:
            __break(1u);
            return result;
          case 0x1F:
            v30 = (*(_DWORD *)(v24 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_25;
          case 0x20:
            v30 = (*(_DWORD *)(v24 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_25;
          case 0x27:
            v30 = *(_DWORD *)(v24 + 80) + 1;
LABEL_25:
            if (v30 != 1)
              goto LABEL_46;
            goto LABEL_14;
          default:
            goto LABEL_46;
        }
      }
      if ((*(_DWORD *)(v24 + 20) & 0x7FFFFFF) == 3)
        goto LABEL_46;
LABEL_14:
      if (!llvm::Loop::isLoopInvariant((uint64_t)v19, (uint64_t)a2))
        goto LABEL_46;
      result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v19);
      if (result)
      {
        v25 = *(_QWORD *)(result + 40);
        if (v25 != result + 40)
        {
          if (v25)
            v26 = v25 - 24;
          else
            v26 = 0;
          v27 = *(unsigned __int8 *)(v26 + 16);
          v28 = v27 - 29;
          if (v27 == 30)
          {
            if ((*(_DWORD *)(v26 + 20) & 0x7FFFFFF) != 3)
              goto LABEL_30;
          }
          else
          {
            v29 = 0;
            switch(v28)
            {
              case 0:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
                goto LABEL_31;
              case 1:
                goto LABEL_52;
              case 2:
                v31 = (*(_DWORD *)(v26 + 20) >> 1) & 0x3FFFFFF;
                break;
              case 3:
                v31 = (*(_DWORD *)(v26 + 20) & 0x7FFFFFF) - 1;
                break;
              case 10:
                v31 = *(_DWORD *)(v26 + 80) + 1;
                break;
              default:
                goto LABEL_22;
            }
            if (v31 == 1)
            {
LABEL_30:
              v29 = result;
              goto LABEL_31;
            }
          }
        }
      }
LABEL_22:
      v29 = 0;
LABEL_31:
      v32 = 0;
      v33 = *(_QWORD *)(v29 + 40);
      if (v33)
        v34 = v33 - 24;
      else
        v34 = 0;
      if (*(unsigned __int8 *)(v34 + 16) - 29 >= 0xB)
        v34 = 0;
      v41[4] = *(_QWORD *)(v34 + 40);
      v41[5] = v34 + 24;
      v35 = *(unsigned __int8 **)(v34 + 48);
      v38[0] = v35;
      if (v35)
      {
        llvm::MetadataTracking::track((uint64_t)v38, v35, 2);
        v32 = v38[0];
      }
      sub_1C4774EF4((uint64_t)v40, 0, (uint64_t)v32);
      if (v38[0])
        llvm::MetadataTracking::untrack((uint64_t)v38, v38[0]);
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_46;
    }
  }
  v17 = 1;
  while (v16 != -4096)
  {
    v18 = v15 + v17++;
    v15 = v18 & v14;
    v16 = *(_QWORD *)(v13 + 16 * v15);
    if (v12 == v16)
      goto LABEL_6;
  }
LABEL_46:
  v39 = 257;
  if ((a4 & 1) != 0)
    v36 = 40;
  else
    v36 = 39;
  v37 = sub_1C4773E38((uint64_t *)v40, v36, a2, a3, (uint64_t)v38);
  if (v40[0] != v41)
    free(v40[0]);
  return (uint64_t)v37;
}

BOOL sub_1C5FAFCC8(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  const llvm::SCEV *v26;
  llvm::Type *v27;
  unint64_t ZeroExtendExpr;
  uint64_t SCEVIter;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t SignExtendExpr;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  const llvm::SCEV *v52;
  llvm::Type *v53;
  uint64_t v54;

  v4 = *(_QWORD *)a1;
  v5 = **(_DWORD **)(a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if (!v5)
  {
    v10 = **(_QWORD **)(a1 + 16);
    v11 = *(_QWORD *)(v6 + 104);
    v12 = *(_DWORD *)(v6 + 120);
    if (v12)
    {
      v13 = ((v10 >> 4) ^ (v10 >> 9)) & (v12 - 1);
      v14 = v11 + 48 * v13;
      v15 = *(_QWORD *)(v14 + 24);
      if (v15 == v10)
      {
LABEL_35:
        if (v14 == v11 + 48 * v12 || (SCEVIter = *(_QWORD *)(v14 + 40)) == 0)
        {
          SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v6, v10);
          v6 = *(_QWORD *)(v4 + 32);
        }
        v41 = **(_QWORD **)(a1 + 24);
        v42 = *(_DWORD *)(v41 + 20);
        if ((v42 & 0x40000000) != 0)
          v43 = *(_QWORD *)(v41 - 8);
        else
          v43 = v41 - 32 * (v42 & 0x7FFFFFF);
        v44 = *(_QWORD *)(v43 + 32);
        v45 = *(_QWORD *)(v6 + 104);
        v46 = *(_DWORD *)(v6 + 120);
        if (v46)
        {
          v47 = ((v44 >> 4) ^ (v44 >> 9)) & (v46 - 1);
          v48 = v45 + 48 * v47;
          v49 = *(_QWORD *)(v48 + 24);
          if (v49 == v44)
            goto LABEL_48;
          v50 = 1;
          while (v49 != -4096)
          {
            v51 = v47 + v50++;
            v47 = v51 & (v46 - 1);
            v48 = v45 + 48 * v47;
            v49 = *(_QWORD *)(v48 + 24);
            if (v49 == v44)
              goto LABEL_48;
          }
        }
        v48 = v45 + 48 * v46;
LABEL_48:
        if (v48 == v45 + 48 * v46 || (v52 = *(const llvm::SCEV **)(v48 + 40)) == 0)
        {
          v52 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v6, v44);
          v6 = *(_QWORD *)(v4 + 32);
        }
        v53 = *(llvm::Type **)(v4 + 8);
        if (a2)
          SignExtendExpr = llvm::ScalarEvolution::getSignExtendExpr((llvm::ScalarEvolution *)v6, v52, v53, 0);
        else
          SignExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr((llvm::ScalarEvolution *)v6, v52, v53, 0);
        goto LABEL_54;
      }
      v16 = 1;
      while (v15 != -4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v14 = v11 + 48 * v13;
        v15 = *(_QWORD *)(v14 + 24);
        if (v15 == v10)
          goto LABEL_35;
      }
    }
    v14 = v11 + 48 * v12;
    goto LABEL_35;
  }
  v7 = **(_QWORD **)(a1 + 24);
  v8 = *(_DWORD *)(v7 + 20);
  if ((v8 & 0x40000000) != 0)
    v9 = *(unint64_t **)(v7 - 8);
  else
    v9 = (unint64_t *)(v7 - 32 * (v8 & 0x7FFFFFF));
  v18 = *v9;
  v19 = *(_QWORD *)(v6 + 104);
  v20 = *(_DWORD *)(v6 + 120);
  if (!v20)
  {
LABEL_17:
    v22 = v19 + 48 * v20;
    goto LABEL_18;
  }
  v21 = ((v18 >> 4) ^ (v18 >> 9)) & (v20 - 1);
  v22 = v19 + 48 * v21;
  v23 = *(_QWORD *)(v22 + 24);
  if (v23 != v18)
  {
    v24 = 1;
    while (v23 != -4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v20 - 1);
      v22 = v19 + 48 * v21;
      v23 = *(_QWORD *)(v22 + 24);
      if (v23 == v18)
        goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_18:
  if (v22 == v19 + 48 * v20 || (v26 = *(const llvm::SCEV **)(v22 + 40)) == 0)
  {
    v26 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v6, v18);
    v6 = *(_QWORD *)(v4 + 32);
  }
  v27 = *(llvm::Type **)(v4 + 8);
  if (a2)
    ZeroExtendExpr = llvm::ScalarEvolution::getSignExtendExpr((llvm::ScalarEvolution *)v6, v26, v27, 0);
  else
    ZeroExtendExpr = llvm::ScalarEvolution::getZeroExtendExpr((llvm::ScalarEvolution *)v6, v26, v27, 0);
  SCEVIter = ZeroExtendExpr;
  v30 = *(_QWORD *)(v4 + 32);
  v31 = **(_QWORD **)(a1 + 16);
  v32 = *(_QWORD *)(v30 + 104);
  v33 = *(_DWORD *)(v30 + 120);
  if (!v33)
  {
LABEL_30:
    v35 = v32 + 48 * v33;
    goto LABEL_31;
  }
  v34 = ((v31 >> 4) ^ (v31 >> 9)) & (v33 - 1);
  v35 = v32 + 48 * v34;
  v36 = *(_QWORD *)(v35 + 24);
  if (v36 != v31)
  {
    v37 = 1;
    while (v36 != -4096)
    {
      v38 = v34 + v37++;
      v34 = v38 & (v33 - 1);
      v35 = v32 + 48 * v34;
      v36 = *(_QWORD *)(v35 + 24);
      if (v36 == v31)
        goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_31:
  if (v35 == v32 + 48 * v33 || (v39 = *(_QWORD *)(v35 + 40)) == 0)
  {
    SignExtendExpr = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v30, v31);
LABEL_54:
    v39 = SignExtendExpr;
  }
  sub_1C5FAF86C(v4, SCEVIter, v39, *(unsigned __int8 *)(**(_QWORD **)(a1 + 24) + 16) - 28);
  return v54 == **(_QWORD **)(a1 + 32);
}

unint64_t sub_1C5FAFFE4(unint64_t result, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 40) + 56);
  if (v3)
    v4 = a3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = result;
    v7 = (uint64_t *)(result + 64);
    v8 = 4 * a3;
    do
    {
      v12 = *a2;
      if ((llvm::CallBase::paramHasAttr(v6, v12, 36) & 1) == 0)
        *(_QWORD *)(v6 + 64) = llvm::AttributeList::addAttributeAtIndex(v7, **(uint64_t ***)v6, v12 + 1, 36);
      result = llvm::CallBase::paramHasAttr(v6, v12, 39);
      if ((result & 1) == 0)
      {
        v9 = **(_QWORD **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32 * v12);
        v10 = *(_DWORD *)(v9 + 8);
        if ((v10 & 0xFE) == 0x12)
          v10 = *(_DWORD *)(**(_QWORD **)(v9 + 16) + 8);
        v11 = *(_QWORD *)(v3 + 112);
        if ((!v11 || (*(_BYTE *)(v11 + 17) & 1) == 0) && v10 <= 0xFF)
        {
          *(_QWORD *)(v6 + 64) = llvm::AttributeList::addAttributeAtIndex(v7, **(uint64_t ***)v6, v12 + 1, 39);
          result = sub_1C5FB0110(v6, (int *)&v12, 1, 1uLL);
        }
      }
      ++a2;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

unint64_t sub_1C5FB0110(unint64_t result, int *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  int *v7;
  uint64_t v8;
  int *v9;
  llvm::AttributeList *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;

  v4 = *(_QWORD *)(*(_QWORD *)(result + 40) + 56);
  if (v4)
    v5 = a3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v7 = a2;
    v8 = result;
    v9 = &a2[a3];
    v10 = (llvm::AttributeList *)(result + 64);
    do
    {
      v11 = *v7;
      v12 = **(_QWORD **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32 * v11);
      v13 = *(_DWORD *)(v12 + 8);
      if ((v13 & 0xFE) == 0x12)
        v13 = *(_DWORD *)(**(_QWORD **)(v12 + 16) + 8);
      v14 = *(_QWORD *)(v4 + 112);
      if (v14)
      {
        if ((*(_BYTE *)(v14 + 17) & 1) != 0 || v13 > 0xFF)
        {
LABEL_14:
          result = llvm::CallBase::paramHasAttr(v8, *v7, 39);
          v15 = a4;
          if (!(_DWORD)result)
            goto LABEL_18;
        }
      }
      else if (v13 >= 0x100)
      {
        goto LABEL_14;
      }
      result = llvm::AttributeList::getParamDereferenceableOrNullBytes(v10, v11);
      if (result <= a4)
        v15 = a4;
      else
        v15 = result;
LABEL_18:
      v16 = *(_QWORD *)v10;
      if (*(_QWORD *)v10)
      {
        if ((v11 + 2) < *(_DWORD *)(v16 + 8)
          && (v17 = *(_QWORD *)(v16 + 8 * (v11 + 2) + 40)) != 0
          && (*(_BYTE *)(v17 + 21) & 0x10) != 0)
        {
          v20 = (_QWORD *)(v17 + 48);
          v21 = 8 * *(unsigned int *)(v17 + 8) - 8 * *(unsigned int *)(v17 + 32);
          if (v21)
          {
            v22 = v21 >> 3;
            do
            {
              v23 = v22 >> 1;
              v24 = &v20[v22 >> 1];
              v25 = *v24;
              if (*v24)
                LODWORD(v25) = *(_DWORD *)(v25 + 12);
              v26 = v24 + 1;
              v22 += ~v23;
              if ((int)v25 < 76)
                v20 = v26;
              else
                v22 = v23;
            }
            while (v22);
          }
          v16 = *(_QWORD *)(*v20 + 16);
        }
        else
        {
          v16 = 0;
        }
      }
      if (v16 >= v15)
        goto LABEL_32;
      *(_QWORD *)(v8 + 64) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)v10, **(uint64_t ***)v8, (int)v11 + 1, 76);
      v18 = *(_QWORD *)(v4 + 112);
      if (v18)
      {
        if ((*(_BYTE *)(v18 + 17) & 1) == 0 && v13 <= 0xFF)
        {
LABEL_30:
          *(_QWORD *)(v8 + 64) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)v10, **(uint64_t ***)v8, (int)v11 + 1, 77);
          goto LABEL_31;
        }
      }
      else if (v13 < 0x100)
      {
        goto LABEL_30;
      }
      if (llvm::CallBase::paramHasAttr(v8, v11, 39))
        goto LABEL_30;
LABEL_31:
      v19 = llvm::Attribute::get(**(uint64_t ***)v8, 76, v15);
      v27 = v11;
      result = llvm::AttributeList::addParamAttribute(v10, **(uint64_t ***)v8, &v27, 1, v19);
      *(_QWORD *)(v8 + 64) = result;
LABEL_32:
      ++v7;
    }
    while (v7 != v9);
  }
  return result;
}

llvm::Value *llvm::LibCallSimplifier::optimizeStrNCat(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  char *v6;
  llvm::Value *v7;
  llvm *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t StringLength;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD v20[5];
  char v21;

  v6 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v7 = *(llvm::Value **)v6;
  v8 = (llvm *)*((_QWORD *)v6 + 4);
  v9 = *((_QWORD *)v6 + 8);
  LODWORD(v20[0]) = 0;
  sub_1C5FAFFE4((unint64_t)a2, (unsigned int *)v20, 1);
  if (v9)
    v10 = *(unsigned __int8 *)(v9 + 16) >= 0x1Cu;
  else
    v10 = 0;
  if (!v10 || (v11 = v9, !*(_QWORD *)(v9 + 40)))
    v11 = 0;
  v20[0] = *((_QWORD *)this + 2);
  v20[1] = 0;
  v20[3] = 0;
  v20[4] = 0;
  v20[2] = v11;
  v21 = 1;
  if (sub_1C4F84D74(v9, 0, (uint64_t)v20))
  {
    LODWORD(v20[0]) = 1;
    sub_1C5FAFFE4((unint64_t)a2, (unsigned int *)v20, 1);
  }
  if (v9)
    v12 = *(_BYTE *)(v9 + 16) == 16;
  else
    v12 = 0;
  if (!v12)
    return 0;
  v13 = (_QWORD *)(v9 + 24);
  if (*(_DWORD *)(v9 + 32) >= 0x41u)
    v13 = (_QWORD *)*v13;
  v14 = (_QWORD *)*v13;
  if (*v13)
  {
    StringLength = llvm::GetStringLength(v8, (const llvm::Value *)8);
    if (!StringLength)
      return 0;
    v17 = StringLength;
    LODWORD(v20[0]) = 1;
    sub_1C5FB0110((unint64_t)a2, (int *)v20, 1, StringLength);
    v18 = v17 - 1;
    if (v17 == 1)
      return v7;
    if ((unint64_t)v14 < v18)
      return 0;
    v19 = llvm::LibCallSimplifier::emitStrLenMemCpy(this, (llvm::LLVMContext ***)v8, v7, v18, a3);
    v7 = (llvm::Value *)v19;
    if (v19 && *((_BYTE *)v19 + 16) == 84)
      *((_WORD *)v19 + 9) = *((_WORD *)v19 + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
  }
  return v7;
}

llvm::Value **llvm::LibCallSimplifier::optimizeStrChr(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t v6;
  llvm *v7;
  uint64_t v8;
  BOOL v9;
  size_t v10;
  const llvm::APInt *v11;
  char ConstantStringInfo;
  llvm::APInt *v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  llvm::GetElementPtrInst *v19;
  llvm::ConstantInt *v20;
  unint64_t v21;
  unint64_t v22;
  llvm::ValueHandleBase *v23;
  uint64_t *v24;
  llvm::GetElementPtrInst *v25;
  uint64_t *v26;
  llvm::Value **v27;
  llvm::Value **result;
  uint64_t v29;
  uint64_t v30;
  const llvm::APInt *v31;
  llvm::ConstantInt **IntPtrType;
  llvm::ConstantInt *v33;
  unint64_t v34;
  unint64_t v35;
  llvm::ValueHandleBase *v36;
  llvm::ConstantInt *v37;
  const char *v38;
  unsigned int v39;
  __int16 v40;
  void *__s;
  size_t __n;

  v6 = *(_QWORD *)(*((_QWORD *)a2 - 4) + 24);
  v7 = (llvm *)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  LODWORD(v38) = 0;
  sub_1C5FAFFE4((unint64_t)a2, (unsigned int *)&v38, 1);
  v8 = ((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  if (v8)
    v9 = *(_BYTE *)(v8 + 16) == 16;
  else
    v9 = 0;
  if (v9)
  {
    __s = 0;
    __n = 0;
    ConstantStringInfo = llvm::getConstantStringInfo(v7, (const llvm::Value *)&__s, 0, 1);
    v13 = (llvm::APInt *)(v8 + 24);
    v14 = *(_DWORD *)(v8 + 32);
    if ((ConstantStringInfo & 1) == 0)
    {
      if (v14 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v13) != v14)
          return 0;
      }
      else if (*(_QWORD *)v13)
      {
        return 0;
      }
      result = (llvm::Value **)llvm::emitStrLen(v7, (uint64_t)a3, *((llvm::DataLayout **)this + 2), *((uint64_t **)this + 3));
      if (!result)
        return result;
      v27 = result;
      v25 = (llvm::GetElementPtrInst *)(**((_QWORD **)a3 + 8) + 1912);
      v38 = "strchr";
      v40 = 259;
      v24 = (uint64_t *)a3;
      v26 = (uint64_t *)v7;
      return (llvm::Value **)sub_1C4867B70(v24, v25, v26, (uint64_t)v27, (uint64_t)&v38);
    }
    if (v14 > 0x40)
      v15 = **(_QWORD **)v13;
    else
      v15 = (uint64_t)(*(_QWORD *)v13 << -(char)v14) >> -(char)v14;
    if ((_BYTE)v15)
    {
      if (!__n)
        return llvm::Constant::getNullValue(*(llvm::Constant **)a2, (llvm::Type *)v10);
      v16 = __s;
      v17 = memchr(__s, (char)v15, __n);
      if (!v17)
        return llvm::Constant::getNullValue(*(llvm::Constant **)a2, (llvm::Type *)v10);
      v10 = v17 - v16;
    }
    else
    {
      v10 = __n;
    }
    if (v10 != -1)
    {
      v18 = **((_QWORD **)a3 + 8);
      v19 = (llvm::GetElementPtrInst *)(v18 + 1912);
      v20 = *(llvm::ConstantInt **)(v18 + 1984);
      v21 = *(unsigned int *)(v18 + 1992);
      v39 = v21 >> 8;
      if (v21 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v38, v10, 0);
      }
      else
      {
        if (v21 <= 0xFF)
          v22 = 0;
        else
          v22 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v21);
        v38 = (const char *)(v22 & v10);
      }
      v23 = llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v38, v11);
      if (v39 >= 0x41 && v38)
        MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
      v38 = "strchr";
      v40 = 259;
      v24 = (uint64_t *)a3;
      v25 = v19;
      v26 = (uint64_t *)v7;
      v27 = (llvm::Value **)v23;
      return (llvm::Value **)sub_1C4867B70(v24, v25, v26, (uint64_t)v27, (uint64_t)&v38);
    }
    return llvm::Constant::getNullValue(*(llvm::Constant **)a2, (llvm::Type *)v10);
  }
  result = (llvm::Value **)llvm::GetStringLength(v7, (const llvm::Value *)8);
  if (!result)
    return result;
  v29 = (uint64_t)result;
  LODWORD(v38) = 0;
  sub_1C5FB0110((unint64_t)a2, (int *)&v38, 1, (unint64_t)result);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 16) + 8) != 8205)
    return 0;
  v30 = ((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  IntPtrType = (llvm::ConstantInt **)llvm::DataLayout::getIntPtrType(*((llvm::DataLayout **)this + 2), **(llvm::LLVMContext ***)a2, 0);
  v33 = *IntPtrType;
  v34 = *((unsigned int *)IntPtrType + 2);
  v39 = v34 >> 8;
  if (v34 >> 8 > 0x40)
  {
    v37 = v33;
    llvm::APInt::initSlowCase((llvm::APInt *)&v38, v29, 0);
    v33 = v37;
  }
  else
  {
    if (v34 <= 0xFF)
      v35 = 0;
    else
      v35 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v34);
    v38 = (const char *)(v35 & v29);
  }
  v36 = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v38, v31);
  if (v39 >= 0x41 && v38)
    MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
  result = (llvm::Value **)llvm::emitMemChr(v7, v30, (uint64_t)v36, (uint64_t)a3, *((llvm::DataLayout **)this + 2), *((uint64_t **)this + 3));
  if (result)
  {
    if (*((_BYTE *)result + 16) == 84)
      *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
  }
  return result;
}

llvm::Value **llvm::LibCallSimplifier::optimizeStrRChr(uint64_t **this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  char *v6;
  llvm *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  llvm::Value **result;
  unint64_t v12;
  const llvm::APInt *v13;
  char ConstantStringInfo;
  llvm::APInt *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  llvm::GetElementPtrInst *v21;
  llvm::ConstantInt *v22;
  unint64_t v23;
  unint64_t v24;
  llvm::ValueHandleBase *v25;
  const char *v26;
  unsigned int v27;
  __int16 v28;
  uint64_t v29;
  unint64_t v30;

  v6 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v7 = *(llvm **)v6;
  v8 = *((_QWORD *)v6 + 4);
  v9 = *(unsigned __int8 *)(v8 + 16);
  LODWORD(v26) = 0;
  sub_1C5FAFFE4((unint64_t)a2, (unsigned int *)&v26, 1);
  if (v8)
    v10 = v9 == 16;
  else
    v10 = 0;
  if (!v10)
    return 0;
  v29 = 0;
  v30 = 0;
  ConstantStringInfo = llvm::getConstantStringInfo(v7, (const llvm::Value *)&v29, 0, 1);
  v15 = (llvm::APInt *)(v8 + 24);
  v16 = *(_DWORD *)(v8 + 32);
  if ((ConstantStringInfo & 1) == 0)
  {
    if (v16 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v15) == v16)
      {
LABEL_27:
        result = (llvm::Value **)llvm::emitStrChr(v7, 0, a3, this[3]);
        if (result && *((_BYTE *)result + 16) == 84)
          *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
        return result;
      }
    }
    else if (!*(_QWORD *)v15)
    {
      goto LABEL_27;
    }
    return 0;
  }
  if (v16 > 0x40)
  {
    LOBYTE(v17) = **(_BYTE **)v15;
    if ((_BYTE)v17)
    {
LABEL_10:
      v18 = v30;
      while (v18)
      {
        v12 = v18 - 1;
        v19 = *(unsigned __int8 *)(v29 - 1 + v18--);
        if (v19 == v17)
          goto LABEL_19;
      }
      return llvm::Constant::getNullValue(*(llvm::Constant **)a2, (llvm::Type *)v12);
    }
  }
  else
  {
    v17 = (uint64_t)(*(_QWORD *)v15 << -(char)v16) >> -(char)v16;
    if ((_BYTE)v17)
      goto LABEL_10;
  }
  v12 = v30;
  if (v30 == -1)
    return llvm::Constant::getNullValue(*(llvm::Constant **)a2, (llvm::Type *)v12);
LABEL_19:
  v20 = **((_QWORD **)a3 + 8);
  v21 = (llvm::GetElementPtrInst *)(v20 + 1912);
  v22 = *(llvm::ConstantInt **)(v20 + 1984);
  v23 = *(unsigned int *)(v20 + 1992);
  v27 = v23 >> 8;
  if (v23 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v26, v12, 0);
  }
  else
  {
    if (v23 <= 0xFF)
      v24 = 0;
    else
      v24 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v23);
    v26 = (const char *)(v24 & v12);
  }
  v25 = llvm::ConstantInt::get(v22, (llvm::LLVMContext *)&v26, v13);
  if (v27 >= 0x41)
  {
    if (v26)
      MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
  }
  v26 = "strrchr";
  v28 = 259;
  return (llvm::Value **)sub_1C4867B70((uint64_t *)a3, v21, (uint64_t *)v7, (uint64_t)v25, (uint64_t)&v26);
}

unsigned __int8 *llvm::LibCallSimplifier::optimizeStrCmp(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  int ConstantStringInfo;
  int v10;
  int v11;
  int v12;
  llvm::ConstantInt *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  llvm::ConstantInt *v20;
  unsigned __int8 *result;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  char *v26;
  char *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  char v37;
  char v38;
  char *v39;
  char *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned __int8 **v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned __int8 **v56;
  int v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unint64_t v61;
  _QWORD *v62;
  const llvm::APInt *v63;
  llvm::ConstantInt *v64;
  unsigned int v65;
  unint64_t v66;
  llvm::ConstantInt *v67;
  _QWORD *IntPtrType;
  uint64_t v69;
  llvm::ConstantInt *v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  unsigned int v75;
  unint64_t v76;
  llvm::ValueHandleBase *v77;
  unint64_t StringLength;
  void *__s2;
  size_t v80;
  void *__s1;
  size_t v82;
  _QWORD v83[4];
  __int16 v84;
  unsigned __int8 *v85;
  uint64_t v86;
  unsigned int v87;
  __int16 v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v4 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v5 = *(_QWORD **)v4;
  v6 = (_QWORD *)*((_QWORD *)v4 + 4);
  if (*(_QWORD **)v4 == v6)
  {
    v20 = *(llvm::ConstantInt **)a2;
    v18 = 0;
    return (unsigned __int8 *)llvm::ConstantInt::get(v20, v18, 0);
  }
  __s1 = 0;
  v82 = 0;
  __s2 = 0;
  v80 = 0;
  ConstantStringInfo = llvm::getConstantStringInfo((llvm *)v5, (const llvm::Value *)&__s1, 0, 1);
  v10 = llvm::getConstantStringInfo((llvm *)v6, (const llvm::Value *)&__s2, 0, 1);
  v11 = v10;
  v12 = v10 ^ 1;
  if (((ConstantStringInfo ^ 1) & 1) == 0 && (v12 & 1) == 0)
  {
    v13 = *(llvm::ConstantInt **)a2;
    v14 = v80;
    v15 = v82;
    if (v80 >= v82)
      v16 = v82;
    else
      v16 = v80;
    if (!v16 || ((v17 = memcmp(__s1, __s2, v16), v17 >= 0) ? (v18 = 1) : (v18 = -1), !v17))
    {
      v19 = -1;
      if (v15 >= v14)
        v19 = 1;
      if (v15 == v14)
        v18 = 0;
      else
        v18 = v19;
    }
    v20 = v13;
    return (unsigned __int8 *)llvm::ConstantInt::get(v20, v18, 0);
  }
  if (v82)
    v22 = 0;
  else
    v22 = ConstantStringInfo;
  if (v22 == 1)
  {
    v23 = **((_QWORD **)a3 + 8) + 1912;
    v83[0] = "strcmpload";
    v84 = 259;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, v23);
    v25 = v24;
    v26 = (char *)operator new(0x60uLL);
    v27 = v26;
    v28 = (unsigned __int8 *)(v26 + 32);
    *((_QWORD *)v26 + 2) = 0;
    *((_QWORD *)v26 + 3) = v26 + 32;
    v88 = 257;
    *((_QWORD *)v26 + 4) = v23;
    *((_QWORD *)v26 + 5) = 0;
    *((_WORD *)v26 + 24) = 60;
    *((_DWORD *)v26 + 13) = 1;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_OWORD *)(v26 + 72) = 0u;
    *((_DWORD *)v26 + 22) = 0;
    *(_QWORD *)v26 = v6;
    *((_QWORD *)v26 + 1) = 0;
    if (v6)
    {
      v31 = v6[1];
      v30 = v6 + 1;
      v29 = v31;
      *((_QWORD *)v26 + 1) = v31;
      if (v31)
        *(_QWORD *)(v29 + 16) = v26 + 8;
      *((_QWORD *)v26 + 2) = v30;
      *v30 = v26;
    }
    *((_WORD *)v26 + 25) = 2 * (v25 & 0x3F);
    v26[92] = 1;
    llvm::Value::setName((uint64_t ***)v26 + 4, (uint64_t)&v86);
    (*(void (**)(_QWORD, unsigned __int8 *, _QWORD *, _QWORD, _QWORD))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v28, v83, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
    v32 = *((unsigned int *)a3 + 2);
    if (!(_DWORD)v32)
    {
LABEL_29:
      v33 = *(_QWORD *)a2;
      v88 = 257;
      v34 = sub_1C4773E38((uint64_t *)a3, 39, v28, v33, (uint64_t)&v86);
      v84 = 257;
      return sub_1C5346748((uint64_t)a3, (uint64_t)v34, (uint64_t)v83, 0, 0);
    }
    v47 = *(_QWORD **)a3;
    v48 = *(_QWORD *)a3 + 16 * v32;
    v49 = (unsigned __int8 **)(v27 + 80);
    while (1)
    {
      v50 = *(_DWORD *)v47;
      v51 = (unsigned __int8 *)v47[1];
      if (v51)
      {
        if (!v50)
        {
          v85 = (unsigned __int8 *)v47[1];
          llvm::MetadataTracking::track((uint64_t)&v85, v51, 2);
          v52 = *v49;
          goto LABEL_52;
        }
      }
      else
      {
        v52 = *v49;
        if (!*v49 && (v27[55] & 0x20) == 0)
          goto LABEL_49;
        if (!v50)
        {
          v85 = 0;
LABEL_52:
          if (v52)
            llvm::MetadataTracking::untrack((uint64_t)(v27 + 80), v52);
          v53 = v85;
          *v49 = v85;
          if (v53)
            llvm::MetadataTracking::retrack((uint64_t)&v85, v53, (uint64_t)(v27 + 80));
          goto LABEL_49;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v28, *(_DWORD *)v47, (llvm::MDNode *)v51);
LABEL_49:
      v47 += 2;
      if (v47 == (_QWORD *)v48)
        goto LABEL_29;
    }
  }
  if (v80)
    v35 = 0;
  else
    v35 = v10;
  if (v35 == 1)
  {
    v36 = **((_QWORD **)a3 + 8) + 1912;
    v83[0] = "strcmpload";
    v84 = 259;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, v36);
    v38 = v37;
    v39 = (char *)operator new(0x60uLL);
    v40 = v39;
    v41 = (unsigned __int8 *)(v39 + 32);
    *((_QWORD *)v39 + 2) = 0;
    *((_QWORD *)v39 + 3) = v39 + 32;
    v88 = 257;
    *((_QWORD *)v39 + 4) = v36;
    *((_QWORD *)v39 + 5) = 0;
    *((_WORD *)v39 + 24) = 60;
    *((_DWORD *)v39 + 13) = 1;
    *(_OWORD *)(v39 + 56) = 0u;
    *(_OWORD *)(v39 + 72) = 0u;
    *((_DWORD *)v39 + 22) = 0;
    *(_QWORD *)v39 = v5;
    *((_QWORD *)v39 + 1) = 0;
    if (v5)
    {
      v44 = v5[1];
      v43 = v5 + 1;
      v42 = v44;
      *((_QWORD *)v39 + 1) = v44;
      if (v44)
        *(_QWORD *)(v42 + 16) = v39 + 8;
      *((_QWORD *)v39 + 2) = v43;
      *v43 = v39;
    }
    *((_WORD *)v39 + 25) = 2 * (v38 & 0x3F);
    v39[92] = 1;
    llvm::Value::setName((uint64_t ***)v39 + 4, (uint64_t)&v86);
    (*(void (**)(_QWORD, unsigned __int8 *, _QWORD *, _QWORD, _QWORD))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v41, v83, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
    v45 = *((unsigned int *)a3 + 2);
    if (!(_DWORD)v45)
    {
LABEL_39:
      v46 = *(_QWORD *)a2;
      v88 = 257;
      return sub_1C4773E38((uint64_t *)a3, 39, v41, v46, (uint64_t)&v86);
    }
    v54 = *(_QWORD **)a3;
    v55 = *(_QWORD *)a3 + 16 * v45;
    v56 = (unsigned __int8 **)(v40 + 80);
    while (1)
    {
      v57 = *(_DWORD *)v54;
      v58 = (unsigned __int8 *)v54[1];
      if (v58)
      {
        if (!v57)
        {
          v85 = (unsigned __int8 *)v54[1];
          llvm::MetadataTracking::track((uint64_t)&v85, v58, 2);
          v59 = *v56;
          goto LABEL_67;
        }
      }
      else
      {
        v59 = *v56;
        if (!*v56 && (v40[55] & 0x20) == 0)
          goto LABEL_64;
        if (!v57)
        {
          v85 = 0;
LABEL_67:
          if (v59)
            llvm::MetadataTracking::untrack((uint64_t)(v40 + 80), v59);
          v60 = v85;
          *v56 = v85;
          if (v60)
            llvm::MetadataTracking::retrack((uint64_t)&v85, v60, (uint64_t)(v40 + 80));
          goto LABEL_64;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v41, *(_DWORD *)v54, (llvm::MDNode *)v58);
LABEL_64:
      v54 += 2;
      if (v54 == (_QWORD *)v55)
        goto LABEL_39;
    }
  }
  StringLength = llvm::GetStringLength((llvm *)v5, (const llvm::Value *)8);
  if (StringLength)
  {
    LODWORD(v86) = 0;
    sub_1C5FB0110((unint64_t)a2, (int *)&v86, 1, StringLength);
  }
  v61 = llvm::GetStringLength((llvm *)v6, (const llvm::Value *)8);
  if (v61)
  {
    LODWORD(v86) = 1;
    sub_1C5FB0110((unint64_t)a2, (int *)&v86, 1, v61);
    if (StringLength)
    {
      IntPtrType = llvm::DataLayout::getIntPtrType(*((llvm::DataLayout **)this + 2), **(llvm::LLVMContext ***)a2, 0);
      if (v61 >= StringLength)
        v69 = StringLength;
      else
        v69 = v61;
      v70 = (llvm::ConstantInt *)*IntPtrType;
      v71 = *((_DWORD *)IntPtrType + 2);
      v87 = v71 >> 8;
      if (v71 >> 8 <= 0x40)
      {
        if (v71 <= 0xFF)
          v72 = 0;
        else
          v72 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v71);
        v73 = v72 & v69;
        goto LABEL_99;
      }
LABEL_107:
      llvm::APInt::initSlowCase((llvm::APInt *)&v86, v69, 0);
      goto LABEL_100;
    }
  }
  if (((ConstantStringInfo | v12) & 1) != 0)
  {
    if (((ConstantStringInfo ^ 1 | v11) & 1) == 0
      && sub_1C5FB11D8((uint64_t)a2, (uint64_t)v6, StringLength, *((const llvm::DataLayout **)this + 2)))
    {
      v62 = llvm::DataLayout::getIntPtrType(*((llvm::DataLayout **)this + 2), **(llvm::LLVMContext ***)a2, 0);
      v64 = (llvm::ConstantInt *)*v62;
      v65 = *((_DWORD *)v62 + 2);
      v87 = v65 >> 8;
      if (v65 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v86, StringLength, 0);
      }
      else
      {
        if (v65 <= 0xFF)
          v66 = 0;
        else
          v66 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v65);
        v86 = v66 & StringLength;
      }
      v67 = v64;
      goto LABEL_101;
    }
LABEL_85:
    v86 = 0x100000000;
    sub_1C5FAFFE4((unint64_t)a2, (unsigned int *)&v86, 2);
    return 0;
  }
  if (!sub_1C5FB11D8((uint64_t)a2, (uint64_t)v5, v61, *((const llvm::DataLayout **)this + 2)))
    goto LABEL_85;
  v74 = llvm::DataLayout::getIntPtrType(*((llvm::DataLayout **)this + 2), **(llvm::LLVMContext ***)a2, 0);
  v70 = (llvm::ConstantInt *)*v74;
  v75 = *((_DWORD *)v74 + 2);
  v87 = v75 >> 8;
  if (v75 >> 8 > 0x40)
  {
    v69 = v61;
    goto LABEL_107;
  }
  if (v75 <= 0xFF)
    v76 = 0;
  else
    v76 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v75);
  v73 = v76 & v61;
LABEL_99:
  v86 = v73;
LABEL_100:
  v67 = v70;
LABEL_101:
  v77 = llvm::ConstantInt::get(v67, (llvm::LLVMContext *)&v86, v63);
  if (v87 >= 0x41 && v86)
    MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
  result = (unsigned __int8 *)llvm::emitMemCmp((llvm *)v5, (llvm *)v6, (uint64_t)v77, (uint64_t)a3, *((llvm::DataLayout **)this + 2), *((uint64_t **)this + 3));
  if (result && result[16] == 84)
    *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
  return result;
}

BOOL sub_1C5FB11D8(uint64_t a1, uint64_t a2, uint64_t a3, const llvm::DataLayout *a4)
{
  uint64_t i;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  _BYTE v22[256];

  for (i = *(_QWORD *)(a1 + 8); i; i = *(_QWORD *)(i + 8))
  {
    v9 = 0;
    v10 = *(_QWORD *)(i + 24);
    if (v10 && *(_BYTE *)(v10 + 16) == 81)
    {
      v11 = *(unsigned __int8 **)(v10 - 32);
      if (v11)
        v12 = v11[16] > 0x14u;
      else
        v12 = 1;
      if (v12 || (llvm::Constant::isNullValue((llvm::Constant *)v11) & 1) == 0)
        v9 = 0;
      else
        v9 = 3;
    }
    if (v9 <= 1)
      v9 = 1;
    if (v9 != 3)
      return 0;
  }
  v17 = 64;
  v16 = a3;
  v18 = v22;
  v19 = v22;
  v20 = 32;
  v21 = 0;
  v13 = sub_1C4E99094(a2, 0, (llvm::APInt *)&v16, a4, 0, 0, 0, (llvm::SmallPtrSetImplBase *)&v18, 16);
  if (v19 != v18)
    free(v19);
  if (v17 >= 0x41 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  if (!v13)
    return 0;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 112);
  return !v14 || (*(_BYTE *)(v14 + 18) & 0x20) == 0;
}

llvm::Value **llvm::LibCallSimplifier::optimizeStrNCmp(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  llvm::ValueHandleBase *v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  llvm::Value **result;
  _QWORD *v14;
  _QWORD *v15;
  int ConstantStringInfo;
  int v17;
  int v18;
  int v19;
  size_t v20;
  size_t v21;
  llvm::ConstantInt *v22;
  size_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  llvm::ConstantInt *v27;
  int v28;
  uint64_t v29;
  char v30;
  char v31;
  char *v32;
  char *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  int v41;
  uint64_t v42;
  char v43;
  char v44;
  char *v45;
  char *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned __int8 **v55;
  int v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned __int8 **v62;
  int v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unint64_t v67;
  uint64_t v68;
  const llvm::DataLayout *v69;
  llvm::CallInst *v70;
  uint64_t v71;
  _QWORD *IntPtrType;
  const llvm::APInt *v73;
  llvm::ConstantInt *v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t StringLength;
  unint64_t v78;
  void *__s2;
  size_t v80;
  void *__s1;
  size_t v82;
  _QWORD v83[4];
  __int16 v84;
  unsigned __int8 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v4 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v5 = *(_QWORD **)v4;
  v6 = (_QWORD *)*((_QWORD *)v4 + 4);
  if (*(_QWORD **)v4 == v6)
    return llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, 0, 0);
  v9 = (llvm::ValueHandleBase *)*((_QWORD *)v4 + 8);
  if (v9)
    v10 = *((unsigned __int8 *)v9 + 16) >= 0x1Cu;
  else
    v10 = 0;
  if (!v10 || (v11 = *((_QWORD *)v4 + 8), !*((_QWORD *)v9 + 5)))
    v11 = 0;
  v86 = *((_QWORD *)this + 2);
  v87 = 0;
  v89 = 0;
  v90 = 0;
  v88 = v11;
  v91 = 1;
  if (sub_1C4F84D74((uint64_t)v9, 0, (uint64_t)&v86))
  {
    v86 = 0x100000000;
    sub_1C5FAFFE4((unint64_t)a2, (unsigned int *)&v86, 2);
  }
  if (v9)
    v12 = *((_BYTE *)v9 + 16) == 16;
  else
    v12 = 0;
  if (!v12)
    return 0;
  v14 = (_QWORD *)((char *)v9 + 24);
  if (*((_DWORD *)v9 + 8) >= 0x41u)
    v14 = (_QWORD *)*v14;
  v15 = (_QWORD *)*v14;
  if (!*v14)
  {
    v27 = *(llvm::ConstantInt **)a2;
    v25 = 0;
    return llvm::ConstantInt::get(v27, v25, 0);
  }
  if (v15 != (_QWORD *)1)
  {
    __s1 = 0;
    v82 = 0;
    __s2 = 0;
    v80 = 0;
    ConstantStringInfo = llvm::getConstantStringInfo((llvm *)v5, (const llvm::Value *)&__s1, 0, 1);
    v17 = llvm::getConstantStringInfo((llvm *)v6, (const llvm::Value *)&__s2, 0, 1);
    v18 = v17;
    v19 = v17 ^ 1;
    if (((ConstantStringInfo ^ 1) & 1) == 0 && (v19 & 1) == 0)
    {
      if (v82 >= (unint64_t)v15)
        v20 = (size_t)v15;
      else
        v20 = v82;
      if (v80 >= (unint64_t)v15)
        v21 = (size_t)v15;
      else
        v21 = v80;
      v22 = *(llvm::ConstantInt **)a2;
      if (v21 >= v20)
        v23 = v20;
      else
        v23 = v21;
      if (!v23 || ((v24 = memcmp(__s1, __s2, v23), v24 >= 0) ? (v25 = 1) : (v25 = -1), !v24))
      {
        v26 = -1;
        if (v20 >= v21)
          v26 = 1;
        if (v20 == v21)
          v25 = 0;
        else
          v25 = v26;
      }
      v27 = v22;
      return llvm::ConstantInt::get(v27, v25, 0);
    }
    if (v82)
      v28 = 0;
    else
      v28 = ConstantStringInfo;
    if (v28 == 1)
    {
      v29 = **((_QWORD **)a3 + 8) + 1912;
      v83[0] = "strcmpload";
      v84 = 259;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, v29);
      v31 = v30;
      v32 = (char *)operator new(0x60uLL);
      v33 = v32;
      v34 = (unsigned __int8 *)(v32 + 32);
      *((_QWORD *)v32 + 2) = 0;
      *((_QWORD *)v32 + 3) = v32 + 32;
      LOWORD(v90) = 257;
      *((_QWORD *)v32 + 4) = v29;
      *((_QWORD *)v32 + 5) = 0;
      *((_WORD *)v32 + 24) = 60;
      *((_DWORD *)v32 + 13) = 1;
      *(_OWORD *)(v32 + 56) = 0u;
      *(_OWORD *)(v32 + 72) = 0u;
      *((_DWORD *)v32 + 22) = 0;
      *(_QWORD *)v32 = v6;
      *((_QWORD *)v32 + 1) = 0;
      if (v6)
      {
        v37 = v6[1];
        v36 = v6 + 1;
        v35 = v37;
        *((_QWORD *)v32 + 1) = v37;
        if (v37)
          *(_QWORD *)(v35 + 16) = v32 + 8;
        *((_QWORD *)v32 + 2) = v36;
        *v36 = v32;
      }
      *((_WORD *)v32 + 25) = 2 * (v31 & 0x3F);
      v32[92] = 1;
      llvm::Value::setName((uint64_t ***)v32 + 4, (uint64_t)&v86);
      (*(void (**)(_QWORD, unsigned __int8 *, _QWORD *, _QWORD, _QWORD))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v34, v83, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
      v38 = *((unsigned int *)a3 + 2);
      if (!(_DWORD)v38)
      {
LABEL_54:
        v39 = *(_QWORD *)a2;
        LOWORD(v90) = 257;
        v40 = sub_1C4773E38((uint64_t *)a3, 39, v34, v39, (uint64_t)&v86);
        v84 = 257;
        return (llvm::Value **)sub_1C5346748((uint64_t)a3, (uint64_t)v40, (uint64_t)v83, 0, 0);
      }
      v53 = *(_QWORD **)a3;
      v54 = *(_QWORD *)a3 + 16 * v38;
      v55 = (unsigned __int8 **)(v33 + 80);
      while (1)
      {
        v56 = *(_DWORD *)v53;
        v57 = (unsigned __int8 *)v53[1];
        if (v57)
        {
          if (!v56)
          {
            v85 = (unsigned __int8 *)v53[1];
            llvm::MetadataTracking::track((uint64_t)&v85, v57, 2);
            v58 = *v55;
            goto LABEL_77;
          }
        }
        else
        {
          v58 = *v55;
          if (!*v55 && (v33[55] & 0x20) == 0)
            goto LABEL_74;
          if (!v56)
          {
            v85 = 0;
LABEL_77:
            if (v58)
              llvm::MetadataTracking::untrack((uint64_t)(v33 + 80), v58);
            v59 = v85;
            *v55 = v85;
            if (v59)
              llvm::MetadataTracking::retrack((uint64_t)&v85, v59, (uint64_t)(v33 + 80));
            goto LABEL_74;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v34, *(_DWORD *)v53, (llvm::MDNode *)v57);
LABEL_74:
        v53 += 2;
        if (v53 == (_QWORD *)v54)
          goto LABEL_54;
      }
    }
    if (v80)
      v41 = 0;
    else
      v41 = v17;
    if (v41 == 1)
    {
      v42 = **((_QWORD **)a3 + 8) + 1912;
      v83[0] = "strcmpload";
      v84 = 259;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, v42);
      v44 = v43;
      v45 = (char *)operator new(0x60uLL);
      v46 = v45;
      v47 = (unsigned __int8 *)(v45 + 32);
      *((_QWORD *)v45 + 2) = 0;
      *((_QWORD *)v45 + 3) = v45 + 32;
      LOWORD(v90) = 257;
      *((_QWORD *)v45 + 4) = v42;
      *((_QWORD *)v45 + 5) = 0;
      *((_WORD *)v45 + 24) = 60;
      *((_DWORD *)v45 + 13) = 1;
      *(_OWORD *)(v45 + 56) = 0u;
      *(_OWORD *)(v45 + 72) = 0u;
      *((_DWORD *)v45 + 22) = 0;
      *(_QWORD *)v45 = v5;
      *((_QWORD *)v45 + 1) = 0;
      if (v5)
      {
        v50 = v5[1];
        v49 = v5 + 1;
        v48 = v50;
        *((_QWORD *)v45 + 1) = v50;
        if (v50)
          *(_QWORD *)(v48 + 16) = v45 + 8;
        *((_QWORD *)v45 + 2) = v49;
        *v49 = v45;
      }
      *((_WORD *)v45 + 25) = 2 * (v44 & 0x3F);
      v45[92] = 1;
      llvm::Value::setName((uint64_t ***)v45 + 4, (uint64_t)&v86);
      (*(void (**)(_QWORD, unsigned __int8 *, _QWORD *, _QWORD, _QWORD))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v47, v83, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
      v51 = *((unsigned int *)a3 + 2);
      if (!(_DWORD)v51)
      {
LABEL_64:
        v52 = *(_QWORD *)a2;
        LOWORD(v90) = 257;
        return (llvm::Value **)sub_1C4773E38((uint64_t *)a3, 39, v47, v52, (uint64_t)&v86);
      }
      v60 = *(_QWORD **)a3;
      v61 = *(_QWORD *)a3 + 16 * v51;
      v62 = (unsigned __int8 **)(v46 + 80);
      while (1)
      {
        v63 = *(_DWORD *)v60;
        v64 = (unsigned __int8 *)v60[1];
        if (v64)
        {
          if (!v63)
          {
            v85 = (unsigned __int8 *)v60[1];
            llvm::MetadataTracking::track((uint64_t)&v85, v64, 2);
            v65 = *v62;
            goto LABEL_92;
          }
        }
        else
        {
          v65 = *v62;
          if (!*v62 && (v46[55] & 0x20) == 0)
            goto LABEL_89;
          if (!v63)
          {
            v85 = 0;
LABEL_92:
            if (v65)
              llvm::MetadataTracking::untrack((uint64_t)(v46 + 80), v65);
            v66 = v85;
            *v62 = v85;
            if (v66)
              llvm::MetadataTracking::retrack((uint64_t)&v85, v66, (uint64_t)(v46 + 80));
            goto LABEL_89;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v47, *(_DWORD *)v60, (llvm::MDNode *)v64);
LABEL_89:
        v60 += 2;
        if (v60 == (_QWORD *)v61)
          goto LABEL_64;
      }
    }
    StringLength = llvm::GetStringLength((llvm *)v5, (const llvm::Value *)8);
    if (StringLength)
    {
      LODWORD(v86) = 0;
      sub_1C5FB0110((unint64_t)a2, (int *)&v86, 1, StringLength);
    }
    v67 = llvm::GetStringLength((llvm *)v6, (const llvm::Value *)8);
    if (v67)
    {
      LODWORD(v86) = 1;
      v78 = v67;
      sub_1C5FB0110((unint64_t)a2, (int *)&v86, 1, v67);
      v67 = v78;
    }
    if (((ConstantStringInfo | v19) & 1) != 0)
    {
      if (((ConstantStringInfo ^ 1 | v18) & 1) != 0)
        return 0;
      if ((unint64_t)v15 >= StringLength)
        v68 = StringLength;
      else
        v68 = (uint64_t)v15;
      v69 = (const llvm::DataLayout *)*((_QWORD *)this + 2);
      v70 = a2;
      v71 = (uint64_t)v6;
    }
    else
    {
      if ((unint64_t)v15 >= v67)
        v68 = v67;
      else
        v68 = (uint64_t)v15;
      v69 = (const llvm::DataLayout *)*((_QWORD *)this + 2);
      v70 = a2;
      v71 = (uint64_t)v5;
    }
    if (sub_1C5FB11D8((uint64_t)v70, v71, v68, v69))
    {
      IntPtrType = llvm::DataLayout::getIntPtrType(*((llvm::DataLayout **)this + 2), **(llvm::LLVMContext ***)a2, 0);
      v74 = (llvm::ConstantInt *)*IntPtrType;
      v75 = *((_DWORD *)IntPtrType + 2);
      LODWORD(v87) = v75 >> 8;
      if (v75 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v86, v68, 0);
      }
      else
      {
        if (v75 <= 0xFF)
          v76 = 0;
        else
          v76 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v75);
        v86 = v76 & v68;
      }
      v9 = llvm::ConstantInt::get(v74, (llvm::LLVMContext *)&v86, v73);
      if (v87 >= 0x41 && v86)
        MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
      goto LABEL_117;
    }
    return 0;
  }
LABEL_117:
  result = (llvm::Value **)llvm::emitMemCmp((llvm *)v5, (llvm *)v6, (uint64_t)v9, (uint64_t)a3, *((llvm::DataLayout **)this + 2), *((uint64_t **)this + 3));
  if (result && *((_BYTE *)result + 16) == 84)
    *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
  return result;
}

uint64_t llvm::LibCallSimplifier::optimizeStrNDup(uint64_t **this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  char *v6;
  llvm *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t StringLength;
  uint64_t result;
  BOOL v12;
  _QWORD *v13;
  int v14;

  v6 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v7 = *(llvm **)v6;
  v8 = *((_QWORD *)v6 + 4);
  if (*(_BYTE *)(v8 + 16) == 16)
    v9 = v8;
  else
    v9 = 0;
  StringLength = llvm::GetStringLength(v7, (const llvm::Value *)8);
  result = 0;
  if (StringLength)
    v12 = v9 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    v14 = 0;
    sub_1C5FB0110((unint64_t)a2, &v14, 1, StringLength);
    v13 = (_QWORD *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u)
      v13 = (_QWORD *)*v13;
    if (StringLength <= *v13 + 1)
    {
      result = llvm::emitStrDup(v7, a3, this[3]);
      if (result)
      {
        if (*(_BYTE *)(result + 16) == 84)
          *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::Value *llvm::LibCallSimplifier::optimizeStrCpy(llvm::DataLayout **this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  char *v3;
  llvm::Value *v4;
  llvm *v5;
  unint64_t StringLength;
  uint64_t v11;
  _QWORD *IntPtrType;
  const llvm::APInt *v13;
  llvm::ConstantInt *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t *v17;
  llvm::Value *MemTransferInst;
  uint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  _QWORD *v28[4];

  v28[3] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v3 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v4 = *(llvm::Value **)v3;
  v5 = (llvm *)*((_QWORD *)v3 + 4);
  if (*(llvm **)v3 != v5)
  {
    v26 = 0x100000000;
    sub_1C5FAFFE4((unint64_t)a2, (unsigned int *)&v26, 2);
    StringLength = llvm::GetStringLength(v5, (const llvm::Value *)8);
    if (StringLength)
    {
      v11 = StringLength;
      LODWORD(v26) = 1;
      sub_1C5FB0110((unint64_t)a2, (int *)&v26, 1, StringLength);
      IntPtrType = llvm::DataLayout::getIntPtrType(this[2], **(llvm::LLVMContext ***)a2, 0);
      v14 = (llvm::ConstantInt *)*IntPtrType;
      v15 = *((_DWORD *)IntPtrType + 2);
      v27 = v15 >> 8;
      if (v15 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v26, v11, 0);
      }
      else
      {
        if (v15 <= 0xFF)
          v16 = 0;
        else
          v16 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v15);
        v26 = v16 & v11;
      }
      v17 = (uint64_t *)llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v26, v13);
      if (v27 >= 0x41 && v26)
        MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
      MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v4, 256, v5, 256, v17, 0, 0, 0, 0, 0);
      v19 = *((_QWORD *)a2 + 8);
      *((_QWORD *)MemTransferInst + 8) = v19;
      v20 = (uint64_t *)((char *)MemTransferInst + 64);
      v21 = *(uint64_t ***)MemTransferInst;
      llvm::AttributeFuncs::typeIncompatible(*(_QWORD *)MemTransferInst, 3, (uint64_t *)&v26);
      v22 = *v21;
      if (v19)
      {
        if (*(_DWORD *)(v19 + 8) >= 2u)
          v19 = *(_QWORD *)(v19 + 48);
        else
          v19 = 0;
      }
      v25 = v19;
      v23 = llvm::AttributeSet::removeAttributes(&v25, v22, (uint64_t)&v26);
      if (v19 == v23)
        v24 = *v20;
      else
        v24 = llvm::AttributeList::setAttributesAtIndex(v20, v22, 0, v23);
      *((_QWORD *)MemTransferInst + 8) = v24;
      sub_1C5010E9C((uint64_t)v28, v28[1]);
      if (*((_BYTE *)MemTransferInst + 16) == 84)
        *((_WORD *)MemTransferInst + 9) = *((_WORD *)MemTransferInst + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t ***llvm::LibCallSimplifier::optimizeStpCpy(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t v6;
  char *v7;
  llvm *v8;
  llvm *v9;
  uint64_t v10;
  uint64_t ***v11;
  uint64_t v12;
  llvm::GetElementPtrInst *v13;
  unint64_t StringLength;
  uint64_t v15;
  llvm::Type *v16;
  llvm::ConstantInt *v17;
  uint64_t *v18;
  llvm::GetElementPtrInst *v19;
  llvm::ConstantInt *v20;
  llvm::Value **v21;
  llvm::Value *MemTransferInst;
  uint64_t v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30[2];
  _QWORD *v31[2];
  __int16 v32;
  uint64_t v33;

  v6 = *((_QWORD *)a2 - 4);
  if (!v6 || *(_BYTE *)(v6 + 16) || *(_QWORD *)(v6 + 24) != *((_QWORD *)a2 + 9))
    v6 = 0;
  v7 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v8 = *(llvm **)v7;
  v9 = (llvm *)*((_QWORD *)v7 + 4);
  if (!*((_QWORD *)a2 + 1))
  {
    v10 = llvm::emitStrCpy(v8, v9, a3, *((uint64_t **)this + 3));
    v11 = (uint64_t ***)v10;
    if (v10 && *(_BYTE *)(v10 + 16) == 84)
      *(_WORD *)(v10 + 18) = *(_WORD *)(v10 + 18) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
    return v11;
  }
  if (v8 == v9)
  {
    v12 = llvm::emitStrLen(v8, (uint64_t)a3, *((llvm::DataLayout **)this + 2), *((uint64_t **)this + 3));
    if (v12)
    {
      v13 = (llvm::GetElementPtrInst *)(**((_QWORD **)a3 + 8) + 1912);
      v32 = 257;
      return sub_1C5098FF4((uint64_t *)a3, v13, (uint64_t *)v8, v12, (uint64_t)v30);
    }
    return 0;
  }
  StringLength = llvm::GetStringLength(v9, (const llvm::Value *)8);
  if (!StringLength)
    return 0;
  v15 = StringLength;
  LODWORD(v30[0]) = 1;
  sub_1C5FB0110((unint64_t)a2, (int *)v30, 1, StringLength);
  v16 = *(llvm::Type **)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 16) + 8);
  llvm::DataLayout::getIntPtrType(*((llvm::DataLayout **)this + 2), v16);
  v18 = (uint64_t *)llvm::ConstantInt::get(v17, v15, 0);
  v19 = (llvm::GetElementPtrInst *)(**((_QWORD **)a3 + 8) + 1912);
  llvm::DataLayout::getIntPtrType(*((llvm::DataLayout **)this + 2), v16);
  v21 = llvm::ConstantInt::get(v20, v15 - 1, 0);
  v32 = 257;
  v11 = sub_1C4867B70((uint64_t *)a3, v19, (uint64_t *)v8, (uint64_t)v21, (uint64_t)v30);
  MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v8, 256, v9, 256, v18, 0, 0, 0, 0, 0);
  v23 = *((_QWORD *)a2 + 8);
  *((_QWORD *)MemTransferInst + 8) = v23;
  v24 = (uint64_t *)((char *)MemTransferInst + 64);
  v25 = *(uint64_t ***)MemTransferInst;
  llvm::AttributeFuncs::typeIncompatible(*(_QWORD *)MemTransferInst, 3, v30);
  v26 = *v25;
  if (v23)
  {
    if (*(_DWORD *)(v23 + 8) >= 2u)
      v23 = *(_QWORD *)(v23 + 48);
    else
      v23 = 0;
  }
  v33 = v23;
  v27 = llvm::AttributeSet::removeAttributes(&v33, v26, (uint64_t)v30);
  if (v23 == v27)
    v28 = *v24;
  else
    v28 = llvm::AttributeList::setAttributesAtIndex(v24, v26, 0, v27);
  *((_QWORD *)MemTransferInst + 8) = v28;
  sub_1C5010E9C((uint64_t)v31, v31[1]);
  if (*((_BYTE *)MemTransferInst + 16) == 84)
    *((_WORD *)MemTransferInst + 9) = *((_WORD *)MemTransferInst + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
  return v11;
}

llvm::Value *llvm::LibCallSimplifier::optimizeStrNCpy(llvm::LibCallSimplifier *this, const char ***a2, llvm::IRBuilderBase *a3)
{
  uint64_t v6;
  const char ***v7;
  llvm::Value *v8;
  char *GlobalString;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  std::string::size_type *v14;
  std::string::size_type v15;
  unint64_t StringLength;
  std::string::size_type v18;
  const llvm::APInt *v19;
  const char **v20;
  llvm::AttributeSetNode *v21;
  unsigned int v22;
  unsigned __int8 v23;
  uint64_t v24;
  llvm::ConstantInt *v25;
  llvm::ValueHandleBase *v26;
  llvm::Value *MemSet;
  const char **v28;
  char *v29;
  char *v30;
  void *v31;
  const char *v32;
  std::string::size_type v33;
  void *v34;
  size_t v35;
  size_t v36;
  void *v37;
  std::string *v38;
  std::string::size_type size;
  llvm::ConstantInt *v40;
  uint64_t *v41;
  llvm::Value *MemTransferInst;
  std::string::size_type v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  std::string v49;
  void *__src;
  size_t __len;
  const char *v52;
  void *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t)*(a2 - 4);
  if (!v6 || *(_BYTE *)(v6 + 16) || *(const char ***)(v6 + 24) != a2[9])
    v6 = 0;
  v7 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  v8 = (llvm::Value *)*v7;
  GlobalString = (char *)v7[4];
  v10 = (uint64_t)v7[8];
  LODWORD(v52) = 0;
  sub_1C5FAFFE4((unint64_t)a2, (unsigned int *)&v52, 1);
  if (v10)
    v11 = *(unsigned __int8 *)(v10 + 16) >= 0x1Cu;
  else
    v11 = 0;
  if (!v11 || (v12 = v10, !*(_QWORD *)(v10 + 40)))
    v12 = 0;
  v52 = (const char *)*((_QWORD *)this + 2);
  v53 = 0;
  v55 = 0;
  v56 = 0;
  v54 = v12;
  v57 = 1;
  if (sub_1C4F84D74(v10, 0, (uint64_t)&v52))
  {
    LODWORD(v52) = 1;
    sub_1C5FAFFE4((unint64_t)a2, (unsigned int *)&v52, 1);
  }
  if (v10)
    v13 = *(_BYTE *)(v10 + 16) == 16;
  else
    v13 = 0;
  if (!v13)
    return 0;
  v14 = (std::string::size_type *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u)
    v14 = (std::string::size_type *)*v14;
  v15 = *v14;
  if (*v14)
  {
    StringLength = llvm::GetStringLength((llvm *)GlobalString, (const llvm::Value *)8);
    if (!StringLength)
      return 0;
    v18 = StringLength;
    LODWORD(v52) = 1;
    sub_1C5FB0110((unint64_t)a2, (int *)&v52, 1, StringLength);
    if (v18 == 1)
    {
      v20 = a2[8];
      if (v20)
      {
        if (*((_DWORD *)v20 + 2) >= 3u)
        {
          v21 = (llvm::AttributeSetNode *)v20[7];
          if (v21)
          {
            LOWORD(v21) = llvm::AttributeSetNode::getAlignment(v21);
            LODWORD(v20) = BYTE1(v21);
          }
          else
          {
            LODWORD(v20) = 0;
          }
LABEL_28:
          v22 = v21 | ((_DWORD)v20 << 8);
          if (v22 <= 0x100)
            v23 = 0;
          else
            v23 = v22;
          v24 = **((_QWORD **)a3 + 8);
          v25 = *(llvm::ConstantInt **)(v24 + 1912);
          LODWORD(v53) = *(_DWORD *)(v24 + 1920) >> 8;
          if (v53 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v52, 0, 0);
          else
            v52 = 0;
          v26 = llvm::ConstantInt::get(v25, (llvm::LLVMContext *)&v52, v19);
          if (v53 >= 0x41 && v52)
            MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
          MemSet = llvm::IRBuilderBase::CreateMemSet((uint64_t)a3, v8, (uint64_t)v26, (uint64_t *)v10, v23 | 0x100u, 0, 0, 0, 0);
          v28 = a2[8];
          if (v28 && *((_DWORD *)v28 + 2) > 2u)
          {
            v32 = v28[7];
            v52 = **a2;
            v53 = &v55;
            v54 = 0x800000000;
            if (v32)
            {
              v29 = (char *)(v32 + 48);
              v30 = (char *)&v32[8 * *((unsigned int *)v32 + 2) + 48];
            }
            else
            {
              v29 = 0;
              v30 = 0;
            }
          }
          else
          {
            v29 = 0;
            v30 = 0;
            v52 = **a2;
            v53 = &v55;
            v54 = 0x800000000;
          }
          sub_1C53321EC((unsigned int *)&v53, (uint64_t)&v55, v29, v30);
          v49.__r_.__value_.__r.__words[0] = *((_QWORD *)MemSet + 8);
          *((_QWORD *)MemSet + 8) = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v49, (llvm::LLVMContext *)**a2, 1, (const llvm::AttrBuilder *)&v52);
          if (*((_BYTE *)MemSet + 16) == 84 && MemSet)
            *((_WORD *)MemSet + 9) = *((_WORD *)MemSet + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
          if (v53 != &v55)
            free(v53);
          return v8;
        }
        LODWORD(v20) = 0;
      }
      LOBYTE(v21) = 0;
      goto LABEL_28;
    }
    if (v15 <= v18)
    {
LABEL_71:
      llvm::DataLayout::getIntPtrType(*((llvm::DataLayout **)this + 2), *(llvm::Type **)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 16) + 8));
      v41 = (uint64_t *)llvm::ConstantInt::get(v40, v15, 0);
      MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v8, 256, (llvm::Value *)GlobalString, 256, v41, 0, 0, 0, 0, 0);
      v43 = (std::string::size_type)a2[8];
      *((_QWORD *)MemTransferInst + 8) = v43;
      v44 = (uint64_t *)((char *)MemTransferInst + 64);
      v45 = *(uint64_t ***)MemTransferInst;
      llvm::AttributeFuncs::typeIncompatible(*(_QWORD *)MemTransferInst, 3, (uint64_t *)&v52);
      v46 = *v45;
      if (v43)
      {
        if (*(_DWORD *)(v43 + 8) >= 2u)
          v43 = *(_QWORD *)(v43 + 48);
        else
          v43 = 0;
      }
      v49.__r_.__value_.__r.__words[0] = v43;
      v47 = llvm::AttributeSet::removeAttributes((uint64_t *)&v49, v46, (uint64_t)&v52);
      if (v43 == v47)
        v48 = *v44;
      else
        v48 = llvm::AttributeList::setAttributesAtIndex(v44, v46, 0, v47);
      *((_QWORD *)MemTransferInst + 8) = v48;
      sub_1C5010E9C((uint64_t)&v54, v55);
      if (*((_BYTE *)MemTransferInst + 16) == 84)
        *((_WORD *)MemTransferInst + 9) = *((_WORD *)MemTransferInst + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
      return v8;
    }
    if (v15 > 0x80)
      return 0;
    __src = 0;
    __len = 0;
    if (!llvm::getConstantStringInfo((llvm *)GlobalString, (const llvm::Value *)&__src, 0, 1))
      return 0;
    v31 = __src;
    if (!__src)
    {
      memset(&v49, 0, sizeof(v49));
      goto LABEL_63;
    }
    v33 = __len;
    if (__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len >= 0x17)
    {
      v35 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v35 = __len | 7;
      v36 = v35 + 1;
      v34 = operator new(v35 + 1);
      v49.__r_.__value_.__l.__size_ = v33;
      v49.__r_.__value_.__r.__words[2] = v36 | 0x8000000000000000;
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
    }
    else
    {
      *((_BYTE *)&v49.__r_.__value_.__s + 23) = __len;
      v34 = &v49;
      if (!__len)
        goto LABEL_62;
    }
    v37 = v34;
    memmove(v34, v31, v33);
    v34 = v37;
LABEL_62:
    *((_BYTE *)v34 + v33) = 0;
LABEL_63:
    std::string::resize(&v49, v15, 0);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &v49;
    else
      v38 = (std::string *)v49.__r_.__value_.__r.__words[0];
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v49.__r_.__value_.__l.__size_;
    v52 = "str";
    LOWORD(v56) = 259;
    GlobalString = llvm::IRBuilderBase::CreateGlobalString((uint64_t)a3, (char *)v38, (llvm::Type *)size, (uint64_t)&v52, 0, 0);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    goto LABEL_71;
  }
  return v8;
}

unsigned __int8 *llvm::LibCallSimplifier::optimizeStringLength(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3, const llvm::Value *a4)
{
  uint64_t v8;
  uint64_t StringLength;
  const llvm::Instruction *v10;
  int v12;
  int v13;
  llvm::Value **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  llvm::CallInst *v21;
  uint64_t (**v22)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  void **p_src;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t (**v30)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v35;
  uint64_t v36;
  unsigned __int8 *v37;
  llvm::Value **v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  llvm::OptimizationRemarkEmitter *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  llvm::Value **v48;
  _QWORD *v50;
  _QWORD *v51;
  BOOL v52;
  char v53;
  char v54;
  char *v55;
  char *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 **v65;
  int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  llvm::CallInst *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  void **v74;
  char *v75;
  unint64_t v76;
  void **v77;
  _DWORD *v78;
  _DWORD *v79;
  int v80;
  size_t v81;
  int v82;
  int64_t v83;
  unint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  llvm::ConstantDataSequential *v89;
  uint64_t v90;
  void *__src;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  __int16 v95;
  void *v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t (**v99)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v100;
  llvm::CallInst *v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  const char *v105;
  uint64_t v106;
  char v107;
  char v108;
  void *v109;
  uint64_t v110;
  _BYTE v111[260];
  int v112;
  uint64_t v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  StringLength = llvm::GetStringLength((llvm *)v8, a4);
  if (StringLength)
    return (unsigned __int8 *)llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, StringLength - 1, 0);
  v12 = *(unsigned __int8 *)(v8 + 16);
  if (v12 == 62)
    goto LABEL_6;
  if (v12 == 5)
  {
    if (*(_WORD *)(v8 + 18) != 34)
      goto LABEL_64;
LABEL_6:
    if (!llvm::isGEPBasedOnPointerToString((llvm *)v8, a4))
      return 0;
    v13 = *(_DWORD *)(v8 + 20);
    if ((v13 & 0x40000000) != 0)
      v14 = *(llvm::Value ***)(v8 - 8);
    else
      v14 = (llvm::Value **)(v8 - 32 * (v13 & 0x7FFFFFF));
    if (!llvm::getConstantDataArrayInfo(*v14, &v89, a4, 0))
      goto LABEL_55;
    if (v89)
    {
      v15 = v90;
      if (!v90)
        return 0;
      v16 = 0;
      while (1)
      {
        llvm::ConstantDataSequential::getElementAsInteger(v89);
        if (!v17)
          break;
        if (v15 == ++v16)
          return 0;
      }
    }
    else
    {
      v16 = 0;
    }
    v18 = *(_DWORD *)(v8 + 20);
    if ((v18 & 0x40000000) != 0)
      v19 = *(_QWORD *)(v8 - 8);
    else
      v19 = v8 - 32 * (v18 & 0x7FFFFFF);
    v20 = *(_QWORD *)(v19 + 64);
    if (!a2 || (v21 = a2, !*((_QWORD *)a2 + 5)))
    {
      v52 = v20 && *(unsigned __int8 *)(v20 + 16) >= 0x1Cu;
      if (!v52 || (v21 = *(llvm::CallInst **)(v19 + 64), !*(_QWORD *)(v20 + 40)))
        v21 = 0;
    }
    v99 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))*((_QWORD *)this + 2);
    v100 = 0;
    v102 = 0;
    v103 = 0;
    v101 = v21;
    LOBYTE(v104) = 1;
    sub_1C4F83784(v20, 0, (uint64_t *)&v99, &__src);
    v23 = 24;
    if (*(_BYTE *)(v8 + 16) == 62)
      v23 = 64;
    v24 = *(_QWORD *)(*(_QWORD *)(v8 + v23) + 32);
    v25 = v92;
    p_src = (void **)((char *)__src + 8 * ((v92 - 1) >> 6));
    if (v92 < 0x41)
      p_src = &__src;
    v27 = (1 << (v92 - 1)) & (unint64_t)*p_src;
    if (v27)
    {
      LODWORD(v100) = v92;
      if (v92 > 0x40)
      {
        v87 = v24;
        v88 = v27;
        v81 = (((unint64_t)v92 + 63) >> 3) & 0x3FFFFFF8;
        v99 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))operator new[]();
        memcpy(v99, __src, v81);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v99);
        v25 = v100;
        v22 = v99;
        if (v100 >= 0x41)
        {
          v82 = 0;
          v83 = ((unint64_t)v100 + 63) >> 6;
          do
          {
            if (v83-- < 1)
              break;
            v85 = (unint64_t)v99[v83];
            v82 += __clz(v85);
          }
          while (!v85);
          v86 = v100 | 0xFFFFFFC0;
          if ((v100 & 0x3F) == 0)
            v86 = 0;
          if ((v100 - v82 - v86) > 0x40)
          {
            v24 = v87;
            v27 = v88;
            goto LABEL_33;
          }
          v30 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))*v99;
        }
        else
        {
          v30 = v99;
        }
        v24 = v87;
        v27 = v88;
      }
      else
      {
        v28 = ~(unint64_t)__src;
        if ((_DWORD)v92)
          v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v92;
        else
          v29 = 0;
        v22 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v29 & v28);
        v30 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v29 & v28);
      }
      if ((unint64_t)v30 <= v16)
      {
        LOBYTE(v35) = 1;
        goto LABEL_45;
      }
    }
LABEL_33:
    v31 = *(_DWORD *)(v8 + 20);
    if ((v31 & 0x40000000) != 0)
      v32 = *(_QWORD *)(v8 - 8);
    else
      v32 = v8 - 32 * (v31 & 0x7FFFFFF);
    v33 = v24 - 1;
    v35 = *(_BYTE *)(*(_QWORD *)v32 + 16) == 3 && v16 == v33;
    if (!v27)
    {
      if (v35)
      {
LABEL_49:
        v36 = *(_QWORD *)a2;
        LOWORD(v103) = 257;
        v37 = sub_1C4773B94((uint64_t *)a3, (unsigned __int8 *)v20, v36, (uint64_t)&v99);
        v38 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, v16, 0);
        LOWORD(v103) = 257;
        v16 = sub_1C47733F8((uint64_t)a3, (uint64_t)v38, (uint64_t)v37, (uint64_t)&v99, 0, 0);
        v39 = 0;
LABEL_52:
        if (v94 >= 0x41 && v93)
          MEMORY[0x1CAA32F9C](v93, 0x1000C8000313F17);
        if (v92 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        if ((v39 & 1) == 0)
          return (unsigned __int8 *)v16;
LABEL_55:
        v12 = *(unsigned __int8 *)(v8 + 16);
        goto LABEL_56;
      }
LABEL_51:
      v39 = 1;
      goto LABEL_52;
    }
LABEL_45:
    if (v25 >= 0x41 && v22)
      MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
    if (v35)
      goto LABEL_49;
    goto LABEL_51;
  }
LABEL_56:
  if (v12 == 85)
  {
    v40 = llvm::GetStringLength(*(llvm **)(v8 - 64), a4);
    v41 = llvm::GetStringLength(*(llvm **)(v8 - 32), a4);
    if (v40 && v41 != 0)
    {
      v43 = v41;
      v44 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)this + 4);
      v45 = ****(_QWORD ****)v44;
      if (*(_QWORD *)(v45 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v45 + 72) + 48))(*(_QWORD *)(v45 + 72)))
      {
        v70 = *(llvm::CallInst **)(*((_QWORD *)a2 + 5) + 56);
        llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v102, (llvm::CallInst *)((char *)a2 + 48));
        v71 = *((_QWORD *)a2 + 5);
        LODWORD(v100) = 9;
        BYTE4(v100) = 2;
        v101 = v70;
        v104 = "instcombine";
        v105 = "simplify-libcalls";
        v106 = 17;
        v107 = 0;
        v108 = 0;
        v109 = v111;
        v110 = 0x400000000;
        v111[256] = 0;
        v112 = -1;
        v113 = v71;
        v99 = &off_1E814E500;
        __src = "folded strlen(select) to select of constants";
        v92 = 44;
        sub_1C53B17B4((uint64_t)&v109, (const void **)&__src);
        sub_1C61998EC((uint64_t)&__src, (uint64_t)&v99);
        __src = &off_1E814E500;
        v99 = &off_1E814E790;
        v72 = (char *)v109;
        if ((_DWORD)v110)
        {
          v73 = (unint64_t)v110 << 6;
          do
          {
            v74 = (void **)&v72[v73];
            if (v72[v73 - 17] < 0)
              operator delete(*(v74 - 5));
            if (*((char *)v74 - 41) < 0)
              operator delete(*(v74 - 8));
            v73 -= 64;
          }
          while (v73);
          v72 = (char *)v109;
        }
        if (v72 != v111)
          free(v72);
        llvm::OptimizationRemarkEmitter::emit(v44, (llvm::DiagnosticInfoOptimizationBase *)&__src);
        __src = &off_1E814E790;
        v75 = (char *)v96;
        if (v97)
        {
          v76 = (unint64_t)v97 << 6;
          do
          {
            v77 = (void **)&v75[v76];
            if (v75[v76 - 17] < 0)
              operator delete(*(v77 - 5));
            if (*((char *)v77 - 41) < 0)
              operator delete(*(v77 - 8));
            v76 -= 64;
          }
          while (v76);
          v75 = (char *)v96;
        }
        if (v75 != (char *)&v98)
          free(v75);
      }
      v46 = *(_QWORD *)(v8 - 96);
      v47 = (uint64_t *)llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, v40 - 1, 0);
      v48 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, v43 - 1, 0);
      LOWORD(v103) = 257;
      return (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)a3, v46, v47, (uint64_t)v48, (uint64_t)&v99, 0);
    }
  }
LABEL_64:
  if (llvm::isOnlyUsedInZeroEqualityComparison(a2, v10))
  {
    v50 = (_QWORD *)*((_QWORD *)a3 + 8);
    LODWORD(v99) = (_DWORD)a4;
    if ((int)a4 <= 63)
    {
      if ((int)a4 <= 31)
      {
        switch((_DWORD)a4)
        {
          case 0x10:
            v51 = (_QWORD *)(*v50 + 1936);
            goto LABEL_82;
          case 8:
            v51 = (_QWORD *)(*v50 + 1912);
            goto LABEL_82;
          case 1:
            v51 = (_QWORD *)(*v50 + 1888);
            goto LABEL_82;
        }
      }
      else if ((_DWORD)a4 == 32)
      {
        v51 = (_QWORD *)(*v50 + 1960);
        goto LABEL_82;
      }
    }
    else
    {
      if ((_DWORD)a4 == 64)
      {
        v51 = (_QWORD *)(*v50 + 1984);
LABEL_82:
        __src = "strlenfirst";
        v95 = 259;
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, (uint64_t)v51);
        v54 = v53;
        v55 = (char *)operator new(0x60uLL);
        v56 = v55;
        v57 = (unsigned __int8 *)(v55 + 32);
        LOWORD(v103) = 257;
        *((_QWORD *)v55 + 3) = v55 + 32;
        *((_QWORD *)v55 + 4) = v51;
        *((_QWORD *)v55 + 5) = 0;
        *((_WORD *)v55 + 24) = 60;
        *((_DWORD *)v55 + 13) = 1;
        *(_OWORD *)(v55 + 56) = 0u;
        *(_OWORD *)(v55 + 72) = 0u;
        *((_DWORD *)v55 + 22) = 0;
        *(_QWORD *)v55 = v8;
        v60 = *(_QWORD *)(v8 + 8);
        v59 = (_QWORD *)(v8 + 8);
        v58 = v60;
        *((_QWORD *)v55 + 1) = v60;
        if (v60)
          *(_QWORD *)(v58 + 16) = v55 + 8;
        *((_QWORD *)v55 + 2) = v59;
        *v59 = v55;
        *((_WORD *)v55 + 25) = 2 * (v54 & 0x3F);
        v55[92] = 1;
        llvm::Value::setName((uint64_t ***)v55 + 4, (uint64_t)&v99);
        (*(void (**)(_QWORD, unsigned __int8 *, void **, _QWORD, _QWORD))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v57, &__src, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
        v61 = *((unsigned int *)a3 + 2);
        if (!(_DWORD)v61)
        {
LABEL_85:
          v62 = *(_QWORD *)a2;
          LOWORD(v103) = 257;
          return sub_1C4773E38((uint64_t *)a3, 39, v57, v62, (uint64_t)&v99);
        }
        v63 = *(_QWORD *)a3;
        v64 = *(_QWORD *)a3 + 16 * v61;
        v65 = (unsigned __int8 **)(v56 + 80);
        while (1)
        {
          v66 = *(_DWORD *)v63;
          v67 = *(unsigned __int8 **)(v63 + 8);
          if (v67)
          {
            if (!v66)
            {
              v89 = *(llvm::ConstantDataSequential **)(v63 + 8);
              llvm::MetadataTracking::track((uint64_t)&v89, v67, 2);
              v68 = *v65;
              goto LABEL_98;
            }
          }
          else
          {
            v68 = *v65;
            if (!*v65 && (v56[55] & 0x20) == 0)
              goto LABEL_95;
            if (!v66)
            {
              v89 = 0;
LABEL_98:
              if (v68)
                llvm::MetadataTracking::untrack((uint64_t)(v56 + 80), v68);
              v69 = (unsigned __int8 *)v89;
              *v65 = (unsigned __int8 *)v89;
              if (v69)
                llvm::MetadataTracking::retrack((uint64_t)&v89, v69, (uint64_t)(v56 + 80));
              goto LABEL_95;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v57, *(_DWORD *)v63, (llvm::MDNode *)v67);
LABEL_95:
          v63 += 16;
          if (v63 == v64)
            goto LABEL_85;
        }
      }
      if ((_DWORD)a4 == 128)
      {
        v51 = (_QWORD *)(*v50 + 2008);
        goto LABEL_82;
      }
    }
    v78 = sub_1C5270984(*v50 + 2168, &v99);
    v51 = (_QWORD *)*((_QWORD *)v78 + 1);
    if (!v51)
    {
      v79 = v78;
      v51 = (_QWORD *)sub_1C484358C(*v50 + 2040, 24, 3);
      v80 = (int)v99;
      *v51 = v50;
      v51[2] = 0;
      v51[1] = (v80 << 8) | 0xDu;
      *((_QWORD *)v79 + 1) = v51;
    }
    goto LABEL_82;
  }
  return 0;
}

unsigned __int8 *llvm::LibCallSimplifier::optimizeStrLen(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  unsigned __int8 *v4;
  unsigned int v6;

  v4 = llvm::LibCallSimplifier::optimizeStringLength(this, a2, a3, (const llvm::Value *)8);
  if (!v4)
  {
    v6 = 0;
    sub_1C5FAFFE4((unint64_t)a2, &v6, 1);
  }
  return v4;
}

unsigned __int8 *llvm::LibCallSimplifier::optimizeStrStr(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  llvm::CallInst *v4;
  char *v6;
  llvm *v7;
  llvm *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm **v12;
  uint64_t v13;
  llvm::Type *v14;
  uint64_t v15;
  llvm::Constant **v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  llvm::Value **NullValue;
  uint64_t v21;
  int ConstantStringInfo;
  int v23;
  BOOL v24;
  uint64_t v25;
  llvm::Type *v26;
  llvm::IRBuilderBase *v27;
  llvm::Constant *v29;
  int v31;
  llvm::IntegerType *v32;
  uint64_t *v33;
  llvm::GetElementPtrInst *v34;
  uint64_t v35;
  char *v36;
  size_t v37;
  uint64_t v38[2];
  unsigned int v39[8];
  __int16 v40;
  uint64_t v41;

  v4 = a2;
  v41 = *MEMORY[0x1E0C80C00];
  v6 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v7 = *(llvm **)v6;
  v8 = (llvm *)*((_QWORD *)v6 + 4);
  if (*(llvm **)v6 == v8)
    goto LABEL_22;
  v9 = *((_QWORD *)a2 + 1);
  if (v9)
  {
    while (1)
    {
      v10 = *(_QWORD *)(v9 + 24);
      if (!v10 || *(_BYTE *)(v10 + 16) != 81 || (*(_WORD *)(v10 + 18) & 0x3E) != 0x20 || *(llvm **)(v10 - 32) != v7)
        break;
      v9 = *(_QWORD *)(v9 + 8);
      if (!v9)
        goto LABEL_8;
    }
    v38[0] = 0;
    v38[1] = 0;
    v36 = 0;
    v37 = 0;
    ConstantStringInfo = llvm::getConstantStringInfo(v7, (const llvm::Value *)v38, 0, 1);
    v23 = llvm::getConstantStringInfo(((llvm **)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF))[4], (const llvm::Value *)&v36, 0, 1);
    if (v23)
      v24 = v37 == 0;
    else
      v24 = 0;
    if (v24)
    {
      v7 = (llvm *)*((_QWORD *)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
LABEL_22:
      v29 = *(llvm::Constant **)v4;
      v40 = 257;
      return sub_1C4773E38((uint64_t *)a3, 49, (unsigned __int8 *)v7, (uint64_t)v29, (uint64_t)v39);
    }
    if ((ConstantStringInfo & v23) == 1)
    {
      v25 = llvm::StringRef::find(v38, v36, v37, 0);
      if (v25 == -1)
        return (unsigned __int8 *)llvm::Constant::getNullValue(*(llvm::Constant **)v4, v26);
      v32 = (llvm::IntegerType *)v25;
      v33 = (uint64_t *)llvm::castToCStr(*((llvm **)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)), a3, v27);
      v34 = (llvm::GetElementPtrInst *)(**((_QWORD **)a3 + 8) + 1912);
      *(_QWORD *)v39 = "strstr";
      v40 = 259;
      v35 = sub_1C63B8DB8((uint64_t)a3, v34, v33, v32, (uint64_t)v39);
      goto LABEL_33;
    }
    if (v37 == 1)
      v31 = v23;
    else
      v31 = 0;
    if (v31 == 1)
    {
      v35 = llvm::emitStrChr(*((llvm **)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)), *v36, a3, *((uint64_t **)this + 3));
      if (v35)
      {
LABEL_33:
        v7 = (llvm *)v35;
        goto LABEL_22;
      }
    }
    else
    {
      *(_QWORD *)v39 = 0x100000000;
      sub_1C5FAFFE4((unint64_t)v4, v39, 2);
    }
    return 0;
  }
LABEL_8:
  v11 = llvm::emitStrLen(v8, (uint64_t)a3, *((llvm::DataLayout **)this + 2), *((uint64_t **)this + 3));
  if (!v11)
    return 0;
  v12 = (llvm **)((char *)v4 - 32 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
  v13 = llvm::emitStrNCmp(*v12, v12[4], v11, (uint64_t)a3, *((llvm::DataLayout **)this + 2), *((uint64_t **)this + 3));
  if (!v13)
    return 0;
  v15 = *((_QWORD *)v4 + 1);
  if (v15)
  {
    v16 = (llvm::Constant **)v13;
    do
    {
      v17 = *(_QWORD *)(v15 + 8);
      v18 = *(_QWORD *)(v15 + 24);
      v19 = *(_WORD *)(v18 + 18) & 0x3F;
      NullValue = llvm::Constant::getNullValue(*v16, v14);
      *(_QWORD *)v39 = "cmp";
      v40 = 259;
      v21 = sub_1C4774B48((uint64_t)a3, v19, (uint64_t)v16, (uint64_t)NullValue, (uint64_t)v39);
      (*((void (**)(_QWORD, uint64_t, uint64_t))this + 8))(*((_QWORD *)this + 9), v18, v21);
      v15 = v17;
    }
    while (v17);
  }
  return (unsigned __int8 *)v4;
}

uint64_t llvm::LibCallSimplifier::replaceAllUsesWith(llvm::LibCallSimplifier *this, llvm::Instruction *a2, llvm::Value *a3)
{
  return (*((uint64_t (**)(_QWORD, llvm::Instruction *, llvm::Value *))this + 8))(*((_QWORD *)this + 9), a2, a3);
}

llvm::Value **llvm::LibCallSimplifier::optimizeMemChr(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t *v10;
  llvm::Type *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::APInt *v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  char v19;
  char *v20;
  char *v21;
  llvm::Value *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  llvm::Type *v29;
  void *NullValue;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  unsigned __int8 *v35;
  char *v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  size_t *v42;
  size_t v43;
  unsigned __int8 *v44;
  size_t v45;
  llvm::Value **v46;
  uint64_t v47;
  llvm::Type *v48;
  llvm::Value **v49;
  const llvm::APInt *v50;
  uint64_t *v51;
  uint64_t v52;
  llvm::GetElementPtrInst *v53;
  llvm::ConstantInt *v54;
  unint64_t v55;
  unint64_t v56;
  llvm::ValueHandleBase *v57;
  _QWORD *v59;
  uint64_t v60;
  unsigned __int8 **v61;
  int v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  const llvm::APInt *v66;
  unint64_t v67;
  unsigned __int8 v68;
  unsigned __int8 *v69;
  size_t v70;
  unsigned __int8 *v71;
  unsigned __int8 v72;
  unsigned int v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *i;
  unint64_t v78;
  unint64_t v79;
  unsigned __int8 v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  uint64_t v84;
  llvm::ValueHandleBase *v85;
  uint64_t v86;
  const llvm::APInt *v87;
  unsigned __int8 *v88;
  _QWORD *v89;
  _QWORD *v90;
  llvm::ConstantInt *v91;
  unsigned int v92;
  unsigned __int8 v93;
  llvm::ValueHandleBase *v94;
  const llvm::APInt *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  llvm::ConstantInt *v99;
  unsigned int v100;
  unint64_t v101;
  llvm::ValueHandleBase *v102;
  const llvm::APInt *v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  llvm::ConstantInt *v107;
  unsigned int v108;
  unint64_t v109;
  llvm::ValueHandleBase *v110;
  _QWORD *v111;
  llvm::Constant **v112;
  llvm::Type *v113;
  llvm::Value **v114;
  llvm::Constant **v115;
  llvm::Type *v116;
  llvm::Value **v117;
  unsigned __int8 *Select;
  uint64_t v119;
  _DWORD *v120;
  int v121;
  _DWORD *v122;
  int v123;
  _DWORD *v124;
  int v125;
  uint64_t v126;
  unsigned int v127;
  void *__s;
  size_t __n;
  _QWORD v130[4];
  __int16 v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;

  v6 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v7 = *((_QWORD *)v6 + 8);
  if (v7)
    v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
  else
    v8 = 0;
  if (!v8 || (v9 = *((_QWORD *)v6 + 8), !*(_QWORD *)(v7 + 40)))
    v9 = 0;
  v10 = *(uint64_t **)v6;
  v132 = (const char *)*((_QWORD *)this + 2);
  v133 = 0;
  v135 = 0;
  v136 = 0;
  v134 = v9;
  v137 = 1;
  if (sub_1C4F84D74(v7, 0, (uint64_t)&v132))
  {
    LODWORD(v132) = 0;
    sub_1C5FAFFE4((unint64_t)a2, (unsigned int *)&v132, 1);
  }
  v12 = (unsigned __int8 *)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  if (v12[16] == 16)
    v13 = ((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  else
    v13 = 0;
  if (*(_BYTE *)(v7 + 16) == 16)
    v14 = v7;
  else
    v14 = 0;
  if (v14)
  {
    v15 = (llvm::APInt *)(v14 + 24);
    v16 = *(_DWORD *)(v14 + 32);
    if (v16 > 0x40)
    {
      v34 = llvm::APInt::countLeadingZerosSlowCase(v15);
      if (v34 == v16)
        return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v11);
      if (v34 == v16 - 1)
        goto LABEL_19;
    }
    else
    {
      if (!*(_QWORD *)v15)
        return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v11);
      if (*(_QWORD *)v15 == 1)
      {
LABEL_19:
        v17 = **((_QWORD **)a3 + 8) + 1912;
        v130[0] = "memchr.char0";
        v131 = 259;
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, v17);
        v19 = v18;
        v20 = (char *)operator new(0x60uLL);
        v21 = v20;
        v22 = (llvm::Value *)(v20 + 32);
        *((_QWORD *)v20 + 2) = 0;
        *((_QWORD *)v20 + 3) = v20 + 32;
        LOWORD(v136) = 257;
        *((_QWORD *)v20 + 4) = v17;
        *((_QWORD *)v20 + 5) = 0;
        *((_WORD *)v20 + 24) = 60;
        *((_DWORD *)v20 + 13) = 1;
        *(_OWORD *)(v20 + 56) = 0u;
        *(_OWORD *)(v20 + 72) = 0u;
        *((_DWORD *)v20 + 22) = 0;
        *(_QWORD *)v20 = v10;
        *((_QWORD *)v20 + 1) = 0;
        if (v10)
        {
          v23 = v10 + 1;
          v24 = v10[1];
          *((_QWORD *)v20 + 1) = v24;
          if (v24)
            *(_QWORD *)(v24 + 16) = v20 + 8;
          *((_QWORD *)v20 + 2) = v23;
          *v23 = v20;
        }
        *((_WORD *)v20 + 25) = 2 * (v19 & 0x3F);
        v20[92] = 1;
        llvm::Value::setName((uint64_t ***)v20 + 4, (uint64_t)&v132);
        (*(void (**)(_QWORD, llvm::Value *, _QWORD *, _QWORD, _QWORD))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v22, v130, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
        v25 = *((unsigned int *)a3 + 2);
        if (!(_DWORD)v25)
        {
LABEL_24:
          v26 = **((_QWORD **)a3 + 8) + 1912;
          LOWORD(v136) = 257;
          v27 = sub_1C4773E38((uint64_t *)a3, 38, v12, v26, (uint64_t)&v132);
          v132 = "memchr.char0cmp";
          LOWORD(v136) = 259;
          v28 = sub_1C4774B48((uint64_t)a3, 32, (uint64_t)v22, (uint64_t)v27, (uint64_t)&v132);
          NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v29);
          v132 = "memchr.sel";
          LOWORD(v136) = 259;
          v31 = (uint64_t *)a3;
          v32 = v28;
          v33 = v10;
          return (llvm::Value **)llvm::IRBuilderBase::CreateSelect(v31, v32, v33, (uint64_t)NullValue, (uint64_t)&v132, 0);
        }
        v59 = *(_QWORD **)a3;
        v60 = *(_QWORD *)a3 + 16 * v25;
        v61 = (unsigned __int8 **)(v21 + 80);
        while (1)
        {
          v62 = *(_DWORD *)v59;
          v63 = (unsigned __int8 *)v59[1];
          if (v63)
          {
            if (!v62)
            {
              __s = (void *)v59[1];
              llvm::MetadataTracking::track((uint64_t)&__s, v63, 2);
              v64 = *v61;
              goto LABEL_67;
            }
          }
          else
          {
            v64 = *v61;
            if (!*v61 && (v21[55] & 0x20) == 0)
              goto LABEL_64;
            if (!v62)
            {
              __s = 0;
LABEL_67:
              if (v64)
                llvm::MetadataTracking::untrack((uint64_t)(v21 + 80), v64);
              v65 = (unsigned __int8 *)__s;
              *v61 = (unsigned __int8 *)__s;
              if (v65)
                llvm::MetadataTracking::retrack((uint64_t)&__s, v65, (uint64_t)(v21 + 80));
              goto LABEL_64;
            }
          }
          llvm::Value::setMetadata(v22, *(_DWORD *)v59, (llvm::MDNode *)v63);
LABEL_64:
          v59 += 2;
          if (v59 == (_QWORD *)v60)
            goto LABEL_24;
        }
      }
    }
  }
  __s = 0;
  __n = 0;
  v35 = 0;
  if (llvm::getConstantStringInfo((llvm *)v10, (const llvm::Value *)&__s, 0, 0))
  {
    if (v13)
    {
      v36 = (char *)(v13 + 24);
      if (*(_DWORD *)(v13 + 32) >= 0x41u)
        v36 = *(char **)v36;
      if (__n)
      {
        v37 = __s;
        v38 = memchr(__s, *v36, __n);
        v39 = v38 - v37;
        if (v38 && v39 != -1)
        {
          v46 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v7, v39, 0);
          v132 = "memchr.cmp";
          LOWORD(v136) = 259;
          v47 = sub_1C4774B48((uint64_t)a3, 37, v7, (uint64_t)v46, (uint64_t)&v132);
          v49 = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v48);
          v51 = (uint64_t *)v49;
          v52 = **((_QWORD **)a3 + 8);
          v53 = (llvm::GetElementPtrInst *)(v52 + 1912);
          v54 = *(llvm::ConstantInt **)(v52 + 1984);
          v55 = *(unsigned int *)(v52 + 1992);
          LODWORD(v133) = v55 >> 8;
          if (v55 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v132, v39, 0);
          }
          else
          {
            if (v55 <= 0xFF)
              v56 = 0;
            else
              v56 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v55);
            v132 = (const char *)(v56 & v39);
          }
          v57 = llvm::ConstantInt::get(v54, (llvm::LLVMContext *)&v132, v50);
          if (v133 >= 0x41 && v132)
            MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
          v132 = "memchr.ptr";
          LOWORD(v136) = 259;
          NullValue = sub_1C4867B70((uint64_t *)a3, v53, v10, (uint64_t)v57, (uint64_t)&v132);
          LOWORD(v136) = 257;
          v31 = (uint64_t *)a3;
          v32 = v47;
          v33 = v51;
          return (llvm::Value **)llvm::IRBuilderBase::CreateSelect(v31, v32, v33, (uint64_t)NullValue, (uint64_t)&v132, 0);
        }
      }
      return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v11);
    }
    if (!v14)
      return 0;
    v42 = (size_t *)(v14 + 24);
    if (*(_DWORD *)(v14 + 32) >= 0x41u)
      v42 = (size_t *)*v42;
    v43 = *v42;
    v44 = (unsigned __int8 *)__s;
    v45 = __n >= v43 ? v43 : __n;
    __n = v45;
    if (!v45 || !llvm::isOnlyUsedInZeroEqualityComparison(a2, v11))
      return 0;
    v67 = (unint64_t)v44;
    if (v45 >= 2)
    {
      v69 = v44 + 1;
      v68 = *v44;
      v70 = v45 - 1;
      v67 = (unint64_t)v44;
      v71 = v44 + 1;
      do
      {
        v73 = *v71++;
        v72 = v73;
        v74 = v68 >= v73;
        if (v68 <= v73)
          v68 = v72;
        if (!v74)
          v67 = (unint64_t)v69;
        v69 = v71;
        --v70;
      }
      while (v70);
    }
    v75 = *((_QWORD *)this + 2);
    v76 = *(_QWORD *)(v75 + 40);
    if (!v76)
      return 0;
    LODWORD(v67) = *(unsigned __int8 *)v67;
    for (i = *(unsigned __int8 **)(v75 + 32); v67 >= *i; ++i)
    {
      v35 = 0;
      if (!--v76)
        return (llvm::Value **)v35;
    }
    if (v67 <= 7)
      v67 = 7;
    else
      v67 = v67;
    v78 = v67 | (v67 >> 1) | ((v67 | (v67 >> 1)) >> 2);
    v79 = v78 | (v78 >> 4);
    v80 = v79 + 1;
    v81 = (v79 + 1);
    v127 = v81;
    if (v81 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v126, 0, 0);
      v82 = v127;
    }
    else
    {
      v126 = 0;
      v82 = (v79 + 1);
    }
    do
    {
      v83 = *v44;
      v84 = 1 << v83;
      if (v82 > 0x40)
        *(_QWORD *)(v126 + ((v83 >> 3) & 0x18)) |= v84;
      else
        v126 |= v84;
      ++v44;
      --v45;
    }
    while (v45);
    v85 = llvm::ConstantInt::get(*((llvm::ConstantInt **)a3 + 8), (llvm::LLVMContext *)&v126, v66);
    v86 = *(_QWORD *)v85;
    LOWORD(v136) = 257;
    v88 = sub_1C4773690((uint64_t *)a3, v12, v86, (uint64_t)&v132);
    v89 = (_QWORD *)*((_QWORD *)a3 + 8);
    LODWORD(v132) = v81;
    if (v80 <= 0x3Fu)
    {
      switch(v80)
      {
        case 0x20u:
          v90 = (_QWORD *)(*v89 + 1960);
          goto LABEL_101;
        case 0x10u:
          v90 = (_QWORD *)(*v89 + 1936);
          goto LABEL_101;
        case 8u:
          v90 = (_QWORD *)(*v89 + 1912);
          goto LABEL_101;
      }
    }
    else
    {
      if (v80 == 64)
      {
        v90 = (_QWORD *)(*v89 + 1984);
        goto LABEL_101;
      }
      if (v80 == 128)
      {
        v90 = (_QWORD *)(*v89 + 2008);
        goto LABEL_101;
      }
    }
    v120 = sub_1C5270984(*v89 + 2168, &v132);
    v90 = (_QWORD *)*((_QWORD *)v120 + 1);
    if (!v90)
    {
      v90 = (_QWORD *)sub_1C484358C(*v89 + 2040, 24, 3);
      v121 = (int)v132;
      *v90 = v89;
      v90[2] = 0;
      v90[1] = (v121 << 8) | 0xDu;
      *((_QWORD *)v120 + 1) = v90;
    }
LABEL_101:
    v91 = (llvm::ConstantInt *)*v90;
    v92 = *((_DWORD *)v90 + 2);
    LODWORD(v133) = v92 >> 8;
    if (v92 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v132, 255, 0);
    }
    else
    {
      if (v92 <= 0xFF)
        v93 = 0;
      else
        v93 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v92);
      v132 = (const char *)v93;
    }
    v94 = llvm::ConstantInt::get(v91, (llvm::LLVMContext *)&v132, v87);
    if (v133 >= 0x41 && v132)
      MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
    LOWORD(v136) = 257;
    v96 = sub_1C4D89BCC((uint64_t)a3, v88, (uint64_t)v94, (uint64_t)&v132);
    v97 = (_QWORD *)*((_QWORD *)a3 + 8);
    LODWORD(v132) = v81;
    if (v80 <= 0x3Fu)
    {
      switch(v80)
      {
        case 0x20u:
          v98 = (_QWORD *)(*v97 + 1960);
          goto LABEL_114;
        case 0x10u:
          v98 = (_QWORD *)(*v97 + 1936);
          goto LABEL_114;
        case 8u:
          v98 = (_QWORD *)(*v97 + 1912);
          goto LABEL_114;
      }
    }
    else
    {
      if (v80 == 64)
      {
        v98 = (_QWORD *)(*v97 + 1984);
        goto LABEL_114;
      }
      if (v80 == 128)
      {
        v98 = (_QWORD *)(*v97 + 2008);
        goto LABEL_114;
      }
    }
    v122 = sub_1C5270984(*v97 + 2168, &v132);
    v98 = (_QWORD *)*((_QWORD *)v122 + 1);
    if (!v98)
    {
      v98 = (_QWORD *)sub_1C484358C(*v97 + 2040, 24, 3);
      v123 = (int)v132;
      *v98 = v97;
      v98[2] = 0;
      v98[1] = (v123 << 8) | 0xDu;
      *((_QWORD *)v122 + 1) = v98;
    }
LABEL_114:
    v99 = (llvm::ConstantInt *)*v98;
    v100 = *((_DWORD *)v98 + 2);
    LODWORD(v133) = v100 >> 8;
    if (v100 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v132, v80, 0);
    }
    else
    {
      if (v100 <= 0xFF)
        LOBYTE(v101) = 0;
      else
        v101 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v100);
      v132 = (const char *)(v101 & v80);
    }
    v102 = llvm::ConstantInt::get(v99, (llvm::LLVMContext *)&v132, v95);
    if (v133 >= 0x41 && v132)
      MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
    v132 = "memchr.bounds";
    LOWORD(v136) = 259;
    v104 = sub_1C4774B48((uint64_t)a3, 36, v96, (uint64_t)v102, (uint64_t)&v132);
    v105 = (_QWORD *)*((_QWORD *)a3 + 8);
    LODWORD(v132) = v81;
    if (v80 <= 0x3Fu)
    {
      switch(v80)
      {
        case 0x20u:
          v106 = *v105 + 1960;
          goto LABEL_126;
        case 0x10u:
          v106 = *v105 + 1936;
          goto LABEL_126;
        case 8u:
          v106 = *v105 + 1912;
          goto LABEL_126;
      }
    }
    else
    {
      if (v80 == 64)
      {
        v106 = *v105 + 1984;
LABEL_126:
        v107 = *(llvm::ConstantInt **)v106;
        v108 = *(_DWORD *)(v106 + 8);
        LODWORD(v133) = v108 >> 8;
        if (v108 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v132, 1, 0);
        }
        else
        {
          if (v108 <= 0xFF)
            LOBYTE(v109) = 0;
          else
            v109 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v108);
          v132 = (const char *)(v109 & 1);
        }
        v110 = llvm::ConstantInt::get(v107, (llvm::LLVMContext *)&v132, v103);
        if (v133 >= 0x41 && v132)
          MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
        LOWORD(v136) = 257;
        v111 = (_QWORD *)sub_1C506E874((uint64_t)a3, (uint64_t)v110, v96, (uint64_t)&v132, 0, 0);
        LOWORD(v136) = 257;
        v112 = (llvm::Constant **)sub_1C4D89BCC((uint64_t)a3, v111, (uint64_t)v85, (uint64_t)&v132);
        v130[0] = "memchr.bits";
        v131 = 259;
        v114 = llvm::Constant::getNullValue(*v112, v113);
        v115 = (llvm::Constant **)sub_1C4774B48((uint64_t)a3, 33, (uint64_t)v112, (uint64_t)v114, (uint64_t)v130);
        v132 = "memchr";
        LOWORD(v136) = 259;
        v117 = llvm::Constant::getNullValue(*v115, v116);
        Select = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)a3, v104, (uint64_t *)v115, (uint64_t)v117, (uint64_t)&v132, 0);
        v119 = *(_QWORD *)a2;
        v131 = 257;
        v35 = sub_1C4773E38((uint64_t *)a3, 48, Select, v119, (uint64_t)v130);
        if (v127 >= 0x41 && v126)
          MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
        return (llvm::Value **)v35;
      }
      if (v80 == 128)
      {
        v106 = *v105 + 2008;
        goto LABEL_126;
      }
    }
    v124 = sub_1C5270984(*v105 + 2168, &v132);
    v106 = *((_QWORD *)v124 + 1);
    if (!v106)
    {
      v106 = sub_1C484358C(*v105 + 2040, 24, 3);
      v125 = (int)v132;
      *(_QWORD *)v106 = v105;
      *(_QWORD *)(v106 + 16) = 0;
      *(_QWORD *)(v106 + 8) = (v125 << 8) | 0xDu;
      *((_QWORD *)v124 + 1) = v106;
    }
    goto LABEL_126;
  }
  return (llvm::Value **)v35;
}

llvm::Value **llvm::LibCallSimplifier::optimizeMemCmpBCmpCommon(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  char *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v9;
  llvm::Type *v10;
  llvm::IRBuilderBase *v11;
  BOOL v12;
  llvm::Value **result;
  size_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int ConstantStringInfo;
  int v22;
  BOOL v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  char v29;
  char v30;
  char *v31;
  char *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  llvm::IRBuilderBase *v41;
  unsigned __int8 *v42;
  char v43;
  char v44;
  char *v45;
  char *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  _QWORD *v54;
  llvm::PointerType *v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned __int8 **v58;
  int v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  _QWORD *v63;
  uint64_t v64;
  unsigned __int8 **v65;
  int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  char v70;
  char v71;
  void *v72;
  llvm::Constant *v73;
  const llvm::DataLayout *v74;
  llvm *v75;
  llvm::Value *v76;
  uint64_t v77;
  uint64_t v78;
  llvm::Constant *v79;
  const llvm::DataLayout *v80;
  llvm *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned __int8 *v84;
  char v85;
  char v86;
  char *v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unsigned __int8 *v95;
  char v96;
  char v97;
  char *v98;
  char *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unsigned __int8 **v108;
  int v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  _QWORD *v113;
  uint64_t v114;
  unsigned __int8 **v115;
  int v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  _DWORD *v120;
  _DWORD *v121;
  int v122;
  uint64_t ***v123;
  _QWORD v124[4];
  __int16 v125;
  void *__s2;
  size_t v127;
  __int16 v128;
  unsigned __int8 *v129;
  void *__s1;
  size_t v131;
  __int16 v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v4 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v5 = *(unsigned __int8 **)v4;
  v6 = (unsigned __int8 *)*((_QWORD *)v4 + 4);
  if (*(unsigned __int8 **)v4 == v6)
    return llvm::Constant::getNullValue(*(llvm::Constant **)a2, a2);
  v9 = *((_QWORD *)v4 + 8);
  __s1 = (void *)0x100000000;
  sub_1C5FB492C((unint64_t)a2, (unsigned int *)&__s1, 2, v9, *((_QWORD *)this + 2));
  if (v9)
    v12 = *(_BYTE *)(v9 + 16) == 16;
  else
    v12 = 0;
  if (!v12)
    return 0;
  if (*(_DWORD *)(v9 + 32) <= 0x40u)
  {
    v14 = *(_QWORD *)(v9 + 24);
    if (v14)
      goto LABEL_10;
    return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v10);
  }
  v14 = **(_QWORD **)(v9 + 24);
  if (!v14)
    return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v10);
LABEL_10:
  if (v14 == 1)
  {
    v27 = **((_QWORD **)a3 + 8) + 1912;
    v28 = llvm::castToCStr((llvm *)v5, a3, v11);
    __s2 = "lhsc";
    v128 = 259;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, v27);
    v30 = v29;
    v31 = (char *)operator new(0x60uLL);
    v32 = v31;
    v33 = (unsigned __int8 *)(v31 + 32);
    *((_QWORD *)v31 + 2) = 0;
    *((_QWORD *)v31 + 3) = v31 + 32;
    v132 = 257;
    *((_QWORD *)v31 + 4) = v27;
    *((_QWORD *)v31 + 5) = 0;
    *((_WORD *)v31 + 24) = 60;
    *((_DWORD *)v31 + 13) = 1;
    *(_OWORD *)(v31 + 56) = 0u;
    *(_OWORD *)(v31 + 72) = 0u;
    *((_DWORD *)v31 + 22) = 0;
    *(_QWORD *)v31 = v28;
    *((_QWORD *)v31 + 1) = 0;
    if (v28)
    {
      v36 = *((_QWORD *)v28 + 1);
      v35 = v28 + 8;
      v34 = v36;
      *((_QWORD *)v31 + 1) = v36;
      if (v36)
        *(_QWORD *)(v34 + 16) = v31 + 8;
      *((_QWORD *)v31 + 2) = v35;
      *v35 = v31;
    }
    *((_WORD *)v31 + 25) = 2 * (v30 & 0x3F);
    v31[92] = 1;
    llvm::Value::setName((uint64_t ***)v31 + 4, (uint64_t)&__s1);
    (*(void (**)(_QWORD, unsigned __int8 *, void **, _QWORD, _QWORD))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v33, &__s2, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
    v37 = *((unsigned int *)a3 + 2);
    if (!(_DWORD)v37)
    {
LABEL_36:
      v38 = *(_QWORD *)a2;
      __s1 = "lhsv";
      v132 = 259;
      v39 = sub_1C4773E38((uint64_t *)a3, 39, v33, v38, (uint64_t)&__s1);
      v40 = **((_QWORD **)a3 + 8) + 1912;
      v42 = llvm::castToCStr((llvm *)v6, a3, v41);
      __s2 = "rhsc";
      v128 = 259;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, v40);
      v44 = v43;
      v45 = (char *)operator new(0x60uLL);
      v46 = v45;
      v47 = (unsigned __int8 *)(v45 + 32);
      *((_QWORD *)v45 + 2) = 0;
      *((_QWORD *)v45 + 3) = v45 + 32;
      v132 = 257;
      *((_QWORD *)v45 + 4) = v40;
      *((_QWORD *)v45 + 5) = 0;
      *((_WORD *)v45 + 24) = 60;
      *((_DWORD *)v45 + 13) = 1;
      *(_OWORD *)(v45 + 56) = 0u;
      *(_OWORD *)(v45 + 72) = 0u;
      *((_DWORD *)v45 + 22) = 0;
      *(_QWORD *)v45 = v42;
      *((_QWORD *)v45 + 1) = 0;
      if (v42)
      {
        v50 = *((_QWORD *)v42 + 1);
        v49 = v42 + 8;
        v48 = v50;
        *((_QWORD *)v45 + 1) = v50;
        if (v50)
          *(_QWORD *)(v48 + 16) = v45 + 8;
        *((_QWORD *)v45 + 2) = v49;
        *v49 = v45;
      }
      *((_WORD *)v45 + 25) = 2 * (v44 & 0x3F);
      v45[92] = 1;
      llvm::Value::setName((uint64_t ***)v45 + 4, (uint64_t)&__s1);
      (*(void (**)(_QWORD, unsigned __int8 *, void **, _QWORD, _QWORD))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v47, &__s2, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
      v51 = *((unsigned int *)a3 + 2);
      if (!(_DWORD)v51)
      {
LABEL_41:
        v52 = *(_QWORD *)a2;
        __s1 = "rhsv";
        v132 = 259;
        v53 = sub_1C4773E38((uint64_t *)a3, 39, v47, v52, (uint64_t)&__s1);
        __s1 = "chardiff";
        v132 = 259;
        return (llvm::Value **)sub_1C47733F8((uint64_t)a3, (uint64_t)v39, (uint64_t)v53, (uint64_t)&__s1, 0, 0);
      }
      v63 = *(_QWORD **)a3;
      v64 = *(_QWORD *)a3 + 16 * v51;
      v65 = (unsigned __int8 **)(v46 + 80);
      while (1)
      {
        v66 = *(_DWORD *)v63;
        v67 = (unsigned __int8 *)v63[1];
        if (v67)
        {
          if (!v66)
          {
            v124[0] = v63[1];
            llvm::MetadataTracking::track((uint64_t)v124, v67, 2);
            v68 = *v65;
            goto LABEL_74;
          }
        }
        else
        {
          v68 = *v65;
          if (!*v65 && (v46[55] & 0x20) == 0)
            goto LABEL_71;
          if (!v66)
          {
            v124[0] = 0;
LABEL_74:
            if (v68)
              llvm::MetadataTracking::untrack((uint64_t)(v46 + 80), v68);
            v69 = (unsigned __int8 *)v124[0];
            *v65 = (unsigned __int8 *)v124[0];
            if (v69)
              llvm::MetadataTracking::retrack((uint64_t)v124, v69, (uint64_t)(v46 + 80));
            goto LABEL_71;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v47, *(_DWORD *)v63, (llvm::MDNode *)v67);
LABEL_71:
        v63 += 2;
        if (v63 == (_QWORD *)v64)
          goto LABEL_41;
      }
    }
    v56 = *(_QWORD **)a3;
    v57 = *(_QWORD *)a3 + 16 * v37;
    v58 = (unsigned __int8 **)(v32 + 80);
    while (1)
    {
      v59 = *(_DWORD *)v56;
      v60 = (unsigned __int8 *)v56[1];
      if (v60)
      {
        if (!v59)
        {
          v124[0] = v56[1];
          llvm::MetadataTracking::track((uint64_t)v124, v60, 2);
          v61 = *v58;
          goto LABEL_59;
        }
      }
      else
      {
        v61 = *v58;
        if (!*v58 && (v32[55] & 0x20) == 0)
          goto LABEL_56;
        if (!v59)
        {
          v124[0] = 0;
LABEL_59:
          if (v61)
            llvm::MetadataTracking::untrack((uint64_t)(v32 + 80), v61);
          v62 = (unsigned __int8 *)v124[0];
          *v58 = (unsigned __int8 *)v124[0];
          if (v62)
            llvm::MetadataTracking::retrack((uint64_t)v124, v62, (uint64_t)(v32 + 80));
          goto LABEL_56;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v33, *(_DWORD *)v56, (llvm::MDNode *)v60);
LABEL_56:
      v56 += 2;
      if (v56 == (_QWORD *)v57)
        goto LABEL_36;
    }
  }
  v15 = *((_QWORD *)this + 2);
  v16 = 8 * v14;
  v17 = *(_QWORD *)(v15 + 32);
  v18 = *(char **)(v15 + 40);
  v19 = &v18[v17];
  if (8 * v14 <= 0xFF)
  {
    v20 = (char *)memchr(*(void **)(v15 + 32), (char)v16, *(_QWORD *)(v15 + 40));
    if (v20)
      v19 = v20;
  }
  if (&v19[-v17] != v18 && llvm::isOnlyUsedInZeroEqualityComparison(a2, v10))
  {
    v54 = **(_QWORD ***)a2;
    LODWORD(__s1) = 8 * v14;
    if (v16 <= 63)
    {
      switch(v16)
      {
        case 32:
          v55 = (llvm::PointerType *)(*v54 + 1960);
          goto LABEL_80;
        case 16:
          v55 = (llvm::PointerType *)(*v54 + 1936);
          goto LABEL_80;
        case 8:
          v55 = (llvm::PointerType *)(*v54 + 1912);
          goto LABEL_80;
      }
    }
    else
    {
      if (v16 == 64)
      {
        v55 = (llvm::PointerType *)(*v54 + 1984);
        goto LABEL_80;
      }
      if (v16 == 128)
      {
        v55 = (llvm::PointerType *)(*v54 + 2008);
        goto LABEL_80;
      }
    }
    v120 = sub_1C5270984(*v54 + 2168, &__s1);
    v55 = (llvm::PointerType *)*((_QWORD *)v120 + 1);
    if (!v55)
    {
      v121 = v120;
      v55 = (llvm::PointerType *)sub_1C484358C(*v54 + 2040, 24, 3);
      v122 = (int)__s1;
      *(_QWORD *)v55 = v54;
      *((_QWORD *)v55 + 2) = 0;
      *((_QWORD *)v55 + 1) = (v122 << 8) | 0xDu;
      *((_QWORD *)v121 + 1) = v55;
    }
LABEL_80:
    llvm::DataLayout::getAlignment(v15, (uint64_t)v55);
    v71 = v70;
    v72 = 0;
    if (v5 && v5[16] <= 0x14u)
    {
      v73 = (llvm::Constant *)llvm::PointerType::get(v55, 0);
      v75 = (llvm *)v5;
      if (*(llvm::Constant **)v5 != v73)
        v75 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v5, v73, 0);
      v72 = llvm::ConstantFoldLoadFromConstPtr(v75, v55, (llvm::Type *)v15, v74);
    }
    v76 = 0;
    v77 = 1 << v71;
    if (v6)
    {
      v78 = (uint64_t)v72;
      if (v6[16] <= 0x14u)
      {
        v79 = (llvm::Constant *)llvm::PointerType::get(v55, 0);
        v81 = (llvm *)v6;
        if (*(llvm::Constant **)v6 != v79)
          v81 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v6, v79, 0);
        v76 = (llvm::Value *)llvm::ConstantFoldLoadFromConstPtr(v81, v55, (llvm::Type *)v15, v80);
      }
    }
    else
    {
      v78 = (uint64_t)v72;
    }
    if ((v78
       || 1 << llvm::getOrEnforceKnownAlignment((uint64_t)v5, 0, (unsigned __int8 *)v15, (uint64_t)a2, 0, 0) >= (unint64_t)v77)
      && (v76
       || 1 << llvm::getOrEnforceKnownAlignment((uint64_t)v6, 0, (unsigned __int8 *)v15, (uint64_t)a2, 0, 0) >= (unint64_t)v77))
    {
      if (v78)
        goto LABEL_103;
      v82 = *(_DWORD *)(*(_QWORD *)v5 + 8);
      if ((v82 & 0xFE) == 0x12)
        v82 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v5 + 16) + 8);
      v83 = llvm::PointerType::get(v55, (llvm::Type *)(v82 >> 8));
      v125 = 257;
      v84 = sub_1C4773E38((uint64_t *)a3, 49, v5, v83, (uint64_t)v124);
      __s2 = "lhsv";
      v128 = 259;
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, (uint64_t)v55);
      v86 = v85;
      v87 = (char *)operator new(0x60uLL);
      v88 = v87;
      *((_QWORD *)v87 + 2) = 0;
      *((_QWORD *)v87 + 3) = v87 + 32;
      v123 = (uint64_t ***)(v87 + 32);
      v132 = 257;
      *((_QWORD *)v87 + 4) = v55;
      *((_QWORD *)v87 + 5) = 0;
      *((_WORD *)v87 + 24) = 60;
      *((_DWORD *)v87 + 13) = 1;
      *(_OWORD *)(v87 + 56) = 0u;
      *(_OWORD *)(v87 + 72) = 0u;
      *((_DWORD *)v87 + 22) = 0;
      *(_QWORD *)v87 = v84;
      *((_QWORD *)v87 + 1) = 0;
      if (v84)
      {
        v91 = *((_QWORD *)v84 + 1);
        v90 = v84 + 8;
        v89 = v91;
        *((_QWORD *)v87 + 1) = v91;
        if (v91)
          *(_QWORD *)(v89 + 16) = v87 + 8;
        *((_QWORD *)v87 + 2) = v90;
        *v90 = v87;
      }
      *((_WORD *)v87 + 25) = 2 * (v86 & 0x3F);
      v87[92] = 1;
      v78 = (uint64_t)(v87 + 32);
      llvm::Value::setName(v123, (uint64_t)&__s1);
      (*(void (**)(_QWORD, uint64_t ***, void **, _QWORD, _QWORD))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v123, &__s2, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
      v92 = *((unsigned int *)a3 + 2);
      if (!(_DWORD)v92)
      {
LABEL_103:
        if (v76)
          goto LABEL_111;
        v93 = *(_DWORD *)(*(_QWORD *)v6 + 8);
        if ((v93 & 0xFE) == 0x12)
          v93 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v6 + 16) + 8);
        v94 = llvm::PointerType::get(v55, (llvm::Type *)(v93 >> 8));
        v125 = 257;
        v95 = sub_1C4773E38((uint64_t *)a3, 49, v6, v94, (uint64_t)v124);
        __s2 = "rhsv";
        v128 = 259;
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, (uint64_t)v55);
        v97 = v96;
        v98 = (char *)operator new(0x60uLL);
        v99 = v98;
        v76 = (llvm::Value *)(v98 + 32);
        *((_QWORD *)v98 + 2) = 0;
        *((_QWORD *)v98 + 3) = v98 + 32;
        v132 = 257;
        *((_QWORD *)v98 + 4) = v55;
        *((_QWORD *)v98 + 5) = 0;
        *((_WORD *)v98 + 24) = 60;
        *((_DWORD *)v98 + 13) = 1;
        *(_OWORD *)(v98 + 56) = 0u;
        *(_OWORD *)(v98 + 72) = 0u;
        *((_DWORD *)v98 + 22) = 0;
        *(_QWORD *)v98 = v95;
        *((_QWORD *)v98 + 1) = 0;
        if (v95)
        {
          v102 = *((_QWORD *)v95 + 1);
          v101 = v95 + 8;
          v100 = v102;
          *((_QWORD *)v98 + 1) = v102;
          if (v102)
            *(_QWORD *)(v100 + 16) = v98 + 8;
          *((_QWORD *)v98 + 2) = v101;
          *v101 = v98;
        }
        *((_WORD *)v98 + 25) = 2 * (v97 & 0x3F);
        v98[92] = 1;
        llvm::Value::setName((uint64_t ***)v98 + 4, (uint64_t)&__s1);
        (*(void (**)(_QWORD, llvm::Value *, void **, _QWORD, _QWORD))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v76, &__s2, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
        v103 = *((unsigned int *)a3 + 2);
        if (!(_DWORD)v103)
        {
LABEL_111:
          v132 = 257;
          v104 = (unsigned __int8 *)sub_1C4774B48((uint64_t)a3, 33, v78, (uint64_t)v76, (uint64_t)&__s1);
          v105 = *(_QWORD *)a2;
          __s2 = "memcmp";
          v128 = 259;
          return (llvm::Value **)sub_1C4773E38((uint64_t *)a3, 39, v104, v105, (uint64_t)&__s2);
        }
        v113 = *(_QWORD **)a3;
        v114 = *(_QWORD *)a3 + 16 * v103;
        v115 = (unsigned __int8 **)(v99 + 80);
        while (1)
        {
          v116 = *(_DWORD *)v113;
          v117 = (unsigned __int8 *)v113[1];
          if (v117)
          {
            if (!v116)
            {
              v129 = (unsigned __int8 *)v113[1];
              llvm::MetadataTracking::track((uint64_t)&v129, v117, 2);
              v118 = *v115;
              goto LABEL_139;
            }
          }
          else
          {
            v118 = *v115;
            if (!*v115 && (v99[55] & 0x20) == 0)
              goto LABEL_136;
            if (!v116)
            {
              v129 = 0;
LABEL_139:
              if (v118)
                llvm::MetadataTracking::untrack((uint64_t)(v99 + 80), v118);
              v119 = v129;
              *v115 = v129;
              if (v119)
                llvm::MetadataTracking::retrack((uint64_t)&v129, v119, (uint64_t)(v99 + 80));
              goto LABEL_136;
            }
          }
          llvm::Value::setMetadata(v76, *(_DWORD *)v113, (llvm::MDNode *)v117);
LABEL_136:
          v113 += 2;
          if (v113 == (_QWORD *)v114)
            goto LABEL_111;
        }
      }
      v106 = *(_QWORD **)a3;
      v107 = *(_QWORD *)a3 + 16 * v92;
      v108 = (unsigned __int8 **)(v88 + 80);
      while (1)
      {
        v109 = *(_DWORD *)v106;
        v110 = (unsigned __int8 *)v106[1];
        if (v110)
        {
          if (!v109)
          {
            v129 = (unsigned __int8 *)v106[1];
            llvm::MetadataTracking::track((uint64_t)&v129, v110, 2);
            v111 = *v108;
            goto LABEL_123;
          }
        }
        else
        {
          v111 = *v108;
          if (!*v108 && (v88[55] & 0x20) == 0)
            goto LABEL_120;
          if (!v109)
          {
            v129 = 0;
LABEL_123:
            if (v111)
              llvm::MetadataTracking::untrack((uint64_t)(v88 + 80), v111);
            v112 = v129;
            *v108 = v129;
            if (v112)
              llvm::MetadataTracking::retrack((uint64_t)&v129, v112, (uint64_t)(v88 + 80));
            v78 = (uint64_t)v123;
            goto LABEL_120;
          }
        }
        v78 = (uint64_t)v123;
        llvm::Value::setMetadata((llvm::Value *)v123, *(_DWORD *)v106, (llvm::MDNode *)v110);
LABEL_120:
        v106 += 2;
        if (v106 == (_QWORD *)v107)
          goto LABEL_103;
      }
    }
  }
  __s1 = 0;
  v131 = 0;
  __s2 = 0;
  v127 = 0;
  ConstantStringInfo = llvm::getConstantStringInfo((llvm *)v5, (const llvm::Value *)&__s1, 0, 1);
  result = 0;
  if (ConstantStringInfo)
  {
    v22 = llvm::getConstantStringInfo((llvm *)v6, (const llvm::Value *)&__s2, 0, 1);
    result = 0;
    v23 = v22 && v131 >= v14;
    if (v23 && v127 >= v14)
    {
      v25 = memcmp(__s1, __s2, v14);
      if (v25 < 0)
        v26 = -1;
      else
        v26 = v25 != 0;
      return llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, v26, 0);
    }
  }
  return result;
}

unint64_t sub_1C5FB492C(unint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9;
  unint64_t *v10;
  unint64_t result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;

  v9 = *(unsigned __int8 *)(a4 + 16);
  if (a4 && v9 == 16)
  {
    sub_1C5FAFFE4(a1, a2, a3);
    v10 = (unint64_t *)(a4 + 24);
    if (*(_DWORD *)(a4 + 32) >= 0x41u)
      v10 = (unint64_t *)*v10;
    return sub_1C5FB0110(a1, (int *)a2, a3, *v10);
  }
  else
  {
    if (!a4 || v9 < 0x1C || (v12 = a4, !*(_QWORD *)(a4 + 40)))
      v12 = 0;
    v20 = a5;
    v21 = 0;
    v23 = 0;
    v24 = 0;
    v22 = v12;
    v25 = 1;
    result = sub_1C4F84D74(a4, 0, (uint64_t)&v20);
    if ((_DWORD)result)
    {
      sub_1C5FAFFE4(a1, a2, a3);
      v18 = 0;
      v19 = 0;
      v21 = &v19;
      v22 = 0;
      v23 = &v18;
      v24 = 0;
      result = (unint64_t)sub_1C63BA9B4((uint64_t)&v20, a4);
      if ((_DWORD)result)
      {
        v13 = (unint64_t *)v19;
        if (*(_DWORD *)(v19 + 8) >= 0x41u)
          v13 = *(unint64_t **)v19;
        v14 = *v13;
        v15 = (unint64_t *)v18;
        if (*(_DWORD *)(v18 + 8) >= 0x41u)
          v15 = *(unint64_t **)v18;
        v16 = *v15;
        if (v16 >= v14)
          v17 = v14;
        else
          v17 = v16;
        return sub_1C5FB0110(a1, (int *)a2, a3, v17);
      }
    }
  }
  return result;
}

uint64_t llvm::LibCallSimplifier::optimizeMemCpy(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t *v5;
  uint64_t v6;
  llvm::Value **v7;
  llvm::Value *MemTransferInst;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17[2];
  _QWORD *v18[4];

  v18[3] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8];
  v17[0] = 0x100000000;
  sub_1C5FB492C((unint64_t)a2, (unsigned int *)v17, 2, (uint64_t)v5, *((_QWORD *)this + 2));
  v6 = *((_QWORD *)a2 - 4);
  if (v6 && !*(_BYTE *)(v6 + 16) && *(_QWORD *)(v6 + 24) == *((_QWORD *)a2 + 9) && (*(_BYTE *)(v6 + 33) & 0x20) != 0)
    return 0;
  v7 = (llvm::Value **)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, *v7, 256, v7[4], 256, v5, 0, 0, 0, 0, 0);
  v9 = *((_QWORD *)a2 + 8);
  *((_QWORD *)MemTransferInst + 8) = v9;
  v10 = (uint64_t *)((char *)MemTransferInst + 64);
  v11 = *(uint64_t ***)MemTransferInst;
  llvm::AttributeFuncs::typeIncompatible(*(_QWORD *)MemTransferInst, 3, v17);
  v12 = *v11;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 8) >= 2u)
      v9 = *(_QWORD *)(v9 + 48);
    else
      v9 = 0;
  }
  v16 = v9;
  v13 = llvm::AttributeSet::removeAttributes(&v16, v12, (uint64_t)v17);
  if (v9 == v13)
    v14 = *v10;
  else
    v14 = llvm::AttributeList::setAttributesAtIndex(v10, v12, 0, v13);
  *((_QWORD *)MemTransferInst + 8) = v14;
  sub_1C5010E9C((uint64_t)v18, v18[1]);
  if (*((_BYTE *)MemTransferInst + 16) == 84)
    *((_WORD *)MemTransferInst + 9) = *((_WORD *)MemTransferInst + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
  return *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
}

llvm::Value **llvm::LibCallSimplifier::optimizeMemCCpy(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  char *v5;
  llvm::Value *v6;
  llvm *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  llvm::Value **result;
  llvm::Type *v12;
  int ConstantStringInfo;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  size_t v17;
  _BYTE *v18;
  _BYTE *v19;
  const llvm::APInt *v20;
  unint64_t v21;
  size_t *v23;
  llvm::Value *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  llvm::ConstantInt *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  llvm::Value *MemTransferInst;
  llvm::Type *v35;
  llvm::GetElementPtrInst *v36;
  unint64_t v37;
  unsigned int v38;
  __int16 v39;
  void *__s;
  size_t __n;

  v5 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v6 = *(llvm::Value **)v5;
  v7 = (llvm *)*((_QWORD *)v5 + 4);
  if (*(_BYTE *)(*((_QWORD *)v5 + 8) + 16) == 16)
    v8 = *((_QWORD *)v5 + 8);
  else
    v8 = 0;
  v9 = *((_QWORD *)v5 + 12);
  if (*(_BYTE *)(v9 + 16) == 16)
    v10 = (unint64_t *)v9;
  else
    v10 = 0;
  __s = 0;
  __n = 0;
  if (!*((_QWORD *)a2 + 1) && v6 == v7)
    return (llvm::Value **)v6;
  if (!v10)
    return 0;
  if (llvm::Constant::isNullValue((llvm::Constant *)v10))
    return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v12);
  ConstantStringInfo = llvm::getConstantStringInfo(v7, (const llvm::Value *)&__s, 0, 0);
  result = 0;
  if (ConstantStringInfo)
    v14 = v8 == 0;
  else
    v14 = 1;
  if (!v14)
  {
    v15 = *(_DWORD *)(v8 + 32);
    if (v15 > 0x40)
      v16 = **(_QWORD **)(v8 + 24);
    else
      v16 = (uint64_t)(*(_QWORD *)(v8 + 24) << -(char)v15) >> -(char)v15;
    v17 = __n;
    if (__n)
    {
      v18 = __s;
      v19 = memchr(__s, (char)v16, __n);
      v21 = v19 - v18;
      if (v19 && v21 != -1)
      {
        v25 = *v10;
        v26 = v10 + 3;
        v27 = v10 + 3;
        if (*((_DWORD *)v10 + 8) >= 0x41u)
          v27 = (unint64_t *)*v26;
        v28 = *v27;
        if (v28 >= v21 + 1)
          v29 = v21 + 1;
        else
          v29 = v28;
        v30 = *(llvm::ConstantInt **)v25;
        v31 = *(unsigned int *)(v25 + 8);
        v38 = v31 >> 8;
        if (v31 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v37, v29, 0);
        }
        else
        {
          if (v31 <= 0xFF)
            v32 = 0;
          else
            v32 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v31);
          v37 = v32 & v29;
        }
        v33 = (uint64_t *)llvm::ConstantInt::get(v30, (llvm::LLVMContext *)&v37, v20);
        if (v38 >= 0x41 && v37)
          MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
        MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v6, 256, v7, 256, v33, 0, 0, 0, 0, 0);
        if (MemTransferInst && *((_BYTE *)MemTransferInst + 16) == 84)
          *((_WORD *)MemTransferInst + 9) = *((_WORD *)MemTransferInst + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
        if (*((_DWORD *)v10 + 8) >= 0x41u)
          v26 = (unint64_t *)*v26;
        if (v21 >= *v26)
          return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v35);
        v36 = (llvm::GetElementPtrInst *)(**((_QWORD **)a3 + 8) + 1912);
        v39 = 257;
        return (llvm::Value **)sub_1C5098FF4((uint64_t *)a3, v36, (uint64_t *)v6, (uint64_t)v33, (uint64_t)&v37);
      }
    }
    v23 = v10 + 3;
    if (*((_DWORD *)v10 + 8) >= 0x41u)
      v23 = (size_t *)*v23;
    if (*v23 <= v17)
    {
      v24 = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v6, 256, v7, 256, ((uint64_t **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[12], 0, 0, 0, 0, 0);
      if (v24 && *((_BYTE *)v24 + 16) == 84)
        *((_WORD *)v24 + 9) = *((_WORD *)v24 + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
      return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v12);
    }
    return 0;
  }
  return result;
}

uint64_t ***llvm::LibCallSimplifier::optimizeMemPCpy(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  char *v5;
  llvm::Value *v6;
  uint64_t *v7;
  llvm::Value *MemTransferInst;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::GetElementPtrInst *v15;
  uint64_t v17[2];
  _QWORD *v18[2];
  __int16 v19;
  uint64_t v20;

  v5 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v6 = *(llvm::Value **)v5;
  v7 = (uint64_t *)*((_QWORD *)v5 + 8);
  MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, *(llvm::Value **)v5, 256, *((llvm::Value **)v5 + 4), 256, v7, 0, 0, 0, 0, 0);
  v9 = *((_QWORD *)a2 + 8);
  *((_QWORD *)MemTransferInst + 8) = v9;
  v10 = (uint64_t *)((char *)MemTransferInst + 64);
  v11 = *(uint64_t ***)MemTransferInst;
  llvm::AttributeFuncs::typeIncompatible(*(_QWORD *)MemTransferInst, 3, v17);
  v12 = *v11;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 8) >= 2u)
      v9 = *(_QWORD *)(v9 + 48);
    else
      v9 = 0;
  }
  v20 = v9;
  v13 = llvm::AttributeSet::removeAttributes(&v20, v12, (uint64_t)v17);
  if (v9 == v13)
    v14 = *v10;
  else
    v14 = llvm::AttributeList::setAttributesAtIndex(v10, v12, 0, v13);
  *((_QWORD *)MemTransferInst + 8) = v14;
  sub_1C5010E9C((uint64_t)v18, v18[1]);
  if (*((_BYTE *)MemTransferInst + 16) == 84)
    *((_WORD *)MemTransferInst + 9) = *((_WORD *)MemTransferInst + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
  v15 = (llvm::GetElementPtrInst *)(**((_QWORD **)a3 + 8) + 1912);
  v19 = 257;
  return sub_1C5098FF4((uint64_t *)a3, v15, (uint64_t *)v6, (uint64_t)v7, (uint64_t)v17);
}

uint64_t llvm::LibCallSimplifier::optimizeMemMove(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t *v5;
  uint64_t v6;
  llvm::Value **v8;
  llvm::Value *MemMove;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[2];
  _QWORD *v19[4];

  v19[3] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8];
  v18[0] = 0x100000000;
  sub_1C5FB492C((unint64_t)a2, (unsigned int *)v18, 2, (uint64_t)v5, *((_QWORD *)this + 2));
  v6 = *((_QWORD *)a2 - 4);
  if (v6 && !*(_BYTE *)(v6 + 16) && *(_QWORD *)(v6 + 24) == *((_QWORD *)a2 + 9) && (*(_BYTE *)(v6 + 33) & 0x20) != 0)
    return 0;
  v8 = (llvm::Value **)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  MemMove = llvm::IRBuilderBase::CreateMemMove((uint64_t)a3, *v8, 256, v8[4], 256, v5, 0, 0, 0, 0);
  v10 = *((_QWORD *)a2 + 8);
  *((_QWORD *)MemMove + 8) = v10;
  v11 = (uint64_t *)((char *)MemMove + 64);
  v12 = *(uint64_t ***)MemMove;
  llvm::AttributeFuncs::typeIncompatible(*(_QWORD *)MemMove, 3, v18);
  v13 = 0;
  v14 = *v12;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 8) >= 2u)
      v13 = *(_QWORD *)(v10 + 48);
    else
      v13 = 0;
  }
  v17 = v13;
  v15 = llvm::AttributeSet::removeAttributes(&v17, v14, (uint64_t)v18);
  if (v13 == v15)
    v16 = *v11;
  else
    v16 = llvm::AttributeList::setAttributesAtIndex(v11, v14, 0, v15);
  *((_QWORD *)MemMove + 8) = v16;
  sub_1C5010E9C((uint64_t)v19, v19[1]);
  if (*((_BYTE *)MemMove + 16) == 84)
    *((_WORD *)MemMove + 9) = *((_WORD *)MemMove + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
  return *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
}

uint64_t llvm::LibCallSimplifier::optimizeMemSet(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  llvm::Value *MemSet;
  uint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19[2];
  _QWORD *v20[2];
  __int16 v21;
  uint64_t v22;

  v5 = (uint64_t *)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8];
  LODWORD(v19[0]) = 0;
  sub_1C5FB492C((unint64_t)a2, (unsigned int *)v19, 1, (uint64_t)v5, *((_QWORD *)this + 2));
  v6 = *((_QWORD *)a2 - 4);
  if (v6 && !*(_BYTE *)(v6 + 16) && *(_QWORD *)(v6 + 24) == *((_QWORD *)a2 + 9) && (*(_BYTE *)(v6 + 33) & 0x20) != 0)
    return 0;
  v7 = (unsigned __int8 *)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  v8 = **((_QWORD **)a3 + 8) + 1912;
  v21 = 257;
  v9 = sub_1C4D8D514((uint64_t *)a3, v7, v8, 0, (uint64_t)v19);
  MemSet = llvm::IRBuilderBase::CreateMemSet((uint64_t)a3, *((llvm::Value **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), (uint64_t)v9, v5, 256, 0, 0, 0, 0);
  v11 = *((_QWORD *)a2 + 8);
  *((_QWORD *)MemSet + 8) = v11;
  v12 = (uint64_t *)((char *)MemSet + 64);
  v13 = *(uint64_t ***)MemSet;
  llvm::AttributeFuncs::typeIncompatible(*(_QWORD *)MemSet, 3, v19);
  v14 = 0;
  v15 = *v13;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 8) >= 2u)
      v14 = *(_QWORD *)(v11 + 48);
    else
      v14 = 0;
  }
  v22 = v14;
  v16 = llvm::AttributeSet::removeAttributes(&v22, v15, (uint64_t)v19);
  if (v14 == v16)
    v17 = *v12;
  else
    v17 = llvm::AttributeList::setAttributesAtIndex(v12, v15, 0, v16);
  *((_QWORD *)MemSet + 8) = v17;
  sub_1C5010E9C((uint64_t)v20, v20[1]);
  if (*((_BYTE *)MemSet + 16) == 84)
    *((_WORD *)MemSet + 9) = *((_WORD *)MemSet + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
  return *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
}

uint64_t llvm::LibCallSimplifier::replacePowWithExp(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t ***v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ****v17;
  uint64_t ***v18;
  int v19;
  int v20;
  uint64_t ***v21;
  char *v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  llvm::ConstantFP *v28;
  unsigned __int8 *v29;
  llvm::Type *v30;
  uint64_t *v31;
  uint64_t ***v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  llvm::APFloat *v37;
  int v38;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  llvm::APFloat *v49;
  uint64_t ***v50;
  _QWORD *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  llvm::Type *v55;
  int v56;
  uint64_t v57;
  int v58;
  int64_t v59;
  uint8x8_t v60;
  int v61;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  double v66;
  llvm::APFloatBase *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t ***v79;
  uint64_t v80;
  uint64_t Declaration;
  uint64_t **v82;
  uint64_t v83;
  uint64_t v84;
  llvm::ConstantFP **v86;
  int v87;
  float v88;
  llvm::Type *v89;
  double v90;
  double v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t **v96;
  llvm::APFloat *v97;
  llvm::APFloat *v98;
  uint64_t *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unsigned int v105;
  uint64_t ***v106;
  llvm::APFloat *v107;
  char v108;
  llvm::ConstantFP *v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  int v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  int v122;
  char v123;
  __int16 v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v7 = *v6;
  v8 = v6[4];
  v9 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
  v109 = *(llvm::ConstantFP **)a2;
  v110 = 0;
  v108 = 0;
  if (!v7)
    goto LABEL_21;
  if (*(_BYTE *)(v7 + 16) != 84)
    goto LABEL_21;
  v10 = *(_QWORD *)(v7 + 8);
  if (!v10)
    goto LABEL_21;
  if (*(_QWORD *)(v10 + 8))
    goto LABEL_21;
  if (*(unsigned __int8 *)(v7 + 17) < 0xFEu)
    goto LABEL_21;
  if (*((unsigned __int8 *)a2 + 17) < 0xFEu)
    goto LABEL_21;
  LODWORD(v107) = 0;
  v11 = *(uint64_t ****)(v7 - 32);
  if (!v11 || *((_BYTE *)v11 + 16) || v11[3] != *(uint64_t ***)(v7 + 72))
    goto LABEL_21;
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  if ((*((_BYTE *)v11 + 23) & 0x10) == 0)
  {
    v23 = 0;
    v22 = &byte_1C871356D;
    goto LABEL_19;
  }
  v13 = ***v11;
  v14 = *(_QWORD *)(v13 + 152);
  v15 = *(unsigned int *)(v13 + 168);
  if (!(_DWORD)v15)
    goto LABEL_17;
  LODWORD(v16) = (v15 - 1) & ((v11 >> 4) ^ (v11 >> 9));
  v17 = (uint64_t ****)(v14 + 16 * v16);
  v18 = *v17;
  if (*v17 != v11)
  {
    v19 = 1;
    while (v18 != (uint64_t ***)-4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v15 - 1);
      v18 = *(uint64_t ****)(v14 + 16 * v16);
      if (v18 == v11)
      {
        v17 = (uint64_t ****)(v14 + 16 * v16);
        goto LABEL_18;
      }
    }
LABEL_17:
    v17 = (uint64_t ****)(v14 + 16 * v15);
  }
LABEL_18:
  v21 = v17[1];
  v24 = (size_t)*v21;
  v22 = (char *)(v21 + 2);
  v23 = v24;
LABEL_19:
  v25 = *v12;
  if (llvm::TargetLibraryInfoImpl::getLibFunc(*v12, v22, v23, &v107)
    && ((*(_QWORD *)(v12[1] + (((unint64_t)v107 >> 3) & 0x1FFFFFF8)) >> (char)v107) & 1) == 0
    && ((*(unsigned __int8 *)(v25 + ((unint64_t)v107 >> 2)) >> (2 * (v107 & 3))) & 3) != 0)
  {
    v71 = (_DWORD)v107 - 203;
    if (((_DWORD)v107 - 203) <= 8 && ((0x1F1u >> ((_BYTE)v107 + 53)) & 1) != 0)
    {
      v72 = dword_1C86767B4[v71];
      v105 = dword_1C86767D8[v71];
      v73 = dword_1C86767FC[v71];
      v74 = dword_1C8676820[v71];
      v75 = sub_1C56EAC88(v12, v72);
      v77 = v76;
      v78 = *(uint64_t **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
      v119 = (uint64_t)"mul";
      v124 = 259;
      v79 = (uint64_t ***)sub_1C4772428((uint64_t)a3, v78, v8, (uint64_t)&v119, 0);
      v114 = (uint64_t)v79;
      v80 = *(_QWORD *)(v7 + 64);
      if (v80 && (*(_BYTE *)(v80 + 17) & 0x10) != 0
        || ((LODWORD(v119) = 7, !sub_1C53E4BBC(v7, (__int32 *)&v119, 1uLL))
         || (v103 = *(_QWORD *)(v7 - 32)) != 0
         && !*(_BYTE *)(v103 + 16)
         && *(_QWORD *)(v103 + 24) == *(_QWORD *)(v7 + 72)
         && *(_DWORD *)(v103 + 36) == 7)
        && llvm::CallBase::hasFnAttrOnCalledFunction(v7, 44))
      {
        Declaration = llvm::Intrinsic::getDeclaration(v9, v74, (uint64_t *)&v109, 1);
        if (Declaration)
          v82 = *(uint64_t ***)(Declaration + 24);
        else
          v82 = 0;
        v124 = 261;
        v119 = (uint64_t)v75;
        v120 = v77;
        v84 = sub_1C4774778((uint64_t *)a3, v82, Declaration, &v114, 1, (uint64_t)&v119, 0);
      }
      else
      {
        v104 = (_QWORD *)*((_QWORD *)this + 3);
        v111 = *(_QWORD *)(v7 + 64);
        v84 = llvm::emitUnaryFloatFnCall(v79, v104, v72, v105, v73, (uint64_t)a3, (uint64_t *)&v111);
      }
      v26 = v84;
      (*((void (**)(_QWORD, uint64_t, uint64_t))this + 8))(*((_QWORD *)this + 9), v7, v84);
      (*((void (**)(_QWORD, uint64_t))this + 10))(*((_QWORD *)this + 11), v7);
      return v26;
    }
    return 0;
  }
LABEL_21:
  v107 = 0;
  v119 = (uint64_t)&v107;
  v120 = 0;
  v26 = 0;
  if (!sub_1C4E7A604((uint64_t)&v119, (unsigned __int8 *)v7))
    return v26;
  v119 = 0x4000000000000000;
  if (sub_1C4E7BE28((const llvm::APInt **)&v119, (unsigned __int8 *)v7)
    && *(unsigned __int8 *)(v8 + 16) - 71 <= 1)
  {
    v27 = (_QWORD *)*((_QWORD *)this + 3);
    v28 = v109;
    if (llvm::hasFloatFn(v27, (uint64_t)v109, 0x128u, 0x129u, 0x12Au))
    {
      v29 = sub_1C5FB5F90(v8, (uint64_t *)a3, *(_DWORD *)(*v27 + 148));
      v28 = v109;
      if (v29)
      {
        v31 = (uint64_t *)v29;
        v32 = (uint64_t ***)llvm::ConstantFP::get((llvm::ConstantFP **)v109, v30, 1.0);
        v33 = llvm::emitBinaryFloatFnCall(v32, v31, *((uint64_t **)this + 3), 0x128u, 0x129u, 0x12Au, (uint64_t)a3, &v110);
        goto LABEL_136;
      }
    }
  }
  else
  {
    v28 = v109;
  }
  if (!llvm::hasFloatFn(*((_QWORD **)this + 3), (uint64_t)v28, 0xCFu, 0xD0u, 0xD1u))
  {
LABEL_29:
    v119 = 0x4024000000000000;
    if (sub_1C4E7BE28((const llvm::APInt **)&v119, (unsigned __int8 *)v7)
      && (v34 = (_QWORD *)*((_QWORD *)this + 3), llvm::hasFloatFn(v34, (uint64_t)v109, 0xCCu, 0xCDu, 0xCEu)))
    {
      v50 = (uint64_t ***)v8;
      v51 = v34;
      v52 = 204;
      v53 = 205;
      v54 = 206;
    }
    else
    {
      if ((~*((unsigned __int8 *)a2 + 17) & 0x84) != 0)
        return 0;
      if (*((_UNKNOWN **)v107 + 1) == &unk_1C866F1C0)
      {
        v35 = *(_BYTE *)(*((_QWORD *)v107 + 2) + 28);
        if ((v35 & 7u) <= 3 && (v35 & 7) != 2)
          return 0;
      }
      else
      {
        v35 = *((_BYTE *)v107 + 28);
        if ((v35 & 7u) <= 3 && (v35 & 7) != 2)
          return 0;
      }
      if ((v35 & 8) != 0)
        return 0;
      v86 = (llvm::ConstantFP **)v109;
      v87 = *((unsigned __int8 *)v109 + 8);
      if (v87 == 3)
      {
        v91 = llvm::APFloat::convertToDouble(v107);
        v90 = log2(v91);
      }
      else
      {
        if (v87 != 2)
          return 0;
        v88 = llvm::APFloat::convertToFloat(v107);
        v90 = log2f(v88);
      }
      v92 = (uint64_t *)llvm::ConstantFP::get(v86, v89, v90);
      if (!v92)
        return 0;
      v119 = (uint64_t)"mul";
      v124 = 259;
      v93 = sub_1C4772428((uint64_t)a3, v92, v8, (uint64_t)&v119, 0);
      v114 = v93;
      v94 = *((_QWORD *)a2 + 8);
      if (v94 && (*(_BYTE *)(v94 + 17) & 0x10) != 0
        || ((LODWORD(v119) = 7, !sub_1C53E4BBC((uint64_t)a2, (__int32 *)&v119, 1uLL))
         || (v100 = *((_QWORD *)a2 - 4)) != 0
         && !*(_BYTE *)(v100 + 16)
         && *(_QWORD *)(v100 + 24) == *((_QWORD *)a2 + 9)
         && *(_DWORD *)(v100 + 36) == 7)
        && llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44))
      {
        v95 = llvm::Intrinsic::getDeclaration(v9, 76, (uint64_t *)&v109, 1);
        if (v95)
          v96 = *(uint64_t ***)(v95 + 24);
        else
          v96 = 0;
        v119 = (uint64_t)"exp2";
        v124 = 259;
        v33 = sub_1C4774778((uint64_t *)a3, v96, v95, &v114, 1, (uint64_t)&v119, 0);
LABEL_136:
        v26 = v33;
        if (v33 && *(_BYTE *)(v33 + 16) == 84)
          *(_WORD *)(v33 + 18) = *(_WORD *)(v33 + 18) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
        return v26;
      }
      v101 = (_QWORD *)*((_QWORD *)this + 3);
      if (!llvm::hasFloatFn(v101, (uint64_t)v109, 0xCFu, 0xD0u, 0xD1u))
        return 0;
      v50 = (uint64_t ***)v93;
      v51 = v101;
      v52 = 207;
      v53 = 208;
      v54 = 209;
    }
    v33 = llvm::emitUnaryFloatFnCall(v50, v51, v52, v53, v54, (uint64_t)a3, &v110);
    goto LABEL_136;
  }
  v112 = 64;
  v111 = 0x3FF0000000000000;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v119, (const llvm::APInt **)&v111);
  v115 = v119;
  v116 = (uint64_t *)v120;
  v117 = (int)v121;
  v118 = v118 & 0xF0 | BYTE4(v121) & 0xF;
  llvm::APFloat::convert((uint64_t)&v114, *((void **)v107 + 1), 0, &v108);
  v37 = v107;
  if ((_UNKNOWN *)v115 == &unk_1C866F1C0)
  {
    v97 = v107;
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v120, (const llvm::detail::DoubleAPFloat *)&v115);
    v37 = v97;
  }
  else
  {
    v120 = v115;
    if ((*(_DWORD *)(v115 + 8) + 64) >= 0x80)
    {
      v98 = v107;
      v99 = (uint64_t *)operator new[]();
      v37 = v98;
      v121 = v99;
    }
    v38 = v118 & 7;
    v123 = v123 & 0xF0 | v118 & 0xF;
    v122 = v117;
    v40 = (v118 & 6) != 0 && v38 != 3;
    if (v38 == 1 || v40)
    {
      v41 = *(unsigned int *)(v120 + 8);
      v42 = (v41 - 64) <= 0xFFFFFF7F ? v121 : (uint64_t *)&v121;
      v43 = (*(_DWORD *)(v115 + 8) - 64) >= 0xFFFFFF80 ? (uint64_t *)&v116 : v116;
      if (v41 <= 0xFFFFFFBF)
      {
        v44 = (unint64_t)(v41 + 64) >> 6;
        do
        {
          v45 = *v43++;
          *v42++ = v45;
          --v44;
        }
        while (v44);
      }
    }
  }
  sub_1C47B1140((uint64_t)&v119, (uint64_t)v37, 1);
  sub_1C48552C0((uint64_t)&v115, (uint64_t)&v120);
  if ((_UNKNOWN *)v120 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v121);
  }
  else if ((*(_DWORD *)(v120 + 8) - 64) <= 0xFFFFFF7F && v121)
  {
    MEMORY[0x1CAA32F9C](v121, 0x1000C8000313F17);
  }
  v46 = sub_1C627A4E0((uint64_t)v107);
  v47 = sub_1C627A4E0((uint64_t)&v114);
  v26 = v47;
  v112 = 64;
  v111 = 0;
  v113 = 0;
  if ((v46 & 1) == 0 && !(_DWORD)v47)
    goto LABEL_60;
  if ((_DWORD)v47)
    v49 = (llvm::APFloat *)&v114;
  else
    v49 = v107;
  if (llvm::APFloat::convertToInteger((uint64_t)v49, (uint64_t)&v111, 0, &v108))
  {
LABEL_65:
    v48 = 1;
    goto LABEL_73;
  }
  v48 = 1;
  if (!sub_1C4FCF868((uint64_t)&v111, 1))
    goto LABEL_73;
  if (v112 > 0x40)
  {
    v57 = 0;
    v58 = 0;
    v59 = ((unint64_t)v112 + 63) >> 6;
    do
    {
      v60 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v111 + v57));
      v60.i16[0] = vaddlv_u8(v60);
      v58 += v60.i32[0];
      v57 += 8;
    }
    while (8 * v59 != v57);
    if (v58 != 1)
    {
      v48 = 1;
LABEL_75:
      MEMORY[0x1CAA32F9C]();
      goto LABEL_76;
    }
    v61 = 0;
    do
    {
      if (v59-- < 1)
        break;
      v63 = *(_QWORD *)(v111 + 8 * v59);
      v61 += __clz(v63);
    }
    while (!v63);
    v64 = v112 | 0xFFFFFFC0;
    if ((v112 & 0x3F) == 0)
      v64 = 0;
    v56 = v61 + v64;
  }
  else
  {
    if (!v111)
    {
LABEL_60:
      v48 = 1;
      goto LABEL_76;
    }
    if ((v111 & (v111 - 1)) != 0)
      goto LABEL_65;
    v56 = v112 + __clz(v111) - 64;
  }
  v65 = v112 + ~v56;
  v66 = (double)v65;
  if ((_DWORD)v26)
    v66 = -(double)v65;
  v67 = llvm::ConstantFP::get((llvm::ConstantFP **)v109, v55, v66);
  v119 = (uint64_t)"mul";
  v124 = 259;
  v106 = (uint64_t ***)sub_1C4772428((uint64_t)a3, (uint64_t *)v8, (uint64_t)v67, (uint64_t)&v119, 0);
  v68 = *((_QWORD *)a2 + 8);
  if (v68 && (*(_BYTE *)(v68 + 17) & 0x10) != 0
    || ((LODWORD(v119) = 7, !sub_1C53E4BBC((uint64_t)a2, (__int32 *)&v119, 1uLL))
     || (v102 = *((_QWORD *)a2 - 4)) != 0
     && !*(_BYTE *)(v102 + 16)
     && *(_QWORD *)(v102 + 24) == *((_QWORD *)a2 + 9)
     && *(_DWORD *)(v102 + 36) == 7)
    && llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44))
  {
    v69 = llvm::Intrinsic::getDeclaration(v9, 76, (uint64_t *)&v109, 1);
    if (v69)
      v70 = *(uint64_t ***)(v69 + 24);
    else
      v70 = 0;
    v119 = (uint64_t)"exp2";
    v124 = 259;
    v83 = sub_1C4774778((uint64_t *)a3, v70, v69, (uint64_t *)&v106, 1, (uint64_t)&v119, 0);
  }
  else
  {
    v83 = llvm::emitUnaryFloatFnCall(v106, *((_QWORD **)this + 3), 0xCFu, 0xD0u, 0xD1u, (uint64_t)a3, &v110);
  }
  v26 = v83;
  if (v83 && *(_BYTE *)(v83 + 16) == 84)
    *(_WORD *)(v83 + 18) = *(_WORD *)(v83 + 18) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
  v48 = 0;
LABEL_73:
  if (v112 >= 0x41 && v111)
    goto LABEL_75;
LABEL_76:
  if ((_UNKNOWN *)v115 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v116);
  }
  else if ((*(_DWORD *)(v115 + 8) - 64) <= 0xFFFFFF7F && v116)
  {
    MEMORY[0x1CAA32F9C](v116, 0x1000C8000313F17);
  }
  if (v48)
    goto LABEL_29;
  return v26;
}

unsigned __int8 *sub_1C5FB5F90(uint64_t a1, uint64_t *a2, int a3)
{
  int v6;
  llvm::Type ***v7;
  llvm::Type **v8;
  unsigned int PrimitiveSizeInBits;
  const char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  _DWORD *v21;
  _DWORD *v22;
  int v23;
  unsigned int v24;
  char v25;
  __int16 v26;
  char v27;
  __int16 v28;
  int v29;

  if (*(unsigned __int8 *)(a1 + 16) - 71 > 1)
    return 0;
  v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(llvm::Type ****)(a1 - 8);
  else
    v7 = (llvm::Type ***)(a1 - 32 * (v6 & 0x7FFFFFF));
  v8 = *v7;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**v7);
  if ((_DWORD)v10 == 1)
  {
    v24 = PrimitiveSizeInBits;
    PrimitiveSizeInBits = v24;
  }
  if (PrimitiveSizeInBits >= a3)
  {
    if (PrimitiveSizeInBits == a3 && *(_BYTE *)(a1 + 16) == 72)
      goto LABEL_14;
    return 0;
  }
  if (*(_BYTE *)(a1 + 16) != 72)
  {
    v11 = (_QWORD *)a2[8];
    v29 = a3;
    if (a3 <= 63)
    {
      if (a3 <= 31)
      {
        switch(a3)
        {
          case 16:
            v12 = (_QWORD *)(*v11 + 1936);
            goto LABEL_29;
          case 8:
            v12 = (_QWORD *)(*v11 + 1912);
            goto LABEL_29;
          case 1:
            v12 = (_QWORD *)(*v11 + 1888);
            goto LABEL_29;
        }
      }
      else if (a3 == 32)
      {
        v12 = (_QWORD *)(*v11 + 1960);
        goto LABEL_29;
      }
    }
    else
    {
      if (a3 == 64)
      {
        v12 = (_QWORD *)(*v11 + 1984);
LABEL_29:
        v26 = 257;
        v15 = &v25;
        v16 = a2;
        v17 = 39;
        return sub_1C4773E38(v16, v17, (unsigned __int8 *)v8, (uint64_t)v12, (uint64_t)v15);
      }
      if (a3 == 128)
      {
        v12 = (_QWORD *)(*v11 + 2008);
        goto LABEL_29;
      }
    }
    v21 = sub_1C5270984(*v11 + 2168, &v29);
    v12 = (_QWORD *)*((_QWORD *)v21 + 1);
    if (!v12)
    {
      v22 = v21;
      v12 = (_QWORD *)sub_1C484358C(*v11 + 2040, 24, 3);
      v23 = v29;
      *v12 = v11;
      v12[2] = 0;
      v12[1] = (v23 << 8) | 0xDu;
      *((_QWORD *)v22 + 1) = v12;
    }
    goto LABEL_29;
  }
LABEL_14:
  v13 = (_QWORD *)a2[8];
  v29 = a3;
  if (a3 <= 63)
  {
    if (a3 <= 31)
    {
      switch(a3)
      {
        case 16:
          v12 = (_QWORD *)(*v13 + 1936);
          goto LABEL_26;
        case 8:
          v12 = (_QWORD *)(*v13 + 1912);
          goto LABEL_26;
        case 1:
          v12 = (_QWORD *)(*v13 + 1888);
          goto LABEL_26;
      }
    }
    else if (a3 == 32)
    {
      v12 = (_QWORD *)(*v13 + 1960);
      goto LABEL_26;
    }
LABEL_41:
    v18 = sub_1C5270984(*v13 + 2168, &v29);
    v12 = (_QWORD *)*((_QWORD *)v18 + 1);
    if (!v12)
    {
      v19 = v18;
      v12 = (_QWORD *)sub_1C484358C(*v13 + 2040, 24, 3);
      v20 = v29;
      *v12 = v13;
      v12[2] = 0;
      v12[1] = (v20 << 8) | 0xDu;
      *((_QWORD *)v19 + 1) = v12;
    }
    goto LABEL_26;
  }
  if (a3 != 64)
  {
    if (a3 == 128)
    {
      v12 = (_QWORD *)(*v13 + 2008);
      goto LABEL_26;
    }
    goto LABEL_41;
  }
  v12 = (_QWORD *)(*v13 + 1984);
LABEL_26:
  v28 = 257;
  v15 = &v27;
  v16 = a2;
  v17 = 40;
  return sub_1C4773E38(v16, v17, (unsigned __int8 *)v8, (uint64_t)v12, (uint64_t)v15);
}

uint64_t sub_1C5FB623C(uint64_t ***a1, uint64_t a2, int a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t Declaration;
  uint64_t **v9;
  uint64_t v12[4];
  __int16 v13;
  uint64_t ***v14;
  uint64_t v15;

  v15 = a2;
  v14 = a1;
  if (a3)
  {
    v12[0] = (uint64_t)*a1;
    Declaration = llvm::Intrinsic::getDeclaration(a4, 280, v12, 1);
    if (Declaration)
      v9 = *(uint64_t ***)(Declaration + 24);
    else
      v9 = 0;
    v12[0] = (uint64_t)"sqrt";
    v13 = 259;
    return sub_1C4774778(a5, v9, Declaration, (uint64_t *)&v14, 1, (uint64_t)v12, 0);
  }
  else if (llvm::hasFloatFn(a6, (uint64_t)*a1, 0x189u, 0x18Au, 0x18Bu))
  {
    return llvm::emitUnaryFloatFnCall(a1, a6, 0x189u, 0x18Au, 0x18Bu, (uint64_t)a5, &v15);
  }
  else
  {
    return 0;
  }
}

uint64_t *llvm::LibCallSimplifier::optimizePow(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  char *v6;
  uint64_t ***v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  int v16;
  uint64_t ***v17;
  char *v18;
  size_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  llvm::LibCallSimplifier *v28;
  llvm::Type *v29;
  uint64_t *v30;
  uint64_t v31;
  llvm::Type *v32;
  llvm::LibCallSimplifier *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  int v61;
  uint64_t v62;
  int v63;
  _BOOL4 v65;
  uint64_t v66;
  __int128 *v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  _BOOL4 v72;
  double v73;
  llvm::Type *v74;
  uint64_t v75;
  uint64_t *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int hasFnAttrOnCalledFunction;
  _QWORD *v81;
  const llvm::APInt *v82;
  int v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  _DWORD *v88;
  int v89;
  uint64_t v90;
  llvm::LibCallSimplifier *v91;
  uint64_t *v92;
  size_t __n;
  llvm::ConstantFP **v94;
  unsigned __int8 *v95;
  char v96;
  const char *v97;
  uint64_t v98;
  int v99;
  char v100;
  __int16 v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  _DWORD *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  int v124;
  char v125;
  char v126[8];
  _DWORD *v127;
  uint64_t *v128;
  int v129;
  char v130;
  uint64_t *v131;
  uint64_t v132;
  _QWORD *v133;
  int v134;
  char v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v6 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v7 = (uint64_t ***)*((_QWORD *)a2 - 4);
  if (!v7 || *((_BYTE *)v7 + 16) || v7[3] != *((uint64_t ***)a2 + 9))
    v7 = 0;
  v95 = (unsigned __int8 *)*((_QWORD *)v6 + 4);
  v8 = *(unsigned __int8 **)v6;
  if ((*((_BYTE *)v7 + 23) & 0x10) != 0)
  {
    v9 = ***v7;
    v10 = *(_QWORD *)(v9 + 152);
    v11 = *(unsigned int *)(v9 + 168);
    if ((_DWORD)v11)
    {
      LODWORD(v12) = (v11 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v13 = (uint64_t ****)(v10 + 16 * v12);
      v14 = *v13;
      if (*v13 == v7)
      {
LABEL_13:
        v17 = v13[1];
        v19 = (size_t)*v17;
        v18 = (char *)(v17 + 2);
        __n = v19;
        goto LABEL_14;
      }
      v15 = 1;
      while (v14 != (uint64_t ***)-4096)
      {
        v16 = v12 + v15++;
        v12 = v16 & (v11 - 1);
        v14 = *(uint64_t ****)(v10 + 16 * v12);
        if (v14 == v7)
        {
          v13 = (uint64_t ****)(v10 + 16 * v12);
          goto LABEL_13;
        }
      }
    }
    v13 = (uint64_t ****)(v10 + 16 * v11);
    goto LABEL_13;
  }
  __n = 0;
  v18 = &byte_1C871356D;
LABEL_14:
  v94 = *(llvm::ConstantFP ***)a2;
  v92 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
  v20 = *((unsigned __int8 *)a2 + 17);
  v103 = 0;
  v21 = *((_DWORD *)a3 + 24);
  v22 = *((_QWORD *)a3 + 11);
  v23 = *((_BYTE *)a3 + 100);
  v96 = *((_BYTE *)a3 + 101);
  v24 = *((_BYTE *)a3 + 102);
  v25 = v20 >> 1;
  if (v20 >> 1 == 127)
    v25 = -1;
  *((_DWORD *)a3 + 24) = v25;
  v104 = 0x3FF0000000000000;
  if ((sub_1C4E7BE28((const llvm::APInt **)&v104, v8) & 1) != 0)
    goto LABEL_17;
  v27 = llvm::LibCallSimplifier::replacePowWithExp(this, a2, a3);
  v28 = this;
  v26 = (uint64_t *)v27;
  if (v27)
    goto LABEL_27;
  v91 = v28;
  v104 = 0xBFF0000000000000;
  if (sub_1C4E7BE28((const llvm::APInt **)&v104, v95))
  {
    v30 = (uint64_t *)llvm::ConstantFP::get(v94, v29, 1.0);
    v104 = (unint64_t)"reciprocal";
    LOWORD(v107) = 259;
    v31 = sub_1C47721F8((uint64_t)a3, v30, (uint64_t)v8, (uint64_t)&v104, 0);
LABEL_26:
    v26 = (uint64_t *)v31;
    goto LABEL_27;
  }
  if (sub_1C4E5C310((uint64_t)&v104, (llvm::Constant *)v95))
  {
    v31 = (uint64_t)llvm::ConstantFP::get(v94, v32, 1.0);
    goto LABEL_26;
  }
  v104 = 0x3FF0000000000000;
  if ((sub_1C4E7BE28((const llvm::APInt **)&v104, v95) & 1) != 0)
  {
LABEL_17:
    v26 = (uint64_t *)v8;
    goto LABEL_27;
  }
  v104 = 0x4000000000000000;
  if (sub_1C4E7BE28((const llvm::APInt **)&v104, v95))
  {
    v104 = (unint64_t)"square";
    LOWORD(v107) = 259;
    v31 = sub_1C4772428((uint64_t)a3, (uint64_t *)v8, (uint64_t)v8, (uint64_t)&v104, 0);
    goto LABEL_26;
  }
  v26 = (uint64_t *)llvm::LibCallSimplifier::replacePowWithSqrt(v91, a2, a3);
  if (v26)
    goto LABEL_27;
  v102 = 0;
  if ((v20 & 0x80) == 0)
  {
    v34 = v91;
LABEL_44:
    if (!*((_BYTE *)v34 + 56)
      || (v41 = sub_1C56EAC88(*((_QWORD **)v91 + 3), 0x15Bu), __n != v42)
      || __n && memcmp(v18, v41, __n)
      || !llvm::LibCallSimplifier::hasFloatVersion((uint64_t)v91, v18, __n)
      || (v26 = (uint64_t *)sub_1C5FBDA94((uint64_t)a2, (uint64_t)a3, 1, 1)) == 0)
    {
      v26 = 0;
    }
    goto LABEL_27;
  }
  v131 = &v102;
  v132 = 0;
  if (sub_1C4E7A604((uint64_t)&v131, v95))
  {
    v35 = v102;
    LODWORD(v105) = 64;
    v104 = 0x3FE0000000000000;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v97, (const llvm::APInt **)&v104);
    v105 = v97;
    *(_QWORD *)&v106 = v98;
    DWORD2(v106) = v99;
    BYTE12(v106) = v100 & 0xF;
    llvm::APFloat::convert((uint64_t)&v104, *(void **)(v35 + 8), 1, &v97);
    v36 = sub_1C47ECB98(v35, (uint64_t)&v104);
    if (v105 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v106);
    }
    else if ((v105[2] - 64) <= 0xFFFFFF7F && (_QWORD)v106)
    {
      MEMORY[0x1CAA32F9C](v106, 0x1000C8000313F17);
    }
    if ((v36 & 1) == 0)
    {
      v37 = v102;
      LODWORD(v105) = 64;
      v104 = 0xBFE0000000000000;
      llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v97, (const llvm::APInt **)&v104);
      v105 = v97;
      *(_QWORD *)&v106 = v98;
      DWORD2(v106) = v99;
      BYTE12(v106) = v100 & 0xF;
      llvm::APFloat::convert((uint64_t)&v104, *(void **)(v37 + 8), 1, &v97);
      v38 = sub_1C47ECB98(v37, (uint64_t)&v104);
      if (v105 == (_DWORD *)&unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v106);
      }
      else if ((v105[2] - 64) <= 0xFFFFFF7F && (_QWORD)v106)
      {
        MEMORY[0x1CAA32F9C](v106, 0x1000C8000313F17);
      }
      if ((v38 & 1) == 0)
      {
        v43 = *(_QWORD *)(v102 + 8);
        if ((_UNKNOWN *)v43 == &unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v132, (uint64_t)&unk_1C866F1C0, 33);
        }
        else
        {
          v132 = *(_QWORD *)(v102 + 8);
          v44 = v43;
          if ((*(_DWORD *)(v43 + 8) + 64) >= 0x80)
          {
            v133 = (_QWORD *)operator new[]();
            v44 = v132;
          }
          v135 = v135 & 0xF0 | 2;
          v45 = *(_DWORD *)(v44 + 8);
          if ((v45 - 64) < 0xFFFFFF80)
          {
            v81 = v133;
            *v133 = 0;
            bzero(v81 + 1, 8 * (((v45 + 64) >> 6) - 2) + 8);
            v46 = v133;
          }
          else
          {
            v46 = &v133;
            v133 = 0;
          }
          v134 = *(_DWORD *)(v43 + 8) - 1;
          *v46 = 33;
          llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v132, 1, 0);
        }
        v47 = v102;
        v48 = *(_QWORD *)(v102 + 8);
        if ((_UNKNOWN *)v48 == &unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v122, (const llvm::detail::DoubleAPFloat *)(v102 + 8));
        }
        else
        {
          v122 = *(unsigned int **)(v102 + 8);
          if ((*(_DWORD *)(v48 + 8) + 64) >= 0x80)
            v123 = operator new[]();
          v125 = v125 & 0xF7 | *(_BYTE *)(v47 + 28) & 8;
          v49 = *(_BYTE *)(v47 + 28);
          v50 = v49 & 7;
          v125 = v125 & 0xF8 | v49 & 7;
          v124 = *(_DWORD *)(v47 + 24);
          v52 = (v49 & 6) != 0 && v50 != 3;
          if (v50 == 1 || v52)
          {
            v53 = v122[2];
            if ((v53 - 64) <= 0xFFFFFF7F)
              v54 = (uint64_t *)v123;
            else
              v54 = &v123;
            v57 = *(uint64_t **)(v47 + 16);
            v56 = (uint64_t *)(v47 + 16);
            v55 = v57;
            if ((*(_DWORD *)(*(v56 - 1) + 8) - 64) >= 0xFFFFFF80)
              v55 = v56;
            if (v53 <= 0xFFFFFFBF)
            {
              v58 = (unint64_t)(v53 + 64) >> 6;
              do
              {
                v59 = *v55++;
                *v54++ = v59;
                --v58;
              }
              while (v58);
            }
          }
        }
        v60 = v122;
        if (v122 == (unsigned int *)&unk_1C866F1C0)
        {
          if ((*(_BYTE *)(v123 + 28) & 8) == 0
            || (llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v122),
                v60 = v122,
                v122 == (unsigned int *)&unk_1C866F1C0))
          {
            v127 = &unk_1C866F1C0;
            v128 = (uint64_t *)v123;
            v122 = (unsigned int *)&unk_1C866F210;
            v123 = 0;
            if (!llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)&v127, (const llvm::detail::DoubleAPFloat *)&v132))
            {
LABEL_79:
              if ((sub_1C627A4E0((uint64_t)v126) & 1) != 0)
              {
                v62 = 0;
              }
              else
              {
                if (v127 == (_DWORD *)&unk_1C866F1C0)
                {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v105, (const llvm::detail::DoubleAPFloat *)&v127);
                }
                else
                {
                  v105 = v127;
                  if ((v127[2] + 64) >= 0x80)
                    *(_QWORD *)&v106 = operator new[]();
                  v63 = v130 & 7;
                  BYTE12(v106) = BYTE12(v106) & 0xF0 | v130 & 0xF;
                  DWORD2(v106) = v129;
                  v65 = (v130 & 6) != 0 && v63 != 3;
                  if (v63 == 1 || v65)
                  {
                    v66 = v105[2];
                    if ((v66 - 64) <= 0xFFFFFF7F)
                      v67 = (__int128 *)v106;
                    else
                      v67 = &v106;
                    v68 = (uint64_t *)&v128;
                    if ((v127[2] - 64) < 0xFFFFFF80)
                      v68 = v128;
                    if (v66 <= 0xFFFFFFBF)
                    {
                      v69 = (unint64_t)(v66 + 64) >> 6;
                      do
                      {
                        v70 = *v68++;
                        *(_QWORD *)v67 = v70;
                        v67 = (__int128 *)((char *)v67 + 8);
                        --v69;
                      }
                      while (v69);
                    }
                  }
                }
                sub_1C47B4138((uint64_t)&v104, (uint64_t)v126, 1);
                if (v71 || !sub_1C627A4E0((uint64_t)&v104))
                {
                  v62 = 0;
                  v72 = 0;
                }
                else
                {
                  v78 = *(_QWORD *)(*((_QWORD *)a2 - 4) + 112);
                  v79 = *((_QWORD *)a2 + 8);
                  if (v79 && (*(_BYTE *)(v79 + 17) & 0x10) != 0)
                  {
                    hasFnAttrOnCalledFunction = 1;
                  }
                  else
                  {
                    LODWORD(v97) = 7;
                    if (!sub_1C53E4BBC((uint64_t)a2, (__int32 *)&v97, 1uLL)
                      || (v90 = *((_QWORD *)a2 - 4)) != 0
                      && !*(_BYTE *)(v90 + 16)
                      && *(_QWORD *)(v90 + 24) == *((_QWORD *)a2 + 9)
                      && *(_DWORD *)(v90 + 36) == 7)
                    {
                      hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44);
                    }
                    else
                    {
                      hasFnAttrOnCalledFunction = 0;
                    }
                  }
                  v62 = sub_1C5FB623C((uint64_t ***)v8, v78, hasFnAttrOnCalledFunction, v92, (uint64_t *)a3, *((_QWORD **)v91 + 3));
                  v72 = v62 != 0;
                }
                if (v105 == (_DWORD *)&unk_1C866F1C0)
                {
                  sub_1C4773C74((uint64_t *)&v106);
                }
                else if ((v105[2] - 64) <= 0xFFFFFF7F && (_QWORD)v106)
                {
                  MEMORY[0x1CAA32F9C](v106, 0x1000C8000313F17);
                }
                if (!v72)
                {
                  v26 = 0;
LABEL_111:
                  v77 = 1;
                  goto LABEL_138;
                }
              }
              v121 = 0;
              v119 = 0u;
              v120 = 0u;
              v117 = 0u;
              v118 = 0u;
              v115 = 0u;
              v116 = 0u;
              v113 = 0u;
              v114 = 0u;
              v111 = 0u;
              v112 = 0u;
              v110 = 0u;
              v108 = 0u;
              v109 = 0u;
              v106 = 0u;
              v107 = 0u;
              v104 = 0;
              v105 = v8;
              v97 = "square";
              v101 = 259;
              *(_QWORD *)&v106 = sub_1C4772428((uint64_t)a3, (uint64_t *)v8, (uint64_t)v8, (uint64_t)&v97, 0);
              llvm::APFloat::convert((uint64_t)v126, &unk_1C866F198, 0, &v103);
              v73 = llvm::APFloat::convertToDouble((llvm::APFloat *)v126);
              v26 = (uint64_t *)sub_1C5FB7138((uint64_t)&v104, v73, (uint64_t)a3);
              if (v62)
              {
                v101 = 257;
                v26 = (uint64_t *)sub_1C4772428((uint64_t)a3, v26, v62, (uint64_t)&v97, 0);
              }
              v75 = v102;
              if (*(_UNKNOWN **)(v102 + 8) == &unk_1C866F1C0)
                v75 = *(_QWORD *)(v102 + 16);
              if ((*(_BYTE *)(v75 + 28) & 8) != 0)
              {
                v76 = (uint64_t *)llvm::ConstantFP::get(v94, v74, 1.0);
                v97 = "reciprocal";
                v101 = 259;
                v26 = (uint64_t *)sub_1C47721F8((uint64_t)a3, v76, (uint64_t)v26, (uint64_t)&v97, 0);
              }
              goto LABEL_111;
            }
LABEL_130:
            LODWORD(v105) = *(_DWORD *)(**((_QWORD **)v91 + 3) + 148);
            if (v105 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v104, 0, 0);
            else
              v104 = 0;
            BYTE4(v105) = 0;
            if (!sub_1C627A4E0(v102)
              || llvm::APFloat::convertToInteger(v102, (uint64_t)&v104, 0, &v103))
            {
              v77 = 0;
              v26 = 0;
LABEL_135:
              if (v105 >= 0x41 && v104)
                MEMORY[0x1CAA32F9C](v104, 0x1000C8000313F17);
LABEL_138:
              if (v127 == (_DWORD *)&unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v128);
              }
              else if ((v127[2] - 64) <= 0xFFFFFF7F && v128)
              {
                MEMORY[0x1CAA32F9C](v128, 0x1000C8000313F17);
              }
              if ((_UNKNOWN *)v132 == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v133);
              }
              else if ((*(_DWORD *)(v132 + 8) - 64) <= 0xFFFFFF7F && v133)
              {
                MEMORY[0x1CAA32F9C](v133, 0x1000C8000313F17);
              }
              if (v77)
                goto LABEL_27;
              goto LABEL_39;
            }
            v83 = *(_DWORD *)(**((_QWORD **)v91 + 3) + 148);
            v84 = (_QWORD *)*((_QWORD *)a3 + 8);
            LODWORD(v97) = v83;
            if (v83 <= 63)
            {
              if (v83 <= 31)
              {
                switch(v83)
                {
                  case 16:
                    v85 = *v84 + 1936;
                    break;
                  case 8:
                    v85 = *v84 + 1912;
                    break;
                  case 1:
                    v85 = *v84 + 1888;
                    break;
                  default:
                    goto LABEL_162;
                }
LABEL_152:
                v86 = (uint64_t *)llvm::ConstantInt::get((llvm::ConstantInt **)v85, (llvm::Type *)&v104, v82);
                v87 = sub_1C5FB71CC((uint64_t *)v8, v86, v92, (uint64_t *)a3);
                v26 = (uint64_t *)v87;
                if (v87 && *(_BYTE *)(v87 + 16) == 84)
                  *(_WORD *)(v87 + 18) = *(_WORD *)(v87 + 18) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
                v77 = 1;
                goto LABEL_135;
              }
              if (v83 == 32)
              {
                v85 = *v84 + 1960;
                goto LABEL_152;
              }
            }
            else
            {
              if (v83 == 64)
              {
                v85 = *v84 + 1984;
                goto LABEL_152;
              }
              if (v83 == 128)
              {
                v85 = *v84 + 2008;
                goto LABEL_152;
              }
            }
LABEL_162:
            v88 = sub_1C5270984(*v84 + 2168, &v97);
            v85 = *((_QWORD *)v88 + 1);
            if (!v85)
            {
              v85 = sub_1C484358C(*v84 + 2040, 24, 3);
              v89 = (int)v97;
              *(_QWORD *)v85 = v84;
              *(_QWORD *)(v85 + 16) = 0;
              *(_QWORD *)(v85 + 8) = (v89 << 8) | 0xDu;
              *((_QWORD *)v88 + 1) = v85;
            }
            goto LABEL_152;
          }
        }
        else if ((v125 & 8) != 0)
        {
          v125 ^= 8u;
        }
        v129 = v124;
        v130 = v130 & 0xF0 | v125 & 0xF;
        v127 = v60;
        v128 = (uint64_t *)v123;
        v122 = (unsigned int *)&unk_1C866F210;
        llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v127, (const llvm::detail::IEEEFloat *)&v132);
        if (!v61)
          goto LABEL_79;
        goto LABEL_130;
      }
    }
  }
LABEL_39:
  v34 = v91;
  if (v95[16] - 71 > 1)
    goto LABEL_44;
  v39 = (uint64_t *)sub_1C5FB5F90((uint64_t)v95, (uint64_t *)a3, *(_DWORD *)(**((_QWORD **)v91 + 3) + 148));
  if (!v39)
    goto LABEL_44;
  v40 = sub_1C5FB71CC((uint64_t *)v8, v39, v92, (uint64_t *)a3);
  v26 = (uint64_t *)v40;
  if (v40 && *(_BYTE *)(v40 + 16) == 84)
    *(_WORD *)(v40 + 18) = *(_WORD *)(v40 + 18) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
LABEL_27:
  *((_DWORD *)a3 + 24) = v21;
  *((_QWORD *)a3 + 11) = v22;
  *((_BYTE *)a3 + 100) = v23;
  *((_BYTE *)a3 + 101) = v96;
  *((_BYTE *)a3 + 102) = v24;
  return v26;
}

uint64_t sub_1C5FB7138(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t v9;
  _BYTE v10[32];
  __int16 v11;

  result = *(_QWORD *)(a1 + 8 * a2);
  if (!result)
  {
    v6 = a2;
    v7 = (unsigned int *)((char *)&unk_1C86766AC + 8 * a2);
    v8 = (uint64_t *)sub_1C5FB7138(a1, *v7);
    v9 = sub_1C5FB7138(a1, v7[1]);
    v11 = 257;
    result = sub_1C4772428(a3, v8, v9, (uint64_t)v10, 0);
    *(_QWORD *)(a1 + 8 * v6) = result;
  }
  return result;
}

uint64_t sub_1C5FB71CC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t Declaration;
  uint64_t **v7;
  _WORD v9[20];
  uint64_t v10[2];
  uint64_t v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v11[0] = (uint64_t)a1;
  v11[1] = (uint64_t)a2;
  v5 = *a2;
  v10[0] = *a1;
  v10[1] = v5;
  Declaration = llvm::Intrinsic::getDeclaration(a3, 239, v10, 2);
  if (Declaration)
    v7 = *(uint64_t ***)(Declaration + 24);
  else
    v7 = 0;
  v9[16] = 257;
  return sub_1C4774778(a4, v7, Declaration, v11, 2, (uint64_t)v9, 0);
}

BOOL llvm::LibCallSimplifier::hasFloatVersion(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t *v9;
  uint64_t v10;
  _BOOL8 v11;
  unsigned int v13;
  _BYTE *v14;
  __int128 v15;
  _QWORD v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = xmmword_1C69DD250;
  if (a3 >= 0x15)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v14, v16, a3, 1);
    v6 = v15;
  }
  else
  {
    v6 = 0;
  }
  if (a3)
  {
    memcpy(&v14[v6], a2, a3);
    v6 = v15;
  }
  v7 = v6 + a3;
  *(_QWORD *)&v15 = v7;
  if ((unint64_t)(v7 + 1) > *((_QWORD *)&v15 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v14, v16, v7 + 1, 1);
    v7 = v15;
  }
  v13 = 0;
  v14[v7] = 102;
  v8 = v14;
  *(_QWORD *)&v15 = v15 + 1;
  v9 = *(uint64_t **)(a1 + 24);
  v10 = *v9;
  v11 = 0;
  if (llvm::TargetLibraryInfoImpl::getLibFunc(*v9, v14, v15, &v13))
    v11 = ((*(_QWORD *)(v9[1] + (((unint64_t)v13 >> 3) & 0x1FFFFFF8)) >> v13) & 1) == 0
       && ((*(unsigned __int8 *)(v10 + ((unint64_t)v13 >> 2)) >> (2 * (v13 & 3))) & 3) != 0;
  if (v8 != (_BYTE *)v16)
    free(v8);
  return v11;
}

unsigned __int8 *llvm::LibCallSimplifier::optimizeExp2(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t ***v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  uint64_t ***v15;
  char *v16;
  size_t v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  llvm::ConstantFP **v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  llvm::Type *v27;
  uint64_t *v28;
  uint64_t ***v29;
  uint64_t v30;

  v6 = (uint64_t ***)*((_QWORD *)a2 - 4);
  if (!v6 || *((_BYTE *)v6 + 16) || v6[3] != *((uint64_t ***)a2 + 9))
    v6 = 0;
  v30 = 0;
  if ((*((_BYTE *)v6 + 23) & 0x10) != 0)
  {
    v7 = ***v6;
    v8 = *(_QWORD *)(v7 + 152);
    v9 = *(unsigned int *)(v7 + 168);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v11 = (uint64_t ****)(v8 + 16 * v10);
      v12 = *v11;
      if (*v11 == v6)
      {
LABEL_11:
        v15 = v11[1];
        v18 = (size_t)*v15;
        v16 = (char *)(v15 + 2);
        v17 = v18;
        goto LABEL_12;
      }
      v13 = 1;
      while (v12 != (uint64_t ***)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v9 - 1);
        v12 = *(uint64_t ****)(v8 + 16 * v10);
        if (v12 == v6)
        {
          v11 = (uint64_t ****)(v8 + 16 * v10);
          goto LABEL_11;
        }
      }
    }
    v11 = (uint64_t ****)(v8 + 16 * v9);
    goto LABEL_11;
  }
  v17 = 0;
  v16 = &byte_1C871356D;
LABEL_12:
  if (*((_BYTE *)this + 56)
    && (v19 = sub_1C56EAC88(*((_QWORD **)this + 3), 0xCFu), v17 == v20)
    && (!v17 || !memcmp(v16, v19, v17))
    && llvm::LibCallSimplifier::hasFloatVersion((uint64_t)this, v16, v17))
  {
    v21 = sub_1C5FBDA94((uint64_t)a2, (uint64_t)a3, 0, 1);
  }
  else
  {
    v21 = 0;
  }
  v22 = *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  if (*(unsigned __int8 *)(v22 + 16) - 71 <= 1)
  {
    v24 = *(llvm::ConstantFP ***)a2;
    v25 = (_QWORD *)*((_QWORD *)this + 3);
    if (llvm::hasFloatFn(v25, (uint64_t)v24, 0x128u, 0x129u, 0x12Au))
    {
      v26 = sub_1C5FB5F90(v22, (uint64_t *)a3, *(_DWORD *)(*v25 + 148));
      if (v26)
      {
        v28 = (uint64_t *)v26;
        v29 = (uint64_t ***)llvm::ConstantFP::get(v24, v27, 1.0);
        return (unsigned __int8 *)llvm::emitBinaryFloatFnCall(v29, v28, *((uint64_t **)this + 3), 0x128u, 0x129u, 0x12Au, (uint64_t)a3, &v30);
      }
    }
  }
  return v21;
}

uint64_t llvm::LibCallSimplifier::optimizeLog(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t ***v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  uint64_t ***v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  int v34;
  llvm::Type *v35;
  llvm::ConstantFP **v36;
  double v37;
  uint64_t Declaration;
  uint64_t **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  llvm::APFloatBase *v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  _QWORD v58[4];
  __int16 v59;
  llvm::APFloatBase *v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;

  v6 = (uint64_t ***)*((_QWORD *)a2 - 4);
  if (!v6 || *((_BYTE *)v6 + 16) || v6[3] != *((uint64_t ***)a2 + 9))
    v6 = 0;
  v64 = 0;
  if ((*((_BYTE *)v6 + 23) & 0x10) == 0)
  {
    v17 = 0;
    v16 = &byte_1C871356D;
    goto LABEL_12;
  }
  v7 = ***v6;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if (!(_DWORD)v9)
    goto LABEL_42;
  LODWORD(v10) = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
  v11 = (uint64_t ****)(v8 + 16 * v10);
  v12 = *v11;
  if (*v11 != v6)
  {
    v13 = 1;
    while (v12 != (uint64_t ***)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(uint64_t ****)(v8 + 16 * v10);
      if (v12 == v6)
      {
        v11 = (uint64_t ****)(v8 + 16 * v10);
        goto LABEL_11;
      }
    }
LABEL_42:
    v11 = (uint64_t ****)(v8 + 16 * v9);
  }
LABEL_11:
  v15 = v11[1];
  v18 = (unint64_t)*v15;
  v16 = (char *)(v15 + 2);
  v17 = v18;
LABEL_12:
  v19 = *((_DWORD *)v6 + 9);
  v20 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
  v21 = *(_QWORD *)a2;
  v63 = *(_QWORD *)a2;
  if (*((_BYTE *)this + 56) && llvm::LibCallSimplifier::hasFloatVersion((uint64_t)this, v16, v17))
    v22 = (uint64_t)sub_1C5FBDA94((uint64_t)a2, (uint64_t)a3, 0, 1);
  else
    v22 = 0;
  if (*(_BYTE *)(*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)) + 16) == 84)
    v23 = *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  else
    v23 = 0;
  if (*((unsigned __int8 *)a2 + 17) >= 0xFEu)
  {
    if (v23)
    {
      if (*(unsigned __int8 *)(v23 + 17) >= 0xFEu)
      {
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
        {
          if (!*(_QWORD *)(v25 + 8))
          {
            v62 = 0;
            v57 = (uint64_t *)*((_QWORD *)this + 3);
            if (llvm::TargetLibraryInfoImpl::getLibFunc(*v57, v16, v17, &v62))
            {
              v47 = v62 - 300;
              if ((v62 - 300) < 0xF && ((0x638Fu >> v47) & 1) != 0)
              {
                v48 = dword_1C8676844[v47];
                v49 = dword_1C8676880[v47];
                v50 = dword_1C86768F8[v47];
                v51 = dword_1C86768BC[v47];
                v19 = dword_1C8676934[v47];
                goto LABEL_31;
              }
            }
            else if ((v19 - 175) <= 2)
            {
              if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
                v26 = *(unsigned __int8 *)(**(_QWORD **)(v21 + 16) + 8);
              else
                v26 = *(_DWORD *)(v21 + 8);
              if (v26 == 2)
              {
                v50 = 210;
                v51 = 208;
                v49 = 205;
                v27 = 348;
              }
              else
              {
                if (v26 != 3)
                  return v22;
                v50 = 203;
                v51 = 207;
                v49 = 204;
                v27 = 347;
              }
              v48 = v27;
LABEL_31:
              v28 = *((_DWORD *)a3 + 24);
              v29 = *((_QWORD *)a3 + 11);
              v30 = *((_BYTE *)a3 + 100);
              v31 = *((_BYTE *)a3 + 101);
              v32 = *((_BYTE *)a3 + 102);
              *((_DWORD *)a3 + 24) = -1;
              v33 = *(_QWORD *)(v23 - 32);
              v56 = v28;
              v55 = v29;
              v53 = v31;
              v54 = v30;
              v52 = v32;
              if (v33 && !*(_BYTE *)(v33 + 16) && *(_QWORD *)(v33 + 24) == *(_QWORD *)(v23 + 72))
                v34 = *(_DWORD *)(v33 + 36);
              else
                v34 = 0;
              v61 = 469;
              sub_1C4ECD910(v57, v23, &v61);
              if (v61 == v48 || v34 == 238)
              {
                if (sub_1C5B15EE0((uint64_t)a2, 44))
                {
                  Declaration = llvm::Intrinsic::getDeclaration(v20, v19, &v63, 1);
                  if (Declaration)
                    v39 = *(uint64_t ***)(Declaration + 24);
                  else
                    v39 = 0;
                  v60 = *(llvm::APFloatBase **)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF));
                  v58[0] = "log";
                  v59 = 259;
                  v40 = sub_1C4774778((uint64_t *)a3, v39, Declaration, (uint64_t *)&v60, 1, (uint64_t)v58, 0);
                }
                else
                {
                  v40 = llvm::emitUnaryFloatFnCall(*(void **)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF)), (unsigned __int8 *)v16, v17, (uint64_t)a3, &v64);
                }
                v41 = v40;
                v42 = *(uint64_t **)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF) + 32);
              }
              else
              {
                if (v61 != v50 && v61 != v51 && v61 != v49 && (v34 - 75) > 1)
                  goto LABEL_41;
                if (v61 == v50 || v34 == 75)
                {
                  v36 = *(llvm::ConstantFP ***)a2;
                  v37 = 2.71828183;
                }
                else
                {
                  v36 = *(llvm::ConstantFP ***)a2;
                  if (v61 == v51 || v34 == 76)
                    v37 = 2.0;
                  else
                    v37 = 10.0;
                }
                v43 = llvm::ConstantFP::get(v36, v35, v37);
                if (sub_1C5B15EE0((uint64_t)a2, 44))
                {
                  v44 = llvm::Intrinsic::getDeclaration(v20, v19, &v63, 1);
                  if (v44)
                    v45 = *(uint64_t ***)(v44 + 24);
                  else
                    v45 = 0;
                  v60 = v43;
                  v58[0] = "log";
                  v59 = 259;
                  v46 = sub_1C4774778((uint64_t *)a3, v45, v44, (uint64_t *)&v60, 1, (uint64_t)v58, 0);
                }
                else
                {
                  v46 = llvm::emitUnaryFloatFnCall(v43, (unsigned __int8 *)v16, v17, (uint64_t)a3, &v64);
                }
                v41 = v46;
                v42 = *(uint64_t **)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF));
              }
              v58[0] = "mul";
              v59 = 259;
              v22 = sub_1C4772428((uint64_t)a3, v42, v41, (uint64_t)v58, 0);
              (*((void (**)(_QWORD, uint64_t, uint64_t))this + 8))(*((_QWORD *)this + 9), v23, v22);
              (*((void (**)(_QWORD, uint64_t))this + 10))(*((_QWORD *)this + 11), v23);
LABEL_41:
              *((_DWORD *)a3 + 24) = v56;
              *((_QWORD *)a3 + 11) = v55;
              *((_BYTE *)a3 + 100) = v54;
              *((_BYTE *)a3 + 101) = v53;
              *((_BYTE *)a3 + 102) = v52;
            }
          }
        }
      }
    }
  }
  return v22;
}

uint64_t llvm::LibCallSimplifier::optimizeSqrt(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t ***v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  uint64_t ***v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t *v30;
  uint64_t Declaration;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t v37;
  _QWORD v39[4];
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v5 = (uint64_t ***)*((_QWORD *)a2 - 4);
  if (!v5 || *((_BYTE *)v5 + 16) || v5[3] != *((uint64_t ***)a2 + 9))
    v5 = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 3);
  if ((*(_BYTE *)(v6[1] + 49) & 4) != 0 || (*(_BYTE *)(*v6 + 98) & 0x30) == 0)
    goto LABEL_19;
  if ((*((_BYTE *)v5 + 23) & 0x10) == 0)
    goto LABEL_17;
  v7 = ***v5;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if (!(_DWORD)v9)
    goto LABEL_14;
  LODWORD(v10) = (v9 - 1) & ((v5 >> 4) ^ (v5 >> 9));
  v11 = (uint64_t ****)(v8 + 16 * v10);
  v12 = *v11;
  if (*v11 != v5)
  {
    v13 = 1;
    while (v12 != (uint64_t ***)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(uint64_t ****)(v8 + 16 * v10);
      if (v12 == v5)
      {
        v11 = (uint64_t ****)(v8 + 16 * v10);
        goto LABEL_15;
      }
    }
LABEL_14:
    v11 = (uint64_t ****)(v8 + 16 * v9);
  }
LABEL_15:
  v15 = v11[1];
  if (*v15 == (uint64_t **)4 && *((_DWORD *)v15 + 4) == 1953657203)
    goto LABEL_18;
LABEL_17:
  if (*((_DWORD *)v5 + 9) != 280)
  {
LABEL_19:
    v16 = 0;
    goto LABEL_20;
  }
LABEL_18:
  v16 = (uint64_t)sub_1C5FBDA94((uint64_t)a2, (uint64_t)a3, 0, 1);
LABEL_20:
  if (*((unsigned __int8 *)a2 + 17) >= 0xFEu)
  {
    v17 = *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
    if (v17)
    {
      if (*(_BYTE *)(v17 + 16) == 46 && *(unsigned __int8 *)(v17 + 17) >= 0xFEu)
      {
        v18 = *(_DWORD *)(v17 + 20);
        if ((v18 & 0x40000000) != 0)
          v19 = *(uint64_t **)(v17 - 8);
        else
          v19 = (uint64_t *)(v17 - 32 * (v18 & 0x7FFFFFF));
        v20 = *v19;
        v21 = v19[4];
        v42 = 0;
        if (v20 == v21)
        {
          v43 = v20;
          if (!v20)
            return v16;
          v21 = 0;
          goto LABEL_35;
        }
        v22 = *(unsigned __int8 *)(v20 + 16);
        if (v22 != 5)
        {
          if (v22 != 46)
            return v16;
          v23 = *(_QWORD *)(v20 - 64);
          if (!v23)
            return v16;
          v24 = *(_QWORD *)(v20 - 32);
          if (!v24)
            return v16;
          goto LABEL_40;
        }
        if (*(_WORD *)(v20 + 18) == 18)
        {
          v33 = (uint64_t *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF));
          v23 = *v33;
          if (*v33)
          {
            v24 = v33[4];
            if (v24)
            {
LABEL_40:
              if (v23 != v24 || *(unsigned __int8 *)(v20 + 17) < 0xFEu)
                return v16;
              v42 = v21;
              v43 = v23;
LABEL_35:
              v25 = *((_DWORD *)a3 + 24);
              v26 = *((_QWORD *)a3 + 11);
              v27 = *((_BYTE *)a3 + 100);
              v28 = *((_BYTE *)a3 + 101);
              v29 = *((_BYTE *)a3 + 102);
              *((_DWORD *)a3 + 24) = -1;
              v30 = (uint64_t *)v5[5];
              v41 = *(_QWORD *)v17;
              Declaration = llvm::Intrinsic::getDeclaration(v30, 139, &v41, 1);
              if (Declaration)
                v32 = *(uint64_t ***)(Declaration + 24);
              else
                v32 = 0;
              v39[0] = "fabs";
              v40 = 259;
              v34 = sub_1C4774778((uint64_t *)a3, v32, Declaration, &v43, 1, (uint64_t)v39, 0);
              v16 = v34;
              if (v21)
              {
                v35 = llvm::Intrinsic::getDeclaration(v30, 280, &v41, 1);
                if (v35)
                  v36 = *(uint64_t ***)(v35 + 24);
                else
                  v36 = 0;
                v39[0] = "sqrt";
                v40 = 259;
                v37 = sub_1C4774778((uint64_t *)a3, v36, v35, &v42, 1, (uint64_t)v39, 0);
                v40 = 257;
                v16 = sub_1C4772428((uint64_t)a3, (uint64_t *)v16, v37, (uint64_t)v39, 0);
                if (!v16)
                  goto LABEL_53;
              }
              else if (!v34)
              {
LABEL_53:
                *((_DWORD *)a3 + 24) = v25;
                *((_QWORD *)a3 + 11) = v26;
                *((_BYTE *)a3 + 100) = v27;
                *((_BYTE *)a3 + 101) = v28;
                *((_BYTE *)a3 + 102) = v29;
                return v16;
              }
              if (*(_BYTE *)(v16 + 16) == 84)
                *(_WORD *)(v16 + 18) = *(_WORD *)(v16 + 18) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
              goto LABEL_53;
            }
          }
        }
      }
    }
  }
  return v16;
}

unsigned __int8 *llvm::LibCallSimplifier::optimizeTan(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t ***v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  unint64_t *v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  BOOL v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t ***v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ****v29;
  uint64_t ***v30;
  int v31;
  int v32;
  uint64_t ***v33;
  char *v34;
  size_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ****v43;
  uint64_t ***v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ****v51;
  uint64_t ***v52;
  int v53;
  int v54;
  uint64_t ***v55;
  int v56;
  int v57;
  uint64_t ***v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t ****v64;
  uint64_t ***v65;
  int v66;
  int v67;
  uint64_t ***v68;
  unsigned int v69;

  v6 = (uint64_t ***)*((_QWORD *)a2 - 4);
  if (!v6 || *((_BYTE *)v6 + 16) || v6[3] != *((uint64_t ***)a2 + 9))
    v6 = 0;
  if ((*((_BYTE *)v6 + 23) & 0x10) == 0)
    goto LABEL_25;
  v7 = ***v6;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if ((_DWORD)v9)
  {
    LODWORD(v10) = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
    v11 = (uint64_t ****)(v8 + 16 * v10);
    v12 = *v11;
    if (*v11 == v6)
      goto LABEL_13;
    v13 = 1;
    while (v12 != (uint64_t ***)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(uint64_t ****)(v8 + 16 * v10);
      if (v12 == v6)
      {
        v11 = (uint64_t ****)(v8 + 16 * v10);
        goto LABEL_13;
      }
    }
  }
  v11 = (uint64_t ****)(v8 + 16 * v9);
LABEL_13:
  v15 = (unint64_t *)v11[1];
  v18 = *v15;
  v16 = v15 + 2;
  v17 = v18;
  if (*((_BYTE *)this + 56))
    v19 = v17 == 3;
  else
    v19 = 0;
  if (!v19
    || (*(_WORD *)v16 == 24948 ? (v20 = v16[2] == 110) : (v20 = 0),
        !v20 || !llvm::LibCallSimplifier::hasFloatVersion((uint64_t)this, v16, v17)))
  {
LABEL_25:
    v21 = 0;
    goto LABEL_26;
  }
  v21 = sub_1C5FBDA94((uint64_t)a2, (uint64_t)a3, 0, 1);
LABEL_26:
  v22 = *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  if (!v22)
    return v21;
  if (*(_BYTE *)(v22 + 16) != 84)
    return v21;
  if (*((unsigned __int8 *)a2 + 17) < 0xFEu)
    return v21;
  if (*(unsigned __int8 *)(v22 + 17) < 0xFEu)
    return v21;
  v69 = 0;
  v23 = *(uint64_t ****)(v22 - 32);
  if (!v23 || *((_BYTE *)v23 + 16) || v23[3] != *(uint64_t ***)(v22 + 72))
    return v21;
  v24 = (uint64_t *)*((_QWORD *)this + 3);
  if ((*((_BYTE *)v23 + 23) & 0x10) == 0)
  {
    v35 = 0;
    v34 = &byte_1C871356D;
    goto LABEL_42;
  }
  v25 = ***v23;
  v26 = *(_QWORD *)(v25 + 152);
  v27 = *(unsigned int *)(v25 + 168);
  if (!(_DWORD)v27)
    goto LABEL_40;
  LODWORD(v28) = (v27 - 1) & ((v23 >> 4) ^ (v23 >> 9));
  v29 = (uint64_t ****)(v26 + 16 * v28);
  v30 = *v29;
  if (*v29 != v23)
  {
    v31 = 1;
    while (v30 != (uint64_t ***)-4096)
    {
      v32 = v28 + v31++;
      v28 = v32 & (v27 - 1);
      v30 = *(uint64_t ****)(v26 + 16 * v28);
      if (v30 == v23)
      {
        v29 = (uint64_t ****)(v26 + 16 * v28);
        goto LABEL_41;
      }
    }
LABEL_40:
    v29 = (uint64_t ****)(v26 + 16 * v27);
  }
LABEL_41:
  v33 = v29[1];
  v36 = (size_t)*v33;
  v34 = (char *)(v33 + 2);
  v35 = v36;
LABEL_42:
  v37 = *v24;
  if (!llvm::TargetLibraryInfoImpl::getLibFunc(*v24, v34, v35, &v69)
    || ((*(_QWORD *)(v24[1] + (((unint64_t)v69 >> 3) & 0x1FFFFFF8)) >> v69) & 1) != 0
    || ((*(unsigned __int8 *)(v37 + ((unint64_t)v69 >> 2)) >> (2 * (v69 & 3))) & 3) == 0)
  {
    return v21;
  }
  if (v69 == 163)
  {
    if ((*((_BYTE *)v6 + 23) & 0x10) == 0)
      return v21;
    v60 = ***v6;
    v61 = *(_QWORD *)(v60 + 152);
    v62 = *(unsigned int *)(v60 + 168);
    if ((_DWORD)v62)
    {
      LODWORD(v63) = (v62 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v64 = (uint64_t ****)(v61 + 16 * v63);
      v65 = *v64;
      if (*v64 == v6)
      {
LABEL_85:
        v68 = v64[1];
        if (*v68 != (uint64_t **)4 || *((_DWORD *)v68 + 4) != 1819173236)
          return v21;
        return *(unsigned __int8 **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF));
      }
      v66 = 1;
      while (v65 != (uint64_t ***)-4096)
      {
        v67 = v63 + v66++;
        v63 = v67 & (v62 - 1);
        v65 = *(uint64_t ****)(v61 + 16 * v63);
        if (v65 == v6)
        {
          v64 = (uint64_t ****)(v61 + 16 * v63);
          goto LABEL_85;
        }
      }
    }
    v64 = (uint64_t ****)(v61 + 16 * v62);
    goto LABEL_85;
  }
  if (v69 == 159)
  {
    if ((*((_BYTE *)v6 + 23) & 0x10) == 0)
      return v21;
    v47 = ***v6;
    v48 = *(_QWORD *)(v47 + 152);
    v49 = *(unsigned int *)(v47 + 168);
    if ((_DWORD)v49)
    {
      LODWORD(v50) = (v49 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v51 = (uint64_t ****)(v48 + 16 * v50);
      v52 = *v51;
      if (*v51 == v6)
      {
LABEL_75:
        v59 = v51[1];
        if (*v59 != (uint64_t **)4 || *((_DWORD *)v59 + 4) != 1718509940)
          return v21;
        return *(unsigned __int8 **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF));
      }
      v53 = 1;
      while (v52 != (uint64_t ***)-4096)
      {
        v54 = v50 + v53++;
        v50 = v54 & (v49 - 1);
        v52 = *(uint64_t ****)(v48 + 16 * v50);
        if (v52 == v6)
        {
          v51 = (uint64_t ****)(v48 + 16 * v50);
          goto LABEL_75;
        }
      }
    }
    v51 = (uint64_t ****)(v48 + 16 * v49);
    goto LABEL_75;
  }
  if (v69 != 155 || (*((_BYTE *)v6 + 23) & 0x10) == 0)
    return v21;
  v39 = ***v6;
  v40 = *(_QWORD *)(v39 + 152);
  v41 = *(unsigned int *)(v39 + 168);
  if (!(_DWORD)v41)
    goto LABEL_66;
  LODWORD(v42) = (v41 - 1) & ((v6 >> 4) ^ (v6 >> 9));
  v43 = (uint64_t ****)(v40 + 16 * v42);
  v44 = *v43;
  if (*v43 != v6)
  {
    v45 = 1;
    while (v44 != (uint64_t ***)-4096)
    {
      v46 = v42 + v45++;
      v42 = v46 & (v41 - 1);
      v44 = *(uint64_t ****)(v40 + 16 * v42);
      if (v44 == v6)
      {
        v43 = (uint64_t ****)(v40 + 16 * v42);
        goto LABEL_67;
      }
    }
LABEL_66:
    v43 = (uint64_t ****)(v40 + 16 * v41);
  }
LABEL_67:
  v55 = v43[1];
  if (*v55 == (uint64_t **)3)
  {
    v56 = *((unsigned __int16 *)v55 + 8);
    v57 = *((unsigned __int8 *)v55 + 18);
    if (v56 == 24948 && v57 == 110)
      return *(unsigned __int8 **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF));
  }
  return v21;
}

uint64_t llvm::LibCallSimplifier::optimizeSinCosPi(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v13;
  llvm::FixedVectorType *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t **v18;
  char *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const llvm::APInt *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::ConstantInt *v33;
  llvm::ValueHandleBase *v34;
  const llvm::APInt *v35;
  uint64_t v36;
  llvm::ConstantInt *v37;
  unint64_t v38;
  char v39;
  llvm::ValueHandleBase *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::ConstantInt *v51;
  llvm::ValueHandleBase *v52;
  uint64_t v53;
  unsigned int v54;
  void *__p[2];
  char v56;
  int v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  llvm::FixedVectorType *v69;
  __int16 v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a2 + 8);
  if (v6 && (*(_BYTE *)(v6 + 16) & 0x20) != 0)
    goto LABEL_5;
  if (!llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 37))
    return 0;
  v6 = *((_QWORD *)a2 + 8);
  if (v6)
  {
LABEL_5:
    if ((*(_BYTE *)(v6 + 17) & 0x10) != 0)
      goto LABEL_8;
  }
  LODWORD(__p[0]) = 7;
  if (!sub_1C53E4BBC((uint64_t)a2, (__int32 *)__p, 1uLL)
    || (v53 = *((_QWORD *)a2 - 4)) != 0
    && !*(_BYTE *)(v53 + 16)
    && *(_QWORD *)(v53 + 24) == *((_QWORD *)a2 + 9)
    && *(_DWORD *)(v53 + 36) == 7)
  {
    if (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44))
    {
LABEL_8:
      v7 = *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
      v65 = &v67;
      v66 = 0x100000000;
      v62 = &v64;
      v63 = 0x100000000;
      v59 = &v61;
      v60 = 0x100000000;
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)v7 + 8);
        v10 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 56);
        do
        {
          llvm::LibCallSimplifier::classifyArgUse((uint64_t)this, *(_QWORD *)(v8 + 24), v10, v9 == 2, (uint64_t)&v65, (uint64_t)&v62, (uint64_t)&v59);
          v8 = *(_QWORD *)(v8 + 8);
        }
        while (v8);
        if ((_DWORD)v66 && (_DWORD)v63 != 0)
        {
          v13 = *((_QWORD *)a2 - 4);
          if (!v13 || *(_BYTE *)(v13 + 16) || *(_QWORD *)(v13 + 24) != *((_QWORD *)a2 + 9))
            v13 = 0;
          v58 = v7;
          v14 = *(llvm::FixedVectorType **)v7;
          v15 = *(_QWORD *)(v13 + 40) + 216;
          v70 = 260;
          v68 = (const char *)v15;
          llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v68);
          if (v9 == 2)
          {
            if (v57 == 42)
            {
              llvm::FixedVectorType::get(v14, (llvm::Type *)2);
            }
            else
            {
              v21 = *(uint64_t **)v14;
              v68 = (const char *)v14;
              v69 = v14;
              v16 = llvm::StructType::get(v21, (uint64_t)&v68, 2, 0);
            }
            v18 = (uint64_t **)v16;
            v19 = "__sincospif_stret";
            v20 = 17;
          }
          else
          {
            v17 = *(uint64_t **)v14;
            v68 = (const char *)v14;
            v69 = v14;
            v18 = (uint64_t **)llvm::StructType::get(v17, (uint64_t)&v68, 2, 0);
            v19 = "__sincospi_stret";
            v20 = 16;
          }
          v22 = (uint64_t **)sub_1C6212CB8(*(_QWORD *)(v13 + 40), (unsigned __int8 *)v19, v20, *(_QWORD *)(v13 + 112), v18, (uint64_t)v14);
          v24 = v23;
          if (*(unsigned __int8 *)(v7 + 16) >= 0x1Cu)
          {
            v27 = *(_QWORD *)(v7 + 32);
            v26 = *(_QWORD *)(v7 + 40);
          }
          else
          {
            v25 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 80);
            if (v25)
              v26 = v25 - 24;
            else
              v26 = 0;
            v27 = *(_QWORD *)(v26 + 48);
          }
          sub_1C4D8AE2C((uint64_t)a3, v26, v27);
          v68 = "sincospi";
          v70 = 259;
          v29 = (uint64_t *)sub_1C4774778((uint64_t *)a3, v22, v24, &v58, 1, (uint64_t)&v68, 0);
          if (*(_BYTE *)(*v29 + 8) == 16)
          {
            v54 = 0;
            v68 = "sinpi";
            v70 = 259;
            v30 = sub_1C506DBC4((uint64_t)a3, v29, &v54, 1, (uint64_t)&v68);
            v54 = 1;
            v68 = "cospi";
            v70 = 259;
            v31 = sub_1C506DBC4((uint64_t)a3, v29, &v54, 1, (uint64_t)&v68);
          }
          else
          {
            v32 = **((_QWORD **)a3 + 8);
            v33 = *(llvm::ConstantInt **)(v32 + 1960);
            LODWORD(v69) = *(_DWORD *)(v32 + 1968) >> 8;
            if (v69 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v68, 0, 0);
            else
              v68 = 0;
            v34 = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v68, v28);
            if (v69 >= 0x41 && v68)
              MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
            v68 = "sinpi";
            v70 = 259;
            v30 = (uint64_t)sub_1C4772EE0((uint64_t *)a3, (uint64_t)v29, (uint64_t)v34, (uint64_t)&v68);
            v36 = **((_QWORD **)a3 + 8);
            v37 = *(llvm::ConstantInt **)(v36 + 1960);
            v38 = *(unsigned int *)(v36 + 1968);
            LODWORD(v69) = v38 >> 8;
            if (v38 >> 8 > 0x40)
            {
              v51 = v37;
              llvm::APInt::initSlowCase((llvm::APInt *)&v68, 1, 0);
              v37 = v51;
            }
            else
            {
              if (v38 <= 0xFF)
                v39 = 0;
              else
                v39 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v38);
              v68 = (const char *)(v39 & 1);
            }
            v40 = llvm::ConstantInt::get(v37, (llvm::LLVMContext *)&v68, v35);
            if (v69 >= 0x41 && v68)
            {
              v52 = v40;
              MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
              v40 = v52;
            }
            v68 = "cospi";
            v70 = 259;
            v31 = (uint64_t)sub_1C4772EE0((uint64_t *)a3, (uint64_t)v29, (uint64_t)v40, (uint64_t)&v68);
          }
          v41 = v31;
          if (v56 < 0)
            operator delete(__p[0]);
          if ((_DWORD)v66)
          {
            v42 = (uint64_t *)v65;
            v43 = 8 * v66;
            do
            {
              v44 = *v42++;
              (*((void (**)(_QWORD, uint64_t, uint64_t))this + 8))(*((_QWORD *)this + 9), v44, v30);
              v43 -= 8;
            }
            while (v43);
          }
          if ((_DWORD)v63)
          {
            v45 = (uint64_t *)v62;
            v46 = 8 * v63;
            do
            {
              v47 = *v45++;
              (*((void (**)(_QWORD, uint64_t, uint64_t))this + 8))(*((_QWORD *)this + 9), v47, v41);
              v46 -= 8;
            }
            while (v46);
          }
          if ((_DWORD)v60)
          {
            v48 = (uint64_t *)v59;
            v49 = 8 * v60;
            do
            {
              v50 = *v48++;
              (*((void (**)(_QWORD, uint64_t, uint64_t *))this + 8))(*((_QWORD *)this + 9), v50, v29);
              v49 -= 8;
            }
            while (v49);
          }
        }
      }
      if (v59 != &v61)
        free(v59);
      if (v62 != &v64)
        free(v62);
      if (v65 != &v67)
        free(v65);
    }
  }
  return 0;
}

uint64_t llvm::LibCallSimplifier::classifyArgUse(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t ***v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ****v19;
  uint64_t ***v20;
  int v21;
  int v22;
  uint64_t ***v23;
  char *v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  __int32 v37;

  if (!a2)
    return result;
  if (*(_BYTE *)(a2 + 16) != 84)
    return result;
  if (!*(_QWORD *)(a2 + 8))
    return result;
  if (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) != a3)
    return result;
  v8 = *(uint64_t ****)(a2 - 32);
  if (!v8)
    return result;
  if (*((_BYTE *)v8 + 16))
    return result;
  v9 = (uint64_t)v8[3];
  if (v9 != *(_QWORD *)(a2 + 72))
    return result;
  v36 = 0;
  if ((*((_BYTE *)v8 + 33) & 0x20) != 0)
    return result;
  v14 = result;
  if ((*((_BYTE *)v8 + 23) & 0x10) != 0)
  {
    v15 = ***v8;
    v16 = *(_QWORD *)(v15 + 152);
    v17 = *(unsigned int *)(v15 + 168);
    if ((_DWORD)v17)
    {
      LODWORD(v18) = (v17 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      v19 = (uint64_t ****)(v16 + 16 * v18);
      v20 = *v19;
      if (*v19 == v8)
      {
LABEL_18:
        v23 = v19[1];
        v26 = (size_t)*v23;
        v24 = (char *)(v23 + 2);
        v25 = v26;
        goto LABEL_19;
      }
      v21 = 1;
      while (v20 != (uint64_t ***)-4096)
      {
        v22 = v18 + v21++;
        v18 = v22 & (v17 - 1);
        v20 = *(uint64_t ****)(v16 + 16 * v18);
        if (v20 == v8)
        {
          v19 = (uint64_t ****)(v16 + 16 * v18);
          goto LABEL_18;
        }
      }
    }
    v19 = (uint64_t ****)(v16 + 16 * v17);
    goto LABEL_18;
  }
  v25 = 0;
  v24 = &byte_1C871356D;
LABEL_19:
  v27 = **(_QWORD **)(result + 24);
  result = llvm::TargetLibraryInfoImpl::getLibFunc(result, v24, v25, &v36);
  if ((_DWORD)result)
  {
    v28 = v9;
    v29 = v36;
    result = llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v27, v28, v36);
    if ((_DWORD)result)
    {
      v30 = *(_QWORD **)(v14 + 24);
      if (((*(_QWORD *)(v30[1] + 8 * (v29 >> 6)) >> v29) & 1) == 0
        && ((*(unsigned __int8 *)(*v30 + (v29 >> 2)) >> (2 * (v29 & 3))) & 3) != 0)
      {
        v31 = *(_QWORD *)(a2 + 64);
        if (v31)
        {
          if ((*(_BYTE *)(v31 + 16) & 0x20) != 0)
            goto LABEL_27;
        }
        result = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 37);
        if (!(_DWORD)result)
          return result;
        v31 = *(_QWORD *)(a2 + 64);
        if (v31)
        {
LABEL_27:
          if ((*(_BYTE *)(v31 + 17) & 0x10) != 0)
            goto LABEL_30;
        }
        v37 = 7;
        result = sub_1C53E4BBC(a2, &v37, 1uLL);
        if ((result & 1) == 0
          || (v35 = *(_QWORD *)(a2 - 32)) != 0
          && !*(_BYTE *)(v35 + 16)
          && *(_QWORD *)(v35 + 24) == *(_QWORD *)(a2 + 72)
          && *(_DWORD *)(v35 + 36) == 7)
        {
          result = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44);
          if ((_DWORD)result)
          {
LABEL_30:
            if (a4)
            {
              if ((_DWORD)v29 != 75)
              {
                if ((_DWORD)v29 != 112)
                {
                  if ((_DWORD)v29 != 117)
                    return result;
LABEL_39:
                  v32 = *(unsigned int *)(a5 + 8);
                  if (v32 >= *(_DWORD *)(a5 + 12))
                  {
                    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v32 + 1, 8);
                    LODWORD(v32) = *(_DWORD *)(a5 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)a5 + 8 * v32) = a2;
                  ++*(_DWORD *)(a5 + 8);
                  return result;
                }
LABEL_42:
                v33 = *(unsigned int *)(a7 + 8);
                if (v33 >= *(_DWORD *)(a7 + 12))
                {
                  result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a7, a7 + 16, v33 + 1, 8);
                  LODWORD(v33) = *(_DWORD *)(a7 + 8);
                }
                *(_QWORD *)(*(_QWORD *)a7 + 8 * v33) = a2;
                ++*(_DWORD *)(a7 + 8);
                return result;
              }
            }
            else if ((_DWORD)v29 != 74)
            {
              if ((_DWORD)v29 != 111)
              {
                if ((_DWORD)v29 != 116)
                  return result;
                goto LABEL_39;
              }
              goto LABEL_42;
            }
            v34 = *(unsigned int *)(a6 + 8);
            if (v34 >= *(_DWORD *)(a6 + 12))
            {
              result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v34 + 1, 8);
              LODWORD(v34) = *(_DWORD *)(a6 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a6 + 8 * v34) = a2;
            ++*(_DWORD *)(a6 + 8);
          }
        }
      }
    }
  }
  return result;
}

llvm::Value *llvm::LibCallSimplifier::optimizeFFS(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  llvm::Constant **v4;
  uint64_t Declaration;
  const llvm::APInt *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  llvm::ValueHandleBase *v11;
  uint64_t v12;
  llvm::Value **v13;
  unsigned __int8 *v14;
  char *v15;
  llvm::Value **v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  llvm::Value *v21;
  _QWORD *v22;
  llvm::Value *v23;
  uint64_t v24;
  uint64_t *v25;
  llvm::Type *v26;
  llvm::Value **NullValue;
  const llvm::APInt *v28;
  uint64_t v29;
  uint64_t v30;
  llvm::ConstantInt *v31;
  llvm::ValueHandleBase *v32;
  llvm::ConstantInt *v34;
  unsigned int v35;
  char v36;
  llvm::Constant *v37;
  const char *v38;
  unsigned int v39;
  __int16 v40;
  uint64_t v41[4];
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::Constant **)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v37 = *v4;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*((_QWORD *)a2 - 4) + 40), 54, (uint64_t *)&v37, 1);
  v7 = Declaration;
  if (Declaration)
    v8 = *(uint64_t ***)(Declaration + 24);
  else
    v8 = 0;
  v41[0] = (uint64_t)v4;
  v9 = (uint64_t *)*((_QWORD *)a3 + 8);
  v10 = *v9;
  v11 = *(llvm::ValueHandleBase **)(*v9 + 1560);
  if (!v11)
  {
    v34 = *(llvm::ConstantInt **)(v10 + 1888);
    v35 = *(_DWORD *)(v10 + 1896);
    v39 = v35 >> 8;
    if (v35 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v38, 1, 0);
    }
    else
    {
      if (v35 <= 0xFF)
        v36 = 0;
      else
        v36 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v35);
      v38 = (const char *)(v36 & 1);
    }
    v11 = llvm::ConstantInt::get(v34, (llvm::LLVMContext *)&v38, v6);
    if (v39 >= 0x41 && v38)
      MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
    *(_QWORD *)(v10 + 1560) = v11;
  }
  v41[1] = (uint64_t)v11;
  v38 = "cttz";
  v40 = 259;
  v12 = sub_1C4774778((uint64_t *)a3, v8, v7, v41, 2, (uint64_t)&v38, 0);
  v13 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v12, 1, 0);
  v42 = 257;
  v14 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value **, _QWORD, _QWORD))(**((_QWORD **)a3 + 9) + 16))(*((_QWORD *)a3 + 9), v12, v13, 0, 0);
  if (!v14)
  {
    v40 = 257;
    v15 = (char *)operator new(0x80uLL);
    *((_QWORD *)v15 + 6) = 0;
    *((_QWORD *)v15 + 5) = 0;
    v16 = (llvm::Value **)(v15 + 40);
    *((_QWORD *)v15 + 8) = *(_QWORD *)v12;
    v17 = (uint64_t)(v15 + 64);
    *((_QWORD *)v15 + 3) = v15 + 64;
    *((_QWORD *)v15 + 7) = v15 + 64;
    *((_QWORD *)v15 + 9) = 0;
    v15[80] = 41;
    v15[81] = 0;
    *((_WORD *)v15 + 41) = 0;
    *((_DWORD *)v15 + 21) = 2;
    *(_OWORD *)(v15 + 88) = 0u;
    *(_OWORD *)(v15 + 104) = 0u;
    *((_DWORD *)v15 + 30) = 0;
    *(_QWORD *)v15 = v12;
    v20 = *(_QWORD *)(v12 + 8);
    v19 = (_QWORD *)(v12 + 8);
    v18 = v20;
    *((_QWORD *)v15 + 1) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = v15 + 8;
    *((_QWORD *)v15 + 2) = v19;
    *v19 = v15;
    *((_QWORD *)v15 + 4) = v13;
    if (v13)
    {
      v23 = v13[1];
      v22 = v13 + 1;
      v21 = v23;
      *v16 = v23;
      if (v23)
        *((_QWORD *)v21 + 2) = v16;
      *((_QWORD *)v15 + 6) = v22;
      *v22 = v15 + 32;
    }
    llvm::Value::setName((uint64_t ***)v15 + 8, (uint64_t)&v38);
    v14 = (unsigned __int8 *)sub_1C4773754((uint64_t *)a3, v17, (uint64_t)v41);
  }
  v24 = **((_QWORD **)a3 + 8) + 1960;
  v40 = 257;
  v25 = (uint64_t *)sub_1C4D8D514((uint64_t *)a3, v14, v24, 0, (uint64_t)&v38);
  NullValue = llvm::Constant::getNullValue(v37, v26);
  v40 = 257;
  v29 = sub_1C4774B48((uint64_t)a3, 33, (uint64_t)v4, (uint64_t)NullValue, (uint64_t)&v38);
  v30 = **((_QWORD **)a3 + 8);
  v31 = *(llvm::ConstantInt **)(v30 + 1960);
  v39 = *(_DWORD *)(v30 + 1968) >> 8;
  if (v39 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v38, 0, 0);
  else
    v38 = 0;
  v32 = llvm::ConstantInt::get(v31, (llvm::LLVMContext *)&v38, v28);
  if (v39 >= 0x41 && v38)
    MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
  v40 = 257;
  return llvm::IRBuilderBase::CreateSelect((uint64_t *)a3, v29, v25, (uint64_t)v32, (uint64_t)&v38, 0);
}

unsigned __int8 *llvm::LibCallSimplifier::optimizeFls(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t *v5;
  uint64_t Declaration;
  const llvm::APInt *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  llvm::ValueHandleBase *v12;
  llvm::ConstantInt **v13;
  llvm::Value **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  llvm::ConstantInt *v18;
  llvm::ConstantInt *v19;
  llvm::ValueHandleBase *v20;
  const char *v21;
  unsigned int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v24 = *v5;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*((_QWORD *)a2 - 4) + 40), 52, &v24, 1);
  v8 = Declaration;
  if (Declaration)
    v9 = *(uint64_t ***)(Declaration + 24);
  else
    v9 = 0;
  v25[0] = (uint64_t)v5;
  v10 = (uint64_t *)*((_QWORD *)a3 + 8);
  v11 = *v10;
  v12 = *(llvm::ValueHandleBase **)(*v10 + 1568);
  if (!v12)
  {
    v18 = *(llvm::ConstantInt **)(v11 + 1888);
    v22 = *(_DWORD *)(v11 + 1896) >> 8;
    if (v22 > 0x40)
    {
      v19 = v18;
      llvm::APInt::initSlowCase((llvm::APInt *)&v21, 0, 0);
      v18 = v19;
    }
    else
    {
      v21 = 0;
    }
    v12 = llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&v21, v7);
    if (v22 >= 0x41 && v21)
    {
      v20 = v12;
      MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
      v12 = v20;
    }
    *(_QWORD *)(v11 + 1568) = v12;
  }
  v25[1] = (uint64_t)v12;
  v21 = "ctlz";
  v23 = 259;
  v13 = (llvm::ConstantInt **)sub_1C4774778((uint64_t *)a3, v9, v8, v25, 2, (uint64_t)&v21, 0);
  v14 = llvm::ConstantInt::get(*v13, (unint64_t)*(unsigned int *)(v24 + 8) >> 8, 0);
  v23 = 257;
  v15 = (unsigned __int8 *)sub_1C47733F8((uint64_t)a3, (uint64_t)v14, (uint64_t)v13, (uint64_t)&v21, 0, 0);
  v16 = *(_QWORD *)a2;
  v23 = 257;
  return sub_1C4D8D514((uint64_t *)a3, v15, v16, 0, (uint64_t)&v21);
}

uint64_t llvm::LibCallSimplifier::optimizeToAscii(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  _QWORD *v4;
  llvm::Value **v5;
  _BYTE v7[32];
  __int16 v8;

  v4 = (_QWORD *)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v5 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, 127, 0);
  v8 = 257;
  return sub_1C4D89BCC((uint64_t)a3, v4, (uint64_t)v5, (uint64_t)v7);
}

llvm::Value **sub_1C5FB919C(llvm::Type **a1, void *__src, size_t __n, uint64_t a4)
{
  int v4;
  llvm::Value **v8;
  void *p_p;
  const char *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  const char *v15;
  int PrimitiveSizeInBits;
  uint64_t v17;
  void *__p;
  size_t v19;
  int64_t v20;
  char *__endptr;

  v4 = a4;
  if (a4 && (unint64_t)(a4 - 37) < 0xFFFFFFFFFFFFFFDDLL)
    return 0;
  __endptr = 0;
  if (__src)
  {
    if (__n >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__n >= 0x17)
    {
      v11 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__n | 7) != 0x17)
        v11 = __n | 7;
      v12 = v11 + 1;
      p_p = operator new(v11 + 1);
      v19 = __n;
      v20 = v12 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v20) = __n;
      p_p = &__p;
      if (!__n)
      {
LABEL_14:
        *((_BYTE *)p_p + __n) = 0;
        if (v20 >= 0)
          v10 = (const char *)&__p;
        else
          v10 = (const char *)__p;
        goto LABEL_17;
      }
    }
    memcpy(p_p, __src, __n);
    goto LABEL_14;
  }
  __p = 0;
  v19 = 0;
  v10 = (const char *)&__p;
  v20 = 0;
LABEL_17:
  *__error() = 0;
  v13 = strtoll(v10, &__endptr, v4);
  if (*__error() || *__endptr)
  {
    v8 = 0;
  }
  else
  {
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*a1);
    if ((_DWORD)v15 == 1)
    if ((PrimitiveSizeInBits & 0xFFFFFFC0) != 0
      || (v8 = 0, v17 = -1 << (PrimitiveSizeInBits - 1), v17 <= v13) && v13 <= ~v17)
    {
      v8 = llvm::ConstantInt::get(*a1, v13, 0);
    }
  }
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  return v8;
}

llvm::Value **llvm::LibCallSimplifier::optimizeStrtol(llvm::LibCallSimplifier *this, llvm **a2, llvm::IRBuilderBase *a3)
{
  llvm **v4;
  llvm *v5;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  size_t v11;

  v10 = 0;
  v11 = 0;
  if (!llvm::getConstantStringInfo(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (const llvm::Value *)&v10, 0, 1))return 0;
  v4 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  if (*((_BYTE *)v4[4] + 16) != 19)
    return 0;
  v5 = v4[8];
  if (!v5 || *((_BYTE *)v5 + 16) != 16)
    return 0;
  v8 = *((_DWORD *)v5 + 8);
  if (v8 > 0x40)
    v9 = **((_QWORD **)v5 + 3);
  else
    v9 = (uint64_t)(*((_QWORD *)v5 + 3) << -(char)v8) >> -(char)v8;
  return sub_1C5FB919C(a2, v10, v11, v9);
}

uint64_t llvm::LibCallSimplifier::optimizeErrorReporting(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  char hasFnAttrOnCalledFunction;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t ***v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ****v23;
  uint64_t ***v24;
  int v25;
  int v26;
  uint64_t ***v27;
  int v28;
  int v29;
  char *v32;
  uint64_t v33;

  v6 = *((_QWORD *)a2 - 4);
  if (!v6 || *(_BYTE *)(v6 + 16) || *(_QWORD *)(v6 + 24) != *((_QWORD *)a2 + 9))
    v6 = 0;
  v7 = *((_QWORD *)a2 + 8);
  if (!v7 || (*(_BYTE *)(v7 + 12) & 0x20) == 0)
  {
    hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 5);
    if (v6)
    {
      if ((hasFnAttrOnCalledFunction & 1) == 0)
      {
        if (*(_BYTE *)(v6 + 16))
        {
          if (*(_BYTE *)(v6 + 16) != 3 || (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) != 0)
            return 0;
        }
        else if (*(_QWORD *)(v6 + 72) != v6 + 72 || (*(_BYTE *)(v6 + 34) & 0x80) != 0)
        {
          return 0;
        }
        if (a4 < 0)
          goto LABEL_41;
        v9 = *((unsigned __int8 *)a2 + 16);
        if (v9 == 84)
        {
          v10 = 0;
        }
        else if (v9 == 39)
        {
          v10 = (*((_DWORD *)a2 + 20) + 1);
        }
        else
        {
          v10 = 2;
        }
        v11 = 0;
        v12 = *((_DWORD *)a2 + 5);
        v13 = -(uint64_t)(v12 & 0x7FFFFFF);
        if (v12 < 0)
        {
          v32 = (char *)a2 - 32 * (v12 & 0x7FFFFFF);
          v33 = *((_QWORD *)v32 - 1);
          if ((v33 & 0xFFFFFFFF0) != 0)
            v11 = *((_DWORD *)v32 - 3) - *(_DWORD *)&v32[-v33];
          else
            v11 = 0;
        }
        v14 = (char *)a2 + 32 * -v11 + -32 * v10;
        v15 = (char *)a2 + 32 * v13;
        if ((int)((unint64_t)(v14 - v15 - 32) >> 5) > a4)
        {
          v16 = *(_QWORD *)&v15[32 * a4];
          if (v16)
          {
            if (*(_BYTE *)(v16 + 16) == 60)
            {
              v17 = *(uint64_t ****)(v16 - 32);
              v18 = v17 && *((_BYTE *)v17 + 16) == 3;
              if (v18 && (*((_DWORD *)v17 + 5) & 0x17FFFFFF) == 0x10000000)
              {
                v19 = ***v17;
                v20 = *(_QWORD *)(v19 + 152);
                v21 = *(unsigned int *)(v19 + 168);
                if ((_DWORD)v21)
                {
                  LODWORD(v22) = (v21 - 1) & ((v17 >> 4) ^ (v17 >> 9));
                  v23 = (uint64_t ****)(v20 + 16 * v22);
                  v24 = *v23;
                  if (*v23 == v17)
                  {
LABEL_35:
                    v27 = v23[1];
                    if (*v27 != (uint64_t **)6)
                      return 0;
                    v28 = *((_DWORD *)v27 + 4);
                    v29 = *((unsigned __int16 *)v27 + 10);
                    if (v28 != 1701082227 || v29 != 29298)
                      return 0;
LABEL_41:
                    *((_QWORD *)a2 + 8) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a2 + 8, **(uint64_t ***)a2, -1, 5);
                    return 0;
                  }
                  v25 = 1;
                  while (v24 != (uint64_t ***)-4096)
                  {
                    v26 = v22 + v25++;
                    v22 = v26 & (v21 - 1);
                    v24 = *(uint64_t ****)(v20 + 16 * v22);
                    if (v24 == v17)
                    {
                      v23 = (uint64_t ****)(v20 + 16 * v22);
                      goto LABEL_35;
                    }
                  }
                }
                v23 = (uint64_t ****)(v20 + 16 * v21);
                goto LABEL_35;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

llvm::Value **llvm::LibCallSimplifier::optimizePrintFString(llvm::LibCallSimplifier *this, llvm **a2, llvm::IRBuilderBase *a3)
{
  const llvm::APInt *v6;
  int ConstantStringInfo;
  llvm::Value **result;
  size_t v9;
  llvm *v10;
  size_t v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  llvm::ConstantInt *v16;
  unsigned int v17;
  unint64_t v18;
  llvm::ValueHandleBase *v19;
  uint64_t *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  llvm **v27;
  llvm **v28;
  int v29;
  unint64_t v30;
  _BYTE *v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  llvm **v37;
  llvm **v38;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  llvm **v45;
  llvm **v46;
  char *GlobalString;
  llvm::Type *v48;
  llvm::IRBuilderBase *v49;
  char *v50;
  llvm **v51;
  uint64_t v52;
  llvm **v53;
  uint64_t v54;
  llvm **v55;
  uint64_t v56;
  const char *v57;
  unsigned int v58;
  __int16 v59;
  char *v60;
  llvm::Type *v61;
  void *__s;
  size_t __n;

  __s = 0;
  __n = 0;
  ConstantStringInfo = llvm::getConstantStringInfo(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (const llvm::Value *)&__s, 0, 1);
  result = 0;
  if (ConstantStringInfo)
  {
    v9 = __n;
    v10 = a2[1];
    if (__n)
    {
      if (v10)
        return 0;
      v11 = __n - 1;
      if (__n == 1)
      {
        v12 = (char *)__s;
LABEL_9:
        v13 = *v12;
LABEL_10:
        v14 = **((_QWORD **)a3 + 8);
        v15 = v13;
        v16 = *(llvm::ConstantInt **)(v14 + 1960);
        v17 = *(_DWORD *)(v14 + 1968);
        v58 = v17 >> 8;
        if (v17 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v57, v15, 0);
        }
        else
        {
          if (v17 <= 0xFF)
            v18 = 0;
          else
            v18 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v17);
          v57 = (const char *)(v18 & v15);
        }
        v19 = llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v57, v6);
        if (v58 >= 0x41 && v57)
          MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
        v20 = (uint64_t *)*((_QWORD *)this + 3);
        v21 = (unsigned __int8 *)v19;
        goto LABEL_17;
      }
      v12 = (char *)__s;
      if (__n != 2)
        goto LABEL_36;
      if (*(_WORD *)__s == 9509)
        goto LABEL_9;
      if (*(_WORD *)__s != 29477)
      {
        if (*((_BYTE *)__s + 1) != 10)
        {
LABEL_41:
          if (*(_WORD *)v12 != 25381)
            return 0;
          v32 = *((unsigned __int8 *)a2 + 16);
          if (v32 == 84)
          {
            v33 = 0;
          }
          else if (v32 == 39)
          {
            v33 = (*((_DWORD *)a2 + 20) + 1);
          }
          else
          {
            v33 = 2;
          }
          v34 = 0;
          v35 = *((_DWORD *)a2 + 5);
          v36 = -(uint64_t)(v35 & 0x7FFFFFF);
          if (v35 < 0)
          {
            v53 = &a2[-4 * (v35 & 0x7FFFFFF)];
            v54 = (uint64_t)*(v53 - 1);
            if ((v54 & 0xFFFFFFFF0) != 0)
              v34 = *((_DWORD *)v53 - 3) - *(_DWORD *)((char *)v53 - v54);
            else
              v34 = 0;
          }
          v37 = &a2[4 * -v34] - 4 * v33;
          v38 = &a2[4 * v36];
          if ((((char *)v37 - (char *)v38 - 32) & 0x1FFFFFFFC0) == 0)
            return 0;
          v21 = (unsigned __int8 *)v38[4];
          if (*(_BYTE *)(*(_QWORD *)v21 + 8) != 13)
            return 0;
          v20 = (uint64_t *)*((_QWORD *)this + 3);
LABEL_17:
          result = (llvm::Value **)llvm::emitPutChar(v21, (uint64_t)a3, v20);
          if (!result)
            return result;
LABEL_18:
          if (*((_BYTE *)result + 16) == 84)
            *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
          return result;
        }
        v11 = 1;
LABEL_37:
        v31 = memchr(__s, 37, __n);
        if (v31 && v31 - v12 != -1)
          goto LABEL_39;
        if (v9 >= v11)
          v48 = (llvm::Type *)v11;
        else
          v48 = (llvm::Type *)v9;
        v57 = "str";
        v59 = 259;
        v49 = a3;
        v50 = v12;
LABEL_63:
        GlobalString = llvm::IRBuilderBase::CreateGlobalString((uint64_t)v49, v50, v48, (uint64_t)&v57, 0, 0);
        goto LABEL_64;
      }
      v22 = *((unsigned __int8 *)a2 + 16);
      if (v22 == 84)
        v23 = 0;
      else
        v23 = v22 == 39 ? (*((_DWORD *)a2 + 20) + 1) : 2;
      v24 = *((_DWORD *)a2 + 5);
      if (v24 < 0 && (v51 = &a2[-4 * (v24 & 0x7FFFFFF)], v52 = (uint64_t)*(v51 - 1), (v52 & 0xFFFFFFFF0) != 0))
      {
        v26 = -(uint64_t)(v24 & 0x7FFFFFF);
        v25 = *((_DWORD *)v51 - 3) - *(_DWORD *)((char *)v51 - v52);
      }
      else
      {
        v25 = 0;
        v26 = -(uint64_t)(v24 & 0x7FFFFFF);
      }
      v27 = &a2[4 * -v25] - 4 * v23;
      v28 = &a2[4 * v26];
      if ((((char *)v27 - (char *)v28 - 32) & 0x1FFFFFFFC0) == 0)
      {
LABEL_36:
        if (*((_BYTE *)__s + v11) != 10)
        {
LABEL_39:
          if (v9 != 3)
          {
            if (v9 != 2)
              return 0;
            goto LABEL_41;
          }
          if (*(_WORD *)v12 != 29477 || v12[2] != 10)
            return 0;
          v40 = *((unsigned __int8 *)a2 + 16);
          if (v40 == 84)
          {
            v41 = 0;
          }
          else if (v40 == 39)
          {
            v41 = (*((_DWORD *)a2 + 20) + 1);
          }
          else
          {
            v41 = 2;
          }
          v42 = 0;
          v43 = *((_DWORD *)a2 + 5);
          v44 = -(uint64_t)(v43 & 0x7FFFFFF);
          if (v43 < 0)
          {
            v55 = &a2[-4 * (v43 & 0x7FFFFFF)];
            v56 = (uint64_t)*(v55 - 1);
            if ((v56 & 0xFFFFFFFF0) != 0)
              v42 = *((_DWORD *)v55 - 3) - *(_DWORD *)((char *)v55 - v56);
            else
              v42 = 0;
          }
          v45 = &a2[4 * -v42] - 4 * v41;
          v46 = &a2[4 * v44];
          if ((((char *)v45 - (char *)v46 - 32) & 0x1FFFFFFFC0) == 0)
            return 0;
          GlobalString = (char *)v46[4];
          if (*(_BYTE *)(*(_QWORD *)GlobalString + 8) != 15)
            return 0;
LABEL_64:
          result = (llvm::Value **)llvm::emitPutS((llvm *)GlobalString, (uint64_t)a3, *((uint64_t **)this + 3));
          if (!result)
            return result;
          goto LABEL_18;
        }
        goto LABEL_37;
      }
      v60 = 0;
      v61 = 0;
      v29 = llvm::getConstantStringInfo(v28[4], (const llvm::Value *)&v60, 0, 1);
      result = 0;
      if (!v29)
        return result;
      if (v61)
      {
        v30 = (unint64_t)v61 - 1;
        if (v61 == (llvm::Type *)1)
        {
          v13 = *v60;
          goto LABEL_10;
        }
        v50 = v60;
        if (v60[v30] != 10)
          return 0;
        if ((unint64_t)v61 >= v30)
          v48 = (llvm::Type *)((char *)v61 - 1);
        else
          v48 = v61;
        v57 = "str";
        v59 = 259;
        v49 = a3;
        goto LABEL_63;
      }
    }
    else if (v10)
    {
      return llvm::ConstantInt::get(*a2, 0, 0);
    }
    return a2;
  }
  return result;
}

BOOL sub_1C5FB9B04(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BOOL8 result;
  BOOL v8;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x40000000) == 0)
  {
    v2 = v1 & 0x7FFFFFF;
    v3 = (uint64_t *)(a1 - 32 * v2);
    if (v2)
      goto LABEL_3;
    return 0;
  }
  v3 = *(uint64_t **)(a1 - 8);
  v2 = v1 & 0x7FFFFFF;
  if (!v2)
    return 0;
LABEL_3:
  v4 = 32 * v2 - 32;
  do
  {
    v5 = *v3;
    v3 += 4;
    v6 = *(unsigned __int8 *)(*(_QWORD *)v5 + 8);
    result = v6 < 7;
    v8 = v6 < 7 || v4 == 0;
    v4 -= 32;
  }
  while (!v8);
  return result;
}

BOOL sub_1C5FB9B58(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL8 result;
  BOOL v8;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x40000000) == 0)
  {
    v2 = v1 & 0x7FFFFFF;
    v3 = (uint64_t *)(a1 - 32 * v2);
    if (v2)
      goto LABEL_3;
    return 0;
  }
  v3 = *(uint64_t **)(a1 - 8);
  v2 = v1 & 0x7FFFFFF;
  if (!v2)
    return 0;
LABEL_3:
  v4 = 32 * v2 - 32;
  do
  {
    v5 = *v3;
    v3 += 4;
    v6 = *(unsigned __int8 *)(*(_QWORD *)v5 + 8);
    result = v6 == 5;
    v8 = v6 == 5 || v4 == 0;
    v4 -= 32;
  }
  while (!v8);
  return result;
}

llvm::Value **llvm::LibCallSimplifier::optimizeSPrintFString(llvm::LibCallSimplifier *this, llvm **a2, llvm::IRBuilderBase *a3)
{
  int ConstantStringInfo;
  llvm::Value **result;
  int v8;
  llvm **v9;
  llvm::Value *v10;
  int v11;
  uint64_t v12;
  int v13;
  size_t v14;
  _BYTE *v15;
  _BYTE *v16;
  llvm::Value *v17;
  _QWORD *IntPtrType;
  const llvm::APInt *v19;
  uint64_t v20;
  llvm::ConstantInt *v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t *v24;
  llvm::ConstantInt *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t *v32;
  llvm::IRBuilderBase *v33;
  uint64_t *v34;
  char v35;
  char v36;
  char *v37;
  char *v38;
  uint64_t **v39;
  llvm::Value *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t ***v44;
  uint64_t v45;
  const llvm::APInt *v46;
  uint64_t v47;
  uint64_t v48;
  llvm::GetElementPtrInst *v49;
  llvm::ConstantInt *v50;
  unint64_t v51;
  char v52;
  llvm::ValueHandleBase *v53;
  const llvm::APInt *v54;
  uint64_t ***v55;
  uint64_t v56;
  llvm::ConstantInt *v57;
  uint64_t *v58;
  char v59;
  char v60;
  char *v61;
  char *v62;
  uint64_t ****v63;
  llvm::Value *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t **v68;
  uint64_t *****v69;
  uint64_t **v70;
  uint64_t v71;
  llvm *v72;
  uint64_t StringLength;
  llvm **v74;
  llvm::Value *v75;
  uint64_t v76;
  _QWORD *v77;
  const llvm::APInt *v78;
  llvm::ConstantInt *v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  llvm::BasicBlock *v84;
  uint64_t v85;
  llvm::Value **v86;
  llvm::Value **v87;
  uint64_t *v88;
  char *v89;
  llvm::Value **v90;
  uint64_t v91;
  _QWORD *v92;
  llvm::Value *v93;
  llvm::Value *v94;
  _QWORD *v95;
  llvm::Value *v96;
  llvm *v97;
  uint64_t *v98;
  unsigned __int8 *PtrDiff;
  _QWORD *v100;
  uint64_t v101;
  unsigned __int8 **v102;
  int v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  _QWORD *v106;
  uint64_t v107;
  unsigned __int8 **v108;
  int v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  uint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  unsigned __int8 *v117;
  llvm::Type *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[4];
  __int16 v124;
  void *__s;
  size_t __n;
  const char *v127;
  unsigned int v128;
  __int16 v129;

  __s = 0;
  __n = 0;
  ConstantStringInfo = llvm::getConstantStringInfo(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4], (const llvm::Value *)&__s, 0, 1);
  result = 0;
  if (!ConstantStringInfo)
    return result;
  v8 = *((_DWORD *)a2 + 5);
  v9 = &a2[-4 * (v8 & 0x7FFFFFF)];
  v10 = *v9;
  v11 = *((unsigned __int8 *)a2 + 16);
  if (v11 == 84)
  {
    v12 = 0;
  }
  else if (v11 == 39)
  {
    v12 = (*((_DWORD *)a2 + 20) + 1);
  }
  else
  {
    v12 = 2;
  }
  if (v8 < 0 && (v119 = (uint64_t)*(v9 - 1), (v119 & 0xFFFFFFFF0) != 0))
    v13 = *((_DWORD *)v9 - 3) - *(_DWORD *)((char *)v9 - v119);
  else
    v13 = 0;
  v14 = __n;
  if (((-32 * v12 + 32 * -v13 - -32 * (v8 & 0x7FFFFFF) - 32) & 0x1FFFFFFFE0) == 0x40)
  {
    if (!__n || (v15 = __s, (v16 = memchr(__s, 37, __n)) == 0) || v16 - v15 == -1)
    {
      v17 = v9[4];
      IntPtrType = llvm::DataLayout::getIntPtrType(*((llvm::DataLayout **)this + 2), *(llvm::LLVMContext **)*a2, 0);
      v20 = v14 + 1;
      v21 = (llvm::ConstantInt *)*IntPtrType;
      v22 = *((_DWORD *)IntPtrType + 2);
      v128 = v22 >> 8;
      if (v22 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v127, v20, 0);
      }
      else
      {
        if (v22 <= 0xFF)
          v23 = 0;
        else
          v23 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v22);
        v127 = (const char *)(v23 & v20);
      }
      v24 = (uint64_t *)llvm::ConstantInt::get(v21, (llvm::LLVMContext *)&v127, v19);
      if (v128 >= 0x41)
      {
        if (v127)
          MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
      }
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v10, 256, v17, 256, v24, 0, 0, 0, 0, 0);
      v25 = *a2;
      v26 = v14;
      return llvm::ConstantInt::get(v25, v26, 0);
    }
    return 0;
  }
  if (__n != 2 || *(_BYTE *)__s != 37)
    return 0;
  if (v11 == 84)
    v27 = 0;
  else
    v27 = v11 == 39 ? (*((_DWORD *)a2 + 20) + 1) : 2;
  if (v8 < 0 && (v120 = (uint64_t)*(v9 - 1), (v120 & 0xFFFFFFFF0) != 0))
    v28 = *((_DWORD *)v9 - 3) - *(_DWORD *)((char *)v9 - v120);
  else
    v28 = 0;
  if (((unint64_t)((char *)(&a2[4 * -v28] - 4 * v27) - (char *)v9 - 32) >> 5) < 3)
    return 0;
  v29 = *((unsigned __int8 *)__s + 1);
  if (v29 != 115)
  {
    if (v29 == 99)
    {
      v30 = (unsigned __int8 *)v9[8];
      if (*(_BYTE *)(*(_QWORD *)v30 + 8) == 13)
      {
        v31 = **((_QWORD **)a3 + 8) + 1912;
        v127 = "char";
        v129 = 259;
        v32 = (uint64_t *)sub_1C4773E38((uint64_t *)a3, 38, v30, v31, (uint64_t)&v127);
        v34 = (uint64_t *)llvm::castToCStr(v10, a3, v33);
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, *v32);
        v36 = v35;
        v37 = (char *)operator new(0x80uLL);
        v38 = v37;
        *((_DWORD *)v37 + 21) = *((_DWORD *)v37 + 21) & 0x38000000 | 2;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 2) = 0;
        *((_QWORD *)v37 + 1) = 0;
        *((_QWORD *)v37 + 5) = 0;
        *((_QWORD *)v37 + 6) = 0;
        *((_QWORD *)v37 + 4) = 0;
        v39 = (uint64_t **)(v37 + 32);
        *((_QWORD *)v37 + 8) = **(_QWORD **)*v32 + 1576;
        v40 = (llvm::Value *)(v37 + 64);
        *((_QWORD *)v37 + 3) = v37 + 64;
        *((_QWORD *)v37 + 7) = v37 + 64;
        *((_QWORD *)v37 + 9) = 0;
        v37[80] = 61;
        v37[81] = 0;
        *((_WORD *)v37 + 41) = 0;
        *((_DWORD *)v37 + 21) = 2;
        *(_OWORD *)(v37 + 88) = 0u;
        *(_OWORD *)(v37 + 104) = 0u;
        *((_DWORD *)v37 + 30) = 0;
        *(_QWORD *)v37 = v32;
        v43 = v32[1];
        v42 = v32 + 1;
        v41 = v43;
        *((_QWORD *)v37 + 1) = v43;
        if (v43)
          *(_QWORD *)(v41 + 16) = v37 + 8;
        *((_QWORD *)v37 + 2) = v42;
        *v42 = v37;
        if (*((_QWORD *)v37 + 4))
        {
          **((_QWORD **)v37 + 6) = *((_QWORD *)v37 + 5);
          v121 = *((_QWORD *)v37 + 5);
          if (v121)
            *(_QWORD *)(v121 + 16) = *((_QWORD *)v37 + 6);
        }
        *v39 = v34;
        if (v34)
        {
          v44 = (uint64_t ***)(v34 + 1);
          v45 = v34[1];
          *((_QWORD *)v37 + 5) = v45;
          if (v45)
            *(_QWORD *)(v45 + 16) = v37 + 40;
          *((_QWORD *)v37 + 6) = v44;
          *v44 = v39;
        }
        *((_WORD *)v37 + 41) = 2 * (v36 & 0x3F);
        v37[124] = 1;
        v129 = 257;
        (*(void (**)(_QWORD, llvm::Value *, const char **, _QWORD, _QWORD))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v40, &v127, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
        v47 = *((unsigned int *)a3 + 2);
        if (!(_DWORD)v47)
        {
LABEL_36:
          v48 = **((_QWORD **)a3 + 8);
          v49 = (llvm::GetElementPtrInst *)(v48 + 1912);
          v50 = *(llvm::ConstantInt **)(v48 + 1960);
          v51 = *(unsigned int *)(v48 + 1968);
          v128 = v51 >> 8;
          if (v51 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v127, 1, 0);
          }
          else
          {
            if (v51 <= 0xFF)
              v52 = 0;
            else
              v52 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v51);
            v127 = (const char *)(v52 & 1);
          }
          v53 = llvm::ConstantInt::get(v50, (llvm::LLVMContext *)&v127, v46);
          if (v128 >= 0x41 && v127)
            MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
          v127 = "nul";
          v129 = 259;
          v55 = sub_1C4867B70((uint64_t *)a3, v49, v34, (uint64_t)v53, (uint64_t)&v127);
          v56 = **((_QWORD **)a3 + 8);
          v57 = *(llvm::ConstantInt **)(v56 + 1912);
          v128 = *(_DWORD *)(v56 + 1920) >> 8;
          if (v128 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v127, 0, 0);
          else
            v127 = 0;
          v58 = (uint64_t *)llvm::ConstantInt::get(v57, (llvm::LLVMContext *)&v127, v54);
          if (v128 >= 0x41 && v127)
            MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, *v58);
          v60 = v59;
          v61 = (char *)operator new(0x80uLL);
          v62 = v61;
          *((_DWORD *)v61 + 21) = *((_DWORD *)v61 + 21) & 0x38000000 | 2;
          *(_QWORD *)v61 = 0;
          *((_QWORD *)v61 + 2) = 0;
          *((_QWORD *)v61 + 1) = 0;
          *((_QWORD *)v61 + 5) = 0;
          *((_QWORD *)v61 + 6) = 0;
          *((_QWORD *)v61 + 4) = 0;
          v63 = (uint64_t ****)(v61 + 32);
          *((_QWORD *)v61 + 8) = **(_QWORD **)*v58 + 1576;
          v64 = (llvm::Value *)(v61 + 64);
          *((_QWORD *)v61 + 3) = v61 + 64;
          *((_QWORD *)v61 + 7) = v61 + 64;
          *((_QWORD *)v61 + 9) = 0;
          v61[80] = 61;
          v61[81] = 0;
          *((_WORD *)v61 + 41) = 0;
          *((_DWORD *)v61 + 21) = 2;
          *(_OWORD *)(v61 + 88) = 0u;
          *(_OWORD *)(v61 + 104) = 0u;
          *((_DWORD *)v61 + 30) = 0;
          *(_QWORD *)v61 = v58;
          v67 = v58[1];
          v66 = v58 + 1;
          v65 = v67;
          *((_QWORD *)v61 + 1) = v67;
          if (v67)
            *(_QWORD *)(v65 + 16) = v61 + 8;
          *((_QWORD *)v61 + 2) = v66;
          *v66 = v61;
          if (*((_QWORD *)v61 + 4))
          {
            **((_QWORD **)v61 + 6) = *((_QWORD *)v61 + 5);
            v122 = *((_QWORD *)v61 + 5);
            if (v122)
              *(_QWORD *)(v122 + 16) = *((_QWORD *)v61 + 6);
          }
          *v63 = v55;
          if (v55)
          {
            v70 = v55[1];
            v69 = (uint64_t *****)(v55 + 1);
            v68 = v70;
            *((_QWORD *)v61 + 5) = v70;
            if (v70)
              v68[2] = (uint64_t *)(v61 + 40);
            *((_QWORD *)v61 + 6) = v69;
            *v69 = v63;
          }
          *((_WORD *)v61 + 41) = 2 * (v60 & 0x3F);
          v61[124] = 1;
          v129 = 257;
          (*(void (**)(_QWORD, llvm::Value *, const char **, _QWORD, _QWORD))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v64, &v127, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
          v71 = *((unsigned int *)a3 + 2);
          if (!(_DWORD)v71)
          {
LABEL_53:
            v25 = *a2;
            v26 = 1;
            return llvm::ConstantInt::get(v25, v26, 0);
          }
          v106 = *(_QWORD **)a3;
          v107 = *(_QWORD *)a3 + 16 * v71;
          v108 = (unsigned __int8 **)(v62 + 112);
          while (1)
          {
            v109 = *(_DWORD *)v106;
            v110 = (unsigned __int8 *)v106[1];
            if (v110)
            {
              if (!v109)
              {
                v123[0] = v106[1];
                llvm::MetadataTracking::track((uint64_t)v123, v110, 2);
                v111 = *v108;
                goto LABEL_111;
              }
            }
            else
            {
              v111 = *v108;
              if (!*v108 && (v62[87] & 0x20) == 0)
                goto LABEL_108;
              if (!v109)
              {
                v123[0] = 0;
LABEL_111:
                if (v111)
                  llvm::MetadataTracking::untrack((uint64_t)(v62 + 112), v111);
                v112 = (unsigned __int8 *)v123[0];
                *v108 = (unsigned __int8 *)v123[0];
                if (v112)
                  llvm::MetadataTracking::retrack((uint64_t)v123, v112, (uint64_t)(v62 + 112));
                goto LABEL_108;
              }
            }
            llvm::Value::setMetadata(v64, *(_DWORD *)v106, (llvm::MDNode *)v110);
LABEL_108:
            v106 += 2;
            if (v106 == (_QWORD *)v107)
              goto LABEL_53;
          }
        }
        v100 = *(_QWORD **)a3;
        v101 = *(_QWORD *)a3 + 16 * v47;
        v102 = (unsigned __int8 **)(v38 + 112);
        while (1)
        {
          v103 = *(_DWORD *)v100;
          v46 = (const llvm::APInt *)v100[1];
          if (v46)
          {
            if (!v103)
            {
              v123[0] = v100[1];
              llvm::MetadataTracking::track((uint64_t)v123, (unsigned __int8 *)v46, 2);
              v104 = *v102;
              goto LABEL_96;
            }
          }
          else
          {
            v104 = *v102;
            if (!*v102 && (v38[87] & 0x20) == 0)
              goto LABEL_93;
            if (!v103)
            {
              v123[0] = 0;
LABEL_96:
              if (v104)
                llvm::MetadataTracking::untrack((uint64_t)(v38 + 112), v104);
              v105 = (unsigned __int8 *)v123[0];
              *v102 = (unsigned __int8 *)v123[0];
              if (v105)
                llvm::MetadataTracking::retrack((uint64_t)v123, v105, (uint64_t)(v38 + 112));
              goto LABEL_93;
            }
          }
          llvm::Value::setMetadata(v40, *(_DWORD *)v100, v46);
LABEL_93:
          v100 += 2;
          if (v100 == (_QWORD *)v101)
            goto LABEL_36;
        }
      }
    }
    return 0;
  }
  v72 = v9[8];
  if (*(_BYTE *)(*(_QWORD *)v72 + 8) != 15)
    return 0;
  if (!a2[1])
  {
    result = (llvm::Value **)llvm::emitStrCpy(*v9, v72, a3, *((uint64_t **)this + 3));
    if (result && *((_BYTE *)result + 16) == 84)
      *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
    return result;
  }
  StringLength = llvm::GetStringLength(v9[8], (const llvm::Value *)8);
  v74 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  v75 = v74[8];
  if (StringLength)
  {
    v76 = StringLength;
    v77 = llvm::DataLayout::getIntPtrType(*((llvm::DataLayout **)this + 2), *(llvm::LLVMContext **)*a2, 0);
    v79 = (llvm::ConstantInt *)*v77;
    v80 = *((_DWORD *)v77 + 2);
    v128 = v80 >> 8;
    if (v80 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v127, v76, 0);
    }
    else
    {
      if (v80 <= 0xFF)
        v81 = 0;
      else
        v81 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v80);
      v127 = (const char *)(v81 & v76);
    }
    v82 = (uint64_t *)llvm::ConstantInt::get(v79, (llvm::LLVMContext *)&v127, v78);
    if (v128 >= 0x41 && v127)
      MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
    llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v10, 256, v75, 256, v82, 0, 0, 0, 0, 0);
    v25 = *a2;
    v26 = v76 - 1;
    return llvm::ConstantInt::get(v25, v26, 0);
  }
  v83 = llvm::emitStpCpy(v10, v74[8], a3, *((uint64_t **)this + 3));
  if (v83)
  {
    v113 = (unsigned __int8 *)v83;
    v114 = llvm::PointerType::get((llvm::PointerType *)(**((_QWORD **)a3 + 8) + 1912), 0);
    v129 = 257;
    v115 = sub_1C5098D9C((uint64_t *)a3, v113, v114, (uint64_t)&v127);
    v116 = llvm::PointerType::get((llvm::PointerType *)(**((_QWORD **)a3 + 8) + 1912), 0);
    v129 = 257;
    v117 = sub_1C5098D9C((uint64_t *)a3, (unsigned __int8 *)v10, v116, (uint64_t)&v127);
    v118 = (llvm::Type *)(**((_QWORD **)a3 + 8) + 1912);
    v129 = 257;
    PtrDiff = (unsigned __int8 *)llvm::IRBuilderBase::CreatePtrDiff(a3, v118, (llvm::Value *)v115, (llvm::Value *)v117, (const llvm::Twine *)&v127);
    v97 = *a2;
    v129 = 257;
    v98 = (uint64_t *)a3;
    return (llvm::Value **)sub_1C4D8D514(v98, PtrDiff, (uint64_t)v97, 0, (uint64_t)&v127);
  }
  v84 = a2[5];
  v85 = *(_QWORD *)(*((_QWORD *)v84 + 7) + 112);
  if (v85 && ((*(_BYTE *)(v85 + 17) & 4) != 0 || *(char *)(v85 + 13) < 0)
    || llvm::shouldOptimizeForSize(v84, *((_QWORD *)this + 6), *((uint64_t ***)this + 5)))
  {
    return 0;
  }
  result = (llvm::Value **)llvm::emitStrLen(a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8], (uint64_t)a3, *((llvm::DataLayout **)this + 2), *((uint64_t **)this + 3));
  if (result)
  {
    v86 = result;
    v87 = llvm::ConstantInt::get(*result, 1, 0);
    v123[0] = "leninc";
    v124 = 259;
    v88 = (uint64_t *)(*(uint64_t (**)(_QWORD, llvm::Value **, llvm::Value **, _QWORD, _QWORD))(**((_QWORD **)a3 + 9) + 16))(*((_QWORD *)a3 + 9), v86, v87, 0, 0);
    if (!v88)
    {
      v129 = 257;
      v89 = (char *)operator new(0x80uLL);
      *((_QWORD *)v89 + 6) = 0;
      *((_QWORD *)v89 + 5) = 0;
      v90 = (llvm::Value **)(v89 + 40);
      *((_QWORD *)v89 + 8) = *v86;
      v91 = (uint64_t)(v89 + 64);
      *((_QWORD *)v89 + 3) = v89 + 64;
      *((_QWORD *)v89 + 7) = v89 + 64;
      *((_QWORD *)v89 + 9) = 0;
      v89[80] = 41;
      v89[81] = 0;
      *((_WORD *)v89 + 41) = 0;
      *((_DWORD *)v89 + 21) = 2;
      *(_OWORD *)(v89 + 88) = 0u;
      *(_OWORD *)(v89 + 104) = 0u;
      *((_DWORD *)v89 + 30) = 0;
      *(_QWORD *)v89 = v86;
      v92 = v86 + 1;
      v93 = v86[1];
      *((_QWORD *)v89 + 1) = v93;
      if (v93)
        *((_QWORD *)v93 + 2) = v89 + 8;
      *((_QWORD *)v89 + 2) = v92;
      *v92 = v89;
      *((_QWORD *)v89 + 4) = v87;
      if (v87)
      {
        v96 = v87[1];
        v95 = v87 + 1;
        v94 = v96;
        *v90 = v96;
        if (v96)
          *((_QWORD *)v94 + 2) = v90;
        *((_QWORD *)v89 + 6) = v95;
        *v95 = v89 + 32;
      }
      llvm::Value::setName((uint64_t ***)v89 + 8, (uint64_t)&v127);
      v88 = (uint64_t *)sub_1C4773754((uint64_t *)a3, v91, (uint64_t)v123);
    }
    llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v10, 256, a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8], 256, v88, 0, 0, 0, 0, 0);
    v97 = *a2;
    v129 = 257;
    v98 = (uint64_t *)a3;
    PtrDiff = (unsigned __int8 *)v86;
    return (llvm::Value **)sub_1C4D8D514(v98, PtrDiff, (uint64_t)v97, 0, (uint64_t)&v127);
  }
  return result;
}

llvm::Value **llvm::LibCallSimplifier::optimizeSnPrintFString(llvm::DataLayout **this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  char *v3;
  uint64_t v4;
  BOOL v5;
  llvm::Value **result;
  unint64_t *v10;
  unint64_t v11;
  int ConstantStringInfo;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  _BYTE *v20;
  _BYTE *v21;
  llvm::Value *v22;
  llvm::Value *v23;
  _QWORD *IntPtrType;
  const llvm::APInt *v25;
  llvm::ConstantInt *v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t *v29;
  llvm::Value *MemTransferInst;
  llvm::ConstantInt *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  char *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  uint64_t *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t *v43;
  llvm::IRBuilderBase *v44;
  uint64_t *v45;
  char v46;
  char v47;
  char *v48;
  uint64_t **v49;
  llvm::Value *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t ***v54;
  uint64_t v55;
  char *v56;
  const llvm::APInt *v57;
  uint64_t v58;
  uint64_t v59;
  llvm::GetElementPtrInst *v60;
  llvm::ConstantInt *v61;
  unint64_t v62;
  char v63;
  llvm::ValueHandleBase *v64;
  const llvm::APInt *v65;
  uint64_t v66;
  llvm::ConstantInt *v67;
  uint64_t *v68;
  char v69;
  char v70;
  char *v71;
  char *v72;
  uint64_t ****v73;
  llvm::Value *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t *****v78;
  uint64_t **v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unsigned __int8 **v83;
  int v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  _QWORD *v88;
  uint64_t v89;
  unsigned __int8 **v90;
  int v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t ***v99;
  void *__s;
  size_t __n;
  uint64_t v102;
  size_t v103;
  __int16 v104;
  unsigned __int8 *v105;

  v3 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v4 = *((_QWORD *)v3 + 4);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 16;
  else
    v5 = 0;
  if (!v5)
    return 0;
  v10 = (unint64_t *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v10 = (unint64_t *)*v10;
  v11 = *v10;
  __s = 0;
  __n = 0;
  ConstantStringInfo = llvm::getConstantStringInfo(*((llvm **)v3 + 8), (const llvm::Value *)&__s, 0, 1);
  result = 0;
  if (ConstantStringInfo)
  {
    v13 = *((unsigned __int8 *)a2 + 16);
    if (v13 == 84)
    {
      v14 = 0;
    }
    else if (v13 == 39)
    {
      v14 = (*((_DWORD *)a2 + 20) + 1);
    }
    else
    {
      v14 = 2;
    }
    v15 = *((_DWORD *)a2 + 5);
    if (v15 < 0 && (v94 = (char *)a2 - 32 * (v15 & 0x7FFFFFF), v95 = *((_QWORD *)v94 - 1), (v95 & 0xFFFFFFFF0) != 0))
    {
      v17 = -(uint64_t)(v15 & 0x7FFFFFF);
      v16 = *((_DWORD *)v94 - 3) - *(_DWORD *)&v94[-v95];
    }
    else
    {
      v16 = 0;
      v17 = -(uint64_t)(v15 & 0x7FFFFFF);
    }
    v18 = (char *)a2 + 32 * v17;
    v19 = __n;
    if (((-32 * v14 + 32 * -v16 - 32 * v17 - 32) & 0x1FFFFFFFE0) == 0x60)
    {
      if (__n)
      {
        v20 = __s;
        v21 = memchr(__s, 37, __n);
        if (v21)
        {
          if (v21 - v20 != -1)
            return 0;
        }
      }
      if (v11)
      {
        if (v11 >= v19 + 1)
        {
          v22 = *(llvm::Value **)v18;
          v23 = (llvm::Value *)*((_QWORD *)v18 + 8);
          IntPtrType = llvm::DataLayout::getIntPtrType(this[2], **(llvm::LLVMContext ***)a2, 0);
          v26 = (llvm::ConstantInt *)*IntPtrType;
          v27 = *((_DWORD *)IntPtrType + 2);
          LODWORD(v103) = v27 >> 8;
          if (v27 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v102, v19 + 1, 0);
          }
          else
          {
            if (v27 <= 0xFF)
              v28 = 0;
            else
              v28 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v27);
            v102 = v28 & (v19 + 1);
          }
          v29 = (uint64_t *)llvm::ConstantInt::get(v26, (llvm::LLVMContext *)&v102, v25);
          if (v103 >= 0x41 && v102)
            MEMORY[0x1CAA32F9C](v102, 0x1000C8000313F17);
          MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v22, 256, v23, 256, v29, 0, 0, 0, 0, 0);
          goto LABEL_26;
        }
        return 0;
      }
      goto LABEL_29;
    }
    if (__n != 2 || *(_BYTE *)__s != 37)
      return 0;
    if (v13 == 84)
      v33 = 0;
    else
      v33 = v13 == 39 ? (*((_DWORD *)a2 + 20) + 1) : 2;
    if (v15 < 0 && (v96 = *((_QWORD *)v18 - 1), (v96 & 0xFFFFFFFF0) != 0))
      v34 = *((_DWORD *)v18 - 3) - *(_DWORD *)&v18[-v96];
    else
      v34 = 0;
    if (((-32 * v33 + 32 * -v34 - 32 * v17 - 32) & 0x1FFFFFFFE0) != 0x80)
      return 0;
    v35 = *((unsigned __int8 *)__s + 1);
    if (v35 != 115)
    {
      if (v35 != 99 || v11 == 1)
        return 0;
      if (!v11)
      {
LABEL_43:
        v31 = *(llvm::ConstantInt **)a2;
        v32 = 1;
        return llvm::ConstantInt::get(v31, v32, 0);
      }
      v41 = (unsigned __int8 *)*((_QWORD *)v18 + 12);
      if (*(_BYTE *)(*(_QWORD *)v41 + 8) != 13)
        return 0;
      v42 = **((_QWORD **)a3 + 8) + 1912;
      v102 = (uint64_t)"char";
      v104 = 259;
      v43 = (uint64_t *)sub_1C4773E38((uint64_t *)a3, 38, v41, v42, (uint64_t)&v102);
      v45 = (uint64_t *)llvm::castToCStr(*((llvm **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), a3, v44);
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, *v43);
      v47 = v46;
      v48 = (char *)operator new(0x80uLL);
      *((_DWORD *)v48 + 21) = *((_DWORD *)v48 + 21) & 0x38000000 | 2;
      *(_QWORD *)v48 = 0;
      *((_QWORD *)v48 + 2) = 0;
      *((_QWORD *)v48 + 1) = 0;
      *((_QWORD *)v48 + 5) = 0;
      *((_QWORD *)v48 + 6) = 0;
      *((_QWORD *)v48 + 4) = 0;
      v49 = (uint64_t **)(v48 + 32);
      *((_QWORD *)v48 + 8) = **(_QWORD **)*v43 + 1576;
      v50 = (llvm::Value *)(v48 + 64);
      *((_QWORD *)v48 + 3) = v48 + 64;
      *((_QWORD *)v48 + 7) = v48 + 64;
      *((_QWORD *)v48 + 9) = 0;
      v48[80] = 61;
      v48[81] = 0;
      *((_WORD *)v48 + 41) = 0;
      *((_DWORD *)v48 + 21) = 2;
      *(_OWORD *)(v48 + 88) = 0u;
      *(_OWORD *)(v48 + 104) = 0u;
      *((_DWORD *)v48 + 30) = 0;
      *(_QWORD *)v48 = v43;
      v53 = v43[1];
      v52 = v43 + 1;
      v51 = v53;
      *((_QWORD *)v48 + 1) = v53;
      if (v53)
        *(_QWORD *)(v51 + 16) = v48 + 8;
      *((_QWORD *)v48 + 2) = v52;
      *v52 = v48;
      if (*((_QWORD *)v48 + 4))
      {
        **((_QWORD **)v48 + 6) = *((_QWORD *)v48 + 5);
        v97 = *((_QWORD *)v48 + 5);
        if (v97)
          *(_QWORD *)(v97 + 16) = *((_QWORD *)v48 + 6);
      }
      *v49 = v45;
      if (v45)
      {
        v54 = (uint64_t ***)(v45 + 1);
        v55 = v45[1];
        *((_QWORD *)v48 + 5) = v55;
        if (v55)
          *(_QWORD *)(v55 + 16) = v48 + 40;
        *((_QWORD *)v48 + 6) = v54;
        *v54 = v49;
      }
      *((_WORD *)v48 + 41) = 2 * (v47 & 0x3F);
      v56 = v48;
      v48[124] = 1;
      v104 = 257;
      (*(void (**)(_QWORD, llvm::Value *, uint64_t *, _QWORD, _QWORD))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v50, &v102, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
      v58 = *((unsigned int *)a3 + 2);
      if (!(_DWORD)v58)
      {
LABEL_57:
        v59 = **((_QWORD **)a3 + 8);
        v60 = (llvm::GetElementPtrInst *)(v59 + 1912);
        v61 = *(llvm::ConstantInt **)(v59 + 1960);
        v62 = *(unsigned int *)(v59 + 1968);
        LODWORD(v103) = v62 >> 8;
        if (v62 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v102, 1, 0);
        }
        else
        {
          if (v62 <= 0xFF)
            v63 = 0;
          else
            v63 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v62);
          v102 = v63 & 1;
        }
        v64 = llvm::ConstantInt::get(v61, (llvm::LLVMContext *)&v102, v57);
        if (v103 >= 0x41 && v102)
          MEMORY[0x1CAA32F9C](v102, 0x1000C8000313F17);
        v102 = (uint64_t)"nul";
        v104 = 259;
        v99 = sub_1C4867B70((uint64_t *)a3, v60, v45, (uint64_t)v64, (uint64_t)&v102);
        v66 = **((_QWORD **)a3 + 8);
        v67 = *(llvm::ConstantInt **)(v66 + 1912);
        LODWORD(v103) = *(_DWORD *)(v66 + 1920) >> 8;
        if (v103 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v102, 0, 0);
        else
          v102 = 0;
        v68 = (uint64_t *)llvm::ConstantInt::get(v67, (llvm::LLVMContext *)&v102, v65);
        if (v103 >= 0x41 && v102)
          MEMORY[0x1CAA32F9C](v102, 0x1000C8000313F17);
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, *v68);
        v70 = v69;
        v71 = (char *)operator new(0x80uLL);
        v72 = v71;
        *((_DWORD *)v71 + 21) = *((_DWORD *)v71 + 21) & 0x38000000 | 2;
        *(_QWORD *)v71 = 0;
        *((_QWORD *)v71 + 2) = 0;
        *((_QWORD *)v71 + 1) = 0;
        *((_QWORD *)v71 + 5) = 0;
        *((_QWORD *)v71 + 6) = 0;
        *((_QWORD *)v71 + 4) = 0;
        v73 = (uint64_t ****)(v71 + 32);
        *((_QWORD *)v71 + 8) = **(_QWORD **)*v68 + 1576;
        v74 = (llvm::Value *)(v71 + 64);
        *((_QWORD *)v71 + 3) = v71 + 64;
        *((_QWORD *)v71 + 7) = v71 + 64;
        *((_QWORD *)v71 + 9) = 0;
        v71[80] = 61;
        v71[81] = 0;
        *((_WORD *)v71 + 41) = 0;
        *((_DWORD *)v71 + 21) = 2;
        *(_OWORD *)(v71 + 88) = 0u;
        *(_OWORD *)(v71 + 104) = 0u;
        *((_DWORD *)v71 + 30) = 0;
        *(_QWORD *)v71 = v68;
        v77 = v68[1];
        v76 = v68 + 1;
        v75 = v77;
        *((_QWORD *)v71 + 1) = v77;
        if (v77)
          *(_QWORD *)(v75 + 16) = v71 + 8;
        *((_QWORD *)v71 + 2) = v76;
        *v76 = v71;
        if (*((_QWORD *)v71 + 4))
        {
          **((_QWORD **)v71 + 6) = *((_QWORD *)v71 + 5);
          v98 = *((_QWORD *)v71 + 5);
          if (v98)
            *(_QWORD *)(v98 + 16) = *((_QWORD *)v71 + 6);
        }
        *v73 = v99;
        if (v99)
        {
          v78 = (uint64_t *****)(v99 + 1);
          v79 = v99[1];
          *((_QWORD *)v71 + 5) = v79;
          if (v79)
            v79[2] = (uint64_t *)(v71 + 40);
          *((_QWORD *)v71 + 6) = v78;
          *v78 = v73;
        }
        *((_WORD *)v71 + 41) = 2 * (v70 & 0x3F);
        v71[124] = 1;
        v104 = 257;
        (*(void (**)(_QWORD, llvm::Value *, uint64_t *, _QWORD, _QWORD))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v74, &v102, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
        v80 = *((unsigned int *)a3 + 2);
        if (!(_DWORD)v80)
          goto LABEL_43;
        v81 = *(_QWORD **)a3;
        v82 = *(_QWORD *)a3 + 16 * v80;
        v83 = (unsigned __int8 **)(v72 + 112);
        while (1)
        {
          v84 = *(_DWORD *)v81;
          v85 = (unsigned __int8 *)v81[1];
          if (v85)
          {
            if (!v84)
            {
              v105 = (unsigned __int8 *)v81[1];
              llvm::MetadataTracking::track((uint64_t)&v105, v85, 2);
              v86 = *v83;
              goto LABEL_85;
            }
          }
          else
          {
            v86 = *v83;
            if (!*v83 && (v72[87] & 0x20) == 0)
              goto LABEL_82;
            if (!v84)
            {
              v105 = 0;
LABEL_85:
              if (v86)
                llvm::MetadataTracking::untrack((uint64_t)(v72 + 112), v86);
              v87 = v105;
              *v83 = v105;
              if (v87)
                llvm::MetadataTracking::retrack((uint64_t)&v105, v87, (uint64_t)(v72 + 112));
              goto LABEL_82;
            }
          }
          llvm::Value::setMetadata(v74, *(_DWORD *)v81, (llvm::MDNode *)v85);
LABEL_82:
          v81 += 2;
          if (v81 == (_QWORD *)v82)
            goto LABEL_43;
        }
      }
      v88 = *(_QWORD **)a3;
      v89 = *(_QWORD *)a3 + 16 * v58;
      v90 = (unsigned __int8 **)(v56 + 112);
      while (1)
      {
        v91 = *(_DWORD *)v88;
        v57 = (const llvm::APInt *)v88[1];
        if (v57)
        {
          if (!v91)
          {
            v105 = (unsigned __int8 *)v88[1];
            llvm::MetadataTracking::track((uint64_t)&v105, (unsigned __int8 *)v57, 2);
            v92 = *v90;
            goto LABEL_101;
          }
        }
        else
        {
          v92 = *v90;
          if (!*v90 && (v56[87] & 0x20) == 0)
            goto LABEL_98;
          if (!v91)
          {
            v105 = 0;
LABEL_101:
            if (v92)
              llvm::MetadataTracking::untrack((uint64_t)(v56 + 112), v92);
            v93 = v105;
            *v90 = v105;
            if (v93)
              llvm::MetadataTracking::retrack((uint64_t)&v105, v93, (uint64_t)(v56 + 112));
            goto LABEL_98;
          }
        }
        llvm::Value::setMetadata(v50, *(_DWORD *)v88, v57);
LABEL_98:
        v88 += 2;
        if (v88 == (_QWORD *)v89)
          goto LABEL_57;
      }
    }
    v102 = 0;
    v103 = 0;
    v36 = llvm::getConstantStringInfo(*((llvm **)v18 + 12), (const llvm::Value *)&v102, 0, 1);
    result = 0;
    if (v36)
    {
      v19 = v103;
      if (v11)
      {
        if (v11 >= v103 + 1)
        {
          v37 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
          v38 = *(llvm::Value **)v37;
          v39 = (llvm::Value *)*((_QWORD *)v37 + 12);
          v40 = (uint64_t *)llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, v103 + 1, 0);
          MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, v38, 256, v39, 256, v40, 0, 0, 0, 0, 0);
LABEL_26:
          if (MemTransferInst)
          {
            if (*((_BYTE *)MemTransferInst + 16) == 84)
              *((_WORD *)MemTransferInst + 9) = *((_WORD *)MemTransferInst + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
          }
          goto LABEL_29;
        }
        return 0;
      }
LABEL_29:
      v31 = *(llvm::ConstantInt **)a2;
      v32 = v19;
      return llvm::ConstantInt::get(v31, v32, 0);
    }
  }
  return result;
}

uint64_t llvm::LibCallSimplifier::optimizeFPrintFString(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  int ConstantStringInfo;
  uint64_t result;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  _BYTE *v15;
  _BYTE *v16;
  llvm *v17;
  const llvm::APInt *v18;
  llvm::ConstantInt **IntPtrType;
  llvm::ConstantInt *v20;
  unint64_t v21;
  unint64_t v22;
  llvm::ValueHandleBase *v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  llvm *v28;
  llvm::ConstantInt *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *__s;
  size_t __n;
  unint64_t v35;
  unsigned int v36;

  llvm::LibCallSimplifier::optimizeErrorReporting(this, a2, a3, 0);
  __s = 0;
  __n = 0;
  ConstantStringInfo = llvm::getConstantStringInfo(((llvm **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4], (const llvm::Value *)&__s, 0, 1);
  result = 0;
  if (ConstantStringInfo)
  {
    if (*((_QWORD *)a2 + 1))
      return 0;
    v8 = *((unsigned __int8 *)a2 + 16);
    if (v8 == 84)
    {
      v9 = 0;
    }
    else if (v8 == 39)
    {
      v9 = (*((_DWORD *)a2 + 20) + 1);
    }
    else
    {
      v9 = 2;
    }
    v10 = *((_DWORD *)a2 + 5);
    if (v10 < 0 && (v30 = (char *)a2 - 32 * (v10 & 0x7FFFFFF), v31 = *((_QWORD *)v30 - 1), (v31 & 0xFFFFFFFF0) != 0))
    {
      v12 = -(uint64_t)(v10 & 0x7FFFFFF);
      v11 = *((_DWORD *)v30 - 3) - *(_DWORD *)&v30[-v31];
    }
    else
    {
      v11 = 0;
      v12 = -(uint64_t)(v10 & 0x7FFFFFF);
    }
    v13 = (char *)a2 + 32 * v12;
    v14 = __n;
    if (((-32 * v9 + 32 * -v11 - 32 * v12 - 32) & 0x1FFFFFFFE0) == 0x40)
    {
      if (__n)
      {
        v15 = __s;
        v16 = memchr(__s, 37, __n);
        if (v16)
        {
          if (v16 - v15 != -1)
            return 0;
        }
      }
      v17 = (llvm *)*((_QWORD *)v13 + 4);
      IntPtrType = (llvm::ConstantInt **)llvm::DataLayout::getIntPtrType(*((llvm::DataLayout **)this + 2), **(llvm::LLVMContext ***)a2, 0);
      v20 = *IntPtrType;
      v21 = *((unsigned int *)IntPtrType + 2);
      v36 = v21 >> 8;
      if (v21 >> 8 > 0x40)
      {
        v29 = v20;
        llvm::APInt::initSlowCase((llvm::APInt *)&v35, v14, 0);
        v20 = v29;
      }
      else
      {
        if (v21 <= 0xFF)
          v22 = 0;
        else
          v22 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v21);
        v35 = v22 & v14;
      }
      v23 = llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v35, v18);
      if (v36 >= 0x41 && v35)
        MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
      result = llvm::emitFWrite(v17, (uint64_t)v23, *((uint64_t **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), (uint64_t)a3, *((llvm::DataLayout **)this + 2), *((uint64_t **)this + 3));
      if (result)
        goto LABEL_20;
    }
    else
    {
      if (__n != 2 || *(_BYTE *)__s != 37)
        return 0;
      if (v8 == 84)
        v24 = 0;
      else
        v24 = v8 == 39 ? (*((_DWORD *)a2 + 20) + 1) : 2;
      if (v10 < 0 && (v32 = *((_QWORD *)v13 - 1), (v32 & 0xFFFFFFFF0) != 0))
        v25 = *((_DWORD *)v13 - 3) - *(_DWORD *)&v13[-v32];
      else
        v25 = 0;
      if (((-32 * v24 + 32 * (unint64_t)-v25 - 32 * v12 - 32) >> 5) < 3)
        return 0;
      v26 = *((unsigned __int8 *)__s + 1);
      if (v26 == 115)
      {
        v28 = (llvm *)*((_QWORD *)v13 + 8);
        if (*(_BYTE *)(*(_QWORD *)v28 + 8) != 15)
          return 0;
        result = llvm::emitFPutS(v28, *(uint64_t **)v13, (uint64_t)a3, *((uint64_t **)this + 3));
        if (result)
          goto LABEL_20;
      }
      else
      {
        if (v26 != 99)
          return 0;
        v27 = (unsigned __int8 *)*((_QWORD *)v13 + 8);
        if (*(_BYTE *)(*(_QWORD *)v27 + 8) != 13)
          return 0;
        result = llvm::emitFPutC(v27, *(uint64_t **)v13, (uint64_t)a3, *((uint64_t **)this + 3));
        if (result)
        {
LABEL_20:
          if (*(_BYTE *)(result + 16) == 84)
            *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
        }
      }
    }
  }
  return result;
}

llvm::Value **llvm::LibCallSimplifier::optimizeFWrite(uint64_t **this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  llvm::IRBuilderBase *v6;
  llvm::Value **result;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  char v18;
  char v19;
  char *v20;
  char *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 **v29;
  int v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  const char *v34;
  __int16 v35;
  _BYTE v36[32];
  __int16 v37;
  unsigned __int8 *v38;

  llvm::LibCallSimplifier::optimizeErrorReporting((llvm::LibCallSimplifier *)this, a2, a3, 3);
  result = 0;
  v8 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  if (*(_BYTE *)(*((_QWORD *)v8 + 4) + 16) == 16)
    v9 = *((_QWORD *)v8 + 4);
  else
    v9 = 0;
  v10 = *((_QWORD *)v8 + 8);
  if (*(_BYTE *)(v10 + 16) != 16)
    v10 = 0;
  if (v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = (_QWORD *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u)
      v12 = (_QWORD *)*v12;
    v13 = (_QWORD *)*v12;
    v14 = (_QWORD *)(v10 + 24);
    if (*(_DWORD *)(v10 + 32) >= 0x41u)
      v14 = (_QWORD *)*v14;
    v15 = *v14 * (_QWORD)v13;
    if (v15 != 1)
    {
      if (!v15)
        return llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, 0, 0);
      return 0;
    }
    if (*((_QWORD *)a2 + 1))
      return 0;
    v16 = **((_QWORD **)a3 + 8) + 1912;
    v17 = llvm::castToCStr(*(llvm **)v8, a3, v6);
    v34 = "char";
    v35 = 259;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 6) + 56) + 40) + 272, v16);
    v19 = v18;
    v20 = (char *)operator new(0x60uLL);
    v21 = v20;
    v22 = (unsigned __int8 *)(v20 + 32);
    *((_QWORD *)v20 + 2) = 0;
    *((_QWORD *)v20 + 3) = v20 + 32;
    v37 = 257;
    *((_QWORD *)v20 + 4) = v16;
    *((_QWORD *)v20 + 5) = 0;
    *((_WORD *)v20 + 24) = 60;
    *((_DWORD *)v20 + 13) = 1;
    *(_OWORD *)(v20 + 56) = 0u;
    *(_OWORD *)(v20 + 72) = 0u;
    *((_DWORD *)v20 + 22) = 0;
    *(_QWORD *)v20 = v17;
    *((_QWORD *)v20 + 1) = 0;
    if (v17)
    {
      v25 = *((_QWORD *)v17 + 1);
      v24 = v17 + 8;
      v23 = v25;
      *((_QWORD *)v20 + 1) = v25;
      if (v25)
        *(_QWORD *)(v23 + 16) = v20 + 8;
      *((_QWORD *)v20 + 2) = v24;
      *v24 = v20;
    }
    *((_WORD *)v20 + 25) = 2 * (v19 & 0x3F);
    v20[92] = 1;
    llvm::Value::setName((uint64_t ***)v20 + 4, (uint64_t)v36);
    (*(void (**)(_QWORD, unsigned __int8 *, const char **, _QWORD, _QWORD))(**((_QWORD **)a3 + 10) + 16))(*((_QWORD *)a3 + 10), v22, &v34, *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7));
    v26 = *((unsigned int *)a3 + 2);
    if (!(_DWORD)v26)
    {
LABEL_25:
      result = (llvm::Value **)llvm::emitFPutC(v22, ((uint64_t **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[12], (uint64_t)a3, this[3]);
      if (result)
        return llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, 1, 0);
      return result;
    }
    v27 = *(_QWORD *)a3;
    v28 = *(_QWORD *)a3 + 16 * v26;
    v29 = (unsigned __int8 **)(v21 + 80);
    while (1)
    {
      v30 = *(_DWORD *)v27;
      v31 = *(unsigned __int8 **)(v27 + 8);
      if (v31)
      {
        if (!v30)
        {
          v38 = *(unsigned __int8 **)(v27 + 8);
          llvm::MetadataTracking::track((uint64_t)&v38, v31, 2);
          v32 = *v29;
          goto LABEL_38;
        }
      }
      else
      {
        v32 = *v29;
        if (!*v29 && (v21[55] & 0x20) == 0)
          goto LABEL_35;
        if (!v30)
        {
          v38 = 0;
LABEL_38:
          if (v32)
            llvm::MetadataTracking::untrack((uint64_t)(v21 + 80), v32);
          v33 = v38;
          *v29 = v38;
          if (v33)
            llvm::MetadataTracking::retrack((uint64_t)&v38, v33, (uint64_t)(v21 + 80));
          goto LABEL_35;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v22, *(_DWORD *)v27, (llvm::MDNode *)v31);
LABEL_35:
      v27 += 16;
      if (v27 == v28)
        goto LABEL_25;
    }
  }
  return result;
}

llvm::Value **llvm::LibCallSimplifier::optimizeStringMemoryLibCall(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t ***v3;
  llvm::Value **result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ****v12;
  uint64_t ***v13;
  int v14;
  int v15;
  uint64_t ***v16;
  char *v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  llvm::LibCallSimplifier *isValidProtoForLibFunc;
  llvm::IRBuilderBase *v25;
  _QWORD *v26;
  unsigned int v27;

  v3 = (uint64_t ***)*((_QWORD *)a2 - 4);
  if ((*((_BYTE *)v3 + 33) & 0x20) != 0)
    return 0;
  if ((*((_BYTE *)v3 + 23) & 0x10) == 0)
  {
    v18 = 0;
    v17 = &byte_1C871356D;
    goto LABEL_12;
  }
  v8 = ***v3;
  v9 = *(_QWORD *)(v8 + 152);
  v10 = *(unsigned int *)(v8 + 168);
  if (!(_DWORD)v10)
    goto LABEL_10;
  LODWORD(v11) = (v10 - 1) & ((v3 >> 4) ^ (v3 >> 9));
  v12 = (uint64_t ****)(v9 + 16 * v11);
  v13 = *v12;
  if (*v12 != v3)
  {
    v14 = 1;
    while (v13 != (uint64_t ***)-4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(uint64_t ****)(v9 + 16 * v11);
      if (v13 == v3)
      {
        v12 = (uint64_t ****)(v9 + 16 * v11);
        goto LABEL_11;
      }
    }
LABEL_10:
    v12 = (uint64_t ****)(v9 + 16 * v10);
  }
LABEL_11:
  v16 = v12[1];
  v19 = (size_t)*v16;
  v17 = (char *)(v16 + 2);
  v18 = v19;
LABEL_12:
  v20 = (uint64_t)v3[3];
  v21 = **((_QWORD **)this + 3);
  v27 = 0;
  if (!llvm::TargetLibraryInfoImpl::getLibFunc((int)this, v17, v18, &v27))
    return 0;
  v22 = v20;
  v23 = v27;
  isValidProtoForLibFunc = (llvm::LibCallSimplifier *)llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v21, v22, v27);
  if (!(_DWORD)isValidProtoForLibFunc)
    return 0;
  v26 = (_QWORD *)*((_QWORD *)this + 3);
  if (((*(_QWORD *)(v26[1] + 8 * (v23 >> 6)) >> v23) & 1) != 0
    || ((*(unsigned __int8 *)(*v26 + (v23 >> 2)) >> (2 * (v23 & 3))) & 3) == 0)
  {
    return 0;
  }
  if ((int)v23 <= 360)
  {
    switch((int)v23)
    {
      case 319:
        return llvm::LibCallSimplifier::optimizeMemCCpy(isValidProtoForLibFunc, a2, a3);
      case 320:
        return llvm::LibCallSimplifier::optimizeMemChr(this, a2, a3);
      case 321:
        return (llvm::Value **)llvm::LibCallSimplifier::optimizeMemCmp(this, a2, a3);
      case 322:
        return (llvm::Value **)llvm::LibCallSimplifier::optimizeMemCpy(this, a2, a3);
      case 323:
        return (llvm::Value **)llvm::LibCallSimplifier::optimizeMemMove(this, a2, a3);
      case 324:
        return (llvm::Value **)llvm::LibCallSimplifier::optimizeMemPCpy(isValidProtoForLibFunc, a2, a3);
      case 325:
        llvm::LibCallSimplifier::optimizeMemRChr((const llvm::Value **)this, (llvm **)a2, v25);
        return 0;
      case 326:
        return (llvm::Value **)llvm::LibCallSimplifier::optimizeMemSet(this, a2, a3);
      default:
        if ((_DWORD)v23 == 168)
          return llvm::LibCallSimplifier::optimizeMemCmpBCmpCommon(this, a2, a3);
        if ((_DWORD)v23 != 169)
          return 0;
        result = (llvm::Value **)llvm::LibCallSimplifier::optimizeBCopy(isValidProtoForLibFunc, a2, a3);
        break;
    }
  }
  else
  {
    switch((int)v23)
    {
      case 401:
        return (llvm::Value **)llvm::LibCallSimplifier::optimizeStpCpy(this, a2, a3);
      case 402:
      case 403:
      case 407:
      case 410:
      case 411:
      case 412:
      case 414:
      case 419:
      case 426:
      case 427:
        return 0;
      case 404:
        return (llvm::Value **)llvm::LibCallSimplifier::optimizeStrCat(this, a2, a3);
      case 405:
        return llvm::LibCallSimplifier::optimizeStrChr(this, a2, a3);
      case 406:
        return (llvm::Value **)llvm::LibCallSimplifier::optimizeStrCmp(this, a2, a3);
      case 408:
        return (llvm::Value **)llvm::LibCallSimplifier::optimizeStrCpy((llvm::DataLayout **)this, a2, a3);
      case 409:
        return llvm::LibCallSimplifier::optimizeStrCSpn(this, (llvm **)a2, a3);
      case 413:
        return (llvm::Value **)llvm::LibCallSimplifier::optimizeStrLen(this, a2, a3);
      case 415:
        return (llvm::Value **)llvm::LibCallSimplifier::optimizeStrNCat(this, a2, a3);
      case 416:
        return llvm::LibCallSimplifier::optimizeStrNCmp(this, a2, a3);
      case 417:
        return (llvm::Value **)llvm::LibCallSimplifier::optimizeStrNCpy(this, (const char ***)a2, a3);
      case 418:
        return (llvm::Value **)llvm::LibCallSimplifier::optimizeStrNDup((uint64_t **)this, a2, a3);
      case 420:
        return llvm::LibCallSimplifier::optimizeStrPBrk((uint64_t **)this, (llvm **)a2, a3);
      case 421:
        return llvm::LibCallSimplifier::optimizeStrRChr((uint64_t **)this, a2, a3);
      case 422:
        return llvm::LibCallSimplifier::optimizeStrSpn(isValidProtoForLibFunc, (llvm **)a2, v25);
      case 423:
        return (llvm::Value **)llvm::LibCallSimplifier::optimizeStrStr(this, a2, a3);
      case 424:
      case 425:
      case 428:
      case 429:
      case 430:
      case 431:
      case 432:
        llvm::LibCallSimplifier::optimizeStrTo(isValidProtoForLibFunc, a2, v25);
        return 0;
      default:
        if ((_DWORD)v23 == 361)
        {
          result = (llvm::Value **)llvm::LibCallSimplifier::optimizeRealloc(this, a2, a3);
        }
        else
        {
          if ((_DWORD)v23 != 466)
            return 0;
          result = (llvm::Value **)llvm::LibCallSimplifier::optimizeWcslen((llvm::TargetLibraryInfoImpl ***)this, a2, a3);
        }
        break;
    }
  }
  return result;
}

unsigned __int8 *llvm::LibCallSimplifier::optimizeFloatingPointLibCall(llvm::LibCallSimplifier *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int8 *result;
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ***v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ****v36;
  uint64_t ***v37;
  int v38;
  int v39;
  uint64_t ***v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t ***v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ****v53;
  uint64_t ***v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ***v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  _BYTE v64[32];
  __int16 v65;
  _QWORD *v66[4];
  __int16 v67;
  uint64_t v68;

  v8 = *(_QWORD *)(a2 + 64);
  if (v8 && (*(_BYTE *)(v8 + 19) & 0x20) != 0 || (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 61) & 1) != 0)
    return 0;
  if (!sub_1C4774A9C(a2))
    goto LABEL_24;
  v10 = *(_DWORD *)(a4 + 96);
  v11 = *(_QWORD *)(a4 + 88);
  v12 = *(_BYTE *)(a4 + 100);
  v13 = *(_BYTE *)(a4 + 101);
  v14 = *(_BYTE *)(a4 + 102);
  v15 = *(unsigned __int8 *)(a2 + 17) >> 1;
  if (v15 == 127)
    v15 = -1;
  *(_DWORD *)(a4 + 96) = v15;
  v68 = 0;
  if ((a3 - 384) <= 0x38 && ((1 << (a3 + 0x80)) & 0x118000000000023) != 0)
  {
    v16 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v66[0] = &v68;
    v17 = *(_QWORD *)(v16 + 8);
    if (v17 && !*(_QWORD *)(v17 + 8) && sub_1C4E7B6EC(v66, v16))
    {
      v18 = *(_QWORD *)(a2 - 32);
      if (v18 && !*(_BYTE *)(v18 + 16))
      {
        v57 = *(_QWORD *)(v18 + 24);
        v58 = *(_QWORD *)(a2 + 72);
        if (v57 == v58)
          v19 = *(_QWORD *)(a2 - 32);
        else
          v19 = 0;
        if (v57 == v58)
          v20 = *(uint64_t ***)(v18 + 24);
        else
          v20 = 0;
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      v67 = 257;
      v59 = sub_1C4774778((uint64_t *)a4, v20, v19, &v68, 1, (uint64_t)v66, 0);
      if (v59 && *(_BYTE *)(v59 + 16) == 84)
        *(_WORD *)(v59 + 18) = *(_WORD *)(v59 + 18) & 0xFFFC | *(_WORD *)(a2 + 18) & 3;
      v65 = 257;
      result = sub_1C4772890((uint64_t *)a4, v59, (uint64_t)v64, 0);
      goto LABEL_116;
    }
LABEL_23:
    *(_DWORD *)(a4 + 96) = v10;
    *(_QWORD *)(a4 + 88) = v11;
    *(_BYTE *)(a4 + 100) = v12;
    *(_BYTE *)(a4 + 101) = v13;
    *(_BYTE *)(a4 + 102) = v14;
    goto LABEL_24;
  }
  if ((a3 - 188) > 5)
    goto LABEL_23;
  if (((1 << (a3 + 68)) & 0x23) == 0)
    goto LABEL_23;
  v21 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v66[0] = &v68;
  if (!sub_1C4E7B6EC(v66, v21))
    goto LABEL_23;
  v22 = *(_QWORD *)(a2 - 32);
  if (v22 && !*(_BYTE *)(v22 + 16))
  {
    v29 = *(_QWORD *)(v22 + 24);
    v30 = *(_QWORD *)(a2 + 72);
    if (v29 == v30)
      v23 = *(_QWORD *)(a2 - 32);
    else
      v23 = 0;
    if (v29 == v30)
      v24 = *(uint64_t ***)(v22 + 24);
    else
      v24 = 0;
  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
  v66[0] = "cos";
  v67 = 259;
  result = (unsigned __int8 *)sub_1C4774778((uint64_t *)a4, v24, v23, &v68, 1, (uint64_t)v66, 0);
  if (result && result[16] == 84)
    *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xFFFC | *(_WORD *)(a2 + 18) & 3;
LABEL_116:
  *(_DWORD *)(a4 + 96) = v10;
  *(_QWORD *)(a4 + 88) = v11;
  *(_BYTE *)(a4 + 100) = v12;
  *(_BYTE *)(a4 + 101) = v13;
  *(_BYTE *)(a4 + 102) = v14;
  if (result)
    return result;
LABEL_24:
  result = 0;
  if (a3 <= 299)
  {
    if (a3 <= 202)
    {
      v25 = a3 - 116;
      if ((a3 - 116) <= 0x2C)
      {
        if (((1 << v25) & 0x108A14000000) != 0)
          goto LABEL_75;
        if (((1 << v25) & 3) != 0)
        {
LABEL_55:
          llvm::LibCallSimplifier::optimizeSinCosPi(a1, (llvm::CallInst *)a2, (llvm::IRBuilderBase *)a4);
          return 0;
        }
      }
      switch(a3)
      {
        case 171:
        case 172:
        case 173:
          return (unsigned __int8 *)llvm::LibCallSimplifier::optimizeCAbs(0, (llvm::CallInst *)a2, (llvm::IRBuilderBase *)a4);
        case 174:
        case 176:
        case 177:
        case 179:
        case 180:
        case 181:
        case 182:
        case 183:
        case 184:
        case 186:
        case 187:
        case 189:
          return result;
        case 175:
        case 188:
        case 190:
          goto LABEL_75;
        case 178:
          v26 = a2;
          v27 = a4;
          v28 = 14;
          return (unsigned __int8 *)sub_1C5FBC26C(v26, v27, v28);
        case 185:
          v48 = *(uint64_t ****)(a2 - 32);
          if (!v48 || *((_BYTE *)v48 + 16) || v48[3] != *(uint64_t ***)(a2 + 72))
            v48 = 0;
          if ((*((_BYTE *)v48 + 23) & 0x10) != 0)
          {
            v49 = ***v48;
            v50 = *(_QWORD *)(v49 + 152);
            v51 = *(unsigned int *)(v49 + 168);
            if ((_DWORD)v51)
            {
              LODWORD(v52) = (v51 - 1) & ((v48 >> 4) ^ (v48 >> 9));
              v53 = (uint64_t ****)(v50 + 16 * v52);
              v54 = *v53;
              if (*v53 != v48)
              {
                v55 = 1;
                do
                {
                  if (v54 == (uint64_t ***)-4096)
                    goto LABEL_122;
                  v56 = v52 + v55++;
                  v52 = v56 & (v51 - 1);
                  v54 = *(uint64_t ****)(v50 + 16 * v52);
                }
                while (v54 != v48);
                v53 = (uint64_t ****)(v50 + 16 * v52);
              }
            }
            else
            {
LABEL_122:
              v53 = (uint64_t ****)(v50 + 16 * v51);
            }
            v60 = v53[1];
            v63 = (unint64_t)*v60;
            v61 = (char *)(v60 + 2);
            v62 = v63;
            goto LABEL_124;
          }
          v62 = 0;
          v61 = &byte_1C871356D;
LABEL_124:
          if (!llvm::LibCallSimplifier::hasFloatVersion((uint64_t)a1, v61, v62))
            return 0;
          v44 = a2;
          v45 = a4;
          v46 = 1;
          v47 = 0;
          break;
        default:
          if ((a3 - 74) < 2)
            goto LABEL_55;
          return result;
      }
      return sub_1C5FBDA94(v44, v45, v46, v47);
    }
    if (a3 <= 211)
    {
      if ((a3 - 207) < 3)
        return llvm::LibCallSimplifier::optimizeExp2(a1, (llvm::CallInst *)a2, (llvm::IRBuilderBase *)a4);
      if ((a3 - 203) >= 2)
        return result;
    }
    else
    {
      if (a3 > 233)
      {
        if (a3 != 234)
        {
          if ((a3 - 240) < 6)
            return (unsigned __int8 *)llvm::LibCallSimplifier::optimizeFMinFMax(a1, (llvm::CallInst *)a2, (llvm::IRBuilderBase *)a4);
          return result;
        }
        v26 = a2;
        v27 = a4;
        v28 = 140;
        return (unsigned __int8 *)sub_1C5FBC26C(v26, v27, v28);
      }
      if ((a3 - 215) < 3)
      {
        v26 = a2;
        v27 = a4;
        v28 = 139;
        return (unsigned __int8 *)sub_1C5FBC26C(v26, v27, v28);
      }
      if (a3 != 212)
        return result;
    }
LABEL_75:
    if (!*((_BYTE *)a1 + 56))
      return 0;
    v31 = *(uint64_t ****)(a2 - 32);
    if (!v31 || *((_BYTE *)v31 + 16) || v31[3] != *(uint64_t ***)(a2 + 72))
      v31 = 0;
    if ((*((_BYTE *)v31 + 23) & 0x10) == 0)
    {
      v42 = 0;
      v41 = &byte_1C871356D;
LABEL_89:
      if (llvm::LibCallSimplifier::hasFloatVersion((uint64_t)a1, v41, v42))
      {
        v44 = a2;
        v45 = a4;
        v46 = 0;
        v47 = 1;
        return sub_1C5FBDA94(v44, v45, v46, v47);
      }
      return 0;
    }
    v32 = ***v31;
    v33 = *(_QWORD *)(v32 + 152);
    v34 = *(unsigned int *)(v32 + 168);
    if ((_DWORD)v34)
    {
      LODWORD(v35) = (v34 - 1) & ((v31 >> 4) ^ (v31 >> 9));
      v36 = (uint64_t ****)(v33 + 16 * v35);
      v37 = *v36;
      if (*v36 == v31)
      {
LABEL_88:
        v40 = v36[1];
        v43 = (unint64_t)*v40;
        v41 = (char *)(v40 + 2);
        v42 = v43;
        goto LABEL_89;
      }
      v38 = 1;
      while (v37 != (uint64_t ***)-4096)
      {
        v39 = v35 + v38++;
        v35 = v39 & (v34 - 1);
        v37 = *(uint64_t ****)(v33 + 16 * v35);
        if (v37 == v31)
        {
          v36 = (uint64_t ****)(v33 + 16 * v35);
          goto LABEL_88;
        }
      }
    }
    v36 = (uint64_t ****)(v33 + 16 * v34);
    goto LABEL_88;
  }
  if (a3 > 369)
  {
    if (a3 > 385)
    {
      switch(a3)
      {
        case 435:
        case 436:
        case 440:
          return llvm::LibCallSimplifier::optimizeTan(a1, (llvm::CallInst *)a2, (llvm::IRBuilderBase *)a4);
        case 437:
          goto LABEL_75;
        case 438:
        case 439:
        case 441:
        case 442:
        case 443:
        case 444:
          return result;
        case 445:
          v26 = a2;
          v27 = a4;
          v28 = 296;
          return (unsigned __int8 *)sub_1C5FBC26C(v26, v27, v28);
        default:
          if ((a3 - 393) < 3)
            return (unsigned __int8 *)llvm::LibCallSimplifier::optimizeSqrt(a1, (llvm::CallInst *)a2, (llvm::IRBuilderBase *)a4);
          if (a3 != 386)
            return result;
          goto LABEL_75;
      }
    }
    if (a3 <= 374)
    {
      if (a3 == 370)
      {
        v26 = a2;
        v27 = a4;
        v28 = 258;
      }
      else
      {
        if (a3 != 374)
          return result;
        v26 = a2;
        v27 = a4;
        v28 = 259;
      }
      return (unsigned __int8 *)sub_1C5FBC26C(v26, v27, v28);
    }
    if (a3 == 375)
    {
      v26 = a2;
      v27 = a4;
      v28 = 260;
      return (unsigned __int8 *)sub_1C5FBC26C(v26, v27, v28);
    }
    if (a3 != 384)
      return result;
    goto LABEL_75;
  }
  if ((a3 - 300) < 0xF)
    return (unsigned __int8 *)llvm::LibCallSimplifier::optimizeLog(a1, (llvm::CallInst *)a2, (llvm::IRBuilderBase *)a4);
  if ((a3 - 347) < 3)
    return (unsigned __int8 *)llvm::LibCallSimplifier::optimizePow(a1, (llvm::CallInst *)a2, (llvm::IRBuilderBase *)a4);
  if (a3 == 335)
  {
    v26 = a2;
    v27 = a4;
    v28 = 203;
    return (unsigned __int8 *)sub_1C5FBC26C(v26, v27, v28);
  }
  return result;
}

uint64_t sub_1C5FBC26C(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  int v10;
  uint64_t *v11;
  uint64_t Declaration;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v16[4];
  __int16 v17;
  uint64_t v18;

  v5 = *(_DWORD *)(a2 + 96);
  v6 = *(_QWORD *)(a2 + 88);
  v7 = *(_BYTE *)(a2 + 100);
  v8 = *(_BYTE *)(a2 + 101);
  v9 = *(_BYTE *)(a2 + 102);
  v10 = *(unsigned __int8 *)(a1 + 17) >> 1;
  if (v10 == 127)
    v10 = -1;
  *(_DWORD *)(a2 + 96) = v10;
  v11 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40);
  v18 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  v16[0] = *(_QWORD *)a1;
  Declaration = llvm::Intrinsic::getDeclaration(v11, a3, v16, 1);
  if (Declaration)
    v13 = *(uint64_t ***)(Declaration + 24);
  else
    v13 = 0;
  v17 = 257;
  v14 = sub_1C4774778((uint64_t *)a2, v13, Declaration, &v18, 1, (uint64_t)v16, 0);
  llvm::Value::takeName((llvm::Value *)v14, (llvm::Value *)a1);
  if (v14 && *(_BYTE *)(v14 + 16) == 84)
    *(_WORD *)(v14 + 18) = *(_WORD *)(v14 + 18) & 0xFFFC | *(_WORD *)(a1 + 18) & 3;
  *(_DWORD *)(a2 + 96) = v5;
  *(_QWORD *)(a2 + 88) = v6;
  *(_BYTE *)(a2 + 100) = v7;
  *(_BYTE *)(a2 + 101) = v8;
  *(_BYTE *)(a2 + 102) = v9;
  return v14;
}

void *llvm::LibCallSimplifier::optimizeCall(llvm::LibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t v6;
  uint64_t ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  char v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::CallInst *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void *v31;
  llvm::CallInst *v33;
  _BOOL4 v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  llvm::IRBuilderBase *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ****v44;
  uint64_t ***v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t ***v49;
  char *v50;
  size_t v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  llvm::CallInst *v59;
  uint64_t v60;
  char *v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  llvm::IRBuilderBase *v66;
  llvm::CallInst *v67;
  int v68;
  llvm::IRBuilderBase *v69;
  __int128 v70;
  unsigned __int8 *v71;
  __int128 v72;
  unsigned int v73;
  unsigned __int8 *v74;
  void *v75;
  uint64_t v76;
  _QWORD v77[13];

  v77[12] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a2 + 8);
  if (v6 && (*(_BYTE *)(v6 + 14) & 0x10) != 0)
    goto LABEL_5;
  if (!llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 20))
    goto LABEL_7;
  v6 = *((_QWORD *)a2 + 8);
  if (v6)
  {
LABEL_5:
    if ((*(_BYTE *)(v6 + 12) & 0x10) != 0)
      goto LABEL_7;
  }
  if (!llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 4))
    return 0;
LABEL_7:
  v73 = 0;
  v7 = (uint64_t ***)*((_QWORD *)a2 - 4);
  if (!v7 || *((_BYTE *)v7 + 16) || (v8 = (uint64_t)v7[3], v8 != *((_QWORD *)a2 + 9)))
  {
    v7 = 0;
    v8 = *((_QWORD *)a2 + 9);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
  v12 = *(_QWORD *)(v9 + 216);
  v10 = v9 + 216;
  v11 = v12;
  v13 = *(_BYTE *)(v10 + 23);
  if (v13 >= 0)
    v14 = v10;
  else
    v14 = v11;
  v15 = *(_QWORD *)(v10 + 8);
  if (v13 >= 0)
    v16 = v13 & 0x7F;
  else
    v16 = v15;
  v17 = sub_1C4F77630((*((unsigned __int16 *)a2 + 9) >> 2) & 0x3FF, v14, v16, v8);
  v75 = v77;
  v76 = 0x200000000;
  v18 = *((_DWORD *)a2 + 5);
  if (v18 < 0 && (v57 = *((_QWORD *)a2 - 4 * (v18 & 0x7FFFFFF) - 1), (v57 & 0xFFFFFFFF0) != 0))
  {
    v58 = (v57 >> 4);
    v59 = a2;
    do
    {
      v60 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      v61 = (char *)a2 - 32 * v60;
      v62 = (unsigned int *)((char *)v59 - *((_QWORD *)v61 - 1) + -32 * v60);
      v63 = *v62;
      v64 = v62[1];
      v65 = *((_QWORD *)v62 - 1);
      v69 = (llvm::IRBuilderBase *)&v61[32 * v63];
      *(_QWORD *)&v70 = v64 - v63;
      *((_QWORD *)&v70 + 1) = v65;
      sub_1C623D924((uint64_t)&v75, (uint64_t)&v69);
      v59 = (llvm::CallInst *)((char *)v59 + 16);
      --v58;
    }
    while (v58);
    v20 = v75;
    v19 = v76;
  }
  else
  {
    v19 = 0;
    v20 = v77;
  }
  v72 = *(_OWORD *)((char *)a3 + 104);
  *((_QWORD *)a3 + 13) = v20;
  *((_QWORD *)a3 + 14) = v19;
  if (word_1ED828EC0)
  {
    v21 = byte_1ED828F38;
LABEL_21:
    *((_BYTE *)this + 56) = v21;
    goto LABEL_25;
  }
  if (sub_1C4774A9C((uint64_t)a2) && *((unsigned __int8 *)a2 + 17) >= 0xFEu)
  {
    v21 = 1;
    goto LABEL_21;
  }
LABEL_25:
  v22 = (_OWORD *)((char *)a3 + 104);
  v23 = *((_QWORD *)a2 - 4);
  if (v23 && !*(_BYTE *)(v23 + 16) && *(_QWORD *)(v23 + 24) == *((_QWORD *)a2 + 9))
  {
    if ((*(_BYTE *)(v23 + 33) & 0x20) != 0)
      v33 = a2;
    else
      v33 = 0;
    if (v33)
      v34 = v17;
    else
      v34 = 0;
    if (v34)
    {
      v27 = 0;
      v35 = *(_DWORD *)(*((_QWORD *)v33 - 4) + 36);
      if (v35 <= 193)
      {
        if ((v35 - 175) >= 3)
        {
          if (v35 != 76)
            goto LABEL_36;
          v36 = (uint64_t)llvm::LibCallSimplifier::optimizeExp2(this, a2, a3);
        }
        else
        {
          v36 = llvm::LibCallSimplifier::optimizeLog(this, a2, a3);
        }
      }
      else if (v35 <= 198)
      {
        if (v35 == 194)
        {
          v36 = llvm::LibCallSimplifier::optimizeMemCpy(this, a2, a3);
        }
        else
        {
          if (v35 != 197)
            goto LABEL_36;
          v36 = llvm::LibCallSimplifier::optimizeMemMove(this, a2, a3);
        }
      }
      else
      {
        switch(v35)
        {
          case 199:
            v36 = llvm::LibCallSimplifier::optimizeMemSet(this, a2, a3);
            break;
          case 280:
            v36 = llvm::LibCallSimplifier::optimizeSqrt(this, a2, a3);
            break;
          case 238:
            v36 = (uint64_t)llvm::LibCallSimplifier::optimizePow(this, a2, a3);
            break;
          default:
            goto LABEL_36;
        }
      }
LABEL_96:
      v27 = (void *)v36;
      goto LABEL_36;
    }
    if (v33)
      goto LABEL_35;
  }
  v24 = llvm::FortifiedLibCallSimplifier::optimizeCall((uint64_t **)this, a2, a3);
  if (!v24)
  {
    if ((*((_BYTE *)v7 + 33) & 0x20) != 0)
    {
LABEL_35:
      v27 = 0;
      goto LABEL_36;
    }
    if ((*((_BYTE *)v7 + 23) & 0x10) == 0)
    {
      v51 = 0;
      v50 = &byte_1C871356D;
      goto LABEL_99;
    }
    v40 = ***v7;
    v41 = *(_QWORD *)(v40 + 152);
    v42 = *(unsigned int *)(v40 + 168);
    if ((_DWORD)v42)
    {
      LODWORD(v43) = (v42 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v44 = (uint64_t ****)(v41 + 16 * v43);
      v45 = *v44;
      if (*v44 == v7)
      {
LABEL_98:
        v49 = v44[1];
        v52 = (size_t)*v49;
        v50 = (char *)(v49 + 2);
        v51 = v52;
LABEL_99:
        v53 = **((_QWORD **)this + 3);
        if (!llvm::TargetLibraryInfoImpl::getLibFunc(0, v50, v51, &v73))
          goto LABEL_35;
        v54 = v53;
        v55 = v73;
        if (!llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v54, (uint64_t)v7[3], v73))
          goto LABEL_35;
        v56 = (_QWORD *)*((_QWORD *)this + 3);
        if (((*(_QWORD *)(v56[1] + 8 * (v55 >> 6)) >> v55) & 1) != 0
          || ((*(unsigned __int8 *)(*v56 + (v55 >> 2)) >> (2 * (v55 & 3))) & 3) == 0)
        {
          goto LABEL_35;
        }
        if ((int)v55 > 298)
        {
          if ((_DWORD)v55 == 299 || (_DWORD)v55 == 413)
            goto LABEL_119;
        }
        else if ((_DWORD)v55 == 140 || (_DWORD)v55 == 294)
        {
          goto LABEL_119;
        }
        if (!v17)
          goto LABEL_35;
LABEL_119:
        v27 = llvm::LibCallSimplifier::optimizeStringMemoryLibCall(this, a2, a3);
        if (v27)
          goto LABEL_36;
        v27 = llvm::LibCallSimplifier::optimizeFloatingPointLibCall(this, (uint64_t)a2, v55, (uint64_t)a3);
        if (v27)
          goto LABEL_36;
        if ((int)v55 <= 251)
        {
          if ((int)v55 <= 231)
          {
            if ((v55 - 223) >= 3)
            {
              if ((v55 - 165) < 3)
              {
                v36 = (uint64_t)llvm::LibCallSimplifier::optimizeAtoi(0, (llvm::Type **)a2, v66);
              }
              else
              {
                if ((_DWORD)v55 != 140)
                  goto LABEL_36;
LABEL_149:
                v36 = (uint64_t)llvm::LibCallSimplifier::optimizeAbs(0, a2, a3);
              }
            }
            else
            {
              v36 = (uint64_t)llvm::LibCallSimplifier::optimizeFFS(0, a2, a3);
            }
            goto LABEL_96;
          }
          if ((v55 - 237) < 3)
          {
            v36 = (uint64_t)llvm::LibCallSimplifier::optimizeFls(0, a2, a3);
            goto LABEL_96;
          }
          if ((_DWORD)v55 != 232)
            goto LABEL_36;
          goto LABEL_140;
        }
        if ((int)v55 > 429)
        {
          if ((_DWORD)v55 != 430)
          {
            if ((_DWORD)v55 == 444)
            {
              v36 = llvm::LibCallSimplifier::optimizeToAscii(0, a2, a3);
              goto LABEL_96;
            }
            if ((_DWORD)v55 != 459)
              goto LABEL_36;
LABEL_140:
            v67 = a2;
            v68 = 0;
            goto LABEL_141;
          }
        }
        else
        {
          if ((int)v55 <= 343)
          {
            if ((int)v55 > 291)
            {
              switch((int)v55)
              {
                case 292:
                  v36 = (uint64_t)llvm::LibCallSimplifier::optimizeIsAscii(0, a2, a3);
                  goto LABEL_96;
                case 293:
                  v36 = (uint64_t)llvm::LibCallSimplifier::optimizeIsDigit(0, a2, a3);
                  goto LABEL_96;
                case 294:
                case 299:
                  goto LABEL_149;
                default:
                  goto LABEL_36;
              }
              goto LABEL_36;
            }
            switch((_DWORD)v55)
            {
              case 0x115:
                v36 = (uint64_t)llvm::LibCallSimplifier::optimizeFWrite((uint64_t **)this, a2, a3);
                break;
              case 0xFC:
                v36 = llvm::LibCallSimplifier::optimizeFPrintF(this, a2, a3);
                break;
              case 0xFF:
                v36 = llvm::LibCallSimplifier::optimizeFPuts(this, (llvm::BasicBlock **)a2, a3);
                break;
              default:
                goto LABEL_36;
            }
            goto LABEL_96;
          }
          if ((int)v55 <= 390)
          {
            if ((_DWORD)v55 != 344)
            {
              if ((_DWORD)v55 == 351)
              {
                v36 = (uint64_t)llvm::LibCallSimplifier::optimizePrintF(this, a2, a3);
              }
              else
              {
                if ((_DWORD)v55 != 356)
                  goto LABEL_36;
                v36 = llvm::LibCallSimplifier::optimizePuts((uint64_t **)this, a2, a3);
              }
              goto LABEL_96;
            }
            v67 = a2;
            v68 = -1;
LABEL_141:
            llvm::LibCallSimplifier::optimizeErrorReporting(0, v67, v66, v68);
            goto LABEL_35;
          }
          if ((_DWORD)v55 != 428)
          {
            if ((_DWORD)v55 == 391)
            {
              v36 = (uint64_t)llvm::LibCallSimplifier::optimizeSnPrintF((llvm::DataLayout **)this, a2, a3);
            }
            else
            {
              if ((_DWORD)v55 != 392)
                goto LABEL_36;
              v36 = (uint64_t)llvm::LibCallSimplifier::optimizeSPrintF(this, a2, a3);
            }
            goto LABEL_96;
          }
        }
        v36 = (uint64_t)llvm::LibCallSimplifier::optimizeStrtol(0, (llvm **)a2, v66);
        goto LABEL_96;
      }
      v46 = 1;
      while (v45 != (uint64_t ***)-4096)
      {
        v47 = v43 + v46++;
        v43 = v47 & (v42 - 1);
        v45 = *(uint64_t ****)(v41 + 16 * v43);
        if (v45 == v7)
        {
          v44 = (uint64_t ****)(v41 + 16 * v43);
          goto LABEL_98;
        }
      }
    }
    v44 = (uint64_t ****)(v41 + 16 * v42);
    goto LABEL_98;
  }
  v25 = (llvm::CallInst *)v24;
  if (*(_BYTE *)(v24 + 16) == 84)
  {
    v26 = *(_QWORD *)(v24 - 32);
    if (v26)
    {
      if (!*(_BYTE *)(v26 + 16) && *(_QWORD *)(v26 + 24) == *(_QWORD *)(v24 + 72))
      {
        (*((void (**)(_QWORD, llvm::CallInst *, uint64_t))this + 8))(*((_QWORD *)this + 9), a2, v24);
        v69 = a3;
        v70 = *((_OWORD *)a3 + 3);
        llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)a3, &v71);
        *((_QWORD *)a3 + 6) = *((_QWORD *)v25 + 5);
        *((_QWORD *)a3 + 7) = (char *)v25 + 24;
        v37 = (unsigned __int8 *)*((_QWORD *)v25 + 6);
        v74 = v37;
        if (v37)
        {
          llvm::MetadataTracking::track((uint64_t)&v74, v37, 2);
          v38 = v74;
        }
        else
        {
          v38 = 0;
        }
        sub_1C4774EF4((uint64_t)a3, 0, (uint64_t)v38);
        if (v74)
          llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
        v27 = llvm::LibCallSimplifier::optimizeStringMemoryLibCall(this, v25, a3);
        if (v27)
        {
          (*((void (**)(_QWORD, llvm::CallInst *, void *))this + 8))(*((_QWORD *)this + 9), v25, v27);
          (*((void (**)(_QWORD, llvm::CallInst *))this + 10))(*((_QWORD *)this + 11), v25);
        }
        v39 = v69;
        if ((_QWORD)v70)
        {
          sub_1C4D8AE2C((uint64_t)v69, v70, *((uint64_t *)&v70 + 1));
          v39 = v69;
        }
        else
        {
          *((_QWORD *)v69 + 6) = 0;
          *((_QWORD *)v39 + 7) = 0;
        }
        v74 = v71;
        if (v71)
        {
          llvm::MetadataTracking::track((uint64_t)&v74, v71, 2);
          v48 = v74;
        }
        else
        {
          v48 = 0;
        }
        sub_1C4774EF4((uint64_t)v39, 0, (uint64_t)v48);
        if (v74)
          llvm::MetadataTracking::untrack((uint64_t)&v74, v74);
        if (v71)
        {
          llvm::MetadataTracking::untrack((uint64_t)&v71, v71);
          if (v27)
            goto LABEL_36;
        }
        else if (v27)
        {
          goto LABEL_36;
        }
      }
    }
  }
  v27 = v25;
LABEL_36:
  *v22 = v72;
  v28 = (char *)v75;
  if ((_DWORD)v76)
  {
    v29 = 48 * v76;
    do
    {
      v30 = &v28[v29];
      v31 = *(void **)&v28[v29 - 24];
      if (v31)
      {
        *((_QWORD *)v30 - 2) = v31;
        operator delete(v31);
      }
      if (*(v30 - 25) < 0)
        operator delete(*((void **)v30 - 6));
      v29 -= 48;
    }
    while (v29);
    v28 = (char *)v75;
  }
  if (v28 != (char *)v77)
    free(v28);
  return v27;
}

uint64_t llvm::FortifiedLibCallSimplifier::optimizeCall(uint64_t **this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t ***v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ****v28;
  uint64_t ***v29;
  int v30;
  int v31;
  uint64_t ***v32;
  char *v33;
  size_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  llvm::CallInst *v41;
  uint64_t v42;
  char *v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  _QWORD v57[13];

  v57[12] = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t ***)*((_QWORD *)a2 - 4);
  if (!v6 || *((_BYTE *)v6 + 16) || (v7 = (uint64_t)v6[3], v7 != *((_QWORD *)a2 + 9)))
  {
    v6 = 0;
    v7 = *((_QWORD *)a2 + 9);
  }
  v52 = 0;
  v8 = (*((unsigned __int16 *)a2 + 9) >> 2) & 0x3FF;
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
  v12 = *(_QWORD *)(v9 + 216);
  v10 = v9 + 216;
  v11 = v12;
  v13 = *(_BYTE *)(v10 + 23);
  if (v13 >= 0)
    v14 = v10;
  else
    v14 = v11;
  v15 = *(_QWORD *)(v10 + 8);
  if (v13 >= 0)
    v16 = v13 & 0x7F;
  else
    v16 = v15;
  v17 = sub_1C4F77630(v8, v14, v16, v7);
  v18 = v17;
  v55 = v57;
  v56 = 0x200000000;
  v19 = *((_DWORD *)a2 + 5);
  if (v19 < 0 && (v39 = *((_QWORD *)a2 - 4 * (v19 & 0x7FFFFFF) - 1), (v39 & 0xFFFFFFFF0) != 0))
  {
    v40 = (v39 >> 4);
    v41 = a2;
    do
    {
      v42 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      v43 = (char *)a2 - 32 * v42;
      v44 = (unsigned int *)((char *)v41 - *((_QWORD *)v43 - 1) + -32 * v42);
      v45 = *v44;
      v46 = v44[1];
      v47 = *((_QWORD *)v44 - 1);
      *(_QWORD *)&v53 = &v43[32 * v45];
      *((_QWORD *)&v53 + 1) = v46 - v45;
      v54 = v47;
      v17 = sub_1C623D924((uint64_t)&v55, (uint64_t)&v53);
      v41 = (llvm::CallInst *)((char *)v41 + 16);
      --v40;
    }
    while (v40);
    v21 = v55;
    v20 = v56;
  }
  else
  {
    v20 = 0;
    v21 = v57;
  }
  v53 = *(_OWORD *)((char *)a3 + 104);
  *((_QWORD *)a3 + 13) = v21;
  *((_QWORD *)a3 + 14) = v20;
  if ((*((_BYTE *)v6 + 33) & 0x20) != 0)
    goto LABEL_13;
  if ((*((_BYTE *)v6 + 23) & 0x10) != 0)
  {
    v24 = ***v6;
    v25 = *(_QWORD *)(v24 + 152);
    v26 = *(unsigned int *)(v24 + 168);
    if ((_DWORD)v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v28 = (uint64_t ****)(v25 + 16 * v27);
      v29 = *v28;
      if (*v28 == v6)
      {
LABEL_25:
        v32 = v28[1];
        v35 = (size_t)*v32;
        v33 = (char *)(v32 + 2);
        v34 = v35;
        goto LABEL_26;
      }
      v30 = 1;
      while (v29 != (uint64_t ***)-4096)
      {
        v31 = v27 + v30++;
        v27 = v31 & (v26 - 1);
        v29 = *(uint64_t ****)(v25 + 16 * v27);
        if (v29 == v6)
        {
          v28 = (uint64_t ****)(v25 + 16 * v27);
          goto LABEL_25;
        }
      }
    }
    v28 = (uint64_t ****)(v25 + 16 * v26);
    goto LABEL_25;
  }
  v34 = 0;
  v33 = &byte_1C871356D;
LABEL_26:
  v36 = **this;
  if (!llvm::TargetLibraryInfoImpl::getLibFunc(v17, v33, v34, &v52))
    goto LABEL_13;
  v37 = (uint64_t)v6[3];
  v38 = v52;
  if (!llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v36, v37, v52))
    goto LABEL_13;
  result = 0;
  if (v38 > 298)
  {
    if (v38 == 299 || v38 == 413)
      goto LABEL_14;
  }
  else if (v38 == 140 || v38 == 294)
  {
    goto LABEL_14;
  }
  if (!v18)
  {
LABEL_13:
    result = 0;
    goto LABEL_14;
  }
  result = 0;
  switch(v38)
  {
    case 102:
      result = llvm::FortifiedLibCallSimplifier::optimizeMemCCpyChk(this, a2, a3);
      break;
    case 103:
      result = llvm::FortifiedLibCallSimplifier::optimizeMemCpyChk((llvm::FortifiedLibCallSimplifier *)this, a2, a3);
      break;
    case 104:
      result = llvm::FortifiedLibCallSimplifier::optimizeMemMoveChk((llvm::FortifiedLibCallSimplifier *)this, a2, a3);
      break;
    case 105:
      result = (uint64_t)llvm::FortifiedLibCallSimplifier::optimizeMemPCpyChk(this, a2, a3);
      break;
    case 106:
      result = llvm::FortifiedLibCallSimplifier::optimizeMemSetChk((llvm::FortifiedLibCallSimplifier *)this, a2, a3);
      break;
    case 121:
      result = llvm::FortifiedLibCallSimplifier::optimizeSNPrintfChk(this, a2, a3);
      break;
    case 122:
      result = llvm::FortifiedLibCallSimplifier::optimizeSPrintfChk(this, a2, a3);
      break;
    case 126:
    case 129:
      result = (uint64_t)llvm::FortifiedLibCallSimplifier::optimizeStrpCpyChk(this, (unint64_t)a2, (uint64_t)a3, v38);
      break;
    case 127:
    case 135:
      result = llvm::FortifiedLibCallSimplifier::optimizeStrpNCpyChk(this, (unint64_t)a2, a3, v38);
      break;
    case 128:
      result = llvm::FortifiedLibCallSimplifier::optimizeStrCatChk(this, a2, a3);
      break;
    case 131:
      result = llvm::FortifiedLibCallSimplifier::optimizeStrLCat(this, a2, a3);
      break;
    case 132:
      result = llvm::FortifiedLibCallSimplifier::optimizeStrLCpyChk(this, a2, a3);
      break;
    case 133:
      result = llvm::FortifiedLibCallSimplifier::optimizeStrLenChk(this, (llvm **)a2, a3);
      break;
    case 134:
      result = llvm::FortifiedLibCallSimplifier::optimizeStrNCatChk(this, a2, a3);
      break;
    case 138:
      result = llvm::FortifiedLibCallSimplifier::optimizeVSNPrintfChk(this, a2, a3);
      break;
    case 139:
      result = llvm::FortifiedLibCallSimplifier::optimizeVSPrintfChk(this, a2, a3);
      break;
    default:
      break;
  }
LABEL_14:
  *(_OWORD *)((char *)a3 + 104) = v53;
  v23 = v55;
  if ((_DWORD)v56)
  {
    v48 = result;
    v49 = 48 * v56;
    v50 = (char *)v55 - 48;
    do
    {
      sub_1C4EEC55C((uint64_t)&v50[v49]);
      v49 -= 48;
    }
    while (v49);
    v23 = v55;
    result = v48;
  }
  if (v23 != v57)
  {
    v51 = result;
    free(v23);
    return v51;
  }
  return result;
}

uint64_t llvm::LibCallSimplifier::LibCallSimplifier(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(_QWORD *)result = a3;
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = a4;
  *(_QWORD *)(result + 40) = a5;
  *(_QWORD *)(result + 48) = a6;
  *(_BYTE *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = a7;
  *(_QWORD *)(result + 72) = a8;
  *(_QWORD *)(result + 80) = a9;
  *(_QWORD *)(result + 88) = a10;
  return result;
}

{
  *(_QWORD *)result = a3;
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = a4;
  *(_QWORD *)(result + 40) = a5;
  *(_QWORD *)(result + 48) = a6;
  *(_BYTE *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = a7;
  *(_QWORD *)(result + 72) = a8;
  *(_QWORD *)(result + 80) = a9;
  *(_QWORD *)(result + 88) = a10;
  return result;
}

uint64_t llvm::FortifiedLibCallSimplifier::FortifiedLibCallSimplifier(uint64_t result, uint64_t a2, char a3)
{
  *(_QWORD *)result = a2;
  *(_BYTE *)(result + 8) = a3;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(_BYTE *)(result + 8) = a3;
  return result;
}

uint64_t llvm::LibCallSimplifier::eraseFromParent(llvm::LibCallSimplifier *this, llvm::Instruction *a2)
{
  return (*((uint64_t (**)(_QWORD, llvm::Instruction *))this + 10))(*((_QWORD *)this + 11), a2);
}

unint64_t llvm::FortifiedLibCallSimplifier::isFortifiedCallFoldable(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  llvm::APInt *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t result;
  unsigned int v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  v30 = a5;
  v11 = *(_DWORD *)(a2 + 20);
  if ((a6 & 0xFF00000000) != 0)
  {
    v12 = *(_QWORD *)(a2 - 32 * (v11 & 0x7FFFFFF) + 32 * a6);
    if (v12)
      v13 = *(_BYTE *)(v12 + 16) == 16;
    else
      v13 = 0;
    if (!v13)
      return 0;
    v14 = (llvm::APInt *)(v12 + 24);
    v15 = *(_DWORD *)(v12 + 32);
    if (v15 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v14) != v15)
        return 0;
    }
    else if (*(_QWORD *)v14)
    {
      return 0;
    }
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    v16 = v11 & 0x7FFFFFF;
    v17 = a2 - 32 * v16;
    v18 = *(_QWORD *)(v17 + 32 * a3);
    if (v18 == *(_QWORD *)(v17 + 32 * a4))
      return 1;
    v19 = -v16;
  }
  else
  {
    v19 = -(uint64_t)(v11 & 0x7FFFFFF);
    v18 = *(_QWORD *)(a2 - 32 * (v11 & 0x7FFFFFF) + 32 * a3);
  }
  if (v18)
    v20 = *(_BYTE *)(v18 + 16) == 16;
  else
    v20 = 0;
  if (!v20)
    return 0;
  v22 = *(_DWORD *)(v18 + 32);
  if (!v22)
    return 1;
  v23 = (_QWORD *)(v18 + 24);
  if (v22 > 0x40)
  {
    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v18 + 24)) == v22)
      return 1;
  }
  else if (*v23 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v22)
  {
    return 1;
  }
  if (*(_BYTE *)(a1 + 8))
    return 0;
  v24 = a2 + 32 * v19;
  if ((a5 & 0xFF00000000) == 0)
  {
    if ((a4 & 0xFF00000000) == 0)
      return 0;
    v25 = *(_QWORD *)(v24 + 32 * a4);
    if (!v25 || *(_BYTE *)(v25 + 16) != 16)
      return 0;
    if (v22 >= 0x41)
      v23 = (_QWORD *)*v23;
    v27 = (_QWORD *)*v23;
    v28 = (_QWORD *)(v25 + 24);
    if (*(_DWORD *)(v25 + 32) >= 0x41u)
      v28 = (_QWORD *)*v28;
    v29 = (_QWORD *)*v28;
    return v27 >= v29;
  }
  result = llvm::GetStringLength(*(llvm **)(v24 + 32 * a5), (const llvm::Value *)8);
  if (result)
  {
    v29 = (_QWORD *)result;
    sub_1C5FB0110(a2, (int *)&v30, 1, result);
    if (*(_DWORD *)(v18 + 32) >= 0x41u)
      v23 = (_QWORD *)*v23;
    v27 = (_QWORD *)*v23;
    return v27 >= v29;
  }
  return result;
}

uint64_t llvm::FortifiedLibCallSimplifier::optimizeMemCpyChk(llvm::FortifiedLibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  int v5;
  uint64_t result;
  char *v7;
  llvm::Value *MemTransferInst;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[2];
  _QWORD *v16[3];
  uint64_t v17;

  v5 = llvm::FortifiedLibCallSimplifier::isFortifiedCallFoldable((uint64_t)this, (unint64_t)a2, 3u, 0x100000002, 0, 0);
  result = 0;
  if (v5)
  {
    v7 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
    MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)a3, 194, *(llvm::Value **)v7, 256, *((llvm::Value **)v7 + 4), 256, *((uint64_t **)v7 + 8), 0, 0, 0, 0, 0);
    v9 = *((_QWORD *)a2 + 8);
    *((_QWORD *)MemTransferInst + 8) = v9;
    v10 = (uint64_t *)((char *)MemTransferInst + 64);
    v11 = *(uint64_t ***)MemTransferInst;
    llvm::AttributeFuncs::typeIncompatible(*(_QWORD *)MemTransferInst, 3, v15);
    v12 = *v11;
    if (v9)
    {
      if (*(_DWORD *)(v9 + 8) >= 2u)
        v9 = *(_QWORD *)(v9 + 48);
      else
        v9 = 0;
    }
    v17 = v9;
    v13 = llvm::AttributeSet::removeAttributes(&v17, v12, (uint64_t)v15);
    if (v9 == v13)
      v14 = *v10;
    else
      v14 = llvm::AttributeList::setAttributesAtIndex(v10, v12, 0, v13);
    *((_QWORD *)MemTransferInst + 8) = v14;
    sub_1C5010E9C((uint64_t)v16, v16[1]);
    if (*((_BYTE *)MemTransferInst + 16) == 84)
      *((_WORD *)MemTransferInst + 9) = *((_WORD *)MemTransferInst + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
    return *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  }
  return result;
}

uint64_t llvm::FortifiedLibCallSimplifier::optimizeMemMoveChk(llvm::FortifiedLibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  int v5;
  uint64_t result;
  char *v7;
  llvm::Value *MemMove;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];
  _QWORD *v17[3];
  uint64_t v18;

  v5 = llvm::FortifiedLibCallSimplifier::isFortifiedCallFoldable((uint64_t)this, (unint64_t)a2, 3u, 0x100000002, 0, 0);
  result = 0;
  if (v5)
  {
    v7 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
    MemMove = llvm::IRBuilderBase::CreateMemMove((uint64_t)a3, *(llvm::Value **)v7, 256, *((llvm::Value **)v7 + 4), 256, *((uint64_t **)v7 + 8), 0, 0, 0, 0);
    v9 = *((_QWORD *)a2 + 8);
    *((_QWORD *)MemMove + 8) = v9;
    v10 = (uint64_t *)((char *)MemMove + 64);
    v11 = *(uint64_t ***)MemMove;
    llvm::AttributeFuncs::typeIncompatible(*(_QWORD *)MemMove, 3, v16);
    v12 = 0;
    v13 = *v11;
    if (v9)
    {
      if (*(_DWORD *)(v9 + 8) >= 2u)
        v12 = *(_QWORD *)(v9 + 48);
      else
        v12 = 0;
    }
    v18 = v12;
    v14 = llvm::AttributeSet::removeAttributes(&v18, v13, (uint64_t)v16);
    if (v12 == v14)
      v15 = *v10;
    else
      v15 = llvm::AttributeList::setAttributesAtIndex(v10, v13, 0, v14);
    *((_QWORD *)MemMove + 8) = v15;
    sub_1C5010E9C((uint64_t)v17, v17[1]);
    if (*((_BYTE *)MemMove + 16) == 84)
      *((_WORD *)MemMove + 9) = *((_WORD *)MemMove + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
    return *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  }
  return result;
}

uint64_t llvm::FortifiedLibCallSimplifier::optimizeMemSetChk(llvm::FortifiedLibCallSimplifier *this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  int v5;
  uint64_t result;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t **v10;
  llvm::Value *MemSet;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];
  _QWORD *v20[2];
  __int16 v21;
  uint64_t v22;

  v5 = llvm::FortifiedLibCallSimplifier::isFortifiedCallFoldable((uint64_t)this, (unint64_t)a2, 3u, 0x100000002, 0, 0);
  result = 0;
  if (v5)
  {
    v7 = (unsigned __int8 *)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
    v8 = **((_QWORD **)a3 + 8) + 1912;
    v21 = 257;
    v9 = sub_1C4D8D514((uint64_t *)a3, v7, v8, 0, (uint64_t)v19);
    v10 = (uint64_t **)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
    MemSet = llvm::IRBuilderBase::CreateMemSet((uint64_t)a3, (llvm::Value *)*v10, (uint64_t)v9, v10[8], 256, 0, 0, 0, 0);
    v12 = *((_QWORD *)a2 + 8);
    *((_QWORD *)MemSet + 8) = v12;
    v13 = (uint64_t *)((char *)MemSet + 64);
    v14 = *(uint64_t ***)MemSet;
    llvm::AttributeFuncs::typeIncompatible(*(_QWORD *)MemSet, 3, v19);
    v15 = 0;
    v16 = *v14;
    if (v12)
    {
      if (*(_DWORD *)(v12 + 8) >= 2u)
        v15 = *(_QWORD *)(v12 + 48);
      else
        v15 = 0;
    }
    v22 = v15;
    v17 = llvm::AttributeSet::removeAttributes(&v22, v16, (uint64_t)v19);
    if (v15 == v17)
      v18 = *v13;
    else
      v18 = llvm::AttributeList::setAttributesAtIndex(v13, v16, 0, v17);
    *((_QWORD *)MemSet + 8) = v18;
    sub_1C5010E9C((uint64_t)v20, v20[1]);
    if (*((_BYTE *)MemSet + 16) == 84)
      *((_WORD *)MemSet + 9) = *((_WORD *)MemSet + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
    return *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  }
  return result;
}

uint64_t *llvm::FortifiedLibCallSimplifier::optimizeMemPCpyChk(uint64_t **this, llvm::CallInst *a2, llvm::IRBuilderBase *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[2];
  _QWORD *v18[3];
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
  v7 = 0;
  if (llvm::FortifiedLibCallSimplifier::isFortifiedCallFoldable((uint64_t)this, (unint64_t)a2, 3u, 0x100000002, 0, 0))
  {
    v9 = (uint64_t *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
    v10 = (uint64_t *)llvm::emitMemPCpy(*v9, v9[4], v9[8], (uint64_t)a3, (llvm::DataLayout *)(v6 + 272), *this);
    v7 = v10;
    if (v10)
    {
      v11 = *((_QWORD *)a2 + 8);
      v10[8] = v11;
      v12 = v10 + 8;
      v13 = (uint64_t **)*v10;
      llvm::AttributeFuncs::typeIncompatible(*v10, 3, v17);
      v14 = *v13;
      if (v11)
      {
        if (*(_DWORD *)(v11 + 8) >= 2u)
          v11 = *(_QWORD *)(v11 + 48);
        else
          v11 = 0;
      }
      v19 = v11;
      v15 = llvm::AttributeSet::removeAttributes(&v19, v14, (uint64_t)v17);
      if (v11 == v15)
        v16 = *v12;
      else
        v16 = llvm::AttributeList::setAttributesAtIndex(v7 + 8, v14, 0, v15);
      v7[8] = v16;
      sub_1C5010E9C((uint64_t)v18, v18[1]);
      if (*((_BYTE *)v7 + 16) == 84)
        *((_WORD *)v7 + 9) = *((_WORD *)v7 + 9) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
    }
  }
  return v7;
}

uint64_t ***llvm::FortifiedLibCallSimplifier::optimizeStrpCpyChk(_QWORD **a1, unint64_t a2, uint64_t a3, int a4)
{
  llvm::DataLayout *v8;
  unint64_t v9;
  llvm *v10;
  llvm *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t ***result;
  uint64_t v15;
  llvm::ConstantInt *IntPtrType;
  llvm::Value **v17;
  llvm::GetElementPtrInst *v18;
  llvm::Value **v19;
  llvm::GetElementPtrInst *v20;
  int v21[8];
  __int16 v22;

  v8 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272);
  v9 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  v10 = *(llvm **)v9;
  v11 = *(llvm **)(v9 + 32);
  v12 = *(_QWORD *)(v9 + 64);
  if (a4 == 126)
  {
    if (*((_BYTE *)a1 + 8))
      v13 = 0;
    else
      v13 = v10 == v11;
    if (v13)
    {
      result = (uint64_t ***)llvm::emitStrLen(v10, a3, v8, *a1);
      if (result)
      {
        v20 = (llvm::GetElementPtrInst *)(**(_QWORD **)(a3 + 64) + 1912);
        v22 = 257;
        return sub_1C5098FF4((uint64_t *)a3, v20, (uint64_t *)v10, (uint64_t)result, (uint64_t)v21);
      }
      return result;
    }
    if ((llvm::FortifiedLibCallSimplifier::isFortifiedCallFoldable((uint64_t)a1, a2, 2u, 0, 0x100000001, 0) & 1) != 0)
      goto LABEL_20;
  }
  else if ((llvm::FortifiedLibCallSimplifier::isFortifiedCallFoldable((uint64_t)a1, a2, 2u, 0, 0x100000001, 0) & 1) != 0)
  {
    if (a4 == 129)
    {
      result = (uint64_t ***)llvm::emitStrCpy(v10, v11, (llvm::Value *)a3, *a1);
      goto LABEL_21;
    }
LABEL_20:
    result = (uint64_t ***)llvm::emitStpCpy(v10, v11, (llvm::Value *)a3, *a1);
LABEL_21:
    if (result)
    {
      if (*((_BYTE *)result + 16) == 84)
        *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xFFFC | *(_WORD *)(a2 + 18) & 3;
    }
    return result;
  }
  if (*((_BYTE *)a1 + 8))
    return 0;
  result = (uint64_t ***)llvm::GetStringLength(v11, (const llvm::Value *)8);
  if (result)
  {
    v15 = (uint64_t)result;
    v21[0] = 1;
    sub_1C5FB0110(a2, v21, 1, (unint64_t)result);
    IntPtrType = (llvm::ConstantInt *)llvm::DataLayout::getIntPtrType(v8, **(llvm::LLVMContext ***)a2, 0);
    v17 = llvm::ConstantInt::get(IntPtrType, v15, 0);
    result = (uint64_t ***)llvm::emitMemCpyChk(v10, v11, (uint64_t)v17, v12, a3, v8, *a1);
    if (a4 == 126 && result)
    {
      v18 = (llvm::GetElementPtrInst *)(**(_QWORD **)(a3 + 64) + 1912);
      v19 = llvm::ConstantInt::get(IntPtrType, v15 - 1, 0);
      v22 = 257;
      return sub_1C4867B70((uint64_t *)a3, v18, (uint64_t *)v10, (uint64_t)v19, (uint64_t)v21);
    }
    goto LABEL_21;
  }
  return result;
}

unsigned __int8 *sub_1C5FBDA94(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t ***v4;
  uint64_t v8;
  unsigned __int8 *result;
  _BYTE *v10;
  llvm::APFloatBase *v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ****v18;
  uint64_t ***v19;
  int v20;
  int v21;
  uint64_t ***v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t ***v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ****v31;
  uint64_t ***v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  int v40;
  uint64_t *v41;
  int v42;
  uint64_t Declaration;
  uint64_t v44;
  uint64_t **v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t ***v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  BOOL v55;
  BOOL v56;
  int v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  int v61;
  char v62;
  __int16 v63;
  uint64_t v64[4];
  __int16 v65;
  uint64_t v66[3];

  v66[2] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t ****)(a1 - 32);
  if (!v4 || *((_BYTE *)v4 + 16) || v4[3] != *(uint64_t ***)(a1 + 72) || *(_BYTE *)(*(_QWORD *)a1 + 8) != 3)
    return 0;
  if (!a4 || (v8 = *(_QWORD *)(a1 + 8)) == 0)
  {
LABEL_11:
    v11 = sub_1C5FBDEA0(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)));
    v66[0] = (uint64_t)v11;
    if (a3)
      v12 = (uint64_t *)sub_1C5FBDEA0(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32));
    else
      v12 = 0;
    result = 0;
    v66[1] = (uint64_t)v12;
    if (v12)
      v13 = 0;
    else
      v13 = a3;
    if (!v11 || (v13 & 1) != 0)
      return result;
    if ((*((_BYTE *)v4 + 23) & 0x10) == 0)
    {
      v24 = 0;
      v23 = (unsigned __int8 *)&byte_1C871356D;
LABEL_28:
      if ((*((_BYTE *)v4 + 33) & 0x20) != 0)
      {
        v35 = *(_DWORD *)(a2 + 96);
        v36 = *(_QWORD *)(a2 + 88);
        v37 = *(_BYTE *)(a2 + 100);
        v38 = *(_BYTE *)(a2 + 101);
        v39 = *(_BYTE *)(a2 + 102);
        v40 = *(unsigned __int8 *)(a1 + 17) >> 1;
        if (v40 == 127)
          v40 = -1;
        *(_DWORD *)(a2 + 96) = v40;
        v41 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40);
        v42 = *((_DWORD *)v4 + 9);
        v64[0] = **(_QWORD **)(a2 + 64) + 1672;
        Declaration = llvm::Intrinsic::getDeclaration(v41, v42, v64, 1);
        v44 = Declaration;
        if (a3)
        {
          if (Declaration)
            v45 = *(uint64_t ***)(Declaration + 24);
          else
            v45 = 0;
          v65 = 257;
          v46 = v64;
          v47 = (uint64_t *)a2;
          v48 = 2;
        }
        else
        {
          if (Declaration)
            v45 = *(uint64_t ***)(Declaration + 24);
          else
            v45 = 0;
          v63 = 257;
          v46 = (uint64_t *)&v62;
          v47 = (uint64_t *)a2;
          v48 = 1;
        }
        v49 = (uint64_t *)sub_1C4774778(v47, v45, v44, v66, v48, (uint64_t)v46, 0);
        goto LABEL_48;
      }
      v26 = *(uint64_t ****)(*(_QWORD *)(a1 + 40) + 56);
      if ((*((_BYTE *)v26 + 23) & 0x10) == 0)
      {
LABEL_63:
        v61 = *(_DWORD *)(a2 + 96);
        v60 = *(_QWORD *)(a2 + 88);
        v59 = *(_BYTE *)(a2 + 100);
        v38 = *(_BYTE *)(a2 + 101);
        v39 = *(_BYTE *)(a2 + 102);
        v57 = *(unsigned __int8 *)(a1 + 17) >> 1;
        if (v57 == 127)
          v57 = -1;
        *(_DWORD *)(a2 + 96) = v57;
        v64[0] = (uint64_t)v4[14];
        if ((a3 & 1) != 0)
          v58 = llvm::emitBinaryFloatFnCall(v11, v12, v23, v24, a2, v64);
        else
          v58 = llvm::emitUnaryFloatFnCall(v11, v23, v24, a2, v64);
        v49 = (uint64_t *)v58;
        v35 = v61;
        v36 = v60;
        v37 = v59;
LABEL_48:
        v50 = (uint64_t *)(**(_QWORD **)(a2 + 64) + 1696);
        v65 = 257;
        result = sub_1C47721A0(a2, v49, v50, (uint64_t)v64);
        *(_DWORD *)(a2 + 96) = v35;
        *(_QWORD *)(a2 + 88) = v36;
        *(_BYTE *)(a2 + 100) = v37;
        *(_BYTE *)(a2 + 101) = v38;
        *(_BYTE *)(a2 + 102) = v39;
        return result;
      }
      v27 = ***v26;
      v28 = *(_QWORD *)(v27 + 152);
      v29 = *(unsigned int *)(v27 + 168);
      if ((_DWORD)v29)
      {
        LODWORD(v30) = (v29 - 1) & ((v26 >> 4) ^ (v26 >> 9));
        v31 = (uint64_t ****)(v28 + 16 * v30);
        v32 = *v31;
        if (*v31 == v26)
        {
LABEL_50:
          v51 = v31[1];
          v54 = (unint64_t)*v51;
          v52 = (char *)(v51 + 2);
          v53 = v54;
          if (v54)
          {
            v55 = v52[v53 - 1] == 102 && v53 == v24 + 1;
            v56 = v55 && v53 >= v24;
            if (v56 && (!v24 || !memcmp(v52, v23, v24)))
              return 0;
          }
          goto LABEL_63;
        }
        v33 = 1;
        while (v32 != (uint64_t ***)-4096)
        {
          v34 = v30 + v33++;
          v30 = v34 & (v29 - 1);
          v32 = *(uint64_t ****)(v28 + 16 * v30);
          if (v32 == v26)
          {
            v31 = (uint64_t ****)(v28 + 16 * v30);
            goto LABEL_50;
          }
        }
      }
      v31 = (uint64_t ****)(v28 + 16 * v29);
      goto LABEL_50;
    }
    v14 = ***v4;
    v15 = *(_QWORD *)(v14 + 152);
    v16 = *(unsigned int *)(v14 + 168);
    if ((_DWORD)v16)
    {
      LODWORD(v17) = (v16 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v18 = (uint64_t ****)(v15 + 16 * v17);
      v19 = *v18;
      if (*v18 == v4)
      {
LABEL_27:
        v22 = v18[1];
        v25 = (unint64_t)*v22;
        v23 = (unsigned __int8 *)(v22 + 2);
        v24 = v25;
        goto LABEL_28;
      }
      v20 = 1;
      while (v19 != (uint64_t ***)-4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v16 - 1);
        v19 = *(uint64_t ****)(v15 + 16 * v17);
        if (v19 == v4)
        {
          v18 = (uint64_t ****)(v15 + 16 * v17);
          goto LABEL_27;
        }
      }
    }
    v18 = (uint64_t ****)(v15 + 16 * v16);
    goto LABEL_27;
  }
  while (1)
  {
    result = 0;
    v10 = *(_BYTE **)(v8 + 24);
    if (!v10 || v10[16] != 73)
      return result;
    if (*(_BYTE *)(*(_QWORD *)v10 + 8) != 2)
      return 0;
    v8 = *(_QWORD *)(v8 + 8);
    if (!v8)
      goto LABEL_11;
  }
}

llvm::APFloatBase *sub_1C5FBDEA0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  llvm::APFloatBase *v3;
  char v4;
  int v5;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  const llvm::APFloat *v13;
  int v14;
  unsigned __int8 v16;
  char v17[8];
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;

  v1 = a1;
  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v2 == 74)
  {
    v3 = *(llvm::APFloatBase **)(a1 - 32);
    if (*(_BYTE *)(*(_QWORD *)v3 + 8) == 2)
      return v3;
    return 0;
  }
  if (!a1 || v2 != 17)
    return 0;
  v3 = *(llvm::APFloatBase **)(a1 + 32);
  if (v3 == (llvm::APFloatBase *)&unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v18, (const llvm::detail::DoubleAPFloat *)(a1 + 32));
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 32);
    if ((*((_DWORD *)v3 + 2) + 64) >= 0x80)
    {
      a1 = operator new[]();
      v19 = a1;
    }
    v4 = *(_BYTE *)(v1 + 52);
    v5 = v4 & 7;
    v21 = v4 & 0xF;
    v20 = *(_DWORD *)(v1 + 48);
    v7 = (v4 & 6) != 0 && v5 != 3;
    if (v5 == 1 || v7)
    {
      v8 = *((unsigned int *)v3 + 2);
      if ((v8 - 64) <= 0xFFFFFF7F)
        v9 = (uint64_t *)a1;
      else
        v9 = &v19;
      v10 = (uint64_t *)(v1 + 40);
      if ((*(_DWORD *)(*(_QWORD *)(v1 + 32) + 8) - 64) < 0xFFFFFF80)
        v10 = *(uint64_t **)(v1 + 40);
      if (v8 <= 0xFFFFFFBF)
      {
        v11 = (unint64_t)(v8 + 64) >> 6;
        do
        {
          v12 = *v10++;
          *v9++ = v12;
          --v11;
        }
        while (v11);
      }
    }
  }
  v16 = 0;
  llvm::APFloat::convert((uint64_t)v17, &unk_1C866F184, 1, &v16);
  v14 = v16;
  if (!v16)
    v3 = llvm::ConstantFP::get(**(llvm::ConstantFP ***)v1, (llvm::LLVMContext *)v17, v13);
  if ((_UNKNOWN *)v18 == &unk_1C866F1C0)
  {
    sub_1C4773C74(&v19);
  }
  else if ((*(_DWORD *)(v18 + 8) - 64) <= 0xFFFFFF7F && v19)
  {
    MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  }
  if (v14)
    return 0;
  return v3;
}

uint64_t sub_1C5FBE0A4()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  v4 = 1;
  v2 = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Enable unsafe double to float shrinking for math lib calls";
  v1.n128_u64[1] = 58;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED828EB8, "enable-double-float-shrink", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED828EB8, &dword_1C475E000);
}

uint64_t llvm::shouldOptimizeForSize(uint64_t ***a1, llvm::ProfileSummaryInfo *this, uint64_t **a3)
{
  uint64_t result;
  int *v6;
  int v7;
  _BOOL4 v9;
  int v10;

  result = 0;
  if (this && a3)
  {
    v6 = (int *)*((_QWORD *)this + 1);
    if (!v6)
      return 0;
    if (byte_1ED838258)
      return 1;
    if (!byte_1ED837DD8)
      return 0;
    if (byte_1ED837F58)
      return llvm::ProfileSummaryInfo::isFunctionColdInCallGraph(this, a1, a3);
    v7 = *v6;
    if (!*v6 && byte_1ED838018 != 0)
      return llvm::ProfileSummaryInfo::isFunctionColdInCallGraph(this, a1, a3);
    if (v7 != 2)
      goto LABEL_31;
    if (byte_1ED82E960)
    {
      v9 = 1;
    }
    else
    {
      v10 = *((unsigned __int8 *)v6 + 72);
      v9 = *((_BYTE *)v6 + 72) != 0;
      if (!v10 && byte_1ED8380D8)
        return llvm::ProfileSummaryInfo::isFunctionColdInCallGraph(this, a1, a3);
    }
    if (!v9 || !byte_1ED838198)
    {
LABEL_31:
      if (!byte_1ED837E98 || *((_BYTE *)this + 51) && *((_BYTE *)this + 50))
      {
        if (v7 == 2)
          return llvm::ProfileSummaryInfo::isFunctionColdInCallGraphNthPercentile(this, dword_1ED8383D8, a1, a3);
        else
          return llvm::ProfileSummaryInfo::isFunctionHotInCallGraphNthPercentile(this, dword_1ED838318, a1, a3) ^ 1;
      }
    }
    return llvm::ProfileSummaryInfo::isFunctionColdInCallGraph(this, a1, a3);
  }
  return result;
}

BOOL llvm::shouldOptimizeForSize(llvm::BasicBlock *a1, uint64_t a2, uint64_t **this)
{
  _BOOL8 result;
  int *v7;
  int v8;
  BOOL v9;
  _BOOL4 v10;
  uint64_t *BlockProfileCount;
  char v12;
  int v13;

  result = 0;
  if (a2 && this)
  {
    v7 = *(int **)(a2 + 8);
    if (!v7)
      return 0;
    if (byte_1ED838258)
      return 1;
    if (!byte_1ED837DD8)
      return 0;
    if (byte_1ED837F58 || ((v8 = *v7) == 0 ? (v9 = byte_1ED838018 == 0) : (v9 = 1), !v9))
    {
LABEL_21:
      BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(this, a1, 0);
      if (v12 && *(_BYTE *)(a2 + 40))
        return *(_QWORD *)(a2 + 32) >= (unint64_t)BlockProfileCount;
      return 0;
    }
    if (v8 == 2)
    {
      if (byte_1ED82E960)
      {
        v10 = 1;
      }
      else
      {
        v13 = *((unsigned __int8 *)v7 + 72);
        v10 = *((_BYTE *)v7 + 72) != 0;
        if (!v13 && byte_1ED8380D8)
          goto LABEL_21;
      }
      if (v10 && byte_1ED838198)
        goto LABEL_21;
    }
    if (byte_1ED837E98 && (!*(_BYTE *)(a2 + 51) || !*(_BYTE *)(a2 + 50)))
      goto LABEL_21;
    if (v8 == 2)
      return llvm::ProfileSummaryInfo::isColdBlockNthPercentile((llvm::ProfileSummaryInfo *)a2, dword_1ED8383D8, a1, this);
    else
      return !llvm::ProfileSummaryInfo::isHotBlockNthPercentile((llvm::ProfileSummaryInfo *)a2, dword_1ED838318, a1, this);
  }
  return result;
}

__n128 sub_1C5FBE394(_WORD *a1, char **a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&llvm::EnablePGSO, "pgso", 4uLL);
  word_1ED837D62 = (32 * (*a1 & 3)) | word_1ED837D62 & 0xFF9F;
  v6 = *a2;
  byte_1ED837DD8 = **a2;
  byte_1ED837DE9 = 1;
  byte_1ED837DE8 = *v6;
  result = *a3;
  xmmword_1ED837D78 = (__int128)*a3;
  return result;
}

__n128 sub_1C5FBE418(_WORD *a1, char **a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&llvm::PGSOColdCodeOnlyForSamplePGO, "pgso-cold-code-only-for-sample-pgo", 0x22uLL);
  word_1ED838062 = (32 * (*a1 & 3)) | word_1ED838062 & 0xFF9F;
  v6 = *a2;
  byte_1ED8380D8 = **a2;
  byte_1ED8380E9 = 1;
  byte_1ED8380E8 = *v6;
  result = *a3;
  xmmword_1ED838078 = (__int128)*a3;
  return result;
}

uint64_t sub_1C5FBE49C()
{
  __n128 v1;
  int v2;
  int v3;
  int *v4;
  int v5;

  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Enable the profile guided size optimizations. ";
  v1.n128_u64[1] = 46;
  sub_1C63BAA38(&v5, (char **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnablePGSO, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v3) = 1;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Apply the profile guided size optimizations only if the working set size is large ("
                                     "except for cold code.)";
  v1.n128_u64[1] = 105;
  sub_1C4E5DE0C((llvm::cl::Option *)&llvm::PGSOLargeWorkingSetSizeOnly, "pgso-lwss-only", &v5, (_BYTE **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::PGSOLargeWorkingSetSizeOnly, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v3) = 0;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Apply the profile guided size optimizations only to cold code.";
  v1.n128_u64[1] = 62;
  sub_1C4E5DE0C((llvm::cl::Option *)&llvm::PGSOColdCodeOnly, "pgso-cold-code-only", &v5, (_BYTE **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::PGSOColdCodeOnly, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v3) = 0;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Apply the profile guided size optimizations only to cold code under instrumentation PGO.";
  v1.n128_u64[1] = 88;
  sub_1C4E5DE0C((llvm::cl::Option *)&llvm::PGSOColdCodeOnlyForInstrPGO, "pgso-cold-code-only-for-instr-pgo", &v5, (_BYTE **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::PGSOColdCodeOnlyForInstrPGO, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v3) = 0;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Apply the profile guided size optimizations only to cold code under sample PGO.";
  v1.n128_u64[1] = 79;
  sub_1C63BAADC(&v5, (char **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::PGSOColdCodeOnlyForSamplePGO, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v3) = 0;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Apply the profile guided size optimizations only to cold code under partial-profile sample PGO.";
  v1.n128_u64[1] = 95;
  sub_1C4E5DE0C((llvm::cl::Option *)&llvm::PGSOColdCodeOnlyForPartialSamplePGO, "pgso-cold-code-only-for-partial-sample-pgo", &v5, (_BYTE **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::PGSOColdCodeOnlyForPartialSamplePGO, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v3) = 0;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Force the (profiled-guided) size optimizations. ";
  v1.n128_u64[1] = 48;
  sub_1C4E5DE0C((llvm::cl::Option *)&llvm::ForcePGSO, "force-pgso", &v5, (_BYTE **)&v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::ForcePGSO, &dword_1C475E000);
  v5 = 1;
  v2 = 1;
  v3 = 950000;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"The profile guided size optimization profile summary cutoff for instrumentation profile.";
  v1.n128_u64[1] = 88;
  sub_1C6199A9C((llvm::cl::Option *)&llvm::PgsoCutoffInstrProf, "pgso-cutoff-instr-prof", &v5, &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &llvm::PgsoCutoffInstrProf, &dword_1C475E000);
  v5 = 1;
  v2 = 1;
  v3 = 990000;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"The profile guided size optimization profile summary cutoff for sample profile.";
  v1.n128_u64[1] = 79;
  sub_1C6199A9C((llvm::cl::Option *)&llvm::PgsoCutoffSampleProf, "pgso-cutoff-sample-prof", &v5, &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &llvm::PgsoCutoffSampleProf, &dword_1C475E000);
}

uint64_t llvm::SplitModule(uint64_t *a1, unsigned int a2, void (*a3)(uint64_t, llvm::Module **), uint64_t a4, char a5)
{
  uint64_t *v6;
  llvm::GlobalAlias *v7;
  uint64_t *v8;
  llvm::GlobalAlias *v9;
  uint64_t *v10;
  llvm::GlobalAlias *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t i;
  llvm::GlobalValue *v25;
  uint64_t *j;
  llvm::GlobalValue *v27;
  uint64_t *k;
  llvm::GlobalValue *v29;
  uint64_t *m;
  llvm::GlobalValue *v31;
  llvm::Module *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  _QWORD *v36;
  llvm::Module *v37;
  llvm::Module **v38;
  char *v39;
  unsigned int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _QWORD **v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  llvm::Module *v71;
  llvm::Module *v72;
  llvm::Module *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  int32x2_t *v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  int v88;
  int v89;
  BOOL v90;
  unint64_t v91;
  unint64_t *v92;
  uint64_t v93;
  int32x2_t *v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v107[2];
  int v108;
  unsigned int v109;
  llvm::Module *v110;
  llvm::Module *v111;
  uint64_t v112;
  int v113;
  _BYTE v114[256];
  _QWORD v115[2];
  int v116;
  llvm::Module *v117;
  _QWORD *v118[3];
  void *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122[3];
  char v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v109 = a2;
  if ((a5 & 1) == 0)
  {
    v23 = a1 + 3;
    for (i = a1[4]; (uint64_t *)i != v23; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v25 = (llvm::GlobalValue *)(i - 56);
      else
        v25 = 0;
      sub_1C5FBF190(v25);
    }
    for (j = (uint64_t *)a1[2]; j != a1 + 1; j = (uint64_t *)j[1])
    {
      if (j)
        v27 = (llvm::GlobalValue *)(j - 7);
      else
        v27 = 0;
      sub_1C5FBF190(v27);
    }
    for (k = (uint64_t *)a1[6]; k != a1 + 5; k = (uint64_t *)k[1])
    {
      if (k)
        v29 = (llvm::GlobalValue *)(k - 6);
      else
        v29 = 0;
      sub_1C5FBF190(v29);
    }
    for (m = (uint64_t *)a1[8]; m != a1 + 7; m = (uint64_t *)m[1])
    {
      if (m)
        v31 = (llvm::GlobalValue *)(m - 7);
      else
        v31 = 0;
      sub_1C5FBF190(v31);
    }
  }
  v107[0] = 0;
  v107[1] = 0;
  v108 = 0;
  v118[0] = 0;
  v118[1] = 0;
  v117 = (llvm::Module *)v118;
  v115[0] = 0;
  v115[1] = 0;
  v116 = 0;
  v6 = (uint64_t *)a1[4];
  v119 = &v117;
  v120 = (uint64_t)v115;
  while (v6 != a1 + 3)
  {
    if (v6)
      v7 = (llvm::GlobalAlias *)(v6 - 7);
    else
      v7 = 0;
    sub_1C5FBF24C((uint64_t)&v119, v7);
    v6 = (uint64_t *)v6[1];
  }
  v8 = (uint64_t *)a1[2];
  v119 = &v117;
  v120 = (uint64_t)v115;
  while (v8 != a1 + 1)
  {
    if (v8)
      v9 = (llvm::GlobalAlias *)(v8 - 7);
    else
      v9 = 0;
    sub_1C5FBF24C((uint64_t)&v119, v9);
    v8 = (uint64_t *)v8[1];
  }
  v10 = (uint64_t *)a1[6];
  v119 = &v117;
  v120 = (uint64_t)v115;
  while (v10 != a1 + 5)
  {
    if (v10)
      v11 = (llvm::GlobalAlias *)(v10 - 6);
    else
      v11 = 0;
    sub_1C5FBF24C((uint64_t)&v119, v11);
    v10 = (uint64_t *)v10[1];
  }
  if (a2)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    do
    {
      if (v14 >= v13)
      {
        v17 = (v14 - v15) >> 3;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
LABEL_176:
          abort();
        if ((v13 - v15) >> 2 > v18)
          v18 = (v13 - v15) >> 2;
        if ((unint64_t)(v13 - v15) >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
        {
          if (v19 >> 61)
LABEL_177:
            sub_1C4764EE4();
          v20 = (char *)operator new(8 * v19);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v17];
        *(_QWORD *)v21 = v12;
        v16 = (uint64_t)(v21 + 8);
        if (v14 != v15)
        {
          do
          {
            v22 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v21 - 1) = v22;
            v21 -= 8;
          }
          while (v14 != v15);
          v14 = v15;
        }
        v15 = v21;
        v13 = &v20[8 * v19];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v14 = v12;
        v16 = (uint64_t)(v14 + 8);
      }
      sub_1C5FBF7B4((uint64_t)v15, v16, (v16 - (uint64_t)v15) >> 3);
      ++v12;
      v14 = (char *)v16;
    }
    while (v12 != a2);
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v13 = 0;
  }
  v119 = &v121;
  v120 = 0x4000000000;
  v110 = (llvm::Module *)v114;
  v111 = (llvm::Module *)v114;
  v112 = 32;
  v113 = 0;
  v32 = v117;
  if (v117 == (llvm::Module *)v118)
  {
    v40 = &v121;
    v39 = (char *)&v121;
  }
  else
  {
    v33 = 0;
    do
    {
      if ((*((_BYTE *)v32 + 40) & 1) != 0)
      {
        v34 = 0;
        v35 = (unint64_t)v32 + 32;
        do
        {
          ++v34;
          v35 = *(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFFELL;
        }
        while (v35);
        if (v33 >= HIDWORD(v120))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, (uint64_t)&v121, v33 + 1, 16);
          v33 = v120;
        }
        v36 = (char *)v119 + 16 * v33;
        *v36 = v34;
        v36[1] = v32;
        v33 = v120 + 1;
        LODWORD(v120) = v120 + 1;
      }
      v37 = (llvm::Module *)*((_QWORD *)v32 + 1);
      if (v37)
      {
        do
        {
          v38 = (llvm::Module **)v37;
          v37 = *(llvm::Module **)v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = (llvm::Module **)*((_QWORD *)v32 + 2);
          v90 = *v38 == v32;
          v32 = (llvm::Module *)v38;
        }
        while (!v90);
      }
      v32 = (llvm::Module *)v38;
    }
    while (v38 != (llvm::Module **)v118);
    v39 = (char *)v119;
    v40 = (unsigned int *)((char *)v119 + 16 * v33);
    if (v33)
    {
      v41 = 126 - 2 * __clz(v33);
      goto LABEL_84;
    }
  }
  v41 = 0;
LABEL_84:
  sub_1C5FBF864(v39, (unint64_t)v40, v41, 1);
  if ((_DWORD)v120)
  {
    v42 = (char *)v119;
    v43 = (char *)v119 + 16 * v120;
    do
    {
      v45 = *(unsigned int *)v15;
      v44 = *((unsigned int *)v15 + 1);
      if (v16 - (uint64_t)v15 >= 9)
      {
        v46 = 0;
        v47 = (v16 - (uint64_t)v15) >> 3;
        v48 = *(_QWORD *)v15;
        v49 = v15;
        do
        {
          v50 = &v49[8 * v46 + 8];
          v51 = (2 * v46) | 1;
          v52 = 2 * v46 + 2;
          if (v52 < v47)
          {
            v53 = *((_DWORD *)v50 + 1);
            v54 = *((_DWORD *)v50 + 3);
            if (!(v53 | v54))
            {
              v53 = *(_DWORD *)v50;
              v54 = *((_DWORD *)v50 + 2);
            }
            if (v53 > v54)
            {
              v50 += 8;
              v51 = v52;
            }
          }
          *(_DWORD *)v49 = *(_DWORD *)v50;
          *((_DWORD *)v49 + 1) = *((_DWORD *)v50 + 1);
          v49 = v50;
          v46 = v51;
        }
        while (v51 <= (uint64_t)((unint64_t)(v47 - 2) >> 1));
        if (v50 == (char *)(v16 - 8))
        {
          *(_QWORD *)v50 = v48;
        }
        else
        {
          *(_DWORD *)v50 = *(_DWORD *)(v16 - 8);
          *((_DWORD *)v50 + 1) = *(_DWORD *)(v16 - 4);
          *(_QWORD *)(v16 - 8) = v48;
          sub_1C5FBF7B4((uint64_t)v15, (uint64_t)(v50 + 8), (v50 + 8 - v15) >> 3);
        }
      }
      v55 = (_QWORD **)*((_QWORD *)v42 + 1);
      if (v118 != v55)
      {
        v56 = sub_1C5715004((uint64_t)(v55 + 4));
        if (v56)
        {
          v57 = v56;
          do
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v110, *(_QWORD *)(v57 + 16));
            if (v58)
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v110, *(_QWORD *)(v57 + 16));
              *((_DWORD *)sub_1C6242D74(v107, (uint64_t *)(v57 + 16)) + 2) = v45;
              v44 = (v44 + 1);
            }
            v57 = *(_QWORD *)(v57 + 8) & 0xFFFFFFFFFFFFFFFELL;
          }
          while (v57);
        }
      }
      v59 = (char *)(v16 - 8);
      v60 = v45 | (v44 << 32);
      if (v59 >= v13)
      {
        v63 = (v59 - v15) >> 3;
        v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 61)
          goto LABEL_176;
        if ((v13 - v15) >> 2 > v64)
          v64 = (v13 - v15) >> 2;
        if ((unint64_t)(v13 - v15) >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v65 = v64;
        if (v65)
        {
          if (v65 >> 61)
            goto LABEL_177;
          v66 = (char *)operator new(8 * v65);
        }
        else
        {
          v66 = 0;
        }
        v62 = &v66[8 * v63];
        *(_QWORD *)v62 = v60;
        v61 = (uint64_t)v62;
        if (v59 != v15)
        {
          v61 = (uint64_t)v62;
          do
          {
            v67 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            *(_QWORD *)(v61 - 8) = v67;
            v61 -= 8;
          }
          while (v59 != v15);
        }
        v13 = &v66[8 * v65];
        operator delete(v15);
        v15 = (char *)v61;
      }
      else
      {
        *(_QWORD *)v59 = v60;
        v61 = (uint64_t)v15;
        v62 = v59;
      }
      v16 = (uint64_t)(v62 + 8);
      sub_1C5FBF7B4(v61, (uint64_t)(v62 + 8), (uint64_t)&v62[-v61 + 8] >> 3);
      v42 += 16;
    }
    while (v42 != v43);
  }
  if (v111 != v110)
    free(v111);
  if (v119 != &v121)
    free(v119);
  if (v15)
    operator delete(v15);
  MEMORY[0x1CAA32FB4](v115[0], 8);
  sub_1C49F3440(v118[0]);
  for (LODWORD(v115[0]) = 0; LODWORD(v115[0]) < v109; ++LODWORD(v115[0]))
  {
    v121 = 128;
    v68 = operator new(0x2000uLL, (std::align_val_t)8uLL);
    v119 = v68;
    v120 = 0;
    if (v121)
    {
      v69 = (unint64_t)v121 << 6;
      v70 = v68 + 2;
      do
      {
        *v70 = 0;
        v70[1] = -4096;
        *(v70 - 2) = &unk_1E814DA10;
        *(v70 - 1) = 2;
        v70[2] = 0;
        v70 += 8;
        v69 -= 64;
      }
      while (v69);
    }
    LOBYTE(v122[0]) = 0;
    v123 = 0;
    v110 = (llvm::Module *)v107;
    v111 = (llvm::Module *)v115;
    v112 = (uint64_t)&v109;
    llvm::CloneModule(a1, (uint64_t)&v119, (uint64_t (*)(uint64_t, const llvm::GlobalValue *))sub_1C5FC3914, (uint64_t)&v110, (uint64_t *)&v117);
    if (LODWORD(v115[0]))
      LLVMSetModuleInlineAsm2_0((uint64_t)v117, "", 0);
    v71 = v117;
    v117 = 0;
    v110 = v71;
    a3(a4, &v110);
    v72 = v110;
    v110 = 0;
    if (v72)
    {
      llvm::Module::~Module(v72);
      MEMORY[0x1CAA32FC0]();
    }
    v73 = v117;
    v117 = 0;
    if (v73)
    {
      llvm::Module::~Module(v73);
      MEMORY[0x1CAA32FC0]();
    }
    if (v123)
    {
      sub_1C4E43068((uint64_t)v122);
      MEMORY[0x1CAA32FB4](v122[0], 8);
      v123 = 0;
    }
    v74 = (char *)v119;
    if (v121)
    {
      v75 = (char *)v119 + 64 * (unint64_t)v121;
      do
      {
        v76 = *((_QWORD *)v74 + 3);
        if ((v76 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v77 = *((_QWORD *)v74 + 7);
          if (v77)
          {
            if (v77 != -8192 && v77 != -4096)
            {
              v78 = *((_QWORD *)v74 + 5) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v78 = *((_QWORD *)v74 + 6);
              v79 = (unint64_t *)*((_QWORD *)v74 + 6);
              if (v79)
              {
                *v79 = *v79 & 7 | v78;
              }
              else
              {
                v80 = *((_QWORD *)v74 + 7);
                v81 = ***(int32x2_t ****)v80;
                v82 = (unint64_t)v81[303];
                if (v82 <= v78)
                {
                  v83 = v81[305].u32[0];
                  if (v82 + 16 * v83 > v78)
                  {
                    v84 = v83 - 1;
                    LODWORD(v85) = v84 & ((v80 >> 4) ^ (v80 >> 9));
                    v86 = (uint64_t *)(v82 + 16 * v85);
                    v87 = *v86;
                    if (v80 == *v86)
                    {
LABEL_152:
                      *v86 = -8192;
                      v81[304] = vadd_s32(v81[304], (int32x2_t)0x1FFFFFFFFLL);
                      v80 = *((_QWORD *)v74 + 7);
                    }
                    else
                    {
                      v88 = 1;
                      while (v87 != -4096)
                      {
                        v89 = v85 + v88++;
                        v85 = v89 & v84;
                        v87 = *(_QWORD *)(v82 + 16 * v85);
                        if (v80 == v87)
                        {
                          v86 = (uint64_t *)(v82 + 16 * v85);
                          goto LABEL_152;
                        }
                      }
                    }
                    *(_BYTE *)(v80 + 17) &= ~1u;
                  }
                }
              }
              v76 = *((_QWORD *)v74 + 3);
            }
          }
        }
        if (v76 != -4096)
        {
          v90 = v76 == -8192 || v76 == 0;
          if (!v90)
          {
            v91 = *((_QWORD *)v74 + 1) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v91 = *((_QWORD *)v74 + 2);
            v92 = (unint64_t *)*((_QWORD *)v74 + 2);
            if (v92)
            {
              *v92 = *v92 & 7 | v91;
            }
            else
            {
              v93 = *((_QWORD *)v74 + 3);
              v94 = ***(int32x2_t ****)v93;
              v95 = (unint64_t)v94[303];
              if (v95 <= v91)
              {
                v96 = v94[305].u32[0];
                if (v95 + 16 * v96 > v91)
                {
                  v97 = v96 - 1;
                  LODWORD(v98) = v97 & ((v93 >> 4) ^ (v93 >> 9));
                  v99 = (uint64_t *)(v95 + 16 * v98);
                  v100 = *v99;
                  if (v93 == *v99)
                  {
LABEL_171:
                    *v99 = -8192;
                    v94[304] = vadd_s32(v94[304], (int32x2_t)0x1FFFFFFFFLL);
                    v93 = *((_QWORD *)v74 + 3);
                  }
                  else
                  {
                    v101 = 1;
                    while (v100 != -4096)
                    {
                      v102 = v98 + v101++;
                      v98 = v102 & v97;
                      v100 = *(_QWORD *)(v95 + 16 * v98);
                      if (v93 == v100)
                      {
                        v99 = (uint64_t *)(v95 + 16 * v98);
                        goto LABEL_171;
                      }
                    }
                  }
                  *(_BYTE *)(v93 + 17) &= ~1u;
                }
              }
            }
          }
        }
        v74 += 64;
      }
      while (v74 != v75);
      v74 = (char *)v119;
    }
    MEMORY[0x1CAA32FB4](v74, 8);
  }
  return MEMORY[0x1CAA32FB4](v107[0], 8);
}

void sub_1C5FBF190(llvm::GlobalValue *this)
{
  int v2;
  unsigned int v3;
  int hasExternalWeakLinkage;
  unsigned int v5;
  const char *v6;
  __int16 v7;

  v2 = *((_DWORD *)this + 8);
  if ((v2 & 0xFu) - 7 > 1)
    goto LABEL_9;
  v3 = v2 & 0xFFFFFFF0;
  *((_DWORD *)this + 8) = v2 & 0xFFFFFFF0;
  if ((v2 & 0x30) != 0)
  {
    hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(this);
    v3 = *((_DWORD *)this + 8);
    if (!hasExternalWeakLinkage)
      v3 |= 0x4000u;
  }
  v5 = v3 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)this + 8) = v5;
  if ((v3 & 0xF) - 7 >= 2)
  {
    if ((llvm::GlobalValue::hasExternalWeakLinkage(this) & 1) != 0)
      goto LABEL_9;
    v5 = *((_DWORD *)this + 8);
  }
  *((_DWORD *)this + 8) = v5 | 0x4000;
LABEL_9:
  if ((*((_BYTE *)this + 23) & 0x10) == 0)
  {
    v6 = "__llvmsplit_unnamed";
    v7 = 259;
    llvm::Value::setName((uint64_t ***)this, (uint64_t)&v6);
  }
}

void sub_1C5FBF24C(uint64_t a1, llvm::GlobalAlias *this)
{
  int v4;
  llvm::GlobalAlias *AliaseeObject;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  int v12;
  unsigned int v13;
  llvm::GlobalIFunc *ResolverFunction;
  const llvm::BasicBlock *v15;
  uint64_t **v16;
  uint64_t *v17;
  _QWORD *i;
  llvm::BlockAddress *v19;
  llvm::Constant *v20;
  llvm::Constant *v21;
  unint64_t v22[2];
  int v23;
  __int16 v24;

  v4 = *((unsigned __int8 *)this + 16);
  if (*((_BYTE *)this + 16))
  {
    if (v4 == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      return;
  }
  else if (*((llvm::GlobalAlias **)this + 9) == (llvm::GlobalAlias *)((char *)this + 72)
         && (*((_BYTE *)this + 34) & 0x80) == 0)
  {
    return;
  }
  if ((*((_BYTE *)this + 23) & 0x10) == 0)
  {
    v22[0] = (unint64_t)"__llvmsplit_unnamed";
    v24 = 259;
    llvm::Value::setName((uint64_t ***)this, (uint64_t)v22);
    v4 = *((unsigned __int8 *)this + 16);
  }
  if (v4 != 2)
  {
    AliaseeObject = this;
    if (v4 != 1 || (AliaseeObject = (llvm::GlobalAlias *)llvm::GlobalAlias::getAliaseeObject(this)) != 0)
    {
      v6 = *((_QWORD *)AliaseeObject + 6);
      if (v6)
      {
        v7 = *(_QWORD *)(a1 + 8);
        v22[0] = 0;
        v8 = sub_1C49F21C0(*(_QWORD *)v7, *(_DWORD *)(v7 + 16), v6, v22);
        v9 = (uint64_t *)v22[0];
        if ((v8 & 1) != 0)
        {
          v10 = *(uint64_t **)(v22[0] + 8);
          if (v10)
          {
            v11 = *(uint64_t ***)a1;
            v22[0] = (unint64_t)this;
            sub_1C5FBF4C4(v11, v10, v22);
            goto LABEL_21;
          }
LABEL_20:
          v9[1] = (uint64_t)this;
          goto LABEL_21;
        }
        v12 = *(_DWORD *)(v7 + 8);
        v13 = *(_DWORD *)(v7 + 16);
        if (4 * v12 + 4 >= 3 * v13)
        {
          v13 *= 2;
        }
        else if (v13 + ~v12 - *(_DWORD *)(v7 + 12) > v13 >> 3)
        {
LABEL_17:
          ++*(_DWORD *)(v7 + 8);
          if (*v9 != -4096)
            --*(_DWORD *)(v7 + 12);
          *v9 = v6;
          v9[1] = 0;
          goto LABEL_20;
        }
        sub_1C5FBF684(v7, v13);
        v22[0] = 0;
        sub_1C49F21C0(*(_QWORD *)v7, *(_DWORD *)(v7 + 16), v6, v22);
        v9 = (uint64_t *)v22[0];
        goto LABEL_17;
      }
    }
  }
LABEL_21:
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  ResolverFunction = (llvm::GlobalIFunc *)sub_1C53D5A28((uint64_t)this, (uint64_t)v22);
  MEMORY[0x1CAA32FB4](v22[0], 8);
  if (ResolverFunction)
  {
    if ((*((_BYTE *)ResolverFunction + 16) != 2
       || (ResolverFunction = (llvm::GlobalIFunc *)llvm::GlobalIFunc::getResolverFunction(ResolverFunction)) != 0)
      && ResolverFunction != this)
    {
      v16 = *(uint64_t ***)a1;
      v22[0] = (unint64_t)ResolverFunction;
      sub_1C5FBF4C4(v16, (uint64_t *)this, v22);
    }
  }
  if (*((_BYTE *)this + 16))
    v17 = 0;
  else
    v17 = (uint64_t *)this;
  if (!*((_BYTE *)this + 16))
  {
    for (i = (_QWORD *)*((_QWORD *)this + 10); i != (_QWORD *)((char *)this + 72); i = (_QWORD *)i[1])
    {
      if (i)
        v19 = (llvm::BlockAddress *)(i - 3);
      else
        v19 = 0;
      v20 = (llvm::Constant *)llvm::BlockAddress::lookup(v19, v15);
      if (v20)
      {
        v21 = v20;
        if (llvm::Constant::isConstantUsed(v20))
          sub_1C5FBF570(*(uint64_t ***)a1, v17, *((_QWORD *)v21 + 1));
      }
    }
  }
  if ((*((_DWORD *)this + 8) & 0xFu) - 7 <= 1)
    sub_1C5FBF570(*(uint64_t ***)a1, (uint64_t *)this, *((_QWORD *)this + 1));
}

uint64_t sub_1C5FBF4C4(uint64_t **a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v5 = sub_1C4F5394C(a1, (unint64_t)a2, a2);
  v6 = sub_1C4F5394C(a1, *a3, (uint64_t *)*a3);
  v7 = a1 + 1;
  if (v7 == v5)
    v8 = 0;
  else
    v8 = sub_1C5715004((uint64_t)(v5 + 4));
  if (v7 == v6)
    result = 0;
  else
    result = sub_1C5715004((uint64_t)(v6 + 4));
  if (v8 != result)
  {
    *(_QWORD *)(*(_QWORD *)v8 + 8) = *(_QWORD *)(*(_QWORD *)v8 + 8) & 1 | result;
    v10 = *(_QWORD *)(result + 8);
    *(_QWORD *)v8 = *(_QWORD *)result;
    *(_QWORD *)result = v8;
    *(_QWORD *)(result + 8) = v10 & 0xFFFFFFFFFFFFFFFELL;
  }
  return result;
}

void sub_1C5FBF570(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  void *v11;
  unsigned int v12;
  int v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v3 = a3;
    do
    {
      v6 = *(_QWORD *)(v3 + 24);
      v11 = v14;
      v13 = 4;
      v14[0] = v6;
      v7 = 1;
      do
      {
        v8 = *((_QWORD *)v11 + v7 - 1);
        v12 = v7 - 1;
        v9 = *(unsigned __int8 *)(v8 + 16);
        if (v9 - 21 >= 0xFFFFFFEF)
        {
          sub_1C528A680((unsigned int *)&v11, *(_QWORD *)(v8 + 8), 0);
        }
        else
        {
          if (v9 >= 0x1C)
          {
            v8 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 56);
          }
          else if (v9 >= 4)
          {
            v8 = 0;
          }
          v10 = v8;
          sub_1C5FBF4C4(a1, a2, &v10);
        }
        v7 = v12;
      }
      while (v12);
      if (v11 != v14)
        free(v11);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
}

_QWORD *sub_1C5FBF684(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *v13;
          v15[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1C5FBF7B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = v3 >> 1;
    v5 = (unsigned int *)(result + 8 * (v3 >> 1));
    v6 = v5[1];
    v7 = *(_DWORD *)(a2 - 4);
    if (v6 | v7)
    {
      if (v6 <= v7)
        return result;
      v8 = *v5;
    }
    else
    {
      v8 = *v5;
      if (*v5 <= *(_DWORD *)(a2 - 8))
        return result;
    }
    v9 = *(_DWORD *)(a2 - 8);
    v10 = *(_DWORD *)(a2 - 4);
    *(_DWORD *)(a2 - 8) = v8;
    *(_DWORD *)(a2 - 4) = v5[1];
    if (v3 >= 2)
    {
      do
      {
        v12 = v4 - 1;
        v4 = (v4 - 1) >> 1;
        v11 = (unsigned int *)(result + 8 * v4);
        v13 = v11[1];
        if (v13 | v10)
        {
          if (v13 <= v10)
            goto LABEL_8;
          v14 = *v11;
        }
        else
        {
          v14 = *v11;
          if (*v11 <= v9)
            goto LABEL_8;
        }
        *v5 = v14;
        v5[1] = v13;
        v5 = (unsigned int *)(result + 8 * v4);
      }
      while (v12 > 1);
    }
    else
    {
LABEL_8:
      v11 = v5;
    }
    *v11 = v9;
    v11[1] = v10;
  }
  return result;
}

char *sub_1C5FBF864(char *result, unint64_t a2, uint64_t a3, char a4)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t ***v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ****v21;
  uint64_t ***v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t ***v26;
  size_t v27;
  size_t v28;
  uint64_t ***v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ****v34;
  uint64_t ***v35;
  int v36;
  int v37;
  uint64_t ***v38;
  char *v39;
  size_t v40;
  size_t v41;
  size_t v42;
  unsigned int v43;
  BOOL v44;
  uint64_t ***v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ****v50;
  uint64_t ***v51;
  int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  uint64_t ***v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t ****v64;
  uint64_t ***v65;
  int v66;
  int v67;
  uint64_t ***v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t ***v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t ****v77;
  uint64_t ***v78;
  int v79;
  int v80;
  uint64_t ***v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  size_t v85;
  int v86;
  _DWORD *v87;
  unsigned int v88;
  _DWORD *v89;
  uint64_t ***v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t ****v95;
  uint64_t ***v96;
  int v97;
  int v98;
  uint64_t ***v99;
  char *v100;
  size_t v101;
  size_t v102;
  uint64_t ***v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t ****v108;
  uint64_t ***v109;
  int v110;
  int v111;
  uint64_t ***v112;
  char *v113;
  size_t v114;
  size_t v115;
  size_t v116;
  int v117;
  _DWORD *v118;
  unsigned int v119;
  uint64_t ***v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t ****v125;
  uint64_t ***v126;
  int v127;
  int v128;
  BOOL v129;
  uint64_t ***v130;
  char *v131;
  size_t v132;
  size_t v133;
  uint64_t ***v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t ****v139;
  uint64_t ***v140;
  int v141;
  int v142;
  uint64_t ***v143;
  char *v144;
  size_t v145;
  size_t v146;
  size_t v147;
  int v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t ***v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t ****v159;
  uint64_t ***v160;
  int v161;
  int v162;
  uint64_t ***v163;
  char *v164;
  size_t v165;
  size_t v166;
  uint64_t ***v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t ****v172;
  uint64_t ***v173;
  int v174;
  int v175;
  uint64_t ***v176;
  char *v177;
  size_t v178;
  size_t v179;
  size_t v180;
  int v181;
  size_t v182;
  char *v183;
  size_t v184;
  char *v185;
  uint64_t ***v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t ****v191;
  uint64_t ***v192;
  int v193;
  int v194;
  uint64_t ***v195;
  size_t v196;
  uint64_t ***v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t ****v202;
  uint64_t ***v203;
  int v204;
  int v205;
  uint64_t ***v206;
  size_t v207;
  size_t v208;
  int v209;
  BOOL v210;
  uint64_t ***v211;
  size_t v212;
  size_t v213;
  uint64_t ***v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t ****v219;
  uint64_t ***v220;
  int v221;
  int v222;
  uint64_t ***v223;
  char *v224;
  size_t v225;
  size_t v226;
  size_t v227;
  uint64_t v228;
  unsigned int v229;
  BOOL v230;
  uint64_t ***v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t ****v236;
  uint64_t ***v237;
  int v238;
  int v239;
  uint64_t ***v240;
  size_t v241;
  size_t v242;
  uint64_t ***v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t ****v248;
  uint64_t ***v249;
  int v250;
  int v251;
  uint64_t ***v252;
  char *v253;
  size_t v254;
  size_t v255;
  size_t v256;
  unsigned int v257;
  uint64_t ***v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t ****v263;
  uint64_t ***v264;
  int v265;
  int v266;
  uint64_t ***v267;
  size_t v268;
  size_t v269;
  uint64_t ***v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t ****v275;
  uint64_t ***v276;
  int v277;
  int v278;
  uint64_t ***v279;
  char *v280;
  size_t v281;
  size_t v282;
  size_t v283;
  unint64_t v284;
  unint64_t v285;
  BOOL v286;
  uint64_t ***v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t ****v292;
  uint64_t ***v293;
  int v294;
  int v295;
  uint64_t ***v296;
  size_t v297;
  size_t v298;
  uint64_t ***v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t ****v304;
  uint64_t ***v305;
  int v306;
  int v307;
  uint64_t ***v308;
  char *v309;
  size_t v310;
  size_t v311;
  size_t v312;
  unsigned int v313;
  unsigned int v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t ***v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t ****v323;
  uint64_t ***v324;
  int v325;
  int v326;
  uint64_t ***v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t ***v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t ****v335;
  uint64_t ***v336;
  int v337;
  int v338;
  uint64_t ***v339;
  char *v340;
  unint64_t v341;
  unint64_t v342;
  size_t v343;
  unint64_t v344;
  unint64_t v345;
  char *v346;
  uint64_t ***v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t ****v352;
  uint64_t ***v353;
  int v354;
  int v355;
  uint64_t ***v356;
  unint64_t v357;
  uint64_t ***v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t ****v363;
  uint64_t ***v364;
  int v365;
  int v366;
  uint64_t ***v367;
  unint64_t v368;
  size_t v369;
  unsigned int v370;
  unsigned int v371;
  uint64_t v372;
  uint64_t ***v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t ****v378;
  uint64_t ***v379;
  int v380;
  int v381;
  uint64_t v382;
  BOOL v384;
  uint64_t v385;
  uint64_t v386;
  unsigned int v387;
  unsigned int v388;
  uint64_t v389;
  uint64_t ***v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t ****v395;
  uint64_t ***v396;
  int v397;
  int v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t ***v401;
  size_t v402;
  size_t v403;
  uint64_t ***v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t ****v409;
  uint64_t ***v410;
  int v411;
  int v412;
  uint64_t ***v413;
  char *v414;
  size_t v415;
  size_t v416;
  size_t v417;
  uint64_t v418;
  uint64_t v419;
  unsigned int v420;
  unsigned int v421;
  BOOL v422;
  uint64_t ***v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t ****v428;
  uint64_t ***v429;
  int v430;
  int v431;
  uint64_t v432;
  uint64_t ***v433;
  size_t v434;
  size_t v435;
  uint64_t ***v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t ****v441;
  uint64_t ***v442;
  int v443;
  int v444;
  uint64_t ***v445;
  char *v446;
  size_t v447;
  size_t v448;
  size_t v449;
  int64_t v450;
  int64_t v451;
  uint64_t v452;
  uint64_t v453;
  unsigned int v454;
  BOOL v455;
  uint64_t ***v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t ****v461;
  uint64_t ***v462;
  int v463;
  int v464;
  uint64_t ***v465;
  size_t v466;
  size_t v467;
  uint64_t ***v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t ****v473;
  uint64_t ***v474;
  int v475;
  int v476;
  uint64_t ***v477;
  char *v478;
  size_t v479;
  size_t v480;
  size_t v481;
  _BOOL4 v482;
  uint64_t v483;
  unsigned int v484;
  unsigned int v485;
  uint64_t v486;
  uint64_t ***v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t ****v492;
  uint64_t ***v493;
  int v494;
  int v495;
  uint64_t ***v496;
  size_t v497;
  size_t v498;
  uint64_t ***v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t ****v504;
  uint64_t ***v505;
  int v506;
  int v507;
  uint64_t ***v508;
  char *v509;
  size_t v510;
  size_t v511;
  size_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unsigned int v516;
  BOOL v517;
  uint64_t ***v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t ****v523;
  uint64_t ***v524;
  int v525;
  int v526;
  uint64_t ***v527;
  size_t v528;
  size_t v529;
  uint64_t ***v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t ****v535;
  uint64_t ***v536;
  int v537;
  int v538;
  uint64_t ***v539;
  char *v540;
  size_t v541;
  size_t v542;
  size_t v543;
  _BOOL4 v544;
  unsigned int v545;
  uint64_t v546;
  uint64_t ***v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t ****v552;
  uint64_t ***v553;
  int v554;
  int v555;
  uint64_t ***v556;
  unint64_t v557;
  unint64_t v558;
  uint64_t ***v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t ****v564;
  uint64_t ***v565;
  int v566;
  int v567;
  uint64_t ***v568;
  char *v569;
  unint64_t v570;
  unint64_t v571;
  size_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unsigned int v580;
  BOOL v581;
  uint64_t ***v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t ****v587;
  uint64_t ***v588;
  int v589;
  int v590;
  uint64_t ***v591;
  size_t v592;
  size_t v593;
  uint64_t ***v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t ****v599;
  uint64_t ***v600;
  int v601;
  int v602;
  uint64_t ***v603;
  char *v604;
  size_t v605;
  size_t v606;
  size_t v607;
  _BOOL4 v608;
  unint64_t v609;
  uint64_t v610;
  unint64_t v611;
  unint64_t v612;
  uint64_t v613;
  unsigned int v614;
  unsigned int v615;
  uint64_t v616;
  uint64_t ***v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t ****v622;
  uint64_t ***v623;
  int v624;
  int v625;
  uint64_t v626;
  uint64_t ***v627;
  size_t v628;
  size_t v629;
  uint64_t ***v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t ****v635;
  uint64_t ***v636;
  int v637;
  int v638;
  uint64_t ***v639;
  char *v640;
  size_t v641;
  size_t v642;
  size_t v643;
  uint64_t v644;
  unint64_t v645;
  uint64_t v646;
  unint64_t v647;
  unsigned int v648;
  uint64_t v649;
  uint64_t ***v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t ****v655;
  uint64_t ***v656;
  int v657;
  int v658;
  uint64_t ***v659;
  size_t v660;
  size_t v661;
  uint64_t ***v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t ****v667;
  uint64_t ***v668;
  int v669;
  int v670;
  uint64_t ***v671;
  char *v672;
  size_t v673;
  size_t v674;
  size_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  unsigned int v679;
  unsigned int v680;
  uint64_t v681;
  uint64_t ***v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t ****v687;
  uint64_t ***v688;
  int v689;
  int v690;
  uint64_t ***v691;
  size_t v692;
  size_t v693;
  uint64_t ***v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t ****v699;
  uint64_t ***v700;
  int v701;
  int v702;
  uint64_t ***v703;
  char *v704;
  size_t v705;
  size_t v706;
  size_t v707;
  uint64_t v708;
  uint64_t v709;
  unsigned int v710;
  BOOL v711;
  uint64_t ***v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t ****v717;
  uint64_t ***v718;
  int v719;
  int v720;
  uint64_t ***v721;
  size_t v722;
  size_t v723;
  uint64_t ***v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t ****v729;
  uint64_t ***v730;
  int v731;
  int v732;
  uint64_t ***v733;
  char *v734;
  size_t v735;
  size_t v736;
  size_t v737;
  uint64_t ***v738;
  size_t v739;
  size_t v740;
  uint64_t ***v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t ****v746;
  uint64_t ***v747;
  int v748;
  int v749;
  uint64_t ***v750;
  char *v751;
  size_t v752;
  size_t v753;
  size_t v754;
  unsigned int *v755;
  unint64_t v757;
  uint64_t v758;
  unint64_t v759;
  uint64_t v760;
  int64_t v761;
  int v762;
  size_t v764;
  unsigned int v765;
  uint64_t v766;

  v5 = result;
LABEL_2:
  v755 = (unsigned int *)(a2 - 16);
  v6 = (unint64_t)v5;
  while (2)
  {
    v7 = v6;
    v8 = a2 - v6;
    v9 = (uint64_t)(a2 - v6) >> 4;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v370 = *(_DWORD *)(a2 - 16);
        v371 = *(_DWORD *)v7;
        if (v370 != *(_DWORD *)v7)
        {
          if (v370 <= v371)
            return result;
          v676 = *(_QWORD *)(v7 + 8);
          v372 = *(_QWORD *)(a2 - 8);
          goto LABEL_852;
        }
        v372 = *(_QWORD *)(a2 - 8);
        v373 = *(uint64_t ****)(v372 + 48);
        if ((*((_BYTE *)v373 + 23) & 0x10) != 0)
        {
          v374 = ***v373;
          v375 = *(_QWORD *)(v374 + 152);
          v376 = *(unsigned int *)(v374 + 168);
          if ((_DWORD)v376)
          {
            LODWORD(v377) = (v376 - 1) & ((v373 >> 4) ^ (v373 >> 9));
            v378 = (uint64_t ****)(v375 + 16 * v377);
            v379 = *v378;
            if (*v378 != v373)
            {
              v380 = 1;
              do
              {
                if (v379 == (uint64_t ***)-4096)
                  goto LABEL_833;
                v381 = v377 + v380++;
                v377 = v381 & (v376 - 1);
                v379 = *(uint64_t ****)(v375 + 16 * v377);
              }
              while (v379 != v373);
              v378 = (uint64_t ****)(v375 + 16 * v377);
            }
          }
          else
          {
LABEL_833:
            v378 = (uint64_t ****)(v375 + 16 * v376);
          }
          v738 = v378[1];
          v740 = (size_t)*v738;
          result = (char *)(v738 + 2);
          v739 = v740;
          goto LABEL_835;
        }
        v739 = 0;
        result = &byte_1C871356D;
LABEL_835:
        v676 = *(_QWORD *)(v7 + 8);
        v741 = *(uint64_t ****)(v676 + 48);
        if ((*((_BYTE *)v741 + 23) & 0x10) != 0)
        {
          v742 = ***v741;
          v743 = *(_QWORD *)(v742 + 152);
          v744 = *(unsigned int *)(v742 + 168);
          if ((_DWORD)v744)
          {
            LODWORD(v745) = (v744 - 1) & ((v741 >> 4) ^ (v741 >> 9));
            v746 = (uint64_t ****)(v743 + 16 * v745);
            v747 = *v746;
            if (*v746 != v741)
            {
              v748 = 1;
              do
              {
                if (v747 == (uint64_t ***)-4096)
                  goto LABEL_842;
                v749 = v745 + v748++;
                v745 = v749 & (v744 - 1);
                v747 = *(uint64_t ****)(v743 + 16 * v745);
              }
              while (v747 != v741);
              v746 = (uint64_t ****)(v743 + 16 * v745);
            }
          }
          else
          {
LABEL_842:
            v746 = (uint64_t ****)(v743 + 16 * v744);
          }
          v750 = v746[1];
          v753 = (size_t)*v750;
          v751 = (char *)(v750 + 2);
          v752 = v753;
          goto LABEL_844;
        }
        v752 = 0;
        v751 = &byte_1C871356D;
LABEL_844:
        if (v752 >= v739)
          v754 = v739;
        else
          v754 = v752;
        if (v754 && (result = (char *)memcmp(result, v751, v754), (_DWORD)result))
        {
          if ((result & 0x80000000) != 0)
            return result;
        }
        else if (v739 <= v752)
        {
          return result;
        }
LABEL_852:
        *(_DWORD *)v7 = v370;
        *(_DWORD *)(a2 - 16) = v371;
        *(_QWORD *)(v7 + 8) = v372;
        *(_QWORD *)(a2 - 8) = v676;
        return result;
      case 3:
        return sub_1C5FC2728((char *)v7, (unsigned int *)(v7 + 16), v755);
      case 4:
        return sub_1C5FC3454(v7, v7 + 16, v7 + 32, (uint64_t)v755);
      case 5:
        return sub_1C5FC20B4(v7, v7 + 16, v7 + 32, v7 + 48, v755);
      default:
        v766 = v7;
        if (v8 <= 383)
        {
          v382 = v7 + 16;
          v384 = v7 == a2 || v382 == a2;
          if ((a4 & 1) == 0)
          {
            if (v384)
              return result;
            while (1)
            {
              v677 = v7;
              v678 = v382;
              v679 = *(_DWORD *)(v7 + 16);
              v680 = *(_DWORD *)v7;
              if (v679 == *(_DWORD *)v7)
              {
                v681 = *(_QWORD *)(v7 + 24);
                v682 = *(uint64_t ****)(v681 + 48);
                if ((*((_BYTE *)v682 + 23) & 0x10) != 0)
                {
                  v683 = ***v682;
                  v684 = *(_QWORD *)(v683 + 152);
                  v685 = *(unsigned int *)(v683 + 168);
                  if ((_DWORD)v685)
                  {
                    LODWORD(v686) = (v685 - 1) & ((v682 >> 4) ^ (v682 >> 9));
                    v687 = (uint64_t ****)(v684 + 16 * v686);
                    v688 = *v687;
                    if (*v687 != v682)
                    {
                      v689 = 1;
                      do
                      {
                        if (v688 == (uint64_t ***)-4096)
                          goto LABEL_777;
                        v690 = v686 + v689++;
                        v686 = v690 & (v685 - 1);
                        v688 = *(uint64_t ****)(v684 + 16 * v686);
                      }
                      while (v688 != v682);
                      v687 = (uint64_t ****)(v684 + 16 * v686);
                    }
                  }
                  else
                  {
LABEL_777:
                    v687 = (uint64_t ****)(v684 + 16 * v685);
                  }
                  v691 = v687[1];
                  v693 = (size_t)*v691;
                  result = (char *)(v691 + 2);
                  v692 = v693;
                }
                else
                {
                  v692 = 0;
                  result = &byte_1C871356D;
                }
                v694 = *(uint64_t ****)(*(_QWORD *)(v677 + 8) + 48);
                if ((*((_BYTE *)v694 + 23) & 0x10) != 0)
                {
                  v695 = ***v694;
                  v696 = *(_QWORD *)(v695 + 152);
                  v697 = *(unsigned int *)(v695 + 168);
                  if ((_DWORD)v697)
                  {
                    LODWORD(v698) = (v697 - 1) & ((v694 >> 4) ^ (v694 >> 9));
                    v699 = (uint64_t ****)(v696 + 16 * v698);
                    v700 = *v699;
                    if (*v699 != v694)
                    {
                      v701 = 1;
                      do
                      {
                        if (v700 == (uint64_t ***)-4096)
                          goto LABEL_786;
                        v702 = v698 + v701++;
                        v698 = v702 & (v697 - 1);
                        v700 = *(uint64_t ****)(v696 + 16 * v698);
                      }
                      while (v700 != v694);
                      v699 = (uint64_t ****)(v696 + 16 * v698);
                    }
                  }
                  else
                  {
LABEL_786:
                    v699 = (uint64_t ****)(v696 + 16 * v697);
                  }
                  v703 = v699[1];
                  v706 = (size_t)*v703;
                  v704 = (char *)(v703 + 2);
                  v705 = v706;
                }
                else
                {
                  v705 = 0;
                  v704 = &byte_1C871356D;
                }
                if (v705 >= v692)
                  v707 = v692;
                else
                  v707 = v705;
                if (v707)
                {
                  result = (char *)memcmp(result, v704, v707);
                  if ((_DWORD)result)
                  {
                    if ((result & 0x80000000) != 0)
                      goto LABEL_829;
LABEL_796:
                    v708 = v678;
                    while (1)
                    {
                      v709 = v708;
                      v708 = v677;
                      *(_DWORD *)v709 = v680;
                      v710 = *(_DWORD *)(v677 - 16);
                      v677 -= 16;
                      v680 = v710;
                      *(_QWORD *)(v709 + 8) = *(_QWORD *)(v677 + 24);
                      v711 = v679 > v710;
                      if (v679 == v710)
                      {
                        v712 = *(uint64_t ****)(v681 + 48);
                        if ((*((_BYTE *)v712 + 23) & 0x10) != 0)
                        {
                          v713 = ***v712;
                          v714 = *(_QWORD *)(v713 + 152);
                          v715 = *(unsigned int *)(v713 + 168);
                          if ((_DWORD)v715)
                          {
                            LODWORD(v716) = (v715 - 1) & ((v712 >> 4) ^ (v712 >> 9));
                            v717 = (uint64_t ****)(v714 + 16 * v716);
                            v718 = *v717;
                            if (*v717 != v712)
                            {
                              v719 = 1;
                              do
                              {
                                if (v718 == (uint64_t ***)-4096)
                                  goto LABEL_805;
                                v720 = v716 + v719++;
                                v716 = v720 & (v715 - 1);
                                v718 = *(uint64_t ****)(v714 + 16 * v716);
                              }
                              while (v718 != v712);
                              v717 = (uint64_t ****)(v714 + 16 * v716);
                            }
                          }
                          else
                          {
LABEL_805:
                            v717 = (uint64_t ****)(v714 + 16 * v715);
                          }
                          v721 = v717[1];
                          v723 = (size_t)*v721;
                          result = (char *)(v721 + 2);
                          v722 = v723;
                        }
                        else
                        {
                          v722 = 0;
                          result = &byte_1C871356D;
                        }
                        v724 = *(uint64_t ****)(*(_QWORD *)(v708 - 8) + 48);
                        if ((*((_BYTE *)v724 + 23) & 0x10) != 0)
                        {
                          v725 = ***v724;
                          v726 = *(_QWORD *)(v725 + 152);
                          v727 = *(unsigned int *)(v725 + 168);
                          if ((_DWORD)v727)
                          {
                            LODWORD(v728) = (v727 - 1) & ((v724 >> 4) ^ (v724 >> 9));
                            v729 = (uint64_t ****)(v726 + 16 * v728);
                            v730 = *v729;
                            if (*v729 != v724)
                            {
                              v731 = 1;
                              do
                              {
                                if (v730 == (uint64_t ***)-4096)
                                  goto LABEL_814;
                                v732 = v728 + v731++;
                                v728 = v732 & (v727 - 1);
                                v730 = *(uint64_t ****)(v726 + 16 * v728);
                              }
                              while (v730 != v724);
                              v729 = (uint64_t ****)(v726 + 16 * v728);
                            }
                          }
                          else
                          {
LABEL_814:
                            v729 = (uint64_t ****)(v726 + 16 * v727);
                          }
                          v733 = v729[1];
                          v736 = (size_t)*v733;
                          v734 = (char *)(v733 + 2);
                          v735 = v736;
                        }
                        else
                        {
                          v735 = 0;
                          v734 = &byte_1C871356D;
                        }
                        if (v735 >= v722)
                          v737 = v722;
                        else
                          v737 = v735;
                        if (v737)
                        {
                          result = (char *)memcmp(result, v734, v737);
                          if ((_DWORD)result)
                          {
                            if ((result & 0x80000000) != 0)
                              goto LABEL_828;
                            continue;
                          }
                        }
                        v711 = v722 > v735;
                      }
                      if (!v711)
                      {
LABEL_828:
                        *(_DWORD *)v708 = v679;
                        *(_QWORD *)(v708 + 8) = v681;
                        goto LABEL_829;
                      }
                    }
                  }
                }
                if (v692 > v705)
                  goto LABEL_796;
              }
              else if (v679 > v680)
              {
                v681 = *(_QWORD *)(v7 + 24);
                goto LABEL_796;
              }
LABEL_829:
              v7 = v678;
              v382 = v678 + 16;
              if (v678 + 16 == a2)
                return result;
            }
          }
          if (v384)
            return result;
          v385 = v7;
LABEL_440:
          v386 = v385;
          v385 = v382;
          v387 = *(_DWORD *)(v386 + 16);
          v388 = *(_DWORD *)v386;
          if (v387 == *(_DWORD *)v386)
          {
            v389 = *(_QWORD *)(v386 + 24);
            v390 = *(uint64_t ****)(v389 + 48);
            if ((*((_BYTE *)v390 + 23) & 0x10) != 0)
            {
              v391 = ***v390;
              v392 = *(_QWORD *)(v391 + 152);
              v393 = *(unsigned int *)(v391 + 168);
              if ((_DWORD)v393)
              {
                LODWORD(v394) = (v393 - 1) & ((v390 >> 4) ^ (v390 >> 9));
                v395 = (uint64_t ****)(v392 + 16 * v394);
                v396 = *v395;
                if (*v395 != v390)
                {
                  v397 = 1;
                  do
                  {
                    if (v396 == (uint64_t ***)-4096)
                      goto LABEL_450;
                    v398 = v394 + v397++;
                    v394 = v398 & (v393 - 1);
                    v396 = *(uint64_t ****)(v392 + 16 * v394);
                  }
                  while (v396 != v390);
                  v395 = (uint64_t ****)(v392 + 16 * v394);
                }
              }
              else
              {
LABEL_450:
                v395 = (uint64_t ****)(v392 + 16 * v393);
              }
              v401 = v395[1];
              v403 = (size_t)*v401;
              result = (char *)(v401 + 2);
              v402 = v403;
            }
            else
            {
              v402 = 0;
              result = &byte_1C871356D;
            }
            v400 = *(_QWORD *)(v386 + 8);
            v404 = *(uint64_t ****)(v400 + 48);
            if ((*((_BYTE *)v404 + 23) & 0x10) != 0)
            {
              v405 = ***v404;
              v406 = *(_QWORD *)(v405 + 152);
              v407 = *(unsigned int *)(v405 + 168);
              if ((_DWORD)v407)
              {
                LODWORD(v408) = (v407 - 1) & ((v404 >> 4) ^ (v404 >> 9));
                v409 = (uint64_t ****)(v406 + 16 * v408);
                v410 = *v409;
                if (*v409 != v404)
                {
                  v411 = 1;
                  do
                  {
                    if (v410 == (uint64_t ***)-4096)
                      goto LABEL_459;
                    v412 = v408 + v411++;
                    v408 = v412 & (v407 - 1);
                    v410 = *(uint64_t ****)(v406 + 16 * v408);
                  }
                  while (v410 != v404);
                  v409 = (uint64_t ****)(v406 + 16 * v408);
                }
              }
              else
              {
LABEL_459:
                v409 = (uint64_t ****)(v406 + 16 * v407);
              }
              v413 = v409[1];
              v416 = (size_t)*v413;
              v414 = (char *)(v413 + 2);
              v415 = v416;
            }
            else
            {
              v415 = 0;
              v414 = &byte_1C871356D;
            }
            if (v415 >= v402)
              v417 = v402;
            else
              v417 = v415;
            if (v417 && (result = (char *)memcmp(result, v414, v417), (_DWORD)result))
            {
              v399 = a2;
              if ((result & 0x80000000) != 0)
                goto LABEL_507;
            }
            else
            {
              v399 = a2;
              if (v402 <= v415)
                goto LABEL_507;
            }
          }
          else
          {
            v399 = a2;
            if (v387 <= v388)
              goto LABEL_507;
            v389 = *(_QWORD *)(v386 + 24);
            v400 = *(_QWORD *)(v386 + 8);
          }
          *(_DWORD *)(v386 + 16) = v388;
          *(_QWORD *)(v385 + 8) = v400;
          v418 = v766;
          if (v386 == v766)
            goto LABEL_506;
          v419 = v386;
          while (1)
          {
            v421 = *(_DWORD *)(v419 - 16);
            v419 -= 16;
            v420 = v421;
            v422 = v387 > v421;
            if (v387 == v421)
            {
              v423 = *(uint64_t ****)(v389 + 48);
              if ((*((_BYTE *)v423 + 23) & 0x10) != 0)
              {
                v424 = ***v423;
                v425 = *(_QWORD *)(v424 + 152);
                v426 = *(unsigned int *)(v424 + 168);
                if ((_DWORD)v426)
                {
                  LODWORD(v427) = (v426 - 1) & ((v423 >> 4) ^ (v423 >> 9));
                  v428 = (uint64_t ****)(v425 + 16 * v427);
                  v429 = *v428;
                  if (*v428 != v423)
                  {
                    v430 = 1;
                    do
                    {
                      if (v429 == (uint64_t ***)-4096)
                        goto LABEL_482;
                      v431 = v427 + v430++;
                      v427 = v431 & (v426 - 1);
                      v429 = *(uint64_t ****)(v425 + 16 * v427);
                    }
                    while (v429 != v423);
                    v428 = (uint64_t ****)(v425 + 16 * v427);
                  }
                }
                else
                {
LABEL_482:
                  v428 = (uint64_t ****)(v425 + 16 * v426);
                }
                v433 = v428[1];
                v435 = (size_t)*v433;
                result = (char *)(v433 + 2);
                v434 = v435;
              }
              else
              {
                v434 = 0;
                result = &byte_1C871356D;
              }
              v432 = *(_QWORD *)(v386 - 8);
              v436 = *(uint64_t ****)(v432 + 48);
              if ((*((_BYTE *)v436 + 23) & 0x10) != 0)
              {
                v437 = ***v436;
                v438 = *(_QWORD *)(v437 + 152);
                v439 = *(unsigned int *)(v437 + 168);
                if ((_DWORD)v439)
                {
                  LODWORD(v440) = (v439 - 1) & ((v436 >> 4) ^ (v436 >> 9));
                  v441 = (uint64_t ****)(v438 + 16 * v440);
                  v442 = *v441;
                  if (*v441 != v436)
                  {
                    v443 = 1;
                    do
                    {
                      if (v442 == (uint64_t ***)-4096)
                        goto LABEL_491;
                      v444 = v440 + v443++;
                      v440 = v444 & (v439 - 1);
                      v442 = *(uint64_t ****)(v438 + 16 * v440);
                    }
                    while (v442 != v436);
                    v441 = (uint64_t ****)(v438 + 16 * v440);
                  }
                }
                else
                {
LABEL_491:
                  v441 = (uint64_t ****)(v438 + 16 * v439);
                }
                v445 = v441[1];
                v448 = (size_t)*v445;
                v446 = (char *)(v445 + 2);
                v447 = v448;
              }
              else
              {
                v447 = 0;
                v446 = &byte_1C871356D;
              }
              if (v447 >= v434)
                v449 = v434;
              else
                v449 = v447;
              if (v449 && (result = (char *)memcmp(result, v446, v449), (_DWORD)result))
              {
                v399 = a2;
                if ((result & 0x80000000) != 0)
                  goto LABEL_505;
              }
              else
              {
                v399 = a2;
                if (v434 <= v447)
                {
LABEL_505:
                  v418 = v386;
LABEL_506:
                  *(_DWORD *)v418 = v387;
                  *(_QWORD *)(v418 + 8) = v389;
LABEL_507:
                  v382 = v385 + 16;
                  if (v385 + 16 == v399)
                    return result;
                  goto LABEL_440;
                }
              }
            }
            else
            {
              if (!v422)
                goto LABEL_505;
              v432 = *(_QWORD *)(v386 - 8);
            }
            *(_DWORD *)v386 = v420;
            *(_QWORD *)(v386 + 8) = v432;
            v386 = v419;
            if (v419 == v766)
            {
              v418 = v766;
              goto LABEL_506;
            }
          }
        }
        if (!a3)
        {
          if (v7 == a2)
            return result;
          v450 = (unint64_t)(v9 - 2) >> 1;
          v761 = v450;
          while (2)
          {
            v451 = v450;
            if (v761 < v450)
              goto LABEL_645;
            v452 = (2 * v450) | 1;
            v453 = v766 + 16 * v452;
            if (2 * v450 + 2 >= v9)
              goto LABEL_546;
            v454 = *(_DWORD *)(v453 + 16);
            v455 = *(_DWORD *)v453 > v454;
            if (*(_DWORD *)v453 == v454)
            {
              v456 = *(uint64_t ****)(*(_QWORD *)(v766 + 16 * v452 + 8) + 48);
              if ((*((_BYTE *)v456 + 23) & 0x10) != 0)
              {
                v457 = ***v456;
                v458 = *(_QWORD *)(v457 + 152);
                v459 = *(unsigned int *)(v457 + 168);
                if ((_DWORD)v459)
                {
                  LODWORD(v460) = (v459 - 1) & ((v456 >> 4) ^ (v456 >> 9));
                  v461 = (uint64_t ****)(v458 + 16 * v460);
                  v462 = *v461;
                  if (*v461 != v456)
                  {
                    v463 = 1;
                    do
                    {
                      if (v462 == (uint64_t ***)-4096)
                        goto LABEL_523;
                      v464 = v460 + v463++;
                      v460 = v464 & (v459 - 1);
                      v462 = *(uint64_t ****)(v458 + 16 * v460);
                    }
                    while (v462 != v456);
                    v461 = (uint64_t ****)(v458 + 16 * v460);
                  }
                }
                else
                {
LABEL_523:
                  v461 = (uint64_t ****)(v458 + 16 * v459);
                }
                v465 = v461[1];
                v467 = (size_t)*v465;
                result = (char *)(v465 + 2);
                v466 = v467;
              }
              else
              {
                v466 = 0;
                result = &byte_1C871356D;
              }
              v468 = *(uint64_t ****)(*(_QWORD *)(v453 + 24) + 48);
              if ((*((_BYTE *)v468 + 23) & 0x10) != 0)
              {
                v469 = ***v468;
                v470 = *(_QWORD *)(v469 + 152);
                v471 = *(unsigned int *)(v469 + 168);
                if ((_DWORD)v471)
                {
                  LODWORD(v472) = (v471 - 1) & ((v468 >> 4) ^ (v468 >> 9));
                  v473 = (uint64_t ****)(v470 + 16 * v472);
                  v474 = *v473;
                  if (*v473 != v468)
                  {
                    v475 = 1;
                    do
                    {
                      if (v474 == (uint64_t ***)-4096)
                        goto LABEL_532;
                      v476 = v472 + v475++;
                      v472 = v476 & (v471 - 1);
                      v474 = *(uint64_t ****)(v470 + 16 * v472);
                    }
                    while (v474 != v468);
                    v473 = (uint64_t ****)(v470 + 16 * v472);
                  }
                }
                else
                {
LABEL_532:
                  v473 = (uint64_t ****)(v470 + 16 * v471);
                }
                v477 = v473[1];
                v480 = (size_t)*v477;
                v478 = (char *)(v477 + 2);
                v479 = v480;
              }
              else
              {
                v479 = 0;
                v478 = &byte_1C871356D;
              }
              if (v479 >= v466)
                v481 = v466;
              else
                v481 = v479;
              if (v481)
              {
                result = (char *)memcmp(result, v478, v481);
                if ((_DWORD)result)
                {
                  v482 = (int)result >= 0;
LABEL_544:
                  if (v482)
                  {
                    v453 += 16;
                    v452 = 2 * v451 + 2;
                  }
LABEL_546:
                  v483 = v766 + 16 * v451;
                  v484 = *(_DWORD *)v453;
                  v485 = *(_DWORD *)v483;
                  if (*(_DWORD *)v453 == *(_DWORD *)v483)
                  {
                    v486 = *(_QWORD *)(v453 + 8);
                    v487 = *(uint64_t ****)(v486 + 48);
                    if ((*((_BYTE *)v487 + 23) & 0x10) != 0)
                    {
                      v488 = ***v487;
                      v489 = *(_QWORD *)(v488 + 152);
                      v490 = *(unsigned int *)(v488 + 168);
                      if ((_DWORD)v490)
                      {
                        LODWORD(v491) = (v490 - 1) & ((v487 >> 4) ^ (v487 >> 9));
                        v492 = (uint64_t ****)(v489 + 16 * v491);
                        v493 = *v492;
                        if (*v492 != v487)
                        {
                          v494 = 1;
                          do
                          {
                            if (v493 == (uint64_t ***)-4096)
                              goto LABEL_556;
                            v495 = v491 + v494++;
                            v491 = v495 & (v490 - 1);
                            v493 = *(uint64_t ****)(v489 + 16 * v491);
                          }
                          while (v493 != v487);
                          v492 = (uint64_t ****)(v489 + 16 * v491);
                        }
                      }
                      else
                      {
LABEL_556:
                        v492 = (uint64_t ****)(v489 + 16 * v490);
                      }
                      v496 = v492[1];
                      v498 = (size_t)*v496;
                      result = (char *)(v496 + 2);
                      v497 = v498;
                    }
                    else
                    {
                      v497 = 0;
                      result = &byte_1C871356D;
                    }
                    v758 = *(_QWORD *)(v766 + 16 * v451 + 8);
                    v499 = *(uint64_t ****)(v758 + 48);
                    if ((*((_BYTE *)v499 + 23) & 0x10) != 0)
                    {
                      v500 = ***v499;
                      v501 = *(_QWORD *)(v500 + 152);
                      v502 = *(unsigned int *)(v500 + 168);
                      if ((_DWORD)v502)
                      {
                        LODWORD(v503) = (v502 - 1) & ((v499 >> 4) ^ (v499 >> 9));
                        v504 = (uint64_t ****)(v501 + 16 * v503);
                        v505 = *v504;
                        if (*v504 != v499)
                        {
                          v506 = 1;
                          do
                          {
                            if (v505 == (uint64_t ***)-4096)
                              goto LABEL_565;
                            v507 = v503 + v506++;
                            v503 = v507 & (v502 - 1);
                            v505 = *(uint64_t ****)(v501 + 16 * v503);
                          }
                          while (v505 != v499);
                          v504 = (uint64_t ****)(v501 + 16 * v503);
                        }
                      }
                      else
                      {
LABEL_565:
                        v504 = (uint64_t ****)(v501 + 16 * v502);
                      }
                      v508 = v504[1];
                      v511 = (size_t)*v508;
                      v509 = (char *)(v508 + 2);
                      v510 = v511;
                    }
                    else
                    {
                      v510 = 0;
                      v509 = &byte_1C871356D;
                    }
                    if (v510 >= v497)
                      v512 = v497;
                    else
                      v512 = v510;
                    if (v512 && (result = (char *)memcmp(result, v509, v512), (_DWORD)result))
                    {
                      if ((result & 0x80000000) == 0)
                        goto LABEL_645;
                    }
                    else if (v497 > v510)
                    {
                      goto LABEL_645;
                    }
                  }
                  else
                  {
                    if (v484 > v485)
                      goto LABEL_645;
                    v758 = *(_QWORD *)(v483 + 8);
                    v486 = *(_QWORD *)(v453 + 8);
                  }
                  *(_DWORD *)v483 = v484;
                  *(_QWORD *)(v483 + 8) = v486;
                  while (1)
                  {
                    if (v761 < v452)
                      goto LABEL_644;
                    v513 = v453;
                    v514 = 2 * v452;
                    v452 = (2 * v452) | 1;
                    v453 = v766 + 16 * v452;
                    v515 = v514 + 2;
                    if (v514 + 2 < v9)
                    {
                      v516 = *(_DWORD *)(v453 + 16);
                      v517 = *(_DWORD *)v453 > v516;
                      if (*(_DWORD *)v453 == v516)
                      {
                        v518 = *(uint64_t ****)(*(_QWORD *)(v766 + 16 * v452 + 8) + 48);
                        if ((*((_BYTE *)v518 + 23) & 0x10) != 0)
                        {
                          v519 = ***v518;
                          v520 = *(_QWORD *)(v519 + 152);
                          v521 = *(unsigned int *)(v519 + 168);
                          if ((_DWORD)v521)
                          {
                            LODWORD(v522) = (v521 - 1) & ((v518 >> 4) ^ (v518 >> 9));
                            v523 = (uint64_t ****)(v520 + 16 * v522);
                            v524 = *v523;
                            if (*v523 != v518)
                            {
                              v525 = 1;
                              do
                              {
                                if (v524 == (uint64_t ***)-4096)
                                  goto LABEL_586;
                                v526 = v522 + v525++;
                                v522 = v526 & (v521 - 1);
                                v524 = *(uint64_t ****)(v520 + 16 * v522);
                              }
                              while (v524 != v518);
                              v523 = (uint64_t ****)(v520 + 16 * v522);
                            }
                          }
                          else
                          {
LABEL_586:
                            v523 = (uint64_t ****)(v520 + 16 * v521);
                          }
                          v527 = v523[1];
                          v529 = (size_t)*v527;
                          result = (char *)(v527 + 2);
                          v528 = v529;
                        }
                        else
                        {
                          v528 = 0;
                          result = &byte_1C871356D;
                        }
                        v530 = *(uint64_t ****)(*(_QWORD *)(v453 + 24) + 48);
                        if ((*((_BYTE *)v530 + 23) & 0x10) != 0)
                        {
                          v531 = ***v530;
                          v532 = *(_QWORD *)(v531 + 152);
                          v533 = *(unsigned int *)(v531 + 168);
                          if ((_DWORD)v533)
                          {
                            LODWORD(v534) = (v533 - 1) & ((v530 >> 4) ^ (v530 >> 9));
                            v535 = (uint64_t ****)(v532 + 16 * v534);
                            v536 = *v535;
                            if (*v535 != v530)
                            {
                              v537 = 1;
                              do
                              {
                                if (v536 == (uint64_t ***)-4096)
                                  goto LABEL_595;
                                v538 = v534 + v537++;
                                v534 = v538 & (v533 - 1);
                                v536 = *(uint64_t ****)(v532 + 16 * v534);
                              }
                              while (v536 != v530);
                              v535 = (uint64_t ****)(v532 + 16 * v534);
                            }
                          }
                          else
                          {
LABEL_595:
                            v535 = (uint64_t ****)(v532 + 16 * v533);
                          }
                          v539 = v535[1];
                          v542 = (size_t)*v539;
                          v540 = (char *)(v539 + 2);
                          v541 = v542;
                        }
                        else
                        {
                          v541 = 0;
                          v540 = &byte_1C871356D;
                        }
                        if (v541 >= v528)
                          v543 = v528;
                        else
                          v543 = v541;
                        if (v543)
                        {
                          result = (char *)memcmp(result, v540, v543);
                          if ((_DWORD)result)
                          {
                            v544 = (int)result >= 0;
                            goto LABEL_607;
                          }
                        }
                        v517 = v528 > v541;
                      }
                      v544 = v517;
LABEL_607:
                      if (v544)
                      {
                        v453 += 16;
                        v452 = v515;
                      }
                    }
                    v545 = *(_DWORD *)v453;
                    if (*(_DWORD *)v453 != v485)
                    {
                      if (v545 > v485)
                        goto LABEL_643;
                      v546 = *(_QWORD *)(v453 + 8);
                      goto LABEL_638;
                    }
                    v546 = *(_QWORD *)(v453 + 8);
                    v547 = *(uint64_t ****)(v546 + 48);
                    if ((*((_BYTE *)v547 + 23) & 0x10) != 0)
                    {
                      v548 = ***v547;
                      v549 = *(_QWORD *)(v548 + 152);
                      v550 = *(unsigned int *)(v548 + 168);
                      if ((_DWORD)v550)
                      {
                        LODWORD(v551) = (v550 - 1) & ((v547 >> 4) ^ (v547 >> 9));
                        v552 = (uint64_t ****)(v549 + 16 * v551);
                        v553 = *v552;
                        if (*v552 != v547)
                        {
                          v554 = 1;
                          do
                          {
                            if (v553 == (uint64_t ***)-4096)
                              goto LABEL_619;
                            v555 = v551 + v554++;
                            v551 = v555 & (v550 - 1);
                            v553 = *(uint64_t ****)(v549 + 16 * v551);
                          }
                          while (v553 != v547);
                          v552 = (uint64_t ****)(v549 + 16 * v551);
                        }
                      }
                      else
                      {
LABEL_619:
                        v552 = (uint64_t ****)(v549 + 16 * v550);
                      }
                      v556 = v552[1];
                      v558 = (unint64_t)*v556;
                      result = (char *)(v556 + 2);
                      v557 = v558;
                    }
                    else
                    {
                      v557 = 0;
                      result = &byte_1C871356D;
                    }
                    v559 = *(uint64_t ****)(v758 + 48);
                    if ((*((_BYTE *)v559 + 23) & 0x10) != 0)
                    {
                      v560 = ***v559;
                      v561 = *(_QWORD *)(v560 + 152);
                      v562 = *(unsigned int *)(v560 + 168);
                      if ((_DWORD)v562)
                      {
                        LODWORD(v563) = (v562 - 1) & ((v559 >> 4) ^ (v559 >> 9));
                        v564 = (uint64_t ****)(v561 + 16 * v563);
                        v565 = *v564;
                        if (*v564 != v559)
                        {
                          v566 = 1;
                          do
                          {
                            if (v565 == (uint64_t ***)-4096)
                              goto LABEL_628;
                            v567 = v563 + v566++;
                            v563 = v567 & (v562 - 1);
                            v565 = *(uint64_t ****)(v561 + 16 * v563);
                          }
                          while (v565 != v559);
                          v564 = (uint64_t ****)(v561 + 16 * v563);
                        }
                      }
                      else
                      {
LABEL_628:
                        v564 = (uint64_t ****)(v561 + 16 * v562);
                      }
                      v568 = v564[1];
                      v571 = (unint64_t)*v568;
                      v569 = (char *)(v568 + 2);
                      v570 = v571;
                    }
                    else
                    {
                      v570 = 0;
                      v569 = &byte_1C871356D;
                    }
                    v572 = v570 >= v557 ? v557 : v570;
                    if (!v572)
                      break;
                    result = (char *)memcmp(result, v569, v572);
                    if (!(_DWORD)result)
                      break;
                    if ((result & 0x80000000) == 0)
                      goto LABEL_643;
LABEL_638:
                    *(_DWORD *)v513 = v545;
                    *(_QWORD *)(v513 + 8) = v546;
                  }
                  if (v557 <= v570)
                    goto LABEL_638;
LABEL_643:
                  v453 = v513;
LABEL_644:
                  *(_DWORD *)v453 = v485;
                  *(_QWORD *)(v453 + 8) = v758;
LABEL_645:
                  v450 = v451 - 1;
                  if (!v451)
                  {
                    v573 = v766;
                    while (1)
                    {
                      v574 = 0;
                      v762 = *(_DWORD *)v573;
                      v575 = *(_QWORD *)(v573 + 8);
                      do
                      {
                        v576 = v574 + 1;
                        v577 = v573 + 16 * (v574 + 1);
                        v578 = (2 * v574) | 1;
                        v579 = 2 * v574 + 2;
                        if (v579 >= v9)
                          goto LABEL_684;
                        v580 = *(_DWORD *)(v577 + 16);
                        v581 = *(_DWORD *)v577 > v580;
                        if (*(_DWORD *)v577 == v580)
                        {
                          v582 = *(uint64_t ****)(*(_QWORD *)(v573 + 16 * v576 + 8) + 48);
                          if ((*((_BYTE *)v582 + 23) & 0x10) != 0)
                          {
                            v583 = ***v582;
                            v584 = *(_QWORD *)(v583 + 152);
                            v585 = *(unsigned int *)(v583 + 168);
                            if ((_DWORD)v585)
                            {
                              LODWORD(v586) = (v585 - 1) & ((v582 >> 4) ^ (v582 >> 9));
                              v587 = (uint64_t ****)(v584 + 16 * v586);
                              v588 = *v587;
                              if (*v587 != v582)
                              {
                                v589 = 1;
                                do
                                {
                                  if (v588 == (uint64_t ***)-4096)
                                    goto LABEL_661;
                                  v590 = v586 + v589++;
                                  v586 = v590 & (v585 - 1);
                                  v588 = *(uint64_t ****)(v584 + 16 * v586);
                                }
                                while (v588 != v582);
                                v587 = (uint64_t ****)(v584 + 16 * v586);
                              }
                            }
                            else
                            {
LABEL_661:
                              v587 = (uint64_t ****)(v584 + 16 * v585);
                            }
                            v591 = v587[1];
                            v593 = (size_t)*v591;
                            result = (char *)(v591 + 2);
                            v592 = v593;
                          }
                          else
                          {
                            v592 = 0;
                            result = &byte_1C871356D;
                          }
                          v594 = *(uint64_t ****)(*(_QWORD *)(v577 + 24) + 48);
                          if ((*((_BYTE *)v594 + 23) & 0x10) != 0)
                          {
                            v595 = ***v594;
                            v596 = *(_QWORD *)(v595 + 152);
                            v597 = *(unsigned int *)(v595 + 168);
                            if ((_DWORD)v597)
                            {
                              LODWORD(v598) = (v597 - 1) & ((v594 >> 4) ^ (v594 >> 9));
                              v599 = (uint64_t ****)(v596 + 16 * v598);
                              v600 = *v599;
                              if (*v599 != v594)
                              {
                                v601 = 1;
                                do
                                {
                                  if (v600 == (uint64_t ***)-4096)
                                    goto LABEL_670;
                                  v602 = v598 + v601++;
                                  v598 = v602 & (v597 - 1);
                                  v600 = *(uint64_t ****)(v596 + 16 * v598);
                                }
                                while (v600 != v594);
                                v599 = (uint64_t ****)(v596 + 16 * v598);
                              }
                            }
                            else
                            {
LABEL_670:
                              v599 = (uint64_t ****)(v596 + 16 * v597);
                            }
                            v603 = v599[1];
                            v606 = (size_t)*v603;
                            v604 = (char *)(v603 + 2);
                            v605 = v606;
                          }
                          else
                          {
                            v605 = 0;
                            v604 = &byte_1C871356D;
                          }
                          if (v605 >= v592)
                            v607 = v592;
                          else
                            v607 = v605;
                          if (v607)
                          {
                            result = (char *)memcmp(result, v604, v607);
                            if ((_DWORD)result)
                            {
                              v608 = (int)result >= 0;
                              goto LABEL_682;
                            }
                          }
                          v581 = v592 > v605;
                        }
                        v608 = v581;
LABEL_682:
                        if (v608)
                        {
                          v577 += 16;
                          v578 = v579;
                        }
LABEL_684:
                        *(_DWORD *)v573 = *(_DWORD *)v577;
                        *(_QWORD *)(v573 + 8) = *(_QWORD *)(v577 + 8);
                        v573 = v577;
                        v574 = v578;
                      }
                      while (v578 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
                      v609 = a2 - 16;
                      if (v577 == a2 - 16)
                      {
                        *(_DWORD *)v577 = v762;
                        *(_QWORD *)(v577 + 8) = v575;
                      }
                      else
                      {
                        *(_DWORD *)v577 = *(_DWORD *)(a2 - 16);
                        *(_QWORD *)(v577 + 8) = *(_QWORD *)(a2 - 8);
                        *(_DWORD *)(a2 - 16) = v762;
                        *(_QWORD *)(a2 - 8) = v575;
                        v610 = v577 - v766 + 16;
                        if (v610 >= 17)
                        {
                          v611 = ((unint64_t)v610 >> 4) - 2;
                          v612 = v611 >> 1;
                          v613 = v766 + 16 * (v611 >> 1);
                          v614 = *(_DWORD *)v613;
                          v615 = *(_DWORD *)v577;
                          v759 = a2 - 16;
                          if (*(_DWORD *)v613 == *(_DWORD *)v577)
                          {
                            v616 = *(_QWORD *)(v613 + 8);
                            v617 = *(uint64_t ****)(v616 + 48);
                            if ((*((_BYTE *)v617 + 23) & 0x10) != 0)
                            {
                              v618 = ***v617;
                              v619 = *(_QWORD *)(v618 + 152);
                              v620 = *(unsigned int *)(v618 + 168);
                              if ((_DWORD)v620)
                              {
                                LODWORD(v621) = (v620 - 1) & ((v617 >> 4) ^ (v617 >> 9));
                                v622 = (uint64_t ****)(v619 + 16 * v621);
                                v623 = *v622;
                                if (*v622 != v617)
                                {
                                  v624 = 1;
                                  do
                                  {
                                    if (v623 == (uint64_t ***)-4096)
                                      goto LABEL_701;
                                    v625 = v621 + v624++;
                                    v621 = v625 & (v620 - 1);
                                    v623 = *(uint64_t ****)(v619 + 16 * v621);
                                  }
                                  while (v623 != v617);
                                  v622 = (uint64_t ****)(v619 + 16 * v621);
                                }
                              }
                              else
                              {
LABEL_701:
                                v622 = (uint64_t ****)(v619 + 16 * v620);
                              }
                              v627 = v622[1];
                              v629 = (size_t)*v627;
                              result = (char *)(v627 + 2);
                              v628 = v629;
                            }
                            else
                            {
                              v628 = 0;
                              result = &byte_1C871356D;
                            }
                            v626 = *(_QWORD *)(v577 + 8);
                            v630 = *(uint64_t ****)(v626 + 48);
                            if ((*((_BYTE *)v630 + 23) & 0x10) != 0)
                            {
                              v631 = ***v630;
                              v632 = *(_QWORD *)(v631 + 152);
                              v633 = *(unsigned int *)(v631 + 168);
                              if ((_DWORD)v633)
                              {
                                LODWORD(v634) = (v633 - 1) & ((v630 >> 4) ^ (v630 >> 9));
                                v635 = (uint64_t ****)(v632 + 16 * v634);
                                v636 = *v635;
                                if (*v635 != v630)
                                {
                                  v637 = 1;
                                  do
                                  {
                                    if (v636 == (uint64_t ***)-4096)
                                      goto LABEL_710;
                                    v638 = v634 + v637++;
                                    v634 = v638 & (v633 - 1);
                                    v636 = *(uint64_t ****)(v632 + 16 * v634);
                                  }
                                  while (v636 != v630);
                                  v635 = (uint64_t ****)(v632 + 16 * v634);
                                }
                              }
                              else
                              {
LABEL_710:
                                v635 = (uint64_t ****)(v632 + 16 * v633);
                              }
                              v639 = v635[1];
                              v642 = (size_t)*v639;
                              v640 = (char *)(v639 + 2);
                              v641 = v642;
                            }
                            else
                            {
                              v641 = 0;
                              v640 = &byte_1C871356D;
                            }
                            if (v641 >= v628)
                              v643 = v628;
                            else
                              v643 = v641;
                            if (v643
                              && (v644 = *(_QWORD *)(v577 + 8),
                                  v645 = v611,
                                  v764 = v628,
                                  result = (char *)memcmp(result, v640, v643),
                                  v628 = v764,
                                  v611 = v645,
                                  v626 = v644,
                                  (_DWORD)result))
                            {
                              v609 = v759;
                              if ((result & 0x80000000) != 0)
                                goto LABEL_724;
                            }
                            else
                            {
                              v44 = v628 > v641;
                              v609 = v759;
                              if (!v44)
                                goto LABEL_724;
                            }
LABEL_721:
                            *(_DWORD *)v577 = v614;
                            *(_QWORD *)(v577 + 8) = v616;
                            if (v611 >= 2)
                            {
                              v765 = v615;
                              do
                              {
                                v647 = v612 - 1;
                                v612 = (v612 - 1) >> 1;
                                v646 = v766 + 16 * v612;
                                v648 = *(_DWORD *)v646;
                                if (*(_DWORD *)v646 == v615)
                                {
                                  v649 = *(_QWORD *)(v646 + 8);
                                  v650 = *(uint64_t ****)(v649 + 48);
                                  if ((*((_BYTE *)v650 + 23) & 0x10) != 0)
                                  {
                                    v651 = ***v650;
                                    v652 = *(_QWORD *)(v651 + 152);
                                    v653 = *(unsigned int *)(v651 + 168);
                                    if ((_DWORD)v653)
                                    {
                                      LODWORD(v654) = (v653 - 1) & ((v650 >> 4) ^ (v650 >> 9));
                                      v655 = (uint64_t ****)(v652 + 16 * v654);
                                      v656 = *v655;
                                      if (*v655 != v650)
                                      {
                                        v657 = 1;
                                        do
                                        {
                                          if (v656 == (uint64_t ***)-4096)
                                            goto LABEL_738;
                                          v658 = v654 + v657++;
                                          v654 = v658 & (v653 - 1);
                                          v656 = *(uint64_t ****)(v652 + 16 * v654);
                                        }
                                        while (v656 != v650);
                                        v655 = (uint64_t ****)(v652 + 16 * v654);
                                      }
                                    }
                                    else
                                    {
LABEL_738:
                                      v655 = (uint64_t ****)(v652 + 16 * v653);
                                    }
                                    v659 = v655[1];
                                    v661 = (size_t)*v659;
                                    result = (char *)(v659 + 2);
                                    v660 = v661;
                                  }
                                  else
                                  {
                                    v660 = 0;
                                    result = &byte_1C871356D;
                                  }
                                  v662 = *(uint64_t ****)(v626 + 48);
                                  if ((*((_BYTE *)v662 + 23) & 0x10) != 0)
                                  {
                                    v663 = ***v662;
                                    v664 = *(_QWORD *)(v663 + 152);
                                    v665 = *(unsigned int *)(v663 + 168);
                                    if ((_DWORD)v665)
                                    {
                                      LODWORD(v666) = (v665 - 1) & ((v662 >> 4) ^ (v662 >> 9));
                                      v667 = (uint64_t ****)(v664 + 16 * v666);
                                      v668 = *v667;
                                      if (*v667 != v662)
                                      {
                                        v669 = 1;
                                        do
                                        {
                                          if (v668 == (uint64_t ***)-4096)
                                            goto LABEL_747;
                                          v670 = v666 + v669++;
                                          v666 = v670 & (v665 - 1);
                                          v668 = *(uint64_t ****)(v664 + 16 * v666);
                                        }
                                        while (v668 != v662);
                                        v667 = (uint64_t ****)(v664 + 16 * v666);
                                      }
                                    }
                                    else
                                    {
LABEL_747:
                                      v667 = (uint64_t ****)(v664 + 16 * v665);
                                    }
                                    v671 = v667[1];
                                    v674 = (size_t)*v671;
                                    v672 = (char *)(v671 + 2);
                                    v673 = v674;
                                  }
                                  else
                                  {
                                    v673 = 0;
                                    v672 = &byte_1C871356D;
                                  }
                                  if (v673 >= v660)
                                    v675 = v660;
                                  else
                                    v675 = v673;
                                  if (v675 && (result = (char *)memcmp(result, v672, v675), (_DWORD)result))
                                  {
                                    v615 = v765;
                                    if ((result & 0x80000000) != 0)
                                      goto LABEL_722;
                                  }
                                  else
                                  {
                                    v44 = v660 > v673;
                                    v615 = v765;
                                    if (!v44)
                                      goto LABEL_722;
                                  }
                                }
                                else
                                {
                                  if (v648 <= v615)
                                    goto LABEL_722;
                                  v649 = *(_QWORD *)(v766 + 16 * v612 + 8);
                                }
                                *(_DWORD *)v613 = v648;
                                *(_QWORD *)(v613 + 8) = v649;
                                v613 = v766 + 16 * v612;
                              }
                              while (v647 > 1);
                            }
                            else
                            {
LABEL_722:
                              v646 = v613;
                            }
                            *(_DWORD *)v646 = v615;
                            *(_QWORD *)(v646 + 8) = v626;
                            v609 = v759;
                          }
                          else if (v614 > v615)
                          {
                            v626 = *(_QWORD *)(v577 + 8);
                            v616 = *(_QWORD *)(v766 + 16 * v612 + 8);
                            goto LABEL_721;
                          }
                        }
                      }
LABEL_724:
                      a2 = v609;
                      v44 = v9-- <= 2;
                      v573 = v766;
                      if (v44)
                        return result;
                    }
                  }
                  continue;
                }
              }
              v455 = v466 > v479;
            }
            break;
          }
          v482 = v455;
          goto LABEL_544;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = v7 + 16 * ((unint64_t)v9 >> 1);
        if ((unint64_t)v8 < 0x801)
        {
          result = sub_1C5FC2728((char *)v11, (unsigned int *)v7, v755);
        }
        else
        {
          sub_1C5FC2728((char *)v7, (unsigned int *)v11, v755);
          sub_1C5FC2728((char *)(v7 + 16), (unsigned int *)(v11 - 16), (unsigned int *)(a2 - 32));
          sub_1C5FC2728((char *)(v7 + 32), (unsigned int *)(v7 + 16 + 16 * v10), (unsigned int *)(a2 - 48));
          result = sub_1C5FC2728((char *)(v11 - 16), (unsigned int *)v11, (unsigned int *)(v7 + 16 + 16 * v10));
          v12 = *(_DWORD *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v11;
          *(_DWORD *)v11 = v12;
          v13 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v11 + 8);
          *(_QWORD *)(v11 + 8) = v13;
        }
        --a3;
        v14 = *(_DWORD *)v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v7 - 16);
          if (v15 != v14)
          {
            if (v15 > v14)
              goto LABEL_46;
            v25 = *(_QWORD *)(v7 + 8);
            goto LABEL_37;
          }
          v16 = *(uint64_t ****)(*(_QWORD *)(v7 - 8) + 48);
          if ((*((_BYTE *)v16 + 23) & 0x10) != 0)
          {
            v17 = ***v16;
            v18 = *(_QWORD *)(v17 + 152);
            v19 = *(unsigned int *)(v17 + 168);
            if (!(_DWORD)v19)
              goto LABEL_20;
            LODWORD(v20) = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
            v21 = (uint64_t ****)(v18 + 16 * v20);
            v22 = *v21;
            if (*v21 != v16)
            {
              v23 = 1;
              while (v22 != (uint64_t ***)-4096)
              {
                v24 = v20 + v23++;
                v20 = v24 & (v19 - 1);
                v22 = *(uint64_t ****)(v18 + 16 * v20);
                if (v22 == v16)
                {
                  v21 = (uint64_t ****)(v18 + 16 * v20);
                  goto LABEL_21;
                }
              }
LABEL_20:
              v21 = (uint64_t ****)(v18 + 16 * v19);
            }
LABEL_21:
            v26 = v21[1];
            v28 = (size_t)*v26;
            result = (char *)(v26 + 2);
            v27 = v28;
            goto LABEL_22;
          }
          v27 = 0;
          result = &byte_1C871356D;
LABEL_22:
          v25 = *(_QWORD *)(v7 + 8);
          v29 = *(uint64_t ****)(v25 + 48);
          if ((*((_BYTE *)v29 + 23) & 0x10) != 0)
          {
            v30 = ***v29;
            v31 = *(_QWORD *)(v30 + 152);
            v32 = *(unsigned int *)(v30 + 168);
            if ((_DWORD)v32)
            {
              LODWORD(v33) = (v32 - 1) & ((v29 >> 4) ^ (v29 >> 9));
              v34 = (uint64_t ****)(v31 + 16 * v33);
              v35 = *v34;
              if (*v34 == v29)
              {
LABEL_30:
                v38 = v34[1];
                v41 = (size_t)*v38;
                v39 = (char *)(v38 + 2);
                v40 = v41;
                goto LABEL_31;
              }
              v36 = 1;
              while (v35 != (uint64_t ***)-4096)
              {
                v37 = v33 + v36++;
                v33 = v37 & (v32 - 1);
                v35 = *(uint64_t ****)(v31 + 16 * v33);
                if (v35 == v29)
                {
                  v34 = (uint64_t ****)(v31 + 16 * v33);
                  goto LABEL_30;
                }
              }
            }
            v34 = (uint64_t ****)(v31 + 16 * v32);
            goto LABEL_30;
          }
          v40 = 0;
          v39 = &byte_1C871356D;
LABEL_31:
          if (v40 >= v27)
            v42 = v27;
          else
            v42 = v40;
          if (v42 && (result = (char *)memcmp(result, v39, v42), (_DWORD)result))
          {
            if ((result & 0x80000000) == 0)
              goto LABEL_46;
          }
          else if (v27 > v40)
          {
            goto LABEL_46;
          }
LABEL_37:
          v43 = *v755;
          v44 = v14 > *v755;
          if (v14 != *v755)
            goto LABEL_277;
          v45 = *(uint64_t ****)(v25 + 48);
          if ((*((_BYTE *)v45 + 23) & 0x10) != 0)
          {
            v46 = ***v45;
            v47 = *(_QWORD *)(v46 + 152);
            v48 = *(unsigned int *)(v46 + 168);
            if (!(_DWORD)v48)
              goto LABEL_226;
            LODWORD(v49) = (v48 - 1) & ((v45 >> 4) ^ (v45 >> 9));
            v50 = (uint64_t ****)(v47 + 16 * v49);
            v51 = *v50;
            if (*v50 != v45)
            {
              v52 = 1;
              while (v51 != (uint64_t ***)-4096)
              {
                v53 = v49 + v52++;
                v49 = v53 & (v48 - 1);
                v51 = *(uint64_t ****)(v47 + 16 * v49);
                if (v51 == v45)
                {
                  v50 = (uint64_t ****)(v47 + 16 * v49);
                  goto LABEL_227;
                }
              }
LABEL_226:
              v50 = (uint64_t ****)(v47 + 16 * v48);
            }
LABEL_227:
            v211 = v50[1];
            v213 = (size_t)*v211;
            result = (char *)(v211 + 2);
            v212 = v213;
            goto LABEL_228;
          }
          v212 = 0;
          result = &byte_1C871356D;
LABEL_228:
          v214 = *(uint64_t ****)(*(_QWORD *)(a2 - 8) + 48);
          if ((*((_BYTE *)v214 + 23) & 0x10) == 0)
          {
            v225 = 0;
            v224 = &byte_1C871356D;
            goto LABEL_237;
          }
          v215 = ***v214;
          v216 = *(_QWORD *)(v215 + 152);
          v217 = *(unsigned int *)(v215 + 168);
          if (!(_DWORD)v217)
            goto LABEL_235;
          LODWORD(v218) = (v217 - 1) & ((v214 >> 4) ^ (v214 >> 9));
          v219 = (uint64_t ****)(v216 + 16 * v218);
          v220 = *v219;
          if (*v219 != v214)
          {
            v221 = 1;
            while (v220 != (uint64_t ***)-4096)
            {
              v222 = v218 + v221++;
              v218 = v222 & (v217 - 1);
              v220 = *(uint64_t ****)(v216 + 16 * v218);
              if (v220 == v214)
              {
                v219 = (uint64_t ****)(v216 + 16 * v218);
                goto LABEL_236;
              }
            }
LABEL_235:
            v219 = (uint64_t ****)(v216 + 16 * v217);
          }
LABEL_236:
          v223 = v219[1];
          v226 = (size_t)*v223;
          v224 = (char *)(v223 + 2);
          v225 = v226;
LABEL_237:
          if (v225 >= v212)
            v227 = v212;
          else
            v227 = v225;
          if (v227)
          {
            result = (char *)memcmp(result, v224, v227);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) != 0)
                goto LABEL_243;
              while (1)
              {
LABEL_279:
                while (1)
                {
                  v6 = v7 + 16;
                  v257 = *(_DWORD *)(v7 + 16);
                  if (v14 == v257)
                    break;
                  v7 += 16;
                  if (v14 > v257)
                    goto LABEL_311;
                }
                v258 = *(uint64_t ****)(v25 + 48);
                if ((*((_BYTE *)v258 + 23) & 0x10) != 0)
                  break;
                v268 = 0;
                result = &byte_1C871356D;
LABEL_291:
                v270 = *(uint64_t ****)(*(_QWORD *)(v7 + 24) + 48);
                if ((*((_BYTE *)v270 + 23) & 0x10) == 0)
                {
                  v281 = 0;
                  v280 = &byte_1C871356D;
                  goto LABEL_300;
                }
                v271 = ***v270;
                v272 = *(_QWORD *)(v271 + 152);
                v273 = *(unsigned int *)(v271 + 168);
                if (!(_DWORD)v273)
                  goto LABEL_298;
                LODWORD(v274) = (v273 - 1) & ((v270 >> 4) ^ (v270 >> 9));
                v275 = (uint64_t ****)(v272 + 16 * v274);
                v276 = *v275;
                if (*v275 != v270)
                {
                  v277 = 1;
                  while (v276 != (uint64_t ***)-4096)
                  {
                    v278 = v274 + v277++;
                    v274 = v278 & (v273 - 1);
                    v276 = *(uint64_t ****)(v272 + 16 * v274);
                    if (v276 == v270)
                    {
                      v275 = (uint64_t ****)(v272 + 16 * v274);
                      goto LABEL_299;
                    }
                  }
LABEL_298:
                  v275 = (uint64_t ****)(v272 + 16 * v273);
                }
LABEL_299:
                v279 = v275[1];
                v282 = (size_t)*v279;
                v280 = (char *)(v279 + 2);
                v281 = v282;
LABEL_300:
                if (v281 >= v268)
                  v283 = v268;
                else
                  v283 = v281;
                if (v283 && (result = (char *)memcmp(result, v280, v283), (_DWORD)result))
                {
                  v7 += 16;
                  if ((result & 0x80000000) == 0)
                    goto LABEL_311;
                }
                else
                {
                  v7 += 16;
                  if (v268 > v281)
                    goto LABEL_311;
                }
              }
              v259 = ***v258;
              v260 = *(_QWORD *)(v259 + 152);
              v261 = *(unsigned int *)(v259 + 168);
              if ((_DWORD)v261)
              {
                LODWORD(v262) = (v261 - 1) & ((v258 >> 4) ^ (v258 >> 9));
                v263 = (uint64_t ****)(v260 + 16 * v262);
                v264 = *v263;
                if (*v263 == v258)
                {
LABEL_290:
                  v267 = v263[1];
                  v269 = (size_t)*v267;
                  result = (char *)(v267 + 2);
                  v268 = v269;
                  goto LABEL_291;
                }
                v265 = 1;
                while (v264 != (uint64_t ***)-4096)
                {
                  v266 = v262 + v265++;
                  v262 = v266 & (v261 - 1);
                  v264 = *(uint64_t ****)(v260 + 16 * v262);
                  if (v264 == v258)
                  {
                    v263 = (uint64_t ****)(v260 + 16 * v262);
                    goto LABEL_290;
                  }
                }
              }
              v263 = (uint64_t ****)(v260 + 16 * v261);
              goto LABEL_290;
            }
          }
          v44 = v212 > v225;
LABEL_277:
          if (v44)
            goto LABEL_279;
LABEL_243:
          while (1)
          {
            v6 = v7 + 16;
            if (v7 + 16 >= a2)
              break;
            v228 = v7;
            v7 += 16;
            v229 = *(_DWORD *)(v228 + 16);
            v230 = v14 > v229;
            if (v14 == v229)
            {
              v231 = *(uint64_t ****)(v25 + 48);
              if ((*((_BYTE *)v231 + 23) & 0x10) != 0)
              {
                v232 = ***v231;
                v233 = *(_QWORD *)(v232 + 152);
                v234 = *(unsigned int *)(v232 + 168);
                if (!(_DWORD)v234)
                  goto LABEL_252;
                LODWORD(v235) = (v234 - 1) & ((v231 >> 4) ^ (v231 >> 9));
                v236 = (uint64_t ****)(v233 + 16 * v235);
                v237 = *v236;
                if (*v236 != v231)
                {
                  v238 = 1;
                  while (v237 != (uint64_t ***)-4096)
                  {
                    v239 = v235 + v238++;
                    v235 = v239 & (v234 - 1);
                    v237 = *(uint64_t ****)(v233 + 16 * v235);
                    if (v237 == v231)
                    {
                      v236 = (uint64_t ****)(v233 + 16 * v235);
                      goto LABEL_253;
                    }
                  }
LABEL_252:
                  v236 = (uint64_t ****)(v233 + 16 * v234);
                }
LABEL_253:
                v240 = v236[1];
                v242 = (size_t)*v240;
                result = (char *)(v240 + 2);
                v241 = v242;
                goto LABEL_254;
              }
              v241 = 0;
              result = &byte_1C871356D;
LABEL_254:
              v243 = *(uint64_t ****)(*(_QWORD *)(v228 + 24) + 48);
              if ((*((_BYTE *)v243 + 23) & 0x10) != 0)
              {
                v244 = ***v243;
                v245 = *(_QWORD *)(v244 + 152);
                v246 = *(unsigned int *)(v244 + 168);
                if (!(_DWORD)v246)
                  goto LABEL_261;
                LODWORD(v247) = (v246 - 1) & ((v243 >> 4) ^ (v243 >> 9));
                v248 = (uint64_t ****)(v245 + 16 * v247);
                v249 = *v248;
                if (*v248 != v243)
                {
                  v250 = 1;
                  while (v249 != (uint64_t ***)-4096)
                  {
                    v251 = v247 + v250++;
                    v247 = v251 & (v246 - 1);
                    v249 = *(uint64_t ****)(v245 + 16 * v247);
                    if (v249 == v243)
                    {
                      v248 = (uint64_t ****)(v245 + 16 * v247);
                      goto LABEL_262;
                    }
                  }
LABEL_261:
                  v248 = (uint64_t ****)(v245 + 16 * v246);
                }
LABEL_262:
                v252 = v248[1];
                v255 = (size_t)*v252;
                v253 = (char *)(v252 + 2);
                v254 = v255;
                goto LABEL_263;
              }
              v254 = 0;
              v253 = &byte_1C871356D;
LABEL_263:
              if (v254 >= v241)
                v256 = v241;
              else
                v256 = v254;
              if (!v256 || (result = (char *)memcmp(result, v253, v256), !(_DWORD)result))
              {
                v230 = v241 > v254;
                goto LABEL_271;
              }
              if ((result & 0x80000000) == 0)
                break;
            }
            else
            {
LABEL_271:
              if (v230)
                break;
            }
          }
LABEL_311:
          v284 = a2;
          if (v6 < a2)
          {
            v285 = a2;
            while (2)
            {
              v284 = v285 - 16;
              v286 = v14 > v43;
              if (v14 != v43)
                goto LABEL_340;
              v287 = *(uint64_t ****)(v25 + 48);
              if ((*((_BYTE *)v287 + 23) & 0x10) != 0)
              {
                v288 = ***v287;
                v289 = *(_QWORD *)(v288 + 152);
                v290 = *(unsigned int *)(v288 + 168);
                if (!(_DWORD)v290)
                  goto LABEL_321;
                LODWORD(v291) = (v290 - 1) & ((v287 >> 4) ^ (v287 >> 9));
                v292 = (uint64_t ****)(v289 + 16 * v291);
                v293 = *v292;
                if (*v292 != v287)
                {
                  v294 = 1;
                  while (v293 != (uint64_t ***)-4096)
                  {
                    v295 = v291 + v294++;
                    v291 = v295 & (v290 - 1);
                    v293 = *(uint64_t ****)(v289 + 16 * v291);
                    if (v293 == v287)
                    {
                      v292 = (uint64_t ****)(v289 + 16 * v291);
                      goto LABEL_322;
                    }
                  }
LABEL_321:
                  v292 = (uint64_t ****)(v289 + 16 * v290);
                }
LABEL_322:
                v296 = v292[1];
                v298 = (size_t)*v296;
                result = (char *)(v296 + 2);
                v297 = v298;
              }
              else
              {
                v297 = 0;
                result = &byte_1C871356D;
              }
              v299 = *(uint64_t ****)(*(_QWORD *)(v285 - 8) + 48);
              if ((*((_BYTE *)v299 + 23) & 0x10) != 0)
              {
                v300 = ***v299;
                v301 = *(_QWORD *)(v300 + 152);
                v302 = *(unsigned int *)(v300 + 168);
                if (!(_DWORD)v302)
                  goto LABEL_330;
                LODWORD(v303) = (v302 - 1) & ((v299 >> 4) ^ (v299 >> 9));
                v304 = (uint64_t ****)(v301 + 16 * v303);
                v305 = *v304;
                if (*v304 != v299)
                {
                  v306 = 1;
                  while (v305 != (uint64_t ***)-4096)
                  {
                    v307 = v303 + v306++;
                    v303 = v307 & (v302 - 1);
                    v305 = *(uint64_t ****)(v301 + 16 * v303);
                    if (v305 == v299)
                    {
                      v304 = (uint64_t ****)(v301 + 16 * v303);
                      goto LABEL_331;
                    }
                  }
LABEL_330:
                  v304 = (uint64_t ****)(v301 + 16 * v302);
                }
LABEL_331:
                v308 = v304[1];
                v311 = (size_t)*v308;
                v309 = (char *)(v308 + 2);
                v310 = v311;
              }
              else
              {
                v310 = 0;
                v309 = &byte_1C871356D;
              }
              if (v310 >= v297)
                v312 = v297;
              else
                v312 = v310;
              if (v312)
              {
                result = (char *)memcmp(result, v309, v312);
                if ((_DWORD)result)
                {
                  if ((result & 0x80000000) != 0)
                    break;
                  goto LABEL_342;
                }
              }
              v286 = v297 > v310;
LABEL_340:
              if (!v286)
                break;
LABEL_342:
              v43 = *(_DWORD *)(v285 - 32);
              v285 -= 16;
              continue;
            }
          }
          if (v6 >= v284)
            goto LABEL_412;
          v313 = *(_DWORD *)v6;
          v314 = *(_DWORD *)v284;
          do
          {
            v315 = v284;
            *(_DWORD *)v6 = v314;
            *(_DWORD *)v284 = v313;
            v316 = *(_QWORD *)(v6 + 8);
            *(_QWORD *)(v6 + 8) = *(_QWORD *)(v284 + 8);
            *(_QWORD *)(v284 + 8) = v316;
            v317 = v6;
            do
            {
              while (1)
              {
                while (1)
                {
                  v6 = v317 + 16;
                  v313 = *(_DWORD *)(v317 + 16);
                  if (v14 == v313)
                    break;
                  v317 += 16;
                  if (v14 > v313)
                    goto LABEL_382;
                }
                v318 = *(uint64_t ****)(v25 + 48);
                if ((*((_BYTE *)v318 + 23) & 0x10) != 0)
                {
                  v319 = ***v318;
                  v320 = *(_QWORD *)(v319 + 152);
                  v321 = *(unsigned int *)(v319 + 168);
                  if ((_DWORD)v321)
                  {
                    LODWORD(v322) = (v321 - 1) & ((v318 >> 4) ^ (v318 >> 9));
                    v323 = (uint64_t ****)(v320 + 16 * v322);
                    v324 = *v323;
                    if (*v323 == v318)
                    {
LABEL_359:
                      v327 = v323[1];
                      v329 = (unint64_t)*v327;
                      result = (char *)(v327 + 2);
                      v328 = v329;
                      goto LABEL_360;
                    }
                    v325 = 1;
                    while (v324 != (uint64_t ***)-4096)
                    {
                      v326 = v322 + v325++;
                      v322 = v326 & (v321 - 1);
                      v324 = *(uint64_t ****)(v320 + 16 * v322);
                      if (v324 == v318)
                      {
                        v323 = (uint64_t ****)(v320 + 16 * v322);
                        goto LABEL_359;
                      }
                    }
                  }
                  v323 = (uint64_t ****)(v320 + 16 * v321);
                  goto LABEL_359;
                }
                v328 = 0;
                result = &byte_1C871356D;
LABEL_360:
                v330 = *(uint64_t ****)(*(_QWORD *)(v317 + 24) + 48);
                if ((*((_BYTE *)v330 + 23) & 0x10) != 0)
                {
                  v331 = ***v330;
                  v332 = *(_QWORD *)(v331 + 152);
                  v333 = *(unsigned int *)(v331 + 168);
                  if ((_DWORD)v333)
                  {
                    LODWORD(v334) = (v333 - 1) & ((v330 >> 4) ^ (v330 >> 9));
                    v335 = (uint64_t ****)(v332 + 16 * v334);
                    v336 = *v335;
                    if (*v335 == v330)
                    {
LABEL_368:
                      v339 = v335[1];
                      v342 = (unint64_t)*v339;
                      v340 = (char *)(v339 + 2);
                      v341 = v342;
                      goto LABEL_369;
                    }
                    v337 = 1;
                    while (v336 != (uint64_t ***)-4096)
                    {
                      v338 = v334 + v337++;
                      v334 = v338 & (v333 - 1);
                      v336 = *(uint64_t ****)(v332 + 16 * v334);
                      if (v336 == v330)
                      {
                        v335 = (uint64_t ****)(v332 + 16 * v334);
                        goto LABEL_368;
                      }
                    }
                  }
                  v335 = (uint64_t ****)(v332 + 16 * v333);
                  goto LABEL_368;
                }
                v341 = 0;
                v340 = &byte_1C871356D;
LABEL_369:
                v343 = v341 >= v328 ? v328 : v341;
                if (!v343)
                  break;
                result = (char *)memcmp(result, v340, v343);
                if (!(_DWORD)result)
                  break;
                v317 = v6;
                if ((result & 0x80000000) == 0)
                  goto LABEL_382;
              }
              v317 = v6;
            }
            while (v328 <= v341);
            do
            {
              while (1)
              {
LABEL_382:
                while (1)
                {
                  v284 = v315 - 16;
                  v314 = *(_DWORD *)(v315 - 16);
                  if (v14 == v314)
                    break;
                  v315 -= 16;
                  if (v14 <= v314)
                    goto LABEL_411;
                }
                v347 = *(uint64_t ****)(v25 + 48);
                if ((*((_BYTE *)v347 + 23) & 0x10) == 0)
                {
                  v344 = 0;
                  result = &byte_1C871356D;
                  goto LABEL_394;
                }
                v348 = ***v347;
                v349 = *(_QWORD *)(v348 + 152);
                v350 = *(unsigned int *)(v348 + 168);
                if (!(_DWORD)v350)
                  goto LABEL_392;
                LODWORD(v351) = (v350 - 1) & ((v347 >> 4) ^ (v347 >> 9));
                v352 = (uint64_t ****)(v349 + 16 * v351);
                v353 = *v352;
                if (*v352 != v347)
                {
                  v354 = 1;
                  while (v353 != (uint64_t ***)-4096)
                  {
                    v355 = v351 + v354++;
                    v351 = v355 & (v350 - 1);
                    v353 = *(uint64_t ****)(v349 + 16 * v351);
                    if (v353 == v347)
                    {
                      v352 = (uint64_t ****)(v349 + 16 * v351);
                      goto LABEL_393;
                    }
                  }
LABEL_392:
                  v352 = (uint64_t ****)(v349 + 16 * v350);
                }
LABEL_393:
                v356 = v352[1];
                v357 = (unint64_t)*v356;
                result = (char *)(v356 + 2);
                v344 = v357;
LABEL_394:
                v358 = *(uint64_t ****)(*(_QWORD *)(v315 - 8) + 48);
                if ((*((_BYTE *)v358 + 23) & 0x10) == 0)
                {
                  v345 = 0;
                  v346 = &byte_1C871356D;
                  goto LABEL_403;
                }
                v359 = ***v358;
                v360 = *(_QWORD *)(v359 + 152);
                v361 = *(unsigned int *)(v359 + 168);
                if (!(_DWORD)v361)
                  goto LABEL_401;
                LODWORD(v362) = (v361 - 1) & ((v358 >> 4) ^ (v358 >> 9));
                v363 = (uint64_t ****)(v360 + 16 * v362);
                v364 = *v363;
                if (*v363 != v358)
                {
                  v365 = 1;
                  while (v364 != (uint64_t ***)-4096)
                  {
                    v366 = v362 + v365++;
                    v362 = v366 & (v361 - 1);
                    v364 = *(uint64_t ****)(v360 + 16 * v362);
                    if (v364 == v358)
                    {
                      v363 = (uint64_t ****)(v360 + 16 * v362);
                      goto LABEL_402;
                    }
                  }
LABEL_401:
                  v363 = (uint64_t ****)(v360 + 16 * v361);
                }
LABEL_402:
                v367 = v363[1];
                v368 = (unint64_t)*v367;
                v346 = (char *)(v367 + 2);
                v345 = v368;
LABEL_403:
                v369 = v345 >= v344 ? v344 : v345;
                if (!v369)
                  break;
                result = (char *)memcmp(result, v346, v369);
                if (!(_DWORD)result)
                  break;
                v315 -= 16;
                if ((result & 0x80000000) != 0)
                  goto LABEL_411;
              }
              v315 -= 16;
            }
            while (v344 > v345);
LABEL_411:
            ;
          }
          while (v6 < v284);
LABEL_412:
          if (v6 - 16 != v766)
          {
            *(_DWORD *)v766 = *(_DWORD *)(v6 - 16);
            *(_QWORD *)(v766 + 8) = *(_QWORD *)(v6 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v6 - 16) = v14;
          *(_QWORD *)(v6 - 8) = v25;
          continue;
        }
LABEL_46:
        v760 = a3;
        v54 = *(_QWORD *)(v7 + 8);
        v6 = v7;
        do
        {
          while (1)
          {
            v55 = v6;
            v57 = *(_DWORD *)(v6 + 16);
            v6 += 16;
            v56 = v57;
            v58 = v57 > v14;
            if (v57 != v14)
              goto LABEL_74;
            v59 = *(uint64_t ****)(*(_QWORD *)(v55 + 24) + 48);
            if ((*((_BYTE *)v59 + 23) & 0x10) != 0)
            {
              v60 = ***v59;
              v61 = *(_QWORD *)(v60 + 152);
              v62 = *(unsigned int *)(v60 + 168);
              if (!(_DWORD)v62)
                goto LABEL_55;
              LODWORD(v63) = (v62 - 1) & ((v59 >> 4) ^ (v59 >> 9));
              v64 = (uint64_t ****)(v61 + 16 * v63);
              v65 = *v64;
              if (*v64 != v59)
              {
                v66 = 1;
                while (v65 != (uint64_t ***)-4096)
                {
                  v67 = v63 + v66++;
                  v63 = v67 & (v62 - 1);
                  v65 = *(uint64_t ****)(v61 + 16 * v63);
                  if (v65 == v59)
                  {
                    v64 = (uint64_t ****)(v61 + 16 * v63);
                    goto LABEL_56;
                  }
                }
LABEL_55:
                v64 = (uint64_t ****)(v61 + 16 * v62);
              }
LABEL_56:
              v68 = v64[1];
              v71 = (unint64_t)*v68;
              v69 = (char *)(v68 + 2);
              v70 = v71;
              goto LABEL_57;
            }
            v70 = 0;
            v69 = &byte_1C871356D;
LABEL_57:
            v72 = *(uint64_t ****)(v54 + 48);
            if ((*((_BYTE *)v72 + 23) & 0x10) != 0)
            {
              v73 = ***v72;
              v74 = *(_QWORD *)(v73 + 152);
              v75 = *(unsigned int *)(v73 + 168);
              if ((_DWORD)v75)
              {
                LODWORD(v76) = (v75 - 1) & ((v72 >> 4) ^ (v72 >> 9));
                v77 = (uint64_t ****)(v74 + 16 * v76);
                v78 = *v77;
                if (*v77 == v72)
                {
LABEL_65:
                  v81 = v77[1];
                  v84 = (unint64_t)*v81;
                  v82 = (char *)(v81 + 2);
                  v83 = v84;
                  goto LABEL_66;
                }
                v79 = 1;
                while (v78 != (uint64_t ***)-4096)
                {
                  v80 = v76 + v79++;
                  v76 = v80 & (v75 - 1);
                  v78 = *(uint64_t ****)(v74 + 16 * v76);
                  if (v78 == v72)
                  {
                    v77 = (uint64_t ****)(v74 + 16 * v76);
                    goto LABEL_65;
                  }
                }
              }
              v77 = (uint64_t ****)(v74 + 16 * v75);
              goto LABEL_65;
            }
            v83 = 0;
            v82 = &byte_1C871356D;
LABEL_66:
            v85 = v83 >= v70 ? v70 : v83;
            if (!v85)
              break;
            v86 = memcmp(v69, v82, v85);
            if (!v86)
              break;
            if (v86 < 0)
              goto LABEL_78;
          }
          v58 = v70 > v83;
LABEL_74:
          ;
        }
        while (v58);
LABEL_78:
        v87 = (_DWORD *)a2;
        if (v55 != v7)
        {
          while (1)
          {
            while (1)
            {
              v89 = v87 - 4;
              v88 = *(v87 - 4);
              if (v88 == v14)
                break;
              v87 -= 4;
              if (v88 > v14)
                goto LABEL_151;
            }
            v90 = *(uint64_t ****)(*((_QWORD *)v87 - 1) + 48);
            if ((*((_BYTE *)v90 + 23) & 0x10) != 0)
              break;
            v101 = 0;
            v100 = &byte_1C871356D;
LABEL_91:
            v103 = *(uint64_t ****)(v54 + 48);
            if ((*((_BYTE *)v103 + 23) & 0x10) == 0)
            {
              v114 = 0;
              v113 = &byte_1C871356D;
              goto LABEL_100;
            }
            v104 = ***v103;
            v105 = *(_QWORD *)(v104 + 152);
            v106 = *(unsigned int *)(v104 + 168);
            if (!(_DWORD)v106)
              goto LABEL_98;
            LODWORD(v107) = (v106 - 1) & ((v103 >> 4) ^ (v103 >> 9));
            v108 = (uint64_t ****)(v105 + 16 * v107);
            v109 = *v108;
            if (*v108 != v103)
            {
              v110 = 1;
              while (v109 != (uint64_t ***)-4096)
              {
                v111 = v107 + v110++;
                v107 = v111 & (v106 - 1);
                v109 = *(uint64_t ****)(v105 + 16 * v107);
                if (v109 == v103)
                {
                  v108 = (uint64_t ****)(v105 + 16 * v107);
                  goto LABEL_99;
                }
              }
LABEL_98:
              v108 = (uint64_t ****)(v105 + 16 * v106);
            }
LABEL_99:
            v112 = v108[1];
            v115 = (size_t)*v112;
            v113 = (char *)(v112 + 2);
            v114 = v115;
LABEL_100:
            if (v114 >= v101)
              v116 = v101;
            else
              v116 = v114;
            if (v116 && (v117 = memcmp(v100, v113, v116)) != 0)
            {
              v87 = v89;
              if ((v117 & 0x80000000) == 0)
                goto LABEL_151;
            }
            else
            {
              v87 = v89;
              if (v101 > v114)
                goto LABEL_151;
            }
          }
          v91 = ***v90;
          v92 = *(_QWORD *)(v91 + 152);
          v93 = *(unsigned int *)(v91 + 168);
          if ((_DWORD)v93)
          {
            LODWORD(v94) = (v93 - 1) & ((v90 >> 4) ^ (v90 >> 9));
            v95 = (uint64_t ****)(v92 + 16 * v94);
            v96 = *v95;
            if (*v95 != v90)
            {
              v97 = 1;
              while (v96 != (uint64_t ***)-4096)
              {
                v98 = v94 + v97++;
                v94 = v98 & (v93 - 1);
                v96 = *(uint64_t ****)(v92 + 16 * v94);
                if (v96 == v90)
                {
                  v95 = (uint64_t ****)(v92 + 16 * v94);
                  goto LABEL_90;
                }
              }
              goto LABEL_89;
            }
          }
          else
          {
LABEL_89:
            v95 = (uint64_t ****)(v92 + 16 * v93);
          }
LABEL_90:
          v99 = v95[1];
          v102 = (size_t)*v99;
          v100 = (char *)(v99 + 2);
          v101 = v102;
          goto LABEL_91;
        }
        v89 = (_DWORD *)a2;
        if (v6 < a2)
        {
          v118 = (_DWORD *)a2;
          while (1)
          {
            while (1)
            {
              v89 = v118 - 4;
              v119 = *(v118 - 4);
              if (v119 == v14)
                break;
              v129 = v119 > v14 || v6 >= (unint64_t)v89;
              v118 -= 4;
              if (v129)
                goto LABEL_151;
            }
            v120 = *(uint64_t ****)(*((_QWORD *)v118 - 1) + 48);
            if ((*((_BYTE *)v120 + 23) & 0x10) != 0)
              break;
            v132 = 0;
            v131 = &byte_1C871356D;
LABEL_129:
            v134 = *(uint64_t ****)(v54 + 48);
            if ((*((_BYTE *)v134 + 23) & 0x10) == 0)
            {
              v145 = 0;
              v144 = &byte_1C871356D;
              goto LABEL_138;
            }
            v135 = ***v134;
            v136 = *(_QWORD *)(v135 + 152);
            v137 = *(unsigned int *)(v135 + 168);
            if (!(_DWORD)v137)
              goto LABEL_136;
            LODWORD(v138) = (v137 - 1) & ((v134 >> 4) ^ (v134 >> 9));
            v139 = (uint64_t ****)(v136 + 16 * v138);
            v140 = *v139;
            if (*v139 != v134)
            {
              v141 = 1;
              while (v140 != (uint64_t ***)-4096)
              {
                v142 = v138 + v141++;
                v138 = v142 & (v137 - 1);
                v140 = *(uint64_t ****)(v136 + 16 * v138);
                if (v140 == v134)
                {
                  v139 = (uint64_t ****)(v136 + 16 * v138);
                  goto LABEL_137;
                }
              }
LABEL_136:
              v139 = (uint64_t ****)(v136 + 16 * v137);
            }
LABEL_137:
            v143 = v139[1];
            v146 = (size_t)*v143;
            v144 = (char *)(v143 + 2);
            v145 = v146;
LABEL_138:
            if (v145 >= v132)
              v147 = v132;
            else
              v147 = v145;
            if (v147 && (v148 = memcmp(v131, v144, v147)) != 0)
            {
              if (v6 >= (unint64_t)v89)
                goto LABEL_151;
              v118 = v89;
              if ((v148 & 0x80000000) == 0)
                goto LABEL_151;
            }
            else
            {
              if (v6 >= (unint64_t)v89)
                goto LABEL_151;
              v118 = v89;
              if (v132 > v145)
                goto LABEL_151;
            }
          }
          v121 = ***v120;
          v122 = *(_QWORD *)(v121 + 152);
          v123 = *(unsigned int *)(v121 + 168);
          if ((_DWORD)v123)
          {
            LODWORD(v124) = (v123 - 1) & ((v120 >> 4) ^ (v120 >> 9));
            v125 = (uint64_t ****)(v122 + 16 * v124);
            v126 = *v125;
            if (*v125 != v120)
            {
              v127 = 1;
              while (v126 != (uint64_t ***)-4096)
              {
                v128 = v124 + v127++;
                v124 = v128 & (v123 - 1);
                v126 = *(uint64_t ****)(v122 + 16 * v124);
                if (v126 == v120)
                {
                  v125 = (uint64_t ****)(v122 + 16 * v124);
                  goto LABEL_128;
                }
              }
              goto LABEL_127;
            }
          }
          else
          {
LABEL_127:
            v125 = (uint64_t ****)(v122 + 16 * v123);
          }
LABEL_128:
          v130 = v125[1];
          v133 = (size_t)*v130;
          v131 = (char *)(v130 + 2);
          v132 = v133;
          goto LABEL_129;
        }
LABEL_151:
        v757 = v6;
        if (v6 >= (unint64_t)v89)
          goto LABEL_218;
        v149 = *v89;
        v150 = v89;
        while (2)
        {
          v151 = v150;
          *(_DWORD *)v6 = v149;
          *v150 = v56;
          v152 = *(_QWORD *)(v6 + 8);
          *(_QWORD *)(v6 + 8) = *((_QWORD *)v150 + 1);
          *((_QWORD *)v150 + 1) = v152;
          v153 = v6;
          while (2)
          {
            while (2)
            {
              while (1)
              {
                v6 = v153 + 16;
                v56 = *(_DWORD *)(v153 + 16);
                if (v56 == v14)
                  break;
                v153 += 16;
                if (v56 <= v14)
                  goto LABEL_188;
              }
              v154 = *(uint64_t ****)(*(_QWORD *)(v153 + 24) + 48);
              if ((*((_BYTE *)v154 + 23) & 0x10) != 0)
              {
                v155 = ***v154;
                v156 = *(_QWORD *)(v155 + 152);
                v157 = *(unsigned int *)(v155 + 168);
                if (!(_DWORD)v157)
                  goto LABEL_164;
                LODWORD(v158) = (v157 - 1) & ((v154 >> 4) ^ (v154 >> 9));
                v159 = (uint64_t ****)(v156 + 16 * v158);
                v160 = *v159;
                if (*v159 != v154)
                {
                  v161 = 1;
                  while (v160 != (uint64_t ***)-4096)
                  {
                    v162 = v158 + v161++;
                    v158 = v162 & (v157 - 1);
                    v160 = *(uint64_t ****)(v156 + 16 * v158);
                    if (v160 == v154)
                    {
                      v159 = (uint64_t ****)(v156 + 16 * v158);
                      goto LABEL_165;
                    }
                  }
LABEL_164:
                  v159 = (uint64_t ****)(v156 + 16 * v157);
                }
LABEL_165:
                v163 = v159[1];
                v166 = (size_t)*v163;
                v164 = (char *)(v163 + 2);
                v165 = v166;
              }
              else
              {
                v165 = 0;
                v164 = &byte_1C871356D;
              }
              v167 = *(uint64_t ****)(v54 + 48);
              if ((*((_BYTE *)v167 + 23) & 0x10) != 0)
              {
                v168 = ***v167;
                v169 = *(_QWORD *)(v168 + 152);
                v170 = *(unsigned int *)(v168 + 168);
                if (!(_DWORD)v170)
                  goto LABEL_173;
                LODWORD(v171) = (v170 - 1) & ((v167 >> 4) ^ (v167 >> 9));
                v172 = (uint64_t ****)(v169 + 16 * v171);
                v173 = *v172;
                if (*v172 != v167)
                {
                  v174 = 1;
                  while (v173 != (uint64_t ***)-4096)
                  {
                    v175 = v171 + v174++;
                    v171 = v175 & (v170 - 1);
                    v173 = *(uint64_t ****)(v169 + 16 * v171);
                    if (v173 == v167)
                    {
                      v172 = (uint64_t ****)(v169 + 16 * v171);
                      goto LABEL_174;
                    }
                  }
LABEL_173:
                  v172 = (uint64_t ****)(v169 + 16 * v170);
                }
LABEL_174:
                v176 = v172[1];
                v179 = (size_t)*v176;
                v177 = (char *)(v176 + 2);
                v178 = v179;
              }
              else
              {
                v178 = 0;
                v177 = &byte_1C871356D;
              }
              if (v178 >= v165)
                v180 = v165;
              else
                v180 = v178;
              if (v180)
              {
                v181 = memcmp(v164, v177, v180);
                if (v181)
                {
                  v153 = v6;
                  if (v181 < 0)
                    goto LABEL_188;
                  continue;
                }
              }
              break;
            }
            v153 = v6;
            if (v165 > v178)
              continue;
            break;
          }
LABEL_188:
          while (2)
          {
            while (2)
            {
              while (1)
              {
                v150 = v151 - 4;
                v149 = *(v151 - 4);
                if (v149 == v14)
                  break;
                v151 -= 4;
                if (v149 > v14)
                  goto LABEL_217;
              }
              v186 = *(uint64_t ****)(*((_QWORD *)v151 - 1) + 48);
              if ((*((_BYTE *)v186 + 23) & 0x10) != 0)
              {
                v187 = ***v186;
                v188 = *(_QWORD *)(v187 + 152);
                v189 = *(unsigned int *)(v187 + 168);
                if (!(_DWORD)v189)
                  goto LABEL_198;
                LODWORD(v190) = (v189 - 1) & ((v186 >> 4) ^ (v186 >> 9));
                v191 = (uint64_t ****)(v188 + 16 * v190);
                v192 = *v191;
                if (*v191 != v186)
                {
                  v193 = 1;
                  while (v192 != (uint64_t ***)-4096)
                  {
                    v194 = v190 + v193++;
                    v190 = v194 & (v189 - 1);
                    v192 = *(uint64_t ****)(v188 + 16 * v190);
                    if (v192 == v186)
                    {
                      v191 = (uint64_t ****)(v188 + 16 * v190);
                      goto LABEL_199;
                    }
                  }
LABEL_198:
                  v191 = (uint64_t ****)(v188 + 16 * v189);
                }
LABEL_199:
                v195 = v191[1];
                v196 = (size_t)*v195;
                v183 = (char *)(v195 + 2);
                v182 = v196;
              }
              else
              {
                v182 = 0;
                v183 = &byte_1C871356D;
              }
              v197 = *(uint64_t ****)(v54 + 48);
              if ((*((_BYTE *)v197 + 23) & 0x10) != 0)
              {
                v198 = ***v197;
                v199 = *(_QWORD *)(v198 + 152);
                v200 = *(unsigned int *)(v198 + 168);
                if (!(_DWORD)v200)
                  goto LABEL_207;
                LODWORD(v201) = (v200 - 1) & ((v197 >> 4) ^ (v197 >> 9));
                v202 = (uint64_t ****)(v199 + 16 * v201);
                v203 = *v202;
                if (*v202 != v197)
                {
                  v204 = 1;
                  while (v203 != (uint64_t ***)-4096)
                  {
                    v205 = v201 + v204++;
                    v201 = v205 & (v200 - 1);
                    v203 = *(uint64_t ****)(v199 + 16 * v201);
                    if (v203 == v197)
                    {
                      v202 = (uint64_t ****)(v199 + 16 * v201);
                      goto LABEL_208;
                    }
                  }
LABEL_207:
                  v202 = (uint64_t ****)(v199 + 16 * v200);
                }
LABEL_208:
                v206 = v202[1];
                v207 = (size_t)*v206;
                v185 = (char *)(v206 + 2);
                v184 = v207;
              }
              else
              {
                v184 = 0;
                v185 = &byte_1C871356D;
              }
              if (v184 >= v182)
                v208 = v182;
              else
                v208 = v184;
              if (v208)
              {
                v209 = memcmp(v183, v185, v208);
                if (v209)
                {
                  v151 -= 4;
                  if ((v209 & 0x80000000) == 0)
                    goto LABEL_217;
                  continue;
                }
              }
              break;
            }
            v151 -= 4;
            if (v182 <= v184)
              continue;
            break;
          }
LABEL_217:
          if (v6 < (unint64_t)v150)
            continue;
          break;
        }
LABEL_218:
        v5 = (char *)v766;
        if (v6 - 16 != v766)
        {
          *(_DWORD *)v766 = *(_DWORD *)(v6 - 16);
          *(_QWORD *)(v766 + 8) = *(_QWORD *)(v6 - 8);
        }
        *(_DWORD *)(v6 - 16) = v14;
        *(_QWORD *)(v6 - 8) = v54;
        a3 = v760;
        if (v757 < (unint64_t)v89)
        {
LABEL_223:
          result = (char *)sub_1C5FBF864(v766, v6 - 16, v760, a4 & 1);
          a4 = 0;
          continue;
        }
        v210 = sub_1C5FC2E98(v766, v6 - 16);
        result = (char *)sub_1C5FC2E98(v6, a2);
        if (!(_DWORD)result)
        {
          if (v210)
            continue;
          goto LABEL_223;
        }
        a2 = v6 - 16;
        if (!v210)
          goto LABEL_2;
        return result;
    }
  }
}

char *sub_1C5FC20B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t ***v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ****v19;
  uint64_t ***v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ***v26;
  size_t v27;
  size_t v28;
  uint64_t ***v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ****v34;
  uint64_t ***v35;
  int v36;
  int v37;
  uint64_t ***v38;
  char *v39;
  size_t v40;
  size_t v41;
  size_t v42;
  BOOL v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t ***v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ****v52;
  uint64_t ***v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t ***v57;
  size_t v58;
  size_t v59;
  uint64_t ***v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t ****v65;
  uint64_t ***v66;
  int v67;
  int v68;
  uint64_t ***v69;
  char *v70;
  size_t v71;
  size_t v72;
  size_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t ***v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t ****v82;
  uint64_t ***v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t ***v87;
  size_t v88;
  size_t v89;
  uint64_t ***v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t ****v95;
  uint64_t ***v96;
  int v97;
  int v98;
  uint64_t ***v99;
  char *v100;
  size_t v101;
  size_t v102;
  size_t v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t ***v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t ****v112;
  uint64_t ***v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t ***v117;
  size_t v118;
  size_t v119;
  uint64_t ***v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t ****v125;
  uint64_t ***v126;
  int v127;
  int v128;
  uint64_t ***v129;
  char *v130;
  size_t v131;
  size_t v132;
  size_t v133;
  uint64_t v134;

  v7 = a3;
  v8 = a2;
  v9 = a1;
  result = sub_1C5FC3454(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *(_DWORD *)a4;
  if (*a5 == *(_DWORD *)a4)
  {
    v13 = *((_QWORD *)a5 + 1);
    v14 = *(uint64_t ****)(v13 + 48);
    v134 = v7;
    if ((*((_BYTE *)v14 + 23) & 0x10) == 0)
    {
      v24 = v8;
      v25 = v9;
      v27 = 0;
      result = &byte_1C871356D;
LABEL_13:
      v23 = *(_QWORD *)(a4 + 8);
      v29 = *(uint64_t ****)(v23 + 48);
      if ((*((_BYTE *)v29 + 23) & 0x10) == 0)
      {
        v40 = 0;
        v39 = &byte_1C871356D;
LABEL_22:
        if (v40 >= v27)
          v42 = v27;
        else
          v42 = v40;
        if (v42 && (result = (char *)memcmp(result, v39, v42), (_DWORD)result))
        {
          v9 = v25;
          v8 = v24;
          v7 = v134;
          if ((result & 0x80000000) != 0)
            return result;
        }
        else
        {
          v43 = v27 > v40;
          v9 = v25;
          v8 = v24;
          v7 = v134;
          if (!v43)
            return result;
        }
        goto LABEL_31;
      }
      v30 = ***v29;
      v31 = *(_QWORD *)(v30 + 152);
      v32 = *(unsigned int *)(v30 + 168);
      if ((_DWORD)v32)
      {
        LODWORD(v33) = (v32 - 1) & ((v29 >> 4) ^ (v29 >> 9));
        v34 = (uint64_t ****)(v31 + 16 * v33);
        v35 = *v34;
        if (*v34 == v29)
        {
LABEL_21:
          v38 = v34[1];
          v41 = (size_t)*v38;
          v39 = (char *)(v38 + 2);
          v40 = v41;
          goto LABEL_22;
        }
        v36 = 1;
        while (v35 != (uint64_t ***)-4096)
        {
          v37 = v33 + v36++;
          v33 = v37 & (v32 - 1);
          v35 = *(uint64_t ****)(v31 + 16 * v33);
          if (v35 == v29)
          {
            v34 = (uint64_t ****)(v31 + 16 * v33);
            goto LABEL_21;
          }
        }
      }
      v34 = (uint64_t ****)(v31 + 16 * v32);
      goto LABEL_21;
    }
    v15 = ***v14;
    v16 = *(_QWORD *)(v15 + 152);
    v17 = *(unsigned int *)(v15 + 168);
    if ((_DWORD)v17)
    {
      LODWORD(v18) = (v17 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      v19 = (uint64_t ****)(v16 + 16 * v18);
      v20 = *v19;
      if (*v19 == v14)
      {
LABEL_12:
        v24 = v8;
        v25 = v9;
        v26 = v19[1];
        v28 = (size_t)*v26;
        result = (char *)(v26 + 2);
        v27 = v28;
        goto LABEL_13;
      }
      v21 = 1;
      while (v20 != (uint64_t ***)-4096)
      {
        v22 = v18 + v21++;
        v18 = v22 & (v17 - 1);
        v20 = *(uint64_t ****)(v16 + 16 * v18);
        if (v20 == v14)
        {
          v19 = (uint64_t ****)(v16 + 16 * v18);
          goto LABEL_12;
        }
      }
    }
    v19 = (uint64_t ****)(v16 + 16 * v17);
    goto LABEL_12;
  }
  if (v11 <= v12)
    return result;
  v23 = *(_QWORD *)(a4 + 8);
  v13 = *((_QWORD *)a5 + 1);
LABEL_31:
  *(_DWORD *)a4 = v11;
  *a5 = v12;
  *(_QWORD *)(a4 + 8) = v13;
  *((_QWORD *)a5 + 1) = v23;
  v44 = *(_DWORD *)a4;
  v45 = *(_DWORD *)v7;
  if (*(_DWORD *)a4 != *(_DWORD *)v7)
  {
    if (v44 <= v45)
      return result;
    v56 = *(_QWORD *)(v7 + 8);
    v46 = *(_QWORD *)(a4 + 8);
    goto LABEL_60;
  }
  v46 = *(_QWORD *)(a4 + 8);
  v47 = *(uint64_t ****)(v46 + 48);
  if ((*((_BYTE *)v47 + 23) & 0x10) != 0)
  {
    v48 = ***v47;
    v49 = *(_QWORD *)(v48 + 152);
    v50 = *(unsigned int *)(v48 + 168);
    if ((_DWORD)v50)
    {
      LODWORD(v51) = (v50 - 1) & ((v47 >> 4) ^ (v47 >> 9));
      v52 = (uint64_t ****)(v49 + 16 * v51);
      v53 = *v52;
      if (*v52 == v47)
      {
LABEL_42:
        v57 = v52[1];
        v59 = (size_t)*v57;
        result = (char *)(v57 + 2);
        v58 = v59;
        goto LABEL_43;
      }
      v54 = 1;
      while (v53 != (uint64_t ***)-4096)
      {
        v55 = v51 + v54++;
        v51 = v55 & (v50 - 1);
        v53 = *(uint64_t ****)(v49 + 16 * v51);
        if (v53 == v47)
        {
          v52 = (uint64_t ****)(v49 + 16 * v51);
          goto LABEL_42;
        }
      }
    }
    v52 = (uint64_t ****)(v49 + 16 * v50);
    goto LABEL_42;
  }
  v58 = 0;
  result = &byte_1C871356D;
LABEL_43:
  v56 = *(_QWORD *)(v7 + 8);
  v60 = *(uint64_t ****)(v56 + 48);
  if ((*((_BYTE *)v60 + 23) & 0x10) != 0)
  {
    v61 = ***v60;
    v62 = *(_QWORD *)(v61 + 152);
    v63 = *(unsigned int *)(v61 + 168);
    if ((_DWORD)v63)
    {
      LODWORD(v64) = (v63 - 1) & ((v60 >> 4) ^ (v60 >> 9));
      v65 = (uint64_t ****)(v62 + 16 * v64);
      v66 = *v65;
      if (*v65 == v60)
      {
LABEL_51:
        v69 = v65[1];
        v72 = (size_t)*v69;
        v70 = (char *)(v69 + 2);
        v71 = v72;
        goto LABEL_52;
      }
      v67 = 1;
      while (v66 != (uint64_t ***)-4096)
      {
        v68 = v64 + v67++;
        v64 = v68 & (v63 - 1);
        v66 = *(uint64_t ****)(v62 + 16 * v64);
        if (v66 == v60)
        {
          v65 = (uint64_t ****)(v62 + 16 * v64);
          goto LABEL_51;
        }
      }
    }
    v65 = (uint64_t ****)(v62 + 16 * v63);
    goto LABEL_51;
  }
  v71 = 0;
  v70 = &byte_1C871356D;
LABEL_52:
  if (v71 >= v58)
    v73 = v58;
  else
    v73 = v71;
  if (v73 && (result = (char *)memcmp(result, v70, v73), (_DWORD)result))
  {
    if ((result & 0x80000000) != 0)
      return result;
  }
  else if (v58 <= v71)
  {
    return result;
  }
LABEL_60:
  *(_DWORD *)v7 = v44;
  *(_DWORD *)a4 = v45;
  *(_QWORD *)(v7 + 8) = v46;
  *(_QWORD *)(a4 + 8) = v56;
  v74 = *(_DWORD *)v7;
  v75 = *(_DWORD *)v8;
  if (*(_DWORD *)v7 != *(_DWORD *)v8)
  {
    if (v74 <= v75)
      return result;
    v86 = *(_QWORD *)(v8 + 8);
    v76 = *(_QWORD *)(v7 + 8);
    goto LABEL_89;
  }
  v76 = *(_QWORD *)(v7 + 8);
  v77 = *(uint64_t ****)(v76 + 48);
  if ((*((_BYTE *)v77 + 23) & 0x10) != 0)
  {
    v78 = ***v77;
    v79 = *(_QWORD *)(v78 + 152);
    v80 = *(unsigned int *)(v78 + 168);
    if ((_DWORD)v80)
    {
      LODWORD(v81) = (v80 - 1) & ((v77 >> 4) ^ (v77 >> 9));
      v82 = (uint64_t ****)(v79 + 16 * v81);
      v83 = *v82;
      if (*v82 == v77)
      {
LABEL_71:
        v87 = v82[1];
        v89 = (size_t)*v87;
        result = (char *)(v87 + 2);
        v88 = v89;
        goto LABEL_72;
      }
      v84 = 1;
      while (v83 != (uint64_t ***)-4096)
      {
        v85 = v81 + v84++;
        v81 = v85 & (v80 - 1);
        v83 = *(uint64_t ****)(v79 + 16 * v81);
        if (v83 == v77)
        {
          v82 = (uint64_t ****)(v79 + 16 * v81);
          goto LABEL_71;
        }
      }
    }
    v82 = (uint64_t ****)(v79 + 16 * v80);
    goto LABEL_71;
  }
  v88 = 0;
  result = &byte_1C871356D;
LABEL_72:
  v86 = *(_QWORD *)(v8 + 8);
  v90 = *(uint64_t ****)(v86 + 48);
  if ((*((_BYTE *)v90 + 23) & 0x10) != 0)
  {
    v91 = ***v90;
    v92 = *(_QWORD *)(v91 + 152);
    v93 = *(unsigned int *)(v91 + 168);
    if ((_DWORD)v93)
    {
      LODWORD(v94) = (v93 - 1) & ((v90 >> 4) ^ (v90 >> 9));
      v95 = (uint64_t ****)(v92 + 16 * v94);
      v96 = *v95;
      if (*v95 == v90)
      {
LABEL_80:
        v99 = v95[1];
        v102 = (size_t)*v99;
        v100 = (char *)(v99 + 2);
        v101 = v102;
        goto LABEL_81;
      }
      v97 = 1;
      while (v96 != (uint64_t ***)-4096)
      {
        v98 = v94 + v97++;
        v94 = v98 & (v93 - 1);
        v96 = *(uint64_t ****)(v92 + 16 * v94);
        if (v96 == v90)
        {
          v95 = (uint64_t ****)(v92 + 16 * v94);
          goto LABEL_80;
        }
      }
    }
    v95 = (uint64_t ****)(v92 + 16 * v93);
    goto LABEL_80;
  }
  v101 = 0;
  v100 = &byte_1C871356D;
LABEL_81:
  if (v101 >= v88)
    v103 = v88;
  else
    v103 = v101;
  if (v103 && (result = (char *)memcmp(result, v100, v103), (_DWORD)result))
  {
    if ((result & 0x80000000) != 0)
      return result;
  }
  else if (v88 <= v101)
  {
    return result;
  }
LABEL_89:
  *(_DWORD *)v8 = v74;
  *(_DWORD *)v7 = v75;
  *(_QWORD *)(v8 + 8) = v76;
  *(_QWORD *)(v7 + 8) = v86;
  v104 = *(_DWORD *)v8;
  v105 = *(_DWORD *)v9;
  if (*(_DWORD *)v8 != *(_DWORD *)v9)
  {
    if (v104 <= v105)
      return result;
    v116 = *(_QWORD *)(v9 + 8);
    v106 = *(_QWORD *)(v8 + 8);
    goto LABEL_120;
  }
  v106 = *(_QWORD *)(v8 + 8);
  v107 = *(uint64_t ****)(v106 + 48);
  if ((*((_BYTE *)v107 + 23) & 0x10) != 0)
  {
    v108 = ***v107;
    v109 = *(_QWORD *)(v108 + 152);
    v110 = *(unsigned int *)(v108 + 168);
    if ((_DWORD)v110)
    {
      LODWORD(v111) = (v110 - 1) & ((v107 >> 4) ^ (v107 >> 9));
      v112 = (uint64_t ****)(v109 + 16 * v111);
      v113 = *v112;
      if (*v112 == v107)
      {
LABEL_102:
        v117 = v112[1];
        v119 = (size_t)*v117;
        result = (char *)(v117 + 2);
        v118 = v119;
        goto LABEL_103;
      }
      v114 = 1;
      while (v113 != (uint64_t ***)-4096)
      {
        v115 = v111 + v114++;
        v111 = v115 & (v110 - 1);
        v113 = *(uint64_t ****)(v109 + 16 * v111);
        if (v113 == v107)
        {
          v112 = (uint64_t ****)(v109 + 16 * v111);
          goto LABEL_102;
        }
      }
    }
    v112 = (uint64_t ****)(v109 + 16 * v110);
    goto LABEL_102;
  }
  v118 = 0;
  result = &byte_1C871356D;
LABEL_103:
  v116 = *(_QWORD *)(v9 + 8);
  v120 = *(uint64_t ****)(v116 + 48);
  if ((*((_BYTE *)v120 + 23) & 0x10) != 0)
  {
    v121 = ***v120;
    v122 = *(_QWORD *)(v121 + 152);
    v123 = *(unsigned int *)(v121 + 168);
    if ((_DWORD)v123)
    {
      LODWORD(v124) = (v123 - 1) & ((v120 >> 4) ^ (v120 >> 9));
      v125 = (uint64_t ****)(v122 + 16 * v124);
      v126 = *v125;
      if (*v125 == v120)
      {
LABEL_111:
        v129 = v125[1];
        v132 = (size_t)*v129;
        v130 = (char *)(v129 + 2);
        v131 = v132;
        goto LABEL_112;
      }
      v127 = 1;
      while (v126 != (uint64_t ***)-4096)
      {
        v128 = v124 + v127++;
        v124 = v128 & (v123 - 1);
        v126 = *(uint64_t ****)(v122 + 16 * v124);
        if (v126 == v120)
        {
          v125 = (uint64_t ****)(v122 + 16 * v124);
          goto LABEL_111;
        }
      }
    }
    v125 = (uint64_t ****)(v122 + 16 * v123);
    goto LABEL_111;
  }
  v131 = 0;
  v130 = &byte_1C871356D;
LABEL_112:
  if (v131 >= v118)
    v133 = v118;
  else
    v133 = v131;
  if (v133 && (result = (char *)memcmp(result, v130, v133), (_DWORD)result))
  {
    if ((result & 0x80000000) != 0)
      return result;
  }
  else if (v118 <= v131)
  {
    return result;
  }
LABEL_120:
  *(_DWORD *)v9 = v104;
  *(_DWORD *)v8 = v105;
  *(_QWORD *)(v9 + 8) = v106;
  *(_QWORD *)(v8 + 8) = v116;
  return result;
}

char *sub_1C5FC2728(char *result, unsigned int *a2, unsigned int *a3)
{
  char *v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ****v14;
  uint64_t ***v15;
  int v16;
  int v17;
  uint64_t ***v18;
  size_t v19;
  size_t v20;
  uint64_t ***v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ****v26;
  uint64_t ***v27;
  int v28;
  int v29;
  uint64_t ***v30;
  char *v31;
  size_t v32;
  size_t v33;
  size_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t ***v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ****v42;
  uint64_t ***v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t ***v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ****v52;
  uint64_t ***v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t ***v58;
  size_t v59;
  size_t v60;
  uint64_t ***v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t ****v66;
  uint64_t ***v67;
  int v68;
  int v69;
  uint64_t ***v70;
  size_t v71;
  size_t v72;
  uint64_t ***v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t ****v78;
  uint64_t ***v79;
  int v80;
  int v81;
  uint64_t ***v82;
  char *v83;
  size_t v84;
  size_t v85;
  size_t v86;
  int *v87;
  unsigned int v88;
  unsigned int v89;
  BOOL v90;
  uint64_t ***v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t ****v96;
  uint64_t ***v97;
  int v98;
  int v99;
  uint64_t ***v100;
  char *v101;
  size_t v102;
  size_t v103;
  size_t v104;
  uint64_t v105;
  uint64_t *v106;
  unsigned int v107;
  BOOL v108;
  uint64_t ***v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t ****v114;
  uint64_t ***v115;
  int v116;
  int v117;
  uint64_t ***v118;
  size_t v119;
  size_t v120;
  uint64_t ***v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t ****v126;
  uint64_t ***v127;
  int v128;
  int v129;
  uint64_t ***v130;
  size_t v131;
  size_t v132;
  uint64_t ***v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t ****v138;
  uint64_t ***v139;
  int v140;
  int v141;
  uint64_t ***v142;
  char *v143;
  size_t v144;
  size_t v145;
  size_t v146;
  uint64_t ***v147;
  char *v148;
  size_t v149;
  size_t v150;
  size_t v151;
  uint64_t v152;

  v5 = result;
  v6 = *a2;
  v7 = *(_DWORD *)result;
  v8 = *a2 > *(_DWORD *)result;
  if (*a2 != *(_DWORD *)result)
    goto LABEL_35;
  v9 = *(uint64_t ****)(*((_QWORD *)a2 + 1) + 48);
  if ((*((_BYTE *)v9 + 23) & 0x10) != 0)
  {
    v10 = ***v9;
    v11 = *(_QWORD *)(v10 + 152);
    v12 = *(unsigned int *)(v10 + 168);
    if ((_DWORD)v12)
    {
      LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v14 = (uint64_t ****)(v11 + 16 * v13);
      v15 = *v14;
      if (*v14 == v9)
      {
LABEL_10:
        v18 = v14[1];
        v20 = (size_t)*v18;
        result = (char *)(v18 + 2);
        v19 = v20;
        goto LABEL_11;
      }
      v16 = 1;
      while (v15 != (uint64_t ***)-4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(uint64_t ****)(v11 + 16 * v13);
        if (v15 == v9)
        {
          v14 = (uint64_t ****)(v11 + 16 * v13);
          goto LABEL_10;
        }
      }
    }
    v14 = (uint64_t ****)(v11 + 16 * v12);
    goto LABEL_10;
  }
  v19 = 0;
  result = &byte_1C871356D;
LABEL_11:
  v21 = *(uint64_t ****)(*((_QWORD *)v5 + 1) + 48);
  if ((*((_BYTE *)v21 + 23) & 0x10) == 0)
  {
    v32 = 0;
    v31 = &byte_1C871356D;
    goto LABEL_20;
  }
  v22 = ***v21;
  v23 = *(_QWORD *)(v22 + 152);
  v24 = *(unsigned int *)(v22 + 168);
  if (!(_DWORD)v24)
    goto LABEL_18;
  LODWORD(v25) = (v24 - 1) & ((v21 >> 4) ^ (v21 >> 9));
  v26 = (uint64_t ****)(v23 + 16 * v25);
  v27 = *v26;
  if (*v26 != v21)
  {
    v28 = 1;
    while (v27 != (uint64_t ***)-4096)
    {
      v29 = v25 + v28++;
      v25 = v29 & (v24 - 1);
      v27 = *(uint64_t ****)(v23 + 16 * v25);
      if (v27 == v21)
      {
        v26 = (uint64_t ****)(v23 + 16 * v25);
        goto LABEL_19;
      }
    }
LABEL_18:
    v26 = (uint64_t ****)(v23 + 16 * v24);
  }
LABEL_19:
  v30 = v26[1];
  v33 = (size_t)*v30;
  v31 = (char *)(v30 + 2);
  v32 = v33;
LABEL_20:
  if (v32 >= v19)
    v34 = v19;
  else
    v34 = v32;
  if (v34)
  {
    result = (char *)memcmp(result, v31, v34);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) != 0)
        goto LABEL_26;
LABEL_37:
      v46 = *a3;
      if (*a3 != v6)
      {
        if (v46 <= v6)
        {
          v57 = *((_QWORD *)a2 + 1);
          goto LABEL_93;
        }
        goto LABEL_102;
      }
      v47 = *(uint64_t ****)(*((_QWORD *)a3 + 1) + 48);
      if ((*((_BYTE *)v47 + 23) & 0x10) == 0)
      {
        v71 = 0;
        result = &byte_1C871356D;
LABEL_60:
        v57 = *((_QWORD *)a2 + 1);
        v73 = *(uint64_t ****)(v57 + 48);
        if ((*((_BYTE *)v73 + 23) & 0x10) == 0)
        {
          v102 = 0;
          v101 = &byte_1C871356D;
LABEL_87:
          if (v102 >= v71)
            v104 = v71;
          else
            v104 = v102;
          if (v104 && (result = (char *)memcmp(result, v101, v104), (_DWORD)result))
          {
            if ((result & 0x80000000) != 0)
              goto LABEL_93;
          }
          else if (v71 <= v102)
          {
LABEL_93:
            *(_DWORD *)v5 = v6;
            *a2 = v7;
            v105 = *((_QWORD *)v5 + 1);
            *((_QWORD *)v5 + 1) = v57;
            *((_QWORD *)a2 + 1) = v105;
            v106 = (uint64_t *)(a2 + 2);
            v107 = *a3;
            v108 = *a3 > v7;
            if (*a3 != v7)
              goto LABEL_144;
            v109 = *(uint64_t ****)(*((_QWORD *)a3 + 1) + 48);
            if ((*((_BYTE *)v109 + 23) & 0x10) == 0)
            {
              v131 = 0;
              result = &byte_1C871356D;
LABEL_114:
              v133 = *(uint64_t ****)(v105 + 48);
              if ((*((_BYTE *)v133 + 23) & 0x10) == 0)
              {
                v149 = 0;
                v148 = &byte_1C871356D;
                goto LABEL_136;
              }
              v134 = ***v133;
              v135 = *(_QWORD *)(v134 + 152);
              v136 = *(unsigned int *)(v134 + 168);
              if ((_DWORD)v136)
              {
                LODWORD(v137) = (v136 - 1) & ((v133 >> 4) ^ (v133 >> 9));
                v138 = (uint64_t ****)(v135 + 16 * v137);
                v139 = *v138;
                if (*v138 == v133)
                {
LABEL_135:
                  v147 = v138[1];
                  v150 = (size_t)*v147;
                  v148 = (char *)(v147 + 2);
                  v149 = v150;
LABEL_136:
                  if (v149 >= v131)
                    v151 = v131;
                  else
                    v151 = v149;
                  if (v151)
                  {
                    result = (char *)memcmp(result, v148, v151);
                    if ((_DWORD)result)
                    {
                      if ((result & 0x80000000) != 0)
                        return result;
LABEL_146:
                      *a2 = v107;
                      goto LABEL_147;
                    }
                  }
                  v108 = v131 > v149;
LABEL_144:
                  if (!v108)
                    return result;
                  goto LABEL_146;
                }
                v140 = 1;
                while (v139 != (uint64_t ***)-4096)
                {
                  v141 = v137 + v140++;
                  v137 = v141 & (v136 - 1);
                  v139 = *(uint64_t ****)(v135 + 16 * v137);
                  if (v139 == v133)
                  {
                    v138 = (uint64_t ****)(v135 + 16 * v137);
                    goto LABEL_135;
                  }
                }
              }
              v138 = (uint64_t ****)(v135 + 16 * v136);
              goto LABEL_135;
            }
            v110 = ***v109;
            v111 = *(_QWORD *)(v110 + 152);
            v112 = *(unsigned int *)(v110 + 168);
            if ((_DWORD)v112)
            {
              LODWORD(v113) = (v112 - 1) & ((v109 >> 4) ^ (v109 >> 9));
              v114 = (uint64_t ****)(v111 + 16 * v113);
              v115 = *v114;
              if (*v114 == v109)
              {
LABEL_113:
                v130 = v114[1];
                v132 = (size_t)*v130;
                result = (char *)(v130 + 2);
                v131 = v132;
                goto LABEL_114;
              }
              v116 = 1;
              while (v115 != (uint64_t ***)-4096)
              {
                v117 = v113 + v116++;
                v113 = v117 & (v112 - 1);
                v115 = *(uint64_t ****)(v111 + 16 * v113);
                if (v115 == v109)
                {
                  v114 = (uint64_t ****)(v111 + 16 * v113);
                  goto LABEL_113;
                }
              }
            }
            v114 = (uint64_t ****)(v111 + 16 * v112);
            goto LABEL_113;
          }
LABEL_102:
          *(_DWORD *)v5 = v46;
          v106 = (uint64_t *)(v5 + 8);
LABEL_147:
          *a3 = v7;
          v87 = (int *)(a3 + 2);
          goto LABEL_148;
        }
        v74 = ***v73;
        v75 = *(_QWORD *)(v74 + 152);
        v76 = *(unsigned int *)(v74 + 168);
        if ((_DWORD)v76)
        {
          LODWORD(v77) = (v76 - 1) & ((v73 >> 4) ^ (v73 >> 9));
          v78 = (uint64_t ****)(v75 + 16 * v77);
          v79 = *v78;
          if (*v78 == v73)
          {
LABEL_86:
            v100 = v78[1];
            v103 = (size_t)*v100;
            v101 = (char *)(v100 + 2);
            v102 = v103;
            goto LABEL_87;
          }
          v80 = 1;
          while (v79 != (uint64_t ***)-4096)
          {
            v81 = v77 + v80++;
            v77 = v81 & (v76 - 1);
            v79 = *(uint64_t ****)(v75 + 16 * v77);
            if (v79 == v73)
            {
              v78 = (uint64_t ****)(v75 + 16 * v77);
              goto LABEL_86;
            }
          }
        }
        v78 = (uint64_t ****)(v75 + 16 * v76);
        goto LABEL_86;
      }
      v48 = ***v47;
      v49 = *(_QWORD *)(v48 + 152);
      v50 = *(unsigned int *)(v48 + 168);
      if ((_DWORD)v50)
      {
        LODWORD(v51) = (v50 - 1) & ((v47 >> 4) ^ (v47 >> 9));
        v52 = (uint64_t ****)(v49 + 16 * v51);
        v53 = *v52;
        if (*v52 == v47)
        {
LABEL_59:
          v70 = v52[1];
          v72 = (size_t)*v70;
          result = (char *)(v70 + 2);
          v71 = v72;
          goto LABEL_60;
        }
        v54 = 1;
        while (v53 != (uint64_t ***)-4096)
        {
          v55 = v51 + v54++;
          v51 = v55 & (v50 - 1);
          v53 = *(uint64_t ****)(v49 + 16 * v51);
          if (v53 == v47)
          {
            v52 = (uint64_t ****)(v49 + 16 * v51);
            goto LABEL_59;
          }
        }
      }
      v52 = (uint64_t ****)(v49 + 16 * v50);
      goto LABEL_59;
    }
  }
  v8 = v19 > v32;
LABEL_35:
  if (v8)
    goto LABEL_37;
LABEL_26:
  v35 = *a3;
  if (*a3 != v6)
  {
    if (v35 <= v6)
      return result;
    v56 = *((_QWORD *)a2 + 1);
    v36 = *((_QWORD *)a3 + 1);
    goto LABEL_77;
  }
  v36 = *((_QWORD *)a3 + 1);
  v37 = *(uint64_t ****)(v36 + 48);
  if ((*((_BYTE *)v37 + 23) & 0x10) != 0)
  {
    v38 = ***v37;
    v39 = *(_QWORD *)(v38 + 152);
    v40 = *(unsigned int *)(v38 + 168);
    if ((_DWORD)v40)
    {
      LODWORD(v41) = (v40 - 1) & ((v37 >> 4) ^ (v37 >> 9));
      v42 = (uint64_t ****)(v39 + 16 * v41);
      v43 = *v42;
      if (*v42 == v37)
      {
LABEL_50:
        v58 = v42[1];
        v60 = (size_t)*v58;
        result = (char *)(v58 + 2);
        v59 = v60;
        goto LABEL_51;
      }
      v44 = 1;
      while (v43 != (uint64_t ***)-4096)
      {
        v45 = v41 + v44++;
        v41 = v45 & (v40 - 1);
        v43 = *(uint64_t ****)(v39 + 16 * v41);
        if (v43 == v37)
        {
          v42 = (uint64_t ****)(v39 + 16 * v41);
          goto LABEL_50;
        }
      }
    }
    v42 = (uint64_t ****)(v39 + 16 * v40);
    goto LABEL_50;
  }
  v59 = 0;
  result = &byte_1C871356D;
LABEL_51:
  v56 = *((_QWORD *)a2 + 1);
  v61 = *(uint64_t ****)(v56 + 48);
  if ((*((_BYTE *)v61 + 23) & 0x10) != 0)
  {
    v62 = ***v61;
    v63 = *(_QWORD *)(v62 + 152);
    v64 = *(unsigned int *)(v62 + 168);
    if ((_DWORD)v64)
    {
      LODWORD(v65) = (v64 - 1) & ((v61 >> 4) ^ (v61 >> 9));
      v66 = (uint64_t ****)(v63 + 16 * v65);
      v67 = *v66;
      if (*v66 == v61)
      {
LABEL_68:
        v82 = v66[1];
        v85 = (size_t)*v82;
        v83 = (char *)(v82 + 2);
        v84 = v85;
        goto LABEL_69;
      }
      v68 = 1;
      while (v67 != (uint64_t ***)-4096)
      {
        v69 = v65 + v68++;
        v65 = v69 & (v64 - 1);
        v67 = *(uint64_t ****)(v63 + 16 * v65);
        if (v67 == v61)
        {
          v66 = (uint64_t ****)(v63 + 16 * v65);
          goto LABEL_68;
        }
      }
    }
    v66 = (uint64_t ****)(v63 + 16 * v64);
    goto LABEL_68;
  }
  v84 = 0;
  v83 = &byte_1C871356D;
LABEL_69:
  if (v84 >= v59)
    v86 = v59;
  else
    v86 = v84;
  if (v86 && (result = (char *)memcmp(result, v83, v86), (_DWORD)result))
  {
    if ((result & 0x80000000) != 0)
      return result;
  }
  else if (v59 <= v84)
  {
    return result;
  }
LABEL_77:
  *a2 = v35;
  *a3 = v6;
  *((_QWORD *)a2 + 1) = v36;
  v87 = (int *)(a2 + 2);
  *((_QWORD *)a3 + 1) = v56;
  v88 = *a2;
  v89 = *(_DWORD *)v5;
  v90 = *a2 > *(_DWORD *)v5;
  if (*a2 != *(_DWORD *)v5)
    goto LABEL_131;
  v91 = *(uint64_t ****)(*(_QWORD *)v87 + 48);
  if ((*((_BYTE *)v91 + 23) & 0x10) != 0)
  {
    v92 = ***v91;
    v93 = *(_QWORD *)(v92 + 152);
    v94 = *(unsigned int *)(v92 + 168);
    if ((_DWORD)v94)
    {
      LODWORD(v95) = (v94 - 1) & ((v91 >> 4) ^ (v91 >> 9));
      v96 = (uint64_t ****)(v93 + 16 * v95);
      v97 = *v96;
      if (*v96 == v91)
      {
LABEL_104:
        v118 = v96[1];
        v120 = (size_t)*v118;
        result = (char *)(v118 + 2);
        v119 = v120;
        goto LABEL_105;
      }
      v98 = 1;
      while (v97 != (uint64_t ***)-4096)
      {
        v99 = v95 + v98++;
        v95 = v99 & (v94 - 1);
        v97 = *(uint64_t ****)(v93 + 16 * v95);
        if (v97 == v91)
        {
          v96 = (uint64_t ****)(v93 + 16 * v95);
          goto LABEL_104;
        }
      }
    }
    v96 = (uint64_t ****)(v93 + 16 * v94);
    goto LABEL_104;
  }
  v119 = 0;
  result = &byte_1C871356D;
LABEL_105:
  v121 = *(uint64_t ****)(*((_QWORD *)v5 + 1) + 48);
  if ((*((_BYTE *)v121 + 23) & 0x10) != 0)
  {
    v122 = ***v121;
    v123 = *(_QWORD *)(v122 + 152);
    v124 = *(unsigned int *)(v122 + 168);
    if ((_DWORD)v124)
    {
      LODWORD(v125) = (v124 - 1) & ((v121 >> 4) ^ (v121 >> 9));
      v126 = (uint64_t ****)(v123 + 16 * v125);
      v127 = *v126;
      if (*v126 == v121)
      {
LABEL_122:
        v142 = v126[1];
        v145 = (size_t)*v142;
        v143 = (char *)(v142 + 2);
        v144 = v145;
        goto LABEL_123;
      }
      v128 = 1;
      while (v127 != (uint64_t ***)-4096)
      {
        v129 = v125 + v128++;
        v125 = v129 & (v124 - 1);
        v127 = *(uint64_t ****)(v123 + 16 * v125);
        if (v127 == v121)
        {
          v126 = (uint64_t ****)(v123 + 16 * v125);
          goto LABEL_122;
        }
      }
    }
    v126 = (uint64_t ****)(v123 + 16 * v124);
    goto LABEL_122;
  }
  v144 = 0;
  v143 = &byte_1C871356D;
LABEL_123:
  if (v144 >= v119)
    v146 = v119;
  else
    v146 = v144;
  if (!v146 || (result = (char *)memcmp(result, v143, v146), !(_DWORD)result))
  {
    v90 = v119 > v144;
LABEL_131:
    if (!v90)
      return result;
    goto LABEL_133;
  }
  if ((result & 0x80000000) != 0)
    return result;
LABEL_133:
  *(_DWORD *)v5 = v88;
  v106 = (uint64_t *)(v5 + 8);
  *a2 = v89;
LABEL_148:
  v152 = *v106;
  *v106 = *(_QWORD *)v87;
  *(_QWORD *)v87 = v152;
  return result;
}

BOOL sub_1C5FC2E98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ****v14;
  uint64_t ***v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ****v28;
  uint64_t ***v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t ***v33;
  char *v34;
  size_t v35;
  size_t v36;
  uint64_t ***v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ****v42;
  uint64_t ***v43;
  int v44;
  int v45;
  uint64_t ***v46;
  char *v47;
  size_t v48;
  size_t v49;
  size_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  uint64_t ***v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t ****v62;
  uint64_t ***v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t ***v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t ***v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ****v76;
  uint64_t ***v77;
  int v78;
  int v79;
  uint64_t ***v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  size_t v84;
  int v85;
  uint64_t v86;
  uint64_t ***v87;
  char *v88;
  size_t v89;
  size_t v90;
  uint64_t ***v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t ****v96;
  uint64_t ***v97;
  int v98;
  int v99;
  uint64_t ***v100;
  char *v101;
  size_t v102;
  size_t v103;
  size_t v104;
  int v105;
  uint64_t v106;
  int v107;

  v2 = a2;
  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 16);
      v7 = *(_DWORD *)a1;
      if (v6 == *(_DWORD *)a1)
      {
        v8 = *(_QWORD *)(a2 - 8);
        v9 = *(uint64_t ****)(v8 + 48);
        if ((*((_BYTE *)v9 + 23) & 0x10) != 0)
        {
          v10 = ***v9;
          v11 = *(_QWORD *)(v10 + 152);
          v12 = *(unsigned int *)(v10 + 168);
          if ((_DWORD)v12)
          {
            LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
            v14 = (uint64_t ****)(v11 + 16 * v13);
            v15 = *v14;
            if (*v14 != v9)
            {
              v16 = 1;
              do
              {
                if (v15 == (uint64_t ***)-4096)
                  goto LABEL_91;
                v17 = v13 + v16++;
                v13 = v17 & (v12 - 1);
                v15 = *(uint64_t ****)(v11 + 16 * v13);
              }
              while (v15 != v9);
              v14 = (uint64_t ****)(v11 + 16 * v13);
            }
          }
          else
          {
LABEL_91:
            v14 = (uint64_t ****)(v11 + 16 * v12);
          }
          v87 = v14[1];
          v90 = (size_t)*v87;
          v88 = (char *)(v87 + 2);
          v89 = v90;
        }
        else
        {
          v89 = 0;
          v88 = &byte_1C871356D;
        }
        v86 = *(_QWORD *)(a1 + 8);
        v91 = *(uint64_t ****)(v86 + 48);
        if ((*((_BYTE *)v91 + 23) & 0x10) != 0)
        {
          v92 = ***v91;
          v93 = *(_QWORD *)(v92 + 152);
          v94 = *(unsigned int *)(v92 + 168);
          if ((_DWORD)v94)
          {
            LODWORD(v95) = (v94 - 1) & ((v91 >> 4) ^ (v91 >> 9));
            v96 = (uint64_t ****)(v93 + 16 * v95);
            v97 = *v96;
            if (*v96 != v91)
            {
              v98 = 1;
              do
              {
                if (v97 == (uint64_t ***)-4096)
                  goto LABEL_100;
                v99 = v95 + v98++;
                v95 = v99 & (v94 - 1);
                v97 = *(uint64_t ****)(v93 + 16 * v95);
              }
              while (v97 != v91);
              v96 = (uint64_t ****)(v93 + 16 * v95);
            }
          }
          else
          {
LABEL_100:
            v96 = (uint64_t ****)(v93 + 16 * v94);
          }
          v100 = v96[1];
          v103 = (size_t)*v100;
          v101 = (char *)(v100 + 2);
          v102 = v103;
        }
        else
        {
          v102 = 0;
          v101 = &byte_1C871356D;
        }
        if (v102 >= v89)
          v104 = v89;
        else
          v104 = v102;
        if (v104 && (v105 = memcmp(v88, v101, v104)) != 0)
        {
          if (v105 < 0)
            return 1;
        }
        else if (v89 <= v102)
        {
          return 1;
        }
        goto LABEL_110;
      }
      if (v6 <= v7)
        return result;
      v86 = *(_QWORD *)(a1 + 8);
      v8 = *(_QWORD *)(a2 - 8);
LABEL_110:
      *(_DWORD *)a1 = v6;
      *(_DWORD *)(v2 - 16) = v7;
      *(_QWORD *)(a1 + 8) = v8;
      result = 1;
      *(_QWORD *)(v2 - 8) = v86;
      return result;
    case 3:
      sub_1C5FC2728((char *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a2 - 16));
      return 1;
    case 4:
      sub_1C5FC3454(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_1C5FC20B4(a1, a1 + 16, a1 + 32, a1 + 48, (unsigned int *)(a2 - 16));
      return 1;
    default:
      v18 = a1 + 32;
      sub_1C5FC2728((char *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32));
      v19 = a1 + 48;
      if (a1 + 48 == v2)
        return 1;
      v107 = 0;
      v106 = v2;
      break;
  }
  do
  {
    v20 = *(_DWORD *)v19;
    v21 = *(_DWORD *)v18;
    if (*(_DWORD *)v19 == *(_DWORD *)v18)
    {
      v22 = *(_QWORD *)(v19 + 8);
      v23 = *(uint64_t ****)(v22 + 48);
      if ((*((_BYTE *)v23 + 23) & 0x10) == 0)
      {
        v35 = 0;
        v34 = &byte_1C871356D;
LABEL_24:
        v32 = *(_QWORD *)(v18 + 8);
        v37 = *(uint64_t ****)(v32 + 48);
        if ((*((_BYTE *)v37 + 23) & 0x10) == 0)
        {
          v48 = 0;
          v47 = &byte_1C871356D;
LABEL_33:
          if (v48 >= v35)
            v50 = v35;
          else
            v50 = v48;
          if (v50 && (v51 = memcmp(v34, v47, v50)) != 0)
          {
            if (v51 < 0)
              goto LABEL_39;
          }
          else if (v35 <= v48)
          {
LABEL_39:
            v2 = v106;
            goto LABEL_79;
          }
          goto LABEL_41;
        }
        v38 = ***v37;
        v39 = *(_QWORD *)(v38 + 152);
        v40 = *(unsigned int *)(v38 + 168);
        if ((_DWORD)v40)
        {
          LODWORD(v41) = (v40 - 1) & ((v37 >> 4) ^ (v37 >> 9));
          v42 = (uint64_t ****)(v39 + 16 * v41);
          v43 = *v42;
          if (*v42 == v37)
          {
LABEL_32:
            v46 = v42[1];
            v49 = (size_t)*v46;
            v47 = (char *)(v46 + 2);
            v48 = v49;
            goto LABEL_33;
          }
          v44 = 1;
          while (v43 != (uint64_t ***)-4096)
          {
            v45 = v41 + v44++;
            v41 = v45 & (v40 - 1);
            v43 = *(uint64_t ****)(v39 + 16 * v41);
            if (v43 == v37)
            {
              v42 = (uint64_t ****)(v39 + 16 * v41);
              goto LABEL_32;
            }
          }
        }
        v42 = (uint64_t ****)(v39 + 16 * v40);
        goto LABEL_32;
      }
      v24 = ***v23;
      v25 = *(_QWORD *)(v24 + 152);
      v26 = *(unsigned int *)(v24 + 168);
      if ((_DWORD)v26)
      {
        LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
        v28 = (uint64_t ****)(v25 + 16 * v27);
        v29 = *v28;
        if (*v28 == v23)
        {
LABEL_23:
          v33 = v28[1];
          v36 = (size_t)*v33;
          v34 = (char *)(v33 + 2);
          v35 = v36;
          goto LABEL_24;
        }
        v30 = 1;
        while (v29 != (uint64_t ***)-4096)
        {
          v31 = v27 + v30++;
          v27 = v31 & (v26 - 1);
          v29 = *(uint64_t ****)(v25 + 16 * v27);
          if (v29 == v23)
          {
            v28 = (uint64_t ****)(v25 + 16 * v27);
            goto LABEL_23;
          }
        }
      }
      v28 = (uint64_t ****)(v25 + 16 * v26);
      goto LABEL_23;
    }
    if (v20 <= v21)
      goto LABEL_79;
    v22 = *(_QWORD *)(v19 + 8);
    v32 = *(_QWORD *)(v18 + 8);
LABEL_41:
    *(_DWORD *)v19 = v21;
    *(_QWORD *)(v19 + 8) = v32;
    v52 = a1;
    if (v18 == a1)
      goto LABEL_78;
    v53 = v18;
    while (1)
    {
      v55 = *(_DWORD *)(v53 - 16);
      v53 -= 16;
      v54 = v55;
      v56 = v20 > v55;
      if (v20 != v55)
      {
        if (!v56)
          goto LABEL_77;
        v66 = *(_QWORD *)(v18 - 8);
        goto LABEL_73;
      }
      v57 = *(uint64_t ****)(v22 + 48);
      if ((*((_BYTE *)v57 + 23) & 0x10) != 0)
      {
        v58 = ***v57;
        v59 = *(_QWORD *)(v58 + 152);
        v60 = *(unsigned int *)(v58 + 168);
        if (!(_DWORD)v60)
          goto LABEL_54;
        LODWORD(v61) = (v60 - 1) & ((v57 >> 4) ^ (v57 >> 9));
        v62 = (uint64_t ****)(v59 + 16 * v61);
        v63 = *v62;
        if (*v62 != v57)
        {
          v64 = 1;
          while (v63 != (uint64_t ***)-4096)
          {
            v65 = v61 + v64++;
            v61 = v65 & (v60 - 1);
            v63 = *(uint64_t ****)(v59 + 16 * v61);
            if (v63 == v57)
            {
              v62 = (uint64_t ****)(v59 + 16 * v61);
              goto LABEL_55;
            }
          }
LABEL_54:
          v62 = (uint64_t ****)(v59 + 16 * v60);
        }
LABEL_55:
        v67 = v62[1];
        v70 = (unint64_t)*v67;
        v68 = (char *)(v67 + 2);
        v69 = v70;
        goto LABEL_56;
      }
      v69 = 0;
      v68 = &byte_1C871356D;
LABEL_56:
      v66 = *(_QWORD *)(v18 - 8);
      v71 = *(uint64_t ****)(v66 + 48);
      if ((*((_BYTE *)v71 + 23) & 0x10) != 0)
      {
        v72 = ***v71;
        v73 = *(_QWORD *)(v72 + 152);
        v74 = *(unsigned int *)(v72 + 168);
        if ((_DWORD)v74)
        {
          LODWORD(v75) = (v74 - 1) & ((v71 >> 4) ^ (v71 >> 9));
          v76 = (uint64_t ****)(v73 + 16 * v75);
          v77 = *v76;
          if (*v76 == v71)
          {
LABEL_64:
            v80 = v76[1];
            v83 = (unint64_t)*v80;
            v81 = (char *)(v80 + 2);
            v82 = v83;
            goto LABEL_65;
          }
          v78 = 1;
          while (v77 != (uint64_t ***)-4096)
          {
            v79 = v75 + v78++;
            v75 = v79 & (v74 - 1);
            v77 = *(uint64_t ****)(v73 + 16 * v75);
            if (v77 == v71)
            {
              v76 = (uint64_t ****)(v73 + 16 * v75);
              goto LABEL_64;
            }
          }
        }
        v76 = (uint64_t ****)(v73 + 16 * v74);
        goto LABEL_64;
      }
      v82 = 0;
      v81 = &byte_1C871356D;
LABEL_65:
      v84 = v82 >= v69 ? v69 : v82;
      if (!v84)
        break;
      v85 = memcmp(v68, v81, v84);
      if (!v85)
        break;
      if (v85 < 0)
        goto LABEL_77;
LABEL_73:
      *(_DWORD *)v18 = v54;
      *(_QWORD *)(v18 + 8) = v66;
      v18 = v53;
      if (v53 == a1)
      {
        v52 = a1;
        goto LABEL_78;
      }
    }
    if (v69 > v82)
      goto LABEL_73;
LABEL_77:
    v52 = v18;
LABEL_78:
    *(_DWORD *)v52 = v20;
    *(_QWORD *)(v52 + 8) = v22;
    ++v107;
    v2 = v106;
    if (v107 == 8)
      return v19 + 16 == v106;
LABEL_79:
    v18 = v19;
    v19 += 16;
  }
  while (v19 != v2);
  return 1;
}

char *sub_1C5FC3454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t ***v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ****v17;
  uint64_t ***v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t ***v22;
  size_t v23;
  size_t v24;
  uint64_t ***v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ****v30;
  uint64_t ***v31;
  int v32;
  int v33;
  uint64_t ***v34;
  char *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t ***v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ****v47;
  uint64_t ***v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t ***v52;
  size_t v53;
  size_t v54;
  uint64_t ***v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ****v60;
  uint64_t ***v61;
  int v62;
  int v63;
  uint64_t ***v64;
  char *v65;
  size_t v66;
  size_t v67;
  size_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t ***v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t ****v77;
  uint64_t ***v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t ***v82;
  size_t v83;
  size_t v84;
  uint64_t ***v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t ****v90;
  uint64_t ***v91;
  int v92;
  int v93;
  uint64_t ***v94;
  char *v95;
  size_t v96;
  size_t v97;
  size_t v98;

  result = sub_1C5FC2728((char *)a1, (unsigned int *)a2, (unsigned int *)a3);
  v9 = *(_DWORD *)a4;
  v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 != *(_DWORD *)a3)
  {
    if (v9 <= v10)
      return result;
    v21 = *(_QWORD *)(a3 + 8);
    v11 = *(_QWORD *)(a4 + 8);
    goto LABEL_30;
  }
  v11 = *(_QWORD *)(a4 + 8);
  v12 = *(uint64_t ****)(v11 + 48);
  if ((*((_BYTE *)v12 + 23) & 0x10) != 0)
  {
    v13 = ***v12;
    v14 = *(_QWORD *)(v13 + 152);
    v15 = *(unsigned int *)(v13 + 168);
    if ((_DWORD)v15)
    {
      LODWORD(v16) = (v15 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      v17 = (uint64_t ****)(v14 + 16 * v16);
      v18 = *v17;
      if (*v17 == v12)
      {
LABEL_12:
        v22 = v17[1];
        v24 = (size_t)*v22;
        result = (char *)(v22 + 2);
        v23 = v24;
        goto LABEL_13;
      }
      v19 = 1;
      while (v18 != (uint64_t ***)-4096)
      {
        v20 = v16 + v19++;
        v16 = v20 & (v15 - 1);
        v18 = *(uint64_t ****)(v14 + 16 * v16);
        if (v18 == v12)
        {
          v17 = (uint64_t ****)(v14 + 16 * v16);
          goto LABEL_12;
        }
      }
    }
    v17 = (uint64_t ****)(v14 + 16 * v15);
    goto LABEL_12;
  }
  v23 = 0;
  result = &byte_1C871356D;
LABEL_13:
  v21 = *(_QWORD *)(a3 + 8);
  v25 = *(uint64_t ****)(v21 + 48);
  if ((*((_BYTE *)v25 + 23) & 0x10) != 0)
  {
    v26 = ***v25;
    v27 = *(_QWORD *)(v26 + 152);
    v28 = *(unsigned int *)(v26 + 168);
    if ((_DWORD)v28)
    {
      LODWORD(v29) = (v28 - 1) & ((v25 >> 4) ^ (v25 >> 9));
      v30 = (uint64_t ****)(v27 + 16 * v29);
      v31 = *v30;
      if (*v30 == v25)
      {
LABEL_21:
        v34 = v30[1];
        v37 = (size_t)*v34;
        v35 = (char *)(v34 + 2);
        v36 = v37;
        goto LABEL_22;
      }
      v32 = 1;
      while (v31 != (uint64_t ***)-4096)
      {
        v33 = v29 + v32++;
        v29 = v33 & (v28 - 1);
        v31 = *(uint64_t ****)(v27 + 16 * v29);
        if (v31 == v25)
        {
          v30 = (uint64_t ****)(v27 + 16 * v29);
          goto LABEL_21;
        }
      }
    }
    v30 = (uint64_t ****)(v27 + 16 * v28);
    goto LABEL_21;
  }
  v36 = 0;
  v35 = &byte_1C871356D;
LABEL_22:
  if (v36 >= v23)
    v38 = v23;
  else
    v38 = v36;
  if (v38 && (result = (char *)memcmp(result, v35, v38), (_DWORD)result))
  {
    if ((result & 0x80000000) != 0)
      return result;
  }
  else if (v23 <= v36)
  {
    return result;
  }
LABEL_30:
  *(_DWORD *)a3 = v9;
  *(_DWORD *)a4 = v10;
  *(_QWORD *)(a3 + 8) = v11;
  *(_QWORD *)(a4 + 8) = v21;
  v39 = *(_DWORD *)a3;
  v40 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 != *(_DWORD *)a2)
  {
    if (v39 <= v40)
      return result;
    v51 = *(_QWORD *)(a2 + 8);
    v41 = *(_QWORD *)(a3 + 8);
    goto LABEL_59;
  }
  v41 = *(_QWORD *)(a3 + 8);
  v42 = *(uint64_t ****)(v41 + 48);
  if ((*((_BYTE *)v42 + 23) & 0x10) != 0)
  {
    v43 = ***v42;
    v44 = *(_QWORD *)(v43 + 152);
    v45 = *(unsigned int *)(v43 + 168);
    if ((_DWORD)v45)
    {
      LODWORD(v46) = (v45 - 1) & ((v42 >> 4) ^ (v42 >> 9));
      v47 = (uint64_t ****)(v44 + 16 * v46);
      v48 = *v47;
      if (*v47 == v42)
      {
LABEL_41:
        v52 = v47[1];
        v54 = (size_t)*v52;
        result = (char *)(v52 + 2);
        v53 = v54;
        goto LABEL_42;
      }
      v49 = 1;
      while (v48 != (uint64_t ***)-4096)
      {
        v50 = v46 + v49++;
        v46 = v50 & (v45 - 1);
        v48 = *(uint64_t ****)(v44 + 16 * v46);
        if (v48 == v42)
        {
          v47 = (uint64_t ****)(v44 + 16 * v46);
          goto LABEL_41;
        }
      }
    }
    v47 = (uint64_t ****)(v44 + 16 * v45);
    goto LABEL_41;
  }
  v53 = 0;
  result = &byte_1C871356D;
LABEL_42:
  v51 = *(_QWORD *)(a2 + 8);
  v55 = *(uint64_t ****)(v51 + 48);
  if ((*((_BYTE *)v55 + 23) & 0x10) != 0)
  {
    v56 = ***v55;
    v57 = *(_QWORD *)(v56 + 152);
    v58 = *(unsigned int *)(v56 + 168);
    if ((_DWORD)v58)
    {
      LODWORD(v59) = (v58 - 1) & ((v55 >> 4) ^ (v55 >> 9));
      v60 = (uint64_t ****)(v57 + 16 * v59);
      v61 = *v60;
      if (*v60 == v55)
      {
LABEL_50:
        v64 = v60[1];
        v67 = (size_t)*v64;
        v65 = (char *)(v64 + 2);
        v66 = v67;
        goto LABEL_51;
      }
      v62 = 1;
      while (v61 != (uint64_t ***)-4096)
      {
        v63 = v59 + v62++;
        v59 = v63 & (v58 - 1);
        v61 = *(uint64_t ****)(v57 + 16 * v59);
        if (v61 == v55)
        {
          v60 = (uint64_t ****)(v57 + 16 * v59);
          goto LABEL_50;
        }
      }
    }
    v60 = (uint64_t ****)(v57 + 16 * v58);
    goto LABEL_50;
  }
  v66 = 0;
  v65 = &byte_1C871356D;
LABEL_51:
  if (v66 >= v53)
    v68 = v53;
  else
    v68 = v66;
  if (v68 && (result = (char *)memcmp(result, v65, v68), (_DWORD)result))
  {
    if ((result & 0x80000000) != 0)
      return result;
  }
  else if (v53 <= v66)
  {
    return result;
  }
LABEL_59:
  *(_DWORD *)a2 = v39;
  *(_DWORD *)a3 = v40;
  *(_QWORD *)(a2 + 8) = v41;
  *(_QWORD *)(a3 + 8) = v51;
  v69 = *(_DWORD *)a2;
  v70 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 != *(_DWORD *)a1)
  {
    if (v69 <= v70)
      return result;
    v81 = *(_QWORD *)(a1 + 8);
    v71 = *(_QWORD *)(a2 + 8);
    goto LABEL_88;
  }
  v71 = *(_QWORD *)(a2 + 8);
  v72 = *(uint64_t ****)(v71 + 48);
  if ((*((_BYTE *)v72 + 23) & 0x10) != 0)
  {
    v73 = ***v72;
    v74 = *(_QWORD *)(v73 + 152);
    v75 = *(unsigned int *)(v73 + 168);
    if ((_DWORD)v75)
    {
      LODWORD(v76) = (v75 - 1) & ((v72 >> 4) ^ (v72 >> 9));
      v77 = (uint64_t ****)(v74 + 16 * v76);
      v78 = *v77;
      if (*v77 == v72)
      {
LABEL_70:
        v82 = v77[1];
        v84 = (size_t)*v82;
        result = (char *)(v82 + 2);
        v83 = v84;
        goto LABEL_71;
      }
      v79 = 1;
      while (v78 != (uint64_t ***)-4096)
      {
        v80 = v76 + v79++;
        v76 = v80 & (v75 - 1);
        v78 = *(uint64_t ****)(v74 + 16 * v76);
        if (v78 == v72)
        {
          v77 = (uint64_t ****)(v74 + 16 * v76);
          goto LABEL_70;
        }
      }
    }
    v77 = (uint64_t ****)(v74 + 16 * v75);
    goto LABEL_70;
  }
  v83 = 0;
  result = &byte_1C871356D;
LABEL_71:
  v81 = *(_QWORD *)(a1 + 8);
  v85 = *(uint64_t ****)(v81 + 48);
  if ((*((_BYTE *)v85 + 23) & 0x10) != 0)
  {
    v86 = ***v85;
    v87 = *(_QWORD *)(v86 + 152);
    v88 = *(unsigned int *)(v86 + 168);
    if ((_DWORD)v88)
    {
      LODWORD(v89) = (v88 - 1) & ((v85 >> 4) ^ (v85 >> 9));
      v90 = (uint64_t ****)(v87 + 16 * v89);
      v91 = *v90;
      if (*v90 == v85)
      {
LABEL_79:
        v94 = v90[1];
        v97 = (size_t)*v94;
        v95 = (char *)(v94 + 2);
        v96 = v97;
        goto LABEL_80;
      }
      v92 = 1;
      while (v91 != (uint64_t ***)-4096)
      {
        v93 = v89 + v92++;
        v89 = v93 & (v88 - 1);
        v91 = *(uint64_t ****)(v87 + 16 * v89);
        if (v91 == v85)
        {
          v90 = (uint64_t ****)(v87 + 16 * v89);
          goto LABEL_79;
        }
      }
    }
    v90 = (uint64_t ****)(v87 + 16 * v88);
    goto LABEL_79;
  }
  v96 = 0;
  v95 = &byte_1C871356D;
LABEL_80:
  if (v96 >= v83)
    v98 = v83;
  else
    v98 = v96;
  if (v98 && (result = (char *)memcmp(result, v95, v98), (_DWORD)result))
  {
    if ((result & 0x80000000) != 0)
      return result;
  }
  else if (v83 <= v96)
  {
    return result;
  }
LABEL_88:
  *(_DWORD *)a1 = v69;
  *(_DWORD *)a2 = v70;
  *(_QWORD *)(a1 + 8) = v71;
  *(_QWORD *)(a2 + 8) = v81;
  return result;
}

BOOL sub_1C5FC3914(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v12;
  unsigned int v13;
  llvm::GlobalIFunc *ResolverFunction;
  size_t **Comdat;
  size_t *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  size_t v26;
  uint64_t v28;
  int v29[4];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v2 = a2;
  v32 = *MEMORY[0x1E0C80C00];
  v28 = a2;
  v4 = *a1;
  v5 = *(_DWORD *)(v4 + 16);
  if (v5)
  {
    v6 = v5 - 1;
    v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    v8 = *(_QWORD *)(*(_QWORD *)v4 + 16 * v7);
    if (v8 == a2)
      return *((_DWORD *)sub_1C6242D74((uint64_t *)v4, &v28) + 2) == *(_DWORD *)a1[1];
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v7 + v9++;
      v7 = v10 & v6;
      v8 = *(_QWORD *)(*(_QWORD *)v4 + 16 * v7);
      if (v8 == a2)
        return *((_DWORD *)sub_1C6242D74((uint64_t *)v4, &v28) + 2) == *(_DWORD *)a1[1];
    }
  }
  v12 = *(_DWORD *)a1[1];
  v13 = *(_DWORD *)a1[2];
  v30 = 0uLL;
  LODWORD(v31) = 0;
  ResolverFunction = (llvm::GlobalIFunc *)sub_1C53D5A28(a2, (uint64_t)&v30);
  MEMORY[0x1CAA32FB4](v30, 8);
  if (ResolverFunction && *((_BYTE *)ResolverFunction + 16) == 2)
    ResolverFunction = (llvm::GlobalIFunc *)llvm::GlobalIFunc::getResolverFunction(ResolverFunction);
  if (ResolverFunction)
    v2 = (uint64_t)ResolverFunction;
  Comdat = (size_t **)llvm::GlobalValue::getComdat(v2);
  if (!Comdat)
  {
    if ((*(_BYTE *)(v2 + 23) & 0x10) == 0)
    {
      v26 = 0;
      v17 = (int *)&byte_1C871356D;
      goto LABEL_24;
    }
    v18 = ***(_QWORD ***)v2;
    v19 = *(_QWORD *)(v18 + 152);
    v20 = *(unsigned int *)(v18 + 168);
    if ((_DWORD)v20)
    {
      LODWORD(v21) = (v20 - 1) & ((v2 >> 4) ^ (v2 >> 9));
      v22 = (uint64_t *)(v19 + 16 * v21);
      v23 = *v22;
      if (*v22 == v2)
      {
LABEL_22:
        v16 = (size_t *)v22[1];
        v17 = (int *)(v16 + 2);
        goto LABEL_23;
      }
      v24 = 1;
      while (v23 != -4096)
      {
        v25 = v21 + v24++;
        v21 = v25 & (v20 - 1);
        v23 = *(_QWORD *)(v19 + 16 * v21);
        if (v23 == v2)
        {
          v22 = (uint64_t *)(v19 + 16 * v21);
          goto LABEL_22;
        }
      }
    }
    v22 = (uint64_t *)(v19 + 16 * v20);
    goto LABEL_22;
  }
  v16 = *Comdat;
  v17 = (int *)(*Comdat + 9);
LABEL_23:
  v26 = *v16;
LABEL_24:
  v30 = xmmword_1C85F4BB0;
  v31 = 0;
  llvm::MD5::update((int *)&v30, v17, v26);
  llvm::MD5::final((int *)&v30, v29);
  return LOWORD(v29[0]) % v13 == v12;
}

void llvm::initializeStripNonLineTableDebugLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED838418);
  if (v2 != -1)
  {
    v5[0] = sub_1C5FC3B80;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED838418, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5FC3B80(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Strip all debug info except linetables";
  *(_QWORD *)(v2 + 8) = 38;
  *(_QWORD *)(v2 + 16) = "strip-nonlinetable-debuginfo";
  *(_QWORD *)(v2 + 24) = 28;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5892;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5FC3D00;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createStripNonLineTableDebugLegacyPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5FC3C38(v1);
}

uint64_t sub_1C5FC3C38(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5892;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E81AA2E8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED838418);
  if (v3 != -1)
  {
    v7[0] = sub_1C5FC3B80;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED838418, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5FC3D00()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5FC3C38(v0);
}

void sub_1C5FC3D2C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5FC3D50(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C5FC3D5C(int a1, uint64_t **this)
{
  return llvm::stripNonLineTableDebugInfo(this, (llvm::Module *)this);
}

uint64_t llvm::SymbolRewriter::RewriteMapParser::parse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::yaml::Document **v7;
  uint64_t v8;
  llvm::yaml::Document *v9;
  unint64_t v10;
  int v11;
  int v12;
  llvm::yaml::KeyValueNode *v13;
  const char *v15;
  __int16 v16;
  llvm::yaml::Document **i;
  llvm **v18[2];
  _OWORD v19[4];
  uint64_t v20;

  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 16) - v4;
  v6 = operator new();
  v18[0] = (llvm **)llvm::yaml::Scanner::Scanner(v6, v4, v5, (uint64_t)v19, 1, 0);
  v18[1] = 0;
  v7 = (llvm::yaml::Document **)llvm::yaml::Stream::begin((llvm::yaml::Stream *)v18);
  for (i = v7; i; v7 = i)
  {
    v9 = *v7;
    if (!*v7)
      break;
    v10 = *((_QWORD *)v9 + 13);
    if (!v10)
    {
      v10 = llvm::yaml::Document::parseBlockNode((llvm::yaml::Scanner ***)*v7);
      *((_QWORD *)v9 + 13) = v10;
    }
    v11 = *(_DWORD *)(v10 + 32);
    if (v11)
    {
      if (v11 != 4)
      {
        v15 = "DescriptorList node must be a map";
        v16 = 259;
        llvm::yaml::Stream::printError(v18, v10, (llvm::Twine *)&v15, 0);
LABEL_15:
        v8 = 0;
        goto LABEL_16;
      }
      *(_BYTE *)(v10 + 76) = 0;
      while (1)
      {
        llvm::yaml::MappingNode::increment((llvm::yaml::MappingNode *)v10);
        v13 = *(llvm::yaml::KeyValueNode **)(v10 + 80);
        if (!v13)
          break;
        if (!llvm::SymbolRewriter::RewriteMapParser::parseEntry(v12, v18, v13, a3))
          goto LABEL_15;
      }
    }
    sub_1C630F42C(&i);
  }
  v8 = 1;
LABEL_16:
  llvm::yaml::Stream::~Stream((llvm::yaml::Stream *)v18);
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v19);
  return v8;
}

{
  uint64_t v6;
  const std::error_category *v8;
  uint64_t *v9;
  std::error_code v10;
  std::string v11;
  std::string *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16[4];
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  uint64_t v22[5];
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[2];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v24 = 260;
  v23[0] = a2;
  llvm::MemoryBuffer::getFile((llvm::MemoryBuffer *)v23, 0, 1, 0, (uint64_t)v25);
  if ((v26 & 1) != 0)
  {
    v18[0] = (uint64_t)"unable to read rewrite map '";
    v19 = 259;
    v17 = 260;
    v16[0] = a2;
    sub_1C6131AAC(v18, v16, (uint64_t)v20);
    v14 = "': ";
    v15 = 259;
    sub_1C6131AAC(v20, (uint64_t *)&v14, (uint64_t)v22);
    *(_QWORD *)&v10.__val_ = sub_1C63837A4(v25);
    v10.__cat_ = v8;
    std::error_code::message(&v11, &v10);
    v13 = 260;
    v12 = &v11;
    v9 = (uint64_t *)&v12;
    goto LABEL_9;
  }
  if ((llvm::SymbolRewriter::RewriteMapParser::parse(a1, (uint64_t)v25, a3) & 1) == 0)
  {
    v20[0] = (uint64_t)"unable to parse rewrite map '";
    v21 = 259;
    v19 = 260;
    v18[0] = a2;
    sub_1C6131AAC(v20, v18, (uint64_t)v22);
    v16[0] = (uint64_t)"'";
    v17 = 259;
    v9 = v16;
LABEL_9:
    sub_1C6131AAC(v22, v9, (uint64_t)v23);
    llvm::report_fatal_error((uint64_t)v23, 1);
  }
  if ((v26 & 1) == 0)
  {
    v6 = v25[0];
    v25[0] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return 1;
}

uint64_t llvm::SymbolRewriter::RewriteMapParser::parseEntry(int a1, llvm ***a2, llvm::yaml::KeyValueNode *this, uint64_t *a4)
{
  unint64_t Key;
  uint64_t v8;
  unint64_t Value;
  llvm::yaml::MappingNode *v10;
  const char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v17;
  unint64_t v19;
  const char *v20;
  const char *v21;
  __int16 v22;
  void *v23;
  __int128 v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v24 = xmmword_1C677F680;
  Key = llvm::yaml::KeyValueNode::getKey(this);
  if (Key && (v8 = Key, *(_DWORD *)(Key + 32) == 1))
  {
    Value = llvm::yaml::KeyValueNode::getValue(this);
    if (Value && (v10 = (llvm::yaml::MappingNode *)Value, *(_DWORD *)(Value + 32) == 4))
    {
      v11 = llvm::yaml::ScalarNode::getValue(v8, (uint64_t *)&v23);
      if (v12 == 15)
      {
        if (*(_QWORD *)v11 == 0x76206C61626F6C67 && *(_QWORD *)(v11 + 7) == 0x656C626169726176)
        {
          v14 = llvm::SymbolRewriter::RewriteMapParser::parseRewriteGlobalVariableDescriptor((int)v11, a2, v13, v10, a4);
          goto LABEL_22;
        }
      }
      else if (v12 == 12)
      {
        if (*(_QWORD *)v11 == 0x61206C61626F6C67 && *((_DWORD *)v11 + 2) == 1935763820)
        {
          v14 = llvm::SymbolRewriter::RewriteMapParser::parseRewriteGlobalAliasDescriptor((int)v11, a2, v13, v10, a4);
          goto LABEL_22;
        }
      }
      else if (v12 == 8 && *(_QWORD *)v11 == 0x6E6F6974636E7566)
      {
        v14 = llvm::SymbolRewriter::RewriteMapParser::parseRewriteFunctionDescriptor((int)v11, a2, v13, v10, a4);
LABEL_22:
        v17 = v14;
        goto LABEL_23;
      }
      v19 = llvm::yaml::KeyValueNode::getKey(this);
      v20 = "unknown rewrite type";
    }
    else
    {
      v19 = llvm::yaml::KeyValueNode::getValue(this);
      v20 = "rewrite descriptor must be a map";
    }
  }
  else
  {
    v19 = llvm::yaml::KeyValueNode::getKey(this);
    v20 = "rewrite type must be a scalar";
  }
  v21 = v20;
  v22 = 259;
  llvm::yaml::Stream::printError(a2, v19, (llvm::Twine *)&v21, 0);
  v17 = 0;
LABEL_23:
  if (v23 != v25)
    free(v23);
  return v17;
}

uint64_t llvm::SymbolRewriter::RewriteMapParser::parseRewriteFunctionDescriptor(int a1, llvm ***a2, int a3, llvm::yaml::MappingNode *this, uint64_t *a5)
{
  char v8;
  void *v9;
  llvm::yaml::KeyValueNode *v10;
  void *v11;
  char v12;
  BOOL v13;
  unint64_t Key;
  uint64_t v15;
  unint64_t Value;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v22;
  unint64_t v23;
  const char *v24;
  void *v25;
  void *v26;
  const char *v28;
  unint64_t v29;
  const char *v30;
  size_t v31;
  __int128 *p_dst;
  const char *v34;
  unint64_t v35;
  const char *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  __int128 *v46;
  size_t v47;
  void *v48;
  void *v49;
  void **v50;
  int v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  unint64_t v59;
  const char *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  void *v66;
  int v67;
  size_t v68;
  size_t v69;
  int v70;
  size_t v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  std::string::size_type v76;
  void **v77;
  void *v78;
  void *v79;
  void **v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::string *v91;
  std::string *v92;
  size_t size;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void **v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  llvm ***v109;
  uint64_t *v110;
  uint64_t *v111;
  void *v112;
  char v113;
  __int128 __dst;
  int64_t v115;
  void *__p[2];
  int64_t v117;
  __int16 v118;
  void *v119[2];
  int64_t v120;
  void *v121[2];
  int64_t v122;
  void *v123[2];
  int64_t v124;
  std::string v125;
  _BYTE v126[32];
  std::string v127;
  _WORD v128[16];
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v123[0] = 0;
  v123[1] = 0;
  v124 = 0;
  v121[0] = 0;
  v121[1] = 0;
  v122 = 0;
  v119[0] = 0;
  v119[1] = 0;
  v120 = 0;
  *((_BYTE *)this + 76) = 0;
  llvm::yaml::MappingNode::increment(this);
  v8 = 0;
  v9 = 0;
  if (!this)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
LABEL_134:
    v67 = v12;
    v68 = v12 & 0x7F;
    if (v67 >= 0)
      v69 = v68;
    else
      v69 = (size_t)v11;
    v70 = v8;
    v71 = v8 & 0x7F;
    if (v70 >= 0)
      v72 = v71;
    else
      v72 = (size_t)v9;
    if ((v72 == 0) == (v69 == 0))
    {
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)"exactly one of transform or target must be specified";
      v128[4] = 259;
      llvm::yaml::Stream::printError(a2, (uint64_t)this, (llvm::Twine *)&v127, 0);
      goto LABEL_234;
    }
    v73 = operator new();
    v74 = v73;
    if (v124 >= 0)
      v75 = v123;
    else
      v75 = (void **)v123[0];
    if (v124 >= 0)
      v76 = HIBYTE(v124) & 0x7F;
    else
      v76 = (std::string::size_type)v123[1];
    if (v72)
    {
      v111 = a5;
      v77 = (void **)v121[0];
      *(_DWORD *)(v73 + 8) = 1;
      *(_QWORD *)v73 = off_1E81AA428;
      v78 = (void *)(v73 + 16);
      if (v13)
      {
        if (!v75)
        {
          memset(&v125, 0, sizeof(v125));
          goto LABEL_184;
        }
        if (v76 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_239;
        if (v76 >= 0x17)
        {
          v89 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v76 | 7) != 0x17)
            v89 = v76 | 7;
          v90 = v89 + 1;
          v79 = operator new(v89 + 1);
          v125.__r_.__value_.__l.__size_ = v76;
          v125.__r_.__value_.__r.__words[2] = v90 | 0x8000000000000000;
          v125.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
        }
        else
        {
          *((_BYTE *)&v125.__r_.__value_.__s + 23) = v76;
          v79 = &v125;
          if (!v76)
            goto LABEL_183;
        }
        memmove(v79, v75, v76);
LABEL_183:
        *((_BYTE *)v79 + v76) = 0;
LABEL_184:
        v91 = std::string::insert(&v125, 0, "\x01");
        v127 = *v91;
        v91->__r_.__value_.__l.__size_ = 0;
        v91->__r_.__value_.__r.__words[2] = 0;
        v91->__r_.__value_.__r.__words[0] = 0;
        if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v92 = &v127;
        else
          v92 = (std::string *)v127.__r_.__value_.__r.__words[0];
        if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v127.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v127.__r_.__value_.__l.__size_;
        if (size > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_239;
        if (size >= 0x17)
        {
          v94 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((size | 7) != 0x17)
            v94 = size | 7;
          v95 = v94 + 1;
          v78 = operator new(v94 + 1);
          *(_QWORD *)(v74 + 24) = size;
          *(_QWORD *)(v74 + 32) = v95 | 0x8000000000000000;
          *(_QWORD *)(v74 + 16) = v78;
        }
        else
        {
          *(_BYTE *)(v74 + 39) = size;
          if (!size)
            goto LABEL_198;
        }
        memmove(v78, v92, size);
LABEL_198:
        *((_BYTE *)v78 + size) = 0;
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v127.__r_.__value_.__l.__data_);
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v125.__r_.__value_.__l.__data_);
LABEL_207:
        if (v70 >= 0)
          v98 = v121;
        else
          v98 = v77;
        if (v72 <= 0x7FFFFFFFFFFFFFF7)
        {
          if (v72 >= 0x17)
          {
            v100 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v72 | 7) != 0x17)
              v100 = v72 | 7;
            v101 = v100 + 1;
            v99 = operator new(v100 + 1);
            *(_QWORD *)(v74 + 48) = v72;
            *(_QWORD *)(v74 + 56) = v101 | 0x8000000000000000;
            *(_QWORD *)(v74 + 40) = v99;
          }
          else
          {
            v99 = (void *)(v74 + 40);
            *(_BYTE *)(v74 + 63) = v72;
          }
          memmove(v99, v98, v72);
          *((_BYTE *)v99 + v72) = 0;
          v102 = operator new(0x18uLL);
          v102[1] = v111;
          v102[2] = v74;
          v103 = *v111;
          *v102 = *v111;
          *(_QWORD *)(v103 + 8) = v102;
          *v111 = (uint64_t)v102;
          ++v111[2];
          goto LABEL_217;
        }
LABEL_239:
        abort();
      }
      if (v76 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_239;
      if (v76 >= 0x17)
      {
        v96 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v96 = v76 | 7;
        v97 = v96 + 1;
        v78 = operator new(v96 + 1);
        *(_QWORD *)(v74 + 24) = v76;
        *(_QWORD *)(v74 + 32) = v97 | 0x8000000000000000;
        *(_QWORD *)(v74 + 16) = v78;
      }
      else
      {
        *(_BYTE *)(v73 + 39) = v76;
        if (!v76)
          goto LABEL_206;
      }
      memmove(v78, v75, v76);
LABEL_206:
      *((_BYTE *)v78 + v76) = 0;
      goto LABEL_207;
    }
    if (v67 >= 0)
      v80 = v119;
    else
      v80 = (void **)v119[0];
    *(_DWORD *)(v73 + 8) = 1;
    *(_QWORD *)v73 = off_1E81AA450;
    if (v76 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_239;
    if (v76 >= 0x17)
    {
      v82 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v76 | 7) != 0x17)
        v82 = v76 | 7;
      v83 = v82 + 1;
      v81 = operator new(v82 + 1);
      *(_QWORD *)(v74 + 24) = v76;
      *(_QWORD *)(v74 + 32) = v83 | 0x8000000000000000;
      *(_QWORD *)(v74 + 16) = v81;
    }
    else
    {
      v81 = (_BYTE *)(v73 + 16);
      *(_BYTE *)(v73 + 39) = v76;
      if (!v76)
      {
LABEL_169:
        v81[v76] = 0;
        if (v69 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_239;
        if (v69 >= 0x17)
        {
          v85 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v69 | 7) != 0x17)
            v85 = v69 | 7;
          v86 = v85 + 1;
          v84 = operator new(v85 + 1);
          *(_QWORD *)(v74 + 48) = v69;
          *(_QWORD *)(v74 + 56) = v86 | 0x8000000000000000;
          *(_QWORD *)(v74 + 40) = v84;
        }
        else
        {
          v84 = (void *)(v74 + 40);
          *(_BYTE *)(v74 + 63) = v69;
          if (!v69)
            goto LABEL_177;
        }
        memmove(v84, v80, v69);
LABEL_177:
        *((_BYTE *)v84 + v69) = 0;
        v87 = operator new(0x18uLL);
        v87[1] = a5;
        v87[2] = v74;
        v88 = *a5;
        *v87 = *a5;
        *(_QWORD *)(v88 + 8) = v87;
        *a5 = (uint64_t)v87;
        ++a5[2];
LABEL_217:
        v104 = 1;
        goto LABEL_218;
      }
    }
    memmove(v81, v75, v76);
    goto LABEL_169;
  }
  v10 = (llvm::yaml::KeyValueNode *)*((_QWORD *)this + 10);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  if (!v10)
    goto LABEL_134;
  v109 = a2;
  v13 = 0;
  while (1)
  {
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
    *(_OWORD *)&v127.__r_.__value_.__r.__words[1] = xmmword_1C677F680;
    v125.__r_.__value_.__r.__words[0] = (std::string::size_type)v126;
    *(_OWORD *)&v125.__r_.__value_.__r.__words[1] = xmmword_1C677F680;
    Key = llvm::yaml::KeyValueNode::getKey(v10);
    if (!Key || (v15 = Key, *(_DWORD *)(Key + 32) != 1))
    {
      v106 = llvm::yaml::KeyValueNode::getKey(v10);
      v107 = "descriptor key must be a scalar";
      goto LABEL_229;
    }
    Value = llvm::yaml::KeyValueNode::getValue(v10);
    if (!Value || (v17 = Value, *(_DWORD *)(Value + 32) != 1))
    {
      v106 = llvm::yaml::KeyValueNode::getValue(v10);
      v107 = "descriptor value must be a scalar";
      goto LABEL_229;
    }
    v18 = llvm::yaml::ScalarNode::getValue(v15, (uint64_t *)&v127);
    if (v19 != 5)
      break;
    if (*(_DWORD *)v18 != 1701536110 || v18[4] != 100)
    {
LABEL_226:
      v106 = llvm::yaml::KeyValueNode::getKey(v10);
      v107 = "unknown key for function";
LABEL_229:
      __p[0] = (void *)v107;
      v118 = 259;
      llvm::yaml::Stream::printError(v109, v106, (llvm::Twine *)__p, 0);
      goto LABEL_230;
    }
    __p[0] = 0;
    __p[1] = 0;
    v117 = 0;
    v28 = llvm::yaml::ScalarNode::getValue(v17, (uint64_t *)&v125);
    if (v29 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_239;
    v30 = v28;
    v31 = v29;
    if (v29 >= 0x17)
    {
      v39 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v39 = v29 | 7;
      v40 = v39 + 1;
      p_dst = (__int128 *)operator new(v39 + 1);
      *((_QWORD *)&__dst + 1) = v31;
      v115 = v40 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
LABEL_45:
      memmove(p_dst, v30, v31);
      goto LABEL_46;
    }
    HIBYTE(v115) = v29;
    p_dst = &__dst;
    if (v29)
      goto LABEL_45;
LABEL_46:
    *((_BYTE *)p_dst + v31) = 0;
    if (SHIBYTE(v117) < 0)
      operator delete(__p[0]);
    v117 = v115;
    *(_OWORD *)__p = __dst;
    if (v115 >= 0)
      v41 = (char *)__p;
    else
      v41 = (char *)__dst;
    if (v115 >= 0)
      v42 = HIBYTE(v115) & 0x7F;
    else
      v42 = *((_QWORD *)&__dst + 1);
    sub_1C5E3DEA4(&__dst, v41, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &v41[v42], (uint64_t)sub_1C5E3C6A8, v42);
    v43 = HIBYTE(v115);
    if (v115 >= 0)
      v44 = HIBYTE(v115) & 0x7F;
    else
      v44 = *((_QWORD *)&__dst + 1);
    if (v44 == 4)
    {
      v45 = v115 >= 0 ? HIBYTE(v115) : *((_QWORD *)&__dst + 1);
      v46 = v115 >= 0 ? &__dst : (__int128 *)__dst;
      v47 = v45 >= 4 ? 4 : v45;
      if (!memcmp(v46, "true", v47) && v45 == 4)
      {
        v13 = 1;
        if ((v43 & 0x80) == 0)
          goto LABEL_105;
LABEL_104:
        operator delete((void *)__dst);
        goto LABEL_105;
      }
    }
    if (v117 >= 0)
      v48 = (void *)(HIBYTE(v117) & 0x7F);
    else
      v48 = __p[1];
    if (v48 != (void *)1)
    {
      v13 = 0;
      if ((v43 & 0x80) == 0)
        goto LABEL_105;
      goto LABEL_104;
    }
    if (v117 >= 0)
      v49 = (void *)HIBYTE(v117);
    else
      v49 = __p[1];
    if (v117 >= 0)
      v50 = __p;
    else
      v50 = (void **)__p[0];
    v51 = memcmp(v50, "1", v49 != 0);
    v13 = v49 == (void *)1 && v51 == 0;
    if (v43 < 0)
      goto LABEL_104;
LABEL_105:
    if (SHIBYTE(v117) < 0)
    {
      v57 = __p[0];
LABEL_107:
      operator delete(v57);
    }
LABEL_108:
    if (v125.__r_.__value_.__l.__data_ != v126)
      free(v125.__r_.__value_.__l.__data_);
    if (v127.__r_.__value_.__l.__data_ != (std::string::pointer)v128)
      free(v127.__r_.__value_.__l.__data_);
    llvm::yaml::MappingNode::increment(this);
    v10 = (llvm::yaml::KeyValueNode *)*((_QWORD *)this + 10);
    if (!v10)
    {
      v12 = HIBYTE(v120);
      v11 = v119[1];
      v8 = HIBYTE(v122);
      v9 = v121[1];
      a2 = v109;
      goto LABEL_134;
    }
  }
  if (v19 == 9)
  {
    if (*(_QWORD *)v18 != 0x726F66736E617274 || v18[8] != 109)
      goto LABEL_226;
    v34 = llvm::yaml::ScalarNode::getValue(v17, (uint64_t *)&v125);
    if (v35 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_239;
    v36 = v34;
    v37 = (void *)v35;
    if (v35 >= 0x17)
    {
      v53 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v53 = v35 | 7;
      v54 = v53 + 1;
      v38 = operator new(v53 + 1);
      __p[1] = v37;
      v117 = v54 | 0x8000000000000000;
      __p[0] = v38;
    }
    else
    {
      HIBYTE(v117) = v35;
      v38 = __p;
      if (!v35)
        goto LABEL_93;
    }
    memmove(v38, v36, (size_t)v37);
LABEL_93:
    *((_BYTE *)v37 + (_QWORD)v38) = 0;
    if (SHIBYTE(v120) < 0)
      operator delete(v119[0]);
    *(_OWORD *)v119 = *(_OWORD *)__p;
    v120 = v117;
    goto LABEL_108;
  }
  if (v19 != 6)
    goto LABEL_226;
  if (*(_DWORD *)v18 != 1920298867 || *((_WORD *)v18 + 2) != 25955)
  {
    if (*(_DWORD *)v18 != 1735549300 || *((_WORD *)v18 + 2) != 29797)
      goto LABEL_226;
    v22 = llvm::yaml::ScalarNode::getValue(v17, (uint64_t *)&v125);
    if (v23 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_239;
    v24 = v22;
    v25 = (void *)v23;
    if (v23 >= 0x17)
    {
      v55 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v55 = v23 | 7;
      v56 = v55 + 1;
      v26 = operator new(v55 + 1);
      __p[1] = v25;
      v117 = v56 | 0x8000000000000000;
      __p[0] = v26;
    }
    else
    {
      HIBYTE(v117) = v23;
      v26 = __p;
      if (!v23)
        goto LABEL_100;
    }
    memmove(v26, v24, (size_t)v25);
LABEL_100:
    *((_BYTE *)v25 + (_QWORD)v26) = 0;
    if (SHIBYTE(v122) < 0)
      operator delete(v121[0]);
    *(_OWORD *)v121 = *(_OWORD *)__p;
    v122 = v117;
    goto LABEL_108;
  }
  __dst = 0uLL;
  v115 = 0;
  v58 = llvm::yaml::ScalarNode::getValue(v17, (uint64_t *)&v125);
  if (v59 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_239;
  v60 = v58;
  v61 = (void *)v59;
  v110 = a5;
  if (v59 >= 0x17)
  {
    v63 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v59 | 7) != 0x17)
      v63 = v59 | 7;
    v64 = v63 + 1;
    v62 = operator new(v63 + 1);
    __p[1] = v61;
    v117 = v64 | 0x8000000000000000;
    __p[0] = v62;
    goto LABEL_121;
  }
  HIBYTE(v117) = v59;
  v62 = __p;
  if (v59)
LABEL_121:
    memmove(v62, v60, (size_t)v61);
  *((_BYTE *)v61 + (_QWORD)v62) = 0;
  if (SHIBYTE(v124) < 0)
    operator delete(v123[0]);
  v124 = v117;
  *(_OWORD *)v123 = *(_OWORD *)__p;
  if (v117 >= 0)
    v65 = (char *)v123;
  else
    v65 = (char *)__p[0];
  if (v117 >= 0)
    v66 = (void *)(HIBYTE(v117) & 0x7F);
  else
    v66 = __p[1];
  llvm::Regex::Regex((uint64_t)__p, v65, (uint64_t)v66, 0);
  a5 = v110;
  if (!LODWORD(__p[1]))
  {
    llvm::Regex::~Regex((llvm::Regex *)__p);
    if ((SHIBYTE(v115) & 0x80000000) == 0)
      goto LABEL_108;
    v57 = (void *)__dst;
    goto LABEL_107;
  }
  sub_1C5E2A1F8((int)__p[1], (uint64_t)__p[0], (uint64_t)&__dst);
  llvm::Regex::~Regex((llvm::Regex *)__p);
  v108 = llvm::yaml::KeyValueNode::getKey(v10);
  std::operator+<char>();
  v118 = 260;
  __p[0] = &v112;
  llvm::yaml::Stream::printError(v109, v108, (llvm::Twine *)__p, 0);
  if (v113 < 0)
    operator delete(v112);
  if (SHIBYTE(v115) < 0)
    operator delete((void *)__dst);
LABEL_230:
  if (v125.__r_.__value_.__l.__data_ != v126)
    free(v125.__r_.__value_.__l.__data_);
  if (v127.__r_.__value_.__l.__data_ != (std::string::pointer)v128)
    free(v127.__r_.__value_.__l.__data_);
LABEL_234:
  v104 = 0;
LABEL_218:
  if (SHIBYTE(v120) < 0)
    operator delete(v119[0]);
  if (SHIBYTE(v122) < 0)
    operator delete(v121[0]);
  if (SHIBYTE(v124) < 0)
    operator delete(v123[0]);
  return v104;
}

uint64_t llvm::SymbolRewriter::RewriteMapParser::parseRewriteGlobalVariableDescriptor(int a1, llvm ***a2, int a3, llvm::yaml::MappingNode *this, uint64_t *a5)
{
  char v8;
  void *v9;
  llvm::yaml::KeyValueNode *v10;
  void *v11;
  char v12;
  unint64_t Key;
  uint64_t v14;
  unint64_t Value;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v21;
  unint64_t v22;
  const char *v23;
  size_t v24;
  __int128 *v25;
  const char *v27;
  unint64_t v28;
  const char *v29;
  size_t v30;
  __int128 *p_dst;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  unint64_t v37;
  const char *v38;
  size_t v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  size_t v47;
  size_t v48;
  int v49;
  size_t v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  size_t v55;
  void **v56;
  _BYTE *v57;
  void **v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v75;
  const char *v76;
  unint64_t v77;
  llvm ***v78;
  void *v79;
  char v80;
  void *v81[2];
  uint64_t v82;
  __int128 __dst;
  int64_t v84;
  __int16 v85;
  void *__p[2];
  int64_t v87;
  void *v88[2];
  int64_t v89;
  __int128 v90;
  int64_t v91;
  void *v92;
  __int128 v93;
  _BYTE v94[32];
  char *v95;
  __int128 v96;
  _WORD v97[16];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v90 = 0uLL;
  v91 = 0;
  v88[0] = 0;
  v88[1] = 0;
  v89 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v87 = 0;
  *((_BYTE *)this + 76) = 0;
  llvm::yaml::MappingNode::increment(this);
  v8 = 0;
  v9 = 0;
  if (!this)
  {
    v11 = 0;
    v12 = 0;
LABEL_71:
    v46 = v12;
    v47 = v12 & 0x7F;
    if (v46 >= 0)
      v48 = v47;
    else
      v48 = (size_t)v11;
    v49 = v8;
    v50 = v8 & 0x7F;
    if (v49 >= 0)
      v51 = v50;
    else
      v51 = (size_t)v9;
    if ((v51 == 0) == (v48 == 0))
    {
      v95 = "exactly one of transform or target must be specified";
      v97[4] = 259;
      llvm::yaml::Stream::printError(a2, (uint64_t)this, (llvm::Twine *)&v95, 0);
      goto LABEL_140;
    }
    v52 = operator new();
    v53 = v52;
    if (v91 >= 0)
      v54 = &v90;
    else
      v54 = (__int128 *)v90;
    if (v91 >= 0)
      v55 = HIBYTE(v91) & 0x7F;
    else
      v55 = *((_QWORD *)&v90 + 1);
    if (v51)
    {
      v56 = (void **)v88[0];
      *(_DWORD *)(v52 + 8) = 2;
      *(_QWORD *)v52 = off_1E81AA478;
      if (v55 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_145;
      if (v55 >= 0x17)
      {
        v60 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v55 | 7) != 0x17)
          v60 = v55 | 7;
        v61 = v60 + 1;
        v57 = operator new(v60 + 1);
        *(_QWORD *)(v53 + 24) = v55;
        *(_QWORD *)(v53 + 32) = v61 | 0x8000000000000000;
        *(_QWORD *)(v53 + 16) = v57;
      }
      else
      {
        v57 = (_BYTE *)(v52 + 16);
        *(_BYTE *)(v52 + 39) = v55;
        if (!v55)
        {
LABEL_100:
          v57[v55] = 0;
          if (v49 >= 0)
            v62 = v88;
          else
            v62 = v56;
          if (v51 <= 0x7FFFFFFFFFFFFFF7)
          {
            if (v51 >= 0x17)
            {
              v64 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v51 | 7) != 0x17)
                v64 = v51 | 7;
              v65 = v64 + 1;
              v63 = operator new(v64 + 1);
              *(_QWORD *)(v53 + 48) = v51;
              *(_QWORD *)(v53 + 56) = v65 | 0x8000000000000000;
              *(_QWORD *)(v53 + 40) = v63;
            }
            else
            {
              v63 = (void *)(v53 + 40);
              *(_BYTE *)(v53 + 63) = v51;
            }
            memmove(v63, v62, v51);
            *((_BYTE *)v63 + v51) = 0;
            goto LABEL_123;
          }
LABEL_145:
          abort();
        }
      }
      memmove(v57, v54, v55);
      goto LABEL_100;
    }
    if (v46 >= 0)
      v58 = __p;
    else
      v58 = (void **)__p[0];
    *(_DWORD *)(v52 + 8) = 2;
    *(_QWORD *)v52 = off_1E81AA4A0;
    if (v55 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_145;
    if (v55 >= 0x17)
    {
      v66 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v55 | 7) != 0x17)
        v66 = v55 | 7;
      v67 = v66 + 1;
      v59 = operator new(v66 + 1);
      *(_QWORD *)(v53 + 24) = v55;
      *(_QWORD *)(v53 + 32) = v67 | 0x8000000000000000;
      *(_QWORD *)(v53 + 16) = v59;
    }
    else
    {
      v59 = (_BYTE *)(v52 + 16);
      *(_BYTE *)(v52 + 39) = v55;
      if (!v55)
      {
LABEL_114:
        v59[v55] = 0;
        if (v48 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_145;
        if (v48 >= 0x17)
        {
          v69 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v48 | 7) != 0x17)
            v69 = v48 | 7;
          v70 = v69 + 1;
          v68 = operator new(v69 + 1);
          *(_QWORD *)(v53 + 48) = v48;
          *(_QWORD *)(v53 + 56) = v70 | 0x8000000000000000;
          *(_QWORD *)(v53 + 40) = v68;
        }
        else
        {
          v68 = (void *)(v53 + 40);
          *(_BYTE *)(v53 + 63) = v48;
          if (!v48)
            goto LABEL_122;
        }
        memmove(v68, v58, v48);
LABEL_122:
        *((_BYTE *)v68 + v48) = 0;
LABEL_123:
        v71 = operator new(0x18uLL);
        v71[1] = a5;
        v71[2] = v53;
        v72 = *a5;
        *v71 = *a5;
        *(_QWORD *)(v72 + 8) = v71;
        *a5 = (uint64_t)v71;
        ++a5[2];
        v73 = 1;
        goto LABEL_124;
      }
    }
    memmove(v59, v54, v55);
    goto LABEL_114;
  }
  v10 = (llvm::yaml::KeyValueNode *)*((_QWORD *)this + 10);
  v11 = 0;
  v12 = 0;
  if (!v10)
    goto LABEL_71;
  while (1)
  {
    v95 = (char *)v97;
    v96 = xmmword_1C677F680;
    v92 = v94;
    v93 = xmmword_1C677F680;
    Key = llvm::yaml::KeyValueNode::getKey(v10);
    if (!Key || (v14 = Key, *(_DWORD *)(Key + 32) != 1))
    {
      v75 = llvm::yaml::KeyValueNode::getKey(v10);
      v76 = "descriptor Key must be a scalar";
      goto LABEL_135;
    }
    Value = llvm::yaml::KeyValueNode::getValue(v10);
    if (!Value || (v16 = Value, *(_DWORD *)(Value + 32) != 1))
    {
      v75 = llvm::yaml::KeyValueNode::getValue(v10);
      v76 = "descriptor value must be a scalar";
      goto LABEL_135;
    }
    v17 = llvm::yaml::ScalarNode::getValue(v14, (uint64_t *)&v95);
    if (v18 == 9)
    {
      if (*(_QWORD *)v17 != 0x726F66736E617274 || v17[8] != 109)
      {
LABEL_132:
        v75 = llvm::yaml::KeyValueNode::getKey(v10);
        v76 = "unknown Key for Global Variable";
LABEL_135:
        *(_QWORD *)&__dst = v76;
        v85 = 259;
        llvm::yaml::Stream::printError(a2, v75, (llvm::Twine *)&__dst, 0);
        goto LABEL_136;
      }
      v27 = llvm::yaml::ScalarNode::getValue(v16, (uint64_t *)&v92);
      if (v28 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_145;
      v29 = v27;
      v30 = v28;
      if (v28 >= 0x17)
      {
        v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17)
          v32 = v28 | 7;
        v33 = v32 + 1;
        p_dst = (__int128 *)operator new(v32 + 1);
        *((_QWORD *)&__dst + 1) = v30;
        v84 = v33 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v84) = v28;
        p_dst = &__dst;
        if (!v28)
          goto LABEL_35;
      }
      memmove(p_dst, v29, v30);
LABEL_35:
      *((_BYTE *)p_dst + v30) = 0;
      if (SHIBYTE(v87) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = __dst;
      v87 = v84;
      goto LABEL_45;
    }
    if (v18 != 6)
      goto LABEL_132;
    if (*(_DWORD *)v17 == 1920298867 && *((_WORD *)v17 + 2) == 25955)
      break;
    if (*(_DWORD *)v17 != 1735549300 || *((_WORD *)v17 + 2) != 29797)
      goto LABEL_132;
    v21 = llvm::yaml::ScalarNode::getValue(v16, (uint64_t *)&v92);
    if (v22 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_145;
    v23 = v21;
    v24 = v22;
    if (v22 >= 0x17)
    {
      v34 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v34 = v22 | 7;
      v35 = v34 + 1;
      v25 = (__int128 *)operator new(v34 + 1);
      *((_QWORD *)&__dst + 1) = v24;
      v84 = v35 | 0x8000000000000000;
      *(_QWORD *)&__dst = v25;
    }
    else
    {
      HIBYTE(v84) = v22;
      v25 = &__dst;
      if (!v22)
        goto LABEL_42;
    }
    memmove(v25, v23, v24);
LABEL_42:
    *((_BYTE *)v25 + v24) = 0;
    if (SHIBYTE(v89) < 0)
      operator delete(v88[0]);
    *(_OWORD *)v88 = __dst;
    v89 = v84;
LABEL_45:
    if (v92 != v94)
      free(v92);
    if (v95 != (char *)v97)
      free(v95);
    llvm::yaml::MappingNode::increment(this);
    v10 = (llvm::yaml::KeyValueNode *)*((_QWORD *)this + 10);
    if (!v10)
    {
      v12 = HIBYTE(v87);
      v11 = __p[1];
      v8 = HIBYTE(v89);
      v9 = v88[1];
      goto LABEL_71;
    }
  }
  v81[0] = 0;
  v81[1] = 0;
  v82 = 0;
  v36 = llvm::yaml::ScalarNode::getValue(v16, (uint64_t *)&v92);
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_145;
  v38 = v36;
  v39 = v37;
  if (v37 >= 0x17)
  {
    v41 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v41 = v37 | 7;
    v78 = a2;
    v42 = v41 + 1;
    v40 = (__int128 *)operator new(v41 + 1);
    v43 = v42 | 0x8000000000000000;
    a2 = v78;
    *((_QWORD *)&__dst + 1) = v39;
    v84 = v43;
    *(_QWORD *)&__dst = v40;
    goto LABEL_58;
  }
  HIBYTE(v84) = v37;
  v40 = &__dst;
  if (v37)
LABEL_58:
    memmove(v40, v38, v39);
  *((_BYTE *)v40 + v39) = 0;
  if (SHIBYTE(v91) < 0)
    operator delete((void *)v90);
  v91 = v84;
  v90 = __dst;
  if (v84 >= 0)
    v44 = (char *)&v90;
  else
    v44 = (char *)v90;
  if (v84 >= 0)
    v45 = HIBYTE(v84) & 0x7F;
  else
    v45 = *((_QWORD *)&v90 + 1);
  llvm::Regex::Regex((uint64_t)&__dst, v44, v45, 0);
  if (!DWORD2(__dst))
  {
    llvm::Regex::~Regex((llvm::Regex *)&__dst);
    if (SHIBYTE(v82) < 0)
      operator delete(v81[0]);
    goto LABEL_45;
  }
  sub_1C5E2A1F8(SDWORD2(__dst), __dst, (uint64_t)v81);
  llvm::Regex::~Regex((llvm::Regex *)&__dst);
  v77 = llvm::yaml::KeyValueNode::getKey(v10);
  std::operator+<char>();
  v85 = 260;
  *(_QWORD *)&__dst = &v79;
  llvm::yaml::Stream::printError(a2, v77, (llvm::Twine *)&__dst, 0);
  if (v80 < 0)
    operator delete(v79);
  if (SHIBYTE(v82) < 0)
    operator delete(v81[0]);
LABEL_136:
  if (v92 != v94)
    free(v92);
  if (v95 != (char *)v97)
    free(v95);
LABEL_140:
  v73 = 0;
LABEL_124:
  if (SHIBYTE(v87) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v89) < 0)
    operator delete(v88[0]);
  if (SHIBYTE(v91) < 0)
    operator delete((void *)v90);
  return v73;
}

uint64_t llvm::SymbolRewriter::RewriteMapParser::parseRewriteGlobalAliasDescriptor(int a1, llvm ***a2, int a3, llvm::yaml::MappingNode *this, uint64_t *a5)
{
  char v8;
  void *v9;
  llvm::yaml::KeyValueNode *v10;
  void *v11;
  char v12;
  unint64_t Key;
  uint64_t v14;
  unint64_t Value;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v21;
  unint64_t v22;
  const char *v23;
  size_t v24;
  __int128 *v25;
  const char *v27;
  unint64_t v28;
  const char *v29;
  size_t v30;
  __int128 *p_dst;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  unint64_t v37;
  const char *v38;
  size_t v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  size_t v47;
  size_t v48;
  int v49;
  size_t v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  size_t v55;
  void **v56;
  _BYTE *v57;
  void **v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v75;
  const char *v76;
  unint64_t v77;
  llvm ***v78;
  void *v79;
  char v80;
  void *v81[2];
  uint64_t v82;
  __int128 __dst;
  int64_t v84;
  __int16 v85;
  void *__p[2];
  int64_t v87;
  void *v88[2];
  int64_t v89;
  __int128 v90;
  int64_t v91;
  void *v92;
  __int128 v93;
  _BYTE v94[32];
  char *v95;
  __int128 v96;
  _WORD v97[16];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v90 = 0uLL;
  v91 = 0;
  v88[0] = 0;
  v88[1] = 0;
  v89 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v87 = 0;
  *((_BYTE *)this + 76) = 0;
  llvm::yaml::MappingNode::increment(this);
  v8 = 0;
  v9 = 0;
  if (!this)
  {
    v11 = 0;
    v12 = 0;
LABEL_71:
    v46 = v12;
    v47 = v12 & 0x7F;
    if (v46 >= 0)
      v48 = v47;
    else
      v48 = (size_t)v11;
    v49 = v8;
    v50 = v8 & 0x7F;
    if (v49 >= 0)
      v51 = v50;
    else
      v51 = (size_t)v9;
    if ((v51 == 0) == (v48 == 0))
    {
      v95 = "exactly one of transform or target must be specified";
      v97[4] = 259;
      llvm::yaml::Stream::printError(a2, (uint64_t)this, (llvm::Twine *)&v95, 0);
      goto LABEL_140;
    }
    v52 = operator new();
    v53 = v52;
    if (v91 >= 0)
      v54 = &v90;
    else
      v54 = (__int128 *)v90;
    if (v91 >= 0)
      v55 = HIBYTE(v91) & 0x7F;
    else
      v55 = *((_QWORD *)&v90 + 1);
    if (v51)
    {
      v56 = (void **)v88[0];
      *(_DWORD *)(v52 + 8) = 3;
      *(_QWORD *)v52 = off_1E81AA4C8;
      if (v55 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_145;
      if (v55 >= 0x17)
      {
        v60 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v55 | 7) != 0x17)
          v60 = v55 | 7;
        v61 = v60 + 1;
        v57 = operator new(v60 + 1);
        *(_QWORD *)(v53 + 24) = v55;
        *(_QWORD *)(v53 + 32) = v61 | 0x8000000000000000;
        *(_QWORD *)(v53 + 16) = v57;
      }
      else
      {
        v57 = (_BYTE *)(v52 + 16);
        *(_BYTE *)(v52 + 39) = v55;
        if (!v55)
        {
LABEL_100:
          v57[v55] = 0;
          if (v49 >= 0)
            v62 = v88;
          else
            v62 = v56;
          if (v51 <= 0x7FFFFFFFFFFFFFF7)
          {
            if (v51 >= 0x17)
            {
              v64 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v51 | 7) != 0x17)
                v64 = v51 | 7;
              v65 = v64 + 1;
              v63 = operator new(v64 + 1);
              *(_QWORD *)(v53 + 48) = v51;
              *(_QWORD *)(v53 + 56) = v65 | 0x8000000000000000;
              *(_QWORD *)(v53 + 40) = v63;
            }
            else
            {
              v63 = (void *)(v53 + 40);
              *(_BYTE *)(v53 + 63) = v51;
            }
            memmove(v63, v62, v51);
            *((_BYTE *)v63 + v51) = 0;
            goto LABEL_123;
          }
LABEL_145:
          abort();
        }
      }
      memmove(v57, v54, v55);
      goto LABEL_100;
    }
    if (v46 >= 0)
      v58 = __p;
    else
      v58 = (void **)__p[0];
    *(_DWORD *)(v52 + 8) = 3;
    *(_QWORD *)v52 = off_1E81AA4F0;
    if (v55 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_145;
    if (v55 >= 0x17)
    {
      v66 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v55 | 7) != 0x17)
        v66 = v55 | 7;
      v67 = v66 + 1;
      v59 = operator new(v66 + 1);
      *(_QWORD *)(v53 + 24) = v55;
      *(_QWORD *)(v53 + 32) = v67 | 0x8000000000000000;
      *(_QWORD *)(v53 + 16) = v59;
    }
    else
    {
      v59 = (_BYTE *)(v52 + 16);
      *(_BYTE *)(v52 + 39) = v55;
      if (!v55)
      {
LABEL_114:
        v59[v55] = 0;
        if (v48 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_145;
        if (v48 >= 0x17)
        {
          v69 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v48 | 7) != 0x17)
            v69 = v48 | 7;
          v70 = v69 + 1;
          v68 = operator new(v69 + 1);
          *(_QWORD *)(v53 + 48) = v48;
          *(_QWORD *)(v53 + 56) = v70 | 0x8000000000000000;
          *(_QWORD *)(v53 + 40) = v68;
        }
        else
        {
          v68 = (void *)(v53 + 40);
          *(_BYTE *)(v53 + 63) = v48;
          if (!v48)
            goto LABEL_122;
        }
        memmove(v68, v58, v48);
LABEL_122:
        *((_BYTE *)v68 + v48) = 0;
LABEL_123:
        v71 = operator new(0x18uLL);
        v71[1] = a5;
        v71[2] = v53;
        v72 = *a5;
        *v71 = *a5;
        *(_QWORD *)(v72 + 8) = v71;
        *a5 = (uint64_t)v71;
        ++a5[2];
        v73 = 1;
        goto LABEL_124;
      }
    }
    memmove(v59, v54, v55);
    goto LABEL_114;
  }
  v10 = (llvm::yaml::KeyValueNode *)*((_QWORD *)this + 10);
  v11 = 0;
  v12 = 0;
  if (!v10)
    goto LABEL_71;
  while (1)
  {
    v95 = (char *)v97;
    v96 = xmmword_1C677F680;
    v92 = v94;
    v93 = xmmword_1C677F680;
    Key = llvm::yaml::KeyValueNode::getKey(v10);
    if (!Key || (v14 = Key, *(_DWORD *)(Key + 32) != 1))
    {
      v75 = llvm::yaml::KeyValueNode::getKey(v10);
      v76 = "descriptor key must be a scalar";
      goto LABEL_135;
    }
    Value = llvm::yaml::KeyValueNode::getValue(v10);
    if (!Value || (v16 = Value, *(_DWORD *)(Value + 32) != 1))
    {
      v75 = llvm::yaml::KeyValueNode::getValue(v10);
      v76 = "descriptor value must be a scalar";
      goto LABEL_135;
    }
    v17 = llvm::yaml::ScalarNode::getValue(v14, (uint64_t *)&v95);
    if (v18 == 9)
    {
      if (*(_QWORD *)v17 != 0x726F66736E617274 || v17[8] != 109)
      {
LABEL_132:
        v75 = llvm::yaml::KeyValueNode::getKey(v10);
        v76 = "unknown key for Global Alias";
LABEL_135:
        *(_QWORD *)&__dst = v76;
        v85 = 259;
        llvm::yaml::Stream::printError(a2, v75, (llvm::Twine *)&__dst, 0);
        goto LABEL_136;
      }
      v27 = llvm::yaml::ScalarNode::getValue(v16, (uint64_t *)&v92);
      if (v28 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_145;
      v29 = v27;
      v30 = v28;
      if (v28 >= 0x17)
      {
        v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17)
          v32 = v28 | 7;
        v33 = v32 + 1;
        p_dst = (__int128 *)operator new(v32 + 1);
        *((_QWORD *)&__dst + 1) = v30;
        v84 = v33 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v84) = v28;
        p_dst = &__dst;
        if (!v28)
          goto LABEL_35;
      }
      memmove(p_dst, v29, v30);
LABEL_35:
      *((_BYTE *)p_dst + v30) = 0;
      if (SHIBYTE(v87) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = __dst;
      v87 = v84;
      goto LABEL_45;
    }
    if (v18 != 6)
      goto LABEL_132;
    if (*(_DWORD *)v17 == 1920298867 && *((_WORD *)v17 + 2) == 25955)
      break;
    if (*(_DWORD *)v17 != 1735549300 || *((_WORD *)v17 + 2) != 29797)
      goto LABEL_132;
    v21 = llvm::yaml::ScalarNode::getValue(v16, (uint64_t *)&v92);
    if (v22 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_145;
    v23 = v21;
    v24 = v22;
    if (v22 >= 0x17)
    {
      v34 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v34 = v22 | 7;
      v35 = v34 + 1;
      v25 = (__int128 *)operator new(v34 + 1);
      *((_QWORD *)&__dst + 1) = v24;
      v84 = v35 | 0x8000000000000000;
      *(_QWORD *)&__dst = v25;
    }
    else
    {
      HIBYTE(v84) = v22;
      v25 = &__dst;
      if (!v22)
        goto LABEL_42;
    }
    memmove(v25, v23, v24);
LABEL_42:
    *((_BYTE *)v25 + v24) = 0;
    if (SHIBYTE(v89) < 0)
      operator delete(v88[0]);
    *(_OWORD *)v88 = __dst;
    v89 = v84;
LABEL_45:
    if (v92 != v94)
      free(v92);
    if (v95 != (char *)v97)
      free(v95);
    llvm::yaml::MappingNode::increment(this);
    v10 = (llvm::yaml::KeyValueNode *)*((_QWORD *)this + 10);
    if (!v10)
    {
      v12 = HIBYTE(v87);
      v11 = __p[1];
      v8 = HIBYTE(v89);
      v9 = v88[1];
      goto LABEL_71;
    }
  }
  v81[0] = 0;
  v81[1] = 0;
  v82 = 0;
  v36 = llvm::yaml::ScalarNode::getValue(v16, (uint64_t *)&v92);
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_145;
  v38 = v36;
  v39 = v37;
  if (v37 >= 0x17)
  {
    v41 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v41 = v37 | 7;
    v78 = a2;
    v42 = v41 + 1;
    v40 = (__int128 *)operator new(v41 + 1);
    v43 = v42 | 0x8000000000000000;
    a2 = v78;
    *((_QWORD *)&__dst + 1) = v39;
    v84 = v43;
    *(_QWORD *)&__dst = v40;
    goto LABEL_58;
  }
  HIBYTE(v84) = v37;
  v40 = &__dst;
  if (v37)
LABEL_58:
    memmove(v40, v38, v39);
  *((_BYTE *)v40 + v39) = 0;
  if (SHIBYTE(v91) < 0)
    operator delete((void *)v90);
  v91 = v84;
  v90 = __dst;
  if (v84 >= 0)
    v44 = (char *)&v90;
  else
    v44 = (char *)v90;
  if (v84 >= 0)
    v45 = HIBYTE(v84) & 0x7F;
  else
    v45 = *((_QWORD *)&v90 + 1);
  llvm::Regex::Regex((uint64_t)&__dst, v44, v45, 0);
  if (!DWORD2(__dst))
  {
    llvm::Regex::~Regex((llvm::Regex *)&__dst);
    if (SHIBYTE(v82) < 0)
      operator delete(v81[0]);
    goto LABEL_45;
  }
  sub_1C5E2A1F8(SDWORD2(__dst), __dst, (uint64_t)v81);
  llvm::Regex::~Regex((llvm::Regex *)&__dst);
  v77 = llvm::yaml::KeyValueNode::getKey(v10);
  std::operator+<char>();
  v85 = 260;
  *(_QWORD *)&__dst = &v79;
  llvm::yaml::Stream::printError(a2, v77, (llvm::Twine *)&__dst, 0);
  if (v80 < 0)
    operator delete(v79);
  if (SHIBYTE(v82) < 0)
    operator delete(v81[0]);
LABEL_136:
  if (v92 != v94)
    free(v92);
  if (v95 != (char *)v97)
    free(v95);
LABEL_140:
  v73 = 0;
LABEL_124:
  if (SHIBYTE(v87) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v89) < 0)
    operator delete(v88[0]);
  if (SHIBYTE(v91) < 0)
    operator delete((void *)v90);
  return v73;
}

uint64_t llvm::RewriteSymbolPass::runImpl(llvm::RewriteSymbolPass *this, llvm::Module *a2)
{
  uint64_t v2;
  int v5;

  v2 = *((_QWORD *)this + 1);
  if ((llvm::RewriteSymbolPass *)v2 == this)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v5 |= (*(uint64_t (**)(_QWORD, llvm::Module *))(**(_QWORD **)(v2 + 16) + 16))(*(_QWORD *)(v2 + 16), a2);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while ((llvm::RewriteSymbolPass *)v2 != this);
  }
  return v5 & 1;
}

void llvm::initializeRewriteSymbolsLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED828F80);
  if (v2 != -1)
  {
    v5[0] = sub_1C5FC5D7C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED828F80, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5FC5D7C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Rewrite Symbols";
  *(_QWORD *)(v2 + 8) = 15;
  *(_QWORD *)(v2 + 16) = "rewrite-symbols";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1ED828F78;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5FC5EDC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5FC5E08(uint64_t a1)
{
  llvm::RewriteSymbolPass *v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED828F78;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E81AA388;
  v2 = (llvm::RewriteSymbolPass *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 48) = 0;
  llvm::RewriteSymbolPass::loadAndParseMapFiles(v2);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED828F80);
  if (v4 != -1)
  {
    v8[0] = sub_1C5FC5D7C;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED828F80, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5FC5EDC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5FC5E08(v0);
}

void sub_1C5FC5F04(uint64_t *a1)
{
  *a1 = (uint64_t)&off_1E81AA388;
  sub_1C62EA368(a1 + 4);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C5FC5F34(uint64_t *a1)
{
  *a1 = (uint64_t)&off_1E81AA388;
  sub_1C62EA368(a1 + 4);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5FC5F78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;

  v2 = a1 + 32;
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 == a1 + 32)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v5 |= (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), a2);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return v5 & 1;
}

uint64_t sub_1C5FC5FE0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81AA428;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5FC602C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81AA428;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5FC6088(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  char v5;
  int v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t ***v11;
  char v12;
  BOOL v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  int32x2_t ***v26;
  _QWORD v27[4];
  __int16 v28;

  v4 = (_BYTE *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 39);
  v6 = v5;
  if (v5 >= 0)
    v7 = (unsigned __int8 *)(a1 + 16);
  else
    v7 = *(unsigned __int8 **)(a1 + 16);
  v8 = v5 & 0x7F;
  if (v6 >= 0)
    v9 = v8;
  else
    v9 = *(_QWORD *)(a1 + 24);
  result = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), v7, v9);
  if (result)
  {
    v11 = (uint64_t ***)result;
    if (!*(_BYTE *)(result + 16))
    {
      sub_1C5FC61F8(a2, (llvm::GlobalObject *)result, v4, a1 + 40);
      v12 = *(_BYTE *)(a1 + 63);
      v13 = v12 < 0;
      if (v12 >= 0)
        v14 = (unsigned __int8 *)(a1 + 40);
      else
        v14 = *(unsigned __int8 **)(a1 + 40);
      v15 = v12 & 0x7F;
      if (v13)
        v16 = *(_QWORD *)(a1 + 48);
      else
        v16 = v15;
      v17 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), v14, v16);
      if (!v17 || *(_BYTE *)(v17 + 16))
      {
        v28 = 260;
        v27[0] = a1 + 40;
        llvm::Value::setName(v11, (uint64_t)v27);
        return 1;
      }
      if ((*(_BYTE *)(v17 + 23) & 0x10) == 0)
      {
        v26 = 0;
LABEL_29:
        llvm::Value::setValueName((int32x2_t ****)v11, v26);
        return 1;
      }
      v18 = ***(_QWORD ***)v17;
      v19 = *(_QWORD *)(v18 + 152);
      v20 = *(unsigned int *)(v18 + 168);
      if ((_DWORD)v20)
      {
        LODWORD(v21) = (v20 - 1) & ((v17 >> 4) ^ (v17 >> 9));
        v22 = (uint64_t *)(v19 + 16 * v21);
        v23 = *v22;
        if (*v22 == v17)
        {
LABEL_28:
          v26 = (int32x2_t ***)v22[1];
          goto LABEL_29;
        }
        v24 = 1;
        while (v23 != -4096)
        {
          v25 = v21 + v24++;
          v21 = v25 & (v20 - 1);
          v23 = *(_QWORD *)(v19 + 16 * v21);
          if (v23 == v17)
          {
            v22 = (uint64_t *)(v19 + 16 * v21);
            goto LABEL_28;
          }
        }
      }
      v22 = (uint64_t *)(v19 + 16 * v20);
      goto LABEL_28;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C5FC61F8(uint64_t result, llvm::GlobalObject *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  char v8;
  BOOL v9;
  unsigned __int8 *v10;
  size_t v11;
  size_t v12;
  size_t *inserted;
  char v14;
  BOOL v15;
  size_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  int v20;
  size_t v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int i;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  size_t v33;
  int v34;
  size_t v35;
  unsigned __int8 *v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  size_t *v46;

  v4 = *((_QWORD *)a2 + 6);
  if (v4)
  {
    v7 = result;
    v8 = *(_BYTE *)(a4 + 23);
    v9 = v8 < 0;
    if (v8 >= 0)
      v10 = (unsigned __int8 *)a4;
    else
      v10 = *(unsigned __int8 **)a4;
    v11 = v8 & 0x7F;
    if (v9)
      v12 = *(_QWORD *)(a4 + 8);
    else
      v12 = v11;
    inserted = llvm::Module::getOrInsertComdat(result, v10, v12);
    *((_DWORD *)inserted + 2) = *(_DWORD *)(v4 + 8);
    llvm::GlobalObject::setComdat(a2, (llvm::Comdat *)inserted);
    v14 = a3[23];
    v15 = v14 < 0;
    v16 = *((_QWORD *)a3 + 1);
    if (v14 < 0)
      a3 = *(_BYTE **)a3;
    v17 = v14 & 0x7F;
    if (v15)
      v18 = v16;
    else
      v18 = v17;
    v19 = *(unsigned int *)(v7 + 128);
    if ((_DWORD)v19)
    {
      v20 = 0;
      if (v18)
      {
        v21 = v18;
        v22 = a3;
        do
        {
          v23 = *v22++;
          v20 = 33 * v20 + v23;
          --v21;
        }
        while (v21);
      }
      v24 = v19 - 1;
      v25 = *(_QWORD *)(v7 + 120);
      v45 = *(unsigned int *)(v7 + 128);
      v26 = v25 + 8 * v19 + 8;
      v27 = *(unsigned int *)(v7 + 140);
      v28 = 1;
      for (i = v20; ; i = v30 + v28++)
      {
        v30 = i & v24;
        v31 = *(_QWORD **)(v25 + 8 * v30);
        if (v31 != (_QWORD *)-8)
        {
          if (!v31)
            goto LABEL_27;
          if (*(_DWORD *)(v26 + 4 * v30) == v20 && v18 == *v31 && (!v18 || !memcmp(a3, (char *)v31 + v27, v18)))
            break;
        }
      }
      if ((_DWORD)v30 == -1)
      {
LABEL_27:
        v19 = v45;
        v32 = v45;
      }
      else
      {
        v32 = (int)v30;
        v19 = v45;
      }
    }
    else
    {
      v32 = 0;
      v25 = *(_QWORD *)(v7 + 120);
      v27 = *(unsigned int *)(v7 + 140);
    }
    v46 = *(size_t **)(v25 + 8 * v32);
    if ((_DWORD)v19)
    {
      v33 = *v46;
      if (*v46)
      {
        v34 = 0;
        v35 = *v46;
        v36 = (unsigned __int8 *)v46 + v27;
        do
        {
          v37 = *v36++;
          v34 = 33 * v34 + v37;
          --v35;
        }
        while (v35);
      }
      else
      {
        v34 = 0;
      }
      v38 = v19 - 1;
      v39 = v25 + 8 * v19 + 8;
      v40 = 1;
      v41 = v34;
      while (1)
      {
        v42 = v41 & v38;
        v43 = *(_QWORD **)(v25 + 8 * v42);
        if (v43 != (_QWORD *)-8)
        {
          if (!v43)
            goto LABEL_41;
          if (*(_DWORD *)(v39 + 4 * v42) == v34
            && v33 == *v43
            && (!v33 || !memcmp((char *)v46 + v27, (char *)v43 + v27, v33)))
          {
            break;
          }
        }
        v41 = v40 + v42;
        ++v40;
      }
      *(_QWORD *)(v25 + 8 * (int)v42) = -8;
      *(int32x2_t *)(v7 + 132) = vadd_s32(*(int32x2_t *)(v7 + 132), (int32x2_t)0x1FFFFFFFFLL);
    }
LABEL_41:
    v44 = (void *)v46[4];
    if (v44 != (void *)v46[3])
      free(v44);
    JUMPOUT(0x1CAA32FB4);
  }
  return result;
}

uint64_t sub_1C5FC6464(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81AA450;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5FC64B0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81AA450;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5FC650C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  uint64_t ***v5;
  uint64_t ***v6;
  char v7;
  BOOL v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  int v24;
  int v25;
  uint64_t ***v26;
  char *v27;
  size_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ****v35;
  uint64_t ***v36;
  int v37;
  int v38;
  uint64_t ***v39;
  char *v40;
  size_t v41;
  size_t v42;
  char v43;
  std::string::size_type v44;
  std::string::size_type size;
  std::string *v46;
  unint64_t v47;
  std::string::size_type v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ****v53;
  uint64_t ***v54;
  int v55;
  int v56;
  unint64_t *v57;
  size_t v58;
  const void *v59;
  unint64_t v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  std::string *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  int v74;
  int32x2_t ***v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void **v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  uint64_t v86[4];
  __int16 v87;
  const char *v88;
  __int16 v89;
  uint64_t v90[4];
  __int16 v91;
  const char *v92;
  __int16 v93;
  uint64_t v94[5];
  uint64_t v95[5];
  uint64_t v96[5];
  uint64_t v97[5];
  void *__dst[2];
  unint64_t v99;
  __int16 v100;
  std::string v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;

  v80 = a2 + 24;
  v2 = *(_QWORD *)(a2 + 32);
  if (v2 != a2 + 24)
  {
    v4 = 0;
    v78 = a1 + 40;
    v79 = a1 + 16;
    while (1)
    {
      v5 = (uint64_t ***)(v2 - 56);
      v6 = v2 ? (uint64_t ***)(v2 - 56) : 0;
      v102 = 0;
      v103 = 0;
      v104 = 0;
      v7 = *(_BYTE *)(a1 + 39);
      v8 = v7 < 0;
      v9 = v7 >= 0 ? (char *)v79 : *(char **)(a1 + 16);
      v10 = v7 & 0x7F;
      v11 = v8 ? *(_QWORD *)(a1 + 24) : v10;
      llvm::Regex::Regex((uint64_t)__dst, v9, v11, 0);
      v12 = *(_BYTE *)(a1 + 63);
      v13 = v12 < 0;
      v14 = v12 >= 0 ? v78 : *(_QWORD *)(a1 + 40);
      v15 = v12 & 0x7F;
      v16 = v13 ? *(_QWORD *)(a1 + 48) : v15;
      v17 = v6 >> 4;
      if ((*((_BYTE *)v6 + 23) & 0x10) != 0)
        break;
      v28 = 0;
      v27 = &byte_1C871356D;
LABEL_27:
      llvm::Regex::sub((uint64_t)__dst, v14, v16, v27, v28, (uint64_t)&v102, &v101);
      llvm::Regex::~Regex((llvm::Regex *)__dst);
      v30 = HIBYTE(v104) & 0x7F;
      if (v104 < 0)
        v30 = v103;
      if (v30)
      {
        v92 = "unable to transforn ";
        v93 = 259;
        v91 = 261;
        v90[0] = (uint64_t)llvm::Value::getName((llvm::Value *)v6);
        v90[1] = v77;
        sub_1C6131AAC((uint64_t *)&v92, v90, (uint64_t)v94);
        v88 = " in ";
        v89 = 259;
        sub_1C6131AAC(v94, (uint64_t *)&v88, (uint64_t)v95);
        v87 = 260;
        v86[0] = a2 + 168;
        sub_1C6131AAC(v95, v86, (uint64_t)v96);
        v84 = ": ";
        v85 = 259;
        sub_1C6131AAC(v96, (uint64_t *)&v84, (uint64_t)v97);
        v83 = 260;
        v82 = &v102;
        sub_1C6131AAC(v97, (uint64_t *)&v82, (uint64_t)__dst);
        llvm::report_fatal_error((uint64_t)__dst, 1);
      }
      if ((*((_BYTE *)v6 + 23) & 0x10) != 0)
      {
        v31 = ***v6;
        v32 = *(_QWORD *)(v31 + 152);
        v33 = *(unsigned int *)(v31 + 168);
        if (!(_DWORD)v33)
          goto LABEL_37;
        LODWORD(v34) = (v33 - 1) & (v17 ^ (v6 >> 9));
        v35 = (uint64_t ****)(v32 + 16 * v34);
        v36 = *v35;
        if (*v35 != v6)
        {
          v37 = 1;
          while (v36 != (uint64_t ***)-4096)
          {
            v38 = v34 + v37++;
            v34 = v38 & (v33 - 1);
            v36 = *(uint64_t ****)(v32 + 16 * v34);
            if (v36 == v6)
            {
              v35 = (uint64_t ****)(v32 + 16 * v34);
              goto LABEL_38;
            }
          }
LABEL_37:
          v35 = (uint64_t ****)(v32 + 16 * v33);
        }
LABEL_38:
        v39 = v35[1];
        v42 = (size_t)*v39;
        v40 = (char *)(v39 + 2);
        v41 = v42;
        goto LABEL_39;
      }
      v41 = 0;
      v40 = &byte_1C871356D;
LABEL_39:
      v43 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
      size = v101.__r_.__value_.__l.__size_;
      v44 = v101.__r_.__value_.__r.__words[0];
      if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = &v101;
      else
        v46 = (std::string *)v101.__r_.__value_.__r.__words[0];
      v47 = *((_BYTE *)&v101.__r_.__value_.__s + 23) & 0x7F;
      if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = *((_BYTE *)&v101.__r_.__value_.__s + 23) & 0x7F;
      else
        v48 = v101.__r_.__value_.__l.__size_;
      if (v41 == v48 && (!v41 || !memcmp(v40, v46, v41)))
        goto LABEL_77;
      if (v2)
      {
        if ((*(_BYTE *)(v2 - 33) & 0x10) != 0)
        {
          v49 = ***v5;
          v50 = *(_QWORD *)(v49 + 152);
          v51 = *(unsigned int *)(v49 + 168);
          if (!(_DWORD)v51)
            goto LABEL_56;
          LODWORD(v52) = (v51 - 1) & ((v5 >> 4) ^ (v5 >> 9));
          v53 = (uint64_t ****)(v50 + 16 * v52);
          v54 = *v53;
          if (*v53 != v5)
          {
            v55 = 1;
            while (v54 != (uint64_t ***)-4096)
            {
              v56 = v52 + v55++;
              v52 = v56 & (v51 - 1);
              v54 = *(uint64_t ****)(v50 + 16 * v52);
              if (v54 == v5)
              {
                v53 = (uint64_t ****)(v50 + 16 * v52);
                goto LABEL_57;
              }
            }
LABEL_56:
            v53 = (uint64_t ****)(v50 + 16 * v51);
          }
LABEL_57:
          v57 = (unint64_t *)v53[1];
          v60 = *v57;
          v59 = v57 + 2;
          v58 = v60;
          if (v60 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          if (v58 >= 0x17)
          {
            v62 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v58 | 7) != 0x17)
              v62 = v58 | 7;
            v63 = v62 + 1;
            v61 = (void **)operator new(v62 + 1);
            __dst[1] = (void *)v58;
            v99 = v63 | 0x8000000000000000;
            __dst[0] = v61;
          }
          else
          {
            HIBYTE(v99) = v58;
            v61 = __dst;
            if (!v58)
              goto LABEL_65;
          }
          memmove(v61, v59, v58);
        }
        else
        {
          v58 = 0;
          HIBYTE(v99) = 0;
          v61 = __dst;
        }
LABEL_65:
        *((_BYTE *)v61 + v58) = 0;
        sub_1C5FC61F8(a2, (llvm::GlobalObject *)(v2 - 56), __dst, (uint64_t)&v101);
        if (SHIBYTE(v99) < 0)
          operator delete(__dst[0]);
        v43 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
        size = v101.__r_.__value_.__l.__size_;
        v44 = v101.__r_.__value_.__r.__words[0];
        v47 = *((_BYTE *)&v101.__r_.__value_.__s + 23) & 0x7F;
      }
      if (v43 >= 0)
        v64 = &v101;
      else
        v64 = (std::string *)v44;
      if (v43 >= 0)
        v65 = v47;
      else
        v65 = size;
      v66 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), (unsigned __int8 *)v64, v65);
      if (v66 && !*(_BYTE *)(v66 + 16))
      {
        if ((*(_BYTE *)(v66 + 23) & 0x10) != 0)
        {
          v67 = ***(_QWORD ***)v66;
          v68 = *(_QWORD *)(v67 + 152);
          v69 = *(unsigned int *)(v67 + 168);
          if (!(_DWORD)v69)
            goto LABEL_95;
          LODWORD(v70) = (v69 - 1) & ((v66 >> 4) ^ (v66 >> 9));
          v71 = (uint64_t *)(v68 + 16 * v70);
          v72 = *v71;
          if (*v71 != v66)
          {
            v73 = 1;
            while (v72 != -4096)
            {
              v74 = v70 + v73++;
              v70 = v74 & (v69 - 1);
              v72 = *(_QWORD *)(v68 + 16 * v70);
              if (v72 == v66)
              {
                v71 = (uint64_t *)(v68 + 16 * v70);
                goto LABEL_96;
              }
            }
LABEL_95:
            v71 = (uint64_t *)(v68 + 16 * v69);
          }
LABEL_96:
          v75 = (int32x2_t ***)v71[1];
        }
        else
        {
          v75 = 0;
        }
        llvm::Value::setValueName((int32x2_t ****)v6, v75);
        goto LABEL_76;
      }
      v100 = 260;
      __dst[0] = &v101;
      llvm::Value::setName(v6, (uint64_t)__dst);
LABEL_76:
      v4 = 1;
LABEL_77:
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v101.__r_.__value_.__l.__data_);
      if (SHIBYTE(v104) < 0)
        operator delete(v102);
      v2 = *(_QWORD *)(v2 + 8);
      if (v2 == v80)
        return v4 & 1;
    }
    v18 = ***v6;
    v19 = *(_QWORD *)(v18 + 152);
    v20 = *(unsigned int *)(v18 + 168);
    if ((_DWORD)v20)
    {
      LODWORD(v21) = (v20 - 1) & (v17 ^ (v6 >> 9));
      v22 = (uint64_t ****)(v19 + 16 * v21);
      v23 = *v22;
      if (*v22 == v6)
      {
LABEL_26:
        v26 = v22[1];
        v29 = (size_t)*v26;
        v27 = (char *)(v26 + 2);
        v28 = v29;
        goto LABEL_27;
      }
      v24 = 1;
      while (v23 != (uint64_t ***)-4096)
      {
        v25 = v21 + v24++;
        v21 = v25 & (v20 - 1);
        v23 = *(uint64_t ****)(v19 + 16 * v21);
        if (v23 == v6)
        {
          v22 = (uint64_t ****)(v19 + 16 * v21);
          goto LABEL_26;
        }
      }
    }
    v22 = (uint64_t ****)(v19 + 16 * v20);
    goto LABEL_26;
  }
  v4 = 0;
  return v4 & 1;
}

uint64_t sub_1C5FC6A5C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81AA478;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5FC6AA8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81AA478;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5FC6B04(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  char v5;
  int v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t ***v11;
  char v12;
  BOOL v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  int32x2_t ***v26;
  _QWORD v27[4];
  __int16 v28;

  v4 = (_BYTE *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 39);
  v6 = v5;
  if (v5 >= 0)
    v7 = (unsigned __int8 *)(a1 + 16);
  else
    v7 = *(unsigned __int8 **)(a1 + 16);
  v8 = v5 & 0x7F;
  if (v6 >= 0)
    v9 = v8;
  else
    v9 = *(_QWORD *)(a1 + 24);
  result = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), v7, v9);
  if (result)
  {
    v11 = (uint64_t ***)result;
    if (*(_BYTE *)(result + 16) == 3 && (*(_DWORD *)(result + 32) & 0xFu) - 7 >= 2)
    {
      sub_1C5FC61F8(a2, (llvm::GlobalObject *)result, v4, a1 + 40);
      v12 = *(_BYTE *)(a1 + 63);
      v13 = v12 < 0;
      if (v12 >= 0)
        v14 = (unsigned __int8 *)(a1 + 40);
      else
        v14 = *(unsigned __int8 **)(a1 + 40);
      v15 = v12 & 0x7F;
      if (v13)
        v16 = *(_QWORD *)(a1 + 48);
      else
        v16 = v15;
      v17 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), v14, v16);
      if (!v17 || *(_BYTE *)(v17 + 16) != 3 || (*(_DWORD *)(v17 + 32) & 0xFu) - 7 < 2)
      {
        v28 = 260;
        v27[0] = a1 + 40;
        llvm::Value::setName(v11, (uint64_t)v27);
        return 1;
      }
      if ((*(_BYTE *)(v17 + 23) & 0x10) == 0)
      {
        v26 = 0;
LABEL_31:
        llvm::Value::setValueName((int32x2_t ****)v11, v26);
        return 1;
      }
      v18 = ***(_QWORD ***)v17;
      v19 = *(_QWORD *)(v18 + 152);
      v20 = *(unsigned int *)(v18 + 168);
      if ((_DWORD)v20)
      {
        LODWORD(v21) = (v20 - 1) & ((v17 >> 4) ^ (v17 >> 9));
        v22 = (uint64_t *)(v19 + 16 * v21);
        v23 = *v22;
        if (*v22 == v17)
        {
LABEL_30:
          v26 = (int32x2_t ***)v22[1];
          goto LABEL_31;
        }
        v24 = 1;
        while (v23 != -4096)
        {
          v25 = v21 + v24++;
          v21 = v25 & (v20 - 1);
          v23 = *(_QWORD *)(v19 + 16 * v21);
          if (v23 == v17)
          {
            v22 = (uint64_t *)(v19 + 16 * v21);
            goto LABEL_30;
          }
        }
      }
      v22 = (uint64_t *)(v19 + 16 * v20);
      goto LABEL_30;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C5FC6CA4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81AA4A0;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5FC6CF0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81AA4A0;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5FC6D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  uint64_t ***v5;
  uint64_t ***v6;
  char v7;
  BOOL v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  int v24;
  int v25;
  uint64_t ***v26;
  char *v27;
  size_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ****v35;
  uint64_t ***v36;
  int v37;
  int v38;
  uint64_t ***v39;
  char *v40;
  size_t v41;
  size_t v42;
  char v43;
  std::string::size_type v44;
  std::string::size_type size;
  std::string *v46;
  unint64_t v47;
  std::string::size_type v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ****v53;
  uint64_t ***v54;
  int v55;
  int v56;
  unint64_t *v57;
  size_t v58;
  const void *v59;
  unint64_t v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  std::string *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  int v74;
  int32x2_t ***v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void **v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  uint64_t v86[4];
  __int16 v87;
  const char *v88;
  __int16 v89;
  uint64_t v90[4];
  __int16 v91;
  const char *v92;
  __int16 v93;
  uint64_t v94[5];
  uint64_t v95[5];
  uint64_t v96[5];
  uint64_t v97[5];
  void *__dst[2];
  unint64_t v99;
  __int16 v100;
  std::string v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;

  v80 = a2 + 8;
  v2 = *(_QWORD *)(a2 + 16);
  if (v2 != a2 + 8)
  {
    v4 = 0;
    v78 = a1 + 40;
    v79 = a1 + 16;
    while (1)
    {
      v5 = (uint64_t ***)(v2 - 56);
      v6 = v2 ? (uint64_t ***)(v2 - 56) : 0;
      v102 = 0;
      v103 = 0;
      v104 = 0;
      v7 = *(_BYTE *)(a1 + 39);
      v8 = v7 < 0;
      v9 = v7 >= 0 ? (char *)v79 : *(char **)(a1 + 16);
      v10 = v7 & 0x7F;
      v11 = v8 ? *(_QWORD *)(a1 + 24) : v10;
      llvm::Regex::Regex((uint64_t)__dst, v9, v11, 0);
      v12 = *(_BYTE *)(a1 + 63);
      v13 = v12 < 0;
      v14 = v12 >= 0 ? v78 : *(_QWORD *)(a1 + 40);
      v15 = v12 & 0x7F;
      v16 = v13 ? *(_QWORD *)(a1 + 48) : v15;
      v17 = v6 >> 4;
      if ((*((_BYTE *)v6 + 23) & 0x10) != 0)
        break;
      v28 = 0;
      v27 = &byte_1C871356D;
LABEL_27:
      llvm::Regex::sub((uint64_t)__dst, v14, v16, v27, v28, (uint64_t)&v102, &v101);
      llvm::Regex::~Regex((llvm::Regex *)__dst);
      v30 = HIBYTE(v104) & 0x7F;
      if (v104 < 0)
        v30 = v103;
      if (v30)
      {
        v92 = "unable to transforn ";
        v93 = 259;
        v91 = 261;
        v90[0] = (uint64_t)llvm::Value::getName((llvm::Value *)v6);
        v90[1] = v77;
        sub_1C6131AAC((uint64_t *)&v92, v90, (uint64_t)v94);
        v88 = " in ";
        v89 = 259;
        sub_1C6131AAC(v94, (uint64_t *)&v88, (uint64_t)v95);
        v87 = 260;
        v86[0] = a2 + 168;
        sub_1C6131AAC(v95, v86, (uint64_t)v96);
        v84 = ": ";
        v85 = 259;
        sub_1C6131AAC(v96, (uint64_t *)&v84, (uint64_t)v97);
        v83 = 260;
        v82 = &v102;
        sub_1C6131AAC(v97, (uint64_t *)&v82, (uint64_t)__dst);
        llvm::report_fatal_error((uint64_t)__dst, 1);
      }
      if ((*((_BYTE *)v6 + 23) & 0x10) != 0)
      {
        v31 = ***v6;
        v32 = *(_QWORD *)(v31 + 152);
        v33 = *(unsigned int *)(v31 + 168);
        if (!(_DWORD)v33)
          goto LABEL_37;
        LODWORD(v34) = (v33 - 1) & (v17 ^ (v6 >> 9));
        v35 = (uint64_t ****)(v32 + 16 * v34);
        v36 = *v35;
        if (*v35 != v6)
        {
          v37 = 1;
          while (v36 != (uint64_t ***)-4096)
          {
            v38 = v34 + v37++;
            v34 = v38 & (v33 - 1);
            v36 = *(uint64_t ****)(v32 + 16 * v34);
            if (v36 == v6)
            {
              v35 = (uint64_t ****)(v32 + 16 * v34);
              goto LABEL_38;
            }
          }
LABEL_37:
          v35 = (uint64_t ****)(v32 + 16 * v33);
        }
LABEL_38:
        v39 = v35[1];
        v42 = (size_t)*v39;
        v40 = (char *)(v39 + 2);
        v41 = v42;
        goto LABEL_39;
      }
      v41 = 0;
      v40 = &byte_1C871356D;
LABEL_39:
      v43 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
      size = v101.__r_.__value_.__l.__size_;
      v44 = v101.__r_.__value_.__r.__words[0];
      if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = &v101;
      else
        v46 = (std::string *)v101.__r_.__value_.__r.__words[0];
      v47 = *((_BYTE *)&v101.__r_.__value_.__s + 23) & 0x7F;
      if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = *((_BYTE *)&v101.__r_.__value_.__s + 23) & 0x7F;
      else
        v48 = v101.__r_.__value_.__l.__size_;
      if (v41 == v48 && (!v41 || !memcmp(v40, v46, v41)))
        goto LABEL_77;
      if (v2)
      {
        if ((*(_BYTE *)(v2 - 33) & 0x10) != 0)
        {
          v49 = ***v5;
          v50 = *(_QWORD *)(v49 + 152);
          v51 = *(unsigned int *)(v49 + 168);
          if (!(_DWORD)v51)
            goto LABEL_56;
          LODWORD(v52) = (v51 - 1) & ((v5 >> 4) ^ (v5 >> 9));
          v53 = (uint64_t ****)(v50 + 16 * v52);
          v54 = *v53;
          if (*v53 != v5)
          {
            v55 = 1;
            while (v54 != (uint64_t ***)-4096)
            {
              v56 = v52 + v55++;
              v52 = v56 & (v51 - 1);
              v54 = *(uint64_t ****)(v50 + 16 * v52);
              if (v54 == v5)
              {
                v53 = (uint64_t ****)(v50 + 16 * v52);
                goto LABEL_57;
              }
            }
LABEL_56:
            v53 = (uint64_t ****)(v50 + 16 * v51);
          }
LABEL_57:
          v57 = (unint64_t *)v53[1];
          v60 = *v57;
          v59 = v57 + 2;
          v58 = v60;
          if (v60 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          if (v58 >= 0x17)
          {
            v62 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v58 | 7) != 0x17)
              v62 = v58 | 7;
            v63 = v62 + 1;
            v61 = (void **)operator new(v62 + 1);
            __dst[1] = (void *)v58;
            v99 = v63 | 0x8000000000000000;
            __dst[0] = v61;
          }
          else
          {
            HIBYTE(v99) = v58;
            v61 = __dst;
            if (!v58)
              goto LABEL_65;
          }
          memmove(v61, v59, v58);
        }
        else
        {
          v58 = 0;
          HIBYTE(v99) = 0;
          v61 = __dst;
        }
LABEL_65:
        *((_BYTE *)v61 + v58) = 0;
        sub_1C5FC61F8(a2, (llvm::GlobalObject *)(v2 - 56), __dst, (uint64_t)&v101);
        if (SHIBYTE(v99) < 0)
          operator delete(__dst[0]);
        v43 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
        size = v101.__r_.__value_.__l.__size_;
        v44 = v101.__r_.__value_.__r.__words[0];
        v47 = *((_BYTE *)&v101.__r_.__value_.__s + 23) & 0x7F;
      }
      if (v43 >= 0)
        v64 = &v101;
      else
        v64 = (std::string *)v44;
      if (v43 >= 0)
        v65 = v47;
      else
        v65 = size;
      v66 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), (unsigned __int8 *)v64, v65);
      if (v66 && *(_BYTE *)(v66 + 16) == 3 && (*(_DWORD *)(v66 + 32) & 0xFu) - 7 >= 2)
      {
        if ((*(_BYTE *)(v66 + 23) & 0x10) != 0)
        {
          v67 = ***(_QWORD ***)v66;
          v68 = *(_QWORD *)(v67 + 152);
          v69 = *(unsigned int *)(v67 + 168);
          if (!(_DWORD)v69)
            goto LABEL_96;
          LODWORD(v70) = (v69 - 1) & ((v66 >> 4) ^ (v66 >> 9));
          v71 = (uint64_t *)(v68 + 16 * v70);
          v72 = *v71;
          if (*v71 != v66)
          {
            v73 = 1;
            while (v72 != -4096)
            {
              v74 = v70 + v73++;
              v70 = v74 & (v69 - 1);
              v72 = *(_QWORD *)(v68 + 16 * v70);
              if (v72 == v66)
              {
                v71 = (uint64_t *)(v68 + 16 * v70);
                goto LABEL_97;
              }
            }
LABEL_96:
            v71 = (uint64_t *)(v68 + 16 * v69);
          }
LABEL_97:
          v75 = (int32x2_t ***)v71[1];
        }
        else
        {
          v75 = 0;
        }
        llvm::Value::setValueName((int32x2_t ****)v6, v75);
        goto LABEL_76;
      }
      v100 = 260;
      __dst[0] = &v101;
      llvm::Value::setName(v6, (uint64_t)__dst);
LABEL_76:
      v4 = 1;
LABEL_77:
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v101.__r_.__value_.__l.__data_);
      if (SHIBYTE(v104) < 0)
        operator delete(v102);
      v2 = *(_QWORD *)(v2 + 8);
      if (v2 == v80)
        return v4 & 1;
    }
    v18 = ***v6;
    v19 = *(_QWORD *)(v18 + 152);
    v20 = *(unsigned int *)(v18 + 168);
    if ((_DWORD)v20)
    {
      LODWORD(v21) = (v20 - 1) & (v17 ^ (v6 >> 9));
      v22 = (uint64_t ****)(v19 + 16 * v21);
      v23 = *v22;
      if (*v22 == v6)
      {
LABEL_26:
        v26 = v22[1];
        v29 = (size_t)*v26;
        v27 = (char *)(v26 + 2);
        v28 = v29;
        goto LABEL_27;
      }
      v24 = 1;
      while (v23 != (uint64_t ***)-4096)
      {
        v25 = v21 + v24++;
        v21 = v25 & (v20 - 1);
        v23 = *(uint64_t ****)(v19 + 16 * v21);
        if (v23 == v6)
        {
          v22 = (uint64_t ****)(v19 + 16 * v21);
          goto LABEL_26;
        }
      }
    }
    v22 = (uint64_t ****)(v19 + 16 * v20);
    goto LABEL_26;
  }
  v4 = 0;
  return v4 & 1;
}

uint64_t sub_1C5FC72B4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81AA4C8;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5FC7300(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81AA4C8;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5FC735C(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned __int8 *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t ***v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  char v12;
  int v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  int32x2_t ***v26;
  uint64_t v27[4];
  __int16 v28;

  v4 = *(_BYTE *)(a1 + 39);
  if (v4 >= 0)
    v5 = (unsigned __int8 *)(a1 + 16);
  else
    v5 = *(unsigned __int8 **)(a1 + 16);
  if (v4 >= 0)
    v6 = v4 & 0x7F;
  else
    v6 = *(_QWORD *)(a1 + 24);
  result = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), v5, v6);
  if (result)
  {
    v8 = (uint64_t ***)result;
    if (*(_BYTE *)(result + 16) != 1)
      return 0;
    v11 = *(unsigned __int8 **)(a1 + 40);
    v10 = a1 + 40;
    v9 = v11;
    v12 = *(_BYTE *)(v10 + 23);
    v13 = v12;
    if (v12 >= 0)
      v14 = (unsigned __int8 *)v10;
    else
      v14 = v9;
    v15 = v12 & 0x7F;
    if (v13 >= 0)
      v16 = v15;
    else
      v16 = *(_QWORD *)(v10 + 8);
    v17 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), v14, v16);
    if (!v17 || *(_BYTE *)(v17 + 16) != 1)
    {
      v28 = 260;
      v27[0] = v10;
      llvm::Value::setName(v8, (uint64_t)v27);
      return 1;
    }
    if ((*(_BYTE *)(v17 + 23) & 0x10) == 0)
    {
      v26 = 0;
LABEL_29:
      llvm::Value::setValueName((int32x2_t ****)v8, v26);
      return 1;
    }
    v18 = ***(_QWORD ***)v17;
    v19 = *(_QWORD *)(v18 + 152);
    v20 = *(unsigned int *)(v18 + 168);
    if ((_DWORD)v20)
    {
      LODWORD(v21) = (v20 - 1) & ((v17 >> 4) ^ (v17 >> 9));
      v22 = (uint64_t *)(v19 + 16 * v21);
      v23 = *v22;
      if (*v22 == v17)
      {
LABEL_28:
        v26 = (int32x2_t ***)v22[1];
        goto LABEL_29;
      }
      v24 = 1;
      while (v23 != -4096)
      {
        v25 = v21 + v24++;
        v21 = v25 & (v20 - 1);
        v23 = *(_QWORD *)(v19 + 16 * v21);
        if (v23 == v17)
        {
          v22 = (uint64_t *)(v19 + 16 * v21);
          goto LABEL_28;
        }
      }
    }
    v22 = (uint64_t *)(v19 + 16 * v20);
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_1C5FC74B4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81AA4F0;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5FC7500(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81AA4F0;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5FC755C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ***v4;
  char v5;
  BOOL v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ****v20;
  uint64_t ***v21;
  int v22;
  int v23;
  uint64_t ***v24;
  char *v25;
  size_t v26;
  size_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ****v34;
  uint64_t ***v35;
  int v36;
  int v37;
  uint64_t ***v38;
  char *v39;
  size_t v40;
  size_t v41;
  char v42;
  std::string::size_type size;
  std::string::size_type v44;
  std::string *v45;
  unint64_t v46;
  std::string::size_type v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ****v53;
  uint64_t ***v54;
  int v55;
  int v56;
  unint64_t *v57;
  size_t v58;
  const void *v59;
  unint64_t v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  std::string *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  int v74;
  int32x2_t ***v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v82;
  void **v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  uint64_t v87[4];
  __int16 v88;
  const char *v89;
  __int16 v90;
  uint64_t v91[4];
  __int16 v92;
  const char *v93;
  __int16 v94;
  uint64_t v95[5];
  uint64_t v96[5];
  uint64_t v97[5];
  uint64_t v98[5];
  void *__dst[2];
  unint64_t v100;
  __int16 v101;
  std::string v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;

  v80 = a2 + 40;
  v2 = *(_QWORD *)(a2 + 48);
  if (v2 != a2 + 40)
  {
    v82 = 0;
    v78 = a1 + 40;
    v79 = a1 + 16;
    while (1)
    {
      v4 = v2 ? (uint64_t ***)(v2 - 48) : 0;
      v103 = 0;
      v104 = 0;
      v105 = 0;
      v5 = *(_BYTE *)(a1 + 39);
      v6 = v5 < 0;
      v7 = v5 >= 0 ? (char *)v79 : *(char **)(a1 + 16);
      v8 = v5 & 0x7F;
      v9 = v6 ? *(_QWORD *)(a1 + 24) : v8;
      llvm::Regex::Regex((uint64_t)__dst, v7, v9, 0);
      v10 = *(_BYTE *)(a1 + 63);
      v11 = v10 < 0;
      v12 = v10 >= 0 ? v78 : *(_QWORD *)(a1 + 40);
      v13 = v10 & 0x7F;
      v14 = v11 ? *(_QWORD *)(a1 + 48) : v13;
      v15 = v4 >> 4;
      if ((*((_BYTE *)v4 + 23) & 0x10) != 0)
        break;
      v26 = 0;
      v25 = &byte_1C871356D;
LABEL_27:
      llvm::Regex::sub((uint64_t)__dst, v12, v14, v25, v26, (uint64_t)&v103, &v102);
      llvm::Regex::~Regex((llvm::Regex *)__dst);
      v28 = HIBYTE(v105) & 0x7F;
      if (v105 < 0)
        v28 = v104;
      if (v28)
      {
        v93 = "unable to transforn ";
        v94 = 259;
        v92 = 261;
        v91[0] = (uint64_t)llvm::Value::getName((llvm::Value *)v4);
        v91[1] = v77;
        sub_1C6131AAC((uint64_t *)&v93, v91, (uint64_t)v95);
        v89 = " in ";
        v90 = 259;
        sub_1C6131AAC(v95, (uint64_t *)&v89, (uint64_t)v96);
        v88 = 260;
        v87[0] = a2 + 168;
        sub_1C6131AAC(v96, v87, (uint64_t)v97);
        v85 = ": ";
        v86 = 259;
        sub_1C6131AAC(v97, (uint64_t *)&v85, (uint64_t)v98);
        v84 = 260;
        v83 = &v103;
        sub_1C6131AAC(v98, (uint64_t *)&v83, (uint64_t)__dst);
        llvm::report_fatal_error((uint64_t)__dst, 1);
      }
      v29 = *((_DWORD *)v4 + 5);
      if ((v29 & 0x10000000) != 0)
      {
        v30 = ***v4;
        v31 = *(_QWORD *)(v30 + 152);
        v32 = *(unsigned int *)(v30 + 168);
        if (!(_DWORD)v32)
          goto LABEL_37;
        LODWORD(v33) = (v32 - 1) & (v15 ^ (v4 >> 9));
        v34 = (uint64_t ****)(v31 + 16 * v33);
        v35 = *v34;
        if (*v34 != v4)
        {
          v36 = 1;
          while (v35 != (uint64_t ***)-4096)
          {
            v37 = v33 + v36++;
            v33 = v37 & (v32 - 1);
            v35 = *(uint64_t ****)(v31 + 16 * v33);
            if (v35 == v4)
            {
              v34 = (uint64_t ****)(v31 + 16 * v33);
              goto LABEL_38;
            }
          }
LABEL_37:
          v34 = (uint64_t ****)(v31 + 16 * v32);
        }
LABEL_38:
        v38 = v34[1];
        v41 = (size_t)*v38;
        v39 = (char *)(v38 + 2);
        v40 = v41;
        goto LABEL_39;
      }
      v40 = 0;
      v39 = &byte_1C871356D;
LABEL_39:
      v42 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      size = v102.__r_.__value_.__l.__size_;
      v44 = v102.__r_.__value_.__r.__words[0];
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &v102;
      else
        v45 = (std::string *)v102.__r_.__value_.__r.__words[0];
      v46 = *((_BYTE *)&v102.__r_.__value_.__s + 23) & 0x7F;
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = *((_BYTE *)&v102.__r_.__value_.__s + 23) & 0x7F;
      else
        v47 = v102.__r_.__value_.__l.__size_;
      if (v40 == v47 && (!v40 || !memcmp(v39, v45, v40)))
        goto LABEL_92;
      v48 = *((unsigned __int8 *)v4 + 16);
      if (v48 <= 3 && v48 != 1)
      {
        if ((v29 & 0x10000000) != 0)
        {
          v49 = ***v4;
          v50 = *(_QWORD *)(v49 + 152);
          v51 = *(unsigned int *)(v49 + 168);
          if (!(_DWORD)v51)
            goto LABEL_57;
          LODWORD(v52) = (v51 - 1) & (v15 ^ (v4 >> 9));
          v53 = (uint64_t ****)(v50 + 16 * v52);
          v54 = *v53;
          if (*v53 != v4)
          {
            v55 = 1;
            while (v54 != (uint64_t ***)-4096)
            {
              v56 = v52 + v55++;
              v52 = v56 & (v51 - 1);
              v54 = *(uint64_t ****)(v50 + 16 * v52);
              if (v54 == v4)
              {
                v53 = (uint64_t ****)(v50 + 16 * v52);
                goto LABEL_58;
              }
            }
LABEL_57:
            v53 = (uint64_t ****)(v50 + 16 * v51);
          }
LABEL_58:
          v57 = (unint64_t *)v53[1];
          v60 = *v57;
          v59 = v57 + 2;
          v58 = v60;
          if (v60 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          if (v58 >= 0x17)
          {
            v62 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v58 | 7) != 0x17)
              v62 = v58 | 7;
            v63 = v62 + 1;
            v61 = (void **)operator new(v62 + 1);
            __dst[1] = (void *)v58;
            v100 = v63 | 0x8000000000000000;
            __dst[0] = v61;
          }
          else
          {
            HIBYTE(v100) = v58;
            v61 = __dst;
            if (!v58)
              goto LABEL_66;
          }
          memmove(v61, v59, v58);
        }
        else
        {
          v58 = 0;
          HIBYTE(v100) = 0;
          v61 = __dst;
        }
LABEL_66:
        *((_BYTE *)v61 + v58) = 0;
        sub_1C5FC61F8(a2, (llvm::GlobalObject *)(v2 - 48), __dst, (uint64_t)&v102);
        if (SHIBYTE(v100) < 0)
          operator delete(__dst[0]);
        v42 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
        size = v102.__r_.__value_.__l.__size_;
        v44 = v102.__r_.__value_.__r.__words[0];
        v46 = *((_BYTE *)&v102.__r_.__value_.__s + 23) & 0x7F;
      }
      if (v42 >= 0)
        v64 = &v102;
      else
        v64 = (std::string *)v44;
      if (v42 >= 0)
        v65 = v46;
      else
        v65 = size;
      v66 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), (unsigned __int8 *)v64, v65);
      if (v66 && *(_BYTE *)(v66 + 16) == 1)
      {
        if ((*(_BYTE *)(v66 + 23) & 0x10) != 0)
        {
          v67 = ***(_QWORD ***)v66;
          v68 = *(_QWORD *)(v67 + 152);
          v69 = *(unsigned int *)(v67 + 168);
          if (!(_DWORD)v69)
            goto LABEL_88;
          LODWORD(v70) = (v69 - 1) & ((v66 >> 4) ^ (v66 >> 9));
          v71 = (uint64_t *)(v68 + 16 * v70);
          v72 = *v71;
          if (*v71 != v66)
          {
            v73 = 1;
            while (v72 != -4096)
            {
              v74 = v70 + v73++;
              v70 = v74 & (v69 - 1);
              v72 = *(_QWORD *)(v68 + 16 * v70);
              if (v72 == v66)
              {
                v71 = (uint64_t *)(v68 + 16 * v70);
                goto LABEL_89;
              }
            }
LABEL_88:
            v71 = (uint64_t *)(v68 + 16 * v69);
          }
LABEL_89:
          v75 = (int32x2_t ***)v71[1];
        }
        else
        {
          v75 = 0;
        }
        llvm::Value::setValueName((int32x2_t ****)v4, v75);
        goto LABEL_91;
      }
      v101 = 260;
      __dst[0] = &v102;
      llvm::Value::setName(v4, (uint64_t)__dst);
LABEL_91:
      v82 = 1;
LABEL_92:
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
      if (SHIBYTE(v105) < 0)
        operator delete(v103);
      v2 = *(_QWORD *)(v2 + 8);
      if (v2 == v80)
        return v82 & 1;
    }
    v16 = ***v4;
    v17 = *(_QWORD *)(v16 + 152);
    v18 = *(unsigned int *)(v16 + 168);
    if ((_DWORD)v18)
    {
      LODWORD(v19) = (v18 - 1) & (v15 ^ (v4 >> 9));
      v20 = (uint64_t ****)(v17 + 16 * v19);
      v21 = *v20;
      if (*v20 == v4)
      {
LABEL_26:
        v24 = v20[1];
        v27 = (size_t)*v24;
        v25 = (char *)(v24 + 2);
        v26 = v27;
        goto LABEL_27;
      }
      v22 = 1;
      while (v21 != (uint64_t ***)-4096)
      {
        v23 = v19 + v22++;
        v19 = v23 & (v18 - 1);
        v21 = *(uint64_t ****)(v17 + 16 * v19);
        if (v21 == v4)
        {
          v20 = (uint64_t ****)(v17 + 16 * v19);
          goto LABEL_26;
        }
      }
    }
    v20 = (uint64_t ****)(v17 + 16 * v18);
    goto LABEL_26;
  }
  v82 = 0;
  return v82 & 1;
}

uint64_t sub_1C5FC7AB8()
{
  int v1;
  __int128 v2;
  __int128 v3;

  *(_QWORD *)&v3 = "Symbol Rewrite Map";
  *((_QWORD *)&v3 + 1) = 18;
  *(_QWORD *)&v2 = "filename";
  *((_QWORD *)&v2 + 1) = 8;
  v1 = 1;
  sub_1C63BAF2C(&v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C50A4924, &qword_1ED838420, &dword_1C475E000);
}

void llvm::initializeUnifyFunctionExitNodesLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED8384F8);
  if (v2 != -1)
  {
    v5[0] = sub_1C5FC7B84;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED8384F8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5FC7B84(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Unify function exit nodes";
  *(_QWORD *)(v2 + 8) = 25;
  *(_QWORD *)(v2 + 16) = "mergereturn";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &llvm::UnifyFunctionExitNodesLegacyPass::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::UnifyFunctionExitNodesLegacyPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::UnifyFunctionExitNodesLegacyPass::runOnFunction(llvm::UnifyFunctionExitNodesLegacyPass *this, llvm::LLVMContext ***a2)
{
  _BOOL4 v3;

  v3 = sub_1C5FC7C48((uint64_t)a2);
  return v3 | sub_1C5FC7F24(a2);
}

BOOL sub_1C5FC7C48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  llvm::BasicBlock *v24;
  llvm::BasicBlock *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _DWORD *v31;
  const char *v33;
  __int16 v34;

  v2 = a1 + 72;
  v3 = *(_QWORD *)(a1 + 80);
  if (v3 != a1 + 72)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      if (v3)
        v7 = v3 - 24;
      else
        v7 = 0;
      v8 = *(_QWORD *)(v7 + 40);
      if (v8)
        v9 = v8 - 24;
      else
        v9 = 0;
      if (*(unsigned __int8 *)(v9 + 16) - 29 >= 0xB)
        v9 = 0;
      if (*(_BYTE *)(v9 + 16) == 35)
      {
        if (v6 >= v4)
        {
          v11 = (v6 - v5) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            abort();
          if ((v4 - v5) >> 2 > v12)
            v12 = (v4 - v5) >> 2;
          if ((unint64_t)(v4 - v5) >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
          {
            if (v13 >> 61)
              sub_1C4764EE4();
            v14 = (char *)operator new(8 * v13);
          }
          else
          {
            v14 = 0;
          }
          v15 = &v14[8 * v11];
          *(_QWORD *)v15 = v7;
          v10 = v15 + 8;
          while (v6 != v5)
          {
            v16 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *((_QWORD *)v15 - 1) = v16;
            v15 -= 8;
          }
          v4 = &v14[8 * v13];
          if (v5)
            operator delete(v5);
          v5 = v15;
          goto LABEL_31;
        }
        *(_QWORD *)v6 = v7;
        v6 += 8;
      }
      v10 = v6;
LABEL_31:
      v3 = *(_QWORD *)(v3 + 8);
      v6 = v10;
      if (v3 == v2)
        goto LABEL_34;
    }
  }
  v10 = 0;
  v5 = 0;
LABEL_34:
  if ((unint64_t)(v10 - v5) > 8)
  {
    v17 = **(_QWORD ***)a1;
    v33 = "UnifiedUnreachableBlock";
    v34 = 259;
    v18 = operator new();
    *(_QWORD *)v18 = *v17 + 1600;
    *(_QWORD *)(v18 + 8) = 0;
    v19 = *(_DWORD *)(v18 + 20) & 0xC0000000;
    *(_DWORD *)(v18 + 16) = 22;
    *(_DWORD *)(v18 + 20) = v19;
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 40) = v18 + 40;
    *(_QWORD *)(v18 + 48) = v18 + 40;
    *(_QWORD *)(v18 + 56) = 0;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v2, (_QWORD *)v18);
    v20 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(v18 + 32) = v2;
    *(_QWORD *)(v18 + 24) = v20;
    *(_QWORD *)(v20 + 8) = v18 + 24;
    *(_QWORD *)(a1 + 72) = v18 + 24;
    llvm::Value::setName((uint64_t ***)v18, (uint64_t)&v33);
    v21 = (char *)operator new(0x40uLL);
    *(_QWORD *)v21 = ***(_QWORD ***)a1 + 1576;
    *((_QWORD *)v21 + 1) = 0;
    v21[16] = 35;
    *(_OWORD *)(v21 + 44) = 0u;
    *(_OWORD *)(v21 + 33) = 0u;
    *(_OWORD *)(v21 + 17) = 0u;
    *(_WORD *)(v18 + 18) &= ~0x8000u;
    v22 = *(_QWORD *)(v18 + 40);
    *((_QWORD *)v21 + 4) = v18 + 40;
    *((_QWORD *)v21 + 5) = v18;
    *((_QWORD *)v21 + 3) = v22;
    v21 += 24;
    *(_QWORD *)(v22 + 8) = v21;
    *(_QWORD *)(v18 + 40) = v21;
    if (v5 != v10)
    {
      v23 = v5;
      do
      {
        v25 = *(llvm::BasicBlock **)v23;
        v23 += 8;
        v24 = v25;
        v26 = (uint64_t)v25 + 40;
        v27 = *((_QWORD *)v25 + 5);
        if (v27)
          v28 = v27 - 24;
        else
          v28 = 0;
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v26, (uint64_t ***)v28);
        v29 = *(_QWORD *)(v28 + 24);
        v30 = *(_QWORD **)(v28 + 32);
        *v30 = v29;
        *(_QWORD *)(v29 + 8) = v30;
        *(_QWORD *)(v28 + 24) = 0;
        *(_QWORD *)(v28 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v28);
        v31 = operator new(0x60uLL);
        v31[13] = v31[13] & 0x38000000 | 1;
        *(_QWORD *)v31 = 0;
        *((_QWORD *)v31 + 1) = 0;
        *((_QWORD *)v31 + 2) = 0;
        *((_QWORD *)v31 + 3) = v31 + 8;
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v31 + 8), (llvm::BasicBlock *)v18, v24);
      }
      while (v23 != v10);
    }
  }
  if (v5)
    operator delete(v5);
  return (unint64_t)(v10 - v5) > 8;
}

BOOL sub_1C5FC7F24(llvm::LLVMContext ***a1)
{
  uint64_t v1;
  llvm::LLVMContext **v2;
  char *v3;
  char *v4;
  char *v5;
  llvm::LLVMContext **v6;
  llvm::LLVMContext *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  llvm::LLVMContext *v18;
  uint64_t v19;
  unsigned int v20;
  llvm::LLVMContext **v21;
  uint64_t v22;
  llvm::LLVMContext *v23;
  llvm::ReturnInst *v24;
  llvm::Value *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  llvm::LLVMContext *v32;
  _DWORD *v33;
  uint64_t *v34;
  llvm::BasicBlock *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  llvm::ValueSymbolTable *v46;
  _QWORD v48[4];
  __int16 v49;

  v1 = (uint64_t)(a1 + 9);
  v2 = a1[10];
  if (v2 != (llvm::LLVMContext **)(a1 + 9))
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    while (1)
    {
      if (v2)
        v6 = v2 - 3;
      else
        v6 = 0;
      v7 = v6[5];
      if (v7)
        v8 = (uint64_t)v7 - 24;
      else
        v8 = 0;
      if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB)
        v8 = 0;
      if (*(_BYTE *)(v8 + 16) == 29)
      {
        if (v5 >= v3)
        {
          v10 = (v5 - v4) >> 3;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61)
            abort();
          if ((v3 - v4) >> 2 > v11)
            v11 = (v3 - v4) >> 2;
          if ((unint64_t)(v3 - v4) >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
          {
            if (v12 >> 61)
              sub_1C4764EE4();
            v13 = (char *)operator new(8 * v12);
          }
          else
          {
            v13 = 0;
          }
          v14 = &v13[8 * v10];
          *(_QWORD *)v14 = v6;
          v9 = v14 + 8;
          while (v5 != v4)
          {
            v15 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *((_QWORD *)v14 - 1) = v15;
            v14 -= 8;
          }
          v3 = &v13[8 * v12];
          if (v4)
            operator delete(v4);
          v4 = v14;
          goto LABEL_31;
        }
        *(_QWORD *)v5 = v6;
        v5 += 8;
      }
      v9 = v5;
LABEL_31:
      v2 = (llvm::LLVMContext **)v2[1];
      v5 = v9;
      if (v2 == (llvm::LLVMContext **)v1)
        goto LABEL_34;
    }
  }
  v9 = 0;
  v4 = 0;
LABEL_34:
  v16 = v9 - v4;
  if ((unint64_t)(v9 - v4) > 8)
  {
    v18 = **a1;
    v48[0] = "UnifiedReturnBlock";
    v49 = 259;
    v19 = operator new();
    *(_QWORD *)v19 = *(_QWORD *)v18 + 1600;
    *(_QWORD *)(v19 + 8) = 0;
    v20 = *(_DWORD *)(v19 + 20) & 0xC0000000;
    *(_DWORD *)(v19 + 16) = 22;
    *(_DWORD *)(v19 + 20) = v20;
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = v19 + 40;
    *(_QWORD *)(v19 + 48) = v19 + 40;
    *(_QWORD *)(v19 + 56) = 0;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v1, (_QWORD *)v19);
    v21 = a1[9];
    *(_QWORD *)(v19 + 32) = v1;
    *(_QWORD *)(v19 + 24) = v21;
    v21[1] = (llvm::LLVMContext *)(v19 + 24);
    a1[9] = (llvm::LLVMContext **)(v19 + 24);
    llvm::Value::setName((uint64_t ***)v19, (uint64_t)v48);
    v22 = *(_QWORD *)a1[3][2];
    if (*(_BYTE *)(v22 + 8) == 7)
    {
      v23 = **a1;
      v24 = (llvm::ReturnInst *)operator new(0x40uLL);
      *((_DWORD *)v24 + 5) &= 0x38000000u;
      llvm::ReturnInst::ReturnInst(v24, v23, 0, (llvm::BasicBlock *)v19);
      v25 = 0;
    }
    else
    {
      v48[0] = "UnifiedRetVal";
      v49 = 259;
      v26 = operator new(0x48uLL);
      v26[1] = v22;
      v25 = (llvm::Value *)(v26 + 1);
      *v26 = 0;
      v26[2] = 0;
      v26[3] = 0x4000000000000053;
      *((_OWORD *)v26 + 2) = 0u;
      v27 = (char *)(v26 + 4);
      *((_OWORD *)v26 + 3) = 0u;
      *((_DWORD *)v26 + 16) = 0;
      *((_DWORD *)v26 + 17) = v16 >> 3;
      llvm::Value::setName((uint64_t ***)v26 + 1, (uint64_t)v48);
      v28 = *((unsigned int *)v26 + 17);
      v29 = operator new(40 * v28);
      *v26 = v29;
      if ((_DWORD)v28)
      {
        v30 = &v29[4 * v28];
        do
        {
          *v29 = 0;
          v29[1] = 0;
          v29[2] = 0;
          v29[3] = v25;
          v29 += 4;
        }
        while (v29 != v30);
      }
      v26[6] = v19;
      *(_WORD *)(v19 + 18) &= ~0x8000u;
      if ((*((_BYTE *)v26 + 31) & 0x10) != 0)
      {
        v45 = *(_QWORD *)(v19 + 56);
        if (v45)
        {
          v46 = *(llvm::ValueSymbolTable **)(v45 + 104);
          if (v46)
            llvm::ValueSymbolTable::reinsertValue(v46, v25);
        }
      }
      v31 = *(_QWORD *)(v19 + 40);
      v26[4] = v31;
      v26[5] = v19 + 40;
      *(_QWORD *)(v31 + 8) = v27;
      *(_QWORD *)(v19 + 40) = v27;
      v32 = **a1;
      v33 = operator new(0x60uLL);
      v33[13] = v33[13] & 0x38000000 | 1;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = 0;
      *((_QWORD *)v33 + 3) = v33 + 8;
      llvm::ReturnInst::ReturnInst((llvm::ReturnInst *)(v33 + 8), v32, v25, (llvm::BasicBlock *)v19);
    }
    if (v4 != v9)
    {
      v34 = (uint64_t *)v4;
      do
      {
        v35 = (llvm::BasicBlock *)*v34;
        if (v25)
        {
          v36 = (_QWORD *)*((_QWORD *)v35 + 5);
          if (v36 == (_QWORD *)((char *)v35 + 40))
          {
            v37 = 0;
          }
          else
          {
            if (v36)
              v37 = v36 - 3;
            else
              v37 = 0;
            if (*((unsigned __int8 *)v37 + 16) - 29 >= 0xB)
              v37 = 0;
          }
          v38 = *((_DWORD *)v37 + 5);
          if ((v38 & 0x40000000) != 0)
            v39 = (uint64_t *)*(v37 - 1);
          else
            v39 = &v37[-4 * (v38 & 0x7FFFFFF)];
          sub_1C477667C(v25, *v39, *v34);
        }
        v40 = *((_QWORD *)v35 + 5);
        if (v40)
          v41 = v40 - 24;
        else
          v41 = 0;
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)v35 + 40, (uint64_t ***)v41);
        v42 = *(_QWORD *)(v41 + 24);
        v43 = *(_QWORD **)(v41 + 32);
        *v43 = v42;
        *(_QWORD *)(v42 + 8) = v43;
        *(_QWORD *)(v41 + 24) = 0;
        *(_QWORD *)(v41 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v41);
        v44 = operator new(0x60uLL);
        v44[13] = v44[13] & 0x38000000 | 1;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
        *((_QWORD *)v44 + 2) = 0;
        *((_QWORD *)v44 + 3) = v44 + 8;
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v44 + 8), (llvm::BasicBlock *)v19, v35);
        ++v34;
      }
      while (v34 != (uint64_t *)v9);
    }
  }
  if (v4)
    operator delete(v4);
  return v16 > 8;
}

uint64_t sub_1C5FC8374(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5893;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81AA5B8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED838500);
  if (v3 != -1)
  {
    v7[0] = sub_1C5FC849C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED838500, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::initializeUnifyLoopExitsLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED838500);
  if (v2 != -1)
  {
    v5[0] = sub_1C5FC849C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED838500, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5FC849C(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeLowerSwitchLegacyPassPass(a1, a2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Fixup each natural loop to have a single exit block";
  *(_QWORD *)(v3 + 8) = 51;
  *(_QWORD *)(v3 + 16) = "unify-loop-exits";
  *(_QWORD *)(v3 + 24) = 16;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F5893;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5FC9104;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

_QWORD *llvm::UnifyLoopExitsPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t ResultImpl;
  BOOL v8;

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1);
  v8 = sub_1C5FC8608(v6, (llvm::DominatorTree *)(ResultImpl + 8));
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if (!v8)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  sub_1C4DDB144(a3, (uint64_t)&llvm::LoopAnalysis::Key);
  return sub_1C4DDB144(a3, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
}

BOOL sub_1C5FC8608(uint64_t a1, llvm::DominatorTree *a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  void **v7;
  _BOOL8 result;
  char *v9;
  char *v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void **v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  void **v22;
  int v23;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  uint64_t j;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  unsigned int v49;
  llvm::User **v51;
  uint64_t v52;
  llvm::UndefValue *v53;
  const llvm::BasicBlock **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void ***v59;
  void **v60;
  int v61;
  int v62;
  void **v63;
  void *v64;
  char *v65;
  void *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  llvm::Value *v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  const llvm::BasicBlock **v78;
  const llvm::BasicBlock **v79;
  const llvm::BasicBlock *v80;
  llvm::Type *v81;
  llvm::PHINode *v82;
  llvm::UndefValue *v83;
  llvm::User **v84;
  uint64_t v85;
  llvm::User *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  llvm::ValueSymbolTable *v90;
  unint64_t v91;
  int v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  llvm::DominatorTree *v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  void **v100;
  _QWORD *v101;
  const llvm::BasicBlock **v102;
  uint64_t v103[2];
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[2];
  int v109;
  const llvm::BasicBlock **v110;
  const llvm::BasicBlock **v111;
  uint64_t v112;
  _QWORD v113[4];
  __int16 v114;
  _QWORD v115[2];
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  unsigned int v121;
  uint64_t v122;
  void *v123[2];
  _QWORD v124[36];
  char v125;
  _BYTE *v126;
  void *v127;
  uint64_t v128;
  int v129;
  _BYTE v130[64];
  _BYTE v131[24];
  __int16 v132;
  void *v133;
  uint64_t v134;
  _BYTE v135[64];
  void *v136;
  uint64_t v137;
  _BYTE v138[64];
  void **v139;
  llvm::User **v140;
  uint64_t v141;
  _QWORD v142[10];

  v3 = a1;
  v142[8] = *MEMORY[0x1E0C80C00];
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder(a1, (uint64_t)&v120);
  v4 = (uint64_t *)v120;
  if (!v121)
  {
    LOBYTE(v5) = 0;
    goto LABEL_130;
  }
  v5 = 0;
  v93 = (char *)v120 + 8 * v121;
  v95 = v3;
  v96 = a2;
  do
  {
    v94 = v4;
    v6 = (_QWORD *)*v4;
    v108[0] = 0;
    v108[1] = 0;
    v109 = 0;
    v111 = 0;
    v112 = 0;
    v110 = 0;
    v103[0] = 0;
    v103[1] = 0;
    v104 = 0;
    v106 = 0;
    v107 = 0;
    v105 = 0;
    v136 = v138;
    v137 = 0x800000000;
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(v6, (uint64_t)&v136);
    if ((_DWORD)v137)
    {
      v7 = (void **)v136;
      v100 = (void **)((char *)v136 + 8 * v137);
      do
      {
        v123[0] = 0;
        v123[0] = *v7;
        result = sub_1C5ACED14((uint64_t)v108, v123);
        v9 = (char *)*((_QWORD *)v123[0] + 5);
        if (v9 != (char *)v123[0] + 40)
        {
          if (v9)
            v10 = v9 - 24;
          else
            v10 = 0;
          v11 = v10[16];
          v12 = v11 - 29;
          if (v11 != 30)
          {
            v13 = 2;
            switch(v12)
            {
              case 1:
                __break(1u);
                return result;
              case 2:
                v13 = (*((_DWORD *)v10 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_33;
              case 3:
              case 9:
                v13 = (*((_DWORD *)v10 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_33;
              case 4:
                goto LABEL_13;
              case 7:
                v13 = *((_WORD *)v10 + 9) & 1;
                goto LABEL_33;
              case 8:
                v13 = 1;
                goto LABEL_13;
              case 10:
                v13 = *((_DWORD *)v10 + 20) + 1;
LABEL_33:
                if (!v13)
                  goto LABEL_30;
                goto LABEL_13;
              default:
                goto LABEL_30;
            }
          }
          if ((*((_DWORD *)v10 + 5) & 0x7FFFFFF) == 3)
            v13 = 2;
          else
            v13 = 1;
LABEL_13:
          v14 = 0;
          v15 = v13;
          do
          {
            v139 = 0;
            v16 = v10[16];
            if (v16 != 30)
              __asm { BR              X9 }
            v17 = *(void ***)&v10[-32 * v14 - 32];
            v139 = v17;
            v18 = *(_DWORD *)(v3 + 16);
            if (v18)
            {
              v19 = *(_QWORD *)v3;
              v20 = v18 - 1;
              v21 = ((v17 >> 4) ^ (v17 >> 9)) & (v18 - 1);
              v22 = *(void ***)(*(_QWORD *)v3 + 16 * v21);
              if (v17 == v22)
              {
LABEL_20:
                v25 = *(_QWORD **)(v19 + 16 * v21 + 8);
                goto LABEL_22;
              }
              v23 = 1;
              while (v22 != (void **)-4096)
              {
                v24 = v21 + v23++;
                v21 = v24 & v20;
                v22 = *(void ***)(v19 + 16 * v21);
                if (v17 == v22)
                  goto LABEL_20;
              }
            }
            v25 = 0;
LABEL_22:
            while (v25 != v6)
            {
              if (!v25)
              {
                sub_1C5ACED14((uint64_t)v103, &v139);
                break;
              }
              v25 = (_QWORD *)*v25;
            }
            ++v14;
          }
          while (v14 != v15);
        }
LABEL_30:
        ++v7;
      }
      while (v7 != v100);
    }
    v26 = v106 - v105;
    if ((unint64_t)(v106 - v105) > 8)
    {
      v92 = v5;
      v91 = v106 - v105;
      v133 = v135;
      v134 = 0x800000000;
      v123[0] = v124;
      v123[1] = (void *)0x1000000000;
      v124[32] = 0;
      v124[33] = 0;
      v124[34] = v96;
      v124[35] = 0;
      v125 = 0;
      v126 = v130;
      v127 = v130;
      v128 = 8;
      v129 = 0;
      memset(v131, 0, sizeof(v131));
      v132 = 0;
      llvm::CreateControlFlowHub((uint64_t)v123, (uint64_t)&v133, (uint64_t)v108, v103, "loop.exit", 9);
      v115[0] = 0;
      v115[1] = 0;
      v116 = 0;
      v118 = 0;
      v119 = 0;
      v117 = 0;
      v28 = (_QWORD *)v6[4];
      v98 = (_QWORD *)v6[5];
      if (v98 == v28)
        goto LABEL_65;
      v29 = v27;
      do
      {
        v101 = v28;
        v30 = *v28;
        v31 = v30 + 40;
        for (i = *(_QWORD *)(v30 + 48); i != v31; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v33 = i - 24;
          else
            v33 = 0;
          for (j = *(_QWORD *)(v33 + 8); j; j = *(_QWORD *)(j + 8))
          {
            v38 = *(_QWORD *)(j + 24);
            v39 = *(_QWORD *)(v38 + 40);
            if (v39 != v29)
            {
              v40 = sub_1C477672C((uint64_t)(v6 + 7), v39);
              v41 = v6[8];
              v42 = v41 == v6[7] ? 76 : 72;
              if (v40 == (_QWORD *)(v41 + 8 * *(unsigned int *)((char *)v6 + v42)))
              {
                v139 = (void **)v33;
                v35 = sub_1C63BB200((uint64_t)v115, (uint64_t *)&v139);
                v36 = v35;
                v37 = *(unsigned int *)(v35 + 8);
                if (v37 >= *(unsigned int *)(v35 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v35, v35 + 16, v37 + 1, 8);
                  v37 = *(unsigned int *)(v36 + 8);
                }
                *(_QWORD *)(*(_QWORD *)v36 + 8 * v37) = v38;
                ++*(_DWORD *)(v36 + 8);
              }
            }
          }
        }
        v28 = v101 + 1;
      }
      while (v101 + 1 != v98);
      v43 = v117;
      v99 = v118;
      v3 = v95;
      if (v117 == v118)
      {
LABEL_65:
        sub_1C62EA8E4((uint64_t)v115);
        v44 = (_QWORD *)*v6;
        if (v44 && (_DWORD)v134)
        {
          v45 = (uint64_t *)v133;
          v46 = 8 * v134;
          do
          {
            v47 = *v45++;
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v44, v47, v3);
            v46 -= 8;
          }
          while (v46);
        }
        llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v123);
        v139 = (void **)v131;
        sub_1C50B10F0(&v139);
        v5 = v92;
        if (v127 != v126)
          free(v127);
        v26 = v91;
        if (v123[0] != v124)
          free(v123[0]);
        if (v133 != v135)
          free(v133);
        goto LABEL_40;
      }
      v97 = (_QWORD *)(v29 + 40);
      while (1)
      {
        v48 = *(void ***)v43;
        v139 = *(void ***)v43;
        v140 = (llvm::User **)v142;
        v141 = 0x800000000;
        v49 = *(_DWORD *)(v43 + 16);
        if (v49 && &v139 != (void ***)v43)
          break;
LABEL_84:
        v53 = (llvm::UndefValue *)*v48;
        v54 = v111;
        if ((*((_BYTE *)v48 + 23) & 0x10) == 0)
        {
          v64 = 0;
          v65 = &byte_1C871356D;
          goto LABEL_93;
        }
        v55 = **(_QWORD **)v53;
        v56 = *(_QWORD *)(v55 + 152);
        v57 = *(unsigned int *)(v55 + 168);
        if (!(_DWORD)v57)
          goto LABEL_91;
        LODWORD(v58) = (v57 - 1) & ((v48 >> 4) ^ (v48 >> 9));
        v59 = (void ***)(v56 + 16 * v58);
        v60 = *v59;
        if (*v59 != v48)
        {
          v61 = 1;
          while (v60 != (void **)-4096)
          {
            v62 = v58 + v61++;
            v58 = v62 & (v57 - 1);
            v60 = *(void ***)(v56 + 16 * v58);
            if (v60 == v48)
            {
              v59 = (void ***)(v56 + 16 * v58);
              goto LABEL_92;
            }
          }
LABEL_91:
          v59 = (void ***)(v56 + 16 * v57);
        }
LABEL_92:
        v63 = v59[1];
        v66 = *v63;
        v65 = (char *)(v63 + 2);
        v64 = v66;
LABEL_93:
        v114 = 773;
        v113[0] = v65;
        v113[1] = v64;
        v113[2] = ".moved";
        v67 = (_QWORD *)*v97;
        v102 = v110;
        if ((_QWORD *)*v97 == v97)
        {
          v70 = 0;
        }
        else
        {
          v68 = v67 - 3;
          if (v67)
            v69 = v67 - 3;
          else
            v69 = 0;
          if (*((unsigned __int8 *)v69 + 16) - 29 >= 0xB)
            v70 = 0;
          else
            v70 = v68;
        }
        v71 = operator new(0x48uLL);
        v72 = v71;
        v71[1] = v53;
        v73 = (llvm::Value *)(v71 + 1);
        *v71 = 0;
        v71[2] = 0;
        v71[3] = 0x4000000000000053;
        *((_OWORD *)v71 + 2) = 0u;
        v74 = (char *)(v71 + 4);
        *((_OWORD *)v71 + 3) = 0u;
        *((_DWORD *)v71 + 16) = 0;
        if (v70)
        {
          v87 = v70[5];
          v71[6] = v87;
          *(_WORD *)(v87 + 18) &= ~0x8000u;
          if ((*((_BYTE *)v71 + 31) & 0x10) != 0)
          {
            v89 = *(_QWORD *)(v87 + 56);
            if (v89)
            {
              v90 = *(llvm::ValueSymbolTable **)(v89 + 104);
              if (v90)
                llvm::ValueSymbolTable::reinsertValue(v90, v73);
            }
          }
          v88 = v70[3];
          v72[4] = v88;
          v72[5] = v70 + 3;
          *(_QWORD *)(v88 + 8) = v74;
          v70[3] = v74;
        }
        *((_DWORD *)v72 + 17) = (unint64_t)((char *)v54 - (char *)v102) >> 3;
        llvm::Value::setName((uint64_t ***)v73, (uint64_t)v113);
        v75 = *((unsigned int *)v72 + 17);
        v76 = operator new(40 * v75);
        *v72 = v76;
        if ((_DWORD)v75)
        {
          v77 = &v76[4 * v75];
          do
          {
            *v76 = 0;
            v76[1] = 0;
            v76[2] = 0;
            v76[3] = v73;
            v76 += 4;
          }
          while (v76 != v77);
        }
        v78 = v110;
        v79 = v111;
        while (v78 != v79)
        {
          v80 = *v78;
          if (v48[5] == *v78 || llvm::DominatorTree::dominates(v96, (const llvm::Instruction *)v48, *v78))
          {
            v82 = v73;
            v83 = (llvm::UndefValue *)v48;
          }
          else
          {
            v83 = llvm::UndefValue::get((llvm::UndefValue *)*v48, v81);
            v82 = v73;
          }
          sub_1C477667C(v82, (uint64_t)v83, (uint64_t)v80);
          ++v78;
        }
        v84 = v140;
        if ((_DWORD)v141)
        {
          v85 = 8 * v141;
          v3 = v95;
          do
          {
            v86 = *v84++;
            llvm::User::replaceUsesOfWith(v86, (llvm::Value *)v48, v73);
            v85 -= 8;
          }
          while (v85);
          v84 = v140;
        }
        else
        {
          v3 = v95;
        }
        if (v84 != v142)
          free(v84);
        v43 += 88;
        if (v43 == v99)
          goto LABEL_65;
      }
      if (v49 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, (uint64_t)v142, *(unsigned int *)(v43 + 16), 8);
        v52 = *(unsigned int *)(v43 + 16);
        if (!(_DWORD)v52)
          goto LABEL_83;
        v51 = v140;
      }
      else
      {
        v51 = (llvm::User **)v142;
        v52 = *(unsigned int *)(v43 + 16);
      }
      memcpy(v51, *(const void **)(v43 + 8), 8 * v52);
LABEL_83:
      LODWORD(v141) = v49;
      v48 = v139;
      goto LABEL_84;
    }
LABEL_40:
    if (v136 != v138)
      free(v136);
    sub_1C5408A20(v103);
    sub_1C5408A20(v108);
    v5 |= v26 > 8;
    v4 = v94 + 1;
  }
  while (v94 + 1 != (uint64_t *)v93);
  v4 = (uint64_t *)v120;
LABEL_130:
  if (v4 != &v122)
    free(v4);
  return v5 & 1;
}

void sub_1C5FC8FAC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5FC8FD0(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&unk_1EF8F7658);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&unk_1EF8F7658);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
}

BOOL sub_1C5FC9070(uint64_t a1)
{
  char **v2;
  char *v3;
  uint64_t v4;
  char **v5;
  char *v6;
  uint64_t v7;
  llvm::DominatorTree *v8;

  v2 = **(char ****)(a1 + 8);
  do
  {
    v3 = *v2;
    v2 += 2;
  }
  while (v3 != llvm::LoopInfoWrapperPass::ID);
  v4 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v2 - 1) + 96))(*(v2 - 1), llvm::LoopInfoWrapperPass::ID);
  v5 = **(char ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::DominatorTreeWrapperPass::ID);
  v7 = v4 + 32;
  v8 = (llvm::DominatorTree *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::DominatorTreeWrapperPass::ID)+ 32);
  return sub_1C5FC8608(v7, v8);
}

uint64_t sub_1C5FC9104()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5FC8374(v0);
}

void llvm::initializeTransformUtils(llvm *this, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  llvm::PassRegistry *v6;
  llvm::PassRegistry *v7;
  llvm::PassRegistry *v8;
  llvm::PassRegistry *v9;
  llvm::PassRegistry *v10;
  llvm::PassRegistry *v11;
  llvm::PassRegistry *v12;
  llvm::PassRegistry *v13;
  llvm::PassRegistry *v14;
  llvm::PassRegistry *v15;
  llvm::PassRegistry *v16;
  llvm::PassRegistry *v17;
  llvm::PassRegistry *v18;
  llvm::PassRegistry *v19;
  llvm::PassRegistry *v20;
  llvm::PassRegistry *v21;
  llvm::PassRegistry *v22;
  llvm::PassRegistry *v23;
  llvm::PassRegistry *v24;
  llvm::PassRegistry *v25;

  llvm::initializeAGXShaderCanonicalizerPass(this, a2);
  llvm::initializeAddDiscriminatorsLegacyPassPass(this, v3);
  llvm::initializeAssumeSimplifyPassLegacyPassPass(this, v4);
  llvm::initializeAssumeBuilderPassLegacyPassPass(this, v5);
  llvm::initializeBreakCriticalEdgesPass(this, v6);
  llvm::initializeCanonicalizeAliasesLegacyPassPass(this, v7);
  llvm::initializeCanonicalizeFreezeInLoopsPass(this, v8);
  llvm::initializeInstNamerPass(this, v9);
  llvm::initializeLCSSAWrapperPassPass(this, v10);
  llvm::initializeLibCallsShrinkWrapLegacyPassPass(this, v11);
  llvm::initializeLoopSimplifyPass(this, v12);
  llvm::initializeLowerGlobalDtorsLegacyPassPass(this, v13);
  llvm::initializeLowerInvokeLegacyPassPass(this, v14);
  llvm::initializeLowerSwitchLegacyPassPass(this, v15);
  llvm::initializeNameAnonGlobalLegacyPassPass(this, v16);
  llvm::initializePromoteLegacyPassPass(this, v17);
  llvm::initializeStripNonLineTableDebugLegacyPassPass(this, v18);
  llvm::initializeUnifyFunctionExitNodesLegacyPassPass(this, v19);
  llvm::initializeMetaRenamerPass(this, v20);
  llvm::initializeStripGCRelocatesLegacyPass(this, v21);
  llvm::initializePredicateInfoPrinterLegacyPassPass(this, v22);
  llvm::initializeInjectTLIMappingsLegacyPass(this, v23);
  llvm::initializeFixIrreduciblePass(this, v24);
  llvm::initializeUnifyLoopExitsLegacyPassPass(this, v25);
}

uint64_t LLVMAddLowerSwitchPass(llvm *a1)
{
  uint64_t LowerSwitchPass;

  LowerSwitchPass = llvm::createLowerSwitchPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, LowerSwitchPass);
}

uint64_t LLVMAddPromoteMemoryToRegisterPass(llvm *a1)
{
  uint64_t PromoteMemoryToRegisterPass;

  PromoteMemoryToRegisterPass = llvm::createPromoteMemoryToRegisterPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, PromoteMemoryToRegisterPass);
}

uint64_t LLVMAddAddDiscriminatorsPass(llvm *a1)
{
  uint64_t AddDiscriminatorsPass;

  AddDiscriminatorsPass = llvm::createAddDiscriminatorsPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, AddDiscriminatorsPass);
}

uint64_t llvm::GetItrKind(llvm *this)
{
  int v1;
  uint64_t result;

  v1 = (int)this;
  result = 0;
  if (v1 > 2453)
  {
    switch(v1)
    {
      case 2454:
      case 2455:
      case 2456:
      case 2457:
      case 2458:
      case 2459:
      case 2460:
      case 2461:
LABEL_13:
        result = 10;
        break;
      case 2462:
      case 2463:
      case 2464:
      case 2465:
      case 2466:
      case 2467:
      case 2468:
      case 2469:
LABEL_10:
        result = 7;
        break;
      default:
        switch(v1)
        {
          case 2528:
          case 2529:
          case 2530:
          case 2531:
          case 2532:
          case 2533:
          case 2534:
          case 2535:
LABEL_6:
            result = 11;
            break;
          case 2536:
          case 2537:
          case 2538:
          case 2539:
          case 2540:
          case 2541:
          case 2542:
          case 2543:
LABEL_14:
            result = 8;
            break;
          default:
            return result;
        }
        break;
    }
  }
  else
  {
    switch(v1)
    {
      case 2115:
      case 2116:
      case 2117:
      case 2118:
      case 2119:
      case 2120:
      case 2121:
      case 2122:
LABEL_15:
        result = 12;
        break;
      case 2123:
      case 2124:
      case 2125:
      case 2126:
      case 2127:
      case 2128:
      case 2129:
      case 2130:
LABEL_12:
        result = 9;
        break;
      default:
        switch(v1)
        {
          case 2309:
          case 2310:
          case 2311:
          case 2312:
          case 2313:
          case 2314:
          case 2315:
          case 2316:
            goto LABEL_15;
          case 2317:
          case 2318:
          case 2319:
          case 2320:
          case 2321:
          case 2322:
          case 2323:
          case 2324:
            goto LABEL_13;
          case 2325:
          case 2326:
          case 2327:
          case 2328:
          case 2329:
          case 2330:
          case 2331:
          case 2332:
            goto LABEL_6;
          case 2333:
          case 2334:
          case 2335:
          case 2336:
            return result;
          case 2337:
          case 2338:
          case 2339:
          case 2340:
          case 2341:
          case 2342:
          case 2343:
          case 2344:
            goto LABEL_12;
          case 2345:
          case 2346:
          case 2347:
          case 2348:
          case 2349:
          case 2350:
          case 2351:
          case 2352:
            goto LABEL_10;
          case 2353:
          case 2354:
          case 2355:
          case 2356:
          case 2357:
          case 2358:
          case 2359:
          case 2360:
            goto LABEL_14;
          default:
            switch(v1)
            {
              case 1886:
              case 1887:
              case 1888:
              case 1889:
              case 1890:
              case 1891:
              case 1892:
              case 1893:
                result = 6;
                break;
              case 1894:
              case 1895:
              case 1896:
              case 1897:
              case 1898:
              case 1899:
              case 1900:
              case 1901:
                result = 4;
                break;
              case 1902:
              case 1903:
              case 1904:
              case 1905:
              case 1906:
              case 1907:
              case 1908:
              case 1909:
                result = 5;
                break;
              case 1924:
              case 1925:
                result = 13;
                break;
              case 1927:
              case 1928:
              case 1929:
              case 1930:
              case 1931:
              case 1932:
              case 1933:
              case 1934:
                result = 3;
                break;
              case 1935:
              case 1936:
              case 1937:
              case 1938:
              case 1939:
              case 1940:
              case 1941:
              case 1942:
                result = 1;
                break;
              case 1943:
              case 1944:
              case 1945:
              case 1946:
              case 1947:
              case 1948:
              case 1949:
              case 1950:
                result = 2;
                break;
              default:
                return result;
            }
            break;
        }
        break;
    }
  }
  return result;
}

uint64_t llvm::IsItrProj(unsigned int a1)
{
  return (a1 < 0xA) & (0x38Eu >> a1);
}

void llvm::getItrIntrinsic(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1C5FC9400(int a1, uint64_t a2, int a3, int a4)
{
  unsigned int *v4;

  v4 = (unsigned int *)&unk_1C8676AC4;
  if (!a3)
    v4 = (unsigned int *)&unk_1C8676A64;
  return v4[4 * a4 + a1 - 1];
}

void sub_1C5FC9490()
{
  JUMPOUT(0x1C5FC9488);
}

void sub_1C5FC94A0()
{
  llvm::llvm_unreachable_internal(0, 0, 0);
}

BOOL llvm::isTextureIntrinsic(llvm *this)
{
  return ((_DWORD)this - 2022) < 0x40;
}

uint64_t llvm::isFDivFeedingProjSmp(llvm *this, llvm::Instruction *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  while (1)
  {
    v3 = *(_QWORD *)(v2 + 24);
    v4 = *(unsigned __int8 *)(v3 + 16);
    if (v4 == 74)
    {
      v5 = *(_QWORD *)(v3 + 8);
      if (!v5)
      {
        v6 = v2;
        goto LABEL_12;
      }
      v6 = v2;
      if (*(_QWORD *)(v5 + 8))
        goto LABEL_12;
      v3 = *(_QWORD *)(v5 + 24);
      v4 = *(unsigned __int8 *)(v3 + 16);
      v6 = v5;
    }
    else
    {
      v6 = v2;
    }
    while (v4 == 90)
    {
      v7 = *(_QWORD *)(v3 + 8);
      if (!v7 || *(_QWORD *)(v7 + 8))
        break;
      v6 = *(_QWORD *)(v3 + 8);
      v3 = *(_QWORD *)(v7 + 24);
      v4 = *(unsigned __int8 *)(v3 + 16);
    }
LABEL_12:
    v8 = *(_QWORD *)(v6 + 24);
    v9 = *(_DWORD *)(v8 + 20);
    v10 = (v9 & 0x40000000) != 0 ? *(_QWORD *)(v8 - 8) : v8 - 32 * (v9 & 0x7FFFFFF);
    if (((v6 - v10) & 0x1FFFFFFFE0) == 0x80 && *(_BYTE *)(v3 + 16) == 84)
    {
      v11 = *(_QWORD *)(v3 - 32);
      if (v11)
      {
        if (!*(_BYTE *)(v11 + 16)
          && *(_QWORD *)(v11 + 24) == *(_QWORD *)(v3 + 72)
          && (*(_BYTE *)(v11 + 33) & 0x20) != 0
          && (*(_DWORD *)(v11 + 36) - 2086) > 0xFFFFFFBF)
        {
          return 1;
        }
      }
    }
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return 0;
  }
}

uint64_t llvm::SampleInfo::SampleInfo(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  __int128 v4;
  int v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  int v34;
  int v35;
  int v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  int v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unsigned int v52;
  uint64_t v53;
  _DWORD *v54;
  _QWORD v55[14];

  v3 = 0;
  v55[13] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  *(_OWORD *)(result + 28) = v4;
  *(_BYTE *)(result + 2) = 0;
  *(_DWORD *)(result + 4) = -1;
  *(_WORD *)(result + 8) = 0;
  *(_OWORD *)(result + 12) = v4;
  *(_OWORD *)(result + 44) = v4;
  *(_WORD *)(result + 60) = 0;
  *(_BYTE *)(result + 62) = 0;
  *(_BYTE *)(result + 96) = 0;
  *(_DWORD *)(result + 100) = a2;
  v55[0] = result + 48;
  v55[1] = result + 52;
  v55[2] = result + 56;
  v55[3] = result + 64;
  v55[4] = result + 68;
  v55[5] = result + 72;
  v55[6] = result + 76;
  v55[7] = result + 80;
  *(_DWORD *)(result + 88) = -1;
  v55[8] = result + 84;
  v55[9] = result + 92;
  v55[10] = result + 28;
  v55[11] = result + 40;
  v55[12] = result + 88;
  do
    *(_DWORD *)v55[v3++] = -1;
  while (v3 != 13);
  switch(a2)
  {
    case 1282:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      v5 = 1283;
      goto LABEL_405;
    case 1283:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      v5 = 1282;
      goto LABEL_405;
    case 1284:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      v5 = 1285;
      goto LABEL_405;
    case 1285:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      v5 = 1284;
      goto LABEL_405;
    case 1286:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1287;
      goto LABEL_405;
    case 1287:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1286;
      goto LABEL_405;
    case 1288:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1289;
      goto LABEL_405;
    case 1289:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1288;
      goto LABEL_405;
    case 1290:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1291;
      goto LABEL_405;
    case 1291:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1290;
      goto LABEL_405;
    case 1292:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1293;
      goto LABEL_405;
    case 1293:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1292;
      goto LABEL_405;
    case 1294:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1295;
      goto LABEL_405;
    case 1295:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1294;
      goto LABEL_405;
    case 1296:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1297;
      goto LABEL_405;
    case 1297:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1296;
      goto LABEL_405;
    case 1298:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1299;
      goto LABEL_405;
    case 1299:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1298;
      goto LABEL_405;
    case 1300:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1301;
      goto LABEL_405;
    case 1301:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1300;
      goto LABEL_405;
    case 1302:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1303;
      goto LABEL_405;
    case 1303:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1302;
      goto LABEL_405;
    case 1304:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1305;
      goto LABEL_405;
    case 1305:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1304;
      goto LABEL_405;
    case 1306:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      v5 = 1307;
      goto LABEL_405;
    case 1307:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      v5 = 1306;
      goto LABEL_405;
    case 1308:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      v5 = 1309;
      goto LABEL_405;
    case 1309:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      v5 = 1308;
      goto LABEL_405;
    case 1310:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1311;
      goto LABEL_405;
    case 1311:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1310;
      goto LABEL_405;
    case 1312:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1313;
      goto LABEL_405;
    case 1313:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1312;
      goto LABEL_405;
    case 1314:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      v5 = 1315;
      goto LABEL_405;
    case 1315:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      v5 = 1314;
      goto LABEL_405;
    case 1316:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      v5 = 1317;
      goto LABEL_405;
    case 1317:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 88) = 8;
      v5 = 1316;
      goto LABEL_405;
    case 1318:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1319;
      goto LABEL_405;
    case 1319:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1318;
      goto LABEL_405;
    case 1320:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1321;
      goto LABEL_405;
    case 1321:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 1;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1320;
      goto LABEL_405;
    case 1322:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1323;
      goto LABEL_405;
    case 1323:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1322;
      goto LABEL_405;
    case 1324:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1325;
      goto LABEL_405;
    case 1325:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1324;
      goto LABEL_405;
    case 1326:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1327;
      goto LABEL_405;
    case 1327:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1326;
      goto LABEL_405;
    case 1328:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1329;
      goto LABEL_405;
    case 1329:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1328;
      goto LABEL_405;
    case 1330:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1331;
      goto LABEL_405;
    case 1331:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1330;
      goto LABEL_405;
    case 1332:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1333;
      goto LABEL_405;
    case 1333:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1332;
      goto LABEL_405;
    case 1334:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1335;
      goto LABEL_405;
    case 1335:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1334;
      goto LABEL_405;
    case 1336:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1337;
      goto LABEL_405;
    case 1337:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1336;
      goto LABEL_405;
    case 1338:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xA00000009;
      v5 = 1339;
      goto LABEL_405;
    case 1339:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xA00000009;
      v5 = 1338;
      goto LABEL_405;
    case 1340:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xA00000009;
      v5 = 1341;
      goto LABEL_405;
    case 1341:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xA00000009;
      v5 = 1340;
      goto LABEL_405;
    case 1342:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 80) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1343;
      goto LABEL_405;
    case 1343:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 80) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1342;
      goto LABEL_405;
    case 1344:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 80) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1345;
      goto LABEL_405;
    case 1345:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 80) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1344;
      goto LABEL_405;
    case 1346:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1347;
      goto LABEL_405;
    case 1347:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1346;
      goto LABEL_405;
    case 1348:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1349;
      goto LABEL_405;
    case 1349:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1348;
      goto LABEL_405;
    case 1350:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1351;
      goto LABEL_405;
    case 1351:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1350;
      goto LABEL_405;
    case 1352:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1353;
      goto LABEL_405;
    case 1353:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1352;
      goto LABEL_405;
    case 1354:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1355;
      goto LABEL_405;
    case 1355:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1354;
      goto LABEL_405;
    case 1356:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1357;
      goto LABEL_405;
    case 1357:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1356;
      goto LABEL_405;
    case 1358:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1359;
      goto LABEL_405;
    case 1359:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1358;
      goto LABEL_405;
    case 1360:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1361;
      goto LABEL_405;
    case 1361:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1360;
      goto LABEL_405;
    case 1362:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1363;
      goto LABEL_405;
    case 1363:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1362;
      goto LABEL_405;
    case 1364:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1365;
      goto LABEL_405;
    case 1365:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1364;
      goto LABEL_405;
    case 1366:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1367;
      goto LABEL_405;
    case 1367:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1366;
      goto LABEL_405;
    case 1368:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1369;
      goto LABEL_405;
    case 1369:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1368;
      goto LABEL_405;
    case 1370:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_QWORD *)(result + 76) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1371;
      goto LABEL_405;
    case 1371:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_QWORD *)(result + 76) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1370;
      goto LABEL_405;
    case 1372:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_QWORD *)(result + 76) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1373;
      goto LABEL_405;
    case 1373:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_QWORD *)(result + 76) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1372;
      goto LABEL_405;
    case 1374:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1375;
      goto LABEL_405;
    case 1375:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1374;
      goto LABEL_405;
    case 1376:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1377;
      goto LABEL_405;
    case 1377:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1376;
      goto LABEL_405;
    case 1378:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1379;
      goto LABEL_405;
    case 1379:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1378;
      goto LABEL_405;
    case 1380:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1381;
      goto LABEL_405;
    case 1381:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1380;
      goto LABEL_405;
    case 1382:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 80) = 12;
      *(_DWORD *)(result + 88) = 13;
      v5 = 1383;
      goto LABEL_405;
    case 1383:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 80) = 12;
      *(_DWORD *)(result + 88) = 13;
      v5 = 1382;
      goto LABEL_405;
    case 1384:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_QWORD *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1385;
      goto LABEL_405;
    case 1385:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_QWORD *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1384;
      goto LABEL_405;
    case 1386:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_QWORD *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1387;
      goto LABEL_405;
    case 1387:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_QWORD *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1386;
      goto LABEL_405;
    case 1388:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_QWORD *)(result + 76) = 0xB0000000ALL;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1389;
      goto LABEL_405;
    case 1389:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_QWORD *)(result + 76) = 0xB0000000ALL;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1388;
      goto LABEL_405;
    case 1390:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1391;
      goto LABEL_405;
    case 1391:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1390;
      goto LABEL_405;
    case 1392:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1393;
      goto LABEL_405;
    case 1393:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1392;
      goto LABEL_405;
    case 1394:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1395;
      goto LABEL_405;
    case 1395:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1394;
      goto LABEL_405;
    case 1396:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1397;
      goto LABEL_405;
    case 1397:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1396;
      goto LABEL_405;
    case 1398:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0x900000008;
      v5 = 1399;
      goto LABEL_405;
    case 1399:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0x900000008;
      v5 = 1398;
      goto LABEL_405;
    case 1400:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0x900000008;
      v5 = 1401;
      goto LABEL_405;
    case 1401:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0x900000008;
      v5 = 1400;
      goto LABEL_405;
    case 1402:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 80) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1403;
      goto LABEL_405;
    case 1403:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 80) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1402;
      goto LABEL_405;
    case 1404:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 80) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1405;
      goto LABEL_405;
    case 1405:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 80) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1404;
      goto LABEL_405;
    case 1406:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1407;
      goto LABEL_405;
    case 1407:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1406;
      goto LABEL_405;
    case 1408:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1409;
      goto LABEL_405;
    case 1409:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1408;
      goto LABEL_405;
    case 1410:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1411;
      goto LABEL_405;
    case 1411:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1410;
      goto LABEL_405;
    case 1412:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1413;
      goto LABEL_405;
    case 1413:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1412;
      goto LABEL_405;
    case 1414:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1415;
      goto LABEL_405;
    case 1415:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1414;
      goto LABEL_405;
    case 1416:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1417;
      goto LABEL_405;
    case 1417:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1416;
      goto LABEL_405;
    case 1418:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1419;
      goto LABEL_405;
    case 1419:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1418;
      goto LABEL_405;
    case 1420:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1421;
      goto LABEL_405;
    case 1421:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1420;
      goto LABEL_405;
    case 1422:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1423;
      goto LABEL_405;
    case 1423:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1422;
      goto LABEL_405;
    case 1424:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1425;
      goto LABEL_405;
    case 1425:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1424;
      goto LABEL_405;
    case 1426:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1427;
      goto LABEL_405;
    case 1427:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1426;
      goto LABEL_405;
    case 1428:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1429;
      goto LABEL_405;
    case 1429:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1428;
      goto LABEL_405;
    case 1430:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1431;
      goto LABEL_405;
    case 1431:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1430;
      goto LABEL_405;
    case 1432:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1433;
      goto LABEL_405;
    case 1433:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1432;
      goto LABEL_405;
    case 1434:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1435;
      goto LABEL_405;
    case 1435:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1434;
      goto LABEL_405;
    case 1436:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1437;
      goto LABEL_405;
    case 1437:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1436;
      goto LABEL_405;
    case 1438:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1439;
      goto LABEL_405;
    case 1439:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1438;
      goto LABEL_405;
    case 1440:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1441;
      goto LABEL_405;
    case 1441:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1440;
      goto LABEL_405;
    case 1442:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1443;
      goto LABEL_405;
    case 1443:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1442;
      goto LABEL_405;
    case 1444:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1445;
      goto LABEL_405;
    case 1445:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1444;
      goto LABEL_405;
    case 1446:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1447;
      goto LABEL_405;
    case 1447:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1446;
      goto LABEL_405;
    case 1448:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1449;
      goto LABEL_405;
    case 1449:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1448;
      goto LABEL_405;
    case 1450:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1451;
      goto LABEL_405;
    case 1451:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1450;
      goto LABEL_405;
    case 1452:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1453;
      goto LABEL_405;
    case 1453:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 52) = 0x800000009;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1452;
      goto LABEL_405;
    case 1454:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1455;
      goto LABEL_405;
    case 1455:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1454;
      goto LABEL_405;
    case 1456:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1457;
      goto LABEL_405;
    case 1457:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1456;
      goto LABEL_405;
    case 1458:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1459;
      goto LABEL_405;
    case 1459:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1458;
      goto LABEL_405;
    case 1460:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1461;
      goto LABEL_405;
    case 1461:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1460;
      goto LABEL_405;
    case 1462:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1463;
      goto LABEL_405;
    case 1463:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1462;
      goto LABEL_405;
    case 1464:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1465;
      goto LABEL_405;
    case 1465:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1464;
      goto LABEL_405;
    case 1466:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1467;
      goto LABEL_405;
    case 1467:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1466;
      goto LABEL_405;
    case 1468:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1469;
      goto LABEL_405;
    case 1469:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 52) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1468;
      goto LABEL_405;
    case 1470:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1471;
      goto LABEL_405;
    case 1471:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1470;
      goto LABEL_405;
    case 1472:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1473;
      goto LABEL_405;
    case 1473:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1472;
      goto LABEL_405;
    case 1474:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1475;
      goto LABEL_405;
    case 1475:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1474;
      goto LABEL_405;
    case 1476:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1477;
      goto LABEL_405;
    case 1477:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1476;
      goto LABEL_405;
    case 1478:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1479;
      goto LABEL_405;
    case 1479:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1478;
      goto LABEL_405;
    case 1480:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1481;
      goto LABEL_405;
    case 1481:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1480;
      goto LABEL_405;
    case 1482:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1483;
      goto LABEL_405;
    case 1483:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1482;
      goto LABEL_405;
    case 1484:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1485;
      goto LABEL_405;
    case 1485:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1484;
      goto LABEL_405;
    case 1486:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1487;
      goto LABEL_405;
    case 1487:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 80) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1486;
      goto LABEL_405;
    case 1488:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(_QWORD *)(result + 76) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1489;
      goto LABEL_405;
    case 1489:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 64) = 8;
      *(_QWORD *)(result + 76) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1488;
      goto LABEL_405;
    case 1490:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1491;
      goto LABEL_405;
    case 1491:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1490;
      goto LABEL_405;
    case 1492:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1493;
      goto LABEL_405;
    case 1493:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1492;
      goto LABEL_405;
    case 1494:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1495;
      goto LABEL_405;
    case 1495:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1494;
      goto LABEL_405;
    case 1496:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1497;
      goto LABEL_405;
    case 1497:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1496;
      goto LABEL_405;
    case 1498:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1499;
      goto LABEL_405;
    case 1499:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1498;
      goto LABEL_405;
    case 1500:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1501;
      goto LABEL_405;
    case 1501:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1500;
      goto LABEL_405;
    case 1502:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1503;
      goto LABEL_405;
    case 1503:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1502;
      goto LABEL_405;
    case 1504:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1505;
      goto LABEL_405;
    case 1505:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1504;
      goto LABEL_405;
    case 1506:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1507;
      goto LABEL_405;
    case 1507:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1506;
      goto LABEL_405;
    case 1508:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1509;
      goto LABEL_405;
    case 1509:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 80) = 11;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1508;
      goto LABEL_405;
    case 1510:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1511;
      goto LABEL_405;
    case 1511:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1510;
      goto LABEL_405;
    case 1512:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1513;
      goto LABEL_405;
    case 1513:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1512;
      goto LABEL_405;
    case 1514:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1515;
      goto LABEL_405;
    case 1515:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1514;
      goto LABEL_405;
    case 1516:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1517;
      goto LABEL_405;
    case 1517:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1516;
      goto LABEL_405;
    case 1518:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1519;
      goto LABEL_405;
    case 1519:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1518;
      goto LABEL_405;
    case 1520:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1521;
      goto LABEL_405;
    case 1521:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1520;
      goto LABEL_405;
    case 1522:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1523;
      goto LABEL_405;
    case 1523:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1522;
      goto LABEL_405;
    case 1524:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1525;
      goto LABEL_405;
    case 1525:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 80) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1524;
      goto LABEL_405;
    case 1526:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1527;
      goto LABEL_405;
    case 1527:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1526;
      goto LABEL_405;
    case 1528:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1529;
      goto LABEL_405;
    case 1529:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_QWORD *)(result + 76) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1528;
      goto LABEL_405;
    case 1530:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1531;
      goto LABEL_405;
    case 1531:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1530;
      goto LABEL_405;
    case 1532:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1533;
      goto LABEL_405;
    case 1533:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1532;
      goto LABEL_405;
    case 1534:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_WORD *)(result + 61) = 257;
      *(_QWORD *)(result + 84) = 0xA00000009;
      v5 = 1535;
      goto LABEL_405;
    case 1535:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_WORD *)(result + 61) = 257;
      *(_QWORD *)(result + 84) = 0xA00000009;
      v5 = 1534;
      goto LABEL_405;
    case 1536:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1537;
      goto LABEL_405;
    case 1537:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1536;
      goto LABEL_405;
    case 1538:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1539;
      goto LABEL_405;
    case 1539:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1538;
      goto LABEL_405;
    case 1540:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_WORD *)(result + 61) = 257;
      *(_QWORD *)(result + 84) = 0x900000008;
      v5 = 1541;
      goto LABEL_405;
    case 1541:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_WORD *)(result + 61) = 257;
      *(_QWORD *)(result + 84) = 0x900000008;
      v5 = 1540;
      goto LABEL_405;
    case 1542:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1543;
      goto LABEL_405;
    case 1543:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1542;
      goto LABEL_405;
    case 1544:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1545;
      goto LABEL_405;
    case 1545:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1544;
      goto LABEL_405;
    case 1546:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1547;
      goto LABEL_405;
    case 1547:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1546;
      goto LABEL_405;
    case 1548:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_WORD *)(result + 61) = 257;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1549;
      goto LABEL_405;
    case 1549:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_WORD *)(result + 61) = 257;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1548;
      goto LABEL_405;
    case 1550:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1551;
      goto LABEL_405;
    case 1551:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 61) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1550;
      goto LABEL_405;
    case 1552:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 61) = 1;
      *(_QWORD *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1553;
      goto LABEL_405;
    case 1553:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 61) = 1;
      *(_QWORD *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1552;
      goto LABEL_405;
    case 1554:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1555;
      goto LABEL_405;
    case 1555:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1554;
      goto LABEL_405;
    case 1556:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1557;
      goto LABEL_405;
    case 1557:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 76) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1556;
      goto LABEL_405;
    case 1558:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1559;
      goto LABEL_405;
    case 1559:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1558;
      goto LABEL_405;
    case 1560:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1561;
      goto LABEL_405;
    case 1561:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1560;
      goto LABEL_405;
    case 1562:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xA00000009;
      v5 = 1563;
      goto LABEL_405;
    case 1563:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xA00000009;
      v5 = 1562;
      goto LABEL_405;
    case 1564:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xA00000009;
      v5 = 1565;
      goto LABEL_405;
    case 1565:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xA00000009;
      v5 = 1564;
      goto LABEL_405;
    case 1566:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1567;
      goto LABEL_405;
    case 1567:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1566;
      goto LABEL_405;
    case 1568:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1569;
      goto LABEL_405;
    case 1569:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1568;
      goto LABEL_405;
    case 1570:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1571;
      goto LABEL_405;
    case 1571:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1570;
      goto LABEL_405;
    case 1572:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1573;
      goto LABEL_405;
    case 1573:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1572;
      goto LABEL_405;
    case 1574:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1575;
      goto LABEL_405;
    case 1575:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1574;
      goto LABEL_405;
    case 1576:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1577;
      goto LABEL_405;
    case 1577:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1576;
      goto LABEL_405;
    case 1578:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 13;
      v5 = 1579;
      goto LABEL_405;
    case 1579:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 13;
      v5 = 1578;
      goto LABEL_405;
    case 1580:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_QWORD *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1581;
      goto LABEL_405;
    case 1581:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 56) = 8;
      *(_QWORD *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1580;
      goto LABEL_405;
    case 1582:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0x900000008;
      v5 = 1583;
      goto LABEL_405;
    case 1583:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0x900000008;
      v5 = 1582;
      goto LABEL_405;
    case 1584:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0x900000008;
      v5 = 1585;
      goto LABEL_405;
    case 1585:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0x900000008;
      v5 = 1584;
      goto LABEL_405;
    case 1586:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1587;
      goto LABEL_405;
    case 1587:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1586;
      goto LABEL_405;
    case 1588:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1589;
      goto LABEL_405;
    case 1589:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 72) = 8;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1588;
      goto LABEL_405;
    case 1590:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1591;
      goto LABEL_405;
    case 1591:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1590;
      goto LABEL_405;
    case 1592:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1593;
      goto LABEL_405;
    case 1593:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 68) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1592;
      goto LABEL_405;
    case 1594:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1595;
      goto LABEL_405;
    case 1595:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1594;
      goto LABEL_405;
    case 1596:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1597;
      goto LABEL_405;
    case 1597:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1596;
      goto LABEL_405;
    case 1598:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1599;
      goto LABEL_405;
    case 1599:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_DWORD *)(result + 64) = 8;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1598;
      goto LABEL_405;
    case 1600:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_QWORD *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1601;
      goto LABEL_405;
    case 1601:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 3;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_QWORD *)(result + 36) = 0x600000005;
      *(_DWORD *)(result + 44) = 7;
      *(_BYTE *)(result + 60) = 1;
      *(_QWORD *)(result + 64) = 0x900000008;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1600;
      goto LABEL_405;
    case 1602:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1603;
      goto LABEL_405;
    case 1603:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1602;
      goto LABEL_405;
    case 1604:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1605;
      goto LABEL_405;
    case 1605:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 76) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1604;
      goto LABEL_405;
    case 1606:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1607;
      goto LABEL_405;
    case 1607:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1606;
      goto LABEL_405;
    case 1608:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1609;
      goto LABEL_405;
    case 1609:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1608;
      goto LABEL_405;
    case 1610:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1611;
      goto LABEL_405;
    case 1611:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1610;
      goto LABEL_405;
    case 1612:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1613;
      goto LABEL_405;
    case 1613:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1612;
      goto LABEL_405;
    case 1614:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1615;
      goto LABEL_405;
    case 1615:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1614;
      goto LABEL_405;
    case 1616:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1617;
      goto LABEL_405;
    case 1617:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1616;
      goto LABEL_405;
    case 1618:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xB0000000ALL;
      v5 = 1619;
      goto LABEL_405;
    case 1619:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xB0000000ALL;
      v5 = 1618;
      goto LABEL_405;
    case 1620:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xB0000000ALL;
      v5 = 1621;
      goto LABEL_405;
    case 1621:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xB0000000ALL;
      v5 = 1620;
      goto LABEL_405;
    case 1622:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1623;
      goto LABEL_405;
    case 1623:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1622;
      goto LABEL_405;
    case 1624:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1625;
      goto LABEL_405;
    case 1625:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1624;
      goto LABEL_405;
    case 1626:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1627;
      goto LABEL_405;
    case 1627:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1626;
      goto LABEL_405;
    case 1628:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1629;
      goto LABEL_405;
    case 1629:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1628;
      goto LABEL_405;
    case 1630:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1631;
      goto LABEL_405;
    case 1631:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1630;
      goto LABEL_405;
    case 1632:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1633;
      goto LABEL_405;
    case 1633:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1632;
      goto LABEL_405;
    case 1634:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1635;
      goto LABEL_405;
    case 1635:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1634;
      goto LABEL_405;
    case 1636:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1637;
      goto LABEL_405;
    case 1637:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 68) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1636;
      goto LABEL_405;
    case 1638:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 64) = 10;
      *(_DWORD *)(result + 76) = 11;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1639;
      goto LABEL_405;
    case 1639:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 64) = 10;
      *(_DWORD *)(result + 76) = 11;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1638;
      goto LABEL_405;
    case 1640:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1641;
      goto LABEL_405;
    case 1641:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1640;
      goto LABEL_405;
    case 1642:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 64) = 10;
      *(_DWORD *)(result + 72) = 11;
      *(_DWORD *)(result + 88) = 13;
      v5 = 1643;
      goto LABEL_405;
    case 1643:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_DWORD *)(result + 64) = 10;
      *(_DWORD *)(result + 72) = 11;
      *(_DWORD *)(result + 88) = 13;
      v5 = 1642;
      goto LABEL_405;
    case 1644:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_QWORD *)(result + 64) = 0xB0000000ALL;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1645;
      goto LABEL_405;
    case 1645:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 56) = 9;
      *(_QWORD *)(result + 64) = 0xB0000000ALL;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1644;
      goto LABEL_405;
    case 1646:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1647;
      goto LABEL_405;
    case 1647:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1646;
      goto LABEL_405;
    case 1648:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1649;
      goto LABEL_405;
    case 1649:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1648;
      goto LABEL_405;
    case 1650:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1651;
      goto LABEL_405;
    case 1651:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1650;
      goto LABEL_405;
    case 1652:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1653;
      goto LABEL_405;
    case 1653:
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1652;
      goto LABEL_405;
    case 1654:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xA00000009;
      v5 = 1655;
      goto LABEL_405;
    case 1655:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xA00000009;
      v5 = 1654;
      goto LABEL_405;
    case 1656:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xA00000009;
      v5 = 1657;
      goto LABEL_405;
    case 1657:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_BYTE *)(result + 62) = 1;
      *(_QWORD *)(result + 84) = 0xA00000009;
      v5 = 1656;
      goto LABEL_405;
    case 1658:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1659;
      goto LABEL_405;
    case 1659:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1658;
      goto LABEL_405;
    case 1660:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1661;
      goto LABEL_405;
    case 1661:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 72) = 9;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1660;
      goto LABEL_405;
    case 1662:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1663;
      goto LABEL_405;
    case 1663:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1662;
      goto LABEL_405;
    case 1664:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1665;
      goto LABEL_405;
    case 1665:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 88) = 9;
      v5 = 1664;
      goto LABEL_405;
    case 1666:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1667;
      goto LABEL_405;
    case 1667:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1666;
      goto LABEL_405;
    case 1668:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1669;
      goto LABEL_405;
    case 1669:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1668;
      goto LABEL_405;
    case 1670:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1671;
      goto LABEL_405;
    case 1671:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1670;
      goto LABEL_405;
    case 1672:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 256;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1673;
      goto LABEL_405;
    case 1673:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 257;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 68) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1672;
      goto LABEL_405;
    case 1674:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1675;
      goto LABEL_405;
    case 1675:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 76) = 10;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1674;
      goto LABEL_405;
    case 1676:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1677;
      goto LABEL_405;
    case 1677:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_BYTE *)(result + 62) = 1;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 88) = 10;
      v5 = 1676;
      goto LABEL_405;
    case 1678:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1679;
      goto LABEL_405;
    case 1679:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_DWORD *)(result + 64) = 9;
      *(_DWORD *)(result + 72) = 10;
      *(_DWORD *)(result + 88) = 12;
      v5 = 1678;
      goto LABEL_405;
    case 1680:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_QWORD *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1681;
      goto LABEL_405;
    case 1681:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 1;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 4;
      *(_OWORD *)(result + 20) = xmmword_1C677F590;
      *(_OWORD *)(result + 36) = xmmword_1C8676BF0;
      *(_QWORD *)(result + 64) = 0xA00000009;
      *(_DWORD *)(result + 88) = 11;
      v5 = 1680;
LABEL_405:
      *(_DWORD *)(result + 100) = v5;
      goto LABEL_651;
    case 1682:
      v6 = 256;
      goto LABEL_408;
    case 1683:
      v6 = 257;
LABEL_408:
      *(_WORD *)result = v6;
      goto LABEL_421;
    case 1684:
      v7 = 256;
      goto LABEL_411;
    case 1685:
      v7 = 257;
LABEL_411:
      *(_WORD *)result = v7;
      goto LABEL_425;
    case 1686:
      v8 = 256;
      goto LABEL_414;
    case 1687:
      v8 = 257;
LABEL_414:
      *(_WORD *)result = v8;
      goto LABEL_428;
    case 1688:
      v9 = 256;
      goto LABEL_417;
    case 1689:
      v9 = 257;
LABEL_417:
      *(_WORD *)result = v9;
      goto LABEL_432;
    case 1690:
      v10 = 256;
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      v11 = 1;
      goto LABEL_494;
    case 1691:
      *(_WORD *)result = 256;
      goto LABEL_436;
    case 1692:
      *(_WORD *)result = 0;
LABEL_421:
      *(_BYTE *)(result + 2) = 0;
      goto LABEL_423;
    case 1693:
      *(_WORD *)result = 1;
      *(_BYTE *)(result + 2) = 0;
LABEL_423:
      *(_DWORD *)(result + 4) = 1;
      goto LABEL_483;
    case 1694:
      *(_WORD *)result = 0;
LABEL_425:
      *(_BYTE *)(result + 2) = 0;
      v12 = 1;
      goto LABEL_488;
    case 1695:
      v12 = 1;
      *(_WORD *)result = 1;
      *(_BYTE *)(result + 2) = 0;
      goto LABEL_488;
    case 1696:
      *(_WORD *)result = 0;
LABEL_428:
      *(_BYTE *)(result + 2) = 0;
      v10 = 1;
      goto LABEL_430;
    case 1697:
      v10 = 1;
      *(_WORD *)result = 1;
      *(_BYTE *)(result + 2) = 0;
LABEL_430:
      *(_DWORD *)(result + 4) = 1;
      goto LABEL_505;
    case 1698:
      *(_WORD *)result = 0;
LABEL_432:
      *(_BYTE *)(result + 2) = 0;
      v13 = 1;
      goto LABEL_499;
    case 1699:
      v13 = 1;
      *(_WORD *)result = 1;
      *(_BYTE *)(result + 2) = 0;
      goto LABEL_499;
    case 1700:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      v14 = 1;
      goto LABEL_501;
    case 1701:
      *(_WORD *)result = 0;
LABEL_436:
      *(_BYTE *)(result + 2) = 0;
      v15 = 1;
      goto LABEL_504;
    case 1702:
      v16 = 256;
      goto LABEL_439;
    case 1703:
      v16 = 257;
LABEL_439:
      *(_WORD *)result = v16;
      goto LABEL_452;
    case 1704:
      v17 = 256;
      goto LABEL_442;
    case 1705:
      v17 = 257;
LABEL_442:
      *(_WORD *)result = v17;
      goto LABEL_456;
    case 1706:
      v18 = 256;
      goto LABEL_445;
    case 1707:
      v18 = 257;
LABEL_445:
      *(_WORD *)result = v18;
      goto LABEL_459;
    case 1708:
      v19 = 256;
      goto LABEL_448;
    case 1709:
      v19 = 257;
LABEL_448:
      *(_WORD *)result = v19;
      goto LABEL_463;
    case 1710:
      v20 = 256;
      *(_WORD *)result = 256;
      *(_BYTE *)(result + 2) = 0;
      v21 = 1;
      goto LABEL_566;
    case 1711:
      *(_WORD *)result = 256;
      goto LABEL_467;
    case 1712:
      *(_WORD *)result = 0;
LABEL_452:
      *(_BYTE *)(result + 2) = 0;
      goto LABEL_454;
    case 1713:
      *(_WORD *)result = 1;
      *(_BYTE *)(result + 2) = 0;
LABEL_454:
      *(_DWORD *)(result + 4) = 1;
      goto LABEL_554;
    case 1714:
      *(_WORD *)result = 0;
LABEL_456:
      *(_BYTE *)(result + 2) = 0;
      v22 = 1;
      goto LABEL_559;
    case 1715:
      v22 = 1;
      *(_WORD *)result = 1;
      *(_BYTE *)(result + 2) = 0;
      goto LABEL_559;
    case 1716:
      *(_WORD *)result = 0;
LABEL_459:
      *(_BYTE *)(result + 2) = 0;
      v20 = 1;
      goto LABEL_461;
    case 1717:
      v20 = 1;
      *(_WORD *)result = 1;
      *(_BYTE *)(result + 2) = 0;
LABEL_461:
      *(_DWORD *)(result + 4) = 1;
      goto LABEL_577;
    case 1718:
      *(_WORD *)result = 0;
LABEL_463:
      *(_BYTE *)(result + 2) = 0;
      v23 = 1;
      goto LABEL_571;
    case 1719:
      v23 = 1;
      *(_WORD *)result = 1;
      *(_BYTE *)(result + 2) = 0;
      goto LABEL_571;
    case 1720:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      v24 = 1;
      goto LABEL_573;
    case 1721:
      *(_WORD *)result = 0;
LABEL_467:
      *(_BYTE *)(result + 2) = 0;
      v25 = 1;
      goto LABEL_576;
    case 1722:
      v26 = 256;
      goto LABEL_470;
    case 1723:
      v26 = 257;
LABEL_470:
      *(_WORD *)result = v26;
      goto LABEL_481;
    case 1724:
      v27 = 256;
      goto LABEL_486;
    case 1725:
      v27 = 257;
      goto LABEL_486;
    case 1726:
      v28 = 256;
      goto LABEL_475;
    case 1727:
      v28 = 257;
LABEL_475:
      *(_WORD *)result = v28;
      goto LABEL_491;
    case 1728:
      v29 = 256;
      goto LABEL_497;
    case 1729:
      v29 = 257;
      goto LABEL_497;
    case 1730:
      v10 = 256;
      goto LABEL_493;
    case 1731:
      *(_WORD *)result = 256;
      goto LABEL_503;
    case 1732:
      *(_WORD *)result = 0;
LABEL_481:
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      goto LABEL_483;
    case 1733:
      *(_WORD *)result = 1;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
LABEL_483:
      *(_WORD *)(result + 8) = 1;
      goto LABEL_489;
    case 1734:
      *(_WORD *)result = 0;
      goto LABEL_487;
    case 1735:
      v27 = 1;
LABEL_486:
      *(_WORD *)result = v27;
LABEL_487:
      *(_BYTE *)(result + 2) = 0;
      v12 = 2;
LABEL_488:
      *(_DWORD *)(result + 4) = v12;
      *(_WORD *)(result + 8) = 0;
LABEL_489:
      *(_QWORD *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1C66090F0;
      *(_DWORD *)(result + 56) = 6;
      goto LABEL_579;
    case 1736:
      *(_WORD *)result = 0;
LABEL_491:
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      v10 = 1;
      goto LABEL_505;
    case 1737:
      v10 = 1;
LABEL_493:
      *(_WORD *)result = v10;
      *(_BYTE *)(result + 2) = 0;
      v11 = 2;
LABEL_494:
      *(_DWORD *)(result + 4) = v11;
      goto LABEL_505;
    case 1738:
      *(_WORD *)result = 0;
      goto LABEL_498;
    case 1739:
      v29 = 1;
LABEL_497:
      *(_WORD *)result = v29;
LABEL_498:
      *(_BYTE *)(result + 2) = 0;
      v13 = 2;
LABEL_499:
      *(_DWORD *)(result + 4) = v13;
      *(_WORD *)(result + 8) = 0;
      goto LABEL_506;
    case 1740:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      v14 = 2;
LABEL_501:
      *(_DWORD *)(result + 4) = v14;
      v10 = 256;
      goto LABEL_505;
    case 1741:
      *(_WORD *)result = 0;
LABEL_503:
      *(_BYTE *)(result + 2) = 0;
      v15 = 2;
LABEL_504:
      *(_DWORD *)(result + 4) = v15;
      v10 = 257;
LABEL_505:
      *(_WORD *)(result + 8) = v10;
LABEL_506:
      *(_QWORD *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1C66090F0;
      *(_DWORD *)(result + 56) = 6;
      goto LABEL_648;
    case 1742:
      v30 = 256;
      goto LABEL_509;
    case 1743:
      v30 = 257;
LABEL_509:
      *(_WORD *)result = v30;
      goto LABEL_520;
    case 1744:
      v31 = 256;
      goto LABEL_524;
    case 1745:
      v31 = 257;
      goto LABEL_524;
    case 1746:
      v32 = 256;
      goto LABEL_514;
    case 1747:
      v32 = 257;
LABEL_514:
      *(_WORD *)result = v32;
      goto LABEL_527;
    case 1748:
      v33 = 256;
      goto LABEL_532;
    case 1749:
      v33 = 257;
      goto LABEL_532;
    case 1750:
      v20 = 256;
      goto LABEL_529;
    case 1751:
      *(_WORD *)result = 256;
      goto LABEL_536;
    case 1752:
      *(_WORD *)result = 0;
LABEL_520:
      *(_BYTE *)(result + 2) = 0;
      v34 = 2;
      goto LABEL_551;
    case 1753:
      *(_WORD *)result = 1;
      *(_BYTE *)(result + 2) = 0;
      v35 = 2;
      goto LABEL_553;
    case 1754:
      *(_WORD *)result = 0;
      goto LABEL_525;
    case 1755:
      v31 = 1;
LABEL_524:
      *(_WORD *)result = v31;
LABEL_525:
      *(_BYTE *)(result + 2) = 0;
      v22 = 2;
      goto LABEL_559;
    case 1756:
      *(_WORD *)result = 0;
LABEL_527:
      *(_BYTE *)(result + 2) = 0;
      v36 = 2;
      goto LABEL_563;
    case 1757:
      v20 = 1;
LABEL_529:
      *(_WORD *)result = v20;
      *(_BYTE *)(result + 2) = 0;
      v21 = 2;
      goto LABEL_566;
    case 1758:
      *(_WORD *)result = 0;
      goto LABEL_533;
    case 1759:
      v33 = 1;
LABEL_532:
      *(_WORD *)result = v33;
LABEL_533:
      *(_BYTE *)(result + 2) = 0;
      v23 = 2;
      goto LABEL_571;
    case 1760:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      v24 = 2;
      goto LABEL_573;
    case 1761:
      *(_WORD *)result = 0;
LABEL_536:
      *(_BYTE *)(result + 2) = 0;
      v25 = 2;
      goto LABEL_576;
    case 1762:
      v37 = 256;
      goto LABEL_539;
    case 1763:
      v37 = 257;
LABEL_539:
      *(_WORD *)result = v37;
      goto LABEL_550;
    case 1764:
      v38 = 256;
      goto LABEL_557;
    case 1765:
      v38 = 257;
      goto LABEL_557;
    case 1766:
      v39 = 256;
      goto LABEL_544;
    case 1767:
      v39 = 257;
LABEL_544:
      *(_WORD *)result = v39;
      goto LABEL_562;
    case 1768:
      v40 = 256;
      goto LABEL_569;
    case 1769:
      v40 = 257;
      goto LABEL_569;
    case 1770:
      v20 = 256;
      goto LABEL_565;
    case 1771:
      *(_WORD *)result = 256;
      goto LABEL_575;
    case 1772:
      *(_WORD *)result = 0;
LABEL_550:
      *(_BYTE *)(result + 2) = 0;
      v34 = 3;
LABEL_551:
      *(_DWORD *)(result + 4) = v34;
      goto LABEL_554;
    case 1773:
      *(_WORD *)result = 1;
      *(_BYTE *)(result + 2) = 0;
      v35 = 3;
LABEL_553:
      *(_DWORD *)(result + 4) = v35;
LABEL_554:
      *(_WORD *)(result + 8) = 1;
      goto LABEL_560;
    case 1774:
      *(_WORD *)result = 0;
      goto LABEL_558;
    case 1775:
      v38 = 1;
LABEL_557:
      *(_WORD *)result = v38;
LABEL_558:
      *(_BYTE *)(result + 2) = 0;
      v22 = 3;
LABEL_559:
      *(_DWORD *)(result + 4) = v22;
      *(_WORD *)(result + 8) = 0;
LABEL_560:
      *(_QWORD *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1C66090F0;
      v41 = 6;
      goto LABEL_650;
    case 1776:
      *(_WORD *)result = 0;
LABEL_562:
      *(_BYTE *)(result + 2) = 0;
      v36 = 3;
LABEL_563:
      *(_DWORD *)(result + 4) = v36;
      v20 = 1;
      goto LABEL_577;
    case 1777:
      v20 = 1;
LABEL_565:
      *(_WORD *)result = v20;
      *(_BYTE *)(result + 2) = 0;
      v21 = 3;
LABEL_566:
      *(_DWORD *)(result + 4) = v21;
      goto LABEL_577;
    case 1778:
      *(_WORD *)result = 0;
      goto LABEL_570;
    case 1779:
      v40 = 1;
LABEL_569:
      *(_WORD *)result = v40;
LABEL_570:
      *(_BYTE *)(result + 2) = 0;
      v23 = 3;
LABEL_571:
      *(_DWORD *)(result + 4) = v23;
      *(_WORD *)(result + 8) = 0;
      goto LABEL_578;
    case 1780:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      v24 = 3;
LABEL_573:
      *(_DWORD *)(result + 4) = v24;
      v20 = 256;
      goto LABEL_577;
    case 1781:
      *(_WORD *)result = 0;
LABEL_575:
      *(_BYTE *)(result + 2) = 0;
      v25 = 3;
LABEL_576:
      *(_DWORD *)(result + 4) = v25;
      v20 = 257;
LABEL_577:
      *(_WORD *)(result + 8) = v20;
LABEL_578:
      *(_QWORD *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1C66090F0;
      *(_DWORD *)(result + 68) = 6;
      goto LABEL_579;
    case 1782:
      v42 = 256;
      goto LABEL_582;
    case 1783:
      v42 = 257;
LABEL_582:
      *(_WORD *)result = v42;
      goto LABEL_593;
    case 1784:
      v43 = 256;
      goto LABEL_598;
    case 1785:
      v43 = 257;
      goto LABEL_598;
    case 1786:
      v44 = 256;
      goto LABEL_587;
    case 1787:
      v44 = 257;
LABEL_587:
      *(_WORD *)result = v44;
      goto LABEL_602;
    case 1788:
      v45 = 256;
      goto LABEL_607;
    case 1789:
      v45 = 257;
      goto LABEL_607;
    case 1790:
      v46 = 256;
      goto LABEL_604;
    case 1791:
      *(_WORD *)result = 256;
      goto LABEL_611;
    case 1792:
      *(_WORD *)result = 0;
LABEL_593:
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      goto LABEL_595;
    case 1793:
      *(_WORD *)result = 1;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
LABEL_595:
      *(_WORD *)(result + 8) = 1;
      goto LABEL_600;
    case 1794:
      *(_WORD *)result = 0;
      goto LABEL_599;
    case 1795:
      v43 = 1;
LABEL_598:
      *(_WORD *)result = v43;
LABEL_599:
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
LABEL_600:
      *(_QWORD *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1C66090F0;
      *(_DWORD *)(result + 48) = 6;
      *(_DWORD *)(result + 56) = 7;
      goto LABEL_649;
    case 1796:
      *(_WORD *)result = 0;
LABEL_602:
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      v46 = 1;
      goto LABEL_612;
    case 1797:
      v46 = 1;
LABEL_604:
      *(_WORD *)result = v46;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      goto LABEL_612;
    case 1798:
      *(_WORD *)result = 0;
      goto LABEL_608;
    case 1799:
      v45 = 1;
LABEL_607:
      *(_WORD *)result = v45;
LABEL_608:
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      goto LABEL_613;
    case 1800:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      v46 = 256;
      goto LABEL_612;
    case 1801:
      *(_WORD *)result = 0;
LABEL_611:
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      v46 = 257;
LABEL_612:
      *(_WORD *)(result + 8) = v46;
LABEL_613:
      *(_QWORD *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1C66090F0;
      *(_DWORD *)(result + 48) = 6;
      *(_DWORD *)(result + 56) = 7;
      *(_DWORD *)(result + 68) = 8;
      v41 = 9;
      goto LABEL_650;
    case 1802:
      v47 = 256;
      goto LABEL_616;
    case 1803:
      v47 = 257;
LABEL_616:
      *(_WORD *)result = v47;
      goto LABEL_627;
    case 1804:
      v48 = 256;
      goto LABEL_632;
    case 1805:
      v48 = 257;
      goto LABEL_632;
    case 1806:
      v49 = 256;
      goto LABEL_621;
    case 1807:
      v49 = 257;
LABEL_621:
      *(_WORD *)result = v49;
      goto LABEL_636;
    case 1808:
      v50 = 256;
      goto LABEL_641;
    case 1809:
      v50 = 257;
      goto LABEL_641;
    case 1810:
      v51 = 256;
      goto LABEL_638;
    case 1811:
      *(_WORD *)result = 256;
      goto LABEL_645;
    case 1812:
      *(_WORD *)result = 0;
LABEL_627:
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      goto LABEL_629;
    case 1813:
      *(_WORD *)result = 1;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
LABEL_629:
      *(_WORD *)(result + 8) = 1;
      goto LABEL_634;
    case 1814:
      *(_WORD *)result = 0;
      goto LABEL_633;
    case 1815:
      v48 = 1;
LABEL_632:
      *(_WORD *)result = v48;
LABEL_633:
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
LABEL_634:
      *(_QWORD *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1C66090F0;
      *(_DWORD *)(result + 48) = 6;
LABEL_579:
      v41 = 7;
      goto LABEL_650;
    case 1816:
      *(_WORD *)result = 0;
LABEL_636:
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      v51 = 1;
      goto LABEL_646;
    case 1817:
      v51 = 1;
LABEL_638:
      *(_WORD *)result = v51;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      goto LABEL_646;
    case 1818:
      *(_WORD *)result = 0;
      goto LABEL_642;
    case 1819:
      v50 = 1;
LABEL_641:
      *(_WORD *)result = v50;
LABEL_642:
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      *(_WORD *)(result + 8) = 0;
      goto LABEL_647;
    case 1820:
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      v51 = 256;
      goto LABEL_646;
    case 1821:
      *(_WORD *)result = 0;
LABEL_645:
      *(_BYTE *)(result + 2) = 0;
      *(_DWORD *)(result + 4) = 2;
      v51 = 257;
LABEL_646:
      *(_WORD *)(result + 8) = v51;
LABEL_647:
      *(_QWORD *)(result + 16) = 4;
      *(_OWORD *)(result + 32) = xmmword_1C66090F0;
      *(_DWORD *)(result + 48) = 6;
LABEL_648:
      *(_DWORD *)(result + 68) = 7;
LABEL_649:
      v41 = 8;
LABEL_650:
      *(_DWORD *)(result + 92) = v41;
LABEL_651:
      switch(a3)
      {
        case 0:
          return result;
        case 1:
        case 2:
          v52 = 2;
          goto LABEL_656;
        case 3:
          v52 = -1;
          goto LABEL_656;
        case 4:
          v52 = 1;
          goto LABEL_656;
        default:
          v52 = 0;
LABEL_656:
          *(_DWORD *)(result + 20) = -1;
          if (*(_DWORD *)(result + 92) == -1)
            *(_DWORD *)(result + 24) -= v52;
          v53 = 0;
          *(int32x2_t *)(result + 32) = vsub_s32(*(int32x2_t *)(result + 32), vdup_n_s32(v52));
          *(_DWORD *)(result + 44) -= v52;
          do
          {
            v54 = (_DWORD *)v55[v53];
            if (*v54 != -1)
              *v54 -= v52;
            ++v53;
          }
          while (v53 != 13);
          return result;
      }
    default:
      __asm { BR              X10 }
      return result;
  }
}

uint64_t *llvm::ValueMapper::ValueMapper(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = operator new();
  *(_DWORD *)v10 = a3;
  *(_QWORD *)(v10 + 8) = a4;
  *(_DWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 40) = a2;
  *(_QWORD *)(v10 + 24) = v10 + 40;
  *(_QWORD *)(v10 + 48) = a5;
  *(_QWORD *)(v10 + 32) = 0x200000001;
  *(_QWORD *)(v10 + 72) = v10 + 88;
  *(_QWORD *)(v10 + 80) = 0x400000000;
  *(_QWORD *)(v10 + 184) = v10 + 200;
  *(_QWORD *)(v10 + 192) = 0x100000000;
  *(_QWORD *)(v10 + 216) = v10 + 232;
  *(_QWORD *)(v10 + 224) = 0x1000000000;
  *a1 = v10;
  return a1;
}

{
  uint64_t v10;

  v10 = operator new();
  *(_DWORD *)v10 = a3;
  *(_QWORD *)(v10 + 8) = a4;
  *(_DWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 40) = a2;
  *(_QWORD *)(v10 + 24) = v10 + 40;
  *(_QWORD *)(v10 + 48) = a5;
  *(_QWORD *)(v10 + 32) = 0x200000001;
  *(_QWORD *)(v10 + 72) = v10 + 88;
  *(_QWORD *)(v10 + 80) = 0x400000000;
  *(_QWORD *)(v10 + 184) = v10 + 200;
  *(_QWORD *)(v10 + 192) = 0x100000000;
  *(_QWORD *)(v10 + 216) = v10 + 232;
  *(_QWORD *)(v10 + 224) = 0x1000000000;
  *a1 = v10;
  return a1;
}

void llvm::ValueMapper::~ValueMapper(llvm::ValueMapper *this, llvm::LLVMContext *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  llvm::BasicBlock *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)this;
  if (v2)
  {
    if (*(_QWORD *)(v2 + 216) != v2 + 232)
    {
      v5 = v2;
      free(*(void **)(v2 + 216));
      v2 = v5;
    }
    v3 = *(char **)(v2 + 184);
    v4 = *(unsigned int *)(v2 + 192);
    if ((_DWORD)v4)
    {
      v11 = v2;
      v6 = v3 - 8;
      v7 = 16 * v4;
      do
      {
        v8 = *(llvm::BasicBlock **)&v6[v7];
        *(_QWORD *)&v6[v7] = 0;
        if (v8)
        {
          llvm::BasicBlock::~BasicBlock(v8, a2);
          MEMORY[0x1CAA32FC0]();
        }
        v7 -= 16;
      }
      while (v7);
      v2 = v11;
      v3 = *(char **)(v11 + 184);
    }
    if (v3 != (char *)(v2 + 200))
    {
      v9 = v2;
      free(v3);
      v2 = v9;
    }
    if (*(_QWORD *)(v2 + 72) != v2 + 88)
    {
      v10 = v2;
      free(*(void **)(v2 + 72));
      v2 = v10;
    }
    if (*(_QWORD *)(v2 + 24) != v2 + 40)
      free(*(void **)(v2 + 24));
    MEMORY[0x1CAA32FC0]();
  }
}

uint64_t *sub_1C5FD3718(uint64_t *a1, llvm::LLVMContext *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  llvm::ValueAsMetadata *v8;
  llvm::MDNode **v9;
  unsigned int v10;
  uint64_t v11;
  llvm::BasicBlock *v12;
  uint64_t v13;
  llvm::Value *v14;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  if (v4)
  {
    v5 = *(_DWORD *)(*(_QWORD *)(v3 + 72) + 24 * v4 - 24);
    *(_DWORD *)(v3 + 80) = v4 - 1;
    *(_DWORD *)(v3 + 16) = (v5 >> 2) & 0x1FFFFFFF;
    __asm { BR              X10 }
  }
  *(_DWORD *)(v3 + 16) = 0;
  while (1)
  {
    v6 = *(_DWORD *)(v3 + 192);
    if (!v6)
      break;
    v7 = *(_QWORD *)(v3 + 184) + 16 * v6;
    v9 = *(llvm::MDNode ***)(v7 - 16);
    v8 = *(llvm::ValueAsMetadata **)(v7 - 8);
    *(_QWORD *)(v7 - 8) = 0;
    v10 = v6 - 1;
    *(_DWORD *)(v3 + 192) = v10;
    v11 = *(_QWORD *)(v3 + 184) + 16 * v10;
    v12 = *(llvm::BasicBlock **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    if (v12)
    {
      llvm::BasicBlock::~BasicBlock(v12, a2);
      MEMORY[0x1CAA32FC0]();
    }
    v13 = sub_1C5FD3BE0(v3, v9);
    if (v13)
      v14 = (llvm::Value *)v13;
    else
      v14 = (llvm::Value *)v9;
    llvm::Value::doRAUW(v8, v14, (llvm::Value *)1);
    if (v8)
    {
      llvm::BasicBlock::~BasicBlock(v8, a2);
      MEMORY[0x1CAA32FC0]();
    }
  }
  return a1;
}

uint64_t llvm::ValueMapper::mapValue(llvm::ValueMapper *this, llvm::MDNode **a2)
{
  uint64_t v2;
  llvm::LLVMContext *v3;
  uint64_t v5;

  v5 = *(_QWORD *)this;
  v2 = sub_1C5FD3BE0(v5, a2);
  sub_1C5FD3718(&v5, v3);
  return v2;
}

uint64_t sub_1C5FD3BE0(uint64_t a1, llvm::MDNode **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::MDNode **v11;
  int v12;
  int v13;
  int32x2_t ****Impl;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int32x2_t ****v20;
  int32x2_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int32x2_t *****v26;
  int32x2_t ****v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  int32x2_t ****v34;
  int32x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int32x2_t *****v40;
  int32x2_t ****v41;
  int v42;
  int v43;
  uint64_t v44;
  llvm::PointerType *v45;
  uint64_t v46;
  unint64_t v47;
  int32x2_t ****v48;
  int32x2_t *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int32x2_t *****v54;
  int32x2_t ****v55;
  int v56;
  int v57;
  int32x2_t ****v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  int32x2_t *v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  int v70;
  unsigned __int8 *v71;
  int v72;
  llvm::ValueAsMetadata *v73;
  llvm::Value *v74;
  uint64_t *v75;
  unsigned __int8 *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  llvm::MDNode **v82;
  llvm::MDNode *v83;
  uint64_t v84;
  int v85;
  int v86;
  llvm::MDNode **v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD **v90;
  uint64_t v91;
  _QWORD *v92;
  llvm::UndefValue *v93;
  llvm::Type *v94;
  unsigned __int8 *v95;
  uint64_t v96;
  unint64_t v97;
  int32x2_t ****v98;
  int32x2_t *v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  int32x2_t *****v104;
  int32x2_t ****v105;
  int v106;
  int v107;
  int32x2_t ****v108;
  _BYTE *v110;
  uint64_t v111;
  unint64_t v112;
  int32x2_t ****v113;
  int32x2_t *v114;
  unint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  int32x2_t *****v119;
  int32x2_t ****v120;
  int v121;
  int v122;
  llvm::PoisonValue *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  llvm::MDNode **v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  BOOL v134;
  uint64_t v135;
  llvm::GetElementPtrInst *v136;
  int v137;
  llvm::MDNode *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  unsigned __int8 *v143;
  uint64_t v144;
  _QWORD *v145;
  unint64_t v146;
  int32x2_t ****v147;
  int32x2_t *v148;
  unint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  int32x2_t *****v153;
  int32x2_t ****v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t *v158;
  uint64_t v159;
  int32x2_t *v160;
  unint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  int v167;
  int v168;
  uint64_t v169;
  unint64_t v170;
  int32x2_t ****v171;
  int32x2_t *v172;
  unint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  int32x2_t *****v177;
  int32x2_t ****v178;
  int v179;
  int v180;
  uint64_t v181;
  unint64_t v182;
  int32x2_t ****v183;
  int32x2_t *v184;
  unint64_t v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  int32x2_t *****v189;
  int32x2_t ****v190;
  int v191;
  int v192;
  llvm::MDNode **v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  int v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  llvm::MDNode **v205;
  llvm::MDNode *v206;
  char v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int32x2_t ****v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  int v221;
  int v222;
  llvm::NoCFIValue *v223;
  llvm::GlobalValue *v224;
  uint64_t v225;
  unint64_t v226;
  int32x2_t ****v227;
  int32x2_t *v228;
  unint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  int32x2_t *****v233;
  int32x2_t ****v234;
  int v235;
  int v236;
  unsigned __int8 *v237;
  llvm::GlobalValue *v238;
  uint64_t v239;
  unint64_t v240;
  int32x2_t ****v241;
  int32x2_t *v242;
  unint64_t v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  int32x2_t *****v247;
  int32x2_t ****v248;
  int v249;
  int v250;
  llvm::BlockAddress *v251;
  llvm::BasicBlock **v252;
  _QWORD *v253;
  uint64_t v254;
  unsigned int v255;
  llvm::LLVMContext *v256;
  llvm::BasicBlock *v257;
  void ***v258;
  void **v259;
  uint64_t v260;
  void **v261;
  void **v262;
  llvm::BasicBlock *v263;
  unsigned int v264;
  llvm::BasicBlock *v265;
  llvm::Function *v266;
  uint64_t v267;
  unint64_t v268;
  int32x2_t ****v269;
  int32x2_t *v270;
  unint64_t v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  int32x2_t *****v275;
  int32x2_t ****v276;
  int v277;
  int v278;
  llvm::FixedVectorType ***v279;
  uint64_t v280;
  _QWORD **v281;
  uint64_t v282;
  unint64_t v283;
  int32x2_t ****v284;
  int32x2_t *v285;
  unint64_t v286;
  uint64_t v287;
  unsigned int v288;
  uint64_t v289;
  int32x2_t *****v290;
  int32x2_t ****v291;
  int v292;
  int v293;
  uint64_t v294;
  unint64_t v295;
  int32x2_t ****v296;
  int32x2_t *v297;
  unint64_t v298;
  uint64_t v299;
  unsigned int v300;
  uint64_t v301;
  int32x2_t *****v302;
  int32x2_t ****v303;
  int v304;
  int v305;
  uint64_t v306;
  unint64_t v307;
  int32x2_t ****v308;
  int32x2_t *v309;
  unint64_t v310;
  uint64_t v311;
  unsigned int v312;
  uint64_t v313;
  int32x2_t *****v314;
  int32x2_t ****v315;
  int v316;
  int v317;
  uint64_t v318;
  unint64_t v319;
  int32x2_t ****v320;
  int32x2_t *v321;
  unint64_t v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  int32x2_t *****v326;
  int32x2_t ****v327;
  int v328;
  int v329;
  int32x2_t ****v330;
  llvm::MDNode **v331;
  uint64_t v332;
  unsigned int v333;
  uint64_t v334;
  int v335;
  int v336;
  llvm::MDNode **v337;
  uint64_t v338;
  unsigned int v339;
  uint64_t v340;
  int v341;
  int v342;
  llvm::GlobalValue *v343;
  llvm::Value *v344;
  llvm::Constant *v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  int32x2_t ****v349;
  int32x2_t *v350;
  unint64_t v351;
  uint64_t v352;
  unsigned int v353;
  uint64_t v354;
  int32x2_t *****v355;
  int32x2_t ****v356;
  int v357;
  int v358;
  uint64_t v359;
  unint64_t v360;
  int32x2_t ****v361;
  int32x2_t *v362;
  unint64_t v363;
  uint64_t v364;
  unsigned int v365;
  uint64_t v366;
  int32x2_t *****v367;
  int32x2_t ****v368;
  int v369;
  int v370;
  uint64_t v371;
  unint64_t v372;
  int32x2_t ****v373;
  int32x2_t *v374;
  unint64_t v375;
  uint64_t v376;
  unsigned int v377;
  uint64_t v378;
  int32x2_t *****v379;
  int32x2_t ****v380;
  int v381;
  int v382;
  int32x2_t ****v383;
  uint64_t v384;
  unsigned int v385;
  uint64_t v386;
  int v387;
  int v388;
  int32x2_t ****v389;
  uint64_t v390;
  unsigned int v391;
  uint64_t v392;
  int v393;
  int v394;
  int32x2_t ****v395;
  unint64_t v396;
  unint64_t *v397;
  uint64_t v398;
  int32x2_t *v399;
  unint64_t v400;
  uint64_t v401;
  unsigned int v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t v405;
  int v406;
  int v407;
  int32x2_t ****v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  int v412;
  int v413;
  int32x2_t ****v414;
  uint64_t v415;
  unsigned int v416;
  uint64_t v417;
  int v418;
  int v419;
  int32x2_t ****v420;
  uint64_t v421;
  unsigned int v422;
  uint64_t v423;
  int v424;
  int v425;
  uint64_t v426;
  unsigned int v427;
  uint64_t v428;
  int v429;
  int v430;
  uint64_t v431;
  unint64_t v432;
  int32x2_t ****v433;
  int32x2_t *v434;
  unint64_t v435;
  uint64_t v436;
  unsigned int v437;
  uint64_t v438;
  int32x2_t *****v439;
  int32x2_t ****v440;
  int v441;
  int v442;
  uint64_t v443;
  unint64_t v444;
  int32x2_t ****v445;
  int32x2_t *v446;
  unint64_t v447;
  uint64_t v448;
  unsigned int v449;
  uint64_t v450;
  int32x2_t *****v451;
  int32x2_t ****v452;
  int v453;
  int v454;
  int32x2_t ****v455;
  uint64_t v456;
  unsigned int v457;
  uint64_t v458;
  int v459;
  int v460;
  int32x2_t ****v461;
  uint64_t v462;
  unsigned int v463;
  uint64_t v464;
  int v465;
  int v466;
  int32x2_t ****v467;
  uint64_t v468;
  unsigned int v469;
  uint64_t v470;
  int v471;
  int v472;
  int32x2_t ****v473;
  uint64_t v474;
  unsigned int v475;
  uint64_t v476;
  int v477;
  int v478;
  int32x2_t ****v479;
  uint64_t v480;
  unsigned int v481;
  uint64_t v482;
  int v483;
  int v484;
  int32x2_t ****v485;
  uint64_t v486;
  unsigned int v487;
  uint64_t v488;
  int v489;
  int v490;
  unint64_t v491;
  void **v492;
  _BOOL4 v494;
  uint64_t v495;
  void **v496;
  uint64_t v497;
  void **v498;
  void **v499;
  void *v500;
  uint64_t v501;
  uint64_t v502;
  llvm::BasicBlock *v503;
  uint64_t v504;
  int v505;
  uint64_t v506;
  void *v507;
  llvm::BasicBlock *v508;
  unint64_t *v509;
  int32x2_t ****v510;
  uint64_t v511;
  void *v512;
  uint64_t v513;
  unint64_t *v514;
  int32x2_t ****v515;
  uint64_t v516;
  uint64_t v517;

  v517 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(uint64_t **)(v5 + 16 * v4);
  v7 = *v6;
  v8 = *((unsigned int *)v6 + 4);
  if ((_DWORD)v8)
  {
    v9 = ((_DWORD)v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v10 = v7 + (v9 << 6);
    v11 = *(llvm::MDNode ***)(v10 + 24);
    if (v11 == a2)
      goto LABEL_8;
    v12 = 1;
    while (v11 != (llvm::MDNode **)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v10 = v7 + (v9 << 6);
      v11 = *(llvm::MDNode ***)(v10 + 24);
      if (v11 == a2)
        goto LABEL_8;
    }
  }
  v10 = v7 + (v8 << 6);
LABEL_8:
  if (v10 != v7 + (v8 << 6))
    return *(_QWORD *)(v10 + 56);
  v15 = *(_QWORD *)(v5 + 16 * v4 + 8);
  if (v15)
  {
    v16 = (*(uint64_t (**)(uint64_t, llvm::MDNode **))(*(_QWORD *)v15 + 8))(v15, a2);
    if (v16)
    {
      Impl = (int32x2_t ****)v16;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
      v513 = 2;
      v514 = 0;
      v515 = (int32x2_t ****)a2;
      if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v513);
      v512 = &unk_1E814DA10;
      v516 = v17;
      v18 = sub_1C52E2ED8(v17, &v512);
      if (v515 != (int32x2_t ****)-8192 && v515 != (int32x2_t ****)-4096 && v515)
      {
        v19 = v513 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v513 & 0xFFFFFFFFFFFFFFF8) = v514;
        if (v514)
        {
          *v514 = *v514 & 7 | v19;
        }
        else
        {
          v20 = v515;
          v21 = ***v515;
          v22 = (unint64_t)v21[303];
          if (v22 <= v19)
          {
            v23 = v21[305].u32[0];
            if (v22 + 16 * v23 > v19)
            {
              v24 = v23 - 1;
              LODWORD(v25) = v24 & ((v515 >> 4) ^ (v515 >> 9));
              v26 = (int32x2_t *****)(v22 + 16 * v25);
              v27 = *v26;
              if (v515 == *v26)
              {
LABEL_27:
                *v26 = (int32x2_t ****)-8192;
                v21[304] = vadd_s32(v21[304], (int32x2_t)0x1FFFFFFFFLL);
                v20 = v515;
              }
              else
              {
                v28 = 1;
                while (v27 != (int32x2_t ****)-4096)
                {
                  v29 = v25 + v28++;
                  v25 = v29 & v24;
                  v27 = *(int32x2_t *****)(v22 + 16 * v25);
                  if (v515 == v27)
                  {
                    v26 = (int32x2_t *****)(v22 + 16 * v25);
                    goto LABEL_27;
                  }
                }
              }
              *((_BYTE *)v20 + 17) &= ~1u;
            }
          }
        }
      }
      v58 = (int32x2_t ****)v18[7];
      if (v58 == Impl)
        return (uint64_t)Impl;
      if (!v58 || v58 == (int32x2_t ****)-8192 || v58 == (int32x2_t ****)-4096)
        goto LABEL_149;
      v59 = v18[5] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v59 = v18[6];
      v60 = (unint64_t *)v18[6];
      if (!v60)
      {
        v61 = v18[7];
        v62 = ***(int32x2_t ****)v61;
        v63 = (unint64_t)v62[303];
        if (v63 <= v59)
        {
          v64 = v62[305].u32[0];
          if (v63 + 16 * v64 > v59)
          {
            v65 = v64 - 1;
            LODWORD(v66) = v65 & ((v61 >> 4) ^ (v61 >> 9));
            v67 = (uint64_t *)(v63 + 16 * v66);
            v68 = *v67;
            if (v61 != *v67)
            {
              v69 = 1;
              while (v68 != -4096)
              {
                v70 = v66 + v69++;
                v66 = v70 & v65;
                v68 = *(_QWORD *)(v63 + 16 * v66);
                if (v61 == v68)
                  goto LABEL_300;
              }
              goto LABEL_302;
            }
LABEL_301:
            *v67 = -8192;
            v62[304] = vadd_s32(v62[304], (int32x2_t)0x1FFFFFFFFLL);
            v61 = v18[7];
LABEL_302:
            *(_BYTE *)(v61 + 17) &= ~1u;
            goto LABEL_149;
          }
        }
        goto LABEL_149;
      }
      goto LABEL_706;
    }
  }
  v30 = *((unsigned __int8 *)a2 + 16);
  if (v30 <= 3)
  {
    if ((*(_BYTE *)a1 & 8) == 0)
    {
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
      v513 = 2;
      v514 = 0;
      v515 = (int32x2_t ****)a2;
      if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v513);
      v512 = &unk_1E814DA10;
      v516 = v31;
      v32 = sub_1C52E2ED8(v31, &v512);
      if (v515 != (int32x2_t ****)-8192 && v515 != (int32x2_t ****)-4096 && v515)
      {
        v33 = v513 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v513 & 0xFFFFFFFFFFFFFFF8) = v514;
        if (v514)
        {
          *v514 = *v514 & 7 | v33;
        }
        else
        {
          v34 = v515;
          v35 = ***v515;
          v36 = (unint64_t)v35[303];
          if (v36 <= v33)
          {
            v37 = v35[305].u32[0];
            if (v36 + 16 * v37 > v33)
            {
              v38 = v37 - 1;
              LODWORD(v39) = v38 & ((v515 >> 4) ^ (v515 >> 9));
              v40 = (int32x2_t *****)(v36 + 16 * v39);
              v41 = *v40;
              if (v515 == *v40)
              {
LABEL_46:
                *v40 = (int32x2_t ****)-8192;
                v35[304] = vadd_s32(v35[304], (int32x2_t)0x1FFFFFFFFLL);
                v34 = v515;
              }
              else
              {
                v42 = 1;
                while (v41 != (int32x2_t ****)-4096)
                {
                  v43 = v39 + v42++;
                  v39 = v43 & v38;
                  v41 = *(int32x2_t *****)(v36 + 16 * v39);
                  if (v515 == v41)
                  {
                    v40 = (int32x2_t *****)(v36 + 16 * v39);
                    goto LABEL_46;
                  }
                }
              }
              *((_BYTE *)v34 + 17) &= ~1u;
            }
          }
        }
      }
      v87 = (llvm::MDNode **)v32[7];
      if (v87 == a2)
        return (uint64_t)a2;
      if (!v87 || v87 == (llvm::MDNode **)-8192 || v87 == (llvm::MDNode **)-4096)
        goto LABEL_106;
      v157 = v32[5] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v157 = v32[6];
      v158 = (unint64_t *)v32[6];
      if (!v158)
      {
        v159 = v32[7];
        v160 = ***(int32x2_t ****)v159;
        v161 = (unint64_t)v160[303];
        if (v161 <= v157)
        {
          v162 = v160[305].u32[0];
          if (v161 + 16 * v162 > v157)
          {
            v163 = v162 - 1;
            LODWORD(v164) = v163 & ((v159 >> 4) ^ (v159 >> 9));
            v165 = (uint64_t *)(v161 + 16 * v164);
            v166 = *v165;
            if (v159 != *v165)
            {
              v167 = 1;
              while (v166 != -4096)
              {
                v168 = v164 + v167++;
                v164 = v168 & v163;
                v166 = *(_QWORD *)(v161 + 16 * v164);
                if (v159 == v166)
                  goto LABEL_241;
              }
              goto LABEL_243;
            }
LABEL_242:
            *v165 = -8192;
            v160[304] = vadd_s32(v160[304], (int32x2_t)0x1FFFFFFFFLL);
            v159 = v32[7];
LABEL_243:
            *(_BYTE *)(v159 + 17) &= ~1u;
            goto LABEL_106;
          }
        }
        goto LABEL_106;
      }
      goto LABEL_495;
    }
    return 0;
  }
  if (v30 != 23)
  {
    if (v30 == 24)
    {
      v44 = *(_QWORD *)(a1 + 8);
      if (v44
        && (v45 = (llvm::PointerType *)(*(uint64_t (**)(uint64_t, llvm::MDNode *))(*(_QWORD *)v44 + 24))(v44, a2[9]), v45 != a2[9]))
      {
        v206 = a2[3];
        v205 = a2 + 3;
        v204 = (uint64_t)v206;
        v207 = *((_BYTE *)v205 + 23);
        v208 = v207;
        if (v207 >= 0)
          v209 = (uint64_t)v205;
        else
          v209 = v204;
        v210 = v207 & 0x7F;
        if (v208 >= 0)
          v211 = v210;
        else
          v211 = (uint64_t)v205[1];
        v212 = *((_BYTE *)v205 + 47);
        v213 = v212;
        if (v212 >= 0)
          v214 = (uint64_t)(v205 + 3);
        else
          v214 = (uint64_t)v205[3];
        v215 = v212 & 0x7F;
        if (v213 >= 0)
          v216 = v215;
        else
          v216 = (uint64_t)v205[4];
        Impl = (int32x2_t ****)llvm::InlineAsm::get(v45, v209, v211, v214, v216, *((_BYTE *)v205 + 56), *((_BYTE *)v205 + 57), *((_DWORD *)v205 + 15), *((_BYTE *)v205 + 64));
      }
      else
      {
        Impl = (int32x2_t ****)a2;
      }
      v46 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
      v513 = 2;
      v514 = 0;
      v515 = Impl;
      if (Impl != (int32x2_t ****)-8192 && Impl != (int32x2_t ****)-4096 && Impl)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v513);
      v512 = &unk_1E814DA10;
      v516 = v46;
      v18 = sub_1C52E2ED8(v46, &v512);
      if (v515 != (int32x2_t ****)-8192 && v515 != (int32x2_t ****)-4096 && v515)
      {
        v47 = v513 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v513 & 0xFFFFFFFFFFFFFFF8) = v514;
        if (v514)
        {
          *v514 = *v514 & 7 | v47;
        }
        else
        {
          v48 = v515;
          v49 = ***v515;
          v50 = (unint64_t)v49[303];
          if (v50 <= v47)
          {
            v51 = v49[305].u32[0];
            if (v50 + 16 * v51 > v47)
            {
              v52 = v51 - 1;
              LODWORD(v53) = v52 & ((v515 >> 4) ^ (v515 >> 9));
              v54 = (int32x2_t *****)(v50 + 16 * v53);
              v55 = *v54;
              if (v515 == *v54)
              {
LABEL_68:
                *v54 = (int32x2_t ****)-8192;
                v49[304] = vadd_s32(v49[304], (int32x2_t)0x1FFFFFFFFLL);
                v48 = v515;
              }
              else
              {
                v56 = 1;
                while (v55 != (int32x2_t ****)-4096)
                {
                  v57 = v53 + v56++;
                  v53 = v57 & v52;
                  v55 = *(int32x2_t *****)(v50 + 16 * v53);
                  if (v515 == v55)
                  {
                    v54 = (int32x2_t *****)(v50 + 16 * v53);
                    goto LABEL_68;
                  }
                }
              }
              *((_BYTE *)v48 + 17) &= ~1u;
            }
          }
        }
      }
      v108 = (int32x2_t ****)v18[7];
      if (v108 == Impl)
        return (uint64_t)Impl;
      if (!v108 || v108 == (int32x2_t ****)-8192 || v108 == (int32x2_t ****)-4096)
        goto LABEL_149;
      v59 = v18[5] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v59 = v18[6];
      v60 = (unint64_t *)v18[6];
      if (!v60)
      {
        v61 = v18[7];
        v62 = ***(int32x2_t ****)v61;
        v63 = (unint64_t)v62[303];
        if (v63 <= v59)
        {
          v199 = v62[305].u32[0];
          if (v63 + 16 * v199 > v59)
          {
            v200 = v199 - 1;
            LODWORD(v66) = v200 & ((v61 >> 4) ^ (v61 >> 9));
            v67 = (uint64_t *)(v63 + 16 * v66);
            v201 = *v67;
            if (v61 != *v67)
            {
              v202 = 1;
              while (v201 != -4096)
              {
                v203 = v66 + v202++;
                v66 = v203 & v200;
                v201 = *(_QWORD *)(v63 + 16 * v66);
                if (v61 == v201)
                  goto LABEL_300;
              }
              goto LABEL_302;
            }
            goto LABEL_301;
          }
        }
        goto LABEL_149;
      }
      goto LABEL_706;
    }
    if (v30 > 0x14)
      return 0;
    switch(v30)
    {
      case 7u:
        v223 = (llvm::NoCFIValue *)sub_1C5FD3BE0(a1, *(a2 - 4));
        Impl = (int32x2_t ****)llvm::NoCFIValue::get(v223, v224);
        v225 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
        v513 = 2;
        v514 = 0;
        v515 = (int32x2_t ****)a2;
        if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v513);
        v512 = &unk_1E814DA10;
        v516 = v225;
        v18 = sub_1C52E2ED8(v225, &v512);
        if (v515 != (int32x2_t ****)-8192 && v515 != (int32x2_t ****)-4096 && v515)
        {
          v226 = v513 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v513 & 0xFFFFFFFFFFFFFFF8) = v514;
          if (v514)
          {
            *v514 = *v514 & 7 | v226;
          }
          else
          {
            v227 = v515;
            v228 = ***v515;
            v229 = (unint64_t)v228[303];
            if (v229 <= v226)
            {
              v230 = v228[305].u32[0];
              if (v229 + 16 * v230 > v226)
              {
                v231 = v230 - 1;
                LODWORD(v232) = v231 & ((v515 >> 4) ^ (v515 >> 9));
                v233 = (int32x2_t *****)(v229 + 16 * v232);
                v234 = *v233;
                if (v515 == *v233)
                {
LABEL_345:
                  *v233 = (int32x2_t ****)-8192;
                  v228[304] = vadd_s32(v228[304], (int32x2_t)0x1FFFFFFFFLL);
                  v227 = v515;
                }
                else
                {
                  v235 = 1;
                  while (v234 != (int32x2_t ****)-4096)
                  {
                    v236 = v232 + v235++;
                    v232 = v236 & v231;
                    v234 = *(int32x2_t *****)(v229 + 16 * v232);
                    if (v515 == v234)
                    {
                      v233 = (int32x2_t *****)(v229 + 16 * v232);
                      goto LABEL_345;
                    }
                  }
                }
                *((_BYTE *)v227 + 17) &= ~1u;
              }
            }
          }
        }
        v383 = (int32x2_t ****)v18[7];
        if (v383 == Impl)
          return (uint64_t)Impl;
        if (!v383 || v383 == (int32x2_t ****)-8192 || v383 == (int32x2_t ****)-4096)
          goto LABEL_149;
        v59 = v18[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v59 = v18[6];
        v60 = (unint64_t *)v18[6];
        if (!v60)
        {
          v61 = v18[7];
          v62 = ***(int32x2_t ****)v61;
          v63 = (unint64_t)v62[303];
          if (v63 <= v59)
          {
            v384 = v62[305].u32[0];
            if (v63 + 16 * v384 > v59)
            {
              v385 = v384 - 1;
              LODWORD(v66) = v385 & ((v61 >> 4) ^ (v61 >> 9));
              v67 = (uint64_t *)(v63 + 16 * v66);
              v386 = *v67;
              if (v61 != *v67)
              {
                v387 = 1;
                while (v386 != -4096)
                {
                  v388 = v66 + v387++;
                  v66 = v388 & v385;
                  v386 = *(_QWORD *)(v63 + 16 * v66);
                  if (v61 == v386)
                    goto LABEL_300;
                }
                goto LABEL_302;
              }
              goto LABEL_301;
            }
          }
          goto LABEL_149;
        }
        goto LABEL_706;
      case 6u:
        v237 = (unsigned __int8 *)sub_1C5FD3BE0(a1, *(a2 - 4));
        if (v237 && v237[16] <= 3u)
        {
          Impl = (int32x2_t ****)llvm::DSOLocalEquivalent::get((llvm::DSOLocalEquivalent *)v237, v238);
          v239 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
          v513 = 2;
          v514 = 0;
          v515 = (int32x2_t ****)a2;
          if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v513);
          v512 = &unk_1E814DA10;
          v516 = v239;
          v18 = sub_1C52E2ED8(v239, &v512);
          if (v515 != (int32x2_t ****)-8192 && v515 != (int32x2_t ****)-4096 && v515)
          {
            v240 = v513 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v513 & 0xFFFFFFFFFFFFFFF8) = v514;
            if (v514)
            {
              *v514 = *v514 & 7 | v240;
            }
            else
            {
              v241 = v515;
              v242 = ***v515;
              v243 = (unint64_t)v242[303];
              if (v243 <= v240)
              {
                v244 = v242[305].u32[0];
                if (v243 + 16 * v244 > v240)
                {
                  v245 = v244 - 1;
                  LODWORD(v246) = v245 & ((v515 >> 4) ^ (v515 >> 9));
                  v247 = (int32x2_t *****)(v243 + 16 * v246);
                  v248 = *v247;
                  if (v515 == *v247)
                  {
LABEL_364:
                    *v247 = (int32x2_t ****)-8192;
                    v242[304] = vadd_s32(v242[304], (int32x2_t)0x1FFFFFFFFLL);
                    v241 = v515;
                  }
                  else
                  {
                    v249 = 1;
                    while (v248 != (int32x2_t ****)-4096)
                    {
                      v250 = v246 + v249++;
                      v246 = v250 & v245;
                      v248 = *(int32x2_t *****)(v243 + 16 * v246);
                      if (v515 == v248)
                      {
                        v247 = (int32x2_t *****)(v243 + 16 * v246);
                        goto LABEL_364;
                      }
                    }
                  }
                  *((_BYTE *)v241 + 17) &= ~1u;
                }
              }
            }
          }
          v455 = (int32x2_t ****)v18[7];
          if (v455 == Impl)
            return (uint64_t)Impl;
          if (!v455 || v455 == (int32x2_t ****)-8192 || v455 == (int32x2_t ****)-4096)
            goto LABEL_149;
          v59 = v18[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v59 = v18[6];
          v60 = (unint64_t *)v18[6];
          if (!v60)
          {
            v61 = v18[7];
            v62 = ***(int32x2_t ****)v61;
            v63 = (unint64_t)v62[303];
            if (v63 <= v59)
            {
              v456 = v62[305].u32[0];
              if (v63 + 16 * v456 > v59)
              {
                v457 = v456 - 1;
                LODWORD(v66) = v457 & ((v61 >> 4) ^ (v61 >> 9));
                v67 = (uint64_t *)(v63 + 16 * v66);
                v458 = *v67;
                if (v61 != *v67)
                {
                  v459 = 1;
                  while (v458 != -4096)
                  {
                    v460 = v66 + v459++;
                    v66 = v460 & v457;
                    v458 = *(_QWORD *)(v63 + 16 * v66);
                    if (v61 == v458)
                      goto LABEL_300;
                  }
                  goto LABEL_302;
                }
                goto LABEL_301;
              }
            }
            goto LABEL_149;
          }
        }
        else
        {
          v344 = llvm::Value::stripPointerCastsAndAliases((llvm::Value *)v237);
          v345 = *a2;
          v346 = *(_QWORD *)(a1 + 8);
          if (v346)
            v345 = (llvm::Constant *)(*(uint64_t (**)(uint64_t, llvm::MDNode *))(*(_QWORD *)v346 + 24))(v346, *a2);
          Impl = (int32x2_t ****)llvm::DSOLocalEquivalent::get(v344, v343);
          if (*Impl != (int32x2_t ***)v345)
            Impl = (int32x2_t ****)sub_1C537D3B8((llvm *)0x31, (uint64_t)Impl, v345, 0);
          v347 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
          v513 = 2;
          v514 = 0;
          v515 = (int32x2_t ****)a2;
          if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v513);
          v512 = &unk_1E814DA10;
          v516 = v347;
          v18 = sub_1C52E2ED8(v347, &v512);
          if (v515 != (int32x2_t ****)-8192 && v515 != (int32x2_t ****)-4096 && v515)
          {
            v348 = v513 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v513 & 0xFFFFFFFFFFFFFFF8) = v514;
            if (v514)
            {
              *v514 = *v514 & 7 | v348;
            }
            else
            {
              v349 = v515;
              v350 = ***v515;
              v351 = (unint64_t)v350[303];
              if (v351 <= v348)
              {
                v352 = v350[305].u32[0];
                if (v351 + 16 * v352 > v348)
                {
                  v353 = v352 - 1;
                  LODWORD(v354) = v353 & ((v515 >> 4) ^ (v515 >> 9));
                  v355 = (int32x2_t *****)(v351 + 16 * v354);
                  v356 = *v355;
                  if (v515 == *v355)
                  {
LABEL_515:
                    *v355 = (int32x2_t ****)-8192;
                    v350[304] = vadd_s32(v350[304], (int32x2_t)0x1FFFFFFFFLL);
                    v349 = v515;
                  }
                  else
                  {
                    v357 = 1;
                    while (v356 != (int32x2_t ****)-4096)
                    {
                      v358 = v354 + v357++;
                      v354 = v358 & v353;
                      v356 = *(int32x2_t *****)(v351 + 16 * v354);
                      if (v515 == v356)
                      {
                        v355 = (int32x2_t *****)(v351 + 16 * v354);
                        goto LABEL_515;
                      }
                    }
                  }
                  *((_BYTE *)v349 + 17) &= ~1u;
                }
              }
            }
          }
          v461 = (int32x2_t ****)v18[7];
          if (v461 == Impl)
            return (uint64_t)Impl;
          if (!v461 || v461 == (int32x2_t ****)-8192 || v461 == (int32x2_t ****)-4096)
            goto LABEL_149;
          v59 = v18[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v59 = v18[6];
          v60 = (unint64_t *)v18[6];
          if (!v60)
          {
            v61 = v18[7];
            v62 = ***(int32x2_t ****)v61;
            v63 = (unint64_t)v62[303];
            if (v63 <= v59)
            {
              v462 = v62[305].u32[0];
              if (v63 + 16 * v462 > v59)
              {
                v463 = v462 - 1;
                LODWORD(v66) = v463 & ((v61 >> 4) ^ (v61 >> 9));
                v67 = (uint64_t *)(v63 + 16 * v66);
                v464 = *v67;
                if (v61 != *v67)
                {
                  v465 = 1;
                  while (v464 != -4096)
                  {
                    v466 = v66 + v465++;
                    v66 = v466 & v463;
                    v464 = *(_QWORD *)(v63 + 16 * v66);
                    if (v61 == v464)
                      goto LABEL_300;
                  }
                  goto LABEL_302;
                }
                goto LABEL_301;
              }
            }
            goto LABEL_149;
          }
        }
        goto LABEL_706;
      case 4u:
        v251 = (llvm::BlockAddress *)sub_1C5FD3BE0(a1, *(a2 - 8));
        if (*((llvm::BlockAddress **)v251 + 9) == (llvm::BlockAddress *)((char *)v251 + 72))
        {
          v252 = &v508;
          v507 = *(a2 - 4);
          v253 = *(_QWORD **)*a2;
          LOWORD(v516) = 257;
          v254 = operator new();
          *(_QWORD *)v254 = *v253 + 1600;
          *(_QWORD *)(v254 + 8) = 0;
          v255 = *(_DWORD *)(v254 + 20) & 0xC0000000;
          *(_DWORD *)(v254 + 16) = 22;
          *(_DWORD *)(v254 + 20) = v255;
          *(_QWORD *)(v254 + 24) = 0;
          *(_QWORD *)(v254 + 32) = 0;
          *(_QWORD *)(v254 + 40) = v254 + 40;
          *(_QWORD *)(v254 + 48) = v254 + 40;
          *(_QWORD *)(v254 + 56) = 0;
          llvm::Value::setName((uint64_t ***)v254, (uint64_t)&v512);
          v508 = (llvm::BasicBlock *)v254;
          v258 = (void ***)(a1 + 184);
          v259 = *(void ***)(a1 + 184);
          v260 = *(unsigned int *)(a1 + 192);
          v261 = &v507;
          if (v260 >= *(_DWORD *)(a1 + 196))
          {
            v491 = v260 + 1;
            v492 = &v259[2 * v260];
            v494 = v259 <= &v507 && v492 > &v507;
            if (v494)
              v495 = ((char *)&v507 - (char *)v259) >> 4;
            else
              v495 = -1;
            v512 = 0;
            v259 = (void **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 184, v491, 16, (unint64_t *)&v512);
            v496 = *(void ***)(a1 + 184);
            v497 = *(unsigned int *)(a1 + 192);
            if ((_DWORD)v497)
            {
              v498 = &v496[2 * v497];
              v499 = v259;
              do
              {
                *v499 = *v496;
                v500 = v496[1];
                v496[1] = 0;
                v499[1] = v500;
                v496 += 2;
                v499 += 2;
              }
              while (v496 != v498);
              v501 = (uint64_t)(*v258 - 1);
              v502 = 16 * v497;
              do
              {
                v503 = *(llvm::BasicBlock **)(v501 + v502);
                v504 = v502;
                *(_QWORD *)(v501 + v502) = 0;
                if (v503)
                {
                  llvm::BasicBlock::~BasicBlock(v503, v256);
                  MEMORY[0x1CAA32FC0]();
                }
                v502 = v504 - 16;
              }
              while (v504 != 16);
              v496 = *v258;
            }
            v505 = (int)v512;
            if (v496 != (void **)(a1 + 200))
              free(v496);
            *(_QWORD *)(a1 + 184) = v259;
            *(_DWORD *)(a1 + 196) = v505;
            v261 = &v507;
            if (v494)
            {
              v261 = &v259[2 * v495];
              v252 = (llvm::BasicBlock **)(v261 + 1);
            }
            v260 = *(unsigned int *)(a1 + 192);
          }
          v262 = &v259[2 * v260];
          *v262 = *v261;
          v263 = *v252;
          *v252 = 0;
          v262[1] = v263;
          v264 = v260 + 1;
          *(_DWORD *)(a1 + 192) = v264;
          v265 = v508;
          v508 = 0;
          if (v265)
          {
            llvm::BasicBlock::~BasicBlock(v265, v256);
            MEMORY[0x1CAA32FC0]();
            v264 = *(_DWORD *)(a1 + 192);
          }
          v266 = (llvm::Function *)(*v258)[2 * v264 - 1];
        }
        else
        {
          v266 = (llvm::Function *)sub_1C5FD3BE0(a1, *(a2 - 4));
        }
        if (!v266)
          v266 = *(a2 - 4);
        Impl = (int32x2_t ****)llvm::BlockAddress::get(v251, v266, v257);
        v359 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
        v513 = 2;
        v514 = 0;
        v515 = (int32x2_t ****)a2;
        if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v513);
        v512 = &unk_1E814DA10;
        v516 = v359;
        v18 = sub_1C52E2ED8(v359, &v512);
        if (v515 != (int32x2_t ****)-8192 && v515 != (int32x2_t ****)-4096 && v515)
        {
          v360 = v513 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v513 & 0xFFFFFFFFFFFFFFF8) = v514;
          if (v514)
          {
            *v514 = *v514 & 7 | v360;
          }
          else
          {
            v361 = v515;
            v362 = ***v515;
            v363 = (unint64_t)v362[303];
            if (v363 <= v360)
            {
              v364 = v362[305].u32[0];
              if (v363 + 16 * v364 > v360)
              {
                v365 = v364 - 1;
                LODWORD(v366) = v365 & ((v515 >> 4) ^ (v515 >> 9));
                v367 = (int32x2_t *****)(v363 + 16 * v366);
                v368 = *v367;
                if (v515 == *v367)
                {
LABEL_535:
                  *v367 = (int32x2_t ****)-8192;
                  v362[304] = vadd_s32(v362[304], (int32x2_t)0x1FFFFFFFFLL);
                  v361 = v515;
                }
                else
                {
                  v369 = 1;
                  while (v368 != (int32x2_t ****)-4096)
                  {
                    v370 = v366 + v369++;
                    v366 = v370 & v365;
                    v368 = *(int32x2_t *****)(v363 + 16 * v366);
                    if (v515 == v368)
                    {
                      v367 = (int32x2_t *****)(v363 + 16 * v366);
                      goto LABEL_535;
                    }
                  }
                }
                *((_BYTE *)v361 + 17) &= ~1u;
              }
            }
          }
        }
        v389 = (int32x2_t ****)v18[7];
        if (v389 == Impl)
          return (uint64_t)Impl;
        if (!v389 || v389 == (int32x2_t ****)-8192 || v389 == (int32x2_t ****)-4096)
          goto LABEL_149;
        v59 = v18[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v59 = v18[6];
        v60 = (unint64_t *)v18[6];
        if (!v60)
        {
          v61 = v18[7];
          v62 = ***(int32x2_t ****)v61;
          v63 = (unint64_t)v62[303];
          if (v63 <= v59)
          {
            v390 = v62[305].u32[0];
            if (v63 + 16 * v390 > v59)
            {
              v391 = v390 - 1;
              LODWORD(v66) = v391 & ((v61 >> 4) ^ (v61 >> 9));
              v67 = (uint64_t *)(v63 + 16 * v66);
              v392 = *v67;
              if (v61 != *v67)
              {
                v393 = 1;
                while (v392 != -4096)
                {
                  v394 = v66 + v393++;
                  v66 = v394 & v391;
                  v392 = *(_QWORD *)(v63 + 16 * v66);
                  if (v61 == v392)
                    goto LABEL_300;
                }
                goto LABEL_302;
              }
              goto LABEL_301;
            }
          }
          goto LABEL_149;
        }
        goto LABEL_706;
    }
    v77 = *((_DWORD *)a2 + 5);
    v78 = v77 & 0x7FFFFFF;
    if ((v77 & 0x7FFFFFF) != 0)
    {
      v79 = 0;
      v80 = 0;
      while (1)
      {
        v81 = *((_DWORD *)a2 + 5);
        if ((v81 & 0x40000000) != 0)
          v82 = (llvm::MDNode **)*(a2 - 1);
        else
          v82 = &a2[-4 * (v81 & 0x7FFFFFF)];
        v83 = v82[v79];
        v84 = sub_1C5FD3BE0(a1, v83);
        v85 = 4 * (v84 != (_QWORD)v83);
        if (!v84)
          v85 = 1;
        if (v85)
          break;
        ++v80;
        v79 += 4;
        if (v78 == v80)
        {
          v86 = 1;
          LODWORD(v80) = v78;
          goto LABEL_174;
        }
      }
      if (v85 != 4)
        return 0;
      v86 = 0;
    }
    else
    {
      LODWORD(v80) = 0;
      v84 = 0;
      v86 = 1;
    }
LABEL_174:
    v123 = *a2;
    v124 = *(_QWORD *)(a1 + 8);
    if (v124)
      v123 = (llvm::PoisonValue *)(*(uint64_t (**)(uint64_t, llvm::MDNode *))(*(_QWORD *)v124 + 24))(v124, *a2);
    if (v86 && v123 == *a2)
    {
      v181 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
      v513 = 2;
      v514 = 0;
      v515 = (int32x2_t ****)a2;
      if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v513);
      v512 = &unk_1E814DA10;
      v516 = v181;
      v32 = sub_1C52E2ED8(v181, &v512);
      if (v515 != (int32x2_t ****)-8192 && v515 != (int32x2_t ****)-4096 && v515)
      {
        v182 = v513 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v513 & 0xFFFFFFFFFFFFFFF8) = v514;
        if (v514)
        {
          *v514 = *v514 & 7 | v182;
        }
        else
        {
          v183 = v515;
          v184 = ***v515;
          v185 = (unint64_t)v184[303];
          if (v185 <= v182)
          {
            v186 = v184[305].u32[0];
            if (v185 + 16 * v186 > v182)
            {
              v187 = v186 - 1;
              LODWORD(v188) = v187 & ((v515 >> 4) ^ (v515 >> 9));
              v189 = (int32x2_t *****)(v185 + 16 * v188);
              v190 = *v189;
              if (v515 == *v189)
              {
LABEL_276:
                *v189 = (int32x2_t ****)-8192;
                v184[304] = vadd_s32(v184[304], (int32x2_t)0x1FFFFFFFFLL);
                v183 = v515;
              }
              else
              {
                v191 = 1;
                while (v190 != (int32x2_t ****)-4096)
                {
                  v192 = v188 + v191++;
                  v188 = v192 & v187;
                  v190 = *(int32x2_t *****)(v185 + 16 * v188);
                  if (v515 == v190)
                  {
                    v189 = (int32x2_t *****)(v185 + 16 * v188);
                    goto LABEL_276;
                  }
                }
              }
              *((_BYTE *)v183 + 17) &= ~1u;
            }
          }
        }
      }
      v337 = (llvm::MDNode **)v32[7];
      if (v337 == a2)
        return (uint64_t)a2;
      if (!v337 || v337 == (llvm::MDNode **)-8192 || v337 == (llvm::MDNode **)-4096)
        goto LABEL_106;
      v157 = v32[5] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v157 = v32[6];
      v158 = (unint64_t *)v32[6];
      if (!v158)
      {
        v159 = v32[7];
        v160 = ***(int32x2_t ****)v159;
        v161 = (unint64_t)v160[303];
        if (v161 <= v157)
        {
          v338 = v160[305].u32[0];
          if (v161 + 16 * v338 > v157)
          {
            v339 = v338 - 1;
            LODWORD(v164) = v339 & ((v159 >> 4) ^ (v159 >> 9));
            v165 = (uint64_t *)(v161 + 16 * v164);
            v340 = *v165;
            if (v159 != *v165)
            {
              v341 = 1;
              while (v340 != -4096)
              {
                v342 = v164 + v341++;
                v164 = v342 & v339;
                v340 = *(_QWORD *)(v161 + 16 * v164);
                if (v159 == v340)
                  goto LABEL_241;
              }
              goto LABEL_243;
            }
            goto LABEL_242;
          }
        }
        goto LABEL_106;
      }
      goto LABEL_495;
    }
    v512 = &v514;
    v513 = 0x800000000;
    if (v78 >= 9)
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v512, (uint64_t)&v514, v78, 8);
    if ((_DWORD)v80)
    {
      v125 = 0;
      do
      {
        v126 = *((_DWORD *)a2 + 5);
        if ((v126 & 0x40000000) != 0)
          v127 = (llvm::MDNode **)*(a2 - 1);
        else
          v127 = &a2[-4 * (v126 & 0x7FFFFFF)];
        v128 = *(uint64_t *)((char *)v127 + v125);
        v129 = v513;
        if (v513 >= (unint64_t)HIDWORD(v513))
        {
          v506 = v125;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v512, (uint64_t)&v514, v513 + 1, 8);
          v125 = v506;
          v129 = v513;
        }
        *((_QWORD *)v512 + v129) = v128;
        LODWORD(v513) = v513 + 1;
        v125 += 32;
      }
      while (32 * v80 != v125);
    }
    if ((v86 & 1) == 0)
    {
      v130 = v513;
      if (v513 >= HIDWORD(v513))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v512, (uint64_t)&v514, v513 + 1, 8);
        v130 = v513;
      }
      *((_QWORD *)v512 + v130) = v84;
      LODWORD(v513) = v513 + 1;
      v131 = v80 + 1;
      if (v131 != (_DWORD)v78)
      {
        while (1)
        {
          v137 = *((_DWORD *)a2 + 5);
          v138 = (v137 & 0x40000000) != 0 ? *(a2 - 1) : (llvm::MDNode *)&a2[-4 * (v137 & 0x7FFFFFF)];
          v139 = sub_1C5FD3BE0(a1, *((_QWORD *)v138 + 4 * v131));
          if (!v139)
            break;
          v140 = v139;
          v141 = v513;
          if (v513 >= (unint64_t)HIDWORD(v513))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v512, (uint64_t)&v514, v513 + 1, 8);
            v141 = v513;
          }
          *((_QWORD *)v512 + v141) = v140;
          LODWORD(v513) = v513 + 1;
          if ((_DWORD)v78 == ++v131)
            goto LABEL_192;
        }
        Impl = 0;
        goto LABEL_467;
      }
    }
LABEL_192:
    v132 = *(_QWORD *)(a1 + 8);
    v133 = *((unsigned __int8 *)a2 + 16);
    if (v132)
    {
      if (v133 != 62)
      {
        if (v133 != 5)
          goto LABEL_214;
        if (*((_WORD *)a2 + 9) != 34)
        {
          v136 = 0;
          goto LABEL_443;
        }
      }
      v134 = v133 == 62;
      v135 = 3;
      if (v134)
        v135 = 8;
      v136 = (llvm::GetElementPtrInst *)(*(uint64_t (**)(uint64_t, llvm::MDNode *))(*(_QWORD *)v132 + 24))(v132, a2[v135]);
      v133 = *((unsigned __int8 *)a2 + 16);
    }
    else
    {
      v136 = 0;
    }
    if (v133 != 5)
    {
LABEL_214:
      switch(v133)
      {
        case 8:
          Impl = (int32x2_t ****)llvm::ConstantArray::get(v123, (llvm::Type *)v512, v513);
          v144 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
          v508 = (llvm::BasicBlock *)2;
          v509 = 0;
          v510 = (int32x2_t ****)a2;
          if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v508);
          v507 = &unk_1E814DA10;
          v511 = v144;
          v145 = sub_1C52E2ED8(v144, &v507);
          if (v510 != (int32x2_t ****)-8192 && v510 != (int32x2_t ****)-4096 && v510)
          {
            v146 = (unint64_t)v508 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)((unint64_t)v508 & 0xFFFFFFFFFFFFFFF8) = v509;
            if (v509)
            {
              *v509 = *v509 & 7 | v146;
            }
            else
            {
              v147 = v510;
              v148 = ***v510;
              v149 = (unint64_t)v148[303];
              if (v149 <= v146)
              {
                v150 = v148[305].u32[0];
                if (v149 + 16 * v150 > v146)
                {
                  v151 = v150 - 1;
                  LODWORD(v152) = v151 & ((v510 >> 4) ^ (v510 >> 9));
                  v153 = (int32x2_t *****)(v149 + 16 * v152);
                  v154 = *v153;
                  if (v510 == *v153)
                  {
LABEL_230:
                    *v153 = (int32x2_t ****)-8192;
                    v148[304] = vadd_s32(v148[304], (int32x2_t)0x1FFFFFFFFLL);
                    v147 = v510;
                  }
                  else
                  {
                    v155 = 1;
                    while (v154 != (int32x2_t ****)-4096)
                    {
                      v156 = v152 + v155++;
                      v152 = v156 & v151;
                      v154 = *(int32x2_t *****)(v149 + 16 * v152);
                      if (v510 == v154)
                      {
                        v153 = (int32x2_t *****)(v149 + 16 * v152);
                        goto LABEL_230;
                      }
                    }
                  }
                  *((_BYTE *)v147 + 17) &= ~1u;
                }
              }
            }
          }
          v395 = (int32x2_t ****)v145[7];
          if (v395 != Impl)
          {
            if (!v395 || v395 == (int32x2_t ****)-8192 || v395 == (int32x2_t ****)-4096)
              goto LABEL_463;
            v396 = v145[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v396 = v145[6];
            v397 = (unint64_t *)v145[6];
            if (v397)
              goto LABEL_759;
            v398 = v145[7];
            v399 = ***(int32x2_t ****)v398;
            v400 = (unint64_t)v399[303];
            if (v400 > v396)
              goto LABEL_463;
            v401 = v399[305].u32[0];
            if (v400 + 16 * v401 <= v396)
              goto LABEL_463;
            v402 = v401 - 1;
            LODWORD(v403) = v402 & ((v398 >> 4) ^ (v398 >> 9));
            v404 = (uint64_t *)(v400 + 16 * v403);
            v405 = *v404;
            if (v398 == *v404)
              goto LABEL_644;
            v406 = 1;
            do
            {
              if (v405 == -4096)
                goto LABEL_645;
              v407 = v403 + v406++;
              v403 = v407 & v402;
              v405 = *(_QWORD *)(v400 + 16 * v403);
            }
            while (v398 != v405);
            goto LABEL_643;
          }
          break;
        case 9:
          Impl = (int32x2_t ****)llvm::ConstantStruct::get(v123, (llvm::Type *)v512, v513);
          v267 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
          v508 = (llvm::BasicBlock *)2;
          v509 = 0;
          v510 = (int32x2_t ****)a2;
          if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v508);
          v507 = &unk_1E814DA10;
          v511 = v267;
          v145 = sub_1C52E2ED8(v267, &v507);
          if (v510 != (int32x2_t ****)-8192 && v510 != (int32x2_t ****)-4096 && v510)
          {
            v268 = (unint64_t)v508 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)((unint64_t)v508 & 0xFFFFFFFFFFFFFFF8) = v509;
            if (v509)
            {
              *v509 = *v509 & 7 | v268;
            }
            else
            {
              v269 = v510;
              v270 = ***v510;
              v271 = (unint64_t)v270[303];
              if (v271 <= v268)
              {
                v272 = v270[305].u32[0];
                if (v271 + 16 * v272 > v268)
                {
                  v273 = v272 - 1;
                  LODWORD(v274) = v273 & ((v510 >> 4) ^ (v510 >> 9));
                  v275 = (int32x2_t *****)(v271 + 16 * v274);
                  v276 = *v275;
                  if (v510 == *v275)
                  {
LABEL_386:
                    *v275 = (int32x2_t ****)-8192;
                    v270[304] = vadd_s32(v270[304], (int32x2_t)0x1FFFFFFFFLL);
                    v269 = v510;
                  }
                  else
                  {
                    v277 = 1;
                    while (v276 != (int32x2_t ****)-4096)
                    {
                      v278 = v274 + v277++;
                      v274 = v278 & v273;
                      v276 = *(int32x2_t *****)(v271 + 16 * v274);
                      if (v510 == v276)
                      {
                        v275 = (int32x2_t *****)(v271 + 16 * v274);
                        goto LABEL_386;
                      }
                    }
                  }
                  *((_BYTE *)v269 + 17) &= ~1u;
                }
              }
            }
          }
          v408 = (int32x2_t ****)v145[7];
          if (v408 != Impl)
          {
            if (!v408 || v408 == (int32x2_t ****)-8192 || v408 == (int32x2_t ****)-4096)
              goto LABEL_463;
            v396 = v145[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v396 = v145[6];
            v397 = (unint64_t *)v145[6];
            if (v397)
              goto LABEL_759;
            v398 = v145[7];
            v399 = ***(int32x2_t ****)v398;
            v400 = (unint64_t)v399[303];
            if (v400 > v396)
              goto LABEL_463;
            v409 = v399[305].u32[0];
            if (v400 + 16 * v409 <= v396)
              goto LABEL_463;
            v410 = v409 - 1;
            LODWORD(v403) = v410 & ((v398 >> 4) ^ (v398 >> 9));
            v404 = (uint64_t *)(v400 + 16 * v403);
            v411 = *v404;
            if (v398 == *v404)
              goto LABEL_644;
            v412 = 1;
            do
            {
              if (v411 == -4096)
                goto LABEL_645;
              v413 = v403 + v412++;
              v403 = v413 & v410;
              v411 = *(_QWORD *)(v400 + 16 * v403);
            }
            while (v398 != v411);
            goto LABEL_643;
          }
          break;
        case 10:
          v279 = (llvm::FixedVectorType ***)v512;
          v280 = v513;
          Impl = (int32x2_t ****)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v512, (llvm::Type *)v513);
          if (!Impl)
          {
            llvm::FixedVectorType::get(**v279, (llvm::Type *)v280);
            Impl = (int32x2_t ****)sub_1C537B3A4(**v281 + 1288, (uint64_t)v281, v279, v280);
          }
          v282 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
          v508 = (llvm::BasicBlock *)2;
          v509 = 0;
          v510 = (int32x2_t ****)a2;
          if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v508);
          v507 = &unk_1E814DA10;
          v511 = v282;
          v145 = sub_1C52E2ED8(v282, &v507);
          if (v510 != (int32x2_t ****)-8192 && v510 != (int32x2_t ****)-4096 && v510)
          {
            v283 = (unint64_t)v508 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)((unint64_t)v508 & 0xFFFFFFFFFFFFFFF8) = v509;
            if (v509)
            {
              *v509 = *v509 & 7 | v283;
            }
            else
            {
              v284 = v510;
              v285 = ***v510;
              v286 = (unint64_t)v285[303];
              if (v286 <= v283)
              {
                v287 = v285[305].u32[0];
                if (v286 + 16 * v287 > v283)
                {
                  v288 = v287 - 1;
                  LODWORD(v289) = v288 & ((v510 >> 4) ^ (v510 >> 9));
                  v290 = (int32x2_t *****)(v286 + 16 * v289);
                  v291 = *v290;
                  if (v510 == *v290)
                  {
LABEL_405:
                    *v290 = (int32x2_t ****)-8192;
                    v285[304] = vadd_s32(v285[304], (int32x2_t)0x1FFFFFFFFLL);
                    v284 = v510;
                  }
                  else
                  {
                    v292 = 1;
                    while (v291 != (int32x2_t ****)-4096)
                    {
                      v293 = v289 + v292++;
                      v289 = v293 & v288;
                      v291 = *(int32x2_t *****)(v286 + 16 * v289);
                      if (v510 == v291)
                      {
                        v290 = (int32x2_t *****)(v286 + 16 * v289);
                        goto LABEL_405;
                      }
                    }
                  }
                  *((_BYTE *)v284 + 17) &= ~1u;
                }
              }
            }
          }
          v414 = (int32x2_t ****)v145[7];
          if (v414 != Impl)
          {
            if (!v414 || v414 == (int32x2_t ****)-8192 || v414 == (int32x2_t ****)-4096)
              goto LABEL_463;
            v396 = v145[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v396 = v145[6];
            v397 = (unint64_t *)v145[6];
            if (v397)
              goto LABEL_759;
            v398 = v145[7];
            v399 = ***(int32x2_t ****)v398;
            v400 = (unint64_t)v399[303];
            if (v400 > v396)
              goto LABEL_463;
            v415 = v399[305].u32[0];
            if (v400 + 16 * v415 <= v396)
              goto LABEL_463;
            v416 = v415 - 1;
            LODWORD(v403) = v416 & ((v398 >> 4) ^ (v398 >> 9));
            v404 = (uint64_t *)(v400 + 16 * v403);
            v417 = *v404;
            if (v398 == *v404)
              goto LABEL_644;
            v418 = 1;
            do
            {
              if (v417 == -4096)
                goto LABEL_645;
              v419 = v403 + v418++;
              v403 = v419 & v416;
              v417 = *(_QWORD *)(v400 + 16 * v403);
            }
            while (v398 != v417);
            goto LABEL_643;
          }
          break;
        case 12:
          Impl = (int32x2_t ****)llvm::PoisonValue::get(v123, (llvm::Type *)a2);
          v306 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
          v508 = (llvm::BasicBlock *)2;
          v509 = 0;
          v510 = (int32x2_t ****)a2;
          if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v508);
          v507 = &unk_1E814DA10;
          v511 = v306;
          v145 = sub_1C52E2ED8(v306, &v507);
          if (v510 != (int32x2_t ****)-8192 && v510 != (int32x2_t ****)-4096 && v510)
          {
            v307 = (unint64_t)v508 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)((unint64_t)v508 & 0xFFFFFFFFFFFFFFF8) = v509;
            if (v509)
            {
              *v509 = *v509 & 7 | v307;
            }
            else
            {
              v308 = v510;
              v309 = ***v510;
              v310 = (unint64_t)v309[303];
              if (v310 <= v307)
              {
                v311 = v309[305].u32[0];
                if (v310 + 16 * v311 > v307)
                {
                  v312 = v311 - 1;
                  LODWORD(v313) = v312 & ((v510 >> 4) ^ (v510 >> 9));
                  v314 = (int32x2_t *****)(v310 + 16 * v313);
                  v315 = *v314;
                  if (v510 == *v314)
                  {
LABEL_440:
                    *v314 = (int32x2_t ****)-8192;
                    v309[304] = vadd_s32(v309[304], (int32x2_t)0x1FFFFFFFFLL);
                    v308 = v510;
                  }
                  else
                  {
                    v316 = 1;
                    while (v315 != (int32x2_t ****)-4096)
                    {
                      v317 = v313 + v316++;
                      v313 = v317 & v312;
                      v315 = *(int32x2_t *****)(v310 + 16 * v313);
                      if (v510 == v315)
                      {
                        v314 = (int32x2_t *****)(v310 + 16 * v313);
                        goto LABEL_440;
                      }
                    }
                  }
                  *((_BYTE *)v308 + 17) &= ~1u;
                }
              }
            }
          }
          v420 = (int32x2_t ****)v145[7];
          if (v420 != Impl)
          {
            if (!v420 || v420 == (int32x2_t ****)-8192 || v420 == (int32x2_t ****)-4096)
              goto LABEL_463;
            v396 = v145[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v396 = v145[6];
            v397 = (unint64_t *)v145[6];
            if (v397)
              goto LABEL_759;
            v398 = v145[7];
            v399 = ***(int32x2_t ****)v398;
            v400 = (unint64_t)v399[303];
            if (v400 > v396)
              goto LABEL_463;
            v421 = v399[305].u32[0];
            if (v400 + 16 * v421 <= v396)
              goto LABEL_463;
            v422 = v421 - 1;
            LODWORD(v403) = v422 & ((v398 >> 4) ^ (v398 >> 9));
            v404 = (uint64_t *)(v400 + 16 * v403);
            v423 = *v404;
            if (v398 == *v404)
              goto LABEL_644;
            v424 = 1;
            do
            {
              if (v423 == -4096)
                goto LABEL_645;
              v425 = v403 + v424++;
              v403 = v425 & v422;
              v423 = *(_QWORD *)(v400 + 16 * v403);
            }
            while (v398 != v423);
            goto LABEL_643;
          }
          break;
        default:
          if ((v133 - 11) > 1)
          {
            if (v133 == 18)
            {
              Impl = (int32x2_t ****)llvm::Constant::getNullValue(v123, (llvm::Type *)a2);
              v431 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
              v508 = (llvm::BasicBlock *)2;
              v509 = 0;
              v510 = (int32x2_t ****)a2;
              if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v508);
              v507 = &unk_1E814DA10;
              v511 = v431;
              v145 = sub_1C52E2ED8(v431, &v507);
              if (v510 != (int32x2_t ****)-8192 && v510 != (int32x2_t ****)-4096 && v510)
              {
                v432 = (unint64_t)v508 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)((unint64_t)v508 & 0xFFFFFFFFFFFFFFF8) = v509;
                if (v509)
                {
                  *v509 = *v509 & 7 | v432;
                }
                else
                {
                  v433 = v510;
                  v434 = ***v510;
                  v435 = (unint64_t)v434[303];
                  if (v435 <= v432)
                  {
                    v436 = v434[305].u32[0];
                    if (v435 + 16 * v436 > v432)
                    {
                      v437 = v436 - 1;
                      LODWORD(v438) = v437 & ((v510 >> 4) ^ (v510 >> 9));
                      v439 = (int32x2_t *****)(v435 + 16 * v438);
                      v440 = *v439;
                      if (v510 == *v439)
                      {
LABEL_661:
                        *v439 = (int32x2_t ****)-8192;
                        v434[304] = vadd_s32(v434[304], (int32x2_t)0x1FFFFFFFFLL);
                        v433 = v510;
                      }
                      else
                      {
                        v441 = 1;
                        while (v440 != (int32x2_t ****)-4096)
                        {
                          v442 = v438 + v441++;
                          v438 = v442 & v437;
                          v440 = *(int32x2_t *****)(v435 + 16 * v438);
                          if (v510 == v440)
                          {
                            v439 = (int32x2_t *****)(v435 + 16 * v438);
                            goto LABEL_661;
                          }
                        }
                      }
                      *((_BYTE *)v433 + 17) &= ~1u;
                    }
                  }
                }
              }
              v479 = (int32x2_t ****)v145[7];
              if (v479 != Impl)
              {
                if (!v479 || v479 == (int32x2_t ****)-8192 || v479 == (int32x2_t ****)-4096)
                  goto LABEL_463;
                v396 = v145[5] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v396 = v145[6];
                v397 = (unint64_t *)v145[6];
                if (v397)
                  goto LABEL_759;
                v398 = v145[7];
                v399 = ***(int32x2_t ****)v398;
                v400 = (unint64_t)v399[303];
                if (v400 > v396)
                  goto LABEL_463;
                v480 = v399[305].u32[0];
                if (v400 + 16 * v480 <= v396)
                  goto LABEL_463;
                v481 = v480 - 1;
                LODWORD(v403) = v481 & ((v398 >> 4) ^ (v398 >> 9));
                v404 = (uint64_t *)(v400 + 16 * v403);
                v482 = *v404;
                if (v398 == *v404)
                  goto LABEL_644;
                v483 = 1;
                do
                {
                  if (v482 == -4096)
                    goto LABEL_645;
                  v484 = v403 + v483++;
                  v403 = v484 & v481;
                  v482 = *(_QWORD *)(v400 + 16 * v403);
                }
                while (v398 != v482);
                goto LABEL_643;
              }
            }
            else if (v133 == 13)
            {
              Impl = (int32x2_t ****)llvm::ConstantAggregateZero::get(v123, (llvm::Type *)a2);
              v371 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
              v508 = (llvm::BasicBlock *)2;
              v509 = 0;
              v510 = (int32x2_t ****)a2;
              if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v508);
              v507 = &unk_1E814DA10;
              v511 = v371;
              v145 = sub_1C52E2ED8(v371, &v507);
              if (v510 != (int32x2_t ****)-8192 && v510 != (int32x2_t ****)-4096 && v510)
              {
                v372 = (unint64_t)v508 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)((unint64_t)v508 & 0xFFFFFFFFFFFFFFF8) = v509;
                if (v509)
                {
                  *v509 = *v509 & 7 | v372;
                }
                else
                {
                  v373 = v510;
                  v374 = ***v510;
                  v375 = (unint64_t)v374[303];
                  if (v375 <= v372)
                  {
                    v376 = v374[305].u32[0];
                    if (v375 + 16 * v376 > v372)
                    {
                      v377 = v376 - 1;
                      LODWORD(v378) = v377 & ((v510 >> 4) ^ (v510 >> 9));
                      v379 = (int32x2_t *****)(v375 + 16 * v378);
                      v380 = *v379;
                      if (v510 == *v379)
                      {
LABEL_554:
                        *v379 = (int32x2_t ****)-8192;
                        v374[304] = vadd_s32(v374[304], (int32x2_t)0x1FFFFFFFFLL);
                        v373 = v510;
                      }
                      else
                      {
                        v381 = 1;
                        while (v380 != (int32x2_t ****)-4096)
                        {
                          v382 = v378 + v381++;
                          v378 = v382 & v377;
                          v380 = *(int32x2_t *****)(v375 + 16 * v378);
                          if (v510 == v380)
                          {
                            v379 = (int32x2_t *****)(v375 + 16 * v378);
                            goto LABEL_554;
                          }
                        }
                      }
                      *((_BYTE *)v373 + 17) &= ~1u;
                    }
                  }
                }
              }
              v473 = (int32x2_t ****)v145[7];
              if (v473 != Impl)
              {
                if (!v473 || v473 == (int32x2_t ****)-8192 || v473 == (int32x2_t ****)-4096)
                  goto LABEL_463;
                v396 = v145[5] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v396 = v145[6];
                v397 = (unint64_t *)v145[6];
                if (v397)
                  goto LABEL_759;
                v398 = v145[7];
                v399 = ***(int32x2_t ****)v398;
                v400 = (unint64_t)v399[303];
                if (v400 > v396)
                  goto LABEL_463;
                v474 = v399[305].u32[0];
                if (v400 + 16 * v474 <= v396)
                  goto LABEL_463;
                v475 = v474 - 1;
                LODWORD(v403) = v475 & ((v398 >> 4) ^ (v398 >> 9));
                v404 = (uint64_t *)(v400 + 16 * v403);
                v476 = *v404;
                if (v398 == *v404)
                  goto LABEL_644;
                v477 = 1;
                do
                {
                  if (v476 == -4096)
                    goto LABEL_645;
                  v478 = v403 + v477++;
                  v403 = v478 & v475;
                  v476 = *(_QWORD *)(v400 + 16 * v403);
                }
                while (v398 != v476);
                goto LABEL_643;
              }
            }
            else
            {
              Impl = (int32x2_t ****)llvm::ConstantPointerNull::get(v123, (llvm::PointerType *)a2);
              v443 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
              v508 = (llvm::BasicBlock *)2;
              v509 = 0;
              v510 = (int32x2_t ****)a2;
              if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v508);
              v507 = &unk_1E814DA10;
              v511 = v443;
              v145 = sub_1C52E2ED8(v443, &v507);
              if (v510 != (int32x2_t ****)-8192 && v510 != (int32x2_t ****)-4096 && v510)
              {
                v444 = (unint64_t)v508 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)((unint64_t)v508 & 0xFFFFFFFFFFFFFFF8) = v509;
                if (v509)
                {
                  *v509 = *v509 & 7 | v444;
                }
                else
                {
                  v445 = v510;
                  v446 = ***v510;
                  v447 = (unint64_t)v446[303];
                  if (v447 <= v444)
                  {
                    v448 = v446[305].u32[0];
                    if (v447 + 16 * v448 > v444)
                    {
                      v449 = v448 - 1;
                      LODWORD(v450) = v449 & ((v510 >> 4) ^ (v510 >> 9));
                      v451 = (int32x2_t *****)(v447 + 16 * v450);
                      v452 = *v451;
                      if (v510 == *v451)
                      {
LABEL_678:
                        *v451 = (int32x2_t ****)-8192;
                        v446[304] = vadd_s32(v446[304], (int32x2_t)0x1FFFFFFFFLL);
                        v445 = v510;
                      }
                      else
                      {
                        v453 = 1;
                        while (v452 != (int32x2_t ****)-4096)
                        {
                          v454 = v450 + v453++;
                          v450 = v454 & v449;
                          v452 = *(int32x2_t *****)(v447 + 16 * v450);
                          if (v510 == v452)
                          {
                            v451 = (int32x2_t *****)(v447 + 16 * v450);
                            goto LABEL_678;
                          }
                        }
                      }
                      *((_BYTE *)v445 + 17) &= ~1u;
                    }
                  }
                }
              }
              v485 = (int32x2_t ****)v145[7];
              if (v485 != Impl)
              {
                if (!v485 || v485 == (int32x2_t ****)-8192 || v485 == (int32x2_t ****)-4096)
                  goto LABEL_463;
                v396 = v145[5] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v396 = v145[6];
                v397 = (unint64_t *)v145[6];
                if (v397)
                  goto LABEL_759;
                v398 = v145[7];
                v399 = ***(int32x2_t ****)v398;
                v400 = (unint64_t)v399[303];
                if (v400 > v396)
                  goto LABEL_463;
                v486 = v399[305].u32[0];
                if (v400 + 16 * v486 <= v396)
                  goto LABEL_463;
                v487 = v486 - 1;
                LODWORD(v403) = v487 & ((v398 >> 4) ^ (v398 >> 9));
                v404 = (uint64_t *)(v400 + 16 * v403);
                v488 = *v404;
                if (v398 == *v404)
                  goto LABEL_644;
                v489 = 1;
                do
                {
                  if (v488 == -4096)
                    goto LABEL_645;
                  v490 = v403 + v489++;
                  v403 = v490 & v487;
                  v488 = *(_QWORD *)(v400 + 16 * v403);
                }
                while (v398 != v488);
                goto LABEL_643;
              }
            }
          }
          else
          {
            Impl = (int32x2_t ****)llvm::UndefValue::get(v123, (llvm::Type *)a2);
            v294 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
            v508 = (llvm::BasicBlock *)2;
            v509 = 0;
            v510 = (int32x2_t ****)a2;
            if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v508);
            v507 = &unk_1E814DA10;
            v511 = v294;
            v145 = sub_1C52E2ED8(v294, &v507);
            if (v510 != (int32x2_t ****)-8192 && v510 != (int32x2_t ****)-4096 && v510)
            {
              v295 = (unint64_t)v508 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)((unint64_t)v508 & 0xFFFFFFFFFFFFFFF8) = v509;
              if (v509)
              {
                *v509 = *v509 & 7 | v295;
              }
              else
              {
                v296 = v510;
                v297 = ***v510;
                v298 = (unint64_t)v297[303];
                if (v298 <= v295)
                {
                  v299 = v297[305].u32[0];
                  if (v298 + 16 * v299 > v295)
                  {
                    v300 = v299 - 1;
                    LODWORD(v301) = v300 & ((v510 >> 4) ^ (v510 >> 9));
                    v302 = (int32x2_t *****)(v298 + 16 * v301);
                    v303 = *v302;
                    if (v510 == *v302)
                    {
LABEL_423:
                      *v302 = (int32x2_t ****)-8192;
                      v297[304] = vadd_s32(v297[304], (int32x2_t)0x1FFFFFFFFLL);
                      v296 = v510;
                    }
                    else
                    {
                      v304 = 1;
                      while (v303 != (int32x2_t ****)-4096)
                      {
                        v305 = v301 + v304++;
                        v301 = v305 & v300;
                        v303 = *(int32x2_t *****)(v298 + 16 * v301);
                        if (v510 == v303)
                        {
                          v302 = (int32x2_t *****)(v298 + 16 * v301);
                          goto LABEL_423;
                        }
                      }
                    }
                    *((_BYTE *)v296 + 17) &= ~1u;
                  }
                }
              }
            }
            v467 = (int32x2_t ****)v145[7];
            if (v467 != Impl)
            {
              if (!v467 || v467 == (int32x2_t ****)-8192 || v467 == (int32x2_t ****)-4096)
                goto LABEL_463;
              v396 = v145[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v396 = v145[6];
              v397 = (unint64_t *)v145[6];
              if (v397)
                goto LABEL_759;
              v398 = v145[7];
              v399 = ***(int32x2_t ****)v398;
              v400 = (unint64_t)v399[303];
              if (v400 > v396)
                goto LABEL_463;
              v468 = v399[305].u32[0];
              if (v400 + 16 * v468 <= v396)
                goto LABEL_463;
              v469 = v468 - 1;
              LODWORD(v403) = v469 & ((v398 >> 4) ^ (v398 >> 9));
              v404 = (uint64_t *)(v400 + 16 * v403);
              v470 = *v404;
              if (v398 == *v404)
                goto LABEL_644;
              v471 = 1;
              do
              {
                if (v470 == -4096)
                  goto LABEL_645;
                v472 = v403 + v471++;
                v403 = v472 & v469;
                v470 = *(_QWORD *)(v400 + 16 * v403);
              }
              while (v398 != v470);
              goto LABEL_643;
            }
          }
          break;
      }
LABEL_467:
      if (v512 != &v514)
        free(v512);
      return (uint64_t)Impl;
    }
LABEL_443:
    Impl = (int32x2_t ****)llvm::ConstantExpr::getWithOperands((uint64_t)a2, (uint64_t)v512, (llvm::Constant *)v513, v123, 0, v136);
    v318 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
    v508 = (llvm::BasicBlock *)2;
    v509 = 0;
    v510 = (int32x2_t ****)a2;
    if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v508);
    v507 = &unk_1E814DA10;
    v511 = v318;
    v145 = sub_1C52E2ED8(v318, &v507);
    if (v510 != (int32x2_t ****)-8192 && v510 != (int32x2_t ****)-4096 && v510)
    {
      v319 = (unint64_t)v508 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v508 & 0xFFFFFFFFFFFFFFF8) = v509;
      if (v509)
      {
        *v509 = *v509 & 7 | v319;
      }
      else
      {
        v320 = v510;
        v321 = ***v510;
        v322 = (unint64_t)v321[303];
        if (v322 <= v319)
        {
          v323 = v321[305].u32[0];
          if (v322 + 16 * v323 > v319)
          {
            v324 = v323 - 1;
            LODWORD(v325) = v324 & ((v510 >> 4) ^ (v510 >> 9));
            v326 = (int32x2_t *****)(v322 + 16 * v325);
            v327 = *v326;
            if (v510 == *v326)
            {
LABEL_458:
              *v326 = (int32x2_t ****)-8192;
              v321[304] = vadd_s32(v321[304], (int32x2_t)0x1FFFFFFFFLL);
              v320 = v510;
            }
            else
            {
              v328 = 1;
              while (v327 != (int32x2_t ****)-4096)
              {
                v329 = v325 + v328++;
                v325 = v329 & v324;
                v327 = *(int32x2_t *****)(v322 + 16 * v325);
                if (v510 == v327)
                {
                  v326 = (int32x2_t *****)(v322 + 16 * v325);
                  goto LABEL_458;
                }
              }
            }
            *((_BYTE *)v320 + 17) &= ~1u;
          }
        }
      }
    }
    v330 = (int32x2_t ****)v145[7];
    if (v330 != Impl)
    {
      if (v330 && v330 != (int32x2_t ****)-8192 && v330 != (int32x2_t ****)-4096)
      {
        v396 = v145[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v396 = v145[6];
        v397 = (unint64_t *)v145[6];
        if (v397)
        {
LABEL_759:
          *v397 = *v397 & 7 | v396;
        }
        else
        {
          v398 = v145[7];
          v399 = ***(int32x2_t ****)v398;
          v400 = (unint64_t)v399[303];
          if (v400 <= v396)
          {
            v426 = v399[305].u32[0];
            if (v400 + 16 * v426 > v396)
            {
              v427 = v426 - 1;
              LODWORD(v403) = v427 & ((v398 >> 4) ^ (v398 >> 9));
              v404 = (uint64_t *)(v400 + 16 * v403);
              v428 = *v404;
              if (v398 == *v404)
              {
LABEL_644:
                *v404 = -8192;
                v399[304] = vadd_s32(v399[304], (int32x2_t)0x1FFFFFFFFLL);
                v398 = v145[7];
              }
              else
              {
                v429 = 1;
                while (v428 != -4096)
                {
                  v430 = v403 + v429++;
                  v403 = v430 & v427;
                  v428 = *(_QWORD *)(v400 + 16 * v403);
                  if (v398 == v428)
                  {
LABEL_643:
                    v404 = (uint64_t *)(v400 + 16 * v403);
                    goto LABEL_644;
                  }
                }
              }
LABEL_645:
              *(_BYTE *)(v398 + 17) &= ~1u;
            }
          }
        }
      }
LABEL_463:
      v145[7] = Impl;
      if (Impl != (int32x2_t ****)-8192 && Impl != (int32x2_t ****)-4096 && Impl)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v145 + 5));
    }
    goto LABEL_467;
  }
  v71 = (unsigned __int8 *)a2[3];
  v72 = *v71;
  if (v72 == 32)
  {
    v512 = &v514;
    v513 = 0x400000000;
    v88 = *((unsigned int *)v71 + 8);
    if (!(_DWORD)v88)
    {
      v89 = 0;
      v110 = &v514;
LABEL_211:
      v142 = *(uint64_t **)*a2;
      v143 = (unsigned __int8 *)llvm::DIArgList::getImpl(v142, v110, v89, 0, 1);
      Impl = (int32x2_t ****)llvm::MetadataAsValue::get(v142, v143);
      goto LABEL_467;
    }
    LODWORD(v89) = 0;
    v90 = (_QWORD **)*((_QWORD *)v71 + 3);
    v91 = 8 * v88;
    while (1)
    {
      v92 = *v90;
      if ((*(_BYTE *)a1 & 1) != 0 && *(_BYTE *)v92 == 1)
        goto LABEL_123;
      v93 = (llvm::UndefValue *)sub_1C5FD3BE0(a1, v92[16]);
      if (v93)
      {
        if (v93 == (llvm::UndefValue *)v92[16])
          goto LABEL_122;
      }
      else
      {
        if ((*(_BYTE *)a1 & 2) != 0 && *(_BYTE *)v92 == 2)
          goto LABEL_122;
        v93 = llvm::UndefValue::get(*(llvm::UndefValue **)v92[16], v94);
      }
      v92 = llvm::ValueAsMetadata::get(v93, v94);
LABEL_122:
      LODWORD(v89) = v513;
LABEL_123:
      if (v89 >= HIDWORD(v513))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v512, (uint64_t)&v514, v89 + 1, 8);
        LODWORD(v89) = v513;
      }
      *((_QWORD *)v512 + v89) = v92;
      v89 = (v513 + 1);
      LODWORD(v513) = v513 + 1;
      ++v90;
      v91 -= 8;
      if (!v91)
      {
        v110 = v512;
        goto LABEL_211;
      }
    }
  }
  if (v72 != 2)
  {
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v111 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
      v513 = 2;
      v514 = 0;
      v515 = (int32x2_t ****)a2;
      if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v513);
      v512 = &unk_1E814DA10;
      v516 = v111;
      v32 = sub_1C52E2ED8(v111, &v512);
      if (v515 != (int32x2_t ****)-8192 && v515 != (int32x2_t ****)-4096 && v515)
      {
        v112 = v513 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v513 & 0xFFFFFFFFFFFFFFF8) = v514;
        if (v514)
        {
          *v514 = *v514 & 7 | v112;
        }
        else
        {
          v113 = v515;
          v114 = ***v515;
          v115 = (unint64_t)v114[303];
          if (v115 <= v112)
          {
            v116 = v114[305].u32[0];
            if (v115 + 16 * v116 > v112)
            {
              v117 = v116 - 1;
              LODWORD(v118) = v117 & ((v515 >> 4) ^ (v515 >> 9));
              v119 = (int32x2_t *****)(v115 + 16 * v118);
              v120 = *v119;
              if (v515 == *v119)
              {
LABEL_171:
                *v119 = (int32x2_t ****)-8192;
                v114[304] = vadd_s32(v114[304], (int32x2_t)0x1FFFFFFFFLL);
                v113 = v515;
              }
              else
              {
                v121 = 1;
                while (v120 != (int32x2_t ****)-4096)
                {
                  v122 = v118 + v121++;
                  v118 = v122 & v117;
                  v120 = *(int32x2_t *****)(v115 + 16 * v118);
                  if (v515 == v120)
                  {
                    v119 = (int32x2_t *****)(v115 + 16 * v118);
                    goto LABEL_171;
                  }
                }
              }
              *((_BYTE *)v113 + 17) &= ~1u;
            }
          }
        }
      }
      v193 = (llvm::MDNode **)v32[7];
      if (v193 == a2)
        return (uint64_t)a2;
      if (!v193 || v193 == (llvm::MDNode **)-8192 || v193 == (llvm::MDNode **)-4096)
        goto LABEL_106;
      v157 = v32[5] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v157 = v32[6];
      v158 = (unint64_t *)v32[6];
      if (!v158)
      {
        v159 = v32[7];
        v160 = ***(int32x2_t ****)v159;
        v161 = (unint64_t)v160[303];
        if (v161 <= v157)
        {
          v194 = v160[305].u32[0];
          if (v161 + 16 * v194 > v157)
          {
            v195 = v194 - 1;
            LODWORD(v164) = v195 & ((v159 >> 4) ^ (v159 >> 9));
            v165 = (uint64_t *)(v161 + 16 * v164);
            v196 = *v165;
            if (v159 != *v165)
            {
              v197 = 1;
              while (v196 != -4096)
              {
                v198 = v164 + v197++;
                v164 = v198 & v195;
                v196 = *(_QWORD *)(v161 + 16 * v164);
                if (v159 == v196)
                {
LABEL_241:
                  v165 = (uint64_t *)(v161 + 16 * v164);
                  goto LABEL_242;
                }
              }
              goto LABEL_243;
            }
            goto LABEL_242;
          }
        }
LABEL_106:
        v32[7] = a2;
        if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v32 + 5));
        return (uint64_t)a2;
      }
LABEL_495:
      *v158 = *v158 & 7 | v157;
      goto LABEL_106;
    }
    v95 = (unsigned __int8 *)sub_1C5FD6E5C(a1, a2[3]);
    if (v71 != v95)
    {
      Impl = (int32x2_t ****)llvm::MetadataAsValue::get(*(uint64_t **)*a2, v95);
      v96 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
      v513 = 2;
      v514 = 0;
      v515 = (int32x2_t ****)a2;
      if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v513);
      v512 = &unk_1E814DA10;
      v516 = v96;
      v18 = sub_1C52E2ED8(v96, &v512);
      if (v515 != (int32x2_t ****)-8192 && v515 != (int32x2_t ****)-4096 && v515)
      {
        v97 = v513 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v513 & 0xFFFFFFFFFFFFFFF8) = v514;
        if (v514)
        {
          *v514 = *v514 & 7 | v97;
        }
        else
        {
          v98 = v515;
          v99 = ***v515;
          v100 = (unint64_t)v99[303];
          if (v100 <= v97)
          {
            v101 = v99[305].u32[0];
            if (v100 + 16 * v101 > v97)
            {
              v102 = v101 - 1;
              LODWORD(v103) = v102 & ((v515 >> 4) ^ (v515 >> 9));
              v104 = (int32x2_t *****)(v100 + 16 * v103);
              v105 = *v104;
              if (v515 == *v104)
              {
LABEL_144:
                *v104 = (int32x2_t ****)-8192;
                v99[304] = vadd_s32(v99[304], (int32x2_t)0x1FFFFFFFFLL);
                v98 = v515;
              }
              else
              {
                v106 = 1;
                while (v105 != (int32x2_t ****)-4096)
                {
                  v107 = v103 + v106++;
                  v103 = v107 & v102;
                  v105 = *(int32x2_t *****)(v100 + 16 * v103);
                  if (v515 == v105)
                  {
                    v104 = (int32x2_t *****)(v100 + 16 * v103);
                    goto LABEL_144;
                  }
                }
              }
              *((_BYTE *)v98 + 17) &= ~1u;
            }
          }
        }
      }
      v217 = (int32x2_t ****)v18[7];
      if (v217 == Impl)
        return (uint64_t)Impl;
      if (!v217 || v217 == (int32x2_t ****)-8192 || v217 == (int32x2_t ****)-4096)
        goto LABEL_149;
      v59 = v18[5] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v59 = v18[6];
      v60 = (unint64_t *)v18[6];
      if (!v60)
      {
        v61 = v18[7];
        v62 = ***(int32x2_t ****)v61;
        v63 = (unint64_t)v62[303];
        if (v63 <= v59)
        {
          v218 = v62[305].u32[0];
          if (v63 + 16 * v218 > v59)
          {
            v219 = v218 - 1;
            LODWORD(v66) = v219 & ((v61 >> 4) ^ (v61 >> 9));
            v67 = (uint64_t *)(v63 + 16 * v66);
            v220 = *v67;
            if (v61 != *v67)
            {
              v221 = 1;
              while (v220 != -4096)
              {
                v222 = v66 + v221++;
                v66 = v222 & v219;
                v220 = *(_QWORD *)(v63 + 16 * v66);
                if (v61 == v220)
                {
LABEL_300:
                  v67 = (uint64_t *)(v63 + 16 * v66);
                  goto LABEL_301;
                }
              }
              goto LABEL_302;
            }
            goto LABEL_301;
          }
        }
LABEL_149:
        v18[7] = Impl;
        if (Impl != (int32x2_t ****)-8192 && Impl != (int32x2_t ****)-4096)
        {
          if (Impl)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v18 + 5));
        }
        return (uint64_t)Impl;
      }
LABEL_706:
      *v60 = *v60 & 7 | v59;
      goto LABEL_149;
    }
    v169 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
    v513 = 2;
    v514 = 0;
    v515 = (int32x2_t ****)a2;
    if (a2 != (llvm::MDNode **)-8192 && a2 != (llvm::MDNode **)-4096 && a2)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v513);
    v512 = &unk_1E814DA10;
    v516 = v169;
    v32 = sub_1C52E2ED8(v169, &v512);
    if (v515 != (int32x2_t ****)-8192 && v515 != (int32x2_t ****)-4096 && v515)
    {
      v170 = v513 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v513 & 0xFFFFFFFFFFFFFFF8) = v514;
      if (v514)
      {
        *v514 = *v514 & 7 | v170;
      }
      else
      {
        v171 = v515;
        v172 = ***v515;
        v173 = (unint64_t)v172[303];
        if (v173 <= v170)
        {
          v174 = v172[305].u32[0];
          if (v173 + 16 * v174 > v170)
          {
            v175 = v174 - 1;
            LODWORD(v176) = v175 & ((v515 >> 4) ^ (v515 >> 9));
            v177 = (int32x2_t *****)(v173 + 16 * v176);
            v178 = *v177;
            if (v515 == *v177)
            {
LABEL_259:
              *v177 = (int32x2_t ****)-8192;
              v172[304] = vadd_s32(v172[304], (int32x2_t)0x1FFFFFFFFLL);
              v171 = v515;
            }
            else
            {
              v179 = 1;
              while (v178 != (int32x2_t ****)-4096)
              {
                v180 = v176 + v179++;
                v176 = v180 & v175;
                v178 = *(int32x2_t *****)(v173 + 16 * v176);
                if (v515 == v178)
                {
                  v177 = (int32x2_t *****)(v173 + 16 * v176);
                  goto LABEL_259;
                }
              }
            }
            *((_BYTE *)v171 + 17) &= ~1u;
          }
        }
      }
    }
    v331 = (llvm::MDNode **)v32[7];
    if (v331 != a2)
    {
      if (!v331 || v331 == (llvm::MDNode **)-8192 || v331 == (llvm::MDNode **)-4096)
        goto LABEL_106;
      v157 = v32[5] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v157 = v32[6];
      v158 = (unint64_t *)v32[6];
      if (!v158)
      {
        v159 = v32[7];
        v160 = ***(int32x2_t ****)v159;
        v161 = (unint64_t)v160[303];
        if (v161 <= v157)
        {
          v332 = v160[305].u32[0];
          if (v161 + 16 * v332 > v157)
          {
            v333 = v332 - 1;
            LODWORD(v164) = v333 & ((v159 >> 4) ^ (v159 >> 9));
            v165 = (uint64_t *)(v161 + 16 * v164);
            v334 = *v165;
            if (v159 != *v165)
            {
              v335 = 1;
              while (v334 != -4096)
              {
                v336 = v164 + v335++;
                v164 = v336 & v333;
                v334 = *(_QWORD *)(v161 + 16 * v164);
                if (v159 == v334)
                  goto LABEL_241;
              }
              goto LABEL_243;
            }
            goto LABEL_242;
          }
        }
        goto LABEL_106;
      }
      goto LABEL_495;
    }
    return (uint64_t)a2;
  }
  v73 = (llvm::ValueAsMetadata *)sub_1C5FD3BE0(a1, *((_QWORD *)v71 + 16));
  if (v73)
  {
    if (*((llvm::MDNode ***)v71 + 16) != a2)
    {
      v75 = *(uint64_t **)*a2;
      v76 = (unsigned __int8 *)llvm::ValueAsMetadata::get(v73, v74);
      return llvm::MetadataAsValue::get(v75, v76);
    }
    return (uint64_t)a2;
  }
  if ((*(_BYTE *)a1 & 2) != 0)
    return 0;
  v75 = *(uint64_t **)*a2;
  v76 = (unsigned __int8 *)llvm::MDTuple::getImpl(v75, 0, 0, 0, 1);
  return llvm::MetadataAsValue::get(v75, v76);
}

uint64_t llvm::ValueMapper::mapConstant(llvm::ValueMapper *this, llvm::MDNode **a2)
{
  uint64_t v2;
  llvm::LLVMContext *v3;
  uint64_t v5;

  v5 = *(_QWORD *)this;
  v2 = sub_1C5FD3BE0(v5, a2);
  sub_1C5FD3718(&v5, v3);
  return v2;
}

_QWORD *llvm::ValueMapper::mapMetadata(llvm::ValueMapper *this, const llvm::Metadata *a2)
{
  _QWORD *v2;
  llvm::LLVMContext *v3;
  uint64_t v5;

  v5 = *(_QWORD *)this;
  v2 = sub_1C5FD6E5C(v5, a2);
  sub_1C5FD3718(&v5, v3);
  return v2;
}

_QWORD *sub_1C5FD6E5C(uint64_t a1, llvm::MDNode *a2)
{
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  llvm::MDNode *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t j;
  llvm::MDNode *v14;
  llvm::Metadata *v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[128];
  uint64_t v21[97];
  void *v22;
  uint64_t v23;
  _QWORD v24[17];

  v24[16] = *MEMORY[0x1E0C80C00];
  v4 = sub_1C5FD7894(a1, (uint64_t)a2);
  if (v5)
    return v4;
  v17 = a1;
  v18 = v20;
  v19 = 0x1000000000;
  v21[0] = 1;
  for (i = 160; i != 928; i += 24)
    *(uint64_t *)((char *)&v17 + i) = -4096;
  v22 = v24;
  v23 = 0x1000000000;
  if ((*((_BYTE *)a2 + 1) & 0x7F) != 0)
    v8 = sub_1C5FD7F14((uint64_t)&v17, a2);
  else
    v8 = (uint64_t)sub_1C5FD797C(&v17, (unint64_t)a2);
  v6 = v8;
  v10 = v19;
  while (v10)
  {
    v11 = (unsigned int *)*((_QWORD *)v18 + --v10);
    LODWORD(v19) = v10;
    v12 = v11[2];
    if ((_DWORD)v12)
    {
      for (j = 0; j != v12; ++j)
      {
        v14 = *(llvm::MDNode **)&v11[2 * j + -2 * v11[2]];
        v15 = (llvm::Metadata *)sub_1C5FD86E0(&v17, v14);
        if (!(_BYTE)v9)
          v15 = (llvm::Metadata *)sub_1C5FD797C(&v17, (unint64_t)v14);
        if (v14 != v15)
          llvm::MDNode::replaceOperandWith((llvm::MDNode *)v11, j, v15);
      }
      v10 = v19;
    }
  }
  if (v22 != v24)
    free(v22);
  sub_1C5FD8840((int *)v21, v9);
  if (v18 != v20)
    free(v18);
  return (_QWORD *)v6;
}

_QWORD *llvm::ValueMapper::mapMDNode(llvm::ValueMapper *this, const llvm::MDNode *a2)
{
  _QWORD *v2;
  llvm::LLVMContext *v3;
  uint64_t v5;

  v5 = *(_QWORD *)this;
  v2 = sub_1C5FD6E5C(v5, a2);
  sub_1C5FD3718(&v5, v3);
  return v2;
}

uint64_t *llvm::ValueMapper::remapInstruction(llvm::ValueMapper *this, uint64_t ***a2)
{
  llvm::LLVMContext *v2;
  uint64_t v4;

  v4 = *(_QWORD *)this;
  sub_1C5FD706C(v4, a2);
  return sub_1C5FD3718(&v4, v2);
}

void sub_1C5FD706C(uint64_t a1, uint64_t ***a2)
{
  int v4;
  uint64_t v5;
  uint64_t ***v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t ***v18;
  uint64_t v19;
  int v20;
  uint64_t ***v21;
  unsigned __int8 **v22;
  uint64_t v23;
  llvm::MDNode **v24;
  llvm::MDNode *v25;
  llvm::MDNode *v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  uint64_t **v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int i;
  int v47;
  uint64_t AttributeAtIndex;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[24];
  void *v54;
  uint64_t v55;
  _QWORD v56[9];

  v56[8] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = (uint64_t ***)*(a2 - 1);
    v5 = v4 & 0x7FFFFFF;
    if (!v5)
      goto LABEL_14;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = &a2[-4 * v5];
    if (!v5)
      goto LABEL_14;
  }
  v7 = 32 * v5;
  v8 = v6 + 1;
  do
  {
    v9 = v8 - 1;
    v10 = sub_1C5FD3BE0(a1, (llvm::MDNode **)*(v8 - 1));
    if (v10)
    {
      if (*v9)
      {
        *v8[1] = *v8;
        if (*v8)
          (*v8)[2] = v8[1];
      }
      *(v8 - 1) = (_QWORD *)v10;
      v13 = *(_QWORD **)(v10 + 8);
      v11 = (_QWORD *)(v10 + 8);
      v12 = v13;
      *v8 = v13;
      if (v13)
        v12[2] = v8;
      v8[1] = v11;
      *v11 = v9;
    }
    v8 += 4;
    v7 -= 32;
  }
  while (v7);
LABEL_14:
  if (a2)
  {
    if (*((_BYTE *)a2 + 16) == 83)
    {
      v14 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      if ((_DWORD)v14)
      {
        v15 = 0;
        v16 = 8 * v14;
        do
        {
          v17 = *((_DWORD *)a2 + 5);
          if ((v17 & 0x40000000) != 0)
            v18 = (uint64_t ***)*(a2 - 1);
          else
            v18 = &a2[-4 * (v17 & 0x7FFFFFF)];
          v19 = sub_1C5FD3BE0(a1, (llvm::MDNode **)(&v18[4 * *((unsigned int *)a2 + 15)])[v15 / 8]);
          if (v19)
          {
            v20 = *((_DWORD *)a2 + 5);
            if ((v20 & 0x40000000) != 0)
              v21 = (uint64_t ***)*(a2 - 1);
            else
              v21 = &a2[-4 * (v20 & 0x7FFFFFF)];
            (&v21[4 * *((unsigned int *)a2 + 15)])[v15 / 8] = (uint64_t **)v19;
          }
          v15 += 8;
        }
        while (v16 != v15);
      }
    }
  }
  v54 = v56;
  v55 = 0x400000000;
  v22 = (unsigned __int8 **)(a2 + 6);
  if (a2[6] || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    llvm::Instruction::getAllMetadataImpl((uint64_t)a2, (uint64_t)&v54);
    if ((_DWORD)v55)
    {
      v23 = 16 * v55;
      v24 = (llvm::MDNode **)((char *)v54 + 8);
      do
      {
        v25 = *v24;
        v26 = (llvm::MDNode *)sub_1C5FD6E5C(a1, *v24);
        if (v26 != v25)
        {
          v27 = *((_DWORD *)v24 - 2);
          if (v26)
          {
            if (!v27)
            {
              v51 = v26;
              llvm::MetadataTracking::track((uint64_t)&v51, (unsigned __int8 *)v26, 2);
LABEL_42:
              if (&v51 == (void **)v22)
              {
                if (v51)
                  llvm::MetadataTracking::untrack((uint64_t)&v51, (unsigned __int8 *)v51);
              }
              else
              {
                if (*v22)
                  llvm::MetadataTracking::untrack((uint64_t)(a2 + 6), *v22);
                v28 = (unsigned __int8 *)v51;
                *v22 = (unsigned __int8 *)v51;
                if (v28)
                  llvm::MetadataTracking::retrack((uint64_t)&v51, v28, (uint64_t)(a2 + 6));
              }
              goto LABEL_39;
            }
          }
          else
          {
            if (!*v22 && (*((_BYTE *)a2 + 23) & 0x20) == 0)
              goto LABEL_39;
            if (!v27)
            {
              v51 = 0;
              goto LABEL_42;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)a2, v27, v26);
        }
LABEL_39:
        v24 += 2;
        v23 -= 16;
      }
      while (v23);
    }
  }
  v29 = *(_QWORD *)(a1 + 8);
  if (v29)
  {
    v30 = *((unsigned __int8 *)a2 + 16);
    if ((v30 - 33) > 0x33 || ((1 << (v30 - 33)) & 0x8000000000041) == 0)
    {
      if (a2 && v30 == 59)
      {
        a2[8] = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v29 + 24))(v29, a2[8]);
        v30 = *((unsigned __int8 *)a2 + 16);
        v29 = *(_QWORD *)(a1 + 8);
      }
      if (a2 && v30 == 62)
      {
        a2[8] = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v29 + 24))(v29, a2[8]);
        a2[9] = (uint64_t **)(*(uint64_t (**)(_QWORD, uint64_t **))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2[9]);
        v29 = *(_QWORD *)(a1 + 8);
      }
      *a2 = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v29 + 24))(v29, *a2);
    }
    else
    {
      v51 = v53;
      v52 = 0x300000000;
      v32 = a2[9];
      v33 = *((_DWORD *)v32 + 3);
      v34 = v33 - 1;
      if (v34 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, (uint64_t)v53, v34, 8);
        v33 = *((_DWORD *)v32 + 3);
      }
      v35 = 8 * v33 - 8;
      if (v35)
      {
        v36 = v32[2] + 1;
        v37 = 8 * (v35 >> 3);
        do
        {
          v38 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *v36);
          v39 = v52;
          if (v52 >= (unint64_t)HIDWORD(v52))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, (uint64_t)v53, v52 + 1, 8);
            v39 = v52;
          }
          *((_QWORD *)v51 + v39) = v38;
          LODWORD(v52) = v52 + 1;
          ++v36;
          v37 -= 8;
        }
        while (v37);
      }
      v40 = (uint64_t **)(*(uint64_t (**)(_QWORD, uint64_t **))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *a2);
      v41 = llvm::FunctionType::get(v40, (uint64_t *)v51, v52, *((_DWORD *)v32 + 2) > 0xFFu);
      v42 = 0;
      v43 = **(uint64_t ****)(v41 + 16);
      *a2 = v43;
      a2[9] = (uint64_t **)v41;
      v44 = *v43;
      v45 = (uint64_t)a2[8];
      v50 = v45;
      if (v45)
        goto LABEL_63;
LABEL_62:
      for (i = 0; v42 < i; i = *(_DWORD *)(v45 + 8))
      {
        v47 = 68;
        while (1)
        {
          AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(&v50, v42, v47);
          if (AttributeAtIndex)
          {
            if (*(_QWORD *)(AttributeAtIndex + 16))
              break;
          }
          if (++v47 == 74)
            goto LABEL_71;
        }
        v49 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
        v45 = sub_1C591351C(&v50, v44, v42, v47, v49);
        v50 = v45;
LABEL_71:
        ++v42;
        if (!v45)
          goto LABEL_62;
LABEL_63:
        ;
      }
      a2[8] = (uint64_t **)v45;
      if (v51 != v53)
        free(v51);
    }
  }
  if (v54 != v56)
    free(v54);
}

void sub_1C5FD7550(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  llvm::MDNode **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t **v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  uint64_t ***v23;

  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = *(_QWORD *)(a2 - 8);
    v5 = v4 & 0x7FFFFFF;
    if (!v5)
      goto LABEL_15;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = a2 - 32 * v5;
    if (!v5)
      goto LABEL_15;
  }
  v7 = 32 * v5;
  v8 = (_QWORD **)(v6 + 8);
  do
  {
    v10 = (uint64_t *)(v8 - 1);
    v9 = (llvm::MDNode **)*(v8 - 1);
    if (v9)
    {
      v11 = sub_1C5FD3BE0(a1, v9);
      if (*v10)
      {
        *v8[1] = *v8;
        if (*v8)
          (*v8)[2] = v8[1];
      }
      *v10 = v11;
      if (v11)
      {
        v14 = *(_QWORD **)(v11 + 8);
        v12 = (uint64_t **)(v11 + 8);
        v13 = v14;
        *v8 = v14;
        if (v14)
          v13[2] = v8;
        v8[1] = v12;
        *v12 = v10;
      }
    }
    v8 += 4;
    v7 -= 32;
  }
  while (v7);
LABEL_15:
  sub_1C5FD76DC(a1, (_QWORD **)a2);
  if (*(_QWORD *)(a1 + 8))
  {
    if ((*(_WORD *)(a2 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)a2);
      v15 = *(_QWORD **)(a2 + 88);
      if ((*(_WORD *)(a2 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)a2);
        v16 = *(_QWORD **)(a2 + 88);
LABEL_19:
        v17 = &v16[5 * *(_QWORD *)(a2 + 96)];
        while (v15 != v17)
        {
          *v15 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *v15);
          v15 += 5;
        }
        goto LABEL_22;
      }
    }
    else
    {
      v15 = *(_QWORD **)(a2 + 88);
    }
    v16 = v15;
    goto LABEL_19;
  }
LABEL_22:
  v18 = a2 + 72;
  for (i = *(_QWORD *)(a2 + 80); i != v18; i = *(_QWORD *)(i + 8))
  {
    v20 = i - 24;
    if (!i)
      v20 = 0;
    v21 = v20 + 40;
    for (j = *(_QWORD *)(v20 + 48); j != v21; j = *(_QWORD *)(j + 8))
    {
      if (j)
        v23 = (uint64_t ***)(j - 24);
      else
        v23 = 0;
      sub_1C5FD706C(a1, v23);
    }
  }
}

void sub_1C5FD76DC(uint64_t a1, _QWORD **a2)
{
  int v4;
  int32x2_t **v5;
  int32x2_t *v6;
  __int32 v7;
  int32x2_t v8;
  __int32 v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD **v12;
  int v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  llvm::MDNode **v20;
  llvm::MDNode **v21;
  int v22;
  llvm::MDNode *v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[17];

  v26[16] = *MEMORY[0x1E0C80C00];
  v24 = v26;
  v25 = 0x800000000;
  llvm::Value::getAllMetadata(a2, (uint64_t)&v24);
  v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x20000000) != 0)
  {
    v5 = (int32x2_t **)**a2;
    v6 = *v5;
    v7 = (*v5)[312].i32[0];
    if (v7)
    {
      v8 = v6[310];
      v9 = v7 - 1;
      v10 = v9 & ((a2 >> 4) ^ (a2 >> 9));
      v11 = *(_QWORD *)&v8 + 40 * v10;
      v12 = *(_QWORD ***)v11;
      if (*(_QWORD ***)v11 == a2)
      {
LABEL_7:
        v15 = *(char **)(v11 + 8);
        v16 = *(unsigned int *)(v11 + 16);
        if ((_DWORD)v16)
        {
          v17 = v15 - 8;
          v18 = 16 * v16;
          do
          {
            v19 = *(unsigned __int8 **)&v17[v18];
            if (v19)
              llvm::MetadataTracking::untrack((uint64_t)&v17[v18], v19);
            v18 -= 16;
          }
          while (v18);
          v15 = *(char **)(v11 + 8);
        }
        if (v15 != (char *)(v11 + 24))
          free(v15);
        *(_QWORD *)v11 = -8192;
        v6[311] = vadd_s32(v6[311], (int32x2_t)0x1FFFFFFFFLL);
        v4 = *((_DWORD *)a2 + 5);
      }
      else
      {
        v13 = 1;
        while (v12 != (_QWORD **)-4096)
        {
          v14 = v10 + v13++;
          v10 = v14 & v9;
          v11 = *(_QWORD *)&v8 + 40 * v10;
          v12 = *(_QWORD ***)v11;
          if (*(_QWORD ***)v11 == a2)
            goto LABEL_7;
        }
      }
    }
    *((_DWORD *)a2 + 5) = v4 & 0xDFFFFFFF;
  }
  v20 = (llvm::MDNode **)v24;
  if ((_DWORD)v25)
  {
    v21 = (llvm::MDNode **)((char *)v24 + 16 * v25);
    do
    {
      v22 = *(_DWORD *)v20;
      v23 = (llvm::MDNode *)sub_1C5FD6E5C(a1, v20[1]);
      llvm::Value::addMetadata((llvm::Value *)a2, v22, v23);
      v20 += 2;
    }
    while (v20 != v21);
    v20 = (llvm::MDNode **)v24;
  }
  if (v20 != v26)
    free(v20);
}

_QWORD *sub_1C5FD7894(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  llvm::ValueAsMetadata *v5;
  llvm::Value *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 16));
  if (*(_BYTE *)(v4 + 48))
  {
    v11 = 0;
    v12 = a2;
    if (sub_1C4926528(v4 + 24, &v12, &v11))
    {
      v7 = v11;
      v8 = *(_QWORD *)(v4 + 24);
      v9 = *(unsigned int *)(v4 + 40);
    }
    else
    {
      v8 = *(_QWORD *)(v4 + 24);
      v9 = *(unsigned int *)(v4 + 40);
      v7 = v8 + 16 * v9;
    }
    if (v7 != v8 + 16 * v9)
      return *(_QWORD **)(v7 + 8);
  }
  if (*(_BYTE *)v2 && (*(_BYTE *)a1 & 1) == 0)
  {
    if (*(_BYTE *)v2 == 1)
    {
      v5 = (llvm::ValueAsMetadata *)sub_1C5FD3BE0(a1, *(_QWORD *)(v2 + 128));
      if (*(llvm::ValueAsMetadata **)(v2 + 128) != v5)
      {
        if (v5)
          return llvm::ValueAsMetadata::get(v5, v6);
        else
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return (_QWORD *)v2;
}

_QWORD *sub_1C5FD797C(uint64_t *a1, unint64_t a2)
{
  uint64_t i;
  llvm::MDNode *v5;
  unsigned int v6;
  BOOL v7;
  char *v8;
  llvm::MDNode **v9;
  llvm::MDNode **v10;
  llvm::MDNode *v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  void **v21;
  void **v22;
  unsigned int *v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int v30;
  llvm::MDNode **v31;
  llvm::MDNode **v32;
  llvm::MDNode *v33;
  _QWORD *v34;
  llvm::MDNode *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Value *v39;
  llvm::Metadata *v40;
  char v41;
  llvm::Metadata *v42;
  uint64_t v43;
  uint64_t v44;
  llvm::MDNode *v45;
  unint64_t v46;
  llvm::MDNode *v47;
  llvm::MDNode *v48;
  llvm::MDNode *v49;
  unsigned __int8 *v50;
  llvm::MDNode *v51;
  uint64_t v52;
  llvm::MDNode *v53;
  _QWORD *v54;
  unsigned __int8 **v55;
  uint64_t v56;
  unsigned __int8 *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  llvm::Value *v62;
  __n128 v63;
  uint64_t v64;
  llvm::MDNode *v65;
  uint64_t v66;
  _QWORD *v67;
  unsigned int v68;
  void *v69;
  uint64_t v70;
  _BYTE v71[128];
  void *v72;
  uint64_t v73;
  _QWORD v74[50];

  v74[48] = *MEMORY[0x1E0C80C00];
  v66 = 1;
  for (i = 8; i != 776; i += 24)
    *(uint64_t *)((char *)&v66 + i) = -4096;
  v63.n128_u64[0] = a2;
  v69 = v71;
  v70 = 0x1000000000;
  v72 = v74;
  v73 = 0x1000000000;
  v63.n128_u64[1] = a2 - 8 * *(unsigned int *)(a2 + 8);
  LOBYTE(v64) = 0;
  sub_1C4AB8FDC((uint64_t)&v72, &v63);
  v62 = (llvm::Value *)a2;
  v63.n128_u64[0] = a2;
  sub_1C5FD82B8((uint64_t)&v66, (uint64_t *)&v63);
  v6 = v73;
  if ((_DWORD)v73)
  {
    v7 = 0;
LABEL_5:
    while (2)
    {
      v8 = (char *)v72 + 24 * v6;
      v9 = (llvm::MDNode **)*((_QWORD *)v8 - 3);
      while (1)
      {
        v10 = (llvm::MDNode **)*((_QWORD *)v8 - 2);
        if (v10 == v9)
          break;
        *((_QWORD *)v8 - 2) = v10 + 1;
        v11 = *v10;
        v12 = sub_1C5FD86E0(a1, *v10);
        if (v13)
        {
          *(v8 - 8) |= v11 != (llvm::MDNode *)v12;
        }
        else
        {
          v63.n128_u64[0] = (unint64_t)v11;
          v63.n128_u64[1] = 0xFFFFFFFF00000000;
          v64 = 0;
          v65 = 0;
          if (!sub_1C5FD831C((uint64_t)&v66, (uint64_t)v11, &v65))
          {
            v14 = sub_1C5FD83CC((uint64_t)&v66, (llvm::MDNode *)&v63, v65);
            *v14 = v11;
            v14[1] = 0xFFFFFFFF00000000;
            v14[2] = 0;
            if (v11)
            {
              v15 = (unint64_t)v11 - 8 * *((unsigned int *)v11 + 2);
              v63.n128_u64[0] = (unint64_t)v11;
              v63.n128_u64[1] = v15;
              LOBYTE(v64) = 0;
              sub_1C4AB8FDC((uint64_t)&v72, &v63);
              v6 = v73;
              if ((_DWORD)v73)
                goto LABEL_5;
              goto LABEL_18;
            }
            break;
          }
        }
      }
      v63.n128_u64[0] = *((_QWORD *)v8 - 3);
      v16 = sub_1C5FD82B8((uint64_t)&v66, (uint64_t *)&v63);
      v17 = *(v8 - 8);
      *(_BYTE *)v16 = v17;
      v7 = (v17 | v7) != 0;
      v18 = v70;
      *((_DWORD *)v16 + 1) = v70;
      v19 = *((_QWORD *)v8 - 3);
      if (v18 >= HIDWORD(v70))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, (uint64_t)v71, v18 + 1, 8);
        v18 = v70;
      }
      *((_QWORD *)v69 + v18) = v19;
      LODWORD(v70) = v70 + 1;
      v6 = v73 - 1;
      LODWORD(v73) = v6;
      if (v6)
        continue;
      break;
    }
  }
  else
  {
    v7 = 0;
  }
LABEL_18:
  if (v72 != v74)
    free(v72);
  if (v7)
  {
    do
    {
      if (!(_DWORD)v70)
        goto LABEL_81;
      v20 = 0;
      v21 = (void **)v69;
      v22 = (void **)((char *)v69 + 8 * v70);
      do
      {
        v23 = (unsigned int *)*v21;
        v72 = *v21;
        v24 = sub_1C5FD82B8((uint64_t)&v66, (uint64_t *)&v72);
        if (!*(_BYTE *)v24)
        {
          v25 = v23[2];
          if ((_DWORD)v25)
          {
            v26 = v24;
            v27 = -2 * v25;
            while (1)
            {
              v28 = sub_1C5FD87E0((uint64_t)&v66, *(_QWORD *)&v23[v27]);
              if ((v66 & 1) != 0)
                v29 = &v67;
              else
                v29 = v67;
              v30 = v68;
              if ((v66 & 1) != 0)
                v30 = 32;
              if (&v29[3 * v30] != (_QWORD *)v28 && *(_BYTE *)(v28 + 8))
                break;
              v27 += 2;
              if (!(v27 * 4))
                goto LABEL_24;
            }
            v20 = 1;
            *v26 = 1;
          }
        }
LABEL_24:
        ++v21;
      }
      while (v21 != v22);
    }
    while ((v20 & 1) != 0);
    v31 = (llvm::MDNode **)v69;
    v72 = v74;
    v73 = 0x1000000000;
    if ((_DWORD)v70)
    {
      v32 = (llvm::MDNode **)((char *)v69 + 8 * v70);
      do
      {
        v33 = *v31;
        v63.n128_u64[0] = (unint64_t)*v31;
        v34 = sub_1C5FD82B8((uint64_t)&v66, (uint64_t *)&v63);
        if (*(_BYTE *)v34)
        {
          v35 = (llvm::MDNode *)v34[1];
          if (v35)
          {
            v34[1] = 0;
            v65 = v35;
            v36 = (unsigned int *)v35;
          }
          else
          {
            llvm::MDNode::clone(v33);
            v36 = (unsigned int *)v65;
          }
          v37 = v36[2];
          if ((_DWORD)v37)
          {
            v38 = 0;
            while (1)
            {
              v39 = *(llvm::Value **)&v36[2 * v38 + -2 * v36[2]];
              v40 = (llvm::Metadata *)sub_1C5FD8000((uint64_t)a1, v39);
              if (v41)
                break;
              v43 = sub_1C5FD87E0((uint64_t)&v66, (uint64_t)v39);
              if (*(_BYTE *)(v43 + 8))
              {
                v44 = v43;
                v42 = *(llvm::Metadata **)(v43 + 16);
                if (!v42)
                {
                  llvm::MDNode::clone(v39);
                  v46 = v63.n128_u64[0];
                  v63.n128_u64[0] = 0;
                  v47 = *(llvm::MDNode **)(v44 + 16);
                  *(_QWORD *)(v44 + 16) = v46;
                  if (v47)
                  {
                    llvm::MDNode::deleteTemporary(v47, v45);
                    v49 = (llvm::MDNode *)v63.n128_u64[0];
                    v63.n128_u64[0] = 0;
                    if (v49)
                      llvm::MDNode::deleteTemporary(v49, v48);
                  }
                  v42 = *(llvm::Metadata **)(v44 + 16);
                }
                goto LABEL_50;
              }
LABEL_58:
              if (v37 == ++v38)
              {
                v36 = (unsigned int *)v65;
                goto LABEL_60;
              }
            }
            v42 = v40;
LABEL_50:
            if (v39 != v42)
              llvm::MDNode::replaceOperandWith((llvm::MDNode *)v36, v38, v42);
            goto LABEL_58;
          }
LABEL_60:
          v65 = 0;
          v50 = (unsigned __int8 *)llvm::MDNode::replaceWithUniquedImpl((llvm::MDNode *)v36);
          sub_1C5FD874C(*(_DWORD *)(*a1 + 16), *(_QWORD *)(*a1 + 24), (unsigned __int8 *)v33, v50);
          if (v35)
          {
            v52 = v73;
            if (v73 >= (unint64_t)HIDWORD(v73))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, (uint64_t)v74, v73 + 1, 8);
              v52 = v73;
            }
            *((_QWORD *)v72 + v52) = v50;
            LODWORD(v73) = v73 + 1;
          }
          v53 = v65;
          v65 = 0;
          if (v53)
            llvm::MDNode::deleteTemporary(v53, v51);
        }
        else
        {
          sub_1C5FD874C(*(_DWORD *)(*a1 + 16), *(_QWORD *)(*a1 + 24), (unsigned __int8 *)v33, (unsigned __int8 *)v33);
        }
        ++v31;
      }
      while (v31 != v32);
      v58 = (char *)v72;
      if ((_DWORD)v73)
      {
        v59 = 8 * v73;
        do
        {
          v60 = *(_QWORD *)v58;
          if ((*(_BYTE *)(*(_QWORD *)v58 + 1) & 0x7F) == 2 || *(_DWORD *)(v60 + 12))
            llvm::MDNode::resolveCycles((unsigned __int8 *)v60);
          v58 += 8;
          v59 -= 8;
        }
        while (v59);
        v58 = (char *)v72;
      }
      if (v58 != (char *)v74)
        free(v58);
    }
LABEL_81:
    v54 = sub_1C5FD8000((uint64_t)a1, v62);
  }
  else
  {
    v54 = v62;
    if ((_DWORD)v70)
    {
      v55 = (unsigned __int8 **)v69;
      v56 = 8 * v70;
      do
      {
        v57 = *v55++;
        sub_1C5FD874C(*(_DWORD *)(*a1 + 16), *(_QWORD *)(*a1 + 24), v57, v57);
        v56 -= 8;
      }
      while (v56);
    }
  }
  if (v69 != v71)
    free(v69);
  sub_1C5FD8840((int *)&v66, v5);
  return v54;
}

uint64_t sub_1C5FD7F14(uint64_t a1, llvm::MDNode *this)
{
  llvm::MDNode *v4;
  uint64_t v5;
  unsigned int v6;
  llvm::MDNode *v8;

  if ((**(_BYTE **)a1 & 4) != 0)
  {
    sub_1C5FD874C(*(_DWORD *)(*(_QWORD *)a1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 24), (unsigned __int8 *)this, (unsigned __int8 *)this);
    v4 = this;
  }
  else
  {
    llvm::MDNode::clone(this);
    v4 = v8;
    llvm::MDNode::dropReplaceableUses((uint64_t)v8);
    llvm::MDNode::storeDistinctInContext(v8);
    sub_1C5FD874C(*(_DWORD *)(*(_QWORD *)a1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 24), (unsigned __int8 *)this, (unsigned __int8 *)v8);
  }
  v5 = *(unsigned int *)(a1 + 16);
  if (v5 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v5) = v4;
  v6 = *(_DWORD *)(a1 + 16) + 1;
  *(_DWORD *)(a1 + 16) = v6;
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6 - 8);
}

_QWORD *sub_1C5FD8000(uint64_t a1, llvm::Value *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t *v5;
  llvm::ValueAsMetadata *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  llvm::ValueAsMetadata *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::ValueAsMetadata *v17;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  llvm::ValueAsMetadata *v22;
  int32x2_t *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  llvm::ValueAsMetadata **v28;
  llvm::ValueAsMetadata *v29;
  int v30;
  int v31;
  uint64_t v33;
  unint64_t *v34;
  llvm::ValueAsMetadata *v35;
  uint64_t v36;

  v2 = a2;
  if (a2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 16 * *(unsigned int *)(*(_QWORD *)a1 + 16));
    if (*(_BYTE *)(v4 + 48))
    {
      v33 = (uint64_t)a2;
      v36 = 0;
      if (sub_1C4926528(v4 + 24, &v33, &v36))
      {
        v14 = v36;
        v15 = *(_QWORD *)(v4 + 24);
        v16 = *(unsigned int *)(v4 + 40);
      }
      else
      {
        v15 = *(_QWORD *)(v4 + 24);
        v16 = *(unsigned int *)(v4 + 40);
        v14 = v15 + 16 * v16;
      }
      if (v14 != v15 + 16 * v16)
        return *(_QWORD **)(v14 + 8);
    }
    if (*(_BYTE *)v2)
    {
      if (*(_BYTE *)v2 != 1)
        return 0;
      v5 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 16 * *(unsigned int *)(*(_QWORD *)a1 + 16));
      v6 = (llvm::ValueAsMetadata *)v2[16];
      v7 = *v5;
      v8 = *((unsigned int *)v5 + 4);
      if ((_DWORD)v8)
      {
        v9 = ((v6 >> 4) ^ (v6 >> 9)) & ((_DWORD)v8 - 1);
        v10 = (_QWORD *)(v7 + (v9 << 6));
        v11 = (llvm::ValueAsMetadata *)v10[3];
        if (v6 == v11)
          goto LABEL_15;
        v12 = 1;
        while (v11 != (llvm::ValueAsMetadata *)-4096)
        {
          v13 = v9 + v12++;
          v9 = v13 & (v8 - 1);
          v10 = (_QWORD *)(v7 + (v9 << 6));
          v11 = (llvm::ValueAsMetadata *)v10[3];
          if (v6 == v11)
            goto LABEL_15;
        }
      }
      v10 = (_QWORD *)(v7 + (v8 << 6));
LABEL_15:
      v33 = 6;
      if (v10 == (_QWORD *)(v7 + (v8 << 6)))
      {
        v17 = 0;
        v34 = 0;
        v35 = 0;
        if (v6)
          v2 = 0;
      }
      else
      {
        v17 = (llvm::ValueAsMetadata *)v10[7];
        v34 = 0;
        v35 = v17;
        if (v17 != (llvm::ValueAsMetadata *)-8192 && v17 != (llvm::ValueAsMetadata *)-4096 && v17 != 0)
        {
          v19 = v10[5] & 0xFFFFFFFFFFFFFFF8;
          v34 = *(unint64_t **)v19;
          v20 = v34;
          *(_QWORD *)v19 = &v33;
          v33 = v19 | 6;
          if (v20)
            *v20 = *v20 & 7 | (unint64_t)&v34;
          v6 = (llvm::ValueAsMetadata *)v2[16];
        }
        if (v6 != v17)
        {
          if (v17)
          {
            v2 = llvm::ValueAsMetadata::get(v17, a2);
            v17 = v35;
          }
          else
          {
            v2 = 0;
          }
        }
      }
      if (v17 != (llvm::ValueAsMetadata *)-8192 && v17 != (llvm::ValueAsMetadata *)-4096 && v17)
      {
        v21 = v33 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8) = v34;
        if (v34)
        {
          *v34 = *v34 & 7 | v21;
        }
        else
        {
          v22 = v35;
          v23 = ***(int32x2_t ****)v35;
          v24 = (unint64_t)v23[303];
          if (v24 <= v21)
          {
            v25 = v23[305].u32[0];
            if (v24 + 16 * v25 > v21)
            {
              v26 = v25 - 1;
              LODWORD(v27) = v26 & ((v35 >> 4) ^ (v35 >> 9));
              v28 = (llvm::ValueAsMetadata **)(v24 + 16 * v27);
              v29 = *v28;
              if (v35 == *v28)
              {
LABEL_45:
                *v28 = (llvm::ValueAsMetadata *)-8192;
                v23[304] = vadd_s32(v23[304], (int32x2_t)0x1FFFFFFFFLL);
                v22 = v35;
              }
              else
              {
                v30 = 1;
                while (v29 != (llvm::ValueAsMetadata *)-4096)
                {
                  v31 = v27 + v30++;
                  v27 = v31 & v26;
                  v29 = *(llvm::ValueAsMetadata **)(v24 + 16 * v27);
                  if (v35 == v29)
                  {
                    v28 = (llvm::ValueAsMetadata **)(v24 + 16 * v27);
                    goto LABEL_45;
                  }
                }
              }
              *((_BYTE *)v22 + 17) &= ~1u;
            }
          }
        }
      }
    }
  }
  return v2;
}

_QWORD *sub_1C5FD82B8(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C5FD831C(a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5FD83CC(a1, (llvm::MDNode *)a2, v7);
    *v5 = *a2;
    v5[1] = 0xFFFFFFFF00000000;
    v5[2] = 0;
  }
  return v5 + 1;
}

uint64_t sub_1C5FD831C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 24 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 24 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5FD83CC(uint64_t a1, llvm::MDNode *a2, _QWORD *a3)
{
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::MDNode *v20;
  _QWORD *v21;
  uint64_t v22[97];

  v22[96] = *MEMORY[0x1E0C80C00];
  v21 = a3;
  v5 = *(_DWORD *)a1;
  v6 = *(_DWORD *)a1 >> 1;
  v7 = *(_DWORD *)a1 & 1;
  if (v7)
    v8 = 32;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v6 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    goto LABEL_6;
  }
  if (v8 >= 0x21)
  {
    v10 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
    v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
    if ((v12 + 1) > 0x40)
      v8 = v12 + 1;
    else
      v8 = 64;
  }
  if (v7)
  {
    v15 = 0;
    v16 = v22;
    do
    {
      v17 = a1 + v15;
      v18 = *(_QWORD *)(a1 + v15 + 8);
      if ((v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *v16 = v18;
        v16[1] = *(_QWORD *)(v17 + 16);
        v19 = *(_QWORD *)(v17 + 24);
        *(_QWORD *)(v17 + 24) = 0;
        v16[2] = v19;
        v16 += 3;
        v20 = *(llvm::MDNode **)(v17 + 24);
        *(_QWORD *)(v17 + 24) = 0;
        if (v20)
          llvm::MDNode::deleteTemporary(v20, a2);
      }
      v15 += 24;
    }
    while (v15 != 768);
    if (v8 > 0x20)
    {
      *(_DWORD *)a1 &= ~1u;
      *(_QWORD *)(a1 + 8) = operator new(24 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v8;
    }
    sub_1C5FD8600(a1, v22, v16);
  }
  else
  {
    v13 = *(uint64_t **)(a1 + 8);
    v14 = *(_DWORD *)(a1 + 16);
    if (v8 > 0x20)
    {
      *(_QWORD *)(a1 + 8) = operator new(24 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v8;
    }
    else
    {
      *(_DWORD *)a1 = v5 | 1;
    }
    sub_1C5FD8600(a1, v13, &v13[3 * v14]);
    MEMORY[0x1CAA32FB4](v13, 8);
  }
  sub_1C5FD831C(a1, *(_QWORD *)a2, &v21);
  v5 = *(_DWORD *)a1;
  a3 = v21;
  v7 = *(_DWORD *)a1 & 1;
LABEL_6:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v7) + 2;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a3;
}

void sub_1C5FD8600(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  llvm::MDNode *v11;
  uint64_t *v12;
  uint64_t v13;
  llvm::MDNode *v14;
  uint64_t *v15;

  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 776);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_11;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[3 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 3;
  }
  while (v8 != v9);
LABEL_11:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v15 = 0;
      sub_1C5FD831C(a1, v10, &v15);
      v12 = v15;
      *v15 = *a2;
      v12[1] = a2[1];
      v13 = a2[2];
      a2[2] = 0;
      v12[2] = v13;
      *(_DWORD *)a1 += 2;
      v14 = (llvm::MDNode *)a2[2];
      a2[2] = 0;
      if (v14)
        llvm::MDNode::deleteTemporary(v14, v11);
    }
    a2 += 3;
  }
}

uint64_t sub_1C5FD86E0(uint64_t *a1, llvm::MDNode *a2)
{
  uint64_t result;
  char v5;

  if (!a2)
    return 0;
  result = (uint64_t)sub_1C5FD7894(*a1, (uint64_t)a2);
  if (!v5)
  {
    if ((*((_BYTE *)a2 + 1) & 0x7F) == 1)
      return sub_1C5FD7F14((uint64_t)a1, a2);
    else
      return result & 0xFFFFFFFFFFFFFF00;
  }
  return result;
}

unsigned __int8 *sub_1C5FD874C(unsigned int a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v5;
  _DWORD *v6;
  char v7;
  unsigned __int8 **v8;
  unsigned __int8 *v10;
  unsigned __int8 **v11;

  v10 = a3;
  v5 = *(_QWORD *)(a2 + 16 * a1);
  v6 = (_DWORD *)(v5 + 24);
  if (!*(_BYTE *)(v5 + 48))
  {
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_DWORD *)(v5 + 40) = 0;
    *(_BYTE *)(v5 + 48) = 1;
  }
  v11 = 0;
  v7 = sub_1C4926528(v5 + 24, &v10, &v11);
  v8 = v11;
  if ((v7 & 1) == 0)
  {
    v8 = (unsigned __int8 **)sub_1C5914288(v6, (uint64_t)&v10, &v10, v11);
    *v8 = v10;
    v8[1] = 0;
  }
  sub_1C4FCE378(v8 + 1, a4);
  return a4;
}

uint64_t sub_1C5FD87E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v6 = 0;
  if (sub_1C5FD831C(a1, a2, &v6))
    return v6;
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 32;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 24 * v5;
}

int *sub_1C5FD8840(int *a1, llvm::MDNode *a2)
{
  int v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  llvm::MDNode **v7;
  llvm::MDNode *v8;

  v3 = *a1;
  if ((*a1 & 1) != 0)
  {
    v5 = a1 + 2;
    v4 = 32;
  }
  else
  {
    v4 = a1[4];
    if (!(_DWORD)v4)
      goto LABEL_11;
    v5 = (int *)*((_QWORD *)a1 + 1);
  }
  v6 = 24 * v4;
  v7 = (llvm::MDNode **)(v5 + 4);
  do
  {
    if (((unint64_t)*(v7 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
        llvm::MDNode::deleteTemporary(v8, a2);
    }
    v7 += 3;
    v6 -= 24;
  }
  while (v6);
  v3 = *a1;
LABEL_11:
  if ((v3 & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 1), 8);
  return a1;
}

void llvm::irinject::getSerialModulePath(const std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v5[2];
  char v6;
  void *__p[2];
  char v8;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;
  _QWORD v13[4];
  __int16 v14;

  v10 = 773;
  v9[0] = a2;
  v9[1] = a3;
  v9[2] = "/";
  sub_1C5EACE4C(a1, v5);
  sub_1C5EACCD4((uint64_t)v5, __p);
  v11[0] = v9;
  v11[2] = __p;
  v12 = 1026;
  v13[0] = v11;
  v13[2] = ".ll";
  v14 = 770;
  llvm::Twine::str((llvm::Twine *)v13, a4);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
}

BOOL llvm::irinject::doesSerialModuleExist(const void *a1, size_t a2)
{
  void *p_p;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  int v13;
  void *__p;
  size_t v16;
  unint64_t v17;
  _QWORD v18[2];
  _BYTE v19[408];
  _QWORD v20[20];

  v20[19] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __p = 0;
    v16 = 0;
    v17 = 0;
    goto LABEL_12;
  }
  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 >= 0x17)
  {
    v5 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v5 = a2 | 7;
    v6 = v5 + 1;
    p_p = operator new(v5 + 1);
    v16 = a2;
    v17 = v6 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v17) = a2;
    p_p = &__p;
    if (!a2)
      goto LABEL_11;
  }
  memmove(p_p, a1, a2);
LABEL_11:
  *((_BYTE *)p_p + a2) = 0;
LABEL_12:
  v7 = MEMORY[0x1E0DE4FA8];
  v8 = MEMORY[0x1E0DE4FA8] + 64;
  v9 = (_QWORD *)MEMORY[0x1E0DE4F40];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  v20[0] = MEMORY[0x1E0DE4FA8] + 64;
  v18[0] = v10;
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v10 - 24)) = v11;
  v18[1] = 0;
  v12 = (std::ios_base *)((char *)v18 + *(_QWORD *)(v18[0] - 24));
  std::ios_base::init(v12, v19);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v18[0] = v7 + 24;
  v20[0] = v8;
  MEMORY[0x1CAA32BAC](v19);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)v18 + *(_QWORD *)(v18[0] - 24)), *(_DWORD *)&v19[*(_QWORD *)(v18[0] - 24) + 16] | 4);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  v13 = *(_DWORD *)&v19[*(_QWORD *)(v18[0] - 24) + 16];
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v18 + *(_QWORD *)(v18[0] - 24)), *(_DWORD *)&v19[*(_QWORD *)(v18[0] - 24) + 16] | 4);
  v18[0] = *v9;
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = v9[3];
  MEMORY[0x1CAA32BB8](v19);
  std::istream::~istream();
  MEMORY[0x1CAA32F18](v20);
  return v13 == 0;
}

uint64_t llvm::irinject::serializeModule(const std::string *a1, const void *a2, size_t a3)
{
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  std::ios_base *v14;
  void **v15;
  uint64_t v16;
  int *v17;
  char *v18;
  char *v19;
  size_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  void **__dst;
  size_t v30;
  void *v31[2];
  unint64_t v32;
  uint64_t v33;
  int v34;
  void *v35[2];
  unint64_t v36;
  void *v37[2];
  void *__p[2];
  __int128 v39;
  char *v40[2];
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[408];
  _QWORD v44[21];

  v44[19] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __dst = 0;
    v30 = 0;
    v31[0] = 0;
    goto LABEL_12;
  }
  if (a3 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_55;
  if (a3 >= 0x17)
  {
    v7 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v7 = a3 | 7;
    v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    v30 = a3;
    v31[0] = (void *)(v8 | 0x8000000000000000);
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v31[0]) = a3;
    p_dst = (void **)&__dst;
    if (!a3)
      goto LABEL_11;
  }
  memmove(p_dst, a2, a3);
LABEL_11:
  *((_BYTE *)p_dst + a3) = 0;
LABEL_12:
  v9 = MEMORY[0x1E0DE4FB0];
  v10 = MEMORY[0x1E0DE4FB0] + 64;
  v11 = (uint64_t *)MEMORY[0x1E0DE4F48];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  v44[0] = MEMORY[0x1E0DE4FB0] + 64;
  v42 = v12;
  *(_QWORD *)&v43[*(_QWORD *)(v12 - 24) - 8] = v13;
  v14 = (std::ios_base *)&v43[*(_QWORD *)(v42 - 24) - 8];
  std::ios_base::init(v14, v43);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  v42 = v9 + 24;
  v44[0] = v10;
  MEMORY[0x1CAA32BAC](v43);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)&v43[*(_QWORD *)(v42 - 24) - 8], *(_DWORD *)&v43[*(_QWORD *)(v42 - 24) + 24] | 4);
  if (SHIBYTE(v31[0]) < 0)
    operator delete(__dst);
  sub_1C5EACE4C(a1, &__dst);
  if (SHIBYTE(v31[0]) >= 0)
    v15 = (void **)&__dst;
  else
    v15 = __dst;
  if (SHIBYTE(v31[0]) >= 0)
    v16 = HIBYTE(v31[0]) & 0x7F;
  else
    v16 = v30;
  sub_1C4D7C62C(&v42, (uint64_t)v15, v16);
  if (SHIBYTE(v31[0]) < 0)
    operator delete(__dst);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v43[*(_QWORD *)(v42 - 24) - 8], *(_DWORD *)&v43[*(_QWORD *)(v42 - 24) + 24] | 4);
  if (*(_DWORD *)&v43[*(_QWORD *)(v42 - 24) + 24])
  {
    v17 = __error();
    v18 = strerror(*v17);
    v19 = v18;
    if (v18)
    {
      v18 = (char *)strlen(v18);
      v20 = (size_t)v18;
    }
    else
    {
      v20 = 0;
    }
    __dst = 0;
    v30 = 0;
    if (a3 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_55;
    if (a3 >= 0x17)
    {
      v22 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v22 = a3 | 7;
      v23 = v22 + 1;
      v21 = (void **)operator new(v22 + 1);
      v31[1] = (void *)a3;
      v32 = v23 | 0x8000000000000000;
      v31[0] = v21;
    }
    else
    {
      v21 = v31;
      HIBYTE(v32) = a3;
      if (!a3)
      {
LABEL_38:
        *((_BYTE *)v21 + a3) = 0;
        v33 = -1;
        v34 = 0;
        if (v20 <= 0x7FFFFFFFFFFFFFF7)
        {
          if (v20 >= 0x17)
          {
            v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v20 | 7) != 0x17)
              v25 = v20 | 7;
            v26 = v25 + 1;
            v24 = operator new(v25 + 1);
            v35[1] = (void *)v20;
            v36 = v26 | 0x8000000000000000;
            v35[0] = v24;
          }
          else
          {
            v24 = v35;
            HIBYTE(v36) = v20;
            if (!v20)
              goto LABEL_46;
          }
          v18 = (char *)memmove(v24, v19, v20);
LABEL_46:
          *((_BYTE *)v24 + v20) = 0;
          v39 = 0u;
          *(_OWORD *)__p = 0u;
          *(_OWORD *)v37 = 0u;
          v40[0] = (char *)&v41;
          v40[1] = (char *)0x400000000;
          v27 = (llvm::raw_ostream *)llvm::errs((llvm *)v18);
          llvm::SMDiagnostic::print((llvm::SMDiagnostic *)&__dst, "IRInject", v27, 1, 1);
          sub_1C4FAD100(v40);
          if (__p[1])
          {
            *(void **)&v39 = __p[1];
            operator delete(__p[1]);
          }
          if (SHIBYTE(__p[0]) < 0)
            operator delete(v37[0]);
          if (SHIBYTE(v36) < 0)
            operator delete(v35[0]);
          if (SHIBYTE(v32) < 0)
            operator delete(v31[0]);
          goto LABEL_54;
        }
LABEL_55:
        abort();
      }
    }
    v18 = (char *)memmove(v21, a2, a3);
    goto LABEL_38;
  }
LABEL_54:
  v42 = *v11;
  *(_QWORD *)&v43[*(_QWORD *)(v42 - 24) - 8] = v11[3];
  MEMORY[0x1CAA32BB8](v43);
  std::ostream::~ostream();
  return MEMORY[0x1CAA32F18](v44);
}

void llvm::irinject::deserializeModule(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  size_t v12;
  llvm *v13;
  llvm *v14;
  void *v15;
  llvm::raw_ostream *v16;
  char v17;
  void **__dst;
  size_t v19;
  int64_t v20;
  llvm *v21;
  __int128 v22;
  void *v23[2];
  __int128 v24;
  int v25;
  void *v26[2];
  void *__p[2];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char *v31[2];
  _QWORD v32[22];

  v32[21] = *MEMORY[0x1E0C80C00];
  v25 = 0;
  *(_OWORD *)v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)__p = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0;
  v31[0] = (char *)v32;
  v31[1] = (char *)0x400000000;
  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 >= 0x17)
  {
    v9 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v9 = a2 | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    v19 = a2;
    v20 = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v20) = a2;
  p_dst = (void **)&__dst;
  if (a2)
LABEL_8:
    memmove(p_dst, a1, a2);
  *((_BYTE *)p_dst + a2) = 0;
  if (v20 >= 0)
    v11 = (void **)&__dst;
  else
    v11 = __dst;
  if (v20 >= 0)
    v12 = HIBYTE(v20) & 0x7F;
  else
    v12 = v19;
  llvm::parseIRFile(v11, v12, (uint64_t)&v22, a3, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))sub_1C5FD9208, (uint64_t)&v17, (llvm::LLVMContextImpl ****)&v21);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst);
  if (v21)
  {
    llvm::CloneModule(v21, a4);
  }
  else
  {
    v14 = llvm::dbgs(0);
    v15 = (void *)*((_QWORD *)v14 + 4);
    if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 0x1DuLL)
    {
      qmemcpy(v15, "IR is malformed, can't parse:\n", 30);
      *((_QWORD *)v14 + 4) += 30;
    }
    else
    {
      v14 = llvm::raw_ostream::write(v14, "IR is malformed, can't parse:\n", 0x1EuLL);
    }
    v16 = (llvm::raw_ostream *)llvm::errs(v14);
    llvm::SMDiagnostic::print((llvm::SMDiagnostic *)&v22, "IRInject", v16, 1, 1);
    *a4 = 0;
  }
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    llvm::Module::~Module(v13);
    MEMORY[0x1CAA32FC0]();
  }
  sub_1C4FAD100(v31);
  if ((_QWORD)v29)
  {
    *((_QWORD *)&v29 + 1) = v29;
    operator delete((void *)v29);
  }
  if (SHIBYTE(v28) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v26[0]);
  if (SBYTE7(v24) < 0)
    operator delete(v23[0]);
}

void sub_1C5FD9208(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t llvm::VNCoercion::canCoerceMustAliasedValueToLoad(llvm::VNCoercion *this, llvm::Value ***a2, llvm::Type *a3, const llvm::DataLayout *a4)
{
  uint64_t v5;
  uint64_t result;
  unsigned int v8;
  unsigned int v10;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  llvm::Value *v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;

  v5 = *(_QWORD *)this;
  result = 1;
  if ((llvm::Value ***)v5 != a2)
  {
    v8 = *((unsigned __int8 *)a2 + 8);
    if (v8 > 0x13 || ((1 << v8) & 0xB0000) == 0)
    {
      v10 = *(unsigned __int8 *)(v5 + 8);
      if (v10 > 0x13 || ((1 << v10) & 0xB0000) == 0)
      {
        sub_1C4768AD0((uint64_t)a3, v5);
        if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) == v13)
        {
          v14 = v13;
          sub_1C4768AD0((uint64_t)a3, (uint64_t)a2);
          if (v14 >= v15)
          {
            v16 = v5;
            if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
              v16 = **(_QWORD **)(v5 + 16);
            v17 = sub_1C4DEB33C((uint64_t)a3, v16);
            v18 = (llvm::Value *)a2;
            if (((_DWORD)a2[1] & 0xFE) == 0x12)
              v18 = *a2[2];
            v19 = sub_1C4DEB33C((uint64_t)a3, (uint64_t)v18);
            if (v17 == v19)
            {
              if ((v17 & v19) != 1)
                goto LABEL_30;
              v20 = *(_DWORD *)(v5 + 8);
              if ((v20 & 0xFE) == 0x12)
                v20 = *(_DWORD *)(**(_QWORD **)(v5 + 16) + 8);
              v21 = *((_DWORD *)a2 + 2);
              if ((v21 & 0xFE) == 0x12)
                v21 = *((_DWORD *)*a2[2] + 2);
              if ((v21 ^ v20) <= 0xFF)
              {
LABEL_30:
                if (!v17 || (sub_1C4768AD0((uint64_t)a3, (uint64_t)a2), v14 == v22))
                {
                  if (*(_BYTE *)(v5 + 8) != 21)
                    return *((unsigned __int8 *)a2 + 8) != 21;
                }
              }
            }
            else if (*((unsigned __int8 *)this + 16) <= 0x14u)
            {
              return llvm::Constant::isNullValue(this);
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

llvm::UndefValue *llvm::VNCoercion::coerceAvailableValueToLoadType(llvm::VNCoercion *this, llvm::Value *a2, llvm::Type *a3, llvm::IRBuilderBase *a4, const llvm::DataLayout *a5)
{
  llvm::VNCoercion *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  llvm::Value *v25;
  llvm::Value *v26;
  int v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  llvm::Value **v32;
  _QWORD *v33;
  llvm::Value *v34;
  int v35;
  uint64_t v36;
  BOOL v37;
  _DWORD *v38;
  _DWORD *v39;
  int v40;
  _DWORD *v41;
  _DWORD *v42;
  int v43;
  _DWORD v44[8];
  __int16 v45;

  v8 = this;
  if (this && *((unsigned __int8 *)this + 16) <= 0x14u)
    v8 = llvm::ConstantFoldConstant((uint64_t)this, a4, 0);
  v9 = *(_QWORD *)v8;
  sub_1C4768AD0((uint64_t)a4, *(_QWORD *)v8);
  v11 = v10;
  sub_1C4768AD0((uint64_t)a4, (uint64_t)a2);
  v13 = *(_DWORD *)(v9 + 8);
  v14 = *(_DWORD *)(v9 + 8) & 0xFE;
  if (v11 != v12)
  {
    v17 = v12;
    v18 = *(_DWORD *)(v9 + 8);
    if (v14 == 18)
      v18 = *(unsigned __int8 *)(**(_QWORD **)(v9 + 16) + 8);
    if (v18 == 15)
    {
      llvm::DataLayout::getIntPtrType(a4, (llvm::Type *)v9);
      v9 = v19;
      v45 = 257;
      v8 = (llvm::VNCoercion *)sub_1C4773E38((uint64_t *)a3, 47, (unsigned __int8 *)v8, v19, (uint64_t)v44);
      v13 = *(unsigned __int8 *)(v9 + 8);
    }
    if (v13 == 13)
    {
LABEL_48:
      if (*(_BYTE *)a4)
      {
        sub_1C4768AD0((uint64_t)a4, v9);
        v30 = (v29 + 7) & 0xFFFFFFFFFFFFFFF8;
        sub_1C4768AD0((uint64_t)a4, (uint64_t)a2);
        v32 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v8, v30 - ((v31 + 7) & 0xFFFFFFFFFFFFFFF8), 0);
        v45 = 257;
        v8 = (llvm::VNCoercion *)sub_1C506ED1C((uint64_t)a3, (uint64_t)v8, (uint64_t)v32, (uint64_t)v44, 0);
      }
      v33 = *(_QWORD **)v9;
      v44[0] = v17;
      if (v17 <= 63)
      {
        if (v17 <= 31)
        {
          switch(v17)
          {
            case 16:
              v34 = (llvm::Value *)(*v33 + 1936);
              goto LABEL_58;
            case 8:
              v34 = (llvm::Value *)(*v33 + 1912);
              goto LABEL_58;
            case 1:
              v34 = (llvm::Value *)(*v33 + 1888);
              goto LABEL_58;
          }
        }
        else if (v17 == 32)
        {
          v34 = (llvm::Value *)(*v33 + 1960);
          goto LABEL_58;
        }
      }
      else
      {
        if (v17 == 64)
        {
          v34 = (llvm::Value *)(*v33 + 1984);
          goto LABEL_58;
        }
        if (v17 == 128)
        {
          v34 = (llvm::Value *)(*v33 + 2008);
          goto LABEL_58;
        }
      }
      v38 = sub_1C5270984(*v33 + 2168, v44);
      v34 = (llvm::Value *)*((_QWORD *)v38 + 1);
      if (!v34)
      {
        v39 = v38;
        v34 = (llvm::Value *)sub_1C484358C(*v33 + 2040, 24, 3);
        v40 = v44[0];
        *(_QWORD *)v34 = v33;
        *((_QWORD *)v34 + 2) = 0;
        *((_QWORD *)v34 + 1) = (v40 << 8) | 0xDu;
        *((_QWORD *)v39 + 1) = v34;
      }
LABEL_58:
      v45 = 257;
      v8 = (llvm::VNCoercion *)sub_1C5390E08((uint64_t *)a3, (unsigned __int8 *)v8, (uint64_t)v34, (uint64_t)v44);
      if (v34 != a2)
      {
        if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
          v35 = *(unsigned __int8 *)(**((_QWORD **)a2 + 2) + 8);
        else
          v35 = *((_DWORD *)a2 + 2);
        v45 = 257;
        if (v35 == 15)
          v36 = 48;
        else
          v36 = 49;
        v8 = (llvm::VNCoercion *)sub_1C4773E38((uint64_t *)a3, v36, (unsigned __int8 *)v8, (uint64_t)a2, (uint64_t)v44);
      }
      if (v8)
        v37 = *((unsigned __int8 *)v8 + 16) > 0x14u;
      else
        v37 = 1;
      if (!v37)
        return llvm::ConstantFoldConstant((uint64_t)v8, a4, 0);
      return v8;
    }
    v20 = *(_QWORD **)v9;
    v44[0] = v11;
    if ((int)v11 <= 63)
    {
      if ((int)v11 <= 31)
      {
        switch((_DWORD)v11)
        {
          case 0x10:
            v9 = *v20 + 1936;
            goto LABEL_47;
          case 8:
            v9 = *v20 + 1912;
            goto LABEL_47;
          case 1:
            v9 = *v20 + 1888;
            goto LABEL_47;
        }
      }
      else if ((_DWORD)v11 == 32)
      {
        v9 = *v20 + 1960;
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v11 == 64)
      {
        v9 = *v20 + 1984;
LABEL_47:
        v45 = 257;
        v8 = (llvm::VNCoercion *)sub_1C4773E38((uint64_t *)a3, 49, (unsigned __int8 *)v8, v9, (uint64_t)v44);
        goto LABEL_48;
      }
      if ((_DWORD)v11 == 128)
      {
        v9 = *v20 + 2008;
        goto LABEL_47;
      }
    }
    v41 = sub_1C5270984(*v20 + 2168, v44);
    v9 = *((_QWORD *)v41 + 1);
    if (!v9)
    {
      v42 = v41;
      v9 = sub_1C484358C(*v20 + 2040, 24, 3);
      v43 = v44[0];
      *(_QWORD *)v9 = v20;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 8) = (v43 << 8) | 0xDu;
      *((_QWORD *)v42 + 1) = v9;
    }
    goto LABEL_47;
  }
  v15 = *(_DWORD *)(v9 + 8);
  if (v14 == 18)
    v15 = *(unsigned __int8 *)(**(_QWORD **)(v9 + 16) + 8);
  if (v15 == 15)
  {
    v16 = (*((_DWORD *)a2 + 2) & 0xFE) == 0x12
        ? *(unsigned __int8 *)(**((_QWORD **)a2 + 2) + 8)
        : *((_DWORD *)a2 + 2);
    if (v16 == 15)
    {
      v45 = 257;
      v21 = (uint64_t *)a3;
      v22 = 49;
LABEL_37:
      v8 = (llvm::VNCoercion *)sub_1C4773E38(v21, v22, (unsigned __int8 *)v8, (uint64_t)a2, (uint64_t)v44);
      goto LABEL_38;
    }
  }
  if (v14 == 18)
    v13 = *(unsigned __int8 *)(**(_QWORD **)(v9 + 16) + 8);
  if (v13 == 15)
  {
    llvm::DataLayout::getIntPtrType(a4, (llvm::Type *)v9);
    v9 = v23;
    v45 = 257;
    v8 = (llvm::VNCoercion *)sub_1C4773E38((uint64_t *)a3, 47, (unsigned __int8 *)v8, v23, (uint64_t)v44);
  }
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
    v24 = *(unsigned __int8 *)(**((_QWORD **)a2 + 2) + 8);
  else
    v24 = *((_DWORD *)a2 + 2);
  v25 = a2;
  if (v24 == 15)
  {
    llvm::DataLayout::getIntPtrType(a4, a2);
    v25 = v26;
  }
  if ((llvm::Value *)v9 != v25)
  {
    v45 = 257;
    v8 = (llvm::VNCoercion *)sub_1C4773E38((uint64_t *)a3, 49, (unsigned __int8 *)v8, (uint64_t)v25, (uint64_t)v44);
  }
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
    v27 = *(unsigned __int8 *)(**((_QWORD **)a2 + 2) + 8);
  else
    v27 = *((_DWORD *)a2 + 2);
  if (v27 == 15)
  {
    v45 = 257;
    v21 = (uint64_t *)a3;
    v22 = 48;
    goto LABEL_37;
  }
LABEL_38:
  if (v8 && *((_BYTE *)v8 + 16) == 5)
    return llvm::ConstantFoldConstant((uint64_t)v8, a4, 0);
  return v8;
}

uint64_t llvm::VNCoercion::analyzeLoadFromClobberingStore(llvm::Value ***this, llvm::Type *a2, llvm::Value *a3, llvm::StoreInst *a4, const llvm::DataLayout *a5)
{
  llvm::VNCoercion *v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  uint64_t *v14;
  unint64_t v15;

  v6 = (llvm::VNCoercion *)*((_QWORD *)a3 - 8);
  v7 = *(unsigned __int8 *)(*(_QWORD *)v6 + 8);
  v8 = v7 > 0x13;
  v9 = (1 << v7) & 0xB0000;
  v10 = v8 || v9 == 0;
  if (!v10 || !llvm::VNCoercion::canCoerceMustAliasedValueToLoad(v6, this, a4, a4))
    return 0xFFFFFFFFLL;
  v14 = (uint64_t *)*((_QWORD *)a3 - 4);
  sub_1C4768AD0((uint64_t)a4, **((_QWORD **)a3 - 8));
  return sub_1C5FD99F8((uint64_t)this, (uint64_t *)a2, v14, v15, a4);
}

uint64_t sub_1C5FD99F8(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4, llvm::DataLayout *a5)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  const void *v24;
  unsigned int IndexTypeSizeInBits;

  v5 = *(unsigned __int8 *)(a1 + 8);
  v6 = v5 > 0x13;
  v7 = (1 << v5) & 0xB0000;
  if (!v6 && v7 != 0)
    return 0xFFFFFFFFLL;
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a5, *a3);
  if (IndexTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v24, 0, 0);
  else
    v24 = 0;
  v16 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)a3, a5, &v24, 1, 0, 0, v15);
  if (IndexTypeSizeInBits > 0x40)
  {
    v17 = *(_QWORD *)v24;
    MEMORY[0x1CAA32F9C]();
  }
  else
  {
    v17 = (uint64_t)((_QWORD)v24 << -(uint64_t)IndexTypeSizeInBits) >> -(uint64_t)IndexTypeSizeInBits;
  }
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a5, *a2);
  if (IndexTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v24, 0, 0);
  else
    v24 = 0;
  v19 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)a2, a5, &v24, 1, 0, 0, v18);
  if (IndexTypeSizeInBits > 0x40)
  {
    v20 = *(_QWORD *)v24;
    MEMORY[0x1CAA32F9C]();
  }
  else
  {
    v20 = (uint64_t)((_QWORD)v24 << -(uint64_t)IndexTypeSizeInBits) >> -(uint64_t)IndexTypeSizeInBits;
  }
  if (v16 != v19)
    return 0xFFFFFFFFLL;
  sub_1C4768AD0((uint64_t)a5, a1);
  v22 = v21;
  v23 = v21 | a4;
  result = 0xFFFFFFFFLL;
  if ((v23 & 7) == 0 && v20 >= v17 && (uint64_t)(v17 + (a4 >> 3)) >= (uint64_t)(v20 + (v22 >> 3)))
    return (v20 - v17);
  return result;
}

uint64_t llvm::VNCoercion::analyzeLoadFromClobberingLoad(llvm::Value ***this, llvm::Type *a2, llvm::Value *a3, llvm::LoadInst *a4, const llvm::DataLayout *a5)
{
  uint64_t *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  const char *v28;
  unint64_t PrimitiveSizeInBits;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *i;
  int64_t v36;
  uint64_t v37;
  _QWORD *v38;
  const void *v39;
  unsigned int IndexTypeSizeInBits;

  if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x10
    || !llvm::VNCoercion::canCoerceMustAliasedValueToLoad(a3, this, a4, a4))
  {
    return 0xFFFFFFFFLL;
  }
  v9 = (uint64_t *)*((_QWORD *)a3 - 4);
  sub_1C4768AD0((uint64_t)a4, *(_QWORD *)a3);
  result = sub_1C5FD99F8((uint64_t)this, (uint64_t *)a2, v9, v10, a4);
  if ((_DWORD)result != -1)
    return result;
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a4, *(_QWORD *)a2);
  if (IndexTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v39, 0, 0);
  else
    v39 = 0;
  v13 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)a2, a4, &v39, 1, 0, 0, v12);
  if (IndexTypeSizeInBits > 0x40)
  {
    v14 = *(_QWORD *)v39;
    MEMORY[0x1CAA32F9C]();
  }
  else
  {
    v14 = (uint64_t)((_QWORD)v39 << -(uint64_t)IndexTypeSizeInBits) >> -(uint64_t)IndexTypeSizeInBits;
  }
  sub_1C4768AD0((uint64_t)a4, (uint64_t)this);
  if (*(_BYTE *)(*(_QWORD *)a3 + 8) != 13)
    return 0xFFFFFFFFLL;
  v16 = v15;
  v17 = *((unsigned __int8 *)a3 + 16);
  if (v17 == 60 || v17 == 61)
  {
    v18 = *((_WORD *)a3 + 9);
    if ((v18 & 0x380) != 0 || (v18 & 1) != 0)
      return 0xFFFFFFFFLL;
  }
  else if ((v17 - 63) < 3 || (*((_WORD *)a3 + 9) & 1) != 0)
  {
    return 0xFFFFFFFFLL;
  }
  v19 = *(_QWORD *)(*((_QWORD *)a3 + 5) + 56);
  v20 = *(_QWORD *)(v19 + 112);
  if (v20 && (*(_BYTE *)(v20 + 18) & 0x40) != 0)
    return 0xFFFFFFFFLL;
  v38 = *(_QWORD **)(v19 + 40);
  v21 = (uint64_t *)*((_QWORD *)a3 - 4);
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)(v38 + 34), *v21);
  if (IndexTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v39, 0, 0);
  else
    v39 = 0;
  v23 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v21, (llvm::DataLayout *)(v38 + 34), &v39, 1, 0, 0, v22);
  if (IndexTypeSizeInBits > 0x40)
  {
    v24 = *(_QWORD *)v39;
    MEMORY[0x1CAA32F9C]();
  }
  else
  {
    v24 = (uint64_t)((_QWORD)v39 << -(uint64_t)IndexTypeSizeInBits) >> -(uint64_t)IndexTypeSizeInBits;
  }
  result = 0xFFFFFFFFLL;
  if (v23 == v13 && v24 <= v14)
  {
    v25 = (unint64_t)(v16 + 7) >> 3;
    v26 = 1 << ((unint64_t)*((unsigned __int16 *)a3 + 9) >> 1);
    v27 = v14 + v25;
    if (v24 + v26 >= v27)
    {
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a3);
      if ((_DWORD)v28 == 1)
      v30 = (PrimitiveSizeInBits >> 3) | ((unint64_t)(PrimitiveSizeInBits >> 3) >> 1);
      v31 = v30 | (v30 >> 2) | ((v30 | (v30 >> 2)) >> 4);
      v32 = (((v31 | (v31 >> 8)) >> 16) | v31 | (v31 >> 8)) + 1;
      if (v32 <= v26 && v38[39])
      {
        while (1)
        {
          v33 = 8 * v32;
          v34 = v38[39];
          for (i = (unsigned __int8 *)v38[38]; v33 > *i; ++i)
          {
            result = 0xFFFFFFFFLL;
            if (!--v34)
              return result;
          }
          v36 = v24 + v32;
          if (v36 > v27)
          {
            v37 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 5) + 56) + 112);
            if (v37)
            {
              if ((*(_BYTE *)(v37 + 18) & 0xC) != 0)
                break;
            }
          }
          if (v36 >= v27)
          {
            if (!v32)
              return 0xFFFFFFFFLL;
            return sub_1C5FD99F8((uint64_t)this, (uint64_t *)a2, v9, v33, a4);
          }
          v32 *= 2;
          result = 0xFFFFFFFFLL;
          if (v32 > v26)
            return result;
        }
      }
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t llvm::VNCoercion::analyzeLoadFromClobberingMemInst(uint64_t a1, uint64_t *a2, uint64_t a3, llvm::DataLayout *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  llvm::APInt *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  BOOL v23;
  uint64_t *v24;
  llvm *UnderlyingObject;
  llvm *v27;
  llvm::GlobalValue *Section;
  uint64_t v29;
  llvm::Module *v30;
  uint64_t *v31;
  unsigned int v32;
  unsigned int IndexTypeSizeInBits;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t *v39;
  unint64_t v41;
  unsigned int v42;

  v4 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5)
    v6 = *(_BYTE *)(v5 + 16) == 16;
  else
    v6 = 0;
  if (!v6)
    return 0xFFFFFFFFLL;
  v12 = (_QWORD *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u)
    v12 = (_QWORD *)*v12;
  v13 = 8 * *v12;
  if (*(_DWORD *)(*(_QWORD *)(a3 - 32) + 36) == 199)
  {
    v14 = a1;
    if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12)
      v14 = **(_QWORD **)(a1 + 16);
    v15 = sub_1C4DEB33C((uint64_t)a4, v14);
    v16 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
    v17 = -v16;
    if (!v15)
      goto LABEL_49;
    v18 = *(_QWORD *)(a3 - 32 * v16 + 32);
    if (v18)
      v19 = *(_BYTE *)(v18 + 16) == 16;
    else
      v19 = 0;
    if (!v19)
      return 0xFFFFFFFFLL;
    v20 = (llvm::APInt *)(v18 + 24);
    v21 = *(_DWORD *)(v18 + 32);
    if (v21 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v20) == v21)
      {
LABEL_49:
        v39 = (uint64_t *)llvm::Value::stripPointerCasts(*(llvm::Value **)(a3 + 32 * v17));
        return sub_1C5FD99F8(a1, a2, v39, v13, a4);
      }
    }
    else if (!*(_QWORD *)v20)
    {
      goto LABEL_49;
    }
    return 0xFFFFFFFFLL;
  }
  v22 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*(llvm::Value **)(v4 + 32));
  if (v22)
    v23 = v22[16] > 0x14u;
  else
    v23 = 1;
  if (v23)
    return 0xFFFFFFFFLL;
  v24 = (uint64_t *)v22;
  UnderlyingObject = llvm::getUnderlyingObject((llvm *)v22, (const llvm::Value *)6);
  if (!UnderlyingObject || *((_BYTE *)UnderlyingObject + 16) != 3)
    return 0xFFFFFFFFLL;
  v27 = UnderlyingObject;
  if ((*((_BYTE *)UnderlyingObject + 80) & 1) == 0 || (*((_DWORD *)UnderlyingObject + 5) & 0x7FFFFFF) == 0)
    return 0xFFFFFFFFLL;
  Section = llvm::GlobalValue::getSection(UnderlyingObject);
  if (v29 == 12
    && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
    && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
  {
    return 0xFFFFFFFFLL;
  }
  if ((*((_DWORD *)v27 + 8) & 0xFu) - 5 < 4
    || (result = 0xFFFFFFFFLL, ((1 << (*((_DWORD *)v27 + 8) & 0xF)) & 0x614) == 0))
  {
    v30 = (llvm::Module *)*((_QWORD *)v27 + 5);
    if (v30 && llvm::Module::getSemanticInterposition(v30) && (*((_BYTE *)v27 + 33) & 0x40) == 0
      || (*((_BYTE *)v27 + 80) & 2) != 0)
    {
      return 0xFFFFFFFFLL;
    }
    v31 = (uint64_t *)llvm::Value::stripPointerCasts(*(llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)));
    result = sub_1C5FD99F8(a1, a2, v31, v13, a4);
    if ((_DWORD)result != -1)
    {
      v32 = result;
      IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a4, *v24);
      v42 = IndexTypeSizeInBits;
      if (IndexTypeSizeInBits > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v41, (int)v32, 0);
      }
      else
      {
        v37 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
        if (!IndexTypeSizeInBits)
          v37 = 0;
        v41 = v37 & (int)v32;
      }
      v38 = llvm::ConstantFoldLoadFromConstPtr((uint64_t)v24, a1, (const void **)&v41, a4, v34, v35, v36);
      if (v42 >= 0x41 && v41)
        MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
      if (v38)
        return v32;
      else
        return 0xFFFFFFFFLL;
    }
  }
  return result;
}

llvm::UndefValue *llvm::VNCoercion::getStoreValueForLoad(llvm::VNCoercion *this, llvm::Value *a2, uint64_t a3, llvm::Type *a4, llvm::Instruction *a5, const llvm::DataLayout *a6)
{
  int v8;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  llvm::Type *v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  llvm::Value **v25;
  int v26;
  _QWORD *v27;
  llvm::UndefValue *v28;
  _DWORD *v30;
  _DWORD *v31;
  int v32;
  _DWORD *v33;
  _DWORD *v34;
  int v35;
  _DWORD v36[8];
  __int16 v37;
  void *v38[2];
  _QWORD v39[16];

  v8 = (int)a2;
  v39[15] = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v38, (uint64_t)a4, 0, 0, 0);
  v10 = **(_QWORD ***)this;
  if (*(_DWORD *)(*(_QWORD *)this + 8) == 15
    && *(_DWORD *)(a3 + 8) == 15
    && (*(_DWORD *)(a3 + 8) ^ *(_DWORD *)(*(_QWORD *)this + 8)) < 0x100)
  {
    goto LABEL_31;
  }
  sub_1C4768AD0((uint64_t)a5, *(_QWORD *)this);
  v12 = v11 + 7;
  sub_1C4768AD0((uint64_t)a5, a3);
  v14 = v13 + 7;
  v15 = *(llvm::Type **)this;
  v16 = *(_DWORD *)(*(_QWORD *)this + 8);
  v17 = v16;
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
    v17 = *(unsigned __int8 *)(**((_QWORD **)v15 + 2) + 8);
  v18 = v12 >> 3;
  v19 = v14 >> 3;
  if (v17 == 15)
  {
    llvm::DataLayout::getIntPtrType(a5, v15);
    v37 = 257;
    this = (llvm::VNCoercion *)sub_1C4773E38((uint64_t *)v38, 47, (unsigned __int8 *)this, v20, (uint64_t)v36);
    v16 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
  }
  if (v16 != 13)
  {
    v21 = v12 & 0xFFFFFFF8;
    v36[0] = v12 & 0xFFFFFFF8;
    if ((int)(v12 & 0xFFFFFFF8) <= 63)
    {
      switch(v21)
      {
        case 32:
          v22 = (_QWORD *)(*v10 + 1960);
          goto LABEL_16;
        case 16:
          v22 = (_QWORD *)(*v10 + 1936);
          goto LABEL_16;
        case 8:
          v22 = (_QWORD *)(*v10 + 1912);
          goto LABEL_16;
      }
    }
    else
    {
      if (v21 == 64)
      {
        v22 = (_QWORD *)(*v10 + 1984);
LABEL_16:
        v37 = 257;
        this = (llvm::VNCoercion *)sub_1C4773E38((uint64_t *)v38, 49, (unsigned __int8 *)this, (uint64_t)v22, (uint64_t)v36);
        goto LABEL_17;
      }
      if (v21 == 128)
      {
        v22 = (_QWORD *)(*v10 + 2008);
        goto LABEL_16;
      }
    }
    v30 = sub_1C5270984(*v10 + 2168, v36);
    v22 = (_QWORD *)*((_QWORD *)v30 + 1);
    if (!v22)
    {
      v31 = v30;
      v22 = (_QWORD *)sub_1C484358C(*v10 + 2040, 24, 3);
      v32 = v36[0];
      *v22 = v10;
      v22[2] = 0;
      v22[1] = (v32 << 8) | 0xDu;
      *((_QWORD *)v31 + 1) = v22;
    }
    goto LABEL_16;
  }
LABEL_17:
  if (*(_BYTE *)a5)
    v23 = v18 - (v19 + v8);
  else
    v23 = v8;
  v24 = (8 * v23);
  if ((_DWORD)v24)
  {
    v25 = llvm::ConstantInt::get(*(llvm::ConstantInt **)this, v24, 0);
    v37 = 257;
    this = (llvm::VNCoercion *)sub_1C506ED1C((uint64_t)v38, (uint64_t)this, (uint64_t)v25, (uint64_t)v36, 0);
  }
  if (v19 != v18)
  {
    v26 = v14 & 0xFFFFFFF8;
    v36[0] = v14 & 0xFFFFFFF8;
    if ((int)(v14 & 0xFFFFFFF8) <= 63)
    {
      switch(v26)
      {
        case 32:
          v27 = (_QWORD *)(*v10 + 1960);
          goto LABEL_30;
        case 16:
          v27 = (_QWORD *)(*v10 + 1936);
          goto LABEL_30;
        case 8:
          v27 = (_QWORD *)(*v10 + 1912);
          goto LABEL_30;
      }
    }
    else
    {
      if (v26 == 64)
      {
        v27 = (_QWORD *)(*v10 + 1984);
LABEL_30:
        v37 = 257;
        this = (llvm::VNCoercion *)sub_1C5390E08((uint64_t *)v38, (unsigned __int8 *)this, (uint64_t)v27, (uint64_t)v36);
        goto LABEL_31;
      }
      if (v26 == 128)
      {
        v27 = (_QWORD *)(*v10 + 2008);
        goto LABEL_30;
      }
    }
    v33 = sub_1C5270984(*v10 + 2168, v36);
    v27 = (_QWORD *)*((_QWORD *)v33 + 1);
    if (!v27)
    {
      v34 = v33;
      v27 = (_QWORD *)sub_1C484358C(*v10 + 2040, 24, 3);
      v35 = v36[0];
      *v27 = v10;
      v27[2] = 0;
      v27[1] = (v35 << 8) | 0xDu;
      *((_QWORD *)v34 + 1) = v27;
    }
    goto LABEL_30;
  }
LABEL_31:
  v28 = sub_1C5FDA5C8((uint64_t)this, a3, (uint64_t *)v38, a5);
  if (v38[0] != v39)
    free(v38[0]);
  return v28;
}

llvm::UndefValue *sub_1C5FDA5C8(uint64_t a1, uint64_t a2, uint64_t *a3, llvm::Type *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  llvm::Value **v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  BOOL v36;
  _DWORD *v37;
  _DWORD *v38;
  int v39;
  _DWORD *v40;
  _DWORD *v41;
  int v42;
  _DWORD v43[8];
  __int16 v44;

  v7 = a1;
  if (a1 && *(unsigned __int8 *)(a1 + 16) <= 0x14u)
    v7 = (uint64_t)llvm::ConstantFoldConstant(a1, a4, 0);
  v8 = *(_QWORD *)v7;
  sub_1C4768AD0((uint64_t)a4, *(_QWORD *)v7);
  v10 = v9;
  sub_1C4768AD0((uint64_t)a4, a2);
  v12 = *(_DWORD *)(v8 + 8);
  v13 = *(_DWORD *)(v8 + 8) & 0xFE;
  if (v10 != v11)
  {
    v16 = v11;
    v17 = *(_DWORD *)(v8 + 8);
    if (v13 == 18)
      v17 = *(unsigned __int8 *)(**(_QWORD **)(v8 + 16) + 8);
    if (v17 == 15)
    {
      llvm::DataLayout::getIntPtrType(a4, (llvm::Type *)v8);
      v8 = v18;
      v44 = 257;
      v7 = (uint64_t)sub_1C4773E38(a3, 47, (unsigned __int8 *)v7, v18, (uint64_t)v43);
      v12 = *(unsigned __int8 *)(v8 + 8);
    }
    if (v12 == 13)
    {
LABEL_48:
      if (*(_BYTE *)a4)
      {
        sub_1C4768AD0((uint64_t)a4, v8);
        v29 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
        sub_1C4768AD0((uint64_t)a4, a2);
        v31 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v7, v29 - ((v30 + 7) & 0xFFFFFFFFFFFFFFF8), 0);
        v44 = 257;
        v7 = sub_1C506ED1C((uint64_t)a3, v7, (uint64_t)v31, (uint64_t)v43, 0);
      }
      v32 = *(_QWORD **)v8;
      v43[0] = v16;
      if (v16 <= 63)
      {
        if (v16 <= 31)
        {
          switch(v16)
          {
            case 16:
              v33 = (_QWORD *)(*v32 + 1936);
              goto LABEL_58;
            case 8:
              v33 = (_QWORD *)(*v32 + 1912);
              goto LABEL_58;
            case 1:
              v33 = (_QWORD *)(*v32 + 1888);
              goto LABEL_58;
          }
        }
        else if (v16 == 32)
        {
          v33 = (_QWORD *)(*v32 + 1960);
          goto LABEL_58;
        }
      }
      else
      {
        if (v16 == 64)
        {
          v33 = (_QWORD *)(*v32 + 1984);
          goto LABEL_58;
        }
        if (v16 == 128)
        {
          v33 = (_QWORD *)(*v32 + 2008);
          goto LABEL_58;
        }
      }
      v37 = sub_1C5270984(*v32 + 2168, v43);
      v33 = (_QWORD *)*((_QWORD *)v37 + 1);
      if (!v33)
      {
        v38 = v37;
        v33 = (_QWORD *)sub_1C484358C(*v32 + 2040, 24, 3);
        v39 = v43[0];
        *v33 = v32;
        v33[2] = 0;
        v33[1] = (v39 << 8) | 0xDu;
        *((_QWORD *)v38 + 1) = v33;
      }
LABEL_58:
      v44 = 257;
      v7 = (uint64_t)sub_1C5390E08(a3, (unsigned __int8 *)v7, (uint64_t)v33, (uint64_t)v43);
      if (v33 != (_QWORD *)a2)
      {
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
          v34 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8);
        else
          v34 = *(_DWORD *)(a2 + 8);
        v44 = 257;
        if (v34 == 15)
          v35 = 48;
        else
          v35 = 49;
        v7 = (uint64_t)sub_1C4773E38(a3, v35, (unsigned __int8 *)v7, a2, (uint64_t)v43);
      }
      if (v7)
        v36 = *(unsigned __int8 *)(v7 + 16) > 0x14u;
      else
        v36 = 1;
      if (!v36)
        return llvm::ConstantFoldConstant(v7, a4, 0);
      return (llvm::UndefValue *)v7;
    }
    v19 = *(_QWORD **)v8;
    v43[0] = v10;
    if ((int)v10 <= 63)
    {
      if ((int)v10 <= 31)
      {
        switch((_DWORD)v10)
        {
          case 0x10:
            v8 = *v19 + 1936;
            goto LABEL_47;
          case 8:
            v8 = *v19 + 1912;
            goto LABEL_47;
          case 1:
            v8 = *v19 + 1888;
            goto LABEL_47;
        }
      }
      else if ((_DWORD)v10 == 32)
      {
        v8 = *v19 + 1960;
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v10 == 64)
      {
        v8 = *v19 + 1984;
LABEL_47:
        v44 = 257;
        v7 = (uint64_t)sub_1C4773E38(a3, 49, (unsigned __int8 *)v7, v8, (uint64_t)v43);
        goto LABEL_48;
      }
      if ((_DWORD)v10 == 128)
      {
        v8 = *v19 + 2008;
        goto LABEL_47;
      }
    }
    v40 = sub_1C5270984(*v19 + 2168, v43);
    v8 = *((_QWORD *)v40 + 1);
    if (!v8)
    {
      v41 = v40;
      v8 = sub_1C484358C(*v19 + 2040, 24, 3);
      v42 = v43[0];
      *(_QWORD *)v8 = v19;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 8) = (v42 << 8) | 0xDu;
      *((_QWORD *)v41 + 1) = v8;
    }
    goto LABEL_47;
  }
  v14 = *(_DWORD *)(v8 + 8);
  if (v13 == 18)
    v14 = *(unsigned __int8 *)(**(_QWORD **)(v8 + 16) + 8);
  if (v14 == 15)
  {
    v15 = (*(_DWORD *)(a2 + 8) & 0xFE) == 0x12
        ? *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8)
        : *(_DWORD *)(a2 + 8);
    if (v15 == 15)
    {
      v44 = 257;
      v20 = a3;
      v21 = 49;
LABEL_37:
      v7 = (uint64_t)sub_1C4773E38(v20, v21, (unsigned __int8 *)v7, a2, (uint64_t)v43);
      goto LABEL_38;
    }
  }
  if (v13 == 18)
    v12 = *(unsigned __int8 *)(**(_QWORD **)(v8 + 16) + 8);
  if (v12 == 15)
  {
    llvm::DataLayout::getIntPtrType(a4, (llvm::Type *)v8);
    v8 = v22;
    v44 = 257;
    v7 = (uint64_t)sub_1C4773E38(a3, 47, (unsigned __int8 *)v7, v22, (uint64_t)v43);
  }
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v23 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8);
  else
    v23 = *(_DWORD *)(a2 + 8);
  v24 = a2;
  if (v23 == 15)
  {
    llvm::DataLayout::getIntPtrType(a4, (llvm::Type *)a2);
    v24 = v25;
  }
  if (v8 != v24)
  {
    v44 = 257;
    v7 = (uint64_t)sub_1C4773E38(a3, 49, (unsigned __int8 *)v7, v24, (uint64_t)v43);
  }
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v26 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8);
  else
    v26 = *(_DWORD *)(a2 + 8);
  if (v26 == 15)
  {
    v44 = 257;
    v20 = a3;
    v21 = 48;
    goto LABEL_37;
  }
LABEL_38:
  if (v7 && *(_BYTE *)(v7 + 16) == 5)
    return llvm::ConstantFoldConstant(v7, a4, 0);
  return (llvm::UndefValue *)v7;
}

llvm::UndefValue *llvm::VNCoercion::getConstantStoreValueForLoad(llvm::ConstantInt **this, llvm::Constant *a2, uint64_t a3, llvm::Type *a4, const llvm::DataLayout *a5)
{
  int v7;
  llvm::ConstantInt **LShr;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  llvm::ConstantInt *v12;
  uint64_t v13;
  unint64_t v14;
  llvm::ConstantInt *v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  llvm::Constant *v20;
  int v21;
  int v22;
  uint64_t v23;
  llvm::Value **v24;
  llvm::Constant *v25;
  int v27;
  unint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  int v31;
  _DWORD *v32;
  _DWORD *v33;
  int v34;
  int v35;
  int v36;

  v7 = (int)a2;
  LShr = this;
  v9 = *(_QWORD **)*this;
  if (*((_DWORD *)*this + 2) == 15
    && *(_DWORD *)(a3 + 8) == 15
    && (*(_DWORD *)(a3 + 8) ^ *((_DWORD *)*this + 2)) < 0x100)
  {
    return sub_1C5FDAE60((uint64_t)LShr, a3, a4);
  }
  sub_1C4768AD0((uint64_t)a4, (uint64_t)*this);
  v11 = v10 + 7;
  sub_1C4768AD0((uint64_t)a4, a3);
  v14 = v13 + 7;
  v15 = *LShr;
  v16 = *((_DWORD *)*LShr + 2);
  v17 = v16;
  if ((*((_DWORD *)*LShr + 2) & 0xFE) == 0x12)
    v17 = *(unsigned __int8 *)(**((_QWORD **)v15 + 2) + 8);
  v18 = v11 >> 3;
  v19 = v14 >> 3;
  if (v17 == 15)
  {
    llvm::DataLayout::getIntPtrType(a4, v15);
    LShr = (llvm::ConstantInt **)sub_1C537D3B8((llvm *)0x2F, (uint64_t)LShr, v20, 0);
    v16 = *((unsigned __int8 *)*LShr + 8);
  }
  if (v16 != 13)
  {
    v21 = v11 & 0xFFFFFFF8;
    v35 = v11 & 0xFFFFFFF8;
    if ((int)(v11 & 0xFFFFFFF8) <= 63)
    {
      switch(v21)
      {
        case 32:
          v12 = (llvm::ConstantInt *)(*v9 + 1960);
          goto LABEL_16;
        case 16:
          v12 = (llvm::ConstantInt *)(*v9 + 1936);
          goto LABEL_16;
        case 8:
          v12 = (llvm::ConstantInt *)(*v9 + 1912);
LABEL_16:
          if (*LShr != v12)
            LShr = (llvm::ConstantInt **)sub_1C537D3B8((llvm *)0x31, (uint64_t)LShr, v12, 0);
          goto LABEL_18;
      }
    }
    else
    {
      if (v21 == 64)
      {
        v12 = (llvm::ConstantInt *)(*v9 + 1984);
        goto LABEL_16;
      }
      if (v21 == 128)
      {
        v12 = (llvm::ConstantInt *)(*v9 + 2008);
        goto LABEL_16;
      }
    }
    v29 = sub_1C5270984(*v9 + 2168, &v35);
    v12 = (llvm::ConstantInt *)*((_QWORD *)v29 + 1);
    if (!v12)
    {
      v30 = v29;
      v12 = (llvm::ConstantInt *)sub_1C484358C(*v9 + 2040, 24, 3);
      v31 = v35;
      *(_QWORD *)v12 = v9;
      *((_QWORD *)v12 + 2) = 0;
      *((_QWORD *)v12 + 1) = (v31 << 8) | 0xDu;
      *((_QWORD *)v30 + 1) = v12;
    }
    goto LABEL_16;
  }
LABEL_18:
  if (*(_BYTE *)a4)
    v22 = v18 - (v19 + v7);
  else
    v22 = v7;
  v23 = (8 * v22);
  if ((_DWORD)v23)
  {
    v24 = llvm::ConstantInt::get(*LShr, v23, 0);
    LShr = (llvm::ConstantInt **)llvm::ConstantExpr::getLShr((llvm::ConstantExpr *)LShr, (llvm::Constant *)v24, 0, v25);
  }
  if (v19 != v18)
  {
    v27 = v14 & 0xFFFFFFF8;
    v36 = v14 & 0xFFFFFFF8;
    if ((int)(v14 & 0xFFFFFFF8) <= 63)
    {
      switch(v27)
      {
        case 32:
          v28 = *v9 + 1960;
          goto LABEL_36;
        case 16:
          v28 = *v9 + 1936;
          goto LABEL_36;
        case 8:
          v28 = *v9 + 1912;
          goto LABEL_36;
      }
    }
    else
    {
      if (v27 == 64)
      {
        v28 = *v9 + 1984;
LABEL_36:
        LShr = (llvm::ConstantInt **)llvm::ConstantExpr::getTruncOrBitCast(LShr, (llvm::Type ***)v28, v12);
        return sub_1C5FDAE60((uint64_t)LShr, a3, a4);
      }
      if (v27 == 128)
      {
        v28 = *v9 + 2008;
        goto LABEL_36;
      }
    }
    v32 = sub_1C5270984(*v9 + 2168, &v36);
    v28 = *((_QWORD *)v32 + 1);
    if (!v28)
    {
      v33 = v32;
      v28 = sub_1C484358C(*v9 + 2040, 24, 3);
      v34 = v36;
      *(_QWORD *)v28 = v9;
      *(_QWORD *)(v28 + 16) = 0;
      *(_QWORD *)(v28 + 8) = (v34 << 8) | 0xDu;
      *((_QWORD *)v33 + 1) = v28;
    }
    goto LABEL_36;
  }
  return sub_1C5FDAE60((uint64_t)LShr, a3, a4);
}

llvm::UndefValue *sub_1C5FDAE60(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  uint64_t LShr;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Type *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  llvm::Constant *v16;
  int v17;
  llvm::Constant *v18;
  llvm::Constant *v19;
  int v20;
  int v22;
  int v23;
  llvm::Constant *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  llvm::Value **v29;
  llvm::Constant *v30;
  _QWORD *v31;
  unint64_t v32;
  int v33;
  int v34;
  _DWORD *v35;
  _DWORD *v36;
  int v37;
  _DWORD *v38;
  _DWORD *v39;
  int v40;
  int v41;
  int v42;

  if (a1)
    LShr = (uint64_t)llvm::ConstantFoldConstant(a1, a3, 0);
  else
    LShr = 0;
  v6 = *(_QWORD *)LShr;
  sub_1C4768AD0((uint64_t)a3, *(_QWORD *)LShr);
  v8 = v7;
  sub_1C4768AD0((uint64_t)a3, a2);
  v11 = *(_DWORD *)(v6 + 8);
  v12 = *(_DWORD *)(v6 + 8) & 0xFE;
  if (v8 != v9)
  {
    v22 = v9;
    v23 = *(_DWORD *)(v6 + 8);
    if (v12 == 18)
      v23 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
    if (v23 == 15)
    {
      llvm::DataLayout::getIntPtrType(a3, (llvm::Type *)v6);
      v6 = (uint64_t)v24;
      LShr = (uint64_t)sub_1C537D3B8((llvm *)0x2F, LShr, v24, 0);
      v11 = *(unsigned __int8 *)(v6 + 8);
    }
    if (v11 == 13)
    {
LABEL_50:
      if (*(_BYTE *)a3)
      {
        sub_1C4768AD0((uint64_t)a3, v6);
        v27 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
        sub_1C4768AD0((uint64_t)a3, a2);
        v29 = llvm::ConstantInt::get(*(llvm::ConstantInt **)LShr, v27 - ((v28 + 7) & 0xFFFFFFFFFFFFFFF8), 0);
        LShr = llvm::ConstantExpr::getLShr((llvm::ConstantExpr *)LShr, (llvm::Constant *)v29, 0, v30);
      }
      v31 = *(_QWORD **)v6;
      v42 = v22;
      if (v22 <= 63)
      {
        if (v22 <= 31)
        {
          switch(v22)
          {
            case 16:
              v32 = *v31 + 1936;
              goto LABEL_60;
            case 8:
              v32 = *v31 + 1912;
              goto LABEL_60;
            case 1:
              v32 = *v31 + 1888;
              goto LABEL_60;
          }
        }
        else if (v22 == 32)
        {
          v32 = *v31 + 1960;
          goto LABEL_60;
        }
      }
      else
      {
        if (v22 == 64)
        {
          v32 = *v31 + 1984;
          goto LABEL_60;
        }
        if (v22 == 128)
        {
          v32 = *v31 + 2008;
          goto LABEL_60;
        }
      }
      v35 = sub_1C5270984(*v31 + 2168, &v42);
      v32 = *((_QWORD *)v35 + 1);
      if (!v32)
      {
        v36 = v35;
        v32 = sub_1C484358C(*v31 + 2040, 24, 3);
        v37 = v42;
        *(_QWORD *)v32 = v31;
        *(_QWORD *)(v32 + 16) = 0;
        *(_QWORD *)(v32 + 8) = (v37 << 8) | 0xDu;
        *((_QWORD *)v36 + 1) = v32;
      }
LABEL_60:
      LShr = (uint64_t)llvm::ConstantExpr::getTruncOrBitCast((llvm::Type **)LShr, (llvm::Type ***)v32, v10);
      if (v32 != a2)
      {
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
          v33 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8);
        else
          v33 = *(_DWORD *)(a2 + 8);
        if (v33 == 15)
          v34 = 48;
        else
          v34 = 49;
        LShr = llvm::ConstantExpr::getCast(v34);
      }
      if (LShr)
        return llvm::ConstantFoldConstant(LShr, a3, 0);
      return (llvm::UndefValue *)LShr;
    }
    v25 = *(_QWORD **)v6;
    v41 = v8;
    if ((int)v8 <= 63)
    {
      if ((int)v8 <= 31)
      {
        switch((_DWORD)v8)
        {
          case 0x10:
            v6 = *v25 + 1936;
            break;
          case 8:
            v6 = *v25 + 1912;
            break;
          case 1:
            v6 = *v25 + 1888;
            break;
          default:
            goto LABEL_84;
        }
LABEL_48:
        if (*(_QWORD *)LShr != v6)
          LShr = (uint64_t)sub_1C537D3B8((llvm *)0x31, LShr, (llvm::Constant *)v6, 0);
        goto LABEL_50;
      }
      if ((_DWORD)v8 == 32)
      {
        v6 = *v25 + 1960;
        goto LABEL_48;
      }
    }
    else
    {
      if ((_DWORD)v8 == 64)
      {
        v6 = *v25 + 1984;
        goto LABEL_48;
      }
      if ((_DWORD)v8 == 128)
      {
        v6 = *v25 + 2008;
        goto LABEL_48;
      }
    }
LABEL_84:
    v38 = sub_1C5270984(*v25 + 2168, &v41);
    v6 = *((_QWORD *)v38 + 1);
    if (!v6)
    {
      v39 = v38;
      v6 = sub_1C484358C(*v25 + 2040, 24, 3);
      v40 = v41;
      *(_QWORD *)v6 = v25;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 8) = (v40 << 8) | 0xDu;
      *((_QWORD *)v39 + 1) = v6;
    }
    goto LABEL_48;
  }
  v13 = *(_DWORD *)(v6 + 8);
  if (v12 == 18)
    v13 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
  if (v13 == 15
    && ((*(_DWORD *)(a2 + 8) & 0xFE) != 0x12
      ? (v14 = *(_DWORD *)(a2 + 8))
      : (v14 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8)),
        v14 == 15))
  {
    if (*(_QWORD *)LShr != a2)
    {
      v15 = 49;
LABEL_31:
      LShr = (uint64_t)sub_1C537D3B8((llvm *)v15, LShr, (llvm::Constant *)a2, 0);
    }
  }
  else
  {
    if (v12 == 18)
      v11 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
    if (v11 == 15)
    {
      llvm::DataLayout::getIntPtrType(a3, (llvm::Type *)v6);
      v6 = (uint64_t)v16;
      LShr = (uint64_t)sub_1C537D3B8((llvm *)0x2F, LShr, v16, 0);
    }
    if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
      v17 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8);
    else
      v17 = *(_DWORD *)(a2 + 8);
    v18 = (llvm::Constant *)a2;
    if (v17 == 15)
    {
      llvm::DataLayout::getIntPtrType(a3, (llvm::Type *)a2);
      v18 = v19;
    }
    if ((llvm::Constant *)v6 != v18 && *(llvm::Constant **)LShr != v18)
      LShr = (uint64_t)sub_1C537D3B8((llvm *)0x31, LShr, v18, 0);
    if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
      v20 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8);
    else
      v20 = *(_DWORD *)(a2 + 8);
    if (v20 == 15)
    {
      v15 = 48;
      goto LABEL_31;
    }
  }
  if (LShr && *(_BYTE *)(LShr + 16) == 5)
    return llvm::ConstantFoldConstant(LShr, a3, 0);
  return (llvm::UndefValue *)LShr;
}

llvm::UndefValue *llvm::VNCoercion::getLoadValueForLoad(llvm::VNCoercion *this, llvm::LoadInst *a2, _QWORD *a3, llvm::Type *a4, llvm::Instruction *a5, const llvm::DataLayout *a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const llvm::DataLayout *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  int v22;
  llvm::PointerType *v23;
  llvm::VNCoercion *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  char v30;
  char v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  llvm::Value **v38;
  uint64_t v39;
  unsigned __int8 *v40;
  char *v42;
  char *v43;
  unsigned __int8 **v44;
  int v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  _DWORD *v49;
  _DWORD *v50;
  int v51;
  int v52;
  int v53;
  _BYTE v54[32];
  __int16 v55;
  unsigned __int8 *v56;
  _DWORD v57[8];
  __int16 v58;
  unsigned __int8 *v59;
  void *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  sub_1C4768AD0((uint64_t)a5, *(_QWORD *)this);
  v12 = (unint64_t)(v11 + 7) >> 3;
  sub_1C4768AD0((uint64_t)a5, (uint64_t)a3);
  v15 = ((unint64_t)(v13 + 7) >> 3) + a2;
  if (v15 <= v12)
  {
    v24 = this;
    return llvm::VNCoercion::getStoreValueForLoad(v24, a2, (uint64_t)a3, a4, a5, v14);
  }
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = (v17 >> 16) | v17;
  if ((v15 & ((_DWORD)v15 - 1)) != 0)
    v19 = v18 + 1;
  else
    v19 = ((unint64_t)(v13 + 7) >> 3) + (_DWORD)a2;
  v20 = (unsigned __int8 *)*((_QWORD *)this - 4);
  sub_1C4D8ADA0((uint64_t)&v60, *((uint64_t ***)this + 5), *((_QWORD *)this + 4), 0, 0, 0);
  v21 = (_QWORD *)*a3;
  v22 = 8 * v19;
  v57[0] = 8 * v19;
  v53 = v12;
  v52 = v19;
  if (8 * v19 <= 63)
  {
    switch(v22)
    {
      case 32:
        v23 = (llvm::PointerType *)(*v21 + 1960);
        goto LABEL_13;
      case 16:
        v23 = (llvm::PointerType *)(*v21 + 1936);
        goto LABEL_13;
      case 8:
        v23 = (llvm::PointerType *)(*v21 + 1912);
        goto LABEL_13;
    }
  }
  else
  {
    if (v22 == 64)
    {
      v23 = (llvm::PointerType *)(*v21 + 1984);
      goto LABEL_13;
    }
    if (v22 == 128)
    {
      v23 = (llvm::PointerType *)(*v21 + 2008);
      goto LABEL_13;
    }
  }
  v49 = sub_1C5270984(*v21 + 2168, v57);
  v23 = (llvm::PointerType *)*((_QWORD *)v49 + 1);
  if (!v23)
  {
    v50 = v49;
    v23 = (llvm::PointerType *)sub_1C484358C(*v21 + 2040, 24, 3);
    v51 = v57[0];
    *(_QWORD *)v23 = v21;
    *((_QWORD *)v23 + 2) = 0;
    *((_QWORD *)v23 + 1) = (v51 << 8) | 0xDu;
    *((_QWORD *)v50 + 1) = v23;
  }
LABEL_13:
  v25 = *(_DWORD *)(*(_QWORD *)v20 + 8);
  if ((v25 & 0xFE) == 0x12)
    v25 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v20 + 16) + 8);
  v26 = llvm::PointerType::get(v23, (llvm::Type *)(v25 >> 8));
  v27 = (unsigned __int8 *)*((_QWORD *)this + 6);
  v56 = v27;
  if (v27)
  {
    llvm::MetadataTracking::track((uint64_t)&v56, v27, 2);
    v28 = v56;
  }
  else
  {
    v28 = 0;
  }
  sub_1C4774EF4((uint64_t)&v60, 0, (uint64_t)v28);
  if (v56)
    llvm::MetadataTracking::untrack((uint64_t)&v56, v56);
  v58 = 257;
  v29 = sub_1C4773E38((uint64_t *)&v60, 49, v20, v26, (uint64_t)v57);
  v55 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v63 + 56) + 40) + 272, (uint64_t)v23);
  v31 = v30;
  v32 = (char *)operator new(0x60uLL);
  v33 = v32;
  v24 = (llvm::VNCoercion *)(v32 + 32);
  *((_QWORD *)v32 + 2) = 0;
  *((_QWORD *)v32 + 3) = v32 + 32;
  v58 = 257;
  *((_QWORD *)v32 + 4) = v23;
  *((_QWORD *)v32 + 5) = 0;
  *((_WORD *)v32 + 24) = 60;
  *((_DWORD *)v32 + 13) = 1;
  *(_OWORD *)(v32 + 56) = 0u;
  *(_OWORD *)(v32 + 72) = 0u;
  *((_DWORD *)v32 + 22) = 0;
  *(_QWORD *)v32 = v29;
  *((_QWORD *)v32 + 1) = 0;
  if (v29)
  {
    v36 = *((_QWORD *)v29 + 1);
    v35 = v29 + 8;
    v34 = v36;
    *((_QWORD *)v32 + 1) = v36;
    if (v36)
      *(_QWORD *)(v34 + 16) = v32 + 8;
    *((_QWORD *)v32 + 2) = v35;
    *v35 = v32;
  }
  *((_WORD *)v32 + 25) = 2 * (v31 & 0x3F);
  v32[92] = 1;
  llvm::Value::setName((uint64_t ***)v32 + 4, (uint64_t)v57);
  (*(void (**)(uint64_t, llvm::VNCoercion *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v65 + 16))(v65, v24, v54, v63, v64);
  if (v61)
  {
    v42 = (char *)v60;
    v43 = (char *)v60 + 16 * v61;
    v44 = (unsigned __int8 **)(v33 + 80);
    do
    {
      v45 = *(_DWORD *)v42;
      v46 = (unsigned __int8 *)*((_QWORD *)v42 + 1);
      if (v46)
      {
        if (!v45)
        {
          v59 = (unsigned __int8 *)*((_QWORD *)v42 + 1);
          llvm::MetadataTracking::track((uint64_t)&v59, v46, 2);
          v47 = *v44;
          goto LABEL_41;
        }
      }
      else
      {
        v47 = *v44;
        if (!*v44 && (v33[55] & 0x20) == 0)
          goto LABEL_38;
        if (!v45)
        {
          v59 = 0;
LABEL_41:
          if (v47)
            llvm::MetadataTracking::untrack((uint64_t)(v33 + 80), v47);
          v48 = v59;
          *v44 = v59;
          if (v48)
            llvm::MetadataTracking::retrack((uint64_t)&v59, v48, (uint64_t)(v33 + 80));
          goto LABEL_38;
        }
      }
      llvm::Value::setMetadata(v24, *(_DWORD *)v42, (llvm::MDNode *)v46);
LABEL_38:
      v42 += 16;
    }
    while (v42 != v43);
  }
  llvm::Value::takeName(v24, this);
  *((_WORD *)v33 + 25) = *((_WORD *)v33 + 25) & 0xFF81 | (2
                                                        * __clz(1 << ((unint64_t)*((unsigned __int16 *)this + 9) >> 1))) ^ 0x7E;
  v37 = (unsigned __int8 *)v24;
  if (*(_BYTE *)a5)
  {
    v58 = 257;
    v38 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v24, (8 * (v52 - v53)), 0);
    v37 = (unsigned __int8 *)sub_1C506ED1C((uint64_t)&v60, (uint64_t)v24, (uint64_t)v38, (uint64_t)v57, 0);
  }
  v39 = *(_QWORD *)this;
  v58 = 257;
  v40 = sub_1C4773E38((uint64_t *)&v60, 38, v37, v39, (uint64_t)v57);
  llvm::Value::doRAUW(this, (llvm::Value *)v40, (llvm::Value *)1);
  a2 = (llvm::LoadInst *)a2;
  if (v60 != &v62)
    free(v60);
  return llvm::VNCoercion::getStoreValueForLoad(v24, a2, (uint64_t)a3, a4, a5, v14);
}

llvm::UndefValue *sub_1C5FDB818(uint64_t a1, unsigned int a2, _QWORD *a3, uint64_t *a4, llvm::Type *a5)
{
  _QWORD *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t *v16;
  unsigned int IndexTypeSizeInBits;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  unsigned __int8 *v23;
  int v24;
  unint64_t v25;
  llvm::ConstantInt *v26;
  llvm::Value **v27;
  uint64_t v28;
  llvm::Value **v29;
  uint64_t v30;
  _DWORD *v32;
  _DWORD *v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  _DWORD v37[8];
  __int16 v38;

  v10 = (_QWORD *)*a3;
  sub_1C4768AD0((uint64_t)a5, (uint64_t)a3);
  v12 = *(unsigned __int8 **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
  if (a1 && *(_DWORD *)(*(_QWORD *)(a1 - 32) + 36) == 199)
  {
    v13 = v11 >> 3;
    if (v11 >> 3 == 1)
      return sub_1C5FDA5C8((uint64_t)v12, (uint64_t)a3, a4, a5);
    v14 = v11 & 0xFFFFFFF8;
    v37[0] = v11 & 0xFFFFFFF8;
    if ((int)(v11 & 0xFFFFFFF8) <= 63)
    {
      switch(v14)
      {
        case 32:
          v15 = (_QWORD *)(*v10 + 1960);
          goto LABEL_18;
        case 16:
          v15 = (_QWORD *)(*v10 + 1936);
          goto LABEL_18;
        case 8:
          v15 = (_QWORD *)(*v10 + 1912);
LABEL_18:
          v38 = 257;
          v23 = sub_1C509CA90(a4, v12, (uint64_t)v15, (uint64_t)v37);
          v24 = 1;
          v12 = v23;
          do
          {
            v25 = (2 * v24);
            v26 = *(llvm::ConstantInt **)v12;
            if (v13 >= v25)
            {
              v29 = llvm::ConstantInt::get(v26, (8 * v24), 0);
              v38 = 257;
              v30 = sub_1C506E874((uint64_t)a4, (uint64_t)v12, (uint64_t)v29, (uint64_t)v37, 0, 0);
              v38 = 257;
              v12 = (unsigned __int8 *)sub_1C4773594((uint64_t)a4, v12, v30, (uint64_t)v37);
            }
            else
            {
              v27 = llvm::ConstantInt::get(v26, 8, 0);
              v38 = 257;
              v28 = sub_1C506E874((uint64_t)a4, (uint64_t)v12, (uint64_t)v27, (uint64_t)v37, 0, 0);
              v38 = 257;
              v12 = (unsigned __int8 *)sub_1C4773594((uint64_t)a4, v23, v28, (uint64_t)v37);
              v25 = (v24 + 1);
            }
            v24 = v25;
          }
          while (v13 != v25);
          return sub_1C5FDA5C8((uint64_t)v12, (uint64_t)a3, a4, a5);
      }
    }
    else
    {
      if (v14 == 64)
      {
        v15 = (_QWORD *)(*v10 + 1984);
        goto LABEL_18;
      }
      if (v14 == 128)
      {
        v15 = (_QWORD *)(*v10 + 2008);
        goto LABEL_18;
      }
    }
    v32 = sub_1C5270984(*v10 + 2168, v37);
    v15 = (_QWORD *)*((_QWORD *)v32 + 1);
    if (!v15)
    {
      v33 = v32;
      v15 = (_QWORD *)sub_1C484358C(*v10 + 2040, 24, 3);
      v34 = v37[0];
      *v15 = v10;
      v15[2] = 0;
      v15[1] = (v34 << 8) | 0xDu;
      *((_QWORD *)v33 + 1) = v15;
    }
    goto LABEL_18;
  }
  v16 = (uint64_t *)llvm::Value::stripPointerCasts((llvm::Value *)v12);
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a5, *v16);
  v36 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v35, a2, 0);
  }
  else
  {
    v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
    if (!IndexTypeSizeInBits)
      LODWORD(v21) = 0;
    v35 = v21 & a2;
  }
  v22 = llvm::ConstantFoldLoadFromConstPtr((uint64_t)v16, (uint64_t)a3, (const void **)&v35, a5, v18, v19, v20);
  if (v36 >= 0x41 && v35)
    MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
  return (llvm::UndefValue *)v22;
}

llvm::UndefValue *llvm::VNCoercion::getConstantMemInstValueForLoad(uint64_t a1, unsigned int a2, _QWORD *a3, llvm::Type *a4)
{
  void *v5;

  if (a1
    && *(_DWORD *)(*(_QWORD *)(a1 - 32) + 36) == 199
    && *(unsigned __int8 *)(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32) + 16) > 0x14u)
  {
    return 0;
  }
  v5 = &unk_1E8167888;
  return sub_1C5FDBB68(a1, a2, a3, (uint64_t)&v5, a4);
}

llvm::UndefValue *sub_1C5FDBB68(uint64_t a1, unsigned int a2, _QWORD *a3, uint64_t a4, llvm::Type *a5)
{
  _QWORD *v9;
  unint64_t v10;
  llvm::Type *v11;
  llvm::Type **v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  unsigned int IndexTypeSizeInBits;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  llvm::UndefValue *ZExtOrBitCast;
  int v25;
  unint64_t v26;
  llvm::ConstantInt *v27;
  llvm::Value **v28;
  llvm::Constant *v29;
  llvm::Constant *v30;
  llvm::Constant *v31;
  llvm::Value **v32;
  llvm::Constant *Shl;
  llvm::Constant *v34;
  llvm::Constant *v35;
  _DWORD *v36;
  _DWORD *v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  int v41;

  v9 = (_QWORD *)*a3;
  sub_1C4768AD0((uint64_t)a5, (uint64_t)a3);
  v12 = *(llvm::Type ***)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
  if (a1 && *(_DWORD *)(*(_QWORD *)(a1 - 32) + 36) == 199)
  {
    v13 = v10 >> 3;
    if (v10 >> 3 == 1)
      return sub_1C5FDAE60((uint64_t)v12, (uint64_t)a3, a5);
    v14 = v10 & 0xFFFFFFF8;
    v41 = v10 & 0xFFFFFFF8;
    if ((int)(v10 & 0xFFFFFFF8) <= 63)
    {
      switch(v14)
      {
        case 32:
          v15 = *v9 + 1960;
          goto LABEL_19;
        case 16:
          v15 = *v9 + 1936;
          goto LABEL_19;
        case 8:
          v15 = *v9 + 1912;
LABEL_19:
          ZExtOrBitCast = llvm::ConstantExpr::getZExtOrBitCast(v12, (llvm::Type ***)v15, v11);
          v25 = 1;
          v12 = (llvm::Type **)ZExtOrBitCast;
          do
          {
            v26 = (2 * v25);
            v27 = *v12;
            if (v13 >= v26)
            {
              v32 = llvm::ConstantInt::get(v27, (8 * v25), 0);
              Shl = llvm::ConstantExpr::getShl((llvm::ConstantExpr *)v12, (llvm::Constant *)v32, 0, 0);
              v12 = (llvm::Type **)llvm::ConstantExpr::getOr((llvm::ConstantExpr *)v12, Shl, v34, v35);
            }
            else
            {
              v28 = llvm::ConstantInt::get(v27, 8, 0);
              v29 = llvm::ConstantExpr::getShl((llvm::ConstantExpr *)v12, (llvm::Constant *)v28, 0, 0);
              v12 = (llvm::Type **)llvm::ConstantExpr::getOr(ZExtOrBitCast, v29, v30, v31);
              v26 = (v25 + 1);
            }
            v25 = v26;
          }
          while (v13 != v26);
          return sub_1C5FDAE60((uint64_t)v12, (uint64_t)a3, a5);
      }
    }
    else
    {
      if (v14 == 64)
      {
        v15 = *v9 + 1984;
        goto LABEL_19;
      }
      if (v14 == 128)
      {
        v15 = *v9 + 2008;
        goto LABEL_19;
      }
    }
    v36 = sub_1C5270984(*v9 + 2168, &v41);
    v15 = *((_QWORD *)v36 + 1);
    if (!v15)
    {
      v37 = v36;
      v15 = sub_1C484358C(*v9 + 2040, 24, 3);
      v38 = v41;
      *(_QWORD *)v15 = v9;
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)(v15 + 8) = (v38 << 8) | 0xDu;
      *((_QWORD *)v37 + 1) = v15;
    }
    goto LABEL_19;
  }
  v16 = (uint64_t *)llvm::Value::stripPointerCasts((llvm::Value *)v12);
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a5, *v16);
  v40 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v39, a2, 0);
  }
  else
  {
    v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
    if (!IndexTypeSizeInBits)
      LODWORD(v21) = 0;
    v39 = v21 & a2;
  }
  v22 = llvm::ConstantFoldLoadFromConstPtr((uint64_t)v16, (uint64_t)a3, (const void **)&v39, a5, v18, v19, v20);
  if (v40 >= 0x41 && v39)
    MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
  return (llvm::UndefValue *)v22;
}

const char *llvm::archToDevDivInternalArch(int a1)
{
  if (a1 > 40)
  {
    if (a1 != 41)
    {
      if (a1 == 42)
        return "amd64";
      return "";
    }
    return "i386";
  }
  else
  {
    if (a1 != 1)
    {
      if (a1 == 3)
        return "arm64";
      return "";
    }
    return "arm";
  }
}

uint64_t llvm::appendArchToWindowsSDKLibPath(int a1, const void **a2, int a3, uint64_t a4)
{
  const char *v6;
  char v8;
  size_t v9;
  const void *v10;
  __int128 *p_dst;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  __int16 v15;
  _QWORD *v16;
  __int16 v17;
  _QWORD *v18;
  __int16 v19;
  __int128 __dst;
  unint64_t v21;
  __int16 v22;

  if (a1 >= 8)
  {
    if (a3 > 40)
    {
      if (a3 == 41)
      {
        v6 = "x86";
        goto LABEL_16;
      }
      if (a3 == 42)
      {
        v6 = "x64";
        goto LABEL_16;
      }
    }
    else
    {
      if (a3 == 1)
      {
        v6 = "arm";
        goto LABEL_16;
      }
      if (a3 == 3)
      {
        v6 = "arm64";
LABEL_16:
        v8 = 1;
        HIBYTE(v22) = 1;
        if (*v6)
        {
          *(_QWORD *)&__dst = v6;
          v8 = 3;
        }
        LOBYTE(v22) = v8;
        goto LABEL_19;
      }
    }
    v6 = "";
    goto LABEL_16;
  }
  if (a3 == 41)
    goto LABEL_20;
  if (a3 != 42)
    return 0;
  *(_QWORD *)&__dst = "x64";
  v22 = 259;
LABEL_19:
  v19 = 257;
  v17 = 257;
  v15 = 257;
  llvm::sys::path::append(a2, 0, (_QWORD **)&__dst, &v18, &v16, &v14);
LABEL_20:
  v9 = (size_t)a2[1];
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v10 = *a2;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&__dst + 1) = v9;
    v21 = v13 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v21) = v9;
    p_dst = &__dst;
    if (!v9)
      goto LABEL_28;
  }
  memmove(p_dst, v10, v9);
LABEL_28:
  *((_BYTE *)p_dst + v9) = 0;
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = __dst;
  *(_QWORD *)(a4 + 16) = v21;
  return 1;
}

void llvm::getSubDirectoryPath(int a1@<W0>, int a2@<W1>, const void **a3@<X2>, int a4@<W3>, void *a5@<X4>, void *a6@<X5>, _QWORD *a7@<X8>)
{
  const char *v12;
  const char *v13;
  char v14;
  BOOL v15;
  const void *v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  size_t v20;
  _QWORD *v21;
  int v22;
  const char *v23;
  char v24;
  char v25;
  const char *v26;
  char v27;
  char v28;
  size_t v29;
  void *v30;
  size_t v31;
  size_t v32;
  _QWORD *v33;
  void *__p[2];
  char v35;
  int v36;
  __int16 v37;
  void **v38[4];
  __int16 v39;
  void *v40[2];
  char v41;
  __int16 v42;
  _QWORD *v43[4];
  __int16 v44;
  void *__src;
  size_t __len[2];
  _QWORD v47[34];

  v47[32] = *MEMORY[0x1E0C80C00];
  if (a2 == 2)
  {
    if (a4 > 40)
    {
      if (a4 == 41)
      {
        v12 = "i386";
        goto LABEL_28;
      }
      if (a4 == 42)
      {
        v12 = "amd64";
        goto LABEL_28;
      }
    }
    else
    {
      if (a4 == 1)
      {
        v12 = "arm";
        goto LABEL_28;
      }
      if (a4 == 3)
      {
        v12 = "arm64";
LABEL_28:
        v13 = "inc";
        goto LABEL_31;
      }
    }
    v12 = "";
    goto LABEL_28;
  }
  if (a2 == 1)
  {
    if (a4 > 40)
    {
      if (a4 == 41)
      {
        v12 = "x86";
        goto LABEL_30;
      }
      if (a4 == 42)
      {
        v12 = "x64";
        goto LABEL_30;
      }
LABEL_24:
      v12 = "";
      goto LABEL_30;
    }
    if (a4 != 1)
    {
      if (a4 != 3)
        goto LABEL_24;
LABEL_15:
      v12 = "arm64";
      goto LABEL_30;
    }
LABEL_23:
    v12 = "arm";
    goto LABEL_30;
  }
  if (a2)
  {
    v13 = 0;
    v12 = 0;
    goto LABEL_31;
  }
  if (a4 == 1)
    goto LABEL_23;
  if (a4 == 3)
    goto LABEL_15;
  if (a4 != 42)
    goto LABEL_24;
  v12 = "amd64";
LABEL_30:
  v13 = "include";
LABEL_31:
  v14 = *((_BYTE *)a3 + 23);
  v15 = v14 < 0;
  if (v14 >= 0)
    v16 = a3;
  else
    v16 = *a3;
  v17 = v14 & 0x7F;
  if (v15)
    v18 = (unint64_t)a3[1];
  else
    v18 = v17;
  __src = v47;
  *(_OWORD *)__len = xmmword_1C64638F0;
  if (v18 >= 0x101)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v47, v18, 1);
    v21 = __src;
    v19 = __len[0];
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = v47;
    if (!v18)
      goto LABEL_40;
  }
  memcpy((char *)v21 + v19, v16, v18);
  v20 = __len[0];
LABEL_40:
  __len[0] = v20 + v18;
  if (a6)
  {
    v37 = 261;
    __p[0] = a5;
    __p[1] = a6;
    v44 = 257;
    v42 = 257;
    v39 = 257;
    llvm::sys::path::append(&__src, 0, (_QWORD **)__p, v43, (_QWORD **)v40, v38);
  }
  if (a1 == 2)
  {
    v26 = "lib";
  }
  else
  {
    if (a1 == 1)
    {
      v27 = 1;
      HIBYTE(v37) = 1;
      if (*v13)
      {
        __p[0] = (void *)v13;
        v27 = 3;
      }
      LOBYTE(v37) = v27;
      v44 = 257;
      goto LABEL_62;
    }
    if (a1)
      goto LABEL_64;
    if (a2 == 1)
    {
      llvm::sys::getProcessTriple((uint64_t)v40);
      v44 = 260;
      v43[0] = v40;
      llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v43);
      v22 = v36;
      if (v35 < 0)
        operator delete(__p[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      v23 = "Hostx64";
      if (v22 != 42)
        v23 = "Hostx86";
      __p[0] = "bin";
      v37 = 259;
      v24 = 1;
      HIBYTE(v44) = 1;
      if (*v23)
      {
        v43[0] = v23;
        v25 = 3;
      }
      else
      {
        v25 = 1;
      }
      LOBYTE(v44) = v25;
      HIBYTE(v42) = 1;
      if (*v12)
      {
        v40[0] = (void *)v12;
        v24 = 3;
      }
      LOBYTE(v42) = v24;
      goto LABEL_63;
    }
    v26 = "bin";
  }
  __p[0] = (void *)v26;
  v37 = 259;
  v28 = 1;
  HIBYTE(v44) = 1;
  if (*v12)
  {
    v43[0] = v12;
    v28 = 3;
  }
  LOBYTE(v44) = v28;
LABEL_62:
  v42 = 257;
LABEL_63:
  v39 = 257;
  llvm::sys::path::append(&__src, 0, (_QWORD **)__p, v43, (_QWORD **)v40, v38);
LABEL_64:
  v29 = __len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v30 = __src;
  if (__len[0] >= 0x17)
  {
    v31 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17)
      v31 = __len[0] | 7;
    v32 = v31 + 1;
    v33 = operator new(v31 + 1);
    a7[1] = v29;
    a7[2] = v32 | 0x8000000000000000;
    *a7 = v33;
    a7 = v33;
    goto LABEL_71;
  }
  *((_BYTE *)a7 + 23) = __len[0];
  if (v29)
LABEL_71:
    memmove(a7, v30, v29);
  *((_BYTE *)a7 + v29) = 0;
  if (__src != v47)
    free(__src);
}

uint64_t llvm::useUniversalCRT(int a1, const void **a2, int a3, uint64_t a4)
{
  int v5;
  char *v6;
  const char **v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void **v14;
  __int16 v15;
  _QWORD *v16;
  __int16 v17;
  _QWORD *v18;
  __int16 v19;
  const char *v20;
  unint64_t v21;
  char v22;
  __int16 v23;
  void *v24;
  __int128 v25;
  _QWORD v26[17];

  v26[16] = *MEMORY[0x1E0C80C00];
  llvm::getSubDirectoryPath(1, a1, a2, a3, "", 0, &v20);
  v5 = v22;
  v6 = (char *)v20;
  if (v22 >= 0)
    v7 = &v20;
  else
    v7 = (const char **)v20;
  if (v22 >= 0)
    v8 = v22 & 0x7F;
  else
    v8 = v21;
  v9 = v26;
  v24 = v26;
  v25 = xmmword_1C85F20B0;
  if (v8 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v24, v26, v8, 1);
    v9 = v24;
    v10 = v25;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    if (!v8)
      goto LABEL_10;
  }
  memcpy((char *)v9 + v10, v7, v8);
  v11 = v25;
LABEL_10:
  *(_QWORD *)&v25 = v11 + v8;
  if (v5 < 0)
    operator delete(v6);
  v20 = "stdlib.h";
  v23 = 259;
  v19 = 257;
  v17 = 257;
  v15 = 257;
  llvm::sys::path::append(&v24, 0, (_QWORD **)&v20, &v18, &v16, &v14);
  v23 = 261;
  v20 = (const char *)v24;
  v21 = v25;
  v12 = (*(uint64_t (**)(uint64_t, const char **))(*(_QWORD *)a4 + 72))(a4, &v20);
  if (v24 != v26)
    free(v24);
  return v12 ^ 1u;
}

uint64_t llvm::getWindowsSDKDir(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, _DWORD *a6, const std::string *a7, std::string *a8)
{
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v16 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  v14 = *a3;
  v15 = *((_QWORD *)a3 + 2);
  v12 = *a4;
  v13 = *((_QWORD *)a4 + 2);
  v10 = sub_1C5FDC678(a1, (uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, a5, a6, (uint64_t)a7);
  if ((_DWORD)v10)
    std::string::operator=(a8, a7);
  return v10;
}

uint64_t sub_1C5FDC678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  unint64_t v13;
  const void *v14;
  char *v15;
  const void *v16;
  size_t v17;
  void *v18;
  _BYTE *v19;
  const void *v20;
  __int128 *p_dst;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char v27;
  BOOL v28;
  const void *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *__p[2];
  char v40;
  unint64_t v41;
  uint64_t v42;
  void **v43[4];
  __int16 v44;
  _QWORD *v45[4];
  __int16 v46;
  _QWORD *v47[4];
  __int16 v48;
  __int128 __dst;
  unint64_t v50;
  __int16 v51;
  void *__src[3];
  _QWORD v53[19];

  v53[16] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 16) && !*(_BYTE *)(a4 + 16))
    return 0;
  v41 = 0;
  v42 = 0;
  if (*(_BYTE *)(a3 + 16))
    llvm::VersionTuple::tryParse(&v41, *(unsigned __int8 **)a3, *(_QWORD *)(a3 + 8));
  if (*(_BYTE *)(a4 + 16))
  {
    v14 = *(const void **)a4;
    v13 = *(_QWORD *)(a4 + 8);
    __src[0] = v53;
    *(_OWORD *)&__src[1] = xmmword_1C85F20B0;
    if (v13 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__src, v53, v13, 1);
      v15 = (char *)__src[1];
    }
    else
    {
      v15 = 0;
      if (!v13)
        goto LABEL_9;
    }
    memcpy((char *)__src[0] + (unint64_t)v15, v14, v13);
    v15 = (char *)__src[1];
LABEL_9:
    __src[1] = &v15[v13];
    *(_QWORD *)&__dst = "Windows Kits";
    v51 = 259;
    v48 = 257;
    v46 = 257;
    v44 = 257;
    llvm::sys::path::append(__src, 0, (_QWORD **)&__dst, v47, v45, v43);
    if (v41 & 0x7FFFFFFFFFFFFFFFLL | v42 & 0x7FFFFFFF7FFFFFFFLL)
    {
      v51 = 264;
      LODWORD(__dst) = v41;
      v48 = 257;
      v46 = 257;
      v44 = 257;
      llvm::sys::path::append(__src, 0, (_QWORD **)&__dst, v47, v45, v43);
    }
    else
    {
      sub_1C5FDCF10((uint64_t)__p, a1, __src[0], __src[1]);
      v51 = 260;
      *(_QWORD *)&__dst = __p;
      v48 = 257;
      v46 = 257;
      v44 = 257;
      llvm::sys::path::append(__src, 0, (_QWORD **)&__dst, v47, v45, v43);
      if (v40 < 0)
        operator delete(__p[0]);
    }
    v19 = __src[1];
    if (__src[1] <= (void *)0x7FFFFFFFFFFFFFF7)
    {
      v20 = __src[0];
      if (__src[1] >= (void *)0x17)
      {
        v22 = ((unint64_t)__src[1] & 0xFFFFFFFFFFFFFFF8) + 8;
        if (((unint64_t)__src[1] | 7) != 0x17)
          v22 = (unint64_t)__src[1] | 7;
        v23 = v22 + 1;
        p_dst = (__int128 *)operator new(v22 + 1);
        *((_QWORD *)&__dst + 1) = v19;
        v50 = v23 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v50) = __src[1];
        p_dst = &__dst;
        if (!__src[1])
          goto LABEL_26;
      }
      memmove(p_dst, v20, (size_t)v19);
LABEL_26:
      v19[(_QWORD)p_dst] = 0;
      if (*(char *)(a5 + 23) < 0)
        operator delete(*(void **)a5);
      *(_OWORD *)a5 = __dst;
      *(_QWORD *)(a5 + 16) = v50;
      if (__src[0] != v53)
        free(__src[0]);
      goto LABEL_40;
    }
LABEL_65:
    abort();
  }
  v16 = *(const void **)a2;
  if (*(_QWORD *)a2)
  {
    v17 = *(_QWORD *)(a2 + 8);
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_65;
    if (v17 >= 0x17)
    {
      v25 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v25 = v17 | 7;
      v26 = v25 + 1;
      v18 = operator new(v25 + 1);
      __src[1] = (void *)v17;
      __src[2] = (void *)(v26 | 0x8000000000000000);
      __src[0] = v18;
    }
    else
    {
      HIBYTE(__src[2]) = v17;
      v18 = __src;
      if (!v17)
        goto LABEL_36;
    }
    memmove(v18, v16, v17);
LABEL_36:
    *((_BYTE *)v18 + v17) = 0;
    goto LABEL_37;
  }
  memset(__src, 0, sizeof(__src));
LABEL_37:
  if (*(char *)(a5 + 23) < 0)
    operator delete(*(void **)a5);
  *(_OWORD *)a5 = *(_OWORD *)__src;
  *(void **)(a5 + 16) = __src[2];
LABEL_40:
  if (!(v41 & 0x7FFFFFFFFFFFFFFFLL | v42 & 0x7FFFFFFF7FFFFFFFLL))
  {
    v27 = *(_BYTE *)(a5 + 23);
    v28 = v27 < 0;
    if (v27 >= 0)
      v29 = (const void *)a5;
    else
      v29 = *(const void **)a5;
    v30 = v27 & 0x7F;
    if (v28)
      v31 = *(_QWORD *)(a5 + 8);
    else
      v31 = v30;
    __src[0] = v53;
    *(_OWORD *)&__src[1] = xmmword_1C85F20B0;
    if (v31 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__src, v53, v31, 1);
      v34 = __src[0];
      v32 = (char *)__src[1];
    }
    else
    {
      v32 = 0;
      v33 = 0;
      v34 = v53;
      if (!v31)
      {
LABEL_53:
        __src[1] = &v33[v31];
        *(_QWORD *)&__dst = "Include";
        v51 = 259;
        v48 = 257;
        v46 = 257;
        v44 = 257;
        llvm::sys::path::append(__src, 0, (_QWORD **)&__dst, v47, v45, v43);
        sub_1C5FDCF10((uint64_t)&__dst, a1, __src[0], __src[1]);
        if (*(char *)(a7 + 23) < 0)
          operator delete(*(void **)a7);
        *(_OWORD *)a7 = __dst;
        v35 = v50;
        *(_QWORD *)(a7 + 16) = v50;
        v36 = HIBYTE(v35);
        v37 = *(_QWORD *)(a7 + 8);
        if (__src[0] != v53)
          free(__src[0]);
        if ((v36 & 0x80u) == 0)
          v38 = v36 & 0x7F;
        else
          v38 = v37;
        if (v38)
          *a6 = 10;
        return 1;
      }
    }
    memcpy(&v32[(_QWORD)v34], v29, v31);
    v33 = (char *)__src[1];
    goto LABEL_53;
  }
  *a6 = v41;
  llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v41, __src);
  if (*(char *)(a7 + 23) < 0)
    operator delete(*(void **)a7);
  *(_OWORD *)a7 = *(_OWORD *)__src;
  *(void **)(a7 + 16) = __src[2];
  return 1;
}

uint64_t llvm::findVCToolChainViaCommandLine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  const void *v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  const void *v14;
  size_t v15;
  const void *v16;
  size_t v17;
  __int128 *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  const void *v23;
  __int128 *p_dst;
  size_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *__p[2];
  unint64_t v30;
  void **v31[4];
  __int16 v32;
  _QWORD *v33[4];
  __int16 v34;
  _QWORD *v35[4];
  __int16 v36;
  __int128 __dst;
  unint64_t v38;
  __int16 v39;
  size_t __len[3];
  _QWORD v41[17];

  v41[16] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 16))
  {
    if (!*(_BYTE *)(a4 + 16))
      return 0;
LABEL_9:
    v14 = *(const void **)a4;
    v13 = *(_QWORD *)(a4 + 8);
    __len[0] = (size_t)v41;
    *(_OWORD *)&__len[1] = xmmword_1C85F20B0;
    if (v13 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__len, v41, v13, 1);
      v15 = __len[1];
    }
    else
    {
      v15 = 0;
      if (!v13)
        goto LABEL_12;
    }
    memcpy((void *)(__len[0] + v15), v14, v13);
    v15 = __len[1];
LABEL_12:
    __len[1] = v15 + v13;
    *(_QWORD *)&__dst = "VC";
    v39 = 259;
    v35[0] = "Tools";
    v36 = 259;
    v33[0] = "MSVC";
    v34 = 259;
    v32 = 257;
    llvm::sys::path::append(__len, 0, (_QWORD **)&__dst, v35, v33, v31);
    __p[0] = 0;
    __p[1] = 0;
    v30 = 0;
    if (!*(_BYTE *)(a3 + 16))
    {
      sub_1C5FDCF10((uint64_t)__p, a1, (void *)__len[0], (void *)__len[1]);
      goto LABEL_28;
    }
    v16 = *(const void **)a3;
    if (!*(_QWORD *)a3)
    {
      __dst = 0uLL;
      v38 = 0;
LABEL_27:
      *(_OWORD *)__p = __dst;
      v30 = v38;
LABEL_28:
      v39 = 260;
      *(_QWORD *)&__dst = __p;
      v36 = 257;
      v34 = 257;
      v32 = 257;
      llvm::sys::path::append(__len, 0, (_QWORD **)&__dst, v35, v33, v31);
      v22 = __len[1];
      if (__len[1] > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_53;
      v23 = (const void *)__len[0];
      if (__len[1] >= 0x17)
      {
        v25 = (__len[1] & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len[1] | 7) != 0x17)
          v25 = __len[1] | 7;
        v26 = v25 + 1;
        p_dst = (__int128 *)operator new(v25 + 1);
        *((_QWORD *)&__dst + 1) = v22;
        v38 = v26 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v38) = __len[1];
        p_dst = &__dst;
        if (!__len[1])
          goto LABEL_36;
      }
      memmove(p_dst, v23, v22);
LABEL_36:
      *((_BYTE *)p_dst + v22) = 0;
      if (*(char *)(a5 + 23) < 0)
        operator delete(*(void **)a5);
      *(_OWORD *)a5 = __dst;
      *(_QWORD *)(a5 + 16) = v38;
      if (SHIBYTE(v30) < 0)
        operator delete(__p[0]);
      if ((_QWORD *)__len[0] != v41)
        free((void *)__len[0]);
      goto LABEL_51;
    }
    v17 = *(_QWORD *)(a3 + 8);
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_53;
    if (v17 >= 0x17)
    {
      v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v20 = v17 | 7;
      v21 = v20 + 1;
      v18 = (__int128 *)operator new(v20 + 1);
      *((_QWORD *)&__dst + 1) = v17;
      v38 = v21 | 0x8000000000000000;
      *(_QWORD *)&__dst = v18;
    }
    else
    {
      HIBYTE(v38) = v17;
      v18 = &__dst;
      if (!v17)
      {
LABEL_25:
        *((_BYTE *)v18 + v17) = 0;
        if (SHIBYTE(v30) < 0)
          operator delete(__p[0]);
        goto LABEL_27;
      }
    }
    memmove(v18, v16, v17);
    goto LABEL_25;
  }
  if (*(_BYTE *)(a4 + 16))
    goto LABEL_9;
  v10 = *(const void **)a2;
  if (*(_QWORD *)a2)
  {
    v11 = *(_QWORD *)(a2 + 8);
    if (v11 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v11 >= 0x17)
      {
        v27 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v27 = v11 | 7;
        v28 = v27 + 1;
        v12 = operator new(v27 + 1);
        __len[1] = v11;
        __len[2] = v28 | 0x8000000000000000;
        __len[0] = (size_t)v12;
      }
      else
      {
        HIBYTE(__len[2]) = *(_QWORD *)(a2 + 8);
        v12 = __len;
        if (!v11)
          goto LABEL_47;
      }
      memmove(v12, v10, v11);
LABEL_47:
      *((_BYTE *)v12 + v11) = 0;
      goto LABEL_48;
    }
LABEL_53:
    abort();
  }
  memset(__len, 0, sizeof(__len));
LABEL_48:
  if (*(char *)(a5 + 23) < 0)
    operator delete(*(void **)a5);
  *(_OWORD *)a5 = *(_OWORD *)__len;
  *(_QWORD *)(a5 + 16) = __len[2];
LABEL_51:
  result = 1;
  *a6 = 1;
  return result;
}

void sub_1C5FDCF10(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  unsigned __int8 *v23;
  __int128 *p_dst;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _QWORD v35[2];
  __int128 v36;
  __int128 __dst;
  unsigned __int8 *v38;
  size_t v39;
  uint64_t v40;
  int v41;
  void *__p[2];
  char v43;
  __int16 v44;
  int v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v36 = 0uLL;
  LODWORD(v35[0]) = 0;
  v35[1] = std::system_category();
  v44 = 261;
  __p[0] = a3;
  __p[1] = a4;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, _QWORD *))(*(_QWORD *)a2 + 32))(&v33, a2, __p, v35);
  v31 = 0;
  v32 = 0;
  if (LODWORD(v35[0]))
    goto LABEL_2;
  while (!sub_1C5DF3038(&v33, &v31))
  {
    v11 = *(_QWORD *)(v33 + 8);
    v12 = *(_BYTE *)(v33 + 31);
    v13 = v12;
    if (v12 >= 0)
      v11 = v33 + 8;
    v14 = *(_QWORD *)(v33 + 16);
    v15 = v12 & 0x7F;
    if (v13 >= 0)
      v14 = v15;
    LOWORD(v40) = 261;
    *(_QWORD *)&__dst = v11;
    *((_QWORD *)&__dst + 1) = v14;
    (*(void (**)(void **__return_ptr, uint64_t, __int128 *))(*(_QWORD *)a2 + 16))(__p, a2, &__dst);
    v16 = v46;
    if ((v46 & 1) != 0 || v45 != 3)
      goto LABEL_36;
    v17 = *(_QWORD *)(v33 + 8);
    v18 = *(_BYTE *)(v33 + 31);
    v19 = v18;
    if (v18 >= 0)
      v17 = v33 + 8;
    v20 = *(_QWORD *)(v33 + 16);
    v21 = v18 & 0x7F;
    if (v19 >= 0)
      v20 = v21;
    v38 = 0;
    v39 = 0;
    *(_QWORD *)&__dst = v17;
    *((_QWORD *)&__dst + 1) = v20;
    v40 = v20;
    v41 = 0;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)&__dst);
    v23 = v38;
    v22 = v39;
    v30 = 0uLL;
    if ((llvm::VersionTuple::tryParse((unint64_t *)&v30, v38, v39) & 1) == 0
      && sub_1C4F7A4D8(&v36, &v30))
    {
      v36 = v30;
      if (v23)
      {
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v22 >= 0x17)
        {
          v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17)
            v25 = v22 | 7;
          v26 = v25 + 1;
          p_dst = (__int128 *)operator new(v25 + 1);
          *((_QWORD *)&__dst + 1) = v22;
          v38 = (unsigned __int8 *)(v26 | 0x8000000000000000);
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v38) = v22;
          p_dst = &__dst;
          if (!v22)
          {
LABEL_31:
            *((_BYTE *)p_dst + v22) = 0;
            goto LABEL_32;
          }
        }
        memmove(p_dst, v23, v22);
        goto LABEL_31;
      }
      __dst = 0uLL;
      v38 = 0;
LABEL_32:
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      *(_OWORD *)a1 = __dst;
      *(_QWORD *)(a1 + 16) = v38;
    }
    v16 = v46;
LABEL_36:
    if ((v16 & 1) == 0 && v43 < 0)
      operator delete(__p[0]);
    sub_1C5DF267C(&v33, v35);
    if (LODWORD(v35[0]))
      break;
  }
  v27 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
LABEL_2:
  v8 = v34;
  if (v34)
  {
    v9 = (unint64_t *)&v34->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

BOOL llvm::findVCToolChainViaEnvironment(uint64_t a1, uint64_t a2, int *a3)
{
  _BOOL8 result;
  void **v7;
  void *v8;
  void **v9;
  void **v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  __int128 *v24;
  int v25;
  int v26;
  unint64_t v27;
  size_t v28;
  size_t v29;
  __int128 *p_dst;
  char *v31;
  unint64_t v32;
  __int128 *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__src;
  void *__srca;
  unint64_t __srcb;
  __int128 *__srcc;
  void **v44;
  _QWORD *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  void **v51[4];
  __int16 v52;
  __int128 v53;
  unint64_t v54;
  __int16 v55;
  void *__p[2];
  char v57;
  char v58;
  __int128 __dst;
  unsigned __int8 *v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  _BYTE v64[24];
  _BYTE v65[256];
  void **v66;
  uint64_t v67;
  _QWORD v68[18];

  v68[16] = *MEMORY[0x1E0C80C00];
  llvm::sys::Process::GetEnv("VCToolsInstallDir", 0x11uLL, (uint64_t)v64);
  if (v65[0])
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)v64;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&v64[16];
    result = 1;
    *a3 = 1;
    return result;
  }
  llvm::sys::Process::GetEnv("VCINSTALLDIR", 0xCuLL, (uint64_t)v64);
  if (v65[0])
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)v64;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&v64[16];
    *a3 = 0;
    return 1;
  }
  llvm::sys::Process::GetEnv("PATH", 4uLL, (uint64_t)__p);
  if (!v58)
    goto LABEL_115;
  v66 = (void **)v68;
  v67 = 0x800000000;
  v7 = (void **)__p[0];
  if (v57 >= 0)
    v7 = __p;
  v8 = (void *)(v57 & 0x7F);
  if (v57 < 0)
    v8 = __p[1];
  *(_QWORD *)v64 = v7;
  *(_QWORD *)&v64[8] = v8;
  llvm::StringRef::split(v64, (uint64_t)&v66, 58, -1, 1);
  v9 = v66;
  if (!(_DWORD)v67)
  {
    v25 = 0;
    goto LABEL_112;
  }
  v10 = &v66[2 * v67];
  v44 = v10;
  do
  {
    v11 = (unint64_t)v9[1];
    if (!v11)
      goto LABEL_81;
    v12 = *v9;
    *(_QWORD *)v64 = v65;
    *(_OWORD *)&v64[8] = xmmword_1C64638F0;
    if (v11 >= 0x101)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v64, v65, v11, 1);
      v13 = *(_QWORD *)&v64[8];
      v14 = *(_BYTE **)v64;
    }
    else
    {
      v13 = 0;
      v14 = v65;
    }
    memcpy(&v14[v13], v12, v11);
    *(_QWORD *)&v64[8] += v11;
    *(_QWORD *)&__dst = "cl.exe";
    LOWORD(v62) = 259;
    LOWORD(v49) = 257;
    v55 = 257;
    v52 = 257;
    llvm::sys::path::append(v64, 0, (_QWORD **)&__dst, &v45, (_QWORD **)&v53, v51);
    LOWORD(v62) = 261;
    __dst = *(_OWORD *)v64;
    if (!(*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, &__dst))
      goto LABEL_77;
    v15 = 0;
    *(_QWORD *)&v64[8] = 0;
    if (*(_QWORD *)&v64[16] < v11)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v64, v65, v11, 1);
      v15 = *(_QWORD *)&v64[8];
    }
    memcpy((void *)(*(_QWORD *)v64 + v15), v12, v11);
    *(_QWORD *)&v64[8] += v11;
    *(_QWORD *)&__dst = "link.exe";
    LOWORD(v62) = 259;
    LOWORD(v49) = 257;
    v55 = 257;
    v52 = 257;
    llvm::sys::path::append(v64, 0, (_QWORD **)&__dst, &v45, (_QWORD **)&v53, v51);
    LOWORD(v62) = 261;
    __dst = *(_OWORD *)v64;
    if (!(*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, &__dst))
    {
LABEL_77:
      v25 = 3;
      v26 = 1;
      goto LABEL_78;
    }
    v60 = 0;
    v61 = 0;
    *(_QWORD *)&__dst = v12;
    *((_QWORD *)&__dst + 1) = v11;
    v62 = v11;
    v63 = 0;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)&__dst);
    v45 = v60;
    v46 = v61;
    if (v61 == 3 && !llvm::StringRef::compare_insensitive((unsigned __int8 **)&v45, "bin", 3uLL))
      goto LABEL_56;
    v16 = sub_1C5E7BE8C((unsigned __int8 *)v12, v11, 0);
    if (v11 >= v16)
      v17 = v16;
    else
      v17 = v11;
    v60 = 0;
    v61 = 0;
    if (v16 == -1)
      v18 = 0;
    else
      v18 = v17;
    if (v16 == -1)
      v19 = 0;
    else
      v19 = v12;
    *(_QWORD *)&__dst = v19;
    *((_QWORD *)&__dst + 1) = v18;
    v62 = v18;
    v63 = 0;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)&__dst);
    v45 = v60;
    v46 = v61;
    if (v61 == 3 && !llvm::StringRef::compare_insensitive((unsigned __int8 **)&v45, "bin", 3uLL))
    {
      v12 = v19;
      v11 = v18;
      v10 = v44;
LABEL_56:
      v27 = sub_1C5E7BE8C((unsigned __int8 *)v12, v11, 0);
      if (v11 >= v27)
        v28 = v27;
      else
        v28 = v11;
      v60 = 0;
      v61 = 0;
      if (v27 == -1)
        v29 = 0;
      else
        v29 = v28;
      if (v27 == -1)
        v12 = 0;
      *(_QWORD *)&__dst = v12;
      *((_QWORD *)&__dst + 1) = v29;
      v62 = v29;
      v63 = 0;
      llvm::sys::path::reverse_iterator::operator++((uint64_t)&__dst);
      v45 = v60;
      v46 = v61;
      if (v61 == 8)
      {
        if (!llvm::StringRef::compare_insensitive((unsigned __int8 **)&v45, "amd64ret", 8uLL))
          goto LABEL_83;
        v31 = "amd64chk";
        v32 = 8;
      }
      else
      {
        if (v61 != 6)
        {
          if (v61 != 2 || llvm::StringRef::compare_insensitive((unsigned __int8 **)&v45, "VC", 2uLL))
            goto LABEL_77;
          if (v29 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_120;
          __src = v12;
          if (v29 >= 0x17)
          {
            v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v29 | 7) != 0x17)
              v37 = v29 | 7;
            v39 = v37 + 1;
            p_dst = (__int128 *)operator new(v37 + 1);
            *((_QWORD *)&__dst + 1) = v29;
            v60 = (unsigned __int8 *)(v39 | 0x8000000000000000);
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v60) = v29;
            p_dst = &__dst;
            if (!v29)
              goto LABEL_105;
          }
          memmove(p_dst, __src, v29);
LABEL_105:
          *((_BYTE *)p_dst + v29) = 0;
          if (*(char *)(a2 + 23) < 0)
            operator delete(*(void **)a2);
          v35 = 0;
          *(_OWORD *)a2 = __dst;
          *(_QWORD *)(a2 + 16) = v60;
LABEL_108:
          v26 = 0;
          *a3 = v35;
          v25 = 1;
          goto LABEL_78;
        }
        if (!llvm::StringRef::compare_insensitive((unsigned __int8 **)&v45, "x86ret", 6uLL))
        {
LABEL_83:
          if (v29 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_120;
          __srca = v12;
          if (v29 >= 0x17)
          {
            v34 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v29 | 7) != 0x17)
              v34 = v29 | 7;
            v38 = v34 + 1;
            v33 = (__int128 *)operator new(v34 + 1);
            *((_QWORD *)&__dst + 1) = v29;
            v60 = (unsigned __int8 *)(v38 | 0x8000000000000000);
            *(_QWORD *)&__dst = v33;
          }
          else
          {
            HIBYTE(v60) = v29;
            v33 = &__dst;
            if (!v29)
              goto LABEL_91;
          }
          memmove(v33, __srca, v29);
LABEL_91:
          *((_BYTE *)v33 + v29) = 0;
          if (*(char *)(a2 + 23) < 0)
            operator delete(*(void **)a2);
          *(_OWORD *)a2 = __dst;
          *(_QWORD *)(a2 + 16) = v60;
          v35 = 2;
          goto LABEL_108;
        }
        v31 = "x86chk";
        v32 = 6;
      }
      if (llvm::StringRef::compare_insensitive((unsigned __int8 **)&v45, (unsigned __int8 *)v31, v32))
        goto LABEL_77;
      goto LABEL_83;
    }
    v60 = 0;
    v61 = 0;
    *(_QWORD *)&__dst = v12;
    *((_QWORD *)&__dst + 1) = v11;
    v62 = v11;
    v63 = 0;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)&__dst);
    v20 = 0;
    v50 = 0;
    v45 = v12;
    v46 = v11;
    v47 = v12;
    v48 = 0;
    v49 = 0;
    do
    {
      if (llvm::sys::path::reverse_iterator::operator==((uint64_t)&__dst, (uint64_t)&v45)
        || !llvm::StringRef::startswith_insensitive(&v60, *(unsigned __int8 **)((char *)&off_1E81AA898 + v20), *(_QWORD *)((char *)&off_1E81AA898 + v20 + 8)))
      {
        v25 = 3;
        v26 = 1;
        v10 = v44;
        goto LABEL_78;
      }
      llvm::sys::path::reverse_iterator::operator++((uint64_t)&__dst);
      v20 += 16;
    }
    while (v20 != 112);
    v21 = 3;
    do
    {
      v22 = sub_1C5E7BE8C((unsigned __int8 *)v12, v11, 0);
      if (v11 >= v22)
        v23 = v22;
      else
        v23 = v11;
      if (v22 == -1)
        v11 = 0;
      else
        v11 = v23;
      if (v22 == -1)
        v12 = 0;
      --v21;
    }
    while (v21);
    if (v11 > 0x7FFFFFFFFFFFFFF7)
LABEL_120:
      abort();
    v10 = v44;
    if (v11 >= 0x17)
    {
      v36 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v36 = v11 | 7;
      __srcb = v36 + 1;
      v24 = (__int128 *)operator new(v36 + 1);
      *((_QWORD *)&v53 + 1) = v11;
      v54 = __srcb | 0x8000000000000000;
      *(_QWORD *)&v53 = v24;
LABEL_97:
      __srcc = v24;
      memmove(v24, v12, v11);
      v24 = __srcc;
      goto LABEL_98;
    }
    HIBYTE(v54) = v11;
    v24 = &v53;
    if (v11)
      goto LABEL_97;
LABEL_98:
    *((_BYTE *)v24 + v11) = 0;
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v26 = 0;
    *(_OWORD *)a2 = v53;
    *(_QWORD *)(a2 + 16) = v54;
    v25 = 1;
    *a3 = 1;
LABEL_78:
    if (*(_BYTE **)v64 != v65)
      free(*(void **)v64);
    if (!v26)
      goto LABEL_110;
LABEL_81:
    v9 += 2;
  }
  while (v9 != v10);
  v25 = 0;
LABEL_110:
  v9 = v66;
LABEL_112:
  if (v9 != v68)
    free(v9);
  if (!v25)
LABEL_115:
    v25 = 0;
  if (v58 && v57 < 0)
    operator delete(__p[0]);
  return v25 != 0;
}

uint64_t llvm::findVCToolChainViaRegistry()
{
  return 0;
}

uint64_t sub_1C5FDD9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  *(_QWORD *)a1 = off_1E81AA918;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_QWORD *)(a1 + 64) = a5;
  *(_QWORD *)(a1 + 72) = a6;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 104) = &unk_1E81A7208;
  *(_QWORD *)(a1 + 168) = a1 + 80;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  if ((_DWORD)a6)
    sub_1C5FDEA5C(v7, a6);
  return a1;
}

uint64_t sub_1C5FDDA80(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = **(unsigned int **)(a2 + 8);
  v3 = *(_QWORD *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(result + 24) - v3) >> 2) > v2 && *(_DWORD *)a2 == 4)
  {
    v5 = v3 + 12 * v2;
    if (!*(_BYTE *)(v5 + 4))
    {
      *(_DWORD *)v5 = *(_DWORD *)(result + 8);
      *(_BYTE *)(v5 + 4) = 1;
    }
    *(_DWORD *)(v3 + 12 * v2 + 8) = *(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_1C5FDDAE4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16) + 12 * **(unsigned int **)(a2 + 8);
  if (!*(_BYTE *)(v2 + 4))
  {
    *(_DWORD *)v2 = *(_DWORD *)(result + 8);
    *(_BYTE *)(v2 + 4) = 1;
  }
  return result;
}

llvm::raw_ostream *sub_1C5FDDB18(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  unint64_t v10;
  const char *v11;
  size_t v12;
  llvm::raw_ostream *v13;
  const char *v14;
  const char *v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t first_not_of;
  unint64_t v22;
  const void *v23;
  size_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t (**v29)(llvm::raw_ostream *);
  int v30;
  char *v31;
  _BYTE *v32;
  char *v33;
  char v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[2];

  v30 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 1;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v29 = &off_1E81A1100;
  v37 = 0;
  v38 = 0;
  v39 = &v41;
  v40 = xmmword_1C6612EF0;
  sub_1C4D685DC((uint64_t)&v29, a2);
  v3 = v33;
  if ((unint64_t)(v32 - v33) > 0x1A)
  {
    *(_OWORD *)v33 = *(_OWORD *)"\n\nAGXProfilerWeights view:\n";
    *(_OWORD *)(v3 + 11) = *(_OWORD *)"erWeights view:\n";
    v4 = v33 + 27;
    v33 += 27;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v29, "\n\nAGXProfilerWeights view:\n", 0x1BuLL);
    v4 = v33;
  }
  if (v4 != v31)
  {
    v33 = v31;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v29, v31, v4 - v31);
  }
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 64);
    v28 = v7 + 168 * v5;
    do
    {
      v8 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 12 * v6);
      v9 = v8[2] - *v8 + 1;
      sub_1C5E21910((llvm::raw_ostream *)&v29, v9, 0, 0, 0);
      llvm::formatted_raw_ostream::PadToColumn((llvm::formatted_raw_ostream *)&v29, 5);
      v10 = 8;
      do
      {
        if (v10 <= v9)
        {
          v11 = off_1E81AA9A0[v10];
          do
          {
            v12 = strlen(v11);
            if (v12 <= v32 - v33)
            {
              if (v12)
              {
                memcpy(v33, v11, v12);
                v33 += v12;
              }
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v29, v11, v12);
            }
            v9 -= v10;
          }
          while (v9 >= v10);
        }
        --v10;
      }
      while (v10);
      llvm::formatted_raw_ostream::PadToColumn((llvm::formatted_raw_ostream *)&v29, 20);
      if (v32 == v33)
      {
        v13 = llvm::raw_ostream::write((llvm::raw_ostream *)&v29, " ", 1uLL);
      }
      else
      {
        *v33++ = 32;
        v13 = (llvm::raw_ostream *)&v29;
      }
      MEMORY[0x1CAA32ABC](a1 + 80, "");
      (*(void (**)(_QWORD, uint64_t, _QWORD, const char *, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 48)
                                                                                             + 32))(*(_QWORD *)(a1 + 48), v7, 0, "", 0, *(_QWORD *)(a1 + 40), a1 + 104);
      v14 = *(const char **)(a1 + 136);
      v15 = *(const char **)(a1 + 120);
      if (v14 != v15)
      {
        *(_QWORD *)(a1 + 136) = v15;
        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)(a1 + 104), v15, v14 - v15);
      }
      v16 = *(_BYTE *)(a1 + 103);
      v17 = v16 < 0;
      if (v16 >= 0)
        v18 = a1 + 80;
      else
        v18 = *(_QWORD *)(a1 + 80);
      v19 = v16 & 0x7F;
      if (v17)
        v20 = *(_QWORD *)(a1 + 88);
      else
        v20 = v19;
      v42[0] = v18;
      v42[1] = v20;
      first_not_of = llvm::StringRef::find_first_not_of(v42, " \t\n\v\f\r", 6, 0);
      if (first_not_of >= v20)
        v22 = v20;
      else
        v22 = first_not_of;
      v23 = (const void *)(v18 + v22);
      v24 = v20 - v22;
      if (v20 - v22 <= *((_QWORD *)v13 + 3) - *((_QWORD *)v13 + 4))
      {
        if (v20 > first_not_of)
        {
          memcpy(*((void **)v13 + 4), v23, v24);
          *((_QWORD *)v13 + 4) += v24;
        }
      }
      else
      {
        v13 = llvm::raw_ostream::write(v13, (const char *)v23, v24);
      }
      v25 = (_BYTE *)*((_QWORD *)v13 + 4);
      if (*((_BYTE **)v13 + 3) == v25)
      {
        llvm::raw_ostream::write(v13, "\n", 1uLL);
      }
      else
      {
        *v25 = 10;
        ++*((_QWORD *)v13 + 4);
      }
      v26 = v33 - v31;
      if (v33 != v31)
      {
        v33 = v31;
        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v29, v31, v26);
      }
      v7 += 168;
      ++v6;
    }
    while (v7 != v28);
  }
  return sub_1C4D687F0((llvm::raw_ostream *)&v29);
}

void sub_1C5FDDE9C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  unsigned int v4;
  char *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  __n128 v15;
  char *v16;
  char *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  _QWORD *v21;
  _QWORD v22[3];
  void **v23;

  v2 = a1[9];
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = a1[8];
    v8 = v7 + 168 * v2;
    v21 = a1;
    do
    {
      v9 = (_DWORD *)(a1[2] + 12 * v4);
      v10 = (v9[2] - *v9 + 1);
      if (v3 >= v5)
      {
        v11 = (v3 - (char *)v6) >> 5;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 59)
          abort();
        if ((v5 - (char *)v6) >> 4 > v12)
          v12 = (v5 - (char *)v6) >> 4;
        if ((unint64_t)(v5 - (char *)v6) >= 0x7FFFFFFFFFFFFFE0)
          v13 = 0x7FFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13 >> 59)
          sub_1C4764EE4();
        v14 = (char *)operator new(32 * v13);
        v16 = v14;
        v17 = &v14[32 * v11];
        *(_WORD *)v17 = 3;
        *((_QWORD *)v17 + 1) = v10;
        if (v3 == (char *)v6)
        {
          v19 = (uint64_t)&v14[32 * v11];
        }
        else
        {
          v18 = (unsigned __int16 *)v3;
          v19 = (uint64_t)v17;
          do
          {
            v19 -= 32;
            v18 -= 16;
            v15 = llvm::json::Value::moveFrom(v19, v18, v15);
          }
          while (v18 != v6);
          do
          {
            v3 -= 32;
            llvm::json::Value::destroy((void **)v3);
          }
          while (v3 != (char *)v6);
        }
        v5 = &v16[32 * v13];
        v3 = v17 + 32;
        if (v6)
          operator delete(v6);
        v6 = (unsigned __int16 *)v19;
        a1 = v21;
      }
      else
      {
        *(_WORD *)v3 = 3;
        *((_QWORD *)v3 + 1) = v10;
        v3 += 32;
      }
      v7 += 168;
      ++v4;
    }
    while (v7 != v8);
  }
  else
  {
    v3 = 0;
    v6 = 0;
    v5 = 0;
  }
  *(_WORD *)a2 = 8;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v5;
  memset(v22, 0, sizeof(v22));
  v23 = (void **)v22;
  sub_1C4D66218(&v23);
}

uint64_t sub_1C5FDE058(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v91;
  int v92;
  uint64_t v93;
  unint64_t v95;

  v3 = *(_QWORD *)(a1 + 72);
  if (v3)
  {
    v4 = a1;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 64);
    v93 = v9 + 168 * v3;
    while (1)
    {
      v10 = (_DWORD *)(*(_QWORD *)(v4 + 16) + 12 * v5);
      v11 = v10[2] - *v10;
      v12 = v11 + 1;
      *(_BYTE *)(a2 + 70) = 1;
      v14 = *(_QWORD *)(a2 + 40);
      v13 = *(_QWORD *)(a2 + 48);
      v15 = *(_QWORD *)(a2 + 32);
      if (v11 != -1 || *(_BYTE *)(a2 + 80) != 0)
        break;
LABEL_17:
      v22 = sub_1C4D66580(a2, (unsigned __int16)v15 - (unsigned __int16)v13 + (unsigned __int16)v14);
      v23 = v22;
      if (v8 >= v6)
      {
        v25 = (v8 - v7) >> 2;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
          abort();
        if ((v6 - v7) >> 1 > v26)
          v26 = (v6 - v7) >> 1;
        if ((unint64_t)(v6 - v7) >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          if (v27 >> 62)
            sub_1C4764EE4();
          v28 = (char *)operator new(4 * v27);
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[4 * v25];
        *(_DWORD *)v29 = v23;
        v24 = v29 + 4;
        if (v8 == v7)
        {
          v4 = a1;
        }
        else
        {
          v4 = a1;
          do
          {
            v30 = *((_DWORD *)v8 - 1);
            v8 -= 4;
            *((_DWORD *)v29 - 1) = v30;
            v29 -= 4;
          }
          while (v8 != v7);
        }
        v6 = &v28[4 * v27];
        if (v7)
          operator delete(v7);
        v7 = v29;
      }
      else
      {
        *(_DWORD *)v8 = v22;
        v24 = v8 + 4;
        v4 = a1;
      }
      v9 += 168;
      ++v5;
      v8 = v24;
      if (v9 == v93)
        goto LABEL_41;
    }
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v17 = ((_BYTE)v13 - ((_BYTE)v15 + (_BYTE)v14)) & 3;
    v18 = *(_QWORD *)(a2 + 56);
    if (v13 - v18 < v17)
    {
      v92 = v11 + 1;
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v13 - ((_BYTE)v15 + (_BYTE)v14)) & 3);
      v12 = v92;
      *(_QWORD *)(a2 + 48) -= v17;
    }
    else
    {
      v19 = v13 - v17;
      *(_QWORD *)(a2 + 48) = v13 - v17;
      if ((((_BYTE)v13 - ((_BYTE)v15 + (_BYTE)v14)) & 3) == 0)
      {
LABEL_14:
        if ((unint64_t)(v19 - v18) <= 3)
        {
          v31 = v12;
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v12 = v31;
          v19 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v19 - 4) = v12;
        v21 = v19 - 4;
        *(_QWORD *)(a2 + 48) = v21;
        sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - v21 + *(_DWORD *)(a2 + 40));
        goto LABEL_17;
      }
    }
    v20 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v20++) = 0;
    while (v17 != v20);
    v19 = *(_QWORD *)(a2 + 48);
    v18 = *(_QWORD *)(a2 + 56);
    goto LABEL_14;
  }
  v24 = 0;
  v7 = 0;
LABEL_41:
  v32 = v24 - v7;
  if (v24 == v7)
    v33 = (char *)&unk_1C8677264;
  else
    v33 = v7;
  *(_BYTE *)(a2 + 70) = 1;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v34 = *(_QWORD *)(a2 + 48);
  v35 = ((_BYTE)v34 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v34 - *(_QWORD *)(a2 + 56) < v35)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v34 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v35;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v34 - v35;
    if (!v35)
      goto LABEL_52;
  }
  v36 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v36++) = 0;
  while (v35 != v36);
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
LABEL_52:
  v37 = *(_QWORD *)(a2 + 48);
  v38 = ((_BYTE)v37 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v37 - *(_QWORD *)(a2 + 56) < v38)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v37 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v38;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v37 - v38;
    if (!v38)
      goto LABEL_56;
  }
  v39 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v39++) = 0;
  while (v38 != v39);
LABEL_56:
  v40 = v7;
  if (v7 != v24)
  {
    v41 = v32 >> 2;
    do
    {
      --v41;
      v42 = *(_DWORD *)&v33[4 * v41];
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v43 = *(_QWORD *)(a2 + 32);
      v44 = *(_QWORD *)(a2 + 40);
      v45 = *(_QWORD *)(a2 + 48);
      v46 = ((int)v45 - ((int)v43 + (int)v44)) & 3;
      if (v45 - *(_QWORD *)(a2 + 56) < v46)
      {
        sub_1C4D663A4((uint64_t *)a2, ((int)v45 - ((int)v43 + (int)v44)) & 3);
        *(_QWORD *)(a2 + 48) -= v46;
      }
      else
      {
        v47 = v45 - v46;
        *(_QWORD *)(a2 + 48) = v47;
        if (!v46)
        {
          v48 = v43 + v44 - v47;
          goto LABEL_68;
        }
      }
      v49 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v49++) = 0;
      while (v46 != v49);
      v44 = *(_QWORD *)(a2 + 40);
      v47 = *(_QWORD *)(a2 + 48);
      v43 = *(_QWORD *)(a2 + 32);
      v48 = v43 - v47 + v44;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
LABEL_68:
      v50 = ((_BYTE)v47 - ((_BYTE)v43 + (_BYTE)v44)) & 3;
      v51 = *(_QWORD *)(a2 + 56);
      if (v47 - v51 < v50)
      {
        sub_1C4D663A4((uint64_t *)a2, v50);
        *(_QWORD *)(a2 + 48) -= v50;
LABEL_70:
        v53 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v53++) = 0;
        while (v50 != v53);
        v52 = *(_QWORD *)(a2 + 48);
        v51 = *(_QWORD *)(a2 + 56);
        goto LABEL_73;
      }
      v52 = v47 - v50;
      *(_QWORD *)(a2 + 48) = v47 - v50;
      if (v50)
        goto LABEL_70;
LABEL_73:
      if ((unint64_t)(v52 - v51) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v52 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v52 - 4) = v48 - v42 + 4;
      *(_QWORD *)(a2 + 48) = v52 - 4;
    }
    while (v41);
  }
  *(_BYTE *)(a2 + 70) = 0;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v55 = *(_QWORD *)(a2 + 48);
  v54 = *(_QWORD *)(a2 + 56);
  v56 = ((_BYTE)v55 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v55 - v54 < v56)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v55 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v56;
  }
  else
  {
    v57 = v55 - v56;
    *(_QWORD *)(a2 + 48) = v55 - v56;
    if (!v56)
      goto LABEL_85;
  }
  v58 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v58++) = 0;
  while (v56 != v58);
  v57 = *(_QWORD *)(a2 + 48);
  v54 = *(_QWORD *)(a2 + 56);
LABEL_85:
  if ((unint64_t)(v57 - v54) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v57 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v57 - 4) = (unint64_t)v32 >> 2;
  v59 = v57 - 4;
  *(_QWORD *)(a2 + 48) = v59;
  v60 = *(_QWORD *)(a2 + 32);
  v61 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a2 + 70) = 1;
  v62 = v60 - v59 + v61;
  if (v62)
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v63 = ((_BYTE)v59 - ((_BYTE)v60 + (_BYTE)v61)) & 3;
    if (v59 - *(_QWORD *)(a2 + 56) < v63)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v59 - ((_BYTE)v60 + (_BYTE)v61)) & 3);
      *(_QWORD *)(a2 + 48) -= v63;
    }
    else
    {
      v64 = v59 - v63;
      *(_QWORD *)(a2 + 48) = v64;
      if (!v63)
      {
LABEL_95:
        v66 = v61 - v64 + v60 - v62 + 4;
        if ((_DWORD)v61 - (_DWORD)v64 + (_DWORD)v60 - v62 == -4 && *(_BYTE *)(a2 + 80) == 0)
          goto LABEL_109;
        if (*(_QWORD *)(a2 + 72) <= 3uLL)
          *(_QWORD *)(a2 + 72) = 4;
        v68 = ((_BYTE)v64 - ((_BYTE)v60 + (_BYTE)v61)) & 3;
        v69 = *(_QWORD *)(a2 + 56);
        if (v64 - v69 < v68)
        {
          sub_1C4D663A4((uint64_t *)a2, v68);
          *(_QWORD *)(a2 + 48) -= v68;
        }
        else
        {
          v70 = v64 - v68;
          *(_QWORD *)(a2 + 48) = v64 - v68;
          if (!v68)
          {
LABEL_106:
            if ((unint64_t)(v70 - v69) <= 3)
            {
              sub_1C4D663A4((uint64_t *)a2, 4uLL);
              v70 = *(_QWORD *)(a2 + 48);
            }
            *(_DWORD *)(v70 - 4) = v66;
            v72 = v70 - 4;
            *(_QWORD *)(a2 + 48) = v72;
            sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - v72 + *(_DWORD *)(a2 + 40));
            goto LABEL_109;
          }
        }
        v71 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v71++) = 0;
        while (v68 != v71);
        v70 = *(_QWORD *)(a2 + 48);
        v69 = *(_QWORD *)(a2 + 56);
        goto LABEL_106;
      }
    }
    v65 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v65++) = 0;
    while (v63 != v65);
    v61 = *(_QWORD *)(a2 + 40);
    v64 = *(_QWORD *)(a2 + 48);
    v60 = *(_QWORD *)(a2 + 32);
    goto LABEL_95;
  }
LABEL_109:
  v73 = sub_1C4D66580(a2, v62);
  v74 = v73;
  *(_BYTE *)(a2 + 70) = 1;
  v75 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  if (*(_BYTE *)(a2 + 80))
  {
    v91 = sub_1C6174D80(a2, 0);
    sub_1C4D66288((uint64_t *)a2, 4, v91);
    if (!v74)
      goto LABEL_132;
  }
  else if (!v73)
  {
    goto LABEL_132;
  }
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v76 = *(_QWORD *)(a2 + 32);
  v77 = *(_QWORD *)(a2 + 40);
  v78 = *(_QWORD *)(a2 + 48);
  v79 = ((_BYTE)v78 - ((_BYTE)v76 + (_BYTE)v77)) & 3;
  if (v78 - *(_QWORD *)(a2 + 56) < v79)
  {
    v95 = ((_BYTE)v78 - ((_BYTE)v76 + (_BYTE)v77)) & 3;
    sub_1C4D663A4((uint64_t *)a2, v95);
    v79 = v95;
    *(_QWORD *)(a2 + 48) -= v95;
LABEL_115:
    v81 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v81++) = 0;
    while (v79 != v81);
    v77 = *(_QWORD *)(a2 + 40);
    v80 = *(_QWORD *)(a2 + 48);
    v76 = *(_QWORD *)(a2 + 32);
    goto LABEL_118;
  }
  v80 = v78 - v79;
  *(_QWORD *)(a2 + 48) = v80;
  if (v79)
    goto LABEL_115;
LABEL_118:
  v82 = v77 - v80 + v76 - v74 + 4;
  if ((_DWORD)v77 - (_DWORD)v80 + (_DWORD)v76 - v74 == -4 && *(_BYTE *)(a2 + 80) == 0)
    goto LABEL_132;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v84 = ((_BYTE)v80 - ((_BYTE)v76 + (_BYTE)v77)) & 3;
  v85 = *(_QWORD *)(a2 + 56);
  if (v80 - v85 < v84)
  {
    sub_1C4D663A4((uint64_t *)a2, v84);
    *(_QWORD *)(a2 + 48) -= v84;
LABEL_126:
    v87 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v87++) = 0;
    while (v84 != v87);
    v86 = *(_QWORD *)(a2 + 48);
    v85 = *(_QWORD *)(a2 + 56);
    goto LABEL_129;
  }
  v86 = v80 - v84;
  *(_QWORD *)(a2 + 48) = v80 - v84;
  if (v84)
    goto LABEL_126;
LABEL_129:
  if ((unint64_t)(v86 - v85) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v86 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v86 - 4) = v82;
  v88 = v86 - 4;
  *(_QWORD *)(a2 + 48) = v88;
  sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v88 + *(_DWORD *)(a2 + 40));
LABEL_132:
  v89 = sub_1C4D66580(a2, v75);
  if (v40)
    operator delete(v40);
  return v89 | 0x100000000;
}

uint64_t sub_1C5FDE91C(uint64_t result)
{
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1C5FDE92C(uint64_t a1)
{
  void *v2;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E81AA918;
  *(_QWORD *)(a1 + 104) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 160) == 1)
  {
    v4 = *(_QWORD *)(a1 + 120);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8077774924);
  }
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1C5FDE9B4(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E81AA918;
  *(_QWORD *)(a1 + 104) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 160) == 1)
  {
    v3 = *(_QWORD *)(a1 + 120);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8077774924);
  }
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5FDEA4C()
{
  return "AGXProfilerWeightsView";
}

void sub_1C5FDEA5C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 12 * ((12 * a2 - 12) / 0xC) + 12);
      v5 += 3 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1555555555555555)
        sub_1C4764EE4();
      v11 = (char *)operator new(12 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[12 * v7];
    v13 = &v11[12 * v10];
    v14 = 3 * a2;
    bzero(v12, 12 * ((4 * v14 - 12) / 0xCuLL) + 12);
    v15 = &v12[4 * v14];
    if (v5 != v6)
    {
      do
      {
        v16 = *(_QWORD *)(v5 - 3);
        v5 -= 3;
        v17 = v5[2];
        *(_QWORD *)(v12 - 12) = v16;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v17;
      }
      while (v5 != v6);
      v5 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v13;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_1C5FDEBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  *(_QWORD *)a1 = off_1E81AA9F8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 80) = &unk_1E81A7208;
  *(_QWORD *)(a1 + 144) = a1 + 56;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 168;
  *(_QWORD *)(a1 + 160) = 0x8000000000;
  *(_QWORD *)(a1 + 48296) = a1 + 48312;
  *(_QWORD *)(a1 + 48304) = 0x600000000;
  *(_DWORD *)(a1 + 48360) = 0;
  *(_QWORD *)(a1 + 48368) = a1 + 48384;
  *(_QWORD *)(a1 + 48376) = 0x600000000;
  *(_DWORD *)(a1 + 48432) = 0;
  sub_1C5FE1FAC(a1 + 152, a6);
  return a1;
}

_BYTE *sub_1C5FDECB0(_BYTE *result)
{
  _BYTE *v1;

  if (!result[48])
  {
    v1 = result;
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 152))(result);
    v1[48] = 1;
  }
  return result;
}

uint64_t sub_1C5FDECE8(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  unsigned __int16 *v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  unsigned __int16 *v42;
  int v43;
  int v44;
  uint64_t v45;
  const void **v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  void **v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  _BYTE v88[48];
  int v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a2 == 4)
  {
    v3 = (_QWORD *)result;
    v4 = result + 48296;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 168))(result);
    v5 = *(unsigned int **)(a2 + 8);
    v6 = *v5;
    v7 = v3[19];
    v8 = v7 + 376 * *v5;
    v9 = *(_DWORD *)(v4 + 136);
    v85 = *((_QWORD *)v5 + 1);
    v86 = v88;
    v87 = 0x600000000;
    sub_1C4765AA4((char *)&v86, (v9 + 63) >> 6, 0);
    v89 = v9;
    v10 = v8 + 16;
    v11 = v86;
    v84 = v8 + 16;
    if ((void **)(v8 + 16) == &v86)
      goto LABEL_10;
    if (v86 != v88)
    {
      if (*(_QWORD *)(v8 + 16) != v8 + 32)
      {
        free(*(void **)v10);
        v10 = v8 + 16;
        v11 = v86;
      }
      *(_QWORD *)v10 = v11;
      *(_QWORD *)(v10 + 8) = v87;
      v86 = v88;
      HIDWORD(v87) = 0;
      goto LABEL_9;
    }
    v12 = v87;
    v13 = *(unsigned int *)(v8 + 24);
    if (v13 >= v87)
    {
      if (!(_DWORD)v87)
      {
LABEL_8:
        *(_DWORD *)(v10 + 8) = v12;
LABEL_9:
        LODWORD(v87) = 0;
        v9 = v89;
        v11 = v86;
LABEL_10:
        v14 = v7 + 376 * v6;
        *(_DWORD *)(v14 + 80) = v9;
        v82 = (int *)(v14 + 80);
        if (v11 != v88)
          free(v11);
        v15 = *(_DWORD *)(v4 + 136);
        v86 = v88;
        v87 = 0x600000000;
        sub_1C4765AA4((char *)&v86, (v15 + 63) >> 6, 0);
        v89 = v15;
        v16 = v7 + 376 * v6;
        v17 = v16 + 88;
        v18 = v86;
        if ((void **)(v16 + 88) == &v86)
        {
LABEL_19:
          *(_DWORD *)(v7 + 376 * v6 + 152) = v15;
          if (v18 != v88)
            free(v18);
          v21 = *(_DWORD *)(v4 + 136);
          v86 = v88;
          v87 = 0x600000000;
          sub_1C4765AA4((char *)&v86, (v21 + 63) >> 6, 0);
          v89 = v21;
          v22 = v7 + 376 * v6;
          v23 = v22 + 160;
          v24 = v86;
          v83 = a2;
          if ((void **)(v22 + 160) == &v86)
          {
            v27 = v85;
LABEL_28:
            *(_DWORD *)(v7 + 376 * v6 + 224) = v21;
            if (v24 != v88)
              free(v24);
            v28 = *(_DWORD *)(v27 + 312);
            if (v28)
            {
              v29 = *(_QWORD *)(v85 + 304);
              v30 = v29 + 48 * v28;
              do
              {
                v31 = (_QWORD *)v3[3];
                v32 = v31[6];
                if (v32)
                {
                  v33 = *(unsigned __int16 *)(v29 + 8);
                  v34 = (unsigned __int16 *)(v32
                                           + 2 * *(unsigned int *)(*v31 + 24 * *(unsigned __int16 *)(v29 + 8) + 4));
                  do
                  {
                    (*(void (**)(_QWORD *, uint64_t, _QWORD))(*v3 + 136))(v3, v7 + 376 * v6, (unsigned __int16)v33);
                    v35 = *v34++;
                    v33 += v35;
                  }
                  while (v35);
                }
                v29 += 48;
              }
              while (v29 != v30);
            }
            v36 = *(_DWORD *)(v85 + 24);
            if (v36)
            {
              v37 = *(_QWORD *)(v85 + 16);
              v38 = v37 + 136 * v36;
              do
              {
                v39 = (_QWORD *)v3[3];
                v40 = v39[6];
                if (v40)
                {
                  v41 = *(unsigned __int16 *)(v37 + 12);
                  v42 = (unsigned __int16 *)(v40
                                           + 2 * *(unsigned int *)(*v39 + 24 * *(unsigned __int16 *)(v37 + 12) + 4));
                  do
                  {
                    (*(void (**)(_QWORD *, uint64_t, _QWORD))(*v3 + 144))(v3, v7 + 376 * v6, (unsigned __int16)v41);
                    v43 = *v42++;
                    v41 += v43;
                  }
                  while (v43);
                }
                v37 += 136;
              }
              while (v37 != v38);
            }
            v44 = *v82;
            v45 = v8 + 16;
            if (*(_DWORD *)(v4 + 64) < *v82)
            {
              v67 = *(_DWORD *)(v4 + 64) & 0x3F;
              v68 = *(unsigned int *)(v4 + 8);
              if (v67)
                *(_QWORD *)(*(_QWORD *)v4 + 8 * v68 - 8) &= ~(-1 << v67);
              v69 = v68;
              *(_DWORD *)(v4 + 64) = v44;
              v70 = v44 + 63;
              if ((_DWORD)v68 != (v44 + 63) >> 6)
              {
                v71 = v70 >> 6;
                if (v68 > v71)
                {
                  *(_DWORD *)(v4 + 8) = v71;
                  v69 = v70 >> 6;
                }
                else
                {
                  v72 = v68;
                  if (v71 > *(_DWORD *)(v4 + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (uint64_t)(v3 + 6039), v71, 8);
                    v72 = *(unsigned int *)(v4 + 8);
                    v69 = *(_DWORD *)(v4 + 8);
                  }
                  if (v71 != v68)
                    bzero((void *)(*(_QWORD *)v4 + 8 * v72), 8 * (v71 - v68));
                  v69 += v71 - v68;
                  *(_DWORD *)(v4 + 8) = v69;
                  v44 = *(_DWORD *)(v4 + 64);
                  v45 = v84;
                }
              }
              v73 = v44 & 0x3F;
              if (v73)
                *(_QWORD *)(*(_QWORD *)v4 + 8 * v69 - 8) &= ~(-1 << v73);
            }
            v46 = (const void **)(v4 + 72);
            v47 = *(unsigned int *)(v45 + 8);
            if ((_DWORD)v47)
            {
              v48 = *(uint64_t **)v45;
              v49 = *(_QWORD **)v4;
              do
              {
                v50 = *v48++;
                *v49++ |= v50;
                --v47;
              }
              while (v47);
            }
            v51 = *v82;
            if (*(_DWORD *)(v4 + 136) < *v82)
            {
              v74 = *(_DWORD *)(v4 + 136) & 0x3F;
              v75 = *(unsigned int *)(v4 + 80);
              if (v74)
              {
                v81 = *(_QWORD *)(v4 + 72) + 8 * v75;
                *(_QWORD *)(v81 - 8) &= ~(-1 << v74);
              }
              v76 = v75;
              *(_DWORD *)(v4 + 136) = v51;
              v77 = v51 + 63;
              if ((_DWORD)v75 != (v51 + 63) >> 6)
              {
                v78 = v77 >> 6;
                if (v75 > v78)
                {
                  *(_DWORD *)(v4 + 80) = v78;
                  v76 = v77 >> 6;
                }
                else
                {
                  v79 = v75;
                  if (v78 > *(_DWORD *)(v4 + 84))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 72, (uint64_t)(v3 + 6048), v78, 8);
                    v45 = v84;
                    v79 = *(unsigned int *)(v4 + 80);
                    v76 = *(_DWORD *)(v4 + 80);
                  }
                  if (v78 != v75)
                  {
                    bzero((char *)*v46 + 8 * v79, 8 * (v78 - v75));
                    v45 = v84;
                  }
                  v76 += v78 - v75;
                  *(_DWORD *)(v4 + 80) = v76;
                  v51 = *(_DWORD *)(v4 + 136);
                }
              }
              v80 = v51 & 0x3F;
              if (v80)
                *((_QWORD *)*v46 + v76 - 1) &= ~(-1 << v80);
            }
            v52 = *(unsigned int *)(v45 + 8);
            if ((_DWORD)v52)
            {
              v53 = *(uint64_t **)v45;
              v54 = *v46;
              do
              {
                v55 = *v53++;
                *v54++ |= v55;
                --v52;
              }
              while (v52);
            }
            v56 = v7;
            v57 = v7 + 376 * v6;
            v58 = v57 + 232;
            if (v57 + 232 == v4)
            {
LABEL_62:
              v62 = (_DWORD *)(v56 + 376 * v6);
              v62[74] = *(_DWORD *)(v4 + 64);
              v63 = (void **)(v62 + 76);
              if (v62 + 76 == (_DWORD *)v46)
              {
LABEL_74:
                *(_DWORD *)(v56 + 376 * v6 + 368) = *(_DWORD *)(v4 + 136);
                return (*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 176))(v3, v83);
              }
              v64 = *(unsigned int *)(v4 + 80);
              v65 = v62[78];
              if (v65 >= v64)
              {
                if ((_DWORD)v64)
                  memmove(*v63, *v46, 8 * v64);
                goto LABEL_73;
              }
              if (v62[79] < v64)
              {
                v62[78] = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v62 + 76), (uint64_t)(v62 + 80), v64, 8);
              }
              else if ((_DWORD)v65)
              {
                memmove(*v63, *v46, 8 * v65);
                goto LABEL_71;
              }
              v65 = 0;
LABEL_71:
              v66 = *(unsigned int *)(v4 + 80);
              if (v65 != v66)
                memcpy((char *)*v63 + 8 * v65, (char *)*v46 + 8 * v65, (_BYTE *)*v46 + 8 * v66 - ((_BYTE *)*v46 + 8 * v65));
LABEL_73:
              *((_DWORD *)v63 + 2) = v64;
              goto LABEL_74;
            }
            v59 = *(unsigned int *)(v4 + 8);
            v60 = *(unsigned int *)(v57 + 240);
            if (v60 >= v59)
            {
              if ((_DWORD)v59)
                memmove(*(void **)v58, *(const void **)v4, 8 * v59);
              goto LABEL_61;
            }
            if (*(_DWORD *)(v57 + 244) < v59)
            {
              *(_DWORD *)(v57 + 240) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v57 + 232, v57 + 248, v59, 8);
            }
            else if ((_DWORD)v60)
            {
              memmove(*(void **)v58, *(const void **)v4, 8 * v60);
              goto LABEL_59;
            }
            v60 = 0;
LABEL_59:
            v61 = *(unsigned int *)(v4 + 8);
            if (v60 != v61)
              memcpy((void *)(*(_QWORD *)v58 + 8 * v60), (const void *)(*(_QWORD *)v4 + 8 * v60), *(_QWORD *)v4 + 8 * v61 - (*(_QWORD *)v4 + 8 * v60));
LABEL_61:
            *(_DWORD *)(v58 + 8) = v59;
            goto LABEL_62;
          }
          if (v86 != v88)
          {
            if (*(_QWORD *)(v22 + 160) != v22 + 176)
            {
              free(*(void **)v23);
              v24 = v86;
            }
            *(_QWORD *)v23 = v24;
            *(_QWORD *)(v23 + 8) = v87;
            v86 = v88;
            HIDWORD(v87) = 0;
            goto LABEL_27;
          }
          v25 = v87;
          v26 = *(unsigned int *)(v22 + 168);
          if (v26 >= v87)
          {
            if ((_DWORD)v87)
              memmove(*(void **)v23, v88, 8 * v87);
LABEL_26:
            *(_DWORD *)(v23 + 8) = v25;
LABEL_27:
            v27 = v85;
            v24 = v86;
            LODWORD(v87) = 0;
            v21 = v89;
            goto LABEL_28;
          }
          if (*(_DWORD *)(v22 + 172) < v87)
          {
            *(_DWORD *)(v22 + 168) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v22 + 160, v22 + 176, v25, 8);
          }
          else if ((_DWORD)v26)
          {
            memmove(*(void **)v23, v88, 8 * v26);
LABEL_111:
            if (v26 != v87)
              memcpy((void *)(*(_QWORD *)v23 + 8 * v26), (char *)v86 + 8 * v26, 8 * v87 - 8 * v26);
            goto LABEL_26;
          }
          v26 = 0;
          goto LABEL_111;
        }
        if (v86 != v88)
        {
          if (*(_QWORD *)(v16 + 88) != v16 + 104)
          {
            free(*(void **)v17);
            v18 = v86;
          }
          *(_QWORD *)v17 = v18;
          *(_QWORD *)(v17 + 8) = v87;
          v86 = v88;
          HIDWORD(v87) = 0;
          goto LABEL_18;
        }
        v19 = v87;
        v20 = *(unsigned int *)(v16 + 96);
        if (v20 >= v87)
        {
          if ((_DWORD)v87)
            memmove(*(void **)v17, v88, 8 * v87);
LABEL_17:
          *(_DWORD *)(v17 + 8) = v19;
LABEL_18:
          LODWORD(v87) = 0;
          v15 = v89;
          v18 = v86;
          goto LABEL_19;
        }
        if (*(_DWORD *)(v16 + 100) < v87)
        {
          *(_DWORD *)(v16 + 96) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v16 + 88, v16 + 104, v19, 8);
        }
        else if ((_DWORD)v20)
        {
          memmove(*(void **)v17, v88, 8 * v20);
LABEL_106:
          if (v20 != v87)
            memcpy((void *)(*(_QWORD *)v17 + 8 * v20), (char *)v86 + 8 * v20, 8 * v87 - 8 * v20);
          goto LABEL_17;
        }
        v20 = 0;
        goto LABEL_106;
      }
      memmove(*(void **)v10, v88, 8 * v87);
LABEL_7:
      v10 = v8 + 16;
      goto LABEL_8;
    }
    if (*(_DWORD *)(v8 + 28) < v87)
    {
      *(_DWORD *)(v8 + 24) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 16, v8 + 32, v12, 8);
      v10 = v8 + 16;
    }
    else if ((_DWORD)v13)
    {
      memmove(*(void **)v10, v88, 8 * v13);
      v10 = v8 + 16;
      goto LABEL_101;
    }
    v13 = 0;
LABEL_101:
    if (v13 == v87)
      goto LABEL_8;
    memcpy((void *)(*(_QWORD *)v10 + 8 * v13), (char *)v86 + 8 * v13, 8 * v87 - 8 * v13);
    goto LABEL_7;
  }
  return result;
}

void sub_1C5FDF620(uint64_t a1)
{
  unsigned int v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  int v42;
  _DWORD *v43;
  _BYTE *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  _QWORD *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  void *v90;
  unint64_t v91;
  _DWORD v92[14];
  void *__dst;
  uint64_t v94;
  _BYTE v95[48];
  int v96;
  void *__b;
  uint64_t v98;
  _BYTE v99[48];
  unsigned int v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v89 = (unsigned int *)(a1 + 48432);
  v2 = *(_DWORD *)(a1 + 48432);
  __b = v99;
  v98 = 0x600000000;
  sub_1C4765AA4((char *)&__b, (v2 + 63) >> 6, 0);
  v100 = v2;
  v3 = __b;
  v4 = v98;
  if ((_DWORD)v98)
    memset(__b, 255, 8 * v98);
  if ((v2 & 0x3F) != 0)
    v3[v4 - 1] &= ~(-1 << (v2 & 0x3F));
  v5 = *(_DWORD *)(a1 + 160);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 152);
    v7 = v6 + 376 * v5;
    while (1)
    {
      v8 = v7 - 376;
      v9 = v100;
      v10 = *(_DWORD *)(v7 - 296);
      if (v100 < v10)
      {
        v60 = v98;
        if ((v100 & 0x3F) != 0)
          *((_QWORD *)__b + v98 - 1) &= ~(-1 << (v100 & 0x3F));
        v61 = v60;
        v100 = v10;
        v62 = v10 + 63;
        if ((_DWORD)v60 != (v10 + 63) >> 6)
        {
          v63 = v62 >> 6;
          if (v60 > v63)
          {
            LODWORD(v98) = v62 >> 6;
            v61 = v62 >> 6;
          }
          else
          {
            v64 = v60;
            if (v63 > HIDWORD(v98))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, (uint64_t)v99, v63, 8);
              v64 = v98;
              v61 = v98;
            }
            if (v63 != v60)
              bzero((char *)__b + 8 * v64, 8 * (v63 - v60));
            v61 += v63 - v60;
            LODWORD(v98) = v61;
            v10 = v100;
          }
        }
        if ((v10 & 0x3F) != 0)
          *((_QWORD *)__b + v61 - 1) &= ~(-1 << (v10 & 0x3F));
        v9 = v10;
      }
      v11 = *(unsigned int *)(v7 - 352);
      if ((_DWORD)v11)
      {
        v12 = *(uint64_t **)(v7 - 360);
        v13 = __b;
        do
        {
          v14 = *v12++;
          *v13++ |= v14;
          --v11;
        }
        while (v11);
      }
      __dst = v95;
      v94 = 0x600000000;
      v15 = v98;
      if ((_DWORD)v98)
        break;
LABEL_17:
      v96 = v9;
      v18 = *(_DWORD *)(v7 - 280);
      if (v18 >= v15)
        v19 = v15;
      else
        v19 = v18;
      if ((_DWORD)v19)
      {
        v20 = *(uint64_t **)(v7 - 288);
        v21 = __dst;
        v22 = v19;
        do
        {
          v23 = *v20++;
          *v21++ &= v23;
          --v22;
        }
        while (v22);
      }
      if (v15 > v18)
      {
        v24 = __dst;
        do
        {
          v24[v19] = 0;
          LODWORD(v19) = v19 + 1;
        }
        while (v15 != (_DWORD)v19);
      }
      v25 = (_QWORD *)(v7 - 216);
      if (*(_DWORD *)(v7 - 152) < v9)
      {
        v26 = *(_DWORD *)(v7 - 152) & 0x3F;
        v27 = *(unsigned int *)(v7 - 208);
        if (v26)
        {
          v65 = *(_QWORD *)(v7 - 216) + 8 * v27;
          *(_QWORD *)(v65 - 8) &= ~(-1 << v26);
        }
        v28 = v27;
        *(_DWORD *)(v7 - 152) = v9;
        v29 = v9 + 63;
        if ((_DWORD)v27 != (v9 + 63) >> 6)
        {
          v30 = v29 >> 6;
          if (v27 > v30)
          {
            *(_DWORD *)(v7 - 208) = v30;
            v28 = v29 >> 6;
          }
          else
          {
            v31 = v27;
            if (v30 > *(_DWORD *)(v7 - 204))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v7 - 216, v7 - 200, v30, 8);
              v31 = *(unsigned int *)(v7 - 208);
              v28 = *(_DWORD *)(v7 - 208);
            }
            if (v30 != v27)
              bzero((void *)(*v25 + 8 * v31), 8 * (v30 - v27));
            v28 += v30 - v27;
            *(_DWORD *)(v7 - 208) = v28;
            v9 = *(_DWORD *)(v7 - 152);
          }
        }
        v32 = v9 & 0x3F;
        if (v32)
          *(_QWORD *)(*v25 + 8 * v28 - 8) &= ~(-1 << v32);
      }
      v33 = v94;
      v34 = __dst;
      if ((_DWORD)v94)
      {
        v35 = (_QWORD *)*v25;
        v36 = (uint64_t *)__dst;
        v37 = v94;
        do
        {
          v38 = *v36++;
          *v35++ |= v38;
          --v37;
        }
        while (v37);
        v39 = 8 * v33;
        v40 = v34;
        do
        {
          *v40 = ~*v40;
          ++v40;
          v39 -= 8;
        }
        while (v39);
        v41 = v33;
      }
      else
      {
        v41 = 0;
      }
      v42 = v96;
      if ((v96 & 0x3F) != 0)
        v34[v41 - 1] &= ~(-1 << (v96 & 0x3F));
      v90 = v92;
      v91 = 0x600000000;
      if (!(_DWORD)v33)
        goto LABEL_53;
      if (v34 != (_QWORD *)v95)
      {
        v90 = v34;
        v91 = __PAIR64__(HIDWORD(v94), v33);
        __dst = v95;
        HIDWORD(v94) = 0;
        goto LABEL_52;
      }
      v43 = v92;
      v44 = v95;
      v45 = v33;
      if (v33 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, (uint64_t)v92, v41, 8);
        v45 = v94;
        if (!(_DWORD)v94)
          goto LABEL_51;
        v44 = __dst;
        v43 = v90;
      }
      memcpy(v43, v44, 8 * v45);
LABEL_51:
      LODWORD(v91) = v33;
      v42 = v96;
LABEL_52:
      LODWORD(v94) = 0;
LABEL_53:
      v92[12] = v42;
      v46 = *(_DWORD *)(v7 - 64);
      if (v33 >= v46)
        v47 = v46;
      else
        v47 = v33;
      if ((_DWORD)v47)
      {
        v48 = (uint64_t *)v90;
        v49 = *(_QWORD **)(v7 - 72);
        v50 = v47;
        do
        {
          v51 = *v48++;
          *v49++ &= v51;
          --v50;
        }
        while (v50);
      }
      if (v46 > v33)
      {
        v52 = *(_QWORD *)(v7 - 72);
        do
        {
          *(_QWORD *)(v52 + 8 * v47) = 0;
          LODWORD(v47) = v47 + 1;
        }
        while (v46 != (_DWORD)v47);
      }
      v53 = v98;
      if (v33 >= v98)
        v54 = v98;
      else
        v54 = v33;
      if ((_DWORD)v54)
      {
        v55 = (uint64_t *)v90;
        v56 = __b;
        v57 = v54;
        do
        {
          v58 = *v55++;
          *v56++ &= v58;
          --v57;
        }
        while (v57);
      }
      if (v53 > v33)
      {
        v59 = __b;
        do
        {
          v59[v54] = 0;
          LODWORD(v54) = v54 + 1;
        }
        while (v53 != (_DWORD)v54);
      }
      if (v90 != v92)
        free(v90);
      if (__dst != v95)
        free(__dst);
      v7 -= 376;
      if (v8 == v6)
        goto LABEL_94;
    }
    v16 = v95;
    v17 = v98;
    if (v98 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v95, v98, 8);
      v17 = v98;
      if (!(_DWORD)v98)
      {
LABEL_16:
        LODWORD(v94) = v15;
        v9 = v100;
        goto LABEL_17;
      }
      v16 = __dst;
    }
    memcpy(v16, __b, 8 * v17);
    goto LABEL_16;
  }
LABEL_94:
  v66 = *v89;
  __dst = v95;
  v94 = 0x600000000;
  sub_1C4765AA4((char *)&__dst, (v66 + 63) >> 6, 0);
  v96 = v66;
  v67 = *(_DWORD *)(a1 + 160);
  if (v67)
  {
    v68 = *(_QWORD *)(a1 + 152);
    v69 = v68 + 376 * v67;
    do
    {
      v70 = *(_DWORD *)(v68 + 224);
      if (v66 < v70)
      {
        v84 = v94;
        if ((v66 & 0x3F) != 0)
          *((_QWORD *)__dst + v94 - 1) &= ~(-1 << (v66 & 0x3F));
        v85 = v84;
        v96 = v70;
        v86 = v70 + 63;
        if ((_DWORD)v84 != (v70 + 63) >> 6)
        {
          v87 = v86 >> 6;
          if (v84 > v87)
          {
            LODWORD(v94) = v86 >> 6;
            v85 = v86 >> 6;
          }
          else
          {
            v88 = v84;
            if (v87 > HIDWORD(v94))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v95, v87, 8);
              v88 = v94;
              v85 = v94;
            }
            if (v87 != v84)
              bzero((char *)__dst + 8 * v88, 8 * (v87 - v84));
            v85 += v87 - v84;
            LODWORD(v94) = v85;
            v70 = v96;
          }
        }
        if ((v70 & 0x3F) != 0)
          *((_QWORD *)__dst + v85 - 1) &= ~(-1 << (v70 & 0x3F));
        v66 = v70;
      }
      v71 = *(unsigned int *)(v68 + 168);
      if ((_DWORD)v71)
      {
        v72 = *(uint64_t **)(v68 + 160);
        v73 = __dst;
        do
        {
          v74 = *v72++;
          *v73++ |= v74;
          --v71;
        }
        while (v71);
      }
      LODWORD(v75) = v94;
      LODWORD(v76) = *(_DWORD *)(v68 + 24);
      if (v76 >= v94)
        v76 = v94;
      else
        v76 = v76;
      if ((_DWORD)v76)
      {
        v77 = *(uint64_t **)(v68 + 16);
        v78 = __dst;
        do
        {
          v79 = *v77++;
          *v78++ &= ~v79;
          --v76;
        }
        while (v76);
      }
      v80 = *(_DWORD *)(v68 + 312);
      if (v75 >= v80)
        v75 = v80;
      else
        v75 = v75;
      if ((_DWORD)v75)
      {
        v81 = (uint64_t *)__dst;
        v82 = *(_QWORD **)(v68 + 304);
        do
        {
          v83 = *v81++;
          *v82++ &= ~v83;
          --v75;
        }
        while (v75);
      }
      v68 += 376;
    }
    while (v68 != v69);
  }
  if (__dst != v95)
    free(__dst);
  if (__b != v99)
    free(__b);
}

uint64_t sub_1C5FDFDA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  char v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t first_not_of;
  unint64_t v14;
  _QWORD v16[2];

  v4 = a1 + 56;
  MEMORY[0x1CAA32ABC](a1 + 56, "");
  (*(void (**)(_QWORD, uint64_t, _QWORD, const char *, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, 0, "", 0, *(_QWORD *)(a1 + 8), a1 + 80);
  v5 = *(const char **)(a1 + 112);
  v6 = *(const char **)(a1 + 96);
  if (v5 != v6)
  {
    *(_QWORD *)(a1 + 112) = v6;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)(a1 + 80), v6, v5 - v6);
  }
  v7 = *(_BYTE *)(a1 + 79);
  v8 = v7 < 0;
  v9 = *(_QWORD *)(a1 + 64);
  if (v7 >= 0)
    v10 = v4;
  else
    v10 = *(_QWORD *)(a1 + 56);
  v11 = v7 & 0x7F;
  if (v8)
    v12 = v9;
  else
    v12 = v11;
  v16[0] = v10;
  v16[1] = v12;
  first_not_of = llvm::StringRef::find_first_not_of(v16, " \t\n\v\f\r", 6, 0);
  if (first_not_of >= v12)
    v14 = v12;
  else
    v14 = first_not_of;
  return v10 + v14;
}

void sub_1C5FDFE84(uint64_t *a1, uint64_t a2)
{
  int v4;
  signed int v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  uint64_t *v17;
  char v18;
  unint64_t v19;

  v4 = sub_1C4914594((_QWORD *)a2, 0, *(_DWORD *)(a2 + 64));
  if (v4 >= 0)
    v5 = v4 + 1;
  else
    v5 = 0;
  if (v5 < 0)
    abort();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    a1[1] = v6;
    a1[2] = v9 | 0x8000000000000000;
    *a1 = (uint64_t)v7;
    goto LABEL_11;
  }
  *((_BYTE *)a1 + 23) = v5;
  v7 = a1;
  if (v5)
LABEL_11:
    bzero(v7, v6);
  *((_BYTE *)v7 + v6) = 0;
  v10 = *((_BYTE *)a1 + 23);
  v11 = v10 < 0;
  v12 = v11;
  v13 = v10 & 0x7F;
  if (v11)
    v13 = a1[1];
  if (v13)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      if (((*(_QWORD *)(*(_QWORD *)a2 + 8 * ((v15 - 1) >> 6)) >> (v15 - 1)) & 1) != 0)
        v16 = 49;
      else
        v16 = 48;
      if (v12)
        v17 = (uint64_t *)*a1;
      else
        v17 = a1;
      *((_BYTE *)v17 + v14) = v16;
      v14 = v15;
      v18 = *((_BYTE *)a1 + 23);
      v11 = v18 < 0;
      v12 = v11;
      v19 = v18 & 0x7F;
      if (v11)
        v19 = a1[1];
    }
    while (v19 > v15++);
  }
}

llvm::raw_ostream *sub_1C5FDFFB4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  char *v16;
  int i;
  char v18;
  char *v19;
  char *v20;
  unsigned int v21;
  char *v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  const char *v34;
  size_t v35;
  char v36;
  __int16 v37;
  char v38;
  char *v39;
  char *v40;
  llvm::raw_ostream *v41;
  int v42;
  unint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  unsigned int v46;
  int8x8_t *v47;
  uint64_t v48;
  int8x8_t v49;
  uint8x8_t v50;
  _BYTE *v51;
  size_t v52;
  const void *v53;
  size_t v54;
  _BYTE *v55;
  llvm::raw_ostream *v56;
  char **v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v67;
  uint64_t (**v68)(llvm::raw_ostream *);
  int v69;
  char *v70;
  unint64_t v71;
  char *v72;
  char v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  __int128 v79;
  uint64_t v80;

  v69 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 1;
  v71 = 0;
  v72 = 0;
  v70 = 0;
  v68 = &off_1E81A1100;
  v76 = 0;
  v77 = 0;
  v78 = &v80;
  v79 = xmmword_1C6612EF0;
  sub_1C4D685DC((uint64_t)&v68, a2);
  v4 = v72;
  if (v71 - (unint64_t)v72 > 0x13)
  {
    *((_DWORD *)v72 + 4) = 171603813;
    *(_OWORD *)v4 = *(_OWORD *)"\n\nAGXPressure view:\n";
    v5 = v72 + 20;
    v72 += 20;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v68, "\n\nAGXPressure view:\n", 0x14uLL);
    v5 = v72;
  }
  v6 = v70;
  v7 = v5 - v70;
  if (v5 != v70)
  {
    v72 = v70;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v68, v70, v7);
  }
  v8 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 56))(a2, v6, v7);
  v9 = *(_DWORD *)(a1 + 160);
  if (v9)
  {
    v10 = 0;
    v11 = 376 * v9;
    v12 = *(_QWORD *)(a1 + 152) + 304;
    do
    {
      v13 = sub_1C4914594((_QWORD *)v12, 0, *(_DWORD *)(v12 + 64));
      if (v10 <= v13 + 1)
        v14 = v13 + 1;
      else
        v14 = v10;
      if (v13 >= 0)
        v10 = v14;
      v12 += 376;
      v11 -= 376;
    }
    while (v11);
  }
  else
  {
    v10 = 0;
  }
  if (*(_DWORD *)(a1 + 48432) >= v10)
    v15 = v10;
  else
    v15 = *(_DWORD *)(a1 + 48432);
  v16 = v72;
  if (v71 - (unint64_t)v72 > 0x4E)
  {
    *((_OWORD *)v72 + 2) = *(_OWORD *)" loops may extend live range beyond that shown\n";
    qmemcpy(v16 + 48, "d live range beyond that shown\n", 31);
    qmemcpy(v16, "warning: branching backwards for", 32);
    v72 += 79;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v68, "warning: branching backwards for loops may extend live range beyond that shown\n", 0x4FuLL);
  }
  if (v15 < 0xC8)
  {
    if (v15 < 0x14)
      goto LABEL_24;
  }
  else
  {
    sub_1C5FE1E48((llvm::raw_ostream *)&v68, v15, 3u);
  }
  sub_1C5FE1E48((llvm::raw_ostream *)&v68, v15, 2u);
LABEL_24:
  sub_1C5FE1E48((llvm::raw_ostream *)&v68, v15, 1u);
  sub_1C5FE1E48((llvm::raw_ostream *)&v68, v15, 0);
  if (v15)
  {
    for (i = 0; i != v15; ++i)
    {
      if ((i & 1) != 0)
        v18 = 104;
      else
        v18 = 108;
      v19 = v72;
      if ((unint64_t)v72 >= v71)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v68, v18);
      }
      else
      {
        ++v72;
        *v19 = v18;
      }
    }
  }
  v20 = v72;
  if ((unint64_t)v72 >= v71)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v68, 10);
    if (!v15)
      goto LABEL_42;
  }
  else
  {
    ++v72;
    *v20 = 10;
    if (!v15)
      goto LABEL_42;
  }
  v21 = v15;
  do
  {
    v22 = v72;
    if ((unint64_t)v72 >= v71)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v68, 61);
    }
    else
    {
      ++v72;
      *v22 = 61;
    }
    --v21;
  }
  while (v21);
LABEL_42:
  v23 = v72;
  if ((unint64_t)v72 >= v71)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v68, 10);
  }
  else
  {
    ++v72;
    *v23 = 10;
  }
  v24 = *(_DWORD *)(a1 + 160);
  if (v24)
  {
    v25 = 0;
    v26 = *(_QWORD *)(a1 + 152);
    v67 = v26 + 376 * v24;
    while (1)
    {
      v27 = a1;
      v28 = *(_QWORD *)(a1 + 32);
      if (v15)
        break;
LABEL_90:
      if ((v8 & 1) != 0)
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v40 = v72;
      if (v71 - (unint64_t)v72 > 6)
      {
        *(_DWORD *)(v72 + 3) = 540698727;
        *(_DWORD *)v40 = 1734952992;
        v72 += 7;
        v41 = (llvm::raw_ostream *)&v68;
      }
      else
      {
        v41 = llvm::raw_ostream::write((llvm::raw_ostream *)&v68, " High: ", 7uLL);
      }
      v42 = sub_1C4914594((_QWORD *)(v26 + 304), 0, *(_DWORD *)(v26 + 368));
      if (v42 >= 0)
        v43 = (v42 + 1);
      else
        v43 = 0;
      sub_1C5E21910(v41, v43, 0, 0, 0);
      v44 = (_DWORD *)*((_QWORD *)v41 + 4);
      if (*((_QWORD *)v41 + 3) - (_QWORD)v44 > 6uLL)
      {
        *(_DWORD *)((char *)v44 + 3) = 540697974;
        *v44 = 1986612233;
        *((_QWORD *)v41 + 4) += 7;
      }
      else
      {
        v41 = llvm::raw_ostream::write(v41, "\tLive: ", 7uLL);
      }
      v45 = *(unsigned int *)(v26 + 312);
      if ((_DWORD)v45)
      {
        v46 = 0;
        v47 = *(int8x8_t **)(v26 + 304);
        v48 = 8 * v45;
        do
        {
          v49 = *v47++;
          v50 = (uint8x8_t)vcnt_s8(v49);
          v50.i16[0] = vaddlv_u8(v50);
          v46 += v50.i32[0];
          v48 -= 8;
        }
        while (v48);
      }
      else
      {
        v46 = 0;
      }
      sub_1C5E21910(v41, v46, 0, 0, 0);
      v51 = (_BYTE *)*((_QWORD *)v41 + 4);
      if (*((_BYTE **)v41 + 3) == v51)
      {
        v41 = llvm::raw_ostream::write(v41, "\t", 1uLL);
      }
      else
      {
        *v51 = 9;
        ++*((_QWORD *)v41 + 4);
      }
      v53 = (const void *)sub_1C5FDFDA8(v27, v28 + 168 * v25);
      v54 = v52;
      v55 = (_BYTE *)*((_QWORD *)v41 + 4);
      if (v52 <= *((_QWORD *)v41 + 3) - (_QWORD)v55)
      {
        if (v52)
        {
          memcpy(v55, v53, v52);
          v55 = (_BYTE *)(*((_QWORD *)v41 + 4) + v54);
          *((_QWORD *)v41 + 4) = v55;
        }
      }
      else
      {
        v41 = llvm::raw_ostream::write(v41, (const char *)v53, v52);
        v55 = (_BYTE *)*((_QWORD *)v41 + 4);
      }
      a1 = v27;
      if ((unint64_t)v55 >= *((_QWORD *)v41 + 3))
      {
        llvm::raw_ostream::write(v41, 10);
      }
      else
      {
        *((_QWORD *)v41 + 4) = v55 + 1;
        *v55 = 10;
      }
      v26 += 376;
      ++v25;
      if (v26 == v67)
        goto LABEL_118;
    }
    v29 = 0;
    while (1)
    {
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v30 = v29 >> 6;
      v31 = 1 << v29;
      v32 = *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * v30) & (1 << v29);
      if ((*(_QWORD *)(*(_QWORD *)(v26 + 160) + 8 * v30) & (1 << v29)) != 0)
      {
        v33 = v72;
        if (v32)
        {
          if (v71 - (unint64_t)v72 > 2)
          {
            v36 = -117;
            goto LABEL_80;
          }
          v34 = "╋";
        }
        else
        {
          if (v71 - (unint64_t)v72 > 2)
          {
            v38 = -105;
            goto LABEL_85;
          }
          v34 = "┗";
        }
        goto LABEL_71;
      }
      if (v32)
      {
        v33 = v72;
        if (v71 - (unint64_t)v72 > 2)
        {
          v38 = -109;
LABEL_85:
          v33[2] = v38;
          v37 = -27422;
          goto LABEL_86;
        }
        v34 = "┓";
        goto LABEL_71;
      }
      if ((*(_QWORD *)(*(_QWORD *)(v26 + 88) + 8 * v30) & v31) != 0)
      {
        v33 = v72;
        if (v71 - (unint64_t)v72 > 2)
        {
          v38 = -96;
          goto LABEL_85;
        }
        v34 = "┠";
        goto LABEL_71;
      }
      if ((*(_QWORD *)(*(_QWORD *)(v26 + 304) + 8 * v30) & v31) != 0)
        break;
      if ((*(_QWORD *)(*(_QWORD *)(v26 + 232) + 8 * v30) & v31) != 0)
      {
        if (v8)
          (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 0, 1, 0);
        v33 = v72;
        if (v71 - (unint64_t)v72 > 2)
        {
          v36 = -114;
LABEL_80:
          v33[2] = v36;
          v37 = -27166;
LABEL_86:
          *(_WORD *)v33 = v37;
          v39 = v72 + 3;
LABEL_87:
          v72 = v39;
          goto LABEL_73;
        }
        v34 = "╎";
LABEL_71:
        v35 = 3;
        goto LABEL_72;
      }
      if (v8)
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 24))(a2, 0, 0, 0);
      if (v71 - (unint64_t)v72 > 1)
      {
        *(_WORD *)v72 = -18494;
        v39 = v72 + 2;
        goto LABEL_87;
      }
      v34 = "·";
      v35 = 2;
LABEL_72:
      llvm::raw_ostream::write((llvm::raw_ostream *)&v68, v34, v35);
LABEL_73:
      if (v15 == ++v29)
        goto LABEL_90;
    }
    v33 = v72;
    if (v71 - (unint64_t)v72 > 2)
    {
      v38 = -125;
      goto LABEL_85;
    }
    v34 = "┃";
    goto LABEL_71;
  }
LABEL_118:
  if (v71 - (unint64_t)v72 > 7)
  {
    v57 = &v72;
    *(_QWORD *)v72 = 0xA3A646E6567654CLL;
    v58 = v72 + 8;
    v72 += 8;
    v56 = (llvm::raw_ostream *)&v68;
  }
  else
  {
    v56 = llvm::raw_ostream::write((llvm::raw_ostream *)&v68, "Legend:\n", 8uLL);
    v57 = (char **)((char *)v56 + 32);
    v58 = (char *)*((_QWORD *)v56 + 4);
  }
  if (*((_QWORD *)v56 + 3) - (_QWORD)v58 > 9uLL)
  {
    *((_WORD *)v58 + 4) = 2662;
    *(_QWORD *)v58 = *(_QWORD *)"┓ - Def\n";
    *v57 += 10;
  }
  else
  {
    v56 = llvm::raw_ostream::write(v56, "┓ - Def\n", 0xAuLL);
  }
  v59 = *((_QWORD *)v56 + 4);
  if ((unint64_t)(*((_QWORD *)v56 + 3) - v59) > 9)
  {
    *(_WORD *)(v59 + 8) = 2661;
    *(_QWORD *)v59 = *(_QWORD *)"┠ - Use\n";
    v60 = (_QWORD *)(*((_QWORD *)v56 + 4) + 10);
    *((_QWORD *)v56 + 4) = v60;
  }
  else
  {
    v56 = llvm::raw_ostream::write(v56, "┠ - Use\n", 0xAuLL);
    v60 = (_QWORD *)*((_QWORD *)v56 + 4);
  }
  if (*((_QWORD *)v56 + 3) - (_QWORD)v60 > 0xEuLL)
  {
    *v60 = *(_QWORD *)"┗ - Last use\n";
    *(_QWORD *)((char *)v60 + 7) = *(_QWORD *)"ast use\n";
    v61 = *((_QWORD *)v56 + 4) + 15;
    *((_QWORD *)v56 + 4) = v61;
  }
  else
  {
    v56 = llvm::raw_ostream::write(v56, "┗ - Last use\n", 0xFuLL);
    v61 = *((_QWORD *)v56 + 4);
  }
  if ((unint64_t)(*((_QWORD *)v56 + 3) - v61) > 0x17)
  {
    *(_OWORD *)v61 = *(_OWORD *)"╋ - Last use then Def\n";
    *(_QWORD *)(v61 + 16) = *(_QWORD *)"hen Def\n";
    v62 = *((_QWORD *)v56 + 4) + 24;
    *((_QWORD *)v56 + 4) = v62;
  }
  else
  {
    v56 = llvm::raw_ostream::write(v56, "╋ - Last use then Def\n", 0x18uLL);
    v62 = *((_QWORD *)v56 + 4);
  }
  if ((unint64_t)(*((_QWORD *)v56 + 3) - v62) > 0xA)
  {
    *(_DWORD *)(v62 + 7) = 174421609;
    *(_QWORD *)v62 = *(_QWORD *)"┃ - Live\n";
    *((_QWORD *)v56 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v56, "┃ - Live\n", 0xBuLL);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v76 + 24))(v76, 0, 1, 0);
  v63 = v72;
  if (v71 - (unint64_t)v72 > 2)
  {
    v72[2] = -114;
    *(_WORD *)v63 = -27166;
    v72 += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v68, "╎", 3uLL);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v76 + 32))(v76);
  v64 = v72;
  if (v71 - (unint64_t)v72 > 0x19)
  {
    *(_OWORD *)v72 = *(_OWORD *)" - Allocated but not Live\n";
    *(_OWORD *)(v64 + 10) = *(_OWORD *)"ed but not Live\n";
    v72 += 26;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v68, " - Allocated but not Live\n", 0x1AuLL);
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v76 + 24))(v76, 0, 0, 0);
  if (v71 - (unint64_t)v72 > 1)
  {
    *(_WORD *)v72 = -18494;
    v72 += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v68, "·", 2uLL);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v76 + 32))(v76);
  v65 = v72;
  if (v71 - (unint64_t)v72 > 0x10)
  {
    v72[16] = 10;
    *(_OWORD *)v65 = *(_OWORD *)" - Not allocated\n";
    v72 += 17;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v68, " - Not allocated\n", 0x11uLL);
  }
  return sub_1C4D687F0((llvm::raw_ostream *)&v68);
}

void sub_1C5FE0A50(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int8x8_t *v10;
  uint64_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const void *v19;
  void *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void **v26;
  void **v27;
  void **v28;
  __n128 v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *__dst[2];
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  void *v41;
  void *v42;
  int v43;
  __int128 v44;
  unint64_t v45;
  void *__p[2];
  char v47;
  void *v48[4];
  void *v49[3];
  int v50;
  uint64_t v51;
  uint64_t v52[3];
  __int16 v53;
  uint64_t v54;
  uint64_t v55[3];
  __int16 v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v45 = 0;
  v2 = 0uLL;
  v44 = 0u;
  v3 = *(_DWORD *)(a1 + 160);
  if (!v3)
  {
    v33 = 0;
    goto LABEL_58;
  }
  v34 = a2;
  v5 = 0;
  v6 = *(_QWORD *)(a1 + 152);
  v35 = v6 + 376 * v3;
  do
  {
    v7 = *(_QWORD *)(a1 + 32);
    sub_1C4D655B0((uint64_t *)v49, "Live", 4uLL);
    v8 = *(unsigned int *)(v6 + 312);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = *(int8x8_t **)(v6 + 304);
      v11 = 8 * v8;
      do
      {
        v12 = *v10++;
        v13 = (uint8x8_t)vcnt_s8(v12);
        v13.i16[0] = vaddlv_u8(v13);
        v9 += v13.i32[0];
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      v9 = 0;
    }
    v14 = v7 + 168 * v5;
    LOWORD(v50) = 3;
    v51 = v9;
    sub_1C4D655B0(v52, "High", 4uLL);
    v15 = sub_1C4914594((_QWORD *)(v6 + 304), 0, *(_DWORD *)(v6 + 368));
    if (v15 >= 0)
      v16 = (v15 + 1);
    else
      v16 = 0;
    v53 = 3;
    v54 = v16;
    sub_1C4D655B0(v55, "Instr", 5uLL);
    sub_1C4D655B0((uint64_t *)__p, "Asm", 3uLL);
    v17 = sub_1C5FDFDA8(a1, v14);
    if (v18 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v19 = (const void *)v17;
    v20 = (void *)v18;
    if (v18 >= 0x17)
    {
      v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v22 = v18 | 7;
      v23 = v22 + 1;
      v21 = (void **)operator new(v22 + 1);
      __dst[1] = v20;
      v37 = v23 | 0x8000000000000000;
      __dst[0] = v21;
    }
    else
    {
      HIBYTE(v37) = v18;
      v21 = __dst;
      if (!v18)
        goto LABEL_18;
    }
    memmove(v21, v19, (size_t)v20);
LABEL_18:
    *((_BYTE *)v20 + (_QWORD)v21) = 0;
    sub_1C4D673F4((uint64_t)v48, (unint64_t)__dst);
    sub_1C6174C6C((uint64_t)&v38, (uint64_t)__p, 1);
    v56 = 7;
    v57 = v38;
    v58 = v39;
    v38 = 0;
    v39 = 0;
    v59 = v40;
    v40 = 0;
    sub_1C6174C6C((uint64_t)&v41, (uint64_t)v49, 3);
    v24 = 21;
    do
    {
      llvm::json::Value::destroy(&v48[v24]);
      sub_1C4765904((uint64_t *)&__p[v24], 0);
      v24 -= 7;
    }
    while (v24 * 8);
    sub_1C4D65F7C(&v38);
    MEMORY[0x1CAA32FB4](v38, 8);
    llvm::json::Value::destroy(v48);
    sub_1C4765904((uint64_t *)__p, 0);
    if (SHIBYTE(v37) < 0)
      operator delete(__dst[0]);
    sub_1C4D655B0((uint64_t *)v49, "Defs", 4uLL);
    sub_1C5FDFE84((uint64_t *)__p, v6 + 16);
    sub_1C5FE25BC((uint64_t)&v38, (uint64_t)&v41, (uint64_t)v49, (uint64_t)__p);
    if (v47 < 0)
      operator delete(__p[0]);
    v25 = (void **)v49[0];
    v49[0] = 0;
    if (v25)
    {
      if (*((char *)v25 + 23) < 0)
        operator delete(*v25);
      MEMORY[0x1CAA32FC0](v25, 0x1012C40EC159624);
    }
    sub_1C4D655B0((uint64_t *)v49, "Uses", 4uLL);
    sub_1C5FDFE84((uint64_t *)__p, v6 + 88);
    sub_1C5FE25BC((uint64_t)&v38, (uint64_t)&v41, (uint64_t)v49, (uint64_t)__p);
    if (v47 < 0)
      operator delete(__p[0]);
    v26 = (void **)v49[0];
    v49[0] = 0;
    if (v26)
    {
      if (*((char *)v26 + 23) < 0)
        operator delete(*v26);
      MEMORY[0x1CAA32FC0](v26, 0x1012C40EC159624);
    }
    sub_1C4D655B0((uint64_t *)v49, "LastUses", 8uLL);
    sub_1C5FDFE84((uint64_t *)__p, v6 + 160);
    sub_1C5FE25BC((uint64_t)&v38, (uint64_t)&v41, (uint64_t)v49, (uint64_t)__p);
    if (v47 < 0)
      operator delete(__p[0]);
    v27 = (void **)v49[0];
    v49[0] = 0;
    if (v27)
    {
      if (*((char *)v27 + 23) < 0)
        operator delete(*v27);
      MEMORY[0x1CAA32FC0](v27, 0x1012C40EC159624);
    }
    sub_1C4D655B0((uint64_t *)v49, "AllocGPRs", 9uLL);
    sub_1C5FDFE84((uint64_t *)__p, v6 + 232);
    sub_1C5FE25BC((uint64_t)&v38, (uint64_t)&v41, (uint64_t)v49, (uint64_t)__p);
    if (v47 < 0)
      operator delete(__p[0]);
    v28 = (void **)v49[0];
    v49[0] = 0;
    if (v28)
    {
      if (*((char *)v28 + 23) < 0)
        operator delete(*v28);
      MEMORY[0x1CAA32FC0](v28, 0x1012C40EC159624);
    }
    sub_1C4D655B0((uint64_t *)v49, "LiveGPRs", 8uLL);
    sub_1C5FDFE84((uint64_t *)__p, v6 + 304);
    sub_1C5FE25BC((uint64_t)&v38, (uint64_t)&v41, (uint64_t)v49, (uint64_t)__p);
    if (v47 < 0)
      operator delete(__p[0]);
    v30 = (void **)v49[0];
    v49[0] = 0;
    if (v30)
    {
      if (*((char *)v30 + 23) < 0)
        operator delete(*v30);
      MEMORY[0x1CAA32FC0](v30, 0x1012C40EC159624);
    }
    LOWORD(v49[0]) = 7;
    v49[1] = v41;
    v29.n128_u64[0] = (unint64_t)v42;
    v49[2] = v42;
    v41 = 0;
    v42 = 0;
    v50 = v43;
    v43 = 0;
    v31 = *((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1) >= v45)
    {
      v32 = sub_1C4D6610C((unsigned __int16 **)&v44, (unsigned __int16 *)v49, v29);
    }
    else
    {
      llvm::json::Value::moveFrom(*((uint64_t *)&v44 + 1), (unsigned __int16 *)v49, v29);
      v32 = v31 + 32;
    }
    *((_QWORD *)&v44 + 1) = v32;
    llvm::json::Value::destroy(v49);
    sub_1C4D65F7C((uint64_t *)&v41);
    MEMORY[0x1CAA32FB4](v41, 8);
    v6 += 376;
    ++v5;
  }
  while (v6 != v35);
  v2 = v44;
  v33 = v45;
  a2 = v34;
LABEL_58:
  *(_WORD *)a2 = 8;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 24) = v33;
  v45 = 0;
  v44 = 0uLL;
  v49[0] = &v44;
  sub_1C4D66218((void ***)v49);
}

uint64_t sub_1C5FE1038(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int8x8_t *v57;
  uint64_t v58;
  int8x8_t v59;
  uint8x8_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  const void *v66;
  size_t v67;
  void **p_dst;
  uint64_t v69;
  uint64_t v70;
  void **v71;
  size_t v72;
  int v73;
  void **v74;
  size_t v75;
  int v76;
  void **v77;
  size_t v78;
  int v79;
  void **v80;
  size_t v81;
  int v82;
  void **v83;
  size_t v84;
  int v85;
  void **v86;
  size_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v150;
  char *v151;
  int v152;
  unint64_t v153;
  void *__p[2];
  char v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  void *v160[2];
  char v161;
  void *v162[2];
  char v163;
  void **__dst;
  size_t v165;
  int64_t v166;

  v3 = *(_DWORD *)(a1 + 160);
  if (v3)
  {
    v51 = a1;
    v52 = 0;
    v53 = 0;
    v5 = 0;
    v4 = 0;
    v54 = *(_QWORD *)(a1 + 152);
    v148 = v54 + 376 * v3;
    while (1)
    {
      v153 = (unint64_t)v53;
      v55 = *(unsigned int *)(v54 + 312);
      if ((_DWORD)v55)
      {
        v56 = 0;
        v57 = *(int8x8_t **)(v54 + 304);
        v58 = 8 * v55;
        do
        {
          v59 = *v57++;
          v60 = (uint8x8_t)vcnt_s8(v59);
          v60.i16[0] = vaddlv_u8(v60);
          v56 += v60.i32[0];
          v58 -= 8;
        }
        while (v58);
      }
      else
      {
        v56 = 0;
      }
      v61 = *(_QWORD *)(v51 + 32) + 168 * v52;
      v62 = sub_1C4914594((_QWORD *)(v54 + 304), 0, *(_DWORD *)(v54 + 368));
      if (v62 >= 0)
        v63 = v62 + 1;
      else
        v63 = 0;
      v152 = v63;
      v64 = sub_1C5FDFDA8(v51, v61);
      if (v65 >= 0x7FFFFFFFFFFFFFF8)
LABEL_235:
        abort();
      v66 = (const void *)v64;
      v67 = v65;
      v150 = v52;
      v151 = v5;
      if (v65 >= 0x17)
        break;
      HIBYTE(v166) = v65;
      p_dst = (void **)&__dst;
      if (v65)
        goto LABEL_91;
LABEL_92:
      *((_BYTE *)p_dst + v67) = 0;
      if (v166 >= 0)
        v71 = (void **)&__dst;
      else
        v71 = __dst;
      if (v166 >= 0)
        v72 = HIBYTE(v166) & 0x7F;
      else
        v72 = v165;
      v73 = sub_1C4D6889C(a2, v71, v72);
      sub_1C5FDFE84((uint64_t *)v162, v54 + 16);
      if (v163 >= 0)
        v74 = v162;
      else
        v74 = (void **)v162[0];
      if (v163 >= 0)
        v75 = v163 & 0x7F;
      else
        v75 = (size_t)v162[1];
      v76 = sub_1C4D6889C(a2, v74, v75);
      sub_1C5FDFE84((uint64_t *)v160, v54 + 88);
      if (v161 >= 0)
        v77 = v160;
      else
        v77 = (void **)v160[0];
      if (v161 >= 0)
        v78 = v161 & 0x7F;
      else
        v78 = (size_t)v160[1];
      v79 = sub_1C4D6889C(a2, v77, v78);
      sub_1C5FDFE84((uint64_t *)v158, v54 + 160);
      if (v159 >= 0)
        v80 = v158;
      else
        v80 = (void **)v158[0];
      if (v159 >= 0)
        v81 = v159 & 0x7F;
      else
        v81 = (size_t)v158[1];
      v82 = sub_1C4D6889C(a2, v80, v81);
      sub_1C5FDFE84((uint64_t *)v156, v54 + 232);
      if (v157 >= 0)
        v83 = v156;
      else
        v83 = (void **)v156[0];
      if (v157 >= 0)
        v84 = v157 & 0x7F;
      else
        v84 = (size_t)v156[1];
      v85 = sub_1C4D6889C(a2, v83, v84);
      sub_1C5FDFE84((uint64_t *)__p, v54 + 304);
      if (v155 >= 0)
        v86 = __p;
      else
        v86 = (void **)__p[0];
      if (v155 >= 0)
        v87 = v155 & 0x7F;
      else
        v87 = (size_t)__p[1];
      v88 = sub_1C4D6889C(a2, v86, v87);
      v89 = v73;
      v90 = v76;
      v91 = v79;
      v92 = v82;
      v93 = v85;
      *(_BYTE *)(a2 + 70) = 1;
      v94 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
      sub_1C5589334((uint64_t *)a2, 14, v88);
      sub_1C5589334((uint64_t *)a2, 12, v93);
      sub_1C5589334((uint64_t *)a2, 10, v92);
      sub_1C5589334((uint64_t *)a2, 8, v91);
      sub_1C5589334((uint64_t *)a2, 6, v90);
      sub_1C5589334((uint64_t *)a2, 4, v89);
      v95 = sub_1C4D66580(a2, v94);
      *(_BYTE *)(a2 + 70) = 1;
      v96 = *(_QWORD *)(a2 + 40);
      v97 = *(_QWORD *)(a2 + 48);
      v98 = *(_QWORD *)(a2 + 32);
      v5 = v151;
      if (!v95)
        goto LABEL_152;
      v99 = v95;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v100 = ((_BYTE)v97 - ((_BYTE)v98 + (_BYTE)v96)) & 3;
      if (v97 - *(_QWORD *)(a2 + 56) < v100)
      {
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v97 - ((_BYTE)v98 + (_BYTE)v96)) & 3);
        *(_QWORD *)(a2 + 48) -= v100;
LABEL_135:
        v104 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v104++) = 0;
        while (v100 != v104);
        v102 = *(_QWORD *)(a2 + 40);
        v101 = *(_QWORD *)(a2 + 48);
        v103 = *(_QWORD *)(a2 + 32);
        goto LABEL_138;
      }
      v101 = v97 - v100;
      *(_QWORD *)(a2 + 48) = v97 - v100;
      if ((((_BYTE)v97 - ((_BYTE)v98 + (_BYTE)v96)) & 3) != 0)
        goto LABEL_135;
      LODWORD(v102) = v96;
      LODWORD(v103) = v98;
LABEL_138:
      v105 = v102 - v101 + v103 - v99 + 4;
      if ((_DWORD)v102 - (_DWORD)v101 + (_DWORD)v103 - v99 == -4 && *(_BYTE *)(a2 + 80) == 0)
        goto LABEL_152;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v107 = ((_BYTE)v101 - ((_BYTE)v103 + (_BYTE)v102)) & 3;
      v108 = *(_QWORD *)(a2 + 56);
      if (v101 - v108 < v107)
      {
        sub_1C4D663A4((uint64_t *)a2, v107);
        *(_QWORD *)(a2 + 48) -= v107;
LABEL_146:
        v110 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v110++) = 0;
        while (v107 != v110);
        v109 = *(_QWORD *)(a2 + 48);
        v108 = *(_QWORD *)(a2 + 56);
        goto LABEL_149;
      }
      v109 = v101 - v107;
      *(_QWORD *)(a2 + 48) = v109;
      if (v107)
        goto LABEL_146;
LABEL_149:
      if ((unint64_t)(v109 - v108) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v109 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v109 - 4) = v105;
      v111 = v109 - 4;
      *(_QWORD *)(a2 + 48) = v111;
      sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v111 + *(_DWORD *)(a2 + 40));
LABEL_152:
      if (!v152 && !*(_BYTE *)(a2 + 80))
      {
        v112 = 1;
        if (v56)
          goto LABEL_167;
        goto LABEL_166;
      }
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v113 = *(_QWORD *)(a2 + 48);
      v114 = *(_QWORD *)(a2 + 56);
      v115 = ((_BYTE)v113 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v113 - v114 < v115)
      {
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v113 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        *(_QWORD *)(a2 + 48) -= v115;
      }
      else
      {
        v116 = v113 - v115;
        *(_QWORD *)(a2 + 48) = v116;
        if (!v115)
          goto LABEL_163;
      }
      v117 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v117++) = 0;
      while (v115 != v117);
      v116 = *(_QWORD *)(a2 + 48);
      v114 = *(_QWORD *)(a2 + 56);
LABEL_163:
      if ((unint64_t)(v116 - v114) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v116 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v116 - 4) = v152;
      v118 = v116 - 4;
      *(_QWORD *)(a2 + 48) = v118;
      sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v118 + *(_DWORD *)(a2 + 40));
      v112 = *(_BYTE *)(a2 + 80) == 0;
      if (v56)
      {
LABEL_167:
        if (*(_QWORD *)(a2 + 72) <= 3uLL)
          *(_QWORD *)(a2 + 72) = 4;
        v119 = *(_QWORD *)(a2 + 48);
        v120 = *(_QWORD *)(a2 + 56);
        v121 = ((_BYTE)v119 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
        if (v119 - v120 >= v121)
        {
          v122 = v119 - v121;
          *(_QWORD *)(a2 + 48) = v122;
          if (v121)
          {
LABEL_171:
            v123 = 0;
            do
              *(_BYTE *)(*(_QWORD *)(a2 + 48) + v123++) = 0;
            while (v121 != v123);
            v122 = *(_QWORD *)(a2 + 48);
            v120 = *(_QWORD *)(a2 + 56);
          }
          if ((unint64_t)(v122 - v120) <= 3)
          {
            sub_1C4D663A4((uint64_t *)a2, 4uLL);
            v122 = *(_QWORD *)(a2 + 48);
          }
          *(_DWORD *)(v122 - 4) = v56;
          v124 = v122 - 4;
          *(_QWORD *)(a2 + 48) = v124;
          sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - v124 + *(_DWORD *)(a2 + 40));
          goto LABEL_177;
        }
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v119 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        *(_QWORD *)(a2 + 48) -= v121;
        goto LABEL_171;
      }
LABEL_166:
      if (!v112)
        goto LABEL_167;
LABEL_177:
      v125 = sub_1C4D66580(a2, (unsigned __int16)v98 - (unsigned __int16)v97 + (unsigned __int16)v96);
      v126 = v125;
      v53 = (char *)v153;
      if ((unint64_t)v4 >= v153)
      {
        v128 = (v4 - v151) >> 2;
        v129 = v128 + 1;
        v51 = a1;
        v127 = v150;
        if ((unint64_t)(v128 + 1) >> 62)
          goto LABEL_235;
        if ((uint64_t)(v153 - (_QWORD)v151) >> 1 > v129)
          v129 = (uint64_t)(v153 - (_QWORD)v151) >> 1;
        if (v153 - (unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
          v130 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
        {
          if (v130 >> 62)
            sub_1C4764EE4();
          v131 = (char *)operator new(4 * v130);
        }
        else
        {
          v131 = 0;
        }
        v132 = &v131[4 * v128];
        *(_DWORD *)v132 = v126;
        v133 = v132 + 4;
        while (v4 != v151)
        {
          v134 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v132 - 1) = v134;
          v132 -= 4;
        }
        v53 = &v131[4 * v130];
        if (v151)
          operator delete(v151);
        v5 = v132;
        v4 = v133;
      }
      else
      {
        *(_DWORD *)v4 = v125;
        v4 += 4;
        v51 = a1;
        v127 = v150;
      }
      if (v155 < 0)
        operator delete(__p[0]);
      if (v157 < 0)
        operator delete(v156[0]);
      if (v159 < 0)
        operator delete(v158[0]);
      if (v161 < 0)
        operator delete(v160[0]);
      if (v163 < 0)
        operator delete(v162[0]);
      if (SHIBYTE(v166) < 0)
        operator delete(__dst);
      v54 += 376;
      v52 = v127 + 1;
      if (v54 == v148)
        goto LABEL_3;
    }
    v69 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v65 | 7) != 0x17)
      v69 = v65 | 7;
    v70 = v69 + 1;
    p_dst = (void **)operator new(v69 + 1);
    v165 = v67;
    v166 = v70 | 0x8000000000000000;
    __dst = p_dst;
LABEL_91:
    memmove(p_dst, v66, v67);
    goto LABEL_92;
  }
  v4 = 0;
  v5 = 0;
LABEL_3:
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = (char *)&unk_1C8677265;
  else
    v7 = v5;
  *(_BYTE *)(a2 + 70) = 1;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = ((_BYTE)v8 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v8 - *(_QWORD *)(a2 + 56) < v9)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v8 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v9;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v8 - v9;
    if (!v9)
      goto LABEL_14;
  }
  v10 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v10++) = 0;
  while (v9 != v10);
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
LABEL_14:
  v11 = *(_QWORD *)(a2 + 48);
  v12 = ((_BYTE)v11 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v11 - *(_QWORD *)(a2 + 56) < v12)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v11 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v12;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v11 - v12;
    if (!v12)
      goto LABEL_18;
  }
  v13 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v13++) = 0;
  while (v12 != v13);
LABEL_18:
  if (v5 != v4)
  {
    v135 = v6 >> 2;
    do
    {
      --v135;
      v136 = *(_DWORD *)&v7[4 * v135];
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v137 = *(_QWORD *)(a2 + 32);
      v138 = *(_QWORD *)(a2 + 40);
      v139 = *(_QWORD *)(a2 + 48);
      v140 = ((int)v139 - ((int)v137 + (int)v138)) & 3;
      if (v139 - *(_QWORD *)(a2 + 56) < v140)
      {
        sub_1C4D663A4((uint64_t *)a2, ((int)v139 - ((int)v137 + (int)v138)) & 3);
        *(_QWORD *)(a2 + 48) -= v140;
      }
      else
      {
        v141 = v139 - v140;
        *(_QWORD *)(a2 + 48) = v141;
        if (!v140)
        {
          v142 = v137 + v138 - v141;
          goto LABEL_223;
        }
      }
      v143 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v143++) = 0;
      while (v140 != v143);
      v138 = *(_QWORD *)(a2 + 40);
      v141 = *(_QWORD *)(a2 + 48);
      v137 = *(_QWORD *)(a2 + 32);
      v142 = v137 - v141 + v138;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
LABEL_223:
      v144 = ((_BYTE)v141 - ((_BYTE)v137 + (_BYTE)v138)) & 3;
      v145 = *(_QWORD *)(a2 + 56);
      if (v141 - v145 < v144)
      {
        sub_1C4D663A4((uint64_t *)a2, v144);
        *(_QWORD *)(a2 + 48) -= v144;
LABEL_225:
        v147 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v147++) = 0;
        while (v144 != v147);
        v146 = *(_QWORD *)(a2 + 48);
        v145 = *(_QWORD *)(a2 + 56);
        goto LABEL_228;
      }
      v146 = v141 - v144;
      *(_QWORD *)(a2 + 48) = v141 - v144;
      if (v144)
        goto LABEL_225;
LABEL_228:
      if ((unint64_t)(v146 - v145) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v146 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v146 - 4) = v142 - v136 + 4;
      *(_QWORD *)(a2 + 48) = v146 - 4;
    }
    while (v135);
  }
  *(_BYTE *)(a2 + 70) = 0;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v15 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
  v16 = ((_BYTE)v15 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v15 - v14 < v16)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v15 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v16;
  }
  else
  {
    v17 = v15 - v16;
    *(_QWORD *)(a2 + 48) = v15 - v16;
    if (!v16)
      goto LABEL_26;
  }
  v18 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v18++) = 0;
  while (v16 != v18);
  v17 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
LABEL_26:
  if ((unint64_t)(v17 - v14) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v17 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v17 - 4) = (unint64_t)v6 >> 2;
  v19 = v17 - 4;
  *(_QWORD *)(a2 + 48) = v19;
  v20 = *(_QWORD *)(a2 + 32);
  v21 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a2 + 70) = 1;
  v22 = v20 - v19 + v21;
  if (v22)
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v23 = ((_BYTE)v19 - ((_BYTE)v20 + (_BYTE)v21)) & 3;
    if (v19 - *(_QWORD *)(a2 + 56) < v23)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v19 - ((_BYTE)v20 + (_BYTE)v21)) & 3);
      *(_QWORD *)(a2 + 48) -= v23;
    }
    else
    {
      v24 = v19 - v23;
      *(_QWORD *)(a2 + 48) = v24;
      if (!v23)
      {
LABEL_36:
        v26 = v21 - v24 + v20 - v22 + 4;
        if ((_DWORD)v21 - (_DWORD)v24 + (_DWORD)v20 - v22 == -4 && *(_BYTE *)(a2 + 80) == 0)
          goto LABEL_50;
        if (*(_QWORD *)(a2 + 72) <= 3uLL)
          *(_QWORD *)(a2 + 72) = 4;
        v28 = ((_BYTE)v24 - ((_BYTE)v20 + (_BYTE)v21)) & 3;
        v29 = *(_QWORD *)(a2 + 56);
        if (v24 - v29 < v28)
        {
          sub_1C4D663A4((uint64_t *)a2, v28);
          *(_QWORD *)(a2 + 48) -= v28;
        }
        else
        {
          v30 = v24 - v28;
          *(_QWORD *)(a2 + 48) = v24 - v28;
          if (!v28)
          {
LABEL_47:
            if ((unint64_t)(v30 - v29) <= 3)
            {
              sub_1C4D663A4((uint64_t *)a2, 4uLL);
              v30 = *(_QWORD *)(a2 + 48);
            }
            *(_DWORD *)(v30 - 4) = v26;
            v32 = v30 - 4;
            *(_QWORD *)(a2 + 48) = v32;
            sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - v32 + *(_DWORD *)(a2 + 40));
            goto LABEL_50;
          }
        }
        v31 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v31++) = 0;
        while (v28 != v31);
        v30 = *(_QWORD *)(a2 + 48);
        v29 = *(_QWORD *)(a2 + 56);
        goto LABEL_47;
      }
    }
    v25 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v25++) = 0;
    while (v23 != v25);
    v21 = *(_QWORD *)(a2 + 40);
    v24 = *(_QWORD *)(a2 + 48);
    v20 = *(_QWORD *)(a2 + 32);
    goto LABEL_36;
  }
LABEL_50:
  v33 = sub_1C4D66580(a2, v22);
  *(_BYTE *)(a2 + 70) = 1;
  v34 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  v35 = sub_1C6174D80(a2, 1);
  sub_1C4D66288((uint64_t *)a2, 4, v35);
  if (!v33)
    goto LABEL_72;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v36 = *(_QWORD *)(a2 + 32);
  v37 = *(_QWORD *)(a2 + 40);
  v38 = *(_QWORD *)(a2 + 48);
  v39 = ((_BYTE)v38 - ((_BYTE)v36 + (_BYTE)v37)) & 3;
  if (v38 - *(_QWORD *)(a2 + 56) < v39)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v38 - ((_BYTE)v36 + (_BYTE)v37)) & 3);
    *(_QWORD *)(a2 + 48) -= v39;
LABEL_55:
    v41 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v41++) = 0;
    while (v39 != v41);
    v37 = *(_QWORD *)(a2 + 40);
    v40 = *(_QWORD *)(a2 + 48);
    v36 = *(_QWORD *)(a2 + 32);
    goto LABEL_58;
  }
  v40 = v38 - v39;
  *(_QWORD *)(a2 + 48) = v40;
  if (v39)
    goto LABEL_55;
LABEL_58:
  v42 = v37 - v40 + v36 - v33 + 4;
  if ((_DWORD)v37 - (_DWORD)v40 + (_DWORD)v36 - v33 == -4 && *(_BYTE *)(a2 + 80) == 0)
    goto LABEL_72;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v44 = ((_BYTE)v40 - ((_BYTE)v36 + (_BYTE)v37)) & 3;
  v45 = *(_QWORD *)(a2 + 56);
  if (v40 - v45 < v44)
  {
    sub_1C4D663A4((uint64_t *)a2, v44);
    *(_QWORD *)(a2 + 48) -= v44;
LABEL_66:
    v47 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v47++) = 0;
    while (v44 != v47);
    v46 = *(_QWORD *)(a2 + 48);
    v45 = *(_QWORD *)(a2 + 56);
    goto LABEL_69;
  }
  v46 = v40 - v44;
  *(_QWORD *)(a2 + 48) = v40 - v44;
  if (v44)
    goto LABEL_66;
LABEL_69:
  if ((unint64_t)(v46 - v45) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v46 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v46 - 4) = v42;
  v48 = v46 - 4;
  *(_QWORD *)(a2 + 48) = v48;
  sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v48 + *(_DWORD *)(a2 + 40));
LABEL_72:
  v49 = sub_1C4D66580(a2, v34);
  if (v5)
    operator delete(v5);
  return v49 | 0x100000000;
}

llvm::raw_ostream *sub_1C5FE1E48(llvm::raw_ostream *this, int a2, unsigned int a3)
{
  llvm::raw_ostream *v3;
  unsigned int i;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int j;
  _BYTE *v11;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  char v14;
  _BYTE *v15;

  v3 = this;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      if (i < 0xC8)
        v7 = 2;
      else
        v7 = 3;
      if (i < 0x14)
        v8 = 1;
      else
        v8 = v7;
      v9 = i >> 1;
      for (j = a3; j; --j)
        v9 /= 0xAu;
      if (v8 >= a3)
      {
        if (v8 == a3)
        {
          v12 = (_BYTE *)*((_QWORD *)v3 + 4);
          if ((unint64_t)v12 >= *((_QWORD *)v3 + 3))
          {
            v13 = v3;
            v14 = 114;
            goto LABEL_20;
          }
          *((_QWORD *)v3 + 4) = v12 + 1;
          *v12 = 114;
        }
        else
        {
          this = sub_1C5E21910(v3, v9 - 10 * (((1717986919 * (unint64_t)v9) >> 32) >> 2), 0, 0, 0);
        }
      }
      else
      {
        v11 = (_BYTE *)*((_QWORD *)v3 + 4);
        if ((unint64_t)v11 >= *((_QWORD *)v3 + 3))
        {
          v13 = v3;
          v14 = 32;
LABEL_20:
          this = llvm::raw_ostream::write(v13, v14);
          continue;
        }
        *((_QWORD *)v3 + 4) = v11 + 1;
        *v11 = 32;
      }
    }
  }
  v15 = (_BYTE *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v3 + 3))
    return llvm::raw_ostream::write(v3, 10);
  *((_QWORD *)v3 + 4) = v15 + 1;
  *v15 = 10;
  return this;
}

void sub_1C5FE1FAC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  unsigned int v24;
  BOOL v25;
  char *v26;
  uint64_t v27;
  void *v28;
  unsigned int v29;
  char *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unsigned int v38;
  const void *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  _QWORD *v44;
  unint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  unsigned int v53;
  _QWORD *v54;
  const void *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  int v73;
  char *v74;
  char **v75;
  unint64_t v76;
  unint64_t v77;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 == a2)
    return;
  v3 = a2;
  v4 = a1;
  if (v2 > a2)
  {
    v5 = *(char **)a1;
    v6 = 376 * v2;
    v7 = 376 * a2;
    do
    {
      v8 = &v5[v6];
      v9 = *(char **)&v5[v6 - 72];
      if (&v5[v6 - 56] != v9)
        free(v9);
      v10 = (char *)*((_QWORD *)v8 - 18);
      if (v8 - 128 != v10)
        free(v10);
      v11 = &v5[v6];
      v12 = *(char **)&v5[v6 - 216];
      if (&v5[v6 - 200] != v12)
        free(v12);
      v13 = (char *)*((_QWORD *)v11 - 36);
      if (v11 - 272 != v13)
        free(v13);
      v14 = *(char **)&v5[v6 - 360];
      if (&v5[v6 - 344] != v14)
        free(v14);
      v5 -= 376;
      v7 += 376;
    }
    while (v6 != v7);
    goto LABEL_100;
  }
  if (*(unsigned int *)(a1 + 12) >= a2)
  {
    v15 = *(char **)a1;
    goto LABEL_97;
  }
  v77 = 0;
  v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 376, &v77);
  v16 = *(char **)v4;
  v17 = *(_DWORD *)(v4 + 8);
  if (!v17)
    goto LABEL_94;
  v75 = (char **)v4;
  v76 = v3;
  v18 = 0;
  v19 = 376 * v17;
  do
  {
    v20 = &v16[v18];
    v21 = &v15[v18];
    *(_OWORD *)v21 = *(_OWORD *)&v16[v18];
    v22 = &v15[v18 + 32];
    *(_QWORD *)&v15[v18 + 16] = v22;
    v23 = &v15[v18 + 16];
    *((_QWORD *)v21 + 3) = 0x600000000;
    v24 = *(_DWORD *)&v16[v18 + 24];
    if (v24)
      v25 = v20 == v21;
    else
      v25 = 1;
    if (!v25)
    {
      v26 = (char *)*((_QWORD *)v20 + 2);
      if (v20 + 32 != v26)
      {
        *(_QWORD *)v23 = v26;
        v59 = *(_DWORD *)&v16[v18 + 28];
        *((_DWORD *)v21 + 6) = v24;
        *((_DWORD *)v21 + 7) = v59;
        *((_QWORD *)v20 + 2) = v20 + 32;
        *(_DWORD *)&v16[v18 + 28] = 0;
        goto LABEL_28;
      }
      if (v24 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v23, (uint64_t)&v15[v18 + 32], *(unsigned int *)&v16[v18 + 24], 8);
        v27 = *((unsigned int *)v20 + 6);
        if (!(_DWORD)v27)
          goto LABEL_27;
        v26 = (char *)*((_QWORD *)v20 + 2);
        v22 = *(char **)&v15[v18 + 16];
      }
      else
      {
        v27 = *(unsigned int *)&v16[v18 + 24];
      }
      memcpy(v22, v26, 8 * v27);
LABEL_27:
      *((_DWORD *)v21 + 6) = v24;
LABEL_28:
      *((_DWORD *)v20 + 6) = 0;
    }
    *((_DWORD *)v21 + 20) = *((_DWORD *)v20 + 20);
    v28 = v21 + 104;
    *((_QWORD *)v21 + 11) = v21 + 104;
    *((_QWORD *)v21 + 12) = 0x600000000;
    v29 = *((_DWORD *)v20 + 24);
    if (v29 && v20 != v21)
    {
      v30 = &v16[v18];
      v31 = *(const void **)&v16[v18 + 88];
      v32 = (uint64_t)&v16[v18 + 104];
      if ((const void *)v32 != v31)
      {
        *((_QWORD *)v21 + 11) = v31;
        v60 = *(_DWORD *)&v16[v18 + 100];
        *((_DWORD *)v21 + 24) = v29;
        *((_DWORD *)v21 + 25) = v60;
        *((_QWORD *)v30 + 11) = v32;
        *(_DWORD *)&v16[v18 + 100] = 0;
        goto LABEL_36;
      }
      if (v29 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v21 + 88), (uint64_t)(v21 + 104), *((unsigned int *)v20 + 24), 8);
        v33 = *((unsigned int *)v20 + 24);
        if (!(_DWORD)v33)
          goto LABEL_35;
        v31 = (const void *)*((_QWORD *)v30 + 11);
        v28 = (void *)*((_QWORD *)v21 + 11);
      }
      else
      {
        v33 = *((unsigned int *)v20 + 24);
      }
      memcpy(v28, v31, 8 * v33);
LABEL_35:
      *((_DWORD *)v21 + 24) = v29;
LABEL_36:
      *((_DWORD *)v20 + 24) = 0;
    }
    v34 = &v15[v18];
    v35 = &v16[v18];
    *((_DWORD *)v34 + 38) = *(_DWORD *)&v16[v18 + 152];
    v36 = &v15[v18 + 176];
    *(_QWORD *)&v15[v18 + 160] = v36;
    v37 = &v15[v18 + 160];
    *((_QWORD *)v34 + 21) = 0x600000000;
    v38 = *(_DWORD *)&v16[v18 + 168];
    if (v38 && v20 != v21)
    {
      v39 = (const void *)*((_QWORD *)v35 + 20);
      v40 = &v16[v18];
      v41 = (uint64_t)&v16[v18 + 176];
      if ((const void *)v41 != v39)
      {
        *(_QWORD *)v37 = v39;
        v61 = *((_DWORD *)v40 + 43);
        *((_DWORD *)v34 + 42) = v38;
        *((_DWORD *)v34 + 43) = v61;
        *((_QWORD *)v35 + 20) = v41;
        *((_DWORD *)v40 + 43) = 0;
        goto LABEL_44;
      }
      if (v38 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v37, (uint64_t)&v15[v18 + 176], *(unsigned int *)&v16[v18 + 168], 8);
        v42 = *((unsigned int *)v35 + 42);
        if (!(_DWORD)v42)
          goto LABEL_43;
        v39 = (const void *)*((_QWORD *)v35 + 20);
        v36 = *(char **)&v15[v18 + 160];
      }
      else
      {
        v42 = *(unsigned int *)&v16[v18 + 168];
      }
      memcpy(v36, v39, 8 * v42);
LABEL_43:
      *((_DWORD *)v34 + 42) = v38;
LABEL_44:
      *((_DWORD *)v35 + 42) = 0;
    }
    *((_DWORD *)v34 + 56) = *((_DWORD *)v35 + 56);
    v43 = v34 + 248;
    *((_QWORD *)v34 + 29) = v34 + 248;
    v44 = v34 + 232;
    *((_QWORD *)v34 + 30) = 0x600000000;
    v45 = *((unsigned int *)v35 + 60);
    if ((_DWORD)v45 && v20 != v21)
    {
      v46 = &v16[v18];
      v47 = *(const void **)&v16[v18 + 232];
      v48 = (uint64_t)&v16[v18 + 248];
      if ((const void *)v48 != v47)
      {
        *v44 = v47;
        v62 = *(_DWORD *)&v16[v18 + 244];
        *((_DWORD *)v34 + 60) = v45;
        *((_DWORD *)v34 + 61) = v62;
        *((_QWORD *)v46 + 29) = v48;
        *(_DWORD *)&v16[v18 + 244] = 0;
        goto LABEL_52;
      }
      if (v45 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v44, (uint64_t)(v34 + 248), v45, 8);
        v49 = *((unsigned int *)v35 + 60);
        if (!(_DWORD)v49)
          goto LABEL_51;
        v47 = (const void *)*((_QWORD *)v46 + 29);
        v43 = (void *)*((_QWORD *)v34 + 29);
      }
      else
      {
        v49 = *((unsigned int *)v35 + 60);
      }
      memcpy(v43, v47, 8 * v49);
LABEL_51:
      *((_DWORD *)v34 + 60) = v45;
LABEL_52:
      *((_DWORD *)v35 + 60) = 0;
    }
    v50 = &v15[v18];
    v51 = &v16[v18];
    *((_DWORD *)v50 + 74) = *(_DWORD *)&v16[v18 + 296];
    v52 = &v15[v18 + 320];
    *((_QWORD *)v50 + 38) = v52;
    *((_QWORD *)v50 + 39) = 0x600000000;
    v53 = *(_DWORD *)&v16[v18 + 312];
    if (v53 && v20 != v21)
    {
      v54 = v50 + 304;
      v55 = (const void *)*((_QWORD *)v51 + 38);
      v56 = &v16[v18];
      v57 = (uint64_t)&v16[v18 + 320];
      if ((const void *)v57 == v55)
      {
        if (v53 < 7)
        {
          v58 = *(unsigned int *)&v16[v18 + 312];
          goto LABEL_58;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v54, (uint64_t)&v15[v18 + 320], *(unsigned int *)&v16[v18 + 312], 8);
        v58 = *((unsigned int *)v51 + 78);
        if ((_DWORD)v58)
        {
          v55 = (const void *)*((_QWORD *)v51 + 38);
          v52 = (char *)*((_QWORD *)v50 + 38);
LABEL_58:
          memcpy(v52, v55, 8 * v58);
        }
        *((_DWORD *)v50 + 78) = v53;
      }
      else
      {
        *v54 = v55;
        *((_DWORD *)v50 + 78) = v53;
        *((_DWORD *)v50 + 79) = *((_DWORD *)v56 + 79);
        *((_QWORD *)v51 + 38) = v57;
        *((_DWORD *)v56 + 79) = 0;
      }
      *((_DWORD *)v51 + 78) = 0;
    }
    *((_DWORD *)v50 + 92) = *((_DWORD *)v51 + 92);
    v18 += 376;
  }
  while (v19 != v18);
  v4 = (uint64_t)v75;
  v16 = *v75;
  v63 = *((_DWORD *)v75 + 2);
  if (v63)
  {
    v64 = 0;
    v65 = 376 * v63;
    do
    {
      v66 = &v16[v65];
      v67 = *(char **)&v16[v65 - 72];
      if (&v16[v65 - 56] != v67)
        free(v67);
      v68 = (char *)*((_QWORD *)v66 - 18);
      if (v66 - 128 != v68)
        free(v68);
      v69 = &v16[v65];
      v70 = *(char **)&v16[v65 - 216];
      if (&v16[v65 - 200] != v70)
        free(v70);
      v71 = (char *)*((_QWORD *)v69 - 36);
      if (v69 - 272 != v71)
        free(v71);
      v72 = *(char **)&v16[v65 - 360];
      if (&v16[v65 - 344] != v72)
        free(v72);
      v16 -= 376;
      v64 += 376;
    }
    while (v65 != v64);
    v16 = *v75;
  }
  v3 = v76;
LABEL_94:
  v73 = v77;
  if (v16 != (char *)(v4 + 16))
    free(v16);
  *(_QWORD *)v4 = v15;
  *(_DWORD *)(v4 + 12) = v73;
  v2 = *(unsigned int *)(v4 + 8);
LABEL_97:
  if (v2 != v3)
  {
    v74 = &v15[376 * v2];
    do
    {
      *((_QWORD *)v74 + 46) = 0;
      *((_OWORD *)v74 + 21) = 0uLL;
      *((_OWORD *)v74 + 22) = 0uLL;
      *((_OWORD *)v74 + 19) = 0uLL;
      *((_OWORD *)v74 + 20) = 0uLL;
      *((_OWORD *)v74 + 17) = 0uLL;
      *((_OWORD *)v74 + 18) = 0uLL;
      *((_OWORD *)v74 + 15) = 0uLL;
      *((_OWORD *)v74 + 16) = 0uLL;
      *((_OWORD *)v74 + 13) = 0uLL;
      *((_OWORD *)v74 + 14) = 0uLL;
      *((_OWORD *)v74 + 12) = 0uLL;
      *((_OWORD *)v74 + 9) = 0uLL;
      *((_OWORD *)v74 + 10) = 0uLL;
      *((_OWORD *)v74 + 7) = 0uLL;
      *((_OWORD *)v74 + 8) = 0uLL;
      *((_OWORD *)v74 + 5) = 0uLL;
      *((_OWORD *)v74 + 6) = 0uLL;
      *((_OWORD *)v74 + 3) = 0uLL;
      *((_OWORD *)v74 + 4) = 0uLL;
      *(_OWORD *)v74 = 0uLL;
      *((_OWORD *)v74 + 1) = 0uLL;
      *((_OWORD *)v74 + 11) = 0uLL;
      *((_OWORD *)v74 + 2) = 0uLL;
      *((_QWORD *)v74 + 2) = v74 + 32;
      *((_DWORD *)v74 + 7) = 6;
      *((_QWORD *)v74 + 11) = v74 + 104;
      *((_DWORD *)v74 + 25) = 6;
      *((_QWORD *)v74 + 20) = v74 + 176;
      *((_DWORD *)v74 + 43) = 6;
      *((_QWORD *)v74 + 29) = v74 + 248;
      *((_DWORD *)v74 + 61) = 6;
      *((_QWORD *)v74 + 38) = v74 + 320;
      *((_DWORD *)v74 + 79) = 6;
      v74 += 376;
    }
    while (v74 != &v15[376 * v3]);
  }
LABEL_100:
  *(_DWORD *)(v4 + 8) = v3;
}

void sub_1C5FE25BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;

  __p[0] = 0;
  v8 = sub_1C4D658E0((uint64_t *)a2, a3, __p);
  v9 = (char *)__p[0];
  if ((v8 & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v9 = (char *)sub_1C4D65BC4(a2, a3, a3, (uint64_t)__p[0]);
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    sub_1C4765904((uint64_t *)v9, v11);
    *(_OWORD *)(v9 + 8) = *(_OWORD *)(a3 + 8);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v14 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    sub_1C4D673F4((uint64_t)(v9 + 24), (unint64_t)__p);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    v10 = 1;
  }
  v12 = *(_QWORD *)a2 + 56 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v10;
}

uint64_t sub_1C5FE269C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  if (a6)
  {
    v11 = result;
    v13 = operator new();
    v15 = sub_1C5FDD9FC(v13, v11, a2, a3, a4, a5);
    v14 = sub_1C5FE2750((char **)a7, &v15);
    result = v15;
    *(_QWORD *)(a7 + 8) = v14;
    v15 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  }
  return result;
}

char *sub_1C5FE2750(char **a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (a1[1] - *a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 61)
      sub_1C4764EE4();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[8 * v2];
  v10 = &v8[8 * v7];
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)v9 = v11;
  v12 = v9 + 8;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v9 - 1) = v15;
      v9 -= 8;
    }
    while (v14 != v13);
    v14 = *a1;
    v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      v17 = v18;
      *(_QWORD *)v16 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 80))(v17);
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

uint64_t sub_1C5FE2858()
{
  uint64_t v0;
  uint64_t v1;

  qword_1ED828F88 = (uint64_t)"AGX Custom View Options";
  unk_1ED828F90 = 23;
  qword_1ED828F98 = (uint64_t)"";
  unk_1ED828FA0 = 0;
  llvm::cl::OptionCategory::registerCategory((llvm::cl::OptionCategory *)&qword_1ED828F88);
  v0 = sub_1C47AD050((uint64_t)qword_1ED828FA8, 0, 0);
  qword_1ED829028 = 0;
  byte_1ED829039 = 0;
  qword_1ED829030 = (uint64_t)&off_1E7F9E8D8;
  qword_1ED828FA8[0] = (uint64_t)&unk_1E8138EB8;
  qword_1ED829040 = (uint64_t)&off_1E819E9A0;
  qword_1ED829048 = (uint64_t)&unk_1E8138F20;
  qword_1ED829060 = (uint64_t)&qword_1ED829048;
  llvm::cl::Option::setArgStr(v0, "agx-instr-info", 0xEuLL);
  qword_1ED828FC8 = (uint64_t)"Print the AGX Instruction Info Views";
  unk_1ED828FD0 = 36;
  llvm::cl::Option::addCategory((llvm::cl::Option *)qword_1ED828FA8, (llvm::cl::OptionCategory *)&qword_1ED828F88);
  sub_1C4EB7838((llvm *)&qword_1ED829028, qword_1ED828FA8, &byte_1EF8F7670);
  *(_BYTE *)qword_1ED829028 = 0;
  unk_1ED829038 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED828FA8);
  __cxa_atexit((void (*)(void *))sub_1C4EB22A8, qword_1ED828FA8, &dword_1C475E000);
  v1 = sub_1C47AD050((uint64_t)qword_1ED829068, 0, 0);
  byte_1ED8290F9 = 0;
  qword_1ED8290E8 = 0;
  unk_1ED8290F0 = &off_1E7F9E8D8;
  qword_1ED829068[0] = (uint64_t)&unk_1E8138EB8;
  qword_1ED829100 = (uint64_t)&off_1E819E9A0;
  qword_1ED829108[0] = &unk_1E8138F20;
  qword_1ED829120 = (uint64_t)qword_1ED829108;
  llvm::cl::Option::setArgStr(v1, "agx-profiler-weights", 0x14uLL);
  qword_1ED829088 = (uint64_t)"Print the profiler weights";
  unk_1ED829090 = 26;
  llvm::cl::Option::addCategory((llvm::cl::Option *)qword_1ED829068, (llvm::cl::OptionCategory *)&qword_1ED828F88);
  sub_1C4EB7838((llvm *)&qword_1ED8290E8, qword_1ED829068, &byte_1EF8F7671);
  *(_BYTE *)qword_1ED8290E8 = 0;
  unk_1ED8290F8 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED829068);
  __cxa_atexit((void (*)(void *))sub_1C4EB22A8, qword_1ED829068, &dword_1C475E000);
  sub_1C47AD050((uint64_t)qword_1ED829128, 0, 0);
  qword_1ED8291A8 = 0;
  byte_1ED8291B9 = 0;
  qword_1ED8291B0 = (uint64_t)&off_1E7F9E8D8;
  qword_1ED829128[0] = (uint64_t)&unk_1E8138EB8;
  qword_1ED8291C0 = (uint64_t)&off_1E819E9A0;
  qword_1ED8291C8 = (uint64_t)&unk_1E8138F20;
  qword_1ED8291E0 = (uint64_t)&qword_1ED8291C8;
  llvm::cl::Option::setArgStr((uint64_t)qword_1ED829128, "agx-pressure", 0xCuLL);
  qword_1ED829148 = (uint64_t)"Print the AGX pressure view";
  unk_1ED829150 = 27;
  llvm::cl::Option::addCategory((llvm::cl::Option *)qword_1ED829128, (llvm::cl::OptionCategory *)&qword_1ED828F88);
  sub_1C4EB7838((llvm *)&qword_1ED8291A8, qword_1ED829128, &byte_1EF8F7672);
  *(_BYTE *)qword_1ED8291A8 = 0;
  unk_1ED8291B8 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED829128);
  __cxa_atexit((void (*)(void *))sub_1C4EB22A8, qword_1ED829128, &dword_1C475E000);
  sub_1C47AD050((uint64_t)qword_1ED8291E8, 0, 0);
  qword_1ED829268 = 0;
  byte_1ED829279 = 0;
  qword_1ED829270 = (uint64_t)&off_1E7F9E8D8;
  qword_1ED8291E8[0] = (uint64_t)&unk_1E8138EB8;
  qword_1ED829280 = (uint64_t)&off_1E819E9A0;
  qword_1ED829288 = (uint64_t)&unk_1E8138F20;
  qword_1ED8292A0 = (uint64_t)&qword_1ED829288;
  llvm::cl::Option::setArgStr((uint64_t)qword_1ED8291E8, "agx-wait", 8uLL);
  qword_1ED829208 = (uint64_t)"Print the AGX wait view";
  qword_1ED829210 = 23;
  llvm::cl::Option::addCategory((llvm::cl::Option *)qword_1ED8291E8, (llvm::cl::OptionCategory *)&qword_1ED828F88);
  sub_1C4EB7838((llvm *)&qword_1ED829268, qword_1ED8291E8, &byte_1EF8F7673);
  *(_BYTE *)qword_1ED829268 = 0;
  unk_1ED829278 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED8291E8);
  return __cxa_atexit((void (*)(void *))sub_1C4EB22A8, qword_1ED8291E8, &dword_1C475E000);
}

uint64_t sub_1C5FE2B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  *(_QWORD *)a1 = off_1E81AAAC0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 80) = &unk_1E81A7208;
  *(_QWORD *)(a1 + 144) = a1 + 56;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  v8 = (uint64_t *)(a1 + 152);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  sub_1C5FE2C34(a1 + 152, a7);
  v9 = *v8;
  v10 = *(_QWORD *)(a1 + 160);
  if (*v8 != v10)
  {
    v11 = 0;
    do
    {
      *(_DWORD *)v9 = v11;
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v9 + 8);
      *(_DWORD *)(v9 + 40) = 0;
      ++v11;
      v9 += 80;
    }
    while (v9 != v10);
  }
  return a1;
}

void sub_1C5FE2C34(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *(_QWORD *)a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1C5FE4A1C((void **)a1, v6);
  }
  else if (!v5)
  {
    v7 = *(_QWORD *)a1 + 80 * a2;
    if (v3 != v7)
    {
      v8 = (char *)(v3 - 32);
      do
      {
        v9 = (char *)*((_QWORD *)v8 - 2);
        if (v8 != v9)
          free(v9);
        v10 = (void *)*((_QWORD *)v8 - 5);
        if (v10)
        {
          *((_QWORD *)v8 - 4) = v10;
          operator delete(v10);
        }
        v11 = v8 - 48;
        v8 -= 80;
      }
      while (v11 != (char *)v7);
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
}

_DWORD *sub_1C5FE2CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *result;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  _QWORD v14[3];
  int v15;

  v4 = *(_DWORD **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 32 * v5;
    result = *(_DWORD **)a1;
    while (*result != (_DWORD)a2)
    {
      result += 8;
      v6 -= 32;
      if (!v6)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    if (v5 >= *(_DWORD *)(a1 + 12))
    {
      v14[0] = a2;
      v14[1] = a3;
      v14[2] = 0;
      v15 = 0;
      v11 = (_OWORD *)sub_1C47C0F60(a1, (unint64_t)v14, 1);
      v12 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 8));
      v13 = v11[1];
      *v12 = *v11;
      v12[1] = v13;
    }
    else
    {
      v8 = &v4[8 * v5];
      *(_QWORD *)v8 = a2;
      *((_QWORD *)v8 + 1) = a3;
      *((_QWORD *)v8 + 2) = 0;
      v8[6] = 0;
    }
    v9 = (*(_DWORD *)(a1 + 8) + 1);
    v10 = *(_QWORD *)a1 + 32 * v9;
    *(_DWORD *)(a1 + 8) = v9;
    return (_DWORD *)(v10 - 32);
  }
  return result;
}

_DWORD *sub_1C5FE2D98(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;

  result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, *(_QWORD *)(a1 + 32) + 168 * **(unsigned int **)(a2 + 8));
  if (result)
  {
    v5 = *(_QWORD *)(a1 + 152);
    if (*(_QWORD *)(a1 + 160) != v5)
    {
      v6 = (unint64_t)result;
      v7 = 0;
      v8 = 1;
      do
      {
        if (((v6 >> v7) & 1) != 0)
        {
          result = sub_1C5FE2CDC(v5 + 80 * v7 + 32, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
          if (!*((_BYTE *)result + 20))
          {
            result[4] = *(_DWORD *)(a1 + 48);
            *((_BYTE *)result + 20) = 1;
          }
        }
        v7 = v8;
        v5 = *(_QWORD *)(a1 + 152);
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 160) - v5) >> 4) > v8++);
    }
  }
  return result;
}

char *sub_1C5FE2E6C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *result;

  v4 = *(_QWORD *)(a1 + 184);
  if (v4 >= *(_QWORD *)(a1 + 192))
  {
    result = sub_1C4D6CB9C((void **)(a1 + 176), a2);
  }
  else
  {
    *(_DWORD *)v4 = *(_DWORD *)a2;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 8) = 0;
    sub_1C4D6CDA0((_QWORD *)(v4 + 8), *(_BYTE **)(a2 + 8), *(_BYTE **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
    *(_QWORD *)(v4 + 32) = v4 + 48;
    *(_QWORD *)(v4 + 40) = 0x100000000;
    if (*(_DWORD *)(a2 + 40))
      sub_1C4D6CE50(v4 + 32, (uint64_t *)(a2 + 32));
    result = (char *)(v4 + 80);
  }
  *(_QWORD *)(a1 + 184) = result;
  return result;
}

unint64_t sub_1C5FE2F10(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _OWORD *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  _DWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  char *v27;
  char **v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a2 == 4)
  {
    v2 = result;
    v3 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 144))(result, *(_QWORD *)(result + 32) + 168 * **(unsigned int **)(a2 + 8));
    if (v3)
    {
      v5 = *(_QWORD *)(v2 + 152);
      v4 = *(_QWORD *)(v2 + 160);
      if (v4 != v5)
      {
        v6 = v3;
        v7 = 0;
        v8 = 1;
        do
        {
          if (((v6 >> v7) & 1) != 0)
          {
            v9 = sub_1C5FE2CDC(v5 + 80 * v7 + 32, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
            if (!*((_BYTE *)v9 + 20))
            {
              v9[4] = *(_DWORD *)(v2 + 48);
              *((_BYTE *)v9 + 20) = 1;
            }
            v9[6] = *(_DWORD *)(v2 + 48);
            (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v2 + 152))(v2, v5 + 80 * v7);
            v10 = v5 + 80 * v7;
            *(_QWORD *)(v10 + 16) = *(_QWORD *)(v10 + 8);
            *(_DWORD *)(v10 + 40) = 0;
            v5 = *(_QWORD *)(v2 + 152);
            v4 = *(_QWORD *)(v2 + 160);
          }
          v7 = v8;
        }
        while (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4) > v8++);
      }
    }
    result = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v2 + 136))(v2, *(_QWORD *)(v2 + 32) + 168 * **(unsigned int **)(a2 + 8));
    if (result)
    {
      v12 = *(_QWORD *)(v2 + 152);
      v13 = *(_QWORD *)(v2 + 160);
      if (v13 != v12)
      {
        v14 = 0;
        v15 = 0;
        v16 = (__int128 *)((char *)&v41 + 4);
        v38 = result;
        do
        {
          if (((result >> v14) & 1) != 0)
          {
            v17 = *(_DWORD *)(v2 + 48);
            *v16 = *(_OWORD *)*(_QWORD *)(a2 + 8);
            v18 = v12 + 80 * v14;
            v21 = *(_QWORD *)(v18 + 24);
            v20 = (_QWORD *)(v18 + 24);
            v19 = v21;
            v23 = v20 - 1;
            v22 = (char *)*(v20 - 1);
            if ((unint64_t)v22 >= v21)
            {
              v25 = v16;
              v26 = v12 + 80 * v14;
              v29 = *(char **)(v26 + 8);
              v28 = (char **)(v26 + 8);
              v27 = v29;
              v30 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v29) >> 3);
              v31 = v30 + 1;
              if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
                abort();
              v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v27) >> 3);
              if (2 * v32 > v31)
                v31 = 2 * v32;
              if (v32 >= 0x555555555555555)
                v31 = 0xAAAAAAAAAAAAAAALL;
              v39 = v31;
              if (v31)
              {
                if (v31 > 0xAAAAAAAAAAAAAAALL)
                  sub_1C4764EE4();
                v33 = (char *)operator new(24 * v31);
              }
              else
              {
                v33 = 0;
              }
              v34 = &v33[24 * v30];
              *(_DWORD *)v34 = v17;
              *(_OWORD *)(v34 + 4) = v41;
              *((_DWORD *)v34 + 5) = v42;
              v35 = v34;
              v16 = v25;
              if (v22 == v27)
              {
                v36 = v39;
              }
              else
              {
                v36 = v39;
                do
                {
                  v37 = *(_OWORD *)(v22 - 24);
                  *((_QWORD *)v35 - 1) = *((_QWORD *)v22 - 1);
                  *(_OWORD *)(v35 - 24) = v37;
                  v35 -= 24;
                  v22 -= 24;
                }
                while (v22 != v27);
                v22 = *v28;
              }
              *v28 = v35;
              v24 = v34 + 24;
              *v23 = v34 + 24;
              *v20 = &v33[24 * v36];
              if (v22)
                operator delete(v22);
              result = v38;
            }
            else
            {
              *(_DWORD *)v22 = v17;
              *(_OWORD *)(v22 + 4) = v41;
              *((_DWORD *)v22 + 5) = v42;
              v24 = v22 + 24;
            }
            *v23 = v24;
            v12 = *(_QWORD *)(v2 + 152);
            v13 = *(_QWORD *)(v2 + 160);
          }
          v14 = ++v15;
        }
        while (0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 4) > v15);
      }
    }
  }
  return result;
}

uint64_t sub_1C5FE325C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char *v51;
  unsigned int *v52;
  unsigned int *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unsigned int v62;
  int v63;
  int v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  int v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  char v175;
  uint64_t v176;
  int v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  BOOL v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  unsigned int v193;
  int v194;
  int v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  int v211;
  int v212;
  uint64_t v213;
  char v214;
  int v215;
  int v216;
  char v217;
  int v218;
  int v219;
  char v220;
  char v221;
  int v222;
  int v223;
  char v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int *v238;
  unint64_t v239;
  char *v240;
  char *v241;
  unsigned int *v242;
  uint64_t v243;
  unsigned int v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char *__p;
  void *__src[2];
  char v255;

  v2 = a2;
  v3 = *(unsigned int **)(a1 + 176);
  v238 = *(unsigned int **)(a1 + 184);
  if (v3 != v238)
  {
    v51 = 0;
    v5 = 0;
    v4 = 0;
    while (1)
    {
      v239 = (unint64_t)v51;
      v240 = v5;
      v241 = v4;
      v242 = v3;
      v52 = (unsigned int *)*((_QWORD *)v3 + 1);
      v53 = (unsigned int *)*((_QWORD *)v3 + 2);
      if (v52 == v53)
      {
        v54 = 0;
        __p = 0;
      }
      else
      {
        __p = 0;
        v54 = 0;
        v55 = 0;
        do
        {
          v56 = *v52;
          v255 = 0;
          LOBYTE(__src[0]) = 0;
          v57 = sub_1C5FE47A0((_QWORD *)v2, __src);
          *(_BYTE *)(v2 + 70) = 1;
          v58 = *(_QWORD *)(v2 + 40);
          v59 = *(_QWORD *)(v2 + 48);
          v60 = *(_QWORD *)(v2 + 32);
          if ((_DWORD)v56)
            v61 = 0;
          else
            v61 = *(_BYTE *)(v2 + 80) == 0;
          if (!v61)
          {
            v62 = sub_1C55898D8(v2, v56);
            sub_1C4D66288((uint64_t *)v2, 4, v62);
          }
          sub_1C5589334((uint64_t *)v2, 6, v57);
          v63 = sub_1C4D66580(v2, (unsigned __int16)v60 - (unsigned __int16)v59 + (unsigned __int16)v58);
          v64 = v63;
          if (v54 >= v55)
          {
            v66 = (v54 - __p) >> 2;
            v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 62)
              goto LABEL_332;
            if ((v55 - __p) >> 1 > v67)
              v67 = (v55 - __p) >> 1;
            if ((unint64_t)(v55 - __p) >= 0x7FFFFFFFFFFFFFFCLL)
              v68 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v68 = v67;
            if (v68)
            {
              if (v68 >> 62)
                goto LABEL_333;
              v69 = (char *)operator new(4 * v68);
            }
            else
            {
              v69 = 0;
            }
            v65 = &v69[4 * v66];
            *(_DWORD *)v65 = v64;
            v70 = v65 + 4;
            while (v54 != __p)
            {
              v71 = *((_DWORD *)v54 - 1);
              v54 -= 4;
              *((_DWORD *)v65 - 1) = v71;
              v65 -= 4;
            }
            v55 = &v69[4 * v68];
            if (__p)
              operator delete(__p);
            v54 = v70;
          }
          else
          {
            *(_DWORD *)v54 = v63;
            v54 += 4;
            v65 = __p;
          }
          if (v255 < 0)
            operator delete(__src[0]);
          __p = v65;
          v52 += 6;
        }
        while (v52 != v53);
      }
      v72 = v242[10];
      if ((_DWORD)v72)
      {
        v73 = 0;
        v74 = 0;
        v75 = 0;
        v76 = *((_QWORD *)v242 + 4);
        v243 = v76 + 32 * v72;
        do
        {
          v245 = (unint64_t)v75;
          v250 = v73;
          v77 = *(unsigned int *)(v76 + 16);
          v78 = *(unsigned int *)(v76 + 24);
          v255 = 0;
          LOBYTE(__src[0]) = 0;
          v79 = sub_1C5FE47A0((_QWORD *)a2, __src);
          v80 = 1;
          *(_BYTE *)(a2 + 70) = 1;
          v81 = *(_QWORD *)(a2 + 40);
          v82 = *(_QWORD *)(a2 + 48);
          v83 = *(_QWORD *)(a2 + 32);
          if ((_DWORD)v78 || *(_BYTE *)(a2 + 80))
          {
            v84 = sub_1C55898D8(a2, v78);
            sub_1C4D66288((uint64_t *)a2, 6, v84);
            v80 = *(_BYTE *)(a2 + 80) == 0;
          }
          if ((_DWORD)v77 || !v80)
          {
            v85 = sub_1C55898D8(a2, v77);
            sub_1C4D66288((uint64_t *)a2, 4, v85);
          }
          sub_1C5589334((uint64_t *)a2, 8, v79);
          v86 = sub_1C4D66580(a2, (unsigned __int16)v83 - (unsigned __int16)v82 + (unsigned __int16)v81);
          v87 = v86;
          v75 = (char *)v245;
          if ((unint64_t)v74 >= v245)
          {
            v88 = (v74 - v73) >> 2;
            v89 = v88 + 1;
            if ((unint64_t)(v88 + 1) >> 62)
              goto LABEL_332;
            if ((uint64_t)(v245 - (_QWORD)v73) >> 1 > v89)
              v89 = (uint64_t)(v245 - (_QWORD)v73) >> 1;
            if (v245 - (unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
              v90 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v90 = v89;
            if (v90)
            {
              if (v90 >> 62)
                goto LABEL_333;
              v91 = (char *)operator new(4 * v90);
            }
            else
            {
              v91 = 0;
            }
            v92 = &v91[4 * v88];
            *(_DWORD *)v92 = v87;
            v93 = v92 + 4;
            while (v74 != v250)
            {
              v94 = *((_DWORD *)v74 - 1);
              v74 -= 4;
              *((_DWORD *)v92 - 1) = v94;
              v92 -= 4;
            }
            v75 = &v91[4 * v90];
            if (v250)
              operator delete(v250);
            v73 = v92;
            v74 = v93;
          }
          else
          {
            *(_DWORD *)v74 = v86;
            v74 += 4;
          }
          if (v255 < 0)
            operator delete(__src[0]);
          v76 += 32;
        }
        while (v76 != v243);
      }
      else
      {
        v74 = 0;
        v73 = 0;
      }
      v95 = *v242;
      v2 = a2;
      v96 = v54 - __p;
      if (v54 == __p)
        v97 = (char *)&unk_1C8677266;
      else
        v97 = __p;
      *(_BYTE *)(a2 + 70) = 1;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v98 = *(_QWORD *)(a2 + 48);
      v99 = ((_BYTE)v98 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v98 - *(_QWORD *)(a2 + 56) < v99)
      {
        v203 = v95;
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v98 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        v95 = v203;
        *(_QWORD *)(a2 + 48) -= v99;
      }
      else
      {
        *(_QWORD *)(a2 + 48) = v98 - v99;
        if (!v99)
          goto LABEL_148;
      }
      v100 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v100++) = 0;
      while (v99 != v100);
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
LABEL_148:
      v101 = *(_QWORD *)(a2 + 48);
      v102 = ((_BYTE)v101 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      v251 = v73;
      if (v101 - *(_QWORD *)(a2 + 56) < v102)
      {
        v204 = v95;
        sub_1C4D663A4((uint64_t *)a2, v102);
        v95 = v204;
        *(_QWORD *)(a2 + 48) -= v102;
      }
      else
      {
        *(_QWORD *)(a2 + 48) = v101 - v102;
        if (!v102)
          goto LABEL_152;
      }
      v103 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v103++) = 0;
      while (v102 != v103);
LABEL_152:
      if (__p != v54)
      {
        v104 = v96 >> 2;
        do
        {
          --v104;
          v105 = *(_DWORD *)&v97[4 * v104];
          if (*(_QWORD *)(a2 + 72) <= 3uLL)
            *(_QWORD *)(a2 + 72) = 4;
          v106 = *(_QWORD *)(a2 + 32);
          v107 = *(_QWORD *)(a2 + 40);
          v108 = *(_QWORD *)(a2 + 48);
          v109 = ((int)v108 - ((int)v106 + (int)v107)) & 3;
          if (v108 - *(_QWORD *)(a2 + 56) < v109)
          {
            v112 = v95;
            sub_1C4D663A4((uint64_t *)a2, ((int)v108 - ((int)v106 + (int)v107)) & 3);
            v95 = v112;
            *(_QWORD *)(a2 + 48) -= v109;
          }
          else
          {
            v110 = v108 - v109;
            *(_QWORD *)(a2 + 48) = v110;
            if (!v109)
            {
              v111 = v106 + v107 - v110;
              goto LABEL_164;
            }
          }
          v113 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(a2 + 48) + v113++) = 0;
          while (v109 != v113);
          v107 = *(_QWORD *)(a2 + 40);
          v110 = *(_QWORD *)(a2 + 48);
          v106 = *(_QWORD *)(a2 + 32);
          v111 = v106 - v110 + v107;
          if (*(_QWORD *)(a2 + 72) <= 3uLL)
            *(_QWORD *)(a2 + 72) = 4;
LABEL_164:
          v114 = ((_BYTE)v110 - ((_BYTE)v106 + (_BYTE)v107)) & 3;
          v115 = *(_QWORD *)(a2 + 56);
          if (v110 - v115 < v114)
          {
            v119 = v95;
            sub_1C4D663A4((uint64_t *)a2, v114);
            v95 = v119;
            *(_QWORD *)(a2 + 48) -= v114;
LABEL_166:
            v117 = 0;
            do
              *(_BYTE *)(*(_QWORD *)(a2 + 48) + v117++) = 0;
            while (v114 != v117);
            v116 = *(_QWORD *)(a2 + 48);
            v115 = *(_QWORD *)(a2 + 56);
            goto LABEL_169;
          }
          v116 = v110 - v114;
          *(_QWORD *)(a2 + 48) = v110 - v114;
          if (v114)
            goto LABEL_166;
LABEL_169:
          if ((unint64_t)(v116 - v115) <= 3)
          {
            v118 = v95;
            sub_1C4D663A4((uint64_t *)a2, 4uLL);
            v95 = v118;
            v116 = *(_QWORD *)(a2 + 48);
          }
          *(_DWORD *)(v116 - 4) = v111 - v105 + 4;
          *(_QWORD *)(a2 + 48) = v116 - 4;
        }
        while (v104);
      }
      *(_BYTE *)(a2 + 70) = 0;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v121 = *(_QWORD *)(a2 + 48);
      v120 = *(_QWORD *)(a2 + 56);
      v122 = ((_BYTE)v121 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v121 - v120 < v122)
      {
        v213 = v95;
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v121 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        v95 = v213;
        *(_QWORD *)(a2 + 48) -= v122;
      }
      else
      {
        v123 = v121 - v122;
        *(_QWORD *)(a2 + 48) = v121 - v122;
        if (!v122)
          goto LABEL_181;
      }
      v124 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v124++) = 0;
      while (v122 != v124);
      v123 = *(_QWORD *)(a2 + 48);
      v120 = *(_QWORD *)(a2 + 56);
LABEL_181:
      if ((unint64_t)(v123 - v120) <= 3)
      {
        v209 = v95;
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v95 = v209;
        v123 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v123 - 4) = (unint64_t)v96 >> 2;
      v125 = v123 - 4;
      *(_QWORD *)(a2 + 48) = v125;
      v127 = *(_QWORD *)(a2 + 32);
      v126 = *(_QWORD *)(a2 + 40);
      v128 = v74 - v73;
      if (v74 == v251)
        v129 = (char *)&unk_1C8677266;
      else
        v129 = v251;
      *(_BYTE *)(a2 + 70) = 1;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v130 = ((_BYTE)v125 - ((_BYTE)v127 + (_BYTE)v126)) & 3;
      if (v125 - *(_QWORD *)(a2 + 56) < v130)
      {
        v205 = v95;
        v206 = v126;
        v248 = v127;
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v125 - ((_BYTE)v127 + (_BYTE)v126)) & 3);
        v127 = v248;
        v126 = v206;
        v95 = v205;
        *(_QWORD *)(a2 + 48) -= v130;
      }
      else
      {
        *(_QWORD *)(a2 + 48) = v125 - v130;
        if ((((_BYTE)v125 - ((_BYTE)v127 + (_BYTE)v126)) & 3) == 0)
          goto LABEL_194;
      }
      v131 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v131++) = 0;
      while (v130 != v131);
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
LABEL_194:
      v132 = *(_QWORD *)(a2 + 48);
      v133 = ((_BYTE)v132 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v132 - *(_QWORD *)(a2 + 56) < v133)
      {
        v207 = v95;
        v208 = v126;
        v249 = v127;
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v132 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        v127 = v249;
        v126 = v208;
        v95 = v207;
        *(_QWORD *)(a2 + 48) -= v133;
      }
      else
      {
        *(_QWORD *)(a2 + 48) = v132 - v133;
        if (!v133)
          goto LABEL_198;
      }
      v134 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v134++) = 0;
      while (v133 != v134);
LABEL_198:
      if (v251 != v74)
      {
        v135 = v128 >> 2;
        do
        {
          --v135;
          v136 = *(_DWORD *)&v129[4 * v135];
          if (*(_QWORD *)(a2 + 72) <= 3uLL)
            *(_QWORD *)(a2 + 72) = 4;
          v137 = *(_QWORD *)(a2 + 32);
          v138 = *(_QWORD *)(a2 + 40);
          v139 = *(_QWORD *)(a2 + 48);
          v140 = ((int)v139 - ((int)v137 + (int)v138)) & 3;
          if (v139 - *(_QWORD *)(a2 + 56) < v140)
          {
            v143 = v95;
            v144 = v126;
            v246 = v127;
            sub_1C4D663A4((uint64_t *)a2, ((int)v139 - ((int)v137 + (int)v138)) & 3);
            v127 = v246;
            v126 = v144;
            v95 = v143;
            *(_QWORD *)(a2 + 48) -= v140;
          }
          else
          {
            v141 = v139 - v140;
            *(_QWORD *)(a2 + 48) = v141;
            if (!v140)
            {
              v142 = v137 + v138 - v141;
              goto LABEL_210;
            }
          }
          v145 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(a2 + 48) + v145++) = 0;
          while (v140 != v145);
          v138 = *(_QWORD *)(a2 + 40);
          v141 = *(_QWORD *)(a2 + 48);
          v137 = *(_QWORD *)(a2 + 32);
          v142 = v137 - v141 + v138;
          if (*(_QWORD *)(a2 + 72) <= 3uLL)
            *(_QWORD *)(a2 + 72) = 4;
LABEL_210:
          v146 = ((_BYTE)v141 - ((_BYTE)v137 + (_BYTE)v138)) & 3;
          v147 = *(_QWORD *)(a2 + 56);
          if (v141 - v147 < v146)
          {
            v244 = v95;
            v153 = v126;
            v247 = v127;
            sub_1C4D663A4((uint64_t *)a2, v146);
            v127 = v247;
            v126 = v153;
            v95 = v244;
            *(_QWORD *)(a2 + 48) -= v146;
LABEL_212:
            v149 = 0;
            do
              *(_BYTE *)(*(_QWORD *)(a2 + 48) + v149++) = 0;
            while (v146 != v149);
            v148 = *(_QWORD *)(a2 + 48);
            v147 = *(_QWORD *)(a2 + 56);
            goto LABEL_215;
          }
          v148 = v141 - v146;
          *(_QWORD *)(a2 + 48) = v141 - v146;
          if (v146)
            goto LABEL_212;
LABEL_215:
          if ((unint64_t)(v148 - v147) <= 3)
          {
            v150 = v95;
            v151 = v126;
            v152 = v127;
            sub_1C4D663A4((uint64_t *)a2, 4uLL);
            v127 = v152;
            v126 = v151;
            v95 = v150;
            v148 = *(_QWORD *)(a2 + 48);
          }
          *(_DWORD *)(v148 - 4) = v142 - v136 + 4;
          *(_QWORD *)(a2 + 48) = v148 - 4;
        }
        while (v135);
      }
      *(_BYTE *)(a2 + 70) = 0;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v155 = *(_QWORD *)(a2 + 48);
      v154 = *(_QWORD *)(a2 + 56);
      v156 = ((_BYTE)v155 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      v4 = v241;
      if (v155 - v154 < v156)
      {
        v214 = v95;
        v215 = v126;
        v216 = v127;
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v155 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        LODWORD(v127) = v216;
        LODWORD(v126) = v215;
        LOBYTE(v95) = v214;
        *(_QWORD *)(a2 + 48) -= v156;
        v158 = v251;
      }
      else
      {
        v157 = v155 - v156;
        *(_QWORD *)(a2 + 48) = v155 - v156;
        v158 = v251;
        if (!v156)
          goto LABEL_227;
      }
      v159 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v159++) = 0;
      while (v156 != v159);
      v157 = *(_QWORD *)(a2 + 48);
      v154 = *(_QWORD *)(a2 + 56);
LABEL_227:
      if ((unint64_t)(v157 - v154) <= 3)
      {
        v210 = v95;
        v211 = v126;
        v212 = v127;
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        LODWORD(v127) = v212;
        LODWORD(v126) = v211;
        LOBYTE(v95) = v210;
        v157 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v157 - 4) = (unint64_t)v128 >> 2;
      v160 = v157 - 4;
      *(_QWORD *)(a2 + 48) = v160;
      v161 = *(_QWORD *)(a2 + 32);
      v162 = *(_QWORD *)(a2 + 40);
      *(_BYTE *)(a2 + 70) = 1;
      v163 = v161 - v160 + v162;
      if (v163)
      {
        if (*(_QWORD *)(a2 + 72) <= 3uLL)
          *(_QWORD *)(a2 + 72) = 4;
        v164 = ((_BYTE)v160 - ((_BYTE)v161 + (_BYTE)v162)) & 3;
        if (v160 - *(_QWORD *)(a2 + 56) < v164)
        {
          v217 = v95;
          v218 = v126;
          v219 = v127;
          sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v160 - ((_BYTE)v161 + (_BYTE)v162)) & 3);
          LODWORD(v127) = v219;
          LODWORD(v126) = v218;
          LOBYTE(v95) = v217;
          *(_QWORD *)(a2 + 48) -= v164;
          goto LABEL_234;
        }
        v165 = v160 - v164;
        *(_QWORD *)(a2 + 48) = v165;
        if (v164)
        {
LABEL_234:
          v166 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(a2 + 48) + v166++) = 0;
          while (v164 != v166);
          v162 = *(_QWORD *)(a2 + 40);
          v165 = *(_QWORD *)(a2 + 48);
          v161 = *(_QWORD *)(a2 + 32);
        }
        v167 = v162 - v165 + v161 - v163 + 4;
        if ((_DWORD)v162 - (_DWORD)v165 + (_DWORD)v161 - v163 == -4 && *(_BYTE *)(a2 + 80) == 0)
          goto LABEL_251;
        if (*(_QWORD *)(a2 + 72) <= 3uLL)
          *(_QWORD *)(a2 + 72) = 4;
        v169 = ((_BYTE)v165 - ((_BYTE)v161 + (_BYTE)v162)) & 3;
        v170 = *(_QWORD *)(a2 + 56);
        if (v165 - v170 >= v169)
        {
          v171 = v165 - v169;
          *(_QWORD *)(a2 + 48) = v165 - v169;
          if (v169)
          {
LABEL_245:
            v172 = 0;
            do
              *(_BYTE *)(*(_QWORD *)(a2 + 48) + v172++) = 0;
            while (v169 != v172);
            v171 = *(_QWORD *)(a2 + 48);
            v170 = *(_QWORD *)(a2 + 56);
          }
          v173 = v127;
          v174 = v126;
          v175 = v95;
          if ((unint64_t)(v171 - v170) <= 3)
          {
            sub_1C4D663A4((uint64_t *)a2, 4uLL);
            v171 = *(_QWORD *)(a2 + 48);
          }
          *(_DWORD *)(v171 - 4) = v167;
          v176 = v171 - 4;
          *(_QWORD *)(a2 + 48) = v176;
          sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v176 + *(_DWORD *)(a2 + 40));
          LOBYTE(v95) = v175;
          LODWORD(v126) = v174;
          LODWORD(v127) = v173;
          goto LABEL_251;
        }
        v221 = v95;
        v222 = v126;
        v223 = v127;
        sub_1C4D663A4((uint64_t *)a2, v169);
        LODWORD(v127) = v223;
        LODWORD(v126) = v222;
        LOBYTE(v95) = v221;
        *(_QWORD *)(a2 + 48) -= v169;
        goto LABEL_245;
      }
LABEL_251:
      v177 = v127 - v125 + v126;
      v178 = v240;
      if (!v177)
        goto LABEL_273;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v179 = *(_QWORD *)(a2 + 32);
      v180 = *(_QWORD *)(a2 + 40);
      v181 = *(_QWORD *)(a2 + 48);
      v182 = ((_BYTE)v181 - ((_BYTE)v179 + (_BYTE)v180)) & 3;
      if (v181 - *(_QWORD *)(a2 + 56) < v182)
      {
        v220 = v95;
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v181 - ((_BYTE)v179 + (_BYTE)v180)) & 3);
        LOBYTE(v95) = v220;
        *(_QWORD *)(a2 + 48) -= v182;
LABEL_256:
        v184 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v184++) = 0;
        while (v182 != v184);
        v180 = *(_QWORD *)(a2 + 40);
        v183 = *(_QWORD *)(a2 + 48);
        v179 = *(_QWORD *)(a2 + 32);
        goto LABEL_259;
      }
      v183 = v181 - v182;
      *(_QWORD *)(a2 + 48) = v183;
      if (v182)
        goto LABEL_256;
LABEL_259:
      v185 = v180 - v183 + v179 - v177 + 4;
      if (v185)
        v186 = 0;
      else
        v186 = *(_BYTE *)(a2 + 80) == 0;
      if (v186)
        goto LABEL_273;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v187 = ((_BYTE)v183 - ((_BYTE)v179 + (_BYTE)v180)) & 3;
      v188 = *(_QWORD *)(a2 + 56);
      if (v183 - v188 < v187)
      {
        v224 = v95;
        sub_1C4D663A4((uint64_t *)a2, v187);
        LOBYTE(v95) = v224;
        *(_QWORD *)(a2 + 48) -= v187;
LABEL_267:
        v190 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v190++) = 0;
        while (v187 != v190);
        v189 = *(_QWORD *)(a2 + 48);
        v188 = *(_QWORD *)(a2 + 56);
        goto LABEL_270;
      }
      v189 = v183 - v187;
      *(_QWORD *)(a2 + 48) = v183 - v187;
      if (v187)
        goto LABEL_267;
LABEL_270:
      v191 = v95;
      if ((unint64_t)(v189 - v188) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v189 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v189 - 4) = v185;
      v192 = v189 - 4;
      *(_QWORD *)(a2 + 48) = v192;
      sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v192 + *(_DWORD *)(a2 + 40));
      LOBYTE(v95) = v191;
LABEL_273:
      if (v95 | *(unsigned __int8 *)(a2 + 80))
      {
        v193 = sub_1C4D6650C(a2, v95);
        sub_1C4D66288((uint64_t *)a2, 4, v193);
      }
      v194 = sub_1C4D66580(a2, v163);
      v195 = v194;
      v51 = (char *)v239;
      if ((unint64_t)v240 >= v239)
      {
        v196 = (v240 - v241) >> 2;
        v197 = v196 + 1;
        if ((unint64_t)(v196 + 1) >> 62)
LABEL_332:
          abort();
        if ((uint64_t)(v239 - (_QWORD)v241) >> 1 > v197)
          v197 = (uint64_t)(v239 - (_QWORD)v241) >> 1;
        if (v239 - (unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL)
          v198 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v198 = v197;
        if (v198)
        {
          if (v198 >> 62)
LABEL_333:
            sub_1C4764EE4();
          v199 = (char *)operator new(4 * v198);
        }
        else
        {
          v199 = 0;
        }
        v200 = &v199[4 * v196];
        *(_DWORD *)v200 = v195;
        v201 = v200 + 4;
        while (v178 != v241)
        {
          v202 = *((_DWORD *)v178 - 1);
          v178 -= 4;
          *((_DWORD *)v200 - 1) = v202;
          v200 -= 4;
        }
        v51 = &v199[4 * v198];
        if (v241)
          operator delete(v241);
        v4 = v200;
        v5 = v201;
        if (!v158)
          goto LABEL_278;
LABEL_277:
        operator delete(v158);
        goto LABEL_278;
      }
      *(_DWORD *)v240 = v194;
      v5 = v240 + 4;
      if (v158)
        goto LABEL_277;
LABEL_278:
      if (__p)
        operator delete(__p);
      v3 = v242 + 20;
      if (v242 + 20 == v238)
        goto LABEL_3;
    }
  }
  v4 = 0;
  v5 = 0;
LABEL_3:
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = (char *)&unk_1C8677266;
  else
    v7 = v4;
  *(_BYTE *)(v2 + 70) = 1;
  if (*(_QWORD *)(v2 + 72) <= 3uLL)
    *(_QWORD *)(v2 + 72) = 4;
  v8 = *(_QWORD *)(v2 + 48);
  v9 = ((_BYTE)v8 - (*(_DWORD *)(v2 + 32) + *(_DWORD *)(v2 + 40))) & 3;
  if (v8 - *(_QWORD *)(v2 + 56) < v9)
  {
    sub_1C4D663A4((uint64_t *)v2, ((_BYTE)v8 - (*(_DWORD *)(v2 + 32) + *(_DWORD *)(v2 + 40))) & 3);
    *(_QWORD *)(v2 + 48) -= v9;
  }
  else
  {
    *(_QWORD *)(v2 + 48) = v8 - v9;
    if (!v9)
      goto LABEL_14;
  }
  v10 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(v2 + 48) + v10++) = 0;
  while (v9 != v10);
  if (*(_QWORD *)(v2 + 72) <= 3uLL)
    *(_QWORD *)(v2 + 72) = 4;
LABEL_14:
  v11 = *(_QWORD *)(v2 + 48);
  v12 = ((_BYTE)v11 - (*(_DWORD *)(v2 + 32) + *(_DWORD *)(v2 + 40))) & 3;
  if (v11 - *(_QWORD *)(v2 + 56) < v12)
  {
    sub_1C4D663A4((uint64_t *)v2, ((_BYTE)v11 - (*(_DWORD *)(v2 + 32) + *(_DWORD *)(v2 + 40))) & 3);
    *(_QWORD *)(v2 + 48) -= v12;
  }
  else
  {
    *(_QWORD *)(v2 + 48) = v11 - v12;
    if (!v12)
      goto LABEL_18;
  }
  v13 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(v2 + 48) + v13++) = 0;
  while (v12 != v13);
LABEL_18:
  if (v4 != v5)
  {
    v225 = v6 >> 2;
    do
    {
      --v225;
      v226 = *(_DWORD *)&v7[4 * v225];
      if (*(_QWORD *)(v2 + 72) <= 3uLL)
        *(_QWORD *)(v2 + 72) = 4;
      v227 = *(_QWORD *)(v2 + 32);
      v228 = *(_QWORD *)(v2 + 40);
      v229 = *(_QWORD *)(v2 + 48);
      v230 = ((int)v229 - ((int)v227 + (int)v228)) & 3;
      if (v229 - *(_QWORD *)(v2 + 56) < v230)
      {
        sub_1C4D663A4((uint64_t *)v2, ((int)v229 - ((int)v227 + (int)v228)) & 3);
        *(_QWORD *)(v2 + 48) -= v230;
      }
      else
      {
        v231 = v229 - v230;
        *(_QWORD *)(v2 + 48) = v231;
        if (!v230)
        {
          v232 = v227 + v228 - v231;
          goto LABEL_320;
        }
      }
      v233 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(v2 + 48) + v233++) = 0;
      while (v230 != v233);
      v228 = *(_QWORD *)(v2 + 40);
      v231 = *(_QWORD *)(v2 + 48);
      v227 = *(_QWORD *)(v2 + 32);
      v232 = v227 - v231 + v228;
      if (*(_QWORD *)(v2 + 72) <= 3uLL)
        *(_QWORD *)(v2 + 72) = 4;
LABEL_320:
      v234 = ((_BYTE)v231 - ((_BYTE)v227 + (_BYTE)v228)) & 3;
      v235 = *(_QWORD *)(v2 + 56);
      if (v231 - v235 < v234)
      {
        sub_1C4D663A4((uint64_t *)v2, v234);
        *(_QWORD *)(v2 + 48) -= v234;
LABEL_322:
        v237 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(v2 + 48) + v237++) = 0;
        while (v234 != v237);
        v236 = *(_QWORD *)(v2 + 48);
        v235 = *(_QWORD *)(v2 + 56);
        goto LABEL_325;
      }
      v236 = v231 - v234;
      *(_QWORD *)(v2 + 48) = v231 - v234;
      if (v234)
        goto LABEL_322;
LABEL_325:
      if ((unint64_t)(v236 - v235) <= 3)
      {
        sub_1C4D663A4((uint64_t *)v2, 4uLL);
        v236 = *(_QWORD *)(v2 + 48);
      }
      *(_DWORD *)(v236 - 4) = v232 - v226 + 4;
      *(_QWORD *)(v2 + 48) = v236 - 4;
    }
    while (v225);
  }
  *(_BYTE *)(v2 + 70) = 0;
  if (*(_QWORD *)(v2 + 72) <= 3uLL)
    *(_QWORD *)(v2 + 72) = 4;
  v15 = *(_QWORD *)(v2 + 48);
  v14 = *(_QWORD *)(v2 + 56);
  v16 = ((_BYTE)v15 - (*(_DWORD *)(v2 + 32) + *(_DWORD *)(v2 + 40))) & 3;
  if (v15 - v14 < v16)
  {
    sub_1C4D663A4((uint64_t *)v2, ((_BYTE)v15 - (*(_DWORD *)(v2 + 32) + *(_DWORD *)(v2 + 40))) & 3);
    *(_QWORD *)(v2 + 48) -= v16;
  }
  else
  {
    v17 = v15 - v16;
    *(_QWORD *)(v2 + 48) = v15 - v16;
    if (!v16)
      goto LABEL_26;
  }
  v18 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(v2 + 48) + v18++) = 0;
  while (v16 != v18);
  v17 = *(_QWORD *)(v2 + 48);
  v14 = *(_QWORD *)(v2 + 56);
LABEL_26:
  if ((unint64_t)(v17 - v14) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v2, 4uLL);
    v17 = *(_QWORD *)(v2 + 48);
  }
  *(_DWORD *)(v17 - 4) = (unint64_t)v6 >> 2;
  v19 = v17 - 4;
  *(_QWORD *)(v2 + 48) = v19;
  v20 = *(_QWORD *)(v2 + 32);
  v21 = *(_QWORD *)(v2 + 40);
  *(_BYTE *)(v2 + 70) = 1;
  v22 = v20 - v19 + v21;
  if (v22)
  {
    if (*(_QWORD *)(v2 + 72) <= 3uLL)
      *(_QWORD *)(v2 + 72) = 4;
    v23 = ((_BYTE)v19 - ((_BYTE)v20 + (_BYTE)v21)) & 3;
    if (v19 - *(_QWORD *)(v2 + 56) < v23)
    {
      sub_1C4D663A4((uint64_t *)v2, ((_BYTE)v19 - ((_BYTE)v20 + (_BYTE)v21)) & 3);
      *(_QWORD *)(v2 + 48) -= v23;
    }
    else
    {
      v24 = v19 - v23;
      *(_QWORD *)(v2 + 48) = v24;
      if (!v23)
      {
LABEL_36:
        v26 = v21 - v24 + v20 - v22 + 4;
        if ((_DWORD)v21 - (_DWORD)v24 + (_DWORD)v20 - v22 == -4 && *(_BYTE *)(v2 + 80) == 0)
          goto LABEL_50;
        if (*(_QWORD *)(v2 + 72) <= 3uLL)
          *(_QWORD *)(v2 + 72) = 4;
        v28 = ((_BYTE)v24 - ((_BYTE)v20 + (_BYTE)v21)) & 3;
        v29 = *(_QWORD *)(v2 + 56);
        if (v24 - v29 < v28)
        {
          sub_1C4D663A4((uint64_t *)v2, v28);
          *(_QWORD *)(v2 + 48) -= v28;
        }
        else
        {
          v30 = v24 - v28;
          *(_QWORD *)(v2 + 48) = v24 - v28;
          if (!v28)
          {
LABEL_47:
            if ((unint64_t)(v30 - v29) <= 3)
            {
              sub_1C4D663A4((uint64_t *)v2, 4uLL);
              v30 = *(_QWORD *)(v2 + 48);
            }
            *(_DWORD *)(v30 - 4) = v26;
            v32 = v30 - 4;
            *(_QWORD *)(v2 + 48) = v32;
            sub_1C4D66288((uint64_t *)v2, 4, *(_DWORD *)(v2 + 32) - v32 + *(_DWORD *)(v2 + 40));
            goto LABEL_50;
          }
        }
        v31 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(v2 + 48) + v31++) = 0;
        while (v28 != v31);
        v30 = *(_QWORD *)(v2 + 48);
        v29 = *(_QWORD *)(v2 + 56);
        goto LABEL_47;
      }
    }
    v25 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v2 + 48) + v25++) = 0;
    while (v23 != v25);
    v21 = *(_QWORD *)(v2 + 40);
    v24 = *(_QWORD *)(v2 + 48);
    v20 = *(_QWORD *)(v2 + 32);
    goto LABEL_36;
  }
LABEL_50:
  v33 = sub_1C4D66580(v2, v22);
  *(_BYTE *)(v2 + 70) = 1;
  v34 = *(_DWORD *)(v2 + 32) - *(_DWORD *)(v2 + 48) + *(_DWORD *)(v2 + 40);
  v35 = sub_1C6174D80(v2, 2);
  sub_1C4D66288((uint64_t *)v2, 4, v35);
  if (!v33)
    goto LABEL_72;
  if (*(_QWORD *)(v2 + 72) <= 3uLL)
    *(_QWORD *)(v2 + 72) = 4;
  v36 = *(_QWORD *)(v2 + 32);
  v37 = *(_QWORD *)(v2 + 40);
  v38 = *(_QWORD *)(v2 + 48);
  v39 = ((_BYTE)v38 - ((_BYTE)v36 + (_BYTE)v37)) & 3;
  if (v38 - *(_QWORD *)(v2 + 56) < v39)
  {
    sub_1C4D663A4((uint64_t *)v2, ((_BYTE)v38 - ((_BYTE)v36 + (_BYTE)v37)) & 3);
    *(_QWORD *)(v2 + 48) -= v39;
LABEL_55:
    v41 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v2 + 48) + v41++) = 0;
    while (v39 != v41);
    v37 = *(_QWORD *)(v2 + 40);
    v40 = *(_QWORD *)(v2 + 48);
    v36 = *(_QWORD *)(v2 + 32);
    goto LABEL_58;
  }
  v40 = v38 - v39;
  *(_QWORD *)(v2 + 48) = v40;
  if (v39)
    goto LABEL_55;
LABEL_58:
  v42 = v37 - v40 + v36 - v33 + 4;
  if ((_DWORD)v37 - (_DWORD)v40 + (_DWORD)v36 - v33 == -4 && *(_BYTE *)(v2 + 80) == 0)
    goto LABEL_72;
  if (*(_QWORD *)(v2 + 72) <= 3uLL)
    *(_QWORD *)(v2 + 72) = 4;
  v44 = ((_BYTE)v40 - ((_BYTE)v36 + (_BYTE)v37)) & 3;
  v45 = *(_QWORD *)(v2 + 56);
  if (v40 - v45 < v44)
  {
    sub_1C4D663A4((uint64_t *)v2, v44);
    *(_QWORD *)(v2 + 48) -= v44;
LABEL_66:
    v47 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v2 + 48) + v47++) = 0;
    while (v44 != v47);
    v46 = *(_QWORD *)(v2 + 48);
    v45 = *(_QWORD *)(v2 + 56);
    goto LABEL_69;
  }
  v46 = v40 - v44;
  *(_QWORD *)(v2 + 48) = v40 - v44;
  if (v44)
    goto LABEL_66;
LABEL_69:
  if ((unint64_t)(v46 - v45) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v2, 4uLL);
    v46 = *(_QWORD *)(v2 + 48);
  }
  *(_DWORD *)(v46 - 4) = v42;
  v48 = v46 - 4;
  *(_QWORD *)(v2 + 48) = v48;
  sub_1C4D66288((uint64_t *)v2, 10, *(_DWORD *)(v2 + 32) - v48 + *(_DWORD *)(v2 + 40));
LABEL_72:
  v49 = sub_1C4D66580(v2, v34);
  if (v4)
    operator delete(v4);
  return v49 | 0x100000000;
}

uint64_t sub_1C5FE47A0(_QWORD *a1, void *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int *v13;
  const void *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  size_t v21;
  int v22;
  _BOOL4 v23;
  BOOL v24;
  uint64_t **v25;
  uint64_t v26;
  unsigned int v27;
  size_t v28;
  int v29;
  _BOOL4 v30;
  uint64_t *v31;
  _DWORD *v32;
  uint64_t *v33;
  uint64_t v35;
  const void *v36;
  unsigned int v37;
  size_t v38;
  int v39;
  _BOOL4 v40;
  int v41;
  _BOOL4 v42;
  _QWORD *v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;

  if (!a1[11])
  {
    v43 = (_QWORD *)operator new();
    v43[1] = 0;
    v43[2] = 0;
    v43[3] = a1;
    *v43 = v43 + 1;
    a1[11] = v43;
  }
  v5 = a1[5];
  v4 = a1[6];
  v6 = a1[4];
  v7 = sub_1C4D6889C((uint64_t)a1, __src, 0);
  v8 = v7;
  v9 = (uint64_t **)a1[11];
  v10 = v9 + 1;
  v11 = v9[1];
  if (v11)
  {
    v44 = v5;
    v45 = v6;
    v46 = v4;
    v12 = v9[3][5] + v9[3][4];
    v47 = v7;
    v13 = (unsigned int *)(v12 - v7);
    v16 = *v13;
    v14 = v13 + 1;
    v15 = v16;
    v17 = v9 + 1;
    v18 = v9[1];
    do
    {
      v19 = *((unsigned int *)v18 + 7);
      v20 = *(_DWORD *)(v12 - v19);
      if (v15 >= v20)
        v21 = v20;
      else
        v21 = v15;
      v22 = memcmp((const void *)(v12 - v19 + 4), v14, v21);
      v23 = v20 < v15;
      if (v22)
        v23 = v22 < 0;
      v24 = !v23;
      if (v23)
        v25 = (uint64_t **)(v18 + 1);
      else
        v25 = (uint64_t **)v18;
      if (v24)
        v17 = (uint64_t **)v18;
      v18 = *v25;
    }
    while (*v25);
    if (v10 == v17)
    {
      v8 = v47;
      goto LABEL_31;
    }
    v26 = *((unsigned int *)v17 + 7);
    v27 = *(_DWORD *)(v12 - v26);
    if (v27 >= v15)
      v28 = v15;
    else
      v28 = v27;
    v29 = memcmp(v14, (const void *)(v12 - v26 + 4), v28);
    v30 = v15 < v27;
    if (v29)
      v30 = v29 < 0;
    v8 = v47;
    if (v30)
    {
      while (1)
      {
        while (1)
        {
LABEL_31:
          v31 = v11;
          v35 = *((unsigned int *)v11 + 7);
          v36 = (const void *)(v12 - v35 + 4);
          v37 = *(_DWORD *)(v12 - v35);
          if (v37 >= v15)
            v38 = v15;
          else
            v38 = v37;
          v39 = memcmp(v14, (const void *)(v12 - v35 + 4), v38);
          v40 = v15 < v37;
          if (v39)
            v40 = v39 < 0;
          if (!v40)
            break;
          v11 = (uint64_t *)*v11;
          v10 = (uint64_t **)v31;
          if (!*v31)
            goto LABEL_26;
        }
        v41 = memcmp(v36, v14, v38);
        v42 = v37 < v15;
        if (v41)
          v42 = v41 < 0;
        if (!v42)
          break;
        v11 = (uint64_t *)v11[1];
        if (!v11)
        {
          v10 = (uint64_t **)(v31 + 1);
          goto LABEL_26;
        }
      }
    }
    else
    {
      a1[6] += *((_DWORD *)a1 + 8) + v46 - (v45 + v44 + a1[6]) + *((_DWORD *)a1 + 10);
      return v26;
    }
  }
  else
  {
    v31 = (uint64_t *)(v9 + 1);
LABEL_26:
    v32 = operator new(0x20uLL);
    v32[7] = v8;
    *(_QWORD *)v32 = 0;
    *((_QWORD *)v32 + 1) = 0;
    *((_QWORD *)v32 + 2) = v31;
    *v10 = (uint64_t *)v32;
    v33 = (uint64_t *)**v9;
    if (v33)
    {
      *v9 = v33;
      v32 = *v10;
    }
    sub_1C4768E74(v9[1], (uint64_t *)v32);
    v9[2] = (uint64_t *)((char *)v9[2] + 1);
  }
  return v8;
}

void sub_1C5FE4A1C(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;
  char *v24;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v11 = &v5[80 * a2];
      do
      {
        *((_OWORD *)v5 + 1) = 0uLL;
        *((_OWORD *)v5 + 2) = 0uLL;
        *((_OWORD *)v5 + 4) = 0uLL;
        *(_OWORD *)v5 = 0uLL;
        *((_OWORD *)v5 + 3) = 0uLL;
        *((_QWORD *)v5 + 4) = v5 + 48;
        *((_DWORD *)v5 + 11) = 1;
        v5 += 80;
      }
      while (v5 != v11);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 4);
    v7 = v6 + a2;
    if (v6 + a2 > 0x333333333333333)
      abort();
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 4);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x199999999999999)
      v9 = 0x333333333333333;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x333333333333333)
        sub_1C4764EE4();
      v10 = (char *)operator new(80 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[80 * v6];
    v13 = &v12[80 * a2];
    v14 = v12;
    do
    {
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_QWORD *)v14 + 4) = v14 + 48;
      *((_DWORD *)v14 + 11) = 1;
      v14 += 80;
    }
    while (v14 != v13);
    v15 = &v10[80 * v9];
    v16 = (char *)*a1;
    if (v5 != *a1)
    {
      v17 = 0;
      do
      {
        v18 = &v12[v17];
        v19 = &v5[v17];
        *((_DWORD *)v18 - 20) = *(_DWORD *)&v5[v17 - 80];
        *((_QWORD *)v18 - 8) = 0;
        *((_QWORD *)v18 - 7) = 0;
        *(_OWORD *)(v18 - 72) = *(_OWORD *)&v5[v17 - 72];
        *((_QWORD *)v18 - 7) = *(_QWORD *)&v5[v17 - 56];
        *((_QWORD *)v19 - 9) = 0;
        *((_QWORD *)v19 - 8) = 0;
        *((_QWORD *)v19 - 7) = 0;
        *((_QWORD *)v18 - 6) = &v12[v17 - 32];
        *(_QWORD *)&v12[v17 - 40] = 0x100000000;
        if (*(_DWORD *)&v5[v17 - 40])
          sub_1C4D6CF74((uint64_t)&v12[v17 - 48], (uint64_t *)v19 - 6);
        v17 -= 80;
      }
      while (&v5[v17] != v16);
      v5 = (char *)*a1;
      v12 += v17;
    }
    v20 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v15;
    if (v20 != v5)
    {
      v21 = v20 - 32;
      do
      {
        v22 = (char *)*((_QWORD *)v21 - 2);
        if (v21 != v22)
          free(v22);
        v23 = (void *)*((_QWORD *)v21 - 5);
        if (v23)
        {
          *((_QWORD *)v21 - 4) = v23;
          operator delete(v23);
        }
        v24 = v21 - 48;
        v21 -= 80;
      }
      while (v24 != v5);
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_1C5FE4C6C(_QWORD *a1, uint64_t a2, int a3)
{
  char *v6;
  unint64_t v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  int v17;
  uint64_t v18;
  llvm::MachineFunction *v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  __int16 v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  _BYTE *v46;
  int v47;
  BOOL v48;
  int v49;
  __int16 v50;
  int v51;
  unsigned __int16 *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint8x8_t v68;
  unint64_t v69;
  unint64_t v70;
  int *v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  const char *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v6 = (char *)a1[125];
  v7 = a1[126];
  if ((unint64_t)v6 >= v7)
  {
    v9 = (char *)a1[124];
    v10 = (v6 - v9) >> 2;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
      abort();
    v12 = v7 - (_QWORD)v9;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        sub_1C4764EE4();
      v14 = (char *)operator new(4 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    *(_DWORD *)v15 = a3;
    v8 = v15 + 4;
    while (v6 != v9)
    {
      v16 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v15 - 1) = v16;
      v15 -= 4;
    }
    a1[124] = v15;
    a1[125] = v8;
    a1[126] = &v14[4 * v13];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v6 = a3;
    v8 = v6 + 4;
  }
  a1[125] = v8;
  v17 = *(_DWORD *)a2;
  v19 = sub_1C55437B8(a1 + 114, *(_DWORD *)a2);
  v20 = (unint64_t *)v18;
  v21 = (unint64_t *)a1[120];
  v22 = *(_QWORD *)(a1[119] + 40);
  *(_QWORD *)(v18 + 24) = v22;
  v23 = *(_QWORD *)(v22 + 32);
  v24 = *(unsigned int *)(v18 + 40);
  if ((_DWORD)v24)
  {
    v83 = *(_QWORD *)(v18 + 32);
    v84 = *(_QWORD *)(v23 + 40);
    v85 = 32 * v24;
    do
    {
      if (!*(_BYTE *)v83)
      {
        v86 = *(unsigned int *)(v83 + 4);
        if ((int)v86 >= 0)
          v87 = (uint64_t *)(*(_QWORD *)(v84 + 272) + 8 * v86);
        else
          v87 = (uint64_t *)(*(_QWORD *)(v84 + 24) + 16 * (v86 & 0x7FFFFFFF) + 8);
        v88 = *v87;
        if (*v87)
        {
          v89 = *(_QWORD *)(v88 + 16);
          *(_QWORD *)(v88 + 16) = v83;
          *(_QWORD *)(v83 + 16) = v89;
          if ((*(_BYTE *)(v83 + 3) & 1) != 0)
          {
            *(_QWORD *)(v83 + 24) = v88;
          }
          else
          {
            *(_QWORD *)(v83 + 24) = 0;
            v87 = (uint64_t *)(v89 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v83 + 16) = v83;
          *(_QWORD *)(v83 + 24) = 0;
        }
        *v87 = v83;
      }
      v83 += 32;
      v85 -= 32;
    }
    while (v85);
  }
  v25 = *(_QWORD *)(v23 + 728);
  if (v25)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 24))(v25, v18);
  v26 = *v21 & 0xFFFFFFFFFFFFFFF8;
  *v20 = v26 | *v20 & 7;
  v20[1] = (unint64_t)v21;
  *(_QWORD *)(v26 + 8) = v20;
  *v21 = *v21 & 7 | (unint64_t)v20;
  v90 = a1;
  v27 = a1[121];
  if (v27)
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v27 + 24))(v27, v20);
  v28 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v28)
  {
    v29 = 0;
    v30 = 16 * v28;
    v31 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v32 = *((unsigned __int8 *)v31 - 8);
      if (v32 == 2)
        break;
      if (v32 == 1)
      {
        if (v29)
          goto LABEL_31;
        v33 = sub_1C4C915C4(v17);
        if ((v33 & 0xFF00000000) == 0)
          goto LABEL_135;
        if ((v33 - 190) < 4 || (v33 - 105) < 2)
        {
LABEL_31:
          v34 = *v31;
          v93 = 0;
          v91 = 0;
          v92 = v34;
          v94 = 0;
          v95 = 0;
        }
        else
        {
          v43 = *v31;
          v93 = 0;
          v94 = 0;
          v95 = 0;
          v91 = 0x1000000;
          v92 = v43;
        }
        goto LABEL_33;
      }
      v36 = *(_QWORD *)v31;
      if (**(_BYTE **)v31 == 4)
      {
        v37 = 0;
        v38 = *(_DWORD *)(*(_QWORD *)(v36 + 24) + 16);
        v39 = 81;
        v40 = 0;
        switch(*(_DWORD *)(v36 + 16))
        {
          case 0:
            v41 = *(_DWORD *)(v36 + 32);
            if (v41 == 4)
              v42 = 2;
            else
              v42 = 3;
            if (v41 == 2)
              v37 = 1;
            else
              v37 = v42;
            v40 = 64;
            goto LABEL_73;
          case 1:
          case 3:
            goto LABEL_73;
          case 2:
            v40 = 68;
            v37 = 4;
            goto LABEL_73;
          case 4:
            goto LABEL_52;
          case 5:
            v39 = 82;
            goto LABEL_52;
          case 6:
            v39 = 83;
            goto LABEL_52;
          case 7:
            v39 = 84;
            goto LABEL_52;
          case 8:
            v39 = 85;
LABEL_52:
            if (v29 == sub_1C4C2FD5C((unsigned __int16)v17))
            {
              v44 = sub_1C4C915C4(v17);
              if ((v44 & 0xFF00000000) == 0)
                goto LABEL_135;
              v45 = (v44 - 164) >= 4 && (v44 - 78) > 2;
              v46 = *(_BYTE **)(v90[113] + 16);
              v47 = *(_DWORD *)(v36 + 32);
              if (v46[303] || v46[305] || ((v46[362] != 0) & ~v45) != 0)
              {
                v37 = ((v47 == 2) | (unsigned __int16)(2 * (v38 & 1))) + 129;
                if (v47 == 2)
                {
                  v51 = -2;
                }
                else
                {
                  v37 = 129;
                  v51 = -1;
                }
              }
              else
              {
                v48 = v47 == 2;
                if (v47 == 2)
                  v49 = 1;
                else
                  v49 = 15;
                if (v48)
                  v50 = 130;
                else
                  v50 = 129;
                v37 = v50 + 2 * (v49 & v38);
                v51 = ~v49;
              }
              v38 &= v51;
            }
            else
            {
              v37 = 0;
            }
            v38 >>= 1;
            v40 = v39;
LABEL_73:
            v93 = 0;
            LODWORD(v94) = v40;
            LODWORD(v95) = 0;
            v91 = ((v37 & 0xFFF) << 8) | 7;
            v92 = v38;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v20, v19, (const llvm::MachineOperand *)&v91);
            break;
          case 9:
            v37 = 0;
            v40 = 86;
            goto LABEL_73;
          case 0xA:
            v37 = 0;
            v40 = 87;
            goto LABEL_73;
          default:
            v40 = 0;
            goto LABEL_73;
        }
      }
LABEL_34:
      ++v29;
      v31 += 4;
      v30 -= 16;
      if (!v30)
        goto LABEL_77;
    }
    v35 = *(_QWORD *)v31;
    v91 = 1;
    v93 = 0;
    v94 = v35;
LABEL_33:
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v20, v19, (const llvm::MachineOperand *)&v91);
    goto LABEL_34;
  }
LABEL_77:
  v52 = (unsigned __int16 *)v20[2];
  v53 = *((_QWORD *)v52 + 2);
  if ((v53 & 0x300) == 0)
    return;
  v54 = *v52;
  v55 = sub_1C4C915C4(v54);
  if ((v55 & 0xFF00000000) == 0)
LABEL_135:
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  if ((int)v55 > 187)
  {
    if ((v55 - 188) <= 1)
    {
      v56 = sub_1C4C32DEC(v54) == 80;
      v57 = 2;
      v58 = 4;
      goto LABEL_88;
    }
    goto LABEL_99;
  }
  if ((_DWORD)v55 == 19 || (_DWORD)v55 == 63)
  {
    v56 = sub_1C4C32DEC(v54) == 15;
    goto LABEL_87;
  }
  if ((_DWORD)v55 != 147)
  {
LABEL_99:
    v67 = *(_QWORD *)(v20[4] + 32 * sub_1C4C2FD5C(v54) + 16);
    v68 = (uint8x8_t)vcnt_s8((int8x8_t)(v67 >> 4));
    v68.i16[0] = vaddlv_u8(v68);
    v59 = qword_1C8677280[v67 & 0xF] * v68.u32[0];
    goto LABEL_91;
  }
  v56 = sub_1C4C32DEC(v54) == 65;
LABEL_87:
  v57 = 4;
  v58 = 2;
LABEL_88:
  if (v56)
    v59 = v58;
  else
    v59 = v57;
LABEL_91:
  v60 = v59 | (v59 >> 1) | ((v59 | (v59 >> 1)) >> 2);
  v61 = v60 | (v60 >> 4) | ((v60 | (v60 >> 4)) >> 8);
  v62 = __clz((v61 | (v61 >> 16)) + 1) ^ 0x3F;
  LODWORD(v63) = v53;
  if ((v54 - 4348) <= 5)
  {
    v64 = sub_1C484358C(*(_QWORD *)(v20[3] + 32) + 128, 80, 3);
    *(_OWORD *)v64 = xmmword_1C640F860;
    *(_DWORD *)(v64 + 16) = 0;
    *(_BYTE *)(v64 + 20) = 0;
    *(_QWORD *)(v64 + 24) = ((v59 & 0x1FFFFFFF) << 6) | 1;
    *(_WORD *)(v64 + 32) = 2;
    *(_BYTE *)(v64 + 34) = v62;
    *(_OWORD *)(v64 + 40) = 0u;
    *(_OWORD *)(v64 + 56) = 0u;
    *(_QWORD *)(v64 + 72) = 0;
    *(_WORD *)(v64 + 36) = 1;
    llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v20, v19, (llvm::MachineMemOperand *)v64);
    v63 = *(_QWORD *)(v20[2] + 16);
  }
  v65 = v63 & 0x1C00;
  v66 = 3;
  if (v65 != 2048 && (v63 & 0x4000000) == 0)
  {
    switch(v65)
    {
      case 1024:
        v66 = 1;
        break;
      case 3072:
        v66 = 0;
        break;
      case 4096:
        v66 = 5;
        break;
      default:
        v66 = 4;
        break;
    }
  }
  v69 = sub_1C484358C(*(_QWORD *)(v20[3] + 32) + 128, 80, 3);
  *(_OWORD *)v69 = xmmword_1C640F860;
  *(_DWORD *)(v69 + 16) = v66;
  *(_BYTE *)(v69 + 20) = 0;
  *(_QWORD *)(v69 + 24) = ((v59 & 0x1FFFFFFF) << 6) | 1;
  *(_WORD *)(v69 + 32) = (v53 >> 8) & 3;
  *(_BYTE *)(v69 + 34) = v62;
  *(_OWORD *)(v69 + 40) = 0u;
  *(_OWORD *)(v69 + 56) = 0u;
  *(_QWORD *)(v69 + 72) = 0;
  *(_WORD *)(v69 + 36) = WORD1(v53) & 0x200 | 1;
  llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v20, v19, (llvm::MachineMemOperand *)v69);
  v71 = (int *)(v20 + 6);
  v70 = v20[6];
  if (v70 >= 8)
  {
    if ((v70 & 7) != 0)
    {
      if ((v20[6] & 7) != 3)
        return;
      v72 = (int *)(v70 & 0xFFFFFFFFFFFFFFF8);
      if ((v70 & 0xFFFFFFFFFFFFFFF8) == 0)
        return;
      v74 = *v72;
      v71 = v72 + 2;
      v73 = v74;
      if (!(_DWORD)v74)
        return;
      v75 = &v71[2 * v73];
    }
    else
    {
      v20[6] = v70 & 0xFFFFFFFFFFFFFFF8;
      v75 = (int *)(v20 + 7);
    }
    do
    {
      v76 = *(_QWORD *)v71;
      if ((*(_WORD *)(*(_QWORD *)v71 + 32) & 2) != 0 && !*(_DWORD *)(v76 + 16))
      {
        v78 = *(_QWORD *)(v76 + 24);
        v77 = (unint64_t *)(v76 + 24);
        if ((v78 & 0xFFFFFFFFFFFFFFF9) != 0)
        {
          v80 = (unint64_t)(sub_1C4825F50(v77) + 7) >> 3;
          if ((_DWORD)v79 == 1)
        }
        else
        {
          v80 = -1;
        }
        v81 = v80 | (v80 >> 1) | ((v80 | (v80 >> 1)) >> 2);
        v82 = v81 | (v81 >> 4) | ((v81 | (v81 >> 4)) >> 8);
        *((_DWORD *)v90 + 246) += (((v82 | (v82 >> 16)) >> 32) | v82 | (v82 >> 16)) + 1;
      }
      v71 += 2;
    }
    while (v71 != v75);
  }
}

unsigned int *sub_1C5FE5444(unsigned int *result, uint64_t a2, uint64_t *a3)
{
  unsigned int *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = result;
  v5 = result[2];
  if (v5 >= result[3])
  {
    v7 = *a3;
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v5 + 1, 16);
    v5 = *(_QWORD *)v4 + 16 * v4[2];
    *(_QWORD *)v5 = a2;
    *(_QWORD *)(v5 + 8) = v7;
    LODWORD(v5) = v4[2];
  }
  else
  {
    v6 = (_QWORD *)(*(_QWORD *)result + 16 * v5);
    *v6 = a2;
    v6[1] = *a3;
  }
  v4[2] = v5 + 1;
  return result;
}

void sub_1C5FE54C4(uint64_t a1, llvm::raw_ostream *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t i;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unsigned int *v28;
  _QWORD *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  unsigned __int16 *v37;
  uint64_t v38;
  __int16 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  llvm::MachineBasicBlock *v53;
  _QWORD *v54;
  llvm::MachineBasicBlock **v55;
  llvm::MachineBasicBlock **v56;
  int v57;
  int v58;
  char *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  llvm::MachineFunction *v68;
  unint64_t *v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  llvm::MachineBasicBlock *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  llvm::MachineBasicBlock *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t j;
  unsigned __int16 *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  int v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  llvm::MachineBasicBlock **v104;
  llvm::MachineBasicBlock **v105;
  int v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  _QWORD *FallThrough;
  llvm::MachineBasicBlock *v115;
  _QWORD *v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const void *v150;
  size_t v151;
  void *v152;
  _QWORD *v153;
  _QWORD *v155;
  uint64_t *v156;
  llvm::MachineBasicBlock *v157;
  _QWORD *v159;
  uint64_t v160;
  llvm::MachineBasicBlock *v161;
  void *v162;
  uint64_t v163;
  _QWORD v164[18];

  v164[16] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 904);
  v155 = v2;
  v3 = (_QWORD *)v2[41];
  v153 = v2 + 40;
  if (v3 != v2 + 40)
  {
    v4 = (_QWORD *)v2[41];
    while (2)
    {
      for (i = v4[7]; (_QWORD *)i != v4 + 6; i = *(_QWORD *)(i + 8))
      {
        v6 = **(unsigned __int16 **)(i + 16);
        v7 = sub_1C4C2FD5C(v6);
        if (v7 >= 1)
        {
          v8 = 0;
          v9 = (unsigned __int16)v7;
          v10 = (unsigned __int16)v7;
          v11 = (_DWORD *)(*(_QWORD *)(i + 32) + 16);
          while (1)
          {
            if (*((_BYTE *)v11 - 16) == 7 && *v11 == 64)
            {
              v12 = sub_1C4C2FD5C(v6);
              v13 = sub_1C4C915C4(v6);
              if ((v13 & 0xFF00000000) == 0)
                goto LABEL_255;
              v14 = (v13 - 190) >= 4 && (v13 - 105) > 1 || (_DWORD)v8 != v12;
              if (v10 > v8 && v14)
                break;
            }
            ++v8;
            v11 += 8;
            if (v9 == v8)
              goto LABEL_18;
          }
          *(_WORD *)(*v155 + 18) = *(_WORD *)(*v155 + 18) & 0xC00F | 0x640;
          goto LABEL_25;
        }
LABEL_18:
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v4 = (_QWORD *)v4[1];
      if (v4 != v153)
        continue;
      break;
    }
  }
LABEL_25:
  v15 = *(unsigned int *)(a1 + 984);
  if ((_DWORD)v15)
  {
    v16 = v155[7];
    *(_QWORD *)(v16 + 48) = v15;
    *(_DWORD *)(v16 + 72) = v15;
  }
  v162 = v164;
  v163 = 0x800000000;
  v17 = v3 + 6;
  v18 = v3[7];
  if ((_QWORD *)v18 != v3 + 6)
  {
    v19 = 0;
    v20 = -4;
    do
    {
      v21 = *(unsigned __int16 **)(v18 + 16);
      v22 = *((_QWORD *)v21 + 1);
      if ((*(_WORD *)(v18 + 44) & 0xC) != 0 && (*(_WORD *)(v18 + 44) & 4) == 0)
      {
        v31 = v18;
        if ((v22 & 0x400) == 0)
        {
          while ((*(_WORD *)(v31 + 44) & 8) != 0)
          {
            v31 = *(_QWORD *)(v31 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v31 + 16) + 9) & 4) != 0)
              goto LABEL_34;
          }
          goto LABEL_55;
        }
      }
      else if ((v22 & 0x400) == 0)
      {
        goto LABEL_55;
      }
LABEL_34:
      v24 = *v21;
      v25 = sub_1C4C915C4(v24);
      if ((v25 & 0xFF00000000) == 0)
        goto LABEL_255;
      v26 = v25 > 0x10 || ((1 << v25) & 0x10808) == 0;
      if (v26 && (_DWORD)v25 != 151)
      {
        sub_1C4C32DEC(v24);
        v27 = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 32 * sub_1C4C2FD5C(v24) + 16);
        if (v27 < 0)
        {
          v32 = (unsigned int *)(*(_QWORD *)(a1 + 992) + v20);
          v29 = (_QWORD *)v18;
          do
          {
            v33 = *v32--;
            v29 = (_QWORD *)(*v29 & 0xFFFFFFFFFFFFFFF8);
            v27 += v33;
          }
          while (v27);
        }
        else
        {
          if (!v27)
          {
            v159 = (_QWORD *)v18;
            sub_1C5FE5444((unsigned int *)&v162, v18, (uint64_t *)&v159);
            goto LABEL_55;
          }
          v28 = (unsigned int *)(*(_QWORD *)(a1 + 992) + v19);
          v29 = (_QWORD *)v18;
          do
          {
            v30 = *v28++;
            v29 = (_QWORD *)v29[1];
            v27 -= v30;
          }
          while (v27);
        }
        v159 = v29;
        sub_1C5FE5444((unsigned int *)&v162, v18, (uint64_t *)&v159);
        if (!v18)
          goto LABEL_58;
      }
LABEL_55:
      if ((*(_BYTE *)v18 & 4) == 0)
      {
LABEL_58:
        while ((*(_WORD *)(v18 + 44) & 8) != 0)
          v18 = *(_QWORD *)(v18 + 8);
      }
      v18 = *(_QWORD *)(v18 + 8);
      v19 += 4;
      v20 += 4;
    }
    while ((_QWORD *)v18 != v17);
  }
  v34 = *v17 & 0xFFFFFFFFFFFFFFF8;
  if (!v34 || (*(_BYTE *)v34 & 4) == 0)
  {
    while ((*(_WORD *)(v34 + 44) & 4) != 0)
      v34 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((_QWORD *)v34 != v17)
  {
    LOBYTE(v35) = 0;
    v36 = 0;
    while (!v36)
    {
      if ((v35 & 1) == 0)
      {
        v42 = *(_QWORD *)(v34 + 16);
        v43 = *(_QWORD *)(v42 + 8);
        if ((*(_WORD *)(v34 + 44) & 0xC) != 0 && (*(_WORD *)(v34 + 44) & 4) == 0)
        {
          v48 = v34;
          if ((v43 & 0x400) != 0)
            break;
          while ((*(_WORD *)(v48 + 44) & 8) != 0)
          {
            v48 = *(_QWORD *)(v48 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v48 + 16) + 9) & 4) != 0)
              goto LABEL_68;
          }
          v49 = v34;
          if (*(_QWORD *)(v42 + 16) & 0x40 | *(_QWORD *)(v42 + 8) & 0x20)
            break;
          while ((*(_WORD *)(v49 + 44) & 8) != 0)
          {
            v49 = *(_QWORD *)(v49 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v49 + 16) + 8) & 0x20) != 0)
              goto LABEL_68;
          }
        }
        else if ((v43 & 0x400) != 0 || *(_QWORD *)(v42 + 16) & 0x40 | *(_QWORD *)(v42 + 8) & 0x20)
        {
          break;
        }
      }
LABEL_70:
      v37 = *(unsigned __int16 **)(v34 + 16);
      v38 = sub_1C4C915C4(*v37);
      if ((v38 & 0xFF00000000) == 0)
        goto LABEL_255;
      v36 = (v38 - 13) < 2;
      if ((v38 - 13) >= 2)
      {
        v39 = *(_WORD *)(v34 + 44);
        v40 = *((_QWORD *)v37 + 1);
        if ((v39 & 0xC) == 0 || (v39 & 4) != 0)
        {
          if ((v40 & 0x400) == 0)
          {
            v45 = (v40 >> 5) & 1;
            if ((v37[8] & 0x40) != 0)
              LOBYTE(v35) = 1;
            else
              LOBYTE(v35) = v45;
            goto LABEL_73;
          }
        }
        else
        {
          v41 = v34;
          if ((v40 & 0x400) == 0)
          {
            while ((*(_WORD *)(v41 + 44) & 8) != 0)
            {
              v41 = *(_QWORD *)(v41 + 8);
              LOBYTE(v35) = 1;
              if ((*(_BYTE *)(*(_QWORD *)(v41 + 16) + 9) & 4) != 0)
                goto LABEL_73;
            }
            v46 = v34;
            if (!(*((_QWORD *)v37 + 2) & 0x40 | *((_QWORD *)v37 + 1) & 0x20))
            {
              do
              {
                v47 = *(unsigned __int16 *)(v46 + 44);
                v35 = (v47 >> 3) & 1;
                if ((v47 & 8) == 0)
                  break;
                v46 = *(_QWORD *)(v46 + 8);
              }
              while ((*(_BYTE *)(*(_QWORD *)(v46 + 16) + 8) & 0x20) == 0);
              goto LABEL_73;
            }
          }
        }
      }
      LOBYTE(v35) = 1;
LABEL_73:
      v34 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFFFF8;
      if (!v34 || (*(_BYTE *)v34 & 4) == 0)
      {
        while ((*(_WORD *)(v34 + 44) & 4) != 0)
          v34 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((_QWORD *)v34 == v17)
        goto LABEL_109;
    }
LABEL_68:
    llvm::MachineBasicBlock::splitAt((llvm::MachineBasicBlock *)v3, (llvm::MachineInstr *)v34, 0, 0);
    goto LABEL_70;
  }
LABEL_109:
  if ((_DWORD)v163)
  {
    v50 = (uint64_t *)v162;
    v156 = (uint64_t *)((char *)v162 + 16 * v163);
    while (1)
    {
      v52 = *v50;
      v51 = (_QWORD *)v50[1];
      v53 = (llvm::MachineBasicBlock *)v51[3];
      if (*((_QWORD **)v53 + 7) != v51)
        v53 = llvm::MachineBasicBlock::splitAt(v53, (llvm::MachineInstr *)(*v51 & 0xFFFFFFFFFFFFFFF8), 0, 0);
      v54 = *(_QWORD **)(v52 + 24);
      v55 = (llvm::MachineBasicBlock **)v54[11];
      v56 = (llvm::MachineBasicBlock **)v54[12];
      if (v55 != v56)
      {
        while (*v55 != v53)
        {
          if (++v55 == v56)
          {
            v55 = (llvm::MachineBasicBlock **)v54[12];
            break;
          }
        }
      }
      if (v55 == v56)
        llvm::MachineBasicBlock::addSuccessorWithoutProb(v54, v53);
      v57 = **(unsigned __int16 **)(v52 + 16);
      v58 = sub_1C4C7CC74(v57);
      v59 = sub_1C4C640C0(v57);
      if (v60)
      {
        if (v60 >> 62)
LABEL_253:
          abort();
        v61 = v59;
        v62 = &v59[4 * v60];
        v63 = (char *)operator new(4 * v60);
        memcpy(v63, v61, v62 - v61);
        v64 = &v63[v62 - v61];
      }
      else
      {
        v63 = 0;
        v64 = 0;
      }
      *(_DWORD *)&v63[4 * v58] = 6;
      v65 = sub_1C4C915C4(v57);
      if ((v65 & 0xFF00000000) == 0)
        break;
      v66 = sub_1C4C640F8(v65, (v64 - v63) >> 2, v63);
      *(_QWORD *)(a1 + 952) = *(_QWORD *)(v52 + 24);
      *(_QWORD *)(a1 + 960) = v52;
      v68 = sub_1C55437B8((_QWORD *)(a1 + 912), v66);
      v69 = (unint64_t *)v67;
      v70 = *(unint64_t **)(a1 + 960);
      v71 = *(_QWORD *)(*(_QWORD *)(a1 + 952) + 40);
      *(_QWORD *)(v67 + 24) = v71;
      v72 = *(_QWORD *)(v71 + 32);
      v73 = *(unsigned int *)(v67 + 40);
      if ((_DWORD)v73)
      {
        v79 = *(_QWORD *)(v67 + 32);
        v80 = *(_QWORD *)(v72 + 40);
        v81 = 32 * v73;
        do
        {
          if (!*(_BYTE *)v79)
          {
            v82 = *(unsigned int *)(v79 + 4);
            if ((int)v82 >= 0)
              v83 = (uint64_t *)(*(_QWORD *)(v80 + 272) + 8 * v82);
            else
              v83 = (uint64_t *)(*(_QWORD *)(v80 + 24) + 16 * (v82 & 0x7FFFFFFF) + 8);
            v84 = *v83;
            if (*v83)
            {
              v85 = *(_QWORD *)(v84 + 16);
              *(_QWORD *)(v84 + 16) = v79;
              *(_QWORD *)(v79 + 16) = v85;
              if ((*(_BYTE *)(v79 + 3) & 1) != 0)
              {
                *(_QWORD *)(v79 + 24) = v84;
              }
              else
              {
                *(_QWORD *)(v79 + 24) = 0;
                v83 = (uint64_t *)(v85 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v79 + 16) = v79;
              *(_QWORD *)(v79 + 24) = 0;
            }
            *v83 = v79;
          }
          v79 += 32;
          v81 -= 32;
        }
        while (v81);
      }
      v74 = *(_QWORD *)(v72 + 728);
      if (v74)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 24))(v74, v67);
      v75 = *v70 & 0xFFFFFFFFFFFFFFF8;
      *v69 = v75 | *v69 & 7;
      v69[1] = (unint64_t)v70;
      *(_QWORD *)(v75 + 8) = v69;
      *v70 = *v70 & 7 | (unint64_t)v69;
      v76 = *(_QWORD *)(a1 + 968);
      if (v76)
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v76 + 24))(v76, v69);
      v77 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(v52 + 32)
                                        + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(v52 + 16))
                                        + 16);
      LODWORD(v159) = 1;
      v160 = 0;
      v161 = v77;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v68, (const llvm::MachineOperand *)&v159);
      v160 = 0;
      v161 = v53;
      LODWORD(v159) = 4;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v68, (const llvm::MachineOperand *)&v159);
      v78 = v52;
      if ((*(_BYTE *)v52 & 4) == 0)
      {
        v78 = v52;
        if ((*(_WORD *)(v52 + 44) & 8) != 0)
        {
          v78 = v52;
          do
            v78 = *(_QWORD *)(v78 + 8);
          while ((*(_WORD *)(v78 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v52 + 24) + 40, v52, *(_QWORD *)(v78 + 8));
      if (v63)
        operator delete(v63);
      v50 += 2;
      if (v50 == v156)
        goto LABEL_151;
    }
LABEL_255:
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
  }
LABEL_151:
  v86 = *(_QWORD **)(a1 + 904);
  v87 = (llvm::MachineBasicBlock *)v86[41];
  v157 = (llvm::MachineBasicBlock *)(v86 + 40);
  if (v87 == (llvm::MachineBasicBlock *)(v86 + 40))
  {
    v89 = 0;
  }
  else
  {
    v88 = 0;
    v89 = 0;
    v90 = 0;
    do
    {
      for (j = *((_QWORD *)v87 + 7);
            (llvm::MachineBasicBlock *)j != (llvm::MachineBasicBlock *)((char *)v87 + 48);
            j = *(_QWORD *)(j + 8))
      {
        v92 = *(unsigned __int16 **)(j + 16);
        if ((v92[8] & 0x40) != 0)
        {
          v93 = *v92;
          v94 = sub_1C4C915C4(v93);
          if ((v94 & 0xFF00000000) == 0)
            goto LABEL_255;
          switch((int)v94)
          {
            case 13:
            case 15:
            case 17:
              if (v90 < v88)
              {
                *(_QWORD *)v90 = j;
                v90 += 8;
                break;
              }
              v95 = (v90 - v89) >> 3;
              v96 = v95 + 1;
              if ((unint64_t)(v95 + 1) >> 61)
                goto LABEL_253;
              if ((v88 - v89) >> 2 > v96)
                v96 = (v88 - v89) >> 2;
              if ((unint64_t)(v88 - v89) >= 0x7FFFFFFFFFFFFFF8)
                v97 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v97 = v96;
              if (v97)
              {
                if (v97 >> 61)
                  sub_1C4764EE4();
                v98 = (char *)operator new(8 * v97);
              }
              else
              {
                v98 = 0;
              }
              v109 = &v98[8 * v95];
              *(_QWORD *)v109 = j;
              v108 = v109 + 8;
              while (v90 != v89)
              {
                v110 = *((_QWORD *)v90 - 1);
                v90 -= 8;
                *((_QWORD *)v109 - 1) = v110;
                v109 -= 8;
              }
              v88 = &v98[8 * v97];
              if (v89)
                operator delete(v89);
LABEL_191:
              v89 = v109;
              v90 = v108;
              if (j)
                break;
              goto LABEL_195;
            case 14:
              v99 = *(_DWORD *)(*(_QWORD *)(j + 32) + 32 * sub_1C4C2FD5C(v93) + 16);
              if (v99)
                v100 = v89 == v90;
              else
                v100 = 1;
              if (v100)
                break;
              do
              {
                v102 = *((_QWORD *)v90 - 1);
                v90 -= 8;
                v101 = v102;
                v103 = *(_QWORD **)(v102 + 24);
                v104 = (llvm::MachineBasicBlock **)v103[11];
                v105 = (llvm::MachineBasicBlock **)v103[12];
                if (v104 != v105)
                {
                  while (*v104 != v87)
                  {
                    if (++v104 == v105)
                    {
                      v104 = (llvm::MachineBasicBlock **)v103[12];
                      break;
                    }
                  }
                }
                if (v104 == v105)
                  llvm::MachineBasicBlock::addSuccessorWithoutProb(v103, v87);
                v106 = **(unsigned __int16 **)(v101 + 16);
                v107 = sub_1C4C915C4(v106);
                if ((v107 & 0xFF00000000) == 0)
                  goto LABEL_255;
                if ((_DWORD)v107 == 17)
                  v99 -= *(_DWORD *)(*(_QWORD *)(v101 + 32) + 32 * sub_1C4C2FD5C(v106) + 16);
              }
              while (v99 && v89 != v90);
              v108 = v90;
              v109 = v89;
              goto LABEL_191;
            default:
              llvm::MachineInstr::dump((llvm::MachineInstr *)j);
              __break(1u);
              return;
          }
        }
        if ((*(_BYTE *)j & 4) == 0)
        {
LABEL_195:
          while ((*(_WORD *)(j + 44) & 8) != 0)
            j = *(_QWORD *)(j + 8);
        }
      }
      v87 = (llvm::MachineBasicBlock *)*((_QWORD *)v87 + 1);
    }
    while (v87 != v157);
    v86 = *(_QWORD **)(a1 + 904);
  }
  v111 = v86 + 40;
  v112 = *(uint64_t **)v86[40];
  if (v112 != v86 + 40)
  {
    do
    {
      v113 = (uint64_t *)*v112;
      FallThrough = (_QWORD *)llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)v112);
      if (FallThrough)
      {
        if (((v112[12] - v112[11]) & 0x7FFFFFFF8) == 8)
        {
          v115 = (llvm::MachineBasicBlock *)FallThrough;
          if (((FallThrough[9] - FallThrough[8]) & 0x7FFFFFFF8) == 8)
          {
            v116 = FallThrough + 6;
            if (FallThrough + 6 != (_QWORD *)(FallThrough[6] & 0xFFFFFFFFFFFFFFF8))
            {
              v121 = v112 + 6;
              do
              {
                v122 = *((_QWORD *)v115 + 7);
                v123 = *(_QWORD *)(*(_QWORD *)(v122 + 24) + 32);
                if (v123)
                {
                  v124 = *(_QWORD *)(v123 + 728);
                  if (v124)
                    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v124 + 32))(v124, *((_QWORD *)v115 + 7));
                  v125 = *(unsigned int *)(v122 + 40);
                  if ((_DWORD)v125)
                  {
                    v126 = *(_QWORD *)(v122 + 32);
                    v127 = *(_QWORD *)(v123 + 40);
                    v128 = 32 * v125;
                    do
                    {
                      if (!*(_BYTE *)v126)
                      {
                        v129 = *(unsigned int *)(v126 + 4);
                        if ((v129 & 0x80000000) != 0)
                          v130 = (uint64_t *)(*(_QWORD *)(v127 + 24) + 16 * (v129 & 0x7FFFFFFF) + 8);
                        else
                          v130 = (uint64_t *)(*(_QWORD *)(v127 + 272) + 8 * v129);
                        v131 = *v130;
                        v133 = *(_QWORD *)(v126 + 16);
                        v132 = *(_QWORD *)(v126 + 24);
                        if (v126 != *v130)
                          v130 = (uint64_t *)(v133 + 24);
                        *v130 = v132;
                        if (v132)
                          v134 = v132;
                        else
                          v134 = v131;
                        *(_QWORD *)(v134 + 16) = v133;
                        *(_QWORD *)(v126 + 16) = 0;
                        *(_QWORD *)(v126 + 24) = 0;
                      }
                      v126 += 32;
                      v128 -= 32;
                    }
                    while (v128);
                  }
                }
                v135 = *(unint64_t **)(v122 + 8);
                v136 = *(_QWORD *)v122 & 0xFFFFFFFFFFFFFFF8;
                *v135 = v136 | *v135 & 7;
                *(_QWORD *)(v136 + 8) = v135;
                *(_QWORD *)v122 &= 7uLL;
                *(_QWORD *)(v122 + 8) = 0;
                v137 = v112[5];
                *(_QWORD *)(v122 + 24) = v137;
                v138 = *(_QWORD *)(v137 + 32);
                v139 = *(unsigned int *)(v122 + 40);
                if ((_DWORD)v139)
                {
                  v142 = *(_QWORD *)(v122 + 32);
                  v143 = *(_QWORD *)(v138 + 40);
                  v144 = 32 * v139;
                  do
                  {
                    if (!*(_BYTE *)v142)
                    {
                      v145 = *(unsigned int *)(v142 + 4);
                      if ((int)v145 >= 0)
                        v146 = (uint64_t *)(*(_QWORD *)(v143 + 272) + 8 * v145);
                      else
                        v146 = (uint64_t *)(*(_QWORD *)(v143 + 24) + 16 * (v145 & 0x7FFFFFFF) + 8);
                      v147 = *v146;
                      if (*v146)
                      {
                        v148 = *(_QWORD *)(v147 + 16);
                        *(_QWORD *)(v147 + 16) = v142;
                        *(_QWORD *)(v142 + 16) = v148;
                        if ((*(_BYTE *)(v142 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v142 + 24) = v147;
                        }
                        else
                        {
                          *(_QWORD *)(v142 + 24) = 0;
                          v146 = (uint64_t *)(v148 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v142 + 16) = v142;
                        *(_QWORD *)(v142 + 24) = 0;
                      }
                      *v146 = v142;
                    }
                    v142 += 32;
                    v144 -= 32;
                  }
                  while (v144);
                }
                v140 = *(_QWORD *)(v138 + 728);
                if (v140)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v140 + 24))(v140, v122);
                v141 = *v121 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v122 = v141 | *(_QWORD *)v122 & 7;
                *(_QWORD *)(v122 + 8) = v121;
                *(_QWORD *)(v141 + 8) = v122;
                *v121 = *v121 & 7 | v122;
              }
              while (v116 != (_QWORD *)(*v116 & 0xFFFFFFFFFFFFFFF8));
            }
            llvm::MachineBasicBlock::transferSuccessors((char *)v112, v115);
            llvm::MachineBasicBlock::removeSuccessor((llvm::MachineBasicBlock *)v112, v115, 0);
            v117 = *((_QWORD *)v115 + 4);
            v118 = v117 + 320;
            *(_QWORD *)(*(_QWORD *)(v117 + 104) + 8 * *((unsigned int *)v115 + 6)) = 0;
            *((_DWORD *)v115 + 6) = -1;
            v119 = *(_QWORD *)v115;
            v120 = (_QWORD *)*((_QWORD *)v115 + 1);
            *v120 = *(_QWORD *)v115;
            *(_QWORD *)(v119 + 8) = v120;
            *(_QWORD *)v115 = 0;
            *((_QWORD *)v115 + 1) = 0;
            llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v118, v115);
          }
        }
      }
      v112 = v113;
    }
    while (v113 != v111);
    v86 = *(_QWORD **)(a1 + 904);
  }
  llvm::MachineFunction::RenumberBlocks((llvm::MachineFunction *)v86, 0);
  if (v89)
    operator delete(v89);
  if (v162 != v164)
    free(v162);
  llvm::legacy::PassManagerImpl::run(*(llvm::legacy::PassManagerImpl **)(a1 + 24), (llvm::Module *)(a1 + 128));
  v149 = *(_QWORD *)(a1 + 120);
  v150 = *(const void **)v149;
  v151 = *(_QWORD *)(v149 + 8);
  v152 = (void *)*((_QWORD *)a2 + 4);
  if (v151 <= *((_QWORD *)a2 + 3) - (_QWORD)v152)
  {
    if (v151)
    {
      memcpy(v152, v150, v151);
      *((_QWORD *)a2 + 4) += v151;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v150, v151);
  }
}

uint64_t sub_1C5FE6238(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  void *v7;
  uint64_t v8;
  void *v9;
  char v10;
  int v11;
  void *v12;
  size_t v13;
  size_t v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *p_p;
  size_t size;
  uint64_t v29;
  llvm::AGX::AGXCompiler *v30;
  llvm::PassRegistry *v31;
  _QWORD *v32;
  llvm::MachineModuleInfo *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void **FunctionGroupInfoWrapperPass;
  const void **v39;
  llvm::MCContext *v40;
  llvm::PointerType *v41;
  char *v42;
  _QWORD **v43;
  unsigned int v44;
  _QWORD *v45;
  _QWORD *v46;
  llvm::MachineFunction *MachineFunction;
  llvm::MachineFunction *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v57;
  __int128 v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  __int128 v92;
  _BYTE v93[40];
  _BYTE v94[12];
  __int128 v95;
  _QWORD v96[4];
  __int128 v97;
  _QWORD v98[4];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  std::string __p;
  _QWORD *v105;
  __int128 v106;
  _QWORD **v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD v110[2];
  int v111;
  __int16 v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  _QWORD v117[15];
  _QWORD v118[19];
  _QWORD v119[7];

  v119[4] = *MEMORY[0x1E0C80C00];
  v5 = operator new();
  *(_QWORD *)v5 = &off_1E81AAB70;
  llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)(v5 + 8));
  llvm::legacy::PassManager::PassManager((llvm::legacy::PassManager *)(v5 + 16));
  *(_QWORD *)(v5 + 32) = v5 + 56;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  sub_1C613932C(v5 + 56, v5 + 32);
  v57 = v5 + 128;
  llvm::Module::Module(v5 + 128, "agx.mc.sim", 0xAuLL, v5 + 8);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  *(_QWORD *)(v5 + 888) = qword_1ED830BC0[0];
  *(_QWORD *)(v5 + 896) = 0;
  *(_QWORD *)(v5 + 912) = &off_1E816EC08;
  *(_OWORD *)(v5 + 920) = 0u;
  *(_OWORD *)(v5 + 936) = 0u;
  *(_OWORD *)(v5 + 952) = 0u;
  *(_OWORD *)(v5 + 968) = 0u;
  *(_DWORD *)(v5 + 984) = 0;
  *(_QWORD *)(v5 + 992) = 0;
  *(_QWORD *)(v5 + 1008) = 0;
  *(_QWORD *)(v5 + 1000) = 0;
  v9 = *(void **)(a2 + 56);
  v8 = a2 + 56;
  v7 = v9;
  v10 = *(_BYTE *)(v8 + 23);
  v11 = v10;
  if (v10 >= 0)
    v12 = (void *)v8;
  else
    v12 = v7;
  v13 = v10 & 0x7F;
  if (v11 >= 0)
    v14 = v13;
  else
    v14 = *(_QWORD *)(v8 + 8);
  LOBYTE(v86) = 0;
  *(_QWORD *)((char *)&v86 + 4) = 0;
  WORD6(v86) = WORD6(v86) & 0xE000 | 0x400;
  *(_QWORD *)&v87 = 0x100000001;
  BYTE8(v87) &= 0xF8u;
  HIDWORD(v87) = 0;
  LODWORD(v88) = v88 & 0xFE000000 | 0x30;
  HIDWORD(v88) = 4;
  v89 = 0;
  v90 = 0;
  v15 = v91 & 0xF000;
  v91 &= 0xF000u;
  v92 = 0uLL;
  *(_OWORD *)v93 = 0uLL;
  *(_OWORD *)&v93[16] = xmmword_1C677F4F0;
  *(_DWORD *)&v93[32] = -65536;
  *(_DWORD *)&v93[36] = 0;
  *(_QWORD *)&v94[4] = 2;
  v101 = 0uLL;
  v102 = 0uLL;
  v95 = 0uLL;
  memset(v96, 0, sizeof(v96));
  v97 = 0uLL;
  memset(v98, 0, sizeof(v98));
  v99 = 0uLL;
  v100 = 0uLL;
  v103 = 0;
  if (a3)
    v16 = 6656;
  else
    v16 = 4096;
  *(_WORD *)v94 = v16 | *(_WORD *)v94 & 0xC000;
  v17 = operator new();
  v58[0] = v86;
  v58[1] = v87;
  v60 = 0;
  v61 = 0;
  v59 = v88;
  v62 = v15;
  v64 = 0;
  v65 = 0;
  v63 = 0;
  v66 = *(_OWORD *)&v93[8];
  v67 = *(_OWORD *)&v93[24];
  v69 = *(_DWORD *)&v94[8];
  v68 = *(_QWORD *)v94;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = *(_OWORD *)&v96[1];
  v74 = v96[3];
  v76 = v98[0];
  v75 = v97;
  v77 = *(_OWORD *)&v98[1];
  v78 = v98[3];
  v80 = v100;
  v81 = 0;
  v79 = v99;
  v82 = 0;
  v83 = 0;
  v84 = v102;
  v85 = v103;
  v18 = sub_1C6155558(v17, a1, (__int128 *)(v8 - 48), v12, v14, "", 0, v58, 0, 0, 3);
  v19 = *(_QWORD *)(v5 + 896);
  *(_QWORD *)(v5 + 896) = v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1C48433E8((uint64_t)v58);
  v20 = *(_QWORD *)(v5 + 896);
  v21 = v20 + 448;
  v22 = *(_BYTE *)(v20 + 471);
  v24 = *(_QWORD *)(v20 + 448);
  v23 = *(_QWORD *)(v20 + 456);
  if (v22 >= 0)
    v25 = v21;
  else
    v25 = v24;
  if (v22 >= 0)
    v26 = v22 & 0x7F;
  else
    v26 = v23;
  llvm::Triple::normalize(v25, v26, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  sub_1C4D828E4(v57, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v29 = *(_QWORD *)(v5 + 896) + 16;
  LOWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  WORD2(__p.__r_.__value_.__r.__words[2]) = 0;
  v105 = &v107;
  v106 = xmmword_1C6464ED0;
  v108 = v110;
  v109 = 0x1000000000;
  memset(&v117[10], 0, 24);
  v117[13] = v118;
  v117[14] = 0x800000000;
  v118[16] = 0;
  v118[17] = v119;
  v118[18] = 0x800000000;
  sub_1C48815D8((uint64_t)&__p, v29);
  sub_1C48815D8(v5 + 400, (uint64_t)&__p);
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)&__p);
  llvm::AGX::AGXCompiler::init(v30);
  llvm::initializeFunctionGroupInfoWrapperPassPass(*(_QWORD *)(v5 + 888));
  llvm::initializeMachineModuleInfoWrapperPassPass(*(llvm **)(v5 + 888), v31);
  sub_1C6153F50(*(_QWORD *)(v5 + 888));
  v32 = (_QWORD *)operator new();
  v33 = (llvm::MachineModuleInfoWrapperPass *)((char *)llvm::MachineModuleInfoWrapperPass::MachineModuleInfoWrapperPass((llvm::MachineModuleInfoWrapperPass *)v32, *(const llvm::LLVMTargetMachine **)(v5 + 896))+ 32);
  v34 = (_QWORD *)operator new();
  v34[1] = 0;
  v34[2] = 0;
  *v34 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  v35 = operator new();
  sub_1C6194DA8(v35, (uint64_t)v34, 0);
  v36 = v32[274];
  v32[274] = v35;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  sub_1C4E403B0(&__p, 0);
  v37 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 896) + 152))(*(_QWORD *)(v5 + 896), v5 + 16);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(*(_QWORD *)(v5 + 24) + 416), (const void **)v37);
  FunctionGroupInfoWrapperPass = (const void **)llvm::createFunctionGroupInfoWrapperPass(0);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(*(_QWORD *)(v5 + 24) + 416), FunctionGroupInfoWrapperPass);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(*(_QWORD *)(v5 + 24) + 416), (const void **)v32);
  v39 = (const void **)operator new();
  *(_QWORD *)sub_1C4776848((uint64_t)v39, (uint64_t)&unk_1EF8F65A8) = &off_1E7FB22D8;
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(*(_QWORD *)(v5 + 24) + 416), v39);
  if (v32[261])
    v40 = (llvm::MCContext *)v32[261];
  else
    v40 = (llvm::MCContext *)(v32 + 5);
  llvm::LLVMTargetMachine::addAsmPrinter(*(_QWORD *)(v5 + 896), v5 + 16, (llvm::raw_pwrite_stream *)(v5 + 56), 0, 0, v40);
  *(_BYTE *)(v37 + 128) = 1;
  v41 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(_QWORD *)(v5 + 8) + 1576), 0, 0, 0);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"agx.mc.sim.main";
  LOWORD(v105) = 259;
  v42 = (char *)operator new(0x80uLL);
  *((_DWORD *)v42 + 7) = *((_DWORD *)v42 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v42 = 0;
  llvm::Function::Function((uint64_t *)v42 + 1, v41, 0, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)&__p, v57);
  LOWORD(v105) = 257;
  v43 = (_QWORD **)operator new();
  *v43 = (_QWORD *)(*(_QWORD *)(v5 + 8) + 1600);
  v43[1] = 0;
  v44 = *((_DWORD *)v43 + 5) & 0xC0000000;
  *((_DWORD *)v43 + 4) = 22;
  *((_DWORD *)v43 + 5) = v44;
  v43[3] = 0;
  v43[4] = 0;
  v43[5] = v43 + 5;
  v43[6] = v43 + 5;
  v43[7] = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v42 + 80), v43);
  v45 = (_QWORD *)*((_QWORD *)v42 + 10);
  v43[4] = v42 + 80;
  v43[3] = v45;
  v45[1] = v43 + 3;
  *((_QWORD *)v42 + 10) = v43 + 3;
  llvm::Value::setName((uint64_t ***)v43, (uint64_t)&__p);
  v46 = (_QWORD *)**v43;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
  __p.__r_.__value_.__l.__size_ = 0x200000000;
  v108 = v46;
  v109 = (uint64_t)&v116;
  v110[0] = v117;
  v110[1] = 0;
  v111 = 0;
  v112 = 512;
  v113 = 7;
  v115 = 0;
  v114 = 0;
  v116 = &unk_1E8167888;
  v117[0] = &unk_1E8167A08;
  *((_QWORD *)&v106 + 1) = v43;
  v107 = v43 + 5;
  LLVMBuildRetVoid_0((uint64_t *)&__p);
  MachineFunction = llvm::MachineModuleInfo::getOrCreateMachineFunction(v33, (llvm::Function *)(v42 + 8));
  v48 = MachineFunction;
  *(_QWORD *)(v5 + 904) = MachineFunction;
  **((_QWORD **)MachineFunction + 45) = **((_QWORD **)MachineFunction + 45) & 0xFFFFFFFFFFFFFFF4 | 0xA;
  v49 = *((_QWORD *)MachineFunction + 39);
  if (v49)
    *((_QWORD *)MachineFunction + 39) = *(_QWORD *)v49;
  else
    v49 = sub_1C484358C((uint64_t)MachineFunction + 128, 232, 3);
  *(_QWORD *)v49 = 0;
  *(_QWORD *)(v49 + 8) = 0;
  *(_QWORD *)(v49 + 16) = v43;
  *(_DWORD *)(v49 + 24) = -1;
  *(_QWORD *)(v49 + 48) = (v49 + 48) | 4;
  *(_QWORD *)(v49 + 56) = v49 + 48;
  *(_BYTE *)(v49 + 144) = 0;
  *(_OWORD *)(v49 + 64) = 0u;
  *(_OWORD *)(v49 + 80) = 0u;
  *(_OWORD *)(v49 + 96) = 0u;
  *(_OWORD *)(v49 + 112) = 0u;
  *(_OWORD *)(v49 + 121) = 0u;
  *(_QWORD *)(v49 + 160) = 0;
  *(_QWORD *)(v49 + 168) = 0;
  *(_QWORD *)(v49 + 152) = 0;
  *(_BYTE *)(v49 + 176) = 0;
  *(_DWORD *)(v49 + 187) = 0;
  *(_QWORD *)(v49 + 180) = 0;
  *(_QWORD *)(v49 + 192) = 0;
  *(_DWORD *)(v49 + 199) = 0;
  *(_QWORD *)(v49 + 216) = 0;
  *(_QWORD *)(v49 + 224) = 0;
  *(_QWORD *)(v49 + 208) = 0;
  *(_QWORD *)(v49 + 32) = v48;
  *(_QWORD *)(v49 + 40) = v49;
  *(_QWORD *)(v49 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight((llvm::BasicBlock *)v43);
  *(_QWORD *)(v49 + 144) = v50;
  v51 = *(_QWORD *)(v5 + 904);
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v51 + 320, v49);
  v52 = *(_QWORD *)(v51 + 320);
  *(_QWORD *)v49 = v52;
  *(_QWORD *)(v49 + 8) = v51 + 320;
  *(_QWORD *)(v52 + 8) = v49;
  *(_QWORD *)(v51 + 320) = v49;
  v53 = *(_QWORD *)(v5 + 904);
  *(_QWORD *)(v5 + 920) = v53;
  *(_QWORD *)(v5 + 952) = 0;
  *(_QWORD *)(v5 + 936) = *(_QWORD *)(v53 + 40);
  *(_QWORD *)(v5 + 928) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v53 + 16) + 104))(*(_QWORD *)(v53 + 16));
  v54 = *(unsigned __int8 **)(v5 + 944);
  if (v54)
    llvm::MetadataTracking::untrack(v5 + 944, v54);
  *(_QWORD *)(v5 + 944) = 0;
  *(_QWORD *)(v5 + 968) = 0;
  *(_QWORD *)(v5 + 952) = v49;
  *(_QWORD *)(v5 + 960) = v49 + 48;
  if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
    free(__p.__r_.__value_.__l.__data_);
  sub_1C48433E8((uint64_t)&v86);
  return v5;
}

void LLVMInitializeAGX3MCInstLifter()
{
  qword_1EF8F6970 = (uint64_t)sub_1C5FE6238;
}

uint64_t sub_1C5FE6AEC(uint64_t a1)
{
  void *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  llvm::Value *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)a1 = &off_1E81AAB70;
  v2 = *(void **)(a1 + 992);
  if (v2)
  {
    *(_QWORD *)(a1 + 1000) = v2;
    operator delete(v2);
  }
  *(_QWORD *)(a1 + 912) = &off_1E816EC08;
  v3 = *(unsigned __int8 **)(a1 + 944);
  if (v3)
    llvm::MetadataTracking::untrack(a1 + 944, v3);
  v4 = *(_QWORD *)(a1 + 896);
  *(_QWORD *)(a1 + 896) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  llvm::Module::~Module((llvm::Module *)(a1 + 128));
  *(_QWORD *)(a1 + 56) = off_1E81A6E70;
  v6 = (void *)(a1 + 56);
  if (*(_DWORD *)(a1 + 112) == 1)
  {
    v10 = *(_QWORD *)(a1 + 72);
    if (v10)
    {
      MEMORY[0x1CAA32F9C](v10, 0x1000C8077774924);
      v6 = (void *)(a1 + 56);
    }
  }
  v7 = *(void **)(a1 + 32);
  if (v7 != v6)
    free(v7);
  *(_QWORD *)(a1 + 16) = &off_1E81682B8;
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContextImpl **)(a1 + 8), v5);
  return a1;
}

void sub_1C5FE6BF4(uint64_t a1)
{
  void *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  llvm::Value *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_1E81AAB70;
  v2 = *(void **)(a1 + 992);
  if (v2)
  {
    *(_QWORD *)(a1 + 1000) = v2;
    operator delete(v2);
  }
  *(_QWORD *)(a1 + 912) = &off_1E816EC08;
  v3 = *(unsigned __int8 **)(a1 + 944);
  if (v3)
    llvm::MetadataTracking::untrack(a1 + 944, v3);
  v4 = *(_QWORD *)(a1 + 896);
  *(_QWORD *)(a1 + 896) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  llvm::Module::~Module((llvm::Module *)(a1 + 128));
  *(_QWORD *)(a1 + 56) = off_1E81A6E70;
  v6 = (void *)(a1 + 56);
  if (*(_DWORD *)(a1 + 112) == 1)
  {
    v9 = *(_QWORD *)(a1 + 72);
    if (v9)
    {
      MEMORY[0x1CAA32F9C](v9, 0x1000C8077774924);
      v6 = (void *)(a1 + 56);
    }
  }
  v7 = *(void **)(a1 + 32);
  if (v7 != v6)
    free(v7);
  *(_QWORD *)(a1 + 16) = &off_1E81682B8;
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContextImpl **)(a1 + 8), v5);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5FE6D0C(uint64_t a1, uint64_t a2, void *a3, char *a4)
{
  uint64_t v4;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  const std::nothrow_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *j;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  int v40;
  uint64_t v41;
  BOOL v42;
  char *v43;
  char *v44;
  int v45;
  int v46;
  char *v47;
  int v48;
  unint64_t v49;
  unsigned int v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  char *v65;
  char *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *k;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  unint64_t v82;
  _QWORD *v83;
  char **v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  char **v95;
  char **v96;
  const std::nothrow_t *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  char *v105;
  char *v106;
  void *v107;
  void *v108;
  uint64_t *v109;
  void *__base;
  char *v115;
  char *v116;
  __int16 v117;

  v4 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v4)
  {
    for (i = *(uint64_t **)(a1 + 96); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(a1 + 96);
  }
  v7 = *(_QWORD *)(a1 + 96) + 8 * v4;
  if (i != (uint64_t *)v7)
  {
    v8 = *i;
    v9 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    do
    {
      v10 = *(uint64_t **)(v8 + 24);
      v11 = *(uint64_t **)(v8 + 32);
      if ((char *)v11 - (char *)v10 < 1025)
      {
LABEL_16:
        sub_1C5FE9030(v10, v11, v11 - v10, 0, 0);
      }
      else
      {
        v12 = v11 - v10;
        while (1)
        {
          v13 = (uint64_t *)operator new(8 * v12, v9);
          if (v13)
            break;
          v14 = v12 > 1;
          v12 >>= 1;
          if (!v14)
            goto LABEL_16;
        }
        v15 = v13;
        sub_1C5FE9030(v10, v11, v11 - v10, v13, v12);
        operator delete(v15);
      }
      v17 = *(uint64_t **)(v8 + 24);
      v16 = *(uint64_t **)(v8 + 32);
      if (v17 == v16)
      {
LABEL_23:
        if (v17 != v16)
        {
          v21 = v17 + 2;
          if (v17 + 2 != v16)
          {
            v22 = *v17;
            do
            {
              v23 = v22;
              v22 = *v21;
              if (v23 != *v21)
              {
                v17[1] = v22;
                ++v17;
              }
              ++v21;
            }
            while (v21 != v16);
            v16 = *(uint64_t **)(v8 + 32);
          }
          if (v17 + 1 != v16)
            *(_QWORD *)(v8 + 32) = v17 + 1;
        }
      }
      else
      {
        v18 = v17 + 1;
        while (v18 != v16)
        {
          v19 = *(v18 - 1);
          v20 = *v18++;
          if (v19 == v20)
          {
            v17 = v18 - 2;
            goto LABEL_23;
          }
        }
      }
      do
      {
        v24 = i[1];
        ++i;
        v8 = v24;
        if (v24)
          v25 = v8 == -8;
        else
          v25 = 1;
      }
      while (v25);
    }
    while (i != (uint64_t *)v7);
  }
  __base = 0;
  v115 = 0;
  v116 = 0;
  sub_1C515E708((uint64_t)&__base, *(unsigned int *)(a1 + 108));
  v26 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v26)
  {
    for (j = *(uint64_t **)(a1 + 96); !*j || *j == -8; ++j)
      ;
  }
  else
  {
    j = *(uint64_t **)(a1 + 96);
  }
  v29 = *(_QWORD *)(a1 + 96) + 8 * v26;
  v30 = v115;
  if (j != (uint64_t *)v29)
  {
    v31 = *j;
    do
    {
      if (v30 >= v116)
      {
        v32 = (char *)__base;
        v33 = (v30 - (_BYTE *)__base) >> 2;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62)
LABEL_158:
          abort();
        v35 = v116 - (_BYTE *)__base;
        if ((v116 - (_BYTE *)__base) >> 1 > v34)
          v34 = v35 >> 1;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
          v36 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          if (v36 >> 62)
            goto LABEL_159;
          v37 = (char *)operator new(4 * v36);
        }
        else
        {
          v37 = 0;
        }
        v38 = &v37[4 * v33];
        *(_DWORD *)v38 = *(_DWORD *)(v31 + 16);
        v39 = v38 + 4;
        while (v30 != v32)
        {
          v40 = *((_DWORD *)v30 - 1);
          v30 -= 4;
          *((_DWORD *)v38 - 1) = v40;
          v38 -= 4;
        }
        __base = v38;
        v115 = v39;
        v116 = &v37[4 * v36];
        if (v32)
          operator delete(v32);
        v30 = v39;
      }
      else
      {
        *(_DWORD *)v30 = *(_DWORD *)(v31 + 16);
        v30 += 4;
      }
      v115 = v30;
      do
      {
        v41 = j[1];
        ++j;
        v31 = v41;
        if (v41)
          v42 = v31 == -8;
        else
          v42 = 1;
      }
      while (v42);
    }
    while (j != (uint64_t *)v29);
  }
  v43 = (char *)__base;
  if (v30 - (_BYTE *)__base >= 8)
  {
    qsort(__base, (unint64_t)(v30 - (_BYTE *)__base) >> 2, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1C4AB967C);
    v43 = (char *)__base;
    v30 = v115;
  }
  if (v43 != v30)
  {
    v44 = v43 + 4;
    while (v44 != v30)
    {
      v45 = *((_DWORD *)v44 - 1);
      v46 = *(_DWORD *)v44;
      v44 += 4;
      if (v45 == v46)
      {
        v47 = v44 - 8;
        while (v44 != v30)
        {
          v48 = v45;
          v45 = *(_DWORD *)v44;
          if (v48 != *(_DWORD *)v44)
          {
            *((_DWORD *)v47 + 1) = v45;
            v47 += 4;
          }
          v44 += 4;
        }
        v30 = v47 + 4;
        break;
      }
    }
  }
  v49 = (unint64_t)(v30 - v43) >> 2;
  *(_DWORD *)(a1 + 140) = v49;
  if (v49 <= 1)
    v50 = 1;
  else
    v50 = (unint64_t)(v30 - v43) >> 2;
  if (v49 >= 0x11)
    v50 = v49 >> 1;
  if (v49 <= 0x400)
    LODWORD(v49) = v50;
  else
    LODWORD(v49) = v49 >> 2;
  *(_DWORD *)(a1 + 136) = v49;
  if (v43)
  {
    v115 = v43;
    operator delete(v43);
    LODWORD(v49) = *(_DWORD *)(a1 + 136);
  }
  v49 = v49;
  v51 = *(char **)(a1 + 168);
  v52 = *(char **)(a1 + 176);
  v53 = 0xAAAAAAAAAAAAAAABLL * ((v52 - v51) >> 3);
  v54 = v49 - v53;
  if (v49 <= v53)
  {
    v63 = a1;
    if (v49 < v53)
    {
      v105 = &v51[24 * v49];
      if (v52 != v105)
      {
        v106 = *(char **)(a1 + 176);
        do
        {
          v108 = (void *)*((_QWORD *)v106 - 3);
          v106 -= 24;
          v107 = v108;
          if (v108)
          {
            *((_QWORD *)v52 - 2) = v107;
            operator delete(v107);
          }
          v52 = v106;
        }
        while (v106 != v105);
      }
      v63 = a1;
      *(_QWORD *)(a1 + 176) = v105;
    }
  }
  else
  {
    v55 = *(_QWORD *)(a1 + 184);
    if (0xAAAAAAAAAAAAAAABLL * ((v55 - (uint64_t)v52) >> 3) >= v54)
    {
      bzero(v52, 24 * ((24 * v54 - 24) / 0x18) + 24);
      *(_QWORD *)(a1 + 176) = &v52[24 * ((24 * v54 - 24) / 0x18) + 24];
      v63 = a1;
    }
    else
    {
      v56 = 0xAAAAAAAAAAAAAAABLL * ((v55 - (uint64_t)v51) >> 3);
      v57 = 0x5555555555555556 * ((v55 - (uint64_t)v51) >> 3);
      if (v57 > v49)
        v49 = v57;
      if (v56 >= 0x555555555555555)
        v49 = 0xAAAAAAAAAAAAAAALL;
      if (v49 > 0xAAAAAAAAAAAAAAALL)
LABEL_159:
        sub_1C4764EE4();
      v58 = 3 * v49;
      v59 = (char *)operator new(24 * v49);
      v60 = &v59[8 * ((v52 - v51) >> 3)];
      v61 = &v59[8 * v58];
      bzero(v60, 24 * ((24 * v54 - 24) / 0x18) + 24);
      v62 = (unint64_t)&v59[24 * ((24 * v54 - 24) / 0x18) + 24 + v52 - v51];
      if (v52 == v51)
      {
        v63 = a1;
        *(_QWORD *)(a1 + 168) = v60;
        *(_QWORD *)(a1 + 176) = v62;
        *(_QWORD *)(a1 + 184) = v61;
      }
      else
      {
        v63 = a1;
        do
        {
          v64 = *(_OWORD *)(v52 - 24);
          v52 -= 24;
          *(_OWORD *)(v60 - 24) = v64;
          v60 -= 24;
          *((_QWORD *)v60 + 2) = *((_QWORD *)v52 + 2);
          *(_QWORD *)v52 = 0;
          *((_QWORD *)v52 + 1) = 0;
          *((_QWORD *)v52 + 2) = 0;
        }
        while (v52 != v51);
        v52 = *(char **)(a1 + 168);
        v65 = *(char **)(a1 + 176);
        *(_QWORD *)(a1 + 168) = v60;
        *(_QWORD *)(a1 + 176) = v62;
        *(_QWORD *)(a1 + 184) = v61;
        if (v65 != v52)
        {
          v66 = v65;
          do
          {
            v68 = (void *)*((_QWORD *)v66 - 3);
            v66 -= 24;
            v67 = v68;
            if (v68)
            {
              *((_QWORD *)v65 - 2) = v67;
              operator delete(v67);
            }
            v65 = v66;
          }
          while (v66 != v52);
          v63 = a1;
        }
      }
      if (v52)
        operator delete(v52);
    }
  }
  v69 = *(_QWORD *)(v63 + 96);
  v70 = *(unsigned int *)(v63 + 104);
  if ((_DWORD)v70)
  {
    for (k = *(uint64_t **)(v63 + 96); !*k || *k == -8; ++k)
      ;
  }
  else
  {
    k = *(uint64_t **)(v63 + 96);
  }
  v73 = (uint64_t *)(v69 + 8 * v70);
  if (k != v73)
  {
    v74 = *k;
    v109 = (uint64_t *)(v69 + 8 * v70);
    do
    {
      v75 = v74 + 8;
      v76 = *(_DWORD *)(v74 + 16) % *(_DWORD *)(v63 + 136);
      v77 = *(_QWORD *)(v63 + 168);
      v78 = v77 + 24 * v76;
      v81 = *(char **)(v78 + 8);
      v80 = (_QWORD *)(v78 + 8);
      v79 = v81;
      v82 = v80[1];
      if ((unint64_t)v81 >= v82)
      {
        v84 = (char **)(v77 + 24 * v76);
        v85 = *v84;
        v86 = (v79 - *v84) >> 3;
        v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) >> 61)
          goto LABEL_158;
        v88 = v82 - (_QWORD)v85;
        if (v88 >> 2 > v87)
          v87 = v88 >> 2;
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
          v89 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v89 = v87;
        if (v89)
        {
          if (v89 >> 61)
            goto LABEL_159;
          v90 = (char *)operator new(8 * v89);
        }
        else
        {
          v90 = 0;
        }
        v91 = &v90[8 * v86];
        *(_QWORD *)v91 = v75;
        v83 = v91 + 8;
        if (v79 != v85)
        {
          do
          {
            v92 = *((_QWORD *)v79 - 1);
            v79 -= 8;
            *((_QWORD *)v91 - 1) = v92;
            v91 -= 8;
          }
          while (v79 != v85);
          v79 = *v84;
        }
        *v84 = v91;
        *v80 = v83;
        v80[1] = &v90[8 * v89];
        v73 = v109;
        v63 = a1;
        if (v79)
          operator delete(v79);
      }
      else
      {
        *(_QWORD *)v79 = v75;
        v83 = v79 + 8;
      }
      *v80 = v83;
      v117 = 261;
      __base = a3;
      v115 = a4;
      *(_QWORD *)(v74 + 48) = llvm::MCContext::createTempSymbol(*(_QWORD *)(a2 + 264), (uint64_t)&__base, 1);
      do
      {
        v93 = k[1];
        ++k;
        v74 = v93;
        if (v93)
          v94 = v74 == -8;
        else
          v94 = 1;
      }
      while (v94);
    }
    while (k != v73);
  }
  v95 = *(char ***)(v63 + 168);
  v96 = *(char ***)(v63 + 176);
  if (v95 != v96)
  {
    v97 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    do
    {
      v98 = *v95;
      v99 = v95[1];
      v100 = v99 - *v95;
      v101 = v100 >> 3;
      if (v100 < 1025)
      {
LABEL_154:
        sub_1C5FE9AE0(v98, v99, v101, 0, 0);
      }
      else
      {
        v102 = v100 >> 3;
        while (1)
        {
          v103 = (uint64_t *)operator new(8 * v102, v97);
          if (v103)
            break;
          v14 = v102 > 1;
          v102 >>= 1;
          if (!v14)
            goto LABEL_154;
        }
        v104 = v103;
        sub_1C5FE9AE0(v98, v99, v101, v103, v102);
        operator delete(v104);
      }
      v95 += 3;
    }
    while (v95 != v96);
  }
}

void sub_1C5FE7478(uint64_t a1, uint64_t a2, void *a3, char *a4, uint64_t a5, const void *a6, uint64_t a7)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t **i;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  __int128 v61;
  unint64_t *v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  void *v71;
  uint64_t v72;
  _BYTE v73[16];
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  sub_1C5FE6D0C(a2, a1, a3, a4);
  v12 = 0;
  v64 = a1;
  v65 = a2;
  v66 = 1;
  v67 = 0x148415348;
  v68 = *(_QWORD *)(a2 + 136);
  v69 = 4 * a7 + 8;
  v70 = 0;
  v71 = v73;
  v72 = 0x400000000;
  if ((unint64_t)(4 * a7) >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, (uint64_t)v73, (4 * a7) >> 2, 4);
    v12 = v72;
  }
  if (a7)
  {
    memcpy((char *)v71 + 4 * v12, a6, 4 * a7);
    v12 = v72;
  }
  LODWORD(v72) = v12 + ((unint64_t)(4 * a7) >> 2);
  v74 = a5;
  v13 = v64;
  v14 = *(_QWORD *)(v64 + 272);
  *(_QWORD *)&v61 = "Header Magic";
  v63 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v14 + 112))(v14, &v61, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v13 + 272) + 512))(*(_QWORD *)(v13 + 272), (int)v67, 4);
  v15 = *(_QWORD *)(v13 + 272);
  *(_QWORD *)&v61 = "Header Version";
  v63 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v15 + 112))(v15, &v61, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v13 + 272) + 512))(*(_QWORD *)(v13 + 272), WORD2(v67), 2);
  v16 = *(_QWORD *)(v13 + 272);
  *(_QWORD *)&v61 = "Header Hash Function";
  v63 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v16 + 112))(v16, &v61, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v13 + 272) + 512))(*(_QWORD *)(v13 + 272), HIWORD(v67), 2);
  v17 = *(_QWORD *)(v13 + 272);
  *(_QWORD *)&v61 = "Header Bucket Count";
  v63 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 112))(v17, &v61, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v13 + 272) + 512))(*(_QWORD *)(v13 + 272), (int)v68, 4);
  v18 = *(_QWORD *)(v13 + 272);
  *(_QWORD *)&v61 = "Header Hash Count";
  v63 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v18 + 112))(v18, &v61, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v13 + 272) + 512))(*(_QWORD *)(v13 + 272), SHIDWORD(v68), 4);
  v19 = *(_QWORD *)(v13 + 272);
  *(_QWORD *)&v61 = "Header Data Length";
  v63 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v19 + 112))(v19, &v61, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v13 + 272) + 512))(*(_QWORD *)(v13 + 272), v69, 4);
  v20 = v64;
  v21 = *(_QWORD *)(v64 + 272);
  *(_QWORD *)&v61 = "HeaderData Die Offset Base";
  v63 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v21 + 112))(v21, &v61, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v20 + 272) + 512))(*(_QWORD *)(v20 + 272), v70, 4);
  v22 = *(_QWORD *)(v20 + 272);
  *(_QWORD *)&v61 = "HeaderData Atom Count";
  v63 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v22 + 112))(v22, &v61, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v20 + 272) + 512))(*(_QWORD *)(v20 + 272), (int)v72, 4);
  if ((_DWORD)v72)
  {
    v23 = (unsigned __int16 *)v71;
    v24 = (unsigned __int16 *)((char *)v71 + 4 * v72);
    do
    {
      v25 = (__int16)*v23;
      if (v25 > 7)
      {
        v26 = 0;
        v27 = 0;
      }
      else
      {
        v26 = off_1E81AABF0[v25];
        v27 = qword_1C86772B0[v25];
      }
      v28 = *(_QWORD *)(v20 + 272);
      v63 = 261;
      *(_QWORD *)&v61 = v26;
      *((_QWORD *)&v61 + 1) = v27;
      (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v28 + 112))(v28, &v61, 1);
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v20 + 272) + 512))(*(_QWORD *)(v20 + 272), *v23, 2);
      v29 = *(_QWORD *)(v20 + 272);
      v30 = llvm::dwarf::FormEncodingString((llvm::dwarf *)v23[1]);
      v63 = 261;
      *(_QWORD *)&v61 = v30;
      *((_QWORD *)&v61 + 1) = v31;
      (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v29 + 112))(v29, &v61, 1);
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v20 + 272) + 512))(*(_QWORD *)(v20 + 272), v23[1], 2);
      v23 += 2;
    }
    while (v23 != v24);
  }
  v33 = *(_QWORD *)(v65 + 168);
  v32 = *(_QWORD *)(v65 + 176);
  v60 = 0;
  v34 = v32 - v33;
  if (v34)
  {
    v35 = 0;
    v36 = 0xAAAAAAAAAAAAAAABLL * (v34 >> 3);
    do
    {
      v37 = *(_QWORD *)(v64 + 272);
      *(_QWORD *)&v61 = "Bucket ";
      v62 = &v60;
      v63 = 2563;
      (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v37 + 112))(v37, &v61, 1);
      if (*(_QWORD *)(v33 + 24 * v60) == *(_QWORD *)(v33 + 24 * v60 + 8))
        v38 = -1;
      else
        v38 = v35;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v64 + 272) + 512))(*(_QWORD *)(v64 + 272), v38, 4);
      v39 = (uint64_t **)(v33 + 24 * v60);
      v40 = *v39;
      v41 = v39[1];
      if (v40 != v41)
      {
        v42 = -1;
        do
        {
          v43 = *v40++;
          v44 = *(unsigned int *)(v43 + 8);
          if (v42 != v44)
            ++v35;
          v42 = v44;
        }
        while (v40 != v41);
      }
      ++v60;
    }
    while (v60 < v36);
  }
  sub_1C5FE8DDC((uint64_t)&v64);
  sub_1C5FE8EF4((uint64_t)&v64, v74);
  v45 = *(uint64_t ***)(v65 + 168);
  for (i = *(uint64_t ***)(v65 + 176); v45 != i; v45 += 3)
  {
    v47 = *v45;
    v48 = v45[1];
    if (*v45 != v48)
    {
      v49 = -1;
      do
      {
        v50 = (_QWORD *)*v47;
        if (v49 != -1 && v49 != *((_DWORD *)v50 + 2))
        {
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v64 + 272) + 512))(*(_QWORD *)(v64 + 272), 0, 4);
          v50 = (_QWORD *)*v47;
        }
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v64 + 272) + 192))(*(_QWORD *)(v64 + 272), v50[5], 0);
        v51 = (uint64_t *)(*(_QWORD *)*v47 & 0xFFFFFFFFFFFFFFF8);
        v52 = *v51;
        v53 = *(_QWORD *)(v64 + 272);
        v63 = 261;
        *(_QWORD *)&v61 = v51 + 4;
        *((_QWORD *)&v61 + 1) = v52;
        (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v53 + 112))(v53, &v61, 1);
        v54 = *(_QWORD *)*v47 & 0xFFFFFFFFFFFFFFF8;
        v61 = *(_OWORD *)(v54 + 8);
        v62 = *(unint64_t **)(v54 + 24);
        sub_1C5FFAAF0(v64, (uint64_t)&v61);
        v55 = *(_QWORD *)(v64 + 272);
        *(_QWORD *)&v61 = "Num DIEs";
        v63 = 259;
        (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v55 + 112))(v55, &v61, 1);
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v64 + 272) + 512))(*(_QWORD *)(v64 + 272), (int)((uint64_t)(*(_QWORD *)(*v47 + 24) - *(_QWORD *)(*v47 + 16)) >> 3), 4);
        v56 = *v47;
        v57 = *(uint64_t **)(*v47 + 16);
        v58 = *(uint64_t **)(*v47 + 24);
        if (v57 != v58)
        {
          do
          {
            v59 = *v57++;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 24))(v59, v64);
          }
          while (v57 != v58);
          v56 = *v47;
        }
        v49 = *(unsigned int *)(v56 + 8);
        ++v47;
      }
      while (v47 != v48);
      if (*v45 != v45[1])
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v64 + 272) + 512))(*(_QWORD *)(v64 + 272), 0, 4);
    }
  }
  if (v71 != v73)
    free(v71);
}

void sub_1C5FE7B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  const char *v42;
  int v43;
  const char *v44;
  int v45;
  BOOL v46;
  int v47;
  char *v48;
  _DWORD *v49;
  uint64_t v50;
  char *v51;
  unsigned int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  const char *v57;
  unsigned int v58;
  unsigned int *v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  int v68;
  BOOL v69;
  unsigned int v70;
  unsigned int *v71;
  void *v72;
  unsigned int v73;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  int v81;
  BOOL v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  BOOL v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  const char *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t ***v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t **v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int *v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int *v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  unsigned int *v137;
  unsigned int v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  char *v166;
  char *v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t ***v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t ***v174;
  _QWORD *v175;
  _QWORD v176[2];
  void *v177[2];
  uint64_t v178;
  uint64_t v179;
  _QWORD v180[4];
  __int16 v181;
  const char *v182;
  uint64_t v183;
  const char *v184;
  __int16 v185;
  int v186[2];
  uint64_t v187;
  char v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int *v197;
  uint64_t v198;
  unsigned int v199;
  char *v200;
  unint64_t v201;
  uint64_t (*v202)(uint64_t, uint64_t);
  _QWORD *v203;
  uint64_t v204;
  unint64_t TempSymbol;
  unint64_t v206;
  unint64_t v207;
  __int128 v208;
  _QWORD *v209;
  uint64_t v210;
  __int16 v211;
  uint64_t v212;

  v212 = *MEMORY[0x1E0C80C00];
  v177[0] = &v178;
  v177[1] = (void *)0x100000000;
  sub_1C4893E04((char *)v177, a5, 0);
  if (!a5)
  {
    v51 = 0;
    goto LABEL_209;
  }
  v170 = a2;
  v173 = a1;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = &a4[a5];
  do
  {
    v16 = *a4;
    if (*(_DWORD *)(*(_QWORD *)(*a4 + 72) + 52))
    {
      v17 = v10;
    }
    else
    {
      v17 = (v10 + 1);
      *((_DWORD *)v177[0] + v11) = v10;
      v18 = (uint64_t *)(v16 + 328);
      if (*(_BYTE *)(a3 + 3549))
        v19 = v18;
      else
        v19 = a4;
      v20 = *(_QWORD *)(*v19 + 336);
      if (v14 >= v12)
      {
        v21 = (v14 - v13) >> 3;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          abort();
        if ((v12 - v13) >> 2 > v22)
          v22 = (v12 - v13) >> 2;
        if ((unint64_t)(v12 - v13) >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
        {
          if (v23 >> 61)
            sub_1C4764EE4();
          v24 = v13;
          v25 = (char *)operator new(8 * v23);
          v13 = v24;
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[8 * v21];
        *(_QWORD *)v26 = v20;
        v27 = v26 + 8;
        while (v14 != v13)
        {
          v28 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *((_QWORD *)v26 - 1) = v28;
          v26 -= 8;
        }
        v12 = &v25[8 * v23];
        if (v13)
          operator delete(v13);
        v14 = v27;
        v13 = v26;
      }
      else
      {
        *(_QWORD *)v14 = v20;
        v14 += 8;
      }
    }
    ++a4;
    ++v11;
    v10 = v17;
  }
  while (a4 != v15);
  if (v13 == v14)
  {
    v51 = v14;
    goto LABEL_209;
  }
  v29 = *(_QWORD *)(v173 + 272);
  v30 = v13;
  v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v173 + 248) + 24))(*(_QWORD *)(v173 + 248));
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 168))(v29, *(_QWORD *)(v31 + 184), 0);
  sub_1C5FE6D0C(v170, v173, "names", (char *)5);
  v176[0] = v177;
  v176[1] = a3;
  *(_QWORD *)v186 = v173;
  v187 = v170;
  v188 = 0;
  v32 = *(_DWORD *)(v170 + 136);
  v33 = *(_DWORD *)(v170 + 108);
  v189 = 5;
  v190 = (v14 - v30) >> 3;
  v191 = 0;
  v192 = 0;
  v193 = v32;
  v194 = v33;
  v195 = 0x800000000;
  v196 = 0x303037304D564C4CLL;
  v197 = 0;
  v198 = 0;
  v199 = 0;
  v167 = v30;
  v200 = v30;
  v201 = (v14 - v30) >> 3;
  v202 = sub_1C5FEA434;
  v203 = v176;
  v204 = 0;
  *(_QWORD *)&v208 = "names_abbrev_start";
  v211 = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(*(_QWORD *)(v173 + 264), (uint64_t)&v208, 1);
  *(_QWORD *)&v208 = "names_abbrev_end";
  v211 = 259;
  v206 = llvm::MCContext::createTempSymbol(*(_QWORD *)(*(_QWORD *)v186 + 264), (uint64_t)&v208, 1);
  *(_QWORD *)&v208 = "names_entries";
  v211 = 259;
  v207 = llvm::MCContext::createTempSymbol(*(_QWORD *)(*(_QWORD *)v186 + 264), (uint64_t)&v208, 1);
  v182 = 0;
  v183 = 0;
  LODWORD(v184) = 0;
  v34 = *(uint64_t **)(v187 + 168);
  v35 = *(uint64_t **)(v187 + 176);
  if (v35 == v34)
    goto LABEL_52;
  do
  {
    v36 = *v34;
    v37 = v34[1];
    while (v36 != v37)
    {
      v39 = *(_QWORD *)(*(_QWORD *)v36 + 16);
      v38 = *(_QWORD *)(*(_QWORD *)v36 + 24);
      while (v39 != v38)
      {
        v40 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v39 + 8) + 28);
        LODWORD(v208) = v40;
        if ((_DWORD)v184)
        {
          v41 = ((_DWORD)v184 - 1) & (37 * v40);
          v42 = &v182[4 * v41];
          v43 = *(_DWORD *)v42;
          if (*(_DWORD *)v42 == v40)
            goto LABEL_49;
          v44 = 0;
          v45 = 1;
          while (v43 != -1)
          {
            if (v44)
              v46 = 0;
            else
              v46 = v43 == -2;
            if (v46)
              v44 = v42;
            v47 = v41 + v45++;
            v41 = v47 & ((_DWORD)v184 - 1);
            v42 = &v182[4 * v41];
            v43 = *(_DWORD *)v42;
            if (*(_DWORD *)v42 == v40)
              goto LABEL_49;
          }
          if (v44)
            v48 = (char *)v44;
          else
            v48 = (char *)v42;
        }
        else
        {
          v48 = 0;
        }
        v49 = sub_1C4A0C948((uint64_t)&v182, (uint64_t)&v208, &v208, v48);
        *v49 = v208;
LABEL_49:
        v39 += 8;
      }
      v36 += 8;
    }
    v34 += 3;
  }
  while (v34 != v35);
LABEL_52:
  *(_QWORD *)&v208 = &v209;
  HIDWORD(v208) = 2;
  if (v201 < 2)
  {
    v52 = 0;
  }
  else
  {
    if (v201 >= 0x101)
    {
      if (v201 > 0x10000)
      {
        v50 = 0x700000001;
        if (v201 < 0x100000001)
          v50 = 0x600000001;
      }
      else
      {
        v50 = 0x500000001;
      }
    }
    else
    {
      v50 = 0xB00000001;
    }
    v209 = (_QWORD *)v50;
    v52 = 1;
  }
  v53 = v183;
  (&v209)[v52] = (_QWORD *)0x1300000003;
  DWORD2(v208) = v52 + 1;
  if (!v53)
  {
    v57 = v182;
    v58 = v184;
LABEL_73:
    v61 = &v57[4 * v58];
    v59 = (unsigned int *)v61;
    goto LABEL_76;
  }
  v54 = (4 * v53 / 3u + 1) | ((unint64_t)(4 * v53 / 3u + 1) >> 1);
  v55 = v54 | (v54 >> 2) | ((v54 | (v54 >> 2)) >> 4);
  v56 = ((v55 | (v55 >> 8)) >> 16) | v55 | (v55 >> 8);
  if (v199 <= v56)
  {
    sub_1C5FEA4C8((uint64_t *)&v197, v56 + 1);
    v57 = v182;
    v58 = v184;
    if ((_DWORD)v183)
      goto LABEL_68;
    goto LABEL_73;
  }
  v57 = v182;
  v58 = v184;
LABEL_68:
  v59 = (unsigned int *)&v57[4 * v58];
  if (v58)
  {
    v60 = 0;
    while (*(_DWORD *)&v57[v60] >= 0xFFFFFFFE)
    {
      v60 += 4;
      if (4 * v58 == v60)
      {
        v61 = &v57[4 * v58];
        goto LABEL_76;
      }
    }
    v61 = &v57[v60];
  }
  else
  {
    v61 = v57;
  }
LABEL_76:
  v62 = &v57[4 * v58];
  if (v61 != v62)
  {
    while (2)
    {
      v63 = *(_DWORD *)v61;
      if (!v199)
      {
        v71 = 0;
        goto LABEL_89;
      }
      v64 = (v199 - 1) & (37 * v63);
      v65 = &v197[10 * v64];
      v66 = *v65;
      if (v63 != *v65)
      {
        v67 = 0;
        v68 = 1;
        while (v66 != -1)
        {
          if (v67)
            v69 = 0;
          else
            v69 = v66 == -2;
          if (v69)
            v67 = v65;
          v70 = v64 + v68++;
          v64 = v70 & (v199 - 1);
          v65 = &v197[10 * v64];
          v66 = *v65;
          if (v63 == *v65)
            goto LABEL_103;
        }
        if (v67)
          v71 = v67;
        else
          v71 = v65;
LABEL_89:
        if (4 * (int)v198 + 4 < 3 * v199)
        {
          if (v199 + ~(_DWORD)v198 - HIDWORD(v198) > v199 >> 3)
            goto LABEL_91;
          sub_1C5FEA4C8((uint64_t *)&v197, v199);
          if (v199)
          {
            v84 = (v199 - 1) & (37 * v63);
            v71 = &v197[10 * v84];
            v85 = *v71;
            if (v63 != *v71)
            {
              v80 = 0;
              v86 = 1;
              while (v85 != -1)
              {
                if (v80)
                  v87 = 0;
                else
                  v87 = v85 == -2;
                if (v87)
                  v80 = v71;
                v88 = v84 + v86++;
                v84 = v88 & (v199 - 1);
                v71 = &v197[10 * v84];
                v85 = *v71;
                if (v63 == *v71)
                  goto LABEL_91;
              }
              goto LABEL_137;
            }
            goto LABEL_91;
          }
LABEL_135:
          v71 = 0;
          goto LABEL_91;
        }
        sub_1C5FEA4C8((uint64_t *)&v197, 2 * v199);
        if (!v199)
          goto LABEL_135;
        v78 = (v199 - 1) & (37 * v63);
        v71 = &v197[10 * v78];
        v79 = *v71;
        if (v63 != *v71)
        {
          v80 = 0;
          v81 = 1;
          while (v79 != -1)
          {
            if (v80)
              v82 = 0;
            else
              v82 = v79 == -2;
            if (v82)
              v80 = v71;
            v83 = v78 + v81++;
            v78 = v83 & (v199 - 1);
            v71 = &v197[10 * v78];
            v79 = *v71;
            if (v63 == *v71)
              goto LABEL_91;
          }
LABEL_137:
          if (v80)
            v71 = v80;
        }
LABEL_91:
        LODWORD(v198) = v198 + 1;
        if (*v71 != -1)
          --HIDWORD(v198);
        *v71 = v63;
        v72 = v71 + 6;
        *((_QWORD *)v71 + 1) = v71 + 6;
        *((_QWORD *)v71 + 2) = 0x200000000;
        v73 = DWORD2(v208);
        if (v71 + 2 != (unsigned int *)&v208 && DWORD2(v208) != 0)
        {
          if (DWORD2(v208) < 3uLL)
          {
            v75 = DWORD2(v208);
LABEL_101:
            memcpy(v72, (const void *)v208, 8 * v75);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v71 + 2), (uint64_t)(v71 + 6), DWORD2(v208), 8);
            v75 = DWORD2(v208);
            if (DWORD2(v208))
            {
              v72 = (void *)*((_QWORD *)v71 + 1);
              goto LABEL_101;
            }
          }
          v71[4] = v73;
        }
      }
LABEL_103:
      v76 = (unsigned int *)(v61 + 4);
      while (v76 != v59)
      {
        v77 = *v76++;
        if (v77 <= 0xFFFFFFFD)
        {
          v61 = (const char *)(v76 - 1);
          goto LABEL_108;
        }
      }
      v61 = (const char *)v59;
LABEL_108:
      if (v61 == v62)
        break;
      continue;
    }
  }
  if ((_QWORD **)v208 != &v209)
    free((void *)v208);
  MEMORY[0x1CAA32FB4](v182, 4);
  v89 = *(_QWORD *)v186;
  *(_QWORD *)&v208 = "names";
  v211 = 259;
  v182 = "Header: unit length";
  v185 = 259;
  v204 = (*(uint64_t (**)(_QWORD, __int128 *, const char **))(**(_QWORD **)(*(_QWORD *)v186 + 272) + 1248))(*(_QWORD *)(*(_QWORD *)v186 + 272), &v208, &v182);
  v90 = *(_QWORD *)(v89 + 272);
  *(_QWORD *)&v208 = "Header: version";
  v211 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v90 + 112))(v90, &v208, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v89 + 272) + 512))(*(_QWORD *)(v89 + 272), (unsigned __int16)v189, 2);
  v91 = *(_QWORD *)(v89 + 272);
  *(_QWORD *)&v208 = "Header: padding";
  v211 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v91 + 112))(v91, &v208, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v89 + 272) + 512))(*(_QWORD *)(v89 + 272), HIWORD(v189), 2);
  v92 = *(_QWORD *)(v89 + 272);
  *(_QWORD *)&v208 = "Header: compilation unit count";
  v211 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v92 + 112))(v92, &v208, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v89 + 272) + 512))(*(_QWORD *)(v89 + 272), v190, 4);
  v93 = *(_QWORD *)(v89 + 272);
  *(_QWORD *)&v208 = "Header: local type unit count";
  v211 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v93 + 112))(v93, &v208, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v89 + 272) + 512))(*(_QWORD *)(v89 + 272), v191, 4);
  v94 = *(_QWORD *)(v89 + 272);
  *(_QWORD *)&v208 = "Header: foreign type unit count";
  v211 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v94 + 112))(v94, &v208, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v89 + 272) + 512))(*(_QWORD *)(v89 + 272), v192, 4);
  v95 = *(_QWORD *)(v89 + 272);
  *(_QWORD *)&v208 = "Header: bucket count";
  v211 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v95 + 112))(v95, &v208, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v89 + 272) + 512))(*(_QWORD *)(v89 + 272), v193, 4);
  v96 = *(_QWORD *)(v89 + 272);
  *(_QWORD *)&v208 = "Header: name count";
  v211 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v96 + 112))(v96, &v208, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v89 + 272) + 512))(*(_QWORD *)(v89 + 272), v194, 4);
  v97 = *(_QWORD *)(v89 + 272);
  *(_QWORD *)&v208 = "Header: abbreviation table size";
  v211 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v97 + 112))(v97, &v208, 1);
  (*(void (**)(_QWORD, unint64_t, unint64_t, uint64_t))(**(_QWORD **)(v89 + 272) + 832))(*(_QWORD *)(v89 + 272), v206, TempSymbol, 4);
  v98 = *(_QWORD *)(v89 + 272);
  *(_QWORD *)&v208 = "Header: augmentation string size";
  v211 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v98 + 112))(v98, &v208, 1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v89 + 272) + 512))(*(_QWORD *)(v89 + 272), SHIDWORD(v195), 4);
  v99 = *(_QWORD *)(v89 + 272);
  *(_QWORD *)&v208 = "Header: augmentation string";
  v211 = 259;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v99 + 112))(v99, &v208, 1);
  (*(void (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(v89 + 272) + 488))(*(_QWORD *)(v89 + 272), &v196, HIDWORD(v195));
  if (v201)
  {
    v100 = 0;
    v101 = v200;
    v102 = 8 * v201;
    do
    {
      v103 = *(_QWORD *)(*(_QWORD *)v186 + 272);
      v182 = v100;
      *(_QWORD *)&v208 = "Compilation unit ";
      v209 = &v182;
      v211 = 2563;
      (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v103 + 112))(v103, &v208, 1);
      sub_1C5FFA9F8(*(uint64_t *)v186, *(llvm::MCExpr ***)&v101[8 * (_QWORD)v100++], 0);
      v102 -= 8;
    }
    while (v102);
  }
  v104 = *(uint64_t **)(v187 + 168);
  v105 = *(uint64_t **)(v187 + 176);
  if (v105 != v104)
  {
    v106 = 0;
    v107 = 1;
    do
    {
      v108 = *(_QWORD *)(*(_QWORD *)v186 + 272);
      v182 = v106;
      *(_QWORD *)&v208 = "Bucket ";
      v209 = &v182;
      v211 = 2563;
      (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v108 + 112))(v108, &v208, 1);
      if (*v104 == v104[1])
        v109 = 0;
      else
        v109 = v107;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)v186 + 272) + 512))(*(_QWORD *)(*(_QWORD *)v186 + 272), v109, 4);
      v111 = *v104;
      v110 = v104[1];
      v104 += 3;
      v107 += (unint64_t)(v110 - v111) >> 3;
      ++v106;
    }
    while (v104 != v105);
  }
  sub_1C5FE8DDC((uint64_t)v186);
  v112 = *(uint64_t ****)(v187 + 168);
  v171 = *(uint64_t ****)(v187 + 176);
  if (v171 != v112)
  {
    v113 = 0;
    do
    {
      v114 = *v112;
      v115 = v112[1];
      v174 = v112;
      if (*v112 != v115)
      {
        do
        {
          v116 = *v114++;
          v117 = *v116;
          v118 = *(_QWORD *)(*(_QWORD *)v186 + 272);
          v179 = v113;
          v180[0] = "String in Bucket ";
          v180[2] = &v179;
          v181 = 2563;
          v182 = (const char *)v180;
          v184 = ": ";
          v185 = 770;
          v119 = v117 & 0xFFFFFFFFFFFFFFF8;
          v120 = *(_QWORD *)(v117 & 0xFFFFFFFFFFFFFFF8);
          *(_QWORD *)&v208 = &v182;
          v209 = (_QWORD *)(v119 + 32);
          v210 = v120;
          v211 = 1282;
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v118 + 112))(v118, &v208, 1);
          v208 = *(_OWORD *)(v119 + 8);
          v209 = *(_QWORD **)(v119 + 24);
          sub_1C5FFAAF0(*(uint64_t *)v186, (uint64_t)&v208);
        }
        while (v114 != v115);
      }
      v112 = v174 + 3;
      ++v113;
    }
    while (v174 + 3 != v171);
  }
  sub_1C5FE8EF4((uint64_t)v186, v207);
  (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)v186 + 272) + 192))(*(_QWORD *)(*(_QWORD *)v186 + 272), TempSymbol, 0);
  v121 = &v197[10 * v199];
  if ((_DWORD)v198)
  {
    if (v199)
    {
      v122 = 40 * v199;
      v123 = v197;
      while (*v123 >= 0xFFFFFFFE)
      {
        v123 += 10;
        v122 -= 40;
        if (!v122)
          goto LABEL_161;
      }
    }
    else
    {
      v123 = v197;
    }
  }
  else
  {
LABEL_161:
    v123 = &v197[10 * v199];
  }
  v124 = &v197[10 * v199];
  while (v123 != v124)
  {
    v125 = *(_QWORD *)(*(_QWORD *)v186 + 272);
    *(_QWORD *)&v208 = "Abbrev code";
    v211 = 259;
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v125 + 112))(v125, &v208, 1);
    llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(*(_QWORD *)v186 + 272), *v123, 0);
    v126 = *(_QWORD *)(*(_QWORD *)v186 + 272);
    v127 = llvm::dwarf::TagString((llvm::dwarf *)*v123);
    v211 = 261;
    *(_QWORD *)&v208 = v127;
    *((_QWORD *)&v208 + 1) = v128;
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v126 + 112))(v126, &v208, 1);
    llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(*(_QWORD *)v186 + 272), *v123, 0);
    v129 = v123[4];
    if ((_DWORD)v129)
    {
      v130 = (unsigned int *)*((_QWORD *)v123 + 1);
      v131 = &v130[2 * v129];
      do
      {
        v132 = *v130;
        if ((v132 - 1) > 4)
          v133 = 0;
        else
          v133 = off_1E81AAC30[(int)v132 - 1];
        sub_1C5FFA814(*(uint64_t *)v186, v132, v133, 0);
        v134 = *(_QWORD *)v186;
        v135 = *((unsigned __int16 *)v130 + 2);
        v136 = (char *)llvm::dwarf::FormEncodingString((llvm::dwarf *)v135);
        sub_1C5FFA814(v134, v135, v136, 0);
        v130 += 2;
      }
      while (v130 != v131);
    }
    sub_1C5FFA814(*(uint64_t *)v186, 0, "End of abbrev", 0);
    sub_1C5FFA814(*(uint64_t *)v186, 0, "End of abbrev", 0);
    v137 = v123 + 10;
    while (v137 != v121)
    {
      v138 = *v137;
      v137 += 10;
      if (v138 <= 0xFFFFFFFD)
      {
        v123 = v137 - 10;
        goto LABEL_175;
      }
    }
    v123 = v121;
LABEL_175:
    ;
  }
  sub_1C5FFA814(*(uint64_t *)v186, 0, "End of abbrev list", 0);
  (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)v186 + 272) + 192))(*(_QWORD *)(*(_QWORD *)v186 + 272), v206, 0);
  (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)v186 + 272) + 192))(*(_QWORD *)(*(_QWORD *)v186 + 272), v207, 0);
  v139 = *(_QWORD **)(v187 + 168);
  v168 = *(_QWORD **)(v187 + 176);
  if (v168 != v139)
  {
    do
    {
      v141 = *v139;
      v140 = v139[1];
      v169 = v139;
      v172 = v140;
      while (v141 != v140)
      {
        v142 = *(_QWORD **)v141;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)v186 + 272) + 192))(*(_QWORD *)(*(_QWORD *)v186 + 272), *(_QWORD *)(*(_QWORD *)v141 + 40), 0);
        v143 = (uint64_t *)v142[2];
        v144 = (uint64_t *)v142[3];
        v175 = v142;
        while (v143 != v144)
        {
          v145 = *v143;
          if (v199)
          {
            v146 = *(unsigned __int16 *)(*(_QWORD *)(v145 + 8) + 28);
            v147 = (v199 - 1) & (37 * v146);
            v148 = &v197[10 * v147];
            v149 = *v148;
            if (*v148 != v146)
            {
              v150 = 1;
              while (v149 != -1)
              {
                v151 = v147 + v150++;
                v147 = v151 & (v199 - 1);
                v148 = &v197[10 * v147];
                v149 = *v148;
                if (*v148 == v146)
                  goto LABEL_188;
              }
              v148 = &v197[10 * v199];
            }
          }
          else
          {
            v148 = v197;
          }
LABEL_188:
          sub_1C5FFA814(*(uint64_t *)v186, *v148, "Abbreviation code", 0);
          v152 = v148[4];
          if ((_DWORD)v152)
          {
            v153 = *((_QWORD *)v148 + 1);
            v154 = 8 * v152;
            do
            {
              v155 = *(_DWORD *)v153 - 1;
              if (v155 > 4)
              {
                v156 = 0;
                v157 = 0;
              }
              else
              {
                v156 = off_1E81AAC30[v155];
                v157 = qword_1C86772F0[v155];
              }
              v158 = *(_QWORD *)(*(_QWORD *)v186 + 272);
              v211 = 261;
              *(_QWORD *)&v208 = v156;
              *((_QWORD *)&v208 + 1) = v157;
              (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v158 + 112))(v158, &v208, 1);
              if (*(_DWORD *)v153 == 1)
              {
                *(_QWORD *)&v208 = v202((uint64_t)v203, v145);
                sub_1C6001878((uint64_t *)&v208, *(uint64_t *)v186, *(unsigned __int16 *)(v153 + 4));
              }
              else
              {
                (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v186 + 272) + 512))(*(_QWORD *)(*(_QWORD *)v186 + 272), *(int *)(*(_QWORD *)(v145 + 8) + 16), 4);
              }
              v153 += 8;
              v154 -= 8;
            }
            while (v154);
          }
          ++v143;
        }
        v159 = *(_QWORD *)(*(_QWORD *)v186 + 272);
        v160 = (uint64_t *)(*v175 & 0xFFFFFFFFFFFFFFF8);
        v161 = *v160;
        v211 = 1283;
        *(_QWORD *)&v208 = "End of list: ";
        v209 = v160 + 4;
        v210 = v161;
        (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v159 + 112))(v159, &v208, 1);
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v186 + 272) + 512))(*(_QWORD *)(*(_QWORD *)v186 + 272), 0, 1);
        v141 += 8;
        v140 = v172;
      }
      v139 = v169 + 3;
    }
    while (v169 + 3 != v168);
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)v186 + 272) + 632))(*(_QWORD *)(*(_QWORD *)v186 + 272), 4, 0, 1, 0);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)v186 + 272) + 192))(*(_QWORD *)(*(_QWORD *)v186 + 272), v204, 0);
  v162 = (uint64_t)v197;
  if (v199)
  {
    v163 = 40 * v199;
    v164 = v197 + 6;
    do
    {
      if (*((_DWORD *)v164 - 6) <= 0xFFFFFFFD)
      {
        v165 = (_QWORD *)*(v164 - 2);
        if (v164 != v165)
          free(v165);
      }
      v164 += 5;
      v163 -= 40;
    }
    while (v163);
    v162 = (uint64_t)v197;
  }
  MEMORY[0x1CAA32FB4](v162, 8);
  v51 = v167;
LABEL_209:
  if (v177[0] != &v178)
  {
    v166 = v51;
    free(v177[0]);
    v51 = v166;
  }
  if (v51)
    operator delete(v51);
}

uint64_t sub_1C5FE8D20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (int)sub_1C600086C(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 272) + 512))(*(_QWORD *)(a2 + 272), v3, 4);
}

uint64_t sub_1C5FE8D5C(uint64_t a1, uint64_t a2)
{
  int v4;

  v4 = sub_1C600086C(*(_QWORD *)(a1 + 8));
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a2 + 272) + 512))(*(_QWORD *)(a2 + 272), v4, 4);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a2 + 272) + 512))(*(_QWORD *)(a2 + 272), *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 28), 2);
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a2 + 272) + 512))(*(_QWORD *)(a2 + 272), 0, 1);
}

uint64_t sub_1C5FE8DD0(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 16);
}

uint64_t sub_1C5FE8DDC(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  _BYTE *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD v13[4];
  __int16 v14;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(uint64_t **)(v2 + 168);
  v12 = *(uint64_t **)(v2 + 176);
  if (v12 != v3)
  {
    v4 = (_BYTE *)result;
    v5 = 0;
    v6 = -1;
    do
    {
      v7 = *v3;
      v8 = v3[1];
      if (*v3 == v8)
      {
        v9 = v6;
      }
      else
      {
        do
        {
          v9 = *(unsigned int *)(*(_QWORD *)v7 + 8);
          if (v4[16])
            v10 = v6 == v9;
          else
            v10 = 0;
          if (v10)
          {
            v9 = v6;
          }
          else
          {
            v11 = *(_QWORD *)(*(_QWORD *)v4 + 272);
            v1 = v1 & 0xFFFFFFFF00000000 | v5;
            v13[0] = "Hash in Bucket ";
            v13[2] = v1;
            v14 = 2051;
            (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v11 + 112))(v11, v13, 1);
            result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v4 + 272) + 512))(*(_QWORD *)(*(_QWORD *)v4 + 272), (int)v9, 4);
            v6 = v9;
          }
          v7 += 8;
        }
        while (v7 != v8);
      }
      ++v5;
      v3 += 3;
      v6 = v9;
    }
    while (v3 != v12);
  }
  return result;
}

uint64_t sub_1C5FE8EF4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  __int16 v22;
  unint64_t v23;

  v2 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(v2 + 168);
  v3 = *(_QWORD *)(v2 + 176);
  v23 = 0;
  v20 = v4;
  v5 = v3 - v4;
  if (v5)
  {
    v7 = (_BYTE *)result;
    v8 = 0;
    v19 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    v9 = -1;
    do
    {
      v10 = (uint64_t **)(v20 + 24 * v8);
      v12 = *v10;
      v11 = v10[1];
      if (*v10 != v11)
      {
        do
        {
          v13 = *v12;
          v14 = *(unsigned int *)(*v12 + 8);
          if (v7[16])
            v15 = v9 == v14;
          else
            v15 = 0;
          if (!v15)
          {
            v16 = *(_QWORD *)(*(_QWORD *)v7 + 272);
            v21[0] = "Offset in Bucket ";
            v21[2] = &v23;
            v22 = 2563;
            (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v16 + 112))(v16, v21, 1);
            v17 = *(_QWORD **)(*(_QWORD *)v7 + 272);
            if (*(_BYTE *)(v17[1] + 1626))
              v18 = 8;
            else
              v18 = 4;
            result = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*v17 + 832))(v17, *(_QWORD *)(v13 + 40), a2, v18);
            v9 = v14;
          }
          ++v12;
        }
        while (v12 != v11);
        v8 = v23;
      }
      v23 = ++v8;
    }
    while (v8 < v19);
  }
  return result;
}

uint64_t *sub_1C5FE9030(uint64_t *result, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;

  if (a3 >= 2)
  {
    v6 = (char *)result;
    if (a3 == 2)
    {
      v7 = *result;
      v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(a2 - 1) + 16))(*(a2 - 1));
      result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      if (v8 < (unint64_t)result)
      {
        v9 = *(_QWORD *)v6;
        *(_QWORD *)v6 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v22 = (char *)a4;
      v23 = a3 >> 1;
      v24 = &result[a3 >> 1];
      v25 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C5FE92E4(result, v24, v25, a4);
        v26 = (uint64_t *)&v22[8 * v23];
        result = sub_1C5FE92E4((uint64_t *)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v26);
        v27 = &v22[8 * a3];
        v28 = v26;
        while (v28 != (uint64_t *)v27)
        {
          v29 = v28;
          v30 = *(_QWORD *)v22;
          v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v28 + 16))(*v28);
          result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
          if (v31 < (unint64_t)result)
            v32 = (char *)v29;
          else
            v32 = v22;
          v22 += 8 * (v31 >= (unint64_t)result);
          v28 = &v29[v31 < (unint64_t)result];
          *(_QWORD *)v6 = *(_QWORD *)v32;
          v6 += 8;
          if (v22 == (char *)v26)
          {
            if (v28 != (uint64_t *)v27)
            {
              v33 = 0;
              if (v31 < (unint64_t)result)
                v34 = 1;
              else
                v34 = 2;
              v35 = &v29[v34 & 1];
              do
              {
                *(_QWORD *)&v6[v33 * 8] = v35[v33];
                ++v33;
              }
              while (&v35[v33] != (uint64_t *)v27);
            }
            return result;
          }
        }
        if (v22 != (char *)v26)
        {
          v36 = 0;
          do
          {
            *(_QWORD *)&v6[v36] = *(_QWORD *)&v22[v36];
            v36 += 8;
          }
          while (&v22[v36] != (char *)v26);
        }
      }
      else
      {
        sub_1C5FE9030(result, v24, v25, a4, a5);
        sub_1C5FE9030(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v22, a5);
        return (uint64_t *)sub_1C5FE9550(v6, &v6[8 * (a3 >> 1)], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v22, a5);
      }
    }
    else if (result != a2)
    {
      v11 = result + 1;
      if (result + 1 != a2)
      {
        v12 = 0;
        v13 = result;
        do
        {
          v14 = *v13;
          v13 = v11;
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v11 + 16))(*v11);
          result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
          if (v15 < (unint64_t)result)
          {
            v16 = *v13;
            v17 = v12;
            while (1)
            {
              *(_QWORD *)&v6[v17 + 8] = *(_QWORD *)&v6[v17];
              if (!v17)
                break;
              v18 = *(_QWORD *)&v6[v17 - 8];
              v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
              result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
              v17 -= 8;
              if (v19 >= (unint64_t)result)
              {
                v20 = &v6[v17 + 8];
                goto LABEL_15;
              }
            }
            v20 = v6;
LABEL_15:
            *(_QWORD *)v20 = v16;
          }
          v11 = v13 + 1;
          v12 += 8;
        }
        while (v13 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_1C5FE92E4(uint64_t *result, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_9:
      *v4 = *v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = a2 - 1;
      v9 = *result;
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(a2 - 1) + 16))(*(a2 - 1));
      result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      if (v10 >= (unint64_t)result)
        v11 = v6;
      else
        v11 = v8;
      *v4++ = *v11;
      if (v10 >= (unint64_t)result)
        v6 = v8;
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      v23 = &result[a3 >> 1];
      sub_1C5FE9030(result, v23, a3 >> 1, a4, a3 >> 1);
      result = (uint64_t *)sub_1C5FE9030(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v24 = &v6[a3 >> 1];
      while (v24 != a2)
      {
        v25 = v24;
        v26 = *v6;
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v24 + 16))(*v24);
        result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        if (v27 >= (unint64_t)result)
          v28 = v6;
        else
          v28 = v25;
        v24 = &v25[v27 < (unint64_t)result];
        v6 += v27 >= (unint64_t)result;
        *v4++ = *v28;
        if (v6 == v23)
        {
          if (v24 != a2)
          {
            v29 = 0;
            v30 = &v25[v27 < (unint64_t)result];
            do
            {
              v4[v29] = v30[v29];
              ++v29;
            }
            while (&v30[v29] != a2);
          }
          return result;
        }
      }
      if (v6 != v23)
      {
        v31 = 0;
        do
        {
          v4[v31] = v6[v31];
          ++v31;
        }
        while (&v6[v31] != v23);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      *a4 = *result;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = a4;
        do
        {
          v15 = v14;
          v16 = *v14++;
          v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v12 + 16))(*v12);
          result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
          v18 = v14;
          if (v17 < (unint64_t)result)
          {
            v15[1] = *v15;
            v18 = v4;
            if (v15 != v4)
            {
              v19 = v13;
              while (1)
              {
                v18 = (uint64_t *)((char *)v4 + v19);
                v20 = *(uint64_t *)((char *)v4 + v19 - 8);
                v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v12 + 16))(*v12);
                result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
                if (v21 >= (unint64_t)result)
                  break;
                *v18 = *(v18 - 1);
                v19 -= 8;
                if (!v19)
                {
                  v18 = v4;
                  break;
                }
              }
            }
          }
          v22 = *v12++;
          *v18 = v22;
          v13 += 8;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

char *sub_1C5FE9550(char *result, char *a2, char *a3, int64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v9;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  BOOL v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  BOOL v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *__src;

  if (a5)
  {
    v9 = a5;
    v13 = result;
    while (a4 > a7 && v9 > a7)
    {
      if (!a4)
        return result;
      v14 = 0;
      v15 = -a4;
      while (1)
      {
        v16 = *(_QWORD *)&v13[v14];
        v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2);
        result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        if (v17 < (unint64_t)result)
          break;
        v14 += 8;
        if (__CFADD__(v15++, 1))
          return result;
      }
      v19 = -v15;
      v77 = a7;
      v78 = a3;
      v79 = v9;
      __src = a2;
      v76 = &v13[v14];
      if (-v15 >= v9)
      {
        if (v15 == -1)
        {
          v72 = *(_QWORD *)&v13[v14];
          *(_QWORD *)&v13[v14] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v72;
          return result;
        }
        if (v15 > 0)
          v19 = 1 - v15;
        v23 = v19 >> 1;
        v28 = a2;
        a2 = &v13[8 * (v19 >> 1) + v14];
        v37 = a3 == v28;
        v22 = a3;
        v21 = (a3 - v28) >> 3;
        if (!v37)
        {
          v75 = a6;
          v22 = v28;
          do
          {
            v29 = &v22[8 * (v21 >> 1)];
            v31 = *(_QWORD *)v29;
            v30 = v29 + 8;
            v32 = *(_QWORD *)a2;
            v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
            v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
            if (v33 >= v34)
              v21 >>= 1;
            else
              v21 += ~(v21 >> 1);
            if (v33 < v34)
              v22 = v30;
          }
          while (v21);
          v21 = (v22 - __src) >> 3;
          a6 = v75;
        }
      }
      else
      {
        if (v9 >= 0)
          v20 = v9;
        else
          v20 = v9 + 1;
        v21 = v20 >> 1;
        v22 = &a2[8 * (v20 >> 1)];
        v23 = (a2 - v13 - v14) >> 3;
        if (&v13[v14] != a2)
        {
          v74 = a6;
          a2 = &v13[v14];
          do
          {
            v24 = &a2[8 * (v23 >> 1)];
            v26 = *(_QWORD *)v24;
            v25 = v24 + 8;
            v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v22 + 16))(*(_QWORD *)v22);
            if (v27 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26))
            {
              v23 >>= 1;
            }
            else
            {
              a2 = v25;
              v23 += ~(v23 >> 1);
            }
          }
          while (v23);
          a6 = v74;
          v23 = (a2 - v13 - v14) >> 3;
        }
      }
      v35 = v22;
      if (a2 != __src)
      {
        v35 = a2;
        if (__src != v22)
        {
          if (a2 + 8 == __src)
          {
            v38 = v13;
            v39 = *(_QWORD *)a2;
            memmove(a2, __src, v22 - __src);
            v35 = &a2[v22 - __src];
            *(_QWORD *)v35 = v39;
            v13 = v38;
          }
          else if (__src + 8 == v22)
          {
            v40 = *((_QWORD *)v22 - 1);
            v35 = a2 + 8;
            if (v22 - 8 != a2)
            {
              memmove(a2 + 8, a2, v22 - 8 - a2);
              v35 = a2 + 8;
            }
            *(_QWORD *)a2 = v40;
          }
          else
          {
            v36 = (__src - a2) >> 3;
            if (v36 == (v22 - __src) >> 3)
            {
              v37 = __src == v22 || a2 == __src;
              if (v37)
              {
                v35 = __src;
              }
              else
              {
                v54 = a2 + 8;
                v55 = __src + 8;
                do
                {
                  v56 = *((_QWORD *)v54 - 1);
                  *((_QWORD *)v54 - 1) = *((_QWORD *)v55 - 1);
                  *((_QWORD *)v55 - 1) = v56;
                  if (v54 == __src)
                    break;
                  v54 += 8;
                  v37 = v55 == v22;
                  v55 += 8;
                }
                while (!v37);
                v35 = __src;
              }
            }
            else
            {
              v41 = (v22 - __src) >> 3;
              v42 = (__src - a2) >> 3;
              do
              {
                v43 = v42;
                v42 = v41;
                v41 = v43 % v41;
              }
              while (v41);
              if (v42)
              {
                v44 = &a2[8 * v42];
                do
                {
                  v46 = *((_QWORD *)v44 - 1);
                  v44 -= 8;
                  v45 = v46;
                  v47 = &v44[8 * v36];
                  v48 = v44;
                  do
                  {
                    v49 = v47;
                    *(_QWORD *)v48 = *(_QWORD *)v47;
                    v50 = &v47[8 * v36];
                    v51 = __OFSUB__(v36, (v22 - v47) >> 3);
                    v53 = v36 - ((v22 - v47) >> 3);
                    v52 = (v53 < 0) ^ v51;
                    v47 = &a2[8 * v53];
                    if (v52)
                      v47 = v50;
                    v48 = v49;
                  }
                  while (v47 != v44);
                  *(_QWORD *)v49 = v45;
                }
                while (v44 != a2);
              }
              v35 = &a2[8 * ((v22 - __src) >> 3)];
            }
          }
        }
      }
      a4 = -(uint64_t)(v23 + v15);
      v57 = v79 - v21;
      if ((uint64_t)(v23 + v21) >= (uint64_t)(v79 - (v23 + v21) - v15))
      {
        v60 = v35;
        result = (char *)sub_1C5FE9550(v35, v22, v78, -(uint64_t)(v23 + v15), v79 - v21, a6, v77);
        v22 = a2;
        v57 = v21;
        a4 = v23;
        a7 = v77;
        a3 = v60;
        v13 = v76;
      }
      else
      {
        v58 = &v13[v14];
        v59 = v23;
        a7 = v77;
        v13 = v35;
        result = (char *)sub_1C5FE9550(v58, a2, v35, v59, v21, a6, v77);
        a3 = v78;
      }
      a2 = v22;
      v9 = v57;
      if (!v57)
        return result;
    }
    if (a4 <= v9)
    {
      if (v13 != a2)
      {
        v67 = 0;
        do
        {
          *(_QWORD *)&a6[v67] = *(_QWORD *)&v13[v67];
          v67 += 8;
        }
        while (&v13[v67] != a2);
        if (v67)
        {
          v68 = a6;
          while (a2 != a3)
          {
            v69 = *(_QWORD *)v68;
            v70 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2);
            result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 16))(v69);
            if (v70 >= (unint64_t)result)
              v71 = v68;
            else
              v71 = a2;
            a2 += 8 * (v70 < (unint64_t)result);
            v68 += 8 * (v70 >= (unint64_t)result);
            *(_QWORD *)v13 = *(_QWORD *)v71;
            v13 += 8;
            if (&a6[v67] == v68)
              return result;
          }
          return (char *)memmove(v13, v68, a6 - v68 + v67);
        }
      }
    }
    else if (a2 != a3)
    {
      v61 = 0;
      do
      {
        *(_QWORD *)&a6[v61] = *(_QWORD *)&a2[v61];
        v61 += 8;
      }
      while (&a2[v61] != a3);
      if (v61)
      {
        v62 = &a6[v61];
        v63 = a3 - 8;
        while (a2 != v13)
        {
          v64 = *((_QWORD *)a2 - 1);
          v65 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v62 - 1) + 16))(*((_QWORD *)v62 - 1));
          result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 16))(v64);
          if (v65 >= (unint64_t)result)
            v66 = v62;
          else
            v66 = a2;
          if (v65 >= (unint64_t)result)
            v62 -= 8;
          else
            a2 -= 8;
          *(_QWORD *)v63 = *((_QWORD *)v66 - 1);
          v63 -= 8;
          if (v62 == a6)
            return result;
        }
        if (v62 != a6)
        {
          v73 = 0;
          do
          {
            *(_QWORD *)&v63[v73] = *(_QWORD *)&v62[v73 - 8];
            v73 -= 8;
          }
          while (&v62[v73] != a6);
        }
      }
    }
  }
  return result;
}

char *sub_1C5FE9AE0(char *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_QWORD *)result;
      if (*(_DWORD *)(v7 + 8) < *(_DWORD *)(*(_QWORD *)result + 8))
      {
        *(_QWORD *)result = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v19 = (char *)a4;
      v20 = a3 >> 1;
      v21 = &result[8 * (a3 >> 1)];
      v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C5FE9D18((uint64_t)result, v21, v22, a4);
        v23 = (uint64_t *)&v19[8 * v20];
        result = (char *)sub_1C5FE9D18((uint64_t)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23);
        v24 = &v19[8 * a3];
        v25 = v23;
        while (v25 != (uint64_t *)v24)
        {
          v26 = v25;
          v27 = *v25;
          v28 = *(_QWORD *)v19;
          v29 = *(_DWORD *)(v27 + 8);
          v30 = *(_DWORD *)(*(_QWORD *)v19 + 8);
          if (v29 < v30)
            v28 = v27;
          v19 += 8 * (v29 >= v30);
          v25 = &v26[v29 < v30];
          *(_QWORD *)v6 = v28;
          v6 += 8;
          if (v19 == (char *)v23)
          {
            if (v25 != (uint64_t *)v24)
            {
              v31 = 0;
              if (v29 < v30)
                v32 = 1;
              else
                v32 = 2;
              v33 = &v26[v32 & 1];
              do
              {
                *(_QWORD *)&v6[v31 * 8] = v33[v31];
                ++v31;
              }
              while (&v33[v31] != (uint64_t *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          v34 = 0;
          do
          {
            *(_QWORD *)&v6[v34] = *(_QWORD *)&v19[v34];
            v34 += 8;
          }
          while (&v19[v34] != (char *)v23);
        }
      }
      else
      {
        sub_1C5FE9AE0(result, v21, v22, a4, a5);
        sub_1C5FE9AE0(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v19, a5);
        return sub_1C5FE9F10(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v19, a5);
      }
    }
    else if (result != a2)
    {
      v10 = result + 8;
      if (result + 8 != a2)
      {
        v11 = 0;
        v12 = result;
        do
        {
          v13 = *(_QWORD *)v12;
          v12 = v10;
          v14 = *(_QWORD *)v10;
          v15 = *(_DWORD *)(v14 + 8);
          if (v15 < *(_DWORD *)(v13 + 8))
          {
            v16 = v11;
            while (1)
            {
              *(_QWORD *)&result[v16 + 8] = v13;
              if (!v16)
                break;
              v13 = *(_QWORD *)&result[v16 - 8];
              v16 -= 8;
              if (v15 >= *(_DWORD *)(v13 + 8))
              {
                v17 = &result[v16 + 8];
                goto LABEL_15;
              }
            }
            v17 = result;
LABEL_15:
            *(_QWORD *)v17 = v14;
          }
          v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C5FE9D18(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(a2 - 1);
      v9 = *(_DWORD *)(v8 + 8);
      v10 = *(_DWORD *)(*(_QWORD *)result + 8);
      if (v9 >= v10)
        v8 = *(_QWORD *)result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v9 >= v10)
        v6 = (uint64_t)(a2 - 1);
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = result + 8 * (a3 >> 1);
      sub_1C5FE9AE0(result, v20, a3 >> 1, a4, a3 >> 1);
      result = sub_1C5FE9AE0(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v21 = (_QWORD *)(v6 + 8 * (a3 >> 1));
      while (v21 != a2)
      {
        v22 = v21;
        v23 = *v21;
        v24 = *(_QWORD *)v6;
        v25 = *(_DWORD *)(v23 + 8);
        v26 = *(_DWORD *)(*(_QWORD *)v6 + 8);
        if (v25 < v26)
          v24 = v23;
        v21 = &v22[v25 < v26];
        v6 += 8 * (v25 >= v26);
        *v4++ = v24;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            v27 = 0;
            v28 = &v22[v25 < v26];
            do
            {
              v4[v27] = v28[v27];
              ++v27;
            }
            while (&v28[v27] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        v29 = 0;
        do
        {
          v4[v29] = *(_QWORD *)(v6 + v29 * 8);
          ++v29;
        }
        while (v6 + v29 * 8 != v20);
      }
    }
    else if ((_QWORD *)result != a2)
    {
      v11 = result + 8;
      *a4 = *(_QWORD *)result;
      if ((_QWORD *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (*(_DWORD *)(*(_QWORD *)v11 + 8) >= *(_DWORD *)(v16 + 8))
          {
            *v14 = *(_QWORD *)v11;
          }
          else
          {
            v13[1] = v15;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (uint64_t *)((char *)a4 + v18);
                v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (*(_DWORD *)(*(_QWORD *)v11 + 8) >= *(_DWORD *)(v19 + 8))
                  break;
                *v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *(_QWORD *)v11;
          }
          v11 += 8;
          v12 += 8;
          v13 = v14;
        }
        while ((_QWORD *)v11 != a2);
      }
    }
  }
  return result;
}

char *sub_1C5FE9F10(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  BOOL v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  BOOL v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;

  if (a5)
  {
    v7 = a5;
    v10 = result;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return result;
      v11 = 0;
      v12 = -a4;
      while (1)
      {
        v13 = *(_QWORD *)&v10[v11];
        if (*(_DWORD *)(*(_QWORD *)a2 + 8) < *(_DWORD *)(v13 + 8))
          break;
        v11 += 8;
        if (__CFADD__(v12++, 1))
          return result;
      }
      v15 = &v10[v11];
      if (-v12 >= v7)
      {
        if (v12 == -1)
        {
          *(_QWORD *)&v10[v11] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v13;
          return result;
        }
        if (v12 <= 0)
          v25 = -v12;
        else
          v25 = 1 - v12;
        v26 = v25 >> 1;
        v20 = &v10[8 * (v25 >> 1) + v11];
        v18 = a3;
        if (a3 != a2)
        {
          v27 = (a3 - a2) >> 3;
          v18 = a2;
          do
          {
            v28 = v27 >> 1;
            v29 = &v18[8 * (v27 >> 1)];
            v31 = *(_QWORD *)v29;
            v30 = v29 + 8;
            v27 += ~(v27 >> 1);
            if (*(_DWORD *)(v31 + 8) < *(_DWORD *)(*(_QWORD *)v20 + 8))
              v18 = v30;
            else
              v27 = v28;
          }
          while (v27);
        }
        v17 = (v18 - a2) >> 3;
      }
      else
      {
        if (v7 >= 0)
          v16 = v7;
        else
          v16 = v7 + 1;
        v17 = v16 >> 1;
        v18 = &a2[8 * (v16 >> 1)];
        if (v15 == a2)
        {
          v20 = a2;
        }
        else
        {
          v19 = (a2 - v10 - v11) >> 3;
          v20 = &v10[v11];
          do
          {
            v21 = v19 >> 1;
            v22 = &v20[8 * (v19 >> 1)];
            v24 = *(_QWORD *)v22;
            v23 = v22 + 8;
            v19 += ~(v19 >> 1);
            if (*(_DWORD *)(*(_QWORD *)v18 + 8) < *(_DWORD *)(v24 + 8))
              v19 = v21;
            else
              v20 = v23;
          }
          while (v19);
        }
        v26 = (v20 - v10 - v11) >> 3;
      }
      v32 = v18;
      if (v20 != a2)
      {
        v32 = v20;
        if (a2 != v18)
        {
          if (v20 + 8 == a2)
          {
            v79 = *(_QWORD *)v20;
            v81 = v17;
            v38 = v18 - a2;
            v83 = a6;
            v85 = a7;
            v39 = a3;
            v40 = v26;
            memmove(v20, a2, v18 - a2);
            v26 = v40;
            v17 = v81;
            a6 = v83;
            v15 = &v10[v11];
            a7 = v85;
            a3 = v39;
            v32 = &v20[v38];
            *(_QWORD *)v32 = v79;
          }
          else if (a2 + 8 == v18)
          {
            v41 = *((_QWORD *)v18 - 1);
            v32 = v20 + 8;
            if (v18 - 8 != v20)
            {
              v84 = a6;
              v86 = a7;
              v42 = a3;
              v80 = *((_QWORD *)v18 - 1);
              v82 = v17;
              v43 = v26;
              memmove(v20 + 8, v20, v18 - 8 - v20);
              v41 = v80;
              v17 = v82;
              v26 = v43;
              v15 = &v10[v11];
              a6 = v84;
              a7 = v86;
              a3 = v42;
            }
            *(_QWORD *)v20 = v41;
          }
          else
          {
            v33 = (a2 - v20) >> 3;
            if (v33 == (v18 - a2) >> 3)
            {
              v34 = a2 == v18 || v20 == a2;
              if (!v34)
              {
                v35 = v20 + 8;
                v36 = a2 + 8;
                do
                {
                  v37 = *((_QWORD *)v35 - 1);
                  *((_QWORD *)v35 - 1) = *((_QWORD *)v36 - 1);
                  *((_QWORD *)v36 - 1) = v37;
                  if (v35 == a2)
                    break;
                  v35 += 8;
                  v34 = v36 == v18;
                  v36 += 8;
                }
                while (!v34);
              }
              v32 = a2;
            }
            else
            {
              v44 = (v18 - a2) >> 3;
              v45 = (a2 - v20) >> 3;
              do
              {
                v46 = v45;
                v45 = v44;
                v44 = v46 % v44;
              }
              while (v44);
              if (v45)
              {
                v47 = &v20[8 * v45];
                do
                {
                  v49 = *((_QWORD *)v47 - 1);
                  v47 -= 8;
                  v48 = v49;
                  v50 = &v47[8 * v33];
                  v51 = v47;
                  do
                  {
                    v52 = v50;
                    *(_QWORD *)v51 = *(_QWORD *)v50;
                    v53 = &v50[8 * v33];
                    v54 = __OFSUB__(v33, (v18 - v50) >> 3);
                    v56 = v33 - ((v18 - v50) >> 3);
                    v55 = (v56 < 0) ^ v54;
                    v50 = &v20[8 * v56];
                    if (v55)
                      v50 = v53;
                    v51 = v52;
                  }
                  while (v50 != v47);
                  *(_QWORD *)v52 = v48;
                }
                while (v47 != v20);
              }
              v32 = &v20[8 * ((v18 - a2) >> 3)];
            }
          }
        }
      }
      a4 = -(v26 + v12);
      v57 = v7 - v17;
      if (v26 + v17 >= v7 - (v26 + v17) - v12)
      {
        v63 = v26;
        v64 = -(v26 + v12);
        v65 = v17;
        v66 = v7 - v17;
        v67 = a6;
        v68 = a7;
        v69 = v15;
        result = (char *)sub_1C5FE9F10(v32, v18, a3, v64, v66);
        v62 = v69;
        a7 = v68;
        a6 = v67;
        v18 = v20;
        v57 = v65;
        a4 = v63;
        a3 = v32;
      }
      else
      {
        v58 = &v10[v11];
        v59 = a6;
        v60 = a7;
        v61 = a3;
        result = (char *)sub_1C5FE9F10(v58, v20, v32, v26, v17);
        a7 = v60;
        a3 = v61;
        a6 = v59;
        v62 = v32;
      }
      v7 = v57;
      v10 = v62;
      a2 = v18;
      if (!v57)
        return result;
    }
    if (a4 <= v7)
    {
      if (v10 != a2)
      {
        v74 = 0;
        do
        {
          *(_QWORD *)&a6[v74] = *(_QWORD *)&v10[v74];
          v74 += 8;
        }
        while (&v10[v74] != a2);
        if (v74)
        {
          v75 = a6;
          while (a2 != a3)
          {
            v76 = *(_QWORD *)a2;
            v77 = *(_DWORD *)(*(_QWORD *)a2 + 8) >= *(_DWORD *)(*(_QWORD *)v75 + 8);
            if (*(_DWORD *)(*(_QWORD *)a2 + 8) >= *(_DWORD *)(*(_QWORD *)v75 + 8))
              v76 = *(_QWORD *)v75;
            a2 += 8 * (*(_DWORD *)(*(_QWORD *)a2 + 8) < *(_DWORD *)(*(_QWORD *)v75 + 8));
            v75 += 8 * v77;
            *(_QWORD *)v10 = v76;
            v10 += 8;
            if (&a6[v74] == v75)
              return result;
          }
          return (char *)memmove(v10, v75, a6 - v75 + v74);
        }
      }
    }
    else if (a2 != a3)
    {
      v70 = 0;
      do
      {
        *(_QWORD *)&a6[v70] = *(_QWORD *)&a2[v70];
        v70 += 8;
      }
      while (&a2[v70] != a3);
      if (v70)
      {
        v71 = &a6[v70];
        v72 = a3 - 8;
        while (a2 != v10)
        {
          v73 = *((_QWORD *)v71 - 1);
          if (*(_DWORD *)(v73 + 8) >= *(_DWORD *)(*((_QWORD *)a2 - 1) + 8))
          {
            v71 -= 8;
          }
          else
          {
            v73 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          *(_QWORD *)v72 = v73;
          v72 -= 8;
          if (v71 == a6)
            return result;
        }
        if (v71 != a6)
        {
          v78 = 0;
          do
          {
            *(_QWORD *)&v72[v78] = *(_QWORD *)&v71[v78 - 8];
            v78 -= 8;
          }
          while (&v71[v78] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5FEA434(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v9;
  unint64_t v10;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    while (1)
    {
      v3 = *(unsigned __int16 *)(v2 + 28);
      if (v3 == 17 || v3 == 65 || v3 == 74)
        break;
      v4 = 0;
      v5 = *(_QWORD *)(v2 + 40);
      if ((v5 & 4) == 0)
      {
        v2 = v5 & 0xFFFFFFFFFFFFFFF8;
        if (v2)
          continue;
      }
      goto LABEL_9;
    }
    v4 = v2;
  }
  else
  {
    v4 = 0;
  }
LABEL_9:
  v6 = *(_QWORD **)a1;
  v7 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 584);
  v9 = 0;
  v10 = v4;
  sub_1C6144EA0(v7, &v10, &v9);
  return *(unsigned int *)(*v6 + 4 * *(unsigned int *)(*(_QWORD *)(v9 + 8) + 312));
}

_DWORD *sub_1C5FEA4C8(uint64_t *a1, int a2)
{
  unsigned int v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  void *v24;
  unint64_t v25;
  int *v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -1;
        result += 10;
        v11 -= 40;
      }
      while (v11);
    }
    if (!v3)
LABEL_47:
      JUMPOUT(0x1CAA32FB4);
    v12 = &v4[10 * v3];
    v13 = v4;
    while (1)
    {
      v14 = *v13;
      if (*v13 <= 0xFFFFFFFD)
      {
        v15 = *((_DWORD *)a1 + 4);
        if (v15)
        {
          v16 = v15 - 1;
          v17 = v16 & (37 * v14);
          v18 = *a1 + 40 * v17;
          v19 = *(_DWORD *)v18;
          if (v14 != *(_DWORD *)v18)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -2;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v16;
              v18 = *a1 + 40 * v17;
              v19 = *(_DWORD *)v18;
              if (v14 == *(_DWORD *)v18)
                goto LABEL_23;
            }
            if (v20)
              v18 = v20;
          }
        }
        else
        {
          v18 = 0;
        }
LABEL_23:
        v24 = (void *)(v18 + 24);
        *(_QWORD *)(v18 + 8) = v18 + 24;
        *(_DWORD *)v18 = v14;
        *(_QWORD *)(v18 + 16) = 0x200000000;
        v25 = v13[4];
        v26 = (int *)*((_QWORD *)v13 + 1);
        if ((int *)v18 == v13 || v25 == 0)
          goto LABEL_35;
        if (v26 == v13 + 6)
        {
          if (v25 < 3)
          {
            v29 = v13[4];
LABEL_33:
            memcpy(v24, v26, 8 * v29);
            v26 = (int *)*((_QWORD *)v13 + 1);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v18 + 8, v18 + 24, v13[4], 8);
            v29 = v13[4];
            v26 = (int *)*((_QWORD *)v13 + 1);
            if ((_DWORD)v29)
            {
              v24 = *(void **)(v18 + 8);
              goto LABEL_33;
            }
          }
          *(_DWORD *)(v18 + 16) = v25;
          v13[4] = 0;
LABEL_35:
          ++*((_DWORD *)a1 + 2);
          if (v26 != v13 + 6)
            free(v26);
          goto LABEL_37;
        }
        *(_QWORD *)(v18 + 8) = v26;
        v28 = v13[5];
        *(_DWORD *)(v18 + 16) = v25;
        *(_DWORD *)(v18 + 20) = v28;
        *((_QWORD *)v13 + 1) = v13 + 6;
        *((_QWORD *)v13 + 2) = 0;
        ++*((_DWORD *)a1 + 2);
      }
LABEL_37:
      v13 += 10;
      if (v13 == v12)
        goto LABEL_47;
    }
  }
  a1[1] = 0;
  v30 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v30)
  {
    v31 = 40 * v30;
    do
    {
      *result = -1;
      result += 10;
      v31 -= 40;
    }
    while (v31);
  }
  return result;
}

void sub_1C5FEA740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unsigned int v26;
  int v27;
  _QWORD v28[65];

  v28[64] = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 8))
    return;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a2 + 272) + 168))(*(_QWORD *)(a2 + 272), a3, 0);
  v5 = *(_QWORD **)(a2 + 272);
  if (*(unsigned __int16 *)(v5[1] + 1624) >= 5u)
  {
    v6 = sub_1C63BB9D4(a2);
    v5 = *(_QWORD **)(a2 + 272);
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(_QWORD *, _QWORD, _QWORD))(*v5 + 192))(v5, *(_QWORD *)(a1 + 32), 0);
  v7 = *(unsigned int *)(a1 + 8);
  v25 = v28;
  v27 = 64;
  if (v7 < 0x41)
  {
    v9 = v7;
    v8 = v28;
    if (!(_DWORD)v7)
    {
      v26 = 0;
      v10 = *(_QWORD *)a1;
      v11 = *(unsigned int *)(a1 + 16);
      v12 = *(_QWORD *)a1 + 16 * v11;
      goto LABEL_15;
    }
  }
  else
  {
    v26 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v28, v7, 8);
    v8 = v25;
    v9 = *(_DWORD *)(a1 + 8);
  }
  bzero(v8, 8 * v7);
  v26 = v7;
  v10 = *(_QWORD *)a1;
  v11 = *(unsigned int *)(a1 + 16);
  v12 = *(_QWORD *)a1 + 16 * v11;
  if (v9)
  {
    if ((_DWORD)v11)
    {
      v13 = 0;
      while ((*(_QWORD *)(v10 + v13) | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v13 += 16;
        if (16 * v11 == v13)
          goto LABEL_15;
      }
      v14 = v10 + v13;
    }
    else
    {
      v14 = v10;
    }
    goto LABEL_16;
  }
LABEL_15:
  v14 = v12;
LABEL_16:
  v15 = v10 + 16 * v11;
  if (v14 != v15)
  {
    do
    {
      if (*(_BYTE *)(v14 + 12))
      {
        v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 248) + 24))(*(_QWORD *)(a2 + 248));
        v17 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 152))(v16, *(_QWORD *)v14);
      }
      else
      {
        v18 = *(_QWORD *)v14;
        v19 = *(_QWORD *)(a2 + 264);
        v17 = sub_1C484358C(v19 + 192, 24, 3);
        v20 = *(unsigned __int8 *)(*(_QWORD *)(v19 + 152) + 18) << 16;
        *(_BYTE *)v17 = 2;
        *(_DWORD *)(v17 + 1) = v20 | (*(unsigned __int8 *)(v17 + 4) << 24);
        *(_QWORD *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 16) = v18;
      }
      *((_QWORD *)v25 + *(unsigned int *)(v14 + 8)) = v17;
      v21 = v14 + 16;
      v14 = v12;
      if (v21 != v12)
      {
        v14 = v21;
        while ((*(_QWORD *)v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v14 += 16;
          if (v14 == v12)
          {
            v14 = v12;
            break;
          }
        }
      }
    }
    while (v14 != v15);
    v7 = v26;
  }
  if ((_DWORD)v7)
  {
    v22 = (uint64_t *)v25;
    v23 = 8 * v7;
    do
    {
      v24 = *v22++;
      (*(void (**)(_QWORD, uint64_t, unint64_t, _QWORD))(**(_QWORD **)(a2 + 272) + 504))(*(_QWORD *)(a2 + 272), v24, ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 288) + 2064) + 504) + 4) + 7) >> 3, 0);
      v23 -= 8;
    }
    while (v23);
  }
  if (v6)
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a2 + 272) + 192))(*(_QWORD *)(a2 + 272), v6, 0);
  if (v25 != v28)
    free(v25);
}

uint64_t *sub_1C5FEAA0C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t *v6;
  _DWORD *v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t *v27;
  char *v28;
  llvm::MCContext *v29;
  unint64_t NamedTempSymbol;
  uint64_t v31;
  uint64_t v33;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  int32x2_t *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47[4];
  __int16 v48;

  v47[0] = a2;
  v4 = sub_1C63BD880(a1 + 8, v47);
  v6 = v4 + 1;
  v5 = v4[1];
  if (v5 >= 8)
  {
    v7 = (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 4) == 0 || !v7)
    {
      if ((v5 & 4) == 0)
        return v6;
      return *(uint64_t **)v7;
    }
    if (v7[2])
      return *(uint64_t **)v7;
  }
  v9 = *(char **)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *(char **)(a1 + 32);
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v11) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0x666666666666666)
      abort();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)v11) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x333333333333333)
      v15 = 0x666666666666666;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 > 0x666666666666666)
        sub_1C4764EE4();
      v16 = operator new(40 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[(v9 - v11) >> 3];
    v17[1] = 2;
    v17[2] = 0;
    v17[3] = a2;
    if (a2 != -8192 && a2 != -4096 && a2)
    {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v17 + 1));
      v11 = *(char **)(a1 + 32);
      v9 = *(char **)(a1 + 40);
    }
    v18 = (char *)&v16[5 * v15];
    *v17 = &off_1E81AAF88;
    v10 = v17 + 5;
    v16[5 * v12 + 4] = 0;
    if (v9 == v11)
    {
      *(_QWORD *)(a1 + 32) = v17;
      *(_QWORD *)(a1 + 40) = v10;
      *(_QWORD *)(a1 + 48) = v18;
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = &v17[v19];
        v21 = &v9[v19 * 8];
        v22 = *(_QWORD *)&v9[v19 * 8 - 32] & 6;
        v17[v19 - 4] = v22;
        v23 = &v17[v19 - 4];
        *(v20 - 3) = 0;
        v24 = *(_QWORD *)&v9[v19 * 8 - 16];
        *(v20 - 2) = v24;
        if (v24 != -8192 && v24 != -4096 && v24 != 0)
        {
          v26 = *((_QWORD *)v21 - 4) & 0xFFFFFFFFFFFFFFF8;
          *(v20 - 3) = *(_QWORD *)v26;
          *(_QWORD *)v26 = v23;
          *v23 = v26 | v22;
          v27 = (unint64_t *)*(v20 - 3);
          if (v27)
            *v27 = *v27 & 7 | (unint64_t)&v16[5 * v12 - 3 + v19];
        }
        *(v20 - 5) = &off_1E81AAF88;
        *(v20 - 1) = *((_QWORD *)v21 - 1);
        v19 -= 5;
      }
      while (&v9[v19 * 8] != v11);
      v11 = *(char **)(a1 + 32);
      v28 = *(char **)(a1 + 40);
      *(_QWORD *)(a1 + 32) = &v17[v19];
      *(_QWORD *)(a1 + 40) = v10;
      for (*(_QWORD *)(a1 + 48) = v18; v28 != v11; v28 -= 40)
      {
        v33 = *((_QWORD *)v28 - 2);
        if (v33 != -8192 && v33 != -4096 && v33 != 0)
        {
          v35 = *((_QWORD *)v28 - 4) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v35 = *((_QWORD *)v28 - 3);
          v36 = (unint64_t *)*((_QWORD *)v28 - 3);
          if (v36)
          {
            *v36 = *v36 & 7 | v35;
          }
          else
          {
            v37 = *((_QWORD *)v28 - 2);
            v38 = ***(int32x2_t ****)v37;
            v39 = (unint64_t)v38[303];
            if (v39 <= v35)
            {
              v40 = v38[305].u32[0];
              if (v39 + 16 * v40 > v35)
              {
                v41 = v40 - 1;
                LODWORD(v42) = v41 & ((v37 >> 4) ^ (v37 >> 9));
                v43 = (uint64_t *)(v39 + 16 * v42);
                v44 = *v43;
                if (v37 == *v43)
                {
LABEL_66:
                  *v43 = -8192;
                  v38[304] = vadd_s32(v38[304], (int32x2_t)0x1FFFFFFFFLL);
                  v37 = *((_QWORD *)v28 - 2);
                }
                else
                {
                  v45 = 1;
                  while (v44 != -4096)
                  {
                    v46 = v42 + v45++;
                    v42 = v46 & v41;
                    v44 = *(_QWORD *)(v39 + 16 * v42);
                    if (v37 == v44)
                    {
                      v43 = (uint64_t *)(v39 + 16 * v42);
                      goto LABEL_66;
                    }
                  }
                }
                *(_BYTE *)(v37 + 17) &= ~1u;
              }
            }
          }
        }
      }
    }
    if (v11)
      operator delete(v11);
  }
  else
  {
    *((_QWORD *)v9 + 1) = 2;
    *((_QWORD *)v9 + 2) = 0;
    *((_QWORD *)v9 + 3) = a2;
    if (a2 != -8192 && a2 != -4096 && a2)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v9 + 8));
    *(_QWORD *)v9 = &off_1E81AAF88;
    *((_QWORD *)v9 + 4) = 0;
    v10 = v9 + 40;
  }
  *(_QWORD *)(a1 + 40) = v10;
  *(v10 - 1) = a1;
  *((_DWORD *)v4 + 6) = -858993459 * (((unint64_t)v10 - *(_QWORD *)(a1 + 32)) >> 3) - 1;
  v4[2] = *(_QWORD *)(a2 + 56);
  v29 = *(llvm::MCContext **)a1;
  if ((*(_WORD *)(a2 + 18) & 0x7FFF) != 0)
  {
    v47[0] = (uint64_t)"tmp";
    v48 = 259;
    NamedTempSymbol = llvm::MCContext::createNamedTempSymbol(v29, (const llvm::Twine *)v47);
  }
  else
  {
    v47[0] = (uint64_t)"tmp";
    v48 = 259;
    NamedTempSymbol = llvm::MCContext::createTempSymbol((uint64_t)v29, (uint64_t)v47, 1);
  }
  sub_1C619116C((uint64_t)v6, NamedTempSymbol);
  v31 = *v6;
  if ((unint64_t)*v6 >= 8)
  {
    if ((v31 & 4) == 0)
      return v6;
    v7 = (_DWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
    return *(uint64_t **)v7;
  }
  return 0;
}

uint64_t sub_1C5FEAE40(uint64_t result, llvm::DataLayout *this, unsigned int a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;

  v4 = result;
  LODWORD(result) = 0;
  if (v4 && *(_BYTE *)(v4 + 16) == 3)
    LODWORD(result) = llvm::DataLayout::getPreferredAlign(this, (const llvm::GlobalVariable *)v4);
  if (a3 <= result)
    result = result;
  else
    result = a3;
  v5 = *(_DWORD *)(v4 + 32);
  v6 = HIWORD(v5) & 0x3F;
  if (v6)
  {
    v7 = v6 - 1;
    v8 = (v5 >> 22) & 1;
    if (v7 > result)
      v8 = 1;
    if (v8)
      return v7;
    else
      return result;
  }
  return result;
}

void sub_1C5FEAEB4(llvm::Pass *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;

  *(_QWORD *)a1 = &off_1E81AADA8;
  v2 = (uint64_t *)*((_QWORD *)a1 + 62);
  if (v2)
  {
    v3 = *((unsigned int *)v2 + 4);
    v4 = *v2;
    if ((_DWORD)v3)
    {
      v5 = (uint64_t *)(v4 + 8);
      v6 = 16 * v3;
      do
      {
        if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v7 = *v5;
          *v5 = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        }
        v5 += 2;
        v6 -= 16;
      }
      while (v6);
      v4 = *v2;
    }
    MEMORY[0x1CAA32FB4](v4, 8);
    MEMORY[0x1CAA32FC0](v2, 0x1020C405AF6BDC9);
    *((_QWORD *)a1 + 62) = 0;
  }
  v8 = (_QWORD *)*((_QWORD *)a1 + 75);
  if (v8 != (_QWORD *)((char *)a1 + 616))
    free(v8);
  v9 = *((_QWORD *)a1 + 71);
  *((_QWORD *)a1 + 71) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)a1 + 70);
  *((_QWORD *)a1 + 70) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = (_QWORD *)*((_QWORD *)a1 + 66);
  if (v11)
  {
    v12 = (_QWORD *)*((_QWORD *)a1 + 67);
    v13 = (void *)*((_QWORD *)a1 + 66);
    if (v12 != v11)
    {
      do
      {
        v15 = *(v12 - 9);
        v12 -= 9;
        v14 = v15;
        *v12 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)a1 + 66);
    }
    *((_QWORD *)a1 + 67) = v11;
    operator delete(v13);
  }
  v16 = *((_QWORD *)a1 + 64);
  *((_QWORD *)a1 + 64) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)a1 + 61);
  *((_QWORD *)a1 + 61) = 0;
  if (v17)
  {
    v18 = sub_1C5FF7DE0(v17);
    MEMORY[0x1CAA32FC0](v18, 0x1020C40D7426AC9);
  }
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 57), 8);
  sub_1C5408A20((_QWORD *)a1 + 50);
  sub_1C6150A04((_QWORD *)a1 + 44);
  v19 = *((_QWORD *)a1 + 34);
  *((_QWORD *)a1 + 34) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v20 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v20 != (_QWORD *)((char *)a1 + 192))
    free(v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v21 != (_QWORD *)((char *)a1 + 120))
    free(v21);
  v22 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v22 != (_QWORD *)((char *)a1 + 48))
    free(v22);
  llvm::Pass::~Pass(a1);
}

uint64_t sub_1C5FEB0B0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248));
}

uint64_t sub_1C5FEB0C0(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 288) + 2064) + 272;
}

uint64_t sub_1C5FEB0D0(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 280) + 16);
}

uint64_t sub_1C5FEB0DC(uint64_t a1, uint64_t a2)
{
  uint64_t AnalysisPass;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const llvm::Triple *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  const void *v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  size_t v43;
  size_t v44;
  char *p_p;
  const void *v46;
  _BYTE *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t i;
  uint64_t v57;
  int v58;
  int v59;
  BOOL v60;
  BOOL v61;
  int v62;
  BOOL v63;
  _BOOL4 v64;
  int UWTableKind;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t (**v70)(_QWORD);
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t ModuleFlag;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116[2];
  char v117;
  void *__p;
  __int128 v119;
  uint64_t v120;
  __int16 v121;
  _BYTE __s[24];
  size_t v123;
  unint64_t v124;
  int v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::MachineModuleInfoWrapperPass::ID, 1);
  if (AnalysisPass)
    AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineModuleInfoWrapperPass::ID);
  v5 = AnalysisPass + 32;
  if (!AnalysisPass)
    v5 = 0;
  *(_QWORD *)(a1 + 288) = v5;
  *(_WORD *)(a1 + 596) = 0;
  v6 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = 0;
  if (v6)
  {
    v7 = sub_1C5FF7DE0(v6);
    MEMORY[0x1CAA32FC0](v7, 0x1020C40D7426AC9);
  }
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248));
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 24))(v8, *(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 248));
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, a2);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 272) + 176))(*(_QWORD *)(a1 + 272), 0, *(_QWORD *)(*(_QWORD *)(a1 + 248) + 584));
  v10 = (const llvm::Triple *)(*(_QWORD *)(a1 + 248) + 448);
  v121 = 261;
  __p = (void *)llvm::Module::getDarwinTargetVariantTriple((llvm::Module *)a2);
  *(_QWORD *)&v119 = v11;
  v12 = v116;
  llvm::Triple::Triple((uint64_t)v116, (llvm::Twine *)&__p);
  v13 = *(_QWORD *)(a1 + 272);
  __p = (void *)llvm::Module::getSDKVersion((llvm::Module *)a2);
  *(_QWORD *)&v119 = v14;
  llvm::Module::getDarwinTargetVariantTriple((llvm::Module *)a2);
  if (!v15)
    v12 = 0;
  *(_QWORD *)__s = llvm::Module::getDarwinTargetVariantSDKVersion((llvm::Module *)a2);
  *(_QWORD *)&__s[8] = v16;
  llvm::MCStreamer::emitVersionForTarget(v13, v10, (const llvm::VersionTuple *)&__p, (const llvm::Triple *)v12, (const llvm::VersionTuple *)__s);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, a2);
  v17 = *(_QWORD *)(a1 + 256);
  if (*(_BYTE *)(v17 + 364))
  {
    __p = &v120;
    v119 = xmmword_1C85F20B0;
    v18 = *(unsigned __int8 *)(v17 + 360);
    v19 = *(_BYTE *)(a2 + 215);
    if (v19 >= 0)
      v20 = (const void *)(a2 + 192);
    else
      v20 = *(const void **)(a2 + 192);
    if (v19 >= 0)
      v21 = v19 & 0x7F;
    else
      v21 = *(_QWORD *)(a2 + 200);
    if (v18)
    {
      *(_QWORD *)&__s[16] = 0;
      v123 = 0;
      *(_QWORD *)__s = v20;
      *(_QWORD *)&__s[8] = v21;
      v124 = v21;
      v125 = 0;
      llvm::sys::path::reverse_iterator::operator++((uint64_t)__s);
      v22 = 0;
      v24 = *(const void **)&__s[16];
      v23 = v123;
      *(_QWORD *)&v119 = 0;
      if (*((_QWORD *)&v119 + 1) < v123)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__p, &v120, v123, 1);
        v22 = v119;
        if (!v23)
          goto LABEL_20;
      }
      else if (!v123)
      {
LABEL_20:
        v25 = v22 + v23;
        goto LABEL_25;
      }
      memcpy((char *)__p + v22, v24, v23);
      v22 = v119;
      goto LABEL_20;
    }
    if (v21 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__p, &v120, v21, 1);
      v28 = (uint64_t *)__p;
      v26 = v119;
    }
    else
    {
      v26 = 0;
      v27 = 0;
      v28 = &v120;
      if (!v21)
      {
LABEL_24:
        v25 = v27 + v21;
LABEL_25:
        *(_QWORD *)&v119 = v25;
        if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 365))
        {
          strcpy(__s, "LLVM version 32023.334");
          v29 = strlen(__s);
          (*(void (**)(_QWORD, void *, uint64_t, _BYTE *, size_t))(**(_QWORD **)(a1 + 272) + 664))(*(_QWORD *)(a1 + 272), __p, v25, __s, v29);
        }
        else
        {
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(a1 + 272) + 656))(*(_QWORD *)(a1 + 272), __p, v25);
        }
        if (__p != &v120)
          free(__p);
        goto LABEL_30;
      }
    }
    memcpy((char *)v28 + v26, v20, v21);
    v27 = v119;
    goto LABEL_24;
  }
LABEL_30:
  v30 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::GCModuleInfo::ID, 1);
  v31 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v30 + 96))(v30, &llvm::GCModuleInfo::ID);
  v32 = *(unsigned int *)(v31 + 40);
  if ((_DWORD)v32)
  {
    v33 = v31;
    v34 = *(uint64_t **)(v31 + 32);
    v35 = 8 * v32;
    do
    {
      v36 = sub_1C5FEBE38(a1, *v34);
      if (v36)
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, a2, v33, a1);
      ++v34;
      v35 -= 8;
    }
    while (v35);
  }
  v37 = *(_BYTE *)(a2 + 111);
  v38 = v37;
  v39 = v37 & 0x7F;
  if (v38 < 0)
    v39 = *(_QWORD *)(a2 + 96);
  if (v39)
  {
    v40 = *(_QWORD *)(a1 + 272);
    __p = "Start of file scope inline assembly";
    v121 = 259;
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v40 + 112))(v40, &__p, 1);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 152))(*(_QWORD *)(a1 + 272));
    v41 = *(_BYTE *)(a2 + 111);
    v42 = v41;
    v43 = v41 & 0x7F;
    if (v42 >= 0)
      v44 = v43;
    else
      v44 = *(_QWORD *)(a2 + 96);
    sub_1C484371C((uint64_t)&__p, v44 + 1);
    if (v119 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if (v44)
    {
      if (*(char *)(a2 + 111) >= 0)
        v46 = (const void *)(a2 + 88);
      else
        v46 = *(const void **)(a2 + 88);
      memmove(p_p, v46, v44);
    }
    *(_WORD *)&p_p[v44] = 10;
    if (v119 >= 0)
      v47 = &__p;
    else
      v47 = __p;
    if (v119 >= 0)
      v48 = HIBYTE(v119) & 0x7F;
    else
      v48 = v119;
    sub_1C5FFADF0(a1, v47, v48, *(_QWORD *)(*(_QWORD *)(a1 + 248) + 584), *(_QWORD *)(a1 + 248) + 1128, 0, 0);
    if (SHIBYTE(v119) < 0)
      operator delete(__p);
    v49 = *(_QWORD *)(a1 + 272);
    __p = "End of file scope inline assembly";
    v121 = 259;
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 112))(v49, &__p, 1);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 152))(*(_QWORD *)(a1 + 272));
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 408))
  {
    if (!llvm::Module::getCodeViewFlag((llvm::Module *)a2))
      goto LABEL_187;
    if (*(_DWORD *)(*(_QWORD *)(a1 + 248) + 484) == 15)
    {
      v82 = operator new();
      __p = (void *)sub_1C63CA3C8(v82, a1);
      sub_1C63BC5E0(a1 + 528, (uint64_t *)&__p);
      if (__p)
        (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    }
    if (llvm::Module::getDwarfVersion((llvm::Module *)a2))
    {
LABEL_187:
      if (*(_BYTE *)(*(_QWORD *)(a1 + 288) + 2108))
      {
        v50 = operator new();
        *(_QWORD *)(a1 + 576) = sub_1C6009234(v50, a1);
        v51 = *(uint64_t **)(a1 + 536);
        v52 = *(_QWORD *)(a1 + 544);
        if ((unint64_t)v51 >= v52)
        {
          v83 = *(_QWORD **)(a1 + 528);
          v84 = 0x8E38E38E38E38E39 * (v51 - v83) + 1;
          if (v84 > 0x38E38E38E38E38ELL)
            goto LABEL_183;
          v85 = 0x8E38E38E38E38E39 * ((uint64_t)(v52 - (_QWORD)v83) >> 3);
          if (2 * v85 > v84)
            v84 = 2 * v85;
          if (v85 >= 0x1C71C71C71C71C7)
            v86 = 0x38E38E38E38E38ELL;
          else
            v86 = v84;
          if (v86 > 0x38E38E38E38E38ELL)
            goto LABEL_184;
          v87 = 9 * v86;
          v88 = (char *)operator new(72 * v86);
          v89 = (uint64_t *)&v88[8 * (v51 - v83)];
          v90 = &v88[8 * v87];
          *v89 = v50;
          v89[1] = (uint64_t)"emit";
          v89[2] = 4;
          v89[3] = (uint64_t)"Debug Info Emission";
          v89[4] = 19;
          v89[5] = (uint64_t)"dwarf";
          v89[6] = 5;
          v89[7] = (uint64_t)"DWARF Emission";
          v89[8] = 14;
          v53 = v89 + 9;
          if (v51 == v83)
          {
            *(_QWORD *)(a1 + 528) = v89;
            *(_QWORD *)(a1 + 536) = v53;
            *(_QWORD *)(a1 + 544) = v90;
          }
          else
          {
            do
            {
              v91 = *(v51 - 9);
              v51 -= 9;
              *v51 = 0;
              *(v89 - 9) = v91;
              v89 -= 9;
              v92 = *(_OWORD *)(v51 + 1);
              v93 = *(_OWORD *)(v51 + 3);
              v94 = *(_OWORD *)(v51 + 5);
              *(_OWORD *)(v89 + 7) = *(_OWORD *)(v51 + 7);
              *(_OWORD *)(v89 + 5) = v94;
              *(_OWORD *)(v89 + 3) = v93;
              *(_OWORD *)(v89 + 1) = v92;
            }
            while (v51 != v83);
            v51 = *(uint64_t **)(a1 + 528);
            v95 = *(uint64_t **)(a1 + 536);
            *(_QWORD *)(a1 + 528) = v89;
            *(_QWORD *)(a1 + 536) = v53;
            *(_QWORD *)(a1 + 544) = v90;
            while (v95 != v51)
            {
              v97 = *(v95 - 9);
              v95 -= 9;
              v96 = v97;
              *v95 = 0;
              if (v97)
                (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
            }
          }
          if (v51)
            operator delete(v51);
        }
        else
        {
          *v51 = v50;
          v51[1] = (uint64_t)"emit";
          v51[2] = 4;
          v51[3] = (uint64_t)"Debug Info Emission";
          v51[4] = 19;
          v51[5] = (uint64_t)"dwarf";
          v51[6] = 5;
          v51[7] = (uint64_t)"DWARF Emission";
          v51[8] = 14;
          v53 = v51 + 9;
        }
        *(_QWORD *)(a1 + 536) = v53;
      }
    }
  }
  __p = "llvm.pseudo_probe_desc";
  v121 = 259;
  if (llvm::Module::getNamedMetadata(a2, (uint64_t)&__p))
  {
    v80 = (_QWORD *)operator new();
    *v80 = &off_1E81ABC38;
    v80[1] = a1;
    v80[2] = 0;
    v80[3] = 0;
    *((_DWORD *)v80 + 8) = 0;
    *(_QWORD *)(a1 + 584) = v80;
    __p = v80;
    sub_1C63BC668(a1 + 528, (uint64_t *)&__p);
    if (__p)
      (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  }
  v54 = *(_QWORD *)(a1 + 256);
  v55 = *(_DWORD *)(v54 + 412);
  if (v55 <= 3)
  {
    for (i = *(_QWORD *)(a2 + 32); i != a2 + 24; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v57 = i - 56;
      else
        v57 = 0;
      v58 = *(_DWORD *)(v57 + 32);
      if ((v58 & 0xF) == 1)
        goto LABEL_86;
      v59 = *(unsigned __int8 *)(v57 + 16);
      v60 = i && v59 == 3;
      v61 = !v60;
      if (v60)
      {
        if ((*(_DWORD *)(v57 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_86;
      }
      else if (!*(_BYTE *)(v57 + 16) && (v58 & 0x800000) == 0 && *(_QWORD *)(v57 + 72) == v57 + 72)
      {
        goto LABEL_86;
      }
      v63 = v55 == 1 && *(_BYTE *)(v54 + 409) == 0;
      v64 = v63;
      if (!v63
        || (v113 = v57 + 112,
            v114 = i,
            UWTableKind = llvm::AttributeList::getUWTableKind((llvm::AttributeList *)(v57 + 112)),
            i = v114,
            !UWTableKind)
        && *(_QWORD *)v113
        && (*(_BYTE *)(*(_QWORD *)v113 + 16) & 0x20) != 0
        && (*(_WORD *)(v57 + 18) & 8) == 0)
      {
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 288) + 2108) && (*(_WORD *)(*(_QWORD *)(a1 + 248) + 1064) & 0x10) == 0)
        {
LABEL_86:
          v62 = *(_DWORD *)(a1 + 592);
          goto LABEL_87;
        }
      }
      if (v61)
      {
        if (!v59 && (v58 & 0x800000) == 0 && *(_QWORD *)(v57 + 72) == v57 + 72)
        {
LABEL_106:
          v62 = 0;
          goto LABEL_107;
        }
      }
      else if ((*(_DWORD *)(v57 + 20) & 0x7FFFFFF) == 0)
      {
        goto LABEL_106;
      }
      if (!v64)
        goto LABEL_103;
      v115 = i;
      v66 = v57 + 112;
      if (!llvm::AttributeList::getUWTableKind((llvm::AttributeList *)(v57 + 112))
        && *(_QWORD *)v66
        && (*(_BYTE *)(*(_QWORD *)v66 + 16) & 0x20) != 0)
      {
        i = v115;
        if ((*(_WORD *)(v57 + 18) & 8) == 0)
        {
LABEL_103:
          if (*(_BYTE *)(*(_QWORD *)(a1 + 288) + 2108))
            v62 = 2;
          else
            v62 = (*(unsigned __int16 *)(*(_QWORD *)(a1 + 248) + 1064) >> 3) & 2;
          goto LABEL_107;
        }
        v62 = 1;
      }
      else
      {
        v62 = 1;
        i = v115;
      }
LABEL_107:
      *(_DWORD *)(a1 + 592) = v62;
LABEL_87:
      if (v62 == 1)
        break;
    }
  }
  switch(v55)
  {
    case 0u:
      if (!*(_BYTE *)(v54 + 416) || *(_DWORD *)(a1 + 592) != 2)
        goto LABEL_132;
      goto LABEL_121;
    case 1u:
    case 2u:
LABEL_121:
      v67 = operator new();
      v68 = *(_QWORD *)(a1 + 288);
      *(_QWORD *)(v67 + 8) = a1;
      *(_QWORD *)(v67 + 16) = v68;
      *(_QWORD *)v67 = &off_1E81AB1C0;
      *(_DWORD *)(v67 + 24) = 0;
      *(_BYTE *)(v67 + 28) = 0;
      goto LABEL_129;
    case 3u:
      v67 = operator new();
      v69 = (_QWORD *)sub_1C63C100C(v67, a1);
      v70 = &off_1E81AAD08;
      goto LABEL_128;
    case 4u:
      if (!*(_DWORD *)(v54 + 420))
        goto LABEL_132;
      v67 = operator new();
      sub_1C63C915C(v67, a1);
      goto LABEL_129;
    case 5u:
      v69 = (_QWORD *)operator new();
      v67 = (uint64_t)v69;
      v71 = *(_QWORD *)(a1 + 288);
      v69[1] = a1;
      v69[2] = v71;
      v70 = &off_1E81AC098;
      goto LABEL_128;
    case 6u:
      v67 = operator new();
      v69 = (_QWORD *)sub_1C63C100C(v67, a1);
      v70 = &off_1E81AAC68;
LABEL_128:
      *v69 = v70;
LABEL_129:
      v72 = *(uint64_t **)(a1 + 536);
      v73 = *(_QWORD *)(a1 + 544);
      if ((unint64_t)v72 >= v73)
      {
        v98 = *(_QWORD **)(a1 + 528);
        v99 = 0x8E38E38E38E38E39 * (v72 - v98) + 1;
        if (v99 <= 0x38E38E38E38E38ELL)
        {
          v100 = 0x8E38E38E38E38E39 * ((uint64_t)(v73 - (_QWORD)v98) >> 3);
          if (2 * v100 > v99)
            v99 = 2 * v100;
          if (v100 >= 0x1C71C71C71C71C7)
            v101 = 0x38E38E38E38E38ELL;
          else
            v101 = v99;
          if (v101 <= 0x38E38E38E38E38ELL)
          {
            v102 = 9 * v101;
            v103 = (char *)operator new(72 * v101);
            v104 = (uint64_t *)&v103[8 * (v72 - v98)];
            v105 = &v103[8 * v102];
            *v104 = v67;
            v104[1] = (uint64_t)"write_exception";
            v104[2] = 15;
            v104[3] = (uint64_t)"DWARF Exception Writer";
            v104[4] = 22;
            v104[5] = (uint64_t)"dwarf";
            v104[6] = 5;
            v104[7] = (uint64_t)"DWARF Emission";
            v104[8] = 14;
            v74 = v104 + 9;
            if (v72 == v98)
            {
              *(_QWORD *)(a1 + 528) = v104;
              *(_QWORD *)(a1 + 536) = v74;
              *(_QWORD *)(a1 + 544) = v105;
            }
            else
            {
              do
              {
                v106 = *(v72 - 9);
                v72 -= 9;
                *v72 = 0;
                *(v104 - 9) = v106;
                v104 -= 9;
                v107 = *(_OWORD *)(v72 + 1);
                v108 = *(_OWORD *)(v72 + 3);
                v109 = *(_OWORD *)(v72 + 5);
                *(_OWORD *)(v104 + 7) = *(_OWORD *)(v72 + 7);
                *(_OWORD *)(v104 + 5) = v109;
                *(_OWORD *)(v104 + 3) = v108;
                *(_OWORD *)(v104 + 1) = v107;
              }
              while (v72 != v98);
              v72 = *(uint64_t **)(a1 + 528);
              v110 = *(uint64_t **)(a1 + 536);
              *(_QWORD *)(a1 + 528) = v104;
              *(_QWORD *)(a1 + 536) = v74;
              *(_QWORD *)(a1 + 544) = v105;
              while (v110 != v72)
              {
                v112 = *(v110 - 9);
                v110 -= 9;
                v111 = v112;
                *v110 = 0;
                if (v112)
                  (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
              }
            }
            if (v72)
              operator delete(v72);
            goto LABEL_131;
          }
LABEL_184:
          sub_1C4764EE4();
        }
LABEL_183:
        abort();
      }
      *v72 = v67;
      v72[1] = (uint64_t)"write_exception";
      v72[2] = 15;
      v72[3] = (uint64_t)"DWARF Exception Writer";
      v72[4] = 22;
      v72[5] = (uint64_t)"dwarf";
      v72[6] = 5;
      v72[7] = (uint64_t)"DWARF Emission";
      v72[8] = 14;
      v74 = v72 + 9;
LABEL_131:
      *(_QWORD *)(a1 + 536) = v74;
LABEL_132:
      ModuleFlag = llvm::Module::getModuleFlag(a2, "cfguard", 7uLL);
      if (ModuleFlag)
      {
        if (*(_QWORD *)(ModuleFlag + 128))
        {
          v81 = (_QWORD *)operator new();
          *v81 = &off_1E81ABCC8;
          v81[1] = a1;
          v81[3] = 0;
          v81[4] = 0;
          v81[2] = 0;
          __p = v81;
          sub_1C63BC6EC(a1 + 528, (uint64_t *)&__p);
          if (__p)
            (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
        }
      }
      v76 = *(uint64_t **)(a1 + 528);
      v77 = *(uint64_t **)(a1 + 536);
      while (v76 != v77)
      {
        v78 = *v76;
        v76 += 9;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 24))(v78, a2);
      }
      if (v117 < 0)
        operator delete(v116[0]);
      return 0;
    default:
      goto LABEL_132;
  }
}

uint64_t sub_1C5FEBE38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  __int128 *p_dst;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[4];
  __int16 v17;
  const char *v18;
  uint64_t v19[3];
  __int16 v20;
  _QWORD v21[5];
  __int128 __dst;
  uint64_t v23;

  if (!*(_BYTE *)(a2 + 34))
    return 0;
  v6 = *(_QWORD *)(a1 + 496);
  if (v6)
  {
    v7 = *(_QWORD *)v6;
  }
  else
  {
    v6 = operator new();
    v7 = 0;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 16) = 0;
    *(_QWORD *)(a1 + 496) = v6;
  }
  v21[0] = 0;
  v8 = sub_1C6144BDC(v7, *(_DWORD *)(v6 + 16), a2, v21);
  if ((_DWORD)v8)
    v9 = v21[0] == *(_QWORD *)v6 + 16 * *(unsigned int *)(v6 + 16);
  else
    v9 = 1;
  if (!v9)
    return *(_QWORD *)(v21[0] + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    v8 = (uint64_t)sub_1C47EBC30(&__dst, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    __dst = *(_OWORD *)(a2 + 8);
    v23 = *(_QWORD *)(a2 + 24);
  }
  v10 = llvm::Registry<llvm::GCMetadataPrinter>::Head;
  if (!llvm::Registry<llvm::GCMetadataPrinter>::Head)
  {
LABEL_26:
    v18 = "no GCMetadataPrinter registered for GC: ";
    v20 = 259;
    v17 = 260;
    v16[0] = (uint64_t)&__dst;
    sub_1C6131AAC((uint64_t *)&v18, v16, (uint64_t)v21);
    llvm::report_fatal_error((uint64_t)v21, 1);
  }
  if (v23 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  if (v23 >= 0)
    v12 = HIBYTE(v23) & 0x7F;
  else
    v12 = *((_QWORD *)&__dst + 1);
  while (1)
  {
    v13 = v10[1];
    if (v12 == *(_QWORD *)(v13 + 8))
    {
      if (!v12)
        break;
      v8 = memcmp(p_dst, *(const void **)v13, v12);
      if (!(_DWORD)v8)
        break;
    }
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_26;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(v13 + 32))(v16, v8);
  v14 = v16[0];
  *(_QWORD *)(v16[0] + 8) = a2;
  v16[0] = 0;
  v18 = (const char *)a2;
  v19[0] = v14;
  sub_1C63BDAD4((uint64_t)v21, v6, (uint64_t *)&v18, v19);
  if (v19[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v19[0] + 8))(v19[0]);
  v2 = *(_QWORD *)(v21[0] + 8);
  v15 = v16[0];
  v16[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
  return v2;
}

uint64_t sub_1C5FEC03C(uint64_t result, llvm::GlobalValue *a2, uint64_t a3)
{
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v6;

  if ((*((_DWORD *)a2 + 8) & 0xF) == 0)
  {
    v3 = *(uint64_t (**)(void))(**(_QWORD **)(result + 272) + 304);
    return v3();
  }
  if (((1 << (*((_DWORD *)a2 + 8) & 0xF)) & 0x180) == 0)
  {
    v6 = result;
    v4 = *(_QWORD *)(result + 256);
    if (*(_BYTE *)(v4 + 392))
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 272) + 304))(*(_QWORD *)(result + 272), a3, 9);
      if (*(_BYTE *)(*(_QWORD *)(v6 + 256) + 393) && llvm::GlobalValue::canBeOmittedFromSymbolTable(a2))
        v3 = *(uint64_t (**)(void))(**(_QWORD **)(v6 + 272) + 304);
      else
        v3 = *(uint64_t (**)(void))(**(_QWORD **)(v6 + 272) + 304);
    }
    else if (*(_BYTE *)(v4 + 394) && llvm::GlobalValue::getComdat((uint64_t)a2))
    {
      v3 = *(uint64_t (**)(void))(**(_QWORD **)(v6 + 272) + 304);
    }
    else
    {
      v3 = *(uint64_t (**)(void))(**(_QWORD **)(v6 + 272) + 304);
    }
    return v3();
  }
  return result;
}

unint64_t sub_1C5FEC150(uint64_t a1, const llvm::GlobalValue *a2)
{
  return llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), a2);
}

unint64_t sub_1C5FEC158(uint64_t a1, llvm::GlobalValue *this)
{
  uint64_t v3;
  llvm::GlobalValue *v4;
  _BOOL4 canBenefitFromLocalAlias;
  _BOOL4 v6;
  llvm::Module *v7;
  int RelocationModel;
  int v9;
  int PIELevel;
  int v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  const llvm::GlobalValue *v15;
  uint64_t v16;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 248) + 492) != 3)
    return llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), this);
  v3 = a1;
  v4 = this;
  canBenefitFromLocalAlias = llvm::GlobalValue::canBenefitFromLocalAlias(this);
  this = v4;
  v6 = canBenefitFromLocalAlias;
  a1 = v3;
  if (!v6)
    return llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), this);
  v7 = (llvm::Module *)*((_QWORD *)v4 + 5);
  RelocationModel = llvm::TargetMachine::getRelocationModel(*(llvm::TargetMachine **)(v3 + 248));
  this = v4;
  v9 = RelocationModel;
  a1 = v3;
  if (!v9)
    return llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), this);
  PIELevel = llvm::Module::getPIELevel(v7);
  this = v4;
  v11 = PIELevel;
  a1 = v3;
  if (v11 || (*((_BYTE *)v4 + 33) & 0x40) == 0)
    return llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), this);
  v12 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v3 + 248) + 24);
  v13 = v3;
  v14 = *(_QWORD *)(v3 + 248);
  v15 = this;
  v16 = v12(v14);
  return llvm::TargetLoweringObjectFile::getSymbolWithGlobalValueBase(v16, v15, "$local", 6, *(_QWORD *)(v13 + 248));
}

const llvm::GlobalValue *sub_1C5FEC228(const llvm::GlobalValue *result, llvm::GlobalValue *a2)
{
  uint64_t v3;
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::GlobalValue *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const llvm::TargetMachine *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int KindForGlobal;
  llvm::DataLayout *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  BOOL v37;
  const char *v38;
  char v39;
  unint64_t v40;
  int v41;
  unsigned __int8 v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  llvm::raw_ostream *v56;
  llvm::raw_ostream *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  unint64_t Symbol;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  const llvm::MCSymbol *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  llvm::MCStreamer *v82;
  const llvm::MCSymbol *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  int v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  llvm::GlobalValue *v109;
  int v110;
  int v111;
  uint64_t v112;
  int v113;
  BOOL v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  BOOL v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v123;
  uint64_t v124;
  int v125;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD v132[4];
  __int16 v133;
  uint64_t v134[2];
  const char *v135;
  __int16 v136;

  v3 = (uint64_t)result;
  v4 = (_DWORD *)*((_QWORD *)result + 31);
  v5 = v4[260];
  if ((v5 & 0x40000) != 0)
  {
    if ((v5 & 0x20000) == 0)
      goto LABEL_8;
  }
  else
  {
    v6 = v4[122];
    if (v6 != 11)
    {
      v7 = v4[121];
      if (v7 != 13 && (v7 != 15 || v6 != 18))
        goto LABEL_8;
    }
  }
  if ((*((_BYTE *)a2 + 33) & 0x1C) != 0)
    return result;
LABEL_8:
  if (a2 && *((_BYTE *)a2 + 16) == 3)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      goto LABEL_33;
  }
  else if (!*((_BYTE *)a2 + 16)
         && *((llvm::GlobalValue **)a2 + 9) == (llvm::GlobalValue *)((char *)a2 + 72)
         && (*((_BYTE *)a2 + 34) & 0x80) == 0)
  {
    goto LABEL_33;
  }
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    goto LABEL_24;
  v9 = ***(_QWORD ***)a2;
  v10 = *(_QWORD *)(v9 + 152);
  v11 = *(unsigned int *)(v9 + 168);
  if (!(_DWORD)v11)
    goto LABEL_22;
  LODWORD(v12) = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v13 = v10 + 16 * v12;
  v14 = *(llvm::GlobalValue **)v13;
  if (*(llvm::GlobalValue **)v13 != a2)
  {
    v15 = 1;
    while (v14 != (llvm::GlobalValue *)-4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(llvm::GlobalValue **)(v10 + 16 * v12);
      if (v14 == a2)
      {
        v13 = v10 + 16 * v12;
        goto LABEL_23;
      }
    }
LABEL_22:
    v13 = v10 + 16 * v11;
  }
LABEL_23:
  v17 = *(_QWORD *)(v13 + 8);
  if (*(_QWORD *)v17 == 9)
  {
    v60 = *(_QWORD *)(v17 + 16);
    v61 = *(unsigned __int8 *)(v17 + 24);
    if (v60 == 0x6573752E6D766C6CLL && v61 == 100)
    {
      if (*(_BYTE *)(*((_QWORD *)result + 32) + 367))
      {
        v63 = *((_QWORD *)a2 - 4);
        v64 = *(_DWORD *)(v63 + 20);
        v65 = v64 & 0x7FFFFFF;
        if ((v64 & 0x7FFFFFF) != 0)
        {
          v66 = *((_QWORD *)a2 - 4);
          do
          {
            result = llvm::Value::stripPointerCasts(*(llvm::Value **)(v66 - 32 * (*(_DWORD *)(v63 + 20) & 0x7FFFFFF)));
            if (result)
              v67 = *((unsigned __int8 *)result + 16) > 3u;
            else
              v67 = 1;
            if (!v67)
            {
              v68 = *(_QWORD *)(v3 + 272);
              Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(v3 + 248), result);
              result = (const llvm::GlobalValue *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v68 + 304))(v68, Symbol, 17);
            }
            v66 += 32;
            --v65;
          }
          while (v65);
        }
      }
      return result;
    }
  }
LABEL_24:
  if ((*((_BYTE *)a2 + 34) & 0x40) == 0)
    goto LABEL_25;
  v84 = ***(_QWORD ***)a2;
  v134[0] = (uint64_t)a2;
  v85 = *(_DWORD *)(v84 + 2520);
  if (!v85)
  {
    v128 = 0;
LABEL_192:
    result = (const llvm::GlobalValue *)sub_1C53D65B8(v84 + 2504, (uint64_t)v134, v134, v128);
    v129 = v134[0];
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    *(_QWORD *)result = v129;
    goto LABEL_129;
  }
  v86 = *(_QWORD *)(v84 + 2504);
  v87 = v85 - 1;
  v88 = v87 & ((a2 >> 4) ^ (a2 >> 9));
  result = (const llvm::GlobalValue *)(v86 + 24 * v88);
  v89 = *(_QWORD *)result;
  if (*(llvm::GlobalValue **)result != a2)
  {
    v112 = 0;
    v113 = 1;
    while (v89 != -4096)
    {
      if (v112)
        v114 = 0;
      else
        v114 = v89 == -8192;
      if (v114)
        v112 = (uint64_t)result;
      v115 = v88 + v113++;
      v88 = v115 & v87;
      result = (const llvm::GlobalValue *)(v86 + 24 * v88);
      v89 = *(_QWORD *)result;
      if (*(llvm::GlobalValue **)result == a2)
        goto LABEL_129;
    }
    if (v112)
      v128 = (_QWORD *)v112;
    else
      v128 = result;
    goto LABEL_192;
  }
LABEL_129:
  if (*((_QWORD *)result + 2) == 13)
  {
    v90 = (uint64_t *)*((_QWORD *)result + 1);
    v91 = *v90;
    v92 = *(uint64_t *)((char *)v90 + 5);
    if (v91 == 0x74656D2E6D766C6CLL && v92 == 0x617461646174656DLL)
      return result;
  }
LABEL_25:
  v18 = *((_DWORD *)a2 + 8);
  if ((v18 & 0xF) == 1)
    return result;
  if ((v18 & 0x400000) == 0)
    goto LABEL_27;
  v94 = ***(_QWORD ***)a2;
  v134[0] = (uint64_t)a2;
  v95 = *(_DWORD *)(v94 + 2520);
  if (!v95)
  {
    v130 = 0;
LABEL_196:
    result = (const llvm::GlobalValue *)sub_1C53D65B8(v94 + 2504, (uint64_t)v134, v134, v130);
    v131 = v134[0];
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    *(_QWORD *)result = v131;
    goto LABEL_138;
  }
  v96 = *(_QWORD *)(v94 + 2504);
  v97 = v95 - 1;
  v98 = v97 & ((a2 >> 4) ^ (a2 >> 9));
  result = (const llvm::GlobalValue *)(v96 + 24 * v98);
  v99 = *(_QWORD *)result;
  if (*(llvm::GlobalValue **)result != a2)
  {
    v116 = 0;
    v117 = 1;
    while (v99 != -4096)
    {
      if (v116)
        v118 = 0;
      else
        v118 = v99 == -8192;
      if (v118)
        v116 = (uint64_t)result;
      v119 = v98 + v117++;
      v98 = v119 & v97;
      result = (const llvm::GlobalValue *)(v96 + 24 * v98);
      v99 = *(_QWORD *)result;
      if (*(llvm::GlobalValue **)result == a2)
        goto LABEL_138;
    }
    if (v116)
      v130 = (_QWORD *)v116;
    else
      v130 = result;
    goto LABEL_196;
  }
LABEL_138:
  if (*((_QWORD *)result + 2) == 12)
  {
    v100 = (uint64_t *)*((_QWORD *)result + 1);
    v101 = *v100;
    v102 = *((_DWORD *)v100 + 2);
    if (v101 == 0x7274702E6D766C6CLL && v102 == 1752462689)
      return result;
  }
LABEL_27:
  if ((*((_DWORD *)a2 + 8) & 0xF) != 6 || (*((_BYTE *)a2 + 23) & 0x10) == 0)
    goto LABEL_28;
  v104 = ***(_QWORD ***)a2;
  v105 = *(_QWORD *)(v104 + 152);
  v106 = *(unsigned int *)(v104 + 168);
  if ((_DWORD)v106)
  {
    LODWORD(v107) = (v106 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v108 = v105 + 16 * v107;
    v109 = *(llvm::GlobalValue **)v108;
    if (*(llvm::GlobalValue **)v108 == a2)
      goto LABEL_171;
    v110 = 1;
    while (v109 != (llvm::GlobalValue *)-4096)
    {
      v111 = v107 + v110++;
      v107 = v111 & (v106 - 1);
      v109 = *(llvm::GlobalValue **)(v105 + 16 * v107);
      if (v109 == a2)
      {
        v108 = v105 + 16 * v107;
        goto LABEL_171;
      }
    }
  }
  v108 = v105 + 16 * v106;
LABEL_171:
  v120 = *(_QWORD *)(v108 + 8);
  if (*(_QWORD *)v120 == 17)
  {
    if (*(_QWORD *)(v120 + 16) == 0x6F6C672E6D766C6CLL
      && *(_QWORD *)(v120 + 24) == 0x726F74635F6C6162
      && *(_BYTE *)(v120 + 32) == 115)
    {
      return (const llvm::GlobalValue *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 216))(v3, *((_QWORD *)a2 + 5) + 272, *((_QWORD *)a2 - 4), 1);
    }
    v123 = *(_QWORD *)(v120 + 16);
    v124 = *(_QWORD *)(v120 + 24);
    v125 = *(unsigned __int8 *)(v120 + 32);
    if (v123 == 0x6F6C672E6D766C6CLL && v124 == 0x726F74645F6C6162 && v125 == 115)
      return (const llvm::GlobalValue *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 216))(v3, *((_QWORD *)a2 + 5) + 272, *((_QWORD *)a2 - 4), 0);
  }
LABEL_28:
  v134[0] = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(v3 + 248), a2);
  v132[0] = 0;
  result = (const llvm::GlobalValue *)sub_1C52A0CF8((uint64_t *)(v3 + 400), v134, v132);
  if ((_DWORD)result)
  {
    v19 = v132[0];
    v20 = *(_QWORD *)(v3 + 400);
    v21 = *(unsigned int *)(v3 + 416);
  }
  else
  {
    v20 = *(_QWORD *)(v3 + 400);
    v21 = *(unsigned int *)(v3 + 416);
    v19 = v20 + 16 * v21;
  }
  if (v19 == v20 + 16 * v21)
  {
    if (*(_BYTE *)(v3 + 504))
    {
      v56 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 272) + 120))(*(_QWORD *)(v3 + 272));
      llvm::Value::printAsOperand(a2, v56, 0, *((const llvm::Module **)a2 + 5));
      v57 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 272) + 120))(*(_QWORD *)(v3 + 272));
      v58 = (_BYTE *)*((_QWORD *)v57 + 4);
      if ((unint64_t)v58 >= *((_QWORD *)v57 + 3))
      {
        llvm::raw_ostream::write(v57, 10);
      }
      else
      {
        *((_QWORD *)v57 + 4) = v58 + 1;
        *v58 = 10;
      }
    }
LABEL_33:
    result = (const llvm::GlobalValue *)llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(v3 + 248), a2);
    v23 = (uint64_t)result;
    v24 = *((_DWORD *)a2 + 8);
    v25 = (v24 >> 4) & 3;
    if (v25 == 2)
    {
      v27 = (unsigned int *)(*(_QWORD *)(v3 + 256) + 404);
    }
    else
    {
      if (v25 != 1)
        goto LABEL_46;
      if (a2 && *((_BYTE *)a2 + 16) == 3)
      {
        v26 = *(_QWORD *)(v3 + 256);
        if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
        {
LABEL_38:
          v27 = (unsigned int *)(v26 + 400);
          goto LABEL_44;
        }
      }
      else if (!*((_BYTE *)a2 + 16) && *((llvm::GlobalValue **)a2 + 9) == (llvm::GlobalValue *)((char *)a2 + 72))
      {
        v26 = *(_QWORD *)(v3 + 256);
        if ((v24 & 0x800000) == 0)
          goto LABEL_38;
      }
      else
      {
        v26 = *(_QWORD *)(v3 + 256);
      }
      v27 = (unsigned int *)(v26 + 396);
    }
LABEL_44:
    v22 = (const llvm::TargetMachine *)*v27;
    if ((_DWORD)v22)
      result = (const llvm::GlobalValue *)(*(uint64_t (**)(_QWORD, const llvm::GlobalValue *))(**(_QWORD **)(v3 + 272) + 304))(*(_QWORD *)(v3 + 272), result);
LABEL_46:
    if (a2 && *((_BYTE *)a2 + 16) == 3)
    {
      if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
        return result;
    }
    else if (!*((_BYTE *)a2 + 16)
           && *((llvm::GlobalValue **)a2 + 9) == (llvm::GlobalValue *)((char *)a2 + 72)
           && (*((_BYTE *)a2 + 34) & 0x80) == 0)
    {
      return result;
    }
    v28 = *(_DWORD *)(v23 + 8);
    if ((v28 & 2) != 0)
    {
      if ((*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
      {
        *(_QWORD *)(v23 + 24) = 0;
        v28 &= 0xFFFFE3FF;
      }
      v29 = *(_QWORD *)v23 & 7;
      *(_QWORD *)v23 = v29;
      v28 &= ~2u;
      *(_DWORD *)(v23 + 8) = v28;
    }
    else
    {
      v29 = *(_QWORD *)v23;
    }
    v30 = v29 & 0xFFFFFFFFFFFFFFF8;
    if ((v28 & 0x1C00) == 0x800 && !v30)
    {
      *(_DWORD *)(v23 + 8) = v28 | 4;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
      v29 = *(_QWORD *)v23 & 7 | v70;
      *(_QWORD *)v23 = v29;
      if (!v70)
      {
LABEL_61:
        if ((*(_DWORD *)(v23 + 8) & 0x1C00) != 0x800)
          goto LABEL_62;
      }
    }
    else if (!v30)
    {
      goto LABEL_61;
    }
    v71 = *(_QWORD *)(v3 + 264);
    if ((v29 & 4) != 0)
    {
      v74 = *(uint64_t **)(v23 - 8);
      v75 = *v74;
      v72 = v74 + 2;
      v73 = v75;
    }
    else
    {
      v72 = 0;
      v73 = 0;
    }
    v132[0] = "symbol '";
    v132[2] = v72;
    v132[3] = v73;
    v133 = 1283;
    v134[0] = (uint64_t)v132;
    v135 = "' is already defined";
    v136 = 770;
    llvm::MCContext::reportError(v71, 0, (uint64_t)v134);
LABEL_62:
    if (*(_BYTE *)(*(_QWORD *)(v3 + 256) + 363))
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 272) + 304))(*(_QWORD *)(v3 + 272), v23, 4);
    KindForGlobal = llvm::TargetLoweringObjectFile::getKindForGlobal(a2, *(const llvm::GlobalObject **)(v3 + 248), v22);
    v32 = (llvm::DataLayout *)(*((_QWORD *)a2 + 5) + 272);
    v33 = *((_QWORD *)a2 + 3);
    sub_1C4768AD0((uint64_t)v32, v33);
    v35 = (unint64_t)(v34 + 7) >> 3;
    v37 = v36 == 1;
    llvm::DataLayout::getAlignment((uint64_t)v32, v33);
    v40 = ((1 << v39) + v35 - 1) & -(1 << v39);
    if (v37)
    v41 = KindForGlobal;
    v42 = sub_1C5FEAE40((uint64_t)a2, v32, 0);
    v43 = *(uint64_t **)(v3 + 528);
    v44 = *(uint64_t **)(v3 + 536);
    while (v43 != v44)
    {
      v45 = *v43;
      v43 += 9;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v45 + 16))(v45, v23, v40);
    }
    if (KindForGlobal == 18)
      goto LABEL_70;
    v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 248) + 24))(*(_QWORD *)(v3 + 248));
    v48 = llvm::TargetLoweringObjectFile::SectionForGlobal(v47, (uint64_t)a2, KindForGlobal, *(_QWORD *)(v3 + 248));
    v49 = v48;
    if (KindForGlobal - 15 > 2)
    {
      if (KindForGlobal - 12 <= 2 && *(_BYTE *)(*(_QWORD *)(v3 + 256) + 20))
      {
        v50 = *(_QWORD *)(v3 + 264);
        if ((*(_BYTE *)v23 & 4) != 0)
        {
          v76 = *(uint64_t **)(v23 - 8);
          v77 = *v76;
          v51 = (uint64_t)(v76 + 2);
          v52 = v77;
        }
        else
        {
          v51 = 0;
          v52 = 0;
        }
        v134[0] = v51;
        v134[1] = v52;
        v135 = "$tlv$init";
        v136 = 773;
        v78 = (const llvm::MCSymbol *)llvm::MCContext::getOrCreateSymbol(v50, (uint64_t)v134);
        if ((v41 & 0xFFFFFFFD) == 0xC)
        {
          v79 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 248) + 24))(*(_QWORD *)(v3 + 248));
          (*(void (**)(_QWORD, _QWORD, const llvm::MCSymbol *, unint64_t, uint64_t))(**(_QWORD **)(v3 + 272) + 480))(*(_QWORD *)(v3 + 272), *(_QWORD *)(v79 + 424), v78, v40, 1 << v42);
        }
        else if (v41 == 13)
        {
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v3 + 272) + 168))(*(_QWORD *)(v3 + 272), v49, 0);
          sub_1C5FECEF4((_QWORD *)v3, v42, a2, 0);
          (*(void (**)(_QWORD, const llvm::MCSymbol *, _QWORD))(**(_QWORD **)(v3 + 272) + 192))(*(_QWORD *)(v3 + 272), v78, 0);
          sub_1C5FECFD0(v3, *((_QWORD *)a2 + 5) + 272, *((uint64_t **)a2 - 4));
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 272) + 152))(*(_QWORD *)(v3 + 272));
        v80 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 248) + 24))(*(_QWORD *)(v3 + 248));
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v3 + 272) + 168))(*(_QWORD *)(v3 + 272), *(_QWORD *)(v80 + 408), 0);
        (*(void (**)(uint64_t, llvm::GlobalValue *, uint64_t))(*(_QWORD *)v3 + 432))(v3, a2, v23);
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v3 + 272) + 192))(*(_QWORD *)(v3 + 272), v23, 0);
        v81 = llvm::DataLayout::getPointerTypeSizeInBits((uint64_t)v32, *(_QWORD *)a2) >> 3;
        v82 = *(llvm::MCStreamer **)(v3 + 272);
        v83 = (const llvm::MCSymbol *)sub_1C63BC770(v3, "_tlv_bootstrap", 14);
        llvm::MCStreamer::emitSymbolValue(v82, v83, v81, 0);
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v3 + 272) + 512))(*(_QWORD *)(v3 + 272), 0, v81);
        llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(v3 + 272), v78, v81, 0);
        return (const llvm::GlobalValue *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 272) + 152))(*(_QWORD *)(v3 + 272));
      }
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)(v3 + 256) + 19)
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48))
      {
        if (v40 <= 1)
          v40 = 1;
        (*(void (**)(uint64_t, llvm::GlobalValue *, uint64_t))(*(_QWORD *)v3 + 432))(v3, a2, v23);
        return (const llvm::GlobalValue *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD))(**(_QWORD **)(v3 + 272) + 472))(*(_QWORD *)(v3 + 272), v49, v23, v40, 1 << v42, 0);
      }
      if (KindForGlobal == 16
        && *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 248) + 24))(*(_QWORD *)(v3 + 248)) + 40) == v49)
      {
        v59 = *(_QWORD *)(v3 + 272);
        if (*(_DWORD *)(*(_QWORD *)(v3 + 256) + 356))
        {
          v46 = *(uint64_t (**)(void))(*(_QWORD *)v59 + 464);
          return (const llvm::GlobalValue *)v46();
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v59 + 304))(v59, v23, 16);
LABEL_70:
        (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 248) + 24))(*(_QWORD *)(v3 + 248));
        v46 = *(uint64_t (**)(void))(**(_QWORD **)(v3 + 272) + 456);
        return (const llvm::GlobalValue *)v46();
      }
    }
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v3 + 272) + 168))(*(_QWORD *)(v3 + 272), v49, 0);
    (*(void (**)(uint64_t, llvm::GlobalValue *, uint64_t))(*(_QWORD *)v3 + 432))(v3, a2, v23);
    sub_1C5FECEF4((_QWORD *)v3, v42, a2, 0);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v3 + 272) + 192))(*(_QWORD *)(v3 + 272), v23, 0);
    v53 = sub_1C5FEC158(v3, a2);
    if (v53 != v23)
      (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v3 + 272) + 192))(*(_QWORD *)(v3 + 272), v53, 0);
    sub_1C5FECFD0(v3, *((_QWORD *)a2 + 5) + 272, *((uint64_t **)a2 - 4));
    if (*(_BYTE *)(*(_QWORD *)(v3 + 256) + 363))
    {
      v54 = *(_QWORD *)(v3 + 272);
      v55 = sub_1C484358C(*(_QWORD *)(v3 + 264) + 192, 24, 3);
      *(_BYTE *)v55 = 1;
      *(_DWORD *)(v55 + 1) = *(unsigned __int8 *)(v55 + 4) << 24;
      *(_QWORD *)(v55 + 8) = 0;
      *(_QWORD *)(v55 + 16) = v40;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v54 + 424))(v54, v23, v55);
    }
    return (const llvm::GlobalValue *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 272) + 152))(*(_QWORD *)(v3 + 272));
  }
  return result;
}

uint64_t sub_1C5FECEF4(_QWORD *a1, uint64_t a2, llvm::GlobalVariable *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (a3)
    result = sub_1C5FEAE40((uint64_t)a3, (llvm::DataLayout *)(*((_QWORD *)a3 + 5) + 272), a2);
  else
    result = a2;
  if ((_BYTE)result)
  {
    v7 = result;
    v8 = a1[34];
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 112) + 32 * *(unsigned int *)(v8 + 120) - 32) + 220) & 0xFE) == 2)
    {
      v9 = a1[35];
      if (v9)
        v10 = (_QWORD *)(v9 + 16);
      else
        v10 = (_QWORD *)(a1[31] + 584);
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 640))(v8, 1 << v7, *v10, a4);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v8 + 632))(v8, 1 << v7, 0, 1, a4);
    }
  }
  return result;
}

void sub_1C5FECFD0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  const char *v11;
  char v12;
  uint64_t v13;

  v6 = *a3;
  sub_1C4768AD0(a2, *a3);
  v8 = (unint64_t)(v7 + 7) >> 3;
  v10 = v9 == 1;
  llvm::DataLayout::getAlignment(a2, v6);
  v13 = ((1 << v12) + v8 - 1) & -(1 << v12);
  if (v10)
  if (v13)
  {
    sub_1C5FF50E8(a2, a3, a1, 0, 0);
  }
  else if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 18))
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 512))(*(_QWORD *)(a1 + 272), 0, 1);
  }
}

void sub_1C5FED0D0(uint64_t a1)
{
  uint64_t v2;
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t *v17;
  int v18;
  _BOOL8 v19;
  uint64_t *v20;
  size_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  const llvm::TargetMachine *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int KindForGlobal;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t LinkerPrivateTempSymbol;
  int v34;
  uint64_t v35;
  int v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  int i;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  BOOL v53;
  BOOL v54;
  unint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  int v74;
  int j;
  unsigned int v76;
  uint64_t v77;
  _QWORD *v78;
  BOOL v79;
  unint64_t v81;
  unint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  BOOL v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t TempSymbol;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  llvm::raw_ostream *v105;
  llvm::raw_ostream *v106;
  _BYTE *v107;
  __n128 v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  int v119;
  unint64_t v120;
  int v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  _QWORD v125[4];
  __int16 v126;

  v2 = **(_QWORD **)(a1 + 280);
  if (!*(_BYTE *)(a1 + 504))
    goto LABEL_24;
  v3 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 120))(*(_QWORD *)(a1 + 272));
  v4 = v3;
  v5 = *((_QWORD *)v3 + 4);
  if ((unint64_t)(*((_QWORD *)v3 + 3) - v5) > 0x11)
  {
    *(_WORD *)(v5 + 16) = 8302;
    *(_OWORD *)v5 = *(_OWORD *)"-- Begin function ";
    *((_QWORD *)v3 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(v3, "-- Begin function ", 0x12uLL);
  }
  if ((*(_BYTE *)(v2 + 23) & 0x10) == 0)
    goto LABEL_18;
  v6 = ***(_QWORD ***)v2;
  v7 = *(_QWORD *)(v6 + 152);
  v8 = *(unsigned int *)(v6 + 168);
  if (!(_DWORD)v8)
    goto LABEL_11;
  LODWORD(v9) = (v8 - 1) & ((v2 >> 4) ^ (v2 >> 9));
  v10 = (uint64_t *)(v7 + 16 * v9);
  v11 = *v10;
  if (*v10 != v2)
  {
    v12 = 1;
    while (v11 != -4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v11 = *(_QWORD *)(v7 + 16 * v9);
      if (v11 == v2)
      {
        v10 = (uint64_t *)(v7 + 16 * v9);
        goto LABEL_12;
      }
    }
LABEL_11:
    v10 = (uint64_t *)(v7 + 16 * v8);
  }
LABEL_12:
  v14 = (uint64_t *)v10[1];
  v15 = *v14;
  v16 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (!*v14)
    goto LABEL_21;
  v18 = *((unsigned __int8 *)v14 + 16);
  v17 = v14 + 2;
  v19 = v18 == 1;
  if (v18 == 1)
    v20 = (uint64_t *)((char *)v17 + 1);
  else
    v20 = v17;
  v21 = v15 - v19;
  if ((unint64_t)(v15 - v19) <= *((_QWORD *)v4 + 3) - (_QWORD)v16)
  {
    if (v21)
    {
      memcpy(v16, v20, v21);
      v16 = (_BYTE *)(*((_QWORD *)v4 + 4) + v21);
      *((_QWORD *)v4 + 4) = v16;
    }
    goto LABEL_21;
  }
  llvm::raw_ostream::write(v4, (const char *)v20, v21);
LABEL_18:
  v16 = (_BYTE *)*((_QWORD *)v4 + 4);
LABEL_21:
  if ((unint64_t)v16 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 10);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v16 + 1;
    *v16 = 10;
  }
LABEL_24:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  v22 = *(_QWORD *)(a1 + 280);
  v23 = *(unsigned __int8 *)(*(_QWORD *)(v22 + 328) + 200);
  v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248));
  v26 = v24;
  v27 = *(_QWORD *)(a1 + 248);
  if (v23)
  {
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 72))(v24, v2, *(_QWORD *)(a1 + 248));
  }
  else
  {
    KindForGlobal = llvm::TargetLoweringObjectFile::getKindForGlobal((llvm::TargetLoweringObjectFile *)v2, *(const llvm::GlobalObject **)(a1 + 248), v25);
    v28 = llvm::TargetLoweringObjectFile::SectionForGlobal(v26, v2, KindForGlobal, v27);
  }
  *(_QWORD *)(v22 + 80) = v28;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 272) + 168))(*(_QWORD *)(a1 + 272), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 80), 0);
  v30 = *(_QWORD *)(a1 + 256);
  if (!*(_BYTE *)(v30 + 23))
  {
    v36 = (*(_DWORD *)(v2 + 32) >> 4) & 3;
    if (v36 == 2)
    {
      v37 = (_DWORD *)(v30 + 404);
    }
    else
    {
      if (v36 != 1)
        goto LABEL_28;
      v37 = (_DWORD *)(v30 + 396);
    }
    if (*v37)
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 272) + 304))(*(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 328));
      v30 = *(_QWORD *)(a1 + 256);
    }
  }
LABEL_28:
  if (*(_BYTE *)(v30 + 476))
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 432))(a1, v2, *(_QWORD *)(a1 + 336));
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 432))(a1, v2, *(_QWORD *)(a1 + 328));
  v31 = *(_QWORD *)(a1 + 256);
  if (*(_BYTE *)(v31 + 362))
  {
    sub_1C5FECEF4((_QWORD *)a1, *(unsigned __int8 *)(*(_QWORD *)(a1 + 280) + 352), (llvm::GlobalVariable *)v2, 0);
    v31 = *(_QWORD *)(a1 + 256);
  }
  if (*(_BYTE *)(v31 + 363))
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 304))(*(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 328), 2);
  v32 = *(_QWORD *)(v2 + 112);
  if (v32 && (*(_BYTE *)(v32 + 12) & 0x20) != 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 304))(*(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 328), 1);
  if (*(_BYTE *)(a1 + 504))
  {
    v105 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 120))(*(_QWORD *)(a1 + 272));
    llvm::Value::printAsOperand((llvm::Value *)v2, v105, 0, *(const llvm::Module **)(v2 + 40));
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 448))(a1);
    v106 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 120))(*(_QWORD *)(a1 + 272));
    v107 = (_BYTE *)*((_QWORD *)v106 + 4);
    if ((unint64_t)v107 >= *((_QWORD *)v106 + 3))
    {
      llvm::raw_ostream::write(v106, 10);
    }
    else
    {
      *((_QWORD *)v106 + 4) = v107 + 1;
      *v107 = 10;
    }
  }
  if ((*(_WORD *)(v2 + 18) & 2) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 18))
    {
      LinkerPrivateTempSymbol = llvm::MCContext::createLinkerPrivateTempSymbol(*(llvm::MCContext **)(a1 + 264));
      (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272), LinkerPrivateTempSymbol, 0);
      v34 = *(_DWORD *)(v2 + 20);
      if ((v34 & 0x40000000) != 0)
        v35 = *(_QWORD *)(v2 - 8);
      else
        v35 = v2 - 32 * (v34 & 0x7FFFFFF);
      sub_1C5FECFD0(a1, *(_QWORD *)(v2 + 40) + 272, *(uint64_t **)(v35 + 32));
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 304))(*(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 328), 19);
    }
    else
    {
      v38 = *(_DWORD *)(v2 + 20);
      if ((v38 & 0x40000000) != 0)
        v39 = *(_QWORD *)(v2 - 8);
      else
        v39 = v2 - 32 * (v38 & 0x7FFFFFF);
      sub_1C5FECFD0(a1, *(_QWORD *)(v2 + 40) + 272, *(uint64_t **)(v39 + 32));
    }
  }
  v40 = *(_QWORD *)(v2 + 112);
  if (!v40)
    goto LABEL_139;
  if (!*(_DWORD *)(v40 + 8))
  {
LABEL_87:
    v41 = 0;
    goto LABEL_88;
  }
  v41 = *(_QWORD *)(v40 + 40);
  if (!v41)
    goto LABEL_88;
  LODWORD(v42) = *(_DWORD *)(v41 + 40);
  if (!(_DWORD)v42)
  {
LABEL_160:
    v41 = 0;
    goto LABEL_89;
  }
  v43 = *(_QWORD *)(v41 + 24);
  v44 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v44 & 1) == 0)
  {
    v114 = v42;
    v115 = __cxa_guard_acquire(&qword_1ED7EAC88);
    LODWORD(v42) = v114;
    if (v115)
    {
      v116 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v116 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v116;
      __cxa_guard_release(&qword_1ED7EAC88);
      LODWORD(v42) = v114;
    }
  }
  v45 = __ROR8__(qword_1ED7EAC80 ^ 0xA78AF1B51BD984F2, 30);
  v46 = 0x9DDFEA08EB382D69
      * ((qword_1ED7EAC80 + 0xBA5F5326B54B2D6) ^ ((0x9DDFEA08EB382D69
                                                   * ((v45 - 0x2BFCB67E25672AFALL) ^ (qword_1ED7EAC80
                                                                                    + 0xBA5F5326B54B2D6))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v45 - 0x2BFCB67E25672AFALL) ^ (qword_1ED7EAC80 + 0xBA5F5326B54B2D6))));
  v47 = -348639895 * ((v46 >> 47) ^ v46);
  v48 = v42 - 1;
  for (i = 1; ; ++i)
  {
    v50 = v47 & v48;
    v51 = (uint64_t *)(v43 + 24 * v50);
    v52 = *v51;
    if (*v51 == -1)
    {
      if ("patchable-function-prefix" == (char *)-1)
        goto LABEL_74;
      goto LABEL_57;
    }
    if (v52 != -2)
      break;
    if ("patchable-function-prefix" == (char *)-2)
      goto LABEL_74;
LABEL_57:
    if (v52 == -1)
      goto LABEL_87;
    v47 = i + v50;
  }
  if (v51[1] != 25)
    goto LABEL_57;
  v53 = *(_QWORD *)v52 == 0x6C62616863746170 && *(_QWORD *)(v52 + 8) == 0x6974636E75662D65;
  v54 = v53 && *(_QWORD *)(v52 + 16) == 0x69666572702D6E6FLL;
  if (!v54 || *(_BYTE *)(v52 + 24) != 120)
    goto LABEL_57;
LABEL_74:
  v41 = v51[2];
  if (!v41)
  {
LABEL_88:
    LOBYTE(v42) = 0;
LABEL_89:
    v63 = 1;
    goto LABEL_90;
  }
  v42 = *(unsigned int *)(v41 + 16);
  if (!(_DWORD)v42)
    goto LABEL_160;
  v56 = 0;
  v57 = (unsigned __int8 *)(*(unsigned int *)(v41 + 12) + v41 + 25);
  v58 = *(unsigned int *)(v41 + 16);
  while (1)
  {
    v60 = *v57++;
    v59 = v60;
    if ((v60 - 48) < 0xA)
    {
      v61 = -48;
      goto LABEL_79;
    }
    if ((v59 - 97) < 0x1A)
    {
      v61 = -87;
      goto LABEL_79;
    }
    if ((v59 - 65) > 0x19)
      break;
    v61 = -55;
LABEL_79:
    v62 = v61 + v59;
    if (v62 > 9)
      break;
    v41 = 10 * v56 + v62;
    if (v56 > v41 / 0xA)
    {
      LOBYTE(v42) = 1;
      goto LABEL_89;
    }
    v56 = v41;
    if (!--v58)
      goto LABEL_183;
  }
  v41 = v56;
LABEL_183:
  v63 = v58 == v42;
  LOBYTE(v42) = v58 != 0;
LABEL_90:
  v64 = *(_QWORD *)(v2 + 112);
  v65 = v42 | v63;
  if (v41 >= 0x100000000)
    v66 = 0;
  else
    v66 = v41;
  if (!v64)
    goto LABEL_128;
  LODWORD(v67) = *(_DWORD *)(v64 + 8);
  if (!(_DWORD)v67)
    goto LABEL_170;
  v67 = *(_QWORD *)(v64 + 40);
  if (!v67)
    goto LABEL_170;
  v68 = *(_DWORD *)(v67 + 40);
  if (!v68)
  {
LABEL_128:
    v81 = 0;
LABEL_129:
    LOBYTE(v67) = 0;
LABEL_130:
    v89 = 1;
    goto LABEL_131;
  }
  v69 = *(_QWORD *)(v67 + 24);
  v70 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v70 & 1) == 0)
  {
    v117 = v65;
    v118 = v69;
    v121 = v68;
    v119 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v68 = v121;
    v69 = v118;
    v65 = v117;
    if (v119)
    {
      v120 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v120 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v120;
      __cxa_guard_release(&qword_1ED7EAC88);
      v68 = v121;
      v69 = v118;
      v65 = v117;
    }
  }
  v71 = __ROR8__(qword_1ED7EAC80 ^ 0xD0DB31C61410D441, 30);
  v72 = 0x9DDFEA08EB382D69
      * ((qword_1ED7EAC80 - 0x1DAA4ADE8CE29C7ALL) ^ ((0x9DDFEA08EB382D69
                                                    * ((v71 - 0x447750EBFF2F1972) ^ (qword_1ED7EAC80
                                                                                     - 0x1DAA4ADE8CE29C7ALL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v71 - 0x447750EBFF2F1972) ^ (qword_1ED7EAC80 - 0x1DAA4ADE8CE29C7ALL))));
  v73 = -348639895 * ((v72 >> 47) ^ v72);
  v74 = v68 - 1;
  for (j = 1; ; ++j)
  {
    v76 = v73 & v74;
    v77 = v69 + 24 * v76;
    v78 = *(_QWORD **)v77;
    if (*(_QWORD *)v77 == -1)
    {
      if ("patchable-function-entry" == (char *)-1)
        goto LABEL_115;
      goto LABEL_101;
    }
    if (v78 != (_QWORD *)-2)
      break;
    if ("patchable-function-entry" == (char *)-2)
      goto LABEL_115;
LABEL_101:
    if (v78 == (_QWORD *)-1)
      goto LABEL_128;
    v73 = j + v76;
  }
  if (*(_QWORD *)(v77 + 8) != 24)
    goto LABEL_101;
  v79 = *v78 == 0x6C62616863746170 && v78[1] == 0x6974636E75662D65;
  if (!v79 || v78[2] != 0x7972746E652D6E6FLL)
    goto LABEL_101;
LABEL_115:
  v81 = *(_QWORD *)(v77 + 16);
  if (!v81)
    goto LABEL_129;
  v67 = *(unsigned int *)(v81 + 16);
  if (!(_DWORD)v67)
  {
LABEL_170:
    v81 = 0;
    goto LABEL_130;
  }
  v82 = 0;
  v83 = (unsigned __int8 *)(*(unsigned int *)(v81 + 12) + v81 + 25);
  v84 = *(unsigned int *)(v81 + 16);
  while (1)
  {
    v86 = *v83++;
    v85 = v86;
    if ((v86 - 48) < 0xA)
    {
      v87 = -48;
      goto LABEL_120;
    }
    if ((v85 - 97) < 0x1A)
    {
      v87 = -87;
      goto LABEL_120;
    }
    if ((v85 - 65) > 0x19)
      break;
    v87 = -55;
LABEL_120:
    v88 = v87 + v85;
    if (v88 > 9)
      break;
    v81 = 10 * v82 + v88;
    if (v82 > v81 / 0xA)
    {
      LOBYTE(v67) = 1;
      goto LABEL_130;
    }
    v82 = v81;
    if (!--v84)
      goto LABEL_186;
  }
  v81 = v82;
LABEL_186:
  v89 = v84 == v67;
  LOBYTE(v67) = v84 != 0;
LABEL_131:
  if (!v66)
    v65 = 1;
  if ((v65 & 1) != 0)
  {
    if (v81 >= 0x100000000)
      LODWORD(v81) = 0;
    if (((v67 | v89) & 1) == 0 && (_DWORD)v81)
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 520);
  }
  else
  {
    v113 = llvm::MCContext::createLinkerPrivateTempSymbol(*(llvm::MCContext **)(a1 + 264));
    *(_QWORD *)(a1 + 320) = v113;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272), v113, 0);
    sub_1C63BC84C(a1, v66);
  }
LABEL_139:
  if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 476))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  v90 = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v91 = *(_QWORD *)(a1 + 488);
  if (v91)
  {
    v108.n128_u64[0] = (unint64_t)sub_1C63BC2B4(v91, v2, (uint64_t *)&v122);
    v90 = v122;
    v109 = v123;
    if (v122 != v123)
    {
      v110 = v122;
      do
      {
        v111 = *v110++;
        v112 = *(_QWORD *)(a1 + 272);
        v125[0] = "Address taken block that was later removed";
        v126 = 259;
        (*(void (**)(uint64_t, _QWORD *, uint64_t, __n128))(*(_QWORD *)v112 + 112))(v112, v125, 1, v108);
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272), v111, 0);
      }
      while (v110 != v109);
    }
  }
  v92 = *(_QWORD *)(a1 + 520);
  if (v92)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 81))
    {
      v93 = *(_QWORD *)(a1 + 264);
      v125[0] = "tmp";
      v126 = 259;
      TempSymbol = llvm::MCContext::createTempSymbol(v93, (uint64_t)v125, 1);
      (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272), TempSymbol, 0);
      v95 = *(_QWORD *)(a1 + 520);
      v97 = *(_QWORD *)(a1 + 264);
      v96 = *(_QWORD *)(a1 + 272);
      v98 = sub_1C484358C(v97 + 192, 24, 3);
      v99 = *(unsigned __int8 *)(*(_QWORD *)(v97 + 152) + 18) << 16;
      *(_BYTE *)v98 = 2;
      *(_DWORD *)(v98 + 1) = v99 | (*(unsigned __int8 *)(v98 + 4) << 24);
      *(_QWORD *)(v98 + 8) = 0;
      *(_QWORD *)(v98 + 16) = TempSymbol;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v96 + 280))(v96, v95, v98);
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272), v92, 0);
    }
  }
  v100 = *(uint64_t **)(a1 + 528);
  v101 = *(uint64_t **)(a1 + 536);
  while (v100 != v101)
  {
    v102 = *v100;
    v100 += 9;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v102 + 40))(v102, *(_QWORD *)(a1 + 280));
  }
  if ((*(_WORD *)(v2 + 18) & 4) != 0)
  {
    v103 = *(_DWORD *)(v2 + 20);
    if ((v103 & 0x40000000) != 0)
      v104 = *(_QWORD *)(v2 - 8);
    else
      v104 = v2 - 32 * (v103 & 0x7FFFFFF);
    sub_1C5FECFD0(a1, *(_QWORD *)(v2 + 40) + 272, *(uint64_t **)(v104 + 64));
  }
  if (v90)
    operator delete(v90);
}

unint64_t sub_1C5FEDC84(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unint64_t result;
  uint64_t v5;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12[5];
  _BYTE v13[40];

  v2 = *(_QWORD *)(a1 + 328);
  v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 2) != 0)
  {
    if ((*(_DWORD *)(v2 + 8) & 0x1C00) == 0x800)
    {
      *(_QWORD *)(v2 + 24) = 0;
      v3 &= 0xFFFFE3FF;
    }
    *(_QWORD *)v2 &= 7uLL;
    *(_DWORD *)(v2 + 8) = v3 & 0xFFFFFFFD;
    v2 = *(_QWORD *)(a1 + 328);
    v3 = *(_DWORD *)(v2 + 8);
  }
  if ((v3 & 0x1C00) == 0x800)
  {
    v10 = "'";
    v11 = 259;
    v9 = 261;
    v8[0] = sub_1C62B94EC((_BYTE *)v2);
    v8[1] = v5;
    sub_1C6131AAC((uint64_t *)&v10, v8, (uint64_t)v12);
    v6 = "' is a protected alias";
    v7 = 259;
    sub_1C6131AAC(v12, (uint64_t *)&v6, (uint64_t)v13);
    llvm::report_fatal_error((uint64_t)v13, 1);
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272));
  if (*(_DWORD *)(*(_QWORD *)(a1 + 248) + 492) == 3)
  {
    result = sub_1C5FEC158(a1, **(llvm::GlobalValue ***)(a1 + 280));
    if (result != *(_QWORD *)(a1 + 328))
      return (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272), result, 0);
  }
  return result;
}

uint64_t sub_1C5FEDDBC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *a2;
  v3 = *(_DWORD *)(*a2 + 32);
  if ((v3 & 0xF) == 1)
    return 0;
  if (*(_BYTE *)(v2 + 16) == 3)
  {
    if ((*(_DWORD *)(v2 + 20) & 0x7FFFFFF) == 0)
      return 0;
  }
  else if (!*(_BYTE *)(v2 + 16) && (v3 & 0x800000) == 0 && *(_QWORD *)(v2 + 72) == v2 + 72)
  {
    return 0;
  }
  v5 = a1[32];
  if (!*(_BYTE *)(v5 + 409) && *(_DWORD *)(v5 + 412) == 1)
  {
    v7 = *a2;
    v8 = a1;
    v6 = v2 + 112;
    if (llvm::AttributeList::getUWTableKind((llvm::AttributeList *)(v2 + 112)))
      return 1;
    if (!*(_QWORD *)v6)
      return 1;
    if ((*(_BYTE *)(*(_QWORD *)v6 + 16) & 0x20) == 0)
      return 1;
    a1 = v8;
    if ((*(_WORD *)(v7 + 18) & 8) != 0)
      return 1;
  }
  if (*(_BYTE *)(a1[36] + 2108))
    return 2;
  return (*(unsigned __int16 *)(a1[31] + 1064) >> 3) & 2;
}

void sub_1C5FEDEA0(uint64_t a1)
{
  uint64_t AnalysisPass;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned __int8 v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  unint64_t v17;
  int *v18;
  BOOL v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  uint64_t v25;
  const llvm::TargetInstrInfo *v26;
  uint64_t RestoreSize;
  void *v28;
  llvm::raw_ostream *v29;
  const char *v30;
  size_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t *v36;
  const void *v37;
  size_t v38;
  size_t v39;
  std::string *v40;
  uint64_t v41;
  unsigned __int8 *j;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  _BYTE *v58;
  const char *v59;
  size_t v60;
  int v61;
  uint64_t v62;
  std::string *v63;
  void (**v64)(void);
  uint64_t v65;
  const std::error_category *v66;
  void *v67;
  uint64_t v68;
  uint64_t FoldedRestoreSize;
  void *v70;
  uint64_t v71;
  size_t *v72;
  const void *v73;
  size_t v74;
  size_t v75;
  std::string *v76;
  uint64_t v77;
  uint64_t i;
  unsigned __int16 *v79;
  int v80;
  BOOL v82;
  uint64_t SpillSize;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  size_t *v89;
  const void *v90;
  size_t v91;
  size_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t *v96;
  uint64_t *v97;
  char v98;
  size_t v99;
  const char *v100;
  size_t v101;
  const char *v102;
  size_t v103;
  unint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t FoldedSpillSize;
  void *v109;
  uint64_t v110;
  size_t *v111;
  const void *v112;
  size_t v113;
  size_t v114;
  uint64_t v115;
  const std::error_category *v116;
  void *v117;
  unint64_t v118;
  int *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  std::string::size_type v128;
  unint64_t *v129;
  uint64_t v130;
  unint64_t *v131;
  uint64_t v132;
  unint64_t EndSymbol;
  unint64_t *v134;
  char *v135;
  size_t *v136;
  unint64_t *v137;
  unint64_t v138;
  char *v139;
  uint64_t ***v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t ****v145;
  uint64_t ***v146;
  int v147;
  int v148;
  size_t v149;
  char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t ***v163;
  size_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  char v171;
  const std::error_category **p_cat;
  uint64_t **v173;
  void **v174;
  std::string::size_type v175;
  uint64_t v176;
  char *v177;
  unint64_t v178;
  void **v179;
  uint64_t ***v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  unsigned int v185;
  uint64_t ****v186;
  uint64_t ***v187;
  uint64_t ****v188;
  int v189;
  BOOL v190;
  unsigned int v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  _QWORD *v207;
  unint64_t v208;
  uint64_t v209;
  const llvm::Value *v210;
  unint64_t TempSymbol;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  int v219;
  unint64_t v220;
  uint64_t *v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t *v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t ****v231;
  uint64_t ***v232;
  uint64_t ***v233;
  uint64_t **v234;
  uint64_t **v235;
  llvm::raw_ostream *v236;
  uint64_t **v237;
  uint64_t **v238;
  uint64_t *v239;
  uint64_t *v240;
  char v241;
  uint64_t **v242;
  size_t v243;
  size_t v244;
  void *v245;
  uint64_t ***v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  int v250;
  unsigned int v251;
  uint64_t ****v252;
  uint64_t ***v253;
  uint64_t ****v254;
  int v255;
  BOOL v256;
  unsigned int v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  llvm::raw_ostream *v262;
  _BYTE *v263;
  llvm::MCObjectFileInfo *v264;
  unint64_t BBAddrMapSection;
  const llvm::MCSymbol *v266;
  __n128 v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t k;
  unint64_t Symbol;
  unint64_t v273;
  llvm::MCStreamer *v274;
  uint64_t v275;
  unsigned int v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _BOOL8 v280;
  llvm::MachineDominatorTree *v281;
  uint64_t v282;
  uint64_t v283;
  llvm::MachineLoopInfo *v284;
  llvm::MachineLoopInfo *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char v291;
  int v292;
  uint64_t **v293;
  uint64_t v294;
  uint64_t v295;
  llvm *v296;
  llvm::raw_ostream *v297;
  llvm::raw_ostream *v298;
  void *v299;
  std::string *v300;
  size_t size;
  uint64_t ****v302;
  uint64_t ***v303;
  llvm::raw_ostream *v304;
  _BYTE *v305;
  uint64_t ***v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t ****v311;
  uint64_t ***v312;
  int v313;
  int v314;
  size_t *v315;
  const void *v316;
  size_t v317;
  size_t v318;
  _BYTE *v319;
  _BYTE *v320;
  llvm::raw_ostream *v321;
  uint64_t v322;
  unint64_t v323;
  const char *v324;
  size_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  int v330;
  uint64_t v331;
  unsigned __int8 v332;
  uint64_t v333;
  unint64_t v334;
  unsigned int v335;
  int m;
  unsigned int v337;
  uint64_t *v338;
  uint64_t v339;
  BOOL v340;
  BOOL v341;
  unint64_t v343;
  unsigned __int8 *v344;
  uint64_t v345;
  int v346;
  int v347;
  int v348;
  unsigned int v349;
  BOOL v350;
  uint64_t v351;
  char v352;
  int v353;
  int v354;
  uint64_t v355;
  unsigned __int8 v356;
  uint64_t v357;
  unint64_t v358;
  unsigned int v359;
  int n;
  unsigned int v361;
  uint64_t v362;
  _QWORD *v363;
  BOOL v364;
  uint64_t v366;
  unint64_t v367;
  unsigned __int8 *v368;
  uint64_t v369;
  int v370;
  int v371;
  int v372;
  unsigned int v373;
  _BOOL4 v374;
  int v375;
  char v376;
  int v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  _QWORD **v381;
  _QWORD *v382;
  const std::error_category *v383;
  const std::error_category *v384;
  int v385;
  int v386;
  _BYTE *v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t ELFSection;
  llvm::raw_ostream *v391;
  _OWORD *v392;
  char *v393;
  unint64_t v394;
  void **v395;
  uint64_t v396;
  uint64_t ****v397;
  std::string::size_type v398;
  uint64_t v399;
  unint64_t v400;
  unint64_t v401;
  llvm::MCObjectFileInfo *v402;
  unint64_t StackSizesSection;
  uint64_t v404;
  unint64_t v405;
  __n128 v406;
  const llvm::MCSymbol *v407;
  unint64_t v408;
  llvm::MCStreamer *v409;
  unint64_t PointerSize;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  llvm::MachineBasicBlock *v416;
  int v417;
  _QWORD *v418;
  void *v419[2];
  char v420;
  void *v421;
  char v422;
  std::string v423;
  void *v424;
  char v425;
  _QWORD v426[4];
  uint64_t *v427[4];
  __int16 v428;
  void *v429[2];
  char v430;
  void *v431[2];
  char v432;
  void *__p;
  char v434;
  unint64_t *v435;
  uint64_t v436;
  unsigned int v437;
  void *v438;
  __int128 v439;
  unint64_t v440;
  void *__dst;
  const char *v442;
  const char *v443;
  uint64_t v444;
  std::error_code *v445;
  char v446;
  void *v447;
  uint64_t v448;
  _BYTE v449[260];
  int v450;
  uint64_t v451;
  std::string v452;
  std::string *v453;
  void *v454;
  const char *v455;
  const char *v456;
  uint64_t v457;
  void **v458;
  char v459;
  void *v460;
  uint64_t v461;
  _BYTE v462[260];
  int v463;
  llvm::MachineBasicBlock *v464;
  std::error_code v465;
  uint64_t v466;
  uint64_t v467;
  __int16 v468;
  uint64_t v469;

  v469 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
  if (!*(_BYTE *)(a1 + 504))
    goto LABEL_6;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::MachineDominatorTree::ID, 1);
  if (!AnalysisPass)
  {
    v4 = a1 + 296;
    *(_QWORD *)(a1 + 296) = 0;
    goto LABEL_448;
  }
  v3 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineDominatorTree::ID);
  v4 = a1 + 296;
  *(_QWORD *)(a1 + 296) = v3;
  if (!v3)
  {
LABEL_448:
    v281 = (llvm::MachineDominatorTree *)operator new();
    llvm::MachineDominatorTree::MachineDominatorTree(v281);
    v282 = *(_QWORD *)(a1 + 560);
    *(_QWORD *)(a1 + 560) = v281;
    if (v282)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v282 + 8))(v282);
      v281 = *(llvm::MachineDominatorTree **)(a1 + 560);
    }
    if (!*((_QWORD *)v281 + 165))
    {
      v411 = operator new();
      *(_OWORD *)(v411 + 32) = 0u;
      *(_OWORD *)(v411 + 48) = 0u;
      *(_QWORD *)(v411 + 56) = 0;
      *(_QWORD *)(v411 + 64) = 0;
      *(_OWORD *)(v411 + 16) = 0u;
      *(_QWORD *)v411 = v411 + 16;
      *(_QWORD *)(v411 + 8) = 0x100000000;
      *(_QWORD *)(v411 + 24) = 0;
      *(_QWORD *)(v411 + 32) = 0;
      *(_DWORD *)(v411 + 40) = 0;
      *(_QWORD *)(v411 + 48) = 0;
      *(_BYTE *)(v411 + 64) = 0;
      v412 = *((_QWORD *)v281 + 165);
      *((_QWORD *)v281 + 165) = v411;
      if (v412)
        sub_1C4DC4DE4((uint64_t)v281 + 1320, v412);
    }
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v281);
    v283 = *((_QWORD *)v281 + 165);
    *(_QWORD *)(v283 + 56) = *(_QWORD *)(a1 + 280);
    sub_1C50F0A2C(v283, 0);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 560);
  }
  v5 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::MachineLoopInfo::ID, 1);
  if (v5)
  {
    v6 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v5 + 96))(v5, &llvm::MachineLoopInfo::ID);
    *(_QWORD *)(a1 + 304) = v6;
    if (v6)
      goto LABEL_6;
  }
  else
  {
    *(_QWORD *)(a1 + 304) = 0;
  }
  v284 = (llvm::MachineLoopInfo *)operator new();
  v285 = llvm::MachineLoopInfo::MachineLoopInfo(v284);
  v286 = *(_QWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 568) = v285;
  if (v286)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v286 + 8))(v286);
    v285 = *(llvm::MachineLoopInfo **)(a1 + 568);
  }
  v287 = (uint64_t)v285 + 248;
  v288 = *(_QWORD *)v4;
  if (!*(_QWORD *)(*(_QWORD *)v4 + 1320))
  {
    v413 = operator new();
    *(_OWORD *)(v413 + 32) = 0u;
    *(_OWORD *)(v413 + 48) = 0u;
    *(_QWORD *)(v413 + 56) = 0;
    *(_QWORD *)(v413 + 64) = 0;
    *(_OWORD *)(v413 + 16) = 0u;
    *(_QWORD *)v413 = v413 + 16;
    *(_QWORD *)(v413 + 8) = 0x100000000;
    *(_QWORD *)(v413 + 24) = 0;
    *(_QWORD *)(v413 + 32) = 0;
    *(_DWORD *)(v413 + 40) = 0;
    *(_QWORD *)(v413 + 48) = 0;
    *(_BYTE *)(v413 + 64) = 0;
    v414 = *(_QWORD *)(v288 + 1320);
    *(_QWORD *)(v288 + 1320) = v413;
    if (v414)
      sub_1C4DC4DE4(v288 + 1320, v414);
  }
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v288);
  llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::analyze(v287, *(_QWORD *)(v288 + 1320));
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a1 + 568);
LABEL_6:
  v417 = sub_1C5239474(*(uint64_t ******)(a1 + 312), (uint64_t)"asm-printer", 11);
  v7 = *(_QWORD **)(a1 + 280);
  v8 = (_QWORD *)v7[41];
  v9 = &dword_1C6404980[7584];
  v415 = v7 + 40;
  if (v8 != v7 + 40)
  {
    v10 = 0;
    v11 = 0;
    while (1)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 264))(a1, v8);
      v12 = v8 + 6;
      v435 = 0;
      v436 = 0;
      v437 = 0;
      v416 = (llvm::MachineBasicBlock *)v8;
      v13 = v8[7];
      v418 = v8 + 6;
      while ((_QWORD *)v13 != v12)
      {
        v14 = **(unsigned __int16 **)(v13 + 16);
        if ((v14 - 18) >= 0xFFFFFFFB)
          v15 = v11;
        else
          v15 = v11 + 1;
        v16 = (v14 - 3) < 5 || v14 == 10;
        if (!v16)
        {
          v11 = v15;
          v10 |= (v14 - 18) < 0xFFFFFFFB;
        }
        v17 = *(_QWORD *)(v13 + 48);
        if (v17 >= 8)
        {
          v18 = (int *)(v17 & 0xFFFFFFFFFFFFFFF8);
          v19 = (*(_QWORD *)(v13 + 48) & 7) != 1 || v18 == 0;
          if (!v19
            || ((*(_QWORD *)(v13 + 48) & 7) == 3 ? (v20 = v18 == 0) : (v20 = 1),
                !v20 && *((_BYTE *)v18 + 4) && *(_QWORD *)&v18[2 * *v18 + 2]))
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272));
          }
        }
        v21 = *(uint64_t **)(a1 + 528);
        v22 = *(uint64_t **)(a1 + 536);
        while (v21 != v22)
        {
          v23 = *v21;
          v21 += 9;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 96))(v23, v13);
        }
        if (*(_BYTE *)(a1 + 504))
        {
          v24 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 120))(*(_QWORD *)(a1 + 272));
          v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 32) + 16);
          v26 = (const llvm::TargetInstrInfo *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 104))(v25);
          RestoreSize = llvm::MachineInstr::getRestoreSize((llvm::MachineInstr *)v13, v26);
          if ((RestoreSize & 0xFF00000000) != 0)
          {
            sub_1C5E21910(v24, RestoreSize, 0, 0, 0);
            v28 = (void *)*((_QWORD *)v24 + 4);
            if (*((_QWORD *)v24 + 3) - (_QWORD)v28 <= 0xCuLL)
            {
              v29 = v24;
              v30 = "-byte Reload\n";
              v31 = 13;
              goto LABEL_38;
            }
            qmemcpy(v28, "-byte Reload\n", 13);
            v85 = *((_QWORD *)v24 + 4) + 13;
LABEL_138:
            *((_QWORD *)v24 + 4) = v85;
LABEL_39:
            if ((*(_BYTE *)(v13 + 46) & 1) != 0)
            {
              v32 = (void *)*((_QWORD *)v24 + 4);
              if (*((_QWORD *)v24 + 3) - (_QWORD)v32 > 0xDuLL)
              {
                qmemcpy(v32, " Reload Reuse\n", 14);
                *((_QWORD *)v24 + 4) += 14;
              }
              else
              {
                llvm::raw_ostream::write(v24, " Reload Reuse\n", 0xEuLL);
              }
            }
            goto LABEL_42;
          }
          FoldedRestoreSize = llvm::MachineInstr::getFoldedRestoreSize((llvm::MachineInstr *)v13, v26);
          if ((FoldedRestoreSize & 0xFF00000000) != 0)
          {
            if (!(_DWORD)FoldedRestoreSize)
              goto LABEL_39;
            if ((_DWORD)FoldedRestoreSize == -1)
            {
              v70 = (void *)*((_QWORD *)v24 + 4);
              if (*((_QWORD *)v24 + 3) - (_QWORD)v70 > 0x1AuLL)
              {
                qmemcpy(v70, "Unknown-size Folded Reload\n", 27);
                v85 = *((_QWORD *)v24 + 4) + 27;
                goto LABEL_138;
              }
              v29 = v24;
              v30 = "Unknown-size Folded Reload\n";
              v31 = 27;
            }
            else
            {
              sub_1C5E21910(v24, FoldedRestoreSize, 0, 0, 0);
              v86 = *((_QWORD *)v24 + 4);
              if ((unint64_t)(*((_QWORD *)v24 + 3) - v86) > 0x13)
              {
                *(_DWORD *)(v86 + 16) = 174350703;
                *(_OWORD *)v86 = *(_OWORD *)"-byte Folded Reload\n";
                v85 = *((_QWORD *)v24 + 4) + 20;
                goto LABEL_138;
              }
              v29 = v24;
              v30 = "-byte Folded Reload\n";
              v31 = 20;
            }
          }
          else
          {
            SpillSize = llvm::MachineInstr::getSpillSize((llvm::MachineInstr *)v13, v26);
            if ((SpillSize & 0xFF00000000) != 0)
            {
              sub_1C5E21910(v24, SpillSize, 0, 0, 0);
              v84 = *((_QWORD *)v24 + 4);
              if ((unint64_t)(*((_QWORD *)v24 + 3) - v84) > 0xB)
              {
                *(_DWORD *)(v84 + 8) = 174877801;
                *(_QWORD *)v84 = *(_QWORD *)"-byte Spill\n";
                v85 = *((_QWORD *)v24 + 4) + 12;
                goto LABEL_138;
              }
              v29 = v24;
              v30 = "-byte Spill\n";
              v31 = 12;
            }
            else
            {
              FoldedSpillSize = llvm::MachineInstr::getFoldedSpillSize((llvm::MachineInstr *)v13, v26);
              if ((FoldedSpillSize & 0xFF00000000) == 0 || (_DWORD)FoldedSpillSize == 0)
                goto LABEL_39;
              if ((_DWORD)FoldedSpillSize == -1)
              {
                v109 = (void *)*((_QWORD *)v24 + 4);
                if (*((_QWORD *)v24 + 3) - (_QWORD)v109 > 0x19uLL)
                {
                  qmemcpy(v109, "Unknown-size Folded Spill\n", 26);
                  v85 = *((_QWORD *)v24 + 4) + 26;
                  goto LABEL_138;
                }
                v29 = v24;
                v30 = "Unknown-size Folded Spill\n";
                v31 = 26;
              }
              else
              {
                sub_1C5E21910(v24, FoldedSpillSize, 0, 0, 0);
                v123 = *((_QWORD *)v24 + 4);
                if ((unint64_t)(*((_QWORD *)v24 + 3) - v123) > 0x12)
                {
                  *(_DWORD *)(v123 + 15) = 174877801;
                  *(_OWORD *)v123 = *(_OWORD *)"-byte Folded Spill\n";
                  v85 = *((_QWORD *)v24 + 4) + 19;
                  goto LABEL_138;
                }
                v29 = v24;
                v30 = "-byte Folded Spill\n";
                v31 = 19;
              }
            }
          }
LABEL_38:
          llvm::raw_ostream::write(v29, v30, v31);
          goto LABEL_39;
        }
LABEL_42:
        switch(**(_WORD **)(v13 + 16))
        {
          case 1:
          case 2:
            sub_1C5FFB088(a1, v13);
            goto LABEL_212;
          case 3:
            v49 = *(_QWORD *)(a1 + 256);
            v50 = *(_DWORD *)(v49 + 412);
            v51 = v50 == 3 || v50 == 1;
            if (!v51 && (v50 || !*(_BYTE *)(v49 + 416) || *(_DWORD *)(a1 + 592) != 2))
              goto LABEL_212;
            v52 = *(_QWORD **)(a1 + 280);
            v53 = *v52;
            v54 = *(_DWORD *)(*v52 + 32);
            if ((v54 & 0xF) == 1)
              goto LABEL_212;
            if (*(_BYTE *)(v53 + 16) == 3)
            {
              if ((*(_DWORD *)(v53 + 20) & 0x7FFFFFF) == 0)
                goto LABEL_212;
            }
            else if (!*(_BYTE *)(v53 + 16) && (v54 & 0x800000) == 0 && *(_QWORD *)(v53 + 72) == v53 + 72)
            {
              goto LABEL_212;
            }
            if (v50 == 1
              && !*(_BYTE *)(v49 + 409)
              && ((v124 = v53 + 112,
                   llvm::AttributeList::getUWTableKind((llvm::AttributeList *)(v53 + 112)))
               || !*(_QWORD *)v124
               || (*(_BYTE *)(*(_QWORD *)v124 + 16) & 0x20) == 0
               || (*(_WORD *)(v53 + 18) & 8) != 0)
              || *(_BYTE *)(*(_QWORD *)(a1 + 288) + 2108)
              || (*(_WORD *)(*(_QWORD *)(a1 + 248) + 1064) & 0x10) != 0)
            {
              v77 = *(_QWORD *)(v13 + 24);
              for (i = *(_QWORD *)(v13 + 8); i != v77 + 48; i = *(_QWORD *)(i + 8))
              {
                v79 = *(unsigned __int16 **)(i + 16);
                v80 = *v79;
                v82 = (v80 - 9) <= 0x3C
                   && ((1 << (v80 - 9)) & 0x1000000000000605) != 0
                   || v80 == 0;
                if (!v82 && (v79[4] & 0x10) == 0)
                  goto LABEL_200;
              }
              if (v77 == *(_QWORD *)(*(_QWORD *)(v77 + 32) + 320))
                goto LABEL_212;
LABEL_200:
              sub_1C63BE078(a1, (unsigned int *)(v52[55] + 80 * *(unsigned int *)(*(_QWORD *)(v13 + 32) + 16)));
              goto LABEL_212;
            }
            goto LABEL_212;
          case 4:
          case 5:
          case 6:
            (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272), *(_QWORD *)(*(_QWORD *)(v13 + 32) + 16), 0);
            goto LABEL_212;
          case 7:
            if (!*(_BYTE *)(a1 + 504))
              goto LABEL_212;
            *(_QWORD *)&v465.__val_ = 0;
            v465.__cat_ = 0;
            v466 = 0;
            LODWORD(v439) = 0;
            LOBYTE(v442) = 0;
            v443 = 0;
            v438 = &unk_1E81A7208;
            v445 = &v465;
            LODWORD(v444) = 0;
            v440 = 0;
            __dst = 0;
            *((_QWORD *)&v439 + 1) = 0;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v438, "kill:", 5uLL);
            v55 = *(unsigned int *)(v13 + 40);
            if (!(_DWORD)v55)
              goto LABEL_99;
            v56 = *(_DWORD **)(v13 + 32);
            v57 = &v56[8 * v55];
            break;
          case 0xA:
            if (*(_BYTE *)(a1 + 504))
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 336))(a1, v13);
            goto LABEL_212;
          case 0xD:
          case 0xE:
            if (!*(_BYTE *)(a1 + 504))
              goto LABEL_212;
            if (**(_WORD **)(v13 + 16) == 13 && *(_DWORD *)(v13 + 40) != 4)
              goto LABEL_98;
            v438 = &v440;
            v439 = xmmword_1C85F20B0;
            LODWORD(v452.__r_.__value_.__r.__words[1]) = 0;
            LOBYTE(v455) = 0;
            v456 = 0;
            v452.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E81A7280;
            v458 = &v438;
            LODWORD(v457) = 0;
            v453 = 0;
            v454 = 0;
            v452.__r_.__value_.__r.__words[2] = 0;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v452, "DEBUG_VALUE: ", 0xDuLL);
            v33 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + ((unint64_t)(**(_WORD **)(v13 + 16) != 14) << 6) + 16);
            v34 = *(_QWORD *)(v33 - 8 * *(unsigned int *)(v33 + 8));
            if (*(_BYTE *)v34 == 17)
            {
              v35 = *(_QWORD *)(v34 - 8 * *(unsigned int *)(v34 + 8) + 16);
              if (v35)
              {
                v36 = *(size_t **)(v35 + 8);
                v39 = *v36;
                v37 = v36 + 3;
                v38 = v39;
                if (v39)
                {
                  if (v38 <= (char *)v453 - (_BYTE *)v454)
                  {
                    memcpy(v454, v37, v38);
                    v40 = (std::string *)((char *)v454 + v38);
                    v454 = (char *)v454 + v38;
                  }
                  else
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v452, (const char *)v37, v38);
                    v40 = (std::string *)v454;
                  }
                  if (v453 == v40)
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v452, ":", 1uLL);
                  }
                  else
                  {
                    v40->__r_.__value_.__s.__data_[0] = 58;
                    v454 = (char *)v454 + 1;
                  }
                }
              }
            }
            v87 = *(_QWORD *)(v33 - 8 * *(unsigned int *)(v33 + 8) + 8);
            v88 = (char *)v454;
            if (v87)
            {
              v89 = *(size_t **)(v87 + 8);
              v92 = *v89;
              v90 = v89 + 3;
              v91 = v92;
              if (v92 <= (char *)v453 - (_BYTE *)v454)
              {
                if (v91)
                {
                  memcpy(v454, v90, v91);
                  v88 = (char *)v454 + v91;
                  v454 = (char *)v454 + v91;
                }
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v452, (const char *)v90, v91);
                v88 = (char *)v454;
              }
            }
            if ((unint64_t)((char *)v453 - v88) > 3)
            {
              *(_DWORD *)v88 = 539835424;
              v454 = (char *)v454 + 4;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v452, " <- ", 4uLL);
            }
            v93 = 96;
            if (**(_WORD **)(v13 + 16) == 14)
              v93 = 32;
            v94 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + v93 + 16);
            if (((*(_QWORD *)(v94 + 32) - *(_QWORD *)(v94 + 24)) & 0x7FFFFFFF8) != 0)
            {
              v95 = v454;
              if (v454 >= v453)
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v452, 91);
              }
              else
              {
                v454 = (char *)v454 + 1;
                *v95 = 91;
              }
              v96 = *(uint64_t **)(v94 + 24);
              v97 = *(uint64_t **)(v94 + 32);
              *(_QWORD *)&v465.__val_ = v96;
              if (v97 != v96)
              {
                v98 = 0;
                do
                {
                  v427[0] = v96;
                  if ((v98 & 1) != 0)
                    v99 = 2;
                  else
                    v99 = 0;
                  if (v99 <= (char *)v453 - (_BYTE *)v454)
                  {
                    if ((v98 & 1) != 0)
                    {
                      *(_WORD *)v454 = 8236;
                      v454 = (char *)v454 + 2;
                    }
                  }
                  else
                  {
                    if ((v98 & 1) != 0)
                      v100 = ", ";
                    else
                      v100 = 0;
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v452, v100, v99);
                  }
                  v102 = llvm::dwarf::OperationEncodingString((llvm::dwarf *)*(unsigned int *)v96);
                  v103 = v101;
                  if (v101 <= (char *)v453 - (_BYTE *)v454)
                  {
                    if (v101)
                    {
                      memcpy(v454, v102, v101);
                      v454 = (char *)v454 + v103;
                    }
                  }
                  else
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v452, v102, v101);
                  }
                  if (llvm::DIExpression::ExprOperand::getSize(v427) != 1)
                  {
                    v104 = 0;
                    do
                    {
                      v105 = v454;
                      if (v454 >= v453)
                      {
                        llvm::raw_ostream::write((llvm::raw_ostream *)&v452, 32);
                      }
                      else
                      {
                        v454 = (char *)v454 + 1;
                        *v105 = 32;
                      }
                      sub_1C5E21910((llvm::raw_ostream *)&v452, v96[++v104], 0, 0, 0);
                    }
                    while (v104 < llvm::DIExpression::ExprOperand::getSize(v427) - 1);
                  }
                  v96 += llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v465);
                  *(_QWORD *)&v465.__val_ = v96;
                  v98 = 1;
                }
                while (v96 != v97);
              }
              if ((unint64_t)((char *)v453 - (_BYTE *)v454) > 1)
              {
                *(_WORD *)v454 = 8285;
                v454 = (char *)v454 + 2;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v452, "] ", 2uLL);
              }
            }
            v106 = *(_QWORD *)(v13 + 32);
            if (**(_WORD **)(v13 + 16) != 14)
              goto LABEL_186;
            if (*(_DWORD *)(v13 + 40) != 2)
            {
              v106 += 64;
LABEL_186:
              if (v106 != *(_QWORD *)(v13 + 32) + ((unint64_t)(**(_WORD **)(v13 + 16) == 14) << 6))
              {
                if ((unint64_t)((char *)v453 - (_BYTE *)v454) > 1)
                {
                  *(_WORD *)v454 = 8236;
                  v454 = (char *)v454 + 2;
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v452, ", ", 2uLL);
                }
              }
              __asm { BR              X9 }
            }
            goto LABEL_209;
          case 0xF:
          case 0x10:
            goto LABEL_212;
          case 0x11:
            if (!*(_BYTE *)(a1 + 504))
              goto LABEL_212;
            if (*(_DWORD *)(v13 + 40) == 1)
            {
              v438 = &v440;
              v439 = xmmword_1C85F20B0;
              LODWORD(v452.__r_.__value_.__r.__words[1]) = 0;
              LOBYTE(v455) = 0;
              v456 = 0;
              v452.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E81A7280;
              v458 = &v438;
              LODWORD(v457) = 0;
              v453 = 0;
              v454 = 0;
              v452.__r_.__value_.__r.__words[2] = 0;
              llvm::raw_ostream::write((llvm::raw_ostream *)&v452, "DEBUG_LABEL: ", 0xDuLL);
              v41 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 16);
              for (j = *(unsigned __int8 **)(v41 - 8 * *(unsigned int *)(v41 + 8));
                    ;
                    j = *(unsigned __int8 **)&j[-8 * *((unsigned int *)j + 2) + 8])
              {
                v43 = *j;
                if (v43 != 19)
                  break;
              }
              if (v43 == 17)
              {
                v71 = *(_QWORD *)&j[-8 * *((unsigned int *)j + 2) + 16];
                if (v71)
                {
                  v72 = *(size_t **)(v71 + 8);
                  v75 = *v72;
                  v73 = v72 + 3;
                  v74 = v75;
                  if (v75)
                  {
                    if (v74 <= (char *)v453 - (_BYTE *)v454)
                    {
                      memcpy(v454, v73, v74);
                      v76 = (std::string *)((char *)v454 + v74);
                      v454 = (char *)v454 + v74;
                    }
                    else
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)&v452, (const char *)v73, v74);
                      v76 = (std::string *)v454;
                    }
                    if (v453 == v76)
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)&v452, ":", 1uLL);
                    }
                    else
                    {
                      v76->__r_.__value_.__s.__data_[0] = 58;
                      v454 = (char *)v454 + 1;
                    }
                  }
                }
              }
              v110 = *(_QWORD *)(v41 - 8 * *(unsigned int *)(v41 + 8) + 8);
              if (v110)
              {
                v111 = *(size_t **)(v110 + 8);
                v114 = *v111;
                v112 = v111 + 3;
                v113 = v114;
                if (v114 <= (char *)v453 - (_BYTE *)v454)
                {
                  if (v113)
                  {
                    memcpy(v454, v112, v113);
                    v454 = (char *)v454 + v113;
                  }
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v452, (const char *)v112, v113);
                }
              }
LABEL_209:
              v115 = *(_QWORD *)(a1 + 272);
              v117 = *v458;
              v116 = (const std::error_category *)v458[1];
              v468 = 261;
              *(_QWORD *)&v465.__val_ = v117;
              v465.__cat_ = v116;
              (*(void (**)(uint64_t, std::error_code *, uint64_t))(*(_QWORD *)v115 + 128))(v115, &v465, 1);
              v452.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
              if ((_DWORD)v457 == 1 && v452.__r_.__value_.__r.__words[2])
                MEMORY[0x1CAA32F9C](v452.__r_.__value_.__r.__words[2], 0x1000C8077774924);
              v67 = v438;
              if (v438 != &v440)
LABEL_211:
                free(v67);
            }
            else
            {
LABEL_98:
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, v13);
            }
            goto LABEL_212;
          case 0x17:
            sub_1C63BCB1C(*(_QWORD *)(a1 + 584), *(uint64_t **)(v13 + 32), *(_QWORD *)(v13 + 56));
            goto LABEL_212;
          case 0x18:
            if (*(_BYTE *)(a1 + 504))
            {
              v65 = *(_QWORD *)(a1 + 272);
              v438 = "ARITH_FENCE";
              LOWORD(__dst) = 259;
              (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v65 + 128))(v65, &v438, 1);
            }
            goto LABEL_212;
          case 0x20:
            v44 = *(_QWORD *)(v13 + 32);
            v45 = *(_QWORD *)(v44 + 16);
            v46 = *(int *)(v44 + 48);
            v47 = *(_QWORD *)(a1 + 272);
            v48 = sub_1C484358C(*(_QWORD *)(a1 + 264) + 192, 24, 3);
            *(_BYTE *)v48 = 1;
            *(_DWORD *)(v48 + 1) = *(unsigned __int8 *)(v48 + 4) << 24;
            *(_QWORD *)(v48 + 8) = 0;
            *(_QWORD *)(v48 + 16) = v46;
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v47 + 280))(v47, v45, v48);
            goto LABEL_212;
          default:
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, v13);
            if (!v417)
              goto LABEL_212;
            *(_QWORD *)&v439 = 0;
            v438 = 0;
            *((_QWORD *)&v439 + 1) = &__dst;
            v440 = 0x800000000;
            v449[64] = 0;
            LODWORD(v438) = **(unsigned __int16 **)(v13 + 16);
            *(_QWORD *)&v465.__val_ = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 272) + 184))(*(_QWORD *)(a1 + 272), &v438);
            v465.__cat_ = v66;
            LODWORD(v466) = 0;
            sub_1C62B2444((uint64_t)&v435, (const void **)&v465, &v466, (uint64_t)&v452);
            ++*(_DWORD *)(v452.__r_.__value_.__r.__words[0] + 16);
            v67 = (void *)*((_QWORD *)&v439 + 1);
            if (*((void ***)&v439 + 1) == &__dst)
              goto LABEL_212;
            goto LABEL_211;
        }
        do
        {
          v58 = __dst;
          if ((unint64_t)__dst >= v440)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v438, 32);
          }
          else
          {
            __dst = (char *)__dst + 1;
            *v58 = 32;
          }
          if ((*v56 & 0x1000000) != 0)
            v59 = "def ";
          else
            v59 = "killed ";
          if ((*v56 & 0x1000000) != 0)
            v60 = 4;
          else
            v60 = 7;
          if (v60 <= v440 - (unint64_t)__dst)
          {
            memcpy(__dst, v59, v60);
            __dst = (char *)__dst + v60;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v438, v59, v60);
          }
          v61 = v56[1];
          v62 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 280) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 16));
          v63 = (std::string *)operator new(0x28uLL);
          v63->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814D010;
          LODWORD(v63->__r_.__value_.__r.__words[1]) = v61;
          v63->__r_.__value_.__r.__words[2] = v62;
          LODWORD(v63[1].__r_.__value_.__l.__data_) = 0;
          v63[1].__r_.__value_.__l.__size_ = 0;
          v453 = v63;
          sub_1C52C9630((llvm::raw_ostream *)v63, (llvm::raw_ostream *)&v438);
          if (v453 == &v452)
          {
            v64 = (void (**)(void))(v452.__r_.__value_.__r.__words[0] + 32);
          }
          else
          {
            if (!v453)
              goto LABEL_90;
            v64 = (void (**)(void))(v453->__r_.__value_.__r.__words[0] + 40);
          }
          (*v64)();
LABEL_90:
          v56 += 8;
        }
        while (v56 != v57);
LABEL_99:
        v68 = *(_QWORD *)(a1 + 272);
        LOWORD(v454) = 260;
        v452.__r_.__value_.__r.__words[0] = (std::string::size_type)v445;
        (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v68 + 112))(v68, &v452, 1);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 152))(*(_QWORD *)(a1 + 272));
        v438 = off_1E81A6E70;
        if ((_DWORD)v444 == 1 && *((_QWORD *)&v439 + 1))
          MEMORY[0x1CAA32F9C](*((_QWORD *)&v439 + 1), 0x1000C8077774924);
        if (SHIBYTE(v466) < 0)
          operator delete(*(void **)&v465.__val_);
LABEL_212:
        v118 = *(_QWORD *)(v13 + 48);
        if (v118 >= 8)
        {
          if ((v119 = (int *)(v118 & 0xFFFFFFFFFFFFFFF8), (*(_QWORD *)(v13 + 48) & 7) == 2) && v119
            || (*(_QWORD *)(v13 + 48) & 7) == 3
            && v119
            && *((_BYTE *)v119 + 5)
            && (v119 = *(int **)&v119[2 * *v119 + 2 + 2 * *((unsigned __int8 *)v119 + 4)]) != 0)
          {
            (*(void (**)(_QWORD, int *, _QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272), v119, 0);
          }
        }
        v120 = *(uint64_t **)(a1 + 528);
        v121 = *(uint64_t **)(a1 + 536);
        if (v120 != v121)
        {
          do
          {
            v122 = *v120;
            v120 += 9;
            (*(void (**)(uint64_t))(*(_QWORD *)v122 + 104))(v122);
          }
          while (v120 != v121);
          if (!v13)
            goto LABEL_222;
        }
        if ((*(_BYTE *)v13 & 4) == 0)
        {
LABEL_222:
          while ((*(_WORD *)(v13 + 44) & 8) != 0)
            v13 = *(_QWORD *)(v13 + 8);
        }
        v13 = *(_QWORD *)(v13 + 8);
        v12 = v418;
      }
      if (*(_DWORD *)(*(_QWORD *)(a1 + 280) + 640) == 2
        || *(_BYTE *)(*(_QWORD *)(a1 + 256) + 363) && *((_BYTE *)v416 + 201))
      {
        v132 = *(_QWORD *)(a1 + 272);
        EndSymbol = llvm::MachineBasicBlock::getEndSymbol(v416);
        (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v132 + 192))(v132, EndSymbol, 0);
      }
      if (*((_BYTE *)v416 + 201)
        && *((_QWORD *)v416 + 24) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 328) + 192))
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 363))
        {
          v151 = llvm::MachineBasicBlock::getEndSymbol(v416);
          v152 = *(_QWORD *)(a1 + 264);
          v153 = sub_1C484358C(v152 + 192, 24, 3);
          v154 = *(unsigned __int8 *)(*(_QWORD *)(v152 + 152) + 18) << 16;
          *(_BYTE *)v153 = 2;
          *(_DWORD *)(v153 + 1) = v154 | (*(unsigned __int8 *)(v153 + 4) << 24);
          *(_QWORD *)(v153 + 8) = 0;
          *(_QWORD *)(v153 + 16) = v151;
          v155 = *(_QWORD *)(a1 + 480);
          v156 = *(_QWORD *)(a1 + 264);
          v157 = sub_1C484358C(v156 + 192, 24, 3);
          v158 = *(unsigned __int8 *)(*(_QWORD *)(v156 + 152) + 18) << 16;
          *(_BYTE *)v157 = 2;
          *(_DWORD *)(v157 + 1) = v158 | (*(unsigned __int8 *)(v157 + 4) << 24);
          *(_QWORD *)(v157 + 8) = 0;
          *(_QWORD *)(v157 + 16) = v155;
          v159 = sub_1C484358C(*(_QWORD *)(a1 + 264) + 192, 32, 3);
          *(_BYTE *)v159 = 0;
          *(_DWORD *)(v159 + 1) = (*(unsigned __int8 *)(v159 + 4) << 24) | 0x12;
          *(_QWORD *)(v159 + 8) = 0;
          *(_QWORD *)(v159 + 16) = v153;
          *(_QWORD *)(v159 + 24) = v157;
          (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(a1 + 272) + 424))(*(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 480), v159);
        }
        v160 = *(_QWORD *)(a1 + 480);
        v161 = llvm::MachineBasicBlock::getEndSymbol(v416);
        LODWORD(v438) = *((_DWORD *)v416 + 49) - *((_DWORD *)v416 + 48) + 2;
        v162 = (_QWORD *)sub_1C5FF137C(a1 + 352, (int *)&v438);
        *v162 = v160;
        v162[1] = v161;
      }
      (*(void (**)(uint64_t, llvm::MachineBasicBlock *))(*(_QWORD *)a1 + 272))(a1, v416);
      if (v417 && v418 != (_QWORD *)(*v418 & 0xFFFFFFFFFFFFFFF8))
      {
        v125 = *(_QWORD *)(*((_QWORD *)v416 + 7) + 56);
        if (v125)
        {
          v126 = *(_QWORD *)(v125 - 8 * *(unsigned int *)(v125 + 8));
          if (*(_BYTE *)v126 != 15)
            v126 = *(_QWORD *)(v126 - 8 * *(unsigned int *)(v126 + 8));
          v127 = *(_DWORD *)(v125 + 4);
          LODWORD(v125) = *(unsigned __int16 *)(v125 + 2);
        }
        else
        {
          v127 = 0;
          v126 = 0;
        }
        v128 = **((_QWORD **)v416 + 4);
        LODWORD(v452.__r_.__value_.__r.__words[1]) = 17;
        v452.__r_.__value_.__s.__data_[12] = 2;
        v452.__r_.__value_.__r.__words[2] = v128;
        v453 = (std::string *)v126;
        v454 = (void *)__PAIR64__(v125, v127);
        v455 = "asm-printer";
        v456 = "InstructionMix";
        v457 = 14;
        LOBYTE(v458) = 0;
        v459 = 0;
        v460 = v462;
        v461 = 0x400000000;
        v462[256] = 0;
        v463 = -1;
        v464 = v416;
        v452.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E8144BB0;
        v438 = (char *)&v439 + 8;
        v129 = &v435[3 * v437];
        *(_QWORD *)&v439 = 0x8000000000;
        if ((_DWORD)v436)
        {
          if (v437)
          {
            v130 = 24 * v437;
            v131 = v435;
            while (*v131 >= 0xFFFFFFFFFFFFFFFELL)
            {
              v131 += 3;
              v130 -= 24;
              if (!v130)
                goto LABEL_266;
            }
          }
          else
          {
            v131 = v435;
          }
        }
        else
        {
LABEL_266:
          v131 = &v435[3 * v437];
        }
        v134 = &v435[3 * v437];
        v135 = (char *)&v439 + 8;
        v136 = (size_t *)&v439 + 1;
        if (v131 == v134)
          goto LABEL_278;
        do
        {
          sub_1C63BCB40((unint64_t)&v438, (__int128 *)v131, (int *)v131 + 4);
          v137 = v131 + 3;
          while (v137 != v129)
          {
            v138 = *v137;
            v137 += 3;
            if (v138 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v131 = v137 - 3;
              goto LABEL_275;
            }
          }
          v131 = v129;
LABEL_275:
          ;
        }
        while (v131 != v134);
        v135 = (char *)v438;
        v136 = (size_t *)((char *)v438 + 24 * v439);
        if (!(_DWORD)v439)
LABEL_278:
          v139 = 0;
        else
          v139 = (char *)(126 - 2 * __clz(v439));
        sub_1C5FF8438((uint64_t)v135, v136, v139, 1);
        *(_QWORD *)&v465.__val_ = "BasicBlock: ";
        v465.__cat_ = (const std::error_category *)12;
        sub_1C53B17B4((uint64_t)&v460, (const void **)&v465);
        v140 = (uint64_t ***)*((_QWORD *)v416 + 2);
        if (v140)
        {
          if ((*((_BYTE *)v140 + 23) & 0x10) != 0)
          {
            v141 = ***v140;
            v142 = *(_QWORD *)(v141 + 152);
            v143 = *(unsigned int *)(v141 + 168);
            if (!(_DWORD)v143)
              goto LABEL_291;
            LODWORD(v144) = (v143 - 1) & ((v140 >> 4) ^ (v140 >> 9));
            v145 = (uint64_t ****)(v142 + 16 * v144);
            v146 = *v145;
            if (*v145 != v140)
            {
              v147 = 1;
              while (v146 != (uint64_t ***)-4096)
              {
                v148 = v144 + v147++;
                v144 = v148 & (v143 - 1);
                v146 = *(uint64_t ****)(v142 + 16 * v144);
                if (v146 == v140)
                {
                  v145 = (uint64_t ****)(v142 + 16 * v144);
                  goto LABEL_292;
                }
              }
LABEL_291:
              v145 = (uint64_t ****)(v142 + 16 * v143);
            }
LABEL_292:
            v163 = v145[1];
            v164 = (size_t)*v163;
            v150 = (char *)(v163 + 2);
            v149 = v164;
          }
          else
          {
            v149 = 0;
            v150 = &byte_1C871356D;
          }
        }
        else
        {
          v149 = 0;
          v150 = (char *)&unk_1C86ACCDB;
        }
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v431, "BasicBlock", 0xAuLL, v150, v149);
        v165 = sub_1C47E3888((uint64_t)&v452, (uint64_t)v431);
        *(_QWORD *)&v465.__val_ = "\n";
        v465.__cat_ = (const std::error_category *)1;
        sub_1C53B17B4(v165 + 80, (const void **)&v465);
        if (v434 < 0)
          operator delete(__p);
        if (v432 < 0)
          operator delete(v431[0]);
        if ((_DWORD)v439)
        {
          v166 = (char *)v438;
          v167 = (char *)v438 + 24 * v439;
          do
          {
            v427[0] = (uint64_t *)"INST_";
            v428 = 259;
            v168 = sub_1C534E9D8((uint64_t *)v166, " \t\n\v\f\r", 6);
            llvm::getToken(v168, v169, " \t\n\v\f\r", 6, v426);
            v170 = v428;
            if ((_BYTE)v428)
            {
              if (v428 == 1)
              {
                *(_QWORD *)&v465.__val_ = v426[0];
                v171 = 1;
                v170 = 5;
                p_cat = &v465.__cat_;
              }
              else
              {
                if (HIBYTE(v428) != 1)
                  v170 = 2;
                v173 = v427;
                if (HIBYTE(v428) == 1)
                  v173 = (uint64_t **)v427[0];
                *(_QWORD *)&v465.__val_ = v173;
                v465.__cat_ = (const std::error_category *)v427[1];
                v466 = v426[0];
                v171 = 5;
                p_cat = (const std::error_category **)&v467;
              }
              *p_cat = (const std::error_category *)v426[1];
            }
            else
            {
              v171 = 1;
            }
            LOBYTE(v468) = v170;
            HIBYTE(v468) = v171;
            llvm::Twine::str((llvm::Twine *)&v465, v429);
            v465 = *(std::error_code *)v166;
            sub_1C53B17B4((uint64_t)&v460, (const void **)&v465);
            *(_QWORD *)&v465.__val_ = ": ";
            v465.__cat_ = (const std::error_category *)2;
            sub_1C53B17B4((uint64_t)&v460, (const void **)&v465);
            if (v430 >= 0)
              v174 = v429;
            else
              v174 = (void **)v429[0];
            if (v430 >= 0)
              v175 = v430 & 0x7F;
            else
              v175 = (std::string::size_type)v429[1];
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v423, (const std::string::value_type *)v174, v175, *((_DWORD *)v166 + 4));
            v176 = sub_1C47E3888((uint64_t)&v452, (uint64_t)&v423);
            *(_QWORD *)&v465.__val_ = "\n";
            v465.__cat_ = (const std::error_category *)1;
            sub_1C53B17B4(v176 + 80, (const void **)&v465);
            if (v425 < 0)
              operator delete(v424);
            if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v423.__r_.__value_.__l.__data_);
            if (v430 < 0)
              operator delete(v429[0]);
            v166 += 24;
          }
          while (v166 != v167);
        }
        llvm::MachineOptimizationRemarkEmitter::emit(*(uint64_t *****)(a1 + 312), (llvm::DiagnosticInfoOptimizationBase *)&v452);
        if (v438 != (char *)&v439 + 8)
          free(v438);
        v452.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814E790;
        v177 = (char *)v460;
        if ((_DWORD)v461)
        {
          v178 = (unint64_t)v461 << 6;
          do
          {
            v179 = (void **)&v177[v178];
            if (v177[v178 - 17] < 0)
              operator delete(*(v179 - 5));
            if (*((char *)v179 - 41) < 0)
              operator delete(*(v179 - 8));
            v178 -= 64;
          }
          while (v178);
          v177 = (char *)v460;
        }
        if (v177 != v462)
          free(v177);
      }
      MEMORY[0x1CAA32FB4](v435, 8);
      v8 = (_QWORD *)*((_QWORD *)v416 + 1);
      if (v8 == v415)
      {
        v7 = *(_QWORD **)(a1 + 280);
        v9 = dword_1C6404980 + 30336;
        goto LABEL_338;
      }
    }
  }
  v11 = 0;
  v10 = 0;
LABEL_338:
  v180 = (uint64_t ***)*v7;
  if ((*(_BYTE *)(*v7 + 23) & 0x20) == 0)
    goto LABEL_354;
  v181 = ***v180;
  v438 = v180;
  v182 = *(_DWORD *)(v181 + 2496);
  if (v182)
  {
    v183 = *(_QWORD *)(v181 + 2480);
    v184 = v182 - 1;
    v185 = v184 & ((v180 >> 4) ^ (v180 >> 9));
    v186 = (uint64_t ****)(v183 + 40 * v185);
    v187 = *v186;
    if (*v186 == v180)
      goto LABEL_349;
    v188 = 0;
    v189 = 1;
    while (v187 != (uint64_t ***)-4096)
    {
      if (v188)
        v190 = 0;
      else
        v190 = v187 == (uint64_t ***)-8192;
      if (v190)
        v188 = v186;
      v191 = v185 + v189++;
      v185 = v191 & v184;
      v186 = (uint64_t ****)(v183 + 40 * v185);
      v187 = *v186;
      if (*v186 == v180)
        goto LABEL_349;
    }
    if (v188)
      v302 = v188;
    else
      v302 = v186;
  }
  else
  {
    v302 = 0;
  }
  v186 = (uint64_t ****)sub_1C541AB24(v181 + 2480, (uint64_t)&v438, (uint64_t *)&v438, v302);
  v303 = (uint64_t ***)v438;
  v186[3] = 0;
  v186[4] = 0;
  *v186 = v303;
  v186[1] = (uint64_t ***)(v186 + 3);
  v186[2] = (uint64_t ***)0x100000000;
LABEL_349:
  v192 = *((unsigned int *)v186 + 4);
  if (!(_DWORD)v192)
  {
LABEL_354:
    v196 = 0;
    LODWORD(v195) = 0;
    goto LABEL_355;
  }
  v193 = v186[1] + 1;
  v194 = 16 * v192;
  LODWORD(v195) = 0;
  while (*((_DWORD *)v193 - 2))
  {
    v196 = 0;
    v193 += 2;
    v194 -= 16;
    if (!v194)
      goto LABEL_355;
  }
  v195 = *v193;
  if (*v193)
  {
    v196 = *v193;
    if (*(_BYTE *)v195 != 15)
      v196 = *(_QWORD *)(v195 - 8 * *(unsigned int *)(v195 + 8));
    LODWORD(v195) = *(_DWORD *)(v195 + 28);
  }
  else
  {
    v196 = 0;
  }
LABEL_355:
  v197 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 328);
  v198 = **(_QWORD **)(v197 + 32);
  LODWORD(v439) = 17;
  BYTE4(v439) = 2;
  *((_QWORD *)&v439 + 1) = v198;
  v440 = v196;
  __dst = (void *)v195;
  v442 = "asm-printer";
  v443 = "InstructionCount";
  v444 = 16;
  LOBYTE(v445) = 0;
  v446 = 0;
  v447 = v449;
  v448 = *((_QWORD *)v9 + 206);
  v449[256] = 0;
  v450 = -1;
  v451 = v197;
  v438 = &unk_1E8144BB0;
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v419, "NumInstructions", 0xFuLL, v11);
  v199 = sub_1C47E3888((uint64_t)&v438, (uint64_t)v419);
  v452.__r_.__value_.__r.__words[0] = (std::string::size_type)" instructions in function";
  v452.__r_.__value_.__l.__size_ = 25;
  sub_1C53B17B4(v199 + 80, (const void **)&v452.__r_.__value_.__l.__data_);
  if (v422 < 0)
    operator delete(v421);
  if (v420 < 0)
    operator delete(v419[0]);
  llvm::MachineOptimizationRemarkEmitter::emit(*(uint64_t *****)(a1 + 312), (llvm::DiagnosticInfoOptimizationBase *)&v438);
  if ((v10 & 1) == 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 18)
      || (v201 = *(_QWORD *)(a1 + 248), *(_DWORD *)(v201 + 484) == 15) && *(_DWORD *)(v201 + 492) == 1)
    {
      v200 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 280) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 16));
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v200 + 752))(&v452);
      if (LODWORD(v452.__r_.__value_.__l.__data_))
      {
        v396 = *(_QWORD *)(a1 + 272);
        *(_QWORD *)&v465.__val_ = "avoids zero-length function";
        v468 = 259;
        (*(void (**)(uint64_t, std::error_code *, uint64_t))(*(_QWORD *)v396 + 112))(v396, &v465, 1);
        sub_1C63BC84C(a1, 1);
      }
      if ((void **)v452.__r_.__value_.__r.__words[2] != &v454)
        free((void *)v452.__r_.__value_.__r.__words[2]);
    }
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 272) + 168))(*(_QWORD *)(a1 + 272), *(_QWORD *)(*(_QWORD *)(a1 + 280) + 80), 0);
  v202 = **(_QWORD **)(a1 + 280);
  v203 = v202 + 72;
  v204 = *(_QWORD *)(v202 + 80);
  if (v204 != v202 + 72)
  {
    do
    {
      if (v204)
        v205 = v204 - 24;
      else
        v205 = 0;
      if ((*(_WORD *)(v205 + 18) & 0x7FFF) != 0)
      {
        v206 = sub_1C63BC374(a1, v205);
        v207 = (_QWORD *)*v206;
        v208 = *(_QWORD *)*v206 & 0xFFFFFFFFFFFFFFF8;
        if (!v208 && (v207[1] & 0x1C00) == 0x800)
        {
          *((_DWORD *)v207 + 2) |= 4u;
          llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v207[3]);
          *v207 = *v207 & 7 | v208;
        }
        if (!v208)
        {
          v209 = *(_QWORD *)(a1 + 272);
          v452.__r_.__value_.__r.__words[0] = (std::string::size_type)"Address of block that was removed by CodeGen";
          LOWORD(v454) = 259;
          (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v209 + 112))(v209, &v452, 1);
          (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272), v207, 0);
        }
      }
      v204 = *(_QWORD *)(v204 + 8);
    }
    while (v204 != v203);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
  if (sub_1C5FF14CC(*(uint64_t **)(a1 + 280), v210) || *(_BYTE *)(*(_QWORD *)(a1 + 256) + 363))
  {
    v452.__r_.__value_.__r.__words[0] = (std::string::size_type)"func_end";
    LOWORD(v454) = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(*(_QWORD *)(a1 + 264), (uint64_t)&v452, 1);
    *(_QWORD *)(a1 + 448) = TempSymbol;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272), TempSymbol, 0);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 363))
    {
      v212 = *(_QWORD *)(a1 + 448);
      v213 = *(_QWORD *)(a1 + 264);
      v214 = sub_1C484358C(v213 + 192, 24, 3);
      v215 = *(unsigned __int8 *)(*(_QWORD *)(v213 + 152) + 18) << 16;
      *(_BYTE *)v214 = 2;
      *(_DWORD *)(v214 + 1) = v215 | (*(unsigned __int8 *)(v214 + 4) << 24);
      *(_QWORD *)(v214 + 8) = 0;
      *(_QWORD *)(v214 + 16) = v212;
      v216 = *(_QWORD *)(a1 + 344);
      v217 = *(_QWORD *)(a1 + 264);
      v218 = sub_1C484358C(v217 + 192, 24, 3);
      v219 = *(unsigned __int8 *)(*(_QWORD *)(v217 + 152) + 18) << 16;
      *(_BYTE *)v218 = 2;
      *(_DWORD *)(v218 + 1) = v219 | (*(unsigned __int8 *)(v218 + 4) << 24);
      *(_QWORD *)(v218 + 8) = 0;
      *(_QWORD *)(v218 + 16) = v216;
      v220 = sub_1C484358C(*(_QWORD *)(a1 + 264) + 192, 32, 3);
      *(_BYTE *)v220 = 0;
      *(_DWORD *)(v220 + 1) = (*(unsigned __int8 *)(v220 + 4) << 24) | 0x12;
      *(_QWORD *)(v220 + 8) = 0;
      *(_QWORD *)(v220 + 16) = v214;
      *(_QWORD *)(v220 + 24) = v218;
      (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(a1 + 272) + 424))(*(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 328), v220);
    }
  }
  v221 = *(uint64_t **)(a1 + 528);
  v222 = *(uint64_t **)(a1 + 536);
  while (v221 != v222)
  {
    v223 = *v221;
    v221 += 9;
    (*(void (**)(uint64_t))(*(_QWORD *)v223 + 48))(v223);
  }
  v224 = *(_QWORD *)(a1 + 520);
  v225 = *(_QWORD *)(a1 + 448);
  LODWORD(v452.__r_.__value_.__l.__data_) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 328) + 196)
                                          - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 328) + 192)
                                          + 2;
  v226 = (_QWORD *)sub_1C5FF137C(a1 + 352, (int *)&v452);
  *v226 = v224;
  v226[1] = v225;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  v227 = *(uint64_t **)(a1 + 528);
  v228 = *(uint64_t **)(a1 + 536);
  while (v227 != v228)
  {
    v229 = *v227;
    v227 += 9;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v229 + 56))(v229, *(_QWORD *)(a1 + 280));
  }
  v230 = *(_QWORD *)(a1 + 280);
  if (((*(_DWORD *)(v230 + 640) == 2) & v10) != 0)
  {
    v264 = (llvm::MCObjectFileInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248));
    BBAddrMapSection = llvm::MCObjectFileInfo::getBBAddrMapSection(v264, *(const llvm::MCSection **)(v230 + 80));
    v266 = *(const llvm::MCSymbol **)(a1 + 520);
    v267 = sub_1C62B9A74(*(_QWORD *)(a1 + 272));
    (*(void (**)(_QWORD, unint64_t, _QWORD, __n128))(**(_QWORD **)(a1 + 272) + 168))(*(_QWORD *)(a1 + 272), BBAddrMapSection, 0, v267);
    llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(a1 + 272), v266, ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 248) + 4) + 7) >> 3, 0);
    v268 = v230 + 320;
    v269 = -1;
    v270 = v230 + 320;
    do
    {
      v270 = *(_QWORD *)(v270 + 8);
      ++v269;
    }
    while (v270 != v268);
    llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1 + 272), v269, 0);
    for (k = *(_QWORD *)(v230 + 328); k != v268; k = *(_QWORD *)(k + 8))
    {
      Symbol = (unint64_t)v266;
      if (*(_QWORD *)(*(_QWORD *)(k + 32) + 328) != k)
        Symbol = llvm::MachineBasicBlock::getSymbol((llvm::MachineBasicBlock *)k);
      (*(void (**)(_QWORD, unint64_t, const llvm::MCSymbol *))(**(_QWORD **)(a1 + 272) + 840))(*(_QWORD *)(a1 + 272), Symbol, v266);
      v273 = llvm::MachineBasicBlock::getEndSymbol((llvm::MachineBasicBlock *)k);
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(a1 + 272) + 840))(*(_QWORD *)(a1 + 272), v273, Symbol);
      v274 = *(llvm::MCStreamer **)(a1 + 272);
      v275 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(k + 32) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(k + 32) + 16));
      v276 = sub_1C498FBAC(k);
      v277 = *(_QWORD *)(k + 48) & 0xFFFFFFFFFFFFFFF8;
      if (k + 48 == v277)
      {
        v278 = 0;
      }
      else
      {
        if (!v277 || (*(_BYTE *)v277 & 4) == 0)
        {
          while ((*(_WORD *)(v277 + 44) & 4) != 0)
            v277 = *(_QWORD *)v277 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v275 + 1136))(v275))
          v278 = 2;
        else
          v278 = 0;
      }
      v279 = v278 | v276 | (4 * *(unsigned __int8 *)(k + 184));
      v280 = llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)k) != 0;
      llvm::MCStreamer::emitULEB128IntValue(v274, v279 | (8 * v280), 0);
    }
    sub_1C593C604(*(_QWORD *)(a1 + 272));
    v230 = *(_QWORD *)(a1 + 280);
  }
  if ((*(_BYTE *)(*(_QWORD *)(v230 + 8) + 1042) & 0x10) != 0)
  {
    v402 = (llvm::MCObjectFileInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248));
    StackSizesSection = llvm::MCObjectFileInfo::getStackSizesSection(v402, *(const llvm::MCSection **)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 112)+ 32 * *(unsigned int *)(*(_QWORD *)(a1 + 272) + 120)- 32));
    if (StackSizesSection)
    {
      v404 = *(_QWORD *)(v230 + 56);
      if (!*(_BYTE *)(v404 + 36))
      {
        v405 = StackSizesSection;
        v406 = sub_1C62B9A74(*(_QWORD *)(a1 + 272));
        (*(void (**)(_QWORD, unint64_t, _QWORD, __n128))(**(_QWORD **)(a1 + 272) + 168))(*(_QWORD *)(a1 + 272), v405, 0, v406);
        v407 = *(const llvm::MCSymbol **)(a1 + 520);
        v408 = *(_QWORD *)(v404 + 672) + *(_QWORD *)(v404 + 48);
        v409 = *(llvm::MCStreamer **)(a1 + 272);
        PointerSize = llvm::DataLayout::getPointerSize((llvm::DataLayout *)(*(_QWORD *)(a1 + 248) + 16), *(_DWORD *)(*(_QWORD *)(a1 + 248) + 28));
        llvm::MCStreamer::emitSymbolValue(v409, v407, PointerSize, 0);
        llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1 + 272), v408, 0);
        sub_1C593C604(*(_QWORD *)(a1 + 272));
      }
    }
  }
  v231 = *(uint64_t *****)(a1 + 280);
  v232 = v231[1];
  if (*((char *)v232 + 1095) < 0)
  {
    if (!v232[135])
      goto LABEL_510;
  }
  else if (!*((_BYTE *)v232 + 1095))
  {
    goto LABEL_510;
  }
  v233 = v231[7];
  v234 = v233[6];
  v235 = v233[84];
  v236 = *(llvm::raw_ostream **)(a1 + 512);
  if (v236)
  {
LABEL_396:
    v237 = (*v231)[5];
    v240 = v237[21];
    v238 = v237 + 21;
    v239 = v240;
    v241 = *((_BYTE *)v238 + 23);
    if (v241 >= 0)
      v242 = v238;
    else
      v242 = (uint64_t **)v239;
    v243 = (size_t)v238[1];
    if (v241 >= 0)
      v244 = v241 & 0x7F;
    else
      v244 = v243;
    v245 = (void *)*((_QWORD *)v236 + 4);
    if (v244 <= *((_QWORD *)v236 + 3) - (_QWORD)v245)
    {
      if (v244)
      {
        memcpy(v245, v242, v244);
        *((_QWORD *)v236 + 4) += v244;
      }
    }
    else
    {
      llvm::raw_ostream::write(v236, (const char *)v242, v244);
    }
    v246 = *v231;
    if ((*((_BYTE *)*v231 + 23) & 0x20) == 0)
      goto LABEL_482;
    v247 = ***v246;
    v452.__r_.__value_.__r.__words[0] = (std::string::size_type)*v231;
    v248 = *(_DWORD *)(v247 + 2496);
    if (v248)
    {
      v249 = *(_QWORD *)(v247 + 2480);
      v250 = v248 - 1;
      v251 = v250 & ((v246 >> 4) ^ (v246 >> 9));
      v252 = (uint64_t ****)(v249 + 40 * v251);
      v253 = *v252;
      if (*v252 == v246)
        goto LABEL_417;
      v254 = 0;
      v255 = 1;
      while (v253 != (uint64_t ***)-4096)
      {
        if (v254)
          v256 = 0;
        else
          v256 = v253 == (uint64_t ***)-8192;
        if (v256)
          v254 = v252;
        v257 = v251 + v255++;
        v251 = v257 & v250;
        v252 = (uint64_t ****)(v249 + 40 * v251);
        v253 = *v252;
        if (*v252 == v246)
          goto LABEL_417;
      }
      if (v254)
        v397 = v254;
      else
        v397 = v252;
    }
    else
    {
      v397 = 0;
    }
    v252 = (uint64_t ****)sub_1C541AB24(v247 + 2480, (uint64_t)&v452, (uint64_t *)&v452, v397);
    v398 = v452.__r_.__value_.__r.__words[0];
    v252[3] = 0;
    v252[4] = 0;
    *v252 = (uint64_t ***)v398;
    v252[1] = (uint64_t ***)(v252 + 3);
    v252[2] = (uint64_t ***)0x100000000;
LABEL_417:
    v258 = *((unsigned int *)v252 + 4);
    if ((_DWORD)v258)
    {
      v259 = v252[1] + 1;
      v260 = 16 * v258;
      while (*((_DWORD *)v259 - 2))
      {
        v259 += 2;
        v260 -= 16;
        if (!v260)
          goto LABEL_482;
      }
      v261 = *v259;
      if (*v259)
      {
        v262 = *(llvm::raw_ostream **)(a1 + 512);
        v263 = (_BYTE *)*((_QWORD *)v262 + 4);
        if ((unint64_t)v263 >= *((_QWORD *)v262 + 3))
        {
          v262 = llvm::raw_ostream::write(v262, 58);
        }
        else
        {
          *((_QWORD *)v262 + 4) = v263 + 1;
          *v263 = 58;
        }
        sub_1C5E21910(v262, *(unsigned int *)(v261 + 24), 0, 0, 0);
      }
    }
LABEL_482:
    v304 = *(llvm::raw_ostream **)(a1 + 512);
    v305 = (_BYTE *)*((_QWORD *)v304 + 4);
    if ((unint64_t)v305 >= *((_QWORD *)v304 + 3))
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 512), 58);
    }
    else
    {
      *((_QWORD *)v304 + 4) = v305 + 1;
      *v305 = 58;
    }
    v306 = *v231;
    if ((*((_BYTE *)*v231 + 23) & 0x10) == 0)
      goto LABEL_495;
    v307 = ***v306;
    v308 = *(_QWORD *)(v307 + 152);
    v309 = *(unsigned int *)(v307 + 168);
    if ((_DWORD)v309)
    {
      LODWORD(v310) = (v309 - 1) & ((v306 >> 4) ^ (v306 >> 9));
      v311 = (uint64_t ****)(v308 + 16 * v310);
      v312 = *v311;
      if (*v311 == v306)
      {
LABEL_493:
        v315 = (size_t *)v311[1];
        v318 = *v315;
        v316 = v315 + 2;
        v317 = v318;
        v319 = (_BYTE *)*((_QWORD *)v304 + 4);
        if (v318 <= *((_QWORD *)v304 + 3) - (_QWORD)v319)
        {
          if (v317)
          {
            memcpy(v319, v316, v317);
            v319 = (_BYTE *)(*((_QWORD *)v304 + 4) + v317);
            *((_QWORD *)v304 + 4) = v319;
          }
LABEL_498:
          if ((unint64_t)v319 >= *((_QWORD *)v304 + 3))
          {
            llvm::raw_ostream::write(v304, 9);
          }
          else
          {
            *((_QWORD *)v304 + 4) = v319 + 1;
            *v319 = 9;
          }
          sub_1C5E21910(v304, (unint64_t)v234 + (_QWORD)v235, 0, 0, 0);
          v320 = (_BYTE *)*((_QWORD *)v304 + 4);
          if ((unint64_t)v320 >= *((_QWORD *)v304 + 3))
          {
            llvm::raw_ostream::write(v304, 9);
          }
          else
          {
            *((_QWORD *)v304 + 4) = v320 + 1;
            *v320 = 9;
          }
          v321 = *(llvm::raw_ostream **)(a1 + 512);
          v322 = *((_QWORD *)v321 + 4);
          v323 = *((_QWORD *)v321 + 3) - v322;
          if (*((_BYTE *)v233 + 36))
          {
            if (v323 <= 7)
            {
              v324 = "dynamic\n";
              v325 = 8;
LABEL_509:
              llvm::raw_ostream::write(v321, v324, v325);
              goto LABEL_510;
            }
            *(_QWORD *)v322 = 0xA63696D616E7964;
            v399 = *((_QWORD *)v321 + 4) + 8;
          }
          else
          {
            if (v323 <= 6)
            {
              v324 = "static\n";
              v325 = 7;
              goto LABEL_509;
            }
            *(_DWORD *)(v322 + 3) = 174287220;
            *(_DWORD *)v322 = 1952543859;
            v399 = *((_QWORD *)v321 + 4) + 7;
          }
          *((_QWORD *)v321 + 4) = v399;
          goto LABEL_510;
        }
        llvm::raw_ostream::write(v304, (const char *)v316, v317);
LABEL_495:
        v319 = (_BYTE *)*((_QWORD *)v304 + 4);
        goto LABEL_498;
      }
      v313 = 1;
      while (v312 != (uint64_t ***)-4096)
      {
        v314 = v310 + v313++;
        v310 = v314 & (v309 - 1);
        v312 = *(uint64_t ****)(v308 + 16 * v310);
        if (v312 == v306)
        {
          v311 = (uint64_t ****)(v308 + 16 * v310);
          goto LABEL_493;
        }
      }
    }
    v311 = (uint64_t ****)(v308 + 16 * v309);
    goto LABEL_493;
  }
  v465.__val_ = 0;
  v465.__cat_ = std::system_category();
  v289 = operator new();
  v290 = v289;
  v291 = *((_BYTE *)v232 + 1095);
  v292 = v291;
  if (v291 >= 0)
    v293 = (uint64_t **)(v232 + 134);
  else
    v293 = v232[134];
  v294 = v291 & 0x7F;
  if (v292 >= 0)
    v295 = v294;
  else
    v295 = (uint64_t)v232[135];
  llvm::raw_fd_ostream::raw_fd_ostream(v289, v293, v295, (uint64_t)&v465, 1);
  v296 = *(llvm **)(a1 + 512);
  *(_QWORD *)(a1 + 512) = v290;
  if (v296)
    v296 = (llvm *)(*(uint64_t (**)(llvm *))(*(_QWORD *)v296 + 8))(v296);
  if (!v465.__val_)
  {
    v236 = *(llvm::raw_ostream **)(a1 + 512);
    goto LABEL_396;
  }
  v297 = (llvm::raw_ostream *)llvm::errs(v296);
  v298 = v297;
  v299 = (void *)*((_QWORD *)v297 + 4);
  if (*((_QWORD *)v297 + 3) - (_QWORD)v299 > 0x14uLL)
  {
    qmemcpy(v299, "Could not open file: ", 21);
    *((_QWORD *)v297 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(v297, "Could not open file: ", 0x15uLL);
  }
  std::error_code::message(&v452, &v465);
  if ((v452.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v300 = &v452;
  else
    v300 = (std::string *)v452.__r_.__value_.__r.__words[0];
  if ((v452.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v452.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v452.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v298, (const char *)v300, size);
  if (SHIBYTE(v452.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v452.__r_.__value_.__l.__data_);
LABEL_510:
  v326 = **(_QWORD **)(a1 + 280);
  v327 = *(_QWORD *)(v326 + 112);
  if (!v327)
  {
    v353 = 0;
    LODWORD(v366) = 0;
    v352 = 1;
    goto LABEL_592;
  }
  LODWORD(v328) = *(_DWORD *)(v327 + 8);
  if (!(_DWORD)v328)
    goto LABEL_651;
  v329 = *(_QWORD *)(v327 + 40);
  if (!v329)
  {
LABEL_549:
    LOBYTE(v328) = 0;
LABEL_550:
    v350 = 1;
    goto LABEL_551;
  }
  v330 = *(_DWORD *)(v329 + 40);
  if (!v330)
  {
LABEL_548:
    v329 = 0;
    goto LABEL_549;
  }
  v331 = *(_QWORD *)(v329 + 24);
  v332 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v332 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v400 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v400 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v400;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v333 = __ROR8__(qword_1ED7EAC80 ^ 0xA78AF1B51BD984F2, 30);
  v334 = 0x9DDFEA08EB382D69
       * ((qword_1ED7EAC80 + 0xBA5F5326B54B2D6) ^ ((0x9DDFEA08EB382D69
                                                    * ((v333 - 0x2BFCB67E25672AFALL) ^ (qword_1ED7EAC80
                                                                                      + 0xBA5F5326B54B2D6))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v333 - 0x2BFCB67E25672AFALL) ^ (qword_1ED7EAC80 + 0xBA5F5326B54B2D6))));
  v335 = -348639895 * ((v334 >> 47) ^ v334);
  for (m = 1; ; ++m)
  {
    v337 = v335 & (v330 - 1);
    v338 = (uint64_t *)(v331 + 24 * v337);
    v339 = *v338;
    if (*v338 == -1)
    {
      if ("patchable-function-prefix" == (char *)-1)
        goto LABEL_535;
      goto LABEL_518;
    }
    if (v339 != -2)
      break;
    if ("patchable-function-prefix" == (char *)-2)
      goto LABEL_535;
LABEL_518:
    if (v339 == -1)
      goto LABEL_548;
    v335 = m + v337;
  }
  if (v338[1] != 25)
    goto LABEL_518;
  v340 = *(_QWORD *)v339 == 0x6C62616863746170 && *(_QWORD *)(v339 + 8) == 0x6974636E75662D65;
  v341 = v340 && *(_QWORD *)(v339 + 16) == 0x69666572702D6E6FLL;
  if (!v341 || *(_BYTE *)(v339 + 24) != 120)
    goto LABEL_518;
LABEL_535:
  v329 = v338[2];
  if (!v329)
    goto LABEL_549;
  v328 = *(unsigned int *)(v329 + 16);
  if (!(_DWORD)v328)
  {
LABEL_651:
    v329 = 0;
    goto LABEL_550;
  }
  v343 = 0;
  v344 = (unsigned __int8 *)(*(unsigned int *)(v329 + 12) + v329 + 25);
  v345 = *(unsigned int *)(v329 + 16);
  while (1)
  {
    v347 = *v344++;
    v346 = v347;
    if ((v347 - 48) < 0xA)
    {
      v348 = -48;
      goto LABEL_540;
    }
    if ((v346 - 97) < 0x1A)
    {
      v348 = -87;
      goto LABEL_540;
    }
    if ((v346 - 65) > 0x19)
      break;
    v348 = -55;
LABEL_540:
    v349 = v348 + v346;
    if (v349 > 9)
    {
      v329 = v343;
      goto LABEL_661;
    }
    v329 = 10 * v343 + v349;
    if (v343 > v329 / 0xA)
    {
      LOBYTE(v328) = 1;
      goto LABEL_550;
    }
    v343 = v329;
    if (!--v345)
      goto LABEL_661;
  }
  v329 = v343;
LABEL_661:
  v350 = v345 == v328;
  LOBYTE(v328) = v345 != 0;
LABEL_551:
  v351 = *(_QWORD *)(v326 + 112);
  v352 = v328 | v350;
  if (v329 >= 0x100000000)
    v353 = 0;
  else
    v353 = v329;
  if (!v351 || !*(_DWORD *)(v351 + 8))
  {
LABEL_589:
    v327 = 0;
LABEL_590:
    LODWORD(v366) = 0;
LABEL_592:
    v374 = 1;
    goto LABEL_593;
  }
  v327 = *(_QWORD *)(v351 + 40);
  if (!v327)
    goto LABEL_590;
  v354 = *(_DWORD *)(v327 + 40);
  if (!v354)
  {
    v327 = 0;
    LODWORD(v366) = 0;
    v374 = 1;
    goto LABEL_593;
  }
  v355 = *(_QWORD *)(v327 + 24);
  v356 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v356 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v401 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v401 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v401;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v357 = __ROR8__(qword_1ED7EAC80 ^ 0xD0DB31C61410D441, 30);
  v358 = 0x9DDFEA08EB382D69
       * ((qword_1ED7EAC80 - 0x1DAA4ADE8CE29C7ALL) ^ ((0x9DDFEA08EB382D69
                                                     * ((v357 - 0x447750EBFF2F1972) ^ (qword_1ED7EAC80
                                                                                       - 0x1DAA4ADE8CE29C7ALL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v357 - 0x447750EBFF2F1972) ^ (qword_1ED7EAC80 - 0x1DAA4ADE8CE29C7ALL))));
  v359 = -348639895 * ((v358 >> 47) ^ v358);
  for (n = 1; ; ++n)
  {
    v361 = v359 & (v354 - 1);
    v362 = v355 + 24 * v361;
    v363 = *(_QWORD **)v362;
    if (*(_QWORD *)v362 == -1)
    {
      if ("patchable-function-entry" == (char *)-1)
        goto LABEL_576;
      goto LABEL_562;
    }
    if (v363 != (_QWORD *)-2)
      break;
    if ("patchable-function-entry" == (char *)-2)
      goto LABEL_576;
LABEL_562:
    if (v363 == (_QWORD *)-1)
      goto LABEL_589;
    v359 = n + v361;
  }
  if (*(_QWORD *)(v362 + 8) != 24)
    goto LABEL_562;
  v364 = *v363 == 0x6C62616863746170 && v363[1] == 0x6974636E75662D65;
  if (!v364 || v363[2] != 0x7972746E652D6E6FLL)
    goto LABEL_562;
LABEL_576:
  v327 = *(_QWORD *)(v362 + 16);
  if (!v327)
    goto LABEL_590;
  v366 = *(unsigned int *)(v327 + 16);
  if (!(_DWORD)v366)
  {
    v327 = 0;
    goto LABEL_592;
  }
  v367 = 0;
  v368 = (unsigned __int8 *)(*(unsigned int *)(v327 + 12) + v327 + 25);
  v369 = *(unsigned int *)(v327 + 16);
  while (1)
  {
    v371 = *v368++;
    v370 = v371;
    if ((v371 - 48) < 0xA)
    {
      v372 = -48;
      goto LABEL_581;
    }
    if ((v370 - 97) < 0x1A)
    {
      v372 = -87;
      goto LABEL_581;
    }
    if ((v370 - 65) > 0x19)
      break;
    v372 = -55;
LABEL_581:
    v373 = v372 + v370;
    if (v373 > 9)
    {
      v327 = v367;
      goto LABEL_664;
    }
    v327 = 10 * v367 + v373;
    if (v367 > v327 / 0xA)
    {
      LODWORD(v366) = 1;
      goto LABEL_592;
    }
    v367 = v327;
    if (!--v369)
      goto LABEL_664;
  }
  v327 = v367;
LABEL_664:
  v374 = v369 == v366;
  LODWORD(v366) = v369 != 0;
LABEL_593:
  v375 = v366 | v374;
  if (v327 >= 0x100000000)
    LODWORD(v327) = 0;
  v376 = v352 ^ 1;
  if (!v353)
    v376 = 0;
  v16 = (_DWORD)v327 == 0;
  v377 = v375 ^ 1;
  if (v16)
    v377 = 0;
  if ((v376 & 1) != 0 || v377)
  {
    v378 = *(_QWORD *)(a1 + 248);
    if (*(_DWORD *)(v378 + 492) == 3)
    {
      v379 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(v378 + 248) + 4) + 7) >> 3;
      v380 = *(_QWORD *)(a1 + 256);
      if (*(_BYTE *)(v380 + 464)
        || (v386 = *(_DWORD *)(v380 + 456), v386 >= 2) && (v386 != 2 || *(int *)(v380 + 460) >= 36))
      {
        v381 = *(_QWORD ***)(v326 + 48);
        if (v381)
        {
          v382 = *v381;
          v384 = (const std::error_category *)*v382;
          v381 = (_QWORD **)(v382 + 9);
          v383 = v384;
          v385 = 643;
        }
        else
        {
          v383 = 0;
          v385 = 131;
        }
        v387 = *(_BYTE **)(a1 + 328);
      }
      else
      {
        v383 = 0;
        v381 = 0;
        v387 = 0;
        v385 = 3;
      }
      v388 = *(_QWORD *)(a1 + 264);
      v389 = *(_QWORD *)(a1 + 272);
      v452.__r_.__value_.__r.__words[0] = (std::string::size_type)"__patchable_function_entries";
      LOWORD(v454) = 259;
      v468 = 261;
      *(_QWORD *)&v465.__val_ = v381;
      v465.__cat_ = v383;
      ELFSection = llvm::MCContext::getELFSection(v388, (llvm::Twine *)&v452, 1, v385, 0, (unsigned __int8 *)&v465, *(_QWORD *)(v326 + 48) != 0, -1, v387);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v389 + 168))(v389, ELFSection, 0);
      sub_1C5FECEF4((_QWORD *)a1, (63 - __clz(v379)), 0, 0);
      llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(a1 + 272), *(const llvm::MCSymbol **)(a1 + 320), v379, 0);
    }
  }
  if (*(_BYTE *)(a1 + 504))
  {
    v391 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 120))(*(_QWORD *)(a1 + 272));
    v392 = (_OWORD *)*((_QWORD *)v391 + 4);
    if (*((_QWORD *)v391 + 3) - (_QWORD)v392 > 0xFuLL)
    {
      *v392 = *(_OWORD *)"-- End function\n";
      *((_QWORD *)v391 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(v391, "-- End function\n", 0x10uLL);
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 152))(*(_QWORD *)(a1 + 272));
  v438 = &off_1E814E790;
  v393 = (char *)v447;
  if ((_DWORD)v448)
  {
    v394 = (unint64_t)v448 << 6;
    do
    {
      v395 = (void **)&v393[v394];
      if (v393[v394 - 17] < 0)
        operator delete(*(v395 - 5));
      if (*((char *)v395 - 41) < 0)
        operator delete(*(v395 - 8));
      v394 -= 64;
    }
    while (v394);
    v393 = (char *)v447;
  }
  if (v393 != v449)
    free(v393);
}

uint64_t sub_1C5FF137C(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  _DWORD *v21;
  BOOL v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  int v27;

  v4 = *a2;
  v26 = *a2;
  v27 = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)a1;
    v7 = v5 - 1;
    v8 = (v5 - 1) & (37 * v4);
    v9 = (_DWORD *)(*(_QWORD *)a1 + 8 * v8);
    v10 = *v9;
    if (v4 == *v9)
    {
LABEL_20:
      v19 = *(_DWORD *)(v6 + 8 * v8 + 4);
      v18 = *(_QWORD *)(a1 + 24);
      return v18 + 24 * v19 + 8;
    }
    v11 = 0;
    v12 = 1;
    while (v10 != -1)
    {
      if (v11)
        v22 = 0;
      else
        v22 = v10 == -2;
      if (v22)
        v11 = v9;
      v23 = v8 + v12++;
      v8 = v23 & v7;
      v9 = (_DWORD *)(v6 + 8 * v8);
      v10 = *v9;
      if (v4 == *v9)
        goto LABEL_20;
    }
    if (v11)
      v13 = v11;
    else
      v13 = v9;
  }
  else
  {
    v13 = 0;
  }
  v14 = sub_1C476C0AC(a1, (uint64_t)&v26, &v26, v13);
  *v14 = v26;
  v14[1] = v27;
  *((_QWORD *)&v24 + 1) = 0;
  v25 = 0;
  LODWORD(v24) = *a2;
  v15 = *(_QWORD *)(a1 + 32);
  if (v15 >= *(_QWORD *)(a1 + 40))
  {
    v21 = v14;
    v17 = sub_1C4D8DBBC((void **)(a1 + 24), (uint64_t)&v24);
    v14 = v21;
  }
  else
  {
    v16 = v24;
    *(_QWORD *)(v15 + 16) = v25;
    *(_OWORD *)v15 = v16;
    v17 = (char *)(v15 + 24);
  }
  *(_QWORD *)(a1 + 32) = v17;
  v18 = *(_QWORD *)(a1 + 24);
  v19 = -1431655765 * ((unint64_t)&v17[-v18] >> 3) - 1;
  v14[1] = v19;
  return v18 + 24 * v19 + 8;
}

BOOL sub_1C5FF14CC(uint64_t *a1, const llvm::Value *a2)
{
  BOOL v2;
  uint64_t v4;
  int v5;
  llvm::Value **v6;

  v2 = a1[64] == a1[65] && *((_BYTE *)a1 + 636) == 0;
  if (!v2 || *(_BYTE *)(a1[4] + 2108))
    return 1;
  v4 = *a1;
  if ((*(_WORD *)(*a1 + 18) & 8) == 0)
    return 0;
  v5 = *(_DWORD *)(v4 + 20);
  if ((v5 & 0x40000000) != 0)
    v6 = *(llvm::Value ***)(v4 - 8);
  else
    v6 = (llvm::Value **)(v4 - 32 * (v5 & 0x7FFFFFF));
  return llvm::classifyEHPersonality(*v6, a2) == 0;
}

unint64_t sub_1C5FF1544(uint64_t a1, uint64_t a2)
{
  return llvm::MCContext::createTempSymbol(*(_QWORD *)(a1 + 264), a2, 1);
}

uint64_t sub_1C5FF1550(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *k;
  _QWORD *v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  BOOL v30;
  char v31;
  char v32;
  void *v33;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void (**v43)(llvm::raw_ostream *__hidden);
  void (**v44)(llvm::raw_ostream *__hidden);
  void (*v45)(llvm::raw_ostream *__hidden);
  size_t *v46;
  size_t v47;
  const void *v48;
  size_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  unint64_t COFFSection;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  const void *v70;
  const void *v71;
  char v72;
  const void *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (**v78)(llvm::raw_ostream *__hidden);
  const void *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  llvm::GlobalValue *v90;
  BOOL v91;
  const llvm::GlobalValue *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  llvm::PointerType *v97;
  _DWORD *v98;
  const llvm::GlobalValue *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t m;
  uint64_t v104;
  unsigned int v105;
  char v106;
  uint64_t v107;
  void (**v108)(llvm::raw_ostream *__hidden);
  uint64_t v109;
  uint64_t n;
  const llvm::GlobalValue *v111;
  uint64_t AnalysisPass;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t ELFSection;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const llvm::GlobalValue *v134;
  const llvm::GlobalValue *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const llvm::GlobalValue **v141;
  const llvm::GlobalValue *v142;
  int v143;
  int v144;
  const llvm::GlobalValue *v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  llvm::GlobalValue *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  void *Partition;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t NamedMetadata;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __n128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  unsigned __int8 v188[32];
  __int16 v189;
  void *__p;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD v198[2];
  char v199;
  __int16 v200;
  void *Symbol;
  __int128 v202;
  uint64_t v203;
  _WORD v204[60];
  char v205;
  void (**v206)(llvm::raw_ostream *__hidden);
  __int128 v207;
  _QWORD v208[2];
  char v209;
  uint64_t v210;
  int v211;
  void **p_p;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 280) = 0;
  if (*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248)) + 944))
  {
    for (i = *(_QWORD *)(a2 + 16); i != a2 + 8; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v5 = i - 56;
      else
        v5 = 0;
      v6 = *(_DWORD *)(v5 + 32);
      if ((v6 & 0xC0) == 0x80)
      {
        if (i && *(_BYTE *)(v5 + 16) == 3)
        {
          if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) != 0)
            goto LABEL_16;
        }
        else if (*(_BYTE *)(v5 + 16) || (v6 & 0x800000) != 0 || *(_QWORD *)(v5 + 72) != v5 + 72)
        {
LABEL_16:
          if ((*(_BYTE *)(v5 + 80) & 1) != 0)
          {
            v7 = v6 & 0xF;
            if (((v7 - 7) < 2 || (v7 - 1) <= 2)
              && *(unsigned __int8 *)(*(_QWORD *)(v5 - 32) + 16) <= 3u)
            {
              v8 = *(_QWORD *)(v5 + 8);
              if (v8)
              {
                v9 = 0;
                do
                {
                  if (*(unsigned __int8 *)(*(_QWORD *)(v8 + 24) + 16) >= 0x15u)
                    v10 = 0;
                  else
                    v10 = *(_QWORD *)(v8 + 24);
                  v9 += sub_1C5FF7410(v10);
                  v8 = *(_QWORD *)(v8 + 8);
                }
                while (v8);
                if (v9)
                {
                  Symbol = (void *)llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), (const llvm::GlobalValue *)v5);
                  v11 = sub_1C63BCBDC(a1 + 400, (unint64_t *)&Symbol);
                  *(_QWORD *)v11 = v5;
                  *(_DWORD *)(v11 + 8) = v9;
                }
              }
            }
          }
        }
      }
    }
  }
  v12 = a2 + 8;
  for (j = *(_QWORD *)(a2 + 16); j != v12; j = *(_QWORD *)(j + 8))
  {
    if (j)
      v14 = j - 56;
    else
      v14 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 208))(a1, v14);
  }
  if (*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248)) + 944))
  {
    Symbol = (char *)&v202 + 8;
    *(_QWORD *)&v202 = 0x800000000;
    v15 = *(_QWORD *)(a1 + 424);
    v16 = *(_QWORD *)(a1 + 432);
    if (v15 != v16)
    {
      v80 = 0;
      do
      {
        if (*(_DWORD *)(v15 + 16))
        {
          v81 = *(_QWORD *)(v15 + 8);
          if (v80 >= DWORD1(v202))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Symbol, (uint64_t)&v202 + 8, v80 + 1, 8);
            v80 = v202;
          }
          *((_QWORD *)Symbol + v80) = v81;
          v80 = v202 + 1;
          LODWORD(v202) = v202 + 1;
        }
        v15 += 24;
      }
      while (v15 != v16);
    }
    sub_1C5015F50((_DWORD *)(a1 + 400));
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a1 + 424);
    v17 = (uint64_t *)Symbol;
    if ((_DWORD)v202)
    {
      v82 = 8 * v202;
      do
      {
        v83 = *v17++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 208))(a1, v83);
        v82 -= 8;
      }
      while (v82);
      v17 = (uint64_t *)Symbol;
    }
    if (v17 != (uint64_t *)((char *)&v202 + 8))
      free(v17);
  }
  v18 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248));
  v19 = (_QWORD *)(a2 + 24);
  for (k = *(_QWORD **)(a2 + 32); k != v19; k = (_QWORD *)k[1])
  {
    if (k)
      v21 = k - 7;
    else
      v21 = 0;
    v22 = *((_DWORD *)v21 + 8);
    if ((v22 & 0xF) != 1)
    {
      if (k && *((_BYTE *)v21 + 16) == 3)
      {
        if ((*((_DWORD *)v21 + 5) & 0x7FFFFFF) != 0)
          continue;
      }
      else if (*((_BYTE *)v21 + 16) || (v22 & 0x800000) != 0 || (_QWORD *)v21[9] != v21 + 9)
      {
        continue;
      }
    }
    v23 = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), (const llvm::GlobalValue *)v21);
    v24 = *((_DWORD *)v21 + 8);
    if (*(_DWORD *)(*(_QWORD *)(a1 + 248) + 492) == 9)
    {
      if ((v24 & 0x2000) == 0)
      {
        v25 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v18 + 240))(v18, v21);
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 432))(a1, v21, v25);
        (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)a1 + 432))(a1, v21, v23);
      }
    }
    else
    {
      v26 = (v24 >> 4) & 3;
      if (v26 == 2)
      {
        v27 = (_DWORD *)(*(_QWORD *)(a1 + 256) + 404);
      }
      else
      {
        if (v26 != 1)
          continue;
        v27 = (_DWORD *)(*(_QWORD *)(a1 + 256) + 400);
      }
      if (*v27)
        (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 272) + 304))(*(_QWORD *)(a1 + 272), v23);
    }
  }
  v28 = *(_QWORD *)(**(_QWORD **)a2 + 64);
  if (v28 && dword_1ED835B10 != 2)
  {
    if (dword_1ED835B10 == 1)
    {
      v29 = *(_DWORD **)(v28 + 24);
      goto LABEL_68;
    }
    v29 = *(_DWORD **)(v28 + 24);
    if (!v29[6] && (v29[2] & 0xFFFFFFFE) == 2)
    {
LABEL_68:
      LOBYTE(Symbol) = 0;
      v205 = 0;
      if (!*(_BYTE *)(v28 + 56))
      {
        v30 = 1;
LABEL_70:
        __p = 0;
        v191 = 0;
        v192 = 0;
        LODWORD(v207) = 0;
        v209 = 0;
        v210 = 0;
        v206 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
        p_p = &__p;
        v211 = 0;
        v208[0] = 0;
        v208[1] = 0;
        *((_QWORD *)&v207 + 1) = 0;
        if (v30)
        {
          v31 = 0;
          LOBYTE(v198[0]) = 0;
        }
        else
        {
          v198[0] = Symbol;
          v198[1] = v202;
          v31 = 1;
        }
        v199 = v31;
        (*(void (**)(unsigned __int8 *__return_ptr, _DWORD *, void (***)(llvm::raw_ostream *__hidden)))(*(_QWORD *)v29 + 24))(v188, v29, &v206);
        (*(void (**)(_QWORD))(**(_QWORD **)v188 + 16))(*(_QWORD *)v188);
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 272) + 168))(*(_QWORD *)(a1 + 272), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 168) + 448), 0);
        v32 = *((_BYTE *)p_p + 23);
        if (v32 >= 0)
          v33 = p_p;
        else
          v33 = *p_p;
        if (v32 >= 0)
          v34 = (void *)(v32 & 0x7F);
        else
          v34 = p_p[1];
        (*(void (**)(_QWORD, void *, void *))(**(_QWORD **)(a1 + 272) + 496))(*(_QWORD *)(a1 + 272), v33, v34);
        v35 = *(_QWORD *)v188;
        *(_QWORD *)v188 = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v206 = off_1E81A6E70;
        if (v211 == 1 && *((_QWORD *)&v207 + 1))
          MEMORY[0x1CAA32F9C](*((_QWORD *)&v207 + 1), 0x1000C8077774924);
        if (SHIBYTE(v192) < 0)
          operator delete(__p);
        if (v205 && Symbol != &v203)
          free(Symbol);
        goto LABEL_90;
      }
      v71 = *(const void **)(v28 + 32);
      v69 = v28 + 32;
      v70 = v71;
      v72 = *(_BYTE *)(v69 + 23);
      if (v72 >= 0)
        v73 = (const void *)v69;
      else
        v73 = v70;
      v74 = *(_QWORD *)(v69 + 8);
      if (v72 >= 0)
        v75 = v72 & 0x7F;
      else
        v75 = v74;
      v206 = (void (**)(llvm::raw_ostream *__hidden))v208;
      v207 = xmmword_1C85F20B0;
      if (v75 >= 0x81)
      {
        v79 = v73;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v206, v208, v75, 1);
        v73 = v79;
        v78 = v206;
        v76 = v207;
      }
      else
      {
        v76 = 0;
        v77 = 0;
        v78 = (void (**)(llvm::raw_ostream *__hidden))v208;
        if (!v75)
        {
LABEL_139:
          *(_QWORD *)&v207 = v77 + v75;
          sub_1C63BDA74((uint64_t)&Symbol, (uint64_t)&v206);
          if (v206 != v208)
            free(v206);
          llvm::sys::fs::make_absolute((uint64_t)&Symbol);
          v30 = v205 == 0;
          goto LABEL_70;
        }
      }
      memcpy((char *)v78 + v76, v73, v75);
      v77 = v207;
      goto LABEL_139;
    }
  }
LABEL_90:
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*v18 + 40))(v18, *(_QWORD *)(a1 + 272), a2);
  v36 = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 492);
  if (v36 == 3)
  {
    v37 = *(_QWORD *)(a1 + 288);
    v38 = *(_QWORD *)(v37 + 2072);
    if (!v38)
    {
      v38 = operator new();
      *(_QWORD *)(v38 + 8) = 0;
      *(_QWORD *)(v38 + 16) = 0;
      *(_QWORD *)v38 = &off_1E8145810;
      *(_DWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v37 + 2072) = v38;
    }
    llvm::MachineModuleInfoImpl::getSortedStubs((unsigned int *)(v38 + 8), (uint64_t)&Symbol);
    v39 = Symbol;
    if (Symbol != (void *)v202)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 272) + 168))(*(_QWORD *)(a1 + 272), v18[4], 0);
      sub_1C5FECEF4((_QWORD *)a1, (63 - __clz(((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 504) + 4) + 7) >> 3)), 0, 0);
      v39 = Symbol;
      v40 = (_QWORD *)v202;
      if (Symbol != (void *)v202)
      {
        do
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272), *v39, 0);
          llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(a1 + 272), (const llvm::MCSymbol *)(v39[1] & 0xFFFFFFFFFFFFFFF8), ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 504) + 4) + 7) >> 3, 0);
          v39 += 2;
        }
        while (v39 != v40);
        v39 = Symbol;
      }
    }
    if (v39)
    {
      *(_QWORD *)&v202 = v39;
      operator delete(v39);
    }
    v36 = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 492);
  }
  if (v36 == 1)
  {
    v41 = *(_QWORD *)(a1 + 288);
    v42 = *(_QWORD *)(v41 + 2072);
    if (!v42)
    {
      v42 = operator new();
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v42 + 16) = 0;
      *(_QWORD *)v42 = &off_1E8145838;
      *(_DWORD *)(v42 + 24) = 0;
      *(_QWORD *)(v41 + 2072) = v42;
    }
    llvm::MachineModuleInfoImpl::getSortedStubs((unsigned int *)(v42 + 8), (uint64_t)&v206);
    v43 = v206;
    v44 = (void (**)(llvm::raw_ostream *__hidden))v207;
    if (v206 != (void (**)(llvm::raw_ostream *__hidden))v207)
    {
      while (1)
      {
        Symbol = &v203;
        qmemcpy(&v203, ".rdata$", 7);
        v202 = xmmword_1C8677320;
        v45 = *v43;
        if ((*(_BYTE *)*v43 & 4) == 0)
          break;
        v46 = (size_t *)*((_QWORD *)v45 - 1);
        v49 = *v46;
        v48 = v46 + 2;
        v47 = v49;
        v50 = v49 + 7;
        if (v49 + 7 >= 0x101)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&Symbol, &v203, v50, 1);
          v52 = Symbol;
          v51 = v202;
        }
        else
        {
          if (!v47)
          {
            v55 = 1;
            goto LABEL_118;
          }
          v51 = 7;
          v52 = &v203;
        }
        memcpy((char *)v52 + v51, v48, v47);
        v53 = Symbol;
        v54 = v202;
        v45 = *v43;
        v55 = *(_QWORD *)*v43 & 4;
LABEL_109:
        v56 = v54 + v47;
        *(_QWORD *)&v202 = v54 + v47;
        v57 = *(_QWORD *)(a1 + 272);
        if (v55)
        {
          v58 = (_QWORD *)*((_QWORD *)v45 - 1);
          v61 = (void *)*v58;
          v59 = v58 + 2;
          v60 = v61;
        }
        else
        {
          v59 = 0;
          v60 = 0;
        }
        COFFSection = llvm::MCContext::getCOFFSection(*(_QWORD *)(a1 + 264), v53, v56, 1073745984, 4, v59, v60, 2u, 0xFFFFFFFF, 0);
        (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v57 + 168))(v57, COFFSection, 0);
        sub_1C5FECEF4((_QWORD *)a1, (63 - __clz(((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 504) + 4) + 7) >> 3)), 0, 0);
        (*(void (**)(_QWORD, void (*)(llvm::raw_ostream *__hidden), uint64_t))(**(_QWORD **)(a1 + 272) + 304))(*(_QWORD *)(a1 + 272), *v43, 9);
        (*(void (**)(_QWORD, void (*)(llvm::raw_ostream *__hidden), _QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272), *v43, 0);
        llvm::MCStreamer::emitSymbolValue(*(llvm::MCStreamer **)(a1 + 272), (const llvm::MCSymbol *)((unint64_t)v43[1] & 0xFFFFFFFFFFFFFFF8), ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 504) + 4) + 7) >> 3, 0);
        if (Symbol != &v203)
          free(Symbol);
        v43 += 2;
        if (v43 == v44)
        {
          v43 = v206;
          goto LABEL_120;
        }
      }
      v55 = 0;
      v47 = 0;
LABEL_118:
      v53 = &v203;
      v54 = 7;
      goto LABEL_109;
    }
LABEL_120:
    if (v43)
    {
      *(_QWORD *)&v207 = v43;
      operator delete(v43);
    }
  }
  v63 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 16);
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 72))(v63);
  v64 = *(uint64_t **)(a1 + 528);
  v65 = *(uint64_t **)(a1 + 536);
  if (v64 == v65)
  {
    v67 = *(_QWORD *)(a1 + 528);
  }
  else
  {
    do
    {
      v66 = *v64;
      v64 += 9;
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 32))(v66);
    }
    while (v64 != v65);
    v67 = *(_QWORD *)(a1 + 528);
    v64 = *(uint64_t **)(a1 + 536);
  }
  if ((uint64_t *)(v67 + 72 * *(_QWORD *)(a1 + 552)) != v64)
  {
    v68 = (uint64_t *)(v67 + 72 * *(_QWORD *)(a1 + 552));
    while (v64 != v68)
    {
      v85 = *(v64 - 9);
      v64 -= 9;
      v84 = v85;
      *v64 = 0;
      if (v85)
        (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
    }
    *(_QWORD *)(a1 + 536) = v68;
  }
  *(_QWORD *)(a1 + 576) = 0;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 256) + 384))
  {
    v86 = *(_QWORD **)(a2 + 32);
    v87 = *(_QWORD *)(a2 + 16);
    Symbol = v86;
    *(_QWORD *)&v202 = v87;
    *((_QWORD *)&v202 + 1) = a2 + 24;
    v203 = a2 + 8;
    while (1)
    {
      if (v86 == v19 && v87 == v12)
      {
        v88 = *((_QWORD **)&v202 + 1) == v19 && v203 == v12;
        if (v88)
          break;
      }
      v89 = 0;
      do
      {
        v90 = (llvm::GlobalValue *)(*(uint64_t (**)(void **))((char *)&off_1E81AAFC0 + v89))(&Symbol);
        if (v90)
          v91 = 1;
        else
          v91 = v89 == 16;
        v89 += 16;
      }
      while (!v91);
      v92 = v90;
      if (llvm::GlobalValue::hasExternalWeakLinkage(v90))
      {
        v93 = *(_QWORD *)(a1 + 272);
        v94 = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), v92);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v93 + 304))(v93, v94, 25);
      }
      v95 = 0;
      do
      {
        if (((*(uint64_t (**)(void **))((char *)&off_1E81AAFA0 + v95))(&Symbol) & 1) != 0)
          break;
        v88 = v95 == 16;
        v95 += 16;
      }
      while (!v88);
      v86 = Symbol;
      v87 = v202;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1) & 1) != 0)
    {
      v96 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), "swift_async_extendedFramePointerFlags", 0x25uLL);
      if (!v96 || *(_BYTE *)(v96 + 16) != 3 || (*(_DWORD *)(v96 + 32) & 0xFu) - 7 <= 1)
      {
        v97 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)a2 + 1912), 0);
        v98 = operator new(0x78uLL);
        v98[13] = v98[13] & 0x38000000 | 1;
        v99 = (const llvm::GlobalValue *)(v98 + 8);
        *(_QWORD *)v98 = 0;
        *((_QWORD *)v98 + 1) = 0;
        *((_QWORD *)v98 + 2) = 0;
        *((_QWORD *)v98 + 3) = v98 + 8;
        Symbol = "swift_async_extendedFramePointerFlags";
        v204[0] = 259;
        llvm::GlobalVariable::GlobalVariable((uint64_t)(v98 + 8), a2, v97, 0, 9, 0, (uint64_t)&Symbol, 0, 0, 0, 0);
        v100 = *(_QWORD *)(a1 + 272);
        v101 = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), v99);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v100 + 304))(v100, v101, 25);
      }
    }
  }
  v206 = (void (**)(llvm::raw_ostream *__hidden))&v207 + 1;
  *(_QWORD *)&v207 = 0x1000000000;
  Symbol = v204;
  *(_QWORD *)&v202 = v204;
  *((_QWORD *)&v202 + 1) = 16;
  LODWORD(v203) = 0;
  v102 = a2 + 40;
  for (m = *(_QWORD *)(a2 + 48); m != v102; m = *(_QWORD *)(m + 8))
  {
    if (m)
    {
      v104 = m - 48;
      do
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&Symbol, v104);
        v105 = v207;
        if (!v106)
          break;
        if (v207 >= DWORD1(v207))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)&v207 + 8, v207 + 1, 8);
          v105 = v207;
        }
        v206[v105] = (void (*)(llvm::raw_ostream *__hidden))v104;
        v105 = v207 + 1;
        LODWORD(v207) = v207 + 1;
        v104 = *(_QWORD *)(v104 - 32);
        if (!v104)
          break;
      }
      while (*(_BYTE *)(v104 + 16) == 1);
      if (v105)
      {
        v107 = v105;
        v108 = v206 - 1;
        do
          sub_1C63BCCB0((llvm::TargetMachine **)a1, a2, (llvm::GlobalValue *)v108[v107--]);
        while (v107 * 8);
      }
    }
    LODWORD(v207) = 0;
  }
  v109 = a2 + 56;
  for (n = *(_QWORD *)(a2 + 64); n != v109; n = *(_QWORD *)(n + 8))
  {
    if (n)
      v111 = (const llvm::GlobalValue *)(n - 56);
    else
      v111 = 0;
    sub_1C63BD078(a1, v111);
  }
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::GCModuleInfo::ID, 1);
  v113 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::GCModuleInfo::ID);
  v114 = *(unsigned int *)(v113 + 40);
  if ((_DWORD)v114)
  {
    v115 = v113;
    v116 = 8 * v114;
    v117 = *(_QWORD *)(v113 + 32) - 8;
    do
    {
      v118 = sub_1C5FEBE38(a1, *(_QWORD *)(v117 + v116));
      if (v118)
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v118 + 24))(v118, a2, v115, a1);
      v116 -= 8;
    }
    while (v116);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 366))
  {
    __p = "llvm.ident";
    LOWORD(v194) = 259;
    NamedMetadata = llvm::Module::getNamedMetadata(a2, (uint64_t)&__p);
    if (NamedMetadata)
    {
      v173 = NamedMetadata;
      v174 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
      if ((_DWORD)v174)
      {
        v175 = 0;
        v176 = 8 * v174;
        do
        {
          v177 = *(_QWORD *)(**(_QWORD **)(v173 + 48) + v175);
          v178 = *(_QWORD **)(*(_QWORD *)(v177 - 8 * *(unsigned int *)(v177 + 8)) + 8);
          (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 272) + 672))(*(_QWORD *)(a1 + 272), v178 + 3, *v178);
          v175 += 8;
        }
        while (v176 != v175);
      }
    }
  }
  v119 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248));
  v120 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 200))(v119);
  if (v120)
  {
    v179 = v120;
    __p = "llvm.commandline";
    LOWORD(v194) = 259;
    v180 = llvm::Module::getNamedMetadata(a2, (uint64_t)&__p);
    if (v180)
    {
      v181 = v180;
      if (*(_DWORD *)(*(_QWORD *)(v180 + 48) + 8))
      {
        v182 = sub_1C62B9A74(*(_QWORD *)(a1 + 272));
        (*(void (**)(_QWORD, uint64_t, _QWORD, __n128))(**(_QWORD **)(a1 + 272) + 168))(*(_QWORD *)(a1 + 272), v179, 0, v182);
        llvm::MCStreamer::emitZeros(*(llvm::MCStreamer **)(a1 + 272), 1);
        v183 = *(unsigned int *)(*(_QWORD *)(v181 + 48) + 8);
        if ((_DWORD)v183)
        {
          v184 = 0;
          v185 = 8 * v183;
          do
          {
            v186 = *(_QWORD *)(**(_QWORD **)(v181 + 48) + v184);
            v187 = *(_QWORD **)(*(_QWORD *)(v186 - 8 * *(unsigned int *)(v186 + 8)) + 8);
            (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 272) + 488))(*(_QWORD *)(a1 + 272), v187 + 3, *v187);
            llvm::MCStreamer::emitZeros(*(llvm::MCStreamer **)(a1 + 272), 1);
            v184 += 8;
          }
          while (v185 != v184);
        }
        sub_1C593C604(*(_QWORD *)(a1 + 272));
      }
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 248) + 492) == 3)
  {
    if (*(_BYTE *)(a1 + 596))
    {
      v121 = *(_QWORD *)(a1 + 264);
      v122 = *(_QWORD *)(a1 + 272);
      v198[0] = ".note.GNU-split-stack";
      v200 = 259;
      LOWORD(v194) = 257;
      ELFSection = llvm::MCContext::getELFSection(v121, (llvm::Twine *)v198, 1, 0, 0, (unsigned __int8 *)&__p, 0, -1, 0);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v122 + 168))(v122, ELFSection, 0);
      if (*(_BYTE *)(a1 + 597))
      {
        v124 = *(_QWORD *)(a1 + 264);
        v125 = *(_QWORD *)(a1 + 272);
        v198[0] = ".note.GNU-no-split-stack";
        v200 = 259;
        LOWORD(v194) = 257;
        v126 = llvm::MCContext::getELFSection(v124, (llvm::Twine *)v198, 1, 0, 0, (unsigned __int8 *)&__p, 0, -1, 0);
        (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v125 + 168))(v125, v126, 0);
      }
    }
  }
  v127 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), "llvm.init.trampoline", 0x14uLL);
  if (!v127 || *(_BYTE *)(v127 + 16) || !*(_QWORD *)(v127 + 8))
  {
    v128 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 256) + 16))(*(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 264));
    if (v128)
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 168))(*(_QWORD *)(a1 + 272), v128, 0);
  }
  v129 = *(_QWORD *)(a1 + 248);
  if ((*(_BYTE *)(v129 + 1043) & 1) != 0)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 1168))(*(_QWORD *)(a1 + 272));
    v130 = *(_QWORD **)(a2 + 32);
    v131 = *(_QWORD *)(a2 + 16);
    v132 = *(_QWORD *)(a2 + 48);
    v133 = *(_QWORD *)(a2 + 64);
    __p = v130;
    v191 = v131;
    v192 = v132;
    v193 = v133;
    v194 = a2 + 24;
    v195 = a2 + 8;
    v196 = a2 + 40;
    v197 = a2 + 56;
    while (1)
    {
      if (v130 == v19
        && v131 == v12
        && v132 == v102
        && v133 == v109
        && (_QWORD *)v194 == v19
        && v195 == v12
        && v196 == v102
        && v197 == v109)
      {
        v129 = *(_QWORD *)(a1 + 248);
        goto LABEL_246;
      }
      v134 = (const llvm::GlobalValue *)sub_1C52C3168((uint64_t)&__p);
      if (!*((_QWORD *)v134 + 1))
        goto LABEL_227;
      v135 = v134;
      if (llvm::Value::isTransitiveUsedByMetadataOnly(v134))
        goto LABEL_227;
      v136 = *((_DWORD *)v135 + 8);
      if ((v136 & 0x1C00) != 0 || (*((_DWORD *)v135 + 8) & 0x300) == 0x100)
        goto LABEL_227;
      if ((*((_BYTE *)v135 + 23) & 0x10) == 0)
        goto LABEL_240;
      v137 = ***(_QWORD ***)v135;
      v138 = *(_QWORD *)(v137 + 152);
      v139 = *(unsigned int *)(v137 + 168);
      if (!(_DWORD)v139)
        goto LABEL_238;
      LODWORD(v140) = (v139 - 1) & ((v135 >> 4) ^ (v135 >> 9));
      v141 = (const llvm::GlobalValue **)(v138 + 16 * v140);
      v142 = *v141;
      if (*v141 != v135)
        break;
LABEL_239:
      v145 = v141[1];
      if (*(_QWORD *)v145 < 5uLL)
      {
LABEL_240:
        if ((v136 & 0xC0) != 0)
          goto LABEL_227;
LABEL_244:
        v146 = *(_QWORD *)(a1 + 272);
        v147 = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), v135);
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v146 + 1176))(v146, v147);
        goto LABEL_227;
      }
      if ((v136 & 0xC0) == 0 && *((_DWORD *)v145 + 4) ^ 0x6D766C6C | *((unsigned __int8 *)v145 + 20) ^ 0x2E)
        goto LABEL_244;
LABEL_227:
      sub_1C52C300C((uint64_t)&__p);
      v130 = __p;
      v131 = v191;
      v132 = v192;
      v133 = v193;
    }
    v143 = 1;
    while (v142 != (const llvm::GlobalValue *)-4096)
    {
      v144 = v140 + v143++;
      v140 = v144 & (v139 - 1);
      v142 = *(const llvm::GlobalValue **)(v138 + 16 * v140);
      if (v142 == v135)
      {
        v141 = (const llvm::GlobalValue **)(v138 + 16 * v140);
        goto LABEL_239;
      }
    }
LABEL_238:
    v141 = (const llvm::GlobalValue **)(v138 + 16 * v139);
    goto LABEL_239;
  }
LABEL_246:
  if (*(_DWORD *)(v129 + 492) == 3)
  {
    v148 = 0;
    v149 = *(_QWORD **)(a2 + 32);
    v150 = *(_QWORD *)(a2 + 16);
    v151 = *(_QWORD *)(a2 + 48);
    v152 = *(_QWORD *)(a2 + 64);
    __p = v149;
    v191 = v150;
    v192 = v151;
    v193 = v152;
    v194 = a2 + 24;
    v195 = a2 + 8;
    v196 = a2 + 40;
    v197 = a2 + 56;
    while (v149 != v19
         || v150 != v12
         || v151 != v102
         || v152 != v109
         || (_QWORD *)v194 != v19
         || v195 != v12
         || v196 != v102
         || v197 != v109)
    {
      v153 = sub_1C52C3168((uint64_t)&__p);
      v154 = *(_DWORD *)(v153 + 32);
      if ((v154 & 0x8000) != 0 && (*(_DWORD *)(v153 + 32) & 0xF) != 1)
      {
        v155 = (llvm::GlobalValue *)v153;
        if (*(_BYTE *)(v153 + 16))
        {
          if (*(_BYTE *)(v153 + 16) == 3 && (*(_DWORD *)(v153 + 20) & 0x7FFFFFF) == 0)
            goto LABEL_266;
        }
        else if ((v154 & 0x800000) == 0 && *(_QWORD *)(v153 + 72) == v153 + 72)
        {
          goto LABEL_266;
        }
        if ((v154 & 0x30) == 0)
        {
          v156 = *(_QWORD *)(a1 + 264);
          v157 = *(_QWORD *)(a1 + 272);
          v198[0] = ".llvm_sympart";
          v200 = 259;
          ++v148;
          v189 = 257;
          v158 = llvm::MCContext::getELFSection(v156, (llvm::Twine *)v198, 1879002117, 0, 0, v188, 0, v148, 0);
          (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v157 + 168))(v157, v158, 0);
          v159 = *(_QWORD *)(a1 + 272);
          Partition = llvm::GlobalValue::getPartition(v155);
          (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v159 + 488))(v159, Partition, v161);
          llvm::MCStreamer::emitZeros(*(llvm::MCStreamer **)(a1 + 272), 1);
          v162 = *(_QWORD *)(a1 + 272);
          v163 = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), v155);
          v164 = *(_QWORD *)(a1 + 264);
          v165 = sub_1C484358C(v164 + 192, 24, 3);
          v166 = *(unsigned __int8 *)(*(_QWORD *)(v164 + 152) + 18) << 16;
          *(_BYTE *)v165 = 2;
          *(_DWORD *)(v165 + 1) = v166 | (*(unsigned __int8 *)(v165 + 4) << 24);
          *(_QWORD *)(v165 + 8) = 0;
          *(_QWORD *)(v165 + 16) = v163;
          (*(void (**)(uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v162 + 504))(v162, v165, *(unsigned int *)(*(_QWORD *)(a1 + 256) + 8), 0);
        }
      }
LABEL_266:
      sub_1C52C300C((uint64_t)&__p);
      v149 = __p;
      v150 = v191;
      v151 = v192;
      v152 = v193;
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, a2);
  *(_QWORD *)(a1 + 288) = 0;
  v167 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = 0;
  if (v167)
  {
    v168 = sub_1C5FF7DE0(v167);
    MEMORY[0x1CAA32FC0](v168, 0x1020C40D7426AC9);
  }
  llvm::MCStreamer::Finish(*(_QWORD **)(a1 + 272), 0);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 64))(*(_QWORD *)(a1 + 272));
  v169 = *(_QWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 568) = 0;
  if (v169)
    (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
  v170 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;
  if (v170)
    (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
  if ((void *)v202 != Symbol)
    free((void *)v202);
  if (v206 != (void (**)(llvm::raw_ostream *__hidden))((char *)&v207 + 8))
    free(v206);
  return 0;
}

uint64_t *sub_1C5FF2A78@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  BOOL v31;
  unsigned int v32;

  v4 = result;
  v6 = *((_DWORD *)result + 4);
  if (v6)
  {
    v7 = *result;
    v8 = v6 - 1;
    v9 = (37 * *a2) & (v6 - 1);
    v10 = *result + 16 * v9;
    v11 = *(_DWORD *)v10;
    if (*a2 == *(_DWORD *)v10)
    {
LABEL_3:
      v12 = 0;
      goto LABEL_10;
    }
    v14 = 0;
    v15 = 1;
    while (v11 != -1)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v11 == -2;
      if (v16)
        v14 = v10;
      v17 = v9 + v15++;
      v9 = v17 & v8;
      v10 = v7 + 16 * (v17 & v8);
      v11 = *(_DWORD *)v10;
      if (*a2 == *(_DWORD *)v10)
        goto LABEL_3;
    }
    if (v14)
      v10 = v14;
  }
  else
  {
    v10 = 0;
  }
  v13 = *((_DWORD *)result + 2);
  if (4 * v13 + 4 >= 3 * v6)
  {
    result = (uint64_t *)sub_1C49F41C0(result, 2 * v6);
    v18 = *((_DWORD *)v4 + 4);
    if (v18)
    {
      v19 = v18 - 1;
      v20 = (37 * *a2) & (v18 - 1);
      v10 = *v4 + 16 * v20;
      v21 = *(_DWORD *)v10;
      if (*a2 == *(_DWORD *)v10)
        goto LABEL_7;
      v22 = 0;
      v23 = 1;
      while (v21 != -1)
      {
        if (v22)
          v24 = 0;
        else
          v24 = v21 == -2;
        if (v24)
          v22 = v10;
        v25 = v20 + v23++;
        v20 = v25 & v19;
        v10 = *v4 + 16 * (v25 & v19);
        v21 = *(_DWORD *)v10;
        if (*a2 == *(_DWORD *)v10)
          goto LABEL_7;
      }
LABEL_46:
      if (v22)
        v10 = v22;
      goto LABEL_7;
    }
LABEL_45:
    v10 = 0;
    goto LABEL_7;
  }
  if (v6 + ~v13 - *((_DWORD *)result + 3) <= v6 >> 3)
  {
    result = (uint64_t *)sub_1C49F41C0(result, v6);
    v26 = *((_DWORD *)v4 + 4);
    if (v26)
    {
      v27 = v26 - 1;
      v28 = (37 * *a2) & (v26 - 1);
      v10 = *v4 + 16 * v28;
      v29 = *(_DWORD *)v10;
      if (*a2 == *(_DWORD *)v10)
        goto LABEL_7;
      v22 = 0;
      v30 = 1;
      while (v29 != -1)
      {
        if (v22)
          v31 = 0;
        else
          v31 = v29 == -2;
        if (v31)
          v22 = v10;
        v32 = v28 + v30++;
        v28 = v32 & v27;
        v10 = *v4 + 16 * (v32 & v27);
        v29 = *(_DWORD *)v10;
        if (*a2 == *(_DWORD *)v10)
          goto LABEL_7;
      }
      goto LABEL_46;
    }
    goto LABEL_45;
  }
LABEL_7:
  ++*((_DWORD *)v4 + 2);
  if (*(_DWORD *)v10 != -1)
    --*((_DWORD *)v4 + 3);
  *(_DWORD *)v10 = *a2;
  *(_QWORD *)(v10 + 8) = 0;
  v7 = *v4;
  v6 = *((_DWORD *)v4 + 4);
  v12 = 1;
LABEL_10:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v7 + 16 * v6;
  *(_BYTE *)(a3 + 16) = v12;
  return result;
}

uint64_t sub_1C5FF2CAC(uint64_t a1, llvm::MachineFunction *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t Symbol;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  _QWORD *v46;
  BOOL v47;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  int i;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  BOOL v62;
  BOOL v64;
  unint64_t TempSymbol;
  void **v66;
  void *v67;
  uint64_t result;
  int v69;
  int v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  uint64_t v80;
  _DWORD *v81;
  _DWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  __int16 v93;

  *(_QWORD *)(a1 + 280) = this;
  v4 = *(_QWORD *)this;
  if (!llvm::MachineFunction::shouldSplitStack(this)
    || (*(_BYTE *)(a1 + 596) = 1, v5 = *((_QWORD *)this + 7), !*(_QWORD *)(v5 + 48)) && !*(_BYTE *)(v5 + 654))
  {
    *(_BYTE *)(a1 + 597) = 1;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 476))
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248));
    Symbol = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 240))(v6, v4, *(_QWORD *)(a1 + 248));
  }
  else
  {
    Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), *(const llvm::GlobalValue **)this);
  }
  *(_QWORD *)(a1 + 328) = Symbol;
  *(_QWORD *)(a1 + 344) = Symbol;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  v9 = *(_DWORD *)(a1 + 360);
  if (v9 || *(_DWORD *)(a1 + 364))
  {
    v10 = (_DWORD *)(a1 + 352);
    v11 = *(unsigned int *)(a1 + 368);
    if (v11 <= 4 * v9 || v11 < 0x41)
    {
      if ((_DWORD)v11)
      {
        v12 = *(_DWORD **)v10;
        v13 = 8 * v11;
        do
        {
          *v12 = -1;
          v12 += 2;
          v13 -= 8;
        }
        while (v13);
      }
      *(_QWORD *)(a1 + 360) = 0;
    }
    else
    {
      sub_1C476BF54(v10);
    }
  }
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a1 + 376);
  v14 = (_QWORD *)(a1 + 456);
  v15 = *(_DWORD *)(a1 + 464);
  if (v15)
  {
    v77 = *(_DWORD *)(a1 + 472);
    if (v77 > 4 * v15 && v77 >= 0x41)
    {
      v78 = 1 << (33 - __clz(v15 - 1));
      if (v78 <= 64)
        v79 = 64;
      else
        v79 = v78;
LABEL_120:
      if (v79 == v77)
      {
        *(_QWORD *)(a1 + 464) = 0;
        v80 = 16 * v77;
        v81 = *(_DWORD **)(a1 + 456);
        do
        {
          *v81 = -1;
          v81 += 4;
          v80 -= 16;
        }
        while (v80);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*v14, 8);
        if (v79)
        {
          v84 = (4 * v79 / 3u + 1) | ((unint64_t)(4 * v79 / 3u + 1) >> 1);
          v85 = v84 | (v84 >> 2) | ((v84 | (v84 >> 2)) >> 4);
          LODWORD(v85) = (((v85 | (v85 >> 8)) >> 16) | v85 | (v85 >> 8)) + 1;
          *(_DWORD *)(a1 + 472) = v85;
          v86 = operator new(16 * v85, (std::align_val_t)8uLL);
          *(_QWORD *)(a1 + 456) = v86;
          *(_QWORD *)(a1 + 464) = 0;
          v87 = *(unsigned int *)(a1 + 472);
          if ((_DWORD)v87)
          {
            v88 = 16 * v87;
            do
            {
              *v86 = -1;
              v86 += 4;
              v88 -= 16;
            }
            while (v88);
          }
        }
        else
        {
          *v14 = 0;
          *(_QWORD *)(a1 + 464) = 0;
          *(_DWORD *)(a1 + 472) = 0;
        }
      }
      goto LABEL_18;
    }
LABEL_124:
    if (v77)
    {
      v82 = (_DWORD *)*v14;
      v83 = 16 * v77;
      do
      {
        *v82 = -1;
        v82 += 4;
        v83 -= 16;
      }
      while (v83);
    }
    *(_QWORD *)(a1 + 464) = 0;
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 468))
  {
    v77 = *(_DWORD *)(a1 + 472);
    if (v77 > 0x40)
    {
      v79 = 0;
      goto LABEL_120;
    }
    goto LABEL_124;
  }
LABEL_18:
  v16 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 256) + 82);
  v17 = *(_QWORD *)(v4 + 112);
  if (v17)
  {
    v18 = &unk_1ED7EA000;
    if (!*(_DWORD *)(v17 + 8))
      goto LABEL_136;
    v19 = *(_QWORD *)(v17 + 40);
    if (!v19)
      goto LABEL_136;
    v20 = *(_DWORD *)(v19 + 40);
    if (!v20)
      goto LABEL_136;
    v21 = *(_QWORD *)(v19 + 24);
    v22 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v22 & 1) == 0)
    {
      v90 = v21;
      v69 = v20;
      v70 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v20 = v69;
      v21 = v90;
      v18 = &unk_1ED7EA000;
      if (v70)
      {
        v71 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v71 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v71;
        __cxa_guard_release(&qword_1ED7EAC88);
        v20 = v69;
        v21 = v90;
        v18 = (_QWORD *)&unk_1ED7EA000;
      }
    }
    v23 = v18[400];
    v24 = __ROR8__(v23 ^ 0xD0DB31C61410D441, 30);
    v25 = 0x9DDFEA08EB382D69
        * ((v23 - 0x1DAA4ADE8CE29C7ALL) ^ ((0x9DDFEA08EB382D69
                                          * ((v24 - 0x447750EBFF2F1972) ^ (v23 - 0x1DAA4ADE8CE29C7ALL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v24 - 0x447750EBFF2F1972) ^ (v23 - 0x1DAA4ADE8CE29C7ALL))));
    v26 = -348639895 * ((v25 >> 47) ^ v25);
    v27 = v20 - 1;
    v28 = 1;
    v8 = 0x7972746E652D6E6FLL;
    while (1)
    {
      v29 = v26 & v27;
      v30 = v21 + 24 * v29;
      v31 = *(_QWORD **)v30;
      if (*(_QWORD *)v30 == -1)
      {
        if ("patchable-function-entry" == (char *)-1)
          goto LABEL_94;
      }
      else if (v31 == (_QWORD *)-2)
      {
        if ("patchable-function-entry" == (char *)-2)
          goto LABEL_94;
      }
      else if (*(_QWORD *)(v30 + 8) == 24)
      {
        v32 = *v31 == 0x6C62616863746170 && v31[1] == 0x6974636E75662D65;
        if (v32 && v31[2] == 0x7972746E652D6E6FLL)
          goto LABEL_94;
      }
      if (v31 == (_QWORD *)-1)
        break;
      v26 = v28 + v29;
      ++v28;
    }
    v17 = *(_QWORD *)(v4 + 112);
    if (v17)
    {
LABEL_136:
      if (!*(_DWORD *)(v17 + 8))
        goto LABEL_137;
      v34 = *(_QWORD *)(v17 + 40);
      if (!v34)
        goto LABEL_137;
      v35 = *(_DWORD *)(v34 + 40);
      if (!v35)
        goto LABEL_137;
      v36 = *(_QWORD *)(v34 + 24);
      v37 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v37 & 1) == 0)
      {
        v91 = v36;
        v89 = v35;
        v72 = __cxa_guard_acquire(&qword_1ED7EAC88);
        v35 = v89;
        v36 = v91;
        v18 = &unk_1ED7EA000;
        if (v72)
        {
          v73 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v73 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v73;
          __cxa_guard_release(&qword_1ED7EAC88);
          v35 = v89;
          v36 = v91;
          v18 = (_QWORD *)&unk_1ED7EA000;
        }
      }
      v38 = v18[400];
      v39 = __ROR8__(v38 ^ 0xAA3A3267791EAF7DLL, 30);
      v40 = 0x9DDFEA08EB382D69
          * ((v38 - 0x6C47B2EB309A5459) ^ ((0x9DDFEA08EB382D69
                                            * ((v39 + 0x50251E57CC92A4C1) ^ (v38 - 0x6C47B2EB309A5459))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v39 + 0x50251E57CC92A4C1) ^ (v38 - 0x6C47B2EB309A5459))));
      v41 = -348639895 * ((v40 >> 47) ^ v40);
      v42 = v35 - 1;
      v43 = 1;
      v8 = 0x746E656D75727473;
      while (1)
      {
        v44 = v41 & v42;
        v45 = v36 + 24 * v44;
        v46 = *(_QWORD **)v45;
        if (*(_QWORD *)v45 == -1)
        {
          if ("function-instrument" == (char *)-1)
            goto LABEL_94;
        }
        else if (v46 == (_QWORD *)-2)
        {
          if ("function-instrument" == (char *)-2)
            goto LABEL_94;
        }
        else if (*(_QWORD *)(v45 + 8) == 19)
        {
          v47 = *v46 == 0x6E6F6974636E7566 && v46[1] == 0x6D757274736E692DLL;
          if (v47 && *(_QWORD *)((char *)v46 + 11) == 0x746E656D75727473)
            goto LABEL_94;
        }
        if (v46 == (_QWORD *)-1)
          break;
        v41 = v43 + v44;
        ++v43;
      }
      v17 = *(_QWORD *)(v4 + 112);
      if (v17)
      {
LABEL_137:
        if (*(_DWORD *)(v17 + 8))
        {
          v49 = *(_QWORD *)(v17 + 40);
          if (v49)
          {
            v50 = *(_DWORD *)(v49 + 40);
            if (v50)
            {
              v51 = *(_QWORD *)(v49 + 24);
              v52 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
              if ((v52 & 1) == 0)
              {
                v74 = *(_DWORD *)(v49 + 40);
                v75 = __cxa_guard_acquire(&qword_1ED7EAC88);
                v50 = v74;
                v18 = &unk_1ED7EA000;
                if (v75)
                {
                  v76 = llvm::hashing::detail::fixed_seed_override;
                  if (!llvm::hashing::detail::fixed_seed_override)
                    v76 = 0xFF51AFD7ED558CCDLL;
                  qword_1ED7EAC80 = v76;
                  __cxa_guard_release(&qword_1ED7EAC88);
                  v50 = v74;
                  v18 = (_QWORD *)&unk_1ED7EA000;
                }
              }
              v53 = v18[400];
              v54 = __ROR8__(v53 ^ 0xA869751E6B684E18, 30);
              v55 = 0x9DDFEA08EB382D69
                  * ((v53 + 0x7375858ACBEC128) ^ ((0x9DDFEA08EB382D69
                                                   * ((v54 - 0x126B550998E27C48) ^ (v53 + 0x7375858ACBEC128))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v54 - 0x126B550998E27C48) ^ (v53 + 0x7375858ACBEC128))));
              v56 = -348639895 * ((v55 >> 47) ^ v55);
              for (i = 1; ; ++i)
              {
                v58 = v56 & (v50 - 1);
                v59 = (uint64_t *)(v51 + 24 * v58);
                v60 = *v59;
                if (*v59 == -1)
                {
                  if ("xray-instruction-threshold" == (char *)-1)
                    goto LABEL_94;
                }
                else if (v60 == -2)
                {
                  if ("xray-instruction-threshold" == (char *)-2)
                    goto LABEL_94;
                }
                else if (v59[1] == 26)
                {
                  v8 = *(_QWORD *)(v60 + 8);
                  v61 = *(_QWORD *)v60 == 0x736E692D79617278 && v8 == 0x6E6F697463757274;
                  v62 = v61 && *(_QWORD *)(v60 + 16) == 0x6F6873657268742DLL;
                  if (v62 && *(_WORD *)(v60 + 24) == 25708)
                    goto LABEL_94;
                }
                if (v60 == -1)
                  break;
                v56 = i + v58;
              }
            }
          }
        }
      }
    }
  }
  v64 = sub_1C5FF14CC((uint64_t *)this, (const llvm::Value *)v8);
  if (v16 || v64 || (*(_BYTE *)(*((_QWORD *)this + 1) + 1042) & 0x10) != 0 || *((_DWORD *)this + 160) == 2)
  {
LABEL_94:
    v92 = "func_begin";
    v93 = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(*(_QWORD *)(a1 + 264), (uint64_t)&v92, 1);
    *(_QWORD *)(a1 + 520) = TempSymbol;
    if (v16)
      *(_QWORD *)(a1 + 344) = TempSymbol;
  }
  v66 = **(void ****)(a1 + 8);
  do
  {
    v67 = *v66;
    v66 += 2;
  }
  while (v67 != &llvm::MachineOptimizationRemarkEmitterPass::ID);
  result = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v66 - 1) + 96))(*(v66 - 1), &llvm::MachineOptimizationRemarkEmitterPass::ID);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(result + 248);
  return result;
}

void sub_1C5FF3560(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  llvm::MachineConstantPoolEntry *v9;
  unsigned int SectionKind;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  int v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  const void **v27;
  char *v28;
  _OWORD *v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unint64_t v33;
  char *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL4 v42;
  unint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  BOOL v51;
  char *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _BYTE *v57;
  int v58;
  char *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  int SizeInBytes;
  char *v71;
  uint64_t v72;
  char *v73;
  _BOOL4 v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  unint64_t v83;
  __int128 v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  _QWORD v90[26];

  v90[24] = *MEMORY[0x1E0C80C00];
  v81 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 64);
  v2 = *(_QWORD *)(v81 + 8);
  v3 = *(_QWORD *)(v81 + 16);
  if (v2 == v3)
    return;
  v88 = v90;
  v89 = 0x400000000;
  v4 = v3 - v2;
  if ((v4 & 0xFFFFFFFF0) == 0)
    return;
  v6 = 0;
  v7 = &v87;
  v8 = (v4 >> 4);
  v79 = v8;
  do
  {
    v9 = (llvm::MachineConstantPoolEntry *)(*(_QWORD *)(v81 + 8) + 16 * v6);
    v82 = *((_BYTE *)v9 + 8);
    SectionKind = llvm::MachineConstantPoolEntry::getSectionKind(v9, (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 2064) + 272));
    if (*((_BYTE *)v9 + 9))
      v11 = 0;
    else
      v11 = *(_QWORD *)v9;
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248));
    v1 = v1 & 0xFFFFFFFF00000000 | SectionKind;
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v12 + 56))(v12, *(_QWORD *)(*(_QWORD *)(a1 + 288) + 2064) + 272, v1, v11, &v82);
    v14 = v89;
    v15 = (char *)v88;
    v16 = 48 * v89 - 48;
    v17 = v89;
    while (v17)
    {
      --v17;
      v18 = *(_QWORD *)((char *)v88 + v16);
      v16 -= 48;
      if (v18 == v13)
      {
        v14 = v17;
        goto LABEL_25;
      }
    }
    *(_QWORD *)&v84 = v13;
    BYTE8(v84) = v82;
    v19 = v7;
    v85 = v7;
    v86 = 0x400000000;
    if (v89 < HIDWORD(v89))
    {
      v20 = (char *)&v84;
      v21 = v89;
      v22 = &v86;
      goto LABEL_13;
    }
    v42 = v88 <= &v84 && (char *)v88 + 48 * v89 > (char *)&v84;
    if (v42)
      v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)&v84 - (_BYTE *)v88) >> 4);
    else
      v43 = -1;
    v83 = 0;
    v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v88, v89 + 1, 48, &v83);
    v44 = v88;
    if (!(_DWORD)v89)
      goto LABEL_70;
    v75 = v43;
    v74 = v42;
    v45 = 0;
    v76 = v88;
    v77 = 48 * v89;
    do
    {
      v46 = &v15[v45];
      v47 = &v44[v45];
      v48 = *(_QWORD *)&v44[v45];
      v46[8] = v44[v45 + 8];
      *(_QWORD *)v46 = v48;
      v49 = &v15[v45 + 32];
      *(_QWORD *)&v15[v45 + 16] = v49;
      *((_QWORD *)v46 + 3) = 0x400000000;
      v50 = *(unsigned int *)&v44[v45 + 24];
      if ((_DWORD)v50)
        v51 = v47 == v46;
      else
        v51 = 1;
      if (!v51)
      {
        v52 = (char *)*((_QWORD *)v47 + 2);
        if (v47 + 32 != v52)
        {
          *((_QWORD *)v46 + 2) = v52;
          *((_DWORD *)v46 + 6) = v50;
          *((_DWORD *)v46 + 7) = *(_DWORD *)&v44[v45 + 28];
          *((_QWORD *)v47 + 2) = v47 + 32;
          *(_DWORD *)&v44[v45 + 28] = 0;
          goto LABEL_57;
        }
        v78 = &v44[v45];
        if (v50 >= 5)
        {
          v53 = *(_DWORD *)&v44[v45 + 24];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15[v45 + 16], (uint64_t)&v15[v45 + 32], v50, 4);
          v47 = v78;
          v54 = *((unsigned int *)v78 + 6);
          if (!(_DWORD)v54)
            goto LABEL_56;
          v52 = (char *)*((_QWORD *)v78 + 2);
          v49 = *(char **)&v15[v45 + 16];
        }
        else
        {
          v53 = *(_DWORD *)&v44[v45 + 24];
          v54 = v53;
        }
        memcpy(v49, v52, 4 * v54);
        v47 = v78;
LABEL_56:
        *((_DWORD *)v46 + 6) = v53;
        v44 = v76;
LABEL_57:
        *((_DWORD *)v47 + 6) = 0;
      }
      v45 += 48;
    }
    while (v77 != v45);
    v44 = v88;
    if ((_DWORD)v89)
    {
      v55 = 48 * v89;
      do
      {
        v56 = *(char **)&v44[v55 - 32];
        if (&v44[v55 - 16] != v56)
        {
          v57 = v44;
          free(v56);
          v44 = v57;
        }
        v55 -= 48;
      }
      while (v55);
      v44 = v88;
    }
    v42 = v74;
    v43 = v75;
LABEL_70:
    v58 = v83;
    if (v44 != (_BYTE *)v90)
      free(v44);
    v88 = v15;
    HIDWORD(v89) = v58;
    v59 = &v15[48 * v43];
    if (v42)
      v20 = &v15[48 * v43];
    else
      v20 = (char *)&v84;
    v22 = (uint64_t *)(v59 + 24);
    if (!v42)
      v22 = &v86;
    v21 = v89;
LABEL_13:
    v23 = &v15[48 * v21];
    v24 = *(_QWORD *)v20;
    v23[8] = v20[8];
    *(_QWORD *)v23 = v24;
    v25 = v23 + 32;
    *((_QWORD *)v23 + 3) = 0x400000000;
    *((_QWORD *)v23 + 2) = v23 + 32;
    v26 = (uint64_t)(v23 + 16);
    if (*(_DWORD *)v22)
    {
      v27 = (const void **)(v20 + 16);
      if ((char *)v26 != v20 + 16)
      {
        v28 = (char *)*((_QWORD *)v20 + 2);
        v29 = v20 + 32;
        if (v28 == v20 + 32)
        {
          v32 = *((_DWORD *)v20 + 6);
          v31 = (unsigned int *)(v20 + 24);
          v30 = v32;
          if (v32)
          {
            if (v30 >= 5)
            {
              *(_DWORD *)(v26 + 8) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v26, v26 + 16, v30, 4);
              v33 = *v31;
              if (*v31)
LABEL_19:
                memcpy(*(void **)v26, *v27, 4 * v33);
            }
            else
            {
              v33 = v30;
              if (v30)
                goto LABEL_19;
            }
            *(_DWORD *)(v26 + 8) = v30;
          }
          else
          {
            *(_DWORD *)(v26 + 8) = 0;
          }
        }
        else
        {
          if (v25 != (void *)(v26 + 16))
          {
            free(v25);
            v28 = (char *)*v27;
          }
          *(_QWORD *)v26 = v28;
          v40 = *((_QWORD *)v20 + 3);
          v31 = (unsigned int *)(v20 + 24);
          *(_QWORD *)(v26 + 8) = v40;
          *((_QWORD *)v31 - 1) = v29;
          v31[1] = 0;
        }
        *v31 = 0;
      }
    }
    LODWORD(v89) = v89 + 1;
    v7 = v19;
    if (v85 != v19)
      free(v85);
    v15 = (char *)v88;
    v8 = v79;
LABEL_25:
    v34 = &v15[48 * v14];
    v36 = v34[8];
    v35 = (unsigned __int8 *)(v34 + 8);
    if (v82 > v36)
    {
      *v35 = v82;
      v15 = (char *)v88;
    }
    v37 = &v15[48 * v14];
    v38 = v37 + 16;
    v39 = *((unsigned int *)v37 + 6);
    if (v39 >= *((unsigned int *)v37 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v37 + 16), (uint64_t)(v37 + 32), v39 + 1, 4);
      v39 = *((unsigned int *)v38 + 2);
    }
    *(_DWORD *)(*(_QWORD *)v38 + 4 * v39) = v6;
    ++*((_DWORD *)v38 + 2);
    ++v6;
  }
  while (v6 != v8);
  v80 = v89;
  if ((_DWORD)v89)
  {
    v60 = 0;
    v61 = 0;
    v62 = 0;
    do
    {
      v63 = *((unsigned int *)v88 + 12 * v60 + 6);
      if ((_DWORD)v63)
      {
        v64 = 0;
        v65 = 4 * v63;
        do
        {
          v66 = *(unsigned int *)(*((_QWORD *)v88 + 6 * v60 + 2) + v64);
          v67 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 288))(a1, v66);
          v68 = *(_QWORD *)v67 & 0xFFFFFFFFFFFFFFF8;
          if (!v68 && (*(_DWORD *)(v67 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v67 + 8) |= 4u;
            llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v67 + 24));
            *(_QWORD *)v67 = *(_QWORD *)v67 & 7 | v68;
          }
          if (!v68)
          {
            if (v62 != *((_QWORD *)v88 + 6 * v60))
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 168))(*(_QWORD *)(a1 + 272));
              sub_1C5FECEF4((_QWORD *)a1, *((unsigned __int8 *)v88 + 48 * v60 + 8), 0, 0);
              v61 = 0;
              v62 = *((_QWORD *)v88 + 6 * v60);
            }
            v84 = *(_OWORD *)(*(_QWORD *)(v81 + 8) + 16 * v66);
            v69 = (v61 + (1 << SBYTE8(v84)) - 1) & -(1 << SBYTE8(v84));
            llvm::MCStreamer::emitZeros(*(llvm::MCStreamer **)(a1 + 272), (v69 - v61));
            SizeInBytes = llvm::MachineConstantPoolEntry::getSizeInBytes((uint64_t **)&v84, (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 2064) + 272));
            (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272), v67, 0);
            if (BYTE9(v84))
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 312))(a1, v84);
            else
              sub_1C5FECFD0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 288) + 2064) + 272, (uint64_t *)v84);
            v61 = SizeInBytes + v69;
          }
          v64 += 4;
        }
        while (v65 != v64);
      }
      ++v60;
    }
    while (v60 != v80);
    v71 = (char *)v88;
    if ((_DWORD)v89)
    {
      v72 = 48 * v89;
      do
      {
        v73 = *(char **)&v71[v72 - 32];
        if (&v71[v72 - 16] != v73)
          free(v73);
        v72 -= 48;
      }
      while (v72);
      v71 = (char *)v88;
    }
  }
  else
  {
    v71 = (char *)v88;
  }
  if (v71 != (char *)v90)
    free(v71);
}

uint64_t sub_1C5FF3C78(uint64_t result)
{
  _QWORD *v1;
  llvm::MachineJumpTableInfo *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int *v17;
  char v18;
  unint64_t Symbol;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, unint64_t, unint64_t);
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t JTISymbol;
  unint64_t v31;
  llvm::MachineBasicBlock **v32;
  llvm::MachineBasicBlock **v33;
  llvm::MachineBasicBlock *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  int v42;
  _BYTE v43[136];

  v1 = *(_QWORD **)(result + 280);
  v2 = (llvm::MachineJumpTableInfo *)v1[9];
  if (v2 && *(_DWORD *)v2 != 4 && *((_QWORD *)v2 + 1) != *((_QWORD *)v2 + 2))
  {
    v3 = result;
    v4 = *v1;
    v5 = *(_QWORD *)(*v1 + 40);
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 248) + 24))(*(_QWORD *)(result + 248));
    v7 = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(_QWORD *)v6 + 104))(v6, *(_DWORD *)v2 == 3, v4);
    if ((v7 & 1) != 0)
    {
      llvm::MachineJumpTableInfo::getEntryAlignment(v2, (const llvm::DataLayout *)(v5 + 272));
      sub_1C5FECEF4((_QWORD *)v3, (63 - __clz(v8)), 0, 0);
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 272) + 232))(*(_QWORD *)(v3 + 272), 3);
    }
    else
    {
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 88))(v6, v4, *(_QWORD *)(v3 + 248));
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v3 + 272) + 168))(*(_QWORD *)(v3 + 272), v9, 0);
      llvm::MachineJumpTableInfo::getEntryAlignment(v2, (const llvm::DataLayout *)(v5 + 272));
      result = sub_1C5FECEF4((_QWORD *)v3, (63 - __clz(v10)), 0, 0);
    }
    v11 = -1431655765 * ((*((_QWORD *)v2 + 2) - *((_QWORD *)v2 + 1)) >> 3);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v37 = v5;
      v36 = v7;
      v35 = -1431655765 * ((*((_QWORD *)v2 + 2) - *((_QWORD *)v2 + 1)) >> 3);
      do
      {
        v13 = *((_QWORD *)v2 + 1) + 24 * v12;
        if (*(_QWORD *)v13 != *(_QWORD *)(v13 + 8))
        {
          if (*(_DWORD *)v2 == 3 && *(_BYTE *)(*(_QWORD *)(v3 + 256) + 352))
          {
            v39 = v43;
            v40 = v43;
            v41 = 16;
            v42 = 0;
            v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 280) + 16) + 120))(*(_QWORD *)(*(_QWORD *)(v3 + 280) + 16));
            v38 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v14 + 1576))(v14, *(_QWORD *)(v3 + 280), v12, *(_QWORD *)(v3 + 264));
            v15 = *(uint64_t **)v13;
            v16 = *(uint64_t **)(v13 + 8);
            while (v15 != v16)
            {
              v17 = (int *)*v15;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v39, *v15);
              if (v18)
              {
                Symbol = llvm::MachineBasicBlock::getSymbol((llvm::MachineBasicBlock *)v17);
                v20 = *(_QWORD *)(v3 + 264);
                v21 = sub_1C484358C(v20 + 192, 24, 3);
                v22 = *(unsigned __int8 *)(*(_QWORD *)(v20 + 152) + 18) << 16;
                *(_BYTE *)v21 = 2;
                *(_DWORD *)(v21 + 1) = v22 | (*(unsigned __int8 *)(v21 + 4) << 24);
                *(_QWORD *)(v21 + 8) = 0;
                *(_QWORD *)(v21 + 16) = Symbol;
                v23 = *(_QWORD *)(v3 + 272);
                v24 = sub_1C63BD250((_QWORD *)v3, v12, v17[6]);
                v25 = sub_1C484358C(*(_QWORD *)(v3 + 264) + 192, 32, 3);
                *(_BYTE *)v25 = 0;
                *(_DWORD *)(v25 + 1) = (*(unsigned __int8 *)(v25 + 4) << 24) | 0x12;
                *(_QWORD *)(v25 + 8) = 0;
                *(_QWORD *)(v25 + 16) = v21;
                v7 = v36;
                *(_QWORD *)(v25 + 24) = v38;
                v26 = *(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v23 + 280);
                v27 = v23;
                v5 = v37;
                v26(v27, v24, v25);
              }
              ++v15;
            }
            if (v40 != v39)
              free(v40);
            v11 = v35;
          }
          if (*(_DWORD *)(v5 + 300) == 2)
            v28 = v7;
          else
            v28 = 1;
          if (v28 != 1)
          {
            v29 = *(_QWORD *)(v3 + 272);
            JTISymbol = llvm::MachineFunction::getJTISymbol(*(llvm::MachineFunction **)(v3 + 280), v12, *(llvm::MCContext **)(v3 + 264), 1);
            (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v29 + 192))(v29, JTISymbol, 0);
          }
          v31 = llvm::MachineFunction::getJTISymbol(*(llvm::MachineFunction **)(v3 + 280), v12, *(llvm::MCContext **)(v3 + 264), 0);
          result = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v3 + 272) + 192))(*(_QWORD *)(v3 + 272), v31, 0);
          v32 = *(llvm::MachineBasicBlock ***)v13;
          v33 = *(llvm::MachineBasicBlock ***)(v13 + 8);
          while (v32 != v33)
          {
            v34 = *v32++;
            result = sub_1C63BD35C((_QWORD *)v3, v2, v34, v12);
          }
        }
        ++v12;
      }
      while (v12 != v11);
    }
    if ((v7 & 1) != 0)
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 272) + 232))(*(_QWORD *)(v3 + 272), 4);
  }
  return result;
}

void sub_1C5FF4038(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __n128 *v14;
  char *v15;
  char *v16;
  __int128 v17;
  unsigned int v18;
  __n128 *v19;
  llvm::APInt *v20;
  unsigned int v21;
  unint64_t v22;
  char *v23;
  llvm::Value *v24;
  llvm::Value *v25;
  unint64_t v26;
  BOOL v27;
  char *v28;
  __n128 *v29;
  unint64_t v30;
  const std::nothrow_t *v31;
  unint64_t v32;
  int *v33;
  BOOL v34;
  int *v35;
  uint64_t v36;
  _QWORD v37[3];

  if (*(_BYTE *)(a2 + 16) != 8)
    return;
  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
  {
    v8 = *(uint64_t **)(a2 - 8);
    v7 = v6 & 0x7FFFFFF;
    if (!v7)
      goto LABEL_33;
    goto LABEL_6;
  }
  v7 = v6 & 0x7FFFFFF;
  v8 = (uint64_t *)(a2 - 32 * v7);
  if (v7)
  {
LABEL_6:
    v36 = a3 + 16;
    v9 = 32 * v7;
    while (1)
    {
      v10 = *v8;
      if ((llvm::Constant::isNullValue(*(llvm::Constant **)(*v8 - 32 * (*(_DWORD *)(*v8 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
        goto LABEL_33;
      v11 = *(_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF));
      if (v11 && *(_BYTE *)(v11 + 16) == 16)
        break;
LABEL_27:
      v8 += 4;
      v9 -= 32;
      if (!v9)
        goto LABEL_33;
    }
    memset(v37, 0, sizeof(v37));
    v13 = *(unsigned int *)(a3 + 8);
    v14 = *(__n128 **)a3;
    if (v13 >= *(_DWORD *)(a3 + 12))
    {
      v26 = v13 + 1;
      v27 = (char *)v14 + 24 * v13 > (char *)v37;
      if (v14 <= (__n128 *)v37 && v27)
      {
        v28 = (char *)((char *)v37 - (char *)v14);
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v36, v26, 24);
        v14 = *(__n128 **)a3;
        v15 = &v28[*(_QWORD *)a3];
LABEL_15:
        v16 = (char *)v14 + 24 * *(unsigned int *)(a3 + 8);
        v17 = *(_OWORD *)v15;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v16 = v17;
        v18 = *(_DWORD *)(a3 + 8) + 1;
        *(_DWORD *)(a3 + 8) = v18;
        v19 = *(__n128 **)a3;
        v20 = (llvm::APInt *)(v11 + 24);
        v21 = *(_DWORD *)(v11 + 32);
        if (v21 >= 0x41)
        {
          if (v21 - llvm::APInt::countLeadingZerosSlowCase(v20) > 0x40)
          {
LABEL_20:
            LODWORD(v22) = 0xFFFF;
LABEL_21:
            v23 = (char *)v19 + 24 * v18;
            *((_DWORD *)v23 - 6) = v22;
            *((_QWORD *)v23 - 2) = *(_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) + 32);
            if ((llvm::Constant::isNullValue(*(llvm::Constant **)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) + 64)) & 1) == 0)
            {
              if (*(_DWORD *)(*(_QWORD *)(a1 + 248) + 484) == 21)
                llvm::report_fatal_error((llvm *)"associated data of XXStructor list is not yet supported on AIX", (const char *)1);
              v24 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v10
                                                                   - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF)
                                                                   + 64));
              if (*((unsigned __int8 *)v24 + 16) >= 4u)
                v25 = 0;
              else
                v25 = v24;
              *((_QWORD *)v23 - 1) = v25;
            }
            goto LABEL_27;
          }
          v22 = **(_QWORD **)v20;
        }
        else
        {
          v22 = *(_QWORD *)v20;
        }
        if (!(v22 >> 16))
          goto LABEL_21;
        goto LABEL_20;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v36, v26, 24);
      v14 = *(__n128 **)a3;
    }
    v15 = (char *)v37;
    goto LABEL_15;
  }
LABEL_33:
  v29 = *(__n128 **)a3;
  v30 = *(unsigned int *)(a3 + 8);
  if (v30 < 0x81)
  {
LABEL_37:
    sub_1C5FF9B8C(v29, (__n128 *)((char *)v29 + 24 * v30), v30, 0, 0, a4);
  }
  else
  {
    v31 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v32 = v30;
    while (1)
    {
      v33 = (int *)operator new(24 * v32, v31);
      if (v33)
        break;
      v34 = v32 > 1;
      v32 >>= 1;
      if (!v34)
        goto LABEL_37;
    }
    v35 = v33;
    sub_1C5FF9B8C(v29, (__n128 *)((char *)v29 + 24 * v30), v30, v33, v32, a4);
    operator delete(v35);
  }
}

uint64_t sub_1C5FF42EC(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 512))(*(_QWORD *)(a1 + 272), a2, 1);
}

uint64_t sub_1C5FF4304(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 512))(*(_QWORD *)(a1 + 272), a2, 2);
}

uint64_t sub_1C5FF431C(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 512))(*(_QWORD *)(a1 + 272), a2, 4);
}

uint64_t sub_1C5FF4334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 338))
    v9 = a5 == 0;
  else
    v9 = 1;
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 264);
    v11 = sub_1C484358C(v10 + 192, 24, 3);
    v12 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 152) + 18) << 16;
    *(_BYTE *)v11 = 2;
    *(_DWORD *)(v11 + 1) = v12 | (*(unsigned __int8 *)(v11 + 4) << 24);
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = a2;
    if (a3)
    {
      v13 = sub_1C484358C(*(_QWORD *)(a1 + 264) + 192, 24, 3);
      *(_BYTE *)v13 = 1;
      *(_DWORD *)(v13 + 1) = *(unsigned __int8 *)(v13 + 4) << 24;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = a3;
      v14 = sub_1C484358C(*(_QWORD *)(a1 + 264) + 192, 32, 3);
      *(_BYTE *)v14 = 0;
      *(_DWORD *)(v14 + 1) = *(unsigned __int8 *)(v14 + 4) << 24;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = v11;
      *(_QWORD *)(v14 + 24) = v13;
      v11 = v14;
    }
    return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 504))(*(_QWORD *)(a1 + 272), v11, a4, 0);
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 272) + 376))(*(_QWORD *)(a1 + 272), a2, a3);
    if (a4 >= 5)
      return llvm::MCStreamer::emitZeros(*(llvm::MCStreamer **)(a1 + 272), (a4 - 4));
  }
  return result;
}

llvm::Constant *sub_1C5FF4488(_QWORD *a1, llvm::Constant *this)
{
  llvm::Constant *v2;
  uint64_t v4;
  const llvm::Value *v5;
  llvm::DSOLocalEquivalent **v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t Symbol;
  unint64_t v10;
  int v11;
  uint64_t (*v12)(_QWORD *, llvm::Constant *);
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  llvm::Constant **v19;
  llvm::Constant *v20;
  llvm::Constant *v21;
  uint64_t v22;
  int v23;
  llvm::TargetMachine *v25;
  const llvm::GlobalValue *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  const char *v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  llvm::Constant **v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  llvm::Constant **v43;
  llvm::Constant *v44;
  llvm::DSOLocalEquivalent **v45;
  int IsConstantOffsetFromGlobal;
  char v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  char v56;
  unint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  llvm::Constant *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t IntegerCast;
  const llvm::Module *v68;
  uint64_t v69;
  llvm::ConstantExpr *v70;
  llvm::Type ***v71;
  int v72;
  int64_t v73;
  void *v74;
  unint64_t v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _BOOL8 v82;
  llvm::GlobalValue *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _BOOL4 v87;
  unint64_t v88;
  _BOOL4 v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  llvm::GlobalValue *v93;
  uint64_t v94;
  llvm::GlobalValue *v95;
  unsigned int v96;
  __int16 v97;
  void *__src;
  unsigned int PointerTypeSizeInBits;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  int v105;
  llvm::GlobalValue *v106;
  uint64_t *v107[3];

  v2 = this;
  v4 = a1[33];
  if ((llvm::Constant::isNullValue(this) & 1) != 0 || (v7 = *((unsigned __int8 *)v2 + 16), v7 - 11 <= 1))
  {
    v2 = (llvm::Constant *)sub_1C484358C(v4 + 192, 24, 3);
    *(_BYTE *)v2 = 1;
    *(_DWORD *)((char *)v2 + 1) = *((unsigned __int8 *)v2 + 4) << 24;
    *((_QWORD *)v2 + 1) = 0;
    *((_QWORD *)v2 + 2) = 0;
    return v2;
  }
  if (v7 == 16)
  {
    v8 = (unint64_t *)((char *)v2 + 24);
    if (*((_DWORD *)v2 + 8) >= 0x41u)
      v8 = (unint64_t *)*v8;
    Symbol = *v8;
    v10 = sub_1C484358C(v4 + 192, 24, 3);
    v2 = (llvm::Constant *)v10;
    *(_BYTE *)v10 = 1;
    v11 = *(unsigned __int8 *)(v10 + 4) << 24;
    goto LABEL_27;
  }
  if (v7 <= 3)
  {
    if (v7 != 3 || (*((_BYTE *)v2 + 34) & 0x40) == 0)
    {
LABEL_23:
      v25 = (llvm::TargetMachine *)a1[31];
      v26 = v2;
LABEL_26:
      Symbol = llvm::TargetMachine::getSymbol(v25, v26);
      v10 = sub_1C484358C(v4 + 192, 24, 3);
      v2 = (llvm::Constant *)v10;
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 152) + 18) << 16;
      *(_BYTE *)v10 = 2;
      v11 = v28 | (*(unsigned __int8 *)(v10 + 4) << 24);
LABEL_27:
      *(_DWORD *)(v10 + 1) = v11;
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = Symbol;
      return v2;
    }
    v14 = ***(_QWORD ***)v2;
    __src = v2;
    v15 = *(_DWORD *)(v14 + 2520);
    if (v15)
    {
      v16 = *(_QWORD *)(v14 + 2504);
      v17 = v15 - 1;
      v18 = v17 & ((v2 >> 4) ^ (v2 >> 9));
      v19 = (llvm::Constant **)(v16 + 24 * v18);
      v20 = *v19;
      if (*v19 == v2)
      {
LABEL_18:
        if (v19[2] == (llvm::Constant *)12)
        {
          v21 = v19[1];
          v22 = *(_QWORD *)v21;
          v23 = *((_DWORD *)v21 + 2);
          if (v22 == 0x7274702E6D766C6CLL && v23 == 1752462689)
          {
            __src = llvm::GlobalPtrAuthInfo::analyze((uint64_t ***)v2, v5);
            return (llvm::Constant *)(*(uint64_t (**)(_QWORD *, void **))(*a1 + 344))(a1, &__src);
          }
        }
        goto LABEL_23;
      }
      v38 = 0;
      v39 = 1;
      while (v20 != (llvm::Constant *)-4096)
      {
        if (v38)
          v40 = 0;
        else
          v40 = v20 == (llvm::Constant *)-8192;
        if (v40)
          v38 = v19;
        v41 = v18 + v39++;
        v18 = v41 & v17;
        v19 = (llvm::Constant **)(v16 + 24 * v18);
        v20 = *v19;
        if (*v19 == v2)
          goto LABEL_18;
      }
      if (v38)
        v43 = v38;
      else
        v43 = v19;
    }
    else
    {
      v43 = 0;
    }
    v19 = (llvm::Constant **)sub_1C53D65B8(v14 + 2504, (uint64_t)&__src, (uint64_t *)&__src, v43);
    v44 = (llvm::Constant *)__src;
    v19[1] = 0;
    v19[2] = 0;
    *v19 = v44;
    goto LABEL_18;
  }
  if (v7 == 7)
  {
    v26 = (const llvm::GlobalValue *)*((_QWORD *)v2 - 4);
    v25 = (llvm::TargetMachine *)a1[31];
    goto LABEL_26;
  }
  if (v7 == 6)
  {
    v27 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[31] + 24))(a1[31]);
    return (llvm::Constant *)(*(uint64_t (**)(uint64_t, llvm::Constant *, _QWORD))(*(_QWORD *)v27 + 168))(v27, v2, a1[31]);
  }
  if (v7 != 4)
  {
    if (v7 == 5)
      v29 = (uint64_t)v2;
    else
      v29 = 0;
    switch(*(_WORD *)(v29 + 18))
    {
      case 0xD:
      case 0x11:
      case 0x14:
      case 0x17:
      case 0x19:
      case 0x1C:
      case 0x1D:
      case 0x1E:
        goto LABEL_33;
      case 0xE:
      case 0x10:
      case 0x12:
      case 0x13:
      case 0x15:
      case 0x16:
      case 0x18:
      case 0x1A:
      case 0x1B:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x23:
      case 0x24:
      case 0x25:
LABEL_77:
        IntegerCast = (uint64_t)llvm::ConstantFoldConstant(v29, (llvm::Type *)(*(_QWORD *)(a1[36] + 2064) + 272), 0);
        if (IntegerCast == v29)
        {
          memset(v107, 0, sizeof(v107));
          PointerTypeSizeInBits = 0;
          v103 = 0;
          v104 = 0;
          __src = &unk_1E81A7208;
          v106 = (llvm::GlobalValue *)v107;
          v105 = 0;
          v101 = 0;
          v102 = 0;
          v100 = 0;
          llvm::raw_ostream::write((llvm::raw_ostream *)&__src, "Unsupported expression in static initializer: ", 0x2EuLL);
          v68 = 0;
          v69 = a1[35];
          if (v69)
            v68 = *(const llvm::Module **)(*(_QWORD *)v69 + 40);
          llvm::Value::printAsOperand((llvm::Value *)v29, (llvm::raw_ostream *)&__src, 0, v68);
          v97 = 260;
          v95 = v106;
          llvm::report_fatal_error((uint64_t)&v95, 1);
        }
LABEL_82:
        v42 = IntegerCast;
        return (llvm::Constant *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 224))(a1, v42);
      case 0xF:
        v107[0] = 0;
        PointerTypeSizeInBits = 1;
        __src = 0;
        v94 = 0;
        if (!llvm::IsConstantOffsetFromGlobal(*(llvm **)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF)), v107, (llvm::GlobalValue **)&__src, (llvm::APInt *)(*(_QWORD *)(a1[36] + 2064) + 272), (const llvm::DataLayout *)&v94, v6))goto LABEL_110;
        v93 = 0;
        v96 = 1;
        v95 = 0;
        IsConstantOffsetFromGlobal = llvm::IsConstantOffsetFromGlobal(*(llvm **)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF) + 32), (uint64_t **)&v93, &v95, (llvm::APInt *)(*(_QWORD *)(a1[36] + 2064) + 272), 0, v45);
        v47 = IsConstantOffsetFromGlobal;
        if (IsConstantOffsetFromGlobal)
        {
          v48 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[31] + 24))(a1[31]);
          v2 = (llvm::Constant *)(*(uint64_t (**)(uint64_t, uint64_t *, llvm::GlobalValue *, _QWORD))(*(_QWORD *)v48 + 160))(v48, v107[0], v93, a1[31]);
          if (!v2)
          {
            v49 = llvm::TargetMachine::getSymbol((llvm::TargetMachine *)a1[31], (const llvm::GlobalValue *)v107[0]);
            v50 = sub_1C484358C(v4 + 192, 24, 3);
            v51 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 152) + 18) << 16;
            *(_BYTE *)v50 = 2;
            *(_DWORD *)(v50 + 1) = v51 | (*(unsigned __int8 *)(v50 + 4) << 24);
            *(_QWORD *)(v50 + 8) = 0;
            *(_QWORD *)(v50 + 16) = v49;
            if (v94 && *(_BYTE *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[31] + 24))(a1[31]) + 947))
            {
              v52 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[31] + 24))(a1[31]);
              v50 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v52 + 168))(v52, v94, a1[31]);
            }
            v53 = llvm::TargetMachine::getSymbol((llvm::TargetMachine *)a1[31], v93);
            v54 = sub_1C484358C(v4 + 192, 24, 3);
            v55 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 152) + 18) << 16;
            *(_BYTE *)v54 = 2;
            *(_DWORD *)(v54 + 1) = v55 | (*(unsigned __int8 *)(v54 + 4) << 24);
            *(_QWORD *)(v54 + 8) = 0;
            *(_QWORD *)(v54 + 16) = v53;
            v2 = (llvm::Constant *)sub_1C484358C(v4 + 192, 32, 3);
            *(_BYTE *)v2 = 0;
            *(_DWORD *)((char *)v2 + 1) = (*((unsigned __int8 *)v2 + 4) << 24) | 0x12;
            *((_QWORD *)v2 + 1) = 0;
            *((_QWORD *)v2 + 2) = v50;
            *((_QWORD *)v2 + 3) = v54;
          }
          v56 = PointerTypeSizeInBits;
          if (PointerTypeSizeInBits >= 0x41)
          {
            v79 = PointerTypeSizeInBits + 63;
            v80 = (_QWORD *)operator new[]();
            memcpy(v80, __src, (v79 >> 3) & 0x3FFFFFF8);
            v81 = 0;
            v82 = 0;
            v83 = v95;
            do
            {
              v84 = v80[v81];
              v85 = *(_QWORD *)((char *)v83 + v81 * 8);
              v86 = v84 - v85;
              v87 = v84 < v85;
              v88 = v84 + ~v85;
              v89 = v88 >= v84;
              if (v82)
              {
                v82 = v89;
              }
              else
              {
                v88 = v86;
                v82 = v87;
              }
              v80[v81++] = v88;
            }
            while (v79 >> 6 != v81);
            v80[(v79 >> 6) - 1] &= 0xFFFFFFFFFFFFFFFFLL >> -v56;
            v58 = *v80;
            MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
          }
          else
          {
            v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PointerTypeSizeInBits;
            if (!PointerTypeSizeInBits)
              v57 = 0;
            v58 = (uint64_t)((v57 & ((_BYTE *)__src - (_BYTE *)v95)) << -(char)PointerTypeSizeInBits) >> -(char)PointerTypeSizeInBits;
          }
          if (v58)
          {
            v90 = sub_1C484358C(v4 + 192, 24, 3);
            *(_BYTE *)v90 = 1;
            *(_DWORD *)(v90 + 1) = *(unsigned __int8 *)(v90 + 4) << 24;
            *(_QWORD *)(v90 + 8) = 0;
            *(_QWORD *)(v90 + 16) = v58;
            v91 = sub_1C484358C(v4 + 192, 32, 3);
            *(_BYTE *)v91 = 0;
            *(_DWORD *)(v91 + 1) = *(unsigned __int8 *)(v91 + 4) << 24;
            *(_QWORD *)(v91 + 8) = 0;
            *(_QWORD *)(v91 + 16) = v2;
            *(_QWORD *)(v91 + 24) = v90;
            v2 = (llvm::Constant *)v91;
          }
        }
        if (v96 >= 0x41 && v95)
          MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
        if ((v47 & 1) != 0)
          v92 = 0;
        else
LABEL_110:
          v92 = 1;
        if (PointerTypeSizeInBits >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        if (v92)
        {
LABEL_33:
          (*(void (**)(_QWORD *, _QWORD))(*a1 + 224))(a1, *(_QWORD *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF)));
          (*(void (**)(_QWORD *, _QWORD))(*a1 + 224))(a1, *(_QWORD *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF) + 32));
          __asm { BR              X10 }
        }
        return v2;
      case 0x22:
        v59 = *(_QWORD *)(a1[36] + 2064);
        PointerTypeSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits(v59 + 272, *(_QWORD *)v29);
        if (PointerTypeSizeInBits > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
          v59 = *(_QWORD *)(a1[36] + 2064);
        }
        else
        {
          __src = 0;
        }
        llvm::GEPOperator::accumulateConstantOffset(v29, (llvm::DataLayout *)(v59 + 272), (uint64_t)&__src, 0, v60);
        v61 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 224))(a1, *(_QWORD *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF)));
        v62 = (llvm::Constant *)v61;
        if (PointerTypeSizeInBits > 0x40)
        {
          v72 = 0;
          v73 = ((unint64_t)PointerTypeSizeInBits + 63) >> 6;
          v74 = __src;
          do
          {
            if (v73-- < 1)
              break;
            v76 = *((_QWORD *)__src + v73);
            v72 += __clz(v76);
          }
          while (!v76);
          v77 = PointerTypeSizeInBits | 0xFFFFFFC0;
          if ((PointerTypeSizeInBits & 0x3F) == 0)
            v77 = 0;
          if (v72 + v77 == PointerTypeSizeInBits)
          {
            v2 = v62;
            goto LABEL_94;
          }
          v63 = *(_QWORD *)__src;
        }
        else
        {
          if (!__src)
            return (llvm::Constant *)v61;
          v63 = (uint64_t)((_QWORD)__src << -(uint64_t)PointerTypeSizeInBits) >> -(uint64_t)PointerTypeSizeInBits;
        }
        v78 = sub_1C484358C(v4 + 192, 24, 3);
        *(_BYTE *)v78 = 1;
        *(_DWORD *)(v78 + 1) = *(unsigned __int8 *)(v78 + 4) << 24;
        *(_QWORD *)(v78 + 8) = 0;
        *(_QWORD *)(v78 + 16) = v63;
        v2 = (llvm::Constant *)sub_1C484358C(v4 + 192, 32, 3);
        *(_BYTE *)v2 = 0;
        *(_DWORD *)((char *)v2 + 1) = *((unsigned __int8 *)v2 + 4) << 24;
        *((_QWORD *)v2 + 1) = 0;
        *((_QWORD *)v2 + 2) = v62;
        *((_QWORD *)v2 + 3) = v78;
        if (PointerTypeSizeInBits < 0x41)
          return v2;
        v74 = __src;
LABEL_94:
        if (v74)
          MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
        break;
      case 0x26:
LABEL_50:
        v42 = *(_QWORD *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF));
        return (llvm::Constant *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 224))(a1, v42);
      default:
        switch(*(_WORD *)(v29 + 18))
        {
          case '/':
            v30 = *(_QWORD *)(a1[36] + 2064) + 272;
            v31 = *(uint64_t **)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF));
            v32 = *(_QWORD *)v29;
            v2 = (llvm::Constant *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*a1 + 224))(a1, v31);
            v33 = sub_1C4E3D148(v30, v32);
            if (v33 <= sub_1C4E3D148(v30, *v31))
              return v2;
            v35 = sub_1C53E2F94(v30, *v31);
            if ((_DWORD)v34 == 1)
            v36 = sub_1C484358C(v4 + 192, 24, 3);
            *(_BYTE *)v36 = 1;
            *(_DWORD *)(v36 + 1) = *(unsigned __int8 *)(v36 + 4) << 24;
            *(_QWORD *)(v36 + 8) = 0;
            *(_QWORD *)(v36 + 16) = 0xFFFFFFFFFFFFFFFFLL >> -v35;
            v37 = sub_1C484358C(v4 + 192, 32, 3);
            *(_BYTE *)v37 = 0;
            *(_DWORD *)(v37 + 1) = (*(unsigned __int8 *)(v37 + 4) << 24) | 1;
            *(_QWORD *)(v37 + 8) = 0;
            *(_QWORD *)(v37 + 16) = v2;
            *(_QWORD *)(v37 + 24) = v36;
            return (llvm::Constant *)v37;
          case '0':
            v70 = *(llvm::ConstantExpr **)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF));
            llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(*(_QWORD *)(a1[36] + 2064) + 272), *(llvm::Type **)v2);
            IntegerCast = llvm::ConstantExpr::getIntegerCast(v70, v71, 0);
            goto LABEL_82;
          case '1':
            goto LABEL_50;
          case '2':
            v2 = *(llvm::Constant **)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF));
            v64 = *(_DWORD *)(*(_QWORD *)v29 + 8);
            if ((v64 & 0xFE) == 0x12)
              v64 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v29 + 16) + 8);
            v65 = v64 >> 8;
            v66 = *(_DWORD *)(*(_QWORD *)v2 + 8);
            if ((v66 & 0xFE) == 0x12)
              v66 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v2 + 16) + 8);
            if (!(*(unsigned int (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)a1[31] + 64))(a1[31], v66 >> 8, v65))goto LABEL_77;
            v12 = *(uint64_t (**)(_QWORD *, llvm::Constant *))(*a1 + 224);
            return (llvm::Constant *)v12(a1, v2);
          default:
            goto LABEL_77;
        }
    }
    return v2;
  }
  v12 = *(uint64_t (**)(_QWORD *, llvm::Constant *))(*a1 + 352);
  return (llvm::Constant *)v12(a1, v2);
}

void sub_1C5FF50E8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::Type *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  const char *v34;
  char v35;
  char v36;
  llvm::MCStreamer *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  llvm::raw_ostream *v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  int v49;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  unsigned __int8 v58;
  llvm::Type *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  const char *v65;
  char v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t RawDataValues;
  uint64_t v70;
  llvm::Type *v71;
  uint64_t v72;
  uint64_t v73;
  llvm::DataLayout *v74;
  int v75;
  BOOL v76;
  const char *v77;
  char v78;
  char v79;
  llvm::StructLayout *StructLayout;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  BOOL v95;
  const char *v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t ElementByteSize;
  llvm::Type *v102;
  llvm::Type *v103;
  unint64_t v104;
  int v105;
  int i;
  llvm::raw_ostream *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  void **v114;
  llvm::Type *v115;
  uint64_t v116;
  uint64_t v117;
  llvm::Type *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  BOOL v124;
  const char *v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  BOOL v132;
  const char *v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int j;
  llvm::Type *v139;
  uint64_t v140;
  unint64_t v141;
  int v142;
  BOOL v143;
  const char *v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  int v150;
  _BOOL8 v151;
  const char *v152;
  char v153;
  int v154;
  uint64_t v155;
  llvm::MCStreamer *v156;
  unsigned int v157;
  unint64_t v158;
  unsigned int v159;
  void **v160;
  unsigned __int8 v161;
  llvm::Type *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  BOOL v167;
  const char *v168;
  char v169;
  char v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  const char *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unsigned int v180;
  unint64_t v182;
  void *v184;
  const char *v185;
  uint64_t v186;
  int v187;
  char v188;
  uint64_t v189;

  v7 = (llvm::Type *)a1;
  v189 = *MEMORY[0x1E0C80C00];
  while (1)
  {
    v8 = a5;
    v9 = (uint64_t)a2;
    v10 = *a2;
    sub_1C4768AD0((uint64_t)v7, *a2);
    v12 = v11;
    v14 = v13 == 1;
    llvm::DataLayout::getAlignment((uint64_t)v7, v10);
    if (v14)
    {
      v22 = v15;
      v15 = v22;
    }
    v17 = a4;
    if (!a4)
    {
      v18 = *(_QWORD *)(v9 + 8);
      if (v18 && !*(_QWORD *)(v18 + 8))
      {
        v19 = *(_QWORD *)(v18 + 24);
        if (*(unsigned __int8 *)(v19 + 16) >= 0x15u)
          v17 = 0;
        else
          v17 = v19;
      }
      else
      {
        v17 = 0;
      }
    }
    v20 = ((1 << v15) + ((unint64_t)(v12 + 7) >> 3) - 1) & -(1 << v15);
    v21 = *(unsigned __int8 *)(v9 + 16);
    if ((v21 - 11) <= 2)
    {
      v37 = *(llvm::MCStreamer **)(a3 + 272);
      v38 = v20;
      goto LABEL_103;
    }
    switch(v21)
    {
      case 19:
        (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(a3 + 272) + 512))(*(_QWORD *)(a3 + 272), 0, v20);
        return;
      case 17:
        v47 = *(_QWORD *)(v9 + 32);
        if ((_UNKNOWN *)v47 == &unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v185, (const llvm::detail::DoubleAPFloat *)(v9 + 32));
        }
        else
        {
          v185 = *(const char **)(v9 + 32);
          if ((*(_DWORD *)(v47 + 8) + 64) >= 0x80)
          {
            v15 = operator new[]();
            v186 = v15;
          }
          v48 = *(_BYTE *)(v9 + 52);
          v49 = v48 & 7;
          v188 = v48 & 0xF;
          v187 = *(_DWORD *)(v9 + 48);
          v51 = (v48 & 6) != 0 && v49 != 3;
          if (v49 == 1 || v51)
          {
            v52 = *(unsigned int *)(v47 + 8);
            if ((v52 - 64) <= 0xFFFFFF7F)
              v53 = (uint64_t *)v15;
            else
              v53 = &v186;
            v54 = (uint64_t *)(v9 + 40);
            if ((*(_DWORD *)(*(_QWORD *)(v9 + 32) + 8) - 64) < 0xFFFFFF80)
              v54 = *(uint64_t **)(v9 + 40);
            if (v52 <= 0xFFFFFFBF)
            {
              v55 = (unint64_t)(v52 + 64) >> 6;
              do
              {
                v56 = *v54++;
                *v53++ = v56;
                --v55;
              }
              while (v55);
            }
          }
        }
        sub_1C5FF7478((uint64_t)&v184, *(llvm::Type **)v9, a3);
        if (v185 == (const char *)&unk_1C866F1C0)
        {
          sub_1C4773C74(&v186);
        }
        else if ((*((_DWORD *)v185 + 2) - 64) <= 0xFFFFFF7F && v186)
        {
          MEMORY[0x1CAA32F9C](v186, 0x1000C8000313F17);
        }
        return;
      case 16:
        sub_1C4768AD0((uint64_t)v7, *(_QWORD *)v9);
        v41 = v40 + 7;
        if ((_DWORD)v39 == 1)
        v42 = v41 >> 3;
        if (v41 <= 0x47)
        {
          if (*(_BYTE *)(a3 + 504))
          {
            v43 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 272) + 120))(*(_QWORD *)(a3 + 272));
            v44 = (uint64_t *)(v9 + 24);
            if (*(_DWORD *)(v9 + 32) >= 0x41u)
              v44 = (uint64_t *)*v44;
            v45 = *v44;
            v184 = &unk_1E8133270;
            v185 = "0x%llx\n";
            v186 = v45;
            llvm::raw_ostream::operator<<(v43, (uint64_t)&v184);
          }
          v46 = (_QWORD *)(v9 + 24);
          if (*(_DWORD *)(v9 + 32) >= 0x41u)
            v46 = (_QWORD *)*v46;
          (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(a3 + 272) + 512))(*(_QWORD *)(a3 + 272), *v46, v41 >> 3);
          goto LABEL_155;
        }
        v182 = v41 >> 3;
        v111 = *(_QWORD *)(*(_QWORD *)(a3 + 288) + 2064);
        v112 = *(unsigned int *)(v9 + 32);
        if (v112 > 0x40)
        {
          v114 = (void **)operator new[]();
          memcpy(v114, *(const void **)(v9 + 24), ((v112 + 63) >> 3) & 0x3FFFFFF8);
          v113 = (unint64_t)v114;
        }
        else
        {
          v113 = *(_QWORD *)(v9 + 24);
          v114 = &v184;
        }
        v184 = (void *)v113;
        if ((v112 & 0x3F) != 0)
        {
          if (*(_BYTE *)(v111 + 272))
          {
            v157 = ((v112 & 0x3F) + 7) & 0x78;
            v158 = (unint64_t)*v114 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v157);
            if (v112 <= 0x40)
            {
              if ((_DWORD)v112 == v157)
              {
                v113 = 0;
                v184 = 0;
                v157 = v112;
              }
              else
              {
                v113 >>= v157;
                v184 = (void *)v113;
              }
              goto LABEL_135;
            }
            v179 = (unint64_t)*v114 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v157);
            llvm::APInt::tcShiftRight((llvm::APInt *)v113, (unint64_t *)((v112 + 63) >> 6), v157);
            v159 = v112 >> 6;
            v160 = (void **)v113;
LABEL_141:
            v171 = 0;
            v180 = v159;
            v172 = v159 - 1;
            do
            {
              if (*(_BYTE *)(v111 + 272))
                v173 = v172;
              else
                v173 = v171;
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(a3 + 272) + 512))(*(_QWORD *)(a3 + 272), v160[v173], 8);
              ++v171;
              --v172;
            }
            while (v172 != -1);
            v158 = v179;
            goto LABEL_147;
          }
          v158 = *(unint64_t *)((char *)v114 + ((v112 >> 3) & 0x1FFFFFF8));
          v157 = 1;
        }
        else
        {
          v158 = 0;
          v157 = 0;
        }
LABEL_135:
        if (v112 >= 0x41)
          v160 = (void **)v113;
        else
          v160 = &v184;
        v159 = v112 >> 6;
        if (v112 >= 0x40)
        {
          v179 = v158;
          goto LABEL_141;
        }
        v180 = v112 >> 6;
LABEL_147:
        if (v157)
        {
          sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(a3 + 288) + 2064) + 272, *(_QWORD *)v9);
          v176 = v175 + 7;
          if ((_DWORD)v174 == 1)
          (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a3 + 272) + 512))(*(_QWORD *)(a3 + 272), v158, (v176 >> 3) - 8 * v180);
        }
        if (v112 >= 0x41 && v113)
          MEMORY[0x1CAA32F9C](v113, 0x1000C8000313F17);
        v42 = v182;
LABEL_155:
        v155 = v20 - v42;
        if (v20 == v42)
          return;
        v156 = *(llvm::MCStreamer **)(a3 + 272);
LABEL_157:
        llvm::MCStreamer::emitZeros(v156, v155);
        return;
    }
    if ((v21 & 0xFE) == 0xE)
      break;
    if (v21 != 5)
    {
      if (v21 == 9)
      {
        v178 = v17;
        v71 = *(llvm::Type **)v9;
        sub_1C4768AD0((uint64_t)v7, *(_QWORD *)v9);
        v73 = v72;
        v74 = v7;
        v76 = v75 == 1;
        llvm::DataLayout::getAlignment((uint64_t)v74, (uint64_t)v71);
        v79 = v78;
        if (v76)
        StructLayout = llvm::DataLayout::getStructLayout(v74, *(llvm::StructType **)v9);
        v81 = *(_DWORD *)(v9 + 20);
        v82 = v81 & 0x7FFFFFF;
        v83 = a3;
        v84 = v8;
        if ((v81 & 0x7FFFFFF) != 0)
        {
          v85 = 0;
          v86 = (1 << v79) - 1 + ((unint64_t)(v73 + 7) >> 3);
          v87 = (v82 - 1);
          v177 = -(1 << v79) & v86;
          v88 = (uint64_t *)((char *)StructLayout + 24);
          v89 = v9;
          do
          {
            v90 = *(uint64_t **)(v89 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
            sub_1C5FF50E8(a1, v90, v83, v178, v85 + v84);
            v91 = *v90;
            sub_1C4768AD0(a1, *v90);
            v93 = v92;
            v95 = v94 == 1;
            llvm::DataLayout::getAlignment(a1, v91);
            v98 = v97;
            if (v95)
            v99 = v177;
            if (v87)
              v99 = *v88;
            v100 = v99 - *(v88 - 1);
            v85 += v100;
            v83 = a3;
            llvm::MCStreamer::emitZeros(*(llvm::MCStreamer **)(a3 + 272), v100 - (((1 << v98) + ((unint64_t)(v93 + 7) >> 3) - 1) & -(1 << v98)));
            ++v88;
            --v87;
            v89 += 32;
            --v82;
            v84 = v8;
          }
          while (v82);
        }
        return;
      }
      if (v21 == 8)
      {
        v23 = sub_1C5FF7784(v9, (uint64_t)v7);
        if (v23 == -1)
        {
          v24 = v17;
          v25 = *(_DWORD *)(v9 + 20);
          v26 = v25 & 0x7FFFFFF;
          if ((v25 & 0x7FFFFFF) != 0)
          {
            v27 = a3;
            v28 = v9;
            do
            {
              sub_1C5FF50E8(a1, *(_QWORD *)(v28 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)), v27, v24, v8);
              v29 = **(_QWORD **)(v28 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
              sub_1C4768AD0(a1, v29);
              v31 = v30;
              v33 = v32 == 1;
              llvm::DataLayout::getAlignment(a1, v29);
              v36 = v35;
              if (v33)
              v8 += ((1 << v36) + ((unint64_t)(v31 + 7) >> 3) - 1) & -(1 << v36);
              v28 += 32;
              --v26;
              v27 = a3;
            }
            while (v26);
          }
        }
        else
        {
          v161 = v23;
          v162 = *(llvm::Type **)v9;
          sub_1C4768AD0((uint64_t)v7, *(_QWORD *)v9);
          v163 = (uint64_t)v7;
          v165 = v164;
          v167 = v166 == 1;
          llvm::DataLayout::getAlignment(v163, (uint64_t)v162);
          v170 = v169;
          if (v167)
          llvm::MCStreamer::emitFill(*(llvm::MCStreamer **)(a3 + 272), ((1 << v170) + ((unint64_t)(v165 + 7) >> 3) - 1) & -(1 << v170), v161);
        }
        return;
      }
LABEL_92:
      if (v21 != 10)
      {
LABEL_104:
        v136 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 224))(a3, v9);
        if (*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 248) + 24))(*(_QWORD *)(a3 + 248)) + 944))
        {
          v184 = 0;
          v185 = 0;
          v187 = 0;
          v186 = 0;
          llvm::MCExpr::evaluateAsRelocatableImpl(v136);
        }
        (*(void (**)(_QWORD, uint64_t, unint64_t, _QWORD))(**(_QWORD **)(a3 + 272) + 504))(*(_QWORD *)(a3 + 272), v136, v20, 0);
        return;
      }
      v115 = *(llvm::Type **)v9;
      v116 = *(unsigned int *)(*(_QWORD *)v9 + 32);
      if ((_DWORD)v116)
      {
        v117 = 0;
        v118 = v7;
        v119 = 32 * v116;
        do
        {
          sub_1C5FF50E8(v118, *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + v117), a3, 0, 0);
          v117 += 32;
        }
        while (v119 != v117);
        v115 = *(llvm::Type **)v9;
        v7 = v118;
      }
      sub_1C4768AD0((uint64_t)v7, (uint64_t)v115);
      v121 = (unint64_t)(v120 + 7) >> 3;
      v122 = (uint64_t)v7;
      v124 = v123 == 1;
      llvm::DataLayout::getAlignment(v122, (uint64_t)v115);
      v127 = ((1 << v126) + v121 - 1) & -(1 << v126);
      if (v124)
      v128 = *(_QWORD *)(*(_QWORD *)v9 + 24);
      sub_1C4768AD0(v122, v128);
      v130 = (unint64_t)(v129 + 7) >> 3;
      v132 = v131 == 1;
      llvm::DataLayout::getAlignment(v122, v128);
      v135 = (((1 << v134) + v130 - 1) & -(1 << v134)) * *(unsigned int *)(*(_QWORD *)v9 + 32);
      if (v132)
      if ((_DWORD)v127 == (_DWORD)v135)
        return;
      v37 = *(llvm::MCStreamer **)(a3 + 272);
      v38 = (v127 - v135);
LABEL_103:
      llvm::MCStreamer::emitZeros(v37, v38);
      return;
    }
    if (*(_WORD *)(v9 + 18) == 49)
    {
      a4 = 0;
      a5 = 0;
      a2 = *(uint64_t **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
    }
    else
    {
      if (v20 < 9)
        goto LABEL_104;
      a2 = (uint64_t *)llvm::ConstantFoldConstant(v9, v7, 0);
      a4 = 0;
      a5 = 0;
      if (a2 == (uint64_t *)v9)
      {
        v21 = *(unsigned __int8 *)(v9 + 16);
        goto LABEL_92;
      }
    }
  }
  v57 = sub_1C5FF7784(v9, (uint64_t)v7);
  if (v57 != -1)
  {
    v58 = v57;
    v59 = *(llvm::Type **)v9;
    sub_1C4768AD0((uint64_t)v7, *(_QWORD *)v9);
    v61 = (unint64_t)(v60 + 7) >> 3;
    v62 = (uint64_t)v7;
    v64 = v63 == 1;
    llvm::DataLayout::getAlignment(v62, (uint64_t)v59);
    v67 = ((1 << v66) + v61 - 1) & -(1 << v66);
    if (v64)
    if (v67 >= 2)
    {
      llvm::MCStreamer::emitFill(*(llvm::MCStreamer **)(a3 + 272), v67, v58);
      return;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)v9 + 8) == 17 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 24) + 8) == 2061)
  {
    v68 = *(_QWORD *)(a3 + 272);
    RawDataValues = llvm::ConstantDataSequential::getRawDataValues((llvm::ConstantDataSequential *)v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68 + 488))(v68, RawDataValues, v70);
    return;
  }
  ElementByteSize = llvm::ConstantDataSequential::getElementByteSize((llvm::ConstantDataSequential *)v9);
  v102 = *(llvm::Type **)v9;
  v103 = *(llvm::Type **)(*(_QWORD *)v9 + 24);
  if (*((_BYTE *)v103 + 8) == 13)
  {
    v104 = ElementByteSize;
    v105 = *((_DWORD *)v102 + 8);
    if (v105)
    {
      for (i = 0; i != v105; ++i)
      {
        if (*(_BYTE *)(a3 + 504))
        {
          v107 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 272) + 120))(*(_QWORD *)(a3 + 272));
          llvm::ConstantDataSequential::getElementAsInteger((llvm::ConstantDataSequential *)v9);
          v184 = &unk_1E8133270;
          v185 = "0x%llx\n";
          v186 = v108;
          llvm::raw_ostream::operator<<(v107, (uint64_t)&v184);
        }
        v109 = *(_QWORD *)(a3 + 272);
        llvm::ConstantDataSequential::getElementAsInteger((llvm::ConstantDataSequential *)v9);
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v109 + 512))(v109, v110, v104);
      }
    }
  }
  else
  {
    v137 = *((_DWORD *)v102 + 8);
    if (v137)
    {
      for (j = 0; j != v137; ++j)
      {
        llvm::ConstantDataSequential::getElementAsAPFloat((llvm::ConstantDataSequential *)v9);
        sub_1C5FF7478((uint64_t)&v184, v103, a3);
        if (v185 == (const char *)&unk_1C866F1C0)
        {
          sub_1C4773C74(&v186);
        }
        else if ((*((_DWORD *)v185 + 2) - 64) <= 0xFFFFFF7F && v186)
        {
          MEMORY[0x1CAA32F9C](v186, 0x1000C8000313F17);
        }
      }
    }
  }
  v139 = *(llvm::Type **)v9;
  sub_1C4768AD0(a1, *(_QWORD *)v9);
  v141 = (unint64_t)(v140 + 7) >> 3;
  v143 = v142 == 1;
  llvm::DataLayout::getAlignment(a1, (uint64_t)v139);
  v146 = ((1 << v145) + v141 - 1) & -(1 << v145);
  if (v143)
  v147 = *(_QWORD *)(*(_QWORD *)v9 + 24);
  sub_1C4768AD0(a1, v147);
  v149 = (unint64_t)(v148 + 7) >> 3;
  v151 = v150 == 1;
  llvm::DataLayout::getAlignment(a1, v147);
  v154 = (((1 << v153) + v149 - 1) & -(1 << v153)) * *(_DWORD *)(*(_QWORD *)v9 + 32);
  if (v151)
  if ((_DWORD)v146 != v154)
  {
    v155 = (v146 - v154);
    v156 = *(llvm::MCStreamer **)(a3 + 272);
    goto LABEL_157;
  }
}

unint64_t sub_1C5FF6064(uint64_t a1, unsigned int a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::MachineConstantPoolEntry *v14;
  const llvm::DataLayout *v15;
  unsigned int SectionKind;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  _QWORD v22[4];
  __int16 v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;
  _QWORD v28[4];
  __int16 v29;

  v4 = *(_QWORD **)(a1 + 280);
  v5 = v4[2];
  if (*(_DWORD *)(v5 + 44) != 15)
    goto LABEL_4;
  if ((*(_DWORD *)(v5 + 48) | 0x10) != 0x10)
    goto LABEL_4;
  v6 = *(_QWORD *)(v4[8] + 8);
  if (*(_BYTE *)(v6 + 16 * a2 + 9))
    goto LABEL_4;
  v14 = (llvm::MachineConstantPoolEntry *)(v6 + 16 * a2);
  v15 = (const llvm::DataLayout *)(*(_QWORD *)(*v4 + 40) + 272);
  SectionKind = llvm::MachineConstantPoolEntry::getSectionKind(v14, v15);
  v17 = *(_QWORD *)v14;
  LOBYTE(v28[0]) = *((_BYTE *)v14 + 8);
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248));
  v19 = (*(uint64_t (**)(uint64_t, const llvm::DataLayout *, _QWORD, uint64_t, _QWORD *))(*(_QWORD *)v18 + 56))(v18, v15, SectionKind, v17, v28);
  v20 = v19 && *(_DWORD *)(v19 + 216) == 0;
  if (v20 && (v12 = *(_QWORD *)(v19 + 232)) != 0)
  {
    v21 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
    if (!v21 && (*(_DWORD *)(v12 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v12 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v12 + 24));
      *(_QWORD *)v12 = *(_QWORD *)v12 & 7 | v21;
    }
    if (!v21)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 272) + 304))(*(_QWORD *)(a1 + 272), v12, 9);
  }
  else
  {
LABEL_4:
    v7 = *(_QWORD *)(a1 + 280);
    v8 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 2064) + 300);
    v9 = qword_1C86774E0[v8];
    v10 = *(_QWORD *)(a1 + 264);
    v22[0] = *((_QWORD *)&off_1E81AAFE0 + v8);
    v22[1] = v9;
    v22[2] = "CPI";
    v23 = 773;
    v11 = *(unsigned int *)(v7 + 336);
    v24[0] = v22;
    v24[2] = v11;
    v25 = 2050;
    v26[0] = v24;
    v26[2] = "_";
    v27 = 770;
    v28[0] = v26;
    v28[2] = a2;
    v29 = 2050;
    return llvm::MCContext::getOrCreateSymbol(v10, (uint64_t)v28);
  }
  return v12;
}

uint64_t sub_1C5FF6240(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::raw_ostream *v29;
  _WORD *v30;
  unsigned int v31;
  _QWORD *v32;
  llvm::raw_ostream *v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  _BYTE *v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  unint64_t Symbol;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  unint64_t EHCatchretSymbol;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[4];
  __int16 v59;
  _QWORD v60[4];
  __int16 v61;
  _QWORD v62[4];
  __int16 v63;
  _QWORD v64[2];
  const char *v65;
  __int16 v66;
  _QWORD v67[2];
  const char *v68;
  __int16 v69;

  if (*(_BYTE *)(a2 + 189))
  {
    v4 = *(_QWORD **)(a1 + 528);
    v5 = *(_QWORD **)(a1 + 536);
    while (v4 != v5)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 88))(*v4);
      v6 = *v4;
      v4 += 9;
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 80))(v6, a2, 0);
    }
  }
  if (*(_BYTE *)(a2 + 176))
    sub_1C5FECEF4((_QWORD *)a1, *(unsigned __int8 *)(a2 + 176), 0, *(unsigned int *)(a2 + 180));
  if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(*(_QWORD *)(a2 + 32) + 328) != a2)
  {
    v7 = *(_QWORD *)(a1 + 272);
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 24))(*(_QWORD *)(a1 + 248));
    v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 64))(v8, **(_QWORD **)(a1 + 280), a2, *(_QWORD *)(a1 + 248));
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 168))(v7, v9, 0);
    *(_QWORD *)(a1 + 480) = llvm::MachineBasicBlock::getSymbol((llvm::MachineBasicBlock *)a2);
  }
  v10 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 185))
  {
    if (*(_BYTE *)(a1 + 504))
    {
      v11 = *(_QWORD *)(a1 + 272);
      v67[0] = "Block address taken";
      v69 = 259;
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v11 + 112))(v11, v67, 1);
    }
    if (!v10)
    {
      if (!*(_BYTE *)(a1 + 504))
        goto LABEL_46;
      goto LABEL_21;
    }
    if ((*(_WORD *)(v10 + 18) & 0x7FFF) != 0)
    {
      v53 = sub_1C63BC374(a1, v10);
      if (v54)
      {
        v55 = v53;
        v56 = 8 * v54;
        do
        {
          v57 = *v55++;
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 192))(*(_QWORD *)(a1 + 272), v57, 0);
          v56 -= 8;
        }
        while (v56);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 504))
    goto LABEL_46;
  if (v10 && (*(_BYTE *)(v10 + 23) & 0x10) != 0)
  {
    v12 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 120))(*(_QWORD *)(a1 + 272));
    llvm::Value::printAsOperand((llvm::Value *)v10, v12, 0, *(const llvm::Module **)(*(_QWORD *)(v10 + 56) + 40));
    v13 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 120))(*(_QWORD *)(a1 + 272));
    v14 = (_BYTE *)*((_QWORD *)v13 + 4);
    if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
    {
      llvm::raw_ostream::write(v13, 10);
    }
    else
    {
      *((_QWORD *)v13 + 4) = v14 + 1;
      *v14 = 10;
    }
  }
LABEL_21:
  v15 = *(_QWORD *)(a1 + 304);
  v16 = *(_DWORD *)(v15 + 264);
  if (v16)
  {
    v17 = *(_QWORD *)(v15 + 248);
    v18 = v16 - 1;
    v19 = (v16 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v20 = *(_QWORD *)(v17 + 16 * v19);
    if (v20 == a2)
    {
LABEL_26:
      v23 = *(_QWORD *)(v17 + 16 * v19 + 8);
      if (v23)
      {
        v24 = **(_QWORD **)(v23 + 32);
        v25 = *(_QWORD *)(a1 + 272);
        if (v24 == a2)
        {
          v29 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 120))(v25);
          sub_1C5FF794C(v29, *(_QWORD **)v23, *(_DWORD *)(*(_QWORD *)(a1 + 280) + 336));
          v30 = (_WORD *)*((_QWORD *)v29 + 4);
          if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 1uLL)
          {
            *v30 = 15933;
            *((_QWORD *)v29 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v29, "=>", 2uLL);
          }
          v31 = -2;
          v32 = (_QWORD *)v23;
          do
          {
            v32 = (_QWORD *)*v32;
            v31 += 2;
          }
          while (v32);
          v33 = llvm::raw_ostream::indent(v29, v31);
          v35 = *((_QWORD *)v29 + 4);
          if ((unint64_t)(*((_QWORD *)v29 + 3) - v35) > 4)
          {
            *(_BYTE *)(v35 + 4) = 32;
            *(_DWORD *)v35 = 1936287828;
            *((_QWORD *)v29 + 4) += 5;
          }
          else
          {
            v33 = llvm::raw_ostream::write(v29, "This ", 5uLL);
          }
          if (*(_QWORD *)(v23 + 8) == *(_QWORD *)(v23 + 16))
          {
            v36 = *((_QWORD *)v29 + 4);
            if ((unint64_t)(*((_QWORD *)v29 + 3) - v36) > 5)
            {
              *(_WORD *)(v36 + 4) = 8306;
              *(_DWORD *)v36 = 1701736009;
              *((_QWORD *)v29 + 4) += 6;
            }
            else
            {
              v33 = llvm::raw_ostream::write(v29, "Inner ", 6uLL);
            }
          }
          LODWORD(v37) = 0;
          v38 = (_QWORD *)v23;
          do
          {
            v38 = (_QWORD *)*v38;
            v37 = (v37 + 1);
          }
          while (v38);
          llvm::Twine::printOneChild((uint64_t)v33, v29, (uint64_t)"Loop Header: Depth=", v34, 3);
          llvm::Twine::printOneChild(v39, v29, v37, v40, 8);
          v41 = (_BYTE *)*((_QWORD *)v29 + 4);
          if ((unint64_t)v41 >= *((_QWORD *)v29 + 3))
          {
            llvm::raw_ostream::write(v29, 10);
          }
          else
          {
            *((_QWORD *)v29 + 4) = v41 + 1;
            *v41 = 10;
          }
          sub_1C5FF7B1C((uint64_t)v29, v23, *(unsigned int *)(*(_QWORD *)(a1 + 280) + 336));
        }
        else
        {
          LODWORD(v26) = 0;
          v27 = *(unsigned int *)(*(_QWORD *)(a1 + 280) + 336);
          v58[0] = "  in Loop: Header=BB";
          v58[2] = v27;
          v59 = 2051;
          v60[0] = v58;
          v60[2] = "_";
          v61 = 770;
          v28 = *(unsigned int *)(v24 + 24);
          v62[0] = v60;
          v62[2] = v28;
          v63 = 2306;
          v64[0] = v62;
          v65 = " Depth=";
          v66 = 770;
          do
          {
            v23 = *(_QWORD *)v23;
            v26 = (const char *)((_DWORD)v26 + 1);
          }
          while (v23);
          v67[0] = v64;
          v68 = v26;
          v69 = 2050;
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v25 + 112))(v25, v67, 1);
        }
      }
    }
    else
    {
      v21 = 1;
      while (v20 != -4096)
      {
        v22 = v19 + v21++;
        v19 = v22 & v18;
        v20 = *(_QWORD *)(v17 + 16 * v19);
        if (v20 == a2)
          goto LABEL_26;
      }
    }
  }
LABEL_46:
  result = sub_1C5FF683C((_QWORD *)a1, a2);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 504) && *(_BYTE *)(a2 + 186))
    {
      v43 = *(_QWORD *)(a1 + 272);
      v67[0] = "Label of block must be emitted";
      v69 = 259;
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v43 + 112))(v43, v67, 1);
    }
    v44 = *(_QWORD *)(a1 + 272);
    Symbol = llvm::MachineBasicBlock::getSymbol((llvm::MachineBasicBlock *)a2);
    result = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v44 + 192))(v44, Symbol, 0);
  }
  else if (*(_BYTE *)(a1 + 504))
  {
    v46 = *(_QWORD *)(a1 + 272);
    v47 = (const char *)*(unsigned int *)(a2 + 24);
    v64[0] = " %bb.";
    v65 = v47;
    v66 = 2307;
    v67[0] = v64;
    v68 = ":";
    v69 = 770;
    result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v46 + 128))(v46, v67, 0);
  }
  if (*(_BYTE *)(a2 + 188) && *(_DWORD *)(*(_QWORD *)(a1 + 256) + 412) == 4)
  {
    v48 = *(_QWORD *)(a1 + 272);
    EHCatchretSymbol = llvm::MachineBasicBlock::getEHCatchretSymbol((llvm::MachineBasicBlock *)a2);
    result = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v48 + 192))(v48, EHCatchretSymbol, 0);
  }
  if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(*(_QWORD *)(a2 + 32) + 328) != a2)
  {
    v50 = *(uint64_t **)(a1 + 528);
    v51 = *(uint64_t **)(a1 + 536);
    while (v50 != v51)
    {
      v52 = *v50;
      v50 += 9;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 112))(v52, a2);
    }
  }
  return result;
}

BOOL sub_1C5FF683C(_QWORD *a1, uint64_t a2)
{
  BOOL v3;
  BOOL v4;

  v3 = *(_DWORD *)(a1[35] + 640) != 2 && *(_BYTE *)(a2 + 200) == 0;
  if (!v3 && *(_QWORD *)(*(_QWORD *)(a2 + 32) + 328) != a2)
    return 1;
  if (*(_QWORD *)(a2 + 64) == *(_QWORD *)(a2 + 72))
    return 0;
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(*a1 + 328))(a1, a2))
    v4 = *(_BYTE *)(a2 + 189) == 0;
  else
    v4 = 0;
  if (!v4)
    return 1;
  return *(_BYTE *)(a2 + 186) != 0;
}

uint64_t sub_1C5FF68C8(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 201))
  {
    v2 = *(uint64_t **)(result + 528);
    for (i = *(uint64_t **)(result + 536);
          v2 != i;
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 120))(v4, a2))
    {
      v4 = *v2;
      v2 += 9;
    }
  }
  return result;
}

uint64_t sub_1C5FF6924(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  llvm::MachineBasicBlock **v5;
  llvm::MachineBasicBlock **v6;
  llvm::MachineBasicBlock *v7;
  _QWORD *v8;
  unint64_t FirstTerminator;
  __int16 v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;

  if (*(_BYTE *)(a2 + 184))
    return 0;
  v5 = *(llvm::MachineBasicBlock ***)(a2 + 64);
  v6 = *(llvm::MachineBasicBlock ***)(a2 + 72);
  if (v5 == v6)
    return 0;
  if ((((char *)v6 - (char *)v5) & 0x7FFFFFFF0) != 0)
    return 0;
  v7 = *v5;
  if (*((_QWORD *)*v5 + 1) != a2)
    return 0;
  v8 = (_QWORD *)((char *)v7 + 48);
  if ((llvm::MachineBasicBlock *)((char *)v7 + 48) == (llvm::MachineBasicBlock *)(*((_QWORD *)v7 + 6) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v7);
  if (v8 == (_QWORD *)FirstTerminator)
    return 1;
  while (1)
  {
    v10 = *(_WORD *)(FirstTerminator + 44);
    v11 = *(_QWORD *)(*(_QWORD *)(FirstTerminator + 16) + 8);
    if ((v10 & 0xC) != 0 && (v10 & 4) == 0)
      break;
    if ((*(_QWORD *)(*(_QWORD *)(FirstTerminator + 16) + 8) & 0xC00) != 0x400)
      return 0;
    v13 = FirstTerminator;
    if ((v10 & 4) != 0)
    {
      v13 = FirstTerminator;
      do
        v13 = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v13 + 44) & 4) != 0);
    }
LABEL_15:
    v14 = *(_QWORD *)(FirstTerminator + 24) + 48;
    v15 = *(unsigned __int8 **)(v13 + 32);
    v16 = *(unsigned int *)(v13 + 40);
    v17 = &v15[32 * v16];
    if ((_DWORD)v16)
      goto LABEL_38;
    v18 = *(_QWORD *)(v13 + 8);
    if (v18 == v14)
    {
      v13 = *(_QWORD *)(FirstTerminator + 24) + 48;
      goto LABEL_38;
    }
    v13 = *(_QWORD *)(FirstTerminator + 24) + 48;
    if ((*(_WORD *)(v18 + 44) & 4) == 0)
      goto LABEL_38;
    while (1)
    {
      v19 = v18;
      v20 = *(unsigned int *)(v18 + 40);
      if ((_DWORD)v20)
        break;
      v18 = *(_QWORD *)(v18 + 8);
      if (v18 == v14 || (*(_WORD *)(v18 + 44) & 4) == 0)
      {
LABEL_35:
        v13 = *(_QWORD *)(FirstTerminator + 24) + 48;
        goto LABEL_37;
      }
    }
LABEL_36:
    v13 = v19;
LABEL_37:
    v15 = *(unsigned __int8 **)(v19 + 32);
    v17 = &v15[32 * v20];
LABEL_38:
    while (v15 != v17)
    {
      v23 = *v15;
      if (v23 == 4)
      {
        if (*((_QWORD *)v15 + 2) == a2)
          return 0;
      }
      else if (v23 == 8)
      {
        return 0;
      }
      v15 += 32;
      if (v15 == v17)
      {
        v24 = *(_QWORD *)(v13 + 8);
        if (v24 == v14)
          break;
        v15 = v17;
        v13 = *(_QWORD *)(FirstTerminator + 24) + 48;
        if ((*(_WORD *)(v24 + 44) & 4) != 0)
        {
          while (1)
          {
            v19 = v24;
            v20 = *(unsigned int *)(v24 + 40);
            if ((_DWORD)v20)
              goto LABEL_36;
            v24 = *(_QWORD *)(v24 + 8);
            if (v24 == v14 || (*(_WORD *)(v24 + 44) & 4) == 0)
              goto LABEL_35;
          }
        }
      }
    }
    if ((v10 & 8) != 0 && (*(_QWORD *)FirstTerminator & 4) == 0)
    {
      do
        FirstTerminator = *(_QWORD *)(FirstTerminator + 8);
      while ((*(_WORD *)(FirstTerminator + 44) & 8) != 0);
    }
    FirstTerminator = *(_QWORD *)(FirstTerminator + 8);
    v2 = 1;
    if ((_QWORD *)FirstTerminator == v8)
      return v2;
  }
  v21 = FirstTerminator;
  if ((v11 & 0x400) != 0)
  {
LABEL_25:
    if ((v11 & 0x800) != 0)
      return 0;
    v22 = FirstTerminator;
    while ((*(_WORD *)(v22 + 44) & 8) != 0)
    {
      v2 = 0;
      v22 = *(_QWORD *)(v22 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v22 + 16) + 9) & 8) != 0)
        return v2;
    }
    v13 = FirstTerminator;
    goto LABEL_15;
  }
  while ((*(_WORD *)(v21 + 44) & 8) != 0)
  {
    v21 = *(_QWORD *)(v21 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v21 + 16) + 9) & 4) != 0)
      goto LABEL_25;
  }
  return 0;
}

uint64_t sub_1C5FF6B54(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 8) + 1624);
}

BOOL sub_1C5FF6B64(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 8) + 1626) == 1;
}

unint64_t sub_1C5FF6B7C(_QWORD *a1)
{
  return ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1[34] + 8) + 1626) << 24) | ((unint64_t)*(unsigned __int8 *)(a1[32] + 424) << 32) | *(unsigned __int16 *)(*(_QWORD *)(a1[34] + 8) + 1624) | ((*(_DWORD *)(*(_QWORD *)(a1[31] + 248) + 4) << 13) + 57344) & 0xFF0000;
}

uint64_t *sub_1C5FF6BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t *****v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  int32x2_t ****v36;
  int32x2_t *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int32x2_t *****v42;
  int32x2_t ****v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;

  v2 = *(_QWORD *)(a1 + 32);
  v46 = *(_QWORD *)(a1 + 24);
  v1 = v46;
  v3 = sub_1C63BD880(v2 + 8, &v46);
  v5 = v3[1];
  v4 = v3[2];
  v3[1] = 0;
  v47 = v5;
  v48 = v4;
  v49 = *((_DWORD *)v3 + 6);
  sub_1C63BC40C(v2 + 8, v1);
  v6 = v49;
  v7 = *(_QWORD *)(v2 + 32);
  v8 = v7 + 40 * v49;
  v11 = *(_QWORD *)(v8 + 24);
  v9 = (int32x2_t *****)(v8 + 24);
  v10 = v11;
  if (v11)
  {
    if (v10 != -4096 && v10 != -8192)
    {
      v33 = (unint64_t)*(v9 - 2) & 0xFFFFFFFFFFFFFFF8;
      v34 = v7 + 40 * v49;
      *(_QWORD *)v33 = *(_QWORD *)(v34 + 16);
      v35 = *(unint64_t **)(v34 + 16);
      if (v35)
      {
        *v35 = *v35 & 7 | v33;
      }
      else
      {
        v36 = *v9;
        v37 = ****v9;
        v38 = (unint64_t)v37[303];
        if (v38 <= v33)
        {
          v39 = v37[305].u32[0];
          if (v38 + 16 * v39 > v33)
          {
            v40 = v39 - 1;
            LODWORD(v41) = v40 & ((v36 >> 4) ^ (v36 >> 9));
            v42 = (int32x2_t *****)(v38 + 16 * v41);
            v43 = *v42;
            if (v36 == *v42)
            {
LABEL_42:
              *v42 = (int32x2_t ****)-8192;
              v37[304] = vadd_s32(v37[304], (int32x2_t)0x1FFFFFFFFLL);
              v36 = *v9;
            }
            else
            {
              v44 = 1;
              while (v43 != (int32x2_t ****)-4096)
              {
                v45 = v41 + v44++;
                v41 = v45 & v40;
                v43 = *(int32x2_t *****)(v38 + 16 * v41);
                if (v36 == v43)
                {
                  v42 = (int32x2_t *****)(v38 + 16 * v41);
                  goto LABEL_42;
                }
              }
            }
            *((_BYTE *)v36 + 17) &= ~1u;
          }
        }
      }
    }
    *v9 = 0;
  }
  *(_QWORD *)(v7 + 40 * v6 + 32) = 0;
  if ((v5 & 4) != 0)
  {
    v15 = v5 & 0xFFFFFFFFFFFFFFF8;
    v13 = *(uint64_t **)(v5 & 0xFFFFFFFFFFFFFFF8);
    v14 = &v13[*(unsigned int *)(v15 + 8)];
  }
  else
  {
    v12 = v5 > 7;
    v13 = (uint64_t *)&v47;
    v14 = (uint64_t *)(&v47 + v12);
  }
  if (v13 != v14)
  {
    v17 = v2 + 56;
    do
    {
      v18 = (_QWORD *)*v13;
      v19 = *(_QWORD *)*v13 & 0xFFFFFFFFFFFFFFF8;
      if (!v19 && (v18[1] & 0x1C00) == 0x800)
      {
        *((_DWORD *)v18 + 2) |= 4u;
        llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v18[3]);
        *v18 = *v18 & 7 | v19;
      }
      if (v19)
        break;
      v46 = v48;
      v20 = sub_1C61D0AA8(v17, &v46);
      v21 = v20;
      v23 = (_QWORD *)v20[2];
      v22 = v20[3];
      if ((unint64_t)v23 >= v22)
      {
        v25 = (_QWORD *)v20[1];
        v26 = v23 - v25;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          abort();
        v28 = v22 - (_QWORD)v25;
        if (v28 >> 2 > v27)
          v27 = v28 >> 2;
        v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v27;
        if (v29)
        {
          if (v29 >> 61)
            sub_1C4764EE4();
          v30 = (char *)operator new(8 * v29);
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[8 * v26];
        *(_QWORD *)v31 = v18;
        v24 = v31 + 8;
        if (v23 != v25)
        {
          do
          {
            v32 = *--v23;
            *((_QWORD *)v31 - 1) = v32;
            v31 -= 8;
          }
          while (v23 != v25);
          v23 = (_QWORD *)v21[1];
        }
        v21[1] = v31;
        v21[2] = v24;
        v21[3] = &v30[8 * v29];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *v23 = v18;
        v24 = v23 + 1;
      }
      v21[2] = v24;
      ++v13;
    }
    while (v13 != v14);
  }
  return sub_1C619127C((uint64_t *)&v47);
}

uint64_t *sub_1C5FF6EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t *****v13;
  uint64_t v14;
  uint64_t v15;
  llvm::ValueHandleBase *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int32x2_t *****v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  int32x2_t ****v40;
  int32x2_t *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int32x2_t *****v46;
  int32x2_t ****v47;
  int v48;
  int v49;
  uint64_t v50;
  unsigned int *v51;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  int32x2_t ****v56;
  int32x2_t *v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int32x2_t *****v62;
  int32x2_t ****v63;
  int v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;

  v4 = *(_QWORD *)(a1 + 32);
  v67 = *(_QWORD *)(a1 + 24);
  v3 = v67;
  v5 = sub_1C63BD880(v4 + 8, &v67);
  v7 = v5[1];
  v6 = v5[2];
  v5[1] = 0;
  v68 = v7;
  v69 = v6;
  v70 = *((_DWORD *)v5 + 6);
  sub_1C63BC40C(v4 + 8, v3);
  v67 = a2;
  v8 = sub_1C63BD880(v4 + 8, &v67);
  v10 = v8 + 1;
  v9 = v8[1];
  if (v9 < 8 || (v9 & 4) != 0 && (v9 & 0xFFFFFFFFFFFFFFF8) != 0 && !*(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8))
  {
    v11 = *(_QWORD *)(v4 + 32);
    v12 = v11 + 40 * v70;
    v15 = *(_QWORD *)(v12 + 24);
    v13 = (int32x2_t *****)(v12 + 24);
    v14 = v15;
    if (v15 != a2)
    {
      v16 = (llvm::ValueHandleBase *)(v13 - 2);
      if (v14 && v14 != -8192 && v14 != -4096)
      {
        v53 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
        v54 = v11 + 40 * v70;
        *(_QWORD *)v53 = *(_QWORD *)(v54 + 16);
        v55 = *(unint64_t **)(v54 + 16);
        if (v55)
        {
          *v55 = *v55 & 7 | v53;
        }
        else
        {
          v56 = *v13;
          v57 = ****v13;
          v58 = (unint64_t)v57[303];
          if (v58 <= v53)
          {
            v59 = v57[305].u32[0];
            if (v58 + 16 * v59 > v53)
            {
              v60 = v59 - 1;
              LODWORD(v61) = v60 & ((v56 >> 4) ^ (v56 >> 9));
              v62 = (int32x2_t *****)(v58 + 16 * v61);
              v63 = *v62;
              if (v56 == *v62)
              {
LABEL_75:
                *v62 = (int32x2_t ****)-8192;
                v57[304] = vadd_s32(v57[304], (int32x2_t)0x1FFFFFFFFLL);
                v56 = *v13;
              }
              else
              {
                v64 = 1;
                while (v63 != (int32x2_t ****)-4096)
                {
                  v65 = v61 + v64++;
                  v61 = v65 & v60;
                  v63 = *(int32x2_t *****)(v58 + 16 * v61);
                  if (v56 == v63)
                  {
                    v62 = (int32x2_t *****)(v58 + 16 * v61);
                    goto LABEL_75;
                  }
                }
              }
              *((_BYTE *)v56 + 17) &= ~1u;
            }
          }
        }
      }
      *v13 = (int32x2_t ****)a2;
      if (a2 != -8192 && a2 != -4096 && a2)
        llvm::ValueHandleBase::AddToUseList(v16);
    }
    if (v10 == (uint64_t *)&v68)
      goto LABEL_63;
    v17 = v68;
    if (v68 < 8 || (v18 = v68 & 0xFFFFFFFFFFFFFFF8, (v68 & 4) != 0) && v18 && !*(_DWORD *)(v18 + 8))
    {
      if ((*v10 & 4) != 0)
      {
        v36 = *v10 & 0xFFFFFFFFFFFFFFF8;
        if (v36)
          *(_DWORD *)(v36 + 8) = 0;
      }
      else
      {
        *v10 = 0;
      }
      goto LABEL_63;
    }
    v33 = *v10;
    if ((*v10 & 4) != 0)
    {
      v34 = v33 & 0xFFFFFFFFFFFFFFF8;
      if ((v33 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if ((v68 & 4) == 0)
        {
          *(_DWORD *)(v34 + 8) = 0;
          if (*(_DWORD *)(v34 + 12))
          {
            v35 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v33 & 0xFFFFFFFFFFFFFFF8, v34 + 16, 1uLL, 8);
            v35 = *(unsigned int *)(v34 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v34 + 8 * v35) = v18;
          ++*(_DWORD *)(v34 + 8);
          goto LABEL_62;
        }
        if (*(_QWORD *)v34 != v34 + 16)
          free(*(void **)v34);
        MEMORY[0x1CAA32FC0](v34, 0x1080C40ED926357);
        v17 = v68;
      }
    }
    *v10 = v17;
LABEL_62:
    v68 = 0;
LABEL_63:
    v8[2] = v69;
    *((_DWORD *)v8 + 6) = v70;
    return sub_1C619127C((uint64_t *)&v68);
  }
  v19 = v70;
  v20 = *(_QWORD *)(v4 + 32);
  v21 = v20 + 40 * v70;
  v24 = *(_QWORD *)(v21 + 24);
  v22 = (int32x2_t *****)(v21 + 24);
  v23 = v24;
  if (v24)
  {
    if (v23 != -4096 && v23 != -8192)
    {
      v37 = (unint64_t)*(v22 - 2) & 0xFFFFFFFFFFFFFFF8;
      v38 = v20 + 40 * v70;
      *(_QWORD *)v37 = *(_QWORD *)(v38 + 16);
      v39 = *(unint64_t **)(v38 + 16);
      if (v39)
      {
        *v39 = *v39 & 7 | v37;
      }
      else
      {
        v40 = *v22;
        v41 = ****v22;
        v42 = (unint64_t)v41[303];
        if (v42 <= v37)
        {
          v43 = v41[305].u32[0];
          if (v42 + 16 * v43 > v37)
          {
            v44 = v43 - 1;
            LODWORD(v45) = (v43 - 1) & ((v40 >> 4) ^ (v40 >> 9));
            v46 = (int32x2_t *****)(v42 + 16 * v45);
            v47 = *v46;
            if (v40 == *v46)
            {
LABEL_52:
              *v46 = (int32x2_t ****)-8192;
              v41[304] = vadd_s32(v41[304], (int32x2_t)0x1FFFFFFFFLL);
              v40 = *v22;
            }
            else
            {
              v48 = 1;
              while (v47 != (int32x2_t ****)-4096)
              {
                v49 = v45 + v48++;
                v45 = v49 & v44;
                v47 = *(int32x2_t *****)(v42 + 16 * v45);
                if (v40 == v47)
                {
                  v46 = (int32x2_t *****)(v42 + 16 * v45);
                  goto LABEL_52;
                }
              }
            }
            *((_BYTE *)v40 + 17) &= ~1u;
            v9 = *v10;
          }
        }
      }
    }
    *v22 = 0;
  }
  *(_QWORD *)(v20 + 40 * v19 + 32) = 0;
  if ((v9 & 4) != 0)
  {
    v25 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8) + 8 * *(unsigned int *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
    if ((v7 & 4) != 0)
      goto LABEL_23;
  }
  else
  {
    v25 = (uint64_t)&v10[v9 > 7];
    if ((v7 & 4) != 0)
    {
LABEL_23:
      v26 = *(uint64_t **)(v7 & 0xFFFFFFFFFFFFFFF8);
      v27 = &v26[*(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8)];
      goto LABEL_26;
    }
  }
  v26 = (uint64_t *)&v68;
  v27 = (uint64_t *)(&v68 + (v7 > 7));
LABEL_26:
  if (v26 == v27)
    return sub_1C619127C((uint64_t *)&v68);
  if ((v9 & 4) == 0)
  {
    v28 = (v25 - (uint64_t)v10) >> 3;
    if (v9 >= 8)
    {
      v29 = v9 & 0xFFFFFFFFFFFFFFF8;
      v30 = operator new();
      *(_QWORD *)v30 = v30 + 16;
      *(_QWORD *)(v30 + 8) = 0x400000000;
      *v10 = v30 | 4;
      v31 = v30 & 0xFFFFFFFFFFFFFFF8;
      v32 = *(unsigned int *)((v30 & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v32 >= *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 12))
      {
        v66 = v30 & 0xFFFFFFFFFFFFFFF8;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v30 & 0xFFFFFFFFFFFFFFF8, v31 + 16, v32 + 1, 8);
        v31 = v66;
        LODWORD(v32) = *(_DWORD *)(v66 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v31 + 8 * v32) = v29;
      ++*(_DWORD *)(v31 + 8);
      v9 = *v10;
      goto LABEL_55;
    }
LABEL_41:
    if (v26 + 1 == v27)
    {
      *v10 = *v26 & 0xFFFFFFFFFFFFFFFBLL;
      return sub_1C619127C((uint64_t *)&v68);
    }
    v50 = operator new();
    *(_QWORD *)v50 = v50 + 16;
    *(_QWORD *)(v50 + 8) = 0x400000000;
    v9 = v50 | 4;
    *v10 = v50 | 4;
    goto LABEL_55;
  }
  v28 = (v25 - *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8)) >> 3;
  if (v9 <= 7)
    goto LABEL_41;
LABEL_55:
  v51 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0)
    v10 = *(uint64_t **)v51;
  sub_1C618FC28(v51, (uint64_t)&v10[v28], v26, v27);
  return sub_1C619127C((uint64_t *)&v68);
}

uint64_t sub_1C5FF7410(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0;
  if (*(_BYTE *)(a1 + 16) == 3)
    return 1;
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  LODWORD(v1) = 0;
  do
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(v2 + 24) + 16) >= 0x15u)
      v3 = 0;
    else
      v3 = *(_QWORD *)(v2 + 24);
    v1 = sub_1C5FF7410(v3) + v1;
    v2 = *(_QWORD *)(v2 + 8);
  }
  while (v2);
  return v1;
}

uint64_t sub_1C5FF7478(uint64_t a1, llvm::Type *a2, uint64_t a3)
{
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  llvm::MCStreamer *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t *v36;
  unsigned int v37;
  void *v38;
  __int128 v39;
  _QWORD v40[2];

  v40[1] = *MEMORY[0x1E0C80C00];
  v7 = *(void **)(a1 + 8);
  v6 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v7 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v6, (unsigned int *)&v36);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v6, (unsigned int *)&v36);
  if (*(_BYTE *)(a3 + 504))
  {
    v38 = v40;
    v39 = xmmword_1C6464ED0;
    sub_1C5322CA0(a1, (uint64_t *)&v38, 0, 3, 1);
    v8 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 272) + 120))(*(_QWORD *)(a3 + 272));
    llvm::Type::print(a2, v8, 0, 0);
    v9 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 272) + 120))(*(_QWORD *)(a3 + 272));
    v10 = (_BYTE *)*((_QWORD *)v9 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
    {
      v9 = llvm::raw_ostream::write(v9, 32);
    }
    else
    {
      *((_QWORD *)v9 + 4) = v10 + 1;
      *v10 = 32;
    }
    v11 = llvm::raw_ostream::write(v9, (const char *)v38, v39);
    v12 = (_BYTE *)*((_QWORD *)v11 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)v11 + 3))
    {
      llvm::raw_ostream::write(v11, 10);
    }
    else
    {
      *((_QWORD *)v11 + 4) = v12 + 1;
      *v12 = 10;
    }
    if (v38 != v40)
      free(v38);
  }
  v13 = (v37 >> 3) & 7;
  if (v37 >= 0x41)
    v14 = v36;
  else
    v14 = (uint64_t *)&v36;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 288) + 2064) + 272) && *((_BYTE *)a2 + 8) != 6)
  {
    v19 = ((unint64_t)v37 + 63) >> 6;
    v20 = v19 - 1;
    if ((_DWORD)v13)
    {
      v21 = v19 - 2;
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a3 + 272) + 536))(*(_QWORD *)(a3 + 272), v14[v20], (v37 >> 3) & 7);
      v20 = v21;
    }
    if ((v20 & 0x80000000) == 0)
    {
      v22 = v20;
      do
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 272) + 536))(*(_QWORD *)(a3 + 272), v14[v22--], 8);
      while (v22 != -1);
    }
  }
  else
  {
    if (v37 >= 0x40)
    {
      v15 = v37 >> 6;
      v16 = v14;
      v17 = v15;
      do
      {
        v18 = *v16++;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 272) + 536))(*(_QWORD *)(a3 + 272), v18, 8);
        --v17;
      }
      while (v17);
    }
    else
    {
      v15 = 0;
    }
    if ((_DWORD)v13)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 272) + 536))(*(_QWORD *)(a3 + 272), v14[v15], v13);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(a3 + 288) + 2064) + 272;
  v24 = *(llvm::MCStreamer **)(a3 + 272);
  sub_1C4768AD0(v23, (uint64_t)a2);
  v26 = (unint64_t)(v25 + 7) >> 3;
  v28 = v27 == 1;
  llvm::DataLayout::getAlignment(v23, (uint64_t)a2);
  v30 = v26 + ~(-1 << v29);
  v31 = v30 & ~(-1 << v29);
  sub_1C4768AD0(v23, (uint64_t)a2);
  v34 = v30 - (v31 + ((unint64_t)(v33 + 7) >> 3));
  if (v28)
  result = llvm::MCStreamer::emitZeros(v24, v34);
  if (v37 >= 0x41)
  {
    result = (uint64_t)v36;
    if (v36)
      return MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1C5FF7784(uint64_t a1, uint64_t a2)
{
  int v3;
  const char *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 *RawDataValues;
  int v13;
  unsigned int v14;
  unsigned __int8 **v16;
  unsigned __int8 **v17;
  unsigned int v18;

  v3 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || v3 != 16)
  {
    if (a1 && v3 == 8)
    {
      v8 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
      v9 = sub_1C5FF7784(v8);
      if ((_DWORD)v9 != -1)
      {
        v7 = v9;
        v10 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
        if ((_DWORD)v10 == 1)
          return v7;
        v11 = 1;
        while (*(_QWORD *)(a1 - 32 * v10 + 32 * v11) == v8)
        {
          if ((_DWORD)v10 == ++v11)
            return v7;
        }
      }
    }
    else
    {
      v7 = 0xFFFFFFFFLL;
      if (!a1)
        return v7;
      if ((v3 & 0xFE) != 0xE)
        return v7;
      RawDataValues = (unsigned __int8 *)llvm::ConstantDataSequential::getRawDataValues((llvm::ConstantDataSequential *)a1);
      v7 = *RawDataValues;
      if (v13 == 1)
        return v7;
      v14 = 1;
      while (RawDataValues[v14] == (_DWORD)v7)
      {
        if (v13 == ++v14)
          return v7;
      }
    }
    return 0xFFFFFFFFLL;
  }
  v5 = sub_1C53E2F94(a2, *(_QWORD *)a1);
  if ((_DWORD)v4 == 1)
  if (*(_DWORD *)(a1 + 32) < v5)
    llvm::APInt::zext((llvm::APInt *)(a1 + 24), v5, (uint64_t)&v17);
  else
    sub_1C5DD14E0((uint64_t)&v17, a1 + 24);
  if ((llvm::APInt::isSplat((llvm::APInt *)&v17, 8u) & 1) != 0)
  {
    v6 = v18;
    if (v18 > 7)
    {
      if (v18 == 8)
      {
        v7 = (uint64_t)v17;
      }
      else
      {
        v16 = v17;
        if (v18 < 0x41)
          v16 = (unsigned __int8 **)&v17;
        v7 = *(unsigned __int8 *)v16;
      }
    }
    else
    {
      v7 = v17;
    }
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
    v6 = v18;
  }
  if (v6 >= 0x41 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  return v7;
}

llvm::raw_ostream *sub_1C5FF794C(llvm::raw_ostream *result, _QWORD *a2, unsigned int a3)
{
  _QWORD *v4;
  llvm::raw_ostream *v5;
  unsigned int v6;
  _QWORD *v7;
  void *v8;
  _BYTE *v9;
  unint64_t v10;
  llvm::raw_ostream *v11;
  int v12;
  _DWORD *v13;
  unint64_t v14;
  _BYTE *v15;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    sub_1C5FF794C(result, *a2);
    v6 = 0;
    v7 = v4;
    do
    {
      v7 = (_QWORD *)*v7;
      v6 += 2;
    }
    while (v7);
    llvm::raw_ostream::indent(v5, v6);
    v8 = (void *)*((_QWORD *)v5 + 4);
    if (*((_QWORD *)v5 + 3) - (_QWORD)v8 > 0xDuLL)
    {
      qmemcpy(v8, "Parent Loop BB", 14);
      *((_QWORD *)v5 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v5, "Parent Loop BB", 0xEuLL);
    }
    sub_1C5E21910(v5, a3, 0, 0, 0);
    v9 = (_BYTE *)*((_QWORD *)v5 + 4);
    if (*((_BYTE **)v5 + 3) == v9)
    {
      llvm::raw_ostream::write(v5, "_", 1uLL);
    }
    else
    {
      *v9 = 95;
      ++*((_QWORD *)v5 + 4);
    }
    v10 = *(int *)(*(_QWORD *)v4[4] + 24);
    if ((v10 & 0x80000000) != 0)
    {
      v10 = -(uint64_t)v10;
      v11 = v5;
      v12 = 1;
    }
    else
    {
      v11 = v5;
      v12 = 0;
    }
    sub_1C5E21910(v11, v10, 0, 0, v12);
    v13 = (_DWORD *)*((_QWORD *)v5 + 4);
    if (*((_QWORD *)v5 + 3) - (_QWORD)v13 > 6uLL)
    {
      *(_DWORD *)((char *)v13 + 3) = 1030255728;
      *v13 = 1885684768;
      *((_QWORD *)v5 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v5, " Depth=", 7uLL);
    }
    LODWORD(v14) = 0;
    do
    {
      v4 = (_QWORD *)*v4;
      v14 = (v14 + 1);
    }
    while (v4);
    result = sub_1C5E21910(v5, v14, 0, 0, 0);
    v15 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v15 >= *((_QWORD *)v5 + 3))
    {
      return llvm::raw_ostream::write(v5, 10);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v15 + 1;
      *v15 = 10;
    }
  }
  return result;
}

uint64_t sub_1C5FF7B1C(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  llvm::raw_ostream *v6;
  unint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _BYTE *v12;
  unint64_t v13;
  llvm::raw_ostream *v14;
  int v15;
  _DWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _BYTE *v19;

  v3 = *(_QWORD **)(a2 + 8);
  v4 = *(_QWORD **)(a2 + 16);
  if (v3 != v4)
  {
    v6 = (llvm::raw_ostream *)result;
    v7 = a3;
    do
    {
      v8 = 0;
      v9 = (_QWORD *)*v3;
      v10 = (_QWORD *)*v3;
      do
      {
        v10 = (_QWORD *)*v10;
        v8 += 2;
      }
      while (v10);
      llvm::raw_ostream::indent(v6, v8);
      v11 = (void *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v11 > 0xCuLL)
      {
        qmemcpy(v11, "Child Loop BB", 13);
        *((_QWORD *)v6 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(v6, "Child Loop BB", 0xDuLL);
      }
      sub_1C5E21910(v6, v7, 0, 0, 0);
      v12 = (_BYTE *)*((_QWORD *)v6 + 4);
      if (*((_BYTE **)v6 + 3) == v12)
      {
        llvm::raw_ostream::write(v6, "_", 1uLL);
      }
      else
      {
        *v12 = 95;
        ++*((_QWORD *)v6 + 4);
      }
      v13 = *(int *)(*(_QWORD *)v9[4] + 24);
      if ((v13 & 0x80000000) != 0)
      {
        v13 = -(uint64_t)v13;
        v14 = v6;
        v15 = 1;
      }
      else
      {
        v14 = v6;
        v15 = 0;
      }
      sub_1C5E21910(v14, v13, 0, 0, v15);
      v16 = (_DWORD *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v16 > 6uLL)
      {
        *(_DWORD *)((char *)v16 + 3) = 543716464;
        *v16 = 1885684768;
        *((_QWORD *)v6 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v6, " Depth ", 7uLL);
      }
      LODWORD(v17) = 0;
      v18 = v9;
      do
      {
        v18 = (_QWORD *)*v18;
        v17 = (v17 + 1);
      }
      while (v18);
      sub_1C5E21910(v6, v17, 0, 0, 0);
      v19 = (_BYTE *)*((_QWORD *)v6 + 4);
      if ((unint64_t)v19 >= *((_QWORD *)v6 + 3))
      {
        llvm::raw_ostream::write(v6, 10);
      }
      else
      {
        *((_QWORD *)v6 + 4) = v19 + 1;
        *v19 = 10;
      }
      result = sub_1C5FF7B1C(v6, v9, a3);
      ++v3;
    }
    while (v3 != v4);
  }
  return result;
}

_QWORD *sub_1C5FF7D28(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63BD99C((uint64_t *)a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5FF7DE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  sub_1C62B4424((unsigned int *)(a1 + 56));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(a1 + 32);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 16);
        if (v5 != -8192 && v5 != -4096 && v5 != 0)
        {
          v7 = *(_QWORD *)(v3 - 32) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v7 = *(_QWORD *)(v3 - 24);
          v8 = *(unint64_t **)(v3 - 24);
          if (v8)
          {
            *v8 = *v8 & 7 | v7;
          }
          else
          {
            v9 = *(_QWORD *)(v3 - 16);
            v10 = ***(int32x2_t ****)v9;
            v11 = (unint64_t)v10[303];
            if (v11 <= v7)
            {
              v12 = v10[305].u32[0];
              if (v11 + 16 * v12 > v7)
              {
                v13 = v12 - 1;
                LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
                v15 = (uint64_t *)(v11 + 16 * v14);
                v16 = *v15;
                if (v9 == *v15)
                {
LABEL_19:
                  *v15 = -8192;
                  v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                  v9 = *(_QWORD *)(v3 - 16);
                }
                else
                {
                  v17 = 1;
                  while (v16 != -4096)
                  {
                    v18 = v14 + v17++;
                    v14 = v18 & v13;
                    v16 = *(_QWORD *)(v11 + 16 * v14);
                    if (v9 == v16)
                    {
                      v15 = (uint64_t *)(v11 + 16 * v14);
                      goto LABEL_19;
                    }
                  }
                }
                *(_BYTE *)(v9 + 17) &= ~1u;
              }
            }
          }
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v4);
  }
  v19 = *(unsigned int *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v19)
  {
    v21 = (uint64_t *)(v20 + 8);
    v22 = 32 * v19;
    do
    {
      if ((*(v21 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v21 = sub_1C619127C(v21);
      v21 += 4;
      v22 -= 32;
    }
    while (v22);
    v20 = *(_QWORD *)(a1 + 8);
  }
  MEMORY[0x1CAA32FB4](v20, 8);
  return a1;
}

_QWORD *sub_1C5FF7F78(void **a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = 0x8E38E38E38E38E39 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL)
    abort();
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x1C71C71C71C71C7)
    v5 = 0x38E38E38E38E38ELL;
  else
    v5 = v3;
  if (v5 > 0x38E38E38E38E38ELL)
    sub_1C4764EE4();
  v7 = 9 * v5;
  v8 = (char *)operator new(72 * v5);
  v9 = *a2;
  *a2 = 0;
  v10 = &v8[72 * v2];
  v11 = &v8[8 * v7];
  *(_QWORD *)v10 = v9;
  *((_QWORD *)v10 + 1) = "emit";
  *((_QWORD *)v10 + 2) = 4;
  *((_QWORD *)v10 + 3) = "Debug Info Emission";
  *((_QWORD *)v10 + 4) = 19;
  *((_QWORD *)v10 + 5) = "linetables";
  *((_QWORD *)v10 + 6) = 10;
  *((_QWORD *)v10 + 7) = "CodeView Line Tables";
  *((_QWORD *)v10 + 8) = 20;
  v12 = v10 + 72;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v14 - 9);
      v14 -= 72;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v10 - 9) = v15;
      v10 -= 72;
      v16 = *(_OWORD *)(v14 + 8);
      v17 = *(_OWORD *)(v14 + 24);
      v18 = *(_OWORD *)(v14 + 40);
      *(_OWORD *)(v10 + 56) = *(_OWORD *)(v14 + 56);
      *(_OWORD *)(v10 + 40) = v18;
      *(_OWORD *)(v10 + 24) = v17;
      *(_OWORD *)(v10 + 8) = v16;
    }
    while (v14 != v13);
    v14 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    while (v19 != v14)
    {
      v21 = *((_QWORD *)v19 - 9);
      v19 -= 72;
      v20 = v21;
      *(_QWORD *)v19 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

_QWORD *sub_1C5FF8110(void **a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = 0x8E38E38E38E38E39 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL)
    abort();
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x1C71C71C71C71C7)
    v5 = 0x38E38E38E38E38ELL;
  else
    v5 = v3;
  if (v5 > 0x38E38E38E38E38ELL)
    sub_1C4764EE4();
  v7 = 9 * v5;
  v8 = (char *)operator new(72 * v5);
  v9 = *a2;
  *a2 = 0;
  v10 = &v8[72 * v2];
  v11 = &v8[8 * v7];
  *(_QWORD *)v10 = v9;
  *((_QWORD *)v10 + 1) = "emit";
  *((_QWORD *)v10 + 2) = 4;
  *((_QWORD *)v10 + 3) = "Pseudo Probe Emission";
  *((_QWORD *)v10 + 4) = 21;
  *((_QWORD *)v10 + 5) = "pseudo probe";
  *((_QWORD *)v10 + 6) = 12;
  *((_QWORD *)v10 + 7) = "Pseudo Probe Emission";
  *((_QWORD *)v10 + 8) = 21;
  v12 = v10 + 72;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v14 - 9);
      v14 -= 72;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v10 - 9) = v15;
      v10 -= 72;
      v16 = *(_OWORD *)(v14 + 8);
      v17 = *(_OWORD *)(v14 + 24);
      v18 = *(_OWORD *)(v14 + 40);
      *(_OWORD *)(v10 + 56) = *(_OWORD *)(v14 + 56);
      *(_OWORD *)(v10 + 40) = v18;
      *(_OWORD *)(v10 + 24) = v17;
      *(_OWORD *)(v10 + 8) = v16;
    }
    while (v14 != v13);
    v14 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    while (v19 != v14)
    {
      v21 = *((_QWORD *)v19 - 9);
      v19 -= 72;
      v20 = v21;
      *(_QWORD *)v19 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

_QWORD *sub_1C5FF82A4(void **a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = 0x8E38E38E38E38E39 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL)
    abort();
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x1C71C71C71C71C7)
    v5 = 0x38E38E38E38E38ELL;
  else
    v5 = v3;
  if (v5 > 0x38E38E38E38E38ELL)
    sub_1C4764EE4();
  v7 = 9 * v5;
  v8 = (char *)operator new(72 * v5);
  v9 = *a2;
  *a2 = 0;
  v10 = &v8[72 * v2];
  v11 = &v8[8 * v7];
  *(_QWORD *)v10 = v9;
  *((_QWORD *)v10 + 1) = "Control Flow Guard";
  *((_QWORD *)v10 + 2) = 18;
  *((_QWORD *)v10 + 3) = "Control Flow Guard";
  *((_QWORD *)v10 + 4) = 18;
  *((_QWORD *)v10 + 5) = "dwarf";
  *((_QWORD *)v10 + 6) = 5;
  *((_QWORD *)v10 + 7) = "DWARF Emission";
  *((_QWORD *)v10 + 8) = 14;
  v12 = v10 + 72;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v14 - 9);
      v14 -= 72;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v10 - 9) = v15;
      v10 -= 72;
      v16 = *(_OWORD *)(v14 + 8);
      v17 = *(_OWORD *)(v14 + 24);
      v18 = *(_OWORD *)(v14 + 40);
      *(_OWORD *)(v10 + 56) = *(_OWORD *)(v14 + 56);
      *(_OWORD *)(v10 + 40) = v18;
      *(_OWORD *)(v10 + 24) = v17;
      *(_OWORD *)(v10 + 8) = v16;
    }
    while (v14 != v13);
    v14 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    while (v19 != v14)
    {
      v21 = *((_QWORD *)v19 - 9);
      v19 -= 72;
      v20 = v21;
      *(_QWORD *)v19 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

uint64_t sub_1C5FF8438(uint64_t result, size_t *a2, char *a3, char a4)
{
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  const void *v21;
  unsigned int v22;
  size_t v23;
  size_t v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  size_t *v28;
  size_t v29;
  size_t v30;
  int v31;
  unsigned int v32;
  size_t *v33;
  int v34;
  unsigned int v35;
  size_t v36;
  size_t v37;
  int v38;
  size_t *v39;
  unsigned int v40;
  size_t *v41;
  size_t v42;
  size_t v43;
  int v44;
  BOOL v45;
  const void **v46;
  size_t v47;
  size_t v48;
  int v49;
  _BOOL4 v50;
  BOOL v51;
  size_t v52;
  const void *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  size_t v57;
  size_t v58;
  size_t *v59;
  size_t *j;
  size_t v61;
  size_t v62;
  size_t v63;
  size_t v64;
  int v65;
  unint64_t v66;
  unsigned int v67;
  unint64_t v68;
  size_t v69;
  size_t v70;
  unsigned int v71;
  size_t v72;
  size_t v73;
  unsigned int v74;
  size_t v75;
  size_t v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  BOOL v82;
  uint64_t v83;
  const void **v84;
  const void **v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const void **v92;
  unsigned int v93;
  unint64_t v94;
  size_t v95;
  unint64_t v96;
  size_t v97;
  int64_t v98;
  int64_t v99;
  int64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  unint64_t v105;
  unint64_t v106;
  size_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  _DWORD *v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  unint64_t v115;
  size_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  unint64_t v123;
  unint64_t v124;
  size_t v125;
  unsigned int v126;
  unint64_t v127;
  size_t v128;
  _DWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  unint64_t v138;
  unint64_t v139;
  size_t v140;
  _OWORD *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  BOOL v148;
  void *v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int v152;
  BOOL v153;
  unint64_t v154;
  size_t v155;
  uint64_t v156;
  unint64_t v157;
  size_t v158;
  BOOL v159;
  unint64_t v160;
  unint64_t v161;
  size_t v162;
  uint64_t v163;
  unsigned int v164;
  unsigned int v165;
  size_t v166;
  const void *v167;
  uint64_t v168;
  unsigned int v169;
  size_t v170;
  size_t v171;
  size_t v172;
  size_t v173;
  __int128 *v174;
  __int128 *v175;
  size_t *v176;
  char *__s2;
  const void **__s2a;
  void *__s2b;
  int __s2c;
  void *__s2d;
  const void **__s1;
  void *__s1a;
  unsigned int __s1b;
  _DWORD *__s1c;
  void *__s1d;
  unsigned int __s1e;
  uint64_t v189;
  char *v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;

  v6 = result;
LABEL_2:
  __s1 = (const void **)(a2 - 3);
  v189 = (uint64_t)a2;
  v174 = (__int128 *)(a2 - 9);
  v175 = (__int128 *)(a2 - 6);
  v176 = a2 - 2;
  i = v6;
  while (2)
  {
    v6 = i;
    v8 = (uint64_t)a2 - i;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - i) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v77 = *((_DWORD *)a2 - 2);
        v78 = *(_DWORD *)(v6 + 16);
        if (v77 > v78)
          goto LABEL_187;
        if (v77 != v78)
          return result;
        v160 = *(a2 - 2);
        v161 = *(_QWORD *)(v6 + 8);
        if (v161 >= v160)
          v162 = *(a2 - 2);
        else
          v162 = *(_QWORD *)(v6 + 8);
        if (v162 && (result = memcmp(*__s1, *(const void **)v6, v162), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v160 >= v161)
        {
          return result;
        }
LABEL_187:
        v194 = *(_OWORD *)v6;
        *(_OWORD *)v6 = *(_OWORD *)__s1;
        *(_OWORD *)__s1 = v194;
        v79 = *(_DWORD *)(v6 + 16);
        *(_DWORD *)(v6 + 16) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v79;
        return result;
      case 3:
        return sub_1C5FF9504(v6, (__int128 *)(v6 + 24), (__int128 *)__s1);
      case 4:
        return sub_1C5FF9A04(v6, v6 + 24, v6 + 48, (uint64_t)__s1);
      case 5:
        return sub_1C5FF9304(v6, v6 + 24, v6 + 48, v6 + 72, (uint64_t)__s1);
      default:
        if (v8 <= 575)
        {
          v80 = v6 + 24;
          v82 = (size_t *)v6 == a2 || v80 == (_QWORD)a2;
          if ((a4 & 1) != 0)
          {
            if (v82)
              return result;
            v83 = 0;
            v84 = (const void **)v6;
            while (1)
            {
              v85 = v84;
              v84 = (const void **)v80;
              v86 = *((_DWORD *)v85 + 10);
              v87 = *((_DWORD *)v85 + 4);
              if (v86 <= v87)
              {
                if (v86 != v87)
                  goto LABEL_230;
                v88 = (unint64_t)v85[4];
                v96 = (unint64_t)v85[1];
                if (v96 >= v88)
                  v97 = (size_t)v85[4];
                else
                  v97 = (size_t)v85[1];
                if (v97 && (result = memcmp(*v84, *v85, v97), (_DWORD)result))
                {
                  if ((result & 0x80000000) == 0)
                    goto LABEL_230;
                }
                else if (v88 >= v96)
                {
                  goto LABEL_230;
                }
              }
              else
              {
                v88 = (unint64_t)v85[4];
              }
              __s1a = (void *)v85[3];
              *(_OWORD *)v84 = *(_OWORD *)v85;
              *((_DWORD *)v84 + 4) = *((_DWORD *)v85 + 4);
              v89 = v6;
              if (v85 == (const void **)v6)
                goto LABEL_229;
              __s2a = v84;
              v90 = v83;
              while (1)
              {
                v91 = v6 + v90;
                v92 = (const void **)(v6 + v90 - 24);
                v93 = *(_DWORD *)(v6 + v90 - 8);
                if (v86 > v93)
                  goto LABEL_214;
                if (v86 != v93)
                  goto LABEL_226;
                v94 = *(_QWORD *)(v6 + v90 - 16);
                v95 = v94 >= v88 ? v88 : *(_QWORD *)(v6 + v90 - 16);
                if (!v95)
                  break;
                result = memcmp(__s1a, *v92, v95);
                if (!(_DWORD)result)
                  break;
                if ((result & 0x80000000) == 0)
                {
LABEL_226:
                  v89 = (uint64_t)v85;
                  goto LABEL_228;
                }
LABEL_214:
                v85 -= 3;
                *(_OWORD *)v91 = *(_OWORD *)v92;
                *(_DWORD *)(v91 + 16) = v93;
                v90 -= 24;
                if (!v90)
                {
                  v89 = v6;
                  goto LABEL_228;
                }
              }
              if (v88 < v94)
                goto LABEL_214;
              v89 = v6 + v90;
LABEL_228:
              a2 = (size_t *)v189;
              v84 = __s2a;
LABEL_229:
              *(_QWORD *)v89 = __s1a;
              *(_QWORD *)(v89 + 8) = v88;
              *(_DWORD *)(v89 + 16) = v86;
LABEL_230:
              v80 = (uint64_t)(v84 + 3);
              v83 += 24;
              if (v84 + 3 == (const void **)a2)
                return result;
            }
          }
          if (v82)
            return result;
          while (1)
          {
            v163 = v6;
            v6 = v80;
            v164 = *(_DWORD *)(v163 + 40);
            v165 = *(_DWORD *)(v163 + 16);
            if (v164 <= v165)
            {
              if (v164 != v165)
                goto LABEL_370;
              v166 = *(_QWORD *)(v163 + 32);
              v172 = *(_QWORD *)(v163 + 8);
              if (v172 >= v166)
                v173 = *(_QWORD *)(v163 + 32);
              else
                v173 = *(_QWORD *)(v163 + 8);
              if (v173 && (result = memcmp(*(const void **)v6, *(const void **)v163, v173), (_DWORD)result))
              {
                if ((result & 0x80000000) == 0)
                  goto LABEL_370;
              }
              else if (v166 >= v172)
              {
                goto LABEL_370;
              }
            }
            else
            {
              v166 = *(_QWORD *)(v163 + 32);
            }
            v167 = *(const void **)v6;
            while (1)
            {
              do
              {
                v168 = v163;
                *(_OWORD *)(v163 + 24) = *(_OWORD *)v163;
                *(_DWORD *)(v163 + 40) = *(_DWORD *)(v163 + 16);
                v163 -= 24;
                v169 = *(_DWORD *)(v168 - 8);
              }
              while (v164 > v169);
              if (v164 != v169)
                break;
              v170 = *(_QWORD *)(v168 - 16);
              if (v170 >= v166)
                v171 = v166;
              else
                v171 = *(_QWORD *)(v168 - 16);
              if (v171 && (result = memcmp(v167, *(const void **)(v168 - 24), v171), (_DWORD)result))
              {
                if ((result & 0x80000000) == 0)
                  break;
              }
              else if (v166 >= v170)
              {
                break;
              }
            }
            *(_QWORD *)v168 = v167;
            *(_QWORD *)(v168 + 8) = v166;
            *(_DWORD *)(v168 + 16) = v164;
            a2 = (size_t *)v189;
LABEL_370:
            v80 = v6 + 24;
            if ((size_t *)(v6 + 24) == a2)
              return result;
          }
        }
        if (!a3)
        {
          if ((size_t *)v6 == a2)
            return result;
          v98 = (unint64_t)(v9 - 2) >> 1;
          v99 = v98;
          while (1)
          {
            v100 = v99;
            if (v98 < v99)
              goto LABEL_286;
            v101 = (2 * v99) | 1;
            v102 = v6 + 24 * v101;
            if (2 * v99 + 2 >= v9)
              goto LABEL_247;
            v103 = *(_DWORD *)(v6 + 24 * v101 + 16);
            v104 = *(_DWORD *)(v102 + 40);
            if (v103 <= v104)
            {
              if (v103 != v104)
                goto LABEL_247;
              v105 = *(_QWORD *)(v102 + 8);
              v106 = *(_QWORD *)(v102 + 32);
              if (v106 >= v105)
                v107 = *(_QWORD *)(v102 + 8);
              else
                v107 = *(_QWORD *)(v102 + 32);
              if (v107 && (result = memcmp(*(const void **)v102, *(const void **)(v102 + 24), v107), (_DWORD)result))
              {
                if ((result & 0x80000000) == 0)
                  goto LABEL_247;
              }
              else if (v105 >= v106)
              {
                goto LABEL_247;
              }
            }
            v102 += 24;
            v101 = 2 * v100 + 2;
LABEL_247:
            v108 = *(_DWORD *)(v102 + 16);
            v109 = v6 + 24 * v100;
            v112 = *(_DWORD *)(v109 + 16);
            v111 = (_DWORD *)(v109 + 16);
            v110 = v112;
            v113 = v108 == v112;
            if (v108 > v112)
              goto LABEL_286;
            v114 = v6 + 24 * v100;
            __s1b = v110;
            if (v113)
            {
              v115 = *(_QWORD *)(v102 + 8);
              v117 = *(_QWORD *)(v114 + 8);
              if (v117 >= v115)
                v116 = *(_QWORD *)(v102 + 8);
              else
                v116 = *(_QWORD *)(v114 + 8);
              if (v116
                && (result = memcmp(*(const void **)v102, *(const void **)v114, v116), v110 = __s1b, (_DWORD)result))
              {
                if ((result & 0x80000000) != 0)
                  goto LABEL_286;
              }
              else if (v115 < v117)
              {
                goto LABEL_286;
              }
            }
            else
            {
              v117 = *(_QWORD *)(v114 + 8);
            }
            __s2b = *(void **)v114;
            *(_OWORD *)v114 = *(_OWORD *)v102;
            *v111 = *(_DWORD *)(v102 + 16);
            while (1)
            {
              if (v98 < v101)
                goto LABEL_285;
              v118 = v102;
              v119 = 2 * v101;
              v101 = (2 * v101) | 1;
              v102 = v6 + 24 * v101;
              v120 = v119 + 2;
              if (v119 + 2 < v9)
              {
                v121 = *(_DWORD *)(v6 + 24 * v101 + 16);
                v122 = *(_DWORD *)(v102 + 40);
                if (v121 > v122)
                  goto LABEL_262;
                if (v121 == v122)
                {
                  v123 = *(_QWORD *)(v102 + 8);
                  v124 = *(_QWORD *)(v102 + 32);
                  if (v124 >= v123)
                    v125 = *(_QWORD *)(v102 + 8);
                  else
                    v125 = *(_QWORD *)(v102 + 32);
                  if (v125
                    && (result = memcmp(*(const void **)v102, *(const void **)(v102 + 24), v125),
                        v110 = __s1b,
                        (_DWORD)result))
                  {
                    v98 = (unint64_t)(v9 - 2) >> 1;
                    if ((result & 0x80000000) != 0)
                      goto LABEL_262;
                  }
                  else
                  {
                    v51 = v123 >= v124;
                    v98 = (unint64_t)(v9 - 2) >> 1;
                    if (!v51)
                    {
LABEL_262:
                      v102 += 24;
                      v101 = v120;
                    }
                  }
                }
              }
              v126 = *(_DWORD *)(v102 + 16);
              if (v126 > v110)
                goto LABEL_284;
              if (v126 != v110)
                goto LABEL_283;
              v127 = *(_QWORD *)(v102 + 8);
              v128 = v117 >= v127 ? *(_QWORD *)(v102 + 8) : v117;
              if (!v128)
                break;
              result = memcmp(*(const void **)v102, __s2b, v128);
              v110 = __s1b;
              if (!(_DWORD)result)
                break;
              if ((result & 0x80000000) != 0)
                goto LABEL_284;
LABEL_283:
              *(_OWORD *)v118 = *(_OWORD *)v102;
              *(_DWORD *)(v118 + 16) = *(_DWORD *)(v102 + 16);
            }
            if (v127 >= v117)
              goto LABEL_283;
LABEL_284:
            v102 = v118;
LABEL_285:
            *(_QWORD *)v102 = __s2b;
            *(_QWORD *)(v102 + 8) = v117;
            *(_DWORD *)(v102 + 16) = v110;
LABEL_286:
            v99 = v100 - 1;
            if (!v100)
            {
              v129 = (_DWORD *)v189;
              while (1)
              {
                v130 = 0;
                __s1c = v129;
                v195 = *(_OWORD *)v6;
                __s2c = *(_DWORD *)(v6 + 16);
                v131 = v6;
                do
                {
                  v132 = v131;
                  v133 = v130 + 1;
                  v131 += 24 * (v130 + 1);
                  v134 = 2 * v130;
                  v130 = (2 * v130) | 1;
                  v135 = v134 + 2;
                  if (v134 + 2 >= v9)
                    goto LABEL_301;
                  v136 = *(_DWORD *)(v132 + 24 * v133 + 16);
                  v137 = *(_DWORD *)(v131 + 40);
                  if (v136 > v137)
                  {
LABEL_291:
                    v131 += 24;
                    v130 = v135;
                    goto LABEL_301;
                  }
                  if (v136 == v137)
                  {
                    v138 = *(_QWORD *)(v131 + 8);
                    v139 = *(_QWORD *)(v131 + 32);
                    if (v139 >= v138)
                      v140 = *(_QWORD *)(v131 + 8);
                    else
                      v140 = *(_QWORD *)(v131 + 32);
                    if (v140
                      && (result = memcmp(*(const void **)v131, *(const void **)(v131 + 24), v140), (_DWORD)result))
                    {
                      if ((result & 0x80000000) != 0)
                        goto LABEL_291;
                    }
                    else if (v138 < v139)
                    {
                      goto LABEL_291;
                    }
                  }
LABEL_301:
                  *(_OWORD *)v132 = *(_OWORD *)v131;
                  *(_DWORD *)(v132 + 16) = *(_DWORD *)(v131 + 16);
                }
                while (v130 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
                v141 = __s1c - 6;
                v190 = (char *)(__s1c - 6);
                if ((_DWORD *)v131 == __s1c - 6)
                {
                  *(_OWORD *)v131 = v195;
                  *(_DWORD *)(v131 + 16) = __s2c;
                  goto LABEL_333;
                }
                *(_OWORD *)v131 = *v141;
                *(_DWORD *)(v131 + 16) = *(__s1c - 2);
                *v141 = v195;
                *(__s1c - 2) = __s2c;
                v142 = v131 - v6 + 24;
                if (v142 >= 25)
                {
                  v143 = v142 / 0x18uLL - 2;
                  v144 = v143 >> 1;
                  v145 = v6 + 24 * (v143 >> 1);
                  v146 = *(_DWORD *)(v145 + 16);
                  v147 = *(unsigned int *)(v131 + 16);
                  v148 = v146 == (_DWORD)v147;
                  if (v146 <= v147)
                  {
                    if (!v148)
                      goto LABEL_333;
                    v157 = *(_QWORD *)(v145 + 8);
                    v149 = *(void **)(v131 + 8);
                    if ((unint64_t)v149 >= v157)
                      v158 = *(_QWORD *)(v145 + 8);
                    else
                      v158 = *(_QWORD *)(v131 + 8);
                    if (v158
                      && (__s1e = *(_DWORD *)(v131 + 16),
                          result = memcmp(*(const void **)v145, *(const void **)v131, v158),
                          v147 = __s1e,
                          (_DWORD)result))
                    {
                      if ((result & 0x80000000) == 0)
                        goto LABEL_333;
                    }
                    else if (v157 >= (unint64_t)v149)
                    {
                      goto LABEL_333;
                    }
                  }
                  else
                  {
                    v149 = *(void **)(v131 + 8);
                  }
                  __s1d = *(void **)v131;
                  *(_OWORD *)v131 = *(_OWORD *)v145;
                  *(_DWORD *)(v131 + 16) = *(_DWORD *)(v145 + 16);
                  if (v143 < 2)
                    goto LABEL_332;
                  __s2d = v149;
                  while (1)
                  {
                    v150 = v145;
                    v151 = v144 - 1;
                    v144 = (v144 - 1) >> 1;
                    v145 = v6 + 24 * v144;
                    v152 = *(_DWORD *)(v145 + 16);
                    v153 = v152 == (_DWORD)v147;
                    if (v152 <= v147)
                    {
                      if (!v153)
                        goto LABEL_331;
                      v154 = *(_QWORD *)(v145 + 8);
                      if ((unint64_t)v149 >= v154)
                        v155 = *(_QWORD *)(v145 + 8);
                      else
                        v155 = (size_t)v149;
                      if (v155
                        && (v156 = v147,
                            result = memcmp(*(const void **)v145, __s1d, v155),
                            v147 = v156,
                            v149 = __s2d,
                            (_DWORD)result))
                      {
                        if ((result & 0x80000000) == 0)
                          goto LABEL_331;
                      }
                      else if (v154 >= (unint64_t)v149)
                      {
LABEL_331:
                        v145 = v150;
LABEL_332:
                        *(_QWORD *)v145 = __s1d;
                        *(_QWORD *)(v145 + 8) = v149;
                        *(_DWORD *)(v145 + 16) = v147;
                        break;
                      }
                    }
                    *(_OWORD *)v150 = *(_OWORD *)v145;
                    *(_DWORD *)(v150 + 16) = *(_DWORD *)(v145 + 16);
                    if (v151 <= 1)
                      goto LABEL_332;
                  }
                }
LABEL_333:
                v159 = v9-- <= 2;
                v129 = v190;
                if (v159)
                  return result;
              }
            }
          }
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = (__int128 *)(v6 + 24 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 < 0xC01)
        {
          result = sub_1C5FF9504((uint64_t)v11, (__int128 *)v6, (__int128 *)__s1);
        }
        else
        {
          sub_1C5FF9504(v6, v11, (__int128 *)__s1);
          v12 = 3 * v10;
          v13 = v6 + 8 * v12;
          sub_1C5FF9504(v6 + 24, (__int128 *)(v13 - 24), v175);
          sub_1C5FF9504(v6 + 48, (__int128 *)(v6 + 24 + 8 * v12), v174);
          result = sub_1C5FF9504(v13 - 24, v11, (__int128 *)(v6 + 24 + 8 * v12));
          v191 = *(_OWORD *)v6;
          *(_OWORD *)v6 = *v11;
          *v11 = v191;
          v14 = *(_DWORD *)(v6 + 16);
          *(_DWORD *)(v6 + 16) = *(_DWORD *)(v13 + 16);
          *(_DWORD *)(v13 + 16) = v14;
        }
        __s2 = a3 - 1;
        if ((a4 & 1) != 0)
        {
          v15 = *(_DWORD *)(v6 + 16);
          goto LABEL_23;
        }
        v15 = *(_DWORD *)(v6 - 8);
        v16 = *(_DWORD *)(v6 + 16);
        if (v15 <= v16)
        {
          if (v15 == v16)
          {
            v17 = *(_QWORD *)(v6 - 16);
            v52 = *(_QWORD *)(v6 + 8);
            if (v52 >= v17)
              v18 = *(_QWORD *)(v6 - 16);
            else
              v18 = *(_QWORD *)(v6 + 8);
            if (v18 && (result = memcmp(*(const void **)(v6 - 24), *(const void **)v6, v18), (_DWORD)result))
            {
              if ((result & 0x80000000) != 0)
                goto LABEL_23;
            }
            else if (v17 < v52)
            {
              goto LABEL_23;
            }
          }
          else
          {
            v52 = *(_QWORD *)(v6 + 8);
          }
          v53 = *(const void **)v6;
          v54 = *((_DWORD *)a2 - 2);
          if (v16 > v54)
          {
LABEL_103:
            i = v6 + 24;
            v55 = *(_DWORD *)(v6 + 40);
            if (v16 <= v55)
            {
              v56 = v6 + 32;
              do
              {
                if (v16 == v55)
                {
                  v57 = *(_QWORD *)v56;
                  if (*(_QWORD *)v56 >= v52)
                    v58 = v52;
                  else
                    v58 = *(_QWORD *)v56;
                  if (v58 && (result = memcmp(v53, *(const void **)(v56 - 8), v58), (_DWORD)result))
                  {
                    a2 = (size_t *)v189;
                    if ((result & 0x80000000) != 0)
                      break;
                  }
                  else
                  {
                    v51 = v52 >= v57;
                    a2 = (size_t *)v189;
                    if (!v51)
                      goto LABEL_117;
                  }
                }
                i += 24;
                v55 = *(_DWORD *)(v56 + 32);
                v56 += 24;
              }
              while (v16 <= v55);
              i = v56 - 8;
            }
            goto LABEL_117;
          }
          if (v16 == v54)
          {
            v63 = *(a2 - 2);
            if (v63 >= v52)
              v64 = v52;
            else
              v64 = *(a2 - 2);
            if (v64 && (result = memcmp(*(const void **)v6, *__s1, v64), (_DWORD)result))
            {
              if ((result & 0x80000000) != 0)
                goto LABEL_103;
            }
            else if (v52 < v63)
            {
              goto LABEL_103;
            }
          }
          for (i = v6 + 24; i < (unint64_t)a2; i += 24)
          {
            v74 = *(_DWORD *)(i + 16);
            if (v16 > v74)
              break;
            if (v16 == v74)
            {
              v75 = *(_QWORD *)(i + 8);
              if (v75 >= v52)
                v76 = v52;
              else
                v76 = *(_QWORD *)(i + 8);
              if (v76 && (result = memcmp(v53, *(const void **)i, v76), (_DWORD)result))
              {
                if ((result & 0x80000000) != 0)
                  break;
              }
              else if (v52 < v75)
              {
                break;
              }
            }
          }
LABEL_117:
          v59 = a2;
          if (i >= (unint64_t)a2)
            goto LABEL_165;
          for (j = v176; ; j -= 3)
          {
            if (v16 > v54)
              goto LABEL_129;
            if (v16 != v54)
              goto LABEL_138;
            v61 = *j;
            v62 = *j >= v52 ? v52 : *j;
            if (!v62)
              break;
            result = memcmp(v53, (const void *)*(j - 1), v62);
            if (!(_DWORD)result)
              break;
            if ((result & 0x80000000) == 0)
              goto LABEL_138;
LABEL_129:
            v54 = *((_DWORD *)j - 4);
          }
          if (v52 < v61)
            goto LABEL_129;
LABEL_138:
          v59 = j - 1;
LABEL_165:
          if (i < (unint64_t)v59)
          {
            v193 = *(_OWORD *)i;
            *(_OWORD *)i = *(_OWORD *)v59;
            *(_OWORD *)v59 = v193;
            v65 = *(_DWORD *)(i + 16);
            *(_DWORD *)(i + 16) = *((_DWORD *)v59 + 4);
            *((_DWORD *)v59 + 4) = v65;
            v66 = i + 24;
            v67 = *(_DWORD *)(i + 40);
            if (v16 > v67)
            {
              i += 24;
              goto LABEL_155;
            }
            v68 = i + 32;
            while (1)
            {
              if (v16 == v67)
              {
                v69 = *(_QWORD *)v68;
                if (*(_QWORD *)v68 >= v52)
                  v70 = v52;
                else
                  v70 = *(_QWORD *)v68;
                if (v70 && (result = memcmp(v53, *(const void **)(v68 - 8), v70), (_DWORD)result))
                {
                  if ((result & 0x80000000) != 0)
                    goto LABEL_152;
                }
                else if (v52 < v69)
                {
                  i = v66;
LABEL_154:
                  a2 = (size_t *)v189;
                  while (1)
                  {
                    do
                    {
LABEL_155:
                      v59 -= 3;
                      v71 = *((_DWORD *)v59 + 4);
                    }
                    while (v16 > v71);
                    if (v16 != v71)
                      goto LABEL_165;
                    v72 = v59[1];
                    if (v72 >= v52)
                      v73 = v52;
                    else
                      v73 = v59[1];
                    if (v73 && (result = memcmp(v53, (const void *)*v59, v73), (_DWORD)result))
                    {
                      if ((result & 0x80000000) == 0)
                        goto LABEL_165;
                    }
                    else if (v52 >= v72)
                    {
                      goto LABEL_165;
                    }
                  }
                }
              }
              v66 += 24;
              v67 = *(_DWORD *)(v68 + 32);
              v68 += 24;
              if (v16 > v67)
              {
LABEL_152:
                i = v68 - 8;
                goto LABEL_154;
              }
            }
          }
          if (i - 24 != v6)
          {
            *(_OWORD *)v6 = *(_OWORD *)(i - 24);
            *(_DWORD *)(v6 + 16) = *(_DWORD *)(i - 8);
          }
          a4 = 0;
          *(_QWORD *)(i - 24) = v53;
          *(_QWORD *)(i - 16) = v52;
          *(_DWORD *)(i - 8) = v16;
          --a3;
          continue;
        }
        v15 = *(_DWORD *)(v6 + 16);
LABEL_23:
        v19 = 0;
        v21 = *(const void **)v6;
        v20 = *(_QWORD *)(v6 + 8);
        while (2)
        {
          v22 = *(_DWORD *)(v6 + v19 + 40);
          if (v22 > v15)
            goto LABEL_34;
          if (v22 != v15)
            break;
          v23 = *(_QWORD *)(v6 + v19 + 32);
          if (v20 >= v23)
            v24 = *(_QWORD *)(v6 + v19 + 32);
          else
            v24 = v20;
          if (v24)
          {
            v25 = memcmp(*(const void **)(v6 + v19 + 24), v21, v24);
            if (v25)
            {
              if ((v25 & 0x80000000) == 0)
                break;
              goto LABEL_34;
            }
          }
          if (v23 < v20)
          {
LABEL_34:
            v19 += 24;
            continue;
          }
          break;
        }
        v26 = v6 + v19 + 24;
        if (v19)
        {
          v27 = *((_DWORD *)a2 - 2);
          v28 = v176;
          a2 = (size_t *)__s1;
          if (v27 <= v15)
          {
            do
            {
              if (v27 == v15)
              {
                v29 = *v28;
                if (v20 >= *v28)
                  v30 = *v28;
                else
                  v30 = v20;
                if (v30 && (v31 = memcmp((const void *)*(v28 - 1), v21, v30)) != 0)
                {
                  if (v31 < 0)
                    break;
                }
                else if (v29 < v20)
                {
                  goto LABEL_50;
                }
              }
              a2 -= 3;
              v27 = *((_DWORD *)v28 - 4);
              v28 -= 3;
            }
            while (v27 <= v15);
LABEL_47:
            a2 = v28 - 1;
          }
        }
        else if (v26 < (unint64_t)a2)
        {
          a2 = (size_t *)__s1;
          v32 = *(_DWORD *)(v189 - 8);
          if (v32 <= v15)
          {
            v28 = v176;
            a2 = (size_t *)__s1;
            while (1)
            {
              v46 = (const void **)(v28 - 1);
              if (v32 == v15)
              {
                v47 = *v28;
                if (v20 >= *v28)
                  v48 = *v28;
                else
                  v48 = v20;
                if (v48 && (v49 = memcmp(*v46, v21, v48)) != 0)
                {
                  v50 = v49 >= 0;
                }
                else
                {
                  if (v47 < v20)
                    break;
                  v50 = 1;
                }
                v51 = !v50 || v26 >= (unint64_t)v46;
                if (v51)
                  break;
              }
              else if (v26 >= (unint64_t)v46)
              {
                a2 = v28 - 1;
                break;
              }
              a2 -= 3;
              v32 = *((_DWORD *)v28 - 4);
              v28 -= 3;
              if (v32 > v15)
                goto LABEL_47;
            }
          }
        }
LABEL_50:
        i = v26;
        if (v26 < (unint64_t)a2)
        {
          v33 = a2;
          do
          {
            v192 = *(_OWORD *)i;
            *(_OWORD *)i = *(_OWORD *)v33;
            *(_OWORD *)v33 = v192;
            v34 = *(_DWORD *)(i + 16);
            *(_DWORD *)(i + 16) = *((_DWORD *)v33 + 4);
            *((_DWORD *)v33 + 4) = v34;
            while (1)
            {
              do
              {
                i += 24;
                v35 = *(_DWORD *)(i + 16);
              }
              while (v35 > v15);
              if (v35 != v15)
                break;
              v36 = *(_QWORD *)(i + 8);
              if (v20 >= v36)
                v37 = *(_QWORD *)(i + 8);
              else
                v37 = v20;
              if (v37 && (v38 = memcmp(*(const void **)i, v21, v37)) != 0)
              {
                if ((v38 & 0x80000000) == 0)
                  break;
              }
              else if (v36 >= v20)
              {
                break;
              }
            }
            v39 = v33 - 3;
            v40 = *((_DWORD *)v33 - 2);
            if (v40 <= v15)
            {
              v41 = v33 - 2;
              do
              {
                if (v40 == v15)
                {
                  v42 = *v41;
                  if (v20 >= *v41)
                    v43 = *v41;
                  else
                    v43 = v20;
                  if (v43 && (v44 = memcmp((const void *)*(v41 - 1), v21, v43)) != 0)
                  {
                    if (v44 < 0)
                      break;
                  }
                  else if (v42 < v20)
                  {
                    goto LABEL_76;
                  }
                }
                v39 -= 3;
                v40 = *((_DWORD *)v41 - 4);
                v41 -= 3;
              }
              while (v40 <= v15);
              v39 = v41 - 1;
            }
LABEL_76:
            v33 = v39;
          }
          while (i < (unint64_t)v39);
        }
        if (i - 24 != v6)
        {
          *(_OWORD *)v6 = *(_OWORD *)(i - 24);
          *(_DWORD *)(v6 + 16) = *(_DWORD *)(i - 8);
        }
        *(_QWORD *)(i - 24) = v21;
        *(_QWORD *)(i - 16) = v20;
        *(_DWORD *)(i - 8) = v15;
        v51 = v26 >= (unint64_t)a2;
        a2 = (size_t *)v189;
        a3 = __s2;
        if (!v51)
        {
LABEL_83:
          result = sub_1C5FF8438(v6, i - 24, __s2, a4 & 1);
          a4 = 0;
          continue;
        }
        v45 = sub_1C5FF974C(v6, i - 24);
        result = sub_1C5FF974C(i, v189);
        if (!(_DWORD)result)
        {
          if (v45)
            continue;
          goto LABEL_83;
        }
        a2 = (size_t *)(i - 24);
        if (!v45)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_1C5FF9304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  __int128 v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  __int128 v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;

  result = sub_1C5FF9A04(a1, a2, a3, a4);
  v11 = *(_DWORD *)(a5 + 16);
  v12 = *(_DWORD *)(a4 + 16);
  if (v11 <= v12)
  {
    if (v11 != v12)
      return result;
    v27 = *(_QWORD *)(a5 + 8);
    v28 = *(_QWORD *)(a4 + 8);
    if (v28 >= v27)
      v29 = *(_QWORD *)(a5 + 8);
    else
      v29 = *(_QWORD *)(a4 + 8);
    if (v29 && (result = memcmp(*(const void **)a5, *(const void **)a4, v29), (_DWORD)result))
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v27 >= v28)
    {
      return result;
    }
  }
  v13 = *(_OWORD *)a4;
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_OWORD *)a5 = v13;
  v14 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = *(_DWORD *)(a5 + 16);
  *(_DWORD *)(a5 + 16) = v14;
  v15 = *(_DWORD *)(a4 + 16);
  v16 = *(_DWORD *)(a3 + 16);
  if (v15 <= v16)
  {
    if (v15 != v16)
      return result;
    v30 = *(_QWORD *)(a4 + 8);
    v31 = *(_QWORD *)(a3 + 8);
    if (v31 >= v30)
      v32 = *(_QWORD *)(a4 + 8);
    else
      v32 = *(_QWORD *)(a3 + 8);
    if (v32 && (result = memcmp(*(const void **)a4, *(const void **)a3, v32), (_DWORD)result))
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v30 >= v31)
    {
      return result;
    }
  }
  v17 = *(_OWORD *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)a4 = v17;
  v18 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = v18;
  v19 = *(_DWORD *)(a3 + 16);
  v20 = *(_DWORD *)(a2 + 16);
  if (v19 <= v20)
  {
    if (v19 != v20)
      return result;
    v33 = *(_QWORD *)(a3 + 8);
    v34 = *(_QWORD *)(a2 + 8);
    if (v34 >= v33)
      v35 = *(_QWORD *)(a3 + 8);
    else
      v35 = *(_QWORD *)(a2 + 8);
    if (v35 && (result = memcmp(*(const void **)a3, *(const void **)a2, v35), (_DWORD)result))
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v33 >= v34)
    {
      return result;
    }
  }
  v21 = *(_OWORD *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v21;
  v22 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = v22;
  v23 = *(_DWORD *)(a2 + 16);
  v24 = *(_DWORD *)(a1 + 16);
  if (v23 > v24)
  {
LABEL_5:
    v25 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v25;
    v26 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = v26;
    return result;
  }
  if (v23 == v24)
  {
    v36 = *(_QWORD *)(a2 + 8);
    v37 = *(_QWORD *)(a1 + 8);
    if (v37 >= v36)
      v38 = *(_QWORD *)(a2 + 8);
    else
      v38 = *(_QWORD *)(a1 + 8);
    if (v38 && (result = memcmp(*(const void **)a2, *(const void **)a1, v38), (_DWORD)result))
    {
      if ((result & 0x80000000) != 0)
        goto LABEL_5;
    }
    else if (v36 < v37)
    {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1C5FF9504(uint64_t result, __int128 *a2, __int128 *a3)
{
  __int128 *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  unsigned int v19;
  __int128 v20;
  int v21;
  unsigned int v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  __int128 v30;
  unsigned int v31;
  __int128 v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  size_t v36;

  v5 = (__int128 *)result;
  v6 = (unsigned int *)(a2 + 1);
  v7 = *((_DWORD *)a2 + 4);
  v9 = (unsigned int *)(result + 16);
  v8 = *(_DWORD *)(result + 16);
  if (v7 > v8)
    goto LABEL_2;
  if (v7 != v8)
    goto LABEL_21;
  v13 = *((_QWORD *)a2 + 1);
  v14 = *(_QWORD *)(result + 8);
  if (v14 >= v13)
    v15 = *((_QWORD *)a2 + 1);
  else
    v15 = *(_QWORD *)(result + 8);
  if (v15)
  {
    result = memcmp(*(const void **)a2, *(const void **)result, v15);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) != 0)
        goto LABEL_2;
LABEL_21:
      v19 = *((_DWORD *)a3 + 4);
      if (v19 <= v7)
      {
        if (v19 != v7)
          return result;
        v24 = *((_QWORD *)a3 + 1);
        v25 = *((_QWORD *)a2 + 1);
        if (v25 >= v24)
          v26 = *((_QWORD *)a3 + 1);
        else
          v26 = *((_QWORD *)a2 + 1);
        if (v26 && (result = memcmp(*(const void **)a3, *(const void **)a2, v26), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v24 >= v25)
        {
          return result;
        }
      }
      v20 = *a2;
      *a2 = *a3;
      *a3 = v20;
      v21 = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
      *((_DWORD *)a3 + 4) = v21;
      v22 = *((_DWORD *)a2 + 4);
      if (v22 <= *v9)
      {
        if (v22 != *v9)
          return result;
        v27 = *((_QWORD *)a2 + 1);
        v28 = *((_QWORD *)v5 + 1);
        if (v28 >= v27)
          v29 = *((_QWORD *)a2 + 1);
        else
          v29 = *((_QWORD *)v5 + 1);
        if (v29 && (result = memcmp(*(const void **)a2, *(const void **)v5, v29), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v27 >= v28)
        {
          return result;
        }
      }
      v23 = *v5;
      *v5 = *a2;
      *a2 = v23;
LABEL_44:
      v33 = *v9;
      *v9 = *v6;
      *v6 = v33;
      return result;
    }
  }
  if (v13 >= v14)
    goto LABEL_21;
LABEL_2:
  v11 = (unsigned int *)(a3 + 1);
  v10 = *((_DWORD *)a3 + 4);
  if (v10 > v7)
  {
LABEL_3:
    v12 = *v5;
    *v5 = *a3;
    *a3 = v12;
LABEL_43:
    v6 = (unsigned int *)(a3 + 1);
    goto LABEL_44;
  }
  if (v10 == v7)
  {
    v16 = *((_QWORD *)a3 + 1);
    v17 = *((_QWORD *)a2 + 1);
    if (v17 >= v16)
      v18 = *((_QWORD *)a3 + 1);
    else
      v18 = *((_QWORD *)a2 + 1);
    if (v18 && (result = memcmp(*(const void **)a3, *(const void **)a2, v18), (_DWORD)result))
    {
      if ((result & 0x80000000) != 0)
        goto LABEL_3;
    }
    else if (v16 < v17)
    {
      goto LABEL_3;
    }
  }
  v30 = *v5;
  *v5 = *a2;
  *a2 = v30;
  v31 = *((_DWORD *)v5 + 4);
  *((_DWORD *)v5 + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v31;
  if (*v11 > v31)
    goto LABEL_42;
  if (*v11 == v31)
  {
    v34 = *((_QWORD *)a3 + 1);
    v35 = *((_QWORD *)a2 + 1);
    if (v35 >= v34)
      v36 = *((_QWORD *)a3 + 1);
    else
      v36 = *((_QWORD *)a2 + 1);
    if (!v36 || (result = memcmp(*(const void **)a3, *(const void **)a2, v36), !(_DWORD)result))
    {
      if (v34 >= v35)
        return result;
      goto LABEL_42;
    }
    if ((result & 0x80000000) != 0)
    {
LABEL_42:
      v32 = *a2;
      *a2 = *a3;
      *a3 = v32;
      v9 = v6;
      goto LABEL_43;
    }
  }
  return result;
}

BOOL sub_1C5FF974C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _BOOL8 result;
  const void **v6;
  unsigned int v7;
  unsigned int v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned int v21;
  size_t v22;
  size_t v23;
  int v24;
  size_t v25;
  size_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *__s1;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (const void **)(a2 - 24);
      v7 = *(_DWORD *)(a2 - 8);
      v8 = *(_DWORD *)(a1 + 16);
      if (v7 > v8)
        goto LABEL_3;
      if (v7 != v8)
        return result;
      v28 = *(_QWORD *)(a2 - 16);
      v29 = *(_QWORD *)(a1 + 8);
      if (v29 >= v28)
        v30 = *(_QWORD *)(a2 - 16);
      else
        v30 = *(_QWORD *)(a1 + 8);
      if (v30)
      {
        v31 = memcmp(*v6, *(const void **)a1, v30);
        if (v31)
        {
          if ((v31 & 0x80000000) == 0)
            return 1;
LABEL_3:
          v9 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v9;
          v10 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v2 - 8);
          *(_DWORD *)(v2 - 8) = v10;
          return 1;
        }
      }
      if (v28 < v29)
        goto LABEL_3;
      return 1;
    case 3uLL:
      sub_1C5FF9504(a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1C5FF9A04(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_1C5FF9304(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v11 = a1 + 48;
      sub_1C5FF9504(a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v12 = a1 + 72;
      if (a1 + 72 == v2)
        return 1;
      v13 = 0;
      v14 = 0;
      v32 = v2;
      while (2)
      {
        v15 = *(_DWORD *)(v12 + 16);
        v16 = *(_DWORD *)(v11 + 16);
        if (v15 <= v16)
        {
          if (v15 != v16)
            goto LABEL_36;
          v17 = *(_QWORD *)(v12 + 8);
          v25 = *(_QWORD *)(v11 + 8);
          if (v25 >= v17)
            v26 = *(_QWORD *)(v12 + 8);
          else
            v26 = *(_QWORD *)(v11 + 8);
          if (v26 && (v27 = memcmp(*(const void **)v12, *(const void **)v11, v26)) != 0)
          {
            if ((v27 & 0x80000000) == 0)
              goto LABEL_36;
          }
          else if (v17 >= v25)
          {
            goto LABEL_36;
          }
        }
        else
        {
          v17 = *(_QWORD *)(v12 + 8);
        }
        __s1 = *(void **)v12;
        *(_OWORD *)v12 = *(_OWORD *)v11;
        *(_DWORD *)(v12 + 16) = *(_DWORD *)(v11 + 16);
        v18 = a1;
        if (v11 == a1)
          goto LABEL_35;
        v33 = v14;
        v34 = v13;
        while (2)
        {
          v19 = a1 + v13;
          v20 = (const void **)(a1 + v13 + 24);
          v21 = *(_DWORD *)(a1 + v13 + 40);
          if (v15 > v21)
            goto LABEL_20;
          if (v15 != v21)
            goto LABEL_32;
          v22 = *(_QWORD *)(a1 + v13 + 32);
          if (v22 >= v17)
            v23 = v17;
          else
            v23 = *(_QWORD *)(a1 + v13 + 32);
          if (v23)
          {
            v24 = memcmp(__s1, *v20, v23);
            if (v24)
            {
              if ((v24 & 0x80000000) == 0)
              {
LABEL_32:
                v18 = v11;
                goto LABEL_34;
              }
              goto LABEL_20;
            }
          }
          if (v17 < v22)
          {
LABEL_20:
            v11 -= 24;
            *(_OWORD *)(v19 + 48) = *(_OWORD *)v20;
            *(_DWORD *)(v19 + 64) = v21;
            v13 -= 24;
            if (v13 == -48)
            {
              v18 = a1;
              goto LABEL_34;
            }
            continue;
          }
          break;
        }
        v18 = a1 + v13 + 48;
LABEL_34:
        v2 = v32;
        v13 = v34;
        v14 = v33;
LABEL_35:
        *(_QWORD *)v18 = __s1;
        *(_QWORD *)(v18 + 8) = v17;
        *(_DWORD *)(v18 + 16) = v15;
        if (++v14 != 8)
        {
LABEL_36:
          v11 = v12;
          v13 += 24;
          v12 += 24;
          if (v12 == v2)
            return 1;
          continue;
        }
        return v12 + 24 == v2;
      }
  }
}

uint64_t sub_1C5FF9A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  __int128 v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  __int128 v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;

  result = sub_1C5FF9504(a1, (__int128 *)a2, (__int128 *)a3);
  v9 = *(_DWORD *)(a4 + 16);
  v10 = *(_DWORD *)(a3 + 16);
  if (v9 <= v10)
  {
    if (v9 != v10)
      return result;
    v21 = *(_QWORD *)(a4 + 8);
    v22 = *(_QWORD *)(a3 + 8);
    if (v22 >= v21)
      v23 = *(_QWORD *)(a4 + 8);
    else
      v23 = *(_QWORD *)(a3 + 8);
    if (v23 && (result = memcmp(*(const void **)a4, *(const void **)a3, v23), (_DWORD)result))
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v21 >= v22)
    {
      return result;
    }
  }
  v11 = *(_OWORD *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)a4 = v11;
  v12 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = v12;
  v13 = *(_DWORD *)(a3 + 16);
  v14 = *(_DWORD *)(a2 + 16);
  if (v13 <= v14)
  {
    if (v13 != v14)
      return result;
    v24 = *(_QWORD *)(a3 + 8);
    v25 = *(_QWORD *)(a2 + 8);
    if (v25 >= v24)
      v26 = *(_QWORD *)(a3 + 8);
    else
      v26 = *(_QWORD *)(a2 + 8);
    if (v26 && (result = memcmp(*(const void **)a3, *(const void **)a2, v26), (_DWORD)result))
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v24 >= v25)
    {
      return result;
    }
  }
  v15 = *(_OWORD *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v15;
  v16 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = v16;
  v17 = *(_DWORD *)(a2 + 16);
  v18 = *(_DWORD *)(a1 + 16);
  if (v17 > v18)
  {
LABEL_4:
    v19 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v19;
    v20 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = v20;
    return result;
  }
  if (v17 == v18)
  {
    v27 = *(_QWORD *)(a2 + 8);
    v28 = *(_QWORD *)(a1 + 8);
    if (v28 >= v27)
      v29 = *(_QWORD *)(a2 + 8);
    else
      v29 = *(_QWORD *)(a1 + 8);
    if (v29 && (result = memcmp(*(const void **)a2, *(const void **)a1, v29), (_DWORD)result))
    {
      if ((result & 0x80000000) != 0)
        goto LABEL_4;
    }
    else if (v27 < v28)
    {
      goto LABEL_4;
    }
  }
  return result;
}

void sub_1C5FF9B8C(__n128 *a1, __n128 *a2, unint64_t a3, int *a4, uint64_t a5, __n128 a6)
{
  __n128 *v7;
  __n128 *v8;
  unint64_t v9;
  __n128 v10;
  unint64_t v11;
  __int8 *v13;
  uint64_t v14;
  __n128 *v15;
  __n128 *v16;
  signed __int32 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int *v22;
  unint64_t v23;
  __n128 *v24;
  unint64_t v25;
  __n128 v26;
  int *v27;
  int *v28;
  int *v29;
  __n128 v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  unsigned __int32 v39;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = (__n128 *)((char *)a2 - 24);
      if ((signed __int32)a2[-2].n128_u32[2] < (signed __int32)a1->n128_u32[0])
      {
        v9 = a1[1].n128_u64[0];
        v10 = *a1;
        v11 = a2[-1].n128_u64[1];
        *a1 = *v8;
        a1[1].n128_u64[0] = v11;
        *v8 = v10;
        a2[-1].n128_u64[1] = v9;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v22 = a4;
      v23 = a3 >> 1;
      v24 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      v25 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v26 = sub_1C5FF9E78(a1, v24, v25, a4, a6);
        v27 = &v22[6 * v23];
        sub_1C5FF9E78((__n128 *)((char *)v7 + 24 * (a3 >> 1)), a2, a3 - (a3 >> 1), v27, v26);
        v28 = &v22[6 * a3];
        v29 = v27;
        while (v29 != v28)
        {
          if (*v29 >= *v22)
          {
            v31 = *(__n128 *)v22;
            v7[1].n128_u64[0] = *((_QWORD *)v22 + 2);
            *v7 = v31;
            v22 += 6;
          }
          else
          {
            v30 = *(__n128 *)v29;
            v7[1].n128_u64[0] = *((_QWORD *)v29 + 2);
            *v7 = v30;
            v29 += 6;
          }
          v7 = (__n128 *)((char *)v7 + 24);
          if (v22 == v27)
          {
            if (v29 != v28)
            {
              v32 = 0;
              do
              {
                v33 = (char *)v7 + v32 * 4;
                v34 = *(_OWORD *)&v29[v32];
                *((_QWORD *)v33 + 2) = *(_QWORD *)&v29[v32 + 4];
                *(_OWORD *)v33 = v34;
                v32 += 6;
              }
              while (&v29[v32] != v28);
            }
            return;
          }
        }
        if (v22 != v27)
        {
          v35 = 0;
          do
          {
            v36 = (char *)v7 + v35 * 4;
            v37 = *(_OWORD *)&v22[v35];
            *((_QWORD *)v36 + 2) = *(_QWORD *)&v22[v35 + 4];
            *(_OWORD *)v36 = v37;
            v35 += 6;
          }
          while (&v22[v35] != v27);
        }
      }
      else
      {
        sub_1C5FF9B8C(a1, v24, v25, a4, a5);
        sub_1C5FF9B8C((char *)v7 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v22, a5);
        sub_1C5FFA0EC((char *)v7, (char *)v7 + 24 * (a3 >> 1), (char *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v22, a5);
      }
    }
    else if (a1 != a2)
    {
      v13 = &a1[1].n128_i8[8];
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        v14 = 0;
        v15 = a1;
        do
        {
          v16 = (__n128 *)v13;
          v17 = v15[1].n128_i32[2];
          if (v17 < (signed __int32)v15->n128_u32[0])
          {
            v38 = *(__int128 *)((char *)&v15[1] + 12);
            v39 = v15[2].n128_u32[3];
            v18 = v14;
            while (1)
            {
              v19 = (char *)a1 + v18;
              *(__n128 *)(v19 + 24) = *(__n128 *)((char *)a1 + v18);
              *((_QWORD *)v19 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v18);
              if (!v18)
                break;
              v18 -= 24;
              if (v17 >= *((_DWORD *)v19 - 6))
              {
                v20 = (uint64_t)&a1[1].n128_i64[1] + v18;
                goto LABEL_15;
              }
            }
            v20 = (uint64_t)a1;
LABEL_15:
            *(_DWORD *)v20 = v17;
            *(_OWORD *)(v20 + 4) = v38;
            *(_DWORD *)(v20 + 20) = v39;
          }
          v13 = &v16[1].n128_i8[8];
          v14 += 24;
          v15 = v16;
        }
        while (&v16[1].n128_i8[8] != (__int8 *)a2);
      }
    }
  }
}

__n128 sub_1C5FF9E78(__n128 *a1, __n128 *a2, unint64_t a3, int *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  __n128 v10;
  unint64_t v11;
  __n128 *v12;
  uint64_t v13;
  signed __int32 *v14;
  int *v15;
  signed __int32 v16;
  int *v17;
  uint64_t v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  __n128 *v23;
  unint64_t v24;
  __n128 *v25;

  if (a3)
  {
    v5 = (__n128 *)a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = (__n128 *)((char *)a2 - 24);
      if ((signed __int32)a2[-2].n128_u32[2] >= (signed __int32)a1->n128_u32[0])
      {
        v19 = *a1;
        *((_QWORD *)a4 + 2) = a1[1].n128_u64[0];
        *(__n128 *)a4 = v19;
        result = *v9;
        v11 = a2[-1].n128_u64[1];
      }
      else
      {
        v10 = *v9;
        *((_QWORD *)a4 + 2) = a2[-1].n128_u64[1];
        *(__n128 *)a4 = v10;
        result = *a1;
        v11 = a1[1].n128_u64[0];
      }
      *((_QWORD *)a4 + 5) = v11;
      *(__n128 *)(a4 + 6) = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *((_QWORD *)a4 + 2) = a1[1].n128_u64[0];
      *(__n128 *)a4 = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v20 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      sub_1C5FF9B8C(a1, v20, a3 >> 1, a4, a3 >> 1);
      sub_1C5FF9B8C((char *)v8 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), (char *)v5 + 24 * (a3 >> 1), a3 - (a3 >> 1));
      v21 = (__n128 *)((char *)v8 + 24 * (a3 >> 1));
      while (v21 != a2)
      {
        if ((signed __int32)v21->n128_u32[0] >= (signed __int32)v8->n128_u32[0])
        {
          result = *v8;
          v5[1].n128_u64[0] = v8[1].n128_u64[0];
          *v5 = result;
          v8 = (__n128 *)((char *)v8 + 24);
        }
        else
        {
          result = *v21;
          v5[1].n128_u64[0] = v21[1].n128_u64[0];
          *v5 = result;
          v21 = (__n128 *)((char *)v21 + 24);
        }
        v5 = (__n128 *)((char *)v5 + 24);
        if (v8 == v20)
        {
          if (v21 != a2)
          {
            v22 = 0;
            do
            {
              v23 = (__n128 *)((char *)v5 + v22);
              result = *(__n128 *)((char *)v21 + v22);
              v23[1].n128_u64[0] = v21[1].n128_u64[v22 / 8];
              *v23 = result;
              v22 += 24;
            }
            while ((__n128 *)((char *)v21 + v22) != a2);
          }
          return result;
        }
      }
      if (v8 != v20)
      {
        v24 = 0;
        do
        {
          v25 = (__n128 *)((char *)v5 + v24);
          result = *(__n128 *)((char *)v8 + v24);
          v25[1].n128_u64[0] = v8[1].n128_u64[v24 / 8];
          *v25 = result;
          v24 += 24;
        }
        while ((__n128 *)((char *)v8 + v24) != v20);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *((_QWORD *)a4 + 2) = a1[1].n128_u64[0];
      *(__n128 *)a4 = result;
      v12 = (__n128 *)((char *)a1 + 24);
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        v13 = 0;
        v14 = a4;
        do
        {
          v15 = v14;
          v16 = *v14;
          v14 += 6;
          v17 = v14;
          if ((signed __int32)v12->n128_u32[0] < v16)
          {
            *(_OWORD *)v14 = *(_OWORD *)v15;
            *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
            v17 = a4;
            if (v15 != a4)
            {
              v18 = v13;
              while (1)
              {
                v17 = (int *)((char *)a4 + v18);
                if ((signed __int32)v12->n128_u32[0] >= *(int *)((char *)a4 + v18 - 24))
                  break;
                *(_OWORD *)v17 = *(_OWORD *)((char *)a4 + v18 - 24);
                *((_QWORD *)v17 + 2) = *(_QWORD *)((char *)a4 + v18 - 8);
                v18 -= 24;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
          }
          result = *v12;
          *((_QWORD *)v17 + 2) = v12[1].n128_u64[0];
          *(__n128 *)v17 = result;
          v12 = (__n128 *)((char *)v12 + 24);
          v13 += 24;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

char *sub_1C5FFA0EC(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  int64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  __int128 v70;
  char *v71;
  char *v72;
  int v73;
  int v74;
  char v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  __int128 v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  __int128 v86;
  unint64_t v87;
  char *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  if (a5)
  {
    v7 = a5;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return result;
      v10 = 0;
      v11 = -a4;
      while (*(_DWORD *)a2 >= *(_DWORD *)&result[v10])
      {
        v10 += 24;
        if (__CFADD__(v11++, 1))
          return result;
      }
      v13 = -v11;
      v14 = &result[v10];
      if (-v11 >= v7)
      {
        if (v11 == -1)
        {
          v85 = &result[v10];
          v105 = *((_QWORD *)v85 + 2);
          v100 = *(_OWORD *)v85;
          v86 = *(_OWORD *)a2;
          *((_QWORD *)v85 + 2) = *((_QWORD *)a2 + 2);
          *(_OWORD *)v85 = v86;
          *((_QWORD *)a2 + 2) = v105;
          *(_OWORD *)a2 = v100;
          return result;
        }
        if (v11 > 0)
          v13 = 1 - v11;
        v24 = v13 >> 1;
        v18 = &result[24 * (v13 >> 1) + v10];
        v17 = a3;
        if (a3 != a2)
        {
          v25 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
          v17 = a2;
          do
          {
            v26 = v25 >> 1;
            v27 = &v17[24 * (v25 >> 1)];
            v29 = *(_DWORD *)v27;
            v28 = v27 + 24;
            v25 += ~(v25 >> 1);
            if (v29 < *(_DWORD *)v18)
              v17 = v28;
            else
              v25 = v26;
          }
          while (v25);
        }
        v16 = 0xAAAAAAAAAAAAAAABLL * ((v17 - a2) >> 3);
      }
      else
      {
        if (v7 >= 0)
          v15 = v7;
        else
          v15 = v7 + 1;
        v16 = v15 >> 1;
        v17 = &a2[24 * (v15 >> 1)];
        v18 = a2;
        if (v14 != a2)
        {
          v19 = 0xAAAAAAAAAAAAAAABLL * ((a2 - result - v10) >> 3);
          v18 = &result[v10];
          do
          {
            v20 = v19 >> 1;
            v21 = &v18[24 * (v19 >> 1)];
            v23 = *(_DWORD *)v21;
            v22 = v21 + 24;
            v19 += ~(v19 >> 1);
            if (*(_DWORD *)v17 < v23)
              v19 = v20;
            else
              v18 = v22;
          }
          while (v19);
        }
        v24 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result - v10) >> 3);
      }
      v30 = v17;
      if (v18 != a2)
      {
        v30 = v18;
        if (a2 != v17)
        {
          if (v18 + 24 == a2)
          {
            v102 = *((_QWORD *)v18 + 2);
            v97 = *(_OWORD *)v18;
            v36 = v17 - a2;
            v92 = a6;
            v94 = a7;
            v37 = a3;
            v38 = &result[v10];
            v90 = v16;
            v39 = v24;
            memmove(v18, a2, v17 - a2);
            v24 = v39;
            v16 = v90;
            a6 = v92;
            v14 = v38;
            a7 = v94;
            a3 = v37;
            v30 = &v18[v36];
            *(_OWORD *)v30 = v97;
            *((_QWORD *)v30 + 2) = v102;
          }
          else if (a2 + 24 == v17)
          {
            v30 = v18 + 24;
            v103 = *((_QWORD *)v17 - 1);
            v98 = *(_OWORD *)(v17 - 24);
            if (v17 - 24 != v18)
            {
              v93 = a6;
              v95 = a7;
              v40 = a3;
              v41 = &result[v10];
              v91 = v16;
              v42 = v24;
              memmove(v18 + 24, v18, v17 - 24 - v18);
              v24 = v42;
              v16 = v91;
              a6 = v93;
              v14 = v41;
              a7 = v95;
              a3 = v40;
            }
            *((_QWORD *)v18 + 2) = v103;
            *(_OWORD *)v18 = v98;
          }
          else
          {
            v31 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v18) >> 3);
            if (v31 == 0xAAAAAAAAAAAAAAABLL * ((v17 - a2) >> 3))
            {
              v32 = 0;
              do
              {
                v33 = &a2[v32];
                v34 = &v18[v32];
                v101 = *(_QWORD *)&v18[v32 + 16];
                v96 = *(_OWORD *)&v18[v32];
                v35 = *(_OWORD *)&a2[v32];
                *((_QWORD *)v34 + 2) = *(_QWORD *)&a2[v32 + 16];
                *(_OWORD *)v34 = v35;
                *((_QWORD *)v33 + 2) = v101;
                *(_OWORD *)v33 = v96;
                if (&v18[v32 + 24] == a2)
                  break;
                v32 += 24;
              }
              while (v33 + 24 != v17);
              v30 = a2;
            }
            else
            {
              v43 = 0xAAAAAAAAAAAAAAABLL * ((v17 - a2) >> 3);
              v44 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v18) >> 3);
              do
              {
                v45 = v44;
                v44 = v43;
                v43 = v45 % v43;
              }
              while (v43);
              if (v44)
              {
                v46 = &v18[24 * v44];
                do
                {
                  v47 = *(_OWORD *)(v46 - 24);
                  v48 = *((_QWORD *)v46 - 1);
                  v46 -= 24;
                  v104 = v48;
                  v99 = v47;
                  v49 = &v46[8 * ((a2 - v18) >> 3)];
                  v50 = v46;
                  do
                  {
                    v51 = v50;
                    v50 = v49;
                    v52 = *(_OWORD *)v49;
                    *((_QWORD *)v51 + 2) = *((_QWORD *)v49 + 2);
                    *(_OWORD *)v51 = v52;
                    v53 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v49) >> 3);
                    v54 = __OFSUB__(v31, v53);
                    v55 = v31 - v53;
                    v75 = (v55 < 0) ^ v54;
                    v49 = &v18[24 * v55];
                    if (v75)
                      v49 = &v50[8 * ((a2 - v18) >> 3)];
                  }
                  while (v49 != v46);
                  *((_QWORD *)v50 + 2) = v104;
                  *(_OWORD *)v50 = v99;
                }
                while (v46 != v18);
              }
              v30 = &v18[8 * ((v17 - a2) >> 3)];
            }
          }
        }
      }
      a4 = -(v24 + v11);
      v56 = v7 - v16;
      if (v24 + v16 >= v7 - (v24 + v16) - v11)
      {
        v61 = v24;
        v62 = -(v24 + v11);
        v63 = v16;
        v64 = v7 - v16;
        v65 = a6;
        v66 = a7;
        v67 = v14;
        sub_1C5FFA0EC(v30, v17, a3, v62, v64);
        result = v67;
        a7 = v66;
        a6 = v65;
        v17 = v18;
        v56 = v63;
        a4 = v61;
        a3 = v30;
      }
      else
      {
        v57 = v18;
        v58 = a6;
        v59 = a7;
        v60 = a3;
        sub_1C5FFA0EC(v14, v57, v30, v24, v16);
        a7 = v59;
        a3 = v60;
        a6 = v58;
        result = v30;
      }
      v7 = v56;
      a2 = v17;
      if (!v56)
        return result;
    }
    if (a4 <= v7)
    {
      if (result != a2)
      {
        v79 = 0;
        do
        {
          v80 = &a6[v79];
          v81 = *(_OWORD *)&result[v79];
          *((_QWORD *)v80 + 2) = *(_QWORD *)&result[v79 + 16];
          *(_OWORD *)v80 = v81;
          v79 += 24;
        }
        while (&result[v79] != a2);
        if (v79)
        {
          v82 = a6;
          while (a2 != a3)
          {
            if (*(_DWORD *)a2 >= *(_DWORD *)v82)
            {
              v84 = *(_OWORD *)v82;
              *((_QWORD *)result + 2) = *((_QWORD *)v82 + 2);
              *(_OWORD *)result = v84;
              v82 += 24;
            }
            else
            {
              v83 = *(_OWORD *)a2;
              *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
              *(_OWORD *)result = v83;
              a2 += 24;
            }
            result += 24;
            if (&a6[v79] == v82)
              return result;
          }
          return (char *)memmove(result, v82, a6 - v82 + v79);
        }
      }
    }
    else if (a2 != a3)
    {
      v68 = 0;
      do
      {
        v69 = &a6[v68];
        v70 = *(_OWORD *)&a2[v68];
        *((_QWORD *)v69 + 2) = *(_QWORD *)&a2[v68 + 16];
        *(_OWORD *)v69 = v70;
        v68 += 24;
      }
      while (&a2[v68] != a3);
      if (v68)
      {
        v71 = &a6[v68];
        v72 = a3 - 24;
        while (a2 != result)
        {
          v73 = *((_DWORD *)v71 - 6);
          v74 = *((_DWORD *)a2 - 6);
          v75 = v73 < v74;
          if (v73 >= v74)
            v76 = v71 - 24;
          else
            v76 = a2 - 24;
          if (v75)
            a2 -= 24;
          v77 = *(_OWORD *)v76;
          v78 = *((_QWORD *)v76 + 2);
          if (!v75)
            v71 -= 24;
          *((_QWORD *)v72 + 2) = v78;
          *(_OWORD *)v72 = v77;
          v72 -= 24;
          if (v71 == a6)
            return result;
        }
        if (v71 != a6)
        {
          v87 = 0;
          do
          {
            v88 = &v72[v87];
            v89 = *(_OWORD *)&v71[v87 - 24];
            *((_QWORD *)v88 + 2) = *(_QWORD *)&v71[v87 - 8];
            *(_OWORD *)v88 = v89;
            v87 -= 24;
          }
          while (&v71[v87] != a6);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C5FFA6E8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63BDC20(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C5FFA7A0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  char v6;
  _BYTE *v7;
  char v8;
  char v9;

  if (a3 && *(_BYTE *)(a1 + 504))
  {
    v5 = *(_QWORD *)(a1 + 272);
    v6 = 1;
    v9 = 1;
    if (*a3)
    {
      v7 = a3;
      v6 = 3;
    }
    v8 = v6;
    (*(void (**)(uint64_t, _BYTE **, uint64_t))(*(_QWORD *)v5 + 112))(v5, &v7, 1);
  }
  llvm::MCStreamer::emitSLEB128IntValue(*(llvm::MCStreamer **)(a1 + 272), a2);
}

void sub_1C5FFA814(uint64_t a1, unint64_t a2, _BYTE *a3, unsigned int a4)
{
  uint64_t v7;
  char v8;
  _BYTE *v9;
  char v10;
  char v11;

  if (a3 && *(_BYTE *)(a1 + 504))
  {
    v7 = *(_QWORD *)(a1 + 272);
    v8 = 1;
    v11 = 1;
    if (*a3)
    {
      v9 = a3;
      v8 = 3;
    }
    v10 = v8;
    (*(void (**)(uint64_t, _BYTE **, uint64_t))(*(_QWORD *)v7 + 112))(v7, &v9, 1);
  }
  llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1 + 272), a2, a4);
}

const char *sub_1C5FFA898(int a1)
{
  const char *result;

  if (a1 > 146)
  {
    if (a1 > 186)
    {
      switch(a1)
      {
        case 187:
          return "indirect datarel sdata4";
        case 188:
          return "indirect datarel sdata8";
        case 255:
          return "omit";
        default:
          return "<unknown encoding>";
      }
    }
    else
    {
      switch(a1)
      {
        case 147:
          result = "indirect pcrel udata4";
          break;
        case 148:
          result = "indirect pcrel udata8";
          break;
        case 155:
          result = "indirect pcrel sdata4";
          break;
        case 156:
          result = "indirect pcrel sdata8";
          break;
        default:
          return "<unknown encoding>";
      }
    }
  }
  else
  {
    result = "absptr";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "uleb128";
        break;
      case 3:
        result = "udata4";
        break;
      case 4:
        result = "udata8";
        break;
      case 9:
        result = "sleb128";
        break;
      case 11:
        result = "sdata4";
        break;
      case 12:
        result = "sdata8";
        break;
      case 16:
        result = "pcrel";
        break;
      case 19:
        result = "pcrel udata4";
        break;
      case 20:
        result = "pcrel udata8";
        break;
      case 27:
        result = "pcrel sdata4";
        break;
      case 28:
        result = "pcrel sdata8";
        break;
      default:
        return "<unknown encoding>";
    }
  }
  return result;
}

uint64_t sub_1C5FFA9F8(uint64_t a1, llvm::MCExpr **a2, char a3)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  llvm::MCStreamer *v10;
  uint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_4;
  v5 = *(_QWORD *)(a1 + 256);
  if (*(_BYTE *)(v5 + 338))
    return (*(uint64_t (**)(_QWORD, llvm::MCExpr **, _QWORD))(**(_QWORD **)(a1 + 272) + 376))(*(_QWORD *)(a1 + 272), a2, 0);
  if (*(_BYTE *)(v5 + 424))
  {
    v10 = *(llvm::MCStreamer **)(a1 + 272);
    if (*(_BYTE *)(*((_QWORD *)v10 + 1) + 1626))
      v11 = 8;
    else
      v11 = 4;
    return llvm::MCStreamer::emitSymbolValue(v10, (const llvm::MCSymbol *)a2, v11, 0);
  }
  else
  {
LABEL_4:
    v6 = (unint64_t)*a2 & 0xFFFFFFFFFFFFFFF8;
    if (!v6 && ((_DWORD)a2[1] & 0x1C00) == 0x800)
    {
      *((_DWORD *)a2 + 2) |= 4u;
      llvm::MCExpr::findAssociatedFragment(a2[3]);
      *a2 = (llvm::MCExpr *)((unint64_t)*a2 & 7 | v6);
    }
    v7 = *(_QWORD **)(a1 + 272);
    if (*(_BYTE *)(v7[1] + 1626))
      v8 = 8;
    else
      v8 = 4;
    return (*(uint64_t (**)(_QWORD, llvm::MCExpr **, _QWORD, uint64_t))(*v7 + 832))(*(_QWORD *)(a1 + 272), a2, *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8), v8);
  }
}

uint64_t sub_1C5FFAAF0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 424))
    return sub_1C5FFA9F8(a1, *(llvm::MCExpr ***)a2, 0);
  v2 = *(_QWORD **)(a1 + 272);
  v3 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(v2[1] + 1626))
    v4 = 8;
  else
    v4 = 4;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v2 + 512))(v2, v3, v4);
}

uint64_t sub_1C5FFAB30(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 1248))(*(_QWORD *)(a1 + 272));
}

void sub_1C5FFAB40(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::dwarf *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void (*v16)(uint64_t, const char **, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25[4];
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30[4];
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35[4];
  __int16 v36;
  const char *v37;
  __int16 v38;
  uint64_t v39[4];
  __int16 v40;
  const char *v41;
  __int16 v42;
  uint64_t v43[5];
  uint64_t v44[5];
  uint64_t v45[5];
  uint64_t v46[5];
  uint64_t v47[5];
  uint64_t v48[5];
  const char *v49;
  uint64_t v50;
  __int16 v51;

  if (*(_BYTE *)(a1 + 504))
  {
    v21 = *(_QWORD *)(a1 + 272);
    v41 = "Abbrev [";
    v42 = 259;
    v22 = *(_DWORD *)(a2 + 24);
    v40 = 264;
    LODWORD(v39[0]) = v22;
    sub_1C4825FE4((uint64_t *)&v41, v39, (uint64_t)v43);
    v37 = "] 0x";
    v38 = 259;
    sub_1C4825FE4(v43, (uint64_t *)&v37, (uint64_t)v44);
    v34 = *(unsigned int *)(a2 + 16);
    v35[0] = (uint64_t)&v34;
    v35[2] = 0;
    v36 = 270;
    sub_1C4825FE4(v44, v35, (uint64_t)v45);
    v32 = ":0x";
    v33 = 259;
    sub_1C4825FE4(v45, (uint64_t *)&v32, (uint64_t)v46);
    v29 = *(unsigned int *)(a2 + 20);
    v30[0] = (uint64_t)&v29;
    v30[2] = 0;
    v31 = 270;
    sub_1C4825FE4(v46, v30, (uint64_t)v47);
    v27 = " ";
    v28 = 259;
    sub_1C4825FE4(v47, (uint64_t *)&v27, (uint64_t)v48);
    v23 = llvm::dwarf::TagString((llvm::dwarf *)*(unsigned __int16 *)(a2 + 28));
    v26 = 261;
    v25[0] = (uint64_t)v23;
    v25[1] = v24;
    sub_1C4825FE4(v48, v25, (uint64_t)&v49);
    (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v21 + 112))(v21, &v49, 1);
  }
  llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1 + 272), *(unsigned int *)(a2 + 24), 0);
  v4 = *(_QWORD **)(a2 + 8);
  if (v4)
  {
    v5 = *v4 & 0xFFFFFFFFFFFFFFF8;
    if (v5)
    {
      do
      {
        if (*(_BYTE *)(a1 + 504))
        {
          v11 = (llvm::dwarf *)*(unsigned __int16 *)(v5 + 12);
          v12 = v5;
          v13 = *(_QWORD *)(a1 + 272);
          v14 = llvm::dwarf::AttributeString(v11);
          v51 = 261;
          v49 = v14;
          v50 = v15;
          v16 = *(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v13 + 112);
          v17 = v13;
          v5 = v12;
          v16(v17, &v49, 1);
          if ((_DWORD)v11 == 50)
          {
            v18 = *(_QWORD *)(a1 + 272);
            v19 = llvm::dwarf::AccessibilityString((llvm::dwarf *)*(unsigned int *)(v12 + 16));
            v51 = 261;
            v49 = v19;
            v50 = v20;
            (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v18 + 112))(v18, &v49, 1);
          }
        }
        sub_1C6001678(v5 + 8, a1);
        v6 = *(_QWORD *)v5;
        if ((*(_QWORD *)v5 & 4) != 0)
          break;
        v5 = v6 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v6 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
  }
  v7 = *(_QWORD **)(a2 + 32);
  if (*(_BYTE *)(a2 + 30) || v7)
  {
    if (v7)
    {
      v8 = (uint64_t *)(*v7 & 0xFFFFFFFFFFFFFFF8);
      if (v8)
      {
        do
        {
          sub_1C5FFAB40(a1, v8);
          v9 = *v8;
          if ((*v8 & 4) != 0)
            break;
          v8 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF8);
        }
        while ((v9 & 0xFFFFFFFFFFFFFFF8) != 0);
      }
    }
    v10 = *(_QWORD *)(a1 + 272);
    v49 = "End Of Children Mark";
    v51 = 259;
    (*(void (**)(uint64_t, const char **, uint64_t))(*(_QWORD *)v10 + 112))(v10, &v49, 1);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 512))(*(_QWORD *)(a1 + 272), 0, 1);
  }
}

uint64_t sub_1C5FFADF0(uint64_t a1, _BYTE *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  const char *v13;
  const char *v14;
  uint64_t v15;
  const llvm::MCAsmInfo *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm *v20;
  _QWORD *MCAsmParser;
  _QWORD *v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  void (*v25)(void);
  uint64_t (*v26)(uint64_t, _QWORD *, uint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  llvm::MCStreamer *v30;
  const char *v31[4];
  __int16 v32;

  v13 = (const char *)(a3 - 1);
  if (a3 < a3 - 1)
    v13 = (const char *)a3;
  if (a2[a3 - 1])
    v14 = (const char *)a3;
  else
    v14 = v13;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 560);
  if (*(_BYTE *)(v15 + 464)
    || *(_BYTE *)(v15 + 465)
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 104))(*(_QWORD *)(a1 + 272)) & 1) != 0)
  {
    v16 = (const llvm::MCAsmInfo *)sub_1C63BE28C(*(_QWORD *)(a1 + 288), a2, (size_t)v14, a6);
    v17 = *(_QWORD *)(a1 + 288);
    v18 = *(_QWORD *)(v17 + 2056);
    v19 = v17 + 8;
    if (v18)
      v19 = v18;
    v20 = *(llvm **)(v19 + 80);
    if ((llvm *)((char *)v20 + 24) != (llvm *)(a5 + 136))
      sub_1C4D82E38((uint64_t)v20 + 24, *(std::string **)(a5 + 136), *(std::string **)(a5 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a5 + 144) - *(_QWORD *)(a5 + 136)) >> 3));
    MCAsmParser = (_QWORD *)llvm::createMCAsmParser(v20, *(llvm::SourceMgr **)(a1 + 264), *(llvm::MCContext **)(a1 + 272), *(llvm::MCStreamer **)(a1 + 256), v16);
    *(_BYTE *)(*(_QWORD *)(a1 + 272) + 268) = 0;
    v22 = *(_QWORD **)(*(_QWORD *)(a1 + 248) + 8);
    v23 = (uint64_t (*)(void))v22[8];
    if (v23)
    {
      v24 = v23();
      v22 = *(_QWORD **)(*(_QWORD *)(a1 + 248) + 8);
    }
    else
    {
      v24 = 0;
    }
    v25 = (void (*)(void))v22[36];
    if (v25)
      v25();
    v26 = (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))v22[14];
    if (!v26 || (v27 = v26(a4, MCAsmParser, v24, a5)) == 0)
      llvm::report_fatal_error((llvm *)"Inline asm not supported by this streamer because we don't have an asm parser for this target\n", (const char *)1);
    v28 = (_QWORD *)v27;
    (*(void (**)(_QWORD *, uint64_t))(*MCAsmParser + 72))(MCAsmParser, a7);
    MCAsmParser[1] = v28;
    (*(void (**)(_QWORD *, _QWORD *))(*v28 + 16))(v28, MCAsmParser);
    if ((_DWORD)a7 == 1)
      *(_BYTE *)((*(uint64_t (**)(_QWORD *))(*MCAsmParser + 40))(MCAsmParser) + 109) = 1;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*MCAsmParser + 80))(MCAsmParser, 1, 1);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 424))(a1, a4, v28[30]);
    (*(void (**)(_QWORD *))(*v28 + 8))(v28);
    if (v24)
      MEMORY[0x1CAA32FC0](v24, 0x10F0C40CB53E019);
    return (*(uint64_t (**)(_QWORD *))(*MCAsmParser + 8))(MCAsmParser);
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1);
    v30 = *(llvm::MCStreamer **)(a1 + 272);
    v32 = 261;
    v31[0] = a2;
    v31[1] = v14;
    llvm::MCStreamer::emitRawText(v30, v31);
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 424))(a1, a4, 0);
  }
}

void sub_1C5FFB088(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  const char *v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  _BYTE *v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _BYTE *v26;
  char v27;
  int v28;
  const char *v29;
  int v30;
  char *v31;
  _BYTE *v32;
  size_t v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  _BOOL8 v37;
  const char *v38;
  const char *v39;
  char *v40;
  char *v41;
  _BYTE *v42;
  char *v43;
  char v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t i;
  int v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  int v54;
  char v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  uint64_t v60;
  char *v61;
  size_t v62;
  const char *v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  llvm::MCSymbol *Symbol;
  llvm::MCSymbol **v70;
  llvm::MCSymbol *v71;
  llvm::MCContext *v72;
  char *v73;
  _BYTE *v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int j;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  void (**v85)(llvm::raw_ostream *__hidden);
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  std::string::size_type v89;
  const std::string::value_type *v90;
  const std::string::value_type *v91;
  std::string::size_type v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (**v96)(llvm::DiagnosticInfo *__hidden);
  char v97;
  char v98;
  _QWORD *v99;
  const char *v100;
  const char *__src;
  unsigned int v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t (**v106)();
  int v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  char v111;
  uint64_t v112;
  int v113;
  void **v114;
  __int16 v115;
  const char *v116;
  __int16 v117;
  std::string __p;
  char v119;
  char v120;
  uint64_t v121[4];
  __int16 v122;
  uint64_t (**v123)(llvm::DiagnosticInfo *__hidden);
  int v124;
  char v125;
  _QWORD *v126;
  uint64_t *v127;
  uint64_t v128;
  void *v129;
  __int128 v130;
  uint64_t v131;
  __int16 v132;
  void (**v133)(llvm::raw_ostream *__hidden);
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char v138;
  uint64_t v139;
  int v140;
  std::string *p_p;
  uint64_t v142;

  v4 = 0;
  v142 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 32);
  do
  {
    v6 = v4;
    v7 = *(_DWORD *)(v5 + 32 * v4++) & 0x10000FF;
  }
  while (v7 == 0x1000000);
  v8 = *(const char **)(v5 + 32 * v6 + 16);
  v9 = *(_QWORD *)(a1 + 272);
  if (*v8)
  {
    v10 = *(_BYTE **)(*(_QWORD *)(a1 + 256) + 136);
    v132 = 257;
    if (*v10)
    {
      v129 = v10;
      v11 = 3;
    }
    else
    {
      v11 = 1;
    }
    LOBYTE(v132) = v11;
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v9 + 128))(v9, &v129, 1);
    v15 = *(_QWORD *)(a2 + 32);
    v16 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = 32 * v16;
      while (1)
      {
        if (*(_BYTE *)(v15 + v18 - 32) == 14)
        {
          v17 = *(_QWORD *)(v15 + v18 - 16);
          if (v17)
          {
            v19 = *(unsigned int *)(v17 + 8);
            if ((_DWORD)v19)
            {
              v20 = *(_QWORD *)(v17 - 8 * v19);
              if (*(_BYTE *)v20 == 1)
              {
                v21 = *(_QWORD *)(v20 + 128);
                if (*(_BYTE *)(v21 + 16) == 16)
                  break;
              }
            }
          }
        }
        v18 -= 32;
        if (!v18)
          goto LABEL_19;
      }
      v99 = (_QWORD *)(v21 + 24);
      if (*(_DWORD *)(v21 + 32) >= 0x41u)
        v99 = (_QWORD *)*v99;
      v103 = (_QWORD *)*v99;
    }
    else
    {
      v17 = 0;
LABEL_19:
      v103 = 0;
    }
    v129 = &v131;
    v130 = xmmword_1C64638F0;
    v107 = 0;
    v111 = 0;
    v112 = 0;
    v114 = &v129;
    v113 = 0;
    v109 = 0;
    v110 = 0;
    v108 = 0;
    v22 = *(_QWORD **)(a1 + 288);
    v105 = *(_QWORD *)(v15 + 48);
    v106 = &off_1E81A7280;
    v104 = v22;
    if ((v105 & 4) != 0)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v106, "\t.intel_syntax\n\t", 0x10uLL);
      LODWORD(v16) = *(_DWORD *)(a2 + 40);
      v24 = 1;
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 256);
      v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v22 + 200))(*v22);
      if (*(_BYTE *)(v23 + 66))
        llvm::raw_ostream::write((llvm::raw_ostream *)&v106, 9);
    }
    v27 = *v8;
    if (*v8)
    {
      v102 = v16 - 1;
      v28 = -1;
      v29 = v8;
      __src = v8;
      while (1)
      {
        if (v27 == 10)
        {
          v31 = (char *)(v29 + 1);
          v32 = v110;
          if ((unint64_t)v110 >= v109)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v106, 10);
          }
          else
          {
            v110 = (_QWORD *)((char *)v110 + 1);
            *v32 = 10;
          }
          goto LABEL_122;
        }
        if (v27 != 36)
        {
          v33 = 0;
          do
          {
            v34 = v29[++v33];
            v35 = v34 > 0x24 || ((1 << v34) & 0x1000000401) == 0;
          }
          while (v35 && v34 - 123 >= 3);
          v31 = (char *)&v29[v33];
          if (v28 == -1 || v28 == v24)
            llvm::raw_ostream::write((llvm::raw_ostream *)&v106, v29, v33);
          goto LABEL_122;
        }
        v30 = v29[1];
        if (v30 <= 40)
          break;
        if (v30 == 41)
        {
          v31 = (char *)(v29 + 2);
          if (v28 != -1)
            goto LABEL_99;
          v43 = (char *)v110;
          if ((unint64_t)v110 < v109)
          {
            v110 = (_QWORD *)((char *)v110 + 1);
            v44 = 125;
            goto LABEL_94;
          }
          v55 = 125;
          goto LABEL_98;
        }
        if (v30 != 124)
          goto LABEL_54;
        v31 = (char *)(v29 + 2);
        if (v28 == -1)
        {
          v43 = (char *)v110;
          if ((unint64_t)v110 < v109)
          {
            v110 = (_QWORD *)((char *)v110 + 1);
            v44 = 124;
LABEL_94:
            *v43 = v44;
LABEL_99:
            v28 = -1;
            goto LABEL_122;
          }
          v55 = 124;
LABEL_98:
          llvm::raw_ostream::write((llvm::raw_ostream *)&v106, v55);
          goto LABEL_99;
        }
        ++v28;
LABEL_122:
        v27 = *v31;
        v29 = v31;
        if (!*v31)
          goto LABEL_141;
      }
      if (v30 == 36)
      {
        if ((v105 & 4) == 0 && (v28 == -1 || v28 == v24))
        {
          v42 = v110;
          if ((unint64_t)v110 >= v109)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v106, 36);
          }
          else
          {
            v110 = (_QWORD *)((char *)v110 + 1);
            *v42 = 36;
          }
        }
LABEL_121:
        v31 = (char *)(v29 + 2);
        goto LABEL_122;
      }
      if (v30 == 40)
      {
        if (v28 != -1)
        {
          v100 = "Nested variants found in inline asm string: '";
LABEL_193:
          v121[0] = (uint64_t)v100;
          v122 = 259;
          v98 = 1;
          v120 = 1;
          if (!*v8)
            goto LABEL_182;
LABEL_194:
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)__src;
LABEL_181:
          v98 = 3;
          goto LABEL_182;
        }
        v28 = 0;
        goto LABEL_121;
      }
LABEL_54:
      v36 = *((unsigned __int8 *)v29 + 1);
      v37 = v36 == 123;
      if (v36 == 123 && (v38 = v29 + 2, v29[2] == 58))
      {
        v39 = v29 + 3;
        v40 = strchr((char *)v38 + 1, 125);
        if (!v40)
        {
          v121[0] = (uint64_t)"Unterminated ${:foo} operand in inline asm string: '";
          v122 = 259;
          v98 = 1;
          v120 = 1;
          if (!*__src)
            goto LABEL_182;
          goto LABEL_194;
        }
        v41 = v40;
        if (v28 == -1 || v28 == v24)
          (*(void (**)(uint64_t, uint64_t, uint64_t (***)(), const char *, int64_t))(*(_QWORD *)a1 + 384))(a1, a2, &v106, v39, v40 - v39);
        v31 = v41 + 1;
        v8 = __src;
      }
      else
      {
        v45 = 0;
        do
          v46 = v29[v37 + 1 + v45++] - 48;
        while (v46 < 0xA);
        if (v45 == 1)
          goto LABEL_179;
        v47 = 0;
        v31 = (char *)&v29[v37 + v45];
        for (i = 1; i != v45; ++i)
        {
          v49 = v29[v37 + i];
          if ((v49 - 48) >= 0xA)
          {
            if ((v49 - 97) >= 0x1A)
            {
              v8 = __src;
              if ((v49 - 65) > 0x19)
                goto LABEL_179;
              v50 = -55;
            }
            else
            {
              v50 = -87;
              v8 = __src;
            }
          }
          else
          {
            v50 = -48;
          }
          v51 = v50 + v49;
          if (v51 > 9)
            goto LABEL_179;
          v52 = 10 * v47 + v51;
          if (v47 > v52 / 0xA)
            goto LABEL_179;
          v47 = v52;
        }
        v53 = v52 >= 0x100000000 ? 0 : v52;
        if (HIDWORD(v52))
        {
LABEL_179:
          v121[0] = (uint64_t)"Bad $ operand number in inline asm string: '";
          v122 = 259;
          v98 = 1;
          v120 = 1;
          if (*v8)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
            goto LABEL_181;
          }
LABEL_182:
          v119 = v98;
          sub_1C6131AAC(v121, (uint64_t *)&__p, (uint64_t)&v123);
          v116 = "'";
          v117 = 259;
          sub_1C6131AAC((uint64_t *)&v123, (uint64_t *)&v116, (uint64_t)&v133);
          llvm::report_fatal_error((uint64_t)&v133, 1);
        }
        if (v102 <= v53)
        {
          v100 = "Invalid $ operand number in inline asm string: '";
          goto LABEL_193;
        }
        v115 = 0;
        if (v36 == 123)
        {
          v54 = *v31;
          if (v54 == 58)
          {
            if (!v31[1])
            {
              v100 = "Bad ${:} expression in inline asm string: '";
              goto LABEL_193;
            }
            LOBYTE(v115) = v31[1];
            v31 = (char *)&v29[v37 + 2 + v45];
            v54 = *v31;
          }
          if (v54 != 125)
          {
            v100 = "Bad ${} expression in inline asm string: '";
            goto LABEL_193;
          }
          ++v31;
        }
        if (v28 == -1 || v28 == v24)
        {
          v56 = *(_DWORD *)(a2 + 40);
          if (v53)
          {
            v57 = -v53;
            v58 = 2;
            do
            {
              if (v58 >= v56)
                break;
              v58 += ((unsigned __int16)*(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v58 + 16) >> 3) + 1;
            }
            while (!__CFADD__(v57++, 1));
          }
          else
          {
            v58 = 2;
          }
          if (v58 >= v56 || (v60 = *(_QWORD *)(a2 + 32), *(_BYTE *)(v60 + 32 * v58) == 14))
          {
LABEL_113:
            memset(&__p, 0, sizeof(__p));
            LODWORD(v134) = 0;
            v138 = 0;
            v139 = 0;
            v133 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
            p_p = &__p;
            v140 = 0;
            v136 = 0;
            v137 = 0;
            v135 = 0;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v133, "invalid operand in inline asm: '", 0x20uLL);
            v61 = v137;
            v62 = strlen(v8);
            v63 = v8;
            v64 = v62;
            if (v62 <= v136 - v137)
            {
              if (v62)
              {
                memcpy(v137, __src, v62);
                v61 = &v137[v64];
                v137 += v64;
              }
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v133, v63, v62);
              v61 = v137;
            }
            if (v136 == v61)
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v133, "'", 1uLL);
            }
            else
            {
              *v61 = 39;
              ++v137;
            }
            v8 = __src;
            v65 = *(_QWORD *)v104[258];
            v122 = 260;
            v121[0] = (uint64_t)p_p;
            v124 = 0;
            v125 = 0;
            v123 = &off_1E814E960;
            v126 = v103;
            v127 = v121;
            v128 = 0;
            llvm::LLVMContext::diagnose(v65, (const llvm::DiagnosticInfo *)&v123);
            v133 = off_1E81A6E70;
            if (v140 == 1 && v135)
              MEMORY[0x1CAA32F9C](v135, 0x1000C8077774924);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_122;
          }
          v66 = v58 + 1;
          v67 = *(unsigned __int8 *)(v60 + 32 * v66);
          if (v67 == 4)
          {
            Symbol = (llvm::MCSymbol *)llvm::MachineBasicBlock::getSymbol(*(llvm::MachineBasicBlock **)(v60 + 32 * v66 + 16));
            llvm::MCSymbol::print(Symbol, (llvm::raw_ostream *)&v106, *(const llvm::MCAsmInfo **)(a1 + 256));
          }
          else if (v67 == 11)
          {
            v70 = (llvm::MCSymbol **)sub_1C63BC374(a1, *(_QWORD *)(*(_QWORD *)(v60 + 32 * v66 + 16) - 32));
            v71 = *v70;
            llvm::MCSymbol::print(*v70, (llvm::raw_ostream *)&v106, *(const llvm::MCAsmInfo **)(a1 + 256));
            if (v104[257])
              v72 = (llvm::MCContext *)v104[257];
            else
              v72 = (llvm::MCContext *)(v104 + 1);
            llvm::MCContext::registerInlineAsmLabel(v72, v71);
          }
          else
          {
            v68 = *(_QWORD *)a1;
            if ((*(_QWORD *)(v60 + 32 * v58 + 16) & 7) == 6)
            {
              if (((*(uint64_t (**)(uint64_t, uint64_t))(v68 + 408))(a1, a2) & 1) != 0)
                goto LABEL_113;
            }
            else if ((*(unsigned int (**)(uint64_t, uint64_t))(v68 + 400))(a1, a2))
            {
              goto LABEL_113;
            }
          }
        }
      }
      goto LABEL_122;
    }
LABEL_141:
    v73 = (char *)v110;
    if ((v105 & 4) != 0)
    {
      if (v109 - (unint64_t)v110 > 0xC)
      {
        *v110 = *(_QWORD *)"\n\t.att_syntax";
        *(_QWORD *)(v73 + 5) = *(_QWORD *)"t_syntax";
        v73 = (char *)v110 + 13;
        v110 = (_QWORD *)((char *)v110 + 13);
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v106, "\n\t.att_syntax", 0xDuLL);
        v73 = (char *)v110;
      }
    }
    if ((unint64_t)v73 >= v109)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v106, 10);
    }
    else
    {
      v110 = v73 + 1;
      *v73 = 10;
    }
    v74 = v110;
    if ((unint64_t)v110 >= v109)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v106, 0);
    }
    else
    {
      v110 = (_QWORD *)((char *)v110 + 1);
      *v74 = 0;
    }
    v133 = (void (**)(llvm::raw_ostream *__hidden))&v135;
    v134 = 0x800000000;
    v75 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 280) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 16));
    v76 = *(_DWORD *)(a2 + 40);
    if (v76 >= 3)
    {
      for (j = 2; j < v76; ++j)
      {
        v78 = *(_QWORD *)(a2 + 32);
        if (*(_BYTE *)(v78 + 32 * j) == 1)
        {
          v79 = *(_DWORD *)(v78 + 32 * j + 16);
          if ((v79 & 7) == 4)
          {
            v80 = *(unsigned int *)(v78 + 32 * (j + 1) + 4);
            if (((*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v75 + 96))(v75, *(_QWORD *)(a1 + 280), v80) & 1) == 0)
            {
              v81 = v134;
              if (v134 >= (unint64_t)HIDWORD(v134))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, (uint64_t)&v135, v134 + 1, 4);
                v81 = v134;
              }
              *((_DWORD *)v133 + v81) = v80;
              LODWORD(v134) = v134 + 1;
            }
          }
          j += (unsigned __int16)v79 >> 3;
        }
      }
    }
    v82 = v134;
    if ((_DWORD)v134)
    {
      v83 = (char *)operator new(0x38uLL);
      v84 = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1C8662E80;
      strcpy(v83, "inline asm clobber list contains reserved registers: ");
      v85 = v133;
      v86 = 4 * v82;
      do
      {
        v88 = *(_DWORD *)v85;
        v85 = (void (**)(llvm::raw_ostream *__hidden))((char *)v85 + 4);
        v87 = v88;
        if ((v84 & 1) != 0)
          v89 = 2;
        else
          v89 = 0;
        if ((v84 & 1) != 0)
          v90 = ", ";
        else
          v90 = 0;
        std::string::append(&__p, v90, v89);
        v91 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v75 + 512))(v75, v87);
        std::string::append(&__p, v91, v92);
        v84 = 1;
        v86 -= 4;
      }
      while (v86);
      v93 = **(_QWORD **)(*(_QWORD *)(a1 + 288) + 2064);
      v122 = 260;
      v121[0] = (uint64_t)&__p;
      v124 = 0;
      v125 = 1;
      v123 = &off_1E814E960;
      v126 = v103;
      v127 = v121;
      v128 = 0;
      llvm::LLVMContext::diagnose(v93, (const llvm::DiagnosticInfo *)&v123);
      v94 = **(_QWORD **)(*(_QWORD *)(a1 + 288) + 2064);
      v121[0] = (uint64_t)"Reserved registers on the clobber list may not be preserved across the asm statement, and clobb"
                         "ering them may lead to undefined behaviour.";
      v122 = 259;
      v124 = 0;
      v125 = 3;
      v123 = &off_1E814E960;
      v126 = v103;
      v127 = v121;
      v128 = 0;
      llvm::LLVMContext::diagnose(v94, (const llvm::DiagnosticInfo *)&v123);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_1C5FFADF0(a1, *v114, (unint64_t)v114[1], *(_QWORD *)(*(_QWORD *)(a1 + 280) + 16), *(_QWORD *)(a1 + 248) + 1128, v17, (*(_DWORD *)(*(_QWORD *)(a2 + 32) + 48) >> 2) & 1);
    v95 = *(_QWORD *)(a1 + 272);
    v96 = *(uint64_t (***)(llvm::DiagnosticInfo *__hidden))(*(_QWORD *)(a1 + 256) + 144);
    v97 = 1;
    BYTE1(v128) = 1;
    if (*(_BYTE *)v96)
    {
      v123 = v96;
      v97 = 3;
    }
    LOBYTE(v128) = v97;
    (*(void (**)(uint64_t, uint64_t (***)(llvm::DiagnosticInfo *__hidden), uint64_t))(*(_QWORD *)v95 + 128))(v95, &v123, 1);
    if (v133 != (void (**)(llvm::raw_ostream *__hidden))&v135)
      free(v133);
    v106 = (uint64_t (**)())off_1E81A6E70;
    if (v113 == 1 && v108)
      MEMORY[0x1CAA32F9C](v108, 0x1000C8077774924);
    if (v129 != &v131)
      free(v129);
  }
  else
  {
    v12 = *(_BYTE **)(*(_QWORD *)(a1 + 256) + 136);
    v13 = 1;
    HIBYTE(v132) = 1;
    if (*v12)
    {
      v129 = v12;
      v14 = 3;
    }
    else
    {
      v14 = 1;
    }
    LOBYTE(v132) = v14;
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v9 + 128))(v9, &v129, 1);
    v25 = *(_QWORD *)(a1 + 272);
    v26 = *(_BYTE **)(*(_QWORD *)(a1 + 256) + 144);
    HIBYTE(v132) = 1;
    if (*v26)
    {
      v129 = v26;
      v13 = 3;
    }
    LOBYTE(v132) = v13;
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 128))(v25, &v129, 1);
  }
}

llvm::raw_ostream *sub_1C5FFBE64(uint64_t a1, llvm::MachineInstr *a2, llvm::raw_ostream **this, uint64_t a4, size_t a5)
{
  uint64_t v8;
  const char *v9;
  size_t v10;
  llvm::raw_ostream *result;
  int v13;
  unsigned int v14;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  _QWORD *v21;
  __int16 v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  _QWORD v32[3];

  if (a5 == 3)
  {
    if (*(_WORD *)a4 != 26997 || *(_BYTE *)(a4 + 2) != 100)
      goto LABEL_29;
    if (*(llvm::MachineInstr **)(a1 + 776) == a2)
    {
      v13 = *(_DWORD *)(*(_QWORD *)(a1 + 280) + 336);
      if (*(_DWORD *)(a1 + 784) == v13)
      {
        v14 = *(_DWORD *)(a1 + 788);
        return sub_1C5E21910((llvm::raw_ostream *)this, v14, 0, 0, 0);
      }
    }
    else
    {
      v13 = *(_DWORD *)(*(_QWORD *)(a1 + 280) + 336);
    }
    v14 = *(_DWORD *)(a1 + 788) + 1;
    *(_DWORD *)(a1 + 788) = v14;
    *(_QWORD *)(a1 + 776) = a2;
    *(_DWORD *)(a1 + 784) = v13;
    return sub_1C5E21910((llvm::raw_ostream *)this, v14, 0, 0, 0);
  }
  if (a5 != 7)
    goto LABEL_29;
  if (*(_DWORD *)a4 == 1986622064 && *(_DWORD *)(a4 + 3) == 1702125942)
    __asm { BR              X10 }
  if (*(_DWORD *)a4 != 1835888483 || *(_DWORD *)(a4 + 3) != 1953391981)
  {
LABEL_29:
    memset(v32, 0, sizeof(v32));
    v24 = 0;
    v28 = 0;
    v29 = 0;
    v23 = &unk_1E81A7208;
    v31 = v32;
    v30 = 0;
    v26 = 0;
    v27 = 0;
    v25 = 0;
    v18 = sub_1C4816AD8((llvm::raw_ostream *)&v23, "Unknown special formatter '");
    v19 = sub_1C6245B98(v18, (const void *)a4, a5);
    v20 = sub_1C4816AD8(v19, "' for machine instr: ");
    sub_1C6216740(v20, a2);
    v22 = 260;
    v21 = v31;
    llvm::report_fatal_error((uint64_t)&v21, 1);
  }
  v8 = *(_QWORD *)(a1 + 256);
  v9 = *(const char **)(v8 + 48);
  v10 = *(_QWORD *)(v8 + 56);
  result = this[4];
  if (v10 > this[3] - result)
    return llvm::raw_ostream::write((llvm::raw_ostream *)this, v9, v10);
  if (v10)
  {
    result = (llvm::raw_ostream *)memcpy(result, v9, v10);
    this[4] = (llvm::raw_ostream *)((char *)this[4] + v10);
  }
  return result;
}

_DWORD *sub_1C5FFC0D0(_DWORD *a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t i;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;

  result = sub_1C5505510(a1);
  v5 = a2 + 320;
  v6 = *(_QWORD *)(a2 + 328);
  if (v6 != v5)
  {
    v7 = 0;
    do
    {
      for (i = *(_QWORD *)(v6 + 56); i != v6 + 48; i = *(_QWORD *)(i + 8))
      {
        if ((*(_QWORD *)(*(_QWORD *)(i + 16) + 8) & 0x10) == 0)
          ++v7;
        v18 = i;
        v9 = a1[4];
        if (v9)
        {
          v10 = v9 - 1;
          v11 = v10 & ((i >> 4) ^ (i >> 9));
          result = (_DWORD *)(*(_QWORD *)a1 + 16 * v11);
          v12 = *(_QWORD *)result;
          if (i == *(_QWORD *)result)
          {
            result[2] = v7;
LABEL_23:
            if ((*(_BYTE *)i & 4) != 0)
              continue;
            goto LABEL_24;
          }
          v13 = 0;
          v14 = 1;
          while (v12 != -4096)
          {
            if (v13)
              v15 = 0;
            else
              v15 = v12 == -8192;
            if (v15)
              v13 = result;
            v16 = v11 + v14++;
            v11 = v16 & v10;
            result = (_DWORD *)(*(_QWORD *)a1 + 16 * v11);
            v12 = *(_QWORD *)result;
            if (i == *(_QWORD *)result)
              goto LABEL_22;
          }
          if (v13)
            v17 = v13;
          else
            v17 = result;
        }
        else
        {
          v17 = 0;
        }
        result = sub_1C49D7988((uint64_t)a1, (uint64_t)&v18, &v18, v17);
        *(_QWORD *)result = v18;
        result[2] = 0;
LABEL_22:
        result[2] = v7;
        if (i)
          goto LABEL_23;
LABEL_24:
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6 != v5);
  }
  return result;
}

BOOL sub_1C5FFC224(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;

  v3 = *((_DWORD *)a1 + 4);
  if (!v3)
  {
    v10 = 0;
LABEL_14:
    v15 = 0;
    return v10 < v15;
  }
  v4 = *a1;
  v5 = v3 - 1;
  v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
  v7 = *(_QWORD *)(*a1 + 16 * v6);
  if (v7 == a2)
  {
LABEL_6:
    v10 = *(_DWORD *)(v4 + 16 * v6 + 8);
  }
  else
  {
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v6 + v8++;
      v6 = v9 & v5;
      v7 = *(_QWORD *)(v4 + 16 * v6);
      if (v7 == a2)
        goto LABEL_6;
    }
    v10 = 0;
  }
  v11 = v5 & ((a3 >> 4) ^ (a3 >> 9));
  v12 = *(_QWORD *)(v4 + 16 * v11);
  if (v12 != a3)
  {
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v11 + v13++;
      v11 = v14 & v5;
      v12 = *(_QWORD *)(v4 + 16 * v11);
      if (v12 == a3)
        goto LABEL_12;
    }
    goto LABEL_14;
  }
LABEL_12:
  v15 = *(_DWORD *)(v4 + 16 * v11 + 8);
  return v10 < v15;
}

uint64_t sub_1C5FFC2EC(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *i;
  char *v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  int v25;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  _OWORD v33[5];
  void *v34;
  uint64_t v35;
  _QWORD v36[10];

  v36[9] = *MEMORY[0x1E0C80C00];
  v24 = *a2;
  v25 = 0;
  sub_1C5FFE7B4((uint64_t)&v22, (uint64_t)a1, (uint64_t *)&v24, &v25);
  v4 = v22;
  if (v23)
  {
    v8 = a1[5];
    v31 = v33;
    v32 = 0x400000000;
    v33[4] = *a2;
    v34 = v36;
    v35 = 0x400000000;
    v9 = a1[4];
    if (v9 >= v8)
    {
      v11 = a1[3];
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v11) >> 5);
      if (v12 + 1 > 0x2AAAAAAAAAAAAAALL)
        abort();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v11) >> 5);
      v14 = 2 * v13;
      if (2 * v13 <= v12 + 1)
        v14 = v12 + 1;
      if (v13 >= 0x155555555555555)
        v15 = 0x2AAAAAAAAAAAAAALL;
      else
        v15 = v14;
      v30 = a1 + 5;
      if (v15 > 0x2AAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v16 = 3 * v15;
      v17 = (char *)operator new(96 * v15);
      v18 = &v17[96 * v12];
      __p = v17;
      v27 = v18;
      *(_OWORD *)v18 = *a2;
      *((_QWORD *)v18 + 2) = v18 + 32;
      *((_QWORD *)v18 + 3) = 0x400000000;
      v28 = v18 + 96;
      v29 = &v17[32 * v16];
      sub_1C5FFEC8C(a1 + 3, &__p);
      v10 = a1[4];
      v19 = v27;
      for (i = v28; i != v19; i -= 96)
      {
        v21 = (char *)*((_QWORD *)i - 10);
        if (i - 64 != v21)
          free(v21);
      }
      if (__p)
        operator delete(__p);
    }
    else
    {
      *(_OWORD *)v9 = *a2;
      *(_QWORD *)(v9 + 16) = v9 + 32;
      *(_QWORD *)(v9 + 24) = 0x400000000;
      if ((_DWORD)v35)
        sub_1C5FFEB50(v9 + 16, (const void **)&v34);
      v10 = v9 + 96;
    }
    a1[4] = v10;
    if (v34 != v36)
      free(v34);
    if (v31 != v33)
      free(v31);
    v6 = a1[3];
    v5 = -1431655765 * ((unint64_t)(a1[4] - v6) >> 5) - 1;
    *(_DWORD *)(v4 + 16) = v5;
  }
  else
  {
    v5 = *(_DWORD *)(v22 + 16);
    v6 = a1[3];
  }
  return v6 + 96 * v5 + 16;
}

unsigned int *sub_1C5FFC558(unsigned int *result, uint64_t a2, unsigned int a3)
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t *v7;

  v5 = result;
  v6 = result[2];
  if (v6 >= result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 16);
    v6 = *(_QWORD *)v5 + 16 * v5[2];
    *(_QWORD *)v6 = a2 & 0xFFFFFFFFFFFFFFFBLL | (4 * a3);
    *(_QWORD *)(v6 + 8) = -1;
    LODWORD(v6) = v5[2];
  }
  else
  {
    v7 = (unint64_t *)(*(_QWORD *)result + 16 * v6);
    *v7 = a2 & 0xFFFFFFFFFFFFFFFBLL | (4 * a3);
    v7[1] = -1;
  }
  v5[2] = v6 + 1;
  return result;
}

uint64_t sub_1C5FFC5F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a3;
  v5 = (unsigned int *)sub_1C5FFC2EC(a1, &v10);
  v6 = v5;
  v7 = v5[2];
  v8 = *(_QWORD *)(*(_QWORD *)v5 + 16 * v7 - 16);
  if ((v8 & 4) == 0 || (v8 & 0xFFFFFFFFFFFFFFF8) != a4)
  {
    sub_1C5FFC558(v5, a4, 1u);
    v7 = v6[2];
  }
  return v7 - 1;
}

void sub_1C5FFC65C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v22;
  int8x8_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t i;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  void *v73[2];
  _BYTE v74[32];
  void *v75[2];
  _BYTE v76[16];
  void *__base;
  size_t __nel;
  _QWORD v79[6];

  v79[4] = *MEMORY[0x1E0C80C00];
  __base = v79;
  __nel = 0x400000000;
  v75[0] = v76;
  v75[1] = (void *)0x400000000;
  v73[0] = v74;
  v73[1] = (void *)0x400000000;
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v5 == v4)
    goto LABEL_114;
  v6 = a3;
  v68 = *(_QWORD *)(a1 + 32);
  do
  {
    v7 = *(unsigned int *)(v5 + 24);
    if (!(_DWORD)v7)
      goto LABEL_107;
    v8 = *(_QWORD *)(v5 + 8);
    v9 = *(_QWORD *)(*(_QWORD *)v5 - 8 * *(unsigned int *)(*(_QWORD *)v5 + 8));
    if (v8)
    {
      v10 = (int8x8_t)v6[7];
      if (!*(_QWORD *)&v10)
        goto LABEL_107;
      v11 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
      v12 = 0x9DDFEA08EB382D69 * (HIDWORD(v9) ^ (v11 >> 47) ^ v11);
      v13 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
      v14 = 0x9DDFEA08EB382D69 * (HIDWORD(v8) ^ (v13 >> 47) ^ v13);
      v15 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47)) + 0x1E1D57147BCD7FB7 * (v12 ^ (v12 >> 47));
      v16 = (uint8x8_t)vcnt_s8(v10);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] <= 1uLL)
        v17 = (*(_QWORD *)&v10 - 1) & v15;
      else
        v17 = v15 < *(_QWORD *)&v10 ? v15 : v15 % *(_QWORD *)&v10;
      v18 = *(_QWORD **)(v6[6] + 8 * v17);
      if (!v18)
        goto LABEL_107;
      v19 = (_QWORD *)*v18;
      if (!v19)
        goto LABEL_107;
      while (1)
      {
        v20 = v19[1];
        if (v20 == v15)
        {
          if (v19[2] == v9 && v19[3] == v8)
          {
            v22 = v19 + 4;
            goto LABEL_52;
          }
        }
        else
        {
          if (v16.u32[0] <= 1uLL)
          {
            v20 &= *(_QWORD *)&v10 - 1;
          }
          else if (v20 >= *(_QWORD *)&v10)
          {
            v20 %= *(_QWORD *)&v10;
          }
          if (v20 != v17)
            goto LABEL_107;
        }
        v19 = (_QWORD *)*v19;
        if (!v19)
          goto LABEL_107;
      }
    }
    v23 = (int8x8_t)v6[2];
    if (!*(_QWORD *)&v23)
      goto LABEL_107;
    v24 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
    v25 = 0x9DDFEA08EB382D69 * (HIDWORD(v9) ^ (v24 >> 47) ^ v24);
    v26 = 0x9DDFEA08EB382D69 * (v25 ^ (v25 >> 47));
    v27 = (uint8x8_t)vcnt_s8(v23);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
      v28 = v26 < *(_QWORD *)&v23 ? v26 : v26 % *(_QWORD *)&v23;
    else
      v28 = (*(_QWORD *)&v23 - 1) & v26;
    v29 = *(_QWORD **)(v6[1] + 8 * v28);
    if (!v29)
      goto LABEL_107;
    v30 = (_QWORD *)*v29;
    if (!v30)
      goto LABEL_107;
    while (1)
    {
      v31 = v30[1];
      if (v31 != v26)
        break;
      if (v30[2] == v9)
      {
        v22 = v30 + 3;
        v32 = (_BYTE *)v30[4];
        if ((*v32 & 0xFE) == 0x12)
        {
          v33 = v30[4];
          do
            v33 = *(_QWORD *)(v33 - 8 * *(unsigned int *)(v33 + 8) + 8);
          while ((*(_BYTE *)v33 & 0xFE) == 0x12);
          if (v32 == (_BYTE *)v33 && v32 == (_BYTE *)v9)
            goto LABEL_107;
        }
        else if (v32 == (_BYTE *)v9)
        {
          goto LABEL_107;
        }
LABEL_52:
        LODWORD(__nel) = 0;
        sub_1C4893E04((char *)v75, v7, 0);
        v35 = *(unsigned int *)(v5 + 24);
        if (!(_DWORD)v35)
          goto LABEL_77;
        v36 = 0;
        v37 = *(uint64_t **)(v5 + 16);
        v38 = &v37[2 * v35];
        v70 = v5;
        v71 = *((unsigned int *)v22 + 22);
        v39 = (uint64_t *)v22[10];
LABEL_54:
        v40 = *v37;
        if ((*v37 & 4) != 0)
          goto LABEL_73;
        v41 = v37[1];
        v42 = (int *)v75[0];
        if (v41 == -1)
        {
          if (*((int *)v75[0] + v36) > 0)
            goto LABEL_73;
          v43 = 0;
        }
        else
        {
          ++*((_DWORD *)v75[0] + v41);
          if (v42[v36] > 0)
            goto LABEL_73;
          v43 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 16 * v41) & 0xFFFFFFFFFFFFFFF8;
        }
        if (!v71)
        {
LABEL_69:
          v48 = __nel;
          if (__nel >= (unint64_t)HIDWORD(__nel))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v79, __nel + 1, 8);
            v48 = __nel;
          }
          v5 = v70;
          *((_QWORD *)__base + v48) = v36;
          LODWORD(__nel) = __nel + 1;
          if (v41 != -1)
            --*((_DWORD *)v75[0] + v41);
LABEL_73:
          v46 = v39;
          goto LABEL_74;
        }
        v44 = v40 & 0xFFFFFFFFFFFFFFF8;
        v45 = 16 * v71;
        v46 = v39;
        while (1)
        {
          if (v43)
          {
            if (sub_1C5FFC224(a4, v43, *v46))
              goto LABEL_69;
            v47 = v46[1];
            if (!sub_1C5FFC224(a4, v47, v43))
            {
LABEL_76:
              v71 = v45 >> 4;
              v5 = v70;
LABEL_74:
              v37 += 2;
              ++v36;
              v39 = v46;
              if (v37 == v38)
              {
LABEL_77:
                v49 = __nel;
                v4 = v68;
                v6 = a3;
                if ((_DWORD)__nel)
                {
                  v50 = *(unsigned int *)(v5 + 24);
                  if ((_DWORD)v50)
                  {
                    v51 = 0;
                    for (i = 0; i < v50; ++i)
                    {
                      if (*((int *)v75[0] + i) <= 0 && (*(_BYTE *)(*(_QWORD *)(v5 + 16) + v51) & 4) != 0)
                      {
                        if (v49 >= HIDWORD(__nel))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v79, v49 + 1, 8);
                          v49 = __nel;
                        }
                        *((_QWORD *)__base + v49) = i;
                        v49 = __nel + 1;
                        LODWORD(__nel) = __nel + 1;
                        v50 = *(unsigned int *)(v5 + 24);
                      }
                      v51 += 16;
                    }
                  }
                  else
                  {
                    v50 = 0;
                  }
                  if (v49 >= 2)
                  {
                    qsort(__base, v49, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C63BE944);
                    v50 = *(unsigned int *)(v5 + 24);
                  }
                  sub_1C4765AA4((char *)v73, v50, 0);
                  v53 = (char *)__base;
                  v54 = *(_QWORD *)__base;
                  v55 = *(unsigned int *)(v5 + 24);
                  if (*(_QWORD *)__base < v55)
                  {
                    v56 = 0;
                    v57 = (char *)__base + 8 * __nel;
                    v58 = v73[0];
                    v59 = (char *)__base;
                    do
                    {
                      if (v59 == v57)
                      {
                        v59 = v57;
                      }
                      else if (v54 == *(_QWORD *)v59)
                      {
                        ++v56;
                        v59 += 8;
                      }
                      v58[v54++] = v56;
                    }
                    while (v55 != v54);
                  }
                  if ((_DWORD)v55)
                  {
                    v60 = v73[0];
                    v61 = 16 * v55;
                    v62 = (_QWORD *)(*(_QWORD *)(v5 + 16) + 8);
                    do
                    {
                      if (*v62 != -1)
                        *v62 -= v60[*v62];
                      v62 += 2;
                      v61 -= 16;
                    }
                    while (v61);
                  }
                  if ((_DWORD)__nel)
                  {
                    v63 = 8 * __nel;
                    v64 = v53 - 8;
                    do
                    {
                      v65 = *(_QWORD *)(v5 + 16);
                      v66 = v65 + 16 * *(_QWORD *)&v64[v63];
                      v67 = v65 + 16 * v55;
                      if (v67 != v66 + 16)
                      {
                        memmove((void *)v66, (const void *)(v66 + 16), v67 - (v66 + 16));
                        LODWORD(v55) = *(_DWORD *)(v5 + 24);
                      }
                      LODWORD(v55) = v55 - 1;
                      *(_DWORD *)(v5 + 24) = v55;
                      v63 -= 8;
                    }
                    while (v63);
                  }
                }
                goto LABEL_107;
              }
              goto LABEL_54;
            }
          }
          else
          {
            v47 = v46[1];
          }
          if (sub_1C5FFC224(a4, v44, v47))
            goto LABEL_76;
          v46 += 2;
          v45 -= 16;
          if (!v45)
            goto LABEL_69;
        }
      }
LABEL_39:
      v30 = (_QWORD *)*v30;
      if (!v30)
        goto LABEL_107;
    }
    if (v27.u32[0] <= 1uLL)
    {
      v31 &= *(_QWORD *)&v23 - 1;
    }
    else if (v31 >= *(_QWORD *)&v23)
    {
      v31 %= *(_QWORD *)&v23;
    }
    if (v31 == v28)
      goto LABEL_39;
LABEL_107:
    v5 += 96;
  }
  while (v5 != v4);
  if (v73[0] != v74)
    free(v73[0]);
LABEL_114:
  if (v75[0] != v76)
    free(v75[0]);
  if (__base != v79)
    free(__base);
}

uint64_t sub_1C5FFCCF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(_QWORD **)a2;
  v4 = 16 * v2;
  while (1)
  {
    if ((*v3 & 4) == 0)
    {
      v5 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (*(_BYTE *)v5 || *(_DWORD *)(v5 + 4))
        break;
    }
    v3 += 2;
    v4 -= 16;
    if (!v4)
      return 0;
  }
  return 1;
}

void sub_1C5FFCD40(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  void **v51;
  uint64_t v52;
  char **v53;
  char *v54;
  BOOL v55;
  void **v56;
  unsigned int v57;
  char **v58;
  unsigned int *v59;
  unsigned int v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t **v64;
  uint64_t **v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _WORD *v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  BOOL v80;
  int v81;
  uint64_t **v82;
  unsigned int v83;
  unsigned int v84;
  void **v85;
  BOOL v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t **v91;
  unsigned int *v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned __int16 *v98;
  int v99;
  int v100;
  _QWORD *v101;
  unsigned __int16 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t *v107;
  uint64_t **j;
  uint64_t **v109;
  unsigned int v110;
  uint64_t *v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t **v115;
  _QWORD *v116;
  uint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  _QWORD *v129;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  int v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t *v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t **v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  void *v156[2];
  _BYTE v157[136];
  uint64_t v158;
  void **v159;
  uint64_t v160;
  _BYTE v161[16];
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16)) + 88);
  v135 = a2;
  v134 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 552))(a2, a1);
  v151 = 0;
  v152 = 0;
  v149 = 0;
  v150 = &v151;
  v147 = (uint64_t *)&v148;
  v148 = 0;
  v8 = *(_QWORD **)(a1 + 328);
  v131 = (_QWORD *)(a1 + 320);
  if (v8 == (_QWORD *)(a1 + 320))
  {
    v129 = 0;
    goto LABEL_229;
  }
  v138 = v7;
  do
  {
    v9 = v8 + 6;
    v132 = v8;
    v10 = v8[7];
    v133 = v8 + 6;
    while ((_QWORD *)v10 != v9)
    {
      v11 = **(unsigned __int16 **)(v10 + 16);
      if ((v11 - 13) > 1)
      {
        if (v11 == 17)
        {
          v15 = *(_QWORD *)(v10 + 56);
          if (*(_DWORD *)(v15 + 8) == 2)
            v16 = *(void **)(v15 - 8);
          else
            v16 = 0;
          v156[0] = *(void **)(*(_QWORD *)(v10 + 32) + 16);
          v156[1] = v16;
          *(_QWORD *)sub_1C63BE504(a4, (__int128 *)v156) = v10;
        }
      }
      else
      {
        v12 = v11 != 14;
        v13 = *(_QWORD *)(v10 + 56);
        if (*(_DWORD *)(v13 + 8) == 2)
          v14 = *(void **)(v13 - 8);
        else
          v14 = 0;
        v17 = *(void **)(*(_QWORD *)(v10 + 32) + (v12 << 6) + 16);
        *(_QWORD *)&v154 = v17;
        *((_QWORD *)&v154 + 1) = v14;
        v156[0] = v17;
        v156[1] = v14;
        v18 = sub_1C5FFC2EC(a3, (__int128 *)v156);
        v19 = (unsigned int *)v18;
        v20 = *(unsigned int *)(v18 + 8);
        if (!(_DWORD)v20
          || (v21 = *(_QWORD *)v18 + 16 * v20, v22 = *(_QWORD *)(v21 - 16), (v22 & 4) != 0)
          || *(_QWORD *)(v21 - 8) != -1
          || !llvm::MachineInstr::isIdenticalTo(v22 & 0xFFFFFFFFFFFFFFF8, v10, 0))
        {
          sub_1C5FFC558(v19, v10, 0);
          v136 = v19[2] - 1;
          v153 = v136;
          v158 = 1;
          for (i = 8; i != 40; i += 8)
            *(_DWORD *)((char *)&v158 + i) = -1;
          v156[0] = v157;
          v156[1] = (void *)0x400000000;
          v24 = 96;
          if (**(_WORD **)(v10 + 16) == 14)
            v24 = 32;
          v139 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + v24 + 16);
          v140 = (unint64_t)v14;
          v25 = sub_1C5FFE31C(&v147, (unint64_t)v17, (unint64_t)v14, &v154);
          v26 = v25[11];
          v141 = v26 == 0;
          v27 = 9;
          if (!v26)
            v27 = 6;
          v28 = v25[v27];
          v144 = (unint64_t)v17;
          if (v26)
          {
            v29 = 0;
            v30 = (uint64_t)(v25 + 10);
          }
          else
          {
            v30 = (uint64_t)&v25[6][*((unsigned int *)v25 + 14)];
            v29 = 1;
          }
          v137 = (uint64_t *)v30;
          v31 = v29 == v141 && v28 == (uint64_t *)v30;
          if (!v31)
          {
            while (1)
            {
              v32 = v28 + 4;
              if (!v26)
                v32 = v28;
              v33 = *v32;
              *(_QWORD *)&v155 = v144;
              *((_QWORD *)&v155 + 1) = v140;
              v34 = (uint64_t *)sub_1C5FFC2EC(a3, &v155);
              v35 = *v34;
              v36 = *(_QWORD *)(*v34 + 16 * v33) & 0xFFFFFFFFFFFFFFF8;
              v37 = 96;
              if (**(_WORD **)(v36 + 16) == 14)
                v37 = 32;
              v38 = sub_1C520AAB4(v139, *(_QWORD *)(*(_QWORD *)(v36 + 32) + v37 + 16));
              if (v38)
              {
                v39 = LODWORD(v156[1]);
                if (LODWORD(v156[1]) >= (unint64_t)HIDWORD(v156[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v156, (uint64_t)v157, LODWORD(v156[1]) + 1, 8);
                  v39 = LODWORD(v156[1]);
                }
                *((_QWORD *)v156[0] + v39) = v33;
                ++LODWORD(v156[1]);
                *(_QWORD *)(v35 + 16 * v33 + 8) = v136;
              }
              v7 = v138;
              if (llvm::MachineInstr::isDebugEntryValue((llvm::MachineInstr *)v36))
                goto LABEL_47;
              v40 = *(_QWORD *)(v36 + 32);
              if (**(_WORD **)(v36 + 16) != 14)
                break;
              v41 = *(unsigned int *)(v36 + 40);
              if ((_DWORD)v41 != 2)
              {
                v42 = v40 + 32 * v41;
                v40 += 64;
                goto LABEL_42;
              }
LABEL_47:
              if (v26)
              {
                v45 = (uint64_t *)v28[1];
                v46 = v28;
                if (v45)
                {
                  do
                  {
                    v28 = v45;
                    v45 = (uint64_t *)*v45;
                  }
                  while (v45);
                }
                else
                {
                  do
                  {
                    v28 = (uint64_t *)v46[2];
                    v31 = *v28 == (_QWORD)v46;
                    v46 = v28;
                  }
                  while (!v31);
                }
              }
              else
              {
                ++v28;
              }
              if (v29 == v141 && v28 == v137)
                goto LABEL_57;
            }
            v42 = v40 + 32;
LABEL_42:
            v43 = !v38;
            do
            {
              if (!*(_BYTE *)v40 && *(_DWORD *)(v40 + 4))
              {
                LODWORD(v155) = *(_DWORD *)(v40 + 4);
                v44 = sub_1C5FFE428(&v158, (int *)&v155);
                *(_BYTE *)(v44 + 4) |= v43;
              }
              v40 += 32;
            }
            while (v40 != v42);
            goto LABEL_47;
          }
LABEL_57:
          if (llvm::MachineInstr::isDebugEntryValue((llvm::MachineInstr *)v10))
          {
            v47 = v140;
            v48 = v144;
          }
          else
          {
            v49 = *(unsigned int *)(v10 + 40);
            if (**(_WORD **)(v10 + 16) != 14)
              v49 = 1;
            v47 = v140;
            v48 = v144;
            if (2 * (**(_WORD **)(v10 + 16) == 14) != v49)
            {
              v103 = *(_QWORD *)(v10 + 32);
              v104 = v103 + 32 * v49;
              v105 = v103 + ((unint64_t)(**(_WORD **)(v10 + 16) == 14) << 6);
              v143 = v104;
              do
              {
                if (!*(_BYTE *)v105)
                {
                  v106 = *(_DWORD *)(v105 + 4);
                  if (v106)
                  {
                    if (!sub_1C5FFE50C((uint64_t)&v158, *(_DWORD *)(v105 + 4), &v155))
                    {
                      v146 = v48;
                      v107 = v151;
                      for (j = &v151; ; v107 = *j)
                      {
                        v109 = j;
                        if (!v107)
                          break;
                        while (1)
                        {
                          j = (uint64_t **)v107;
                          v110 = *((_DWORD *)v107 + 8);
                          if (v110 > v106)
                            break;
                          if (v110 >= v106)
                            goto LABEL_182;
                          v107 = j[1];
                          if (!v107)
                          {
                            v109 = j + 1;
                            goto LABEL_179;
                          }
                        }
                      }
LABEL_179:
                      v111 = (uint64_t *)j;
                      j = (uint64_t **)operator new(0x48uLL);
                      *((_DWORD *)j + 8) = v106;
                      j[5] = (uint64_t *)(j + 7);
                      j[6] = (uint64_t *)0x100000000;
                      *j = 0;
                      j[1] = 0;
                      j[2] = v111;
                      *v109 = (uint64_t *)j;
                      v112 = (uint64_t *)j;
                      if (*v150)
                      {
                        v150 = (uint64_t **)*v150;
                        v112 = *v109;
                      }
                      sub_1C4768E74(v151, v112);
                      ++v152;
                      v7 = v138;
LABEL_182:
                      v113 = *((unsigned int *)j + 12);
                      if (v113 >= *((unsigned int *)j + 13))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(j + 5), (uint64_t)(j + 7), v113 + 1, 16);
                        v113 = *((unsigned int *)j + 12);
                      }
                      v114 = &j[5][2 * v113];
                      *v114 = v146;
                      v114[1] = v47;
                      ++*((_DWORD *)j + 12);
                      v47 = *((_QWORD *)&v154 + 1);
                      v48 = v154;
                      v104 = v143;
                    }
                    v115 = sub_1C5FFE31C(&v147, v48, v47, &v154);
                    sub_1C5FFE064(v115 + 6, (unint64_t *)&v153);
                    LODWORD(v155) = v106;
                    *(_BYTE *)(sub_1C5FFE428(&v158, (int *)&v155) + 4) = 1;
                  }
                }
                v105 += 32;
              }
              while (v105 != v104);
            }
          }
          v50 = v158;
          if (v158 <= 1)
          {
            if ((_DWORD)v158)
            {
              v51 = (void **)&v159;
              v52 = 4;
            }
            else
            {
              v51 = v159;
              v52 = v160;
            }
            v53 = (char **)&v51[v52];
            v54 = (char *)v53;
LABEL_66:
            v55 = v50 == 0;
            if (v50)
              v56 = (void **)&v159;
            else
              v56 = v159;
            v57 = v160;
            if (!v55)
              v57 = 4;
            v58 = (char **)&v56[v57];
LABEL_72:
            while (v53 != v58)
            {
              if ((*((_BYTE *)v53 + 4) & 1) == 0)
                sub_1C5FFE15C((uint64_t)&v150, *(_DWORD *)v53, v48, v47);
              v59 = (unsigned int *)(v53 + 1);
              while (v59 != (unsigned int *)v54)
              {
                v60 = *v59;
                v59 += 2;
                if (v60 <= 0xFFFFFFFD)
                {
                  v53 = (char **)(v59 - 2);
                  goto LABEL_72;
                }
              }
              v53 = (char **)v54;
            }
            if (LODWORD(v156[1]))
            {
              v61 = (unint64_t *)v156[0];
              v62 = 8 * LODWORD(v156[1]);
              do
              {
                v63 = *v61++;
                v64 = sub_1C5FFE31C(&v147, v48, v47, &v154);
                sub_1C5FFE204((uint64_t)(v64 + 6), v63);
                v62 -= 8;
              }
              while (v62);
            }
            v65 = sub_1C5FFE31C(&v147, v48, v47, &v154);
            sub_1C5FFE064(v65 + 6, (unint64_t *)&v153);
            if (v156[0] != v157)
              free(v156[0]);
            if ((v158 & 1) == 0)
              MEMORY[0x1CAA32FB4](v159, 4);
            goto LABEL_87;
          }
          v54 = (char *)&v162;
          v53 = (char **)&v159;
          if ((v158 & 1) == 0)
          {
            v53 = (char **)v159;
            if (!(_DWORD)v160)
            {
              v50 = 0;
              v54 = (char *)v159;
              v7 = v138;
              goto LABEL_66;
            }
            v54 = (char *)&v159[v160];
            v7 = v138;
          }
          v50 = v158 & 1;
          while (*(_DWORD *)v53 >= 0xFFFFFFFE)
          {
            if (++v53 == (char **)v54)
            {
              v53 = (char **)v54;
              goto LABEL_66;
            }
          }
          goto LABEL_66;
        }
      }
LABEL_87:
      if ((*(_BYTE *)(*(_QWORD *)(v10 + 16) + 8) & 0x10) != 0 || (v66 = *(unsigned int *)(v10 + 40), !(_DWORD)v66))
      {
LABEL_158:
        if ((*(_BYTE *)v10 & 4) == 0)
          goto LABEL_161;
        goto LABEL_162;
      }
      v67 = *(_QWORD *)(v10 + 32);
      v145 = v67 + 32 * v66;
      do
      {
        if ((*(_DWORD *)v67 & 0x10000FF) != 0x1000000 || (v68 = *(_DWORD *)(v67 + 4)) == 0)
        {
          if (*(_DWORD *)v67 != 12)
            goto LABEL_148;
          v156[0] = v157;
          v156[1] = (void *)0x2000000000;
          v82 = v150;
          if (v150 == &v151)
            goto LABEL_148;
          while (2)
          {
            v83 = *((_DWORD *)v82 + 8);
            LODWORD(v158) = v83;
            v159 = (void **)v161;
            v160 = 0x100000000;
            v84 = *((_DWORD *)v82 + 12);
            v85 = (void **)(v82 + 5);
            if (v84)
              v86 = &v159 == (void ***)v85;
            else
              v86 = 1;
            if (v86)
              goto LABEL_121;
            if (v84 < 2)
            {
              v87 = *((unsigned int *)v82 + 12);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v159, (uint64_t)v161, *((unsigned int *)v82 + 12), 16);
              v87 = *((unsigned int *)v82 + 12);
              if (!(_DWORD)v87)
              {
LABEL_120:
                LODWORD(v160) = v84;
                v83 = v158;
LABEL_121:
                v88 = v83 == v7 || v83 - 1 > 0x3FFFFFFE;
                if (!v88 && ((*(_DWORD *)(*(_QWORD *)(v67 + 16) + 4 * (v83 >> 5)) >> v83) & 1) == 0)
                {
                  v89 = LODWORD(v156[1]);
                  if (LODWORD(v156[1]) >= (unint64_t)HIDWORD(v156[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v156, (uint64_t)v157, LODWORD(v156[1]) + 1, 4);
                    v89 = LODWORD(v156[1]);
                  }
                  *((_DWORD *)v156[0] + v89) = v83;
                  ++LODWORD(v156[1]);
                }
                if (v159 != (void **)v161)
                  free(v159);
                v90 = v82[1];
                if (v90)
                {
                  do
                  {
                    v91 = (uint64_t **)v90;
                    v90 = (uint64_t *)*v90;
                  }
                  while (v90);
                }
                else
                {
                  do
                  {
                    v91 = (uint64_t **)v82[2];
                    v31 = *v91 == (uint64_t *)v82;
                    v82 = v91;
                  }
                  while (!v31);
                }
                v82 = v91;
                if (v91 == &v151)
                {
                  v92 = (unsigned int *)v156[0];
                  if (LODWORD(v156[1]))
                  {
                    v93 = 4 * LODWORD(v156[1]);
                    do
                    {
                      v94 = *v92++;
                      sub_1C5FFDA38((uint64_t)&v150, v94, a3, &v147, v10);
                      v93 -= 4;
                    }
                    while (v93);
                    v92 = (unsigned int *)v156[0];
                  }
                  if (v92 != (unsigned int *)v157)
                    free(v92);
                  goto LABEL_148;
                }
                continue;
              }
            }
            break;
          }
          memcpy(v159, *v85, 16 * v87);
          goto LABEL_120;
        }
        v69 = *(_WORD *)(v10 + 44);
        v70 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8);
        if ((v69 & 0xC) != 0 && (v69 & 4) == 0)
        {
          v95 = v10;
          if ((v70 & 0x80) != 0)
          {
LABEL_97:
            if (v68 == v7)
              goto LABEL_148;
            goto LABEL_98;
          }
          while ((*(_WORD *)(v95 + 44) & 8) != 0)
          {
            v95 = *(_QWORD *)(v95 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v95 + 16) + 8) & 0x80) != 0)
              goto LABEL_97;
          }
        }
        else if ((v70 & 0x80) != 0)
        {
          goto LABEL_97;
        }
LABEL_98:
        if ((v68 & 0x80000000) != 0)
        {
          sub_1C5FFDA38((uint64_t)&v150, v68, a3, &v147, v10);
        }
        else if (v68 != v134 || (v69 & 3) == 0)
        {
          v72 = v135[1];
          v73 = ((unint64_t)*(unsigned int *)(v72 + 24 * v68 + 16) >> 3) & 0x1FFFFFFE;
          v75 = v135[6];
          v74 = v135[7];
          v76 = (_WORD *)(v74 + v73 + 2);
          v77 = *(unsigned __int16 *)(v74 + v73) + (*(_DWORD *)(v72 + 24 * v68 + 16) & 0xF) * v68;
          do
          {
            v78 = 4 * (unsigned __int16)v77;
            v79 = *(unsigned __int16 *)(v75 + v78);
            if (*(_WORD *)(v75 + v78))
              v80 = v74 == 0;
            else
              v80 = 1;
            if (!v80)
            {
              v96 = *(unsigned __int16 *)(v75 + 4 * (unsigned __int16)v77 + 2) << 16;
              v97 = (unsigned int *)(v72 + 24 * *(unsigned __int16 *)(v75 + 4 * (unsigned __int16)v77) + 8);
              v142 = v77;
              while (1)
              {
                v98 = (unsigned __int16 *)(v74 + 2 * *v97);
                do
                {
                  sub_1C5FFDA38((uint64_t)&v150, (unsigned __int16)v79, a3, &v147, v10);
                  v99 = *v98++;
                  v79 += v99;
                }
                while (v99);
                v79 = HIWORD(v96);
                if (HIWORD(v96))
                {
                  v96 >>= 16;
                  v101 = v135;
                }
                else
                {
                  v100 = (unsigned __int16)*v76;
                  if (!*v76)
                    goto LABEL_148;
                  ++v76;
                  v101 = v135;
                  v142 += v100;
                  v102 = (unsigned __int16 *)(v135[6] + 4 * (unsigned __int16)v142);
                  v79 = *v102;
                  v96 = v102[1] << 16;
                }
                v74 = v101[7];
                v97 = (unsigned int *)(v101[1] + 24 * v79 + 8);
              }
            }
            v81 = (unsigned __int16)*v76++;
            v77 += v81;
          }
          while (v81);
        }
LABEL_148:
        v67 += 32;
      }
      while (v67 != v145);
      if (v10)
        goto LABEL_158;
LABEL_161:
      while ((*(_WORD *)(v10 + 44) & 8) != 0)
        v10 = *(_QWORD *)(v10 + 8);
LABEL_162:
      v10 = *(_QWORD *)(v10 + 8);
      v9 = v133;
    }
    v116 = v132;
    if (v133 != (_QWORD *)(*v133 & 0xFFFFFFFFFFFFFFF8) && v132 != (_QWORD *)*v131)
    {
      v117 = v147;
      if (v147 != (uint64_t *)&v148)
      {
        do
        {
          if (*((_DWORD *)v117 + 14) || v117[11])
          {
            v118 = *v133 & 0xFFFFFFFFFFFFFFF8;
            if (!v118 || (*(_BYTE *)v118 & 4) == 0)
            {
              while ((*(_WORD *)(v118 + 44) & 4) != 0)
                v118 = *(_QWORD *)v118 & 0xFFFFFFFFFFFFFFF8;
            }
            v119 = sub_1C5FFC5F0(a3, v117[4], v117[5], v118);
            v120 = v117[11];
            if (v120)
            {
              v121 = v117 + 10;
              v122 = (uint64_t *)v117[9];
            }
            else
            {
              v122 = (uint64_t *)v117[6];
              v121 = &v122[*((unsigned int *)v117 + 14)];
            }
            if (v122 != v121)
            {
              do
              {
                v123 = v122 + 4;
                if (!v120)
                  v123 = v122;
                v124 = *v123;
                *(_OWORD *)v156 = *((_OWORD *)v117 + 2);
                *(_QWORD *)(*(_QWORD *)sub_1C5FFC2EC(a3, (__int128 *)v156) + 16 * v124 + 8) = v119;
                if (v120)
                {
                  v125 = (uint64_t *)v122[1];
                  if (v125)
                  {
                    do
                    {
                      v126 = v125;
                      v125 = (uint64_t *)*v125;
                    }
                    while (v125);
                  }
                  else
                  {
                    do
                    {
                      v126 = (uint64_t *)v122[2];
                      v31 = *v126 == (_QWORD)v122;
                      v122 = v126;
                    }
                    while (!v31);
                  }
                }
                else
                {
                  v126 = v122 + 1;
                }
                v122 = v126;
              }
              while (v126 != v121);
            }
          }
          v127 = (uint64_t *)v117[1];
          if (v127)
          {
            do
            {
              v128 = v127;
              v127 = (uint64_t *)*v127;
            }
            while (v127);
          }
          else
          {
            do
            {
              v128 = (uint64_t *)v117[2];
              v31 = *v128 == (_QWORD)v117;
              v117 = v128;
            }
            while (!v31);
          }
          v117 = v128;
        }
        while (v128 != (uint64_t *)&v148);
      }
      sub_1C5FFED58(v148);
      v148 = 0;
      v149 = 0;
      v147 = (uint64_t *)&v148;
      sub_1C4DC0F58(v151);
      v151 = 0;
      v152 = 0;
      v150 = &v151;
      v116 = v132;
    }
    v8 = (_QWORD *)v116[1];
  }
  while (v8 != v131);
  v129 = v148;
LABEL_229:
  sub_1C5FFED58(v129);
  sub_1C4DC0F58(v151);
}

void sub_1C5FFDA38(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t **a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  BOOL v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unsigned int *v48;
  unsigned int v49;
  _QWORD *v50;
  _QWORD **v51;
  _QWORD **v52;
  _QWORD *v53;
  unsigned int v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t **v64;
  unsigned int *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  int v77;
  __int128 v78;
  __int128 v79;
  void *v80;
  uint64_t v81;
  _BYTE v82[16];
  void *v83;
  uint64_t v84;
  _BYTE v85[16];
  _QWORD **v86;
  _QWORD *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  _BYTE v91[16];
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t *v95;
  uint64_t v96;
  _QWORD v97[6];

  v97[4] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = a4;
    v7 = (uint64_t **)a1;
    v8 = a1 + 8;
    do
    {
      v9 = *(_DWORD *)(v5 + 32);
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v5;
      else
        v11 = (uint64_t *)(v5 + 8);
      if (v10)
        v8 = v5;
      v5 = *v11;
    }
    while (*v11);
    if (v8 != a1 + 8 && *(_DWORD *)(v8 + 32) <= a2)
    {
      v12 = *(unsigned int *)(v8 + 48);
      if ((_DWORD)v12)
      {
        v13 = *(unint64_t **)(v8 + 40);
        v68 = (uint64_t *)&v13[2 * v12];
        v69 = v8;
        while (1)
        {
          v80 = v82;
          v81 = 0x400000000;
          v15 = *v13;
          v14 = v13[1];
          v73 = (uint64_t *)v13;
          v16 = *(_DWORD *)(v8 + 32);
          *(_QWORD *)&v78 = v15;
          *((_QWORD *)&v78 + 1) = v14;
          v74 = sub_1C5FFC5F0(a3, v15, v14, a5);
          v95 = v97;
          v96 = 0x400000000;
          v89 = v91;
          v90 = 0x400000000;
          v93 = 0;
          v94 = 0;
          v92 = (char *)&v93;
          v83 = v85;
          v84 = 0x400000000;
          v87 = 0;
          v88 = 0;
          v86 = &v87;
          v17 = sub_1C5FFE31C(v6, v15, v14, &v78);
          v18 = v17[11];
          v77 = v18 == 0;
          v19 = 9;
          if (v18)
          {
            v21 = 0;
            v20 = (uint64_t)(v17 + 10);
          }
          else
          {
            v19 = 6;
            v20 = (uint64_t)&v17[6][*((unsigned int *)v17 + 14)];
            v21 = 1;
          }
          v22 = v17[v19];
          v75 = (uint64_t *)v20;
          v23 = v21 == v77 && v22 == (uint64_t *)v20;
          if (!v23)
          {
            do
            {
              v24 = v22 + 4;
              if (!v18)
                v24 = v22;
              v25 = *v24;
              *(_QWORD *)&v79 = v15;
              *((_QWORD *)&v79 + 1) = v14;
              v26 = *(_QWORD *)sub_1C5FFC2EC(a3, &v79);
              v27 = (_QWORD *)(v26 + 16 * v25);
              if (!llvm::MachineInstr::isDebugEntryValue((llvm::MachineInstr *)(*v27 & 0xFFFFFFFFFFFFFFF8)))
              {
                v28 = *v27 & 0xFFFFFFFFFFFFFFF8;
                v29 = **(unsigned __int16 **)(v28 + 16);
                v30 = *(_QWORD *)(v28 + 32);
                if (v29 != 14)
                {
                  v33 = v30 + 32;
                  v32 = *(_QWORD *)(v28 + 32);
                  goto LABEL_28;
                }
                v31 = *(unsigned int *)(v28 + 40);
                if ((_DWORD)v31 != 2)
                {
                  v32 = v30 + 64;
                  v33 = v30 + 32 * v31;
LABEL_28:
                  while (*(_BYTE *)v32 || *(_DWORD *)(v32 + 4) != v16)
                  {
                    v32 += 32;
                    if (v32 == v33)
                    {
                      if (v29 == 14)
                      {
                        v34 = *(unsigned int *)(v28 + 40);
                        if ((_DWORD)v34 == 2)
                          goto LABEL_53;
                        v35 = v30 + 32 * v34;
                        v30 += 64;
                      }
                      else
                      {
                        v35 = v30 + 32;
                      }
                      do
                      {
                        if (!*(_BYTE *)v30 && *(_DWORD *)(v30 + 4))
                        {
                          LODWORD(v79) = *(_DWORD *)(v30 + 4);
                          sub_1C4854E58((uint64_t)&v83, (unsigned int *)&v79);
                        }
                        v30 += 32;
                      }
                      while (v30 != v35);
                      goto LABEL_53;
                    }
                  }
                  v36 = v96;
                  if (v96 >= (unint64_t)HIDWORD(v96))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, (uint64_t)v97, v96 + 1, 8);
                    v36 = v96;
                  }
                  v95[v36] = v25;
                  LODWORD(v96) = v96 + 1;
                  *(_QWORD *)(v26 + 16 * v25 + 8) = v74;
                  v37 = *v27 & 0xFFFFFFFFFFFFFFF8;
                  v38 = *(_QWORD *)(v37 + 32);
                  if (**(_WORD **)(v37 + 16) == 14)
                  {
                    v39 = *(unsigned int *)(v37 + 40);
                    if ((_DWORD)v39 == 2)
                      goto LABEL_53;
                    v40 = v38 + 32 * v39;
                    v38 += 64;
                  }
                  else
                  {
                    v40 = v38 + 32;
                  }
                  do
                  {
                    if (!*(_BYTE *)v38)
                    {
                      v41 = *(_DWORD *)(v38 + 4);
                      if (v41 && v41 != v16)
                      {
                        LODWORD(v79) = *(_DWORD *)(v38 + 4);
                        sub_1C4854E58((uint64_t)&v89, (unsigned int *)&v79);
                      }
                    }
                    v38 += 32;
                  }
                  while (v38 != v40);
                }
              }
LABEL_53:
              if (v18)
              {
                v43 = (uint64_t *)v22[1];
                v44 = v22;
                if (v43)
                {
                  do
                  {
                    v22 = v43;
                    v43 = (uint64_t *)*v43;
                  }
                  while (v43);
                }
                else
                {
                  do
                  {
                    v22 = (uint64_t *)v44[2];
                    v23 = *v22 == (_QWORD)v44;
                    v44 = v22;
                  }
                  while (!v23);
                }
              }
              else
              {
                ++v22;
              }
            }
            while (v21 != v77 || v22 != v75);
          }
          v45 = v94;
          v46 = v94 ? v92 : v89;
          v47 = v94 ? (char *)&v93 : &v89[4 * v90];
          if (v46 != v47)
            break;
LABEL_99:
          v6 = a4;
          if ((_DWORD)v96)
          {
            v61 = v95;
            v62 = 8 * v96;
            do
            {
              v63 = *v61++;
              v64 = sub_1C5FFE31C(a4, v15, v14, &v78);
              sub_1C5FFE204((uint64_t)(v64 + 6), v63);
              v62 -= 8;
            }
            while (v62);
          }
          sub_1C47655E8((uint64_t)&v86, v87);
          if (v83 != v85)
            free(v83);
          sub_1C47655E8((uint64_t)&v92, v93);
          v7 = (uint64_t **)a1;
          if (v89 != v91)
            free(v89);
          if (v95 != v97)
            free(v95);
          v65 = (unsigned int *)v80;
          if ((_DWORD)v81)
          {
            v66 = 4 * v81;
            do
            {
              v67 = *v65++;
              sub_1C5FFE15C(a1, v67, *v73, v73[1]);
              v66 -= 4;
            }
            while (v66);
            v65 = (unsigned int *)v80;
          }
          if (v65 != (unsigned int *)v82)
            free(v65);
          v13 = (unint64_t *)(v73 + 2);
          v8 = v69;
          if (v73 + 2 == v68)
            goto LABEL_115;
        }
        while (1)
        {
          v48 = (unsigned int *)(v46 + 28);
          if (!v45)
            v48 = (unsigned int *)v46;
          v49 = *v48;
          if (v88)
          {
            v50 = v87;
            v51 = &v87;
            if (v87)
            {
              do
              {
                v52 = v51;
                v53 = v50;
                v54 = *((_DWORD *)v50 + 7);
                v55 = v50 + 1;
                if (v54 >= v49)
                {
                  v55 = v53;
                  v51 = (_QWORD **)v53;
                }
                v50 = (_QWORD *)*v55;
              }
              while (v50);
              if (v51 != &v87)
              {
                if (v54 >= v49)
                  v52 = (_QWORD **)v53;
                if (v49 >= *((_DWORD *)v52 + 7))
                  goto LABEL_81;
              }
            }
          }
          else if ((_DWORD)v84)
          {
            v58 = v83;
            v59 = 4 * v84;
            while (*v58 != v49)
            {
              ++v58;
              v59 -= 4;
              if (!v59)
                goto LABEL_94;
            }
            if (v59)
            {
LABEL_81:
              if (v45)
                goto LABEL_82;
              goto LABEL_97;
            }
          }
LABEL_94:
          v60 = v81;
          if (v81 >= (unint64_t)HIDWORD(v81))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v81 + 1, 4);
            v60 = v81;
          }
          *((_DWORD *)v80 + v60) = v49;
          LODWORD(v81) = v81 + 1;
          if (v45)
          {
LABEL_82:
            v56 = (char *)*((_QWORD *)v46 + 1);
            if (v56)
            {
              do
              {
                v57 = v56;
                v56 = *(char **)v56;
              }
              while (v56);
            }
            else
            {
              do
              {
                v57 = (char *)*((_QWORD *)v46 + 2);
                v23 = *(_QWORD *)v57 == (_QWORD)v46;
                v46 = v57;
              }
              while (!v23);
            }
            goto LABEL_98;
          }
LABEL_97:
          v57 = v46 + 4;
LABEL_98:
          v46 = v57;
          if (v57 == v47)
            goto LABEL_99;
        }
      }
LABEL_115:
      sub_1C5FFE724(v7, (uint64_t *)v8);
    }
  }
}

uint64_t **sub_1C5FFE064(uint64_t **result, unint64_t *a2)
{
  uint64_t **v3;
  uint64_t **v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = result;
  if (result[5])
  {
    v4 = result + 3;
    v5 = *a2;
    return (uint64_t **)sub_1C4EE51A0(v4, v5, v5);
  }
  v6 = *result;
  v7 = *((unsigned int *)result + 2);
  v8 = *a2;
  if ((_DWORD)v7)
  {
    v9 = 8 * v7;
    while (*v6 != v8)
    {
      ++v6;
      v9 -= 8;
      if (!v9)
        goto LABEL_12;
    }
    if (v9)
      return result;
    do
    {
LABEL_12:
      v11 = (*v3)[v7 - 1];
      sub_1C4EE51A0(v3 + 3, v11, v11);
      LODWORD(v7) = *((_DWORD *)v3 + 2) - 1;
      *((_DWORD *)v3 + 2) = v7;
    }
    while ((_DWORD)v7);
    v5 = *a2;
    v4 = v3 + 3;
    return (uint64_t **)sub_1C4EE51A0(v4, v5, v5);
  }
  if (*((_DWORD *)result + 3))
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 2), v7 + 1, 8);
    v6 = *v3;
    v10 = *((unsigned int *)v3 + 2);
  }
  v6[v10] = v8;
  ++*((_DWORD *)v3 + 2);
  return result;
}

void sub_1C5FFE15C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v15;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_12;
  v6 = a1 + 8;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == a1 + 8 || *(_DWORD *)(v6 + 32) > a2)
LABEL_12:
    v6 = a1 + 8;
  v10 = *(_QWORD **)(v6 + 40);
  v11 = *(unsigned int *)(v6 + 48);
  v12 = &v10[2 * v11];
  if ((_DWORD)v11)
  {
    v13 = 16 * v11;
    while (*v10 != a3 || v10[1] != a4)
    {
      v10 += 2;
      v13 -= 16;
      if (!v13)
      {
        v10 = v12;
        break;
      }
    }
  }
  while (1)
  {
    v10 += 2;
    if (v10 == v12)
      break;
    *((_OWORD *)v10 - 1) = *(_OWORD *)v10;
  }
  v15 = v11 - 1;
  *(_DWORD *)(v6 + 48) = v15;
  if (!v15)
    sub_1C5FFE724((uint64_t **)a1, (uint64_t *)v6);
}

void sub_1C5FFE204(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  size_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  BOOL v19;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = (uint64_t *)(a1 + 32);
    v4 = *(uint64_t **)(a1 + 32);
    if (v4)
    {
      v6 = *(_QWORD **)(a1 + 32);
      v7 = (uint64_t *)(a1 + 32);
      do
      {
        v8 = v6[4];
        v9 = v8 >= a2;
        if (v8 >= a2)
          v10 = v6;
        else
          v10 = v6 + 1;
        if (v9)
          v7 = v6;
        v6 = (_QWORD *)*v10;
      }
      while (*v10);
      if (v7 != v5 && v7[4] <= a2)
      {
        v11 = (uint64_t *)v7[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          v18 = v7;
          do
          {
            v12 = (uint64_t *)v18[2];
            v19 = *v12 == (_QWORD)v18;
            v18 = v12;
          }
          while (!v19);
        }
        if (*(uint64_t **)(a1 + 24) == v7)
          *(_QWORD *)(a1 + 24) = v12;
        *(_QWORD *)(a1 + 40) = v3 - 1;
        sub_1C485B6E0(v4, v7);
        operator delete(v7);
      }
    }
  }
  else
  {
    v13 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v13)
    {
      v14 = *(uint64_t **)a1;
      v15 = 8 * v13 - 8;
      v16 = *(uint64_t **)a1;
      while (1)
      {
        v17 = *v16++;
        if (v17 == a2)
          break;
        v15 -= 8;
        v14 = v16;
        if (v15 == -8)
          return;
      }
      if (v15)
      {
        memmove(v14, v14 + 1, v15);
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 8) = v13 - 1;
    }
  }
}

uint64_t **sub_1C5FFE31C(uint64_t **a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = a1 + 1;
  v6 = a1[1];
  if (!v6)
  {
    v8 = a1 + 1;
    goto LABEL_12;
  }
  do
  {
    while (1)
    {
      v8 = (uint64_t **)v6;
      v9 = v6[4];
      if (v9 <= a2)
        break;
LABEL_3:
      v6 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_12;
    }
    if (v9 >= a2)
    {
      v10 = v8[5];
      if ((unint64_t)v10 > a3)
        goto LABEL_3;
      if ((unint64_t)v10 >= a3)
        return v8;
    }
    v6 = v8[1];
  }
  while (v6);
  v7 = v8 + 1;
LABEL_12:
  v11 = (uint64_t *)v8;
  v8 = (uint64_t **)operator new(0x60uLL);
  *((_OWORD *)v8 + 2) = *a4;
  v8[8] = 0;
  v8[6] = (uint64_t *)(v8 + 8);
  v8[7] = (uint64_t *)0x100000000;
  v8[11] = 0;
  v8[10] = 0;
  v8[9] = (uint64_t *)(v8 + 10);
  *v8 = 0;
  v8[1] = 0;
  v8[2] = v11;
  *v7 = (uint64_t *)v8;
  v12 = (uint64_t *)**a1;
  v13 = (uint64_t *)v8;
  if (v12)
  {
    *a1 = v12;
    v13 = *v7;
  }
  sub_1C4768E74(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

uint64_t sub_1C5FFE428(_DWORD *a1, int *a2)
{
  char v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v4 = sub_1C5FFE50C((uint64_t)a1, *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_12;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_12:
    sub_1C5FFE5B0((uint64_t)a1, v7);
    v8 = 0;
    sub_1C5FFE50C((uint64_t)a1, *a2, &v8);
    result = v8;
  }
  *a1 += 2;
  if (*(_DWORD *)result != -1)
    --a1[1];
  *(_DWORD *)result = *a2;
  *(_BYTE *)(result + 4) = 0;
  return result;
}

uint64_t sub_1C5FFE50C(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_15:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -1)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5FFE5B0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[32];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C63BE888(a1, v6, v6 + 8 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_DWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      *(_DWORD *)v9 = v10;
      v9[4] = *(_BYTE *)(a1 + v8 + 12);
      v9 += 8;
    }
    v8 += 8;
  }
  while (v8 != 32);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C63BE888(a1, (uint64_t)v14, (uint64_t)v9);
}

void sub_1C5FFE724(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t *v8;

  v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = a2;
    do
    {
      v4 = (uint64_t *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_1C485B6E0(v7, a2);
  v8 = (uint64_t *)a2[5];
  if (v8 != a2 + 7)
    free(v8);
  operator delete(a2);
}

uint64_t sub_1C5FFE7B4(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;

  v14 = 0;
  result = sub_1C5FFE8D8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v14);
  v9 = v14;
  if ((result & 1) != 0)
  {
    v10 = 0;
    goto LABEL_3;
  }
  v12 = *(_DWORD *)(a2 + 8);
  v13 = *(_DWORD *)(a2 + 16);
  if (4 * v12 + 4 >= 3 * v13)
  {
    v13 *= 2;
  }
  else if (v13 + ~v12 - *(_DWORD *)(a2 + 12) > v13 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C5FFE9B8(a2, v13);
  v14 = 0;
  result = sub_1C5FFE8D8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v14);
  v9 = v14;
LABEL_6:
  ++*(_DWORD *)(a2 + 8);
  if (*(_QWORD *)v9 != -4096 || *(_QWORD *)(v9 + 8) != -4096)
    --*(_DWORD *)(a2 + 12);
  *(_OWORD *)v9 = *(_OWORD *)a3;
  *(_DWORD *)(v9 + 16) = *a4;
  v10 = 1;
LABEL_3:
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1C5FFE8D8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v18;
  uint64_t result;

  if (a2)
  {
    v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_QWORD *)(a1 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
LABEL_22:
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (v11 != -4096 || v12 != -4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -8192;
        if (v16 && v11 == -8192)
          v14 = v10;
        v18 = v9 + v15++;
        v9 = v18 & v8;
        v10 = (_QWORD *)(a1 + 24 * (v18 & v8));
        v11 = *v10;
        v12 = v10[1];
        if (*v10 == a3 && v12 == a4)
          goto LABEL_22;
      }
      result = 0;
      if (v14)
        v10 = v14;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
  *a5 = v10;
  return result;
}

_OWORD *sub_1C5FFE9B8(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5FFEA80(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v12;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5FFEA80(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = 24 * v6;
    v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v7 = v9;
      v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    v11 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v11 != -4096) && (v10 != -8192 || v11 != -8192))
    {
      v13 = 0;
      result = sub_1C5FFE8D8(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v10, v11, &v13);
      v12 = v13;
      *v13 = *(_QWORD *)a2;
      v12[1] = *(_QWORD *)(a2 + 8);
      *((_DWORD *)v12 + 4) = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1C5FFEB50(uint64_t a1, const void **a2)
{
  const void *v3;
  const void **v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;

  if ((const void **)a1 != a2)
  {
    v4 = a2 + 2;
    v3 = *a2;
    if (*a2 != a2 + 2)
    {
      v11 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        v12 = a2;
        free(v11);
        a2 = v12;
        v3 = *v12;
      }
      *(_QWORD *)a1 = v3;
      v6 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_10;
    }
    v6 = a2 + 1;
    v5 = *((unsigned int *)a2 + 2);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *a2, 16 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v14 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 16);
      a2 = v14;
    }
    else if ((_DWORD)v7)
    {
      v13 = *(unsigned int *)(a1 + 8);
      v15 = a2;
      memmove(*(void **)a1, v3, 16 * v7);
      v8 = v13;
      a2 = v15;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 16 * v8), (char *)*a2 + 16 * v8, (_BYTE *)*a2 + 16 * v9 - ((_BYTE *)*a2 + 16 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

uint64_t *sub_1C5FFEC8C(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = *(_OWORD *)(v4 + v7 - 96);
      *(_QWORD *)(v6 + v7 - 80) = v6 + v7 - 64;
      result = (uint64_t *)(v6 + v7 - 80);
      *((_OWORD *)result - 1) = v8;
      result[1] = 0x400000000;
      if (*(_DWORD *)(v4 + v7 - 72))
        result = (uint64_t *)sub_1C5FFEB50((uint64_t)result, (const void **)(v4 + v7 - 80));
      v7 -= 96;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v9 = *v3;
  *v3 = v6;
  a2[1] = v9;
  v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  v11 = v3[2];
  v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void sub_1C5FFED58(_QWORD *a1)
{
  char *v2;

  if (a1)
  {
    sub_1C5FFED58(*a1);
    sub_1C5FFED58(a1[1]);
    sub_1C6143384((_QWORD *)a1[10]);
    v2 = (char *)a1[6];
    if (v2 != (char *)(a1 + 8))
      free(v2);
    operator delete(a1);
  }
}

double sub_1C5FFEDB0(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1E81AB030;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 288);
  result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_QWORD *)(a1 + 192) = a1 + 208;
  *(_QWORD *)(a1 + 200) = 0x400000000;
  *(_DWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 432) = 0;
  return result;
}

uint64_t sub_1C5FFEE54(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;

  result = sub_1C5174BF0(a2, &v4);
  if (v5 == v6)
    *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_1C5FFEE9C(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_DWORD *)(a1 + 384);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 368);
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = *(_QWORD *)(v3 + 16 * v5);
    if (v6 == a2)
      return *(_QWORD *)(v3 + 16 * v5 + 8);
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v5 + v7++;
      v5 = v8 & v4;
      v6 = *(_QWORD *)(v3 + 16 * v5);
      if (v6 == a2)
        return *(_QWORD *)(v3 + 16 * v5 + 8);
    }
  }
  return 0;
}

uint64_t sub_1C5FFEF04(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_DWORD *)(a1 + 408);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 392);
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = *(_QWORD *)(v3 + 16 * v5);
    if (v6 == a2)
      return *(_QWORD *)(v3 + 16 * v5 + 8);
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v5 + v7++;
      v5 = v8 & v4;
      v6 = *(_QWORD *)(v3 + 16 * v5);
      if (v6 == a2)
        return *(_QWORD *)(v3 + 16 * v5 + 8);
    }
  }
  return 0;
}

uint64_t sub_1C5FFEF6C(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  int v6;

  do
  {
    v1 = result;
    if (*(_BYTE *)result != 12)
      break;
    v2 = *(unsigned __int16 *)(result + 2) - 13;
    v3 = v2 > 0x3E;
    v4 = (1 << v2) & 0x4400050002000201;
    if (v3 || v4 == 0)
      break;
    result = *(_QWORD *)(result - 8 * *(unsigned int *)(result + 8) + 24);
    if (!result)
      return result;
    v6 = *(unsigned __int16 *)(result + 2);
  }
  while (v6 != 66 && v6 != 16);
  return *(_QWORD *)(v1 + 32);
}

uint64_t sub_1C5FFEFD4(uint64_t result)
{
  int v1;
  unsigned int v2;
  unsigned int v3;

  while (1)
  {
    v1 = *(unsigned __int8 *)result;
    if (v1 == 13)
    {
      if (*(_WORD *)(result + 2) != 4)
        return 1;
      result = *(_QWORD *)(result - 8 * *(unsigned int *)(result + 8) + 24);
      if (!result)
        return result;
      v1 = *(unsigned __int8 *)result;
    }
    else if (v1 == 33)
    {
      return 1;
    }
    if (v1 != 12)
      break;
    v2 = *(unsigned __int16 *)(result + 2) - 15;
    if (v2 < 0x34 && ((0x8000000010003uLL >> v2) & 1) != 0)
      return 1;
    result = *(_QWORD *)(result - 8 * *(unsigned int *)(result + 8) + 24);
  }
  v3 = *(_DWORD *)(result + 52) - 2;
  if (v3 >= 0xF || ((0x4061u >> v3) & 1) == 0)
    return *(unsigned __int16 *)(result + 2) == 59;
  return 1;
}

uint64_t sub_1C5FFF07C(uint64_t *a1, uint64_t ****a2)
{
  uint64_t ***v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD ***v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t i;
  unsigned __int8 **v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unint64_t v74;
  _QWORD v75[2];
  uint64_t v76;
  uint64_t v77;
  int8x16_t v78;
  _QWORD v79[5];

  v79[4] = *MEMORY[0x1E0C80C00];
  a1[5] = 0;
  if (!a1[1])
    return (*(uint64_t (**)(uint64_t *))(*a1 + 144))(a1);
  if (!*(_BYTE *)(a1[2] + 2108))
    return (*(uint64_t (**)(uint64_t *))(*a1 + 144))(a1);
  v4 = *a2;
  if ((*((_BYTE *)*a2 + 23) & 0x20) == 0)
    return (*(uint64_t (**)(uint64_t *))(*a1 + 144))(a1);
  v5 = ***v4;
  v78.i64[0] = (uint64_t)*a2;
  v6 = *(_DWORD *)(v5 + 2496);
  if (!v6)
  {
    v71 = 0;
LABEL_101:
    v10 = sub_1C541AB24(v5 + 2480, (uint64_t)&v78, v78.i64, v71);
    v72 = v78.i64[0];
    v10[3] = 0;
    v10[4] = 0;
    *v10 = v72;
    v10[1] = v10 + 3;
    v10[2] = 0x100000000;
    goto LABEL_14;
  }
  v7 = *(_QWORD *)(v5 + 2480);
  v8 = v6 - 1;
  v9 = v8 & ((v4 >> 4) ^ (v4 >> 9));
  v10 = (_QWORD *)(v7 + 40 * v9);
  v11 = (_QWORD ***)*v10;
  if ((uint64_t ***)*v10 != v4)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != (_QWORD ***)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == (_QWORD ***)-8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (_QWORD *)(v7 + 40 * v9);
      v11 = (_QWORD ***)*v10;
      if ((uint64_t ***)*v10 == v4)
        goto LABEL_14;
    }
    if (v12)
      v71 = v12;
    else
      v71 = v10;
    goto LABEL_101;
  }
LABEL_14:
  v16 = *((unsigned int *)v10 + 4);
  if (!(_DWORD)v16)
    return (*(uint64_t (**)(uint64_t *))(*a1 + 144))(a1);
  v17 = (_QWORD *)(v10[1] + 8);
  v18 = 16 * v16;
  while (*((_DWORD *)v17 - 2))
  {
    v17 += 2;
    v18 -= 16;
    if (!v18)
      return (*(uint64_t (**)(uint64_t *))(*a1 + 144))(a1);
  }
  v20 = *v17;
  if (!v20 || !*(_DWORD *)(*(_QWORD *)(v20 - 8 * *(unsigned int *)(v20 + 8) + 40) + 36))
    return (*(uint64_t (**)(uint64_t *))(*a1 + 144))(a1);
  llvm::LexicalScopes::initialize((llvm::LexicalScopes *)(a1 + 8), a2);
  v21 = a1[30];
  if (!v21)
    return (*(uint64_t (**)(uint64_t *, uint64_t ****))(*a1 + 128))(a1, a2);
  v78.i64[0] = (uint64_t)v79;
  v78.i32[3] = 4;
  v79[0] = v21;
  LODWORD(v21) = 1;
  do
  {
    v22 = v78.i64[0];
    v23 = *(_QWORD *)(v78.i64[0] + 8 * v21 - 8);
    v21 = (v21 - 1);
    v78.i32[2] = v21;
    v24 = *(unsigned int *)(v23 + 40);
    if ((_DWORD)v24)
    {
      v25 = *(const void **)(v23 + 32);
      v26 = v24 + v21;
      if (v26 > v78.u32[3])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, (uint64_t)v79, v26, 8);
        v21 = v78.u32[2];
        v22 = v78.i64[0];
      }
      memcpy((void *)(v22 + 8 * v21), v25, 8 * v24);
      LODWORD(v21) = v78.i32[2] + v24;
      v78.i32[2] += v24;
    }
    if (!*(_BYTE *)(v23 + 24))
    {
      v27 = *(unsigned int *)(v23 + 88);
      if ((_DWORD)v27)
      {
        v28 = *(uint64_t **)(v23 + 80);
        v29 = &v28[2 * v27];
        do
        {
          v76 = *v28;
          v77 = 0;
          sub_1C5FFFBD4((uint64_t)(a1 + 46), &v76, &v77, (uint64_t)&v74);
          v76 = v28[1];
          v77 = 0;
          sub_1C5FFFBD4((uint64_t)(a1 + 49), &v76, &v77, (uint64_t)&v74);
          v28 += 2;
        }
        while (v28 != v29);
        LODWORD(v21) = v78.i32[2];
      }
    }
  }
  while ((_DWORD)v21);
  if ((_QWORD *)v78.i64[0] != v79)
    free((void *)v78.i64[0]);
  v30 = *(_QWORD *)(*(_QWORD *)(a1[1] + 280) + 16);
  v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 176))(v30);
  sub_1C5FFCD40((uint64_t)a2, v31, a1 + 34, (uint64_t)(a1 + 40));
  sub_1C5FFC0D0((_DWORD *)a1 + 104, (uint64_t)a2);
  if (byte_1ED829338)
    sub_1C5FFC65C((uint64_t)(a1 + 34), (uint64_t)a2, a1 + 8, a1 + 52);
  v32 = a1[37];
  v33 = a1[38];
  if (v32 == v33)
    goto LABEL_92;
  do
  {
    if (!*(_DWORD *)(v32 + 24))
      goto LABEL_91;
    v34 = *(_QWORD *)(*(_QWORD *)((**(_QWORD **)(v32 + 16) & 0xFFFFFFFFFFFFFFF8) + 32)
                    + ((unint64_t)(**(_WORD **)((**(_QWORD **)(v32 + 16) & 0xFFFFFFFFFFFFFFF8) + 16) != 14) << 6)
                    + 16);
    if (!*(_WORD *)(v34 + 32))
      goto LABEL_85;
    v35 = *(unsigned int **)(v34 - 8 * *(unsigned int *)(v34 + 8));
    if (v35)
    {
      v36 = *(unsigned __int8 *)v35;
      if ((v36 - 17) > 2)
      {
        v35 = 0;
      }
      else
      {
        while ((v36 & 0xFE) == 0x12)
        {
          v35 = *(unsigned int **)&v35[-2 * v35[2] + 2];
          LOBYTE(v36) = *(_BYTE *)v35;
        }
      }
    }
    if (!llvm::DISubprogram::describes((llvm::DISubprogram *)v35, (const llvm::Function *)*a2))
      goto LABEL_85;
    v37 = **(_QWORD **)(v32 + 16) & 0xFFFFFFFFFFFFFFF8;
    v38 = **(unsigned __int16 **)(v37 + 16);
    v39 = *(_QWORD *)(v37 + 32);
    if (v38 == 14)
    {
      v40 = *(unsigned int *)(v37 + 40);
      if ((_DWORD)v40 != 2)
      {
        v41 = v39 + 64;
        v42 = v39 + 32 * v40;
        goto LABEL_50;
      }
LABEL_56:
      v44 = *(_QWORD *)(a1[1] + 520);
      v78.i64[0] = **(_QWORD **)(v32 + 16) & 0xFFFFFFFFFFFFFFF8;
      sub_1C61F90DC((uint64_t)(a1 + 46), v78.i64)[1] = v44;
      v45 = **(_QWORD **)(v32 + 16) & 0xFFFFFFFFFFFFFFF8;
      v38 = **(unsigned __int16 **)(v45 + 16);
      v39 = *(_QWORD *)(v45 + 32);
    }
    else
    {
      v42 = v39 + 32;
      v41 = *(_QWORD *)(v37 + 32);
LABEL_50:
      while (*(_BYTE *)v41 || *(_DWORD *)(v41 + 4) == 0)
      {
        v41 += 32;
        if (v41 == v42)
          goto LABEL_56;
      }
    }
    v14 = v38 == 14;
    v46 = 96;
    if (v14)
      v46 = 32;
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(*(_QWORD *)(v39 + v46 + 16) + 24), *(uint64_t **)(*(_QWORD *)(v39 + v46 + 16) + 32), &v78);
    if (!LOBYTE(v79[0]))
      goto LABEL_85;
    v47 = *(unsigned int *)(v32 + 24);
    if (!(_DWORD)v47)
      goto LABEL_91;
    v48 = *(uint64_t **)(v32 + 16);
    v49 = v48;
    while (1)
    {
      v50 = *v49;
      if ((*v49 & 4) != 0)
        goto LABEL_84;
      v51 = v50 & 0xFFFFFFFFFFFFFFF8;
      v14 = **(unsigned __int16 **)((v50 & 0xFFFFFFFFFFFFFFF8) + 16) == 14;
      v52 = 96;
      if (v14)
        v52 = 32;
      if (v48 != v49)
        break;
LABEL_73:
      v58 = *(_QWORD *)(v51 + 32);
      if (**(_WORD **)(v51 + 16) != 14)
      {
        v60 = v58 + 32;
LABEL_77:
        while (*(_BYTE *)v58 || *(_DWORD *)(v58 + 4) == 0)
        {
          v58 += 32;
          if (v58 == v60)
            goto LABEL_83;
        }
        goto LABEL_85;
      }
      v59 = *(unsigned int *)(v51 + 40);
      if ((_DWORD)v59 != 2)
      {
        v60 = v58 + 32 * v59;
        v58 += 64;
        goto LABEL_77;
      }
LABEL_83:
      v62 = *(_QWORD *)(a1[1] + 520);
      v78.i64[0] = v51;
      sub_1C61F90DC((uint64_t)(a1 + 46), v78.i64)[1] = v62;
      v48 = *(uint64_t **)(v32 + 16);
      v47 = *(unsigned int *)(v32 + 24);
LABEL_84:
      v49 += 2;
      if (v49 == &v48[2 * v47])
        goto LABEL_85;
    }
    v53 = *(_QWORD *)(*(_QWORD *)(v51 + 32) + v52 + 16);
    while (1)
    {
      if ((*v48 & 4) == 0)
      {
        v54 = *v48 & 0xFFFFFFFFFFFFFFF8;
        v55 = **(unsigned __int16 **)(v54 + 16);
        v56 = *(_QWORD *)(v54 + 32);
        v14 = v55 == 14;
        v57 = 96;
        if (v14)
          v57 = 32;
        if (sub_1C520AAB4(v53, *(_QWORD *)(v56 + v57 + 16)))
          break;
      }
      v48 += 2;
      if (v48 == v49)
      {
        v51 = *v49 & 0xFFFFFFFFFFFFFFF8;
        goto LABEL_73;
      }
    }
LABEL_85:
    v63 = *(unsigned int *)(v32 + 24);
    if ((_DWORD)v63)
    {
      v64 = *(_QWORD **)(v32 + 16);
      v65 = 16 * v63;
      do
      {
        if ((*v64 & 4) != 0)
        {
          v74 = *v64 & 0xFFFFFFFFFFFFFFF8;
          v75[0] = 0;
          v66 = (uint64_t)(a1 + 49);
        }
        else
        {
          v74 = *v64 & 0xFFFFFFFFFFFFFFF8;
          v75[0] = 0;
          v66 = (uint64_t)(a1 + 46);
        }
        sub_1C5FFFBD4(v66, (uint64_t *)&v74, v75, (uint64_t)&v78);
        v64 += 2;
        v65 -= 16;
      }
      while (v65);
    }
LABEL_91:
    v32 += 96;
  }
  while (v32 != v33);
LABEL_92:
  v67 = a1[43];
  for (i = a1[44]; v67 != i; v67 += 24)
  {
    v74 = *(_QWORD *)(v67 + 16);
    v75[0] = 0;
    sub_1C5FFFBD4((uint64_t)(a1 + 46), (uint64_t *)&v74, v75, (uint64_t)&v78);
  }
  v78.i64[0] = 0;
  v69 = (unsigned __int8 **)(a1 + 3);
  if (&v78 != (int8x16_t *)(a1 + 3))
  {
    if (*v69)
    {
      llvm::MetadataTracking::untrack((uint64_t)(a1 + 3), *v69);
      v73 = (unsigned __int8 *)v78.i64[0];
      *v69 = (unsigned __int8 *)v78.i64[0];
      if (v73)
        llvm::MetadataTracking::retrack((uint64_t)&v78, v73, (uint64_t)(a1 + 3));
    }
    else
    {
      *v69 = 0;
    }
  }
  v70 = *a1;
  a1[4] = *(_QWORD *)(a1[1] + 520);
  return (*(uint64_t (**)(uint64_t *, uint64_t ****))(v70 + 128))(a1, a2);
}

