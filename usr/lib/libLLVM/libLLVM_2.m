__n128 sub_1C483F0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  BOOL v17;
  BOOL v18;
  _BOOL4 v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  BOOL v24;
  _BOOL4 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int v30;
  BOOL v31;
  BOOL v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  _QWORD *v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t *i;
  unsigned __int16 *v49;
  int v50;
  BOOL v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int16 *v63;
  int v64;
  BOOL v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int16 *v71;
  int v72;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int16 *v112;
  int v113;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  _DWORD *v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  signed int v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  signed int v137;
  unsigned int v138;
  signed int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  _BOOL4 v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  int v151;
  int v152;
  BOOL v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t *v159;
  unint64_t v160;
  unsigned int v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  char v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int v177;
  int v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  int v185;
  int v186;
  int v187;
  unsigned int v188;
  signed int v189;
  _BOOL4 v190;
  int v191;
  int v192;
  int v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  void *__dst;
  uint64_t v199;
  _QWORD v200[6];
  int v201;
  uint64_t v202;

  v202 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
    v8 = *(unsigned __int8 *)(a3 + 37);
    v9 = *(unsigned __int8 *)(a2 + 37);
    if (v8 > v9)
    {
      v10 = 4;
LABEL_4:
      *(_DWORD *)(a3 + 16) = v10;
      goto LABEL_36;
    }
    if (v8 < v9)
    {
      if (*(int *)(a2 + 16) < 5)
        goto LABEL_36;
      v11 = 4;
      goto LABEL_35;
    }
    v14 = *(_QWORD *)(v7 + 8);
    v15 = *(unsigned __int16 **)(v14 + 16);
    v16 = *v15;
    v17 = (v16 - 9) > 0x3C || ((1 << (v16 - 9)) & 0x1000000000000605) == 0;
    v18 = !v17 || v16 == 0;
    v19 = !v18 && (v15[4] & 0x10) == 0 && (v15[8] & 1) == 0;
    v20 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
    v21 = *(unsigned __int16 **)(v20 + 16);
    v22 = *v21;
    v24 = (v22 - 9) <= 0x3C && ((1 << (v22 - 9)) & 0x1000000000000605) != 0
       || v22 == 0;
    v25 = !v24 && (v21[4] & 0x10) == 0 && (v21[8] & 1) == 0;
    if (*(_BYTE *)(a1 + 2048))
    {
      if (!*(_DWORD *)(a2 + 16))
        goto LABEL_36;
      if (*(_DWORD *)(a1 + 2056))
      {
        if (v19 && !v25)
        {
          *(_DWORD *)(a3 + 16) = 1;
LABEL_34:
          v11 = 25;
LABEL_35:
          *(_DWORD *)(a2 + 16) = v11;
          goto LABEL_36;
        }
        if (v25 && !v19)
          goto LABEL_34;
      }
      v28 = *(_QWORD *)(a1 + 2032);
      if (v28)
      {
        v29 = *(unsigned __int16 **)(*(_QWORD *)(v28 + 8) + 16);
        v30 = *v29;
        v31 = (v30 - 9) > 0x3C || ((1 << (v30 - 9)) & 0x1000000000000605) == 0;
        v32 = !v31 || v30 == 0;
        if (!v32
          && (v29[4] & 0x10) == 0
          && (v29[8] & 1) == 0
          && *(unsigned __int8 *)(a2 + 24) != *(unsigned __int8 *)(a3 + 24)
          && (sub_1C4840C54(v14) || sub_1C4840C54(v20)))
        {
          __dst = v200;
          v199 = 0x600000000;
          v41 = *(_DWORD *)(a1 + 1968);
          if (!v41 || &__dst == (void **)(a1 + 1960))
          {
LABEL_97:
            v201 = *(_DWORD *)(a1 + 2024);
            v196 = 0u;
            v197 = 0u;
            v195 = 0u;
            v47 = *(uint64_t **)(a1 + 256);
            for (i = *(uint64_t **)(a1 + 264); v47 != i; ++v47)
            {
              v194 = *v47;
              v49 = *(unsigned __int16 **)(*(_QWORD *)(v194 + 8) + 16);
              v50 = *v49;
              v52 = (v50 - 9) <= 0x3C && ((1 << (v50 - 9)) & 0x1000000000000605) != 0
                 || v50 == 0;
              if (v52 || (v49[4] & 0x10) != 0 || (v49[8] & 1) != 0)
                sub_1C48410F0(&v195, &v194);
            }
            v53 = 0;
            while (*((_QWORD *)&v197 + 1))
            {
              v54 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v195 + 1)
                                          + (((unint64_t)v197 >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (v197 & 0x1FF));
              *(_QWORD *)&v197 = v197 + 1;
              --*((_QWORD *)&v197 + 1);
              if ((unint64_t)v197 >= 0x400)
              {
                operator delete(**((void ***)&v195 + 1));
                *((_QWORD *)&v195 + 1) += 8;
                *(_QWORD *)&v197 = v197 - 512;
              }
              v55 = *(unsigned int *)(v54 + 120);
              if ((_DWORD)v55)
              {
                v56 = *(_QWORD **)(v54 + 112);
                v57 = 16 * v55;
                while (1)
                {
                  v58 = *(unsigned int *)((*v56 & 0xFFFFFFFFFFFFFFF8) + 192);
                  if ((_DWORD)v58 != -1 && ((*(_QWORD *)((char *)__dst + ((v58 >> 3) & 0x1FFFFFF8)) >> v58) & 1) == 0)
                    break;
                  v56 += 2;
                  v57 -= 16;
                  if (!v57)
                    goto LABEL_118;
                }
              }
              else
              {
LABEL_118:
                v53 += *(unsigned __int16 *)(v54 + 226);
                *(_QWORD *)((char *)__dst + (((unint64_t)*(unsigned int *)(v54 + 192) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v54 + 192);
                v59 = *(unsigned int *)(v54 + 40);
                if ((_DWORD)v59)
                {
                  v60 = *(_QWORD **)(v54 + 32);
                  v61 = 16 * v59;
                  do
                  {
                    v62 = *v60 & 0xFFFFFFFFFFFFFFF8;
                    if (*(_DWORD *)(v62 + 192) != -1)
                    {
                      v63 = *(unsigned __int16 **)(*(_QWORD *)(v62 + 8) + 16);
                      v64 = *v63;
                      v65 = (v64 - 9) > 0x3C
                         || ((1 << (v64 - 9)) & 0x1000000000000605) == 0;
                      v66 = !v65 || v64 == 0;
                      if (v66 || (v63[4] & 0x10) != 0 || (v63[8] & 1) != 0)
                      {
                        v67 = *((_QWORD *)&v195 + 1);
                        if ((_QWORD)v196 == *((_QWORD *)&v195 + 1))
                          v68 = 0;
                        else
                          v68 = (((_QWORD)v196 - *((_QWORD *)&v195 + 1)) << 6) - 1;
                        v69 = *((_QWORD *)&v197 + 1);
                        v70 = *((_QWORD *)&v197 + 1) + v197;
                        if (v68 == *((_QWORD *)&v197 + 1) + (_QWORD)v197)
                        {
                          sub_1C4841174((uint64_t)&v195);
                          v69 = *((_QWORD *)&v197 + 1);
                          v67 = *((_QWORD *)&v195 + 1);
                          v70 = v197 + *((_QWORD *)&v197 + 1);
                        }
                        *(_QWORD *)(*(_QWORD *)(v67 + ((v70 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v70 & 0x1FF)) = v62;
                        *((_QWORD *)&v197 + 1) = v69 + 1;
                      }
                    }
                    v60 += 2;
                    v61 -= 16;
                  }
                  while (v61);
                }
              }
              if (v53 >= 0x10)
              {
                v53 = 16;
                break;
              }
            }
            sub_1C484143C((uint64_t)&v195);
            if (__dst != v200)
              free(__dst);
            v71 = *(unsigned __int16 **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 16);
            v72 = *v71;
            v74 = (v72 - 9) <= 0x3C && ((1 << (v72 - 9)) & 0x1000000000000605) != 0
               || v72 == 0;
            v75 = a2;
            v76 = a3;
            if (!v74)
            {
              v75 = a2;
              v76 = a3;
              if ((v71[4] & 0x10) == 0)
              {
                v77 = *((_QWORD *)v71 + 2);
                if ((v77 & 1) != 0)
                  v75 = a2;
                else
                  v75 = a3;
                if ((v77 & 1) != 0)
                  v76 = a3;
                else
                  v76 = a2;
              }
            }
            if (v53 < 0x10)
            {
              *(_DWORD *)(v75 + 16) = 25;
              *(_DWORD *)(v76 + 16) = 0;
            }
            else
            {
              *(_DWORD *)(v75 + 16) = 1;
              *(_DWORD *)(v76 + 16) = 25;
              *(_DWORD *)(a1 + 2056) = v53;
            }
            goto LABEL_36;
          }
          if (v41 >= 7)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v200, *(unsigned int *)(a1 + 1968), 8);
            v43 = *(_DWORD *)(a1 + 1968);
            if (!v43)
            {
LABEL_96:
              LODWORD(v199) = v41;
              goto LABEL_97;
            }
            v42 = __dst;
          }
          else
          {
            v42 = v200;
            v43 = *(_DWORD *)(a1 + 1968);
          }
          memcpy(v42, *(const void **)(a1 + 1960), 8 * v43);
          goto LABEL_96;
        }
      }
    }
    if (*(_BYTE *)(a3 + 24) && *(_BYTE *)(a2 + 24))
    {
      v33 = *(unsigned __int8 *)(a3 + 38);
      v34 = *(unsigned __int8 *)(a2 + 38);
      if (v33 > v34)
      {
        v10 = 3;
        goto LABEL_4;
      }
      if (v33 < v34)
      {
        if (*(int *)(a2 + 16) >= 4)
        {
          v11 = 3;
          goto LABEL_35;
        }
LABEL_36:
        if (*(_DWORD *)(a3 + 16) == 25)
          return result;
        goto LABEL_37;
      }
    }
    if (!*(_BYTE *)(a2 + 36) && *(unsigned __int8 *)(a2 + 24) == *(unsigned __int8 *)(a3 + 24) && *(_BYTE *)(a3 + 36))
    {
      v10 = 2;
      goto LABEL_4;
    }
    v35 = sub_1C4840CF4(a1, a3);
    v36 = sub_1C4840CF4(a1, a2);
    if (v35 < v36)
    {
LABEL_59:
      v10 = 16;
      goto LABEL_4;
    }
    if (v35 > v36)
    {
LABEL_61:
      if (*(int *)(a2 + 16) >= 17)
      {
        v11 = 16;
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    v37 = *(unsigned __int8 *)(a3 + 39);
    v38 = *(unsigned __int8 *)(a2 + 39);
    if (v37 > v38)
    {
      v10 = 17;
      goto LABEL_4;
    }
    if (v37 < v38)
    {
      if (*(int *)(a2 + 16) >= 18)
      {
        v11 = 17;
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (*(_BYTE *)(a1 + 2048) && (v19 || v25))
    {
      v39 = *(_QWORD *)(a1 + 2216);
      v40 = (int)*(float *)(v39 + 4 * *(unsigned int *)(*(_QWORD *)(a3 + 8) + 192));
      result.n128_u32[0] = *(_DWORD *)(v39 + 4 * *(unsigned int *)(*(_QWORD *)(a2 + 8) + 192));
      if (v40 < (int)result.n128_f32[0])
      {
LABEL_74:
        v10 = 1;
        goto LABEL_4;
      }
      if (v40 > (int)result.n128_f32[0])
      {
LABEL_82:
        if (*(int *)(a2 + 16) >= 2)
        {
          v11 = 1;
          goto LABEL_35;
        }
        goto LABEL_36;
      }
    }
    if (*(_BYTE *)(a1 + 1049))
    {
      if (*(_BYTE *)(a3 + 34))
      {
        v44 = 1;
        goto LABEL_162;
      }
    }
    else
    {
      v44 = *(unsigned __int8 *)(a3 + 34);
      if (!*(_BYTE *)(a1 + 1952) || *(_BYTE *)(a3 + 34))
        goto LABEL_162;
    }
    if (!*(_BYTE *)(a2 + 34) && *(unsigned __int8 *)(a3 + 24) == *(unsigned __int8 *)(a2 + 24))
    {
      v45 = *(unsigned __int8 *)(a3 + 42);
      v46 = *(unsigned __int8 *)(a2 + 42);
      if (v45 > v46)
      {
        v10 = 14;
        goto LABEL_4;
      }
      if (v45 < v46)
      {
        if (*(int *)(a2 + 16) >= 15)
        {
          v11 = 14;
          goto LABEL_35;
        }
        goto LABEL_36;
      }
    }
    v44 = 0;
LABEL_162:
    if (*(_BYTE *)(a1 + 1048))
    {
      v78 = *(_DWORD *)(a3 + 52);
      if (v78 == -1)
      {
        v79 = *(_QWORD *)(a3 + 8);
        v80 = *(unsigned int *)(v79 + 40);
        if ((_DWORD)v80)
        {
          v78 = 0;
          v81 = *(uint64_t **)(v79 + 32);
          v82 = 16 * v80;
          do
          {
            v83 = *v81;
            v81 += 2;
            if (*(_DWORD *)((v83 & 0xFFFFFFFFFFFFFFF8) + 212) == 1)
              ++v78;
            v82 -= 16;
          }
          while (v82);
        }
        else
        {
          v78 = 0;
        }
        *(_DWORD *)(a3 + 52) = v78;
      }
      v84 = *(_DWORD *)(a2 + 52);
      if (v84 == -1)
      {
        v85 = *(_QWORD *)(a2 + 8);
        v86 = *(unsigned int *)(v85 + 40);
        if ((_DWORD)v86)
        {
          v84 = 0;
          v87 = *(uint64_t **)(v85 + 32);
          v88 = 16 * v86;
          do
          {
            v89 = *v87;
            v87 += 2;
            if (*(_DWORD *)((v89 & 0xFFFFFFFFFFFFFFF8) + 212) == 1)
              ++v84;
            v88 -= 16;
          }
          while (v88);
        }
        else
        {
          v84 = 0;
        }
        *(_DWORD *)(a2 + 52) = v84;
      }
      if (v78 > v84)
      {
        v10 = 21;
        goto LABEL_4;
      }
      if (v78 < v84)
      {
        if (*(int *)(a2 + 16) >= 22)
        {
          v11 = 21;
          goto LABEL_35;
        }
        goto LABEL_36;
      }
    }
    v90 = *(unsigned __int8 *)(a3 + 40);
    v91 = *(unsigned __int8 *)(a2 + 40);
    if (v90 > v91)
    {
      v10 = 11;
      goto LABEL_4;
    }
    if (v90 < v91)
    {
      if (*(int *)(a2 + 16) >= 12)
      {
        v11 = 11;
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    v92 = *(unsigned __int8 *)(a3 + 73);
    v93 = *(unsigned __int8 *)(a2 + 73);
    if (v92 < v93)
    {
      v10 = 12;
      goto LABEL_4;
    }
    if (v92 > v93)
    {
      if (*(int *)(a2 + 16) >= 13)
      {
        v11 = 12;
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    v94 = *(unsigned __int8 *)(a3 + 72);
    v95 = *(unsigned __int8 *)(a2 + 72);
    if (v94 > v95)
    {
LABEL_197:
      v10 = 18;
      goto LABEL_4;
    }
    if (v94 < v95)
    {
LABEL_199:
      if (*(int *)(a2 + 16) >= 19)
      {
        v11 = 18;
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (*(_BYTE *)(a1 + 1050))
    {
      v96 = *(unsigned __int8 *)(a3 + 33);
      v97 = *(unsigned __int8 *)(a2 + 33);
      if (v96 <= v97)
      {
        if (v96 >= v97)
        {
LABEL_230:
          v104 = *(_DWORD *)(a1 + 1932);
          if (*(_DWORD *)(a1 + 1060) < v104)
            goto LABEL_250;
          if (!*(_BYTE *)(a1 + 1052))
            goto LABEL_250;
          v105 = *(unsigned __int8 *)(a3 + 33);
          v106 = *(unsigned __int8 *)(a2 + 33);
          if (v105 == v106)
            goto LABEL_250;
          v107 = 0;
          v108 = 0;
          __dst = (void *)(a1 + 224);
          v199 = a1 + 280;
          v200[0] = a1 + 392;
          do
          {
            v109 = (uint64_t)*(&__dst + v108);
            v111 = *(_QWORD *)(v109 + 32);
            v110 = *(_QWORD *)(v109 + 40);
            while (v111 != v110)
            {
              v112 = *(unsigned __int16 **)(*(_QWORD *)(*(_QWORD *)v111 + 8) + 16);
              v113 = *v112;
              if (((v113 - 9) > 0x3C || ((1 << (v113 - 9)) & 0x1000000000000605) == 0)
                && v113 != 0
                && (v112[4] & 0x10) == 0)
              {
                v116 = *((_QWORD *)v112 + 2);
                if ((v116 & 1) == 0 && (v116 & 0xC0) == 0)
                  ++v107;
              }
              v111 += 8;
            }
            ++v108;
          }
          while (v108 != 3);
          if (v107 < v104)
          {
LABEL_250:
            if (!v44 && !*(_BYTE *)(a2 + 34))
            {
              v117 = *(unsigned __int8 *)(a3 + 24);
              v118 = *(unsigned __int8 *)(a2 + 24);
              if (v117 > v118)
              {
                v10 = 9;
                goto LABEL_4;
              }
              if (v117 < v118)
              {
                if (*(int *)(a2 + 16) >= 10)
                {
                  v11 = 9;
                  goto LABEL_35;
                }
                goto LABEL_36;
              }
            }
            v119 = *(_DWORD *)(a3 + 28);
            v120 = *(_DWORD *)(a2 + 28);
            if (v119 > v120)
            {
              v10 = 7;
              goto LABEL_4;
            }
            if (v119 < v120)
            {
              if (*(int *)(a2 + 16) >= 8)
              {
                v11 = 7;
                goto LABEL_35;
              }
              goto LABEL_36;
            }
            v191 = 0;
            v192 = 0;
            v121 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
            v122 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
            v123 = *(_QWORD *)(*(_QWORD *)(v121 + 16) + 16);
            v124 = *(_QWORD *)(*(_QWORD *)(v122 + 16) + 16);
            if ((v123 & 0x100) != 0 && (v124 & 0x100) != 0 || (v123 & 0x2000) != 0 && (v124 & 0x2000) != 0)
            {
              v193 = 0;
              LODWORD(v194) = 0;
              if (sub_1C612D454(v121, (int *)&v194, &v192, (int *)&__dst))
              {
                if (sub_1C612D454(v122, &v193, &v191, (int *)&v195) && (_DWORD)v194 == v193)
                {
                  if (v192 > v191)
                    goto LABEL_197;
                  if (v192 < v191)
                    goto LABEL_199;
                }
              }
            }
            v125 = *(unsigned __int8 *)(a3 + 32);
            v126 = *(unsigned __int8 *)(a2 + 32);
            if (v125 < v126)
            {
LABEL_267:
              v10 = 6;
              goto LABEL_4;
            }
            if (v125 > v126)
            {
LABEL_272:
              if (*(int *)(a2 + 16) >= 7)
              {
                v11 = 6;
                goto LABEL_35;
              }
              goto LABEL_36;
            }
            if (a1 + 224 == a4)
            {
              v135 = sub_1C4840244(a1, a3);
              if (v135 >= 0x10 || *(_BYTE *)(a3 + 33) == 0)
                v137 = v135;
              else
                v137 = 0;
              v138 = sub_1C4840244(a1, a2);
              if (v138 >= 0x10 || *(_BYTE *)(a2 + 33) == 0)
                v140 = v138;
              else
                v140 = 0;
              if (v137 < v140)
                goto LABEL_267;
              if (v137 > v140)
                goto LABEL_272;
            }
            else
            {
              v128 = *(_DWORD *)(a3 + 68);
              if (v128 == -1)
              {
                v129 = sub_1C4840244(a1, a3);
                v130 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 8) + 226);
                v131 = v130 - v129;
                if (v130 < v129)
                  v131 = 0;
                if (v129)
                  v128 = v131;
                else
                  v128 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 8) + 226);
                *(_DWORD *)(a3 + 68) = v128;
              }
              v132 = *(_DWORD *)(a2 + 68);
              if (v132 == -1)
              {
                v133 = sub_1C4840244(a1, a2);
                v132 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 226);
                v134 = v132 - v133;
                if (v132 < v133)
                  v134 = 0;
                if (v133)
                  v132 = v134;
                *(_DWORD *)(a2 + 68) = v132;
              }
              if (v128 > v132)
              {
                v10 = 5;
                goto LABEL_4;
              }
              if (v128 < v132)
              {
                if (*(int *)(a2 + 16) >= 6)
                {
                  v11 = 5;
                  goto LABEL_35;
                }
                goto LABEL_36;
              }
            }
            if (!*(_BYTE *)(a1 + 72))
            {
              v143 = *(unsigned __int8 *)(a3 + 25);
              v144 = *(unsigned __int8 *)(a2 + 25);
              if (v143 > v144)
              {
                v10 = 10;
                goto LABEL_4;
              }
              if (v143 < v144)
              {
                if (*(int *)(a2 + 16) >= 11)
                {
                  v11 = 10;
                  goto LABEL_35;
                }
                goto LABEL_36;
              }
            }
            v141 = *(unsigned __int8 *)(a3 + 41);
            v142 = *(unsigned __int8 *)(a2 + 41);
            if (v141 > v142)
            {
              v10 = 24;
              goto LABEL_4;
            }
            if (v141 < v142)
            {
              if (*(int *)(a2 + 16) >= 25)
              {
                v11 = 24;
                goto LABEL_35;
              }
              goto LABEL_36;
            }
            v145 = sub_1C4840D90(a1, a3);
            v188 = sub_1C4840D90(a1, a2);
            v189 = v145;
            result.n128_f32[0] = (float)v145;
            v146 = (float)((float)v145 * 1.2) < (float)v188;
            if ((float)((float)v188 * 1.2) < (float)v145)
              v146 = 1;
            v190 = v146;
            if (v146 && !*(_BYTE *)(a1 + 1048) && !*(_BYTE *)(a1 + 1049) && *(_BYTE *)(a1 + 73))
            {
              v186 = sub_1C4840E14(a1, a3);
              v187 = sub_1C4840E14(a1, a2);
              if (v186 > v187)
              {
                v10 = 13;
                goto LABEL_4;
              }
              if (v186 < v187)
              {
                if (*(int *)(a2 + 16) >= 14)
                {
                  v11 = 13;
                  goto LABEL_35;
                }
                goto LABEL_36;
              }
            }
            v147 = *(_QWORD *)(a3 + 8);
            if ((*(_BYTE *)(v147 + 236) & 1) == 0)
              llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
            v148 = *(_DWORD *)(v147 + 240);
            v149 = *(_QWORD *)(a2 + 8);
            if ((*(_BYTE *)(v149 + 236) & 1) == 0)
              llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
            if (v148 - *(_DWORD *)(v149 + 240) >= 0)
              v150 = v148 - *(_DWORD *)(v149 + 240);
            else
              v150 = *(_DWORD *)(v149 + 240) - v148;
            v151 = *(_DWORD *)(a1 + 572);
            v152 = *(_DWORD *)(a1 + 576);
            v17 = v151 == v152;
            v153 = v151 != v152;
            if (!v17 && !*(_BYTE *)(a2 + 33) && !*(_BYTE *)(a3 + 33))
            {
              v154 = *(_QWORD *)(a1 + 560);
              v155 = 568;
              if (v154 == *(_QWORD *)(a1 + 552))
                v155 = 572;
              v156 = *(unsigned int *)(a1 + v155);
              if ((_DWORD)v156)
              {
                v157 = 8 * v156;
                v158 = *(unint64_t **)(a1 + 560);
                while (*v158 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v158;
                  v157 -= 8;
                  if (!v157)
                    goto LABEL_361;
                }
              }
              else
              {
                v158 = *(unint64_t **)(a1 + 560);
              }
              v159 = (unint64_t *)(v154 + 8 * v156);
              if (v158 == v159)
              {
LABEL_361:
                v161 = -1;
              }
              else
              {
                v160 = *v158;
                v161 = -1;
LABEL_353:
                if ((*(_BYTE *)(v160 + 236) & 1) == 0)
                  llvm::SUnit::ComputeDepth((llvm::SUnit *)v160);
                if (v161 >= *(_DWORD *)(v160 + 240) + *(unsigned __int16 *)(v160 + 226))
                  v161 = *(_DWORD *)(v160 + 240) + *(unsigned __int16 *)(v160 + 226);
                v162 = v158 + 1;
                while (v162 != v159)
                {
                  v163 = *v162++;
                  v160 = v163;
                  if (v163 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v158 = v162 - 1;
                    goto LABEL_353;
                  }
                }
              }
              v164 = *(_QWORD *)(a2 + 8);
              if ((*(_BYTE *)(v164 + 236) & 1) == 0)
                llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
              if (*(_DWORD *)(v164 + 240) >= v161)
              {
                v153 = 1;
              }
              else
              {
                v165 = *(_QWORD *)(a3 + 8);
                if ((*(_BYTE *)(v165 + 236) & 1) == 0)
                  llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
                v153 = *(_DWORD *)(v165 + 240) >= v161;
              }
            }
            if (v150 <= 4)
              v153 = 0;
            if (!*(_BYTE *)(a1 + 1049) && !v153)
            {
              v166 = *(_DWORD *)(a3 + 44);
              if (v166 == 0x7FFFFFFF)
              {
                v167 = 0;
                v168 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 3104)
                     + ((unint64_t)*(unsigned int *)(*(_QWORD *)(a3 + 8) + 192) << 6);
                while (!(unsigned __int16)*(_DWORD *)(v168 + v167)
                     || (unsigned __int16)*(_DWORD *)(v168 + v167) - 1 != *(_DWORD *)(a1 + 64))
                {
                  v167 += 4;
                  if (v167 == 64)
                  {
                    v166 = 0;
                    goto LABEL_380;
                  }
                }
                v166 = *(int *)(v168 + v167) >> 16;
LABEL_380:
                *(_DWORD *)(a3 + 44) = v166;
              }
              v169 = *(_DWORD *)(a2 + 44);
              if (v169 == 0x7FFFFFFF)
              {
                v170 = 0;
                v171 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 3104)
                     + ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 192) << 6);
                while (!(unsigned __int16)*(_DWORD *)(v171 + v170)
                     || (unsigned __int16)*(_DWORD *)(v171 + v170) - 1 != *(_DWORD *)(a1 + 64))
                {
                  v170 += 4;
                  if (v170 == 64)
                  {
                    v169 = 0;
                    goto LABEL_388;
                  }
                }
                v169 = *(int *)(v171 + v170) >> 16;
LABEL_388:
                *(_DWORD *)(a2 + 44) = v169;
              }
              if (v166 < v169)
              {
                v10 = 15;
                goto LABEL_4;
              }
              if (v166 > v169)
              {
                if (*(int *)(a2 + 16) >= 16)
                {
                  v11 = 15;
                  goto LABEL_35;
                }
                goto LABEL_36;
              }
            }
            if (*(_BYTE *)(a1 + 2048))
              v172 = v19;
            else
              v172 = 1;
            v173 = v172 | v25;
            v174 = *(_QWORD *)(a3 + 8);
            if ((v173 & 1) != 0)
              goto LABEL_398;
            v180 = *(_QWORD *)(a1 + 2216);
            v181 = (int)*(float *)(v180 + 4 * *(unsigned int *)(v174 + 192));
            result.n128_u32[0] = *(_DWORD *)(v180 + 4 * *(unsigned int *)(*(_QWORD *)(a2 + 8) + 192));
            if (v181 < (int)result.n128_f32[0])
              goto LABEL_74;
            if (v181 <= (int)result.n128_f32[0])
            {
LABEL_398:
              if ((*(_BYTE *)(v174 + 236) & 1) == 0)
                llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
              v175 = *(_DWORD *)(v174 + 240);
              v176 = *(_QWORD *)(a2 + 8);
              if ((*(_BYTE *)(v176 + 236) & 1) == 0)
                llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
              v177 = *(_DWORD *)(v176 + 240);
              if (v175 > v177)
                v177 = v175;
              if (*(_DWORD *)(*(_QWORD *)(a1 + 800) + 4 * *(unsigned int *)(a1 + 960)) > *(_DWORD *)(*(_QWORD *)(a1 + 16) + 276)
                                                                                          * v177)
              {
                v178 = sub_1C4840FD4(a1, a3);
                v179 = sub_1C4840FD4(a1, a2);
                if (v178 > v179)
                {
                  v10 = 20;
                  goto LABEL_4;
                }
                if (v178 < v179)
                {
                  if (*(int *)(a2 + 16) >= 21)
                  {
                    v11 = 20;
                    goto LABEL_35;
                  }
                  goto LABEL_36;
                }
              }
              if (!*(_BYTE *)(a1 + 1049))
              {
                v182 = *(_QWORD *)(a3 + 8);
                if ((*(_BYTE *)(v182 + 236) & 1) == 0)
                  llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
                v183 = *(_DWORD *)(v182 + 240);
                v184 = *(_QWORD *)(a2 + 8);
                if ((*(_BYTE *)(v184 + 236) & 1) == 0)
                  llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
                v185 = *(_DWORD *)(v184 + 240);
                if (v183 > v185)
                {
                  v10 = 22;
                  goto LABEL_4;
                }
                if (v183 < v185)
                {
                  if (*(int *)(a2 + 16) >= 23)
                  {
                    v11 = 22;
                    goto LABEL_35;
                  }
                  goto LABEL_36;
                }
              }
              if (!v190)
                goto LABEL_417;
              if (v189 < (int)v188)
                goto LABEL_59;
              if (v189 <= (int)v188)
              {
LABEL_417:
                if (*(_DWORD *)(*(_QWORD *)(a3 + 8) + 192) > *(_DWORD *)(*(_QWORD *)(a2 + 8) + 192))
                {
                  v10 = 23;
                  goto LABEL_4;
                }
                goto LABEL_36;
              }
              goto LABEL_61;
            }
            goto LABEL_82;
          }
          if (v105 >= v106)
          {
            if (v105 <= v106)
              goto LABEL_250;
            v127 = (_DWORD *)(a2 + 16);
            if (*(int *)(a2 + 16) <= 19)
              goto LABEL_36;
          }
          else
          {
            v127 = (_DWORD *)(a3 + 16);
          }
          *v127 = 19;
          goto LABEL_36;
        }
LABEL_225:
        if (*(int *)(a2 + 16) >= 20)
        {
          v11 = 19;
          goto LABEL_35;
        }
        goto LABEL_36;
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 1056) == 1
        || *(_DWORD *)(a1 + 572) + *(_DWORD *)(a1 + 1064) - *(_DWORD *)(a1 + 576) == 1
        || (v98 = *(unsigned __int8 *)(a3 + 32), v99 = *(unsigned __int8 *)(a2 + 32), v98 == v99))
      {
        if (!*(_BYTE *)(a3 + 32) || !*(_BYTE *)(a2 + 32))
          goto LABEL_230;
        v99 = 1;
        v98 = 1;
      }
      v100 = *(_QWORD *)(a2 + 8);
      if (*(_DWORD *)(v100 + 200) == 1)
        v101 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)((**(_QWORD **)(v100 + 32) & 0xFFFFFFFFFFFFFFF8) + 8)
                                               + 16)
                                   + 17) >> 1) & 1;
      else
        v101 = 0;
      v102 = *(_QWORD *)(a3 + 8);
      if (*(_DWORD *)(v102 + 200) == 1)
        v103 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)((**(_QWORD **)(v102 + 32) & 0xFFFFFFFFFFFFFFF8) + 8)
                                               + 16)
                                   + 17) >> 1) & 1;
      else
        v103 = 0;
      if (!v98)
        v103 = 0;
      if (!v99)
        v101 = 0;
      if (v101 != 1 || v103)
      {
        if ((v103 & (v101 ^ 1)) == 1)
          goto LABEL_225;
        if (!*(_BYTE *)(a1 + 1051))
          goto LABEL_230;
        if (v98 >= v99)
        {
          if (v98 <= v99)
            goto LABEL_230;
          goto LABEL_225;
        }
      }
    }
    v10 = 19;
    goto LABEL_4;
  }
LABEL_37:
  *(_OWORD *)a2 = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 16);
  v26 = *(_OWORD *)(a3 + 32);
  v27 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 58) = *(_OWORD *)(a3 + 58);
  *(_OWORD *)(a2 + 32) = v26;
  *(_OWORD *)(a2 + 48) = v27;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

unint64_t sub_1C4840244(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v5;
  unsigned int v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  result = *(unsigned int *)(a2 + 64);
  if ((_DWORD)result == -1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_DWORD *)(v5 + 252);
    v7 = *(_WORD **)(v5 + 24);
    if (!v7)
    {
      v8 = *(_QWORD *)(a1 + 8);
      v7 = (_WORD *)(*(_QWORD *)(v8 + 672) + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 16) + 6));
      if ((v7[4] & 0x1FFF) == 0x1FFE)
      {
        do
        {
          v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 808) + 200))(*(_QWORD *)(v8 + 808));
          v18 = *(_QWORD *)(v8 + 672);
        }
        while ((*(_WORD *)(v18 + 24 * v17 + 8) & 0x1FFF) == 0x1FFE);
        v7 = (_WORD *)(v18 + 24 * v17);
      }
      *(_QWORD *)(v5 + 24) = v7;
    }
    v9 = (unsigned __int16)v7[6];
    if (v7[6])
    {
      v10 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 176) + 136)
                               + 4 * (unsigned __int16)v7[5]);
      v11 = &v10[2 * v9];
      do
      {
        if (*(_DWORD *)(*(_QWORD *)(a1 + 880) + 4 * *v10) + v10[1] > v6)
          v6 = *(_DWORD *)(*(_QWORD *)(a1 + 880) + 4 * *v10) + v10[1];
        v10 += 2;
      }
      while (v10 != v11);
    }
    v12 = *(_DWORD *)(a1 + 968);
    if ((int)v6 <= v12 + 1
      && sub_1C48408F4(**(_WORD **)(*(_QWORD *)(v5 + 8) + 16), *(unsigned __int8 *)(a1 + 72)))
    {
      v6 = v12 + 2;
    }
    v13 = *(_DWORD *)(a1 + 448);
    if (v13 >= v6)
    {
      result = 0;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(_QWORD *)(v14 + 24);
      if (!v15)
      {
        if (byte_1ED8303C8)
        {
          v16 = *(_QWORD *)(a1 + 8);
          v15 = *(_QWORD *)(v16 + 672);
          if (v15)
          {
            v15 += 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 16) + 6);
            if ((*(_WORD *)(v15 + 8) & 0x1FFF) == 0x1FFE)
            {
              do
              {
                v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 808) + 200))(*(_QWORD *)(v16 + 808));
                v20 = *(_QWORD *)(v16 + 672);
              }
              while ((*(_WORD *)(v20 + 24 * v19 + 8) & 0x1FFF) == 0x1FFE);
              v15 = v20 + 24 * v19;
              v13 = *(_DWORD *)(a1 + 448);
            }
            *(_QWORD *)(v14 + 24) = v15;
          }
        }
        else
        {
          v15 = 0;
        }
      }
      result = v6 - v13;
      if (v15 == *(_QWORD *)(a1 + 80))
        result = result / 3uLL;
    }
    *(_DWORD *)(a2 + 64) = result;
  }
  return result;
}

uint64_t sub_1C4840470(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = 0;
  v3 = sub_1C48404EC(a1, &v7, &v8);
  v4 = a1 + 8;
  if (v3)
    return v8;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v6 = 8;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v6 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v6;
}

uint64_t sub_1C48404EC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_6;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_6;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_6:
  *a3 = v7;
  return result;
}

uint64_t sub_1C484059C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  BOOL v12;
  llvm *UnderlyingObject;
  unint64_t v14;
  _DWORD *v15;
  BOOL v16;
  llvm *v17;
  BOOL v18;
  llvm::MachineOperand *v20;
  const llvm::MachineOperand *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  llvm *v26;

  result = 0;
  if (!a1 || !a2)
    return result;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(a2 + 8);
  v6 = v4[2];
  v7 = *(_QWORD *)(v6 + 16);
  v8 = v5[2];
  v9 = *(_QWORD *)(v8 + 16);
  if ((v7 & 0x100) != 0 && (v9 & 0x100) != 0 || (v7 & 0x2000) != 0 && (v9 & 0x2000) != 0)
  {
    v10 = v4[6];
    if (v10 >= 8)
    {
      if ((v10 & 7) != 0)
      {
        v11 = (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
        v12 = (v4[6] & 7) != 3 || v11 == 0;
        if (v12 || !*v11)
          goto LABEL_14;
      }
      else
      {
        v10 &= 0xFFFFFFFFFFFFFFF8;
        v4[6] = v10;
      }
      if ((v10 & 7) != 0)
      {
        v22 = *(uint64_t **)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v22 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
        v4[6] = v22;
      }
      UnderlyingObject = 0;
      v24 = *v22;
      if ((*v22 & 4) == 0 && (v24 & 0xFFFFFFFFFFFFFFF8) != 0)
        UnderlyingObject = llvm::getUnderlyingObject((llvm *)(v24 & 0xFFFFFFFFFFFFFFF8), (const llvm::Value *)6);
LABEL_15:
      v14 = v5[6];
      if (v14 >= 8)
      {
        if ((v14 & 7) != 0)
        {
          v15 = (_DWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
          v16 = (v5[6] & 7) != 3 || v15 == 0;
          if (v16 || !*v15)
            goto LABEL_22;
        }
        else
        {
          v14 &= 0xFFFFFFFFFFFFFFF8;
          v5[6] = v14;
        }
        if ((v14 & 7) != 0)
        {
          v23 = *(uint64_t **)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v23 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFF8);
          v5[6] = v23;
        }
        v17 = 0;
        v25 = *v23;
        if ((v25 & 4) == 0)
        {
          v26 = (llvm *)(v25 & 0xFFFFFFFFFFFFFFF8);
          if (v26)
            v17 = llvm::getUnderlyingObject(v26, (const llvm::Value *)6);
        }
        goto LABEL_23;
      }
LABEL_22:
      v17 = 0;
LABEL_23:
      if (UnderlyingObject)
        v18 = v17 == 0;
      else
        v18 = 1;
      return !v18 && UnderlyingObject == v17;
    }
LABEL_14:
    UnderlyingObject = 0;
    goto LABEL_15;
  }
  result = 0;
  if ((v7 & 0x20) != 0 && (v9 & 0x20) != 0)
  {
    v20 = (llvm::MachineOperand *)(v4[4] + 32 * *(unsigned __int8 *)(v6 + 4));
    if (*(_BYTE *)v20 == 7
      && (v21 = (const llvm::MachineOperand *)(v5[4] + 32 * *(unsigned __int8 *)(v8 + 4)), *(_BYTE *)v21 == 7))
    {
      return llvm::MachineOperand::isIdenticalTo(v20, v21);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C484073C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE v15[768];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 0x20)
    {
      v14 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6135044(a1, v6, v6 + 24 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v15;
  do
  {
    v11 = *(_QWORD *)(a1 + v8 + 8);
    v10 = *(_QWORD *)(a1 + v8 + 16);
    if ((v11 != -4096 || v10 != -4096) && (v11 != -8192 || v10 != -8192))
    {
      *(_OWORD *)v9 = *(_OWORD *)(a1 + v8 + 8);
      v9[16] = *(_BYTE *)(a1 + v8 + 24);
      v9 += 24;
    }
    v8 += 24;
  }
  while (v8 != 768);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  return sub_1C6135044(a1, (uint64_t)v15, (uint64_t)v9);
}

uint64_t sub_1C48408F4(unsigned __int16 a1, int a2)
{
  uint64_t result;
  unsigned int v4;

  result = 0;
  switch(a1)
  {
    case 0x43Fu:
    case 0x440u:
    case 0x442u:
    case 0x443u:
    case 0x455u:
    case 0x456u:
    case 0x458u:
    case 0x459u:
    case 0x45Fu:
    case 0x460u:
    case 0x462u:
    case 0x463u:
    case 0x465u:
    case 0x467u:
    case 0x469u:
    case 0x46Bu:
    case 0x46Du:
    case 0x46Fu:
    case 0x471u:
    case 0x473u:
    case 0x475u:
    case 0x476u:
    case 0x478u:
    case 0x479u:
    case 0x47Bu:
    case 0x47Du:
    case 0x47Fu:
    case 0x481u:
    case 0x483u:
    case 0x484u:
    case 0x486u:
    case 0x487u:
      goto LABEL_2;
    case 0x441u:
    case 0x444u:
    case 0x445u:
    case 0x446u:
    case 0x447u:
    case 0x448u:
    case 0x449u:
    case 0x44Au:
    case 0x44Bu:
    case 0x44Cu:
    case 0x44Du:
    case 0x44Eu:
    case 0x44Fu:
    case 0x450u:
    case 0x451u:
    case 0x452u:
    case 0x453u:
    case 0x454u:
    case 0x457u:
    case 0x45Au:
    case 0x45Bu:
    case 0x45Cu:
    case 0x45Du:
    case 0x45Eu:
    case 0x461u:
    case 0x464u:
    case 0x466u:
    case 0x468u:
    case 0x46Au:
    case 0x46Cu:
    case 0x46Eu:
    case 0x470u:
    case 0x472u:
    case 0x474u:
    case 0x477u:
    case 0x47Au:
    case 0x47Cu:
    case 0x47Eu:
    case 0x480u:
    case 0x482u:
    case 0x485u:
      return result;
    default:
      if (a1 - 1305 <= 0x16 && ((1 << (a1 - 25)) & 0x6C06DB) != 0)
      {
        result = a2 ^ 1u;
      }
      else
      {
        v4 = a1 - 2493;
        if (v4 <= 4 && v4 != 2)
LABEL_2:
          result = 1;
      }
      break;
  }
  return result;
}

BOOL sub_1C4840970(unsigned __int16 a1)
{
  return a1 - 11747 < 0x20 || a1 - 291 < 0x10;
}

uint64_t sub_1C4840998(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v3 = 8;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
      return 0;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v4 = v3 - 1;
  LODWORD(v5) = (37 * *a2) & (v3 - 1);
  v6 = (int *)(v2 + 8 * v5);
  v7 = *v6;
  if (*a2 == *v6)
  {
LABEL_8:
    *v6 = -2;
    v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  v8 = 1;
  while (v7 != -1)
  {
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v7 = *(_DWORD *)(v2 + 8 * v5);
    if (*a2 == v7)
    {
      v6 = (int *)(v2 + 8 * v5);
      goto LABEL_8;
    }
  }
  return 0;
}

uint64_t sub_1C4840A30(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (37 * *a2) & (v4 - 1);
  v7 = (_DWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4840AE0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  _DWORD v14[16];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_DWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6135130(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_DWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      *v9 = v10;
      v9[1] = *(_DWORD *)(a1 + v8 + 12);
      v9 += 2;
    }
    v8 += 8;
  }
  while (v8 != 64);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6135130(a1, v14, v9);
}

BOOL sub_1C4840C54(uint64_t a1)
{
  unsigned __int16 *v1;
  int v2;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  v1 = *(unsigned __int16 **)(a1 + 16);
  v2 = *v1;
  if ((v2 - 9) <= 0x3C && ((1 << (v2 - 9)) & 0x1000000000000605) != 0 || v2 == 0)
    return 0;
  v5 = *((_QWORD *)v1 + 1);
  if ((v5 & 0x10) != 0)
    return 0;
  v6 = *((_QWORD *)v1 + 2);
  if ((v6 & 1) != 0)
    return 0;
  if ((v2 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) & 8) != 0)
    return (v6 & 0xC0) != 0;
  v7 = *(_WORD *)(a1 + 44);
  if ((v7 & 0xC) != 0 && (v7 & 4) == 0)
  {
    if ((v5 & 0x80000) == 0)
    {
      while ((*(_WORD *)(a1 + 44) & 8) != 0)
      {
        a1 = *(_QWORD *)(a1 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 10) & 8) != 0)
          return (v6 & 0xC0) != 0;
      }
      return 0;
    }
  }
  else if ((v5 & 0x80000) == 0)
  {
    return 0;
  }
  return (v6 & 0xC0) != 0;
}

uint64_t sub_1C4840CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  int v11;

  v2 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v2 == -1)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(unsigned int *)(a1 + 64);
    v5 = *(_DWORD *)(*(_QWORD *)(v3 + 4912) + 4 * v4);
    v6 = *(_DWORD *)(a2 + 44);
    if (v6 == 0x7FFFFFFF)
    {
      v7 = 0;
      v8 = *(_QWORD *)(v3 + 3104) + ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 192) << 6);
      while (1)
      {
        v9 = (unsigned __int16)*(_DWORD *)(v8 + v7);
        v10 = v9 != 0;
        v11 = v9 - 1;
        if (v10 && v11 == (_DWORD)v4)
          break;
        v7 += 4;
        if (v7 == 64)
        {
          v6 = 0;
          goto LABEL_11;
        }
      }
      v6 = *(int *)(v8 + v7) >> 16;
LABEL_11:
      *(_DWORD *)(a2 + 44) = v6;
    }
    LODWORD(v2) = v6 + v5;
    if ((float)(*(float *)(a1 + 2432) * (float)*(unsigned int *)(a1 + 1936)) <= (float)v2)
      v2 = v2;
    else
      v2 = 0;
    *(_DWORD *)(a2 + 56) = v2;
  }
  return v2;
}

uint64_t sub_1C4840D90(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  int v12;

  result = *(unsigned int *)(a2 + 60);
  if ((_DWORD)result == -1)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 64);
    v6 = *(_DWORD *)(*(_QWORD *)(v4 + 4912) + 4 * v5);
    v7 = *(_DWORD *)(a2 + 44);
    if (v7 == 0x7FFFFFFF)
    {
      v8 = 0;
      v9 = *(_QWORD *)(v4 + 3104) + ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 8) + 192) << 6);
      while (1)
      {
        v10 = (unsigned __int16)*(_DWORD *)(v9 + v8);
        v11 = v10 != 0;
        v12 = v10 - 1;
        if (v11 && v12 == (_DWORD)v5)
          break;
        v8 += 4;
        if (v8 == 64)
        {
          v7 = 0;
          goto LABEL_11;
        }
      }
      v7 = *(int *)(v9 + v8) >> 16;
LABEL_11:
      *(_DWORD *)(a2 + 44) = v7;
    }
    result = (v7 + v6);
    *(_DWORD *)(a2 + 60) = result;
  }
  return result;
}

uint64_t sub_1C4840E14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v2 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v2 == -1)
  {
    if (*(_BYTE *)(a2 + 33))
      goto LABEL_3;
    v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
    v5 = v4;
    if ((*(_WORD *)(v4 + 44) & 4) != 0)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      do
        v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v5 + 44) & 4) != 0);
    }
    v6 = *(_QWORD *)(v4 + 24) + 48;
    v7 = *(_DWORD **)(v5 + 32);
    v8 = *(unsigned int *)(v5 + 40);
    v9 = &v7[8 * v8];
    if (!(_DWORD)v8)
    {
      v24 = *(_QWORD *)(v5 + 8);
      if (v24 == v6)
      {
        v5 = v6;
      }
      else
      {
        v5 = v6;
        if ((*(_WORD *)(v24 + 44) & 4) != 0)
        {
          do
          {
            v25 = v24;
            v26 = *(unsigned int *)(v24 + 40);
            if ((_DWORD)v26)
            {
              v5 = v24;
              goto LABEL_44;
            }
            v24 = *(_QWORD *)(v24 + 8);
          }
          while (v24 != v6 && (*(_WORD *)(v24 + 44) & 4) != 0);
          v5 = v6;
LABEL_44:
          v7 = *(_DWORD **)(v25 + 32);
          v9 = &v7[8 * v26];
        }
      }
    }
    if (v7 == v9)
    {
LABEL_3:
      v2 = 0;
      goto LABEL_4;
    }
    v2 = 0;
LABEL_10:
    if (*v7)
      goto LABEL_4;
    if ((*v7 & 0x1000000) == 0)
      goto LABEL_4;
    v10 = v7[1];
    if (!v10)
      goto LABEL_4;
    v11 = 0;
    v12 = *(unsigned int *)(a1 + 744);
    v13 = v2;
    while (1)
    {
      v14 = v11;
      v15 = a1 + 48 * v12;
      v16 = *(unsigned int *)(v15 + 656);
      if ((_DWORD)v16)
      {
        v17 = 0;
        v18 = *(int **)(v15 + 648);
        v19 = 4 * v16;
        do
        {
          v20 = *v18++;
          v17 += v20 == v10;
          v19 -= 4;
        }
        while (v19);
        v11 = v14 + 1;
        v2 = (v14 + 1);
        if (v17)
          goto LABEL_21;
      }
      else
      {
        v11 = v14 + 1;
      }
      v2 = v13;
LABEL_21:
      v12 = (v12 & 1) == 0;
      v13 = v2;
      if (v14)
      {
        v7 += 8;
        if (v7 != v9)
          goto LABEL_31;
        v21 = *(_QWORD *)(v5 + 8);
        if (v21 == v6)
          goto LABEL_4;
        v7 = v9;
        v5 = v6;
        if ((*(_WORD *)(v21 + 44) & 4) != 0)
        {
          while (1)
          {
            v22 = v21;
            v23 = *(unsigned int *)(v21 + 40);
            if ((_DWORD)v23)
              break;
            v21 = *(_QWORD *)(v21 + 8);
            if (v21 == v6 || (*(_WORD *)(v21 + 44) & 4) == 0)
            {
              v5 = v6;
              goto LABEL_30;
            }
          }
          v5 = v21;
LABEL_30:
          v7 = *(_DWORD **)(v22 + 32);
          v9 = &v7[8 * v23];
        }
LABEL_31:
        if (v7 == v9)
        {
LABEL_4:
          *(_DWORD *)(a2 + 20) = v2;
          return v2;
        }
        goto LABEL_10;
      }
    }
  }
  return v2;
}

uint64_t sub_1C4840FD4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  result = *(unsigned int *)(a2 + 48);
  if ((_DWORD)result == -1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_WORD **)(v5 + 24);
    if (!v6)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v6 = (_WORD *)(*(_QWORD *)(v7 + 672) + 24 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 16) + 6));
      if ((v6[4] & 0x1FFF) == 0x1FFE)
      {
        do
        {
          v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 808) + 200))(*(_QWORD *)(v7 + 808));
          v11 = *(_QWORD *)(v7 + 672);
        }
        while ((*(_WORD *)(v11 + 24 * v10 + 8) & 0x1FFF) == 0x1FFE);
        v6 = (_WORD *)(v11 + 24 * v10);
      }
      *(_QWORD *)(v5 + 24) = v6;
    }
    if (v6[6])
    {
      v8 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 176) + 136)
                              + 4 * (unsigned __int16)v6[5]
                              + 2);
      v9 = 4 * (unsigned __int16)v6[6];
      while (*(_DWORD *)(a1 + 960) != *(v8 - 1))
      {
        v8 += 2;
        v9 -= 4;
        if (!v9)
          goto LABEL_9;
      }
      result = *v8;
    }
    else
    {
LABEL_9:
      result = 0;
    }
    *(_DWORD *)(a2 + 48) = result;
  }
  return result;
}

void sub_1C48410F0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1C4841174((uint64_t)a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1C4841174(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_20:
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v18 = 1;
      else
        v18 = (v6 - v10) >> 2;
      if (!(v18 >> 61))
      {
        v19 = (char *)operator new(8 * v18);
        v20 = &v19[8 * (v18 >> 2)];
        v21 = &v19[8 * v18];
        v23 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v23 & 0xFFFFFFFFFFFFFFF8];
          v24 = 8 * (v23 >> 3);
          v25 = &v19[8 * (v18 >> 2)];
          do
          {
            v26 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v25 = v26;
            v25 += 8;
            v24 -= 8;
          }
          while (v24);
        }
        goto LABEL_18;
      }
LABEL_47:
      sub_1C4764EE4();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_20;
  }
  v27 = *(_QWORD *)(a1 + 16);
  v28 = v27 - *(_QWORD *)(a1 + 8);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = v29 - *(_QWORD *)a1;
  if (v28 < v30)
  {
    if (v29 != v27)
    {
      *(_QWORD *)&v46 = operator new(0x1000uLL);
      sub_1C61351F0(a1, &v46);
      return;
    }
    *(_QWORD *)&v46 = operator new(0x1000uLL);
    sub_1C6135314((void **)a1, &v46);
    v31 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v32 = *v31;
    v7 = (char *)(v31 + 1);
    v8 = v32;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_20;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v33 = 1;
      else
        v33 = (v6 - v10) >> 2;
      if (!(v33 >> 61))
      {
        v19 = (char *)operator new(8 * v33);
        v20 = &v19[8 * (v33 >> 2)];
        v21 = &v19[8 * v33];
        v34 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v34 & 0xFFFFFFFFFFFFFFF8];
          v35 = 8 * (v34 >> 3);
          v36 = &v19[8 * (v33 >> 2)];
          do
          {
            v37 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v36 = v37;
            v36 += 8;
            v35 -= 8;
          }
          while (v35);
        }
LABEL_18:
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v20;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v21;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_20;
      }
      goto LABEL_47;
    }
    goto LABEL_5;
  }
  if (v29 == *(_QWORD *)a1)
    v38 = 1;
  else
    v38 = v30 >> 2;
  v48 = a1 + 24;
  if (v38 >> 61)
    goto LABEL_47;
  *(_QWORD *)&v46 = operator new(8 * v38);
  *((_QWORD *)&v46 + 1) = v46 + v28;
  *(_QWORD *)&v47 = v46 + v28;
  *((_QWORD *)&v47 + 1) = v46 + 8 * v38;
  v45 = operator new(0x1000uLL);
  sub_1C61351F0((uint64_t)&v46, &v45);
  v39 = *(char **)(a1 + 16);
  if (v39 == *(char **)(a1 + 8))
  {
    v40 = *(char **)(a1 + 16);
  }
  else
  {
    do
    {
      v39 -= 8;
      sub_1C6135314((void **)&v46, v39);
    }
    while (v39 != *(char **)(a1 + 8));
    v40 = *(char **)(a1 + 16);
  }
  v41 = *(char **)a1;
  v42 = v46;
  v43 = v47;
  *(_QWORD *)&v46 = *(_QWORD *)a1;
  *((_QWORD *)&v46 + 1) = v39;
  v44 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)a1 = v42;
  *(_OWORD *)(a1 + 16) = v43;
  *(_QWORD *)&v47 = v40;
  *((_QWORD *)&v47 + 1) = v44;
  if (v40 != v39)
    *(_QWORD *)&v47 = &v40[(v39 - v40 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v41)
    operator delete(v41);
}

uint64_t sub_1C484143C(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1C4841500@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] <= 1uLL)
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  else if (v4 >= *(_QWORD *)&v3)
  {
    v4 %= *(_QWORD *)&v3;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_25;
  v9 = v7[1];
  if (v5.u32[0] <= 1uLL)
  {
    v9 &= *(_QWORD *)&v3 - 1;
  }
  else if (v9 >= *(_QWORD *)&v3)
  {
    v9 %= *(_QWORD *)&v3;
  }
  if (v9 != v4)
  {
LABEL_25:
    if (!*a2)
      goto LABEL_8;
    v11 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] <= 1uLL)
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    else if (v11 >= *(_QWORD *)&v3)
    {
      v11 %= *(_QWORD *)&v3;
    }
    if (v11 != v4)
LABEL_8:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v8 = *a2;
  if (*a2)
  {
    v10 = *(_QWORD *)(v8 + 8);
    if (v5.u32[0] <= 1uLL)
    {
      v10 &= *(_QWORD *)&v3 - 1;
    }
    else if (v10 >= *(_QWORD *)&v3)
    {
      v10 %= *(_QWORD *)&v3;
    }
    if (v10 != v4)
    {
      *(_QWORD *)(*result + 8 * v10) = v7;
      v8 = *a2;
    }
  }
  *v7 = v8;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

_QWORD *sub_1C4841650@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] <= 1uLL)
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  else if (v4 >= *(_QWORD *)&v3)
  {
    v4 %= *(_QWORD *)&v3;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_23;
  v8 = v7[1];
  if (v5.u32[0] <= 1uLL)
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  else if (v8 >= *(_QWORD *)&v3)
  {
    v8 %= *(_QWORD *)&v3;
  }
  if (v8 != v4)
  {
LABEL_23:
    if (!*a2)
      goto LABEL_14;
    v11 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] <= 1uLL)
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    else if (v11 >= *(_QWORD *)&v3)
    {
      v11 %= *(_QWORD *)&v3;
    }
    if (v11 != v4)
LABEL_14:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v9 = *a2;
  if (*a2)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v5.u32[0] <= 1uLL)
    {
      v10 &= *(_QWORD *)&v3 - 1;
    }
    else if (v10 >= *(_QWORD *)&v3)
    {
      v10 %= *(_QWORD *)&v3;
    }
    if (v10 != v4)
    {
      *(_QWORD *)(*result + 8 * v10) = v7;
      v9 = *a2;
    }
  }
  *v7 = v9;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1C4841794()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C48417A8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t i;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t *v19;
  int64_t *v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  void *v26;
  uint64_t v27;
  _BYTE v28[32];
  void *v29;
  uint64_t v30;
  _QWORD v31[5];

  v31[4] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 48);
  for (i = *(_QWORD *)(a2 + 56); v2 != i; v2 += 272)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) + 16) & 0x20) != 0)
    {
      v29 = v31;
      v30 = 0x400000000;
      v26 = v28;
      v27 = 0x400000000;
      v4 = *(unsigned int *)(v2 + 120);
      if ((_DWORD)v4)
      {
        v5 = 0;
        v6 = *(uint64_t **)(v2 + 112);
        v7 = 16 * v4;
        do
        {
          v8 = *v6;
          if ((~*(_DWORD *)v6 & 6) == 0)
          {
            v9 = v8 & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
            {
              if (v5 >= HIDWORD(v30))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v5 + 1, 8);
                v5 = v30;
              }
              *((_QWORD *)v29 + v5) = v9;
              v5 = v30 + 1;
              LODWORD(v30) = v30 + 1;
            }
          }
          v6 += 2;
          v7 -= 16;
        }
        while (v7);
        if (v5)
        {
          v10 = (unint64_t *)v29;
          v11 = 8 * v5;
          do
          {
            v12 = *v10++;
            sub_1C4841A0C(v12, v2);
            v11 -= 8;
          }
          while (v11);
        }
      }
      v13 = *(_DWORD *)(v2 + 40);
      if (v13)
      {
        v14 = v13 - 1;
        do
        {
          v15 = (uint64_t *)(*(_QWORD *)(v2 + 32) + 16 * v14);
          if ((~*(_DWORD *)v15 & 6) == 0)
          {
            llvm::SUnit::removePred(v2, (const llvm::SDep *)(*(_QWORD *)(v2 + 32) + 16 * v14));
            v16 = *v15;
            v17 = v27;
            if (v27 >= (unint64_t)HIDWORD(v27))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, (uint64_t)v28, v27 + 1, 8);
              v17 = v27;
            }
            *((_QWORD *)v26 + v17) = v16 & 0xFFFFFFFFFFFFFFF8;
            LODWORD(v27) = v27 + 1;
          }
        }
        while ((unint64_t)v14--);
      }
      if ((_DWORD)v30)
      {
        v19 = (int64_t *)v29;
        v20 = (int64_t *)((char *)v29 + 8 * v30);
        do
        {
          if ((_DWORD)v27)
          {
            v21 = *v19;
            v22 = (uint64_t *)v26;
            v23 = 8 * v27;
            do
            {
              v24 = *v22++;
              v25[0] = v24 | 6;
              v25[1] = 0;
              llvm::SUnit::addPred(v21, (const llvm::SDep *)v25, 1);
              v23 -= 8;
            }
            while (v23);
          }
          ++v19;
        }
        while (v19 != v20);
      }
      if (v26 != v28)
        free(v26);
      if (v29 != v31)
        free(v29);
    }
  }
}

void sub_1C4841A0C(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  llvm::SDep *v12;
  uint64_t v13;
  llvm::SDep *v14;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  v14 = (llvm::SDep *)v16;
  v15 = 0x400000000;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2)
  {
    v5 = 0;
    v6 = 16 * v2;
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 8);
    do
    {
      v8 = *(v7 - 1);
      if ((~(_BYTE)v8 & 6) == 0 && (v8 & 0xFFFFFFFFFFFFFFF8) == a2)
      {
        v10 = *v7;
        if (v5 >= HIDWORD(v15))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v5 + 1, 16);
          v5 = v15;
        }
        v11 = (_QWORD *)((char *)v14 + 16 * v5);
        *v11 = v8;
        v11[1] = v10;
        v5 = v15 + 1;
        LODWORD(v15) = v15 + 1;
      }
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
    v12 = v14;
    if (v5)
    {
      v13 = 16 * v5;
      do
      {
        llvm::SUnit::removePred(a1, v12);
        v12 = (llvm::SDep *)((char *)v12 + 16);
        v13 -= 16;
      }
      while (v13);
      v12 = v14;
    }
    if (v12 != (llvm::SDep *)v16)
      free(v12);
  }
}

void sub_1C4841B5C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4841B70(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t *v26;
  int64_t *v27;
  uint64_t v28;
  unsigned int v29;
  int64_t *v30;
  uint64_t v31;
  int64_t *v32;
  int64_t v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  const llvm::SDep *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  int64_t *v58;
  int64_t *v59;
  uint64_t v60;
  unsigned int v61;
  int64_t *v62;
  uint64_t v63;
  int64_t *v64;
  int64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t i;
  _QWORD v69[2];
  int64_t *v70;
  int64_t *v71;
  uint64_t v72;
  int v73;
  _BYTE v74[32];
  char *v75;
  char *v76;
  uint64_t v77;
  int v78;
  _BYTE v79[32];
  int64_t *v80;
  int64_t *v81;
  uint64_t v82;
  int v83;
  _BYTE v84[32];
  char *v85;
  char *v86;
  uint64_t v87;
  int v88;
  _BYTE v89[32];
  uint64_t *v90;
  uint64_t v91;
  _BYTE v92[32];
  unint64_t *v93;
  uint64_t v94;
  _QWORD v95[6];

  v95[4] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 48);
  for (i = *(_QWORD *)(a2 + 56); v2 != i; v2 += 272)
  {
    if (sub_1C4840970(**(_WORD **)(*(_QWORD *)(v2 + 8) + 16)))
    {
      v93 = v95;
      v94 = 0x400000000;
      v3 = *(unsigned int *)(v2 + 120);
      if ((_DWORD)v3)
      {
        v4 = 0;
        v5 = *(uint64_t **)(v2 + 112);
        v6 = 16 * v3;
        do
        {
          v7 = *v5;
          if ((~*(_DWORD *)v5 & 6) == 0)
          {
            v8 = v7 & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
            {
              v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 16);
              if ((*(_WORD *)v9 & 0xFFFE) == 0x2EC4 || (*(_BYTE *)(v9 + 17) & 0x10) != 0)
              {
                if (v4 >= HIDWORD(v94))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, v4 + 1, 8);
                  v4 = v94;
                }
                v93[v4] = v8;
                v4 = v94 + 1;
                LODWORD(v94) = v94 + 1;
              }
            }
          }
          v5 += 2;
          v6 -= 16;
        }
        while (v6);
        if (v4)
        {
          v10 = v93;
          v11 = 8 * v4;
          do
          {
            v12 = *v10++;
            sub_1C4841A0C(v12, v2);
            v11 -= 8;
          }
          while (v11);
        }
      }
      v85 = v89;
      v86 = v89;
      v87 = 4;
      v88 = 0;
      v13 = *(unsigned int *)(v2 + 120);
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD **)(v2 + 112);
        v15 = 16 * v13;
        do
        {
          if ((~*(_DWORD *)v14 & 6) == 0)
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v85, *v14 & 0xFFFFFFFFFFFFFFF8);
          v14 += 2;
          v15 -= 16;
        }
        while (v15);
      }
      v80 = (int64_t *)v84;
      v81 = (int64_t *)v84;
      v82 = 4;
      v83 = 0;
      v16 = v94;
      if ((_DWORD)v94)
      {
        do
        {
          v17 = v93[--v16];
          LODWORD(v94) = v16;
          v18 = *(unsigned int *)(v17 + 120);
          if ((_DWORD)v18)
          {
            v19 = *(uint64_t **)(v17 + 112);
            v20 = 16 * v18;
            do
            {
              v21 = *v19;
              if ((~*(_DWORD *)v19 & 6) == 0)
              {
                v22 = v21 & 0xFFFFFFFFFFFFFFF8;
                if (*(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
                {
                  v23 = (char *)sub_1C477672C((uint64_t)&v85, v22);
                  v24 = v86 == v85 ? (uint64_t *)((char *)&v87 + 4) : &v87;
                  if (v23 == &v86[8 * *(unsigned int *)v24])
                  {
                    v25 = *(_QWORD *)(*(_QWORD *)(v22 + 8) + 16);
                    if ((*(_WORD *)v25 & 0xFFFE) != 0x2EC4 && (*(_BYTE *)(v25 + 17) & 0x10) == 0)
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v80, v22);
                  }
                }
              }
              v19 += 2;
              v20 -= 16;
            }
            while (v20);
            v16 = v94;
          }
        }
        while (v16);
        v27 = v80;
        v26 = v81;
        v29 = v82;
        LODWORD(v28) = HIDWORD(v82);
      }
      else
      {
        LODWORD(v28) = 0;
        v29 = 4;
        v26 = (int64_t *)v84;
        v27 = (int64_t *)v84;
      }
      if (v26 == v27)
        v28 = v28;
      else
        v28 = v29;
      v30 = v26;
      if ((_DWORD)v28)
      {
        v31 = 8 * v28;
        v30 = v26;
        while ((unint64_t)*v30 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v30;
          v31 -= 8;
          if (!v31)
            goto LABEL_52;
        }
      }
      v32 = &v26[v28];
      if (v30 != v32)
      {
        v33 = *v30;
LABEL_48:
        v75 = (char *)(v2 | 6);
        v76 = 0;
        llvm::SUnit::addPred(v33, (const llvm::SDep *)&v75, 1);
        v34 = (unint64_t *)(v30 + 1);
        while (v34 != (unint64_t *)v32)
        {
          v35 = *v34++;
          v33 = v35;
          if (v35 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v30 = (int64_t *)(v34 - 1);
            goto LABEL_48;
          }
        }
      }
LABEL_52:
      v90 = (uint64_t *)v92;
      v91 = 0x400000000;
      v36 = *(_DWORD *)(v2 + 40);
      if (v36)
      {
        v37 = 0;
        v38 = v36 - 1;
        do
        {
          v39 = (const llvm::SDep *)(*(_QWORD *)(v2 + 32) + 16 * v38);
          v40 = *(_QWORD *)v39;
          if ((~*(_DWORD *)v39 & 6) == 0)
          {
            v41 = v40 & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
            {
              v42 = *(_QWORD *)(*(_QWORD *)(v41 + 8) + 16);
              if ((*(_WORD *)v42 & 0xFFFE) == 0x2EC4 || (*(_BYTE *)(v42 + 17) & 0x10) != 0)
              {
                llvm::SUnit::removePred(v2, v39);
                v43 = v91;
                if (v91 >= (unint64_t)HIDWORD(v91))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, (uint64_t)v92, v91 + 1, 8);
                  v43 = v91;
                }
                v90[v43] = v41;
                v37 = v91 + 1;
                LODWORD(v91) = v91 + 1;
              }
            }
          }
        }
        while ((unint64_t)v38--);
        v45 = v90;
        if (v37)
        {
          v46 = &v90[v37];
          do
          {
            v47 = *v45;
            v75 = v79;
            v76 = v79;
            v77 = 4;
            v78 = 0;
            v48 = *(unsigned int *)(v47 + 120);
            if ((_DWORD)v48)
            {
              v49 = *(_QWORD **)(v47 + 112);
              v50 = 16 * v48;
              do
              {
                if ((~*(_DWORD *)v49 & 6) == 0)
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v75, *v49 & 0xFFFFFFFFFFFFFFF8);
                v49 += 2;
                v50 -= 16;
              }
              while (v50);
            }
            v70 = (int64_t *)v74;
            v71 = (int64_t *)v74;
            v72 = 4;
            v73 = 0;
            v51 = *(unsigned int *)(v2 + 120);
            if ((_DWORD)v51)
            {
              v52 = *(uint64_t **)(v2 + 112);
              v53 = 16 * v51;
              do
              {
                v54 = *v52;
                if ((~*(_DWORD *)v52 & 6) == 0)
                {
                  v55 = v54 & 0xFFFFFFFFFFFFFFF8;
                  v56 = (char *)sub_1C477672C((uint64_t)&v75, v54 & 0xFFFFFFFFFFFFFFF8);
                  v57 = v76 == v75 ? (uint64_t *)((char *)&v77 + 4) : &v77;
                  if (v56 == &v76[8 * *(unsigned int *)v57])
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v70, v55);
                }
                v52 += 2;
                v53 -= 16;
              }
              while (v53);
              v59 = v70;
              v58 = v71;
              v61 = v72;
              LODWORD(v60) = HIDWORD(v72);
            }
            else
            {
              LODWORD(v60) = 0;
              v61 = 4;
              v59 = (int64_t *)v74;
              v58 = (int64_t *)v74;
            }
            if (v58 == v59)
              v60 = v60;
            else
              v60 = v61;
            v62 = v58;
            if ((_DWORD)v60)
            {
              v63 = 0;
              while ((unint64_t)v58[v63] >= 0xFFFFFFFFFFFFFFFELL)
              {
                if (v60 == ++v63)
                  goto LABEL_96;
              }
              v62 = &v58[v63];
            }
            v64 = &v58[v60];
            if (v62 != v64)
            {
              v65 = *v62;
LABEL_91:
              v69[0] = v47 | 6;
              v69[1] = 0;
              llvm::SUnit::addPred(v65, (const llvm::SDep *)v69, 1);
              v66 = (unint64_t *)(v62 + 1);
              while (v66 != (unint64_t *)v64)
              {
                v67 = *v66++;
                v65 = v67;
                if (v67 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v62 = (int64_t *)(v66 - 1);
                  goto LABEL_91;
                }
              }
              v59 = v70;
              v58 = v71;
            }
LABEL_96:
            if (v58 != v59)
              free(v58);
            if (v76 != v75)
              free(v76);
            ++v45;
          }
          while (v45 != v46);
          v45 = v90;
        }
        if (v45 != (uint64_t *)v92)
          free(v45);
      }
      if (v81 != v80)
        free(v81);
      if (v86 != v85)
        free(v86);
      if (v93 != v95)
        free(v93);
    }
  }
}

void sub_1C4842184()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4842198(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x1E0C80C00];
  v3 = a2[2];
  do
  {
    v4 = a2[6];
    v5 = a2[7];
    if (v4 == v5)
      break;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v4 + 8);
      v22 = v24;
      v23 = 0x400000000;
      v8 = *(unsigned int *)(v4 + 40);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD **)(v4 + 32);
        v10 = 16 * v8;
        do
        {
          if ((~*(_DWORD *)v9 & 6) == 0)
          {
            v11 = *v9 & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)(v11 + 192) != -1)
            {
              v12 = *(_QWORD *)(v11 + 8);
              if (**(_WORD **)(v7 + 16) == 13427 || **(_WORD **)(v12 + 16) == 13427)
              {
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 1064))(v3, v7, v12))
                {
                  v13 = *(_OWORD *)v9;
                  v14 = v23;
                  if (v23 >= (unint64_t)HIDWORD(v23))
                  {
                    v20 = *(_OWORD *)v9;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, v23 + 1, 16);
                    v13 = v20;
                    v14 = v23;
                  }
                  *((_OWORD *)v22 + v14) = v13;
                  LODWORD(v23) = v23 + 1;
                }
              }
            }
          }
          v9 += 2;
          v10 -= 16;
        }
        while (v10);
        v15 = (char *)v22;
        v16 = (char *)v22 + 16 * v23;
        if ((_DWORD)v23)
        {
          do
          {
            v21 = *(_OWORD *)v15;
            llvm::SUnit::removePred(v4, (const llvm::SDep *)&v21);
            v17 = *(unsigned int *)(v4 + 120);
            if ((_DWORD)v17)
            {
              v18 = *(_QWORD **)(v4 + 112);
              v19 = 16 * v17;
              do
              {
                if ((~*(_DWORD *)v18 & 6) == 0)
                  llvm::SUnit::addPred(*v18 & 0xFFFFFFFFFFFFFFF8, (const llvm::SDep *)&v21, 1);
                v18 += 2;
                v19 -= 16;
              }
              while (v19);
            }
            v15 += 16;
          }
          while (v15 != v16);
          v6 = 1;
          v15 = (char *)v22;
        }
        if (v15 != (char *)v24)
          free(v15);
      }
      v4 += 272;
    }
    while (v4 != v5);
  }
  while ((v6 & 1) != 0);
}

uint64_t sub_1C484239C()
{
  sub_1C4769074(qword_1ED7EB010, "agx1", "Custom AGX1 scheduler.", (uint64_t)sub_1C61346CC);
  return __cxa_atexit((void (*)(void *))sub_1C476900C, qword_1ED7EB010, &dword_1C475E000);
}

uint64_t sub_1C48423F0()
{
  return 0;
}

uint64_t sub_1C48423FC()
{
  return 0;
}

void sub_1C4842404(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = 0;
}

void sub_1C484240C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_1E7F9DD48;
  v2 = *(_QWORD *)(a1 + 808);
  *(_QWORD *)(a1 + 808) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_1C612DD38((_QWORD *)(a1 + 352));
  if (*(char *)(a1 + 279) < 0)
    operator delete(*(void **)(a1 + 256));
  llvm::TargetSubtargetInfo::~TargetSubtargetInfo((void **)a1);
}

_QWORD *sub_1C484246C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E819E898;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      return sub_1C47A80D0(a1);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  return sub_1C47A80D0(a1);
}

_DWORD *sub_1C48424CC(_DWORD *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5, void *a6, size_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  int v15;
  uint64_t v16;
  const char *v17;
  char v18;
  int v19;
  uint64_t v20;
  const char *v21;
  int v22;
  BOOL v23;
  const std::string::value_type *v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  const std::string::value_type *v31;
  std::string *v32;
  unint64_t size;
  int v34;
  int v35;
  std::string v41;
  _QWORD v42[2];
  uint64_t v43;
  __int16 v44;
  std::string::value_type *v45;
  std::string::size_type v46;
  char v47;

  v15 = a9;
  v16 = a10;
  *(_QWORD *)a1 = &unk_1E7F9E260;
  v17 = *(const char **)(a8 + 136);
  v18 = *(_BYTE *)(a8 + 159);
  v19 = v18;
  if (v18 >= 0)
    v17 = (const char *)(a8 + 136);
  v20 = v18 & 0x7F;
  if (v19 < 0)
    v20 = *(_QWORD *)(a8 + 144);
  if ((*(_DWORD *)(a3 + 24) & 0xFFFFFFFE) == 0x1C)
    v21 = "lm32";
  else
    v21 = "lp64";
  if (v20)
    v21 = v17;
  if ((unint64_t)(v20 - 1) < 3 || *(_DWORD *)v21 == 875982956)
  {
    memset(&v41, 0, sizeof(v41));
    std::string::append(&v41, "e-m:o");
    v23 = 1;
    v24 = "-p:64:64:64";
  }
  else
  {
    v22 = *(_DWORD *)v21;
    memset(&v41, 0, sizeof(v41));
    std::string::append(&v41, "e-m:o");
    v23 = v22 != 842231148;
    if (v22 == 842231148)
      v24 = "-p:64:64:64-p3:32:64:64";
    else
      v24 = "-p:64:64:64";
  }
  std::string::append(&v41, v24);
  if (*(_DWORD *)(a3 + 24) == 29)
  {
    v42[0] = "-p";
    v43 = 5;
    v44 = 2307;
    llvm::Twine::str((llvm::Twine *)v42, &v45);
    if (v47 >= 0)
      v25 = (const std::string::value_type *)&v45;
    else
      v25 = v45;
    if (v47 >= 0)
      v26 = v47 & 0x7F;
    else
      v26 = v46;
    std::string::append(&v41, v25, v26);
    if (v47 < 0)
      operator delete(v45);
    std::string::append(&v41, ":32:64:64");
    v42[0] = "-p";
    v43 = 75;
    v44 = 2307;
    llvm::Twine::str((llvm::Twine *)v42, &v45);
    if (v47 >= 0)
      v27 = (const std::string::value_type *)&v45;
    else
      v27 = v45;
    if (v47 >= 0)
      v28 = v47 & 0x7F;
    else
      v28 = v46;
    std::string::append(&v41, v27, v28);
    if (v47 < 0)
      operator delete(v45);
    std::string::append(&v41, ":32:64:64");
    v16 = a10;
    if (!v23)
    {
      v42[0] = "-p";
      v43 = 7;
      v44 = 2307;
      llvm::Twine::str((llvm::Twine *)v42, &v45);
      if (v47 >= 0)
        v29 = (const std::string::value_type *)&v45;
      else
        v29 = v45;
      if (v47 >= 0)
        v30 = v47 & 0x7F;
      else
        v30 = v46;
      std::string::append(&v41, v29, v30);
      if (v47 < 0)
        operator delete(v45);
      std::string::append(&v41, ":32:64:64");
    }
  }
  std::string::append(&v41, "-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32");
  if ((*(_DWORD *)(a3 + 24) & 0xFFFFFFFE) == 0x1C)
    v31 = "-S128";
  else
    v31 = "-S64";
  std::string::append(&v41, v31);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = &v41;
  else
    v32 = (std::string *)v41.__r_.__value_.__r.__words[0];
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v41.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v41.__r_.__value_.__l.__size_;
  if ((a9 & 0xFF00000000) == 0)
    v15 = 0;
  v34 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 208))(a1, v16);
  llvm::TargetMachine::TargetMachine((uint64_t)a1, a2, v32, size, (__int128 *)a3, a4, a5, v35, a6, a7, (__int128 *)a8);
  *(_QWORD *)a1 = &off_1E8143808;
  a1[136] = v15;
  a1[137] = v34;
  a1[138] = a11;
  if (byte_1ED82F248)
    a1[260] |= 0x80u;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &unk_1E7F9E260;
  return a1;
}

size_t sub_1C4842888(uint64_t a1, const llvm::Function *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  unsigned int v22;
  int j;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  unsigned int v29;
  size_t v30;
  __int128 *p_dst;
  uint64_t v32;
  unsigned int v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  size_t v38;
  size_t *v39;
  size_t v40;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  size_t v45;
  void **v46;
  size_t v47;
  size_t v48;
  int v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *__p[2];
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  void *v59[2];
  uint64_t v60;
  __int128 __dst;
  uint64_t v62;

  v4 = *((_QWORD *)a2 + 14);
  if (!v4 || !*(_DWORD *)(v4 + 8))
  {
    v28 = 0;
    goto LABEL_47;
  }
  v5 = *(_QWORD *)(v4 + 40);
  if (v5 && (v6 = *(_DWORD *)(v5 + 40)) != 0)
  {
    v7 = *(_QWORD *)(v5 + 24);
    v8 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v8 & 1) == 0)
    {
      v53 = *((_QWORD *)a2 + 14);
      v49 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v4 = v53;
      if (v49)
      {
        v50 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v50 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v50;
        __cxa_guard_release(&qword_1ED7EAC88);
        v4 = v53;
      }
    }
    v9 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xBC30287DAC2F782DLL)) ^ ((0x9DDFEA08EB382D69
                                                                              * (qword_1ED7EAC80 ^ 0xBC30287DAC2F782DLL)) >> 47) ^ 0xDF1D5C18CB5D1959);
    v10 = (-348639895 * ((v9 >> 47) ^ v9)) ^ 0x74656772;
    for (i = 1; ; ++i)
    {
      v12 = v10 & (v6 - 1);
      v13 = (uint64_t *)(v7 + 24 * v12);
      v14 = *v13;
      if (*v13 == -1)
      {
        if ("target-cpu" == (char *)-1)
          goto LABEL_20;
      }
      else if (v14 == -2)
      {
        if ("target-cpu" == (char *)-2)
          goto LABEL_20;
      }
      else if (v13[1] == 10 && *(_QWORD *)v14 == 0x632D746567726174 && *(_WORD *)(v14 + 8) == 30064)
      {
LABEL_20:
        v16 = v13[2];
        goto LABEL_22;
      }
      if (v14 == -1)
        break;
      v10 = i + v12;
    }
    v16 = 0;
LABEL_22:
    if (!*(_DWORD *)(v4 + 8))
      goto LABEL_42;
  }
  else
  {
    v16 = 0;
  }
  v17 = *(_QWORD *)(v4 + 40);
  if (!v17 || (v18 = *(_DWORD *)(v17 + 40)) == 0)
  {
LABEL_42:
    v28 = 0;
    if (!v16)
      goto LABEL_47;
    goto LABEL_43;
  }
  v19 = *(_QWORD *)(v17 + 24);
  v20 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v20 & 1) == 0)
  {
    v54 = v19;
    v51 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v19 = v54;
    if (v51)
    {
      v52 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v52 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v52;
      __cxa_guard_release(&qword_1ED7EAC88);
      v19 = v54;
    }
  }
  v21 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1ED7EAC80 ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
  v22 = (-348639895 * ((v21 >> 47) ^ v21)) ^ 0x74616566;
  for (j = 1; ; ++j)
  {
    v24 = v22 & (v18 - 1);
    v25 = v19 + 24 * v24;
    v26 = *(_QWORD **)v25;
    if (*(_QWORD *)v25 == -1)
    {
      if ("target-features" == (char *)-1)
        goto LABEL_40;
      goto LABEL_29;
    }
    if (v26 != (_QWORD *)-2)
      break;
    if ("target-features" == (char *)-2)
      goto LABEL_40;
LABEL_29:
    if (v26 == (_QWORD *)-1)
      goto LABEL_42;
    v22 = j + v24;
  }
  if (*(_QWORD *)(v25 + 8) != 15)
    goto LABEL_29;
  if (*v26 != 0x662D746567726174 || *(_QWORD *)((char *)v26 + 7) != 0x7365727574616566)
    goto LABEL_29;
LABEL_40:
  v28 = *(_QWORD *)(v25 + 16);
  if (v16)
  {
LABEL_43:
    if (*(_BYTE *)(v16 + 8) == 2)
    {
      v29 = *(_DWORD *)(v16 + 12);
    }
    else
    {
      v29 = *(_DWORD *)(v16 + 12);
      if (!v29)
        goto LABEL_47;
    }
    v30 = *(unsigned int *)(v16 + 16);
    if (v30 >= 0x17)
    {
      if ((v30 | 7) == 0x17)
        v32 = (v30 & 0xFFFFFFF8) + 8;
      else
        v32 = v30 | 7;
      p_dst = (__int128 *)operator new(v32 + 1);
      *((_QWORD *)&__dst + 1) = v30;
      v62 = v32 - 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v62) = *(_DWORD *)(v16 + 16);
      p_dst = &__dst;
      if (!(_DWORD)v30)
      {
LABEL_60:
        *((_BYTE *)p_dst + v30) = 0;
        if (v28)
          goto LABEL_61;
        goto LABEL_64;
      }
    }
    memmove(p_dst, (const void *)(v16 + v29 + 25), v30);
    goto LABEL_60;
  }
LABEL_47:
  if (*(char *)(a1 + 519) < 0)
  {
    sub_1C47EBC30(&__dst, *(void **)(a1 + 496), *(_QWORD *)(a1 + 504));
    if (!v28)
      goto LABEL_64;
  }
  else
  {
    __dst = *(_OWORD *)(a1 + 496);
    v62 = *(_QWORD *)(a1 + 512);
    if (!v28)
      goto LABEL_64;
  }
LABEL_61:
  if (*(_BYTE *)(v28 + 8) == 2)
  {
    v33 = *(_DWORD *)(v28 + 12);
    goto LABEL_66;
  }
  v33 = *(_DWORD *)(v28 + 12);
  if (!v33)
  {
LABEL_64:
    if (*(char *)(a1 + 543) < 0)
    {
      sub_1C47EBC30(v59, *(void **)(a1 + 520), *(_QWORD *)(a1 + 528));
    }
    else
    {
      *(_OWORD *)v59 = *(_OWORD *)(a1 + 520);
      v60 = *(_QWORD *)(a1 + 536);
    }
    goto LABEL_76;
  }
LABEL_66:
  v34 = *(unsigned int *)(v28 + 16);
  if (v34 >= 0x17)
  {
    if ((v34 | 7) == 0x17)
      v36 = (v34 & 0xFFFFFFF8) + 8;
    else
      v36 = v34 | 7;
    v35 = operator new(v36 + 1);
    v59[1] = (void *)v34;
    v60 = v36 - 0x7FFFFFFFFFFFFFFFLL;
    v59[0] = v35;
  }
  else
  {
    HIBYTE(v60) = *(_DWORD *)(v28 + 16);
    v35 = v59;
    if (!(_DWORD)v34)
      goto LABEL_75;
  }
  memmove(v35, (const void *)(v28 + v33 + 25), v34);
LABEL_75:
  *((_BYTE *)v35 + v34) = 0;
LABEL_76:
  sub_1C4842EB8((const void **)&__dst, (const void **)v59, (uint64_t)__p);
  if (v56 >= 0)
    v37 = (unsigned __int8 *)__p;
  else
    v37 = (unsigned __int8 *)__p[0];
  if (v56 >= 0)
    v38 = HIBYTE(v56) & 0x7F;
  else
    v38 = (size_t)__p[1];
  v39 = *sub_1C6136E50(a1 + 2144, v37, v38);
  if (SHIBYTE(v56) < 0)
    operator delete(__p[0]);
  v40 = v39[1];
  if (!v40)
  {
    llvm::TargetMachine::resetTargetOptions((llvm::TargetMachine *)a1, a2);
    if (*(char *)(a1 + 471) < 0)
    {
      sub_1C47EBC30(__p, *(void **)(a1 + 448), *(_QWORD *)(a1 + 456));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a1 + 448);
      v56 = *(_QWORD *)(a1 + 464);
    }
    v58 = *(_QWORD *)(a1 + 488);
    v57 = *(_OWORD *)(a1 + 472);
    v42 = operator new();
    v43 = v42;
    if (v62 >= 0)
      v44 = &__dst;
    else
      v44 = (__int128 *)__dst;
    if (v62 >= 0)
      v45 = HIBYTE(v62) & 0x7F;
    else
      v45 = *((_QWORD *)&__dst + 1);
    if (v60 >= 0)
      v46 = v59;
    else
      v46 = (void **)v59[0];
    if (v60 >= 0)
      v47 = HIBYTE(v60) & 0x7F;
    else
      v47 = (size_t)v59[1];
    sub_1C6135728(v42, (__int128 *)__p, v44, v45, v46, v47, (unsigned __int8 *)a1);
    v48 = v39[1];
    v39[1] = v43;
    if (v48)
      (*(void (**)(size_t))(*(_QWORD *)v48 + 8))(v48);
    if (SHIBYTE(v56) < 0)
      operator delete(__p[0]);
    v40 = v39[1];
  }
  if (SHIBYTE(v60) < 0)
    operator delete(v59[0]);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__dst);
  return v40;
}

uint64_t sub_1C4842EB8@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  char v6;
  int v7;
  size_t v8;
  size_t v9;
  char v10;
  int v11;
  size_t v12;
  size_t v13;
  uint64_t result;
  char *v15;
  const void *v16;
  const void *v17;

  v6 = *((_BYTE *)a1 + 23);
  v7 = v6;
  v8 = v6 & 0x7F;
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = (size_t)a1[1];
  v10 = *((_BYTE *)a2 + 23);
  v11 = v10;
  v12 = v10 & 0x7F;
  if (v11 >= 0)
    v13 = v12;
  else
    v13 = (size_t)a2[1];
  result = sub_1C484371C(a3, v13 + v9);
  if (*(char *)(result + 23) >= 0)
    v15 = (char *)result;
  else
    v15 = *(char **)result;
  if (v9)
  {
    if (*((char *)a1 + 23) >= 0)
      v16 = a1;
    else
      v16 = *a1;
    result = (uint64_t)memmove(v15, v16, v9);
  }
  if (v13)
  {
    if (*((char *)a2 + 23) >= 0)
      v17 = a2;
    else
      v17 = *a2;
    result = (uint64_t)memmove(&v15[v9], v17, v13);
  }
  v15[v9 + v13] = 0;
  return result;
}

void sub_1C4842F88(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  const llvm::GPUIterateCombiner *v3;
  uint64_t v4;
  llvm::Pass *GPUIterateCombinePass;
  const llvm::GPUIterateCombiner *v6;
  llvm::Pass *v7;
  void *__p[4];

  llvm::TargetPassConfig::addPass(a1, &unk_1EF8F6ED0);
  strcpy((char *)__p, "After codegen DCE pass");
  HIBYTE(__p[2]) = 22;
  llvm::TargetPassConfig::printAndVerify(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v2 = (llvm::Pass *)sub_1C61258A8();
  llvm::TargetPassConfig::addPass(a1, v2);
  llvm::TargetPassConfig::addPass(a1, &unk_1EF8F6F2A);
  v4 = *((_QWORD *)a1 + 14);
  if (!byte_1ED7EB180 && !*(_BYTE *)(v4 + 1608))
  {
    GPUIterateCombinePass = (llvm::Pass *)llvm::createGPUIterateCombinePass((llvm *)&off_1EF8EB070, v3);
    llvm::TargetPassConfig::addPass(a1, GPUIterateCombinePass);
  }
  llvm::TargetPassConfig::addPass(a1, &unk_1EF8F6FA0);
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_1C64632B0;
  strcpy((char *)__p[0], "After Machine LICM, CSE and Sinking passes");
  llvm::TargetPassConfig::printAndVerify(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  llvm::TargetPassConfig::addPass(a1, &unk_1EF8F6FB6);
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_1C64632C0;
  strcpy((char *)__p[0], "After codegen peephole optimization pass");
  llvm::TargetPassConfig::printAndVerify(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  if (!byte_1ED7EB180)
  {
    if (*(_BYTE *)(v4 + 1608))
    {
      v7 = (llvm::Pass *)llvm::createGPUIterateCombinePass((llvm *)&off_1EF8EB070, v6);
      llvm::TargetPassConfig::addPass(a1, v7);
    }
  }
}

uint64_t sub_1C4843138()
{
  return 0;
}

uint64_t sub_1C4843140()
{
  return 0;
}

uint64_t sub_1C484314C()
{
  return 1;
}

uint64_t sub_1C4843154(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  __int128 v10;
  __int128 v11;
  _BYTE *v12;
  __int128 v13;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
  v9 = (_BYTE *)(a1 + 64);
  if (*((char *)a2 + 87) < 0)
  {
    sub_1C47EBC30(v9, *((void **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v10 = a2[4];
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(__int128 *)((char *)a2 + 88);
  *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a2 + 104);
  *(_OWORD *)(a1 + 88) = v11;
  sub_1C4843224(a1 + 120, (uint64_t *)a2 + 15);
  v12 = (_BYTE *)(a1 + 280);
  if (*((char *)a2 + 303) < 0)
  {
    sub_1C47EBC30(v12, *((void **)a2 + 35), *((_QWORD *)a2 + 36));
  }
  else
  {
    v13 = *(__int128 *)((char *)a2 + 280);
    *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
    *(_OWORD *)v12 = v13;
  }
  return a1;
}

uint64_t sub_1C4843224(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  __int128 v13;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  v5 = a1 + 16;
  if (*((char *)a2 + 39) < 0)
  {
    sub_1C47EBC30((_BYTE *)v5, (void *)a2[2], a2[3]);
  }
  else
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(v5 + 16) = a2[4];
    *(_OWORD *)v5 = v6;
  }
  v7 = (_BYTE *)(a1 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    sub_1C47EBC30(v7, (void *)a2[5], a2[6]);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 5);
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_OWORD *)v7 = v8;
  }
  v9 = (_BYTE *)(a1 + 64);
  if (*((char *)a2 + 87) < 0)
  {
    sub_1C47EBC30(v9, (void *)a2[8], a2[9]);
  }
  else
  {
    v10 = *((_OWORD *)a2 + 4);
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_OWORD *)v9 = v10;
  }
  v11 = (_BYTE *)(a1 + 88);
  if (*((char *)a2 + 111) < 0)
  {
    sub_1C47EBC30(v11, (void *)a2[11], a2[12]);
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 11);
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_OWORD *)v11 = v12;
  }
  v13 = *((_OWORD *)a2 + 7);
  *(_QWORD *)(a1 + 128) = a2[16];
  *(_OWORD *)(a1 + 112) = v13;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  sub_1C484333C((_QWORD *)(a1 + 136), a2[17], a2[18], 0xAAAAAAAAAAAAAAABLL * ((a2[18] - a2[17]) >> 3));
  return a1;
}

_QWORD *sub_1C484333C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = operator new(24 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        result = sub_1C47EBC30(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)v8 = *(_OWORD *)a2;
        v8[2] = *(_QWORD *)(a2 + 16);
      }
      a2 += 24;
      v8 += 3;
    }
    v6[1] = v8;
  }
  return result;
}

uint64_t sub_1C48433E8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v6;

  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  v6 = (void **)(a1 + 256);
  sub_1C4765410(&v6);
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_1C48434B8(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
  if ((result & 0xFF00000000) == 0)
    return 0;
  return result;
}

void sub_1C48434E0(_BYTE *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  char v13;

  v6 = (_QWORD *)operator new();
  v7 = v6;
  v13 = 1;
  if (*a1)
  {
    v11 = a1;
    v8 = 3;
  }
  else
  {
    v8 = 1;
  }
  v12 = v8;
  v10 = *a2;
  v9 = a2[1];
  *v6 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v11, v6 + 1);
  v7[4] = v10;
  v7[5] = v9;
  *((_BYTE *)v7 + 48) = 1;
  *a3 = v7;
}

unint64_t sub_1C484358C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t result;

  v5 = a1 + 80;
  *(_QWORD *)(a1 + 80) += a2;
  v6 = (1 << a3) - 1;
  v7 = -(1 << a3);
  if (((v6 + *(_QWORD *)a1) & (unint64_t)v7) - *(_QWORD *)a1 + a2 <= *(_QWORD *)(a1 + 8) - *(_QWORD *)a1)
  {
    result = (v6 + *(_QWORD *)a1) & v7;
LABEL_8:
    *(_QWORD *)a1 = result + a2;
    return result;
  }
  v8 = v6 + a2;
  if ((unint64_t)(v6 + a2) <= 0x1000)
  {
    sub_1C4843688(a1);
    result = (v6 + *(_QWORD *)a1) & v7;
    goto LABEL_8;
  }
  v9 = operator new(v6 + a2, (std::align_val_t)8uLL);
  v10 = *(unsigned int *)(a1 + 72);
  if (v10 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, v5, v10 + 1, 16);
    LODWORD(v10) = *(_DWORD *)(a1 + 72);
  }
  v11 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 16 * v10);
  *v11 = v9;
  v11[1] = v8;
  ++*(_DWORD *)(a1 + 72);
  return ((unint64_t)v9 + v6) & v7;
}

char *sub_1C4843688(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  char *result;
  char *v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 24) >> 7;
  if (v2 >= 0x1E)
    LOBYTE(v2) = 30;
  v3 = 4096 << v2;
  result = (char *)operator new(4096 << v2, (std::align_val_t)8uLL);
  v5 = result;
  v6 = *(unsigned int *)(a1 + 24);
  if (v6 >= *(_DWORD *)(a1 + 28))
  {
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, a1 + 32, v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 24);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 24);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = &v5[v3];
  return result;
}

uint64_t sub_1C484371C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

BOOL sub_1C484379C(uint64_t a1, int a2, int a3)
{
  return a2 != 55 || a3 == 0;
}

BOOL sub_1C48437B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned __int8 v5;

  v5 = sub_1C47A7FD0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), a3, 0);
  if (!v5)
    return 0;
  return *(_WORD *)(*(_QWORD *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) < 0x10u
      || (*(_WORD *)(*(_QWORD *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) & 0xF0) == 64;
}

BOOL sub_1C4843824(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned __int8 v5;

  v5 = sub_1C47A7FD0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), a3, 0);
  return v5 && (*(_WORD *)(*(_QWORD *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) & 0xB) == 0;
}

uint64_t sub_1C484388C(uint64_t *a1, uint64_t a2, llvm::Value *this, llvm **a4, uint64_t a5)
{
  llvm::Value *v10;
  llvm::Value *v11;
  const llvm::Value *v12;
  unsigned int PointerTypeSizeInBits;
  uint64_t v14;
  llvm **v15;
  uint64_t v16;
  unint64_t v17;
  llvm::UndefValue *AggregateElement;
  BOOL v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  llvm *v23;
  BOOL v24;
  llvm::APFloatBase *SplatValue;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  llvm::StructLayout *StructLayout;
  uint64_t v30;
  llvm::UndefValue *v31;
  BOOL v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  llvm::APInt **v42;
  unsigned int v43;
  llvm::APInt *v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  llvm::APInt *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BOOL4 v54;
  unsigned int v55;
  llvm::Value *v56;
  llvm::Value *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  llvm::Value *v62;
  llvm::Value *v63;
  llvm::APInt *v64;
  unsigned int v65;
  llvm **v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  _QWORD v70[2];
  BOOL v71;
  uint64_t v72;

  v10 = llvm::Value::stripPointerCasts(this);
  if (*((unsigned __int8 *)v10 + 16) >= 4u)
    v11 = 0;
  else
    v11 = v10;
  PointerTypeSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits(*a1, *(_QWORD *)this);
  v69 = PointerTypeSizeInBits;
  if (PointerTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v68, 0, 0);
  else
    v68 = 0;
  v66 = a4;
  v67 = a2 | 4;
  if (!a5)
  {
    v55 = v11 != 0;
    goto LABEL_86;
  }
  v62 = this;
  v63 = v11;
  v14 = 0;
  v15 = &a4[a5];
  do
  {
    v16 = v14;
    v17 = v67 & 0xFFFFFFFFFFFFFFF8;
    if ((v67 & 4) == 0 || !v17)
    {
      AggregateElement = *v66;
      if (*v66)
        v19 = *((_BYTE *)*v66 + 16) == 16;
      else
        v19 = 0;
      if (!v19)
        AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
      v22 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
      v20 = (unsigned int *)((char *)AggregateElement + 24);
      v21 = v22;
      if (v20[2] < 0x41)
        v21 = v20;
      v17 = *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8 * *v21);
    }
    v23 = *a4;
    if (*a4)
      v24 = *((_BYTE *)*a4 + 16) == 16;
    else
      v24 = 0;
    if (!v24)
    {
      SplatValue = llvm::getSplatValue(*a4, v12);
      if (SplatValue)
      {
        if (*((_BYTE *)SplatValue + 16) == 16)
          v23 = SplatValue;
        else
          v23 = 0;
      }
      else
      {
        v23 = 0;
      }
    }
    v26 = v67 & 0xFFFFFFFFFFFFFFF8;
    if ((v67 & 4) == 0 && v26)
    {
      v27 = (unsigned int *)((char *)v23 + 24);
      if (*((_DWORD *)v23 + 8) >= 0x41u)
        v27 = *(unsigned int **)v27;
      v28 = *v27;
      StructLayout = llvm::DataLayout::getStructLayout((llvm::DataLayout *)*a1, (llvm::StructType *)(v67 & 0xFFFFFFFFFFFFFFF8));
      llvm::APInt::operator+=((uint64_t)&v68, *((_QWORD *)StructLayout + v28 + 2));
LABEL_61:
      v14 = v16;
      goto LABEL_62;
    }
    if (*(_BYTE *)(v17 + 8) == 19)
      goto LABEL_85;
    v30 = *a1;
    if (!v26 || (v67 & 4) == 0)
    {
      v31 = *v66;
      if (*v66)
        v32 = *((_BYTE *)*v66 + 16) == 16;
      else
        v32 = 0;
      if (!v32)
        v31 = llvm::Constant::getAggregateElement(v31, 0);
      v35 = (unsigned int *)*((_QWORD *)v31 + 3);
      v33 = (unsigned int *)((char *)v31 + 24);
      v34 = v35;
      if (v33[2] < 0x41)
        v34 = v33;
      v26 = *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * *v34);
    }
    sub_1C4768AD0(v30, v26);
    v37 = (unint64_t)(v36 + 7) >> 3;
    llvm::DataLayout::getAlignment(v30, v26);
    v14 = ((1 << v38) + v37 - 1) & -(1 << v38);
    if (v23)
    {
      v39 = *((_DWORD *)v23 + 8);
      if (v39 < PointerTypeSizeInBits)
      {
        llvm::APInt::sext((llvm *)((char *)v23 + 24), PointerTypeSizeInBits, (llvm::APInt *)&v64);
      }
      else if (v39 > PointerTypeSizeInBits)
      {
        llvm::APInt::trunc((llvm *)((char *)v23 + 24), PointerTypeSizeInBits, (llvm::APInt *)&v64);
      }
      else
      {
        sub_1C5DD14E0((uint64_t)&v64, (uint64_t)v23 + 24);
      }
      v40 = v65;
      if (v65 > 0x40)
      {
        llvm::APInt::tcMultiplyPart(v64, (unint64_t *)v64, (const unint64_t *)v14, 0, ((unint64_t)v65 + 63) >> 6, ((unint64_t)v65 + 63) >> 6, 0);
        v40 = v65;
        if (v65)
        {
LABEL_49:
          v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v40;
          if (v40 >= 0x41)
          {
            v42 = (llvm::APInt **)((char *)v64 + 8 * (((unint64_t)v40 + 63) >> 6) - 8);
            goto LABEL_51;
          }
LABEL_50:
          v42 = &v64;
LABEL_51:
          *v42 = (llvm::APInt *)((unint64_t)*v42 & v41);
          v43 = v65;
          v44 = v64;
          v65 = 0;
          v45 = v69;
          if (v69 >= 0x41)
          {
            v47 = 0;
            v48 = (unint64_t *)v68;
            v49 = ((unint64_t)v69 + 63) >> 6;
            v50 = v64;
            v51 = v49;
            do
            {
              v52 = *(_QWORD *)v50;
              v50 = (llvm::APInt *)((char *)v50 + 8);
              v53 = v52 + *v48;
              v54 = v53 + 1 <= *v48;
              if (v47)
              {
                ++v53;
                v47 = v54;
              }
              else
              {
                v47 = v53 < *v48;
              }
              *v48++ = v53;
              --v51;
            }
            while (v51);
            *(_QWORD *)(v68 + 8 * (v49 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v45;
          }
          else
          {
            if (v69)
              v46 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v69;
            else
              v46 = 0;
            v68 = v46 & ((unint64_t)v64 + v68);
          }
          if (v43 >= 0x41 && v44)
            MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
          if (v65 >= 0x41 && v64)
            MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
          goto LABEL_61;
        }
      }
      else
      {
        v64 = (llvm::APInt *)((_QWORD)v64 * v14);
        if (v65)
          goto LABEL_49;
      }
      v41 = 0;
      goto LABEL_50;
    }
    if (v16)
    {
LABEL_85:
      v55 = 1;
      goto LABEL_86;
    }
LABEL_62:
    ++a4;
    sub_1C4843D7C((uint64_t)&v66);
  }
  while (a4 != v15);
  if (v69 <= 0x3F)
  {
    v58 = (uint64_t)(v68 << -(char)v69) >> -(char)v69;
    v56 = v62;
    v57 = v63;
  }
  else
  {
    v56 = v62;
    v57 = v63;
    if (v69 == 64)
      v58 = v68;
    else
      v58 = *(_QWORD *)v68;
  }
  v59 = *(_QWORD *)v56;
  v60 = *(_DWORD *)(*(_QWORD *)v56 + 8);
  if ((v60 & 0xFE) == 0x12)
    v60 = *(_DWORD *)(**(_QWORD **)(v59 + 16) + 8);
  v70[0] = v57;
  v70[1] = v58;
  v71 = v57 == 0;
  v72 = v14;
  v55 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, unint64_t, _QWORD, _QWORD))(*(_QWORD *)a1[3]
                                                                                                + 1064))(a1[3], *a1, v70, v17, v60 >> 8, 0) ^ 1;
LABEL_86:
  if (v69 >= 0x41 && v68)
    MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
  return v55;
}

uint64_t sub_1C4843D7C(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  llvm::UndefValue *AggregateElement;
  BOOL v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(result + 8);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) == 0 || !v2)
  {
    AggregateElement = **(llvm::UndefValue ***)result;
    if (AggregateElement)
      v4 = *((_BYTE *)AggregateElement + 16) == 16;
    else
      v4 = 0;
    if (!v4)
    {
      v13 = v2;
      v14 = result;
      AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
      v2 = v13;
      result = v14;
    }
    v7 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
    v5 = (unsigned int *)((char *)AggregateElement + 24);
    v6 = v7;
    if (v5[2] >= 0x41)
      v5 = v6;
    v2 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * *v5);
  }
  v8 = *(unsigned __int8 *)(v2 + 8);
  if (v2)
    v9 = v8 == 17;
  else
    v9 = 0;
  if (v9 || (v2 ? (v10 = (v8 & 0xFE) == 18) : (v10 = 0), v10))
  {
    v12 = *(_QWORD *)(v2 + 24) | 4;
  }
  else
  {
    v11 = v2 & 0xFFFFFFFFFFFFFFFBLL;
    if (v8 == 16)
      v12 = v11;
    else
      v12 = 0;
  }
  *(_QWORD *)result += 8;
  *(_QWORD *)(result + 8) = v12;
  return result;
}

uint64_t sub_1C4843E38(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  uint64_t i;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  BOOL v32;
  uint64_t v33;
  unsigned int v34;
  void **p_dst;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _BOOL4 v62;
  unint64_t v63;
  char *v64;
  _DWORD *v66;
  uint64_t v67;
  uint64_t **v68;
  uint64_t **v69;
  uint64_t v70;
  int v71;
  _BYTE v72[32];
  void *__dst;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;

  v12 = ((*(_DWORD *)(a3 + 20) >> 1) & 0x3FFFFFFu) - 1;
  *a4 = 0;
  v13 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 528))(a2, *(_QWORD *)(*(_QWORD *)(a3 + 40) + 56));
  if (!(_DWORD)v12)
    return v12;
  v14 = v13;
  if ((v13 & 1) == 0 && *(_DWORD *)(*(_QWORD *)(a1 + 232) + 12) < v12)
    return v12;
  v15 = *(_DWORD *)(a3 + 20);
  v66 = a4;
  if ((v15 & 0x40000000) != 0)
    v16 = *(_QWORD *)(a3 - 8);
  else
    v16 = a3 - 32 * (v15 & 0x7FFFFFF);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = *(unsigned int *)(v17 + 32);
  v76 = v18;
  v67 = a5;
  if (v18 > 0x40)
  {
    v19 = ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8;
    v75 = operator new[]();
    memcpy((void *)v75, *(const void **)(v17 + 24), v19);
    v74 = v18;
    __dst = (void *)operator new[]();
    memcpy(__dst, (const void *)v75, v19);
  }
  else
  {
    v75 = *(_QWORD *)(v17 + 24);
    v74 = v18;
    __dst = (void *)v75;
  }
  v20 = (*(_DWORD *)(a3 + 20) >> 1) & 0x3FFFFFF;
  v21 = (v20 - 1);
  if (v20 != 1)
  {
    for (i = 0; i != v21; ++i)
    {
      v23 = *(_DWORD *)(a3 + 20);
      if ((v23 & 0x40000000) != 0)
        v24 = *(_QWORD *)(a3 - 8);
      else
        v24 = a3 - 32 * (v23 & 0x7FFFFFF);
      v25 = *(_QWORD *)(v24 + 32 * (2 * i + 2));
      v26 = (void **)(v25 + 24);
      v27 = *(unsigned int *)(v25 + 32);
      if (v27 > 0x40)
      {
        v29 = *((_QWORD *)*v26 + ((v27 - 1) >> 6)) & (1 << (v27 - 1));
        v30 = v76 - 1;
        if (v76 >= 0x41)
          v31 = (uint64_t *)(v75 + 8 * (v30 >> 6));
        else
          v31 = &v75;
        if ((v29 != 0) == (((unint64_t)*v31 >> v30) & 1))
        {
          v36 = ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8;
          while (v36)
          {
            v37 = *(_QWORD *)((char *)*v26 + v36 - 8);
            v38 = *(_QWORD *)(v75 - 8 + v36);
            v36 -= 8;
            if (v37 != v38)
            {
              v32 = &v75 == (uint64_t *)v26;
              if (v37 > v38)
                goto LABEL_34;
              break;
            }
          }
        }
        else
        {
          v32 = &v75 == (uint64_t *)v26;
          if (v29)
            goto LABEL_17;
LABEL_34:
          if (!v32)
          {
LABEL_27:
            llvm::APInt::reallocate((uint64_t)&v75, v27);
            if (v76 <= 0x40)
              v75 = (uint64_t)*v26;
            else
              memcpy((void *)v75, *v26, (((unint64_t)v76 + 63) >> 3) & 0x3FFFFFF8);
          }
        }
      }
      else
      {
        if ((uint64_t)((_QWORD)*v26 << -(char)v27) >> -(char)v27 <= v75 << -(char)v27 >> -(char)v27)
          goto LABEL_17;
        if (v76 <= 0x40)
        {
          v75 = (uint64_t)*v26;
          v76 = v27;
          goto LABEL_17;
        }
        if (&v75 != (uint64_t *)v26)
          goto LABEL_27;
      }
LABEL_17:
      v28 = *(unsigned int *)(v25 + 32);
      if (v28 > 0x40)
      {
        v33 = *((_QWORD *)*v26 + ((v28 - 1) >> 6)) & (1 << (v28 - 1));
        v34 = v74 - 1;
        if (v74 >= 0x41)
          p_dst = (void **)((char *)__dst + 8 * (v34 >> 6));
        else
          p_dst = &__dst;
        if ((v33 != 0) == (((unint64_t)*p_dst >> v34) & 1))
        {
          v39 = ((unint64_t)(v28 + 63) >> 3) & 0x3FFFFFF8;
          while (v39)
          {
            v40 = *(_QWORD *)((char *)*v26 + v39 - 8);
            v41 = *(_QWORD *)((char *)__dst + v39 - 8);
            v39 -= 8;
            if (v40 != v41)
            {
              if (v40 > v41 || &__dst == v26)
                goto LABEL_22;
              goto LABEL_42;
            }
          }
          continue;
        }
        if (v33 && &__dst != v26)
        {
LABEL_42:
          llvm::APInt::reallocate((uint64_t)&__dst, v28);
          if (v74 <= 0x40)
            __dst = *v26;
          else
            memcpy(__dst, *v26, (((unint64_t)v74 + 63) >> 3) & 0x3FFFFFF8);
        }
      }
      else if ((uint64_t)((_QWORD)*v26 << -(char)v28) >> -(char)v28 < (uint64_t)((_QWORD)__dst << -(char)v28) >> -(char)v28)
      {
        if (v74 > 0x40)
        {
          if (&__dst != v26)
            goto LABEL_42;
        }
        else
        {
          __dst = *v26;
          v74 = v28;
        }
      }
LABEL_22:
      ;
    }
  }
  if (v12 > *(_DWORD *)(*(_QWORD *)(a1 + 232) + 12))
  {
    if (v12 > 1)
      v42 = v14;
    else
      v42 = 0;
    v43 = v67;
    if ((v42 & 1) == 0)
      goto LABEL_110;
LABEL_94:
    if (v12 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 696))(a2))
    {
      v52 = v76;
      if (v76 >= 0x41)
      {
        v55 = v76 + 63;
        v54 = (void *)operator new[]();
        memcpy(v54, (const void *)v75, (v55 >> 3) & 0x3FFFFFF8);
        v56 = 0;
        v57 = (unint64_t *)__dst;
        v58 = (unint64_t *)v54;
        v59 = v55 >> 6;
        do
        {
          v60 = *v57++;
          v61 = *v58 - v60;
          v62 = *v58 < v60;
          v63 = *v58 + ~v60;
          if (v56)
          {
            v56 = v63 >= *v58;
          }
          else
          {
            v63 = v61;
            v56 = v62;
          }
          *v58++ = v63;
          --v59;
        }
        while (v59);
        *((_QWORD *)v54 + (v55 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v52;
      }
      else
      {
        v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v76;
        if (!v76)
          v53 = 0;
        v54 = (void *)(v53 & (v75 - (_QWORD)__dst));
      }
      LODWORD(v69) = v52;
      v68 = (uint64_t **)v54;
      v64 = (char *)sub_1C47EE5B8(&v68, 0xFFFFFFFFFFFFFFFELL) + 1;
      if (v69 >= 0x41 && v68)
        MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 536))(a2, a3, v12, v64, v43, a6))
      {
        *v66 = (_DWORD)v64;
        v12 = 1;
      }
    }
    goto LABEL_110;
  }
  v68 = (uint64_t **)v72;
  v69 = (uint64_t **)v72;
  v70 = 4;
  v71 = 0;
  v43 = v67;
  if (((*(_DWORD *)(a3 + 20) >> 1) & 0x3FFFFFF) == 1)
  {
    v49 = 0;
  }
  else
  {
    v44 = 0;
    v45 = 2 * (((*(_DWORD *)(a3 + 20) >> 1) & 0x3FFFFFFu) - 1);
    do
    {
      v46 = *(_DWORD *)(a3 + 20);
      if ((v46 & 0x40000000) != 0)
        v47 = *(_QWORD *)(a3 - 8);
      else
        v47 = a3 - 32 * (v46 & 0x7FFFFFF);
      v48 = (v44 + 3);
      if (v44 == 0x1FFFFFFFCLL)
        v48 = 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v68, *(_QWORD *)(v47 + 32 * v48));
      v44 += 2;
    }
    while (v45 != v44);
    v49 = HIDWORD(v70) - v71;
  }
  if (sub_1C4844534(a2, (unint64_t **)&__dst, (uint64_t)&v75, a1))
  {
    if (v12 < 3 || v49 != 1)
      v49 = v12 >= 5 && v49 == 2 || v12 > 5 && v49 == 3;
  }
  else
  {
    v49 = 0;
  }
  if (v69 != v68)
    free(v69);
  if (v49)
    v51 = 1;
  else
    v51 = v12;
  if (((v49 | v14 ^ 1) & 1) != 0)
  {
    v12 = v51;
  }
  else if (v12 >= 2)
  {
    goto LABEL_94;
  }
LABEL_110:
  if (v74 >= 0x41 && __dst)
    MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
  if (v76 >= 0x41 && v75)
    MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
  return v12;
}

BOOL sub_1C4844534(uint64_t a1, unint64_t **a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v10;
  size_t v11;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL4 v20;
  unint64_t v21;
  uint64_t *v22;
  int v23;
  unint64_t v24;
  uint64_t **v25;
  unsigned int v26;

  v4 = *(unsigned int *)(*(_QWORD *)(a4 + 232) + 12);
  v5 = *(unsigned int *)(a3 + 8);
  if (v5 >= 0x41)
  {
    v23 = *(_DWORD *)(a3 + 8);
    v24 = *(unsigned int *)(*(_QWORD *)(a4 + 232) + 12);
    v10 = v5 + 63;
    v11 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
    v14 = (unint64_t *)operator new[]();
    memcpy(v14, *(const void **)a3, v11);
    v15 = 0;
    v16 = *a2;
    v7 = (uint64_t **)v14;
    v17 = v10 >> 6;
    do
    {
      v18 = *v16++;
      v19 = *v14 - v18;
      v20 = *v14 < v18;
      v21 = *v14 + ~v18;
      if (v15)
      {
        v15 = v21 >= *v14;
      }
      else
      {
        v21 = v19;
        v15 = v20;
      }
      *v14++ = v21;
      --v17;
    }
    while (v17);
    LODWORD(v5) = v23;
    v4 = v24;
    v7[(v10 >> 6) - 1] = (uint64_t *)((unint64_t)v7[(v10 >> 6) - 1] & (0xFFFFFFFFFFFFFFFFLL >> -(char)v23));
  }
  else
  {
    v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    if (!(_DWORD)v5)
      v6 = 0;
    v7 = (uint64_t **)(v6 & (*(_QWORD *)a3 - (_QWORD)*a2));
  }
  v26 = v5;
  v25 = v7;
  v8 = sub_1C47EE5B8(&v25, 0xFFFFFFFFFFFFFFFELL);
  if (v26 >= 0x41 && v25)
  {
    v22 = v8;
    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
    v8 = v22;
  }
  return (unint64_t)v8 + 1 <= v4;
}

uint64_t sub_1C48446A4(uint64_t *a1, llvm::ShuffleVectorInst *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  llvm::ShuffleVectorInst *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  llvm::Type *****v19;
  llvm::Type ***v20;
  uint64_t v21;
  llvm::ShuffleVectorInst *v22;
  uint64_t v23;
  int8x8_t **v24;
  unsigned int CastContextHint;
  uint64_t v26;
  int v27;
  int8x8_t **v28;
  int v29;
  unint64_t v30;
  int8x8_t **v31;
  int v32;
  uint64_t v33;
  int8x8_t **v34;
  uint64_t v35;
  int8x8_t **v36;
  int8x8_t *v37;
  unint64_t v38;
  void *v39;
  BOOL v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Value **v47;
  int v48;
  unint64_t v49;
  uint64_t **v50;
  uint64_t **v51;
  uint64_t **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  const llvm::DataLayout *v62;
  llvm::TargetLoweringBase *v63;
  uint64_t v64;
  uint64_t v66;
  unsigned int v67;
  int v69;
  uint64_t **v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  int v78;
  int *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  int *v90;
  int v91;
  llvm::FixedVectorType *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char v96[2];
  _DWORD v97[5];
  int v98[2];
  int8x8_t *v99;
  void *v100;
  uint64_t v101;
  int8x8_t *v102;
  int8x8_t *v103;
  uint64_t v104;
  void *v105;
  _QWORD v106[9];

  v106[7] = *MEMORY[0x1E0C80C00];
  v7 = *((unsigned __int8 *)this + 16);
  v8 = v7 - 28;
  if (v7 < 0x1C)
    goto LABEL_16;
  if (v7 == 33 || v7 == 39)
    goto LABEL_9;
  if (v7 == 84)
  {
    v9 = *((_QWORD *)this - 4);
    if (!v9
      || *(_BYTE *)(v9 + 16)
      || *(_QWORD *)(v9 + 24) != *((_QWORD *)this + 9)
      || (v10 = this, (*(_BYTE *)(v9 + 33) & 0x20) == 0))
    {
LABEL_9:
      v11 = *((_QWORD *)this - 4);
      if (!v11 || *(_BYTE *)(v11 + 16) || *(_QWORD *)(v11 + 24) != *((_QWORD *)this + 9))
      {
        if (v7 == 84)
        {
          v12 = 0;
        }
        else if (v7 == 39)
        {
          v12 = (*((_DWORD *)this + 20) + 1);
        }
        else
        {
          v12 = 2;
        }
        v13 = 0;
        v14 = *((_DWORD *)this + 5);
        v15 = -(uint64_t)(v14 & 0x7FFFFFF);
        if (v14 < 0)
        {
          v94 = (char *)this - 32 * (v14 & 0x7FFFFFF);
          v95 = *((_QWORD *)v94 - 1);
          if ((v95 & 0xFFFFFFFF0) != 0)
            v13 = *((_DWORD *)v94 - 3) - *(_DWORD *)&v94[-v95];
          else
            v13 = 0;
        }
        return ((-32 * v12 + 32 * (unint64_t)-v13 - 32 * v15 - 32) >> 5) + 1;
      }
      if (sub_1C4845148((uint64_t)a1, *((uint64_t ****)this - 4)))
        return *(unsigned int *)(*(_QWORD *)(v11 + 24) + 12);
      return 1;
    }
  }
  else
  {
LABEL_16:
    v10 = 0;
  }
  v17 = *((_DWORD *)this + 5);
  v18 = v17 & 0x7FFFFFF;
  if ((v17 & 0x7FFFFFF) == 1)
  {
    if ((v17 & 0x40000000) != 0)
      v19 = (llvm::Type *****)*((_QWORD *)this - 1);
    else
      v19 = (llvm::Type *****)((char *)this - 32);
    v20 = **v19;
  }
  else
  {
    v20 = 0;
  }
  v21 = *(_QWORD *)this;
  if (v7 <= 0x1B)
  {
    if (v7 != 5)
      return 1;
    v8 = *((unsigned __int16 *)this + 9);
  }
  if (v7 <= 0x1B)
    v22 = 0;
  else
    v22 = this;
  v16 = 0;
  v23 = (uint64_t)(a1 - 1);
  switch((int)v8)
  {
    case 1:
    case 2:
    case 3:
    case 55:
      if ((_DWORD)a5)
        v40 = (_DWORD)v8 == 55;
      else
        v40 = 0;
      return !v40;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      v97[1] = 0;
      LODWORD(v99) = 0;
      if ((v17 & 0x40000000) != 0)
        v24 = (int8x8_t **)*((_QWORD *)this - 1);
      else
        v24 = (int8x8_t **)((char *)this - 32 * v18);
      llvm::TargetTransformInfo::getOperandInfo(*v24, (const llvm::Value *)&v97[1]);
      if ((_DWORD)v8 != 12)
      {
        v27 = *((_DWORD *)this + 5);
        if ((v27 & 0x40000000) != 0)
          v28 = (int8x8_t **)*((_QWORD *)this - 1);
        else
          v28 = (int8x8_t **)((char *)this - 32 * (v27 & 0x7FFFFFF));
        llvm::TargetTransformInfo::getOperandInfo(v28[4], (const llvm::Value *)&v99);
      }
      v29 = *((_DWORD *)this + 5);
      if ((v29 & 0x40000000) != 0)
      {
        v31 = (int8x8_t **)*((_QWORD *)this - 1);
        v30 = v29 & 0x7FFFFFF;
      }
      else
      {
        v30 = v29 & 0x7FFFFFF;
        v31 = (int8x8_t **)((char *)this - 32 * v30);
      }
      v100 = &v102;
      v101 = 0x200000000;
      if (v30 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, (uint64_t)&v102, v30, 8);
        v32 = v101;
        v34 = (int8x8_t **)v100;
        v33 = v101;
      }
      else
      {
        v32 = 0;
        if (!v30)
          goto LABEL_48;
        v33 = 0;
        v34 = &v102;
      }
      v35 = 32 * v30;
      v36 = &v34[v33];
      do
      {
        v37 = *v31;
        v31 += 4;
        *v36++ = v37;
        v35 -= 32;
      }
      while (v35);
LABEL_48:
      LODWORD(v101) = v32 + v30;
      sub_1C4845E1C(v23, v8);
      v16 = v38;
      v39 = v100;
      if (v100 != &v102)
LABEL_49:
        free(v39);
      return v16;
    case 31:
      if (*(_BYTE *)(*((_QWORD *)this - 4) + 16) != 16)
        return 1;
      v42 = *((_QWORD *)this + 5);
      v43 = *(_QWORD *)(*(_QWORD *)(v42 + 56) + 80);
      v44 = v43 ? v43 - 24 : 0;
      return v42 != v44 || (*((_WORD *)this + 9) & 0x40) != 0;
    case 32:
      if ((_DWORD)a5 == 2)
      {
        v53 = *((_QWORD *)this + 1);
        if (v53)
        {
          if (!*(_QWORD *)(v53 + 8) && (*(_DWORD *)(v21 + 8) & 0xFE) != 0x12)
          {
            v54 = *(_QWORD *)(v53 + 24);
            if (v54)
            {
              if (*(_BYTE *)(v54 + 16) == 66)
                v21 = *(_QWORD *)v54;
            }
          }
        }
      }
      v55 = **((_QWORD **)this - 4);
      v56 = *(_DWORD *)(v55 + 8);
      if ((v56 & 0xFE) == 0x12)
        v56 = *(_DWORD *)(**(_QWORD **)(v55 + 16) + 8);
      if ((_DWORD)a5)
        return 1;
      v57 = ((unint64_t)*((unsigned __int16 *)this + 9) >> 1) & 0x3F | 0x100;
      v58 = v56 >> 8;
      v59 = (uint64_t)(a1 - 1);
      v60 = 32;
      v61 = v21;
      return sub_1C4832C7C(v59, v60, v61, v57, v58, 0);
    case 33:
      if ((v17 & 0x40000000) != 0)
        v52 = (uint64_t **)*((_QWORD *)this - 1);
      else
        v52 = (uint64_t **)((char *)this - 32 * v18);
      v66 = **((_QWORD **)this - 4);
      v67 = *(_DWORD *)(v66 + 8);
      if ((v67 & 0xFE) == 0x12)
        v67 = *(_DWORD *)(**(_QWORD **)(v66 + 16) + 8);
      if ((_DWORD)a5)
        return 1;
      v61 = **v52;
      v57 = ((unint64_t)*((unsigned __int16 *)this + 9) >> 1) & 0x3F | 0x100;
      v58 = v67 >> 8;
      v59 = (uint64_t)(a1 - 1);
      v60 = 33;
      return sub_1C4832C7C(v59, v60, v61, v57, v58, 0);
    case 34:
      v40 = v7 == 62;
      v45 = 24;
      if (v40)
        v45 = 64;
      v46 = *(_QWORD *)((char *)this + v45);
      if ((v17 & 0x40000000) != 0)
        v47 = (llvm::Value **)*((_QWORD *)this - 1);
      else
        v47 = (llvm::Value **)((char *)this - 32 * v18);
      return sub_1C484388C(a1, v46, *v47, (llvm **)(a3 + 8), a4 - 1);
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      CastContextHint = llvm::TargetTransformInfo::getCastContextHint((uint64_t)v22);
      return sub_1C4846390(v23, v8, (llvm::Type ***)v21, v20, CastContextHint, a5, (uint64_t)v22);
    case 53:
    case 54:
      if ((v17 & 0x40000000) != 0)
        v41 = (uint64_t **)*((_QWORD *)this - 1);
      else
        v41 = (uint64_t **)((char *)this - 32 * v18);
      return sub_1C4846B20((uint64_t)(a1 - 1), v8, **v41, *(_QWORD *)this, a5);
    case 56:
      llvm::IntrinsicCostAttributes::IntrinsicCostAttributes((uint64_t)&v100, *(_DWORD *)(*((_QWORD *)this - 4) + 36), (uint64_t)v10, 0, 1);
      v16 = sub_1C484559C(v23, (uint64_t)&v100, a5);
      if (v105 != v106)
        free(v105);
      v39 = v103;
      if (v103 == (int8x8_t *)&v104)
        return v16;
      goto LABEL_49;
    case 57:
      *(_QWORD *)v98 = 0;
      v99 = 0;
      v100 = &v99;
      v101 = (uint64_t)v98;
      if ((sub_1C4848F80((_QWORD **)&v100, (uint64_t)this) & 1) != 0
        || (*(_QWORD *)&v97[1] = &v99,
            *(_QWORD *)&v97[3] = v98,
            (sub_1C4849098((_QWORD **)&v97[1], (uint64_t)this) & 1) != 0))
      {
        *(_QWORD *)v97 = 0;
        llvm::TargetTransformInfo::getOperandInfo(v99, (const llvm::Value *)&v97[1]);
        llvm::TargetTransformInfo::getOperandInfo(*(int8x8_t **)v98, (const llvm::Value *)v97);
        v100 = &v102;
        v102 = v99;
        v103 = *(int8x8_t **)v98;
        v101 = 0x200000002;
        if (sub_1C48491B0((uint64_t)v96, (unsigned __int8 *)this))
          v48 = 29;
        else
          v48 = 28;
        sub_1C4845E1C(v23, v48);
        v16 = v49;
        if (v100 != &v102)
          free(v100);
      }
      else
      {
        v69 = *((_DWORD *)this + 5);
        if ((v69 & 0x40000000) != 0)
          v70 = (uint64_t **)*((_QWORD *)this - 1);
        else
          v70 = (uint64_t **)((char *)this - 32 * (v69 & 0x7FFFFFF));
        return sub_1C4846B20(v23, 57, *(_QWORD *)this, **v70, a5);
      }
      return v16;
    case 61:
      if (v7 != 89)
        return 1;
      if ((v17 & 0x40000000) != 0)
        v51 = (uint64_t **)*((_QWORD *)this - 1);
      else
        v51 = (uint64_t **)((char *)this - 32 * v18);
      v64 = **v51;
      v62 = (const llvm::DataLayout *)*a1;
      if ((*(_DWORD *)(v64 + 8) & 0xFE) == 0x12)
        v64 = **(_QWORD **)(v64 + 16);
      v63 = (llvm::TargetLoweringBase *)a1[3];
      goto LABEL_139;
    case 62:
      if (v7 != 90)
        return 1;
      v62 = (const llvm::DataLayout *)*a1;
      if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
        v21 = **(_QWORD **)(v21 + 16);
      v63 = (llvm::TargetLoweringBase *)a1[3];
      v64 = v21;
LABEL_139:
      llvm::TargetLoweringBase::getTypeLegalizationCost(v63, v62, (llvm::EVT **)v64, (uint64_t)&v100);
      return (uint64_t)v100;
    case 63:
      if (v7 != 91)
        return 1;
      if ((v17 & 0x40000000) != 0)
        v50 = (uint64_t **)*((_QWORD *)this - 1);
      else
        v50 = (uint64_t **)((char *)this - 32 * v18);
      v71 = **v50;
      v97[1] = 0;
      LODWORD(v99) = 0;
      v72 = (uint64_t *)*((_QWORD *)this - 8);
      v73 = *v72;
      v74 = *(unsigned int *)(*v72 + 32);
      v75 = *((unsigned int *)this + 18);
      if ((_DWORD)v74 == (_DWORD)v75)
      {
        v76 = (int *)*((_QWORD *)this + 8);
        if ((sub_1C53EC390(v76, *(unsigned int *)(*v72 + 32), *(_DWORD *)(*v72 + 32)) & 1) == 0)
        {
          if (llvm::ShuffleVectorInst::isReverseMask(v76, v74))
          {
            v77 = v23;
            v78 = 1;
LABEL_178:
            sub_1C4846E20(v77, v78, v21, v76, v74);
            return v26;
          }
          if (llvm::ShuffleVectorInst::isSelectMask(v76, v74))
          {
            v77 = v23;
            v78 = 2;
            goto LABEL_178;
          }
          if (llvm::ShuffleVectorInst::isTransposeMask(v76, v74))
          {
            v77 = v23;
            v78 = 3;
            goto LABEL_178;
          }
          if (llvm::ShuffleVectorInst::isZeroEltSplatMask(v76, v74))
          {
            v77 = v23;
            v78 = 0;
            goto LABEL_178;
          }
          if ((_DWORD)v74)
          {
            v87 = 0;
            v88 = 0;
            v89 = 4 * v74;
            v90 = v76;
            while (1)
            {
              v91 = *v90;
              if (*v90 != -1)
              {
                v87 |= v91 < (int)v74;
                v88 |= v91 >= (int)v74;
                if ((v87 & 1) != 0 && (v88 & 1) != 0)
                  break;
              }
              ++v90;
              v89 -= 4;
              if (!v89)
                goto LABEL_171;
            }
          }
          else
          {
            v88 = 0;
            v87 = 0;
LABEL_171:
            if ((v87 & 1) != 0 || (v88 & 1) != 0)
            {
              v77 = v23;
              v78 = 7;
              goto LABEL_178;
            }
          }
          if (*(_BYTE *)(v21 + 8) == 19)
          {
LABEL_176:
            v77 = v23;
            v78 = 6;
            goto LABEL_178;
          }
          if ((llvm::ShuffleVectorInst::isInsertSubvectorMask(v76, v74, v74, &v97[1], &v99) & 1) == 0)
          {
            v74 = *((unsigned int *)this + 18);
            v76 = (int *)*((_QWORD *)this + 8);
            goto LABEL_176;
          }
LABEL_179:
          v92 = (llvm::FixedVectorType *)v21;
          if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
            v92 = **(llvm::FixedVectorType ***)(v21 + 16);
          llvm::FixedVectorType::get(v92, (llvm::Type *)v97[1]);
          return sub_1C613890C(v23, v21, v93);
        }
        return 0;
      }
      if (v74 < v75 && (llvm::ShuffleVectorInst::isIdentityWithPadding(this) & 1) != 0)
        return 0;
      if (*(_BYTE *)(v21 + 8) != 19)
      {
        v79 = (int *)*((_QWORD *)this + 8);
        if (llvm::ShuffleVectorInst::isExtractSubvectorMask(v79, v75, v74, (int *)&v99))
          return sub_1C6138808(v23, v71, v21);
        if (*(_BYTE *)(v21 + 8) != 19
          && llvm::ShuffleVectorInst::isInsertSubvectorMask(v79, v75, *(_DWORD *)(v73 + 32), &v97[1], &v99))
        {
          goto LABEL_179;
        }
      }
      v98[0] = 0;
      v97[0] = 0;
      if (!llvm::ShuffleVectorInst::isReplicationMask(this, v98, v97))
      {
        if ((_DWORD)a5)
          return 1;
        else
          return -1;
      }
      v80 = *((_DWORD *)this + 18);
      LODWORD(v101) = v80;
      if (v80 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v100, 0, 0);
        v80 = *((_DWORD *)this + 18);
        if (!v80)
          goto LABEL_159;
      }
      else
      {
        v100 = 0;
        if (!v80)
          goto LABEL_159;
      }
      v81 = 0;
      v82 = *((_QWORD *)this + 8);
      v83 = v80;
      v84 = v101;
      v85 = 4 * v83;
      do
      {
        if (*(_DWORD *)(v82 + 4 * v81) != -1)
        {
          v86 = 1 << v81;
          if (v84 > 0x40)
            *((_QWORD *)v100 + (v81 >> 6)) |= v86;
          else
            v100 = (void *)((unint64_t)v100 | v86);
        }
        ++v81;
        v85 -= 4;
      }
      while (v85);
LABEL_159:
      v16 = sub_1C6137AE8(v23, *(llvm::FixedVectorType **)(v71 + 24), v98[0], (llvm::Type *)v97[0], (llvm::APIntOps *)&v100);
      if (v101 >= 0x41 && v100)
        MEMORY[0x1CAA32F9C](v100, 0x1000C8000313F17);
      return v16;
    case 64:
    case 67:
      return v16;
    default:
      return 1;
  }
}

uint64_t sub_1C4845148(uint64_t a1, uint64_t ***a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ****v7;
  uint64_t ***v8;
  int v9;
  int v10;
  uint64_t ***v11;
  int v16;
  int v17;
  BOOL v18;
  BOOL v19;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  uint64_t **v39;

  if (((_DWORD)a2[4] & 0x2000) != 0)
    return 0;
  if (((_DWORD)a2[4] & 0xFu) - 7 >= 2 && (*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v3 = ***a2;
    v4 = *(_QWORD *)(v3 + 152);
    v5 = *(unsigned int *)(v3 + 168);
    if ((_DWORD)v5)
    {
      LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v7 = (uint64_t ****)(v4 + 16 * v6);
      v8 = *v7;
      if (*v7 != a2)
      {
        v9 = 1;
        do
        {
          if (v8 == (uint64_t ***)-4096)
            goto LABEL_13;
          v10 = v6 + v9++;
          v6 = v10 & (v5 - 1);
          v8 = *(uint64_t ****)(v4 + 16 * v6);
        }
        while (v8 != a2);
        v7 = (uint64_t ****)(v4 + 16 * v6);
      }
    }
    else
    {
LABEL_13:
      v7 = (uint64_t ****)(v4 + 16 * v5);
    }
    v11 = v7[1];
    switch((unint64_t)*v11)
    {
      case 3uLL:
        if (*((_WORD *)v11 + 8) == 26995 && *((_BYTE *)v11 + 18) == 110)
          return 0;
        if (*((_WORD *)v11 + 8) == 28515 && *((_BYTE *)v11 + 18) == 115)
          return 0;
        if (*((_WORD *)v11 + 8) == 28528 && *((_BYTE *)v11 + 18) == 119)
          return 0;
        if (*((_WORD *)v11 + 8) == 26214 && *((_BYTE *)v11 + 18) == 115)
          return 0;
        v16 = *((unsigned __int16 *)v11 + 8);
        v17 = *((unsigned __int8 *)v11 + 18);
        v18 = v16 == 25185;
        goto LABEL_94;
      case 4uLL:
        if (*((_DWORD *)v11 + 4) == 1935827302
          || *((_DWORD *)v11 + 4) == 1852403046
          || *((_DWORD *)v11 + 4) == 2019650918
          || *((_DWORD *)v11 + 4) == 1718511987
          || *((_DWORD *)v11 + 4) == 1819175283
          || *((_DWORD *)v11 + 4) == 1718841187
          || *((_DWORD *)v11 + 4) == 1819504483
          || *((_DWORD *)v11 + 4) == 1953657203
          || *((_DWORD *)v11 + 4) == 1719103344
          || *((_DWORD *)v11 + 4) == 1819766640
          || *((_DWORD *)v11 + 4) == 846231653
          || *((_DWORD *)v11 + 4) == 1818846563
          || *((_DWORD *)v11 + 4) == 1819502182)
        {
          return 0;
        }
        v19 = *((_DWORD *)v11 + 4) == 1935827308;
        return !v19;
      case 5uLL:
        if (*((_DWORD *)v11 + 4) == 1935827302 && *((_BYTE *)v11 + 20) == 102)
          return 0;
        if (*((_DWORD *)v11 + 4) == 1935827302 && *((_BYTE *)v11 + 20) == 108)
          return 0;
        if (*((_DWORD *)v11 + 4) == 1852403046 && *((_BYTE *)v11 + 20) == 102)
          return 0;
        if (*((_DWORD *)v11 + 4) == 1852403046 && *((_BYTE *)v11 + 20) == 108)
          return 0;
        if (*((_DWORD *)v11 + 4) == 2019650918 && *((_BYTE *)v11 + 20) == 102)
          return 0;
        if (*((_DWORD *)v11 + 4) == 2019650918 && *((_BYTE *)v11 + 20) == 108)
          return 0;
        if (*((_DWORD *)v11 + 4) == 1953657203 && *((_BYTE *)v11 + 20) == 102)
          return 0;
        if (*((_DWORD *)v11 + 4) == 1953657203 && *((_BYTE *)v11 + 20) == 108)
          return 0;
        if (*((_DWORD *)v11 + 4) == 846231653 && *((_BYTE *)v11 + 20) == 108)
          return 0;
        if (*((_DWORD *)v11 + 4) == 846231653 && *((_BYTE *)v11 + 20) == 102)
          return 0;
        if (*((_DWORD *)v11 + 4) == 1869573222 && *((_BYTE *)v11 + 20) == 114)
          return 0;
        if (*((_DWORD *)v11 + 4) == 1853190002 && *((_BYTE *)v11 + 20) == 100)
          return 0;
        v32 = *((_DWORD *)v11 + 4);
        v17 = *((unsigned __int8 *)v11 + 20);
        v18 = v32 == 1650551916;
LABEL_94:
        v19 = v18 && v17 == 115;
        return !v19;
      case 6uLL:
        v33 = *((_DWORD *)v11 + 4);
        v34 = *((unsigned __int16 *)v11 + 10);
        v35 = v33 == 1869573222;
        v36 = 26226;
        return !v35 || v34 != v36;
      case 8uLL:
        return v11[2] != (uint64_t **)0x6E67697379706F63;
      case 9uLL:
        if (v11[2] == (uint64_t **)0x6E67697379706F63 && *((_BYTE *)v11 + 24) == 102)
          return 0;
        v39 = v11[2];
        v34 = *((unsigned __int8 *)v11 + 24);
        v35 = v39 == (uint64_t **)0x6E67697379706F63;
        v36 = 108;
        return !v35 || v34 != v36;
      default:
        return 1;
    }
  }
  return 1;
}

uint64_t sub_1C484559C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v18;
  int v19;
  char *v20;
  char *p_src;
  void *v22;
  uint64_t v24;
  BOOL v25;
  int8x8_t **v26;
  int8x8_t *v27;
  int8x8_t *v28;
  int8x8_t *v29;
  int OperandInfo;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Type *v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  uint64_t **v47;
  uint64_t *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t **v55;
  llvm::Type *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unint64_t *v68;
  _BOOL4 v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unsigned __int8 v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  uint64_t __src;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  void *v93;
  uint64_t v94;
  _BYTE v95[32];
  void *v96;
  uint64_t v97;
  _BYTE v98[32];
  int v99;
  __int128 v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 8;
  v7 = sub_1C4846F4C(a1 + 8, a2);
  v9 = v7 < 0;
  if (v8)
    v9 = v8 < 0;
  if (!v9)
  {
    v10 = v8 < 1;
    if (!v8)
      v10 = v7 < 1;
    if (v10)
      return 0;
  }
  v12 = *(_DWORD *)(a2 + 16);
  if (v12 > 0x181)
    return 1;
  v13 = *(_DWORD *)(a2 + 80);
  if (!v13)
    return sub_1C4846FE8(a1, a2, a3);
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(_DWORD *)(v14 + 8);
  if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
    v16 = *(unsigned int *)(v14 + 32) | ((unint64_t)(v15 == 19) << 32);
  else
    v16 = 1;
  v18 = *(_QWORD *)a2;
  v19 = *(_DWORD *)(a2 + 120);
  if (v12 <= 185)
  {
    if (v12 <= 147)
    {
      switch(v12)
      {
        case 130:
          if (v15 == 19)
            return sub_1C4846F4C(v6, a2);
          return 1;
        case 131:
          if (v15 == 19)
            return sub_1C4846F4C(v6, a2);
          return sub_1C6138808(a1, ***(_QWORD ***)(a2 + 72), *(_QWORD *)(a2 + 8));
        case 132:
          v61 = *(uint64_t ***)(a2 + 72);
          v62 = *v61[1];
          if (*(_BYTE *)(v62 + 8) == 19)
            return sub_1C4846F4C(v6, a2);
          return sub_1C613890C(a1, **v61, v62);
        case 133:
        case 134:
          v24 = ***(_QWORD ***)(a2 + 72);
          if (v24)
            v25 = *(_BYTE *)(v24 + 8) == 18;
          else
            v25 = 0;
          if (!v25)
            return 0;
          return sub_1C613870C(a1, v24);
        default:
          if (v12 == 52)
          {
            if (v16 != 1)
              goto LABEL_96;
            v46 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 32) + 224);
          }
          else
          {
            if (v12 != 54 || v16 != 1)
              goto LABEL_96;
            v46 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 32) + 216);
          }
          v63 = v46();
          v64 = 0;
          v11 = 1;
          if ((v63 & 1) != 0)
            return v11;
          break;
      }
      goto LABEL_105;
    }
    if ((v12 - 148) >= 2)
    {
      if (v12 == 153)
      {
        v50 = sub_1C47A7FD0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), (llvm::Type *)1);
        v52 = v51;
        v53 = sub_1C47A7FD0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8), **(_QWORD **)(a2 + 24), (llvm::Type *)1);
        if (((*(uint64_t (**)(_QWORD, unint64_t, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 104))(*(_QWORD *)(a1 + 32), v50, v52, v53, v54) & 1) == 0)
        {
          llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v14, (uint64_t)&v90);
          return v90;
        }
        v55 = **(uint64_t ****)(a2 + 24);
        v56 = (llvm::Type *)*(unsigned int *)(v14 + 32);
        if (*(_BYTE *)(v14 + 8) == 19)
          llvm::ScalableVectorType::get(v55, v56);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v55, v56);
        v58 = v57;
        v90 = 0;
        v91 = v57;
        v92 = 300;
        v93 = v95;
        v96 = v98;
        v97 = 0x400000000;
        v99 = v19;
        v100 = xmmword_1C64632D0;
        v94 = 0x400000000;
        v59 = sub_1C4846FE8(a1, (uint64_t)&v90, a3);
        v60 = sub_1C4846B20(a1, 53, v58, v14, a3);
        if (__OFADD__(v59, v60))
          v11 = ((uint64_t)(v59 + v60) >> 63) ^ 0x8000000000000000;
        else
          v11 = v59 + v60;
        if (v96 != v98)
          free(v96);
        v22 = v93;
        if (v93 != v95)
          goto LABEL_24;
        return v11;
      }
      if (v12 == 184)
      {
        v80 = *(_QWORD *)(a2 + 72);
        v81 = *(_QWORD *)(v80 + 8);
        v82 = *(unsigned __int8 *)(*(_QWORD *)(v80 + 16) + 16);
        v83 = (unint64_t *)(v81 + 24);
        if (*(_DWORD *)(v81 + 32) >= 0x41u)
          v83 = (unint64_t *)*v83;
        v69 = v82 > 0x14;
        v84 = *v83;
        v85 = __clz(v84) ^ 0x3F;
        if (v84)
          v73 = v85;
        else
          v73 = 0;
        v74 = a1;
        v75 = 32;
        v72 = *(_QWORD *)(a2 + 8);
        return sub_1C6137F68(v74, v75, v72, v73, v69, 1, a3);
      }
      goto LABEL_96;
    }
    if (v15 != 19)
    {
      v26 = *(int8x8_t ***)(a2 + 72);
      v27 = *v26;
      v28 = v26[1];
      v29 = v26[2];
      LODWORD(v90) = 0;
      v87 = 0;
      LODWORD(__src) = 0;
      llvm::TargetTransformInfo::getOperandInfo(v27, (const llvm::Value *)&v90);
      llvm::TargetTransformInfo::getOperandInfo(v28, (const llvm::Value *)&__src);
      OperandInfo = llvm::TargetTransformInfo::getOperandInfo(v29, (const llvm::Value *)&v87);
      sub_1C4845E1C(a1, 29);
      v32 = v31;
      sub_1C4845E1C(a1, 15);
      if (__OFADD__(v32, v33))
        v34 = ((v32 + v33) >> 63) ^ 0x8000000000000000;
      else
        v34 = v32 + v33;
      sub_1C4845E1C(a1, 25);
      if (__OFADD__(v34, v35))
        v36 = ((uint64_t)(v34 + v35) >> 63) ^ 0x8000000000000000;
      else
        v36 = v34 + v35;
      sub_1C4845E1C(a1, 26);
      if (__OFADD__(v36, v37))
        v11 = ((uint64_t)(v36 + v37) >> 63) ^ 0x8000000000000000;
      else
        v11 = v36 + v37;
      if ((OperandInfo - 4) <= 0xFFFFFFFD)
      {
        sub_1C4845E1C(a1, 22);
        if (__OFADD__(v11, v38))
          v11 = ((uint64_t)(v11 + v38) >> 63) ^ 0x8000000000000000;
        else
          v11 += v38;
      }
      if (v27 != v28)
      {
        v39 = **(_QWORD **)v14 + 1888;
        if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
        {
          v40 = (llvm::Type *)*(unsigned int *)(v14 + 32);
          v41 = (uint64_t **)(**(_QWORD **)v14 + 1888);
          if (*(_DWORD *)(v14 + 8) == 19)
            llvm::ScalableVectorType::get(v41, v40);
          else
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v41, v40);
          v39 = v42;
        }
        v43 = sub_1C4846B20(a1, 53, v14, v39, a3);
        if (__OFADD__(v11, v43))
          v44 = ((uint64_t)(v11 + v43) >> 63) ^ 0x8000000000000000;
        else
          v44 = v11 + v43;
        v45 = sub_1C4846B20(a1, 57, v14, v39, a3);
        if (__OFADD__(v44, v45))
          return ((uint64_t)(v44 + v45) >> 63) ^ 0x8000000000000000;
        else
          return v44 + v45;
      }
      return v11;
    }
    return sub_1C4846F4C(v6, a2);
  }
  if ((v12 - 317) <= 0xC)
  {
    if (((1 << (v12 - 61)) & 0x1FDB) != 0)
    {
      __src = ***(_QWORD ***)(a2 + 72);
      v90 = v18;
      v91 = v14;
      v92 = v12;
      v93 = v95;
      v94 = 0x400000000;
      v96 = v98;
      v97 = 0x400000000;
      v99 = v19;
      v100 = xmmword_1C64169E0;
      v20 = (char *)&v89;
    }
    else
    {
      v47 = *(uint64_t ***)(a2 + 72);
      v49 = *v47;
      v48 = v47[1];
      __src = *v49;
      v89 = *v48;
      v90 = v18;
      v91 = v14;
      v92 = v12;
      v93 = v95;
      v94 = 0x400000000;
      v96 = v98;
      v97 = 0x400000000;
      v99 = v19;
      v100 = xmmword_1C64169E0;
      v20 = (char *)&v90;
    }
    p_src = (char *)&__src;
    goto LABEL_21;
  }
  if (v12 == 194)
    return 4;
  if (v12 == 186)
  {
    v65 = *(_QWORD *)(a2 + 72);
    v66 = *(_QWORD *)(v65 + 16);
    v67 = *(unsigned __int8 *)(*(_QWORD *)(v65 + 24) + 16);
    v68 = (unint64_t *)(v66 + 24);
    if (*(_DWORD *)(v66 + 32) >= 0x41u)
      v68 = (unint64_t *)*v68;
    v69 = v67 > 0x14;
    v70 = *v68;
    v71 = __clz(v70) ^ 0x3F;
    v72 = **(_QWORD **)(a2 + 24);
    if (v70)
      v73 = v71;
    else
      v73 = 0;
    v74 = a1;
    v75 = 33;
    return sub_1C6137F68(v74, v75, v72, v73, v69, 1, a3);
  }
LABEL_96:
  v64 = 0;
  v11 = 1;
  if (!HIDWORD(v16) && v16 >= 2)
  {
    if (v15 == 7)
    {
      v11 = 0;
      v76 = 0;
    }
    else
    {
      v76 = sub_1C6133E14(a1, *(_QWORD *)(a2 + 8), 1, 0);
      v11 = v86 == 1;
      v13 = *(_DWORD *)(a2 + 80);
    }
    v77 = sub_1C4848A1C(a1, *(uint64_t **)(a2 + 72), v13, *(uint64_t **)(a2 + 24));
    if (v78 == 1)
      v11 = 1;
    if (__OFADD__(v76, v77))
      v64 = ((uint64_t)(v76 + v77) >> 63) ^ 0x8000000000000000;
    else
      v64 = v76 + v77;
  }
LABEL_105:
  p_src = *(char **)(a2 + 24);
  v79 = *(unsigned int *)(a2 + 32);
  v90 = v18;
  v91 = v14;
  v92 = v12;
  v93 = v95;
  v94 = 0x400000000;
  v96 = v98;
  v97 = 0x400000000;
  v99 = v19;
  v20 = &p_src[8 * v79];
  *(_QWORD *)&v100 = v64;
  *((_QWORD *)&v100 + 1) = v11;
LABEL_21:
  sub_1C4F7C758((unsigned int *)&v93, (uint64_t)v95, p_src, v20);
  v11 = sub_1C4846FE8(a1, (uint64_t)&v90, a3);
  if (v96 != v98)
    free(v96);
  v22 = v93;
  if (v93 != v95)
LABEL_24:
    free(v22);
  return v11;
}

void sub_1C4845E1C(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

unint64_t sub_1C4845E88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int128 a14, char a15, uint64_t a16, int a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  llvm::TargetLoweringBase *v44;
  unint64_t v45;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  __int128 v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD v56[2];
  unint64_t v57;
  int v58;
  __int128 v59;
  unsigned __int8 v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  _BYTE v64[160];

  if (a4)
  {
    if ((v43 - 19) >= 6)
      return 1;
    else
      return 4;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(v44, *(const llvm::DataLayout **)(v40 + 8), (llvm::EVT **)v39, (uint64_t)&v59);
  v47 = *(_DWORD *)(v39 + 8);
  v48 = *(_DWORD *)(v39 + 8) & 0xFE;
  v49 = v47;
  if (v48 == 18)
    v49 = *(unsigned __int8 *)(**(_QWORD **)(v39 + 16) + 8);
  if (v49 >= 7)
    v45 = 1;
  else
    v45 = 2;
  v57 = v45;
  v58 = 0;
  if (v60 && (v60 == 1 || *((_QWORD *)v44 + v60 + 12)))
  {
    v50 = *((unsigned __int8 *)v44 + 390 * v60 + 3960);
    if (v50 <= 1)
    {
      v51 = v59;
LABEL_25:
      v63 = v51;
      sub_1C4848B64((uint64_t)&v63, (uint64_t)&v57);
      return v63;
    }
    if (*((_QWORD *)v44 + v60 + 12))
      v52 = v50 == 2;
    else
      v52 = 1;
    if (!v52)
    {
      v61 = 2;
      v62 = 0;
      v63 = v59;
      sub_1C4848B64((uint64_t)&v63, (uint64_t)&v61);
      v51 = v63;
      goto LABEL_25;
    }
  }
  if (v47 == 19)
    return 0;
  if (v47 == 18)
  {
    v53 = v39;
    if (v48 == 18)
      v53 = **(_QWORD **)(v39 + 16);
    v56[0] = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *, unint64_t))sub_1C4845E1C)(v40, v43, v53, 0, v42, v41);
    v56[1] = v54;
    *(_QWORD *)&v63 = v64;
    *((_QWORD *)&v63 + 1) = 0x600000000;
    sub_1C4848C0C((unsigned int *)&v63, v41, v39);
    v55 = sub_1C6138580(v40, v39, v42, v41, (uint64_t *)v63);
    v61 = *(unsigned int *)(v39 + 32);
    v62 = 0;
    sub_1C4848B64((uint64_t)&v61, (uint64_t)v56);
    if (__OFADD__(v55, v61))
      v45 = ((uint64_t)(v55 + v61) >> 63) ^ 0x8000000000000000;
    else
      v45 = v55 + v61;
    if ((_BYTE *)v63 != v64)
      free((void *)v63);
  }
  return v45;
}

void sub_1C4846330()
{
  JUMPOUT(0x1C4845FF8);
}

void sub_1C484633C()
{
  JUMPOUT(0x1C4845FF8);
}

void sub_1C4846348()
{
  JUMPOUT(0x1C4845FF8);
}

void sub_1C4846354()
{
  JUMPOUT(0x1C4845FF8);
}

void sub_1C4846360()
{
  JUMPOUT(0x1C4845FF8);
}

void sub_1C484636C()
{
  JUMPOUT(0x1C4845FF8);
}

void sub_1C4846378()
{
  JUMPOUT(0x1C4845FF8);
}

void sub_1C4846384()
{
  JUMPOUT(0x1C4845FF8);
}

uint64_t sub_1C4846390(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::Type ***a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t result;
  llvm::TargetLoweringBase *v20;
  int v21;
  BOOL v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  BOOL v27;
  BOOL v28;
  char v29;
  unsigned __int8 EVT;
  BOOL v31;
  unsigned __int8 v32;
  BOOL v33;
  _BOOL4 v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  _BOOL4 v39;
  _BOOL4 v40;
  llvm::EVT *v41;
  unint64_t v42;
  uint64_t v43;
  llvm::EVT *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  __n128 v49;
  int v50;
  unsigned int v51;
  BOOL v52;
  _BOOL4 v53;
  unsigned int v54;
  int v55;
  BOOL v56;
  _BOOL4 v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t **v63;
  llvm::Type *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  llvm::Type *v68;
  uint64_t v69;
  __n128 v70;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned __int8 v89[8];
  __int128 v90;
  unsigned __int8 v91[8];
  _OWORD v92[2];

  v10 = (uint64_t)a4;
  v11 = (uint64_t)a3;
  v14 = (uint64_t *)(a1 + 8);
  v15 = sub_1C4848CBC((uint64_t *)(a1 + 8), a2, a3, a4);
  v17 = v15 < 0;
  if (v16)
    v17 = v16 < 0;
  if (!v17)
  {
    v18 = v16 < 1;
    if (!v16)
      v18 = v15 < 1;
    if (v18)
      return 0;
  }
  v83 = a5;
  v78 = a6;
  v20 = *(llvm::TargetLoweringBase **)(a1 + 32);
  v84 = qword_1C64635A0[(int)a2 - 1];
  llvm::TargetLoweringBase::getTypeLegalizationCost(v20, *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v10, (uint64_t)&v90);
  llvm::TargetLoweringBase::getTypeLegalizationCost(v20, *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v11, (uint64_t)&v87);
  v82 = sub_1C47A8C74(v91);
  v80 = v21;
  v81 = sub_1C47A8C74(v89);
  v79 = v23;
  v24 = *(_DWORD *)(v10 + 8);
  v25 = *(_DWORD *)(v11 + 8);
  switch((int)a2)
  {
    case '&':
      v26 = (*(uint64_t (**)(llvm::TargetLoweringBase *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v20
                                                                                                  + 1160))(v20, v91[0], 0, v89[0], 0);
      result = 0;
      if ((v26 & 1) == 0)
        goto LABEL_10;
      return result;
    case '\'':
      v29 = (*(uint64_t (**)(llvm::TargetLoweringBase *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v20
                                                                                                  + 1192))(v20, v91[0], 0, v89[0], 0);
      result = 0;
      if ((v29 & 1) == 0)
        goto LABEL_28;
      return result;
    case '(':
LABEL_28:
      if (a7 && (sub_1C4848E88(*(_QWORD *)(a1 + 32), a7, v22) & 1) != 0)
        return 0;
      if (v83 == 1)
      {
        EVT = llvm::EVT::getEVT((llvm::EVT *)v11, 0, v22);
        v32 = llvm::EVT::getEVT((llvm::EVT *)v10, 0, v31);
        v33 = v87 < (uint64_t)v90;
        if (v88 != DWORD2(v90))
          v33 = v88 < SDWORD2(v90);
        if (!v33)
        {
          v34 = v88 == DWORD2(v90) ? (uint64_t)v90 >= v87 : SDWORD2(v90) >= v88;
          if (v34 && EVT && v32)
          {
            v35 = (_DWORD)a2 == 39 ? -4096 : 3840;
            if (((unsigned __int16)v35 & *((_WORD *)v20 + 179 * EVT + v32 + 36836)) == 0)
              return 0;
          }
        }
      }
      goto LABEL_47;
    case '.':
      if (a7 && (sub_1C4848E88(*(_QWORD *)(a1 + 32), a7, v22) & 1) != 0)
        return 0;
      goto LABEL_47;
    case '1':
LABEL_10:
      v27 = (uint64_t)v90 < v87;
      if (DWORD2(v90) != v88)
        v27 = SDWORD2(v90) < v88;
      if (!v27)
      {
        v28 = DWORD2(v90) == v88 ? v87 < (uint64_t)v90 : v88 < SDWORD2(v90);
        if (!v28 && ((v24 & 0xFD) == 13) == ((v25 & 0xFD) == 13) && v82 == v81 && v80 == v79)
          return 0;
      }
      goto LABEL_47;
    case '2':
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
        v24 = *(_DWORD *)(**(_QWORD **)(v10 + 16) + 8);
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
        v25 = *(_DWORD *)(**(_QWORD **)(v11 + 16) + 8);
      if (((*(uint64_t (**)(llvm::TargetLoweringBase *, _QWORD, _QWORD))(*(_QWORD *)v20 + 840))(v20, v24 >> 8, v25 >> 8) & 1) != 0)return 0;
      goto LABEL_47;
    default:
LABEL_47:
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
        v36 = v10;
      else
        v36 = 0;
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
        v37 = v11;
      else
        v37 = 0;
      result = v90;
      v38 = (uint64_t)v90 < v87;
      if (DWORD2(v90) != v88)
        v38 = SDWORD2(v90) < v88;
      if (!v38)
      {
        v39 = v88 >= SDWORD2(v90);
        if (DWORD2(v90) == v88)
          v39 = v87 >= (uint64_t)v90;
        if (v39
          && v89[0]
          && (v89[0] == 1 || *((_QWORD *)v20 + v89[0] + 12))
          && *((unsigned __int8 *)v20 + 390 * v89[0] + v84 + 3862) <= 1u)
        {
          return result;
        }
      }
      if (v36 | v37)
      {
        if (v36 && v37)
        {
          if (!v38)
          {
            v40 = DWORD2(v90) == v88 ? v87 >= (uint64_t)v90 : v88 >= SDWORD2(v90);
            if (v40 && v82 == v81 && v80 == v79)
            {
              if ((_DWORD)a2 == 40)
              {
                v77 = 2;
              }
              else
              {
                if ((_DWORD)a2 == 39)
                  return result;
                if (!v89[0] || !*((_QWORD *)v20 + v89[0] + 12) || *((_BYTE *)v20 + 390 * v89[0] + v84 + 3862) == 2)
                  goto LABEL_79;
                v77 = 1;
              }
              v85 = v77;
              LODWORD(v86) = 0;
              v92[0] = v90;
              sub_1C4848B64((uint64_t)v92, (uint64_t)&v85);
              return *(_QWORD *)&v92[0];
            }
          }
LABEL_79:
          v41 = *(llvm::EVT **)v10;
          v42 = sub_1C47A7FD0((uint64_t)v20, *v14, v10, 0);
          llvm::TargetLoweringBase::getTypeConversion((unint64_t)v20, v41, v42, v43, (uint64_t)v92);
          v44 = *(llvm::EVT **)v11;
          v45 = *v14;
          v46 = LOBYTE(v92[0]);
          v47 = sub_1C47A7FD0((uint64_t)v20, v45, v11, 0);
          llvm::TargetLoweringBase::getTypeConversion((unint64_t)v20, v44, v47, v48, (uint64_t)v92);
          v50 = LOBYTE(v92[0]);
          if (v46 == 6 || LOBYTE(v92[0]) == 6)
          {
            v51 = *(_DWORD *)(v36 + 32);
            v52 = v51 && *(_BYTE *)(v36 + 8) == 19;
            v53 = v52;
            if (v51 > 1 || v53)
            {
              v54 = *(_DWORD *)(v37 + 32);
              v55 = *(unsigned __int8 *)(v37 + 8);
              v56 = v54 && v55 == 19;
              v57 = v56;
              if (v54 > 1 || v57)
              {
                v63 = *(uint64_t ***)(v37 + 24);
                v64 = (llvm::Type *)(v54 >> 1);
                if (v55 == 19)
                  llvm::ScalableVectorType::get(v63, v64);
                else
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v63, v64);
                v66 = v65;
                v67 = *(uint64_t ***)(v36 + 24);
                v68 = (llvm::Type *)(*(_DWORD *)(v36 + 32) >> 1);
                if (*(_BYTE *)(v36 + 8) == 19)
                  v70.n128_f64[0] = llvm::ScalableVectorType::get(v67, v68);
                else
                  v70.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v67, v68);
                v72 = v46 != 6 || v50 != 6;
                v85 = sub_1C4846390(a1, a2, v66, v69, v83, v78, a7, v70);
                v86 = v73;
                *(_QWORD *)&v92[0] = 2;
                DWORD2(v92[0]) = 0;
                sub_1C4848B64((uint64_t)v92, (uint64_t)&v85);
                v60 = __OFADD__(v72, *(_QWORD *)&v92[0]);
                v61 = v72 + *(_QWORD *)&v92[0];
                v62 = 0x7FFFFFFFFFFFFFFFLL;
                goto LABEL_110;
              }
            }
          }
          if (*(_BYTE *)(v37 + 8) == 19)
            return 0;
          v74 = *(unsigned int *)(v37 + 32);
          if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
            v11 = **(_QWORD **)(v11 + 16);
          if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
            v10 = **(_QWORD **)(v10 + 16);
          v85 = sub_1C4846390(a1, a2, v11, v10, v83, v78, a7, v49);
          v86 = v75;
          v76 = sub_1C6133E14(a1, v37, 1, 1);
          *(_QWORD *)&v92[0] = v74;
          DWORD2(v92[0]) = 0;
          sub_1C4848B64((uint64_t)v92, (uint64_t)&v85);
          v60 = __OFADD__(v76, *(_QWORD *)&v92[0]);
          v61 = v76 + *(_QWORD *)&v92[0];
LABEL_109:
          v62 = (v61 >> 63) ^ 0x8000000000000000;
LABEL_110:
          if (v60)
            return v62;
          else
            return v61;
        }
        if (v36)
        {
          v58 = sub_1C6133E14(a1, v36, 0, 1);
          if (!v37)
            goto LABEL_107;
        }
        else
        {
          v58 = 0;
          if (!v37)
          {
LABEL_107:
            v59 = 0;
LABEL_108:
            v60 = __OFADD__(v58, v59);
            v61 = v58 + v59;
            goto LABEL_109;
          }
        }
        v59 = sub_1C6133E14(a1, v37, 1, 0);
        goto LABEL_108;
      }
      if (!v89[0] || !*((_QWORD *)v20 + v89[0] + 12))
        return 4;
      if (*((_BYTE *)v20 + 390 * v89[0] + v84 + 3862) == 2)
        return 4;
      return 1;
  }
}

uint64_t sub_1C4846B20(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!a5)
    __asm { BR              X10 }
  return 1;
}

void sub_1C4846DE0()
{
  JUMPOUT(0x1C4846C84);
}

void sub_1C4846DE8()
{
  JUMPOUT(0x1C4846C84);
}

void sub_1C4846DF0()
{
  JUMPOUT(0x1C4846C84);
}

void sub_1C4846DF8()
{
  JUMPOUT(0x1C4846C84);
}

void sub_1C4846E00()
{
  JUMPOUT(0x1C4846C84);
}

void sub_1C4846E08()
{
  JUMPOUT(0x1C4846C84);
}

void sub_1C4846E10()
{
  JUMPOUT(0x1C4846C84);
}

void sub_1C4846E18()
{
  JUMPOUT(0x1C4846C84);
}

void sub_1C4846E20(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;

  if (a5)
  {
    v5 = 4 * a5;
    while (*a4 < 2 * (int)a5)
    {
      ++a4;
      v5 -= 4;
      if (!v5)
        __asm { BR              X10 }
    }
  }
  __asm { BR              X10 }
}

void sub_1C4846F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  sub_1C613890C(v7, v6, a6);
  JUMPOUT(0x1C4846EDCLL);
}

void sub_1C4846F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  sub_1C6138808(v7, v6, a6);
  JUMPOUT(0x1C4846EDCLL);
}

uint64_t sub_1C4846F4C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;

  result = 0;
  v3 = *(_DWORD *)(a2 + 16);
  if (v3 <= 121)
  {
    v5 = v3 > 0x3A;
    v6 = (1 << v3) & 0x701C00D203000B0;
    if (v5 || v6 == 0)
      return 1;
  }
  else
  {
    v4 = (v3 - 122) > 0x2E || ((1 << (v3 - 122)) & 0x7E0000000013) == 0;
    if (v4
      && ((v3 - 236) > 0x36 || ((1 << (v3 + 20)) & 0x40001000000301) == 0)
      && v3 != 316)
    {
      return 1;
    }
  }
  return result;
}

unint64_t sub_1C4846FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  llvm::FixedVectorType **v12;
  llvm::FixedVectorType **v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  llvm::Type *v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t **v36;
  int v37;
  int v38;
  char *v39;
  llvm::Type *v40;
  uint64_t v41;
  uint64_t **v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  llvm::Type *v46;
  uint64_t v47;
  int v48;
  llvm::Type **v49;
  unint64_t v50;
  llvm::Type *v51;
  int v52;
  uint64_t v53;
  llvm::EVT *v54;
  unint64_t v55;
  uint64_t *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  llvm::Type *v70;
  uint64_t **v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  llvm::Type *v79;
  uint64_t **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  llvm::TargetLoweringBase *v93;
  unsigned int *v94;
  uint64_t v95;
  uint64_t *v96;
  _BOOL4 v97;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  unint64_t *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  _BOOL4 v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  _BOOL4 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  uint64_t v161;
  unsigned __int8 v162;
  unsigned __int8 v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  llvm::Type *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  llvm::Type *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  BOOL v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  uint64_t v225;
  unsigned __int8 v226;
  _DWORD *v227;
  _DWORD *v228;
  int v229;
  _DWORD *v230;
  _DWORD *v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unsigned int v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD v252[2];
  __int128 v253;
  unsigned __int8 v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t __src;
  uint64_t v258;
  int v259;
  void *v260[2];
  _BYTE v261[32];
  void *v262;
  uint64_t v263;
  _DWORD v264[10];
  __int128 v265;
  void *v266;
  uint64_t v267;
  _BYTE v268[32];
  void *v269;
  uint64_t v270;
  _BYTE v271[32];
  __int128 v272;
  int v273;
  void *v274;
  uint64_t v275;
  _BYTE v276[32];
  void *v277;
  uint64_t v278;
  _BYTE v279[32];
  int v280;
  __int128 v281;
  int *v282;
  uint64_t v283;
  int v284;
  uint64_t v285;

  v3 = a3;
  v4 = a1;
  v285 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned int *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 128);
  v250 = *(_QWORD *)(a2 + 136);
  v9 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v9)
  {
    v10 = v5 == 319 || v5 == 322;
    v11 = v10;
    v12 = *(llvm::FixedVectorType ***)(*(_QWORD *)(a2 + 24) + 8 * v11);
    if (((_DWORD)v12[1] & 0xFE) == 0x12)
      v13 = v12;
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
  v14 = 0;
  if ((_DWORD)a3 == 2)
    v15 = 1;
  else
    v15 = 10;
  v282 = &v284;
  v283 = 0x200000000;
  v249 = v250;
  if (v5 <= 186)
  {
    if (v5 > 75)
    {
      if (v5 > 166)
      {
        switch(v5)
        {
          case 167:
          case 168:
            goto LABEL_310;
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
            goto LABEL_314;
          case 175:
            v16 = 230;
            goto LABEL_125;
          case 176:
            v16 = 232;
            goto LABEL_125;
          case 177:
            v16 = 231;
            goto LABEL_125;
          default:
            if (v5 != 185)
              goto LABEL_314;
            llvm::DataLayout::getAlignment(*(_QWORD *)(a1 + 8), v6);
            v163 = v226;
            v164 = v4;
            v165 = 32;
            v166 = v6;
            v167 = v3;
            goto LABEL_382;
        }
      }
      switch(v5)
      {
        case 139:
          v16 = 223;
          break;
        case 140:
          v16 = 241;
          break;
        case 141:
          goto LABEL_314;
        case 142:
        case 143:
          v16 = 141;
          break;
        default:
          if (v5 == 76)
          {
            v16 = 234;
          }
          else
          {
            if (v5 != 90)
              goto LABEL_314;
            v16 = 106;
          }
          break;
      }
    }
    else
    {
      if (v5 <= 50)
      {
        switch(v5)
        {
          case 5:
            goto LABEL_310;
          case 6:
          case 7:
          case 10:
          case 11:
          case 12:
          case 15:
          case 16:
          case 17:
          case 18:
            goto LABEL_314;
          case 8:
            v16 = 186;
            goto LABEL_125;
          case 9:
            v16 = 182;
            goto LABEL_125;
          case 13:
            v16 = 145;
            goto LABEL_125;
          case 14:
            v16 = 235;
            goto LABEL_125;
          case 19:
            v16 = 143;
            goto LABEL_125;
          default:
            if (v5 != 1)
              goto LABEL_314;
            v78 = **(_QWORD **)v6 + 1888;
            if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
            {
              v79 = (llvm::Type *)*(unsigned int *)(v6 + 32);
              v80 = (uint64_t **)(**(_QWORD **)v6 + 1888);
              if (*(_DWORD *)(v6 + 8) == 19)
                llvm::ScalableVectorType::get(v80, v79);
              else
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v80, v79);
              v78 = v81;
            }
            v82 = sub_1C4846B20(v4, 53, v6, v78, v3);
            v83 = sub_1C4846B20(v4, 57, v6, v78, v3);
            if (__OFADD__(v82, v83))
              v84 = ((v82 + v83) >> 63) ^ 0x8000000000000000;
            else
              v84 = v82 + v83;
            sub_1C4845E1C(v4, 15);
            v34 = __OFADD__(v84, v85);
            v35 = v84 + v85;
            goto LABEL_307;
        }
      }
      switch(v5)
      {
        case '3':
          v16 = 227;
          break;
        case '4':
          v16 = 184;
          break;
        case '5':
          v15 = 4;
          v16 = 185;
          break;
        case '6':
          v16 = 183;
          break;
        default:
          if (v5 != 75)
            goto LABEL_314;
          v16 = 233;
          break;
      }
    }
LABEL_125:
    v241 = v15;
    v248 = a2;
    v240 = v7;
    v284 = v16;
    LODWORD(v283) = 1;
    v93 = *(llvm::TargetLoweringBase **)(a1 + 32);
    llvm::TargetLoweringBase::getTypeLegalizationCost(v93, *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v6, (uint64_t)&v253);
    v269 = v271;
    v270 = 0x200000000;
    v266 = v268;
    v267 = 0x200000000;
    if (!(_DWORD)v283)
      goto LABEL_185;
    v244 = v6;
    v246 = v8;
    v242 = v3;
    v94 = (unsigned int *)v282;
    v95 = v254;
    v96 = (uint64_t *)((char *)v93 + 8 * v254 + 96);
    if (DWORD2(v253))
      v97 = SDWORD2(v253) > 0;
    else
      v97 = (uint64_t)v253 > 1;
    v101 = ((v254 - 8) < 7u
         || (v254 - 75) < 0x2Du
         || (v254 + 104) < 0x13u)
        && v5 == 139;
    v102 = 4 * v283;
    while (!(_DWORD)v95)
    {
LABEL_166:
      ++v94;
      v102 -= 4;
      if (!v102)
      {
        v110 = (unint64_t *)v269;
        if (v270 >= 2)
        {
          v111 = (char *)v269 + 16;
          v112 = *(_QWORD *)v269;
          v113 = 16 * v270 - 16;
          v8 = v246;
          v3 = v242;
          v6 = v244;
          do
          {
            v114 = *((_DWORD *)v111 + 2);
            v115 = *((_DWORD *)v110 + 2);
            v10 = v114 == v115;
            v116 = v114 < v115;
            if (v10)
              v116 = *(_QWORD *)v111 < v112;
            if (v116)
            {
              v112 = *(_QWORD *)v111;
              v110 = (unint64_t *)v111;
            }
            v111 += 16;
            v113 -= 16;
          }
          while (v113);
        }
        else
        {
          v8 = v246;
          v3 = v242;
          v6 = v244;
        }
        if (v110 != (unint64_t *)((char *)v269 + 16 * v270))
          goto LABEL_184;
        v110 = (unint64_t *)v266;
        if (v267 >= 2)
        {
          v117 = (char *)v266 + 16;
          v118 = *(_QWORD *)v266;
          v119 = 16 * v267 - 16;
          do
          {
            v120 = *((_DWORD *)v117 + 2);
            v121 = *((_DWORD *)v110 + 2);
            v10 = v120 == v121;
            v122 = v120 < v121;
            if (v10)
              v122 = *(_QWORD *)v117 < v118;
            if (v122)
            {
              v118 = *(_QWORD *)v117;
              v110 = (unint64_t *)v117;
            }
            v117 += 16;
            v119 -= 16;
          }
          while (v119);
        }
        if (v110 != (unint64_t *)((char *)v266 + 16 * v267))
        {
LABEL_184:
          v14 = *v110;
          goto LABEL_254;
        }
LABEL_185:
        if (v5 == 90)
        {
          v127 = *(char **)(v248 + 24);
          v128 = *(unsigned int *)(v248 + 32);
          *(_QWORD *)&v272 = 0;
          *((_QWORD *)&v272 + 1) = v6;
          v273 = 89;
          v274 = v276;
          v275 = 0x400000000;
          v277 = v279;
          v278 = 0x400000000;
          v280 = 0;
          v281 = xmmword_1C64632D0;
          sub_1C4F7C758((unsigned int *)&v274, (uint64_t)v276, v127, &v127[8 * v128]);
          v129 = *(char **)(v248 + 24);
          v130 = *(unsigned int *)(v248 + 32);
          __src = 0;
          v258 = v6;
          v259 = 83;
          v260[0] = v261;
          v260[1] = (void *)0x400000000;
          v262 = v264;
          v263 = 0x400000000;
          v264[8] = 0;
          v265 = xmmword_1C64632D0;
          sub_1C4F7C758((unsigned int *)v260, (uint64_t)v261, v129, &v129[8 * v130]);
          v131 = sub_1C484559C(v4, &v272, v3);
          v132 = sub_1C484559C(v4, &__src, v3);
          if (__OFADD__(v131, v132))
            v14 = ((v131 + v132) >> 63) ^ 0x8000000000000000;
          else
            v14 = v131 + v132;
          if (v262 != v264)
            free(v262);
          if (v260[0] != v261)
            free(v260[0]);
          if (v277 != v279)
            free(v277);
          v133 = (char *)v274;
          if (v274 == v276)
            goto LABEL_254;
        }
        else
        {
          v123 = v248;
          if (v5 == 143)
          {
            sub_1C4845E1C(v4, 18);
            v125 = v124;
            sub_1C4845E1C(v4, 14);
            if (__OFADD__(v125, v126))
              v14 = ((v125 + v126) >> 63) ^ 0x8000000000000000;
            else
              v14 = v125 + v126;
            goto LABEL_254;
          }
          if ((*(_DWORD *)(v6 + 8) & 0xFE) != 0x12 || !v6)
          {
            v14 = v241;
            goto LABEL_254;
          }
          if (*(_DWORD *)(v6 + 8) == 19)
          {
            v14 = 0;
            goto LABEL_254;
          }
          v134 = *(unsigned int *)(v248 + 32);
          if ((_DWORD)v134)
          {
            v135 = *(_QWORD *)(v248 + 24);
            v136 = 8 * v134;
            while (*(_BYTE *)(*(_QWORD *)v135 + 8) != 19)
            {
              v135 += 8;
              v136 -= 8;
              if (!v136)
                goto LABEL_211;
            }
            v14 = 0;
LABEL_254:
            if (v266 != v268)
              free(v266);
            v77 = v269;
            if (v269 != v271)
LABEL_257:
              free(v77);
            goto LABEL_310;
          }
LABEL_211:
          if ((_DWORD)v250)
          {
            v8 = sub_1C6133E14(v4, v6, 1, 0);
            v250 = v225;
            v123 = v248;
            LODWORD(v134) = *(_DWORD *)(v248 + 32);
          }
          v247 = v8;
          v137 = v6;
          v138 = *(_DWORD *)(v6 + 32);
          __src = (uint64_t)&v259;
          v258 = 0x400000000;
          if ((_DWORD)v134)
          {
            v139 = v5;
            v140 = v3;
            v141 = v4;
            v142 = 0;
            LODWORD(v143) = 0;
            v144 = 8 * v134;
            do
            {
              v145 = *(_QWORD *)(*(_QWORD *)(v123 + 24) + v142);
              if ((*(_DWORD *)(v145 + 8) & 0xFE) == 0x12)
                v145 = **(_QWORD **)(v145 + 16);
              if (v143 >= HIDWORD(v258))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v259, v143 + 1, 8);
                v123 = v248;
                LODWORD(v143) = v258;
              }
              *(_QWORD *)(__src + 8 * v143) = v145;
              v143 = (v258 + 1);
              LODWORD(v258) = v258 + 1;
              v142 += 8;
            }
            while (v144 != v142);
            v4 = v141;
            v3 = v140;
            v5 = v139;
          }
          else
          {
            v143 = 0;
          }
          if ((*(_DWORD *)(v137 + 8) & 0xFE) == 0x12)
            v137 = **(_QWORD **)(v137 + 16);
          *(_QWORD *)&v272 = 0;
          *((_QWORD *)&v272 + 1) = v137;
          v273 = v5;
          v274 = v276;
          v275 = 0x400000000;
          v277 = v279;
          v278 = 0x400000000;
          v280 = v240;
          v281 = xmmword_1C64632D0;
          sub_1C4F7C758((unsigned int *)&v274, (uint64_t)v276, (char *)__src, (char *)(__src + 8 * v143));
          v252[0] = sub_1C484559C(v4, &v272, v3);
          v252[1] = v146;
          v147 = v248;
          v148 = *(unsigned int *)(v248 + 32);
          if ((_DWORD)v148)
          {
            v149 = v4;
            v150 = 0;
            v151 = 8 * v148;
            do
            {
              v152 = *(_QWORD *)(*(_QWORD *)(v147 + 24) + v150);
              if (v152)
                v153 = (*(_DWORD *)(v152 + 8) & 0xFE) == 18;
              else
                v153 = 0;
              if (v153)
              {
                if (*(_DWORD *)(v147 + 136))
                {
                  v154 = sub_1C6133E14(v149, *(_QWORD *)(*(_QWORD *)(v147 + 24) + v150), 0, 1);
                  v147 = v248;
                  v155 = v250;
                  if (v156 == 1)
                    v155 = 1;
                  v250 = v155;
                  v157 = v247 + v154;
                  if (__OFADD__(v247, v154))
                    v157 = ((uint64_t)(v247 + v154) >> 63) ^ 0x8000000000000000;
                  v247 = v157;
                }
                if (v138 <= *(_DWORD *)(v152 + 32))
                  v138 = *(_DWORD *)(v152 + 32);
              }
              v150 += 8;
            }
            while (v151 != v150);
          }
          v255 = v138;
          LODWORD(v256) = 0;
          sub_1C4848B64((uint64_t)&v255, (uint64_t)v252);
          if (__OFADD__(v255, v247))
            v14 = ((uint64_t)(v255 + v247) >> 63) ^ 0x8000000000000000;
          else
            v14 = v255 + v247;
          if (v277 != v279)
            free(v277);
          if (v274 != v276)
            free(v274);
          v133 = (char *)__src;
          if ((int *)__src == &v259)
            goto LABEL_254;
        }
        free(v133);
        goto LABEL_254;
      }
    }
    v103 = *v94;
    if ((_DWORD)v95 == 1)
    {
      if (v103 > 0x185)
      {
LABEL_155:
        v104 = *v96;
        goto LABEL_156;
      }
    }
    else
    {
      v104 = *v96;
      if (v103 > 0x185 || v104 == 0)
      {
LABEL_156:
        if (v104 && (v103 > 0x185 || *((_BYTE *)v93 + 390 * v95 + v103 + 3862) != 2))
        {
          __src = 2;
          LODWORD(v258) = 0;
          v272 = v253;
          sub_1C4848B64((uint64_t)&v272, (uint64_t)&__src);
          v106 = v272;
          v107 = v267;
          if (v267 >= (unint64_t)HIDWORD(v267))
          {
            v238 = v272;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v266, (uint64_t)v268, v267 + 1, 16);
            v106 = v238;
            v107 = v267;
          }
          *((_OWORD *)v266 + v107) = v106;
          LODWORD(v267) = v267 + 1;
        }
        goto LABEL_166;
      }
    }
    if (*((unsigned __int8 *)v93 + 390 * v95 + v103 + 3862) <= 1u)
    {
      if (v101
        && ((*(uint64_t (**)(llvm::TargetLoweringBase *, uint64_t, _QWORD))(*(_QWORD *)v93 + 1328))(v93, v95, 0) & 1) != 0)
      {
        v14 = 0;
        goto LABEL_254;
      }
      if (v97)
        __src = 2;
      else
        __src = 1;
      LODWORD(v258) = 0;
      v272 = v253;
      sub_1C4848B64((uint64_t)&v272, (uint64_t)&__src);
      v108 = v272;
      v109 = v270;
      if (v270 >= (unint64_t)HIDWORD(v270))
      {
        v239 = v272;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v269, (uint64_t)v271, v270 + 1, 16);
        v108 = v239;
        v109 = v270;
      }
      *((_OWORD *)v269 + v109) = v108;
      LODWORD(v270) = v270 + 1;
      goto LABEL_166;
    }
    goto LABEL_155;
  }
  v16 = 224;
  switch(v5)
  {
    case 238:
      v16 = 229;
      goto LABEL_125;
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 261:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 277:
    case 279:
    case 281:
    case 282:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 297:
    case 298:
    case 299:
    case 302:
    case 303:
    case 304:
    case 308:
    case 310:
    case 313:
    case 314:
    case 315:
    case 316:
LABEL_314:
      v197 = *(unsigned __int8 *)(v6 + 8);
      if (v197 == 19)
      {
        v14 = 0;
        goto LABEL_310;
      }
      v198 = v250;
      if (!(_DWORD)v9)
        goto LABEL_320;
      v199 = *(_QWORD *)(a2 + 24);
      v200 = 8 * v9;
      break;
    case 244:
    case 272:
      goto LABEL_310;
    case 258:
      v16 = 237;
      goto LABEL_125;
    case 259:
      v16 = 239;
      goto LABEL_125;
    case 260:
      v16 = 240;
      goto LABEL_125;
    case 262:
    case 283:
      v36 = (uint64_t **)(**(_QWORD **)v6 + 1888);
      v37 = *(_DWORD *)(v6 + 8);
      v38 = v7;
      if ((v37 & 0xFE) == 0x12)
      {
        v39 = (char *)v6;
        v40 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        v41 = a1;
        if (v37 == 19)
          llvm::ScalableVectorType::get(v36, v40);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v36, v40);
        v36 = v42;
      }
      else
      {
        v39 = (char *)v6;
        v41 = a1;
      }
      *(_QWORD *)&v272 = v39;
      *((_QWORD *)&v272 + 1) = v36;
      v86 = llvm::StructType::create((_QWORD **)&v272, 2);
      if (v5 == 262)
        v87 = 263;
      else
        v87 = 284;
      __src = (uint64_t)v39;
      v258 = (uint64_t)v39;
      *(_QWORD *)&v272 = 0;
      *((_QWORD *)&v272 + 1) = v86;
      v273 = v87;
      v274 = v276;
      v275 = 0x400000000;
      v277 = v279;
      v278 = 0x400000000;
      v280 = v38;
      *(_QWORD *)&v281 = v8;
      *((_QWORD *)&v281 + 1) = v250;
      sub_1C4F7C758((unsigned int *)&v274, (uint64_t)v276, (char *)&__src, (char *)&v259);
      v88 = sub_1C484559C(v41, &v272, v3);
      v89 = sub_1C4846B20(v41, 53, (uint64_t)v39, (uint64_t)v36, v3);
      v90 = v3;
      if (__OFADD__(v88, v89))
        v91 = ((v88 + v89) >> 63) ^ 0x8000000000000000;
      else
        v91 = v88 + v89;
      v269 = (void *)sub_1C4846B20(v41, 57, (uint64_t)v39, (uint64_t)v36, v90);
      v270 = v92;
      __src = 2;
      LODWORD(v258) = 0;
      sub_1C4848B64((uint64_t)&__src, (uint64_t)&v269);
      if (__OFADD__(v91, __src))
        v14 = ((uint64_t)(v91 + __src) >> 63) ^ 0x8000000000000000;
      else
        v14 = v91 + __src;
      if (v277 != v279)
        free(v277);
      v77 = v274;
      if (v274 != v276)
        goto LABEL_257;
      goto LABEL_310;
    case 263:
    case 284:
      v56 = *(uint64_t **)(v6 + 16);
      v57 = v5;
      v58 = a3;
      v59 = *v56;
      v60 = v56[1];
      if (v57 == 263)
        v61 = 13;
      else
        v61 = 15;
      sub_1C4845E1C(a1, v61);
      v63 = v62;
      __src = sub_1C4846B20(v4, 53, v59, v60, v58);
      v258 = v64;
      *(_QWORD *)&v272 = 2;
      DWORD2(v272) = 0;
      sub_1C4848B64((uint64_t)&v272, (uint64_t)&__src);
      v65 = v4;
      if (__OFADD__(v63, (_QWORD)v272))
        v66 = ((v63 + (uint64_t)v272) >> 63) ^ 0x8000000000000000;
      else
        v66 = v63 + v272;
      sub_1C4845E1C(v65, 30);
      goto LABEL_284;
    case 273:
      v16 = 226;
      goto LABEL_125;
    case 274:
    case 275:
    case 305:
    case 306:
      v17 = **(_QWORD **)v6 + 1888;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      {
        v18 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        v19 = (uint64_t **)(**(_QWORD **)v6 + 1888);
        if (*(_DWORD *)(v6 + 8) == 19)
          llvm::ScalableVectorType::get(v19, v18);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v18);
        v17 = v20;
      }
      v21 = sub_1C4846B20(v4, 53, v6, v17, v3);
      v22 = v4;
      v23 = 57;
      v24 = v6;
      v25 = v17;
      v26 = v3;
      goto LABEL_42;
    case 276:
    case 307:
      v51 = (llvm::Type *)v6;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
        v51 = **(llvm::Type ***)(v6 + 16);
      v52 = 2 * llvm::Type::getPrimitiveSizeInBits(v51);
      v53 = v6;
      v54 = *(llvm::EVT **)v6;
      LODWORD(v272) = v52;
      if (v52 <= 63)
      {
        switch(v52)
        {
          case 32:
            v55 = *(_QWORD *)v54 + 1960;
            goto LABEL_287;
          case 16:
            v55 = *(_QWORD *)v54 + 1936;
            goto LABEL_287;
          case 8:
            v55 = *(_QWORD *)v54 + 1912;
            goto LABEL_287;
        }
      }
      else
      {
        if (v52 == 64)
        {
          v55 = *(_QWORD *)v54 + 1984;
          goto LABEL_287;
        }
        if (v52 == 128)
        {
          v55 = *(_QWORD *)v54 + 2008;
          goto LABEL_287;
        }
      }
      v230 = sub_1C5270984(*(_QWORD *)v54 + 2168, &v272);
      v55 = *((_QWORD *)v230 + 1);
      if (!v55)
      {
        v231 = v230;
        v55 = sub_1C484358C(*(_QWORD *)v54 + 2040, 24, 3);
        v232 = v272;
        *(_QWORD *)v55 = v54;
        *(_QWORD *)(v55 + 16) = 0;
        *(_QWORD *)(v55 + 8) = (v232 << 8) | 0xDu;
        *((_QWORD *)v231 + 1) = v55;
      }
LABEL_287:
      if ((*(_DWORD *)(v53 + 8) & 0xFE) == 0x12)
      {
        v181 = (llvm::Type *)*(unsigned int *)(v53 + 32);
        if (*(_DWORD *)(v53 + 8) == 19)
          llvm::ScalableVectorType::get((uint64_t **)v55, v181);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v55, v181);
        v55 = v182;
      }
      if (v5 == 276)
        v183 = 40;
      else
        v183 = 39;
      __src = sub_1C4846390(v4, v183, (llvm::Type ***)v55, (llvm::Type ***)v53, 0, v3, 0);
      v258 = v184;
      *(_QWORD *)&v272 = 2;
      DWORD2(v272) = 0;
      sub_1C4848B64((uint64_t)&v272, (uint64_t)&__src);
      v185 = v3;
      v186 = v272;
      sub_1C4845E1C(v4, 17);
      if (__OFADD__(v186, v187))
        v188 = ((v186 + v187) >> 63) ^ 0x8000000000000000;
      else
        v188 = v186 + v187;
      __src = sub_1C4846390(v4, 38, (llvm::Type ***)v53, (llvm::Type ***)v55, 0, v185, 0);
      v258 = v189;
      *(_QWORD *)&v272 = 2;
      DWORD2(v272) = 0;
      sub_1C4848B64((uint64_t)&v272, (uint64_t)&__src);
      if (__OFADD__(v188, (_QWORD)v272))
        v190 = ((uint64_t)(v188 + v272) >> 63) ^ 0x8000000000000000;
      else
        v190 = v188 + v272;
      sub_1C4845E1C(v4, 26);
      if (__OFADD__(v190, v191))
        v192 = ((uint64_t)(v190 + v191) >> 63) ^ 0x8000000000000000;
      else
        v192 = v190 + v191;
      sub_1C4845E1C(v4, 25);
      if (__OFADD__(v192, v193))
        v194 = ((uint64_t)(v192 + v193) >> 63) ^ 0x8000000000000000;
      else
        v194 = v192 + v193;
      sub_1C4845E1C(v4, 29);
      v34 = __OFADD__(v194, v195);
      v35 = v194 + v195;
      goto LABEL_307;
    case 278:
    case 309:
      v43 = a3;
      v44 = *(uint64_t **)(v6 + 16);
      v45 = *v44;
      v46 = (llvm::Type *)*v44;
      if ((*(_DWORD *)(*v44 + 8) & 0xFE) == 0x12)
        v46 = **(llvm::Type ***)(v45 + 16);
      v47 = v44[1];
      v48 = 2 * llvm::Type::getPrimitiveSizeInBits(v46);
      v49 = *(llvm::Type ***)v45;
      LODWORD(v272) = v48;
      v251 = v47;
      if (v48 <= 63)
      {
        switch(v48)
        {
          case 32:
            v50 = (unint64_t)*v49 + 1960;
            goto LABEL_263;
          case 16:
            v50 = (unint64_t)*v49 + 1936;
            goto LABEL_263;
          case 8:
            v50 = (unint64_t)*v49 + 1912;
            goto LABEL_263;
        }
      }
      else
      {
        if (v48 == 64)
        {
          v50 = (unint64_t)*v49 + 1984;
          goto LABEL_263;
        }
        if (v48 == 128)
        {
          v50 = (unint64_t)*v49 + 2008;
          goto LABEL_263;
        }
      }
      v227 = sub_1C5270984((uint64_t)*v49 + 2168, &v272);
      v50 = *((_QWORD *)v227 + 1);
      if (!v50)
      {
        v228 = v227;
        v50 = sub_1C484358C((uint64_t)*v49 + 2040, 24, 3);
        v229 = v272;
        *(_QWORD *)v50 = v49;
        *(_QWORD *)(v50 + 16) = 0;
        *(_QWORD *)(v50 + 8) = (v229 << 8) | 0xDu;
        *((_QWORD *)v228 + 1) = v50;
      }
LABEL_263:
      if ((*(_DWORD *)(v45 + 8) & 0xFE) == 0x12)
      {
        v168 = (llvm::Type *)*(unsigned int *)(v45 + 32);
        if (*(_DWORD *)(v45 + 8) == 19)
          llvm::ScalableVectorType::get((uint64_t **)v50, v168);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v50, v168);
        v50 = v169;
      }
      if (v5 == 278)
        v170 = 40;
      else
        v170 = 39;
      __src = sub_1C4846390(v4, v170, (llvm::Type ***)v50, (llvm::Type ***)v45, 0, v43, 0);
      v258 = v171;
      v172 = v4;
      *(_QWORD *)&v272 = 2;
      DWORD2(v272) = 0;
      sub_1C4848B64((uint64_t)&v272, (uint64_t)&__src);
      v173 = v5;
      v174 = v272;
      sub_1C4845E1C(v4, 17);
      if (__OFADD__(v174, v175))
        v176 = ((v174 + v175) >> 63) ^ 0x8000000000000000;
      else
        v176 = v174 + v175;
      __src = sub_1C4846390(v4, 38, (llvm::Type ***)v45, (llvm::Type ***)v50, 0, v43, 0);
      v258 = v177;
      *(_QWORD *)&v272 = 2;
      DWORD2(v272) = 0;
      sub_1C4848B64((uint64_t)&v272, (uint64_t)&__src);
      if (__OFADD__(v176, (_QWORD)v272))
        v178 = ((uint64_t)(v176 + v272) >> 63) ^ 0x8000000000000000;
      else
        v178 = v176 + v272;
      sub_1C4845E1C(v4, 26);
      if (__OFADD__(v178, v179))
        v66 = ((uint64_t)(v178 + v179) >> 63) ^ 0x8000000000000000;
      else
        v66 = v178 + v179;
      if (v173 == 278)
      {
        sub_1C4845E1C(v172, 27);
        if (__OFADD__(v66, v180))
          v66 = ((uint64_t)(v66 + v180) >> 63) ^ 0x8000000000000000;
        else
          v66 += v180;
      }
      v67 = sub_1C4846B20(v172, 53, v45, v251, v43);
LABEL_284:
      v34 = __OFADD__(v66, v67);
      v35 = v66 + v67;
LABEL_307:
      if (v34)
        v14 = (v35 >> 63) ^ 0x8000000000000000;
      else
        v14 = v35;
      goto LABEL_310;
    case 280:
      goto LABEL_125;
    case 296:
      v16 = 236;
      goto LABEL_125;
    case 300:
    case 311:
      v68 = **(_QWORD **)v6 + 1888;
      v69 = v7;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      {
        v70 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        v71 = (uint64_t **)(**(_QWORD **)v6 + 1888);
        if (*(_DWORD *)(v6 + 8) == 19)
          llvm::ScalableVectorType::get(v71, v70);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v71, v70);
        v68 = v72;
      }
      *(_QWORD *)&v272 = v6;
      *((_QWORD *)&v272 + 1) = v68;
      v73 = llvm::StructType::create((_QWORD **)&v272, 2);
      if (v5 == 300)
        v74 = 301;
      else
        v74 = 312;
      __src = v6;
      v258 = v6;
      *(_QWORD *)&v272 = 0;
      *((_QWORD *)&v272 + 1) = v73;
      v273 = v74;
      v274 = v276;
      v275 = 0x400000000;
      v277 = v279;
      v278 = 0x400000000;
      v280 = v69;
      *(_QWORD *)&v281 = v8;
      *((_QWORD *)&v281 + 1) = v250;
      sub_1C4F7C758((unsigned int *)&v274, (uint64_t)v276, (char *)&__src, (char *)&v259);
      v75 = sub_1C484559C(v4, &v272, v3);
      v76 = sub_1C4846B20(v4, 57, v6, v68, v3);
      if (__OFADD__(v75, v76))
        v14 = ((v75 + v76) >> 63) ^ 0x8000000000000000;
      else
        v14 = v75 + v76;
      if (v277 != v279)
        free(v277);
      v77 = v274;
      if (v274 != v276)
        goto LABEL_257;
      goto LABEL_310;
    case 301:
    case 312:
      v27 = *(uint64_t **)(v6 + 16);
      v28 = a3;
      v29 = *v27;
      v30 = v27[1];
      if (v5 == 301)
        v31 = 13;
      else
        v31 = 15;
      sub_1C4845E1C(a1, v31);
      v21 = v32;
      v22 = v4;
      v23 = 53;
      v24 = v29;
      v25 = v30;
      v26 = v28;
LABEL_42:
      v33 = sub_1C4846B20(v22, v23, v24, v25, v26);
      v34 = __OFADD__(v21, v33);
      v35 = v21 + v33;
      goto LABEL_307;
    case 317:
      v224 = 13;
      goto LABEL_380;
    case 318:
      v224 = 28;
      goto LABEL_380;
    case 319:
      v222 = v7 | 0x100000000;
      v223 = 14;
      goto LABEL_374;
    case 320:
    case 321:
    case 325:
    case 326:
    case 327:
    case 328:
      sub_1C4774CC4(v13);
      v159 = sub_1C6137BFC(v4, v13, v158, v3);
      goto LABEL_383;
    case 322:
      v222 = v7 | 0x100000000;
      v223 = 18;
LABEL_374:
      v159 = sub_1C6137BE0(a1, v223, (uint64_t)v13, v222, a3);
      goto LABEL_383;
    case 323:
      v224 = 17;
      goto LABEL_380;
    case 324:
      v224 = 29;
      goto LABEL_380;
    case 329:
      v224 = 30;
LABEL_380:
      v159 = sub_1C613823C(a1, v224, v13, a3);
      goto LABEL_383;
    default:
      switch(v5)
      {
        case 192:
          v16 = 251;
          goto LABEL_125;
        case 193:
          v16 = 247;
          goto LABEL_125;
        case 194:
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
          goto LABEL_314;
        case 201:
          v16 = 250;
          goto LABEL_125;
        case 202:
          v16 = 246;
          goto LABEL_125;
        case 203:
          v16 = 238;
          goto LABEL_125;
        default:
          if (v5 != 187)
            goto LABEL_314;
          v160 = a3;
          v161 = **(_QWORD **)(a2 + 24);
          llvm::DataLayout::getAlignment(*(_QWORD *)(a1 + 8), v161);
          v163 = v162;
          v164 = v4;
          v165 = 33;
          v166 = v161;
          v167 = v160;
LABEL_382:
          v159 = sub_1C6137F68(v164, v165, v166, v163, 1, 0, v167);
          break;
      }
LABEL_383:
      v14 = v159;
      goto LABEL_310;
  }
  do
  {
    if (*(_BYTE *)(*(_QWORD *)v199 + 8) == 19)
    {
      v14 = 0;
      goto LABEL_310;
    }
    v199 += 8;
    v200 -= 8;
  }
  while (v200);
LABEL_320:
  v245 = v6;
  if ((_DWORD)v250)
    v201 = 0;
  else
    v201 = v8;
  v202 = v250;
  if ((_DWORD)v250)
    v202 = 0;
  v203 = 1;
  if ((v197 & 0xFE) == 0x12 && v245)
  {
    if ((_DWORD)v250)
    {
      v233 = v7;
      v234 = a2;
      v235 = sub_1C6133E14(a1, v245, 1, 0);
      v198 = v250;
      v8 = v235;
      v7 = v233;
      v237 = v236;
      a2 = v234;
      v250 = v237;
      v197 = *(_DWORD *)(v245 + 8);
    }
    if (*(_DWORD *)(v245 + 32) <= 1u)
      v203 = 1;
    else
      v203 = *(_DWORD *)(v245 + 32);
    if ((v197 & 0xFE) == 0x12)
      v245 = **(_QWORD **)(v245 + 16);
  }
  else
  {
    v8 = v201;
    v250 = v202;
  }
  __src = (uint64_t)&v259;
  v258 = 0x400000000;
  v204 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v204)
  {
    v243 = v3;
    v205 = v4;
    v206 = 0;
    v207 = 8 * v204;
    do
    {
      v208 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + v206);
      v209 = *(_DWORD *)(v208 + 8);
      if (v208)
        v210 = (*(_DWORD *)(v208 + 8) & 0xFE) == 18;
      else
        v210 = 0;
      if (v210)
      {
        if (v198)
        {
          v213 = v7;
          v214 = a2;
          v215 = sub_1C6133E14(v205, *(_QWORD *)(*(_QWORD *)(a2 + 24) + v206), 0, 1);
          v198 = v249;
          v216 = v250;
          v10 = v217 == 1;
          a2 = v214;
          if (v10)
            v216 = 1;
          v250 = v216;
          v7 = v213;
          if (__OFADD__(v8, v215))
            v8 = ((uint64_t)(v8 + v215) >> 63) ^ 0x8000000000000000;
          else
            v8 += v215;
          v209 = *(_DWORD *)(v208 + 8);
        }
        if (v203 <= *(_DWORD *)(v208 + 32))
          v203 = *(_DWORD *)(v208 + 32);
        if ((v209 & 0xFE) == 0x12)
          v208 = **(_QWORD **)(v208 + 16);
      }
      v211 = v258;
      if (v258 >= (unint64_t)HIDWORD(v258))
      {
        v218 = v7;
        v219 = a2;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v259, v258 + 1, 8);
        v198 = v249;
        a2 = v219;
        v7 = v218;
        v211 = v258;
      }
      *(_QWORD *)(__src + 8 * v211) = v208;
      v212 = (v258 + 1);
      LODWORD(v258) = v258 + 1;
      v206 += 8;
    }
    while (v207 != v206);
    v220 = (char *)__src;
    v4 = v205;
    v3 = v243;
  }
  else
  {
    v212 = 0;
    v220 = (char *)&v259;
  }
  if (v203 == 1)
  {
    v14 = 1;
  }
  else
  {
    *(_QWORD *)&v272 = 0;
    *((_QWORD *)&v272 + 1) = v245;
    v273 = v5;
    v274 = v276;
    v275 = 0x400000000;
    v277 = v279;
    v278 = 0x400000000;
    v280 = v7;
    v281 = xmmword_1C64632D0;
    sub_1C4F7C758((unsigned int *)&v274, (uint64_t)v276, v220, &v220[8 * v212]);
    v266 = (void *)sub_1C484559C(v4, &v272, v3);
    v267 = v221;
    v269 = (void *)v203;
    LODWORD(v270) = 0;
    sub_1C4848B64((uint64_t)&v269, (uint64_t)&v266);
    if (__OFADD__(v269, v8))
      v14 = ((uint64_t)((uint64_t)v269 + v8) >> 63) ^ 0x8000000000000000;
    else
      v14 = (unint64_t)v269 + v8;
    if (v277 != v279)
      free(v277);
    if (v274 != v276)
      free(v274);
    v220 = (char *)__src;
  }
  if (v220 != (char *)&v259)
  {
    v77 = v220;
    goto LABEL_257;
  }
LABEL_310:
  if (v282 != &v284)
    free(v282);
  return v14;
}

unint64_t sub_1C4848A1C(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  char v13;
  unint64_t v14;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  _BYTE v20[32];

  v16 = v20;
  v17 = v20;
  v18 = 4;
  v19 = 0;
  v4 = a3;
  if (!a3)
    return 0;
  v8 = 0;
  do
  {
    v9 = *a2;
    v10 = *a4;
    if ((*(_DWORD *)(*a4 + 8) & 0xFE) == 0x12)
      v11 = *(unsigned __int8 *)(**(_QWORD **)(v10 + 16) + 8);
    else
      v11 = *(_DWORD *)(*a4 + 8);
    v12 = v11 < 7 || v11 == 13;
    if ((v12 || v11 == 15) && *(unsigned __int8 *)(v9 + 16) >= 0x15u)
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v16, v9);
      if (v13)
      {
        if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
        {
          v14 = sub_1C6133E14(a1, v10, 0, 1);
          if (__OFADD__(v8, v14))
            v8 = ((uint64_t)(v8 + v14) >> 63) ^ 0x8000000000000000;
          else
            v8 += v14;
        }
      }
    }
    ++a4;
    ++a2;
    --v4;
  }
  while (v4);
  if (v17 != v16)
    free(v17);
  return v8;
}

uint64_t sub_1C4848B64(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;

  if (*(_DWORD *)(a2 + 8) == 1)
    *(_DWORD *)(result + 8) = 1;
  v2 = *(_QWORD *)result;
  v3 = *(_QWORD *)a2;
  if (*(uint64_t *)result >= 0)
    v4 = *(_QWORD *)result;
  else
    v4 = -v2;
  if (v3 >= 0)
    v5 = *(_QWORD *)a2;
  else
    v5 = -v3;
  v6 = v5 * v4;
  if ((v3 ^ v2) >= 0)
    v7 = v5 * v4;
  else
    v7 = -(uint64_t)v6;
  if (v2)
    v8 = v3 == 0;
  else
    v8 = 1;
  if (v8)
  {
    v6 = v7;
  }
  else
  {
    if ((v3 ^ v2) < 0)
    {
      if (v4 <= 0x8000000000000000 / v5)
      {
        v6 = -(uint64_t)(v5 * v4);
        goto LABEL_27;
      }
    }
    else if (v4 <= 0x7FFFFFFFFFFFFFFFLL / v5)
    {
      goto LABEL_27;
    }
    if (v2 < 1 || v3 <= 0)
      v6 = ((v3 & v2) >> 63) ^ 0x8000000000000000;
    else
      v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_27:
  *(_QWORD *)result = v6;
  return result;
}

unsigned int *sub_1C4848C0C(unsigned int *result, unint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;

  v5 = result;
  if (result[3] >= a2)
  {
    v8 = result[2];
    if (v8 >= a2)
      v9 = a2;
    else
      v9 = result[2];
    if (v9)
    {
      v10 = *(_QWORD **)result;
      do
      {
        *v10++ = a3;
        --v9;
      }
      while (v9);
    }
    v11 = v8 - a2;
    if (v8 < a2)
    {
      v12 = (_QWORD *)(*(_QWORD *)result + 8 * v8);
      do
        *v12++ = a3;
      while (!__CFADD__(v11++, 1));
    }
  }
  else
  {
    result[2] = 0;
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), a2, 8);
    v6 = *(_QWORD **)v5;
    v7 = a2;
    do
    {
      *v6++ = a3;
      --v7;
    }
    while (v7);
  }
  v5[2] = a2;
  return result;
}

BOOL sub_1C4848CBC(uint64_t *a1, int a2, llvm::Type ***this, llvm::Type ***a4)
{
  llvm::Type *v4;
  llvm::Type *v5;
  unsigned int PrimitiveSizeInBits;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  int v22;
  char *v23;
  size_t v24;
  char *v25;
  char *v26;

  v4 = (llvm::Type *)a4;
  v5 = (llvm::Type *)this;
  if (a2 <= 47)
  {
    if (a2 == 38)
    {
      sub_1C4768AD0(*a1, (uint64_t)this);
      if (v22 == 1)
        return 1;
      v23 = *(char **)(*a1 + 32);
      v24 = *(_QWORD *)(*a1 + 40);
      v25 = &v23[v24];
      if (v21 <= 0xFF)
      {
        v26 = (char *)memchr(v23, (char)v21, v24);
        if (v26)
          v25 = v26;
      }
      if (v25 - v23 == v24)
        return 1;
    }
    else
    {
      if (a2 != 47)
        return 1;
      if (((_DWORD)this[1] & 0xFE) == 0x12)
        v5 = *this[2];
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v5);
      v8 = PrimitiveSizeInBits;
      v9 = *a1;
      v10 = *(_QWORD *)(v9 + 32);
      v11 = *(char **)(v9 + 40);
      v12 = &v11[v10];
      if (PrimitiveSizeInBits <= 0xFF)
      {
        v13 = (char *)memchr(*(void **)(v9 + 32), (char)PrimitiveSizeInBits, *(_QWORD *)(v9 + 40));
        if (v13)
          v12 = v13;
      }
      if (&v12[-v10] == v11 || llvm::DataLayout::getPointerTypeSizeInBits(v9, (uint64_t)v4) > v8)
        return 1;
    }
    return 0;
  }
  if (a2 != 49)
  {
    if (a2 != 48)
      return 1;
    if (((_DWORD)a4[1] & 0xFE) == 0x12)
      v4 = *a4[2];
    v14 = llvm::Type::getPrimitiveSizeInBits(v4);
    v15 = v14;
    v16 = *a1;
    v17 = *(_QWORD *)(v16 + 32);
    v18 = *(char **)(v16 + 40);
    v19 = &v18[v17];
    if (v14 <= 0xFF)
    {
      v20 = (char *)memchr(*(void **)(v16 + 32), (char)v14, *(_QWORD *)(v16 + 40));
      if (v20)
        v19 = v20;
    }
    return &v19[-v17] == v18 || llvm::DataLayout::getPointerTypeSizeInBits(v16, (uint64_t)v5) < v15;
  }
  return this != a4 && (*((_BYTE *)this + 8) != 15 || *((_BYTE *)a4 + 8) != 15);
}

uint64_t sub_1C4848E88(uint64_t a1, uint64_t a2, BOOL a3)
{
  int v5;
  BOOL v6;
  unint64_t EVT;
  uint64_t v8;
  uint64_t v9;
  int v10;
  llvm::EVT ***v11;
  unint64_t v12;
  uint64_t v13;
  int v15;
  _QWORD **v16;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 67)
  {
    v15 = *(_DWORD *)(a2 + 20);
    if ((v15 & 0x40000000) != 0)
      v16 = *(_QWORD ***)(a2 - 8);
    else
      v16 = (_QWORD **)(a2 - 32 * (v15 & 0x7FFFFFF));
    if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1184))(a1, **v16, *(_QWORD *)a2) & 1) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1496))(a1, a2);
  }
  else
  {
    if (v5 != 74)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1496))(a1, a2);
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)a2, 0, a3);
    v9 = v8;
    v10 = *(_DWORD *)(a2 + 20);
    v11 = (v10 & 0x40000000) != 0 ? *(llvm::EVT ****)(a2 - 8) : (llvm::EVT ***)(a2 - 32 * (v10 & 0x7FFFFFF));
    v12 = llvm::EVT::getEVT(**v11, 0, v6);
    if (((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 1288))(a1, EVT, v9, v12, v13) & 1) == 0)return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1496))(a1, a2);
  }
  return 1;
}

uint64_t sub_1C4848F80(_QWORD **a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = 0;
  if (a2)
  {
    v4 = *(unsigned __int8 *)(a2 + 16);
    if (v4 >= 0x1C)
    {
      v5 = *(_DWORD *)(*(_QWORD *)a2 + 8);
      if ((v5 & 0xFE) == 0x12)
        v5 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
      if (v5 != 269)
        return 0;
      if (v4 == 85)
      {
        v8 = 0;
        v9 = *(unsigned __int8 **)(a2 - 32);
        if (!v9 || v9[16] > 0x14u)
          return v8 & v5;
        v10 = *(_QWORD *)(a2 - 96);
        v11 = *(_QWORD *)(a2 - 64);
        if (llvm::Constant::isNullValue((llvm::Constant *)v9))
        {
          if (v10 && (**a1 = v10, v11))
          {
            *a1[1] = v11;
            v8 = 1;
            v5 = 1;
          }
          else
          {
            v5 = 0;
            v8 = 1;
          }
          return v8 & v5;
        }
      }
      else if (v4 == 56)
      {
        v6 = *(_DWORD *)(a2 + 20);
        if ((v6 & 0x40000000) != 0)
          v7 = *(uint64_t **)(a2 - 8);
        else
          v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF));
        v12 = *v7;
        if (*v7)
        {
          v13 = v7[4];
          **a1 = v12;
          if (v13)
          {
            *a1[1] = v13;
            return 1;
          }
        }
        return 0;
      }
      v8 = 0;
      return v8 & v5;
    }
  }
  return result;
}

uint64_t sub_1C4849098(_QWORD **a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = 0;
  if (a2)
  {
    v4 = *(unsigned __int8 *)(a2 + 16);
    if (v4 >= 0x1C)
    {
      v5 = *(_DWORD *)(*(_QWORD *)a2 + 8);
      if ((v5 & 0xFE) == 0x12)
        v5 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
      if (v5 != 269)
        return 0;
      if (v4 == 85)
      {
        v8 = 0;
        v9 = *(unsigned __int8 **)(a2 - 64);
        if (!v9 || v9[16] > 0x14u)
          return v8 & v5;
        v10 = *(_QWORD *)(a2 - 96);
        v11 = *(_QWORD *)(a2 - 32);
        if (llvm::Constant::isOneValue((llvm::Constant *)v9))
        {
          if (v10 && (**a1 = v10, v11))
          {
            *a1[1] = v11;
            v8 = 1;
            v5 = 1;
          }
          else
          {
            v5 = 0;
            v8 = 1;
          }
          return v8 & v5;
        }
      }
      else if (v4 == 57)
      {
        v6 = *(_DWORD *)(a2 + 20);
        if ((v6 & 0x40000000) != 0)
          v7 = *(uint64_t **)(a2 - 8);
        else
          v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF));
        v12 = *v7;
        if (*v7)
        {
          v13 = v7[4];
          **a1 = v12;
          if (v13)
          {
            *a1[1] = v13;
            return 1;
          }
        }
        return 0;
      }
      v8 = 0;
      return v8 & v5;
    }
  }
  return result;
}

BOOL sub_1C48491B0(uint64_t a1, unsigned __int8 *a2)
{
  _BOOL8 result;
  unsigned int v3;
  int v4;
  unsigned __int8 *v5;

  result = 0;
  if (a2)
  {
    v3 = a2[16];
    if (v3 >= 0x1C)
    {
      v4 = *(_DWORD *)(*(_QWORD *)a2 + 8);
      if ((v4 & 0xFE) == 0x12)
        v4 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
      result = 0;
      if (v4 == 269)
      {
        if (v3 == 57)
          return 1;
        if (v3 == 85)
        {
          v5 = (unsigned __int8 *)*((_QWORD *)a2 - 8);
          if (v5)
          {
            if (v5[16] <= 0x14u && llvm::Constant::isOneValue((llvm::Constant *)v5))
              return 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_1C4849234(uint64_t a1, _DWORD **a2, _DWORD **a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  char v8;

  v3 = *a2[1];
  v4 = *a3[1];
  if (v3 < v4)
    return 1;
  if (v4 < v3)
    return 0;
  v5 = *a2[2];
  v6 = *a3[2];
  if (v5 < v6)
    return 1;
  return v6 >= v5 && sub_1C48492A4((uint64_t)&v8, a2, a3);
}

BOOL sub_1C48492A4(uint64_t a1, _DWORD **a2, _DWORD **a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *a2[3];
  v4 = *a3[3];
  if (v3 < v4)
    return 1;
  if (v4 < v3)
    return 0;
  v5 = *a2[4];
  v6 = *a3[4];
  if (v5 < v6)
    return 1;
  if (v6 < v5)
    return 0;
  v7 = *a2[5];
  v8 = *a3[5];
  if (v7 < v8)
    return 1;
  return v8 >= v7 && *a2[6] < *a3[6];
}

BOOL sub_1C4849330(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  const char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;

  sub_1C4768AD0(*a1, a2);
  v6 = v4 + 7;
  if ((_DWORD)v5 == 1)
  {
    v9 = v4 + 7;
    v6 = v9;
  }
  v7 = v6 >> 3;
  return 1 << a3 >= (unint64_t)v7 && (_DWORD)v7 && (v7 & ((_DWORD)v7 - 1)) == 0;
}

unint64_t sub_1C48493AC(uint64_t a1)
{
  unint64_t v2;
  int v4;
  void *__p[2];
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 544) != 1 || (*(_DWORD *)(a1 + 548) - 3) < 2)
    return 0;
  if (*(char *)(a1 + 471) < 0)
  {
    sub_1C47EBC30(__p, *(void **)(a1 + 448), *(_QWORD *)(a1 + 456));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 448);
    v6 = *(_QWORD *)(a1 + 464);
  }
  v7 = *(_OWORD *)(a1 + 472);
  v8 = *(_QWORD *)(a1 + 488);
  v4 = v7;
  if (sub_1C5E4EA90(v7) == 64)
  {
    if (v4 == 3)
    {
      if (HIDWORD(v7) <= 0x21)
        v2 = (0xFFFF777uLL >> SBYTE12(v7)) & 1;
      else
        v2 = 1;
    }
    else
    {
      v2 = 1;
    }
  }
  else
  {
    v2 = 0;
  }
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return v2;
}

BOOL sub_1C4849494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = sub_1C47A7FD0(a2, a1, a3, 0);
  return v4 && *(_QWORD *)(a2 + 8 * v4 + 96) && (*(_BYTE *)(a2 + 390 * v4 + 4086) & 0xFB) == 0;
}

unint64_t sub_1C48494F4(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, unint64_t a6, unsigned __int8 a7, unsigned int a8, int a9, char a10, char a11)
{
  llvm::Type *v15;
  llvm::Type *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int8x8_t *v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  int8x8_t *v37;
  int8x8_t v38;
  uint8x8_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  llvm::FixedVectorType *v60;
  llvm::APIntOps *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned __int8 v77;
  void *v78;
  uint64_t v79;
  _BYTE v80[48];
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v15 = (llvm::Type *)*(unsigned int *)(a3 + 32);
  v17 = (llvm::Type *)(v15 / a4);
  llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(a3 + 24), v17);
  v64 = v18;
  if ((a10 & 1) != 0 || a11)
  {
    v19 = sub_1C6137F68(a1, a2, a3, a7, 1, 0, a9);
    goto LABEL_6;
  }
  if (!a9)
  {
    v19 = sub_1C4832C7C(a1, a2, a3, a7 | 0x100, a8, 0);
LABEL_6:
    v68 = v19;
    v21 = v20;
    goto LABEL_8;
  }
  v21 = 0;
  v68 = 1;
LABEL_8:
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)a3, (uint64_t)&v78);
  v77 = v80[0];
  sub_1C4768AD0(*(_QWORD *)(a1 + 8), a3);
  v24 = v23;
  if ((_DWORD)v22 == 1)
  v26 = sub_1C47A8C74(&v77);
  if ((_DWORD)v25 == 1)
  {
    if (v21)
      goto LABEL_28;
  }
  else if (v21)
  {
    goto LABEL_28;
  }
  v27 = (unint64_t)(v26 + 7) >> 3;
  if (((unint64_t)(v24 + 7) >> 3) > v27)
  {
    v28 = (((unint64_t)(v24 + 7) >> 3) + (unint64_t)v27 - 1)
        / ((unint64_t)(v26 + 7) >> 3);
    v29 = v28 - 1;
    v78 = v80;
    v79 = 0x600000000;
    sub_1C4765AA4((char *)&v78, (v28 + 63) >> 6, 0);
    v81 = v28;
    v30 = (int8x8_t *)v78;
    if (a6)
    {
      if (v17 <= 1)
        v31 = 1;
      else
        v31 = (int)v17;
      v32 = a5;
      do
      {
        if (v15 >= a4)
        {
          v33 = *v32;
          v34 = v31;
          do
          {
            *(_QWORD *)&v30[(v33 / (((unint64_t)v15 + v29) / v28)) >> 6] |= 1 << (v33 / (((unint64_t)v15 + v29) / v28));
            v33 += a4;
            --v34;
          }
          while (v34);
        }
        ++v32;
      }
      while (v32 != &a5[a6]);
    }
    if ((_DWORD)v79)
    {
      v35 = 0;
      v36 = 8 * v79;
      v37 = v30;
      do
      {
        v38 = *v37++;
        v39 = (uint8x8_t)vcnt_s8(v38);
        v39.i16[0] = vaddlv_u8(v39);
        v35 += v39.i32[0];
        v36 -= 8;
      }
      while (v36);
    }
    else
    {
      v35 = 0;
    }
    v68 = (v29 + v68 * v35) / v28;
    if (v30 != (int8x8_t *)v80)
      free(v30);
  }
LABEL_28:
  v76 = v17;
  if (v17 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v75, -1, 1);
    v40 = a6;
  }
  else
  {
    v40 = a6;
    if (v15 < a4)
      v41 = 0;
    else
      v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
    v75 = v41;
  }
  v74 = v15;
  if (v15 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v73, -1, 1);
    v72 = v15;
    llvm::APInt::initSlowCase((llvm::APInt *)&v71, 0, 0);
    v43 = v64;
    if (!v40)
      goto LABEL_46;
  }
  else
  {
    if ((_DWORD)v15)
      v42 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
    else
      v42 = 0;
    v43 = v64;
    v73 = v42;
    v72 = v15;
    v71 = 0;
    if (!v40)
      goto LABEL_46;
  }
  v44 = &a5[v40];
  if (v17 <= 1)
    v45 = 1;
  else
    v45 = (int)v17;
  do
  {
    if (v15 >= a4)
    {
      v46 = *a5;
      v47 = v72;
      v48 = v45;
      do
      {
        v49 = 1 << v46;
        if (v47 > 0x40)
          *(_QWORD *)(v71 + 8 * (v46 >> 6)) |= v49;
        else
          v71 |= v49;
        v46 += a4;
        --v48;
      }
      while (v48);
    }
    ++a5;
  }
  while (a5 != v44);
LABEL_46:
  if (a2 == 32)
  {
    v69 = sub_1C6133EB0(a1, v43, (uint64_t)&v75, 1, 0);
    v70 = v50;
    v78 = (void *)v40;
    LODWORD(v79) = 0;
    sub_1C4848B64((uint64_t)&v78, (uint64_t)&v69);
    if (__OFADD__(v68, v78))
      v51 = (char *)(((uint64_t)((uint64_t)v78 + v68) >> 63) ^ 0x8000000000000000);
    else
      v51 = (char *)v78 + v68;
    v52 = a1;
    v53 = a3;
    v54 = 0;
    v55 = 1;
  }
  else
  {
    v69 = v40;
    LODWORD(v70) = 0;
    v78 = (void *)sub_1C6133EB0(a1, v43, (uint64_t)&v75, 0, 1);
    v79 = v56;
    sub_1C4848B64((uint64_t)&v78, (uint64_t)&v69);
    if (__OFADD__(v68, v78))
      v51 = (char *)(((uint64_t)((uint64_t)v78 + v68) >> 63) ^ 0x8000000000000000);
    else
      v51 = (char *)v78 + v68;
    v52 = a1;
    v53 = a3;
    v54 = 1;
    v55 = 0;
  }
  v57 = sub_1C6133EB0(v52, v53, (uint64_t)&v71, v54, v55);
  if (__OFADD__(v51, v57))
    v58 = ((uint64_t)&v51[v57] >> 63) ^ 0x8000000000000000;
  else
    v58 = (unint64_t)&v51[v57];
  if (a10)
  {
    v60 = (llvm::FixedVectorType *)(**(_QWORD **)a3 + 1912);
    v61 = a11 ? (llvm::APIntOps *)&v71 : (llvm::APIntOps *)&v73;
    v62 = sub_1C6137AE8(a1, v60, a4, v17, v61);
    if (__OFADD__(v58, v62))
      v58 = ((uint64_t)(v58 + v62) >> 63) ^ 0x8000000000000000;
    else
      v58 += v62;
    if (a11)
    {
      llvm::FixedVectorType::get(v60, v15);
      sub_1C4845E1C(a1, 28);
      if (__OFADD__(v58, v63))
        v58 = ((uint64_t)(v58 + v63) >> 63) ^ 0x8000000000000000;
      else
        v58 += v63;
    }
  }
  if (v72 >= 0x41 && v71)
    MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
  if (v74 >= 0x41 && v73)
    MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
  if (v76 >= 0x41 && v75)
    MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
  return v58;
}

BOOL sub_1C4849AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int i;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  unsigned int v21;
  int j;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned __int8 v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  int k;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned __int8 v42;
  unint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  BOOL v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;

  v3 = *(_QWORD *)(a2 + 112);
  v4 = &unk_1ED7EA000;
  if (!v3)
    goto LABEL_11;
  if (*(_DWORD *)(v3 + 8))
  {
    v3 = *(_QWORD *)(v3 + 40);
    if (!v3)
      goto LABEL_11;
    v5 = *(_DWORD *)(v3 + 40);
    if (v5)
    {
      v6 = *(_QWORD *)(v3 + 24);
      v7 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v7 & 1) == 0)
      {
        v74 = a3;
        v55 = a2;
        v67 = v6;
        v70 = v5;
        v56 = __cxa_guard_acquire(&qword_1ED7EAC88);
        v5 = v70;
        v6 = v67;
        v4 = &unk_1ED7EA000;
        a2 = v55;
        a3 = v74;
        if (v56)
        {
          v57 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v57 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v57;
          __cxa_guard_release(&qword_1ED7EAC88);
          v5 = v70;
          v6 = v67;
          v4 = (_QWORD *)&unk_1ED7EA000;
          a2 = v55;
          a3 = v74;
        }
      }
      v8 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v4[400] ^ 0xBC30287DAC2F782DLL)) ^ ((0x9DDFEA08EB382D69
                                                                        * (v4[400] ^ 0xBC30287DAC2F782DLL)) >> 47) ^ 0xDF1D5C18CB5D1959);
      v9 = (-348639895 * ((v8 >> 47) ^ v8)) ^ 0x74656772;
      v10 = v5 - 1;
      for (i = 1; ; ++i)
      {
        v12 = v9 & v10;
        v13 = (uint64_t *)(v6 + 24 * v12);
        v14 = *v13;
        if (*v13 == -1)
        {
          if ("target-cpu" == (char *)-1)
            goto LABEL_50;
        }
        else if (v14 == -2)
        {
          if ("target-cpu" == (char *)-2)
            goto LABEL_50;
        }
        else if (v13[1] == 10 && *(_QWORD *)v14 == 0x632D746567726174 && *(_WORD *)(v14 + 8) == 30064)
        {
LABEL_50:
          v3 = v13[2];
          goto LABEL_11;
        }
        if (v14 == -1)
          break;
        v9 = i + v12;
      }
    }
  }
  v3 = 0;
LABEL_11:
  v15 = *(_QWORD *)(a3 + 112);
  if (!v15 || !*(_DWORD *)(v15 + 8) || (v16 = *(_QWORD *)(v15 + 40)) == 0 || (v17 = *(_DWORD *)(v16 + 40)) == 0)
  {
LABEL_20:
    v26 = 0;
    goto LABEL_21;
  }
  v18 = *(_QWORD *)(v16 + 24);
  v19 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v19 & 1) == 0)
  {
    v75 = a3;
    v58 = a2;
    v66 = v3;
    v68 = v18;
    v71 = v17;
    v59 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v17 = v71;
    v3 = v66;
    v18 = v68;
    v4 = &unk_1ED7EA000;
    a2 = v58;
    a3 = v75;
    if (v59)
    {
      v60 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v60 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v60;
      __cxa_guard_release(&qword_1ED7EAC88);
      v17 = v71;
      v3 = v66;
      v18 = v68;
      v4 = (_QWORD *)&unk_1ED7EA000;
      a2 = v58;
      a3 = v75;
    }
  }
  v20 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v4[400] ^ 0xBC30287DAC2F782DLL)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v4[400] ^ 0xBC30287DAC2F782DLL)) >> 47) ^ 0xDF1D5C18CB5D1959);
  v21 = (-348639895 * ((v20 >> 47) ^ v20)) ^ 0x74656772;
  for (j = 1; ; ++j)
  {
    v23 = v21 & (v17 - 1);
    v24 = (uint64_t *)(v18 + 24 * v23);
    v25 = *v24;
    if (*v24 == -1)
    {
      if ("target-cpu" == (char *)-1)
        goto LABEL_58;
      goto LABEL_19;
    }
    if (v25 != -2)
      break;
    if ("target-cpu" == (char *)-2)
      goto LABEL_58;
LABEL_19:
    if (v25 == -1)
      goto LABEL_20;
    v21 = j + v23;
  }
  if (v24[1] != 10)
    goto LABEL_19;
  if (*(_QWORD *)v25 != 0x632D746567726174 || *(_WORD *)(v25 + 8) != 30064)
    goto LABEL_19;
LABEL_58:
  v26 = v24[2];
LABEL_21:
  if (v26 != v3)
    return 0;
  v27 = *(_QWORD *)(a2 + 112);
  if (v27)
  {
    if (!*(_DWORD *)(v27 + 8))
      goto LABEL_31;
    v27 = *(_QWORD *)(v27 + 40);
    if (v27)
    {
      v28 = *(_DWORD *)(v27 + 40);
      if (v28)
      {
        v29 = *(_QWORD *)(v27 + 24);
        v30 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v30 & 1) == 0)
        {
          v61 = a3;
          v72 = v29;
          v76 = v28;
          v62 = __cxa_guard_acquire(&qword_1ED7EAC88);
          v28 = v76;
          v29 = v72;
          v4 = &unk_1ED7EA000;
          a3 = v61;
          if (v62)
          {
            v63 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v63 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v63;
            __cxa_guard_release(&qword_1ED7EAC88);
            v28 = v76;
            v29 = v72;
            v4 = (_QWORD *)&unk_1ED7EA000;
            a3 = v61;
          }
        }
        v31 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v4[400] ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                           * (v4[400] ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
        v32 = (-348639895 * ((v31 >> 47) ^ v31)) ^ 0x74616566;
        v33 = v28 - 1;
        for (k = 1; ; ++k)
        {
          v35 = v32 & v33;
          v36 = v29 + 24 * v35;
          v37 = *(_QWORD **)v36;
          if (*(_QWORD *)v36 == -1)
          {
            if ("target-features" == (char *)-1)
              goto LABEL_66;
          }
          else if (v37 == (_QWORD *)-2)
          {
            if ("target-features" == (char *)-2)
              goto LABEL_66;
          }
          else if (*(_QWORD *)(v36 + 8) == 15
                 && *v37 == 0x662D746567726174
                 && *(_QWORD *)((char *)v37 + 7) == 0x7365727574616566)
          {
LABEL_66:
            v27 = *(_QWORD *)(v36 + 16);
            goto LABEL_32;
          }
          if (v37 == (_QWORD *)-1)
            break;
          v32 = k + v35;
        }
      }
LABEL_31:
      v27 = 0;
    }
  }
LABEL_32:
  v38 = *(_QWORD *)(a3 + 112);
  if (!v38 || !*(_DWORD *)(v38 + 8) || (v39 = *(_QWORD *)(v38 + 40)) == 0 || (v40 = *(_DWORD *)(v39 + 40)) == 0)
  {
LABEL_41:
    v49 = 0;
    return v27 == v49;
  }
  v41 = *(_QWORD *)(v39 + 24);
  v42 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v42 & 1) == 0)
  {
    v69 = v27;
    v73 = v41;
    v77 = v40;
    v64 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v40 = v77;
    v27 = v69;
    v41 = v73;
    v4 = &unk_1ED7EA000;
    if (v64)
    {
      v65 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v65 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v65;
      __cxa_guard_release(&qword_1ED7EAC88);
      v40 = v77;
      v27 = v69;
      v41 = v73;
      v4 = (_QWORD *)&unk_1ED7EA000;
    }
  }
  v43 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v4[400] ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v4[400] ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
  v44 = (-348639895 * ((v43 >> 47) ^ v43)) ^ 0x74616566;
  v45 = 1;
  while (2)
  {
    v46 = v44 & (v40 - 1);
    v47 = v41 + 24 * v46;
    v48 = *(_QWORD **)v47;
    if (*(_QWORD *)v47 == -1)
    {
      if ("target-features" == (char *)-1)
        break;
      goto LABEL_40;
    }
    if (v48 == (_QWORD *)-2)
    {
      if ("target-features" == (char *)-2)
        break;
      goto LABEL_40;
    }
    if (*(_QWORD *)(v47 + 8) != 15
      || (*v48 == 0x662D746567726174 ? (v54 = *(_QWORD *)((char *)v48 + 7) == 0x7365727574616566) : (v54 = 0), !v54))
    {
LABEL_40:
      if (v48 == (_QWORD *)-1)
        goto LABEL_41;
      v44 = v45 + v46;
      ++v45;
      continue;
    }
    break;
  }
  v49 = *(_QWORD *)(v47 + 16);
  return v27 == v49;
}

uint64_t sub_1C484A384(uint64_t *a1, llvm::ShuffleVectorInst *this)
{
  int v4;
  unint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)this - 1);
    v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (uint64_t *)((char *)this - 32 * v5);
  }
  v25 = v27;
  v26 = 0x400000000;
  if (v5 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v5, 8);
    v7 = v26;
    v9 = v25;
    v8 = v26;
  }
  else
  {
    v7 = 0;
    if (!v5)
    {
      v13 = v27;
      goto LABEL_11;
    }
    v8 = 0;
    v9 = v27;
  }
  v10 = 32 * v5;
  v11 = &v9[v8];
  do
  {
    v12 = *v6;
    v6 += 4;
    *v11++ = v12;
    v10 -= 32;
  }
  while (v10);
  v13 = v25;
LABEL_11:
  LODWORD(v26) = v7 + v5;
  v14 = sub_1C48446A4(a1, this, (uint64_t)v13, (v7 + v5), 1);
  v16 = v14 < 0;
  if (v15)
    v16 = v15 < 0;
  if (!v16)
  {
    v17 = v15 < 1;
    if (!v15)
      v17 = v14 < 1;
    if (v17)
    {
      v18 = 0;
      goto LABEL_35;
    }
  }
  v19 = *((unsigned __int8 *)this + 16);
  if (v19 == 60)
  {
    v18 = 4;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)this;
  if (v19 == 84)
  {
    v21 = *((_QWORD *)this - 4);
    if (!v21
      || *(_BYTE *)(v21 + 16)
      || *(_QWORD *)(v21 + 24) != *((_QWORD *)this + 9)
      || (sub_1C4845148((uint64_t)a1, (uint64_t ***)v21) & 1) != 0)
    {
      v18 = 40;
      goto LABEL_35;
    }
    if (*(_BYTE *)(v20 + 8) == 16 && v20)
      v20 = **(_QWORD **)(v20 + 16);
  }
  v22 = *(_DWORD *)(v20 + 8);
  v23 = v22;
  if (v20 && (v22 & 0xFE) == 0x12)
    v23 = *(unsigned __int8 *)(*(_QWORD *)(v20 + 24) + 8);
  if (v23 >= 7)
    v18 = 1;
  else
    v18 = 3;
LABEL_35:
  if (v25 != v27)
    free(v25);
  return v18;
}

void sub_1C484A584()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C484A598(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7F9E890;
  result[1] = v3;
  return result;
}

uint64_t sub_1C484A5CC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7F9E890;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C484A5E8(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 314);
}

uint64_t sub_1C484A5F4()
{
  char v1;
  _BYTE *v2;
  __int128 v3;

  *(_QWORD *)&v3 = "FMA contraction at IR level";
  *((_QWORD *)&v3 + 1) = 27;
  v1 = 0;
  v2 = &v1;
  sub_1C6136B80((uint64_t)&unk_1ED7EB040, "disable-agx1-fma-contraction", &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EB040, &dword_1C475E000);
  *(_QWORD *)&v3 = "Disable combining instructions in to wider tuples";
  *((_QWORD *)&v3 + 1) = 49;
  sub_1C6136DA0((llvm::cl::Option *)&unk_1ED7EB100, "disable-agx1-combining", &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EB100, &dword_1C475E000);
  *(_QWORD *)&v3 = "Enables balanced scheduler for AGX1.";
  *((_QWORD *)&v3 + 1) = 36;
  sub_1C6136DA0((llvm::cl::Option *)&unk_1ED7EB1C0, "enable-balanced-sched", &v3);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EB1C0, &dword_1C475E000);
}

void sub_1C484A6E8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t i;
  uint64_t v6;
  void **v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = &off_1E7F9E940;
  v2 = *(void **)(a1 + 1344);
  if (v2 != (void *)(a1 + 1360))
    free(v2);
  free(*(void **)(a1 + 1320));
  v3 = *(void **)(a1 + 1144);
  if (v3 != (void *)(a1 + 1160))
    free(v3);
  free(*(void **)(a1 + 1120));
  v4 = *(void **)(a1 + 944);
  if (v4 != (void *)(a1 + 960))
    free(v4);
  for (i = 936; i != 552; i -= 24)
  {
    v6 = *(_QWORD *)(a1 + i);
    if ((v6 & 4) != 0)
    {
      v7 = (void **)(v6 & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if (*v7 != v7 + 2)
          free(*v7);
        MEMORY[0x1CAA32FC0](v7, 0x1080C40ED926357);
      }
    }
  }
  *(_QWORD *)a1 = &unk_1E7F9EA00;
  v8 = *(void **)(a1 + 456);
  if (v8 != (void *)(a1 + 472))
    free(v8);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 192))
    free(v9);
  v10 = *(void **)(a1 + 104);
  if (v10 != (void *)(a1 + 120))
    free(v10);
  v11 = *(void **)(a1 + 32);
  if (v11 != (void *)(a1 + 48))
    free(v11);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C484A838(uint64_t a1)
{
  sub_1C484A6E8(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C484A85C()
{
  return "AGX1 TOC optimizer pass";
}

uint64_t sub_1C484A86C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  char v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  int v17;
  char *v18;
  char *v19;
  int v20;
  _QWORD *v21;
  char *v22;
  void **v23;
  int v24;
  int v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _BYTE *v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int16 *v37;
  int v38;
  BOOL v40;
  unint64_t v41;
  unint64_t i;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  _WORD *v53;
  unsigned __int16 *v54;
  __int16 v55;
  unsigned __int16 v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  __int16 v61;
  _WORD *v62;
  unsigned __int16 *v63;
  __int16 v64;
  unsigned __int16 v65;
  _BOOL4 v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  BOOL v71;
  _BOOL4 v72;
  int v73;
  BOOL v74;
  _DWORD *v75;
  uint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unint64_t v82;
  _WORD *v83;
  unsigned __int16 *v84;
  __int16 v85;
  unsigned int v86;
  _BOOL4 v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  uint64_t *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  unsigned int *v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  BOOL v105;
  int v106;
  int v107;
  int v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int v120;
  unint64_t v121;
  __int16 v122;
  _WORD *v123;
  unsigned __int16 *v124;
  __int16 v125;
  unsigned __int16 v126;
  _BOOL4 v127;
  unsigned int v128;
  int v129;
  BOOL v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unsigned int j;
  int v139;
  unsigned int v140;
  uint64_t *v141;
  unsigned int v142;
  unsigned int *v143;
  _BOOL4 v145;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  _QWORD *v151;
  _QWORD *v152;
  char *v153;
  _QWORD *v154;
  int v155;
  _QWORD *v156;
  unsigned int v157;
  _DWORD *v158;
  void **v159;
  uint64_t v160;
  signed int v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned __int16 v170;
  int v171;
  int v172;
  signed int v173;
  uint64_t *v174;
  int v175;
  unsigned int v176;
  signed int v177;
  char v178;
  void *v179[2];
  _DWORD v180[14];
  void *v181[2];
  _DWORD v182[14];
  char *v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  _BYTE v188[48];
  int v189;
  void *v190[2];
  _BYTE v191[48];
  int v192;
  uint64_t v193;

  v193 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 40);
  v149 = a2;
  v4 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8), *(_QWORD *)a2);
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 44) + 0x2000;
  *(_DWORD *)(a1 + 1152) = 0;
  *(_QWORD *)(a1 + 1336) = 0xFFFFFFFFLL;
  v174 = (uint64_t *)(a1 + 1144);
  sub_1C484B8A8((void *)(a1 + 1144), v5);
  *(_DWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 1136) = 0xFFFFFFFFLL;
  v160 = a1 + 944;
  sub_1C484B8A8((void *)(a1 + 944), v5);
  v162 = a1;
  *(_DWORD *)(a1 + 552) = 0;
  if (*(_BYTE *)(v4 + 301))
  {
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 44);
    v7 = *(_DWORD *)(a1 + 1408) & 0x3F;
    v8 = *(unsigned int *)(a1 + 1352);
    if ((*(_DWORD *)(v162 + 1408) & 0x3F) != 0)
    {
      v148 = *(_QWORD *)(v162 + 1344) + 8 * v8;
      *(_QWORD *)(v148 - 8) &= ~(-1 << v7);
    }
    v9 = v8;
    v10 = (_QWORD *)(v162 + 1344);
    *(_DWORD *)(v162 + 1408) = v6;
    if ((_DWORD)v8 != (v6 + 63) >> 6)
    {
      v11 = (v6 + 63) >> 6;
      if (v8 > v11)
      {
        *(_DWORD *)(v162 + 1352) = v11;
        v9 = (v6 + 63) >> 6;
      }
      else
      {
        v12 = v8;
        if (v11 > *(_DWORD *)(v162 + 1356))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v162 + 1344, v162 + 1360, v11, 8);
          v12 = *(unsigned int *)(v162 + 1352);
          v9 = *(_DWORD *)(v162 + 1352);
        }
        if (v11 != v8)
          bzero((void *)(*v10 + 8 * v12), 8 * (v11 - v8));
        v9 += v11 - v8;
        *(_DWORD *)(v162 + 1352) = v9;
        v6 = *(_DWORD *)(v162 + 1408);
      }
    }
    v13 = v6 & 0x3F;
    if (v13)
      *(_QWORD *)(*v10 + 8 * v9 - 8) &= ~(-1 << v13);
  }
  v183 = (char *)&v185;
  v184 = 0xA00000000;
  v14 = v162;
  v15 = *(_DWORD *)(*(_QWORD *)(v162 + 248) + 44);
  v181[0] = v182;
  v181[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v181, (v15 + 63) >> 6, 0);
  v182[12] = v15;
  llvm::AGXTOCOptimizer::collectImplicitDefs(v14, v149, (uint64_t *)v181, *(_QWORD *)(v14 + 248), (uint64_t *)&off_1E7F98538);
  llvm::AGXTOCOptimizer::collectOptimizableBlocks(v14, v149, (uint64_t)&v183, (uint64_t)v181, *(_QWORD *)(v14 + 248), *(_QWORD *)(v14 + 544));
  v16 = (_QWORD *)(v149 + 320);
  v151 = *(_QWORD **)(v149 + 320);
  v152 = *(_QWORD **)(v149 + 328);
  v17 = *(_DWORD *)(*(_QWORD *)(v162 + 248) + 44);
  v179[0] = v180;
  v179[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v179, (v17 + 63) >> 6, 0);
  v180[12] = v17;
  v18 = v183;
  v19 = &v183[80 * v184];
  v175 = 0;
  v20 = *(unsigned __int8 *)(v4 + 285);
  v21 = *(_QWORD **)(v149 + 328);
  if (!v20)
    goto LABEL_229;
  if (v21 != v16)
  {
    v161 = 0;
    v150 = &v183[80 * v184];
    while (1)
    {
      v22 = v19;
      if (v18 != v19)
      {
        while (*(_QWORD **)v18 != v21)
        {
          v18 += 80;
          if (v18 == v19)
          {
            v22 = v19;
            goto LABEL_21;
          }
        }
        v22 = v18;
      }
LABEL_21:
      v23 = (void **)(v22 + 8);
      v153 = v22;
      if (v22 == v19)
        v23 = v179;
      v159 = v23;
      v24 = *(_DWORD *)(*(_QWORD *)(v14 + 248) + 44);
      v25 = v24 + 0x2000;
      v190[0] = v191;
      v190[1] = (void *)0x600000000;
      sub_1C4765AA4((char *)v190, (v24 + 8255) >> 6, 0);
      v192 = v25;
      v186 = v188;
      v187 = 0x600000000;
      v189 = 0;
      v154 = v21;
      if (((*(unsigned __int16 *)(*(_QWORD *)v21[4] + 18) >> 4) & 0x3FFu) - 103 <= 1)
      {
        v25 = *(_DWORD *)(*(_QWORD *)(v14 + 248) + 44);
        v189 = v25;
        v29 = v25 + 63;
        if ((v25 + 63) < 0x40)
        {
          v34 = 0;
          v33 = v188;
        }
        else
        {
          v30 = v29 >> 6;
          if (v29 >= 0x1C0)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v186, (uint64_t)v188, v29 >> 6, 8);
            v33 = v186;
            v31 = v187;
            v25 = v189;
            v32 = v187;
          }
          else
          {
            v31 = 0;
            v32 = 0;
            v33 = v188;
          }
          bzero(&v33[8 * v31], 8 * v30);
          v34 = v32 + v30;
          LODWORD(v187) = v32 + v30;
        }
        if ((v25 & 0x3F) != 0)
          *(_QWORD *)&v33[8 * v34 - 8] &= ~(-1 << (v25 & 0x3F));
        sub_1C484D414(v14, (uint64_t *)&v186, *(unsigned __int16 **)(*(_QWORD *)(v21[4] + 328) + 152), *(unsigned __int16 **)(*(_QWORD *)(v21[4] + 328) + 160), 1);
      }
      v35 = v21 + 6;
      v36 = v21[7];
      v173 = v161;
      if ((_QWORD *)v36 != v21 + 6)
      {
        v173 = v161;
        v156 = v21 + 6;
        do
        {
          v37 = *(unsigned __int16 **)(v36 + 16);
          v38 = *v37;
          LODWORD(v26) = 1541;
          v40 = (v38 - 9) <= 0x3C && ((1 << (v38 - 9)) & 0x1000000000000605) != 0
             || v38 == 0;
          if (!v40 && (v37[4] & 0x10) == 0)
          {
            v169 = v28;
            v41 = *((unsigned __int8 *)v37 + 4);
            for (i = *(unsigned int *)(v36 + 40); v41 < i; ++v41)
            {
              v43 = *(_QWORD *)(v36 + 32);
              v44 = v43 + 32 * v41;
              if (sub_1C484D4CC((unsigned int *)v44))
              {
                v45 = i;
                v46 = *(_QWORD *)(v14 + 248);
                if (*(_DWORD *)v44)
                  v47 = (*(_DWORD *)v44 >> 8) & 0xFFF;
                else
                  v47 = 0;
                if (v47 == 8)
                  v48 = 0x4000;
                else
                  v48 = (v47 << 12) & 0xFFE000;
                v49 = *(_DWORD *)(v46 + 16);
                LODWORD(v44) = (v48 | *(_DWORD *)(v44 + 4)) + v49;
                v50 = v168;
              }
              else
              {
                v58 = *(_DWORD *)v44;
                if ((*(_DWORD *)v44 & 0x20000FF) != 0)
                  continue;
                v44 = *(unsigned int *)(v43 + 32 * v41 + 4);
                if ((v44 | 2) == 2)
                  continue;
                if ((v58 & 0x1000000) != 0)
                  continue;
                v50 = v168;
                if ((v44 - 1) <= 0x306 && ((byte_1C6873A50[v44 >> 3] >> (v44 & 7)) & 1) != 0)
                  continue;
                v45 = i;
                v46 = *(_QWORD *)(v14 + 248);
                v49 = *(_DWORD *)(v46 + 16);
                if (v189)
                {
                  v59 = v44 - v49;
                  if (v44 >= v49)
                  {
                    LODWORD(v21) = 0;
                    v65 = 0;
                    v63 = 0;
                    v50 = (v59 >> 12) & 0xFFFFE;
                    v155 = v59 & 0x1FFF;
                  }
                  else
                  {
                    v60 = *(unsigned int *)(*(_QWORD *)(v46 + 8) + 24 * v44 + 16);
                    v61 = v60 & 0xF;
                    v62 = (_WORD *)(*(_QWORD *)(v46 + 56) + ((v60 >> 3) & 0x1FFFFFFE));
                    v64 = *v62;
                    v63 = v62 + 1;
                    v65 = v64 + v61 * v44;
                  }
                  v72 = v21 < v50 >> 1;
                  if (v44 < v49)
                    v72 = v63 != 0;
                  if (v72)
                  {
                    do
                    {
                      if (v44 >= v49)
                      {
                        if (((v186[((_DWORD)v21 + v155 + *(_DWORD *)(v46 + 44)) >> 6] >> (v21 + v155 + *(_BYTE *)(v46 + 44))) & 1) != 0)
                        {
LABEL_99:
                          v168 = v50;
LABEL_81:
                          i = v45;
                          goto LABEL_82;
                        }
                        LODWORD(v21) = (_DWORD)v21 + 1;
                      }
                      else
                      {
                        if (((v186[v65 >> 6] >> v65) & 1) != 0)
                          goto LABEL_99;
                        v73 = *v63++;
                        v65 += v73;
                        if (!v73)
                          v63 = 0;
                      }
                      v74 = v21 < v50 >> 1;
                      if (v44 < v49)
                        v74 = v63 != 0;
                    }
                    while (v74);
                  }
                }
              }
              v171 = (int)v21;
              v51 = v44 - v49;
              if (v44 >= v49)
              {
                LODWORD(v16) = 0;
                v56 = 0;
                v54 = 0;
                v57 = (v51 >> 12) & 0xFFFFE;
                v25 = v51 & 0x1FFF;
              }
              else
              {
                v52 = *(unsigned int *)(*(_QWORD *)(v46 + 8) + 24 * v44 + 16);
                v53 = (_WORD *)(*(_QWORD *)(v46 + 56) + ((v52 >> 3) & 0x1FFFFFFE));
                v55 = *v53;
                v54 = v53 + 1;
                v56 = v55 + (v52 & 0xF) * v44;
                v57 = v163;
              }
              v66 = v16 < v57 >> 1;
              if (v44 < v49)
                v66 = v54 != 0;
              v168 = v50;
              v163 = v57;
              if (!v66)
              {
                v14 = v162;
                LODWORD(v21) = v171;
                goto LABEL_81;
              }
              v67 = v57 >> 1;
              do
              {
                if (v44 >= v49)
                  v68 = (_DWORD)v16 + v25 + *(_DWORD *)(v46 + 44);
                else
                  v68 = v56;
                *((_QWORD *)v190[0] + (v68 >> 6)) |= 1 << v68;
                if (v44 >= v49)
                  v69 = (_DWORD)v16 + v25 + *(_DWORD *)(v46 + 44);
                else
                  v69 = v56;
                v176 = v69;
                v177 = v173;
                v178 = 0;
                sub_1C484D558((uint64_t)v174, &v176);
                if (v44 >= v49)
                {
                  LODWORD(v16) = (_DWORD)v16 + 1;
                }
                else
                {
                  v70 = *v54++;
                  v56 += v70;
                  if (!v70)
                    v54 = 0;
                }
                v71 = v16 < v67;
                if (v44 < v49)
                  v71 = v54 != 0;
              }
              while (v71);
              i = *(unsigned int *)(v36 + 40);
              v14 = v162;
              LODWORD(v21) = v171;
LABEL_82:
              ;
            }
            v165 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v14 + 256) + 768))(*(_QWORD *)(v14 + 256), v36);
            v75 = *(_DWORD **)(v36 + 32);
            v76 = *(_QWORD *)(v36 + 16);
            v77 = *(unsigned __int8 *)(v76 + 4);
            if ((*(_BYTE *)(v76 + 8) & 2) != 0)
            {
              v106 = *(_DWORD *)(v36 + 40);
              v28 = v169;
              if (v106 == v77)
              {
                v78 = v77;
              }
              else
              {
                v107 = v106 - 1;
                v78 = v77;
                do
                {
                  LODWORD(v26) = v75[8 * v77];
                  v27 = 0x1000000;
                  if ((v26 & 0x10000FF) != 0x1000000)
                    break;
                  v78 += (v26 & 0x2000000) == 0;
                  if (v107 == v77)
                    break;
                  ++v77;
                }
                while ((v26 & 0x2000000) == 0);
              }
            }
            else
            {
              v78 = *(unsigned __int8 *)(v76 + 4);
              v28 = v169;
            }
            if (v78)
            {
              v26 = &v75[8 * v78];
              v172 = (int)v21;
              v158 = v26;
              do
              {
                if ((*v75 & 0x20000FF) == 0)
                {
                  v79 = v75[1];
                  if ((v79 | 2) != 2
                    && (*v75 & 0x1000000) != 0
                    && ((v79 - 1) > 0x306 || ((byte_1C6873A50[v79 >> 3] >> (v79 & 7)) & 1) == 0))
                  {
                    v80 = *(_QWORD *)(v14 + 248);
                    v81 = *(_DWORD *)(v80 + 16);
                    if (v79 >= v81)
                    {
                      v28 = 0;
                      v170 = 0;
                      v84 = 0;
                      v86 = ((v79 - v81) >> 12) & 0xFFFFE;
                      v167 = (v79 - v81) & 0x1FFF;
                    }
                    else
                    {
                      v82 = *(unsigned int *)(*(_QWORD *)(v80 + 8) + 24 * v79 + 16);
                      v83 = (_WORD *)(*(_QWORD *)(v80 + 56) + ((v82 >> 3) & 0x1FFFFFFE));
                      v85 = *v83;
                      v84 = v83 + 1;
                      v170 = v85 + (v82 & 0xF) * v79;
                      v86 = v157;
                    }
                    v87 = v28 < v86 >> 1;
                    if (v81 > v79)
                      v87 = v84 != 0;
                    v157 = v86;
                    if (v87)
                    {
                      v166 = v80;
                      v164 = v86 >> 1;
                      do
                      {
                        v88 = v28;
                        if (v165)
                        {
                          if (v79 >= v81)
                            v89 = v28 + v167 + *(_DWORD *)(v166 + 44);
                          else
                            v89 = v170;
                          v176 = v89;
                          v177 = v173;
                          v178 = 0;
                          sub_1C484D558((uint64_t)v174, &v176);
                          LODWORD(v28) = v88;
                        }
                        if (v79 >= v81)
                          v90 = v28 + v167 + *(_DWORD *)(v166 + 44);
                        else
                          v90 = v170;
                        if (v174 != sub_1C484D700(v174, v90) || v91 != 0xFFFFFFFFLL)
                        {
                          v94 = sub_1C484D700(v174, v92);
                          v96 = *(_DWORD *)(*v94 + 20 * v95 + 12);
                          if (*(_DWORD *)(*v174 + 20 * v96 + 4) >= v161)
                          {
                            if (v79 >= v81)
                            {
                              v98 = v88;
                              v97 = v88 + v167 + *(_DWORD *)(v166 + 44);
                            }
                            else
                            {
                              v97 = v170;
                              v98 = v88;
                            }
                            if (((*((_QWORD *)*v159 + (v97 >> 6)) >> v97) & 1) != 0)
                            {
                              if (v79 >= v81)
                                v99 = v98 + v167 + *(_DWORD *)(v166 + 44);
                              else
                                v99 = v170;
                              *((_QWORD *)v190[0] + (v99 >> 6)) |= 1 << v99;
                              if (v79 >= v81)
                                v101 = v98 + v167 + *(_DWORD *)(v166 + 44);
                              else
                                v101 = v170;
                              v176 = v101;
                              v177 = v173;
                              v178 = 0;
                              sub_1C484D558((uint64_t)v174, &v176);
                              if (v79 >= v81)
                                v102 = v88 + v167 + *(_DWORD *)(v166 + 44);
                              else
                                v102 = v170;
                              v103 = *(_DWORD *)(*v174 + 20 * v96 + 4);
                              v176 = v102;
                              v177 = v103;
                              v178 = 1;
                              v100 = &v176;
                            }
                            else
                            {
                              v100 = (unsigned int *)(*v174 + 20 * v96);
                            }
                            sub_1C484D558(v160, v100);
                          }
                        }
                        if (v79 >= v81)
                        {
                          v28 = (v88 + 1);
                          LODWORD(v21) = v172;
                        }
                        else
                        {
                          v104 = *v84++;
                          LODWORD(v21) = v172;
                          v170 += v104;
                          if (!v104)
                            v84 = 0;
                          v28 = v88;
                        }
                        v105 = v28 < v164;
                        if (v79 < v81)
                          v105 = v84 != 0;
                      }
                      while (v105);
                    }
                    v14 = v162;
                    v26 = v158;
                  }
                }
                v75 += 8;
              }
              while (v75 != v26);
              ++v173;
              v35 = v156;
              if (!v36)
              {
LABEL_162:
                while ((*(_WORD *)(v36 + 44) & 8) != 0)
                  v36 = *(_QWORD *)(v36 + 8);
                goto LABEL_163;
              }
            }
            else
            {
              ++v173;
              v35 = v156;
            }
          }
          if ((*(_BYTE *)v36 & 4) == 0)
            goto LABEL_162;
LABEL_163:
          v36 = *(_QWORD *)(v36 + 8);
        }
        while ((_QWORD *)v36 != v35);
      }
      v108 = -1;
      v109 = v35;
      do
      {
        v109 = (_QWORD *)v109[1];
        ++v108;
      }
      while (v109 != v35);
      v16 = (_QWORD *)(v149 + 320);
      if (v108)
      {
        v110 = *v35 & 0xFFFFFFFFFFFFFFF8;
        if (!v110 || (*(_BYTE *)v110 & 4) == 0)
        {
          while ((*(_WORD *)(v110 + 44) & 4) != 0)
            v110 = *(_QWORD *)v110 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((*(_BYTE *)(*(_QWORD *)(v110 + 16) + 8) & 0x20) != 0)
          break;
      }
      if ((**(_BYTE **)(**(_QWORD **)(v14 + 544) + 360) & 4) != 0)
      {
        v111 = (uint64_t *)v154[11];
        v112 = (uint64_t *)v154[12];
        while (v111 != v112)
        {
          v113 = *v111++;
          sub_1C484D414(v14, (uint64_t *)v190, *(unsigned __int16 **)(v113 + 152), *(unsigned __int16 **)(v113 + 160), 0);
        }
        goto LABEL_207;
      }
LABEL_221:
      if (v186 != (_QWORD *)v188)
        free(v186);
      v19 = v150;
      if (v190[0] != v191)
        free(v190[0]);
      v21 = (_QWORD *)v154[1];
      v161 = v173;
      v18 = v153;
      if (v21 == (_QWORD *)(v149 + 320))
      {
        v18 = v183;
        v21 = *(_QWORD **)(v149 + 328);
LABEL_229:
        v175 = 0;
        while (v21 != v16)
        {
          while (1)
          {
            if (v18 == v19)
            {
              v145 = v21 != v152 && v21 != v151;
              goto LABEL_248;
            }
            if (*(_QWORD **)v18 == v21)
              break;
            v18 += 80;
          }
          v145 = v21 != v152 && v21 != v151;
          if (v18 != v19)
          {
            sub_1C484B92C(v14, *(_QWORD **)v18, (uint64_t *)v18 + 1, &v175, 1, v145);
            goto LABEL_249;
          }
LABEL_248:
          sub_1C484B92C(v14, v21, (uint64_t *)v179, &v175, 0, v145);
          v18 = v19;
LABEL_249:
          v21 = (_QWORD *)v21[1];
        }
        goto LABEL_250;
      }
    }
    v114 = *(unsigned int *)(v110 + 40);
    if ((_DWORD)v114)
    {
      v115 = *(_QWORD *)(v110 + 32);
      v116 = v115 + 32 * v114;
      v117 = v190[0];
      do
      {
        if (!*(_BYTE *)v115)
        {
          v118 = *(_DWORD *)(v115 + 4);
          if (v118 != 2)
          {
            v119 = *(_QWORD *)(v14 + 248);
            v120 = *(_DWORD *)(v119 + 16);
            if (v118 >= v120)
            {
              v124 = 0;
              v126 = 0;
              LODWORD(v26) = 0;
              LODWORD(v35) = ((v118 - v120) >> 12) & 0xFFFFE;
              v27 = (v118 - v120) & 0x1FFF;
            }
            else
            {
              v121 = *(unsigned int *)(*(_QWORD *)(v119 + 8) + 24 * v118 + 16);
              v122 = v121 & 0xF;
              v123 = (_WORD *)(*(_QWORD *)(v119 + 56) + ((v121 >> 3) & 0x1FFFFFFE));
              v125 = *v123;
              v124 = v123 + 1;
              v126 = v125 + v122 * v118;
            }
            v127 = v26 < v35 >> 1;
            if (v120 > v118)
              v127 = v124 != 0;
            if (v127)
            {
              do
              {
                if (v118 >= v120)
                  v128 = (_DWORD)v26 + v27 + *(_DWORD *)(v119 + 44);
                else
                  v128 = v126;
                v117[v128 >> 6] &= ~(1 << v128);
                if (v118 >= v120)
                {
                  LODWORD(v26) = (_DWORD)v26 + 1;
                }
                else
                {
                  v129 = *v124++;
                  v126 += v129;
                  if (!v129)
                    v124 = 0;
                }
                v130 = v26 < v35 >> 1;
                if (v118 < v120)
                  v130 = v124 != 0;
              }
              while (v130);
            }
          }
        }
        v115 += 32;
      }
      while (v115 != v116);
    }
LABEL_207:
    if (v192)
    {
      v131 = 0;
      v132 = (uint64_t *)v190[0];
      v133 = (v192 - 1) & 0xFFFFFFC0;
      while (1)
      {
        v135 = *v132++;
        v134 = v135;
        v136 = v133 == v131 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v192 : -1;
        v137 = v136 & v134;
        if (v137)
          break;
        v131 += 64;
        if (v133 + 64 == v131)
          goto LABEL_221;
      }
      for (j = __clz(__rbit64(v137)) + v131; (j & 0x80000000) == 0; j = sub_1C476BA0C(v190, j + 1, v192, 1u))
      {
        if (v174 != sub_1C484D700(v174, j) || v139 != 0xFFFFFFFFLL)
        {
          v141 = sub_1C484D700(v174, v140);
          v143 = (unsigned int *)(*v174 + 20 * *(unsigned int *)(*v141 + 20 * v142 + 12));
          if ((int)v143[1] >= v161)
            sub_1C484D558(v160, v143);
        }
      }
    }
    goto LABEL_221;
  }
LABEL_250:
  *(_DWORD *)(v14 + 1408) = 0;
  *(_DWORD *)(v14 + 1352) = 0;
  if (v179[0] != v180)
    free(v179[0]);
  if (v181[0] != v182)
    free(v181[0]);
  sub_1C4850180(&v183);
  return 0;
}

void *sub_1C484B8A8(void *result, unsigned int a2)
{
  unsigned int v2;
  _QWORD *v5;

  v2 = *((_DWORD *)result + 46);
  if (v2 < a2 || v2 >> 2 > a2)
  {
    v5 = result;
    free(*((void **)result + 22));
    result = malloc_type_calloc(a2, 2uLL, 0x6D9A4F0CuLL);
    if (!result && (a2 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v5[22] = result;
    *((_DWORD *)v5 + 46) = a2;
  }
  return result;
}

void sub_1C484B92C(uint64_t a1, _QWORD *a2, uint64_t *a3, int *a4, int a5, int a6)
{
  unsigned int v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  int v14;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  _WORD *v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  _WORD *v29;
  unsigned __int16 v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  __int16 v41;
  _WORD *v42;
  unsigned __int16 *v43;
  __int16 v44;
  unsigned __int16 v45;
  unsigned int v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  unsigned int v52;
  unint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  unsigned __int16 *v70;
  int v71;
  BOOL v72;
  _QWORD *v73;
  unint64_t v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  _QWORD *v85;
  uint64_t v86;
  llvm::MachineFunction *v87;
  unsigned __int8 *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  _BOOL4 v113;
  BOOL v114;
  uint64_t v115;
  int v116;
  int v117;
  unsigned int v118;
  char v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  unint64_t v127;
  __int16 v128;
  _WORD *v129;
  unsigned __int16 *v130;
  __int16 v131;
  unsigned __int16 v132;
  unsigned int v133;
  _BOOL4 v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  int v138;
  BOOL v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unint64_t v155;
  __int16 v156;
  _WORD *v157;
  unsigned __int16 *v158;
  __int16 v159;
  unsigned __int16 v160;
  unsigned int v161;
  _BOOL4 v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int v165;
  int v166;
  BOOL v167;
  unsigned int *v168;
  uint64_t v169;
  unsigned __int16 *v170;
  uint64_t i;
  uint64_t v172;
  unint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char v179;
  unsigned int v180;
  int v181;
  unint64_t *v182;
  unsigned int *v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  _DWORD *v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int *v198;
  _BOOL4 v199;
  int v200;
  int v201;
  unint64_t v202;
  int v203;
  int v204;
  int v205;
  uint64_t v206;
  BOOL v207;
  BOOL v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int16 v213;
  _WORD *v214;
  unsigned __int16 *v215;
  int v216;
  int v217;
  _DWORD *v218;
  uint64_t v219;
  int v220;
  _DWORD *v221;
  uint64_t v222;
  uint64_t v223;
  _DWORD *v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  _DWORD *v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int *v231;
  int v232;
  int v233;
  unint64_t v234;
  unsigned int v235;
  char v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned __int16 v241;
  _WORD *v242;
  unsigned __int16 *v243;
  int v244;
  int v245;
  void **v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned __int16 v251;
  _WORD *v252;
  unsigned __int16 *v253;
  int v254;
  uint64_t v255;
  uint64_t j;
  unsigned __int16 *v257;
  int v258;
  BOOL v260;
  int v261;
  uint64_t v262;
  unsigned __int16 *v263;
  int v264;
  BOOL v265;
  BOOL v266;
  int v267;
  int v268;
  unsigned int v269;
  int v270;
  int v271;
  uint64_t v272;
  unsigned int v273;
  unsigned int v274;
  unsigned __int16 *v275;
  unsigned __int16 *v276;
  int v277;
  int v278;
  unsigned int v279;
  unsigned int v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  _BOOL4 v289;
  uint64_t v290;
  unsigned int v291;
  int v292;
  BOOL v293;
  void **v294;
  int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  uint64_t v299;
  int v300;
  _QWORD *v301;
  uint64_t v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned __int16 v307;
  _DWORD *v308;
  unsigned int v309;
  uint64_t v310;
  unsigned int v311;
  unsigned int v313;
  int v314;
  unsigned int v315;
  unsigned __int16 *v317;
  char v318;
  unsigned int v319;
  unsigned int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  unsigned int v325;
  _BYTE *v326;
  int v327;
  _QWORD *v328;
  uint64_t v329;
  int v330;
  int v331;
  uint64_t v332;
  _WORD *v333;
  unsigned int v334;
  _QWORD *v336;
  unsigned int v337;
  unsigned int v338;
  uint64_t v339;
  unsigned int *v340;
  unsigned __int8 *v342;
  int v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  int v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  uint64_t v354;

  v354 = *MEMORY[0x1E0C80C00];
  v9 = a2[4];
  v326 = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 8) + 16))(*(_QWORD *)(v9 + 8), *(_QWORD *)v9);
  v10 = a2 + 6;
  v301 = a2;
  v11 = a2[7];
  v328 = v10;
  if ((_QWORD *)v11 == v10)
    return;
  v332 = *(_QWORD *)(v9 + 40);
  v299 = a1 + 560;
  v336 = *(_QWORD **)(*(_QWORD *)(v9 + 24) + 160);
  v340 = (unsigned int *)(a1 + 552);
  v327 = v326[301];
  v302 = a1 + 576;
  v308 = (_DWORD *)(a1 + 564);
  v339 = a1;
  do
  {
    if (!v11 || (v12 = v11, (*(_BYTE *)v11 & 4) == 0))
    {
      v12 = v11;
      if ((*(_WORD *)(v11 + 44) & 8) != 0)
      {
        v12 = v11;
        do
          v12 = *(_QWORD *)(v12 + 8);
        while ((*(_WORD *)(v12 + 44) & 8) != 0);
      }
    }
    v329 = *(_QWORD *)(v12 + 8);
    v13 = *(unsigned __int16 **)(v11 + 16);
    v14 = *v13;
    v16 = (v14 - 9) <= 0x3C && ((1 << (v14 - 9)) & 0x1000000000000605) != 0
       || v14 == 0;
    if (v16 || (v13[4] & 0x10) != 0)
      goto LABEL_374;
    v17 = *((_QWORD *)v13 + 2);
    v321 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 256) + 768))(*(_QWORD *)(a1 + 256), v11);
    v322 = v14;
    v317 = v13;
    v318 = v17;
    if (v327)
    {
      if ((v17 & 1) == 0)
      {
        v18 = *(unsigned int *)(a1 + 1352);
        if ((_DWORD)v18)
          bzero(*(void **)(a1 + 1344), 8 * v18);
      }
      if ((a6 | v321) == 1)
      {
        if (*((_BYTE *)v13 + 4))
        {
          v19 = *(_DWORD **)(v11 + 32);
          if ((*v19 & 0x10000FF) == 0x1000000)
          {
            v20 = v19[1];
            if ((v20 - 1) <= 0x497E
              && ((byte_1C687CFBA[v20 >> 3] >> (v20 & 7)) & 1) != 0)
            {
              v309 = v9;
              v21 = *(_QWORD *)(a1 + 248);
              v22 = *(_QWORD *)(v21 + 8);
              v23 = *(_QWORD *)(v21 + 56);
              v24 = *(unsigned int *)(v22 + 24 * v20 + 4);
              if (*(_WORD *)(v23 + 2 * v24))
              {
                v25 = *(_WORD *)(v23 + 2 * v24) + v20;
                v26 = (_WORD *)(*(_QWORD *)(v21 + 88) + 2 * *(unsigned int *)(v22 + 24 * v20 + 12));
                v27 = (unsigned __int16 *)(v23 + 2 * v24 + 2);
                v28 = v27;
                v29 = v26;
                v30 = v25;
                while (*v29 != 33)
                {
                  v31 = *v28++;
                  v30 += v31;
                  ++v29;
                  if (!v31)
                  {
                    v32 = 0;
                    goto LABEL_31;
                  }
                }
                v32 = v30;
LABEL_31:
                LODWORD(v346) = v32;
                while (*v26 != 34)
                {
                  v33 = *v27++;
                  v25 += v33;
                  ++v26;
                  if (!v33)
                  {
                    v34 = 0;
                    goto LABEL_36;
                  }
                }
                v34 = v25;
              }
              else
              {
                v32 = 0;
                v34 = 0;
                LODWORD(v346) = 0;
              }
LABEL_36:
              v35 = 0;
              HIDWORD(v346) = v34;
              LOWORD(v345) = 0;
              v36 = 1;
              v37 = *(_DWORD *)(v21 + 16);
              do
              {
                v38 = v36;
                v39 = *((_DWORD *)&v346 + v35);
                if (v39 >= v37)
                {
                  v6 = 0;
                  v45 = 0;
                  v43 = 0;
                  v46 = ((v39 - v37) >> 12) & 0xFFFFE;
                  v330 = (v39 - v37) & 0x1FFF;
                }
                else
                {
                  v40 = *(unsigned int *)(v22 + 24 * v39 + 16);
                  v41 = v40 & 0xF;
                  v42 = (_WORD *)(v23 + ((v40 >> 3) & 0x1FFFFFFE));
                  v44 = *v42;
                  v43 = v42 + 1;
                  v45 = v44 + v41 * v39;
                  v46 = v315;
                }
                v47 = v6 < v46 >> 1;
                if (v37 > v39)
                  v47 = v43 != 0;
                v315 = v46;
                if (v47)
                {
                  v48 = v46 >> 1;
                  v49 = *(_QWORD *)(a1 + 1344);
                  do
                  {
                    if (v39 >= v37)
                    {
                      if (((*(_QWORD *)(v49 + 8 * ((v6 + v330 + *(_DWORD *)(v21 + 44)) >> 6)) >> (v6 + v330 + *(_BYTE *)(v21 + 44))) & 1) != 0)
                      {
LABEL_55:
                        *((_BYTE *)&v345 + v35) = 1;
                        break;
                      }
                      ++v6;
                    }
                    else
                    {
                      if (((*(_QWORD *)(v49 + 8 * (v45 >> 6)) >> v45) & 1) != 0)
                        goto LABEL_55;
                      v50 = *v43++;
                      v45 += v50;
                      if (!v50)
                        v43 = 0;
                    }
                    v51 = v6 < v48;
                    if (v39 < v37)
                      v51 = v43 != 0;
                  }
                  while (v51);
                }
                v36 = 0;
                v35 = 1;
              }
              while ((v38 & 1) != 0);
              if ((_BYTE)v345 && BYTE1(v345))
              {
                v337 = v6;
                v52 = v32 - v37;
                if (v32 >= v37)
                {
                  v57 = 0;
                  v307 = 0;
                  v56 = 0;
                  v58 = (v52 >> 12) & 0xFFFFE;
                  v300 = v52 & 0x1FFF;
                }
                else
                {
                  v53 = *(unsigned int *)(v22 + 24 * v32 + 16);
                  v54 = v53 & 0xF;
                  v55 = (v53 >> 3) & 0x1FFFFFFE;
                  v56 = v23 + v55 + 2;
                  v307 = *(_WORD *)(v23 + v55) + v54 * v32;
                  v57 = v304;
                  v58 = v298;
                }
                v59 = v58;
                v60 = v57 < v58 >> 1;
                if (v32 < v37)
                  v60 = v56 != 0;
                v61 = v57;
                v306 = v32;
                v298 = v59;
                if (v60)
                {
                  v305 = v59 >> 1;
                  do
                  {
                    v333 = (_WORD *)v56;
                    v62 = v61;
                    if (v32 >= v37)
                      v63 = v61 + v300 + *(_DWORD *)(v21 + 44);
                    else
                      v63 = v307;
                    v64 = v336[5];
                    v65 = 4 * v63;
                    v66 = *(unsigned __int16 *)(v64 + v65);
                    if (*(_WORD *)(v64 + v65))
                    {
                      v67 = *(unsigned __int16 *)(v64 + 4 * v63 + 2);
                      do
                      {
                        v68 = v66;
                        v66 = v67;
                        v69 = v336[6];
                        if (v69)
                        {
                          v70 = (unsigned __int16 *)(v69
                                                   + 2 * *(unsigned int *)(*v336 + 24 * (unsigned __int16)v68 + 8));
                          do
                          {
                            llvm::MachineRegisterInfo::clearKillFlags(v332, (unsigned __int16)v68);
                            v71 = *v70++;
                            v68 += v71;
                          }
                          while (v71);
                        }
                        v67 = 0;
                      }
                      while ((_WORD)v66);
                    }
                    v32 = v306;
                    v61 = v62;
                    if (v306 >= v37)
                    {
                      v61 = (v62 + 1);
                      v13 = v317;
                      LOBYTE(v17) = v318;
                      v14 = v322;
                      v56 = (uint64_t)v333;
                    }
                    else
                    {
                      v56 = (uint64_t)(v333 + 1);
                      v307 += *v333;
                      if (!*v333)
                        v56 = 0;
                      v13 = v317;
                      LOBYTE(v17) = v318;
                      v14 = v322;
                    }
                    v72 = v61 < v305;
                    if (v306 < v37)
                      v72 = v56 != 0;
                  }
                  while (v72);
                }
                v304 = v61;
                v73 = v301;
                v75 = (char *)v301[20];
                v74 = v301[21];
                if ((unint64_t)v75 >= v74)
                {
                  v77 = (char *)v301[19];
                  v78 = (v75 - v77) >> 4;
                  v79 = v78 + 1;
                  if ((unint64_t)(v78 + 1) >> 60)
                    abort();
                  v80 = v74 - (_QWORD)v77;
                  if (v80 >> 3 > v79)
                    v79 = v80 >> 3;
                  if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0)
                    v81 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v81 = v79;
                  if (v81)
                  {
                    if (v81 >> 60)
                      sub_1C4764EE4();
                    v82 = (char *)operator new(16 * v81);
                    LOWORD(v32) = v306;
                  }
                  else
                  {
                    v82 = 0;
                  }
                  v83 = &v82[16 * v78];
                  *(_WORD *)v83 = v32;
                  *((_QWORD *)v83 + 1) = -1;
                  v84 = v83;
                  if (v75 == v77)
                  {
                    v85 = v301;
                  }
                  else
                  {
                    do
                    {
                      *((_OWORD *)v84 - 1) = *((_OWORD *)v75 - 1);
                      v84 -= 16;
                      v75 -= 16;
                    }
                    while (v75 != v77);
                    v85 = v301;
                    v75 = (char *)v301[19];
                  }
                  v76 = v83 + 16;
                  v85[19] = v84;
                  v85[20] = v83 + 16;
                  v85[21] = &v82[16 * v81];
                  if (v75)
                  {
                    operator delete(v75);
                    v73 = v301;
                  }
                  else
                  {
                    v73 = v85;
                  }
                }
                else
                {
                  *(_WORD *)v75 = v32;
                  *((_QWORD *)v75 + 1) = -1;
                  v76 = v75 + 16;
                }
                v73[20] = v76;
                v86 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8);
                v87 = (llvm::MachineFunction *)v301[4];
                v88 = *(unsigned __int8 **)(v11 + 56);
                v342 = v88;
                if (v88)
                  llvm::MetadataTracking::track((uint64_t)&v342, v88, 2);
                v89 = *((_QWORD *)v87 + 28);
                if (v89)
                  *((_QWORD *)v87 + 28) = *(_QWORD *)v89;
                else
                  v89 = sub_1C484358C((uint64_t)v87 + 128, 72, 3);
                *(_QWORD *)&v348 = v342;
                if (v342)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v342, v342, (uint64_t)&v348);
                  v342 = 0;
                }
                llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v89, v87, v86 + 66288, (unsigned __int8 **)&v348, 0);
                if ((_QWORD)v348)
                  llvm::MetadataTracking::untrack((uint64_t)&v348, (unsigned __int8 *)v348);
                v90 = v301;
                if (v342)
                {
                  llvm::MetadataTracking::untrack((uint64_t)&v342, v342);
                  v90 = v301;
                }
                v91 = v90[5];
                *(_QWORD *)(v89 + 24) = v91;
                v92 = *(_QWORD *)(v91 + 32);
                v93 = *(unsigned int *)(v89 + 40);
                v94 = v306;
                if ((_DWORD)v93)
                {
                  v282 = *(_QWORD *)(v89 + 32);
                  v283 = *(_QWORD *)(v92 + 40);
                  v284 = 32 * v93;
                  do
                  {
                    if (!*(_BYTE *)v282)
                    {
                      v285 = *(unsigned int *)(v282 + 4);
                      if ((int)v285 >= 0)
                        v286 = (uint64_t *)(*(_QWORD *)(v283 + 272) + 8 * v285);
                      else
                        v286 = (uint64_t *)(*(_QWORD *)(v283 + 24) + 16 * (v285 & 0x7FFFFFFF) + 8);
                      v287 = *v286;
                      if (*v286)
                      {
                        v288 = *(_QWORD *)(v287 + 16);
                        *(_QWORD *)(v287 + 16) = v282;
                        *(_QWORD *)(v282 + 16) = v288;
                        if ((*(_BYTE *)(v282 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v282 + 24) = v287;
                        }
                        else
                        {
                          *(_QWORD *)(v282 + 24) = 0;
                          v286 = (uint64_t *)(v288 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v282 + 16) = v282;
                        *(_QWORD *)(v282 + 24) = 0;
                      }
                      *v286 = v282;
                    }
                    v282 += 32;
                    v284 -= 32;
                  }
                  while (v284);
                }
                v95 = *(_QWORD *)(v92 + 728);
                if (v95)
                {
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v95 + 24))(v95, v89);
                  v94 = v306;
                }
                v96 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v89 = v96 | *(_QWORD *)v89 & 7;
                *(_QWORD *)(v89 + 8) = v11;
                *(_QWORD *)(v96 + 8) = v89;
                *(_QWORD *)v11 = *(_QWORD *)v11 & 7 | v89;
                *((_QWORD *)&v348 + 1) = 0;
                v349 = 0uLL;
                LODWORD(v348) = 0x1000000;
                DWORD1(v348) = v94;
                v97 = v94;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v87, (const llvm::MachineOperand *)&v348);
                LODWORD(v348) = 1;
                *((_QWORD *)&v348 + 1) = 0;
                *(_QWORD *)&v349 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v87, (const llvm::MachineOperand *)&v348);
                *((_QWORD *)&v348 + 1) = 0;
                LODWORD(v348) = 0;
                DWORD1(v348) = v97;
                v349 = 0uLL;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v87, (const llvm::MachineOperand *)&v348);
                LODWORD(v348) = 1;
                *((_QWORD *)&v348 + 1) = 0;
                *(_QWORD *)&v349 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v87, (const llvm::MachineOperand *)&v348);
                *((_QWORD *)&v348 + 1) = 0;
                LODWORD(v348) = 0;
                DWORD1(v348) = v97;
                v349 = 0uLL;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v87, (const llvm::MachineOperand *)&v348);
                LODWORD(v348) = 1;
                *((_QWORD *)&v348 + 1) = 0;
                *(_QWORD *)&v349 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v87, (const llvm::MachineOperand *)&v348);
                *((_QWORD *)&v348 + 1) = 0;
                LODWORD(v348) = 0;
                DWORD1(v348) = v97;
                v349 = 0uLL;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v87, (const llvm::MachineOperand *)&v348);
                LODWORD(v348) = 1;
                *((_QWORD *)&v348 + 1) = 0;
                *(_QWORD *)&v349 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v87, (const llvm::MachineOperand *)&v348);
                v348 = 0u;
                v349 = 0u;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v87, (const llvm::MachineOperand *)&v348);
                LODWORD(v348) = 1;
                *((_QWORD *)&v348 + 1) = 0;
                *(_QWORD *)&v349 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v87, (const llvm::MachineOperand *)&v348);
                v348 = 0u;
                v349 = 0u;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v87, (const llvm::MachineOperand *)&v348);
                v6 = v337;
              }
              v9 = v309;
            }
          }
        }
      }
    }
    v98 = v326[286];
    if (!v326[286])
      goto LABEL_133;
    if ((v17 & 1) == 0)
    {
      v98 = 0;
      if (v14 > 12691)
      {
        if ((v14 - 12692) > 0x35 || ((1 << (v14 + 108)) & 0x3FF000000003FFLL) == 0)
        {
          v99 = -12780;
          goto LABEL_126;
        }
      }
      else if ((v14 - 12496) > 0x35 || ((1 << (v14 + 48)) & 0x3FF000000003FFLL) == 0)
      {
        v99 = -12584;
LABEL_126:
        v100 = v14 + v99;
        if (v100 > 0x35 || ((1 << v100) & 0x3FF000000003FFLL) == 0)
          goto LABEL_133;
      }
    }
    v98 = 1;
LABEL_133:
    v101 = v13[1];
    if ((v13[5] & 0x40) != 0)
    {
      v102 = v319;
      if (v13[1])
      {
        v103 = 0;
        v104 = (char *)(*((_QWORD *)v13 + 5) + 2);
        while (1)
        {
          v105 = *v104;
          v104 += 6;
          if ((v105 & 2) != 0)
            break;
          if (v101 == ++v103)
            goto LABEL_139;
        }
        LODWORD(v101) = v103;
      }
      else
      {
LABEL_139:
        LODWORD(v101) = -1;
      }
    }
    else
    {
      v102 = v319;
    }
    v106 = *((unsigned __int8 *)v13 + 4);
    if ((int)v106 + 1 >= v101)
      v98 = 0;
    v338 = v6;
    v334 = v101;
    if (v98 == 1)
    {
      v107 = v106 + 1;
      v108 = v101;
      do
      {
        v109 = *(_QWORD *)(v11 + 32);
        if (*(_BYTE *)(v109 + 32 * v107) == 1)
        {
          v110 = v9;
          v111 = v106;
          v112 = (unsigned int *)(v109 + 32 * v106);
          v113 = sub_1C484D4CC(v112);
          v114 = v113;
          if (v113 || a5)
          {
            if (v113)
            {
              v115 = v339;
              if (*v112)
                v116 = (*v112 >> 8) & 0xFFF;
              else
                v116 = 0;
              if (v116 == 8)
                v117 = 0x4000;
              else
                v117 = (v116 << 12) & 0xFFE000;
              v118 = (v117 | *(_DWORD *)(v109 + 32 * v111 + 4)) + *(_DWORD *)(*(_QWORD *)(v339 + 248) + 16);
              goto LABEL_157;
            }
            v120 = v102;
            v121 = *v112;
            if (*v112)
              goto LABEL_164;
            v122 = *(_DWORD *)(v109 + 32 * v111 + 4);
            if (!v122)
              goto LABEL_164;
            v320 = *(_DWORD *)(v109 + 32 * v111 + 4);
            v310 = *(_QWORD *)(v339 + 248);
            if ((sub_1C484D770(v122, *a3, v310) & 1) != 0)
              goto LABEL_164;
            if (!v321)
              goto LABEL_172;
            if (llvm::MachineInstr::findRegisterDefOperandIdx(v11, v320, 0, 1, v310) != -1)
            {
LABEL_164:
              v102 = v120;
              v9 = v110;
              a1 = v339;
            }
            else
            {
              v121 = *v112;
LABEL_172:
              v123 = (v121 >> 26) & ~HIBYTE(v121);
              v102 = v120;
              v115 = v339;
              v118 = v320;
              if ((v123 & 1) != 0)
              {
LABEL_158:
                if (v327)
                  v119 = v114;
                else
                  v119 = 1;
                if ((v119 & 1) != 0)
                {
                  v9 = v110;
                  a1 = v339;
                  LODWORD(v101) = v334;
                }
                else
                {
                  v124 = *(_DWORD *)(v109 + 32 * v111 + 4);
                  v125 = *(_QWORD *)(v339 + 248);
                  v126 = *(_DWORD *)(v125 + 16);
                  LODWORD(v101) = v334;
                  if (v124 >= v126)
                  {
                    v102 = 0;
                    v132 = 0;
                    v130 = 0;
                    v133 = ((v124 - v126) >> 12) & 0xFFFFE;
                    v331 = (v124 - v126) & 0x1FFF;
                    v9 = v110;
                  }
                  else
                  {
                    v127 = *(unsigned int *)(*(_QWORD *)(v125 + 8) + 24 * v124 + 16);
                    v128 = v127 & 0xF;
                    v129 = (_WORD *)(*(_QWORD *)(v125 + 56) + ((v127 >> 3) & 0x1FFFFFFE));
                    v131 = *v129;
                    v130 = v129 + 1;
                    v132 = v131 + v128 * v124;
                    v9 = v110;
                    v133 = v313;
                  }
                  v134 = v102 < v133 >> 1;
                  if (v126 > v124)
                    v134 = v130 != 0;
                  a1 = v339;
                  v313 = v133;
                  if (v134)
                  {
                    v135 = v133 >> 1;
                    v136 = *(_QWORD *)(v339 + 1344);
                    do
                    {
                      if (v124 >= v126)
                        v137 = v102 + v331 + *(_DWORD *)(v125 + 44);
                      else
                        v137 = v132;
                      *(_QWORD *)(v136 + 8 * (v137 >> 6)) &= ~(1 << v137);
                      if (v124 >= v126)
                      {
                        v102 = (v102 + 1);
                      }
                      else
                      {
                        v138 = *v130++;
                        v132 += v138;
                        if (!v138)
                          v130 = 0;
                      }
                      v139 = v102 < v135;
                      if (v124 < v126)
                        v139 = v130 != 0;
                    }
                    while (v139);
                  }
                }
                *(_QWORD *)(v109 + 32 * v107 + 16) |= 0x10uLL;
                goto LABEL_193;
              }
LABEL_157:
              if (sub_1C484D85C(v115, *a4, v118, 0))
                goto LABEL_158;
              v9 = v110;
              a1 = v115;
            }
            LODWORD(v101) = v334;
            goto LABEL_193;
          }
          v9 = v110;
          a1 = v339;
        }
LABEL_193:
        LODWORD(v106) = v107++;
      }
      while (v107 != v108);
    }
    if ((v322 - 12440) > 0x2C)
    {
      v6 = v338;
    }
    else
    {
      v6 = v338;
      if (((0x1C71C71C71C7uLL >> (v322 + 104)) & 1) != 0 && v101 >= 2 && a5)
      {
        v140 = 0;
        v141 = dword_1C64637CC[(__int16)(v322 - 12440)];
        v142 = v334;
        v143 = 1;
        while (1)
        {
          v144 = *(_QWORD *)(v11 + 32);
          v145 = *(_DWORD *)(v144 + 32 * v140);
          if ((_BYTE)v145)
          {
            v6 = v338;
            goto LABEL_233;
          }
          v146 = v9;
          v147 = v144 + 32 * v140;
          v150 = *(_DWORD *)(v147 + 4);
          v149 = (unsigned int *)(v147 + 4);
          v148 = v150;
          if (!v150 || *(_BYTE *)(v144 + 32 * v143) != 1)
          {
            v6 = v338;
            v9 = v146;
            a1 = v339;
            goto LABEL_233;
          }
          v323 = v141 - 1;
          v151 = *(_QWORD *)(v339 + 248);
          if ((sub_1C484D770(v148, *a3, v151) & 1) == 0
            && (((v145 >> 26) & ~HIBYTE(v145) & 1) != 0 || sub_1C484D85C(v339, *a4, v148, 0)))
          {
            v6 = v338;
            if (!v321 || llvm::MachineInstr::findRegisterDefOperandIdx(v11, v148, 0, 1, v151) == -1)
            {
              if (v327)
              {
                v152 = *v149;
                v153 = *(_QWORD *)(v339 + 248);
                v154 = *(_DWORD *)(v153 + 16);
                if (*v149 >= v154)
                {
                  v9 = 0;
                  v160 = 0;
                  v158 = 0;
                  v161 = ((v152 - v154) >> 12) & 0xFFFFE;
                  v314 = (v152 - v154) & 0x1FFF;
                }
                else
                {
                  v9 = v146;
                  v155 = *(unsigned int *)(*(_QWORD *)(v153 + 8) + 24 * v152 + 16);
                  v156 = v155 & 0xF;
                  v157 = (_WORD *)(*(_QWORD *)(v153 + 56) + ((v155 >> 3) & 0x1FFFFFFE));
                  v159 = *v157;
                  v158 = v157 + 1;
                  v160 = v159 + v156 * v152;
                  v161 = v303;
                }
                v162 = v9 < v161 >> 1;
                if (v154 > v152)
                  v162 = v158 != 0;
                a1 = v339;
                v303 = v161;
                if (v162)
                {
                  v163 = v161 >> 1;
                  v164 = *(_QWORD *)(v339 + 1344);
                  do
                  {
                    if (v152 >= v154)
                      v165 = v9 + v314 + *(_DWORD *)(v153 + 44);
                    else
                      v165 = v160;
                    *(_QWORD *)(v164 + 8 * (v165 >> 6)) &= ~(1 << v165);
                    if (v152 >= v154)
                    {
                      v9 = (v9 + 1);
                    }
                    else
                    {
                      v166 = *v158++;
                      v160 += v166;
                      if (!v166)
                        v158 = 0;
                    }
                    v167 = v9 < v163;
                    if (v152 < v154)
                      v167 = v158 != 0;
                  }
                  while (v167);
                }
              }
              else
              {
                v9 = v146;
                a1 = v339;
              }
              *(_QWORD *)(v144 + 32 * v143 + 16) |= 0x10uLL;
              goto LABEL_232;
            }
          }
          else
          {
            v6 = v338;
          }
          v9 = v146;
          a1 = v339;
LABEL_232:
          v141 = v323;
          v142 = v334;
LABEL_233:
          if (++v143 < v142)
          {
            ++v140;
            if (v141)
              continue;
          }
          break;
        }
      }
    }
    v319 = v102;
    if (!v326[285])
      goto LABEL_373;
    if ((v318 & 1) == 0)
    {
      *v340 = 0;
      goto LABEL_373;
    }
    v168 = v340;
    v169 = *v340;
    v311 = v9;
    v170 = v317;
    if (!(_DWORD)v169)
      goto LABEL_261;
    for (i = 0; i != v169; ++i)
    {
      if (*(int *)(a1 + 24 * i + 568) <= 0)
      {
        v172 = a1 + 24 * i;
        v173 = *(_QWORD *)(v172 + 576);
        if ((v173 & 4) != 0)
        {
          v176 = v173 & 0xFFFFFFFFFFFFFFF8;
          v174 = *(uint64_t **)v176;
          v175 = *(_QWORD *)v176 + 8 * *(unsigned int *)(v176 + 8);
        }
        else
        {
          v174 = (uint64_t *)(v172 + 576);
          v175 = (uint64_t)&v174[v173 > 7];
        }
        while (v174 != (uint64_t *)v175)
        {
          v177 = *v174++;
          *(_QWORD *)(v177 + 16) |= 0x20uLL;
        }
      }
    }
    v168 = v340;
    if (*v340)
    {
      v178 = 0;
      v179 = 0;
      v180 = 0;
      v181 = *a4;
      v324 = ~*a4;
LABEL_252:
      v182 = (unint64_t *)(v302 + 24 * v178);
      do
      {
        v183 = (unsigned int *)(v182 - 2);
        if (*((_DWORD *)v182 - 2))
        {
          v184 = *(_QWORD *)v183;
          v185 = a1 + 24 * v180;
          *(_DWORD *)(v185 + 568) = *((_DWORD *)v182 - 2);
          *(_QWORD *)(v185 + 560) = v184;
          sub_1C484E2BC((unint64_t *)(v185 + 576), v182);
          --*(_DWORD *)(v185 + 568);
          ++v180;
        }
        else
        {
          v186 = *v183;
          if ((sub_1C484D85C(a1, v181, *v183, 0) & 1) == 0)
          {
            v187 = sub_1C484DA2C((_QWORD *)a1, v181, v181, v186);
            if (v187 != -1)
            {
              v188 = v187;
              v189 = *(v182 - 2);
              v190 = a1 + 552 + 24 * v180;
              *(_DWORD *)(v190 + 16) = *((_DWORD *)v182 - 2);
              *(_QWORD *)(v190 + 8) = v189;
              sub_1C484E2BC((unint64_t *)(v190 + 24), v182);
              *(_DWORD *)(v190 + 16) = v188 + v324;
              ++v180;
              ++v178;
              v179 = 1;
              if (v178 < *(unsigned int *)(a1 + 552))
                goto LABEL_252;
              *v340 = v180;
              v170 = v317;
              goto LABEL_263;
            }
          }
        }
        ++v178;
        v182 += 3;
      }
      while (v178 < *v340);
      *v340 = v180;
      v170 = v317;
      if ((v179 & 1) == 0)
        goto LABEL_267;
LABEL_263:
      v191 = 126 - 2 * __clz(v180);
      if (v180)
        v192 = v191;
      else
        v192 = 0;
      sub_1C484E4F8(v299, v299 + 24 * v180, v192, 1);
    }
    else
    {
LABEL_261:
      *v168 = 0;
    }
LABEL_267:
    v352 = 0u;
    v353 = 0u;
    v350 = 0u;
    v351 = 0u;
    v348 = 0u;
    v349 = 0u;
    v347 = 0;
    v346 = 0;
    if (*((_BYTE *)v170 + 4))
    {
      v193 = *(_DWORD **)(v11 + 32);
      v194 = v334;
      if ((*v193 & 0x10000FF) == 0x1000000)
        v325 = v193[1];
      else
        v325 = 0;
    }
    else
    {
      v325 = 0;
      v194 = v334;
    }
    if (v194 >= 3)
    {
      v195 = v194 - 1;
      v196 = 1;
      while (1)
      {
        v197 = *(_QWORD *)(v11 + 32);
        v198 = (unsigned int *)(v197 + 32 * v196);
        v199 = sub_1C484D4CC(v198);
        if (v199)
        {
          v200 = *v198 ? (*v198 >> 8) & 0xFFF : 0;
          v201 = v200 == 8 ? 0x4000 : (v200 << 12) & 0xFFE000;
          v202 = (v201 | v198[1]) + *(_DWORD *)(*(_QWORD *)(a1 + 248) + 16);
        }
        else
        {
          if ((*v198 & 0x20000FF) != 0)
            goto LABEL_319;
          v202 = *(unsigned int *)(v197 + 32 * v196 + 4);
          if ((v202 | 2) == 2)
            goto LABEL_319;
          v207 = v325 && (_DWORD)v202 == v325;
          v208 = v207;
          if ((*v198 & 0x1000000) != 0 || v208)
            goto LABEL_319;
          if ((v202 - 1) <= 0x497E
            && ((byte_1C687CFBA[v202 >> 3] >> (v202 & 7)) & 1) != 0)
          {
            v209 = *(_QWORD **)(a1 + 248);
            v210 = v209[1];
            v211 = v209[7];
            v212 = *(unsigned int *)(v210 + 24 * v202 + 4);
            if (*(_WORD *)(v211 + 2 * v212))
            {
              v213 = *(_WORD *)(v211 + 2 * v212) + v202;
              v214 = (_WORD *)(v209[11] + 2 * *(unsigned int *)(v210 + 24 * v202 + 12));
              v215 = (unsigned __int16 *)(v211 + 2 * v212 + 2);
              while (*v214 != 33)
              {
                v202 = 0;
                v216 = *v215++;
                v213 += v216;
                ++v214;
                if (!v216)
                  goto LABEL_282;
              }
              v202 = v213;
            }
            else
            {
              v202 = 0;
            }
          }
        }
LABEL_282:
        v203 = *a4;
        if ((sub_1C484D85C(a1, *a4, v202, 0) & 1) == 0)
        {
          v204 = sub_1C484DA2C((_QWORD *)a1, v203, v203, v202);
          if (v204 != -1)
            break;
        }
LABEL_319:
        if (++v196 == v195)
          goto LABEL_324;
      }
      v205 = v204;
      if (v199)
      {
        v206 = *v340;
        goto LABEL_309;
      }
      v217 = sub_1C484DD18(v202, *(_QWORD *)(a1 + 248));
      v206 = *(unsigned int *)(a1 + 552);
      if (v217 == (_DWORD)v202)
      {
LABEL_309:
        if (!v206)
          goto LABEL_316;
        v220 = 0;
        v221 = v308;
        while (*(v221 - 1) != (_DWORD)v202)
        {
          if (*v221 == (_DWORD)v202)
            ++v220;
          if (v220 == 2)
            break;
          v221 += 6;
          if (!--v206)
            goto LABEL_316;
        }
        v222 = 2;
      }
      else
      {
        if (*(_DWORD *)(a1 + 552))
        {
          v218 = v308;
          v219 = *(unsigned int *)(a1 + 552);
          while (*v218 != v217 || *(v218 - 1) == v217)
          {
            v218 += 6;
            if (!--v219)
              goto LABEL_309;
          }
          v222 = 0;
          goto LABEL_318;
        }
LABEL_316:
        v222 = 1;
      }
LABEL_318:
      v223 = *((unsigned int *)&v346 + v222);
      *((_DWORD *)&v346 + v222) = v223 + 1;
      v224 = (_DWORD *)&v348 + 8 * v222 + 2 * v223;
      *v224 = v205;
      v224[1] = v196;
      goto LABEL_319;
    }
LABEL_324:
    v225 = 0;
    do
    {
      v226 = *((unsigned int *)&v346 + v225);
      if (v226 >= 2)
      {
        qsort(&v348 + 2 * v225, *((unsigned int *)&v346 + v225), 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C6139058);
      }
      else
      {
        if (!(_DWORD)v226)
        {
          v236 = 0;
          goto LABEL_359;
        }
        v226 = 1;
      }
      v227 = 0;
      do
      {
        v228 = (_DWORD *)&v348 + 8 * v225 + 2 * v227;
        v229 = v228[1];
        v230 = *(_QWORD *)(v11 + 32);
        if ((*(_BYTE *)(v230 + 32 * (v229 + 1) + 16) & 0x10) != 0)
        {
          v236 = 0;
        }
        else
        {
          v231 = (unsigned int *)(v230 + 32 * v229);
          if (sub_1C484D4CC(v231))
          {
            if (*v231)
              v232 = (*v231 >> 8) & 0xFFF;
            else
              v232 = 0;
            if (v232 == 8)
              v233 = 0x4000;
            else
              v233 = (v232 << 12) & 0xFFE000;
            LODWORD(v234) = (v233 | *(_DWORD *)(v230 + 32 * v229 + 4)) + *(_DWORD *)(*(_QWORD *)(a1 + 248) + 16);
            v235 = v234;
          }
          else
          {
            v234 = *(unsigned int *)(v230 + 32 * v229 + 4);
            if ((v234 - 1) >= 0x497F)
            {
              v237 = *(_QWORD **)(a1 + 248);
            }
            else
            {
              v237 = *(_QWORD **)(a1 + 248);
              if (((byte_1C687CFBA[v234 >> 3] >> (v234 & 7)) & 1) != 0)
              {
                v238 = v237[1];
                v239 = v237[7];
                v240 = *(unsigned int *)(v238 + 24 * v234 + 4);
                if (*(_WORD *)(v239 + 2 * v240))
                {
                  v241 = *(_WORD *)(v239 + 2 * v240) + v234;
                  v242 = (_WORD *)(v237[11] + 2 * *(unsigned int *)(v238 + 24 * v234 + 12));
                  v243 = (unsigned __int16 *)(v239 + 2 * v240 + 2);
                  while (*v242 != 33)
                  {
                    v244 = *v243++;
                    v241 += v244;
                    ++v242;
                    if (!v244)
                      goto LABEL_346;
                  }
                  v234 = v241;
                }
                else
                {
LABEL_346:
                  v234 = 0;
                }
              }
            }
            v235 = sub_1C484DD18(v234, (uint64_t)v237);
          }
          v245 = *v228 + ~*a4;
          v345 = v230 + 32 * (v229 + 1);
          v342 = (unsigned __int8 *)__PAIR64__(v235, v234);
          v343 = v245;
          sub_1C4850058(&v344, &v345, 1uLL);
          v236 = sub_1C484DDAC(v340, (uint64_t *)&v342);
          if ((v344 & 4) != 0)
          {
            v246 = (void **)(v344 & 0xFFFFFFFFFFFFFFF8);
            if ((v344 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if (*v246 != v246 + 2)
                free(*v246);
              MEMORY[0x1CAA32FC0](v246, 0x1080C40ED926357);
            }
          }
        }
        ++v227;
      }
      while (v227 < v226 && (v236 & 1) == 0);
LABEL_359:
      if (v225 > 1)
        break;
      ++v225;
    }
    while ((v236 & 1) == 0);
    if (v325)
    {
      v6 = v338;
      v9 = v311;
      if (v325 >> 7 <= 0x92 && ((byte_1C687CFBA[(unint64_t)v325 >> 3] >> (v325 & 7)) & 1) != 0)
      {
        v247 = *(_QWORD **)(a1 + 248);
        v248 = v247[1];
        v249 = v247[7];
        v250 = *(unsigned int *)(v248 + 24 * v325 + 4);
        if (*(_WORD *)(v249 + 2 * v250))
        {
          v251 = *(_WORD *)(v249 + 2 * v250) + v325;
          v252 = (_WORD *)(v247[11] + 2 * *(unsigned int *)(v248 + 24 * v325 + 12));
          v253 = (unsigned __int16 *)(v249 + 2 * v250 + 2);
          while (*v252 != 33)
          {
            v325 = 0;
            v254 = *v253++;
            v251 += v254;
            ++v252;
            if (!v254)
              goto LABEL_372;
          }
          v325 = v251;
        }
        else
        {
          v325 = 0;
        }
      }
LABEL_372:
      if (!v326[305])
      {
        if (!v11 || (v255 = v11, (*(_BYTE *)v11 & 4) == 0))
        {
          v255 = v11;
          if ((*(_WORD *)(v11 + 44) & 8) != 0)
          {
            v255 = v11;
            do
              v255 = *(_QWORD *)(v255 + 8);
            while ((*(_WORD *)(v255 + 44) & 8) != 0);
          }
        }
        for (j = *(_QWORD *)(v255 + 8); (_QWORD *)j != v328; j = *(_QWORD *)(j + 8))
        {
          v257 = *(unsigned __int16 **)(j + 16);
          v258 = *v257;
          v260 = (v258 - 9) <= 0x3C && ((1 << (v258 - 9)) & 0x1000000000000605) != 0
              || v258 == 0;
          if (!v260 && (v257[4] & 0x10) == 0)
          {
            v261 = *a4;
            if ((sub_1C484D85C(a1, *a4 + 1, v325, 1) & 1) == 0)
            {
              if ((*(_BYTE *)j & 4) == 0)
              {
                while ((*(_WORD *)(j + 44) & 8) != 0)
                  j = *(_QWORD *)(j + 8);
              }
              v262 = *(_QWORD *)(j + 8);
              if ((_QWORD *)v262 != v328)
              {
                while (1)
                {
                  v263 = *(unsigned __int16 **)(v262 + 16);
                  v264 = *v263;
                  v265 = (v264 - 9) > 0x3C
                      || ((1 << (v264 - 9)) & 0x1000000000000605) == 0;
                  v266 = !v265 || v264 == 0;
                  if (!v266 && (v263[4] & 0x10) == 0)
                    break;
                  if ((*(_BYTE *)v262 & 4) == 0)
                  {
                    while ((*(_WORD *)(v262 + 44) & 8) != 0)
                      v262 = *(_QWORD *)(v262 + 8);
                  }
                  v262 = *(_QWORD *)(v262 + 8);
                  if ((_QWORD *)v262 == v328)
                    goto LABEL_370;
                }
                if ((sub_1C484D85C(a1, v261 + 2, v325, 1) & 1) == 0)
                {
                  v267 = sub_1C484DA2C((_QWORD *)a1, v261 + 2, v261, v325);
                  if (v267 != -1)
                  {
                    v268 = v267;
                    v269 = sub_1C484DD18(v325, *(_QWORD *)(a1 + 248));
                    v270 = v268 + ~*a4;
                    v345 = *(_QWORD *)(v11 + 32) + 32;
                    v342 = (unsigned __int8 *)__PAIR64__(v269, v325);
                    v343 = v270;
                    sub_1C4850058(&v344, &v345, 1uLL);
                    v271 = sub_1C484DDAC(v340, (uint64_t *)&v342);
                    if (v327 && v271)
                    {
                      v272 = *(_QWORD *)(a1 + 248);
                      v273 = *(_DWORD *)(v272 + 16);
                      v274 = v325 - v273;
                      v9 = v311;
                      if (v325 >= v273)
                      {
                        v276 = 0;
                        v278 = 0;
                        v279 = 0;
                        v280 = (v274 >> 12) & 0xFFFFE;
                        v281 = v274 & 0x1FFF;
                      }
                      else
                      {
                        v275 = (unsigned __int16 *)(*(_QWORD *)(v272 + 56)
                                                  + (((unint64_t)*(unsigned int *)(*(_QWORD *)(v272 + 8)
                                                                                        + 24 * v325
                                                                                        + 16) >> 3) & 0x1FFFFFFE));
                        v277 = *v275;
                        v276 = v275 + 1;
                        v278 = v277 + (*(_DWORD *)(*(_QWORD *)(v272 + 8) + 24 * v325 + 16) & 0xF) * v325;
                        v279 = v296;
                        v280 = v297;
                        v281 = v295;
                      }
                      v289 = v279 < v280 >> 1;
                      if (v325 < v273)
                        v289 = v276 != 0;
                      v297 = v280;
                      v295 = v281;
                      if (v289)
                      {
                        v290 = *(_QWORD *)(a1 + 1344);
                        v291 = v325;
                        do
                        {
                          if (v291 >= v273)
                          {
                            *(_QWORD *)(v290 + 8 * ((v279 + v281 + *(_DWORD *)(v272 + 44)) >> 6)) |= 1 << (v279 + v281 + *(_BYTE *)(v272 + 44));
                            ++v279;
                          }
                          else
                          {
                            *(_QWORD *)(v290 + 8 * ((unsigned __int16)v278 >> 6)) |= 1 << v278;
                            v292 = *v276++;
                            v278 += v292;
                            if (!v292)
                              v276 = 0;
                          }
                          v293 = v279 < v280 >> 1;
                          v291 = v325;
                          if (v325 < v273)
                            v293 = v276 != 0;
                        }
                        while (v293);
                      }
                      v296 = v279;
                    }
                    else
                    {
                      v9 = v311;
                    }
                    if ((v344 & 4) != 0)
                    {
                      v294 = (void **)(v344 & 0xFFFFFFFFFFFFFFF8);
                      if ((v344 & 0xFFFFFFFFFFFFFFF8) != 0)
                      {
                        if (*v294 != v294 + 2)
                          free(*v294);
                        MEMORY[0x1CAA32FC0](v294, 0x1080C40ED926357);
                      }
                    }
                    break;
                  }
                }
              }
            }
            goto LABEL_370;
          }
          if ((*(_BYTE *)j & 4) == 0)
          {
            while ((*(_WORD *)(j + 44) & 8) != 0)
              j = *(_QWORD *)(j + 8);
          }
        }
      }
    }
    else
    {
      v6 = v338;
LABEL_370:
      v9 = v311;
    }
LABEL_373:
    ++*a4;
LABEL_374:
    v11 = v329;
  }
  while ((_QWORD *)v329 != v328);
}

uint64_t sub_1C484D414(uint64_t result, uint64_t *a2, unsigned __int16 *a3, unsigned __int16 *a4, int a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;

  if (a4 != a3)
  {
    v5 = *(_QWORD *)(result + 248);
    if (v5)
      v6 = (uint64_t *)(v5 + 8);
    else
      v6 = 0;
    v7 = *v6;
    v8 = v6[6];
    v9 = v6[7];
    do
    {
      v10 = v7 + 24 * *a3;
      v11 = *(unsigned int *)(v10 + 16);
      v12 = (v11 >> 3) & 0x1FFFFFFE;
      v13 = *(_WORD *)(v8 + v12) + (v11 & 0xF) * *a3;
      v14 = (_QWORD *)(v9 + 8 * *(unsigned __int16 *)(v10 + 20));
      v15 = *a2;
      v16 = (unsigned __int16 *)(v8 + 2 + v12);
      do
      {
        if (!*v14 || (*((_QWORD *)a3 + 1) & *v14) != 0)
        {
          v17 = 1 << v13;
          v18 = v13 >> 6;
          if (a5)
            v19 = *(_QWORD *)(v15 + 8 * v18) | v17;
          else
            v19 = *(_QWORD *)(v15 + 8 * v18) & ~v17;
          *(_QWORD *)(v15 + 8 * v18) = v19;
        }
        ++v14;
        v20 = *v16++;
        result = v20;
        v13 += v20;
      }
      while (v20);
      a3 += 8;
    }
    while (a3 != a4);
  }
  return result;
}

BOOL sub_1C484D4CC(unsigned int *a1)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;

  v1 = 0;
  v2 = *a1;
  if (*a1 == 7 && a1[4] == 64)
  {
    v1 = 0;
    if ((uint64_t)(a1[1] | ((unint64_t)a1[6] << 32)) < 0x2000)
    {
      v3 = ((v2 >> 8) & 0xFFF) > 8 || ((1 << SBYTE1(v2)) & 0x114) == 0;
      if (!v3
        && ((v2 & 0xFFF00) != 0x400 || **(unsigned __int16 **)(*((_QWORD *)a1 + 1) + 16) - 945 >= 0x6A))
      {
        return 1;
      }
    }
  }
  return v1;
}

_QWORD *sub_1C484D558(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;

  v4 = *a2;
  result = sub_1C484D700((uint64_t *)a1, *a2);
  v6 = result;
  v8 = v7;
  if (*(_DWORD *)(a1 + 196))
  {
    v9 = *(_DWORD *)(a1 + 192);
    v10 = *(_QWORD *)a1 + 20 * v9;
    v11 = *(_DWORD *)(v10 + 16);
    v12 = a2[2];
    *(_QWORD *)v10 = *(_QWORD *)a2;
    *(_DWORD *)(v10 + 8) = v12;
    *(_QWORD *)(v10 + 12) = -1;
    LODWORD(v10) = *(_DWORD *)(a1 + 196) - 1;
    *(_DWORD *)(a1 + 192) = v11;
    *(_DWORD *)(a1 + 196) = v10;
  }
  else
  {
    v13 = a2[2];
    v24 = *(_QWORD *)a2;
    v25 = v13;
    v26 = -1;
    v14 = *(unsigned int *)(a1 + 8);
    v15 = *(_QWORD *)a1;
    v16 = (char *)&v24;
    if (v14 >= *(_DWORD *)(a1 + 12))
    {
      v21 = v14 + 1;
      v22 = v15 + 20 * v14 > (unint64_t)&v24;
      if (v15 <= (unint64_t)&v24 && v22)
      {
        v23 = (char *)&v24 - v15;
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v21, 20);
        v15 = *(_QWORD *)a1;
        v16 = &v23[*(_QWORD *)a1];
      }
      else
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v21, 20);
        v15 = *(_QWORD *)a1;
        v16 = (char *)&v24;
      }
    }
    v17 = v15 + 20 * *(unsigned int *)(a1 + 8);
    v18 = *(_OWORD *)v16;
    *(_DWORD *)(v17 + 16) = *((_DWORD *)v16 + 4);
    *(_OWORD *)v17 = v18;
    v9 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v9 + 1;
  }
  if (v6 == (_QWORD *)a1 && v8 == 0xFFFFFFFFLL)
  {
    *(_WORD *)(*(_QWORD *)(a1 + 176) + 2 * v4) = v9;
    *(_DWORD *)(*(_QWORD *)a1 + 20 * v9 + 12) = v9;
  }
  else
  {
    v19 = *(_DWORD *)(*v6 + 20 * v8 + 12);
    v20 = *(_QWORD *)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 20 * v19 + 16) = v9;
    *(_DWORD *)(v20 + 20 * v8 + 12) = v9;
    *(_DWORD *)(v20 + 20 * v9 + 12) = v19;
  }
  return result;
}

uint64_t *sub_1C484D700(uint64_t *result, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  v2 = *(unsigned __int16 *)(result[22] + 2 * a2);
  v3 = *((_DWORD *)result + 2);
  if (v3 > v2)
  {
    v4 = *result;
    do
    {
      if (*(_DWORD *)(v4 + 20 * v2) == a2)
      {
        v5 = *(_DWORD *)(v4 + 20 * v2 + 12);
        if (v5 != -1 && *(_DWORD *)(v4 + 20 * v5 + 16) == -1)
          break;
      }
      v2 += 0x10000;
    }
    while (v2 < v3);
  }
  return result;
}

uint64_t sub_1C484D770(unsigned int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  __int16 v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  int v10;
  int v11;
  unsigned __int16 v12;
  _BOOL4 v13;
  unsigned int v14;
  int v15;
  BOOL v16;

  v3 = *(_DWORD *)(a3 + 16);
  v4 = a1 - v3;
  if (a1 >= v3)
  {
    v12 = 0;
    v9 = 0;
    v5 = v4 >> 13;
    v10 = v4 & 0x1FFF;
  }
  else
  {
    v5 = 0;
    v6 = *(unsigned int *)(*(_QWORD *)(a3 + 8) + 24 * a1 + 16);
    v7 = v6 & 0xF;
    v8 = (unsigned __int16 *)(*(_QWORD *)(a3 + 56) + ((v6 >> 3) & 0x1FFFFFFE));
    v11 = *v8;
    v9 = v8 + 1;
    v10 = v11;
    v12 = v11 + v7 * a1;
  }
  v13 = v5 != 0;
  if (a1 < v3)
    v13 = v9 != 0;
  if (!v13)
    return 0;
  v14 = 0;
  while (a1 < v3)
  {
    if (((*(_QWORD *)(a2 + 8 * (v12 >> 6)) >> v12) & 1) != 0)
      return 1;
    v15 = *v9++;
    v12 += v15;
    if (!v15)
      v9 = 0;
LABEL_15:
    v16 = v14 < v5;
    if (a1 < v3)
      v16 = v9 != 0;
    if (!v16)
      return 0;
  }
  if (((*(_QWORD *)(a2 + 8 * ((v14 + v10 + *(_DWORD *)(a3 + 44)) >> 6)) >> (v14
                                                                             + v10
                                                                             + *(_BYTE *)(a3 + 44))) & 1) == 0)
  {
    ++v14;
    goto LABEL_15;
  }
  return 1;
}

uint64_t sub_1C484D85C(uint64_t a1, int a2, unsigned int a3, char a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  int v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v31;
  BOOL v32;
  unsigned int v34;
  int v35;

  v7 = *(_QWORD *)(a1 + 248);
  v8 = *(_DWORD *)(v7 + 16);
  v9 = a3 - v8;
  if (a3 >= v8)
  {
    v14 = 0;
    v12 = 0;
    v10 = v9 >> 13;
    v35 = v9 & 0x1FFF;
  }
  else
  {
    v10 = 0;
    v11 = (unsigned __int16 *)(*(_QWORD *)(v7 + 56)
                             + (((unint64_t)*(unsigned int *)(*(_QWORD *)(v7 + 8) + 24 * a3 + 16) >> 3) & 0x1FFFFFFE));
    v13 = *v11;
    v12 = v11 + 1;
    v14 = v13 + (*(_DWORD *)(*(_QWORD *)(v7 + 8) + 24 * a3 + 16) & 0xF) * a3;
  }
  v15 = v10 != 0;
  if (a3 < v8)
    v15 = v12 != 0;
  if (v15)
  {
    v34 = v10;
    v16 = 0;
    v17 = (uint64_t *)(a1 + 944);
    while (1)
    {
      if (a3 >= v8)
      {
        v19 = v14;
        v18 = v16;
        v20 = v16 + v35 + *(_DWORD *)(v7 + 44);
      }
      else
      {
        v18 = v16;
        v19 = v14;
        v20 = (unsigned __int16)v14;
      }
      v21 = sub_1C484D700(v17, v20);
      v23 = v17 == v21 && v22 == -1;
      v24 = v23;
      if (v23)
        return v24 ^ 1u;
      v14 = v19;
      v16 = v18;
      v25 = v22;
      v26 = *v21;
      while (1)
      {
        v27 = v26 + 20 * v25;
        v28 = *(_DWORD *)(v27 + 4);
        if (v28 > a2)
          return 0;
        if ((a4 & 1) != 0)
        {
          if (v28 == a2)
            break;
          goto LABEL_27;
        }
        v29 = *(unsigned __int8 *)(v27 + 8);
        if (v28 == a2 && v29 == 0)
          break;
LABEL_27:
        v25 = *(unsigned int *)(v26 + 20 * v25 + 16);
        if (v17 == v21 && v25 == 0xFFFFFFFFLL)
          return 0;
      }
      if (a3 >= v8)
      {
        v16 = (v18 + 1);
      }
      else
      {
        v31 = *v12++;
        v14 = (v31 + v19);
        if (!v31)
          v12 = 0;
      }
      v32 = v16 < v34;
      if (a3 < v8)
        v32 = v12 != 0;
      if (!v32)
        return v24 ^ 1u;
    }
  }
  return 1;
}

uint64_t sub_1C484DA2C(_QWORD *a1, int a2, int a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  __int16 *v12;
  _WORD *v13;
  __int16 v14;
  _BOOL4 v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v40;
  int v42;
  uint64_t v43;
  unsigned int v44;
  _WORD *v45;
  unsigned int v46;
  unsigned __int16 v47;
  unsigned int v48;

  v4 = a4;
  v7 = a1[31];
  v8 = *(_DWORD *)(v7 + 16);
  v9 = a4 - v8;
  if (a4 >= v8)
  {
    v47 = 0;
    v13 = 0;
    v10 = v9 >> 13;
    v42 = v9 & 0x1FFF;
  }
  else
  {
    v10 = 0;
    v11 = *(unsigned int *)(*(_QWORD *)(v7 + 8) + 24 * a4 + 16);
    v12 = (__int16 *)(*(_QWORD *)(v7 + 56) + ((v11 >> 3) & 0x1FFFFFFE));
    v14 = *v12;
    v13 = v12 + 1;
    v47 = v14 + (v11 & 0xF) * a4;
  }
  v15 = v10 != 0;
  if (a4 < v8)
    v15 = v13 != 0;
  if (!v15)
    return 0xFFFFFFFFLL;
  v43 = a1[31];
  v16 = 0;
  v17 = a1 + 118;
  v18 = a1 + 143;
  v44 = a2 + 1;
  LODWORD(v19) = 0x7FFFFFFF;
  v40 = v10;
  v46 = v8;
  while (1)
  {
    v48 = v16;
    v45 = v13;
    if (v4 >= v8)
      v20 = v16 + v42 + *(_DWORD *)(v43 + 44);
    else
      v20 = v47;
    v21 = sub_1C484D700(v17, v20);
    v23 = v22;
    if (v17 != v21 || v22 != 0xFFFFFFFFLL)
    {
      v25 = v21;
      v26 = v22;
      do
      {
        v27 = *v25;
        v28 = *v25 + 20 * v23;
        v29 = *(_DWORD *)(v28 + 4);
        if (v29 <= a2)
        {
          v30 = v26 & 0xFFFFFFFF00000000 | *(unsigned int *)(v27 + 20 * v23 + 16);
          if (v29 < a3)
            sub_1C484FE48(v17, (uint64_t)v25, v26);
          v26 = v30;
        }
        else
        {
          if (!*(_BYTE *)(v28 + 8))
            goto LABEL_25;
          v26 = v26 & 0xFFFFFFFF00000000 | *(unsigned int *)(v27 + 20 * v23 + 16);
        }
        v23 = v26;
      }
      while (v17 != v25 || v26 != 0xFFFFFFFFLL);
    }
    v29 = 0x7FFFFFFF;
LABEL_25:
    v31 = v4 >= v46 ? v48 + v42 + *(_DWORD *)(v43 + 44) : v47;
    v33 = sub_1C484D700(v18, v31);
    v34 = v32;
    v35 = v32;
    if (v18 == v33 && v32 == 0xFFFFFFFFLL)
    {
LABEL_35:
      v36 = 0x7FFFFFFF;
    }
    else
    {
      while (1)
      {
        v36 = *(_DWORD *)(*v33 + 20 * v35 + 4);
        if (v36 > a2)
          break;
        v35 = *(unsigned int *)(*v33 + 20 * v35 + 16);
        if (v36 < a3)
          sub_1C484FE48(v18, (uint64_t)v33, v34);
        v34 = v35;
        if (v18 == v33 && (_DWORD)v35 == -1)
          goto LABEL_35;
      }
    }
    v4 = a4;
    v8 = v46;
    v13 = v45;
    v16 = v48;
    v37 = (int)v19 >= v36 ? v36 : v19;
    v19 = v36 <= v29 ? v37 : v19;
    if ((_DWORD)v19 == v44)
      break;
    if (a4 >= v46)
    {
      v16 = v48 + 1;
    }
    else
    {
      v13 = v45 + 1;
      v47 += *v45;
      if (!*v45)
        v13 = 0;
    }
    v38 = v16 < v40;
    if (a4 < v46)
      v38 = v13 != 0;
    if (!v38)
      goto LABEL_53;
  }
  v19 = v44;
LABEL_53:
  if ((_DWORD)v19 == 0x7FFFFFFF)
    return 0xFFFFFFFFLL;
  return v19;
}

uint64_t sub_1C484DD18(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;

  if ((a1 - 1) > 0x806)
    return a1;
  if (((byte_1C68704E6[(unint64_t)a1 >> 3] >> (a1 & 7)) & 1) == 0)
    return a1;
  v3 = (uint64_t *)(a2 + 8);
  result = llvm::MCRegisterInfo::getMatchingSuperReg((uint64_t *)(a2 + 8), a1, 1, (uint64_t)&off_1E7FB4248);
  if (!(_DWORD)result)
  {
    result = llvm::MCRegisterInfo::getMatchingSuperReg(v3, a1, 2, (uint64_t)&off_1E7FB4248);
    if (!(_DWORD)result)
      return a1;
  }
  return result;
}

uint64_t sub_1C484DDAC(unsigned int *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  _DWORD *v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  unsigned int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned int *v45;
  void *v47;
  uint64_t v48;
  uint64_t v49[4];
  _QWORD **v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (a1[v6 + 2] == *(_DWORD *)a2)
      {
        a1[v6 + 4] = *((_DWORD *)a2 + 2);
        v19 = a2[2];
        v20 = v19 & 0xFFFFFFFFFFFFFFF8;
        v21 = v19 & 0xFFFFFFFFFFFFFFF8;
        if ((v19 & 4) != 0)
          v21 = **(_QWORD **)v20;
        v22 = -v5;
        v23 = *(_QWORD *)(v21 + 8);
        v24 = &a1[v6];
        v25 = *(_QWORD *)&a1[v6 + 6];
        v26 = v25 & 0xFFFFFFFFFFFFFFF8;
        v27 = v25 & 0xFFFFFFFFFFFFFFF8;
        if ((v25 & 4) != 0)
          v27 = **(_QWORD **)v26;
        if (v23 != *(_QWORD *)(v27 + 8))
        {
          if ((v19 & 4) != 0)
            v20 = **(_QWORD **)v20;
          if (v25 <= 7)
          {
            *((_QWORD *)v24 + 3) = v20 & 0xFFFFFFFFFFFFFFFBLL;
          }
          else
          {
            if ((v25 & 4) == 0)
            {
              v28 = operator new();
              *(_QWORD *)v28 = v28 + 16;
              *(_QWORD *)(v28 + 8) = 0x400000000;
              *((_QWORD *)v24 + 3) = v28 | 4;
              v29 = v28 & 0xFFFFFFFFFFFFFFF8;
              v30 = *(unsigned int *)((v28 & 0xFFFFFFFFFFFFFFF8) + 8);
              if (v30 >= *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v28 & 0xFFFFFFFFFFFFFFF8, v29 + 16, v30 + 1, 8);
                LODWORD(v30) = *(_DWORD *)(v29 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v29 + 8 * v30) = v26;
              ++*(_DWORD *)(v29 + 8);
              v26 = *((_QWORD *)v24 + 3) & 0xFFFFFFFFFFFFFFF8;
            }
            v31 = *(unsigned int *)(v26 + 8);
            if (v31 >= *(_DWORD *)(v26 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v26, v26 + 16, v31 + 1, 8);
              LODWORD(v31) = *(_DWORD *)(v26 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v26 + 8 * v31) = v20;
            ++*(_DWORD *)(v26 + 8);
            LODWORD(v4) = *a1;
          }
        }
        if ((int)v4 - 1 > v22)
        {
          do
          {
            v32 = &a1[v6];
            if ((int)a1[v6 + 4] <= (int)a1[v6 + 10])
              break;
            v34 = *((_QWORD *)v32 + 3);
            v33 = v32 + 6;
            v47 = (void *)*((_QWORD *)v33 - 2);
            LODWORD(v48) = *(v33 - 2);
            v49[0] = v34;
            *(_QWORD *)v33 = 0;
            *((_QWORD *)v33 - 2) = *((_QWORD *)v33 + 1);
            *(v33 - 2) = v33[4];
            sub_1C484FAD8((uint64_t *)v33, (uint64_t *)v33 + 3);
            *((_QWORD *)v33 + 1) = v47;
            v33[4] = v48;
            sub_1C484FAD8((uint64_t *)v33 + 3, v49);
            if ((v49[0] & 4) != 0)
            {
              v35 = (void **)(v49[0] & 0xFFFFFFFFFFFFFFF8);
              if ((v49[0] & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                if (*v35 != v35 + 2)
                  free(*v35);
                MEMORY[0x1CAA32FC0](v35, 0x1080C40ED926357);
              }
            }
            ++v22;
            v6 += 6;
          }
          while (v22 < *a1 - 1);
        }
        return 1;
      }
      v6 += 6;
      --v5;
    }
    while (6 * v4 != v6);
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v47 = v49;
    v48 = 0x800000000;
    v51 = 0;
    v52 = 0;
    v50 = &v51;
    v10 = a1 + 3;
    while (*(v10 - 1) != *((_DWORD *)a2 + 1))
    {
      if (*v10 == *(_DWORD *)a2)
        ++v8;
      if (v8 == 2)
        break;
      v11 = v10 + 6;
      sub_1C484FF44((uint64_t)&v47, v10);
      v12 = v52;
      v13 = v48;
      if (v52)
        v14 = v52;
      else
        v14 = v48;
      if (v14 == 7)
        v9 = v7;
      ++v7;
      v10 = v11;
      if (v4 == v7)
        goto LABEL_18;
    }
    goto LABEL_73;
  }
  v13 = 0;
  v12 = 0;
  v9 = 0;
  v47 = v49;
  v48 = 0x800000000;
  v51 = 0;
  v52 = 0;
  v50 = &v51;
LABEL_18:
  if (v12)
    v15 = v12;
  else
    v15 = v13;
  if (v15 < 8)
  {
LABEL_22:
    v9 = *a1;
    if (*a1)
      goto LABEL_23;
    goto LABEL_68;
  }
  if (v12)
  {
    v37 = v51;
    if (v51)
    {
      v38 = *((_DWORD *)a2 + 1);
      do
      {
        v39 = *((_DWORD *)v37 + 7);
        if (v38 >= v39)
        {
          if (v39 >= v38)
            goto LABEL_22;
          ++v37;
        }
        v37 = (_QWORD *)*v37;
      }
      while (v37);
    }
  }
  else if (v13)
  {
    v40 = v47;
    v41 = 4 * v13;
    while (*v40 != *((_DWORD *)a2 + 1))
    {
      ++v40;
      v41 -= 4;
      if (!v41)
        goto LABEL_66;
    }
    if (v41)
      goto LABEL_22;
  }
LABEL_66:
  if (*((_DWORD *)a2 + 2) < (signed int)a1[6 * v9 + 4])
  {
    *a1 = v9;
    if (v9)
    {
LABEL_23:
      v16 = 0;
      v17 = (int *)(a1 + 4);
      while (1)
      {
        v18 = *v17;
        v17 += 6;
        if (*((_DWORD *)a2 + 2) < v18)
          goto LABEL_69;
        if (v9 == ++v16)
        {
          LODWORD(v16) = v9;
          goto LABEL_69;
        }
      }
    }
LABEL_68:
    LODWORD(v16) = 0;
LABEL_69:
    if (v9 > v16)
    {
      v42 = (uint64_t *)&a1[6 * v9 + 6];
      v43 = (uint64_t *)&a1[6 * v9];
      do
      {
        *(v42 - 2) = *(v43 - 2);
        *((_DWORD *)v42 - 2) = *((_DWORD *)v43 - 2);
        sub_1C484FAD8(v42, v43);
        v42 -= 3;
        v43 -= 3;
        --v9;
      }
      while (v16 < v9);
    }
    v44 = *a2;
    v45 = &a1[6 * v16];
    v45[4] = *((_DWORD *)a2 + 2);
    *((_QWORD *)v45 + 1) = v44;
    sub_1C484E2BC((unint64_t *)v45 + 3, (unint64_t *)a2 + 2);
    ++*a1;
LABEL_73:
    v36 = 1;
    goto LABEL_74;
  }
  v36 = 0;
LABEL_74:
  sub_1C47655E8((uint64_t)&v50, v51);
  if (v47 != v49)
    free(v47);
  return v36;
}

unint64_t *sub_1C484E2BC(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;

  if (a1 == a2)
    return a1;
  v4 = *a2;
  if (*a2 < 8)
    goto LABEL_3;
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0 && v5)
  {
    v6 = *(_DWORD *)(v5 + 8);
    if (!v6)
    {
LABEL_3:
      if ((*a1 & 4) != 0)
      {
        v8 = *a1 & 0xFFFFFFFFFFFFFFF8;
        if (v8)
          *(_DWORD *)(v8 + 8) = 0;
      }
      else
      {
        *a1 = 0;
      }
      return a1;
    }
    v7 = *a1;
    if ((*a1 & 4) != 0)
    {
LABEL_22:
      v11 = v7 & 0xFFFFFFFFFFFFFFF8;
      if (v5 == (v7 & 0xFFFFFFFFFFFFFFF8))
        return a1;
      v12 = *(unsigned int *)(v5 + 8);
      v13 = *(unsigned int *)(v11 + 8);
      if (v13 >= v12)
      {
        if ((_DWORD)v12)
          memmove(*(void **)v11, *(const void **)v5, 8 * v12);
        goto LABEL_38;
      }
      if (*(_DWORD *)(v11 + 12) < v12)
      {
        *(_DWORD *)(v11 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v7 & 0xFFFFFFFFFFFFFFF8, v11 + 16, v12, 8);
      }
      else if ((_DWORD)v13)
      {
        memmove(*(void **)v11, *(const void **)v5, 8 * v13);
LABEL_27:
        v14 = *(unsigned int *)(v5 + 8);
        if (v13 != v14)
          memcpy((void *)(*(_QWORD *)v11 + 8 * v13), (const void *)(*(_QWORD *)v5 + 8 * v13), *(_QWORD *)v5 + 8 * v14 - (*(_QWORD *)v5 + 8 * v13));
LABEL_38:
        *(_DWORD *)(v11 + 8) = v12;
        return a1;
      }
      v13 = 0;
      goto LABEL_27;
    }
    goto LABEL_15;
  }
  v7 = *a1;
  if ((*a1 & 4) == 0)
  {
    if ((v4 & 4) == 0)
    {
LABEL_17:
      *a1 = v5;
      return a1;
    }
    v6 = *(_DWORD *)(v5 + 8);
LABEL_15:
    if (v6 == 1)
    {
      v5 = **(_QWORD **)v5 & 0xFFFFFFFFFFFFFFFBLL;
      goto LABEL_17;
    }
    v15 = (_QWORD *)operator new();
    v16 = (unint64_t)v15;
    v17 = *a2 & 0xFFFFFFFFFFFFFFF8;
    v18 = v15 + 2;
    *v15 = v15 + 2;
    v15[1] = 0x400000000;
    if (v15 == (_QWORD *)v17 || (v19 = *(_DWORD *)(v17 + 8)) == 0)
    {
LABEL_35:
      *a1 = v16 | 4;
      return a1;
    }
    if (v19 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v15, (uint64_t)(v15 + 2), *(unsigned int *)(v17 + 8), 8);
      v20 = *(_DWORD *)(v17 + 8);
      if (!v20)
        goto LABEL_34;
      v18 = *(void **)v16;
    }
    else
    {
      v20 = *(_DWORD *)(v17 + 8);
    }
    memcpy(v18, *(const void **)v17, 8 * v20);
LABEL_34:
    *(_DWORD *)(v16 + 8) = v19;
    goto LABEL_35;
  }
  if ((v4 & 4) != 0)
    goto LABEL_22;
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
  if (*(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 12))
  {
    v10 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7 & 0xFFFFFFFFFFFFFFF8, v9 + 16, 1uLL, 8);
    v10 = *(unsigned int *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v5;
  ++*(_DWORD *)(v9 + 8);
  return a1;
}

uint64_t sub_1C484E4F8(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  void **v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void **v28;
  int v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  void **v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  void **v45;
  int v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  void **v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  void **v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void **v101;
  void **v102;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  void **v111;
  uint64_t *v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;

  v6 = result;
LABEL_2:
  v112 = (uint64_t *)(a2 - 24);
  v7 = v6;
  while (2)
  {
    v6 = v7;
    v8 = a2 - v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v7) >> 3);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(_DWORD *)(a2 - 16) < *(_DWORD *)(v7 + 8))
        {
          v51 = *(_QWORD *)v7;
          v122 = *(_DWORD *)(v7 + 8);
          v121 = v51;
          v123 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 16) = 0;
          v52 = *(_QWORD *)(a2 - 24);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 - 16);
          *(_QWORD *)v7 = v52;
          sub_1C484FAD8((uint64_t *)(v7 + 16), (uint64_t *)(a2 - 8));
          v53 = v122;
          *(_QWORD *)(a2 - 24) = v121;
          *(_DWORD *)(a2 - 16) = v53;
          result = (uint64_t)sub_1C484FAD8((uint64_t *)(a2 - 8), &v123);
          if ((v123 & 4) != 0)
          {
            v54 = (void **)(v123 & 0xFFFFFFFFFFFFFFF8);
            if ((v123 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if (*v54 != v54 + 2)
                free(*v54);
              return MEMORY[0x1CAA32FC0](v54, 0x1080C40ED926357);
            }
          }
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_1C484F500((uint64_t *)v7, (uint64_t *)(v7 + 24), v112);
      case 4uLL:
        return (uint64_t)sub_1C484FBEC(v7, v7 + 24, v7 + 48, v112);
      case 5uLL:
        return (uint64_t)sub_1C484F1F0(v7, v7 + 24, v7 + 48, v7 + 72, v112);
      default:
        if (v8 > 575)
        {
          if (!a3)
          {
            if (v7 != a2)
            {
              v66 = (v9 - 2) >> 1;
              v67 = v66;
              do
              {
                v68 = v67;
                if (v66 >= v67)
                {
                  v69 = (2 * v67) | 1;
                  v70 = v6 + 24 * v69;
                  if (2 * v68 + 2 < (uint64_t)v9)
                  {
                    v71 = *(_DWORD *)(v6 + 24 * v69 + 8);
                    v72 = *(_DWORD *)(v70 + 32);
                    v70 += 24 * (v71 < v72);
                    if (v71 < v72)
                      v69 = 2 * v68 + 2;
                  }
                  if (*(_DWORD *)(v70 + 8) >= *(_DWORD *)(v6 + 24 * v68 + 8))
                  {
                    v73 = v6 + 24 * v68;
                    v74 = *(_QWORD *)v73;
                    v122 = *(_DWORD *)(v73 + 8);
                    v121 = v74;
                    v123 = *(_QWORD *)(v73 + 16);
                    *(_QWORD *)(v73 + 16) = 0;
                    v75 = v122;
                    do
                    {
                      v76 = v70;
                      v77 = *(_QWORD *)v70;
                      *(_DWORD *)(v73 + 8) = *(_DWORD *)(v76 + 8);
                      *(_QWORD *)v73 = v77;
                      sub_1C484FAD8((uint64_t *)(v73 + 16), (uint64_t *)(v76 + 16));
                      if (v66 < v69)
                        break;
                      v78 = (2 * v69) | 1;
                      v70 = v6 + 24 * v78;
                      if (2 * v69 + 2 < (uint64_t)v9)
                      {
                        v79 = *(_DWORD *)(v6 + 24 * v78 + 8);
                        v80 = *(_DWORD *)(v70 + 32);
                        v70 += 24 * (v79 < v80);
                        if (v79 < v80)
                          v78 = 2 * v69 + 2;
                      }
                      v73 = v76;
                      v69 = v78;
                    }
                    while (*(_DWORD *)(v70 + 8) >= v75);
                    v81 = v121;
                    *(_DWORD *)(v76 + 8) = v122;
                    *(_QWORD *)v76 = v81;
                    sub_1C484FAD8((uint64_t *)(v76 + 16), &v123);
                    if ((v123 & 4) != 0)
                    {
                      v82 = (void **)(v123 & 0xFFFFFFFFFFFFFFF8);
                      if ((v123 & 0xFFFFFFFFFFFFFFF8) != 0)
                      {
                        if (*v82 != v82 + 2)
                          free(*v82);
                        MEMORY[0x1CAA32FC0](v82, 0x1080C40ED926357);
                      }
                    }
                  }
                }
                v67 = v68 - 1;
              }
              while (v68);
              do
              {
                v83 = 0;
                v84 = a2;
                v119 = *(_DWORD *)(v6 + 8);
                v116 = *(_QWORD *)v6;
                v120 = *(_QWORD *)(v6 + 16);
                *(_QWORD *)(v6 + 16) = 0;
                v85 = v6;
                do
                {
                  v86 = v83 + 1;
                  v87 = v85 + 24 * (v83 + 1);
                  v88 = (2 * v83) | 1;
                  v89 = 2 * v83 + 2;
                  if (v89 < (uint64_t)v9)
                  {
                    v90 = *(_DWORD *)(v85 + 24 * v86 + 8);
                    v91 = *(_DWORD *)(v87 + 32);
                    v87 += 24 * (v90 < v91);
                    if (v90 < v91)
                      v88 = v89;
                  }
                  v92 = *(_QWORD *)v87;
                  *(_DWORD *)(v85 + 8) = *(_DWORD *)(v87 + 8);
                  *(_QWORD *)v85 = v92;
                  sub_1C484FAD8((uint64_t *)(v85 + 16), (uint64_t *)(v87 + 16));
                  v85 = v87;
                  v83 = v88;
                }
                while (v88 <= (uint64_t)((v9 - 2) >> 1));
                a2 -= 24;
                if (v87 == v84 - 24)
                {
                  *(_DWORD *)(v87 + 8) = v119;
                  *(_QWORD *)v87 = v116;
                  result = (uint64_t)sub_1C484FAD8((uint64_t *)(v87 + 16), &v120);
                }
                else
                {
                  v93 = *(_QWORD *)a2;
                  *(_DWORD *)(v87 + 8) = *(_DWORD *)(v84 - 16);
                  *(_QWORD *)v87 = v93;
                  v94 = (uint64_t *)(v84 - 8);
                  sub_1C484FAD8((uint64_t *)(v87 + 16), v94);
                  *(_QWORD *)a2 = v116;
                  *(_DWORD *)(a2 + 8) = v119;
                  result = (uint64_t)sub_1C484FAD8(v94, &v120);
                  v95 = v87 - v6 + 24;
                  if (v95 >= 25)
                  {
                    v96 = (v95 / 0x18uLL - 2) >> 1;
                    if (*(_DWORD *)(v6 + 24 * v96 + 8) < *(_DWORD *)(v87 + 8))
                    {
                      v97 = *(_QWORD *)v87;
                      v122 = *(_DWORD *)(v87 + 8);
                      v121 = v97;
                      v123 = *(_QWORD *)(v87 + 16);
                      *(_QWORD *)(v87 + 16) = 0;
                      do
                      {
                        v98 = v87;
                        v87 = v6 + 24 * v96;
                        v99 = *(_QWORD *)v87;
                        *(_DWORD *)(v98 + 8) = *(_DWORD *)(v87 + 8);
                        *(_QWORD *)v98 = v99;
                        sub_1C484FAD8((uint64_t *)(v98 + 16), (uint64_t *)(v87 + 16));
                        if (!v96)
                          break;
                        v96 = (v96 - 1) >> 1;
                      }
                      while (*(_DWORD *)(v6 + 24 * v96 + 8) < v122);
                      v100 = v121;
                      *(_DWORD *)(v87 + 8) = v122;
                      *(_QWORD *)v87 = v100;
                      result = (uint64_t)sub_1C484FAD8((uint64_t *)(v87 + 16), &v123);
                      if ((v123 & 4) != 0)
                      {
                        v101 = (void **)(v123 & 0xFFFFFFFFFFFFFFF8);
                        if ((v123 & 0xFFFFFFFFFFFFFFF8) != 0)
                        {
                          if (*v101 != v101 + 2)
                            free(*v101);
                          result = MEMORY[0x1CAA32FC0](v101, 0x1080C40ED926357);
                        }
                      }
                    }
                  }
                }
                if ((v120 & 4) != 0)
                {
                  v102 = (void **)(v120 & 0xFFFFFFFFFFFFFFF8);
                  if ((v120 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    if (*v102 != v102 + 2)
                      free(*v102);
                    result = MEMORY[0x1CAA32FC0](v102, 0x1080C40ED926357);
                  }
                }
              }
              while ((uint64_t)v9-- > 2);
            }
            return result;
          }
          v10 = v7 + 24 * (v9 >> 1);
          if ((unint64_t)v8 < 0xC01)
          {
            sub_1C484F500((uint64_t *)(v7 + 24 * (v9 >> 1)), (uint64_t *)v7, v112);
          }
          else
          {
            sub_1C484F500((uint64_t *)v7, (uint64_t *)(v7 + 24 * (v9 >> 1)), v112);
            v11 = (uint64_t *)(v7 + 24 * (v9 >> 1) - 24);
            sub_1C484F500((uint64_t *)(v6 + 24), v11, (uint64_t *)(a2 - 48));
            sub_1C484F500((uint64_t *)(v6 + 48), (uint64_t *)(v6 + 24 + 24 * (v9 >> 1)), (uint64_t *)(a2 - 72));
            sub_1C484F500(v11, (uint64_t *)(v6 + 24 * (v9 >> 1)), (uint64_t *)(v6 + 24 + 24 * (v9 >> 1)));
            v12 = *(_QWORD *)v6;
            v122 = *(_DWORD *)(v6 + 8);
            v121 = v12;
            v123 = *(_QWORD *)(v6 + 16);
            *(_QWORD *)(v6 + 16) = 0;
            LODWORD(v12) = *(_DWORD *)(v10 + 8);
            *(_QWORD *)v6 = *(_QWORD *)v10;
            *(_DWORD *)(v6 + 8) = v12;
            sub_1C484FAD8((uint64_t *)(v6 + 16), (uint64_t *)(v6 + 16 + 24 * (v9 >> 1)));
            v13 = v122;
            *(_QWORD *)v10 = v121;
            *(_DWORD *)(v10 + 8) = v13;
            sub_1C484FAD8((uint64_t *)(v6 + 16 + 24 * (v9 >> 1)), &v123);
            if ((v123 & 4) != 0)
            {
              v14 = (void **)(v123 & 0xFFFFFFFFFFFFFFF8);
              if ((v123 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                if (*v14 != v14 + 2)
                  free(*v14);
                MEMORY[0x1CAA32FC0](v14, 0x1080C40ED926357);
              }
            }
          }
          --a3;
          if ((a4 & 1) == 0 && *(_DWORD *)(v6 - 16) >= *(_DWORD *)(v6 + 8))
          {
            v118 = *(_DWORD *)(v6 + 8);
            v115 = *(_QWORD *)v6;
            v120 = *(_QWORD *)(v6 + 16);
            *(_QWORD *)(v6 + 16) = 0;
            if (v118 >= *(_DWORD *)(a2 - 16))
            {
              v37 = v6 + 24;
              do
              {
                v7 = v37;
                if (v37 >= a2)
                  break;
                v38 = *(_DWORD *)(v37 + 8);
                v37 += 24;
              }
              while (v118 >= v38);
            }
            else
            {
              v35 = v6;
              do
              {
                v7 = v35 + 24;
                v36 = *(_DWORD *)(v35 + 32);
                v35 += 24;
              }
              while (v118 >= v36);
            }
            v39 = a2;
            if (v7 < a2)
            {
              v40 = a2;
              do
              {
                v39 = v40 - 24;
                v41 = *(_DWORD *)(v40 - 16);
                v40 -= 24;
              }
              while (v118 < v41);
            }
            while (v7 < v39)
            {
              v42 = *(_QWORD *)v7;
              v122 = *(_DWORD *)(v7 + 8);
              v121 = v42;
              v123 = *(_QWORD *)(v7 + 16);
              *(_QWORD *)(v7 + 16) = 0;
              v43 = *(_QWORD *)v39;
              *(_DWORD *)(v7 + 8) = *(_DWORD *)(v39 + 8);
              *(_QWORD *)v7 = v43;
              sub_1C484FAD8((uint64_t *)(v7 + 16), (uint64_t *)(v39 + 16));
              v44 = v122;
              *(_QWORD *)v39 = v121;
              *(_DWORD *)(v39 + 8) = v44;
              sub_1C484FAD8((uint64_t *)(v39 + 16), &v123);
              if ((v123 & 4) != 0)
              {
                v45 = (void **)(v123 & 0xFFFFFFFFFFFFFFF8);
                if ((v123 & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  if (*v45 != v45 + 2)
                    free(*v45);
                  MEMORY[0x1CAA32FC0](v45, 0x1080C40ED926357);
                }
              }
              do
              {
                v46 = *(_DWORD *)(v7 + 32);
                v7 += 24;
              }
              while (v118 >= v46);
              do
              {
                v47 = *(_DWORD *)(v39 - 16);
                v39 -= 24;
              }
              while (v118 < v47);
            }
            v48 = (uint64_t *)(v7 - 24);
            if (v7 - 24 != v6)
            {
              v49 = *v48;
              *(_DWORD *)(v6 + 8) = *(_DWORD *)(v7 - 16);
              *(_QWORD *)v6 = v49;
              sub_1C484FAD8((uint64_t *)(v6 + 16), (uint64_t *)(v7 - 8));
            }
            *(_DWORD *)(v7 - 16) = v118;
            *v48 = v115;
            result = (uint64_t)sub_1C484FAD8((uint64_t *)(v7 - 8), &v120);
            if ((v120 & 4) != 0)
            {
              v50 = (void **)(v120 & 0xFFFFFFFFFFFFFFF8);
              if ((v120 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                if (*v50 != v50 + 2)
                  free(*v50);
                result = MEMORY[0x1CAA32FC0](v50, 0x1080C40ED926357);
              }
            }
            goto LABEL_44;
          }
          v15 = 0;
          v16 = *(_DWORD *)(v6 + 8);
          v117 = v16;
          v114 = *(_QWORD *)v6;
          v120 = *(_QWORD *)(v6 + 16);
          *(_QWORD *)(v6 + 16) = 0;
          do
          {
            v17 = *(_DWORD *)(v6 + v15 + 32);
            v15 += 24;
          }
          while (v17 < v16);
          v18 = v6 + v15;
          v19 = a2;
          if (v15 == 24)
          {
            v22 = a2;
            while (v18 < v22)
            {
              v20 = v22 - 24;
              v23 = *(_DWORD *)(v22 - 16);
              v22 -= 24;
              if (v23 < v16)
                goto LABEL_25;
            }
            v20 = v22;
          }
          else
          {
            do
            {
              v20 = v19 - 24;
              v21 = *(_DWORD *)(v19 - 16);
              v19 -= 24;
            }
            while (v21 >= v16);
          }
LABEL_25:
          v7 = v18;
          if (v18 < v20)
          {
            v24 = v20;
            do
            {
              v25 = *(_QWORD *)v7;
              v122 = *(_DWORD *)(v7 + 8);
              v121 = v25;
              v123 = *(_QWORD *)(v7 + 16);
              *(_QWORD *)(v7 + 16) = 0;
              v26 = *(_QWORD *)v24;
              *(_DWORD *)(v7 + 8) = *(_DWORD *)(v24 + 8);
              *(_QWORD *)v7 = v26;
              sub_1C484FAD8((uint64_t *)(v7 + 16), (uint64_t *)(v24 + 16));
              v27 = v122;
              *(_QWORD *)v24 = v121;
              *(_DWORD *)(v24 + 8) = v27;
              sub_1C484FAD8((uint64_t *)(v24 + 16), &v123);
              if ((v123 & 4) != 0)
              {
                v28 = (void **)(v123 & 0xFFFFFFFFFFFFFFF8);
                if ((v123 & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  if (*v28 != v28 + 2)
                    free(*v28);
                  MEMORY[0x1CAA32FC0](v28, 0x1080C40ED926357);
                }
              }
              do
              {
                v29 = *(_DWORD *)(v7 + 32);
                v7 += 24;
              }
              while (v29 < v117);
              do
              {
                v30 = *(_DWORD *)(v24 - 16);
                v24 -= 24;
              }
              while (v30 >= v117);
            }
            while (v7 < v24);
          }
          v31 = (uint64_t *)(v7 - 24);
          if (v7 - 24 != v6)
          {
            v32 = *v31;
            *(_DWORD *)(v6 + 8) = *(_DWORD *)(v7 - 16);
            *(_QWORD *)v6 = v32;
            sub_1C484FAD8((uint64_t *)(v6 + 16), (uint64_t *)(v7 - 8));
          }
          *(_DWORD *)(v7 - 16) = v117;
          *v31 = v114;
          sub_1C484FAD8((uint64_t *)(v7 - 8), &v120);
          if ((v120 & 4) != 0)
          {
            v33 = (void **)(v120 & 0xFFFFFFFFFFFFFFF8);
            if ((v120 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if (*v33 != v33 + 2)
                free(*v33);
              MEMORY[0x1CAA32FC0](v33, 0x1080C40ED926357);
            }
          }
          if (v18 < v20)
            goto LABEL_43;
          v34 = sub_1C484F81C(v6, v7 - 24);
          result = sub_1C484F81C(v7, a2);
          if (!(_DWORD)result)
          {
            if (v34)
              continue;
LABEL_43:
            result = sub_1C484E4F8(v6, v7 - 24, a3, a4 & 1);
LABEL_44:
            a4 = 0;
            continue;
          }
          a2 = v7 - 24;
          if (v34)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if (v7 != a2)
          {
            v55 = (_QWORD *)(v7 + 24);
            if (v7 + 24 != a2)
            {
              v56 = 0;
              v57 = v7;
              do
              {
                v58 = v55;
                if (*(_DWORD *)(v57 + 32) < *(_DWORD *)(v57 + 8))
                {
                  v59 = *v55;
                  v122 = *((_DWORD *)v58 + 2);
                  v121 = v59;
                  v123 = *(_QWORD *)(v57 + 40);
                  *(_QWORD *)(v57 + 40) = 0;
                  v60 = v56;
                  while (1)
                  {
                    v61 = v7 + v60;
                    *(_QWORD *)(v61 + 24) = *(_QWORD *)(v7 + v60);
                    *(_DWORD *)(v61 + 32) = *(_DWORD *)(v7 + v60 + 8);
                    v62 = (uint64_t *)(v7 + v60 + 16);
                    sub_1C484FAD8((uint64_t *)(v7 + v60 + 40), v62);
                    if (!v60)
                      break;
                    v60 -= 24;
                    if (v122 >= *(_DWORD *)(v61 - 16))
                    {
                      v63 = v7 + v60 + 24;
                      goto LABEL_96;
                    }
                  }
                  v63 = v7;
LABEL_96:
                  v64 = v121;
                  *(_DWORD *)(v63 + 8) = v122;
                  *(_QWORD *)v63 = v64;
                  result = (uint64_t)sub_1C484FAD8(v62, &v123);
                  if ((v123 & 4) != 0)
                  {
                    v65 = (void **)(v123 & 0xFFFFFFFFFFFFFFF8);
                    if ((v123 & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      if (*v65 != v65 + 2)
                        free(*v65);
                      result = MEMORY[0x1CAA32FC0](v65, 0x1080C40ED926357);
                    }
                  }
                }
                v55 = v58 + 3;
                v56 += 24;
                v57 = (unint64_t)v58;
              }
              while (v58 + 3 != (_QWORD *)a2);
            }
          }
        }
        else if (v7 != a2)
        {
          v104 = (_QWORD *)(v7 + 24);
          if (v7 + 24 != a2)
          {
            v105 = v7 + 16;
            do
            {
              v106 = v104;
              if (*(_DWORD *)(v6 + 32) < *(_DWORD *)(v6 + 8))
              {
                v107 = *v104;
                v122 = *((_DWORD *)v106 + 2);
                v121 = v107;
                v123 = *(_QWORD *)(v6 + 40);
                *(_QWORD *)(v6 + 40) = 0;
                v108 = v105;
                do
                {
                  *(_QWORD *)(v108 + 8) = *(_QWORD *)(v108 - 16);
                  *(_DWORD *)(v108 + 16) = *(_DWORD *)(v108 - 8);
                  sub_1C484FAD8((uint64_t *)(v108 + 24), (uint64_t *)v108);
                  v109 = *(_DWORD *)(v108 - 32);
                  v108 -= 24;
                }
                while (v122 < v109);
                v110 = v121;
                *(_DWORD *)(v108 + 16) = v122;
                *(_QWORD *)(v108 + 8) = v110;
                result = (uint64_t)sub_1C484FAD8((uint64_t *)(v108 + 24), &v123);
                if ((v123 & 4) != 0)
                {
                  v111 = (void **)(v123 & 0xFFFFFFFFFFFFFFF8);
                  if ((v123 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    if (*v111 != v111 + 2)
                      free(*v111);
                    result = MEMORY[0x1CAA32FC0](v111, 0x1080C40ED926357);
                  }
                }
              }
              v104 = v106 + 3;
              v105 += 24;
              v6 = (uint64_t)v106;
            }
            while (v106 + 3 != (_QWORD *)a2);
          }
        }
        return result;
    }
  }
}

uint64_t *sub_1C484F1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;

  result = sub_1C484FBEC(a1, a2, a3, (uint64_t *)a4);
  if (*((_DWORD *)a5 + 2) < *(_DWORD *)(a4 + 8))
  {
    v19 = *(_QWORD *)a4;
    v23 = *(_DWORD *)(a4 + 8);
    v27 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = 0;
    v11 = *a5;
    *(_DWORD *)(a4 + 8) = *((_DWORD *)a5 + 2);
    *(_QWORD *)a4 = v11;
    sub_1C484FAD8((uint64_t *)(a4 + 16), a5 + 2);
    *a5 = v19;
    *((_DWORD *)a5 + 2) = v23;
    result = sub_1C484FAD8(a5 + 2, &v27);
    if ((v27 & 4) != 0)
    {
      v12 = (void **)(v27 & 0xFFFFFFFFFFFFFFF8);
      if ((v27 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if (*v12 != v12 + 2)
          free(*v12);
        result = (uint64_t *)MEMORY[0x1CAA32FC0](v12, 0x1080C40ED926357);
      }
    }
    if (*(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
    {
      v20 = *(_QWORD *)a3;
      v24 = *(_DWORD *)(a3 + 8);
      v27 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = 0;
      v13 = *(_QWORD *)a4;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_QWORD *)a3 = v13;
      sub_1C484FAD8((uint64_t *)(a3 + 16), (uint64_t *)(a4 + 16));
      *(_QWORD *)a4 = v20;
      *(_DWORD *)(a4 + 8) = v24;
      result = sub_1C484FAD8((uint64_t *)(a4 + 16), &v27);
      if ((v27 & 4) != 0)
      {
        v14 = (void **)(v27 & 0xFFFFFFFFFFFFFFF8);
        if ((v27 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*v14 != v14 + 2)
            free(*v14);
          result = (uint64_t *)MEMORY[0x1CAA32FC0](v14, 0x1080C40ED926357);
        }
      }
      if (*(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
      {
        v21 = *(_QWORD *)a2;
        v25 = *(_DWORD *)(a2 + 8);
        v27 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = 0;
        v15 = *(_QWORD *)a3;
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_QWORD *)a2 = v15;
        sub_1C484FAD8((uint64_t *)(a2 + 16), (uint64_t *)(a3 + 16));
        *(_QWORD *)a3 = v21;
        *(_DWORD *)(a3 + 8) = v25;
        result = sub_1C484FAD8((uint64_t *)(a3 + 16), &v27);
        if ((v27 & 4) != 0)
        {
          v16 = (void **)(v27 & 0xFFFFFFFFFFFFFFF8);
          if ((v27 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if (*v16 != v16 + 2)
              free(*v16);
            result = (uint64_t *)MEMORY[0x1CAA32FC0](v16, 0x1080C40ED926357);
          }
        }
        if (*(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
        {
          v22 = *(_QWORD *)a1;
          v26 = *(_DWORD *)(a1 + 8);
          v27 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = 0;
          v17 = *(_QWORD *)a2;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_QWORD *)a1 = v17;
          sub_1C484FAD8((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
          *(_QWORD *)a2 = v22;
          *(_DWORD *)(a2 + 8) = v26;
          result = sub_1C484FAD8((uint64_t *)(a2 + 16), &v27);
          if ((v27 & 4) != 0)
          {
            v18 = (void **)(v27 & 0xFFFFFFFFFFFFFFF8);
            if ((v27 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if (*v18 != v18 + 2)
                free(*v18);
              return (uint64_t *)MEMORY[0x1CAA32FC0](v18, 0x1080C40ED926357);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C484F500(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;

  v5 = result;
  v6 = *((_DWORD *)a2 + 2);
  v7 = *((_DWORD *)a3 + 2);
  if (v6 >= *((_DWORD *)result + 2))
  {
    if (v7 < v6)
    {
      v19 = *a2;
      v24 = *((_DWORD *)a2 + 2);
      v28 = a2[2];
      a2[2] = 0;
      v11 = *a3;
      *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
      *a2 = v11;
      sub_1C484FAD8(a2 + 2, a3 + 2);
      *a3 = v19;
      *((_DWORD *)a3 + 2) = v24;
      result = sub_1C484FAD8(a3 + 2, &v28);
      if ((v28 & 4) != 0)
      {
        v12 = (void **)(v28 & 0xFFFFFFFFFFFFFFF8);
        if ((v28 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*v12 != v12 + 2)
            free(*v12);
          result = (uint64_t *)MEMORY[0x1CAA32FC0](v12, 0x1080C40ED926357);
        }
      }
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)v5 + 2))
      {
        v20 = *v5;
        v25 = *((_DWORD *)v5 + 2);
        v28 = v5[2];
        v5[2] = 0;
        v13 = *a2;
        *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
        *v5 = v13;
        sub_1C484FAD8(v5 + 2, a2 + 2);
        *a2 = v20;
        *((_DWORD *)a2 + 2) = v25;
        v10 = a2 + 2;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v8 = result + 2;
    if (v7 < v6)
    {
      v18 = *v5;
      v23 = *((_DWORD *)v5 + 2);
      v28 = v5[2];
      v5[2] = 0;
      v9 = *a3;
      *((_DWORD *)v5 + 2) = *((_DWORD *)a3 + 2);
      *v5 = v9;
      sub_1C484FAD8(v8, a3 + 2);
      *a3 = v18;
      *((_DWORD *)a3 + 2) = v23;
      v10 = a3 + 2;
LABEL_13:
      result = sub_1C484FAD8(v10, &v28);
      if ((v28 & 4) != 0)
      {
        v17 = (void **)(v28 & 0xFFFFFFFFFFFFFFF8);
        if ((v28 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*v17 != v17 + 2)
            free(*v17);
          return (uint64_t *)MEMORY[0x1CAA32FC0](v17, 0x1080C40ED926357);
        }
      }
      return result;
    }
    v21 = *v5;
    v26 = *((_DWORD *)v5 + 2);
    v28 = v5[2];
    v5[2] = 0;
    v14 = *a2;
    *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
    *v5 = v14;
    sub_1C484FAD8(v8, a2 + 2);
    *a2 = v21;
    *((_DWORD *)a2 + 2) = v26;
    result = sub_1C484FAD8(a2 + 2, &v28);
    if ((v28 & 4) != 0)
    {
      v15 = (void **)(v28 & 0xFFFFFFFFFFFFFFF8);
      if ((v28 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if (*v15 != v15 + 2)
          free(*v15);
        result = (uint64_t *)MEMORY[0x1CAA32FC0](v15, 0x1080C40ED926357);
      }
    }
    if (*((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      v22 = *a2;
      v27 = *((_DWORD *)a2 + 2);
      v28 = a2[2];
      a2[2] = 0;
      v16 = *a3;
      *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
      *a2 = v16;
      sub_1C484FAD8(a2 + 2, a3 + 2);
      *a3 = v22;
      *((_DWORD *)a3 + 2) = v27;
      v10 = a3 + 2;
      goto LABEL_13;
    }
  }
  return result;
}

BOOL sub_1C484F81C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 16) < *(_DWORD *)(a1 + 8))
      {
        v17 = *(_QWORD *)a1;
        v19 = *(_DWORD *)(a1 + 8);
        v21 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;
        v6 = *(_QWORD *)(a2 - 24);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 16);
        *(_QWORD *)a1 = v6;
        sub_1C484FAD8((uint64_t *)(a1 + 16), (uint64_t *)(a2 - 8));
        *(_QWORD *)(a2 - 24) = v17;
        *(_DWORD *)(a2 - 16) = v19;
        sub_1C484FAD8((uint64_t *)(a2 - 8), &v21);
        if ((v21 & 4) != 0)
        {
          v7 = (void **)(v21 & 0xFFFFFFFFFFFFFFF8);
          if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if (*v7 != v7 + 2)
              free(*v7);
            MEMORY[0x1CAA32FC0](v7, 0x1080C40ED926357);
          }
        }
        return 1;
      }
      return result;
    case 3uLL:
      sub_1C484F500((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1C484FBEC(a1, a1 + 24, a1 + 48, (uint64_t *)(a2 - 24));
      return 1;
    case 5uLL:
      sub_1C484F1F0(a1, a1 + 24, a1 + 48, a1 + 72, (uint64_t *)(a2 - 24));
      return 1;
    default:
      v8 = a1 + 48;
      sub_1C484F500((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      v9 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)(v9 + 8) < *(_DWORD *)(v8 + 8))
    {
      v18 = *(_QWORD *)v9;
      v20 = *(_DWORD *)(v9 + 8);
      v21 = *(_QWORD *)(v9 + 16);
      *(_QWORD *)(v9 + 16) = 0;
      v12 = v10;
      while (1)
      {
        v13 = a1 + v12;
        *(_QWORD *)(v13 + 72) = *(_QWORD *)(a1 + v12 + 48);
        *(_DWORD *)(v13 + 80) = *(_DWORD *)(a1 + v12 + 56);
        v14 = (uint64_t *)(a1 + v12 + 64);
        sub_1C484FAD8((uint64_t *)(a1 + v12 + 88), v14);
        if (v12 == -48)
          break;
        v12 -= 24;
        if (v20 >= *(_DWORD *)(v13 + 32))
        {
          v15 = a1 + v12 + 72;
          goto LABEL_16;
        }
      }
      v15 = a1;
LABEL_16:
      *(_QWORD *)v15 = v18;
      *(_DWORD *)(v15 + 8) = v20;
      sub_1C484FAD8(v14, &v21);
      if ((v21 & 4) != 0)
      {
        v16 = (void **)(v21 & 0xFFFFFFFFFFFFFFF8);
        if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*v16 != v16 + 2)
            free(*v16);
          MEMORY[0x1CAA32FC0](v16, 0x1080C40ED926357);
        }
      }
      if (++v11 == 8)
        return v9 + 24 == a2;
    }
    v8 = v9;
    v10 += 24;
    v9 += 24;
    if (v9 == a2)
      return 1;
  }
}

uint64_t *sub_1C484FAD8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;

  if (a1 != a2)
  {
    v4 = *a2;
    if ((unint64_t)*a2 >= 8)
    {
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      if ((v4 & 4) == 0 || !v5 || *(_DWORD *)(v5 + 8))
      {
        v6 = *a1;
        if ((*a1 & 4) != 0)
        {
          v7 = v6 & 0xFFFFFFFFFFFFFFF8;
          if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if ((v4 & 4) == 0)
            {
              *(_DWORD *)(v7 + 8) = 0;
              if (*(_DWORD *)(v7 + 12))
              {
                v8 = 0;
              }
              else
              {
                v11 = v4 & 0xFFFFFFFFFFFFFFF8;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v6 & 0xFFFFFFFFFFFFFFF8, v7 + 16, 1uLL, 8);
                v5 = v11;
                v8 = *(unsigned int *)(v7 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v5;
              ++*(_DWORD *)(v7 + 8);
              goto LABEL_20;
            }
            if (*(_QWORD *)v7 != v7 + 16)
              free(*(void **)v7);
            MEMORY[0x1CAA32FC0](v7, 0x1080C40ED926357);
            v4 = *a2;
          }
        }
        *a1 = v4;
LABEL_20:
        *a2 = 0;
        return a1;
      }
    }
    if ((*a1 & 4) != 0)
    {
      v9 = *a1 & 0xFFFFFFFFFFFFFFF8;
      if (v9)
        *(_DWORD *)(v9 + 8) = 0;
    }
    else
    {
      *a1 = 0;
    }
  }
  return a1;
}

uint64_t *sub_1C484FBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;

  result = sub_1C484F500((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*((_DWORD *)a4 + 2) < *(_DWORD *)(a3 + 8))
  {
    v15 = *(_QWORD *)a3;
    v18 = *(_DWORD *)(a3 + 8);
    v21 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = 0;
    v9 = *a4;
    *(_DWORD *)(a3 + 8) = *((_DWORD *)a4 + 2);
    *(_QWORD *)a3 = v9;
    sub_1C484FAD8((uint64_t *)(a3 + 16), a4 + 2);
    *a4 = v15;
    *((_DWORD *)a4 + 2) = v18;
    result = sub_1C484FAD8(a4 + 2, &v21);
    if ((v21 & 4) != 0)
    {
      v10 = (void **)(v21 & 0xFFFFFFFFFFFFFFF8);
      if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if (*v10 != v10 + 2)
          free(*v10);
        result = (uint64_t *)MEMORY[0x1CAA32FC0](v10, 0x1080C40ED926357);
      }
    }
    if (*(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
    {
      v16 = *(_QWORD *)a2;
      v19 = *(_DWORD *)(a2 + 8);
      v21 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      v11 = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = v11;
      sub_1C484FAD8((uint64_t *)(a2 + 16), (uint64_t *)(a3 + 16));
      *(_QWORD *)a3 = v16;
      *(_DWORD *)(a3 + 8) = v19;
      result = sub_1C484FAD8((uint64_t *)(a3 + 16), &v21);
      if ((v21 & 4) != 0)
      {
        v12 = (void **)(v21 & 0xFFFFFFFFFFFFFFF8);
        if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*v12 != v12 + 2)
            free(*v12);
          result = (uint64_t *)MEMORY[0x1CAA32FC0](v12, 0x1080C40ED926357);
        }
      }
      if (*(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
      {
        v17 = *(_QWORD *)a1;
        v20 = *(_DWORD *)(a1 + 8);
        v21 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;
        v13 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_QWORD *)a1 = v13;
        sub_1C484FAD8((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
        *(_QWORD *)a2 = v17;
        *(_DWORD *)(a2 + 8) = v20;
        result = sub_1C484FAD8((uint64_t *)(a2 + 16), &v21);
        if ((v21 & 4) != 0)
        {
          v14 = (void **)(v21 & 0xFFFFFFFFFFFFFFF8);
          if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if (*v14 != v14 + 2)
              free(*v14);
            return (uint64_t *)MEMORY[0x1CAA32FC0](v14, 0x1080C40ED926357);
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C484FE48(uint64_t *result, uint64_t a2, unsigned int a3)
{
  uint64_t *v4;
  uint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v4 = result;
  v6 = *result;
  v7 = (unsigned int *)(*result + 20 * a3);
  v8 = v7 + 3;
  v9 = v7[3];
  if (a3 != (unint64_t)v9)
  {
    v10 = *(_DWORD *)(v6 + 20 * a3 + 16);
    if (*(_DWORD *)(v6 + 20 * v9 + 16) == -1)
    {
      *(_WORD *)(result[22] + 2 * *v7) = v10;
      *(_DWORD *)(v6 + 20 * v10 + 12) = v9;
    }
    else if (v10 == -1)
    {
      result = sub_1C484D700(result, *v7);
      *(_DWORD *)(*result + 20 * v11 + 12) = v9;
      *(_DWORD *)(v6 + 20 * *v8 + 16) = -1;
    }
    else
    {
      *(_DWORD *)(v6 + 20 * v10 + 12) = v9;
      *(_DWORD *)(v6 + 20 * *v8 + 16) = v10;
    }
  }
  *v8 = -1;
  v12 = *((_DWORD *)v4 + 49);
  *(_DWORD *)(v6 + 20 * a3 + 16) = *((_DWORD *)v4 + 48);
  *((_DWORD *)v4 + 48) = a3;
  *((_DWORD *)v4 + 49) = v12 + 1;
  return result;
}

unint64_t sub_1C484FF44(uint64_t a1, unsigned int *a2)
{
  unsigned __int8 v4;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int *v11;

  if (*(_QWORD *)(a1 + 64))
  {
    sub_1C4778ED8((uint64_t **)(a1 + 48), a2, a2);
    return ((unint64_t)v4 << 32) | 1;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *a2;
    if (!(_DWORD)v7)
      goto LABEL_11;
    v9 = 4 * v7;
    v10 = *(_DWORD **)a1;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 4;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return 1;
LABEL_10:
    if (v7 > 7)
    {
      do
      {
        v11 = (unsigned int *)(*(_QWORD *)a1 + 4 * v7 - 4);
        sub_1C4778ED8((uint64_t **)(a1 + 48), v11, v11);
        LODWORD(v7) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v7;
      }
      while ((_DWORD)v7);
      sub_1C4778ED8((uint64_t **)(a1 + 48), a2, a2);
    }
    else
    {
LABEL_11:
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v7 + 1, 4);
        v6 = *(_DWORD **)a1;
        v7 = *(unsigned int *)(a1 + 8);
      }
      v6[v7] = v8;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

unint64_t *sub_1C4850058(unint64_t *result, _BYTE *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t *v5;

  if (a3 == 1)
  {
    a3 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFBLL;
  }
  else if (a3)
  {
    v5 = result;
    v3 = a3;
    v4 = operator new();
    *(_QWORD *)v4 = v4 + 16;
    *(_QWORD *)(v4 + 8) = 0x400000000;
    sub_1C48500E4((unsigned int *)v4, a2, &a2[8 * v3]);
    result = v5;
    a3 = v4 | 4;
  }
  *result = a3;
  return result;
}

unsigned int *sub_1C48500E4(unsigned int *result, _BYTE *a2, _BYTE *a3)
{
  unsigned int *v3;
  size_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  _BYTE *v10;
  _BYTE *v11;

  v3 = result;
  v4 = a3 - a2;
  v5 = result[2];
  v6 = result[3];
  v7 = v5 + ((a3 - a2) >> 3);
  v8 = v7 > v6;
  v9 = v7 <= v6;
  if (!v8 && a2 != a3)
    goto LABEL_3;
  if (!v9)
  {
    v10 = a3;
    v11 = a2;
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v7, 8);
    a3 = v10;
    a2 = v11;
    LODWORD(v5) = v3[2];
  }
  if (a2 != a3)
  {
LABEL_3:
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v3 + 8 * v5), a2, v4);
    LODWORD(v5) = v3[2];
  }
  v3[2] = v5 + (v4 >> 3);
  return result;
}

char **sub_1C4850180(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;
  char *v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 80 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 72];
      if (&v2[v4 - 56] != v5)
      {
        v7 = v4;
        v8 = v2;
        free(v5);
        v4 = v7;
        v2 = v8;
      }
      v4 -= 80;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C4850204(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeSlotIndexesPass(a1);
  llvm::initializeLiveIntervalsPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "AGX1WAR_RDAR16355991";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "AGX1WAR_RDAR16355991";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EB280;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4850354;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4850294(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EB280) = &off_1E7F9EAC0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7EB288);
  if (v3 != -1)
  {
    v7[0] = sub_1C4850204;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7EB288, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4850354()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4850294(v0);
}

void sub_1C485037C(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4850410(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C485049C()
{
  return "AGX1 WAR RDAR16355991 pass";
}

void *sub_1C48504AC(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveIntervals::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C4850538(uint64_t a1, uint64_t *a2)
{
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int IncompleteVirtualRegister;
  int v36;
  uint64_t v37;
  uint64_t v38;
  llvm::MachineFunction *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  llvm::LiveInterval *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  BOOL v54;
  int v55;
  _QWORD *j;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  __int128 v64;
  __int128 v65;

  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2[2] + 104))(a2[2]);
  *(_QWORD *)(a1 + 256) = a2[5];
  *(_QWORD *)(a1 + 264) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2[1] + 16))(a2[1], *a2);
  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::SlotIndexes::ID);
  *(_QWORD *)(a1 + 272) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::SlotIndexes::ID);
  v6 = **(void ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(a1 + 280) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::LiveIntervals::ID);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 264) + 291))
  {
    v58 = *a2;
    if ((*(_WORD *)(*a2 + 18) & 0x3FF0) == 0x690)
    {
      v8 = a2[43];
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 592))(v8, 103);
      if ((v9 || (v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 592))(v8, 104)) != 0)
        && (*(_WORD *)(v9 + 18) & 0x3FF0) == 0x670)
      {
        v10 = *(_QWORD *)(v9 + 80);
        if (v10 != v9 + 72)
        {
          v11 = 0;
          do
          {
            if (v10)
              v12 = v10 - 24;
            else
              v12 = 0;
            v13 = v12 + 40;
            for (i = *(_QWORD *)(v12 + 48); i != v13; i = *(_QWORD *)(i + 8))
            {
              if (i)
                v15 = i - 24;
              else
                v15 = 0;
              if (*(_BYTE *)(v15 + 16) == 84)
              {
                v16 = *(_QWORD *)(v15 - 32);
                if (v16)
                {
                  if (!*(_BYTE *)(v16 + 16)
                    && *(_QWORD *)(v16 + 24) == *(_QWORD *)(v15 + 72)
                    && (*(_BYTE *)(v16 + 33) & 0x20) != 0)
                  {
                    v17 = *(_DWORD *)(*(_QWORD *)(i - 56) + 36);
                    if ((v17 - 1994) >= 2)
                    {
                      if (v17 == 1997)
                      {
                        v18 = *(_QWORD *)(i - 24 - 32 * (*(_DWORD *)(i - 4) & 0x7FFFFFF) + 64);
                        v19 = (_QWORD *)(v18 + 24);
                        if (*(_DWORD *)(v18 + 32) >= 0x41u)
                          v19 = (_QWORD *)*v19;
                        if (*v19 == 32)
                          return 0;
                      }
                    }
                    else
                    {
                      v11 = 1;
                    }
                  }
                }
              }
            }
            v10 = *(_QWORD *)(v10 + 8);
          }
          while (v10 != v9 + 72);
          if ((v11 & 1) != 0)
          {
            v20 = (_QWORD *)a2[41];
            for (j = a2 + 40; v20 != j; v20 = (_QWORD *)v20[1])
            {
              v21 = v20 + 6;
              v22 = v20[7];
              if ((_QWORD *)v22 != v20 + 6)
              {
                do
                {
                  if (**(_WORD **)(v22 + 16) == 12149)
                  {
                    v30 = *(unsigned __int8 **)(v22 + 56);
                    v62 = v30;
                    if (v30)
                      llvm::MetadataTracking::track((uint64_t)&v62, v30, 2);
                    v31 = *(_QWORD *)(a1 + 264);
                    LODWORD(v64) = 0;
                    v59 = sub_1C4785D88(v31, v58, "LoadCMode", &v64);
                    v61 = v64;
                    v32 = *(_QWORD *)(a1 + 264);
                    LODWORD(v64) = 0;
                    v33 = sub_1C4785D88(v32, v58, "LoadSLCMode", &v64);
                    v60 = v64;
                    v34 = *(_QWORD *)(a1 + 256);
                    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v34, "", 0);
                    v36 = IncompleteVirtualRegister;
                    *(_QWORD *)(*(_QWORD *)(v34 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F98468;
                    v37 = *(_QWORD *)(v34 + 8);
                    if (v37)
                      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 24))(v37, IncompleteVirtualRegister);
                    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8);
                    v39 = (llvm::MachineFunction *)v20[4];
                    v63 = v62;
                    if (v62)
                      llvm::MetadataTracking::track((uint64_t)&v63, v62, 2);
                    v40 = *((_QWORD *)v39 + 28);
                    if (v40)
                      *((_QWORD *)v39 + 28) = *(_QWORD *)v40;
                    else
                      v40 = sub_1C484358C((uint64_t)v39 + 128, 72, 3);
                    *(_QWORD *)&v64 = v63;
                    if (v63)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)&v63, v63, (uint64_t)&v64);
                      v63 = 0;
                    }
                    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v40, v39, v38 + 564624, (unsigned __int8 **)&v64, 0);
                    if ((_QWORD)v64)
                      llvm::MetadataTracking::untrack((uint64_t)&v64, (unsigned __int8 *)v64);
                    if (v63)
                      llvm::MetadataTracking::untrack((uint64_t)&v63, v63);
                    v41 = v20[5];
                    *(_QWORD *)(v40 + 24) = v41;
                    v42 = *(_QWORD *)(v41 + 32);
                    v43 = *(unsigned int *)(v40 + 40);
                    if ((_DWORD)v43)
                    {
                      v23 = *(_QWORD *)(v40 + 32);
                      v24 = *(_QWORD *)(v42 + 40);
                      v25 = 32 * v43;
                      do
                      {
                        if (!*(_BYTE *)v23)
                        {
                          v26 = *(unsigned int *)(v23 + 4);
                          if ((int)v26 >= 0)
                            v27 = (uint64_t *)(*(_QWORD *)(v24 + 272) + 8 * v26);
                          else
                            v27 = (uint64_t *)(*(_QWORD *)(v24 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
                          v28 = *v27;
                          if (*v27)
                          {
                            v29 = *(_QWORD *)(v28 + 16);
                            *(_QWORD *)(v28 + 16) = v23;
                            *(_QWORD *)(v23 + 16) = v29;
                            if ((*(_BYTE *)(v23 + 3) & 1) != 0)
                            {
                              *(_QWORD *)(v23 + 24) = v28;
                            }
                            else
                            {
                              *(_QWORD *)(v23 + 24) = 0;
                              v27 = (uint64_t *)(v29 + 24);
                            }
                          }
                          else
                          {
                            *(_QWORD *)(v23 + 16) = v23;
                            *(_QWORD *)(v23 + 24) = 0;
                          }
                          *v27 = v23;
                        }
                        v23 += 32;
                        v25 -= 32;
                      }
                      while (v25);
                    }
                    v44 = *(_QWORD *)(v42 + 728);
                    if (v44)
                      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v44 + 24))(v44, v40);
                    v45 = *(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v40 = v45 | *(_QWORD *)v40 & 7;
                    *(_QWORD *)(v40 + 8) = v22;
                    *(_QWORD *)(v45 + 8) = v40;
                    *(_QWORD *)v22 = *(_QWORD *)v22 & 7 | v40;
                    *((_QWORD *)&v64 + 1) = 0;
                    v65 = 0uLL;
                    LODWORD(v64) = 0x1000000;
                    DWORD1(v64) = IncompleteVirtualRegister;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v39, (const llvm::MachineOperand *)&v64);
                    LODWORD(v64) = 1;
                    *((_QWORD *)&v64 + 1) = 0;
                    *(_QWORD *)&v65 = 0;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v39, (const llvm::MachineOperand *)&v64);
                    LODWORD(v64) = 1;
                    v46 = v61;
                    if (!v59)
                      v46 = 0;
                    *((_QWORD *)&v64 + 1) = 0;
                    *(_QWORD *)&v65 = v46;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v39, (const llvm::MachineOperand *)&v64);
                    LODWORD(v64) = 1;
                    v47 = v60;
                    if (!v33)
                      v47 = 1;
                    *((_QWORD *)&v64 + 1) = 0;
                    *(_QWORD *)&v65 = v47;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v39, (const llvm::MachineOperand *)&v64);
                    LODWORD(v64) = 1;
                    *((_QWORD *)&v64 + 1) = 0;
                    *(_QWORD *)&v65 = 0;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v39, (const llvm::MachineOperand *)&v64);
                    LODWORD(v64) = 1;
                    *((_QWORD *)&v64 + 1) = 0;
                    *(_QWORD *)&v65 = 0;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v39, (const llvm::MachineOperand *)&v64);
                    v64 = 0u;
                    v65 = 0u;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v39, (const llvm::MachineOperand *)&v64);
                    sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 288), v40, 0);
                    v48 = *(_QWORD *)(a1 + 280);
                    v49 = (llvm::LiveInterval *)sub_1C4851220(v48, v36);
                    v50 = *(_QWORD *)(v48 + 304);
                    v51 = *(_QWORD *)(v48 + 248);
                    *(_QWORD *)v50 = v51;
                    *(_QWORD *)(v50 + 8) = *(_QWORD *)(v51 + 40);
                    *(_OWORD *)(v50 + 16) = *(_OWORD *)(v48 + 288);
                    *(_QWORD *)(v50 + 32) = v48 + 312;
                    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v50);
                    *(_DWORD *)(v50 + 184) = 0;
                    v52 = *(_QWORD *)(v48 + 256);
                    v54 = *(_BYTE *)(v52 + 16) == 0;
                    v53 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v52 + 24)
                                                          + 16 * (*((_DWORD *)v49 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                             + 34);
                    v54 = v54 || v53 == 0;
                    v55 = !v54;
                    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v48 + 304), v49, v55);
                    llvm::LiveIntervals::computeDeadValues(v48, (uint64_t)v49, 0);
                    if (v62)
                      llvm::MetadataTracking::untrack((uint64_t)&v62, v62);
                    v21 = v20 + 6;
                  }
                  if ((*(_BYTE *)v22 & 4) == 0)
                  {
                    while ((*(_WORD *)(v22 + 44) & 8) != 0)
                      v22 = *(_QWORD *)(v22 + 8);
                  }
                  v22 = *(_QWORD *)(v22 + 8);
                }
                while ((_QWORD *)v22 != v21);
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

unint64_t sub_1C4850BC8(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v38;
  unint64_t v39;

  if (a3)
  {
    v5 = sub_1C4850E04(a1, a2) & 0xFFFFFFFFFFFFFFF8;
    v6 = *(_QWORD *)v5;
    goto LABEL_19;
  }
  v7 = *(_QWORD *)(a2 + 24);
  v8 = a2;
  while (v8 != *(_QWORD *)(v7 + 56))
  {
    v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
    if (!v8 || (*(_BYTE *)v8 & 4) == 0)
    {
      while ((*(_WORD *)(v8 + 44) & 4) != 0)
        v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
    }
    v9 = *(_QWORD *)(a1 + 368);
    v10 = *(unsigned int *)(a1 + 384);
    if (!(_DWORD)v10)
      goto LABEL_15;
    LODWORD(v11) = ((v8 >> 4) ^ (v8 >> 9)) & (v10 - 1);
    v12 = (uint64_t *)(v9 + 16 * v11);
    v13 = *v12;
    if (v8 != *v12)
    {
      v14 = 1;
      while (v13 != -4096)
      {
        v15 = v11 + v14++;
        v11 = v15 & (v10 - 1);
        v13 = *(_QWORD *)(v9 + 16 * v11);
        if (v8 == v13)
        {
          v12 = (uint64_t *)(v9 + 16 * v11);
          goto LABEL_16;
        }
      }
LABEL_15:
      v12 = (uint64_t *)(v9 + 16 * v10);
    }
LABEL_16:
    if (v12 != (uint64_t *)(v9 + 16 * v10))
    {
      v16 = v12 + 1;
      goto LABEL_18;
    }
  }
  v16 = (_QWORD *)(*(_QWORD *)(a1 + 392) + 16 * *(unsigned int *)(v7 + 24));
LABEL_18:
  v6 = *v16 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v6 + 8);
LABEL_19:
  v17 = *(_DWORD *)(v6 + 24);
  v18 = ((*(_DWORD *)(v5 + 24) - v17) >> 1) & 0x7FFFFFFC;
  v19 = v18 + v17;
  v20 = sub_1C484358C(a1 + 248, 32, 3);
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = a2;
  *(_DWORD *)(v20 + 24) = v19;
  v21 = *(_QWORD *)v5;
  *(_QWORD *)v20 = *(_QWORD *)v5;
  *(_QWORD *)(v20 + 8) = v5;
  *(_QWORD *)(v21 + 8) = v20;
  *(_QWORD *)v5 = v20;
  if (!v18)
  {
    v22 = *(_DWORD *)(*(_QWORD *)v20 + 24);
    v23 = v20;
    do
    {
      v22 += 8;
      *(_DWORD *)(v23 + 24) = v22;
      v23 = *(_QWORD *)(v23 + 8);
    }
    while (v23 != a1 + 344 && *(_DWORD *)(v23 + 24) <= v22);
  }
  v24 = v20 & 0xFFFFFFFFFFFFFFF9;
  v38 = a2;
  v39 = v20 & 0xFFFFFFFFFFFFFFF9;
  v25 = *(_DWORD *)(a1 + 384);
  if (!v25)
  {
    v35 = 0;
    goto LABEL_37;
  }
  v26 = *(_QWORD *)(a1 + 368);
  v27 = v25 - 1;
  v28 = v27 & ((a2 >> 4) ^ (a2 >> 9));
  v29 = (_QWORD *)(v26 + 16 * v28);
  v30 = *v29;
  if (*v29 != a2)
  {
    v31 = 0;
    v32 = 1;
    while (v30 != -4096)
    {
      if (v31)
        v33 = 0;
      else
        v33 = v30 == -8192;
      if (v33)
        v31 = v29;
      v34 = v28 + v32++;
      v28 = v34 & v27;
      v29 = (_QWORD *)(v26 + 16 * v28);
      v30 = *v29;
      if (*v29 == a2)
        return v24;
    }
    if (v31)
      v35 = v31;
    else
      v35 = v29;
LABEL_37:
    v36 = sub_1C4850F64(a1 + 368, (uint64_t)&v38, &v38, v35);
    *v36 = v38;
    v36[1] = v39;
  }
  return v24;
}

uint64_t sub_1C4850E04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a2 + 24);
  while (1)
  {
    if (!a2 || (*(_BYTE *)a2 & 4) == 0)
    {
      while ((*(_WORD *)(a2 + 44) & 8) != 0)
        a2 = *(_QWORD *)(a2 + 8);
    }
    a2 = *(_QWORD *)(a2 + 8);
    if (a2 == v2 + 48)
      break;
    v3 = *(_QWORD *)(a1 + 368);
    v4 = *(unsigned int *)(a1 + 384);
    if (!(_DWORD)v4)
      goto LABEL_17;
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (a2 != *v6)
    {
      v8 = 1;
      while (v7 != -4096)
      {
        v9 = v5 + v8++;
        v5 = v9 & (v4 - 1);
        v7 = *(_QWORD *)(v3 + 16 * v5);
        if (a2 == v7)
        {
          v6 = (uint64_t *)(v3 + 16 * v5);
          goto LABEL_8;
        }
      }
LABEL_17:
      v6 = (uint64_t *)(v3 + 16 * v4);
    }
LABEL_8:
    if (v6 != (uint64_t *)(v3 + 16 * v4))
    {
      v10 = (uint64_t)(v6 + 1);
      return *(_QWORD *)v10;
    }
  }
  v10 = *(_QWORD *)(a1 + 392) + 16 * *(unsigned int *)(v2 + 24) + 8;
  return *(_QWORD *)v10;
}

uint64_t sub_1C4850EC8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4850F64(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4851094(a1, v7);
      v17 = 0;
      sub_1C4850EC8((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4851094(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4851094(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C485114C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C485114C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    v6 = 0;
    v7 = v3 - 1;
    do
    {
      v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        v10 = (_QWORD *)(*(_QWORD *)result + 16 * v9);
        v11 = *v10;
        if (v8 != *v10)
        {
          v13 = 0;
          v14 = 1;
          while (v11 != -4096)
          {
            if (v13)
              v15 = 0;
            else
              v15 = v11 == -8192;
            if (v15)
              v13 = v10;
            v16 = v9 + v14++;
            v9 = v16 & v7;
            v10 = (_QWORD *)(*(_QWORD *)result + 16 * (v16 & v7));
            v11 = *v10;
            if (v8 == *v10)
              goto LABEL_8;
          }
          if (v13)
            v10 = v13;
        }
LABEL_8:
        v12 = a2[1];
        *v10 = v8;
        v10[1] = v12;
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_1C4851220(uint64_t a1, int a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  float v8;
  uint64_t v9;

  v3 = (_QWORD *)(a1 + 408);
  v4 = a2 & 0x7FFFFFFF;
  v5 = *(unsigned int *)(a1 + 416);
  v6 = v4 >= v5;
  v7 = v4 - v5;
  if (v6)
    sub_1C48512E0(a1 + 408, v7 + 1, *(_QWORD *)(a1 + 424));
  if ((a2 - 1) >= 0x3FFFFFFF)
    v8 = 0.0;
  else
    v8 = INFINITY;
  v9 = operator new();
  *(_QWORD *)v9 = v9 + 16;
  *(_QWORD *)(v9 + 8) = 0x200000000;
  *(_QWORD *)(v9 + 64) = v9 + 80;
  *(_QWORD *)(v9 + 72) = 0x200000000;
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_DWORD *)(v9 + 112) = a2;
  *(float *)(v9 + 116) = v8;
  *(_QWORD *)(*v3 + 8 * v4) = v9;
  return *(_QWORD *)(*v3 + 8 * v4);
}

uint64_t sub_1C48512E0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(result + 8);
  if (v3 + a2 > (unint64_t)*(unsigned int *)(result + 12))
  {
    v8 = result;
    v6 = a3;
    v7 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v3 + a2, 8);
    a3 = v6;
    a2 = v7;
    result = v8;
    v3 = *(unsigned int *)(v8 + 8);
  }
  if (a2)
  {
    v4 = (_QWORD *)(*(_QWORD *)result + 8 * v3);
    v5 = a2;
    do
    {
      *v4++ = a3;
      --v5;
    }
    while (v5);
  }
  *(_DWORD *)(result + 8) = v3 + a2;
  return result;
}

void sub_1C485135C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4851370(uint64_t a1, unint64_t *a2, _QWORD *a3, unsigned int a4, uint64_t a5)
{
  unsigned __int8 **v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  llvm::MachineFunction *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28[4];
  unsigned __int8 *v29;

  v27 = 0;
  if (a3 + 6 == a2)
  {
    v10 = *a2 & 0xFFFFFFFFFFFFFFF8;
    if (!v10 || (*(_BYTE *)v10 & 4) == 0)
    {
      while ((*(_WORD *)(v10 + 44) & 4) != 0)
        v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (unsigned __int8 **)(v10 + 56);
  }
  else
  {
    v9 = (unsigned __int8 **)(a2 + 7);
  }
  if (v9 != &v27 && (v11 = *v9, (v27 = v11) != 0))
  {
    llvm::MetadataTracking::track((uint64_t)&v27, v11, 2);
    v12 = *(_QWORD *)(a5 + 8) + 644640;
    v13 = (llvm::MachineFunction *)a3[4];
    v29 = v27;
    if (v27)
      llvm::MetadataTracking::track((uint64_t)&v29, v27, 2);
  }
  else
  {
    v12 = *(_QWORD *)(a5 + 8) + 644640;
    v13 = (llvm::MachineFunction *)a3[4];
    v29 = 0;
  }
  v14 = *((_QWORD *)v13 + 28);
  if (v14)
    *((_QWORD *)v13 + 28) = *(_QWORD *)v14;
  else
    v14 = sub_1C484358C((uint64_t)v13 + 128, 72, 3);
  v28[0] = v29;
  if (v29)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v29, v29, (uint64_t)v28);
    v29 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v14, v13, v12, v28, 0);
  if (v28[0])
    llvm::MetadataTracking::untrack((uint64_t)v28, v28[0]);
  if (v29)
    llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
  v15 = a3[5];
  *(_QWORD *)(v14 + 24) = v15;
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(unsigned int *)(v14 + 40);
  if ((_DWORD)v17)
  {
    v20 = *(_QWORD *)(v14 + 32);
    v21 = *(_QWORD *)(v16 + 40);
    v22 = 32 * v17;
    do
    {
      if (!*(_BYTE *)v20)
      {
        v23 = *(unsigned int *)(v20 + 4);
        if ((int)v23 >= 0)
          v24 = (uint64_t *)(*(_QWORD *)(v21 + 272) + 8 * v23);
        else
          v24 = (uint64_t *)(*(_QWORD *)(v21 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
        v25 = *v24;
        if (*v24)
        {
          v26 = *(_QWORD *)(v25 + 16);
          *(_QWORD *)(v25 + 16) = v20;
          *(_QWORD *)(v20 + 16) = v26;
          if ((*(_BYTE *)(v20 + 3) & 1) != 0)
          {
            *(_QWORD *)(v20 + 24) = v25;
          }
          else
          {
            *(_QWORD *)(v20 + 24) = 0;
            v24 = (uint64_t *)(v26 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v20 + 16) = v20;
          *(_QWORD *)(v20 + 24) = 0;
        }
        *v24 = v20;
      }
      v20 += 32;
      v22 -= 32;
    }
    while (v22);
  }
  v18 = *(_QWORD *)(v16 + 728);
  if (v18)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v18 + 24))(v18, v14);
  v19 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = v19 | *(_QWORD *)v14 & 7;
  *(_QWORD *)(v14 + 8) = a2;
  *(_QWORD *)(v19 + 8) = v14;
  *a2 = *a2 & 7 | v14;
  LODWORD(v28[0]) = 1;
  v28[1] = 0;
  v28[2] = (unsigned __int8 *)a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v13, (const llvm::MachineOperand *)v28);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
}

BOOL sub_1C48515E4(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = **(unsigned __int16 **)(a2 + 16);
  return (v2 - 3745) < 0x18 || sub_1C4840970(v2);
}

uint64_t sub_1C4851604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v4;
  int v5;
  _BOOL4 v6;
  int v7;

  v4 = *(unsigned __int16 **)(a2 + 16);
  v5 = *v4;
  v6 = sub_1C4840970(*v4);
  v7 = **(unsigned __int16 **)(a3 + 16);
  if (v6 && (v7 & 0xFFFE) == 11972)
    return 0;
  if ((v5 - 11956) < 0x10)
    goto LABEL_8;
  if ((v7 - 3745) < 0x18)
    return 0;
  if ((v5 - 13374) >= 0x20)
  {
LABEL_8:
    if (sub_1C4840970(v7))
      return 0;
  }
  return 1;
}

uint64_t sub_1C4851690(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 17) >> 2) & 1;
}

BOOL sub_1C48516A0(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 16) & 1) == 0;
}

BOOL sub_1C48516B4(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v3;
  int v4;

  if (!*(_BYTE *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32)
                                                                           + 8)
                                                             + 16))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 8), **(_QWORD **)(*(_QWORD *)(a2 + 24) + 32))+ 281))return 0;
  v3 = *(unsigned __int16 **)(a2 + 16);
  v4 = *v3;
  if ((v4 & 0xFFFC) == 0x2EB0)
    return 0;
  return (*((_BYTE *)v3 + 17) & 0xC0) != 0 || (v4 - 11851) < 0x10 || (v4 - 11956) < 0x10;
}

BOOL sub_1C4851744(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned __int16 *v5;
  int v6;
  _BOOL8 result;
  int v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32)
                                                                           + 8)
                                                             + 16))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 8), **(_QWORD **)(*(_QWORD *)(a2 + 24) + 32))+ 281))return 0;
  v5 = *(unsigned __int16 **)(a2 + 16);
  if ((*((_BYTE *)v5 + 17) & 0x80) == 0 || (*(_BYTE *)(*(_QWORD *)(a3 + 16) + 17) & 0xC0) == 0)
  {
    if (*v5 - 11956 <= 0xF)
    {
      v6 = **(unsigned __int16 **)(a3 + 16);
      if ((v6 - 11851) < 0x10 || (v6 - 11956) < 0x10)
        return 1;
    }
    return 0;
  }
  if (!sub_1C612D454(a2, &v11, &v15, &v13)
    || !sub_1C612D454(a3, &v12, &v16, &v14)
    || v11 != v12
    || v13 + v15 > v16 && v14 + v16 > v15)
  {
    return 1;
  }
  if (!v11)
    return 0;
  if (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 56) == a3)
    return 1;
  v9 = 15;
  do
  {
    a3 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    result = a3 != a2;
    if (a3 == a2 || *(_DWORD *)(a3 + 40) && (**(_DWORD **)(a3 + 32) & 0x10000FF) == 0x1000000)
      break;
  }
  while (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 56) != a3 && v9-- != 0);
  return result;
}

uint64_t sub_1C4851900()
{
  return 0;
}

uint64_t sub_1C485190C()
{
  return 0;
}

void *sub_1C4851914(void *result, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _WORD *v17;
  unsigned __int16 *v18;
  __int16 v19;
  unsigned __int16 v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = result;
  v7 = a2;
  if ((*(_WORD *)(a2 + 44) & 4) != 0)
  {
    v7 = a2;
    do
      v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v7 + 44) & 4) != 0);
  }
  v8 = *(_QWORD *)(a2 + 24) + 48;
  v9 = *(_QWORD *)(v7 + 32);
  v10 = *(unsigned int *)(v7 + 40);
  v11 = v9 + 32 * v10;
  if (!(_DWORD)v10)
  {
    v23 = *(_QWORD *)(v7 + 8);
    if (v23 == v8)
    {
      v7 = *(_QWORD *)(a2 + 24) + 48;
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 24) + 48;
      if ((*(_WORD *)(v23 + 44) & 4) != 0)
      {
        do
        {
          v24 = v23;
          v25 = *(unsigned int *)(v23 + 40);
          if ((_DWORD)v25)
          {
            v7 = v23;
            goto LABEL_40;
          }
          v23 = *(_QWORD *)(v23 + 8);
        }
        while (v23 != v8 && (*(_WORD *)(v23 + 44) & 4) != 0);
        v7 = *(_QWORD *)(a2 + 24) + 48;
LABEL_40:
        v9 = *(_QWORD *)(v24 + 32);
        v11 = v9 + 32 * v25;
      }
    }
  }
  if (v9 != v11)
  {
    v26 = a4 + 16;
    while (1)
    {
      if (!*(_DWORD *)v9)
      {
        v15 = *(unsigned int *)(v9 + 4);
        if ((_DWORD)v15)
        {
          if (*(_BYTE *)(*(_QWORD *)(a3[27] + 16) + v15))
          {
            if ((*(_DWORD *)v9 & 0x2000000) == 0)
              goto LABEL_18;
            result = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 80))(v6);
            if ((_DWORD)result)
              break;
          }
        }
      }
LABEL_6:
      v9 += 32;
      if (v9 == v11)
      {
        v12 = *(_QWORD *)(v7 + 8);
        if (v12 == v8)
          return result;
        v9 = v11;
        v7 = v8;
        if ((*(_WORD *)(v12 + 44) & 4) != 0)
        {
          while (1)
          {
            v13 = v12;
            v14 = *(unsigned int *)(v12 + 40);
            if ((_DWORD)v14)
              break;
            v12 = *(_QWORD *)(v12 + 8);
            if (v12 == v8 || (*(_WORD *)(v12 + 44) & 4) == 0)
            {
              v7 = v8;
              goto LABEL_26;
            }
          }
          v7 = v12;
LABEL_26:
          v9 = *(_QWORD *)(v13 + 32);
          v11 = v9 + 32 * v14;
        }
      }
      if (v9 == v11)
        return result;
    }
    LODWORD(v15) = *(_DWORD *)(v9 + 4);
LABEL_18:
    v16 = *(unsigned int *)(a3[1] + 24 * v15 + 16);
    v17 = (_WORD *)(a3[7] + ((v16 >> 3) & 0x1FFFFFFE));
    v19 = *v17;
    v18 = v17 + 1;
    v20 = v19 + (v16 & 0xF) * v15;
    do
    {
      if ((*(_BYTE *)(v9 + 3) & 1) != 0)
      {
        v21 = *(unsigned int *)(a4 + 8);
        if (v21 >= *(unsigned int *)(a4 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v26, v21 + 1, 4);
          v21 = *(unsigned int *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v21) = v20;
        ++*(_DWORD *)(a4 + 8);
      }
      v22 = *v18++;
      v20 += v22;
    }
    while (v22);
    goto LABEL_6;
  }
  return result;
}

BOOL sub_1C4851B34(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 16) & 0xC0) != 0;
}

uint64_t sub_1C4851B48(uint64_t a1, uint64_t a2, char *a3)
{
  BOOL v5;
  unsigned __int16 *v6;
  uint64_t v7;
  char v8;
  BOOL v9;
  BOOL v10;
  int v11;
  BOOL v13;
  uint64_t result;
  char v16;
  unsigned int v17;
  char v18;
  BOOL v19;
  char v20;
  char v21;
  char v22;

  v5 = 0;
  v6 = *(unsigned __int16 **)(a2 + 16);
  v7 = *((_QWORD *)v6 + 2);
  if ((v7 & 0x80) != 0)
    v8 = 3;
  else
    v8 = 1;
  *a3 = v8;
  v9 = (v7 & 0x2A000) != 0;
  if ((v7 & 0x4100) != 0)
    v9 = 0;
  v10 = (v7 & 0x10000) == 0 && v9;
  v11 = **(unsigned __int16 **)(a2 + 16);
  v13 = (v11 - 11948) < 3 || v11 == 11951;
  if (*v6 - 13374 >= 0x20 && !v10 && (v11 & 0xFFFE) != 0x2EC4)
    v5 = (v11 - 12440) >= 0x30 && (v11 - 12868) >= 4;
  a3[1] = v5;
  a3[1] |= (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2) | v13;
  result = sub_1C612B500(**(unsigned __int16 **)(a2 + 16), 3);
  if ((_DWORD)result == -1)
  {
    v16 = 0;
  }
  else if (*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * result + 16))
  {
    v16 = 2;
  }
  else
  {
    v16 = 1;
  }
  a3[2] = v16;
  a3[3] = (v7 & 0x20) != 0;
  v17 = *v6;
  if (v17 - 13374 >= 0x20)
  {
    result = sub_1C4840970(*v6);
    v19 = (v7 & 0x200) != 0 || v17 >> 2 == 3038;
    v20 = v17 - 11956 < 0x10 || v19;
    if (v17 - 11851 >= 0x10)
      v21 = v20;
    else
      v21 = 1;
    if ((v7 & 0x8000) != 0)
      v22 = 1;
    else
      v22 = v21;
    if ((v7 & 0x4000) != 0)
      v18 = 1;
    else
      v18 = v22;
    if ((result & 1) != 0)
      v18 = 1;
  }
  else
  {
    v18 = 1;
  }
  a3[6] = v18;
  a3[4] = (v7 & 0x200) != 0;
  a3[5] = (v7 & 0x10100) != 0;
  return result;
}

uint64_t sub_1C4851D38()
{
  return 0;
}

uint64_t sub_1C4851D40(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  unsigned __int16 *v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  llvm::MachineFunction *v52;
  llvm::MachineInstr *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  llvm *v60;
  BOOL v61;
  BOOL v62;
  llvm *UnderlyingObject;
  llvm *v64;
  BOOL v65;
  BOOL v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::MachineFunction *v70;
  llvm::MachineInstr *v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;

  v3 = a2 + 6;
  v4 = a2[7];
  if ((_QWORD *)v4 != a2 + 6)
  {
    v5 = 0;
    v6 = -1;
    while (1)
    {
      v7 = v4;
      if (!v4 || (v8 = v4, (*(_BYTE *)v4 & 4) == 0))
      {
        v8 = v4;
        if ((*(_WORD *)(v4 + 44) & 8) != 0)
        {
          v8 = v4;
          do
            v8 = *(_QWORD *)(v8 + 8);
          while ((*(_WORD *)(v8 + 44) & 8) != 0);
        }
      }
      v4 = *(_QWORD *)(v8 + 8);
      v9 = *(unsigned __int16 **)(v7 + 16);
      v10 = *v9;
      if (v10 != 13430)
        break;
      if ((_QWORD *)v4 != v3)
      {
        v11 = *(unsigned __int16 **)(v4 + 16);
        v12 = *v11;
        v13 = (v12 - 9) > 0x3C || ((1 << (v12 - 9)) & 0x1000000000000605) == 0;
        v14 = !v13 || v12 == 0;
        if (!v14 && (v11[4] & 0x10) == 0 && (v11[8] & 1) == 0)
          goto LABEL_53;
      }
      if (v5 && v6 <= 7)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 32);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 728);
          if (v16)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v7);
          v17 = *(unsigned int *)(v7 + 40);
          if ((_DWORD)v17)
          {
            v18 = *(_QWORD *)(v7 + 32);
            v19 = *(_QWORD *)(v15 + 40);
            v20 = 32 * v17;
            do
            {
              if (!*(_BYTE *)v18)
              {
                v21 = *(unsigned int *)(v18 + 4);
                if ((v21 & 0x80000000) != 0)
                  v22 = (uint64_t *)(*(_QWORD *)(v19 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
                else
                  v22 = (uint64_t *)(*(_QWORD *)(v19 + 272) + 8 * v21);
                v23 = *v22;
                v25 = *(_QWORD *)(v18 + 16);
                v24 = *(_QWORD *)(v18 + 24);
                if (v18 != *v22)
                  v22 = (uint64_t *)(v25 + 24);
                *v22 = v24;
                if (v24)
                  v26 = v24;
                else
                  v26 = v23;
                *(_QWORD *)(v26 + 16) = v25;
                *(_QWORD *)(v18 + 16) = 0;
                *(_QWORD *)(v18 + 24) = 0;
              }
              v18 += 32;
              v20 -= 32;
            }
            while (v20);
          }
        }
        v29 = *(unint64_t **)(v7 + 8);
        v30 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
        *v29 = v30 | *v29 & 7;
        *(_QWORD *)(v30 + 8) = v29;
        *(_QWORD *)v7 &= 7uLL;
        *(_QWORD *)(v7 + 8) = 0;
        v31 = a2[5];
        *(_QWORD *)(v7 + 24) = v31;
        v32 = *(_QWORD *)(v31 + 32);
        v33 = *(unsigned int *)(v7 + 40);
        if ((_DWORD)v33)
        {
          v36 = *(_QWORD *)(v7 + 32);
          v37 = *(_QWORD *)(v32 + 40);
          v38 = 32 * v33;
          do
          {
            if (!*(_BYTE *)v36)
            {
              v39 = *(unsigned int *)(v36 + 4);
              if ((int)v39 >= 0)
                v40 = (uint64_t *)(*(_QWORD *)(v37 + 272) + 8 * v39);
              else
                v40 = (uint64_t *)(*(_QWORD *)(v37 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
              v41 = *v40;
              if (*v40)
              {
                v42 = *(_QWORD *)(v41 + 16);
                *(_QWORD *)(v41 + 16) = v36;
                *(_QWORD *)(v36 + 16) = v42;
                if ((*(_BYTE *)(v36 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v36 + 24) = v41;
                }
                else
                {
                  *(_QWORD *)(v36 + 24) = 0;
                  v40 = (uint64_t *)(v42 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v36 + 16) = v36;
                *(_QWORD *)(v36 + 24) = 0;
              }
              *v40 = v36;
            }
            v36 += 32;
            v38 -= 32;
          }
          while (v38);
        }
        v34 = *(_QWORD *)(v32 + 728);
        if (v34)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 24))(v34, v7);
        v35 = *v5 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v7 = v35 | *(_QWORD *)v7 & 7;
        *(_QWORD *)(v7 + 8) = v5;
        *(_QWORD *)(v35 + 8) = v7;
        *v5 = *v5 & 7 | v7;
LABEL_53:
        v5 = 0;
        goto LABEL_54;
      }
      v6 = 0;
      v5 = (uint64_t *)v7;
LABEL_54:
      ++v6;
      if ((_QWORD *)v4 == v3)
        goto LABEL_69;
    }
    v28 = (v10 - 9) <= 0x3C && ((1 << (v10 - 9)) & 0x1000000000000605) != 0
       || v10 == 0;
    if (v28 || (v9[4] & 0x10) != 0 || (*((_QWORD *)v9 + 2) & 1) != 0)
      goto LABEL_54;
    goto LABEL_53;
  }
LABEL_69:
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2[4] + 8) + 16))(*(_QWORD *)(a2[4] + 8), *(_QWORD *)a2[4]);
  if (!*(_BYTE *)(result + 284))
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2[4] + 16) + 104))(*(_QWORD *)(a2[4] + 16));
    v74 = result;
    v44 = a2[7];
    if ((_QWORD *)v44 != v3)
    {
      v45 = 0;
      v46 = 0;
      v73 = a2 + 5;
      do
      {
        v47 = *(_QWORD *)(*(_QWORD *)(v44 + 16) + 16);
        if ((v47 & 0x20) != 0)
        {
          v48 = (_QWORD *)v44;
          if (v46)
          {
            result = llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(*(_QWORD *)(v44 + 32) + 32), (const llvm::MachineOperand *)(v46[4] + 32));
            v48 = (_QWORD *)v44;
            if ((result & 1) == 0)
            {
              v49 = (unsigned __int8 *)v46[7];
              v75 = v49;
              if (v49)
              {
                llvm::MetadataTracking::track((uint64_t)&v75, v49, 2);
                v50 = v46[1];
                v51 = *(_QWORD *)(v74 + 8) + 643488;
                v52 = (llvm::MachineFunction *)a2[4];
                v76 = v75;
                if (v75)
                  llvm::MetadataTracking::track((uint64_t)&v76, v75, 2);
              }
              else
              {
                v50 = v46[1];
                v51 = *(_QWORD *)(v74 + 8) + 643488;
                v52 = (llvm::MachineFunction *)a2[4];
                v76 = 0;
              }
              v53 = (llvm::MachineInstr *)*((_QWORD *)v52 + 28);
              if (v53)
                *((_QWORD *)v52 + 28) = *(_QWORD *)v53;
              else
                v53 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v52 + 128, 72, 3);
              v77 = v76;
              if (v76)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v76, v76, (uint64_t)&v77);
                v76 = 0;
              }
              llvm::MachineInstr::MachineInstr(v53, v52, v51, &v77, 0);
              if (v77)
                llvm::MetadataTracking::untrack((uint64_t)&v77, v77);
              if (v76)
                llvm::MetadataTracking::untrack((uint64_t)&v76, v76);
              if (v3 != (_QWORD *)v50 && (*(_WORD *)(v50 + 44) & 4) != 0)
                *((_WORD *)v53 + 22) |= 0xCu;
              result = sub_1C512CA10(v73, (uint64_t *)v50, (uint64_t)v53);
              if (v75)
                result = llvm::MetadataTracking::untrack((uint64_t)&v75, v75);
              v48 = (_QWORD *)v44;
            }
          }
        }
        else
        {
          v48 = v46;
        }
        if ((v47 & 0x100) != 0)
        {
          v54 = (_QWORD *)v44;
          if (v45)
          {
            v55 = *(_QWORD *)(v44 + 48);
            if (v55 < 8)
              goto LABEL_142;
            if ((v55 & 7) != 0)
            {
              if ((*(_QWORD *)(v44 + 48) & 7) != 3
                || (v55 & 0xFFFFFFFFFFFFFFF8) == 0
                || !*(_DWORD *)(v55 & 0xFFFFFFFFFFFFFFF8))
              {
                goto LABEL_142;
              }
            }
            else
            {
              v55 &= 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v44 + 48) = v55;
            }
            v56 = v45[6];
            if (v56 < 8)
              goto LABEL_142;
            if ((v56 & 7) != 0)
            {
              if ((v45[6] & 7) != 3 || (v56 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_DWORD *)(v56 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_142;
            }
            else
            {
              v56 &= 0xFFFFFFFFFFFFFFF8;
              v45[6] = v56;
              v55 = *(_QWORD *)(v44 + 48);
            }
            if ((v55 & 7) != 0)
            {
              v57 = *(uint64_t **)((v55 & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            else
            {
              v57 = (uint64_t *)(v55 & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)(v44 + 48) = v57;
              v56 = v45[6];
            }
            if ((v56 & 7) != 0)
            {
              v58 = *(_QWORD **)((v56 & 0xFFFFFFFFFFFFFFF8) + 8);
              if (!v57)
                goto LABEL_142;
            }
            else
            {
              v58 = (_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF8);
              v45[6] = v56 & 0xFFFFFFFFFFFFFFF8;
              if (!v57)
                goto LABEL_142;
            }
            if (!v58)
              goto LABEL_142;
            v59 = *v57;
            v60 = (v59 & 4) != 0 ? 0 : (llvm *)(v59 & 0xFFFFFFFFFFFFFFF8);
            v61 = v60 && *v58 >= 8uLL;
            v62 = v61 && (*v58 & 4) == 0;
            if (!v62
              || ((UnderlyingObject = llvm::getUnderlyingObject(v60, (const llvm::Value *)6), (*v58 & 4) != 0)
                ? (v64 = 0)
                : (v64 = (llvm *)(*v58 & 0xFFFFFFFFFFFFFFF8)),
                  (result = (uint64_t)llvm::getUnderlyingObject(v64, (const llvm::Value *)6), UnderlyingObject)
                ? (v65 = result == 0)
                : (v65 = 1),
                  !v65 ? (v66 = UnderlyingObject == (llvm *)result) : (v66 = 0),
                  v54 = (_QWORD *)v44,
                  !v66))
            {
LABEL_142:
              v67 = (unsigned __int8 *)v45[7];
              v75 = v67;
              if (v67)
              {
                llvm::MetadataTracking::track((uint64_t)&v75, v67, 2);
                v68 = v45[1];
                v69 = *(_QWORD *)(v74 + 8) + 643488;
                v70 = (llvm::MachineFunction *)a2[4];
                v76 = v75;
                if (v75)
                  llvm::MetadataTracking::track((uint64_t)&v76, v75, 2);
              }
              else
              {
                v68 = v45[1];
                v69 = *(_QWORD *)(v74 + 8) + 643488;
                v70 = (llvm::MachineFunction *)a2[4];
                v76 = 0;
              }
              v71 = (llvm::MachineInstr *)*((_QWORD *)v70 + 28);
              if (v71)
                *((_QWORD *)v70 + 28) = *(_QWORD *)v71;
              else
                v71 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v70 + 128, 72, 3);
              v77 = v76;
              if (v76)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v76, v76, (uint64_t)&v77);
                v76 = 0;
              }
              llvm::MachineInstr::MachineInstr(v71, v70, v69, &v77, 0);
              if (v77)
                llvm::MetadataTracking::untrack((uint64_t)&v77, v77);
              if (v76)
                llvm::MetadataTracking::untrack((uint64_t)&v76, v76);
              if (v3 != (_QWORD *)v68 && (*(_WORD *)(v68 + 44) & 4) != 0)
                *((_WORD *)v71 + 22) |= 0xCu;
              result = sub_1C512CA10(v73, (uint64_t *)v68, (uint64_t)v71);
              if (v75)
                result = llvm::MetadataTracking::untrack((uint64_t)&v75, v75);
              v54 = (_QWORD *)v44;
            }
          }
        }
        else
        {
          v54 = v45;
        }
        v72 = **(unsigned __int16 **)(v44 + 16);
        if (v72 == 13430)
          v46 = 0;
        else
          v46 = v48;
        if (v72 == 13430)
          v45 = 0;
        else
          v45 = v54;
        if ((*(_BYTE *)v44 & 4) == 0)
        {
          while ((*(_WORD *)(v44 + 44) & 8) != 0)
            v44 = *(_QWORD *)(v44 + 8);
        }
        v44 = *(_QWORD *)(v44 + 8);
      }
      while ((_QWORD *)v44 != v3);
    }
  }
  return result;
}

BOOL sub_1C485248C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  BOOL v8;
  BOOL v9;
  __int16 v10;
  uint64_t v11;
  _BOOL8 result;
  unsigned int v13;

  v5 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2[3] + 32) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(a2[3] + 32) + 8), **(_QWORD **)(a2[3] + 32));
  v6 = (unsigned __int16 *)a2[2];
  v7 = *(unsigned __int16 **)(a3 + 16);
  if (*(_BYTE *)(v5 + 296))
    v8 = (*((_QWORD *)v6 + 2) & 0x200) == 0;
  else
    v8 = 1;
  v9 = v8 || (*((_QWORD *)v7 + 2) & 0x20) == 0;
  if (v9 || *v7 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(a3 + 32) + 48) & 0x10) != 0)
    return 0;
  v10 = *(_WORD *)(a3 + 44);
  v11 = *((_QWORD *)v7 + 1);
  if ((v10 & 0xC) != 0 && (v10 & 4) == 0)
  {
    if ((v11 & 0x100000) != 0)
      return 0;
    result = 0;
    while ((*(_WORD *)(a3 + 44) & 8) != 0)
    {
      a3 = *(_QWORD *)(a3 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(a3 + 16) + 10) & 0x10) != 0)
        return result;
    }
  }
  else if ((v11 & 0x100000) != 0)
  {
    return 0;
  }
  v13 = sub_1C612B500(*v6, 3);
  return v13 == -1 || *(_QWORD *)(a2[4] + 32 * v13 + 16) != 0;
}

BOOL sub_1C4852588(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  _BOOL8 result;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2[3] + 32) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(a2[3] + 32) + 8), **(_QWORD **)(a2[3] + 32));
  result = 0;
  if (*(_BYTE *)(v5 + 281))
  {
    if (*(_BYTE *)(v5 + 295))
    {
      v6 = (unsigned __int16 *)a2[2];
      if ((*((_BYTE *)v6 + 17) & 2) != 0)
      {
        v7 = *(unsigned __int16 **)(a3 + 16);
        if ((*((_QWORD *)v7 + 2) & 0x200) != 0)
        {
          v9 = sub_1C612B500(*v6, 3);
          v10 = v9;
          if (v9 == -1)
            v11 = 0;
          else
            v11 = *(_QWORD *)(a2[4] + 32 * v9 + 16) ? 2 : 1;
          v12 = sub_1C612B500(*v7, 3);
          if (v12 == -1)
            v13 = 0;
          else
            v13 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 32 * v12 + 16) ? 2 : 1;
          if (v11 == v13 || v10 != -1 && *(_QWORD *)(a2[4] + 32 * v10 + 16))
            return 1;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C485269C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (a4 - 3) < 3;
}

uint64_t sub_1C48526AC()
{
  return 0;
}

BOOL sub_1C48526B4(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32)
                                                                            + 8)
                                                              + 16))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 8), **(_QWORD **)(*(_QWORD *)(a2 + 24) + 32))+ 280) == 0;
}

BOOL sub_1C48526E8(uint64_t a1, uint64_t a2)
{
  return (**(_WORD **)(a2 + 16) & 0xFFFE) == 11972;
}

uint64_t sub_1C4852704()
{
  return 15;
}

uint64_t sub_1C485270C()
{
  return 0;
}

uint64_t sub_1C4852714()
{
  return 1;
}

BOOL sub_1C485271C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;

  v3 = sub_1C612B500(**(unsigned __int16 **)(a2 + 16), 3);
  return v3 != -1 && *(_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v3 + 16) != 0;
}

_QWORD *sub_1C4852770(__int128 *a1, unsigned int a2, char a3, uint64_t a4, const llvm::APInt *a5)
{
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[17];

  v29[16] = *MEMORY[0x1E0C80C00];
  v27 = v29;
  v28 = 0x800000000;
  v9 = &unk_1C64638A0;
  v10 = 33;
  if (a3 == 9)
  {
    v9 = &unk_1C6463880;
    v10 = 1;
  }
  if (a3 == 4)
    v11 = &unk_1C6463880;
  else
    v11 = v9;
  if (a3 == 4)
    v12 = 1;
  else
    v12 = v10;
  v13 = sub_1C6366AB4(a4, v11[(int)a2 - 1], a5, (llvm *)5, 0, 1, 0);
  v14 = (char *)v27 + 16 * v28;
  *v14 = v13;
  v14[1] = v15;
  LODWORD(v16) = v28 + 1;
  LODWORD(v28) = v28 + 1;
  v17 = a2;
  do
  {
    v18 = *a1;
    if (v16 >= HIDWORD(v28))
    {
      v26 = *a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v16 + 1, 16);
      v18 = v26;
      LODWORD(v16) = v28;
    }
    *((_OWORD *)v27 + v16) = v18;
    LODWORD(v28) = v28 + 1;
    v19 = sub_1C6366AB4(a4, v12, a5, (llvm *)5, 0, 1, 0);
    v21 = v20;
    v22 = v28;
    if (v28 >= (unint64_t)HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 16);
      v22 = v28;
    }
    v23 = (char *)v27 + 16 * v22;
    *v23 = v19;
    v23[1] = v21;
    v16 = (v28 + 1);
    LODWORD(v28) = v28 + 1;
    ++v12;
    ++a1;
    --v17;
  }
  while (v17);
  v24 = sub_1C636E56C(a4, 18, (uint64_t)a5, (llvm *)0xAE, 0, (uint64_t *)v27, v16);
  if (v27 != v29)
    free(v27);
  return v24;
}

_QWORD *sub_1C48529A8(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, unsigned __int8 a5)
{
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t **v20;
  __int128 *v21;
  _QWORD *v22;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[10];

  v30[8] = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int8 **)(a1 + 64);
  v26 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v26, v10, 2);
  v27 = *(_DWORD *)(a1 + 60);
  v28 = v30;
  v29 = 0x400000000;
  if (a4)
  {
    v11 = 0;
    do
    {
      v12 = sub_1C6366AB4(a3, v11, (const llvm::APInt *)&v26, (llvm *)6, 0, 0, 0);
      v15 = *(_QWORD *)(a3 + 832);
      if (v15)
        LOWORD(v15) = *(_WORD *)(v15 + 8);
      v16 = sub_1C5D56C70(a3, 148, (const llvm::APInt *)&v26, (llvm *)a5, 0, a1, a2, v14, (uint64_t)v12, v13, v15);
      v18 = v17;
      v19 = v29;
      if (v29 >= (unint64_t)HIDWORD(v29))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, v29 + 1, 16);
        v19 = v29;
      }
      v20 = (uint64_t **)((char *)v28 + 16 * v19);
      *v20 = v16;
      v20[1] = v18;
      LODWORD(v29) = v29 + 1;
      ++v11;
    }
    while (a4 != v11);
    v21 = (__int128 *)v28;
  }
  else
  {
    v21 = (__int128 *)v30;
  }
  v24 = v26;
  if (v26)
    llvm::MetadataTracking::track((uint64_t)&v24, v26, 2);
  v25 = v27;
  v22 = sub_1C4852770(v21, a4, a5, a3, (const llvm::APInt *)&v24);
  if (v24)
    llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
  if (v28 != v30)
    free(v28);
  if (v26)
    llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
  return v22;
}

uint64_t sub_1C4852BA8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX1PhaseEndAlignment";
  *(_QWORD *)(v2 + 8) = 21;
  *(_QWORD *)(v2 + 16) = "AGX1PhaseEndAlignment";
  *(_QWORD *)(v2 + 24) = 21;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EB290;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4852CEC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4852C2C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EB290) = &off_1E7F9EC88;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7EB298);
  if (v3 != -1)
  {
    v7[0] = sub_1C4852BA8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7EB298, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4852CEC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4852C2C(v0);
}

void sub_1C4852D14(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4852DA8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4852E34()
{
  return "AGX1 phase.end Alignment pass";
}

void *sub_1C4852E44(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C4852E74(uint64_t a1, uint64_t a2)
{
  unint64_t **v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  _BOOL8 v7;
  unint64_t **v8;
  unint64_t *v9;
  _BOOL8 v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  llvm::BasicBlock *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  llvm::MachineFunction *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  unsigned __int8 *v40;

  *(_BYTE *)(a2 + 352) = 2;
  v2 = (unint64_t **)(a2 + 320);
  v3 = *(_QWORD *)(a2 + 320);
  if (v3 == a2 + 320)
    return 0;
  v5 = *(_QWORD *)(a2 + 328);
  if (((unint64_t **)v5 == v2 || *(unint64_t ***)(v5 + 8) == v2)
    && v3 + 48 == (*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF8))
  {
    return 0;
  }
  if (!*(_BYTE *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8), *(_QWORD *)a2)+ 302))return 0;
  v6 = (*(unsigned __int16 *)(*(_QWORD *)a2 + 18) >> 4) & 0x3FF;
  v7 = v6 == 102 || v6 == 106;
  if (v6 != 102 && v6 != 106)
  {
    v8 = *(unint64_t ***)(a2 + 328);
    if (v8 != v2)
    {
      do
      {
        v9 = v8[7];
        if (v9 == (unint64_t *)(v8 + 6))
        {
          v10 = v7;
        }
        else
        {
          do
          {
            v10 = (*(unsigned __int16 *)v9[2] - 814 < 0x12) | v7;
            if (*(unsigned __int16 *)v9[2] - 814 < 0x12 || v7)
              break;
            if ((*(_BYTE *)v9 & 4) == 0)
            {
              while ((*((_WORD *)v9 + 22) & 8) != 0)
                v9 = (unint64_t *)v9[1];
            }
            LODWORD(v7) = 0;
            v9 = (unint64_t *)v9[1];
          }
          while (v9 != (unint64_t *)(v8 + 6));
        }
        v8 = (unint64_t **)v8[1];
        v7 = v10;
      }
      while (v8 != v2);
      if (v10)
        goto LABEL_22;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_22:
  v11 = *v2;
  v12 = *v2 + 6;
  v13 = *v12 & 0xFFFFFFFFFFFFFFF8;
  if (!v13 || (*(_BYTE *)v13 & 4) == 0)
  {
    while ((*(_WORD *)(v13 + 44) & 4) != 0)
      v13 = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8;
  }
  v14 = (llvm::BasicBlock *)v11[2];
  v15 = *(_QWORD *)(a2 + 312);
  if (v15)
    *(_QWORD *)(a2 + 312) = *(_QWORD *)v15;
  else
    v15 = sub_1C484358C(a2 + 128, 232, 3);
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = v14;
  *(_DWORD *)(v15 + 24) = -1;
  *(_QWORD *)(v15 + 48) = (v15 + 48) | 4;
  *(_QWORD *)(v15 + 56) = v15 + 48;
  *(_BYTE *)(v15 + 144) = 0;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_OWORD *)(v15 + 112) = 0u;
  *(_OWORD *)(v15 + 121) = 0u;
  *(_QWORD *)(v15 + 160) = 0;
  *(_QWORD *)(v15 + 168) = 0;
  *(_QWORD *)(v15 + 152) = 0;
  *(_BYTE *)(v15 + 176) = 0;
  *(_DWORD *)(v15 + 187) = 0;
  *(_QWORD *)(v15 + 180) = 0;
  *(_QWORD *)(v15 + 192) = 0;
  *(_DWORD *)(v15 + 199) = 0;
  *(_QWORD *)(v15 + 216) = 0;
  *(_QWORD *)(v15 + 224) = 0;
  *(_QWORD *)(v15 + 208) = 0;
  *(_QWORD *)(v15 + 32) = a2;
  *(_QWORD *)(v15 + 40) = v15;
  if (v14)
  {
    *(_QWORD *)(v15 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v14);
    *(_QWORD *)(v15 + 144) = v16;
  }
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v2, v15);
  v17 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)v15 = v17;
  *(_QWORD *)(v15 + 8) = v2;
  *(_QWORD *)(v17 + 8) = v15;
  *(_QWORD *)(a2 + 320) = v15;
  llvm::MachineBasicBlock::addSuccessor(v11, (_QWORD *)v15, -1);
  v18 = *(_QWORD **)(**(_QWORD **)(a2 + 40) + 360);
  *v18 &= ~4uLL;
  *(_BYTE *)(a2 + 352) = 6;
  *(_BYTE *)(v15 + 176) = 6;
  sub_1C48532D0((unint64_t *)v15, (unint64_t *)(v15 + 48), v11, (unint64_t *)v13);
  v19 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16)) + 8);
  v20 = (llvm::MachineFunction *)v11[4];
  v21 = *(unsigned __int8 **)(v13 + 56);
  v40 = v21;
  if (v21)
    llvm::MetadataTracking::track((uint64_t)&v40, v21, 2);
  v22 = v19 + 18960;
  v23 = *((_QWORD *)v20 + 28);
  if (v23)
    *((_QWORD *)v20 + 28) = *(_QWORD *)v23;
  else
    v23 = sub_1C484358C((uint64_t)v20 + 128, 72, 3);
  *(_QWORD *)&v38 = v40;
  if (v40)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v40, v40, (uint64_t)&v38);
    v40 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v23, v20, v22, (unsigned __int8 **)&v38, 0);
  if ((_QWORD)v38)
    llvm::MetadataTracking::untrack((uint64_t)&v38, (unsigned __int8 *)v38);
  if (v40)
    llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
  v26 = v11[5];
  *(_QWORD *)(v23 + 24) = v26;
  v27 = *(_QWORD *)(v26 + 32);
  v28 = *(unsigned int *)(v23 + 40);
  if ((_DWORD)v28)
  {
    v31 = *(_QWORD *)(v23 + 32);
    v32 = *(_QWORD *)(v27 + 40);
    v33 = 32 * v28;
    do
    {
      if (!*(_BYTE *)v31)
      {
        v34 = *(unsigned int *)(v31 + 4);
        if ((int)v34 >= 0)
          v35 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v34);
        else
          v35 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
        v36 = *v35;
        if (*v35)
        {
          v37 = *(_QWORD *)(v36 + 16);
          *(_QWORD *)(v36 + 16) = v31;
          *(_QWORD *)(v31 + 16) = v37;
          if ((*(_BYTE *)(v31 + 3) & 1) != 0)
          {
            *(_QWORD *)(v31 + 24) = v36;
          }
          else
          {
            *(_QWORD *)(v31 + 24) = 0;
            v35 = (uint64_t *)(v37 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v31 + 16) = v31;
          *(_QWORD *)(v31 + 24) = 0;
        }
        *v35 = v31;
      }
      v31 += 32;
      v33 -= 32;
    }
    while (v33);
  }
  v29 = *(_QWORD *)(v27 + 728);
  if (v29)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v29 + 24))(v29, v23);
  v30 = *v12 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v23 = v30 | *(_QWORD *)v23 & 7;
  *(_QWORD *)(v23 + 8) = v12;
  *(_QWORD *)(v30 + 8) = v23;
  *v12 = *v12 & 7 | v23;
  *((_QWORD *)&v38 + 1) = 0;
  *(_QWORD *)&v39 = v15;
  LODWORD(v38) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v20, (const llvm::MachineOperand *)&v38);
  v24 = 1;
  LODWORD(v38) = 1;
  *((_QWORD *)&v38 + 1) = 0;
  *(_QWORD *)&v39 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v20, (const llvm::MachineOperand *)&v38);
  v38 = 0u;
  v39 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v20, (const llvm::MachineOperand *)&v38);
  return v24;
}

unint64_t *sub_1C48532D0(unint64_t *result, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v7;
  unint64_t *v8;

  if (a2 == a4)
    return result;
  if (!a4)
  {
    v4 = 0;
LABEL_7:
    while ((*((_WORD *)v4 + 22) & 8) != 0)
      v4 = (unint64_t *)v4[1];
    goto LABEL_8;
  }
  v4 = a4;
  if ((*(_BYTE *)a4 & 4) == 0)
    goto LABEL_7;
LABEL_8:
  v5 = (unint64_t *)v4[1];
  if (v5 != a4 && v5 != a2)
  {
    if (result != a3)
    {
      v7 = result[5];
      v8 = a4;
      do
      {
        v8[3] = v7;
        v8 = (unint64_t *)v8[1];
      }
      while (v8 != v5);
    }
    return sub_1C4785D30(a2, a4, v5);
  }
  return result;
}

uint64_t sub_1C485334C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1C5FF1550(a1, a2);
  *(_DWORD *)(a1 + 1656) = 0;
  *(_DWORD *)(a1 + 1712) = 0;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1747) = 0u;
  sub_1C558AC98((_QWORD *)(a1 + 1496));
  *(_DWORD *)(a1 + 1576) = 0;
  sub_1C5571D80((_DWORD *)(a1 + 1776));
  *(_QWORD *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  v4 = *(unsigned int *)(a1 + 1072);
  if ((_DWORD)v4)
    bzero(*(void **)(a1 + 1064), 8 * v4);
  *(_QWORD *)(a1 + 1144) = 0;
  v5 = *(_QWORD *)(a1 + 264);
  *(_DWORD *)(v5 + 144) = 0;
  *(_BYTE *)(v5 + 148) = 0;
  return v3;
}

llvm::Constant *sub_1C48533F8(uint64_t a1, llvm::Constant *a2)
{
  uint64_t Metadata;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  llvm::Constant *result;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t Symbol;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;

  if (!a2 || *((_BYTE *)a2 + 16) != 3)
    return sub_1C5FF4488((_QWORD *)a1, a2);
  Metadata = llvm::Value::getMetadata((uint64_t)a2, "agx.bind", 8uLL);
  if (!Metadata)
    goto LABEL_21;
  v5 = (_QWORD *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
  v6 = v5[1];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v5 + 128) + 24) + 8) == 17)
  {
    if (*(_BYTE *)v6 != 1 || (v7 = *(_QWORD *)(v6 + 128), *(_BYTE *)(v7 + 16) != 16))
    {
      v8 = (_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8));
      v9 = *(_QWORD *)(*v8 + 128);
      v10 = (_QWORD *)(v9 + 24);
      if (*(_DWORD *)(v9 + 32) >= 0x41u)
        v10 = (_QWORD *)*v10;
      v11 = (_QWORD *)*v10;
      v12 = v8[1];
      goto LABEL_15;
    }
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 128);
  }
  v14 = (_QWORD *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u)
    v14 = (_QWORD *)*v14;
  v11 = (_QWORD *)*v14;
  v12 = v5[2];
LABEL_15:
  v15 = *(_QWORD *)(v12 + 128);
  v16 = (unsigned int *)(v15 + 24);
  if (*(_DWORD *)(v15 + 32) >= 0x41u)
    v16 = *(unsigned int **)v16;
  if ((_DWORD)v11 != 114 && (_DWORD)v11 != 18)
  {
LABEL_21:
    Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), a2);
    v19 = *(_QWORD *)(a1 + 264);
    result = (llvm::Constant *)sub_1C484358C(v19 + 192, 24, 3);
    v20 = *(unsigned __int8 *)(*(_QWORD *)(v19 + 152) + 18) << 16;
    *(_BYTE *)result = 2;
    *(_DWORD *)((char *)result + 1) = v20 | (*((unsigned __int8 *)result + 4) << 24);
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = Symbol;
    return result;
  }
  v21 = *v16;
  v22 = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), a2);
  v23 = *(_QWORD *)(a1 + 264);
  v24 = sub_1C484358C(v23 + 192, 24, 3);
  v25 = v24;
  if (*(_BYTE *)(*(_QWORD *)(v23 + 152) + 18))
    v26 = 65689;
  else
    v26 = 153;
  *(_BYTE *)v24 = 2;
  *(_DWORD *)(v24 + 1) = v26 | (*(unsigned __int8 *)(v24 + 4) << 24);
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)(v24 + 16) = v22;
  v27 = sub_1C484358C(v23 + 192, 24, 3);
  *(_BYTE *)v27 = 1;
  *(_DWORD *)(v27 + 1) = *(unsigned __int8 *)(v27 + 4) << 24;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 16) = v21;
  result = (llvm::Constant *)sub_1C484358C(v23 + 192, 32, 3);
  *(_BYTE *)result = 0;
  *(_DWORD *)((char *)result + 1) = *((unsigned __int8 *)result + 4) << 24;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = v25;
  *((_QWORD *)result + 3) = v27;
  return result;
}

const llvm::GlobalValue *sub_1C4853620(llvm::TargetMachine **a1, const llvm::GlobalValue *a2)
{
  const llvm::GlobalValue *result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v17;

  result = (const llvm::GlobalValue *)llvm::Value::getMetadata((uint64_t)a2, "agx.bind", 8uLL);
  if (!result)
    goto LABEL_2;
  v5 = (_QWORD *)((char *)result - 8 * *((unsigned int *)result + 2));
  v6 = v5[1];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v5 + 128) + 24) + 8) == 17)
  {
    if (*(_BYTE *)v6 != 1 || (v7 = *(_QWORD *)(v6 + 128), *(_BYTE *)(v7 + 16) != 16))
    {
      v8 = (_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8));
      v9 = *(_QWORD *)(*v8 + 128);
      v10 = (_QWORD *)(v9 + 24);
      if (*(_DWORD *)(v9 + 32) >= 0x41u)
        v10 = (_QWORD *)*v10;
      v11 = (_QWORD *)*v10;
      v12 = v8[1];
      goto LABEL_14;
    }
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 128);
  }
  v13 = (_QWORD *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u)
    v13 = (_QWORD *)*v13;
  v11 = (_QWORD *)*v13;
  v12 = v5[2];
LABEL_14:
  v14 = *(_QWORD *)(v12 + 128);
  v15 = (_QWORD *)(v14 + 24);
  if (*(_DWORD *)(v14 + 32) >= 0x41u)
    v15 = (_QWORD *)*v15;
  if ((_DWORD)v11 == 114 || (_DWORD)v11 == 18)
  {
    v17 = (_QWORD *)*v15;
    result = (const llvm::GlobalValue *)llvm::TargetMachine::getSymbol(a1[31], a2);
    *((_DWORD *)result + 4) = (_DWORD)v17;
    return result;
  }
LABEL_2:
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFFFFFF00) == 0x200)
    return sub_1C5FEC228((const llvm::GlobalValue *)a1, a2);
  return result;
}

uint64_t sub_1C4853754(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  char v5;
  BOOL v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int v14;
  int v15;
  uint64_t v17;
  BOOL v49;
  uint64_t v50;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 16);
  v3 = *(_QWORD *)(a1 + 248);
  v4 = (unsigned __int16 *)(v3 + 496);
  v5 = *(_BYTE *)(v3 + 519);
  v6 = v5 < 0;
  v8 = *(unsigned __int16 **)(v3 + 496);
  v7 = *(_QWORD *)(v3 + 504);
  if (v5 < 0)
    v4 = v8;
  v9 = v5 & 0x7F;
  if (!v6)
    v7 = v9;
  if (v7 != 7)
  {
    if (v7 != 4)
    {
      if (v7 != 3)
      {
LABEL_28:
        v17 = 0;
        goto LABEL_195;
      }
      if (*v4 == 12647 && *((_BYTE *)v4 + 2) == 48)
      {
        v17 = 0x100000001;
      }
      else if (*v4 == 12647 && *((_BYTE *)v4 + 2) == 49)
      {
        v17 = 0x100000003;
      }
      else if (*v4 == 12647 && *((_BYTE *)v4 + 2) == 50)
      {
        v17 = 0x10000000ALL;
      }
      else if (*v4 == 12647 && *((_BYTE *)v4 + 2) == 51)
      {
        v17 = 0x100000010;
      }
      else
      {
        v14 = *v4;
        v15 = *((unsigned __int8 *)v4 + 2);
        if (v14 != 12647 || v15 != 52)
          goto LABEL_28;
        v17 = 0x100000015;
      }
      goto LABEL_195;
    }
    v17 = 0x100000019;
    if (*(_DWORD *)v4 == 2016555367)
    {
      v17 = 0x10000000FLL;
      goto LABEL_195;
    }
    v49 = *(_DWORD *)v4 == 1731473767;
LABEL_156:
    if (!v49)
      v17 = 0;
    goto LABEL_195;
  }
  v17 = 0x100000019;
  if (*(_DWORD *)v4 == 1882206567 && *(_DWORD *)((char *)v4 + 3) == 811740528)
  {
    v17 = 0x100000002;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1831940455 && *(_DWORD *)((char *)v4 + 3) == 811674989)
  {
    v17 = 0x100000004;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1831940455 && *(_DWORD *)((char *)v4 + 3) == 811740525)
  {
    v17 = 0x100000005;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882272103 && *(_DWORD *)((char *)v4 + 3) == 811674992)
  {
    v17 = 0x100000006;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882272103 && *(_DWORD *)((char *)v4 + 3) == 811740528)
  {
    v17 = 0x100000007;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1731277159 && *(_DWORD *)((char *)v4 + 3) == 811674983)
  {
    v17 = 0x100000008;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1731277159 && *(_DWORD *)((char *)v4 + 3) == 811740519)
  {
    v17 = 0x100000009;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1832005991 && *(_DWORD *)((char *)v4 + 3) == 811674989)
  {
    v17 = 0x10000000BLL;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882337639 && *(_DWORD *)((char *)v4 + 3) == 811674992)
  {
    v17 = 0x10000000CLL;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882337639 && *(_DWORD *)((char *)v4 + 3) == 811740528)
  {
    v17 = 0x10000000DLL;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1731342695 && *(_DWORD *)((char *)v4 + 3) == 811740519)
  {
    v17 = 0x10000000ELL;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882403175 && *(_DWORD *)((char *)v4 + 3) == 811674992)
  {
    v17 = 0x100000011;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882403175 && *(_DWORD *)((char *)v4 + 3) == 811740528)
  {
    v17 = 0x100000012;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1731408231 && *(_DWORD *)((char *)v4 + 3) == 811674983)
  {
    v17 = 0x100000013;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1731408231 && *(_DWORD *)((char *)v4 + 3) == 811740519)
  {
    v17 = 0x100000014;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1932734823 && *(_DWORD *)((char *)v4 + 3) == 811674995)
  {
    v17 = 0x100000020;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1932734823 && *(_DWORD *)((char *)v4 + 3) == 811740531)
  {
    v17 = 0x100000021;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1664299367 && *(_DWORD *)((char *)v4 + 3) == 811674979)
  {
    v17 = 0x100000022;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1664299367 && *(_DWORD *)((char *)v4 + 3) == 811740515)
  {
    v17 = 0x100000023;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1681076583 && *(_DWORD *)((char *)v4 + 3) == 811674980)
  {
    v17 = 0x100000024;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1681076583 && *(_DWORD *)((char *)v4 + 3) == 811740516)
  {
    v17 = 0x100000025;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882468711 && *(_DWORD *)((char *)v4 + 3) == 811674992)
  {
    v17 = 0x100000016;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1882468711 && *(_DWORD *)((char *)v4 + 3) == 811740528)
  {
    v17 = 0x100000017;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 == 1731473767 && *(_DWORD *)((char *)v4 + 3) == 811674983)
  {
    v17 = 0x100000018;
    goto LABEL_195;
  }
  if (*(_DWORD *)v4 != 1731473767 || *(_DWORD *)((char *)v4 + 3) != 811740519)
  {
    if (*(_DWORD *)v4 == 1932800359 && *(_DWORD *)((char *)v4 + 3) == 811674995)
    {
      v17 = 0x10000001ALL;
      goto LABEL_195;
    }
    if (*(_DWORD *)v4 == 1932800359 && *(_DWORD *)((char *)v4 + 3) == 811740531)
    {
      v17 = 0x10000001BLL;
      goto LABEL_195;
    }
    if (*(_DWORD *)v4 == 1664364903 && *(_DWORD *)((char *)v4 + 3) == 811674979)
    {
      v17 = 0x10000001CLL;
      goto LABEL_195;
    }
    if (*(_DWORD *)v4 == 1664364903 && *(_DWORD *)((char *)v4 + 3) == 811740515)
    {
      v17 = 0x10000001DLL;
      goto LABEL_195;
    }
    if (*(_DWORD *)v4 == 1681142119 && *(_DWORD *)((char *)v4 + 3) == 811674980)
    {
      v17 = 0x10000001ELL;
      goto LABEL_195;
    }
    if (*(_DWORD *)v4 == 1681142119 && *(_DWORD *)((char *)v4 + 3) == 811740516)
    {
      v17 = 0x10000001FLL;
      goto LABEL_195;
    }
    v17 = 0x100000026;
    v49 = (*(_DWORD *)v4 ^ 0x70353167 | *(_DWORD *)((char *)v4 + 3) ^ 0x30622D70) == 0;
    goto LABEL_156;
  }
LABEL_195:
  if ((v17 & 0xFF00000000) != 0)
    v50 = v17;
  else
    v50 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 88))(v2, v50);
}

void sub_1C4853CD8(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  int v13;
  int v14;
  int v16;
  int v17;
  char v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned __int16 *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  int v33;
  const llvm::APInt *v34;
  unsigned int NumExplicitOperands;
  _QWORD *v36;
  unint64_t v37;
  _DWORD *v38;
  _BYTE *v39;
  uint64_t v40;
  const llvm::APInt *v41;
  const llvm::APInt *v42;
  char v43;
  const llvm::APInt *v44;
  int v45;
  float v46;
  _BYTE *v47;
  float v48;
  uint64_t i;
  uint64_t v50;
  uint64_t v51;
  uint64_t j;
  uint64_t v53;
  llvm::MCStreamer *v54;
  uint64_t v55;
  const char *v56;
  int v57;
  _QWORD v58[2];
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  int v62;
  uint64_t v63;
  uint64_t v64[2];
  char v65[8];
  _QWORD v66[2];
  int v67;
  char v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  int v72;
  char v73;
  const llvm::APInt *v74;
  unsigned int v75;
  const llvm::APInt *v76;
  _DWORD v77[2];
  _BYTE *v78;
  __int128 v79;
  _BYTE v80[64];
  _QWORD v81[2];
  _BYTE *v82;
  uint64_t v83;
  _BYTE v84[136];
  char *v85;
  __int128 v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD v89[5];

  v89[3] = *MEMORY[0x1E0C80C00];
  v64[0] = *(_QWORD *)(a1 + 264);
  v64[1] = a1;
  v81[0] = 0;
  v81[1] = 0;
  v82 = v84;
  v83 = 0x800000000;
  v84[128] = 0;
  v4 = **(unsigned __int16 **)(a2 + 16);
  if ((v4 - 789) > 2)
    goto LABEL_12;
  v5 = *(_QWORD **)(*(_QWORD *)(a2 + 24) + 32);
  if ((*(_WORD *)(*v5 + 18) & 0x3FF0) != 0x640)
    goto LABEL_12;
  v6 = v5[2];
  v7 = *(_BYTE *)(v6 + 79);
  v8 = v7;
  v9 = v7 & 0x7F;
  if (v8 < 0)
    v9 = *(_QWORD *)(v6 + 64);
  if (v9 != 7)
    goto LABEL_12;
  v12 = *(int **)(v6 + 56);
  v10 = (int *)(v6 + 56);
  v11 = v12;
  if (v8 < 0)
    v10 = v11;
  v13 = *v10;
  v14 = *(int *)((char *)v10 + 3);
  if (v13 != 1882206567 || v14 != 811674992)
  {
LABEL_12:
    v16 = *(_DWORD *)(a1 + 7864);
    if ((v4 & 0xFFFE) == 0x2D4)
    {
      v17 = -1;
    }
    else
    {
      v18 = sub_1C485C3C8(**(unsigned __int16 **)(a2 + 16));
      if ((v4 - 727) >= 2)
        v19 = 0;
      else
        v19 = -2;
      if ((v18 & 1) != 0)
        v17 = -1;
      else
        v17 = v19;
    }
    *(_DWORD *)(a1 + 7864) = (v17 + v16) & ~((v17 + v16) >> 31);
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 96))(*(_QWORD *)(a1 + 272)))
      goto LABEL_21;
    v78 = v80;
    v79 = xmmword_1C64638C0;
    sub_1C613932C((uint64_t)v58, (uint64_t)&v78);
    v27 = *(unsigned __int16 **)(a2 + 16);
    v28 = *((_QWORD *)v27 + 1);
    if ((v28 & 0x2000) == 0)
    {
      v29 = *v27;
      if (v29 == 4580)
      {
        if ((~**(_DWORD **)(a2 + 32) & 0x5000000) == 0)
        {
          if (*(_DWORD *)(a1 + 7864))
          {
            v30 = 0;
            do
            {
              if (v60 == v61)
                llvm::raw_ostream::write((llvm::raw_ostream *)v58, "\t", 1uLL);
              else
                *v61++ = 9;
              ++v30;
            }
            while (v30 != *(_DWORD *)(a1 + 7864));
          }
          v39 = v61;
          if ((unint64_t)(v60 - v61) > 0x25)
          {
            *(_OWORD *)v61 = *(_OWORD *)"\t// no-op MFUNI for improved clausing\n";
            qmemcpy(v39 + 16, "for improved clausing\n", 22);
            v61 += 38;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v58, "\t// no-op MFUNI for improved clausing\n", 0x26uLL);
          }
          goto LABEL_137;
        }
      }
      else if ((v29 - 9) <= 0x3C && ((1 << (v29 - 9)) & 0x1000000000000605) != 0
             || !*v27)
      {
        goto LABEL_72;
      }
      if ((v28 & 0x10) == 0 && (v27[8] & 1) == 0)
      {
LABEL_137:
        if ((_QWORD)v79)
        {
          v54 = *(llvm::MCStreamer **)(a1 + 272);
          v56 = *(const char **)v63;
          v55 = *(_QWORD *)(v63 + 8);
          LOWORD(v88) = 261;
          v85 = (char *)v56;
          *(_QWORD *)&v86 = v55;
          llvm::MCStreamer::emitRawText(v54, (const char **)&v85);
        }
        v58[0] = off_1E81A6E70;
        if (v62 == 1 && v59)
          MEMORY[0x1CAA32F9C](v59, 0x1000C8077774924);
        if (v78 != v80)
          free(v78);
LABEL_21:
        sub_1C495CC90(v64, a2, (uint64_t)v81);
        (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 272) + 1184))(*(_QWORD *)(a1 + 272), v81, *(_QWORD *)(*(_QWORD *)(a1 + 280) + 16));
        v20 = *(_DWORD *)(a1 + 7864);
        v21 = **(unsigned __int16 **)(a2 + 16);
        v22 = 7;
        if (v21 > 0x7DD)
        {
          if (v21 - 2408 > 0x11)
          {
            if (v21 - 2014 > 8)
              goto LABEL_66;
            v24 = 1 << (v21 + 34);
            if ((v24 & 0x4E) != 0)
              goto LABEL_39;
            v25 = 432;
          }
          else
          {
            v24 = 1 << (v21 - 104);
            if ((v24 & 0x9C4E) != 0)
              goto LABEL_39;
            v25 = 221616;
          }
          if ((v24 & v25) != 0)
            goto LABEL_40;
        }
        else
        {
          if (**(unsigned __int16 **)(a2 + 16) > 0x464u)
          {
            if (v21 - 1125 <= 8)
            {
              v23 = 1 << (v21 - 101);
              if ((v23 & 0x1B) == 0)
              {
                if ((v23 & 0xE4) == 0)
                  goto LABEL_38;
LABEL_39:
                v22 = 6;
              }
LABEL_40:
              v26 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v22 + 16);
              goto LABEL_41;
            }
            goto LABEL_66;
          }
          if (v21 - 936 < 2)
            goto LABEL_39;
          if (v21 == 935)
            goto LABEL_40;
          if (v21 != 938)
          {
LABEL_66:
            v26 = sub_1C485C3C8(v21);
LABEL_41:
            *(_DWORD *)(a1 + 7864) = (v26 + v20) & ~((v26 + v20) >> 31);
            if (v82 != v84)
              free(v82);
            return;
          }
        }
LABEL_38:
        v22 = 5;
        goto LABEL_40;
      }
LABEL_72:
      v85 = (char *)&v86 + 8;
      *(_QWORD *)&v86 = 0x400000000;
      v89[0] = 0;
      v89[1] = 0;
      v88 = v89;
      NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(a2);
      v36 = 0;
      if (NumExplicitOperands >= 2)
      {
        v37 = 1;
        do
        {
          v38 = (_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v37);
          if (*v38 == 7)
            __asm { BR              X11 }
          ++v37;
        }
        while (v37 < llvm::MachineInstr::getNumExplicitOperands(a2));
        v36 = (_QWORD *)v89[0];
      }
      sub_1C47655E8((uint64_t)&v88, v36);
      if (v85 != (char *)&v86 + 8)
        free(v85);
      goto LABEL_137;
    }
    v31 = 0;
    LOBYTE(v57) = 0;
    do
    {
      v32 = (char *)&v74 + v31;
      *((_DWORD *)v32 + 2) = 1;
      *(_QWORD *)v32 = 0;
      v31 += 16;
    }
    while (v31 != 32);
    v68 = v68 & 0xF0 | 2;
    v67 = 23;
    v66[0] = &unk_1C866F184;
    v66[1] = 0;
    llvm::detail::IEEEFloat::normalize((llvm::APInt *)v66, 1, 0);
    v73 = v73 & 0xF0 | 2;
    v72 = 23;
    v70 = &unk_1C866F184;
    v71 = 0;
    llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v70, 1, 0);
    v33 = **(_WORD **)(a2 + 16) & 0xFFFE;
    switch(v33)
    {
      case 4066:
        v44 = (const llvm::APInt *)*(unsigned __int16 *)(*(_QWORD *)(a2 + 32) + 80);
        if (v75 >= 0x41 && v74)
          MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
        v74 = v44;
        v75 = 16;
        llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v86, &v74);
        sub_1C48552C0((uint64_t)v66, (uint64_t)&v86);
        if ((_UNKNOWN *)v86 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v86 + 1);
        }
        else if ((*(_DWORD *)(v86 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v86 + 1))
        {
          MEMORY[0x1CAA32F9C](*((_QWORD *)&v86 + 1), 0x1000C8000313F17);
        }
        llvm::APFloat::convert((uint64_t)v65, &unk_1C866F184, 0, &v57);
        break;
      case 4068:
        v40 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 80);
        v41 = (const llvm::APInt *)(unsigned __int16)v40;
        if (v75 >= 0x41 && v74)
        {
          MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
          v40 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 80);
        }
        v74 = v41;
        v75 = 16;
        v42 = (const llvm::APInt *)WORD1(v40);
        if (v77[0] >= 0x41u && v76)
          MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
        v76 = v42;
        v77[0] = 16;
        llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v86, &v74);
        sub_1C48552C0((uint64_t)v66, (uint64_t)&v86);
        if ((_UNKNOWN *)v86 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v86 + 1);
        }
        else if ((*(_DWORD *)(v86 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v86 + 1))
        {
          MEMORY[0x1CAA32F9C](*((_QWORD *)&v86 + 1), 0x1000C8000313F17);
        }
        llvm::APFloat::convert((uint64_t)v65, &unk_1C866F184, 0, &v57);
        llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v86, &v76);
        sub_1C48552C0((uint64_t)&v70, (uint64_t)&v86);
        if ((_UNKNOWN *)v86 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v86 + 1);
        }
        else if ((*(_DWORD *)(v86 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v86 + 1))
        {
          MEMORY[0x1CAA32F9C](*((_QWORD *)&v86 + 1), 0x1000C8000313F17);
        }
        llvm::APFloat::convert((uint64_t)&v69, &unk_1C866F184, 0, &v57);
        v43 = 1;
LABEL_100:
        if (*(_DWORD *)(a1 + 7864))
        {
          v45 = 0;
          do
          {
            if (v60 == v61)
              llvm::raw_ostream::write((llvm::raw_ostream *)v58, "\t", 1uLL);
            else
              *v61++ = 9;
            ++v45;
          }
          while (v45 != *(_DWORD *)(a1 + 7864));
        }
        if ((unint64_t)(v60 - v61) > 3)
        {
          *(_DWORD *)v61 = 539963145;
          v61 += 4;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v58, "\t// ", 4uLL);
        }
        v46 = llvm::APFloat::convertToFloat((llvm::APFloat *)v65);
        llvm::write_double((llvm::raw_ostream *)v58, 0, 0, 0, v46);
        if ((unint64_t)(v60 - v61) > 1)
        {
          *(_WORD *)v61 = 10272;
          v61 += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v58, " (", 2uLL);
        }
        v85 = (char *)&v87;
        v86 = xmmword_1C64638D0;
        llvm::APInt::toString((uint64_t)&v74, &v85, 0xAu, 1, 0);
        llvm::raw_ostream::write((llvm::raw_ostream *)v58, v85, v86);
        if (v85 != (char *)&v87)
          free(v85);
        if (v60 == v61)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v58, ")", 1uLL);
          v47 = v61;
          if ((v43 & 1) != 0)
          {
LABEL_115:
            if ((unint64_t)(v60 - v47) > 2)
            {
              v47[2] = 32;
              *(_WORD *)v47 = 11296;
              v61 += 3;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v58, " , ", 3uLL);
            }
            v48 = llvm::APFloat::convertToFloat((llvm::APFloat *)&v69);
            llvm::write_double((llvm::raw_ostream *)v58, 0, 0, 0, v48);
            if ((unint64_t)(v60 - v61) > 1)
            {
              *(_WORD *)v61 = 10272;
              v61 += 2;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v58, " (", 2uLL);
            }
            v85 = (char *)&v87;
            v86 = xmmword_1C64638D0;
            llvm::APInt::toString((uint64_t)&v76, &v85, 0xAu, 1, 0);
            llvm::raw_ostream::write((llvm::raw_ostream *)v58, v85, v86);
            if (v85 != (char *)&v87)
              free(v85);
            if (v60 == v61)
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v58, ")", 1uLL);
              v47 = v61;
            }
            else
            {
              *v61 = 41;
              v47 = ++v61;
            }
          }
        }
        else
        {
          *v61 = 41;
          v47 = ++v61;
          if ((v43 & 1) != 0)
            goto LABEL_115;
        }
        if (v60 == v47)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v58, "\n", 1uLL);
        }
        else
        {
          *v47 = 10;
          ++v61;
        }
LABEL_125:
        for (i = 0; i != -64; i -= 32)
        {
          v50 = *(uint64_t *)((char *)&v70 + i);
          if ((_UNKNOWN *)v50 == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)((char *)&v71 + i));
          }
          else if ((*(_DWORD *)(v50 + 8) - 64) <= 0xFFFFFF7F)
          {
            v51 = *(uint64_t *)((char *)&v71 + i);
            if (v51)
              MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
          }
        }
        for (j = 0; j != -8; j -= 4)
        {
          if (v77[j] >= 0x41u)
          {
            v53 = *(_QWORD *)&v77[j - 2];
            if (v53)
              MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
          }
        }
        goto LABEL_137;
      case 4070:
        v34 = (const llvm::APInt *)*(unsigned int *)(*(_QWORD *)(a2 + 32) + 80);
        if (v75 >= 0x41 && v74)
          MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
        v74 = v34;
        v75 = 32;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v86, &v74);
        sub_1C48552C0((uint64_t)v66, (uint64_t)&v86);
        if ((_UNKNOWN *)v86 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v86 + 1);
        }
        else if ((*(_DWORD *)(v86 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v86 + 1))
        {
          MEMORY[0x1CAA32F9C](*((_QWORD *)&v86 + 1), 0x1000C8000313F17);
        }
        break;
      default:
        goto LABEL_125;
    }
    v43 = 0;
    goto LABEL_100;
  }
}

unint64_t sub_1C4854E58(uint64_t a1, unsigned int *a2)
{
  unsigned __int8 v4;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int *v11;

  if (*(_QWORD *)(a1 + 48))
  {
    sub_1C4778ED8((uint64_t **)(a1 + 32), a2, a2);
    return ((unint64_t)v4 << 32) | 1;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *a2;
    if (!(_DWORD)v7)
      goto LABEL_11;
    v9 = 4 * v7;
    v10 = *(_DWORD **)a1;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 4;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return 1;
LABEL_10:
    if (v7 > 3)
    {
      do
      {
        v11 = (unsigned int *)(*(_QWORD *)a1 + 4 * v7 - 4);
        sub_1C4778ED8((uint64_t **)(a1 + 32), v11, v11);
        LODWORD(v7) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v7;
      }
      while ((_DWORD)v7);
      sub_1C4778ED8((uint64_t **)(a1 + 32), a2, a2);
    }
    else
    {
LABEL_11:
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v7 + 1, 4);
        v6 = *(_DWORD **)a1;
        v7 = *(unsigned int *)(a1 + 8);
      }
      v6[v7] = v8;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

uint64_t sub_1C4854F6C(uint64_t a1, llvm::MachineFunction *a2)
{
  int v4;
  _QWORD **v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t AnalysisPass;
  const llvm::MachineLoopInfo *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  __int16 v20;

  *((_BYTE *)a2 + 352) = 6;
  v4 = *(_WORD *)(*(_QWORD *)a2 + 18) & 0x3FF0;
  *(_BYTE *)(*(_QWORD *)(a1 + 264) + 148) = v4 == 1600;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  sub_1C5FEDEA0(a1);
  v5 = (_QWORD **)*((_QWORD *)a2 + 43);
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 48);
  if (v4 == 1600)
  {
    ((void (*)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*v5)[1])(*((_QWORD *)a2 + 43), 12, *(_QWORD *)(*((_QWORD *)a2 + 7) + 48), 1, 0, 1, 3);
  }
  else
  {
    v7 = *(unsigned __int16 *)(*(_QWORD *)a2 + 18);
    v8 = (v7 >> 4) & 0x3FF;
    if (v8 != 100 && (v8 - 109) >= 0xFFFFFFF7 && (v7 & 0x3FF0) != 0x640)
    {
      if (*(_BYTE *)(*((_QWORD *)a2 + 1) + 1687))
      {
        v10 = *(_QWORD *)(*(_QWORD *)a2 + 40);
        v19 = "agx.stack_oob";
        v20 = 259;
        if (llvm::Module::getNamedMetadata(v10, (uint64_t)&v19))
          v6 += 32;
      }
    }
    ((void (*)(_QWORD **, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*v5)[1])(v5, 11, v6, 1, 0, 1, 3);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*v5[1] + 96))(v5[1], *(_QWORD *)a2, v6);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*v5[1] + 112))(v5[1], *(_QWORD *)a2, 0);
  }
  v11 = (*(unsigned __int16 *)(*(_QWORD *)a2 + 18) >> 4) & 0x3FF;
  if (v11)
    v12 = v11 == 8;
  else
    v12 = 1;
  if (v12 || v11 == 255)
  {
    v16 = ((uint64_t (*)(_QWORD **, uint64_t))(*v5)[74])(v5, 100);
    v17 = ((uint64_t (*)(_QWORD **))(*v5)[4])(v5);
    if (v16)
    {
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 24))(v17, v16);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 360))(v18))
        ((void (*)(_QWORD **, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*v5)[1])(v5, 12, v6, 1, 0, 1, 3);
    }
  }
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::MachineLoopInfo::ID, 1);
  if (AnalysisPass)
    v14 = (const llvm::MachineLoopInfo *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineLoopInfo::ID);
  else
    v14 = 0;
  llvm::GPUMetadataEmitter::runOnMachineFunction((llvm::GPUMetadataEmitter *)(a1 + 1488), a2, v14, *(llvm::MCContext **)(a1 + 264), *(llvm::MCStreamer **)(a1 + 272));
  return 0;
}

uint64_t sub_1C48551BC(uint64_t a1, uint64_t a2, unsigned int a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  uint64_t (*v18)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t);

  if (a4 && *a4)
    return 1;
  v9 = *(_QWORD *)(a1 + 7856);
  if (!v9)
  {
    v12 = *(_QWORD **)(a1 + 248);
    v13 = v12[1];
    v14 = v12[70];
    v15 = v12[72];
    v16 = v12[71];
    v17 = *(void (**)(void))(v13 + 288);
    if (v17)
      v17();
    v18 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t))(v13 + 136);
    if (!v18)
    {
      *(_QWORD *)(a1 + 7856) = 0;
      return 1;
    }
    v9 = v18(v12 + 56, 0, v14, v15, v16);
    *(_QWORD *)(a1 + 7856) = v9;
    if (!v9)
      return 1;
  }
  v10 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v10 + 32 * a3))
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, a5, *(unsigned int *)(v10 + 32 * a3 + 4));
    return 0;
  }
  return 1;
}

uint64_t sub_1C48552A0(llvm::MCContext **a1, llvm::Module *a2)
{
  return llvm::GPUMetadataEmitter::emitEndOfAsmFile((llvm::GPUMetadataEmitter *)(a1 + 186), a2, a1[33], a1[34]);
}

const char *sub_1C48552B0()
{
  return "AGX2 Assembly Printer";
}

uint64_t sub_1C48552C0(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  void *v5;
  void *v6;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_DWORD **)a1;
  v5 = &unk_1C866F1C0;
  v6 = *(void **)a2;
  if (*(_UNKNOWN **)a1 != &unk_1C866F1C0 && v6 != &unk_1C866F1C0)
  {
    if ((v4[2] - 64) <= 0xFFFFFF7F)
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (v12)
      {
        MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
        v6 = *(void **)a2;
      }
    }
    *(_QWORD *)a1 = v6;
    goto LABEL_17;
  }
  if (v4 == (_DWORD *)&unk_1C866F1C0 && v6 == &unk_1C866F1C0)
  {
    if (a1 == a2)
      return a1;
    sub_1C4773C74((uint64_t *)(a1 + 8));
    v5 = *(void **)a2;
    goto LABEL_22;
  }
  if (a1 != a2)
  {
    if (v4 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)(a1 + 8));
    }
    else
    {
      if ((v4[2] - 64) > 0xFFFFFF7F || (v13 = *(_QWORD *)(a1 + 8)) == 0)
      {
LABEL_13:
        if (*(_UNKNOWN **)a2 != &unk_1C866F1C0)
        {
          *(_QWORD *)a1 = &unk_1C866F210;
          *(_QWORD *)a1 = *(_QWORD *)a2;
LABEL_17:
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          v9 = *(_BYTE *)(a1 + 20) & 0xF8 | *(_BYTE *)(a2 + 20) & 7;
          *(_BYTE *)(a1 + 20) = v9;
          *(_BYTE *)(a1 + 20) = v9 & 0xF7 | *(_BYTE *)(a2 + 20) & 8;
LABEL_18:
          *(_QWORD *)a2 = &unk_1C866F210;
          return a1;
        }
LABEL_22:
        *(_QWORD *)a1 = v5;
        v11 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a1 + 8) = v11;
        goto LABEL_18;
      }
      MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
    }
    v5 = &unk_1C866F1C0;
    goto LABEL_13;
  }
  return a1;
}

void sub_1C485542C(_DWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *i;
  uint64_t j;
  unsigned __int16 *v8;
  int v9;
  BOOL v11;
  const llvm::TargetSubtargetInfo *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *k;
  _QWORD *v32;
  uint64_t m;
  unsigned __int16 *v34;
  int v35;
  unsigned int v36;
  BOOL v38;
  BOOL v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  int v51;
  BOOL v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  _QWORD *v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  _QWORD *v134;
  uint64_t v135;
  int v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  int v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  int v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  int v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  int v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  unsigned int v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  unsigned int v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  unsigned int v178;
  int v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  unsigned int v185;
  int v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v208;
  _DWORD *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  _QWORD **v215;
  _QWORD *v216[2];
  _QWORD **v217;
  _QWORD *v218[2];
  uint64_t v219;
  void *v220;
  _OWORD v221[4];
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  void *v231;
  uint64_t v232;
  _QWORD v233[12];

  v233[9] = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(*a2 + 18) & 0x3FF0) == 0x640)
  {
    for (i = (_QWORD *)a2[41]; i != a2 + 40; i = (_QWORD *)i[1])
    {
      for (j = i[7]; (_QWORD *)j != i + 6; j = *(_QWORD *)(j + 8))
      {
        v8 = *(unsigned __int16 **)(j + 16);
        v9 = *v8;
        v11 = (v9 - 9) <= 0x3C && ((1 << (v9 - 9)) & 0x1000000000000605) != 0
           || v9 == 0;
        if (!v11 && (v8[4] & 0x10) == 0)
          ++a1[58];
        if ((*(_BYTE *)j & 4) == 0)
        {
          while ((*(_WORD *)(j + 44) & 8) != 0)
            j = *(_QWORD *)(j + 8);
        }
      }
    }
    a1[62] += (**(uint64_t (***)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))a2[43])(a2[43], 12, 0, 1, 3);
    return;
  }
  v12 = (const llvm::TargetSubtargetInfo *)a2[2];
  (*(void (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)v12 + 104))(v12);
  (*(void (**)(_QWORD))(*(_QWORD *)a2[2] + 176))(a2[2]);
  memset(&v221[2], 0, 32);
  v221[0] = llvm::MCSchedModel::Default;
  v221[1] = unk_1C86637F0;
  v224 = unk_1C86637F0;
  v225 = xmmword_1C8663800;
  v226 = unk_1C8663810;
  v222 = 0;
  v227 = 0;
  v223 = llvm::MCSchedModel::Default;
  v229 = 0u;
  v230 = 0u;
  v228 = 0u;
  v231 = v233;
  v232 = 0x1000000000;
  v233[8] = 0;
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)v221, v12);
  sub_1C4885524(6, 385, v12);
  sub_1C4885524(20, 244, v12);
  v218[0] = 0;
  v218[1] = 0;
  v216[1] = 0;
  v217 = v218;
  v215 = v216;
  v216[0] = 0;
  v208 = a2;
  v13 = (_QWORD *)a2[41];
  v206 = a2 + 40;
  v210 = a1;
  if (v13 != a2 + 40)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(a3 + 248);
      v18 = v13 >> 4;
      v19 = *(_DWORD *)(a3 + 264);
      if (!byte_1ED8312F8)
        goto LABEL_29;
      if (v19)
      {
        v20 = (v19 - 1) & (v18 ^ (v13 >> 9));
        v21 = *(_QWORD **)(v17 + 16 * v20);
        if (v13 != v21)
        {
          v22 = 1;
          while (v21 != (_QWORD *)-4096)
          {
            v23 = v20 + v22++;
            v20 = v23 & (v19 - 1);
            v21 = *(_QWORD **)(v17 + 16 * v20);
            if (v13 == v21)
              goto LABEL_28;
          }
          goto LABEL_85;
        }
LABEL_28:
        if (*(_QWORD *)(v17 + 16 * v20 + 8))
        {
LABEL_29:
          if (v19)
          {
            v24 = v19 - 1;
            v25 = v24 & (v18 ^ (v13 >> 9));
            v26 = *(_QWORD **)(v17 + 16 * v25);
            if (v13 == v26)
            {
LABEL_34:
              v29 = *(_QWORD *)(v17 + 16 * v25 + 8);
              if (v29)
              {
                v30 = *(uint64_t **)(v29 + 32);
                if ((_QWORD *)*v30 == v13)
                {
                  ++a1[64];
                  for (k = *(uint64_t **)(v29 + 40); v30 != k; ++v30)
                  {
                    v43 = (_QWORD *)*v30;
                    v44 = ((*v30 >> 4) ^ (*v30 >> 9)) & v24;
                    v45 = *(_QWORD **)(v17 + 16 * v44);
                    if ((_QWORD *)*v30 == v45)
                    {
LABEL_65:
                      v48 = *(_QWORD *)(v17 + 16 * v44 + 8);
                    }
                    else
                    {
                      v46 = 1;
                      while (v45 != (_QWORD *)-4096)
                      {
                        v47 = v44 + v46++;
                        v44 = v47 & v24;
                        v45 = *(_QWORD **)(v17 + 16 * v44);
                        if (v43 == v45)
                          goto LABEL_65;
                      }
                      v48 = 0;
                    }
                    if (v48 == v29)
                    {
                      v32 = v43 + 6;
                      for (m = v43[7]; (_QWORD *)m != v32; m = *(_QWORD *)(m + 8))
                      {
                        v34 = *(unsigned __int16 **)(m + 16);
                        v35 = *v34;
                        v36 = v35 - 9;
                        v38 = (v35 - 9) <= 0x3C
                           && ((1 << (v35 - 9)) & 0x1000000000000605) != 0
                           || v35 == 0;
                        if (!v38 && (v34[4] & 0x10) == 0)
                        {
                          ++a1[65];
                          v39 = v36 > 0x3C;
                          v40 = (1 << v36) & 0x1000000000000405;
                          v41 = v39 || v40 == 0;
                          v42 = !v41 || v35 == 0;
                          if (v42 || (v34[8] & 1) != 0)
                            ++a1[66];
                        }
                        if ((*(_BYTE *)m & 4) == 0)
                        {
                          while ((*(_WORD *)(m + 44) & 8) != 0)
                            m = *(_QWORD *)(m + 8);
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              v27 = 1;
              while (v26 != (_QWORD *)-4096)
              {
                v28 = v25 + v27++;
                v25 = v28 & v24;
                v26 = *(_QWORD **)(v17 + 16 * v25);
                if (v13 == v26)
                  goto LABEL_34;
              }
            }
          }
          v49 = v13[7];
          if ((_QWORD *)v49 != v13 + 6)
          {
            do
            {
              v50 = *(unsigned __int16 **)(v49 + 16);
              v51 = *v50;
              v53 = (v51 - 9) <= 0x3C && ((1 << (v51 - 9)) & 0x1000000000000605) != 0
                 || v51 == 0;
              if (!v53 && (v50[4] & 0x10) == 0)
              {
                v54 = (char *)&loc_1C4855B68 + 4 * word_1C6463908[sub_1C4C05D94(v51) - 1];
                __asm { BR              X9 }
              }
              if ((*(_BYTE *)v49 & 4) == 0)
              {
                while ((*(_WORD *)(v49 + 44) & 8) != 0)
                  v49 = *(_QWORD *)(v49 + 8);
              }
              v49 = *(_QWORD *)(v49 + 8);
              v55 = v15;
              v56 = v16;
              v57 = v14;
            }
            while ((_QWORD *)v49 != v13 + 6);
            goto LABEL_86;
          }
        }
      }
LABEL_85:
      v56 = v16;
      v55 = v15;
      v57 = v14;
LABEL_86:
      v13 = (_QWORD *)v13[1];
      v14 = v57;
      v15 = v55;
      v16 = v56;
    }
    while (v13 != v206);
  }
  a1[27] = a1[27];
  v58 = sub_1C485B204((uint64_t)v208, 0);
  v59 = a1[53];
  if (v59 <= v58)
    v59 = v58;
  a1[53] = v59;
  if (((*(unsigned __int16 *)(*v208 + 18) >> 4) & 0x3FFu) - 100 < 9)
  {
    v60 = v208[43];
    v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 336))(v60);
    v62 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 24))(v61, 4);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v60 + 128))(&v219, v60, 3);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v60 + 136))(&v220, v60, 3);
    v63 = v219;
    v64 = v220;
    if (v219)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v219 + 16))(&v219, v219);
      v65 = v219;
    }
    else
    {
      v65 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v64 + 16))(&v219, v64);
    v66 = v219;
    v67 = 0;
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 24))(v65, v66) & 1) == 0)
    {
      v134 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 32))(v65);
      v135 = *v134;
      v136 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 400))(v60, *v134);
      sub_1C4768AD0(a4, *(_QWORD *)(v135 + 24));
      v139 = v138;
      if ((_DWORD)v137 == 1)
      if ((v62 - 1 + ((unint64_t)(v139 + 7) >> 3)) / v62 + v136 > v67)
        v67 = (v62 - 1 + ((unint64_t)(v139 + 7) >> 3)) / v62 + v136;
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 40))(v65);
    }
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
    if (v63)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v60 + 128))(&v219, v60, 5);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v60 + 136))(&v220, v60, 5);
    v68 = v219;
    v69 = v220;
    if (v219)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v219 + 16))(&v219, v219);
      v70 = v219;
    }
    else
    {
      v70 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v69 + 16))(&v219, v69);
    v71 = v219;
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 24))(v70, v71) & 1) == 0)
    {
      v140 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 32))(v70);
      v141 = *v140;
      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v60 + 184))(v60, 15, *v140) & 1) == 0)
      {
        v142 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 400))(v60, v141);
        sub_1C4768AD0(a4, *(_QWORD *)(v141 + 24));
        v145 = v144;
        if ((_DWORD)v143 == 1)
        if ((v62 - 1 + ((unint64_t)(v145 + 7) >> 3)) / v62 + v142 > v67)
          v67 = (v62 - 1 + ((unint64_t)(v145 + 7) >> 3)) / v62 + v142;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
    }
    if (v71)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    (*(void (**)(void *))(*(_QWORD *)v69 + 8))(v69);
    if (v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v60 + 128))(&v219, v60, 4);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v60 + 136))(&v220, v60, 4);
    v72 = v219;
    v73 = v220;
    if (v219)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v219 + 16))(&v219, v219);
      v74 = v219;
    }
    else
    {
      v74 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v73 + 16))(&v219, v73);
    v75 = v219;
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 24))(v74, v75) & 1) == 0)
    {
      v146 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 32))(v74);
      v147 = *v146;
      v148 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 400))(v60, *v146);
      sub_1C4768AD0(a4, *(_QWORD *)(v147 + 24));
      v151 = v150;
      if ((_DWORD)v149 == 1)
      if ((v62 - 1 + ((unint64_t)(v151 + 7) >> 3)) / v62 + v148 > v67)
        v67 = (v62 - 1 + ((unint64_t)(v151 + 7) >> 3)) / v62 + v148;
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
    }
    if (v75)
      (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
    (*(void (**)(void *))(*(_QWORD *)v73 + 8))(v73);
    if (v72)
      (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v60 + 128))(&v219, v60, 6);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v60 + 136))(&v220, v60, 6);
    v76 = v219;
    v77 = v220;
    if (v219)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v219 + 16))(&v219, v219);
      v78 = v219;
    }
    else
    {
      v78 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v77 + 16))(&v219, v77);
    v79 = v219;
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 24))(v78, v79) & 1) == 0)
    {
      v152 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 32))(v78);
      v153 = *v152;
      v154 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 400))(v60, *v152);
      sub_1C4768AD0(a4, *(_QWORD *)(v153 + 24));
      v157 = v156;
      if ((_DWORD)v155 == 1)
      if ((v62 - 1 + ((unint64_t)(v157 + 7) >> 3)) / v62 + v154 > v67)
        v67 = (v62 - 1 + ((unint64_t)(v157 + 7) >> 3)) / v62 + v154;
      (*(void (**)(uint64_t))(*(_QWORD *)v78 + 40))(v78);
    }
    if (v79)
      (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
    if (v76)
      (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v60 + 128))(&v219, v60, 7);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v60 + 136))(&v220, v60, 7);
    v80 = v219;
    v81 = v220;
    if (v219)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v219 + 16))(&v219, v219);
      v82 = v219;
    }
    else
    {
      v82 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v81 + 16))(&v219, v81);
    v83 = v219;
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 24))(v82, v83) & 1) == 0)
    {
      v158 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 32))(v82);
      v159 = *v158;
      v160 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 400))(v60, *v158);
      sub_1C4768AD0(a4, *(_QWORD *)(v159 + 24));
      v163 = v162;
      if ((_DWORD)v161 == 1)
      if ((v62 - 1 + ((unint64_t)(v163 + 7) >> 3)) / v62 + v160 > v67)
        v67 = (v62 - 1 + ((unint64_t)(v163 + 7) >> 3)) / v62 + v160;
      (*(void (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
    }
    if (v83)
      (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
    if (v80)
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 312))(v60))
    {
      v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 392))(v60);
      if (v67 <= v84)
        v67 = v84;
    }
    v210[54] = v67;
    v85 = v208[43];
    v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 336))(v85);
    v87 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 24))(v86, 1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v85 + 128))(&v219, v85, 1);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v85 + 136))(&v220, v85, 1);
    v88 = v219;
    v89 = v220;
    if (v219)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v219 + 16))(&v219, v219);
      v90 = v219;
    }
    else
    {
      v90 = 0;
    }
    v211 = v89;
    (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v89 + 16))(&v219, v89);
    v91 = v219;
    v92 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v90 + 24))(v90, v219) & 1) != 0)
    {
      v93 = -1;
    }
    else
    {
      v93 = -1;
      do
      {
        v164 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 32))(v90);
        v165 = *v164;
        v166 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 400))(v85, *v164);
        sub_1C4768AD0(a4, *(_QWORD *)(v165 + 24));
        v169 = v168;
        if ((_DWORD)v167 == 1)
        if (v93 >= v166)
          v93 = v166;
        if ((v87 - 1 + ((unint64_t)(v169 + 7) >> 3)) / v87 + v166 > v92)
          v92 = (v87 - 1 + ((unint64_t)(v169 + 7) >> 3)) / v87 + v166;
        (*(void (**)(uint64_t))(*(_QWORD *)v90 + 40))(v90);
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v90 + 24))(v90, v91) & 1) == 0);
    }
    if (v91)
      (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
    (*(void (**)(void *))(*(_QWORD *)v211 + 8))(v211);
    if (v88)
      (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
    v94 = v92 - v93;
    if (!v92)
      v94 = 0;
    v210[56] = v94;
    v95 = v208[43];
    v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v95 + 336))(v95);
    v97 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v96 + 24))(v96, 0);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v95 + 128))(&v219, v95, 0);
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v95 + 136))(&v220, v95, 0);
    v98 = v219;
    v99 = v220;
    if (v219)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v219 + 16))(&v219, v219);
      v100 = v219;
    }
    else
    {
      v100 = 0;
    }
    v212 = v99;
    (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v99 + 16))(&v219, v99);
    v101 = v219;
    v102 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v100 + 24))(v100, v219) & 1) != 0)
    {
      v103 = -1;
    }
    else
    {
      v103 = -1;
      do
      {
        v170 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 32))(v100);
        v171 = *v170;
        v172 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 400))(v95, *v170);
        sub_1C4768AD0(a4, *(_QWORD *)(v171 + 24));
        v175 = v174;
        if ((_DWORD)v173 == 1)
        if (v103 >= v172)
          v103 = v172;
        if ((v97 - 1 + ((unint64_t)(v175 + 7) >> 3)) / v97 + v172 > v102)
          v102 = (v97 - 1 + ((unint64_t)(v175 + 7) >> 3)) / v97 + v172;
        (*(void (**)(uint64_t))(*(_QWORD *)v100 + 40))(v100);
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v100 + 24))(v100, v101) & 1) == 0);
    }
    if (v101)
      (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
    (*(void (**)(void *))(*(_QWORD *)v212 + 8))(v212);
    v104 = v208;
    if (v98)
      (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
    v105 = v102 - v103;
    if (!v102)
      v105 = 0;
    v210[55] = v105;
    v106 = v208[43];
    v107 = sub_1C5EAC85C(v106, 9, 0);
    v108 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 176))(v106, 20);
    if (!v108)
    {
LABEL_149:
      v109 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 176))(v106, 21);
      if (!v109)
        goto LABEL_150;
      if (v109 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v106 + 128))(&v219, v106, 21);
        v193 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v219 + 32))(v219);
        v194 = v219;
        v219 = 0;
        if (v194)
          (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
        if (v193)
        {
LABEL_254:
          v195 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 400))(v106, v193);
          if (v107 <= v195 + 1)
            v107 = (v195 + 1);
          else
            v107 = v107;
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v106 + 128))(&v219, v106, 21);
        v193 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v219 + 32))(v219);
        v203 = v219;
        v219 = 0;
        if (v203)
          (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
        v104 = v208;
        if (v193)
          goto LABEL_254;
      }
LABEL_150:
      v110 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 176))(v106, 22);
      if (!v110)
        goto LABEL_151;
      if (v110 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v106 + 128))(&v219, v106, 22);
        v196 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v219 + 32))(v219);
        v197 = v219;
        v219 = 0;
        if (v197)
          (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
        if (v196)
        {
LABEL_261:
          v198 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 400))(v106, v196);
          if (v107 <= v198 + 1)
            v107 = (v198 + 1);
          else
            v107 = v107;
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v106 + 128))(&v219, v106, 22);
        v196 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v219 + 32))(v219);
        v204 = v219;
        v219 = 0;
        if (v204)
          (*(void (**)(uint64_t))(*(_QWORD *)v204 + 8))(v204);
        v104 = v208;
        if (v196)
          goto LABEL_261;
      }
LABEL_151:
      v111 = v210;
      v112 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 176))(v106, 23);
      if (!v112)
      {
LABEL_152:
        v113 = sub_1C5EAC85C(v106, 13, v107);
        v111[57] = sub_1C5EAC85C(v106, 12, v113);
        v114 = v104[43];
        v115 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v114 + 336))(v114);
        v116 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v115 + 24))(v115, 0);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v114 + 128))(&v219, v114, 0);
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v114 + 136))(&v220, v114, 0);
        v117 = v219;
        v118 = v220;
        if (v219)
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v219 + 16))(&v219, v219);
          v119 = v219;
        }
        else
        {
          v119 = 0;
        }
        v213 = v118;
        (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v118 + 16))(&v219, v118);
        v120 = v219;
        v121 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v119 + 24))(v119, v219) & 1) != 0)
        {
          v122 = -1;
        }
        else
        {
          v122 = -1;
          do
          {
            v176 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 32))(v119);
            v177 = *v176;
            v178 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v114 + 400))(v114, *v176);
            if (v122 >= v178)
              v122 = v178;
            v179 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v114 + 400))(v114, v177);
            sub_1C4768AD0(a4, *(_QWORD *)(v177 + 24));
            v182 = v181;
            if ((_DWORD)v180 == 1)
            if ((v116 - 1 + ((unint64_t)(v182 + 7) >> 3)) / v116 + v179 > v121)
              v121 = (v116 - 1 + ((unint64_t)(v182 + 7) >> 3)) / v116 + v179;
            (*(void (**)(uint64_t))(*(_QWORD *)v119 + 40))(v119);
          }
          while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v119 + 24))(v119, v120) & 1) == 0);
        }
        if (v120)
          (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
        (*(void (**)(void *))(*(_QWORD *)v213 + 8))(v213);
        if (v117)
          (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
        v123 = (v121 - v122) * v116;
        if (!v121)
          v123 = 0;
        v210[59] = v123;
        v124 = v208[43];
        v125 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 336))(v124);
        v126 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v125 + 24))(v125, 0);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v124 + 128))(&v219, v124, 0);
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v124 + 136))(&v220, v124, 0);
        v127 = v219;
        v128 = v220;
        if (v219)
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v219 + 16))(&v219, v219);
          v129 = v219;
        }
        else
        {
          v129 = 0;
        }
        v214 = v128;
        (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v128 + 16))(&v219, v128);
        v130 = v219;
        v131 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v129 + 24))(v129, v219) & 1) != 0)
        {
          v132 = -1;
        }
        else
        {
          v132 = -1;
          do
          {
            v183 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v129 + 32))(v129);
            v184 = *v183;
            v185 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v124 + 400))(v124, *v183);
            if (v132 >= v185)
              v132 = v185;
            v186 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v124 + 400))(v124, v184);
            sub_1C4768AD0(a4, *(_QWORD *)(v184 + 24));
            v189 = v188;
            if ((_DWORD)v187 == 1)
            if ((v126 - 1 + ((unint64_t)(v189 + 7) >> 3)) / v126 + v186 > v131)
              v131 = (v126 - 1 + ((unint64_t)(v189 + 7) >> 3)) / v126 + v186;
            (*(void (**)(uint64_t))(*(_QWORD *)v129 + 40))(v129);
          }
          while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v129 + 24))(v129, v130) & 1) == 0);
        }
        if (v130)
          (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
        (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
        (*(void (**)(void *))(*(_QWORD *)v214 + 8))(v214);
        if (v127)
          (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
        v133 = (v131 - v132) * v126;
        if (!v131)
          v133 = 0;
        v210[60] = v133;
        goto LABEL_173;
      }
      if (v112 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v106 + 128))(&v219, v106, 23);
        v199 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v219 + 32))(v219);
        v200 = v219;
        v219 = 0;
        if (v200)
          (*(void (**)(uint64_t))(*(_QWORD *)v200 + 8))(v200);
        if (!v199)
          goto LABEL_271;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v106 + 128))(&v219, v106, 23);
        v199 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v219 + 32))(v219);
        v205 = v219;
        v219 = 0;
        if (v205)
          (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
        v104 = v208;
        if (!v199)
          goto LABEL_271;
      }
      v201 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 400))(v106, v199);
      if (v107 <= v201 + 1)
        v107 = (v201 + 1);
      else
        v107 = v107;
LABEL_271:
      v111 = v210;
      goto LABEL_152;
    }
    if (v108 == 1)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v106 + 128))(&v219, v106, 20);
      v190 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v219 + 32))(v219);
      v191 = v219;
      v219 = 0;
      if (v191)
        (*(void (**)(uint64_t))(*(_QWORD *)v191 + 8))(v191);
      if (!v190)
        goto LABEL_149;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v106 + 128))(&v219, v106, 20);
      v190 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v219 + 32))(v219);
      v202 = v219;
      v219 = 0;
      if (v202)
        (*(void (**)(uint64_t))(*(_QWORD *)v202 + 8))(v202);
      v104 = v208;
      if (!v190)
        goto LABEL_149;
    }
    v192 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 400))(v106, v190);
    if (v107 <= v192 + 1)
      v107 = (v192 + 1);
    else
      v107 = v107;
    goto LABEL_149;
  }
LABEL_173:
  sub_1C47655E8((uint64_t)&v215, v216[0]);
  sub_1C47655E8((uint64_t)&v217, v218[0]);
  if (v231 != v233)
    free(v231);
}

uint64_t sub_1C4858360(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_1C4858368(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t sub_1C4858370(uint64_t a1)
{
  return *(unsigned int *)(a1 + 176);
}

uint64_t sub_1C4858378(uint64_t a1)
{
  return *(unsigned int *)(a1 + 180);
}

uint64_t sub_1C4858380()
{
  return 0;
}

uint64_t sub_1C4858388()
{
  return 0;
}

uint64_t sub_1C4858390(uint64_t a1)
{
  return *(unsigned int *)(a1 + 156);
}

uint64_t sub_1C4858398(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t NamedMetadata;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  _WORD v26[64];
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[11];

  v29[10] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 40);
  v22 = "tpp_functions";
  v26[0] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v4, (uint64_t)&v22);
  if (NamedMetadata && (v6 = *(uint64_t **)(NamedMetadata + 48), v7 = *((unsigned int *)v6 + 2), (_DWORD)v7))
  {
    v8 = *v6;
    while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 - 8 * *(unsigned int *)(*(_QWORD *)v8 + 8)) + 128) != v3)
    {
      v8 += 8;
      if (!--v7)
        goto LABEL_6;
    }
    v22 = (const char *)v26;
    v23 = (char *)v26;
    v24 = 16;
    v25 = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v22, a2[41]);
    v19 = *(_QWORD *)(*(_QWORD *)(a2[41] + 88) + 8 * (**(_QWORD **)(a2[41] + 88) == *(_QWORD *)(a2[41] + 8)));
    v27 = v29;
    v28 = 0xA00000000;
    sub_1C4848C0C((unsigned int *)&v27, 1uLL, v19);
    while ((_DWORD)v28)
    {
      v20 = v27[v28 - 1];
      LODWORD(v28) = v28 - 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v22, v20);
      if (v21)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v22, v20);
        sub_1C485BB4C((unsigned int *)&v27, *(char **)(v20 + 88), *(char **)(v20 + 96));
      }
    }
    v9 = sub_1C485B204((uint64_t)a2, &v22);
    if (v27 != v29)
      free(v27);
    if (v23 != v22)
      free(v23);
  }
  else
  {
LABEL_6:
    v9 = sub_1C485B204((uint64_t)a2, 0);
  }
  v10 = *(_QWORD *)(v3 + 40);
  sub_1C5EAE59C(v10, 1, (uint64_t)&v22);
  if ((_BYTE)v23)
  {
    v11 = v22;
    sub_1C5EAE59C(v10, 0, (uint64_t)&v22);
    v12 = v22;
    if (!(_BYTE)v23)
      v12 = 0;
    if (v11 < v12)
      v12 = v11;
    if ((_BYTE)v23)
      v13 = v12;
    else
      v13 = v11;
    if (v13 >= 0x80)
      v13 = 128;
    if (v9 <= v13)
      v9 = v13;
  }
  if (v9 <= 1)
    v14 = 1;
  else
    v14 = v9;
  if (*(_BYTE *)(a2[2] + 323))
    v15 = -8;
  else
    v15 = -4;
  if (*(_BYTE *)(a2[2] + 323))
    v16 = 8;
  else
    v16 = 4;
  v17 = (v14 + v16 - 1) & v15;
  if (v17 >= 0x80)
    return 128;
  else
    return v17;
}

uint64_t sub_1C48585F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 256);
}

uint64_t sub_1C4858600(uint64_t a1)
{
  return *(unsigned int *)(a1 + 260);
}

uint64_t sub_1C4858608(uint64_t a1)
{
  return *(unsigned int *)(a1 + 264);
}

uint64_t sub_1C4858610()
{
  return 0;
}

uint64_t sub_1C4858618(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t NamedMetadata;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  _WORD v22[64];
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[11];

  v25[10] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 40);
  v18 = "tpp_functions";
  v22[0] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v4, (uint64_t)&v18);
  if (NamedMetadata && (v6 = *(uint64_t **)(NamedMetadata + 48), v7 = *((unsigned int *)v6 + 2), (_DWORD)v7))
  {
    v8 = *v6;
    while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 - 8 * *(unsigned int *)(*(_QWORD *)v8 + 8)) + 128) != v3)
    {
      v8 += 8;
      if (!--v7)
        goto LABEL_6;
    }
    v18 = (const char *)v22;
    v19 = (char *)v22;
    v20 = 16;
    v21 = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v18, a2[41]);
    v15 = *(_QWORD *)(a2[41] + 8);
    v23 = v25;
    v24 = 0xA00000000;
    sub_1C4848C0C((unsigned int *)&v23, 1uLL, v15);
    while ((_DWORD)v24)
    {
      v16 = v23[v24 - 1];
      LODWORD(v24) = v24 - 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v18, v16);
      if (v17)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v18, v16);
        sub_1C485BB4C((unsigned int *)&v23, *(char **)(v16 + 88), *(char **)(v16 + 96));
      }
    }
    v9 = sub_1C485B204((uint64_t)a2, &v18);
    if (v23 != v25)
      free(v23);
    if (v19 != v18)
      free(v19);
  }
  else
  {
LABEL_6:
    v9 = 0;
  }
  if (v9 <= 1)
    v10 = 1;
  else
    v10 = v9;
  if (*(_BYTE *)(a2[2] + 323))
    v11 = -8;
  else
    v11 = -4;
  if (*(_BYTE *)(a2[2] + 323))
    v12 = 8;
  else
    v12 = 4;
  v13 = (v10 + v12 - 1) & v11;
  if (v13 >= 0x80)
    return 128;
  else
    return v13;
}

uint64_t sub_1C48587EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 232);
}

uint64_t sub_1C48587F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_1C48587FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 268);
}

uint64_t sub_1C4858804(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_1C485880C()
{
  return 0;
}

uint64_t sub_1C4858814(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_1C485881C()
{
  return 0;
}

uint64_t sub_1C4858824(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C485882C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_1C4858834()
{
  return 0;
}

uint64_t sub_1C485883C()
{
  return 0;
}

uint64_t sub_1C4858844()
{
  return 0;
}

uint64_t sub_1C485884C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 212);
}

uint64_t sub_1C4858854(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  unsigned int v5;
  int v6;
  _BYTE *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v5 = 106496;
  v6 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a2[1] + 16))(a2[1], *a2) + 323);
  v7 = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a2[1] + 16))(a2[1], *a2);
  if (!v7[320] && !v7[321])
  {
    if (v7[322])
      v5 = 106496;
    else
      v5 = 98304;
  }
  if (a3 <= 1)
    v8 = 1;
  else
    v8 = a3;
  v9 = (v8 + 1) >> 1;
  if (v9 <= 1)
    v9 = 1;
  if (v6)
    v10 = 8;
  else
    v10 = 4;
  v11 = (v9 + v10 - 1) / v10 * v10;
  if (v11 >= 0x80)
    v11 = 128;
  v12 = v5 / (v11 << 6);
  if (v12 >= 0x60)
    v12 = 96;
  return COERCE_UNSIGNED_INT(fminf((float)v12 / 96.0, 1.0)) | 0x100000000;
}

uint64_t sub_1C4858940(uint64_t a1)
{
  return *(unsigned int *)(a1 + 216);
}

uint64_t sub_1C4858948(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

uint64_t sub_1C4858950(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_1C4858958(uint64_t a1)
{
  return *(unsigned int *)(a1 + 204);
}

uint64_t sub_1C4858960(uint64_t a1)
{
  return *(unsigned int *)(a1 + 200);
}

uint64_t sub_1C4858968(uint64_t a1)
{
  return *(unsigned int *)(a1 + 184);
}

uint64_t sub_1C4858970(uint64_t a1)
{
  return *(unsigned int *)(a1 + 176);
}

uint64_t sub_1C4858978(uint64_t a1)
{
  return *(unsigned int *)(a1 + 188);
}

uint64_t sub_1C4858980(uint64_t a1)
{
  return *(unsigned int *)(a1 + 180);
}

uint64_t sub_1C4858988(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t sub_1C4858990(uint64_t a1)
{
  return *(unsigned int *)(a1 + 208);
}

uint64_t sub_1C4858998(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 152) + *(_DWORD *)(a1 + 148));
}

uint64_t sub_1C48589A4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_1C48589AC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_1C48589B4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_1C48589BC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

uint64_t sub_1C48589C4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 192);
}

uint64_t sub_1C48589CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 196);
}

uint64_t sub_1C48589D4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_1C48589DC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t sub_1C48589E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_1C48589EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_1C48589F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_1C48589FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_1C4858A04(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t sub_1C4858A0C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t sub_1C4858A14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t sub_1C4858A1C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_1C4858A24(uint64_t a1)
{
  return *(unsigned int *)(a1 + 92);
}

uint64_t sub_1C4858A2C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_1C4858A34(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t sub_1C4858A3C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_1C4858A44(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t sub_1C4858A4C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

uint64_t sub_1C4858A54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 116);
}

uint64_t sub_1C4858A5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t sub_1C4858A64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t sub_1C4858A6C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

uint64_t sub_1C4858A74(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_1C4858A7C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 140);
}

uint64_t sub_1C4858A84(uint64_t a1)
{
  return *(unsigned int *)(a1 + 144);
}

uint64_t sub_1C4858A8C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 148);
}

uint64_t sub_1C4858A94(uint64_t a1)
{
  return *(unsigned int *)(a1 + 164);
}

uint64_t sub_1C4858A9C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

uint64_t sub_1C4858AA4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 172);
}

uint64_t sub_1C4858AAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 228);
}

uint64_t sub_1C4858AB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 220);
}

uint64_t sub_1C4858ABC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

uint64_t sub_1C4858AC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 236);
}

uint64_t sub_1C4858ACC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 240);
}

uint64_t sub_1C4858AD4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 244);
}

uint64_t sub_1C4858ADC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 248);
}

uint64_t sub_1C4858AE4()
{
  return 0;
}

void sub_1C4858AEC(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  void *__p[4];
  void **v70;

  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  v4 = a1[2];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "TotalInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v4;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v5 = a1[3];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6A0;
  strcpy((char *)__p[0], "NumFullRateInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v5;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v6 = a1[4];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6A0;
  strcpy((char *)__p[0], "NumHalfRateInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v6;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v7 = a1[5];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C64638E0;
  strcpy((char *)__p[0], "NumQuarterRateInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v7;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v8 = a1[6];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C690;
  strcpy((char *)__p[0], "NumSixthRateInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v8;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v9 = a1[7];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C680;
  strcpy((char *)__p[0], "NumEighthRateInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v9;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 216))(a1);
  strcpy((char *)__p, "RateScaledInstructions");
  HIBYTE(__p[2]) = 22;
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v10;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v11 = a1[8];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "DataInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v11;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v12 = a1[9];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "MoveInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v12;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v13 = a1[10];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "ImmInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v13;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v14 = a1[11];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "ALUInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v14;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v15 = a1[12];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "F16Instructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v15;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v16 = a1[13];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "F32Instructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v16;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v17 = a1[14];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Int16Instructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v17;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v18 = a1[15];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Int32Instructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v18;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v19 = a1[16];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "ComplexInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v19;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v20 = a1[17];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6A0;
  strcpy((char *)__p[0], "UniformMoveInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v20;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v21 = a1[18];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6A0;
  strcpy((char *)__p[0], "UniformLoadInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v21;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v22 = a1[19];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "UniformMoveBytes");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v22;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v23 = a1[20];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "UniformLoadBytes");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v23;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v24 = a1[21];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C680;
  strcpy((char *)__p[0], "LatencyHidingInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v24;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v25 = a1[22];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "TotalStallCycles");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v25;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v26 = a1[23];
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "ImmStallCycles");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v26;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v27 = a1[24];
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "F16StallCycles");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v27;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v28 = a1[25];
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "F32StallCycles");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v28;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v29 = a1[26];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "ComplexStallCycles");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v29;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v30 = a1[27];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "TotalMathCycles");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v30;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v31 = a1[28];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "TotalMathClauses");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v31;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v32 = a1[29];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6A0;
  strcpy((char *)__p[0], "ShortClauseInefficiency");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v32;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v33 = a1[30];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C690;
  strcpy((char *)__p[0], "AfterPixwaitInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v33;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v34 = a1[31];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C690;
  strcpy((char *)__p[0], "UnpairedMoveInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v34;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v35 = a1[32];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "ControlDataSwitches");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v35;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v36 = a1[33];
  strcpy((char *)__p, "RegisterFileWritebacks");
  HIBYTE(__p[2]) = 22;
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v36;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v37 = a1[34];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C680;
  strcpy((char *)__p[0], "MoveInstructionWritebacks");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v37;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v38 = a1[35];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "RegistersForwarded");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v38;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v39 = a1[36];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "ControlInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v39;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v40 = a1[37];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "WDFInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v40;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v41 = a1[38];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "PixwaitInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v41;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v42 = a1[39];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "BranchInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v42;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v43 = a1[40];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "SampleInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v43;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v44 = a1[52];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C690;
  strcpy((char *)__p[0], "TextureWriteInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v44;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v45 = a1[41];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "IterateInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v45;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v46 = a1[42];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "ForwardedIterates");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v46;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v47 = a1[43];
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "LoadCoefInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v47;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v48 = a1[44];
  strcpy((char *)__p, "GlobalLoadInstructions");
  HIBYTE(__p[2]) = 22;
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v48;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v49 = a1[45];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6A0;
  strcpy((char *)__p[0], "GlobalStoreInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v49;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v50 = a1[46];
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "LocalLoadInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v50;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v51 = a1[47];
  strcpy((char *)__p, "LocalStoreInstructions");
  HIBYTE(__p[2]) = 22;
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v51;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v52 = a1[48];
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "StackLoadInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v52;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v53 = a1[49];
  strcpy((char *)__p, "StackStoreInstructions");
  HIBYTE(__p[2]) = 22;
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v53;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v54 = a1[50];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C690;
  strcpy((char *)__p[0], "DeviceAtomicInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v54;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v55 = a1[51];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6B0;
  strcpy((char *)__p[0], "ThreadgroupAtomicInstructions");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v55;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v56 = a1[64];
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "NumLoops");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v56;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v57 = a1[65];
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "TotalLoopInsts");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v57;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v58 = a1[66];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "TotalLoopDataInsts");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v58;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v59 = a1[53];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "TempRegisterCount");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v59;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v60 = a1[57];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "CoeffRegisterCount");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v60;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v61 = a1[54];
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "UniformRegisterCount");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v61;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v62 = a1[55];
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "TextureRegisterCount");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v62;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v63 = a1[56];
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "SamplerRegisterCount");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v63;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v64 = a1[59];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6A0;
  strcpy((char *)__p[0], "ImageStateBindingsBytes");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v64;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v65 = a1[60];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C680;
  strcpy((char *)__p[0], "SamplerStateBindingsBytes");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v65;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v66 = a1[61];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "SpillBufferSize");
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v66;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v67 = a1[63];
  strcpy((char *)__p, "InvalidScheduleClasses");
  HIBYTE(__p[2]) = 22;
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v67;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v68 = a1[67];
  HIBYTE(__p[2]) = 3;
  LODWORD(__p[0]) = 5263444;
  v70 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70) + 14) = v68;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

uint64_t sub_1C485A398(uint64_t result, uint64_t a2)
{
  uint64_t i;
  uint64_t j;
  unint64_t v4;

  for (i = *(_QWORD *)(a2 + 328); i != a2 + 320; i = *(_QWORD *)(i + 8))
  {
    for (j = *(_QWORD *)(i + 56); j != i + 48; j = *(_QWORD *)(j + 8))
    {
      if (**(unsigned __int16 **)(j + 16) - 4570 <= 7)
      {
        v4 = dword_1C64639A0[*(int *)(*(_QWORD *)(j + 32) + 68) - 3];
        *(_QWORD *)(*(_QWORD *)(result + 272) + ((v4 >> 3) & 0x1FFFFFF8)) |= 1 << v4;
      }
      if ((*(_BYTE *)j & 4) == 0)
      {
        while ((*(_WORD *)(j + 44) & 8) != 0)
          j = *(_QWORD *)(j + 8);
      }
    }
  }
  return result;
}

unsigned int *sub_1C485A43C@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unint64_t i;

  v3 = a2 + 16;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x800000000;
  v4 = result[84];
  if ((_DWORD)v4)
  {
    v5 = result;
    v6 = 0;
    for (i = 0; i < v4; ++i)
    {
      if (((*(_QWORD *)(*((_QWORD *)v5 + 34) + 8 * (i >> 6)) >> i) & 1) != 0)
      {
        if (v6 >= *(_DWORD *)(a2 + 12))
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v3, v6 + 1, 4);
          v6 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = i;
        v6 = *(_DWORD *)(a2 + 8) + 1;
        *(_DWORD *)(a2 + 8) = v6;
        v4 = v5[84];
      }
    }
  }
  return result;
}

void sub_1C485A4F4(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t NamedMetadata;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  _QWORD *v27;
  unint64_t *v28;
  void (**v29)(unint64_t *);
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  char v38;
  _QWORD *v39;
  _QWORD *j;
  unsigned __int16 *v41;
  int v42;
  BOOL v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  int v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL4 v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  int v101;
  uint64_t v103;
  int v104;
  size_t __n;
  _QWORD *v106;
  _QWORD *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  unsigned int v113;
  void *v114[2];
  _BYTE v115[48];
  int v116;
  uint64_t v117;
  _QWORD *v118;
  int v119;
  __int16 v120;
  unint64_t v121;
  void **v122;
  _QWORD **v123;
  const void **v124;
  __int16 v125;
  uint64_t v126;

  v2 = a1;
  v126 = *MEMORY[0x1E0C80C00];
  v4 = a2 + 16;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  *(_DWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  v111 = (_QWORD *)(a2 + 72);
  *(_OWORD *)(a2 + 88) = 0u;
  v110 = (_QWORD *)(a2 + 88);
  *(_OWORD *)(a2 + 99) = 0u;
  v5 = a1[2];
  v114[0] = v115;
  v114[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v114, 2uLL, 0);
  v116 = 128;
  v106 = v2;
  if (*(_BYTE *)(v5 + 396))
  {
    __n = v4;
    v6 = *(_QWORD *)(*v2 + 40);
    v7 = v2[43];
    v117 = 1;
    for (i = 8; i != 264; i += 16)
      *(uint64_t *)((char *)&v117 + i) = -4096;
    v121 = (unint64_t)"agx.interpolations";
    v125 = 259;
    NamedMetadata = llvm::Module::getNamedMetadata(v6, (uint64_t)&v121);
    if (NamedMetadata)
    {
      v10 = NamedMetadata;
      v11 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = 8 * v11;
        do
        {
          v14 = *(_QWORD *)(**(_QWORD **)(v10 + 48) + v12);
          v15 = *(unsigned int *)(v14 + 8);
          if (*(_QWORD *)(v14 - 8 * v15))
          {
            v121 = 0;
            v121 = *(_QWORD *)(*(_QWORD *)(v14 - 8 * v15) + 128);
            sub_1C485BD74((uint64_t)&v117, &v121)[1] = v14;
          }
          v12 += 8;
        }
        while (v13 != v12);
      }
    }
    (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 128))(&v121, v7, 9);
    (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 136))(&v112, v7, 9);
    v16 = v112;
    v108 = v121;
    if (v121)
    {
      (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)v121 + 16))(&v121);
      v17 = v121;
    }
    else
    {
      v17 = 0;
    }
    (*(void (**)(unint64_t *__return_ptr, _QWORD *))(*v16 + 16))(&v121, v16);
    v18 = v121;
    while (((*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)v17 + 24))(v17, v18) & 1) == 0)
    {
      v19 = *(_QWORD *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 32))(v17);
      LODWORD(v112) = 0;
      LODWORD(v112) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 400))(v7, v19);
      if ((v117 & 1) != 0)
      {
        v20 = 16;
        v21 = &v118;
      }
      else
      {
        v20 = v119;
        if (!v119)
          goto LABEL_22;
        v21 = v118;
      }
      v22 = v20 - 1;
      v23 = (v20 - 1) & ((v19 >> 4) ^ (v19 >> 9));
      v24 = v21[2 * v23];
      if (v19 == v24)
      {
LABEL_19:
        v27 = (_QWORD *)v21[2 * v23 + 1];
        goto LABEL_23;
      }
      v25 = 1;
      while (v24 != -4096)
      {
        v26 = v23 + v25++;
        v23 = v26 & v22;
        v24 = v21[2 * v23];
        if (v19 == v24)
          goto LABEL_19;
      }
LABEL_22:
      v27 = 0;
LABEL_23:
      v121 = (unint64_t)&unk_1E7F9F308;
      v122 = v114;
      v123 = &v112;
      v124 = (const void **)&v121;
      sub_1C485BBE8(v27, (uint64_t)&v121);
      v28 = (unint64_t *)v124;
      if (v124 == (const void **)&v121)
      {
        v29 = (void (**)(unint64_t *))(v121 + 32);
        v28 = &v121;
        goto LABEL_27;
      }
      if (v124)
      {
        v29 = (void (**)(unint64_t *))((char *)*v124 + 40);
LABEL_27:
        (*v29)(v28);
      }
      (*(void (**)(unint64_t))(*(_QWORD *)v17 + 40))(v17);
    }
    if (v18)
      (*(void (**)(unint64_t))(*(_QWORD *)v18 + 8))(v18);
    (*(void (**)(unint64_t))(*(_QWORD *)v17 + 8))(v17);
    (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    if (v108)
      (*(void (**)(unint64_t))(*(_QWORD *)v108 + 8))(v108);
    v2 = v106;
    if ((v117 & 1) == 0)
      MEMORY[0x1CAA32FB4](v118, 8);
    v30 = v116;
    v31 = *(unsigned int *)(a2 + 8);
    if ((*(_DWORD *)(a2 + 64) & 0x3F) != 0)
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v31 - 8) &= ~(-1 << (*(_DWORD *)(a2 + 64) & 0x3F));
    v32 = v31;
    *(_DWORD *)(a2 + 64) = v30;
    v33 = v30 + 63;
    if ((_DWORD)v31 != (v30 + 63) >> 6)
    {
      v34 = v33 >> 6;
      if (v31 > v34)
      {
        *(_DWORD *)(a2 + 8) = v34;
        v32 = v33 >> 6;
      }
      else
      {
        v35 = v31;
        if (v34 > *(_DWORD *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, __n, v34, 8);
          v35 = *(unsigned int *)(a2 + 8);
          v32 = *(_DWORD *)(a2 + 8);
        }
        if (v34 != v31)
          bzero((void *)(*(_QWORD *)a2 + 8 * v35), 8 * (v34 - v31));
        v32 += v34 - v31;
        *(_DWORD *)(a2 + 8) = v32;
        v30 = *(_DWORD *)(a2 + 64);
      }
    }
    v36 = v30 & 0x3F;
    if (v36)
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v32 - 8) &= ~(-1 << v36);
  }
  v37 = (_QWORD *)v2[41];
  v107 = v2 + 40;
  if (v37 == v2 + 40)
    goto LABEL_162;
  v38 = 0;
  do
  {
    v39 = v37 + 6;
    v109 = v37;
    for (j = (_QWORD *)v37[7]; j != v39; j = (_QWORD *)j[1])
    {
      v41 = (unsigned __int16 *)j[2];
      v42 = *v41;
      v44 = (v42 - 9) <= 0x3C && ((1 << (v42 - 9)) & 0x1000000000000605) != 0
         || v42 == 0;
      if (!v44 && (v41[4] & 0x10) == 0)
        ++*(_DWORD *)(a2 + 104);
      if ((v38 & 1) != 0)
        goto LABEL_60;
      v38 = 0;
      if (*(_BYTE *)(v5 + 396) && (*((_QWORD *)v41 + 2) & 0x10) != 0 && (v42 - 3922) <= 0xFFFFFF9F)
      {
        v45 = sub_1C4B138B4(v42);
        v46 = sub_1C4B138B4(v42);
        v47 = j[4];
        v48 = *(unsigned int *)(v47 + 32 * v46 + 4);
        v49 = 1 << v48;
        v50 = v48 >> 6;
        v51 = (uint64_t *)v114[0];
        if ((v49 & *((_QWORD *)v114[0] + v50)) == 0)
          goto LABEL_71;
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v50) |= v49;
        if (*(_BYTE *)(v47 + 32 * v45) == 7)
        {
          v52 = sub_1C485BBD0(v42);
          if (v52)
          {
            v53 = *(_DWORD *)(v47 + 32 * v45 + 4);
            v54 = v114[0];
            v55 = *(_QWORD *)a2;
            do
            {
              v56 = v53 >> 6;
              if (((1 << v53) & v54[v56]) != 0)
                *(_QWORD *)(v55 + 8 * v56) |= 1 << v53;
              ++v53;
              --v52;
            }
            while (v52);
          }
LABEL_71:
          v38 = 0;
          goto LABEL_72;
        }
        if (!v116)
          goto LABEL_60;
        v73 = 0;
        v74 = (v116 - 1) & 0xFFFFFFC0;
        while (1)
        {
          v76 = *v51++;
          v75 = v76;
          v77 = v74 == v73 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v116 : -1;
          v78 = v77 & v75;
          if (v78)
            break;
          v73 += 64;
          v38 = 1;
          if (v74 + 64 == v73)
            goto LABEL_72;
        }
        v79 = __clz(__rbit64(v78)) + v73;
        if ((v79 & 0x80000000) != 0)
        {
LABEL_60:
          v38 = 1;
          goto LABEL_72;
        }
        do
        {
          v38 = 1;
          *(_QWORD *)(*(_QWORD *)a2 + 8 * (v79 >> 6)) |= 1 << v79;
          v79 = sub_1C476BA0C(v114, v79 + 1, v116, 1u);
        }
        while ((v79 & 0x80000000) == 0);
      }
LABEL_72:
      v57 = (unsigned __int16 *)j[2];
      v58 = *v57;
      if ((v58 - 609) > 0x1F)
      {
        if ((v58 - 4581) > 0xB)
        {
          if ((v58 - 743) <= 0xD)
            *(_BYTE *)(a2 + 114) = 1;
        }
        else
        {
          *(_BYTE *)(a2 + 113) = 1;
        }
      }
      else
      {
        *(_BYTE *)(a2 + 112) = 1;
      }
      v59 = *((_QWORD *)v57 + 2);
      v60 = v59 & 0x800200;
      if ((v59 & 0x800100) == 0x800100 || v60 == 8389120)
      {
        v63 = (v59 & 0x800100) == 8388864;
        v62 = v60 == 8389120;
        if ((*(_BYTE *)(j[4] + 32 * sub_1C4B138B4(v58) + 17) & 4) != 0)
        {
          v62 = 0;
          v63 = 0;
        }
      }
      else
      {
        v62 = 0;
        v63 = 0;
      }
      if ((v59 & 0xD00) == 0x500)
      {
        v64 = j[6];
        if ((v64 & 7) != 0)
        {
          v65 = *(uint64_t **)((v64 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v65 = (uint64_t *)(v64 & 0xFFFFFFFFFFFFFFF8);
          j[6] = v65;
        }
        v68 = *v65;
        if ((v68 & 4) != 0
          && *(_DWORD *)((v68 & 0xFFFFFFFFFFFFFFF8) + 8) >= 7u
          && !(*(unsigned int (**)(unint64_t))(*(_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF8) + 48))(v68 & 0xFFFFFFFFFFFFFFF8))
        {
          goto LABEL_98;
        }
        v63 = 0;
      }
      else if ((v59 & 0xE00) == 0x600)
      {
        v66 = j[6];
        if ((v66 & 7) != 0)
        {
          v67 = *(uint64_t **)((v66 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v67 = (uint64_t *)(v66 & 0xFFFFFFFFFFFFFFF8);
          j[6] = v67;
        }
        v72 = *v67;
        if ((v72 & 4) != 0
          && *(_DWORD *)((v72 & 0xFFFFFFFFFFFFFFF8) + 8) >= 7u
          && !(*(unsigned int (**)(unint64_t))(*(_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF8) + 48))(v72 & 0xFFFFFFFFFFFFFFF8))
        {
          v62 = 1;
          goto LABEL_98;
        }
        v62 = 0;
        goto LABEL_97;
      }
      if (v62)
        goto LABEL_98;
LABEL_97:
      if (!v63)
        continue;
LABEL_98:
      sub_1C4887E60((uint64_t)j, (uint64_t)&v117);
      if (BYTE6(v118))
      {
        if (v62)
          v69 = v110;
        else
          v69 = v111;
        *v69 = -1;
        v69[1] = -1;
        continue;
      }
      sub_1C4887FC4((unsigned int *)&v117, (llvm::APInt *)&v121);
      if (v62)
      {
        v113 = v122;
        if (v122 < 0x41
          || (llvm::APInt::initSlowCase((llvm::APInt *)&v112, 0, 0), v90 = v113, v113 < 0x41))
        {
          v112 = (_QWORD *)v121;
          *v110 |= v121;
        }
        else
        {
          v91 = 0;
          v92 = v112;
          *v112 = -1;
          v93 = v121;
          v94 = ((unint64_t)(v90 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            v92[v91 / 8] &= *(_QWORD *)(v93 + v91);
            v91 += 8;
          }
          while (v94 != v91);
          *v110 |= *v92;
          MEMORY[0x1CAA32F9C]();
        }
        v70 = v122;
        if (v122 <= 0x40)
        {
          if ((_DWORD)v122 == 64)
            v71 = 0;
          else
            v71 = v121;
          v113 = v122;
LABEL_109:
          v112 = (_QWORD *)v71;
          *(_QWORD *)(a2 + 96) |= v71;
          goto LABEL_120;
        }
        v80 = v122 + 63;
        v71 = operator new[]();
        memcpy((void *)v71, (const void *)v121, (v80 >> 3) & 0x3FFFFFF8);
        LODWORD(v80) = (v80 >> 6) - 1;
        memmove((void *)v71, (const void *)(v71 + 8), (8 * v80));
        *(_QWORD *)(v71 + 8 * v80) = 0;
        v113 = v70;
        llvm::APInt::initSlowCase((llvm::APInt *)&v112, 0, 0);
        v81 = v113;
        if (v113 < 0x41)
          goto LABEL_109;
        v82 = 0;
        v83 = v112;
        *v112 = -1;
        v84 = ((unint64_t)(v81 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          v83[v82 / 8] &= *(_QWORD *)(v71 + v82);
          v82 += 8;
        }
        while (v84 != v82);
        *(_QWORD *)(a2 + 96) |= *v83;
      }
      else
      {
        v113 = v122;
        if (v122 < 0x41
          || (llvm::APInt::initSlowCase((llvm::APInt *)&v112, 0, 0), v95 = v113, v113 < 0x41))
        {
          v112 = (_QWORD *)v121;
          *v111 |= v121;
        }
        else
        {
          v96 = 0;
          v97 = v112;
          *v112 = -1;
          v98 = v121;
          v99 = ((unint64_t)(v95 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            v97[v96 / 8] &= *(_QWORD *)(v98 + v96);
            v96 += 8;
          }
          while (v99 != v96);
          *v111 |= *v97;
          MEMORY[0x1CAA32F9C]();
        }
        v70 = v122;
        if (v122 <= 0x40)
        {
          if ((_DWORD)v122 == 64)
            v71 = 0;
          else
            v71 = v121;
          v113 = v122;
LABEL_119:
          v112 = (_QWORD *)v71;
          *(_QWORD *)(a2 + 80) |= v71;
          goto LABEL_120;
        }
        v85 = v122 + 63;
        v71 = operator new[]();
        memcpy((void *)v71, (const void *)v121, (v85 >> 3) & 0x3FFFFFF8);
        LODWORD(v85) = (v85 >> 6) - 1;
        memmove((void *)v71, (const void *)(v71 + 8), (8 * v85));
        *(_QWORD *)(v71 + 8 * v85) = 0;
        v113 = v70;
        llvm::APInt::initSlowCase((llvm::APInt *)&v112, 0, 0);
        v86 = v113;
        if (v113 < 0x41)
          goto LABEL_119;
        v87 = 0;
        v88 = v112;
        *v112 = -1;
        v89 = ((unint64_t)(v86 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          v88[v87 / 8] &= *(_QWORD *)(v71 + v87);
          v87 += 8;
        }
        while (v89 != v87);
        *(_QWORD *)(a2 + 80) |= *v88;
      }
      MEMORY[0x1CAA32F9C]();
LABEL_120:
      if (v70 >= 0x41 && v71)
        MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
      if (v122 >= 0x41 && v121)
        MEMORY[0x1CAA32F9C](v121, 0x1000C8000313F17);
    }
    v37 = (_QWORD *)v109[1];
  }
  while (v37 != v107);
LABEL_162:
  v100 = *(unsigned __int16 *)(*v106 + 18);
  v101 = (v100 >> 4) & 0x3FF;
  if (v101 != 100 && (v101 - 109) >= 0xFFFFFFF7)
  {
    if (*(_BYTE *)(v5 + 381))
    {
      if ((v100 & 0x3FF0) != 0x640
        && *(_BYTE *)(v106[1] + 1687)
        && (v103 = *(_QWORD *)(*v106 + 40),
            v117 = (uint64_t)"agx.stack_oob",
            v120 = 259,
            llvm::Module::getNamedMetadata(v103, (uint64_t)&v117)))
      {
        v104 = 32;
      }
      else
      {
        v104 = 0;
      }
    }
    else
    {
      v104 = *(_DWORD *)(v106[7] + 48);
    }
    *(_DWORD *)(a2 + 108) = v104;
  }
  if (v114[0] != v115)
    free(v114[0]);
}

uint64_t sub_1C485B15C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  if (!v2)
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v2;
  }
  return *(unsigned int *)(v2 + 440);
}

uint64_t sub_1C485B1A8()
{
  return 0;
}

uint64_t sub_1C485B1B0()
{
  return 0;
}

uint64_t sub_1C485B1B8(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))
{
  uint64_t result;
  unsigned int v5;

  result = (**a3)(a3, 11, 0, 1, 4);
  v5 = *(_DWORD *)(a1 + 244);
  if (v5 <= result)
    v5 = result;
  *(_DWORD *)(a1 + 244) = v5;
  return result;
}

uint64_t sub_1C485B204(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  int v19;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  unsigned __int16 *v29;
  int v30;
  uint64_t v31;
  void *v33[2];
  _DWORD v34[14];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16));
  v5 = *(_DWORD *)(v4 + 44);
  v33[0] = v34;
  v33[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v33, (v5 + 63) >> 6, 0);
  v34[12] = v5;
  v6 = a1 + 320;
  for (i = *(_QWORD *)(a1 + 328); i != v6; i = *(_QWORD *)(i + 8))
  {
    if (a2)
    {
      v8 = sub_1C477672C((uint64_t)a2, i);
      v9 = a2[1];
      v10 = v9 == *a2 ? 20 : 16;
      if (v8 == (_QWORD *)(v9 + 8 * *(unsigned int *)((char *)a2 + v10)))
        continue;
    }
    for (j = *(_QWORD *)(i + 56); j != i + 48; j = *(_QWORD *)(j + 8))
    {
      v12 = *(unsigned int *)(j + 40);
      if ((_DWORD)v12)
      {
        v13 = *(_QWORD *)(j + 32);
        v14 = v13 + 32 * v12;
        v15 = v33[0];
        do
        {
          if (!*(_BYTE *)v13)
          {
            v16 = *(_DWORD *)(v13 + 4);
            if (v16)
            {
              v17 = (unsigned __int16 *)(*(_QWORD *)(v4 + 56)
                                       + (((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 + 8) + 24 * v16 + 16) >> 3) & 0x1FFFFFFE));
              v19 = *v17;
              v18 = v17 + 1;
              v20 = v19 + (*(_DWORD *)(*(_QWORD *)(v4 + 8) + 24 * v16 + 16) & 0xF) * v16;
              do
              {
                v15[(unsigned __int16)v20 >> 6] |= 1 << v20;
                v21 = *v18++;
                v20 += v21;
              }
              while (v21);
            }
          }
          v13 += 32;
        }
        while (v13 != v14);
        if (!j)
          goto LABEL_20;
      }
      if ((*(_BYTE *)j & 4) == 0)
      {
LABEL_20:
        while ((*(_WORD *)(j + 44) & 8) != 0)
          j = *(_QWORD *)(j + 8);
      }
    }
  }
  if (v4)
    v22 = (uint64_t *)(v4 + 8);
  else
    v22 = 0;
  v23 = *v22;
  v24 = v22[6];
  v25 = 183;
  while (2)
  {
    v26 = *(unsigned int *)(v23 + 24 * v25 + 16);
    v27 = (v26 >> 3) & 0x1FFFFFFE;
    v28 = *(_WORD *)(v24 + v27) + (v26 & 0xF) * v25;
    v29 = (unsigned __int16 *)(v24 + 2 + v27);
    do
    {
      if (((*((_QWORD *)v33[0] + (v28 >> 6)) >> v28) & 1) != 0)
      {
        v31 = (v25 - 55);
        goto LABEL_33;
      }
      v30 = *v29++;
      v28 += v30;
    }
    while (v30);
    if ((unint64_t)--v25 > 0x37)
      continue;
    break;
  }
  v31 = 0;
LABEL_33:
  if (v33[0] != v34)
    free(v33[0]);
  return v31;
}

uint64_t sub_1C485B44C(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (37 * *a2) & (v4 - 1);
  v7 = (_DWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C485B4FC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  _DWORD v14[32];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_DWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6139478(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_DWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      *v9 = v10;
      v9[1] = *(_DWORD *)(a1 + v8 + 12);
      v9 += 2;
    }
    v8 += 8;
  }
  while (v8 != 128);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6139478(a1, v14, v9);
}

uint64_t *sub_1C485B670(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_1C485B6E0(v6, a2);
  return v3;
}

uint64_t *sub_1C485B6E0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t **v19;
  _QWORD *v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = (uint64_t *)v7[2];
    if ((uint64_t *)*v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v12 + 24) = 0;
      v18 = (uint64_t *)v7[1];
      *v12 = (uint64_t)v18;
      if (v18)
        v18[2] = (uint64_t)v12;
      v7[2] = v12[2];
      v19 = (uint64_t **)v12[2];
      if (*v19 == v12)
      {
        *v19 = v7;
        v18 = (uint64_t *)*v12;
      }
      else
      {
        v19[1] = v7;
      }
      v7[1] = (uint64_t)v12;
      v12[2] = (uint64_t)v7;
      if (result == v12)
        result = v7;
      v7 = v18;
    }
    v20 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v20 + 24))
      goto LABEL_71;
    v21 = (uint64_t *)v7[1];
    if (v21 && !*((_BYTE *)v21 + 24))
    {
      if (v20 && !*((_BYTE *)v20 + 24))
      {
LABEL_71:
        v21 = v7;
      }
      else
      {
        *((_BYTE *)v21 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v27 = *v21;
        v7[1] = *v21;
        if (v27)
          *(_QWORD *)(v27 + 16) = v7;
        v21[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
        *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        v20 = v7;
      }
      v24 = v21[2];
      *((_BYTE *)v21 + 24) = *(_BYTE *)(v24 + 24);
      *(_BYTE *)(v24 + 24) = 1;
      *((_BYTE *)v20 + 24) = 1;
      v25 = *(uint64_t **)v24;
      v28 = *(_QWORD *)(*(_QWORD *)v24 + 8);
      *(_QWORD *)v24 = v28;
      if (v28)
        *(_QWORD *)(v28 + 16) = v24;
      v25[2] = *(_QWORD *)(v24 + 16);
      *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
      v25[1] = v24;
      goto LABEL_75;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v22 = v17 == result;
    else
      v22 = 1;
    if (v22)
      goto LABEL_56;
LABEL_52:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v12 + 24) = 0;
    v13 = (uint64_t *)v12[1];
    v14 = *v13;
    v12[1] = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = v12[2];
    *(_QWORD *)(v12[2] + 8 * (*(_QWORD *)v12[2] != (_QWORD)v12)) = v13;
    *v13 = (uint64_t)v12;
    v12[2] = (uint64_t)v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_62;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_56:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_56;
    goto LABEL_52;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_62:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v23 = v15[1];
    *v7 = v23;
    if (v23)
      *(_QWORD *)(v23 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v24 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v24 + 24);
  *(_BYTE *)(v24 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v25 = *(uint64_t **)(v24 + 8);
  v26 = *v25;
  *(_QWORD *)(v24 + 8) = *v25;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  v25[2] = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
  *v25 = v24;
LABEL_75:
  *(_QWORD *)(v24 + 16) = v25;
  return result;
}

_QWORD *sub_1C485BA70(uint64_t **a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = v8;
    v8 = operator new(0x28uLL);
    *(_QWORD *)((char *)v8 + 28) = *a3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v6 = v8;
    v11 = (uint64_t *)**a1;
    v12 = v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

unsigned int *sub_1C485BB4C(unsigned int *result, char *a2, char *a3)
{
  char *v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[2];
  v8 = v7 + ((a3 - a2) >> 3);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 8);
    v7 = v5[2];
  }
  if (v4 != a3)
  {
    v9 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v10 = *(_QWORD *)v4;
      v4 += 8;
      *v9++ = v10;
    }
    while (v4 != a3);
  }
  v5[2] = v7 + (v6 >> 3);
  return result;
}

uint64_t sub_1C485BBD0(int a1)
{
  return dword_1C6463A74[a1 - 3826];
}

_QWORD *sub_1C485BBE8(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  int v33;
  int v34;

  v4 = (unsigned int *)(result + 1);
  v3 = *((unsigned int *)result + 2);
  v5 = &result[-v3];
  v6 = v5[1];
  if (*(_BYTE *)v6 == 4)
  {
    if (v3 >= 2)
    {
      v7 = v3 - 1;
      for (i = result + 1; ; ++i)
      {
        v9 = i[-*v4];
        v10 = (_QWORD *)(v9 - 8 * *(unsigned int *)(v9 + 8));
        v11 = *(_QWORD *)(*v10 + 128);
        v12 = (_QWORD *)(v11 + 24);
        if (*(_DWORD *)(v11 + 32) >= 0x41u)
          v12 = (_QWORD *)*v12;
        v13 = *(_QWORD *)(v10[1] + 128);
        v14 = (_QWORD *)(v13 + 24);
        if (*(_DWORD *)(v13 + 32) >= 0x41u)
          v14 = (_QWORD *)*v14;
        v15 = *(_QWORD *)(v10[2] + 128);
        v16 = (_QWORD *)(v15 + 24);
        if (*(_DWORD *)(v15 + 32) >= 0x41u)
          v16 = (_QWORD *)*v16;
        v17 = *(_DWORD *)v12;
        v18 = (_QWORD *)*v16;
        v33 = *(_DWORD *)v14;
        v34 = v17;
        v32 = (int)v18;
        v19 = *(_QWORD *)(a2 + 24);
        if (!v19)
          break;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, int *, int *, int *))(*(_QWORD *)v19 + 48))(v19, &v34, &v33, &v32);
        if (!--v7)
          return result;
      }
      goto LABEL_22;
    }
  }
  else
  {
    v20 = *(_QWORD *)(v6 + 128);
    v21 = (_QWORD *)(v20 + 24);
    if (*(_DWORD *)(v20 + 32) >= 0x41u)
      v21 = (_QWORD *)*v21;
    v22 = *(_QWORD *)(v5[2] + 128);
    v23 = (_QWORD *)(v22 + 24);
    if (*(_DWORD *)(v22 + 32) >= 0x41u)
      v23 = (_QWORD *)*v23;
    v24 = *(_DWORD *)v21;
    v25 = *(_DWORD *)v23;
    v26 = *(_QWORD *)(v5[3] + 128);
    v27 = (_QWORD *)(v26 + 24);
    if (*(_DWORD *)(v26 + 32) >= 0x41u)
      v27 = (_QWORD *)*v27;
    v28 = (_QWORD *)*v27;
    v33 = v25;
    v34 = v24;
    v32 = (int)v28;
    v29 = *(_QWORD *)(a2 + 24);
    if (!v29)
    {
LABEL_22:
      sub_1C485C2F0();
      return sub_1C485BD74(v30, v31);
    }
    return (_QWORD *)(*(uint64_t (**)(uint64_t, int *, int *, int *))(*(_QWORD *)v29 + 48))(v29, &v34, &v33, &v32);
  }
  return result;
}

_QWORD *sub_1C485BD74(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v13 = 0;
LABEL_16:
      v7 = sub_1C485BEF0(a1, (uint64_t)a2, a2, v13);
      *v7 = *a2;
      v7[1] = 0;
      return v7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 != *v7)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        return v7;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v7;
    goto LABEL_16;
  }
  return v7;
}

uint64_t sub_1C485BE40(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C485BEF0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 16;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C485C064(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 16;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 16 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 16 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C485C064(a1, v8);
      v20 = 0;
      sub_1C485BE40(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C485C064(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[33];

  v14[32] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C485C1E8((int *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C485C1E8((int *)a1, v14, v9);
}

int *sub_1C485C1E8(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 66;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 16;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v9[4 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v9[4 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_21;
        }
        if (v14)
          v12 = v14;
      }
LABEL_21:
      *(_QWORD *)v12 = v7;
      *((_QWORD *)v12 + 1) = a2[1];
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_1C485C2F0()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  JUMPOUT(0x1C485C304);
}

void sub_1C485C308()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C485C31C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E7F9F308;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C485C354(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E7F9F308;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C485C374(uint64_t result, int *a2, uint64_t a3, int *a4)
{
  int v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;

  v4 = *a2;
  v5 = *a4;
  v6 = *(unsigned int **)(result + 16);
  v7 = *v6;
  *v6 += *a4;
  if (v4 == 1 && v5 != 0)
  {
    v9 = **(_QWORD **)(result + 8);
    do
    {
      *(_QWORD *)(v9 + 8 * (v7 >> 6)) |= 1 << v7;
      ++v7;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1C485C3C8(int a1)
{
  uint64_t result;

  result = 0;
  if (a1 > 2371)
  {
    if ((a1 - 2372) > 0x11)
      return result;
    return 1;
  }
  if ((a1 - 1107) < 9 || (a1 - 1996) < 9 || (a1 - 927) < 4)
    return 1;
  return result;
}

uint64_t sub_1C485C414(unsigned int *a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4, uint64_t a5)
{
  int v10;
  void *v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  uint64_t result;

  v10 = *a3;
  v11 = &unk_1C6463D9E;
  v12 = 33;
  v13 = v10 == 6 || v10 == 11;
  if (!v13 && v10 != 95)
  {
    if (sub_1C485C504(a3))
    {
      v11 = &unk_1C6463D9E;
      v12 = 33;
    }
    else
    {
      v14 = *a3;
      v11 = &unk_1C6463DE0;
      v12 = 30;
      if (v14 != 7 && v14 != 13)
      {
        result = sub_1C61396F8(a3);
        if (!(_DWORD)result)
          return result;
        v11 = &unk_1C6463DE0;
        v12 = 30;
      }
    }
  }
  result = sub_1C476CA98(a5, (uint64_t)v11, v12);
  if ((_DWORD)result)
  {
    sub_1C476CB98(*(_DWORD **)(a5 + 24), *a1 | (unint64_t)(result << 32), (*a2 << 8) | (*a3 << 16) | (4 * (*a4 & 0x3F)));
    return 1;
  }
  return result;
}

BOOL sub_1C485C504(unsigned __int8 *a1)
{
  int v1;
  _BOOL8 result;
  BOOL v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  BOOL v7;

  v1 = *a1;
  result = 1;
  if (v1 != 49)
  {
    v3 = (v1 - 21) > 0x39 || ((1 << (v1 - 21)) & 0x200080000080101) == 0;
    if (v3)
    {
      v4 = v1 - 88;
      v5 = v4 >= 0x16;
      v3 = v4 == 22;
      v6 = (1 << v4) & 0x400081;
      v7 = !v3 && v5 || v6 == 0;
      return !v7;
    }
  }
  return result;
}

uint64_t sub_1C485C568(unsigned int *a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4, uint64_t a5)
{
  int v10;
  void *v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  uint64_t result;

  v10 = *a3;
  v11 = &unk_1C6463E1C;
  v12 = 33;
  v13 = v10 == 6 || v10 == 11;
  if (!v13 && v10 != 95)
  {
    if (sub_1C485C504(a3))
    {
      v11 = &unk_1C6463E1C;
      v12 = 33;
    }
    else
    {
      v14 = *a3;
      v11 = &unk_1C6463E5E;
      v12 = 30;
      if (v14 != 7 && v14 != 13)
      {
        result = sub_1C61396F8(a3);
        if (!(_DWORD)result)
          return result;
        v11 = &unk_1C6463E5E;
        v12 = 30;
      }
    }
  }
  result = sub_1C476CA98(a5, (uint64_t)v11, v12);
  if ((_DWORD)result)
  {
    sub_1C476CB98(*(_DWORD **)(a5 + 24), *a1 | (unint64_t)(result << 32), (*a2 << 8) | (*a3 << 16) | (4 * (*a4 & 0x3F)));
    return 1;
  }
  return result;
}

unint64_t sub_1C485C658(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;

  v1 = a1[2];
  if (!(_DWORD)v1)
    return 0;
  LODWORD(v2) = 0;
  v3 = 12 * v1;
  v4 = (int *)(*(_QWORD *)a1 + 4);
  do
  {
    v6 = *v4;
    v4 += 3;
    v5 = v6;
    v7 = v6 - 56;
    v8 = v6 - 1692;
    if ((v6 - 313) >= 0x80)
      v9 = -736;
    else
      v9 = -1248;
    if (v8 >= 0x7F)
      v10 = v9;
    else
      v10 = -6764;
    if (v7 >= 0x80)
      v11 = v10;
    else
      v11 = -220;
    v12 = v11 + 4 * v5;
    if (v2 <= v12)
      v2 = v12;
    else
      v2 = v2;
    v3 -= 12;
  }
  while (v3);
  return (unint64_t)(v2 + 15) >> 4;
}

BOOL sub_1C485C6D4(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v8;
  unsigned __int8 v9;
  uint64_t v12;
  int v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;

  LOBYTE(v8) = a4;
  v9 = a3;
  v17 = a2;
  v16 = a3;
  v14 = a4;
  v15 = a1;
  if (a3 > 0x1Bu)
  {
    if (a3 > 0x4Bu)
    {
      if (a3 != 76)
      {
        if (a3 != 95)
          return 1;
        return !sub_1C485D9FC(&v15, &v17, &v16, &v14, a7);
      }
    }
    else if (a3 != 28)
    {
      if (a3 != 49)
        return 1;
      return !sub_1C485D9FC(&v15, &v17, &v16, &v14, a7);
    }
  }
  else
  {
    switch(a3)
    {
      case 2u:
        v16 = 4;
        if ((a5 & 2) != 0)
        {
          v8 = 1;
        }
        else if ((a5 & 1) != 0)
        {
          v8 = 2;
        }
        else
        {
          v8 = 3;
        }
        v14 = v8;
        v9 = 4;
        break;
      case 4u:
      case 9u:
        break;
      case 5u:
      case 0xAu:
        goto LABEL_19;
      case 6u:
        return !sub_1C485D9FC(&v15, &v17, &v16, &v14, a7);
      default:
        return 1;
    }
    v12 = sub_1C476CA98(a7, (uint64_t)&unk_1C6463E9A, 0x100uLL);
    if ((_DWORD)v12)
      goto LABEL_20;
    if (v9 == 6)
      return !sub_1C485D9FC(&v15, &v17, &v16, &v14, a7);
    if (v9 != 5)
      return 1;
  }
LABEL_19:
  v12 = sub_1C476CA98(a7, (uint64_t)&unk_1C646409A, 0x80uLL);
  if ((_DWORD)v12)
  {
LABEL_20:
    sub_1C476CB98(*(_DWORD **)(a7 + 24), a1 | (unint64_t)(v12 << 32), (unsigned __int16)(a2 << 8) | (v9 << 16) | (4 * (v8 & 0x3F)));
    return 0;
  }
  if (v9 == 49 || v9 == 6)
    return !sub_1C485D9FC(&v15, &v17, &v16, &v14, a7);
  return 1;
}

uint64_t sub_1C485C854(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  char v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int8 v28;

  v28 = a3;
  if ((a3 & 0xFE) == 2)
  {
    v28 = 4;
    v10 = 4;
    if ((a5 & 2) != 0)
      v11 = 1;
    else
      v11 = a5 & 1 ^ 3;
  }
  else
  {
    v11 = a4;
    v10 = a3;
    if (a3 > 0x1Bu || ((1 << a3) & 0x8000210) == 0)
      goto LABEL_8;
  }
  v12 = sub_1C476CA98(a7, (uint64_t)&unk_1C6464298, 0x48uLL);
  if ((_DWORD)v12)
    goto LABEL_26;
LABEL_8:
  v13 = &unk_1C6464370;
  v14 = 34;
  if (v10 > 77)
  {
    if ((v10 - 78) >= 2)
    {
      if (v10 == 95)
        goto LABEL_25;
      if (v10 != 97)
        goto LABEL_31;
    }
    goto LABEL_20;
  }
  v15 = (v10 - 5);
  if (v15 <= 0x3C)
  {
    if (((1 << (v10 - 5)) & 0x1000501800000000) != 0)
      goto LABEL_20;
    if (((1 << (v10 - 5)) & 0x200800021) != 0)
      goto LABEL_12;
    if (v15 == 1)
    {
LABEL_25:
      v12 = sub_1C476CA98(a7, (uint64_t)v13, v14);
      v10 = v28;
      if (!(_DWORD)v12)
        goto LABEL_31;
LABEL_26:
      v17 = a1 | (unint64_t)(v12 << 32);
      v18 = (a2 << 8) | (v10 << 16) | (4 * (v11 & 0x3F));
LABEL_27:
      sub_1C476CB98(*(_DWORD **)(a7 + 24), v17, v18);
      return 0;
    }
  }
  if (v10 != 76)
    goto LABEL_31;
LABEL_12:
  v12 = sub_1C476CA98(a7, (uint64_t)aCdefghijklmntu, 0x24uLL);
  if ((_DWORD)v12)
    goto LABEL_26;
  if ((v10 - 6) > 0x3B)
    goto LABEL_31;
  if (((1 << (v10 - 6)) & 0x800280C00000000) == 0)
  {
    if (v10 != 6)
      goto LABEL_31;
    goto LABEL_21;
  }
LABEL_20:
  if (sub_1C485C504(&v28))
  {
LABEL_21:
    v13 = &unk_1C6464370;
    v14 = 34;
    goto LABEL_25;
  }
  v10 = v28;
  v16 = v28 - 41;
  if (v16 <= 0x38 && ((1 << v16) & 0x100004001000401) != 0)
  {
    v13 = &unk_1C64643B4;
    v14 = 30;
    goto LABEL_25;
  }
LABEL_31:
  result = 1;
  if (v10 > 9)
  {
    v24 = v10 - 38;
    if ((v10 - 38) <= 0x3B)
    {
      if (((1 << v24) & 0x4000000001) != 0)
        goto LABEL_55;
      if (((1 << v24) & 0x200000000000800) != 0)
      {
        v20 = (*(_DWORD *)(a7 + 40) + 7) & 0xFFFFFFF8;
        *(_DWORD *)(a7 + 40) = v20 + 8;
        v26 = *(unsigned __int8 *)(a7 + 44);
        if (v26 <= 3)
          LOBYTE(v26) = 3;
        *(_BYTE *)(a7 + 44) = v26;
        if (*(_BYTE *)(a7 + 5))
          goto LABEL_59;
        v22 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v22 + 60) > 2u)
          goto LABEL_59;
        v23 = 3;
        goto LABEL_61;
      }
      if (((1 << v24) & 0x800000000002000) != 0)
      {
        v20 = (*(_DWORD *)(a7 + 40) + 15) & 0xFFFFFFF0;
        *(_DWORD *)(a7 + 40) = v20 + 16;
        v25 = *(unsigned __int8 *)(a7 + 44);
        if (v25 <= 4)
          LOBYTE(v25) = 4;
        *(_BYTE *)(a7 + 44) = v25;
        if (*(_BYTE *)(a7 + 5))
          goto LABEL_59;
        v22 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v22 + 60) > 3u)
          goto LABEL_59;
        v23 = 4;
        goto LABEL_61;
      }
    }
    if (v10 != 10)
      return result;
LABEL_55:
    v20 = (*(_DWORD *)(a7 + 40) + 3) & 0xFFFFFFFC;
    *(_DWORD *)(a7 + 40) = v20 + 4;
    v27 = *(unsigned __int8 *)(a7 + 44);
    if (v27 <= 2)
      LOBYTE(v27) = 2;
    *(_BYTE *)(a7 + 44) = v27;
    if (*(_BYTE *)(a7 + 5))
      goto LABEL_59;
    v22 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
    if (*(unsigned __int8 *)(v22 + 60) > 1u)
      goto LABEL_59;
    v23 = 2;
    goto LABEL_61;
  }
  if ((v10 - 2) < 3)
  {
LABEL_35:
    v20 = (*(_DWORD *)(a7 + 40) + 1) & 0xFFFFFFFE;
    *(_DWORD *)(a7 + 40) = v20 + 2;
    v21 = *(unsigned __int8 *)(a7 + 44);
    if (v21 <= 1)
      LOBYTE(v21) = 1;
    *(_BYTE *)(a7 + 44) = v21;
    if (*(_BYTE *)(a7 + 5))
      goto LABEL_59;
    v22 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
    if (*(_BYTE *)(v22 + 60))
      goto LABEL_59;
    v23 = 1;
LABEL_61:
    *(_BYTE *)(v22 + 60) = v23;
LABEL_59:
    v17 = a1 | (unint64_t)(v20 << 32);
    v18 = (a2 << 8) | (v10 << 16) | (4 * (v11 & 0x3F)) | 1;
    goto LABEL_27;
  }
  if (v10 == 5)
    goto LABEL_55;
  if (v10 == 9)
    goto LABEL_35;
  return result;
}

uint64_t sub_1C485CC1C(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  char v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int8 v28;

  v28 = a3;
  if ((a3 & 0xFE) == 2)
  {
    v28 = 4;
    v10 = 4;
    if ((a5 & 2) != 0)
      v11 = 1;
    else
      v11 = a5 & 1 ^ 3;
  }
  else
  {
    v11 = a4;
    v10 = a3;
    if (a3 > 0x1Bu || ((1 << a3) & 0x8000210) == 0)
      goto LABEL_8;
  }
  v12 = sub_1C476CA98(a7, (uint64_t)&unk_1C64643F0, 0x48uLL);
  if ((_DWORD)v12)
    goto LABEL_26;
LABEL_8:
  v13 = &unk_1C64644C8;
  v14 = 34;
  if (v10 > 77)
  {
    if ((v10 - 78) >= 2)
    {
      if (v10 == 95)
        goto LABEL_25;
      if (v10 != 97)
        goto LABEL_31;
    }
    goto LABEL_20;
  }
  v15 = (v10 - 5);
  if (v15 <= 0x3C)
  {
    if (((1 << (v10 - 5)) & 0x1000501800000000) != 0)
      goto LABEL_20;
    if (((1 << (v10 - 5)) & 0x200800021) != 0)
      goto LABEL_12;
    if (v15 == 1)
    {
LABEL_25:
      v12 = sub_1C476CA98(a7, (uint64_t)v13, v14);
      v10 = v28;
      if (!(_DWORD)v12)
        goto LABEL_31;
LABEL_26:
      v17 = a1 | (unint64_t)(v12 << 32);
      v18 = (a2 << 8) | (v10 << 16) | (4 * (v11 & 0x3F));
LABEL_27:
      sub_1C476CB98(*(_DWORD **)(a7 + 24), v17, v18);
      return 0;
    }
  }
  if (v10 != 76)
    goto LABEL_31;
LABEL_12:
  v12 = sub_1C476CA98(a7, (uint64_t)aCdefghijklmntu_0, 0x24uLL);
  if ((_DWORD)v12)
    goto LABEL_26;
  if ((v10 - 6) > 0x3B)
    goto LABEL_31;
  if (((1 << (v10 - 6)) & 0x800280C00000000) == 0)
  {
    if (v10 != 6)
      goto LABEL_31;
    goto LABEL_21;
  }
LABEL_20:
  if (sub_1C485C504(&v28))
  {
LABEL_21:
    v13 = &unk_1C64644C8;
    v14 = 34;
    goto LABEL_25;
  }
  v10 = v28;
  v16 = v28 - 41;
  if (v16 <= 0x38 && ((1 << v16) & 0x100004001000401) != 0)
  {
    v13 = &unk_1C646450C;
    v14 = 30;
    goto LABEL_25;
  }
LABEL_31:
  result = 1;
  if (v10 > 9)
  {
    v24 = v10 - 38;
    if ((v10 - 38) <= 0x3B)
    {
      if (((1 << v24) & 0x4000000001) != 0)
        goto LABEL_55;
      if (((1 << v24) & 0x200000000000800) != 0)
      {
        v20 = (*(_DWORD *)(a7 + 40) + 7) & 0xFFFFFFF8;
        *(_DWORD *)(a7 + 40) = v20 + 8;
        v26 = *(unsigned __int8 *)(a7 + 44);
        if (v26 <= 3)
          LOBYTE(v26) = 3;
        *(_BYTE *)(a7 + 44) = v26;
        if (*(_BYTE *)(a7 + 5))
          goto LABEL_59;
        v22 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v22 + 60) > 2u)
          goto LABEL_59;
        v23 = 3;
        goto LABEL_61;
      }
      if (((1 << v24) & 0x800000000002000) != 0)
      {
        v20 = (*(_DWORD *)(a7 + 40) + 15) & 0xFFFFFFF0;
        *(_DWORD *)(a7 + 40) = v20 + 16;
        v25 = *(unsigned __int8 *)(a7 + 44);
        if (v25 <= 4)
          LOBYTE(v25) = 4;
        *(_BYTE *)(a7 + 44) = v25;
        if (*(_BYTE *)(a7 + 5))
          goto LABEL_59;
        v22 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v22 + 60) > 3u)
          goto LABEL_59;
        v23 = 4;
        goto LABEL_61;
      }
    }
    if (v10 != 10)
      return result;
LABEL_55:
    v20 = (*(_DWORD *)(a7 + 40) + 3) & 0xFFFFFFFC;
    *(_DWORD *)(a7 + 40) = v20 + 4;
    v27 = *(unsigned __int8 *)(a7 + 44);
    if (v27 <= 2)
      LOBYTE(v27) = 2;
    *(_BYTE *)(a7 + 44) = v27;
    if (*(_BYTE *)(a7 + 5))
      goto LABEL_59;
    v22 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
    if (*(unsigned __int8 *)(v22 + 60) > 1u)
      goto LABEL_59;
    v23 = 2;
    goto LABEL_61;
  }
  if ((v10 - 2) < 3)
  {
LABEL_35:
    v20 = (*(_DWORD *)(a7 + 40) + 1) & 0xFFFFFFFE;
    *(_DWORD *)(a7 + 40) = v20 + 2;
    v21 = *(unsigned __int8 *)(a7 + 44);
    if (v21 <= 1)
      LOBYTE(v21) = 1;
    *(_BYTE *)(a7 + 44) = v21;
    if (*(_BYTE *)(a7 + 5))
      goto LABEL_59;
    v22 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
    if (*(_BYTE *)(v22 + 60))
      goto LABEL_59;
    v23 = 1;
LABEL_61:
    *(_BYTE *)(v22 + 60) = v23;
LABEL_59:
    v17 = a1 | (unint64_t)(v20 << 32);
    v18 = (a2 << 8) | (v10 << 16) | (4 * (v11 & 0x3F)) | 1;
    goto LABEL_27;
  }
  if (v10 == 5)
    goto LABEL_55;
  if (v10 == 9)
    goto LABEL_35;
  return result;
}

BOOL sub_1C485CFE4(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, unsigned int a6, uint64_t a7)
{
  return sub_1C485CFF4(a1, a2, a3, a4, a5, a6, a7);
}

BOOL sub_1C485CFF4(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v8;
  unsigned __int8 v9;
  uint64_t v12;
  int v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;

  LOBYTE(v8) = a4;
  v9 = a3;
  v17 = a2;
  v16 = a3;
  v14 = a4;
  v15 = a1;
  if (a3 > 0x1Bu)
  {
    if (a3 > 0x4Bu)
    {
      if (a3 != 76)
      {
        if (a3 != 95)
          return 1;
        return !sub_1C485D9FC(&v15, &v17, &v16, &v14, a7);
      }
    }
    else if (a3 != 28)
    {
      if (a3 != 49)
        return 1;
      return !sub_1C485D9FC(&v15, &v17, &v16, &v14, a7);
    }
  }
  else
  {
    switch(a3)
    {
      case 2u:
        v16 = 4;
        if ((a5 & 2) != 0)
        {
          v8 = 1;
        }
        else if ((a5 & 1) != 0)
        {
          v8 = 2;
        }
        else
        {
          v8 = 3;
        }
        v14 = v8;
        v9 = 4;
        break;
      case 4u:
      case 9u:
        break;
      case 5u:
      case 0xAu:
        goto LABEL_19;
      case 6u:
        return !sub_1C485D9FC(&v15, &v17, &v16, &v14, a7);
      default:
        return 1;
    }
    v12 = sub_1C476CA98(a7, (uint64_t)&unk_1C6464548, 0x100uLL);
    if ((_DWORD)v12)
      goto LABEL_20;
    if (v9 == 6)
      return !sub_1C485D9FC(&v15, &v17, &v16, &v14, a7);
    if (v9 != 5)
      return 1;
  }
LABEL_19:
  v12 = sub_1C476CA98(a7, (uint64_t)a89Abcdefghijkl, 0x80uLL);
  if ((_DWORD)v12)
  {
LABEL_20:
    sub_1C476CB98(*(_DWORD **)(a7 + 24), a1 | (unint64_t)(v12 << 32), (unsigned __int16)(a2 << 8) | (v9 << 16) | (4 * (v8 & 0x3F)));
    return 0;
  }
  if (v9 == 49 || v9 == 6)
    return !sub_1C485D9FC(&v15, &v17, &v16, &v14, a7);
  return 1;
}

uint64_t sub_1C485D174(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned __int8 v26;
  unsigned __int8 v27;

  v27 = a2;
  v26 = a3;
  v24 = a4;
  v25 = a1;
  if ((a3 & 0xFE) == 2)
  {
    v26 = 4;
    if ((a5 & 2) != 0)
    {
      v10 = 1;
    }
    else if ((a5 & 1) != 0)
    {
      v10 = 2;
    }
    else
    {
      v10 = 3;
    }
    v24 = v10;
    v11 = 4;
    goto LABEL_17;
  }
  LOBYTE(v10) = a4;
  v11 = a3;
  if (a3 <= 0x10u)
  {
    if (a3 != 4 && a3 != 9)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (a3 == 27)
  {
LABEL_17:
    v12 = sub_1C476CA98(a7, (uint64_t)&unk_1C6464848, 0x48uLL);
    if ((_DWORD)v12)
      goto LABEL_26;
    goto LABEL_18;
  }
  if (a3 == 17)
  {
    v26 = 28;
    if ((a5 & 2) != 0)
    {
      v10 = 1;
    }
    else if ((a5 & 1) != 0)
    {
      v10 = 2;
    }
    else
    {
      v10 = 3;
    }
    v24 = v10;
    v11 = 28;
LABEL_25:
    v12 = sub_1C476CA98(a7, (uint64_t)aCdefghijklmntu_1, 0x24uLL);
    if (!(_DWORD)v12)
      goto LABEL_30;
LABEL_26:
    v13 = a1 | (unint64_t)(v12 << 32);
    v14 = (a2 << 8) | (v11 << 16) | (4 * (v10 & 0x3F));
LABEL_27:
    sub_1C476CB98(*(_DWORD **)(a7 + 24), v13, v14);
    return 0;
  }
LABEL_18:
  if (v11 <= 0x1C && ((1 << v11) & 0x10000420) != 0 || v11 == 76)
    goto LABEL_25;
LABEL_30:
  if ((v11 - 6) <= 0x3A && ((1 << (v11 - 6)) & 0x400080400800021) != 0
    || (v11 - 78) <= 0x20 && ((1 << (v11 - 78)) & 0x100020001) != 0)
  {
    if ((sub_1C485C414(&v25, &v27, &v26, &v24, a7) & 1) != 0)
      return 0;
    v11 = v26;
  }
  if ((v11 - 13) <= 0x34 && ((1 << (v11 - 13)) & 0x10004010020001) != 0
    || (v11 - 79) <= 0x20 && ((1 << (v11 - 79)) & 0x100040001) != 0)
  {
    if ((sub_1C485C414(&v25, &v27, &v26, &v24, a7) & 1) != 0)
      return 0;
    v11 = v26;
  }
  result = 1;
  if (v11 <= 94)
  {
    v16 = v11 - 28;
    if ((v11 - 28) <= 0x33)
    {
      if (((1 << v16) & 0x4001000201002) != 0)
        goto LABEL_64;
      if (((1 << v16) & 0x8002000802004) != 0)
        goto LABEL_59;
      if (((1 << v16) & 0x1000000000401) != 0)
      {
LABEL_69:
        v17 = (*(_DWORD *)(a7 + 40) + 3) & 0xFFFFFFFC;
        *(_DWORD *)(a7 + 40) = v17 + 4;
        v23 = *(unsigned __int8 *)(a7 + 44);
        if (v23 <= 2)
          LOBYTE(v23) = 2;
        *(_BYTE *)(a7 + 44) = v23;
        if (*(_BYTE *)(a7 + 5))
          goto LABEL_68;
        v19 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v19 + 60) > 1u)
          goto LABEL_68;
        v20 = 2;
        goto LABEL_75;
      }
    }
    switch(v11)
    {
      case 2:
      case 3:
      case 4:
      case 9:
        v17 = (*(_DWORD *)(a7 + 40) + 1) & 0xFFFFFFFE;
        *(_DWORD *)(a7 + 40) = v17 + 2;
        v18 = *(unsigned __int8 *)(a7 + 44);
        if (v18 <= 1)
          LOBYTE(v18) = 1;
        *(_BYTE *)(a7 + 44) = v18;
        if (*(_BYTE *)(a7 + 5))
          goto LABEL_68;
        v19 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
        if (*(_BYTE *)(v19 + 60))
          goto LABEL_68;
        v20 = 1;
        goto LABEL_75;
      case 5:
      case 10:
        goto LABEL_69;
      case 6:
      case 11:
        goto LABEL_64;
      case 13:
        goto LABEL_59;
      default:
        return result;
    }
  }
  if (v11 > 109)
  {
    if (v11 != 110)
    {
      if (v11 != 111)
        return result;
      goto LABEL_59;
    }
LABEL_64:
    v17 = (*(_DWORD *)(a7 + 40) + 7) & 0xFFFFFFF8;
    *(_DWORD *)(a7 + 40) = v17 + 8;
    v22 = *(unsigned __int8 *)(a7 + 44);
    if (v22 <= 3)
      LOBYTE(v22) = 3;
    *(_BYTE *)(a7 + 44) = v22;
    if (*(_BYTE *)(a7 + 5))
      goto LABEL_68;
    v19 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
    if (*(unsigned __int8 *)(v19 + 60) > 2u)
      goto LABEL_68;
    v20 = 3;
    goto LABEL_75;
  }
  if (v11 == 95)
    goto LABEL_64;
  if (v11 == 97)
  {
LABEL_59:
    v17 = (*(_DWORD *)(a7 + 40) + 15) & 0xFFFFFFF0;
    *(_DWORD *)(a7 + 40) = v17 + 16;
    v21 = *(unsigned __int8 *)(a7 + 44);
    if (v21 <= 4)
      LOBYTE(v21) = 4;
    *(_BYTE *)(a7 + 44) = v21;
    if (*(_BYTE *)(a7 + 5))
      goto LABEL_68;
    v19 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
    if (*(unsigned __int8 *)(v19 + 60) > 3u)
      goto LABEL_68;
    v20 = 4;
LABEL_75:
    *(_BYTE *)(v19 + 60) = v20;
LABEL_68:
    v13 = a1 | (unint64_t)(v17 << 32);
    v14 = (a2 << 8) | (v11 << 16) | (4 * (v10 & 0x3F)) | 1;
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_1C485D5B8(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned __int8 v26;
  unsigned __int8 v27;

  v27 = a2;
  v26 = a3;
  v24 = a4;
  v25 = a1;
  if ((a3 & 0xFE) == 2)
  {
    v26 = 4;
    if ((a5 & 2) != 0)
    {
      v10 = 1;
    }
    else if ((a5 & 1) != 0)
    {
      v10 = 2;
    }
    else
    {
      v10 = 3;
    }
    v24 = v10;
    v11 = 4;
    goto LABEL_17;
  }
  LOBYTE(v10) = a4;
  v11 = a3;
  if (a3 <= 0x10u)
  {
    if (a3 != 4 && a3 != 9)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (a3 == 27)
  {
LABEL_17:
    v12 = sub_1C476CA98(a7, (uint64_t)&unk_1C6464920, 0x48uLL);
    if ((_DWORD)v12)
      goto LABEL_26;
    goto LABEL_18;
  }
  if (a3 == 17)
  {
    v26 = 28;
    if ((a5 & 2) != 0)
    {
      v10 = 1;
    }
    else if ((a5 & 1) != 0)
    {
      v10 = 2;
    }
    else
    {
      v10 = 3;
    }
    v24 = v10;
    v11 = 28;
LABEL_25:
    v12 = sub_1C476CA98(a7, (uint64_t)aCdefghijklmntu_2, 0x24uLL);
    if (!(_DWORD)v12)
      goto LABEL_30;
LABEL_26:
    v13 = a1 | (unint64_t)(v12 << 32);
    v14 = (a2 << 8) | (v11 << 16) | (4 * (v10 & 0x3F));
LABEL_27:
    sub_1C476CB98(*(_DWORD **)(a7 + 24), v13, v14);
    return 0;
  }
LABEL_18:
  if (v11 <= 0x1C && ((1 << v11) & 0x10000420) != 0 || v11 == 76)
    goto LABEL_25;
LABEL_30:
  if ((v11 - 6) <= 0x3A && ((1 << (v11 - 6)) & 0x400080400800021) != 0
    || (v11 - 78) <= 0x20 && ((1 << (v11 - 78)) & 0x100020001) != 0)
  {
    if ((sub_1C485C568(&v25, &v27, &v26, &v24, a7) & 1) != 0)
      return 0;
    v11 = v26;
  }
  if ((v11 - 13) <= 0x34 && ((1 << (v11 - 13)) & 0x10004010020001) != 0
    || (v11 - 79) <= 0x20 && ((1 << (v11 - 79)) & 0x100040001) != 0)
  {
    if ((sub_1C485C568(&v25, &v27, &v26, &v24, a7) & 1) != 0)
      return 0;
    v11 = v26;
  }
  result = 1;
  if (v11 <= 94)
  {
    v16 = v11 - 28;
    if ((v11 - 28) <= 0x33)
    {
      if (((1 << v16) & 0x4001000201002) != 0)
        goto LABEL_64;
      if (((1 << v16) & 0x8002000802004) != 0)
        goto LABEL_59;
      if (((1 << v16) & 0x1000000000401) != 0)
      {
LABEL_69:
        v17 = (*(_DWORD *)(a7 + 40) + 3) & 0xFFFFFFFC;
        *(_DWORD *)(a7 + 40) = v17 + 4;
        v23 = *(unsigned __int8 *)(a7 + 44);
        if (v23 <= 2)
          LOBYTE(v23) = 2;
        *(_BYTE *)(a7 + 44) = v23;
        if (*(_BYTE *)(a7 + 5))
          goto LABEL_68;
        v19 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
        if (*(unsigned __int8 *)(v19 + 60) > 1u)
          goto LABEL_68;
        v20 = 2;
        goto LABEL_75;
      }
    }
    switch(v11)
    {
      case 2:
      case 3:
      case 4:
      case 9:
        v17 = (*(_DWORD *)(a7 + 40) + 1) & 0xFFFFFFFE;
        *(_DWORD *)(a7 + 40) = v17 + 2;
        v18 = *(unsigned __int8 *)(a7 + 44);
        if (v18 <= 1)
          LOBYTE(v18) = 1;
        *(_BYTE *)(a7 + 44) = v18;
        if (*(_BYTE *)(a7 + 5))
          goto LABEL_68;
        v19 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
        if (*(_BYTE *)(v19 + 60))
          goto LABEL_68;
        v20 = 1;
        goto LABEL_75;
      case 5:
      case 10:
        goto LABEL_69;
      case 6:
      case 11:
        goto LABEL_64;
      case 13:
        goto LABEL_59;
      default:
        return result;
    }
  }
  if (v11 > 109)
  {
    if (v11 != 110)
    {
      if (v11 != 111)
        return result;
      goto LABEL_59;
    }
LABEL_64:
    v17 = (*(_DWORD *)(a7 + 40) + 7) & 0xFFFFFFF8;
    *(_DWORD *)(a7 + 40) = v17 + 8;
    v22 = *(unsigned __int8 *)(a7 + 44);
    if (v22 <= 3)
      LOBYTE(v22) = 3;
    *(_BYTE *)(a7 + 44) = v22;
    if (*(_BYTE *)(a7 + 5))
      goto LABEL_68;
    v19 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
    if (*(unsigned __int8 *)(v19 + 60) > 2u)
      goto LABEL_68;
    v20 = 3;
    goto LABEL_75;
  }
  if (v11 == 95)
    goto LABEL_64;
  if (v11 == 97)
  {
LABEL_59:
    v17 = (*(_DWORD *)(a7 + 40) + 15) & 0xFFFFFFF0;
    *(_DWORD *)(a7 + 40) = v17 + 16;
    v21 = *(unsigned __int8 *)(a7 + 44);
    if (v21 <= 4)
      LOBYTE(v21) = 4;
    *(_BYTE *)(a7 + 44) = v21;
    if (*(_BYTE *)(a7 + 5))
      goto LABEL_68;
    v19 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 56);
    if (*(unsigned __int8 *)(v19 + 60) > 3u)
      goto LABEL_68;
    v20 = 4;
LABEL_75:
    *(_BYTE *)(v19 + 60) = v20;
LABEL_68:
    v13 = a1 | (unint64_t)(v17 << 32);
    v14 = (a2 << 8) | (v11 << 16) | (4 * (v10 & 0x3F)) | 1;
    goto LABEL_27;
  }
  return result;
}

BOOL sub_1C485D9FC(unsigned int *a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;

  v10 = sub_1C476CA98(a5, (uint64_t)&unk_1C646419A, 0x7FuLL);
  v11 = v10;
  if ((_DWORD)v10)
    sub_1C476CB98(*(_DWORD **)(a5 + 24), *a1 | (unint64_t)(v10 << 32), (*a2 << 8) | (*a3 << 16) | (4 * (*a4 & 0x3F)));
  return v11 != 0;
}

void sub_1C485DA84(uint64_t a1, int *a2, uint64_t a3, llvm::DataLayout *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  llvm::LLVMContext **v8;
  llvm::LLVMContext *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::EVT *v19;
  uint64_t v20;
  llvm *v21;
  const llvm::DataLayout *v22;
  unint64_t LLTForType;
  int GenericVirtualRegister;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  llvm *v34;
  __int128 v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[32];
  llvm::EVT *v39;
  uint64_t v40;
  _QWORD v41[10];

  v41[8] = *MEMORY[0x1E0C80C00];
  v8 = *(llvm::LLVMContext ***)a2;
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 7)
    return;
  v15 = *v8;
  v39 = (llvm::EVT *)v41;
  v40 = 0x400000000;
  v36 = v38;
  v37 = 0x400000000;
  llvm::ComputeValueVTs(a1, a4, (uint64_t)v8, (uint64_t)&v39, 0, (uint64_t)&v36, 0);
  if ((_DWORD)v40 == 1)
  {
    v16 = (_BYTE *)*((_QWORD *)a2 + 10);
    llvm::EVT::getTypeForEVT(v39, v15);
    *(_QWORD *)&v35 = v17;
    sub_1C485F46C(a3, v16, (uint64_t *)&v35, a2 + 36, (uint64_t)(a2 + 2), (char *)a2 + 72);
LABEL_4:
    if (v36 != v38)
      free(v36);
    if (v39 != (llvm::EVT *)v41)
      free(v39);
    return;
  }
  v30 = *(_DWORD *)(a3 + 8);
  v31 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, llvm::DataLayout *))(*(_QWORD *)a1 + 1912))(a1, *(_QWORD *)a2, a6, 0, a4);
  if ((_DWORD)v40)
  {
    v18 = 0;
    v19 = v39;
    v20 = 16 * v40;
    do
    {
      v32 = v18;
      v35 = *(_OWORD *)v19;
      v34 = 0;
      llvm::EVT::getTypeForEVT((llvm::EVT *)&v35, v15);
      v34 = v21;
      if (*(_QWORD *)(a7 + 24))
      {
        LLTForType = llvm::getLLTForType(v21, a4, v22);
        GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a5, LLTForType, "", 0);
      }
      else
      {
        GenericVirtualRegister = *(_DWORD *)(*((_QWORD *)a2 + 10) + v32);
      }
      v33 = GenericVirtualRegister;
      sub_1C485F500(a3, &v33, (uint64_t *)&v34, a2 + 36, (uint64_t)(a2 + 2), (char *)a2 + 72);
      if (v31)
      {
        v29 = *(_DWORD **)(*(_QWORD *)a3 + 152 * *(unsigned int *)(a3 + 8) - 144);
        *v29 |= 0x20000000u;
      }
      v19 = (llvm::EVT *)((char *)v19 + 16);
      v18 = v32 + 4;
      v20 -= 16;
    }
    while (v20);
  }
  v25 = *(_DWORD **)(*(_QWORD *)a3 + 152 * *(unsigned int *)(a3 + 8) - 144);
  *v25 |= 0x10000000u;
  if (!*(_QWORD *)(a7 + 24) || !(_DWORD)v37)
    goto LABEL_4;
  v26 = 0;
  while (1)
  {
    v27 = 8 * *((_QWORD *)v36 + v26);
    LODWORD(v34) = **(_DWORD **)(*(_QWORD *)a3 + 152 * (v30 + v26) + 80);
    *(_QWORD *)&v35 = v27;
    v28 = *(_QWORD *)(a7 + 24);
    if (!v28)
      break;
    (*(void (**)(uint64_t, llvm **, __int128 *))(*(_QWORD *)v28 + 48))(v28, &v34, &v35);
    if (++v26 >= (unint64_t)v37)
      goto LABEL_4;
  }
  sub_1C485C2F0();
  sub_1C485DD68();
}

void sub_1C485DD68(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int GenericVirtualRegister;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  _QWORD v52[4];

  v5 = a1;
  v52[2] = *MEMORY[0x1E0C80C00];
  v6 = **(_DWORD **)(a1 + 80);
  if ((v6 & 0x80000000) == 0)
    goto LABEL_35;
  v7 = a3;
  v8 = v6 & 0x7FFFFFFF;
  if (v8 >= *(_DWORD *)(a3 + 432))
    goto LABEL_35;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * v8);
  if ((v9 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * v8) & 4) == 0)
    goto LABEL_35;
  v12 = 0x800000000000000;
  if ((v9 & 2) == 0)
    v12 = 0x8000000000000;
  if ((v12 & v9) != 0)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  if ((v9 & 0x7FFF8) != 0x18)
  {
LABEL_35:
    v21 = sub_1C4861E4C(a2, v5, 1);
    v5 = *(_QWORD *)a2;
    LODWORD(v7) = *(_DWORD *)(a2 + 8);
    v32 = *(_QWORD *)a2 + 152 * v7;
    *(_QWORD *)v32 = *(_QWORD *)v21;
    *(_QWORD *)(v32 + 8) = v32 + 24;
    *(_QWORD *)(v32 + 16) = 0x400000000;
    if (*(_DWORD *)(v21 + 16))
      sub_1C4862300(v32 + 8, v21 + 8);
    *(_BYTE *)(v32 + 72) = *(_BYTE *)(v21 + 72);
    v33 = v5 + 152 * v7;
    *(_QWORD *)(v33 + 80) = v33 + 96;
    v34 = v33 + 80;
    *(_QWORD *)(v34 + 8) = 0x400000000;
    if (*(_DWORD *)(v21 + 88))
      sub_1C48623F0(v34, v21 + 80);
    v35 = v5 + 152 * v7;
    *(_QWORD *)(v35 + 112) = v35 + 128;
    v36 = v35 + 112;
    *(_QWORD *)(v36 + 8) = 0x200000000;
    if (!*(_DWORD *)(v21 + 120))
      goto LABEL_40;
    goto LABEL_46;
  }
  v13 = 3;
  if ((v9 & 1) == 0)
    v13 = 19;
  v14 = v9 >> v13;
  v15 = v9 & 0x8000000000000000 | (8 * v14) | 1;
  v16 = (v9 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v14) | 2;
  if ((v9 & 2) == 0)
    v16 = v15;
  v41 = v16;
  v17 = *(_QWORD *)v5;
  v40 = a4;
  if ((*(_DWORD *)(*(_QWORD *)v5 + 8) & 0xFE) == 0x12)
    v17 = **(_QWORD **)(v17 + 16);
  v50 = v52;
  v51 = 0x400000000;
  v18 = 3;
  do
  {
    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v7, v41, "", 0);
    v42 = GenericVirtualRegister;
    v20 = v51;
    if (v51 >= (unint64_t)HIDWORD(v51))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v51 + 1, 4);
      v20 = v51;
    }
    v50[v20] = GenericVirtualRegister;
    LODWORD(v51) = v51 + 1;
    v21 = v17;
    sub_1C4860878((uint64_t)&v43, &v42, 1, v17, *(_DWORD *)(v5 + 144), *(_BYTE **)(v5 + 8), *(unsigned int *)(v5 + 16), *(_BYTE *)(v5 + 72), 0);
    v22 = sub_1C4861E4C(a2, (unint64_t)&v43, 1);
    v23 = *(_QWORD *)a2;
    v24 = *(_DWORD *)(a2 + 8);
    v25 = *(_QWORD *)a2 + 152 * v24;
    *(_QWORD *)v25 = *(_QWORD *)v22;
    *(_QWORD *)(v25 + 8) = v25 + 24;
    *(_QWORD *)(v25 + 16) = 0x400000000;
    if (*(_DWORD *)(v22 + 16))
      sub_1C4862300(v25 + 8, v22 + 8);
    *(_BYTE *)(v25 + 72) = *(_BYTE *)(v22 + 72);
    v26 = v23 + 152 * v24;
    *(_QWORD *)(v26 + 80) = v26 + 96;
    v27 = v26 + 80;
    *(_QWORD *)(v27 + 8) = 0x400000000;
    if (*(_DWORD *)(v22 + 88))
      sub_1C48623F0(v27, v22 + 80);
    v28 = v23 + 152 * v24;
    *(_QWORD *)(v28 + 112) = v28 + 128;
    v29 = v28 + 112;
    *(_QWORD *)(v29 + 8) = 0x200000000;
    v17 = v21;
    if (*(_DWORD *)(v22 + 120))
      sub_1C48623F0(v29, v22 + 112);
    v30 = v23 + 152 * v24;
    v31 = *(_QWORD *)(v22 + 136);
    *(_DWORD *)(v30 + 144) = *(_DWORD *)(v22 + 144);
    *(_QWORD *)(v30 + 136) = v31;
    ++*(_DWORD *)(a2 + 8);
    if (v48 != &v49)
      free(v48);
    if (v46 != &v47)
      free(v46);
    if (v44 != &v45)
      free(v44);
    --v18;
  }
  while (v18);
  v43 = v50;
  v44 = (void *)v51;
  v39 = *(_QWORD *)(v40 + 24);
  if (!v39)
  {
    sub_1C485C2F0();
LABEL_46:
    sub_1C48623F0(v36, v21 + 112);
LABEL_40:
    v37 = v5 + 152 * v7;
    v38 = *(_QWORD *)(v21 + 136);
    *(_DWORD *)(v37 + 144) = *(_DWORD *)(v21 + 144);
    *(_QWORD *)(v37 + 136) = v38;
    ++*(_DWORD *)(a2 + 8);
    return;
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v39 + 48))(v39, &v43);
  if (v50 != (_DWORD *)v52)
    free(v50);
}

_QWORD *sub_1C485E1AC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7F9F410;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  return a1;
}

uint64_t sub_1C485E1EC(uint64_t a1, uint64_t *a2, uint64_t *a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  unsigned int v13;
  llvm *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  llvm::MachineFunction *v28;
  uint64_t v29;
  uint64_t v30;
  llvm::MachineFunction *v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  llvm::MachineFunction *v43;
  uint64_t v44;
  llvm::MachineFunction *v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  llvm::MachineFunction *v70;
  llvm::MachineInstr *v71;
  llvm::MachineInstr *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  llvm::DataLayout *v80;
  int v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (***v90)();
  void (**v91)(uint64_t (***)());
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  uint64_t (***v95)();
  void (**v96)(uint64_t (***)());
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  llvm::raw_ostream *v123;
  void *v124;
  llvm::MachineFunction *v125;
  llvm::LLVMContext *v126;
  uint64_t v127;
  _QWORD v128[4];
  char v129;
  uint64_t (**v130)();
  uint64_t *v131;
  _QWORD *v132;
  uint64_t (***v133)();
  llvm::MachineFunction *v134;
  llvm::MachineInstr *v135;
  void *v136;
  uint64_t v137;
  _BYTE v138[96];
  void *v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  _DWORD v149[304];
  char *v150;
  uint64_t v151;
  _QWORD v152[10];

  v152[8] = *MEMORY[0x1E0C80C00];
  v10 = a2[1];
  v11 = *(_QWORD *)v10;
  v12 = (llvm *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v10 + 8) + 16))(*(_QWORD *)(v10 + 8), *(_QWORD *)v10);
  v13 = (*(unsigned __int16 *)(v11 + 18) >> 4) & 0x3FF;
  if (v13 <= 0x63)
  {
    if (v13)
      v65 = v13 == 8;
    else
      v65 = 1;
    if (!v65)
      goto LABEL_159;
  }
  else
  {
    if (v13 - 100 <= 8)
    {
      v14 = v12;
      if (((1 << (v13 - 100)) & 0x1DB) != 0)
      {
        if (!a5)
        {
          if (*((_BYTE *)v12 + 318))
          {
            v15 = 789;
          }
          else if (*((_BYTE *)v12 + 327))
          {
            v15 = 791;
          }
          else
          {
            v15 = 790;
          }
          v147 = v149;
          v148 = 0x400000000;
          sub_1C55437B8(a2, v15);
          v17 = v16;
          v18 = (uint64_t *)a2[6];
          v19 = *(_QWORD *)(a2[5] + 40);
          *(_QWORD *)(v16 + 24) = v19;
          v20 = *(_QWORD *)(v19 + 32);
          v21 = *(unsigned int *)(v16 + 40);
          if ((_DWORD)v21)
          {
            v58 = *(_QWORD *)(v16 + 32);
            v59 = *(_QWORD *)(v20 + 40);
            v60 = 32 * v21;
            do
            {
              if (!*(_BYTE *)v58)
              {
                v61 = *(unsigned int *)(v58 + 4);
                if ((int)v61 >= 0)
                  v62 = (uint64_t *)(*(_QWORD *)(v59 + 272) + 8 * v61);
                else
                  v62 = (uint64_t *)(*(_QWORD *)(v59 + 24) + 16 * (v61 & 0x7FFFFFFF) + 8);
                v63 = *v62;
                if (*v62)
                {
                  v64 = *(_QWORD *)(v63 + 16);
                  *(_QWORD *)(v63 + 16) = v58;
                  *(_QWORD *)(v58 + 16) = v64;
                  if ((*(_BYTE *)(v58 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v58 + 24) = v63;
                  }
                  else
                  {
                    *(_QWORD *)(v58 + 24) = 0;
                    v62 = (uint64_t *)(v64 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v58 + 16) = v58;
                  *(_QWORD *)(v58 + 24) = 0;
                }
                *v62 = v58;
              }
              v58 += 32;
              v60 -= 32;
            }
            while (v60);
          }
LABEL_10:
          v22 = *(_QWORD *)(v20 + 728);
          if (v22)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 24))(v22, v17);
          v23 = *v18 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v17 = v23 | *(_QWORD *)v17 & 7;
          *(_QWORD *)(v17 + 8) = v18;
          *(_QWORD *)(v23 + 8) = v17;
          *v18 = *v18 & 7 | v17;
          v24 = a2[7];
          if (v24)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 24))(v24, v17);
          if (v147 != v149)
            free(v147);
          return 1;
        }
        return 0;
      }
      if (v13 == 102)
      {
        if (*((_BYTE *)v12 + 326))
          v27 = 8268;
        else
          v27 = 8267;
        v147 = v149;
        v149[0] = 0;
        v148 = 0x400000001;
        v28 = sub_1C55437B8(a2, v27);
        v30 = v29;
        v31 = v28;
        v32 = v149;
        v33 = 4;
        do
        {
          v34 = *v32++;
          LODWORD(v139) = 1;
          v140 = 0;
          v141 = v34;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v30, v31, (const llvm::MachineOperand *)&v139);
          v33 -= 4;
        }
        while (v33);
        v35 = (uint64_t *)a2[6];
        v36 = *(_QWORD *)(a2[5] + 40);
        *(_QWORD *)(v30 + 24) = v36;
        v37 = *(_QWORD *)(v36 + 32);
        v38 = *(unsigned int *)(v30 + 40);
        if ((_DWORD)v38)
        {
          v109 = *(_QWORD *)(v30 + 32);
          v110 = *(_QWORD *)(v37 + 40);
          v111 = 32 * v38;
          do
          {
            if (!*(_BYTE *)v109)
            {
              v112 = *(unsigned int *)(v109 + 4);
              if ((int)v112 >= 0)
                v113 = (uint64_t *)(*(_QWORD *)(v110 + 272) + 8 * v112);
              else
                v113 = (uint64_t *)(*(_QWORD *)(v110 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
              v114 = *v113;
              if (*v113)
              {
                v115 = *(_QWORD *)(v114 + 16);
                *(_QWORD *)(v114 + 16) = v109;
                *(_QWORD *)(v109 + 16) = v115;
                if ((*(_BYTE *)(v109 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v109 + 24) = v114;
                }
                else
                {
                  *(_QWORD *)(v109 + 24) = 0;
                  v113 = (uint64_t *)(v115 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v109 + 16) = v109;
                *(_QWORD *)(v109 + 24) = 0;
              }
              *v113 = v109;
            }
            v109 += 32;
            v111 -= 32;
          }
          while (v111);
        }
        v39 = *(_QWORD *)(v37 + 728);
        if (v39)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 24))(v39, v30);
        v40 = *v35 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v30 = v40 | *(_QWORD *)v30 & 7;
        *(_QWORD *)(v30 + 8) = v35;
        *(_QWORD *)(v40 + 8) = v30;
        *v35 = *v35 & 7 | v30;
        v41 = a2[7];
        if (v41)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 24))(v41, v30);
        if (v147 != v149)
          free(v147);
        if (*((_BYTE *)v14 + 318))
        {
          v42 = 789;
        }
        else if (*((_BYTE *)v14 + 327))
        {
          v42 = 791;
        }
        else
        {
          v42 = 790;
        }
        v147 = v149;
        v148 = 0x400000000;
        v43 = sub_1C55437B8(a2, v42);
        v17 = v44;
        if ((_DWORD)v148)
        {
          v45 = v43;
          v46 = (unsigned int *)v147;
          v47 = 4 * v148;
          do
          {
            v48 = *v46++;
            LODWORD(v139) = 1;
            v140 = 0;
            v141 = v48;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, v45, (const llvm::MachineOperand *)&v139);
            v47 -= 4;
          }
          while (v47);
        }
        v18 = (uint64_t *)a2[6];
        v49 = *(_QWORD *)(a2[5] + 40);
        *(_QWORD *)(v17 + 24) = v49;
        v20 = *(_QWORD *)(v49 + 32);
        v50 = *(unsigned int *)(v17 + 40);
        if ((_DWORD)v50)
        {
          v51 = *(_QWORD *)(v17 + 32);
          v52 = *(_QWORD *)(v20 + 40);
          v53 = 32 * v50;
          do
          {
            if (!*(_BYTE *)v51)
            {
              v54 = *(unsigned int *)(v51 + 4);
              if ((int)v54 >= 0)
                v55 = (uint64_t *)(*(_QWORD *)(v52 + 272) + 8 * v54);
              else
                v55 = (uint64_t *)(*(_QWORD *)(v52 + 24) + 16 * (v54 & 0x7FFFFFFF) + 8);
              v56 = *v55;
              if (*v55)
              {
                v57 = *(_QWORD *)(v56 + 16);
                *(_QWORD *)(v56 + 16) = v51;
                *(_QWORD *)(v51 + 16) = v57;
                if ((*(_BYTE *)(v51 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v51 + 24) = v56;
                }
                else
                {
                  *(_QWORD *)(v51 + 24) = 0;
                  v55 = (uint64_t *)(v57 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v51 + 16) = v51;
                *(_QWORD *)(v51 + 24) = 0;
              }
              *v55 = v51;
            }
            v51 += 32;
            v53 -= 32;
          }
          while (v53);
        }
        goto LABEL_10;
      }
    }
    if (v13 != 255)
    {
LABEL_159:
      v123 = (llvm::raw_ostream *)llvm::errs(v12);
      sub_1C4816AD8(v123, "Unsupported calling convention\n");
      return 0;
    }
  }
  v66 = a2[1];
  v67 = *(_QWORD *)v66;
  v68 = *(_QWORD *)(v66 + 40);
  (*(void (**)(_QWORD))(**(_QWORD **)(v66 + 16) + 176))(*(_QWORD *)(v66 + 16));
  v69 = *(_QWORD *)(v67 + 40);
  v70 = sub_1C55437B8(a2, 0x2DAu);
  v72 = v71;
  v140 = 0;
  v141 = 0;
  v139 = (void *)0x3900000000;
  v142 = 0;
  llvm::MachineInstr::addOperand(v71, v70, (const llvm::MachineOperand *)&v139);
  if (a5)
  {
    v80 = (llvm::DataLayout *)(v69 + 272);
    v81 = (*(unsigned __int16 *)(v67 + 18) >> 4) & 0x3FF;
    v125 = v70;
    v127 = v68;
    if (v81 == 8 || ((*(unsigned __int16 *)(v67 + 18) >> 4) & 0x3FFu) <= 0x64)
    {
      v82 = sub_1C485C854;
    }
    else
    {
      v82 = sub_1C485C6D4;
      if (v81 != 101 && v81 != 108)
        v82 = sub_1C485CC1C;
    }
    v83 = *(_QWORD *)(a1 + 8);
    v150 = (char *)v152;
    v151 = 0x400000000;
    llvm::ComputeValueVTs(v83, v80, *a3, (uint64_t)&v150, 0, 0, 0);
    v126 = *(llvm::LLVMContext **)*a3;
    v147 = v149;
    v148 = 0x800000000;
    if (!(_DWORD)v151)
    {
      v139 = &v141;
      v140 = (void *)0x1000000000;
      goto LABEL_95;
    }
    v124 = v82;
    v85 = 0;
    v86 = 0;
    v87 = a4;
    while (1)
    {
      llvm::EVT::getTypeForEVT((llvm::EVT *)&v150[v85], v126);
      sub_1C4860878((uint64_t)&v139, v87, 1, v88, 0, 0, 0, 1, 0);
      LODWORD(v128[0]) = *(_DWORD *)&a4[4 * v86];
      sub_1C54F2560(a1, (uint64_t *)&v139, 0, (uint64_t)v80, v67);
      v89 = (*(unsigned __int16 *)(v67 + 18) >> 4) & 0x3FF;
      v130 = &off_1E7F9F510;
      v131 = a2;
      v132 = v128;
      v133 = &v130;
      sub_1C485DA84(*(_QWORD *)(a1 + 8), (int *)&v139, (uint64_t)&v147, v80, v127, v89, (uint64_t)&v130);
      v90 = v133;
      if (v133 == &v130)
      {
        v91 = (void (**)(uint64_t (***)()))(v130 + 4);
        v90 = &v130;
      }
      else
      {
        v70 = v125;
        if (!v133)
          goto LABEL_81;
        v91 = (void (**)(uint64_t (***)()))(*v133 + 5);
      }
      (*v91)(v90);
      v70 = v125;
LABEL_81:
      if (v145 != &v146)
        free(v145);
      if (v143 != &v144)
        free(v143);
      if (v140 != &v142)
        free(v140);
      ++v86;
      v85 += 16;
      v87 += 4;
      if (v86 >= v151)
      {
        v92 = v147;
        v139 = &v141;
        v140 = (void *)0x1000000000;
        if ((_DWORD)v148)
        {
          v93 = 152 * v148;
          v94 = (char *)v147;
          do
          {
            v130 = &off_1E7F9F558;
            v131 = a2;
            v132 = v92;
            v133 = &v130;
            sub_1C485DD68((unint64_t)v94, (uint64_t)&v139, v127, (uint64_t)&v130);
            v95 = v133;
            if (v133 == &v130)
            {
              v96 = (void (**)(uint64_t (***)()))(v130 + 4);
              v95 = &v130;
            }
            else
            {
              if (!v133)
                goto LABEL_93;
              v96 = (void (**)(uint64_t (***)()))(*v133 + 5);
            }
            (*v96)(v95);
LABEL_93:
            v94 += 152;
            v92 += 19;
            v93 -= 152;
          }
          while (v93);
        }
        v82 = v124;
LABEL_95:
        v129 = 0;
        v128[2] = v82;
        v128[3] = 0;
        v128[0] = &off_1E7F9F708;
        v128[1] = v82;
        v131 = a2;
        v132 = (_QWORD *)v127;
        LOBYTE(v133) = 0;
        v134 = v70;
        v135 = v72;
        v136 = v138;
        v137 = 0x800000000;
        v130 = &off_1E7F9F3C0;
        v25 = sub_1C54F28EC(a1, (uint64_t)&v130, (uint64_t)v128, (uint64_t *)&v139, a2, (*(unsigned __int16 *)(v67 + 18) >> 4) & 0x3FF, *(_DWORD *)(*(_QWORD *)(v67 + 24) + 8) > 0xFFu, v84, 0, 0);
        v130 = &off_1E7F9F410;
        if (v136 != v138)
          free(v136);
        v97 = (char *)v139;
        if ((_DWORD)v140)
        {
          v98 = 152 * v140;
          do
          {
            v99 = &v97[v98];
            v100 = *(char **)&v97[v98 - 40];
            if (&v97[v98 - 24] != v100)
              free(v100);
            v101 = (char *)*((_QWORD *)v99 - 9);
            if (v99 - 56 != v101)
              free(v101);
            v102 = *(char **)&v97[v98 - 144];
            if (&v97[v98 - 128] != v102)
              free(v102);
            v98 -= 152;
          }
          while (v98);
          v97 = (char *)v139;
        }
        if (v97 != (char *)&v141)
          free(v97);
        v103 = (char *)v147;
        if ((_DWORD)v148)
        {
          v104 = 152 * v148;
          do
          {
            v105 = &v103[v104];
            v106 = *(char **)&v103[v104 - 40];
            if (&v103[v104 - 24] != v106)
              free(v106);
            v107 = (char *)*((_QWORD *)v105 - 9);
            if (v105 - 56 != v107)
              free(v107);
            v108 = *(char **)&v103[v104 - 144];
            if (&v103[v104 - 128] != v108)
              free(v108);
            v104 -= 152;
          }
          while (v104);
          v103 = (char *)v147;
        }
        if (v103 != (char *)v149)
          free(v103);
        if (v150 != (char *)v152)
          free(v150);
        goto LABEL_69;
      }
    }
  }
  v25 = 1;
LABEL_69:
  v73 = (uint64_t *)a2[6];
  v74 = *(_QWORD *)(a2[5] + 40);
  *((_QWORD *)v72 + 3) = v74;
  v75 = *(_QWORD *)(v74 + 32);
  v76 = *((unsigned int *)v72 + 10);
  if ((_DWORD)v76)
  {
    v116 = *((_QWORD *)v72 + 4);
    v117 = *(_QWORD *)(v75 + 40);
    v118 = 32 * v76;
    do
    {
      if (!*(_BYTE *)v116)
      {
        v119 = *(unsigned int *)(v116 + 4);
        if ((int)v119 >= 0)
          v120 = (uint64_t *)(*(_QWORD *)(v117 + 272) + 8 * v119);
        else
          v120 = (uint64_t *)(*(_QWORD *)(v117 + 24) + 16 * (v119 & 0x7FFFFFFF) + 8);
        v121 = *v120;
        if (*v120)
        {
          v122 = *(_QWORD *)(v121 + 16);
          *(_QWORD *)(v121 + 16) = v116;
          *(_QWORD *)(v116 + 16) = v122;
          if ((*(_BYTE *)(v116 + 3) & 1) != 0)
          {
            *(_QWORD *)(v116 + 24) = v121;
          }
          else
          {
            *(_QWORD *)(v116 + 24) = 0;
            v120 = (uint64_t *)(v122 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v116 + 16) = v116;
          *(_QWORD *)(v116 + 24) = 0;
        }
        *v120 = v116;
      }
      v116 += 32;
      v118 -= 32;
    }
    while (v118);
  }
  v77 = *(_QWORD *)(v75 + 728);
  if (v77)
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(_QWORD *)v77 + 24))(v77, v72);
  v78 = *v73 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v72 = v78 | *(_QWORD *)v72 & 7;
  *((_QWORD *)v72 + 1) = v73;
  *(_QWORD *)(v78 + 8) = v72;
  *v73 = *v73 & 7 | (unint64_t)v72;
  v79 = a2[7];
  if (v79)
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(_QWORD *)v79 + 24))(v79, v72);
  return v25;
}

uint64_t sub_1C485ED08(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  llvm::Type *v13;
  int v14;
  llvm *v15;
  uint64_t *v16;
  unint64_t *v17;
  const llvm::DataLayout *v18;
  int GenericVirtualRegister;
  unint64_t v20;
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (**v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v50;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v55;
  uint64_t v57;
  uint64_t (**v58)();
  void *v59;
  void *v60;
  uint64_t v61;
  char v62;
  char v63;
  int v64;
  unint64_t LLTForType;
  uint64_t (**v66)();
  uint64_t *v67;
  char *v68;
  uint64_t (***v69)();
  void *v70[2];
  _BYTE v71[96];
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  _QWORD v82[154];

  v57 = a1;
  v82[152] = *MEMORY[0x1E0C80C00];
  if (!a5)
    return 1;
  v6 = a3;
  v50 = a2[1];
  v7 = *(_QWORD *)(v50 + 40);
  v8 = *(_QWORD *)(a3 + 40);
  v52 = a2[5];
  v80 = v82;
  v81 = 0x800000000;
  v9 = sub_1C485F330(a3);
  v53 = v11;
  v55 = v6;
  if ((uint64_t *)v9 != v11)
  {
    v12 = (uint64_t *)v9;
    v13 = (llvm::Type *)(v8 + 272);
    v14 = 1;
    do
    {
      v15 = (llvm *)*v12;
      v16 = (uint64_t *)(a4 + 16 * (v14 - 1));
      v17 = (unint64_t *)(v16 + 1);
      sub_1C4860878((uint64_t)&v72, (_BYTE *)*v16, v16[1], *v12, v14 - 1, 0, 0, 1, 0);
      sub_1C54F2560(v57, (uint64_t *)&v72, v14, (uint64_t)v13, v6);
      LLTForType = 0;
      if (v16[1] == 1)
      {
        GenericVirtualRegister = *(_DWORD *)*v16;
        if (GenericVirtualRegister < 0 && (GenericVirtualRegister & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432))
          v20 = *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * (GenericVirtualRegister & 0x7FFFFFFF));
        else
          v20 = 0;
        LLTForType = v20;
      }
      else
      {
        LLTForType = llvm::getLLTForType(v15, v13, v18);
        GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v7, LLTForType, "", 0);
      }
      v64 = GenericVirtualRegister;
      v63 = 0;
      v21 = (*(unsigned __int16 *)(v6 + 18) >> 4) & 0x3FF;
      v22 = (uint64_t (***)())operator new(0x30uLL);
      *v22 = &off_1E7F9F5A0;
      v22[1] = (uint64_t (**)())&v63;
      v22[2] = (uint64_t (**)())&v64;
      v22[3] = (uint64_t (**)())v7;
      v22[4] = (uint64_t (**)())&LLTForType;
      v22[5] = (uint64_t (**)())a2;
      v69 = v22;
      sub_1C485DA84(*(_QWORD *)(v57 + 8), (int *)&v72, (uint64_t)&v80, v13, v7, v21, (uint64_t)&v66);
      ((void (*)(uint64_t (***)()))(*v22)[5])(v22);
      if (v64 != GenericVirtualRegister)
      {
        LODWORD(v58) = GenericVirtualRegister;
        LODWORD(v59) = 1;
        LODWORD(v66) = v64;
        LODWORD(v68) = 0;
        (*(void (**)(uint64_t *, uint64_t, uint64_t (***)(), uint64_t, uint64_t (***)(), uint64_t, _QWORD))(*a2 + 32))(a2, 19, &v58, 1, &v66, 1, 0);
      }
      if (*v17 >= 2)
        sub_1C54F27B8(v57, *v16, *v17, GenericVirtualRegister, (uint64_t)v15, (uint64_t)a2);
      v6 = v55;
      if (v78 != &v79)
        free(v78);
      if (v76 != &v77)
        free(v76);
      if (v73 != &v75)
        free(v73);
      v12 += 5;
      ++v14;
    }
    while (v12 != v53);
  }
  v23 = a2;
  v24 = a2[6];
  if (v52 + 48 != (*(_QWORD *)(v52 + 48) & 0xFFFFFFFFFFFFFFF8))
  {
    v25 = *(_QWORD *)(v52 + 56);
    a2[5] = *(_QWORD *)(v25 + 24);
    a2[6] = v25;
  }
  v72 = &v74;
  v73 = (void *)0x1000000000;
  if ((_DWORD)v81)
  {
    v26 = (char *)v80;
    v27 = 152 * v81;
    v28 = (char *)v80;
    while (1)
    {
      v66 = &off_1E7F9F5E8;
      v67 = a2;
      v68 = v26;
      v69 = &v66;
      sub_1C485DD68((unint64_t)v28, (uint64_t)&v72, v7, (uint64_t)&v66);
      if (v69 == &v66)
        break;
      if (v69)
      {
        v29 = (void (**)(void))(*v69 + 5);
LABEL_30:
        (*v29)();
      }
      v28 += 152;
      v26 += 152;
      v27 -= 152;
      if (!v27)
        goto LABEL_32;
    }
    v29 = (void (**)(void))(v66 + 4);
    goto LABEL_30;
  }
LABEL_32:
  v30 = v52;
  if (v52 + 48 != (*(_QWORD *)(v52 + 48) & 0xFFFFFFFFFFFFFFF8))
  {
    v31 = *(_QWORD *)(v52 + 56);
    a2[5] = *(_QWORD *)(v31 + 24);
    a2[6] = v31;
  }
  v32 = v55;
  v33 = (*(unsigned __int16 *)(v55 + 18) >> 4) & 0x3FF;
  if (v33 <= 0x65)
  {
    v34 = sub_1C485D174;
  }
  else if (v33 == 102)
  {
    v34 = sub_1C485CFF4;
  }
  else
  {
    if (v33 == 106)
      v34 = sub_1C485CFE4;
    else
      v34 = sub_1C485D5B8;
    v32 = v55;
    v23 = a2;
    v30 = v52;
  }
  v62 = 1;
  v60 = v34;
  v61 = 0;
  v58 = &off_1E7F9F738;
  v59 = v34;
  v67 = v23;
  v68 = (char *)v7;
  LOBYTE(v69) = 1;
  v66 = &off_1E7F9F460;
  v70[0] = v71;
  v70[1] = (void *)0x800000000;
  v35 = sub_1C54F28EC(v57, (uint64_t)&v66, (uint64_t)&v58, (uint64_t *)&v72, v23, v33, *(_DWORD *)(*(_QWORD *)(v32 + 24) + 8) > 0xFFu, v10, 0, 0);
  if ((_DWORD)v35)
  {
    v23[5] = v30;
    v23[6] = v24;
    if ((a6 & 1) == 0)
    {
      v36 = *(_QWORD *)(v50 + 48);
      if (!v36)
      {
        v36 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v50 + 8) + 216))(*(_QWORD *)(v50 + 8), v50 + 128, v50);
        *(_QWORD *)(v50 + 48) = v36;
      }
      *(_DWORD *)(v36 + 440) = 4 * sub_1C485C658((unsigned int *)v70);
    }
  }
  v66 = &off_1E7F9F460;
  if (v70[0] != v71)
    free(v70[0]);
  v37 = (char *)v72;
  if ((_DWORD)v73)
  {
    v38 = 152 * v73;
    do
    {
      v39 = &v37[v38];
      v40 = *(char **)&v37[v38 - 40];
      if (&v37[v38 - 24] != v40)
        free(v40);
      v41 = (char *)*((_QWORD *)v39 - 9);
      if (v39 - 56 != v41)
        free(v41);
      v42 = *(char **)&v37[v38 - 144];
      if (&v37[v38 - 128] != v42)
        free(v42);
      v38 -= 152;
    }
    while (v38);
    v37 = (char *)v72;
  }
  if (v37 != (char *)&v74)
    free(v37);
  v43 = (char *)v80;
  if ((_DWORD)v81)
  {
    v44 = 152 * v81;
    do
    {
      v45 = &v43[v44];
      v46 = *(char **)&v43[v44 - 40];
      if (&v43[v44 - 24] != v46)
        free(v46);
      v47 = (char *)*((_QWORD *)v45 - 9);
      if (v45 - 56 != v47)
        free(v47);
      v48 = *(char **)&v43[v44 - 144];
      if (&v43[v44 - 128] != v48)
        free(v48);
      v44 -= 152;
    }
    while (v44);
    v43 = (char *)v80;
  }
  if (v43 != (char *)v82)
    free(v43);
  return v35;
}

uint64_t sub_1C485F330(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  if ((*(_WORD *)(a1 + 18) & 1) == 0)
    return *(_QWORD *)(a1 + 88);
  llvm::Function::BuildLazyArguments((llvm::Function *)a1);
  result = *(_QWORD *)(a1 + 88);
  if ((*(_WORD *)(a1 + 18) & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 88);
    llvm::Function::BuildLazyArguments((llvm::Function *)a1);
    return v3;
  }
  return result;
}

_QWORD *sub_1C485F39C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7F9F460;
  v2 = (_QWORD *)a1[4];
  if (v2 != a1 + 6)
    free(v2);
  return a1;
}

uint64_t sub_1C485F3DC(llvm *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  int v6;
  char v8;
  BOOL v9;
  llvm::raw_ostream *v10;

  v5 = (*(unsigned __int16 *)(a3 + 18) >> 4) & 0x3FF;
  if (v5 <= 0x63)
  {
    if (v5)
      v9 = v5 == 8;
    else
      v9 = 1;
    if (!v9)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (v5 - 100 > 8)
  {
LABEL_15:
    if (v5 != 255)
    {
LABEL_16:
      v10 = (llvm::raw_ostream *)llvm::errs(a1);
      sub_1C4816AD8(v10, "Unsupported calling convention\n");
      return 0;
    }
LABEL_14:
    v8 = 1;
    return sub_1C485ED08((uint64_t)a1, a2, a3, a4, a5, v8);
  }
  v6 = 1 << (v5 - 100);
  if ((v6 & 0x19B) == 0)
  {
    if ((v6 & 0x44) != 0)
    {
      v8 = 0;
      return sub_1C485ED08((uint64_t)a1, a2, a3, a4, a5, v8);
    }
    goto LABEL_15;
  }
  return 1;
}

uint64_t sub_1C485F46C(uint64_t a1, _BYTE *a2, uint64_t *a3, int *a4, uint64_t a5, char *a6)
{
  unsigned int v7;
  unsigned int v8;

  v7 = *(_DWORD *)(a1 + 8);
  if (v7 >= *(_DWORD *)(a1 + 12))
    return sub_1C48624D0(a1, a2, a3, a4, a5, a6);
  sub_1C4860878(*(_QWORD *)a1 + 152 * v7, a2, 1, *a3, *a4, *(_BYTE **)a5, *(unsigned int *)(a5 + 8), *a6, 0);
  v8 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v8;
  return *(_QWORD *)a1 + 152 * v8 - 152;
}

uint64_t sub_1C485F500(uint64_t a1, _BYTE *a2, uint64_t *a3, int *a4, uint64_t a5, char *a6)
{
  unsigned int v7;
  unsigned int v8;

  v7 = *(_DWORD *)(a1 + 8);
  if (v7 >= *(_DWORD *)(a1 + 12))
    return sub_1C48625A4(a1, a2, a3, a4, a5, a6);
  sub_1C4860878(*(_QWORD *)a1 + 152 * v7, a2, 1, *a3, *a4, *(_BYTE **)a5, *(unsigned int *)(a5 + 8), *a6, 0);
  v8 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v8;
  return *(_QWORD *)a1 + 152 * v8 - 152;
}

uint64_t sub_1C485F594()
{
  uint64_t v0;
  unsigned int *v1;
  unsigned int *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::DataLayout *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (**v20)(void);
  uint64_t v21;
  int v22;
  void *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 *v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  llvm::MachineFunction *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  void *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  void (**v70)(void);
  llvm::MachineInstr *v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  int v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  char **v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  unsigned int v114;
  unsigned __int8 v115;
  char *v116;
  char *v117;
  uint64_t v118;
  llvm::MachineFunction *v119;
  unint64_t *v120;
  unint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  void *v162;
  llvm::MachineFunction *v163;
  llvm::MachineFunction *v164;
  uint64_t v165;
  uint64_t v166;
  llvm::MachineInstr *v167;
  uint64_t v168;
  unsigned int v169;
  unsigned __int8 *v170;
  uint64_t **v171;
  uint64_t v172;
  int v173[6];
  uint64_t v174;
  int v175;
  _QWORD v176[3];
  unint64_t v177;
  char v178;
  _QWORD v179[3];
  uint64_t v180;
  char v181;
  __int128 v182;
  __int128 v183;
  _QWORD v184[3];
  char v185;
  void *v186;
  uint64_t v187;
  _QWORD v188[14];
  int v189[6];
  _QWORD *v190;
  void *v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  void *v197;
  uint64_t v198;
  void *v199[2];
  _BYTE v200[192];
  void *v201;
  uint64_t v202;
  _BYTE v203[64];
  void *v204;
  uint64_t v205;
  char *v206;
  void **v207;
  void *v208;
  uint64_t v209;
  _BYTE v210[32];
  _QWORD v211[3];
  char v212;
  llvm::MachineFunction *v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  _BYTE v217[96];
  uint64_t v218;
  int v219;
  void *v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  void *v228[2];
  _BYTE v229[192];
  void *v230;
  uint64_t v231;
  _QWORD v232[304];
  void *v233;
  uint64_t v234;
  _QWORD v235[154];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v235[152] = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)v3[1];
  v7 = *v6;
  v166 = v6[7];
  *(_BYTE *)(v166 + 62) = 1;
  v171 = (uint64_t **)v7;
  v172 = (uint64_t)v6;
  v8 = v6[5];
  v9 = (llvm::DataLayout *)(*(_QWORD *)(v7 + 40) + 272);
  v170 = (unsigned __int8 *)(v1 + 2);
  if (!*((_BYTE *)v1 + 8))
  {
    v10 = v1[3];
    v11 = (uint64_t *)((v10 & 0x80000000) != 0
                    ? *(_QWORD *)(v8 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8
                    : *(_QWORD *)(v8 + 272) + 8 * v10);
    v12 = *v11;
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 3) & 1) != 0 || (v12 = *(_QWORD *)(v12 + 24)) != 0 && (*(_BYTE *)(v12 + 3) & 1) != 0)
      {
        v155 = *(_QWORD *)(v12 + 8);
        if (v155)
        {
          if (**(_WORD **)(v155 + 16) == 19 && *(_DWORD *)(v155 + 40) == 2)
          {
            v156 = *(_DWORD *)(*(_QWORD *)(v155 + 32) + 36);
            if (v156 < 0)
            {
              v157 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 16 * (v156 & 0x7FFFFFFF) + 8);
              if ((*(_BYTE *)(v157 + 3) & 1) == 0)
                v157 = *(_QWORD *)(v157 + 24);
              v158 = *(_QWORD *)(v157 + 8);
              if (**(_WORD **)(v158 + 16) == 71)
              {
                v159 = *(_QWORD *)(v158 + 32);
                v160 = *(_OWORD *)(v159 + 48);
                *(_OWORD *)v170 = *(_OWORD *)(v159 + 32);
                *(_OWORD *)(v1 + 6) = v160;
              }
            }
          }
        }
      }
    }
  }
  v233 = v235;
  v234 = 0x800000000;
  v13 = v1[50];
  if (v13)
  {
    v14 = (int *)*((_QWORD *)v1 + 24);
    v15 = 152 * v13;
    do
    {
      v16 = *v2;
      v232[1] = 0;
      sub_1C485DA84(*(_QWORD *)(v5 + 8), v14, (uint64_t)&v233, v9, v8, v16, (uint64_t)&v230);
      v14 += 38;
      v15 -= 152;
    }
    while (v15);
    v17 = (char *)v233;
    v230 = v232;
    v231 = 0x1000000000;
    if ((_DWORD)v234)
    {
      v18 = 152 * v234;
      v19 = (char *)v233;
      while (1)
      {
        v204 = &off_1E7F9F630;
        v205 = (uint64_t)v4;
        v206 = v17;
        v207 = &v204;
        sub_1C485DD68((unint64_t)v19, (uint64_t)&v230, v8, (uint64_t)&v204);
        if (v207 == &v204)
          break;
        if (v207)
        {
          v20 = (void (**)(void))((char *)*v207 + 40);
LABEL_15:
          (*v20)();
        }
        v19 += 152;
        v17 += 152;
        v18 -= 152;
        if (!v18)
          goto LABEL_19;
      }
      v20 = (void (**)(void))((char *)v204 + 32);
      goto LABEL_15;
    }
  }
  else
  {
    v230 = v232;
    v231 = 0x1000000000;
  }
LABEL_19:
  v21 = (*(uint64_t (**)(_QWORD, uint64_t **))(**(_QWORD **)(v172 + 8) + 16))(*(_QWORD *)(v172 + 8), v171);
  v165 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 112))(v21);
  v168 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 176))(v21);
  v22 = *v2;
  if ((int)*v2 <= 101)
  {
    v23 = sub_1C485D174;
  }
  else if (v22 == 102)
  {
    v23 = sub_1C485CFF4;
  }
  else if (v22 == 106)
  {
    v23 = sub_1C485CFE4;
  }
  else
  {
    v23 = sub_1C485D5B8;
  }
  v164 = sub_1C55437B8(v4, 0x167u);
  v25 = (unint64_t *)v24;
  v26 = (unint64_t *)v4[6];
  v27 = *(_QWORD *)(v4[5] + 40);
  *(_QWORD *)(v24 + 24) = v27;
  v28 = *(_QWORD *)(v27 + 32);
  v29 = *(unsigned int *)(v24 + 40);
  if ((_DWORD)v29)
  {
    v93 = *(_QWORD *)(v24 + 32);
    v94 = *(_QWORD *)(v28 + 40);
    v95 = 32 * v29;
    do
    {
      if (!*(_BYTE *)v93)
      {
        v96 = *(unsigned int *)(v93 + 4);
        if ((int)v96 >= 0)
          v97 = (uint64_t *)(*(_QWORD *)(v94 + 272) + 8 * v96);
        else
          v97 = (uint64_t *)(*(_QWORD *)(v94 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8);
        v98 = *v97;
        if (*v97)
        {
          v99 = *(_QWORD *)(v98 + 16);
          *(_QWORD *)(v98 + 16) = v93;
          *(_QWORD *)(v93 + 16) = v99;
          if ((*(_BYTE *)(v93 + 3) & 1) != 0)
          {
            *(_QWORD *)(v93 + 24) = v98;
          }
          else
          {
            *(_QWORD *)(v93 + 24) = 0;
            v97 = (uint64_t *)(v99 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v93 + 16) = v93;
          *(_QWORD *)(v93 + 24) = 0;
        }
        *v97 = v93;
      }
      v93 += 32;
      v95 -= 32;
    }
    while (v95);
  }
  v30 = *(_QWORD *)(v28 + 728);
  if (v30)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 24))(v30, v24);
  v31 = *v26 & 0xFFFFFFFFFFFFFFF8;
  *v25 = v31 | *v25 & 7;
  v25[1] = (unint64_t)v26;
  *(_QWORD *)(v31 + 8) = v25;
  *v26 = *v26 & 7 | (unint64_t)v25;
  v32 = v4[7];
  if (v32)
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v32 + 24))(v32, v25);
  v167 = (llvm::MachineInstr *)v25;
  v33 = (__int128 *)v170;
  v34 = *v170;
  v35 = *(_QWORD *)(v172 + 48);
  if (!v35)
  {
    v35 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v172 + 8) + 216))(*(_QWORD *)(v172 + 8), v172 + 128, v172);
    *(_QWORD *)(v172 + 48) = v35;
    v33 = (__int128 *)v170;
  }
  *(_BYTE *)(v35 + 12) = v34 != 0;
  if (v34)
    v36 = 673;
  else
    v36 = 674;
  v37 = sub_1C55437B8(v4, v36);
  v39 = v38;
  **(_DWORD **)(v38 + 32) |= 0x40000000u;
  v40 = v33[1];
  v182 = *v33;
  v183 = v40;
  if (!v34)
  {
    v218 = 513;
    v219 = 0;
    LODWORD(v204) = v2[3];
    LODWORD(v206) = 0;
    v41 = (void *)sub_1C5546EF4(v4, &v218, (int *)&v204);
    v218 = 257;
    v219 = 0;
    v204 = v41;
    v205 = v42;
    LODWORD(v206) = 1;
    sub_1C5546B4C(v4, 126, (unint64_t *)&v218, (int *)&v204);
    v44 = *(_DWORD *)(*(_QWORD *)(v43 + 32) + 4);
    LODWORD(v182) = 0;
    DWORD1(v182) = v44;
    v183 = 0uLL;
    *((_QWORD *)&v182 + 1) = 0;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v37, (const llvm::MachineOperand *)&v182);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v168 + 40))(v168, v172, *v2);
  LODWORD(v204) = 12;
  v205 = 0;
  v206 = (char *)v45;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v37, (const llvm::MachineOperand *)&v204);
  v228[0] = v229;
  v228[1] = (void *)0x1000000000;
  llvm::CCState::CCState((uint64_t)&v218, *v2, *((_BYTE *)v2 + 5123), v172, (uint64_t)v228, **v171);
  v181 = 0;
  v179[2] = v23;
  v180 = 0;
  v179[0] = &off_1E7F9F708;
  v179[1] = v23;
  v46 = 0;
  if (sub_1C54F2A64(v5, (uint64_t)v179, (uint64_t *)&v230, (int *)&v218))
  {
    v211[2] = v8;
    v212 = 0;
    v211[1] = v4;
    v211[0] = &off_1E7F9F410;
    v213 = v37;
    v214 = v39;
    v163 = v37;
    v215 = v217;
    v216 = 0x800000000;
    v46 = 0;
    if (!sub_1C54F2CF0(v5, (uint64_t)v211, (uint64_t)&v230, (uint64_t)&v218, (uint64_t *)v228, v4, 0, 0))
      goto LABEL_168;
    v47 = (char *)*((_QWORD *)v2 + 636);
    if (v47)
    {
      LODWORD(v204) = 14;
      v205 = 0;
      v206 = v47;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v37, (const llvm::MachineOperand *)&v204);
    }
    v48 = (uint64_t *)v4[6];
    v49 = *(_QWORD *)(v4[5] + 40);
    *(_QWORD *)(v39 + 24) = v49;
    v50 = *(_QWORD *)(v49 + 32);
    v51 = *(unsigned int *)(v39 + 40);
    if ((_DWORD)v51)
    {
      v141 = *(_QWORD *)(v39 + 32);
      v142 = *(_QWORD *)(v50 + 40);
      v143 = 32 * v51;
      do
      {
        if (!*(_BYTE *)v141)
        {
          v144 = *(unsigned int *)(v141 + 4);
          if ((int)v144 >= 0)
            v145 = (uint64_t *)(*(_QWORD *)(v142 + 272) + 8 * v144);
          else
            v145 = (uint64_t *)(*(_QWORD *)(v142 + 24) + 16 * (v144 & 0x7FFFFFFF) + 8);
          v146 = *v145;
          if (*v145)
          {
            v147 = *(_QWORD *)(v146 + 16);
            *(_QWORD *)(v146 + 16) = v141;
            *(_QWORD *)(v141 + 16) = v147;
            if ((*(_BYTE *)(v141 + 3) & 1) != 0)
            {
              *(_QWORD *)(v141 + 24) = v146;
            }
            else
            {
              *(_QWORD *)(v141 + 24) = 0;
              v145 = (uint64_t *)(v147 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v141 + 16) = v141;
            *(_QWORD *)(v141 + 24) = 0;
          }
          *v145 = v141;
        }
        v141 += 32;
        v143 -= 32;
      }
      while (v143);
    }
    v52 = *(_QWORD *)(v50 + 728);
    if (v52)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 24))(v52, v39);
    v53 = *v48 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v39 = v53 | *(_QWORD *)v39 & 7;
    *(_QWORD *)(v39 + 8) = v48;
    *(_QWORD *)(v53 + 8) = v39;
    *v48 = *v48 & 7 | v39;
    v54 = v4[7];
    if (v54)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 24))(v54, v39);
    if (!*v170)
    {
      v55 = *(_QWORD *)(v39 + 32);
      v56 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v172 + 16) + 104))(*(_QWORD *)(v172 + 16));
      v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v172 + 16) + 184))(*(_QWORD *)(v172 + 16));
      v58 = sub_1C554ADA8(v172, v168, (_QWORD *)v8, v56, v57, v39, *(_QWORD *)(v39 + 16), (uint64_t)&v182, 0);
      llvm::MachineOperand::setReg(v55, v58);
    }
    v59 = (*(uint64_t (**)(_QWORD, uint64_t **))(**(_QWORD **)(v172 + 8) + 16))(*(_QWORD *)(v172 + 8), v171);
    v60 = *(unsigned __int8 *)(v59 + 381);
    if (*(_BYTE *)(v59 + 381))
      v61 = v180;
    else
      v61 = 0;
    v62 = *v2;
    if ((int)v62 > 100)
    {
      v63 = sub_1C485C6D4;
      if ((_DWORD)v62 != 101 && (_DWORD)v62 != 108)
        v63 = sub_1C485CC1C;
    }
    else
    {
      v63 = sub_1C485C854;
    }
    if (!v2[32])
    {
      v71 = v167;
      goto LABEL_157;
    }
    v161 = v59;
    v162 = v63;
    v169 = v61;
    if ((_DWORD)v234)
    {
      v64 = (char *)v233;
      v65 = 152 * v234;
      do
      {
        v66 = &v64[v65];
        v67 = *(char **)&v64[v65 - 40];
        if (&v64[v65 - 24] != v67)
          free(v67);
        v68 = (char *)*((_QWORD *)v66 - 9);
        if (v66 - 56 != v68)
          free(v68);
        v69 = *(char **)&v64[v65 - 144];
        if (&v64[v65 - 128] != v69)
          free(v69);
        v65 -= 152;
      }
      while (v65);
      v62 = *v2;
    }
    LODWORD(v234) = 0;
    v208 = v210;
    v209 = 0x800000000;
    v204 = &off_1E7F9F678;
    v205 = (uint64_t)&v208;
    v207 = &v204;
    sub_1C485DA84(*(_QWORD *)(v5 + 8), (int *)v2 + 10, (uint64_t)&v233, v9, v8, v62, (uint64_t)&v204);
    if (v207 == &v204)
    {
      v70 = (void (**)(void))((char *)v204 + 32);
    }
    else
    {
      if (!v207)
      {
LABEL_68:
        v204 = &v206;
        v205 = 0x1000000000;
        v201 = v203;
        v202 = 0x400000000;
        if ((_DWORD)v234)
        {
          v72 = (char *)v233;
          v73 = 152 * v234;
          do
          {
            v74 = operator new(0x20uLL);
            *v74 = &off_1E7F9F6C0;
            v74[1] = v4;
            v74[2] = v72;
            v74[3] = &v201;
            v190 = v74;
            sub_1C485DD68((unint64_t)v72, (uint64_t)&v204, v8, (uint64_t)v189);
            (*(void (**)(_QWORD *))(*v74 + 40))(v74);
            v72 += 152;
            v73 -= 152;
          }
          while (v73);
        }
        v199[0] = v200;
        v199[1] = (void *)0x1000000000;
        llvm::CCState::CCState((uint64_t)v189, *v2, *((_BYTE *)v2 + 5123), v172, (uint64_t)v199, **v171);
        v178 = 0;
        v176[2] = v162;
        v177 = 0;
        v176[0] = &off_1E7F9F708;
        v176[1] = v162;
        v75 = 1;
        if ((sub_1C54F2A64(v5, (uint64_t)v176, (uint64_t *)&v204, v189) & 1) != 0)
        {
          v184[1] = v4;
          v184[2] = v8;
          v185 = 1;
          v186 = v188;
          v187 = 0x800000000;
          v184[0] = &off_1E7F9F4B8;
          v188[12] = v163;
          v188[13] = v39;
          if (sub_1C54F2CF0(v5, (uint64_t)v184, (uint64_t)&v204, (uint64_t)v189, (uint64_t *)v199, v4, 0, 0))
          {
            if ((_DWORD)v202)
            {
              v76 = (char *)v201;
              v77 = (char *)v201 + 16 * v202;
              do
              {
                v78 = *((_QWORD *)v76 + 1);
                v79 = (uint64_t *)v4[6];
                v80 = *(_QWORD *)(v4[5] + 40);
                *(_QWORD *)(v78 + 24) = v80;
                v81 = *(_QWORD *)(v80 + 32);
                v82 = *(unsigned int *)(v78 + 40);
                if ((_DWORD)v82)
                {
                  v86 = *(_QWORD *)(v78 + 32);
                  v87 = *(_QWORD *)(v81 + 40);
                  v88 = 32 * v82;
                  do
                  {
                    if (!*(_BYTE *)v86)
                    {
                      v89 = *(unsigned int *)(v86 + 4);
                      if ((int)v89 >= 0)
                        v90 = (uint64_t *)(*(_QWORD *)(v87 + 272) + 8 * v89);
                      else
                        v90 = (uint64_t *)(*(_QWORD *)(v87 + 24) + 16 * (v89 & 0x7FFFFFFF) + 8);
                      v91 = *v90;
                      if (*v90)
                      {
                        v92 = *(_QWORD *)(v91 + 16);
                        *(_QWORD *)(v91 + 16) = v86;
                        *(_QWORD *)(v86 + 16) = v92;
                        if ((*(_BYTE *)(v86 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v86 + 24) = v91;
                        }
                        else
                        {
                          *(_QWORD *)(v86 + 24) = 0;
                          v90 = (uint64_t *)(v92 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v86 + 16) = v86;
                        *(_QWORD *)(v86 + 24) = 0;
                      }
                      *v90 = v86;
                    }
                    v86 += 32;
                    v88 -= 32;
                  }
                  while (v88);
                }
                v83 = *(_QWORD *)(v81 + 728);
                if (v83)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v83 + 24))(v83, v78);
                v84 = *v79 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v78 = v84 | *(_QWORD *)v78 & 7;
                *(_QWORD *)(v78 + 8) = v79;
                *(_QWORD *)(v84 + 8) = v78;
                *v79 = *v79 & 7 | v78;
                v85 = v4[7];
                if (v85)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v85 + 24))(v85, v78);
                v76 += 16;
              }
              while (v76 != v77);
            }
            if ((_DWORD)v209)
            {
              v100 = 0;
              v101 = (char *)v208;
              v102 = 4 * v209;
              do
              {
                v103 = *(_DWORD *)(*((_QWORD *)v2 + 15) + v100);
                if (v103 < 0 && (v103 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432))
                  v104 = *(_QWORD *)(*(_QWORD *)(v8 + 424) + 8 * (v103 & 0x7FFFFFFF));
                else
                  v104 = 0;
                v105 = *(_DWORD *)&v101[v100];
                if (v105 < 0 && (v105 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432))
                  v106 = *(_QWORD *)(*(_QWORD *)(v8 + 424) + 8 * (v105 & 0x7FFFFFFF));
                else
                  v106 = 0;
                LODWORD(v174) = *(_DWORD *)(*((_QWORD *)v2 + 15) + v100);
                v175 = 1;
                v173[0] = v105;
                v173[4] = 0;
                if (v104 == v106)
                  (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, int *, uint64_t, _QWORD))(*v4 + 32))(v4, 19, &v174, 1, v173, 1, 0);
                else
                  sub_1C5546EF4(v4, &v174, v173);
                v100 += 4;
              }
              while (v102 != v100);
            }
            v75 = 0;
            v107 = v177;
            if (v177 <= v169)
              v107 = v169;
            v169 = v107;
          }
          v184[0] = &off_1E7F9F460;
          v71 = v167;
          if (v186 != v188)
            free(v186);
        }
        else
        {
          v71 = v167;
        }
        if (v197 != &v198)
          free(v197);
        if (v195 != &v196)
          free(v195);
        if (v193 != &v194)
          free(v193);
        if (v191 != &v192)
          free(v191);
        if (v199[0] != v200)
          free(v199[0]);
        v61 = v169;
        if (v201 != v203)
          free(v201);
        v108 = (char **)v204;
        if ((_DWORD)v205)
        {
          v109 = 19 * v205;
          do
          {
            v110 = (char *)&v108[v109];
            v111 = v108[v109 - 5];
            if (&v108[v109 - 3] != (char **)v111)
              free(v111);
            v112 = (char *)*((_QWORD *)v110 - 9);
            if (v110 - 56 != v112)
              free(v112);
            v113 = v108[v109 - 18];
            if (&v108[v109 - 16] != (char **)v113)
              free(v113);
            v109 -= 19;
          }
          while (v109 * 8);
          v108 = (char **)v204;
        }
        if (v108 != &v206)
          free(v108);
        if (v208 != v210)
          free(v208);
        if (v75)
        {
          v46 = 0;
LABEL_168:
          v211[0] = &off_1E7F9F410;
          if (v215 != v217)
            free(v215);
          goto LABEL_170;
        }
        v60 = *(unsigned __int8 *)(v161 + 381);
LABEL_157:
        v114 = *(unsigned __int8 *)(v166 + 60);
        v115 = 63 - __clz((1 << *(_BYTE *)(v165 + 12)));
        if (v114 <= v115)
          LOBYTE(v114) = v115;
        v116 = (char *)(-(int)(1 << v114) & (v61 + (1 << v114) - 1));
        LODWORD(v204) = 1;
        if (v60)
          v117 = v116;
        else
          v117 = 0;
        v205 = 0;
        v206 = v117;
        llvm::MachineInstr::addOperand(v71, v164, (const llvm::MachineOperand *)&v204);
        LODWORD(v204) = 1;
        v206 = 0;
        v205 = 0;
        llvm::MachineInstr::addOperand(v71, v164, (const llvm::MachineOperand *)&v204);
        v119 = sub_1C55437B8(v4, 0x166u);
        v120 = (unint64_t *)v118;
        v121 = (unint64_t *)v4[6];
        v122 = *(_QWORD *)(v4[5] + 40);
        *(_QWORD *)(v118 + 24) = v122;
        v123 = *(_QWORD *)(v122 + 32);
        v124 = *(unsigned int *)(v118 + 40);
        if ((_DWORD)v124)
        {
          v148 = *(_QWORD *)(v118 + 32);
          v149 = *(_QWORD *)(v123 + 40);
          v150 = 32 * v124;
          do
          {
            if (!*(_BYTE *)v148)
            {
              v151 = *(unsigned int *)(v148 + 4);
              if ((int)v151 >= 0)
                v152 = (uint64_t *)(*(_QWORD *)(v149 + 272) + 8 * v151);
              else
                v152 = (uint64_t *)(*(_QWORD *)(v149 + 24) + 16 * (v151 & 0x7FFFFFFF) + 8);
              v153 = *v152;
              if (*v152)
              {
                v154 = *(_QWORD *)(v153 + 16);
                *(_QWORD *)(v153 + 16) = v148;
                *(_QWORD *)(v148 + 16) = v154;
                if ((*(_BYTE *)(v148 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v148 + 24) = v153;
                }
                else
                {
                  *(_QWORD *)(v148 + 24) = 0;
                  v152 = (uint64_t *)(v154 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v148 + 16) = v148;
                *(_QWORD *)(v148 + 24) = 0;
              }
              *v152 = v148;
            }
            v148 += 32;
            v150 -= 32;
          }
          while (v150);
        }
        v125 = *(_QWORD *)(v123 + 728);
        if (v125)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v125 + 24))(v125, v118);
        v126 = *v121 & 0xFFFFFFFFFFFFFFF8;
        *v120 = v126 | *v120 & 7;
        v120[1] = (unint64_t)v121;
        *(_QWORD *)(v126 + 8) = v120;
        *v121 = *v121 & 7 | (unint64_t)v120;
        v127 = v4[7];
        if (v127)
          (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v127 + 24))(v127, v120);
        v46 = 1;
        LODWORD(v204) = 1;
        v205 = 0;
        v206 = v117;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v120, v119, (const llvm::MachineOperand *)&v204);
        LODWORD(v204) = 1;
        v206 = 0;
        v205 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v120, v119, (const llvm::MachineOperand *)&v204);
        goto LABEL_168;
      }
      v70 = (void (**)(void))((char *)*v207 + 40);
    }
    (*v70)();
    goto LABEL_68;
  }
LABEL_170:
  if (v226 != &v227)
    free(v226);
  if (v224 != &v225)
    free(v224);
  if (v222 != &v223)
    free(v222);
  if (v220 != &v221)
    free(v220);
  if (v228[0] != v229)
    free(v228[0]);
  v128 = (char *)v230;
  if ((_DWORD)v231)
  {
    v129 = 152 * v231;
    do
    {
      v130 = &v128[v129];
      v131 = *(char **)&v128[v129 - 40];
      if (&v128[v129 - 24] != v131)
        free(v131);
      v132 = (char *)*((_QWORD *)v130 - 9);
      if (v130 - 56 != v132)
        free(v132);
      v133 = *(char **)&v128[v129 - 144];
      if (&v128[v129 - 128] != v133)
        free(v133);
      v129 -= 152;
    }
    while (v129);
    v128 = (char *)v230;
  }
  if (v128 != (char *)v232)
    free(v128);
  v134 = (char *)v233;
  if ((_DWORD)v234)
  {
    v135 = 152 * v234;
    do
    {
      v136 = &v134[v135];
      v137 = *(char **)&v134[v135 - 40];
      if (&v134[v135 - 24] != v137)
        free(v137);
      v138 = (char *)*((_QWORD *)v136 - 9);
      if (v136 - 56 != v138)
        free(v138);
      v139 = *(char **)&v134[v135 - 144];
      if (&v134[v135 - 128] != v139)
        free(v139);
      v135 -= 152;
    }
    while (v135);
    v134 = (char *)v233;
  }
  if (v134 != (char *)v235)
    free(v134);
  return v46;
}

_QWORD *sub_1C4860758(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7F9F460;
  v2 = (_QWORD *)a1[4];
  if (v2 != a1 + 6)
    free(v2);
  return a1;
}

_QWORD *sub_1C4860798(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7F9F410;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  return a1;
}

uint64_t sub_1C48607D8()
{
  return 0;
}

uint64_t sub_1C48607E0()
{
  return 1;
}

uint64_t sub_1C48607E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) != 0)
    return 0;
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1C4860870()
{
  return 0;
}

uint64_t sub_1C4860878(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, int a5, _BYTE *a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v15;

  *(_QWORD *)(a1 + 8) = a1 + 24;
  v15 = a1 + 8;
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 16) = 0x400000000;
  sub_1C48609D4((unsigned int *)(a1 + 8), a6, &a6[12 * a7]);
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_BYTE *)(a1 + 72) = a8;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  sub_1C4860A74((unsigned int *)(a1 + 80), a2, &a2[4 * a3]);
  *(_QWORD *)(a1 + 112) = a1 + 128;
  *(_QWORD *)(a1 + 120) = 0x200000000;
  *(_QWORD *)(a1 + 136) = a9;
  *(_DWORD *)(a1 + 144) = a5;
  if (a3 && !a7)
    sub_1C4860960(v15, 0, 0);
  return a1;
}

uint64_t sub_1C4860960(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
  {
    v7 = result;
    v5 = a3;
    v6 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v3 + 1, 12);
    a3 = v5;
    a2 = v6;
    result = v7;
    LODWORD(v3) = *(_DWORD *)(v7 + 8);
  }
  v4 = *(_QWORD *)result + 12 * v3;
  *(_QWORD *)v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  ++*(_DWORD *)(result + 8);
  return result;
}

unsigned int *sub_1C48609D4(unsigned int *result, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  unsigned int *v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int64_t v9;
  _BYTE *v10;

  v3 = a3;
  v4 = result;
  v5 = a3 - a2;
  v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 2);
  v7 = result[2];
  if (v6 + v7 > result[3])
  {
    v9 = v5;
    v10 = a2;
    v8 = v3;
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + v7, 12);
    v3 = v8;
    v5 = v9;
    a2 = v10;
    LODWORD(v7) = v4[2];
  }
  if (a2 != v3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v4 + 12 * v7), a2, v5);
    LODWORD(v7) = v4[2];
  }
  v4[2] = v7 + v6;
  return result;
}

unsigned int *sub_1C4860A74(unsigned int *result, _BYTE *__src, _BYTE *a3)
{
  _DWORD *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = result;
  v6 = a3 - __src;
  v7 = result[2];
  v8 = v7 + ((a3 - __src) >> 2);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 4);
    LODWORD(v7) = v5[2];
  }
  if (__src != a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v5 + 4 * v7), __src, v6);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 2);
  return result;
}

uint64_t sub_1C4860AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t result;

  v12 = 16;
  if (!*(_BYTE *)(a11 + 4))
    v12 = 8;
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t))(a1 + v12))(a2, a5, a6, a7, a9, a10, a11);
  if ((result & 1) == 0)
    *(_QWORD *)(a1 + 24) = *(unsigned int *)(a11 + 40);
  return result;
}

void sub_1C4860B68(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7F9F410;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4860BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C486129C(*(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, a3, a4);
}

_DWORD *sub_1C4860BD0(uint64_t a1, unsigned int a2, int a3, uint64_t a4, int a5)
{
  llvm::MachineInstr *v8;
  llvm::MachineFunction *v9;
  int v10;
  uint64_t v11;
  _DWORD v13[4];
  uint64_t v14;
  int v15;
  _DWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v14 = a4;
  v15 = a5;
  v8 = *(llvm::MachineInstr **)(a1 + 40);
  v9 = *(llvm::MachineFunction **)(a1 + 32);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v16[0] = 0x2000000;
  v16[1] = a3;
  llvm::MachineInstr::addOperand(v8, v9, (const llvm::MachineOperand *)v16);
  v10 = sub_1C54F5000(a1, a2, (uint64_t)&v14, 0);
  v11 = *(_QWORD *)(a1 + 8);
  v13[0] = a3;
  v13[2] = 1;
  v16[0] = v10;
  LODWORD(v18) = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 19, v13, 1, v16, 1, 0);
  return sub_1C476CB98((_DWORD *)(a1 + 48), v14, v15);
}

llvm::MachineFunction *sub_1C4860C90(uint64_t a1, unsigned int a2, int a3, unint64_t a4, __int128 *a5, uint64_t a6)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  llvm::LLVMContext ****v15;
  unint64_t v16;
  llvm::LLVMContext ***v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  unint64_t v22;
  _QWORD *v23;
  int v25[6];
  unsigned int v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;

  v31 = a4;
  if ((*(unsigned __int8 *)(a6 + 8) >> 2) - 1 <= 2u)
  {
    LOBYTE(v26) = *(_BYTE *)(a6 + 9);
    v11 = sub_1C47A8C74((unsigned __int8 *)&v26);
    v13 = v12;
    if (v11 != sub_1C4825F50(&v31) || v13 != v14)
      a2 = sub_1C54F5000(a1, a2, a6, 0);
  }
  v15 = *(llvm::LLVMContext *****)(*(_QWORD *)(a1 + 8) + 8);
  v29 = *a5;
  v30 = *((_QWORD *)a5 + 2);
  v16 = v31;
  v17 = *v15;
  v18 = (uint64_t)((*v15)[5] + 34);
  LOBYTE(v26) = *(_BYTE *)(a6 + 9);
  v27 = 0;
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v26, **v17);
  llvm::DataLayout::getAlignment(v18, v19);
  v21 = v20;
  v22 = sub_1C484358C((uint64_t)(v15 + 16), 80, 3);
  *(_OWORD *)v22 = v29;
  *(_QWORD *)(v22 + 16) = v30;
  *(_QWORD *)(v22 + 24) = v16;
  *(_WORD *)(v22 + 32) = 2;
  *(_BYTE *)(v22 + 34) = v21;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_QWORD *)(v22 + 72) = 0;
  *(_WORD *)(v22 + 36) = 1;
  v23 = *(_QWORD **)(a1 + 8);
  v26 = a2;
  v28 = 0;
  v25[0] = a3;
  v25[4] = 0;
  return sub_1C5546848(v23, (int *)&v26, v25, (llvm::MachineMemOperand *)v22);
}

uint64_t sub_1C4860DFC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, *(unsigned int *)(*(_QWORD *)(a2 + 80) + 4 * a3), a4, a5, a6, a7);
}

void sub_1C4860E20(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7F9F410;
  v2 = (_QWORD *)a1[6];
  if (v2 != a1 + 8)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4860E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4860E7C(*(uint64_t **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, a4);
}

uint64_t sub_1C4860E7C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v8 = a1[1];
  v9 = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 8) + 16))(*(_QWORD *)(v8 + 8), *(_QWORD *)v8);
  if (v9[381])
  {
    v22 = 257;
    LODWORD(v23) = 0;
    sub_1C5544694((uint64_t)a1, (unint64_t *)&v22, a3);
    v21 = sub_1C6139924(a1, a2, *(unsigned int *)(*(_QWORD *)(v20 + 32) + 4));
    v28 = 514;
    v29 = 0;
    LODWORD(v22) = v21;
    v24 = 0;
    sub_1C5546EF4(a1, &v28, (int *)&v22);
    goto LABEL_4;
  }
  (*(void (**)(_BYTE *))(*(_QWORD *)v9 + 176))(v9);
  v28 = 257;
  v29 = 0;
  LODWORD(v22) = 66;
  v24 = 0;
  v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a1 + 32))(a1, 19, &v28, 1, &v22, 1, 0);
  v28 = 514;
  v29 = 0;
  v22 = v10;
  v23 = v11;
  v24 = 1;
  sub_1C5546EF4(a1, &v28, (int *)&v22);
  v13 = *(unsigned int *)(*(_QWORD *)(v12 + 32) + 4);
  if (a3)
  {
    v22 = 513;
    LODWORD(v23) = 0;
    v14 = sub_1C5544694((uint64_t)a1, (unint64_t *)&v22, a3);
    v28 = 514;
    v29 = 0;
    LODWORD(v22) = v13;
    v24 = 0;
    v25 = v14;
    v26 = v15;
    v27 = 1;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a1 + 32))(a1, 193, &v28, 1, &v22, 2, 0);
LABEL_4:
    v13 = *(unsigned int *)(*(_QWORD *)(v16 + 32) + 4);
  }
  v17 = *(_QWORD *)(v8 + 432);
  v18 = (v17 + 8) | 4;
  LODWORD(v17) = *(_DWORD *)(v17 + 20);
  *(_QWORD *)a4 = v18;
  *(_QWORD *)(a4 + 8) = a3;
  *(_DWORD *)(a4 + 16) = v17;
  *(_BYTE *)(a4 + 20) = 0;
  return v13;
}

uint64_t sub_1C4861064(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t i;
  __int128 v17;
  unint64_t v18;
  int v19;
  uint64_t v20[4];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[2];
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 328);
  v5 = *(_QWORD *)(v4 + 56);
  if (v5 == v4 + 48)
  {
LABEL_7:
    v17 = *(_OWORD *)(a1 + 40);
    v23 = 0;
    v20[0] = (uint64_t)&off_1E816EC08;
    v20[1] = v3;
    v20[3] = *(_QWORD *)(v3 + 40);
    v20[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 104))(*(_QWORD *)(v3 + 16));
    v21 = 0u;
    v22 = 0u;
    if (v20 != (uint64_t *)a1)
    {
      v6 = *(unsigned __int8 **)(a1 + 32);
      *(_QWORD *)&v21 = v6;
      if (v6)
        llvm::MetadataTracking::track((uint64_t)&v21, v6, 2);
    }
    v7 = *(_QWORD *)(v4 + 56);
    *((_QWORD *)&v21 + 1) = v4;
    *(_QWORD *)&v22 = v7;
    v29 = 257;
    v30 = 0;
    v24[0] = 0;
    v25 = 3;
    v26 = 0;
    v28 = 3;
    v8 = sub_1C5548620(v20, 270, &v29, 1, (int *)v24, 2, 0);
    v29 = 257;
    v30 = 0;
    v24[0] = v8;
    v24[1] = v9;
    v25 = 1;
    v18 = 257;
    v19 = 0;
    v26 = sub_1C5544694((uint64_t)v20, &v18, 2);
    v27 = v10;
    v28 = 1;
    sub_1C5548620(v20, 127, &v29, 1, (int *)v24, 2, 0);
    *(_OWORD *)(a1 + 40) = v17;
    v12 = *(unsigned int *)(*(_QWORD *)(v11 + 32) + 4);
    v20[0] = (uint64_t)&off_1E816EC08;
    if ((_QWORD)v21)
      llvm::MetadataTracking::untrack((uint64_t)&v21, (unsigned __int8 *)v21);
  }
  else
  {
    while (**(_WORD **)(v5 + 16) != 270)
    {
      if ((*(_BYTE *)v5 & 4) == 0)
      {
        while ((*(_WORD *)(v5 + 44) & 8) != 0)
          v5 = *(_QWORD *)(v5 + 8);
      }
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == v4 + 48)
        goto LABEL_7;
    }
    v13 = *(unsigned int *)(*(_QWORD *)(v5 + 32) + 4);
    if ((int)v13 >= 0)
      v14 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v13);
    else
      v14 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
    for (i = *v14; (*(_BYTE *)(i + 3) & 1) != 0; i = *(_QWORD *)(i + 24))
      ;
    return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(i + 8) + 32) + 4);
  }
  return v12;
}

uint64_t sub_1C486129C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int FixedObject;
  uint64_t *FixedStack;
  int v10;
  uint64_t GenericVirtualRegister;
  int v13[4];

  FixedObject = llvm::MachineFrameInfo::CreateFixedObject(*(llvm::MachineFrameInfo **)(a1[1] + 56), a3, a4, 1, 0);
  FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(a1[1] + 432), FixedObject);
  if (FixedStack)
    v10 = *((_DWORD *)FixedStack + 3);
  else
    v10 = 0;
  *(_QWORD *)a5 = (unint64_t)FixedStack | 4;
  *(_QWORD *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 16) = v10;
  *(_BYTE *)(a5 + 20) = 0;
  GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 514, "", 0);
  v13[0] = GenericVirtualRegister;
  v13[2] = 1;
  sub_1C5543FA8(a1, v13, FixedObject);
  return GenericVirtualRegister;
}

void sub_1C4861364(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7F9F460;
  v2 = (_QWORD *)a1[4];
  if (v2 != a1 + 6)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C48613B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C486129C(*(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, a3, a4);
}

_DWORD *sub_1C48613CC(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  _QWORD v17[2];
  int v18;
  unint64_t v19;
  int v20;

  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 64))(a1, a3, a2);
  if ((a5 >> 2) - 1 >= 3)
  {
    v14 = *(_QWORD *)(a1 + 8);
    LODWORD(v19) = a2;
    v20 = 1;
    LODWORD(v17[0]) = a3;
    v18 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 19, &v19, 1, v17, 1, 0);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
    llvm::LLT::LLT(&v16, BYTE2(a5));
    v19 = v16;
    v20 = 0;
    LODWORD(v17[0]) = a3;
    v18 = 0;
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 19, &v19, 1, v17, 1, 0);
    v12 = *(_QWORD *)(a1 + 8);
    LODWORD(v19) = a2;
    v20 = 1;
    v17[0] = v11;
    v17[1] = v13;
    v18 = 1;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 119, &v19, 1, v17, 1, 0);
  }
  return sub_1C476CB98((_DWORD *)(a1 + 32), a4, a5);
}

llvm::MachineFunction *sub_1C4861510(uint64_t a1, int a2, int a3, unint64_t a4, __int128 *a5, unsigned __int8 *a6)
{
  llvm::LLVMContext ****v11;
  llvm::LLVMContext ***v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  llvm::MachineFunction *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  llvm::MachineFunction *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;

  v11 = *(llvm::LLVMContext *****)(*(_QWORD *)(a1 + 8) + 8);
  v34 = *a5;
  v35 = *((_QWORD *)a5 + 2);
  v36 = a4;
  v12 = *v11;
  v13 = (uint64_t)((*v11)[5] + 34);
  LOBYTE(v29) = a6[9];
  v30 = 0;
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v29, **v12);
  llvm::DataLayout::getAlignment(v13, v14);
  LOBYTE(v13) = v15;
  v16 = sub_1C484358C((uint64_t)(v11 + 16), 80, 3);
  *(_OWORD *)v16 = v34;
  *(_QWORD *)(v16 + 16) = v35;
  *(_QWORD *)(v16 + 24) = a4;
  *(_WORD *)(v16 + 32) = 33;
  *(_BYTE *)(v16 + 34) = v13;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_QWORD *)(v16 + 72) = 0;
  *(_WORD *)(v16 + 36) = 1;
  if ((a6[8] >> 2) - 1 >= 3u)
  {
    v23 = *(_QWORD **)(a1 + 8);
    LODWORD(v32) = a2;
    v33 = 1;
    LODWORD(v29) = a3;
    v31 = 0;
    return sub_1C55464EC(v23, 0x5Au, (int *)&v32, (int *)&v29, (llvm::MachineMemOperand *)v16);
  }
  LOBYTE(v29) = a6[9];
  v17 = sub_1C47A8C74((unsigned __int8 *)&v29);
  v19 = v18;
  v20 = sub_1C4825F50(&v36);
  v22 = *(_QWORD **)(a1 + 8);
  if (v17 == v20 && v19 == v21)
  {
    LODWORD(v32) = a2;
    v33 = 1;
    LODWORD(v29) = a3;
    v31 = 0;
    v23 = v22;
    return sub_1C55464EC(v23, 0x5Au, (int *)&v32, (int *)&v29, (llvm::MachineMemOperand *)v16);
  }
  llvm::LLT::LLT(&v28, a6[10]);
  v32 = v28;
  v33 = 0;
  LODWORD(v29) = a3;
  v31 = 0;
  v25 = sub_1C55464EC(v22, 0x5Au, (int *)&v32, (int *)&v29, (llvm::MachineMemOperand *)v16);
  v26 = *(_QWORD *)(a1 + 8);
  LODWORD(v32) = a2;
  v33 = 1;
  v29 = v25;
  v30 = v27;
  v31 = 1;
  return (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, llvm::MachineFunction **, uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 119, &v32, 1, &v29, 1, 0);
}

void sub_1C4861708(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 40);
  v8 = (char *)v6[20];
  v7 = v6[21];
  if ((unint64_t)v8 >= v7)
  {
    v10 = (char *)v6[19];
    v11 = (v8 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      goto LABEL_36;
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 60)
        goto LABEL_37;
      v15 = (char *)operator new(16 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[16 * v11];
    *(_WORD *)v16 = a2;
    *((_QWORD *)v16 + 1) = -1;
    v9 = v16 + 16;
    if (v8 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
        v16 -= 16;
        v8 -= 16;
      }
      while (v8 != v10);
      v8 = (char *)v6[19];
    }
    v6[19] = v16;
    v6[20] = v9;
    v6[21] = &v15[16 * v14];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_WORD *)v8 = a2;
    *((_QWORD *)v8 + 1) = -1;
    v9 = v8 + 16;
  }
  v6[20] = v9;
  v17 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 40);
  v18 = a2 | (unint64_t)(a3 << 32);
  v20 = (unint64_t *)v17[58];
  v19 = v17[59];
  if ((unint64_t)v20 < v19)
  {
    *v20 = v18;
    v21 = v20 + 1;
    goto LABEL_35;
  }
  v22 = (_QWORD *)v17[57];
  v23 = v20 - v22;
  v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 61)
LABEL_36:
    abort();
  v25 = v19 - (_QWORD)v22;
  if (v25 >> 2 > v24)
    v24 = v25 >> 2;
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
    v26 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v26 = v24;
  if (!v26)
  {
    v27 = 0;
    goto LABEL_30;
  }
  if (v26 >> 61)
LABEL_37:
    sub_1C4764EE4();
  v27 = (char *)operator new(8 * v26);
LABEL_30:
  v28 = &v27[8 * v23];
  *(_QWORD *)v28 = v18;
  v21 = v28 + 8;
  if (v20 != v22)
  {
    do
    {
      v29 = *--v20;
      *((_QWORD *)v28 - 1) = v29;
      v28 -= 8;
    }
    while (v20 != v22);
    v20 = (unint64_t *)v17[57];
  }
  v17[57] = v28;
  v17[58] = v21;
  v17[59] = &v27[8 * v26];
  if (v20)
    operator delete(v20);
LABEL_35:
  v17[58] = v21;
}

void sub_1C48618E4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7F9F460;
  v2 = (_QWORD *)a1[4];
  if (v2 != a1 + 6)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4861934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4860E7C(*(uint64_t **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, a4);
}

void sub_1C4861940(uint64_t a1, int a2)
{
  llvm::MachineInstr *v2;
  llvm::MachineFunction *v3;
  _DWORD v4[2];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(llvm::MachineFunction **)(a1 + 144);
  v2 = *(llvm::MachineInstr **)(a1 + 152);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v4[0] = 50331648;
  v4[1] = a2;
  llvm::MachineInstr::addOperand(v2, v3, (const llvm::MachineOperand *)v4);
}

void sub_1C4861980()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4861994(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7F9F510;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C48619CC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7F9F510;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C48619EC(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v4;
  int v6[6];
  unint64_t v7;
  int v8;

  v3 = *a3;
  LODWORD(v7) = *a2;
  v8 = 1;
  v4 = *(uint64_t **)(a1 + 8);
  v6[0] = **(_DWORD **)(a1 + 16);
  v6[4] = 0;
  return sub_1C5546FE4(v4, &v7, v6, v3);
}

void sub_1C4861A3C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4861A50(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7F9F558;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C4861A88(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7F9F558;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4861AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _DWORD v6[6];

  v3 = *(char **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v6[0] = **(_DWORD **)(*(_QWORD *)(a1 + 16) + 80);
  v6[4] = 0;
  return sub_1C5547540(v4, v3, v2, (uint64_t)v6);
}

void sub_1C4861AEC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4861B00(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E7F9F5A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_1C4861B48(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E7F9F5A0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4861B78(uint64_t a1, int *a2, uint64_t *a3)
{
  int v4;
  uint64_t v5;
  _BYTE *v6;
  int GenericVirtualRegister;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t result;
  int v12[6];
  _DWORD v13[4];
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *a3;
  v6 = *(_BYTE **)(a1 + 8);
  if (!*v6)
  {
    *v6 = 1;
    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 24), **(_QWORD **)(a1 + 32), "", 0);
    **(_DWORD **)(a1 + 16) = GenericVirtualRegister;
    v8 = *(_QWORD *)(a1 + 40);
    LODWORD(v14) = GenericVirtualRegister;
    DWORD2(v14) = 1;
    (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 68, &v14, 1, 0, 0, 0);
  }
  v9 = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 24), **(_QWORD **)(a1 + 32), "", 0);
  v10 = *(uint64_t **)(a1 + 40);
  v13[0] = v9;
  v13[2] = 1;
  LODWORD(v14) = **(_DWORD **)(a1 + 16);
  v15 = 0;
  v12[0] = v4;
  v12[4] = 0;
  result = sub_1C55473DC(v10, (uint64_t)v13, &v14, v12, v5);
  **(_DWORD **)(a1 + 16) = v9;
  return result;
}

void sub_1C4861CA4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4861CB8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7F9F5E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C4861CF0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7F9F5E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C4861D10(uint64_t a1, int **a2)
{
  int *v2;
  int *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  _DWORD v11[4];
  void *v12;
  uint64_t v13;
  _QWORD v14[25];

  v14[24] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = a2[1];
  v4 = *(_QWORD *)(a1 + 8);
  v11[0] = **(_DWORD **)(*(_QWORD *)(a1 + 16) + 80);
  v11[2] = 1;
  v12 = v14;
  v13 = 0x800000000;
  if ((unint64_t)(4 * (_QWORD)v3) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v12, (uint64_t)v14, (4 * (uint64_t)v3) >> 2, 24);
    v5 = v13;
    v7 = v12;
    v6 = v13;
    if (v3)
    {
LABEL_3:
      v8 = &v7[3 * v5];
      v9 = 4 * (_QWORD)v3;
      do
      {
        v10 = *v2++;
        *v8 = v10;
        v8[4] = 0;
        v8 += 6;
        v9 -= 4;
      }
      while (v9);
      v6 = v13;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = v14;
    if (v3)
      goto LABEL_3;
  }
  LODWORD(v13) = v6 + ((unint64_t)(4 * (_QWORD)v3) >> 2);
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, 77, v11, 1, v7);
  if (v12 != v14)
    free(v12);
}

unint64_t sub_1C4861E4C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 152 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C4861EB4(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C4861EB4(a1, v5);
    }
  }
  return a2;
}

void sub_1C4861EB4(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 152, &v5);
  sub_1C4861F24((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C4861F24(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a1 + 152 * v2;
    do
    {
      v8 = v6 + v5;
      v9 = (_QWORD *)(a2 + v5);
      *v9 = *(_QWORD *)(v6 + v5);
      *(_QWORD *)(a2 + v5 + 8) = a2 + v5 + 24;
      v9[2] = 0x400000000;
      if (*(_DWORD *)(v6 + v5 + 16))
        sub_1C48620A0(a2 + v5 + 8, v8 + 8);
      v10 = *(_BYTE *)(v8 + 72);
      v9[10] = v9 + 12;
      v11 = (uint64_t)(v9 + 10);
      *(_BYTE *)(v11 - 8) = v10;
      *(_QWORD *)(v11 + 8) = 0x400000000;
      if (*(_DWORD *)(v8 + 88))
        sub_1C48621E4(v11, v6 + v5 + 80);
      v12 = a2 + v5;
      *(_QWORD *)(a2 + v5 + 112) = a2 + v5 + 128;
      *(_QWORD *)(a2 + v5 + 120) = 0x200000000;
      if (*(_DWORD *)(v8 + 120))
        sub_1C48621E4(a2 + v5 + 112, v6 + v5 + 112);
      v13 = *(_QWORD *)(v8 + 136);
      *(_DWORD *)(v12 + 144) = *(_DWORD *)(v8 + 144);
      *(_QWORD *)(v12 + 136) = v13;
      v5 += 152;
    }
    while (v8 + 152 != v7);
    v14 = *((_DWORD *)a1 + 2);
    if (v14)
    {
      v15 = *a1;
      v16 = 152 * v14;
      do
      {
        v17 = v15 + v16;
        v18 = *(void **)(v15 + v16 - 40);
        if ((void *)(v15 + v16 - 24) != v18)
          free(v18);
        v19 = *(void **)(v17 - 72);
        if ((void *)(v17 - 56) != v19)
          free(v19);
        v20 = *(void **)(v15 + v16 - 144);
        if ((void *)(v15 + v16 - 128) != v20)
          free(v20);
        v16 -= 152;
      }
      while (v16);
    }
  }
}

uint64_t sub_1C48620A0(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v4 = a2 + 16;
    v3 = *(const void **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v11 = a2;
      v12 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v12);
        v3 = *(const void **)v11;
      }
      *(_QWORD *)a1 = v3;
      v13 = v11;
      v14 = *(_QWORD *)(v11 + 8);
      v6 = (_DWORD *)(v11 + 8);
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
      goto LABEL_10;
    }
    v6 = (_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *(const void **)a2, 12 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v16 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 12);
      a2 = v16;
    }
    else if ((_DWORD)v7)
    {
      v15 = *(unsigned int *)(a1 + 8);
      v17 = a2;
      memmove(*(void **)a1, v3, 12 * v7);
      v8 = v15;
      a2 = v17;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 12 * v8), (const void *)(*(_QWORD *)a2 + 12 * v8), *(_QWORD *)a2 + 12 * v9 - (*(_QWORD *)a2 + 12 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

uint64_t sub_1C48621E4(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v11 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v11);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_10;
    }
    v7 = (_DWORD *)(a2 + 8);
    v6 = *(unsigned int *)(a2 + 8);
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 >= v6)
    {
      if ((_DWORD)v6)
        memmove(*(void **)a1, v4, 4 * v6);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v6)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6, 4);
    }
    else if ((_DWORD)v8)
    {
      memmove(*(void **)a1, v4, 4 * v8);
LABEL_7:
      v9 = *v7;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 4 * v8), (const void *)(*(_QWORD *)a2 + 4 * v8), *(_QWORD *)a2 + 4 * v9 - (*(_QWORD *)a2 + 4 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v6;
LABEL_10:
      *v7 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

uint64_t sub_1C4862300(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v3 = *(unsigned int *)(a2 + 8);
    v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if ((_DWORD)v3)
        memmove(*(void **)a1, *(const void **)a2, 12 * v3);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v3)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v9 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v3, 12);
      a2 = v9;
    }
    else if ((_DWORD)v4)
    {
      v8 = *(unsigned int *)(a1 + 8);
      v10 = a2;
      memmove(*(void **)a1, *(const void **)a2, 12 * v4);
      v5 = v8;
      a2 = v10;
LABEL_6:
      v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 12 * v5), (const void *)(*(_QWORD *)a2 + 12 * v5), *(_QWORD *)a2 + 12 * v6 - (*(_QWORD *)a2 + 12 * v5));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v3;
      return a1;
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_1C48623F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v3 = *(unsigned int *)(a2 + 8);
    v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if ((_DWORD)v3)
        memmove(*(void **)a1, *(const void **)a2, 4 * v3);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v3)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v9 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v3, 4);
      a2 = v9;
    }
    else if ((_DWORD)v4)
    {
      v8 = *(unsigned int *)(a1 + 8);
      v10 = a2;
      memmove(*(void **)a1, *(const void **)a2, 4 * v4);
      v5 = v8;
      a2 = v10;
LABEL_6:
      v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 4 * v5), (const void *)(*(_QWORD *)a2 + 4 * v5), *(_QWORD *)a2 + 4 * v6 - (*(_QWORD *)a2 + 4 * v5));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v3;
      return a1;
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_1C48624D0(uint64_t a1, _BYTE *a2, uint64_t *a3, int *a4, uint64_t a5, char *a6)
{
  void *v12;
  int v13;
  unsigned int v14;
  unint64_t v16;

  v16 = 0;
  v12 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 152, &v16);
  sub_1C4860878((uint64_t)v12 + 152 * *(unsigned int *)(a1 + 8), a2, 1, *a3, *a4, *(_BYTE **)a5, *(unsigned int *)(a5 + 8), *a6, 0);
  sub_1C4861F24((uint64_t *)a1, (uint64_t)v12);
  v13 = v16;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v12;
  v14 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 12) = v13;
  return (uint64_t)v12 + 152 * v14 - 152;
}

uint64_t sub_1C48625A4(uint64_t a1, _BYTE *a2, uint64_t *a3, int *a4, uint64_t a5, char *a6)
{
  void *v12;
  int v13;
  unsigned int v14;
  unint64_t v16;

  v16 = 0;
  v12 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 152, &v16);
  sub_1C4860878((uint64_t)v12 + 152 * *(unsigned int *)(a1 + 8), a2, 1, *a3, *a4, *(_BYTE **)a5, *(unsigned int *)(a5 + 8), *a6, 0);
  sub_1C4861F24((uint64_t *)a1, (uint64_t)v12);
  v13 = v16;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v12;
  v14 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 12) = v13;
  return (uint64_t)v12 + 152 * v14 - 152;
}

void sub_1C4862680()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4862694(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7F9F630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C48626CC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7F9F630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C48626EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _DWORD v6[6];

  v3 = *(char **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v6[0] = **(_DWORD **)(*(_QWORD *)(a1 + 16) + 80);
  v6[4] = 0;
  return sub_1C5547540(v4, v3, v2, (uint64_t)v6);
}

void sub_1C4862730()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4862744(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7F9F678;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4862778(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7F9F678;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1C4862794(_QWORD *result, int *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = result[1];
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(result[1], v3 + 16, v4 + 1, 4);
    LODWORD(v4) = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

void sub_1C48627F4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4862808(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7F9F6C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C4862848(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7F9F6C0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C4862870(uint64_t a1, int **a2)
{
  int *v3;
  int *v4;
  llvm::MachineFunction *v5;
  llvm::MachineInstr *v6;
  llvm::MachineInstr *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  llvm::MachineFunction **v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *a2;
  v4 = a2[1];
  v5 = sub_1C55437B8(*(_QWORD **)(a1 + 8), 0x4Du);
  v7 = v6;
  v8 = **(_DWORD **)(*(_QWORD *)(a1 + 16) + 80);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v14 = 0x1000000;
  v15 = v8;
  llvm::MachineInstr::addOperand(v6, v5, (const llvm::MachineOperand *)&v14);
  if (v4)
  {
    v9 = 4 * (_QWORD)v4;
    do
    {
      v10 = *v3++;
      v16 = 0;
      v14 = 0;
      v15 = v10;
      v17 = 0;
      v18 = 0;
      llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)&v14);
      v9 -= 4;
    }
    while (v9);
  }
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(unsigned int *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v11 + 16, v12 + 1, 16);
    LODWORD(v12) = *(_DWORD *)(v11 + 8);
  }
  v13 = (llvm::MachineFunction **)(*(_QWORD *)v11 + 16 * v12);
  *v13 = v5;
  v13[1] = v7;
  ++*(_DWORD *)(v11 + 8);
}

uint64_t sub_1C4862964(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeFunctionGroupInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "AGX2 Specific CodeGen Prepare";
  *(_QWORD *)(v3 + 8) = 29;
  *(_QWORD *)(v3 + 16) = "agx2-codegen-prepare";
  *(_QWORD *)(v3 + 24) = 20;
  *(_QWORD *)(v3 + 32) = &unk_1EF8EF710;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C4862AE0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C4862A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EF710;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E7F9F7B0;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 32);
    }
    else
    {
      *(_QWORD *)(a1 + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  v6 = *(_QWORD *)(a3 + 24);
  if (v6)
  {
    if (v6 == a3)
    {
      *(_QWORD *)(a1 + 88) = a1 + 64;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 88) = 0;
  }
  return a1;
}

uint64_t sub_1C4862AE0()
{
  uint64_t v0;
  void (**v1)(void);
  void (**v2)(void);
  _QWORD v4[3];
  _QWORD *v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v6[0] = &unk_1E7F9F768;
  v6[1] = sub_1C4862BE8;
  v7 = v6;
  v4[0] = &unk_1E7F9F768;
  v4[1] = sub_1C4862BE8;
  v5 = v4;
  sub_1C4862A10(v0, (uint64_t)v6, (uint64_t)v4);
  if (v5 == v4)
  {
    v1 = (void (**)(void))(v4[0] + 32);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v1 = (void (**)(void))(*v5 + 40);
  }
  (*v1)();
LABEL_6:
  if (v7 == v6)
  {
    v2 = (void (**)(void))(v6[0] + 32);
    goto LABEL_10;
  }
  if (v7)
  {
    v2 = (void (**)(void))(*v7 + 40);
LABEL_10:
    (*v2)();
  }
  return v0;
}

uint64_t sub_1C4862BE8()
{
  return 0;
}

void sub_1C4862BF0(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  llvm::Pass *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7F9F7B0;
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 11);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (llvm::Pass *)*((_QWORD *)this + 7);
  if (v5 == (llvm::Pass *)((char *)this + 32))
  {
    v6 = 4;
    v5 = (llvm::Pass *)((char *)this + 32);
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
  }
  llvm::Pass::~Pass(this);
}

void sub_1C4862C7C(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  llvm::Pass *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7F9F7B0;
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 11);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (llvm::Pass *)*((_QWORD *)this + 7);
  if (v5 == (llvm::Pass *)((char *)this + 32))
  {
    v6 = 4;
    v5 = (llvm::Pass *)((char *)this + 32);
  }
  else
  {
    if (!v5)
    {
LABEL_11:
      llvm::Pass::~Pass(this);
      JUMPOUT(0x1CAA32FC0);
    }
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
  goto LABEL_11;
}

const char *sub_1C4862D1C()
{
  return "AGX2 Specific CodeGen Prepare";
}

void *sub_1C4862D2C(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1C4862DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  void *v8;
  uint64_t v9;
  void **v10;
  void *v11;
  uint64_t v12;
  void **v13;
  void *v14;
  llvm::Instruction *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  llvm::ValueAsMetadata *v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  int v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *Select;
  llvm::Value *FCmpHelper;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  unsigned __int8 *v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v54;
  llvm::Value *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  llvm::Value *v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  llvm::Type *v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  llvm::UndefValue *v86;
  llvm::Type *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  llvm::GetElementPtrInst *v91;
  uint64_t ***v92;
  uint64_t v93;
  char v94;
  char v95;
  char *v96;
  char *v97;
  llvm::Value *v98;
  uint64_t **v99;
  _QWORD *v100;
  uint64_t **v101;
  const llvm::APInt *v102;
  llvm::ConstantInt *v103;
  unsigned int v104;
  unint64_t v105;
  llvm::ValueHandleBase *v106;
  char *v107;
  char *v108;
  unsigned __int8 **v109;
  int v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  llvm::PointerType *v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  uint64_t ***v119;
  char *v120;
  char *v121;
  llvm::Value *v122;
  uint64_t **v123;
  _QWORD *v124;
  uint64_t **v125;
  llvm::PointerType *v126;
  llvm::PointerType *v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unsigned __int8 *v131;
  unsigned __int8 *v132;
  __int16 v133;
  char *v134;
  char *v135;
  llvm::Value *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  llvm::ConstantInt *v140;
  llvm::Value **v141;
  unsigned __int8 *v142;
  llvm::Value **v143;
  unsigned __int8 *v144;
  llvm::Type *v145;
  llvm::UndefValue *v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  llvm::Value **v149;
  unsigned __int8 *v150;
  const char *v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  llvm::Type *v158;
  unsigned int v159;
  uint64_t v160;
  unsigned int v161;
  _QWORD *v162;
  llvm::PointerType *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t *v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  unsigned __int8 *v174;
  unsigned __int8 *v175;
  uint64_t ***v176;
  llvm::ConstantInt *v177;
  llvm::Value **v178;
  uint64_t v179;
  unsigned __int8 *v180;
  char *v181;
  char *v182;
  uint64_t ****v183;
  llvm::Value *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t **v188;
  uint64_t *****v189;
  uint64_t **v190;
  llvm::PointerType *v191;
  llvm::UndefValue *v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  unsigned __int8 *v196;
  unsigned __int8 *v197;
  llvm::Value **v198;
  uint64_t v199;
  unsigned __int8 *v200;
  llvm::Value **v201;
  uint64_t v202;
  unsigned __int8 *v203;
  llvm::Type *v204;
  llvm::UndefValue *v205;
  unsigned __int8 *v206;
  unsigned __int8 *v207;
  __int16 v208;
  char *v209;
  char *v210;
  unsigned __int8 **v211;
  llvm::Value *v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int8 ***v217;
  uint64_t v218;
  const char *v219;
  unint64_t v220;
  unint64_t v221;
  unsigned int v222;
  unint64_t v223;
  uint64_t v224;
  int v225;
  llvm::Type *v226;
  unsigned int v227;
  uint64_t v228;
  unsigned int v229;
  _QWORD *v230;
  llvm::FixedVectorType *v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t *UnaryIntrinsic;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  const llvm::APInt *v240;
  uint64_t v241;
  unsigned int v242;
  unsigned __int8 *v243;
  unsigned int v244;
  unsigned __int8 *v245;
  unsigned __int8 *v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  int v250;
  int v251;
  uint64_t *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t *v264;
  _QWORD *v265;
  unsigned int v266;
  uint64_t i;
  unsigned __int8 *v268;
  unsigned int v269;
  unsigned __int8 *v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  llvm::Constant ***v275;
  llvm::Value **IntegerValue;
  char *v277;
  char *v278;
  uint64_t v279;
  char **v280;
  llvm::Value *v281;
  llvm::Value *v282;
  char *v283;
  uint64_t v284;
  unsigned __int8 *v285;
  llvm::UndefValue *v286;
  llvm::Type *v287;
  unsigned __int8 *v288;
  uint64_t v289;
  unsigned __int8 *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t ***v293;
  char v294;
  char v295;
  char *v296;
  char *v297;
  llvm::Value *v298;
  uint64_t **v299;
  _QWORD *v300;
  uint64_t **v301;
  const llvm::APInt *v302;
  llvm::ConstantInt *v303;
  unsigned int v304;
  unint64_t v305;
  llvm::ValueHandleBase *v306;
  char *v307;
  char *v308;
  unsigned __int8 **v309;
  int v310;
  unsigned __int8 *v311;
  unsigned __int8 **v312;
  unsigned __int8 *v313;
  llvm::Type *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned __int8 *v318;
  unsigned __int8 *v319;
  unsigned __int8 *v320;
  const llvm::APInt *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  llvm::ConstantInt *v325;
  unsigned int v326;
  unint64_t v327;
  llvm::ValueHandleBase *v328;
  uint64_t *v329;
  uint64_t ***v330;
  char v331;
  char v332;
  char *v333;
  char *v334;
  uint64_t ****v335;
  llvm::Value *v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t **v340;
  uint64_t *****v341;
  uint64_t **v342;
  char *v343;
  char *v344;
  unsigned __int8 **v345;
  int v346;
  unsigned __int8 *v347;
  unsigned __int8 *v348;
  uint64_t v349;
  char *v350;
  char *v351;
  unsigned __int8 **v352;
  int v353;
  unsigned __int8 *v354;
  unsigned __int8 *v355;
  unsigned __int8 *v356;
  char *v357;
  char *v358;
  unsigned __int8 **v359;
  int v360;
  unsigned __int8 *v361;
  unsigned __int8 *v362;
  unsigned __int8 *v363;
  char *v364;
  char *v365;
  unsigned __int8 **v366;
  int v367;
  unsigned __int8 *v368;
  unsigned __int8 *v369;
  unsigned __int8 *v370;
  char *v371;
  char *v372;
  unsigned __int8 **v373;
  int v374;
  unsigned __int8 *v375;
  unsigned __int8 *v376;
  unsigned __int8 *v377;
  _DWORD *v378;
  _DWORD *v379;
  int v380;
  _DWORD *v381;
  _DWORD *v382;
  int v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  const llvm::APInt *v387;
  _QWORD *j;
  _QWORD *v389;
  uint64_t v390;
  uint64_t v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  uint64_t *v397;
  uint64_t v398;
  unsigned __int8 *v399;
  uint64_t v400;
  unsigned __int8 *v401;
  uint64_t *v402;
  uint64_t v403;
  int v404;
  llvm::GetElementPtrInst *ParamElementType;
  unsigned __int8 *v406;
  uint64_t v407;
  unsigned __int8 *v408;
  llvm::Value **v409;
  llvm::UndefValue *v410;
  unint64_t v411;
  const llvm::APInt *v412;
  llvm::ConstantInt *v413;
  const llvm::APInt *v414;
  llvm::ValueHandleBase *v415;
  llvm::ConstantInt *v416;
  unsigned int v417;
  char v418;
  const llvm::APInt *v419;
  llvm::ValueHandleBase *v420;
  llvm::ConstantInt *v421;
  unsigned int v422;
  unint64_t v423;
  const llvm::APInt *v424;
  llvm::ValueHandleBase *v425;
  llvm::ConstantInt *v426;
  unsigned int v427;
  unint64_t v428;
  llvm::ValueHandleBase *v429;
  unsigned __int8 *v430;
  uint64_t v431;
  unsigned __int8 *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t **v435;
  char *v436;
  uint64_t v437;
  uint64_t *v438;
  uint64_t v439;
  llvm::Value *v440;
  uint64_t v441;
  uint64_t v442;
  llvm::ConstantInt *v443;
  unsigned int v444;
  unint64_t v445;
  llvm::ValueHandleBase *v446;
  uint64_t v447;
  unsigned __int8 *v448;
  uint64_t v449;
  uint64_t **v450;
  uint64_t v451;
  unsigned __int8 *v452;
  _QWORD *v453;
  llvm::Instruction *v454;
  llvm::Instruction *v455;
  unsigned int v456;
  llvm::Instruction *v457;
  int v459;
  unsigned int k;
  uint64_t Successor;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t **v465;
  uint64_t v466;
  uint64_t v467;
  llvm::Value *v468;
  char *v469;
  char *v470;
  uint64_t *v471;
  uint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t **v476;
  uint64_t v477;
  char *v478;
  char *v479;
  unsigned __int8 **v480;
  int v481;
  unsigned __int8 *v482;
  unsigned __int8 *v483;
  unsigned __int8 *v484;
  uint64_t v485;
  uint64_t v486;
  const llvm::APInt *v487;
  uint64_t v488;
  llvm::ConstantInt *v489;
  unsigned int v490;
  unint64_t v491;
  uint64_t *v492;
  uint64_t **v493;
  unsigned __int8 *v494;
  llvm::Type *v495;
  _QWORD *v496;
  uint64_t m;
  uint64_t v498;
  uint64_t v499;
  llvm::UndefValue *v500;
  _QWORD *v501;
  _QWORD *v502;
  _QWORD *v503;
  void **v504;
  void **v505;
  _QWORD *n;
  _QWORD *v507;
  _QWORD *v508;
  uint64_t **v509;
  uint64_t Declaration;
  uint64_t v511;
  uint64_t **v512;
  uint64_t *v513;
  uint64_t **v514;
  uint64_t v515;
  llvm::Value *v516;
  _QWORD *v517;
  _QWORD *v518;
  int v519;
  uint64_t v520;
  uint64_t **v521;
  uint64_t **v522;
  uint64_t *v523;
  BOOL v524;
  uint64_t v525;
  llvm::UndefValue **v526;
  llvm::Type *v527;
  llvm::UndefValue *v528;
  uint64_t v529;
  uint64_t v530;
  unsigned int v531;
  BOOL v532;
  BOOL v533;
  uint64_t v534;
  unsigned int v535;
  BOOL v536;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t *v541;
  unint64_t *v542;
  unsigned int v543;
  unsigned int v544;
  uint64_t v545;
  char *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  char *v550;
  unint64_t v551;
  int v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  _QWORD **v556;
  uint64_t v557;
  unint64_t *v558;
  unint64_t v559;
  uint64_t v560;
  unint64_t *v561;
  uint64_t v562;
  unint64_t *v563;
  unint64_t v564;
  uint64_t v565;
  _QWORD *v566;
  unint64_t *v567;
  unint64_t v568;
  unsigned int v569;
  uint64_t *v570;
  char *v571;
  char *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  char *v576;
  uint64_t v577;
  uint64_t v578;
  unint64_t v579;
  unint64_t v580;
  uint64_t *v581;
  llvm::BasicBlock *v582;
  uint64_t v583;
  uint64_t v584;
  unsigned int v585;
  BOOL v586;
  _QWORD *v588;
  _QWORD *v589;
  _QWORD *v590;
  _QWORD *v591;
  _QWORD *v592;
  _QWORD *v593;
  uint64_t v594;
  int v595;
  unint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unsigned int v599;
  uint64_t *v600;
  unint64_t v601;
  unsigned __int8 *v602;
  uint64_t v603;
  unsigned __int8 *v604;
  unsigned __int8 *v605;
  BOOL v606;
  int v607;
  uint64_t v608;
  uint64_t v609;
  int v610;
  uint64_t v611;
  int v612;
  uint64_t v613;
  int32x2_t v614;
  unsigned __int32 v615;
  unsigned __int32 v616;
  unsigned int v617;
  uint64_t v618;
  unsigned __int8 *v619;
  int v620;
  unsigned int v621;
  uint64_t v622;
  uint64_t SCEVIter;
  uint64_t v624;
  unsigned __int32 v625;
  unsigned int v626;
  uint64_t v627;
  uint64_t v628;
  int v629;
  unsigned int v630;
  uint64_t v631;
  uint64_t v632;
  _QWORD *v633;
  uint64_t v634;
  uint64_t v635;
  llvm::Type *v636;
  _QWORD *ii;
  _QWORD *v638;
  void **v639;
  void **v640;
  llvm::ConstantFP **v641;
  uint64_t *v642;
  llvm::Type *v643;
  llvm::APFloatBase *v644;
  uint64_t *v645;
  llvm::Value *v646;
  uint64_t v647;
  uint64_t *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t *v651;
  uint64_t v652;
  uint64_t v653;
  _QWORD *v654;
  uint64_t v655;
  uint64_t *v656;
  unsigned int v657;
  void **v658;
  uint64_t *v659;
  void **v660;
  int v661;
  BOOL v662;
  unsigned int v663;
  void **v664;
  _QWORD *v665;
  uint64_t *v666;
  uint64_t jj;
  uint64_t v668;
  unsigned int v669;
  uint64_t v670;
  uint64_t v672;
  llvm::Value *v673;
  uint64_t *v674;
  uint64_t v675;
  _QWORD *v676;
  uint64_t v677;
  _QWORD *v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  llvm::ValueSymbolTable *v682;
  uint64_t v683;
  _QWORD *v684;
  uint64_t v685;
  llvm::ValueSymbolTable *v686;
  unint64_t *v687;
  unint64_t *v688;
  unsigned int v689;
  unsigned int v690;
  uint64_t v691;
  char *v692;
  uint64_t v693;
  char *v694;
  unint64_t v695;
  int v696;
  uint64_t v697;
  unint64_t v698;
  uint64_t v699;
  _QWORD **v700;
  uint64_t v701;
  unint64_t *v702;
  unint64_t v703;
  uint64_t v704;
  unint64_t *v705;
  uint64_t v706;
  unint64_t *v707;
  unint64_t v708;
  uint64_t v709;
  _QWORD *v710;
  unint64_t *v711;
  unint64_t v712;
  int v716;
  unsigned int v717;
  char *v718;
  int v719;
  unsigned int v720;
  char *v721;
  llvm::Value **v722;
  uint64_t v723;
  unint64_t v724;
  int32x2_t *v725;
  int32x2_t *v726;
  unsigned __int8 **v727;
  char *v728;
  unsigned __int8 **v729;
  unsigned __int8 **v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  _QWORD *v734;
  _QWORD *v735;
  _QWORD *v736;
  _QWORD *v737;
  int32x2_t *v738;
  char v739;
  llvm::UndefValue *v740;
  llvm::UndefValue *v741;
  unsigned __int8 *v742;
  llvm::UndefValue *v743;
  llvm::UndefValue *v744;
  void *v745;
  _QWORD *v746;
  _QWORD *v747;
  unsigned __int8 *v748;
  unint64_t *v749;
  char *v750;
  uint64_t v751;
  int v752;
  _BYTE v753[64];
  uint64_t v754;
  int v755;
  unsigned __int8 *v756;
  uint64_t *v757;
  uint64_t v758;
  uint64_t v759;
  unsigned int v760;
  __int16 v761;
  void *v762;
  uint64_t v763;
  _QWORD *v764;
  uint64_t v765;
  uint64_t v766;
  char v767;
  uint64_t v768;
  _QWORD *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  char *v773;
  uint64_t v774;
  _BYTE v775[32];
  void **v776;
  uint64_t v777;
  uint64_t v778;
  int v779;
  char v780;
  __int16 v781;
  uint64_t v782;

  v782 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 40);
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::ScalarEvolutionWrapperPass::ID);
  v738 = *(int32x2_t **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::DominatorTreeWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v10 = **(void ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::LoopInfoWrapperPass::ID);
  v12 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::LoopInfoWrapperPass::ID);
  v13 = **(void ****)(a1 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v15 = (llvm::Instruction *)(v9 + 32);
  v16 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::FunctionGroupInfoWrapperPass::ID);
  v17 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v16 + 32) + 24))(*(_QWORD *)(v16 + 32), a2);
  v749 = (unint64_t *)v753;
  v750 = v753;
  v751 = 8;
  v752 = 0;
  v773 = v775;
  v774 = 0x400000000;
  v745 = (void *)(v4 + 272);
  v18 = sub_1C5E9F490(a2, (void **)(v4 + 272), v15);
  v19 = sub_1C5E9FF40(a2);
  v20 = sub_1C5EA0CE0(a2, v15);
  v21 = *(_QWORD *)(a1 + 56);
  if (!v21)
LABEL_1062:
    sub_1C485C2F0();
  v22 = (uint64_t *)(v12 + 32);
  v23 = v18 | v19 | v20;
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 48))(v21, a2);
  sub_1C5EA12A4(a2, 0, 1u, v24 ^ 1, 0, v22);
  v26 = v23 | v25 | sub_1C5EA2178((void ***)a2, v17, (uint64_t)v15, v22);
  v27 = *(_QWORD *)(a1 + 88);
  if (v27 && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 48))(v27, a2))
    v26 |= sub_1C5EA2BC4((uint64_t *)a2);
  v725 = (int32x2_t *)v22;
  v726 = (int32x2_t *)v15;
  v732 = a1;
  v733 = a2;
  v28 = *(_QWORD **)(a2 + 80);
  v736 = (_QWORD *)(a2 + 72);
  v739 = v26;
  if (v28 != (_QWORD *)(a2 + 72))
  {
    while (1)
    {
      v29 = v28 - 3;
      v734 = v28;
      if (!v28)
        v29 = 0;
      v30 = v29 + 5;
      v31 = (_QWORD *)v29[6];
      if (v31 != v29 + 5)
        break;
LABEL_767:
      v28 = (_QWORD *)v734[1];
      if (v28 == v736)
        goto LABEL_768;
    }
    v746 = v29 + 5;
    while (1)
    {
      v32 = (_QWORD *)v31[1];
      v33 = (llvm::ValueAsMetadata *)(v31 - 3);
      if (v31)
        v34 = (uint64_t)(v31 - 3);
      else
        v34 = 0;
      v35 = (char *)sub_1C477672C((uint64_t)&v749, v34);
      if (v750 == (char *)v749)
        v36 = (uint64_t *)((char *)&v751 + 4);
      else
        v36 = &v751;
      if (v35 != &v750[8 * *(unsigned int *)v36])
        goto LABEL_25;
      v37 = *(unsigned __int8 *)(v34 + 16);
      if (v37 == 85)
        v38 = (uint64_t **)v34;
      else
        v38 = 0;
      v747 = v32;
      if (v31 && v37 == 85)
      {
        v39 = *v38;
        if (*((unsigned __int8 *)*v38 + 8) - 7 < 0xFFFFFFFA)
          goto LABEL_82;
        v757 = 0;
        v758 = 0;
        v757 = *(v38 - 8);
        v758 = (uint64_t)*(v38 - 4);
        if ((sub_1C4771F04((uint64_t)&v757) & 1) != 0)
        {
          sub_1C4773D54((uint64_t)&v762, v34, 0, 0, 0);
          v40 = (uint64_t)*(v38 - 12);
          v781 = 257;
          Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v762, v40, v757, v758, (uint64_t)&v776, 0);
          v781 = 257;
          FCmpHelper = (llvm::Value *)sub_1C47721A0((uint64_t)&v762, Select, v39, (uint64_t)&v776);
LABEL_241:
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v34, FCmpHelper, (llvm::Value *)1);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v34);
          if (v762 != &v764)
            free(v762);
          v739 = 1;
LABEL_297:
          v30 = v746;
          goto LABEL_25;
        }
        v37 = *(unsigned __int8 *)(v34 + 16);
      }
      if (v37 == 62)
        v43 = v34;
      else
        v43 = 0;
      if (v31 && v37 == 62)
      {
        v44 = *(_DWORD *)(v43 + 20);
        v45 = v44 & 0x7FFFFFF;
        if ((v44 & 0x40000000) != 0)
          v46 = *(_QWORD *)(v43 - 8);
        else
          v46 = v43 - 32 * v45;
        v47 = *(_QWORD *)(v46 + 32 * (v45 - 1));
        v48 = *(unsigned __int8 *)(v47 + 16);
        if (v47)
          v49 = v48 >= 0x1C;
        else
          v49 = 0;
        if (!v49)
          goto LABEL_82;
        if (v48 == 67)
        {
          v50 = *(unsigned __int8 **)(v47 - 32);
          v48 = v50[16];
          if (v48 < 0x1C)
            goto LABEL_82;
          v51 = 0;
        }
        else if (v48 == 68)
        {
          v50 = *(unsigned __int8 **)(v47 - 32);
          v48 = v50[16];
          if (v48 <= 0x1B)
            goto LABEL_82;
          v51 = 1;
        }
        else
        {
          v51 = 1;
          v50 = (unsigned __int8 *)v47;
        }
        v533 = v48 > 0x35;
        v52 = (1 << v48) & 0x20220000000000;
        if (v533 || v52 == 0)
          goto LABEL_82;
        if (sub_1C5EA8010(v50, (llvm::ScalarEvolution *)v738, v51))
        {
          v54 = sub_1C5EA8790((uint64_t)v50, *(_QWORD *)v47, v51);
          v55 = (llvm::Value *)v54;
          if (v54 && v54[16] == 66)
          {
            v762 = &v764;
            v763 = 0x800000000;
            v56 = *(_QWORD *)(v47 + 8);
            if (v56)
            {
              LODWORD(v57) = 0;
              do
              {
                if (v57 >= HIDWORD(v763))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v762, (uint64_t)&v764, v57 + 1, 8);
                  LODWORD(v57) = v763;
                }
                *((_QWORD *)v762 + v57) = v56;
                v57 = (v763 + 1);
                LODWORD(v763) = v763 + 1;
                v56 = *(_QWORD *)(v56 + 8);
              }
              while (v56);
              v253 = (char *)v762;
              if ((_DWORD)v57)
              {
                v254 = 8 * v57;
                do
                {
                  v255 = *(_QWORD *)v253;
                  v256 = *(_QWORD *)(*(_QWORD *)v253 + 24);
                  v257 = *(unsigned __int8 *)(v256 + 16);
                  if (v257 == 62 || v257 == 5 && *(_WORD *)(v256 + 18) == 34)
                  {
                    v258 = *((_QWORD *)v55 - 4);
                    if (*(_QWORD *)v255)
                    {
                      **(_QWORD **)(v255 + 16) = *(_QWORD *)(v255 + 8);
                      v259 = *(_QWORD *)(v255 + 8);
                      if (v259)
                        *(_QWORD *)(v259 + 16) = *(_QWORD *)(v255 + 16);
                    }
                    *(_QWORD *)v255 = v258;
                    if (v258)
                    {
                      v262 = *(_QWORD *)(v258 + 8);
                      v260 = (_QWORD *)(v258 + 8);
                      v261 = v262;
                      *(_QWORD *)(v255 + 8) = v262;
                      if (v262)
                        *(_QWORD *)(v261 + 16) = v255 + 8;
                      *(_QWORD *)(v255 + 16) = v260;
                      *v260 = v255;
                    }
                    llvm::ScalarEvolution::forgetValue(v738, (llvm::Value *)v256);
                  }
                  v253 += 8;
                  v254 -= 8;
                }
                while (v254);
                v253 = (char *)v762;
              }
              if (v253 != (char *)&v764)
                free(v253);
            }
            v32 = v747;
          }
          v739 = 1;
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v47, v55, (llvm::Value *)1);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v47);
          goto LABEL_297;
        }
        v37 = *(unsigned __int8 *)(v34 + 16);
      }
      if (v37 == 82)
        v58 = v34;
      else
        v58 = 0;
      if (v31 && v37 == 82)
      {
        if (!*(_BYTE *)(**(_QWORD **)(v58 - 64) + 8))
          goto LABEL_82;
        v757 = 0;
        v758 = 0;
        v757 = *(uint64_t **)(v58 - 64);
        v758 = *(_QWORD *)(v58 - 32);
        if ((sub_1C4771F04((uint64_t)&v757) & 1) != 0)
        {
          sub_1C4773D54((uint64_t)&v762, v34, 0, 0, 0);
          v59 = *(_WORD *)(v58 + 18) & 0x3F;
          v781 = 257;
          FCmpHelper = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v762, v59, v757, v758, (uint64_t)&v776, 0, 0);
          goto LABEL_241;
        }
        v37 = *(unsigned __int8 *)(v34 + 16);
      }
      if (v37 == 52)
      {
        v60 = *(_DWORD *)(v34 + 20);
        if ((v60 & 0x40000000) != 0)
          v61 = *(_QWORD *)(v34 - 8);
        else
          v61 = v34 - 32 * (v60 & 0x7FFFFFF);
        v232 = *(uint64_t **)v61;
        v233 = *(_QWORD *)(v61 + 32);
        sub_1C4773D54((uint64_t)&v762, v34, 0, 0, 0);
        v781 = 257;
        v234 = (uint64_t *)sub_1C4867220((uint64_t)&v762, v232, v233, v34, (uint64_t)&v776);
        v781 = 257;
        UnaryIntrinsic = (uint64_t *)llvm::IRBuilderBase::CreateUnaryIntrinsic((uint64_t *)&v762, 296, v234, v34, (uint64_t)&v776);
        v781 = 257;
        v236 = sub_1C4867450((uint64_t)&v762, UnaryIntrinsic, v233, v34, (uint64_t)&v776);
        v781 = 257;
        FCmpHelper = (llvm::Value *)sub_1C4867680((uint64_t)&v762, v232, v236, v34, (uint64_t)&v776);
        goto LABEL_241;
      }
LABEL_82:
      v762 = 0;
      v776 = &v762;
      if (!sub_1C4E7B6EC(&v776, v34))
      {
        v30 = v746;
        goto LABEL_93;
      }
      v62 = v762;
      v30 = v746;
      if (!v762)
        goto LABEL_93;
      v63 = *((_QWORD *)v762 + 1);
      if (!v63 || *(_QWORD *)(v63 + 8))
        goto LABEL_93;
      sub_1C4773D54((uint64_t)&v762, v34, 0, 0, 0);
      v64 = *((unsigned __int8 *)v62 + 16);
      if (v64 == 5)
      {
        v251 = *((unsigned __int16 *)v62 + 9);
        if (v251 != 21)
        {
          if (v251 == 18)
          {
            v252 = (uint64_t *)&v62[-8 * (v62[5] & 0x7FFFFFF)];
            v65 = *v252;
            if (*v252)
            {
              v66 = v252[4];
              if (!v66)
              {
LABEL_276:
                v250 = 1;
                goto LABEL_277;
              }
              goto LABEL_91;
            }
          }
LABEL_301:
          v250 = 1;
          goto LABEL_312;
        }
        v264 = (uint64_t *)&v62[-8 * (v62[5] & 0x7FFFFFF)];
        v247 = *v264;
        if (*v264)
        {
          v248 = v264[4];
          if (v248)
          {
LABEL_267:
            if (*(_BYTE *)(v247 + 16) == 17)
            {
              v755 = 64;
              v754 = 0x3FF0000000000000;
              llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v757, (const llvm::APInt **)&v754);
              v777 = (uint64_t)v757;
              v778 = v758;
              v779 = v759;
              v780 = BYTE4(v759) & 0xF;
              llvm::APFloat::convert((uint64_t)&v776, *(void **)(v247 + 32), 1, &v757);
              v249 = sub_1C47ECB98(v247 + 24, (uint64_t)&v776);
              if ((_UNKNOWN *)v777 == &unk_1C866F1C0)
              {
                sub_1C4773C74(&v778);
              }
              else if ((*(_DWORD *)(v777 + 8) - 64) <= 0xFFFFFF7F && v778)
              {
                MEMORY[0x1CAA32F9C](v778, 0x1000C8000313F17);
              }
              if ((v249 & 1) != 0)
              {
                v250 = 1;
LABEL_277:
                v30 = v746;
                goto LABEL_312;
              }
            }
            v781 = 257;
            v263 = (uint64_t *)sub_1C4772890((uint64_t *)&v762, v247, (uint64_t)&v776, 0);
            v781 = 257;
            v68 = (llvm::Value *)sub_1C4867220((uint64_t)&v762, v263, v248, (uint64_t)v62, (uint64_t)&v776);
            goto LABEL_299;
          }
          goto LABEL_310;
        }
      }
      else
      {
        if (v64 != 49)
        {
          if (v64 == 46)
          {
            v65 = *((_QWORD *)v62 - 8);
            if (v65)
            {
              v66 = *((_QWORD *)v62 - 4);
              if (!v66)
                goto LABEL_276;
LABEL_91:
              v781 = 257;
              v67 = (uint64_t *)sub_1C4772890((uint64_t *)&v762, v65, (uint64_t)&v776, 0);
              v781 = 257;
              v68 = (llvm::Value *)sub_1C4867450((uint64_t)&v762, v67, v66, (uint64_t)v62, (uint64_t)&v776);
LABEL_299:
              v30 = v746;
              if (v68)
              {
                v739 = 1;
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v34, v68, (llvm::Value *)1);
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v34);
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, (uint64_t)v62);
                v250 = 0;
                goto LABEL_312;
              }
            }
          }
          goto LABEL_301;
        }
        v247 = *((_QWORD *)v62 - 8);
        if (v247)
        {
          v248 = *((_QWORD *)v62 - 4);
          if (v248)
            goto LABEL_267;
LABEL_310:
          v250 = 1;
          goto LABEL_312;
        }
      }
      v250 = 1;
LABEL_312:
      if (v762 == &v764)
      {
        if (!v250)
          goto LABEL_25;
      }
      else
      {
        free(v762);
        if (!v250)
          goto LABEL_25;
      }
LABEL_93:
      v69 = *(unsigned __int8 *)(v34 + 16);
      if (v69 == 60)
        v70 = (uint64_t *)v34;
      else
        v70 = 0;
      if (v31 && v69 == 60)
      {
        v71 = *(_QWORD *)*(v70 - 4);
        v72 = *(_DWORD *)(v71 + 8);
        v73 = v72;
        if ((v72 & 0xFE) == 0x12)
          v73 = *(_DWORD *)(**(_QWORD **)(v71 + 16) + 8);
        v74 = *v70;
        if ((v73 & 0xFFFFFF00) == 0x4000)
        {
          sub_1C4768AD0((uint64_t)v745, *v70);
          v77 = v76;
          if ((_DWORD)v75 == 1)
          if (((v77 + 7) & 0xFFFFFFFFFFFFFFF8) > 0x40)
          {
            v740 = (llvm::UndefValue *)v74;
            sub_1C4768AD0((uint64_t)v745, v74);
            v80 = v79;
            if ((_DWORD)v78 == 1)
            v81 = v80 + 7;
            v82 = (llvm::Type *)((unint64_t)(v80 + 7) >> 5);
            sub_1C4773D54((uint64_t)&v762, v34, 0, 0, 0);
            v83 = (unsigned __int8 *)*(v70 - 4);
            v84 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v770 + 1960), (llvm::Type *)0x40);
            v781 = 257;
            v85 = sub_1C4773E38((uint64_t *)&v762, 49, v83, v84, (uint64_t)&v776);
            llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v770 + 1960), v82);
            v88 = (unsigned __int8 *)llvm::UndefValue::get(v86, v87);
            if (!(_DWORD)v82)
            {
              v32 = v747;
LABEL_262:
              v781 = 257;
              v246 = sub_1C4773E38((uint64_t *)&v762, 49, v88, (uint64_t)v740, (uint64_t)&v776);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v34, (llvm::Value *)v246, (llvm::Value *)1);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v34);
              if (v762 != &v764)
                free(v762);
              v739 = 1;
              goto LABEL_297;
            }
            v89 = 0;
            v90 = (v81 >> 5);
            while (1)
            {
              v91 = (llvm::GetElementPtrInst *)(*(_QWORD *)v770 + 1960);
              v781 = 257;
              v92 = sub_1C4772C18((uint64_t *)&v762, v91, v85, v89, (uint64_t)&v776);
              v93 = *(_QWORD *)v770 + 1960;
              v761 = 257;
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v768 + 56) + 40) + 272, v93);
              v95 = v94;
              v96 = (char *)operator new(0x60uLL);
              v97 = v96;
              v98 = (llvm::Value *)(v96 + 32);
              *((_QWORD *)v96 + 2) = 0;
              *((_QWORD *)v96 + 3) = v96 + 32;
              v781 = 257;
              *((_QWORD *)v96 + 4) = v93;
              *((_QWORD *)v96 + 5) = 0;
              *((_WORD *)v96 + 24) = 60;
              *((_DWORD *)v96 + 13) = 1;
              *(_OWORD *)(v96 + 56) = 0u;
              *(_OWORD *)(v96 + 72) = 0u;
              *((_DWORD *)v96 + 22) = 0;
              *(_QWORD *)v96 = v92;
              *((_QWORD *)v96 + 1) = 0;
              if (v92)
              {
                v101 = v92[1];
                v100 = v92 + 1;
                v99 = v101;
                *((_QWORD *)v96 + 1) = v101;
                if (v101)
                  v99[2] = (uint64_t *)(v96 + 8);
                *((_QWORD *)v96 + 2) = v100;
                *v100 = v96;
              }
              *((_WORD *)v96 + 25) = 2 * (v95 & 0x3F);
              v96[92] = 1;
              llvm::Value::setName((uint64_t ***)v96 + 4, (uint64_t)&v776);
              (*(void (**)(uint64_t, llvm::Value *, uint64_t **, uint64_t, _QWORD *))(*(_QWORD *)v772 + 16))(v772, v98, &v757, v768, v769);
              if ((_DWORD)v763)
                break;
LABEL_113:
              v103 = *(llvm::ConstantInt **)(*(_QWORD *)v770 + 1960);
              v104 = *(_DWORD *)(*(_QWORD *)v770 + 1968);
              LODWORD(v777) = v104 >> 8;
              if (v104 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v776, v89, 0);
              }
              else
              {
                if (v104 <= 0xFF)
                  v105 = 0;
                else
                  v105 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v104);
                v776 = (void **)(v105 & v89);
              }
              v32 = v747;
              v106 = llvm::ConstantInt::get(v103, (llvm::LLVMContext *)&v776, v102);
              if (v777 >= 0x41 && v776)
                MEMORY[0x1CAA32F9C](v776, 0x1000C8000313F17);
              v781 = 257;
              v88 = sub_1C4773154((uint64_t *)&v762, (uint64_t)v88, (uint64_t)v98, (uint64_t)v106, (uint64_t)&v776);
              if (++v89 == v90)
                goto LABEL_262;
            }
            v107 = (char *)v762;
            v108 = (char *)v762 + 16 * v763;
            v109 = (unsigned __int8 **)(v97 + 80);
            while (1)
            {
              v110 = *(_DWORD *)v107;
              v102 = (const llvm::APInt *)*((_QWORD *)v107 + 1);
              if (v102)
              {
                if (!v110)
                {
                  v754 = *((_QWORD *)v107 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v754, (unsigned __int8 *)v102, 2);
                  v111 = *v109;
                  if (!*v109)
                  {
LABEL_133:
                    v112 = (unsigned __int8 *)v754;
                    *v109 = (unsigned __int8 *)v754;
                    if (v112)
                      llvm::MetadataTracking::retrack((uint64_t)&v754, v112, (uint64_t)(v97 + 80));
                    goto LABEL_130;
                  }
LABEL_127:
                  llvm::MetadataTracking::untrack((uint64_t)(v97 + 80), v111);
                  goto LABEL_133;
                }
              }
              else
              {
                v111 = *v109;
                if (!*v109 && (v97[55] & 0x20) == 0)
                  goto LABEL_130;
                if (!v110)
                {
                  v754 = 0;
                  if (!v111)
                    goto LABEL_133;
                  goto LABEL_127;
                }
              }
              llvm::Value::setMetadata(v98, *(_DWORD *)v107, v102);
LABEL_130:
              v107 += 16;
              if (v107 == v108)
                goto LABEL_113;
            }
          }
          v71 = *(_QWORD *)*(v70 - 4);
          v72 = *(_DWORD *)(v71 + 8);
          v30 = v746;
        }
        if ((v72 & 0xFE) == 0x12)
          v72 = *(_DWORD *)(**(_QWORD **)(v71 + 16) + 8);
        if ((v72 & 0xFFFFFF00) == 0x4000
          && (*(_DWORD *)(v74 + 8) & 0xFE) == 0x12
          && *(_DWORD *)(*(_QWORD *)(v74 + 24) + 8) == 2061
          && *(_DWORD *)(v74 + 32) == 3)
        {
          sub_1C4773D54((uint64_t)&v762, v34, 0, 0, 0);
          v113 = (llvm::PointerType *)v74;
          if ((*(_DWORD *)(v74 + 8) & 0xFE) == 0x12)
            v113 = **(llvm::PointerType ***)(v74 + 16);
          v114 = *(_QWORD *)*(v70 - 4);
          v115 = *(_DWORD *)(v114 + 8);
          if ((v115 & 0xFE) == 0x12)
            v115 = *(_DWORD *)(**(_QWORD **)(v114 + 16) + 8);
          v116 = llvm::PointerType::get(v113, (llvm::Type *)(v115 >> 8));
          v117 = (unsigned __int8 *)*(v70 - 4);
          v781 = 257;
          v118 = sub_1C4773E38((uint64_t *)&v762, 49, v117, v116, (uint64_t)&v776);
          v781 = 257;
          v119 = sub_1C4772C18((uint64_t *)&v762, v113, v118, 2u, (uint64_t)&v776);
          v761 = 257;
          v120 = (char *)operator new(0x60uLL);
          v121 = v120;
          v122 = (llvm::Value *)(v120 + 32);
          *((_QWORD *)v120 + 2) = 0;
          *((_QWORD *)v120 + 3) = v120 + 32;
          v781 = 257;
          *((_QWORD *)v120 + 4) = v113;
          *((_QWORD *)v120 + 5) = 0;
          *((_WORD *)v120 + 24) = 60;
          *((_DWORD *)v120 + 13) = 1;
          *(_OWORD *)(v120 + 56) = 0u;
          *(_OWORD *)(v120 + 72) = 0u;
          *((_DWORD *)v120 + 22) = 0;
          *(_QWORD *)v120 = v119;
          *((_QWORD *)v120 + 1) = 0;
          if (v119)
          {
            v125 = v119[1];
            v124 = v119 + 1;
            v123 = v125;
            *((_QWORD *)v120 + 1) = v125;
            if (v125)
              v123[2] = (uint64_t *)(v120 + 8);
            *((_QWORD *)v120 + 2) = v124;
            *v124 = v120;
          }
          v741 = (llvm::UndefValue *)v74;
          *((_WORD *)v120 + 25) = 0;
          v120[92] = 1;
          llvm::Value::setName((uint64_t ***)v120 + 4, (uint64_t)&v776);
          (*(void (**)(uint64_t, llvm::Value *, uint64_t **, uint64_t, _QWORD *))(*(_QWORD *)v772 + 16))(v772, v122, &v757, v768, v769);
          if (!(_DWORD)v763)
          {
LABEL_154:
            llvm::FixedVectorType::get(v113, (llvm::Type *)2);
            v127 = v126;
            v128 = *(_QWORD *)*(v70 - 4);
            v129 = *(_DWORD *)(v128 + 8);
            if ((v129 & 0xFE) == 0x12)
              v129 = *(_DWORD *)(**(_QWORD **)(v128 + 16) + 8);
            v130 = llvm::PointerType::get(v126, (llvm::Type *)(v129 >> 8));
            v131 = (unsigned __int8 *)*(v70 - 4);
            v781 = 257;
            v132 = sub_1C4773E38((uint64_t *)&v762, 49, v131, v130, (uint64_t)&v776);
            v133 = *((_WORD *)v70 + 9);
            v761 = 257;
            v134 = (char *)operator new(0x60uLL);
            v135 = v134;
            v136 = (llvm::Value *)(v134 + 32);
            *((_QWORD *)v134 + 2) = 0;
            *((_QWORD *)v134 + 3) = v134 + 32;
            v781 = 257;
            *((_QWORD *)v134 + 4) = v127;
            *((_QWORD *)v134 + 5) = 0;
            *((_WORD *)v134 + 24) = 60;
            *((_DWORD *)v134 + 13) = 1;
            *(_OWORD *)(v134 + 56) = 0u;
            *(_OWORD *)(v134 + 72) = 0u;
            *((_DWORD *)v134 + 22) = 0;
            *(_QWORD *)v134 = v132;
            *((_QWORD *)v134 + 1) = 0;
            if (v132)
            {
              v139 = *((_QWORD *)v132 + 1);
              v138 = v132 + 8;
              v137 = v139;
              *((_QWORD *)v134 + 1) = v139;
              if (v139)
                *(_QWORD *)(v137 + 16) = v134 + 8;
              *((_QWORD *)v134 + 2) = v138;
              *v138 = v134;
            }
            *((_WORD *)v134 + 25) = v133 & 0x7E;
            v134[92] = 1;
            llvm::Value::setName((uint64_t ***)v134 + 4, (uint64_t)&v776);
            (*(void (**)(uint64_t, llvm::Value *, uint64_t **, uint64_t, _QWORD *))(*(_QWORD *)v772 + 16))(v772, v136, &v757, v768, v769);
            if (!(_DWORD)v763)
            {
LABEL_161:
              v140 = (llvm::ConstantInt *)(***(_QWORD ***)v34 + 1960);
              v141 = llvm::ConstantInt::get(v140, 0, 0);
              v781 = 257;
              v142 = sub_1C4772EE0((uint64_t *)&v762, (uint64_t)v136, (uint64_t)v141, (uint64_t)&v776);
              v143 = llvm::ConstantInt::get(v140, 1, 0);
              v781 = 257;
              v144 = sub_1C4772EE0((uint64_t *)&v762, (uint64_t)v136, (uint64_t)v143, (uint64_t)&v776);
              v146 = llvm::UndefValue::get(v741, v145);
              v781 = 257;
              v147 = sub_1C4773154((uint64_t *)&v762, (uint64_t)v146, (uint64_t)v142, (uint64_t)v141, (uint64_t)&v776);
              v781 = 257;
              v148 = sub_1C4773154((uint64_t *)&v762, (uint64_t)v147, (uint64_t)v144, (uint64_t)v143, (uint64_t)&v776);
              v149 = llvm::ConstantInt::get(v140, 2, 0);
              v781 = 257;
              v150 = sub_1C4773154((uint64_t *)&v762, (uint64_t)v148, (uint64_t)v122, (uint64_t)v149, (uint64_t)&v776);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v34, (llvm::Value *)v150, (llvm::Value *)1);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v34);
              if (v762 != &v764)
                free(v762);
              v739 = 1;
LABEL_220:
              v30 = v746;
              v32 = v747;
              goto LABEL_25;
            }
            v357 = (char *)v762;
            v358 = (char *)v762 + 16 * v763;
            v359 = (unsigned __int8 **)(v135 + 80);
            while (2)
            {
              v360 = *(_DWORD *)v357;
              v361 = (unsigned __int8 *)*((_QWORD *)v357 + 1);
              if (v361)
              {
                if (v360)
                  goto LABEL_462;
                v754 = *((_QWORD *)v357 + 1);
                llvm::MetadataTracking::track((uint64_t)&v754, v361, 2);
                v362 = *v359;
LABEL_466:
                if (v362)
                  llvm::MetadataTracking::untrack((uint64_t)(v135 + 80), v362);
                v363 = (unsigned __int8 *)v754;
                *v359 = (unsigned __int8 *)v754;
                if (v363)
                  llvm::MetadataTracking::retrack((uint64_t)&v754, v363, (uint64_t)(v135 + 80));
              }
              else
              {
                v362 = *v359;
                if (*v359 || (v135[55] & 0x20) != 0)
                {
                  if (!v360)
                  {
                    v754 = 0;
                    goto LABEL_466;
                  }
LABEL_462:
                  llvm::Value::setMetadata(v136, *(_DWORD *)v357, (llvm::MDNode *)v361);
                }
              }
              v357 += 16;
              if (v357 == v358)
                goto LABEL_161;
              continue;
            }
          }
          v350 = (char *)v762;
          v351 = (char *)v762 + 16 * v763;
          v352 = (unsigned __int8 **)(v121 + 80);
          while (2)
          {
            v353 = *(_DWORD *)v350;
            v354 = (unsigned __int8 *)*((_QWORD *)v350 + 1);
            if (v354)
            {
              if (v353)
                goto LABEL_447;
              v754 = *((_QWORD *)v350 + 1);
              llvm::MetadataTracking::track((uint64_t)&v754, v354, 2);
              v355 = *v352;
LABEL_451:
              if (v355)
                llvm::MetadataTracking::untrack((uint64_t)(v121 + 80), v355);
              v356 = (unsigned __int8 *)v754;
              *v352 = (unsigned __int8 *)v754;
              if (v356)
                llvm::MetadataTracking::retrack((uint64_t)&v754, v356, (uint64_t)(v121 + 80));
            }
            else
            {
              v355 = *v352;
              if (*v352 || (v121[55] & 0x20) != 0)
              {
                if (!v353)
                {
                  v754 = 0;
                  goto LABEL_451;
                }
LABEL_447:
                llvm::Value::setMetadata(v122, *(_DWORD *)v350, (llvm::MDNode *)v354);
              }
            }
            v350 += 16;
            if (v350 == v351)
              goto LABEL_154;
            continue;
          }
        }
        if (*(_BYTE *)(*v70 + 8) == 13)
        {
          sub_1C4768AD0((uint64_t)v745, *v70);
          v153 = v152;
          if ((_DWORD)v151 == 1)
          if (v153 >= 0x41)
          {
            sub_1C4773D54((uint64_t)&v762, v34, 0, 0, 0);
            v154 = *(_DWORD *)(*v70 + 8) >> 8;
            LODWORD(v155) = 8 * (1 << ((unint64_t)*((unsigned __int16 *)v70 + 9) >> 1));
            if (v155 >= 0x40)
              v155 = 64;
            else
              v155 = v155;
            v156 = 1 << ~__clz(v155);
            if (!(_DWORD)v155)
              LODWORD(v156) = 0;
            do
            {
              v157 = v156;
              v158 = (llvm::Type *)(v154 / v156);
              v159 = v154 % v156;
              if (v156 < 9)
                break;
              LODWORD(v156) = v156 >> 1;
            }
            while (v159);
            if (v159)
              goto LABEL_358;
            v160 = *(_QWORD *)*(v70 - 4);
            v161 = *(_DWORD *)(v160 + 8);
            if ((v161 & 0xFE) == 0x12)
              v161 = *(_DWORD *)(**(_QWORD **)(v160 + 16) + 8);
            v162 = *(_QWORD **)*v70;
            LODWORD(v776) = v157;
            if (v157 <= 63)
            {
              if (v157 > 31)
              {
                if (v157 == 32)
                {
                  v163 = (llvm::PointerType *)(*v162 + 1960);
                  goto LABEL_356;
                }
                goto LABEL_511;
              }
              switch(v157)
              {
                case 16:
                  v163 = (llvm::PointerType *)(*v162 + 1936);
                  break;
                case 8:
                  v163 = (llvm::PointerType *)(*v162 + 1912);
                  break;
                case 1:
                  v163 = (llvm::PointerType *)(*v162 + 1888);
                  break;
                default:
                  goto LABEL_511;
              }
            }
            else
            {
              if (v157 == 64)
              {
                v163 = (llvm::PointerType *)(*v162 + 1984);
                goto LABEL_356;
              }
              if (v157 == 128)
              {
                v163 = (llvm::PointerType *)(*v162 + 2008);
                goto LABEL_356;
              }
LABEL_511:
              v378 = sub_1C5270984(*v162 + 2168, &v776);
              v163 = (llvm::PointerType *)*((_QWORD *)v378 + 1);
              if (!v163)
              {
                v379 = v378;
                v163 = (llvm::PointerType *)sub_1C484358C(*v162 + 2040, 24, 3);
                v380 = (int)v776;
                *(_QWORD *)v163 = v162;
                *((_QWORD *)v163 + 2) = 0;
                *((_QWORD *)v163 + 1) = (v380 << 8) | 0xDu;
                *((_QWORD *)v379 + 1) = v163;
              }
            }
LABEL_356:
            v284 = llvm::PointerType::get(v163, (llvm::Type *)(v161 >> 8));
            v285 = (unsigned __int8 *)*(v70 - 4);
            v781 = 257;
            v742 = sub_1C4773E38((uint64_t *)&v762, 49, v285, v284, (uint64_t)&v776);
            llvm::FixedVectorType::get(v163, v158);
            v288 = (unsigned __int8 *)llvm::UndefValue::get(v286, v287);
            if (v157 > v154)
            {
LABEL_357:
              v289 = *v70;
              v781 = 257;
              v290 = sub_1C4773E38((uint64_t *)&v762, 49, v288, v289, (uint64_t)&v776);
              v739 = 1;
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v34, (llvm::Value *)v290, (llvm::Value *)1);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v34);
              v30 = v746;
LABEL_358:
              if (v762 != &v764)
                free(v762);
LABEL_360:
              v32 = v747;
              goto LABEL_25;
            }
            v291 = 0;
            if (v158 <= 1)
              v292 = 1;
            else
              v292 = v158;
            while (1)
            {
              v781 = 257;
              v293 = sub_1C48678B0((uint64_t *)&v762, v163, v742, v291, (uint64_t)&v776);
              v761 = 257;
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v768 + 56) + 40) + 272, (uint64_t)v163);
              v295 = v294;
              v296 = (char *)operator new(0x60uLL);
              v297 = v296;
              v298 = (llvm::Value *)(v296 + 32);
              *((_QWORD *)v296 + 2) = 0;
              *((_QWORD *)v296 + 3) = v296 + 32;
              v781 = 257;
              *((_QWORD *)v296 + 4) = v163;
              *((_QWORD *)v296 + 5) = 0;
              *((_WORD *)v296 + 24) = 60;
              *((_DWORD *)v296 + 13) = 1;
              *(_OWORD *)(v296 + 56) = 0u;
              *(_OWORD *)(v296 + 72) = 0u;
              *((_DWORD *)v296 + 22) = 0;
              *(_QWORD *)v296 = v293;
              *((_QWORD *)v296 + 1) = 0;
              if (v293)
              {
                v301 = v293[1];
                v300 = v293 + 1;
                v299 = v301;
                *((_QWORD *)v296 + 1) = v301;
                if (v301)
                  v299[2] = (uint64_t *)(v296 + 8);
                *((_QWORD *)v296 + 2) = v300;
                *v300 = v296;
              }
              *((_WORD *)v296 + 25) = 2 * (v295 & 0x3F);
              v296[92] = 1;
              llvm::Value::setName((uint64_t ***)v296 + 4, (uint64_t)&v776);
              (*(void (**)(uint64_t, llvm::Value *, uint64_t **, uint64_t, _QWORD *))(*(_QWORD *)v772 + 16))(v772, v298, &v757, v768, v769);
              if ((_DWORD)v763)
                break;
LABEL_369:
              v781 = 257;
              v303 = *(llvm::ConstantInt **)(*(_QWORD *)v770 + 1984);
              v304 = *(_DWORD *)(*(_QWORD *)v770 + 1992);
              LODWORD(v758) = v304 >> 8;
              if (v304 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v757, v291, 0);
              }
              else
              {
                if (v304 <= 0xFF)
                  v305 = 0;
                else
                  v305 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v304);
                v757 = (uint64_t *)(v305 & v291);
              }
              v306 = llvm::ConstantInt::get(v303, (llvm::LLVMContext *)&v757, v302);
              if (v758 >= 0x41 && v757)
                MEMORY[0x1CAA32F9C](v757, 0x1000C8000313F17);
              v288 = sub_1C4773154((uint64_t *)&v762, (uint64_t)v288, (uint64_t)v298, (uint64_t)v306, (uint64_t)&v776);
              if (++v291 == v292)
                goto LABEL_357;
            }
            v307 = (char *)v762;
            v308 = (char *)v762 + 16 * v763;
            v309 = (unsigned __int8 **)(v297 + 80);
            while (2)
            {
              v310 = *(_DWORD *)v307;
              v302 = (const llvm::APInt *)*((_QWORD *)v307 + 1);
              if (v302)
              {
                if (v310)
                  goto LABEL_385;
                v754 = *((_QWORD *)v307 + 1);
                v729 = v309;
                llvm::MetadataTracking::track((uint64_t)&v754, (unsigned __int8 *)v302, 2);
                v309 = v729;
                v311 = *v729;
                if (*v729)
                {
LABEL_383:
                  v727 = v309;
                  llvm::MetadataTracking::untrack((uint64_t)v309, v311);
                  v309 = v727;
                }
LABEL_389:
                v313 = (unsigned __int8 *)v754;
                *v309 = (unsigned __int8 *)v754;
                if (v313)
                {
                  v730 = v309;
                  llvm::MetadataTracking::retrack((uint64_t)&v754, v313, (uint64_t)v309);
                  v309 = v730;
                }
              }
              else
              {
                v311 = *v309;
                if (*v309 || (v297[55] & 0x20) != 0)
                {
                  if (!v310)
                  {
                    v754 = 0;
                    if (v311)
                      goto LABEL_383;
                    goto LABEL_389;
                  }
LABEL_385:
                  v728 = v308;
                  v312 = v309;
                  llvm::Value::setMetadata(v298, *(_DWORD *)v307, v302);
                  v309 = v312;
                  v308 = v728;
                }
              }
              v307 += 16;
              if (v307 == v308)
                goto LABEL_369;
              continue;
            }
          }
        }
      }
      v164 = *(unsigned __int8 *)(v34 + 16);
      if (v164 == 61)
        v165 = v34;
      else
        v165 = 0;
      if (v31)
      {
        v32 = v747;
        if (v164 == 61)
        {
          v166 = **(_QWORD **)(v165 - 32);
          v167 = *(_DWORD *)(v166 + 8);
          if ((v167 & 0xFE) == 0x12)
            v167 = *(_DWORD *)(**(_QWORD **)(v166 + 16) + 8);
          v168 = *(uint64_t **)(v165 - 64);
          v169 = *v168;
          v170 = (v167 & 0xFFFFFF00) == 0x4000 && (*(_DWORD *)(*v168 + 8) & 0xFE) == 18;
          if (v170 && *(_DWORD *)(*(_QWORD *)(v169 + 24) + 8) == 2061 && *(_DWORD *)(v169 + 32) == 3)
          {
            sub_1C4773D54((uint64_t)&v762, v34, 0, 0, 0);
            if ((*(_DWORD *)(v169 + 8) & 0xFE) == 0x12)
              v169 = **(_QWORD **)(v169 + 16);
            v171 = **(_QWORD **)(v165 - 32);
            v172 = *(_DWORD *)(v171 + 8);
            if ((v172 & 0xFE) == 0x12)
              v172 = *(_DWORD *)(**(_QWORD **)(v171 + 16) + 8);
            v173 = llvm::PointerType::get((llvm::PointerType *)v169, (llvm::Type *)(v172 >> 8));
            v174 = *(unsigned __int8 **)(v165 - 32);
            v781 = 257;
            v175 = sub_1C4773E38((uint64_t *)&v762, 49, v174, v173, (uint64_t)&v776);
            v781 = 257;
            v176 = sub_1C4772C18((uint64_t *)&v762, (llvm::GetElementPtrInst *)v169, v175, 2u, (uint64_t)&v776);
            v177 = (llvm::ConstantInt *)(***(_QWORD ***)v34 + 1960);
            v178 = llvm::ConstantInt::get(v177, 2, 0);
            v179 = *(_QWORD *)(v165 - 64);
            v781 = 257;
            v180 = sub_1C4772EE0((uint64_t *)&v762, v179, (uint64_t)v178, (uint64_t)&v776);
            v181 = (char *)operator new(0x80uLL);
            v182 = v181;
            *((_DWORD *)v181 + 21) = *((_DWORD *)v181 + 21) & 0x38000000 | 2;
            *(_QWORD *)v181 = 0;
            *((_QWORD *)v181 + 2) = 0;
            *((_QWORD *)v181 + 1) = 0;
            *((_QWORD *)v181 + 5) = 0;
            *((_QWORD *)v181 + 6) = 0;
            *((_QWORD *)v181 + 4) = 0;
            v183 = (uint64_t ****)(v181 + 32);
            *((_QWORD *)v181 + 8) = ***(_QWORD ***)v180 + 1576;
            v184 = (llvm::Value *)(v181 + 64);
            *((_QWORD *)v181 + 3) = v181 + 64;
            *((_QWORD *)v181 + 7) = v181 + 64;
            *((_QWORD *)v181 + 9) = 0;
            v181[80] = 61;
            v181[81] = 0;
            *((_WORD *)v181 + 41) = 0;
            *((_DWORD *)v181 + 21) = 2;
            *(_OWORD *)(v181 + 88) = 0u;
            *(_OWORD *)(v181 + 104) = 0u;
            *((_DWORD *)v181 + 30) = 0;
            *(_QWORD *)v181 = v180;
            v187 = *((_QWORD *)v180 + 1);
            v186 = v180 + 8;
            v185 = v187;
            *((_QWORD *)v181 + 1) = v187;
            if (v187)
              *(_QWORD *)(v185 + 16) = v181 + 8;
            *((_QWORD *)v181 + 2) = v186;
            *v186 = v181;
            if (*((_QWORD *)v181 + 4))
            {
              **((_QWORD **)v181 + 6) = *((_QWORD *)v181 + 5);
              v538 = *((_QWORD *)v181 + 5);
              if (v538)
                *(_QWORD *)(v538 + 16) = *((_QWORD *)v181 + 6);
            }
            *v183 = v176;
            if (v176)
            {
              v190 = v176[1];
              v189 = (uint64_t *****)(v176 + 1);
              v188 = v190;
              *((_QWORD *)v181 + 5) = v190;
              if (v190)
                v188[2] = (uint64_t *)(v181 + 40);
              *((_QWORD *)v181 + 6) = v189;
              *v189 = v183;
            }
            *((_WORD *)v181 + 41) = 0;
            v181[124] = 1;
            v781 = 257;
            (*(void (**)(uint64_t, llvm::Value *, void ***, uint64_t, _QWORD *))(*(_QWORD *)v772 + 16))(v772, v184, &v776, v768, v769);
            if (!(_DWORD)v763)
            {
LABEL_207:
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v169, (llvm::Type *)2);
              v192 = v191;
              v193 = **(_QWORD **)(v165 - 32);
              v194 = *(_DWORD *)(v193 + 8);
              if ((v194 & 0xFE) == 0x12)
                v194 = *(_DWORD *)(**(_QWORD **)(v193 + 16) + 8);
              v195 = llvm::PointerType::get(v191, (llvm::Type *)(v194 >> 8));
              v196 = *(unsigned __int8 **)(v165 - 32);
              v781 = 257;
              v197 = sub_1C4773E38((uint64_t *)&v762, 49, v196, v195, (uint64_t)&v776);
              v198 = llvm::ConstantInt::get(v177, 0, 0);
              v199 = *(_QWORD *)(v165 - 64);
              v781 = 257;
              v200 = sub_1C4772EE0((uint64_t *)&v762, v199, (uint64_t)v198, (uint64_t)&v776);
              v201 = llvm::ConstantInt::get(v177, 1, 0);
              v202 = *(_QWORD *)(v165 - 64);
              v781 = 257;
              v203 = sub_1C4772EE0((uint64_t *)&v762, v202, (uint64_t)v201, (uint64_t)&v776);
              v205 = llvm::UndefValue::get(v192, v204);
              v781 = 257;
              v206 = sub_1C4773154((uint64_t *)&v762, (uint64_t)v205, (uint64_t)v200, (uint64_t)v198, (uint64_t)&v776);
              v781 = 257;
              v207 = sub_1C4773154((uint64_t *)&v762, (uint64_t)v206, (uint64_t)v203, (uint64_t)v201, (uint64_t)&v776);
              v208 = *(_WORD *)(v165 + 18);
              v209 = (char *)operator new(0x80uLL);
              v210 = v209;
              *((_DWORD *)v209 + 21) = *((_DWORD *)v209 + 21) & 0x38000000 | 2;
              *(_QWORD *)v209 = 0;
              *((_QWORD *)v209 + 2) = 0;
              *((_QWORD *)v209 + 1) = 0;
              *((_QWORD *)v209 + 5) = 0;
              *((_QWORD *)v209 + 6) = 0;
              *((_QWORD *)v209 + 4) = 0;
              v211 = (unsigned __int8 **)(v209 + 32);
              *((_QWORD *)v209 + 8) = ***(_QWORD ***)v207 + 1576;
              v212 = (llvm::Value *)(v209 + 64);
              *((_QWORD *)v209 + 3) = v209 + 64;
              *((_QWORD *)v209 + 7) = v209 + 64;
              *((_QWORD *)v209 + 9) = 0;
              v209[80] = 61;
              v209[81] = 0;
              *((_WORD *)v209 + 41) = 0;
              *((_DWORD *)v209 + 21) = 2;
              *(_OWORD *)(v209 + 88) = 0u;
              *(_OWORD *)(v209 + 104) = 0u;
              *((_DWORD *)v209 + 30) = 0;
              *(_QWORD *)v209 = v207;
              v215 = *((_QWORD *)v207 + 1);
              v214 = v207 + 8;
              v213 = v215;
              *((_QWORD *)v209 + 1) = v215;
              if (v215)
                *(_QWORD *)(v213 + 16) = v209 + 8;
              *((_QWORD *)v209 + 2) = v214;
              *v214 = v209;
              if (*((_QWORD *)v209 + 4))
              {
                **((_QWORD **)v209 + 6) = *((_QWORD *)v209 + 5);
                v539 = *((_QWORD *)v209 + 5);
                if (v539)
                  *(_QWORD *)(v539 + 16) = *((_QWORD *)v209 + 6);
              }
              *v211 = v197;
              if (v197)
              {
                v218 = *((_QWORD *)v197 + 1);
                v217 = (unsigned __int8 ***)(v197 + 8);
                v216 = v218;
                *((_QWORD *)v209 + 5) = v218;
                if (v218)
                  *(_QWORD *)(v216 + 16) = v209 + 40;
                *((_QWORD *)v209 + 6) = v217;
                *v217 = v211;
              }
              *((_WORD *)v209 + 41) = v208 & 0x7E;
              v209[124] = 1;
              v781 = 257;
              (*(void (**)(uint64_t, llvm::Value *, void ***, uint64_t, _QWORD *))(*(_QWORD *)v772 + 16))(v772, v212, &v776, v768, v769);
              if (!(_DWORD)v763)
              {
LABEL_217:
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v34);
                if (v762 != &v764)
                  free(v762);
                v739 = 1;
                goto LABEL_220;
              }
              v371 = (char *)v762;
              v372 = (char *)v762 + 16 * v763;
              v373 = (unsigned __int8 **)(v210 + 112);
              while (1)
              {
                v374 = *(_DWORD *)v371;
                v375 = (unsigned __int8 *)*((_QWORD *)v371 + 1);
                if (v375)
                {
                  if (!v374)
                  {
                    v757 = (uint64_t *)*((_QWORD *)v371 + 1);
                    llvm::MetadataTracking::track((uint64_t)&v757, v375, 2);
                    v376 = *v373;
                    goto LABEL_497;
                  }
                }
                else
                {
                  v376 = *v373;
                  if (!*v373 && (v210[87] & 0x20) == 0)
                    goto LABEL_494;
                  if (!v374)
                  {
                    v757 = 0;
LABEL_497:
                    if (v376)
                      llvm::MetadataTracking::untrack((uint64_t)(v210 + 112), v376);
                    v377 = (unsigned __int8 *)v757;
                    *v373 = (unsigned __int8 *)v757;
                    if (v377)
                      llvm::MetadataTracking::retrack((uint64_t)&v757, v377, (uint64_t)(v210 + 112));
                    goto LABEL_494;
                  }
                }
                llvm::Value::setMetadata(v212, *(_DWORD *)v371, (llvm::MDNode *)v375);
LABEL_494:
                v371 += 16;
                if (v371 == v372)
                  goto LABEL_217;
              }
            }
            v364 = (char *)v762;
            v365 = (char *)v762 + 16 * v763;
            v366 = (unsigned __int8 **)(v182 + 112);
            while (1)
            {
              v367 = *(_DWORD *)v364;
              v368 = (unsigned __int8 *)*((_QWORD *)v364 + 1);
              if (v368)
              {
                if (!v367)
                {
                  v757 = (uint64_t *)*((_QWORD *)v364 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v757, v368, 2);
                  v369 = *v366;
                  goto LABEL_482;
                }
              }
              else
              {
                v369 = *v366;
                if (!*v366 && (v182[87] & 0x20) == 0)
                  goto LABEL_479;
                if (!v367)
                {
                  v757 = 0;
LABEL_482:
                  if (v369)
                    llvm::MetadataTracking::untrack((uint64_t)(v182 + 112), v369);
                  v370 = (unsigned __int8 *)v757;
                  *v366 = (unsigned __int8 *)v757;
                  if (v370)
                    llvm::MetadataTracking::retrack((uint64_t)&v757, v370, (uint64_t)(v182 + 112));
                  goto LABEL_479;
                }
              }
              llvm::Value::setMetadata(v184, *(_DWORD *)v364, (llvm::MDNode *)v368);
LABEL_479:
              v364 += 16;
              if (v364 == v365)
                goto LABEL_207;
            }
          }
          if (*(_DWORD *)(*v168 + 8) != 13)
            goto LABEL_25;
          sub_1C4768AD0((uint64_t)v745, *v168);
          v221 = v220;
          if ((_DWORD)v219 == 1)
          if (v221 > 0x40)
          {
            sub_1C4773D54((uint64_t)&v762, v34, 0, 0, 0);
            v222 = *(_DWORD *)(*v168 + 8) >> 8;
            LODWORD(v223) = 8 * (1 << ((unint64_t)*(unsigned __int16 *)(v165 + 18) >> 1));
            if (v223 >= 0x40)
              v223 = 64;
            else
              v223 = v223;
            v224 = 1 << ~__clz(v223);
            if (!(_DWORD)v223)
              LODWORD(v224) = 0;
            do
            {
              v225 = v224;
              v226 = (llvm::Type *)(v222 / v224);
              v227 = v222 % v224;
              if (v224 < 9)
                break;
              LODWORD(v224) = v224 >> 1;
            }
            while (v227);
            if (v227)
              goto LABEL_398;
            v228 = **(_QWORD **)(v165 - 32);
            v229 = *(_DWORD *)(v228 + 8);
            if ((v229 & 0xFE) == 0x12)
              v229 = *(_DWORD *)(**(_QWORD **)(v228 + 16) + 8);
            v230 = **(_QWORD ***)v165;
            LODWORD(v776) = v225;
            if (v225 <= 63)
            {
              if (v225 > 31)
              {
                if (v225 == 32)
                {
                  v231 = (llvm::FixedVectorType *)(*v230 + 1960);
                  goto LABEL_396;
                }
                goto LABEL_515;
              }
              switch(v225)
              {
                case 16:
                  v231 = (llvm::FixedVectorType *)(*v230 + 1936);
                  break;
                case 8:
                  v231 = (llvm::FixedVectorType *)(*v230 + 1912);
                  break;
                case 1:
                  v231 = (llvm::FixedVectorType *)(*v230 + 1888);
                  break;
                default:
                  goto LABEL_515;
              }
            }
            else
            {
              if (v225 == 64)
              {
                v231 = (llvm::FixedVectorType *)(*v230 + 1984);
                goto LABEL_396;
              }
              if (v225 == 128)
              {
                v231 = (llvm::FixedVectorType *)(*v230 + 2008);
                goto LABEL_396;
              }
LABEL_515:
              v381 = sub_1C5270984(*v230 + 2168, &v776);
              v231 = (llvm::FixedVectorType *)*((_QWORD *)v381 + 1);
              if (!v231)
              {
                v382 = v381;
                v231 = (llvm::FixedVectorType *)sub_1C484358C(*v230 + 2040, 24, 3);
                v383 = (int)v776;
                *(_QWORD *)v231 = v230;
                *((_QWORD *)v231 + 2) = 0;
                *((_QWORD *)v231 + 1) = (v383 << 8) | 0xDu;
                *((_QWORD *)v382 + 1) = v231;
              }
            }
LABEL_396:
            v314 = (llvm::Type *)(v229 >> 8);
            llvm::FixedVectorType::get(v231, v226);
            v316 = v315;
            v743 = v231;
            v317 = llvm::PointerType::get(v231, v314);
            v318 = *(unsigned __int8 **)(v165 - 32);
            v781 = 257;
            v319 = sub_1C4773E38((uint64_t *)&v762, 49, v318, v317, (uint64_t)&v776);
            v781 = 257;
            v320 = sub_1C4773E38((uint64_t *)&v762, 49, (unsigned __int8 *)v168, v316, (uint64_t)&v776);
            if (v225 > v222)
            {
LABEL_397:
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v34);
              v739 = 1;
              v30 = v746;
              v32 = v747;
LABEL_398:
              if (v762 != &v764)
                free(v762);
              goto LABEL_25;
            }
            v322 = (uint64_t)v320;
            v323 = 0;
            if (v226 <= 1)
              v324 = 1;
            else
              v324 = v226;
            while (1)
            {
              v781 = 257;
              v325 = *(llvm::ConstantInt **)(*(_QWORD *)v770 + 1984);
              v326 = *(_DWORD *)(*(_QWORD *)v770 + 1992);
              LODWORD(v758) = v326 >> 8;
              if (v326 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v757, v323, 0);
              }
              else
              {
                if (v326 <= 0xFF)
                  v327 = 0;
                else
                  v327 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v326);
                v757 = (uint64_t *)(v327 & v323);
              }
              v328 = llvm::ConstantInt::get(v325, (llvm::LLVMContext *)&v757, v321);
              if (v758 >= 0x41 && v757)
                MEMORY[0x1CAA32F9C](v757, 0x1000C8000313F17);
              v329 = (uint64_t *)sub_1C4772EE0((uint64_t *)&v762, v322, (uint64_t)v328, (uint64_t)&v776);
              v781 = 257;
              v330 = sub_1C48678B0((uint64_t *)&v762, v743, v319, v323, (uint64_t)&v776);
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v768 + 56) + 40) + 272, *v329);
              v332 = v331;
              v333 = (char *)operator new(0x80uLL);
              v334 = v333;
              *((_DWORD *)v333 + 21) = *((_DWORD *)v333 + 21) & 0x38000000 | 2;
              *(_QWORD *)v333 = 0;
              *((_QWORD *)v333 + 2) = 0;
              *((_QWORD *)v333 + 1) = 0;
              *((_QWORD *)v333 + 5) = 0;
              *((_QWORD *)v333 + 6) = 0;
              *((_QWORD *)v333 + 4) = 0;
              v335 = (uint64_t ****)(v333 + 32);
              *((_QWORD *)v333 + 8) = **(_QWORD **)*v329 + 1576;
              v336 = (llvm::Value *)(v333 + 64);
              *((_QWORD *)v333 + 3) = v333 + 64;
              *((_QWORD *)v333 + 7) = v333 + 64;
              *((_QWORD *)v333 + 9) = 0;
              v333[80] = 61;
              v333[81] = 0;
              *((_WORD *)v333 + 41) = 0;
              *((_DWORD *)v333 + 21) = 2;
              *(_OWORD *)(v333 + 88) = 0u;
              *(_OWORD *)(v333 + 104) = 0u;
              *((_DWORD *)v333 + 30) = 0;
              *(_QWORD *)v333 = v329;
              v339 = v329[1];
              v338 = v329 + 1;
              v337 = v339;
              *((_QWORD *)v333 + 1) = v339;
              if (v339)
                *(_QWORD *)(v337 + 16) = v333 + 8;
              *((_QWORD *)v333 + 2) = v338;
              *v338 = v333;
              if (*((_QWORD *)v333 + 4))
              {
                **((_QWORD **)v333 + 6) = *((_QWORD *)v333 + 5);
                v349 = *((_QWORD *)v333 + 5);
                if (v349)
                  *(_QWORD *)(v349 + 16) = *((_QWORD *)v333 + 6);
              }
              *v335 = v330;
              if (v330)
              {
                v342 = v330[1];
                v341 = (uint64_t *****)(v330 + 1);
                v340 = v342;
                *((_QWORD *)v333 + 5) = v342;
                if (v342)
                  v340[2] = (uint64_t *)(v333 + 40);
                *((_QWORD *)v333 + 6) = v341;
                *v341 = v335;
              }
              *((_WORD *)v333 + 41) = 2 * (v332 & 0x3F);
              v333[124] = 1;
              v781 = 257;
              (*(void (**)(uint64_t, llvm::Value *, void ***, uint64_t, _QWORD *))(*(_QWORD *)v772 + 16))(v772, v336, &v776, v768, v769);
              if ((_DWORD)v763)
                break;
LABEL_418:
              if (++v323 == v324)
                goto LABEL_397;
            }
            v343 = (char *)v762;
            v344 = (char *)v762 + 16 * v763;
            v345 = (unsigned __int8 **)(v334 + 112);
            while (2)
            {
              v346 = *(_DWORD *)v343;
              v321 = (const llvm::APInt *)*((_QWORD *)v343 + 1);
              if (v321)
              {
                if (v346)
                  goto LABEL_427;
                v757 = (uint64_t *)*((_QWORD *)v343 + 1);
                llvm::MetadataTracking::track((uint64_t)&v757, (unsigned __int8 *)v321, 2);
                v347 = *v345;
LABEL_431:
                if (v347)
                  llvm::MetadataTracking::untrack((uint64_t)(v334 + 112), v347);
                v348 = (unsigned __int8 *)v757;
                *v345 = (unsigned __int8 *)v757;
                if (v348)
                  llvm::MetadataTracking::retrack((uint64_t)&v757, v348, (uint64_t)(v334 + 112));
              }
              else
              {
                v347 = *v345;
                if (*v345 || (v334[87] & 0x20) != 0)
                {
                  if (!v346)
                  {
                    v757 = 0;
                    goto LABEL_431;
                  }
LABEL_427:
                  llvm::Value::setMetadata(v336, *(_DWORD *)v343, v321);
                }
              }
              v343 += 16;
              if (v343 == v344)
                goto LABEL_418;
              continue;
            }
          }
          v164 = *(unsigned __int8 *)(v34 + 16);
        }
      }
      else
      {
        v32 = v747;
      }
      if (v164 != 84)
        goto LABEL_25;
      v237 = *(_QWORD *)(v34 - 32);
      if (!v237
        || *(_BYTE *)(v237 + 16)
        || *(_QWORD *)(v237 + 24) != *(_QWORD *)(v34 + 72)
        || (*(_BYTE *)(v237 + 33) & 0x20) == 0)
      {
        goto LABEL_25;
      }
      v238 = *(_DWORD *)(*(v31 - 7) + 36);
      if ((v238 - 1282) < 0x190)
      {
        if (*(v31 - 2))
        {
          v239 = 1;
          llvm::SampleInfo::SampleInfo((uint64_t)&v762, v238, 1);
          v776 = (void **)&v778;
          v777 = 0x400000000;
          v241 = *(v31 - 2);
          if (v241)
          {
            v242 = 0;
            do
            {
              v243 = *(unsigned __int8 **)(v241 + 24);
              v244 = v243[16];
              if (v242 >= HIDWORD(v777))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v776, (uint64_t)&v778, v242 + 1, 8);
                v242 = v777;
              }
              if (v244 <= 0x1B)
                v245 = 0;
              else
                v245 = v243;
              v776[v242] = v245;
              v242 = v777 + 1;
              LODWORD(v777) = v777 + 1;
              v241 = *(_QWORD *)(v241 + 8);
            }
            while (v241);
            if (v242)
            {
              while (1)
              {
                v265 = v776[--v242];
                LODWORD(v777) = v242;
                v30 = v746;
                if (!v265)
                {
LABEL_470:
                  v239 = 0;
                  goto LABEL_336;
                }
                v239 = 0;
                v266 = *((unsigned __int8 *)v265 + 16);
                if (v266 <= 0x5B)
                  break;
                if (v266 != 92)
                {
                  if (v266 != 95)
                    goto LABEL_336;
LABEL_323:
                  for (i = v265[1]; i; i = *(_QWORD *)(i + 8))
                  {
                    v268 = *(unsigned __int8 **)(i + 24);
                    v269 = v268[16];
                    if (v242 >= HIDWORD(v777))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v776, (uint64_t)&v778, v242 + 1, 8);
                      v242 = v777;
                    }
                    if (v269 <= 0x1B)
                      v270 = 0;
                    else
                      v270 = v268;
                    v776[v242] = v270;
                    v242 = v777 + 1;
                    LODWORD(v777) = v777 + 1;
                  }
                  goto LABEL_333;
                }
                if (*((_DWORD *)v265 + 18) > 1u)
                  goto LABEL_470;
                if (*(_DWORD *)v265[8])
                {
                  v239 = 0;
                  goto LABEL_335;
                }
LABEL_333:
                if (!v242)
                  goto LABEL_334;
              }
              if (v266 != 83 && v266 != 85)
                goto LABEL_336;
              goto LABEL_323;
            }
LABEL_334:
            v239 = 1;
          }
LABEL_335:
          v30 = v746;
LABEL_336:
          if (v776 != (void **)&v778)
            free(v776);
          v32 = v747;
          if (v239)
          {
            v271 = HIDWORD(v765);
            v272 = *((_QWORD *)v33 + 4 * HIDWORD(v765) + -4 * (*((_DWORD *)v31 - 1) & 0x7FFFFFF));
            v273 = (_QWORD *)(v272 + 24);
            if (*(_DWORD *)(v272 + 32) >= 0x41u)
              v273 = (_QWORD *)*v273;
            v274 = (_QWORD *)*v273;
            v275 = *(llvm::Constant ****)v272;
            LODWORD(v777) = 16;
            v776 = (void **)((unsigned __int16)v274 & 0xFFFE);
            IntegerValue = llvm::Constant::getIntegerValue(v275, (llvm::Type *)&v776, v240);
            v277 = (char *)v33 - 32 * (*((_DWORD *)v31 - 1) & 0x7FFFFFF);
            v278 = &v277[32 * v271];
            if (*(_QWORD *)v278)
            {
              **((_QWORD **)v278 + 2) = *((_QWORD *)v278 + 1);
              v279 = *((_QWORD *)v278 + 1);
              if (v279)
                *(_QWORD *)(v279 + 16) = *((_QWORD *)v278 + 2);
            }
            *(_QWORD *)v278 = IntegerValue;
            if (IntegerValue)
            {
              v282 = IntegerValue[1];
              v280 = (char **)(IntegerValue + 1);
              v281 = v282;
              v283 = &v277[32 * v271];
              *((_QWORD *)v283 + 1) = v282;
              if (v282)
                *((_QWORD *)v281 + 2) = v283 + 8;
              *((_QWORD *)v283 + 2) = v280;
              *v280 = v278;
            }
            if (v777 >= 0x41 && v776)
              MEMORY[0x1CAA32F9C](v776, 0x1000C8000313F17);
            llvm::ScalarEvolution::forgetValue(v738, (llvm::Value *)(v31 - 3));
          }
          goto LABEL_25;
        }
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v34);
LABEL_353:
        v739 = 1;
        goto LABEL_25;
      }
      if (v238 <= 294)
      {
        if ((v238 - 167) < 2)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v34);
          goto LABEL_25;
        }
        if (v238 != 52)
        {
          if (v238 != 139)
            goto LABEL_25;
          v384 = *((_QWORD *)v33 - 4 * (*((_DWORD *)v31 - 1) & 0x7FFFFFF));
          v757 = 0;
          v754 = 0;
          v385 = *(_QWORD *)(v384 + 8);
          if (!v385 || *(_QWORD *)(v385 + 8))
            goto LABEL_25;
          v386 = *(unsigned __int8 *)(v384 + 16);
          if (v386 == 5)
          {
            if (*(_WORD *)(v384 + 18) != 18)
              goto LABEL_25;
            v509 = (uint64_t **)(v384 - 32 * (*(_DWORD *)(v384 + 20) & 0x7FFFFFF));
            if (!*v509)
              goto LABEL_25;
            v757 = *v509;
            v387 = (const llvm::APInt *)v509[4];
            if (!v387)
              goto LABEL_25;
          }
          else
          {
            if (v386 != 46)
              goto LABEL_25;
            if (!*(_QWORD *)(v384 - 64))
              goto LABEL_25;
            v757 = *(uint64_t **)(v384 - 64);
            v387 = *(const llvm::APInt **)(v384 - 32);
            if (!v387)
              goto LABEL_25;
          }
          v754 = (uint64_t)v387;
          sub_1C4773D54((uint64_t)&v762, v34, 0, 0, 0);
          v756 = *(unsigned __int8 **)v384;
          Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v733 + 40), 139, (uint64_t *)&v756, 1);
          v511 = Declaration;
          if (Declaration)
          {
            v512 = *(uint64_t ***)(Declaration + 24);
            v781 = 257;
            v513 = (uint64_t *)sub_1C4774778((uint64_t *)&v762, v512, Declaration, (uint64_t *)&v757, 1, (uint64_t)&v776, 0);
            v514 = *(uint64_t ***)(v511 + 24);
          }
          else
          {
            v781 = 257;
            v513 = (uint64_t *)sub_1C4774778((uint64_t *)&v762, 0, 0, (uint64_t *)&v757, 1, (uint64_t)&v776, 0);
            v514 = 0;
          }
          v781 = 257;
          v515 = sub_1C4774778((uint64_t *)&v762, v514, v511, &v754, 1, (uint64_t)&v776, 0);
          v781 = 257;
          v516 = (llvm::Value *)sub_1C4867450((uint64_t)&v762, v513, v515, v384, (uint64_t)&v776);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v31 - 3), v516, (llvm::Value *)1);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v34);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v384);
          if (v762 != &v764)
            free(v762);
          v739 = 1;
          goto LABEL_220;
        }
        v409 = llvm::ConstantInt::get((llvm::ConstantInt *)(**(_QWORD **)*(v31 - 3) + 1888), 1, 0);
        v410 = (llvm::UndefValue *)((_QWORD *)v33 - 4 * (*((_DWORD *)v31 - 1) & 0x7FFFFFF))[4];
        v411 = *(unsigned int *)(*(v31 - 3) + 8);
        sub_1C4773D54((uint64_t)&v762, v34, 0, 0, 0);
        if (v411 >> 8 < 0x21)
        {
          v441 = ***(_QWORD ***)v33;
          v442 = ((*(_DWORD *)(*(_QWORD *)v33 + 8) >> 8) - 1);
          v443 = *(llvm::ConstantInt **)(v441 + 1960);
          v444 = *(_DWORD *)(v441 + 1968);
          LODWORD(v777) = v444 >> 8;
          if (v444 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v776, v442, 0);
          }
          else
          {
            if (v444 <= 0xFF)
              v445 = 0;
            else
              v445 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v444);
            v776 = (void **)(v445 & v442);
          }
          v446 = llvm::ConstantInt::get(v443, (llvm::LLVMContext *)&v776, v412);
          if (v777 >= 0x41 && v776)
            MEMORY[0x1CAA32F9C](v776, 0x1000C8000313F17);
          v447 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v733 + 40), 2168, 0, 0);
          v757 = 0;
          v448 = (unsigned __int8 *)*((_QWORD *)v33 - 4 * (*((_DWORD *)v31 - 1) & 0x7FFFFFF));
          v449 = ***(_QWORD ***)v447 + 1960;
          v781 = 257;
          v757 = (uint64_t *)sub_1C4773690((uint64_t *)&v762, v448, v449, (uint64_t)&v776);
          v450 = *(uint64_t ***)(v447 + 24);
          v781 = 257;
          v451 = sub_1C4774778((uint64_t *)&v762, v450, v447, (uint64_t *)&v757, 1, (uint64_t)&v776, 0);
          v781 = 257;
          v452 = (unsigned __int8 *)sub_1C47733F8((uint64_t)&v762, (uint64_t)v446, v451, (uint64_t)&v776, 0, 0);
        }
        else
        {
          v724 = v411;
          v413 = *(llvm::ConstantInt **)(*(_QWORD *)v770 + 1960);
          LODWORD(v777) = *(_DWORD *)(*(_QWORD *)v770 + 1968) >> 8;
          if (v777 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v776, 0, 0);
          else
            v776 = 0;
          v415 = llvm::ConstantInt::get(v413, (llvm::LLVMContext *)&v776, v412);
          if (v777 >= 0x41 && v776)
            MEMORY[0x1CAA32F9C](v776, 0x1000C8000313F17);
          v416 = *(llvm::ConstantInt **)(*(_QWORD *)v770 + 1960);
          v417 = *(_DWORD *)(*(_QWORD *)v770 + 1968);
          LODWORD(v777) = v417 >> 8;
          if (v417 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v776, 1, 0);
          }
          else
          {
            if (v417 <= 0xFF)
              v418 = 0;
            else
              v418 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v417);
            v776 = (void **)(v418 & 1);
          }
          v420 = llvm::ConstantInt::get(v416, (llvm::LLVMContext *)&v776, v414);
          if (v777 >= 0x41 && v776)
            MEMORY[0x1CAA32F9C](v776, 0x1000C8000313F17);
          v421 = *(llvm::ConstantInt **)(*(_QWORD *)v770 + 1960);
          v422 = *(_DWORD *)(*(_QWORD *)v770 + 1968);
          LODWORD(v777) = v422 >> 8;
          if (v422 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v776, 31, 0);
          }
          else
          {
            if (v422 <= 0xFF)
              LOBYTE(v423) = 0;
            else
              v423 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v422);
            v776 = (void **)(v423 & 0x1F);
          }
          v744 = v410;
          v425 = llvm::ConstantInt::get(v421, (llvm::LLVMContext *)&v776, v419);
          if (v777 >= 0x41 && v776)
            MEMORY[0x1CAA32F9C](v776, 0x1000C8000313F17);
          v426 = *(llvm::ConstantInt **)(*(_QWORD *)v770 + 1960);
          v427 = *(_DWORD *)(*(_QWORD *)v770 + 1968);
          LODWORD(v777) = v427 >> 8;
          if (v427 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v776, 32, 0);
          }
          else
          {
            if (v427 <= 0xFF)
              LOBYTE(v428) = 0;
            else
              v428 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v427);
            v776 = (void **)(v428 & 0x20);
          }
          v429 = llvm::ConstantInt::get(v426, (llvm::LLVMContext *)&v776, v424);
          if (v777 >= 0x41 && v776)
            MEMORY[0x1CAA32F9C](v776, 0x1000C8000313F17);
          llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(_QWORD **)*(v31 - 3) + 1960), (llvm::Type *)2);
          v430 = (unsigned __int8 *)*((_QWORD *)v33 - 4 * (*((_DWORD *)v31 - 1) & 0x7FFFFFF));
          v781 = 257;
          v432 = sub_1C4773E38((uint64_t *)&v762, 49, v430, v431, (uint64_t)&v776);
          v756 = 0;
          v781 = 257;
          v756 = sub_1C4772EE0((uint64_t *)&v762, (uint64_t)v432, (uint64_t)v415, (uint64_t)&v776);
          v748 = 0;
          v781 = 257;
          v748 = sub_1C4772EE0((uint64_t *)&v762, (uint64_t)v432, (uint64_t)v420, (uint64_t)&v776);
          v781 = 257;
          v731 = sub_1C4774B48((uint64_t)&v762, 32, (uint64_t)v748, (uint64_t)v415, (uint64_t)&v776);
          v433 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v733 + 40), 2168, 0, 0);
          v434 = v433;
          if (v433)
            v435 = *(uint64_t ***)(v433 + 24);
          else
            v435 = 0;
          v781 = 257;
          v463 = sub_1C4774778((uint64_t *)&v762, v435, v433, (uint64_t *)&v748, 1, (uint64_t)&v776, 0);
          v781 = 257;
          v464 = sub_1C47733F8((uint64_t)&v762, (uint64_t)v425, v463, (uint64_t)&v776, 0, 0);
          v723 = (uint64_t)v415;
          if (v434)
            v465 = *(uint64_t ***)(v434 + 24);
          else
            v465 = 0;
          v781 = 257;
          v466 = sub_1C4774778((uint64_t *)&v762, v465, v434, (uint64_t *)&v756, 1, (uint64_t)&v776, 0);
          v781 = 257;
          v467 = sub_1C47733F8((uint64_t)&v762, (uint64_t)v425, v466, (uint64_t)&v776, 0, 0);
          v761 = 257;
          v468 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::ValueHandleBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v771 + 16))(v771, v429, v467, 0, 0);
          if (!v468)
          {
            v781 = 257;
            v469 = (char *)operator new(0x80uLL);
            v470 = v469;
            *(_QWORD *)v469 = 0;
            *((_QWORD *)v469 + 1) = 0;
            *((_QWORD *)v469 + 2) = 0;
            *((_QWORD *)v469 + 5) = 0;
            *((_QWORD *)v469 + 6) = 0;
            *((_QWORD *)v469 + 4) = 0;
            v471 = (uint64_t *)(v469 + 32);
            *((_QWORD *)v469 + 8) = *(_QWORD *)v429;
            v468 = (llvm::Value *)(v469 + 64);
            *((_QWORD *)v469 + 3) = v469 + 64;
            *((_QWORD *)v469 + 7) = v469 + 64;
            *((_QWORD *)v469 + 9) = 0;
            v469[80] = 41;
            v469[81] = 0;
            *((_WORD *)v469 + 41) = 0;
            *((_DWORD *)v469 + 21) = 2;
            *((_DWORD *)v469 + 30) = 0;
            *(_OWORD *)(v469 + 104) = 0u;
            *(_OWORD *)(v469 + 88) = 0u;
            *(_QWORD *)v469 = v429;
            v474 = *((_QWORD *)v429 + 1);
            v473 = (_QWORD *)((char *)v429 + 8);
            v472 = v474;
            *((_QWORD *)v469 + 1) = v474;
            if (v474)
              *(_QWORD *)(v472 + 16) = v469 + 8;
            v722 = v409;
            *((_QWORD *)v469 + 2) = v473;
            *v473 = v469;
            if (*((_QWORD *)v469 + 4))
            {
              **((_QWORD **)v469 + 6) = *((_QWORD *)v469 + 5);
              v540 = *((_QWORD *)v469 + 5);
              if (v540)
                *(_QWORD *)(v540 + 16) = *((_QWORD *)v469 + 6);
            }
            *v471 = v467;
            if (v467)
            {
              v477 = *(_QWORD *)(v467 + 8);
              v476 = (uint64_t **)(v467 + 8);
              v475 = v477;
              *((_QWORD *)v469 + 5) = v477;
              if (v477)
                *(_QWORD *)(v475 + 16) = v469 + 40;
              *((_QWORD *)v469 + 6) = v476;
              *v476 = v471;
            }
            llvm::Value::setName((uint64_t ***)v469 + 8, (uint64_t)&v776);
            (*(void (**)(uint64_t, llvm::Value *, uint64_t **, uint64_t, _QWORD *))(*(_QWORD *)v772 + 16))(v772, v468, &v757, v768, v769);
            if ((_DWORD)v763)
            {
              v478 = (char *)v762;
              v479 = (char *)v762 + 16 * v763;
              v480 = (unsigned __int8 **)(v470 + 112);
              do
              {
                v481 = *(_DWORD *)v478;
                v482 = (unsigned __int8 *)*((_QWORD *)v478 + 1);
                if (v482)
                {
                  if (!v481)
                  {
                    v754 = *((_QWORD *)v478 + 1);
                    llvm::MetadataTracking::track((uint64_t)&v754, v482, 2);
                    v483 = *v480;
                    goto LABEL_630;
                  }
                }
                else
                {
                  v483 = *v480;
                  if (!*v480 && (v470[87] & 0x20) == 0)
                    goto LABEL_627;
                  if (!v481)
                  {
                    v754 = 0;
LABEL_630:
                    if (v483)
                      llvm::MetadataTracking::untrack((uint64_t)(v470 + 112), v483);
                    v484 = (unsigned __int8 *)v754;
                    *v480 = (unsigned __int8 *)v754;
                    if (v484)
                      llvm::MetadataTracking::retrack((uint64_t)&v754, v484, (uint64_t)(v470 + 112));
                    goto LABEL_627;
                  }
                }
                llvm::Value::setMetadata(v468, *(_DWORD *)v478, (llvm::MDNode *)v482);
LABEL_627:
                v478 += 16;
              }
              while (v478 != v479);
            }
            v409 = v722;
          }
          v781 = 257;
          v452 = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v762, v731, (uint64_t *)v468, v464, (uint64_t)&v776, 0);
          if (v409 == (llvm::Value **)v744)
          {
            v32 = v747;
          }
          else
          {
            v485 = v724 >> 8;
            v781 = 257;
            v486 = sub_1C4773594((uint64_t)&v762, v748, (uint64_t)v756, (uint64_t)&v776);
            v761 = 257;
            v488 = sub_1C4774B48((uint64_t)&v762, 32, v486, v723, (uint64_t)&v757);
            v489 = *(llvm::ConstantInt **)(*(_QWORD *)v770 + 1960);
            v490 = *(_DWORD *)(*(_QWORD *)v770 + 1968);
            LODWORD(v777) = v490 >> 8;
            v32 = v747;
            if (v490 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v776, v485, 0);
            }
            else
            {
              if (v490 <= 0xFF)
                v491 = 0;
              else
                v491 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v490);
              v776 = (void **)(v491 & v485);
            }
            v492 = (uint64_t *)llvm::ConstantInt::get(v489, (llvm::LLVMContext *)&v776, v487);
            if (v777 >= 0x41 && v776)
              MEMORY[0x1CAA32F9C](v776, 0x1000C8000313F17);
            v781 = 257;
            v452 = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v762, v488, v492, (uint64_t)v452, (uint64_t)&v776, 0);
          }
        }
        v30 = v746;
        v493 = *(uint64_t ***)v33;
        v781 = 257;
        v494 = sub_1C4773690((uint64_t *)&v762, v452, (uint64_t)v493, (uint64_t)&v776);
        llvm::Value::doRAUW(v33, (llvm::Value *)v494, (llvm::Value *)1);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v34);
        if (v762 != &v764)
          free(v762);
        goto LABEL_353;
      }
      switch(v238)
      {
        case 1267:
          sub_1C4773D54((uint64_t)&v762, v34, 0, 0, 0);
          v392 = (char *)v33 - 32 * (*((_DWORD *)v31 - 1) & 0x7FFFFFF);
          v393 = *((_QWORD *)v392 + 8);
          v394 = *((_QWORD *)v392 + 12);
          v781 = 257;
          v395 = sub_1C4774B48((uint64_t)&v762, 37, v393, v394, (uint64_t)&v776);
          v396 = (char *)v33 - 32 * (*((_DWORD *)v31 - 1) & 0x7FFFFFF);
          v397 = (uint64_t *)*((_QWORD *)v396 + 8);
          v398 = *((_QWORD *)v396 + 16);
          v781 = 257;
          v399 = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v762, v395, v397, v398, (uint64_t)&v776, 0);
          v400 = *(_QWORD *)v770 + 1984;
          v761 = 257;
          v401 = sub_1C4773E38((uint64_t *)&v762, 39, v399, v400, (uint64_t)&v757);
          v402 = (uint64_t *)((_QWORD *)v33 - 4 * (*((_DWORD *)v31 - 1) & 0x7FFFFFF))[4];
          v403 = *v402;
          v404 = *(unsigned __int8 *)(*v402 + 8);
          if (*v402 && v404 == 15 && !*(_QWORD *)(v403 + 24))
          {
            ParamElementType = (llvm::GetElementPtrInst *)llvm::AttributeList::getParamElementType((llvm::AttributeList *)(v31 + 5), 1);
          }
          else
          {
            if ((v404 & 0xFE) == 0x12)
              v403 = **(_QWORD **)(v403 + 16);
            ParamElementType = **(llvm::GetElementPtrInst ***)(v403 + 16);
          }
          v781 = 257;
          v406 = (unsigned __int8 *)sub_1C4867B70((uint64_t *)&v762, ParamElementType, v402, (uint64_t)v401, (uint64_t)&v776);
          v407 = **((_QWORD **)v33 - 4 * (*((_DWORD *)v31 - 1) & 0x7FFFFFF));
          v781 = 257;
          v408 = sub_1C4773E38((uint64_t *)&v762, 49, v406, v407, (uint64_t)&v776);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v31 - 3), (llvm::Value *)v408, (llvm::Value *)1);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v34);
          if (v762 != &v764)
            free(v762);
          goto LABEL_297;
        case 1266:
          sub_1C4773D54((uint64_t)&v762, v34, 0, 0, 0);
          v436 = (char *)v33 - 32 * (*((_DWORD *)v31 - 1) & 0x7FFFFFF);
          v437 = *((_QWORD *)v436 + 8);
          v438 = *(uint64_t **)v436;
          v439 = *((_QWORD *)v436 + 4);
          v781 = 257;
          v440 = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v762, v437, v438, v439, (uint64_t)&v776, 0);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v31 - 3), v440, (llvm::Value *)1);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v34);
          if (v762 != &v764)
            free(v762);
          break;
        case 295:
          for (j = *(_QWORD **)(v733 + 80); j != v736; j = (_QWORD *)j[1])
          {
            if (j)
              v389 = j - 3;
            else
              v389 = 0;
            v390 = v389[5];
            if (v390)
              v391 = v390 - 24;
            else
              v391 = 0;
            if (*(unsigned __int8 *)(v391 + 16) - 29 >= 0xB)
              v391 = 0;
            if (*(_BYTE *)(v391 + 16) == 29)
            {
              v453 = (_QWORD *)*v30;
              if ((_QWORD *)*v30 == v30)
              {
                v454 = 0;
              }
              else
              {
                v454 = (llvm::Instruction *)(v453 - 3);
                if (v453)
                  v455 = (llvm::Instruction *)(v453 - 3);
                else
                  v455 = 0;
                v456 = *((unsigned __int8 *)v455 + 16) - 40;
                if (v456 >= 0xFFFFFFF5)
                  v457 = v455;
                else
                  v457 = 0;
                if (v453)
                {
                  if (*((_BYTE *)v457 + 16) == 30 && v456 >= 0xFFFFFFF5)
                  {
                    if (*((_BYTE *)v453 - 8) != 30)
                    {
                      v459 = 2;
                      switch(*((_BYTE *)v453 - 8))
                      {
                        case 0x1E:
                          __break(1u);
                          goto LABEL_1064;
                        case 0x1F:
                          v459 = (*((_DWORD *)v453 - 1) >> 1) & 0x3FFFFFF;
                          goto LABEL_685;
                        case 0x20:
                        case 0x26:
                          v459 = (*((_DWORD *)v453 - 1) & 0x7FFFFFF) - 1;
                          goto LABEL_685;
                        case 0x21:
                          goto LABEL_601;
                        case 0x24:
                          v459 = *((_WORD *)v453 - 3) & 1;
                          goto LABEL_685;
                        case 0x25:
                          v459 = 1;
                          goto LABEL_601;
                        case 0x27:
                          v459 = *((_DWORD *)v453 + 14) + 1;
LABEL_685:
                          if (!v459)
                            goto LABEL_647;
                          goto LABEL_601;
                        default:
                          goto LABEL_647;
                      }
                    }
                    if ((*((_DWORD *)v453 - 1) & 0x7FFFFFF) == 3)
                      v459 = 2;
                    else
                      v459 = 1;
LABEL_601:
                    for (k = 0; k != v459; ++k)
                    {
                      Successor = llvm::Instruction::getSuccessor(v454, k);
                      v462 = v774;
                      if (v774 >= (unint64_t)HIDWORD(v774))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v773, (uint64_t)v775, v774 + 1, 8);
                        v462 = v774;
                      }
                      *(_QWORD *)&v773[8 * v462] = Successor;
                      LODWORD(v774) = v774 + 1;
                    }
                    v454 = v457;
                  }
                }
              }
LABEL_647:
              sub_1C4773D54((uint64_t)&v762, v34, 0, 0, 0);
              sub_1C4867DC8((uint64_t *)&v762, (uint64_t)(j - 3));
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, (uint64_t)v454);
              v496 = j + 2;
              if ((_QWORD *)j[2] != j + 2)
              {
                for (m = j[3]; ; m = *(_QWORD *)(v498 + 32))
                {
                  v498 = m - 24;
                  v499 = m ? m - 24 : 0;
                  if (!m || *(_BYTE *)(v499 + 16) != 83)
                    break;
                  v500 = llvm::UndefValue::get(*(llvm::UndefValue **)v498, v495);
                  sub_1C477667C((llvm::PHINode *)v498, (uint64_t)v500, *(_QWORD *)(v34 + 40));
                }
              }
              v501 = (_QWORD *)j[3];
              v502 = v501 - 3;
              if (!v501)
                v502 = 0;
              if (*((_BYTE *)v502 + 16) == 83)
              {
                do
                {
                  v501 = (_QWORD *)v501[1];
                  v503 = v501 - 3;
                  if (!v501)
                    v503 = 0;
                }
                while (*((_BYTE *)v503 + 16) == 83);
              }
              v768 = v501[2];
              v769 = v501;
              v504 = (void **)v501[3];
              v776 = v504;
              if (v504)
              {
                llvm::MetadataTracking::track((uint64_t)&v776, (unsigned __int8 *)v504, 2);
                v505 = v776;
              }
              else
              {
                v505 = 0;
              }
              sub_1C4774EF4((uint64_t)&v762, 0, (uint64_t)v505);
              if (v776)
                llvm::MetadataTracking::untrack((uint64_t)&v776, (unsigned __int8 *)v776);
              for (n = (_QWORD *)j[3]; n != v496; n = (_QWORD *)n[1])
              {
                v507 = n - 3;
                if (n)
                  v508 = n - 3;
                else
                  v508 = 0;
                if (*((_BYTE *)v508 + 16) != 83)
                  goto LABEL_688;
              }
              v507 = 0;
LABEL_688:
              v517 = v507 + 3;
              while (v517 != v496)
              {
                if (v517)
                  v518 = v517 - 3;
                else
                  v518 = 0;
                v519 = *((_DWORD *)v518 + 5);
                if ((v519 & 0x40000000) != 0)
                {
                  v521 = (uint64_t **)*(v518 - 1);
                  v520 = v519 & 0x7FFFFFF;
                }
                else
                {
                  v520 = v519 & 0x7FFFFFF;
                  v521 = (uint64_t **)&v518[-4 * v520];
                }
                v517 = (_QWORD *)v517[1];
                if (v520)
                {
                  v522 = &v521[4 * v520];
                  do
                  {
                    v523 = *v521;
                    if (*v521)
                      v524 = *((unsigned __int8 *)*v521 + 16) >= 0x1Cu;
                    else
                      v524 = 0;
                    if (v524 && (_QWORD *)v523[5] != j - 3)
                    {
                      v525 = *v523;
                      v781 = 257;
                      v526 = (llvm::UndefValue **)sub_1C4867E94((uint64_t)&v762, v525, 2, (uint64_t)&v776);
                      v528 = llvm::UndefValue::get(*v526, v527);
                      sub_1C477667C((llvm::PHINode *)v526, (uint64_t)v528, *(_QWORD *)(v34 + 40));
                      v529 = *(j - 2);
                      if (v529)
                      {
                        while (1)
                        {
                          v530 = *(_QWORD *)(v529 + 24);
                          v531 = *(unsigned __int8 *)(v530 + 16);
                          v532 = v530 && v531 >= 0x1C;
                          v533 = !v532 || v531 - 29 > 0xA;
                          if (!v533)
                            break;
                          v529 = *(_QWORD *)(v529 + 8);
                          if (!v529)
                            goto LABEL_713;
                        }
LABEL_716:
                        v534 = *(_QWORD *)(v530 + 40);
                        if (v534 != *(_QWORD *)(v34 + 40))
                          sub_1C477667C((llvm::PHINode *)v526, (uint64_t)v523, v534);
                        while (1)
                        {
                          v529 = *(_QWORD *)(v529 + 8);
                          if (!v529)
                            break;
                          v530 = *(_QWORD *)(v529 + 24);
                          v535 = *(unsigned __int8 *)(v530 + 16);
                          if (v530)
                            v536 = v535 >= 0x1C;
                          else
                            v536 = 0;
                          if (v536 && v535 - 29 < 0xB)
                            goto LABEL_716;
                        }
                      }
LABEL_713:
                      sub_1C5EADA2C((uint64_t)(j - 3), (llvm::Value *)v523, (llvm::Value *)v526);
                    }
                    v521 += 4;
                  }
                  while (v521 != v522);
                }
              }
              if (v762 != &v764)
                free(v762);
              v30 = v746;
              break;
            }
          }
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v34);
          v739 = 1;
          goto LABEL_360;
      }
LABEL_25:
      v31 = v32;
      if (v32 == v30)
        goto LABEL_767;
    }
  }
LABEL_768:
  v542 = v749;
  v541 = (unint64_t *)v750;
  v544 = v751;
  v543 = HIDWORD(v751);
  if (v750 == (char *)v749)
    v545 = HIDWORD(v751);
  else
    v545 = v751;
  v546 = v750;
  v548 = v732;
  v547 = v733;
  if ((_DWORD)v545)
  {
    v549 = 0;
    while (*(_QWORD *)&v750[v549] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v549 += 8;
      if (8 * v545 == v549)
        goto LABEL_793;
    }
    v546 = &v750[v549];
  }
  v550 = &v750[8 * v545];
  if (v546 != v550)
  {
    v551 = *(_QWORD *)v546;
LABEL_779:
    v552 = *(_DWORD *)(v551 + 20);
    if ((v552 & 0x40000000) != 0)
    {
      v554 = *(_QWORD *)(v551 - 8);
      v553 = v552 & 0x7FFFFFF;
      if (!v553)
        goto LABEL_786;
    }
    else
    {
      v553 = v552 & 0x7FFFFFF;
      v554 = v551 - 32 * v553;
      if (!v553)
        goto LABEL_786;
    }
    v555 = 32 * v553;
    v556 = (_QWORD **)(v554 + 16);
    do
    {
      if (*(v556 - 2))
      {
        **v556 = *(v556 - 1);
        v557 = (uint64_t)*(v556 - 1);
        if (v557)
          *(_QWORD *)(v557 + 16) = *v556;
      }
      *(v556 - 2) = 0;
      v556 += 4;
      v555 -= 32;
    }
    while (v555);
LABEL_786:
    v558 = (unint64_t *)(v546 + 8);
    while (v558 != (unint64_t *)v550)
    {
      v559 = *v558++;
      v551 = v559;
      if (v559 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v546 = (char *)(v558 - 1);
        goto LABEL_779;
      }
    }
    v542 = v749;
    v541 = (unint64_t *)v750;
    v544 = v751;
    v543 = HIDWORD(v751);
  }
LABEL_793:
  if (v541 == v542)
    v560 = v543;
  else
    v560 = v544;
  v561 = v541;
  if ((_DWORD)v560)
  {
    v562 = 0;
    while (v541[v562] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v560 == ++v562)
        goto LABEL_809;
    }
    v561 = &v541[v562];
  }
  v563 = &v541[v560];
  if (v561 != v563)
  {
    v564 = *v561;
LABEL_804:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v564 + 40) + 40, (uint64_t ***)v564);
    v565 = *(_QWORD *)(v564 + 24);
    v566 = *(_QWORD **)(v564 + 32);
    *v566 = v565;
    *(_QWORD *)(v565 + 8) = v566;
    *(_QWORD *)(v564 + 24) = 0;
    *(_QWORD *)(v564 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v564);
    v567 = v561 + 1;
    while (v567 != v563)
    {
      v568 = *v567++;
      v564 = v568;
      if (v568 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v561 = v567 - 1;
        goto LABEL_804;
      }
    }
    v542 = v749;
    v541 = (unint64_t *)v750;
  }
LABEL_809:
  if (v541 == v542)
    goto LABEL_810;
  if (v751 < 0x21 || 4 * (HIDWORD(v751) - v752) >= v751)
  {
    memset(v541, 255, 8 * v751);
LABEL_810:
    HIDWORD(v751) = 0;
    v752 = 0;
    goto LABEL_811;
  }
  free(v541);
  v716 = 1 << (33 - __clz(HIDWORD(v751) - v752 - 1));
  v533 = (HIDWORD(v751) - v752) > 0x10;
  HIDWORD(v751) = 0;
  v752 = 0;
  if (v533)
    v717 = v716;
  else
    v717 = 32;
  LODWORD(v751) = v717;
  v718 = (char *)malloc_type_malloc(8 * v717, 0x4065EBACuLL);
  if (!v718)
    goto LABEL_1064;
  v750 = v718;
  memset(v718, 255, 8 * v751);
LABEL_811:
  v569 = v774;
  if (v774 >= 2)
  {
    qsort(v773, v774, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C4776710);
    v569 = v774;
  }
  v570 = (uint64_t *)v773;
  v571 = &v773[8 * v569];
  v572 = v773;
  if (v569)
  {
    v572 = v773 - 8;
    v573 = 8 * v569 - 8;
    while (v573)
    {
      v574 = *((_QWORD *)v572 + 1);
      v575 = *((_QWORD *)v572 + 2);
      v572 += 8;
      v573 -= 8;
      if (v574 == v575)
        goto LABEL_817;
    }
  }
  else
  {
LABEL_817:
    if (v572 != v571)
    {
      v576 = v572 + 16;
      if (v572 + 16 != v571)
      {
        v577 = *(_QWORD *)v572;
        do
        {
          v578 = v577;
          v577 = *(_QWORD *)v576;
          if (v578 != *(_QWORD *)v576)
          {
            *((_QWORD *)v572 + 1) = v577;
            v572 += 8;
          }
          v576 += 8;
        }
        while (v576 != v571);
      }
      v571 = v572 + 8;
    }
  }
  v579 = v571 - (char *)v570;
  v580 = (unint64_t)(v571 - (char *)v570) >> 3;
  LODWORD(v774) = v580;
  if ((v579 >> 3))
  {
    v581 = &v570[v580];
    do
    {
      v582 = (llvm::BasicBlock *)*v570;
      v583 = *(_QWORD *)(*v570 + 8);
      if (v583)
      {
        while (1)
        {
          v584 = *(_QWORD *)(v583 + 24);
          v585 = *(unsigned __int8 *)(v584 + 16);
          v586 = v584 && v585 >= 0x1C;
          if (v586 && v585 - 29 < 0xB)
            break;
          v583 = *(_QWORD *)(v583 + 8);
          if (!v583)
            goto LABEL_836;
        }
      }
      else
      {
LABEL_836:
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::eraseNode(v726, *v570);
        llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock(v725, (uint64_t)v582);
        llvm::BasicBlock::eraseFromParent(v582);
      }
      ++v570;
    }
    while (v570 != v581);
  }
  LODWORD(v774) = 0;
  v588 = *(_QWORD **)(v733 + 80);
  if (v588 != v736)
  {
    while (1)
    {
      v589 = v588 - 3;
      v737 = v588;
      if (!v588)
        v589 = 0;
      v590 = v589 + 5;
      v591 = (_QWORD *)v589[6];
      if (v591 != v589 + 5)
        break;
LABEL_991:
      v588 = (_QWORD *)v737[1];
      if (v588 == v736)
        goto LABEL_992;
    }
    v735 = v589;
    while (1)
    {
      v592 = v591;
      v591 = (_QWORD *)v591[1];
      v593 = v592 - 3;
      if (v592)
        v594 = (uint64_t)(v592 - 3);
      else
        v594 = 0;
      v595 = *(unsigned __int8 *)(v594 + 16);
      if (v595 == 67)
        v596 = v594;
      else
        v596 = 0;
      if (v592 && v595 == 67 && *(_DWORD *)(*(_QWORD *)v596 + 8) == 16397)
      {
        v597 = *(_QWORD *)(v594 + 8);
        if (!v597)
        {
LABEL_855:
          v598 = *(_QWORD *)(v596 - 32);
          if (!*(_QWORD *)(v594 + 40))
          {
            if (!v598
              || *(unsigned __int8 *)(v598 + 16) < 0x1Cu
              || (v593 = *(_QWORD **)(v596 - 32), !*(_QWORD *)(v598 + 40)))
            {
              v593 = 0;
            }
          }
          v762 = v745;
          v763 = 0;
          v764 = v593;
          v765 = 0;
          v766 = 0;
          v767 = 1;
          sub_1C4F83784(v598, 0, (uint64_t *)&v762, &v757);
          v599 = v758 - 1;
          v600 = (uint64_t *)&v757;
          if (v758 >= 0x41)
            v600 = &v757[v599 >> 6];
          v601 = *v600;
          sub_1C4773D54((uint64_t)&v762, v594, 0, 0, 0);
          v602 = *(unsigned __int8 **)(v596 - 32);
          v603 = *(_QWORD *)v596;
          v781 = 257;
          v604 = sub_1C4773B94((uint64_t *)&v762, v602, v603, (uint64_t)&v776);
          v605 = v604;
          if (v604)
            v606 = v604[16] > 0x1Bu;
          else
            v606 = 0;
          v607 = v606;
          if (!v606)
          {
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v594, (llvm::Value *)v604, (llvm::Value *)1);
            goto LABEL_868;
          }
          if (((v601 >> v599) & 1) != 0)
          {
LABEL_867:
            v739 = 1;
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v594, (llvm::Value *)v605, (llvm::Value *)1);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v594);
            goto LABEL_868;
          }
          v614 = v738[13];
          v615 = v738[15].u32[0];
          if (v615)
          {
            v616 = v615 - 1;
            v617 = (v615 - 1) & ((v604 >> 4) ^ (v604 >> 9));
            v618 = *(_QWORD *)&v614 + 48 * v617;
            v619 = *(unsigned __int8 **)(v618 + 24);
            if (v619 != v604)
            {
              v620 = 1;
              while (v619 != (unsigned __int8 *)-4096)
              {
                v621 = v617 + v620++;
                v617 = v621 & v616;
                v618 = *(_QWORD *)&v614 + 48 * (v621 & v616);
                v619 = *(unsigned __int8 **)(v618 + 24);
                if (v619 == v604)
                  goto LABEL_896;
              }
              goto LABEL_897;
            }
LABEL_896:
            v622 = v548;
          }
          else
          {
LABEL_897:
            v622 = v548;
            v618 = *(_QWORD *)&v614 + 48 * v615;
          }
          if (v618 == *(_QWORD *)&v614 + 48 * v615 || (SCEVIter = *(_QWORD *)(v618 + 40)) == 0)
          {
            SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v738, (unint64_t)v604);
            v614 = v738[13];
            v615 = v738[15].u32[0];
          }
          v624 = *(_QWORD *)&v614 + 48 * v615;
          if (v615)
          {
            v625 = v615 - 1;
            v626 = v625 & ((v596 >> 4) ^ (v596 >> 9));
            v627 = *(_QWORD *)&v614 + 48 * v626;
            v628 = *(_QWORD *)(v627 + 24);
            if (v628 != v596)
            {
              v629 = 1;
              while (v628 != -4096)
              {
                v630 = v626 + v629++;
                v626 = v630 & v625;
                v627 = *(_QWORD *)&v614 + 48 * v626;
                v628 = *(_QWORD *)(v627 + 24);
                if (v628 == v596)
                  goto LABEL_908;
              }
              goto LABEL_907;
            }
          }
          else
          {
LABEL_907:
            v627 = v624;
          }
LABEL_908:
          v548 = v622;
          if (v627 == v624 || (v631 = *(_QWORD *)(v627 + 40)) == 0)
            v631 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v738, v596);
          v547 = v733;
          if (SCEVIter == v631)
            goto LABEL_867;
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v605 + 5) + 40, (uint64_t ***)v605);
          v632 = *((_QWORD *)v605 + 3);
          v633 = (_QWORD *)*((_QWORD *)v605 + 4);
          *v633 = v632;
          *(_QWORD *)(v632 + 8) = v633;
          *((_QWORD *)v605 + 3) = 0;
          *((_QWORD *)v605 + 4) = 0;
          llvm::Value::deleteValue((llvm::Value *)v605);
LABEL_868:
          if (v762 != &v764)
            free(v762);
          if (v760 >= 0x41 && v759)
            MEMORY[0x1CAA32F9C](v759, 0x1000C8000313F17);
          if (v758 >= 0x41 && v757)
            MEMORY[0x1CAA32F9C](v757, 0x1000C8000313F17);
          if (!v607)
            goto LABEL_977;
          goto LABEL_873;
        }
        while (*(_BYTE *)(*(_QWORD *)(v597 + 24) + 16) == 62)
        {
          v597 = *(_QWORD *)(v597 + 8);
          if (!v597)
            goto LABEL_855;
        }
      }
LABEL_873:
      if (*(_DWORD *)(*(_QWORD *)v594 + 8) == 269)
      {
        v608 = *(_QWORD *)(v548 + 56);
        if (!v608)
          goto LABEL_1062;
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v608 + 48))(v608, v547))
        {
          if (*(_BYTE *)(v594 + 16) != 82)
          {
            v609 = *(_QWORD *)(v594 + 8);
            if (v609)
            {
              v610 = 0;
              while (1)
              {
                v611 = *(_QWORD *)(v609 + 24);
                v612 = *(unsigned __int8 *)(v611 + 16);
                if (v612 == 30)
                  v613 = *(_QWORD *)(v609 + 24);
                else
                  v613 = 0;
                if ((!v611 || v612 != 85 || *(_QWORD *)(v611 - 96) != v594)
                  && (!v613 || *(_QWORD *)(v613 - 32 * (*(_DWORD *)(v613 + 20) & 0x7FFFFFF)) != v594))
                {
                  goto LABEL_889;
                }
                if (v610)
                  break;
                v610 = 1;
LABEL_889:
                v609 = *(_QWORD *)(v609 + 8);
                if (!v609)
                  goto LABEL_977;
              }
              llvm::Instruction::clone((llvm::Instruction *)v594);
              v635 = v634;
              sub_1C4773D54((uint64_t)&v762, v594, 0, 0, 0);
              if (*(_BYTE *)(v594 + 16) == 83)
              {
                for (ii = (_QWORD *)v735[6]; ; ii = (_QWORD *)ii[1])
                {
                  v638 = ii - 3;
                  if (!ii)
                    v638 = 0;
                  if (*((_BYTE *)v638 + 16) != 83)
                    break;
                }
                v768 = ii[2];
                v769 = ii;
                v639 = (void **)ii[3];
                v776 = v639;
                if (v639)
                {
                  llvm::MetadataTracking::track((uint64_t)&v776, (unsigned __int8 *)v639, 2);
                  v640 = v776;
                }
                else
                {
                  v640 = 0;
                }
                sub_1C4774EF4((uint64_t)&v762, 0, (uint64_t)v640);
                v636 = (llvm::Type *)v776;
                if (v776)
                  llvm::MetadataTracking::untrack((uint64_t)&v776, (unsigned __int8 *)v776);
              }
              v641 = (llvm::ConstantFP **)(***(_QWORD ***)v594 + 1624);
              v642 = (uint64_t *)llvm::ConstantFP::get(v641, v636, 0.0);
              v644 = llvm::ConstantFP::get(v641, v643, 1.0);
              v781 = 257;
              v645 = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v762, v635, v642, (uint64_t)v644, (uint64_t)&v776, 0);
              v781 = 257;
              v646 = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v762, 1, v645, (uint64_t)v642, (uint64_t)&v776, 0, 0);
              v647 = v645[5];
              *(_QWORD *)(v635 + 40) = v647;
              *(_WORD *)(v647 + 18) &= ~0x8000u;
              if ((*(_BYTE *)(v635 + 23) & 0x10) != 0)
              {
                v685 = *(_QWORD *)(v647 + 56);
                if (v685)
                {
                  v686 = *(llvm::ValueSymbolTable **)(v685 + 104);
                  if (v686)
                    llvm::ValueSymbolTable::reinsertValue(v686, (llvm::Value *)v635);
                }
              }
              v649 = v645[3];
              v648 = v645 + 3;
              *(_QWORD *)(v635 + 24) = v649;
              *(_QWORD *)(v635 + 32) = v648;
              v650 = v635 + 24;
              *(_QWORD *)(v649 + 8) = v650;
              *v648 = v650;
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v594, v646, (llvm::Value *)1);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v749, v594);
              v651 = (uint64_t *)*((_QWORD *)v646 + 5);
              LODWORD(v778) = 0;
              v776 = 0;
              v777 = 0;
              v652 = *((_QWORD *)v646 + 1);
              if (v652)
              {
                while (1)
                {
                  v654 = (_QWORD *)(v652 + 8);
                  v653 = *(_QWORD *)(v652 + 8);
                  v655 = *(_QWORD *)(v652 + 24);
                  if (*(_BYTE *)(v655 + 16) != 83)
                  {
                    v656 = *(uint64_t **)(v655 + 40);
                    v757 = v656;
                    if (v656 != v651)
                      break;
                  }
LABEL_964:
                  v652 = v653;
                  if (!v653)
                  {
                    v548 = v732;
                    v547 = v733;
                    if (!*((_QWORD *)v646 + 1))
                    {
                      v651 = (uint64_t *)*((_QWORD *)v646 + 5);
                      goto LABEL_973;
                    }
                    goto LABEL_974;
                  }
                }
                if ((_DWORD)v778)
                {
                  v657 = (v778 - 1) & ((v656 >> 4) ^ (v656 >> 9));
                  v658 = &v776[2 * v657];
                  v659 = (uint64_t *)*v658;
                  if (v656 != *v658)
                  {
                    v660 = 0;
                    v661 = 1;
                    while (v659 != (uint64_t *)-4096)
                    {
                      if (v660)
                        v662 = 0;
                      else
                        v662 = v659 == (uint64_t *)-8192;
                      if (v662)
                        v660 = v658;
                      v663 = v657 + v661++;
                      v657 = v663 & (v778 - 1);
                      v658 = &v776[2 * v657];
                      v659 = (uint64_t *)*v658;
                      if (v656 == *v658)
                        goto LABEL_943;
                    }
                    if (v660)
                      v664 = v660;
                    else
                      v664 = v658;
LABEL_942:
                    v658 = (void **)sub_1C4775118((uint64_t)&v776, (uint64_t)&v757, (uint64_t *)&v757, v664);
                    *v658 = v757;
                    v658[1] = 0;
                  }
LABEL_943:
                  v665 = v658[1];
                  if (!v665)
                  {
                    v666 = v757 + 5;
                    for (jj = v757[6]; (uint64_t *)jj != v666; jj = *(_QWORD *)(jj + 8))
                    {
                      v668 = jj - 24;
                      if (!jj)
                        v668 = 0;
                      if (*(_BYTE *)(v668 + 16) != 83)
                      {
                        v669 = *(unsigned __int8 *)(jj - 8) - 38;
                        v533 = v669 > 0x38;
                        v670 = (1 << v669) & 0x100060000000001;
                        if (v533 || v670 == 0)
                          v666 = (uint64_t *)jj;
                        else
                          v666 = *(uint64_t **)(jj + 8);
                        break;
                      }
                    }
                    llvm::Instruction::clone(v646);
                    v673 = (llvm::Value *)v672;
                    v658[1] = (void *)v672;
                    v674 = v757;
                    *(_QWORD *)(v672 + 40) = v757;
                    *((_WORD *)v674 + 9) &= ~0x8000u;
                    if ((*(_BYTE *)(v672 + 23) & 0x10) != 0)
                    {
                      v681 = v674[7];
                      if (v681)
                      {
                        v682 = *(llvm::ValueSymbolTable **)(v681 + 104);
                        if (v682)
                          llvm::ValueSymbolTable::reinsertValue(v682, v673);
                      }
                    }
                    v675 = *v666;
                    *((_QWORD *)v673 + 3) = *v666;
                    *((_QWORD *)v673 + 4) = v666;
                    v676 = (_QWORD *)((char *)v673 + 24);
                    *(_QWORD *)(v675 + 8) = v676;
                    *v666 = (uint64_t)v676;
                    v665 = v658[1];
                  }
                  if (*(_QWORD *)v652)
                  {
                    **(_QWORD **)(v652 + 16) = *(_QWORD *)(v652 + 8);
                    v677 = *(_QWORD *)(v652 + 8);
                    if (v677)
                      *(_QWORD *)(v677 + 16) = *(_QWORD *)(v652 + 16);
                  }
                  *(_QWORD *)v652 = v665;
                  if (v665)
                  {
                    v680 = v665[1];
                    v678 = v665 + 1;
                    v679 = v680;
                    *v654 = v680;
                    if (v680)
                      *(_QWORD *)(v679 + 16) = v654;
                    *(_QWORD *)(v652 + 16) = v678;
                    *v678 = v652;
                  }
                  goto LABEL_964;
                }
                v664 = 0;
                goto LABEL_942;
              }
              v548 = v732;
              v547 = v733;
LABEL_973:
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v651 + 5), (uint64_t ***)v646);
              v683 = *((_QWORD *)v646 + 3);
              v684 = (_QWORD *)*((_QWORD *)v646 + 4);
              *v684 = v683;
              *(_QWORD *)(v683 + 8) = v684;
              *((_QWORD *)v646 + 3) = 0;
              *((_QWORD *)v646 + 4) = 0;
              llvm::Value::deleteValue(v646);
LABEL_974:
              MEMORY[0x1CAA32FB4](v776, 8);
              if (v762 != &v764)
                free(v762);
              v739 = 1;
            }
          }
        }
      }
LABEL_977:
      if (v591 == v590)
        goto LABEL_991;
    }
  }
LABEL_992:
  v688 = v749;
  v687 = (unint64_t *)v750;
  v690 = v751;
  v689 = HIDWORD(v751);
  if (v750 == (char *)v749)
    v691 = HIDWORD(v751);
  else
    v691 = v751;
  v692 = v750;
  if ((_DWORD)v691)
  {
    v693 = 0;
    while (*(_QWORD *)&v750[v693] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v693 += 8;
      if (8 * v691 == v693)
        goto LABEL_1017;
    }
    v692 = &v750[v693];
  }
  v694 = &v750[8 * v691];
  if (v692 != v694)
  {
    v695 = *(_QWORD *)v692;
LABEL_1003:
    v696 = *(_DWORD *)(v695 + 20);
    if ((v696 & 0x40000000) != 0)
    {
      v698 = *(_QWORD *)(v695 - 8);
      v697 = v696 & 0x7FFFFFF;
      if (!v697)
        goto LABEL_1010;
    }
    else
    {
      v697 = v696 & 0x7FFFFFF;
      v698 = v695 - 32 * v697;
      if (!v697)
        goto LABEL_1010;
    }
    v699 = 32 * v697;
    v700 = (_QWORD **)(v698 + 16);
    do
    {
      if (*(v700 - 2))
      {
        **v700 = *(v700 - 1);
        v701 = (uint64_t)*(v700 - 1);
        if (v701)
          *(_QWORD *)(v701 + 16) = *v700;
      }
      *(v700 - 2) = 0;
      v700 += 4;
      v699 -= 32;
    }
    while (v699);
LABEL_1010:
    v702 = (unint64_t *)(v692 + 8);
    while (v702 != (unint64_t *)v694)
    {
      v703 = *v702++;
      v695 = v703;
      if (v703 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v692 = (char *)(v702 - 1);
        goto LABEL_1003;
      }
    }
    v688 = v749;
    v687 = (unint64_t *)v750;
    v690 = v751;
    v689 = HIDWORD(v751);
  }
LABEL_1017:
  if (v687 == v688)
    v704 = v689;
  else
    v704 = v690;
  v705 = v687;
  if ((_DWORD)v704)
  {
    v706 = 0;
    while (v687[v706] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v704 == ++v706)
        goto LABEL_1033;
    }
    v705 = &v687[v706];
  }
  v707 = &v687[v704];
  if (v705 != v707)
  {
    v708 = *v705;
LABEL_1028:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v708 + 40) + 40, (uint64_t ***)v708);
    v709 = *(_QWORD *)(v708 + 24);
    v710 = *(_QWORD **)(v708 + 32);
    *v710 = v709;
    *(_QWORD *)(v709 + 8) = v710;
    *(_QWORD *)(v708 + 24) = 0;
    *(_QWORD *)(v708 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v708);
    v711 = v705 + 1;
    while (v711 != v707)
    {
      v712 = *v711++;
      v708 = v712;
      if (v712 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v705 = v711 - 1;
        goto LABEL_1028;
      }
    }
    v688 = v749;
    v687 = (unint64_t *)v750;
  }
LABEL_1033:
  if (v687 == v688)
    goto LABEL_1034;
  if (v751 < 0x21 || 4 * (HIDWORD(v751) - v752) >= v751)
  {
    memset(v687, 255, 8 * v751);
LABEL_1034:
    HIDWORD(v751) = 0;
    v752 = 0;
    goto LABEL_1035;
  }
  free(v687);
  v719 = 1 << (33 - __clz(HIDWORD(v751) - v752 - 1));
  v533 = (HIDWORD(v751) - v752) > 0x10;
  HIDWORD(v751) = 0;
  v752 = 0;
  if (v533)
    v720 = v719;
  else
    v720 = 32;
  LODWORD(v751) = v720;
  v721 = (char *)malloc_type_malloc(8 * v720, 0x4065EBACuLL);
  if (!v721)
LABEL_1064:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v750 = v721;
  memset(v721, 255, 8 * v751);
LABEL_1035:
  if (v773 != v775)
    free(v773);
  if (v750 != (char *)v749)
    free(v750);
  return v739 & 1;
}

uint64_t sub_1C4867220(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v10;
  char *v11;
  char *v12;
  llvm::Value *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  llvm::MDNode *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  _QWORD v31[4];
  __int16 v32;

  if (!*(_BYTE *)(a1 + 100))
  {
    v10 = sub_1C477422C((uint64_t *)a1, 21, (uint64_t)a2, a3, a5);
    if (v10)
      return (uint64_t)v10;
    v32 = 257;
    v11 = (char *)operator new(0x80uLL);
    v12 = v11;
    *((_QWORD *)v11 + 8) = *a2;
    v13 = (llvm::Value *)(v11 + 64);
    *((_QWORD *)v11 + 3) = v11 + 64;
    *((_QWORD *)v11 + 5) = 0;
    v14 = v11 + 40;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = v11 + 64;
    *((_QWORD *)v11 + 9) = 0;
    *((_QWORD *)v11 + 10) = 0x200000031;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_DWORD *)v11 + 30) = 0;
    *(_QWORD *)v11 = a2;
    v17 = a2[1];
    v16 = a2 + 1;
    v15 = v17;
    *((_QWORD *)v11 + 1) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v11 + 8;
    *((_QWORD *)v11 + 2) = v16;
    *v16 = v11;
    *((_QWORD *)v11 + 4) = a3;
    if (a3)
    {
      v20 = *(_QWORD *)(a3 + 8);
      v19 = (_QWORD *)(a3 + 8);
      v18 = v20;
      *v14 = v20;
      if (v20)
        *(_QWORD *)(v18 + 16) = v14;
      *((_QWORD *)v11 + 6) = v19;
      *v19 = v11 + 32;
    }
    llvm::Value::setName((uint64_t ***)v11 + 8, (uint64_t)v31);
    v21 = *(_BYTE *)(a4 + 17) & 0xFE;
    v22 = *(llvm::MDNode **)(a1 + 88);
    if (v22)
      llvm::Value::setMetadata(v13, 3, v22);
    v12[81] |= v21;
    (*(void (**)(_QWORD, llvm::Value *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v13, a5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v23 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v23)
      return (uint64_t)v13;
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD *)a1 + 16 * v23;
    while (1)
    {
      v27 = *(_DWORD *)v25;
      v28 = *(unsigned __int8 **)(v25 + 8);
      if (v28)
      {
        if (!v27)
        {
          v31[0] = *(_QWORD *)(v25 + 8);
          llvm::MetadataTracking::track((uint64_t)v31, v28, 2);
          v29 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
          goto LABEL_24;
        }
      }
      else
      {
        v29 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
        if (!v29 && (v12[87] & 0x20) == 0)
          goto LABEL_21;
        if (!v27)
        {
          v31[0] = 0;
LABEL_24:
          if (v29)
            llvm::MetadataTracking::untrack((uint64_t)(v12 + 112), v29);
          v30 = (unsigned __int8 *)v31[0];
          *((_QWORD *)v12 + 14) = v31[0];
          if (v30)
            llvm::MetadataTracking::retrack((uint64_t)v31, v30, (uint64_t)(v12 + 112));
          goto LABEL_21;
        }
      }
      llvm::Value::setMetadata(v13, *(_DWORD *)v25, (llvm::MDNode *)v28);
LABEL_21:
      v25 += 16;
      if (v25 == v26)
        return (uint64_t)v13;
    }
  }
  return llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 86, a2, a3, a4, a5, 0, 0, 0);
}

uint64_t sub_1C4867450(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v10;
  char *v11;
  char *v12;
  llvm::Value *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  llvm::MDNode *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  _QWORD v31[4];
  __int16 v32;

  if (!*(_BYTE *)(a1 + 100))
  {
    v10 = sub_1C477422C((uint64_t *)a1, 18, (uint64_t)a2, a3, a5);
    if (v10)
      return (uint64_t)v10;
    v32 = 257;
    v11 = (char *)operator new(0x80uLL);
    v12 = v11;
    *((_QWORD *)v11 + 8) = *a2;
    v13 = (llvm::Value *)(v11 + 64);
    *((_QWORD *)v11 + 3) = v11 + 64;
    *((_QWORD *)v11 + 5) = 0;
    v14 = v11 + 40;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = v11 + 64;
    *((_QWORD *)v11 + 9) = 0;
    *((_QWORD *)v11 + 10) = 0x20000002ELL;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_DWORD *)v11 + 30) = 0;
    *(_QWORD *)v11 = a2;
    v17 = a2[1];
    v16 = a2 + 1;
    v15 = v17;
    *((_QWORD *)v11 + 1) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v11 + 8;
    *((_QWORD *)v11 + 2) = v16;
    *v16 = v11;
    *((_QWORD *)v11 + 4) = a3;
    if (a3)
    {
      v20 = *(_QWORD *)(a3 + 8);
      v19 = (_QWORD *)(a3 + 8);
      v18 = v20;
      *v14 = v20;
      if (v20)
        *(_QWORD *)(v18 + 16) = v14;
      *((_QWORD *)v11 + 6) = v19;
      *v19 = v11 + 32;
    }
    llvm::Value::setName((uint64_t ***)v11 + 8, (uint64_t)v31);
    v21 = *(_BYTE *)(a4 + 17) & 0xFE;
    v22 = *(llvm::MDNode **)(a1 + 88);
    if (v22)
      llvm::Value::setMetadata(v13, 3, v22);
    v12[81] |= v21;
    (*(void (**)(_QWORD, llvm::Value *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v13, a5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v23 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v23)
      return (uint64_t)v13;
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD *)a1 + 16 * v23;
    while (1)
    {
      v27 = *(_DWORD *)v25;
      v28 = *(unsigned __int8 **)(v25 + 8);
      if (v28)
      {
        if (!v27)
        {
          v31[0] = *(_QWORD *)(v25 + 8);
          llvm::MetadataTracking::track((uint64_t)v31, v28, 2);
          v29 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
          goto LABEL_24;
        }
      }
      else
      {
        v29 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
        if (!v29 && (v12[87] & 0x20) == 0)
          goto LABEL_21;
        if (!v27)
        {
          v31[0] = 0;
LABEL_24:
          if (v29)
            llvm::MetadataTracking::untrack((uint64_t)(v12 + 112), v29);
          v30 = (unsigned __int8 *)v31[0];
          *((_QWORD *)v12 + 14) = v31[0];
          if (v30)
            llvm::MetadataTracking::retrack((uint64_t)v31, v30, (uint64_t)(v12 + 112));
          goto LABEL_21;
        }
      }
      llvm::Value::setMetadata(v13, *(_DWORD *)v25, (llvm::MDNode *)v28);
LABEL_21:
      v25 += 16;
      if (v25 == v26)
        return (uint64_t)v13;
    }
  }
  return llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 89, a2, a3, a4, a5, 0, 0, 0);
}

uint64_t sub_1C4867680(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v10;
  char *v11;
  char *v12;
  llvm::Value *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  llvm::MDNode *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  _QWORD v31[4];
  __int16 v32;

  if (!*(_BYTE *)(a1 + 100))
  {
    v10 = sub_1C477422C((uint64_t *)a1, 16, (uint64_t)a2, a3, a5);
    if (v10)
      return (uint64_t)v10;
    v32 = 257;
    v11 = (char *)operator new(0x80uLL);
    v12 = v11;
    *((_QWORD *)v11 + 8) = *a2;
    v13 = (llvm::Value *)(v11 + 64);
    *((_QWORD *)v11 + 3) = v11 + 64;
    *((_QWORD *)v11 + 5) = 0;
    v14 = v11 + 40;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = v11 + 64;
    *((_QWORD *)v11 + 9) = 0;
    *((_QWORD *)v11 + 10) = 0x20000002CLL;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_DWORD *)v11 + 30) = 0;
    *(_QWORD *)v11 = a2;
    v17 = a2[1];
    v16 = a2 + 1;
    v15 = v17;
    *((_QWORD *)v11 + 1) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v11 + 8;
    *((_QWORD *)v11 + 2) = v16;
    *v16 = v11;
    *((_QWORD *)v11 + 4) = a3;
    if (a3)
    {
      v20 = *(_QWORD *)(a3 + 8);
      v19 = (_QWORD *)(a3 + 8);
      v18 = v20;
      *v14 = v20;
      if (v20)
        *(_QWORD *)(v18 + 16) = v14;
      *((_QWORD *)v11 + 6) = v19;
      *v19 = v11 + 32;
    }
    llvm::Value::setName((uint64_t ***)v11 + 8, (uint64_t)v31);
    v21 = *(_BYTE *)(a4 + 17) & 0xFE;
    v22 = *(llvm::MDNode **)(a1 + 88);
    if (v22)
      llvm::Value::setMetadata(v13, 3, v22);
    v12[81] |= v21;
    (*(void (**)(_QWORD, llvm::Value *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v13, a5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v23 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v23)
      return (uint64_t)v13;
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD *)a1 + 16 * v23;
    while (1)
    {
      v27 = *(_DWORD *)v25;
      v28 = *(unsigned __int8 **)(v25 + 8);
      if (v28)
      {
        if (!v27)
        {
          v31[0] = *(_QWORD *)(v25 + 8);
          llvm::MetadataTracking::track((uint64_t)v31, v28, 2);
          v29 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
          goto LABEL_25;
        }
      }
      else
      {
        v29 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
        if (!v29 && (v12[87] & 0x20) == 0)
          goto LABEL_21;
        if (!v27)
        {
          v31[0] = 0;
LABEL_25:
          if (v29)
            llvm::MetadataTracking::untrack((uint64_t)(v12 + 112), v29);
          v30 = (unsigned __int8 *)v31[0];
          *((_QWORD *)v12 + 14) = v31[0];
          if (v30)
            llvm::MetadataTracking::retrack((uint64_t)v31, v30, (uint64_t)(v12 + 112));
          goto LABEL_21;
        }
      }
      llvm::Value::setMetadata(v13, *(_DWORD *)v25, (llvm::MDNode *)v28);
LABEL_21:
      v25 += 16;
      if (v25 == v26)
        return (uint64_t)v13;
    }
  }
  return llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 96, a2, a3, a4, a5, 0, 0, 0);
}

uint64_t ***sub_1C48678B0(uint64_t *a1, llvm::GetElementPtrInst *a2, _QWORD *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9;
  llvm::ConstantInt *v10;
  unint64_t v11;
  int v12;
  llvm::ValueHandleBase *v13;
  uint64_t v14;
  char *v15;
  uint64_t ***v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  __int16 v34;
  llvm::ValueHandleBase *v35;
  unsigned __int8 *v36;

  v9 = *(_QWORD *)a1[8];
  v10 = *(llvm::ConstantInt **)(v9 + 1960);
  v11 = *(unsigned int *)(v9 + 1968);
  v33 = v11 >> 8;
  if (v11 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v32, a4, 0);
  }
  else
  {
    if (v11 <= 0xFF)
      v12 = 0;
    else
      v12 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11);
    v32 = v12 & a4;
  }
  v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v32, (const llvm::APInt *)a3);
  if (v33 >= 0x41 && v32)
    MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
  v35 = v13;
  v14 = (*(uint64_t (**)(uint64_t, llvm::GetElementPtrInst *, _QWORD *, llvm::ValueHandleBase **, uint64_t, _QWORD))(*(_QWORD *)a1[9] + 48))(a1[9], a2, a3, &v35, 1, 0);
  if (v14)
    return (uint64_t ***)v14;
  v34 = 257;
  v15 = (char *)operator new(0x90uLL);
  *((_DWORD *)v15 + 21) = *((_DWORD *)v15 + 21) & 0x38000000 | 2;
  v16 = (uint64_t ***)(v15 + 64);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *((_QWORD *)v15 + 3) = v15 + 64;
  *((_QWORD *)v15 + 4) = 0;
  *((_QWORD *)v15 + 5) = 0;
  *((_QWORD *)v15 + 6) = 0;
  *((_QWORD *)v15 + 7) = v15 + 64;
  sub_1C4774650(a2, a3, (llvm::Value *)&v35, 1);
  *((_QWORD *)v15 + 8) = v17;
  *((_QWORD *)v15 + 9) = 0;
  v18 = *((_DWORD *)v15 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v15 + 20) = 62;
  *((_DWORD *)v15 + 21) = v18;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *((_DWORD *)v15 + 30) = 0;
  v19 = *(_QWORD *)v15;
  *((_QWORD *)v15 + 16) = a2;
  *((_QWORD *)v15 + 17) = a2;
  if (v19)
  {
    **((_QWORD **)v15 + 2) = *((_QWORD *)v15 + 1);
    v31 = *((_QWORD *)v15 + 1);
    if (v31)
      *(_QWORD *)(v31 + 16) = *((_QWORD *)v15 + 2);
  }
  *(_QWORD *)v15 = a3;
  if (a3)
  {
    v22 = a3[1];
    v21 = a3 + 1;
    v20 = v22;
    *((_QWORD *)v15 + 1) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = v15 + 8;
    *((_QWORD *)v15 + 2) = v21;
    *v21 = v15;
  }
  sub_1C5382FD4((uint64_t)&v36, (uint64_t *)&v35, (uint64_t *)&v36, (uint64_t)&v16[-4 * (*((_DWORD *)v15 + 21) & 0x7FFFFFF) + 4]);
  llvm::Value::setName(v16, (uint64_t)&v32);
  (*(void (**)(uint64_t, uint64_t ***, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v16, a5, a1[6], a1[7]);
  v23 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v23)
  {
    v25 = *a1;
    v26 = *a1 + 16 * v23;
    do
    {
      v27 = *(_DWORD *)v25;
      v28 = *(unsigned __int8 **)(v25 + 8);
      if (v28)
      {
        if (!v27)
        {
          v36 = *(unsigned __int8 **)(v25 + 8);
          llvm::MetadataTracking::track((uint64_t)&v36, v28, 2);
          v29 = (unsigned __int8 *)*((_QWORD *)v15 + 14);
          goto LABEL_26;
        }
      }
      else
      {
        v29 = (unsigned __int8 *)*((_QWORD *)v15 + 14);
        if (!v29 && (v15[87] & 0x20) == 0)
          goto LABEL_23;
        if (!v27)
        {
          v36 = 0;
LABEL_26:
          if (v29)
            llvm::MetadataTracking::untrack((uint64_t)(v15 + 112), v29);
          v30 = v36;
          *((_QWORD *)v15 + 14) = v36;
          if (v30)
            llvm::MetadataTracking::retrack((uint64_t)&v36, v30, (uint64_t)(v15 + 112));
          goto LABEL_23;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v16, *(_DWORD *)v25, (llvm::MDNode *)v28);
LABEL_23:
      v25 += 16;
    }
    while (v25 != v26);
  }
  return v16;
}

uint64_t ***sub_1C4867B70(uint64_t *a1, llvm::GetElementPtrInst *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t ***v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  _QWORD v30[4];
  __int16 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v28 = a4;
  v9 = a1[9];
  v30[0] = a4;
  v10 = (*(uint64_t (**)(uint64_t, llvm::GetElementPtrInst *, uint64_t *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v9 + 48))(v9, a2, a3, v30, 1, 0);
  if (v10)
    return (uint64_t ***)v10;
  v31 = 257;
  v11 = (char *)operator new(0x90uLL);
  *((_DWORD *)v11 + 21) = *((_DWORD *)v11 + 21) & 0x38000000 | 2;
  v12 = (uint64_t ***)(v11 + 64);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = v11 + 64;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 7) = v11 + 64;
  sub_1C4774650(a2, a3, (llvm::Value *)&v28, 1);
  *((_QWORD *)v11 + 8) = v13;
  *((_QWORD *)v11 + 9) = 0;
  v14 = *((_DWORD *)v11 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v11 + 20) = 62;
  *((_DWORD *)v11 + 21) = v14;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *((_DWORD *)v11 + 30) = 0;
  v15 = *(_QWORD *)v11;
  *((_QWORD *)v11 + 16) = a2;
  *((_QWORD *)v11 + 17) = a2;
  if (v15)
  {
    **((_QWORD **)v11 + 2) = *((_QWORD *)v11 + 1);
    v27 = *((_QWORD *)v11 + 1);
    if (v27)
      *(_QWORD *)(v27 + 16) = *((_QWORD *)v11 + 2);
  }
  *(_QWORD *)v11 = a3;
  if (a3)
  {
    v18 = a3[1];
    v17 = a3 + 1;
    v16 = v18;
    *((_QWORD *)v11 + 1) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = v11 + 8;
    *((_QWORD *)v11 + 2) = v17;
    *v17 = v11;
  }
  sub_1C5382FD4((uint64_t)&v29, &v28, (uint64_t *)&v29, (uint64_t)&v12[-4 * (*((_DWORD *)v11 + 21) & 0x7FFFFFF) + 4]);
  llvm::Value::setName(v12, (uint64_t)v30);
  (*(void (**)(uint64_t, uint64_t ***, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v12, a5, a1[6], a1[7]);
  v19 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v19)
  {
    v21 = *a1;
    v22 = *a1 + 16 * v19;
    do
    {
      v23 = *(_DWORD *)v21;
      v24 = *(unsigned __int8 **)(v21 + 8);
      if (v24)
      {
        if (!v23)
        {
          v29 = *(unsigned __int8 **)(v21 + 8);
          llvm::MetadataTracking::track((uint64_t)&v29, v24, 2);
          v25 = (unsigned __int8 *)*((_QWORD *)v11 + 14);
          goto LABEL_20;
        }
      }
      else
      {
        v25 = (unsigned __int8 *)*((_QWORD *)v11 + 14);
        if (!v25 && (v11[87] & 0x20) == 0)
          goto LABEL_17;
        if (!v23)
        {
          v29 = 0;
LABEL_20:
          if (v25)
            llvm::MetadataTracking::untrack((uint64_t)(v11 + 112), v25);
          v26 = v29;
          *((_QWORD *)v11 + 14) = v29;
          if (v26)
            llvm::MetadataTracking::retrack((uint64_t)&v29, v26, (uint64_t)(v11 + 112));
          goto LABEL_17;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v12, *(_DWORD *)v21, (llvm::MDNode *)v24);
LABEL_17:
      v21 += 16;
    }
    while (v21 != v22);
  }
  return v12;
}

unsigned __int8 **sub_1C4867DC8(uint64_t *a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;

  v4 = (char *)operator new(0x60uLL);
  *((_DWORD *)v4 + 13) = *((_DWORD *)v4 + 13) & 0x38000000 | 1;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 4) = ***(_QWORD ***)a2 + 1576;
  *((_QWORD *)v4 + 3) = v4 + 32;
  *((_QWORD *)v4 + 5) = 0;
  v4[48] = 30;
  v4[49] = 0;
  *((_WORD *)v4 + 25) = 0;
  *((_DWORD *)v4 + 13) = 1;
  *((_DWORD *)v4 + 22) = 0;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  v5 = (_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v4 = a2;
  *((_QWORD *)v4 + 1) = v6;
  if (v6)
    *(_QWORD *)(v6 + 16) = v4 + 8;
  *((_QWORD *)v4 + 2) = v5;
  *v5 = v4;
  v9 = 257;
  return sub_1C4867F8C(a1, (unsigned __int8 **)v4 + 4, (uint64_t)v8);
}

uint64_t sub_1C4867E94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  llvm::Value *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  llvm::MDNode *v14;
  _BYTE v16[32];
  __int16 v17;

  v17 = 257;
  v8 = operator new(0x48uLL);
  v8[1] = a2;
  v9 = (llvm::Value *)(v8 + 1);
  *v8 = 0;
  v8[2] = 0;
  v8[3] = 0x4000000000000053;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_DWORD *)v8 + 16) = 0;
  *((_DWORD *)v8 + 17) = a3;
  llvm::Value::setName((uint64_t ***)v8 + 1, (uint64_t)v16);
  v10 = *((unsigned int *)v8 + 17);
  v11 = operator new(40 * v10);
  *v8 = v11;
  if ((_DWORD)v10)
  {
    v12 = &v11[4 * v10];
    do
    {
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      v11[3] = v9;
      v11 += 4;
    }
    while (v11 != v12);
  }
  if (sub_1C4774A9C((uint64_t)v9))
  {
    v13 = *(_DWORD *)(a1 + 96);
    v14 = *(llvm::MDNode **)(a1 + 88);
    if (v14)
      llvm::Value::setMetadata(v9, 3, v14);
    *((_BYTE *)v8 + 25) |= 2 * (_BYTE)v13;
  }
  return sub_1C477438C((uint64_t *)a1, (uint64_t)v9, a4);
}

unsigned __int8 **sub_1C4867F8C(uint64_t *a1, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, unsigned __int8 **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], a2, a3, a1[6], a1[7]);
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v7 = *a1;
    v8 = v7 + 16 * v5;
    do
    {
      llvm::Instruction::setMetadata(a2, *(_DWORD *)v7, *(llvm::MDNode **)(v7 + 8));
      v7 += 16;
    }
    while (v7 != v8);
  }
  return a2;
}

uint64_t sub_1C4867FFC(int32x2_t *a1, _QWORD *a2)
{
  __int32 v2;
  int32x2_t v4;
  __int32 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;

  v2 = a1[2].i32[0];
  if (v2)
  {
    v4 = *a1;
    v5 = v2 - 1;
    LODWORD(v6) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v2 - 1);
    v7 = (uint64_t *)(*(_QWORD *)a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
LABEL_7:
      sub_1C48680A4(v7 + 1);
      *v7 = -8192;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
      return 1;
    }
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & v5;
      v8 = *(_QWORD *)(*(_QWORD *)&v4 + 16 * v6);
      if (*a2 == v8)
      {
        v7 = (uint64_t *)(*(_QWORD *)&v4 + 16 * v6);
        goto LABEL_7;
      }
    }
  }
  return 0;
}

uint64_t *sub_1C48680A4(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 24);
    if (v3 != (void *)(v2 + 40))
      free(v3);
    MEMORY[0x1CAA32FC0](v2, 0x10A0C40528A66C4);
  }
  return a1;
}

uint64_t sub_1C48680FC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX2 Specific CodeGen Prepare CFGMod";
  *(_QWORD *)(v2 + 8) = 36;
  *(_QWORD *)(v2 + 16) = "agx2-codegen-prepare-cfgmod";
  *(_QWORD *)(v2 + 24) = 27;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EF718;
  *(_WORD *)(v2 + 40) = 1;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4868190;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4868190()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8EF718;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E7F9F850;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

void sub_1C48681E0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4868204()
{
  return "AGX2 Specific CodeGen Prepare: CFG Modifying Part";
}

uint64_t sub_1C4868214(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  llvm::ValueAsMetadata *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  int v15;
  llvm::ValueAsMetadata *v16;
  uint64_t v17;
  BOOL v18;
  unsigned int *v19;
  llvm::Value *ScalarElement;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  llvm::ValueHandleBase *v38;
  uint64_t v39;
  const llvm::APInt *v40;
  char v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  _BYTE *v58;
  _QWORD *v59;
  _BYTE *v60;
  int v61;
  int v62;
  int v64;
  uint64_t v65;
  unsigned int v66;
  int v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  char v72;
  _QWORD *v73;
  uint64_t v74;
  llvm::ConstantInt *v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  BOOL v84;
  uint64_t v85;
  llvm::UndefValue **v86;
  llvm::Type *v87;
  const llvm::APInt *v88;
  uint64_t *v89;
  llvm::UndefValue *v90;
  int8x8_t *v91;
  void **v92;
  uint8x8_t v93;
  __int32 v94;
  llvm::ConstantInt *v95;
  llvm::ValueHandleBase *v96;
  unsigned int v97;
  int v98;
  llvm::UndefValue *v99;
  uint64_t v100;
  uint64_t **v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  int v106;
  uint64_t m;
  uint64_t v108;
  uint64_t v109;
  int v110;
  BOOL v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  llvm *v119;
  int v120;
  char v121;
  unsigned __int8 *UnderlyingObject;
  llvm::GlobalValue *Section;
  uint64_t v124;
  unsigned int *v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  _DWORD *v139;
  int v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  int8x8_t v145;
  uint8x8_t v146;
  _QWORD *v147;
  uint64_t v148;
  int v149;
  _BOOL4 v151;
  uint64_t *v152;
  uint64_t v153;
  llvm::PointerType *v154;
  uint64_t v155;
  const llvm::APInt *v156;
  llvm::ConstantInt *v157;
  unsigned int v158;
  unint64_t v159;
  llvm::ValueHandleBase *v160;
  uint64_t *v161;
  char *v162;
  uint64_t *v163;
  void *v164;
  llvm::PointerType *v165;
  unsigned __int8 **v166;
  void *v167;
  void *v168;
  uint64_t Declaration;
  char v170;
  char v171;
  char *v172;
  char *v173;
  unsigned __int8 ***v174;
  llvm::Value *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unsigned __int8 ****v179;
  unsigned __int8 *v180;
  char v181;
  unsigned __int8 *v182;
  uint64_t **v183;
  llvm::Value *v184;
  unsigned int *v185;
  char *v186;
  unsigned __int8 **v187;
  int v188;
  unsigned __int8 *v189;
  unsigned __int8 *v190;
  unsigned int *v191;
  char *v192;
  unsigned int *v193;
  char *v194;
  unsigned __int8 *v195;
  unsigned int *v196;
  char *v197;
  uint64_t v198;
  uint64_t **v199;
  llvm::Value *v200;
  const llvm::APInt *v201;
  unsigned int *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  llvm::ValueAsMetadata *v208;
  uint64_t v209;
  llvm::ConstantInt *v210;
  unsigned int v211;
  unint64_t v212;
  llvm::ValueHandleBase *v213;
  unsigned __int8 *v214;
  uint64_t v215;
  uint64_t v216;
  BOOL v217;
  uint64_t v218;
  llvm::ConstantInt *v219;
  unsigned int v220;
  unint64_t v221;
  llvm::ValueHandleBase *v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  _QWORD **v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  _QWORD *v232;
  uint64_t **v233;
  _QWORD *v234;
  int v235;
  llvm::UndefValue *v236;
  llvm::FixedVectorType ***v237;
  uint64_t v238;
  llvm::ConstantDataSequential *Impl;
  _QWORD **v240;
  int k;
  uint64_t v242;
  llvm::ConstantInt *v243;
  unsigned int v244;
  unint64_t v245;
  llvm::ValueHandleBase *v246;
  uint64_t v247;
  _BYTE *v248;
  uint64_t v249;
  uint64_t *v250;
  char *v251;
  void *v252;
  llvm::PointerType **v253;
  void *v254;
  llvm::PointerType *v255;
  void *v256;
  void *v257;
  unsigned __int8 *v258;
  uint64_t v259;
  uint64_t **v260;
  _QWORD *v261;
  const char *v262;
  int v263;
  int v264;
  llvm::PointerType *v265;
  uint64_t v266;
  unsigned __int8 *v267;
  char v268;
  char v269;
  char *v270;
  char *v271;
  unsigned __int8 *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  char v276;
  unsigned __int8 *v277;
  unsigned int *v278;
  char *v279;
  unsigned __int8 **v280;
  int v281;
  unsigned __int8 *v282;
  unsigned __int8 *v283;
  unsigned __int8 *v284;
  _DWORD *v285;
  _DWORD *v286;
  int v287;
  uint64_t v288;
  unint64_t *v289;
  unint64_t *v290;
  unsigned int v291;
  unsigned int v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  char *v296;
  unint64_t v297;
  int v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  _QWORD **v302;
  uint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t *v307;
  uint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  unint64_t *v313;
  unint64_t v314;
  int v315;
  int v318;
  BOOL v319;
  unsigned int v320;
  char *v321;
  llvm::ConstantInt *v322;
  llvm::ValueHandleBase *v323;
  uint64_t v324;
  unsigned int v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  void **v329;
  uint64_t v330;
  unsigned int v331;
  int v332;
  llvm::UndefValue **v333;
  unsigned __int8 *v334;
  void *v335;
  int v336;
  unsigned int *v337;
  int v338;
  uint64_t v339;
  char v340;
  uint64_t v341;
  uint64_t v342;
  unsigned __int8 **v343;
  unsigned __int8 **v344;
  unsigned __int8 **v345;
  uint64_t v346;
  __int16 v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  int v351;
  char v352;
  uint64_t v353;
  uint64_t v354;
  llvm::UndefValue **v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _BYTE *v359;
  unsigned int *v360;
  unsigned int v361;
  uint64_t *v362;
  uint64_t v363;
  uint64_t v364;
  unsigned __int8 **v365;
  unsigned int v366;
  uint64_t v367;
  uint64_t *v368;
  void *v369;
  unsigned int *j;
  uint64_t v371;
  uint64_t v372;
  unint64_t *v373;
  char *v374;
  uint64_t v375;
  int v376;
  _BYTE v377[64];
  unint64_t v378;
  unsigned int v379;
  __int16 v380;
  unint64_t **v381;
  void *v382;
  uint64_t v383;
  _QWORD v384[2];
  __int16 v385;
  void *v386;
  uint64_t v387;
  _BYTE v388[16];
  __int16 v389;
  void *v390;
  uint64_t v391;
  _BYTE v392[16];
  __int16 v393;
  uint64_t v394;
  void *v395;
  uint64_t v396;
  _QWORD v397[2];
  __int16 v398;
  unsigned int *v399;
  uint64_t v400;
  _BYTE v401[32];
  uint64_t v402;
  _QWORD *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;

  v2 = a2;
  v406 = *MEMORY[0x1E0C80C00];
  v373 = (unint64_t *)v377;
  v374 = v377;
  v375 = 8;
  v376 = 0;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v338 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v3 + 16))(*(_QWORD *)(a1 + 32), a2)+ 327);
    v4 = 256;
  }
  else
  {
    v338 = 0;
    v4 = 0;
  }
  v5 = *(_QWORD *)(v2 + 80);
  v358 = v2 + 72;
  if (v5 != v2 + 72)
  {
    v339 = v3;
    v6 = 0;
    v347 = v4 | v338;
    v348 = v2;
    while (1)
    {
      v7 = v5 - 24;
      v372 = v5;
      if (!v5)
        v7 = 0;
      v8 = (_QWORD *)(v7 + 40);
      v9 = *(_QWORD **)(v7 + 48);
      if (v9 != (_QWORD *)(v7 + 40))
        break;
LABEL_470:
      v5 = *(_QWORD *)(v372 + 8);
      if (v5 == v358)
        goto LABEL_473;
    }
    while (1)
    {
      v10 = (_QWORD *)v9[1];
      v11 = (llvm::ValueAsMetadata *)(v9 - 3);
      v12 = v9 ? (uint64_t)(v9 - 3) : 0;
      v13 = (char *)sub_1C477672C((uint64_t)&v373, v12);
      v14 = v374 == (char *)v373 ? (uint64_t *)((char *)&v375 + 4) : &v375;
      if (v13 == &v374[8 * *(unsigned int *)v14])
      {
        v15 = *(unsigned __int8 *)(v12 + 16);
        if (v15 == 89)
          v16 = (llvm::ValueAsMetadata *)v12;
        else
          v16 = 0;
        if (v9 && v15 == 89)
        {
          v17 = *((_QWORD *)v16 - 4);
          if (v17)
            v18 = *(_BYTE *)(v17 + 16) == 16;
          else
            v18 = 0;
          if (!v18)
            goto LABEL_30;
          v19 = (unsigned int *)(v17 + 24);
          if (*(_DWORD *)(v17 + 32) >= 0x41u)
            v19 = *(unsigned int **)v19;
          ScalarElement = llvm::findScalarElement(*((llvm **)v16 - 8), (llvm::Value *)*v19);
          if (ScalarElement)
          {
            v21 = 1;
            llvm::Value::doRAUW(v16, ScalarElement, (llvm::Value *)1);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v373, (uint64_t)v16);
          }
          else
          {
LABEL_30:
            v21 = 0;
          }
          v6 |= v21;
          v15 = *(unsigned __int8 *)(v12 + 16);
        }
        if (v15 == 84)
        {
          v22 = *(_QWORD *)(v12 - 32);
          if (v22)
          {
            if (!*(_BYTE *)(v22 + 16)
              && *(_QWORD *)(v22 + 24) == *(_QWORD *)(v12 + 72)
              && (*(_BYTE *)(v22 + 33) & 0x20) != 0)
            {
              break;
            }
          }
        }
      }
LABEL_440:
      v9 = v10;
      if (v10 == v8)
        goto LABEL_470;
    }
    v23 = *(_QWORD *)(v2 + 80);
    if (v23)
      v24 = v23 - 24;
    else
      v24 = 0;
    v25 = *(_DWORD *)(*(v9 - 7) + 36);
    v351 = v6;
    v349 = v24;
    if ((v25 - 2426) >= 0x10)
    {
      if ((v25 - 2687) > 0xF)
      {
        v115 = 0;
        goto LABEL_439;
      }
      v26 = (uint64_t *)((char *)v11 - 32 * (*((_DWORD *)v9 - 1) & 0x7FFFFFF));
      v27 = v26[8];
      v28 = *(unsigned __int8 *)(v27 + 16);
      v381 = &v373;
      v29 = (_DWORD *)*v26;
      v30 = (uint64_t *)(*v26 + 24);
      if (v29[8] >= 0x41u)
        v30 = (uint64_t *)*v30;
      v31 = *v30;
      sub_1C486A690(*v30, v347);
      if (v28 < 0x1C)
        goto LABEL_45;
      v44 = 0xFFFFFFFFLL;
      while (1)
      {
        v45 = *(unsigned __int8 *)(v27 + 16);
        if (v45 == 77)
        {
          v51 = *(_QWORD *)(v27 + 8);
          if (!v51)
            goto LABEL_45;
          if (*(_QWORD *)(v51 + 8))
            goto LABEL_45;
          v27 = *(_QWORD *)(v27 - 32);
          if (*(unsigned __int8 *)(v27 + 16) < 0x1Cu)
            goto LABEL_45;
          goto LABEL_74;
        }
        if (v45 != 89)
          break;
        v46 = *(_QWORD *)(v27 + 8);
        if (!v46)
          goto LABEL_45;
        if (*(_QWORD *)(v46 + 8) || v44 != 0xFFFFFFFFLL)
          goto LABEL_45;
        v48 = *(_QWORD *)(v27 - 64);
        if (*(unsigned __int8 *)(v48 + 16) <= 0x1Bu)
          v48 = 0;
        v49 = *(_QWORD *)(v27 - 32);
        v50 = (unsigned int *)(v49 + 24);
        if (*(_DWORD *)(v49 + 32) >= 0x41u)
          v50 = *(unsigned int **)v50;
        v44 = *v50;
        v27 = v48;
LABEL_74:
        if (!v27)
          goto LABEL_45;
      }
      if (v45 != 60)
        goto LABEL_45;
      if (v339)
      {
        v110 = 1 << v31;
        v111 = (_DWORD)v31 != 14 || v338 == 0;
        v112 = v111 ? 2 : 4;
        v113 = (v110 & 0xB104) != 0 ? 4 : 1;
        v114 = (v110 & 0x40CA) != 0 ? v112 : v113;
      }
      else
      {
        v116 = (int)v31;
        v117 = *(_DWORD *)((char *)&unk_1C6464B3C + v116 * 4);
        v114 = dword_1C6464B7C[v116];
        if (v117 > v114)
          v114 = v117;
      }
      if (v114 > (1 << ((unint64_t)*(unsigned __int16 *)(v27 + 18) >> 1)))
        goto LABEL_45;
      v367 = v31;
      v399 = (unsigned int *)v401;
      v400 = 0x800000000;
      sub_1C486AA08((_QWORD *)v27, (uint64_t)&v399);
      v395 = v397;
      v396 = 0x400000000;
      v118 = sub_1C486A4CC(*(_DWORD *)(*(v9 - 7) + 36));
      v353 = ((_QWORD *)v11 - 4 * (*((_DWORD *)v9 - 1) & 0x7FFFFFF))[4];
      v119 = *(llvm **)(v27 - 32);
      v120 = *(_DWORD *)(*(_QWORD *)v119 + 8);
      if ((v120 & 0xFE) == 0x12)
        v120 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v119 + 16) + 8);
      if ((v120 & 0xFFFFFF00) == 0x4000
        || (v328 = *(_QWORD *)v119, v332 = v118, (v120 & 0xFFFFFF00) == 0x300)
        && (UnderlyingObject = (unsigned __int8 *)llvm::getUnderlyingObject(v119, (const llvm::Value *)6),
            UnderlyingObject[16] <= 3u)
        && ((Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)UnderlyingObject), v124 != 8)
         || *(_QWORD *)Section != 0x6C61636F6C5F6C63))
      {
        v121 = 0;
        v6 = v351;
        goto LABEL_407;
      }
      v334 = (unsigned __int8 *)v119;
      if (v44 == 0xFFFFFFFFLL || !(_DWORD)v400)
      {
        v133 = v396;
        v127 = v367;
      }
      else
      {
        v125 = v399;
        v126 = &v399[4 * v400];
        v127 = v367;
        while (1)
        {
          v128 = *(_QWORD *)(*(_QWORD *)v125 + 24);
          if (*(_BYTE *)(v128 + 16) != 84)
            break;
          v129 = *(_QWORD *)(v128 - 32);
          if (!v129
            || *(_BYTE *)(v129 + 16)
            || *(_QWORD *)(v129 + 24) != *(_QWORD *)(v128 + 72)
            || (*(_BYTE *)(v129 + 33) & 0x20) == 0
            || *(_DWORD *)(v129 + 36) != *(_DWORD *)(*(v9 - 7) + 36))
          {
            break;
          }
          v130 = v125[2];
          v131 = v396;
          if (v396 >= (unint64_t)HIDWORD(v396))
          {
            v360 = v126;
            v341 = v125[2];
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v395, (uint64_t)v397, v396 + 1, 16);
            v130 = v341;
            v126 = v360;
            v127 = v367;
            v131 = v396;
          }
          v132 = (char *)v395 + 16 * v131;
          *v132 = v128;
          v132[1] = v130;
          v133 = v396 + 1;
          LODWORD(v396) = v396 + 1;
          v125 += 4;
          if (v125 == v126)
            goto LABEL_246;
        }
        v133 = 0;
        LODWORD(v396) = 0;
      }
LABEL_246:
      v134 = (unsigned int *)(v353 + 24);
      if (*(_DWORD *)(v353 + 32) >= 0x41u)
        v134 = *(unsigned int **)v134;
      if (v133)
      {
        v135 = 0;
        v136 = 0;
        v137 = *v134;
        v138 = 16 * v133;
        v139 = (char *)v395 + 8;
        v330 = v137;
        while (1)
        {
          v140 = 1 << *v139;
          v141 = *((_QWORD *)v139 - 1);
          v142 = (uint64_t *)(v141 - 32 * (*(_DWORD *)(v141 + 20) & 0x7FFFFFF));
          v143 = *v142;
          v144 = v142[4];
          v145 = *(_DWORD *)(v144 + 32) > 0x40u ? **(int8x8_t **)(v144 + 24) : *(int8x8_t *)(v144 + 24);
          v146 = (uint8x8_t)vcnt_s8(v145);
          v146.i16[0] = vaddlv_u8(v146);
          v135 += v146.i32[0];
          if ((v140 & v136) != 0 || *(_QWORD *)&v145 != v137)
            break;
          v147 = (_QWORD *)(v143 + 24);
          if (*(_DWORD *)(v143 + 32) >= 0x41u)
            v147 = (_QWORD *)*v147;
          if (*v147 != v127)
            break;
          v148 = *(_QWORD *)(v141 + 8);
          if ((!v148 || *(_QWORD *)(v148 + 8)) && (*(_DWORD *)(*(_QWORD *)v141 + 8) & 0xFE) == 0x12)
          {
            v361 = v135;
            v342 = v138;
            v336 = 1 << *v139;
            v149 = sub_1C5EA6FF8(v141);
            v140 = v336;
            v138 = v342;
            v137 = v330;
            v135 = v361;
            v127 = v367;
            if (!v149)
              break;
          }
          v136 |= v140;
          v139 += 4;
          v138 -= 16;
          if (!v138)
          {
            v151 = v136 == ~(-1 << v400) && v135 < 5;
            goto LABEL_270;
          }
        }
      }
      v151 = 0;
LABEL_270:
      sub_1C4773D54((uint64_t)&v390, v27, 0, 0, 0);
      v152 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v27 + 40) + 56) + 40);
      if (!v151 && v44 != 0xFFFFFFFFLL)
      {
        v121 = 0;
        v153 = *(_QWORD *)v27;
        if (*(_QWORD *)v27)
        {
          v6 = v351;
          if ((*(_DWORD *)(v153 + 8) & 0xFE) == 0x12)
          {
            v368 = v152;
            v154 = *(llvm::PointerType **)(v153 + 24);
            v155 = llvm::PointerType::get(v154, (llvm::Type *)(*(_DWORD *)(v328 + 8) >> 8));
            v389 = 257;
            v362 = (uint64_t *)sub_1C4773E38((uint64_t *)&v390, 49, v334, v155, (uint64_t)&v386);
            v157 = *(llvm::ConstantInt **)(*(_QWORD *)v394 + 1984);
            v158 = *(_DWORD *)(*(_QWORD *)v394 + 1992);
            LODWORD(v387) = v158 >> 8;
            if (v158 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v386, v44, 0);
            }
            else
            {
              if (v158 <= 0xFF)
                v159 = 0;
              else
                v159 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v158);
              v386 = (void *)(v159 & v44);
            }
            v160 = llvm::ConstantInt::get(v157, (llvm::LLVMContext *)&v386, v156);
            if (v387 >= 0x41 && v386)
              MEMORY[0x1CAA32F9C](v386, 0x1000C8000313F17);
            v389 = 257;
            v334 = (unsigned __int8 *)sub_1C4867B70((uint64_t *)&v390, v154, v362, (uint64_t)v160, (uint64_t)&v386);
            v6 = v351;
            v152 = v368;
            goto LABEL_321;
          }
        }
        else
        {
          v6 = v351;
        }
LABEL_404:
        if (v390 != v392)
          free(v390);
        v2 = v348;
LABEL_407:
        if (v395 != v397)
          free(v395);
        if (v399 != (unsigned int *)v401)
          free(v399);
        if ((v121 & 1) != 0)
        {
LABEL_304:
          v115 = 1;
          goto LABEL_439;
        }
LABEL_45:
        v32 = sub_1C486A4CC(*(_DWORD *)(*(v9 - 7) + 36));
        for (i = *(_QWORD *)(v349 + 48); i != v349 + 40; i = *(_QWORD *)(i + 8))
        {
          v34 = i - 24;
          if (i)
            v35 = i - 24;
          else
            v35 = 0;
          if (*(_BYTE *)(v35 + 16) != 83)
            goto LABEL_287;
        }
        v34 = 0;
LABEL_287:
        v161 = *(uint64_t **)(*(_QWORD *)(v9[2] + 56) + 40);
        v162 = (char *)v11 - 32 * (*((_DWORD *)v9 - 1) & 0x7FFFFFF);
        v363 = *((_QWORD *)v162 + 4);
        v369 = *(void **)v162;
        v163 = (uint64_t *)*((_QWORD *)v162 + 8);
        sub_1C4773D54((uint64_t)&v399, v34, 0, 0, 0);
        v164 = (void *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)*v161 + 1912), 0);
        v165 = (llvm::PointerType *)*v163;
        v393 = 257;
        v166 = sub_1C486A5CC((uint64_t *)&v399, v165, 0, (uint64_t)&v390);
        v167 = 0;
        v402 = v9[2];
        v403 = v9;
        v168 = (void *)v9[3];
        v390 = v168;
        if (v168)
        {
          llvm::MetadataTracking::track((uint64_t)&v390, (unsigned __int8 *)v168, 2);
          v167 = v390;
        }
        sub_1C4774EF4((uint64_t)&v399, 0, (uint64_t)v167);
        if (v390)
          llvm::MetadataTracking::untrack((uint64_t)&v390, (unsigned __int8 *)v390);
        v354 = (uint64_t)v164;
        v390 = v164;
        v350 = v161;
        Declaration = llvm::Intrinsic::getDeclaration(v161, v32, (uint64_t *)&v390, 1);
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v402 + 56) + 40) + 272, *v163);
        v171 = v170;
        v172 = (char *)operator new(0x80uLL);
        v173 = v172;
        *((_DWORD *)v172 + 21) = *((_DWORD *)v172 + 21) & 0x38000000 | 2;
        *(_QWORD *)v172 = 0;
        *((_QWORD *)v172 + 2) = 0;
        *((_QWORD *)v172 + 1) = 0;
        *((_QWORD *)v172 + 5) = 0;
        *((_QWORD *)v172 + 6) = 0;
        *((_QWORD *)v172 + 4) = 0;
        v174 = (unsigned __int8 ***)(v172 + 32);
        *((_QWORD *)v172 + 8) = **(_QWORD **)*v163 + 1576;
        v175 = (llvm::Value *)(v172 + 64);
        *((_QWORD *)v172 + 3) = v172 + 64;
        *((_QWORD *)v172 + 7) = v172 + 64;
        *((_QWORD *)v172 + 9) = 0;
        v172[80] = 61;
        v172[81] = 0;
        *((_WORD *)v172 + 41) = 0;
        *((_DWORD *)v172 + 21) = 2;
        *(_OWORD *)(v172 + 88) = 0u;
        *(_OWORD *)(v172 + 104) = 0u;
        *((_DWORD *)v172 + 30) = 0;
        *(_QWORD *)v172 = v163;
        v178 = v163[1];
        v177 = v163 + 1;
        v176 = v178;
        *((_QWORD *)v172 + 1) = v178;
        if (v178)
          *(_QWORD *)(v176 + 16) = v172 + 8;
        *((_QWORD *)v172 + 2) = v177;
        *v177 = v172;
        if (*((_QWORD *)v172 + 4))
        {
          **((_QWORD **)v172 + 6) = *((_QWORD *)v172 + 5);
          v288 = *((_QWORD *)v172 + 5);
          if (v288)
            *(_QWORD *)(v288 + 16) = *((_QWORD *)v172 + 6);
        }
        *v174 = v166;
        if (v166)
        {
          v179 = (unsigned __int8 ****)(v166 + 1);
          v180 = v166[1];
          *((_QWORD *)v172 + 5) = v180;
          if (v180)
            *((_QWORD *)v180 + 2) = v172 + 40;
          *((_QWORD *)v172 + 6) = v179;
          *v179 = v174;
        }
        *((_WORD *)v172 + 41) = 2 * (v171 & 0x3F);
        v172[124] = 1;
        v393 = 257;
        (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, _QWORD *))(*(_QWORD *)v405 + 16))(v405, v175, &v390, v402, v403);
        if (!(_DWORD)v400)
        {
LABEL_299:
          llvm::DataLayout::getAlignment((uint64_t)(v350 + 34), (uint64_t)v166[8]);
          *((_WORD *)v173 + 41) = *((_WORD *)v173 + 41) & 0xFF81 | (2 * __clz(1 << v181)) ^ 0x7E;
          v393 = 257;
          v182 = sub_1C4773E38((uint64_t *)&v399, 49, (unsigned __int8 *)v166, v354, (uint64_t)&v390);
          if (Declaration)
            v183 = *(uint64_t ***)(Declaration + 24);
          else
            v183 = 0;
          v2 = v348;
          v6 = v351;
          v395 = v369;
          v396 = v363;
          v397[0] = v182;
          v393 = 257;
          v184 = (llvm::Value *)sub_1C4774778((uint64_t *)&v399, v183, Declaration, (uint64_t *)&v395, 3, (uint64_t)&v390, 0);
          llvm::Value::doRAUW(v11, v184, (llvm::Value *)1);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v373, (uint64_t)v11);
          if (v399 != (unsigned int *)v401)
            free(v399);
          goto LABEL_304;
        }
        v185 = v399;
        v186 = (char *)&v399[4 * v400];
        v187 = (unsigned __int8 **)(v173 + 112);
        while (2)
        {
          v188 = *v185;
          v189 = (unsigned __int8 *)*((_QWORD *)v185 + 1);
          if (v189)
          {
            if (v188)
              goto LABEL_312;
            v395 = (void *)*((_QWORD *)v185 + 1);
            v193 = v185;
            v194 = v186;
            v344 = v187;
            llvm::MetadataTracking::track((uint64_t)&v395, v189, 2);
            v187 = v344;
            v186 = v194;
            v185 = v193;
            v190 = *v344;
LABEL_317:
            if (v190)
            {
              v196 = v185;
              v197 = v186;
              v345 = v187;
              llvm::MetadataTracking::untrack((uint64_t)v187, v190);
              v187 = v345;
              v186 = v197;
              v185 = v196;
            }
            v195 = (unsigned __int8 *)v395;
            *v187 = (unsigned __int8 *)v395;
            if (v195)
            {
              v191 = v185;
              v192 = v186;
              v343 = v187;
              llvm::MetadataTracking::retrack((uint64_t)&v395, v195, (uint64_t)v187);
              goto LABEL_313;
            }
          }
          else
          {
            v190 = *v187;
            if (*v187 || (v173[87] & 0x20) != 0)
            {
              if (!v188)
              {
                v395 = 0;
                goto LABEL_317;
              }
LABEL_312:
              v191 = v185;
              v192 = v186;
              v343 = v187;
              llvm::Value::setMetadata(v175, *v185, (llvm::MDNode *)v189);
LABEL_313:
              v187 = v343;
              v186 = v192;
              v185 = v191;
            }
          }
          v185 += 4;
          if (v185 == (unsigned int *)v186)
            goto LABEL_299;
          continue;
        }
      }
      if (v151)
        __asm { BR              X9 }
      v6 = v351;
LABEL_321:
      v386 = *(void **)v334;
      v198 = llvm::Intrinsic::getDeclaration(v152, v332, (uint64_t *)&v386, 1);
      if (v198)
        v199 = *(uint64_t ***)(v198 + 24);
      else
        v199 = 0;
      v382 = v29;
      v383 = v353;
      v384[0] = v334;
      v389 = 257;
      v200 = (llvm::Value *)sub_1C4774778((uint64_t *)&v390, v199, v198, (uint64_t *)&v382, 3, (uint64_t)&v386, 0);
      if (!v151)
      {
        v121 = 1;
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v9 - 3), v200, (llvm::Value *)1);
        v386 = v9 - 3;
        sub_1C486A6FC((uint64_t *)&v381, &v386, 1);
        goto LABEL_404;
      }
      v386 = v388;
      v387 = 0x400000000;
      if ((_DWORD)v396)
      {
        v355 = (llvm::UndefValue **)v200;
        v202 = (unsigned int *)v395;
        v337 = (unsigned int *)((char *)v395 + 16 * v396);
        do
        {
          v203 = *(_QWORD *)(*(_QWORD *)v202 + 8);
          for (j = v202; v203; v203 = *(_QWORD *)(v364 + 8))
          {
            v204 = *(_QWORD *)(v203 + 24);
            v205 = v202[2];
            v364 = v203;
            if (v204 && *(_BYTE *)(v204 + 16) == 89)
            {
              v206 = *(_QWORD *)(v204 - 32);
              v207 = (_QWORD *)(v206 + 24);
              if (*(_DWORD *)(v206 + 32) >= 0x41u)
                v207 = (_QWORD *)*v207;
              v208 = *(llvm::ValueAsMetadata **)(v203 + 24);
              v209 = (*(_DWORD *)v207 + *(_DWORD *)(**(_QWORD **)(v204 - 64) + 32) * v205);
              v210 = *(llvm::ConstantInt **)(*(_QWORD *)v394 + 1960);
              v211 = *(_DWORD *)(*(_QWORD *)v394 + 1968);
              LODWORD(v383) = v211 >> 8;
              if (v211 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v382, v209, 0);
              }
              else
              {
                if (v211 <= 0xFF)
                  v212 = 0;
                else
                  v212 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v211);
                v382 = (void *)(v212 & v209);
              }
              v213 = llvm::ConstantInt::get(v210, (llvm::LLVMContext *)&v382, v201);
              if (v383 >= 0x41 && v382)
                MEMORY[0x1CAA32F9C](v382, 0x1000C8000313F17);
              v385 = 257;
              v214 = sub_1C4772EE0((uint64_t *)&v390, (uint64_t)v355, (uint64_t)v213, (uint64_t)&v382);
              llvm::Value::doRAUW(v208, (llvm::Value *)v214, (llvm::Value *)1);
              v215 = v387;
              if (v387 >= (unint64_t)HIDWORD(v387))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v386, (uint64_t)v388, v387 + 1, 8);
                v215 = v387;
              }
              *((_QWORD *)v386 + v215) = v208;
              LODWORD(v387) = v387 + 1;
              v202 = j;
            }
            else
            {
              v216 = **(_QWORD **)v202;
              if (v216)
                v217 = (*(_DWORD *)(v216 + 8) & 0xFE) == 18;
              else
                v217 = 0;
              if (v217)
              {
                v346 = *(_QWORD *)(v203 + 24);
                v382 = v384;
                v383 = 0x400000000;
                v235 = *(_DWORD *)(v216 + 32);
                if (v235)
                {
                  for (k = 0; k != v235; ++k)
                  {
                    v242 = k + *(_DWORD *)(v216 + 32) * v202[2];
                    v243 = *(llvm::ConstantInt **)(*(_QWORD *)v394 + 1960);
                    v244 = *(_DWORD *)(*(_QWORD *)v394 + 1968);
                    v379 = v244 >> 8;
                    if (v244 >> 8 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v378, v242, 0);
                    }
                    else
                    {
                      if (v244 <= 0xFF)
                        v245 = 0;
                      else
                        v245 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v244);
                      v378 = v245 & v242;
                    }
                    v246 = llvm::ConstantInt::get(v243, (llvm::LLVMContext *)&v378, v201);
                    if (v379 >= 0x41 && v378)
                      MEMORY[0x1CAA32F9C](v378, 0x1000C8000313F17);
                    v247 = v383;
                    if (v383 >= (unint64_t)HIDWORD(v383))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v382, (uint64_t)v384, v383 + 1, 8);
                      v247 = v383;
                    }
                    *((_QWORD *)v382 + v247) = v246;
                    LODWORD(v383) = v383 + 1;
                    v202 = j;
                  }
                }
                v236 = llvm::UndefValue::get(*v355, (llvm::Type *)v205);
                v237 = (llvm::FixedVectorType ***)v382;
                v238 = v383;
                Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v382, (llvm::Type *)v383);
                if (!Impl)
                {
                  llvm::FixedVectorType::get(**v237, (llvm::Type *)v238);
                  Impl = (llvm::ConstantDataSequential *)sub_1C537B3A4(**v240 + 1288, (uint64_t)v240, v237, v238);
                }
                v380 = 257;
                v223 = sub_1C6139D2C((uint64_t)&v390, (uint64_t)v355, (uint64_t)v236, Impl, (uint64_t)&v378);
                v6 = v351;
                if (v382 != v384)
                  free(v382);
                v218 = v346;
              }
              else
              {
                v218 = *(_QWORD *)(v203 + 24);
                v219 = *(llvm::ConstantInt **)(*(_QWORD *)v394 + 1960);
                v220 = *(_DWORD *)(*(_QWORD *)v394 + 1968);
                LODWORD(v383) = v220 >> 8;
                if (v220 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v382, v205, 0);
                }
                else
                {
                  if (v220 <= 0xFF)
                    v221 = 0;
                  else
                    v221 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v220);
                  v382 = (void *)(v221 & v205);
                }
                v6 = v351;
                v222 = llvm::ConstantInt::get(v219, (llvm::LLVMContext *)&v382, v201);
                if (v383 >= 0x41 && v382)
                  MEMORY[0x1CAA32F9C](v382, 0x1000C8000313F17);
                v385 = 257;
                v223 = (uint64_t)sub_1C4772EE0((uint64_t *)&v390, (uint64_t)v355, (uint64_t)v222, (uint64_t)&v382);
              }
              v224 = *(_DWORD *)(v218 + 20);
              v202 = j;
              if ((v224 & 0x40000000) != 0)
              {
                v226 = *(_QWORD *)(v218 - 8);
                v225 = v224 & 0x7FFFFFF;
                if (v225)
                {
LABEL_356:
                  v227 = *(_QWORD **)j;
                  v228 = (_QWORD **)(v226 + 8);
                  v229 = 32 * v225;
                  while (*(v228 - 1) != v227)
                  {
                    v228 += 4;
                    v229 -= 32;
                    if (!v229)
                      goto LABEL_369;
                  }
                  v230 = v387;
                  if (v387 >= (unint64_t)HIDWORD(v387))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v386, (uint64_t)v388, v387 + 1, 8);
                    v202 = j;
                    v230 = v387;
                  }
                  v231 = (uint64_t *)(v228 - 1);
                  *((_QWORD *)v386 + v230) = v227;
                  LODWORD(v387) = v387 + 1;
                  if (*(v228 - 1))
                  {
                    *v228[1] = *v228;
                    if (*v228)
                      (*v228)[2] = v228[1];
                  }
                  *v231 = v223;
                  if (v223)
                  {
                    v234 = *(_QWORD **)(v223 + 8);
                    v233 = (uint64_t **)(v223 + 8);
                    v232 = v234;
                    *v228 = v234;
                    if (v234)
                      v232[2] = v228;
                    v228[1] = v233;
                    *v233 = v231;
                  }
                }
              }
              else
              {
                v225 = v224 & 0x7FFFFFF;
                v226 = v218 - 32 * v225;
                if (v225)
                  goto LABEL_356;
              }
            }
LABEL_369:
            ;
          }
          v202 += 4;
        }
        while (v202 != v337);
        v248 = v386;
        v249 = v387;
      }
      else
      {
        v249 = 0;
        v248 = v388;
      }
      sub_1C486A6FC((uint64_t *)&v381, v248, v249);
      if (v386 != v388)
        free(v386);
      v121 = 1;
      goto LABEL_404;
    }
    v36 = (_QWORD *)((char *)v11 - 32 * (*((_DWORD *)v9 - 1) & 0x7FFFFFF));
    v37 = (uint64_t *)(*v36 + 24);
    v335 = (void *)*v36;
    if (*(_DWORD *)(*v36 + 32) >= 0x41u)
      v37 = (uint64_t *)*v37;
    v38 = (llvm::ValueHandleBase *)v36[4];
    v39 = *v37;
    sub_1C486A690(*v37, v347);
    v41 = 0;
    if (v39 > 0xA)
    {
      v42 = v39;
      v366 = 0;
    }
    else
    {
      v42 = v39;
      if (((1 << v39) & 0x430) != 0)
      {
        v43 = 8;
      }
      else
      {
        v366 = 0;
        if (((1 << v39) & 0xC0) == 0)
          goto LABEL_79;
        v43 = 16;
      }
      v366 = v43;
      v41 = 1;
    }
LABEL_79:
    v52 = *(v9 - 2);
    v390 = v392;
    v391 = 0x400000000;
    if (v52)
    {
      v53 = -1;
      v54 = v52;
      do
      {
        v54 = *(_QWORD *)(v54 + 8);
        ++v53;
      }
      while (v54);
      v55 = v53 + 1;
      if (v53 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v390, (uint64_t)v392, v53 + 1, 8);
        v56 = v391;
        v58 = v390;
        v57 = v391;
      }
      else
      {
        v56 = 0;
        v57 = 0;
        v58 = v392;
      }
      v59 = &v58[8 * v56];
      do
      {
        *v59++ = *(_QWORD *)(v52 + 24);
        v52 = *(_QWORD *)(v52 + 8);
      }
      while (v52);
      v60 = v390;
    }
    else
    {
      v57 = 0;
      v55 = 0;
      v60 = v392;
    }
    v61 = v57 + v55;
    LODWORD(v391) = v61;
    if (v61)
    {
      v359 = &v60[8 * v61];
      if (v42 == 14)
        v62 = 4;
      else
        v62 = 2;
      v325 = v62;
      if (v42 != 14 || v338 == 0)
        v64 = 2;
      else
        v64 = 4;
      v331 = v64;
      v340 = v42;
      v324 = v42;
      v352 = 1;
      while (1)
      {
        v65 = *(_QWORD *)v60;
        v66 = *(unsigned __int8 *)(*(_QWORD *)v60 + 16);
        v395 = v397;
        v396 = 0x400000000;
        if (!v65 || v66 < 0x1C)
          goto LABEL_103;
        v69 = 0;
        while (1)
        {
          v70 = *(unsigned __int8 *)(v65 + 16);
          if (v70 == 61)
            break;
          v71 = *(_QWORD *)(v65 + 8);
          if (!v71 || *(_QWORD *)(v71 + 8))
            goto LABEL_103;
          if (v70 != 77)
          {
            v72 = v41 ^ 1;
            if (v70 != 66)
              v72 = 1;
            if ((v72 & 1) != 0)
              goto LABEL_103;
            v68 = 1;
            if (*((_BYTE *)v38 + 16) != 16 || !v38 || *(_DWORD *)(*(_QWORD *)v65 + 8) != 13)
              goto LABEL_104;
            v73 = (_QWORD *)((char *)v38 + 24);
            if (*((_DWORD *)v38 + 8) >= 0x41u)
              v73 = (_QWORD *)*v73;
            v74 = *(_DWORD *)v73 & ~(-1 << ((*(_DWORD *)(*(_QWORD *)v65 + 8) >> 8) / v366));
            v75 = **(llvm::ConstantInt ***)v38;
            v76 = *(_DWORD *)(*(_QWORD *)v38 + 8);
            LODWORD(v400) = v76 >> 8;
            if (v76 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v399, v74, 0);
            }
            else
            {
              if (v76 <= 0xFF)
                v77 = 0;
              else
                v77 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v76);
              v399 = (unsigned int *)(v77 & v74);
            }
            v38 = llvm::ConstantInt::get(v75, (llvm::LLVMContext *)&v399, v40);
            if (v400 >= 0x41 && v399)
              MEMORY[0x1CAA32F9C](v399, 0x1000C8000313F17);
            v69 = v396;
          }
          if (v69 >= HIDWORD(v396))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v395, (uint64_t)v397, v69 + 1, 8);
            v69 = v396;
          }
          *((_QWORD *)v395 + v69) = v65;
          v69 = v396 + 1;
          LODWORD(v396) = v396 + 1;
          v65 = *(_QWORD *)(*(_QWORD *)(v65 + 8) + 24);
          if (!v65)
            goto LABEL_103;
        }
        v78 = *(_QWORD *)(v65 - 32);
        v79 = *(_DWORD *)(*(_QWORD *)v78 + 8);
        if ((v79 & 0xFE) == 0x12)
          v79 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v78 + 16) + 8);
        if (v339)
        {
          if (((1 << v340) & 0xB104) != 0)
            v80 = 4;
          else
            v80 = 1;
          v81 = v331;
          if (((1 << v340) & 0x40CA) == 0)
            v81 = v80;
        }
        else
        {
          if (((1 << v340) & 0xB104) != 0)
            v82 = 4;
          else
            v82 = 1;
          v81 = v325;
          if (((1 << v340) & 0x40CA) == 0)
            v81 = v82;
          if (v81 <= dword_1C6464B7C[v324])
            v81 = dword_1C6464B7C[v324];
        }
        v83 = v79 & 0xFFFFFF00;
        v84 = v81 > (1 << ((unint64_t)*(unsigned __int16 *)(v65 + 18) >> 1)) || v83 == 0x4000;
        v85 = v84 ? 0 : v65;
        if (v84)
        {
LABEL_103:
          v352 = 0;
          v68 = 4;
        }
        else
        {
          v327 = v85;
          v329 = *(void ***)(v65 - 32);
          v326 = (unint64_t)sub_1C486A4CC(*(_DWORD *)(*(v9 - 7) + 36)) >> 32;
          v86 = (llvm::UndefValue **)v9[-4 * (*((_DWORD *)v9 - 1) & 0x7FFFFFF) + 5];
          sub_1C4773D54((uint64_t)&v399, v65, 0, 0, 0);
          v89 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v65 + 40) + 56) + 40);
          v333 = v86;
          v90 = *v86;
          if ((*((_DWORD *)*v86 + 2) & 0xFE) == 0x12)
          {
            v91 = (int8x8_t *)((char *)v38 + 24);
            v92 = v329;
            if (*((_DWORD *)v38 + 8) >= 0x41u)
              v91 = (int8x8_t *)*v91;
            v93 = (uint8x8_t)vcnt_s8(*v91);
            v93.i16[0] = vaddlv_u8(v93);
            v94 = v93.i32[0];
            if (*((_DWORD *)v90 + 8) != v93.i32[0])
            {
              if (v93.i32[0] != 3)
              {
                if (v93.i32[0] == 1)
                {
                  v95 = *(llvm::ConstantInt **)(*(_QWORD *)v404 + 1960);
                  LODWORD(v387) = *(_DWORD *)(*(_QWORD *)v404 + 1968) >> 8;
                  if (v387 > 0x40)
                  {
                    v322 = v95;
                    llvm::APInt::initSlowCase((llvm::APInt *)&v386, 0, 0);
                    v95 = v322;
                  }
                  else
                  {
                    v386 = 0;
                  }
                  v96 = llvm::ConstantInt::get(v95, (llvm::LLVMContext *)&v386, v88);
                  if (v387 >= 0x41 && v386)
                  {
                    v323 = v96;
                    MEMORY[0x1CAA32F9C](v386, 0x1000C8000313F17);
                    v96 = v323;
                  }
                  v389 = 257;
                  sub_1C4772EE0((uint64_t *)&v399, (uint64_t)v333, (uint64_t)v96, (uint64_t)&v386);
                }
                else
                {
                  v382 = v384;
                  v383 = 0x400000000;
                  if (v93.i32[0])
                  {
                    v97 = 0;
                    v98 = 0;
                    do
                    {
                      if (v97 >= HIDWORD(v383))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v382, (uint64_t)v384, v97 + 1, 4);
                        v97 = v383;
                      }
                      *((_DWORD *)v382 + v97) = v98;
                      v97 = v383 + 1;
                      LODWORD(v383) = v383 + 1;
                      ++v98;
                    }
                    while (v94 != v98);
                    v90 = *v333;
                  }
                  v99 = llvm::UndefValue::get(v90, v87);
                  v389 = 257;
                  sub_1C486AD20((uint64_t)&v399, (uint64_t)v333, (uint64_t)v99, v382, v383, (uint64_t)&v386);
                  if (v382 != v384)
                    free(v382);
                }
              }
              __asm { BR              X9 }
            }
          }
          else
          {
            v92 = v329;
          }
          v386 = *v92;
          v100 = llvm::Intrinsic::getDeclaration(v89, v326, (uint64_t *)&v386, 1);
          if (v100)
            v101 = *(uint64_t ***)(v100 + 24);
          else
            v101 = 0;
          v382 = v335;
          v383 = (uint64_t)v38;
          v384[0] = v333;
          v384[1] = v92;
          v389 = 257;
          sub_1C4774778((uint64_t *)&v399, v101, v100, (uint64_t *)&v382, 4, (uint64_t)&v386, 0);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v373, v327);
          if ((_DWORD)v396)
          {
            v102 = (uint64_t *)v395;
            v103 = 8 * v396;
            do
            {
              v104 = *v102++;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v373, v104);
              v103 -= 8;
            }
            while (v103);
          }
          if (v399 != (unsigned int *)v401)
            free(v399);
          v68 = 0;
        }
LABEL_104:
        if (v395 != v397)
          free(v395);
        if ((v68 | 4) != 4)
          break;
        v60 += 8;
        if (v60 == v359)
        {
          if ((v352 & 1) != 0)
            goto LABEL_192;
          break;
        }
      }
      v105 = 0;
    }
    else
    {
LABEL_192:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v373, (uint64_t)(v9 - 3));
      v105 = 1;
    }
    v2 = v348;
    v6 = v351;
    if (v390 != v392)
      free(v390);
    if ((v105 & 1) != 0)
      goto LABEL_304;
    v106 = (unint64_t)sub_1C486A4CC(*(_DWORD *)(*(v9 - 7) + 36)) >> 32;
    for (m = *(_QWORD *)(v349 + 48); m != v349 + 40; m = *(_QWORD *)(m + 8))
    {
      v108 = m - 24;
      if (m)
        v109 = m - 24;
      else
        v109 = 0;
      if (*(_BYTE *)(v109 + 16) != 83)
        goto LABEL_414;
    }
    v108 = 0;
LABEL_414:
    v371 = *(v9 - 3);
    v250 = *(uint64_t **)(*(_QWORD *)(v9[2] + 56) + 40);
    v251 = (char *)v11 - 32 * (*((_DWORD *)v9 - 1) & 0x7FFFFFF);
    v252 = *(void **)v251;
    v356 = *((_QWORD *)v251 + 4);
    v253 = (llvm::PointerType **)*((_QWORD *)v251 + 8);
    sub_1C4773D54((uint64_t)&v399, v108, 0, 0, 0);
    v254 = (void *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)*v250 + 1912), 0);
    v255 = *v253;
    v393 = 257;
    v365 = sub_1C486A5CC((uint64_t *)&v399, v255, 0, (uint64_t)&v390);
    v256 = 0;
    v402 = v9[2];
    v403 = v9;
    v257 = (void *)v9[3];
    v390 = v257;
    if (v257)
    {
      llvm::MetadataTracking::track((uint64_t)&v390, (unsigned __int8 *)v257, 2);
      v256 = v390;
    }
    sub_1C4774EF4((uint64_t)&v399, 0, (uint64_t)v256);
    if (v390)
      llvm::MetadataTracking::untrack((uint64_t)&v390, (unsigned __int8 *)v390);
    v393 = 257;
    v258 = sub_1C4773E38((uint64_t *)&v399, 49, (unsigned __int8 *)v365, (uint64_t)v254, (uint64_t)&v390);
    v390 = v254;
    v259 = llvm::Intrinsic::getDeclaration(v250, v106, (uint64_t *)&v390, 1);
    if (v259)
      v260 = *(uint64_t ***)(v259 + 24);
    else
      v260 = 0;
    v395 = v252;
    v396 = v356;
    v397[0] = v253;
    v397[1] = v258;
    v393 = 257;
    sub_1C4774778((uint64_t *)&v399, v260, v259, (uint64_t *)&v395, 4, (uint64_t)&v390, 0);
    v261 = (_QWORD *)*v250;
    sub_1C4768AD0((uint64_t)(v250 + 34), v371);
    v264 = v263;
    if ((_DWORD)v262 == 1)
    LODWORD(v390) = v264;
    v357 = (uint64_t)(v250 + 34);
    if (v264 <= 63)
    {
      if (v264 <= 31)
      {
        switch(v264)
        {
          case 16:
            v265 = (llvm::PointerType *)(*v261 + 1936);
            goto LABEL_431;
          case 8:
            v265 = (llvm::PointerType *)(*v261 + 1912);
            goto LABEL_431;
          case 1:
            v265 = (llvm::PointerType *)(*v261 + 1888);
            goto LABEL_431;
        }
      }
      else if (v264 == 32)
      {
        v265 = (llvm::PointerType *)(*v261 + 1960);
        goto LABEL_431;
      }
    }
    else
    {
      if (v264 == 64)
      {
        v265 = (llvm::PointerType *)(*v261 + 1984);
LABEL_431:
        v266 = llvm::PointerType::get(v265, 0);
        v393 = 257;
        v267 = sub_1C4773E38((uint64_t *)&v399, 49, v258, v266, (uint64_t)&v390);
        v398 = 257;
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v402 + 56) + 40) + 272, (uint64_t)v265);
        v269 = v268;
        v270 = (char *)operator new(0x60uLL);
        v271 = v270;
        v272 = (unsigned __int8 *)(v270 + 32);
        *((_QWORD *)v270 + 2) = 0;
        *((_QWORD *)v270 + 3) = v270 + 32;
        v393 = 257;
        *((_QWORD *)v270 + 4) = v265;
        *((_QWORD *)v270 + 5) = 0;
        *((_WORD *)v270 + 24) = 60;
        *((_DWORD *)v270 + 13) = 1;
        *(_OWORD *)(v270 + 56) = 0u;
        *(_OWORD *)(v270 + 72) = 0u;
        *((_DWORD *)v270 + 22) = 0;
        *(_QWORD *)v270 = v267;
        *((_QWORD *)v270 + 1) = 0;
        if (v267)
        {
          v275 = *((_QWORD *)v267 + 1);
          v274 = v267 + 8;
          v273 = v275;
          *((_QWORD *)v270 + 1) = v275;
          if (v275)
            *(_QWORD *)(v273 + 16) = v270 + 8;
          *((_QWORD *)v270 + 2) = v274;
          *v274 = v270;
        }
        *((_WORD *)v270 + 25) = 2 * (v269 & 0x3F);
        v270[92] = 1;
        llvm::Value::setName((uint64_t ***)v270 + 4, (uint64_t)&v390);
        (*(void (**)(uint64_t, unsigned __int8 *, void **, uint64_t, _QWORD *))(*(_QWORD *)v405 + 16))(v405, v272, &v395, v402, v403);
        if (!(_DWORD)v400)
        {
LABEL_436:
          llvm::DataLayout::getAlignment(v357, (uint64_t)v365[8]);
          *((_WORD *)v271 + 25) = *((_WORD *)v271 + 25) & 0xFF81 | (2 * __clz(1 << v276)) ^ 0x7E;
          v393 = 257;
          v277 = sub_1C4773E38((uint64_t *)&v399, 49, v272, v371, (uint64_t)&v390);
          llvm::Value::doRAUW(v11, (llvm::Value *)v277, (llvm::Value *)1);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v373, (uint64_t)v11);
          if (v399 != (unsigned int *)v401)
            free(v399);
          v115 = 1;
          v2 = v348;
          v6 = v351;
LABEL_439:
          v6 |= v115;
          goto LABEL_440;
        }
        v278 = v399;
        v279 = (char *)&v399[4 * v400];
        v280 = (unsigned __int8 **)(v271 + 80);
        while (1)
        {
          v281 = *v278;
          v282 = (unsigned __int8 *)*((_QWORD *)v278 + 1);
          if (v282)
          {
            if (!v281)
            {
              v386 = (void *)*((_QWORD *)v278 + 1);
              llvm::MetadataTracking::track((uint64_t)&v386, v282, 2);
              v283 = *v280;
              goto LABEL_453;
            }
          }
          else
          {
            v283 = *v280;
            if (!*v280 && (v271[55] & 0x20) == 0)
              goto LABEL_450;
            if (!v281)
            {
              v386 = 0;
LABEL_453:
              if (v283)
                llvm::MetadataTracking::untrack((uint64_t)(v271 + 80), v283);
              v284 = (unsigned __int8 *)v386;
              *v280 = (unsigned __int8 *)v386;
              if (v284)
                llvm::MetadataTracking::retrack((uint64_t)&v386, v284, (uint64_t)(v271 + 80));
              goto LABEL_450;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v272, *v278, (llvm::MDNode *)v282);
LABEL_450:
          v278 += 4;
          if (v278 == (unsigned int *)v279)
            goto LABEL_436;
        }
      }
      if (v264 == 128)
      {
        v265 = (llvm::PointerType *)(*v261 + 2008);
        goto LABEL_431;
      }
    }
    v285 = sub_1C5270984(*v261 + 2168, &v390);
    v265 = (llvm::PointerType *)*((_QWORD *)v285 + 1);
    if (!v265)
    {
      v286 = v285;
      v265 = (llvm::PointerType *)sub_1C484358C(*v261 + 2040, 24, 3);
      v287 = (int)v390;
      *(_QWORD *)v265 = v261;
      *((_QWORD *)v265 + 2) = 0;
      *((_QWORD *)v265 + 1) = (v287 << 8) | 0xDu;
      *((_QWORD *)v286 + 1) = v265;
    }
    goto LABEL_431;
  }
  v6 = 0;
LABEL_473:
  v290 = v373;
  v289 = (unint64_t *)v374;
  v291 = HIDWORD(v375);
  v292 = v375;
  if (v374 == (char *)v373)
    v293 = HIDWORD(v375);
  else
    v293 = v375;
  v294 = v374;
  if ((_DWORD)v293)
  {
    v295 = 0;
    while (*(_QWORD *)&v374[v295] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v295 += 8;
      if (8 * v293 == v295)
        goto LABEL_498;
    }
    v294 = &v374[v295];
  }
  v296 = &v374[8 * v293];
  if (v294 != v296)
  {
    v297 = *(_QWORD *)v294;
LABEL_484:
    v298 = *(_DWORD *)(v297 + 20);
    if ((v298 & 0x40000000) != 0)
    {
      v300 = *(_QWORD *)(v297 - 8);
      v299 = v298 & 0x7FFFFFF;
      if (!v299)
        goto LABEL_491;
    }
    else
    {
      v299 = v298 & 0x7FFFFFF;
      v300 = v297 - 32 * v299;
      if (!v299)
        goto LABEL_491;
    }
    v301 = 32 * v299;
    v302 = (_QWORD **)(v300 + 16);
    do
    {
      if (*(v302 - 2))
      {
        **v302 = *(v302 - 1);
        v303 = (uint64_t)*(v302 - 1);
        if (v303)
          *(_QWORD *)(v303 + 16) = *v302;
      }
      *(v302 - 2) = 0;
      v302 += 4;
      v301 -= 32;
    }
    while (v301);
LABEL_491:
    v304 = (unint64_t *)(v294 + 8);
    while (v304 != (unint64_t *)v296)
    {
      v305 = *v304++;
      v297 = v305;
      if (v305 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v294 = (char *)(v304 - 1);
        goto LABEL_484;
      }
    }
    v290 = v373;
    v289 = (unint64_t *)v374;
    v291 = HIDWORD(v375);
    v292 = v375;
  }
LABEL_498:
  if (v289 == v290)
    v306 = v291;
  else
    v306 = v292;
  v307 = v289;
  if ((_DWORD)v306)
  {
    v308 = 0;
    while (v289[v308] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v306 == ++v308)
        goto LABEL_514;
    }
    v307 = &v289[v308];
  }
  v309 = &v289[v306];
  if (v307 != v309)
  {
    v310 = *v307;
LABEL_509:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v310 + 40) + 40, (uint64_t ***)v310);
    v311 = *(_QWORD *)(v310 + 24);
    v312 = *(_QWORD **)(v310 + 32);
    *v312 = v311;
    *(_QWORD *)(v311 + 8) = v312;
    *(_QWORD *)(v310 + 24) = 0;
    *(_QWORD *)(v310 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v310);
    v313 = v307 + 1;
    while (v313 != v309)
    {
      v314 = *v313++;
      v310 = v314;
      if (v314 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v307 = v313 - 1;
        goto LABEL_509;
      }
    }
    v290 = v373;
    v289 = (unint64_t *)v374;
  }
LABEL_514:
  if (v289 == v290)
    goto LABEL_515;
  if (v375 < 0x21 || 4 * (HIDWORD(v375) - v376) >= v375)
  {
    memset(v289, 255, 8 * v375);
LABEL_515:
    v376 = 0;
    HIDWORD(v375) = 0;
    goto LABEL_516;
  }
  free(v289);
  v318 = 1 << (33 - __clz(HIDWORD(v375) - v376 - 1));
  v319 = (HIDWORD(v375) - v376) > 0x10;
  v376 = 0;
  if (v319)
    v320 = v318;
  else
    v320 = 32;
  v375 = v320;
  v321 = (char *)malloc_type_malloc(8 * v320, 0x4065EBACuLL);
  if (!v321)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v374 = v321;
  memset(v321, 255, 8 * v375);
LABEL_516:
  v315 = sub_1C5E9DFC8(v2, (llvm::BinaryOperator *)1);
  if (v374 != (char *)v373)
    free(v374);
  return (v6 | v315) & 1;
}

uint64_t sub_1C486A4CC(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = 0xA4600000000;
  v2 = 2376;
  switch(a1)
  {
    case 2426:
      goto LABEL_19;
    case 2427:
      v1 = 0xA4800000000;
      v2 = 2378;
      goto LABEL_19;
    case 2428:
      v1 = 0xA4A00000000;
      v2 = 2380;
      goto LABEL_19;
    case 2429:
      v1 = 0xA4C00000000;
      v2 = 2382;
      goto LABEL_19;
    case 2430:
      v1 = 0xA4E00000000;
      v2 = 2384;
      goto LABEL_19;
    case 2431:
      v1 = 0xA5000000000;
      v2 = 2386;
      goto LABEL_19;
    case 2432:
      v1 = 0xA5200000000;
      v2 = 2388;
      goto LABEL_19;
    case 2433:
      v1 = 0xA5400000000;
      v2 = 2390;
      goto LABEL_19;
    case 2434:
      v1 = 0xA5600000000;
      v2 = 2392;
      goto LABEL_19;
    case 2435:
      v1 = 0xA5800000000;
      v2 = 2394;
      goto LABEL_19;
    case 2436:
      v1 = 0xA5A00000000;
      v2 = 2396;
      goto LABEL_19;
    case 2437:
      v1 = 0xA5C00000000;
      v2 = 2398;
      goto LABEL_19;
    case 2438:
      v1 = 0xA5E00000000;
      v2 = 2400;
      goto LABEL_19;
    case 2439:
      v1 = 0xA6000000000;
      v2 = 2402;
      goto LABEL_19;
    case 2440:
      v1 = 0xA6200000000;
      v2 = 2404;
      goto LABEL_19;
    case 2441:
      v1 = 0xA6400000000;
      v2 = 2406;
LABEL_19:
      result = v1 | v2;
      break;
    default:
      result = ((uint64_t (*)(void))((char *)&loc_1C486A514 + 4 * byte_1C6464AAC[a1 - 2687]))();
      break;
  }
  return result;
}

unsigned __int8 **sub_1C486A5CC(uint64_t *a1, llvm::PointerType *a2, llvm::ValueHandleBase *a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  llvm::Type *v11;
  char *v12;
  unsigned __int8 **v13;
  _BYTE v15[32];
  __int16 v16;

  v8 = *(_QWORD *)(*(_QWORD *)(a1[6] + 56) + 40);
  llvm::DataLayout::getAlignment(v8 + 272, (uint64_t)a2);
  v10 = v9;
  v11 = (llvm::Type *)*(unsigned int *)(v8 + 276);
  v12 = (char *)operator new(0x68uLL);
  *((_DWORD *)v12 + 13) = *((_DWORD *)v12 + 13) & 0x38000000 | 1;
  v13 = (unsigned __int8 **)(v12 + 32);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v12 + 32;
  v16 = 257;
  llvm::AllocaInst::AllocaInst((uint64_t)(v12 + 32), a2, v11, a3, v10, (uint64_t)v15, 0);
  return sub_1C4867F8C(a1, v13, a4);
}

uint64_t sub_1C486A690(uint64_t result, __int16 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  std::string v7;
  std::string v8;
  std::string *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = (a2 & 0xFF00) != 0;
  if (!(_BYTE)a2)
    v6 = 0;
  if ((_DWORD)result == 14 && !v6)
  {
    v11 = v3;
    v12 = v2;
    v13 = v4;
    v14 = v5;
    std::to_string(&v7, 0xEu);
    sub_1C486A9C4("Unsupported pack/unpack format: ", &v7, &v8);
    v10 = 260;
    v9 = &v8;
    llvm::report_fatal_error((uint64_t)&v9, 1);
  }
  return result;
}

void sub_1C486A6FC(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  unsigned int i;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[32];
  void *__dst;
  unint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x1E0C80C00];
  __dst = v29;
  v28 = 0x400000000;
  v24 = v26;
  v25 = 0x400000000;
  sub_1C486AF08((unsigned int *)&v24, a2, &a2[8 * a3]);
  for (i = v25; (_DWORD)v25; i = v25)
  {
    v5 = v24;
    if (v24 == v26)
    {
      v6 = v28;
      if (v28 >= i)
      {
        memmove(__dst, v26, 8 * i);
      }
      else
      {
        if (HIDWORD(v28) < i)
        {
          LODWORD(v28) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v29, i, 8);
LABEL_6:
          v6 = 0;
        }
        else
        {
          if (!(_DWORD)v28)
            goto LABEL_6;
          memmove(__dst, v26, 8 * v28);
        }
        if (v6 != v25)
          memcpy((char *)__dst + 8 * v6, (char *)v24 + 8 * v6, 8 * v25 - 8 * v6);
      }
      LODWORD(v25) = 0;
      goto LABEL_10;
    }
    if (__dst != v29)
    {
      free(__dst);
      v5 = v24;
      i = v25;
    }
    __dst = v5;
    v28 = __PAIR64__(HIDWORD(v25), i);
    v24 = v26;
    v25 = 0;
    if (!i)
      break;
    do
    {
LABEL_10:
      v7 = *((_QWORD *)__dst + i - 1);
      LODWORD(v28) = i - 1;
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        while (1)
        {
          v9 = (_QWORD *)*a1;
          v10 = sub_1C477672C(*a1, *(_QWORD *)(v8 + 24));
          v11 = v9[1];
          v12 = v11 == *v9 ? 20 : 16;
          if (v10 == (_QWORD *)(v11 + 8 * *(unsigned int *)((char *)v9 + v12)))
            break;
          v8 = *(_QWORD *)(v8 + 8);
          if (!v8)
            goto LABEL_16;
        }
      }
      else
      {
LABEL_16:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)*a1, v7);
        v13 = *(_DWORD *)(v7 + 20);
        if ((v13 & 0x40000000) != 0)
        {
          v15 = *(uint64_t **)(v7 - 8);
          v14 = v13 & 0x7FFFFFF;
          if (!v14)
            goto LABEL_34;
        }
        else
        {
          v14 = v13 & 0x7FFFFFF;
          v15 = (uint64_t *)(v7 - 32 * v14);
          if (!v14)
            goto LABEL_34;
        }
        v16 = 32 * v14;
        do
        {
          v17 = *v15;
          if (*v15)
            v18 = *(unsigned __int8 *)(*v15 + 16) >= 0x1Cu;
          else
            v18 = 0;
          if (v18)
          {
            v19 = (_QWORD *)*a1;
            v20 = sub_1C477672C(*a1, *v15);
            v21 = v19[1];
            v22 = v21 == *v19 ? 20 : 16;
            if (v20 == (_QWORD *)(v21 + 8 * *(unsigned int *)((char *)v19 + v22)))
            {
              v23 = v25;
              if (v25 >= (unint64_t)HIDWORD(v25))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, (uint64_t)v26, v25 + 1, 8);
                v23 = v25;
              }
              *((_QWORD *)v24 + v23) = v17;
              LODWORD(v25) = v25 + 1;
            }
          }
          v15 += 4;
          v16 -= 32;
        }
        while (v16);
      }
LABEL_34:
      i = v28;
    }
    while ((_DWORD)v28);
  }
  if (v24 != v26)
    free(v24);
  if (__dst != v29)
    free(__dst);
}

__n128 sub_1C486A9C4@<Q0>(std::string::value_type *__s@<X0>, std::string *this@<X1>, std::string *a3@<X8>)
{
  __n128 *v4;
  __n128 result;

  v4 = (__n128 *)std::string::insert(this, 0, __s);
  result = *v4;
  *a3 = *(std::string *)v4->n128_u8;
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  return result;
}

void sub_1C486AA08(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v6;
  unsigned int v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[17];

  v25[16] = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(*a1 + 8);
  if ((*(_DWORD *)(*a1 + 8) & 0xFE) == 0x12 || v2 < 7 || v2 == 13)
  {
    v23 = v25;
    v24 = 0x800000000;
    v6 = a1[1];
    if (!v6)
      goto LABEL_33;
    v8 = 0;
    do
    {
      if (v8 >= HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v8 + 1, 16);
        v8 = v24;
      }
      v9 = (char *)v23 + 16 * v8;
      *v9 = v6;
      v9[1] = 0;
      v8 = v24 + 1;
      LODWORD(v24) = v24 + 1;
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6);
    if (!v8)
    {
LABEL_33:
      if (v23 != v25)
        free(v23);
      return;
    }
    while (1)
    {
      v10 = (char *)v23 + 16 * v8;
      v11 = *((_QWORD *)v10 - 2);
      v12 = *((_QWORD *)v10 - 1);
      LODWORD(v24) = v8 - 1;
      v13 = *(_QWORD *)(v11 + 24);
      if (!v13 || *(_BYTE *)(v13 + 16) != 89)
        break;
      v14 = *(_QWORD *)(v13 - 32);
      v15 = (unsigned int *)(v14 + 24);
      if (*(_DWORD *)(v14 + 32) >= 0x41u)
        v15 = *(unsigned int **)v15;
      v16 = sub_1C486AC38(*v15, (uint64_t)a1) + v12;
      v17 = *(_QWORD *)(v13 + 8);
      if (!v17 || *(_QWORD *)(v17 + 8))
        goto LABEL_28;
      v18 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8);
      if (v18)
      {
        v19 = v12 & 0xFFFFFFFF00000000 | v16;
        v8 = v24;
        do
        {
          if (v8 >= HIDWORD(v24))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v8 + 1, 16);
            v8 = v24;
          }
          v20 = (char *)v23 + 16 * v8;
          *v20 = v18;
          v20[1] = v19;
          v8 = v24 + 1;
          LODWORD(v24) = v24 + 1;
          v18 = *(_QWORD *)(v18 + 8);
        }
        while (v18);
        goto LABEL_32;
      }
LABEL_31:
      v8 = v24;
LABEL_32:
      if (!v8)
        goto LABEL_33;
    }
    v16 = v12;
LABEL_28:
    v21 = *(unsigned int *)(a2 + 8);
    if (v21 >= *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 16);
      v21 = *(unsigned int *)(a2 + 8);
    }
    v22 = (_QWORD *)(*(_QWORD *)a2 + 16 * v21);
    *v22 = v11;
    v22[1] = v16;
    ++*(_DWORD *)(a2 + 8);
    goto LABEL_31;
  }
}

uint64_t sub_1C486AC38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  BOOL v14;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if ((_DWORD)v2 != 84)
    return a1;
  v3 = *(_QWORD *)(a2 - 32);
  if (v3 && !*(_BYTE *)(v3 + 16) && *(_QWORD *)(v3 + 24) == *(_QWORD *)(a2 + 72) && (*(_BYTE *)(v3 + 33) & 0x20) != 0)
  {
    v4 = *(_DWORD *)(v3 + 36);
    v5 = v4 - 2545;
    v6 = v4 - 2471;
    v7 = v4 == 2703;
    v8 = 0xFFFFFFFFLL;
    if (!v7)
      v8 = 0xFFFFFFFFLL;
    if (v6 < 8)
      v8 = 1;
    if (v5 < 0x20)
      v8 = 1;
    v9 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v8);
    v10 = (_QWORD *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u)
      v10 = (_QWORD *)*v10;
    v11 = *(_DWORD *)v10;
    if (*(_DWORD *)v10)
    {
      v12 = 0;
      v13 = 0;
      v2 = 0xFFFFFFFFLL;
      while (1)
      {
        if ((v11 & 1) != 0)
        {
          if (v13 == (_DWORD)a1)
            return v12;
          ++v13;
        }
        v12 = (v12 + 1);
        v14 = v11 > 1;
        v11 >>= 1;
        if (!v14)
          return v2;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return v2;
}

uint64_t sub_1C486AD20(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 **v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned __int8 *v24[4];
  __int16 v25;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v12 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, void *, uint64_t))(**(_QWORD **)(a1 + 72)
                                                                                                  + 336))(*(_QWORD *)(a1 + 72), a2, a3, a4, a5);
    if (v12)
      v13 = v12[16] >= 0x1Cu;
    else
      v13 = 0;
    if (v13)
    {
      (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v12, a6, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v14 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v14)
      {
        v15 = *(_QWORD *)a1;
        v16 = *(_QWORD *)a1 + 16 * v14;
        v17 = (unsigned __int8 **)(v12 + 48);
        do
        {
          v18 = *(_DWORD *)v15;
          v19 = *(unsigned __int8 **)(v15 + 8);
          if (v19)
          {
            if (!v18)
            {
              v24[0] = *(unsigned __int8 **)(v15 + 8);
              llvm::MetadataTracking::track((uint64_t)v24, v19, 2);
LABEL_22:
              if (v24 == v17)
              {
                if (v24[0])
                  llvm::MetadataTracking::untrack((uint64_t)v24, v24[0]);
              }
              else
              {
                if (*v17)
                  llvm::MetadataTracking::untrack((uint64_t)(v12 + 48), *v17);
                v20 = v24[0];
                *v17 = v24[0];
                if (v20)
                  llvm::MetadataTracking::retrack((uint64_t)v24, v20, (uint64_t)(v12 + 48));
              }
              goto LABEL_19;
            }
          }
          else
          {
            if (!*v17 && (v12[23] & 0x20) == 0)
              goto LABEL_19;
            if (!v18)
            {
              v24[0] = 0;
              goto LABEL_22;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v12, v18, (llvm::MDNode *)v19);
LABEL_19:
          v15 += 16;
        }
        while (v15 != v16);
      }
    }
  }
  else
  {
    v21 = operator new(0xA8uLL);
    v21[21] = v21[21] & 0x38000000 | 2;
    v22 = (uint64_t)(v21 + 16);
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = 0;
    *((_QWORD *)v21 + 2) = 0;
    *((_QWORD *)v21 + 3) = v21 + 16;
    *((_QWORD *)v21 + 4) = 0;
    *((_QWORD *)v21 + 5) = 0;
    *((_QWORD *)v21 + 6) = 0;
    *((_QWORD *)v21 + 7) = v21 + 16;
    v25 = 257;
    llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v21 + 8, (_QWORD *)a2, a3, a4, a5, (uint64_t)v24, 0);
    return sub_1C477438C((uint64_t *)a1, v22, a6);
  }
  return (uint64_t)v12;
}

unsigned int *sub_1C486AF08(unsigned int *result, _BYTE *__src, _BYTE *a3)
{
  _DWORD *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = result;
  v6 = a3 - __src;
  v7 = result[2];
  v8 = v7 + ((a3 - __src) >> 3);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 8);
    LODWORD(v7) = v5[2];
  }
  if (__src != a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v5 + 8 * v7), __src, v6);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 3);
  return result;
}

uint64_t sub_1C486AF8C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX2 Common Store Backfiller";
  *(_QWORD *)(v2 + 8) = 28;
  *(_QWORD *)(v2 + 16) = "agx2-common-store-backfiller";
  *(_QWORD *)(v2 + 24) = 28;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EB2B0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C486B0D8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C486B018(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EB2B0) = &off_1E7F9F8F0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7EB2B8);
  if (v3 != -1)
  {
    v7[0] = sub_1C486AF8C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7EB2B8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C486B0D8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C486B018(v0);
}

void sub_1C486B100(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C486B194(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C486B220()
{
  return "AGX2 Common Store Backfiller Pass";
}

void *sub_1C486B230(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

void sub_1C486B260(_QWORD *a1, llvm::MachineOperand *a2)
{
  llvm::MachineOperand *v2;
  uint64_t v4;
  uint64_t v5;
  char hasAddressTaken;
  llvm::Function *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  char v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t UniqueVRegDef;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int64_t v36;
  int v37;
  int v38;
  llvm::MachineOperand *v39;
  unsigned int v40;
  llvm::MachineOperand *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char *v55;
  char *v56;
  unsigned int v57;
  unint64_t *v58;
  unint64_t *v59;
  _QWORD *v60;
  unint64_t j;
  int v62;
  BOOL v63;
  unsigned int v64;
  llvm::MachineOperand *v66;
  unint64_t v67;
  uint64_t *v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t i;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL4 v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char v87;
  char v88;
  uint64_t v89;
  llvm::MachineOperand *v90;
  uint64_t *v91;
  uint64_t **v92;
  uint64_t **v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t **v96;
  _QWORD *v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  BOOL v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  int v109;
  _QWORD *v110;
  uint64_t *v111;
  unsigned __int16 *v112;
  int v113;
  unsigned int v114;
  uint64_t v117;
  uint64_t v118;
  BOOL v120;
  __int16 v121;
  unsigned int v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  int v126;
  BOOL v127;
  char v128;
  _QWORD *v129;
  _QWORD *v130;
  llvm::MachineOperand *v131;
  uint64_t v132;
  uint64_t *v133;
  llvm::MachineOperand *v134;
  uint64_t **v135;
  uint64_t **v136;
  unint64_t v137;
  char *v138;
  void *v139;
  unsigned int v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t *v143;
  void *v144;
  uint64_t v145;
  uint64_t *v146;
  _DWORD *v147;
  int v148;
  int v149;
  unsigned int v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t *v153;
  int v154;
  BOOL v155;
  unsigned int v156;
  uint64_t *v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  llvm::MachineOperand *v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t *v167;
  unsigned int v168;
  uint64_t *v169;
  uint64_t **v170;
  uint64_t *v171;
  unsigned int v172;
  uint64_t *v173;
  uint64_t **v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  int v181;
  char v182;
  char v183;
  unint64_t v184;
  uint64_t *v185;
  uint64_t **v186;
  llvm::MachineOperand *v187;
  unint64_t v188;
  char *v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int **v197;
  int *v198;
  uint64_t *v199;
  unsigned int *v200;
  unsigned int v201;
  BOOL v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int *v209;
  int *v210;
  int *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t *v217;
  unint64_t v218;
  uint64_t **v219;
  uint64_t *v220;
  uint64_t *v221;
  uint64_t *v222;
  uint64_t *v223;
  uint64_t *v224;
  void *v225;
  void *v226;
  uint64_t *v227;
  llvm::MachineOperand *v228;
  _QWORD *v229;
  _QWORD *v230;
  int64x2_t v231;
  char *v232;
  uint64_t v233;
  unsigned int __src;
  int v235;
  uint64_t v236;
  unsigned int v237;
  _QWORD *v238;
  _QWORD *v239;
  int64x2_t v240;
  _QWORD *v241;
  int v242;
  uint64_t *v243;
  uint64_t *v244;
  uint64_t v245;
  void *__p;
  uint64_t v247;
  _OWORD v248[4];
  void *v249;
  uint64_t v250;
  _BYTE v251[64];
  __int128 v252;
  uint64_t v253;
  unsigned int v254;
  _BYTE v255[64];
  __int128 v256;
  char v257;
  llvm::MachineOperand *v258;
  __int128 v259;
  uint64_t v260;
  unsigned __int8 v261;
  void *v262;
  unsigned int v263;
  int v264;
  _QWORD v265[24];

  v2 = a2;
  v265[21] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 2);
  a1[34] = v4;
  a1[31] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  a1[32] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[34] + 176))(a1[34]);
  v241 = a1;
  a1[33] = *((_QWORD *)v2 + 5);
  v5 = *((_QWORD *)v2 + 43);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5) & 1) != 0)
  {
    hasAddressTaken = 0;
  }
  else
  {
    v7 = (llvm::Function *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 568))(v5);
    if (v7)
      hasAddressTaken = llvm::Function::hasAddressTaken(v7, 0, 0, 1, 0, 0);
    else
      hasAddressTaken = 1;
  }
  v8 = a1[34];
  v228 = v2;
  if (*(_BYTE *)(v8 + 318) || !*(_BYTE *)(v8 + 343))
    goto LABEL_7;
  v73 = *(_DWORD *)(*((_QWORD *)v2 + 1) + 544) == 1 ? 1 : hasAddressTaken;
  if ((v73 & 1) != 0 || (*(_WORD *)(*(_QWORD *)v2 + 18) & 0x3FF0) == 0x640)
    goto LABEL_7;
  v244 = 0;
  v245 = 0;
  v243 = (uint64_t *)&v244;
  v74 = (_QWORD *)((char *)v2 + 320);
  v75 = (_QWORD *)*((_QWORD *)v2 + 41);
  if (v75 == (_QWORD *)((char *)v2 + 320))
    goto LABEL_572;
  v236 = v5;
  v232 = (char *)&v259 + 8;
  v231 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v239 = (_QWORD *)((char *)v2 + 320);
  do
  {
    for (i = v75[7]; (_QWORD *)i != v75 + 6; i = *(_QWORD *)(i + 8))
    {
      if ((*(_BYTE *)(*(_QWORD *)(i + 16) + 9) & 0x20) == 0)
        goto LABEL_271;
      v77 = *(_QWORD *)(i + 32);
      if ((*(_DWORD *)v77 & 0xFFF00) != 0)
        goto LABEL_271;
      v78 = *(unsigned int *)(v77 + 4);
      v79 = a1[33];
      v80 = (uint64_t *)((v78 & 0x80000000) != 0
                      ? *(_QWORD *)(v79 + 24) + 16 * (v78 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v79 + 272) + 8 * v78);
      v81 = *v80;
      if (!v81)
        goto LABEL_271;
      if ((*(_BYTE *)(v81 + 3) & 1) == 0)
      {
        v81 = *(_QWORD *)(v81 + 24);
        if (!v81 || (*(_BYTE *)(v81 + 3) & 1) == 0)
          goto LABEL_271;
      }
      v82 = *(_QWORD *)(v81 + 24);
      if (v82)
      {
        v83 = (*(_BYTE *)(v82 + 3) & 1) == 0;
        if ((v78 & 0x80000000) == 0)
          goto LABEL_271;
      }
      else
      {
        v83 = 1;
        if ((v78 & 0x80000000) == 0)
          goto LABEL_271;
      }
      if (!v83 || *(_BYTE *)(v77 + 64) != 1)
      {
LABEL_271:
        if ((*(_BYTE *)i & 4) != 0)
          continue;
        goto LABEL_399;
      }
      *(_QWORD *)&v252 = v255;
      *((_QWORD *)&v252 + 1) = v255;
      v253 = 8;
      v254 = 0;
      v84 = v78 & 0x7FFFFFFF;
      v85 = *(_QWORD *)(*(_QWORD *)(v79 + 24) + 16 * v84 + 8);
      if (!v85)
      {
LABEL_289:
        v86 = 0;
        v87 = 1;
        v88 = 1;
        goto LABEL_290;
      }
      while ((*(_BYTE *)(v85 + 3) & 1) != 0)
      {
        v85 = *(_QWORD *)(v85 + 24);
        if (!v85)
          goto LABEL_289;
      }
      v86 = 0;
      v88 = 1;
      v87 = 1;
LABEL_304:
      v99 = *(_QWORD *)(v85 + 8);
      v100 = **(unsigned __int16 **)(v99 + 16);
      if ((v100 - 5396) > 0x1DF)
      {
        v103 = v100 - 1452;
        v104 = v100 - 971;
        v105 = v103 >= 0x90 && v104 > 0xF;
        if (!v105)
        {
          v106 = *(_QWORD *)(v99 + 32);
          v107 = (unint64_t)(v85 - v106) >> 5;
          if ((_DWORD)v107 == 3
            || (*(_BYTE *)(v106 + 160) == 1 ? (v108 = 6) : (v108 = 7),
                *(_BYTE *)(v106 + 32 * v108) == 1 ? (v109 = 1) : (v109 = 2),
                v109 + v108 == (_DWORD)v107))
          {
            v88 = 0;
          }
        }
      }
      else
      {
        v101 = *(_QWORD *)(v99 + 32);
        if (*(_BYTE *)(v101 + 64) != 1)
          goto LABEL_309;
        v102 = 160;
        if (*(_BYTE *)(v101 + 96) == 1)
          v102 = 128;
        if (*(_BYTE *)(v101 + v102) != 1)
LABEL_309:
          v87 = 0;
      }
      v110 = sub_1C477672C((uint64_t)&v252, *(_QWORD *)(v85 + 8));
      if (*((_QWORD *)&v252 + 1) == (_QWORD)v252)
        v111 = (uint64_t *)((char *)&v253 + 4);
      else
        v111 = &v253;
      if (v110 != (_QWORD *)(*((_QWORD *)&v252 + 1) + 8 * *(unsigned int *)v111))
      {
LABEL_350:
        while (1)
        {
          v85 = *(_QWORD *)(v85 + 24);
          if (!v85)
            break;
          if ((*(_BYTE *)(v85 + 3) & 1) == 0)
            goto LABEL_304;
        }
LABEL_290:
        if ((v88 & 1) == 0 || (v87 & 1) == 0)
          goto LABEL_394;
        v89 = a1[32];
        v90 = (llvm::MachineOperand *)(*(_QWORD *)(*(_QWORD *)(i + 32) + 80) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(v89 + 264) + 24 * (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[33] + 24) + 16 * v84) & 0xFFFFFFFFFFFFFFF8) + 24) + *(_DWORD *)(v89 + 272) * ((*(_QWORD *)(v89 + 248) - *(_QWORD *)(v89 + 240)) >> 3))) == 32) << 63));
        v91 = v244;
        if (!v244)
          goto LABEL_302;
        v92 = &v244;
        do
        {
          v93 = v92;
          v94 = v91;
          v95 = v91[4];
          v96 = (uint64_t **)(v91 + 1);
          if (v95 >= (unint64_t)v90)
          {
            v96 = (uint64_t **)v94;
            v92 = (uint64_t **)v94;
          }
          v91 = *v96;
        }
        while (v91);
        if (v92 == &v244 || (v95 >= (unint64_t)v90 ? (v97 = v94) : (v97 = v93), (unint64_t)v90 < v97[4]))
        {
LABEL_302:
          v247 = 1;
          v248[0] = v231;
          v248[1] = v231;
          v248[2] = v231;
          v248[3] = v231;
          v249 = v251;
          v250 = 0x800000000;
          v98 = (v86 << 16) | 1;
          LODWORD(__p) = v98;
          v258 = (llvm::MachineOperand *)i;
          v122 = ((i >> 4) ^ (i >> 9)) & 7;
          v123 = (_QWORD *)v248 + v122;
          v124 = *v123;
          if (i != *v123)
          {
            v125 = 0;
            v126 = 1;
            while (v124 != -4096)
            {
              if (v125)
                v127 = 0;
              else
                v127 = v124 == -8192;
              if (v127)
                v125 = v123;
              v128 = v122 + v126++;
              v122 = v128 & 7;
              v123 = (_QWORD *)v248 + v122;
              v124 = *v123;
              if (i == *v123)
                goto LABEL_369;
            }
            if (v125)
              v129 = v125;
            else
              v129 = v123;
            v130 = sub_1C486D2E8((uint64_t)&v247, (uint64_t)&v258, &v258, v129);
            *v130 = v258;
            v131 = v258;
            v132 = v250;
            if (v250 >= (unint64_t)HIDWORD(v250))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v249, (uint64_t)v251, v250 + 1, 8);
              v132 = v250;
            }
            *((_QWORD *)v249 + v132) = v131;
            v98 = (int)__p;
            LODWORD(v250) = v250 + 1;
          }
LABEL_369:
          v258 = v90;
          LODWORD(v259) = v98;
          sub_1C486D878((int *)&v259 + 2, (uint64_t)&v247);
          v133 = v244;
          v134 = v258;
          v135 = &v244;
          v136 = &v244;
          if (v244)
          {
            while (1)
            {
              while (1)
              {
                v136 = (uint64_t **)v133;
                v137 = v133[4];
                if ((unint64_t)v258 >= v137)
                  break;
                v133 = *v136;
                v135 = v136;
                if (!*v136)
                  goto LABEL_376;
              }
              if (v137 >= (unint64_t)v258)
                goto LABEL_386;
              v133 = v136[1];
              if (!v133)
              {
                v135 = v136 + 1;
                break;
              }
            }
          }
LABEL_376:
          v138 = (char *)operator new(0xC8uLL);
          *(_QWORD *)&v256 = v138;
          *((_QWORD *)&v256 + 1) = &v244;
          *((_QWORD *)v138 + 4) = v134;
          *((_DWORD *)v138 + 10) = v259;
          *((_QWORD *)v138 + 6) = 1;
          *(int64x2_t *)(v138 + 56) = v231;
          *(int64x2_t *)(v138 + 72) = v231;
          *(int64x2_t *)(v138 + 88) = v231;
          *(int64x2_t *)(v138 + 104) = v231;
          sub_1C486D78C((unsigned int *)v138 + 12, (unsigned int *)&v259 + 2);
          v139 = v138 + 136;
          *((_QWORD *)v138 + 15) = v138 + 136;
          *((_QWORD *)v138 + 16) = 0x800000000;
          v140 = v263;
          if (v263)
          {
            if (v262 == v265)
            {
              if (v263 < 9)
              {
                v141 = v265;
                v142 = v263;
                goto LABEL_380;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v138 + 120), (uint64_t)(v138 + 136), v263, 8);
              v142 = v263;
              if (v263)
              {
                v141 = v262;
                v139 = (void *)*((_QWORD *)v138 + 15);
LABEL_380:
                memcpy(v139, v141, 8 * v142);
              }
              *((_DWORD *)v138 + 32) = v140;
            }
            else
            {
              *((_QWORD *)v138 + 15) = v262;
              v164 = v264;
              *((_DWORD *)v138 + 32) = v140;
              *((_DWORD *)v138 + 33) = v164;
              v262 = v265;
              v264 = 0;
            }
            v263 = 0;
          }
          v257 = 1;
          v143 = (uint64_t *)v256;
          *(_QWORD *)v256 = 0;
          v143[1] = 0;
          v143[2] = (uint64_t)v136;
          *v135 = v143;
          if (*v243)
          {
            v243 = (uint64_t *)*v243;
            v143 = *v135;
          }
          sub_1C4768E74(v244, v143);
          ++v245;
          *(_QWORD *)&v256 = 0;
          sub_1C486D724((uint64_t *)&v256);
LABEL_386:
          if (v262 != v265)
            free(v262);
          if ((BYTE8(v259) & 1) == 0)
            MEMORY[0x1CAA32FB4](v260, 8);
          if (v249 != v251)
            free(v249);
          if ((v247 & 1) == 0)
            MEMORY[0x1CAA32FB4](*(_QWORD *)&v248[0], 8);
          goto LABEL_394;
        }
        if (v95 >= (unint64_t)v90)
          v144 = v94;
        else
          v144 = v93;
        *((_DWORD *)v144 + 10) += (v86 << 16) + 1;
        if (v95 >= (unint64_t)v90)
          v145 = (uint64_t)(v94 + 6);
        else
          v145 = (uint64_t)(v93 + 6);
        v258 = (llvm::MachineOperand *)i;
        v146 = (uint64_t *)(v93 + 7);
        if (v95 >= (unint64_t)v90)
          v146 = v94 + 7;
        if ((*((_BYTE *)v144 + 48) & 1) != 0)
        {
          v148 = 8;
LABEL_416:
          v149 = v148 - 1;
          v150 = v149 & ((i >> 4) ^ (i >> 9));
          v151 = &v146[v150];
          v152 = *v151;
          if (i == *v151)
            goto LABEL_394;
          v153 = 0;
          v154 = 1;
          while (v152 != -4096)
          {
            if (v153)
              v155 = 0;
            else
              v155 = v152 == -8192;
            if (v155)
              v153 = v151;
            v156 = v150 + v154++;
            v150 = v156 & v149;
            v151 = &v146[v150];
            v152 = *v151;
            if (i == *v151)
              goto LABEL_394;
          }
          if (v153)
            v157 = v153;
          else
            v157 = v151;
        }
        else
        {
          if (v95 >= (unint64_t)v90)
            v147 = v94;
          else
            v147 = v93;
          v148 = v147[16];
          if (v148)
          {
            v146 = (uint64_t *)*((_QWORD *)v144 + 7);
            goto LABEL_416;
          }
          v157 = 0;
        }
        v158 = sub_1C486D2E8(v145, (uint64_t)&v258, &v258, v157);
        *v158 = v258;
        if (v95 >= (unint64_t)v90)
          v159 = v94;
        else
          v159 = v93;
        if (v95 >= (unint64_t)v90)
          v160 = (uint64_t)(v94 + 15);
        else
          v160 = (uint64_t)(v93 + 15);
        v161 = v258;
        v162 = *((unsigned int *)v159 + 32);
        if (v162 >= *((unsigned int *)v159 + 33))
        {
          if (v95 >= (unint64_t)v90)
            v163 = (uint64_t)(v94 + 17);
          else
            v163 = (uint64_t)(v93 + 17);
          llvm::SmallVectorBase<unsigned int>::grow_pod(v160, v163, v162 + 1, 8);
          v162 = *((unsigned int *)v159 + 32);
        }
        *(_QWORD *)(v159[15] + 8 * v162) = v161;
        ++*((_DWORD *)v159 + 32);
        goto LABEL_394;
      }
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v252, v99);
      v112 = *(unsigned __int16 **)(v99 + 16);
      v113 = *v112;
      v114 = v113 - 9;
      if (((v113 - 9) > 0x3C || ((1 << (v113 - 9)) & 0x1000000000000605) == 0)
        && v113 != 0)
      {
        v117 = *((_QWORD *)v112 + 1);
        if ((v117 & 0x10) == 0)
        {
          ++v86;
          v105 = v114 > 0x3C;
          v118 = (1 << v114) & 0x1000000000000405;
          v120 = !v105 && v118 != 0 || v113 == 0;
          if (v120 || (v112[8] & 1) != 0)
            goto LABEL_350;
          v121 = *(_WORD *)(v99 + 44);
          if ((v121 & 0xC) == 0 || (v121 & 4) != 0)
          {
            if ((v117 & 0x400) != 0)
              goto LABEL_350;
          }
          else
          {
            if ((v117 & 0x400) != 0)
              goto LABEL_350;
            while ((*(_WORD *)(v99 + 44) & 8) != 0)
            {
              v99 = *(_QWORD *)(v99 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v99 + 16) + 9) & 4) != 0)
                goto LABEL_350;
            }
          }
        }
      }
LABEL_394:
      if (*((_QWORD *)&v252 + 1) != (_QWORD)v252)
        free(*((void **)&v252 + 1));
      v74 = v239;
      if (i)
        goto LABEL_271;
LABEL_399:
      while ((*(_WORD *)(i + 44) & 8) != 0)
        i = *(_QWORD *)(i + 8);
    }
    v75 = (_QWORD *)v75[1];
  }
  while (v75 != v74);
  if (v245)
  {
    v165 = 0;
    v240 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      v166 = -1;
      __p = (void *)-1;
      v247 = -1;
      v167 = v243;
      if (v243 == (uint64_t *)&v244)
        goto LABEL_480;
      v168 = 0;
      do
      {
        v258 = (llvm::MachineOperand *)v167[4];
        LODWORD(v259) = *((_DWORD *)v167 + 10);
        sub_1C486D878((int *)&v259 + 2, (uint64_t)(v167 + 6));
        if (v259 > v168)
        {
          __p = v258;
          v168 = v259;
        }
        if (v262 != v265)
          free(v262);
        if ((BYTE8(v259) & 1) == 0)
          MEMORY[0x1CAA32FB4](v260, 8);
        v169 = (uint64_t *)v167[1];
        if (v169)
        {
          do
          {
            v170 = (uint64_t **)v169;
            v169 = (uint64_t *)*v169;
          }
          while (v169);
        }
        else
        {
          do
          {
            v170 = (uint64_t **)v167[2];
            v63 = *v170 == v167;
            v167 = (uint64_t *)v170;
          }
          while (!v63);
        }
        v167 = (uint64_t *)v170;
      }
      while (v170 != &v244);
      v166 = (uint64_t)__p;
      if (((unint64_t)__p & 0x8000000000000000) != 0)
      {
LABEL_480:
        v175 = 519;
      }
      else
      {
        v171 = v243;
        if (v243 != (uint64_t *)&v244)
        {
          v172 = 0;
          do
          {
            v258 = (llvm::MachineOperand *)v171[4];
            LODWORD(v259) = *((_DWORD *)v171 + 10);
            sub_1C486D878((int *)&v259 + 2, (uint64_t)(v171 + 6));
            if (v259 > v172 && ((unint64_t)v258 & 0x8000000000000000) == 0 && v258 != __p)
            {
              v247 = (uint64_t)v258;
              v172 = v259;
            }
            if (v262 != v265)
              free(v262);
            if ((BYTE8(v259) & 1) == 0)
              MEMORY[0x1CAA32FB4](v260, 8);
            v173 = (uint64_t *)v171[1];
            if (v173)
            {
              do
              {
                v174 = (uint64_t **)v173;
                v173 = (uint64_t *)*v173;
              }
              while (v173);
            }
            else
            {
              do
              {
                v174 = (uint64_t **)v171[2];
                v63 = *v174 == v171;
                v171 = (uint64_t *)v174;
              }
              while (!v63);
            }
            v171 = (uint64_t *)v174;
          }
          while (v174 != &v244);
        }
        v175 = 263;
        if (v247 != -1)
          v166 |= v247 << 16;
      }
      v176 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v236 + 224))(v236, v166);
      v177 = v176;
      if ((v176 & 0xFF00000000) == 0)
      {
        v178 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v236 + 376))(v236, 0);
        if ((_DWORD)v178 == -1)
          break;
        v177 = v178;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v236 + 232))(v236, v166, v178);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v236 + 328))(v236, v166);
      }
      v237 = v165;
      v179 = 0;
      v180 = 0;
      v181 = 2 * v177;
      v182 = 1;
      do
      {
        v183 = v182;
        v184 = (unint64_t)*(&__p + v180);
        if (v184 != -1)
        {
          v185 = v244;
          v186 = &v244;
          v187 = (llvm::MachineOperand *)&v244;
          if (v244)
          {
            while (1)
            {
              while (1)
              {
                v187 = (llvm::MachineOperand *)v185;
                v188 = v185[4];
                if (v184 >= v188)
                  break;
                v185 = *(uint64_t **)v187;
                v186 = (uint64_t **)v187;
                if (!*(_QWORD *)v187)
                  goto LABEL_495;
              }
              if (v188 >= v184)
                break;
              v185 = (uint64_t *)*((_QWORD *)v187 + 1);
              if (!v185)
              {
                v186 = (uint64_t **)((char *)v187 + 8);
                goto LABEL_495;
              }
            }
          }
          else
          {
LABEL_495:
            v189 = (char *)operator new(0xC8uLL);
            v258 = (llvm::MachineOperand *)v189;
            *(_QWORD *)&v259 = &v244;
            *((_QWORD *)v189 + 4) = v184;
            *(_OWORD *)(v189 + 40) = 0u;
            *(_OWORD *)(v189 + 120) = 0u;
            *(_OWORD *)(v189 + 152) = 0u;
            *(_OWORD *)(v189 + 168) = 0u;
            *(_OWORD *)(v189 + 184) = 0u;
            *(_OWORD *)(v189 + 136) = 0u;
            *((_DWORD *)v189 + 12) = 1;
            *(int64x2_t *)(v189 + 56) = v240;
            *(int64x2_t *)(v189 + 72) = v240;
            *(int64x2_t *)(v189 + 88) = v240;
            *(int64x2_t *)(v189 + 104) = v240;
            *((_QWORD *)v189 + 15) = v189 + 136;
            *((_QWORD *)v189 + 16) = 0x800000000;
            BYTE8(v259) = 1;
            *(_QWORD *)v189 = 0;
            *((_QWORD *)v189 + 1) = 0;
            *((_QWORD *)v189 + 2) = v187;
            *v186 = (uint64_t *)v189;
            if (*v243)
            {
              v243 = (uint64_t *)*v243;
              v190 = *v186;
            }
            else
            {
              v190 = (uint64_t *)v189;
            }
            sub_1C4768E74(v244, v190);
            ++v245;
            v187 = v258;
            v258 = 0;
            sub_1C486D724((uint64_t *)&v258);
          }
          v191 = *((unsigned int *)v187 + 32);
          if ((_DWORD)v191)
          {
            v192 = (uint64_t *)*((_QWORD *)v187 + 15);
            v193 = &v192[v191];
            do
            {
              v194 = *v192;
              v195 = *(unsigned int *)(*(_QWORD *)(*v192 + 32) + 4);
              v196 = a1[33];
              if ((v195 & 0x80000000) != 0)
                v197 = (int **)(*(_QWORD *)(v196 + 24) + 16 * (v195 & 0x7FFFFFFF) + 8);
              else
                v197 = (int **)(*(_QWORD *)(v196 + 272) + 8 * v195);
              v198 = *v197;
              if (v198)
              {
                while ((*((_BYTE *)v198 + 3) & 1) != 0)
                {
                  v198 = (int *)*((_QWORD *)v198 + 3);
                  if (!v198)
                    goto LABEL_526;
                }
                do
                {
                  v200 = (unsigned int *)v198;
                  do
                    v198 = (int *)*((_QWORD *)v198 + 3);
                  while (v198 && (*((_BYTE *)v198 + 3) & 1) != 0);
                  v201 = *v200;
                  v202 = (*v200 & 0xFFF00) == 512;
                  if (!*v200)
                  {
                    v203 = *((_QWORD *)v200 + 2);
                    if (v203)
                    {
                      v204 = *((_QWORD *)v200 + 1);
                      if (v204)
                      {
                        v205 = *(_QWORD *)(v204 + 24);
                        if (v205)
                        {
                          v206 = *(_QWORD *)(v205 + 32);
                          if (v206)
                          {
                            v207 = *(_QWORD *)(v206 + 40);
                            v208 = v200[1];
                            if ((v208 & 0x80000000) != 0)
                              v199 = (uint64_t *)(*(_QWORD *)(v207 + 24) + 16 * (v208 & 0x7FFFFFFF) + 8);
                            else
                              v199 = (uint64_t *)(*(_QWORD *)(v207 + 272) + 8 * v208);
                            v209 = (int *)*v199;
                            v210 = (int *)*((_QWORD *)v200 + 3);
                            if ((unsigned int *)*v199 != v200)
                              v199 = (uint64_t *)(v203 + 24);
                            *v199 = (uint64_t)v210;
                            if (v210)
                              v211 = v210;
                            else
                              v211 = v209;
                            *((_QWORD *)v211 + 2) = v203;
                            *((_QWORD *)v200 + 2) = 0;
                            *((_QWORD *)v200 + 3) = 0;
                            v201 = *v200;
                          }
                        }
                      }
                    }
                  }
                  v200[4] = 64;
                  v200[6] = 0;
                  *v200 = v175 | v201 & 0xFFF00000;
                  v200[1] = v181 | (v179 | v202) & 1;
                }
                while (v198);
              }
LABEL_526:
              v212 = v194;
              if ((*(_BYTE *)v194 & 4) == 0)
              {
                v212 = v194;
                if ((*(_WORD *)(v194 + 44) & 8) != 0)
                {
                  v212 = v194;
                  do
                    v212 = *(_QWORD *)(v212 + 8);
                  while ((*(_WORD *)(v212 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(v194 + 24) + 40, v194, *(_QWORD *)(v212 + 8));
              ++v192;
            }
            while (v192 != v193);
          }
          if (v244)
          {
            v213 = (unint64_t)*(&__p + v180);
            v214 = v244;
            v215 = (uint64_t *)&v244;
            do
            {
              v216 = v215;
              v217 = v214;
              v218 = v214[4];
              v219 = (uint64_t **)(v214 + 1);
              if (v218 >= v213)
                v215 = v214;
              else
                ++v214;
              v214 = (uint64_t *)*v214;
            }
            while (v214);
            if (v215 != (uint64_t *)&v244)
            {
              v220 = v218 >= v213 ? v217 : v216;
              if (v213 >= v220[4])
              {
                if (v218 < v213)
                  v219 = (uint64_t **)(v216 + 1);
                v221 = *v219;
                v222 = v215;
                if (*v219)
                {
                  do
                  {
                    v223 = v221;
                    v221 = (uint64_t *)*v221;
                  }
                  while (v221);
                }
                else
                {
                  do
                  {
                    v223 = (uint64_t *)v222[2];
                    v63 = *v223 == (_QWORD)v222;
                    v222 = v223;
                  }
                  while (!v63);
                }
                if (v243 == v215)
                  v243 = v223;
                --v245;
                sub_1C485B6E0(v244, v215);
                if (v218 >= v213)
                  v224 = v217;
                else
                  v224 = v216;
                v225 = (void *)v224[15];
                v226 = v216 + 17;
                if (v218 >= v213)
                  v226 = v217 + 17;
                if (v225 != v226)
                  free(v225);
                if (v218 >= v213)
                  v227 = v217;
                else
                  v227 = v216;
                if ((v227[6] & 1) == 0)
                  MEMORY[0x1CAA32FB4](v227[7], 8);
                operator delete(v215);
              }
            }
          }
        }
        v182 = 0;
        v179 = 1;
        v180 = 1;
      }
      while ((v183 & 1) != 0);
      if (v237 > 0x1E)
        break;
      v165 = v237 + 1;
    }
    while (v245);
  }
LABEL_572:
  sub_1C486DA00(v244);
  v2 = v228;
LABEL_7:
  v9 = (_QWORD *)*((_QWORD *)v2 + 41);
  v229 = (_QWORD *)((char *)v2 + 320);
  if (v9 == (_QWORD *)((char *)v2 + 320))
    goto LABEL_219;
  while (2)
  {
    __p = v248;
    v247 = 0x400000000;
    v230 = v9;
    v10 = v9[7];
    v238 = v9 + 6;
    if ((_QWORD *)v10 == v9 + 6)
      goto LABEL_216;
    __src = 0;
    v233 = 0;
    v235 = *(unsigned __int8 *)(v241[34] + 344);
    while (2)
    {
      v11 = *(unsigned __int16 **)(v10 + 16);
      v12 = *v11;
      if ((unsigned __int16)(v12 - 1) <= 1u && (*(_BYTE *)(*(_QWORD *)(v10 + 32) + 48) & 8) != 0)
        goto LABEL_19;
      v13 = *(unsigned __int16 *)(v10 + 44);
      v63 = (v13 & 0xC) == 0;
      v14 = (v13 >> 2) & 1;
      if (v63)
        LOBYTE(v14) = 1;
      v15 = *((_QWORD *)v11 + 1);
      if ((v14 & 1) != 0)
      {
        if ((v15 & 0x80000) != 0)
          goto LABEL_19;
      }
      else
      {
        v45 = v10;
        if ((v15 & 0x80000) != 0)
          goto LABEL_19;
        while ((*(_WORD *)(v45 + 44) & 8) != 0)
        {
          v45 = *(_QWORD *)(v45 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v45 + 16) + 10) & 8) != 0)
            goto LABEL_19;
        }
      }
      if ((unsigned __int16)(v12 - 1) <= 1u && (*(_BYTE *)(*(_QWORD *)(v10 + 32) + 48) & 0x10) != 0)
      {
LABEL_19:
        if (v12 <= 4483)
        {
          if (v12 > 4133)
          {
            switch(v12)
            {
              case 4284:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4286;
                goto LABEL_30;
              case 4285:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4287;
                goto LABEL_30;
              case 4286:
              case 4287:
              case 4288:
              case 4289:
              case 4292:
              case 4293:
              case 4294:
              case 4295:
              case 4298:
              case 4299:
              case 4300:
              case 4301:
              case 4304:
              case 4305:
              case 4306:
              case 4307:
              case 4310:
              case 4311:
              case 4312:
              case 4313:
              case 4316:
              case 4317:
              case 4318:
              case 4319:
              case 4322:
              case 4323:
              case 4324:
              case 4325:
              case 4328:
              case 4329:
              case 4330:
              case 4331:
              case 4334:
              case 4335:
              case 4338:
              case 4339:
              case 4342:
              case 4343:
              case 4346:
              case 4347:
              case 4350:
              case 4351:
              case 4354:
              case 4355:
              case 4358:
              case 4359:
                goto LABEL_105;
              case 4290:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4292;
                goto LABEL_30;
              case 4291:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4293;
                goto LABEL_30;
              case 4296:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4298;
                goto LABEL_30;
              case 4297:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4299;
                goto LABEL_30;
              case 4302:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4304;
                goto LABEL_30;
              case 4303:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4305;
                goto LABEL_30;
              case 4308:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4310;
                goto LABEL_30;
              case 4309:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4311;
                goto LABEL_30;
              case 4314:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4316;
                goto LABEL_30;
              case 4315:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4317;
                goto LABEL_30;
              case 4320:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4322;
                goto LABEL_30;
              case 4321:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4323;
                goto LABEL_30;
              case 4326:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4328;
                goto LABEL_30;
              case 4327:
                v18 = 0;
                v16 = 0;
                v17 = 1;
                v12 = 4329;
                goto LABEL_30;
              case 4332:
              case 4333:
              case 4336:
              case 4337:
              case 4340:
              case 4341:
              case 4344:
              case 4345:
              case 4348:
              case 4349:
              case 4352:
              case 4353:
              case 4356:
              case 4357:
              case 4360:
              case 4361:
                goto LABEL_28;
              default:
                switch(v12)
                {
                  case 4134:
                    v18 = 0;
                    v16 = 0;
                    v17 = 0;
                    v12 = 4136;
                    goto LABEL_30;
                  case 4135:
                    v18 = 0;
                    v16 = 0;
                    v17 = 0;
                    v12 = 4137;
                    goto LABEL_30;
                  case 4136:
                  case 4137:
                  case 4138:
                  case 4139:
                  case 4140:
                  case 4141:
                    goto LABEL_105;
                  case 4142:
                    v18 = 0;
                    v16 = 0;
                    v17 = 0;
                    v12 = 4144;
                    goto LABEL_30;
                  case 4143:
                    v18 = 0;
                    v16 = 0;
                    v17 = 0;
                    v12 = 4145;
                    goto LABEL_30;
                  default:
                    switch(v12)
                    {
                      case 4150:
                        v18 = 0;
                        v16 = 0;
                        v17 = 0;
                        v12 = 4152;
                        goto LABEL_30;
                      case 4151:
                        v18 = 0;
                        v16 = 0;
                        v17 = 0;
                        v12 = 4153;
                        goto LABEL_30;
                      case 4158:
                        v18 = 0;
                        v16 = 0;
                        v17 = 0;
                        v12 = 4160;
                        goto LABEL_30;
                      case 4159:
                        v18 = 0;
                        v16 = 0;
                        v17 = 0;
                        v12 = 4161;
                        goto LABEL_30;
                      default:
                        goto LABEL_105;
                    }
                }
            }
          }
          else if (v12 > 4035)
          {
            switch(v12)
            {
              case 4036:
                v16 = 0;
                v18 = 1;
                v12 = 4034;
                goto LABEL_29;
              case 4037:
                v16 = 0;
                v18 = 1;
                v12 = 4035;
                goto LABEL_29;
              case 4038:
              case 4039:
              case 4040:
              case 4041:
              case 4042:
              case 4043:
                goto LABEL_105;
              case 4044:
                v16 = 0;
                v18 = 1;
                v12 = 4042;
                goto LABEL_29;
              case 4045:
                v16 = 0;
                v18 = 1;
                v12 = 4043;
                goto LABEL_29;
              default:
                switch(v12)
                {
                  case 4102:
                    v18 = 0;
                    v16 = 0;
                    v17 = 0;
                    v12 = 4104;
                    goto LABEL_30;
                  case 4103:
                    v18 = 0;
                    v16 = 0;
                    v17 = 0;
                    v12 = 4105;
                    goto LABEL_30;
                  case 4104:
                  case 4105:
                  case 4106:
                  case 4107:
                  case 4108:
                  case 4109:
                    goto LABEL_105;
                  case 4110:
                    v18 = 0;
                    v16 = 0;
                    v17 = 0;
                    v12 = 4112;
                    goto LABEL_30;
                  case 4111:
                    v18 = 0;
                    v16 = 0;
                    v17 = 0;
                    v12 = 4113;
                    goto LABEL_30;
                  default:
                    switch(v12)
                    {
                      case 4118:
                        v18 = 0;
                        v16 = 0;
                        v17 = 0;
                        v12 = 4120;
                        goto LABEL_30;
                      case 4119:
                        v18 = 0;
                        v16 = 0;
                        v17 = 0;
                        v12 = 4121;
                        goto LABEL_30;
                      case 4126:
                        v18 = 0;
                        v16 = 0;
                        v17 = 0;
                        v12 = 4128;
                        goto LABEL_30;
                      case 4127:
                        v18 = 0;
                        v16 = 0;
                        v17 = 0;
                        v12 = 4129;
                        goto LABEL_30;
                      default:
                        goto LABEL_105;
                    }
                }
            }
          }
          else
          {
            switch(v12)
            {
              case 2164:
                v16 = 0;
                v17 = 0;
                v18 = 1;
                v12 = 2166;
                goto LABEL_30;
              case 2165:
                v16 = 0;
                v17 = 0;
                v18 = 1;
                v12 = 2167;
                goto LABEL_30;
              case 2166:
              case 2167:
              case 2170:
              case 2171:
              case 2174:
              case 2175:
                goto LABEL_105;
              case 2168:
                v16 = 0;
                v17 = 0;
                v18 = 1;
                v12 = 2170;
                goto LABEL_30;
              case 2169:
                v16 = 0;
                v17 = 0;
                v18 = 1;
                v12 = 2171;
                goto LABEL_30;
              case 2172:
                v16 = 0;
                v17 = 0;
                v18 = 1;
                v12 = 2174;
                goto LABEL_30;
              case 2173:
                v16 = 0;
                v17 = 0;
                v18 = 1;
                v12 = 2175;
                goto LABEL_30;
              case 2176:
                v16 = 0;
                v17 = 0;
                v18 = 1;
                v12 = 2178;
                goto LABEL_30;
              case 2177:
                v16 = 0;
                v17 = 0;
                v18 = 1;
                v12 = 2179;
                goto LABEL_30;
              default:
                v38 = v12 - 4020;
                v16 = 0;
                v18 = 1;
                v12 = 4018;
                v17 = 1;
                switch(v38)
                {
                  case 0:
                    goto LABEL_30;
                  case 1:
                    v16 = 0;
                    v12 = 4019;
                    goto LABEL_30;
                  case 8:
                    v16 = 0;
                    v12 = 4026;
                    goto LABEL_30;
                  case 9:
                    v16 = 0;
                    v12 = 4027;
                    goto LABEL_30;
                  default:
                    goto LABEL_105;
                }
            }
          }
          goto LABEL_105;
        }
        if (v12 > 8203)
        {
          if (v12 > 8239)
          {
            switch(v12)
            {
              case 8240:
                v18 = 0;
                v16 = 0;
                v17 = 0;
                v12 = 8242;
                break;
              case 8241:
                v18 = 0;
                v16 = 0;
                v17 = 0;
                v12 = 8243;
                break;
              case 8242:
              case 8243:
              case 8244:
              case 8245:
              case 8246:
              case 8247:
                goto LABEL_105;
              case 8248:
                v18 = 0;
                v16 = 0;
                v17 = 0;
                v12 = 8250;
                break;
              case 8249:
                v18 = 0;
                v16 = 0;
                v17 = 0;
                v12 = 8251;
                break;
              default:
                if (v12 == 8256)
                {
                  v18 = 0;
                  v16 = 0;
                  v17 = 0;
                  v12 = 8258;
                }
                else
                {
                  if (v12 != 8257)
                    goto LABEL_105;
                  v18 = 0;
                  v16 = 0;
                  v17 = 0;
                  v12 = 8259;
                }
                break;
            }
          }
          else if (v12 > 8214)
          {
            switch(v12)
            {
              case 8224:
                v18 = 0;
                v16 = 0;
                v17 = 0;
                v12 = 8226;
                break;
              case 8225:
                v18 = 0;
                v16 = 0;
                v17 = 0;
                v12 = 8227;
                break;
              case 8226:
              case 8227:
              case 8228:
              case 8229:
              case 8230:
              case 8231:
                goto LABEL_105;
              case 8232:
                v18 = 0;
                v16 = 0;
                v17 = 0;
                v12 = 8234;
                break;
              case 8233:
                v18 = 0;
                v16 = 0;
                v17 = 0;
                v12 = 8235;
                break;
              default:
                if (v12 != 8215)
                  goto LABEL_105;
                v18 = 0;
                v16 = 0;
                v17 = 0;
                v12 = 8217;
                break;
            }
          }
          else
          {
            switch(v12)
            {
              case 8204:
                v18 = 0;
                v16 = 0;
                v17 = 0;
                v12 = 8206;
                break;
              case 8205:
                v18 = 0;
                v16 = 0;
                v17 = 0;
                v12 = 8207;
                break;
              case 8214:
                v18 = 0;
                v16 = 0;
                v17 = 0;
                v12 = 8216;
                break;
              default:
                goto LABEL_105;
            }
          }
        }
        else
        {
          switch(v12)
          {
            case 4484:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4486;
              break;
            case 4485:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4487;
              break;
            case 4486:
            case 4487:
            case 4488:
            case 4489:
            case 4492:
            case 4493:
            case 4494:
            case 4495:
            case 4498:
            case 4499:
            case 4500:
            case 4501:
            case 4504:
            case 4505:
            case 4506:
            case 4507:
            case 4510:
            case 4511:
            case 4512:
            case 4513:
            case 4516:
            case 4517:
            case 4518:
            case 4519:
            case 4522:
            case 4523:
            case 4524:
            case 4525:
            case 4528:
            case 4529:
            case 4530:
            case 4531:
            case 4534:
            case 4535:
            case 4538:
            case 4539:
            case 4542:
            case 4543:
            case 4546:
            case 4547:
            case 4550:
            case 4551:
            case 4554:
            case 4555:
            case 4558:
            case 4559:
              goto LABEL_105;
            case 4490:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4492;
              break;
            case 4491:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4493;
              break;
            case 4496:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4498;
              break;
            case 4497:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4499;
              break;
            case 4502:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4504;
              break;
            case 4503:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4505;
              break;
            case 4508:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4510;
              break;
            case 4509:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4511;
              break;
            case 4514:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4516;
              break;
            case 4515:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4517;
              break;
            case 4520:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4522;
              break;
            case 4521:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4523;
              break;
            case 4526:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4528;
              break;
            case 4527:
              v18 = 0;
              v16 = 0;
              v17 = 1;
              v12 = 4529;
              break;
            case 4532:
            case 4533:
            case 4536:
            case 4537:
            case 4540:
            case 4541:
            case 4544:
            case 4545:
            case 4548:
            case 4549:
            case 4552:
            case 4553:
            case 4556:
            case 4557:
            case 4560:
            case 4561:
LABEL_28:
              v18 = 0;
              v16 = 1;
LABEL_29:
              v17 = 1;
              break;
            default:
              if (v12 == 8194)
              {
                v18 = 0;
                v16 = 0;
                v17 = 0;
                v12 = 8196;
              }
              else
              {
                if (v12 != 8195)
                  goto LABEL_105;
                v18 = 0;
                v16 = 0;
                v17 = 0;
                v12 = 8197;
              }
              break;
          }
        }
LABEL_30:
        v19 = sub_1C4B138B4(v12);
        v20 = *(_DWORD *)(*(_QWORD *)(v10 + 32) + 32 * v19 + 4);
        if (v235)
          v21 = v18 | v16;
        else
          v21 = 0;
        if (v17)
        {
          if (*(_BYTE *)(v241[34] + 318))
            v22 = 4580;
          else
            v22 = 742;
          sub_1C486DA64((uint64_t)&v258, v20, v241[33], v22, 2, v21);
          LOBYTE(v23) = (_BYTE)v258;
          v24 = HIDWORD(v258);
          v25 = v258 >> 8;
          v252 = v259;
          v26 = v260;
          v27 = HIDWORD(v260);
          if (!v261)
            goto LABEL_105;
          goto LABEL_57;
        }
        v29 = v241[33];
        v28 = v241[34];
        UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(v29, v20);
        if (!UniqueVRegDef)
          goto LABEL_55;
        v31 = UniqueVRegDef;
        if (**(_WORD **)(UniqueVRegDef + 16) != 18 || *(_DWORD *)(UniqueVRegDef + 40) != 5)
          goto LABEL_55;
        if (*(_BYTE *)(v28 + 318))
          v32 = 4578;
        else
          v32 = 738;
        sub_1C486DA64((uint64_t)&v258, *(_DWORD *)(*(_QWORD *)(UniqueVRegDef + 32) + 36), v29, v32, 4, v21);
        v33 = v261;
        if (v261)
        {
          v34 = *(_QWORD *)(v31 + 32);
          if (*(_QWORD *)(v34 + 80) != 25)
            goto LABEL_55;
          v35 = *(_BYTE *)(v28 + 318) ? 4578 : 738;
          sub_1C486DA64((uint64_t)&v252, *(_DWORD *)(v34 + 100), v29, v35, 4, v21);
          v33 = v255[0];
          if (v255[0])
          {
            if (*(_QWORD *)(*(_QWORD *)(v31 + 32) + 144) == 26)
            {
              LOBYTE(v23) = 0;
              v36 = DWORD1(v252) | ((unint64_t)v254 << 32);
              if ((HIDWORD(v258) | ((unint64_t)v260 << 32)) + 2 == v36)
              {
                v33 = 0;
                if (v36 <= 254)
                {
                  LODWORD(v232) = HIDWORD(v260);
                  v23 = v258 & 0xFFF000FF | 0x300;
                  v256 = v259;
                  __src = v23 >> 8;
                  v33 = 1;
                  v231.i32[0] = v260;
                  v233 = HIDWORD(v258);
                }
              }
              else
              {
                v33 = 0;
              }
LABEL_56:
              v252 = v256;
              v25 = __src;
              v27 = (int)v232;
              v26 = v231.u32[0];
              v24 = v233;
              if (!v33)
                goto LABEL_105;
LABEL_57:
              if (v18 && (v24 | (v26 << 32)) >= 256)
              {
                v37 = v12 - 4018;
                v12 = 4022;
                switch(v37)
                {
                  case 0:
                    break;
                  case 1:
                    v12 = 4023;
                    break;
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                    __break(1u);
                    return;
                  case 8:
                    v12 = 4030;
                    break;
                  case 9:
                    v12 = 4031;
                    break;
                  default:
                    __asm { BR              X9 }
                    return;
                }
              }
              v258 = (llvm::MachineOperand *)((char *)&v259 + 8);
              *(_QWORD *)&v259 = 0x800000000;
              sub_1C4778BB4((unsigned int *)&v258, (uint64_t)&v259 + 8, (_BYTE *)(*(_QWORD *)(v10 + 32) + 32 * v19), (_BYTE *)(*(_QWORD *)(v10 + 32) + 32 * *(unsigned int *)(v10 + 40)));
              v39 = v258;
              *(_DWORD *)v258 = v23 | (v25 << 8);
              *((_DWORD *)v39 + 1) = v24;
              *(_OWORD *)((char *)v39 + 8) = v252;
              *((_DWORD *)v39 + 6) = v26;
              *((_DWORD *)v39 + 7) = v27;
              while (1)
              {
                v40 = *(_DWORD *)(v10 + 40);
                if (v40 <= v19)
                  break;
                llvm::MachineInstr::removeOperand(v10, v40 - 1);
              }
              v41 = v258;
              if ((_DWORD)v259)
              {
                v42 = 32 * v259;
                do
                {
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, *(llvm::MachineFunction **)(*(_QWORD *)(v10 + 24) + 32), v41);
                  v41 = (llvm::MachineOperand *)((char *)v41 + 32);
                  v42 -= 32;
                }
                while (v42);
                v41 = v258;
              }
              if (v41 != (llvm::MachineOperand *)((char *)&v259 + 8))
                free(v41);
              *(_QWORD *)(v10 + 16) = *(_QWORD *)(v241[31] + 8) + 48 * v12;
              if (sub_1C4778650(v241[33], v20))
              {
                v43 = llvm::MachineRegisterInfo::getUniqueVRegDef(v241[33], v20);
                v44 = v247;
                if (v247 >= (unint64_t)HIDWORD(v247))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)v248, v247 + 1, 8);
                  v44 = v247;
                }
                *((_QWORD *)__p + v44) = v43;
                LODWORD(v247) = v247 + 1;
              }
              goto LABEL_105;
            }
LABEL_55:
            LOBYTE(v23) = 0;
            v33 = 0;
            goto LABEL_56;
          }
        }
        LOBYTE(v23) = 0;
        goto LABEL_56;
      }
      if ((v14 & 1) != 0)
      {
        if ((v15 & 0x100000) != 0)
          goto LABEL_19;
      }
      else
      {
        v46 = v10;
        if ((v15 & 0x100000) != 0)
          goto LABEL_19;
        while ((*(_WORD *)(v46 + 44) & 8) != 0)
        {
          v46 = *(_QWORD *)(v46 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v46 + 16) + 10) & 0x10) != 0)
            goto LABEL_19;
        }
      }
LABEL_105:
      if ((*(_BYTE *)v10 & 4) == 0)
      {
        while ((*(_WORD *)(v10 + 44) & 8) != 0)
          v10 = *(_QWORD *)(v10 + 8);
      }
      v10 = *(_QWORD *)(v10 + 8);
      if ((_QWORD *)v10 != v238)
        continue;
      break;
    }
    while ((_DWORD)v247)
    {
      v47 = *((_QWORD *)__p + v247 - 1);
      LODWORD(v247) = v247 - 1;
      if (**(_WORD **)(v47 + 16) == 18)
      {
        v48 = llvm::MachineRegisterInfo::getUniqueVRegDef(v241[33], *(_DWORD *)(*(_QWORD *)(v47 + 32) + 36));
        v49 = llvm::MachineRegisterInfo::getUniqueVRegDef(v241[33], *(_DWORD *)(*(_QWORD *)(v47 + 32) + 100));
        v50 = v47;
        if ((*(_BYTE *)v47 & 4) == 0)
        {
          v50 = v47;
          if ((*(_WORD *)(v47 + 44) & 8) != 0)
          {
            v50 = v47;
            do
              v50 = *(_QWORD *)(v50 + 8);
            while ((*(_WORD *)(v50 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v47 + 24) + 40, v47, *(_QWORD *)(v50 + 8));
        if (v48 && sub_1C4778650(v241[33], *(_DWORD *)(*(_QWORD *)(v48 + 32) + 4)))
        {
          v51 = v48;
          if ((*(_BYTE *)v48 & 4) == 0)
          {
            v51 = v48;
            if ((*(_WORD *)(v48 + 44) & 8) != 0)
            {
              v51 = v48;
              do
                v51 = *(_QWORD *)(v51 + 8);
              while ((*(_WORD *)(v51 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v48 + 24) + 40, v48, *(_QWORD *)(v51 + 8));
        }
        if (v48 == v49)
          continue;
        v47 = v49;
        if (!sub_1C4778650(v241[33], *(_DWORD *)(*(_QWORD *)(v49 + 32) + 4)))
          continue;
      }
      v52 = v47;
      if ((*(_BYTE *)v47 & 4) == 0)
      {
        v52 = v47;
        if ((*(_WORD *)(v47 + 44) & 8) != 0)
        {
          v52 = v47;
          do
            v52 = *(_QWORD *)(v52 + 8);
          while ((*(_WORD *)(v52 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v47 + 24) + 40, v47, *(_QWORD *)(v52 + 8));
    }
LABEL_216:
    if (__p != v248)
      free(__p);
    v9 = (_QWORD *)v230[1];
    if (v9 != v229)
      continue;
    break;
  }
LABEL_219:
  v53 = v241[34];
  if (*(_BYTE *)(v53 + 355) && (*(_WORD *)(*(_QWORD *)v228 + 18) & 0x3FF0) == 0x640)
  {
    v54 = *(unsigned __int8 *)(v53 + 318);
    v258 = v228;
    v247 = 0;
    *(_QWORD *)&v248[0] = 0;
    __p = 0;
    sub_1C486DB3C((char **)&__p, (uint64_t)&v258);
    v258 = (llvm::MachineOperand *)((char *)&v259 + 8);
    *(_QWORD *)&v259 = 0x2000000000;
    v56 = (char *)__p;
    v55 = (char *)v247;
    if ((void *)v247 == __p)
    {
      if (v247)
        goto LABEL_256;
    }
    else
    {
      v242 = v54;
      v57 = 0;
      do
      {
        v59 = (unint64_t *)*((_QWORD *)v55 - 1);
        v55 -= 8;
        v58 = v59;
        v60 = v59 + 6;
        for (j = v59[7]; (_QWORD *)j != v60; j = *(_QWORD *)(j + 8))
        {
          v62 = **(unsigned __int16 **)(j + 16);
          v63 = (v62 - 8188) > 0x1F || ((1 << (v62 + 4)) & 0xC0300C03) == 0;
          v64 = v62 - 4596;
          if (!v63 || v64 < 2)
          {
            if (v57 >= DWORD1(v259))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v258, (uint64_t)&v259 + 8, v57 + 1, 8);
              v57 = v259;
            }
            *((_QWORD *)v258 + v57) = j;
            v57 = v259 + 1;
            LODWORD(v259) = v259 + 1;
          }
          if ((*(_BYTE *)j & 4) == 0)
          {
            while ((*(_WORD *)(j + 44) & 8) != 0)
              j = *(_QWORD *)(j + 8);
          }
        }
      }
      while (v55 != v56);
      v66 = v258;
      if (v57)
      {
        v67 = v57;
        v68 = (uint64_t *)((char *)v258 + 8 * v57);
        if (v242)
          v69 = 1;
        else
          v69 = 2;
        LODWORD(v252) = v69;
        sub_1C486F820((uint64_t *)v258, v68, (unsigned int *)&v252, 126 - 2 * __clz(v67), 1);
        v70 = *v60 & 0xFFFFFFFFFFFFFFF8;
        if (!v70 || (*(_BYTE *)v70 & 4) == 0)
        {
          while ((*(_WORD *)(v70 + 44) & 4) != 0)
            v70 = *(_QWORD *)v70 & 0xFFFFFFFFFFFFFFF8;
        }
        v66 = v258;
        if ((_DWORD)v259)
        {
          v71 = 8 * v259;
          do
          {
            v72 = *(_QWORD *)v66;
            v66 = (llvm::MachineOperand *)((char *)v66 + 8);
            sub_1C48532D0(v58, (unint64_t *)v70, *(unint64_t **)(v72 + 24), (unint64_t *)v72);
            v71 -= 8;
          }
          while (v71);
          v66 = v258;
        }
      }
      if (v66 != (llvm::MachineOperand *)((char *)&v259 + 8))
        free(v66);
      v55 = (char *)__p;
      if (__p)
      {
LABEL_256:
        v247 = (uint64_t)v55;
        operator delete(v55);
      }
    }
  }
}

_QWORD *sub_1C486D2E8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 8;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 < 3 * v8)
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
    {
      v9 = *(_DWORD *)a1 & 1;
      goto LABEL_6;
    }
    sub_1C486D4BC(a1, v8);
    v20 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v21 = 8;
      goto LABEL_27;
    }
    v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
      v20 = *(_QWORD *)(a1 + 8);
LABEL_27:
      v9 = *(_DWORD *)a1 & 1;
      v22 = v21 - 1;
      v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
      a4 = (_QWORD *)(v20 + 8 * v23);
      v24 = *a4;
      if (*a3 == *a4)
        goto LABEL_6;
      v16 = 0;
      v25 = 1;
      while (v24 != -4096)
      {
        if (v16)
          v26 = 0;
        else
          v26 = v24 == -8192;
        if (v26)
          v16 = a4;
        v27 = v23 + v25++;
        v23 = v27 & v22;
        a4 = (_QWORD *)(v20 + 8 * v23);
        v24 = *a4;
        if (*a3 == *a4)
          goto LABEL_6;
      }
      goto LABEL_37;
    }
LABEL_41:
    v9 = 0;
    a4 = 0;
    goto LABEL_6;
  }
  sub_1C486D4BC(a1, 2 * v8);
  v11 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v12 = 8;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
      goto LABEL_41;
    v11 = *(_QWORD *)(a1 + 8);
  }
  v9 = *(_DWORD *)a1 & 1;
  v13 = v12 - 1;
  v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
  a4 = (_QWORD *)(v11 + 8 * v14);
  v15 = *a4;
  if (*a3 == *a4)
    goto LABEL_6;
  v16 = 0;
  v17 = 1;
  while (v15 != -4096)
  {
    if (v16)
      v18 = 0;
    else
      v18 = v15 == -8192;
    if (v18)
      v16 = a4;
    v19 = v14 + v17++;
    v14 = v19 & v13;
    a4 = (_QWORD *)(v11 + 8 * v14);
    v15 = *a4;
    if (*a3 == *a4)
      goto LABEL_6;
  }
LABEL_37:
  if (v16)
    a4 = v16;
LABEL_6:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C486D4BC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C486D624((int *)a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C486D624((int *)a1, v14, v8);
}

int *sub_1C486D624(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 18;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v9 = 8;
        v8 = result + 2;
      }
      else
      {
        v8 = (int *)*((_QWORD *)result + 1);
        v9 = result[4];
      }
      v10 = v9 - 1;
      v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v8[2 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v8[2 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_21;
        }
        if (v14)
          v12 = v14;
      }
LABEL_21:
      *(_QWORD *)v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t *sub_1C486D724(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(void **)(v2 + 120);
      if (v3 != (void *)(v2 + 136))
        free(v3);
      if ((*(_BYTE *)(v2 + 48) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 56), 8);
    }
    operator delete((void *)v2);
  }
  return a1;
}

__n128 sub_1C486D78C(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  __n128 result;
  __n128 v13;

  v2 = *a2;
  *a2 = *a1 & 0xFFFFFFFE | *a2 & 1;
  v3 = a1[1];
  *a1 = v2 & 0xFFFFFFFE | *a1 & 1;
  a1[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*a1 & 1) != 0)
  {
    if ((v4 & 1) != 0)
    {
      v5 = 0;
      v6 = (int *)(a1 + 2);
      v7 = (int *)(a2 + 2);
      do
      {
        v8 = *(_QWORD *)&v6[v5];
        *(_QWORD *)&v6[v5] = *(_QWORD *)&v7[v5];
        *(_QWORD *)&v7[v5] = v8;
        v5 += 2;
      }
      while (v5 != 16);
      return result;
    }
    v10 = a2;
  }
  else
  {
    if ((v4 & 1) == 0)
    {
      v9 = *((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v9;
      LODWORD(v9) = a1[4];
      a1[4] = a2[4];
      a2[4] = v9;
      return result;
    }
    v4 = *a1;
    v10 = a1;
    a1 = a2;
  }
  v13 = *(__n128 *)(v10 + 2);
  *v10 = v4 | 1;
  for (i = 2; i != 18; i += 2)
    *(_QWORD *)&v10[i] = *(_QWORD *)&a1[i];
  *a1 &= ~1u;
  result = v13;
  *(__n128 *)(a1 + 2) = v13;
  return result;
}

int *sub_1C486D878(int *a1, uint64_t a2)
{
  int64x2_t v4;
  void *v5;
  int v6;
  size_t v7;
  const void *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  BOOL v15;

  *(_QWORD *)a1 = 1;
  v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 2) = v4;
  v5 = a1 + 2;
  *(int64x2_t *)(a1 + 6) = v4;
  *(int64x2_t *)(a1 + 10) = v4;
  *(int64x2_t *)(a1 + 14) = v4;
  v6 = *a1;
  if ((*a1 & 1) == 0)
  {
    MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 1), 8);
    v6 = *a1;
  }
  *a1 = v6 | 1;
  if ((*(_DWORD *)a2 & 1) != 0 || *(_DWORD *)(a2 + 16) <= 8u)
  {
    *a1 = *(_DWORD *)a2 | 1;
    v7 = 64;
  }
  else
  {
    *a1 = v6 & 0xFFFFFFFE;
    if ((*(_DWORD *)a2 & 1) != 0)
      v13 = 8;
    else
      v13 = *(unsigned int *)(a2 + 16);
    v14 = operator new(8 * v13, (std::align_val_t)8uLL);
    *((_QWORD *)a1 + 1) = v14;
    *((_QWORD *)a1 + 2) = v13;
    v15 = (*a1 & 1) == 0;
    *a1 = *a1 & 1 | *(_DWORD *)a2 & 0xFFFFFFFE;
    if (v15)
    {
      v5 = v14;
      v7 = 8 * v13;
    }
    else
    {
      v7 = 64;
    }
  }
  a1[1] = *(_DWORD *)(a2 + 4);
  if ((*(_DWORD *)a2 & 1) != 0)
    v8 = (const void *)(a2 + 8);
  else
    v8 = *(const void **)(a2 + 8);
  memcpy(v5, v8, v7);
  v9 = a1 + 22;
  *((_QWORD *)a1 + 9) = a1 + 22;
  *((_QWORD *)a1 + 10) = 0x800000000;
  v10 = *(_DWORD *)(a2 + 80);
  if (v10 && a1 != (int *)a2)
  {
    if (v10 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 18), (uint64_t)(a1 + 22), *(unsigned int *)(a2 + 80), 8);
      v11 = *(unsigned int *)(a2 + 80);
      if (!(_DWORD)v11)
        goto LABEL_14;
      v9 = (void *)*((_QWORD *)a1 + 9);
    }
    else
    {
      v11 = *(unsigned int *)(a2 + 80);
    }
    memcpy(v9, *(const void **)(a2 + 72), 8 * v11);
LABEL_14:
    a1[20] = v10;
  }
  return a1;
}

void sub_1C486DA00(_QWORD *a1)
{
  char *v2;

  if (a1)
  {
    sub_1C486DA00(*a1);
    sub_1C486DA00(a1[1]);
    v2 = (char *)a1[15];
    if (v2 != (char *)(a1 + 17))
      free(v2);
    if ((a1[6] & 1) == 0)
      MEMORY[0x1CAA32FB4](a1[7], 8);
    operator delete(a1);
  }
}

__n128 sub_1C486DA64(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5, char a6)
{
  uint64_t UniqueVRegDef;
  __n128 result;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  __int128 v15;

  UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(a3, a2);
  if (UniqueVRegDef
    && **(unsigned __int16 **)(UniqueVRegDef + 16) == a4
    && (v12 = *(_QWORD *)(UniqueVRegDef + 32), !*(_QWORD *)(v12 + 48))
    && (v13 = (__n128 *)(v12 + 64), *(_DWORD *)(v12 + 64) == 7)
    && *(_DWORD *)(v12 + 80) == 64
    && dword_1C6464DD8[(((unint64_t)*(unsigned int *)(v12 + 64) >> 8) & 0xFFF) - 1] == a5
    && ((v14 = *(unsigned int *)(v12 + 68), a5 != 2) || (v14 & 1) == 0)
    && ((uint64_t)(v14 | ((unint64_t)*(unsigned int *)(v12 + 88) << 32)) < 256 || (a6 & 1) != 0))
  {
    result = *v13;
    v15 = *(_OWORD *)(v12 + 80);
    *(__n128 *)a1 = *v13;
    *(_OWORD *)(a1 + 16) = v15;
    *(_BYTE *)(a1 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
  return result;
}

void sub_1C486DB3C(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  _OWORD v6[4];
  void *v7[2];
  _OWORD v8[8];
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x1E0C80C00];
  sub_1C486F76C((uint64_t)&v10, *(_QWORD *)(*(_QWORD *)a2 + 328));
  v7[0] = 0;
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  memset(v6, 0, sizeof(v6));
  v3 = (char *)v6 + 8;
  v4 = (char *)v6 + 8;
  v5 = 8;
  v7[1] = (char *)v8 + 8;
  DWORD1(v8[0]) = 8;
  sub_1C486DC64((uint64_t)&v10, (uint64_t)&v3, a1);
  if (v7[1] != (char *)v8 + 8)
    free(v7[1]);
  if (v4 != v3)
    free(v4);
  if (v12 != v13)
    free(v12);
  if (v11 != v10)
    free(v11);
}

uint64_t sub_1C486DC64(uint64_t a1, uint64_t a2, char **a3)
{
  _BYTE *v6;
  const void *v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _BYTE *v13;
  const void *v14;
  const void *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  _BYTE v29[64];
  void *v30[2];
  _BYTE v31[128];
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  _BYTE v37[64];
  void *v38[2];
  _BYTE v39[128];
  void *v40;
  void *v41;
  void *v42;
  _QWORD v43[18];

  v43[17] = *MEMORY[0x1E0C80C00];
  v6 = v37;
  v32 = v37;
  v7 = *(const void **)(a1 + 8);
  if (v7 == *(const void **)a1)
  {
    v33 = v37;
    v8 = v7;
  }
  else
  {
    v22 = *(unsigned int *)(a1 + 16);
    v6 = malloc_type_malloc(8 * v22, 0x4065EBACuLL);
    if (!v6)
    {
      if ((_DWORD)v22)
        goto LABEL_41;
      v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6)
        goto LABEL_41;
    }
    v33 = v6;
    v8 = *(const void **)a1;
    v7 = *(const void **)(a1 + 8);
  }
  v10 = *(_DWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 20);
  v34 = v10;
  if (v7 == v8)
    v11 = v9;
  else
    v11 = v10;
  if (v11)
  {
    memmove(v6, v7, 8 * v11);
    v9 = *(_DWORD *)(a1 + 20);
  }
  v12 = *(_DWORD *)(a1 + 24);
  v35 = v9;
  v36 = v12;
  v38[0] = v39;
  v38[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C486F660((uint64_t)v38, a1 + 96);
  v13 = v29;
  v24 = v29;
  v14 = *(const void **)(a2 + 8);
  if (v14 == *(const void **)a2)
  {
    v25 = v29;
    v15 = v14;
    goto LABEL_12;
  }
  v23 = *(unsigned int *)(a2 + 16);
  v13 = malloc_type_malloc(8 * v23, 0x4065EBACuLL);
  if (!v13 && ((_DWORD)v23 || (v13 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_41:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v25 = v13;
  v15 = *(const void **)a2;
  v14 = *(const void **)(a2 + 8);
LABEL_12:
  v17 = *(_DWORD *)(a2 + 16);
  v16 = *(_DWORD *)(a2 + 20);
  v26 = v17;
  if (v14 == v15)
    v18 = v16;
  else
    v18 = v17;
  if (v18)
  {
    memmove(v13, v14, 8 * v18);
    v16 = *(_DWORD *)(a2 + 20);
  }
  v19 = *(_DWORD *)(a2 + 24);
  v27 = v16;
  v28 = v19;
  v30[0] = v31;
  v30[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C486F660((uint64_t)v30, a2 + 96);
  sub_1C486DEC8((uint64_t)&v32, (uint64_t)&v24, a3, (uint64_t)&v40);
  v20 = v43[16];
  if (v42 != v43)
    free(v42);
  if (v41 != v40)
    free(v41);
  if (v30[0] != v31)
    free(v30[0]);
  if (v25 != v24)
    free(v25);
  if (v38[0] != v39)
    free(v38[0]);
  if (v33 != v32)
    free(v33);
  return v20;
}

void sub_1C486DEC8(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  const void *v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  _BYTE v19[64];
  void *v20[2];
  _BYTE v21[128];
  _BYTE *v22;
  _BYTE *v23;
  int v24;
  int v25;
  int v26;
  _BYTE v27[64];
  void *v28[2];
  _QWORD v29[17];

  v29[16] = *MEMORY[0x1E0C80C00];
  v22 = v27;
  v9 = *(const void **)a1;
  v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    v23 = v27;
    v10 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v10)
      memmove(v27, v8, 8 * v10);
  }
  else
  {
    v23 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  v24 = *(_DWORD *)(a1 + 16);
  v25 = v10;
  v26 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v28[0] = v29;
  v28[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C486F510((uint64_t)v28, a1 + 96);
  v14 = v19;
  v12 = *(const void **)a2;
  v11 = *(const void **)(a2 + 8);
  if (v11 == *(const void **)a2)
  {
    v15 = v19;
    v13 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v13)
      memmove(v19, v11, 8 * v13);
  }
  else
  {
    v15 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v12;
    LODWORD(v13) = *(_DWORD *)(a2 + 20);
  }
  v16 = *(_DWORD *)(a2 + 16);
  v17 = v13;
  v18 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v20[0] = v21;
  v20[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C486F510((uint64_t)v20, a2 + 96);
  sub_1C486E094((uint64_t)&v22, (uint64_t)&v14, a3, a4);
  if (v20[0] != v21)
    free(v20[0]);
  if (v15 != v14)
    free(v15);
  if (v28[0] != v29)
    free(v28[0]);
  if (v23 != v22)
    free(v23);
}

void sub_1C486E094(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  const void *v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  _BYTE v19[64];
  void *v20[2];
  _BYTE v21[128];
  _BYTE *v22;
  _BYTE *v23;
  int v24;
  int v25;
  int v26;
  _BYTE v27[64];
  void *v28[2];
  _QWORD v29[17];

  v29[16] = *MEMORY[0x1E0C80C00];
  v22 = v27;
  v9 = *(const void **)a1;
  v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    v23 = v27;
    v10 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v10)
      memmove(v27, v8, 8 * v10);
  }
  else
  {
    v23 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  v24 = *(_DWORD *)(a1 + 16);
  v25 = v10;
  v26 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v28[0] = v29;
  v28[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C486F510((uint64_t)v28, a1 + 96);
  v14 = v19;
  v12 = *(const void **)a2;
  v11 = *(const void **)(a2 + 8);
  if (v11 == *(const void **)a2)
  {
    v15 = v19;
    v13 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v13)
      memmove(v19, v11, 8 * v13);
  }
  else
  {
    v15 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v12;
    LODWORD(v13) = *(_DWORD *)(a2 + 20);
  }
  v16 = *(_DWORD *)(a2 + 16);
  v17 = v13;
  v18 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v20[0] = v21;
  v20[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C486F510((uint64_t)v20, a2 + 96);
  sub_1C486E260((uint64_t)&v22, (uint64_t)&v14, a3, a4);
  if (v20[0] != v21)
    free(v20[0]);
  if (v15 != v14)
    free(v15);
  if (v28[0] != v29)
    free(v28[0]);
  if (v23 != v22)
    free(v23);
}

void sub_1C486E260(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *v8;
  const void *v9;
  const void *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  int v18;
  int v19;
  const void *v20;
  const void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  void *v27;
  int v28;
  int v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  int v33;
  int v34;
  int v35;
  _BYTE v36[64];
  void *v37[2];
  _BYTE v38[128];
  _BYTE *v39;
  _BYTE *v40;
  int v41;
  int v42;
  int v43;
  _BYTE v44[64];
  void *v45[2];
  _BYTE v46[128];
  void *v47;
  void *v48;
  uint64_t v49;
  int v50;
  void *v51;
  int v52;
  uint64_t v53;
  _BYTE *v54;
  void *v55;
  int v56;
  int v57;
  int v58;
  _BYTE v59[64];
  void *v60[2];
  _BYTE v61[128];
  _BYTE *v62;
  void *v63;
  int v64;
  int v65;
  int v66;
  _BYTE v67[64];
  void *v68[2];
  _BYTE v69[128];
  void *v70;
  void *v71;
  uint64_t v72;
  int v73;
  void *v74;
  int v75;
  _QWORD v76[17];
  _BYTE *v77;
  void *v78;
  int v79;
  int v80;
  int v81;
  _BYTE v82[64];
  void *v83[2];
  _BYTE v84[128];
  _BYTE *v85;
  void *v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  _BYTE v90[64];
  void *v91[2];
  _BYTE v92[128];
  void *v93;
  void *__src;
  uint64_t v95;
  int v96;
  void *v97;
  int v98;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  int v103;
  void *v104;
  int v105;
  _QWORD v106[17];

  v106[16] = *MEMORY[0x1E0C80C00];
  v8 = v90;
  v85 = v90;
  v9 = *(const void **)(a1 + 8);
  if (v9 == *(const void **)a1)
  {
    v86 = v90;
    v10 = v9;
  }
  else
  {
    v30 = *(unsigned int *)(a1 + 16);
    v8 = malloc_type_malloc(8 * v30, 0x4065EBACuLL);
    if (!v8 && ((_DWORD)v30 || (v8 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v86 = v8;
    v10 = *(const void **)a1;
    v9 = *(const void **)(a1 + 8);
  }
  v12 = *(_DWORD *)(a1 + 16);
  v11 = *(_DWORD *)(a1 + 20);
  v87 = v12;
  if (v9 == v10)
    v13 = v11;
  else
    v13 = v12;
  if (v13)
  {
    memmove(v8, v9, 8 * v13);
    v11 = *(_DWORD *)(a1 + 20);
  }
  v14 = *(_DWORD *)(a1 + 24);
  v88 = v11;
  v89 = v14;
  v91[0] = v92;
  v91[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C486F660((uint64_t)v91, a1 + 96);
  v77 = v82;
  v16 = *(const void **)a2;
  v15 = *(const void **)(a2 + 8);
  if (v15 == *(const void **)a2)
  {
    v78 = v82;
    v17 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v17)
      memmove(v82, v15, 8 * v17);
  }
  else
  {
    v78 = *(void **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v16;
    LODWORD(v17) = *(_DWORD *)(a2 + 20);
  }
  v79 = *(_DWORD *)(a2 + 16);
  v80 = v17;
  v81 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v83[0] = v84;
  v83[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C486F510((uint64_t)v83, a2 + 96);
  sub_1C486E858((uint64_t)&v85, (uint64_t)&v77, (uint64_t)&v93);
  if (v83[0] != v84)
    free(v83[0]);
  if (v78 != v77)
    free(v78);
  if (v91[0] != v92)
    free(v91[0]);
  if (v86 != v85)
    free(v86);
  v62 = v67;
  if (__src == v93)
  {
    v63 = v67;
    v18 = HIDWORD(v95);
    if (HIDWORD(v95))
      memmove(v67, __src, 8 * HIDWORD(v95));
  }
  else
  {
    v63 = __src;
    __src = v93;
    v18 = HIDWORD(v95);
  }
  v64 = v95;
  v65 = v18;
  v66 = v96;
  v95 = 8;
  v96 = 0;
  v68[0] = v69;
  v68[1] = (void *)0x800000000;
  if (v98)
    sub_1C486F510((uint64_t)v68, (uint64_t)&v97);
  v54 = v59;
  if (v101 == v100)
  {
    v55 = v59;
    v19 = HIDWORD(v102);
    if (HIDWORD(v102))
      memmove(v59, v101, 8 * HIDWORD(v102));
  }
  else
  {
    v55 = v101;
    v101 = v100;
    v19 = HIDWORD(v102);
  }
  v56 = v102;
  v57 = v19;
  v58 = v103;
  v102 = 8;
  v103 = 0;
  v60[0] = v61;
  v60[1] = (void *)0x800000000;
  if (v105)
    sub_1C486F510((uint64_t)v60, (uint64_t)&v104);
  sub_1C486EE30((uint64_t *)&v62, (uint64_t)&v54, a3, (uint64_t)&v70);
  if (v60[0] != v61)
    free(v60[0]);
  if (v55 != v54)
    free(v55);
  if (v68[0] != v69)
    free(v68[0]);
  if (v63 != v62)
    free(v63);
  v39 = v44;
  v21 = *(const void **)a1;
  v20 = *(const void **)(a1 + 8);
  if (v20 == *(const void **)a1)
  {
    v40 = v44;
    v22 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v22)
      memmove(v44, v20, 8 * v22);
  }
  else
  {
    v40 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v21;
    LODWORD(v22) = *(_DWORD *)(a1 + 20);
  }
  v41 = *(_DWORD *)(a1 + 16);
  v42 = v22;
  v43 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v45[0] = v46;
  v45[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C486F510((uint64_t)v45, a1 + 96);
  v31 = v36;
  if (v71 == v70)
  {
    v32 = v36;
    v23 = HIDWORD(v72);
    if (HIDWORD(v72))
      memmove(v36, v71, 8 * HIDWORD(v72));
  }
  else
  {
    v32 = v71;
    v71 = v70;
    v23 = HIDWORD(v72);
  }
  v33 = v72;
  v34 = v23;
  v35 = v73;
  v72 = 8;
  v73 = 0;
  v37[0] = v38;
  v37[1] = (void *)0x800000000;
  if (v75)
    sub_1C486F510((uint64_t)v37, (uint64_t)&v74);
  sub_1C486F034((uint64_t)&v39, (uint64_t)&v31, &v47);
  v24 = v76[16];
  v25 = (void *)(a4 + 32);
  *(_QWORD *)a4 = a4 + 32;
  v27 = v47;
  v26 = v48;
  if (v48 == v47)
  {
    *(_QWORD *)(a4 + 8) = v25;
    v28 = HIDWORD(v49);
    if (HIDWORD(v49))
      memmove(v25, v26, 8 * HIDWORD(v49));
  }
  else
  {
    *(_QWORD *)(a4 + 8) = v48;
    v48 = v27;
    v28 = HIDWORD(v49);
  }
  *(_QWORD *)(a4 + 96) = a4 + 112;
  v29 = v50;
  *(_DWORD *)(a4 + 16) = v49;
  *(_DWORD *)(a4 + 20) = v28;
  *(_DWORD *)(a4 + 24) = v29;
  v49 = 8;
  v50 = 0;
  *(_QWORD *)(a4 + 104) = 0x800000000;
  if (v52)
    sub_1C486F510(a4 + 96, (uint64_t)&v51);
  *(_QWORD *)(a4 + 240) = v24;
  if (v51 != &v53)
    free(v51);
  if (v48 != v47)
    free(v48);
  if (v37[0] != v38)
    free(v37[0]);
  if (v32 != v31)
    free(v32);
  if (v45[0] != v46)
    free(v45[0]);
  if (v40 != v39)
    free(v40);
  if (v74 != v76)
    free(v74);
  if (v71 != v70)
    free(v71);
  if (v104 != v106)
    free(v104);
  if (v101 != v100)
    free(v101);
  if (v97 != &v99)
    free(v97);
  if (__src != v93)
    free(__src);
}

void sub_1C486E858(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  int v26;
  void *v27;
  const void *v28;
  _BYTE *v29;
  int v30;
  int v31;
  _BYTE *v32;
  unsigned int v33;
  int v34;
  _BYTE v35[64];
  void *v36;
  uint64_t v37;
  _BYTE v38[128];
  _BYTE *v39;
  _BYTE *v40;
  unint64_t v41;
  int v42;
  _BYTE v43[64];
  void *v44;
  uint64_t v45;
  _BYTE v46[128];
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  _BYTE v52[64];
  void *v53;
  uint64_t v54;
  _BYTE v55[128];
  _BYTE *v56;
  void *v57;
  unint64_t v58;
  int v59;
  _BYTE v60[64];
  void *v61;
  uint64_t v62;
  _BYTE v63[128];
  _BYTE *v64;
  void *__src;
  uint64_t v66;
  int v67;
  _BYTE v68[64];
  void *v69;
  uint64_t v70;
  _QWORD v71[17];

  v71[16] = *MEMORY[0x1E0C80C00];
  v6 = v52;
  v47 = v52;
  v8 = *(_BYTE **)a1;
  v7 = *(_BYTE **)(a1 + 8);
  if (v7 == *(_BYTE **)a1)
  {
    v48 = v52;
    v9 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v9)
      memmove(v52, v7, 8 * v9);
    v7 = v52;
  }
  else
  {
    v48 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    LODWORD(v9) = *(_DWORD *)(a1 + 20);
  }
  v49 = *(_DWORD *)(a1 + 16);
  v50 = v9;
  v51 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v53 = v55;
  v54 = 0x800000000;
  if (*(_DWORD *)(a1 + 104))
  {
    sub_1C486F510((uint64_t)&v53, a1 + 96);
    v6 = v47;
    v7 = v48;
  }
  v10 = v68;
  v64 = v68;
  if (v7 == v6)
  {
    __src = v68;
    v11 = v6;
  }
  else
  {
    v10 = malloc_type_malloc(8 * v49, 0x4065EBACuLL);
    if (!v10)
    {
      if (v49)
        goto LABEL_91;
      v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v10)
        goto LABEL_91;
    }
    __src = v10;
    v11 = v47;
    v6 = v48;
  }
  v12 = v50;
  LODWORD(v66) = v49;
  if (v6 == v11)
    v13 = v50;
  else
    v13 = v49;
  if (v13)
  {
    memmove(v10, v6, 8 * v13);
    v12 = v50;
  }
  HIDWORD(v66) = v12;
  v67 = v51;
  v69 = v71;
  v70 = 0x800000000;
  if ((_DWORD)v54)
    sub_1C486F660((uint64_t)&v69, (uint64_t)&v53);
  v56 = v60;
  if (__src == v64)
  {
    v57 = v60;
    v14 = HIDWORD(v66);
    if (HIDWORD(v66))
      memmove(v60, __src, 8 * HIDWORD(v66));
  }
  else
  {
    v57 = __src;
    __src = v64;
    v14 = HIDWORD(v66);
  }
  v58 = __PAIR64__(v14, v66);
  v59 = v67;
  v66 = 8;
  v67 = 0;
  v61 = v63;
  v62 = 0x800000000;
  if ((_DWORD)v70)
    sub_1C486F510((uint64_t)&v61, (uint64_t)&v69);
  if (v69 != v71)
    free(v69);
  if (__src != v64)
    free(__src);
  v15 = v35;
  v16 = *(_BYTE **)(a2 + 8);
  if (v16 == *(_BYTE **)a2)
  {
    v32 = v35;
    v17 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v17)
      memmove(v35, v16, 8 * v17);
    v16 = v35;
  }
  else
  {
    v32 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    LODWORD(v17) = *(_DWORD *)(a2 + 20);
  }
  v33 = *(_DWORD *)(a2 + 16);
  v34 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v36 = v38;
  v37 = 0x800000000;
  if (*(_DWORD *)(a2 + 104))
  {
    sub_1C486F510((uint64_t)&v36, a2 + 96);
    v15 = v35;
    v16 = v32;
  }
  v18 = v68;
  v64 = v68;
  if (v16 == v35)
  {
    __src = v68;
    goto LABEL_33;
  }
  v18 = malloc_type_malloc(8 * v33, 0x4065EBACuLL);
  if (!v18 && (v33 || (v18 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_91:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  __src = v18;
  v15 = v32;
LABEL_33:
  v19 = v17;
  LODWORD(v66) = v33;
  if (v15 == v35)
    v20 = v17;
  else
    v20 = v33;
  if (v20)
  {
    memmove(v18, v15, 8 * v20);
    v19 = v17;
  }
  HIDWORD(v66) = v19;
  v67 = v34;
  v69 = v71;
  v70 = 0x800000000;
  if ((_DWORD)v37)
    sub_1C486F660((uint64_t)&v69, (uint64_t)&v36);
  v39 = v43;
  if (__src == v64)
  {
    v40 = v43;
    v21 = HIDWORD(v66);
    if (HIDWORD(v66))
      memmove(v43, __src, 8 * HIDWORD(v66));
  }
  else
  {
    v40 = __src;
    __src = v64;
    v21 = HIDWORD(v66);
  }
  v41 = __PAIR64__(v21, v66);
  v42 = v67;
  v66 = 8;
  v67 = 0;
  v44 = v46;
  v45 = 0x800000000;
  if ((_DWORD)v70)
    sub_1C486F510((uint64_t)&v44, (uint64_t)&v69);
  if (v69 != v71)
    free(v69);
  if (__src != v64)
    free(__src);
  v22 = (void *)(a3 + 32);
  *(_QWORD *)a3 = a3 + 32;
  v23 = v57;
  v24 = v56;
  if (v57 == v56)
  {
    *(_QWORD *)(a3 + 8) = v22;
    v25 = HIDWORD(v58);
    if (HIDWORD(v58))
      memmove(v22, v23, 8 * HIDWORD(v58));
  }
  else
  {
    *(_QWORD *)(a3 + 8) = v57;
    v57 = v24;
    v25 = HIDWORD(v58);
  }
  *(_QWORD *)(a3 + 96) = a3 + 112;
  v26 = v59;
  *(_DWORD *)(a3 + 16) = v58;
  *(_DWORD *)(a3 + 20) = v25;
  *(_DWORD *)(a3 + 24) = v26;
  v58 = 8;
  v59 = 0;
  *(_QWORD *)(a3 + 104) = 0x800000000;
  if ((_DWORD)v62)
    sub_1C486F510(a3 + 96, (uint64_t)&v61);
  v27 = (void *)(a3 + 272);
  *(_QWORD *)(a3 + 240) = a3 + 272;
  v29 = v39;
  v28 = v40;
  if (v40 == v39)
  {
    *(_QWORD *)(a3 + 248) = v27;
    v30 = HIDWORD(v41);
    if (HIDWORD(v41))
      memmove(v27, v28, 8 * HIDWORD(v41));
  }
  else
  {
    *(_QWORD *)(a3 + 248) = v40;
    v40 = v29;
    v30 = HIDWORD(v41);
  }
  v31 = v42;
  *(_DWORD *)(a3 + 256) = v41;
  *(_DWORD *)(a3 + 260) = v30;
  *(_DWORD *)(a3 + 264) = v31;
  v41 = 8;
  v42 = 0;
  *(_QWORD *)(a3 + 336) = a3 + 352;
  *(_QWORD *)(a3 + 344) = 0x800000000;
  if ((_DWORD)v45)
    sub_1C486F510(a3 + 336, (uint64_t)&v44);
  if (v44 != v46)
    free(v44);
  if (v40 != v39)
    free(v40);
  if (v36 != v38)
    free(v36);
  if (v32 != v35)
    free(v32);
  if (v61 != v63)
    free(v61);
  if (v57 != v56)
    free(v57);
  if (v53 != v55)
    free(v53);
  if (v48 != v47)
    free(v48);
}

uint64_t sub_1C486EE30@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, char **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;

  v30 = (uint64_t)(a1 + 12);
  while (1)
  {
    v8 = *((unsigned int *)a1 + 26);
    v9 = a1[12];
    if ((_DWORD)v8 != *(_DWORD *)(a2 + 104))
      goto LABEL_12;
    if (!(_DWORD)v8)
      break;
    v10 = *(_QWORD **)(a2 + 96);
    v11 = (_QWORD *)a1[12];
    while (*v11 == *v10 && v11[1] == v10[1])
    {
      v11 += 2;
      v10 += 2;
      if (v11 == (_QWORD *)(v9 + 16 * v8))
        goto LABEL_31;
    }
LABEL_12:
    v13 = v9 + 16 * v8;
    v15 = a3[1];
    v14 = (unint64_t)a3[2];
    if ((unint64_t)v15 >= v14)
    {
      v17 = *a3;
      v18 = (v15 - *a3) >> 3;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
        abort();
      v20 = v14 - (_QWORD)v17;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          sub_1C4764EE4();
        v22 = (char *)operator new(8 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[8 * v18];
      *(_QWORD *)v23 = *(_QWORD *)(v13 - 16);
      v16 = v23 + 8;
      if (v15 != v17)
      {
        do
        {
          v24 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *((_QWORD *)v23 - 1) = v24;
          v23 -= 8;
        }
        while (v15 != v17);
        v15 = *a3;
      }
      *a3 = v23;
      a3[1] = v16;
      a3[2] = &v22[8 * v21];
      if (v15)
      {
        operator delete(v15);
        LODWORD(v8) = *((_DWORD *)a1 + 26);
      }
    }
    else
    {
      *(_QWORD *)v15 = *(_QWORD *)(v13 - 16);
      v16 = v15 + 8;
    }
    a3[1] = v16;
    *((_DWORD *)a1 + 26) = v8 - 1;
    if ((_DWORD)v8 != 1)
      sub_1C486F1F8(a1);
  }
LABEL_31:
  v25 = (void *)(a4 + 32);
  *(_QWORD *)a4 = a4 + 32;
  v27 = *a1;
  v26 = (const void *)a1[1];
  if (v26 == (const void *)*a1)
  {
    *(_QWORD *)(a4 + 8) = v25;
    v28 = *((unsigned int *)a1 + 5);
    if ((_DWORD)v28)
      memmove(v25, v26, 8 * v28);
  }
  else
  {
    *(_QWORD *)(a4 + 8) = v26;
    a1[1] = v27;
    LODWORD(v28) = *((_DWORD *)a1 + 5);
  }
  *(_QWORD *)(a4 + 96) = a4 + 112;
  result = a4 + 96;
  *(_DWORD *)(a4 + 16) = *((_DWORD *)a1 + 4);
  *(_DWORD *)(a4 + 20) = v28;
  *(_DWORD *)(a4 + 24) = *((_DWORD *)a1 + 6);
  a1[2] = 8;
  *((_DWORD *)a1 + 6) = 0;
  *(_QWORD *)(a4 + 104) = 0x800000000;
  if ((_DWORD)v8)
    result = sub_1C486F510(result, v30);
  *(_QWORD *)(a4 + 240) = a3;
  return result;
}

void sub_1C486F034(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const void *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int v14;
  int v15;
  int v16;
  _BYTE v17[64];
  void *v18[2];
  _BYTE v19[128];
  _BYTE *v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  _BYTE v25[64];
  void *v26[2];
  _QWORD v27[17];

  v27[16] = *MEMORY[0x1E0C80C00];
  v20 = v25;
  v7 = *(const void **)a1;
  v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    v21 = v25;
    v8 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v8)
      memmove(v25, v6, 8 * v8);
  }
  else
  {
    v21 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  v22 = *(_DWORD *)(a1 + 16);
  v23 = v8;
  v24 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v26[0] = v27;
  v26[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C486F510((uint64_t)v26, a1 + 96);
  v12 = v17;
  v10 = *(const void **)a2;
  v9 = *(const void **)(a2 + 8);
  if (v9 == *(const void **)a2)
  {
    v13 = v17;
    v11 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v11)
      memmove(v17, v9, 8 * v11);
  }
  else
  {
    v13 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v10;
    LODWORD(v11) = *(_DWORD *)(a2 + 20);
  }
  v14 = *(_DWORD *)(a2 + 16);
  v15 = v11;
  v16 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v18[0] = v19;
  v18[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C486F510((uint64_t)v18, a2 + 96);
  sub_1C486F2D4((uint64_t)&v20, (uint64_t)&v12, a3);
  if (v18[0] != v19)
    free(v18[0]);
  if (v13 != v12)
    free(v13);
  if (v26[0] != v27)
    free(v26[0]);
  if (v21 != v20)
    free(v21);
}

_QWORD *sub_1C486F1F8(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v1 = this + 12;
  v2 = this[12] + 16 * *((unsigned int *)this + 26);
  v5 = *(uint64_t **)(v2 - 8);
  v3 = (_QWORD *)(v2 - 8);
  v4 = v5;
  if (v5 != *(uint64_t **)(*(v3 - 1) + 96))
  {
    v6 = (uint64_t)this;
    v7 = (uint64_t)(this + 14);
    do
    {
      *v3 = v4 + 1;
      v8 = *v4;
      this = sub_1C4774094((llvm::SmallPtrSetImplBase *)v6, *v4);
      v9 = *(unsigned int *)(v6 + 104);
      if (v10)
      {
        v11 = *(_QWORD *)(v8 + 88);
        if (v9 >= *(_DWORD *)(v6 + 108))
        {
          this = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1, v7, v9 + 1, 16);
          LODWORD(v9) = *(_DWORD *)(v6 + 104);
        }
        v9 = *(_QWORD *)(v6 + 96) + 16 * v9;
        *(_QWORD *)v9 = v8;
        *(_QWORD *)(v9 + 8) = v11;
        LODWORD(v9) = *(_DWORD *)(v6 + 104) + 1;
        *(_DWORD *)(v6 + 104) = v9;
      }
      v12 = *v1 + 16 * v9;
      v13 = *(uint64_t **)(v12 - 8);
      v3 = (_QWORD *)(v12 - 8);
      v4 = v13;
    }
    while (v13 != *(uint64_t **)(*(v3 - 1) + 96));
  }
  return this;
}

void sub_1C486F2D4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const void *v6;
  const void *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  int v16;
  _BYTE v17[64];
  void *v18;
  uint64_t v19;
  _BYTE v20[128];
  _BYTE *v21;
  _BYTE *v22;
  int v23;
  int v24;
  int v25;
  _BYTE v26[64];
  void *v27[2];
  _QWORD v28[17];

  v28[16] = *MEMORY[0x1E0C80C00];
  v21 = v26;
  v7 = *(const void **)a1;
  v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    v22 = v26;
    v8 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v8)
      memmove(v26, v6, 8 * v8);
  }
  else
  {
    v22 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  v23 = *(_DWORD *)(a1 + 16);
  v24 = v8;
  v25 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v27[0] = v28;
  v27[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C486F510((uint64_t)v27, a1 + 96);
  v9 = *(_BYTE **)(a2 + 8);
  if (v9 == *(_BYTE **)a2)
  {
    v14 = v17;
    v10 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v10)
      memmove(v17, v9, 8 * v10);
    v9 = v17;
  }
  else
  {
    v14 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    LODWORD(v10) = *(_DWORD *)(a2 + 20);
  }
  v15 = *(_DWORD *)(a2 + 16);
  v16 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v18 = v20;
  v19 = 0x800000000;
  if (*(_DWORD *)(a2 + 104))
  {
    sub_1C486F510((uint64_t)&v18, a2 + 96);
    v9 = v14;
  }
  v11 = a3 + 4;
  *a3 = a3 + 4;
  if (v9 == v17)
  {
    a3[1] = v11;
    v12 = v10;
    if ((_DWORD)v10)
      memmove(v11, v17, 8 * v10);
  }
  else
  {
    a3[1] = v9;
    v14 = v17;
    v12 = v10;
  }
  a3[12] = a3 + 14;
  v13 = (uint64_t)(a3 + 12);
  *(_DWORD *)(v13 - 80) = v15;
  *(_DWORD *)(v13 - 76) = v12;
  *(_DWORD *)(v13 - 72) = v16;
  *(_QWORD *)(v13 + 8) = 0x800000000;
  if ((_DWORD)v19)
    sub_1C486F510(v13, (uint64_t)&v18);
  if (v18 != v20)
    free(v18);
  if (v14 != v17)
    free(v14);
  if (v27[0] != v28)
    free(v27[0]);
  if (v22 != v21)
    free(v22);
}

uint64_t sub_1C486F510(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(_QWORD **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v7 = (_DWORD *)(a2 + 8);
      v8 = *(unsigned int *)(a2 + 8);
      v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if ((_DWORD)v8)
        {
          v11 = &v4[2 * v8];
          v12 = *(_QWORD **)a1;
          do
          {
            *v12 = *v4;
            v12[1] = v4[1];
            v4 += 2;
            v12 += 2;
          }
          while (v4 != v11);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v8)
        {
          if ((_DWORD)v9)
          {
            v13 = &v4[2 * v9];
            v14 = *(_QWORD **)a1;
            do
            {
              *v14 = *v4;
              v14[1] = v4[1];
              v4 += 2;
              v14 += 2;
            }
            while (v4 != v13);
          }
          else
          {
            v9 = 0;
          }
          v10 = v8;
        }
        else
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 16);
          v9 = 0;
          v10 = *v7;
        }
        if (v9 != v10)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*(_QWORD *)a2 + 16 * v9), *(_QWORD *)a2 + 16 * v10 - (*(_QWORD *)a2 + 16 * v9));
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(_QWORD **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *v7 = 0;
  }
  return a1;
}

uint64_t sub_1C486F660(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v7 = *(_QWORD **)a2;
        v8 = *(_QWORD *)a2 + 16 * v4;
        v9 = *(_QWORD **)a1;
        do
        {
          *v9 = *v7;
          v9[1] = v7[1];
          v7 += 2;
          v9 += 2;
        }
        while (v7 != (_QWORD *)v8);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) >= v4)
      {
        if ((_DWORD)v5)
        {
          v10 = *(_QWORD **)a2;
          v11 = *(_QWORD *)a2 + 16 * v5;
          v12 = *(_QWORD **)a1;
          do
          {
            *v12 = *v10;
            v12[1] = v10[1];
            v10 += 2;
            v12 += 2;
          }
          while (v10 != (_QWORD *)v11);
        }
        else
        {
          v5 = 0;
        }
        v6 = v4;
      }
      else
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 16);
        v5 = 0;
        v6 = *(unsigned int *)(a2 + 8);
      }
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 16 * v5), (const void *)(*(_QWORD *)a2 + 16 * v5), *(_QWORD *)a2 + 16 * v6 - (*(_QWORD *)a2 + 16 * v5));
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_1C486F76C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v4 = a1 + 112;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  v5 = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0x800000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a2);
  v6 = *(_QWORD *)(a2 + 88);
  v7 = *(unsigned int *)(a1 + 104);
  if (v7 >= *(_DWORD *)(a1 + 108))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v4, v7 + 1, 16);
    LODWORD(v7) = *(_DWORD *)(a1 + 104);
  }
  v8 = (uint64_t *)(*(_QWORD *)(a1 + 96) + 16 * v7);
  *v8 = a2;
  v8[1] = v6;
  ++*(_DWORD *)(a1 + 104);
  sub_1C486F1F8((_QWORD *)a1);
  return a1;
}

uint64_t *sub_1C486F820(uint64_t *result, uint64_t *a2, unsigned int *a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int64_t v61;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  int64_t v93;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v47 = *(a2 - 1);
        v48 = *v10;
        v49 = *a3;
        v50 = *(unsigned int *)(*(_QWORD *)(v47 + 32) + 32 * v49 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v47 + 32) + 32 * v49 + 24) << 32);
        v51 = *(_QWORD *)(*v10 + 32) + 32 * v49;
        if (v50 < (uint64_t)(*(unsigned int *)(v51 + 4) | ((unint64_t)*(unsigned int *)(v51 + 24) << 32)))
        {
          *v10 = v47;
          *(a2 - 1) = v48;
        }
        return result;
      case 3:
        return sub_1C48702E8(v10, v10 + 1, a2 - 1, *a3);
      case 4:
        return sub_1C48705D8(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5:
        return sub_1C487019C(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v11 <= 191)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v52 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v53 = *a3;
                v54 = 8;
                v55 = v10;
                do
                {
                  v57 = *v55;
                  v56 = v55[1];
                  v55 = v52;
                  if ((uint64_t)(*(unsigned int *)(*(_QWORD *)(v56 + 32) + 32 * v53 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v56 + 32) + 32 * v53 + 24) << 32)) < (uint64_t)(*(unsigned int *)(*(_QWORD *)(v57 + 32) + 32 * v53 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v57 + 32) + 32 * v53 + 24) << 32)))
                  {
                    v58 = v54;
                    while (1)
                    {
                      *(uint64_t *)((char *)v10 + v58) = v57;
                      v59 = v58 - 8;
                      if (v58 == 8)
                        break;
                      v57 = *(uint64_t *)((char *)v10 + v58 - 16);
                      v58 -= 8;
                      if ((uint64_t)(*(unsigned int *)(*(_QWORD *)(v56 + 32) + 32 * v53 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v56 + 32) + 32 * v53 + 24) << 32)) >= (uint64_t)(*(unsigned int *)(*(_QWORD *)(v57 + 32) + 32 * v53 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v57 + 32) + 32 * v53 + 24) << 32)))
                      {
                        v60 = (uint64_t *)((char *)v10 + v59);
                        goto LABEL_71;
                      }
                    }
                    v60 = v10;
LABEL_71:
                    *v60 = v56;
                  }
                  v52 = v55 + 1;
                  v54 += 8;
                }
                while (v55 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v95 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v96 = *a3;
              do
              {
                v98 = *v9;
                v97 = v9[1];
                v9 = v95;
                if ((uint64_t)(*(unsigned int *)(*(_QWORD *)(v97 + 32) + 32 * v96 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v97 + 32) + 32 * v96 + 24) << 32)) < (uint64_t)(*(unsigned int *)(*(_QWORD *)(v98 + 32) + 32 * v96 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v98 + 32) + 32 * v96 + 24) << 32)))
                {
                  do
                  {
                    *v95 = v98;
                    v98 = *(v95 - 2);
                    --v95;
                  }
                  while ((uint64_t)(*(unsigned int *)(*(_QWORD *)(v97 + 32) + 32 * v96 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v97 + 32) + 32 * v96 + 24) << 32)) < (uint64_t)(*(unsigned int *)(*(_QWORD *)(v98 + 32) + 32 * v96 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v98 + 32) + 32 * v96 + 24) << 32)));
                  *v95 = v97;
                }
                v95 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v61 = (unint64_t)(v12 - 2) >> 1;
            v62 = *a3;
            v63 = v61;
            do
            {
              v64 = v63;
              if (v61 >= v63)
              {
                v65 = (2 * v63) | 1;
                v66 = &v10[v65];
                v67 = *v66;
                if (2 * v64 + 2 < v12
                  && (uint64_t)(*(unsigned int *)(*(_QWORD *)(v67 + 32) + 32 * v62 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v67 + 32) + 32 * v62 + 24) << 32)) < (uint64_t)(*(unsigned int *)(*(_QWORD *)(v66[1] + 32) + 32 * v62 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v66[1] + 32) + 32 * v62 + 24) << 32)))
                {
                  v67 = v66[1];
                  ++v66;
                  v65 = 2 * v64 + 2;
                }
                v68 = &v10[v64];
                v69 = *v68;
                v70 = *(_QWORD *)(*v68 + 32) + 32 * v62;
                if ((uint64_t)(*(unsigned int *)(*(_QWORD *)(v67 + 32) + 32 * v62 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v67 + 32) + 32 * v62 + 24) << 32)) >= (uint64_t)(*(unsigned int *)(v70 + 4) | ((unint64_t)*(unsigned int *)(v70 + 24) << 32)))
                {
                  do
                  {
                    v71 = v66;
                    *v68 = v67;
                    if (v61 < v65)
                      break;
                    v72 = (2 * v65) | 1;
                    v66 = &v10[v72];
                    v73 = 2 * v65 + 2;
                    v67 = *v66;
                    if (v73 < v12
                      && (uint64_t)(*(unsigned int *)(*(_QWORD *)(v67 + 32) + 32 * v62 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v67 + 32) + 32 * v62 + 24) << 32)) < (uint64_t)(*(unsigned int *)(*(_QWORD *)(v66[1] + 32) + 32 * v62 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v66[1] + 32) + 32 * v62 + 24) << 32)))
                    {
                      v67 = v66[1];
                      ++v66;
                      v72 = v73;
                    }
                    v68 = v71;
                    v65 = v72;
                  }
                  while ((uint64_t)(*(unsigned int *)(*(_QWORD *)(v67 + 32) + 32 * v62 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v67 + 32) + 32 * v62 + 24) << 32)) >= (uint64_t)(*(unsigned int *)(*(_QWORD *)(v69 + 32) + 32 * v62 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v69 + 32) + 32 * v62 + 24) << 32)));
                  *v71 = v69;
                  v62 = *a3;
                }
              }
              v63 = v64 - 1;
            }
            while (v64);
            do
            {
              v74 = 0;
              v75 = *v10;
              v76 = *a3;
              v77 = v10;
              do
              {
                v78 = &v77[v74];
                v81 = v78[1];
                v79 = v78 + 1;
                v80 = v81;
                result = (uint64_t *)(2 * v74);
                v82 = (2 * v74) | 1;
                v83 = 2 * v74 + 2;
                if (v83 < v12)
                {
                  result = v79 + 1;
                  if ((uint64_t)(*(unsigned int *)(*(_QWORD *)(v80 + 32) + 32 * v76 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v80 + 32) + 32 * v76 + 24) << 32)) < (uint64_t)(*(unsigned int *)(*(_QWORD *)(v79[1] + 32) + 32 * v76 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v79[1] + 32) + 32 * v76 + 24) << 32)))
                  {
                    v80 = v79[1];
                    ++v79;
                    v82 = v83;
                  }
                }
                *v77 = v80;
                v77 = v79;
                v74 = v82;
              }
              while (v82 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
              if (v79 == --a2)
              {
                *v79 = v75;
              }
              else
              {
                *v79 = *a2;
                *a2 = v75;
                v84 = (char *)v79 - (char *)v10 + 8;
                if (v84 >= 9)
                {
                  v85 = (((unint64_t)v84 >> 3) - 2) >> 1;
                  v86 = &v10[v85];
                  v87 = *v86;
                  v88 = *v79;
                  v89 = *(_QWORD *)(*v86 + 32) + 32 * v62;
                  v90 = *(_QWORD *)(*v79 + 32) + 32 * v62;
                  if ((uint64_t)(*(unsigned int *)(v89 + 4) | ((unint64_t)*(unsigned int *)(v89 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v90 + 4) | ((unint64_t)*(unsigned int *)(v90 + 24) << 32)))
                  {
                    do
                    {
                      v91 = v86;
                      *v79 = v87;
                      if (!v85)
                        break;
                      v85 = (v85 - 1) >> 1;
                      v86 = &v10[v85];
                      v87 = *v86;
                      v92 = *(_QWORD *)(*v86 + 32) + 32 * v62;
                      v93 = *(unsigned int *)(v92 + 4) | ((unint64_t)*(unsigned int *)(v92 + 24) << 32);
                      v79 = v91;
                    }
                    while (v93 < (uint64_t)(*(unsigned int *)(*(_QWORD *)(v88 + 32) + 32 * v62 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v88 + 32) + 32 * v62 + 24) << 32)));
                    *v91 = v88;
                  }
                }
              }
            }
            while (v12-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v10[(unint64_t)v12 >> 1];
        v15 = *a3;
        if ((unint64_t)v11 < 0x401)
        {
          result = sub_1C48702E8(&v9[(unint64_t)v12 >> 1], v9, a2 - 1, v15);
        }
        else
        {
          sub_1C48702E8(v9, &v9[(unint64_t)v12 >> 1], a2 - 1, v15);
          sub_1C48702E8(v9 + 1, v14 - 1, a2 - 2, *a3);
          sub_1C48702E8(v9 + 2, &v9[v13 + 1], a2 - 3, *a3);
          result = sub_1C48702E8(v14 - 1, v14, &v9[v13 + 1], *a3);
          v16 = *v9;
          *v9 = *v14;
          *v14 = v16;
        }
        --a4;
        v17 = *v9;
        v18 = *a3;
        if ((a5 & 1) == 0)
        {
          v20 = *(_QWORD *)(*(v9 - 1) + 32) + 32 * v18;
          v21 = *(unsigned int *)(v20 + 4) | ((unint64_t)*(unsigned int *)(v20 + 24) << 32);
          v19 = *(unsigned int *)(*(_QWORD *)(v17 + 32) + 32 * v18 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v17 + 32) + 32 * v18 + 24) << 32);
          if (v21 < v19)
            goto LABEL_12;
          v35 = *(_QWORD *)(*(a2 - 1) + 32) + 32 * v18;
          if (v19 >= (uint64_t)(*(unsigned int *)(v35 + 4) | ((unint64_t)*(unsigned int *)(v35 + 24) << 32)))
          {
            v37 = v9 + 1;
            do
            {
              v10 = v37;
              if (v37 >= a2)
                break;
              ++v37;
              v38 = *(_QWORD *)(*v10 + 32) + 32 * v18;
            }
            while (v19 >= (uint64_t)(*(unsigned int *)(v38 + 4) | ((unint64_t)*(unsigned int *)(v38 + 24) << 32)));
          }
          else
          {
            v10 = v9;
            do
            {
              v36 = v10[1];
              ++v10;
            }
            while (v19 >= (uint64_t)(*(unsigned int *)(*(_QWORD *)(v36 + 32) + 32 * v18 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v36 + 32) + 32 * v18 + 24) << 32)));
          }
          v39 = a2;
          if (v10 < a2)
          {
            v39 = a2;
            do
              v40 = *--v39;
            while (v19 < (uint64_t)(*(unsigned int *)(*(_QWORD *)(v40 + 32) + 32 * v18 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v40 + 32) + 32 * v18 + 24) << 32)));
          }
          if (v10 < v39)
          {
            v41 = *v10;
            v42 = *v39;
            do
            {
              *v10 = v42;
              *v39 = v41;
              v43 = *(unsigned int *)(*(_QWORD *)(v17 + 32) + 32 * v18 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v17 + 32) + 32 * v18 + 24) << 32);
              do
              {
                v44 = v10[1];
                ++v10;
                v41 = v44;
              }
              while (v43 >= (uint64_t)(*(unsigned int *)(*(_QWORD *)(v44 + 32) + 32 * v18 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v44 + 32) + 32 * v18 + 24) << 32)));
              do
              {
                v45 = *--v39;
                v42 = v45;
              }
              while (v43 < (uint64_t)(*(unsigned int *)(*(_QWORD *)(v45 + 32) + 32 * v18 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v45 + 32) + 32 * v18 + 24) << 32)));
            }
            while (v10 < v39);
          }
          v46 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v46;
          a5 = 0;
          *v46 = v17;
          continue;
        }
        v19 = *(unsigned int *)(*(_QWORD *)(v17 + 32) + 32 * v18 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v17 + 32) + 32 * v18 + 24) << 32);
LABEL_12:
        v22 = 0;
        do
          v23 = v9[++v22];
        while ((uint64_t)(*(unsigned int *)(*(_QWORD *)(v23 + 32) + 32 * v18 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v23 + 32) + 32 * v18 + 24) << 32)) < v19);
        v24 = &v9[v22];
        v25 = a2;
        if (v22 == 1)
        {
          v25 = a2;
          do
          {
            if (v24 >= v25)
              break;
            v27 = *--v25;
          }
          while ((uint64_t)(*(unsigned int *)(*(_QWORD *)(v27 + 32) + 32 * v18 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v27 + 32) + 32 * v18 + 24) << 32)) >= v19);
        }
        else
        {
          do
            v26 = *--v25;
          while ((uint64_t)(*(unsigned int *)(*(_QWORD *)(v26 + 32) + 32 * v18 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v26 + 32) + 32 * v18 + 24) << 32)) >= v19);
        }
        if (v24 >= v25)
        {
          v10 = &v9[v22];
        }
        else
        {
          v28 = *v25;
          v10 = &v9[v22];
          v29 = v25;
          do
          {
            *v10 = v28;
            *v29 = v23;
            v30 = *(unsigned int *)(*(_QWORD *)(v17 + 32) + 32 * v18 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v17 + 32) + 32 * v18 + 24) << 32);
            do
            {
              v31 = v10[1];
              ++v10;
              v23 = v31;
            }
            while ((uint64_t)(*(unsigned int *)(*(_QWORD *)(v31 + 32) + 32 * v18 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v31 + 32) + 32 * v18 + 24) << 32)) < v30);
            do
            {
              v32 = *--v29;
              v28 = v32;
            }
            while ((uint64_t)(*(unsigned int *)(*(_QWORD *)(v32 + 32) + 32 * v18 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v32 + 32) + 32 * v18 + 24) << 32)) >= v30);
          }
          while (v10 < v29);
        }
        v33 = v10 - 1;
        if (v10 - 1 != v9)
          *v9 = *v33;
        *v33 = v17;
        if (v24 < v25)
        {
LABEL_33:
          result = (uint64_t *)sub_1C486F820(v9, v10 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v34 = sub_1C48703E8(v9, v10 - 1, a3);
        result = (uint64_t *)sub_1C48703E8(v10, a2, a3);
        if (!(_DWORD)result)
        {
          if (v34)
            continue;
          goto LABEL_33;
        }
        a2 = v10 - 1;
        if (!v34)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C487019C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, unsigned int *a6)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  result = sub_1C48705D8(a1, a2, a3, a4, a6);
  v13 = *a4;
  v14 = *a6;
  v15 = *(_QWORD *)(*a5 + 32) + 32 * v14;
  v16 = *(_QWORD *)(*a4 + 32) + 32 * v14;
  if ((uint64_t)(*(unsigned int *)(v15 + 4) | ((unint64_t)*(unsigned int *)(v15 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v16 + 4) | ((unint64_t)*(unsigned int *)(v16 + 24) << 32)))
  {
    *a4 = *a5;
    *a5 = v13;
    v17 = *a3;
    v18 = *(_QWORD *)(*a4 + 32) + 32 * v14;
    v19 = *(_QWORD *)(*a3 + 32) + 32 * v14;
    if ((uint64_t)(*(unsigned int *)(v18 + 4) | ((unint64_t)*(unsigned int *)(v18 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v19 + 4) | ((unint64_t)*(unsigned int *)(v19 + 24) << 32)))
    {
      *a3 = *a4;
      *a4 = v17;
      v20 = *a2;
      v21 = *(_QWORD *)(*a3 + 32) + 32 * v14;
      v22 = *(_QWORD *)(*a2 + 32) + 32 * v14;
      if ((uint64_t)(*(unsigned int *)(v21 + 4) | ((unint64_t)*(unsigned int *)(v21 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v22 + 4) | ((unint64_t)*(unsigned int *)(v22 + 24) << 32)))
      {
        *a2 = *a3;
        *a3 = v20;
        v23 = *a1;
        v24 = *(_QWORD *)(*a2 + 32) + 32 * v14;
        v25 = *(_QWORD *)(*a1 + 32) + 32 * v14;
        if ((uint64_t)(*(unsigned int *)(v24 + 4) | ((unint64_t)*(unsigned int *)(v24 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v25 + 4) | ((unint64_t)*(unsigned int *)(v25 + 24) << 32)))
        {
          *a1 = *a2;
          *a2 = v23;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C48702E8(uint64_t *result, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a2;
  v5 = *result;
  v6 = *(_QWORD *)(*a2 + 32) + 32 * a4;
  v7 = *(unsigned int *)(v6 + 4) | ((unint64_t)*(unsigned int *)(v6 + 24) << 32);
  v8 = *(_QWORD *)(*result + 32) + 32 * a4;
  v9 = *(unsigned int *)(v8 + 4) | ((unint64_t)*(unsigned int *)(v8 + 24) << 32);
  v10 = *a3;
  v11 = *(_QWORD *)(*a3 + 32) + 32 * a4;
  v12 = *(unsigned int *)(v11 + 4) | ((unint64_t)*(unsigned int *)(v11 + 24) << 32);
  if (v7 >= v9)
  {
    if (v12 < v7)
    {
      *a2 = v10;
      *a3 = v4;
      v13 = *result;
      v14 = *(_QWORD *)(*a2 + 32) + 32 * a4;
      v15 = *(_QWORD *)(*result + 32) + 32 * a4;
      if ((uint64_t)(*(unsigned int *)(v14 + 4) | ((unint64_t)*(unsigned int *)(v14 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v15 + 4) | ((unint64_t)*(unsigned int *)(v15 + 24) << 32)))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  else
  {
    if (v12 >= v7)
    {
      *result = v4;
      *a2 = v5;
      v16 = *(_QWORD *)(*a3 + 32) + 32 * a4;
      if ((uint64_t)(*(unsigned int *)(v16 + 4) | ((unint64_t)*(unsigned int *)(v16 + 24) << 32)) >= (uint64_t)(*(unsigned int *)(*(_QWORD *)(v5 + 32) + 32 * a4 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v5 + 32) + 32 * a4 + 24) << 32)))
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v10;
    }
    *a3 = v5;
  }
  return result;
}

BOOL sub_1C48703E8(uint64_t *a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = *a3;
      v11 = *(unsigned int *)(*(_QWORD *)(v8 + 32) + 32 * v10 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v8 + 32) + 32 * v10 + 24) << 32);
      v12 = *(_QWORD *)(*a1 + 32) + 32 * v10;
      if (v11 < (uint64_t)(*(unsigned int *)(v12 + 4) | ((unint64_t)*(unsigned int *)(v12 + 24) << 32)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1C48702E8(a1, a1 + 1, a2 - 1, *a3);
      return 1;
    case 4:
      sub_1C48705D8(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C487019C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v13 = a1 + 2;
      sub_1C48702E8(a1, a1 + 1, a1 + 2, *a3);
      v14 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v15 = 0;
      v16 = *a3;
      v17 = 24;
      break;
  }
  while (1)
  {
    v18 = *v14;
    v19 = *v13;
    v20 = *(_QWORD *)(*v14 + 32) + 32 * v16;
    v21 = *(_QWORD *)(*v13 + 32) + 32 * v16;
    if ((uint64_t)(*(unsigned int *)(v20 + 4) | ((unint64_t)*(unsigned int *)(v20 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v21 + 4) | ((unint64_t)*(unsigned int *)(v21 + 24) << 32)))
    {
      v22 = v17;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v22) = v19;
        v23 = v22 - 8;
        if (v22 == 8)
          break;
        v19 = *(uint64_t *)((char *)a1 + v22 - 16);
        v22 -= 8;
        if ((uint64_t)(*(unsigned int *)(*(_QWORD *)(v18 + 32) + 32 * v16 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v18 + 32) + 32 * v16 + 24) << 32)) >= (uint64_t)(*(unsigned int *)(*(_QWORD *)(v19 + 32) + 32 * v16 + 4) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v19 + 32) + 32 * v16 + 24) << 32)))
        {
          v24 = (uint64_t *)((char *)a1 + v23);
          goto LABEL_12;
        }
      }
      v24 = a1;
LABEL_12:
      *v24 = v18;
      if (++v15 == 8)
        return v14 + 1 == a2;
    }
    v13 = v14;
    v17 += 8;
    if (++v14 == a2)
      return 1;
  }
}

uint64_t *sub_1C48705D8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = sub_1C48702E8(a1, a2, a3, *a5);
  v11 = *a3;
  v12 = *a5;
  v13 = *(_QWORD *)(*a4 + 32) + 32 * v12;
  v14 = *(_QWORD *)(*a3 + 32) + 32 * v12;
  if ((uint64_t)(*(unsigned int *)(v13 + 4) | ((unint64_t)*(unsigned int *)(v13 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v14 + 4) | ((unint64_t)*(unsigned int *)(v14 + 24) << 32)))
  {
    *a3 = *a4;
    *a4 = v11;
    v15 = *a2;
    v16 = *(_QWORD *)(*a3 + 32) + 32 * v12;
    v17 = *(_QWORD *)(*a2 + 32) + 32 * v12;
    if ((uint64_t)(*(unsigned int *)(v16 + 4) | ((unint64_t)*(unsigned int *)(v16 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v17 + 4) | ((unint64_t)*(unsigned int *)(v17 + 24) << 32)))
    {
      *a2 = *a3;
      *a3 = v15;
      v18 = *a1;
      v19 = *(_QWORD *)(*a2 + 32) + 32 * v12;
      v20 = *(_QWORD *)(*a1 + 32) + 32 * v12;
      if ((uint64_t)(*(unsigned int *)(v19 + 4) | ((unint64_t)*(unsigned int *)(v19 + 24) << 32)) < (uint64_t)(*(unsigned int *)(v20 + 4) | ((unint64_t)*(unsigned int *)(v20 + 24) << 32)))
      {
        *a1 = *a2;
        *a2 = v18;
      }
    }
  }
  return result;
}

void sub_1C48706E0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = &off_1E7F9F9B0;
  free(*(void **)(a1 + 416));
  v2 = *(void **)(a1 + 272);
  if (v2 != (void *)(a1 + 288))
    free(v2);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192))
    free(v3);
  v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120))
    free(v4);
  v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48))
    free(v5);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C4870780(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = &off_1E7F9F9B0;
  free(*(void **)(a1 + 416));
  v2 = *(void **)(a1 + 272);
  if (v2 != (void *)(a1 + 288))
    free(v2);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192))
    free(v3);
  v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120))
    free(v4);
  v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48))
    free(v5);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4870834()
{
  return "AGX2 constant merger pass";
}

void sub_1C4870844(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C4870868(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _BOOL4 v28;
  unsigned __int16 *v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  _BOOL4 v34;
  unsigned int IncompleteVirtualRegister;
  uint64_t v36;
  uint64_t v37;
  llvm::MachineFunction *v38;
  llvm::MachineInstr *v39;
  llvm::MachineInstr *v40;
  char v41;
  uint64_t v42;
  char v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  llvm::MachineFunction *v49;
  __int16 v50;
  llvm::MachineInstr *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE **v62;
  _BYTE **v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 *v76;
  int v77;
  BOOL v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  llvm::MachineFunction *v94;
  unsigned __int8 *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  llvm::MachineFunction *v106;
  unsigned __int8 *v107;
  unint64_t v108;
  llvm::MachineFunction *v109;
  unsigned __int8 *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  BOOL v159;
  unsigned int v160;
  int v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  llvm::MachineFunction *v169;
  llvm::MachineInstr *v170;
  llvm::MachineInstr *v171;
  uint64_t v172;
  char v173;
  char v174;
  unsigned __int8 *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  llvm::MachineInstr *v180;
  llvm::MachineFunction *v181;
  int v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE **v193;
  _BYTE **v194;
  _BYTE **v195;
  _BYTE **v196;
  _BYTE *v197;
  _BYTE *v198;
  _BYTE *v199;
  _BYTE *v200;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  unsigned __int8 *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  _QWORD v229[10];

  v229[8] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 280) = 0;
  if ((*(_DWORD *)(a1 + 424) - 512) >= 0x604)
  {
    free(*(void **)(a1 + 416));
    v4 = malloc_type_calloc(0x200uLL, 2uLL, 0x6D9A4F0CuLL);
    if (!v4)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *(_QWORD *)(a1 + 416) = v4;
    *(_DWORD *)(a1 + 424) = 512;
  }
  v5 = *(_QWORD *)(a2 + 328);
  v209 = a2 + 320;
  if (v5 == a2 + 320)
  {
    LOBYTE(v6) = 0;
    return v6 & 1;
  }
  v6 = 0;
  v220 = (uint64_t *)(a1 + 272);
  v207 = *(_QWORD *)(a2 + 16);
  v208 = a2;
  do
  {
    v226 = 0;
    v227 = v229;
    v228 = 0x800000000;
    v225 = 0;
    v7 = v5 + 48;
    v213 = v5;
    v8 = *(_QWORD *)(v5 + 56);
    v219 = v7;
    if (v8 == v7)
    {
      v10 = 0;
      v64 = v213;
      goto LABEL_93;
    }
    v210 = v6;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      if (!v8 || (v13 = v8, (*(_BYTE *)v8 & 4) == 0))
      {
        v13 = v8;
        if ((*(_WORD *)(v8 + 44) & 8) != 0)
        {
          v13 = v8;
          do
            v13 = *(_QWORD *)(v13 + 8);
          while ((*(_WORD *)(v13 + 44) & 8) != 0);
        }
      }
      v14 = *(_QWORD *)(v13 + 8);
      v15 = **(_WORD **)(v8 + 16) - 4066;
      if (v15 > 7u || ((0xC3u >> v15) & 1) == 0)
      {
LABEL_15:
        v16 = v11;
        goto LABEL_16;
      }
      v17 = *(_QWORD **)(a1 + 264);
      v18 = *(_QWORD *)(v8 + 32);
      v19 = *(unsigned int *)(v18 + 4);
      if ((v19 & 0x80000000) != 0)
        v20 = (uint64_t *)(v17[3] + 16 * (v19 & 0x7FFFFFFF) + 8);
      else
        v20 = (uint64_t *)(v17[34] + 8 * v19);
      v21 = qword_1C6464E00[(__int16)v15];
      v22 = *v20;
      if (v22)
      {
        while ((*(_BYTE *)(v22 + 3) & 1) != 0)
        {
          v22 = *(_QWORD *)(v22 + 24);
          if (!v22)
            goto LABEL_24;
        }
        v27 = v17[3];
        v16 = (*(_QWORD *)(v27 + 16 * (*(_DWORD *)(v22 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (_QWORD)&off_1E7FA4778;
        if (v12)
          v28 = (*(_QWORD *)(v27 + 16 * (*(_DWORD *)(v22 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (_QWORD)&off_1E7FA4778;
        else
          v28 = 0;
        if ((v28 & v11 & 1) != 0)
        {
LABEL_32:
          v16 = 1;
          goto LABEL_16;
        }
LABEL_33:
        v29 = *(unsigned __int16 **)(*(_QWORD *)(v22 + 8) + 16);
        if ((v29[8] & 2) != 0)
          goto LABEL_15;
        v30 = *v29;
        v31 = v30 > 0x13;
        v32 = (1 << v30) & 0xC0200;
        if (!v31 && v32 != 0)
          goto LABEL_15;
        while (1)
        {
          v22 = *(_QWORD *)(v22 + 24);
          if (!v22)
            break;
          if ((*(_BYTE *)(v22 + 3) & 1) == 0)
          {
            if (v12)
              v34 = (*(_QWORD *)(v27 + 16 * (*(_DWORD *)(v22 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (_QWORD)&off_1E7FA4778;
            else
              v34 = 0;
            v16 = ((*(_QWORD *)(v27 + 16 * (*(_DWORD *)(v22 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (_QWORD)&off_1E7FA4778) | v16;
            if ((v34 & v11 & 1) == 0)
              goto LABEL_33;
            goto LABEL_32;
          }
        }
      }
      else
      {
LABEL_24:
        v16 = 0;
      }
      if (v12)
      {
        v226 = v8;
        v221 = 0x200000001;
        v23 = *(unsigned __int16 *)(*(_QWORD *)(v12 + 32) + 80);
        v24 = *(unsigned __int16 *)(v18 + 80);
        v214 = v14;
        v25 = v12;
        if ((v16 & 1) != 0)
        {
          v221 = 0x100000002;
          v26 = v23;
        }
        else
        {
          v26 = *(unsigned __int16 *)(v18 + 80);
          v24 = *(unsigned __int16 *)(*(_QWORD *)(v12 + 32) + 80);
        }
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v17, "", 0);
        *(_QWORD *)(v17[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7FA5F48;
        v36 = v17[1];
        if (v36)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 24))(v36, IncompleteVirtualRegister);
        v37 = v24 | (v26 << 16);
        v216 = v25;
        v38 = sub_1C4779044(*(_QWORD *)(v25 + 24), v25, (unsigned __int8 **)(v25 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 48 * v21, IncompleteVirtualRegister);
        v40 = v39;
        v41 = 1;
        LODWORD(v222) = 1;
        *((_QWORD *)&v222 + 1) = 0;
        v223 = 0;
        llvm::MachineInstr::addOperand(v39, v38, (const llvm::MachineOperand *)&v222);
        LODWORD(v222) = 1;
        *((_QWORD *)&v222 + 1) = 0;
        v223 = v37;
        llvm::MachineInstr::addOperand(v40, v38, (const llvm::MachineOperand *)&v222);
        v42 = 0;
        do
        {
          v43 = v41;
          v44 = (&v225)[v42];
          v45 = *(unsigned int *)(*((_QWORD *)v44 + 4) + 4);
          v46 = *(_QWORD *)(a1 + 264);
          v47 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v46, "", 0);
          *(_QWORD *)(*(_QWORD *)(v46 + 24) + 16 * (v47 & 0x7FFFFFFF)) = &off_1E7FA5F10;
          v48 = *(_QWORD *)(v46 + 8);
          if (v48)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 24))(v48, v47);
          v49 = sub_1C4779044(*((_QWORD *)v44 + 3), (uint64_t)v44, (unsigned __int8 **)v44 + 7, *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 912, v47);
          v50 = *((_DWORD *)&v221 + v42);
          *((_QWORD *)&v222 + 1) = 0;
          v223 = 0;
          v224 = 0;
          LODWORD(v222) = (v50 & 0xFFF) << 8;
          DWORD1(v222) = IncompleteVirtualRegister;
          llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v222);
          *(_QWORD *)&v222 = &v223;
          *((_QWORD *)&v222 + 1) = 0x800000000;
          v52 = *(_QWORD *)(a1 + 264);
          if ((v45 & 0x80000000) != 0)
            v53 = (uint64_t *)(*(_QWORD *)(v52 + 24) + 16 * (v45 & 0x7FFFFFFF) + 8);
          else
            v53 = (uint64_t *)(*(_QWORD *)(v52 + 272) + 8 * v45);
          v54 = *v53;
          if (*v53)
          {
            while ((*(_BYTE *)(v54 + 3) & 1) != 0)
            {
              v54 = *(_QWORD *)(v54 + 24);
              if (!v54)
                goto LABEL_73;
            }
            LODWORD(v55) = 0;
            v56 = 8;
LABEL_61:
            if (v55 >= v56)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)&v223, v55 + 1, 8);
              LODWORD(v55) = DWORD2(v222);
            }
            *(_QWORD *)(v222 + 8 * v55) = v54;
            v55 = ++DWORD2(v222);
            while (1)
            {
              v54 = *(_QWORD *)(v54 + 24);
              if (!v54)
                break;
              if ((*(_BYTE *)(v54 + 3) & 1) == 0)
              {
                v56 = HIDWORD(v222);
                goto LABEL_61;
              }
            }
            v57 = (uint64_t *)v222;
            if ((_DWORD)v55)
            {
              v58 = 8 * v55;
              do
              {
                v59 = *v57++;
                llvm::MachineOperand::setReg(v59, v47);
                v58 -= 8;
              }
              while (v58);
              v57 = (uint64_t *)v222;
            }
            if (v57 != &v223)
              free(v57);
          }
LABEL_73:
          v41 = 0;
          v42 = 1;
        }
        while ((v43 & 1) != 0);
        v60 = v228;
        v14 = v214;
        if (v228 >= (unint64_t)HIDWORD(v228))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, (uint64_t)v229, v228 + 1, 8);
          v60 = v228;
        }
        v7 = v219;
        v227[v60] = v216;
        v61 = (v228 + 1);
        LODWORD(v228) = v61;
        if (v61 >= HIDWORD(v228))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, (uint64_t)v229, v61 + 1, 8);
          LODWORD(v61) = v228;
        }
        v12 = 0;
        v16 = 0;
        v227[v61] = v8;
        v9 = v228 + 1;
        LODWORD(v228) = v228 + 1;
        v225 = 0;
        v226 = 0;
        v10 = 1;
      }
      else
      {
        v225 = (unsigned __int8 *)v8;
        v12 = v8;
      }
LABEL_16:
      v11 = v16;
      v8 = v14;
    }
    while (v14 != v7);
    v62 = (_BYTE **)v227;
    if (v9)
    {
      v63 = (_BYTE **)&v227[v9];
      v64 = v213;
      do
      {
        v65 = *v62;
        v66 = *v62;
        if ((**v62 & 4) == 0)
        {
          v66 = *v62;
          if ((*((_WORD *)v65 + 22) & 8) != 0)
          {
            v66 = *v62;
            do
              v66 = (_BYTE *)*((_QWORD *)v66 + 1);
            while ((*((_WORD *)v66 + 22) & 8) != 0);
          }
        }
        sub_1C487FE80(*((_QWORD *)v65 + 3) + 40, (uint64_t)v65, *((_QWORD *)v66 + 1));
        ++v62;
      }
      while (v62 != v63);
      v62 = (_BYTE **)v227;
    }
    else
    {
      v64 = v213;
    }
    if (v62 != v229)
      free(v62);
    v6 = v210;
LABEL_93:
    v6 |= v10;
    v67 = *(unsigned __int8 *)(v207 + 318);
    if ((*(_WORD *)(*(_QWORD *)v208 + 18) & 0x3FF0) == 0x640)
    {
      if (*(_BYTE *)(v207 + 318))
        v68 = 4596;
      else
        v68 = 8199;
      if (*(_BYTE *)(v207 + 318))
        v69 = 4597;
      else
        v69 = 8189;
      v217 = v69;
      v227 = v229;
      v228 = 0x800000000;
      *(_DWORD *)(a1 + 280) = 0;
      v70 = *(_QWORD *)(v64 + 56);
      if (v70 == v7)
      {
        v71 = 0;
      }
      else
      {
        v211 = v6;
        v71 = 0;
        v204 = v67;
        v72 = 1;
        if (v67)
          v73 = 1;
        else
          v73 = 2;
        v215 = v73;
        if (v67)
          v72 = 2;
        v203 = v72;
        do
        {
          if (!v70 || (v74 = v70, (*(_BYTE *)v70 & 4) == 0))
          {
            v74 = v70;
            if ((*(_WORD *)(v70 + 44) & 8) != 0)
            {
              v74 = v70;
              do
                v74 = *(_QWORD *)(v74 + 8);
              while ((*(_WORD *)(v74 + 44) & 8) != 0);
            }
          }
          v75 = *(_QWORD *)(v74 + 8);
          v76 = *(unsigned __int16 **)(v70 + 16);
          v77 = *v76;
          v79 = (v77 - 9) <= 0x3C && ((1 << (v77 - 9)) & 0x1000000000000605) != 0
             || v77 == 0;
          if (!v79 && (v76[4] & 0x10) == 0)
          {
            if (v68 == v77)
            {
              v80 = *(_DWORD *)(*(_QWORD *)(v70 + 32) + 32 * v215 + 4);
              sub_1C4871E74(v220, v80);
              sub_1C4871E74(v220, v80 + 1);
              v77 = **(unsigned __int16 **)(v70 + 16);
            }
            if (v217 == v77)
            {
              LODWORD(v222) = *(_DWORD *)(*(_QWORD *)(v70 + 32) + 32 * v215 + 4);
              v81 = v222;
              *((_QWORD *)&v222 + 1) = v70;
              sub_1C4871F04(v220, (unsigned int *)&v222);
              v82 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 416) + 2 * (v81 ^ 1));
              v83 = *(_DWORD *)(a1 + 280);
              if (v83 > v82)
              {
                v84 = *(_QWORD *)(a1 + 272);
                while (1)
                {
                  v85 = v82;
                  if (*(_DWORD *)(v84 + 16 * v82) == (v81 ^ 1))
                    break;
                  v82 += 0x10000;
                  if (v85 + 0x10000 >= v83)
                    goto LABEL_186;
                }
                if (v83 != v82)
                {
                  v86 = *(_QWORD *)(v84 + 16 * v82 + 8);
                  v87 = v81;
                  if ((v81 & 1) != 0)
                    v88 = v70;
                  else
                    v88 = *(_QWORD *)(v84 + 16 * v82 + 8);
                  if ((v81 & 1) == 0)
                    v86 = v70;
                  v205 = v86;
                  v206 = v88;
                  v89 = *(_QWORD *)(a1 + 264);
                  v90 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v89, "", 0);
                  *(_QWORD *)(*(_QWORD *)(v89 + 24) + 16 * (v90 & 0x7FFFFFFF)) = &off_1E7FA5F48;
                  v91 = *(_QWORD *)(v89 + 8);
                  if (v91)
                    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 24))(v91);
                  v202 = v68;
                  v92 = *(_QWORD *)(v70 + 24);
                  v93 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8);
                  v94 = *(llvm::MachineFunction **)(v92 + 32);
                  v95 = *(unsigned __int8 **)(v70 + 56);
                  v225 = v95;
                  if (v95)
                    llvm::MetadataTracking::track((uint64_t)&v225, v95, 2);
                  v96 = *((_QWORD *)v94 + 28);
                  if (v96)
                    *((_QWORD *)v94 + 28) = *(_QWORD *)v96;
                  else
                    v96 = sub_1C484358C((uint64_t)v94 + 128, 72, 3);
                  *(_QWORD *)&v222 = v225;
                  if (v225)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v225, v225, (uint64_t)&v222);
                    v225 = 0;
                  }
                  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v96, v94, v93 + 864, (unsigned __int8 **)&v222, 0);
                  if ((_QWORD)v222)
                    llvm::MetadataTracking::untrack((uint64_t)&v222, (unsigned __int8 *)v222);
                  if (v225)
                    llvm::MetadataTracking::untrack((uint64_t)&v225, v225);
                  v97 = *(_QWORD *)(v92 + 40);
                  *(_QWORD *)(v96 + 24) = v97;
                  v98 = *(_QWORD *)(v97 + 32);
                  v99 = *(unsigned int *)(v96 + 40);
                  if ((_DWORD)v99)
                  {
                    v124 = *(_QWORD *)(v96 + 32);
                    v125 = *(_QWORD *)(v98 + 40);
                    v126 = 32 * v99;
                    do
                    {
                      if (!*(_BYTE *)v124)
                      {
                        v127 = *(unsigned int *)(v124 + 4);
                        if ((int)v127 >= 0)
                          v128 = (uint64_t *)(*(_QWORD *)(v125 + 272) + 8 * v127);
                        else
                          v128 = (uint64_t *)(*(_QWORD *)(v125 + 24) + 16 * (v127 & 0x7FFFFFFF) + 8);
                        v129 = *v128;
                        if (*v128)
                        {
                          v130 = *(_QWORD *)(v129 + 16);
                          *(_QWORD *)(v129 + 16) = v124;
                          *(_QWORD *)(v124 + 16) = v130;
                          if ((*(_BYTE *)(v124 + 3) & 1) != 0)
                          {
                            *(_QWORD *)(v124 + 24) = v129;
                          }
                          else
                          {
                            *(_QWORD *)(v124 + 24) = 0;
                            v128 = (uint64_t *)(v130 + 24);
                          }
                        }
                        else
                        {
                          *(_QWORD *)(v124 + 16) = v124;
                          *(_QWORD *)(v124 + 24) = 0;
                        }
                        *v128 = v124;
                      }
                      v124 += 32;
                      v126 -= 32;
                    }
                    while (v126);
                  }
                  v100 = *(_QWORD *)(v98 + 728);
                  if (v100)
                    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v100 + 24))(v100, v96);
                  v101 = *(_QWORD *)v70 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v96 = v101 | *(_QWORD *)v96 & 7;
                  *(_QWORD *)(v96 + 8) = v70;
                  *(_QWORD *)(v101 + 8) = v96;
                  *(_QWORD *)v70 = *(_QWORD *)v70 & 7 | v96;
                  *((_QWORD *)&v222 + 1) = 0;
                  v223 = 0;
                  v224 = 0;
                  LODWORD(v222) = 0x1000000;
                  DWORD1(v222) = v90;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v94, (const llvm::MachineOperand *)&v222);
                  v102 = *(_DWORD *)(*(_QWORD *)(v205 + 32) + 32 * v203 + 4);
                  *((_QWORD *)&v222 + 1) = 0;
                  LODWORD(v222) = 0;
                  DWORD1(v222) = v102;
                  v223 = 0;
                  v224 = 0;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v94, (const llvm::MachineOperand *)&v222);
                  LODWORD(v222) = 1;
                  *((_QWORD *)&v222 + 1) = 0;
                  v223 = 1;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v94, (const llvm::MachineOperand *)&v222);
                  v103 = *(_DWORD *)(*(_QWORD *)(v206 + 32) + 32 * v203 + 4);
                  *((_QWORD *)&v222 + 1) = 0;
                  LODWORD(v222) = 0;
                  DWORD1(v222) = v103;
                  v223 = 0;
                  v224 = 0;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v94, (const llvm::MachineOperand *)&v222);
                  LODWORD(v222) = 1;
                  *((_QWORD *)&v222 + 1) = 0;
                  v223 = 2;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v94, (const llvm::MachineOperand *)&v222);
                  v104 = *(_QWORD *)(v70 + 24);
                  v105 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8);
                  if (v204)
                  {
                    v106 = *(llvm::MachineFunction **)(v104 + 32);
                    v107 = *(unsigned __int8 **)(v70 + 56);
                    v225 = v107;
                    if (v107)
                      llvm::MetadataTracking::track((uint64_t)&v225, v107, 2);
                    v108 = *((_QWORD *)v106 + 28);
                    if (v108)
                      *((_QWORD *)v106 + 28) = *(_QWORD *)v108;
                    else
                      v108 = sub_1C484358C((uint64_t)v106 + 128, 72, 3);
                    *(_QWORD *)&v222 = v225;
                    if (v225)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)&v225, v225, (uint64_t)&v222);
                      v225 = 0;
                    }
                    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v108, v106, v105 + 220608, (unsigned __int8 **)&v222, 0);
                    if ((_QWORD)v222)
                      llvm::MetadataTracking::untrack((uint64_t)&v222, (unsigned __int8 *)v222);
                    if (v225)
                      llvm::MetadataTracking::untrack((uint64_t)&v225, v225);
                    v112 = *(_QWORD *)(v104 + 40);
                    *(_QWORD *)(v108 + 24) = v112;
                    v113 = *(_QWORD *)(v112 + 32);
                    v114 = *(unsigned int *)(v108 + 40);
                    if ((_DWORD)v114)
                    {
                      v131 = *(_QWORD *)(v108 + 32);
                      v132 = *(_QWORD *)(v113 + 40);
                      v133 = 32 * v114;
                      do
                      {
                        if (!*(_BYTE *)v131)
                        {
                          v134 = *(unsigned int *)(v131 + 4);
                          if ((int)v134 >= 0)
                            v135 = (uint64_t *)(*(_QWORD *)(v132 + 272) + 8 * v134);
                          else
                            v135 = (uint64_t *)(*(_QWORD *)(v132 + 24) + 16 * (v134 & 0x7FFFFFFF) + 8);
                          v136 = *v135;
                          if (*v135)
                          {
                            v137 = *(_QWORD *)(v136 + 16);
                            *(_QWORD *)(v136 + 16) = v131;
                            *(_QWORD *)(v131 + 16) = v137;
                            if ((*(_BYTE *)(v131 + 3) & 1) != 0)
                            {
                              *(_QWORD *)(v131 + 24) = v136;
                            }
                            else
                            {
                              *(_QWORD *)(v131 + 24) = 0;
                              v135 = (uint64_t *)(v137 + 24);
                            }
                          }
                          else
                          {
                            *(_QWORD *)(v131 + 16) = v131;
                            *(_QWORD *)(v131 + 24) = 0;
                          }
                          *v135 = v131;
                        }
                        v131 += 32;
                        v133 -= 32;
                      }
                      while (v133);
                    }
                    v115 = *(_QWORD *)(v113 + 728);
                    if (v115)
                      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v115 + 24))(v115, v108);
                    v116 = *(_QWORD *)v70 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v108 = v116 | *(_QWORD *)v108 & 7;
                    *(_QWORD *)(v108 + 8) = v70;
                    *(_QWORD *)(v116 + 8) = v108;
                    *(_QWORD *)v70 = *(_QWORD *)v70 & 7 | v108;
                    LODWORD(v222) = 1;
                    *((_QWORD *)&v222 + 1) = 0;
                    v223 = 0;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v108, v106, (const llvm::MachineOperand *)&v222);
                    HIDWORD(v222) = 0;
                    LODWORD(v223) = 64;
                    LODWORD(v224) = 0;
                    LODWORD(v222) = 519;
                    *(_QWORD *)((char *)&v222 + 4) = v87 & 0xFFFFFFFE;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v108, v106, (const llvm::MachineOperand *)&v222);
                    *((_QWORD *)&v222 + 1) = 0;
                    LODWORD(v222) = 0;
                    DWORD1(v222) = v90;
                    v223 = 0;
                    v224 = 0;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v108, v106, (const llvm::MachineOperand *)&v222);
                    LODWORD(v222) = 1;
                    *((_QWORD *)&v222 + 1) = 0;
                    v223 = 0;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v108, v106, (const llvm::MachineOperand *)&v222);
                  }
                  else
                  {
                    v109 = *(llvm::MachineFunction **)(v104 + 32);
                    v110 = *(unsigned __int8 **)(v70 + 56);
                    v225 = v110;
                    if (v110)
                      llvm::MetadataTracking::track((uint64_t)&v225, v110, 2);
                    v111 = *((_QWORD *)v109 + 28);
                    if (v111)
                      *((_QWORD *)v109 + 28) = *(_QWORD *)v111;
                    else
                      v111 = sub_1C484358C((uint64_t)v109 + 128, 72, 3);
                    *(_QWORD *)&v222 = v225;
                    if (v225)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)&v225, v225, (uint64_t)&v222);
                      v225 = 0;
                    }
                    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v111, v109, v105 + 393552, (unsigned __int8 **)&v222, 0);
                    if ((_QWORD)v222)
                      llvm::MetadataTracking::untrack((uint64_t)&v222, (unsigned __int8 *)v222);
                    if (v225)
                      llvm::MetadataTracking::untrack((uint64_t)&v225, v225);
                    v117 = *(_QWORD *)(v104 + 40);
                    *(_QWORD *)(v111 + 24) = v117;
                    v118 = *(_QWORD *)(v117 + 32);
                    v119 = *(unsigned int *)(v111 + 40);
                    if ((_DWORD)v119)
                    {
                      v138 = *(_QWORD *)(v111 + 32);
                      v139 = *(_QWORD *)(v118 + 40);
                      v140 = 32 * v119;
                      do
                      {
                        if (!*(_BYTE *)v138)
                        {
                          v141 = *(unsigned int *)(v138 + 4);
                          if ((int)v141 >= 0)
                            v142 = (uint64_t *)(*(_QWORD *)(v139 + 272) + 8 * v141);
                          else
                            v142 = (uint64_t *)(*(_QWORD *)(v139 + 24) + 16 * (v141 & 0x7FFFFFFF) + 8);
                          v143 = *v142;
                          if (*v142)
                          {
                            v144 = *(_QWORD *)(v143 + 16);
                            *(_QWORD *)(v143 + 16) = v138;
                            *(_QWORD *)(v138 + 16) = v144;
                            if ((*(_BYTE *)(v138 + 3) & 1) != 0)
                            {
                              *(_QWORD *)(v138 + 24) = v143;
                            }
                            else
                            {
                              *(_QWORD *)(v138 + 24) = 0;
                              v142 = (uint64_t *)(v144 + 24);
                            }
                          }
                          else
                          {
                            *(_QWORD *)(v138 + 16) = v138;
                            *(_QWORD *)(v138 + 24) = 0;
                          }
                          *v142 = v138;
                        }
                        v138 += 32;
                        v140 -= 32;
                      }
                      while (v140);
                    }
                    v120 = *(_QWORD *)(v118 + 728);
                    if (v120)
                      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v120 + 24))(v120, v111);
                    v121 = *(_QWORD *)v70 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v111 = v121 | *(_QWORD *)v111 & 7;
                    *(_QWORD *)(v111 + 8) = v70;
                    *(_QWORD *)(v121 + 8) = v111;
                    *(_QWORD *)v70 = *(_QWORD *)v70 & 7 | v111;
                    LODWORD(v222) = 1;
                    *((_QWORD *)&v222 + 1) = 0;
                    v223 = 49;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v109, (const llvm::MachineOperand *)&v222);
                    *((_QWORD *)&v222 + 1) = 0;
                    LODWORD(v222) = 0;
                    DWORD1(v222) = v90;
                    v223 = 0;
                    v224 = 0;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v109, (const llvm::MachineOperand *)&v222);
                    HIDWORD(v222) = 0;
                    LODWORD(v223) = 64;
                    LODWORD(v224) = 0;
                    LODWORD(v222) = 519;
                    *(_QWORD *)((char *)&v222 + 4) = v87 & 0xFFFFFFFE;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v109, (const llvm::MachineOperand *)&v222);
                  }
                  v122 = v228;
                  v7 = v219;
                  v68 = v202;
                  if (v228 >= (unint64_t)HIDWORD(v228))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, (uint64_t)v229, v228 + 1, 8);
                    v122 = v228;
                  }
                  v227[v122] = v205;
                  v123 = (v228 + 1);
                  LODWORD(v228) = v123;
                  if (v123 >= HIDWORD(v228))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, (uint64_t)v229, v123 + 1, 8);
                    LODWORD(v123) = v228;
                  }
                  v227[v123] = v206;
                  LODWORD(v228) = v228 + 1;
                  v71 = 1;
                }
              }
            }
          }
LABEL_186:
          v70 = v75;
        }
        while (v75 != v7);
        v193 = (_BYTE **)v227;
        v194 = (_BYTE **)&v227[v228];
        if ((_DWORD)v228)
        {
          do
          {
            v200 = *v193;
            v199 = *v193;
            if ((**v193 & 4) == 0)
            {
              v199 = *v193;
              if ((*((_WORD *)v200 + 22) & 8) != 0)
              {
                v199 = *v193;
                do
                  v199 = (_BYTE *)*((_QWORD *)v199 + 1);
                while ((*((_WORD *)v199 + 22) & 8) != 0);
              }
            }
            sub_1C487FE80(*((_QWORD *)v200 + 3) + 40, (uint64_t)v200, *((_QWORD *)v199 + 1));
            ++v193;
          }
          while (v193 != v194);
          v193 = (_BYTE **)v227;
        }
        if (v193 != v229)
          free(v193);
        v6 = v211;
      }
      v6 |= v71;
      v64 = v213;
      goto LABEL_331;
    }
    if (!*(_BYTE *)(v207 + 318))
      goto LABEL_331;
    v227 = v229;
    v228 = 0x800000000;
    *(_DWORD *)(a1 + 280) = 0;
    v145 = *(_QWORD *)(v64 + 56);
    if (v145 == v7)
    {
      v146 = 0;
      goto LABEL_319;
    }
    v212 = v6;
    v146 = 0;
    while (2)
    {
      if (!v145 || (v147 = v145, (*(_BYTE *)v145 & 4) == 0))
      {
        v147 = v145;
        if ((*(_WORD *)(v145 + 44) & 8) != 0)
        {
          v147 = v145;
          do
            v147 = *(_QWORD *)(v147 + 8);
          while ((*(_WORD *)(v147 + 44) & 8) != 0);
        }
      }
      v148 = *(_QWORD *)(v147 + 8);
      if (**(_WORD **)(v145 + 16) == 4580)
      {
        v149 = *(_QWORD *)(v145 + 32);
        v150 = *(_QWORD **)(a1 + 264);
        v151 = *(unsigned int *)(v149 + 4);
        if ((v151 & 0x80000000) != 0)
          v152 = (uint64_t *)(v150[3] + 16 * (v151 & 0x7FFFFFFF) + 8);
        else
          v152 = (uint64_t *)(v150[34] + 8 * v151);
        v153 = *(unsigned int *)(v149 + 68);
        v154 = *v152;
        if (*v152)
        {
          while ((*(_BYTE *)(v154 + 3) & 1) != 0)
          {
            v154 = *(_QWORD *)(v154 + 24);
            if (!v154)
              goto LABEL_242;
          }
LABEL_247:
          v159 = (_UNKNOWN ***)(*(_QWORD *)(v150[3] + 16 * (*(_DWORD *)(v154 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) != &off_1E7FA4778
              || (v153 & 1) == 0;
          if (!v159
            || ((v160 = **(unsigned __int16 **)(*(_QWORD *)(v154 + 8) + 16),
                 v31 = v160 > 0x13,
                 v161 = (1 << v160) & 0xC0200,
                 !v31)
              ? (v162 = v161 == 0)
              : (v162 = 1),
                !v162))
          {
LABEL_262:
            v7 = v219;
            goto LABEL_263;
          }
          while (1)
          {
            v154 = *(_QWORD *)(v154 + 24);
            if (!v154)
              break;
            if ((*(_BYTE *)(v154 + 3) & 1) == 0)
              goto LABEL_247;
          }
        }
LABEL_242:
        v155 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 416) + 2 * (v153 ^ 1));
        v156 = *(unsigned int *)(a1 + 280);
        if (v156 <= v155)
          goto LABEL_261;
        v157 = *(_QWORD *)(a1 + 272);
        while (1)
        {
          v158 = v155;
          if (*(_DWORD *)(v157 + 16 * v155) == (v153 ^ 1))
            break;
          v155 += 0x10000;
          if (v158 + 0x10000 >= v156)
            goto LABEL_261;
        }
        if ((_DWORD)v156 == v155)
        {
LABEL_261:
          LODWORD(v222) = v153;
          *((_QWORD *)&v222 + 1) = v145;
          sub_1C4871F04(v220, (unsigned int *)&v222);
          goto LABEL_262;
        }
        v163 = v157 + 16 * v155;
        v164 = *(_QWORD *)(v163 + 8);
        v225 = (unsigned __int8 *)v164;
        v226 = v145;
        v165 = (_OWORD *)(v157 + 16 * v156 - 16);
        if (v165 != (_OWORD *)v163)
        {
          *(_OWORD *)v163 = *v165;
          v166 = *(unsigned int *)(a1 + 280);
          *(_WORD *)(*(_QWORD *)(a1 + 416) + 2 * *(unsigned int *)(*(_QWORD *)(a1 + 272) + 16 * v166 - 16)) = (v163 - *(_QWORD *)(a1 + 272)) >> 4;
          v150 = *(_QWORD **)(a1 + 264);
          LODWORD(v156) = v166;
        }
        *(_DWORD *)(a1 + 280) = v156 - 1;
        v167 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v150, "", 0);
        *(_QWORD *)(v150[3] + 16 * (v167 & 0x7FFFFFFF)) = &off_1E7FA5F48;
        v168 = v150[1];
        if (v168)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v168 + 24))(v168, v167);
        v169 = sub_1C4779044(*(_QWORD *)(v164 + 24), v164, (unsigned __int8 **)(v164 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 219744, v167);
        v171 = v170;
        LODWORD(v222) = 1;
        *((_QWORD *)&v222 + 1) = 0;
        v223 = 0;
        llvm::MachineInstr::addOperand(v170, v169, (const llvm::MachineOperand *)&v222);
        HIDWORD(v222) = 0;
        LODWORD(v223) = 64;
        LODWORD(v224) = 0;
        LODWORD(v222) = 519;
        *(_QWORD *)((char *)&v222 + 4) = v153 & 0xFFFFFFFE;
        llvm::MachineInstr::addOperand(v171, v169, (const llvm::MachineOperand *)&v222);
        if ((v153 & 1) != 0)
        {
          v218 = v145;
          v145 = v164;
        }
        else
        {
          v225 = (unsigned __int8 *)v145;
          v226 = v164;
          v218 = v164;
        }
        v172 = 0;
        v173 = 1;
        do
        {
          v174 = v173;
          v175 = (&v225)[v172];
          v176 = *(unsigned int *)(*((_QWORD *)v175 + 4) + 4);
          v177 = *(_QWORD *)(a1 + 264);
          v178 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v177, "", 0);
          *(_QWORD *)(*(_QWORD *)(v177 + 24) + 16 * (v178 & 0x7FFFFFFF)) = &off_1E7FA5F10;
          v179 = *(_QWORD *)(v177 + 8);
          if (v179)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v179 + 24))(v179, v178);
          v181 = sub_1C4779044(*((_QWORD *)v175 + 3), (uint64_t)v175, (unsigned __int8 **)v175 + 7, *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 912, v178);
          *((_QWORD *)&v222 + 1) = 0;
          if ((v174 & 1) != 0)
            v182 = 256;
          else
            v182 = 512;
          v223 = 0;
          v224 = 0;
          *(_QWORD *)&v222 = __PAIR64__(v167, v182);
          llvm::MachineInstr::addOperand(v180, v181, (const llvm::MachineOperand *)&v222);
          *(_QWORD *)&v222 = &v223;
          *((_QWORD *)&v222 + 1) = 0x800000000;
          v183 = *(_QWORD *)(a1 + 264);
          if ((v176 & 0x80000000) != 0)
            v184 = (uint64_t *)(*(_QWORD *)(v183 + 24) + 16 * (v176 & 0x7FFFFFFF) + 8);
          else
            v184 = (uint64_t *)(*(_QWORD *)(v183 + 272) + 8 * v176);
          v185 = *v184;
          if (*v184)
          {
            while ((*(_BYTE *)(v185 + 3) & 1) != 0)
            {
              v185 = *(_QWORD *)(v185 + 24);
              if (!v185)
                goto LABEL_298;
            }
            LODWORD(v186) = 0;
            v187 = 8;
LABEL_286:
            if (v186 >= v187)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)&v223, v186 + 1, 8);
              LODWORD(v186) = DWORD2(v222);
            }
            *(_QWORD *)(v222 + 8 * v186) = v185;
            v186 = ++DWORD2(v222);
            while (1)
            {
              v185 = *(_QWORD *)(v185 + 24);
              if (!v185)
                break;
              if ((*(_BYTE *)(v185 + 3) & 1) == 0)
              {
                v187 = HIDWORD(v222);
                goto LABEL_286;
              }
            }
            v188 = (uint64_t *)v222;
            if ((_DWORD)v186)
            {
              v189 = 8 * v186;
              do
              {
                v190 = *v188++;
                llvm::MachineOperand::setReg(v190, v178);
                v189 -= 8;
              }
              while (v189);
              v188 = (uint64_t *)v222;
            }
            if (v188 != &v223)
              free(v188);
          }
LABEL_298:
          v173 = 0;
          v172 = 1;
        }
        while ((v174 & 1) != 0);
        v191 = v228;
        if (v228 >= (unint64_t)HIDWORD(v228))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, (uint64_t)v229, v228 + 1, 8);
          v191 = v228;
        }
        v7 = v219;
        v227[v191] = v145;
        v192 = (v228 + 1);
        LODWORD(v228) = v192;
        if (v192 >= HIDWORD(v228))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, (uint64_t)v229, v192 + 1, 8);
          LODWORD(v192) = v228;
        }
        v227[v192] = v218;
        LODWORD(v228) = v228 + 1;
        v146 = 1;
      }
LABEL_263:
      v145 = v148;
      if (v148 != v7)
        continue;
      break;
    }
    v195 = (_BYTE **)v227;
    v196 = (_BYTE **)&v227[v228];
    v64 = v213;
    if ((_DWORD)v228)
    {
      do
      {
        v197 = *v195;
        v198 = *v195;
        if ((**v195 & 4) == 0)
        {
          v198 = *v195;
          if ((*((_WORD *)v197 + 22) & 8) != 0)
          {
            v198 = *v195;
            do
              v198 = (_BYTE *)*((_QWORD *)v198 + 1);
            while ((*((_WORD *)v198 + 22) & 8) != 0);
          }
        }
        sub_1C487FE80(*((_QWORD *)v197 + 3) + 40, (uint64_t)v197, *((_QWORD *)v198 + 1));
        ++v195;
      }
      while (v195 != v196);
      v195 = (_BYTE **)v227;
    }
    if (v195 != v229)
      free(v195);
    v6 = v212;
LABEL_319:
    v6 |= v146;
LABEL_331:
    v5 = *(_QWORD *)(v64 + 8);
  }
  while (v5 != v209);
  return v6 & 1;
}

uint64_t *sub_1C4871E74(uint64_t *result, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;

  v2 = *(unsigned __int16 *)(result[18] + 2 * a2);
  v3 = *((unsigned int *)result + 2);
  if (v3 > v2)
  {
    v4 = *result;
    while (1)
    {
      v5 = v2;
      if (*(_DWORD *)(v4 + 16 * v2) == a2)
        break;
      v2 += 0x10000;
      if (v5 + 0x10000 >= v3)
        return result;
    }
    if ((_DWORD)v3 != v2)
    {
      v6 = (_OWORD *)(v4 + 16 * v2);
      v7 = (_OWORD *)(v4 + 16 * v3 - 16);
      if (v7 != v6)
      {
        *v6 = *v7;
        v8 = *((unsigned int *)result + 2);
        *(_WORD *)(result[18] + 2 * *(unsigned int *)(*result + 16 * v8 - 16)) = (v6
                                                                                  - *result) >> 4;
        LODWORD(v3) = v8;
      }
      *((_DWORD *)result + 2) = v3 - 1;
    }
  }
  return result;
}

_QWORD *sub_1C4871F04(_QWORD *result, unsigned int *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v2 = result;
  v3 = *a2;
  v4 = result[18];
  v5 = *(unsigned __int16 *)(v4 + 2 * v3);
  v6 = *((unsigned int *)result + 2);
  v7 = *result;
  if (v6 <= v5)
    goto LABEL_6;
  while (*(_DWORD *)(v7 + 16 * v5) != (_DWORD)v3)
  {
    v5 += 0x10000;
    if (v5 >= v6)
      goto LABEL_6;
  }
  if ((_DWORD)v6 == v5)
  {
LABEL_6:
    *(_WORD *)(v4 + 2 * v3) = v6;
    v8 = *(_OWORD *)a2;
    if (v6 >= *((_DWORD *)result + 3))
    {
      v9 = *(_OWORD *)a2;
      result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 2), v6 + 1, 16);
      v8 = v9;
      v7 = *v2;
      v6 = *((unsigned int *)v2 + 2);
    }
    *(_OWORD *)(v7 + 16 * v6) = v8;
    ++*((_DWORD *)v2 + 2);
  }
  return result;
}

uint64_t sub_1C4871FB8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX2 Expand Pseudos";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "agx2-expand-pseudos";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EF720;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4872044;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

double sub_1C4872044()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8EF720);
  *(_QWORD *)v1 = &off_1E7F9FA70;
  *(_QWORD *)(v1 + 248) = v1 + 280;
  *(_QWORD *)(v1 + 256) = v1 + 280;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(v1 + 264) = 8;
  *(_DWORD *)(v1 + 272) = 0;
  *(_QWORD *)(v1 + 392) = 0;
  *(_QWORD *)(v1 + 397) = 0;
  return result;
}

void sub_1C48720A8(llvm::Pass *this)
{
  void *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E7F9FA70;
  v2 = (void *)*((_QWORD *)this + 32);
  if (v2 != *((void **)this + 31))
    free(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
}

void sub_1C4872140(llvm::Pass *this)
{
  void *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E7F9FA70;
  v2 = (void *)*((_QWORD *)this + 32);
  if (v2 != *((void **)this + 31))
    free(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C48721EC()
{
  return "AGX2 expand pseudo inst pass";
}

uint64_t sub_1C48721FC(unint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  int8x8_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _BYTE *v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  BOOL v17;
  int v18;
  _QWORD *v19;
  unint64_t *v20;
  uint64_t v21;
  llvm::MachineFunction *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t i;
  unsigned __int16 *v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t *v36;
  unsigned __int16 *v37;
  int v38;
  BOOL v39;
  BOOL v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::MachineFunction *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  llvm::MachineFunction *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  BOOL v67;
  char v68;
  unsigned __int16 *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  unsigned __int16 *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  llvm::MachineFunction *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  unint64_t v99;
  unsigned __int16 *v100;
  int v101;
  BOOL v103;
  unint64_t v104;
  unsigned __int16 *v105;
  uint64_t v106;
  uint64_t v107;
  llvm::MachineFunction *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  llvm::MachineFunction **v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  unsigned int v141;
  uint64_t v142;
  llvm::MachineFunction *v143;
  void *v144;
  unint64_t v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  unint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  llvm::MachineFunction *v156;
  unsigned __int8 *v157;
  unint64_t v158;
  unsigned int v159;
  uint64_t v160;
  llvm::MachineFunction *v161;
  void *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  llvm::MachineFunction *v167;
  void *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  llvm::MachineFunction *v181;
  void *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  unint64_t v208;
  __int16 v209;
  uint64_t v210;
  int v211;
  int v212;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  llvm::MachineFunction *v223;
  void *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t *v231;
  _BYTE *v232;
  uint64_t v233;
  int v234;
  unsigned int v235;
  uint64_t v236;
  llvm::MachineFunction *v237;
  void *v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unsigned int v242;
  unsigned __int16 *v243;
  unsigned __int16 *j;
  int v245;
  uint64_t k;
  uint64_t v247;
  uint64_t v248;
  int *v249;
  int v250;
  unint64_t v251;
  uint64_t v252;
  _BYTE *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  int v257;
  int v258;
  char *v259;
  int v260;
  int v261;
  char *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  _QWORD *v267;
  uint64_t v268;
  llvm::BasicBlock *v269;
  unint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t *v275;
  uint64_t v276;
  unint64_t *v277;
  char *v279;
  char *v280;
  int v281;
  unint64_t v282;
  _QWORD *v283;
  _QWORD *v284;
  _QWORD *v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  char *v290;
  char *v291;
  char *v292;
  llvm::BasicBlock *v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  char *v298;
  char *v299;
  int v300;
  unint64_t v301;
  _QWORD *v302;
  _QWORD *v303;
  _QWORD *v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  char *v309;
  char *v310;
  char *v311;
  char *v312;
  int v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t v316;
  llvm::MachineFunction *v317;
  unsigned __int8 *v318;
  unint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  llvm::MachineFunction *v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  llvm::MachineFunction *v328;
  void *v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  llvm::MachineFunction *v338;
  void *v339;
  unint64_t v340;
  llvm::MachineFunction *v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  llvm::MachineFunction *v356;
  unsigned __int8 *v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  int v364;
  uint64_t v365;
  llvm::MachineFunction *v366;
  unsigned __int8 *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  llvm::MachineFunction *v375;
  unsigned __int8 *v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  void *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t *v498;
  uint64_t v499;
  uint64_t v500;
  char *v501;
  char *v502;
  int v503;
  int v504;
  _BYTE *v505;
  _BYTE *v506;
  _BYTE *v507;
  int v508;
  _QWORD *v509;
  unint64_t *v510;
  uint64_t v511;
  uint64_t v512;
  llvm::MachineFunction *v513;
  unint64_t v514;
  llvm::MachineBasicBlock *v515;
  llvm::MachineBasicBlock *v516;
  llvm::MachineBasicBlock *v517;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  _BYTE *v524;
  _QWORD *v525;
  unint64_t *v526;
  unint64_t *v527;
  unint64_t v528;
  unint64_t v529;
  int v530;
  uint64_t v531;
  unint64_t v533;
  unint64_t FirstTerminator;
  unint64_t v536;
  unint64_t v537;
  unsigned __int16 *v538;
  uint64_t v539;
  uint64_t v540;
  unsigned int v541;
  unsigned int v542;
  __int16 v544;
  uint64_t v545;
  unint64_t v546;
  unint64_t v547;
  unint64_t v548;
  uint64_t v549;
  uint64_t v550;
  llvm::MachineBasicBlock *v551;
  unint64_t v552;
  uint64_t v553;
  unint64_t v554;
  char v555;
  uint64_t v556;
  _BYTE *v557;
  unsigned __int16 *v558;
  uint64_t v559;
  uint64_t v560;
  unsigned int v561;
  unsigned int v562;
  uint64_t v564;
  _BYTE *v566;
  char *v567;
  uint64_t *v568;
  char *v569;
  unint64_t v570;
  BOOL v571;
  unint64_t v572;
  uint64_t v573;
  unint64_t v575;
  unint64_t v576;
  unint64_t v577;
  _BYTE *v578;
  BOOL v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unsigned int v604;
  unint64_t v605;
  unsigned __int16 *v606;
  uint64_t v607;
  _QWORD *m;
  unint64_t v609;
  unsigned __int16 *v610;
  uint64_t v611;
  void *v612;
  uint64_t v613;
  llvm::MachineFunction *v614;
  unint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  _QWORD *v623;
  _QWORD *v624;
  uint64_t n;
  unsigned int v626;
  unint64_t v627;
  _WORD *v628;
  unsigned __int16 *v629;
  __int16 v630;
  unsigned __int16 v631;
  unsigned int v632;
  int v633;
  int v634;
  uint64_t *v635;
  char *v636;
  char *v637;
  uint64_t v638;
  int v639;
  int v640;
  char *v641;
  int v642;
  int v643;
  unint64_t v644;
  unint64_t v645;
  uint64_t v646;
  uint64_t v647;
  _QWORD *v648;
  unint64_t *v649;
  unint64_t v650;
  uint64_t v651;
  llvm::MachineFunction *v652;
  unint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  unint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t *v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  _QWORD *v667;
  _QWORD *v668;
  unsigned __int16 *v669;
  unsigned __int16 *v670;
  _QWORD *v671;
  unsigned __int16 *v672;
  unsigned __int16 *v673;
  int v674;
  int v675;
  int v676;
  _QWORD *v677;
  _QWORD *v678;
  uint64_t v679;
  uint64_t v680;
  _DWORD *v681;
  _DWORD *v682;
  unsigned int v683;
  unint64_t v684;
  _WORD *v685;
  unsigned __int16 v686;
  uint64_t v687;
  _QWORD *ii;
  unsigned int v689;
  _DWORD *v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  unsigned int v694;
  unsigned int v695;
  unsigned int v696;
  uint64_t v697;
  int v698;
  char *v699;
  char *v700;
  char *v701;
  unsigned int v702;
  uint64_t v703;
  int v704;
  int v705;
  char *v706;
  int v707;
  int v708;
  unint64_t v709;
  unint64_t v710;
  uint64_t v711;
  uint64_t v712;
  _QWORD *v713;
  unint64_t *v714;
  unint64_t v715;
  uint64_t v716;
  llvm::MachineFunction *v717;
  unint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  unint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t *v728;
  uint64_t v729;
  uint64_t v730;
  _QWORD *v731;
  _QWORD *v732;
  unsigned int v733;
  unsigned int v734;
  unsigned int v735;
  uint64_t v736;
  uint64_t v737;
  unsigned int *v738;
  uint64_t *v739;
  uint64_t v740;
  __int16 v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  unint64_t v745;
  uint64_t v746;
  unsigned __int16 *v747;
  int v748;
  BOOL v750;
  int v751;
  BOOL v752;
  uint64_t v753;
  unsigned int v754;
  int v756;
  unsigned __int16 *v757;
  int v758;
  BOOL v759;
  BOOL v760;
  _BYTE *v761;
  unint64_t v762;
  unsigned int v763;
  unint64_t v765;
  unsigned int *v766;
  unsigned int v767;
  unsigned int *v768;
  unsigned __int16 *v769;
  int v770;
  BOOL v772;
  unsigned int **v773;
  unsigned int *v774;
  _QWORD *v775;
  uint64_t v776;
  unsigned int v777;
  uint64_t v778;
  uint64_t v779;
  unsigned int v780;
  _WORD *v781;
  unsigned __int16 *v782;
  int v783;
  int v784;
  _QWORD *v785;
  unint64_t v786;
  unsigned int v787;
  _QWORD *kk;
  unsigned int v789;
  _DWORD *v790;
  uint64_t v791;
  unsigned int jj;
  uint64_t v793;
  unsigned int v794;
  uint64_t v796;
  uint64_t v797;
  llvm::MachineFunction *v798;
  unsigned __int8 *v799;
  llvm::MachineInstr *v800;
  unint64_t v801;
  int v802;
  uint64_t v803;
  unint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  unint64_t v808;
  llvm::MachineInstr *v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t *v814;
  uint64_t v815;
  uint64_t v816;
  char v817;
  _QWORD *v818;
  unsigned int v819;
  _QWORD *v820;
  uint64_t v821;
  uint64_t *v822;
  uint64_t v823;
  llvm::MachineFunction *v824;
  unint64_t v825;
  llvm::MachineFunction *v826;
  llvm::MachineInstr *v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  unint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t *v837;
  uint64_t v838;
  uint64_t v839;
  _QWORD *v840;
  unint64_t *v841;
  int v842;
  unsigned int v843;
  uint64_t v844;
  __int16 v845;
  uint64_t v846;
  uint64_t v847;
  unint64_t v849;
  int v850;
  uint64_t v851;
  _QWORD *v852;
  uint64_t mm;
  unint64_t v854;
  uint64_t v855;
  llvm::MachineFunction *v856;
  unint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  unint64_t v862;
  _QWORD *nn;
  uint64_t i1;
  uint64_t v865;
  llvm::MachineFunction *v866;
  unint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  unint64_t v872;
  uint64_t v873;
  unint64_t *v874;
  uint64_t v875;
  llvm::MachineFunction *v876;
  unint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  unint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t *v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t *v910;
  uint64_t v911;
  uint64_t v912;
  unsigned int v913;
  int v914;
  unsigned int v915;
  void *v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t *v923;
  uint64_t v924;
  uint64_t v925;
  int v926;
  _QWORD *v927;
  unsigned int v928;
  _QWORD *v929;
  int v930;
  int v931;
  int v932;
  int v933;
  unint64_t v934;
  uint64_t v935;
  int v936;
  _QWORD *v937;
  unsigned int v938;
  llvm::MachineFunction *v939;
  llvm::MachineInstr *v940;
  llvm::MachineInstr *v941;
  uint64_t v942;
  unint64_t v943;
  unint64_t v944;
  int v945;
  unint64_t *v946;
  llvm::MachineFunction *v947;
  llvm::MachineFunction *v948;
  llvm::MachineFunction *v949;
  uint64_t v950;
  char v951;
  int v952;
  unint64_t *v953;
  uint64_t v954;
  uint64_t v955;
  _QWORD *v956;
  uint64_t v957;
  uint64_t v958;
  _QWORD *v959;
  _BYTE *v960;
  _BYTE *v961;
  _BYTE *v962;
  unsigned int *v963;
  unsigned int v964;
  unsigned int *v965;
  _QWORD *v966;
  uint64_t v967;
  uint64_t v968;
  int v969;
  void **v970;
  uint64_t v971;
  unsigned int v972;
  _QWORD *v973;
  uint64_t v974;
  _QWORD *v975;
  uint64_t v976;
  unsigned int v977;
  _QWORD *v978;
  unsigned __int8 *v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  unsigned __int8 *v983;
  void *v984;
  __int128 v985;
  uint64_t v986;
  void *v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  _BYTE v991[48];
  _QWORD **v992;
  _QWORD *v993;
  uint64_t v994;
  _QWORD **v995;
  _QWORD *v996;
  uint64_t v997;
  void *v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;

  v3 = a1;
  v1002 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 344) = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a2[1] + 16))(a2[1], *a2);
  *(_QWORD *)(v3 + 352) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[2] + 104))(a2[2]);
  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[2] + 176))(a2[2]);
  v5 = *(void **)(v3 + 248);
  *(_QWORD *)(v3 + 360) = v4;
  *(_QWORD *)(v3 + 368) = a2[5];
  v927 = a2;
  *(_QWORD *)(v3 + 376) = a2[43];
  v6 = *(void **)(v3 + 256);
  if (v6 == v5)
    goto LABEL_2;
  v51 = *(unsigned int *)(v3 + 264);
  if (v51 < 0x21 || 4 * (*(_DWORD *)(v3 + 268) - *(_DWORD *)(v3 + 272)) >= v51)
  {
    memset(v6, 255, 8 * v51);
LABEL_2:
    *(_QWORD *)(v3 + 268) = 0;
    goto LABEL_3;
  }
  free(v6);
  v913 = *(_DWORD *)(v3 + 268) - *(_DWORD *)(v3 + 272);
  v914 = 1 << (33 - __clz(v913 - 1));
  if (v913 <= 0x10)
    v915 = 32;
  else
    v915 = v914;
  *(_DWORD *)(v3 + 264) = v915;
  *(_QWORD *)(v3 + 268) = 0;
  v916 = malloc_type_malloc(8 * v915, 0x4065EBACuLL);
  if (!v916)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(v3 + 256) = v916;
  memset(v916, 255, 8 * *(unsigned int *)(v3 + 264));
LABEL_3:
  *(_WORD *)(v3 + 388) = 257;
  v7 = (int8x8_t)257;
  *(_DWORD *)(v3 + 384) = 257;
  *(_BYTE *)(v3 + 390) = 1;
  *(_BYTE *)(v3 + 405) = 0;
  v8 = a2[6];
  if (!v8)
  {
    v8 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *))(*(_QWORD *)a2[1] + 216))(a2[1], a2 + 16, a2);
    a2[6] = v8;
  }
  v9 = *(_BYTE *)(v8 + 453);
  if (v9)
  {
    v10 = a2 + 40;
    v11 = (_QWORD *)a2[41];
    v9 = v11 != a2 + 40 && (v12 = (_QWORD *)v11[1], v12 != v10) && v12[1] != (_QWORD)v10;
  }
  *(_BYTE *)(v3 + 391) = v9;
  v13 = *(_BYTE **)(v3 + 344);
  if (v13[318])
    v14 = 4674;
  else
    v14 = 4675;
  if (v13[327])
    v15 = 4676;
  else
    v15 = v14;
  v16 = a2;
  v926 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
  if (v13[337])
    v17 = ((*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF) == 107;
  else
    v17 = 1;
  v18 = !v17;
  v930 = v18;
  v928 = v15;
  if (!v17)
  {
    v19 = (_QWORD *)a2[41];
    v20 = (unint64_t *)v19[7];
    v984 = 0;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8) + 48 * v15;
    v22 = (llvm::MachineFunction *)v19[4];
    v998 = 0;
    v23 = *((_QWORD *)v22 + 28);
    if (v23)
      *((_QWORD *)v22 + 28) = *(_QWORD *)v23;
    else
      v23 = sub_1C484358C((uint64_t)v22 + 128, 72, 3);
    v987 = 0;
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v23, v22, v21, (unsigned __int8 **)&v987, 0);
    if (v987)
      llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
    if (v998)
      llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
    v24 = v19[5];
    *(_QWORD *)(v23 + 24) = v24;
    v25 = *(_QWORD *)(v24 + 32);
    v26 = *(unsigned int *)(v23 + 40);
    if ((_DWORD)v26)
    {
      v580 = *(_QWORD *)(v23 + 32);
      v581 = *(_QWORD *)(v25 + 40);
      v582 = 32 * v26;
      do
      {
        if (!*(_BYTE *)v580)
        {
          v583 = *(unsigned int *)(v580 + 4);
          if ((int)v583 >= 0)
            v584 = (uint64_t *)(*(_QWORD *)(v581 + 272) + 8 * v583);
          else
            v584 = (uint64_t *)(*(_QWORD *)(v581 + 24) + 16 * (v583 & 0x7FFFFFFF) + 8);
          v585 = *v584;
          if (*v584)
          {
            v586 = *(_QWORD *)(v585 + 16);
            *(_QWORD *)(v585 + 16) = v580;
            *(_QWORD *)(v580 + 16) = v586;
            if ((*(_BYTE *)(v580 + 3) & 1) != 0)
            {
              *(_QWORD *)(v580 + 24) = v585;
            }
            else
            {
              *(_QWORD *)(v580 + 24) = 0;
              v584 = (uint64_t *)(v586 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v580 + 16) = v580;
            *(_QWORD *)(v580 + 24) = 0;
          }
          *v584 = v580;
        }
        v580 += 32;
        v582 -= 32;
      }
      while (v582);
    }
    v27 = *(_QWORD *)(v25 + 728);
    if (v27)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v27 + 24))(v27, v23);
    v28 = *v20 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v23 = v28 | *(_QWORD *)v23 & 7;
    *(_QWORD *)(v23 + 8) = v20;
    *(_QWORD *)(v28 + 8) = v23;
    *v20 = *v20 & 7 | v23;
    if (v984)
      llvm::MetadataTracking::untrack((uint64_t)&v984, (unsigned __int8 *)v984);
    v16 = v927;
  }
  v29 = v16[41];
  v937 = v16 + 40;
  v942 = v3 + 248;
  if ((_QWORD *)v29 == v16 + 40)
  {
    *(_BYTE *)(v3 + 392) = 0;
  }
  else
  {
    v30 = 0;
    do
    {
      for (i = *(_QWORD *)(v29 + 56); i != v29 + 48; i = *(_QWORD *)(i + 8))
      {
        v32 = *(unsigned __int16 **)(i + 16);
        if ((~*((_DWORD *)v32 + 4) & 0x800200) == 0)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)(v3 + 248), v29);
          *(_BYTE *)(v3 + 386) = 1;
          v32 = *(unsigned __int16 **)(i + 16);
        }
        v33 = *v32 == 337;
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
        v30 |= v33;
      }
      v29 = *(_QWORD *)(v29 + 8);
    }
    while ((_QWORD *)v29 != v937);
    v34 = *(_QWORD *)(v3 + 344);
    *(_BYTE *)(v3 + 392) = 0;
    if ((v30 & 1) != 0 && (*(_BYTE *)(v34 + 392) || *(_BYTE *)(v34 + 393)))
    {
      *(_BYTE *)(v3 + 392) = 1;
      *(_QWORD *)(v3 + 393) = 0;
      *(_DWORD *)(v3 + 401) = 0;
    }
  }
  if ((v926 - 100) < 9)
  {
    if (*(_BYTE *)(v927[7] + 62))
    {
      v35 = (_QWORD *)v927[41];
LABEL_55:
      v36 = (unint64_t *)v35[7];
      if (v36 == v35 + 6)
      {
LABEL_71:
        v41 = 0;
        v984 = 0;
      }
      else
      {
        while (1)
        {
          v37 = (unsigned __int16 *)v36[2];
          v38 = *v37;
          v39 = (v38 - 9) > 0x3C || ((1 << (v38 - 9)) & 0x1000000000000605) == 0;
          v40 = !v39 || v38 == 0;
          if (!v40 && (v37[4] & 0x10) == 0 && (v37[8] & 1) == 0 || (v37[8] & 0x40) != 0)
            break;
          if ((*(_BYTE *)v36 & 4) == 0)
          {
            while ((*((_WORD *)v36 + 22) & 8) != 0)
              v36 = (unint64_t *)v36[1];
          }
          v36 = (unint64_t *)v36[1];
          if (v36 == v35 + 6)
          {
            v36 = v35 + 6;
            goto LABEL_71;
          }
        }
        v41 = (void *)v36[7];
        v984 = v41;
        if (v41)
        {
          llvm::MetadataTracking::track((uint64_t)&v984, (unsigned __int8 *)v41, 2);
          v41 = v984;
        }
      }
      v46 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
      if (*(_BYTE *)(*(_QWORD *)(v3 + 344) + 318))
        v47 = 195456;
      else
        v47 = 195504;
      v48 = (llvm::MachineFunction *)v35[4];
      v998 = v41;
      if (v41)
        llvm::MetadataTracking::track((uint64_t)&v998, (unsigned __int8 *)v41, 2);
      v49 = v46 + v47;
      v50 = *((_QWORD *)v48 + 28);
      if (v50)
        *((_QWORD *)v48 + 28) = *(_QWORD *)v50;
      else
        v50 = sub_1C484358C((uint64_t)v48 + 128, 72, 3);
      v987 = v998;
      if (v998)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
        v998 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v50, v48, v49, (unsigned __int8 **)&v987, 0);
      if (v987)
        llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
      if (v998)
        llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
      v52 = v35[5];
      *(_QWORD *)(v50 + 24) = v52;
      v53 = *(_QWORD *)(v52 + 32);
      v54 = *(unsigned int *)(v50 + 40);
      if ((_DWORD)v54)
      {
        v594 = *(_QWORD *)(v50 + 32);
        v595 = *(_QWORD *)(v53 + 40);
        v596 = 32 * v54;
        do
        {
          if (!*(_BYTE *)v594)
          {
            v597 = *(unsigned int *)(v594 + 4);
            if ((int)v597 >= 0)
              v598 = (uint64_t *)(*(_QWORD *)(v595 + 272) + 8 * v597);
            else
              v598 = (uint64_t *)(*(_QWORD *)(v595 + 24) + 16 * (v597 & 0x7FFFFFFF) + 8);
            v599 = *v598;
            if (*v598)
            {
              v600 = *(_QWORD *)(v599 + 16);
              *(_QWORD *)(v599 + 16) = v594;
              *(_QWORD *)(v594 + 16) = v600;
              if ((*(_BYTE *)(v594 + 3) & 1) != 0)
              {
                *(_QWORD *)(v594 + 24) = v599;
              }
              else
              {
                *(_QWORD *)(v594 + 24) = 0;
                v598 = (uint64_t *)(v600 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v594 + 16) = v594;
              *(_QWORD *)(v594 + 24) = 0;
            }
            *v598 = v594;
          }
          v594 += 32;
          v596 -= 32;
        }
        while (v596);
      }
      v55 = *(_QWORD *)(v53 + 728);
      if (v55)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v55 + 24))(v55, v50);
      v56 = *v36 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v50 = v56 | *(_QWORD *)v50 & 7;
      *(_QWORD *)(v50 + 8) = v36;
      *(_QWORD *)(v56 + 8) = v50;
      *v36 = *v36 & 7 | v50;
      v988 = 0;
      v989 = 0;
      v990 = 0;
      v987 = (void *)0xB901000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v48, (const llvm::MachineOperand *)&v987);
      LODWORD(v987) = 1;
      v988 = 0;
      v989 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v48, (const llvm::MachineOperand *)&v987);
      LODWORD(v987) = 1;
      v988 = 0;
      v989 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v48, (const llvm::MachineOperand *)&v987);
      if (v984)
        llvm::MetadataTracking::untrack((uint64_t)&v984, (unsigned __int8 *)v984);
      goto LABEL_105;
    }
    v42 = v927[6];
    v43 = v927;
    if (!v42)
    {
      v42 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *))(*(_QWORD *)v927[1] + 216))(v927[1], v927 + 16, v927);
      v43 = v927;
      v927[6] = v42;
    }
    v35 = (_QWORD *)v43[41];
    if (*(_BYTE *)(v42 + 453))
      v44 = v35 == v937;
    else
      v44 = 1;
    if (!v44)
    {
      v45 = v35[1];
      if ((_QWORD *)v45 != v937 && *(_QWORD **)(v45 + 8) != v937)
        goto LABEL_55;
    }
  }
LABEL_105:
  v57 = (_QWORD *)v927[41];
  v978 = (_QWORD *)v3;
  if (v57 == v937)
    goto LABEL_943;
  v943 = v3 + 399;
  v944 = v3 + 393;
  do
  {
    if (*(_BYTE *)(v3 + 392))
    {
      if (*(_QWORD **)(v57[4] + 328) != v57)
      {
        v58 = *(_QWORD *)(v3 + 344);
        if (*(_BYTE *)(v58 + 392))
        {
          *(_WORD *)(v943 + 4) = 257;
          *(_DWORD *)v943 = 16843009;
        }
        else if (*(_BYTE *)(v58 + 393))
        {
          *(_WORD *)(v3 + 400) = 257;
          *(_BYTE *)(v3 + 404) = 1;
        }
      }
      *(_WORD *)(v944 + 4) = 0;
      *(_DWORD *)v944 = 0;
    }
    v984 = (char *)&v985 + 8;
    *(_QWORD *)&v985 = 0x400000000;
    v929 = v57;
    v59 = v57[7];
    v973 = v57 + 6;
    if ((_QWORD *)v59 == v57 + 6)
    {
      v503 = 0;
      v504 = v930;
      goto LABEL_942;
    }
    v945 = 0;
    do
    {
      v60 = *(_QWORD *)(v59 + 24);
      v61 = *(llvm::MachineFunction **)(v60 + 32);
      v62 = *(_QWORD *)(v3 + 344);
      v63 = *(unsigned __int8 *)(v62 + 318);
      if (*(_BYTE *)(v62 + 318))
        v64 = 56;
      else
        v64 = 313;
      v969 = v64;
      if (*(_BYTE *)(v62 + 379)
        && (sub_1C488415C(&v987, v59, v7), (HIBYTE(v987) & 6) != 0)
        && (v987 == 8
         || ((v987 & 0xFE) == 0xE ? (v67 = *(_BYTE *)(*(_QWORD *)(v3 + 344) + 327) == 0) : (v67 = 1),
             !v67 ? (v68 = 0) : (v68 = 1),
             (v987 & 0xFE) == 0xC || (v68 & 1) == 0)))
      {
        v65 = *(_QWORD *)(v59 + 32) + 32 * sub_1C4B138B4(**(unsigned __int16 **)(v59 + 16));
        *(_QWORD *)(v65 + 16) = *(_QWORD *)(v65 + 16) & 0xFFFFFFFFFFFFFF0FLL | 0x10;
        v66 = 1;
      }
      else
      {
        v66 = 0;
      }
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 376) + 288))(*(_QWORD *)(v3 + 376)) & 1) == 0)
      {
        v69 = *(unsigned __int16 **)(v59 + 16);
        v70 = *((_QWORD *)v69 + 2);
        v71 = v70 & 0x2000C00;
        if (v71 == 33555456 || (v70 & 0xD00) == 0x500 || (v70 & 0xE00) == 0x600)
        {
          v72 = sub_1C4B138B4(*v69);
          v74 = 0x100000;
          if (v71 == 33555456)
            v74 = 2048;
          v73 = *(_QWORD *)(v59 + 32) + 32 * v72;
          *(_QWORD *)(v73 + 16) |= v74;
          *(_BYTE *)(v3 + 405) |= sub_1C48788E0(*(unsigned __int16 **)(v59 + 16), *(_DWORD **)(v59 + 32), *(_BYTE *)(*(_QWORD *)(v3 + 344) + 400));
          v66 = 1;
        }
      }
      v75 = *(_BYTE **)(v3 + 344);
      if (!*(_BYTE *)(v3 + 392))
        goto LABEL_196;
      v76 = *(unsigned __int16 **)(v59 + 16);
      v77 = *v76;
      if (v77 == 337)
      {
        if (v75[392])
        {
          if (*(_BYTE *)(v3 + 394) || *(_BYTE *)(v3 + 395) || *(_BYTE *)(v3 + 398))
          {
            *(_WORD *)(v943 + 4) = 257;
            *(_DWORD *)v943 = 16843009;
          }
          if (*(_BYTE *)v944 || *(_BYTE *)(v3 + 395) || *(_BYTE *)(v3 + 396) || *(_BYTE *)(v3 + 397))
          {
            *(_WORD *)(v3 + 400) = 257;
            goto LABEL_176;
          }
        }
        else
        {
          if (*(_BYTE *)(v3 + 394) || *(_BYTE *)(v3 + 395))
            *(_WORD *)(v3 + 400) = 257;
          if (*(_BYTE *)(v3 + 398))
LABEL_176:
            *(_BYTE *)(v3 + 404) = 1;
        }
        *(_WORD *)(v944 + 4) = 0;
        *(_DWORD *)v944 = 0;
        goto LABEL_196;
      }
      v952 = v63;
      v957 = v60;
      v78 = *((_QWORD *)v76 + 2);
      v79 = v78 & 0xD00;
      v80 = v78 & 0x800100;
      if (v75[393])
      {
        if (v79 == 2304)
        {
          *(_WORD *)(v3 + 400) = 0;
          *(_WORD *)(v3 + 394) = 0;
        }
        if (v80 == 8388864)
        {
          *(_BYTE *)(v3 + 404) = 0;
          *(_BYTE *)(v3 + 398) = 0;
        }
      }
      v81 = v66;
      v82 = v61;
      v83 = v78 & 0xE00;
      v84 = v78 & 0x2000C00;
      v85 = v77 - 4821;
      v86 = v78 & 0x800200;
      *(_BYTE *)(v3 + 394) |= v83 == 2560;
      *(_BYTE *)(v3 + 395) |= v84 == 33556480;
      *(_BYTE *)(v3 + 396) |= (v77 - 4821) < 4;
      *(_BYTE *)(v3 + 397) |= v80 == 8388864;
      *(_BYTE *)(v3 + 398) |= (v78 & 0x800200) == 8389120;
      *(_BYTE *)(v3 + 393) |= v79 == 2304;
      if (v79 == 2304 && *(_BYTE *)v943)
      {
LABEL_170:
        if (v75[392])
        {
LABEL_171:
          *(_WORD *)(v943 + 4) = 0;
          *(_DWORD *)v943 = 0;
LABEL_184:
          v87 = sub_1C4B138B4(v77);
          v89 = v85 < 4 || v80 == 8388864 || v86 == 8389120;
          v90 = 0x80000;
          if (v89)
            v90 = 512;
          if (v84 == 33556480)
            v90 = 1024;
          v91 = *(_QWORD *)(v59 + 32) + 32 * v87;
          *(_QWORD *)(v91 + 16) |= v90;
          v75 = *(_BYTE **)(v3 + 344);
          goto LABEL_195;
        }
        if ((v83 != 2560 || !*(_BYTE *)(v3 + 400)) && (v84 != 33556480 || !*(_BYTE *)(v3 + 401)))
        {
          *(_BYTE *)(v3 + 404) = 0;
          goto LABEL_184;
        }
LABEL_182:
        *(_WORD *)(v3 + 400) = 0;
        goto LABEL_184;
      }
      if (v83 == 2560 && *(_BYTE *)(v3 + 400))
      {
        if (v75[392])
          goto LABEL_171;
        goto LABEL_182;
      }
      if (v84 == 33556480 && *(_BYTE *)(v3 + 401)
        || v85 <= 3 && *(_BYTE *)(v3 + 402)
        || v80 == 8388864 && *(_BYTE *)(v3 + 403)
        || v86 == 8389120 && *(_BYTE *)(v3 + 404))
      {
        goto LABEL_170;
      }
LABEL_195:
      v61 = v82;
      v60 = v957;
      v66 = v81;
      v63 = v952;
LABEL_196:
      if (!v75[310] || !*(_BYTE *)(v3 + 389) || (*(_BYTE *)(*(_QWORD *)(v59 + 16) + 16) & 2) == 0)
        goto LABEL_252;
      v947 = v61;
      v92 = v75[318];
      *(_BYTE *)(v3 + 389) = 0;
      v93 = *(_QWORD *)(v59 + 24);
      v94 = *(_QWORD *)(*(_QWORD *)(v93 + 32) + 328);
      v933 = v66;
      if (v93 == v94)
      {
        v104 = *(_QWORD *)v59 & 0xFFFFFFFFFFFFFFF8;
        if (!v104 || (*(_BYTE *)v104 & 4) == 0)
        {
          while ((*(_WORD *)(v104 + 44) & 4) != 0)
            v104 = *(_QWORD *)v104 & 0xFFFFFFFFFFFFFFF8;
        }
        v95 = v60;
        v105 = *(unsigned __int16 **)(v104 + 16);
        if ((v105[8] & 0x10) != 0)
        {
          if ((*(_BYTE *)(*(_QWORD *)(v104 + 32) + 32 * sub_1C4B138B4(*v105) + 16) & 8) != 0)
            v96 = v104;
          else
            v96 = v59;
        }
        else
        {
          v96 = v59;
        }
        goto LABEL_235;
      }
      v95 = v60;
      v96 = v94 + 48;
      v97 = *(_QWORD *)(v94 + 56);
      if (v94 + 48 == v97)
        goto LABEL_224;
      do
      {
        v98 = (_BYTE *)(*(_QWORD *)v96 & 0xFFFFFFFFFFFFFFF8);
        if (!v98)
        {
          v99 = 0;
LABEL_206:
          while ((*(_WORD *)(v99 + 44) & 4) != 0)
            v99 = *(_QWORD *)v99 & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_207;
        }
        v99 = *(_QWORD *)v96 & 0xFFFFFFFFFFFFFFF8;
        if ((*v98 & 4) == 0)
          goto LABEL_206;
LABEL_207:
        v100 = *(unsigned __int16 **)(v99 + 16);
        v101 = *v100;
        v103 = (v101 - 9) <= 0x3C && ((1 << (v101 - 9)) & 0x1000000000000605) != 0
            || v101 == 0;
        if (!v103 && (v100[4] & 0x10) == 0 && (v100[8] & 1) == 0)
          goto LABEL_224;
        if (v98)
        {
          v96 = *(_QWORD *)v96 & 0xFFFFFFFFFFFFFFF8;
          if ((*v98 & 4) != 0)
            continue;
        }
        else
        {
          v96 = 0;
        }
        while ((*(_WORD *)(v96 + 44) & 4) != 0)
          v96 = *(_QWORD *)v96 & 0xFFFFFFFFFFFFFFF8;
      }
      while (v96 != v97);
      v96 = *(_QWORD *)(v94 + 56);
LABEL_224:
      v93 = *(_QWORD *)(*(_QWORD *)(v93 + 32) + 328);
LABEL_235:
      v979 = 0;
      v106 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
      if (v92)
        v107 = 224160;
      else
        v107 = 224208;
      v108 = *(llvm::MachineFunction **)(v93 + 32);
      v998 = 0;
      v109 = *((_QWORD *)v108 + 28);
      if (v109)
      {
        *((_QWORD *)v108 + 28) = *(_QWORD *)v109;
        v987 = 0;
      }
      else
      {
        v109 = sub_1C484358C((uint64_t)v108 + 128, 72, 3);
        v987 = v998;
        if (v998)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
          v998 = 0;
        }
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v109, v108, v106 + v107, (unsigned __int8 **)&v987, 0);
      if (v987)
        llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
      if (v998)
        llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
      v110 = *(_QWORD *)(v93 + 40);
      *(_QWORD *)(v109 + 24) = v110;
      v111 = *(_QWORD *)(v110 + 32);
      v112 = *(unsigned int *)(v109 + 40);
      v61 = v947;
      if ((_DWORD)v112)
      {
        v195 = *(_QWORD *)(v109 + 32);
        v196 = *(_QWORD *)(v111 + 40);
        v197 = 32 * v112;
        do
        {
          if (!*(_BYTE *)v195)
          {
            v198 = *(unsigned int *)(v195 + 4);
            if ((int)v198 >= 0)
              v199 = (uint64_t *)(*(_QWORD *)(v196 + 272) + 8 * v198);
            else
              v199 = (uint64_t *)(*(_QWORD *)(v196 + 24) + 16 * (v198 & 0x7FFFFFFF) + 8);
            v200 = *v199;
            if (*v199)
            {
              v201 = *(_QWORD *)(v200 + 16);
              *(_QWORD *)(v200 + 16) = v195;
              *(_QWORD *)(v195 + 16) = v201;
              if ((*(_BYTE *)(v195 + 3) & 1) != 0)
              {
                *(_QWORD *)(v195 + 24) = v200;
              }
              else
              {
                *(_QWORD *)(v195 + 24) = 0;
                v199 = (uint64_t *)(v201 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v195 + 16) = v195;
              *(_QWORD *)(v195 + 24) = 0;
            }
            *v199 = v195;
          }
          v195 += 32;
          v197 -= 32;
        }
        while (v197);
      }
      v113 = *(_QWORD *)(v111 + 728);
      if (v113)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v113 + 24))(v113, v109);
      v114 = *(_QWORD *)v96 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v109 = v114 | *(_QWORD *)v109 & 7;
      *(_QWORD *)(v109 + 8) = v96;
      *(_QWORD *)(v114 + 8) = v109;
      *(_QWORD *)v96 = *(_QWORD *)v96 & 7 | v109;
      LODWORD(v987) = 1;
      v988 = 0;
      v989 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v109, v108, (const llvm::MachineOperand *)&v987);
      if (v979)
        llvm::MetadataTracking::untrack((uint64_t)&v979, v979);
      v60 = v95;
      v66 = v933;
LABEL_252:
      v115 = **(unsigned __int16 **)(v59 + 16);
      if (!*(_BYTE *)(v3 + 386) || (v115 - 2862) > 0x6B)
      {
        if (**(unsigned __int16 **)(v59 + 16) > 0x1E9u)
        {
          if ((v115 - 673) < 2)
          {
LABEL_284:
            if (*(_BYTE *)(v3 + 385))
            {
              v134 = (*(unsigned __int16 *)(*(_QWORD *)v61 + 18) >> 4) & 0x3FF;
              if (v134 && v134 != 8 && v134 != 255)
              {
                v136 = (llvm::MachineFunction **)*((_QWORD *)v61 + 41);
                if (v136 == (llvm::MachineFunction **)((char *)v61 + 320)
                  || v136[1] == (llvm::MachineFunction *)((char *)v61 + 320))
                {
                  v948 = v61;
                  v137 = *(_QWORD *)(v3 + 344);
                  v138 = *(unsigned __int8 *)(v137 + 318);
                  v139 = *(unsigned __int8 *)(v137 + 319);
                  v140 = 4077;
                  if (!v139)
                    v140 = 4073;
                  if (v138)
                    v141 = 4075;
                  else
                    v141 = v140;
                  v142 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
                  v143 = *(llvm::MachineFunction **)(v60 + 32);
                  v144 = *(void **)(v59 + 56);
                  v998 = v144;
                  if (v144)
                    llvm::MetadataTracking::track((uint64_t)&v998, (unsigned __int8 *)v144, 2);
                  v145 = *((_QWORD *)v143 + 28);
                  if (v145)
                    *((_QWORD *)v143 + 28) = *(_QWORD *)v145;
                  else
                    v145 = sub_1C484358C((uint64_t)v143 + 128, 72, 3);
                  v987 = v998;
                  if (v998)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
                    v998 = 0;
                  }
                  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v145, v143, v142 + 48 * v141, (unsigned __int8 **)&v987, 0);
                  if (v987)
                    llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
                  if (v998)
                    llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
                  v215 = *(_QWORD *)(v60 + 40);
                  *(_QWORD *)(v145 + 24) = v215;
                  v216 = *(_QWORD *)(v215 + 32);
                  v217 = *(unsigned int *)(v145 + 40);
                  if ((_DWORD)v217)
                  {
                    v480 = *(_QWORD *)(v145 + 32);
                    v481 = *(_QWORD *)(v216 + 40);
                    v482 = 32 * v217;
                    do
                    {
                      if (!*(_BYTE *)v480)
                      {
                        v483 = *(unsigned int *)(v480 + 4);
                        if ((int)v483 >= 0)
                          v484 = (uint64_t *)(*(_QWORD *)(v481 + 272) + 8 * v483);
                        else
                          v484 = (uint64_t *)(*(_QWORD *)(v481 + 24) + 16 * (v483 & 0x7FFFFFFF) + 8);
                        v485 = *v484;
                        if (*v484)
                        {
                          v486 = *(_QWORD *)(v485 + 16);
                          *(_QWORD *)(v485 + 16) = v480;
                          *(_QWORD *)(v480 + 16) = v486;
                          if ((*(_BYTE *)(v480 + 3) & 1) != 0)
                          {
                            *(_QWORD *)(v480 + 24) = v485;
                          }
                          else
                          {
                            *(_QWORD *)(v480 + 24) = 0;
                            v484 = (uint64_t *)(v486 + 24);
                          }
                        }
                        else
                        {
                          *(_QWORD *)(v480 + 16) = v480;
                          *(_QWORD *)(v480 + 24) = 0;
                        }
                        *v484 = v480;
                      }
                      v480 += 32;
                      v482 -= 32;
                    }
                    while (v482);
                  }
                  v218 = *(_QWORD *)(v216 + 728);
                  if (v218)
                    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v218 + 24))(v218, v145);
                  v219 = *(_QWORD *)v59 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v145 = v219 | *(_QWORD *)v145 & 7;
                  *(_QWORD *)(v145 + 8) = v59;
                  *(_QWORD *)(v219 + 8) = v145;
                  *(_QWORD *)v59 = *(_QWORD *)v59 & 7 | v145;
                  if (v139)
                    v220 = 56;
                  else
                    v220 = v969;
                  v988 = 0;
                  v989 = 0;
                  v990 = 0;
                  HIDWORD(v987) = v220;
                  LODWORD(v987) = 0x1000000;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v145, v143, (const llvm::MachineOperand *)&v987);
                  LODWORD(v987) = 1;
                  v988 = 0;
                  v989 = 0;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v145, v143, (const llvm::MachineOperand *)&v987);
                  LODWORD(v987) = 1;
                  v988 = 0;
                  v989 = 0;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v145, v143, (const llvm::MachineOperand *)&v987);
                  v221 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
                  if (v138)
                    v222 = 195456;
                  else
                    v222 = 195504;
                  v223 = *(llvm::MachineFunction **)(v60 + 32);
                  v224 = *(void **)(v59 + 56);
                  v998 = v224;
                  if (v224)
                    llvm::MetadataTracking::track((uint64_t)&v998, (unsigned __int8 *)v224, 2);
                  v225 = *((_QWORD *)v223 + 28);
                  if (v225)
                    *((_QWORD *)v223 + 28) = *(_QWORD *)v225;
                  else
                    v225 = sub_1C484358C((uint64_t)v223 + 128, 72, 3);
                  v987 = v998;
                  if (v998)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
                    v998 = 0;
                  }
                  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v225, v223, v221 + v222, (unsigned __int8 **)&v987, 0);
                  if (v987)
                    llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
                  v61 = v948;
                  if (v998)
                    llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
                  v226 = *(_QWORD *)(v60 + 40);
                  *(_QWORD *)(v225 + 24) = v226;
                  v227 = *(_QWORD *)(v226 + 32);
                  v228 = *(unsigned int *)(v225 + 40);
                  if ((_DWORD)v228)
                  {
                    v487 = *(_QWORD *)(v225 + 32);
                    v488 = *(_QWORD *)(v227 + 40);
                    v489 = 32 * v228;
                    do
                    {
                      if (!*(_BYTE *)v487)
                      {
                        v490 = *(unsigned int *)(v487 + 4);
                        if ((int)v490 >= 0)
                          v491 = (uint64_t *)(*(_QWORD *)(v488 + 272) + 8 * v490);
                        else
                          v491 = (uint64_t *)(*(_QWORD *)(v488 + 24) + 16 * (v490 & 0x7FFFFFFF) + 8);
                        v492 = *v491;
                        if (*v491)
                        {
                          v493 = *(_QWORD *)(v492 + 16);
                          *(_QWORD *)(v492 + 16) = v487;
                          *(_QWORD *)(v487 + 16) = v493;
                          if ((*(_BYTE *)(v487 + 3) & 1) != 0)
                          {
                            *(_QWORD *)(v487 + 24) = v492;
                          }
                          else
                          {
                            *(_QWORD *)(v487 + 24) = 0;
                            v491 = (uint64_t *)(v493 + 24);
                          }
                        }
                        else
                        {
                          *(_QWORD *)(v487 + 16) = v487;
                          *(_QWORD *)(v487 + 24) = 0;
                        }
                        *v491 = v487;
                      }
                      v487 += 32;
                      v489 -= 32;
                    }
                    while (v489);
                  }
                  v229 = *(_QWORD *)(v227 + 728);
                  if (v229)
                    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v229 + 24))(v229, v225);
                  v230 = *(_QWORD *)v59 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v225 = v230 | *(_QWORD *)v225 & 7;
                  *(_QWORD *)(v225 + 8) = v59;
                  *(_QWORD *)(v230 + 8) = v225;
                  *(_QWORD *)v59 = *(_QWORD *)v59 & 7 | v225;
                  v988 = 0;
                  v989 = 0;
                  v990 = 0;
                  v987 = (void *)0xBD01000000;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v225, v223, (const llvm::MachineOperand *)&v987);
                  LODWORD(v987) = 1;
                  v988 = 0;
                  v989 = 0;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v225, v223, (const llvm::MachineOperand *)&v987);
                  LODWORD(v987) = 1;
                  v988 = 0;
                  v989 = 0;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v225, v223, (const llvm::MachineOperand *)&v987);
                  *(_BYTE *)(v3 + 385) = 0;
                  v115 = **(unsigned __int16 **)(v59 + 16);
                }
              }
            }
            v231 = *(unint64_t **)(v59 + 24);
            if (v115 == 673)
            {
              v232 = *(_BYTE **)(v3 + 344);
              if (v232[318])
                v233 = 411;
              else
                v233 = 158;
              if (v232[318])
                v234 = 5;
              else
                v234 = 33;
              v235 = sub_1C4885524(v234, v233, v232);
              v236 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
              v237 = (llvm::MachineFunction *)v231[4];
              v238 = *(void **)(v59 + 56);
              v998 = v238;
              if (v238)
                llvm::MetadataTracking::track((uint64_t)&v998, (unsigned __int8 *)v238, 2);
              v239 = *((_QWORD *)v237 + 28);
              if (v239)
                *((_QWORD *)v237 + 28) = *(_QWORD *)v239;
              else
                v239 = sub_1C484358C((uint64_t)v237 + 128, 72, 3);
              v987 = v998;
              if (v998)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
                v998 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v239, v237, v236 + 48 * v235, (unsigned __int8 **)&v987, 0);
              if (v987)
                llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
              if (v998)
                llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
              v320 = v231[5];
              *(_QWORD *)(v239 + 24) = v320;
              v321 = *(_QWORD *)(v320 + 32);
              v322 = *(unsigned int *)(v239 + 40);
              if ((_DWORD)v322)
              {
                v389 = *(_QWORD *)(v239 + 32);
                v390 = *(_QWORD *)(v321 + 40);
                v391 = 32 * v322;
                do
                {
                  if (!*(_BYTE *)v389)
                  {
                    v392 = *(unsigned int *)(v389 + 4);
                    if ((int)v392 >= 0)
                      v393 = (uint64_t *)(*(_QWORD *)(v390 + 272) + 8 * v392);
                    else
                      v393 = (uint64_t *)(*(_QWORD *)(v390 + 24) + 16 * (v392 & 0x7FFFFFFF) + 8);
                    v394 = *v393;
                    if (*v393)
                    {
                      v395 = *(_QWORD *)(v394 + 16);
                      *(_QWORD *)(v394 + 16) = v389;
                      *(_QWORD *)(v389 + 16) = v395;
                      if ((*(_BYTE *)(v389 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v389 + 24) = v394;
                      }
                      else
                      {
                        *(_QWORD *)(v389 + 24) = 0;
                        v393 = (uint64_t *)(v395 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v389 + 16) = v389;
                      *(_QWORD *)(v389 + 24) = 0;
                    }
                    *v393 = v389;
                  }
                  v389 += 32;
                  v391 -= 32;
                }
                while (v391);
              }
              v323 = v61;
              v324 = *(_QWORD *)(v321 + 728);
              if (v324)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v324 + 24))(v324, v239);
              v325 = *(_QWORD *)v59 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v239 = v325 | *(_QWORD *)v239 & 7;
              *(_QWORD *)(v239 + 8) = v59;
              *(_QWORD *)(v325 + 8) = v239;
              *(_QWORD *)v59 = *(_QWORD *)v59 & 7 | v239;
              v988 = 0;
              v989 = 0;
              v990 = 0;
              HIDWORD(v987) = v969;
              LODWORD(v987) = 0x1000000;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v239, v237, (const llvm::MachineOperand *)&v987);
              LODWORD(v987) = 1;
              v988 = 0;
              v989 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v239, v237, (const llvm::MachineOperand *)&v987);
              LODWORD(v987) = 1;
              v988 = 0;
              v989 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v239, v237, (const llvm::MachineOperand *)&v987);
              LODWORD(v987) = 1;
              v988 = 0;
              v989 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v239, v237, (const llvm::MachineOperand *)&v987);
              LODWORD(v987) = 1;
              v988 = 0;
              v989 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v239, v237, (const llvm::MachineOperand *)&v987);
              LODWORD(v987) = 1;
              v988 = 0;
              v989 = 2;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v239, v237, (const llvm::MachineOperand *)&v987);
              v326 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
              if (*(_BYTE *)(*(_QWORD *)(v3 + 344) + 327))
                v327 = 25872;
              else
                v327 = 26640;
              v328 = (llvm::MachineFunction *)v231[4];
              v329 = *(void **)(v59 + 56);
              v998 = v329;
              if (v329)
                llvm::MetadataTracking::track((uint64_t)&v998, (unsigned __int8 *)v329, 2);
              v330 = *((_QWORD *)v328 + 28);
              if (v330)
                *((_QWORD *)v328 + 28) = *(_QWORD *)v330;
              else
                v330 = sub_1C484358C((uint64_t)v328 + 128, 72, 3);
              v987 = v998;
              if (v998)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
                v998 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v330, v328, v326 + v327, (unsigned __int8 **)&v987, 0);
              if (v987)
                llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
              if (v998)
                llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
              v331 = v231[5];
              *(_QWORD *)(v330 + 24) = v331;
              v332 = *(_QWORD *)(v331 + 32);
              v333 = *(unsigned int *)(v330 + 40);
              if ((_DWORD)v333)
              {
                v396 = *(_QWORD *)(v330 + 32);
                v397 = *(_QWORD *)(v332 + 40);
                v398 = 32 * v333;
                do
                {
                  if (!*(_BYTE *)v396)
                  {
                    v399 = *(unsigned int *)(v396 + 4);
                    if ((int)v399 >= 0)
                      v400 = (uint64_t *)(*(_QWORD *)(v397 + 272) + 8 * v399);
                    else
                      v400 = (uint64_t *)(*(_QWORD *)(v397 + 24) + 16 * (v399 & 0x7FFFFFFF) + 8);
                    v401 = *v400;
                    if (*v400)
                    {
                      v402 = *(_QWORD *)(v401 + 16);
                      *(_QWORD *)(v401 + 16) = v396;
                      *(_QWORD *)(v396 + 16) = v402;
                      if ((*(_BYTE *)(v396 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v396 + 24) = v401;
                      }
                      else
                      {
                        *(_QWORD *)(v396 + 24) = 0;
                        v400 = (uint64_t *)(v402 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v396 + 16) = v396;
                      *(_QWORD *)(v396 + 24) = 0;
                    }
                    *v400 = v396;
                  }
                  v396 += 32;
                  v398 -= 32;
                }
                while (v398);
              }
              v334 = *(_QWORD *)(v332 + 728);
              if (v334)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v334 + 24))(v334, v330);
              v335 = *(_QWORD *)v59 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v330 = v335 | *(_QWORD *)v330 & 7;
              *(_QWORD *)(v330 + 8) = v59;
              *(_QWORD *)(v335 + 8) = v330;
              *(_QWORD *)v59 = *(_QWORD *)v59 & 7 | v330;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v330, v328, *(const llvm::MachineOperand **)(v59 + 32));
              v336 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
              if (*(_BYTE *)(*(_QWORD *)(v3 + 344) + 318))
                v337 = 34896;
              else
                v337 = 34944;
              v338 = (llvm::MachineFunction *)v231[4];
              v339 = *(void **)(v59 + 56);
              v998 = v339;
              if (v339)
                llvm::MetadataTracking::track((uint64_t)&v998, (unsigned __int8 *)v339, 2);
              v340 = *((_QWORD *)v338 + 28);
              if (v340)
                *((_QWORD *)v338 + 28) = *(_QWORD *)v340;
              else
                v340 = sub_1C484358C((uint64_t)v338 + 128, 72, 3);
              v987 = v998;
              if (v998)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
                v998 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v340, v338, v336 + v337, (unsigned __int8 **)&v987, 0);
              if (v987)
                llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
              v341 = v323;
              if (v998)
                llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
              v342 = v231[5];
              *(_QWORD *)(v340 + 24) = v342;
              v343 = *(_QWORD *)(v342 + 32);
              v344 = *(unsigned int *)(v340 + 40);
              if ((_DWORD)v344)
              {
                v403 = *(_QWORD *)(v340 + 32);
                v404 = *(_QWORD *)(v343 + 40);
                v405 = 32 * v344;
                do
                {
                  if (!*(_BYTE *)v403)
                  {
                    v406 = *(unsigned int *)(v403 + 4);
                    if ((int)v406 >= 0)
                      v407 = (uint64_t *)(*(_QWORD *)(v404 + 272) + 8 * v406);
                    else
                      v407 = (uint64_t *)(*(_QWORD *)(v404 + 24) + 16 * (v406 & 0x7FFFFFFF) + 8);
                    v408 = *v407;
                    if (*v407)
                    {
                      v409 = *(_QWORD *)(v408 + 16);
                      *(_QWORD *)(v408 + 16) = v403;
                      *(_QWORD *)(v403 + 16) = v409;
                      if ((*(_BYTE *)(v403 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v403 + 24) = v408;
                      }
                      else
                      {
                        *(_QWORD *)(v403 + 24) = 0;
                        v407 = (uint64_t *)(v409 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v403 + 16) = v403;
                      *(_QWORD *)(v403 + 24) = 0;
                    }
                    *v407 = v403;
                  }
                  v403 += 32;
                  v405 -= 32;
                }
                while (v405);
              }
              v345 = *(_QWORD *)(v343 + 728);
              if (v345)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v345 + 24))(v345, v340);
              v346 = *(_QWORD *)v59 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v340 = v346 | *(_QWORD *)v340 & 7;
              *(_QWORD *)(v340 + 8) = v59;
              *(_QWORD *)(v346 + 8) = v340;
              *(_QWORD *)v59 = *(_QWORD *)v59 & 7 | v340;
              v988 = 0;
              v989 = 0;
              v990 = 0;
              HIDWORD(v987) = v969;
              LODWORD(v987) = 0x1000000;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v340, v338, (const llvm::MachineOperand *)&v987);
              LODWORD(v987) = 1;
              v988 = 0;
              v989 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v340, v338, (const llvm::MachineOperand *)&v987);
              LODWORD(v987) = 1;
              v988 = 0;
              v989 = 2;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v340, v338, (const llvm::MachineOperand *)&v987);
              v347 = v59;
            }
            else
            {
              v949 = v61;
              v934 = v231[4];
              v931 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 344) + 318);
              v987 = &v989;
              v988 = 0x1000000000;
              v240 = v231[11];
              v241 = v231[12];
              if (v240 == v241)
              {
                v242 = 0;
              }
              else
              {
                v242 = 0;
                do
                {
                  v243 = *(unsigned __int16 **)(*(_QWORD *)v240 + 152);
                  for (j = *(unsigned __int16 **)(*(_QWORD *)v240 + 160); v243 != j; v243 += 8)
                  {
                    v245 = *v243;
                    if (v242 >= HIDWORD(v988))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v987, (uint64_t)&v989, v242 + 1, 4);
                      v242 = v988;
                    }
                    *((_DWORD *)v987 + v242) = v245;
                    v242 = v988 + 1;
                    LODWORD(v988) = v988 + 1;
                  }
                  v240 += 8;
                }
                while (v240 != v241);
              }
              for (k = v59; (unint64_t *)k != v231 + 6; k = *(_QWORD *)(k + 8))
              {
                v247 = *(unsigned int *)(k + 40);
                if ((_DWORD)v247)
                {
                  v248 = 32 * v247;
                  v249 = (int *)(*(_QWORD *)(k + 32) + 4);
                  do
                  {
                    if ((*(v249 - 1) & 0x10000FF) == 0)
                    {
                      v250 = *v249;
                      if (v242 >= HIDWORD(v988))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v987, (uint64_t)&v989, v242 + 1, 4);
                        v242 = v988;
                      }
                      *((_DWORD *)v987 + v242) = v250;
                      v242 = v988 + 1;
                      LODWORD(v988) = v988 + 1;
                    }
                    v249 += 8;
                    v248 -= 32;
                  }
                  while (v248);
                  if (!k)
                    goto LABEL_488;
                }
                if ((*(_BYTE *)k & 4) == 0)
                {
LABEL_488:
                  while ((*(_WORD *)(k + 44) & 8) != 0)
                    k = *(_QWORD *)(k + 8);
                }
              }
              v251 = 126 - 2 * __clz(v242);
              if (v242)
                v252 = v251;
              else
                v252 = 0;
              sub_1C4878988((uint64_t)v987, (unsigned int *)v987 + v242, (uint64_t)&v998, v252, 1);
              v253 = v987;
              v254 = (char *)v987 + 4 * v988;
              if ((_DWORD)v988)
              {
                v255 = (char *)v987 - 4;
                v256 = 4 * v988 - 4;
                while (v256)
                {
                  v257 = *((_DWORD *)v255 + 1);
                  v258 = *((_DWORD *)v255 + 2);
                  v255 += 4;
                  v256 -= 4;
                  if (v257 == v258)
                    goto LABEL_499;
                }
              }
              else
              {
                v255 = (char *)v987;
LABEL_499:
                if (v255 != v254)
                {
                  v259 = v255 + 8;
                  if (v255 + 8 != v254)
                  {
                    v260 = *(_DWORD *)v255;
                    do
                    {
                      v261 = v260;
                      v260 = *(_DWORD *)v259;
                      if (v261 != *(_DWORD *)v259)
                      {
                        *((_DWORD *)v255 + 1) = v260;
                        v255 += 4;
                      }
                      v259 += 4;
                    }
                    while (v259 != v254);
                  }
                  v254 = v255 + 4;
                }
              }
              LODWORD(v988) = (unint64_t)(v254 - v253) >> 2;
              v262 = (char *)v231[11];
              v263 = (char *)v231[12];
              v998 = &v1000;
              v999 = 0x800000000;
              v264 = v263 - v262;
              if ((unint64_t)(v263 - v262) >= 0x41)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v998, (uint64_t)&v1000, v264 >> 3, 8);
                v265 = v999;
                v266 = v999;
              }
              else
              {
                v265 = 0;
                v266 = 0;
              }
              if (v262 != v263)
              {
                v267 = (char *)v998 + 8 * v265;
                do
                {
                  v268 = *(_QWORD *)v262;
                  v262 += 8;
                  *v267++ = v268;
                }
                while (v262 != v263);
              }
              LODWORD(v999) = v266 + ((unint64_t)v264 >> 3);
              v269 = (llvm::BasicBlock *)v231[2];
              v270 = *(_QWORD *)(v934 + 312);
              v946 = v231 + 6;
              if (v270)
                *(_QWORD *)(v934 + 312) = *(_QWORD *)v270;
              else
                v270 = sub_1C484358C(v934 + 128, 232, 3);
              *(_QWORD *)v270 = 0;
              *(_QWORD *)(v270 + 8) = 0;
              *(_QWORD *)(v270 + 16) = v269;
              *(_DWORD *)(v270 + 24) = -1;
              *(_QWORD *)(v270 + 48) = (v270 + 48) | 4;
              *(_QWORD *)(v270 + 56) = v270 + 48;
              *(_QWORD *)(v270 + 152) = 0;
              v271 = (_QWORD *)(v270 + 152);
              *(_BYTE *)(v270 + 144) = 0;
              *(_OWORD *)(v270 + 64) = 0u;
              *(_OWORD *)(v270 + 80) = 0u;
              *(_OWORD *)(v270 + 96) = 0u;
              *(_OWORD *)(v270 + 112) = 0u;
              *(_OWORD *)(v270 + 121) = 0u;
              *(_QWORD *)(v270 + 160) = 0;
              *(_QWORD *)(v270 + 168) = 0;
              *(_BYTE *)(v270 + 176) = 0;
              *(_DWORD *)(v270 + 187) = 0;
              *(_QWORD *)(v270 + 180) = 0;
              *(_QWORD *)(v270 + 192) = 0;
              *(_DWORD *)(v270 + 199) = 0;
              *(_QWORD *)(v270 + 216) = 0;
              *(_QWORD *)(v270 + 224) = 0;
              *(_QWORD *)(v270 + 208) = 0;
              *(_QWORD *)(v270 + 32) = v934;
              *(_QWORD *)(v270 + 40) = v270;
              if (v269)
              {
                *(_QWORD *)(v270 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v269);
                *(_QWORD *)(v270 + 144) = v272;
              }
              v273 = (unint64_t *)v231[1];
              llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v934 + 320, v270);
              v274 = *v273;
              *(_QWORD *)v270 = *v273;
              *(_QWORD *)(v270 + 8) = v273;
              *(_QWORD *)(v274 + 8) = v270;
              *v273 = v270;
              v275 = *(unint64_t **)(v270 + 56);
              if (!v59 || (v276 = v59, (*(_BYTE *)v59 & 4) == 0))
              {
                v276 = v59;
                if ((*(_WORD *)(v59 + 44) & 8) != 0)
                {
                  v276 = v59;
                  do
                    v276 = *(_QWORD *)(v276 + 8);
                  while ((*(_WORD *)(v276 + 44) & 8) != 0);
                }
              }
              v277 = *(unint64_t **)(v276 + 8);
              if (v277 != v946 && v275 != v946)
              {
                if ((unint64_t *)v270 != v231)
                {
                  v445 = *(_QWORD *)(v270 + 40);
                  v446 = v277;
                  do
                  {
                    v446[3] = v445;
                    v446 = (unint64_t *)v446[1];
                  }
                  while (v446 != v946);
                }
                sub_1C4785D30(v275, v277, v946);
              }
              llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v270, (llvm::MachineBasicBlock *)v231);
              v953 = v231;
              if ((_DWORD)v988)
              {
                v279 = (char *)v987;
                v280 = (char *)v987 + 4 * v988;
                do
                {
                  v281 = *(_DWORD *)v279;
                  if (*(_DWORD *)v279)
                  {
                    v283 = *(_QWORD **)(v270 + 160);
                    v282 = *(_QWORD *)(v270 + 168);
                    if ((unint64_t)v283 >= v282)
                    {
                      v285 = (_QWORD *)*v271;
                      v286 = ((uint64_t)v283 - *v271) >> 4;
                      v287 = v286 + 1;
                      if ((unint64_t)(v286 + 1) >> 60)
LABEL_1831:
                        abort();
                      v288 = v282 - (_QWORD)v285;
                      if (v288 >> 3 > v287)
                        v287 = v288 >> 3;
                      if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFF0)
                        v289 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v289 = v287;
                      if (v289)
                      {
                        if (v289 >> 60)
LABEL_1832:
                          sub_1C4764EE4();
                        v290 = (char *)operator new(16 * v289);
                      }
                      else
                      {
                        v290 = 0;
                      }
                      v291 = &v290[16 * v286];
                      *(_WORD *)v291 = v281;
                      *((_QWORD *)v291 + 1) = -1;
                      v292 = v291;
                      if (v283 != v285)
                      {
                        do
                        {
                          *((_OWORD *)v292 - 1) = *((_OWORD *)v283 - 1);
                          v292 -= 16;
                          v283 -= 2;
                        }
                        while (v283 != v285);
                        v283 = (_QWORD *)*v271;
                      }
                      v284 = v291 + 16;
                      *(_QWORD *)(v270 + 152) = v292;
                      *(_QWORD *)(v270 + 160) = v291 + 16;
                      *(_QWORD *)(v270 + 168) = &v290[16 * v289];
                      v3 = (unint64_t)v978;
                      if (v283)
                        operator delete(v283);
                      v231 = v953;
                    }
                    else
                    {
                      *(_WORD *)v283 = v281;
                      v283[1] = -1;
                      v284 = v283 + 2;
                    }
                    *(_QWORD *)(v270 + 160) = v284;
                  }
                  v279 += 4;
                }
                while (v279 != v280);
              }
              v293 = (llvm::BasicBlock *)v231[2];
              v294 = *(_QWORD *)(v934 + 312);
              if (v294)
                *(_QWORD *)(v934 + 312) = *(_QWORD *)v294;
              else
                v294 = sub_1C484358C(v934 + 128, 232, 3);
              *(_QWORD *)v294 = 0;
              *(_QWORD *)(v294 + 8) = 0;
              *(_QWORD *)(v294 + 16) = v293;
              *(_DWORD *)(v294 + 24) = -1;
              *(_QWORD *)(v294 + 48) = (v294 + 48) | 4;
              *(_QWORD *)(v294 + 56) = v294 + 48;
              *(_QWORD *)(v294 + 152) = 0;
              v959 = (_QWORD *)(v294 + 152);
              *(_BYTE *)(v294 + 144) = 0;
              *(_OWORD *)(v294 + 64) = 0u;
              *(_OWORD *)(v294 + 80) = 0u;
              *(_OWORD *)(v294 + 96) = 0u;
              *(_OWORD *)(v294 + 112) = 0u;
              *(_OWORD *)(v294 + 121) = 0u;
              *(_QWORD *)(v294 + 160) = 0;
              *(_QWORD *)(v294 + 168) = 0;
              *(_BYTE *)(v294 + 176) = 0;
              *(_DWORD *)(v294 + 187) = 0;
              *(_QWORD *)(v294 + 180) = 0;
              *(_QWORD *)(v294 + 192) = 0;
              *(_DWORD *)(v294 + 199) = 0;
              *(_QWORD *)(v294 + 216) = 0;
              *(_QWORD *)(v294 + 224) = 0;
              *(_QWORD *)(v294 + 208) = 0;
              *(_QWORD *)(v294 + 32) = v934;
              *(_QWORD *)(v294 + 40) = v294;
              if (v293)
              {
                *(_QWORD *)(v294 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v293);
                *(_QWORD *)(v294 + 144) = v295;
              }
              v296 = (unint64_t *)v231[1];
              llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v934 + 320, v294);
              v297 = *v296;
              *(_QWORD *)v294 = *v296;
              *(_QWORD *)(v294 + 8) = v296;
              *(_QWORD *)(v297 + 8) = v294;
              *v296 = v294;
              sub_1C48532D0((unint64_t *)v294, *(unint64_t **)(v294 + 56), v231, (unint64_t *)v59);
              llvm::MachineBasicBlock::addSuccessor(v231, (_QWORD *)v294, -1);
              if ((_DWORD)v988)
              {
                v298 = (char *)v987;
                v299 = (char *)v987 + 4 * v988;
                do
                {
                  v300 = *(_DWORD *)v298;
                  if (*(_DWORD *)v298)
                  {
                    v302 = *(_QWORD **)(v294 + 160);
                    v301 = *(_QWORD *)(v294 + 168);
                    if ((unint64_t)v302 >= v301)
                    {
                      v304 = (_QWORD *)*v959;
                      v305 = ((uint64_t)v302 - *v959) >> 4;
                      v306 = v305 + 1;
                      if ((unint64_t)(v305 + 1) >> 60)
                        goto LABEL_1831;
                      v307 = v301 - (_QWORD)v304;
                      if (v307 >> 3 > v306)
                        v306 = v307 >> 3;
                      if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFF0)
                        v308 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v308 = v306;
                      if (v308)
                      {
                        if (v308 >> 60)
                          goto LABEL_1832;
                        v309 = (char *)operator new(16 * v308);
                      }
                      else
                      {
                        v309 = 0;
                      }
                      v310 = &v309[16 * v305];
                      *(_WORD *)v310 = v300;
                      *((_QWORD *)v310 + 1) = -1;
                      v311 = v310;
                      if (v302 != v304)
                      {
                        do
                        {
                          *((_OWORD *)v311 - 1) = *((_OWORD *)v302 - 1);
                          v311 -= 16;
                          v302 -= 2;
                        }
                        while (v302 != v304);
                        v302 = (_QWORD *)*v959;
                      }
                      v312 = &v309[16 * v308];
                      v303 = v310 + 16;
                      *(_QWORD *)(v294 + 152) = v311;
                      *(_QWORD *)(v294 + 160) = v310 + 16;
                      *(_QWORD *)(v294 + 168) = v312;
                      v3 = (unint64_t)v978;
                      if (v302)
                        operator delete(v302);
                    }
                    else
                    {
                      *(_WORD *)v302 = v300;
                      v302[1] = -1;
                      v303 = v302 + 2;
                    }
                    *(_QWORD *)(v294 + 160) = v303;
                  }
                  v298 += 4;
                }
                while (v298 != v299);
              }
              llvm::MachineBasicBlock::addSuccessor((_QWORD *)v294, (_QWORD *)v294, -1);
              llvm::MachineBasicBlock::addSuccessor((_QWORD *)v294, (_QWORD *)v270, -1);
              if (v931)
                v313 = 5;
              else
                v313 = 33;
              if (v931)
                v314 = 411;
              else
                v314 = 158;
              v315 = sub_1C4885524(v313, v314, *(_BYTE **)(v3 + 344));
              v316 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
              v317 = (llvm::MachineFunction *)v953[4];
              v318 = *(unsigned __int8 **)(v59 + 56);
              v983 = v318;
              if (v318)
                llvm::MetadataTracking::track((uint64_t)&v983, v318, 2);
              v319 = *((_QWORD *)v317 + 28);
              if (v319)
                *((_QWORD *)v317 + 28) = *(_QWORD *)v319;
              else
                v319 = sub_1C484358C((uint64_t)v317 + 128, 72, 3);
              v979 = v983;
              if (v983)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v983, v983, (uint64_t)&v979);
                v983 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v319, v317, v316 + 48 * v315, &v979, 0);
              if (v979)
                llvm::MetadataTracking::untrack((uint64_t)&v979, v979);
              if (v983)
                llvm::MetadataTracking::untrack((uint64_t)&v983, v983);
              v348 = v953[5];
              *(_QWORD *)(v319 + 24) = v348;
              v349 = *(_QWORD *)(v348 + 32);
              v350 = *(unsigned int *)(v319 + 40);
              if ((_DWORD)v350)
              {
                v410 = *(_QWORD *)(v319 + 32);
                v411 = *(_QWORD *)(v349 + 40);
                v412 = 32 * v350;
                do
                {
                  if (!*(_BYTE *)v410)
                  {
                    v413 = *(unsigned int *)(v410 + 4);
                    if ((int)v413 >= 0)
                      v414 = (uint64_t *)(*(_QWORD *)(v411 + 272) + 8 * v413);
                    else
                      v414 = (uint64_t *)(*(_QWORD *)(v411 + 24) + 16 * (v413 & 0x7FFFFFFF) + 8);
                    v415 = *v414;
                    if (*v414)
                    {
                      v416 = *(_QWORD *)(v415 + 16);
                      *(_QWORD *)(v415 + 16) = v410;
                      *(_QWORD *)(v410 + 16) = v416;
                      if ((*(_BYTE *)(v410 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v410 + 24) = v415;
                      }
                      else
                      {
                        *(_QWORD *)(v410 + 24) = 0;
                        v414 = (uint64_t *)(v416 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v410 + 16) = v410;
                      *(_QWORD *)(v410 + 24) = 0;
                    }
                    *v414 = v410;
                  }
                  v410 += 32;
                  v412 -= 32;
                }
                while (v412);
              }
              v351 = *(_QWORD *)(v349 + 728);
              if (v351)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v351 + 24))(v351, v319);
              v352 = *v946 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v319 = v352 | *(_QWORD *)v319 & 7;
              *(_QWORD *)(v319 + 8) = v946;
              *(_QWORD *)(v352 + 8) = v319;
              *v946 = *v946 & 7 | v319;
              v980 = 0;
              v981 = 0;
              v982 = 0;
              LODWORD(v979) = 0x1000000;
              HIDWORD(v979) = v969;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v319, v317, (const llvm::MachineOperand *)&v979);
              LODWORD(v979) = 1;
              v980 = 0;
              v981 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v319, v317, (const llvm::MachineOperand *)&v979);
              LODWORD(v979) = 1;
              v980 = 0;
              v981 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v319, v317, (const llvm::MachineOperand *)&v979);
              LODWORD(v979) = 1;
              v980 = 0;
              v981 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v319, v317, (const llvm::MachineOperand *)&v979);
              LODWORD(v979) = 1;
              v980 = 0;
              v981 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v319, v317, (const llvm::MachineOperand *)&v979);
              LODWORD(v979) = 1;
              v980 = 0;
              v981 = 2;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v319, v317, (const llvm::MachineOperand *)&v979);
              v353 = *(unint64_t **)(v270 + 56);
              v354 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
              if (v931)
                v355 = 34896;
              else
                v355 = 34944;
              v356 = *(llvm::MachineFunction **)(v270 + 32);
              v357 = *(unsigned __int8 **)(v59 + 56);
              v983 = v357;
              if (v357)
                llvm::MetadataTracking::track((uint64_t)&v983, v357, 2);
              v358 = *((_QWORD *)v356 + 28);
              if (v358)
                *((_QWORD *)v356 + 28) = *(_QWORD *)v358;
              else
                v358 = sub_1C484358C((uint64_t)v356 + 128, 72, 3);
              v979 = v983;
              if (v983)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v983, v983, (uint64_t)&v979);
                v983 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v358, v356, v354 + v355, &v979, 0);
              if (v979)
                llvm::MetadataTracking::untrack((uint64_t)&v979, v979);
              if (v983)
                llvm::MetadataTracking::untrack((uint64_t)&v983, v983);
              v359 = *(_QWORD *)(v270 + 40);
              *(_QWORD *)(v358 + 24) = v359;
              v360 = *(_QWORD *)(v359 + 32);
              v361 = *(unsigned int *)(v358 + 40);
              if ((_DWORD)v361)
              {
                v417 = *(_QWORD *)(v358 + 32);
                v418 = *(_QWORD *)(v360 + 40);
                v419 = 32 * v361;
                do
                {
                  if (!*(_BYTE *)v417)
                  {
                    v420 = *(unsigned int *)(v417 + 4);
                    if ((int)v420 >= 0)
                      v421 = (uint64_t *)(*(_QWORD *)(v418 + 272) + 8 * v420);
                    else
                      v421 = (uint64_t *)(*(_QWORD *)(v418 + 24) + 16 * (v420 & 0x7FFFFFFF) + 8);
                    v422 = *v421;
                    if (*v421)
                    {
                      v423 = *(_QWORD *)(v422 + 16);
                      *(_QWORD *)(v422 + 16) = v417;
                      *(_QWORD *)(v417 + 16) = v423;
                      if ((*(_BYTE *)(v417 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v417 + 24) = v422;
                      }
                      else
                      {
                        *(_QWORD *)(v417 + 24) = 0;
                        v421 = (uint64_t *)(v423 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v417 + 16) = v417;
                      *(_QWORD *)(v417 + 24) = 0;
                    }
                    *v421 = v417;
                  }
                  v417 += 32;
                  v419 -= 32;
                }
                while (v419);
              }
              v362 = *(_QWORD *)(v360 + 728);
              if (v362)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v362 + 24))(v362, v358);
              v363 = *v353 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v358 = v363 | *(_QWORD *)v358 & 7;
              *(_QWORD *)(v358 + 8) = v353;
              *(_QWORD *)(v363 + 8) = v358;
              *v353 = *v353 & 7 | v358;
              v980 = 0;
              v981 = 0;
              v982 = 0;
              LODWORD(v979) = 0x1000000;
              HIDWORD(v979) = v969;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v358, v356, (const llvm::MachineOperand *)&v979);
              LODWORD(v979) = 1;
              v980 = 0;
              v981 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v358, v356, (const llvm::MachineOperand *)&v979);
              LODWORD(v979) = 1;
              v980 = 0;
              v981 = 2;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v358, v356, (const llvm::MachineOperand *)&v979);
              v364 = *(_DWORD *)(*(_QWORD *)(v59 + 32) + 4);
              v365 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
              v366 = *(llvm::MachineFunction **)(v294 + 32);
              v367 = *(unsigned __int8 **)(v59 + 56);
              v983 = v367;
              if (v367)
                llvm::MetadataTracking::track((uint64_t)&v983, v367, 2);
              v330 = *((_QWORD *)v366 + 28);
              if (v330)
                *((_QWORD *)v366 + 28) = *(_QWORD *)v330;
              else
                v330 = sub_1C484358C((uint64_t)v366 + 128, 72, 3);
              v979 = v983;
              if (v983)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v983, v983, (uint64_t)&v979);
                v983 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v330, v366, v365 + 34704, &v979, 0);
              if (v979)
                llvm::MetadataTracking::untrack((uint64_t)&v979, v979);
              if (v983)
                llvm::MetadataTracking::untrack((uint64_t)&v983, v983);
              v368 = *(_QWORD *)(v294 + 40);
              *(_QWORD *)(v330 + 24) = v368;
              v369 = *(_QWORD *)(v368 + 32);
              v370 = *(unsigned int *)(v330 + 40);
              if ((_DWORD)v370)
              {
                v424 = *(_QWORD *)(v330 + 32);
                v425 = *(_QWORD *)(v369 + 40);
                v426 = 32 * v370;
                do
                {
                  if (!*(_BYTE *)v424)
                  {
                    v427 = *(unsigned int *)(v424 + 4);
                    if ((int)v427 >= 0)
                      v428 = (uint64_t *)(*(_QWORD *)(v425 + 272) + 8 * v427);
                    else
                      v428 = (uint64_t *)(*(_QWORD *)(v425 + 24) + 16 * (v427 & 0x7FFFFFFF) + 8);
                    v429 = *v428;
                    if (*v428)
                    {
                      v430 = *(_QWORD *)(v429 + 16);
                      *(_QWORD *)(v429 + 16) = v424;
                      *(_QWORD *)(v424 + 16) = v430;
                      if ((*(_BYTE *)(v424 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v424 + 24) = v429;
                      }
                      else
                      {
                        *(_QWORD *)(v424 + 24) = 0;
                        v428 = (uint64_t *)(v430 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v424 + 16) = v424;
                      *(_QWORD *)(v424 + 24) = 0;
                    }
                    *v428 = v424;
                  }
                  v424 += 32;
                  v426 -= 32;
                }
                while (v426);
              }
              v371 = *(_QWORD *)(v369 + 728);
              if (v371)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v371 + 24))(v371, v330);
              v372 = *(_QWORD *)v59 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v330 = v372 | *(_QWORD *)v330 & 7;
              *(_QWORD *)(v330 + 8) = v59;
              *(_QWORD *)(v372 + 8) = v330;
              *(_QWORD *)v59 = *(_QWORD *)v59 & 7 | v330;
              v980 = 0;
              LODWORD(v979) = 0;
              HIDWORD(v979) = v364;
              v981 = 0;
              v982 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v330, v366, (const llvm::MachineOperand *)&v979);
              v373 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
              if (*(_BYTE *)(*(_QWORD *)(v3 + 344) + 327))
                v374 = 29904;
              else
                v374 = 30672;
              v375 = *(llvm::MachineFunction **)(v294 + 32);
              v376 = *(unsigned __int8 **)(v59 + 56);
              v983 = v376;
              if (v376)
                llvm::MetadataTracking::track((uint64_t)&v983, v376, 2);
              v377 = *((_QWORD *)v375 + 28);
              if (v377)
                *((_QWORD *)v375 + 28) = *(_QWORD *)v377;
              else
                v377 = sub_1C484358C((uint64_t)v375 + 128, 72, 3);
              v979 = v983;
              if (v983)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v983, v983, (uint64_t)&v979);
                v983 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v377, v375, v373 + v374, &v979, 0);
              if (v979)
                llvm::MetadataTracking::untrack((uint64_t)&v979, v979);
              v341 = v949;
              if (v983)
                llvm::MetadataTracking::untrack((uint64_t)&v983, v983);
              v378 = *(_QWORD *)(v294 + 40);
              *(_QWORD *)(v377 + 24) = v378;
              v379 = *(_QWORD *)(v378 + 32);
              v380 = *(unsigned int *)(v377 + 40);
              if ((_DWORD)v380)
              {
                v431 = *(_QWORD *)(v377 + 32);
                v432 = *(_QWORD *)(v379 + 40);
                v433 = 32 * v380;
                do
                {
                  if (!*(_BYTE *)v431)
                  {
                    v434 = *(unsigned int *)(v431 + 4);
                    if ((int)v434 >= 0)
                      v435 = (uint64_t *)(*(_QWORD *)(v432 + 272) + 8 * v434);
                    else
                      v435 = (uint64_t *)(*(_QWORD *)(v432 + 24) + 16 * (v434 & 0x7FFFFFFF) + 8);
                    v436 = *v435;
                    if (*v435)
                    {
                      v437 = *(_QWORD *)(v436 + 16);
                      *(_QWORD *)(v436 + 16) = v431;
                      *(_QWORD *)(v431 + 16) = v437;
                      if ((*(_BYTE *)(v431 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v431 + 24) = v436;
                      }
                      else
                      {
                        *(_QWORD *)(v431 + 24) = 0;
                        v435 = (uint64_t *)(v437 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v431 + 16) = v431;
                      *(_QWORD *)(v431 + 24) = 0;
                    }
                    *v435 = v431;
                  }
                  v431 += 32;
                  v433 -= 32;
                }
                while (v433);
              }
              v381 = *(_QWORD *)(v379 + 728);
              if (v381)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v381 + 24))(v381, v377);
              v382 = *(_QWORD *)v59 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v377 = v382 | *(_QWORD *)v377 & 7;
              *(_QWORD *)(v377 + 8) = v59;
              *(_QWORD *)(v382 + 8) = v377;
              *(_QWORD *)v59 = *(_QWORD *)v59 & 7 | v377;
              v980 = 0;
              v981 = v294;
              LODWORD(v979) = 4;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v377, v375, (const llvm::MachineOperand *)&v979);
              if (v998 != &v1000)
                free(v998);
              v347 = (uint64_t)v946;
              if (v987 != &v989)
                free(v987);
            }
            llvm::MachineInstr::copyImplicitOps((llvm::MachineInstr *)v330, v341, (const llvm::MachineInstr *)v59);
            v383 = v985;
            if (v985 >= (unint64_t)DWORD1(v985))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v984, (uint64_t)&v985 + 8, v985 + 1, 8);
              v383 = v985;
            }
            *((_QWORD *)v984 + v383) = v59;
            LODWORD(v985) = v985 + 1;
            v59 = v347;
LABEL_695:
            v945 = 1;
            if ((_QWORD *)v59 != v973)
              goto LABEL_696;
            break;
          }
          if (v115 == 4593)
          {
            v164 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
            v165 = *(unsigned __int8 *)(v164 + 220469);
            v166 = *(unsigned __int8 *)(v164 + 31445);
            v167 = *(llvm::MachineFunction **)(v60 + 32);
            v168 = *(void **)(v59 + 56);
            v998 = v168;
            if (v168)
              llvm::MetadataTracking::track((uint64_t)&v998, (unsigned __int8 *)v168, 2);
            v169 = *((_QWORD *)v167 + 28);
            if (v169)
              *((_QWORD *)v167 + 28) = *(_QWORD *)v169;
            else
              v169 = sub_1C484358C((uint64_t)v167 + 128, 72, 3);
            v987 = v998;
            if (v998)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
              v998 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v169, v167, v164 + 31440, (unsigned __int8 **)&v987, 0);
            if (v987)
              llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
            if (v998)
              llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
            v190 = *(_QWORD *)(v60 + 40);
            *(_QWORD *)(v169 + 24) = v190;
            v191 = *(_QWORD *)(v190 + 32);
            v192 = *(unsigned int *)(v169 + 40);
            if ((_DWORD)v192)
            {
              v461 = *(_QWORD *)(v169 + 32);
              v462 = *(_QWORD *)(v191 + 40);
              v463 = 32 * v192;
              do
              {
                if (!*(_BYTE *)v461)
                {
                  v464 = *(unsigned int *)(v461 + 4);
                  if ((int)v464 >= 0)
                    v465 = (uint64_t *)(*(_QWORD *)(v462 + 272) + 8 * v464);
                  else
                    v465 = (uint64_t *)(*(_QWORD *)(v462 + 24) + 16 * (v464 & 0x7FFFFFFF) + 8);
                  v466 = *v465;
                  if (*v465)
                  {
                    v467 = *(_QWORD *)(v466 + 16);
                    *(_QWORD *)(v466 + 16) = v461;
                    *(_QWORD *)(v461 + 16) = v467;
                    if ((*(_BYTE *)(v461 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v461 + 24) = v466;
                    }
                    else
                    {
                      *(_QWORD *)(v461 + 24) = 0;
                      v465 = (uint64_t *)(v467 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v461 + 16) = v461;
                    *(_QWORD *)(v461 + 24) = 0;
                  }
                  *v465 = v461;
                }
                v461 += 32;
                v463 -= 32;
              }
              while (v463);
            }
            v193 = *(_QWORD *)(v191 + 728);
            if (v193)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v193 + 24))(v193, v169);
            v194 = *(_QWORD *)v59 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v169 = v194 | *(_QWORD *)v169 & 7;
            *(_QWORD *)(v169 + 8) = v59;
            *(_QWORD *)(v194 + 8) = v169;
            *(_QWORD *)v59 = *(_QWORD *)v59 & 7 | v169;
            LODWORD(v987) = 1;
            v988 = 0;
            v989 = v166 + v165;
LABEL_387:
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v169, v167, (const llvm::MachineOperand *)&v987);
            goto LABEL_695;
          }
          if (v115 == 490)
          {
            if (*(_BYTE *)(*(_QWORD *)(v3 + 344) + 356))
            {
              v128 = *((_QWORD *)v61 + 28);
              if (v128)
                *((_QWORD *)v61 + 28) = *(_QWORD *)v128;
              else
                v128 = sub_1C484358C((uint64_t)v61 + 128, 72, 3);
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v128, v61, (const llvm::MachineInstr *)v59);
              v129 = *(_QWORD *)(v60 + 40);
              *(_QWORD *)(v128 + 24) = v129;
              v130 = *(_QWORD *)(v129 + 32);
              v131 = *(unsigned int *)(v128 + 40);
              if ((_DWORD)v131)
              {
                v473 = *(_QWORD *)(v128 + 32);
                v474 = *(_QWORD *)(v130 + 40);
                v475 = 32 * v131;
                do
                {
                  if (!*(_BYTE *)v473)
                  {
                    v476 = *(unsigned int *)(v473 + 4);
                    if ((int)v476 >= 0)
                      v477 = (uint64_t *)(*(_QWORD *)(v474 + 272) + 8 * v476);
                    else
                      v477 = (uint64_t *)(*(_QWORD *)(v474 + 24) + 16 * (v476 & 0x7FFFFFFF) + 8);
                    v478 = *v477;
                    if (*v477)
                    {
                      v479 = *(_QWORD *)(v478 + 16);
                      *(_QWORD *)(v478 + 16) = v473;
                      *(_QWORD *)(v473 + 16) = v479;
                      if ((*(_BYTE *)(v473 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v473 + 24) = v478;
                      }
                      else
                      {
                        *(_QWORD *)(v473 + 24) = 0;
                        v477 = (uint64_t *)(v479 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v473 + 16) = v473;
                      *(_QWORD *)(v473 + 24) = 0;
                    }
                    *v477 = v473;
                  }
                  v473 += 32;
                  v475 -= 32;
                }
                while (v475);
              }
              v132 = *(_QWORD *)(v130 + 728);
              if (v132)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v132 + 24))(v132, v128);
              v133 = *(_QWORD *)v59 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v128 = v133 | *(_QWORD *)v128 & 7;
              *(_QWORD *)(v128 + 8) = v59;
              *(_QWORD *)(v133 + 8) = v128;
              *(_QWORD *)v59 = *(_QWORD *)v59 & 7 | v128;
            }
            goto LABEL_695;
          }
        }
        else
        {
          if (**(unsigned __int16 **)(v59 + 16) <= 0x12Eu)
          {
            if (v115 != 270)
            {
              if (v115 != 302)
                goto LABEL_303;
              goto LABEL_284;
            }
            sub_1C4884718(*(_QWORD **)(v3 + 352), v60, (unint64_t *)v59, *(_DWORD *)(*(_QWORD *)(v59 + 32) + 4), v59);
            goto LABEL_373;
          }
          if (v115 == 303)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v61 + 2) + 176))(*((_QWORD *)v61 + 2));
            v159 = sub_1C4885524(45, 235, *(_BYTE **)(v3 + 344));
            v160 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
            v161 = *(llvm::MachineFunction **)(v60 + 32);
            v162 = *(void **)(v59 + 56);
            v998 = v162;
            if (v162)
              llvm::MetadataTracking::track((uint64_t)&v998, (unsigned __int8 *)v162, 2);
            v163 = *((_QWORD *)v161 + 28);
            if (v163)
              *((_QWORD *)v161 + 28) = *(_QWORD *)v163;
            else
              v163 = sub_1C484358C((uint64_t)v161 + 128, 72, 3);
            v987 = v998;
            if (v998)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
              v998 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v163, v161, v160 + 48 * v159, (unsigned __int8 **)&v987, 0);
            if (v987)
              llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
            if (v998)
              llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
            v175 = *(_QWORD *)(v60 + 40);
            *(_QWORD *)(v163 + 24) = v175;
            v176 = *(_QWORD *)(v175 + 32);
            v177 = *(unsigned int *)(v163 + 40);
            if ((_DWORD)v177)
            {
              v447 = *(_QWORD *)(v163 + 32);
              v448 = *(_QWORD *)(v176 + 40);
              v449 = 32 * v177;
              do
              {
                if (!*(_BYTE *)v447)
                {
                  v450 = *(unsigned int *)(v447 + 4);
                  if ((int)v450 >= 0)
                    v451 = (uint64_t *)(*(_QWORD *)(v448 + 272) + 8 * v450);
                  else
                    v451 = (uint64_t *)(*(_QWORD *)(v448 + 24) + 16 * (v450 & 0x7FFFFFFF) + 8);
                  v452 = *v451;
                  if (*v451)
                  {
                    v453 = *(_QWORD *)(v452 + 16);
                    *(_QWORD *)(v452 + 16) = v447;
                    *(_QWORD *)(v447 + 16) = v453;
                    if ((*(_BYTE *)(v447 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v447 + 24) = v452;
                    }
                    else
                    {
                      *(_QWORD *)(v447 + 24) = 0;
                      v451 = (uint64_t *)(v453 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v447 + 16) = v447;
                    *(_QWORD *)(v447 + 24) = 0;
                  }
                  *v451 = v447;
                }
                v447 += 32;
                v449 -= 32;
              }
              while (v449);
            }
            v178 = *(_QWORD *)(v176 + 728);
            if (v178)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v178 + 24))(v178, v163);
            v179 = *(_QWORD *)v59 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v163 = v179 | *(_QWORD *)v163 & 7;
            *(_QWORD *)(v163 + 8) = v59;
            *(_QWORD *)(v179 + 8) = v163;
            *(_QWORD *)v59 = *(_QWORD *)v59 & 7 | v163;
            v988 = 0;
            v989 = 0;
            v990 = 0;
            v987 = (void *)0x3901000000;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v163, v161, (const llvm::MachineOperand *)&v987);
            LODWORD(v987) = 1;
            v988 = 0;
            v989 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v163, v161, (const llvm::MachineOperand *)&v987);
            v988 = 0;
            v987 = (void *)0x3900000000;
            v989 = 0;
            v990 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v163, v161, (const llvm::MachineOperand *)&v987);
            LODWORD(v987) = 1;
            v988 = 0;
            v989 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v163, v161, (const llvm::MachineOperand *)&v987);
            LODWORD(v987) = 1;
            v988 = 0;
            v989 = 2;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v163, v161, (const llvm::MachineOperand *)&v987);
            v180 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
            v181 = *(llvm::MachineFunction **)(v60 + 32);
            v182 = *(void **)(v59 + 56);
            v998 = v182;
            if (v182)
              llvm::MetadataTracking::track((uint64_t)&v998, (unsigned __int8 *)v182, 2);
            v183 = *((_QWORD *)v181 + 28);
            if (v183)
              *((_QWORD *)v181 + 28) = *(_QWORD *)v183;
            else
              v183 = sub_1C484358C((uint64_t)v181 + 128, 72, 3);
            v987 = v998;
            if (v998)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
              v998 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v183, v181, v180 + 35040, (unsigned __int8 **)&v987, 0);
            if (v987)
              llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
            if (v998)
              llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
            v184 = *(_QWORD *)(v60 + 40);
            *(_QWORD *)(v183 + 24) = v184;
            v185 = *(_QWORD *)(v184 + 32);
            v186 = *(unsigned int *)(v183 + 40);
            if ((_DWORD)v186)
            {
              v454 = *(_QWORD *)(v183 + 32);
              v455 = *(_QWORD *)(v185 + 40);
              v456 = 32 * v186;
              do
              {
                if (!*(_BYTE *)v454)
                {
                  v457 = *(unsigned int *)(v454 + 4);
                  if ((int)v457 >= 0)
                    v458 = (uint64_t *)(*(_QWORD *)(v455 + 272) + 8 * v457);
                  else
                    v458 = (uint64_t *)(*(_QWORD *)(v455 + 24) + 16 * (v457 & 0x7FFFFFFF) + 8);
                  v459 = *v458;
                  if (*v458)
                  {
                    v460 = *(_QWORD *)(v459 + 16);
                    *(_QWORD *)(v459 + 16) = v454;
                    *(_QWORD *)(v454 + 16) = v460;
                    if ((*(_BYTE *)(v454 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v454 + 24) = v459;
                    }
                    else
                    {
                      *(_QWORD *)(v454 + 24) = 0;
                      v458 = (uint64_t *)(v460 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v454 + 16) = v454;
                    *(_QWORD *)(v454 + 24) = 0;
                  }
                  *v458 = v454;
                }
                v454 += 32;
                v456 -= 32;
              }
              while (v456);
            }
            v187 = *(_QWORD *)(v185 + 728);
            if (v187)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v187 + 24))(v187, v183);
            v188 = *(_QWORD *)v59 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v183 = v188 | *(_QWORD *)v183 & 7;
            *(_QWORD *)(v183 + 8) = v59;
            *(_QWORD *)(v188 + 8) = v183;
            *(_QWORD *)v59 = *(_QWORD *)v59 & 7 | v183;
            v988 = 0;
            v987 = (void *)0x3900000000;
            v989 = 0;
            v990 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v183, v181, (const llvm::MachineOperand *)&v987);
            goto LABEL_373;
          }
          if (v115 == 337)
          {
LABEL_373:
            v189 = v985;
            if (v985 >= (unint64_t)DWORD1(v985))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v984, (uint64_t)&v985 + 8, v985 + 1, 8);
              v189 = v985;
            }
            *((_QWORD *)v984 + v189) = v59;
            LODWORD(v985) = v985 + 1;
            goto LABEL_695;
          }
        }
LABEL_303:
        if (!*(_BYTE *)(v3 + 391)
          || *(_QWORD *)(v59 + 24) == *((_QWORD *)v61 + 41)
          || (v146 = sub_1C4B138B4(v115), (v115 - 5396) >= 0x1E0)
          && ((v147 = sub_1C488859C(v115) - 59, v147 > 7) || ((1 << v147) & 0xD3) == 0)
          || (v148 = *(_QWORD *)(v59 + 32), v149 = v146, v150 = 32 * v146, (v151 = *(_BYTE *)(v148 + v150)) != 0))
        {
          if (!v66)
            goto LABEL_697;
          goto LABEL_695;
        }
        v202 = v60;
        v203 = 0;
        v958 = v202;
        v204 = v202 + 48;
        v970 = (void **)(v59 + 56);
        while (1)
        {
          if (!v151)
          {
            v205 = v149;
            v206 = v148 + 32 * v149;
            v207 = *(_DWORD *)(v206 + 4);
            if (v207 != v203)
            {
              (*(void (**)(_QWORD, uint64_t, uint64_t, void **, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v3 + 352)
                                                                                                 + 400))(*(_QWORD *)(v3 + 352), v958, v59, v970, 185, *(unsigned int *)(v206 + 4), 0);
              v203 = v207;
            }
            llvm::MachineOperand::setReg(v206, 0xB9u);
            v149 = v205;
          }
          v208 = *(_QWORD *)v59;
          if ((*(_QWORD *)v59 & 4) == 0 && (v209 = *(_WORD *)(v59 + 44), (v209 & 8) != 0))
          {
            v214 = v59;
            do
              v214 = *(_QWORD *)(v214 + 8);
            while ((*(_WORD *)(v214 + 44) & 8) != 0);
            if (*(_QWORD *)(v214 + 8) == v204)
              goto LABEL_910;
            v210 = v59;
            if ((v209 & 8) != 0)
            {
              v210 = v59;
              do
                v210 = *(_QWORD *)(v210 + 8);
              while ((*(_WORD *)(v210 + 44) & 8) != 0);
            }
          }
          else
          {
            v210 = v59;
            if (*(_QWORD *)(v59 + 8) == v204)
            {
              v384 = v59;
              goto LABEL_704;
            }
          }
          v211 = **(unsigned __int16 **)(*(_QWORD *)(v210 + 8) + 16);
          if ((v211 - 5396) >= 0x1E0)
          {
            v212 = sub_1C488859C(v211);
            if ((v212 - 59) > 7 || ((1 << (v212 - 59)) & 0xD3) == 0)
              break;
          }
          if ((v208 & 4) == 0)
          {
            while ((*(_WORD *)(v59 + 44) & 8) != 0)
              v59 = *(_QWORD *)(v59 + 8);
          }
          v59 = *(_QWORD *)(v59 + 8);
          v148 = *(_QWORD *)(v59 + 32);
          v151 = *(_BYTE *)(v148 + v150);
        }
        v384 = v59;
        if ((v208 & 4) != 0)
          goto LABEL_704;
LABEL_910:
        v384 = v59;
        if ((*(_WORD *)(v59 + 44) & 8) != 0)
        {
          v384 = v59;
          do
            v384 = *(_QWORD *)(v384 + 8);
          while ((*(_WORD *)(v384 + 44) & 8) != 0);
        }
LABEL_704:
        v385 = *(unint64_t **)(v384 + 8);
        v386 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
        if (v63)
          v387 = 195456;
        else
          v387 = 195504;
        v167 = *(llvm::MachineFunction **)(v958 + 32);
        v388 = *v970;
        v998 = v388;
        if (v388)
          llvm::MetadataTracking::track((uint64_t)&v998, (unsigned __int8 *)v388, 2);
        v169 = *((_QWORD *)v167 + 28);
        if (v169)
          *((_QWORD *)v167 + 28) = *(_QWORD *)v169;
        else
          v169 = sub_1C484358C((uint64_t)v167 + 128, 72, 3);
        v987 = v998;
        if (v998)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
          v998 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v169, v167, v386 + v387, (unsigned __int8 **)&v987, 0);
        if (v987)
          llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
        if (v998)
          llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
        v468 = *(_QWORD *)(v958 + 40);
        *(_QWORD *)(v169 + 24) = v468;
        v469 = *(_QWORD *)(v468 + 32);
        v470 = *(unsigned int *)(v169 + 40);
        if ((_DWORD)v470)
        {
          v494 = *(_QWORD *)(v169 + 32);
          v495 = *(_QWORD *)(v469 + 40);
          v496 = 32 * v470;
          do
          {
            if (!*(_BYTE *)v494)
            {
              v497 = *(unsigned int *)(v494 + 4);
              if ((int)v497 >= 0)
                v498 = (uint64_t *)(*(_QWORD *)(v495 + 272) + 8 * v497);
              else
                v498 = (uint64_t *)(*(_QWORD *)(v495 + 24) + 16 * (v497 & 0x7FFFFFFF) + 8);
              v499 = *v498;
              if (*v498)
              {
                v500 = *(_QWORD *)(v499 + 16);
                *(_QWORD *)(v499 + 16) = v494;
                *(_QWORD *)(v494 + 16) = v500;
                if ((*(_BYTE *)(v494 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v494 + 24) = v499;
                }
                else
                {
                  *(_QWORD *)(v494 + 24) = 0;
                  v498 = (uint64_t *)(v500 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v494 + 16) = v494;
                *(_QWORD *)(v494 + 24) = 0;
              }
              *v498 = v494;
            }
            v494 += 32;
            v496 -= 32;
          }
          while (v496);
        }
        v471 = *(_QWORD *)(v469 + 728);
        if (v471)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v471 + 24))(v471, v169);
        v472 = *v385 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v169 = v472 | *(_QWORD *)v169 & 7;
        *(_QWORD *)(v169 + 8) = v385;
        *(_QWORD *)(v472 + 8) = v169;
        *v385 = *v385 & 7 | v169;
        v988 = 0;
        v989 = 0;
        v990 = 0;
        v987 = (void *)0xB901000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v169, v167, (const llvm::MachineOperand *)&v987);
        LODWORD(v987) = 1;
        v988 = 0;
        v989 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v169, v167, (const llvm::MachineOperand *)&v987);
        LODWORD(v987) = 1;
        v988 = 0;
        v989 = 0;
        goto LABEL_387;
      }
      v998 = &v1000;
      v999 = 0x1000000000;
      sub_1C4848C0C((unsigned int *)&v998, 1uLL, v60);
      v116 = (uint64_t *)v998;
      v987 = v991;
      v988 = (uint64_t)v991;
      v989 = 16;
      LODWORD(v990) = 0;
      if ((_DWORD)v999)
      {
        v117 = 8 * v999;
        do
        {
          v118 = *v116++;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v987, v118);
          v117 -= 8;
        }
        while (v117);
        while ((_DWORD)v999)
        {
          v119 = *((_QWORD *)v998 + v999 - 1);
          LODWORD(v999) = v999 - 1;
          v120 = sub_1C477672C(v942, v119);
          v121 = *(_QWORD *)(v3 + 256);
          if (v121 == *(_QWORD *)(v3 + 248))
            v122 = 268;
          else
            v122 = 264;
          if (v120 != (_QWORD *)(v121 + 8 * *(unsigned int *)(v3 + v122)))
          {
            if (!v59 || (v152 = v59, (*(_BYTE *)v59 & 4) == 0))
            {
              v152 = v59;
              if ((*(_WORD *)(v59 + 44) & 8) != 0)
              {
                v152 = v59;
                do
                  v152 = *(_QWORD *)(v152 + 8);
                while ((*(_WORD *)(v152 + 44) & 8) != 0);
              }
            }
            v153 = *(unint64_t **)(v152 + 8);
            v154 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
            if (*(_BYTE *)(*(_QWORD *)(v3 + 344) + 327))
              v155 = 396624;
            else
              v155 = 396576;
            v156 = *(llvm::MachineFunction **)(v60 + 32);
            v157 = *(unsigned __int8 **)(v59 + 56);
            v983 = v157;
            if (v157)
              llvm::MetadataTracking::track((uint64_t)&v983, v157, 2);
            v158 = *((_QWORD *)v156 + 28);
            if (v158)
              *((_QWORD *)v156 + 28) = *(_QWORD *)v158;
            else
              v158 = sub_1C484358C((uint64_t)v156 + 128, 72, 3);
            v979 = v983;
            if (v983)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v983, v983, (uint64_t)&v979);
              v983 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v158, v156, v154 + v155, &v979, 0);
            if (v979)
              llvm::MetadataTracking::untrack((uint64_t)&v979, v979);
            if (v983)
              llvm::MetadataTracking::untrack((uint64_t)&v983, v983);
            v170 = *(_QWORD *)(v60 + 40);
            *(_QWORD *)(v158 + 24) = v170;
            v171 = *(_QWORD *)(v170 + 32);
            v172 = *(unsigned int *)(v158 + 40);
            if ((_DWORD)v172)
            {
              v438 = *(_QWORD *)(v158 + 32);
              v439 = *(_QWORD *)(v171 + 40);
              v440 = 32 * v172;
              do
              {
                if (!*(_BYTE *)v438)
                {
                  v441 = *(unsigned int *)(v438 + 4);
                  if ((int)v441 >= 0)
                    v442 = (uint64_t *)(*(_QWORD *)(v439 + 272) + 8 * v441);
                  else
                    v442 = (uint64_t *)(*(_QWORD *)(v439 + 24) + 16 * (v441 & 0x7FFFFFFF) + 8);
                  v443 = *v442;
                  if (*v442)
                  {
                    v444 = *(_QWORD *)(v443 + 16);
                    *(_QWORD *)(v443 + 16) = v438;
                    *(_QWORD *)(v438 + 16) = v444;
                    if ((*(_BYTE *)(v438 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v438 + 24) = v443;
                    }
                    else
                    {
                      *(_QWORD *)(v438 + 24) = 0;
                      v442 = (uint64_t *)(v444 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v438 + 16) = v438;
                    *(_QWORD *)(v438 + 24) = 0;
                  }
                  *v442 = v438;
                }
                v438 += 32;
                v440 -= 32;
              }
              while (v440);
            }
            v173 = *(_QWORD *)(v171 + 728);
            if (v173)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v173 + 24))(v173, v158);
            v174 = *v153 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v158 = v174 | *(_QWORD *)v158 & 7;
            *(_QWORD *)(v158 + 8) = v153;
            *(_QWORD *)(v174 + 8) = v158;
            *v153 = *v153 & 7 | v158;
            LODWORD(v979) = 1;
            v980 = 0;
            v981 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v158, v156, (const llvm::MachineOperand *)&v979);
            LODWORD(v979) = 1;
            v980 = 0;
            v981 = 2;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v158, v156, (const llvm::MachineOperand *)&v979);
            break;
          }
          v123 = *(uint64_t **)(v119 + 88);
          v124 = *(uint64_t **)(v119 + 96);
          while (v123 != v124)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v987, *v123);
            if (v125)
            {
              v126 = *v123;
              v127 = v999;
              if (v999 >= (unint64_t)HIDWORD(v999))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v998, (uint64_t)&v1000, v999 + 1, 8);
                v127 = v999;
              }
              *((_QWORD *)v998 + v127) = v126;
              LODWORD(v999) = v999 + 1;
            }
            ++v123;
          }
        }
      }
      if ((void *)v988 != v987)
        free((void *)v988);
      if (v998 != &v1000)
        free(v998);
LABEL_696:
      if (v59)
      {
LABEL_697:
        if ((*(_BYTE *)v59 & 4) != 0)
          goto LABEL_701;
      }
      while ((*(_WORD *)(v59 + 44) & 8) != 0)
        v59 = *(_QWORD *)(v59 + 8);
LABEL_701:
      v59 = *(_QWORD *)(v59 + 8);
    }
    while ((_QWORD *)v59 != v973);
    v501 = (char *)v984;
    v502 = (char *)v984 + 8 * v985;
    v57 = v929;
    v503 = v945;
    if ((_DWORD)v985)
    {
      do
      {
        v506 = *(_BYTE **)v501;
        v505 = *(_BYTE **)v501;
        if ((**(_BYTE **)v501 & 4) == 0)
        {
          v505 = *(_BYTE **)v501;
          if ((*((_WORD *)v506 + 22) & 8) != 0)
          {
            v505 = *(_BYTE **)v501;
            do
              v505 = (_BYTE *)*((_QWORD *)v505 + 1);
            while ((*((_WORD *)v505 + 22) & 8) != 0);
          }
        }
        sub_1C487FE80(*((_QWORD *)v506 + 3) + 40, (uint64_t)v506, *((_QWORD *)v505 + 1));
        v501 += 8;
      }
      while (v501 != v502);
      v501 = (char *)v984;
    }
    if (v501 != (char *)&v985 + 8)
      free(v501);
    v504 = v930;
LABEL_942:
    v930 = v504 | v503;
    v57 = (_QWORD *)v57[1];
  }
  while (v57 != v937);
LABEL_943:
  if ((v926 - 101) > 3 || v926 == 102)
    goto LABEL_970;
  v507 = *(_BYTE **)(v3 + 344);
  if (v507[363])
  {
    v508 = v507[318];
    v509 = (_QWORD *)v927[41];
    v510 = (unint64_t *)v509[7];
    v984 = 0;
    v17 = v508 == 0;
    v511 = 51360;
    if (v17)
      v511 = 53088;
    v512 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8) + v511;
    v513 = (llvm::MachineFunction *)v509[4];
    v998 = 0;
    v514 = *((_QWORD *)v513 + 28);
    if (v514)
    {
      *((_QWORD *)v513 + 28) = *(_QWORD *)v514;
      v987 = 0;
    }
    else
    {
      v514 = sub_1C484358C((uint64_t)v513 + 128, 72, 3);
      v987 = v998;
      if (v998)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
        v998 = 0;
      }
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v514, v513, v512, (unsigned __int8 **)&v987, 0);
    if (v987)
      llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
    if (v998)
      llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
    v519 = v509[5];
    *(_QWORD *)(v514 + 24) = v519;
    v520 = *(_QWORD *)(v519 + 32);
    v521 = *(unsigned int *)(v514 + 40);
    if ((_DWORD)v521)
    {
      v587 = *(_QWORD *)(v514 + 32);
      v588 = *(_QWORD *)(v520 + 40);
      v589 = 32 * v521;
      do
      {
        if (!*(_BYTE *)v587)
        {
          v590 = *(unsigned int *)(v587 + 4);
          if ((int)v590 >= 0)
            v591 = (uint64_t *)(*(_QWORD *)(v588 + 272) + 8 * v590);
          else
            v591 = (uint64_t *)(*(_QWORD *)(v588 + 24) + 16 * (v590 & 0x7FFFFFFF) + 8);
          v592 = *v591;
          if (*v591)
          {
            v593 = *(_QWORD *)(v592 + 16);
            *(_QWORD *)(v592 + 16) = v587;
            *(_QWORD *)(v587 + 16) = v593;
            if ((*(_BYTE *)(v587 + 3) & 1) != 0)
            {
              *(_QWORD *)(v587 + 24) = v592;
            }
            else
            {
              *(_QWORD *)(v587 + 24) = 0;
              v591 = (uint64_t *)(v593 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v587 + 16) = v587;
            *(_QWORD *)(v587 + 24) = 0;
          }
          *v591 = v587;
        }
        v587 += 32;
        v589 -= 32;
      }
      while (v589);
    }
    v522 = *(_QWORD *)(v520 + 728);
    if (v522)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v522 + 24))(v522, v514);
    v523 = *v510 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v514 = v523 | *(_QWORD *)v514 & 7;
    *(_QWORD *)(v514 + 8) = v510;
    *(_QWORD *)(v523 + 8) = v514;
    *v510 = *v510 & 7 | v514;
    v988 = 0;
    v989 = 0;
    v990 = 0;
    v987 = (void *)0x13901000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v514, v513, (const llvm::MachineOperand *)&v987);
    LODWORD(v987) = 1;
    v988 = 0;
    v989 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v514, v513, (const llvm::MachineOperand *)&v987);
    LODWORD(v987) = 1;
    v988 = 0;
    v989 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v514, v513, (const llvm::MachineOperand *)&v987);
    LODWORD(v987) = 1;
    v988 = 0;
    v989 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v514, v513, (const llvm::MachineOperand *)&v987);
    if (v984)
      llvm::MetadataTracking::untrack((uint64_t)&v984, (unsigned __int8 *)v984);
    sub_1C4878804(v3, v514);
    LOBYTE(v930) = 1;
    goto LABEL_970;
  }
  if (!v507[284])
    goto LABEL_970;
  v516 = (llvm::MachineBasicBlock *)v927[40];
  v515 = (llvm::MachineBasicBlock *)v927[41];
  v998 = 0;
  if (v516 == v515)
  {
    v517 = v516;
  }
  else
  {
    do
    {
      v517 = v516;
      v516 = *(llvm::MachineBasicBlock **)v516;
    }
    while (((*((_QWORD *)v517 + 12) - *((_QWORD *)v517 + 11)) & 0x7FFFFFFF8) != 0 && v516 != v515);
  }
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v517);
  if (((*((_QWORD *)v517 + 12) - *((_QWORD *)v517 + 11)) & 0x7FFFFFFF8) != 0
    || (llvm::MachineBasicBlock *)((char *)v517 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
    goto LABEL_1774;
  }
  v536 = FirstTerminator;
  if (*((_QWORD *)v517 + 7) != FirstTerminator)
  {
    v537 = 0;
    do
    {
      v538 = *(unsigned __int16 **)(v536 + 16);
      v539 = *((_QWORD *)v538 + 2);
      if ((v539 & 0x1000) != 0)
        v537 = v536;
      if ((v539 & 2) != 0)
      {
        if (sub_1C4888154((_QWORD *)v536))
          goto LABEL_1035;
        v538 = *(unsigned __int16 **)(v536 + 16);
        LODWORD(v540) = *v538;
      }
      else if ((v539 & 0x80) != 0 || (v540 = *v538, (byte_1C6468CF3[v540] & 1) != 0))
      {
LABEL_1035:
        if (v537)
        {
          v549 = v3;
          v550 = v537;
LABEL_1773:
          sub_1C4878804(v549, v550);
        }
        goto LABEL_1774;
      }
      v541 = v540 - 789;
      v542 = v540 - 4672;
      if (v541 >= 3 && v542 >= 2)
      {
        v544 = *(_WORD *)(v536 + 44);
        v545 = *((_QWORD *)v538 + 1);
        if ((v544 & 0xC) == 0 || (v544 & 4) != 0)
        {
          if ((v545 & 0x8A0) != 0)
            goto LABEL_1154;
        }
        else
        {
          v546 = v536;
          if ((v545 & 0x80) != 0)
            goto LABEL_1154;
          while ((*(_WORD *)(v546 + 44) & 8) != 0)
          {
            v546 = *(_QWORD *)(v546 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v546 + 16) + 8) & 0x80) != 0)
              goto LABEL_1154;
          }
          if ((v545 & 0x20) != 0)
            goto LABEL_1154;
          v547 = v536;
          while ((*(_WORD *)(v547 + 44) & 8) != 0)
          {
            v547 = *(_QWORD *)(v547 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v547 + 16) + 8) & 0x20) != 0)
              goto LABEL_1154;
          }
          if ((v545 & 0x800) != 0)
            goto LABEL_1154;
          v548 = v536;
          while ((*(_WORD *)(v548 + 44) & 8) != 0)
          {
            v548 = *(_QWORD *)(v548 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v548 + 16) + 9) & 8) != 0)
              goto LABEL_1154;
          }
        }
      }
      v536 = *(_QWORD *)v536 & 0xFFFFFFFFFFFFFFF8;
      if (!v536 || (*(_BYTE *)v536 & 4) == 0)
      {
        while ((*(_WORD *)(v536 + 44) & 4) != 0)
          v536 = *(_QWORD *)v536 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    while (v536 != *((_QWORD *)v517 + 7));
  }
  if (v516 == v515)
    goto LABEL_1154;
  v551 = *(llvm::MachineBasicBlock **)v517;
  v552 = *(_QWORD *)v517 + 48;
  v987 = v991;
  v988 = (uint64_t)v991;
  v989 = 16;
  LODWORD(v990) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v987, (uint64_t)v517);
  v553 = *((_QWORD *)v515 + 7);
  if (v552 == v553)
    goto LABEL_1146;
  v554 = 0;
  v555 = 0;
  v556 = 0;
  v557 = byte_1C6468CF3;
  while (2)
  {
    if (v552 == *((_QWORD *)v551 + 7))
    {
      v578 = v557;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v987, (uint64_t)v551);
      v557 = v578;
      v551 = *(llvm::MachineBasicBlock **)v551;
      v552 = (unint64_t)v551 + 48;
      goto LABEL_1095;
    }
    v552 = *(_QWORD *)v552 & 0xFFFFFFFFFFFFFFF8;
    if (!v552 || (*(_BYTE *)v552 & 4) == 0)
    {
      while ((*(_WORD *)(v552 + 44) & 4) != 0)
        v552 = *(_QWORD *)v552 & 0xFFFFFFFFFFFFFFF8;
    }
    v558 = *(unsigned __int16 **)(v552 + 16);
    v559 = *((_QWORD *)v558 + 2);
    if ((v559 & 0x1000) != 0)
      v554 = v552;
    if (v552 == v553)
      goto LABEL_1138;
    if ((v559 & 2) != 0)
    {
      v579 = sub_1C4888154((_QWORD *)v552);
      v557 = byte_1C6468CF3;
      if (v579)
        goto LABEL_1138;
      v558 = *(unsigned __int16 **)(v552 + 16);
      LODWORD(v560) = *v558;
    }
    else
    {
      v560 = *v558;
      if ((v557[v560] & 1) != 0 || (v559 & 0x80) != 0)
        goto LABEL_1138;
    }
    v561 = v560 - 789;
    v562 = v560 - 4672;
    if (v561 < 3 || v562 < 2)
    {
LABEL_1056:
      v564 = *((_QWORD *)v558 + 1);
      if ((*(_WORD *)(v552 + 44) & 0xC) != 0 && (*(_WORD *)(v552 + 44) & 4) == 0)
      {
        v572 = v552;
        if ((v564 & 0x400) != 0)
        {
LABEL_1061:
          v566 = v557;
          v567 = (char *)sub_1C477672C((uint64_t)&v987, *(_QWORD *)(*(_QWORD *)(v552 + 32) + 16));
          v557 = v566;
          if ((void *)v988 == v987)
            v568 = (uint64_t *)((char *)&v989 + 4);
          else
            v568 = &v989;
          v569 = (char *)(v988 + 8 * *(unsigned int *)v568);
          if ((v555 & 1) != 0)
            v570 = v556;
          else
            v570 = v554;
          v571 = v567 == v569;
          if (v571)
            v556 = v570;
          v555 |= v571;
        }
        else
        {
          while ((*(_WORD *)(v572 + 44) & 8) != 0)
          {
            v572 = *(_QWORD *)(v572 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v572 + 16) + 9) & 4) != 0)
              goto LABEL_1061;
          }
        }
      }
      else if ((v564 & 0x400) != 0)
      {
        goto LABEL_1061;
      }
LABEL_1095:
      v553 = *((_QWORD *)v515 + 7);
      if (v552 == v553)
        goto LABEL_1146;
      continue;
    }
    break;
  }
  v573 = *((_QWORD *)v558 + 1);
  if ((*(_WORD *)(v552 + 44) & 0xC) == 0 || (*(_WORD *)(v552 + 44) & 4) != 0)
  {
    if ((v573 & 0x8A0) != 0)
      goto LABEL_1138;
    goto LABEL_1056;
  }
  v575 = v552;
  if ((v573 & 0x80) == 0)
  {
    while ((*(_WORD *)(v575 + 44) & 8) != 0)
    {
      v575 = *(_QWORD *)(v575 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v575 + 16) + 8) & 0x80) != 0)
        goto LABEL_1138;
    }
    if ((v573 & 0x20) == 0)
    {
      v576 = v552;
      while ((*(_WORD *)(v576 + 44) & 8) != 0)
      {
        v576 = *(_QWORD *)(v576 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v576 + 16) + 8) & 0x20) != 0)
          goto LABEL_1138;
      }
      if ((v573 & 0x800) == 0)
      {
        v577 = v552;
        while ((*(_WORD *)(v577 + 44) & 8) != 0)
        {
          v577 = *(_QWORD *)(v577 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v577 + 16) + 9) & 8) != 0)
            goto LABEL_1138;
        }
        goto LABEL_1056;
      }
    }
  }
LABEL_1138:
  if (v551 == v515)
    v601 = v554;
  else
    v601 = v556;
  if ((v555 & 1) != 0)
    v602 = v601;
  else
    v602 = v554;
  if (v602 && (sub_1C4878804(v3, v602), *(llvm::MachineBasicBlock **)(v602 + 24) == v515))
  {
    if ((void *)v988 != v987)
      free((void *)v988);
  }
  else
  {
LABEL_1146:
    if ((void *)v988 != v987)
      free((void *)v988);
    v536 = *((_QWORD *)v517 + 7);
LABEL_1154:
    while (v536 != llvm::MachineBasicBlock::getFirstTerminator(v517))
    {
      if ((*(_BYTE *)(*(_QWORD *)(v536 + 16) + 17) & 0x10) != 0)
      {
        v549 = v3;
        v550 = v536;
        goto LABEL_1773;
      }
      if ((*(_BYTE *)v536 & 4) == 0)
      {
        while ((*(_WORD *)(v536 + 44) & 8) != 0)
          v536 = *(_QWORD *)(v536 + 8);
      }
      v536 = *(_QWORD *)(v536 + 8);
    }
  }
LABEL_1774:
  if (v998)
    llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
LABEL_970:
  v524 = *(_BYTE **)(v3 + 344);
  if (!v524[399] || !v524[400] && !*(_BYTE *)(v3 + 405))
    goto LABEL_1219;
  v525 = (_QWORD *)*v937;
  if ((_QWORD *)*v937 == v937 || ((*(unsigned __int16 *)(*v927 + 18) >> 4) & 0x3FFu) - 100 > 8)
    goto LABEL_1219;
  v526 = 0;
  v527 = v525 + 6;
  v528 = (unint64_t)(v525 + 6);
  while (2)
  {
    v529 = v528;
    if ((unint64_t *)v528 == v527)
      goto LABEL_982;
    v530 = *(_WORD *)(v528 + 44) & 4;
    v531 = *(_QWORD *)(*(_QWORD *)(v529 + 16) + 8);
    if ((*(_WORD *)(v529 + 44) & 0xC) == 0 || v530 != 0)
    {
      if ((v531 & 0x20) == 0)
        goto LABEL_1157;
      goto LABEL_982;
    }
    v533 = v529;
    if ((v531 & 0x20) != 0)
    {
LABEL_982:
      if (v529 == v525[7])
      {
        v526 = (unint64_t *)v529;
        goto LABEL_1157;
      }
      v528 = *(_QWORD *)v529 & 0xFFFFFFFFFFFFFFF8;
      if (!v528 || (v526 = (unint64_t *)v529, (*(_BYTE *)v528 & 4) == 0))
      {
        v526 = (unint64_t *)v529;
        if ((*(_WORD *)(v528 + 44) & 4) != 0)
        {
          do
            v528 = *(_QWORD *)v528 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v528 + 44) & 4) != 0);
          v526 = (unint64_t *)v529;
        }
      }
      continue;
    }
    break;
  }
  while ((*(_WORD *)(v533 + 44) & 8) != 0)
  {
    v533 = *(_QWORD *)(v533 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v533 + 16) + 8) & 0x20) != 0)
      goto LABEL_982;
  }
LABEL_1157:
  v960 = *(_BYTE **)(v3 + 344);
  v603 = v927[2];
  if (*(_BYTE *)(v603 + 324))
    v604 = 8260;
  else
    v604 = 8261;
  v605 = *v527 & 0xFFFFFFFFFFFFFFF8;
  if (!v605 || (*(_BYTE *)v605 & 4) == 0)
  {
    while ((*(_WORD *)(v605 + 44) & 4) != 0)
      v605 = *(_QWORD *)v605 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((unint64_t *)v605 == v527)
  {
LABEL_1177:
    for (m = (_QWORD *)v927[41]; m != v937; m = (_QWORD *)m[1])
    {
      if (m != v525)
      {
        v609 = m[6] & 0xFFFFFFFFFFFFFFF8;
        if (!v609 || (*(_BYTE *)v609 & 4) == 0)
        {
          while ((*(_WORD *)(v609 + 44) & 4) != 0)
            v609 = *(_QWORD *)v609 & 0xFFFFFFFFFFFFFFF8;
        }
        while ((_QWORD *)v609 != m + 6)
        {
          v610 = *(unsigned __int16 **)(v609 + 16);
          if ((*v610 & 0xFFFE) == 0x2044)
          {
            v611 = *(_QWORD *)(v609 + 32);
            if ((*(_QWORD *)(v611 + 16) & 0xFFFFFFFELL) == 2)
              break;
          }
          else
          {
            v611 = *(_QWORD *)(v609 + 32);
          }
          if (sub_1C48788E0(v610, (_DWORD *)v611, *(_BYTE *)(v603 + 400)))
            goto LABEL_1198;
          v609 = *(_QWORD *)v609 & 0xFFFFFFFFFFFFFFF8;
          if (!v609 || (*(_BYTE *)v609 & 4) == 0)
          {
            while ((*(_WORD *)(v609 + 44) & 4) != 0)
              v609 = *(_QWORD *)v609 & 0xFFFFFFFFFFFFFFF8;
          }
        }
      }
    }
LABEL_1197:
    v524 = v960;
    goto LABEL_1219;
  }
  while (1)
  {
    v606 = *(unsigned __int16 **)(v605 + 16);
    if ((*v606 & 0xFFFE) == 0x2044)
    {
      v607 = *(_QWORD *)(v605 + 32);
      if ((*(_QWORD *)(v607 + 16) & 0xFFFFFFFELL) == 2)
        goto LABEL_1197;
    }
    else
    {
      v607 = *(_QWORD *)(v605 + 32);
    }
    if (sub_1C48788E0(v606, (_DWORD *)v607, *(_BYTE *)(v603 + 400)))
      break;
    v605 = *(_QWORD *)v605 & 0xFFFFFFFFFFFFFFF8;
    if (!v605 || (*(_BYTE *)v605 & 4) == 0)
    {
      while ((*(_WORD *)(v605 + 44) & 4) != 0)
        v605 = *(_QWORD *)v605 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((unint64_t *)v605 == v527)
      goto LABEL_1177;
  }
LABEL_1198:
  if (v527 == v526)
  {
    v984 = 0;
    goto LABEL_1203;
  }
  v612 = (void *)v526[7];
  v984 = v612;
  if (!v612)
  {
LABEL_1203:
    v613 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8) + 48 * v604;
    v614 = (llvm::MachineFunction *)v525[4];
    v998 = 0;
    goto LABEL_1204;
  }
  llvm::MetadataTracking::track((uint64_t)&v984, (unsigned __int8 *)v612, 2);
  v613 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8) + 48 * v604;
  v614 = (llvm::MachineFunction *)v525[4];
  v998 = v984;
  if (v984)
    llvm::MetadataTracking::track((uint64_t)&v998, (unsigned __int8 *)v984, 2);
LABEL_1204:
  v615 = *((_QWORD *)v614 + 28);
  if (v615)
    *((_QWORD *)v614 + 28) = *(_QWORD *)v615;
  else
    v615 = sub_1C484358C((uint64_t)v614 + 128, 72, 3);
  v987 = v998;
  if (v998)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
    v998 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v615, v614, v613, (unsigned __int8 **)&v987, 0);
  if (v987)
    llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
  if (v998)
    llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
  v616 = v525[5];
  *(_QWORD *)(v615 + 24) = v616;
  v617 = *(_QWORD *)(v616 + 32);
  v618 = *(unsigned int *)(v615 + 40);
  if ((_DWORD)v618)
  {
    v906 = *(_QWORD *)(v615 + 32);
    v907 = *(_QWORD *)(v617 + 40);
    v908 = 32 * v618;
    do
    {
      if (!*(_BYTE *)v906)
      {
        v909 = *(unsigned int *)(v906 + 4);
        if ((int)v909 >= 0)
          v910 = (uint64_t *)(*(_QWORD *)(v907 + 272) + 8 * v909);
        else
          v910 = (uint64_t *)(*(_QWORD *)(v907 + 24) + 16 * (v909 & 0x7FFFFFFF) + 8);
        v911 = *v910;
        if (*v910)
        {
          v912 = *(_QWORD *)(v911 + 16);
          *(_QWORD *)(v911 + 16) = v906;
          *(_QWORD *)(v906 + 16) = v912;
          if ((*(_BYTE *)(v906 + 3) & 1) != 0)
          {
            *(_QWORD *)(v906 + 24) = v911;
          }
          else
          {
            *(_QWORD *)(v906 + 24) = 0;
            v910 = (uint64_t *)(v912 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v906 + 16) = v906;
          *(_QWORD *)(v906 + 24) = 0;
        }
        *v910 = v906;
      }
      v906 += 32;
      v908 -= 32;
    }
    while (v908);
  }
  v619 = *(_QWORD *)(v617 + 728);
  if (v619)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v619 + 24))(v619, v615);
  v620 = *v526 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v615 = v620 | *(_QWORD *)v615 & 7;
  *(_QWORD *)(v615 + 8) = v526;
  *(_QWORD *)(v620 + 8) = v615;
  *v526 = *v526 & 7 | v615;
  LODWORD(v987) = 1;
  v988 = 0;
  v989 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v615, v614, (const llvm::MachineOperand *)&v987);
  LODWORD(v987) = 1;
  v988 = 0;
  v989 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v615, v614, (const llvm::MachineOperand *)&v987);
  if (v984)
    llvm::MetadataTracking::untrack((uint64_t)&v984, (unsigned __int8 *)v984);
  v524 = *(_BYTE **)(v3 + 344);
LABEL_1219:
  if (v524[375])
  {
    v961 = v524;
    v622 = *(_QWORD *)(v3 + 352);
    v621 = *(_QWORD *)(v3 + 360);
    v987 = &v989;
    v988 = 0x2000000000;
    v623 = *(_QWORD **)(v927[41] + 8);
    if (v623 != v937)
    {
      if (v621)
        v624 = (_QWORD *)(v621 + 8);
      else
        v624 = 0;
      do
      {
        for (n = v623[7]; (_QWORD *)n != v623 + 6; n = *(_QWORD *)(n + 8))
        {
          if ((*(_BYTE *)(*(_QWORD *)(n + 16) + 16) & 2) != 0 && sub_1C4888154((_QWORD *)n))
          {
            v626 = *(_DWORD *)(*(_QWORD *)(n + 32)
                             + 32 * sub_1C4B138B4(**(unsigned __int16 **)(n + 16))
                             + 4);
            v627 = *(unsigned int *)(*v624 + 24 * v626 + 16);
            v628 = (_WORD *)(v624[6] + ((v627 >> 3) & 0x1FFFFFFE));
            v630 = *v628;
            v629 = v628 + 1;
            v631 = v630 + (v627 & 0xF) * v626;
            v632 = v988;
            do
            {
              v633 = *(unsigned __int16 *)(v624[5] + 4 * v631);
              if (v632 >= HIDWORD(v988))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v987, (uint64_t)&v989, v632 + 1, 4);
                v632 = v988;
              }
              *((_DWORD *)v987 + v632) = v633;
              v632 = v988 + 1;
              LODWORD(v988) = v988 + 1;
              v634 = *v629++;
              v631 += v634;
            }
            while (v634);
          }
          if ((*(_BYTE *)n & 4) == 0)
          {
            while ((*(_WORD *)(n + 44) & 8) != 0)
              n = *(_QWORD *)(n + 8);
          }
        }
        v623 = (_QWORD *)v623[1];
      }
      while (v623 != v937);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v635 = (uint64_t *)v987;
    v636 = (char *)v987 + 4 * v988;
    v637 = (char *)v987;
    if ((_DWORD)v988)
    {
      v637 = (char *)v987 - 4;
      v638 = 4 * v988 - 4;
      while (v638)
      {
        v639 = *((_DWORD *)v637 + 1);
        v640 = *((_DWORD *)v637 + 2);
        v637 += 4;
        v638 -= 4;
        if (v639 == v640)
          goto LABEL_1241;
      }
    }
    else
    {
LABEL_1241:
      if (v637 != v636)
      {
        v641 = v637 + 8;
        if (v637 + 8 != v636)
        {
          v642 = *(_DWORD *)v637;
          do
          {
            v643 = v642;
            v642 = *(_DWORD *)v641;
            if (v643 != *(_DWORD *)v641)
            {
              *((_DWORD *)v637 + 1) = v642;
              v637 += 4;
            }
            v641 += 4;
          }
          while (v641 != v636);
        }
        v636 = v637 + 4;
      }
    }
    v644 = v636 - (char *)v635;
    v645 = (unint64_t)(v636 - (char *)v635) >> 2;
    LODWORD(v988) = v645;
    v646 = 4072;
    if (!v961[318])
      v646 = 4073;
    v954 = v646;
    v647 = 4075;
    if (!v961[318])
      v647 = 4077;
    v974 = v647;
    if ((v644 >> 2))
    {
      v965 = (unsigned int *)v635 + v645;
      v971 = *(_QWORD *)(v622 + 8);
      v648 = (_QWORD *)v927[41];
      v649 = (unint64_t *)v648[7];
      do
      {
        v650 = *(unsigned int *)v635;
        v651 = v974;
        if ((v650 - 1) <= 0x1BE)
        {
          if (((1 << (v650 & 7)) & byte_1C6979862[v650 >> 3]) != 0)
            v651 = v954;
          else
            v651 = v974;
        }
        v979 = 0;
        v652 = (llvm::MachineFunction *)v648[4];
        v984 = 0;
        v653 = *((_QWORD *)v652 + 28);
        if (v653)
        {
          *((_QWORD *)v652 + 28) = *(_QWORD *)v653;
          v998 = 0;
        }
        else
        {
          v653 = sub_1C484358C((uint64_t)v652 + 128, 72, 3);
          v998 = v984;
          if (v984)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v984, (unsigned __int8 *)v984, (uint64_t)&v998);
            v984 = 0;
          }
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v653, v652, v971 + 48 * v651, (unsigned __int8 **)&v998, 0);
        if (v998)
          llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
        if (v984)
          llvm::MetadataTracking::untrack((uint64_t)&v984, (unsigned __int8 *)v984);
        v654 = v648[5];
        *(_QWORD *)(v653 + 24) = v654;
        v655 = *(_QWORD *)(v654 + 32);
        v656 = *(unsigned int *)(v653 + 40);
        if ((_DWORD)v656)
        {
          v659 = *(_QWORD *)(v653 + 32);
          v660 = *(_QWORD *)(v655 + 40);
          v661 = 32 * v656;
          do
          {
            if (!*(_BYTE *)v659)
            {
              v662 = *(unsigned int *)(v659 + 4);
              if ((int)v662 >= 0)
                v663 = (uint64_t *)(*(_QWORD *)(v660 + 272) + 8 * v662);
              else
                v663 = (uint64_t *)(*(_QWORD *)(v660 + 24) + 16 * (v662 & 0x7FFFFFFF) + 8);
              v664 = *v663;
              if (*v663)
              {
                v665 = *(_QWORD *)(v664 + 16);
                *(_QWORD *)(v664 + 16) = v659;
                *(_QWORD *)(v659 + 16) = v665;
                if ((*(_BYTE *)(v659 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v659 + 24) = v664;
                }
                else
                {
                  *(_QWORD *)(v659 + 24) = 0;
                  v663 = (uint64_t *)(v665 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v659 + 16) = v659;
                *(_QWORD *)(v659 + 24) = 0;
              }
              *v663 = v659;
            }
            v659 += 32;
            v661 -= 32;
          }
          while (v661);
        }
        v657 = *(_QWORD *)(v655 + 728);
        if (v657)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v657 + 24))(v657, v653);
        v658 = *v649 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v653 = v658 | *(_QWORD *)v653 & 7;
        *(_QWORD *)(v653 + 8) = v649;
        *(_QWORD *)(v658 + 8) = v653;
        *v649 = *v649 & 7 | v653;
        v999 = 0;
        v1000 = 0;
        v1001 = 0;
        HIDWORD(v998) = v650;
        LODWORD(v998) = 0x1000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v653, v652, (const llvm::MachineOperand *)&v998);
        LODWORD(v998) = 1;
        v999 = 0;
        v1000 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v653, v652, (const llvm::MachineOperand *)&v998);
        LODWORD(v998) = 1;
        v999 = 0;
        v1000 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v653, v652, (const llvm::MachineOperand *)&v998);
        if (v979)
          llvm::MetadataTracking::untrack((uint64_t)&v979, v979);
        v635 = (uint64_t *)((char *)v635 + 4);
      }
      while (v635 != (uint64_t *)v965);
      v635 = (uint64_t *)v987;
    }
    if (v635 != &v989)
      free(v635);
    v524 = *(_BYTE **)(v3 + 344);
  }
  if (v524[376])
  {
    v666 = *(_QWORD *)(v3 + 360);
    v955 = *(_QWORD *)(v3 + 352);
    v962 = v524;
    v997 = 0;
    v998 = &v1000;
    v999 = 0x2000000000;
    v987 = &v989;
    v988 = 0x2000000000;
    v995 = &v996;
    v996 = 0;
    v667 = (_QWORD *)v927[5];
    v668 = (_QWORD *)v927[41];
    v669 = (unsigned __int16 *)v668[19];
    v670 = (unsigned __int16 *)v668[20];
    if (v670 != v669)
    {
      if (v666)
        v671 = (_QWORD *)(v666 + 8);
      else
        v671 = 0;
      do
      {
        v672 = (unsigned __int16 *)(v671[6]
                                  + (((unint64_t)*(unsigned int *)(*v671 + 24 * *v669 + 16) >> 3) & 0x1FFFFFFE));
        v674 = *v672;
        v673 = v672 + 1;
        v675 = v674 + (*(_DWORD *)(*v671 + 24 * *v669 + 16) & 0xF) * *v669;
        do
        {
          LODWORD(v984) = (unsigned __int16)v675;
          sub_1C4879438((uint64_t)&v987, (unsigned int *)&v984);
          v676 = *v673++;
          v675 += v676;
        }
        while (v676);
        v669 += 8;
      }
      while (v669 != v670);
      v668 = (_QWORD *)v927[41];
    }
    if (v668 != v937)
    {
      if (v666)
        v677 = (_QWORD *)(v666 + 8);
      else
        v677 = 0;
      do
      {
        v678 = v668 + 6;
        v966 = v668;
        v679 = v668[7];
        v975 = v668 + 6;
        while ((_QWORD *)v679 != v678)
        {
          v680 = *(unsigned int *)(v679 + 40);
          if (!(_DWORD)v680)
            goto LABEL_1332;
          v681 = *(_DWORD **)(v679 + 32);
          v682 = &v681[8 * v680];
          do
          {
            if ((*v681 & 0x10000FF) == 0)
            {
              v683 = v681[1];
              v684 = *(unsigned int *)(*v677 + 24 * v683 + 16);
              v685 = (_WORD *)(v677[6] + ((v684 >> 3) & 0x1FFFFFFE));
              v686 = *v685 + (v684 & 0xF) * v683;
              do
              {
                v687 = v686;
                if (v997)
                {
                  for (ii = v996; ii; ii = (_QWORD *)*ii)
                  {
                    v689 = *((_DWORD *)ii + 7);
                    if (v689 <= v687)
                    {
                      if (v689 >= v687)
                        goto LABEL_1329;
                      ++ii;
                    }
                  }
                }
                else if ((_DWORD)v988)
                {
                  v690 = v987;
                  v691 = 4 * v988;
                  while (*v690 != (_DWORD)v687)
                  {
                    ++v690;
                    v691 -= 4;
                    if (!v691)
                      goto LABEL_1321;
                  }
                  if (v691)
                    goto LABEL_1329;
                }
LABEL_1321:
                v692 = v677[5];
                v693 = 4 * v687;
                v694 = *(unsigned __int16 *)(v692 + v693);
                if (*(_WORD *)(v692 + v693))
                {
                  v695 = *(unsigned __int16 *)(v692 + 4 * v687 + 2);
                  do
                  {
                    v696 = v695;
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v667 + 16)
                                                                                              + 176))(*(_QWORD *)(*v667 + 16))
                                                          + 216)
                                              + 16)
                                  + v694)
                      && ((*(_QWORD *)(v667[44] + (((unint64_t)v694 >> 3) & 0x1FFFFFF8)) >> v694) & 1) == 0)
                    {
                      v697 = v999;
                      if (v999 >= (unint64_t)HIDWORD(v999))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v998, (uint64_t)&v1000, v999 + 1, 4);
                        v697 = v999;
                      }
                      *((_DWORD *)v998 + v697) = v694;
                      LODWORD(v999) = v999 + 1;
                    }
                    v695 = 0;
                    v694 = v696;
                  }
                  while (v696);
                }
LABEL_1329:
                v698 = (unsigned __int16)v685[1];
                ++v685;
                v686 = v698 + v687;
              }
              while (v698);
            }
            v681 += 8;
          }
          while (v681 != v682);
          v3 = (unint64_t)v978;
          if (v679)
          {
LABEL_1332:
            if ((*(_BYTE *)v679 & 4) != 0)
              goto LABEL_1336;
          }
          while ((*(_WORD *)(v679 + 44) & 8) != 0)
            v679 = *(_QWORD *)(v679 + 8);
LABEL_1336:
          v679 = *(_QWORD *)(v679 + 8);
          v678 = v975;
        }
        v668 = (_QWORD *)v966[1];
      }
      while (v668 != v937);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v699 = (char *)v998;
    v700 = (char *)v998 + 4 * v999;
    v701 = (char *)v998;
    v702 = v928;
    if ((_DWORD)v999)
    {
      v701 = (char *)v998 - 4;
      v703 = 4 * v999 - 4;
      while (v703)
      {
        v704 = *((_DWORD *)v701 + 1);
        v705 = *((_DWORD *)v701 + 2);
        v701 += 4;
        v703 -= 4;
        if (v704 == v705)
          goto LABEL_1342;
      }
    }
    else
    {
LABEL_1342:
      if (v701 != v700)
      {
        v706 = v701 + 8;
        if (v701 + 8 != v700)
        {
          v707 = *(_DWORD *)v701;
          do
          {
            v708 = v707;
            v707 = *(_DWORD *)v706;
            if (v708 != *(_DWORD *)v706)
            {
              *((_DWORD *)v701 + 1) = v707;
              v701 += 4;
            }
            v706 += 4;
          }
          while (v706 != v700);
        }
        v700 = v701 + 4;
      }
    }
    v709 = v700 - v699;
    v710 = (unint64_t)(v700 - v699) >> 2;
    LODWORD(v999) = v710;
    v711 = 4072;
    if (!v962[318])
      v711 = 4073;
    v950 = v711;
    v712 = 4075;
    if (!v962[318])
      v712 = 4077;
    v976 = v712;
    if ((v709 >> 2))
    {
      v963 = (unsigned int *)&v699[4 * v710];
      v967 = *(_QWORD *)(v955 + 8);
      v713 = (_QWORD *)v927[41];
      v714 = (unint64_t *)v713[7];
      do
      {
        v715 = *(unsigned int *)v699;
        v716 = v976;
        if ((v715 - 1) <= 0x1BE)
        {
          if (((1 << (v715 & 7)) & byte_1C6979862[v715 >> 3]) != 0)
            v716 = v950;
          else
            v716 = v976;
        }
        v983 = 0;
        v717 = (llvm::MachineFunction *)v713[4];
        v979 = 0;
        v718 = *((_QWORD *)v717 + 28);
        if (v718)
        {
          *((_QWORD *)v717 + 28) = *(_QWORD *)v718;
          v984 = 0;
        }
        else
        {
          v718 = sub_1C484358C((uint64_t)v717 + 128, 72, 3);
          v984 = v979;
          if (v979)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v979, v979, (uint64_t)&v984);
            v979 = 0;
          }
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v718, v717, v967 + 48 * v716, (unsigned __int8 **)&v984, 0);
        if (v984)
          llvm::MetadataTracking::untrack((uint64_t)&v984, (unsigned __int8 *)v984);
        v702 = v928;
        if (v979)
          llvm::MetadataTracking::untrack((uint64_t)&v979, v979);
        v719 = v713[5];
        *(_QWORD *)(v718 + 24) = v719;
        v720 = *(_QWORD *)(v719 + 32);
        v721 = *(unsigned int *)(v718 + 40);
        if ((_DWORD)v721)
        {
          v724 = *(_QWORD *)(v718 + 32);
          v725 = *(_QWORD *)(v720 + 40);
          v726 = 32 * v721;
          do
          {
            if (!*(_BYTE *)v724)
            {
              v727 = *(unsigned int *)(v724 + 4);
              if ((int)v727 >= 0)
                v728 = (uint64_t *)(*(_QWORD *)(v725 + 272) + 8 * v727);
              else
                v728 = (uint64_t *)(*(_QWORD *)(v725 + 24) + 16 * (v727 & 0x7FFFFFFF) + 8);
              v729 = *v728;
              if (*v728)
              {
                v730 = *(_QWORD *)(v729 + 16);
                *(_QWORD *)(v729 + 16) = v724;
                *(_QWORD *)(v724 + 16) = v730;
                if ((*(_BYTE *)(v724 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v724 + 24) = v729;
                }
                else
                {
                  *(_QWORD *)(v724 + 24) = 0;
                  v728 = (uint64_t *)(v730 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v724 + 16) = v724;
                *(_QWORD *)(v724 + 24) = 0;
              }
              *v728 = v724;
            }
            v724 += 32;
            v726 -= 32;
          }
          while (v726);
        }
        v722 = *(_QWORD *)(v720 + 728);
        if (v722)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v722 + 24))(v722, v718);
        v723 = *v714 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v718 = v723 | *(_QWORD *)v718 & 7;
        *(_QWORD *)(v718 + 8) = v714;
        *(_QWORD *)(v723 + 8) = v718;
        *v714 = *v714 & 7 | v718;
        v985 = 0uLL;
        v986 = 0;
        LODWORD(v984) = 0x1000000;
        HIDWORD(v984) = v715;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v718, v717, (const llvm::MachineOperand *)&v984);
        LODWORD(v984) = 1;
        v985 = 0uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v718, v717, (const llvm::MachineOperand *)&v984);
        LODWORD(v984) = 1;
        v985 = 0uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v718, v717, (const llvm::MachineOperand *)&v984);
        if (v983)
          llvm::MetadataTracking::untrack((uint64_t)&v983, v983);
        v699 += 4;
      }
      while (v699 != (char *)v963);
    }
    sub_1C47655E8((uint64_t)&v995, v996);
    if (v987 != &v989)
      free(v987);
    v731 = (_QWORD *)&unk_1C640F000;
    if (v998 != &v1000)
      free(v998);
    v524 = *(_BYTE **)(v3 + 344);
  }
  else
  {
    v702 = v928;
    v731 = &unk_1C640F000;
  }
  if (v524[318])
  {
    v984 = 0;
    *(_QWORD *)&v985 = 0;
    DWORD2(v985) = 0;
    v732 = (_QWORD *)v927[41];
    if (v732 == v937)
    {
      v817 = 0;
    }
    else
    {
      v951 = 0;
      v733 = 0;
      v734 = 0;
      v735 = 0;
      v736 = 0;
      v737 = v731[230];
      do
      {
        v738 = (unsigned int *)(v732 + 6);
        v956 = v732;
        if (v732 + 6 != (_QWORD *)(v732[6] & 0xFFFFFFFFFFFFFFF8))
        {
          v739 = (uint64_t *)v732[7];
          if (v739 && (v740 = *v739, (*v739 & 4) != 0))
          {
            if ((unsigned int *)v739[1] != v738)
              goto LABEL_1406;
          }
          else
          {
            v741 = *((_WORD *)v739 + 22);
            v742 = v732[7];
            if ((v741 & 8) != 0)
            {
              v742 = v732[7];
              do
                v742 = *(_QWORD *)(v742 + 8);
              while ((*(_WORD *)(v742 + 44) & 8) != 0);
            }
            if (*(unsigned int **)(v742 + 8) != v738)
            {
              if (v739)
              {
                v740 = *v739;
LABEL_1406:
                if ((v740 & 4) == 0)
                {
                  v741 = *((_WORD *)v739 + 22);
                  goto LABEL_1408;
                }
              }
              else
              {
LABEL_1408:
                if ((v741 & 8) != 0)
                {
                  do
                    v739 = (uint64_t *)v739[1];
                  while ((*((_WORD *)v739 + 22) & 8) != 0);
                }
              }
              v743 = v739[1];
              do
              {
LABEL_1411:
                v744 = v743;
                v745 = *(_QWORD *)v743 & 0xFFFFFFFFFFFFFFF8;
                if (!v745 || (*(_BYTE *)v745 & 4) == 0)
                {
                  while ((*(_WORD *)(v745 + 44) & 4) != 0)
                    v745 = *(_QWORD *)v745 & 0xFFFFFFFFFFFFFFF8;
                }
                v746 = v743;
                if ((*(_QWORD *)v743 & 4) == 0)
                {
                  v746 = v743;
                  if ((*(_WORD *)(v743 + 44) & 8) != 0)
                  {
                    v746 = v743;
                    do
                      v746 = *(_QWORD *)(v746 + 8);
                    while ((*(_WORD *)(v746 + 44) & 8) != 0);
                  }
                }
                v743 = *(_QWORD *)(v746 + 8);
                if ((unsigned int *)v743 == v738)
                  goto LABEL_1586;
                v747 = *(unsigned __int16 **)(v743 + 16);
                v748 = *v747;
                v750 = (v748 - 9) <= 0x3C
                    && ((1 << (v748 - 9)) & 0x1000000000000605) != 0
                    || v748 == 0;
                v977 = v733;
                v972 = v734;
                v968 = v736;
                v964 = v735;
                if (v750 || (v747[4] & 0x10) != 0)
                  v751 = 1;
                else
                  v751 = v747[8] & 1;
                v735 = v984;
                v734 = HIDWORD(v984);
                v733 = v985;
                v736 = *(_QWORD *)((char *)&v985 + 4);
                if (sub_1C488438C((int *)&v984, v743, *(_QWORD *)(v3 + 360)))
                  v752 = v751 == 0;
                else
                  v752 = 1;
              }
              while (v752);
              v753 = *(_QWORD *)(v3 + 344);
              v754 = **(unsigned __int16 **)(v744 + 16);
              if (v754 > 0x865)
              {
                if (v754 != 4578 && v754 != 4580)
                {
                  if (v754 != 2150)
                    goto LABEL_1411;
                  goto LABEL_1438;
                }
              }
              else if (v754 == 1100)
              {
                if (!*(_BYTE *)(v753 + 338) || *(_BYTE *)(*(_QWORD *)(v744 + 32) + 64) != 7)
                  goto LABEL_1411;
              }
              else
              {
                if (v754 != 2114)
                  goto LABEL_1411;
LABEL_1438:
                if (!*(_BYTE *)(v753 + 338))
                  goto LABEL_1411;
              }
              if ((*(_BYTE *)(*(_QWORD *)(v743 + 16) + 16) & 8) == 0 || v733 <= 0xF && v734 < 0xFD || v733 == 1)
                goto LABEL_1411;
              v756 = 0;
              while (2)
              {
                if (v745 == v956[7])
                  goto LABEL_1411;
                v757 = *(unsigned __int16 **)(v745 + 16);
                v758 = *v757;
                v759 = (v758 - 9) > 0x3C
                    || ((1 << (v758 - 9)) & 0x1000000000000605) == 0;
                v760 = !v759 || v758 == 0;
                if (!v760 && (v757[4] & 0x10) == 0 && (v757[8] & 1) == 0)
                  goto LABEL_1411;
                v761 = (_BYTE *)(*(_QWORD *)v745 & 0xFFFFFFFFFFFFFFF8);
                if (v761)
                {
                  v762 = *(_QWORD *)v745 & 0xFFFFFFFFFFFFFFF8;
                  if ((*v761 & 4) != 0)
                    goto LABEL_1469;
                }
                else
                {
                  v762 = 0;
                }
                while ((*(_WORD *)(v762 + 44) & 4) != 0)
                  v762 = *(_QWORD *)v762 & 0xFFFFFFFFFFFFFFF8;
LABEL_1469:
                if ((v757[8] & 8) != 0)
                {
                  v763 = **(unsigned __int16 **)(v762 + 16);
                  if (v763 > 0x865)
                  {
                    if (v763 == 4578 || v763 == 4580)
                      goto LABEL_1470;
                    if (v763 != 2150)
                      goto LABEL_1491;
                  }
                  else
                  {
                    if (v763 == 1100)
                    {
                      if (!*(_BYTE *)(v753 + 338) || *(_BYTE *)(*(_QWORD *)(v762 + 32) + 64) != 7)
                      {
LABEL_1491:
                        v765 = v745;
                        if ((*(_QWORD *)v745 & 4) == 0)
                        {
                          v765 = v745;
                          if ((*(_WORD *)(v745 + 44) & 8) != 0)
                          {
                            v765 = v745;
                            do
                              v765 = *(_QWORD *)(v765 + 8);
                            while ((*(_WORD *)(v765 + 44) & 8) != 0);
                          }
                        }
                        v766 = *(unsigned int **)(v765 + 8);
                        v987 = &v989;
                        v988 = v737;
                        v993 = 0;
                        v994 = 0;
                        v992 = &v993;
                        sub_1C487954C(v3, *(unsigned int **)(v745 + 32), *(_DWORD *)(v745 + 40), (uint64_t)&v987, 1, 1);
                        if (v766 != v738)
                        {
                          v767 = 0;
                          v768 = v766;
                          while (1)
                          {
                            v769 = (unsigned __int16 *)*((_QWORD *)v768 + 2);
                            v770 = *v769;
                            v772 = (v770 - 9) <= 0x3C
                                && ((1 << (v770 - 9)) & 0x1000000000000605) != 0
                                || v770 == 0;
                            v773 = (unsigned int **)v768;
                            if (!v772 && (v769[4] & 0x10) == 0 && (v769[8] & 1) == 0)
                              goto LABEL_1567;
                            v774 = (unsigned int *)*((_QWORD *)v768 + 4);
                            if ((*v774 & 0x10000FF) != 0x1000000)
                              goto LABEL_1567;
                            v935 = (uint64_t)(v768 + 8);
                            v938 = v767;
                            v940 = (llvm::MachineInstr *)*((_QWORD *)v768 + 4);
                            sub_1C487954C(v3, v774, v768[10], (uint64_t)&v987, 0, 1);
                            v775 = *(_QWORD **)(v3 + 360);
                            v776 = v775[1];
                            v777 = *((_DWORD *)v940 + 1);
                            v778 = v775[7];
                            v779 = *(unsigned int *)(v776 + 24 * v777 + 4);
                            if (*(_WORD *)(v778 + 2 * v779))
                            {
                              v780 = *(unsigned __int16 *)(v778 + 2 * v779) + v777;
                              v781 = (_WORD *)(v775[11] + 2 * *(unsigned int *)(v776 + 24 * v777 + 12));
                              v782 = (unsigned __int16 *)(v778 + 2 * v779 + 2);
                              while (*v781 != 1)
                              {
                                v783 = *v782++;
                                v780 += v783;
                                ++v781;
                                if (!v783)
                                  goto LABEL_1511;
                              }
                              v784 = (unsigned __int16)v780;
                              if ((_WORD)v780)
                                v777 = (unsigned __int16)v780;
                              else
                                v784 = *((_DWORD *)v940 + 1);
                            }
                            else
                            {
LABEL_1511:
                              v784 = *((_DWORD *)v940 + 1);
                            }
                            v785 = v775 ? v775 + 1 : 0;
                            v786 = *(unsigned int *)(*v785 + 24 * v777 + 16);
                            v787 = (unsigned __int16)(*(_WORD *)(v785[6] + ((v786 >> 3) & 0x1FFFFFFE))
                                                    + (v786 & 0xF) * v784);
                            if (v994)
                              break;
                            if (!(_DWORD)v988)
                              goto LABEL_1539;
                            v790 = v987;
                            v791 = 4 * v988;
                            while (*v790 != v787)
                            {
                              ++v790;
                              v791 -= 4;
                              if (!v791)
                                goto LABEL_1539;
                            }
                            if (!v791)
                              goto LABEL_1539;
LABEL_1531:
                            sub_1C487954C(v3, v773[4], *((_DWORD *)v773 + 10), (uint64_t)&v987, 1, 0);
                            if ((*(_BYTE *)v773 & 4) != 0)
                            {
                              jj = v938;
                            }
                            else
                            {
                              for (jj = v938; (*((_WORD *)v773 + 22) & 8) != 0; v773 = (unsigned int **)v773[1])
                                ;
                            }
                            if (jj <= 4)
                            {
                              v768 = v773[1];
                              v767 = jj + 1;
                              if (v768 != v738)
                                continue;
                            }
                            goto LABEL_1567;
                          }
                          for (kk = v993; kk; kk = (_QWORD *)*kk)
                          {
                            v789 = *((_DWORD *)kk + 7);
                            if (v789 <= v787)
                            {
                              if (v789 >= v787)
                                goto LABEL_1531;
                              ++kk;
                            }
                          }
LABEL_1539:
                          if (v784 == -1)
                            goto LABEL_1567;
                          v793 = *(_QWORD *)(v3 + 344);
                          v794 = *(unsigned __int16 *)v773[2];
                          v932 = v784;
                          if (v794 > 0x865)
                          {
                            if (v794 == 4578 || v794 == 4580)
                              goto LABEL_1585;
                            if (v794 != 2150)
                              goto LABEL_1551;
LABEL_1543:
                            if (*(_BYTE *)(v793 + 338))
                              goto LABEL_1585;
LABEL_1551:
                            v796 = v744 + 32;
                          }
                          else
                          {
                            if (v794 != 1100)
                            {
                              if (v794 == 2114)
                                goto LABEL_1543;
                              goto LABEL_1551;
                            }
                            if (!*(_BYTE *)(v793 + 338) || *(_DWORD *)(*(_QWORD *)v935 + 64) != 7)
                              goto LABEL_1551;
LABEL_1585:
                            v796 = v935;
                          }
                          v936 = *(_DWORD *)(*(_QWORD *)v796 + 68);
                          v797 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
                          v798 = (llvm::MachineFunction *)v956[4];
                          v799 = *(unsigned __int8 **)(v743 + 56);
                          v979 = v799;
                          v939 = v798;
                          if (v799)
                          {
                            llvm::MetadataTracking::track((uint64_t)&v979, v799, 2);
                            v798 = v939;
                          }
                          v800 = (llvm::MachineInstr *)*((_QWORD *)v798 + 28);
                          if (v800)
                          {
                            *((_QWORD *)v798 + 28) = *(_QWORD *)v800;
                          }
                          else
                          {
                            v801 = sub_1C484358C((uint64_t)v798 + 128, 72, 3);
                            v798 = v939;
                            v800 = (llvm::MachineInstr *)v801;
                          }
                          v998 = v979;
                          v941 = v800;
                          if (v979)
                          {
                            llvm::MetadataTracking::retrack((uint64_t)&v979, v979, (uint64_t)&v998);
                            v798 = v939;
                            v800 = v941;
                            v979 = 0;
                          }
                          llvm::MachineInstr::MachineInstr(v800, v798, v797 + 219840, (unsigned __int8 **)&v998, 0);
                          if (v998)
                            llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
                          v802 = v932;
                          if (v979)
                          {
                            llvm::MetadataTracking::untrack((uint64_t)&v979, v979);
                            v802 = v932;
                          }
                          v803 = v956[5];
                          v804 = (unint64_t)v941;
                          *((_QWORD *)v941 + 3) = v803;
                          v805 = *(_QWORD *)(v803 + 32);
                          v806 = *((unsigned int *)v941 + 10);
                          if ((_DWORD)v806)
                          {
                            v810 = *((_QWORD *)v941 + 4);
                            v811 = *(_QWORD *)(v805 + 40);
                            v812 = 32 * v806;
                            do
                            {
                              if (!*(_BYTE *)v810)
                              {
                                v813 = *(unsigned int *)(v810 + 4);
                                if ((int)v813 >= 0)
                                  v814 = (uint64_t *)(*(_QWORD *)(v811 + 272) + 8 * v813);
                                else
                                  v814 = (uint64_t *)(*(_QWORD *)(v811 + 24) + 16 * (v813 & 0x7FFFFFFF) + 8);
                                v815 = *v814;
                                if (*v814)
                                {
                                  v816 = *(_QWORD *)(v815 + 16);
                                  *(_QWORD *)(v815 + 16) = v810;
                                  *(_QWORD *)(v810 + 16) = v816;
                                  if ((*(_BYTE *)(v810 + 3) & 1) != 0)
                                  {
                                    *(_QWORD *)(v810 + 24) = v815;
                                  }
                                  else
                                  {
                                    *(_QWORD *)(v810 + 24) = 0;
                                    v814 = (uint64_t *)(v816 + 24);
                                  }
                                }
                                else
                                {
                                  *(_QWORD *)(v810 + 16) = v810;
                                  *(_QWORD *)(v810 + 24) = 0;
                                }
                                *v814 = v810;
                              }
                              v810 += 32;
                              v812 -= 32;
                            }
                            while (v812);
                          }
                          v807 = *(_QWORD *)(v805 + 728);
                          if (v807)
                          {
                            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(_QWORD *)v807 + 24))(v807, v941);
                            v804 = (unint64_t)v941;
                          }
                          v808 = *(_QWORD *)v745 & 0xFFFFFFFFFFFFFFF8;
                          *(_QWORD *)v804 = v808 | *(_QWORD *)v804 & 7;
                          *(_QWORD *)(v804 + 8) = v745;
                          *(_QWORD *)(v808 + 8) = v804;
                          *(_QWORD *)v745 = *(_QWORD *)v745 & 7 | v804;
                          v999 = 0;
                          v1000 = 0;
                          v1001 = 0;
                          HIDWORD(v998) = v802;
                          LODWORD(v998) = 0x1000000;
                          v809 = (llvm::MachineInstr *)v804;
                          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v804, v939, (const llvm::MachineOperand *)&v998);
                          v951 = 1;
                          LODWORD(v998) = 1;
                          v999 = 0;
                          v1000 = 0;
                          llvm::MachineInstr::addOperand(v809, v939, (const llvm::MachineOperand *)&v998);
                          v999 = 0;
                          LODWORD(v1000) = 64;
                          LODWORD(v1001) = 0;
                          HIDWORD(v998) = v936;
                          LODWORD(v998) = 263;
                          llvm::MachineInstr::addOperand(v809, v939, (const llvm::MachineOperand *)&v998);
                          **((_DWORD **)v809 + 4) |= 0x4000000u;
                          v984 = (void *)__PAIR64__(v972, v964);
                          LODWORD(v985) = v977;
                          *(_QWORD *)((char *)&v985 + 4) = v968;
                          sub_1C488438C((int *)&v984, (uint64_t)v809, *(_QWORD *)(v3 + 360));
                          sub_1C488438C((int *)&v984, v744, *(_QWORD *)(v3 + 360));
                          sub_1C488438C((int *)&v984, v743, *(_QWORD *)(v3 + 360));
                        }
LABEL_1567:
                        sub_1C47655E8((uint64_t)&v992, v993);
                        if (v987 != &v989)
                          free(v987);
                        goto LABEL_1411;
                      }
                      goto LABEL_1470;
                    }
                    if (v763 != 2114)
                      goto LABEL_1491;
                  }
                  if (!*(_BYTE *)(v753 + 338))
                    goto LABEL_1491;
                }
LABEL_1470:
                if (v761)
                {
                  v745 = *(_QWORD *)v745 & 0xFFFFFFFFFFFFFFF8;
                  if ((*v761 & 4) != 0)
                    goto LABEL_1487;
                }
                else
                {
                  v745 = 0;
                }
                while ((*(_WORD *)(v745 + 44) & 4) != 0)
                  v745 = *(_QWORD *)v745 & 0xFFFFFFFFFFFFFFF8;
LABEL_1487:
                if (++v756 == v733 - 1)
                  goto LABEL_1411;
                continue;
              }
            }
          }
        }
LABEL_1586:
        v732 = (_QWORD *)v956[1];
        v702 = v928;
      }
      while (v732 != v937);
      v524 = *(_BYTE **)(v3 + 344);
      v817 = v951;
    }
    LOBYTE(v930) = v930 | v817;
  }
  if (v524[332])
  {
    v818 = (_QWORD *)v927[41];
    if (v818 != v937)
    {
      v819 = 0;
      do
      {
        v820 = v818 + 6;
        v821 = v818[7];
        if ((_QWORD *)v821 != v818 + 6)
        {
          v822 = v818 + 5;
          do
          {
            if (**(unsigned __int16 **)(v821 + 16) - 8267 < 0xA)
              ++v819;
            else
              v819 = 0;
            if (v819 >= 0x21)
            {
              v984 = 0;
              v823 = *(_QWORD *)(v978[44] + 8) + 48 * v702;
              if ((*(_WORD *)(v821 + 44) & 4) != 0)
              {
                v826 = (llvm::MachineFunction *)v818[4];
                v998 = 0;
                v827 = (llvm::MachineInstr *)*((_QWORD *)v826 + 28);
                if (v827)
                {
                  *((_QWORD *)v826 + 28) = *(_QWORD *)v827;
                  v987 = 0;
                }
                else
                {
                  v827 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v826 + 128, 72, 3);
                  v987 = v998;
                  if (v998)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
                    v998 = 0;
                  }
                }
                llvm::MachineInstr::MachineInstr(v827, v826, v823, (unsigned __int8 **)&v987, 0);
                if (v987)
                  llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
                if (v998)
                  llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
                if (v820 != (_QWORD *)v821 && (*(_WORD *)(v821 + 44) & 4) != 0)
                  *((_WORD *)v827 + 22) |= 0xCu;
                sub_1C512CA10(v818 + 5, (uint64_t *)v821, (uint64_t)v827);
              }
              else
              {
                v824 = (llvm::MachineFunction *)v818[4];
                v998 = 0;
                v825 = *((_QWORD *)v824 + 28);
                if (v825)
                {
                  *((_QWORD *)v824 + 28) = *(_QWORD *)v825;
                  v987 = 0;
                }
                else
                {
                  v825 = sub_1C484358C((uint64_t)v824 + 128, 72, 3);
                  v987 = v998;
                  if (v998)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
                    v998 = 0;
                  }
                }
                llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v825, v824, v823, (unsigned __int8 **)&v987, 0);
                if (v987)
                  llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
                if (v998)
                  llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
                v828 = *v822;
                *(_QWORD *)(v825 + 24) = *v822;
                v829 = *(_QWORD *)(v828 + 32);
                v830 = *(unsigned int *)(v825 + 40);
                if ((_DWORD)v830)
                {
                  v833 = *(_QWORD *)(v825 + 32);
                  v834 = *(_QWORD *)(v829 + 40);
                  v835 = 32 * v830;
                  do
                  {
                    if (!*(_BYTE *)v833)
                    {
                      v836 = *(unsigned int *)(v833 + 4);
                      if ((int)v836 >= 0)
                        v837 = (uint64_t *)(*(_QWORD *)(v834 + 272) + 8 * v836);
                      else
                        v837 = (uint64_t *)(*(_QWORD *)(v834 + 24) + 16 * (v836 & 0x7FFFFFFF) + 8);
                      v838 = *v837;
                      if (*v837)
                      {
                        v839 = *(_QWORD *)(v838 + 16);
                        *(_QWORD *)(v838 + 16) = v833;
                        *(_QWORD *)(v833 + 16) = v839;
                        if ((*(_BYTE *)(v833 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v833 + 24) = v838;
                        }
                        else
                        {
                          *(_QWORD *)(v833 + 24) = 0;
                          v837 = (uint64_t *)(v839 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v833 + 16) = v833;
                        *(_QWORD *)(v833 + 24) = 0;
                      }
                      *v837 = v833;
                    }
                    v833 += 32;
                    v835 -= 32;
                  }
                  while (v835);
                }
                v831 = *(_QWORD *)(v829 + 728);
                if (v831)
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v831 + 24))(v831, v825);
                v832 = *(_QWORD *)v821 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v825 = v832 | *(_QWORD *)v825 & 7;
                *(_QWORD *)(v825 + 8) = v821;
                *(_QWORD *)(v832 + 8) = v825;
                *(_QWORD *)v821 = *(_QWORD *)v821 & 7 | v825;
              }
              if (v984)
                llvm::MetadataTracking::untrack((uint64_t)&v984, (unsigned __int8 *)v984);
              v819 = 1;
            }
            if ((*(_BYTE *)v821 & 4) == 0)
            {
              while ((*(_WORD *)(v821 + 44) & 8) != 0)
                v821 = *(_QWORD *)(v821 + 8);
            }
            v821 = *(_QWORD *)(v821 + 8);
          }
          while ((_QWORD *)v821 != v820);
        }
        v818 = (_QWORD *)v818[1];
      }
      while (v818 != v937);
      v3 = (unint64_t)v978;
      v524 = (_BYTE *)v978[43];
    }
  }
  if (v926 != 101 || !v524[334])
    goto LABEL_1704;
  v840 = (_QWORD *)v927[41];
  v841 = (unint64_t *)v840[7];
  if (v841 != v840 + 6)
  {
    v842 = 0;
    v843 = 0;
    v844 = v840[7];
    while (1)
    {
      v845 = *(_WORD *)(v844 + 44);
      v846 = *(_QWORD *)(v844 + 16);
      v847 = *(_QWORD *)(v846 + 8);
      if ((v845 & 0xC) != 0 && (v845 & 4) == 0)
      {
        v851 = v844;
        if ((v847 & 0x80) != 0)
        {
LABEL_1667:
          if ((v842 & 1) != 0)
            goto LABEL_1704;
          if (v840 != v937)
          {
            v850 = 1;
            goto LABEL_1675;
          }
          goto LABEL_1688;
        }
        while ((*(_WORD *)(v851 + 44) & 8) != 0)
        {
          v851 = *(_QWORD *)(v851 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v851 + 16) + 8) & 0x80) != 0)
            goto LABEL_1667;
        }
      }
      else if ((v847 & 0x80) != 0)
      {
        v850 = 1;
LABEL_1673:
        if ((v842 & 1) != 0)
          goto LABEL_1704;
        if (v840 == v937)
        {
          if (!v850)
            goto LABEL_1704;
        }
        else
        {
LABEL_1675:
          v852 = (_QWORD *)v927[41];
          while (1)
          {
            for (mm = v852[7]; (_QWORD *)mm != v852 + 6; mm = *(_QWORD *)(mm + 8))
            {
              v854 = *(_QWORD *)(*(_QWORD *)(mm + 16) + 16);
              if ((v854 & 0x10) != 0 || (v854 & 0x4000000) != 0)
                goto LABEL_1688;
              if ((*(_BYTE *)mm & 4) == 0)
              {
                while ((*(_WORD *)(mm + 44) & 8) != 0)
                  mm = *(_QWORD *)(mm + 8);
              }
              v850 |= (v854 >> 26) & 1;
            }
            if ((v850 & 1) != 0)
              break;
            v850 = 0;
            v852 = (_QWORD *)v852[1];
            if (v852 == v937)
              goto LABEL_1704;
          }
        }
LABEL_1688:
        if (v524[320] || v524[321] || v524[322])
        {
          v984 = 0;
          v855 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8) + 186096;
          v856 = (llvm::MachineFunction *)v840[4];
          v998 = 0;
          v857 = *((_QWORD *)v856 + 28);
          if (v857)
          {
            *((_QWORD *)v856 + 28) = *(_QWORD *)v857;
            v987 = 0;
          }
          else
          {
            v857 = sub_1C484358C((uint64_t)v856 + 128, 72, 3);
            v987 = v998;
            if (v998)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
              v998 = 0;
            }
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v857, v856, v855, (unsigned __int8 **)&v987, 0);
          if (v987)
            llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
          if (v998)
            llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
          v858 = v840[5];
          *(_QWORD *)(v857 + 24) = v858;
          v859 = *(_QWORD *)(v858 + 32);
          v860 = *(unsigned int *)(v857 + 40);
          if ((_DWORD)v860)
          {
            v899 = *(_QWORD *)(v857 + 32);
            v900 = *(_QWORD *)(v859 + 40);
            v901 = 32 * v860;
            do
            {
              if (!*(_BYTE *)v899)
              {
                v902 = *(unsigned int *)(v899 + 4);
                if ((int)v902 >= 0)
                  v903 = (uint64_t *)(*(_QWORD *)(v900 + 272) + 8 * v902);
                else
                  v903 = (uint64_t *)(*(_QWORD *)(v900 + 24) + 16 * (v902 & 0x7FFFFFFF) + 8);
                v904 = *v903;
                if (*v903)
                {
                  v905 = *(_QWORD *)(v904 + 16);
                  *(_QWORD *)(v904 + 16) = v899;
                  *(_QWORD *)(v899 + 16) = v905;
                  if ((*(_BYTE *)(v899 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v899 + 24) = v904;
                  }
                  else
                  {
                    *(_QWORD *)(v899 + 24) = 0;
                    v903 = (uint64_t *)(v905 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v899 + 16) = v899;
                  *(_QWORD *)(v899 + 24) = 0;
                }
                *v903 = v899;
              }
              v899 += 32;
              v901 -= 32;
            }
            while (v901);
          }
        }
        else
        {
          v984 = 0;
          v898 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8) + 183792;
          v856 = (llvm::MachineFunction *)v840[4];
          v998 = 0;
          v857 = *((_QWORD *)v856 + 28);
          if (v857)
          {
            *((_QWORD *)v856 + 28) = *(_QWORD *)v857;
            v987 = 0;
          }
          else
          {
            v857 = sub_1C484358C((uint64_t)v856 + 128, 72, 3);
            v987 = v998;
            if (v998)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
              v998 = 0;
            }
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v857, v856, v898, (unsigned __int8 **)&v987, 0);
          if (v987)
            llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
          if (v998)
            llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
          v917 = v840[5];
          *(_QWORD *)(v857 + 24) = v917;
          v859 = *(_QWORD *)(v917 + 32);
          v918 = *(unsigned int *)(v857 + 40);
          if ((_DWORD)v918)
          {
            v919 = *(_QWORD *)(v857 + 32);
            v920 = *(_QWORD *)(v859 + 40);
            v921 = 32 * v918;
            do
            {
              if (!*(_BYTE *)v919)
              {
                v922 = *(unsigned int *)(v919 + 4);
                if ((int)v922 >= 0)
                  v923 = (uint64_t *)(*(_QWORD *)(v920 + 272) + 8 * v922);
                else
                  v923 = (uint64_t *)(*(_QWORD *)(v920 + 24) + 16 * (v922 & 0x7FFFFFFF) + 8);
                v924 = *v923;
                if (*v923)
                {
                  v925 = *(_QWORD *)(v924 + 16);
                  *(_QWORD *)(v924 + 16) = v919;
                  *(_QWORD *)(v919 + 16) = v925;
                  if ((*(_BYTE *)(v919 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v919 + 24) = v924;
                  }
                  else
                  {
                    *(_QWORD *)(v919 + 24) = 0;
                    v923 = (uint64_t *)(v925 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v919 + 16) = v919;
                  *(_QWORD *)(v919 + 24) = 0;
                }
                *v923 = v919;
              }
              v919 += 32;
              v921 -= 32;
            }
            while (v921);
          }
        }
        v861 = *(_QWORD *)(v859 + 728);
        if (v861)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v861 + 24))(v861, v857);
        v862 = *v841 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v857 = v862 | *(_QWORD *)v857 & 7;
        *(_QWORD *)(v857 + 8) = v841;
        *(_QWORD *)(v862 + 8) = v857;
        *v841 = *v841 & 7 | v857;
        v988 = 0;
        v989 = 0;
        v990 = 0;
        v987 = (void *)0x13A01000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v857, v856, (const llvm::MachineOperand *)&v987);
        LODWORD(v987) = 1;
        v988 = 0;
        v989 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v857, v856, (const llvm::MachineOperand *)&v987);
        v988 = 0;
        LODWORD(v989) = 68;
        LODWORD(v990) = 0;
        v987 = (void *)1031;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v857, v856, (const llvm::MachineOperand *)&v987);
        if (v984)
          llvm::MetadataTracking::untrack((uint64_t)&v984, (unsigned __int8 *)v984);
        goto LABEL_1704;
      }
      v849 = *(_QWORD *)(v846 + 16);
      if ((v849 & 0x10) != 0 || (v849 & 0x4000000) != 0)
        goto LABEL_1704;
      if ((v845 & 8) != 0 && (*(_QWORD *)v844 & 4) == 0)
      {
        do
          v844 = *(_QWORD *)(v844 + 8);
        while ((*(_WORD *)(v844 + 44) & 8) != 0);
      }
      v850 = 0;
      v842 |= (v849 >> 26) & 1;
      if (v843 <= 0x16)
      {
        ++v843;
        v844 = *(_QWORD *)(v844 + 8);
        if ((_QWORD *)v844 != v840 + 6)
          continue;
      }
      goto LABEL_1673;
    }
  }
  if (v840 != v937)
  {
    v850 = 0;
    goto LABEL_1675;
  }
LABEL_1704:
  if (*(_BYTE *)(*(_QWORD *)(v3 + 344) + 358))
  {
    for (nn = (_QWORD *)v927[41]; nn != v937; nn = (_QWORD *)nn[1])
    {
      if (nn + 6 != (_QWORD *)(nn[6] & 0xFFFFFFFFFFFFFFF8))
      {
        for (i1 = nn[7]; (_QWORD *)i1 != nn + 6; i1 = *(_QWORD *)(i1 + 8))
        {
          if (sub_1C613A290(i1, v978[45]))
          {
            v984 = 0;
            v865 = *(_QWORD *)(v978[44] + 8);
            v866 = (llvm::MachineFunction *)nn[4];
            v998 = 0;
            v867 = *((_QWORD *)v866 + 28);
            if (v867)
            {
              *((_QWORD *)v866 + 28) = *(_QWORD *)v867;
              v987 = 0;
            }
            else
            {
              v867 = sub_1C484358C((uint64_t)v866 + 128, 72, 3);
              v987 = v998;
              if (v998)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
                v998 = 0;
              }
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v867, v866, v865 + 224448, (unsigned __int8 **)&v987, 0);
            if (v987)
              llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
            if (v998)
              llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
            v868 = nn[5];
            *(_QWORD *)(v867 + 24) = v868;
            v869 = *(_QWORD *)(v868 + 32);
            v870 = *(unsigned int *)(v867 + 40);
            if ((_DWORD)v870)
            {
              v883 = *(_QWORD *)(v867 + 32);
              v884 = *(_QWORD *)(v869 + 40);
              v885 = 32 * v870;
              do
              {
                if (!*(_BYTE *)v883)
                {
                  v886 = *(unsigned int *)(v883 + 4);
                  if ((int)v886 >= 0)
                    v887 = (uint64_t *)(*(_QWORD *)(v884 + 272) + 8 * v886);
                  else
                    v887 = (uint64_t *)(*(_QWORD *)(v884 + 24) + 16 * (v886 & 0x7FFFFFFF) + 8);
                  v888 = *v887;
                  if (*v887)
                  {
                    v889 = *(_QWORD *)(v888 + 16);
                    *(_QWORD *)(v888 + 16) = v883;
                    *(_QWORD *)(v883 + 16) = v889;
                    if ((*(_BYTE *)(v883 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v883 + 24) = v888;
                    }
                    else
                    {
                      *(_QWORD *)(v883 + 24) = 0;
                      v887 = (uint64_t *)(v889 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v883 + 16) = v883;
                    *(_QWORD *)(v883 + 24) = 0;
                  }
                  *v887 = v883;
                }
                v883 += 32;
                v885 -= 32;
              }
              while (v885);
            }
            v871 = *(_QWORD *)(v869 + 728);
            if (v871)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v871 + 24))(v871, v867);
            v872 = *(_QWORD *)i1 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v867 = v872 | *(_QWORD *)v867 & 7;
            *(_QWORD *)(v867 + 8) = i1;
            *(_QWORD *)(v872 + 8) = v867;
            *(_QWORD *)i1 = *(_QWORD *)i1 & 7 | v867;
            if (v984)
              llvm::MetadataTracking::untrack((uint64_t)&v984, (unsigned __int8 *)v984);
            v873 = i1;
            if ((*(_BYTE *)i1 & 4) == 0)
            {
              v873 = i1;
              if ((*(_WORD *)(i1 + 44) & 8) != 0)
              {
                v873 = i1;
                do
                  v873 = *(_QWORD *)(v873 + 8);
                while ((*(_WORD *)(v873 + 44) & 8) != 0);
              }
            }
            v874 = *(unint64_t **)(v873 + 8);
            v984 = 0;
            v875 = *(_QWORD *)(v978[44] + 8);
            v876 = (llvm::MachineFunction *)nn[4];
            v998 = 0;
            v877 = *((_QWORD *)v876 + 28);
            if (v877)
            {
              *((_QWORD *)v876 + 28) = *(_QWORD *)v877;
              v987 = 0;
            }
            else
            {
              v877 = sub_1C484358C((uint64_t)v876 + 128, 72, 3);
              v987 = v998;
              if (v998)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v998, (unsigned __int8 *)v998, (uint64_t)&v987);
                v998 = 0;
              }
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v877, v876, v875 + 35616, (unsigned __int8 **)&v987, 0);
            if (v987)
              llvm::MetadataTracking::untrack((uint64_t)&v987, (unsigned __int8 *)v987);
            if (v998)
              llvm::MetadataTracking::untrack((uint64_t)&v998, (unsigned __int8 *)v998);
            v878 = nn[5];
            *(_QWORD *)(v877 + 24) = v878;
            v879 = *(_QWORD *)(v878 + 32);
            v880 = *(unsigned int *)(v877 + 40);
            if ((_DWORD)v880)
            {
              v890 = *(_QWORD *)(v877 + 32);
              v891 = *(_QWORD *)(v879 + 40);
              v892 = 32 * v880;
              do
              {
                if (!*(_BYTE *)v890)
                {
                  v893 = *(unsigned int *)(v890 + 4);
                  if ((int)v893 >= 0)
                    v894 = (uint64_t *)(*(_QWORD *)(v891 + 272) + 8 * v893);
                  else
                    v894 = (uint64_t *)(*(_QWORD *)(v891 + 24) + 16 * (v893 & 0x7FFFFFFF) + 8);
                  v895 = *v894;
                  if (*v894)
                  {
                    v896 = *(_QWORD *)(v895 + 16);
                    *(_QWORD *)(v895 + 16) = v890;
                    *(_QWORD *)(v890 + 16) = v896;
                    if ((*(_BYTE *)(v890 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v890 + 24) = v895;
                    }
                    else
                    {
                      *(_QWORD *)(v890 + 24) = 0;
                      v894 = (uint64_t *)(v896 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v890 + 16) = v890;
                    *(_QWORD *)(v890 + 24) = 0;
                  }
                  *v894 = v890;
                }
                v890 += 32;
                v892 -= 32;
              }
              while (v892);
            }
            v881 = *(_QWORD *)(v879 + 728);
            if (v881)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v881 + 24))(v881, v877);
            v882 = *v874 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v877 = v882 | *(_QWORD *)v877 & 7;
            *(_QWORD *)(v877 + 8) = v874;
            *(_QWORD *)(v882 + 8) = v877;
            *v874 = *v874 & 7 | v877;
            v988 = 0;
            v989 = 0;
            v990 = 0;
            v987 = (void *)0x13C01000000;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v877, v876, (const llvm::MachineOperand *)&v987);
            LODWORD(v987) = 1;
            v988 = 0;
            v989 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v877, v876, (const llvm::MachineOperand *)&v987);
            v988 = 0;
            v987 = (void *)0x13C00000000;
            v989 = 0;
            v990 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v877, v876, (const llvm::MachineOperand *)&v987);
            LODWORD(v987) = 1;
            v988 = 0;
            v989 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v877, v876, (const llvm::MachineOperand *)&v987);
            if (v984)
              llvm::MetadataTracking::untrack((uint64_t)&v984, (unsigned __int8 *)v984);
          }
          if ((*(_BYTE *)i1 & 4) == 0)
          {
            while ((*(_WORD *)(i1 + 44) & 8) != 0)
              i1 = *(_QWORD *)(i1 + 8);
          }
        }
      }
    }
  }
  return v930 & 1;
}

uint64_t sub_1C4878804(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  if ((v2 & 0x10) != 0 && *(_BYTE *)(*(_QWORD *)(result + 344) + 335))
  {
    do
    {
      v3 = a2;
      v4 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v4 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v4 = a2;
          do
            v4 = *(_QWORD *)(v4 + 8);
          while ((*(_WORD *)(v4 + 44) & 8) != 0);
        }
      }
      v5 = *(_QWORD *)(a2 + 24);
      a2 = *(_QWORD *)(v4 + 8);
      if (a2 == v5 + 48)
        a2 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 56);
    }
    while ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + 16) & 0x10) != 0);
  }
  else
  {
    v3 = a2;
  }
  if ((v2 & 0x4000012) != 0)
  {
    result = sub_1C4B138B4(**(unsigned __int16 **)(v3 + 16));
    v6 = (_QWORD *)(*(_QWORD *)(v3 + 32) + 32 * result + 16);
    v7 = 0x4000000000000000;
  }
  else
  {
    v6 = (_QWORD *)(*(_QWORD *)(v3 + 32) + 48);
    v7 = 2048;
  }
  *v6 |= v7;
  return result;
}

BOOL sub_1C48788E0(unsigned __int16 *a1, _DWORD *a2, char a3)
{
  uint64_t v3;
  _BOOL8 v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_QWORD *)a1 + 2) & 0x2000C00;
  v5 = (*((_QWORD *)a1 + 2) & 0xE00) == 1536;
  v4 = v5;
  v5 = !v5 && v3 == 33555456;
  if (!v5)
  {
LABEL_10:
    if (!v4 || (a3 & 1) != 0)
      return v4;
    goto LABEL_12;
  }
  if (!*a2)
  {
    v4 = (*a2 & 0x1000000) == 0;
    goto LABEL_10;
  }
  if ((a3 & 1) != 0)
    return 1;
LABEL_12:
  v6 = *(_QWORD *)&a2[8 * sub_1C4B138B4(*a1) + 4];
  v7 = 2048;
  if (v3 != 33555456)
    v7 = 0x100000;
  return (v6 & v7) != 0;
}

uint64_t sub_1C4878988(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  char v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  BOOL v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 < *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return sub_1C4878D20(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return sub_1C4879078(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return sub_1C48790F8(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 > 95)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return (uint64_t)sub_1C487919C(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            sub_1C4878D20(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_1C4878D20(v9, &v9[v13 >> 1], a2 - 1);
            sub_1C4878D20(v9 + 1, v15 - 1, a2 - 2);
            sub_1C4878D20(v9 + 2, &v9[v14 + 1], a2 - 3);
            sub_1C4878D20(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) >= *v9)
          {
            result = (uint64_t)sub_1C4878DA8(v9, (int *)a2);
            v9 = (unsigned int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = sub_1C4878E58(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = sub_1C4878F0C(v9, v17);
          v9 = v17 + 1;
          result = sub_1C4878F0C(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = sub_1C4878988(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v22 = v9 + 1;
        v24 = v9 == a2 || v22 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v24)
          {
            v25 = 4;
            v26 = v9;
            do
            {
              v28 = *v26;
              v27 = v26[1];
              v26 = v22;
              if (v27 < v28)
              {
                v29 = v25;
                while (1)
                {
                  *(unsigned int *)((char *)v9 + v29) = v28;
                  v30 = v29 - 4;
                  if (v29 == 4)
                    break;
                  v28 = *(unsigned int *)((char *)v9 + v29 - 8);
                  v29 -= 4;
                  if (v27 >= v28)
                  {
                    v31 = (unsigned int *)((char *)v9 + v30);
                    goto LABEL_42;
                  }
                }
                v31 = v9;
LABEL_42:
                *v31 = v27;
              }
              v22 = v26 + 1;
              v25 += 4;
            }
            while (v26 + 1 != a2);
          }
        }
        else if (!v24)
        {
          do
          {
            v33 = *v8;
            v32 = v8[1];
            v8 = v22;
            if (v32 < v33)
            {
              do
              {
                *v22 = v33;
                v33 = *(v22 - 2);
                --v22;
              }
              while (v32 < v33);
              *v22 = v32;
            }
            v22 = v8 + 1;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t sub_1C4878D20(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unsigned int *sub_1C4878DA8(unsigned int *a1, int *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int v4;
  int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = (int *)(a1 + 1);
    do
    {
      v3 = (unsigned int *)v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < (unsigned int *)a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < (unsigned int *)a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < (unsigned int *)a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

unsigned int *sub_1C4878E58(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL sub_1C4878F0C(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C4878D20(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C4879078(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C48790F8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C4878D20(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 12;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14) = v13;
        v15 = v14 - 4;
        if (v14 == 4)
          break;
        v13 = *(unsigned int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          v16 = (unsigned int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 4;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t sub_1C4879078(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  result = sub_1C4878D20(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1C48790F8(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  result = sub_1C4879078(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

unsigned int *sub_1C487919C(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        sub_1C4879374((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          sub_1C4879374((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      do
      {
        v16 = 0;
        v17 = *a1;
        v18 = a1;
        do
        {
          v19 = &v18[v16 + 1];
          v20 = (2 * v16) | 1;
          v16 = 2 * v16 + 2;
          if (v16 >= v9)
          {
            v21 = *v19;
            v16 = v20;
          }
          else
          {
            v21 = *v19;
            v22 = v19[1];
            if (*v19 <= v22)
              v21 = v19[1];
            if (*v19 >= v22)
              v16 = v20;
            else
              ++v19;
          }
          *v18 = v21;
          v18 = v19;
        }
        while (v16 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        if (v19 == --v6)
        {
          *v19 = v17;
        }
        else
        {
          *v19 = *v6;
          *v6 = v17;
          v23 = (char *)v19 - (char *)a1 + 4;
          if (v23 >= 5)
          {
            v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
            v25 = &a1[v24];
            v26 = *v25;
            v27 = *v19;
            if (*v25 < *v19)
            {
              do
              {
                *v19 = v26;
                v19 = v25;
                if (!v24)
                  break;
                v24 = (v24 - 1) >> 1;
                v25 = &a1[v24];
                v26 = *v25;
              }
              while (*v25 < v27);
              *v19 = v27;
            }
          }
        }
      }
      while (v9-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1C4879374(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) + 1;
      v8 = (unsigned int *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        if (*v8 <= v11)
          v10 = v8[1];
        if (*v8 < v11)
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = (2 * v7) | 1;
          v8 = (unsigned int *)(result + 4 * v13);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v13;
          }
          else
          {
            v10 = *v8;
            v14 = v8[1];
            if (*v8 <= v14)
              v10 = v8[1];
            if (*v8 >= v14)
              v7 = v13;
            else
              ++v8;
          }
        }
        while (v10 >= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

unint64_t sub_1C4879438(uint64_t a1, unsigned int *a2)
{
  unsigned __int8 v4;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int *v11;

  if (*(_QWORD *)(a1 + 160))
  {
    sub_1C4778ED8((uint64_t **)(a1 + 144), a2, a2);
    return ((unint64_t)v4 << 32) | 1;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *a2;
    if (!(_DWORD)v7)
      goto LABEL_11;
    v9 = 4 * v7;
    v10 = *(_DWORD **)a1;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 4;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return 1;
LABEL_10:
    if (v7 > 0x1F)
    {
      do
      {
        v11 = (unsigned int *)(*(_QWORD *)a1 + 4 * v7 - 4);
        sub_1C4778ED8((uint64_t **)(a1 + 144), v11, v11);
        LODWORD(v7) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v7;
      }
      while ((_DWORD)v7);
      sub_1C4778ED8((uint64_t **)(a1 + 144), a2, a2);
    }
    else
    {
LABEL_11:
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v7 + 1, 4);
        v6 = *(_DWORD **)a1;
        v7 = *(unsigned int *)(a1 + 8);
      }
      v6[v7] = v8;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

unint64_t sub_1C487954C(unint64_t result, unsigned int *a2, int a3, uint64_t a4, char a5, int a6)
{
  unsigned int *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;

  if (a3)
  {
    v9 = a2;
    v10 = result;
    v11 = &a2[8 * a3];
    do
    {
      v12 = *v9;
      if (!*v9)
      {
        v13 = v9[1];
        v14 = a5 & HIBYTE(v12);
        v15 = (v12 & 0x1000000) != 0 ? 0 : a6;
        if ((v14 & 1) != 0 || v15)
        {
          v16 = *(_QWORD *)(v10 + 360);
          if (v16)
            v17 = (_QWORD *)(v16 + 8);
          else
            v17 = 0;
          v18 = (unsigned __int16 *)(v17[6]
                                   + (((unint64_t)*(unsigned int *)(*v17 + 24 * v13 + 16) >> 3) & 0x1FFFFFFE));
          v20 = *v18;
          v19 = v18 + 1;
          v21 = v20 + (*(_DWORD *)(*v17 + 24 * v13 + 16) & 0xF) * v13;
          do
          {
            v23 = (unsigned __int16)v21;
            result = sub_1C48302EC(a4, &v23);
            v22 = *v19++;
            v21 += v22;
          }
          while (v22);
        }
      }
      v9 += 8;
    }
    while (v9 != v11);
  }
  return result;
}

BOOL sub_1C4879638(uint64_t a1, uint64_t a2)
{
  int v2;
  _BOOL8 result;

  v2 = **(unsigned __int16 **)(a2 + 16);
  result = 1;
  if ((v2 - 8262) >= 3)
    return (v2 - 2426) < 4;
  return result;
}

uint64_t sub_1C4879668(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 318))
    return 56;
  else
    return 313;
}

uint64_t sub_1C4879684()
{
  return 189;
}

uint64_t sub_1C487968C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  return 57;
}

void sub_1C48796B0(int a1, llvm::MachineBasicBlock *this, int a3, uint64_t a4)
{
  _QWORD *v4;
  int v5;
  BOOL v6;
  int v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t FirstTerminator;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  unsigned __int8 *v20;
  uint64_t v21;
  llvm::MachineFunction *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = (_QWORD *)*((_QWORD *)this + 4);
  v5 = (*(unsigned __int16 *)(*v4 + 18) >> 4) & 0x3FF;
  if (v5)
    v6 = v5 == 8;
  else
    v6 = 1;
  if (v6 || v5 == 255)
    return;
  v8 = a3;
  v10 = v4[7];
  v11 = v4[2];
  if (*(_BYTE *)(v11 + 318))
    v12 = 4075;
  else
    v12 = 4073;
  if (!*(_BYTE *)(v10 + 62))
  {
    FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
LABEL_11:
    v14 = FirstTerminator;
    goto LABEL_12;
  }
  if (*(_BYTE *)(v11 + 319))
  {
    v12 = 4077;
    v8 = 56;
  }
  else
  {
    v8 = a3;
  }
  v14 = *((_QWORD *)this + 7);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
  if (v14 != FirstTerminator)
  {
    do
    {
      v36 = *(_WORD *)(v14 + 44);
      v37 = *(_QWORD *)(*(_QWORD *)(v14 + 16) + 8);
      if ((v36 & 0xC) != 0 && (v36 & 4) == 0)
      {
        v39 = v14;
        if ((v37 & 0x80) != 0)
          goto LABEL_12;
        while ((*(_WORD *)(v39 + 44) & 8) != 0)
        {
          v39 = *(_QWORD *)(v39 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v39 + 16) + 8) & 0x80) != 0)
            goto LABEL_12;
        }
      }
      else if ((v37 & 0x80) != 0)
      {
        goto LABEL_12;
      }
      if ((v36 & 8) != 0 && (*(_QWORD *)v14 & 4) == 0)
      {
        do
          v14 = *(_QWORD *)(v14 + 8);
        while ((*(_WORD *)(v14 + 44) & 8) != 0);
      }
      v14 = *(_QWORD *)(v14 + 8);
    }
    while (v14 != FirstTerminator);
    goto LABEL_11;
  }
LABEL_12:
  if ((llvm::MachineBasicBlock *)((char *)this + 48) == (llvm::MachineBasicBlock *)v14)
  {
LABEL_65:
    v40 = 0;
  }
  else
  {
    v15 = v14;
    while (1)
    {
      v16 = **(unsigned __int16 **)(v15 + 16);
      v17 = v16 > 0x17;
      v18 = (1 << v16) & 0x83E000;
      if (v17 || v18 == 0)
        break;
      v15 = *(_QWORD *)(v15 + 8);
      if ((llvm::MachineBasicBlock *)v15 == (llvm::MachineBasicBlock *)((char *)this + 48))
        goto LABEL_65;
    }
    v20 = *(unsigned __int8 **)(v15 + 56);
    v40 = v20;
    if (v20)
    {
      llvm::MetadataTracking::track((uint64_t)&v40, v20, 2);
      v21 = *(_QWORD *)(a4 + 8) + 48 * v12;
      v22 = (llvm::MachineFunction *)*((_QWORD *)this + 4);
      v41 = v40;
      if (v40)
        llvm::MetadataTracking::track((uint64_t)&v41, v40, 2);
      goto LABEL_21;
    }
  }
  v21 = *(_QWORD *)(a4 + 8) + 48 * v12;
  v22 = (llvm::MachineFunction *)*((_QWORD *)this + 4);
  v41 = 0;
LABEL_21:
  v23 = *((_QWORD *)v22 + 28);
  if (v23)
    *((_QWORD *)v22 + 28) = *(_QWORD *)v23;
  else
    v23 = sub_1C484358C((uint64_t)v22 + 128, 72, 3);
  v42 = v41;
  if (v41)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v41, v41, (uint64_t)&v42);
    v41 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v23, v22, v21, &v42, 0);
  if (v42)
    llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
  if (v41)
    llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
  v24 = *((_QWORD *)this + 5);
  *(_QWORD *)(v23 + 24) = v24;
  v25 = *(_QWORD *)(v24 + 32);
  v26 = *(unsigned int *)(v23 + 40);
  if ((_DWORD)v26)
  {
    v29 = *(_QWORD *)(v23 + 32);
    v30 = *(_QWORD *)(v25 + 40);
    v31 = 32 * v26;
    do
    {
      if (!*(_BYTE *)v29)
      {
        v32 = *(unsigned int *)(v29 + 4);
        if ((int)v32 >= 0)
          v33 = (uint64_t *)(*(_QWORD *)(v30 + 272) + 8 * v32);
        else
          v33 = (uint64_t *)(*(_QWORD *)(v30 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8);
        v34 = *v33;
        if (*v33)
        {
          v35 = *(_QWORD *)(v34 + 16);
          *(_QWORD *)(v34 + 16) = v29;
          *(_QWORD *)(v29 + 16) = v35;
          if ((*(_BYTE *)(v29 + 3) & 1) != 0)
          {
            *(_QWORD *)(v29 + 24) = v34;
          }
          else
          {
            *(_QWORD *)(v29 + 24) = 0;
            v33 = (uint64_t *)(v35 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v29 + 16) = v29;
          *(_QWORD *)(v29 + 24) = 0;
        }
        *v33 = v29;
      }
      v29 += 32;
      v31 -= 32;
    }
    while (v31);
  }
  v27 = *(_QWORD *)(v25 + 728);
  if (v27)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v27 + 24))(v27, v23);
  v28 = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v23 = v28 | *(_QWORD *)v23 & 7;
  *(_QWORD *)(v23 + 8) = v14;
  *(_QWORD *)(v28 + 8) = v23;
  *(_QWORD *)v14 = *(_QWORD *)v14 & 7 | v23;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  LODWORD(v42) = 0x1000000;
  HIDWORD(v42) = v8;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v22, (const llvm::MachineOperand *)&v42);
  LODWORD(v42) = 1;
  v43 = 0;
  v44 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v22, (const llvm::MachineOperand *)&v42);
  LODWORD(v42) = 1;
  v43 = 0;
  v44 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v22, (const llvm::MachineOperand *)&v42);
  if (v40)
    llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
}

uint64_t sub_1C4879A4C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

void sub_1C4879A54(int a1, llvm::MachineBasicBlock *this, int a3, uint64_t a4)
{
  _QWORD *v4;
  int v5;
  BOOL v6;
  int v10;
  unint64_t FirstTerminator;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::MachineFunction *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = (_QWORD *)*((_QWORD *)this + 4);
  v5 = (*(unsigned __int16 *)(*v4 + 18) >> 4) & 0x3FF;
  v6 = v5 == 8 || v5 == 0;
  if (v6 || v5 == 255)
    return;
  v10 = *(unsigned __int8 *)(v4[2] + 318);
  if (!*(_BYTE *)(v4[7] + 62))
  {
    FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
LABEL_8:
    v12 = FirstTerminator;
    goto LABEL_9;
  }
  v12 = *((_QWORD *)this + 7);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
  if (v12 != FirstTerminator)
  {
    do
    {
      v28 = *(_WORD *)(v12 + 44);
      v29 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8);
      if ((v28 & 0xC) != 0 && (v28 & 4) == 0)
      {
        v39 = v12;
        if ((v29 & 0x80) != 0)
          goto LABEL_9;
        while ((*(_WORD *)(v39 + 44) & 8) != 0)
        {
          v39 = *(_QWORD *)(v39 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v39 + 16) + 8) & 0x80) != 0)
            goto LABEL_9;
        }
      }
      else if ((v29 & 0x80) != 0)
      {
        goto LABEL_9;
      }
      if ((v28 & 8) != 0 && (*(_QWORD *)v12 & 4) == 0)
      {
        do
          v12 = *(_QWORD *)(v12 + 8);
        while ((*(_WORD *)(v12 + 44) & 8) != 0);
      }
      v12 = *(_QWORD *)(v12 + 8);
    }
    while (v12 != FirstTerminator);
    goto LABEL_8;
  }
LABEL_9:
  if ((llvm::MachineBasicBlock *)((char *)this + 48) == (llvm::MachineBasicBlock *)v12)
  {
LABEL_63:
    v40 = 0;
  }
  else
  {
    v13 = v12;
    while (1)
    {
      v14 = **(unsigned __int16 **)(v13 + 16);
      v15 = v14 > 0x17;
      v16 = (1 << v14) & 0x83E000;
      if (v15 || v16 == 0)
        break;
      v13 = *(_QWORD *)(v13 + 8);
      if ((llvm::MachineBasicBlock *)v13 == (llvm::MachineBasicBlock *)((char *)this + 48))
        goto LABEL_63;
    }
    v18 = *(unsigned __int8 **)(v13 + 56);
    v40 = v18;
    if (v18)
    {
      llvm::MetadataTracking::track((uint64_t)&v40, v18, 2);
      v38 = 195456;
      if (!v10)
        v38 = 195504;
      v20 = *(_QWORD *)(a4 + 8) + v38;
      v21 = (llvm::MachineFunction *)*((_QWORD *)this + 4);
      v41 = v40;
      if (v40)
        llvm::MetadataTracking::track((uint64_t)&v41, v40, 2);
      goto LABEL_20;
    }
  }
  v19 = 195456;
  if (!v10)
    v19 = 195504;
  v20 = *(_QWORD *)(a4 + 8) + v19;
  v21 = (llvm::MachineFunction *)*((_QWORD *)this + 4);
  v41 = 0;
LABEL_20:
  v22 = *((_QWORD *)v21 + 28);
  if (v22)
    *((_QWORD *)v21 + 28) = *(_QWORD *)v22;
  else
    v22 = sub_1C484358C((uint64_t)v21 + 128, 72, 3);
  v42 = v41;
  if (v41)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v41, v41, (uint64_t)&v42);
    v41 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v22, v21, v20, &v42, 0);
  if (v42)
    llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
  if (v41)
    llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
  v23 = *((_QWORD *)this + 5);
  *(_QWORD *)(v22 + 24) = v23;
  v24 = *(_QWORD *)(v23 + 32);
  v25 = *(unsigned int *)(v22 + 40);
  if ((_DWORD)v25)
  {
    v31 = *(_QWORD *)(v22 + 32);
    v32 = *(_QWORD *)(v24 + 40);
    v33 = 32 * v25;
    do
    {
      if (!*(_BYTE *)v31)
      {
        v34 = *(unsigned int *)(v31 + 4);
        if ((int)v34 >= 0)
          v35 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v34);
        else
          v35 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
        v36 = *v35;
        if (*v35)
        {
          v37 = *(_QWORD *)(v36 + 16);
          *(_QWORD *)(v36 + 16) = v31;
          *(_QWORD *)(v31 + 16) = v37;
          if ((*(_BYTE *)(v31 + 3) & 1) != 0)
          {
            *(_QWORD *)(v31 + 24) = v36;
          }
          else
          {
            *(_QWORD *)(v31 + 24) = 0;
            v35 = (uint64_t *)(v37 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v31 + 16) = v31;
          *(_QWORD *)(v31 + 24) = 0;
        }
        *v35 = v31;
      }
      v31 += 32;
      v33 -= 32;
    }
    while (v33);
  }
  v26 = *(_QWORD *)(v24 + 728);
  if (v26)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v26 + 24))(v26, v22);
  v27 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v22 = v27 | *(_QWORD *)v22 & 7;
  *(_QWORD *)(v22 + 8) = v12;
  *(_QWORD *)(v27 + 8) = v22;
  *(_QWORD *)v12 = *(_QWORD *)v12 & 7 | v22;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  LODWORD(v42) = 0x1000000;
  HIDWORD(v42) = a3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v21, (const llvm::MachineOperand *)&v42);
  LODWORD(v42) = 1;
  v43 = 0;
  v44 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v21, (const llvm::MachineOperand *)&v42);
  LODWORD(v42) = 1;
  v43 = 0;
  v44 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v21, (const llvm::MachineOperand *)&v42);
  if (v40)
    llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
}

uint64_t sub_1C4879DF0@<X0>(llvm::TargetInstrInfo *this@<X2>, uint64_t result@<X0>, _QWORD *a3@<X1>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  int v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  char v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v28;
  uint64_t v29;
  BOOL v30;

  if (((a3[12] - a3[11]) & 0x7FFFFFFF8) == 0)
    goto LABEL_30;
  v6 = (_QWORD *)a3[7];
  if (a3 + 6 == v6)
    goto LABEL_30;
  v8 = result;
  v9 = a3[6] & 0xFFFFFFFFFFFFFFF8;
  if (!v9 || (*(_BYTE *)v9 & 4) == 0)
  {
    while ((*(_WORD *)(v9 + 44) & 4) != 0)
      v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    v10 = *(unsigned __int16 **)(v9 + 16);
    v11 = *v10;
    v12 = (v11 - 9) > 0x3C || ((1 << (v11 - 9)) & 0x1000000000000605) == 0;
    v13 = !v12 || v11 == 0;
    if (!v13 && (v10[4] & 0x10) == 0)
      break;
    if ((_QWORD *)v9 == v6)
      goto LABEL_30;
    v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
    if (!v9 || (*(_BYTE *)v9 & 4) == 0)
    {
      while ((*(_WORD *)(v9 + 44) & 4) != 0)
        v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (v11 == 302)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 1;
    goto LABEL_32;
  }
  result = llvm::TargetInstrInfo::isUnpredicatedTerminator(this, (const llvm::MachineInstr *)v9);
  if (!(_DWORD)result)
  {
LABEL_30:
    v14 = 0;
    v15 = 0;
    v18 = 0;
    v16 = 0;
LABEL_31:
    v17 = 0;
    goto LABEL_32;
  }
  v19 = **(unsigned __int16 **)(v9 + 16);
  if (v9 != a3[7])
  {
    v20 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
    if (!v20 || (*(_BYTE *)v20 & 4) == 0)
    {
      while ((*(_WORD *)(v20 + 44) & 4) != 0)
        v20 = *(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((llvm::TargetInstrInfo::isUnpredicatedTerminator(this, (const llvm::MachineInstr *)v20) & 1) != 0)
    {
      result = sub_1C488859C(**(unsigned __int16 **)(v20 + 16));
      v18 = 0;
      v14 = 0;
      v17 = 1;
      if ((result - 47) > 2)
      {
        v15 = 0;
        v16 = 0;
      }
      else
      {
        v15 = 0;
        v16 = 0;
        if (v19 == 288)
        {
          v21 = *(_QWORD *)((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 40))(v8, v20) + 16);
          v22 = *(_QWORD *)(*(_QWORD *)(v20 + 32) + 80);
          result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 40))(v8, v9);
          v18 = 0;
          v16 = 0;
          v17 = 0;
          v15 = *(_QWORD *)(result + 16);
          v14 = v22 ? v21 : *(_QWORD *)(result + 16);
          if (!v22)
            v15 = v21;
        }
      }
      goto LABEL_32;
    }
  }
  if (v19 == 288)
  {
    result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 40))(v8, v9);
    v14 = 0;
    v18 = 0;
    v16 = 0;
    v17 = 0;
    v15 = *(_QWORD *)(result + 16);
    goto LABEL_32;
  }
  result = sub_1C488859C(v19);
  if ((result - 47) > 2)
  {
    v14 = 0;
    v15 = 0;
    v18 = 0;
    v16 = 0;
    v17 = 1;
    goto LABEL_32;
  }
  result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 40))(v8, v9);
  v15 = *(_QWORD *)(result + 16);
  v23 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 80);
  v16 = v23 != 0;
  v24 = (_QWORD *)a3[11];
  v25 = (_QWORD *)a3[12];
  if (v24 == v25)
  {
LABEL_55:
    v14 = 0;
    v18 = 0;
    goto LABEL_31;
  }
  v26 = a3[1];
  while (v26 != *v24 || *v24 == v15)
  {
    if (++v24 == v25)
      goto LABEL_55;
  }
  v28 = v23 == 0;
  if (v23)
    v14 = *(_QWORD *)(result + 16);
  else
    v14 = a3[1];
  if (v28)
    v29 = *(_QWORD *)(result + 16);
  else
    v29 = a3[1];
  v30 = v26 == 0;
  if (v26)
    v15 = v29;
  else
    v14 = 0;
  v18 = 0;
  if (!v30)
    v16 = 0;
  v17 = 0;
LABEL_32:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v14;
  *(_BYTE *)(a4 + 16) = v18;
  *(_BYTE *)(a4 + 17) = v16;
  *(_BYTE *)(a4 + 18) = v17;
  return result;
}

void sub_1C487A110(uint64_t a1, llvm::MachineBasicBlock *a2, int a3, char a4, llvm::TargetInstrInfo *a5)
{
  _BYTE *v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unint64_t FirstTerminator;
  _QWORD *v21;
  unint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  unsigned __int8 *v27;
  uint64_t v28;
  llvm::MachineFunction *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unsigned int v44;
  unsigned int v45;
  int *v46;
  int v47;
  llvm::MachineFunction *v48;
  llvm::MachineFunction *v49[2];
  char v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v9 = *(_BYTE **)(*((_QWORD *)a2 + 4) + 16);
  v10 = sub_1C487D35C((uint64_t)a2, a5, &v50);
  v11 = **(unsigned __int16 **)(v10 + 16);
  v12 = sub_1C4888570(v11);
  v13 = sub_1C488859C(v11);
  sub_1C4888770(v12, (uint64_t)&v55);
  if (v13 == 48)
  {
    v43 = v9[318] == 0;
    v44 = 19;
  }
  else
  {
    if (v13 != 47)
    {
      v14 = 39;
      goto LABEL_4;
    }
    v43 = v9[318] == 0;
    v44 = 5;
  }
  if (v43)
    v14 = 33;
  else
    v14 = v44;
LABEL_4:
  v15 = (int *)v55;
  v16 = sub_1C4884024(v14, (_DWORD *)v55, DWORD2(v55), v9);
  v18 = *v15;
  v17 = v15[1];
  if (v15 != (int *)&v56)
  {
    v45 = v16;
    v46 = v15;
    v47 = v15[1];
    free(v46);
    v16 = v45;
    v17 = v47;
  }
  v19 = v16;
  v57 = 0;
  v55 = 0u;
  v56 = 0u;
  sub_1C487D4BC((uint64_t)&v55, v10, v18, v17, a4);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  v21 = (_QWORD *)FirstTerminator;
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_51:
    v48 = 0;
LABEL_14:
    v28 = *((_QWORD *)a5 + 1) + 48 * v19;
    v29 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
    v49[0] = 0;
    goto LABEL_15;
  }
  v22 = FirstTerminator;
  while (1)
  {
    v23 = **(unsigned __int16 **)(v22 + 16);
    v24 = v23 > 0x17;
    v25 = (1 << v23) & 0x83E000;
    if (v24 || v25 == 0)
      break;
    v22 = *(_QWORD *)(v22 + 8);
    if ((llvm::MachineBasicBlock *)v22 == (llvm::MachineBasicBlock *)((char *)a2 + 48))
      goto LABEL_51;
  }
  v27 = *(unsigned __int8 **)(v22 + 56);
  v48 = (llvm::MachineFunction *)v27;
  if (!v27)
    goto LABEL_14;
  llvm::MetadataTracking::track((uint64_t)&v48, v27, 2);
  v28 = *((_QWORD *)a5 + 1) + 48 * v19;
  v29 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
  v49[0] = v48;
  if (v48)
    llvm::MetadataTracking::track((uint64_t)v49, (unsigned __int8 *)v48, 2);
LABEL_15:
  v30 = *((_QWORD *)v29 + 28);
  if (v30)
    *((_QWORD *)v29 + 28) = *(_QWORD *)v30;
  else
    v30 = sub_1C484358C((uint64_t)v29 + 128, 72, 3);
  v51 = (unsigned __int8 *)v49[0];
  if (v49[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v49, (unsigned __int8 *)v49[0], (uint64_t)&v51);
    v49[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v30, v29, v28, &v51, 0);
  if (v51)
    llvm::MetadataTracking::untrack((uint64_t)&v51, v51);
  if (v49[0])
    llvm::MetadataTracking::untrack((uint64_t)v49, (unsigned __int8 *)v49[0]);
  v31 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v30 + 24) = v31;
  v32 = *(_QWORD *)(v31 + 32);
  v33 = *(unsigned int *)(v30 + 40);
  if ((_DWORD)v33)
  {
    v36 = *(_QWORD *)(v30 + 32);
    v37 = *(_QWORD *)(v32 + 40);
    v38 = 32 * v33;
    do
    {
      if (!*(_BYTE *)v36)
      {
        v39 = *(unsigned int *)(v36 + 4);
        if ((int)v39 >= 0)
          v40 = (uint64_t *)(*(_QWORD *)(v37 + 272) + 8 * v39);
        else
          v40 = (uint64_t *)(*(_QWORD *)(v37 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
        v41 = *v40;
        if (*v40)
        {
          v42 = *(_QWORD *)(v41 + 16);
          *(_QWORD *)(v41 + 16) = v36;
          *(_QWORD *)(v36 + 16) = v42;
          if ((*(_BYTE *)(v36 + 3) & 1) != 0)
          {
            *(_QWORD *)(v36 + 24) = v41;
          }
          else
          {
            *(_QWORD *)(v36 + 24) = 0;
            v40 = (uint64_t *)(v42 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v36 + 16) = v36;
          *(_QWORD *)(v36 + 24) = 0;
        }
        *v40 = v36;
      }
      v36 += 32;
      v38 -= 32;
    }
    while (v38);
  }
  v34 = *(_QWORD *)(v32 + 728);
  if (v34)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v34 + 24))(v34, v30);
  v35 = *v21 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v30 = v35 | *(_QWORD *)v30 & 7;
  *(_QWORD *)(v30 + 8) = v21;
  *(_QWORD *)(v35 + 8) = v30;
  *v21 = *v21 & 7 | v30;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  LODWORD(v51) = 0x1000000;
  HIDWORD(v51) = a3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v30, v29, (const llvm::MachineOperand *)&v51);
  LODWORD(v51) = 1;
  v52 = 0;
  v53 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v30, v29, (const llvm::MachineOperand *)&v51);
  v49[0] = v29;
  v49[1] = (llvm::MachineFunction *)v30;
  if (v48)
    llvm::MetadataTracking::untrack((uint64_t)&v48, (unsigned __int8 *)v48);
  sub_1C487D610((uint64_t)&v55, v49);
  LODWORD(v51) = 1;
  v52 = 0;
  v53 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v30, v29, (const llvm::MachineOperand *)&v51);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  LODWORD(v51) = 0x2000000;
  HIDWORD(v51) = a3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v30, v29, (const llvm::MachineOperand *)&v51);
}

void sub_1C487A524(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  llvm::MachineFunction *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::MachineInstr *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;

  v7 = (llvm::MachineFunction *)a2[4];
  v8 = *(unsigned __int8 *)(*((_QWORD *)v7 + 2) + 318);
  v9 = a2 + 6;
  v10 = a2[7];
  if (a2 + 6 == (_QWORD *)v10)
  {
LABEL_32:
    v21 = 0;
LABEL_9:
    v17 = 44640;
    if (!v8)
      v17 = 95808;
    v18 = *(_QWORD *)(a4 + 8) + v17;
    v26 = 0;
    goto LABEL_12;
  }
  v11 = a2[7];
  while (1)
  {
    v12 = **(unsigned __int16 **)(v11 + 16);
    v13 = v12 > 0x17;
    v14 = (1 << v12) & 0x83E000;
    if (v13 || v14 == 0)
      break;
    v11 = *(_QWORD *)(v11 + 8);
    if ((_QWORD *)v11 == v9)
      goto LABEL_32;
  }
  v16 = *(unsigned __int8 **)(v11 + 56);
  v21 = v16;
  if (!v16)
    goto LABEL_9;
  llvm::MetadataTracking::track((uint64_t)&v21, v16, 2);
  v20 = 44640;
  if (!v8)
    v20 = 95808;
  v18 = *(_QWORD *)(a4 + 8) + v20;
  v7 = (llvm::MachineFunction *)a2[4];
  v26 = v21;
  if (v21)
    llvm::MetadataTracking::track((uint64_t)&v26, v21, 2);
LABEL_12:
  v19 = (llvm::MachineInstr *)*((_QWORD *)v7 + 28);
  if (v19)
    *((_QWORD *)v7 + 28) = *(_QWORD *)v19;
  else
    v19 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v7 + 128, 72, 3);
  v22 = v26;
  if (v26)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v26, v26, (uint64_t)&v22);
    v26 = 0;
  }
  llvm::MachineInstr::MachineInstr(v19, v7, v18, &v22, 0);
  if (v22)
    llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
  if (v26)
    llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
  if (v9 != (_QWORD *)v10 && (*(_WORD *)(v10 + 44) & 4) != 0)
    *((_WORD *)v19 + 22) |= 0xCu;
  sub_1C512CA10(a2 + 5, (uint64_t *)v10, (uint64_t)v19);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  LODWORD(v22) = 0x1000000;
  HIDWORD(v22) = a3;
  llvm::MachineInstr::addOperand(v19, v7, (const llvm::MachineOperand *)&v22);
  LODWORD(v22) = 1;
  v23 = 0;
  v24 = 0;
  llvm::MachineInstr::addOperand(v19, v7, (const llvm::MachineOperand *)&v22);
  LODWORD(v22) = 1;
  v23 = 0;
  v24 = 0;
  llvm::MachineInstr::addOperand(v19, v7, (const llvm::MachineOperand *)&v22);
  LODWORD(v22) = 1;
  v23 = 0;
  v24 = 0;
  llvm::MachineInstr::addOperand(v19, v7, (const llvm::MachineOperand *)&v22);
  LODWORD(v22) = 1;
  v23 = 0;
  v24 = 0;
  llvm::MachineInstr::addOperand(v19, v7, (const llvm::MachineOperand *)&v22);
  LODWORD(v22) = 1;
  v23 = 0;
  v24 = 1;
  llvm::MachineInstr::addOperand(v19, v7, (const llvm::MachineOperand *)&v22);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  LODWORD(v22) = 0x2000000;
  HIDWORD(v22) = a3;
  llvm::MachineInstr::addOperand(v19, v7, (const llvm::MachineOperand *)&v22);
  if (v21)
    llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
}

void sub_1C487A7C0(uint64_t a1, llvm::MachineBasicBlock *a2, int a3, int a4, int a5, int a6, int a7, unsigned int a8, unsigned __int8 a9, unsigned __int8 a10, char a11, uint64_t *a12)
{
  _BYTE *v17;
  unint64_t v18;
  unint64_t FirstTerminator;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::MachineFunction *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int *v44;
  unsigned int v45;
  int v46;
  int v47;
  uint64_t v48;
  llvm::MachineFunction *v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int *v56;
  unsigned int v57;
  int v58;
  int v59;
  uint64_t v60;
  llvm::MachineFunction *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  llvm::MachineFunction *v69;
  llvm::MachineInstr *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  llvm::MachineFunction *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  unsigned int v117;
  int v119;
  int v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  llvm::MachineFunction *v125;
  unint64_t v126;
  uint64_t v127;
  unsigned __int8 *v128;
  char v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v129 = 0;
  v17 = *(_BYTE **)(*((_QWORD *)a2 + 4) + 16);
  v121 = v17[318];
  v18 = sub_1C487D35C((uint64_t)a2, (llvm::TargetInstrInfo *)a12, &v129);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  v20 = (unint64_t *)FirstTerminator;
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_8:
    v128 = 0;
  }
  else
  {
    v21 = FirstTerminator;
    while (1)
    {
      v22 = **(unsigned __int16 **)(v21 + 16);
      v23 = v22 > 0x17;
      v24 = (1 << v22) & 0x83E000;
      if (v23 || v24 == 0)
        break;
      v21 = *(_QWORD *)(v21 + 8);
      if ((llvm::MachineBasicBlock *)v21 == (llvm::MachineBasicBlock *)((char *)a2 + 48))
        goto LABEL_8;
    }
    v26 = *(unsigned __int8 **)(v21 + 56);
    v128 = v26;
    if (v26)
      llvm::MetadataTracking::track((uint64_t)&v128, v26, 2);
  }
  v119 = a3;
  if ((a7 & 1) != 0 || (a11 & 1) != 0 || a9)
  {
    if (a7 && (a5 & 1) == 0 && (a9 & 1) == 0)
    {
      v27 = v128;
      goto LABEL_20;
    }
    v27 = v128;
    if ((a9 & ~(_BYTE)a5 & 1) == 0 && (a7 & 1) == 0)
    {
LABEL_20:
      v28 = a12[1];
      if (v121)
        v29 = 195456;
      else
        v29 = 195504;
      v30 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
      v131 = v27;
      if (v27)
        llvm::MetadataTracking::track((uint64_t)&v131, v27, 2);
      v31 = v28 + v29;
      v32 = *((_QWORD *)v30 + 28);
      if (v32)
        *((_QWORD *)v30 + 28) = *(_QWORD *)v32;
      else
        v32 = sub_1C484358C((uint64_t)v30 + 128, 72, 3);
      *(_QWORD *)&v135 = v131;
      if (v131)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v131, v131, (uint64_t)&v135);
        v131 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v32, v30, v31, (unsigned __int8 **)&v135, 0);
      if ((_QWORD)v135)
        llvm::MetadataTracking::untrack((uint64_t)&v135, (unsigned __int8 *)v135);
      if (v131)
        llvm::MetadataTracking::untrack((uint64_t)&v131, v131);
      v33 = *((_QWORD *)a2 + 5);
      *(_QWORD *)(v32 + 24) = v33;
      v34 = *(_QWORD *)(v33 + 32);
      v35 = *(unsigned int *)(v32 + 40);
      if ((_DWORD)v35)
      {
        v86 = *(_QWORD *)(v32 + 32);
        v87 = *(_QWORD *)(v34 + 40);
        v88 = 32 * v35;
        do
        {
          if (!*(_BYTE *)v86)
          {
            v89 = *(unsigned int *)(v86 + 4);
            if ((int)v89 >= 0)
              v90 = (uint64_t *)(*(_QWORD *)(v87 + 272) + 8 * v89);
            else
              v90 = (uint64_t *)(*(_QWORD *)(v87 + 24) + 16 * (v89 & 0x7FFFFFFF) + 8);
            v91 = *v90;
            if (*v90)
            {
              v92 = *(_QWORD *)(v91 + 16);
              *(_QWORD *)(v91 + 16) = v86;
              *(_QWORD *)(v86 + 16) = v92;
              if ((*(_BYTE *)(v86 + 3) & 1) != 0)
              {
                *(_QWORD *)(v86 + 24) = v91;
              }
              else
              {
                *(_QWORD *)(v86 + 24) = 0;
                v90 = (uint64_t *)(v92 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v86 + 16) = v86;
              *(_QWORD *)(v86 + 24) = 0;
            }
            *v90 = v86;
          }
          v86 += 32;
          v88 -= 32;
        }
        while (v88);
      }
      v36 = *(_QWORD *)(v34 + 728);
      if (v36)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v36 + 24))(v36, v32);
      v37 = *v20 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v32 = v37 | *(_QWORD *)v32 & 7;
      *(_QWORD *)(v32 + 8) = v20;
      *(_QWORD *)(v37 + 8) = v32;
      *v20 = *v20 & 7 | v32;
      *((_QWORD *)&v135 + 1) = 0;
      v136 = 0uLL;
      LODWORD(v135) = 0x1000000;
      DWORD1(v135) = a4;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v30, (const llvm::MachineOperand *)&v135);
      LODWORD(v135) = 1;
      *((_QWORD *)&v135 + 1) = 0;
      *(_QWORD *)&v136 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v30, (const llvm::MachineOperand *)&v135);
      LODWORD(v135) = 1;
      if (a5)
        v38 = a10;
      else
        v38 = a8;
      *((_QWORD *)&v135 + 1) = 0;
      *(_QWORD *)&v136 = v38;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v30, (const llvm::MachineOperand *)&v135);
      a3 = v119;
      goto LABEL_41;
    }
    LODWORD(v131) = 1;
    v132 = 0;
    v133 = a8;
    LODWORD(v125) = 1;
    v126 = 0;
    v127 = a10;
    v124 = v128;
    if (v128)
      llvm::MetadataTracking::track((uint64_t)&v124, v128, 2);
    v69 = sub_1C487D784((uint64_t)a2, v20, &v124, v18, v17, (uint64_t)a12, a4, a5, 0, (const llvm::MachineOperand *)&v131, (const llvm::MachineOperand *)&v125);
    *((_QWORD *)&v135 + 1) = 0;
    v136 = 0uLL;
    LODWORD(v135) = 0x2000000;
    DWORD1(v135) = a3;
    llvm::MachineInstr::addOperand(v70, v69, (const llvm::MachineOperand *)&v135);
    if (v124)
      llvm::MetadataTracking::untrack((uint64_t)&v124, v124);
  }
LABEL_41:
  if (a6)
  {
    if ((a6 + 2) <= 0xFF)
    {
      *((_QWORD *)&v135 + 1) = 0;
      v136 = 0uLL;
      LODWORD(v135) = 0;
      DWORD1(v135) = a3;
      LODWORD(v131) = 1;
      v132 = 0;
      v133 = (a6 + 2);
      v123 = v128;
      if (v128)
        llvm::MetadataTracking::track((uint64_t)&v123, v128, 2);
      sub_1C487D784((uint64_t)a2, v20, &v123, v18, v17, (uint64_t)a12, a3, a5, v121 != 0, (const llvm::MachineOperand *)&v135, (const llvm::MachineOperand *)&v131);
      if (v123)
        llvm::MetadataTracking::untrack((uint64_t)&v123, v123);
      v122 = v128;
      if (v128)
      {
        llvm::MetadataTracking::track((uint64_t)&v122, v128, 2);
        v39 = v122;
      }
      else
      {
        v39 = 0;
      }
      sub_1C487DAB0((uint64_t)a2, v20, a3, v17, a12[1], v39, 0);
      if (v122)
        llvm::MetadataTracking::untrack((uint64_t)&v122, v122);
      goto LABEL_115;
    }
    v52 = **(unsigned __int16 **)(v18 + 16);
    v53 = sub_1C4888570(v52);
    v54 = sub_1C488859C(v52);
    sub_1C4888770(v53, (uint64_t)&v135);
    if (v54 == 48)
    {
      v116 = v17[318] == 0;
      v117 = 19;
    }
    else
    {
      if (v54 != 47)
      {
        v55 = 39;
LABEL_61:
        v56 = (int *)v135;
        v57 = sub_1C4884024(v55, (_DWORD *)v135, DWORD2(v135), v17);
        v58 = *v56;
        v59 = v56[1];
        if (v56 != (int *)&v136)
          free(v56);
        v137 = 0;
        v135 = 0u;
        v136 = 0u;
        sub_1C487D4BC((uint64_t)&v135, v18, v58, v59, a5 ^ 1);
        v60 = a12[1];
        v61 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
        v125 = (llvm::MachineFunction *)v128;
        if (v128)
          llvm::MetadataTracking::track((uint64_t)&v125, v128, 2);
        v62 = v60 + 48 * v57;
        v63 = *((_QWORD *)v61 + 28);
        if (v63)
          *((_QWORD *)v61 + 28) = *(_QWORD *)v63;
        else
          v63 = sub_1C484358C((uint64_t)v61 + 128, 72, 3);
        v131 = (unsigned __int8 *)v125;
        if (v125)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v125, (unsigned __int8 *)v125, (uint64_t)&v131);
          v125 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v63, v61, v62, &v131, 0);
        if (v131)
          llvm::MetadataTracking::untrack((uint64_t)&v131, v131);
        if (v125)
          llvm::MetadataTracking::untrack((uint64_t)&v125, (unsigned __int8 *)v125);
        v71 = *((_QWORD *)a2 + 5);
        *(_QWORD *)(v63 + 24) = v71;
        v72 = *(_QWORD *)(v71 + 32);
        v73 = *(unsigned int *)(v63 + 40);
        if ((_DWORD)v73)
        {
          v102 = *(_QWORD *)(v63 + 32);
          v103 = *(_QWORD *)(v72 + 40);
          v104 = 32 * v73;
          do
          {
            if (!*(_BYTE *)v102)
            {
              v105 = *(unsigned int *)(v102 + 4);
              if ((int)v105 >= 0)
                v106 = (uint64_t *)(*(_QWORD *)(v103 + 272) + 8 * v105);
              else
                v106 = (uint64_t *)(*(_QWORD *)(v103 + 24) + 16 * (v105 & 0x7FFFFFFF) + 8);
              v107 = *v106;
              if (*v106)
              {
                v108 = *(_QWORD *)(v107 + 16);
                *(_QWORD *)(v107 + 16) = v102;
                *(_QWORD *)(v102 + 16) = v108;
                if ((*(_BYTE *)(v102 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v102 + 24) = v107;
                }
                else
                {
                  *(_QWORD *)(v102 + 24) = 0;
                  v106 = (uint64_t *)(v108 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v102 + 16) = v102;
                *(_QWORD *)(v102 + 24) = 0;
              }
              *v106 = v102;
            }
            v102 += 32;
            v104 -= 32;
          }
          while (v104);
        }
        v74 = *(_QWORD *)(v72 + 728);
        if (v74)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v74 + 24))(v74, v63);
        v75 = *v20 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v63 = v75 | *(_QWORD *)v63 & 7;
        *(_QWORD *)(v63 + 8) = v20;
        *(_QWORD *)(v75 + 8) = v63;
        *v20 = *v20 & 7 | v63;
        v132 = 0;
        v133 = 0;
        v134 = 0;
        LODWORD(v131) = 0x1000000;
        HIDWORD(v131) = v119;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v63, v61, (const llvm::MachineOperand *)&v131);
        LODWORD(v131) = 1;
        v132 = 0;
        v133 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v63, v61, (const llvm::MachineOperand *)&v131);
        v125 = v61;
        v126 = v63;
        sub_1C487D610((uint64_t)&v135, &v125);
        LODWORD(v131) = 1;
        v132 = 0;
        v133 = 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v63, v61, (const llvm::MachineOperand *)&v131);
        v132 = 0;
        v133 = 0;
        v134 = 0;
        LODWORD(v131) = 0x2000000;
        HIDWORD(v131) = v119;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v63, v61, (const llvm::MachineOperand *)&v131);
        v76 = a12[1];
        if (v121)
          v77 = 195600;
        else
          v77 = 195504;
        v78 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
        v130 = v128;
        if (v128)
          llvm::MetadataTracking::track((uint64_t)&v130, v128, 2);
        v79 = v76 + v77;
        v80 = *((_QWORD *)v78 + 28);
        if (v80)
          *((_QWORD *)v78 + 28) = *(_QWORD *)v80;
        else
          v80 = sub_1C484358C((uint64_t)v78 + 128, 72, 3);
        v131 = v130;
        if (v130)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v130, v130, (uint64_t)&v131);
          v130 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v80, v78, v79, &v131, 0);
        if (v131)
          llvm::MetadataTracking::untrack((uint64_t)&v131, v131);
        if (v130)
          llvm::MetadataTracking::untrack((uint64_t)&v130, v130);
        v81 = *((_QWORD *)a2 + 5);
        *(_QWORD *)(v80 + 24) = v81;
        v82 = *(_QWORD *)(v81 + 32);
        v83 = *(unsigned int *)(v80 + 40);
        if ((_DWORD)v83)
        {
          v109 = *(_QWORD *)(v80 + 32);
          v110 = *(_QWORD *)(v82 + 40);
          v111 = 32 * v83;
          do
          {
            if (!*(_BYTE *)v109)
            {
              v112 = *(unsigned int *)(v109 + 4);
              if ((int)v112 >= 0)
                v113 = (uint64_t *)(*(_QWORD *)(v110 + 272) + 8 * v112);
              else
                v113 = (uint64_t *)(*(_QWORD *)(v110 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
              v114 = *v113;
              if (*v113)
              {
                v115 = *(_QWORD *)(v114 + 16);
                *(_QWORD *)(v114 + 16) = v109;
                *(_QWORD *)(v109 + 16) = v115;
                if ((*(_BYTE *)(v109 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v109 + 24) = v114;
                }
                else
                {
                  *(_QWORD *)(v109 + 24) = 0;
                  v113 = (uint64_t *)(v115 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v109 + 16) = v109;
                *(_QWORD *)(v109 + 24) = 0;
              }
              *v113 = v109;
            }
            v109 += 32;
            v111 -= 32;
          }
          while (v111);
        }
        v84 = *(_QWORD *)(v82 + 728);
        if (v84)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v84 + 24))(v84, v80);
        v85 = *v20 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v80 = v85 | *(_QWORD *)v80 & 7;
        *(_QWORD *)(v80 + 8) = v20;
        *(_QWORD *)(v85 + 8) = v80;
        *v20 = *v20 & 7 | v80;
        v132 = 0;
        v133 = 0;
        v134 = 0;
        LODWORD(v131) = 0x1000000;
        HIDWORD(v131) = v119;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v78, (const llvm::MachineOperand *)&v131);
        LODWORD(v131) = 1;
        v132 = 0;
        v133 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v78, (const llvm::MachineOperand *)&v131);
        LODWORD(v131) = 1;
        v132 = 0;
        v133 = (a6 + 3);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v78, (const llvm::MachineOperand *)&v131);
        if (!v121)
          sub_1C487DD78(a2, v20, (uint64_t)a12, v119, v17);
        sub_1C487E0A4(a2, 1, &v128, v119, (uint64_t)a12, 0, 1u);
        goto LABEL_115;
      }
      v116 = v17[318] == 0;
      v117 = 5;
    }
    if (v116)
      v55 = 33;
    else
      v55 = v117;
    goto LABEL_61;
  }
  v40 = **(unsigned __int16 **)(v18 + 16);
  v41 = sub_1C4888570(v40);
  v42 = sub_1C488859C(v40);
  sub_1C4888770(v41, (uint64_t)&v135);
  if (v42 == 48)
  {
    v100 = v17[318] == 0;
    v101 = 18;
    goto LABEL_173;
  }
  if (v42 == 47)
  {
    v100 = v17[318] == 0;
    v101 = 4;
LABEL_173:
    if (v100)
      v43 = 32;
    else
      v43 = v101;
    goto LABEL_52;
  }
  v43 = 38;
LABEL_52:
  v44 = (int *)v135;
  v45 = sub_1C4884024(v43, (_DWORD *)v135, DWORD2(v135), v17);
  v46 = *v44;
  v47 = v44[1];
  if (v44 != (int *)&v136)
    free(v44);
  v137 = 0;
  v135 = 0u;
  v136 = 0u;
  sub_1C487D4BC((uint64_t)&v135, v18, v46, v47, a5);
  v48 = a12[1];
  v49 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
  v125 = (llvm::MachineFunction *)v128;
  if (v128)
    llvm::MetadataTracking::track((uint64_t)&v125, v128, 2);
  v50 = v48 + 48 * v45;
  v51 = *((_QWORD *)v49 + 28);
  if (v51)
    *((_QWORD *)v49 + 28) = *(_QWORD *)v51;
  else
    v51 = sub_1C484358C((uint64_t)v49 + 128, 72, 3);
  v131 = (unsigned __int8 *)v125;
  if (v125)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v125, (unsigned __int8 *)v125, (uint64_t)&v131);
    v125 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v51, v49, v50, &v131, 0);
  if (v131)
    llvm::MetadataTracking::untrack((uint64_t)&v131, v131);
  if (v125)
    llvm::MetadataTracking::untrack((uint64_t)&v125, (unsigned __int8 *)v125);
  v64 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v51 + 24) = v64;
  v65 = *(_QWORD *)(v64 + 32);
  v66 = *(unsigned int *)(v51 + 40);
  if ((_DWORD)v66)
  {
    v93 = *(_QWORD *)(v51 + 32);
    v94 = *(_QWORD *)(v65 + 40);
    v95 = 32 * v66;
    do
    {
      if (!*(_BYTE *)v93)
      {
        v96 = *(unsigned int *)(v93 + 4);
        if ((int)v96 >= 0)
          v97 = (uint64_t *)(*(_QWORD *)(v94 + 272) + 8 * v96);
        else
          v97 = (uint64_t *)(*(_QWORD *)(v94 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8);
        v98 = *v97;
        if (*v97)
        {
          v99 = *(_QWORD *)(v98 + 16);
          *(_QWORD *)(v98 + 16) = v93;
          *(_QWORD *)(v93 + 16) = v99;
          if ((*(_BYTE *)(v93 + 3) & 1) != 0)
          {
            *(_QWORD *)(v93 + 24) = v98;
          }
          else
          {
            *(_QWORD *)(v93 + 24) = 0;
            v97 = (uint64_t *)(v99 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v93 + 16) = v93;
          *(_QWORD *)(v93 + 24) = 0;
        }
        *v97 = v93;
      }
      v93 += 32;
      v95 -= 32;
    }
    while (v95);
  }
  v67 = *(_QWORD *)(v65 + 728);
  if (v67)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v67 + 24))(v67, v51);
  v68 = *v20 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v51 = v68 | *(_QWORD *)v51 & 7;
  *(_QWORD *)(v51 + 8) = v20;
  *(_QWORD *)(v68 + 8) = v51;
  *v20 = *v20 & 7 | v51;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  LODWORD(v131) = 0x1000000;
  HIDWORD(v131) = v119;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v131);
  LODWORD(v131) = 1;
  v132 = 0;
  v133 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v131);
  v125 = v49;
  v126 = v51;
  sub_1C487D610((uint64_t)&v135, &v125);
  LODWORD(v131) = 1;
  v132 = 0;
  v133 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v131);
  v132 = 0;
  v133 = 0;
  v134 = 0;
  LODWORD(v131) = 0x2000000;
  HIDWORD(v131) = v119;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v131);
LABEL_115:
  if (v128)
    llvm::MetadataTracking::untrack((uint64_t)&v128, v128);
}

void sub_1C487B4C8(uint64_t a1, llvm::MachineBasicBlock *a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, char a12, char a13, uint64_t *a14)
{
  _BYTE *v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t FirstTerminator;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  llvm::MachineFunction *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int *v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  llvm::MachineFunction *v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int *v59;
  unsigned int v60;
  int v61;
  int v62;
  uint64_t v63;
  llvm::MachineFunction *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  llvm::MachineFunction *v72;
  llvm::MachineInstr *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  llvm::MachineFunction *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  llvm::MachineFunction *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  llvm::MachineFunction *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  unsigned int v159;
  unsigned __int8 *v162;
  unsigned __int8 *v163;
  unsigned __int8 *v164;
  llvm::MachineFunction *v165;
  unint64_t v166;
  uint64_t v167;
  unsigned __int8 *v168;
  char v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v169 = 0;
  v19 = *(_BYTE **)(*((_QWORD *)a2 + 4) + 16);
  v20 = v19[318];
  if (v19[318])
    v21 = 4072;
  else
    v21 = 4073;
  v159 = v21;
  v22 = sub_1C487D35C((uint64_t)a2, (llvm::TargetInstrInfo *)a14, &v169);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  v24 = (unint64_t *)FirstTerminator;
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_11:
    v168 = 0;
    if (!v22)
      goto LABEL_117;
  }
  else
  {
    v25 = FirstTerminator;
    while (1)
    {
      v26 = **(unsigned __int16 **)(v25 + 16);
      v27 = v26 > 0x17;
      v28 = (1 << v26) & 0x83E000;
      if (v27 || v28 == 0)
        break;
      v25 = *(_QWORD *)(v25 + 8);
      if ((llvm::MachineBasicBlock *)v25 == (llvm::MachineBasicBlock *)((char *)a2 + 48))
        goto LABEL_11;
    }
    v30 = *(unsigned __int8 **)(v25 + 56);
    v168 = v30;
    if (v30)
    {
      llvm::MetadataTracking::track((uint64_t)&v168, v30, 2);
      if (!v22)
        goto LABEL_117;
    }
    else if (!v22)
    {
      goto LABEL_117;
    }
  }
  v157 = a4;
  v158 = a3;
  if ((a8 & 1) != 0 || (a12 & 1) != 0 || a10)
  {
    if (a8 && (a6 & 1) == 0 && (a10 & 1) == 0)
    {
      v155 = v20;
      v31 = v168;
LABEL_25:
      v32 = a14[1];
      v33 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
      v171 = v31;
      if (v31)
        llvm::MetadataTracking::track((uint64_t)&v171, v31, 2);
      v34 = v32 + 48 * v159;
      v35 = *((_QWORD *)v33 + 28);
      if (v35)
        *((_QWORD *)v33 + 28) = *(_QWORD *)v35;
      else
        v35 = sub_1C484358C((uint64_t)v33 + 128, 72, 3);
      *(_QWORD *)&v175 = v171;
      if (v171)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v171, v171, (uint64_t)&v175);
        v171 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v35, v33, v34, (unsigned __int8 **)&v175, 0);
      if ((_QWORD)v175)
        llvm::MetadataTracking::untrack((uint64_t)&v175, (unsigned __int8 *)v175);
      if (v171)
        llvm::MetadataTracking::untrack((uint64_t)&v171, v171);
      v36 = *((_QWORD *)a2 + 5);
      *(_QWORD *)(v35 + 24) = v36;
      v37 = *(_QWORD *)(v36 + 32);
      v38 = *(unsigned int *)(v35 + 40);
      if ((_DWORD)v38)
      {
        v123 = *(_QWORD *)(v35 + 32);
        v124 = *(_QWORD *)(v37 + 40);
        v125 = 32 * v38;
        do
        {
          if (!*(_BYTE *)v123)
          {
            v126 = *(unsigned int *)(v123 + 4);
            if ((int)v126 >= 0)
              v127 = (uint64_t *)(*(_QWORD *)(v124 + 272) + 8 * v126);
            else
              v127 = (uint64_t *)(*(_QWORD *)(v124 + 24) + 16 * (v126 & 0x7FFFFFFF) + 8);
            v128 = *v127;
            if (*v127)
            {
              v129 = *(_QWORD *)(v128 + 16);
              *(_QWORD *)(v128 + 16) = v123;
              *(_QWORD *)(v123 + 16) = v129;
              if ((*(_BYTE *)(v123 + 3) & 1) != 0)
              {
                *(_QWORD *)(v123 + 24) = v128;
              }
              else
              {
                *(_QWORD *)(v123 + 24) = 0;
                v127 = (uint64_t *)(v129 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v123 + 16) = v123;
              *(_QWORD *)(v123 + 24) = 0;
            }
            *v127 = v123;
          }
          v123 += 32;
          v125 -= 32;
        }
        while (v125);
      }
      v39 = *(_QWORD *)(v37 + 728);
      if (v39)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 24))(v39, v35);
      v40 = *v24 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v35 = v40 | *(_QWORD *)v35 & 7;
      *(_QWORD *)(v35 + 8) = v24;
      *(_QWORD *)(v40 + 8) = v35;
      *v24 = *v24 & 7 | v35;
      *((_QWORD *)&v175 + 1) = 0;
      v176 = 0uLL;
      LODWORD(v175) = 0x1000000;
      DWORD1(v175) = a5;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v175);
      LODWORD(v175) = 1;
      *((_QWORD *)&v175 + 1) = 0;
      *(_QWORD *)&v176 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v175);
      LODWORD(v175) = 1;
      if (a6)
        v41 = a11;
      else
        v41 = a9;
      *((_QWORD *)&v175 + 1) = 0;
      *(_QWORD *)&v176 = v41;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v175);
      v20 = v155;
      a4 = v157;
      goto LABEL_43;
    }
    v31 = v168;
    if ((a10 & ~(_BYTE)a6 & 1) == 0 && (a8 & 1) == 0)
    {
      v155 = v20;
      goto LABEL_25;
    }
    LODWORD(v171) = 1;
    v172 = 0;
    v173 = a9;
    LODWORD(v165) = 1;
    v166 = 0;
    v167 = a11;
    v164 = v168;
    if (v168)
      llvm::MetadataTracking::track((uint64_t)&v164, v168, 2);
    v72 = sub_1C487D784((uint64_t)a2, v24, &v164, v22, v19, (uint64_t)a14, a5, a6, 0, (const llvm::MachineOperand *)&v171, (const llvm::MachineOperand *)&v165);
    *((_QWORD *)&v175 + 1) = 0;
    v176 = 0uLL;
    LODWORD(v175) = 0x2000000;
    DWORD1(v175) = a4;
    llvm::MachineInstr::addOperand(v73, v72, (const llvm::MachineOperand *)&v175);
    if (v164)
      llvm::MetadataTracking::untrack((uint64_t)&v164, v164);
  }
LABEL_43:
  if (a7)
  {
    if ((a7 + 2) <= 0xFF)
    {
      *((_QWORD *)&v175 + 1) = 0;
      v176 = 0uLL;
      LODWORD(v175) = 0;
      DWORD1(v175) = a4;
      LODWORD(v171) = 1;
      v172 = 0;
      v173 = (a7 + 2);
      v163 = v168;
      if (v168)
        llvm::MetadataTracking::track((uint64_t)&v163, v168, 2);
      sub_1C487D784((uint64_t)a2, v24, &v163, v22, v19, (uint64_t)a14, a4, a6, v20 != 0, (const llvm::MachineOperand *)&v175, (const llvm::MachineOperand *)&v171);
      if (v163)
        llvm::MetadataTracking::untrack((uint64_t)&v163, v163);
      v162 = v168;
      if (v168)
      {
        llvm::MetadataTracking::track((uint64_t)&v162, v168, 2);
        v42 = v162;
      }
      else
      {
        v42 = 0;
      }
      sub_1C487DAB0((uint64_t)a2, v24, a4, v19, a14[1], v42, 0);
      if (v162)
        llvm::MetadataTracking::untrack((uint64_t)&v162, v162);
      goto LABEL_117;
    }
    v55 = **(unsigned __int16 **)(v22 + 16);
    v56 = sub_1C4888570(v55);
    v57 = sub_1C488859C(v55);
    sub_1C4888770(v56, (uint64_t)&v175);
    v156 = v20;
    if (v57 == 48)
    {
      v153 = v19[318] == 0;
      v154 = 19;
    }
    else
    {
      if (v57 != 47)
      {
        v58 = 39;
LABEL_63:
        v59 = (int *)v175;
        v60 = sub_1C4884024(v58, (_DWORD *)v175, DWORD2(v175), v19);
        v61 = *v59;
        v62 = v59[1];
        if (v59 != (int *)&v176)
          free(v59);
        v177 = 0;
        v175 = 0u;
        v176 = 0u;
        sub_1C487D4BC((uint64_t)&v175, v22, v61, v62, a6 ^ 1);
        v63 = a14[1];
        v64 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
        v165 = (llvm::MachineFunction *)v168;
        if (v168)
          llvm::MetadataTracking::track((uint64_t)&v165, v168, 2);
        v65 = v63 + 48 * v60;
        v66 = *((_QWORD *)v64 + 28);
        a3 = v158;
        if (v66)
          *((_QWORD *)v64 + 28) = *(_QWORD *)v66;
        else
          v66 = sub_1C484358C((uint64_t)v64 + 128, 72, 3);
        v171 = (unsigned __int8 *)v165;
        if (v165)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v165, (unsigned __int8 *)v165, (uint64_t)&v171);
          v165 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v66, v64, v65, &v171, 0);
        if (v171)
          llvm::MetadataTracking::untrack((uint64_t)&v171, v171);
        if (v165)
          llvm::MetadataTracking::untrack((uint64_t)&v165, (unsigned __int8 *)v165);
        v74 = *((_QWORD *)a2 + 5);
        *(_QWORD *)(v66 + 24) = v74;
        v75 = *(_QWORD *)(v74 + 32);
        v76 = *(unsigned int *)(v66 + 40);
        if ((_DWORD)v76)
        {
          v139 = *(_QWORD *)(v66 + 32);
          v140 = *(_QWORD *)(v75 + 40);
          v141 = 32 * v76;
          do
          {
            if (!*(_BYTE *)v139)
            {
              v142 = *(unsigned int *)(v139 + 4);
              if ((int)v142 >= 0)
                v143 = (uint64_t *)(*(_QWORD *)(v140 + 272) + 8 * v142);
              else
                v143 = (uint64_t *)(*(_QWORD *)(v140 + 24) + 16 * (v142 & 0x7FFFFFFF) + 8);
              v144 = *v143;
              if (*v143)
              {
                v145 = *(_QWORD *)(v144 + 16);
                *(_QWORD *)(v144 + 16) = v139;
                *(_QWORD *)(v139 + 16) = v145;
                if ((*(_BYTE *)(v139 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v139 + 24) = v144;
                }
                else
                {
                  *(_QWORD *)(v139 + 24) = 0;
                  v143 = (uint64_t *)(v145 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v139 + 16) = v139;
                *(_QWORD *)(v139 + 24) = 0;
              }
              *v143 = v139;
            }
            v139 += 32;
            v141 -= 32;
          }
          while (v141);
        }
        v77 = *(_QWORD *)(v75 + 728);
        if (v77)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v77 + 24))(v77, v66);
        v78 = *v24 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v66 = v78 | *(_QWORD *)v66 & 7;
        *(_QWORD *)(v66 + 8) = v24;
        *(_QWORD *)(v78 + 8) = v66;
        *v24 = *v24 & 7 | v66;
        v172 = 0;
        v173 = 0;
        v174 = 0;
        LODWORD(v171) = 0x1000000;
        HIDWORD(v171) = v157;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v66, v64, (const llvm::MachineOperand *)&v171);
        LODWORD(v171) = 1;
        v172 = 0;
        v173 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v66, v64, (const llvm::MachineOperand *)&v171);
        v165 = v64;
        v166 = v66;
        sub_1C487D610((uint64_t)&v175, &v165);
        LODWORD(v171) = 1;
        v172 = 0;
        v173 = 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v66, v64, (const llvm::MachineOperand *)&v171);
        v172 = 0;
        v173 = 0;
        v174 = 0;
        LODWORD(v171) = 0x2000000;
        HIDWORD(v171) = v157;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v66, v64, (const llvm::MachineOperand *)&v171);
        v79 = a14[1];
        if (v156)
          v80 = 195600;
        else
          v80 = 195504;
        v81 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
        v170 = v168;
        if (v168)
          llvm::MetadataTracking::track((uint64_t)&v170, v168, 2);
        v82 = v79 + v80;
        v83 = *((_QWORD *)v81 + 28);
        if (v83)
          *((_QWORD *)v81 + 28) = *(_QWORD *)v83;
        else
          v83 = sub_1C484358C((uint64_t)v81 + 128, 72, 3);
        v171 = v170;
        if (v170)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v170, v170, (uint64_t)&v171);
          v170 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v83, v81, v82, &v171, 0);
        if (v171)
          llvm::MetadataTracking::untrack((uint64_t)&v171, v171);
        if (v170)
          llvm::MetadataTracking::untrack((uint64_t)&v170, v170);
        v84 = *((_QWORD *)a2 + 5);
        *(_QWORD *)(v83 + 24) = v84;
        v85 = *(_QWORD *)(v84 + 32);
        v86 = *(unsigned int *)(v83 + 40);
        if ((_DWORD)v86)
        {
          v146 = *(_QWORD *)(v83 + 32);
          v147 = *(_QWORD *)(v85 + 40);
          v148 = 32 * v86;
          do
          {
            if (!*(_BYTE *)v146)
            {
              v149 = *(unsigned int *)(v146 + 4);
              if ((int)v149 >= 0)
                v150 = (uint64_t *)(*(_QWORD *)(v147 + 272) + 8 * v149);
              else
                v150 = (uint64_t *)(*(_QWORD *)(v147 + 24) + 16 * (v149 & 0x7FFFFFFF) + 8);
              v151 = *v150;
              if (*v150)
              {
                v152 = *(_QWORD *)(v151 + 16);
                *(_QWORD *)(v151 + 16) = v146;
                *(_QWORD *)(v146 + 16) = v152;
                if ((*(_BYTE *)(v146 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v146 + 24) = v151;
                }
                else
                {
                  *(_QWORD *)(v146 + 24) = 0;
                  v150 = (uint64_t *)(v152 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v146 + 16) = v146;
                *(_QWORD *)(v146 + 24) = 0;
              }
              *v150 = v146;
            }
            v146 += 32;
            v148 -= 32;
          }
          while (v148);
        }
        v87 = *(_QWORD *)(v85 + 728);
        if (v87)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v87 + 24))(v87, v83);
        v88 = *v24 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v83 = v88 | *(_QWORD *)v83 & 7;
        *(_QWORD *)(v83 + 8) = v24;
        *(_QWORD *)(v88 + 8) = v83;
        *v24 = *v24 & 7 | v83;
        v172 = 0;
        v173 = 0;
        v174 = 0;
        LODWORD(v171) = 0x1000000;
        HIDWORD(v171) = v157;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v171);
        LODWORD(v171) = 1;
        v172 = 0;
        v173 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v171);
        LODWORD(v171) = 1;
        v172 = 0;
        v173 = (a7 + 3);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v171);
        if (!v156)
          sub_1C487DD78(a2, v24, (uint64_t)a14, v157, v19);
        sub_1C487E0A4(a2, 1, &v168, v157, (uint64_t)a14, 0, 1u);
        goto LABEL_117;
      }
      v153 = v19[318] == 0;
      v154 = 5;
    }
    if (v153)
      v58 = 33;
    else
      v58 = v154;
    goto LABEL_63;
  }
  v43 = **(unsigned __int16 **)(v22 + 16);
  v44 = sub_1C4888570(v43);
  v45 = sub_1C488859C(v43);
  sub_1C4888770(v44, (uint64_t)&v175);
  if (v45 == 48)
  {
    v137 = v19[318] == 0;
    v138 = 18;
    goto LABEL_237;
  }
  if (v45 == 47)
  {
    v137 = v19[318] == 0;
    v138 = 4;
LABEL_237:
    if (v137)
      v46 = 32;
    else
      v46 = v138;
    goto LABEL_54;
  }
  v46 = 38;
LABEL_54:
  v47 = (int *)v175;
  v48 = sub_1C4884024(v46, (_DWORD *)v175, DWORD2(v175), v19);
  v49 = *v47;
  v50 = v47[1];
  if (v47 != (int *)&v176)
    free(v47);
  v177 = 0;
  v175 = 0u;
  v176 = 0u;
  sub_1C487D4BC((uint64_t)&v175, v22, v49, v50, a6);
  v51 = a14[1];
  v52 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
  v165 = (llvm::MachineFunction *)v168;
  if (v168)
    llvm::MetadataTracking::track((uint64_t)&v165, v168, 2);
  v53 = v51 + 48 * v48;
  v54 = *((_QWORD *)v52 + 28);
  if (v54)
    *((_QWORD *)v52 + 28) = *(_QWORD *)v54;
  else
    v54 = sub_1C484358C((uint64_t)v52 + 128, 72, 3);
  v171 = (unsigned __int8 *)v165;
  if (v165)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v165, (unsigned __int8 *)v165, (uint64_t)&v171);
    v165 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v54, v52, v53, &v171, 0);
  if (v171)
    llvm::MetadataTracking::untrack((uint64_t)&v171, v171);
  if (v165)
    llvm::MetadataTracking::untrack((uint64_t)&v165, (unsigned __int8 *)v165);
  v67 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v54 + 24) = v67;
  v68 = *(_QWORD *)(v67 + 32);
  v69 = *(unsigned int *)(v54 + 40);
  if ((_DWORD)v69)
  {
    v130 = *(_QWORD *)(v54 + 32);
    v131 = *(_QWORD *)(v68 + 40);
    v132 = 32 * v69;
    do
    {
      if (!*(_BYTE *)v130)
      {
        v133 = *(unsigned int *)(v130 + 4);
        if ((int)v133 >= 0)
          v134 = (uint64_t *)(*(_QWORD *)(v131 + 272) + 8 * v133);
        else
          v134 = (uint64_t *)(*(_QWORD *)(v131 + 24) + 16 * (v133 & 0x7FFFFFFF) + 8);
        v135 = *v134;
        if (*v134)
        {
          v136 = *(_QWORD *)(v135 + 16);
          *(_QWORD *)(v135 + 16) = v130;
          *(_QWORD *)(v130 + 16) = v136;
          if ((*(_BYTE *)(v130 + 3) & 1) != 0)
          {
            *(_QWORD *)(v130 + 24) = v135;
          }
          else
          {
            *(_QWORD *)(v130 + 24) = 0;
            v134 = (uint64_t *)(v136 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v130 + 16) = v130;
          *(_QWORD *)(v130 + 24) = 0;
        }
        *v134 = v130;
      }
      v130 += 32;
      v132 -= 32;
    }
    while (v132);
  }
  v70 = *(_QWORD *)(v68 + 728);
  if (v70)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v70 + 24))(v70, v54);
  v71 = *v24 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v54 = v71 | *(_QWORD *)v54 & 7;
  *(_QWORD *)(v54 + 8) = v24;
  *(_QWORD *)(v71 + 8) = v54;
  *v24 = *v24 & 7 | v54;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  LODWORD(v171) = 0x1000000;
  HIDWORD(v171) = v157;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v52, (const llvm::MachineOperand *)&v171);
  LODWORD(v171) = 1;
  v172 = 0;
  v173 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v52, (const llvm::MachineOperand *)&v171);
  v165 = v52;
  v166 = v54;
  sub_1C487D610((uint64_t)&v175, &v165);
  LODWORD(v171) = 1;
  v172 = 0;
  v173 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v52, (const llvm::MachineOperand *)&v171);
  v172 = 0;
  v173 = 0;
  v174 = 0;
  LODWORD(v171) = 0x2000000;
  HIDWORD(v171) = v157;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v52, (const llvm::MachineOperand *)&v171);
  a3 = v158;
LABEL_117:
  v89 = v168;
  if (a5 && (a13 & 1) == 0)
  {
    v90 = a14[1];
    v91 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
    v171 = v168;
    if (v168)
      llvm::MetadataTracking::track((uint64_t)&v171, v168, 2);
    v92 = v90 + 48 * v159;
    v93 = *((_QWORD *)v91 + 28);
    if (v93)
      *((_QWORD *)v91 + 28) = *(_QWORD *)v93;
    else
      v93 = sub_1C484358C((uint64_t)v91 + 128, 72, 3);
    *(_QWORD *)&v175 = v171;
    if (v171)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v171, v171, (uint64_t)&v175);
      v171 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v93, v91, v92, (unsigned __int8 **)&v175, 0);
    if ((_QWORD)v175)
      llvm::MetadataTracking::untrack((uint64_t)&v175, (unsigned __int8 *)v175);
    if (v171)
      llvm::MetadataTracking::untrack((uint64_t)&v171, v171);
    v94 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v93 + 24) = v94;
    v95 = *(_QWORD *)(v94 + 32);
    v96 = *(unsigned int *)(v93 + 40);
    if ((_DWORD)v96)
    {
      v116 = *(_QWORD *)(v93 + 32);
      v117 = *(_QWORD *)(v95 + 40);
      v118 = 32 * v96;
      do
      {
        if (!*(_BYTE *)v116)
        {
          v119 = *(unsigned int *)(v116 + 4);
          if ((int)v119 >= 0)
            v120 = (uint64_t *)(*(_QWORD *)(v117 + 272) + 8 * v119);
          else
            v120 = (uint64_t *)(*(_QWORD *)(v117 + 24) + 16 * (v119 & 0x7FFFFFFF) + 8);
          v121 = *v120;
          if (*v120)
          {
            v122 = *(_QWORD *)(v121 + 16);
            *(_QWORD *)(v121 + 16) = v116;
            *(_QWORD *)(v116 + 16) = v122;
            if ((*(_BYTE *)(v116 + 3) & 1) != 0)
            {
              *(_QWORD *)(v116 + 24) = v121;
            }
            else
            {
              *(_QWORD *)(v116 + 24) = 0;
              v120 = (uint64_t *)(v122 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v116 + 16) = v116;
            *(_QWORD *)(v116 + 24) = 0;
          }
          *v120 = v116;
        }
        v116 += 32;
        v118 -= 32;
      }
      while (v118);
    }
    v97 = *(_QWORD *)(v95 + 728);
    if (v97)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v97 + 24))(v97, v93);
    v98 = *v24 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v93 = v98 | *(_QWORD *)v93 & 7;
    *(_QWORD *)(v93 + 8) = v24;
    *(_QWORD *)(v98 + 8) = v93;
    *v24 = *v24 & 7 | v93;
    *((_QWORD *)&v175 + 1) = 0;
    v176 = 0uLL;
    LODWORD(v175) = 0x1000000;
    DWORD1(v175) = a5;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v93, v91, (const llvm::MachineOperand *)&v175);
    LODWORD(v175) = 1;
    *((_QWORD *)&v175 + 1) = 0;
    *(_QWORD *)&v176 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v93, v91, (const llvm::MachineOperand *)&v175);
    LODWORD(v175) = 1;
    *((_QWORD *)&v175 + 1) = 0;
    *(_QWORD *)&v176 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v93, v91, (const llvm::MachineOperand *)&v175);
    v89 = v168;
  }
  v99 = a14[1];
  if (v19[327])
    v100 = 29856;
  else
    v100 = 30624;
  v101 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
  v171 = v89;
  if (v89)
    llvm::MetadataTracking::track((uint64_t)&v171, v89, 2);
  v102 = v99 + v100;
  v103 = *((_QWORD *)v101 + 28);
  if (v103)
    *((_QWORD *)v101 + 28) = *(_QWORD *)v103;
  else
    v103 = sub_1C484358C((uint64_t)v101 + 128, 72, 3);
  *(_QWORD *)&v175 = v171;
  if (v171)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v171, v171, (uint64_t)&v175);
    v171 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v103, v101, v102, (unsigned __int8 **)&v175, 0);
  if ((_QWORD)v175)
    llvm::MetadataTracking::untrack((uint64_t)&v175, (unsigned __int8 *)v175);
  if (v171)
    llvm::MetadataTracking::untrack((uint64_t)&v171, v171);
  v104 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v103 + 24) = v104;
  v105 = *(_QWORD *)(v104 + 32);
  v106 = *(unsigned int *)(v103 + 40);
  if ((_DWORD)v106)
  {
    v109 = *(_QWORD *)(v103 + 32);
    v110 = *(_QWORD *)(v105 + 40);
    v111 = 32 * v106;
    do
    {
      if (!*(_BYTE *)v109)
      {
        v112 = *(unsigned int *)(v109 + 4);
        if ((int)v112 >= 0)
          v113 = (uint64_t *)(*(_QWORD *)(v110 + 272) + 8 * v112);
        else
          v113 = (uint64_t *)(*(_QWORD *)(v110 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
        v114 = *v113;
        if (*v113)
        {
          v115 = *(_QWORD *)(v114 + 16);
          *(_QWORD *)(v114 + 16) = v109;
          *(_QWORD *)(v109 + 16) = v115;
          if ((*(_BYTE *)(v109 + 3) & 1) != 0)
          {
            *(_QWORD *)(v109 + 24) = v114;
          }
          else
          {
            *(_QWORD *)(v109 + 24) = 0;
            v113 = (uint64_t *)(v115 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v109 + 16) = v109;
          *(_QWORD *)(v109 + 24) = 0;
        }
        *v113 = v109;
      }
      v109 += 32;
      v111 -= 32;
    }
    while (v111);
  }
  v107 = *(_QWORD *)(v105 + 728);
  if (v107)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v107 + 24))(v107, v103);
  v108 = *v24 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v103 = v108 | *(_QWORD *)v103 & 7;
  *(_QWORD *)(v103 + 8) = v24;
  *(_QWORD *)(v108 + 8) = v103;
  *v24 = *v24 & 7 | v103;
  *((_QWORD *)&v175 + 1) = 0;
  *(_QWORD *)&v176 = a3;
  LODWORD(v175) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v103, v101, (const llvm::MachineOperand *)&v175);
  if (v168)
    llvm::MetadataTracking::untrack((uint64_t)&v168, v168);
}

void sub_1C487C594(uint64_t a1, llvm::MachineBasicBlock *a2, unsigned int a3, int a4, uint64_t a5, int a6)
{
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned __int8 *v18;

  v11 = *((_QWORD *)a2 + 7);
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)v11)
  {
LABEL_19:
    v18 = 0;
  }
  else
  {
    while (1)
    {
      v12 = **(unsigned __int16 **)(v11 + 16);
      v13 = v12 > 0x17;
      v14 = (1 << v12) & 0x83E000;
      if (v13 || v14 == 0)
        break;
      v11 = *(_QWORD *)(v11 + 8);
      if ((llvm::MachineBasicBlock *)v11 == (llvm::MachineBasicBlock *)((char *)a2 + 48))
        goto LABEL_19;
    }
    v16 = *(unsigned __int8 **)(v11 + 56);
    v18 = v16;
    if (v16)
      llvm::MetadataTracking::track((uint64_t)&v18, v16, 2);
  }
  if (a3 >= 2)
  {
    v17 = a3 >> 1;
    do
    {
      sub_1C487E0A4(a2, 0, &v18, a4, a5, a6, 2u);
      --v17;
    }
    while (v17);
  }
  if ((a3 & 1) != 0)
    sub_1C487E0A4(a2, 0, &v18, a4, a5, a6, 1u);
  if (v18)
    llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
}

void sub_1C487C6B0(uint64_t a1, llvm::MachineBasicBlock *a2, int a3, int a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  unsigned __int8 *v14;
  unsigned __int8 *v15;

  if (!a4 || (v9 = *((_QWORD *)a2 + 7), (llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)v9))
  {
LABEL_14:
    v15 = 0;
  }
  else
  {
    while (1)
    {
      v10 = **(unsigned __int16 **)(v9 + 16);
      v11 = v10 > 0x17;
      v12 = (1 << v10) & 0x83E000;
      if (v11 || v12 == 0)
        break;
      v9 = *(_QWORD *)(v9 + 8);
      if ((llvm::MachineBasicBlock *)v9 == (llvm::MachineBasicBlock *)((char *)a2 + 48))
        goto LABEL_14;
    }
    v14 = *(unsigned __int8 **)(v9 + 56);
    v15 = v14;
    if (v14)
      llvm::MetadataTracking::track((uint64_t)&v15, v14, 2);
  }
  sub_1C487E0A4(a2, 1, &v15, a3, a5, a4, 0xFFFFFFFF);
  if (v15)
    llvm::MetadataTracking::untrack((uint64_t)&v15, v15);
}

void sub_1C487C788(int a1, llvm::MachineBasicBlock *this, int a3, int a4, uint64_t a5)
{
  llvm::MachineBasicBlock *FirstTerminator;
  unint64_t *v10;
  llvm::MachineBasicBlock *v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  unsigned __int8 *v16;
  _QWORD *v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  int v20;
  BOOL v21;
  _BYTE *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;

  FirstTerminator = (llvm::MachineBasicBlock *)llvm::MachineBasicBlock::getFirstTerminator(this);
  v10 = (unint64_t *)FirstTerminator;
  if ((llvm::MachineBasicBlock *)((char *)this + 48) == FirstTerminator)
  {
LABEL_27:
    v24 = 0;
  }
  else
  {
    v11 = FirstTerminator;
    while (1)
    {
      v12 = **((unsigned __int16 **)v11 + 2);
      v13 = v12 > 0x17;
      v14 = (1 << v12) & 0x83E000;
      if (v13 || v14 == 0)
        break;
      v11 = (llvm::MachineBasicBlock *)*((_QWORD *)v11 + 1);
      if (v11 == (llvm::MachineBasicBlock *)((char *)this + 48))
        goto LABEL_27;
    }
    v16 = (unsigned __int8 *)*((_QWORD *)v11 + 7);
    v24 = v16;
    if (v16)
      llvm::MetadataTracking::track((uint64_t)&v24, v16, 2);
  }
  v17 = (_QWORD *)*((_QWORD *)this + 4);
  v18 = (_BYTE *)v17[2];
  if (a4
    || (v20 = (*(unsigned __int16 *)(*v17 + 18) >> 4) & 0x3FF) == 0
    || (v20 != 255 ? (v21 = v20 == 8) : (v21 = 1), v21))
  {
    v23 = v24;
    if (v24)
    {
      v22 = v18;
      llvm::MetadataTracking::track((uint64_t)&v23, v24, 2);
      v18 = v22;
      v19 = v23;
    }
    else
    {
      v19 = 0;
    }
    sub_1C487DAB0((uint64_t)this, v10, a3, v18, *(_QWORD *)(a5 + 8), v19, 2u);
    if (v23)
      llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
  }
  if (v24)
    llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
}

llvm::MachineInstr *sub_1C487C8D4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned int v7;
  unsigned int v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  llvm::MachineFunction *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  uint64_t i;
  unsigned __int16 *v17;
  int v18;
  unsigned int v19;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  unsigned __int8 *v34;
  llvm::MachineInstr *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v40;
  unsigned __int8 *v41[4];
  unsigned __int8 *v42;

  if (a2 == a3)
    return 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = a2 + 48;
  v11 = (_QWORD *)*((_QWORD *)a2 + 7);
  v12 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
  v13 = *((_QWORD *)v12 + 2);
  v14 = a2 + 48;
  v15 = a2;
  while (2)
  {
    for (i = *((_QWORD *)v15 + 7); ; i = *(_QWORD *)(i + 8))
    {
      if ((unsigned __int8 *)i == v15 + 48)
      {
        v26 = 0;
        goto LABEL_41;
      }
      v17 = *(unsigned __int16 **)(i + 16);
      v18 = *v17;
      v19 = v18 - 9;
      if ((v18 - 9) <= 0x3C && ((1 << (v18 - 9)) & 0x1000000000000605) != 0
        || v18 == 0)
      {
        goto LABEL_36;
      }
      v22 = *((_QWORD *)v17 + 1);
      if ((v22 & 0x10) != 0)
        goto LABEL_36;
      if ((*(_WORD *)(i + 44) & 0xC) != 0 && (*(_WORD *)(i + 44) & 4) == 0)
      {
        v25 = i;
        if ((v22 & 0x400) != 0)
          goto LABEL_36;
        while ((*(_WORD *)(v25 + 44) & 8) != 0)
        {
          v25 = *(_QWORD *)(v25 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v25 + 16) + 9) & 4) != 0)
            goto LABEL_36;
        }
      }
      else if ((v22 & 0x400) != 0)
      {
        goto LABEL_36;
      }
      if ((v19 > 0x3C || ((1 << v19) & 0x1000000000000605) == 0) && *v17 && (v17[8] & 1) == 0)
        break;
      ++v7;
      if (v8)
        goto LABEL_47;
      if (v7 > 0x10)
        goto LABEL_49;
      v8 = 0;
LABEL_36:
      if ((*(_BYTE *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
    }
    ++v8;
    if (v14 == v10)
      v24 = (_QWORD *)i;
    else
      v24 = v14;
    if ((v9 & 1) == 0)
      v14 = v24;
    if (v8 <= 3)
      goto LABEL_36;
LABEL_47:
    v26 = 1;
LABEL_41:
    if ((v9 & (v8 != 0)) == 0)
    {
      v15 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
      ++v7;
      if (v15 == a3)
        v27 = 1;
      else
        v27 = v26;
      v9 = 1;
      if (v27 == 1)
      {
        if (!v26)
          return 0;
        break;
      }
      continue;
    }
    break;
  }
LABEL_49:
  if (v14 == v10)
    v28 = v11;
  else
    v28 = v14;
  if (v10 == v28)
  {
LABEL_59:
    v34 = 0;
    v40 = 0;
  }
  else
  {
    v29 = v28;
    while (1)
    {
      v30 = *(unsigned __int16 *)v29[2];
      v31 = v30 > 0x17;
      v32 = (1 << v30) & 0x83E000;
      if (v31 || v32 == 0)
        break;
      v29 = (_QWORD *)v29[1];
      if (v29 == v10)
        goto LABEL_59;
    }
    v34 = (unsigned __int8 *)v29[7];
    v40 = v34;
    if (v34)
    {
      llvm::MetadataTracking::track((uint64_t)&v40, v34, 2);
      v12 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
      v34 = v40;
    }
  }
  v36 = *(_QWORD *)(a4 + 8);
  if (*(_BYTE *)(v13 + 327))
    v37 = 31392;
  else
    v37 = 32160;
  v42 = v34;
  if (v34)
    llvm::MetadataTracking::track((uint64_t)&v42, v34, 2);
  v38 = v36 + v37;
  v35 = (llvm::MachineInstr *)*((_QWORD *)v12 + 28);
  if (v35)
    *((_QWORD *)v12 + 28) = *(_QWORD *)v35;
  else
    v35 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v12 + 128, 72, 3);
  v41[0] = v42;
  if (v42)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v42, v42, (uint64_t)v41);
    v42 = 0;
  }
  llvm::MachineInstr::MachineInstr(v35, v12, v38, v41, 0);
  if (v41[0])
    llvm::MetadataTracking::untrack((uint64_t)v41, v41[0]);
  if (v42)
    llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
  if (v10 != v28 && (*((_WORD *)v28 + 22) & 4) != 0)
    *((_WORD *)v35 + 22) |= 0xCu;
  sub_1C512CA10((uint64_t *)a2 + 5, v28, (uint64_t)v35);
  v41[1] = 0;
  v41[2] = a3;
  LODWORD(v41[0]) = 4;
  llvm::MachineInstr::addOperand(v35, v12, (const llvm::MachineOperand *)v41);
  if (v40)
    llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
  return v35;
}

uint64_t sub_1C487CC1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  *(_QWORD *)(result + 16) = a3;
  return result;
}

uint64_t sub_1C487CC48(uint64_t a1)
{
  return *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 16);
}

void sub_1C487CC68(uint64_t a1, llvm::MachineBasicBlock *a2, uint64_t a3, int a4, unsigned int a5, unsigned int a6, llvm::TargetInstrInfo *a7)
{
  _BYTE *v12;
  int v13;
  unint64_t v14;
  unint64_t FirstTerminator;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::MachineFunction *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41[4];
  unsigned __int8 *v42;
  char v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v12 = *(_BYTE **)(*((_QWORD *)a2 + 4) + 16);
  v13 = v12[318];
  v14 = sub_1C487D35C((uint64_t)a2, a7, &v43);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  v16 = (unint64_t *)FirstTerminator;
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_50:
    v42 = 0;
  }
  else
  {
    v17 = FirstTerminator;
    while (1)
    {
      v18 = **(unsigned __int16 **)(v17 + 16);
      v19 = v18 > 0x17;
      v20 = (1 << v18) & 0x83E000;
      if (v19 || v20 == 0)
        break;
      v17 = *(_QWORD *)(v17 + 8);
      if ((llvm::MachineBasicBlock *)v17 == (llvm::MachineBasicBlock *)((char *)a2 + 48))
        goto LABEL_50;
    }
    v22 = *(unsigned __int8 **)(v17 + 56);
    v42 = v22;
    if (v22)
      llvm::MetadataTracking::track((uint64_t)&v42, v22, 2);
  }
  if (v14)
  {
    LODWORD(v44) = 1;
    v45 = 0;
    v46 = a5;
    LODWORD(v41[0]) = 1;
    v41[1] = 0;
    v41[2] = (unsigned __int8 *)a6;
    v40 = v42;
    if (v42)
      llvm::MetadataTracking::track((uint64_t)&v40, v42, 2);
    sub_1C487D784((uint64_t)a2, v16, &v40, v14, v12, (uint64_t)a7, a4, 0, 0, (const llvm::MachineOperand *)&v44, (const llvm::MachineOperand *)v41);
    if (v40)
      llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
  }
  else
  {
    v23 = *((_QWORD *)a7 + 1);
    if (v13)
      v24 = 195456;
    else
      v24 = 195504;
    v25 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
    v41[0] = v42;
    if (v42)
      llvm::MetadataTracking::track((uint64_t)v41, v42, 2);
    v26 = v23 + v24;
    v27 = *((_QWORD *)v25 + 28);
    if (v27)
      *((_QWORD *)v25 + 28) = *(_QWORD *)v27;
    else
      v27 = sub_1C484358C((uint64_t)v25 + 128, 72, 3);
    v44 = v41[0];
    if (v41[0])
    {
      llvm::MetadataTracking::retrack((uint64_t)v41, v41[0], (uint64_t)&v44);
      v41[0] = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v27, v25, v26, &v44, 0);
    if (v44)
      llvm::MetadataTracking::untrack((uint64_t)&v44, v44);
    if (v41[0])
      llvm::MetadataTracking::untrack((uint64_t)v41, v41[0]);
    v28 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v27 + 24) = v28;
    v29 = *(_QWORD *)(v28 + 32);
    v30 = *(unsigned int *)(v27 + 40);
    if ((_DWORD)v30)
    {
      v33 = *(_QWORD *)(v27 + 32);
      v34 = *(_QWORD *)(v29 + 40);
      v35 = 32 * v30;
      do
      {
        if (!*(_BYTE *)v33)
        {
          v36 = *(unsigned int *)(v33 + 4);
          if ((int)v36 >= 0)
            v37 = (uint64_t *)(*(_QWORD *)(v34 + 272) + 8 * v36);
          else
            v37 = (uint64_t *)(*(_QWORD *)(v34 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
          v38 = *v37;
          if (*v37)
          {
            v39 = *(_QWORD *)(v38 + 16);
            *(_QWORD *)(v38 + 16) = v33;
            *(_QWORD *)(v33 + 16) = v39;
            if ((*(_BYTE *)(v33 + 3) & 1) != 0)
            {
              *(_QWORD *)(v33 + 24) = v38;
            }
            else
            {
              *(_QWORD *)(v33 + 24) = 0;
              v37 = (uint64_t *)(v39 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v33 + 16) = v33;
            *(_QWORD *)(v33 + 24) = 0;
          }
          *v37 = v33;
        }
        v33 += 32;
        v35 -= 32;
      }
      while (v35);
    }
    v31 = *(_QWORD *)(v29 + 728);
    if (v31)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 24))(v31, v27);
    v32 = *v16 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v27 = v32 | *(_QWORD *)v27 & 7;
    *(_QWORD *)(v27 + 8) = v16;
    *(_QWORD *)(v32 + 8) = v27;
    *v16 = *v16 & 7 | v27;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    LODWORD(v44) = 0x1000000;
    HIDWORD(v44) = a4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v25, (const llvm::MachineOperand *)&v44);
    LODWORD(v44) = 1;
    v45 = 0;
    v46 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v25, (const llvm::MachineOperand *)&v44);
    LODWORD(v44) = 1;
    v45 = 0;
    v46 = a5;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v25, (const llvm::MachineOperand *)&v44);
  }
  if (v42)
    llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
}

void sub_1C487CFE4(uint64_t a1, _QWORD *a2, int a3, int a4, unsigned int a5, int a6, uint64_t a7)
{
  unint64_t *v13;
  llvm::MachineFunction *v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v13 = (unint64_t *)a2[7];
  v14 = (llvm::MachineFunction *)a2[4];
  v15 = (_BYTE *)*((_QWORD *)v14 + 2);
  if (a2 + 6 == v13)
  {
LABEL_45:
    v22 = 0;
    v40 = 0;
  }
  else
  {
    v16 = a2[7];
    while (1)
    {
      v17 = **(unsigned __int16 **)(v16 + 16);
      v18 = v17 > 0x17;
      v19 = (1 << v17) & 0x83E000;
      if (v18 || v19 == 0)
        break;
      v16 = *(_QWORD *)(v16 + 8);
      if ((_QWORD *)v16 == a2 + 6)
        goto LABEL_45;
    }
    v21 = *(unsigned __int8 **)(v16 + 56);
    v40 = v21;
    if (v21)
    {
      llvm::MetadataTracking::track((uint64_t)&v40, v21, 2);
      v14 = (llvm::MachineFunction *)a2[4];
      v22 = v40;
    }
    else
    {
      v22 = 0;
    }
  }
  if (a6)
    v23 = 37;
  else
    v23 = 39;
  v24 = sub_1C4885524(v23, 311, v15);
  v25 = *(_QWORD *)(a7 + 8);
  v41 = v22;
  if (v22)
    llvm::MetadataTracking::track((uint64_t)&v41, v22, 2);
  v26 = v25 + 48 * v24;
  v27 = *((_QWORD *)v14 + 28);
  if (v27)
    *((_QWORD *)v14 + 28) = *(_QWORD *)v27;
  else
    v27 = sub_1C484358C((uint64_t)v14 + 128, 72, 3);
  v42 = v41;
  if (v41)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v41, v41, (uint64_t)&v42);
    v41 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v27, v14, v26, &v42, 0);
  if (v42)
    llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
  if (v41)
    llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
  v28 = a2[5];
  *(_QWORD *)(v27 + 24) = v28;
  v29 = *(_QWORD *)(v28 + 32);
  v30 = *(unsigned int *)(v27 + 40);
  if ((_DWORD)v30)
  {
    v33 = *(_QWORD *)(v27 + 32);
    v34 = *(_QWORD *)(v29 + 40);
    v35 = 32 * v30;
    do
    {
      if (!*(_BYTE *)v33)
      {
        v36 = *(unsigned int *)(v33 + 4);
        if ((int)v36 >= 0)
          v37 = (uint64_t *)(*(_QWORD *)(v34 + 272) + 8 * v36);
        else
          v37 = (uint64_t *)(*(_QWORD *)(v34 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
        v38 = *v37;
        if (*v37)
        {
          v39 = *(_QWORD *)(v38 + 16);
          *(_QWORD *)(v38 + 16) = v33;
          *(_QWORD *)(v33 + 16) = v39;
          if ((*(_BYTE *)(v33 + 3) & 1) != 0)
          {
            *(_QWORD *)(v33 + 24) = v38;
          }
          else
          {
            *(_QWORD *)(v33 + 24) = 0;
            v37 = (uint64_t *)(v39 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v33 + 16) = v33;
          *(_QWORD *)(v33 + 24) = 0;
        }
        *v37 = v33;
      }
      v33 += 32;
      v35 -= 32;
    }
    while (v35);
  }
  v31 = *(_QWORD *)(v29 + 728);
  if (v31)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 24))(v31, v27);
  v32 = *v13 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v27 = v32 | *(_QWORD *)v27 & 7;
  *(_QWORD *)(v27 + 8) = v13;
  *(_QWORD *)(v32 + 8) = v27;
  *v13 = *v13 & 7 | v27;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  LODWORD(v42) = 0x1000000;
  HIDWORD(v42) = a3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v14, (const llvm::MachineOperand *)&v42);
  LODWORD(v42) = 1;
  v43 = 0;
  v44 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v14, (const llvm::MachineOperand *)&v42);
  LODWORD(v42) = 1;
  v43 = 0;
  v44 = 8;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v14, (const llvm::MachineOperand *)&v42);
  v43 = 0;
  v44 = 0;
  LODWORD(v42) = 0;
  HIDWORD(v42) = a4;
  v45 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v14, (const llvm::MachineOperand *)&v42);
  LODWORD(v42) = 1;
  v43 = 0;
  v44 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v14, (const llvm::MachineOperand *)&v42);
  LODWORD(v42) = 1;
  v43 = 0;
  v44 = a5;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v14, (const llvm::MachineOperand *)&v42);
  LODWORD(v42) = 1;
  v43 = 0;
  v44 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v14, (const llvm::MachineOperand *)&v42);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  LODWORD(v42) = 0x2000000;
  HIDWORD(v42) = a3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v14, (const llvm::MachineOperand *)&v42);
  if (v40)
    llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
}

unint64_t sub_1C487D35C(uint64_t a1, llvm::TargetInstrInfo *a2, _BYTE *a3)
{
  uint64_t v3;
  unint64_t v7;
  unsigned __int16 *v8;
  int v9;
  BOOL v10;
  BOOL v11;
  int v12;

  v3 = *(_QWORD *)(a1 + 56);
  if (a1 + 48 == v3)
    return 0;
  v7 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (!v7 || (*(_BYTE *)v7 & 4) == 0)
  {
    while ((*(_WORD *)(v7 + 44) & 4) != 0)
      v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    v8 = *(unsigned __int16 **)(v7 + 16);
    v9 = *v8;
    v10 = (v9 - 9) > 0x3C || ((1 << (v9 - 9)) & 0x1000000000000605) == 0;
    v11 = !v10 || v9 == 0;
    if (!v11 && (v8[4] & 0x10) == 0)
      break;
    if (v7 == v3)
      return 0;
    v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
    if (!v7 || (*(_BYTE *)v7 & 4) == 0)
    {
      while ((*(_WORD *)(v7 + 44) & 4) != 0)
        v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  while (1)
  {
    v12 = sub_1C488859C(**(unsigned __int16 **)(v7 + 16));
    if ((v12 - 47) <= 1)
      break;
    *a3 = 0;
    if (v12 == 49)
      return v7;
    if (v7 != *(_QWORD *)(a1 + 56))
    {
      v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
      if (!v7 || (*(_BYTE *)v7 & 4) == 0)
      {
        while ((*(_WORD *)(v7 + 44) & 4) != 0)
          v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((llvm::TargetInstrInfo::isUnpredicatedTerminator(a2, (const llvm::MachineInstr *)v7) & 1) != 0)
        continue;
    }
    return 0;
  }
  *a3 = 1;
  return v7;
}

double sub_1C487D4BC(uint64_t a1, uint64_t a2, int a3, int a4, char a5)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  double result;
  double v20;
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v22[0] = 0;
  if (a3 == 1)
  {
    v5 = 0;
  }
  else if (a3 == 5)
  {
    v5 = 3;
  }
  else
  {
    v5 = 2;
  }
  LODWORD(v20) = v5;
  if (a4 == 1)
  {
    v6 = 0;
  }
  else if (a4 == 5)
  {
    v6 = 3;
  }
  else
  {
    v6 = 2;
  }
  v7 = 0;
  HIDWORD(v20) = v6;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = 2;
  v10 = 1;
  v11 = *(_QWORD *)(v8 + 48);
  do
  {
    v12 = v10;
    v13 = (v9 + 1);
    v14 = *((_DWORD *)&v20 + v7);
    v15 = *(unsigned __int8 *)(v8 + 32 * v13);
    if (v14)
    {
      if (v15 == 7)
      {
        if (v14 == 3)
          v16 = 5;
        else
          v16 = 4;
        *((_DWORD *)&v20 + v7) = v16;
      }
      *((_DWORD *)v22 + v7) = *(_DWORD *)(v8 + 32 * v13 + 4);
      v13 = (v9 + 2);
      *((_DWORD *)&v22[-1] + v7) = *(_QWORD *)(v8 + 32 * v13 + 16);
    }
    else
    {
      v17 = v8 + 32 * v13;
      if (v15 == 7)
      {
        *((_DWORD *)v22 + v7) = *(_DWORD *)(v17 + 4);
        *((_DWORD *)&v20 + v7) = 4;
      }
      else
      {
        *((_DWORD *)v22 + v7) = *(_QWORD *)(v17 + 16);
      }
    }
    v10 = 0;
    v7 = 1;
    v9 = v13;
  }
  while ((v12 & 1) != 0);
  *(_QWORD *)a1 = v11;
  *(_BYTE *)(a1 + 8) = a5;
  *(_QWORD *)&v18 = v22[0];
  *((_QWORD *)&v18 + 1) = v21;
  *(_OWORD *)(a1 + 12) = v18;
  result = v20;
  *(double *)(a1 + 28) = v20;
  return result;
}

void sub_1C487D610(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v4;
  _BOOL4 v5;
  BOOL v6;
  uint64_t v7;
  llvm::MachineInstr *v8;
  llvm::MachineFunction *v9;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)a1;
  v5 = *(_BYTE *)(a1 + 8) != 0;
  if (*(_QWORD *)a1 == 4)
  {
    v4 = 0;
    v5 = *(_BYTE *)(a1 + 8) == 0;
  }
  v6 = !v5;
  v7 = 16;
  if (v6)
    v7 = 0;
  v11 = 1;
  v9 = *a2;
  v8 = a2[1];
  v12 = 0;
  v13 = v7 | v4;
  llvm::MachineInstr::addOperand(v8, v9, (const llvm::MachineOperand *)&v11);
  sub_1C487D6A0(a1, a2, 0);
  sub_1C487D6A0(a1, a2, 1u);
}

void sub_1C487D6A0(uint64_t a1, llvm::MachineFunction **a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  int v9;
  int v10;
  llvm::MachineInstr *v11;
  llvm::MachineFunction *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  llvm::MachineInstr *v17;
  llvm::MachineFunction *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = a3;
  v6 = a1 + 4 * a3;
  v9 = *(_DWORD *)(v6 + 28);
  v8 = (_DWORD *)(v6 + 28);
  v7 = v9;
  if (v9)
  {
    if ((v7 & 0xFFFFFFFE) == 4)
    {
      v10 = *(_DWORD *)(a1 + 4 * a3 + 12);
      v12 = *a2;
      v11 = a2[1];
      v21 = 0;
      LODWORD(v22) = 64;
      LODWORD(v23) = 0;
      if (v7 == 4)
        v13 = 263;
      else
        v13 = 519;
      v19 = v13;
      v20 = v10;
    }
    else
    {
      v15 = *(_DWORD *)(a1 + 4 * a3 + 12);
      v12 = *a2;
      v11 = a2[1];
      v21 = 0;
      v22 = 0;
      v19 = 0;
      v20 = v15;
      v23 = 0;
    }
  }
  else
  {
    v14 = *(unsigned int *)(a1 + 4 * a3 + 12);
    v12 = *a2;
    v11 = a2[1];
    v19 = 1;
    v21 = 0;
    v22 = v14;
  }
  llvm::MachineInstr::addOperand(v11, v12, (const llvm::MachineOperand *)&v19);
  if (*v8)
  {
    v16 = *(unsigned int *)(a1 + 4 * v5 + 20);
    v18 = *a2;
    v17 = a2[1];
    v19 = 1;
    v21 = 0;
    v22 = v16;
    llvm::MachineInstr::addOperand(v17, v18, (const llvm::MachineOperand *)&v19);
  }
}

llvm::MachineFunction *sub_1C487D784(uint64_t a1, unint64_t *a2, unsigned __int8 **a3, uint64_t a4, _BYTE *a5, uint64_t a6, int a7, int a8, unsigned __int8 a9, const llvm::MachineOperand *a10, const llvm::MachineOperand *a11)
{
  uint64_t v17;
  int v18;
  uint64_t v19;
  const llvm::MachineOperand *v20;
  const llvm::MachineOperand *v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  llvm::MachineFunction *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  llvm::MachineFunction *v46[2];
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v17 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 48);
  v18 = v17 == 4;
  if (v17 == 4)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 48);
  if (v18 != a8)
    v20 = a10;
  else
    v20 = a11;
  if (v18 != a8)
    v21 = a11;
  else
    v21 = a10;
  v22 = sub_1C48882C4(**(unsigned __int16 **)(a4 + 16), a5, a9, *(_BYTE *)v21 == 0, *(_BYTE *)v20 == 0);
  v23 = v22;
  v45 = 0u;
  v44 = 0u;
  sub_1C487D4BC((uint64_t)&v43, a4, SHIDWORD(v22), v24, 0);
  v43 = v19;
  v25 = *(_QWORD *)(a6 + 8);
  v26 = *(llvm::MachineFunction **)(a1 + 32);
  v27 = *a3;
  v47 = v27;
  if (v27)
    llvm::MetadataTracking::track((uint64_t)&v47, v27, 2);
  v28 = v25 + 48 * v23;
  v29 = *((_QWORD *)v26 + 28);
  if (v29)
    *((_QWORD *)v26 + 28) = *(_QWORD *)v29;
  else
    v29 = sub_1C484358C((uint64_t)v26 + 128, 72, 3);
  v48 = v47;
  if (v47)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v47, v47, (uint64_t)&v48);
    v47 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v29, v26, v28, &v48, 0);
  if (v48)
    llvm::MetadataTracking::untrack((uint64_t)&v48, v48);
  if (v47)
    llvm::MetadataTracking::untrack((uint64_t)&v47, v47);
  v30 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v29 + 24) = v30;
  v31 = *(_QWORD *)(v30 + 32);
  v32 = *(unsigned int *)(v29 + 40);
  if ((_DWORD)v32)
  {
    v36 = *(_QWORD *)(v29 + 32);
    v37 = *(_QWORD *)(v31 + 40);
    v38 = 32 * v32;
    do
    {
      if (!*(_BYTE *)v36)
      {
        v39 = *(unsigned int *)(v36 + 4);
        if ((int)v39 >= 0)
          v40 = (uint64_t *)(*(_QWORD *)(v37 + 272) + 8 * v39);
        else
          v40 = (uint64_t *)(*(_QWORD *)(v37 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
        v41 = *v40;
        if (*v40)
        {
          v42 = *(_QWORD *)(v41 + 16);
          *(_QWORD *)(v41 + 16) = v36;
          *(_QWORD *)(v36 + 16) = v42;
          if ((*(_BYTE *)(v36 + 3) & 1) != 0)
          {
            *(_QWORD *)(v36 + 24) = v41;
          }
          else
          {
            *(_QWORD *)(v36 + 24) = 0;
            v40 = (uint64_t *)(v42 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v36 + 16) = v36;
          *(_QWORD *)(v36 + 24) = 0;
        }
        *v40 = v36;
      }
      v36 += 32;
      v38 -= 32;
    }
    while (v38);
  }
  v33 = *(_QWORD *)(v31 + 728);
  if (v33)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v33 + 24))(v33, v29);
  v34 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v29 = v34 | *(_QWORD *)v29 & 7;
  *(_QWORD *)(v29 + 8) = a2;
  *(_QWORD *)(v34 + 8) = v29;
  *a2 = *a2 & 7 | v29;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  LODWORD(v48) = 0x1000000;
  HIDWORD(v48) = a7;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v26, (const llvm::MachineOperand *)&v48);
  LODWORD(v48) = 1;
  v49 = 0;
  v50 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v26, (const llvm::MachineOperand *)&v48);
  v46[0] = v26;
  v46[1] = (llvm::MachineFunction *)v29;
  sub_1C487D610((uint64_t)&v43, v46);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v26, v21);
  if (!*(_BYTE *)v21)
  {
    LODWORD(v48) = 1;
    v49 = 0;
    v50 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v26, (const llvm::MachineOperand *)&v48);
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v26, v20);
  if (!*(_BYTE *)v20)
  {
    LODWORD(v48) = 1;
    v49 = 0;
    v50 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v26, (const llvm::MachineOperand *)&v48);
  }
  return v26;
}

void sub_1C487DAB0(uint64_t a1, unint64_t *a2, int a3, _BYTE *a4, uint64_t a5, unsigned __int8 *a6, unsigned int a7)
{
  int v13;
  uint64_t v14;
  unsigned int v15;
  llvm::MachineFunction *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a4[318])
    v13 = 5;
  else
    v13 = 33;
  if (a4[318])
    v14 = 411;
  else
    v14 = 158;
  v15 = sub_1C4885524(v13, v14, a4);
  v16 = *(llvm::MachineFunction **)(a1 + 32);
  v31 = a6;
  if (a6)
    llvm::MetadataTracking::track((uint64_t)&v31, a6, 2);
  v17 = a5 + 48 * v15;
  v18 = *((_QWORD *)v16 + 28);
  if (v18)
    *((_QWORD *)v16 + 28) = *(_QWORD *)v18;
  else
    v18 = sub_1C484358C((uint64_t)v16 + 128, 72, 3);
  v32 = v31;
  if (v31)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v31, v31, (uint64_t)&v32);
    v31 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v18, v16, v17, &v32, 0);
  if (v32)
    llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
  if (v31)
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
  v19 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v18 + 24) = v19;
  v20 = *(_QWORD *)(v19 + 32);
  v21 = *(unsigned int *)(v18 + 40);
  if ((_DWORD)v21)
  {
    v24 = *(_QWORD *)(v18 + 32);
    v25 = *(_QWORD *)(v20 + 40);
    v26 = 32 * v21;
    do
    {
      if (!*(_BYTE *)v24)
      {
        v27 = *(unsigned int *)(v24 + 4);
        if ((int)v27 >= 0)
          v28 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v27);
        else
          v28 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
        v29 = *v28;
        if (*v28)
        {
          v30 = *(_QWORD *)(v29 + 16);
          *(_QWORD *)(v29 + 16) = v24;
          *(_QWORD *)(v24 + 16) = v30;
          if ((*(_BYTE *)(v24 + 3) & 1) != 0)
          {
            *(_QWORD *)(v24 + 24) = v29;
          }
          else
          {
            *(_QWORD *)(v24 + 24) = 0;
            v28 = (uint64_t *)(v30 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v24 + 16) = v24;
          *(_QWORD *)(v24 + 24) = 0;
        }
        *v28 = v24;
      }
      v24 += 32;
      v26 -= 32;
    }
    while (v26);
  }
  v22 = *(_QWORD *)(v20 + 728);
  if (v22)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v22 + 24))(v22, v18);
  v23 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = v23 | *(_QWORD *)v18 & 7;
  *(_QWORD *)(v18 + 8) = a2;
  *(_QWORD *)(v23 + 8) = v18;
  *a2 = *a2 & 7 | v18;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  LODWORD(v32) = 0x1000000;
  HIDWORD(v32) = a3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v16, (const llvm::MachineOperand *)&v32);
  LODWORD(v32) = 1;
  v33 = 0;
  v34 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v16, (const llvm::MachineOperand *)&v32);
  LODWORD(v32) = 1;
  v33 = 0;
  v34 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v16, (const llvm::MachineOperand *)&v32);
  LODWORD(v32) = 1;
  v33 = 0;
  v34 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v16, (const llvm::MachineOperand *)&v32);
  LODWORD(v32) = 1;
  v33 = 0;
  v34 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v16, (const llvm::MachineOperand *)&v32);
  LODWORD(v32) = 1;
  v33 = 0;
  v34 = a7;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v16, (const llvm::MachineOperand *)&v32);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  LODWORD(v32) = 0x2000000;
  HIDWORD(v32) = a3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v16, (const llvm::MachineOperand *)&v32);
}

void sub_1C487DD78(_QWORD *a1, unint64_t *a2, uint64_t a3, int a4, _BYTE *a5)
{
  unint64_t *v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  llvm::MachineFunction *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a1 + 6 == a2)
  {
LABEL_8:
    v15 = 0;
    v34 = 0;
  }
  else
  {
    v10 = a2;
    while (1)
    {
      v11 = *(unsigned __int16 *)v10[2];
      v12 = v11 > 0x17;
      v13 = (1 << v11) & 0x83E000;
      if (v12 || v13 == 0)
        break;
      v10 = (unint64_t *)v10[1];
      if (v10 == a1 + 6)
        goto LABEL_8;
    }
    v16 = (unsigned __int8 *)v10[7];
    v34 = v16;
    if (v16)
    {
      llvm::MetadataTracking::track((uint64_t)&v34, v16, 2);
      v15 = v34;
    }
    else
    {
      v15 = 0;
    }
  }
  v17 = sub_1C4885524(39, 158, a5);
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (llvm::MachineFunction *)a1[4];
  v35 = v15;
  if (v15)
    llvm::MetadataTracking::track((uint64_t)&v35, v15, 2);
  v20 = v18 + 48 * v17;
  v21 = *((_QWORD *)v19 + 28);
  if (v21)
    *((_QWORD *)v19 + 28) = *(_QWORD *)v21;
  else
    v21 = sub_1C484358C((uint64_t)v19 + 128, 72, 3);
  v36 = v35;
  if (v35)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v35, v35, (uint64_t)&v36);
    v35 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v21, v19, v20, &v36, 0);
  if (v36)
    llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
  if (v35)
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
  v22 = a1[5];
  *(_QWORD *)(v21 + 24) = v22;
  v23 = *(_QWORD *)(v22 + 32);
  v24 = *(unsigned int *)(v21 + 40);
  if ((_DWORD)v24)
  {
    v27 = *(_QWORD *)(v21 + 32);
    v28 = *(_QWORD *)(v23 + 40);
    v29 = 32 * v24;
    do
    {
      if (!*(_BYTE *)v27)
      {
        v30 = *(unsigned int *)(v27 + 4);
        if ((int)v30 >= 0)
          v31 = (uint64_t *)(*(_QWORD *)(v28 + 272) + 8 * v30);
        else
          v31 = (uint64_t *)(*(_QWORD *)(v28 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
        v32 = *v31;
        if (*v31)
        {
          v33 = *(_QWORD *)(v32 + 16);
          *(_QWORD *)(v32 + 16) = v27;
          *(_QWORD *)(v27 + 16) = v33;
          if ((*(_BYTE *)(v27 + 3) & 1) != 0)
          {
            *(_QWORD *)(v27 + 24) = v32;
          }
          else
          {
            *(_QWORD *)(v27 + 24) = 0;
            v31 = (uint64_t *)(v33 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v27 + 16) = v27;
          *(_QWORD *)(v27 + 24) = 0;
        }
        *v31 = v27;
      }
      v27 += 32;
      v29 -= 32;
    }
    while (v29);
  }
  v25 = *(_QWORD *)(v23 + 728);
  if (v25)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v25 + 24))(v25, v21);
  v26 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v21 = v26 | *(_QWORD *)v21 & 7;
  *(_QWORD *)(v21 + 8) = a2;
  *(_QWORD *)(v26 + 8) = v21;
  *a2 = *a2 & 7 | v21;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  LODWORD(v36) = 0x1000000;
  HIDWORD(v36) = a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v19, (const llvm::MachineOperand *)&v36);
  LODWORD(v36) = 1;
  v37 = 0;
  v38 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v19, (const llvm::MachineOperand *)&v36);
  LODWORD(v36) = 1;
  v37 = 0;
  v38 = 8;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v19, (const llvm::MachineOperand *)&v36);
  LODWORD(v36) = 1;
  v37 = 0;
  v38 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v19, (const llvm::MachineOperand *)&v36);
  LODWORD(v36) = 1;
  v37 = 0;
  v38 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v19, (const llvm::MachineOperand *)&v36);
  LODWORD(v36) = 1;
  v37 = 0;
  v38 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v19, (const llvm::MachineOperand *)&v36);
  v37 = 0;
  v38 = 0;
  v39 = 0;
  LODWORD(v36) = 0x2000000;
  HIDWORD(v36) = a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v19, (const llvm::MachineOperand *)&v36);
  if (v34)
    llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
}

void sub_1C487E0A4(llvm::MachineBasicBlock *this, int a2, unsigned __int8 **a3, int a4, uint64_t a5, int a6, unsigned int a7)
{
  unsigned int v11;
  uint64_t v12;
  llvm::MachineFunction *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *FirstInstrTerminator;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  llvm::MachineInstr *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;

  if (a2)
    v11 = 2;
  else
    v11 = 1;
  if (a7 == -1)
    v12 = v11;
  else
    v12 = a7;
  v13 = (llvm::MachineFunction *)*((_QWORD *)this + 4);
  v14 = 727;
  if (!*(_BYTE *)(*((_QWORD *)v13 + 2) + 318))
    v14 = 728;
  v15 = 724;
  if (!*(_BYTE *)(*((_QWORD *)v13 + 2) + 318))
    v15 = 725;
  if ((_DWORD)v12 == 2)
    v16 = v14;
  else
    v16 = v15;
  if (a6)
  {
    FirstInstrTerminator = (uint64_t *)*((_QWORD *)this + 7);
  }
  else
  {
    FirstInstrTerminator = (uint64_t *)llvm::MachineBasicBlock::getFirstInstrTerminator(this);
    v13 = (llvm::MachineFunction *)*((_QWORD *)this + 4);
  }
  v18 = *(_QWORD *)(a5 + 8);
  v19 = *a3;
  v26 = v19;
  if (v19)
    llvm::MetadataTracking::track((uint64_t)&v26, v19, 2);
  v20 = v18 + 48 * v16;
  v21 = (llvm::MachineInstr *)*((_QWORD *)v13 + 28);
  if (v21)
    *((_QWORD *)v13 + 28) = *(_QWORD *)v21;
  else
    v21 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v13 + 128, 72, 3);
  v22 = v26;
  if (v26)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v26, v26, (uint64_t)&v22);
    v26 = 0;
  }
  llvm::MachineInstr::MachineInstr(v21, v13, v20, &v22, 0);
  if (v22)
    llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
  if (v26)
    llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
  if ((uint64_t *)((char *)this + 48) != FirstInstrTerminator && (*((_WORD *)FirstInstrTerminator + 22) & 4) != 0)
    *((_WORD *)v21 + 22) |= 0xCu;
  sub_1C512CA10((uint64_t *)this + 5, FirstInstrTerminator, (uint64_t)v21);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  LODWORD(v22) = 0x1000000;
  HIDWORD(v22) = a4;
  llvm::MachineInstr::addOperand(v21, v13, (const llvm::MachineOperand *)&v22);
  LODWORD(v22) = 1;
  v23 = 0;
  v24 = 0;
  llvm::MachineInstr::addOperand(v21, v13, (const llvm::MachineOperand *)&v22);
  LODWORD(v22) = 1;
  v23 = 0;
  v24 = v12;
  llvm::MachineInstr::addOperand(v21, v13, (const llvm::MachineOperand *)&v22);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  LODWORD(v22) = 0x2000000;
  HIDWORD(v22) = a4;
  llvm::MachineInstr::addOperand(v21, v13, (const llvm::MachineOperand *)&v22);
}

void sub_1C487E2A4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v29;
  unsigned int v30;
  int v31;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unsigned int v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t *v48;
  uint64_t v49;
  llvm::MachineFunction *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int DwarfRegNum;
  int v58;
  uint64_t v59;
  __int16 v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  BOOL v66;
  int v67;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  llvm::MachineFunction *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v104[4];
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107[2];
  int v108;
  char *v109;
  uint64_t v110;
  int v111;
  int v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  unsigned __int8 *v116[2];

  v4 = (_BYTE *)a2[2];
  v5 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 104))(v4);
  v106 = v5;
  v6 = a2[7];
  v105 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 176))(v4);
  v7 = *(_DWORD *)(v6 + 48);
  if (*(_DWORD *)(v6 + 72) == -1)
    v8 = 0;
  else
    v8 = *(_DWORD *)(v6 + 72);
  v9 = a2[6];
  if (!v9)
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a2[1] + 216))(a2[1], a2 + 16, a2);
    a2[6] = v9;
  }
  v10 = a2[41];
  v11 = v10 + 48;
  v12 = *(_QWORD *)(v10 + 56);
  if (v12 == v11)
  {
LABEL_13:
    v13 = 0;
  }
  else
  {
    while (**(_WORD **)(v12 + 16) != 256)
    {
      if ((*(_BYTE *)v12 & 4) == 0)
      {
        while ((*(_WORD *)(v12 + 44) & 8) != 0)
          v12 = *(_QWORD *)(v12 + 8);
      }
      v12 = *(_QWORD *)(v12 + 8);
      if (v12 == v11)
        goto LABEL_13;
    }
    v14 = v12;
    v13 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 16);
    *(_DWORD *)(v9 + 464) = v13;
    v15 = *(_QWORD *)(v12 + 24);
    v16 = v14;
    if ((*(_BYTE *)v14 & 4) == 0)
    {
      v16 = v14;
      if ((*(_WORD *)(v14 + 44) & 8) != 0)
      {
        v16 = v14;
        do
          v16 = *(_QWORD *)(v16 + 8);
        while ((*(_WORD *)(v16 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(v15 + 40, v14, *(_QWORD *)(v16 + 8));
  }
  v17 = *(_QWORD *)(a3 + 56);
  v104[0] = a2;
  v104[1] = a3;
  v104[2] = &v106;
  v104[3] = &v105;
  v18 = v4[381];
  if (v4[381])
  {
    v19 = *(_QWORD *)(v6 + 8);
    v20 = *(_DWORD *)(v6 + 32);
    v21 = -858993459 * ((unint64_t)(*(_QWORD *)(v6 + 16) - v19) >> 3) - v20;
    if ((_DWORD)v21)
    {
      while (*(_QWORD *)(v19 + 40 * v20 + 8) == -1)
      {
        ++v20;
        if (!--v21)
          goto LABEL_21;
      }
      v7 -= *(_DWORD *)(v19 + 40 * v20);
    }
    else
    {
LABEL_21:
      v7 = v8;
    }
    *(_QWORD *)(v6 + 48) = v7;
  }
  if (v4[318])
    v22 = 4;
  else
    v22 = 3;
  v23 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
  if (!v23 || (v23 != 255 ? (v24 = v23 == 8) : (v24 = 1), v24))
  {
    if (sub_1C495C228((uint64_t)a2))
    {
      sub_1C487ED18(v5, a3, (unint64_t *)v17, 0, 189, v22, 1);
      v18 = v4[381];
    }
  }
  if (v18)
  {
    v25 = v7 + v13;
    v26 = *(unsigned __int16 *)(*a2 + 18);
    v27 = (v26 >> 4) & 0x3FF;
    if (v27 != 100 && (v27 - 109) >= 0xFFFFFFF7 && (v26 & 0x3FF0) != 0x640)
    {
      if (*(_BYTE *)(a2[1] + 1687))
      {
        v29 = *(_QWORD *)(*a2 + 40);
        v109 = "agx.stack_oob";
        LOWORD(v113) = 259;
        if (llvm::Module::getNamedMetadata(v29, (uint64_t)&v109))
          v25 += 32;
      }
    }
    sub_1C487EF34((uint64_t)v104, *(unint64_t **)(a3 + 56), -v25);
    v30 = *(unsigned __int16 *)(*a2 + 18);
    v31 = (v30 >> 4) & 0x3FF;
    v33 = ((v30 >> 4) & 0x3F7) != 0 && v31 != 255;
    sub_1C4885568(v106, v25, a3, *(unint64_t **)(a3 + 56), v33);
    if (*(_BYTE *)(a2[1] + 1688))
    {
      v34 = *(_QWORD *)(*a2 + 40);
      v109 = "agx.disable_gin_1102";
      LOWORD(v113) = 259;
      if (!llvm::Module::getNamedMetadata(v34, (uint64_t)&v109))
      {
        if (v31)
        {
          if (v31 != 8 && v31 != 255)
          {
            if (*(_BYTE *)(v6 + 62)
              || (v35 = *(_QWORD *)(*a2 + 40),
                  v109 = "agx.has_stack_access",
                  LOWORD(v113) = 259,
                  llvm::Module::getNamedMetadata(v35, (uint64_t)&v109)))
            {
              v36 = v106;
              v37 = a3;
              v38 = *(unint64_t **)(a3 + 56);
              v39 = v25 >> 2;
LABEL_68:
              sub_1C487ED18(v36, v37, v38, v39, 66, v22, 0);
            }
          }
        }
      }
    }
  }
  else
  {
    v40 = v7 - v8 + v13;
    v41 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
    if (!v41 || (v41 != 255 ? (v42 = v41 == 8) : (v42 = 1), v42))
    {
      sub_1C487EF34((uint64_t)v104, *(unint64_t **)(a3 + 56), -v40);
      sub_1C48857D0(v106, v40, a3, *(unint64_t **)(a3 + 56));
    }
    else if (*(_BYTE *)(v6 + 62))
    {
      sub_1C487EF34((uint64_t)v104, *(unint64_t **)(a3 + 56), -v40);
      v36 = v106;
      v38 = *(unint64_t **)(a3 + 56);
      v37 = a3;
      v39 = v7 - v8 + v13;
      goto LABEL_68;
    }
  }
  if (*(_BYTE *)(v6 + 62))
  {
    v43 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
    if (v43)
    {
      if (v43 != 8 && v43 != 255)
      {
        v44 = a2 + 40;
        if ((uint64_t *)a2[40] != a2 + 40)
        {
          v45 = a2[41];
          if ((uint64_t *)v45 == v44 || *(uint64_t **)(v45 + 8) == v44)
          {
            if (v4[318])
              v46 = 56;
            else
              v46 = 313;
            sub_1C487ED18(v106, a3, *(unint64_t **)(a3 + 56), 0, v46, v22, v4[318] == 0);
          }
        }
      }
    }
  }
  if (*(_BYTE *)(a2[4] + 2108) || (*(_WORD *)(a2[1] + 1064) & 0x10) != 0)
  {
    v47 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
    if (!v47 || v47 == 255 || v47 == 8)
    {
      v48 = *(unint64_t **)(a3 + 56);
      v49 = *(_QWORD *)(v106 + 8) + 144;
      v50 = *(llvm::MachineFunction **)(a3 + 32);
      v107[0] = 0;
      v51 = *((_QWORD *)v50 + 28);
      if (v51)
      {
        *((_QWORD *)v50 + 28) = *(_QWORD *)v51;
        v109 = 0;
      }
      else
      {
        v51 = sub_1C484358C((uint64_t)v50 + 128, 72, 3);
        v109 = (char *)v107[0];
        if (v107[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v107, v107[0], (uint64_t)&v109);
          v107[0] = 0;
        }
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v51, v50, v49, (unsigned __int8 **)&v109, 0);
      if (v109)
        llvm::MetadataTracking::untrack((uint64_t)&v109, (unsigned __int8 *)v109);
      if (v107[0])
        llvm::MetadataTracking::untrack((uint64_t)v107, v107[0]);
      v52 = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(v51 + 24) = v52;
      v53 = *(_QWORD *)(v52 + 32);
      v54 = *(unsigned int *)(v51 + 40);
      if ((_DWORD)v54)
      {
        v94 = *(_QWORD *)(v51 + 32);
        v95 = *(_QWORD *)(v53 + 40);
        v96 = 32 * v54;
        do
        {
          if (!*(_BYTE *)v94)
          {
            v97 = *(unsigned int *)(v94 + 4);
            if ((int)v97 >= 0)
              v98 = (uint64_t *)(*(_QWORD *)(v95 + 272) + 8 * v97);
            else
              v98 = (uint64_t *)(*(_QWORD *)(v95 + 24) + 16 * (v97 & 0x7FFFFFFF) + 8);
            v99 = *v98;
            if (*v98)
            {
              v100 = *(_QWORD *)(v99 + 16);
              *(_QWORD *)(v99 + 16) = v94;
              *(_QWORD *)(v94 + 16) = v100;
              if ((*(_BYTE *)(v94 + 3) & 1) != 0)
              {
                *(_QWORD *)(v94 + 24) = v99;
              }
              else
              {
                *(_QWORD *)(v94 + 24) = 0;
                v98 = (uint64_t *)(v100 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v94 + 16) = v94;
              *(_QWORD *)(v94 + 24) = 0;
            }
            *v98 = v94;
          }
          v94 += 32;
          v96 -= 32;
        }
        while (v96);
      }
      v55 = *(_QWORD *)(v53 + 728);
      if (v55)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v55 + 24))(v55, v51);
      v56 = *v48 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v51 = v56 | *(_QWORD *)v51 & 7;
      *(_QWORD *)(v51 + 8) = v48;
      *(_QWORD *)(v56 + 8) = v51;
      *v48 = *v48 & 7 | v51;
      DwarfRegNum = llvm::MCRegisterInfo::getDwarfRegNum(v105 + 8, 0x42u, 0);
      LODWORD(v109) = 7;
      v110 = 0;
      v111 = DwarfRegNum;
      v112 = 0;
      HIBYTE(v115) = 0;
      *(_QWORD *)&v114 = 0;
      v113 = 0uLL;
      BYTE8(v114) = 0;
      v58 = llvm::MachineFunction::addFrameInst(a2, (uint64_t)&v109);
      LODWORD(v107[0]) = 16;
      v107[1] = 0;
      v108 = v58;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v50, (const llvm::MachineOperand *)v107);
      if (SHIBYTE(v115) < 0)
        operator delete(*((void **)&v114 + 1));
      if ((_QWORD)v113)
      {
        *((_QWORD *)&v113 + 1) = v113;
        operator delete((void *)v113);
      }
    }
  }
  v59 = a3 + 48;
  if (v17 != a3 + 48)
  {
    while (1)
    {
      v60 = *(_WORD *)(v17 + 44);
      if ((v60 & 1) == 0)
        break;
      if ((v60 & 8) != 0 && (*(_QWORD *)v17 & 4) == 0)
      {
        do
          v17 = *(_QWORD *)(v17 + 8);
        while ((*(_WORD *)(v17 + 44) & 8) != 0);
      }
      v17 = *(_QWORD *)(v17 + 8);
      if (v17 == v59)
      {
        v17 = a3 + 48;
        break;
      }
    }
  }
  v61 = *(uint64_t **)(a3 + 32);
  if (*(_BYTE *)(v61[4] + 2108) || (*(_WORD *)(v61[1] + 1064) & 0x10) != 0)
  {
    v101 = v61[7];
    v62 = v61[2];
    v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 176))(v62);
    v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 104))(v62);
    if (v59 == v17)
    {
LABEL_116:
      v116[0] = 0;
    }
    else
    {
      v64 = v17;
      while (1)
      {
        v65 = **(unsigned __int16 **)(v64 + 16);
        v66 = v65 > 0x17;
        v67 = (1 << v65) & 0x83E000;
        if (v66 || v67 == 0)
          break;
        v64 = *(_QWORD *)(v64 + 8);
        if (v64 == v59)
          goto LABEL_116;
      }
      v69 = *(unsigned __int8 **)(v64 + 56);
      v116[0] = v69;
      if (v69)
        llvm::MetadataTracking::track((uint64_t)v116, v69, 2);
    }
    v71 = *(_QWORD *)(v101 + 80);
    v70 = *(_QWORD *)(v101 + 88);
    if (v71 != v70)
    {
      v72 = v63 + 8;
      do
      {
        v73 = *(_DWORD *)v71;
        if (*(_BYTE *)(v71 + 9))
        {
          v74 = llvm::MCRegisterInfo::getDwarfRegNum(v72, v73, 0);
          v75 = llvm::MCRegisterInfo::getDwarfRegNum(v72, *(_DWORD *)(v71 + 4), 0);
          LODWORD(v109) = 13;
          v110 = 0;
          v111 = v74;
          v112 = v75;
          v113 = 0u;
          v114 = 0u;
          v115 = 0u;
        }
        else
        {
          v76 = llvm::MCRegisterInfo::getDwarfRegNum(v72, v73, 0);
          v77 = *(_QWORD *)(*(_QWORD *)(v101 + 8) + 40 * (*(_DWORD *)(v101 + 32) + *(_DWORD *)(v71 + 4)));
          LODWORD(v109) = 3;
          v110 = 0;
          v111 = v76;
          v112 = v77;
          HIBYTE(v115) = 0;
          *(_QWORD *)&v114 = 0;
          v113 = 0uLL;
          BYTE8(v114) = 0;
        }
        v78 = llvm::MachineFunction::addFrameInst(v61, (uint64_t)&v109);
        if (SHIBYTE(v115) < 0)
          operator delete(*((void **)&v114 + 1));
        if ((_QWORD)v113)
        {
          *((_QWORD *)&v113 + 1) = v113;
          operator delete((void *)v113);
        }
        v79 = *(_QWORD *)(v102 + 8);
        v80 = *(llvm::MachineFunction **)(a3 + 32);
        v107[0] = v116[0];
        if (v116[0])
          llvm::MetadataTracking::track((uint64_t)v107, v116[0], 2);
        v81 = *((_QWORD *)v80 + 28);
        if (v81)
          *((_QWORD *)v80 + 28) = *(_QWORD *)v81;
        else
          v81 = sub_1C484358C((uint64_t)v80 + 128, 72, 3);
        v109 = (char *)v107[0];
        if (v107[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v107, v107[0], (uint64_t)&v109);
          v107[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v81, v80, v79 + 144, (unsigned __int8 **)&v109, 0);
        if (v109)
          llvm::MetadataTracking::untrack((uint64_t)&v109, (unsigned __int8 *)v109);
        if (v107[0])
          llvm::MetadataTracking::untrack((uint64_t)v107, v107[0]);
        v82 = *(_QWORD *)(a3 + 40);
        *(_QWORD *)(v81 + 24) = v82;
        v83 = *(_QWORD *)(v82 + 32);
        v84 = *(unsigned int *)(v81 + 40);
        if ((_DWORD)v84)
        {
          v87 = *(_QWORD *)(v81 + 32);
          v88 = *(_QWORD *)(v83 + 40);
          v89 = 32 * v84;
          do
          {
            if (!*(_BYTE *)v87)
            {
              v90 = *(unsigned int *)(v87 + 4);
              if ((int)v90 >= 0)
                v91 = (uint64_t *)(*(_QWORD *)(v88 + 272) + 8 * v90);
              else
                v91 = (uint64_t *)(*(_QWORD *)(v88 + 24) + 16 * (v90 & 0x7FFFFFFF) + 8);
              v92 = *v91;
              if (*v91)
              {
                v93 = *(_QWORD *)(v92 + 16);
                *(_QWORD *)(v92 + 16) = v87;
                *(_QWORD *)(v87 + 16) = v93;
                if ((*(_BYTE *)(v87 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v87 + 24) = v92;
                }
                else
                {
                  *(_QWORD *)(v87 + 24) = 0;
                  v91 = (uint64_t *)(v93 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v87 + 16) = v87;
                *(_QWORD *)(v87 + 24) = 0;
              }
              *v91 = v87;
            }
            v87 += 32;
            v89 -= 32;
          }
          while (v89);
        }
        v85 = *(_QWORD *)(v83 + 728);
        if (v85)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v85 + 24))(v85, v81);
        v86 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v81 = v86 | *(_QWORD *)v81 & 7;
        *(_QWORD *)(v81 + 8) = v17;
        *(_QWORD *)(v86 + 8) = v81;
        *(_QWORD *)v17 = *(_QWORD *)v17 & 7 | v81;
        LODWORD(v109) = 16;
        v110 = 0;
        v111 = v78;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v80, (const llvm::MachineOperand *)&v109);
        *(_WORD *)(v81 + 44) = *(_WORD *)(v81 + 44) & 0xC | 1;
        v71 += 12;
      }
      while (v71 != v70);
    }
    if (v116[0])
      llvm::MetadataTracking::untrack((uint64_t)v116, v116[0]);
  }
}

unint64_t sub_1C487ED18(uint64_t a1, uint64_t a2, unint64_t *a3, unsigned int a4, int a5, int a6, int a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::MachineFunction *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v11 = 4072;
  if (a6 == 3)
    v11 = 4073;
  v12 = 4075;
  if (a6 == 3)
    v12 = 4077;
  if (!a7)
    v11 = v12;
  v13 = *(_QWORD *)(a1 + 8) + 48 * v11;
  v14 = *(llvm::MachineFunction **)(a2 + 32);
  v29 = 0;
  v15 = *((_QWORD *)v14 + 28);
  if (v15)
    *((_QWORD *)v14 + 28) = *(_QWORD *)v15;
  else
    v15 = sub_1C484358C((uint64_t)v14 + 128, 72, 3);
  v30 = 0;
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v15, v14, v13, &v30, 0);
  if (v30)
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  if (v29)
    llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
  v16 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v15 + 24) = v16;
  v17 = *(_QWORD *)(v16 + 32);
  v18 = *(unsigned int *)(v15 + 40);
  if ((_DWORD)v18)
  {
    v22 = *(_QWORD *)(v15 + 32);
    v23 = *(_QWORD *)(v17 + 40);
    v24 = 32 * v18;
    do
    {
      if (!*(_BYTE *)v22)
      {
        v25 = *(unsigned int *)(v22 + 4);
        if ((int)v25 >= 0)
          v26 = (uint64_t *)(*(_QWORD *)(v23 + 272) + 8 * v25);
        else
          v26 = (uint64_t *)(*(_QWORD *)(v23 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
        v27 = *v26;
        if (*v26)
        {
          v28 = *(_QWORD *)(v27 + 16);
          *(_QWORD *)(v27 + 16) = v22;
          *(_QWORD *)(v22 + 16) = v28;
          if ((*(_BYTE *)(v22 + 3) & 1) != 0)
          {
            *(_QWORD *)(v22 + 24) = v27;
          }
          else
          {
            *(_QWORD *)(v22 + 24) = 0;
            v26 = (uint64_t *)(v28 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v22 + 16) = v22;
          *(_QWORD *)(v22 + 24) = 0;
        }
        *v26 = v22;
      }
      v22 += 32;
      v24 -= 32;
    }
    while (v24);
  }
  v19 = *(_QWORD *)(v17 + 728);
  if (v19)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v19 + 24))(v19, v15);
  v20 = *a3 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = v20 | *(_QWORD *)v15 & 7;
  *(_QWORD *)(v15 + 8) = a3;
  *(_QWORD *)(v20 + 8) = v15;
  *a3 = *a3 & 7 | v15;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  LODWORD(v30) = 0x1000000;
  HIDWORD(v30) = a5;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v15, v14, (const llvm::MachineOperand *)&v30);
  LODWORD(v30) = 1;
  v31 = 0;
  v32 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v15, v14, (const llvm::MachineOperand *)&v30);
  LODWORD(v30) = 1;
  v31 = 0;
  v32 = a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v15, v14, (const llvm::MachineOperand *)&v30);
  return v15;
}

void sub_1C487EF34(uint64_t a1, unint64_t *a2, int a3)
{
  _QWORD *v6;
  int v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  llvm::MachineFunction *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  int DwarfRegNum;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  int v46;
  int v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *__p;
  char v52;
  unsigned __int8 *v53[2];
  int v54;

  v6 = *(_QWORD **)a1;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 2108))
  {
    v7 = 1;
    if (!a3)
      return;
  }
  else
  {
    v7 = (*(unsigned __int16 *)(v6[1] + 1064) >> 4) & 1;
    if (!a3)
      return;
  }
  if (v7)
  {
    v8 = (*(unsigned __int16 *)(*v6 + 18) >> 4) & 0x3FF;
    if (!v8 || (v8 != 255 ? (v9 = v8 == 8) : (v9 = 1), v9))
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8) + 144;
      v12 = *(llvm::MachineFunction **)(v10 + 32);
      v53[0] = 0;
      v13 = *((_QWORD *)v12 + 28);
      if (v13)
        *((_QWORD *)v12 + 28) = *(_QWORD *)v13;
      else
        v13 = sub_1C484358C((uint64_t)v12 + 128, 72, 3);
      v44 = 0;
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v13, v12, v11, &v44, 0);
      if (v44)
        llvm::MetadataTracking::untrack((uint64_t)&v44, v44);
      if (v53[0])
        llvm::MetadataTracking::untrack((uint64_t)v53, v53[0]);
      v14 = *(_QWORD *)(v10 + 40);
      *(_QWORD *)(v13 + 24) = v14;
      v15 = *(_QWORD *)(v14 + 32);
      v16 = *(unsigned int *)(v13 + 40);
      if ((_DWORD)v16)
      {
        v30 = *(_QWORD *)(v13 + 32);
        v31 = *(_QWORD *)(v15 + 40);
        v32 = 32 * v16;
        do
        {
          if (!*(_BYTE *)v30)
          {
            v33 = *(unsigned int *)(v30 + 4);
            if ((int)v33 >= 0)
              v34 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v33);
            else
              v34 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
            v35 = *v34;
            if (*v34)
            {
              v36 = *(_QWORD *)(v35 + 16);
              *(_QWORD *)(v35 + 16) = v30;
              *(_QWORD *)(v30 + 16) = v36;
              if ((*(_BYTE *)(v30 + 3) & 1) != 0)
              {
                *(_QWORD *)(v30 + 24) = v35;
              }
              else
              {
                *(_QWORD *)(v30 + 24) = 0;
                v34 = (uint64_t *)(v36 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v30 + 16) = v30;
              *(_QWORD *)(v30 + 24) = 0;
            }
            *v34 = v30;
          }
          v30 += 32;
          v32 -= 32;
        }
        while (v32);
      }
      v17 = *(_QWORD *)(v15 + 728);
      if (v17)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v17 + 24))(v17, v13);
      v18 = *a2 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v13 = v18 | *(_QWORD *)v13 & 7;
      *(_QWORD *)(v13 + 8) = a2;
      *(_QWORD *)(v18 + 8) = v13;
      *a2 = *a2 & 7 | v13;
      v19 = *(uint64_t **)a1;
      LODWORD(v44) = 6;
      v45 = 0;
      v46 = 0;
      v47 = a3;
      v52 = 0;
      v49 = 0;
      v50 = 0;
      v48 = 0;
      LOBYTE(__p) = 0;
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 8);
      v21 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8) + 144;
      v12 = *(llvm::MachineFunction **)(v20 + 32);
      v53[0] = 0;
      v13 = *((_QWORD *)v12 + 28);
      if (v13)
        *((_QWORD *)v12 + 28) = *(_QWORD *)v13;
      else
        v13 = sub_1C484358C((uint64_t)v12 + 128, 72, 3);
      v44 = 0;
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v13, v12, v21, &v44, 0);
      if (v44)
        llvm::MetadataTracking::untrack((uint64_t)&v44, v44);
      if (v53[0])
        llvm::MetadataTracking::untrack((uint64_t)v53, v53[0]);
      v22 = *(_QWORD *)(v20 + 40);
      *(_QWORD *)(v13 + 24) = v22;
      v23 = *(_QWORD *)(v22 + 32);
      v24 = *(unsigned int *)(v13 + 40);
      if ((_DWORD)v24)
      {
        v37 = *(_QWORD *)(v13 + 32);
        v38 = *(_QWORD *)(v23 + 40);
        v39 = 32 * v24;
        do
        {
          if (!*(_BYTE *)v37)
          {
            v40 = *(unsigned int *)(v37 + 4);
            if ((int)v40 >= 0)
              v41 = (uint64_t *)(*(_QWORD *)(v38 + 272) + 8 * v40);
            else
              v41 = (uint64_t *)(*(_QWORD *)(v38 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
            v42 = *v41;
            if (*v41)
            {
              v43 = *(_QWORD *)(v42 + 16);
              *(_QWORD *)(v42 + 16) = v37;
              *(_QWORD *)(v37 + 16) = v43;
              if ((*(_BYTE *)(v37 + 3) & 1) != 0)
              {
                *(_QWORD *)(v37 + 24) = v42;
              }
              else
              {
                *(_QWORD *)(v37 + 24) = 0;
                v41 = (uint64_t *)(v43 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v37 + 16) = v37;
              *(_QWORD *)(v37 + 24) = 0;
            }
            *v41 = v37;
          }
          v37 += 32;
          v39 -= 32;
        }
        while (v39);
      }
      v25 = *(_QWORD *)(v23 + 728);
      if (v25)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v25 + 24))(v25, v13);
      v26 = *a2 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v13 = v26 | *(_QWORD *)v13 & 7;
      *(_QWORD *)(v13 + 8) = a2;
      *(_QWORD *)(v26 + 8) = v13;
      *a2 = *a2 & 7 | v13;
      v27 = *(uint64_t **)a1;
      DwarfRegNum = llvm::MCRegisterInfo::getDwarfRegNum(**(_QWORD **)(a1 + 24) + 8, 0x42u, 0);
      LODWORD(v44) = 7;
      v45 = 0;
      v46 = DwarfRegNum;
      v47 = a3;
      v52 = 0;
      v49 = 0;
      v50 = 0;
      v48 = 0;
      LOBYTE(__p) = 0;
      v19 = v27;
    }
    v29 = llvm::MachineFunction::addFrameInst(v19, (uint64_t)&v44);
    LODWORD(v53[0]) = 16;
    v53[1] = 0;
    v54 = v29;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v13, v12, (const llvm::MachineOperand *)v53);
    if (v52 < 0)
      operator delete(__p);
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
  }
}

unint64_t sub_1C487F328(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  _BYTE *v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  llvm::MachineFunction *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int *v28;
  unsigned int *i;
  int DwarfRegNum;
  int v31;
  uint64_t v32;
  llvm::MachineFunction *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  uint64_t v61;
  int v62;
  int v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *__p;
  char v68;
  unsigned __int8 *v69[2];
  int v70;

  v5 = (_BYTE *)a2[2];
  v58 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v5 + 104))(v5);
  v6 = a2[7];
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2[2] + 176))(a2[2]);
  v8 = result;
  v9 = *(_DWORD *)(v6 + 48);
  v10 = *(_DWORD *)(v6 + 72);
  if (v10 == -1)
    v10 = 0;
  v57 = v5;
  if (v5[381])
    v11 = 0;
  else
    v11 = v10;
  v12 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
  if (!v12 || (v12 != 255 ? (v13 = v12 == 8) : (v13 = 1), v13))
  {
    v14 = v9 - v11;
    v15 = a3[6] & 0xFFFFFFFFFFFFFFF8;
    if (!v15 || (*(_BYTE *)v15 & 4) == 0)
    {
      while ((*(_WORD *)(v15 + 44) & 4) != 0)
        v15 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_1C48857D0(v58, v11 - v9, (uint64_t)a3, (unint64_t *)v15);
    v16 = a3[6] & 0xFFFFFFFFFFFFFFF8;
    if (!v16 || (*(_BYTE *)v16 & 4) == 0)
    {
      while ((*(_WORD *)(v16 + 44) & 4) != 0)
        v16 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
    }
    if (*(_BYTE *)(a2[4] + 2108))
      v17 = 1;
    else
      v17 = (*(unsigned __int16 *)(a2[1] + 1064) >> 4) & 1;
    if (v9 != v11 && v17)
    {
      v18 = v8;
      v19 = *(_QWORD *)(v58 + 8) + 144;
      v20 = (llvm::MachineFunction *)a3[4];
      v69[0] = 0;
      v21 = *((_QWORD *)v20 + 28);
      if (v21)
        *((_QWORD *)v20 + 28) = *(_QWORD *)v21;
      else
        v21 = sub_1C484358C((uint64_t)v20 + 128, 72, 3);
      v60 = 0;
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v21, v20, v19, &v60, 0);
      if (v60)
        llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
      if (v69[0])
        llvm::MetadataTracking::untrack((uint64_t)v69, v69[0]);
      v22 = a3[5];
      *(_QWORD *)(v21 + 24) = v22;
      v23 = *(_QWORD *)(v22 + 32);
      v24 = *(unsigned int *)(v21 + 40);
      if ((_DWORD)v24)
      {
        v50 = *(_QWORD *)(v21 + 32);
        v51 = *(_QWORD *)(v23 + 40);
        v52 = 32 * v24;
        do
        {
          if (!*(_BYTE *)v50)
          {
            v53 = *(unsigned int *)(v50 + 4);
            if ((int)v53 >= 0)
              v54 = (uint64_t *)(*(_QWORD *)(v51 + 272) + 8 * v53);
            else
              v54 = (uint64_t *)(*(_QWORD *)(v51 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8);
            v55 = *v54;
            if (*v54)
            {
              v56 = *(_QWORD *)(v55 + 16);
              *(_QWORD *)(v55 + 16) = v50;
              *(_QWORD *)(v50 + 16) = v56;
              if ((*(_BYTE *)(v50 + 3) & 1) != 0)
              {
                *(_QWORD *)(v50 + 24) = v55;
              }
              else
              {
                *(_QWORD *)(v50 + 24) = 0;
                v54 = (uint64_t *)(v56 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v50 + 16) = v50;
              *(_QWORD *)(v50 + 24) = 0;
            }
            *v54 = v50;
          }
          v50 += 32;
          v52 -= 32;
        }
        while (v52);
      }
      v25 = *(_QWORD *)(v23 + 728);
      if (v25)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v25 + 24))(v25, v21);
      v26 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v21 = v26 | *(_QWORD *)v21 & 7;
      *(_QWORD *)(v21 + 8) = v16;
      *(_QWORD *)(v26 + 8) = v21;
      *(_QWORD *)v16 = *(_QWORD *)v16 & 7 | v21;
      LODWORD(v60) = 9;
      v61 = 0;
      v62 = 0;
      v63 = v14;
      v68 = 0;
      v65 = 0;
      v66 = 0;
      v64 = 0;
      LOBYTE(__p) = 0;
      v27 = llvm::MachineFunction::addFrameInst(a2, (uint64_t)&v60);
      LODWORD(v69[0]) = 16;
      v69[1] = 0;
      v70 = v27;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v20, (const llvm::MachineOperand *)v69);
      if (v68 < 0)
        operator delete(__p);
      if (v64)
      {
        v65 = v64;
        operator delete(v64);
      }
      if (*(_BYTE *)(a2[4] + 2108) || (*(_WORD *)(a2[1] + 1064) & 0x10) != 0)
      {
        v28 = *(unsigned int **)(v6 + 80);
        for (i = *(unsigned int **)(v6 + 88); v28 != i; v28 += 3)
        {
          DwarfRegNum = llvm::MCRegisterInfo::getDwarfRegNum(v18 + 8, *v28, 0);
          LODWORD(v60) = 11;
          v61 = 0;
          v62 = DwarfRegNum;
          v63 = 0;
          v68 = 0;
          v65 = 0;
          v66 = 0;
          v64 = 0;
          LOBYTE(__p) = 0;
          v31 = llvm::MachineFunction::addFrameInst(a2, (uint64_t)&v60);
          if (v68 < 0)
            operator delete(__p);
          if (v64)
          {
            v65 = v64;
            operator delete(v64);
          }
          v59 = 0;
          v32 = *(_QWORD *)(v58 + 8);
          v33 = (llvm::MachineFunction *)a3[4];
          v69[0] = 0;
          v34 = *((_QWORD *)v33 + 28);
          if (v34)
          {
            *((_QWORD *)v33 + 28) = *(_QWORD *)v34;
            v60 = 0;
          }
          else
          {
            v34 = sub_1C484358C((uint64_t)v33 + 128, 72, 3);
            v60 = v69[0];
            if (v69[0])
            {
              llvm::MetadataTracking::retrack((uint64_t)v69, v69[0], (uint64_t)&v60);
              v69[0] = 0;
            }
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v34, v33, v32 + 144, &v60, 0);
          if (v60)
            llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
          if (v69[0])
            llvm::MetadataTracking::untrack((uint64_t)v69, v69[0]);
          v35 = a3[5];
          *(_QWORD *)(v34 + 24) = v35;
          v36 = *(_QWORD *)(v35 + 32);
          v37 = *(unsigned int *)(v34 + 40);
          if ((_DWORD)v37)
          {
            v40 = *(_QWORD *)(v34 + 32);
            v41 = *(_QWORD *)(v36 + 40);
            v42 = 32 * v37;
            do
            {
              if (!*(_BYTE *)v40)
              {
                v43 = *(unsigned int *)(v40 + 4);
                if ((int)v43 >= 0)
                  v44 = (uint64_t *)(*(_QWORD *)(v41 + 272) + 8 * v43);
                else
                  v44 = (uint64_t *)(*(_QWORD *)(v41 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
                v45 = *v44;
                if (*v44)
                {
                  v46 = *(_QWORD *)(v45 + 16);
                  *(_QWORD *)(v45 + 16) = v40;
                  *(_QWORD *)(v40 + 16) = v46;
                  if ((*(_BYTE *)(v40 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v40 + 24) = v45;
                  }
                  else
                  {
                    *(_QWORD *)(v40 + 24) = 0;
                    v44 = (uint64_t *)(v46 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v40 + 16) = v40;
                  *(_QWORD *)(v40 + 24) = 0;
                }
                *v44 = v40;
              }
              v40 += 32;
              v42 -= 32;
            }
            while (v42);
          }
          v38 = *(_QWORD *)(v36 + 728);
          if (v38)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v38 + 24))(v38, v34);
          v39 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v34 = v39 | *(_QWORD *)v34 & 7;
          *(_QWORD *)(v34 + 8) = v16;
          *(_QWORD *)(v39 + 8) = v34;
          *(_QWORD *)v16 = *(_QWORD *)v16 & 7 | v34;
          LODWORD(v60) = 16;
          v61 = 0;
          v62 = v31;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v33, (const llvm::MachineOperand *)&v60);
          *(_WORD *)(v34 + 44) = *(_WORD *)(v34 + 44) & 0xC | 1;
          if (v59)
            llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
        }
      }
    }
    result = sub_1C495C228((uint64_t)a2);
    if ((_DWORD)result)
    {
      v47 = a3[6];
      if (v57[318])
        v48 = 4;
      else
        v48 = 3;
      v49 = v47 & 0xFFFFFFFFFFFFFFF8;
      if ((v47 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v49 & 4) == 0)
      {
        while ((*(_WORD *)(v49 + 44) & 4) != 0)
          v49 = *(_QWORD *)v49 & 0xFFFFFFFFFFFFFFF8;
      }
      return sub_1C487ED18(v58, (uint64_t)a3, (unint64_t *)v49, 0, 189, v48, 1);
    }
  }
  return result;
}

uint64_t sub_1C487F8E8()
{
  return 0;
}

void sub_1C487F8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  if (!v5)
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v5;
  }
  if (!*(_DWORD *)(v6 + 32))
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = -858993459 * ((unint64_t)(*(_QWORD *)(v6 + 16) - v11) >> 3);
    if (!(_DWORD)v12)
      goto LABEL_12;
    v13 = (uint64_t *)(v11 + 8);
    while (1)
    {
      v14 = *v13;
      v13 += 5;
      if (v14 != -1)
        break;
      if (!--v12)
        goto LABEL_12;
    }
  }
  v7 = sub_1C49914F4(a2);
  if (a3)
  {
    v8 = v7;
    v9 = *(unsigned int *)(a3 + 56);
    if (v9 >= *(_DWORD *)(a3 + 60))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 48, a3 + 64, v9 + 1, 16);
      LODWORD(v9) = *(_DWORD *)(a3 + 56);
    }
    v10 = (_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v9);
    *v10 = v8;
    v10[1] = 0;
    ++*(_DWORD *)(a3 + 56);
  }
LABEL_12:
  *(_BYTE *)(v5 + 454) = 1;
}

uint64_t sub_1C487F9DC()
{
  return 0;
}

uint64_t sub_1C487F9E4()
{
  return 0;
}

void sub_1C487F9EC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _WORD *v6;
  _WORD *v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[8];

  v14[7] = *MEMORY[0x1E0C80C00];
  llvm::TargetFrameLowering::determineCalleeSaves(a1, (llvm::TargetFrameLowering **)a2, (uint64_t)a3);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v6 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
  if (v6)
  {
    v7 = v6;
    if (*v6)
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(&v13, v5, a2);
      v8 = (unsigned __int16)*v7;
      if (*v7)
      {
        v9 = *(_QWORD **)(a2 + 40);
        v10 = 1;
        do
        {
          v11 = 1 << v8;
          v12 = v8 >> 6;
          if (((1 << v8) & *((_QWORD *)v13 + v12)) != 0
            && llvm::MachineRegisterInfo::isPhysRegModified(v9, v8, 0))
          {
            *(_QWORD *)(*a3 + 8 * v12) |= v11;
          }
          v8 = (unsigned __int16)v7[v10++];
        }
        while (v8);
      }
      if (v13 != v14)
        free(v13);
    }
  }
}

uint64_t sub_1C487FB28(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  _BYTE *v4;

  if (a4)
  {
    v4 = a4;
    if ((*a4 & 4) != 0)
      return sub_1C487FE80(a3 + 40, (uint64_t)a4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v4 = 0;
  }
  while ((*((_WORD *)v4 + 22) & 8) != 0)
    v4 = (_BYTE *)*((_QWORD *)v4 + 1);
  return sub_1C487FE80(a3 + 40, (uint64_t)a4, *((_QWORD *)v4 + 1));
}

uint64_t sub_1C487FB64(uint64_t a1, _QWORD *a2, int a3, _DWORD *a4)
{
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v19;

  v7 = a2[7];
  v8 = (_BYTE *)a2[2];
  v9 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 176))(v8);
  *a4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 552))(v9, a2);
  if (v8[381])
  {
    v10 = *(_DWORD *)(v7 + 32);
    v11 = *(_QWORD *)(v7 + 8);
    v12 = *(_QWORD *)(v11 + 40 * (v10 + a3));
    if (a3 < 0 && (signed int)-v10 <= a3)
    {
      return *(_DWORD *)(v7 + 48) + (int)v12;
    }
    else
    {
      v13 = -858993459 * ((unint64_t)(*(_QWORD *)(v7 + 16) - v11) >> 3) - v10;
      if ((_DWORD)v13)
      {
        while (*(_QWORD *)(v11 + 40 * v10 + 8) == -1)
        {
          ++v10;
          if (!--v13)
            goto LABEL_16;
        }
        v14 = *(_DWORD *)(v11 + 40 * v10);
      }
      else
      {
LABEL_16:
        v14 = 0;
      }
      v15 = v12 - v14;
      v16 = *(_DWORD *)(v7 + 72);
      if (v16 == -1)
        v16 = 0;
      return v15 + v16;
    }
  }
  else if (*(_BYTE *)(a2[2] + 381)
         || (*(_WORD *)(*a2 + 18) & 0x3F70) != 0 && (*(_WORD *)(*a2 + 18) & 0x3FF0) != 0xFF0)
  {
    return *(int *)(*(_QWORD *)(v7 + 8) + 40 * (*(_DWORD *)(v7 + 32) + a3));
  }
  else
  {
    v19 = *(_DWORD *)(v7 + 72);
    if (v19 == -1)
      v19 = 0;
    return v19
         + *(_DWORD *)(*(_QWORD *)(v7 + 8) + 40 * (*(_DWORD *)(v7 + 32) + a3))
         - *(_DWORD *)(v7 + 48);
  }
}

uint64_t sub_1C487FCF0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t **v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 112))(*(_QWORD *)(a2 + 16));
  v11 = a4;
  v9 = *a4;
  v10 = v11[1];
  if (v10 != v9)
  {
    v12 = v8;
    v13 = *(unsigned __int8 **)(a2 + 56);
    v14 = v10;
    do
    {
      v15 = 0;
      v16 = *(_DWORD *)(v14 - 12);
      v14 -= 12;
      v17 = *(uint64_t ***)(v7 + 240);
      v18 = v16 - 0x40000000;
      v19 = (unint64_t)v16 >> 3;
      v20 = 1 << (v16 & 7);
      do
      {
        if (v18 >= 0xC0000001)
        {
          v21 = **v17;
          if (v19 < *(unsigned __int16 *)(v21 + 22)
            && (v20 & *(_BYTE *)(*(_QWORD *)(v21 + 8) + v19)) != 0
            && (!v15
             || *v17 != v15
             && ((*(_DWORD *)(v15[1] + ((*(unsigned __int16 *)(v21 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v21 + 24)) & 1) != 0))
          {
            v15 = *v17;
          }
        }
        ++v17;
      }
      while (v17 != *(uint64_t ***)(v7 + 248));
      v23 = (unsigned int *)(*(_QWORD *)(a3 + 264)
                           + 24
                           * (*(unsigned __int16 *)(*v15 + 24)
                            + *(_DWORD *)(a3 + 272)
                            * ((*(_QWORD *)(a3 + 248) - *(_QWORD *)(a3 + 240)) >> 3))
                           + 4);
      v22 = *v23;
      v24 = 63 - __clz((unint64_t)v23[1] >> 3);
      if (*(unsigned __int8 *)(v12 + 12) >= v24)
        v25 = v24;
      else
        v25 = *(_BYTE *)(v12 + 12);
      *(_DWORD *)(v10 - 8) = llvm::MachineFrameInfo::CreateStackObject(v13, v22 >> 3, v25, 1u, 0, 0);
      *(_BYTE *)(v10 - 3) = 0;
      v10 = v14;
    }
    while (v14 != v9);
  }
  return 1;
}

uint64_t sub_1C487FE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = *(_QWORD *)(v4 + 8);
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 32);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 728);
        if (v8)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v4);
        v9 = *(unsigned int *)(v4 + 40);
        if ((_DWORD)v9)
        {
          v10 = *(_QWORD *)(v4 + 32);
          v11 = *(_QWORD *)(v7 + 40);
          v12 = 32 * v9;
          do
          {
            if (!*(_BYTE *)v10)
            {
              v13 = *(unsigned int *)(v10 + 4);
              if ((v13 & 0x80000000) != 0)
                v14 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
              else
                v14 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v13);
              v15 = *v14;
              v17 = *(_QWORD *)(v10 + 16);
              v16 = *(_QWORD *)(v10 + 24);
              if (v10 != *v14)
                v14 = (uint64_t *)(v17 + 24);
              *v14 = v16;
              if (v16)
                v18 = v16;
              else
                v18 = v15;
              *(_QWORD *)(v18 + 16) = v17;
              *(_QWORD *)(v10 + 16) = 0;
              *(_QWORD *)(v10 + 24) = 0;
            }
            v10 += 32;
            v12 -= 32;
          }
          while (v12);
        }
      }
      *(_QWORD *)(v4 + 24) = 0;
      v19 = *(unint64_t **)(v4 + 8);
      v20 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
      *v19 = v20 | *v19 & 7;
      *(_QWORD *)(v20 + 8) = v19;
      *(_QWORD *)v4 &= 7uLL;
      *(_QWORD *)(v4 + 8) = 0;
      v21 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v22 = *(_QWORD **)(v4 + 32);
      if (v22)
      {
        v23 = *(unsigned __int8 *)(v4 + 47);
        v24 = (uint64_t *)(v21 + 232);
        if (*(_DWORD *)(v21 + 240) <= v23)
          sub_1C515FA1C(v21 + 232, v23 + 1);
        v25 = *v24;
        *v22 = *(_QWORD *)(*v24 + 8 * v23);
        *(_QWORD *)(v25 + 8 * v23) = v22;
      }
      *(_QWORD *)v4 = *(_QWORD *)(v21 + 224);
      *(_QWORD *)(v21 + 224) = v4;
      v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t sub_1C487FFF0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX2 Image Cache Bit";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "agx2-image-cache";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EB2C8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4880140;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4880080(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EB2C8) = &off_1E7F9FD78;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7EB2D0);
  if (v3 != -1)
  {
    v7[0] = sub_1C487FFF0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7EB2D0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4880140()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4880080(v0);
}

void sub_1C4880168(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C48801FC(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4880288()
{
  return "AGX2 Image Cache Bit Pass";
}

void sub_1C4880298(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C48802BC(uint64_t a1, uint64_t *a2)
{
  char v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t i;
  uint64_t j;
  uint64_t v21;
  int v22;
  int v23;
  char v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  _QWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t k;
  uint64_t *v68;
  _BYTE *v69;
  int v70;
  uint64_t *v71;
  uint64_t v72;
  unsigned __int16 *v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v79;
  unint64_t v80;
  __int16 v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  llvm *UnderlyingObject;
  llvm *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _QWORD *v101;
  _QWORD *v102;
  unsigned int v103;
  uint64_t v104;
  _QWORD *v105;
  BOOL v106;
  uint64_t v107;
  _QWORD *v109;
  _QWORD *v110;
  char v111;
  _QWORD *v112;
  uint64_t v113;
  BOOL v114;
  _QWORD *v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  int *v124;
  char v125;
  _BYTE *v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  char v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  void **v136;
  _QWORD *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  unint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t *v147;
  uint64_t v148;
  char v149;
  _QWORD *v150;
  uint64_t v151;
  int *v152;
  uint64_t v153;
  char v154;
  char v155;
  uint64_t v156;
  _QWORD *v157;
  unsigned int v158;
  int v159;
  _QWORD *v160;
  BOOL v161;
  unsigned __int8 v162;
  unsigned __int8 v163;
  unsigned __int16 *v164;
  int v165;
  uint64_t v166;
  _QWORD *v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int v171;
  int v172;
  int v173;
  char v174;
  char v175;
  char v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  char v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  char *v190;
  char *v191;
  _BYTE *v192;
  _BYTE *v193;
  char v194;
  const void **v195;
  uint64_t *v196;
  int v197;
  uint64_t *v198;
  char v199;
  _BYTE *v200;
  int v201;
  int v202;
  int v203;
  uint64_t *v204;
  char v205;
  uint64_t *v206;
  int v207;
  char v208;
  uint64_t *v209;
  char v210;
  uint64_t *v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  _QWORD *v215;
  unsigned int v216;
  void *v217;
  uint64_t v218;
  _BYTE v219[160];
  uint64_t v220;
  _QWORD *v221;
  unsigned int v222;
  uint64_t *v223;
  uint64_t *v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  _BYTE v228[40];
  _QWORD v229[7];
  uint64_t v230;
  _QWORD *v231;
  unsigned int v232;
  int v233;
  __int16 v234;
  __int16 v235;
  _QWORD *v236;
  __int128 v237;
  _QWORD v238[3];
  _BYTE v239[152];
  _QWORD *v240;
  uint64_t v241;
  _QWORD v242[19];
  _QWORD v243[6];

  v243[4] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2[2] + 297))
  {
    v2 = 0;
    return v2 & 1;
  }
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2[1] + 16))(a2[1], *a2);
  v5 = (_BYTE *)v4;
  if (*(_BYTE *)(v4 + 298))
  {
    v6 = *a2;
    v233 = 0;
    v2 = 0;
    v7 = sub_1C4979B6C(v4, v6, "OptimizeImageCacheBits", &v233) && v233 == 0;
    if (v7)
      return v2 & 1;
  }
  v8 = *a2;
  v233 = 0;
  v9 = sub_1C4979B6C((int)v5, v8, "SampleWriteOverride", &v233);
  v10 = v233;
  v11 = *a2;
  v233 = 0;
  v12 = sub_1C4979B6C((int)v5, v11, "SampleReadOverride", &v233);
  v13 = v233;
  v14 = *a2;
  v233 = 0;
  v200 = v5;
  v15 = sub_1C4979B6C((int)v5, v14, "ImageWriteBlockOverride", &v233);
  v16 = v233;
  v206 = a2;
  v17 = *(_QWORD *)(*a2 + 40);
  v234 = 0;
  v235 = 0;
  v236 = v238;
  v237 = xmmword_1C6464ED0;
  v238[1] = v239;
  v238[2] = 0x1000000000;
  memset(&v239[128], 0, 24);
  v240 = v242;
  v241 = 0x800000000;
  v242[16] = 0;
  v242[17] = v243;
  v242[18] = 0x800000000;
  sub_1C48815D8((uint64_t)&v233, v17 + 272);
  v230 = 1;
  v18 = &v231;
  for (i = 8; i != 136; i += 32)
    *(uint64_t *)((char *)&v230 + i) = -4096;
  v229[0] = 1;
  for (j = 1; j != 17; ++j)
    LODWORD(v229[j]) = -1;
  v7 = v13 == 0;
  v21 = v206[43];
  if (v7)
    v22 = 0;
  else
    v22 = v12;
  if (v10)
    v23 = v9;
  else
    v23 = 0;
  v201 = v23;
  v202 = v22;
  v220 = 0;
  v221 = 0;
  if (v16)
    v24 = v15;
  else
    v24 = 0;
  v194 = v24;
  v222 = 0;
  v224 = 0;
  v225 = 0;
  v223 = 0;
  sub_1C5E9D34C(v17, (uint64_t)&v220);
  sub_1C5E9D674(v17, (uint64_t)&v220, 0);
  v217 = v219;
  v218 = 0xA00000000;
  v25 = v223;
  v209 = v224;
  if (v223 == v224)
    goto LABEL_81;
  do
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 408))(v21, *v25))
      goto LABEL_24;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 400))(v21, *v25);
    if (v26)
      goto LABEL_24;
    v27 = *v25;
    if (!v222)
      goto LABEL_32;
    LODWORD(v28) = ((v27 >> 4) ^ (v27 >> 9)) & (v222 - 1);
    v29 = v220 + 16 * v28;
    v30 = *(_QWORD *)v29;
    if (*(_QWORD *)v29 != v27)
    {
      v31 = 1;
      while (v30 != -4096)
      {
        v32 = v28 + v31++;
        v28 = v32 & (v222 - 1);
        v30 = *(_QWORD *)(v220 + 16 * v28);
        if (v30 == v27)
        {
          v29 = v220 + 16 * v28;
          goto LABEL_33;
        }
      }
LABEL_32:
      v29 = v220 + 16 * v222;
    }
LABEL_33:
    if (v29 == v220 + 16 * v222)
      v33 = v224;
    else
      v33 = &v223[2 * *(unsigned int *)(v29 + 8)];
    v34 = v33[1];
    v35 = *(_QWORD *)(v27 + 24);
    if (*(_BYTE *)(v35 + 8) != 17
      || (v36 = *(_QWORD *)(v34 - 8 * *(unsigned int *)(v34 + 8) + 8), *(_BYTE *)v36 == 1)
      && *(_BYTE *)(*(_QWORD *)(v36 + 128) + 16) == 16)
    {
      v37 = 1;
LABEL_40:
      v38 = v34 + 8;
      while (2)
      {
        v39 = *(unsigned int *)(v34 + 8);
        v40 = (_QWORD *)(v34 - 8 * v39);
        v41 = v40[1];
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v40 + 128) + 24) + 8) == 17)
        {
          if (*(_BYTE *)v41 != 1 || (v42 = *(_QWORD *)(v41 + 128), *(_BYTE *)(v42 + 16) != 16))
          {
            v43 = (_QWORD *)(*(_QWORD *)(v38 - 8 * v39) - 8 * *(unsigned int *)(*(_QWORD *)(v38 - 8 * v39) + 8));
            v44 = *(_QWORD *)(*v43 + 128);
            v45 = (unsigned int *)(v44 + 24);
            if (*(_DWORD *)(v44 + 32) >= 0x41u)
              v45 = *(unsigned int **)v45;
            v46 = *v45;
            v47 = v43[1];
            goto LABEL_51;
          }
        }
        else
        {
          v42 = *(_QWORD *)(v41 + 128);
        }
        v48 = (unsigned int *)(v42 + 24);
        if (*(_DWORD *)(v42 + 32) >= 0x41u)
          v48 = *(unsigned int **)v48;
        v46 = *v48;
        v47 = v40[2];
LABEL_51:
        v49 = *(_QWORD *)(v47 + 128);
        v50 = (_QWORD *)(v49 + 24);
        if (*(_DWORD *)(v49 + 32) >= 0x41u)
          v50 = (_QWORD *)*v50;
        v51 = (_QWORD *)*v50;
        v52 = *v25;
        v214 = 0;
        v53 = sub_1C48819CC((uint64_t)&v230, v52, &v214);
        v54 = v214;
        if ((v53 & 1) != 0)
        {
          v59 = (_DWORD *)(v214 + 16);
          v57 = *(unsigned int *)(v214 + 16);
          v58 = (_QWORD *)(v214 + 8);
          if (v57 >= *(unsigned int *)(v214 + 20))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v214 + 8, v214 + 24, v57 + 1, 4);
            v57 = *(unsigned int *)(v54 + 16);
          }
        }
        else
        {
          v55 = v230 >> 1;
          if ((v230 & 1) != 0)
            v56 = 4;
          else
            v56 = v232;
          if (4 * v55 + 4 >= 3 * v56)
          {
            v56 *= 2;
          }
          else if (v56 + ~v55 - HIDWORD(v230) > v56 >> 3)
          {
            goto LABEL_59;
          }
          sub_1C4881A78((uint64_t)&v230, v56);
          v214 = 0;
          sub_1C48819CC((uint64_t)&v230, v52, &v214);
          v54 = v214;
LABEL_59:
          LODWORD(v230) = v230 + 2;
          if (*(_QWORD *)v54 != -4096)
            --HIDWORD(v230);
          v57 = 0;
          *(_QWORD *)v54 = v52;
          *(_QWORD *)(v54 + 8) = v54 + 24;
          v58 = (_QWORD *)(v54 + 8);
          *(_QWORD *)(v54 + 16) = 0x100000000;
          v59 = (_DWORD *)(v54 + 16);
        }
        *(_DWORD *)(*v58 + 4 * v57) = (_DWORD)v51;
        ++*v59;
        if (v46 == 6)
          v60 = 0x200000000;
        else
          v60 = 0x100000000;
        v61 = v218;
        if (v218 >= (unint64_t)HIDWORD(v218))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v218 + 1, 8);
          v61 = v218;
        }
        v18 = &v231;
        *((_QWORD *)v217 + v61) = v60 | v51;
        LODWORD(v218) = v218 + 1;
        v38 += 8;
        if (!--v37)
          goto LABEL_24;
        continue;
      }
    }
    v37 = *(unsigned int *)(v35 + 32);
    if (*(_DWORD *)(v35 + 32))
      goto LABEL_40;
LABEL_24:
    v25 += 2;
  }
  while (v25 != v209);
  v62 = (int *)v217;
  if ((_DWORD)v218)
  {
    v63 = 8 * v218;
    do
    {
      v64 = *((_BYTE *)v62 + 4);
      v65 = sub_1C4881E58(v229, v62);
      *(_BYTE *)(v65 + 4) |= v64;
      v62 += 2;
      v63 -= 8;
    }
    while (v63);
    v62 = (int *)v217;
  }
  if (v62 != (int *)v219)
    free(v62);
  v25 = v223;
LABEL_81:
  if (v25)
  {
    v224 = v25;
    operator delete(v25);
  }
  v66 = 8;
  MEMORY[0x1CAA32FB4](v220, 8);
  v226 = v228;
  v227 = 0x500000000;
  v220 = 1;
  do
  {
    *(uint64_t *)((char *)&v220 + v66) = -4096;
    v66 += 32;
  }
  while (v66 != 136);
  v217 = v219;
  v218 = 0x1400000000;
  v214 = 1;
  for (k = 8; k != 136; k += 8)
    *(_DWORD *)((char *)&v214 + k) = -1;
  v68 = (uint64_t *)v206[41];
  v196 = v206 + 40;
  v69 = v200;
  if (v68 == v206 + 40)
    goto LABEL_301;
  v70 = 0;
  v210 = 0;
  v207 = 0;
  do
  {
    v71 = v68 + 6;
    v198 = v68;
    v72 = v68[7];
    v204 = v68 + 6;
    if ((uint64_t *)v72 != v68 + 6)
    {
      while (1)
      {
        v73 = *(unsigned __int16 **)(v72 + 16);
        v74 = *v73;
        if (v74 == 8264)
        {
          if (*(_QWORD *)(*(_QWORD *)(v72 + 32) + 32 * sub_1C4B138B4(8264) + 16) == 3)
          {
            v75 = v227;
            if (v227 >= (unint64_t)HIDWORD(v227))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v226, (uint64_t)v228, v227 + 1, 8);
              v75 = v227;
            }
            *((_QWORD *)v226 + v75) = v72;
            LODWORD(v227) = v227 + 1;
          }
          goto LABEL_221;
        }
        v76 = *((_QWORD *)v73 + 2);
        v77 = v74 - 2862;
        if ((v74 - 2862) >= 0xB4 && (*((_QWORD *)v73 + 2) & 2) == 0)
          goto LABEL_221;
        v79 = *(_QWORD *)(v72 + 48);
        if ((v79 & 7) != 0)
        {
          v80 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v80 = v79 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v72 + 48) = v79 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((!v202 || (v73[8] & 2) == 0) && (!v201 || *v73 - 2970 >= 0x48))
        {
          v81 = *(_WORD *)(v80 + 32);
          if ((v81 & 0x80) != 0)
          {
            v82 = v200[383];
            v83 = sub_1C4B138B4(*v73);
            v7 = v82 == 0;
            v69 = v200;
            v84 = 7;
            if (v7)
              v84 = 5;
            *(_QWORD *)(*(_QWORD *)(v72 + 32) + 32 * v83 + 16) = v84;
          }
          else if ((v81 & 0x40) != 0)
          {
            goto LABEL_221;
          }
        }
        if ((*(_QWORD *)v80 & 4) == 0
          || (v85 = *(_QWORD *)v80 & 0xFFFFFFFFFFFFFFF8) == 0
          || (v86 = *(_QWORD *)(v85 + 16)) == 0)
        {
          v100 = v230 & 1;
          v101 = v231;
          if ((v230 & 1) != 0)
            v102 = &v231;
          else
            v102 = v231;
          v103 = v232;
          if ((v230 & 1) != 0)
            v104 = 4;
          else
            v104 = v232;
          v105 = &v102[4 * v104];
          v90 = -1;
          goto LABEL_173;
        }
        UnderlyingObject = llvm::getUnderlyingObject(*(llvm **)(v85 + 16), (const llvm::Value *)6);
        v88 = UnderlyingObject;
        v89 = *((unsigned __int8 *)UnderlyingObject + 16);
        v90 = v89 <= 3 ? 0 : -1;
        if (v89 != 84)
          break;
        v91 = *((_QWORD *)UnderlyingObject - 4);
        if (!v91
          || *(_BYTE *)(v91 + 16)
          || *(_QWORD *)(v91 + 24) != *((_QWORD *)UnderlyingObject + 9)
          || (*(_BYTE *)(v91 + 33) & 0x20) == 0)
        {
          break;
        }
        if (*(_DWORD *)(v91 + 36) == 1822)
        {
          v88 = llvm::getUnderlyingObject(*((llvm **)UnderlyingObject - 4 * (*((_DWORD *)UnderlyingObject + 5) & 0x7FFFFFF)), (const llvm::Value *)6);
          v89 = *((unsigned __int8 *)v88 + 16);
          if (v88)
            v106 = v89 == 16;
          else
            v106 = 0;
          if (!v106)
            goto LABEL_165;
          v90 = -1;
        }
LABEL_167:
        v213 = 0;
        v111 = sub_1C48819CC((uint64_t)&v230, (uint64_t)v88, &v213);
        v100 = v230 & 1;
        if ((v111 & 1) != 0)
        {
          v105 = v213;
        }
        else
        {
          if ((v230 & 1) != 0)
          {
            v112 = &v231;
            v113 = 4;
          }
          else
          {
            v112 = v231;
            v113 = v232;
          }
          v105 = &v112[4 * v113];
        }
        v101 = v231;
        v103 = v232;
LABEL_173:
        v207 |= (v76 >> 1) & 1;
        v210 |= v77 < 0xB4;
        v114 = v100 == 0;
        if (v100)
          v115 = &v231;
        else
          v115 = v101;
        if (v114)
          v116 = v103;
        else
          v116 = 4;
        if (v105 == &v115[4 * v116])
        {
          v121 = v218;
          if (v218 >= (unint64_t)HIDWORD(v218))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v218 + 1, 8);
            v121 = v218;
          }
          v71 = v204;
          *((_QWORD *)v217 + v121) = v72;
          LODWORD(v218) = v218 + 1;
          v70 |= v77 < 0xB4;
          goto LABEL_221;
        }
        v117 = v74 - 2970;
        if (v90 != -1)
        {
          v118 = *(_DWORD *)(v105[1] + 4 * v90);
          v119 = sub_1C4881520((uint64_t)v229, v118);
          if (v69[318])
          {
            if (v117 < 0xFFFFFF94)
              v120 = v119;
            else
              v120 = 0;
            v71 = v204;
            if (v120 != 1)
              goto LABEL_217;
          }
          else
          {
            v71 = v204;
            if ((sub_1C4881520((uint64_t)v229, v118) & 1) == 0)
            {
LABEL_217:
              LODWORD(v213) = v118;
              v145 = sub_1C4881E58(&v214, (int *)&v213);
              if ((v76 & 2) != 0)
                v146 = 1;
              else
                v146 = 2;
              *(_BYTE *)(v145 + 4) |= v146;
              goto LABEL_221;
            }
          }
          v141 = v218;
          if (v218 >= (unint64_t)HIDWORD(v218))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v218 + 1, 8);
            v141 = v218;
          }
          *((_QWORD *)v217 + v141) = v72;
          LODWORD(v218) = v218 + 1;
          v213 = (_QWORD *)v72;
          v142 = sub_1C488221C(&v220, (uint64_t *)&v213);
          v143 = v142;
          v144 = *((unsigned int *)v142 + 4);
          if (v144 >= *((unsigned int *)v142 + 5))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v142 + 1), (uint64_t)(v142 + 3), v144 + 1, 4);
            v144 = *((unsigned int *)v143 + 4);
          }
          *(_DWORD *)(v143[1] + 4 * v144) = v118;
          ++*((_DWORD *)v143 + 4);
          goto LABEL_217;
        }
        v122 = *((unsigned int *)v105 + 4);
        if (!(_DWORD)v122)
        {
          v71 = v204;
          goto LABEL_221;
        }
        v195 = (const void **)(v105 + 1);
        v197 = v70;
        v123 = 0;
        v124 = (int *)v105[1];
        if ((v76 & 2) != 0)
          v125 = 1;
        else
          v125 = 2;
        v126 = v69;
        v127 = 4 * v122;
        do
        {
          v129 = *v124++;
          v128 = v129;
          v130 = v126[318];
          v131 = sub_1C4881520((uint64_t)v229, v129);
          if (v117 < 0xFFFFFF94)
            v132 = v131;
          else
            v132 = 0;
          if (!v130)
            v132 = v131;
          v123 |= v132;
          LODWORD(v213) = v128;
          v133 = sub_1C4881E58(&v214, (int *)&v213);
          *(_BYTE *)(v133 + 4) |= v125;
          v127 -= 4;
        }
        while (v127);
        v18 = &v231;
        v69 = v126;
        v70 = v197;
        if ((v123 & 1) != 0)
        {
          v134 = v218;
          if (v218 >= (unint64_t)HIDWORD(v218))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v217, (uint64_t)v219, v218 + 1, 8);
            v134 = v218;
          }
          *((_QWORD *)v217 + v134) = v72;
          LODWORD(v218) = v218 + 1;
          v213 = (_QWORD *)v72;
          v135 = sub_1C488221C(&v220, (uint64_t *)&v213);
          v136 = (void **)(v135 + 1);
          if (v135 + 1 != v195)
          {
            v137 = v135;
            v138 = *((unsigned int *)v105 + 4);
            v139 = *((unsigned int *)v135 + 4);
            if (v139 >= v138)
            {
              if ((_DWORD)v138)
                memmove(*v136, *v195, 4 * v138);
            }
            else
            {
              if (*((_DWORD *)v135 + 5) < v138)
              {
                *((_DWORD *)v135 + 4) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v135 + 1), (uint64_t)(v135 + 3), v138, 4);
LABEL_208:
                v139 = 0;
              }
              else
              {
                if (!(_DWORD)v139)
                  goto LABEL_208;
                memmove(*v136, *v195, 4 * v139);
              }
              v140 = *((unsigned int *)v105 + 4);
              if (v139 != v140)
                memcpy((char *)*v136 + 4 * v139, (char *)*v195 + 4 * v139, (_BYTE *)*v195 + 4 * v140 - ((_BYTE *)*v195 + 4 * v139));
            }
            *((_DWORD *)v137 + 4) = v138;
            v69 = v200;
          }
        }
        v71 = v204;
        if (!v72)
        {
LABEL_230:
          while ((*(_WORD *)(v72 + 44) & 8) != 0)
            v72 = *(_QWORD *)(v72 + 8);
          goto LABEL_231;
        }
LABEL_221:
        if ((*(_BYTE *)v72 & 4) == 0)
          goto LABEL_230;
LABEL_231:
        v72 = *(_QWORD *)(v72 + 8);
        if ((uint64_t *)v72 == v71)
          goto LABEL_236;
      }
      v92 = *(unsigned __int8 *)(v86 + 16);
      if (v92 == 62 || v92 == 5 && *(_WORD *)(v86 + 18) == 34)
      {
        v93 = *(_DWORD *)(v86 + 20);
        if ((v93 & 0x7FFFFFFu) >= 3)
        {
          v7 = v92 == 62;
          v94 = 24;
          if (v7)
            v94 = 64;
          v95 = *(_QWORD *)(v86 + v94);
          if (v95 && *(_BYTE *)(v95 + 8) == 17)
          {
            v96 = *(_QWORD *)(v95 + 24);
            if (v96 && *(_BYTE *)(v96 + 8) == 17)
            {
              v98 = *(_QWORD *)(v96 + 24);
              if (v98)
              {
                if (*(_BYTE *)(v98 + 8) == 2)
                {
                  v99 = (v93 & 0x40000000) != 0 ? *(_QWORD *)(v86 - 8) : v86 - 32 * (v93 & 0x7FFFFFF);
                  v107 = *(_QWORD *)(v99 + 64);
                  if (v107 && *(_BYTE *)(v107 + 16) == 16)
                  {
                    v109 = (_QWORD *)(v107 + 24);
                    if (*(_DWORD *)(v107 + 32) >= 0x41u)
                      v109 = (_QWORD *)*v109;
                    v110 = (_QWORD *)*v109;
                    if ((_DWORD)v110 != -1)
                      v90 = v110;
                  }
                }
              }
            }
          }
        }
      }
LABEL_165:
      if (v89 >= 4)
        v90 = -1;
      goto LABEL_167;
    }
LABEL_236:
    v68 = (uint64_t *)v198[1];
  }
  while (v68 != v196);
  if ((v210 & 1) == 0)
  {
LABEL_301:
    v2 = 0;
    goto LABEL_302;
  }
  if ((_DWORD)v218)
  {
    v2 = 0;
    v199 = 0;
    v147 = (uint64_t *)v217;
    v211 = (uint64_t *)((char *)v217 + 8 * v218);
    v208 = v207 ^ 1;
    v203 = v202 ^ 1;
    v205 = v70 ^ 1;
    while (1)
    {
      v148 = *v147;
      v212 = v148;
      v213 = 0;
      v149 = sub_1C4882288((uint64_t)&v220, v148, &v213);
      v150 = v213;
      if ((v149 & 1) == 0)
        break;
      v151 = *((unsigned int *)v213 + 4);
      if (!(_DWORD)v151)
        goto LABEL_253;
      v152 = (int *)v213[1];
      v153 = 4 * v151;
      v154 = 1;
      v155 = 1;
      do
      {
        v156 = sub_1C488157C((uint64_t)&v214, *v152);
        if ((v214 & 1) != 0)
          v157 = &v215;
        else
          v157 = v215;
        v158 = v216;
        if ((v214 & 1) != 0)
          v158 = 16;
        if (&v157[v158] != (_QWORD *)v156)
        {
          v159 = *(_BYTE *)(v156 + 4) & 3;
          v155 &= v159 == 2;
          v154 &= v159 == 1;
        }
        ++v152;
        v153 -= 4;
      }
      while (v153);
      LODWORD(v151) = *((_DWORD *)v150 + 4);
      v18 = &v231;
LABEL_254:
      v161 = (_DWORD)v151 != 0;
      v162 = (v161 | v208) & v155;
      v163 = v205 & v154 & v161;
      v164 = *(unsigned __int16 **)(v148 + 16);
      v165 = *v164;
      v166 = *(_QWORD *)(v148 + 32) + 32 * sub_1C4B138B4(v165);
      v169 = *(_DWORD *)(v166 + 16);
      v167 = (_QWORD *)(v166 + 16);
      v168 = v169;
      v170 = *((_QWORD *)v164 + 2);
      if (((v170 & 2) == 0) | (v162 | v163) & 1)
        v171 = v168;
      else
        v171 = 5;
      if (!v200[318])
      {
        if ((v165 - 2970) >= 0x48)
        {
          if ((((v165 - 2862) < 0x6C) & v162) == 0)
            goto LABEL_265;
        }
        else if ((v162 & 1) == 0)
        {
          if ((v168 & 3) > (v171 & 3))
            v171 = v168;
          goto LABEL_270;
        }
        v171 = 1;
      }
LABEL_265:
      if ((v168 & 3) > (v171 & 3))
        v171 = v168;
      if ((v162 & 1) != 0)
      {
        v172 = v200[373];
        if (v200[373])
          goto LABEL_273;
        goto LABEL_274;
      }
LABEL_270:
      if ((v163 & 1) != 0)
      {
        v172 = 0;
        goto LABEL_274;
      }
      v172 = v200[372];
      if (v200[372])
      {
LABEL_273:
        v171 = 7;
        v172 = 1;
      }
LABEL_274:
      v7 = (v170 & 2) == 0;
      v173 = v203;
      if (v7)
        v173 = 1;
      if (v173 == 1)
      {
        if (v201)
        {
          v174 = v194;
          if ((v165 - 3042) >= 0xFFFFFFB8)
            v174 = 0;
          if ((v174 & 1) != 0)
          {
            if ((v165 - 2862) >= 0x6C)
              goto LABEL_290;
          }
          else if ((v165 - 3042) < 0xFFFFFFB8)
          {
            goto LABEL_290;
          }
        }
        else
        {
          v175 = v194;
          if ((v165 - 2862) >= 0x6C)
            v175 = 0;
          if ((v175 & 1) == 0)
            goto LABEL_290;
        }
      }
      if (v172)
        v171 = 7;
      else
        v171 = v168;
LABEL_290:
      if (v200[325] && ((v165 - 2970) < 0x48 || (v165 - 2862) <= 0x6B) && v171 == 1)
        v199 = 1;
      if (v171 != v168)
      {
        *v167 = v171;
        v2 = 1;
      }
      if (++v147 == v211)
      {
        if ((v199 & 1) == 0)
          goto LABEL_337;
        goto LABEL_302;
      }
    }
    v160 = sub_1C4882334(&v220, &v212, v213);
    LODWORD(v151) = 0;
    *v160 = v148;
    v160[1] = v160 + 3;
    v160[2] = 0x100000000;
LABEL_253:
    v155 = 1;
    v154 = 1;
    goto LABEL_254;
  }
  v2 = 0;
LABEL_337:
  if ((_DWORD)v227)
  {
    v190 = (char *)v226;
    v191 = (char *)v226 + 8 * v227;
    do
    {
      v192 = *(_BYTE **)v190;
      v193 = *(_BYTE **)v190;
      if ((**(_BYTE **)v190 & 4) == 0)
      {
        v193 = *(_BYTE **)v190;
        if ((*((_WORD *)v192 + 22) & 8) != 0)
        {
          v193 = *(_BYTE **)v190;
          do
            v193 = (_BYTE *)*((_QWORD *)v193 + 1);
          while ((*((_WORD *)v193 + 22) & 8) != 0);
        }
      }
      sub_1C487FE80(*((_QWORD *)v192 + 3) + 40, (uint64_t)v192, *((_QWORD *)v193 + 1));
      v190 += 8;
    }
    while (v190 != v191);
    v2 = 1;
  }
LABEL_302:
  if ((v214 & 1) == 0)
    MEMORY[0x1CAA32FB4](v215, 4);
  if (v217 != v219)
    free(v217);
  v176 = v220;
  if ((v220 & 1) != 0)
  {
    v177 = 4;
    v178 = &v221;
LABEL_308:
    v179 = v178 + 3;
    v180 = 32 * v177;
    do
    {
      v181 = *(v179 - 3);
      if (v181 != -4096 && v181 != -8192)
      {
        v182 = (_QWORD *)*(v179 - 2);
        if (v179 != v182)
          free(v182);
      }
      v179 += 4;
      v180 -= 32;
    }
    while (v180);
    v176 = v220;
  }
  else
  {
    v177 = v222;
    if (v222)
    {
      v178 = v221;
      goto LABEL_308;
    }
  }
  if ((v176 & 1) == 0)
    MEMORY[0x1CAA32FB4](v221, 8);
  if (v226 != v228)
    free(v226);
  if ((v229[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v229[1], 4);
  v183 = v230;
  if ((v230 & 1) != 0)
  {
    v184 = 4;
LABEL_323:
    v185 = v18 + 3;
    v186 = 32 * v184;
    do
    {
      v187 = *(v185 - 3);
      if (v187 != -4096 && v187 != -8192)
      {
        v188 = (_QWORD *)*(v185 - 2);
        if (v185 != v188)
          free(v188);
      }
      v185 += 4;
      v186 -= 32;
    }
    while (v186);
    v183 = v230;
  }
  else
  {
    v184 = v232;
    if (v232)
    {
      v18 = v231;
      goto LABEL_323;
    }
  }
  if ((v183 & 1) == 0)
    MEMORY[0x1CAA32FB4](v231, 8);
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v233);
  return v2 & 1;
}

uint64_t sub_1C4881520(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = sub_1C488157C(a1, a2);
  if ((*(_DWORD *)a1 & 1) != 0)
    v4 = a1 + 8;
  else
    v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  if ((*(_DWORD *)a1 & 1) != 0)
    v5 = 16;
  if (v4 + 8 * v5 == v3)
    return 0;
  else
    return (*(unsigned __int8 *)(v3 + 4) >> 1) & 1;
}

uint64_t sub_1C488157C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_1C4881F40(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 16;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 8 * v5;
}

uint64_t sub_1C48815D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;

  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  v4 = *(_QWORD *)(a1 + 376);
  if (v4)
  {
    v22 = *(_QWORD *)v4;
    v23 = *(unsigned int *)(v4 + 16);
    v24 = *(_QWORD *)v4 + 16 * v23;
    if (*(_DWORD *)(v4 + 8))
    {
      if ((_DWORD)v23)
      {
        v25 = 16 * v23;
        v26 = *(_QWORD *)v4;
        while (*(_QWORD *)v26 == -4096 || *(_QWORD *)v26 == -8192)
        {
          v26 += 16;
          v25 -= 16;
          if (!v25)
            goto LABEL_61;
        }
      }
      else
      {
        v26 = *(_QWORD *)v4;
      }
    }
    else
    {
LABEL_61:
      v26 = *(_QWORD *)v4 + 16 * v23;
    }
    v27 = v22 + 16 * v23;
    if (v26 != v27)
    {
      do
      {
        free(*(void **)(v26 + 8));
        v28 = v26 + 16;
        v26 = v24;
        if (v28 != v24)
        {
          v26 = v28;
          while (*(_QWORD *)v26 == -4096 || *(_QWORD *)v26 == -8192)
          {
            v26 += 16;
            if (v26 == v24)
            {
              v26 = v24;
              break;
            }
          }
        }
      }
      while (v26 != v27);
      v22 = *(_QWORD *)v4;
    }
    MEMORY[0x1CAA32FB4](v22, 8);
    MEMORY[0x1CAA32FC0](v4, 0x1020C405AF6BDC9);
  }
  *(_QWORD *)(a1 + 376) = 0;
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  if (a1 != a2)
  {
    v5 = (void **)(a1 + 32);
    v6 = *(_QWORD *)(a2 + 40);
    v7 = *(_QWORD *)(a1 + 40);
    if (v7 >= v6)
    {
      if (v6)
        memmove(*v5, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40));
    }
    else
    {
      if (*(_QWORD *)(a1 + 48) < v6)
      {
        *(_QWORD *)(a1 + 40) = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 32, (void *)(a1 + 56), v6, 1);
        v7 = 0;
      }
      else if (v7)
      {
        v29 = *(_QWORD *)(a1 + 40);
        memmove(*v5, *(const void **)(a2 + 32), v7);
        v7 = v29;
      }
      v8 = *(_QWORD *)(a2 + 40);
      if (v7 != v8)
        memcpy((char *)*v5 + v7, (const void *)(*(_QWORD *)(a2 + 32) + v7), v8 - v7);
    }
    *(_QWORD *)(a1 + 40) = v6;
    v9 = (void **)(a1 + 64);
    v10 = *(unsigned int *)(a2 + 72);
    v11 = *(unsigned int *)(a1 + 72);
    if (v11 >= v10)
    {
      if ((_DWORD)v10)
        memmove(*v9, *(const void **)(a2 + 64), 8 * v10 - 2);
LABEL_15:
      *(_DWORD *)(a1 + 72) = v10;
      v13 = (void **)(a1 + 232);
      v14 = *(unsigned int *)(a2 + 240);
      v15 = *(unsigned int *)(a1 + 240);
      if (v15 >= v14)
      {
        if ((_DWORD)v14)
          memmove(*v13, *(const void **)(a2 + 232), 16 * v14);
LABEL_21:
        *(_DWORD *)(a1 + 240) = v14;
        v17 = (void **)(a1 + 384);
        v18 = *(unsigned int *)(a2 + 392);
        v19 = *(unsigned int *)(a1 + 392);
        if (v19 >= v18)
        {
          if ((_DWORD)v18)
            memmove(*v17, *(const void **)(a2 + 384), 4 * v18);
          goto LABEL_27;
        }
        if (*(_DWORD *)(a1 + 396) < v18)
        {
          *(_DWORD *)(a1 + 392) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 384, a1 + 400, v18, 4);
        }
        else if ((_DWORD)v19)
        {
          memmove(*v17, *(const void **)(a2 + 384), 4 * v19);
LABEL_25:
          v20 = *(unsigned int *)(a2 + 392);
          if (v19 != v20)
            memcpy((char *)*v17 + 4 * v19, (const void *)(*(_QWORD *)(a2 + 384) + 4 * v19), 4 * v20 - 4 * v19);
LABEL_27:
          *(_DWORD *)(a1 + 392) = v18;
          return a1;
        }
        v19 = 0;
        goto LABEL_25;
      }
      if (*(_DWORD *)(a1 + 244) < v14)
      {
        *(_DWORD *)(a1 + 240) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 232, a1 + 248, v14, 16);
      }
      else if ((_DWORD)v15)
      {
        memmove(*v13, *(const void **)(a2 + 232), 16 * v15);
LABEL_19:
        v16 = *(unsigned int *)(a2 + 240);
        if (v15 != v16)
          memcpy((char *)*v13 + 16 * v15, (const void *)(*(_QWORD *)(a2 + 232) + 16 * v15), 16 * v16 - 16 * v15);
        goto LABEL_21;
      }
      v15 = 0;
      goto LABEL_19;
    }
    if (*(_DWORD *)(a1 + 76) < v10)
    {
      *(_DWORD *)(a1 + 72) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, a1 + 80, v10, 8);
    }
    else if ((_DWORD)v11)
    {
      memmove(*v9, *(const void **)(a2 + 64), 8 * v11 - 2);
LABEL_13:
      v12 = *(unsigned int *)(a2 + 72);
      if (v11 != v12)
        memcpy((char *)*v9 + 8 * v11, (const void *)(*(_QWORD *)(a2 + 64) + 8 * v11), 8 * v12 - 8 * v11);
      goto LABEL_15;
    }
    v11 = 0;
    goto LABEL_13;
  }
  return a1;
}

uint64_t sub_1C48819CC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 32 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 32 * v6);
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void sub_1C4881A78(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[128];
  uint64_t v21;

  v2 = a2;
  v21 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4881CD8(a1, v7, v7 + 32 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v20;
  do
  {
    v11 = a1 + v9;
    v12 = *(_QWORD *)(a1 + v9 + 8);
    if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_22;
    v13 = v10 + 24;
    *((_QWORD *)v10 + 1) = v10 + 24;
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 2) = 0x100000000;
    v14 = *(_DWORD *)(v11 + 24);
    v15 = *(void **)(v11 + 16);
    if (v14)
      v16 = a1 + v9 + 8 == (_QWORD)v10;
    else
      v16 = 1;
    if (!v16)
    {
      v17 = a1 + v9;
      v18 = a1 + v9 + 32;
      if ((void *)v18 != v15)
      {
        *((_QWORD *)v10 + 1) = v15;
        *((_DWORD *)v10 + 4) = v14;
        *((_DWORD *)v10 + 5) = *(_DWORD *)(v17 + 28);
        *(_QWORD *)(v11 + 16) = v18;
        *(_DWORD *)(v17 + 28) = 0;
        v15 = (void *)(a1 + v9 + 32);
        goto LABEL_19;
      }
      if (v14 >= 2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v10 + 8), (uint64_t)(v10 + 24), *(unsigned int *)(v11 + 24), 4);
        v19 = *(unsigned int *)(v11 + 24);
        if (!(_DWORD)v19)
          goto LABEL_18;
        v15 = *(void **)(v11 + 16);
        v13 = (void *)*((_QWORD *)v10 + 1);
      }
      else
      {
        v19 = *(unsigned int *)(v11 + 24);
      }
      memcpy(v13, v15, 4 * v19);
LABEL_18:
      *((_DWORD *)v10 + 4) = v14;
      v15 = *(void **)(v11 + 16);
LABEL_19:
      *(_DWORD *)(v11 + 24) = 0;
    }
    v10 += 32;
    if ((void *)(a1 + v9 + 32) != v15)
      free(v15);
LABEL_22:
    v9 += 32;
  }
  while (v9 != 128);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C4881CD8(a1, (uint64_t)v20, (uint64_t)v10);
}

void sub_1C4881CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  unsigned int v13;
  const void *v15;
  uint64_t v16;
  void *v17;
  int v18;
  _QWORD *v19;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 136);
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v7)
      goto LABEL_5;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[4 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_5:
  if (a2 != a3)
  {
    while (1)
    {
      v10 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_19:
      v4 += 32;
      if (v4 == a3)
        return;
    }
    v19 = 0;
    sub_1C48819CC(a1, v10, &v19);
    v11 = v19;
    *v19 = *(_QWORD *)v4;
    v12 = v11 + 3;
    v11[1] = v11 + 3;
    v11[2] = 0x100000000;
    v13 = *(_DWORD *)(v4 + 16);
    if ((_QWORD *)v4 == v11 || v13 == 0)
    {
LABEL_17:
      *(_DWORD *)a1 += 2;
      v17 = *(void **)(v4 + 8);
      if ((void *)(v4 + 24) != v17)
        free(v17);
      goto LABEL_19;
    }
    v15 = *(const void **)(v4 + 8);
    if ((const void *)(v4 + 24) != v15)
    {
      v11[1] = v15;
      v18 = *(_DWORD *)(v4 + 20);
      *((_DWORD *)v11 + 4) = v13;
      *((_DWORD *)v11 + 5) = v18;
      *(_QWORD *)(v4 + 8) = v4 + 24;
      *(_DWORD *)(v4 + 20) = 0;
      goto LABEL_16;
    }
    if (v13 >= 2)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v11 + 1), (uint64_t)(v11 + 3), *(unsigned int *)(v4 + 16), 4);
      v16 = *(unsigned int *)(v4 + 16);
      if (!(_DWORD)v16)
        goto LABEL_15;
      v15 = *(const void **)(v4 + 8);
      v12 = (void *)v11[1];
    }
    else
    {
      v16 = *(unsigned int *)(v4 + 16);
    }
    memcpy(v12, v15, 4 * v16);
LABEL_15:
    *((_DWORD *)v11 + 4) = v13;
LABEL_16:
    *(_DWORD *)(v4 + 16) = 0;
    goto LABEL_17;
  }
}

uint64_t sub_1C4881E58(_DWORD *a1, int *a2)
{
  char v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v4 = sub_1C4881F40((uint64_t)a1, *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 16;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_11;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_11:
    sub_1C4881FEC((uint64_t)a1, v7);
    v8 = 0;
    sub_1C4881F40((uint64_t)a1, *a2, &v8);
    result = v8;
  }
  *a1 += 2;
  if (*(_DWORD *)result != -1)
    --a1[1];
  *(_DWORD *)result = *a2;
  *(_BYTE *)(result + 4) = 0;
  return result;
}

uint64_t sub_1C4881F40(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4881FEC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4882160(a1, v6, v6 + 8 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_DWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      *(_DWORD *)v9 = v10;
      v9[4] = *(_BYTE *)(a1 + v8 + 12);
      v9 += 8;
    }
    v8 += 8;
  }
  while (v8 != 128);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4882160(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C4882160(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(result + 8);
    v9 = (_DWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_DWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -1;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v12 = 0;
      result = sub_1C4881F40((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_DWORD *)a2;
      *((_BYTE *)v11 + 4) = *(_BYTE *)(a2 + 4);
      *v5 += 2;
    }
    a2 += 8;
  }
  return result;
}

_QWORD *sub_1C488221C(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4882288((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4882334(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x100000000;
  }
  return v5;
}

uint64_t sub_1C4882288(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 32 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 32 * v6);
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_16;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4882334(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C48823F4((uint64_t)a1, v6);
  v8 = 0;
  sub_1C4882288((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

void sub_1C48823F4(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[128];
  uint64_t v21;

  v2 = a2;
  v21 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4882654(a1, v7, v7 + 32 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v20;
  do
  {
    v11 = a1 + v9;
    v12 = *(_QWORD *)(a1 + v9 + 8);
    if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_22;
    v13 = v10 + 24;
    *((_QWORD *)v10 + 1) = v10 + 24;
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 2) = 0x100000000;
    v14 = *(_DWORD *)(v11 + 24);
    v15 = *(void **)(v11 + 16);
    if (v14)
      v16 = a1 + v9 + 8 == (_QWORD)v10;
    else
      v16 = 1;
    if (!v16)
    {
      v17 = a1 + v9;
      v18 = a1 + v9 + 32;
      if ((void *)v18 != v15)
      {
        *((_QWORD *)v10 + 1) = v15;
        *((_DWORD *)v10 + 4) = v14;
        *((_DWORD *)v10 + 5) = *(_DWORD *)(v17 + 28);
        *(_QWORD *)(v11 + 16) = v18;
        *(_DWORD *)(v17 + 28) = 0;
        v15 = (void *)(a1 + v9 + 32);
        goto LABEL_19;
      }
      if (v14 >= 2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v10 + 8), (uint64_t)(v10 + 24), *(unsigned int *)(v11 + 24), 4);
        v19 = *(unsigned int *)(v11 + 24);
        if (!(_DWORD)v19)
          goto LABEL_18;
        v15 = *(void **)(v11 + 16);
        v13 = (void *)*((_QWORD *)v10 + 1);
      }
      else
      {
        v19 = *(unsigned int *)(v11 + 24);
      }
      memcpy(v13, v15, 4 * v19);
LABEL_18:
      *((_DWORD *)v10 + 4) = v14;
      v15 = *(void **)(v11 + 16);
LABEL_19:
      *(_DWORD *)(v11 + 24) = 0;
    }
    v10 += 32;
    if ((void *)(a1 + v9 + 32) != v15)
      free(v15);
LABEL_22:
    v9 += 32;
  }
  while (v9 != 128);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C4882654(a1, (uint64_t)v20, (uint64_t)v10);
}

void sub_1C4882654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  unsigned int v13;
  const void *v15;
  uint64_t v16;
  void *v17;
  int v18;
  _QWORD *v19;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 136);
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v7)
      goto LABEL_5;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[4 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_5:
  if (a2 != a3)
  {
    while (1)
    {
      v10 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_19:
      v4 += 32;
      if (v4 == a3)
        return;
    }
    v19 = 0;
    sub_1C4882288(a1, v10, &v19);
    v11 = v19;
    *v19 = *(_QWORD *)v4;
    v12 = v11 + 3;
    v11[1] = v11 + 3;
    v11[2] = 0x100000000;
    v13 = *(_DWORD *)(v4 + 16);
    if ((_QWORD *)v4 == v11 || v13 == 0)
    {
LABEL_17:
      *(_DWORD *)a1 += 2;
      v17 = *(void **)(v4 + 8);
      if ((void *)(v4 + 24) != v17)
        free(v17);
      goto LABEL_19;
    }
    v15 = *(const void **)(v4 + 8);
    if ((const void *)(v4 + 24) != v15)
    {
      v11[1] = v15;
      v18 = *(_DWORD *)(v4 + 20);
      *((_DWORD *)v11 + 4) = v13;
      *((_DWORD *)v11 + 5) = v18;
      *(_QWORD *)(v4 + 8) = v4 + 24;
      *(_DWORD *)(v4 + 20) = 0;
      goto LABEL_16;
    }
    if (v13 >= 2)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v11 + 1), (uint64_t)(v11 + 3), *(unsigned int *)(v4 + 16), 4);
      v16 = *(unsigned int *)(v4 + 16);
      if (!(_DWORD)v16)
        goto LABEL_15;
      v15 = *(const void **)(v4 + 8);
      v12 = (void *)v11[1];
    }
    else
    {
      v16 = *(unsigned int *)(v4 + 16);
    }
    memcpy(v12, v15, 4 * v16);
LABEL_15:
    *((_DWORD *)v11 + 4) = v13;
LABEL_16:
    *(_DWORD *)(v4 + 16) = 0;
    goto LABEL_17;
  }
}

uint64_t sub_1C48827D4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EB2D8) = &off_1E7F9FE38;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7EB2E0);
  if (v3 != -1)
  {
    v7[0] = sub_1C4882894;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7EB2E0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4882894(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX2 IDep Insertion";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "agx2-idep";
  *(_QWORD *)(v2 + 24) = 9;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EB2D8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4883BBC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C4882924(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C48829B8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4882A44()
{
  return "AGX2 IDep Insertion Pass";
}

void sub_1C4882A54(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C4882A78(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  __int16 v54;
  _WORD *v55;
  unsigned __int16 *v56;
  __int16 v57;
  unsigned __int16 v58;
  int v59;
  unsigned __int16 *v60;
  unsigned __int16 *v61;
  unsigned int v62;
  int v63;
  unsigned __int16 *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int16 *v72;
  uint64_t v73;
  int v74;
  unsigned __int16 *v75;
  uint64_t v76;
  unsigned __int16 *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  _BOOL4 v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _BOOL4 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unsigned int v96;
  unint64_t v97;
  __int16 v98;
  _WORD *v99;
  unsigned __int16 *v100;
  __int16 v101;
  unsigned __int16 v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  int v109;
  unsigned __int16 *v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  char *v120;
  char *v121;
  size_t v122;
  unsigned __int16 *v123;
  uint64_t v124;
  unsigned __int8 v125;
  int v126;
  int v127;
  uint64_t v128;
  char v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int v132;
  unsigned __int16 *v133;
  unsigned __int16 *v134;
  int v135;
  int v136;
  _QWORD *v137;
  _QWORD *v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  BOOL v142;
  int v143;
  char v144;
  int v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  _BYTE *v150;
  int v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  char v159;
  unsigned int v160;
  void *__dst;
  uint64_t v162;
  _BYTE v163[48];
  unsigned int v164;
  unsigned __int8 v165;
  uint64_t v166;
  void *__src;
  uint64_t v168;
  _BYTE v169[48];
  unsigned int v170;
  uint64_t v171;
  unsigned __int8 v172;
  _BYTE *v173;
  uint64_t v174;
  _BYTE v175[48];
  unsigned int v176;
  char *v177;
  unint64_t v178;
  _BYTE v179[48];
  unsigned int v180;
  uint64_t v181;

  v181 = *MEMORY[0x1E0C80C00];
  v3 = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8), *(_QWORD *)a2);
  if (v3[301])
  {
    v4 = v3;
    v5 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 176))(v3);
    v6 = v5;
    if (v4[326])
      v7 = 524271;
    else
      v7 = 2060;
    if (v4[345])
      v8 = v7 | 0x6300;
    else
      v8 = v7;
    v151 = v8;
    v9 = *(_DWORD *)(v5 + 44);
    v177 = v179;
    v178 = 0x600000000;
    sub_1C4765AA4((char *)&v177, (v9 + 63) >> 6, 0);
    v180 = v9;
    v10 = *(_DWORD *)(v6 + 44);
    v173 = v175;
    v174 = 0x600000000;
    sub_1C4765AA4((char *)&v173, (v10 + 63) >> 6, 0);
    v176 = v10;
    v11 = *(_DWORD *)(v6 + 44);
    v165 = 0;
    v166 = 0;
    __src = v169;
    v168 = 0x600000000;
    sub_1C4765AA4((char *)&__src, (v11 + 63) >> 6, 0);
    v170 = v11;
    v171 = v6;
    v172 = 0;
    v147 = a2 + 320;
    if (*(_QWORD *)(a2 + 328) != a2 + 320)
    {
      v12 = *(_QWORD *)(a2 + 328);
      v149 = 0;
      v159 = 0;
      v150 = v4;
      v13 = v4[327];
      v154 = v13;
      while (1)
      {
        v14 = (_QWORD *)(v12 + 48);
        v148 = v12;
        v15 = *(_QWORD **)(v12 + 56);
        v16 = (uint64_t)v15;
        v156 = v15;
        v157 = v14;
        if (v15 != v14)
          break;
LABEL_270:
        v12 = *(_QWORD *)(v148 + 8);
        if (v12 == v147)
          goto LABEL_274;
      }
      while (1)
      {
        if ((_QWORD *)v16 == v15)
        {
          v17 = 0;
        }
        else
        {
          v17 = (_QWORD *)(*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8);
          if (v17)
          {
            if (v15 == v17)
            {
              v18 = 0;
              v17 = v15;
            }
            else
            {
              v18 = *v17 & 0xFFFFFFFFFFFFFFF8;
            }
            goto LABEL_17;
          }
        }
        v18 = 0;
LABEL_17:
        v19 = *(_QWORD *)(v16 + 8);
        v20 = *(unsigned __int16 **)(v16 + 16);
        if ((_QWORD *)v19 == v14)
          v21 = 0;
        else
          v21 = *(_QWORD *)(v16 + 8);
        v155 = v21;
        v22 = *((_QWORD *)v20 + 1);
        v23 = *((_QWORD *)v20 + 2);
        if ((*(_WORD *)(v16 + 44) & 0xC) != 0 && (*(_WORD *)(v16 + 44) & 4) == 0)
        {
          v40 = v16;
          if ((v22 & 0x400) != 0)
          {
LABEL_45:
            if ((v159 & 1) != 0)
            {
              if ((_DWORD)v178)
                bzero(v177, 8 * v178);
              if ((_DWORD)v174)
                bzero(v173, 8 * v174);
            }
            v39 = 0;
            v159 = 0;
            goto LABEL_201;
          }
          while ((*(_WORD *)(v40 + 44) & 8) != 0)
          {
            v40 = *(_QWORD *)(v40 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v40 + 16) + 9) & 4) != 0)
              goto LABEL_45;
          }
        }
        else if ((v22 & 0x400) != 0)
        {
          goto LABEL_45;
        }
        v25 = *v20;
        if (((v25 - 9) > 0x3C || ((1 << (v25 - 9)) & 0x1000000000000605) == 0)
          && v25 != 0
          && (*((_QWORD *)v20 + 1) & 0x10 | *((_QWORD *)v20 + 2) & 1) == 0)
        {
          v158 = *((_QWORD *)v20 + 2);
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 24) + 32) + 16) + 393))
          {
            v160 = 0;
            __dst = 0;
            v41 = sub_1C4883AF4(v20, &v160, (uint64_t *)&__dst);
            v42 = 0;
            if (v41)
            {
              v43 = *(_QWORD *)(v16 + 32) + 32 * v160;
              v46 = *(_QWORD *)(v43 + 16);
              v44 = (unint64_t *)(v43 + 16);
              v45 = v46;
              if (((unint64_t)__dst & v46) != 0)
              {
                *v44 = v45 & ~(unint64_t)__dst;
                v42 = 1;
              }
              else
              {
                v42 = 0;
              }
            }
            v20 = *(unsigned __int16 **)(v16 + 16);
            v25 = *v20;
            v47 = *((_QWORD *)v20 + 2);
            LOBYTE(v23) = v158;
            if ((v47 & 0x1000000) == 0)
            {
LABEL_66:
              v48 = 0;
              goto LABEL_67;
            }
          }
          else
          {
            v42 = 0;
            LODWORD(v47) = *((_QWORD *)v20 + 2);
            if ((v23 & 0x1000000) == 0)
              goto LABEL_66;
          }
          if ((v47 & 0x10) != 0)
          {
            v48 = 1;
            goto LABEL_67;
          }
          if ((v47 & 0x4000000) != 0)
          {
            v48 = 2;
            goto LABEL_67;
          }
          if ((v47 & 2) != 0)
          {
            v48 = 4;
            goto LABEL_67;
          }
          if ((v25 - 8267) < 0xA)
          {
            v48 = 8;
            goto LABEL_67;
          }
          v48 = 16;
          if ((v25 - 743) >= 0xE && (v25 - 4581) >= 0xC)
          {
            v48 = 0x40000;
            if (((v25 - 8188) > 0x1F || ((1 << (v25 + 4)) & 0xC0300C03) == 0)
              && (v25 - 4596) >= 2)
            {
              if ((v47 & 0x10000000) != 0)
              {
                v48 = 32;
                goto LABEL_67;
              }
              if ((v47 & 0x8000000) != 0)
              {
                v48 = 64;
                goto LABEL_67;
              }
              if ((v47 & 0x800000) != 0)
              {
                if ((~(_DWORD)v47 & 0x800200) == 0)
                {
                  v48 = 256;
                  goto LABEL_67;
                }
                v142 = (~(_DWORD)v47 & 0x800100) == 0;
                v48 = 512;
                v143 = 128;
              }
              else
              {
                v80 = v47 & 0xD00;
                if (v80 == 1280)
                {
                  v48 = 2048;
                  goto LABEL_67;
                }
                v141 = v47 & 0xE00;
                if (v141 == 1536)
                {
                  v48 = 4096;
                  goto LABEL_67;
                }
                if (v80 == 2304)
                {
                  v48 = 0x2000;
                  goto LABEL_67;
                }
                if (v141 == 2560)
                {
                  v48 = 0x4000;
                  goto LABEL_67;
                }
                if (v80 == 3328)
                {
                  v48 = 0x8000;
                  goto LABEL_67;
                }
                if (v141 == 3584)
                {
                  v48 = 0x10000;
                  goto LABEL_67;
                }
                v142 = (v47 & 0x2000000) == 0;
                v48 = 1024;
                v143 = 0x80000;
              }
              if (v142)
                v48 = v143;
            }
          }
LABEL_67:
          if ((v48 & v151) == 0)
          {
            v39 = 0;
            v63 = 0;
            v13 = v154;
            if ((v159 & 1) != 0)
              goto LABEL_182;
            if ((v23 & 4) != 0)
              goto LABEL_199;
            goto LABEL_88;
          }
          v153 = v42;
          if ((v159 & 1) != 0 && (v49 = *(unsigned int *)(v16 + 40), (_DWORD)v49))
          {
            v50 = *(_QWORD *)(v16 + 32);
            v51 = v50 + 32 * v49;
            while (*(_BYTE *)v50)
            {
LABEL_75:
              v50 += 32;
              if (v50 == v51)
                goto LABEL_76;
            }
            v52 = *(_DWORD *)(v50 + 4);
            v53 = *(unsigned int *)(*(_QWORD *)(v6 + 8) + 24 * v52 + 16);
            v54 = v53 & 0xF;
            v55 = (_WORD *)(*(_QWORD *)(v6 + 56) + ((v53 >> 3) & 0x1FFFFFFE));
            v57 = *v55;
            v56 = v55 + 1;
            v58 = v57 + v54 * v52;
            while (((*(_QWORD *)&v177[8 * (v58 >> 6)] >> v58) & 1) == 0)
            {
              v59 = *v56++;
              v58 += v59;
              if (!v59)
                goto LABEL_75;
            }
            v152 = 1;
            if (!v154)
            {
LABEL_91:
              v39 = 0;
              goto LABEL_92;
            }
          }
          else
          {
LABEL_76:
            v152 = 0;
          }
          v39 = 0;
          if (v18 && (v23 & 2) != 0)
          {
            v60 = (unsigned __int16 *)v17[2];
            if ((v60[8] & 2) == 0)
              goto LABEL_91;
            v61 = *(unsigned __int16 **)(v18 + 16);
            if ((v61[8] & 0x10) == 0)
              goto LABEL_91;
            if ((*(_BYTE *)(*(_QWORD *)(v18 + 32) + 32 * sub_1C4B138B4(*v61) + 16) & 8) != 0
              && (v62 = sub_1C4B138B4(*v60),
                  *(_DWORD *)(v17[4] + 32 * v62 + 4) == *(_DWORD *)(*(_QWORD *)(v16 + 32)
                                                                    + 32 * sub_1C4B138B4(v25)
                                                                    + 4)))
            {
              v165 = 0;
              v166 = 0;
              if ((_DWORD)v168)
                bzero(__src, 8 * v168);
              v172 = 0;
              v39 = 1;
              v152 = 1;
            }
            else
            {
              v39 = 0;
            }
            LOBYTE(v23) = v158;
            if ((v47 & 0x10) != 0)
            {
LABEL_249:
              v140 = sub_1C4B138B4(v25);
              LOBYTE(v23) = v158;
              v66 = (*(unsigned __int8 *)(*(_QWORD *)(v16 + 32) + 32 * v140 + 16) >> 3) & 1;
LABEL_94:
              v67 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 24) + 32) + 16) + 392);
              v13 = v154;
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 24) + 32) + 16) + 392))
              {
                v160 = 0;
                __dst = 0;
                v68 = sub_1C4883AF4(v20, &v160, (uint64_t *)&__dst);
                v67 = 0;
                v69 = v153;
                if (v68)
                {
                  v70 = *(_QWORD *)(v16 + 32);
                  v71 = *(_QWORD *)(v70 + 32 * v160 + 16);
                  if (((unint64_t)__dst & v71) == 0
                    || (v72 = *(unsigned __int16 **)(v16 + 16),
                        v73 = *((_QWORD *)v72 + 2),
                        (v73 & 0x2000C00) == 0x2000800))
                  {
                    v67 = 0;
                    goto LABEL_99;
                  }
                  if ((v73 & 0xC00) == 0x800)
                  {
                    v67 = (*(_QWORD *)(v70 + 32 * v160 + 16) & 0xF0) == 0;
                    goto LABEL_99;
                  }
                  if ((v73 & 0x800000) == 0)
                    llvm::report_fatal_error((llvm *)"Unhandled instruction with local fence", (const char *)1);
                  if ((v71 & 0xF0) != 0)
                  {
                    v81 = *v72;
                    v146 = sub_1C4B138B4(v81);
                    v82 = sub_1C4B138B4(v81);
                    v83 = sub_1C4B138B4(v81);
                    v86 = v146 != -1
                       || *(_QWORD *)(v70 + 32 * v82 + 16) != 0
                       || *(_QWORD *)(v70 + 32 * v83 + 16) != 0;
                    v87 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 24) + 32) + 344);
                    v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 560))(v87);
                    if (v88)
                    {
                      v89 = (*(unsigned __int16 *)(v88 + 18) >> 4) & 0x3FF;
                      v91 = v89 == 106 || v89 == 108;
                    }
                    else
                    {
                      v91 = 1;
                    }
                    v69 = v153;
                    v13 = v154;
                    v67 = v86 || v91;
                  }
                  else
                  {
                    v67 = 1;
LABEL_99:
                    v13 = v154;
                  }
                }
                LOBYTE(v23) = v158;
              }
              else
              {
                v69 = v153;
              }
              v74 = v69 | v67 | v152 | v66;
              if (v17 && v150[335])
              {
                if (*(unsigned __int16 *)v17[2] - 4034 < 0x10)
                  LOBYTE(v74) = 1;
                if ((v74 & 1) == 0)
                {
LABEL_107:
                  v75 = *(unsigned __int16 **)(v16 + 16);
                  if ((*((_BYTE *)v75 + 19) & 1) != 0)
                  {
                    v76 = *(_QWORD *)(v16 + 32) + 32 * sub_1C4B138B4(*v75);
                    *(_QWORD *)(v76 + 16) |= 0x8000000000000000;
                  }
                  v149 = 1;
                  if ((v159 & 1) == 0)
                    goto LABEL_110;
LABEL_181:
                  LOBYTE(v23) = v158;
LABEL_182:
                  v112 = v176;
                  if (v180 < v176)
                  {
                    v113 = v178;
                    if ((v180 & 0x3F) != 0)
                      *(_QWORD *)&v177[8 * v178 - 8] &= ~(-1 << (v180 & 0x3F));
                    v114 = v113;
                    v180 = v112;
                    v115 = v112 + 63;
                    if ((_DWORD)v113 != (v112 + 63) >> 6)
                    {
                      v116 = v115 >> 6;
                      if (v113 > v116)
                      {
                        LODWORD(v178) = v115 >> 6;
                        v114 = v115 >> 6;
                      }
                      else
                      {
                        v117 = v113;
                        if (v116 > HIDWORD(v178))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, (uint64_t)v179, v115 >> 6, 8);
                          v117 = v178;
                          v114 = v178;
                        }
                        if (v116 != v113)
                          bzero(&v177[8 * v117], 8 * (v116 - v113));
                        v114 += v116 - v113;
                        LODWORD(v178) = v114;
                        LOBYTE(v112) = v180;
                        LOBYTE(v23) = v158;
                      }
                    }
                    v118 = v112 & 0x3F;
                    if (v118)
                      *(_QWORD *)&v177[8 * v114 - 8] &= ~(-1 << v118);
                  }
                  if ((_DWORD)v174)
                  {
                    v119 = 0;
                    v120 = v173;
                    v121 = v177;
                    v122 = 8 * v174;
                    do
                    {
                      *(_QWORD *)&v121[v119] |= *(_QWORD *)&v120[v119];
                      v119 += 8;
                    }
                    while (v122 != v119);
                    bzero(v120, v122);
                    v63 = 1;
                    goto LABEL_198;
                  }
                  v63 = 1;
                  if ((v23 & 4) != 0)
                  {
LABEL_199:
                    LOBYTE(v65) = v63;
LABEL_200:
                    v159 = v65;
                    goto LABEL_201;
                  }
LABEL_88:
                  v64 = *(unsigned __int16 **)(v16 + 16);
                  if ((v64[8] & 0x10) != 0
                    && (v130 = sub_1C4B138B4(*v64),
                        v131 = *(_QWORD *)(v16 + 32),
                        (*(_BYTE *)(v131 + 32 * v130 + 16) & 8) != 0)
                    && v155
                    && (*(_DWORD *)(*(_QWORD *)(v155 + 16) + 16) & 0x8000002) != 0)
                  {
                    v132 = *(_DWORD *)(v131 + 4);
                    v133 = (unsigned __int16 *)(*(_QWORD *)(v6 + 56)
                                              + (((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 + 8)
                                                                                    + 24 * v132
                                                                                    + 16) >> 3) & 0x1FFFFFFE));
                    v135 = *v133;
                    v134 = v133 + 1;
                    v136 = v135 + (*(_DWORD *)(*(_QWORD *)(v6 + 8) + 24 * v132 + 16) & 0xF) * v132;
                    v137 = v173;
                    v138 = v177;
                    do
                    {
                      v137[(unsigned __int16)v136 >> 6] |= 1 << v136;
                      v138[(unsigned __int16)v136 >> 6] &= ~(1 << v136);
                      v139 = *v134++;
                      v136 += v139;
                    }
                    while (v139);
                    LOBYTE(v65) = 1;
                  }
                  else
                  {
                    v65 = v63 | sub_1C4883A3C(v16, (uint64_t)v177, v6);
                  }
                  goto LABEL_200;
                }
              }
              else if (!v74)
              {
                goto LABEL_107;
              }
              if (!v165
                || ((v77 = *(unsigned __int16 **)(v16 + 16), v78 = *((_QWORD *)v77 + 2), (v78 & 0xD00) != 0x500)
                  ? ((v78 & 0xE00) != 0x600
                   ? ((v78 & 2) != 0
                    ? (v79 = 3)
                    : (v79 = 4 * (*v77 - 2970 < 0x48)))
                   : (v79 = 2))
                  : (v79 = 1),
                    v79 != v165))
              {
LABEL_169:
                if ((_DWORD)v178)
                {
                  bzero(v177, 8 * v178);
                  LOBYTE(v23) = v158;
                }
                v63 = 0;
                if ((v23 & 4) != 0)
                  goto LABEL_199;
                goto LABEL_88;
              }
              if (v172)
              {
                v92 = *(unsigned int *)(v16 + 40);
                if ((_DWORD)v92)
                {
                  v93 = 0;
                  v94 = *(_QWORD *)(v16 + 32);
                  if (v171)
                    v95 = (_QWORD *)(v171 + 8);
                  else
                    v95 = 0;
                  while (*(_BYTE *)(v94 + 32 * v93))
                  {
LABEL_161:
                    if (++v93 == v92)
                      goto LABEL_162;
                  }
                  v96 = *(_DWORD *)(v94 + 32 * v93 + 4);
                  v97 = *(unsigned int *)(*v95 + 24 * v96 + 16);
                  v98 = v97 & 0xF;
                  v99 = (_WORD *)(v95[6] + ((v97 >> 3) & 0x1FFFFFFE));
                  v101 = *v99;
                  v100 = v99 + 1;
                  v102 = v101 + v98 * v96;
                  while (((*((_QWORD *)__src + (v102 >> 6)) >> v102) & 1) == 0)
                  {
                    v103 = *v100++;
                    v102 += v103;
                    if (!v103)
                      goto LABEL_161;
                  }
                  goto LABEL_169;
                }
              }
LABEL_162:
              v104 = v166;
              __dst = v163;
              v162 = 0x600000000;
              v105 = v168;
              if ((_DWORD)v168)
              {
                v106 = v168;
                v107 = v163;
                if (v168 < 7uLL
                  || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v163, v168, 8), v106 = v168, v107 = __dst, (_DWORD)v168))
                {
                  memcpy(v107, __src, 8 * v106);
                  v107 = __dst;
                }
                LODWORD(v162) = v105;
                v164 = v170;
                if (v107 == v163)
                {
                  v108 = v178;
                  if (v178 >= v105)
                  {
                    memmove(v177, v163, 8 * v105);
                    goto LABEL_174;
                  }
                  if (HIDWORD(v178) < v105)
                  {
                    LODWORD(v178) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, (uint64_t)v179, v105, 8);
                    v108 = 0;
                  }
                  else if ((_DWORD)v178)
                  {
                    memmove(v177, v163, 8 * v178);
                  }
                  if (v108 != v162)
                    memcpy(&v177[8 * v108], (char *)__dst + 8 * v108, 8 * v162 - 8 * v108);
                  LODWORD(v178) = v105;
                }
                else
                {
                  if (v177 != v179)
                  {
                    free(v177);
                    v107 = __dst;
                    LODWORD(v105) = v162;
                  }
                  v177 = v107;
                  v178 = __PAIR64__(HIDWORD(v162), v105);
                  __dst = v163;
                  HIDWORD(v162) = 0;
                }
              }
              else
              {
                v164 = v170;
LABEL_174:
                LODWORD(v178) = v105;
              }
              LODWORD(v162) = 0;
              v180 = v164;
              if (__dst != v163)
                free(__dst);
              v109 = v172;
              if (v104 != v16)
              {
                sub_1C4888274(v104);
                v110 = *(unsigned __int16 **)(v16 + 16);
                if ((*((_BYTE *)v110 + 19) & 1) != 0)
                {
                  v111 = *(_QWORD *)(v16 + 32) + 32 * sub_1C4B138B4(*v110);
                  *(_QWORD *)(v111 + 16) |= 0x8000000000000000;
                }
              }
              if (v109)
                goto LABEL_181;
LABEL_110:
              v63 = 0;
LABEL_198:
              if ((v158 & 4) != 0)
                goto LABEL_199;
              goto LABEL_88;
            }
          }
          else
          {
LABEL_92:
            if ((v47 & 0x10) != 0)
              goto LABEL_249;
          }
          v66 = 0;
          goto LABEL_94;
        }
        v29 = *((unsigned __int8 *)v20 + 4);
        if (*((_BYTE *)v20 + 4))
        {
          v30 = 0;
          v31 = *(_QWORD *)(v16 + 32);
          v32 = v177;
          do
          {
            if ((*(_DWORD *)(v31 + 32 * v30) & 0x10000FF) == 0x1000000)
            {
              v33 = *(_DWORD *)(v31 + 32 * v30 + 4);
              v34 = (unsigned __int16 *)(*(_QWORD *)(v6 + 56)
                                       + (((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 + 8) + 24 * v33 + 16) >> 3) & 0x1FFFFFFE));
              v36 = *v34;
              v35 = v34 + 1;
              v37 = v36 + (*(_DWORD *)(*(_QWORD *)(v6 + 8) + 24 * v33 + 16) & 0xF) * v33;
              do
              {
                v32[(unsigned __int16)v37 >> 6] &= ~(1 << v37);
                v38 = *v35++;
                v37 += v38;
              }
              while (v38);
            }
            ++v30;
          }
          while (v30 != v29);
        }
        v39 = 0;
LABEL_201:
        if (!v13 || v39)
          goto LABEL_207;
        v123 = *(unsigned __int16 **)(v16 + 16);
        v124 = *((_QWORD *)v123 + 2);
        if ((v124 & 0x1000000) == 0
          || (v126 = *v123,
              (*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32 * sub_1C4B138B4(v126) + 16) & 0x8000000000000000) == 0))
        {
          v165 = 0;
          v166 = 0;
          v125 = v168;
          if ((_DWORD)v168)
          {
            bzero(__src, 8 * v168);
            v125 = 0;
          }
          goto LABEL_206;
        }
        if ((v124 & 0xD00) == 0x500)
        {
          v127 = 1;
        }
        else if ((v124 & 0xE00) == 0x600)
        {
          v127 = 2;
        }
        else if ((v124 & 2) != 0)
        {
          v127 = 3;
        }
        else
        {
          v127 = 4 * ((v126 - 2970) < 0x48);
        }
        if (v127 == v165)
        {
          v128 = v166;
          if ((v124 & 4) != 0)
            goto LABEL_207;
        }
        else
        {
          v166 = 0;
          if ((_DWORD)v168)
            bzero(__src, 8 * v168);
          v172 = 0;
          v165 = v127;
          if (!v127)
            goto LABEL_207;
          v166 = v16;
          v128 = v16;
          if ((v124 & 4) != 0)
            goto LABEL_207;
        }
        if (v128)
        {
          v129 = sub_1C4883A3C(v16, (uint64_t)__src, v171);
          v125 = v172 | v129;
LABEL_206:
          v172 = v125;
        }
LABEL_207:
        v16 = v19;
        v15 = v156;
        v14 = v157;
        if ((_QWORD *)v19 == v157)
          goto LABEL_270;
      }
    }
    v149 = 0;
LABEL_274:
    if (__src != v169)
      free(__src);
    v144 = v149;
    if (v173 != v175)
      free(v173);
    if (v177 != v179)
      free(v177);
  }
  else
  {
    v144 = 0;
  }
  return v144 & 1;
}

uint64_t sub_1C4883A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  int v11;
  int v12;
  int v13;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 4);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 4))
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 32);
    v7 = (_QWORD *)(a3 + 8);
    if (!a3)
      v7 = 0;
    do
    {
      if ((*(_DWORD *)(v6 + 32 * v4) & 0x10000FF) == 0x1000000)
      {
        v8 = *(_DWORD *)(v6 + 32 * v4 + 4);
        v9 = (unsigned __int16 *)(v7[6] + (((unint64_t)*(unsigned int *)(*v7 + 24 * v8 + 16) >> 3) & 0x1FFFFFFE));
        v11 = *v9;
        v10 = v9 + 1;
        v12 = v11 + (*(_DWORD *)(*v7 + 24 * v8 + 16) & 0xF) * v8;
        do
        {
          v5 = 1;
          *(_QWORD *)(a2 + 8 * ((unsigned __int16)v12 >> 6)) |= 1 << v12;
          v13 = *v10++;
          v12 += v13;
        }
        while (v13);
      }
      ++v4;
    }
    while (v4 != v3);
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_1C4883AF4(unsigned __int16 *a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  v4 = *((_QWORD *)a1 + 2);
  if ((v4 & 0x2000C00) == 0x2000800)
  {
    v5 = *a1;
    v6 = 1024;
  }
  else
  {
    v5 = *a1;
    if ((~(_DWORD)v4 & 0x800200) != 0 && (v4 & 0x800100) != 8388864 && (v5 - 4821) >= 4)
    {
      v6 = 0x80000;
      if ((v4 & 0xD00) != 0x900 && (v4 & 0xE00) != 0xA00)
        return 0;
    }
    else
    {
      v6 = 512;
    }
  }
  *a2 = sub_1C4B138B4(v5);
  *a3 = v6;
  return 1;
}

uint64_t sub_1C4883BBC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C48827D4(v0);
}

uint64_t sub_1C4883BE4(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 12) = 1;
  return ((uint64_t (*)(void))((char *)sub_1C4883C08 + 4 * byte_1C6464EE8[a2 - 90]))();
}

uint64_t sub_1C4883C08(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_1C4883C10(uint64_t result)
{
  *(_DWORD *)(result + 8) = 5;
  return result;
}

void sub_1C4883C24()
{
  JUMPOUT(0x1C4883C1CLL);
}

void sub_1C4883C2C()
{
  JUMPOUT(0x1C4883C1CLL);
}

uint64_t sub_1C4883C34(uint64_t result)
{
  *(_DWORD *)(result + 12) = 2;
  *(_DWORD *)(result + 8) = 3;
  *(_BYTE *)(result + 22) = 1;
  return result;
}

void sub_1C4883C50()
{
  JUMPOUT(0x1C4883C1CLL);
}

void sub_1C4883C58()
{
  JUMPOUT(0x1C4883C1CLL);
}

void sub_1C4883C60()
{
  JUMPOUT(0x1C4883C1CLL);
}

uint64_t sub_1C4883C68(uint64_t result)
{
  *(_BYTE *)(result + 20) = 1;
  return result;
}

void sub_1C4883C74()
{
  JUMPOUT(0x1C4883C1CLL);
}

void sub_1C4883C7C(uint64_t a1)
{
  *(_BYTE *)(a1 + 21) = 1;
  JUMPOUT(0x1C4883C1CLL);
}

uint64_t sub_1C4883C90(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  BOOL v9;
  int v10;
  int v11;

  *(_QWORD *)(a1 + 24) = a5;
  result = (**(uint64_t (***)(uint64_t))a1)(a1);
  *(_DWORD *)(a1 + 16) = 0;
  if (a3 <= 2)
  {
    switch(a4)
    {
      case 4:
        goto LABEL_24;
      case 5:
        goto LABEL_23;
      case 6:
        goto LABEL_8;
      case 7:
        if (*(_BYTE *)(a1 + 20))
        {
          if (!*(_BYTE *)(a1 + 21))
          {
LABEL_24:
            v9 = *(_BYTE *)(*(_QWORD *)(a1 + 24) + 372) == 0;
            v10 = 7;
LABEL_9:
            if (!v9)
              ++v10;
            goto LABEL_11;
          }
        }
        else if (!*(_BYTE *)(a1 + 21))
        {
LABEL_8:
          v9 = *(_BYTE *)(*(_QWORD *)(a1 + 24) + 372) == 0;
          v10 = 11;
          goto LABEL_9;
        }
LABEL_23:
        v9 = *(_BYTE *)(*(_QWORD *)(a1 + 24) + 372) == 0;
        v10 = 3;
        goto LABEL_9;
      default:
        return result;
    }
  }
  if (a3 != 3)
  {
    switch(a4)
    {
      case 4:
        goto LABEL_29;
      case 5:
        goto LABEL_13;
      case 6:
        goto LABEL_21;
      case 7:
        if (*(_BYTE *)(a1 + 20))
        {
          if (!*(_BYTE *)(a1 + 21))
          {
LABEL_29:
            v10 = 6;
            goto LABEL_11;
          }
        }
        else if (!*(_BYTE *)(a1 + 21))
        {
LABEL_21:
          v10 = 10;
LABEL_11:
          *(_DWORD *)(a1 + 16) = v10;
          return result;
        }
LABEL_13:
        v10 = 2;
        goto LABEL_11;
      default:
        return result;
    }
  }
  v11 = 9;
  switch(a4)
  {
    case 4:
      goto LABEL_27;
    case 5:
      goto LABEL_26;
    case 6:
      goto LABEL_18;
    case 7:
      if (!*(_BYTE *)(a1 + 20))
      {
        if (!*(_BYTE *)(a1 + 21))
        {
          v11 = 9;
          goto LABEL_18;
        }
        goto LABEL_26;
      }
      if (*(_BYTE *)(a1 + 21))
      {
LABEL_26:
        v11 = 1;
        goto LABEL_18;
      }
LABEL_27:
      v11 = 5;
LABEL_18:
      *(_DWORD *)(a1 + 16) = v11;
LABEL_4:
      *(_BYTE *)(a1 + 23) = 1;
      break;
    default:
      goto LABEL_4;
  }
  return result;
}

uint64_t sub_1C4883E0C(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 22))
  {
    v4 = 0;
  }
  else
  {
    v4 = 1;
    if (*(_BYTE *)(a1 + 20))
      v4 = 2;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 326))
  {
    v5 = 2;
    if (a3)
      v5 = 0;
    v6 = (char *)&unk_1C6468B90 + 48 * a2 + 16 * v4 + 4 * (v5 | a4 ^ 1);
    v7 = 2;
    if (!a4)
      v7 = 3;
    v8 = 4;
    if (a3)
      v8 = 0;
    v9 = (char *)&unk_1C6468BF0 + 96 * a2 + 32 * v4 + 4 * (v7 | v8);
    if (!*(_BYTE *)(a1 + 23))
      v9 = v6;
  }
  else
  {
    v11 = 2;
    if (a3)
      v11 = 0;
    v9 = (char *)&unk_1C6468AD0 + 96 * *(unsigned __int8 *)(a1 + 23) + 32 * v4 + 8 * (v11 | a4) + 4 * (a2 ^ 1);
  }
  return *(unsigned int *)v9;
}

uint64_t sub_1C4883EEC(uint64_t a1, int a2, int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v7;
  _DWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  _DWORD v12[4];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a2 == 3)
  {
    v7 = *(_BYTE **)a1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 326))
    {
      if (*(_WORD *)(a1 + 8) == 2)
        v8 = &unk_1C646B0B0;
      else
        v8 = &unk_1C646B0C0;
      v12[0] = v8[*(__int16 *)(a1 + 10) - 1];
      if (a3)
      {
        v9 = 2;
        v12[1] = 2;
      }
      else
      {
        v9 = 1;
      }
      if (a4)
        v10 = 1;
      else
        v10 = 2;
      v12[v9] = v10;
      if (*(_DWORD *)(a1 + 12))
        v11 = 51;
      else
        v11 = 50;
      return sub_1C4884024(v11, v12, (v9 + 1), v7);
    }
    v4 = 2;
  }
  else
  {
    v4 = 1;
  }
  if (!a2)
    v4 = 0;
  v5 = 2;
  if (a3)
    v5 = 0;
  return *(unsigned int *)((char *)&dword_1C64686D0[64 * v4
                                                  - 1
                                                  + 32 * (unint64_t)*(unsigned int *)(a1 + 12)
                                                  + 8 * (v5 | a4)
                                                  + *(unsigned __int16 *)(a1 + 10)]
                         + ((4 * *(unsigned __int16 *)(a1 + 8)) & 0x3FFF0));
}

uint64_t sub_1C4884024(uint64_t a1, _DWORD *a2, uint64_t a3, _BYTE *a4)
{
  int v4;
  uint64_t v5;

  v4 = a1;
  if (a4[318])
  {
    v5 = 4;
  }
  else if (a4[319])
  {
    v5 = 3;
  }
  else if (a4[320])
  {
    v5 = 2;
  }
  else
  {
    v5 = a4[321];
  }
  sub_1C4888E00(a1, a2);
  return sub_1C488B4C4(v5, v4);
}

uint64_t sub_1C4884088(unsigned int a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = a1 & 0xF;
  v2 = (a1 >> 12) & 0x7F;
  v3 = v2 == 2;
  if (!v2)
    v3 = (a1 >> 9) & 3;
  if (v2 == 4)
    return ((uint64_t (*)(uint64_t))((char *)nullsub_50 + 4 * byte_1C6464F1B[v1]))(2);
  else
    return ((uint64_t (*)(_QWORD))((char *)nullsub_50 + 4 * byte_1C6464F1B[v1]))(v3);
}

uint64_t sub_1C48840CC(int a1)
{
  return (a1 + 1);
}

uint64_t sub_1C48840D4()
{
  return 2;
}

uint64_t sub_1C48840DC(int a1)
{
  return (a1 + 2);
}

unint64_t sub_1C48840E8(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 - 1;
  if ((a2 - 1) >= 8 || ((0x8Bu >> v3) & 1) == 0)
    llvm::report_fatal_error((llvm *)"Unhandled number of load bytes.", (const char *)1);
  v4 = qword_1C646AD98[v3];
  v5 = qword_1C646ADD8[v3];
  v6 = 2048;
  if (!a3)
    v6 = 0;
  return v6 | ((unint64_t)(*(_BYTE *)(a1 + 326) != 0) << 12) | v4 | v5;
}

_BYTE *sub_1C488415C(_BYTE *result, uint64_t a2, int8x8_t a3)
{
  int v3;
  int v4;
  char v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  unsigned __int8 v13;
  uint8x8_t v14;

  v3 = **(unsigned __int16 **)(a2 + 16);
  result[1] = 32;
  if (v3 >= 0x2000)
  {
    switch(v3)
    {
      case 8192:
      case 8193:
      case 8202:
      case 8203:
      case 8212:
      case 8213:
      case 8222:
      case 8223:
        result[1] = 16;
        goto LABEL_15;
      case 8194:
      case 8195:
      case 8204:
      case 8205:
      case 8214:
      case 8215:
      case 8224:
      case 8225:
        result[1] = 16;
        goto LABEL_32;
      case 8230:
      case 8231:
      case 8238:
      case 8239:
      case 8246:
      case 8247:
      case 8254:
      case 8255:
LABEL_15:
        v4 = 4;
LABEL_16:
        v7 = result[7] & 0xF9 | v4;
        result[7] = v7;
        v8 = 2;
        goto LABEL_17;
      case 8232:
      case 8233:
      case 8240:
      case 8241:
      case 8248:
      case 8249:
      case 8256:
      case 8257:
LABEL_32:
        v4 = 4;
LABEL_33:
        v8 = 0;
        v7 = result[7] & 0xF9 | v4;
        result[7] = v7;
        goto LABEL_17;
      default:
LABEL_5:
        result[7] &= 0xF9u;
        result[6] = 0;
        return result;
    }
  }
  v4 = 2;
  switch(v3)
  {
    case 4100:
    case 4101:
    case 4108:
    case 4109:
    case 4116:
    case 4117:
    case 4124:
    case 4125:
      result[1] = 16;
      v4 = 2;
      goto LABEL_16;
    case 4102:
    case 4103:
    case 4110:
    case 4111:
    case 4118:
    case 4119:
    case 4126:
    case 4127:
      result[1] = 16;
      v4 = 2;
      goto LABEL_33;
    case 4104:
    case 4105:
    case 4106:
    case 4107:
    case 4112:
    case 4113:
    case 4114:
    case 4115:
    case 4120:
    case 4121:
    case 4122:
    case 4123:
    case 4128:
    case 4129:
    case 4130:
    case 4131:
    case 4136:
    case 4137:
    case 4138:
    case 4139:
    case 4144:
    case 4145:
    case 4146:
    case 4147:
    case 4152:
    case 4153:
    case 4154:
    case 4155:
      goto LABEL_5;
    case 4132:
    case 4133:
    case 4140:
    case 4141:
    case 4148:
    case 4149:
    case 4156:
    case 4157:
      goto LABEL_16;
    case 4134:
    case 4135:
    case 4142:
    case 4143:
    case 4150:
    case 4151:
    case 4158:
    case 4159:
      goto LABEL_33;
    default:
      v5 = v3 + 126;
      if ((v3 - 4482) > 0x2D)
        goto LABEL_9;
      if (((1 << v5) & 0x3CF3CF000000) != 0)
        goto LABEL_28;
      if (((1 << v5) & 0x3CF3CF) != 0)
      {
        result[1] = 16;
LABEL_28:
        v4 = 4;
      }
      else
      {
LABEL_9:
        v6 = v3 - 4282;
        if (v6 > 0x2D)
          goto LABEL_5;
        if (((1 << v6) & 0x3CF3CF) != 0)
        {
          result[1] = 16;
          v4 = 2;
        }
        else if (((1 << v6) & 0x3CF3CF000000) == 0)
        {
          goto LABEL_5;
        }
      }
      v7 = result[7] & 0xF9 | v4;
      result[7] = v7;
      v8 = 1;
      break;
  }
LABEL_17:
  result[6] = v8;
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * ((v7 >> 1) & 1) + 16);
  *result = v9 & 0xF;
  v10 = v7 & 0xF6 | ((v9 & 0xFu) > 2uLL);
  result[2] = v9 >> 4;
  if (((v9 >> 4) & 2) != 0)
    v11 = 2;
  else
    v11 = 1;
  if (((v9 >> 4) & 4) != 0)
    v12 = 3;
  else
    v12 = v11;
  if ((v9 & 0x80) != 0)
    v13 = 4;
  else
    v13 = v12;
  result[3] = v13;
  a3.i32[0] = v9 >> 4;
  v14 = (uint8x8_t)vcnt_s8(a3);
  v14.i16[0] = vaddlv_u8(v14);
  result[5] = BYTE1(v9) & 1;
  result[4] = v14.i8[0];
  result[7] = v10 | (8 * (v14.i32[0] != v13));
  return result;
}

uint64_t sub_1C4884384()
{
  return 0;
}

uint64_t sub_1C488438C(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v3;
  int v4;
  unsigned int v5;
  uint64_t v8;
  BOOL v11;
  uint64_t v12;
  char v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v3 = *(unsigned __int16 **)(a2 + 16);
  v4 = *v3;
  v5 = v4 - 9;
  if ((v4 - 9) <= 0x3C && ((1 << (v4 - 9)) & 0x1000000000000605) != 0 || v4 == 0)
    return 0;
  v8 = *((_QWORD *)v3 + 1);
  if ((v8 & 0x10) != 0)
    return 0;
  v11 = v5 > 0x3C;
  v12 = (1 << v5) & 0x1000000000000405;
  if (!v11 && v12 != 0 || v4 == 0)
    v15 = 1;
  else
    v15 = v3[8] & 1;
  v16 = a1[2];
  v17 = v16 != 16 && *((_BYTE *)a1 + 16) == 0;
  v18 = !v17;
  if (!v17)
  {
    v16 = 0;
    *((_BYTE *)a1 + 16) = 0;
    *((_QWORD *)a1 + 1) = 0;
  }
  if ((v15 & 1) != 0)
  {
    v19 = sub_1C488459C(a2, *(_QWORD *)(a3 + 112));
    v20 = a1[1];
    if ((v20 + v19) <= 0x100)
    {
      v21 = a1[3];
    }
    else
    {
      *a1 = 0;
      if (v16 <= 7)
      {
        v20 = a1[3];
        v21 = v20;
      }
      else
      {
        v20 = 0;
        v21 = 0;
        v16 = 0;
        v18 = 1;
      }
    }
    a1[2] = v16 + 1;
    a1[3] = v21 + v19;
    a1[1] = v20 + v19;
    v26 = *((_QWORD *)v3 + 2);
    if ((v26 & 0x1000) != 0)
    {
      if ((v26 & 0x4000012) != 0)
      {
        v27 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * sub_1C4B138B4(v4) + 16);
        v28 = 0x4000000000000000;
      }
      else
      {
        v27 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 48);
        v28 = 2048;
      }
      if ((*v27 & v28) != 0)
        *((_BYTE *)a1 + 16) = 1;
    }
    return v18;
  }
  v22 = *(_WORD *)(a2 + 44);
  if ((v22 & 0xC) != 0 && (v22 & 4) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + 9) & 4) == 0)
    {
      v23 = a2;
      while ((*(_WORD *)(v23 + 44) & 8) != 0)
      {
        v23 = *(_QWORD *)(v23 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v23 + 16) + 9) & 4) != 0)
          goto LABEL_39;
      }
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if ((v8 & 0x400) != 0)
LABEL_39:
    *(_QWORD *)a1 = 0;
LABEL_40:
  if (v16)
    v18 = 1;
  else
    v18 = v18;
  *((_QWORD *)a1 + 1) = 0;
  v24 = sub_1C488459C(a2, *(_QWORD *)(a3 + 112));
  v25 = *a1;
  if ((*a1 + v24) >= 0x81)
  {
    v25 = 0;
    a1[1] = 0;
  }
  *a1 = v25 + v24;
  return v18;
}

uint64_t sub_1C488459C(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  int v4;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;

  v2 = *(unsigned __int16 **)(a1 + 16);
  v3 = *((unsigned __int8 *)v2 + 5);
  v4 = *v2;
  v6 = (v4 - 9) <= 0x3C && ((1 << (v4 - 9)) & 0x1000000000000605) != 0 || v4 == 0;
  if (!v6 && (v2[4] & 0x10) == 0 && (v2[8] & 1) == 0)
    return v3;
  if ((v2[9] & 0x3C) == 0)
    return v3;
  v8 = *(_QWORD *)(a1 + 32);
  if ((*(_WORD *)(a2 + 2 * *(unsigned int *)(v8 + 4)) & 0xC0) != 0 || (*(_BYTE *)(v8 + 49) & 8) != 0)
    return v3;
  v9 = v2[1];
  if (v9 >= 3)
  {
    v10 = 2;
    v11 = 2;
    do
    {
      v12 = v11;
      v13 = *(unsigned __int8 *)(v8 + 32 * v11);
      if (!v10 && (v13 != 1 || *(_QWORD *)(v8 + 32 * v12 + 16)))
        return v3;
      if (v13)
      {
        if (v13 == 1 && (*(_BYTE *)(v8 + 32 * v12 + 16) & 0xC0) != 0)
          return v3;
        v14 = 0;
      }
      else
      {
        if ((*(_WORD *)(a2 + 2 * *(unsigned int *)(v8 + 32 * v12 + 4)) & 0xC0) != 0)
          return v3;
        v14 = 1;
      }
      v11 = v12 + v14 + 1;
      --v10;
    }
    while (v11 < v9);
  }
  if ((_DWORD)v3 != 6)
    return (v3 - 2);
  result = 6;
  if (v4 > 1595)
  {
    if ((v4 - 1596) <= 4 && v4 != 1598
      || (v4 - 1816) <= 0x34 && ((1 << (v4 - 24)) & 0x1B00001B00001BLL) != 0)
    {
      return result;
    }
    v15 = v4 - 1960;
  }
  else
  {
    v15 = v4 - 1182;
  }
  if (v15 > 4 || v15 == 2)
    return (v3 - 2);
  return result;
}

void sub_1C4884718(_QWORD *a1, uint64_t a2, unint64_t *a3, unsigned int a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  llvm::MachineFunction *v12;
  llvm::MachineInstr *v13;
  llvm::MachineInstr *v14;
  llvm::MachineFunction *v15;
  llvm::MachineInstr *v16;
  llvm::MachineInstr *v17;
  void **v18;
  llvm::MachineFunction *v19;
  llvm::MachineInstr *v20;
  llvm::MachineInstr *v21;
  unsigned __int8 *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD **)(a2 + 32);
  if (!*(_BYTE *)(v10[1] + 1688)
    || (v11 = *(_QWORD *)(*v10 + 40),
        v23 = "agx.disable_gin_1102",
        v27 = 259,
        llvm::Module::getNamedMetadata(v11, (uint64_t)&v23)))
  {
    v22 = 0;
    v12 = sub_1C4787570(a2, a3, &v22, a1[1] + 195696, a4);
    v14 = v13;
    LODWORD(v23) = 1;
    v24 = 0;
    v25 = 0;
    llvm::MachineInstr::addOperand(v13, v12, (const llvm::MachineOperand *)&v23);
    LODWORD(v23) = 1;
    v24 = 0;
    v25 = 0;
    llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)&v23);
    if (v22)
      llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
    v23 = 0;
    v15 = sub_1C4787570(a2, a3, (unsigned __int8 **)&v23, a1[1] + 196512, a4);
    v17 = v16;
    if (v23)
      llvm::MetadataTracking::untrack((uint64_t)&v23, (unsigned __int8 *)v23);
    if (a5)
    {
      llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)(*(_QWORD *)(a5 + 32) + 32));
      v18 = (void **)(*(_QWORD *)(a5 + 32) + 64);
    }
    else
    {
      LODWORD(v23) = 1;
      v24 = 0;
      v25 = 0;
      llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v23);
      LODWORD(v23) = 1;
      v24 = 0;
      v25 = 0;
      v18 = &v23;
    }
    llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)v18);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    LODWORD(v23) = 0x2000000;
    HIDWORD(v23) = a4;
    llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v23);
    v22 = 0;
    v19 = sub_1C4787570(a2, a3, &v22, a1[1] + 379920, a4);
    v21 = v20;
    LODWORD(v23) = 1;
    v24 = 0;
    v25 = 0;
    llvm::MachineInstr::addOperand(v20, v19, (const llvm::MachineOperand *)&v23);
    v24 = 0;
    v25 = 0;
    LODWORD(v23) = 0;
    HIDWORD(v23) = a4;
    v26 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v23);
    LODWORD(v23) = 1;
    v24 = 0;
    v25 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v23);
    if (v22)
      llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
  }
  else
  {
    (*(void (**)(void **__return_ptr, _QWORD *, _QWORD))(a1[11] + 88))(&v23, a1 + 11, *(_QWORD *)(a2 + 32));
    if (a4 != 66)
    {
      v22 = 0;
      (*(void (**)(_QWORD *, uint64_t, unint64_t *, unsigned __int8 **, _QWORD, uint64_t, _QWORD))(*a1 + 400))(a1, a2, a3, &v22, a4, 66, 0);
      if (v22)
        llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
    }
    if (v23 != &v25)
      free(v23);
  }
}

unint64_t sub_1C4884A00(_QWORD *a1, unsigned int a2, uint64_t a3, unint64_t *a4, int a5)
{
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  llvm::MachineFunction *v17;
  unint64_t v18;
  uint64_t v19;
  llvm::MachineFunction *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  unsigned __int8 *v56;

  v10 = *(uint64_t **)(a3 + 32);
  v11 = *v10;
  v12 = *(unsigned __int16 *)(*v10 + 18);
  v13 = (v12 >> 4) & 0x3FF;
  if (v13)
    v14 = v13 == 8;
  else
    v14 = 1;
  if (v14 || v13 == 255)
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10[43] + 592))(v10[43], 102))
      v15 = 64;
    else
      v15 = 61;
    sub_1C4884718(a1, a3, a4, 0x42u, 0);
    if (a2 > 0xFF)
    {
      v19 = a1[1] + 182592;
      v20 = *(llvm::MachineFunction **)(a3 + 32);
      v56 = 0;
      v18 = *((_QWORD *)v20 + 28);
      if (v18)
        *((_QWORD *)v20 + 28) = *(_QWORD *)v18;
      else
        v18 = sub_1C484358C((uint64_t)v20 + 128, 72, 3);
      v51 = 0;
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v18, v20, v19, (unsigned __int8 **)&v51, 0);
      if (v51)
        llvm::MetadataTracking::untrack((uint64_t)&v51, (unsigned __int8 *)v51);
      if (v56)
        llvm::MetadataTracking::untrack((uint64_t)&v56, v56);
      v31 = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(v18 + 24) = v31;
      v32 = *(_QWORD *)(v31 + 32);
      v33 = *(unsigned int *)(v18 + 40);
      if ((_DWORD)v33)
      {
        v44 = *(_QWORD *)(v18 + 32);
        v45 = *(_QWORD *)(v32 + 40);
        v46 = 32 * v33;
        do
        {
          if (!*(_BYTE *)v44)
          {
            v47 = *(unsigned int *)(v44 + 4);
            if ((int)v47 >= 0)
              v48 = (uint64_t *)(*(_QWORD *)(v45 + 272) + 8 * v47);
            else
              v48 = (uint64_t *)(*(_QWORD *)(v45 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
            v49 = *v48;
            if (*v48)
            {
              v50 = *(_QWORD *)(v49 + 16);
              *(_QWORD *)(v49 + 16) = v44;
              *(_QWORD *)(v44 + 16) = v50;
              if ((*(_BYTE *)(v44 + 3) & 1) != 0)
              {
                *(_QWORD *)(v44 + 24) = v49;
              }
              else
              {
                *(_QWORD *)(v44 + 24) = 0;
                v48 = (uint64_t *)(v50 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v44 + 16) = v44;
              *(_QWORD *)(v44 + 24) = 0;
            }
            *v48 = v44;
          }
          v44 += 32;
          v46 -= 32;
        }
        while (v46);
      }
      v34 = *(_QWORD *)(v32 + 728);
      if (v34)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v34 + 24))(v34, v18);
      v35 = *a4 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v18 = v35 | *(_QWORD *)v18 & 7;
      *(_QWORD *)(v18 + 8) = a4;
      *(_QWORD *)(v35 + 8) = v18;
      *a4 = *a4 & 7 | v18;
      v52 = 0;
      v53 = 0;
      v54 = 0;
      LODWORD(v51) = 0x1000000;
      HIDWORD(v51) = a5;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v20, (const llvm::MachineOperand *)&v51);
      LODWORD(v51) = 1;
      v52 = 0;
      v53 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v20, (const llvm::MachineOperand *)&v51);
      v52 = 0;
      v53 = 0;
      LODWORD(v51) = 0;
      HIDWORD(v51) = v15;
      v54 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v20, (const llvm::MachineOperand *)&v51);
      LODWORD(v51) = 1;
      v52 = 0;
      v53 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v20, (const llvm::MachineOperand *)&v51);
      v52 = 0;
      v53 = 0;
      v51 = 0x4200000000;
      v54 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v20, (const llvm::MachineOperand *)&v51);
      LODWORD(v51) = 1;
      v52 = 0;
      v53 = 128;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v20, (const llvm::MachineOperand *)&v51);
      sub_1C487ED18((uint64_t)a1, a3, (unint64_t *)v18, a2, v15, 3, 0);
    }
    else
    {
      v16 = a1[1] + 182208;
      v17 = *(llvm::MachineFunction **)(a3 + 32);
      v56 = 0;
      v18 = *((_QWORD *)v17 + 28);
      if (v18)
        *((_QWORD *)v17 + 28) = *(_QWORD *)v18;
      else
        v18 = sub_1C484358C((uint64_t)v17 + 128, 72, 3);
      v51 = 0;
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v18, v17, v16, (unsigned __int8 **)&v51, 0);
      if (v51)
        llvm::MetadataTracking::untrack((uint64_t)&v51, (unsigned __int8 *)v51);
      if (v56)
        llvm::MetadataTracking::untrack((uint64_t)&v56, v56);
      v26 = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(v18 + 24) = v26;
      v27 = *(_QWORD *)(v26 + 32);
      v28 = *(unsigned int *)(v18 + 40);
      if ((_DWORD)v28)
      {
        v37 = *(_QWORD *)(v18 + 32);
        v38 = *(_QWORD *)(v27 + 40);
        v39 = 32 * v28;
        do
        {
          if (!*(_BYTE *)v37)
          {
            v40 = *(unsigned int *)(v37 + 4);
            if ((int)v40 >= 0)
              v41 = (uint64_t *)(*(_QWORD *)(v38 + 272) + 8 * v40);
            else
              v41 = (uint64_t *)(*(_QWORD *)(v38 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
            v42 = *v41;
            if (*v41)
            {
              v43 = *(_QWORD *)(v42 + 16);
              *(_QWORD *)(v42 + 16) = v37;
              *(_QWORD *)(v37 + 16) = v43;
              if ((*(_BYTE *)(v37 + 3) & 1) != 0)
              {
                *(_QWORD *)(v37 + 24) = v42;
              }
              else
              {
                *(_QWORD *)(v37 + 24) = 0;
                v41 = (uint64_t *)(v43 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v37 + 16) = v37;
              *(_QWORD *)(v37 + 24) = 0;
            }
            *v41 = v37;
          }
          v37 += 32;
          v39 -= 32;
        }
        while (v39);
      }
      v29 = *(_QWORD *)(v27 + 728);
      if (v29)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v29 + 24))(v29, v18);
      v30 = *a4 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v18 = v30 | *(_QWORD *)v18 & 7;
      *(_QWORD *)(v18 + 8) = a4;
      *(_QWORD *)(v30 + 8) = v18;
      *a4 = *a4 & 7 | v18;
      v52 = 0;
      v53 = 0;
      v54 = 0;
      LODWORD(v51) = 0x1000000;
      HIDWORD(v51) = a5;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v17, (const llvm::MachineOperand *)&v51);
      LODWORD(v51) = 1;
      v52 = 0;
      v53 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v17, (const llvm::MachineOperand *)&v51);
      LODWORD(v51) = 1;
      v52 = 0;
      v53 = a2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v17, (const llvm::MachineOperand *)&v51);
      v52 = 0;
      v53 = 0;
      v51 = 0x4200000000;
      v54 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v17, (const llvm::MachineOperand *)&v51);
      LODWORD(v51) = 1;
      v52 = 0;
      v53 = 128;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v18, v17, (const llvm::MachineOperand *)&v51);
    }
  }
  else
  {
    v21 = v10[6];
    v22 = *(_QWORD *)(v10[7] + 48);
    if (!v21)
    {
      v21 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v10[1] + 216))(v10[1], v10 + 16, *(_QWORD *)(a3 + 32));
      v10[6] = v21;
      v11 = *v10;
      v12 = *(unsigned __int16 *)(*v10 + 18);
      v13 = (v12 >> 4) & 0x3FF;
    }
    v23 = *(_DWORD *)(v21 + 464) + v22;
    if (v13 != 100 && (v13 - 109) >= 0xFFFFFFF7 && (v12 & 0x3FF0) != 0x640)
    {
      if (*(_BYTE *)(v10[1] + 1687))
      {
        v25 = *(_QWORD *)(v11 + 40);
        v51 = (uint64_t)"agx.stack_oob";
        v55 = 259;
        if (llvm::Module::getNamedMetadata(v25, (uint64_t)&v51))
          v23 += 32;
      }
    }
    return sub_1C487ED18((uint64_t)a1, a3, a4, a2 - v23, a5, 3, 0);
  }
  return v18;
}

unint64_t sub_1C4884F84(uint64_t a1, int a2, uint64_t a3, unint64_t *a4, int a5)
{
  _BYTE *v5;
  int v6;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::MachineFunction *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v5 = *(_BYTE **)(a1 + 80);
  if (v5[318])
    v6 = 4;
  else
    v6 = 3;
  if (!a2)
    return 0;
  v11 = *(_QWORD *)(a3 + 32);
  v12 = a2 >= 0;
  if (a2 >= 0)
    v13 = a2;
  else
    v13 = -a2;
  if (v13 > 0xFF)
  {
    if ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 344) + 592))(*(_QWORD *)(v11 + 344), 102))
      v18 = 64;
    else
      v18 = 61;
    v19 = *(_BYTE **)(a1 + 80);
    if (v19[318])
    {
      v20 = 4;
    }
    else if (v19[319])
    {
      v20 = 3;
    }
    else if (v19[320])
    {
      v20 = 2;
    }
    else
    {
      v20 = v19[321];
    }
    v34 = *(_QWORD *)(a1 + 8) + 48 * sub_1C488B4C4(v20, dword_1C6468CB0[4 * v12 + 2]);
    v35 = *(llvm::MachineFunction **)(a3 + 32);
    v49 = 0;
    v17 = *((_QWORD *)v35 + 28);
    if (v17)
      *((_QWORD *)v35 + 28) = *(_QWORD *)v17;
    else
      v17 = sub_1C484358C((uint64_t)v35 + 128, 72, 3);
    v50 = 0;
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v17, v35, v34, (unsigned __int8 **)&v50, 0);
    if (v50)
      llvm::MetadataTracking::untrack((uint64_t)&v50, (unsigned __int8 *)v50);
    if (v49)
      llvm::MetadataTracking::untrack((uint64_t)&v49, v49);
    v36 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(v17 + 24) = v36;
    v37 = *(_QWORD *)(v36 + 32);
    v38 = *(unsigned int *)(v17 + 40);
    if ((_DWORD)v38)
    {
      v42 = *(_QWORD *)(v17 + 32);
      v43 = *(_QWORD *)(v37 + 40);
      v44 = 32 * v38;
      do
      {
        if (!*(_BYTE *)v42)
        {
          v45 = *(unsigned int *)(v42 + 4);
          if ((int)v45 >= 0)
            v46 = (uint64_t *)(*(_QWORD *)(v43 + 272) + 8 * v45);
          else
            v46 = (uint64_t *)(*(_QWORD *)(v43 + 24) + 16 * (v45 & 0x7FFFFFFF) + 8);
          v47 = *v46;
          if (*v46)
          {
            v48 = *(_QWORD *)(v47 + 16);
            *(_QWORD *)(v47 + 16) = v42;
            *(_QWORD *)(v42 + 16) = v48;
            if ((*(_BYTE *)(v42 + 3) & 1) != 0)
            {
              *(_QWORD *)(v42 + 24) = v47;
            }
            else
            {
              *(_QWORD *)(v42 + 24) = 0;
              v46 = (uint64_t *)(v48 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v42 + 16) = v42;
            *(_QWORD *)(v42 + 24) = 0;
          }
          *v46 = v42;
        }
        v42 += 32;
        v44 -= 32;
      }
      while (v44);
    }
    v39 = *(_QWORD *)(v37 + 728);
    if (v39)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 24))(v39, v17);
    v40 = *a4 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = v40 | *(_QWORD *)v17 & 7;
    *(_QWORD *)(v17 + 8) = a4;
    *(_QWORD *)(v40 + 8) = v17;
    *a4 = *a4 & 7 | v17;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    LODWORD(v50) = 0x1000000;
    HIDWORD(v50) = a5;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, v35, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
    v51 = 0;
    v52 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, v35, (const llvm::MachineOperand *)&v50);
    v51 = 0;
    v52 = 0;
    v50 = 0x4200000000;
    v53 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, v35, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
    v51 = 0;
    v52 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, v35, (const llvm::MachineOperand *)&v50);
    v51 = 0;
    v52 = 0;
    LODWORD(v50) = 0;
    HIDWORD(v50) = v18;
    v53 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, v35, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
    v51 = 0;
    v52 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, v35, (const llvm::MachineOperand *)&v50);
    sub_1C487ED18(a1, a3, (unint64_t *)v17, v13, v18, v6, 0);
  }
  else
  {
    v14 = &dword_1C6468CB0[4 * v12];
    v15 = *v14;
    if (v5[318])
    {
      v16 = 4;
    }
    else if (v5[319])
    {
      v16 = 3;
    }
    else if (v5[320])
    {
      v16 = 2;
    }
    else
    {
      v16 = v5[321];
    }
    v21 = *(_QWORD *)(a1 + 8) + 48 * sub_1C488B4C4(v16, *v14);
    v49 = 0;
    v17 = *(_QWORD *)(v11 + 224);
    if (v17)
      *(_QWORD *)(v11 + 224) = *(_QWORD *)v17;
    else
      v17 = sub_1C484358C(v11 + 128, 72, 3);
    v50 = 0;
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v17, (llvm::MachineFunction *)v11, v21, (unsigned __int8 **)&v50, 0);
    if (v50)
      llvm::MetadataTracking::untrack((uint64_t)&v50, (unsigned __int8 *)v50);
    if (v49)
      llvm::MetadataTracking::untrack((uint64_t)&v49, v49);
    v22 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(v17 + 24) = v22;
    v23 = *(_QWORD *)(v22 + 32);
    v24 = *(unsigned int *)(v17 + 40);
    if ((_DWORD)v24)
    {
      v27 = *(_QWORD *)(v17 + 32);
      v28 = *(_QWORD *)(v23 + 40);
      v29 = 32 * v24;
      do
      {
        if (!*(_BYTE *)v27)
        {
          v30 = *(unsigned int *)(v27 + 4);
          if ((int)v30 >= 0)
            v31 = (uint64_t *)(*(_QWORD *)(v28 + 272) + 8 * v30);
          else
            v31 = (uint64_t *)(*(_QWORD *)(v28 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
          v32 = *v31;
          if (*v31)
          {
            v33 = *(_QWORD *)(v32 + 16);
            *(_QWORD *)(v32 + 16) = v27;
            *(_QWORD *)(v27 + 16) = v33;
            if ((*(_BYTE *)(v27 + 3) & 1) != 0)
            {
              *(_QWORD *)(v27 + 24) = v32;
            }
            else
            {
              *(_QWORD *)(v27 + 24) = 0;
              v31 = (uint64_t *)(v33 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v27 + 16) = v27;
            *(_QWORD *)(v27 + 24) = 0;
          }
          *v31 = v27;
        }
        v27 += 32;
        v29 -= 32;
      }
      while (v29);
    }
    v25 = *(_QWORD *)(v23 + 728);
    if (v25)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v25 + 24))(v25, v17);
    v26 = *a4 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = v26 | *(_QWORD *)v17 & 7;
    *(_QWORD *)(v17 + 8) = a4;
    *(_QWORD *)(v26 + 8) = v17;
    *a4 = *a4 & 7 | v17;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    LODWORD(v50) = 0x1000000;
    HIDWORD(v50) = a5;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, (llvm::MachineFunction *)v11, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
    v51 = 0;
    v52 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, (llvm::MachineFunction *)v11, (const llvm::MachineOperand *)&v50);
    if (v15 == 45)
    {
      v51 = 0;
      v52 = 0;
      v50 = 0x4200000000;
      v53 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, (llvm::MachineFunction *)v11, (const llvm::MachineOperand *)&v50);
      LODWORD(v50) = 1;
      v51 = 0;
      v52 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, (llvm::MachineFunction *)v11, (const llvm::MachineOperand *)&v50);
      LODWORD(v50) = 1;
      v51 = 0;
      v52 = v13;
    }
    else
    {
      LODWORD(v50) = 1;
      v51 = 0;
      v52 = v13;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, (llvm::MachineFunction *)v11, (const llvm::MachineOperand *)&v50);
      v51 = 0;
      v52 = 0;
      v50 = 0x4200000000;
      v53 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, (llvm::MachineFunction *)v11, (const llvm::MachineOperand *)&v50);
      LODWORD(v50) = 1;
      v51 = 0;
      v52 = 0;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, (llvm::MachineFunction *)v11, (const llvm::MachineOperand *)&v50);
  }
  return v17;
}

uint64_t sub_1C4885524(int a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;

  if (a3[318])
  {
    v4 = 4;
  }
  else if (a3[319])
  {
    v4 = 3;
  }
  else if (a3[320])
  {
    v4 = 2;
  }
  else
  {
    v4 = a3[321];
  }
  return sub_1C488B4C4(v4, a1);
}

unint64_t sub_1C4885568(uint64_t a1, int a2, uint64_t a3, unint64_t *a4, char a5)
{
  unint64_t v5;
  uint64_t v12;
  llvm::MachineFunction *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  unsigned __int8 *v33;

  if (!a2)
    return 0;
  v12 = *(_QWORD *)(a1 + 8) + 392928;
  v13 = *(llvm::MachineFunction **)(a3 + 32);
  v33 = 0;
  v5 = *((_QWORD *)v13 + 28);
  if (v5)
    *((_QWORD *)v13 + 28) = *(_QWORD *)v5;
  else
    v5 = sub_1C484358C((uint64_t)v13 + 128, 72, 3);
  v29 = 0;
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v5, v13, v12, &v29, 0);
  if (v29)
    llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
  if (v33)
    llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
  v14 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(v5 + 24) = v14;
  v15 = *(_QWORD *)(v14 + 32);
  v16 = *(unsigned int *)(v5 + 40);
  if ((_DWORD)v16)
  {
    v22 = *(_QWORD *)(v5 + 32);
    v23 = *(_QWORD *)(v15 + 40);
    v24 = 32 * v16;
    do
    {
      if (!*(_BYTE *)v22)
      {
        v25 = *(unsigned int *)(v22 + 4);
        if ((int)v25 >= 0)
          v26 = (uint64_t *)(*(_QWORD *)(v23 + 272) + 8 * v25);
        else
          v26 = (uint64_t *)(*(_QWORD *)(v23 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
        v27 = *v26;
        if (*v26)
        {
          v28 = *(_QWORD *)(v27 + 16);
          *(_QWORD *)(v27 + 16) = v22;
          *(_QWORD *)(v22 + 16) = v28;
          if ((*(_BYTE *)(v22 + 3) & 1) != 0)
          {
            *(_QWORD *)(v22 + 24) = v27;
          }
          else
          {
            *(_QWORD *)(v22 + 24) = 0;
            v26 = (uint64_t *)(v28 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v22 + 16) = v22;
          *(_QWORD *)(v22 + 24) = 0;
        }
        *v26 = v22;
      }
      v22 += 32;
      v24 -= 32;
    }
    while (v24);
  }
  v17 = (a2 + 3) >> 2;
  v18 = *(_QWORD *)(v15 + 728);
  if (v18)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v18 + 24))(v18, v5);
  v19 = *a4 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v5 = v19 | *(_QWORD *)v5 & 7;
  *(_QWORD *)(v5 + 8) = a4;
  *(_QWORD *)(v19 + 8) = v5;
  *a4 = *a4 & 7 | v5;
  LODWORD(v29) = 1;
  v30 = 0;
  v31 = 512;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v5, v13, (const llvm::MachineOperand *)&v29);
  LODWORD(v29) = 1;
  v30 = 0;
  v31 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v5, v13, (const llvm::MachineOperand *)&v29);
  LODWORD(v29) = 1;
  v30 = 0;
  v31 = v17;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v5, v13, (const llvm::MachineOperand *)&v29);
  if ((a5 & 1) == 0)
  {
    v20 = *(_QWORD **)(a3 + 32);
    if (*(_BYTE *)(v20[1] + 1688))
    {
      v21 = *(_QWORD *)(*v20 + 40);
      v29 = "agx.disable_gin_1102";
      v32 = 259;
      if (!llvm::Module::getNamedMetadata(v21, (uint64_t)&v29))
        return sub_1C4884F84(a1, v17, a3, a4, 66);
    }
  }
  return v5;
}

unint64_t sub_1C48857D0(uint64_t a1, int a2, uint64_t a3, unint64_t *a4)
{
  if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 381))
    return sub_1C4885568(a1, a2, a3, a4, 0);
  else
    return sub_1C4884F84(a1, a2, a3, a4, 66);
}

unint64_t sub_1C48857EC(_QWORD *a1, _QWORD *a2, unint64_t *a3, unsigned __int8 *a4, int a5, unsigned int a6, char a7)
{
  unint64_t *v7;
  unsigned int v11;
  unint64_t v12;
  __int16 v13;
  int v14;
  int v15;
  unsigned __int16 *v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _WORD *v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  _WORD *v27;
  unsigned __int16 v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  __int16 v40;
  uint64_t v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  __int16 v45;
  _WORD *v46;
  unsigned __int16 *v47;
  __int16 v48;
  __int16 v49;
  unsigned __int16 *v50;
  __int16 v51;
  int v52;
  unsigned int v55;
  uint64_t v56;
  llvm::MachineFunction *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  const llvm::MachineOperand *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v7 = (unint64_t *)a2[7];
  if (v7 != a3)
  {
    v11 = 0;
    v12 = (unint64_t)a3;
    while (1)
    {
      v12 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
      if (v12 && (*(_BYTE *)v12 & 4) != 0)
      {
        v13 = *(_WORD *)(v12 + 44);
      }
      else
      {
        while (1)
        {
          v13 = *(_WORD *)(v12 + 44);
          if ((v13 & 4) == 0)
            break;
          v12 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      v14 = v13 & 0xC;
      v15 = v13 & 4;
      v16 = *(unsigned __int16 **)(v12 + 16);
      v17 = *((_QWORD *)v16 + 1);
      if (v14)
        v18 = v15 == 0;
      else
        v18 = 0;
      if (v18)
      {
        v31 = v12;
        if ((v17 & 0x80) != 0)
          return 0;
        while ((*(_WORD *)(v31 + 44) & 8) != 0)
        {
          v32 = 0;
          v31 = *(_QWORD *)(v31 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v31 + 16) + 8) & 0x80) != 0)
            return v32;
        }
      }
      else if ((v17 & 0x80) != 0)
      {
        return 0;
      }
      if ((v17 & 0x2000) != 0)
      {
        v19 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 4);
        if (v19 == a6)
        {
          v55 = *v16;
          v56 = a1[1];
          v57 = (llvm::MachineFunction *)a2[4];
          v103 = a4;
          if (a4)
            llvm::MetadataTracking::track((uint64_t)&v103, a4, 2);
          v58 = v56 + 48 * v55;
          v32 = *((_QWORD *)v57 + 28);
          if (v32)
            *((_QWORD *)v57 + 28) = *(_QWORD *)v32;
          else
            v32 = sub_1C484358C((uint64_t)v57 + 128, 72, 3);
          v104 = v103;
          if (v103)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v103, v103, (uint64_t)&v104);
            v103 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v32, v57, v58, &v104, 0);
          if (v104)
            llvm::MetadataTracking::untrack((uint64_t)&v104, v104);
          if (v103)
            llvm::MetadataTracking::untrack((uint64_t)&v103, v103);
          v59 = a2[5];
          *(_QWORD *)(v32 + 24) = v59;
          v60 = *(_QWORD *)(v59 + 32);
          v61 = *(unsigned int *)(v32 + 40);
          if ((_DWORD)v61)
          {
            v82 = *(_QWORD *)(v32 + 32);
            v83 = *(_QWORD *)(v60 + 40);
            v84 = 32 * v61;
            do
            {
              if (!*(_BYTE *)v82)
              {
                v85 = *(unsigned int *)(v82 + 4);
                if ((int)v85 >= 0)
                  v86 = (uint64_t *)(*(_QWORD *)(v83 + 272) + 8 * v85);
                else
                  v86 = (uint64_t *)(*(_QWORD *)(v83 + 24) + 16 * (v85 & 0x7FFFFFFF) + 8);
                v87 = *v86;
                if (*v86)
                {
                  v88 = *(_QWORD *)(v87 + 16);
                  *(_QWORD *)(v87 + 16) = v82;
                  *(_QWORD *)(v82 + 16) = v88;
                  if ((*(_BYTE *)(v82 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v82 + 24) = v87;
                  }
                  else
                  {
                    *(_QWORD *)(v82 + 24) = 0;
                    v86 = (uint64_t *)(v88 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v82 + 16) = v82;
                  *(_QWORD *)(v82 + 24) = 0;
                }
                *v86 = v82;
              }
              v82 += 32;
              v84 -= 32;
            }
            while (v84);
          }
          v62 = *(_QWORD *)(v60 + 728);
          if (v62)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v62 + 24))(v62, v32);
          v63 = *a3 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v32 = v63 | *(_QWORD *)v32 & 7;
          *(_QWORD *)(v32 + 8) = a3;
          *(_QWORD *)(v63 + 8) = v32;
          *a3 = *a3 & 7 | v32;
          v105 = 0;
          v106 = 0;
          v107 = 0;
          LODWORD(v104) = 0x1000000;
          HIDWORD(v104) = a5;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v57, (const llvm::MachineOperand *)&v104);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v57, (const llvm::MachineOperand *)(*(_QWORD *)(v12 + 32) + 32));
          v64 = (const llvm::MachineOperand *)(*(_QWORD *)(v12 + 32) + 64);
          goto LABEL_101;
        }
        if ((a7 & 1) == 0 && (*v16 & 0xFFFC) == 0xFE4)
        {
          v20 = a1[12];
          v21 = a1[18];
          v22 = *(unsigned int *)(v20 + 24 * v19 + 4);
          v23 = *(unsigned __int16 *)(v21 + 2 * v22);
          if (*(_WORD *)(v21 + 2 * v22))
          {
            LOWORD(v23) = v23 + v19;
            v24 = (_WORD *)(a1[22] + 2 * *(unsigned int *)(v20 + 24 * v19 + 12));
            v25 = (unsigned __int16 *)(v21 + 2 * v22 + 2);
            v26 = v25;
            v27 = v24;
            v28 = v23;
            while (*v27 != 1)
            {
              v29 = *v26++;
              v28 += v29;
              ++v27;
              if (!v29)
              {
                v30 = 0;
                goto LABEL_27;
              }
            }
            v30 = v28;
LABEL_27:
            while (*v24 != 2)
            {
              v33 = *v25++;
              LOWORD(v23) = v33 + v23;
              ++v24;
              if (!v33)
              {
                v23 = 0;
                goto LABEL_31;
              }
            }
            v23 = (unsigned __int16)v23;
          }
          else
          {
            v30 = 0;
          }
LABEL_31:
          if (v30 == a6)
          {
            v65 = a1[1];
            if (*(_BYTE *)(a1[10] + 318))
              v66 = 195168;
            else
              v66 = 195216;
            v57 = (llvm::MachineFunction *)a2[4];
            v103 = a4;
            if (a4)
              llvm::MetadataTracking::track((uint64_t)&v103, a4, 2);
            v67 = v65 + v66;
            v32 = *((_QWORD *)v57 + 28);
            if (v32)
              *((_QWORD *)v57 + 28) = *(_QWORD *)v32;
            else
              v32 = sub_1C484358C((uint64_t)v57 + 128, 72, 3);
            v104 = v103;
            if (v103)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v103, v103, (uint64_t)&v104);
              v103 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v32, v57, v67, &v104, 0);
            if (v104)
              llvm::MetadataTracking::untrack((uint64_t)&v104, v104);
            if (v103)
              llvm::MetadataTracking::untrack((uint64_t)&v103, v103);
            v71 = a2[5];
            *(_QWORD *)(v32 + 24) = v71;
            v72 = *(_QWORD *)(v71 + 32);
            v73 = *(unsigned int *)(v32 + 40);
            if ((_DWORD)v73)
            {
              v89 = *(_QWORD *)(v32 + 32);
              v90 = *(_QWORD *)(v72 + 40);
              v91 = 32 * v73;
              do
              {
                if (!*(_BYTE *)v89)
                {
                  v92 = *(unsigned int *)(v89 + 4);
                  if ((int)v92 >= 0)
                    v93 = (uint64_t *)(*(_QWORD *)(v90 + 272) + 8 * v92);
                  else
                    v93 = (uint64_t *)(*(_QWORD *)(v90 + 24) + 16 * (v92 & 0x7FFFFFFF) + 8);
                  v94 = *v93;
                  if (*v93)
                  {
                    v95 = *(_QWORD *)(v94 + 16);
                    *(_QWORD *)(v94 + 16) = v89;
                    *(_QWORD *)(v89 + 16) = v95;
                    if ((*(_BYTE *)(v89 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v89 + 24) = v94;
                    }
                    else
                    {
                      *(_QWORD *)(v89 + 24) = 0;
                      v93 = (uint64_t *)(v95 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v89 + 16) = v89;
                    *(_QWORD *)(v89 + 24) = 0;
                  }
                  *v93 = v89;
                }
                v89 += 32;
                v91 -= 32;
              }
              while (v91);
            }
            v74 = *(_QWORD *)(v72 + 728);
            if (v74)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v74 + 24))(v74, v32);
            v75 = *a3 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v32 = v75 | *(_QWORD *)v32 & 7;
            *(_QWORD *)(v32 + 8) = a3;
            *(_QWORD *)(v75 + 8) = v32;
            *a3 = *a3 & 7 | v32;
            v105 = 0;
            v106 = 0;
            v107 = 0;
            LODWORD(v104) = 0x1000000;
            HIDWORD(v104) = a5;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v57, (const llvm::MachineOperand *)&v104);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v57, (const llvm::MachineOperand *)(*(_QWORD *)(v12 + 32) + 32));
            v76 = *(unsigned __int16 *)(*(_QWORD *)(v12 + 32) + 80);
LABEL_100:
            LODWORD(v104) = 1;
            v105 = 0;
            v106 = v76;
            v64 = (const llvm::MachineOperand *)&v104;
LABEL_101:
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v57, v64);
            return v32;
          }
          if (v23 == a6)
          {
            v68 = a1[1];
            if (*(_BYTE *)(a1[10] + 318))
              v69 = 195168;
            else
              v69 = 195216;
            v57 = (llvm::MachineFunction *)a2[4];
            v103 = a4;
            if (a4)
              llvm::MetadataTracking::track((uint64_t)&v103, a4, 2);
            v70 = v68 + v69;
            v32 = *((_QWORD *)v57 + 28);
            if (v32)
              *((_QWORD *)v57 + 28) = *(_QWORD *)v32;
            else
              v32 = sub_1C484358C((uint64_t)v57 + 128, 72, 3);
            v104 = v103;
            if (v103)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v103, v103, (uint64_t)&v104);
              v103 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v32, v57, v70, &v104, 0);
            if (v104)
              llvm::MetadataTracking::untrack((uint64_t)&v104, v104);
            if (v103)
              llvm::MetadataTracking::untrack((uint64_t)&v103, v103);
            v77 = a2[5];
            *(_QWORD *)(v32 + 24) = v77;
            v78 = *(_QWORD *)(v77 + 32);
            v79 = *(unsigned int *)(v32 + 40);
            if ((_DWORD)v79)
            {
              v96 = *(_QWORD *)(v32 + 32);
              v97 = *(_QWORD *)(v78 + 40);
              v98 = 32 * v79;
              do
              {
                if (!*(_BYTE *)v96)
                {
                  v99 = *(unsigned int *)(v96 + 4);
                  if ((int)v99 >= 0)
                    v100 = (uint64_t *)(*(_QWORD *)(v97 + 272) + 8 * v99);
                  else
                    v100 = (uint64_t *)(*(_QWORD *)(v97 + 24) + 16 * (v99 & 0x7FFFFFFF) + 8);
                  v101 = *v100;
                  if (*v100)
                  {
                    v102 = *(_QWORD *)(v101 + 16);
                    *(_QWORD *)(v101 + 16) = v96;
                    *(_QWORD *)(v96 + 16) = v102;
                    if ((*(_BYTE *)(v96 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v96 + 24) = v101;
                    }
                    else
                    {
                      *(_QWORD *)(v96 + 24) = 0;
                      v100 = (uint64_t *)(v102 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v96 + 16) = v96;
                    *(_QWORD *)(v96 + 24) = 0;
                  }
                  *v100 = v96;
                }
                v96 += 32;
                v98 -= 32;
              }
              while (v98);
            }
            v80 = *(_QWORD *)(v78 + 728);
            if (v80)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v80 + 24))(v80, v32);
            v81 = *a3 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v32 = v81 | *(_QWORD *)v32 & 7;
            *(_QWORD *)(v32 + 8) = a3;
            *(_QWORD *)(v81 + 8) = v32;
            *a3 = *a3 & 7 | v32;
            v105 = 0;
            v106 = 0;
            v107 = 0;
            LODWORD(v104) = 0x1000000;
            HIDWORD(v104) = a5;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v57, (const llvm::MachineOperand *)&v104);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v57, (const llvm::MachineOperand *)(*(_QWORD *)(v12 + 32) + 32));
            v76 = *(uint64_t *)(*(_QWORD *)(v12 + 32) + 80) >> 16;
            goto LABEL_100;
          }
        }
      }
      v34 = *(unsigned int *)(v12 + 40);
      if ((_DWORD)v34)
        break;
LABEL_42:
      v32 = 0;
      if ((unint64_t *)v12 != v7 && v11++ < 0xF)
        continue;
      return v32;
    }
    v35 = 0;
    v36 = *(_QWORD *)(v12 + 32);
    while ((*(_DWORD *)(v36 + 32 * v35) & 0x30000FF) != 0x1000000)
    {
LABEL_41:
      if (++v35 == v34)
        goto LABEL_42;
    }
    v37 = *(_DWORD *)(v36 + 32 * v35 + 4);
    v38 = a1[12];
    v39 = *(unsigned int *)(v38 + 24 * v37 + 16);
    v40 = v39 & 0xF;
    v41 = a1[18];
    v42 = (_WORD *)(v41 + ((v39 >> 3) & 0x1FFFFFFE));
    v43 = *v42 + v40 * v37;
    v44 = *(unsigned int *)(v38 + 24 * a6 + 16);
    v45 = v44 & 0xF;
    v46 = (_WORD *)(v41 + ((v44 >> 3) & 0x1FFFFFFE));
    v48 = *v46;
    v47 = v46 + 1;
    v49 = v48 + v45 * a6;
LABEL_37:
    ++v42;
    v50 = v47;
    v51 = v49;
    while (v43 != v51)
    {
      v52 = *v50++;
      v51 += v52;
      if (!v52)
      {
        v43 += *v42;
        if (*v42)
          goto LABEL_37;
        goto LABEL_41;
      }
    }
  }
  return 0;
}

llvm::MachineFunction *sub_1C4886024(_QWORD *a1, _QWORD *a2, unint64_t *a3, unsigned __int8 **a4, int a5, unsigned int a6, int a7)
{
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  llvm::MachineFunction *v18;
  llvm::MachineFunction *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::MachineFunction *v35;
  llvm::MachineFunction *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  llvm::MachineFunction **v45;
  llvm::MachineInstr *v46;
  llvm::MachineFunction *v47;
  llvm::MachineFunction **v48;
  llvm::MachineInstr *v49;
  llvm::MachineFunction *v50;
  llvm::MachineFunction **v51;
  llvm::MachineInstr *v52;
  llvm::MachineFunction *v53;
  llvm::MachineFunction **v54;
  llvm::MachineInstr *v55;
  llvm::MachineFunction *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::MachineFunction *v64[2];
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v14 = *a4;
  v65 = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&v65, v14, 2);
    v15 = v65;
  }
  else
  {
    v15 = 0;
  }
  v16 = sub_1C48857EC(a1, a2, a3, v15, a5, a6, 1);
  if (v65)
    llvm::MetadataTracking::untrack((uint64_t)&v65, v65);
  if (!v16)
  {
    if (*(_BYTE *)(a1[10] + 318))
    {
      v34 = a1[1];
      v35 = (llvm::MachineFunction *)a2[4];
      v36 = (llvm::MachineFunction *)*a4;
      v64[0] = v36;
      if (v36)
        llvm::MetadataTracking::track((uint64_t)v64, (unsigned __int8 *)v36, 2);
      v37 = v34 + 90768;
      v38 = *((_QWORD *)v35 + 28);
      if (v38)
        *((_QWORD *)v35 + 28) = *(_QWORD *)v38;
      else
        v38 = sub_1C484358C((uint64_t)v35 + 128, 72, 3);
      v66 = (unsigned __int8 *)v64[0];
      if (v64[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v64, (unsigned __int8 *)v64[0], (uint64_t)&v66);
        v64[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v38, v35, v37, &v66, 0);
      if (v66)
        llvm::MetadataTracking::untrack((uint64_t)&v66, v66);
      if (v64[0])
        llvm::MetadataTracking::untrack((uint64_t)v64, (unsigned __int8 *)v64[0]);
      v39 = a2[5];
      *(_QWORD *)(v38 + 24) = v39;
      v40 = *(_QWORD *)(v39 + 32);
      v41 = *(unsigned int *)(v38 + 40);
      if ((_DWORD)v41)
      {
        v57 = *(_QWORD *)(v38 + 32);
        v58 = *(_QWORD *)(v40 + 40);
        v59 = 32 * v41;
        do
        {
          if (!*(_BYTE *)v57)
          {
            v60 = *(unsigned int *)(v57 + 4);
            if ((int)v60 >= 0)
              v61 = (uint64_t *)(*(_QWORD *)(v58 + 272) + 8 * v60);
            else
              v61 = (uint64_t *)(*(_QWORD *)(v58 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
            v62 = *v61;
            if (*v61)
            {
              v63 = *(_QWORD *)(v62 + 16);
              *(_QWORD *)(v62 + 16) = v57;
              *(_QWORD *)(v57 + 16) = v63;
              if ((*(_BYTE *)(v57 + 3) & 1) != 0)
              {
                *(_QWORD *)(v57 + 24) = v62;
              }
              else
              {
                *(_QWORD *)(v57 + 24) = 0;
                v61 = (uint64_t *)(v63 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v57 + 16) = v57;
              *(_QWORD *)(v57 + 24) = 0;
            }
            *v61 = v57;
          }
          v57 += 32;
          v59 -= 32;
        }
        while (v59);
      }
      v42 = *(_QWORD *)(v40 + 728);
      if (v42)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v42 + 24))(v42, v38);
      v43 = *a3 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v38 = v43 | *(_QWORD *)v38 & 7;
      *(_QWORD *)(v38 + 8) = a3;
      *(_QWORD *)(v43 + 8) = v38;
      *a3 = *a3 & 7 | v38;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      LODWORD(v66) = 0x1000000;
      HIDWORD(v66) = a5;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v35, (const llvm::MachineOperand *)&v66);
      v64[0] = v35;
      v64[1] = (llvm::MachineFunction *)v38;
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v35, (const llvm::MachineOperand *)&v66);
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v35, (const llvm::MachineOperand *)&v66);
      if (a7)
        v44 = 8;
      else
        v44 = 0;
      v45 = sub_1C47BF4F4(v64, a6, v44, 0);
      v46 = v45[1];
      v47 = *v45;
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand(v46, v47, (const llvm::MachineOperand *)&v66);
      v48 = sub_1C47BF4F4(v45, a6, v44, 0);
      v49 = v48[1];
      v50 = *v48;
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand(v49, v50, (const llvm::MachineOperand *)&v66);
      v51 = sub_1C47BF4F4(v48, a6, v44, 0);
      v52 = v51[1];
      v53 = *v51;
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand(v52, v53, (const llvm::MachineOperand *)&v66);
      v54 = sub_1C47BF4F4(v51, a6, v44, 0);
      v55 = v54[1];
      v56 = *v54;
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand(v55, v56, (const llvm::MachineOperand *)&v66);
      return v54[1];
    }
    else
    {
      v17 = a1[1];
      v18 = (llvm::MachineFunction *)a2[4];
      v19 = (llvm::MachineFunction *)*a4;
      v64[0] = v19;
      if (v19)
        llvm::MetadataTracking::track((uint64_t)v64, (unsigned __int8 *)v19, 2);
      v20 = v17 + 35424;
      v16 = *((_QWORD *)v18 + 28);
      if (v16)
        *((_QWORD *)v18 + 28) = *(_QWORD *)v16;
      else
        v16 = sub_1C484358C((uint64_t)v18 + 128, 72, 3);
      v66 = (unsigned __int8 *)v64[0];
      if (v64[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v64, (unsigned __int8 *)v64[0], (uint64_t)&v66);
        v64[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v16, v18, v20, &v66, 0);
      if (v66)
        llvm::MetadataTracking::untrack((uint64_t)&v66, v66);
      if (v64[0])
        llvm::MetadataTracking::untrack((uint64_t)v64, (unsigned __int8 *)v64[0]);
      v21 = a2[5];
      *(_QWORD *)(v16 + 24) = v21;
      v22 = *(_QWORD *)(v21 + 32);
      v23 = *(unsigned int *)(v16 + 40);
      if ((_DWORD)v23)
      {
        v27 = *(_QWORD *)(v16 + 32);
        v28 = *(_QWORD *)(v22 + 40);
        v29 = 32 * v23;
        do
        {
          if (!*(_BYTE *)v27)
          {
            v30 = *(unsigned int *)(v27 + 4);
            if ((int)v30 >= 0)
              v31 = (uint64_t *)(*(_QWORD *)(v28 + 272) + 8 * v30);
            else
              v31 = (uint64_t *)(*(_QWORD *)(v28 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
            v32 = *v31;
            if (*v31)
            {
              v33 = *(_QWORD *)(v32 + 16);
              *(_QWORD *)(v32 + 16) = v27;
              *(_QWORD *)(v27 + 16) = v33;
              if ((*(_BYTE *)(v27 + 3) & 1) != 0)
              {
                *(_QWORD *)(v27 + 24) = v32;
              }
              else
              {
                *(_QWORD *)(v27 + 24) = 0;
                v31 = (uint64_t *)(v33 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v27 + 16) = v27;
              *(_QWORD *)(v27 + 24) = 0;
            }
            *v31 = v27;
          }
          v27 += 32;
          v29 -= 32;
        }
        while (v29);
      }
      v24 = *(_QWORD *)(v22 + 728);
      if (v24)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v24 + 24))(v24, v16);
      v25 = *a3 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v16 = v25 | *(_QWORD *)v16 & 7;
      *(_QWORD *)(v16 + 8) = a3;
      *(_QWORD *)(v25 + 8) = v16;
      *a3 = *a3 & 7 | v16;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      LODWORD(v66) = 0x1000000;
      HIDWORD(v66) = a5;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v66);
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v66);
      v67 = 0;
      v68 = 0;
      LODWORD(v66) = 0;
      HIDWORD(v66) = a6;
      v69 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v66);
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v66);
    }
  }
  return (llvm::MachineFunction *)v16;
}

llvm::MachineFunction *sub_1C488659C(_QWORD *a1, _QWORD *a2, unint64_t *a3, unsigned __int8 **a4, int a5, unsigned int a6, int a7)
{
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  llvm::MachineFunction *v18;
  llvm::MachineFunction *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::MachineFunction *v35;
  llvm::MachineFunction *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  llvm::MachineFunction **v45;
  llvm::MachineInstr *v46;
  llvm::MachineFunction *v47;
  llvm::MachineFunction **v48;
  llvm::MachineInstr *v49;
  llvm::MachineFunction *v50;
  llvm::MachineFunction **v51;
  llvm::MachineInstr *v52;
  llvm::MachineFunction *v53;
  llvm::MachineFunction **v54;
  llvm::MachineInstr *v55;
  llvm::MachineFunction *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::MachineFunction *v64[2];
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v14 = *a4;
  v65 = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&v65, v14, 2);
    v15 = v65;
  }
  else
  {
    v15 = 0;
  }
  v16 = sub_1C48857EC(a1, a2, a3, v15, a5, a6, 0);
  if (v65)
    llvm::MetadataTracking::untrack((uint64_t)&v65, v65);
  if (!v16)
  {
    if (*(_BYTE *)(a1[10] + 318))
    {
      v34 = a1[1];
      v35 = (llvm::MachineFunction *)a2[4];
      v36 = (llvm::MachineFunction *)*a4;
      v64[0] = v36;
      if (v36)
        llvm::MetadataTracking::track((uint64_t)v64, (unsigned __int8 *)v36, 2);
      v37 = v34 + 49056;
      v38 = *((_QWORD *)v35 + 28);
      if (v38)
        *((_QWORD *)v35 + 28) = *(_QWORD *)v38;
      else
        v38 = sub_1C484358C((uint64_t)v35 + 128, 72, 3);
      v66 = (unsigned __int8 *)v64[0];
      if (v64[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v64, (unsigned __int8 *)v64[0], (uint64_t)&v66);
        v64[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v38, v35, v37, &v66, 0);
      if (v66)
        llvm::MetadataTracking::untrack((uint64_t)&v66, v66);
      if (v64[0])
        llvm::MetadataTracking::untrack((uint64_t)v64, (unsigned __int8 *)v64[0]);
      v39 = a2[5];
      *(_QWORD *)(v38 + 24) = v39;
      v40 = *(_QWORD *)(v39 + 32);
      v41 = *(unsigned int *)(v38 + 40);
      if ((_DWORD)v41)
      {
        v57 = *(_QWORD *)(v38 + 32);
        v58 = *(_QWORD *)(v40 + 40);
        v59 = 32 * v41;
        do
        {
          if (!*(_BYTE *)v57)
          {
            v60 = *(unsigned int *)(v57 + 4);
            if ((int)v60 >= 0)
              v61 = (uint64_t *)(*(_QWORD *)(v58 + 272) + 8 * v60);
            else
              v61 = (uint64_t *)(*(_QWORD *)(v58 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
            v62 = *v61;
            if (*v61)
            {
              v63 = *(_QWORD *)(v62 + 16);
              *(_QWORD *)(v62 + 16) = v57;
              *(_QWORD *)(v57 + 16) = v63;
              if ((*(_BYTE *)(v57 + 3) & 1) != 0)
              {
                *(_QWORD *)(v57 + 24) = v62;
              }
              else
              {
                *(_QWORD *)(v57 + 24) = 0;
                v61 = (uint64_t *)(v63 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v57 + 16) = v57;
              *(_QWORD *)(v57 + 24) = 0;
            }
            *v61 = v57;
          }
          v57 += 32;
          v59 -= 32;
        }
        while (v59);
      }
      v42 = *(_QWORD *)(v40 + 728);
      if (v42)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v42 + 24))(v42, v38);
      v43 = *a3 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v38 = v43 | *(_QWORD *)v38 & 7;
      *(_QWORD *)(v38 + 8) = a3;
      *(_QWORD *)(v43 + 8) = v38;
      *a3 = *a3 & 7 | v38;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      LODWORD(v66) = 0x1000000;
      HIDWORD(v66) = a5;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v35, (const llvm::MachineOperand *)&v66);
      v64[0] = v35;
      v64[1] = (llvm::MachineFunction *)v38;
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v35, (const llvm::MachineOperand *)&v66);
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v35, (const llvm::MachineOperand *)&v66);
      if (a7)
        v44 = 8;
      else
        v44 = 0;
      v45 = sub_1C47BF4F4(v64, a6, v44, 0);
      v46 = v45[1];
      v47 = *v45;
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand(v46, v47, (const llvm::MachineOperand *)&v66);
      v48 = sub_1C47BF4F4(v45, a6, v44, 0);
      v49 = v48[1];
      v50 = *v48;
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand(v49, v50, (const llvm::MachineOperand *)&v66);
      v51 = sub_1C47BF4F4(v48, a6, v44, 0);
      v52 = v51[1];
      v53 = *v51;
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand(v52, v53, (const llvm::MachineOperand *)&v66);
      v54 = sub_1C47BF4F4(v51, a6, v44, 0);
      v55 = v54[1];
      v56 = *v54;
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand(v55, v56, (const llvm::MachineOperand *)&v66);
      return v54[1];
    }
    else
    {
      v17 = a1[1];
      v18 = (llvm::MachineFunction *)a2[4];
      v19 = (llvm::MachineFunction *)*a4;
      v64[0] = v19;
      if (v19)
        llvm::MetadataTracking::track((uint64_t)v64, (unsigned __int8 *)v19, 2);
      v20 = v17 + 35616;
      v16 = *((_QWORD *)v18 + 28);
      if (v16)
        *((_QWORD *)v18 + 28) = *(_QWORD *)v16;
      else
        v16 = sub_1C484358C((uint64_t)v18 + 128, 72, 3);
      v66 = (unsigned __int8 *)v64[0];
      if (v64[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v64, (unsigned __int8 *)v64[0], (uint64_t)&v66);
        v64[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v16, v18, v20, &v66, 0);
      if (v66)
        llvm::MetadataTracking::untrack((uint64_t)&v66, v66);
      if (v64[0])
        llvm::MetadataTracking::untrack((uint64_t)v64, (unsigned __int8 *)v64[0]);
      v21 = a2[5];
      *(_QWORD *)(v16 + 24) = v21;
      v22 = *(_QWORD *)(v21 + 32);
      v23 = *(unsigned int *)(v16 + 40);
      if ((_DWORD)v23)
      {
        v27 = *(_QWORD *)(v16 + 32);
        v28 = *(_QWORD *)(v22 + 40);
        v29 = 32 * v23;
        do
        {
          if (!*(_BYTE *)v27)
          {
            v30 = *(unsigned int *)(v27 + 4);
            if ((int)v30 >= 0)
              v31 = (uint64_t *)(*(_QWORD *)(v28 + 272) + 8 * v30);
            else
              v31 = (uint64_t *)(*(_QWORD *)(v28 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
            v32 = *v31;
            if (*v31)
            {
              v33 = *(_QWORD *)(v32 + 16);
              *(_QWORD *)(v32 + 16) = v27;
              *(_QWORD *)(v27 + 16) = v33;
              if ((*(_BYTE *)(v27 + 3) & 1) != 0)
              {
                *(_QWORD *)(v27 + 24) = v32;
              }
              else
              {
                *(_QWORD *)(v27 + 24) = 0;
                v31 = (uint64_t *)(v33 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v27 + 16) = v27;
              *(_QWORD *)(v27 + 24) = 0;
            }
            *v31 = v27;
          }
          v27 += 32;
          v29 -= 32;
        }
        while (v29);
      }
      v24 = *(_QWORD *)(v22 + 728);
      if (v24)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v24 + 24))(v24, v16);
      v25 = *a3 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v16 = v25 | *(_QWORD *)v16 & 7;
      *(_QWORD *)(v16 + 8) = a3;
      *(_QWORD *)(v25 + 8) = v16;
      *a3 = *a3 & 7 | v16;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      LODWORD(v66) = 0x1000000;
      HIDWORD(v66) = a5;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v66);
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v66);
      v67 = 0;
      v68 = 0;
      LODWORD(v66) = 0;
      HIDWORD(v66) = a6;
      v69 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v66);
      LODWORD(v66) = 1;
      v67 = 0;
      v68 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v18, (const llvm::MachineOperand *)&v66);
    }
  }
  return (llvm::MachineFunction *)v16;
}

void sub_1C4886B18(_QWORD *a1, _QWORD *a2, unint64_t *a3, unsigned __int8 **a4, unsigned int a5, unsigned int a6, int a7)
{
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  uint64_t v19;
  llvm::MachineFunction *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  int v35;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned __int16 v48;
  unsigned __int16 *v49;
  unsigned __int16 *v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 v55;
  llvm::MachineFunction *v56;
  unsigned __int8 *v57;
  unsigned __int8 **v58;
  int v59;
  unsigned int v60;
  _BOOL4 v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  llvm::MachineFunction *v71;
  llvm::MachineInstr *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v11 = a5 >> 3;
  if (a5 - 1 > 0x3FFFFFFE)
    goto LABEL_22;
  if (a5 > 0xB7)
  {
    if (a5 > 0x1BF)
      goto LABEL_22;
    v14 = v11;
    v12 = 1 << (a5 & 7);
  }
  else
  {
    v12 = 1 << (a5 & 7);
    v13 = (v12 & byte_1C697A2C8[v11]) == 0 || a6 - 1 > 0x3FFFFFFE;
    if (v13 || a6 > 0xB7)
    {
      v14 = a5 >> 3;
    }
    else
    {
      v14 = a5 >> 3;
      if (((byte_1C697A2C8[a6 >> 3] >> (a6 & 7)) & 1) != 0)
      {
        v15 = *a4;
        v76 = v15;
        if (v15)
          llvm::MetadataTracking::track((uint64_t)&v76, v15, 2);
        sub_1C4886024(a1, a2, a3, &v76, a5, a6, a7);
        v16 = v76;
        if (v76)
        {
          v17 = &v76;
LABEL_21:
          llvm::MetadataTracking::untrack((uint64_t)v17, v16);
          return;
        }
        return;
      }
    }
  }
  if ((v12 & byte_1C6979862[v14]) == 0)
  {
LABEL_22:
    v19 = 0;
    v20 = (llvm::MachineFunction *)a2[4];
    v67 = *((_QWORD *)v20 + 5);
    v21 = (unint64_t)a6 >> 3;
    while (1)
    {
      if (a5 - 1 <= 0x3FFFFFFE)
      {
        v22 = (uint64_t)*(&off_1E7FA05C0)[v19];
        v23 = *(unsigned __int16 *)(v22 + 22);
        if (v11 < v23)
        {
          v24 = *(_QWORD *)(v22 + 8);
          v25 = ((1 << (a5 & 7)) & *(unsigned __int8 *)(v24 + v11)) == 0 || a6 - 1 > 0x3FFFFFFE;
          v26 = v25 || v21 >= v23;
          if (!v26 && ((1 << (a6 & 7)) & *(unsigned __int8 *)(v24 + v21)) != 0)
            break;
        }
      }
      v19 += 3;
      if (v19 == 42)
        return;
    }
    v66 = HIDWORD((&off_1E7FA05C0)[v19 + 1]);
    v28 = a1 + 12;
    v29 = a1[12];
    v30 = a1[18];
    v31 = *(unsigned int *)(v29 + 24 * a5 + 4);
    v32 = *(unsigned __int16 *)(v30 + 2 * v31);
    if (!*(_WORD *)(v30 + 2 * v31))
      goto LABEL_41;
    LOWORD(v32) = v32 + a5;
    v33 = (unsigned __int16 *)(a1[22] + 2 * *(unsigned int *)(v29 + 24 * a5 + 12));
    v34 = (unsigned __int16 *)(v30 + 2 * v31 + 2);
    while (v66 != *v33)
    {
      v35 = *v34++;
      LOWORD(v32) = v35 + v32;
      ++v33;
      if (!v35)
      {
        v32 = 0;
        goto LABEL_41;
      }
    }
    v32 = (unsigned __int16)v32;
LABEL_41:
    if (v32 == a6)
      v61 = 1;
    else
      v61 = v32 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v28, a6, v32);
    v37 = 0;
    v63 = LODWORD((&off_1E7FA05C0)[v19 + 2]) - v66;
    v64 = (int)(&off_1E7FA05C0)[v19 + 2];
    v62 = LOBYTE((&off_1E7FA05C0)[v19 + 1]);
    v65 = a7;
    while (1)
    {
      v38 = v64 - v37;
      if (!v61)
        v38 = v37 + v66;
      v39 = a1[12];
      v40 = a1[18];
      v41 = *(unsigned int *)(v39 + 24 * a6 + 4);
      if (*(_WORD *)(v40 + 2 * v41))
      {
        v42 = *(_WORD *)(v40 + 2 * v41) + a6;
        v43 = (unsigned __int16 *)(a1[22] + 2 * *(unsigned int *)(v39 + 24 * a6 + 12));
        v44 = (unsigned __int16 *)(v40 + 2 * v41 + 2);
        while (v38 != *v43)
        {
          v45 = *v44++;
          v42 += v45;
          ++v43;
          if (!v45)
            goto LABEL_53;
        }
        v46 = v42;
      }
      else
      {
LABEL_53:
        v46 = 0;
      }
      v47 = *(unsigned int *)(v39 + 24 * a5 + 4);
      if (*(_WORD *)(v40 + 2 * v47))
      {
        v48 = *(_WORD *)(v40 + 2 * v47) + a5;
        v49 = (unsigned __int16 *)(a1[22] + 2 * *(unsigned int *)(v39 + 24 * a5 + 12));
        v50 = (unsigned __int16 *)(v40 + 2 * v47 + 2);
        while (v38 != *v49)
        {
          v51 = *v50++;
          v48 += v51;
          ++v49;
          if (!v51)
            goto LABEL_59;
        }
        v52 = v48;
      }
      else
      {
LABEL_59:
        v52 = 0;
      }
      v53 = *a4;
      if (v62)
      {
        v74 = *a4;
        if (v53)
          llvm::MetadataTracking::track((uint64_t)&v74, v53, 2);
        v54 = v52;
        v55 = v65;
        v56 = sub_1C4886024(a1, a2, a3, &v74, v54, v46, v65);
        v57 = v74;
        if (!v74)
          goto LABEL_71;
        v58 = &v74;
      }
      else
      {
        v73 = *a4;
        if (v53)
          llvm::MetadataTracking::track((uint64_t)&v73, v53, 2);
        v59 = v52;
        v55 = v65;
        v56 = sub_1C488659C(a1, a2, a3, &v73, v59, v46, v65);
        v57 = v73;
        if (!v73)
          goto LABEL_71;
        v58 = &v73;
      }
      llvm::MetadataTracking::untrack((uint64_t)v58, v57);
LABEL_71:
      v71 = v20;
      v72 = v56;
      if (*(_BYTE *)(v67 + 16))
      {
        if (((v37 != 0) & v55) != 0)
          v60 = 36;
        else
          v60 = 4;
        sub_1C47BF4F4(&v71, a6, v60, 0);
      }
      else
      {
        v79 = 0;
        v80 = 0;
        v81 = 0;
        v77 = 50331648;
        v78 = a5;
        llvm::MachineInstr::addOperand(v56, v20, (const llvm::MachineOperand *)&v77);
        if (v37)
        {
          v79 = 0;
          v80 = 0;
          v81 = 0;
          v77 = 0x2000000;
          v78 = a5;
          llvm::MachineInstr::addOperand(v72, v71, (const llvm::MachineOperand *)&v77);
        }
      }
      if (++v37 > v63)
        return;
    }
  }
  v18 = *a4;
  v75 = v18;
  if (v18)
    llvm::MetadataTracking::track((uint64_t)&v75, v18, 2);
  sub_1C488659C(a1, a2, a3, &v75, a5, a6, a7);
  v16 = v75;
  if (v75)
  {
    v17 = &v75;
    goto LABEL_21;
  }
}

uint64_t sub_1C4887024(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v4;
  uint64_t v5;

  v4 = **(unsigned __int16 **)(a2 + 16) - 321;
  if (v4 > 0xD)
    return 0;
  *a4 = dword_1C646AE18[(__int16)v4];
  v5 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)v5 || *(_BYTE *)(v5 + 96) != 5 || *(_BYTE *)(v5 + 128) != 1 || *(_QWORD *)(v5 + 144))
    return 0;
  *a3 = *(_DWORD *)(v5 + 112);
  return *(unsigned int *)(v5 + 4);
}

uint64_t sub_1C4887090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;

  v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 72))(a1, a2, a3, &v4);
}

uint64_t sub_1C48870BC(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v4;
  uint64_t v5;

  v4 = **(unsigned __int16 **)(a2 + 16) - 342;
  if (v4 > 0xD)
    return 0;
  *a4 = dword_1C646AE18[(__int16)v4];
  v5 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v5 + 64) || *(_BYTE *)(v5 + 96) != 5 || *(_BYTE *)(v5 + 128) != 1 || *(_QWORD *)(v5 + 144))
    return 0;
  *a3 = *(_DWORD *)(v5 + 112);
  return *(unsigned int *)(v5 + 68);
}

uint64_t sub_1C4887128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;

  v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, a3, &v4);
}

void sub_1C4887154(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *FixedStack;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  llvm::MachineFunction *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  llvm::MachineFunction **v46;
  llvm::MachineInstr *v47;
  llvm::MachineFunction *v48;
  llvm::MachineInstr *v49;
  llvm::MachineFunction *v50;
  llvm::MachineInstr *v51;
  llvm::MachineFunction *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  llvm::MachineFunction *v63[2];
  llvm::MachineFunction *v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;

  v64 = 0;
  if (a2 + 48 != a3 && (llvm::MachineFunction **)(a3 + 56) != &v64)
  {
    v14 = *(unsigned __int8 **)(a3 + 56);
    v64 = (llvm::MachineFunction *)v14;
    if (v14)
      llvm::MetadataTracking::track((uint64_t)&v64, v14, 2);
  }
  v15 = *(unsigned __int16 *)(*(_QWORD *)a7 + 24);
  v16 = v15 >> 5;
  v17 = dword_1C660B7F8[v15 >> 5];
  v18 = 1 << v15;
  v62 = a4;
  v61 = a5;
  if ((v18 & v17) != 0)
  {
    v19 = 344;
  }
  else if ((dword_1C660BD68[v16] & v18) != 0)
  {
    v19 = 349;
  }
  else if ((dword_1C660C068[v16] & v18) != 0)
  {
    v19 = 351;
  }
  else if ((dword_1C660C330[v16] & v18) != 0)
  {
    v19 = 352;
  }
  else if ((dword_1C660C5D8[v16] & v18) != 0)
  {
    v19 = 354;
  }
  else if ((dword_1C660C990[v16] & v18) != 0)
  {
    v19 = 355;
  }
  else if ((dword_1C660CAA8[v16] & v18) != 0)
  {
    v19 = 342;
  }
  else if ((dword_1C660CCC8[v16] & v18) != 0)
  {
    v19 = 343;
  }
  else if ((dword_1C660CD68[v16] & v18) != 0)
  {
    v19 = 345;
  }
  else if ((dword_1C660CDF8[v16] & v18) != 0)
  {
    v19 = 346;
  }
  else if ((dword_1C660CE78[v16] & v18) != 0)
  {
    v19 = 347;
  }
  else if ((dword_1C660CEE8[v16] & v18) != 0)
  {
    v19 = 348;
  }
  else if ((dword_1C660CF38[v16] & v18) != 0)
  {
    v19 = 350;
  }
  else
  {
    v19 = 0;
  }
  v20 = *(_QWORD *)(a2 + 32);
  v21 = *(_QWORD *)(v20 + 56);
  FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v20 + 432), a6);
  v23 = (unint64_t)FixedStack | 4;
  if (FixedStack)
    v24 = *((_DWORD *)FixedStack + 3);
  else
    v24 = 0;
  v60 = a6;
  v25 = *(_QWORD *)(v21 + 8) + 40 * (*(_DWORD *)(v21 + 32) + a6);
  v26 = *(_QWORD *)(v25 + 8);
  v27 = *(_BYTE *)(v25 + 16);
  v28 = sub_1C484358C(v20 + 128, 80, 3);
  *(_QWORD *)v28 = v23;
  *(_QWORD *)(v28 + 8) = 0;
  *(_DWORD *)(v28 + 16) = v24;
  *(_BYTE *)(v28 + 20) = 0;
  *(_QWORD *)(v28 + 24) = ((unint64_t)(v26 & 0x1FFFFFFF) << 6) | 1;
  *(_WORD *)(v28 + 32) = 2;
  *(_BYTE *)(v28 + 34) = v27;
  *(_OWORD *)(v28 + 40) = 0u;
  *(_OWORD *)(v28 + 56) = 0u;
  *(_QWORD *)(v28 + 72) = 0;
  *(_WORD *)(v28 + 36) = 1;
  v29 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v29 + 371))
  {
    v31 = 0;
  }
  else
  {
    v30 = *(_QWORD *)v20;
    LODWORD(v65) = 0;
    if (sub_1C4979B6C(v29, v30, "MemoryWriteCacheCtl", (int *)&v65))
      v31 = v65;
    else
      v31 = 0;
    v29 = *(_QWORD *)(a1 + 80);
  }
  v32 = *(_QWORD *)v20;
  LODWORD(v65) = 0;
  v33 = sub_1C4979B6C(v29, v32, "MemoryWriteL2Pers", (int *)&v65);
  v34 = v65;
  v35 = *(_QWORD *)(a1 + 8);
  v36 = *(llvm::MachineFunction **)(a2 + 32);
  v63[0] = v64;
  if (v64)
    llvm::MetadataTracking::track((uint64_t)v63, (unsigned __int8 *)v64, 2);
  v37 = v35 + 48 * v19;
  v38 = *((_QWORD *)v36 + 28);
  if (v38)
    *((_QWORD *)v36 + 28) = *(_QWORD *)v38;
  else
    v38 = sub_1C484358C((uint64_t)v36 + 128, 72, 3);
  v65 = (unsigned __int8 *)v63[0];
  if (v63[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v63, (unsigned __int8 *)v63[0], (uint64_t)&v65);
    v63[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v38, v36, v37, &v65, 0);
  if (v65)
    llvm::MetadataTracking::untrack((uint64_t)&v65, v65);
  if (v63[0])
    llvm::MetadataTracking::untrack((uint64_t)v63, (unsigned __int8 *)v63[0]);
  v39 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v38 + 24) = v39;
  v40 = *(_QWORD *)(v39 + 32);
  v41 = *(unsigned int *)(v38 + 40);
  if ((_DWORD)v41)
  {
    v53 = *(_QWORD *)(v38 + 32);
    v54 = *(_QWORD *)(v40 + 40);
    v55 = 32 * v41;
    do
    {
      if (!*(_BYTE *)v53)
      {
        v56 = *(unsigned int *)(v53 + 4);
        if ((int)v56 >= 0)
          v57 = (uint64_t *)(*(_QWORD *)(v54 + 272) + 8 * v56);
        else
          v57 = (uint64_t *)(*(_QWORD *)(v54 + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
        v58 = *v57;
        if (*v57)
        {
          v59 = *(_QWORD *)(v58 + 16);
          *(_QWORD *)(v58 + 16) = v53;
          *(_QWORD *)(v53 + 16) = v59;
          if ((*(_BYTE *)(v53 + 3) & 1) != 0)
          {
            *(_QWORD *)(v53 + 24) = v58;
          }
          else
          {
            *(_QWORD *)(v53 + 24) = 0;
            v57 = (uint64_t *)(v59 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v53 + 16) = v53;
          *(_QWORD *)(v53 + 24) = 0;
        }
        *v57 = v53;
      }
      v53 += 32;
      v55 -= 32;
    }
    while (v55);
  }
  v42 = *(_QWORD *)(v40 + 728);
  if (v42)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v42 + 24))(v42, v38);
  v43 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v38 = v43 | *(_QWORD *)v38 & 7;
  *(_QWORD *)(v38 + 8) = a3;
  *(_QWORD *)(v43 + 8) = v38;
  *(_QWORD *)a3 = *(_QWORD *)a3 & 7 | v38;
  v63[0] = v36;
  v63[1] = (llvm::MachineFunction *)v38;
  LODWORD(v65) = 1;
  v66 = 0;
  v67 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v36, (const llvm::MachineOperand *)&v65);
  v44 = 4 * v34;
  if (!v33)
    v44 = 4;
  if (v31 == 3)
    v44 = 4;
  LODWORD(v65) = 1;
  v66 = 0;
  v67 = v44 | v31;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v36, (const llvm::MachineOperand *)&v65);
  if (v61)
    v45 = 8;
  else
    v45 = 0;
  v46 = sub_1C47BF4F4(v63, v62, v45, 0);
  v47 = v46[1];
  v48 = *v46;
  LODWORD(v65) = 5;
  v66 = 0;
  LODWORD(v67) = v60;
  llvm::MachineInstr::addOperand(v47, v48, (const llvm::MachineOperand *)&v65);
  v50 = *v46;
  v49 = v46[1];
  LODWORD(v65) = 1;
  v66 = 0;
  v67 = 0;
  llvm::MachineInstr::addOperand(v49, v50, (const llvm::MachineOperand *)&v65);
  v52 = *v46;
  v51 = v46[1];
  LODWORD(v65) = 1;
  v66 = 0;
  v67 = 0;
  llvm::MachineInstr::addOperand(v51, v52, (const llvm::MachineOperand *)&v65);
  llvm::MachineInstr::addMemOperand(v46[1], *v46, (llvm::MachineMemOperand *)v28);
  if (v64)
    llvm::MetadataTracking::untrack((uint64_t)&v64, (unsigned __int8 *)v64);
}

void sub_1C48876D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *FixedStack;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  llvm::MachineFunction *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v52 = 0;
  if (a2 + 48 != a3 && (unsigned __int8 **)(a3 + 56) != &v52)
  {
    v12 = *(unsigned __int8 **)(a3 + 56);
    v52 = v12;
    if (v12)
      llvm::MetadataTracking::track((uint64_t)&v52, v12, 2);
  }
  v13 = *(unsigned __int16 *)(*(_QWORD *)a6 + 24);
  v14 = v13 >> 5;
  v15 = dword_1C660B7F8[v13 >> 5];
  v16 = 1 << v13;
  v50 = a4;
  if ((v16 & v15) != 0)
  {
    v17 = 323;
  }
  else if ((dword_1C660BD68[v14] & v16) != 0)
  {
    v17 = 328;
  }
  else if ((dword_1C660C068[v14] & v16) != 0)
  {
    v17 = 330;
  }
  else if ((dword_1C660C330[v14] & v16) != 0)
  {
    v17 = 331;
  }
  else if ((dword_1C660C5D8[v14] & v16) != 0)
  {
    v17 = 333;
  }
  else if ((dword_1C660C990[v14] & v16) != 0)
  {
    v17 = 334;
  }
  else if ((dword_1C660CAA8[v14] & v16) != 0)
  {
    v17 = 321;
  }
  else if ((dword_1C660CCC8[v14] & v16) != 0)
  {
    v17 = 322;
  }
  else if ((dword_1C660CD68[v14] & v16) != 0)
  {
    v17 = 324;
  }
  else if ((dword_1C660CDF8[v14] & v16) != 0)
  {
    v17 = 325;
  }
  else if ((dword_1C660CE78[v14] & v16) != 0)
  {
    v17 = 326;
  }
  else if ((dword_1C660CEE8[v14] & v16) != 0)
  {
    v17 = 327;
  }
  else if ((dword_1C660CF38[v14] & v16) != 0)
  {
    v17 = 329;
  }
  else
  {
    v17 = 0;
  }
  v18 = *(_QWORD *)(a2 + 32);
  v19 = *(_QWORD *)(v18 + 56);
  FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v18 + 432), a5);
  v21 = (unint64_t)FixedStack | 4;
  if (FixedStack)
    v22 = *((_DWORD *)FixedStack + 3);
  else
    v22 = 0;
  v51 = a5;
  v23 = *(_QWORD *)(v19 + 8) + 40 * (*(_DWORD *)(v19 + 32) + a5);
  v24 = *(_QWORD *)(v23 + 8);
  v25 = *(_BYTE *)(v23 + 16);
  v26 = sub_1C484358C(v18 + 128, 80, 3);
  *(_QWORD *)v26 = v21;
  *(_QWORD *)(v26 + 8) = 0;
  *(_DWORD *)(v26 + 16) = v22;
  *(_BYTE *)(v26 + 20) = 0;
  *(_QWORD *)(v26 + 24) = ((unint64_t)(v24 & 0x1FFFFFFF) << 6) | 1;
  *(_WORD *)(v26 + 32) = 1;
  *(_BYTE *)(v26 + 34) = v25;
  *(_OWORD *)(v26 + 40) = 0u;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_QWORD *)(v26 + 72) = 0;
  *(_WORD *)(v26 + 36) = 1;
  v27 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v27 + 371))
  {
    v29 = 0;
  }
  else
  {
    v28 = *(_QWORD *)v18;
    LODWORD(v54) = 0;
    if (sub_1C4979B6C(v27, v28, "MemoryWriteCacheCtl", (int *)&v54))
      v29 = v54;
    else
      v29 = 0;
    v27 = *(_QWORD *)(a1 + 80);
  }
  v30 = *(_QWORD *)v18;
  LODWORD(v54) = 0;
  v31 = sub_1C4979B6C(v27, v30, "MemoryWriteL2Pers", (int *)&v54);
  v32 = v54;
  v33 = *(_QWORD *)(a1 + 8);
  v34 = *(llvm::MachineFunction **)(a2 + 32);
  v53 = v52;
  if (v52)
    llvm::MetadataTracking::track((uint64_t)&v53, v52, 2);
  v35 = v33 + 48 * v17;
  v36 = *((_QWORD *)v34 + 28);
  if (v36)
    *((_QWORD *)v34 + 28) = *(_QWORD *)v36;
  else
    v36 = sub_1C484358C((uint64_t)v34 + 128, 72, 3);
  v54 = v53;
  if (v53)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v53, v53, (uint64_t)&v54);
    v53 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v36, v34, v35, &v54, 0);
  if (v54)
    llvm::MetadataTracking::untrack((uint64_t)&v54, v54);
  if (v53)
    llvm::MetadataTracking::untrack((uint64_t)&v53, v53);
  v37 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v36 + 24) = v37;
  v38 = *(_QWORD *)(v37 + 32);
  v39 = *(unsigned int *)(v36 + 40);
  if ((_DWORD)v39)
  {
    v43 = *(_QWORD *)(v36 + 32);
    v44 = *(_QWORD *)(v38 + 40);
    v45 = 32 * v39;
    do
    {
      if (!*(_BYTE *)v43)
      {
        v46 = *(unsigned int *)(v43 + 4);
        if ((int)v46 >= 0)
          v47 = (uint64_t *)(*(_QWORD *)(v44 + 272) + 8 * v46);
        else
          v47 = (uint64_t *)(*(_QWORD *)(v44 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8);
        v48 = *v47;
        if (*v47)
        {
          v49 = *(_QWORD *)(v48 + 16);
          *(_QWORD *)(v48 + 16) = v43;
          *(_QWORD *)(v43 + 16) = v49;
          if ((*(_BYTE *)(v43 + 3) & 1) != 0)
          {
            *(_QWORD *)(v43 + 24) = v48;
          }
          else
          {
            *(_QWORD *)(v43 + 24) = 0;
            v47 = (uint64_t *)(v49 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v43 + 16) = v43;
          *(_QWORD *)(v43 + 24) = 0;
        }
        *v47 = v43;
      }
      v43 += 32;
      v45 -= 32;
    }
    while (v45);
  }
  v40 = *(_QWORD *)(v38 + 728);
  if (v40)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v40 + 24))(v40, v36);
  v41 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v36 = v41 | *(_QWORD *)v36 & 7;
  *(_QWORD *)(v36 + 8) = a3;
  *(_QWORD *)(v41 + 8) = v36;
  *(_QWORD *)a3 = *(_QWORD *)a3 & 7 | v36;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  LODWORD(v54) = 0x1000000;
  HIDWORD(v54) = v50;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v34, (const llvm::MachineOperand *)&v54);
  LODWORD(v54) = 1;
  v55 = 0;
  v56 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v34, (const llvm::MachineOperand *)&v54);
  v42 = 4 * v32;
  if (!v31)
    v42 = 4;
  if (v29 == 3)
    v42 = 4;
  LODWORD(v54) = 1;
  v55 = 0;
  v56 = v42 | v29;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v34, (const llvm::MachineOperand *)&v54);
  LODWORD(v54) = 5;
  v55 = 0;
  LODWORD(v56) = v51;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v34, (const llvm::MachineOperand *)&v54);
  LODWORD(v54) = 1;
  v55 = 0;
  v56 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v34, (const llvm::MachineOperand *)&v54);
  LODWORD(v54) = 1;
  v55 = 0;
  v56 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v34, (const llvm::MachineOperand *)&v54);
  llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v36, v34, (llvm::MachineMemOperand *)v26);
  if (v52)
    llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
}

uint64_t sub_1C4887C54(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v5;
  unsigned __int16 *v6;
  int v7;
  BOOL v8;
  BOOL v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v2 = (_QWORD *)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 56);
  if (a2 + 48 == v3)
    return 0;
  v5 = *v2 & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (*(_BYTE *)v5 & 4) == 0)
  {
    while ((*(_WORD *)(v5 + 44) & 4) != 0)
      v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    v6 = *(unsigned __int16 **)(v5 + 16);
    v7 = *v6;
    v8 = (v7 - 9) > 0x3C || ((1 << (v7 - 9)) & 0x1000000000000605) == 0;
    v9 = !v8 || v7 == 0;
    if (!v9 && (v6[4] & 0x10) == 0)
      break;
    if (v5 == v3)
      return 0;
    v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    if (!v5 || (*(_BYTE *)v5 & 4) == 0)
    {
      while ((*(_WORD *)(v5 + 44) & 4) != 0)
        v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (v7 != 288 && sub_1C488859C(v7) - 47 > 2)
    return 0;
  v11 = v5;
  if ((*(_BYTE *)v5 & 4) == 0)
  {
    v11 = v5;
    if ((*(_WORD *)(v5 + 44) & 8) != 0)
    {
      v11 = v5;
      do
        v11 = *(_QWORD *)(v11 + 8);
      while ((*(_WORD *)(v11 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(v5 + 24) + 40, v5, *(_QWORD *)(v11 + 8));
  if (v2 == *(_QWORD **)(a2 + 56))
    return 1;
  v12 = *v2 & 0xFFFFFFFFFFFFFFF8;
  if (!v12 || (*(_BYTE *)v12 & 4) == 0)
  {
    while ((*(_WORD *)(v12 + 44) & 4) != 0)
      v12 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
  }
  if (sub_1C488859C(**(unsigned __int16 **)(v12 + 16)) - 47 > 2)
    return 1;
  v13 = v12;
  if ((*(_BYTE *)v12 & 4) == 0)
  {
    v13 = v12;
    if ((*(_WORD *)(v12 + 44) & 8) != 0)
    {
      v13 = v12;
      do
        v13 = *(_QWORD *)(v13 + 8);
      while ((*(_WORD *)(v13 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(v12 + 24) + 40, v12, *(_QWORD *)(v13 + 8));
  return 2;
}

uint64_t sub_1C4887E1C()
{
  return 0;
}

uint64_t sub_1C4887E24(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  int v4;

  v3 = (int)result - 1;
  v4 = dword_1C646AE50[v3];
  *a2 = 16 * (~(-1 << dword_1C646AE90[(int)v3]) & 0xF);
  *a3 = v4;
  return result;
}

void sub_1C4887E60(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;

  v4 = *(unsigned __int16 **)(a1 + 16);
  v5 = *v4;
  v6 = sub_1C4B138B4(v5);
  v7 = *((_QWORD *)v4 + 2);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(v8 + 32 * v6 + 16);
  if ((v7 & 0xD00) == 0x500 || (v7 & 0xE00) == 0x600)
  {
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 14) = 1;
    if ((v9 & 0x2000000000000000) == 0)
    {
      *(_DWORD *)(a2 + 8) = (v9 >> 54);
      *(_BYTE *)(a2 + 14) = 0;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 4) = v9 >> 4;
    v10 = sub_1C4B138B4(v5);
    if (*(_BYTE *)(v8 + 32 * v10) == 1)
    {
      *(_DWORD *)(a2 + 8) = *(unsigned __int8 *)(v8 + 32 * v10 + 16);
      *(_BYTE *)(a2 + 14) = 0;
    }
    else
    {
      *(_DWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 14) = 1;
    }
  }
  __asm { BR              X13 }
}

void sub_1C4887F58()
{
  _DWORD *v0;
  unsigned __int8 v1;
  char v2;
  int v3;
  int v4;

  if ((v2 & 0xE) == 0xC)
  {
    v4 = 15;
  }
  else
  {
    v4 = 15;
    if ((((v2 & 0xE) == 14) & v1) == 0)
      v4 = v3;
  }
  *v0 = 1;
  v0[1] = v4;
}

void sub_1C4887FA8()
{
  JUMPOUT(0x1C4887F5CLL);
}

void sub_1C4887FB0()
{
  JUMPOUT(0x1C4887F5CLL);
}

uint64_t sub_1C4887FC4@<X0>(unsigned int *a1@<X0>, llvm::APInt *a2@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  *((_DWORD *)a2 + 2) = 128;
  llvm::APInt::initSlowCase(a2, 0, 0);
  v4 = 8;
  do
  {
    sub_1C4888094((uint64_t)a2, *a1);
    if ((a1[1] & v4) != 0)
    {
      v5 = ~(-1 << *a1);
      v6 = *((_DWORD *)a2 + 2);
      if (v6 > 0x40)
      {
        **(_QWORD **)a2 |= v5;
      }
      else
      {
        v7 = *(_QWORD *)a2 | v5;
        if (v6)
          v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
        else
          v8 = 0;
        *(_QWORD *)a2 = v8 & v7;
      }
    }
    v9 = v4 >= 2;
    v4 >>= 1;
  }
  while (v9);
  return sub_1C4888094((uint64_t)a2, a1[2]);
}

uint64_t sub_1C4888094(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 > 0x40)
  {
    llvm::APInt::tcShiftLeft(*(llvm::APInt **)a1, (unint64_t *)((unint64_t)(v3 + 63) >> 6), a2);
    v5 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v5)
    {
      v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
      if (v5 >= 0x41)
      {
        v7 = (_QWORD *)(*(_QWORD *)a1 + 8 * (((unint64_t)(v5 + 63) >> 6) - 1));
LABEL_7:
        *v7 &= v6;
        return a1;
      }
    }
    else
    {
      v6 = 0;
    }
    v7 = (_QWORD *)a1;
    goto LABEL_7;
  }
  if ((_DWORD)v3 == a2)
    v4 = 0;
  else
    v4 = *(_QWORD *)a1 << a2;
  if ((_DWORD)v3)
    v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
  else
    v8 = 0;
  *(_QWORD *)a1 = v8 & v4;
  return a1;
}

BOOL sub_1C4888154(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a1[3] + 32) + 344);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 560))(v2);
  return (!v3 || (*(_WORD *)(v3 + 18) & 0x3FF0) != 0x660)
      && (*(_BYTE *)(a1[2] + 20) & 0x80) == 0
      && (*(_QWORD *)(a1[4] + 48) & 0x1C0) != 256;
}

uint64_t sub_1C48881C4(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, int *a5)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  v5 = **(unsigned __int16 **)(a2 + 16);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 318))
  {
    if (v5 != 2256)
    {
      v6 = 2236;
      goto LABEL_9;
    }
LABEL_5:
    v7 = *(_QWORD *)(a2 + 32);
    if (*(_QWORD *)(v7 + 144) || *(_BYTE *)(v7 + 64))
      return 0;
LABEL_18:
    v8 = 1;
    goto LABEL_19;
  }
  if (v5 == 2352)
    goto LABEL_5;
  v6 = 2332;
LABEL_9:
  if (v6 != v5)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 318))
      v9 = 2240;
    else
      v9 = 2336;
    if (v9 != v5)
      return 0;
    v7 = *(_QWORD *)(a2 + 32);
    if (*(_QWORD *)(v7 + 144))
      return 0;
    goto LABEL_18;
  }
  v7 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(v7 + 144))
    return 0;
  v8 = 25;
LABEL_19:
  *a3 = *(_DWORD *)(v7 + 68);
  *a4 = *(_DWORD *)(v7 + 4);
  *a5 = v8;
  return 1;
}

uint64_t sub_1C4888274(uint64_t a1)
{
  unsigned __int16 *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int16 **)(a1 + 16);
  v2 = *((_QWORD *)v1 + 2);
  if ((v2 & 0x1000000) != 0)
  {
    v3 = *(_QWORD *)(a1 + 32) + 32 * sub_1C4B138B4(*v1);
    *(_QWORD *)(v3 + 16) &= ~0x8000000000000000;
  }
  return (v2 >> 24) & 1;
}

unint64_t sub_1C48882C4(int a1, _BYTE *a2, int a3, int a4, char a5)
{
  int v10;
  int v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  _DWORD *v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  _DWORD *v25;
  uint64_t v26;
  _BYTE v27[24];
  void *__src;
  unsigned int v29;
  _QWORD v30[4];

  v30[3] = *MEMORY[0x1E0C80C00];
  v10 = sub_1C4888570(a1);
  v11 = sub_1C488859C(a1);
  sub_1C4888770(v10, (uint64_t)&__src);
  if (v11 == 47 && !a3)
  {
    v12 = 14;
LABEL_10:
    if (a2[318])
      v14 = v12;
    else
      v14 = 34;
    goto LABEL_13;
  }
  if (v11 == 47)
    v13 = a3 ^ 1;
  else
    v13 = 1;
  v12 = 30;
  if (v11 == 48 || (v13 & 1) == 0)
    goto LABEL_10;
  v14 = 44;
LABEL_13:
  if (a3)
    v15 = 5;
  else
    v15 = 2;
  v25 = v27;
  v26 = 0x500000000;
  sub_1C4893E04((char *)&v25, 1uLL, v15);
  sub_1C4860A74((unsigned int *)&v25, __src, (_BYTE *)__src + 4 * v29);
  v16 = v26;
  if (!a4)
  {
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v26 + 1, 4);
      v16 = v26;
    }
    v25[v16] = 1;
    v17 = v26 + 1;
    LODWORD(v26) = v26 + 1;
    if ((a5 & 1) == 0)
      goto LABEL_31;
    if (a3)
    {
LABEL_26:
      v18 = HIDWORD(v26);
      v19 = 5;
      goto LABEL_32;
    }
LABEL_30:
    v18 = HIDWORD(v26);
    v19 = 2;
    goto LABEL_32;
  }
  if (!a3)
  {
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v26 + 1, 4);
      v16 = v26;
    }
    v25[v16] = 2;
    v17 = v26 + 1;
    LODWORD(v26) = v26 + 1;
    if ((a5 & 1) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (v26 >= HIDWORD(v26))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v26 + 1, 4);
    v16 = v26;
  }
  v25[v16] = 5;
  v17 = v26 + 1;
  LODWORD(v26) = v26 + 1;
  if ((a5 & 1) != 0)
    goto LABEL_26;
LABEL_31:
  v18 = HIDWORD(v26);
  v19 = 1;
LABEL_32:
  if (v17 >= v18)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v17 + 1, 4);
    v17 = v26;
  }
  v25[v17] = v19;
  LODWORD(v26) = v26 + 1;
  v20 = v25;
  v21 = sub_1C4884024(v14, v25, v26, a2);
  v22 = __src;
  v23 = *(unsigned int *)__src;
  if (v20 != (_DWORD *)v27)
  {
    free(v20);
    v22 = __src;
  }
  if (v22 != v30)
    free(v22);
  return v21 | (unint64_t)(v23 << 32);
}

uint64_t sub_1C4888570(int a1)
{
  return dword_1C646AF48[a1 - 289];
}

uint64_t sub_1C488859C(int a1)
{
  char v1;
  uint64_t result;
  int v3;

  if (a1 > 2179)
  {
    if (a1 > 5215)
    {
      switch(a1)
      {
        case 5216:
        case 5217:
        case 5218:
        case 5219:
        case 5220:
        case 5221:
        case 5222:
        case 5223:
        case 5224:
        case 5225:
        case 5226:
        case 5227:
        case 5228:
        case 5229:
        case 5230:
        case 5231:
        case 5232:
        case 5233:
        case 5234:
        case 5235:
        case 5236:
        case 5237:
        case 5238:
        case 5239:
        case 5240:
        case 5241:
        case 5242:
        case 5243:
        case 5244:
        case 5245:
        case 5246:
        case 5247:
        case 5248:
        case 5249:
        case 5250:
        case 5251:
          result = 59;
          break;
        case 5252:
        case 5253:
        case 5254:
        case 5255:
        case 5256:
        case 5257:
        case 5258:
        case 5259:
        case 5260:
        case 5261:
        case 5262:
        case 5263:
        case 5264:
        case 5265:
        case 5266:
        case 5267:
        case 5268:
        case 5269:
        case 5270:
        case 5271:
        case 5272:
        case 5273:
        case 5274:
        case 5275:
        case 5276:
        case 5277:
        case 5278:
        case 5279:
        case 5280:
        case 5281:
        case 5282:
        case 5283:
        case 5284:
        case 5285:
        case 5286:
        case 5287:
        case 5324:
        case 5325:
        case 5326:
        case 5327:
        case 5328:
        case 5329:
        case 5330:
        case 5331:
        case 5332:
        case 5333:
        case 5334:
        case 5335:
        case 5336:
        case 5337:
        case 5338:
        case 5339:
        case 5340:
        case 5341:
        case 5342:
        case 5343:
        case 5344:
        case 5345:
        case 5346:
        case 5347:
        case 5348:
        case 5349:
        case 5350:
        case 5351:
        case 5352:
        case 5353:
        case 5354:
        case 5355:
        case 5356:
        case 5357:
        case 5358:
        case 5359:
LABEL_11:
          result = 73;
          break;
        case 5288:
        case 5289:
        case 5290:
        case 5291:
        case 5292:
        case 5293:
        case 5294:
        case 5295:
        case 5296:
        case 5297:
        case 5298:
        case 5299:
        case 5300:
        case 5301:
        case 5302:
        case 5303:
        case 5304:
        case 5305:
        case 5306:
        case 5307:
        case 5308:
        case 5309:
        case 5310:
        case 5311:
        case 5312:
        case 5313:
        case 5314:
        case 5315:
        case 5316:
        case 5317:
        case 5318:
        case 5319:
        case 5320:
        case 5321:
        case 5322:
        case 5323:
          result = 60;
          break;
        case 5360:
        case 5361:
        case 5362:
        case 5363:
        case 5364:
        case 5365:
        case 5366:
        case 5367:
        case 5368:
        case 5369:
        case 5370:
        case 5371:
        case 5372:
        case 5373:
        case 5374:
        case 5375:
        case 5376:
        case 5377:
        case 5378:
        case 5379:
        case 5380:
        case 5381:
        case 5382:
        case 5383:
        case 5384:
        case 5385:
        case 5386:
        case 5387:
        case 5388:
        case 5389:
        case 5390:
        case 5391:
        case 5392:
        case 5393:
        case 5394:
        case 5395:
          result = 63;
          break;
        default:
          switch(a1)
          {
            case 5948:
            case 5949:
            case 5950:
            case 5951:
            case 5952:
            case 5953:
            case 5954:
            case 5955:
            case 5956:
            case 5957:
            case 5958:
            case 5959:
            case 5960:
            case 5961:
            case 5962:
            case 5963:
            case 5964:
            case 5965:
            case 5966:
            case 5967:
            case 5968:
            case 5969:
            case 5970:
            case 5971:
            case 5972:
            case 5973:
            case 5974:
            case 5975:
            case 5976:
            case 5977:
            case 5978:
            case 5979:
            case 5980:
            case 5981:
            case 5982:
            case 5983:
              result = 65;
              break;
            case 6020:
            case 6021:
            case 6022:
            case 6023:
            case 6024:
            case 6025:
            case 6026:
            case 6027:
            case 6028:
            case 6029:
            case 6030:
            case 6031:
            case 6032:
            case 6033:
            case 6034:
            case 6035:
            case 6036:
            case 6037:
            case 6038:
            case 6039:
            case 6040:
            case 6041:
            case 6042:
            case 6043:
            case 6044:
            case 6045:
            case 6046:
            case 6047:
            case 6048:
            case 6049:
            case 6050:
            case 6051:
            case 6052:
            case 6053:
            case 6054:
            case 6055:
              result = 66;
              break;
            default:
              goto LABEL_11;
          }
          break;
      }
    }
    else
    {
      v3 = a1 - 2180;
      result = 36;
      switch(v3)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 142:
        case 143:
          return result;
        case 250:
        case 251:
        case 252:
        case 253:
        case 254:
        case 255:
        case 256:
        case 257:
        case 258:
        case 259:
        case 260:
        case 261:
        case 262:
        case 263:
        case 264:
        case 265:
        case 266:
        case 267:
        case 268:
        case 269:
        case 270:
        case 271:
        case 272:
        case 273:
        case 274:
        case 275:
        case 276:
        case 277:
        case 278:
        case 279:
        case 280:
        case 281:
        case 282:
        case 283:
        case 284:
        case 285:
        case 286:
        case 287:
        case 288:
        case 289:
        case 290:
        case 291:
        case 292:
        case 293:
        case 294:
        case 295:
        case 296:
        case 297:
        case 298:
        case 299:
        case 300:
        case 301:
        case 302:
        case 303:
        case 304:
        case 305:
        case 306:
        case 307:
        case 308:
        case 309:
        case 310:
        case 311:
        case 312:
        case 313:
        case 314:
        case 315:
        case 316:
        case 317:
        case 318:
        case 319:
        case 320:
        case 321:
        case 322:
        case 323:
        case 324:
        case 325:
        case 326:
        case 327:
        case 328:
        case 329:
        case 330:
        case 331:
        case 332:
        case 333:
        case 334:
        case 335:
        case 336:
        case 337:
        case 338:
        case 339:
        case 340:
        case 341:
        case 342:
        case 343:
        case 344:
        case 345:
        case 346:
        case 347:
        case 348:
        case 349:
        case 350:
        case 351:
        case 352:
        case 353:
        case 354:
        case 355:
        case 356:
        case 357:
        case 466:
        case 467:
        case 468:
        case 469:
        case 470:
        case 471:
        case 472:
        case 473:
        case 474:
        case 475:
        case 476:
        case 477:
        case 478:
        case 479:
        case 480:
        case 481:
        case 482:
        case 483:
        case 484:
        case 485:
        case 486:
        case 487:
        case 488:
        case 489:
        case 490:
        case 491:
        case 492:
        case 493:
        case 494:
        case 495:
        case 496:
        case 497:
        case 498:
        case 499:
        case 500:
        case 501:
        case 502:
        case 503:
        case 504:
        case 505:
        case 506:
        case 507:
        case 508:
        case 509:
        case 510:
        case 511:
        case 512:
        case 513:
        case 514:
        case 515:
        case 516:
        case 517:
        case 518:
        case 519:
        case 520:
        case 521:
        case 522:
        case 523:
        case 524:
        case 525:
        case 526:
        case 527:
        case 528:
        case 529:
        case 530:
        case 531:
        case 532:
        case 533:
        case 534:
        case 535:
        case 536:
        case 537:
        case 538:
        case 539:
        case 540:
        case 541:
        case 542:
        case 543:
        case 544:
        case 545:
        case 546:
        case 547:
        case 548:
        case 549:
        case 550:
        case 551:
        case 552:
        case 553:
        case 554:
        case 555:
        case 556:
        case 557:
        case 558:
        case 559:
        case 560:
        case 561:
        case 562:
        case 563:
        case 564:
        case 565:
        case 566:
        case 567:
        case 568:
        case 569:
        case 570:
        case 571:
        case 572:
        case 573:
          result = 41;
          break;
        case 866:
        case 867:
        case 868:
        case 869:
        case 870:
        case 871:
        case 872:
        case 873:
        case 874:
        case 875:
        case 876:
        case 877:
        case 878:
        case 879:
        case 880:
        case 881:
        case 882:
        case 883:
        case 884:
        case 885:
        case 886:
        case 887:
        case 888:
        case 889:
        case 890:
        case 891:
        case 892:
        case 893:
        case 894:
        case 895:
        case 896:
        case 897:
        case 898:
        case 899:
        case 900:
        case 901:
        case 902:
        case 903:
        case 904:
        case 905:
        case 906:
        case 907:
        case 908:
        case 909:
        case 910:
        case 911:
        case 912:
        case 913:
        case 914:
        case 915:
        case 916:
        case 917:
        case 918:
        case 919:
        case 920:
        case 921:
        case 922:
        case 923:
        case 924:
        case 925:
        case 926:
        case 927:
        case 928:
        case 929:
        case 930:
        case 931:
        case 932:
        case 933:
        case 934:
        case 935:
        case 936:
        case 937:
        case 938:
        case 939:
        case 940:
        case 941:
        case 942:
        case 943:
        case 944:
        case 945:
        case 946:
        case 947:
        case 948:
        case 949:
        case 950:
        case 951:
        case 952:
        case 953:
        case 954:
        case 955:
        case 956:
        case 957:
        case 958:
        case 959:
        case 960:
        case 961:
        case 962:
        case 963:
        case 964:
        case 965:
        case 966:
        case 967:
        case 968:
        case 969:
        case 970:
        case 971:
        case 972:
        case 973:
        case 1082:
        case 1083:
        case 1084:
        case 1085:
        case 1086:
        case 1087:
        case 1088:
        case 1089:
        case 1090:
        case 1091:
        case 1092:
        case 1093:
        case 1094:
        case 1095:
        case 1096:
        case 1097:
        case 1098:
        case 1099:
        case 1100:
        case 1101:
        case 1102:
        case 1103:
        case 1104:
        case 1105:
        case 1106:
        case 1107:
        case 1108:
        case 1109:
        case 1110:
        case 1111:
        case 1112:
        case 1113:
        case 1114:
        case 1115:
        case 1116:
        case 1117:
        case 1118:
        case 1119:
        case 1120:
        case 1121:
        case 1122:
        case 1123:
        case 1124:
        case 1125:
        case 1126:
        case 1127:
        case 1128:
        case 1129:
        case 1130:
        case 1131:
        case 1132:
        case 1133:
        case 1134:
        case 1135:
        case 1136:
        case 1137:
        case 1138:
        case 1139:
        case 1140:
        case 1141:
        case 1142:
        case 1143:
        case 1144:
        case 1145:
        case 1146:
        case 1147:
        case 1148:
        case 1149:
        case 1150:
        case 1151:
        case 1152:
        case 1153:
        case 1154:
        case 1155:
        case 1156:
        case 1157:
        case 1158:
        case 1159:
        case 1160:
        case 1161:
        case 1162:
        case 1163:
        case 1164:
        case 1165:
        case 1166:
        case 1167:
        case 1168:
        case 1169:
        case 1170:
        case 1171:
        case 1172:
        case 1173:
        case 1174:
        case 1175:
        case 1176:
        case 1177:
        case 1178:
        case 1179:
        case 1180:
        case 1181:
        case 1182:
        case 1183:
        case 1184:
        case 1185:
        case 1186:
        case 1187:
        case 1188:
        case 1189:
          result = 43;
          break;
        default:
          goto LABEL_11;
      }
    }
  }
  else
  {
    v1 = a1 - 33;
    if ((a1 - 289) > 0x17)
      goto LABEL_21;
    if (((1 << v1) & 0xFF8000) != 0)
      return 49;
    if (((1 << v1) & 0x1FF0) != 0)
      return 48;
    if (((1 << v1) & 0xF) != 0)
    {
      return 47;
    }
    else
    {
LABEL_21:
      switch(a1)
      {
        case 971:
        case 972:
        case 973:
        case 974:
          result = 9;
          break;
        case 975:
        case 976:
        case 977:
        case 978:
          result = 8;
          break;
        case 979:
        case 980:
        case 981:
        case 982:
          result = 11;
          break;
        case 983:
        case 984:
        case 985:
        case 986:
          result = 10;
          break;
        default:
          switch(a1)
          {
            case 1452:
            case 1453:
            case 1454:
            case 1455:
            case 1456:
            case 1457:
            case 1458:
            case 1459:
            case 1460:
            case 1461:
            case 1462:
            case 1463:
            case 1464:
            case 1465:
            case 1466:
            case 1467:
            case 1468:
            case 1469:
            case 1470:
            case 1471:
            case 1472:
            case 1473:
            case 1474:
            case 1475:
            case 1476:
            case 1477:
            case 1478:
            case 1479:
            case 1480:
            case 1481:
            case 1482:
            case 1483:
            case 1484:
            case 1485:
            case 1486:
            case 1487:
              result = 23;
              break;
            case 1488:
            case 1489:
            case 1490:
            case 1491:
            case 1492:
            case 1493:
            case 1494:
            case 1495:
            case 1496:
            case 1497:
            case 1498:
            case 1499:
            case 1500:
            case 1501:
            case 1502:
            case 1503:
            case 1504:
            case 1505:
            case 1506:
            case 1507:
            case 1508:
            case 1509:
            case 1510:
            case 1511:
            case 1512:
            case 1513:
            case 1514:
            case 1515:
            case 1516:
            case 1517:
            case 1518:
            case 1519:
            case 1520:
            case 1521:
            case 1522:
            case 1523:
              result = 22;
              break;
            case 1524:
            case 1525:
            case 1526:
            case 1527:
            case 1528:
            case 1529:
            case 1530:
            case 1531:
            case 1532:
            case 1533:
            case 1534:
            case 1535:
            case 1536:
            case 1537:
            case 1538:
            case 1539:
            case 1540:
            case 1541:
            case 1542:
            case 1543:
            case 1544:
            case 1545:
            case 1546:
            case 1547:
            case 1548:
            case 1549:
            case 1550:
            case 1551:
            case 1552:
            case 1553:
            case 1554:
            case 1555:
            case 1556:
            case 1557:
            case 1558:
            case 1559:
              result = 25;
              break;
            case 1560:
            case 1561:
            case 1562:
            case 1563:
            case 1564:
            case 1565:
            case 1566:
            case 1567:
            case 1568:
            case 1569:
            case 1570:
            case 1571:
            case 1572:
            case 1573:
            case 1574:
            case 1575:
            case 1576:
            case 1577:
            case 1578:
            case 1579:
            case 1580:
            case 1581:
            case 1582:
            case 1583:
            case 1584:
            case 1585:
            case 1586:
            case 1587:
            case 1588:
            case 1589:
            case 1590:
            case 1591:
            case 1592:
            case 1593:
            case 1594:
            case 1595:
              result = 24;
              break;
            default:
              goto LABEL_11;
          }
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1C4888770@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a1 > 64)
  {
    if (a1 <= 107)
    {
      if (a1 != 95)
      {
        if (a1 != 65)
        {
          v3 = 0x100000005;
          goto LABEL_5;
        }
        v2 = 0x200000001;
LABEL_4:
        v3 = v2 | 4;
LABEL_5:
        *(_QWORD *)(a2 + 16) = v3;
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 8) = 2;
        *(_DWORD *)(a2 + 12) = 5;
        return result;
      }
    }
    else
    {
      if (a1 <= 141)
      {
        if (a1 == 125)
          v3 = 0x200000002;
        else
          v3 = 0x500000002;
        goto LABEL_5;
      }
      if (a1 > 154)
      {
        if (a1 == 157)
        {
          v3 = 0x100000001;
        }
        else if (a1 == 155)
        {
          v3 = 0x500000001;
        }
        else
        {
          v3 = 0x200000001;
        }
        goto LABEL_5;
      }
    }
    v3 = 0x100000002;
    goto LABEL_5;
  }
  if (a1 == 48)
  {
    v2 = 0x500000001;
    goto LABEL_4;
  }
  return ((uint64_t (*)(void))((char *)&loc_1C48887F8 + 4 * byte_1C646561D[a1 - 32]))();
}

uint64_t sub_1C4888878(uint64_t a1, int *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
  v8 = 1;
  if ((v7 & 0xD00) != 0x500 && (v7 & 0xD00) != 0x900)
  {
    v8 = 0;
    v21 = v7 & 0xE00;
    if (v21 != 1536 && v21 != 2560)
      return 0;
  }
  if (*(_DWORD *)(a1 + 40) != 6)
    return 0;
  v9 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v9 + 32 * v8) != 1)
    return 0;
  if (*(_BYTE *)(v9 + 128) != 1)
    return 0;
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 < 8)
    return 0;
  if ((v10 & 7) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 48) = v10;
    goto LABEL_8;
  }
  v19 = 0;
  if ((*(_QWORD *)(a1 + 48) & 7) != 3 || (v10 & 0xFFFFFFFFFFFFFFF8) == 0)
    return v19;
  if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFFFF8) != 1)
    return 0;
LABEL_8:
  v11 = v10 & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 7) != 0)
    v11 = *(_QWORD *)(v11 + 8);
  else
    *(_QWORD *)(a1 + 48) = v11;
  v13 = *(_QWORD *)(v11 + 24);
  v12 = (unint64_t *)(v11 + 24);
  if ((v13 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v15 = sub_1C4825F50(v12) + 7;
    if ((_DWORD)v14 == 1)
    {
      v22 = v15;
      v15 = v22;
    }
    v16 = v15 >> 3;
  }
  else
  {
    LODWORD(v16) = -1;
  }
  *a4 = v16;
  v17 = sub_1C4884088(*(_QWORD *)(v9 + 32 * v8 + 16));
  if (*(_BYTE *)(v9 + 96))
    v18 = *(_DWORD *)(v9 + 100) | 0x40000000;
  else
    v18 = *(_DWORD *)(v9 + 100);
  *a2 = v18;
  *a3 = *(_QWORD *)(v9 + 144) << v17;
  return 1;
}

BOOL sub_1C48889FC(int a1, llvm::MachineInstr *this, llvm::MachineInstr *a3)
{
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int v10;
  int v11;
  char v12;
  char v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL8 result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  int v24;
  int v25;
  uint64_t v26;
  char v27;
  _DWORD *v28;
  int v29;
  char v30;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  unint64_t v36;
  int *v37;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  unint64_t v42;
  int v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  _DWORD v52[2];
  _QWORD v53[2];
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v5 = 0;
  v56 = *MEMORY[0x1E0C80C00];
  v54 = 0u;
  v55 = 0u;
  v6 = (unsigned __int16 *)*((_QWORD *)this + 2);
  v7 = *((_QWORD *)v6 + 2);
  v8 = (unsigned __int16 *)*((_QWORD *)a3 + 2);
  v9 = *((_QWORD *)v8 + 2);
  v53[0] = v7;
  v53[1] = v9;
  v10 = *v6;
  v11 = *v8;
  v52[0] = v10;
  v52[1] = v11;
  v51[0] = this;
  v51[1] = a3;
  v12 = 1;
  do
  {
    v13 = v12;
    v14 = v52[v5];
    v15 = v14 - 4581;
    v16 = v14 - 743;
    if (v15 < 0xC || v16 <= 0xD)
    {
      result = 0;
      v19 = v5 ^ 1;
      v20 = v53[v5 ^ 1];
      if ((v20 & 0xE00) == 0x600)
        return result;
      v21 = v20 & 0x10000000;
      if ((v52[v19] - 2970) < 0x48 || v21 != 0)
        return result;
    }
    v12 = 0;
    v5 = 1;
  }
  while ((v13 & 1) != 0);
  if (((v7 | v9) & 2) != 0)
  {
    return ((v10 - 2970) > 0x47 || (v11 - 2970) >= 0x48)
        && !llvm::MachineInstr::hasUnmodeledSideEffects(this)
        && !llvm::MachineInstr::hasUnmodeledSideEffects(a3);
  }
  else
  {
    v23 = 1;
    v24 = -1;
    if ((v10 - 8267) >= 6 && v10 != 8274 && v10 != 8276)
    {
      if ((v10 & 0xFFFFFFFD) == 0x2051)
      {
        v24 = *(_DWORD *)(*((_QWORD *)this + 4) + 48);
        v23 = 1;
      }
      else
      {
        v24 = 0;
        v23 = 0;
      }
    }
    if ((v11 - 8267) < 0xA && ((0x2BFu >> (v11 - 75)) & 1) != 0)
    {
      v25 = -1;
      if ((v23 & 1) == 0)
        return 1;
    }
    else
    {
      if ((v11 & 0xFFFFFFFD) != 0x2051)
      {
        result = 1;
        if ((v23 & 1) != 0)
          return result;
        v26 = 0;
        v27 = 1;
        v28 = (_DWORD *)&v54 + 2;
        do
        {
          v29 = v52[v26];
          v30 = v27;
          if ((v29 - 4282) > 0x19 || ((1 << (v29 + 70)) & 0x3000003) == 0)
          {
            v34 = v51[v26];
            v35 = (int *)(v34 + 48);
            v36 = *(_QWORD *)(v34 + 48);
            if (v36 >= 8)
            {
              if ((v36 & 7) == 0)
              {
                *(_QWORD *)(v34 + 48) = v36 & 0xFFFFFFFFFFFFFFF8;
                v41 = (int *)(v34 + 56);
                while (1)
                {
LABEL_47:
                  v42 = *(unsigned int *)(*(_QWORD *)v35 + 16);
                  if ((_DWORD)v42)
                  {
                    if (v42 >= 0x51)
                      abort();
                  }
                  else if ((~LODWORD(v53[v26]) & 0xD00) != 0 && (v53[v26] & 0xE00) != 0xE00)
                  {
                    return 0;
                  }
                  *(_QWORD *)((char *)&v54 + 16 * v26 + ((v42 >> 3) & 0x1FFFFFF8)) |= 1 << v42;
                  v35 += 2;
                  if (v35 == v41)
                    goto LABEL_31;
                }
              }
              v37 = (int *)(v36 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)(v34 + 48) & 7) == 3 && v37 != 0)
              {
                v40 = *v37;
                v35 = v37 + 2;
                v39 = v40;
                if ((_DWORD)v40)
                {
                  v41 = &v35[2 * v39];
                  goto LABEL_47;
                }
              }
            }
          }
          else
          {
            *((_QWORD *)&v54 + 2 * v26) |= 8uLL;
          }
LABEL_31:
          v32 = &v54 + v26;
          if (!*(_QWORD *)v32 && (*v28 & 0x1FFFF) == 0)
          {
            v33 = v53[v26];
            if ((~(_WORD)v33 & 0xD00) != 0 && (v33 & 0xE00) != 0xE00)
              return 0;
            *(_QWORD *)v32 = 1;
          }
          v27 = 0;
          v28 += 4;
          v26 = 1;
        }
        while ((v30 & 1) != 0);
        if (!sub_1C4893EB8(&v54, 0, (uint64_t)&v54 + 8, 0x11u, &v55))
          return ((unint64_t)v55 & (unint64_t)v54 | DWORD2(v54) & DWORD2(v55) & 0x1FFFF) == 0;
        v49 = 0;
        v50 = 0;
        v48 = 0;
        if (!sub_1C4888878((uint64_t)this, (int *)&v48 + 1, (_DWORD *)&v50 + 1, (_DWORD *)&v49 + 1)
          || !sub_1C4888878((uint64_t)a3, (int *)&v48, &v50, &v49)
          || HIDWORD(v48) != (_DWORD)v48)
        {
          return ((unint64_t)v55 & (unint64_t)v54 | DWORD2(v54) & DWORD2(v55) & 0x1FFFF) == 0;
        }
        v45 = v50;
        if ((int)v50 >= SHIDWORD(v50))
          v46 = HIDWORD(v50);
        else
          v46 = v50;
        if (SHIDWORD(v50) > (int)v50)
          v45 = HIDWORD(v50);
        v47 = (uint64_t *)((char *)&v49 + 4);
        if (SHIDWORD(v50) > (int)v50)
          v47 = &v49;
        if (*(_DWORD *)v47 + v46 > v45)
          return ((unint64_t)v55 & (unint64_t)v54 | DWORD2(v54) & DWORD2(v55) & 0x1FFFF) == 0;
        return 1;
      }
      v25 = *(_DWORD *)(*((_QWORD *)a3 + 4) + 48);
      if ((v23 & 1) == 0)
        return 1;
    }
    return (v24 | v25) >= 0 && v24 != v25;
  }
}

uint64_t sub_1C4888E00(uint64_t a1, _DWORD *a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C4888E20 + 4 * byte_1C6465621[*a2 - 1]))();
}

uint64_t sub_1C4888E20(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 4);
  if (v2 == 5)
  {
    if (result <= 0x31)
    {
      if (((1 << result) & 0xE380000000) != 0)
        return 159;
      if (result == 48)
        return 155;
      if (result == 49)
        return 33;
    }
    return 409;
  }
  if (v2 == 2)
  {
    switch((int)result)
    {
      case 31:
      case 32:
      case 33:
      case 37:
      case 38:
      case 39:
        return 160;
      case 34:
      case 35:
      case 36:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
        goto LABEL_22;
      case 47:
      case 48:
        return 156;
      case 49:
        return 34;
      default:
        return 410;
    }
  }
  switch((int)result)
  {
    case 31:
    case 32:
    case 33:
    case 37:
    case 38:
    case 39:
      return 158;
    case 34:
    case 35:
    case 36:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
LABEL_22:
      __break(1u);
      break;
    case 47:
    case 48:
      return 157;
    case 49:
      return 32;
    default:
      return 411;
  }
  return result;
}

uint64_t sub_1C488B4C4(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C488B4E0 + 4 * word_1C6465CE8[a2]))();
}

uint64_t sub_1C488B4E0(uint64_t result, uint64_t a2, int a3)
{
  if ((_DWORD)result == 4)
  {
    if (a3 > 312)
    {
      switch(a3)
      {
        case 313:
          result = 830;
          break;
        case 314:
        case 317:
        case 318:
        case 320:
        case 323:
        case 325:
        case 328:
        case 329:
        case 330:
        case 331:
        case 332:
        case 333:
        case 335:
        case 338:
        case 339:
        case 341:
        case 343:
        case 345:
        case 346:
        case 347:
        case 348:
        case 350:
        case 352:
          goto LABEL_84;
        case 315:
          result = 831;
          break;
        case 316:
          result = 832;
          break;
        case 319:
          result = 833;
          break;
        case 321:
          result = 834;
          break;
        case 322:
          result = 835;
          break;
        case 324:
          result = 836;
          break;
        case 326:
          result = 837;
          break;
        case 327:
          result = 838;
          break;
        case 334:
          result = 839;
          break;
        case 336:
          result = 840;
          break;
        case 337:
          result = 841;
          break;
        case 340:
          result = 842;
          break;
        case 342:
          result = 843;
          break;
        case 344:
          result = 844;
          break;
        case 349:
          result = 845;
          break;
        case 351:
          result = 846;
          break;
        case 353:
          result = 847;
          break;
        default:
          result = ((uint64_t (*)(uint64_t))((char *)&nullsub_2623 + 4 * word_1C6468668[a3 - 366]))(856);
          break;
      }
    }
    else
    {
      switch(a3)
      {
        case 215:
          result = 803;
          break;
        case 216:
        case 219:
        case 220:
        case 222:
        case 225:
        case 227:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 237:
        case 240:
        case 241:
        case 243:
        case 245:
        case 247:
        case 248:
        case 249:
        case 250:
        case 252:
        case 254:
          goto LABEL_84;
        case 217:
          result = 804;
          break;
        case 218:
          result = 805;
          break;
        case 221:
          result = 806;
          break;
        case 223:
          result = 807;
          break;
        case 224:
          result = 808;
          break;
        case 226:
          result = 809;
          break;
        case 228:
          result = 810;
          break;
        case 229:
          result = 811;
          break;
        case 236:
          result = 812;
          break;
        case 238:
          result = 813;
          break;
        case 239:
          result = 814;
          break;
        case 242:
          result = 815;
          break;
        case 244:
          result = 816;
          break;
        case 246:
          result = 817;
          break;
        case 251:
          result = 818;
          break;
        case 253:
          result = 819;
          break;
        case 255:
          result = 820;
          break;
        default:
          result = ((uint64_t (*)())((char *)sub_1C488ED78 + 4 * word_1C64685EE[a3 - 268]))();
          break;
      }
    }
  }
  else if (a3 > 312)
  {
    switch(a3)
    {
      case 313:
        result = 884;
        break;
      case 314:
      case 317:
      case 318:
      case 320:
      case 323:
      case 325:
      case 328:
      case 329:
      case 330:
      case 331:
      case 332:
      case 333:
      case 335:
      case 338:
      case 339:
      case 341:
      case 343:
      case 345:
      case 346:
      case 347:
      case 348:
      case 350:
      case 352:
LABEL_84:
        __break(1u);
        break;
      case 315:
        result = 885;
        break;
      case 316:
        result = 886;
        break;
      case 319:
        result = 887;
        break;
      case 321:
        result = 888;
        break;
      case 322:
        result = 889;
        break;
      case 324:
        result = 890;
        break;
      case 326:
        result = 891;
        break;
      case 327:
        result = 892;
        break;
      case 334:
        result = 893;
        break;
      case 336:
        result = 894;
        break;
      case 337:
        result = 895;
        break;
      case 340:
        result = 896;
        break;
      case 342:
        result = 897;
        break;
      case 344:
        result = 898;
        break;
      case 349:
        result = 899;
        break;
      case 351:
        result = 900;
        break;
      case 353:
        result = 901;
        break;
      default:
        result = ((uint64_t (*)(uint64_t))((char *)&nullsub_2623 + 4 * word_1C6468574[a3 - 366]))(910);
        break;
    }
  }
  else
  {
    switch(a3)
    {
      case 215:
        result = 857;
        break;
      case 216:
      case 219:
      case 220:
      case 222:
      case 225:
      case 227:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 237:
      case 240:
      case 241:
      case 243:
      case 245:
      case 247:
      case 248:
      case 249:
      case 250:
      case 252:
      case 254:
        goto LABEL_84;
      case 217:
        result = 858;
        break;
      case 218:
        result = 859;
        break;
      case 221:
        result = 860;
        break;
      case 223:
        result = 861;
        break;
      case 224:
        result = 862;
        break;
      case 226:
        result = 863;
        break;
      case 228:
        result = 864;
        break;
      case 229:
        result = 865;
        break;
      case 236:
        result = 866;
        break;
      case 238:
        result = 867;
        break;
      case 239:
        result = 868;
        break;
      case 242:
        result = 869;
        break;
      case 244:
        result = 870;
        break;
      case 246:
        result = 871;
        break;
      case 251:
        result = 872;
        break;
      case 253:
        result = 873;
        break;
      case 255:
        result = 874;
        break;
      default:
        result = ((uint64_t (*)())((char *)sub_1C488EE50 + 4 * word_1C64684FA[a3 - 268]))();
        break;
    }
  }
  return result;
}

uint64_t sub_1C488B580(uint64_t a1, uint64_t a2, int a3)
{
  return (a3 + 4330);
}

uint64_t sub_1C488B5B4()
{
  return 3046;
}

uint64_t sub_1C488B868(uint64_t a1, uint64_t a2, int a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1C488B888 + 4 * word_1C6467968[a3 - 53]))(2134);
}

uint64_t sub_1C488B888()
{
  return 2079;
}

uint64_t sub_1C488B9E8()
{
  return 3490;
}

uint64_t sub_1C488BA2C(uint64_t a1, uint64_t a2, int a3)
{
  return dword_1C646B020[a3 - 386];
}

uint64_t sub_1C488BEF8()
{
  return 999;
}

uint64_t sub_1C488BF00(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (a3 == 410)
    v3 = 1114;
  else
    v3 = 1115;
  if (a3 == 409)
    v4 = 1113;
  else
    v4 = v3;
  if (a3 == 364)
    v5 = 1111;
  else
    v5 = 1112;
  if (a3 > 408)
    v5 = v4;
  if (a3 == 298)
    v6 = 1109;
  else
    v6 = 1110;
  if (a3 == 234)
    v7 = 1107;
  else
    v7 = 1108;
  if (a3 <= 297)
    v6 = v7;
  if (a3 <= 363)
    return v6;
  else
    return v5;
}

uint64_t sub_1C488C358()
{
  return 1461;
}

uint64_t sub_1C488C4AC()
{
  return 3154;
}

void sub_1C488C74C()
{
  JUMPOUT(0x1C488C754);
}

uint64_t sub_1C488C874()
{
  return 3262;
}

uint64_t sub_1C488CB24()
{
  return 3562;
}

uint64_t sub_1C488CC4C()
{
  return 959;
}

uint64_t sub_1C488CD00()
{
  return 1587;
}

uint64_t sub_1C488CD34()
{
  return 1551;
}

uint64_t sub_1C488CD5C()
{
  return 2754;
}

uint64_t sub_1C488CE6C()
{
  return 967;
}

uint64_t sub_1C488CF08()
{
  return 2646;
}

uint64_t sub_1C488CFD8()
{
  return 1701;
}

uint64_t sub_1C488D00C()
{
  return 1515;
}

uint64_t sub_1C488D084()
{
  return 1479;
}

uint64_t sub_1C488D1C8()
{
  return 3370;
}

uint64_t sub_1C488D490()
{
  return 1647;
}

uint64_t sub_1C488E0FC()
{
  return 1317;
}

uint64_t sub_1C488E124()
{
  return 1263;
}

uint64_t sub_1C488E1CC()
{
  return 1425;
}

uint64_t sub_1C488E1F4()
{
  return 1371;
}

uint64_t sub_1C488E2A8()
{
  return 2261;
}

uint64_t sub_1C488E2DC()
{
  return 2213;
}

uint64_t sub_1C488E310()
{
  return 2357;
}

uint64_t sub_1C488E344()
{
  return 2309;
}

uint64_t sub_1C488E378()
{
  return 3715;
}

uint64_t sub_1C488E3AC()
{
  return 3811;
}

uint64_t sub_1C488E3E0()
{
  return 3667;
}

uint64_t sub_1C488E414()
{
  return 3763;
}

uint64_t sub_1C488E888()
{
  return 2245;
}

uint64_t sub_1C488E8B4()
{
  return 2197;
}

uint64_t sub_1C488E8E0()
{
  return 2341;
}

uint64_t sub_1C488E90C()
{
  return 2293;
}

uint64_t sub_1C488E938()
{
  return 3699;
}

uint64_t sub_1C488E964()
{
  return 3795;
}

uint64_t sub_1C488E990()
{
  return 3651;
}

uint64_t sub_1C488E9BC()
{
  return 3747;
}

uint64_t sub_1C488E9C4()
{
  return 992;
}

uint64_t sub_1C488E9CC()
{
  return 993;
}

uint64_t sub_1C488E9D4()
{
  return 994;
}

uint64_t sub_1C488E9DC()
{
  return 1000;
}

uint64_t sub_1C488E9E4()
{
  return 1002;
}

uint64_t sub_1C488EA24()
{
  return 1001;
}

uint64_t sub_1C488ED78()
{
  return 821;
}

uint64_t sub_1C488ED9C()
{
  return 8078;
}

uint64_t sub_1C488EDC0()
{
  return 6182;
}

uint64_t sub_1C488EDE4()
{
  return 7970;
}

uint64_t sub_1C488EE08()
{
  return 8132;
}

uint64_t sub_1C488EE2C()
{
  return 6236;
}

uint64_t sub_1C488EE50()
{
  return 875;
}

uint64_t sub_1C488EE74()
{
  return 8024;
}

uint64_t sub_1C488EE9C()
{
  return 8105;
}

uint64_t sub_1C488EEC4()
{
  return 8159;
}

uint64_t sub_1C488EEEC()
{
  return 848;
}

uint64_t sub_1C488EF14()
{
  return 6209;
}

uint64_t sub_1C488EF3C()
{
  return 6263;
}

uint64_t sub_1C488EF64()
{
  return 902;
}

uint64_t sub_1C488EF8C()
{
  return 7997;
}

uint64_t sub_1C488EFB4()
{
  return 8051;
}

uint64_t sub_1C488EFD8()
{
  return 6074;
}

uint64_t sub_1C488EFFC()
{
  return 6128;
}

uint64_t sub_1C488F024()
{
  return 6101;
}

uint64_t sub_1C488F04C()
{
  return 6155;
}

uint64_t sub_1C488F054()
{
  return 944;
}

uint64_t sub_1C488F05C()
{
  return 945;
}

uint64_t sub_1C488F064()
{
  return 946;
}

uint64_t sub_1C488F06C()
{
  return 952;
}

uint64_t sub_1C488F074()
{
  return 953;
}

uint64_t sub_1C488F07C()
{
  return 954;
}

uint64_t sub_1C488F084()
{
  return 960;
}

uint64_t sub_1C488F08C()
{
  return 961;
}

uint64_t sub_1C488F094()
{
  return 962;
}

uint64_t sub_1C488F09C()
{
  return 968;
}

uint64_t sub_1C488F0A4()
{
  return 969;
}

uint64_t sub_1C488F0AC()
{
  return 970;
}

uint64_t sub_1C488F4A4()
{
  return 1570;
}

uint64_t sub_1C488F4AC()
{
  return 1571;
}

uint64_t sub_1C488F4B4()
{
  return 1572;
}

uint64_t sub_1C488F4BC()
{
  return 1573;
}

uint64_t sub_1C488F4C4()
{
  return 1574;
}

uint64_t sub_1C488F4CC()
{
  return 1575;
}

uint64_t sub_1C488F4D4()
{
  return 1576;
}

uint64_t sub_1C488F4DC()
{
  return 1577;
}

uint64_t sub_1C488F4E4()
{
  return 1534;
}

uint64_t sub_1C488F4EC()
{
  return 1535;
}

uint64_t sub_1C488F4F4()
{
  return 1536;
}

uint64_t sub_1C488F4FC()
{
  return 1537;
}

uint64_t sub_1C488F504()
{
  return 1538;
}

uint64_t sub_1C488F50C()
{
  return 1539;
}

uint64_t sub_1C488F514()
{
  return 1540;
}

uint64_t sub_1C488F51C()
{
  return 1541;
}

uint64_t sub_1C488F524()
{
  return 1498;
}

uint64_t sub_1C488F52C()
{
  return 1499;
}

uint64_t sub_1C488F534()
{
  return 1500;
}

uint64_t sub_1C488F53C()
{
  return 1501;
}

uint64_t sub_1C488F544()
{
  return 1502;
}

uint64_t sub_1C488F54C()
{
  return 1503;
}

uint64_t sub_1C488F554()
{
  return 1504;
}

uint64_t sub_1C488F55C()
{
  return 1505;
}

uint64_t sub_1C488F564()
{
  return 1462;
}

uint64_t sub_1C488F56C()
{
  return 1463;
}

uint64_t sub_1C488F574()
{
  return 1464;
}

uint64_t sub_1C488F57C()
{
  return 1465;
}

uint64_t sub_1C488F584()
{
  return 1466;
}

uint64_t sub_1C488F58C()
{
  return 1467;
}

uint64_t sub_1C488F594()
{
  return 1468;
}

uint64_t sub_1C488F59C()
{
  return 1469;
}

uint64_t sub_1C488F5A4()
{
  return 1588;
}

uint64_t sub_1C488F5AC()
{
  return 1589;
}

uint64_t sub_1C488F5B4()
{
  return 1590;
}

uint64_t sub_1C488F5BC()
{
  return 1592;
}

uint64_t sub_1C488F5C4()
{
  return 1593;
}

uint64_t sub_1C488F5CC()
{
  return 1594;
}

uint64_t sub_1C488F5D4()
{
  return 1595;
}

uint64_t sub_1C488F5DC()
{
  return 1552;
}

uint64_t sub_1C488F5E4()
{
  return 1553;
}

uint64_t sub_1C488F5EC()
{
  return 1554;
}

uint64_t sub_1C488F5F4()
{
  return 1556;
}

uint64_t sub_1C488F5FC()
{
  return 1557;
}

uint64_t sub_1C488F604()
{
  return 1558;
}

uint64_t sub_1C488F60C()
{
  return 1559;
}

uint64_t sub_1C488F614()
{
  return 1516;
}

uint64_t sub_1C488F61C()
{
  return 1517;
}

uint64_t sub_1C488F624()
{
  return 1518;
}

uint64_t sub_1C488F62C()
{
  return 1520;
}

uint64_t sub_1C488F634()
{
  return 1521;
}

uint64_t sub_1C488F63C()
{
  return 1522;
}

uint64_t sub_1C488F644()
{
  return 1523;
}

uint64_t sub_1C488F64C()
{
  return 1480;
}

uint64_t sub_1C488F654()
{
  return 1481;
}

uint64_t sub_1C488F65C()
{
  return 1482;
}

uint64_t sub_1C488F664()
{
  return 1484;
}

uint64_t sub_1C488F66C()
{
  return 1485;
}

uint64_t sub_1C488F674()
{
  return 1486;
}

uint64_t sub_1C488F67C()
{
  return 1487;
}

uint64_t sub_1C488FAA4()
{
  return 1702;
}

uint64_t sub_1C488FAAC()
{
  return 1703;
}

uint64_t sub_1C488FAB4()
{
  return 1704;
}

uint64_t sub_1C488FABC()
{
  return 1705;
}

uint64_t sub_1C488FAC4()
{
  return 1706;
}

uint64_t sub_1C488FACC()
{
  return 1707;
}

uint64_t sub_1C488FAD4()
{
  return 1708;
}

uint64_t sub_1C488FADC()
{
  return 1709;
}

uint64_t sub_1C488FAE4()
{
  return 1710;
}

uint64_t sub_1C488FAEC()
{
  return 1711;
}

uint64_t sub_1C488FAF4()
{
  return 1712;
}

uint64_t sub_1C488FAFC()
{
  return 1713;
}

uint64_t sub_1C488FB04()
{
  return 1715;
}

uint64_t sub_1C488FB0C()
{
  return 1716;
}

uint64_t sub_1C488FB14()
{
  return 1717;
}

uint64_t sub_1C488FB1C()
{
  return 1718;
}

uint64_t sub_1C488FB24()
{
  return 1719;
}

uint64_t sub_1C488FB2C()
{
  return 1720;
}

uint64_t sub_1C488FB34()
{
  return 1721;
}

uint64_t sub_1C488FB3C()
{
  return 1722;
}

uint64_t sub_1C488FB44()
{
  return 1723;
}

uint64_t sub_1C488FB4C()
{
  return 1724;
}

uint64_t sub_1C488FB54()
{
  return 1725;
}

uint64_t sub_1C488FB5C()
{
  return 1726;
}

uint64_t sub_1C488FB64()
{
  return 1727;
}

uint64_t sub_1C488FB6C()
{
  return 1648;
}

uint64_t sub_1C488FB74()
{
  return 1649;
}

uint64_t sub_1C488FB7C()
{
  return 1650;
}

uint64_t sub_1C488FB84()
{
  return 1651;
}

uint64_t sub_1C488FB8C()
{
  return 1652;
}

uint64_t sub_1C488FB94()
{
  return 1653;
}

uint64_t sub_1C488FB9C()
{
  return 1654;
}

uint64_t sub_1C488FBA4()
{
  return 1655;
}

uint64_t sub_1C488FBAC()
{
  return 1656;
}

uint64_t sub_1C488FBB4()
{
  return 1657;
}

uint64_t sub_1C488FBBC()
{
  return 1658;
}

uint64_t sub_1C488FBC4()
{
  return 1659;
}

uint64_t sub_1C488FBCC()
{
  return 1661;
}

uint64_t sub_1C488FBD4()
{
  return 1662;
}

uint64_t sub_1C488FBDC()
{
  return 1663;
}

uint64_t sub_1C488FBE4()
{
  return 1664;
}

uint64_t sub_1C488FBEC()
{
  return 1665;
}

uint64_t sub_1C488FBF4()
{
  return 1666;
}

uint64_t sub_1C488FBFC()
{
  return 1667;
}

uint64_t sub_1C488FC04()
{
  return 1668;
}

uint64_t sub_1C488FC0C()
{
  return 1669;
}

uint64_t sub_1C488FC14()
{
  return 1670;
}

uint64_t sub_1C488FC1C()
{
  return 1671;
}

uint64_t sub_1C488FC24()
{
  return 1672;
}

uint64_t sub_1C488FC2C()
{
  return 1673;
}

uint64_t sub_1C488FC34()
{
  return 2112;
}

uint64_t sub_1C488FC3C()
{
  return 2113;
}

uint64_t sub_1C488FC44()
{
  return 2114;
}

uint64_t sub_1C488FC4C()
{
  return 2115;
}

uint64_t sub_1C488FC54()
{
  return 2121;
}

uint64_t sub_1C488FC5C()
{
  return 2125;
}

uint64_t sub_1C488FC64()
{
  return 2131;
}

uint64_t sub_1C488FC6C()
{
  return 2135;
}

uint64_t sub_1C488FC74()
{
  return 2145;
}

uint64_t sub_1C488FC7C()
{
  return 2149;
}

uint64_t sub_1C488FC84()
{
  return 2150;
}

uint64_t sub_1C488FC8C()
{
  return 1958;
}

uint64_t sub_1C488FC94()
{
  return 2080;
}

uint64_t sub_1C488FC9C()
{
  return 2081;
}

uint64_t sub_1C488FCA4()
{
  return 2082;
}

uint64_t sub_1C488FCAC()
{
  return 2083;
}

uint64_t sub_1C488FCB4()
{
  return 2084;
}

uint64_t sub_1C488FCBC()
{
  return 2085;
}

uint64_t sub_1C488FCC4()
{
  return 2086;
}

uint64_t sub_1C488FCCC()
{
  return 2087;
}

uint64_t sub_1C488FCD4()
{
  return 2088;
}

uint64_t sub_1C488FCDC()
{
  return 2089;
}

uint64_t sub_1C488FCE4()
{
  return 2090;
}

uint64_t sub_1C488FCEC()
{
  return 2091;
}

uint64_t sub_1C488FCF4()
{
  return 2092;
}

uint64_t sub_1C488FCFC()
{
  return 2093;
}

uint64_t sub_1C488FD04()
{
  return 2094;
}

uint64_t sub_1C488FD0C()
{
  return 2095;
}

uint64_t sub_1C488FD14()
{
  return 2096;
}

uint64_t sub_1C488FD1C()
{
  return 2097;
}

uint64_t sub_1C488FD24()
{
  return 2098;
}

uint64_t sub_1C488FD2C()
{
  return 2099;
}

uint64_t sub_1C488FD34()
{
  return 2100;
}

uint64_t sub_1C488FD3C()
{
  return 2101;
}

uint64_t sub_1C488FD44()
{
  return 2102;
}

uint64_t sub_1C488FD4C()
{
  return 2103;
}

uint64_t sub_1C488FD54()
{
  return 2104;
}

uint64_t sub_1C488FD5C()
{
  return 2105;
}

uint64_t sub_1C488FD64()
{
  return 2106;
}

uint64_t sub_1C488FD6C()
{
  return 2107;
}

uint64_t sub_1C488FD74()
{
  return 2108;
}

uint64_t sub_1C488FD7C()
{
  return 2109;
}

uint64_t sub_1C488FD84()
{
  return 2110;
}

uint64_t sub_1C488FD8C()
{
  return 2111;
}

uint64_t sub_1C488FD94()
{
  return 2116;
}

uint64_t sub_1C488FD9C()
{
  return 2117;
}

uint64_t sub_1C488FDA4()
{
  return 2118;
}

uint64_t sub_1C488FDAC()
{
  return 2119;
}

uint64_t sub_1C488FDB4()
{
  return 2120;
}

uint64_t sub_1C488FDBC()
{
  return 2122;
}

uint64_t sub_1C488FDC4()
{
  return 2123;
}

uint64_t sub_1C488FDCC()
{
  return 2124;
}

uint64_t sub_1C488FDD4()
{
  return 2126;
}

uint64_t sub_1C488FDDC()
{
  return 2127;
}

uint64_t sub_1C488FDE4()
{
  return 2128;
}

uint64_t sub_1C488FDEC()
{
  return 2129;
}

uint64_t sub_1C488FDF4()
{
  return 2130;
}

uint64_t sub_1C488FDFC()
{
  return 2132;
}

uint64_t sub_1C488FE04()
{
  return 2133;
}

uint64_t sub_1C488FE0C()
{
  return 2136;
}

uint64_t sub_1C488FE14()
{
  return 2137;
}

uint64_t sub_1C488FE1C()
{
  return 2138;
}

uint64_t sub_1C488FE24()
{
  return 2139;
}

uint64_t sub_1C488FE2C()
{
  return 2140;
}

uint64_t sub_1C488FE34()
{
  return 2141;
}

uint64_t sub_1C488FE3C()
{
  return 2142;
}

uint64_t sub_1C488FE44()
{
  return 2143;
}

uint64_t sub_1C488FE4C()
{
  return 2144;
}

uint64_t sub_1C488FE54()
{
  return 2146;
}

uint64_t sub_1C488FE5C()
{
  return 2147;
}

uint64_t sub_1C488FE64()
{
  return 2148;
}

uint64_t sub_1C488FE6C()
{
  return 1889;
}

uint64_t sub_1C488FE74()
{
  return 1890;
}

uint64_t sub_1C488FE7C()
{
  return 1891;
}

uint64_t sub_1C488FE84()
{
  return 1892;
}

uint64_t sub_1C488FE8C()
{
  return 1893;
}

uint64_t sub_1C488FE94()
{
  return 1894;
}

uint64_t sub_1C488FE9C()
{
  return 1895;
}

uint64_t sub_1C488FEA4()
{
  return 1896;
}

uint64_t sub_1C488FEAC()
{
  return 1897;
}

uint64_t sub_1C488FEB4()
{
  return 1898;
}

uint64_t sub_1C488FEBC()
{
  return 1899;
}

uint64_t sub_1C488FEC4()
{
  return 1900;
}

uint64_t sub_1C488FECC()
{
  return 1901;
}

uint64_t sub_1C488FED4()
{
  return 1902;
}

uint64_t sub_1C488FEDC()
{
  return 1903;
}

uint64_t sub_1C488FEE4()
{
  return 1904;
}

uint64_t sub_1C488FEEC()
{
  return 1905;
}

uint64_t sub_1C488FEF4()
{
  return 1906;
}

uint64_t sub_1C488FEFC()
{
  return 1907;
}

uint64_t sub_1C488FF04()
{
  return 1908;
}

uint64_t sub_1C488FF0C()
{
  return 1909;
}

uint64_t sub_1C488FF14()
{
  return 1910;
}

uint64_t sub_1C488FF1C()
{
  return 1911;
}

uint64_t sub_1C488FF24()
{
  return 1912;
}

uint64_t sub_1C488FF2C()
{
  return 1913;
}

uint64_t sub_1C488FF34()
{
  return 1914;
}

uint64_t sub_1C488FF3C()
{
  return 1915;
}

uint64_t sub_1C488FF44()
{
  return 1916;
}

uint64_t sub_1C488FF4C()
{
  return 1917;
}

uint64_t sub_1C488FF54()
{
  return 1918;
}

uint64_t sub_1C488FF5C()
{
  return 1919;
}

uint64_t sub_1C488FF64()
{
  return 1920;
}

uint64_t sub_1C488FF6C()
{
  return 1921;
}

uint64_t sub_1C488FF74()
{
  return 1922;
}

uint64_t sub_1C488FF7C()
{
  return 1923;
}

uint64_t sub_1C488FF84()
{
  return 1924;
}

uint64_t sub_1C488FF8C()
{
  return 1925;
}

uint64_t sub_1C488FF94()
{
  return 1926;
}

uint64_t sub_1C488FF9C()
{
  return 1927;
}

uint64_t sub_1C488FFA4()
{
  return 1928;
}

uint64_t sub_1C488FFAC()
{
  return 1929;
}

uint64_t sub_1C488FFB4()
{
  return 1930;
}

uint64_t sub_1C488FFBC()
{
  return 1931;
}

uint64_t sub_1C488FFC4()
{
  return 1932;
}

uint64_t sub_1C488FFCC()
{
  return 1933;
}

uint64_t sub_1C488FFD4()
{
  return 1934;
}

uint64_t sub_1C488FFDC()
{
  return 1935;
}

uint64_t sub_1C488FFE4()
{
  return 1936;
}

uint64_t sub_1C488FFEC()
{
  return 1937;
}

uint64_t sub_1C488FFF4()
{
  return 1938;
}

uint64_t sub_1C488FFFC()
{
  return 1939;
}

uint64_t sub_1C4890004()
{
  return 1940;
}

uint64_t sub_1C489000C()
{
  return 1941;
}

uint64_t sub_1C4890014()
{
  return 1942;
}

uint64_t sub_1C489001C()
{
  return 1944;
}

uint64_t sub_1C4890024()
{
  return 1945;
}

uint64_t sub_1C489002C()
{
  return 1946;
}

uint64_t sub_1C4890034()
{
  return 1947;
}

uint64_t sub_1C489003C()
{
  return 1948;
}

uint64_t sub_1C4890044()
{
  return 1949;
}

uint64_t sub_1C489004C()
{
  return 1950;
}

uint64_t sub_1C4890054()
{
  return 1951;
}

uint64_t sub_1C489005C()
{
  return 1952;
}

uint64_t sub_1C4890064()
{
  return 1953;
}

uint64_t sub_1C489006C()
{
  return 1954;
}

uint64_t sub_1C4890074()
{
  return 1955;
}

uint64_t sub_1C489007C()
{
  return 1956;
}

uint64_t sub_1C4890084()
{
  return 1957;
}

uint64_t sub_1C489008C()
{
  return 1959;
}

uint64_t sub_1C4890354()
{
  return 2262;
}

uint64_t sub_1C489035C()
{
  return 2263;
}

uint64_t sub_1C4890364()
{
  return 2264;
}

uint64_t sub_1C489036C()
{
  return 2265;
}

uint64_t sub_1C4890374()
{
  return 2266;
}

uint64_t sub_1C489037C()
{
  return 2267;
}

uint64_t sub_1C4890384()
{
  return 2268;
}

uint64_t sub_1C489038C()
{
  return 2269;
}

uint64_t sub_1C4890394()
{
  return 2270;
}

uint64_t sub_1C489039C()
{
  return 2214;
}

uint64_t sub_1C48903A4()
{
  return 2215;
}

uint64_t sub_1C48903AC()
{
  return 2216;
}

uint64_t sub_1C48903B4()
{
  return 2217;
}

uint64_t sub_1C48903BC()
{
  return 2218;
}

uint64_t sub_1C48903C4()
{
  return 2219;
}

uint64_t sub_1C48903CC()
{
  return 2220;
}

uint64_t sub_1C48903D4()
{
  return 2221;
}

uint64_t sub_1C48903DC()
{
  return 2222;
}

uint64_t sub_1C48903E4()
{
  return 2358;
}

uint64_t sub_1C48903EC()
{
  return 2359;
}

uint64_t sub_1C48903F4()
{
  return 2360;
}

uint64_t sub_1C48903FC()
{
  return 2361;
}

uint64_t sub_1C4890404()
{
  return 2362;
}

uint64_t sub_1C489040C()
{
  return 2363;
}

uint64_t sub_1C4890414()
{
  return 2364;
}

uint64_t sub_1C489041C()
{
  return 2365;
}

uint64_t sub_1C4890424()
{
  return 2366;
}

uint64_t sub_1C489042C()
{
  return 2310;
}

uint64_t sub_1C4890434()
{
  return 2311;
}

uint64_t sub_1C489043C()
{
  return 2312;
}

uint64_t sub_1C4890444()
{
  return 2313;
}

uint64_t sub_1C489044C()
{
  return 2314;
}

uint64_t sub_1C4890454()
{
  return 2315;
}

uint64_t sub_1C489045C()
{
  return 2316;
}

uint64_t sub_1C4890464()
{
  return 2317;
}

uint64_t sub_1C489046C()
{
  return 2318;
}

uint64_t sub_1C4890474()
{
  return 3716;
}

uint64_t sub_1C489047C()
{
  return 3717;
}

uint64_t sub_1C4890484()
{
  return 3718;
}

uint64_t sub_1C489048C()
{
  return 3719;
}

uint64_t sub_1C4890494()
{
  return 3720;
}

uint64_t sub_1C489049C()
{
  return 3721;
}

uint64_t sub_1C48904A4()
{
  return 3722;
}

uint64_t sub_1C48904AC()
{
  return 3723;
}

uint64_t sub_1C48904B4()
{
  return 3724;
}

uint64_t sub_1C48904BC()
{
  return 3812;
}

uint64_t sub_1C48904C4()
{
  return 3813;
}

uint64_t sub_1C48904CC()
{
  return 3814;
}

uint64_t sub_1C48904D4()
{
  return 3815;
}

uint64_t sub_1C48904DC()
{
  return 3816;
}

uint64_t sub_1C48904E4()
{
  return 3817;
}

uint64_t sub_1C48904EC()
{
  return 3818;
}

uint64_t sub_1C48904F4()
{
  return 3819;
}

uint64_t sub_1C48904FC()
{
  return 3820;
}

uint64_t sub_1C4890504()
{
  return 3668;
}

uint64_t sub_1C489050C()
{
  return 3669;
}

uint64_t sub_1C4890514()
{
  return 3670;
}

uint64_t sub_1C489051C()
{
  return 3671;
}

uint64_t sub_1C4890524()
{
  return 3672;
}

uint64_t sub_1C489052C()
{
  return 3673;
}

uint64_t sub_1C4890534()
{
  return 3674;
}

uint64_t sub_1C489053C()
{
  return 3675;
}

uint64_t sub_1C4890544()
{
  return 3676;
}

uint64_t sub_1C489054C()
{
  return 3764;
}

uint64_t sub_1C4890554()
{
  return 3765;
}

uint64_t sub_1C489055C()
{
  return 3766;
}

uint64_t sub_1C4890564()
{
  return 3767;
}

uint64_t sub_1C489056C()
{
  return 3768;
}

uint64_t sub_1C4890574()
{
  return 3769;
}

uint64_t sub_1C489057C()
{
  return 3770;
}

uint64_t sub_1C4890584()
{
  return 3771;
}

uint64_t sub_1C489058C()
{
  return 3772;
}

uint64_t sub_1C4890594()
{
  return 2246;
}

uint64_t sub_1C489059C()
{
  return 2247;
}

uint64_t sub_1C48905A4()
{
  return 2248;
}

uint64_t sub_1C48905AC()
{
  return 2249;
}

uint64_t sub_1C48905B4()
{
  return 2250;
}

uint64_t sub_1C48905BC()
{
  return 2251;
}

uint64_t sub_1C48905C4()
{
  return 2252;
}

uint64_t sub_1C48905CC()
{
  return 2253;
}

uint64_t sub_1C48905D4()
{
  return 2254;
}

uint64_t sub_1C48905DC()
{
  return 2198;
}

uint64_t sub_1C48905E4()
{
  return 2199;
}

uint64_t sub_1C48905EC()
{
  return 2200;
}

uint64_t sub_1C48905F4()
{
  return 2201;
}

uint64_t sub_1C48905FC()
{
  return 2202;
}

uint64_t sub_1C4890604()
{
  return 2203;
}

uint64_t sub_1C489060C()
{
  return 2204;
}

uint64_t sub_1C4890614()
{
  return 2205;
}

uint64_t sub_1C489061C()
{
  return 2206;
}

uint64_t sub_1C4890624()
{
  return 2342;
}

uint64_t sub_1C489062C()
{
  return 2343;
}

uint64_t sub_1C4890634()
{
  return 2344;
}

uint64_t sub_1C489063C()
{
  return 2345;
}

uint64_t sub_1C4890644()
{
  return 2346;
}

uint64_t sub_1C489064C()
{
  return 2347;
}

uint64_t sub_1C4890654()
{
  return 2348;
}

uint64_t sub_1C489065C()
{
  return 2349;
}

uint64_t sub_1C4890664()
{
  return 2350;
}

uint64_t sub_1C489066C()
{
  return 2294;
}

uint64_t sub_1C4890674()
{
  return 2295;
}

uint64_t sub_1C489067C()
{
  return 2296;
}

uint64_t sub_1C4890684()
{
  return 2297;
}

uint64_t sub_1C489068C()
{
  return 2298;
}

uint64_t sub_1C4890694()
{
  return 2299;
}

uint64_t sub_1C489069C()
{
  return 2300;
}

uint64_t sub_1C48906A4()
{
  return 2301;
}

uint64_t sub_1C48906AC()
{
  return 2302;
}

uint64_t sub_1C48906B4()
{
  return 3700;
}

uint64_t sub_1C48906BC()
{
  return 3701;
}

uint64_t sub_1C48906C4()
{
  return 3702;
}

uint64_t sub_1C48906CC()
{
  return 3703;
}

uint64_t sub_1C48906D4()
{
  return 3704;
}

uint64_t sub_1C48906DC()
{
  return 3705;
}

uint64_t sub_1C48906E4()
{
  return 3706;
}

uint64_t sub_1C48906EC()
{
  return 3707;
}

uint64_t sub_1C48906F4()
{
  return 3708;
}

uint64_t sub_1C48906FC()
{
  return 3796;
}

uint64_t sub_1C4890704()
{
  return 3797;
}

uint64_t sub_1C489070C()
{
  return 3798;
}

uint64_t sub_1C4890714()
{
  return 3799;
}

uint64_t sub_1C489071C()
{
  return 3800;
}

uint64_t sub_1C4890724()
{
  return 3801;
}

uint64_t sub_1C489072C()
{
  return 3802;
}

uint64_t sub_1C4890734()
{
  return 3803;
}

uint64_t sub_1C489073C()
{
  return 3804;
}

uint64_t sub_1C4890744()
{
  return 3652;
}

uint64_t sub_1C489074C()
{
  return 3653;
}

uint64_t sub_1C4890754()
{
  return 3654;
}

uint64_t sub_1C489075C()
{
  return 3655;
}

uint64_t sub_1C4890764()
{
  return 3656;
}

uint64_t sub_1C489076C()
{
  return 3657;
}

uint64_t sub_1C4890774()
{
  return 3658;
}

uint64_t sub_1C489077C()
{
  return 3659;
}

uint64_t sub_1C4890784()
{
  return 3660;
}

uint64_t sub_1C489078C()
{
  return 3748;
}

uint64_t sub_1C4890794()
{
  return 3749;
}

uint64_t sub_1C489079C()
{
  return 3750;
}

uint64_t sub_1C48907A4()
{
  return 3751;
}

uint64_t sub_1C48907AC()
{
  return 3752;
}

uint64_t sub_1C48907B4()
{
  return 3753;
}

uint64_t sub_1C48907BC()
{
  return 3754;
}

uint64_t sub_1C48907C4()
{
  return 3755;
}

uint64_t sub_1C48907CC()
{
  return 3756;
}

uint64_t sub_1C48914A4()
{
  return 1318;
}

uint64_t sub_1C48914AC()
{
  return 1319;
}

uint64_t sub_1C48914B4()
{
  return 1320;
}

uint64_t sub_1C48914BC()
{
  return 1321;
}

uint64_t sub_1C48914C4()
{
  return 1322;
}

uint64_t sub_1C48914CC()
{
  return 1323;
}

uint64_t sub_1C48914D4()
{
  return 1324;
}

uint64_t sub_1C48914DC()
{
  return 1325;
}

uint64_t sub_1C48914E4()
{
  return 1326;
}

uint64_t sub_1C48914EC()
{
  return 1327;
}

uint64_t sub_1C48914F4()
{
  return 1328;
}

uint64_t sub_1C48914FC()
{
  return 1329;
}

uint64_t sub_1C4891504()
{
  return 1331;
}

uint64_t sub_1C489150C()
{
  return 1332;
}

uint64_t sub_1C4891514()
{
  return 1333;
}

uint64_t sub_1C489151C()
{
  return 1334;
}

uint64_t sub_1C4891524()
{
  return 1335;
}

uint64_t sub_1C489152C()
{
  return 1336;
}

uint64_t sub_1C4891534()
{
  return 1337;
}

uint64_t sub_1C489153C()
{
  return 1338;
}

uint64_t sub_1C4891544()
{
  return 1339;
}

uint64_t sub_1C489154C()
{
  return 1340;
}

uint64_t sub_1C4891554()
{
  return 1341;
}

uint64_t sub_1C489155C()
{
  return 1342;
}

uint64_t sub_1C4891564()
{
  return 1343;
}

uint64_t sub_1C489156C()
{
  return 1264;
}

uint64_t sub_1C4891574()
{
  return 1265;
}

uint64_t sub_1C489157C()
{
  return 1266;
}

uint64_t sub_1C4891584()
{
  return 1267;
}

uint64_t sub_1C489158C()
{
  return 1268;
}

uint64_t sub_1C4891594()
{
  return 1269;
}

uint64_t sub_1C489159C()
{
  return 1270;
}

uint64_t sub_1C48915A4()
{
  return 1271;
}

uint64_t sub_1C48915AC()
{
  return 1272;
}

uint64_t sub_1C48915B4()
{
  return 1273;
}

uint64_t sub_1C48915BC()
{
  return 1274;
}

uint64_t sub_1C48915C4()
{
  return 1275;
}

uint64_t sub_1C48915CC()
{
  return 1277;
}

uint64_t sub_1C48915D4()
{
  return 1278;
}

uint64_t sub_1C48915DC()
{
  return 1279;
}

uint64_t sub_1C48915E4()
{
  return 1280;
}

uint64_t sub_1C48915EC()
{
  return 1281;
}

uint64_t sub_1C48915F4()
{
  return 1282;
}

uint64_t sub_1C48915FC()
{
  return 1283;
}

uint64_t sub_1C4891604()
{
  return 1284;
}

uint64_t sub_1C489160C()
{
  return 1285;
}

uint64_t sub_1C4891614()
{
  return 1286;
}

uint64_t sub_1C489161C()
{
  return 1287;
}

uint64_t sub_1C4891624()
{
  return 1288;
}

uint64_t sub_1C489162C()
{
  return 1289;
}

uint64_t sub_1C48916BC()
{
  return 1426;
}

uint64_t sub_1C48916C4()
{
  return 1427;
}

uint64_t sub_1C48916CC()
{
  return 1428;
}

uint64_t sub_1C48916D4()
{
  return 1429;
}

uint64_t sub_1C48916DC()
{
  return 1430;
}

uint64_t sub_1C48916E4()
{
  return 1431;
}

uint64_t sub_1C48916EC()
{
  return 1432;
}

uint64_t sub_1C48916F4()
{
  return 1433;
}

uint64_t sub_1C48916FC()
{
  return 1434;
}

uint64_t sub_1C4891704()
{
  return 1435;
}

uint64_t sub_1C489170C()
{
  return 1436;
}

uint64_t sub_1C4891714()
{
  return 1437;
}

uint64_t sub_1C489171C()
{
  return 1439;
}

uint64_t sub_1C4891724()
{
  return 1440;
}

uint64_t sub_1C489172C()
{
  return 1441;
}

uint64_t sub_1C4891734()
{
  return 1442;
}

uint64_t sub_1C489173C()
{
  return 1443;
}

uint64_t sub_1C4891744()
{
  return 1444;
}

uint64_t sub_1C489174C()
{
  return 1445;
}

uint64_t sub_1C4891754()
{
  return 1446;
}

uint64_t sub_1C489175C()
{
  return 1447;
}

uint64_t sub_1C4891764()
{
  return 1448;
}

uint64_t sub_1C489176C()
{
  return 1449;
}

uint64_t sub_1C4891774()
{
  return 1450;
}

uint64_t sub_1C489177C()
{
  return 1451;
}

uint64_t sub_1C4891784()
{
  return 1372;
}

uint64_t sub_1C489178C()
{
  return 1373;
}

uint64_t sub_1C4891794()
{
  return 1374;
}

uint64_t sub_1C489179C()
{
  return 1375;
}

uint64_t sub_1C48917A4()
{
  return 1376;
}

uint64_t sub_1C48917AC()
{
  return 1377;
}

uint64_t sub_1C48917B4()
{
  return 1378;
}

uint64_t sub_1C48917BC()
{
  return 1379;
}

uint64_t sub_1C48917C4()
{
  return 1380;
}

uint64_t sub_1C48917CC()
{
  return 1381;
}

uint64_t sub_1C48917D4()
{
  return 1382;
}

uint64_t sub_1C48917DC()
{
  return 1383;
}

uint64_t sub_1C48917E4()
{
  return 1385;
}

uint64_t sub_1C48917EC()
{
  return 1386;
}

uint64_t sub_1C48917F4()
{
  return 1387;
}

uint64_t sub_1C48917FC()
{
  return 1388;
}

uint64_t sub_1C4891804()
{
  return 1389;
}

uint64_t sub_1C489180C()
{
  return 1390;
}

uint64_t sub_1C4891814()
{
  return 1391;
}

uint64_t sub_1C489181C()
{
  return 1392;
}

uint64_t sub_1C4891824()
{
  return 1393;
}

uint64_t sub_1C489182C()
{
  return 1394;
}

uint64_t sub_1C4891834()
{
  return 1395;
}

uint64_t sub_1C489183C()
{
  return 1396;
}

uint64_t sub_1C4891844()
{
  return 1397;
}

uint64_t sub_1C48918D4()
{
  return 822;
}

uint64_t sub_1C48918DC()
{
  return 823;
}

uint64_t sub_1C48918E4()
{
  return 824;
}

uint64_t sub_1C48918EC()
{
  return 825;
}

uint64_t sub_1C48918F4()
{
  return 826;
}

uint64_t sub_1C48918FC()
{
  return 827;
}

uint64_t sub_1C4891904()
{
  return 828;
}

uint64_t sub_1C489190C()
{
  return 829;
}

uint64_t sub_1C4891914()
{
  return 8079;
}

uint64_t sub_1C489191C()
{
  return 8080;
}

uint64_t sub_1C4891924()
{
  return 8081;
}

uint64_t sub_1C489192C()
{
  return 8082;
}

uint64_t sub_1C4891934()
{
  return 8083;
}

uint64_t sub_1C489193C()
{
  return 8084;
}

uint64_t sub_1C4891944()
{
  return 8085;
}

uint64_t sub_1C489194C()
{
  return 8086;
}

uint64_t sub_1C4891954()
{
  return 6183;
}

uint64_t sub_1C489195C()
{
  return 6184;
}

uint64_t sub_1C4891964()
{
  return 6185;
}

uint64_t sub_1C489196C()
{
  return 6186;
}

uint64_t sub_1C4891974()
{
  return 6187;
}

uint64_t sub_1C489197C()
{
  return 6188;
}

uint64_t sub_1C4891984()
{
  return 6189;
}

uint64_t sub_1C489198C()
{
  return 6190;
}

uint64_t sub_1C4891994()
{
  return 7971;
}

uint64_t sub_1C489199C()
{
  return 7972;
}

uint64_t sub_1C48919A4()
{
  return 7973;
}

uint64_t sub_1C48919AC()
{
  return 7974;
}

uint64_t sub_1C48919B4()
{
  return 7975;
}

uint64_t sub_1C48919BC()
{
  return 7976;
}

uint64_t sub_1C48919C4()
{
  return 7977;
}

uint64_t sub_1C48919CC()
{
  return 7978;
}

uint64_t sub_1C48919D4()
{
  return 8133;
}

uint64_t sub_1C48919DC()
{
  return 8134;
}

uint64_t sub_1C48919E4()
{
  return 8135;
}

uint64_t sub_1C48919EC()
{
  return 8136;
}

uint64_t sub_1C48919F4()
{
  return 8137;
}

uint64_t sub_1C48919FC()
{
  return 8138;
}

uint64_t sub_1C4891A04()
{
  return 8139;
}

uint64_t sub_1C4891A0C()
{
  return 8140;
}

uint64_t sub_1C4891A14()
{
  return 6237;
}

uint64_t sub_1C4891A1C()
{
  return 6238;
}

uint64_t sub_1C4891A24()
{
  return 6239;
}

uint64_t sub_1C4891A2C()
{
  return 6240;
}

uint64_t sub_1C4891A34()
{
  return 6241;
}

uint64_t sub_1C4891A3C()
{
  return 6242;
}

uint64_t sub_1C4891A44()
{
  return 6243;
}

uint64_t sub_1C4891A4C()
{
  return 6244;
}

uint64_t sub_1C4891A54()
{
  return 876;
}

uint64_t sub_1C4891A5C()
{
  return 877;
}

uint64_t sub_1C4891A64()
{
  return 878;
}

uint64_t sub_1C4891A6C()
{
  return 879;
}

uint64_t sub_1C4891A74()
{
  return 880;
}

uint64_t sub_1C4891A7C()
{
  return 881;
}

uint64_t sub_1C4891A84()
{
  return 882;
}

uint64_t sub_1C4891A8C()
{
  return 883;
}

uint64_t sub_1C4891A94()
{
  return 8025;
}

uint64_t sub_1C4891A9C()
{
  return 8026;
}

uint64_t sub_1C4891AA4()
{
  return 8027;
}

uint64_t sub_1C4891AAC()
{
  return 8028;
}

uint64_t sub_1C4891AB4()
{
  return 8029;
}

uint64_t sub_1C4891ABC()
{
  return 8030;
}

uint64_t sub_1C4891AC4()
{
  return 8031;
}

uint64_t sub_1C4891ACC()
{
  return 8032;
}

uint64_t sub_1C4891AD4()
{
  return 8106;
}

uint64_t sub_1C4891ADC()
{
  return 8107;
}

uint64_t sub_1C4891AE4()
{
  return 8108;
}

uint64_t sub_1C4891AEC()
{
  return 8109;
}

uint64_t sub_1C4891AF4()
{
  return 8110;
}

uint64_t sub_1C4891AFC()
{
  return 8111;
}

uint64_t sub_1C4891B04()
{
  return 8112;
}

uint64_t sub_1C4891B0C()
{
  return 8160;
}

uint64_t sub_1C4891B14()
{
  return 8161;
}

uint64_t sub_1C4891B1C()
{
  return 8162;
}

uint64_t sub_1C4891B24()
{
  return 8163;
}

uint64_t sub_1C4891B2C()
{
  return 8164;
}

uint64_t sub_1C4891B34()
{
  return 8165;
}

uint64_t sub_1C4891B3C()
{
  return 8166;
}

uint64_t sub_1C4891B44()
{
  return 849;
}

uint64_t sub_1C4891B4C()
{
  return 850;
}

uint64_t sub_1C4891B54()
{
  return 851;
}

uint64_t sub_1C4891B5C()
{
  return 852;
}

uint64_t sub_1C4891B64()
{
  return 853;
}

uint64_t sub_1C4891B6C()
{
  return 854;
}

uint64_t sub_1C4891B74()
{
  return 855;
}

uint64_t sub_1C4891B7C()
{
  return 6210;
}

uint64_t sub_1C4891B84()
{
  return 6211;
}

uint64_t sub_1C4891B8C()
{
  return 6212;
}

uint64_t sub_1C4891B94()
{
  return 6213;
}

uint64_t sub_1C4891B9C()
{
  return 6214;
}

uint64_t sub_1C4891BA4()
{
  return 6215;
}

uint64_t sub_1C4891BAC()
{
  return 6216;
}

uint64_t sub_1C4891BB4()
{
  return 6264;
}

uint64_t sub_1C4891BBC()
{
  return 6265;
}

uint64_t sub_1C4891BC4()
{
  return 6266;
}

uint64_t sub_1C4891BCC()
{
  return 6267;
}

uint64_t sub_1C4891BD4()
{
  return 6268;
}

uint64_t sub_1C4891BDC()
{
  return 6269;
}

uint64_t sub_1C4891BE4()
{
  return 6270;
}

uint64_t sub_1C4891BEC()
{
  return 903;
}

uint64_t sub_1C4891BF4()
{
  return 904;
}

uint64_t sub_1C4891BFC()
{
  return 905;
}

uint64_t sub_1C4891C04()
{
  return 906;
}

uint64_t sub_1C4891C0C()
{
  return 907;
}

uint64_t sub_1C4891C14()
{
  return 908;
}

uint64_t sub_1C4891C1C()
{
  return 909;
}

uint64_t sub_1C4891C24()
{
  return 7998;
}

uint64_t sub_1C4891C2C()
{
  return 7999;
}

uint64_t sub_1C4891C34()
{
  return 8000;
}

uint64_t sub_1C4891C3C()
{
  return 8001;
}

uint64_t sub_1C4891C44()
{
  return 8002;
}

uint64_t sub_1C4891C4C()
{
  return 8003;
}

uint64_t sub_1C4891C54()
{
  return 8004;
}

uint64_t sub_1C4891C5C()
{
  return 8052;
}

uint64_t sub_1C4891C64()
{
  return 8053;
}

uint64_t sub_1C4891C6C()
{
  return 8054;
}

uint64_t sub_1C4891C74()
{
  return 8055;
}

uint64_t sub_1C4891C7C()
{
  return 8056;
}

uint64_t sub_1C4891C84()
{
  return 8057;
}

uint64_t sub_1C4891C8C()
{
  return 8058;
}

uint64_t sub_1C4891C94()
{
  return 6075;
}

uint64_t sub_1C4891C9C()
{
  return 6076;
}

uint64_t sub_1C4891CA4()
{
  return 6077;
}

uint64_t sub_1C4891CAC()
{
  return 6078;
}

uint64_t sub_1C4891CB4()
{
  return 6079;
}

uint64_t sub_1C4891CBC()
{
  return 6080;
}

uint64_t sub_1C4891CC4()
{
  return 6081;
}

uint64_t sub_1C4891CCC()
{
  return 6082;
}

uint64_t sub_1C4891CD4()
{
  return 6129;
}

uint64_t sub_1C4891CDC()
{
  return 6130;
}

uint64_t sub_1C4891CE4()
{
  return 6131;
}

uint64_t sub_1C4891CEC()
{
  return 6132;
}

uint64_t sub_1C4891CF4()
{
  return 6133;
}

uint64_t sub_1C4891CFC()
{
  return 6134;
}

uint64_t sub_1C4891D04()
{
  return 6135;
}

uint64_t sub_1C4891D0C()
{
  return 6136;
}

uint64_t sub_1C4891D14()
{
  return 6102;
}

uint64_t sub_1C4891D1C()
{
  return 6103;
}

uint64_t sub_1C4891D24()
{
  return 6104;
}

uint64_t sub_1C4891D2C()
{
  return 6105;
}

uint64_t sub_1C4891D34()
{
  return 6106;
}

uint64_t sub_1C4891D3C()
{
  return 6107;
}

uint64_t sub_1C4891D44()
{
  return 6108;
}

uint64_t sub_1C4891D4C()
{
  return 6156;
}

uint64_t sub_1C4891D54()
{
  return 6157;
}

uint64_t sub_1C4891D5C()
{
  return 6158;
}

uint64_t sub_1C4891D64()
{
  return 6159;
}

uint64_t sub_1C4891D6C()
{
  return 6160;
}

uint64_t sub_1C4891D74()
{
  return 6161;
}

uint64_t sub_1C4891D7C()
{
  return 6162;
}

uint64_t sub_1C4891D84()
{
  return 3524;
}

uint64_t sub_1C4891D8C()
{
  return 3525;
}

uint64_t sub_1C4891D94()
{
  return 3526;
}

uint64_t sub_1C4891D9C()
{
  return 3532;
}

uint64_t sub_1C4891DA4()
{
  return 3536;
}

uint64_t sub_1C4891DAC()
{
  return 3542;
}

uint64_t sub_1C4891DB4()
{
  return 3545;
}

uint64_t sub_1C4891DBC()
{
  return 3555;
}

uint64_t sub_1C4891DC4()
{
  return 3559;
}

uint64_t sub_1C4891DCC()
{
  return 3560;
}

uint64_t sub_1C4891DD4()
{
  return 3596;
}

uint64_t sub_1C4891DDC()
{
  return 3597;
}

uint64_t sub_1C4891DE4()
{
  return 3598;
}

uint64_t sub_1C4891DEC()
{
  return 3604;
}

uint64_t sub_1C4891DF4()
{
  return 3608;
}

uint64_t sub_1C4891DFC()
{
  return 3614;
}

uint64_t sub_1C4891E04()
{
  return 3617;
}

uint64_t sub_1C4891E0C()
{
  return 3627;
}

uint64_t sub_1C4891E14()
{
  return 3631;
}

uint64_t sub_1C4891E1C()
{
  return 3632;
}

uint64_t sub_1C4891E24()
{
  return 3491;
}

uint64_t sub_1C4891E2C()
{
  return 3492;
}

uint64_t sub_1C4891E34()
{
  return 3493;
}

uint64_t sub_1C4891E3C()
{
  return 3494;
}

uint64_t sub_1C4891E44()
{
  return 3495;
}

uint64_t sub_1C4891E4C()
{
  return 3496;
}

uint64_t sub_1C4891E54()
{
  return 3497;
}

uint64_t sub_1C4891E5C()
{
  return 3498;
}

uint64_t sub_1C4891E64()
{
  return 3499;
}

uint64_t sub_1C4891E6C()
{
  return 3500;
}

uint64_t sub_1C4891E74()
{
  return 3501;
}

uint64_t sub_1C4891E7C()
{
  return 3502;
}

uint64_t sub_1C4891E84()
{
  return 3503;
}

uint64_t sub_1C4891E8C()
{
  return 3504;
}

uint64_t sub_1C4891E94()
{
  return 3505;
}

uint64_t sub_1C4891E9C()
{
  return 3506;
}

uint64_t sub_1C4891EA4()
{
  return 3507;
}

uint64_t sub_1C4891EAC()
{
  return 3508;
}

uint64_t sub_1C4891EB4()
{
  return 3509;
}

uint64_t sub_1C4891EBC()
{
  return 3510;
}

uint64_t sub_1C4891EC4()
{
  return 3511;
}

uint64_t sub_1C4891ECC()
{
  return 3512;
}

uint64_t sub_1C4891ED4()
{
  return 3513;
}

uint64_t sub_1C4891EDC()
{
  return 3514;
}

uint64_t sub_1C4891EE4()
{
  return 3515;
}

uint64_t sub_1C4891EEC()
{
  return 3516;
}

uint64_t sub_1C4891EF4()
{
  return 3517;
}

uint64_t sub_1C4891EFC()
{
  return 3518;
}

uint64_t sub_1C4891F04()
{
  return 3519;
}

uint64_t sub_1C4891F0C()
{
  return 3520;
}

uint64_t sub_1C4891F14()
{
  return 3521;
}

uint64_t sub_1C4891F1C()
{
  return 3522;
}

uint64_t sub_1C4891F24()
{
  return 3523;
}

uint64_t sub_1C4891F2C()
{
  return 3527;
}

uint64_t sub_1C4891F34()
{
  return 3528;
}

uint64_t sub_1C4891F3C()
{
  return 3529;
}

uint64_t sub_1C4891F44()
{
  return 3530;
}

uint64_t sub_1C4891F4C()
{
  return 3531;
}

uint64_t sub_1C4891F54()
{
  return 3533;
}

uint64_t sub_1C4891F5C()
{
  return 3534;
}

uint64_t sub_1C4891F64()
{
  return 3535;
}

uint64_t sub_1C4891F6C()
{
  return 3537;
}

uint64_t sub_1C4891F74()
{
  return 3538;
}

uint64_t sub_1C4891F7C()
{
  return 3539;
}

uint64_t sub_1C4891F84()
{
  return 3540;
}

uint64_t sub_1C4891F8C()
{
  return 3541;
}

uint64_t sub_1C4891F94()
{
  return 3543;
}

uint64_t sub_1C4891F9C()
{
  return 3544;
}

uint64_t sub_1C4891FA4()
{
  return 3546;
}

uint64_t sub_1C4891FAC()
{
  return 3547;
}

uint64_t sub_1C4891FB4()
{
  return 3548;
}

uint64_t sub_1C4891FBC()
{
  return 3549;
}

uint64_t sub_1C4891FC4()
{
  return 3550;
}

uint64_t sub_1C4891FCC()
{
  return 3551;
}

uint64_t sub_1C4891FD4()
{
  return 3552;
}

uint64_t sub_1C4891FDC()
{
  return 3553;
}

uint64_t sub_1C4891FE4()
{
  return 3554;
}

uint64_t sub_1C4891FEC()
{
  return 3556;
}

uint64_t sub_1C4891FF4()
{
  return 3557;
}

uint64_t sub_1C4891FFC()
{
  return 3558;
}

uint64_t sub_1C4892004()
{
  return 3563;
}

uint64_t sub_1C489200C()
{
  return 3564;
}

uint64_t sub_1C4892014()
{
  return 3565;
}

uint64_t sub_1C489201C()
{
  return 3566;
}

uint64_t sub_1C4892024()
{
  return 3567;
}

uint64_t sub_1C489202C()
{
  return 3568;
}

uint64_t sub_1C4892034()
{
  return 3569;
}

uint64_t sub_1C489203C()
{
  return 3570;
}

uint64_t sub_1C4892044()
{
  return 3571;
}

uint64_t sub_1C489204C()
{
  return 3572;
}

uint64_t sub_1C4892054()
{
  return 3573;
}

uint64_t sub_1C489205C()
{
  return 3574;
}

uint64_t sub_1C4892064()
{
  return 3575;
}

uint64_t sub_1C489206C()
{
  return 3576;
}

uint64_t sub_1C4892074()
{
  return 3577;
}

uint64_t sub_1C489207C()
{
  return 3578;
}

uint64_t sub_1C4892084()
{
  return 3579;
}

uint64_t sub_1C489208C()
{
  return 3580;
}

uint64_t sub_1C4892094()
{
  return 3581;
}

uint64_t sub_1C489209C()
{
  return 3582;
}

uint64_t sub_1C48920A4()
{
  return 3583;
}

uint64_t sub_1C48920AC()
{
  return 3584;
}

uint64_t sub_1C48920B4()
{
  return 3585;
}

uint64_t sub_1C48920BC()
{
  return 3586;
}

uint64_t sub_1C48920C4()
{
  return 3587;
}

uint64_t sub_1C48920CC()
{
  return 3588;
}

uint64_t sub_1C48920D4()
{
  return 3589;
}

uint64_t sub_1C48920DC()
{
  return 3590;
}

uint64_t sub_1C48920E4()
{
  return 3591;
}

uint64_t sub_1C48920EC()
{
  return 3592;
}

uint64_t sub_1C48920F4()
{
  return 3593;
}

uint64_t sub_1C48920FC()
{
  return 3594;
}

uint64_t sub_1C4892104()
{
  return 3595;
}

uint64_t sub_1C489210C()
{
  return 3599;
}

uint64_t sub_1C4892114()
{
  return 3600;
}

uint64_t sub_1C489211C()
{
  return 3601;
}

uint64_t sub_1C4892124()
{
  return 3602;
}

uint64_t sub_1C489212C()
{
  return 3603;
}

uint64_t sub_1C4892134()
{
  return 3605;
}

uint64_t sub_1C489213C()
{
  return 3606;
}

uint64_t sub_1C4892144()
{
  return 3607;
}

uint64_t sub_1C489214C()
{
  return 3609;
}

uint64_t sub_1C4892154()
{
  return 3610;
}

uint64_t sub_1C489215C()
{
  return 3611;
}

uint64_t sub_1C4892164()
{
  return 3612;
}

uint64_t sub_1C489216C()
{
  return 3613;
}

uint64_t sub_1C4892174()
{
  return 3615;
}

uint64_t sub_1C489217C()
{
  return 3616;
}

uint64_t sub_1C4892184()
{
  return 3618;
}

uint64_t sub_1C489218C()
{
  return 3619;
}

uint64_t sub_1C4892194()
{
  return 3620;
}

uint64_t sub_1C489219C()
{
  return 3621;
}

uint64_t sub_1C48921A4()
{
  return 3622;
}

uint64_t sub_1C48921AC()
{
  return 3623;
}

uint64_t sub_1C48921B4()
{
  return 3624;
}

uint64_t sub_1C48921BC()
{
  return 3625;
}

uint64_t sub_1C48921C4()
{
  return 3626;
}

uint64_t sub_1C48921CC()
{
  return 3628;
}

uint64_t sub_1C48921D4()
{
  return 3629;
}

uint64_t sub_1C48921DC()
{
  return 3630;
}

uint64_t sub_1C48921E4()
{
  return 3058;
}

uint64_t sub_1C48921EC()
{
  return 3060;
}

uint64_t sub_1C48921F4()
{
  return 3062;
}

uint64_t sub_1C48921FC()
{
  return 3065;
}

uint64_t sub_1C4892204()
{
  return 3066;
}

uint64_t sub_1C489220C()
{
  return 3069;
}

uint64_t sub_1C4892214()
{
  return 3070;
}

uint64_t sub_1C489221C()
{
  return 3076;
}

uint64_t sub_1C4892224()
{
  return 3078;
}

uint64_t sub_1C489222C()
{
  return 3079;
}

uint64_t sub_1C4892234()
{
  return 3081;
}

uint64_t sub_1C489223C()
{
  return 3082;
}

uint64_t sub_1C4892244()
{
  return 3085;
}

uint64_t sub_1C489224C()
{
  return 3089;
}

uint64_t sub_1C4892254()
{
  return 3092;
}

uint64_t sub_1C489225C()
{
  return 3093;
}

uint64_t sub_1C4892264()
{
  return 3094;
}

uint64_t sub_1C489226C()
{
  return 3098;
}

uint64_t sub_1C4892274()
{
  return 3101;
}

uint64_t sub_1C489227C()
{
  return 3103;
}

uint64_t sub_1C4892284()
{
  return 3105;
}

uint64_t sub_1C489228C()
{
  return 3109;
}

uint64_t sub_1C4892294()
{
  return 3111;
}

uint64_t sub_1C489229C()
{
  return 3112;
}

uint64_t sub_1C48922A4()
{
  return 3114;
}

uint64_t sub_1C48922AC()
{
  return 3115;
}

uint64_t sub_1C48922B4()
{
  return 3116;
}

uint64_t sub_1C48922BC()
{
  return 3120;
}

uint64_t sub_1C48922C4()
{
  return 3122;
}

uint64_t sub_1C48922CC()
{
  return 3124;
}

uint64_t sub_1C48922D4()
{
  return 3125;
}

uint64_t sub_1C48922DC()
{
  return 3126;
}

uint64_t sub_1C48922E4()
{
  return 3127;
}

uint64_t sub_1C48922EC()
{
  return 3128;
}

uint64_t sub_1C48922F4()
{
  return 3133;
}

uint64_t sub_1C48922FC()
{
  return 3136;
}

uint64_t sub_1C4892304()
{
  return 3138;
}

uint64_t sub_1C489230C()
{
  return 3141;
}

uint64_t sub_1C4892314()
{
  return 3147;
}

uint64_t sub_1C489231C()
{
  return 3150;
}

uint64_t sub_1C4892324()
{
  return 3151;
}

uint64_t sub_1C489232C()
{
  return 3152;
}

uint64_t sub_1C4892334()
{
  return 2607;
}

uint64_t sub_1C489233C()
{
  return 2614;
}

uint64_t sub_1C4892344()
{
  return 2616;
}

uint64_t sub_1C489234C()
{
  return 2620;
}

uint64_t sub_1C4892354()
{
  return 2625;
}

uint64_t sub_1C489235C()
{
  return 2628;
}

uint64_t sub_1C4892364()
{
  return 2630;
}

uint64_t sub_1C489236C()
{
  return 2633;
}

uint64_t sub_1C4892374()
{
  return 2642;
}

uint64_t sub_1C489237C()
{
  return 2643;
}

uint64_t sub_1C4892384()
{
  return 2499;
}

uint64_t sub_1C489238C()
{
  return 2506;
}

uint64_t sub_1C4892394()
{
  return 2508;
}

uint64_t sub_1C489239C()
{
  return 2512;
}

uint64_t sub_1C48923A4()
{
  return 2520;
}

uint64_t sub_1C48923AC()
{
  return 2522;
}

uint64_t sub_1C48923B4()
{
  return 2525;
}

uint64_t sub_1C48923BC()
{
  return 2534;
}

uint64_t sub_1C48923C4()
{
  return 2535;
}

uint64_t sub_1C48923CC()
{
  return 3223;
}

uint64_t sub_1C48923D4()
{
  return 3232;
}

uint64_t sub_1C48923DC()
{
  return 3236;
}

uint64_t sub_1C48923E4()
{
  return 3244;
}

uint64_t sub_1C48923EC()
{
  return 3249;
}

uint64_t sub_1C48923F4()
{
  return 3258;
}

uint64_t sub_1C48923FC()
{
  return 3259;
}

uint64_t sub_1C4892404()
{
  return 3274;
}

uint64_t sub_1C489240C()
{
  return 3276;
}

uint64_t sub_1C4892414()
{
  return 3278;
}

uint64_t sub_1C489241C()
{
  return 3281;
}

uint64_t sub_1C4892424()
{
  return 3282;
}

uint64_t sub_1C489242C()
{
  return 3285;
}

uint64_t sub_1C4892434()
{
  return 3286;
}

uint64_t sub_1C489243C()
{
  return 3292;
}

uint64_t sub_1C4892444()
{
  return 3294;
}

uint64_t sub_1C489244C()
{
  return 3295;
}

uint64_t sub_1C4892454()
{
  return 3297;
}

uint64_t sub_1C489245C()
{
  return 3298;
}

uint64_t sub_1C4892464()
{
  return 3301;
}

uint64_t sub_1C489246C()
{
  return 3305;
}

uint64_t sub_1C4892474()
{
  return 3308;
}

uint64_t sub_1C489247C()
{
  return 3309;
}

uint64_t sub_1C4892484()
{
  return 3310;
}

uint64_t sub_1C489248C()
{
  return 3314;
}

uint64_t sub_1C4892494()
{
  return 3317;
}

uint64_t sub_1C489249C()
{
  return 3319;
}

uint64_t sub_1C48924A4()
{
  return 3321;
}

uint64_t sub_1C48924AC()
{
  return 3325;
}

uint64_t sub_1C48924B4()
{
  return 3327;
}

uint64_t sub_1C48924BC()
{
  return 3328;
}

uint64_t sub_1C48924C4()
{
  return 3330;
}

uint64_t sub_1C48924CC()
{
  return 3331;
}

uint64_t sub_1C48924D4()
{
  return 3332;
}

uint64_t sub_1C48924DC()
{
  return 3336;
}

uint64_t sub_1C48924E4()
{
  return 3338;
}

uint64_t sub_1C48924EC()
{
  return 3340;
}

uint64_t sub_1C48924F4()
{
  return 3341;
}

uint64_t sub_1C48924FC()
{
  return 3342;
}

uint64_t sub_1C4892504()
{
  return 3343;
}

uint64_t sub_1C489250C()
{
  return 3344;
}

uint64_t sub_1C4892514()
{
  return 3349;
}

uint64_t sub_1C489251C()
{
  return 3352;
}

uint64_t sub_1C4892524()
{
  return 3354;
}

uint64_t sub_1C489252C()
{
  return 3357;
}

uint64_t sub_1C4892534()
{
  return 3363;
}

uint64_t sub_1C489253C()
{
  return 3366;
}

uint64_t sub_1C4892544()
{
  return 3367;
}

uint64_t sub_1C489254C()
{
  return 3368;
}

uint64_t sub_1C4892554()
{
  return 2823;
}

uint64_t sub_1C489255C()
{
  return 2830;
}

uint64_t sub_1C4892564()
{
  return 2832;
}

uint64_t sub_1C489256C()
{
  return 2836;
}

uint64_t sub_1C4892574()
{
  return 2841;
}

uint64_t sub_1C489257C()
{
  return 2844;
}

uint64_t sub_1C4892584()
{
  return 2846;
}

uint64_t sub_1C489258C()
{
  return 2849;
}

uint64_t sub_1C4892594()
{
  return 2858;
}

uint64_t sub_1C489259C()
{
  return 2859;
}

uint64_t sub_1C48925A4()
{
  return 2715;
}

uint64_t sub_1C48925AC()
{
  return 2722;
}

uint64_t sub_1C48925B4()
{
  return 2724;
}

uint64_t sub_1C48925BC()
{
  return 2728;
}

uint64_t sub_1C48925C4()
{
  return 2736;
}

uint64_t sub_1C48925CC()
{
  return 2738;
}

uint64_t sub_1C48925D4()
{
  return 2741;
}

uint64_t sub_1C48925DC()
{
  return 2750;
}

uint64_t sub_1C48925E4()
{
  return 2751;
}

uint64_t sub_1C48925EC()
{
  return 3439;
}

uint64_t sub_1C48925F4()
{
  return 3448;
}

uint64_t sub_1C48925FC()
{
  return 3452;
}

uint64_t sub_1C4892604()
{
  return 3460;
}

uint64_t sub_1C489260C()
{
  return 3465;
}

uint64_t sub_1C4892614()
{
  return 3474;
}

uint64_t sub_1C489261C()
{
  return 3475;
}

uint64_t sub_1C4892624()
{
  return 3047;
}

uint64_t sub_1C489262C()
{
  return 3048;
}

uint64_t sub_1C4892634()
{
  return 3049;
}

uint64_t sub_1C489263C()
{
  return 3050;
}

uint64_t sub_1C4892644()
{
  return 3051;
}

uint64_t sub_1C489264C()
{
  return 3052;
}

uint64_t sub_1C4892654()
{
  return 3053;
}

uint64_t sub_1C489265C()
{
  return 3054;
}

uint64_t sub_1C4892664()
{
  return 3055;
}

uint64_t sub_1C489266C()
{
  return 3056;
}

uint64_t sub_1C4892674()
{
  return 3057;
}

uint64_t sub_1C489267C()
{
  return 3059;
}

uint64_t sub_1C4892684()
{
  return 3061;
}

uint64_t sub_1C489268C()
{
  return 3063;
}

uint64_t sub_1C4892694()
{
  return 3064;
}

uint64_t sub_1C489269C()
{
  return 3067;
}

uint64_t sub_1C48926A4()
{
  return 3068;
}

uint64_t sub_1C48926AC()
{
  return 3071;
}

uint64_t sub_1C48926B4()
{
  return 3072;
}

uint64_t sub_1C48926BC()
{
  return 3073;
}

uint64_t sub_1C48926C4()
{
  return 3074;
}

uint64_t sub_1C48926CC()
{
  return 3075;
}

uint64_t sub_1C48926D4()
{
  return 3077;
}

uint64_t sub_1C48926DC()
{
  return 3080;
}

uint64_t sub_1C48926E4()
{
  return 3083;
}

uint64_t sub_1C48926EC()
{
  return 3084;
}

uint64_t sub_1C48926F4()
{
  return 3086;
}

uint64_t sub_1C48926FC()
{
  return 3087;
}

uint64_t sub_1C4892704()
{
  return 3088;
}

uint64_t sub_1C489270C()
{
  return 3090;
}

uint64_t sub_1C4892714()
{
  return 3091;
}

uint64_t sub_1C489271C()
{
  return 3095;
}

uint64_t sub_1C4892724()
{
  return 3096;
}

uint64_t sub_1C489272C()
{
  return 3097;
}

uint64_t sub_1C4892734()
{
  return 3099;
}

uint64_t sub_1C489273C()
{
  return 3100;
}

uint64_t sub_1C4892744()
{
  return 3102;
}

uint64_t sub_1C489274C()
{
  return 3104;
}

uint64_t sub_1C4892754()
{
  return 3106;
}

uint64_t sub_1C489275C()
{
  return 3107;
}

uint64_t sub_1C4892764()
{
  return 3108;
}

uint64_t sub_1C489276C()
{
  return 3110;
}

uint64_t sub_1C4892774()
{
  return 3113;
}

uint64_t sub_1C489277C()
{
  return 3117;
}

uint64_t sub_1C4892784()
{
  return 3118;
}

uint64_t sub_1C489278C()
{
  return 3119;
}

uint64_t sub_1C4892794()
{
  return 3121;
}

uint64_t sub_1C489279C()
{
  return 3123;
}

uint64_t sub_1C48927A4()
{
  return 3129;
}

uint64_t sub_1C48927AC()
{
  return 3130;
}

uint64_t sub_1C48927B4()
{
  return 3131;
}

uint64_t sub_1C48927BC()
{
  return 3132;
}

uint64_t sub_1C48927C4()
{
  return 3134;
}

uint64_t sub_1C48927CC()
{
  return 3135;
}

uint64_t sub_1C48927D4()
{
  return 3137;
}

uint64_t sub_1C48927DC()
{
  return 3139;
}

uint64_t sub_1C48927E4()
{
  return 3140;
}

uint64_t sub_1C48927EC()
{
  return 3142;
}

uint64_t sub_1C48927F4()
{
  return 3143;
}

uint64_t sub_1C48927FC()
{
  return 3144;
}

uint64_t sub_1C4892804()
{
  return 3145;
}

uint64_t sub_1C489280C()
{
  return 3146;
}

uint64_t sub_1C4892814()
{
  return 3148;
}

uint64_t sub_1C489281C()
{
  return 3149;
}

uint64_t sub_1C4892824()
{
  return 2539;
}

uint64_t sub_1C489282C()
{
  return 2540;
}

uint64_t sub_1C4892834()
{
  return 2541;
}

uint64_t sub_1C489283C()
{
  return 2542;
}

uint64_t sub_1C4892844()
{
  return 2543;
}

uint64_t sub_1C489284C()
{
  return 2544;
}

uint64_t sub_1C4892854()
{
  return 2545;
}

uint64_t sub_1C489285C()
{
  return 2546;
}

uint64_t sub_1C4892864()
{
  return 2547;
}

uint64_t sub_1C489286C()
{
  return 2548;
}

uint64_t sub_1C4892874()
{
  return 2549;
}

uint64_t sub_1C489287C()
{
  return 2550;
}

uint64_t sub_1C4892884()
{
  return 2551;
}

uint64_t sub_1C489288C()
{
  return 2552;
}

uint64_t sub_1C4892894()
{
  return 2553;
}

uint64_t sub_1C489289C()
{
  return 2554;
}

uint64_t sub_1C48928A4()
{
  return 2555;
}

uint64_t sub_1C48928AC()
{
  return 2556;
}

uint64_t sub_1C48928B4()
{
  return 2557;
}

uint64_t sub_1C48928BC()
{
  return 2558;
}

uint64_t sub_1C48928C4()
{
  return 2559;
}

uint64_t sub_1C48928CC()
{
  return 2560;
}

uint64_t sub_1C48928D4()
{
  return 2561;
}

uint64_t sub_1C48928DC()
{
  return 2562;
}

uint64_t sub_1C48928E4()
{
  return 2563;
}

uint64_t sub_1C48928EC()
{
  return 2564;
}

uint64_t sub_1C48928F4()
{
  return 2565;
}

uint64_t sub_1C48928FC()
{
  return 2566;
}

uint64_t sub_1C4892904()
{
  return 2567;
}

uint64_t sub_1C489290C()
{
  return 2568;
}

uint64_t sub_1C4892914()
{
  return 2569;
}

uint64_t sub_1C489291C()
{
  return 2570;
}

uint64_t sub_1C4892924()
{
  return 2571;
}

uint64_t sub_1C489292C()
{
  return 2572;
}

uint64_t sub_1C4892934()
{
  return 2573;
}

uint64_t sub_1C489293C()
{
  return 2574;
}

uint64_t sub_1C4892944()
{
  return 2575;
}

uint64_t sub_1C489294C()
{
  return 2576;
}

uint64_t sub_1C4892954()
{
  return 2577;
}

uint64_t sub_1C489295C()
{
  return 2578;
}

uint64_t sub_1C4892964()
{
  return 2579;
}

uint64_t sub_1C489296C()
{
  return 2580;
}

uint64_t sub_1C4892974()
{
  return 2581;
}

uint64_t sub_1C489297C()
{
  return 2582;
}

uint64_t sub_1C4892984()
{
  return 2583;
}

uint64_t sub_1C489298C()
{
  return 2584;
}

uint64_t sub_1C4892994()
{
  return 2585;
}

uint64_t sub_1C489299C()
{
  return 2586;
}

uint64_t sub_1C48929A4()
{
  return 2587;
}

uint64_t sub_1C48929AC()
{
  return 2588;
}

uint64_t sub_1C48929B4()
{
  return 2589;
}

uint64_t sub_1C48929BC()
{
  return 2590;
}

uint64_t sub_1C48929C4()
{
  return 2591;
}

uint64_t sub_1C48929CC()
{
  return 2592;
}

uint64_t sub_1C48929D4()
{
  return 2593;
}

uint64_t sub_1C48929DC()
{
  return 2594;
}

uint64_t sub_1C48929E4()
{
  return 2595;
}

uint64_t sub_1C48929EC()
{
  return 2596;
}

uint64_t sub_1C48929F4()
{
  return 2597;
}

uint64_t sub_1C48929FC()
{
  return 2598;
}

uint64_t sub_1C4892A04()
{
  return 2599;
}

uint64_t sub_1C4892A0C()
{
  return 2600;
}

uint64_t sub_1C4892A14()
{
  return 2601;
}

uint64_t sub_1C4892A1C()
{
  return 2602;
}

uint64_t sub_1C4892A24()
{
  return 2603;
}

uint64_t sub_1C4892A2C()
{
  return 2604;
}

uint64_t sub_1C4892A34()
{
  return 2605;
}

uint64_t sub_1C4892A3C()
{
  return 2606;
}

uint64_t sub_1C4892A44()
{
  return 2608;
}

uint64_t sub_1C4892A4C()
{
  return 2609;
}

uint64_t sub_1C4892A54()
{
  return 2610;
}

uint64_t sub_1C4892A5C()
{
  return 2611;
}

uint64_t sub_1C4892A64()
{
  return 2612;
}

uint64_t sub_1C4892A6C()
{
  return 2613;
}

uint64_t sub_1C4892A74()
{
  return 2615;
}

uint64_t sub_1C4892A7C()
{
  return 2617;
}

uint64_t sub_1C4892A84()
{
  return 2618;
}

uint64_t sub_1C4892A8C()
{
  return 2619;
}

uint64_t sub_1C4892A94()
{
  return 2621;
}

uint64_t sub_1C4892A9C()
{
  return 2622;
}

uint64_t sub_1C4892AA4()
{
  return 2623;
}

uint64_t sub_1C4892AAC()
{
  return 2624;
}

uint64_t sub_1C4892AB4()
{
  return 2626;
}

uint64_t sub_1C4892ABC()
{
  return 2627;
}

uint64_t sub_1C4892AC4()
{
  return 2629;
}

uint64_t sub_1C4892ACC()
{
  return 2631;
}

uint64_t sub_1C4892AD4()
{
  return 2632;
}

uint64_t sub_1C4892ADC()
{
  return 2634;
}

uint64_t sub_1C4892AE4()
{
  return 2635;
}

uint64_t sub_1C4892AEC()
{
  return 2636;
}

uint64_t sub_1C4892AF4()
{
  return 2637;
}

uint64_t sub_1C4892AFC()
{
  return 2638;
}

uint64_t sub_1C4892B04()
{
  return 2639;
}

uint64_t sub_1C4892B0C()
{
  return 2640;
}

uint64_t sub_1C4892B14()
{
  return 2641;
}

uint64_t sub_1C4892B1C()
{
  return 2644;
}

uint64_t sub_1C4892B24()
{
  return 2431;
}

uint64_t sub_1C4892B2C()
{
  return 2432;
}

uint64_t sub_1C4892B34()
{
  return 2433;
}

uint64_t sub_1C4892B3C()
{
  return 2434;
}

uint64_t sub_1C4892B44()
{
  return 2435;
}

uint64_t sub_1C4892B4C()
{
  return 2436;
}

uint64_t sub_1C4892B54()
{
  return 2437;
}

uint64_t sub_1C4892B5C()
{
  return 2438;
}

uint64_t sub_1C4892B64()
{
  return 2439;
}

uint64_t sub_1C4892B6C()
{
  return 2440;
}

uint64_t sub_1C4892B74()
{
  return 2441;
}

uint64_t sub_1C4892B7C()
{
  return 2442;
}

uint64_t sub_1C4892B84()
{
  return 2443;
}

uint64_t sub_1C4892B8C()
{
  return 2444;
}

uint64_t sub_1C4892B94()
{
  return 2445;
}

uint64_t sub_1C4892B9C()
{
  return 2446;
}

uint64_t sub_1C4892BA4()
{
  return 2447;
}

uint64_t sub_1C4892BAC()
{
  return 2448;
}

uint64_t sub_1C4892BB4()
{
  return 2449;
}

uint64_t sub_1C4892BBC()
{
  return 2450;
}

uint64_t sub_1C4892BC4()
{
  return 2451;
}

uint64_t sub_1C4892BCC()
{
  return 2452;
}

uint64_t sub_1C4892BD4()
{
  return 2453;
}

uint64_t sub_1C4892BDC()
{
  return 2454;
}

uint64_t sub_1C4892BE4()
{
  return 2455;
}

uint64_t sub_1C4892BEC()
{
  return 2456;
}

uint64_t sub_1C4892BF4()
{
  return 2457;
}

uint64_t sub_1C4892BFC()
{
  return 2458;
}

uint64_t sub_1C4892C04()
{
  return 2459;
}

uint64_t sub_1C4892C0C()
{
  return 2460;
}

uint64_t sub_1C4892C14()
{
  return 2461;
}

uint64_t sub_1C4892C1C()
{
  return 2462;
}

uint64_t sub_1C4892C24()
{
  return 2463;
}

uint64_t sub_1C4892C2C()
{
  return 2464;
}

uint64_t sub_1C4892C34()
{
  return 2465;
}

uint64_t sub_1C4892C3C()
{
  return 2466;
}

uint64_t sub_1C4892C44()
{
  return 2467;
}

uint64_t sub_1C4892C4C()
{
  return 2468;
}

uint64_t sub_1C4892C54()
{
  return 2469;
}

uint64_t sub_1C4892C5C()
{
  return 2470;
}

uint64_t sub_1C4892C64()
{
  return 2471;
}

uint64_t sub_1C4892C6C()
{
  return 2472;
}

uint64_t sub_1C4892C74()
{
  return 2473;
}

uint64_t sub_1C4892C7C()
{
  return 2474;
}

uint64_t sub_1C4892C84()
{
  return 2475;
}

uint64_t sub_1C4892C8C()
{
  return 2476;
}

uint64_t sub_1C4892C94()
{
  return 2477;
}

uint64_t sub_1C4892C9C()
{
  return 2478;
}

uint64_t sub_1C4892CA4()
{
  return 2479;
}

uint64_t sub_1C4892CAC()
{
  return 2480;
}

uint64_t sub_1C4892CB4()
{
  return 2481;
}

uint64_t sub_1C4892CBC()
{
  return 2482;
}

uint64_t sub_1C4892CC4()
{
  return 2483;
}

uint64_t sub_1C4892CCC()
{
  return 2484;
}

uint64_t sub_1C4892CD4()
{
  return 2485;
}

uint64_t sub_1C4892CDC()
{
  return 2486;
}

uint64_t sub_1C4892CE4()
{
  return 2487;
}

uint64_t sub_1C4892CEC()
{
  return 2488;
}

uint64_t sub_1C4892CF4()
{
  return 2489;
}

uint64_t sub_1C4892CFC()
{
  return 2490;
}

uint64_t sub_1C4892D04()
{
  return 2491;
}

uint64_t sub_1C4892D0C()
{
  return 2492;
}

uint64_t sub_1C4892D14()
{
  return 2493;
}

uint64_t sub_1C4892D1C()
{
  return 2494;
}

uint64_t sub_1C4892D24()
{
  return 2495;
}

uint64_t sub_1C4892D2C()
{
  return 2496;
}

uint64_t sub_1C4892D34()
{
  return 2497;
}

uint64_t sub_1C4892D3C()
{
  return 2498;
}

uint64_t sub_1C4892D44()
{
  return 2500;
}

uint64_t sub_1C4892D4C()
{
  return 2501;
}

uint64_t sub_1C4892D54()
{
  return 2502;
}

uint64_t sub_1C4892D5C()
{
  return 2503;
}

uint64_t sub_1C4892D64()
{
  return 2504;
}

uint64_t sub_1C4892D6C()
{
  return 2505;
}

uint64_t sub_1C4892D74()
{
  return 2507;
}

uint64_t sub_1C4892D7C()
{
  return 2509;
}

uint64_t sub_1C4892D84()
{
  return 2510;
}

uint64_t sub_1C4892D8C()
{
  return 2511;
}

uint64_t sub_1C4892D94()
{
  return 2513;
}

uint64_t sub_1C4892D9C()
{
  return 2514;
}

uint64_t sub_1C4892DA4()
{
  return 2515;
}

uint64_t sub_1C4892DAC()
{
  return 2516;
}

uint64_t sub_1C4892DB4()
{
  return 2517;
}

uint64_t sub_1C4892DBC()
{
  return 2518;
}

uint64_t sub_1C4892DC4()
{
  return 2519;
}

uint64_t sub_1C4892DCC()
{
  return 2521;
}

uint64_t sub_1C4892DD4()
{
  return 2523;
}

uint64_t sub_1C4892DDC()
{
  return 2524;
}

uint64_t sub_1C4892DE4()
{
  return 2526;
}

uint64_t sub_1C4892DEC()
{
  return 2527;
}

uint64_t sub_1C4892DF4()
{
  return 2528;
}

uint64_t sub_1C4892DFC()
{
  return 2529;
}

uint64_t sub_1C4892E04()
{
  return 2530;
}

uint64_t sub_1C4892E0C()
{
  return 2531;
}

uint64_t sub_1C4892E14()
{
  return 2532;
}

uint64_t sub_1C4892E1C()
{
  return 2533;
}

uint64_t sub_1C4892E24()
{
  return 2536;
}

uint64_t sub_1C4892E2C()
{
  return 3155;
}

uint64_t sub_1C4892E34()
{
  return 3156;
}

uint64_t sub_1C4892E3C()
{
  return 3157;
}

uint64_t sub_1C4892E44()
{
  return 3158;
}

uint64_t sub_1C4892E4C()
{
  return 3159;
}

uint64_t sub_1C4892E54()
{
  return 3160;
}

uint64_t sub_1C4892E5C()
{
  return 3161;
}

uint64_t sub_1C4892E64()
{
  return 3162;
}

uint64_t sub_1C4892E6C()
{
  return 3163;
}

uint64_t sub_1C4892E74()
{
  return 3164;
}

uint64_t sub_1C4892E7C()
{
  return 3165;
}

uint64_t sub_1C4892E84()
{
  return 3166;
}

uint64_t sub_1C4892E8C()
{
  return 3167;
}

uint64_t sub_1C4892E94()
{
  return 3168;
}

uint64_t sub_1C4892E9C()
{
  return 3169;
}

uint64_t sub_1C4892EA4()
{
  return 3170;
}

uint64_t sub_1C4892EAC()
{
  return 3171;
}

uint64_t sub_1C4892EB4()
{
  return 3172;
}

uint64_t sub_1C4892EBC()
{
  return 3173;
}

uint64_t sub_1C4892EC4()
{
  return 3174;
}

uint64_t sub_1C4892ECC()
{
  return 3175;
}

uint64_t sub_1C4892ED4()
{
  return 3176;
}

uint64_t sub_1C4892EDC()
{
  return 3177;
}

uint64_t sub_1C4892EE4()
{
  return 3178;
}

uint64_t sub_1C4892EEC()
{
  return 3179;
}

uint64_t sub_1C4892EF4()
{
  return 3180;
}

uint64_t sub_1C4892EFC()
{
  return 3181;
}

uint64_t sub_1C4892F04()
{
  return 3182;
}

uint64_t sub_1C4892F0C()
{
  return 3183;
}

uint64_t sub_1C4892F14()
{
  return 3184;
}

uint64_t sub_1C4892F1C()
{
  return 3185;
}

uint64_t sub_1C4892F24()
{
  return 3186;
}

uint64_t sub_1C4892F2C()
{
  return 3187;
}

uint64_t sub_1C4892F34()
{
  return 3188;
}

uint64_t sub_1C4892F3C()
{
  return 3189;
}

uint64_t sub_1C4892F44()
{
  return 3190;
}

uint64_t sub_1C4892F4C()
{
  return 3191;
}

uint64_t sub_1C4892F54()
{
  return 3192;
}

uint64_t sub_1C4892F5C()
{
  return 3193;
}

uint64_t sub_1C4892F64()
{
  return 3194;
}

uint64_t sub_1C4892F6C()
{
  return 3195;
}

uint64_t sub_1C4892F74()
{
  return 3196;
}

uint64_t sub_1C4892F7C()
{
  return 3197;
}

uint64_t sub_1C4892F84()
{
  return 3198;
}

uint64_t sub_1C4892F8C()
{
  return 3199;
}

uint64_t sub_1C4892F94()
{
  return 3200;
}

uint64_t sub_1C4892F9C()
{
  return 3201;
}

uint64_t sub_1C4892FA4()
{
  return 3202;
}

uint64_t sub_1C4892FAC()
{
  return 3203;
}

uint64_t sub_1C4892FB4()
{
  return 3204;
}

uint64_t sub_1C4892FBC()
{
  return 3205;
}

uint64_t sub_1C4892FC4()
{
  return 3206;
}

uint64_t sub_1C4892FCC()
{
  return 3207;
}

uint64_t sub_1C4892FD4()
{
  return 3208;
}

uint64_t sub_1C4892FDC()
{
  return 3209;
}

uint64_t sub_1C4892FE4()
{
  return 3210;
}

uint64_t sub_1C4892FEC()
{
  return 3211;
}

uint64_t sub_1C4892FF4()
{
  return 3212;
}

uint64_t sub_1C4892FFC()
{
  return 3213;
}

uint64_t sub_1C4893004()
{
  return 3214;
}

uint64_t sub_1C489300C()
{
  return 3215;
}

uint64_t sub_1C4893014()
{
  return 3216;
}

uint64_t sub_1C489301C()
{
  return 3217;
}

uint64_t sub_1C4893024()
{
  return 3218;
}

uint64_t sub_1C489302C()
{
  return 3219;
}

uint64_t sub_1C4893034()
{
  return 3220;
}

uint64_t sub_1C489303C()
{
  return 3221;
}

uint64_t sub_1C4893044()
{
  return 3222;
}

uint64_t sub_1C489304C()
{
  return 3224;
}

uint64_t sub_1C4893054()
{
  return 3225;
}

uint64_t sub_1C489305C()
{
  return 3226;
}

uint64_t sub_1C4893064()
{
  return 3227;
}

uint64_t sub_1C489306C()
{
  return 3228;
}

uint64_t sub_1C4893074()
{
  return 3229;
}

uint64_t sub_1C489307C()
{
  return 3230;
}

uint64_t sub_1C4893084()
{
  return 3231;
}

uint64_t sub_1C489308C()
{
  return 3233;
}

uint64_t sub_1C4893094()
{
  return 3234;
}

uint64_t sub_1C489309C()
{
  return 3235;
}

uint64_t sub_1C48930A4()
{
  return 3237;
}

uint64_t sub_1C48930AC()
{
  return 3238;
}

uint64_t sub_1C48930B4()
{
  return 3239;
}

uint64_t sub_1C48930BC()
{
  return 3240;
}

uint64_t sub_1C48930C4()
{
  return 3241;
}

uint64_t sub_1C48930CC()
{
  return 3242;
}

uint64_t sub_1C48930D4()
{
  return 3243;
}

uint64_t sub_1C48930DC()
{
  return 3245;
}

uint64_t sub_1C48930E4()
{
  return 3246;
}

uint64_t sub_1C48930EC()
{
  return 3247;
}

uint64_t sub_1C48930F4()
{
  return 3248;
}

uint64_t sub_1C48930FC()
{
  return 3250;
}

uint64_t sub_1C4893104()
{
  return 3251;
}

uint64_t sub_1C489310C()
{
  return 3252;
}

uint64_t sub_1C4893114()
{
  return 3253;
}

uint64_t sub_1C489311C()
{
  return 3254;
}

uint64_t sub_1C4893124()
{
  return 3255;
}

uint64_t sub_1C489312C()
{
  return 3256;
}

uint64_t sub_1C4893134()
{
  return 3257;
}

uint64_t sub_1C489313C()
{
  return 3260;
}

uint64_t sub_1C4893144()
{
  return 3263;
}

uint64_t sub_1C489314C()
{
  return 3264;
}

uint64_t sub_1C4893154()
{
  return 3265;
}

uint64_t sub_1C489315C()
{
  return 3266;
}

uint64_t sub_1C4893164()
{
  return 3267;
}

uint64_t sub_1C489316C()
{
  return 3268;
}

uint64_t sub_1C4893174()
{
  return 3269;
}

uint64_t sub_1C489317C()
{
  return 3270;
}

uint64_t sub_1C4893184()
{
  return 3271;
}

uint64_t sub_1C489318C()
{
  return 3272;
}

uint64_t sub_1C4893194()
{
  return 3273;
}

uint64_t sub_1C489319C()
{
  return 3275;
}

uint64_t sub_1C48931A4()
{
  return 3277;
}

uint64_t sub_1C48931AC()
{
  return 3279;
}

uint64_t sub_1C48931B4()
{
  return 3280;
}

uint64_t sub_1C48931BC()
{
  return 3283;
}

uint64_t sub_1C48931C4()
{
  return 3284;
}

uint64_t sub_1C48931CC()
{
  return 3287;
}

uint64_t sub_1C48931D4()
{
  return 3288;
}

uint64_t sub_1C48931DC()
{
  return 3289;
}

uint64_t sub_1C48931E4()
{
  return 3290;
}

uint64_t sub_1C48931EC()
{
  return 3291;
}

uint64_t sub_1C48931F4()
{
  return 3293;
}

uint64_t sub_1C48931FC()
{
  return 3296;
}

uint64_t sub_1C4893204()
{
  return 3299;
}

uint64_t sub_1C489320C()
{
  return 3300;
}

uint64_t sub_1C4893214()
{
  return 3302;
}

uint64_t sub_1C489321C()
{
  return 3303;
}

uint64_t sub_1C4893224()
{
  return 3304;
}

uint64_t sub_1C489322C()
{
  return 3306;
}

uint64_t sub_1C4893234()
{
  return 3307;
}

uint64_t sub_1C489323C()
{
  return 3311;
}

uint64_t sub_1C4893244()
{
  return 3312;
}

uint64_t sub_1C489324C()
{
  return 3313;
}

uint64_t sub_1C4893254()
{
  return 3315;
}

uint64_t sub_1C489325C()
{
  return 3316;
}

uint64_t sub_1C4893264()
{
  return 3318;
}

uint64_t sub_1C489326C()
{
  return 3320;
}

uint64_t sub_1C4893274()
{
  return 3322;
}

uint64_t sub_1C489327C()
{
  return 3323;
}

uint64_t sub_1C4893284()
{
  return 3324;
}

uint64_t sub_1C489328C()
{
  return 3326;
}

uint64_t sub_1C4893294()
{
  return 3329;
}

uint64_t sub_1C489329C()
{
  return 3333;
}

uint64_t sub_1C48932A4()
{
  return 3334;
}

uint64_t sub_1C48932AC()
{
  return 3335;
}

uint64_t sub_1C48932B4()
{
  return 3337;
}

uint64_t sub_1C48932BC()
{
  return 3339;
}

uint64_t sub_1C48932C4()
{
  return 3345;
}

uint64_t sub_1C48932CC()
{
  return 3346;
}

uint64_t sub_1C48932D4()
{
  return 3347;
}

uint64_t sub_1C48932DC()
{
  return 3348;
}

uint64_t sub_1C48932E4()
{
  return 3350;
}

uint64_t sub_1C48932EC()
{
  return 3351;
}

uint64_t sub_1C48932F4()
{
  return 3353;
}

uint64_t sub_1C48932FC()
{
  return 3355;
}

uint64_t sub_1C4893304()
{
  return 3356;
}

uint64_t sub_1C489330C()
{
  return 3358;
}

uint64_t sub_1C4893314()
{
  return 3359;
}

uint64_t sub_1C489331C()
{
  return 3360;
}

uint64_t sub_1C4893324()
{
  return 3361;
}

uint64_t sub_1C489332C()
{
  return 3362;
}

uint64_t sub_1C4893334()
{
  return 3364;
}

uint64_t sub_1C489333C()
{
  return 3365;
}

uint64_t sub_1C4893344()
{
  return 2755;
}

uint64_t sub_1C489334C()
{
  return 2756;
}

uint64_t sub_1C4893354()
{
  return 2757;
}

uint64_t sub_1C489335C()
{
  return 2758;
}

uint64_t sub_1C4893364()
{
  return 2759;
}

uint64_t sub_1C489336C()
{
  return 2760;
}

uint64_t sub_1C4893374()
{
  return 2761;
}

uint64_t sub_1C489337C()
{
  return 2762;
}

uint64_t sub_1C4893384()
{
  return 2763;
}

uint64_t sub_1C489338C()
{
  return 2764;
}

uint64_t sub_1C4893394()
{
  return 2765;
}

uint64_t sub_1C489339C()
{
  return 2766;
}

uint64_t sub_1C48933A4()
{
  return 2767;
}

uint64_t sub_1C48933AC()
{
  return 2768;
}

uint64_t sub_1C48933B4()
{
  return 2769;
}

uint64_t sub_1C48933BC()
{
  return 2770;
}

uint64_t sub_1C48933C4()
{
  return 2771;
}

uint64_t sub_1C48933CC()
{
  return 2772;
}

uint64_t sub_1C48933D4()
{
  return 2773;
}

uint64_t sub_1C48933DC()
{
  return 2774;
}

uint64_t sub_1C48933E4()
{
  return 2775;
}

uint64_t sub_1C48933EC()
{
  return 2776;
}

uint64_t sub_1C48933F4()
{
  return 2777;
}

uint64_t sub_1C48933FC()
{
  return 2778;
}

uint64_t sub_1C4893404()
{
  return 2779;
}

uint64_t sub_1C489340C()
{
  return 2780;
}

uint64_t sub_1C4893414()
{
  return 2781;
}

uint64_t sub_1C489341C()
{
  return 2782;
}

uint64_t sub_1C4893424()
{
  return 2783;
}

uint64_t sub_1C489342C()
{
  return 2784;
}

uint64_t sub_1C4893434()
{
  return 2785;
}

uint64_t sub_1C489343C()
{
  return 2786;
}

uint64_t sub_1C4893444()
{
  return 2787;
}

uint64_t sub_1C489344C()
{
  return 2788;
}

uint64_t sub_1C4893454()
{
  return 2789;
}

uint64_t sub_1C489345C()
{
  return 2790;
}

uint64_t sub_1C4893464()
{
  return 2791;
}

uint64_t sub_1C489346C()
{
  return 2792;
}

uint64_t sub_1C4893474()
{
  return 2793;
}

uint64_t sub_1C489347C()
{
  return 2794;
}

uint64_t sub_1C4893484()
{
  return 2795;
}

uint64_t sub_1C489348C()
{
  return 2796;
}

uint64_t sub_1C4893494()
{
  return 2797;
}

uint64_t sub_1C489349C()
{
  return 2798;
}

uint64_t sub_1C48934A4()
{
  return 2799;
}

uint64_t sub_1C48934AC()
{
  return 2800;
}

uint64_t sub_1C48934B4()
{
  return 2801;
}

uint64_t sub_1C48934BC()
{
  return 2802;
}

uint64_t sub_1C48934C4()
{
  return 2803;
}

uint64_t sub_1C48934CC()
{
  return 2804;
}

uint64_t sub_1C48934D4()
{
  return 2805;
}

uint64_t sub_1C48934DC()
{
  return 2806;
}

uint64_t sub_1C48934E4()
{
  return 2807;
}

uint64_t sub_1C48934EC()
{
  return 2808;
}

uint64_t sub_1C48934F4()
{
  return 2809;
}

uint64_t sub_1C48934FC()
{
  return 2810;
}

uint64_t sub_1C4893504()
{
  return 2811;
}

uint64_t sub_1C489350C()
{
  return 2812;
}

uint64_t sub_1C4893514()
{
  return 2813;
}

uint64_t sub_1C489351C()
{
  return 2814;
}

uint64_t sub_1C4893524()
{
  return 2815;
}

uint64_t sub_1C489352C()
{
  return 2816;
}

uint64_t sub_1C4893534()
{
  return 2817;
}

uint64_t sub_1C489353C()
{
  return 2818;
}

uint64_t sub_1C4893544()
{
  return 2819;
}

uint64_t sub_1C489354C()
{
  return 2820;
}

uint64_t sub_1C4893554()
{
  return 2821;
}

uint64_t sub_1C489355C()
{
  return 2822;
}

uint64_t sub_1C4893564()
{
  return 2824;
}

uint64_t sub_1C489356C()
{
  return 2825;
}

uint64_t sub_1C4893574()
{
  return 2826;
}

uint64_t sub_1C489357C()
{
  return 2827;
}

uint64_t sub_1C4893584()
{
  return 2828;
}

uint64_t sub_1C489358C()
{
  return 2829;
}

uint64_t sub_1C4893594()
{
  return 2831;
}

uint64_t sub_1C489359C()
{
  return 2833;
}

uint64_t sub_1C48935A4()
{
  return 2834;
}

uint64_t sub_1C48935AC()
{
  return 2835;
}

uint64_t sub_1C48935B4()
{
  return 2837;
}

uint64_t sub_1C48935BC()
{
  return 2838;
}

uint64_t sub_1C48935C4()
{
  return 2839;
}

uint64_t sub_1C48935CC()
{
  return 2840;
}

uint64_t sub_1C48935D4()
{
  return 2842;
}

uint64_t sub_1C48935DC()
{
  return 2843;
}

uint64_t sub_1C48935E4()
{
  return 2845;
}

uint64_t sub_1C48935EC()
{
  return 2847;
}

uint64_t sub_1C48935F4()
{
  return 2848;
}

uint64_t sub_1C48935FC()
{
  return 2850;
}

uint64_t sub_1C4893604()
{
  return 2851;
}

uint64_t sub_1C489360C()
{
  return 2852;
}

uint64_t sub_1C4893614()
{
  return 2853;
}

uint64_t sub_1C489361C()
{
  return 2854;
}

uint64_t sub_1C4893624()
{
  return 2855;
}

uint64_t sub_1C489362C()
{
  return 2856;
}

uint64_t sub_1C4893634()
{
  return 2857;
}

uint64_t sub_1C489363C()
{
  return 2860;
}

uint64_t sub_1C4893644()
{
  return 2647;
}

uint64_t sub_1C489364C()
{
  return 2648;
}

uint64_t sub_1C4893654()
{
  return 2649;
}

uint64_t sub_1C489365C()
{
  return 2650;
}

uint64_t sub_1C4893664()
{
  return 2651;
}

uint64_t sub_1C489366C()
{
  return 2652;
}

uint64_t sub_1C4893674()
{
  return 2653;
}

uint64_t sub_1C489367C()
{
  return 2654;
}

uint64_t sub_1C4893684()
{
  return 2655;
}

uint64_t sub_1C489368C()
{
  return 2656;
}

uint64_t sub_1C4893694()
{
  return 2657;
}

uint64_t sub_1C489369C()
{
  return 2658;
}

uint64_t sub_1C48936A4()
{
  return 2659;
}

uint64_t sub_1C48936AC()
{
  return 2660;
}

uint64_t sub_1C48936B4()
{
  return 2661;
}

uint64_t sub_1C48936BC()
{
  return 2662;
}

uint64_t sub_1C48936C4()
{
  return 2663;
}

uint64_t sub_1C48936CC()
{
  return 2664;
}

uint64_t sub_1C48936D4()
{
  return 2665;
}

uint64_t sub_1C48936DC()
{
  return 2666;
}

uint64_t sub_1C48936E4()
{
  return 2667;
}

uint64_t sub_1C48936EC()
{
  return 2668;
}

uint64_t sub_1C48936F4()
{
  return 2669;
}

uint64_t sub_1C48936FC()
{
  return 2670;
}

uint64_t sub_1C4893704()
{
  return 2671;
}

uint64_t sub_1C489370C()
{
  return 2672;
}

uint64_t sub_1C4893714()
{
  return 2673;
}

uint64_t sub_1C489371C()
{
  return 2674;
}

uint64_t sub_1C4893724()
{
  return 2675;
}

uint64_t sub_1C489372C()
{
  return 2676;
}

uint64_t sub_1C4893734()
{
  return 2677;
}

uint64_t sub_1C489373C()
{
  return 2678;
}

uint64_t sub_1C4893744()
{
  return 2679;
}

uint64_t sub_1C489374C()
{
  return 2680;
}

uint64_t sub_1C4893754()
{
  return 2681;
}

uint64_t sub_1C489375C()
{
  return 2682;
}

uint64_t sub_1C4893764()
{
  return 2683;
}

uint64_t sub_1C489376C()
{
  return 2684;
}

uint64_t sub_1C4893774()
{
  return 2685;
}

uint64_t sub_1C489377C()
{
  return 2686;
}

uint64_t sub_1C4893784()
{
  return 2687;
}

uint64_t sub_1C489378C()
{
  return 2688;
}

uint64_t sub_1C4893794()
{
  return 2689;
}

uint64_t sub_1C489379C()
{
  return 2690;
}

uint64_t sub_1C48937A4()
{
  return 2691;
}

uint64_t sub_1C48937AC()
{
  return 2692;
}

uint64_t sub_1C48937B4()
{
  return 2693;
}

uint64_t sub_1C48937BC()
{
  return 2694;
}

uint64_t sub_1C48937C4()
{
  return 2695;
}

uint64_t sub_1C48937CC()
{
  return 2696;
}

uint64_t sub_1C48937D4()
{
  return 2697;
}

uint64_t sub_1C48937DC()
{
  return 2698;
}

uint64_t sub_1C48937E4()
{
  return 2699;
}

uint64_t sub_1C48937EC()
{
  return 2700;
}

uint64_t sub_1C48937F4()
{
  return 2701;
}

uint64_t sub_1C48937FC()
{
  return 2702;
}

uint64_t sub_1C4893804()
{
  return 2703;
}

uint64_t sub_1C489380C()
{
  return 2704;
}

uint64_t sub_1C4893814()
{
  return 2705;
}

uint64_t sub_1C489381C()
{
  return 2706;
}

uint64_t sub_1C4893824()
{
  return 2707;
}

uint64_t sub_1C489382C()
{
  return 2708;
}

uint64_t sub_1C4893834()
{
  return 2709;
}

uint64_t sub_1C489383C()
{
  return 2710;
}

uint64_t sub_1C4893844()
{
  return 2711;
}

uint64_t sub_1C489384C()
{
  return 2712;
}

uint64_t sub_1C4893854()
{
  return 2713;
}

uint64_t sub_1C489385C()
{
  return 2714;
}

uint64_t sub_1C4893864()
{
  return 2716;
}

uint64_t sub_1C489386C()
{
  return 2717;
}

uint64_t sub_1C4893874()
{
  return 2718;
}

uint64_t sub_1C489387C()
{
  return 2719;
}

uint64_t sub_1C4893884()
{
  return 2720;
}

uint64_t sub_1C489388C()
{
  return 2721;
}

uint64_t sub_1C4893894()
{
  return 2723;
}

uint64_t sub_1C489389C()
{
  return 2725;
}

uint64_t sub_1C48938A4()
{
  return 2726;
}

uint64_t sub_1C48938AC()
{
  return 2727;
}

uint64_t sub_1C48938B4()
{
  return 2729;
}

uint64_t sub_1C48938BC()
{
  return 2730;
}

uint64_t sub_1C48938C4()
{
  return 2731;
}

uint64_t sub_1C48938CC()
{
  return 2732;
}

uint64_t sub_1C48938D4()
{
  return 2733;
}

uint64_t sub_1C48938DC()
{
  return 2734;
}

uint64_t sub_1C48938E4()
{
  return 2735;
}

uint64_t sub_1C48938EC()
{
  return 2737;
}

uint64_t sub_1C48938F4()
{
  return 2739;
}

uint64_t sub_1C48938FC()
{
  return 2740;
}

uint64_t sub_1C4893904()
{
  return 2742;
}

uint64_t sub_1C489390C()
{
  return 2743;
}

uint64_t sub_1C4893914()
{
  return 2744;
}

uint64_t sub_1C489391C()
{
  return 2745;
}

uint64_t sub_1C4893924()
{
  return 2746;
}

uint64_t sub_1C489392C()
{
  return 2747;
}

uint64_t sub_1C4893934()
{
  return 2748;
}

uint64_t sub_1C489393C()
{
  return 2749;
}

uint64_t sub_1C4893944()
{
  return 2752;
}

uint64_t sub_1C489394C()
{
  return 3371;
}

uint64_t sub_1C4893954()
{
  return 3372;
}

uint64_t sub_1C489395C()
{
  return 3373;
}

uint64_t sub_1C4893964()
{
  return 3374;
}

uint64_t sub_1C489396C()
{
  return 3375;
}

uint64_t sub_1C4893974()
{
  return 3376;
}

uint64_t sub_1C489397C()
{
  return 3377;
}

uint64_t sub_1C4893984()
{
  return 3378;
}

uint64_t sub_1C489398C()
{
  return 3379;
}

uint64_t sub_1C4893994()
{
  return 3380;
}

uint64_t sub_1C489399C()
{
  return 3381;
}

uint64_t sub_1C48939A4()
{
  return 3382;
}

uint64_t sub_1C48939AC()
{
  return 3383;
}

uint64_t sub_1C48939B4()
{
  return 3384;
}

uint64_t sub_1C48939BC()
{
  return 3385;
}

uint64_t sub_1C48939C4()
{
  return 3386;
}

uint64_t sub_1C48939CC()
{
  return 3387;
}

uint64_t sub_1C48939D4()
{
  return 3388;
}

uint64_t sub_1C48939DC()
{
  return 3389;
}

uint64_t sub_1C48939E4()
{
  return 3390;
}

uint64_t sub_1C48939EC()
{
  return 3391;
}

uint64_t sub_1C48939F4()
{
  return 3392;
}

uint64_t sub_1C48939FC()
{
  return 3393;
}

uint64_t sub_1C4893A04()
{
  return 3394;
}

uint64_t sub_1C4893A0C()
{
  return 3395;
}

uint64_t sub_1C4893A14()
{
  return 3396;
}

uint64_t sub_1C4893A1C()
{
  return 3397;
}

uint64_t sub_1C4893A24()
{
  return 3398;
}

uint64_t sub_1C4893A2C()
{
  return 3399;
}

uint64_t sub_1C4893A34()
{
  return 3400;
}

uint64_t sub_1C4893A3C()
{
  return 3401;
}

uint64_t sub_1C4893A44()
{
  return 3402;
}

uint64_t sub_1C4893A4C()
{
  return 3403;
}

uint64_t sub_1C4893A54()
{
  return 3404;
}

uint64_t sub_1C4893A5C()
{
  return 3405;
}

uint64_t sub_1C4893A64()
{
  return 3406;
}

uint64_t sub_1C4893A6C()
{
  return 3407;
}

uint64_t sub_1C4893A74()
{
  return 3408;
}

uint64_t sub_1C4893A7C()
{
  return 3409;
}

uint64_t sub_1C4893A84()
{
  return 3410;
}

uint64_t sub_1C4893A8C()
{
  return 3411;
}

uint64_t sub_1C4893A94()
{
  return 3412;
}

uint64_t sub_1C4893A9C()
{
  return 3413;
}

uint64_t sub_1C4893AA4()
{
  return 3414;
}

uint64_t sub_1C4893AAC()
{
  return 3415;
}

uint64_t sub_1C4893AB4()
{
  return 3416;
}

uint64_t sub_1C4893ABC()
{
  return 3417;
}

uint64_t sub_1C4893AC4()
{
  return 3418;
}

uint64_t sub_1C4893ACC()
{
  return 3419;
}

uint64_t sub_1C4893AD4()
{
  return 3420;
}

uint64_t sub_1C4893ADC()
{
  return 3421;
}

uint64_t sub_1C4893AE4()
{
  return 3422;
}

uint64_t sub_1C4893AEC()
{
  return 3423;
}

uint64_t sub_1C4893AF4()
{
  return 3424;
}

uint64_t sub_1C4893AFC()
{
  return 3425;
}

uint64_t sub_1C4893B04()
{
  return 3426;
}

uint64_t sub_1C4893B0C()
{
  return 3427;
}

uint64_t sub_1C4893B14()
{
  return 3428;
}

uint64_t sub_1C4893B1C()
{
  return 3429;
}

uint64_t sub_1C4893B24()
{
  return 3430;
}

uint64_t sub_1C4893B2C()
{
  return 3431;
}

uint64_t sub_1C4893B34()
{
  return 3432;
}

uint64_t sub_1C4893B3C()
{
  return 3433;
}

uint64_t sub_1C4893B44()
{
  return 3434;
}

uint64_t sub_1C4893B4C()
{
  return 3435;
}

uint64_t sub_1C4893B54()
{
  return 3436;
}

uint64_t sub_1C4893B5C()
{
  return 3437;
}

uint64_t sub_1C4893B64()
{
  return 3438;
}

uint64_t sub_1C4893B6C()
{
  return 3440;
}

uint64_t sub_1C4893B74()
{
  return 3441;
}

uint64_t sub_1C4893B7C()
{
  return 3442;
}

uint64_t sub_1C4893B84()
{
  return 3443;
}

uint64_t sub_1C4893B8C()
{
  return 3444;
}

uint64_t sub_1C4893B94()
{
  return 3445;
}

uint64_t sub_1C4893B9C()
{
  return 3446;
}

uint64_t sub_1C4893BA4()
{
  return 3447;
}

uint64_t sub_1C4893BAC()
{
  return 3449;
}

uint64_t sub_1C4893BB4()
{
  return 3450;
}

uint64_t sub_1C4893BBC()
{
  return 3451;
}

uint64_t sub_1C4893BC4()
{
  return 3453;
}

uint64_t sub_1C4893BCC()
{
  return 3454;
}

uint64_t sub_1C4893BD4()
{
  return 3455;
}

uint64_t sub_1C4893BDC()
{
  return 3456;
}

uint64_t sub_1C4893BE4()
{
  return 3457;
}

uint64_t sub_1C4893BEC()
{
  return 3458;
}

uint64_t sub_1C4893BF4()
{
  return 3459;
}

uint64_t sub_1C4893BFC()
{
  return 3461;
}

uint64_t sub_1C4893C04()
{
  return 3462;
}

uint64_t sub_1C4893C0C()
{
  return 3463;
}

uint64_t sub_1C4893C14()
{
  return 3464;
}

uint64_t sub_1C4893C1C()
{
  return 3466;
}

uint64_t sub_1C4893C24()
{
  return 3467;
}

uint64_t sub_1C4893C2C()
{
  return 3468;
}

uint64_t sub_1C4893C34()
{
  return 3469;
}

uint64_t sub_1C4893C3C()
{
  return 3470;
}

uint64_t sub_1C4893C44()
{
  return 3471;
}

uint64_t sub_1C4893C4C()
{
  return 3472;
}

uint64_t sub_1C4893C54()
{
  return 3473;
}

uint64_t sub_1C4893C5C()
{
  return 3476;
}

uint64_t sub_1C4893C68(_BYTE *a1)
{
  if (a1[318])
    return 4;
  if (a1[319])
    return 5;
  if (a1[320])
    return 6;
  if (a1[321])
    return 7;
  return 9;
}

uint64_t sub_1C4893CB0(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 16) >> 1) & 1;
}

BOOL sub_1C4893CC0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = atomic_load((unsigned __int8 *)&qword_1ED7EB2F0);
  if ((v2 & 1) == 0)
  {
    v9 = a2;
    v5 = __cxa_guard_acquire(&qword_1ED7EB2F0);
    a2 = v9;
    if (v5)
    {
      byte_1ED7EB2E8 = 0;
      __cxa_guard_release(&qword_1ED7EB2F0);
      a2 = v9;
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1ED7EB2F8);
  if ((v3 & 1) == 0)
  {
    v10 = a2;
    v6 = __cxa_guard_acquire(&qword_1ED7EB2F8);
    a2 = v10;
    if (v6)
    {
      byte_1ED7EB2E9 = 0;
      __cxa_guard_release(&qword_1ED7EB2F8);
      a2 = v10;
    }
  }
  if (byte_1ED7EB2E8)
  {
    v7 = *(_QWORD *)(a2 + 48);
    if (v7 >= 8)
    {
      if ((v7 & 7) != 0)
      {
        if ((*(_QWORD *)(a2 + 48) & 7) != 3
          || (v7 & 0xFFFFFFFFFFFFFFF8) == 0
          || !*(_DWORD *)(v7 & 0xFFFFFFFFFFFFFFF8))
        {
          return !byte_1ED7EB2E9 || **(_WORD **)(a2 + 16) != 270;
        }
      }
      else
      {
        v7 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(a2 + 48) = v7;
      }
      if ((v7 & 7) != 0)
      {
        v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v8 = v7 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(a2 + 48) = v8;
      }
      if ((*(_WORD *)(v8 + 32) & 1) != 0)
        return 0;
    }
  }
  return !byte_1ED7EB2E9 || **(_WORD **)(a2 + 16) != 270;
}

uint64_t sub_1C4893DFC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 448);
}

char *sub_1C4893E04(char *result, unint64_t a2, int a3)
{
  _DWORD **v5;
  _DWORD *v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  _DWORD *v14;

  v5 = (_DWORD **)result;
  if (*((unsigned int *)result + 3) >= a2)
  {
    v9 = *(_DWORD **)result;
    v8 = result + 8;
    v10 = *((unsigned int *)result + 2);
    if (v10 >= a2)
      v11 = a2;
    else
      v11 = *((unsigned int *)result + 2);
    if (v11)
    {
      v12 = *(_DWORD **)result;
      do
      {
        *v12++ = a3;
        --v11;
      }
      while (v11);
      v10 = *v8;
    }
    v13 = v10 - a2;
    if (v10 < a2)
    {
      v14 = &v9[v10];
      do
        *v14++ = a3;
      while (!__CFADD__(v13++, 1));
    }
  }
  else
  {
    *((_DWORD *)result + 2) = 0;
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 16), a2, 4);
    v6 = *v5;
    v7 = a2;
    do
    {
      *v6++ = a3;
      --v7;
    }
    while (v7);
    v8 = v5 + 1;
  }
  *v8 = a2;
  return result;
}

uint64_t sub_1C4893EB8(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, _QWORD *a5)
{
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;

  v5 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= 64 - a2)
        v6 = 64 - a2;
      else
        v6 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0)
        return 0;
      v5 -= v6;
      ++a1;
      ++a5;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        v7 = v5 - 64;
        ++a1;
        ++a5;
        v8 = v5 <= 127;
        v5 -= 64;
        if (v8)
          goto LABEL_14;
      }
      return 0;
    }
    v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7)
      return 0;
  }
  return 1;
}

uint64_t sub_1C4893F88(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E7FA07B0;
  if ((*(_BYTE *)(a1 + 272) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 280), 8);
  sub_1C613ACBC(a1 + 120);
  return a1;
}

void sub_1C4893FD0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E7FA07B0;
  if ((*(_BYTE *)(a1 + 272) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 280), 8);
  sub_1C613ACBC(a1 + 120);
  JUMPOUT(0x1CAA32FC0);
}

#error "1C4894028: too big function (funcsize=0)"

uint64_t sub_1C48A7190(uint64_t result)
{
  *(_QWORD *)(result + 112) = 0;
  return result;
}

uint64_t sub_1C48A7198(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[1] = a4;
  a1[2] = a3;
  a1[3] = a2;
  a1[4] = a5;
  a1[5] = a6;
  a1[6] = 0;
  return (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
}

void *sub_1C48A71B0()
{
  return &unk_1C646DA40;
}

uint64_t sub_1C48A71C0(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C48A71DC + 4 * byte_1C646B338[a2 - 1]))();
}

BOOL sub_1C48A71DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  if (*(_DWORD *)(a3 + 8) >= 0x41u)
    v3 = *(_QWORD **)a3;
  else
    v3 = (_QWORD *)a3;
  return *v3 < 0x100uLL;
}

uint64_t sub_1C48A71FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL4 v8;
  BOOL v9;

  if (*(_DWORD *)(a3 + 8) >= 0x41u)
    v3 = *(unint64_t **)a3;
  else
    v3 = (unint64_t *)a3;
  v4 = *v3;
  v5 = v4 & 0xFFFFFFFFFFFFFC03;
  v6 = v4 & 0xFFFFFFFFFFFFF807;
  v8 = v4 < 0x100 || (v4 & 0xFFFFFFFFFFFFFE01) == 0 || (v4 & 0xFFFFFFFFFFFFF00FLL) == 0;
  if (v6)
    v9 = v5 == 0;
  else
    v9 = 1;
  return v9 || v8;
}

uint64_t sub_1C48A7244(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 == 1)
    return sub_1C48AAB00(a3);
  else
    return sub_1C48AA9FC(a3);
}

uint64_t (***sub_1C48A725C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>))()
{
  uint64_t v6;
  uint64_t (***result)();
  __int128 *v8;
  int v9;
  int v10;
  __int128 v11;
  char *v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  char v30[80];
  int v31;
  _BYTE v32[24];
  char *v33;
  uint64_t (**v34)();
  int v35;
  uint64_t (***v36)();
  char *v37;
  uint64_t v38;
  _BYTE v39[24];
  _QWORD v40[14];

  v40[13] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40);
  result = (uint64_t (***)())sub_1C48AA43C((uint64_t)v30, v6, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)a2, 0, 0, 0, 0);
  if (v31 < 4)
  {
    v8 = (__int128 *)sub_1C48A9EFC(*(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 272), a2, 1);
    v10 = v9;
    v11 = v8[1];
    v28 = *v8;
    v29 = v11;
    sub_1C48AA044(a1, (uint64_t)&v28, 1, v6);
    v12 = (char *)operator new(0x28uLL);
    v13 = 0;
    v14 = 0;
    v15 = v29;
    *(_OWORD *)(v12 + 8) = v28;
    *(_QWORD *)v12 = &off_1E7FA0810;
    *(_OWORD *)(v12 + 24) = v15;
    v33 = v12;
    v34 = &off_1E7FA0858;
    v35 = v10;
    v36 = &v34;
    v37 = v39;
    v38 = 0x400000000;
    v16 = v40;
    do
    {
      v17 = v13;
      v18 = &v32[32 * v14];
      v19 = (_QWORD *)v18[3];
      if (v19)
      {
        if (v19 == v18)
        {
          *v16 = v16 - 3;
          (*(void (**)(_QWORD *))(*v18 + 24))(v18);
        }
        else
        {
          *v16 = (*(uint64_t (**)(_QWORD))(*v19 + 16))(v18[3]);
        }
      }
      else
      {
        *v16 = 0;
      }
      v16 += 4;
      v13 = 1;
      v14 = 1;
    }
    while ((v17 & 1) == 0);
    v20 = v38;
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x400000000;
    LODWORD(v38) = v20 + 2;
    if (v20 == -2)
    {
      *(_BYTE *)(a3 + 144) = 1;
LABEL_22:
      v22 = v37;
    }
    else
    {
      sub_1C48AAD34(a3, (uint64_t)&v37);
      v21 = v38;
      *(_BYTE *)(a3 + 144) = 1;
      v22 = v37;
      if ((_DWORD)v21)
      {
        v23 = 32 * v21;
        while (1)
        {
          v24 = *(char **)&v22[v23 - 8];
          if (&v22[v23 - 32] == v24)
            break;
          if (v24)
          {
            v25 = 5;
            goto LABEL_18;
          }
LABEL_19:
          v23 -= 32;
          if (!v23)
            goto LABEL_22;
        }
        v24 = &v22[v23 - 32];
        v25 = 4;
LABEL_18:
        (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
        goto LABEL_19;
      }
    }
    if (v22 != v39)
      free(v22);
    v26 = 0;
    while (1)
    {
      result = (&v36)[v26];
      if (&(&v34)[v26] == result)
        break;
      if (result)
      {
        v27 = 5;
LABEL_30:
        result = (uint64_t (***)())(*result)[v27]();
      }
      v26 -= 4;
      if (v26 == -8)
        return result;
    }
    result = &(&v34)[v26];
    v27 = 4;
    goto LABEL_30;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 144) = 0;
  return result;
}

uint64_t sub_1C48A74F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  char v9;
  uint64_t v10;
  _DWORD *v11;
  BOOL v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (**v21)(void);
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[8];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 8);
  result = sub_1C48AA43C((uint64_t)&v24, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 32) + 40), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)a2, 0, 0, 0, 0);
  if (v27 >= 4)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 144) = 0;
    return result;
  }
  v8 = **(unsigned __int16 **)(v6 + 16);
  v9 = 1;
  if (v8 > 0xA2)
  {
    if (v8 - 163 <= 0x38 && ((1 << (v8 + 93)) & 0x18800000039D4EFLL) != 0)
      goto LABEL_31;
    v13 = v8 - 314 > 0x2A || ((1 << (v8 - 58)) & 0x40000200003) == 0;
    if (!v13 || v8 == 261)
      goto LABEL_31;
    goto LABEL_10;
  }
  if (**(unsigned __int16 **)(v6 + 16) > 0x78u)
  {
    if (v8 == 121 || v8 == 135)
      goto LABEL_31;
    goto LABEL_10;
  }
  if (v8 != 85)
  {
    if (v8 == 116)
    {
LABEL_11:
      v10 = *(unsigned int *)(v6 + 40);
      if ((_DWORD)v10)
      {
        v11 = (_DWORD *)(*(_QWORD *)(v6 + 32) + 16);
        while (*((_BYTE *)v11 - 16) != 17)
        {
          v11 += 8;
          if (!--v10)
            goto LABEL_30;
        }
        if (*v11 == 2131)
        {
          v9 = 1;
          goto LABEL_31;
        }
      }
LABEL_30:
      v9 = 0;
      goto LABEL_31;
    }
LABEL_10:
    if ((v8 & 0xFFFE) != 0x74)
      goto LABEL_30;
    goto LABEL_11;
  }
LABEL_31:
  v14 = (char *)operator new(0x20uLL);
  *(_QWORD *)v14 = &off_1E7FA08A0;
  *((_QWORD *)v14 + 1) = a1;
  *((_QWORD *)v14 + 2) = a2;
  v14[24] = v9;
  v23 = (uint64_t *)v14;
  v24 = v26;
  v15 = (char *)operator new(0x20uLL);
  *(_QWORD *)v15 = &off_1E7FA08A0;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(v14 + 8);
  *((_QWORD *)v15 + 3) = *((_QWORD *)v14 + 3);
  v26[3] = v15;
  v25 = 0x400000001;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  sub_1C48AAD34(a3, (uint64_t)&v24);
  v16 = v25;
  *(_BYTE *)(a3 + 144) = 1;
  v17 = (char *)v24;
  if (!(_DWORD)v16)
    goto LABEL_40;
  v18 = 32 * v16;
  do
  {
    v19 = *(char **)&v17[v18 - 8];
    if (&v17[v18 - 32] == v19)
    {
      v19 = &v17[v18 - 32];
      v20 = 4;
    }
    else
    {
      if (!v19)
        goto LABEL_38;
      v20 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_38:
    v18 -= 32;
  }
  while (v18);
  v17 = (char *)v24;
LABEL_40:
  if (v17 != (char *)v26)
    free(v17);
  result = (uint64_t)v23;
  if (v23 == &v22)
  {
    v21 = (uint64_t (**)(void))(v22 + 32);
    return (*v21)();
  }
  else if (v23)
  {
    v21 = (uint64_t (**)(void))(*v23 + 40);
    return (*v21)();
  }
  return result;
}

_QWORD *sub_1C48A77B0@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  char *v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t i;
  _QWORD *result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[24];
  char *v25;
  _QWORD v26[3];
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[24];
  _QWORD v31[14];

  v31[13] = *MEMORY[0x1E0C80C00];
  v4 = a2[1];
  v22 = *a2;
  v23 = v4;
  sub_1C48AA044(a1, (uint64_t)&v22, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 24) + 32) + 40));
  v5 = (char *)operator new(0x28uLL);
  v6 = 0;
  v7 = 0;
  v8 = v23;
  *(_OWORD *)(v5 + 8) = v22;
  *(_QWORD *)v5 = &off_1E7FA08E8;
  *(_OWORD *)(v5 + 24) = v8;
  v25 = v5;
  v26[0] = &off_1E7FA0930;
  v27 = v26;
  v28 = v30;
  v29 = 0x400000000;
  v9 = v31;
  do
  {
    v10 = v6;
    v11 = &v24[32 * v7];
    v12 = (_QWORD *)v11[3];
    if (v12)
    {
      if (v12 == v11)
      {
        *v9 = v9 - 3;
        (*(void (**)(_QWORD *))(*v11 + 24))(v11);
      }
      else
      {
        *v9 = (*(uint64_t (**)(_QWORD))(*v12 + 16))(v11[3]);
      }
    }
    else
    {
      *v9 = 0;
    }
    v9 += 4;
    v6 = 1;
    v7 = 1;
  }
  while ((v10 & 1) == 0);
  v13 = v29;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  LODWORD(v29) = v13 + 2;
  if (v13 == -2)
  {
    *(_BYTE *)(a3 + 144) = 1;
LABEL_20:
    v15 = (char *)v28;
  }
  else
  {
    sub_1C48AAD34(a3, (uint64_t)&v28);
    v14 = v29;
    *(_BYTE *)(a3 + 144) = 1;
    v15 = (char *)v28;
    if ((_DWORD)v14)
    {
      v16 = 32 * v14;
      while (1)
      {
        v17 = *(char **)&v15[v16 - 8];
        if (&v15[v16 - 32] == v17)
          break;
        if (v17)
        {
          v18 = 5;
          goto LABEL_16;
        }
LABEL_17:
        v16 -= 32;
        if (!v16)
          goto LABEL_20;
      }
      v17 = &v15[v16 - 32];
      v18 = 4;
LABEL_16:
      (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
      goto LABEL_17;
    }
  }
  if (v15 != v30)
    free(v15);
  for (i = 0; i != -8; i -= 4)
  {
    result = (&v27)[i];
    if (&v26[i] == result)
    {
      result = &v26[i];
      v21 = 4;
    }
    else
    {
      if (!result)
        continue;
      v21 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v21))();
  }
  return result;
}

uint64_t sub_1C48A79E0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  char *v24;
  _QWORD v25[3];
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[24];
  _QWORD v30[14];

  v30[13] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)a2)
  {
    v5 = *(_DWORD *)(a2 + 4);
    if (v5 - 1 <= 0x3FFFFFFE)
    {
      v6 = *(_QWORD *)(result + 80);
      result = *(unsigned int *)(*(_QWORD *)(v6 + 264)
                               + 24
                               * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(_QWORD *)(result + 88), v5, v6)+ 24)+ *(_DWORD *)(v6 + 272)* ((*(_QWORD *)(v6 + 248) - *(_QWORD *)(v6 + 240)) >> 3)));
    }
    else
    {
      result = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(result + 80), v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40));
    }
    if ((_DWORD)result == 16 || (_DWORD)result == 32)
    {
      v7 = (char *)operator new(0x28uLL);
      v8 = 0;
      v9 = 0;
      v10 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v7 + 8) = *(_OWORD *)a2;
      *(_QWORD *)v7 = &off_1E7FA0978;
      *(_OWORD *)(v7 + 24) = v10;
      v24 = v7;
      v25[0] = &off_1E7FA09C0;
      v26 = v25;
      v27 = v29;
      v28 = 0x400000000;
      v11 = v30;
      do
      {
        v12 = v8;
        v13 = &v23[32 * v9];
        v14 = (_QWORD *)v13[3];
        if (v14)
        {
          if (v14 == v13)
          {
            *v11 = v11 - 3;
            (*(void (**)(_QWORD *))(*v13 + 24))(v13);
          }
          else
          {
            *v11 = (*(uint64_t (**)(_QWORD))(*v14 + 16))(v13[3]);
          }
        }
        else
        {
          *v11 = 0;
        }
        v11 += 4;
        v8 = 1;
        v9 = 1;
      }
      while ((v12 & 1) == 0);
      v15 = v28;
      *(_QWORD *)a3 = a3 + 16;
      *(_QWORD *)(a3 + 8) = 0x400000000;
      LODWORD(v28) = v15 + 2;
      if (v15 == -2)
      {
        *(_BYTE *)(a3 + 144) = 1;
LABEL_26:
        v17 = (char *)v27;
      }
      else
      {
        sub_1C48AAD34(a3, (uint64_t)&v27);
        v16 = v28;
        *(_BYTE *)(a3 + 144) = 1;
        v17 = (char *)v27;
        if ((_DWORD)v16)
        {
          v18 = 32 * v16;
          while (1)
          {
            v19 = *(char **)&v17[v18 - 8];
            if (&v17[v18 - 32] == v19)
              break;
            if (v19)
            {
              v20 = 5;
              goto LABEL_22;
            }
LABEL_23:
            v18 -= 32;
            if (!v18)
              goto LABEL_26;
          }
          v19 = &v17[v18 - 32];
          v20 = 4;
LABEL_22:
          (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
          goto LABEL_23;
        }
      }
      if (v17 != v29)
        free(v17);
      v21 = 0;
      while (1)
      {
        result = (uint64_t)(&v26)[v21];
        if (&v25[v21] == (_QWORD *)result)
          break;
        if (result)
        {
          v22 = 5;
LABEL_34:
          result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v22))();
        }
        v21 -= 4;
        if (v21 == -8)
          return result;
      }
      result = (uint64_t)&v25[v21];
      v22 = 4;
      goto LABEL_34;
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 144) = 0;
  return result;
}

void sub_1C48A7C80(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1C48AB468(a3, a1, a2, 0);
}

void sub_1C48A7C94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD v5[2];
  _OWORD v6[5];
  int v7;

  sub_1C48AA43C((uint64_t)v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)a2, 0, 1, 0, 0);
  v5[0] = v6[0];
  v5[1] = v6[1];
  sub_1C48AB468(a3, a1, (uint64_t)v5, v7 << 6);
}

void sub_1C48A7D10(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  int RegSizeInBits;
  __int128 v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  unint64_t v16;
  BOOL v17;
  __int128 *v18;
  char *v19;
  _BYTE *v20;
  unsigned int v21;
  char *v22;
  char *v23;
  void *v24;
  _BYTE *v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  char v30;
  __int128 *v31;
  __int128 *v32;
  int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t i;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void **v44;
  __int128 v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[64];
  __int128 v53;
  __int128 v54;
  _BYTE v55[24];
  _QWORD v56[2];
  void *v57;
  uint64_t v58;
  _BYTE v59[24];
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD v63[9];

  v63[8] = *MEMORY[0x1E0C80C00];
  v61 = (__int128 *)v63;
  v62 = 0x200000000;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 24) + 32) + 40);
  sub_1C48AA43C((uint64_t)&v57, v6, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)a2, 1, 0, 0, 0);
  if (*(_BYTE *)a2
    || ((v7 = *((_DWORD *)a2 + 1), v7 - 1 <= 0x3FFFFFFE)
      ? (v42 = *(_QWORD *)(a1 + 80),
         RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v42 + 264)
                                   + 24
                                   * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(_QWORD *)(a1 + 88), v7, v42)+ 24)+ *(_DWORD *)(v42 + 272)* ((*(_QWORD *)(v42 + 248) - *(_QWORD *)(v42 + 240)) >> 3)))): (RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 80), v7, v6)), RegSizeInBits != 16))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 144) = 0;
    goto LABEL_25;
  }
  v9 = a2[1];
  v53 = *a2;
  v54 = v9;
  sub_1C48AA044(a1, (uint64_t)&v53, 0, v6);
  v10 = (__int128 *)sub_1C47C0F60((uint64_t)&v61, (unint64_t)&v53, 1);
  v11 = &v61[2 * v62];
  v12 = v10[1];
  *v11 = *v10;
  v11[1] = v12;
  LODWORD(v62) = v62 + 1;
  v47 = 1;
  v48 = 0;
  v49 = 0;
  v13 = (__int128 *)sub_1C47C0F60((uint64_t)&v61, (unint64_t)&v47, 1);
  v14 = &v61[2 * v62];
  v15 = v13[1];
  *v14 = *v13;
  v14[1] = v15;
  v16 = (v62 + 1);
  v17 = (_DWORD)v62 == -1;
  LODWORD(v62) = v62 + 1;
  v18 = v61;
  v45 = *v61;
  v46 = v61[1];
  v19 = (char *)operator new(0x28uLL);
  *(_QWORD *)v19 = &off_1E7FA0B28;
  *(_OWORD *)(v19 + 8) = v45;
  *(_OWORD *)(v19 + 24) = v46;
  *((_QWORD *)&v54 + 1) = v19;
  v50 = v52;
  v51 = 0x200000000;
  if (!v17)
  {
    v20 = v52;
    v21 = v16;
    if (v16 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v16, 32);
      v21 = v62;
      if (!(_DWORD)v62)
        goto LABEL_8;
      v18 = v61;
      v20 = v50;
    }
    memcpy(v20, v18, 32 * v21);
LABEL_8:
    LODWORD(v51) = v16;
  }
  v22 = (char *)operator new(0x58uLL);
  v23 = v22;
  *(_QWORD *)v22 = &off_1E7FA0B70;
  v24 = v22 + 24;
  *((_QWORD *)v22 + 1) = v22 + 24;
  *((_QWORD *)v22 + 2) = 0x200000000;
  if (!(_DWORD)v16)
    goto LABEL_16;
  if (v50 != v52)
  {
    *((_QWORD *)v22 + 1) = v50;
    v43 = HIDWORD(v51);
    *((_DWORD *)v22 + 4) = v16;
    *((_DWORD *)v22 + 5) = v43;
    v50 = v52;
    HIDWORD(v51) = 0;
    goto LABEL_15;
  }
  if (v16 >= 3)
  {
    v44 = (void **)(v22 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v22 + 8), (uint64_t)v24, v16, 32);
    v26 = v51;
    if (!(_DWORD)v51)
      goto LABEL_14;
    v25 = v50;
    v24 = *v44;
  }
  else
  {
    v25 = v52;
    v26 = v16;
  }
  memcpy(v24, v25, 32 * v26);
LABEL_14:
  *((_DWORD *)v23 + 4) = v16;
LABEL_15:
  LODWORD(v51) = 0;
LABEL_16:
  v27 = 0;
  v28 = 0;
  v56[0] = v23;
  v57 = v59;
  v58 = 0x400000000;
  v29 = &v60;
  do
  {
    v30 = v27;
    v31 = &v53 + 2 * v28;
    v32 = (__int128 *)*((_QWORD *)v31 + 3);
    if (v32)
    {
      if (v32 == v31)
      {
        *v29 = (uint64_t)(v29 - 3);
        (*(void (**)(__int128 *))(*(_QWORD *)v31 + 24))(v31);
      }
      else
      {
        *v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v32 + 16))(*((_QWORD *)v31 + 3));
      }
    }
    else
    {
      *v29 = 0;
    }
    v29 += 4;
    v27 = 1;
    v28 = 1;
  }
  while ((v30 & 1) == 0);
  v33 = v58;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  LODWORD(v58) = v33 + 2;
  if (v33 == -2)
  {
    *(_BYTE *)(a3 + 144) = 1;
LABEL_39:
    v35 = (char *)v57;
  }
  else
  {
    sub_1C48AAD34(a3, (uint64_t)&v57);
    v34 = v58;
    *(_BYTE *)(a3 + 144) = 1;
    v35 = (char *)v57;
    if ((_DWORD)v34)
    {
      v36 = 32 * v34;
      while (1)
      {
        v37 = *(char **)&v35[v36 - 8];
        if (&v35[v36 - 32] == v37)
          break;
        if (v37)
        {
          v38 = 5;
          goto LABEL_35;
        }
LABEL_36:
        v36 -= 32;
        if (!v36)
          goto LABEL_39;
      }
      v37 = &v35[v36 - 32];
      v38 = 4;
LABEL_35:
      (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
      goto LABEL_36;
    }
  }
  if (v35 != v59)
    free(v35);
  for (i = 0; i != -8; i -= 4)
  {
    v40 = (_BYTE *)v56[i];
    if (&v55[i * 8] == v40)
    {
      v40 = &v55[i * 8];
      v41 = 4;
    }
    else
    {
      if (!v40)
        continue;
      v41 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
  }
  if (v50 != v52)
    free(v50);
LABEL_25:
  if (v61 != (__int128 *)v63)
    free(v61);
}

void sub_1C48A81A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  void *v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  char *v18;
  char *v19;
  void *v20;
  _BYTE *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t i;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  void **v40;
  _OWORD v41[2];
  _OWORD v42[5];
  int v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[64];
  void *v47;
  uint64_t v48;
  _QWORD v49[16];
  void *v50;
  uint64_t v51;
  _BYTE v52[24];
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD v56[9];

  v56[8] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40);
  sub_1C48AA43C((uint64_t)v42, v5, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)a2, 0, 1, 0, 0);
  v54 = v56;
  v55 = 0x200000000;
  v41[0] = v42[0];
  v41[1] = v42[1];
  if (!sub_1C48ABC08(a1, v5, (unsigned __int8 *)v41, (uint64_t)&v54, v43 << 6, 0))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 144) = 0;
    goto LABEL_58;
  }
  v47 = v49;
  v48 = 0x200000000;
  v6 = v55;
  if ((_DWORD)v55)
  {
    v7 = v49;
    v8 = v55;
    if (v55 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, (uint64_t)v49, v55, 32);
      v8 = v55;
      if (!(_DWORD)v55)
        goto LABEL_5;
      v7 = v47;
    }
    memcpy(v7, v54, 32 * v8);
LABEL_5:
    LODWORD(v48) = v6;
  }
  v9 = (char *)operator new(0x58uLL);
  v10 = v9;
  *(_QWORD *)v9 = &off_1E7FA0BB8;
  v11 = v9 + 24;
  *((_QWORD *)v9 + 1) = v9 + 24;
  v12 = (void **)(v9 + 8);
  *((_QWORD *)v9 + 2) = 0x200000000;
  if (!(_DWORD)v6)
    goto LABEL_13;
  if (v47 != v49)
  {
    *((_QWORD *)v9 + 1) = v47;
    v38 = HIDWORD(v48);
    *((_DWORD *)v9 + 4) = v6;
    *((_DWORD *)v9 + 5) = v38;
    v47 = v49;
    HIDWORD(v48) = 0;
    goto LABEL_12;
  }
  if (v6 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v9 + 8), (uint64_t)v11, v6, 32);
    v14 = v48;
    if (!(_DWORD)v48)
      goto LABEL_11;
    v13 = v47;
    v11 = *v12;
  }
  else
  {
    v13 = v49;
    v14 = v6;
  }
  memcpy(v11, v13, 32 * v14);
LABEL_11:
  *((_DWORD *)v10 + 4) = v6;
LABEL_12:
  LODWORD(v48) = 0;
LABEL_13:
  v49[11] = v10;
  v44 = v46;
  v45 = 0x200000000;
  v15 = v55;
  if (!(_DWORD)v55)
    goto LABEL_17;
  v16 = v46;
  v17 = v55;
  if (v55 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v55, 32);
    v17 = v55;
    if (!(_DWORD)v55)
      goto LABEL_16;
    v16 = v44;
  }
  memcpy(v16, v54, 32 * v17);
LABEL_16:
  LODWORD(v45) = v15;
LABEL_17:
  v18 = (char *)operator new(0x58uLL);
  v19 = v18;
  *(_QWORD *)v18 = &off_1E7FA0C00;
  v20 = v18 + 24;
  *((_QWORD *)v18 + 1) = v18 + 24;
  *((_QWORD *)v18 + 2) = 0x200000000;
  if (!(_DWORD)v15)
    goto LABEL_24;
  if (v44 != v46)
  {
    *((_QWORD *)v18 + 1) = v44;
    v39 = HIDWORD(v45);
    *((_DWORD *)v18 + 4) = v15;
    *((_DWORD *)v18 + 5) = v39;
    v44 = v46;
    HIDWORD(v45) = 0;
    goto LABEL_23;
  }
  if (v15 >= 3)
  {
    v40 = (void **)(v18 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v18 + 8), (uint64_t)v20, v15, 32);
    v22 = v45;
    if (!(_DWORD)v45)
      goto LABEL_22;
    v21 = v44;
    v20 = *v40;
  }
  else
  {
    v21 = v46;
    v22 = v15;
  }
  memcpy(v20, v21, 32 * v22);
LABEL_22:
  *((_DWORD *)v19 + 4) = v15;
LABEL_23:
  LODWORD(v45) = 0;
LABEL_24:
  v23 = 0;
  v24 = 0;
  v49[15] = v19;
  v50 = v52;
  v51 = 0x400000000;
  v25 = &v53;
  do
  {
    v26 = v23;
    v27 = &v49[4 * v24 + 8];
    v28 = (_QWORD *)v27[3];
    if (v28)
    {
      if (v28 == v27)
      {
        *v25 = (uint64_t)(v25 - 3);
        (*(void (**)(_QWORD *))(*v27 + 24))(v27);
      }
      else
      {
        *v25 = (*(uint64_t (**)(_QWORD))(*v28 + 16))(v27[3]);
      }
    }
    else
    {
      *v25 = 0;
    }
    v25 += 4;
    v23 = 1;
    v24 = 1;
  }
  while ((v26 & 1) == 0);
  v29 = v51;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  LODWORD(v51) = v29 + 2;
  if (v29 == -2)
  {
    *(_BYTE *)(a3 + 144) = 1;
LABEL_44:
    v31 = (char *)v50;
  }
  else
  {
    sub_1C48AAD34(a3, (uint64_t)&v50);
    v30 = v51;
    *(_BYTE *)(a3 + 144) = 1;
    v31 = (char *)v50;
    if ((_DWORD)v30)
    {
      v32 = 32 * v30;
      while (1)
      {
        v33 = *(char **)&v31[v32 - 8];
        if (&v31[v32 - 32] == v33)
          break;
        if (v33)
        {
          v34 = 5;
          goto LABEL_40;
        }
LABEL_41:
        v32 -= 32;
        if (!v32)
          goto LABEL_44;
      }
      v33 = &v31[v32 - 32];
      v34 = 4;
LABEL_40:
      (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
      goto LABEL_41;
    }
  }
  if (v31 != v52)
    free(v31);
  for (i = 0; i != -8; i -= 4)
  {
    v36 = (_QWORD *)v49[i + 15];
    if (&v49[i + 12] == v36)
    {
      v36 = &v49[i + 12];
      v37 = 4;
    }
    else
    {
      if (!v36)
        continue;
      v37 = 5;
    }
    (*(void (**)(void))(*v36 + 8 * v37))();
  }
  if (v44 != v46)
    free(v44);
  if (v47 != v49)
    free(v47);
LABEL_58:
  if (v54 != v56)
    free(v54);
}

void sub_1C48A8640(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  void *v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t i;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  void **v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[16];
  void *v36;
  uint64_t v37;
  _BYTE v38[24];
  uint64_t v39;
  __int128 *v40;
  uint64_t v41;
  _QWORD v42[9];

  v42[8] = *MEMORY[0x1E0C80C00];
  v40 = (__int128 *)v42;
  v41 = 0x200000000;
  if ((sub_1C48AD47C(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40), a2, (uint64_t)&v40) & 1) == 0)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 144) = 0;
    goto LABEL_45;
  }
  v4 = v40;
  v31 = *v40;
  v32 = v40[1];
  v5 = (char *)operator new(0x28uLL);
  *(_QWORD *)v5 = &off_1E7FA0C48;
  *(_OWORD *)(v5 + 8) = v31;
  *(_OWORD *)(v5 + 24) = v32;
  v35[11] = v5;
  v33 = v35;
  v34 = 0x200000000;
  v6 = v41;
  if ((_DWORD)v41)
  {
    v7 = v35;
    v8 = v41;
    if (v41 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v35, v41, 32);
      v8 = v41;
      if (!(_DWORD)v41)
        goto LABEL_5;
      v4 = v40;
      v7 = v33;
    }
    memcpy(v7, v4, 32 * v8);
LABEL_5:
    LODWORD(v34) = v6;
  }
  v9 = (char *)operator new(0x58uLL);
  v10 = v9;
  *(_QWORD *)v9 = &off_1E7FA0C90;
  v11 = v9 + 24;
  *((_QWORD *)v9 + 1) = v9 + 24;
  *((_QWORD *)v9 + 2) = 0x200000000;
  if (!(_DWORD)v6)
    goto LABEL_13;
  if (v33 != v35)
  {
    *((_QWORD *)v9 + 1) = v33;
    v29 = HIDWORD(v34);
    *((_DWORD *)v9 + 4) = v6;
    *((_DWORD *)v9 + 5) = v29;
    v33 = v35;
    HIDWORD(v34) = 0;
    goto LABEL_12;
  }
  if (v6 >= 3)
  {
    v30 = (void **)(v9 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v9 + 8), (uint64_t)v11, v6, 32);
    v13 = v34;
    if (!(_DWORD)v34)
      goto LABEL_11;
    v12 = v33;
    v11 = *v30;
  }
  else
  {
    v12 = v35;
    v13 = v6;
  }
  memcpy(v11, v12, 32 * v13);
LABEL_11:
  *((_DWORD *)v10 + 4) = v6;
LABEL_12:
  LODWORD(v34) = 0;
LABEL_13:
  v14 = 0;
  v15 = 0;
  v35[15] = v10;
  v36 = v38;
  v37 = 0x400000000;
  v16 = &v39;
  do
  {
    v17 = v14;
    v18 = &v35[4 * v15 + 8];
    v19 = (_QWORD *)v18[3];
    if (v19)
    {
      if (v19 == v18)
      {
        *v16 = (uint64_t)(v16 - 3);
        (*(void (**)(_QWORD *))(*v18 + 24))(v18);
      }
      else
      {
        *v16 = (*(uint64_t (**)(_QWORD))(*v19 + 16))(v18[3]);
      }
    }
    else
    {
      *v16 = 0;
    }
    v16 += 4;
    v14 = 1;
    v15 = 1;
  }
  while ((v17 & 1) == 0);
  v20 = v37;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  LODWORD(v37) = v20 + 2;
  if (v20 == -2)
  {
    *(_BYTE *)(a3 + 144) = 1;
LABEL_33:
    v22 = (char *)v36;
  }
  else
  {
    sub_1C48AAD34(a3, (uint64_t)&v36);
    v21 = v37;
    *(_BYTE *)(a3 + 144) = 1;
    v22 = (char *)v36;
    if ((_DWORD)v21)
    {
      v23 = 32 * v21;
      while (1)
      {
        v24 = *(char **)&v22[v23 - 8];
        if (&v22[v23 - 32] == v24)
          break;
        if (v24)
        {
          v25 = 5;
          goto LABEL_29;
        }
LABEL_30:
        v23 -= 32;
        if (!v23)
          goto LABEL_33;
      }
      v24 = &v22[v23 - 32];
      v25 = 4;
LABEL_29:
      (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
      goto LABEL_30;
    }
  }
  if (v22 != v38)
    free(v22);
  for (i = 0; i != -8; i -= 4)
  {
    v27 = (_QWORD *)v35[i + 15];
    if (&v35[i + 12] == v27)
    {
      v27 = &v35[i + 12];
      v28 = 4;
    }
    else
    {
      if (!v27)
        continue;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  if (v33 != v35)
    free(v33);
LABEL_45:
  if (v40 != (__int128 *)v42)
    free(v40);
}

uint64_t sub_1C48A89B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;
  char v11;
  uint64_t v12;
  _DWORD *v13;
  BOOL v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t (**v23)(void);
  uint64_t v24;
  char v25[120];
  uint64_t v26;
  uint64_t *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[17];

  v30[16] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 32) + 40);
  sub_1C48AA43C((uint64_t)v25, v7, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)a2, 1, 0, 0, 0);
  if (!*(_BYTE *)a2)
  {
    v8 = *(_DWORD *)(a2 + 4);
    if (v8 - 1 <= 0x3FFFFFFE)
    {
      v24 = *(_QWORD *)(a1 + 80);
      result = *(unsigned int *)(*(_QWORD *)(v24 + 264)
                               + 24
                               * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(_QWORD *)(a1 + 88), v8, v24)+ 24)+ *(_DWORD *)(v24 + 272)* ((*(_QWORD *)(v24 + 248) - *(_QWORD *)(v24 + 240)) >> 3)));
    }
    else
    {
      result = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 80), v8, v7);
    }
    if ((_DWORD)result != 32)
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 144) = 0;
      return result;
    }
  }
  v10 = **(unsigned __int16 **)(v6 + 16);
  v11 = 1;
  if (v10 > 0xA2)
  {
    if (v10 - 163 <= 0x38 && ((1 << (v10 + 93)) & 0x18800000039D4EFLL) != 0)
      goto LABEL_34;
    v15 = v10 - 314 > 0x2A || ((1 << (v10 - 58)) & 0x40000200003) == 0;
    if (!v15 || v10 == 261)
      goto LABEL_34;
    goto LABEL_12;
  }
  if (**(unsigned __int16 **)(v6 + 16) > 0x78u)
  {
    if (v10 == 121 || v10 == 135)
      goto LABEL_34;
    goto LABEL_12;
  }
  if (v10 != 85)
  {
    if (v10 == 116)
    {
LABEL_13:
      v12 = *(unsigned int *)(v6 + 40);
      if ((_DWORD)v12)
      {
        v13 = (_DWORD *)(*(_QWORD *)(v6 + 32) + 16);
        while (*((_BYTE *)v13 - 16) != 17)
        {
          v13 += 8;
          if (!--v12)
            goto LABEL_33;
        }
        if (*v13 == 2131)
        {
          v11 = 1;
          goto LABEL_34;
        }
      }
LABEL_33:
      v11 = 0;
      goto LABEL_34;
    }
LABEL_12:
    if ((v10 & 0xFFFE) != 0x74)
      goto LABEL_33;
    goto LABEL_13;
  }
LABEL_34:
  v16 = (char *)operator new(0x20uLL);
  *(_QWORD *)v16 = &off_1E7FA0CD8;
  *((_QWORD *)v16 + 1) = a1;
  *((_QWORD *)v16 + 2) = a2;
  v16[24] = v11;
  v27 = (uint64_t *)v16;
  v28 = v30;
  v17 = (char *)operator new(0x20uLL);
  *(_QWORD *)v17 = &off_1E7FA0CD8;
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(v16 + 8);
  *((_QWORD *)v17 + 3) = *((_QWORD *)v16 + 3);
  v30[3] = v17;
  v29 = 0x400000001;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  sub_1C48AAD34(a3, (uint64_t)&v28);
  v18 = v29;
  *(_BYTE *)(a3 + 144) = 1;
  v19 = (char *)v28;
  if (!(_DWORD)v18)
    goto LABEL_43;
  v20 = 32 * v18;
  do
  {
    v21 = *(char **)&v19[v20 - 8];
    if (&v19[v20 - 32] == v21)
    {
      v21 = &v19[v20 - 32];
      v22 = 4;
    }
    else
    {
      if (!v21)
        goto LABEL_41;
      v22 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_41:
    v20 -= 32;
  }
  while (v20);
  v19 = (char *)v28;
LABEL_43:
  if (v19 != (char *)v30)
    free(v19);
  result = (uint64_t)v27;
  if (v27 == &v26)
  {
    v23 = (uint64_t (**)(void))(v26 + 32);
    return (*v23)();
  }
  else if (v27)
  {
    v23 = (uint64_t (**)(void))(*v27 + 40);
    return (*v23)();
  }
  return result;
}

void sub_1C48A8CDC(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int RegSizeInBits;
  __int128 v11;
  __int128 *v12;
  __int128 *v13;
  __int128 v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  __int128 *v18;
  char *v19;
  unint64_t v20;
  _BYTE *v21;
  unsigned int v22;
  char *v23;
  char *v24;
  void *v25;
  void **v26;
  _BYTE *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  __int128 *v33;
  __int128 *v34;
  int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t i;
  _BYTE *v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[64];
  __int128 v53;
  __int128 v54;
  _BYTE v55[24];
  _QWORD v56[2];
  void *v57;
  uint64_t v58;
  _BYTE v59[24];
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD v63[9];

  v63[8] = *MEMORY[0x1E0C80C00];
  v61 = (__int128 *)v63;
  v62 = 0x200000000;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 24) + 32) + 40);
  sub_1C48AA43C((uint64_t)&v57, v6, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)a2, 1, 0, 0, 0);
  if (*(_BYTE *)a2)
    goto LABEL_2;
  v7 = *((_DWORD *)a2 + 1);
  if (v7 - 1 <= 0x3FFFFFFE)
  {
    v8 = *(_QWORD *)(a1 + 80);
    RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v8 + 264)
                              + 24
                              * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(_QWORD *)(a1 + 88), v7, v8)+ 24)+ *(_DWORD *)(v8 + 272)* ((*(_QWORD *)(v8 + 248) - *(_QWORD *)(v8 + 240)) >> 3)));
  }
  else
  {
    RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 80), v7, v6);
  }
  if (RegSizeInBits == 32 || RegSizeInBits == 16)
  {
    v11 = a2[1];
    v53 = *a2;
    v54 = v11;
    sub_1C48AA044(a1, (uint64_t)&v53, 0, v6);
    v12 = (__int128 *)sub_1C47C0F60((uint64_t)&v61, (unint64_t)&v53, 1);
    v13 = &v61[2 * v62];
    v14 = v12[1];
    *v13 = *v12;
    v13[1] = v14;
    LODWORD(v62) = v62 + 1;
    v47 = 1;
    v48 = 0;
    v49 = 0;
    v15 = (__int128 *)sub_1C47C0F60((uint64_t)&v61, (unint64_t)&v47, 1);
    v16 = &v61[2 * v62];
    v17 = v15[1];
    *v16 = *v15;
    v16[1] = v17;
    LODWORD(v62) = v62 + 1;
  }
  if (RegSizeInBits != 16 && RegSizeInBits != 32)
  {
LABEL_2:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 144) = 0;
    goto LABEL_3;
  }
  v18 = v61;
  v45 = *v61;
  v46 = v61[1];
  v19 = (char *)operator new(0x28uLL);
  *(_QWORD *)v19 = &off_1E7FA0D20;
  *(_OWORD *)(v19 + 8) = v45;
  *(_OWORD *)(v19 + 24) = v46;
  *((_QWORD *)&v54 + 1) = v19;
  v50 = v52;
  v51 = 0x200000000;
  v20 = v62;
  if ((_DWORD)v62)
  {
    v21 = v52;
    v22 = v62;
    if (v62 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v62, 32);
      v22 = v62;
      if (!(_DWORD)v62)
        goto LABEL_19;
      v18 = v61;
      v21 = v50;
    }
    memcpy(v21, v18, 32 * v22);
LABEL_19:
    LODWORD(v51) = v20;
  }
  v23 = (char *)operator new(0x58uLL);
  v24 = v23;
  *(_QWORD *)v23 = &off_1E7FA0D68;
  v25 = v23 + 24;
  *((_QWORD *)v23 + 1) = v23 + 24;
  v26 = (void **)(v23 + 8);
  *((_QWORD *)v23 + 2) = 0x200000000;
  if (!(_DWORD)v20)
    goto LABEL_27;
  if (v50 != v52)
  {
    *((_QWORD *)v23 + 1) = v50;
    v44 = HIDWORD(v51);
    *((_DWORD *)v23 + 4) = v20;
    *((_DWORD *)v23 + 5) = v44;
    v50 = v52;
    HIDWORD(v51) = 0;
    goto LABEL_26;
  }
  if (v20 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v23 + 8), (uint64_t)v25, v20, 32);
    v28 = v51;
    if (!(_DWORD)v51)
      goto LABEL_25;
    v27 = v50;
    v25 = *v26;
  }
  else
  {
    v27 = v52;
    v28 = v20;
  }
  memcpy(v25, v27, 32 * v28);
LABEL_25:
  *((_DWORD *)v24 + 4) = v20;
LABEL_26:
  LODWORD(v51) = 0;
LABEL_27:
  v29 = 0;
  v30 = 0;
  v56[0] = v24;
  v57 = v59;
  v58 = 0x400000000;
  v31 = &v60;
  do
  {
    v32 = v29;
    v33 = &v53 + 2 * v30;
    v34 = (__int128 *)*((_QWORD *)v33 + 3);
    if (v34)
    {
      if (v34 == v33)
      {
        *v31 = (uint64_t)(v31 - 3);
        (*(void (**)(__int128 *))(*(_QWORD *)v33 + 24))(v33);
      }
      else
      {
        *v31 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v34 + 16))(*((_QWORD *)v33 + 3));
      }
    }
    else
    {
      *v31 = 0;
    }
    v31 += 4;
    v29 = 1;
    v30 = 1;
  }
  while ((v32 & 1) == 0);
  v35 = v58;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  LODWORD(v58) = v35 + 2;
  if (v35 == -2)
  {
    *(_BYTE *)(a3 + 144) = 1;
LABEL_46:
    v37 = (char *)v57;
  }
  else
  {
    sub_1C48AAD34(a3, (uint64_t)&v57);
    v36 = v58;
    *(_BYTE *)(a3 + 144) = 1;
    v37 = (char *)v57;
    if ((_DWORD)v36)
    {
      v38 = 32 * v36;
      while (1)
      {
        v39 = *(char **)&v37[v38 - 8];
        if (&v37[v38 - 32] == v39)
          break;
        if (v39)
        {
          v40 = 5;
          goto LABEL_42;
        }
LABEL_43:
        v38 -= 32;
        if (!v38)
          goto LABEL_46;
      }
      v39 = &v37[v38 - 32];
      v40 = 4;
LABEL_42:
      (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
      goto LABEL_43;
    }
  }
  if (v37 != v59)
    free(v37);
  for (i = 0; i != -8; i -= 4)
  {
    v42 = (_BYTE *)v56[i];
    if (&v55[i * 8] == v42)
    {
      v42 = &v55[i * 8];
      v43 = 4;
    }
    else
    {
      if (!v42)
        continue;
      v43 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
  }
  if (v50 != v52)
    free(v50);
LABEL_3:
  if (v61 != (__int128 *)v63)
    free(v61);
}

void sub_1C48A917C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  char *v8;
  char *v9;
  void *v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  char *v17;
  char *v18;
  void *v19;
  _BYTE *v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t i;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  int v38;
  void **v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  void *v43;
  uint64_t v44;
  _QWORD v45[16];
  void *v46;
  uint64_t v47;
  _BYTE v48[24];
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD v52[9];

  v52[8] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40);
  v50 = v52;
  v51 = 0x200000000;
  if (!sub_1C48ADD18(a1, v4, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), (uint64_t)&v50, 0))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 144) = 0;
    goto LABEL_58;
  }
  v43 = v45;
  v44 = 0x200000000;
  v5 = v51;
  if ((_DWORD)v51)
  {
    v6 = v45;
    v7 = v51;
    if (v51 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v51, 32);
      v7 = v51;
      if (!(_DWORD)v51)
        goto LABEL_5;
      v6 = v43;
    }
    memcpy(v6, v50, 32 * v7);
LABEL_5:
    LODWORD(v44) = v5;
  }
  v8 = (char *)operator new(0x58uLL);
  v9 = v8;
  *(_QWORD *)v8 = &off_1E7FA0DB0;
  v10 = v8 + 24;
  *((_QWORD *)v8 + 1) = v8 + 24;
  v11 = (void **)(v8 + 8);
  *((_QWORD *)v8 + 2) = 0x200000000;
  if (!(_DWORD)v5)
    goto LABEL_13;
  if (v43 != v45)
  {
    *((_QWORD *)v8 + 1) = v43;
    v37 = HIDWORD(v44);
    *((_DWORD *)v8 + 4) = v5;
    *((_DWORD *)v8 + 5) = v37;
    v43 = v45;
    HIDWORD(v44) = 0;
    goto LABEL_12;
  }
  if (v5 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 8), (uint64_t)v10, v5, 32);
    v13 = v44;
    if (!(_DWORD)v44)
      goto LABEL_11;
    v12 = v43;
    v10 = *v11;
  }
  else
  {
    v12 = v45;
    v13 = v5;
  }
  memcpy(v10, v12, 32 * v13);
LABEL_11:
  *((_DWORD *)v9 + 4) = v5;
LABEL_12:
  LODWORD(v44) = 0;
LABEL_13:
  v45[11] = v9;
  v40 = v42;
  v41 = 0x200000000;
  v14 = v51;
  if (!(_DWORD)v51)
    goto LABEL_17;
  v15 = v42;
  v16 = v51;
  if (v51 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, v51, 32);
    v16 = v51;
    if (!(_DWORD)v51)
      goto LABEL_16;
    v15 = v40;
  }
  memcpy(v15, v50, 32 * v16);
LABEL_16:
  LODWORD(v41) = v14;
LABEL_17:
  v17 = (char *)operator new(0x58uLL);
  v18 = v17;
  *(_QWORD *)v17 = &off_1E7FA0DF8;
  v19 = v17 + 24;
  *((_QWORD *)v17 + 1) = v17 + 24;
  *((_QWORD *)v17 + 2) = 0x200000000;
  if (!(_DWORD)v14)
    goto LABEL_24;
  if (v40 != v42)
  {
    *((_QWORD *)v17 + 1) = v40;
    v38 = HIDWORD(v41);
    *((_DWORD *)v17 + 4) = v14;
    *((_DWORD *)v17 + 5) = v38;
    v40 = v42;
    HIDWORD(v41) = 0;
    goto LABEL_23;
  }
  if (v14 >= 3)
  {
    v39 = (void **)(v17 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v17 + 8), (uint64_t)v19, v14, 32);
    v21 = v41;
    if (!(_DWORD)v41)
      goto LABEL_22;
    v20 = v40;
    v19 = *v39;
  }
  else
  {
    v20 = v42;
    v21 = v14;
  }
  memcpy(v19, v20, 32 * v21);
LABEL_22:
  *((_DWORD *)v18 + 4) = v14;
LABEL_23:
  LODWORD(v41) = 0;
LABEL_24:
  v22 = 0;
  v23 = 0;
  v45[15] = v18;
  v46 = v48;
  v47 = 0x400000000;
  v24 = &v49;
  do
  {
    v25 = v22;
    v26 = &v45[4 * v23 + 8];
    v27 = (_QWORD *)v26[3];
    if (v27)
    {
      if (v27 == v26)
      {
        *v24 = (uint64_t)(v24 - 3);
        (*(void (**)(_QWORD *))(*v26 + 24))(v26);
      }
      else
      {
        *v24 = (*(uint64_t (**)(_QWORD))(*v27 + 16))(v26[3]);
      }
    }
    else
    {
      *v24 = 0;
    }
    v24 += 4;
    v22 = 1;
    v23 = 1;
  }
  while ((v25 & 1) == 0);
  v28 = v47;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  LODWORD(v47) = v28 + 2;
  if (v28 == -2)
  {
    *(_BYTE *)(a3 + 144) = 1;
LABEL_44:
    v30 = (char *)v46;
  }
  else
  {
    sub_1C48AAD34(a3, (uint64_t)&v46);
    v29 = v47;
    *(_BYTE *)(a3 + 144) = 1;
    v30 = (char *)v46;
    if ((_DWORD)v29)
    {
      v31 = 32 * v29;
      while (1)
      {
        v32 = *(char **)&v30[v31 - 8];
        if (&v30[v31 - 32] == v32)
          break;
        if (v32)
        {
          v33 = 5;
          goto LABEL_40;
        }
LABEL_41:
        v31 -= 32;
        if (!v31)
          goto LABEL_44;
      }
      v32 = &v30[v31 - 32];
      v33 = 4;
LABEL_40:
      (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
      goto LABEL_41;
    }
  }
  if (v30 != v48)
    free(v30);
  for (i = 0; i != -8; i -= 4)
  {
    v35 = (_QWORD *)v45[i + 15];
    if (&v45[i + 12] == v35)
    {
      v35 = &v45[i + 12];
      v36 = 4;
    }
    else
    {
      if (!v35)
        continue;
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  if (v40 != v42)
    free(v40);
  if (v43 != v45)
    free(v43);
LABEL_58:
  if (v50 != v52)
    free(v50);
}

void sub_1C48A95D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  void *v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  char *v18;
  char *v19;
  void *v20;
  _BYTE *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t i;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  void **v40;
  _DWORD v41[30];
  void *v42;
  uint64_t v43;
  _BYTE v44[64];
  void *v45;
  uint64_t v46;
  _QWORD v47[16];
  void *v48;
  uint64_t v49;
  _BYTE v50[24];
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD v54[9];

  v54[8] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40);
  sub_1C48AA43C((uint64_t)v41, v5, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)a2, 0, 1, 0, 0);
  v52 = v54;
  v53 = 0x200000000;
  if (!sub_1C48ADD18(a1, v5, v41[0], v41[1], (uint64_t)&v52, v41[21] << 6))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 144) = 0;
    goto LABEL_58;
  }
  v45 = v47;
  v46 = 0x200000000;
  v6 = v53;
  if ((_DWORD)v53)
  {
    v7 = v47;
    v8 = v53;
    if (v53 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v53, 32);
      v8 = v53;
      if (!(_DWORD)v53)
        goto LABEL_5;
      v7 = v45;
    }
    memcpy(v7, v52, 32 * v8);
LABEL_5:
    LODWORD(v46) = v6;
  }
  v9 = (char *)operator new(0x58uLL);
  v10 = v9;
  *(_QWORD *)v9 = &off_1E7FA0E40;
  v11 = v9 + 24;
  *((_QWORD *)v9 + 1) = v9 + 24;
  v12 = (void **)(v9 + 8);
  *((_QWORD *)v9 + 2) = 0x200000000;
  if (!(_DWORD)v6)
    goto LABEL_13;
  if (v45 != v47)
  {
    *((_QWORD *)v9 + 1) = v45;
    v38 = HIDWORD(v46);
    *((_DWORD *)v9 + 4) = v6;
    *((_DWORD *)v9 + 5) = v38;
    v45 = v47;
    HIDWORD(v46) = 0;
    goto LABEL_12;
  }
  if (v6 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v9 + 8), (uint64_t)v11, v6, 32);
    v14 = v46;
    if (!(_DWORD)v46)
      goto LABEL_11;
    v13 = v45;
    v11 = *v12;
  }
  else
  {
    v13 = v47;
    v14 = v6;
  }
  memcpy(v11, v13, 32 * v14);
LABEL_11:
  *((_DWORD *)v10 + 4) = v6;
LABEL_12:
  LODWORD(v46) = 0;
LABEL_13:
  v47[11] = v10;
  v42 = v44;
  v43 = 0x200000000;
  v15 = v53;
  if (!(_DWORD)v53)
    goto LABEL_17;
  v16 = v44;
  v17 = v53;
  if (v53 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v53, 32);
    v17 = v53;
    if (!(_DWORD)v53)
      goto LABEL_16;
    v16 = v42;
  }
  memcpy(v16, v52, 32 * v17);
LABEL_16:
  LODWORD(v43) = v15;
LABEL_17:
  v18 = (char *)operator new(0x58uLL);
  v19 = v18;
  *(_QWORD *)v18 = &off_1E7FA0E88;
  v20 = v18 + 24;
  *((_QWORD *)v18 + 1) = v18 + 24;
  *((_QWORD *)v18 + 2) = 0x200000000;
  if (!(_DWORD)v15)
    goto LABEL_24;
  if (v42 != v44)
  {
    *((_QWORD *)v18 + 1) = v42;
    v39 = HIDWORD(v43);
    *((_DWORD *)v18 + 4) = v15;
    *((_DWORD *)v18 + 5) = v39;
    v42 = v44;
    HIDWORD(v43) = 0;
    goto LABEL_23;
  }
  if (v15 >= 3)
  {
    v40 = (void **)(v18 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v18 + 8), (uint64_t)v20, v15, 32);
    v22 = v43;
    if (!(_DWORD)v43)
      goto LABEL_22;
    v21 = v42;
    v20 = *v40;
  }
  else
  {
    v21 = v44;
    v22 = v15;
  }
  memcpy(v20, v21, 32 * v22);
LABEL_22:
  *((_DWORD *)v19 + 4) = v15;
LABEL_23:
  LODWORD(v43) = 0;
LABEL_24:
  v23 = 0;
  v24 = 0;
  v47[15] = v19;
  v48 = v50;
  v49 = 0x400000000;
  v25 = &v51;
  do
  {
    v26 = v23;
    v27 = &v47[4 * v24 + 8];
    v28 = (_QWORD *)v27[3];
    if (v28)
    {
      if (v28 == v27)
      {
        *v25 = (uint64_t)(v25 - 3);
        (*(void (**)(_QWORD *))(*v27 + 24))(v27);
      }
      else
      {
        *v25 = (*(uint64_t (**)(_QWORD))(*v28 + 16))(v27[3]);
      }
    }
    else
    {
      *v25 = 0;
    }
    v25 += 4;
    v23 = 1;
    v24 = 1;
  }
  while ((v26 & 1) == 0);
  v29 = v49;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  LODWORD(v49) = v29 + 2;
  if (v29 == -2)
  {
    *(_BYTE *)(a3 + 144) = 1;
LABEL_44:
    v31 = (char *)v48;
  }
  else
  {
    sub_1C48AAD34(a3, (uint64_t)&v48);
    v30 = v49;
    *(_BYTE *)(a3 + 144) = 1;
    v31 = (char *)v48;
    if ((_DWORD)v30)
    {
      v32 = 32 * v30;
      while (1)
      {
        v33 = *(char **)&v31[v32 - 8];
        if (&v31[v32 - 32] == v33)
          break;
        if (v33)
        {
          v34 = 5;
          goto LABEL_40;
        }
LABEL_41:
        v32 -= 32;
        if (!v32)
          goto LABEL_44;
      }
      v33 = &v31[v32 - 32];
      v34 = 4;
LABEL_40:
      (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
      goto LABEL_41;
    }
  }
  if (v31 != v50)
    free(v31);
  for (i = 0; i != -8; i -= 4)
  {
    v36 = (_QWORD *)v47[i + 15];
    if (&v47[i + 12] == v36)
    {
      v36 = &v47[i + 12];
      v37 = 4;
    }
    else
    {
      if (!v36)
        continue;
      v37 = 5;
    }
    (*(void (**)(void))(*v36 + 8 * v37))();
  }
  if (v42 != v44)
    free(v42);
  if (v45 != v47)
    free(v45);
LABEL_58:
  if (v52 != v54)
    free(v52);
}

void sub_1C48A9A64(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  int RegSizeInBits;
  __int128 v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  unint64_t v16;
  BOOL v17;
  __int128 *v18;
  char *v19;
  _BYTE *v20;
  unsigned int v21;
  char *v22;
  char *v23;
  void *v24;
  _BYTE *v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  char v30;
  __int128 *v31;
  __int128 *v32;
  int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t i;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void **v44;
  __int128 v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[64];
  __int128 v53;
  __int128 v54;
  _BYTE v55[24];
  _QWORD v56[2];
  void *v57;
  uint64_t v58;
  _BYTE v59[24];
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD v63[9];

  v63[8] = *MEMORY[0x1E0C80C00];
  v61 = (__int128 *)v63;
  v62 = 0x200000000;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 24) + 32) + 40);
  sub_1C48AA43C((uint64_t)&v57, v6, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)a2, 1, 0, 0, 0);
  if (*(_BYTE *)a2
    || ((v7 = *((_DWORD *)a2 + 1), v7 - 1 <= 0x3FFFFFFE)
      ? (v42 = *(_QWORD *)(a1 + 80),
         RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v42 + 264)
                                   + 24
                                   * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(_QWORD *)(a1 + 88), v7, v42)+ 24)+ *(_DWORD *)(v42 + 272)* ((*(_QWORD *)(v42 + 248) - *(_QWORD *)(v42 + 240)) >> 3)))): (RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 80), v7, v6)), RegSizeInBits != 64))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 144) = 0;
    goto LABEL_25;
  }
  v9 = a2[1];
  v53 = *a2;
  v54 = v9;
  sub_1C48AA044(a1, (uint64_t)&v53, 0, v6);
  v10 = (__int128 *)sub_1C47C0F60((uint64_t)&v61, (unint64_t)&v53, 1);
  v11 = &v61[2 * v62];
  v12 = v10[1];
  *v11 = *v10;
  v11[1] = v12;
  LODWORD(v62) = v62 + 1;
  v47 = 1;
  v48 = 0;
  v49 = 0;
  v13 = (__int128 *)sub_1C47C0F60((uint64_t)&v61, (unint64_t)&v47, 1);
  v14 = &v61[2 * v62];
  v15 = v13[1];
  *v14 = *v13;
  v14[1] = v15;
  v16 = (v62 + 1);
  v17 = (_DWORD)v62 == -1;
  LODWORD(v62) = v62 + 1;
  v18 = v61;
  v45 = *v61;
  v46 = v61[1];
  v19 = (char *)operator new(0x28uLL);
  *(_QWORD *)v19 = &off_1E7FA0ED0;
  *(_OWORD *)(v19 + 8) = v45;
  *(_OWORD *)(v19 + 24) = v46;
  *((_QWORD *)&v54 + 1) = v19;
  v50 = v52;
  v51 = 0x200000000;
  if (!v17)
  {
    v20 = v52;
    v21 = v16;
    if (v16 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v16, 32);
      v21 = v62;
      if (!(_DWORD)v62)
        goto LABEL_8;
      v18 = v61;
      v20 = v50;
    }
    memcpy(v20, v18, 32 * v21);
LABEL_8:
    LODWORD(v51) = v16;
  }
  v22 = (char *)operator new(0x58uLL);
  v23 = v22;
  *(_QWORD *)v22 = &off_1E7FA0F18;
  v24 = v22 + 24;
  *((_QWORD *)v22 + 1) = v22 + 24;
  *((_QWORD *)v22 + 2) = 0x200000000;
  if (!(_DWORD)v16)
    goto LABEL_16;
  if (v50 != v52)
  {
    *((_QWORD *)v22 + 1) = v50;
    v43 = HIDWORD(v51);
    *((_DWORD *)v22 + 4) = v16;
    *((_DWORD *)v22 + 5) = v43;
    v50 = v52;
    HIDWORD(v51) = 0;
    goto LABEL_15;
  }
  if (v16 >= 3)
  {
    v44 = (void **)(v22 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v22 + 8), (uint64_t)v24, v16, 32);
    v26 = v51;
    if (!(_DWORD)v51)
      goto LABEL_14;
    v25 = v50;
    v24 = *v44;
  }
  else
  {
    v25 = v52;
    v26 = v16;
  }
  memcpy(v24, v25, 32 * v26);
LABEL_14:
  *((_DWORD *)v23 + 4) = v16;
LABEL_15:
  LODWORD(v51) = 0;
LABEL_16:
  v27 = 0;
  v28 = 0;
  v56[0] = v23;
  v57 = v59;
  v58 = 0x400000000;
  v29 = &v60;
  do
  {
    v30 = v27;
    v31 = &v53 + 2 * v28;
    v32 = (__int128 *)*((_QWORD *)v31 + 3);
    if (v32)
    {
      if (v32 == v31)
      {
        *v29 = (uint64_t)(v29 - 3);
        (*(void (**)(__int128 *))(*(_QWORD *)v31 + 24))(v31);
      }
      else
      {
        *v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v32 + 16))(*((_QWORD *)v31 + 3));
      }
    }
    else
    {
      *v29 = 0;
    }
    v29 += 4;
    v27 = 1;
    v28 = 1;
  }
  while ((v30 & 1) == 0);
  v33 = v58;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  LODWORD(v58) = v33 + 2;
  if (v33 == -2)
  {
    *(_BYTE *)(a3 + 144) = 1;
LABEL_39:
    v35 = (char *)v57;
  }
  else
  {
    sub_1C48AAD34(a3, (uint64_t)&v57);
    v34 = v58;
    *(_BYTE *)(a3 + 144) = 1;
    v35 = (char *)v57;
    if ((_DWORD)v34)
    {
      v36 = 32 * v34;
      while (1)
      {
        v37 = *(char **)&v35[v36 - 8];
        if (&v35[v36 - 32] == v37)
          break;
        if (v37)
        {
          v38 = 5;
          goto LABEL_35;
        }
LABEL_36:
        v36 -= 32;
        if (!v36)
          goto LABEL_39;
      }
      v37 = &v35[v36 - 32];
      v38 = 4;
LABEL_35:
      (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
      goto LABEL_36;
    }
  }
  if (v35 != v59)
    free(v35);
  for (i = 0; i != -8; i -= 4)
  {
    v40 = (_BYTE *)v56[i];
    if (&v55[i * 8] == v40)
    {
      v40 = &v55[i * 8];
      v41 = 4;
    }
    else
    {
      if (!v40)
        continue;
      v41 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
  }
  if (v50 != v52)
    free(v50);
LABEL_25:
  if (v61 != (__int128 *)v63)
    free(v61);
}

uint64_t sub_1C48A9EFC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v4 = *(unsigned int *)(a3 + 4);
  if ((int)v4 >= 0)
    v5 = (uint64_t *)(a2 + 8 * v4);
  else
    v5 = (uint64_t *)(a1 + 16 * (v4 & 0x7FFFFFFF) + 8);
  v6 = *v5;
  if (!*v5)
    return a3;
  if ((*(_BYTE *)(v6 + 3) & 1) == 0)
  {
    v6 = *(_QWORD *)(v6 + 24);
    if (!v6 || (*(_BYTE *)(v6 + 3) & 1) == 0)
      return a3;
  }
  v8 = 0;
  v9 = *(_QWORD *)(v6 + 8);
  if (a4 && v9)
  {
    if (**(_WORD **)(v9 + 16) != 258)
    {
      v8 = 0;
      goto LABEL_23;
    }
    v10 = *(_QWORD *)(v9 + 32);
    a3 = v10 + 32;
    v11 = *(unsigned int *)(v10 + 36);
    if ((int)v11 >= 0)
      v12 = (uint64_t *)(a2 + 8 * v11);
    else
      v12 = (uint64_t *)(a1 + 16 * (v11 & 0x7FFFFFFF) + 8);
    v13 = *v12;
    if (!v13)
      return a3;
    if ((*(_BYTE *)(v13 + 3) & 1) == 0)
    {
      v13 = *(_QWORD *)(v13 + 24);
      if (!v13 || (*(_BYTE *)(v13 + 3) & 1) == 0)
        return a3;
    }
    v9 = *(_QWORD *)(v13 + 8);
    v8 = 1;
  }
  if (v9)
  {
LABEL_23:
    while (1)
    {
      v14 = **(unsigned __int16 **)(v9 + 16);
      if (v14 != 177)
        break;
      v15 = *(_QWORD *)(v9 + 32);
      a3 = v15 + 32;
      v8 ^= 2u;
      v16 = *(unsigned int *)(v15 + 36);
      if ((int)v16 >= 0)
        v17 = (uint64_t *)(a2 + 8 * v16);
      else
        v17 = (uint64_t *)(a1 + 16 * (v16 & 0x7FFFFFFF) + 8);
      v18 = *v17;
      if (v18)
      {
        if ((*(_BYTE *)(v18 + 3) & 1) != 0 || (v18 = *(_QWORD *)(v18 + 24)) != 0 && (*(_BYTE *)(v18 + 3) & 1) != 0)
        {
          v9 = *(_QWORD *)(v18 + 8);
          if (v9)
            continue;
        }
      }
      return a3;
    }
    if (v14 == 184)
      return *(_QWORD *)(v9 + 32) + 32;
  }
  return a3;
}

uint64_t sub_1C48AA044(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v42;

  v4 = *(_BYTE **)(result + 64);
  if (v4[319])
    v5 = v4[338] == 0;
  else
    v5 = 0;
  if (!v5 && !v4[326])
    return result;
  if (*(_BYTE *)a2)
    return result;
  v6 = *(_DWORD *)(a2 + 4);
  if ((v6 & 0x80000000) == 0)
    return result;
  v7 = v6 & 0x7FFFFFFF;
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 16 * v7 + 8);
  if (!v8)
    return result;
  v42 = v7;
  if ((*(_BYTE *)(v8 + 3) & 1) == 0)
  {
    v8 = *(_QWORD *)(v8 + 24);
    if (!v8 || (*(_BYTE *)(v8 + 3) & 1) == 0)
      return result;
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    return result;
  v10 = *(_DWORD *)(*(_QWORD *)(v9 + 32) + 4);
  if (v10 - 1 <= 0x3FFFFFFE)
  {
    v11 = *(_QWORD *)(result + 80);
    result = *(unsigned int *)(*(_QWORD *)(v11 + 264)
                             + 24
                             * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(_QWORD *)(result + 88), v10, v11)+ 24)+ *(_DWORD *)(v11 + 272)* ((*(_QWORD *)(v11 + 248) - *(_QWORD *)(v11 + 240)) >> 3)));
  }
  else
  {
    result = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(result + 80), v10, a4);
  }
  v12 = **(unsigned __int16 **)(v9 + 16);
  v13 = *(_QWORD *)(a4 + 24);
  if (v12 != 19)
  {
    v16 = *(_QWORD *)(v13 + 16 * v42 + 8);
LABEL_28:
    if (v16)
    {
      if ((*(_BYTE *)(v16 + 3) & 1) != 0 || (v16 = *(_QWORD *)(v16 + 24)) != 0 && (*(_BYTE *)(v16 + 3) & 1) != 0)
      {
        v35 = *(_QWORD *)(v16 + 8);
        if (v35)
        {
          if (**(_WORD **)(v35 + 16) == 318 && *(_BYTE *)(*(_QWORD *)(v35 + 32) + 32) == 1)
          {
            HIDWORD(v36) = (result + 7) >> 3;
            LODWORD(v36) = HIDWORD(v36) - 2;
            __asm { BR              X12 }
          }
        }
      }
    }
    if (v12 != 119 || (_DWORD)result != 16)
    {
      if (v12 != 179 || a3 == 0)
        return result;
      v20 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 36);
      v21 = (uint64_t *)(v13 + 16 * (v20 & 0x7FFFFFFF) + 8);
      if ((int)v20 >= 0)
        v21 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * v20);
      v22 = *v21;
      if (!v22)
        return result;
      v23 = v22;
      if ((*(_DWORD *)v22 & 0x1000000) == 0)
      {
        v23 = *(_QWORD *)(v22 + 24);
        if (!v23 || (*(_BYTE *)(v23 + 3) & 1) == 0)
          return result;
      }
      v24 = *(_QWORD *)(v23 + 8);
      if (!v24 || **(_WORD **)(v24 + 16) != 318 || *(_BYTE *)(*(_QWORD *)(v24 + 32) + 32) != 1)
        return result;
      if ((*(_DWORD *)v22 & 0x1000000) == 0)
      {
        v22 = *(_QWORD *)(v22 + 24);
        if (!v22)
          goto LABEL_78;
        if ((*(_BYTE *)(v22 + 3) & 1) == 0)
        {
LABEL_77:
          v22 = 0;
          goto LABEL_78;
        }
      }
      v22 = *(_QWORD *)(v22 + 8);
      if (v22)
      {
        if (**(_WORD **)(v22 + 16) == 318)
        {
          v25 = *(_QWORD *)(v22 + 32);
          if (*(_BYTE *)(v25 + 32) == 1)
          {
            v22 = *(_QWORD *)(v25 + 48);
            v26 = v22 & 0xFFFFFFFFFFFFFF00;
            v22 = v22;
LABEL_79:
            v37 = v26 | v22;
            v38 = 519;
LABEL_83:
            v39 = v37 / 2;
            *(_DWORD *)a2 = v38;
            *(_DWORD *)(a2 + 4) = v39;
            *(_QWORD *)(a2 + 8) = 0;
            *(_DWORD *)(a2 + 16) = 64;
            *(_DWORD *)(a2 + 24) = HIDWORD(v39);
            return result;
          }
        }
        goto LABEL_77;
      }
LABEL_78:
      v26 = 0;
      goto LABEL_79;
    }
    v27 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 36);
    v28 = v13 + 16 * (v27 & 0x7FFFFFFF) + 8;
    v29 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * v27);
    if ((int)v27 < 0)
      v29 = (uint64_t *)v28;
    v30 = *v29;
    if (!v30)
      return result;
    v31 = v30;
    if ((*(_DWORD *)v30 & 0x1000000) == 0)
    {
      v31 = *(_QWORD *)(v30 + 24);
      if (!v31 || (*(_BYTE *)(v31 + 3) & 1) == 0)
        return result;
    }
    v32 = *(_QWORD *)(v31 + 8);
    if (!v32 || **(_WORD **)(v32 + 16) != 318 || *(_BYTE *)(*(_QWORD *)(v32 + 32) + 32) != 1)
      return result;
    if ((*(_DWORD *)v30 & 0x1000000) == 0)
    {
      v30 = *(_QWORD *)(v30 + 24);
      if (!v30)
        goto LABEL_81;
      if ((*(_BYTE *)(v30 + 3) & 1) == 0)
      {
LABEL_80:
        v30 = 0;
        goto LABEL_81;
      }
    }
    v30 = *(_QWORD *)(v30 + 8);
    if (v30)
    {
      if (**(_WORD **)(v30 + 16) == 318)
      {
        v33 = *(_QWORD *)(v30 + 32);
        if (*(_BYTE *)(v33 + 32) == 1)
        {
          v30 = *(_QWORD *)(v33 + 48);
          v34 = v30 & 0xFFFFFFFFFFFFFF00;
          v30 = v30;
LABEL_82:
          v37 = v34 | v30;
          v38 = 263;
          goto LABEL_83;
        }
      }
      goto LABEL_80;
    }
LABEL_81:
    v34 = 0;
    goto LABEL_82;
  }
  while (1)
  {
    v14 = *(_QWORD *)(v9 + 32);
    if ((*(_DWORD *)(v14 + 32) & 0xFFF00) != 0)
      return result;
    v15 = *(_DWORD *)(v14 + 36);
    if ((v15 & 0x80000000) == 0)
      return result;
    v16 = *(_QWORD *)(v13 + 16 * (v15 & 0x7FFFFFFF) + 8);
    if (v16
      && ((v17 = v16, (*(_BYTE *)(v16 + 3) & 1) != 0)
       || (v17 = *(_QWORD *)(v16 + 24)) != 0 && (*(_BYTE *)(v17 + 3) & 1) != 0))
    {
      v9 = *(_QWORD *)(v17 + 8);
    }
    else
    {
      v9 = 0;
    }
    v12 = **(unsigned __int16 **)(v9 + 16);
    if (v12 != 19)
      goto LABEL_28;
  }
}

uint64_t sub_1C48AA43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, int a6, int a7, char a8, __int16 a9)
{
  _OWORD *v12;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  int RegSizeInBits;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  int v30;
  _BOOL4 v31;
  int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  char v36;
  int v37;
  unsigned int v38;
  int v39;
  __int128 v40;
  __int128 v41;
  int v43;
  int v44;
  int v45;
  llvm::detail::DoubleAPFloat *v46;
  void *v47;
  unsigned int v48;
  _DWORD *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  llvm::detail::DoubleAPFloat *v57;
  void *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  int v65;
  _DWORD *v66;
  unsigned int v67;

  v12 = a5;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 96) = a2;
  *(_QWORD *)(a1 + 104) = a3;
  *(_QWORD *)(a1 + 112) = a4;
  if (*a5)
  {
    *(_DWORD *)(a1 + 88) = 16;
    v15 = *a5;
    if (v15 == 3)
    {
      v18 = 0;
      v19 = 0;
      v17 = 0;
      v16 = *((_QWORD *)a5 + 2);
      *(_BYTE *)(a1 + 92) = 1;
    }
    else if (v15 == 1)
    {
      v16 = 0;
      v17 = 0;
      v18 = *((_QWORD *)a5 + 2);
      *(_BYTE *)(a1 + 92) = 0;
      v19 = 1;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      v16 = 0;
      v17 = 0;
    }
  }
  else
  {
    v20 = *((unsigned int *)a5 + 1);
    if ((v20 - 1) <= 0x3FFFFFFE)
      RegSizeInBits = *(_DWORD *)(*(_QWORD *)(a3 + 264)
                                + 24
                                * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(a4, *((_DWORD *)a5 + 1), a3)+ 24)+ *(_DWORD *)(a3 + 272)* ((*(_QWORD *)(a3 + 248) - *(_QWORD *)(a3 + 240)) >> 3)));
    else
      RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(a3, *((_DWORD *)a5 + 1), a2);
    *(_DWORD *)(a1 + 88) = RegSizeInBits;
    v22 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
    if ((int)v20 >= 0)
      v22 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v20);
    v23 = *v22;
    if ((*(_BYTE *)(v23 + 3) & 1) == 0)
      v23 = *(_QWORD *)(v23 + 24);
    v17 = *(_QWORD *)(v23 + 8);
    v24 = **(unsigned __int16 **)(v17 + 16) - 121;
    *(_BYTE *)(a1 + 92) = (v24 < 0x40) & (0xE7039C0000004001 >> v24);
    v25 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
    if ((int)v20 >= 0)
      v25 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v20);
    v26 = *v25;
    if ((*(_BYTE *)(v26 + 3) & 1) == 0)
      v26 = *(_QWORD *)(v26 + 24);
    v27 = *(_QWORD *)(v26 + 8);
    if (**(_WORD **)(v27 + 16) == 121)
      v16 = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 48);
    else
      v16 = 0;
    v18 = sub_1C554C050(v20, a2);
  }
  v28 = 4 * (v19 != 0);
  if (v16)
    v28 = 5;
  *(_DWORD *)(a1 + 80) = v28;
  if ((a9 & 0xFF00) != 0)
    *(_BYTE *)(a1 + 92) = a9;
  if (v16)
  {
    if (*(_UNKNOWN **)(v16 + 32) == &unk_1C866F1C0)
      v29 = *(_BYTE *)(*(_QWORD *)(v16 + 40) + 28);
    else
      v29 = *(_BYTE *)(v16 + 52);
    v31 = (v29 & 7) == 3 && (v29 & 8) == 0;
    v30 = v31 | a6 ^ 1;
  }
  else
  {
    v30 = 1;
  }
  if (v28 < 4 || !v30)
    goto LABEL_53;
  v32 = *(_DWORD *)(a1 + 88);
  if (v32 == 32)
  {
    if (*(_BYTE *)(a1 + 92))
    {
      if ((sub_1C48AAB00(v16 + 24) & 1) != 0)
      {
LABEL_85:
        v45 = *(_DWORD *)(a1 + 88);
        if (v45 == 32)
        {
          if (*(_BYTE *)(a1 + 92))
          {
            v58 = *(void **)(v16 + 32);
            v57 = (llvm::detail::DoubleAPFloat *)(v16 + 32);
            if (v58 == &unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::bitcastToAPInt(v57, (unsigned int *)&v66);
            else
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v57, (unsigned int *)&v66);
            v48 = v67;
            v49 = v66;
            v59 = (unsigned int *)&v66;
            if (v67 >= 0x41)
              v59 = v66;
            v60 = *v59;
            v61 = (v60 >> 23);
            v53 = (v60 >> 19) & 0xF;
            v62 = v61 - 124;
            v63 = (v53 | 0x10u) >> (125 - v61);
            if (v61 > 0x7C)
              v63 = (v60 >> 19) & 0xF;
            else
              v62 = 0;
            if (v61 | v53)
            {
              v61 = v62;
              v53 = v63;
            }
            v56 = (16 * v61) | (v60 >> 31 << 7);
            goto LABEL_109;
          }
        }
        else if (v45 == 16 && *(_BYTE *)(a1 + 92))
        {
          v47 = *(void **)(v16 + 32);
          v46 = (llvm::detail::DoubleAPFloat *)(v16 + 32);
          if (v47 == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v46, (unsigned int *)&v66);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v46, (unsigned int *)&v66);
          v48 = v67;
          v49 = v66;
          v50 = (unsigned int *)&v66;
          if (v67 >= 0x41)
            v50 = v66;
          v51 = *v50;
          v52 = (v51 >> 10) & 0x1F;
          v53 = (v51 >> 6) & 0xF;
          v54 = v52 - 12;
          v55 = (v53 | 0x10u) >> (13 - ((v51 >> 10) & 0x1F));
          if (v52 > 0xC)
            v55 = (v51 >> 6) & 0xF;
          else
            v54 = 0;
          if (v52 | v53)
          {
            v52 = v54;
            v53 = v55;
          }
          v56 = (v51 >> 8) & 0x80 | (16 * v52);
LABEL_109:
          v18 = v56 | v53;
          if (v48 >= 0x41 && v49)
            MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
        }
        v64 = v18 >> *(_DWORD *)(a1 + 84);
        v65 = *(unsigned __int8 *)(a1 + 32);
        *(_DWORD *)a1 = 1;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = v64;
        if (!v65)
          *(_BYTE *)(a1 + 32) = 1;
        return a1;
      }
      goto LABEL_53;
    }
  }
  else if (v32 == 16)
  {
    if (*(_BYTE *)(a1 + 92))
    {
      if ((sub_1C48AA9FC(v16 + 24) & 1) != 0)
        goto LABEL_85;
      goto LABEL_53;
    }
  }
  else if (*(_BYTE *)(a1 + 92) || v32 != 64)
  {
    goto LABEL_53;
  }
  if (v18 >= 0x100 && a7)
  {
    v33 = v18 & 0xFFFFFFFFFFFFFC03;
    if ((v18 & 0xFFFFFFFFFFFFFE01) != 0 && v33 && (v18 & 0xFFFFFFFFFFFFF807) != 0)
    {
      if ((v18 & 0xFFFFFFFFFFFFF00FLL) != 0)
      {
        *(_DWORD *)(a1 + 84) = 0;
        goto LABEL_53;
      }
      v44 = 4;
    }
    else
    {
      if (v33)
        v43 = 3;
      else
        v43 = 2;
      if ((v18 & 0xFFFFFFFFFFFFFE01) != 0)
        v44 = v43;
      else
        v44 = 1;
    }
    *(_DWORD *)(a1 + 84) = v44;
    goto LABEL_85;
  }
  if (v18 <= 0xFF)
    goto LABEL_85;
LABEL_53:
  if (a7)
  {
    v34 = **(unsigned __int16 **)(v17 + 16);
    if (v34 == 127 || v34 == 47)
    {
      v35 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v17 + 32) + 68), a2);
      if (v36)
      {
        v37 = **(unsigned __int16 **)(v17 + 16);
        if (v37 == 127 && v35 <= 4)
        {
          v38 = v35;
LABEL_60:
          *(_DWORD *)(a1 + 84) = v38;
          v12 = (_OWORD *)(*(_QWORD *)(v17 + 32) + 32);
          goto LABEL_61;
        }
        if (v37 == 47 && v35 <= 16)
        {
          v38 = 31 - __clz(v35);
          if (1 << v38 == v35)
            goto LABEL_60;
        }
      }
    }
  }
LABEL_61:
  if (v17 && (a8 & 1) != 0)
  {
    v39 = *(unsigned __int8 *)(a1 + 32);
    if (**(_WORD **)(v17 + 16) == 318)
    {
      v40 = v12[1];
      *(_OWORD *)a1 = *v12;
      *(_OWORD *)(a1 + 16) = v40;
      if (!v39)
        *(_BYTE *)(a1 + 32) = 1;
      *(_DWORD *)(a1 + 80) = 2;
      return a1;
    }
  }
  else
  {
    v39 = *(unsigned __int8 *)(a1 + 32);
  }
  v41 = v12[1];
  *(_OWORD *)a1 = *v12;
  *(_OWORD *)(a1 + 16) = v41;
  if (!v39)
    *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

uint64_t sub_1C48AA9FC(uint64_t a1)
{
  uint64_t v1;
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  _BOOL8 v6;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unsigned int v13;

  v1 = a1;
  v4 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v3 = v4;
  if (v4 == &unk_1C866F1C0)
    v1 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 28) & 7;
  if (v5 < 2)
    return 0;
  if (v5 == 3)
    return 1;
  if (v3 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v2, (unsigned int *)&v12);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v2, (unsigned int *)&v12);
  v8 = (uint64_t *)&v12;
  if (v13 >= 0x41)
    v8 = v12;
  v9 = *v8;
  v6 = 1;
  if (v9)
  {
    v10 = (v9 >> 10) & 0x1F;
    v11 = (v9 & 0x3F) != 0 || v10 - 9 > 0xA;
    if (v11 || v10 <= 0xC && (((v9 | 0x400uLL) >> (13 - v10)) & 0x3F) != 0)
      v6 = 0;
  }
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C]();
  return v6;
}

uint64_t sub_1C48AAB00(uint64_t a1)
{
  uint64_t v1;
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  _BOOL8 v6;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unsigned int v13;

  v1 = a1;
  v4 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v3 = v4;
  if (v4 == &unk_1C866F1C0)
    v1 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 28) & 7;
  if (v5 < 2)
    return 0;
  if (v5 == 3)
    return 1;
  if (v3 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v2, (unsigned int *)&v12);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v2, (unsigned int *)&v12);
  v8 = (uint64_t *)&v12;
  if (v13 >= 0x41)
    v8 = v12;
  v9 = *v8;
  v6 = 1;
  if (v9)
  {
    v10 = (v9 >> 23);
    v11 = (v9 & 0x7FFFF) != 0 || v10 - 121 > 0xA;
    if (v11 || v10 <= 0x7C && (((v9 | 0x800000uLL) >> (125 - v10)) & 0x7FFFF) != 0)
      v6 = 0;
  }
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C]();
  return v6;
}

void sub_1C48AAC08()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48AAC1C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FA0810;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C48AAC5C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA0810;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C48AAC84(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(a1 + 8));
}

void sub_1C48AAC94()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C48AACA8(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E7FA0858;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C48AACE0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E7FA0858;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1C48AAD00(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v2;
  llvm::MachineInstr *v3;
  llvm::MachineFunction *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 8);
  v4 = *a2;
  v3 = a2[1];
  v6 = 1;
  v7 = 0;
  v8 = v2;
  llvm::MachineInstr::addOperand(v3, v4, (const llvm::MachineOperand *)&v6);
}

uint64_t sub_1C48AAD34(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 < v5)
      {
        if (*(_DWORD *)(a1 + 12) >= v5)
        {
          if ((_DWORD)v6)
          {
            v7 = *(char **)a1;
            v8 = 32 * v6;
            do
            {
              sub_1C48AAFD8(v7, (uint64_t)v4);
              v4 += 32;
              v7 += 32;
              v8 -= 32;
            }
            while (v8);
LABEL_41:
            v25 = *(char **)a2;
            v26 = *(unsigned int *)(a2 + 8);
            if (v6 != v26)
            {
              v27 = *(_QWORD *)a1 + 32 * v6;
              v28 = &v25[32 * v6];
              v29 = 32 * v26 - 32 * v6;
              do
              {
                v30 = (char *)*((_QWORD *)v28 + 3);
                if (v30)
                {
                  if (v28 == v30)
                  {
                    *(_QWORD *)(v27 + 24) = v27;
                    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 3) + 24))(*((_QWORD *)v28 + 3), v27);
                  }
                  else
                  {
                    *(_QWORD *)(v27 + 24) = v30;
                    *((_QWORD *)v28 + 3) = 0;
                  }
                }
                else
                {
                  *(_QWORD *)(v27 + 24) = 0;
                }
                v28 += 32;
                v27 += 32;
                v29 -= 32;
              }
              while (v29);
              v25 = *(char **)a2;
            }
            *(_DWORD *)(a1 + 8) = v5;
            v31 = *(unsigned int *)(a2 + 8);
            if ((_DWORD)v31)
            {
              v32 = 32 * v31;
              while (1)
              {
                v33 = *(char **)&v25[v32 - 8];
                if (&v25[v32 - 32] == v33)
                  break;
                if (v33)
                {
                  v34 = 5;
LABEL_56:
                  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
                }
                v32 -= 32;
                if (!v32)
                  goto LABEL_58;
              }
              v33 = &v25[v32 - 32];
              v34 = 4;
              goto LABEL_56;
            }
            goto LABEL_58;
          }
LABEL_40:
          v6 = 0;
          goto LABEL_41;
        }
        if (!(_DWORD)v6)
        {
LABEL_39:
          *(_DWORD *)(a1 + 8) = 0;
          sub_1C613A8F8(a1, v5);
          goto LABEL_40;
        }
        v21 = *(char **)a1;
        v22 = 32 * v6;
        while (1)
        {
          v23 = *(char **)&v21[v22 - 8];
          if (&v21[v22 - 32] == v23)
            break;
          if (v23)
          {
            v24 = 5;
LABEL_37:
            (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
          }
          v22 -= 32;
          if (!v22)
            goto LABEL_39;
        }
        v23 = &v21[v22 - 32];
        v24 = 4;
        goto LABEL_37;
      }
      v9 = *(char **)a1;
      if ((_DWORD)v5)
      {
        v10 = 0;
        do
        {
          sub_1C48AAFD8(&v9[v10], (uint64_t)&v4[v10]);
          v10 += 32;
        }
        while (32 * v5 != v10);
        v6 = *(unsigned int *)(a1 + 8);
        v11 = &v9[v10];
        v9 = *(char **)a1;
      }
      else
      {
        v11 = *(char **)a1;
      }
      v12 = &v9[32 * v6];
      if (v12 != v11)
      {
        while (1)
        {
          v13 = v12 - 32;
          v14 = (char *)*((_QWORD *)v12 - 1);
          if (v12 - 32 == v14)
            break;
          if (v14)
          {
            v15 = 5;
LABEL_19:
            (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
          }
          v12 = v13;
          if (v13 == v11)
            goto LABEL_21;
        }
        v14 = v12 - 32;
        v15 = 4;
        goto LABEL_19;
      }
LABEL_21:
      *(_DWORD *)(a1 + 8) = v5;
      v16 = *(unsigned int *)(a2 + 8);
      if (!(_DWORD)v16)
      {
LABEL_58:
        *(_DWORD *)(a2 + 8) = 0;
        return a1;
      }
      v17 = *(char **)a2;
      v18 = 32 * v16;
      while (1)
      {
        v19 = *(char **)&v17[v18 - 8];
        if (&v17[v18 - 32] == v19)
          break;
        if (v19)
        {
          v20 = 5;
LABEL_27:
          (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
        }
        v18 -= 32;
        if (!v18)
          goto LABEL_58;
      }
      v19 = &v17[v18 - 32];
      v20 = 4;
      goto LABEL_27;
    }
    sub_1C613AA38((char **)a1, (char **)a2);
  }
  return a1;
}

_QWORD *sub_1C48AAFD8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

char **sub_1C48AB068(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    while (1)
    {
      v6 = *(char **)&v2[v5 - 8];
      if (&v2[v5 - 32] == v6)
      {
        v6 = &v2[v5 - 32];
        v7 = 4;
      }
      else
      {
        if (!v6)
          goto LABEL_9;
        v7 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_9:
      v5 -= 32;
      if (!v5)
      {
        v2 = *a1;
        break;
      }
    }
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C48AB104()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48AB118(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FA08A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C48AB158(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA08A0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C48AB180(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  llvm::MachineInstr *v8;
  llvm::MachineFunction *v9;
  _OWORD v10[2];
  unsigned int v11;
  __int128 v12;
  __int128 v13;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2[1] + 3) + 32) + 40);
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(__int128 **)(a1 + 16);
  if (*(_BYTE *)(a1 + 24))
  {
    v4 = (__int128 *)sub_1C48A9EFC(*(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 272), (uint64_t)v4, 0);
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v12 = *v4;
  v13 = v4[1];
  sub_1C48AA044(v5, (uint64_t)&v12, 1, v3);
  v10[0] = v12;
  v10[1] = v13;
  v11 = v7;
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)v10);
  v9 = *a2;
  v8 = a2[1];
  LODWORD(v12) = 1;
  *((_QWORD *)&v12 + 1) = 0;
  *(_QWORD *)&v13 = v11;
  llvm::MachineInstr::addOperand(v8, v9, (const llvm::MachineOperand *)&v12);
}

void sub_1C48AB24C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48AB260(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FA08E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C48AB2A0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA08E8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C48AB2C8(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(a1 + 8));
}

void sub_1C48AB2D8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48AB2EC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA0930;
  return result;
}

void sub_1C48AB310(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA0930;
}

void sub_1C48AB328(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr *v2;
  llvm::MachineFunction *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v2 = a2[1];
  v5 = 1;
  v6 = 0;
  v7 = 0;
  llvm::MachineInstr::addOperand(v2, v3, (const llvm::MachineOperand *)&v5);
}

void sub_1C48AB35C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48AB370(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FA0978;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C48AB3B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA0978;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C48AB3D8(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(a1 + 8));
}

void sub_1C48AB3E8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48AB3FC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA09C0;
  return result;
}

void sub_1C48AB420(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA09C0;
}

void sub_1C48AB438(uint64_t a1, llvm::MachineFunction **a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 1;
  v3 = 0;
  v4 = 0;
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)&v2);
}

void sub_1C48AB468(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int *v12;
  uint64_t v14;
  _WORD *v15;
  int v16;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int RegSizeInBits;
  unint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  char *v25;
  char *v26;
  void *v27;
  void **v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  unsigned int v33;
  char *v34;
  char *v35;
  void *v36;
  void **v37;
  _BYTE *v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  int v54;
  _QWORD *v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;
  char v59;
  void **v60;
  void **v61;
  int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (***v69)();
  uint64_t v70;
  uint64_t i;
  _QWORD *v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  _BYTE v79[64];
  void *v80;
  uint64_t v81;
  _QWORD v82[16];
  void *v83;
  uint64_t v84;
  _BYTE v85[24];
  _BYTE v86[104];
  _QWORD *v87;
  uint64_t v88;
  _QWORD v89[2];
  uint64_t (**v90)();
  unsigned int v91;
  _QWORD v92[4];

  v92[3] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a3)
    goto LABEL_6;
  v8 = *(_DWORD *)(a3 + 4);
  v6 = a3 + 4;
  v7 = v8;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 4) + 24) + 32) + 40);
  v10 = (uint64_t *)((v8 & 0x80000000) != 0
                  ? *(_QWORD *)(v9 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v9 + 272) + 8 * v7);
  if ((v11 = *v10) == 0
    || (v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 4) + 24) + 32) + 40),
        v12 = (int *)v6,
        (*(_BYTE *)(v11 + 3) & 1) == 0)
    && ((v11 = *(_QWORD *)(v11 + 24)) == 0 || (*(_BYTE *)(v11 + 3) & 1) == 0)
    || (v14 = *(_QWORD *)(v11 + 8)) == 0)
  {
LABEL_6:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 144) = 0;
    return;
  }
  v15 = *(_WORD **)(v14 + 16);
  v16 = (unsigned __int16)*v15;
  if ((v16 - 118) > 8 || ((1 << (v16 - 118)) & 0x141) == 0)
    goto LABEL_67;
  v18 = *(_QWORD *)(v14 + 32);
  if (*(_BYTE *)(v18 + 32)
    || ((v19 = *(_DWORD *)(v18 + 36), v19 - 1 <= 0x3FFFFFFE)
      ? (v20 = *(_QWORD *)(a2 + 80),
         RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v20 + 264)
                                   + 24
                                   * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(_QWORD *)(a2 + 88), v19, v20)+ 24)+ *(_DWORD *)(v20 + 272)* ((*(_QWORD *)(v20 + 248) - *(_QWORD *)(v20 + 240)) >> 3)))): (RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a2 + 80), v19, v76)), v15 = *(_WORD **)(v14 + 16), RegSizeInBits != 16))
  {
LABEL_66:
    v16 = (unsigned __int16)*v15;
LABEL_67:
    if (v16 != 65 || (v52 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v14 + 32) + 68), v76), !v53) || v52 >> 16)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 144) = 0;
      return;
    }
    if (v52 == 0xFFFF)
      v12 = (int *)(*(_QWORD *)(v14 + 32) + 36);
    v54 = *v12;
    v55 = operator new(0x20uLL);
    v56 = 0;
    v57 = 0;
    *v55 = &off_1E7FA0A98;
    v55[1] = a2;
    v55[2] = v76;
    *((_DWORD *)v55 + 6) = v54;
    v89[1] = v55;
    v90 = &off_1E7FA0AE0;
    v91 = a4;
    v92[0] = &v90;
    v83 = v85;
    v84 = 0x400000000;
    v58 = v86;
    do
    {
      v59 = v56;
      v60 = (void **)&(&v87)[4 * v57];
      v61 = (void **)v60[3];
      if (v61)
      {
        if (v61 == v60)
        {
          *v58 = v58 - 3;
          (*((void (**)(void **))*v60 + 3))(v60);
        }
        else
        {
          *v58 = (*((uint64_t (**)(void *))*v61 + 2))(v60[3]);
        }
      }
      else
      {
        *v58 = 0;
      }
      v58 += 4;
      v56 = 1;
      v57 = 1;
    }
    while ((v59 & 1) == 0);
    v62 = v84;
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 0x400000000;
    LODWORD(v84) = v62 + 2;
    if (v62 == -2)
    {
      *(_BYTE *)(a1 + 144) = 1;
LABEL_92:
      v64 = (char *)v83;
    }
    else
    {
      sub_1C48AAD34(a1, (uint64_t)&v83);
      v63 = v84;
      *(_BYTE *)(a1 + 144) = 1;
      v64 = (char *)v83;
      if ((_DWORD)v63)
      {
        v65 = 32 * v63;
        while (1)
        {
          v66 = *(char **)&v64[v65 - 8];
          if (&v64[v65 - 32] == v66)
            break;
          if (v66)
          {
            v67 = 5;
            goto LABEL_88;
          }
LABEL_89:
          v65 -= 32;
          if (!v65)
            goto LABEL_92;
        }
        v66 = &v64[v65 - 32];
        v67 = 4;
LABEL_88:
        (*(void (**)(void))(*(_QWORD *)v66 + 8 * v67))();
        goto LABEL_89;
      }
    }
    if (v64 != v85)
      free(v64);
    v68 = 0;
    while (1)
    {
      v69 = (uint64_t (***)())v92[v68];
      if (&(&v90)[v68] == v69)
        break;
      if (v69)
      {
        v70 = 5;
LABEL_100:
        (*v69)[v70]();
      }
      v68 -= 4;
      if (v68 == -8)
        return;
    }
    v69 = &(&v90)[v68];
    v70 = 4;
    goto LABEL_100;
  }
  if (*v15 == 124)
    a4 |= 8u;
  v87 = v89;
  v88 = 0x200000000;
  if (!sub_1C48ABC08(a2, v76, (unsigned __int8 *)(*(_QWORD *)(v14 + 32) + 32), (uint64_t)&v87, a4, 0))
  {
    if (v87 != v89)
      free(v87);
    v15 = *(_WORD **)(v14 + 16);
    goto LABEL_66;
  }
  v80 = v82;
  v81 = 0x200000000;
  v22 = v88;
  if (!(_DWORD)v88)
    goto LABEL_27;
  v23 = v82;
  v24 = v88;
  if (v88 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v88, 32);
    v24 = v88;
    if (!(_DWORD)v88)
      goto LABEL_26;
    v23 = v80;
  }
  memcpy(v23, v87, 32 * v24);
LABEL_26:
  LODWORD(v81) = v22;
LABEL_27:
  v25 = (char *)operator new(0x58uLL);
  v26 = v25;
  *(_QWORD *)v25 = &off_1E7FA0A08;
  v27 = v25 + 24;
  *((_QWORD *)v25 + 1) = v25 + 24;
  v28 = (void **)(v25 + 8);
  *((_QWORD *)v25 + 2) = 0x200000000;
  if (!(_DWORD)v22)
    goto LABEL_34;
  if (v80 != v82)
  {
    *((_QWORD *)v25 + 1) = v80;
    v74 = HIDWORD(v81);
    *((_DWORD *)v25 + 4) = v22;
    *((_DWORD *)v25 + 5) = v74;
    v80 = v82;
    HIDWORD(v81) = 0;
    goto LABEL_33;
  }
  if (v22 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v25 + 8), (uint64_t)v27, v22, 32);
    v30 = v81;
    if (!(_DWORD)v81)
      goto LABEL_32;
    v29 = v80;
    v27 = *v28;
  }
  else
  {
    v29 = v82;
    v30 = v22;
  }
  memcpy(v27, v29, 32 * v30);
LABEL_32:
  *((_DWORD *)v26 + 4) = v22;
LABEL_33:
  LODWORD(v81) = 0;
LABEL_34:
  v82[11] = v26;
  v77 = v79;
  v78 = 0x200000000;
  v31 = v88;
  if (!(_DWORD)v88)
    goto LABEL_38;
  v32 = v79;
  v33 = v88;
  if (v88 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, v88, 32);
    v33 = v88;
    if (!(_DWORD)v88)
      goto LABEL_37;
    v32 = v77;
  }
  memcpy(v32, v87, 32 * v33);
LABEL_37:
  LODWORD(v78) = v31;
LABEL_38:
  v34 = (char *)operator new(0x58uLL);
  v35 = v34;
  *(_QWORD *)v34 = &off_1E7FA0A50;
  v36 = v34 + 24;
  *((_QWORD *)v34 + 1) = v34 + 24;
  v37 = (void **)(v34 + 8);
  *((_QWORD *)v34 + 2) = 0x200000000;
  if (!(_DWORD)v31)
    goto LABEL_45;
  if (v77 != v79)
  {
    *((_QWORD *)v34 + 1) = v77;
    v75 = HIDWORD(v78);
    *((_DWORD *)v34 + 4) = v31;
    *((_DWORD *)v34 + 5) = v75;
    v77 = v79;
    HIDWORD(v78) = 0;
    goto LABEL_44;
  }
  if (v31 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v34 + 8), (uint64_t)v36, v31, 32);
    v39 = v78;
    if (!(_DWORD)v78)
      goto LABEL_43;
    v38 = v77;
    v36 = *v37;
  }
  else
  {
    v38 = v79;
    v39 = v31;
  }
  memcpy(v36, v38, 32 * v39);
LABEL_43:
  *((_DWORD *)v35 + 4) = v31;
LABEL_44:
  LODWORD(v78) = 0;
LABEL_45:
  v40 = 0;
  v41 = 0;
  v82[15] = v35;
  v83 = v85;
  v84 = 0x400000000;
  v42 = v86;
  do
  {
    v43 = v40;
    v44 = &v82[4 * v41 + 8];
    v45 = (_QWORD *)v44[3];
    if (v45)
    {
      if (v45 == v44)
      {
        *v42 = v42 - 3;
        (*(void (**)(_QWORD *))(*v44 + 24))(v44);
      }
      else
      {
        *v42 = (*(uint64_t (**)(_QWORD))(*v45 + 16))(v44[3]);
      }
    }
    else
    {
      *v42 = 0;
    }
    v42 += 4;
    v40 = 1;
    v41 = 1;
  }
  while ((v43 & 1) == 0);
  v46 = v84;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  LODWORD(v84) = v46 + 2;
  if (v46 == -2)
  {
    *(_BYTE *)(a1 + 144) = 1;
LABEL_104:
    v48 = (char *)v83;
  }
  else
  {
    sub_1C48AAD34(a1, (uint64_t)&v83);
    v47 = v84;
    *(_BYTE *)(a1 + 144) = 1;
    v48 = (char *)v83;
    if ((_DWORD)v47)
    {
      v49 = 32 * v47;
      while (1)
      {
        v50 = *(char **)&v48[v49 - 8];
        if (&v48[v49 - 32] == v50)
          break;
        if (v50)
        {
          v51 = 5;
          goto LABEL_60;
        }
LABEL_61:
        v49 -= 32;
        if (!v49)
          goto LABEL_104;
      }
      v50 = &v48[v49 - 32];
      v51 = 4;
LABEL_60:
      (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
      goto LABEL_61;
    }
  }
  if (v48 != v85)
    free(v48);
  for (i = 0; i != -8; i -= 4)
  {
    v72 = (_QWORD *)v82[i + 15];
    if (&v82[i + 12] == v72)
    {
      v72 = &v82[i + 12];
      v73 = 4;
    }
    else
    {
      if (!v72)
        continue;
      v73 = 5;
    }
    (*(void (**)(void))(*v72 + 8 * v73))();
  }
  if (v77 != v79)
    free(v77);
  if (v80 != v82)
    free(v80);
  if (v87 != v89)
    free(v87);
}

BOOL sub_1C48ABC08(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, int a6)
{
  __int128 *v9;
  int v12;
  int v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  _OWORD v21[2];
  int v22;
  int v23;
  __int128 v24;
  __int128 v25;

  v9 = (__int128 *)a3;
  sub_1C48AA43C((uint64_t)v21, a2, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a3, 0, 0, 0, 0);
  v12 = v23;
  if (v23 <= 3)
  {
    if (a6)
    {
      v9 = (__int128 *)sub_1C48A9EFC(*(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 272), (uint64_t)v9, 0);
      a6 = v13;
    }
    v24 = *v9;
    v25 = v9[1];
    sub_1C48AA044(a1, (uint64_t)&v24, 1, a2);
    v21[0] = v24;
    v21[1] = v25;
    v22 = a6;
    v14 = (_OWORD *)sub_1C47C0F60(a4, (unint64_t)v21, 1);
    v15 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
    v16 = v14[1];
    *v15 = *v14;
    v15[1] = v16;
    ++*(_DWORD *)(a4 + 8);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = v22 | a5;
    v17 = (_OWORD *)sub_1C47C0F60(a4, (unint64_t)&v24, 1);
    v18 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
    v19 = v17[1];
    *v18 = *v17;
    v18[1] = v19;
    ++*(_DWORD *)(a4 + 8);
  }
  return v12 < 4;
}

_QWORD *sub_1C48ABD50(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0A08;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C48ABD90(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0A08;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48ABDE0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FA0A08;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C48ABE9C(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FA0A08;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C48ABF50(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C48ABF6C(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C48ABFA0(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, *(const llvm::MachineOperand **)(a1 + 8));
}

_QWORD *sub_1C48ABFAC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0A50;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C48ABFEC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0A50;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48AC03C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FA0A50;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C48AC0F8(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FA0A50;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C48AC1AC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C48AC1C8(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C48AC1FC(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

void sub_1C48AC210()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48AC224(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FA0A98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C48AC264(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA0A98;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C48AC28C(uint64_t a1, uint64_t a2)
{
  int v3;
  llvm::MachineFunction *v4;
  llvm::MachineInstr *v5;
  _DWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = sub_1C48AC2EC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), *(_QWORD **)(a1 + 16), 1, *(_DWORD *)(a1 + 24), (uint64_t)&off_1E7FA5F10);
  v4 = *(llvm::MachineFunction **)a2;
  v5 = *(llvm::MachineInstr **)(a2 + 8);
  v7 = 0;
  v8 = 0;
  v6[0] = 0;
  v6[1] = v3;
  v9 = 0;
  llvm::MachineInstr::addOperand(v5, v4, (const llvm::MachineOperand *)v6);
}

uint64_t sub_1C48AC2EC(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t (**v34)();
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  llvm::MachineFunction *v39;
  unsigned __int8 *v40;
  unint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int IncompleteVirtualRegister;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  llvm::MachineFunction *v53;
  unsigned __int8 *v54;
  unint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77[2];
  int v78;
  uint64_t v79;
  int v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85[5];

  v11 = a5;
  do
  {
    v12 = v11;
    v13 = (uint64_t *)(a3[3] + 16 * (v11 & 0x7FFFFFFF) + 8);
    v14 = a3[34] + 8 * v11;
    if ((int)v12 >= 0)
      v13 = (uint64_t *)v14;
    v15 = *v13;
    if (!v15)
      goto LABEL_13;
    v16 = v15;
    if ((*(_BYTE *)(v15 + 3) & 1) == 0)
    {
      v16 = *(_QWORD *)(v15 + 24);
      if (!v16 || (*(_BYTE *)(v16 + 3) & 1) == 0)
        break;
    }
    v17 = *(_QWORD *)(v16 + 8);
    if (!v17)
      break;
    if (**(_WORD **)(v17 + 16) != 19)
      break;
    if (*(_DWORD *)(v17 + 40) != 2)
      break;
    v11 = *(unsigned int *)(*(_QWORD *)(v17 + 32) + 36);
  }
  while ((unint64_t)(v11 - 1) > 0x3FFFFFFE);
  if ((unint64_t)(v12 - 1) < 0x3FFFFFFF
    || (*(_BYTE *)(v15 + 3) & 1) == 0 && ((v15 = *(_QWORD *)(v15 + 24)) == 0 || (*(_BYTE *)(v15 + 3) & 1) == 0))
  {
LABEL_13:
    v18 = 0;
    goto LABEL_14;
  }
  v18 = *(_QWORD *)(v15 + 8);
LABEL_14:
  v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 16) + 176))(*(_QWORD *)(*a3 + 16));
  v20 = *(unsigned int *)(*(_QWORD *)(v19 + 264)
                        + 24
                        * (*(unsigned __int16 *)(*(_QWORD *)a6 + 24)
                         + *(_DWORD *)(v19 + 272)
                         * ((*(_QWORD *)(v19 + 248) - *(_QWORD *)(v19 + 240)) >> 3)));
  if ((_DWORD)v20 == 32)
    v21 = -25;
  else
    v21 = -1;
  if (!v18)
  {
    v29 = *(_QWORD *)(a2 + 24);
    LODWORD(v79) = 0;
    v76 = 0;
LABEL_40:
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 912;
    if ((*(_WORD *)(a2 + 44) & 4) != 0)
    {
      v39 = *(llvm::MachineFunction **)(v29 + 32);
      v42 = *(unsigned __int8 **)(a2 + 56);
      v77[0] = v42;
      if (v42)
        llvm::MetadataTracking::track((uint64_t)v77, v42, 2);
      v41 = *((_QWORD *)v39 + 28);
      if (v41)
        *((_QWORD *)v39 + 28) = *(_QWORD *)v41;
      else
        v41 = sub_1C484358C((uint64_t)v39 + 128, 72, 3);
      v81 = v77[0];
      if (v77[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v77, v77[0], (uint64_t)&v81);
        v77[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v41, v39, v38, &v81, 0);
      if (v81)
        llvm::MetadataTracking::untrack((uint64_t)&v81, v81);
      if (v77[0])
        llvm::MetadataTracking::untrack((uint64_t)v77, v77[0]);
      if (v29 + 48 != a2 && (*(_WORD *)(a2 + 44) & 4) != 0)
        *(_WORD *)(v41 + 44) |= 0xCu;
      sub_1C512CA10((uint64_t *)(v29 + 40), (uint64_t *)a2, v41);
    }
    else
    {
      v39 = *(llvm::MachineFunction **)(v29 + 32);
      v40 = *(unsigned __int8 **)(a2 + 56);
      v77[0] = v40;
      if (v40)
        llvm::MetadataTracking::track((uint64_t)v77, v40, 2);
      v41 = *((_QWORD *)v39 + 28);
      if (v41)
        *((_QWORD *)v39 + 28) = *(_QWORD *)v41;
      else
        v41 = sub_1C484358C((uint64_t)v39 + 128, 72, 3);
      v81 = v77[0];
      if (v77[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v77, v77[0], (uint64_t)&v81);
        v77[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v41, v39, v38, &v81, 0);
      if (v81)
        llvm::MetadataTracking::untrack((uint64_t)&v81, v81);
      if (v77[0])
        llvm::MetadataTracking::untrack((uint64_t)v77, v77[0]);
      v43 = *(_QWORD *)(v29 + 40);
      *(_QWORD *)(v41 + 24) = v43;
      v44 = *(_QWORD *)(v43 + 32);
      v45 = *(unsigned int *)(v41 + 40);
      if ((_DWORD)v45)
      {
        v57 = *(_QWORD *)(v41 + 32);
        v58 = *(_QWORD *)(v44 + 40);
        v59 = 32 * v45;
        do
        {
          if (!*(_BYTE *)v57)
          {
            v60 = *(unsigned int *)(v57 + 4);
            if ((int)v60 >= 0)
              v61 = (uint64_t *)(*(_QWORD *)(v58 + 272) + 8 * v60);
            else
              v61 = (uint64_t *)(*(_QWORD *)(v58 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
            v62 = *v61;
            if (*v61)
            {
              v63 = *(_QWORD *)(v62 + 16);
              *(_QWORD *)(v62 + 16) = v57;
              *(_QWORD *)(v57 + 16) = v63;
              if ((*(_BYTE *)(v57 + 3) & 1) != 0)
              {
                *(_QWORD *)(v57 + 24) = v62;
              }
              else
              {
                *(_QWORD *)(v57 + 24) = 0;
                v61 = (uint64_t *)(v63 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v57 + 16) = v57;
              *(_QWORD *)(v57 + 24) = 0;
            }
            *v61 = v57;
          }
          v57 += 32;
          v59 -= 32;
        }
        while (v59);
      }
      v46 = *(_QWORD *)(v44 + 728);
      if (v46)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v46 + 24))(v46, v41);
      v47 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v41 = v47 | *(_QWORD *)v41 & 7;
      *(_QWORD *)(v41 + 8) = a2;
      *(_QWORD *)(v47 + 8) = v41;
      *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v41;
    }
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)a3, "", 0);
    *(_QWORD *)(a3[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = a6 & 0xFFFFFFFFFFFFFFFBLL;
    v49 = a3[1];
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
    v82 = 0;
    v83 = 0;
    v84 = 0;
    LODWORD(v81) = 0x1000000;
    HIDWORD(v81) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v41, v39, (const llvm::MachineOperand *)&v81);
    v82 = 0;
    v83 = 0;
    v84 = 0;
    LODWORD(v81) = (a4 & 0xFFF) << 8;
    HIDWORD(v81) = v12;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v41, v39, (const llvm::MachineOperand *)&v81);
    return *(unsigned int *)(*(_QWORD *)(v41 + 32) + 4);
  }
  v22 = v21 + a4;
  v23 = (8 * v20) | 1;
  v24 = **(unsigned __int16 **)(v18 + 16);
  if (v24 == 76)
  {
    v25 = *(_QWORD *)(v18 + 32);
    v26 = *(_DWORD *)(v25 + 36);
    if (v26 < 0)
    {
      v27 = v26 & 0x7FFFFFFF;
      if (v27 < *((_DWORD *)a3 + 108) && *(_QWORD *)(a3[53] + 8 * v27) == v23)
      {
        v28 = *(_DWORD *)(v25 + 32 * (v22 + 1) + 4);
LABEL_29:
        v30 = *(_QWORD *)(a2 + 24);
        v85[4] = 0;
        v31 = *(_QWORD *)(v30 + 32);
        v81 = (unsigned __int8 *)&off_1E816EC08;
        v82 = v31;
        v84 = *(_QWORD *)(v31 + 40);
        v83 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v31 + 16) + 104))(*(_QWORD *)(v31 + 16));
        v32 = *(unsigned __int8 **)(a2 + 24);
        v85[2] = (unsigned __int8 *)a2;
        v85[3] = 0;
        v85[0] = 0;
        v85[1] = v32;
        if ((unsigned __int8 **)(a2 + 56) == v85)
        {
          v34 = &off_1E816EC08;
        }
        else
        {
          v33 = *(unsigned __int8 **)(a2 + 56);
          v85[0] = v33;
          v34 = &off_1E816EC08;
          if (v33)
          {
            llvm::MetadataTracking::track((uint64_t)v85, v33, 2);
            v34 = (uint64_t (**)())v81;
          }
        }
        v79 = a6;
        v80 = 2;
        LODWORD(v77[0]) = v28;
        v78 = 0;
        ((void (*)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, unsigned __int8 **, uint64_t, _QWORD))v34[4])(&v81, 19, &v79, 1, v77, 1, 0);
        v36 = *(unsigned int *)(*(_QWORD *)(v35 + 32) + 4);
        v81 = (unsigned __int8 *)&off_1E816EC08;
        if (v85[0])
          llvm::MetadataTracking::untrack((uint64_t)v85, v85[0]);
        return v36;
      }
    }
  }
  else if (v24 == 126 && !v22)
  {
    v28 = *(_DWORD *)(*(_QWORD *)(v18 + 32) + 36);
    if (v28 < 0 && (v28 & 0x7FFFFFFFu) < *((_DWORD *)a3 + 108) && *(_QWORD *)(a3[53] + 8 * (v28 & 0x7FFFFFFF)) == v23)
      goto LABEL_29;
  }
  v29 = *(_QWORD *)(a2 + 24);
  LODWORD(v79) = 0;
  v76 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t *, char *, uint64_t *))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), v18, &v79, (char *)&v76 + 4, &v76))
  {
    v37 = (_DWORD)v76 == a4;
  }
  else
  {
    v37 = 0;
  }
  if (!v37 || (*(_QWORD *)(a3[3] + 16 * (v79 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) != a6)
    goto LABEL_40;
  v36 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)a3, "", 0);
  *(_QWORD *)(a3[3] + 16 * (v36 & 0x7FFFFFFF)) = a6 & 0xFFFFFFFFFFFFFFFBLL;
  v51 = a3[1];
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
  v52 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 912;
  if ((*(_WORD *)(a2 + 44) & 4) != 0)
  {
    v53 = *(llvm::MachineFunction **)(v29 + 32);
    v56 = *(unsigned __int8 **)(a2 + 56);
    v77[0] = v56;
    if (v56)
      llvm::MetadataTracking::track((uint64_t)v77, v56, 2);
    v55 = *((_QWORD *)v53 + 28);
    if (v55)
      *((_QWORD *)v53 + 28) = *(_QWORD *)v55;
    else
      v55 = sub_1C484358C((uint64_t)v53 + 128, 72, 3);
    v81 = v77[0];
    if (v77[0])
    {
      llvm::MetadataTracking::retrack((uint64_t)v77, v77[0], (uint64_t)&v81);
      v77[0] = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v55, v53, v52, &v81, 0);
    if (v81)
      llvm::MetadataTracking::untrack((uint64_t)&v81, v81);
    if (v77[0])
      llvm::MetadataTracking::untrack((uint64_t)v77, v77[0]);
    if (v29 + 48 != a2 && (*(_WORD *)(a2 + 44) & 4) != 0)
      *(_WORD *)(v55 + 44) |= 0xCu;
    sub_1C512CA10((uint64_t *)(v29 + 40), (uint64_t *)a2, v55);
  }
  else
  {
    v53 = *(llvm::MachineFunction **)(v29 + 32);
    v54 = *(unsigned __int8 **)(a2 + 56);
    v77[0] = v54;
    if (v54)
      llvm::MetadataTracking::track((uint64_t)v77, v54, 2);
    v55 = *((_QWORD *)v53 + 28);
    if (v55)
      *((_QWORD *)v53 + 28) = *(_QWORD *)v55;
    else
      v55 = sub_1C484358C((uint64_t)v53 + 128, 72, 3);
    v81 = v77[0];
    if (v77[0])
    {
      llvm::MetadataTracking::retrack((uint64_t)v77, v77[0], (uint64_t)&v81);
      v77[0] = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v55, v53, v52, &v81, 0);
    if (v81)
      llvm::MetadataTracking::untrack((uint64_t)&v81, v81);
    if (v77[0])
      llvm::MetadataTracking::untrack((uint64_t)v77, v77[0]);
    v64 = *(_QWORD *)(v29 + 40);
    *(_QWORD *)(v55 + 24) = v64;
    v65 = *(_QWORD *)(v64 + 32);
    v66 = *(unsigned int *)(v55 + 40);
    if ((_DWORD)v66)
    {
      v69 = *(_QWORD *)(v55 + 32);
      v70 = *(_QWORD *)(v65 + 40);
      v71 = 32 * v66;
      do
      {
        if (!*(_BYTE *)v69)
        {
          v72 = *(unsigned int *)(v69 + 4);
          if ((int)v72 >= 0)
            v73 = (uint64_t *)(*(_QWORD *)(v70 + 272) + 8 * v72);
          else
            v73 = (uint64_t *)(*(_QWORD *)(v70 + 24) + 16 * (v72 & 0x7FFFFFFF) + 8);
          v74 = *v73;
          if (*v73)
          {
            v75 = *(_QWORD *)(v74 + 16);
            *(_QWORD *)(v74 + 16) = v69;
            *(_QWORD *)(v69 + 16) = v75;
            if ((*(_BYTE *)(v69 + 3) & 1) != 0)
            {
              *(_QWORD *)(v69 + 24) = v74;
            }
            else
            {
              *(_QWORD *)(v69 + 24) = 0;
              v73 = (uint64_t *)(v75 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v69 + 16) = v69;
            *(_QWORD *)(v69 + 24) = 0;
          }
          *v73 = v69;
        }
        v69 += 32;
        v71 -= 32;
      }
      while (v71);
    }
    v67 = *(_QWORD *)(v65 + 728);
    if (v67)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v67 + 24))(v67, v55);
    v68 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v55 = v68 | *(_QWORD *)v55 & 7;
    *(_QWORD *)(v55 + 8) = a2;
    *(_QWORD *)(v68 + 8) = v55;
    *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v55;
  }
  v82 = 0;
  v83 = 0;
  v84 = 0;
  LODWORD(v81) = 0x1000000;
  HIDWORD(v81) = v36;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v81);
  v82 = 0;
  v83 = 0;
  LODWORD(v81) = 0;
  HIDWORD(v81) = v79;
  v84 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v81);
  llvm::MachineRegisterInfo::clearKillFlags((uint64_t)a3, v79);
  return v36;
}

void sub_1C48ACC34()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C48ACC48(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E7FA0AE0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C48ACC80(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E7FA0AE0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1C48ACCA0(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v2;
  llvm::MachineInstr *v3;
  llvm::MachineFunction *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 8);
  v4 = *a2;
  v3 = a2[1];
  v6 = 1;
  v7 = 0;
  v8 = v2;
  llvm::MachineInstr::addOperand(v3, v4, (const llvm::MachineOperand *)&v6);
}

void sub_1C48ACCD8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48ACCEC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FA0B28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C48ACD2C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA0B28;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C48ACD54(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(a1 + 8));
}

_QWORD *sub_1C48ACD60(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0B70;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C48ACDA0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0B70;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48ACDF0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FA0B70;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C48ACEAC(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FA0B70;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C48ACF60(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C48ACF7C(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C48ACFB0(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

_QWORD *sub_1C48ACFC0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0BB8;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C48AD000(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0BB8;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48AD050(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FA0BB8;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C48AD10C(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FA0BB8;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C48AD1C0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C48AD1DC(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C48AD210(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, *(const llvm::MachineOperand **)(a1 + 8));
}

_QWORD *sub_1C48AD21C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0C00;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C48AD25C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0C00;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48AD2AC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FA0C00;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C48AD368(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FA0C00;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C48AD41C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C48AD438(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C48AD46C(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

uint64_t sub_1C48AD47C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int RegSizeInBits;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  _BYTE v24[80];
  int v25;

  sub_1C48AA43C((uint64_t)v24, a2, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)a3, 1, 0, 0, 0);
  RegSizeInBits = 0;
  if (!*(_BYTE *)a3)
  {
    v9 = *(_DWORD *)(a3 + 4);
    if (v9 - 1 <= 0x3FFFFFFE)
    {
      v10 = *(_QWORD *)(a1 + 80);
      RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v10 + 264)
                                + 24
                                * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(_QWORD *)(a1 + 88), v9, v10)+ 24)+ *(_DWORD *)(v10 + 272)* ((*(_QWORD *)(v10 + 248) - *(_QWORD *)(v10 + 240)) >> 3)));
    }
    else
    {
      RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 80), v9, a2);
    }
  }
  if (v25 > 3 || RegSizeInBits != 32 && RegSizeInBits != 16)
    return 0;
  v11 = *(_OWORD *)(a3 + 16);
  v23[0] = *(_OWORD *)a3;
  v23[1] = v11;
  sub_1C48AA044(a1, (uint64_t)v23, 0, a2);
  v12 = 1;
  v13 = (_OWORD *)sub_1C47C0F60(a4, (unint64_t)v23, 1);
  v14 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
  v15 = v13[1];
  *v14 = *v13;
  v14[1] = v15;
  ++*(_DWORD *)(a4 + 8);
  v20 = 1;
  v21 = 0;
  v22 = 0;
  v16 = (_OWORD *)sub_1C47C0F60(a4, (unint64_t)&v20, 1);
  v17 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
  v18 = v16[1];
  *v17 = *v16;
  v17[1] = v18;
  ++*(_DWORD *)(a4 + 8);
  return v12;
}

void sub_1C48AD5FC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48AD610(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FA0C48;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C48AD650(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA0C48;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C48AD678(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(a1 + 8));
}

_QWORD *sub_1C48AD684(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0C90;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C48AD6C4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0C90;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48AD714(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FA0C90;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C48AD7D0(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FA0C90;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C48AD884(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C48AD8A0(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C48AD8D4(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

void sub_1C48AD8E8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48AD8FC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FA0CD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C48AD93C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA0CD8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C48AD964(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  llvm::MachineInstr *v8;
  llvm::MachineFunction *v9;
  _OWORD v10[2];
  unsigned int v11;
  __int128 v12;
  __int128 v13;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2[1] + 3) + 32) + 40);
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(__int128 **)(a1 + 16);
  if (*(_BYTE *)(a1 + 24))
  {
    v4 = (__int128 *)sub_1C48A9EFC(*(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 272), (uint64_t)v4, 0);
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v12 = *v4;
  v13 = v4[1];
  sub_1C48AA044(v5, (uint64_t)&v12, 1, v3);
  v10[0] = v12;
  v10[1] = v13;
  v11 = v7;
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)v10);
  v9 = *a2;
  v8 = a2[1];
  LODWORD(v12) = 1;
  *((_QWORD *)&v12 + 1) = 0;
  *(_QWORD *)&v13 = v11;
  llvm::MachineInstr::addOperand(v8, v9, (const llvm::MachineOperand *)&v12);
}

void sub_1C48ADA30()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48ADA44(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FA0D20;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C48ADA84(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA0D20;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C48ADAAC(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(a1 + 8));
}

_QWORD *sub_1C48ADAB8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0D68;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C48ADAF8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0D68;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48ADB48(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FA0D68;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C48ADC04(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FA0D68;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C48ADCB8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C48ADCD4(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C48ADD08(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

BOOL sub_1C48ADD18(uint64_t a1, uint64_t a2, char a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;

  if (a3)
    return 0;
  v6 = (uint64_t *)((a4 & 0x80000000) != 0
                 ? *(_QWORD *)(a2 + 24) + 16 * (a4 & 0x7FFFFFFF) + 8
                 : *(_QWORD *)(a2 + 272) + 8 * a4);
  v7 = *v6;
  if (!*v6)
    return 0;
  if ((*(_BYTE *)(v7 + 3) & 1) != 0)
  {
    v12 = a1;
  }
  else
  {
    v7 = *(_QWORD *)(v7 + 24);
    if (!v7)
      return 0;
    v12 = a1;
    if ((*(_BYTE *)(v7 + 3) & 1) == 0)
      return 0;
  }
  v13 = *(_QWORD *)(v7 + 8);
  if (!v13)
    return 0;
  v14 = **(unsigned __int16 **)(v13 + 16) - 118;
  v15 = v14 > 8;
  v16 = (1 << v14) & 0x141;
  if (v15 || v16 == 0)
    return 0;
  v18 = *(_QWORD *)(v13 + 32);
  if (*(_BYTE *)(v18 + 32))
    return 0;
  v19 = *(_DWORD *)(v18 + 36);
  v20 = *(_QWORD *)(v12 + 80);
  v21 = v19 - 1 <= 0x3FFFFFFE
      ? *(_DWORD *)(*(_QWORD *)(v20 + 264)
                  + 24
                  * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(_QWORD *)(a1 + 88), v19, v20)+ 24)+ *(_DWORD *)(v20 + 272) * ((*(_QWORD *)(v20 + 248) - *(_QWORD *)(v20 + 240)) >> 3))): llvm::TargetRegisterInfo::getRegSizeInBits(v20, v19, a2);
  if (v21 != 32)
    return 0;
  if (**(_WORD **)(v13 + 16) == 124)
    v22 = a6 | 8;
  else
    v22 = a6;
  return sub_1C48ABC08(a1, a2, (unsigned __int8 *)(*(_QWORD *)(v13 + 32) + 32), a5, v22, 0);
}

_QWORD *sub_1C48ADE9C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0DB0;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C48ADEDC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0DB0;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48ADF2C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FA0DB0;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C48ADFE8(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FA0DB0;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C48AE09C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C48AE0B8(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C48AE0EC(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, *(const llvm::MachineOperand **)(a1 + 8));
}

_QWORD *sub_1C48AE0F8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0DF8;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C48AE138(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0DF8;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48AE188(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FA0DF8;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C48AE244(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FA0DF8;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C48AE2F8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C48AE314(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C48AE348(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

_QWORD *sub_1C48AE358(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0E40;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C48AE398(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0E40;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48AE3E8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FA0E40;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C48AE4A4(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FA0E40;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C48AE558(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C48AE574(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C48AE5A8(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, *(const llvm::MachineOperand **)(a1 + 8));
}

_QWORD *sub_1C48AE5B4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0E88;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C48AE5F4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0E88;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48AE644(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FA0E88;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C48AE700(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FA0E88;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C48AE7B4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C48AE7D0(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C48AE804(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

void sub_1C48AE818()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C48AE82C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FA0ED0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C48AE86C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FA0ED0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C48AE894(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(a1 + 8));
}

_QWORD *sub_1C48AE8A0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0F18;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C48AE8E0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FA0F18;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C48AE930(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FA0F18;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C48AE9EC(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FA0F18;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C48AEAA0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C48AEABC(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C48AEAF0(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

void sub_1C48AEB00(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  uint64_t v4;
  llvm::detail::DoubleAPFloat *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  llvm::MachineInstr *v21;
  llvm::MachineFunction *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  llvm::MachineInstr *v29;
  llvm::MachineFunction *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  int v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 48);
  v5 = (llvm::detail::DoubleAPFloat *)&v38;
  v6 = *(_QWORD *)(v4 + 32);
  if ((_UNKNOWN *)v6 == &unk_1C866F1C0)
  {
    v5 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v38, (const llvm::detail::DoubleAPFloat *)(v4 + 32));
  }
  else
  {
    v38 = *(_QWORD *)(v4 + 32);
    v7 = *(unsigned int *)(v6 + 8);
    if ((v7 + 64) >= 0x80)
    {
      v31 = v6;
      v7 = operator new[]();
      v6 = v31;
      v5 = (llvm::detail::DoubleAPFloat *)&v38;
      v39 = (char *)v7;
    }
    v8 = *(_BYTE *)(v4 + 52);
    v9 = v8 & 7;
    v41 = v8 & 0xF;
    v40 = *(_DWORD *)(v4 + 48);
    v11 = (v8 & 6) != 0 && v9 != 3;
    if (v9 == 1 || v11)
    {
      v13 = *(unsigned int *)(v6 + 8);
      if ((v13 - 64) > 0xFFFFFF7F)
        v7 = (uint64_t)&v39;
      v16 = *(uint64_t **)(v4 + 40);
      v15 = (uint64_t *)(v4 + 40);
      v14 = v16;
      if ((*(_DWORD *)(*(v15 - 1) + 8) - 64) >= 0xFFFFFF80)
        v14 = v15;
      if (v13 <= 0xFFFFFFBF)
      {
        v17 = (unint64_t)(v13 + 64) >> 6;
        do
        {
          v18 = *v14++;
          *(_QWORD *)v7 = v18;
          v7 += 8;
          --v17;
        }
        while (v17);
      }
    }
  }
  v19 = v39;
  if ((_UNKNOWN *)v38 != &unk_1C866F1C0)
    v19 = &v37;
  v20 = v19[28];
  if ((v20 & 7) == 3)
  {
    v22 = *a2;
    v21 = a2[1];
    if ((v20 & 8) != 0)
    {
      v34 = 1;
      v35 = 0;
      v36 = 128;
    }
    else
    {
      v34 = 1;
      v35 = 0;
      v36 = 0;
    }
    llvm::MachineInstr::addOperand(v21, v22, (const llvm::MachineOperand *)&v34);
  }
  else
  {
    if ((_UNKNOWN *)v38 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v5, (unsigned int *)&v32);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (unsigned int *)&v32);
    v23 = (unsigned int *)&v32;
    if (v33 >= 0x41)
      v23 = v32;
    v24 = *v23;
    v25 = (v24 >> 23);
    v26 = (v24 >> 19) & 0xF;
    v27 = v25 - 124;
    v28 = (v26 | 0x10u) >> (125 - v25);
    if (v25 > 0x7C)
      v28 = (v24 >> 19) & 0xF;
    else
      v27 = 0;
    if (v25 | v26)
    {
      v25 = v27;
      v26 = v28;
    }
    v30 = *a2;
    v29 = a2[1];
    v34 = 1;
    v35 = 0;
    v36 = (16 * v25) | (v24 >> 31 << 7) | v26;
    llvm::MachineInstr::addOperand(v29, v30, (const llvm::MachineOperand *)&v34);
    if (v33 >= 0x41 && v32)
      MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
  }
  if ((_UNKNOWN *)v38 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v39);
  }
  else if ((*(_DWORD *)(v38 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v39)
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
  }
}

void sub_1C48AEDA8(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  uint64_t v4;
  llvm::detail::DoubleAPFloat *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  llvm::MachineInstr *v21;
  llvm::MachineFunction *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  llvm::MachineInstr *v29;
  llvm::MachineFunction *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  int v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 48);
  v5 = (llvm::detail::DoubleAPFloat *)&v38;
  v6 = *(_QWORD *)(v4 + 32);
  if ((_UNKNOWN *)v6 == &unk_1C866F1C0)
  {
    v5 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v38, (const llvm::detail::DoubleAPFloat *)(v4 + 32));
  }
  else
  {
    v38 = *(_QWORD *)(v4 + 32);
    v7 = *(unsigned int *)(v6 + 8);
    if ((v7 + 64) >= 0x80)
    {
      v31 = v6;
      v7 = operator new[]();
      v6 = v31;
      v5 = (llvm::detail::DoubleAPFloat *)&v38;
      v39 = (char *)v7;
    }
    v8 = *(_BYTE *)(v4 + 52);
    v9 = v8 & 7;
    v41 = v8 & 0xF;
    v40 = *(_DWORD *)(v4 + 48);
    v11 = (v8 & 6) != 0 && v9 != 3;
    if (v9 == 1 || v11)
    {
      v13 = *(unsigned int *)(v6 + 8);
      if ((v13 - 64) > 0xFFFFFF7F)
        v7 = (uint64_t)&v39;
      v16 = *(uint64_t **)(v4 + 40);
      v15 = (uint64_t *)(v4 + 40);
      v14 = v16;
      if ((*(_DWORD *)(*(v15 - 1) + 8) - 64) >= 0xFFFFFF80)
        v14 = v15;
      if (v13 <= 0xFFFFFFBF)
      {
        v17 = (unint64_t)(v13 + 64) >> 6;
        do
        {
          v18 = *v14++;
          *(_QWORD *)v7 = v18;
          v7 += 8;
          --v17;
        }
        while (v17);
      }
    }
  }
  v19 = v39;
  if ((_UNKNOWN *)v38 != &unk_1C866F1C0)
    v19 = &v37;
  v20 = v19[28];
  if ((v20 & 7) == 3)
  {
    v22 = *a2;
    v21 = a2[1];
    if ((v20 & 8) != 0)
    {
      v34 = 1;
      v35 = 0;
      v36 = 128;
    }
    else
    {
      v34 = 1;
      v35 = 0;
      v36 = 0;
    }
    llvm::MachineInstr::addOperand(v21, v22, (const llvm::MachineOperand *)&v34);
  }
  else
  {
    if ((_UNKNOWN *)v38 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v5, (unsigned int *)&v32);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (unsigned int *)&v32);
    v23 = (unsigned int *)&v32;
    if (v33 >= 0x41)
      v23 = v32;
    v24 = *v23;
    v25 = (v24 >> 10) & 0x1F;
    v26 = (v24 >> 6) & 0xF;
    v27 = v25 - 12;
    v28 = (v26 | 0x10u) >> (13 - ((v24 >> 10) & 0x1F));
    if (v25 > 0xC)
      v28 = (v24 >> 6) & 0xF;
    else
      v27 = 0;
    if (v25 | v26)
    {
      v25 = v27;
      v26 = v28;
    }
    v30 = *a2;
    v29 = a2[1];
    v34 = 1;
    v35 = 0;
    v36 = (v24 >> 8) & 0x80 | (16 * v25) | v26;
    llvm::MachineInstr::addOperand(v29, v30, (const llvm::MachineOperand *)&v34);
    if (v33 >= 0x41 && v32)
      MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
  }
  if ((_UNKNOWN *)v38 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v39);
  }
  else if ((*(_DWORD *)(v38 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v39)
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
  }
}

void sub_1C48AF050(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  uint64_t v4;
  llvm::MachineFunction *v5;
  llvm::MachineInstr *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a3 + 32) + 4), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 32) + 40));
  v5 = *a2;
  v6 = a2[1];
  v7 = 1;
  v8 = 0;
  v9 = v4;
  llvm::MachineInstr::addOperand(v6, v5, (const llvm::MachineOperand *)&v7);
}

void sub_1C48AF0A4(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  uint64_t v4;
  llvm::MachineInstr *v5;
  llvm::MachineFunction *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (unsigned __int16)sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a3 + 32) + 4), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 32) + 40));
  v6 = *a2;
  v5 = a2[1];
  v7 = 1;
  v8 = 0;
  v9 = v4;
  llvm::MachineInstr::addOperand(v5, v6, (const llvm::MachineOperand *)&v7);
}

uint64_t sub_1C48AF0F8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 64;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (37 * (*a2 & 0xFFFFFFFA | (4 * (*a2 & 1)) | (*a2 >> 2) & 1)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != 2)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == 4;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_1C48AF1B4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v14;
  _BYTE v15[1024];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x41)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x40)
    {
      v14 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C613ABF8(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v15;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if (v10 != 2 && v10 != 4)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 1024);
  if (a2 > 0x40)
  {
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  return sub_1C613ABF8(a1, (uint64_t)v15, (uint64_t)v9);
}

void sub_1C48AF338(void ***a1)
{
  void **v1;
  char **v2;
  char **v4;
  void *v5;
  char **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v1 = *a1;
  v2 = (char **)**a1;
  if (!v2)
    return;
  v4 = (char **)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_17;
  v6 = (char **)v1[1];
  do
  {
    v8 = *(v6 - 18);
    v6 -= 18;
    v7 = v8;
    v9 = *((unsigned int *)v6 + 2);
    if (!(_DWORD)v9)
      goto LABEL_13;
    v10 = 32 * v9;
    do
    {
      v11 = *(char **)&v7[v10 - 8];
      if (&v7[v10 - 32] == v11)
      {
        v11 = &v7[v10 - 32];
        v12 = 4;
      }
      else
      {
        if (!v11)
          goto LABEL_11;
        v12 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_11:
      v10 -= 32;
    }
    while (v10);
    v7 = *v6;
LABEL_13:
    if (v7 != (char *)(v4 - 16))
      free(v7);
    v4 = v6;
  }
  while (v6 != v2);
  v5 = **a1;
LABEL_17:
  v1[1] = v2;
  operator delete(v5);
}

uint64_t sub_1C48AF428(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  _BYTE *v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  llvm::MachineFunction *v40;
  llvm::MachineInstr *v41;
  llvm::MachineInstr *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  const char *v52;
  int v53;
  __int16 ***v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  llvm::MachineFunction *v60;
  llvm::MachineInstr *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  llvm::MachineFunction *v66;
  llvm::MachineInstr *v67;
  uint64_t v68;
  uint64_t v69;
  int v71;
  int v72;
  int v74;
  uint64_t (**v75)();
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 40);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_DWORD *)(v8 + 4);
  v10 = 32;
  if (**(_WORD **)(a2 + 16) == 116)
    v10 = 64;
  v11 = *(_DWORD *)(v8 + v10 + 4);
  v12 = 96;
  if (**(_WORD **)(a2 + 16) != 116)
    v12 = 64;
  v13 = *(_DWORD *)(v8 + v12 + 4);
  v74 = *(_DWORD *)(v8 + 4);
  if (v9 < 0 && (v9 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v7 + 432))
    v14 = *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * (v9 & 0x7FFFFFFF));
  else
    v14 = 0;
  v80 = v14;
  v71 = v11;
  v15 = sub_1C554C050(v11, v7);
  v17 = v16;
  v72 = v13;
  v18 = sub_1C554C050(v13, v7);
  v20 = v18;
  if (v17)
    v21 = v15 >= 0x100;
  else
    v21 = 1;
  v22 = !v21;
  if (v19)
    v23 = v18 >= 0x100;
  else
    v23 = 1;
  v24 = !v23;
  v25 = *(_QWORD *)(a2 + 24);
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v26 = *(_QWORD *)(v25 + 32);
  v27 = *(_QWORD *)(v26 + 40);
  v75 = &off_1E816EC08;
  *(_QWORD *)&v76 = v26;
  v77 = v27;
  *((_QWORD *)&v76 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v26 + 16) + 104))(*(_QWORD *)(v26 + 16));
  v28 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)&v78 + 1) = a2;
  *(_QWORD *)&v79 = 0;
  *(_QWORD *)&v78 = v28;
  if ((__int128 *)(a2 + 56) != (__int128 *)((char *)&v77 + 8)
    && (v29 = *(unsigned __int8 **)(a2 + 56), (*((_QWORD *)&v77 + 1) = v29) != 0))
  {
    llvm::MetadataTracking::track((uint64_t)&v77 + 8, v29, 2);
    if ((v22 & 1) != 0)
      goto LABEL_24;
  }
  else if ((v22 & 1) != 0)
  {
LABEL_24:
    v30 = a1;
    if (a3 == 45)
    {
      v31 = 36;
      goto LABEL_30;
    }
    if (a3 != 47)
    {
      if (a3 == 46)
        v31 = 46;
      else
        v31 = 41;
LABEL_30:
      if (a4)
        v32 = 8;
      else
        v32 = 0;
      v33 = (_BYTE *)(*(_QWORD *)(a1 + 56) + 1328);
      v34 = v74;
      v35 = v72;
      goto LABEL_34;
    }
    goto LABEL_55;
  }
  if (a3 == 47)
    v45 = v24;
  else
    v45 = 0;
  v30 = a1;
  if ((v45 & 1) == 0)
  {
    if (a3 == 45)
    {
      if (a4)
        v49 = 8;
      else
        v49 = 0;
      v33 = (_BYTE *)(*(_QWORD *)(a1 + 56) + 1328);
      v50 = 36;
    }
    else
    {
      if (a3 == 46)
        v50 = 46;
      else
        v50 = 41;
      if (a4)
        v49 = 8;
      else
        v49 = 0;
      v33 = (_BYTE *)(*(_QWORD *)(a1 + 56) + 1328);
    }
    v55 = v74;
    if ((v24 & 1) != 0)
      goto LABEL_89;
LABEL_110:
    if (a3 == 47)
      v62 = 381;
    else
      v62 = 380;
    if (a3 == 47)
      v63 = 242;
    else
      v63 = 241;
    if (v14 == 129)
      v64 = v62;
    else
      v64 = v63;
    v65 = sub_1C4885524(v50, v64, v33);
    LODWORD(v86) = v55;
    v87 = 1;
    v66 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v75, v65, &v86, 1, 0, 0, 0);
    v42 = v67;
    v81 = 1;
    v83 = 0;
    v84 = 0;
    llvm::MachineInstr::addOperand(v67, v66, (const llvm::MachineOperand *)&v81);
    v83 = 0;
    v84 = 0;
    v81 = 0;
    v82 = v71;
    v85 = 0;
    llvm::MachineInstr::addOperand(v42, v66, (const llvm::MachineOperand *)&v81);
    v81 = 1;
    v83 = 0;
    v84 = v49;
    llvm::MachineInstr::addOperand(v42, v66, (const llvm::MachineOperand *)&v81);
    v83 = 0;
    v84 = 0;
    v81 = 0;
    v82 = v72;
    v85 = 0;
    llvm::MachineInstr::addOperand(v42, v66, (const llvm::MachineOperand *)&v81);
    v81 = 1;
    v83 = 0;
    v84 = v49;
    llvm::MachineInstr::addOperand(v42, v66, (const llvm::MachineOperand *)&v81);
    if (a3 == 47)
    {
      v81 = 1;
      v83 = 0;
      v84 = 0;
      llvm::MachineInstr::addOperand(v42, v66, (const llvm::MachineOperand *)&v81);
    }
    v43 = *(_QWORD *)(a2 + 24);
    v44 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v44 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v44 = a2;
        do
          v44 = *(_QWORD *)(v44 + 8);
        while ((*(_WORD *)(v44 + 44) & 8) != 0);
      }
    }
    goto LABEL_123;
  }
LABEL_55:
  if (v15)
    v46 = 0;
  else
    v46 = v22;
  if (v20)
    v47 = 0;
  else
    v47 = v24;
  if ((v46 & 1) != 0 || v47)
  {
    v51 = sub_1C48B6FC4(v30, a2, v14, 0, 0);
    LODWORD(v86) = v74;
    v87 = 1;
    v81 = v51;
    LODWORD(v84) = 0;
    ((void (*)(uint64_t (***)(), uint64_t, uint64_t *, uint64_t, int *, uint64_t, _QWORD))v75[4])(&v75, 19, &v86, 1, &v81, 1, 0);
    v53 = sub_1C4825F50((unint64_t *)&v80);
    if ((_DWORD)v52 == 1)
    if (v53 > 111)
    {
      if (v53 <= 191)
      {
        if (v53 == 112)
        {
          v54 = (__int16 ***)&off_1E7FA6060;
        }
        else if (v53 == 128)
        {
          v54 = (__int16 ***)&off_1E7FA6098;
        }
        else
        {
          v54 = (__int16 ***)&off_1E7FA60D0;
        }
      }
      else if (v53 > 287)
      {
        if (v53 == 288)
          v54 = (__int16 ***)&off_1E7FA6178;
        else
          v54 = (__int16 ***)&off_1E7FA61B0;
      }
      else if (v53 == 192)
      {
        v54 = (__int16 ***)&off_1E7FA6108;
      }
      else
      {
        v54 = (__int16 ***)&off_1E7FA6140;
      }
    }
    else if (v53 <= 47)
    {
      v54 = &off_1E7FA5F10;
      if (v53 != 1 && v53 != 16)
        v54 = &off_1E7FA5F48;
    }
    else if (v53 > 79)
    {
      if (v53 == 80)
        v54 = (__int16 ***)&off_1E7FA6028;
      else
        v54 = (__int16 ***)&off_1E7FA5FB8;
    }
    else if (v53 == 48)
    {
      v54 = (__int16 ***)&off_1E7FA5FF0;
    }
    else
    {
      v54 = (__int16 ***)&off_1E7FA6488;
    }
    *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16 * (v74 & 0x7FFFFFFF)) = v54;
    v69 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v69 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v69 = a2;
        do
          v69 = *(_QWORD *)(v69 + 8);
        while ((*(_WORD *)(v69 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v69 + 8));
    v68 = 1;
    goto LABEL_146;
  }
  if (a4)
    v48 = 8;
  else
    v48 = 0;
  v33 = (_BYTE *)(*(_QWORD *)(v30 + 56) + 1328);
  if (((v22 | v24) & 1) == 0)
  {
    v50 = 41;
    v55 = v74;
    v49 = v48;
    goto LABEL_110;
  }
  if ((v22 & 1) != 0)
  {
    v31 = 41;
    v34 = v74;
    v35 = v72;
    v32 = v48;
LABEL_34:
    if (a3 == 47)
      v36 = 324;
    else
      v36 = 323;
    if (a3 == 47)
      v37 = 221;
    else
      v37 = 220;
    if (v14 == 129)
      v38 = v36;
    else
      v38 = v37;
    v39 = sub_1C4885524(v31, v38, v33);
    LODWORD(v86) = v34;
    v87 = 1;
    v40 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v75, v39, &v86, 1, 0, 0, 0);
    v42 = v41;
    v81 = 1;
    v83 = 0;
    v84 = 0;
    llvm::MachineInstr::addOperand(v41, v40, (const llvm::MachineOperand *)&v81);
    v81 = 1;
    v83 = 0;
    v84 = v15;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v81);
    v83 = 0;
    v84 = 0;
    v81 = 0;
    v82 = v35;
    v85 = 0;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v81);
    v81 = 1;
    v83 = 0;
    v84 = v32;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v81);
    if (a3 == 47)
    {
      v81 = 1;
      v83 = 0;
      v84 = 0;
      llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v81);
    }
    v43 = *(_QWORD *)(a2 + 24);
    v44 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v44 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v44 = a2;
        do
          v44 = *(_QWORD *)(v44 + 8);
        while ((*(_WORD *)(v44 + 44) & 8) != 0);
      }
    }
LABEL_123:
    sub_1C487FE80(v43 + 40, a2, *(_QWORD *)(v44 + 8));
    sub_1C554AE8C(v42, *(_QWORD *)(v30 + 72), *(_QWORD **)(v30 + 80));
    v68 = 1;
    goto LABEL_146;
  }
  if (v24)
  {
    v50 = 41;
    v55 = v74;
    v49 = v48;
LABEL_89:
    if (a3 == 47)
      v56 = 366;
    else
      v56 = 365;
    if (a3 == 47)
      v57 = 236;
    else
      v57 = 235;
    if (v14 == 129)
      v58 = v56;
    else
      v58 = v57;
    v59 = sub_1C4885524(v50, v58, v33);
    LODWORD(v86) = v55;
    v87 = 1;
    v60 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v75, v59, &v86, 1, 0, 0, 0);
    v42 = v61;
    v81 = 1;
    v83 = 0;
    v84 = 0;
    llvm::MachineInstr::addOperand(v61, v60, (const llvm::MachineOperand *)&v81);
    v83 = 0;
    v84 = 0;
    v81 = 0;
    v82 = v71;
    v85 = 0;
    llvm::MachineInstr::addOperand(v42, v60, (const llvm::MachineOperand *)&v81);
    v81 = 1;
    v83 = 0;
    v84 = v49;
    llvm::MachineInstr::addOperand(v42, v60, (const llvm::MachineOperand *)&v81);
    v81 = 1;
    v83 = 0;
    v84 = v20;
    llvm::MachineInstr::addOperand(v42, v60, (const llvm::MachineOperand *)&v81);
    if (a3 == 47)
    {
      v81 = 1;
      v83 = 0;
      v84 = 0;
      llvm::MachineInstr::addOperand(v42, v60, (const llvm::MachineOperand *)&v81);
    }
    v43 = *(_QWORD *)(a2 + 24);
    v44 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v44 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v44 = a2;
        do
          v44 = *(_QWORD *)(v44 + 8);
        while ((*(_WORD *)(v44 + 44) & 8) != 0);
      }
    }
    goto LABEL_123;
  }
  v68 = 0;
LABEL_146:
  v75 = &off_1E816EC08;
  if (*((_QWORD *)&v77 + 1))
    llvm::MetadataTracking::untrack((uint64_t)&v77 + 8, *((unsigned __int8 **)&v77 + 1));
  return v68;
}

uint64_t sub_1C48AFC7C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  int v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;

  v4 = *(unsigned int *)(a2 + 32 * a3 + 4);
  v5 = *(_QWORD *)(a4 + 24);
  v6 = *(_QWORD *)(a4 + 272);
  if ((int)v4 >= 0)
    v7 = (uint64_t *)(v6 + 8 * v4);
  else
    v7 = (uint64_t *)(v5 + 16 * (v4 & 0x7FFFFFFF) + 8);
  v8 = *v7;
  if (!*v7)
  {
    v9 = 0;
LABEL_6:
    v10 = 0;
    goto LABEL_7;
  }
  v9 = *v7;
  if ((*(_BYTE *)(v8 + 3) & 1) != 0)
    goto LABEL_21;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    goto LABEL_22;
  if ((*(_BYTE *)(v9 + 3) & 1) != 0)
LABEL_21:
    v9 = *(_QWORD *)(v9 + 8);
  else
    v9 = 0;
LABEL_22:
  if ((*(_BYTE *)(v8 + 3) & 1) == 0)
  {
    v8 = *(_QWORD *)(v8 + 24);
    if (!v8 || (*(_BYTE *)(v8 + 3) & 1) == 0)
      goto LABEL_6;
  }
  v15 = *(_QWORD *)(v8 + 8);
  if (!v15 || **(_WORD **)(v15 + 16) != 178 || *(_DWORD *)(v15 + 40) != 2)
    goto LABEL_6;
  v16 = *(unsigned int *)(*(_QWORD *)(v15 + 32) + 36);
  v17 = v5 + 16 * (v16 & 0x7FFFFFFF) + 8;
  v18 = (uint64_t *)(v6 + 8 * v16);
  if ((int)v16 >= 0)
    v19 = v18;
  else
    v19 = (uint64_t *)v17;
  v9 = *v19;
  if (v9)
  {
    if ((*(_BYTE *)(v9 + 3) & 1) == 0)
    {
      v9 = *(_QWORD *)(v9 + 24);
      if (!v9)
        goto LABEL_32;
      if ((*(_BYTE *)(v9 + 3) & 1) == 0)
      {
        v9 = 0;
        goto LABEL_32;
      }
    }
    v9 = *(_QWORD *)(v9 + 8);
  }
LABEL_32:
  v10 = v9 != 0;
LABEL_7:
  if (*(_QWORD *)(v9 + 24) == a1)
  {
    if ((**(_WORD **)(v9 + 16) & 0xFFFE) == 0x152 && (sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v9 + 32) + 68), a4), v13))
    {
      v11 = 1;
      if (!v10)
        goto LABEL_9;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      if (!v10)
        return v12 | v11;
    }
    v12 = 256;
    return v12 | v11;
  }
  v11 = 0;
LABEL_9:
  v12 = 0;
  return v12 | v11;
}

uint64_t sub_1C48AFDF4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, _BYTE *a7, int a8, char a9)
{
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  const char *v24;
  int v25;
  __int16 ***v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  unint64_t v35;
  int v36;
  uint64_t (**v37)();
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;

  v13 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 32 * a4 + 4);
  if ((v13 & 0x80000000) != 0 && (v13 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432))
    v14 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * (v13 & 0x7FFFFFFF));
  else
    v14 = 0;
  v42 = v14;
  v15 = *(_QWORD *)(a3 + 24);
  v41 = 0u;
  v40 = 0u;
  v39 = 0u;
  v38 = 0u;
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v16 + 40);
  v37 = &off_1E816EC08;
  *(_QWORD *)&v38 = v16;
  v39 = v17;
  *((_QWORD *)&v38 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 16) + 104))(*(_QWORD *)(v16 + 16));
  v18 = *(_QWORD *)(a3 + 24);
  *((_QWORD *)&v40 + 1) = a3;
  *(_QWORD *)&v41 = 0;
  *(_QWORD *)&v40 = v18;
  if ((__int128 *)(a3 + 56) != (__int128 *)((char *)&v39 + 8))
  {
    v19 = *(unsigned __int8 **)(a3 + 56);
    *((_QWORD *)&v39 + 1) = v19;
    if (v19)
      llvm::MetadataTracking::track((uint64_t)&v39 + 8, v19, 2);
  }
  v20 = llvm::MachineRegisterInfo::cloneVirtualRegister(a6, *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4), "", 0);
  LODWORD(v35) = v20;
  v36 = 1;
  sub_1C5545FFC((uint64_t)&v37, &v35, 1.0);
  v22 = v21;
  if (*(_QWORD *)(*(_QWORD *)(a6 + 24) + 16 * (v20 & 0x7FFFFFFF)) < 8uLL
    || (*(_QWORD *)(*(_QWORD *)(a6 + 24) + 16 * (v20 & 0x7FFFFFFF)) & 4) != 0)
  {
    v25 = sub_1C4825F50(&v42);
    if ((_DWORD)v24 == 1)
    if (v25 > 111)
    {
      if (v25 <= 191)
      {
        if (v25 == 112)
        {
          v26 = (__int16 ***)&off_1E7FA6060;
        }
        else if (v25 == 128)
        {
          v26 = (__int16 ***)&off_1E7FA6098;
        }
        else
        {
          v26 = (__int16 ***)&off_1E7FA60D0;
        }
      }
      else if (v25 > 287)
      {
        if (v25 == 288)
          v26 = (__int16 ***)&off_1E7FA6178;
        else
          v26 = (__int16 ***)&off_1E7FA61B0;
      }
      else if (v25 == 192)
      {
        v26 = (__int16 ***)&off_1E7FA6108;
      }
      else
      {
        v26 = (__int16 ***)&off_1E7FA6140;
      }
    }
    else if (v25 <= 47)
    {
      v26 = &off_1E7FA5F10;
      if (v25 != 1 && v25 != 16)
        v26 = &off_1E7FA5F48;
    }
    else if (v25 > 79)
    {
      if (v25 == 80)
        v26 = (__int16 ***)&off_1E7FA6028;
      else
        v26 = (__int16 ***)&off_1E7FA5FB8;
    }
    else if (v25 == 48)
    {
      v26 = (__int16 ***)&off_1E7FA5FF0;
    }
    else
    {
      v26 = (__int16 ***)&off_1E7FA6488;
    }
    v27 = (_QWORD *)(*(_QWORD *)(a6 + 24) + 16 * (v20 & 0x7FFFFFFF));
    v28 = *v27 & 0xFFFFFFFFFFFFFFF8;
    if ((*v27 & 4) != 0)
    {
      if (!v28
        || ((*(_QWORD *)(*(_QWORD *)(v28 + 24) + (((unint64_t)*((unsigned __int16 *)*v26 + 12) >> 3) & 0x1FF8)) >> *((_WORD *)*v26 + 12)) & 1) != 0)
      {
        *v27 = v26;
      }
    }
    else
    {
      sub_1C51A3F30((_QWORD *)a6, v20, v28, (uint64_t)v26, 0);
    }
  }
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 7968;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)a3, *(llvm::MachineFunction **)(*(_QWORD *)(a3 + 24) + 32), (const llvm::MachineOperand *)(*(_QWORD *)(a3 + 32) + 32 * a5));
  if (a4 == 2)
  {
    llvm::MachineOperand::setReg(*(_QWORD *)(a3 + 32) + 32, v13);
    *(_DWORD *)(*(_QWORD *)(a3 + 32) + 32) = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 32) & 0xFBFFFFFF | (((*(_DWORD *)(*(_QWORD *)(a3 + 32) + 64) >> 26) & ~HIBYTE(*(_DWORD *)(*(_QWORD *)(a3 + 32) + 64)) & 1) << 26);
  }
  llvm::MachineOperand::setReg(*(_QWORD *)(a3 + 32) + 64, v20);
  *(_DWORD *)(*(_QWORD *)(a3 + 32) + 64) &= ~0x4000000u;
  sub_1C48B01EC(a1, a2, a3, 1u, 2u, a6, a7, a8, a9);
  if ((*(_BYTE *)v22 & 4) != 0)
  {
    v29 = v22;
  }
  else
  {
    v29 = v22;
    if ((*(_WORD *)(v22 + 44) & 8) != 0)
    {
      v29 = v22;
      do
        v29 = *(_QWORD *)(v29 + 8);
      while ((*(_WORD *)(v29 + 44) & 8) != 0);
    }
  }
  result = sub_1C487FE80(*(_QWORD *)(v22 + 24) + 40, v22, *(_QWORD *)(v29 + 8));
  v37 = &off_1E816EC08;
  if (*((_QWORD *)&v39 + 1))
    return llvm::MetadataTracking::untrack((uint64_t)&v39 + 8, *((unsigned __int8 **)&v39 + 1));
  return result;
}

uint64_t sub_1C48B01EC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, _BYTE *a7, int a8, char a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  const char *v50;
  int v51;
  __int16 ***v52;
  llvm::MachineFunction *v53;
  llvm::MachineInstr *v54;
  llvm::MachineInstr *v55;
  __int128 *v56;
  __int128 v57;
  unint64_t v58;
  int v59;
  BOOL v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  BOOL v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  const char *v77;
  int v78;
  __int16 ***v79;
  llvm::MachineFunction *v80;
  llvm::MachineInstr *v81;
  llvm::MachineInstr *v82;
  uint64_t result;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  llvm::MachineFunction **v97[3];
  llvm::MachineFunction *v98;
  llvm::MachineInstr *v99;
  uint64_t v100[4];
  unsigned __int8 *v101[5];
  unint64_t v102;
  unint64_t v103[10];
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t (**v112)();
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  int v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  __int16 ***v130;
  uint64_t v131;
  llvm::MachineFunction **v132;
  _DWORD v133[5];
  __int16 ***v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;

  v15 = 0;
  v138 = *MEMORY[0x1E0C80C00];
  v16 = *(_QWORD *)(a3 + 32);
  v17 = *(unsigned int *)(v16 + 32 * a4 + 4);
  v18 = v17 & 0x7FFFFFFF;
  if ((v17 & 0x80000000) != 0 && v18 < *(unsigned int *)(a6 + 432))
    v15 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * v18);
  v19 = *(_QWORD *)(a6 + 24);
  v20 = (uint64_t *)(v19 + 16 * v18 + 8);
  v21 = *(_QWORD *)(a6 + 272);
  if ((int)v17 >= 0)
    v20 = (uint64_t *)(v21 + 8 * v17);
  v22 = *v20;
  if (v22 && ((*(_BYTE *)(v22 + 3) & 1) != 0 || (v22 = *(_QWORD *)(v22 + 24)) != 0 && (*(_BYTE *)(v22 + 3) & 1) != 0))
    v23 = *(_QWORD *)(v22 + 8);
  else
    v23 = 0;
  v126 = v23;
  if (a9)
  {
    v17 = *(unsigned int *)(*(_QWORD *)(v23 + 32) + 36);
    v24 = (uint64_t *)(v21 + 8 * v17);
    if ((int)v17 < 0)
      v24 = (uint64_t *)(v19 + 16 * (v17 & 0x7FFFFFFF) + 8);
    v25 = *v24;
    if (v25 && ((*(_BYTE *)(v25 + 3) & 1) != 0 || (v25 = *(_QWORD *)(v25 + 24)) != 0 && (*(_BYTE *)(v25 + 3) & 1) != 0))
      v23 = *(_QWORD *)(v25 + 8);
    else
      v23 = 0;
    v126 = v23;
  }
  if ((v17 & 0x80000000) != 0 && (v26 = v17 & 0x7FFFFFFF, v26 < *(_DWORD *)(a6 + 432)))
    v27 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * v26);
  else
    v27 = 0;
  v95 = **(unsigned __int16 **)(v23 + 16);
  v28 = (__int128 *)(v16 + 32 * a5);
  v29 = v28[1];
  v124 = *v28;
  v125 = v29;
  if ((DWORD1(v124) & 0x80000000) != 0)
  {
    v30 = DWORD1(v124) & 0x7FFFFFFF;
    if (v30 < *(_DWORD *)(a6 + 432) && *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * v30) == 257)
    {
      v31 = *(_QWORD *)(v19 + 16 * v30 + 8);
      if (v31)
      {
        v84 = v31;
        if ((*(_DWORD *)v31 & 0x1000000) != 0 || (v84 = *(_QWORD *)(v31 + 24)) != 0 && (*(_BYTE *)(v84 + 3) & 1) != 0)
        {
          v85 = *(_QWORD *)(v84 + 8);
          if (v85)
          {
            if (**(_WORD **)(v85 + 16) == 178
              && *(_DWORD *)(v85 + 40) == 2
              && ((*(_DWORD *)v31 & 0x1000000) != 0
               || (v31 = *(_QWORD *)(v31 + 24)) != 0 && (*(_BYTE *)(v31 + 3) & 1) != 0))
            {
              v86 = *(_QWORD *)(v31 + 8);
              if (v86)
              {
                v87 = *(_QWORD *)(v86 + 32);
                v88 = *(_OWORD *)(v87 + 48);
                v124 = *(_OWORD *)(v87 + 32);
                v125 = v88;
              }
            }
          }
        }
      }
    }
  }
  v32 = *(_OWORD *)(v16 + 112);
  v122 = *(_OWORD *)(v16 + 96);
  v123 = v32;
  if ((DWORD1(v122) & 0x80000000) != 0)
  {
    v33 = DWORD1(v122) & 0x7FFFFFFF;
    if (v33 < *(_DWORD *)(a6 + 432) && *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * v33) == 257)
    {
      v34 = *(_QWORD *)(v19 + 16 * v33 + 8);
      if (v34)
      {
        v89 = v34;
        if ((*(_DWORD *)v34 & 0x1000000) != 0 || (v89 = *(_QWORD *)(v34 + 24)) != 0 && (*(_BYTE *)(v89 + 3) & 1) != 0)
        {
          v90 = *(_QWORD *)(v89 + 8);
          if (v90)
          {
            if (**(_WORD **)(v90 + 16) == 178
              && *(_DWORD *)(v90 + 40) == 2
              && ((*(_DWORD *)v34 & 0x1000000) != 0
               || (v34 = *(_QWORD *)(v34 + 24)) != 0 && (*(_BYTE *)(v34 + 3) & 1) != 0))
            {
              v91 = *(_QWORD *)(v34 + 8);
              if (v91)
              {
                v92 = *(_QWORD *)(v91 + 32);
                v93 = *(_OWORD *)(v92 + 48);
                v122 = *(_OWORD *)(v92 + 32);
                v123 = v93;
              }
            }
          }
        }
      }
    }
  }
  v35 = *(_QWORD *)(v23 + 32);
  v36 = *(_OWORD *)(v35 + 48);
  v120 = *(_OWORD *)(v35 + 32);
  v121 = v36;
  v96 = sub_1C554C050(*(_DWORD *)(v35 + 68), a6);
  v37 = *(_QWORD *)(v23 + 32);
  v38 = *(_OWORD *)(v37 + 112);
  v118 = *(_OWORD *)(v37 + 96);
  v119 = v38;
  v39 = sub_1C554C050(*(_DWORD *)(v37 + 132), a6);
  v40 = v39;
  if (v41 && v39 == 5)
  {
    v42 = *(_QWORD *)(v23 + 24);
    v116 = 0u;
    v115 = 0u;
    v114 = 0u;
    v113 = 0u;
    v43 = *(_QWORD *)(v42 + 32);
    v112 = &off_1E816EC08;
    *(_QWORD *)&v113 = v43;
    v114 = *(unint64_t *)(v43 + 40);
    *((_QWORD *)&v113 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v43 + 16) + 104))(*(_QWORD *)(v43 + 16));
    *((_QWORD *)&v115 + 1) = v23;
    *(_QWORD *)&v116 = 0;
    *(_QWORD *)&v115 = *(_QWORD *)(v23 + 24);
    *((_QWORD *)&v115 + 1) = v23;
    if ((__int128 *)(v23 + 56) != (__int128 *)((char *)&v114 + 8))
    {
      v44 = *(unsigned __int8 **)(v23 + 56);
      *((_QWORD *)&v114 + 1) = v44;
      if (v44)
        llvm::MetadataTracking::track((uint64_t)&v114 + 8, v44, 2);
    }
    v94 = a2;
    if ((DWORD1(v120) & 0x80000000) != 0
      && (v45 = DWORD1(v120) & 0x7FFFFFFF, v45 < *(_DWORD *)(a6 + 432)))
    {
      v46 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * v45);
      v103[0] = v46;
      if (v95 == 339)
        v47 = 5708;
      else
        v47 = 5468;
      if (v95 == 339)
        v48 = 5638;
      else
        v48 = 5398;
      if (v46 == 129)
        v49 = v47;
      else
        v49 = v48;
    }
    else
    {
      v103[0] = 0;
      if (v95 == 339)
        v49 = 5638;
      else
        v49 = 5398;
    }
    v51 = sub_1C4825F50(v103);
    if ((_DWORD)v50 == 1)
    if (v51 > 111)
    {
      if (v51 <= 191)
      {
        if (v51 == 112)
        {
          v52 = (__int16 ***)&off_1E7FA6060;
        }
        else if (v51 == 128)
        {
          v52 = (__int16 ***)&off_1E7FA6098;
        }
        else
        {
          v52 = (__int16 ***)&off_1E7FA60D0;
        }
      }
      else if (v51 > 287)
      {
        if (v51 == 288)
          v52 = (__int16 ***)&off_1E7FA6178;
        else
          v52 = (__int16 ***)&off_1E7FA61B0;
      }
      else if (v51 == 192)
      {
        v52 = (__int16 ***)&off_1E7FA6108;
      }
      else
      {
        v52 = (__int16 ***)&off_1E7FA6140;
      }
    }
    else if (v51 <= 47)
    {
      v52 = &off_1E7FA5F10;
      if (v51 != 1 && v51 != 16)
        v52 = &off_1E7FA5F48;
    }
    else if (v51 > 79)
    {
      if (v51 == 80)
        v52 = (__int16 ***)&off_1E7FA6028;
      else
        v52 = (__int16 ***)&off_1E7FA5FB8;
    }
    else if (v51 == 48)
    {
      v52 = (__int16 ***)&off_1E7FA5FF0;
    }
    else
    {
      v52 = (__int16 ***)&off_1E7FA6488;
    }
    v134 = v52;
    v135 = 2;
    v53 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v112, v49, (uint64_t *)&v134, 1, 0, 0, 0);
    v55 = v54;
    v105 = 1;
    v107 = 0;
    v108 = 0;
    llvm::MachineInstr::addOperand(v54, v53, (const llvm::MachineOperand *)&v105);
    v107 = 0;
    v108 = 0;
    v106 = DWORD1(v120);
    v105 = 0;
    v109 = 0;
    llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v105);
    v105 = 1;
    v107 = 0;
    v108 = 0;
    llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v105);
    v105 = 1;
    v107 = 0;
    v108 = 16;
    llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v105);
    v107 = 0;
    v108 = 0;
    v106 = DWORD1(v118);
    v105 = 0;
    v109 = 0;
    llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v105);
    v105 = 1;
    v107 = 0;
    v108 = 0;
    llvm::MachineInstr::addOperand(v55, v53, (const llvm::MachineOperand *)&v105);
    v56 = (__int128 *)*((_QWORD *)v55 + 4);
    v57 = v56[1];
    if (v96 < 16)
    {
      v118 = *v56;
      v119 = v57;
    }
    else
    {
      v120 = *v56;
      v121 = v57;
      v96 -= 16;
    }
    a2 = v94;
    v112 = &off_1E816EC08;
    if (*((_QWORD *)&v114 + 1))
      llvm::MetadataTracking::untrack((uint64_t)&v114 + 8, *((unsigned __int8 **)&v114 + 1));
    v40 = 4;
  }
  sub_1C48AA43C((uint64_t)&v112, a6, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)&v120, 0, 0, 0, 0);
  sub_1C48AA43C((uint64_t)&v105, a6, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)&v124, 0, 0, 0, 0);
  sub_1C48AA43C((uint64_t)&v134, a6, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)&v122, 0, 0, 0, 0);
  sub_1C48AA43C((uint64_t)v103, a6, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)&v118, 0, 0, 0, 0);
  v58 = 0;
  v59 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
  if (v59 < 0)
  {
    if ((v59 & 0x7FFFFFFFu) >= *(_DWORD *)(a6 + 432))
      v58 = 0;
    else
      v58 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * (v59 & 0x7FFFFFFF));
  }
  v102 = v58;
  if (v15 == 129)
  {
    v60 = v95 == 339;
    if (a8)
    {
      v61 = 9;
      v62 = 11;
    }
    else
    {
      v61 = 8;
      v62 = 10;
    }
  }
  else
  {
    v60 = v95 == 339;
    if (a8)
    {
      v61 = 23;
      v62 = 25;
    }
    else
    {
      v61 = 22;
      v62 = 24;
    }
  }
  if (v60)
    v63 = v62;
  else
    v63 = v61;
  if (v27 == 129)
    v64 = 2;
  else
    v64 = 5;
  if (v15 == 257)
    v65 = 5;
  else
    v65 = 2;
  if (v111 == 32)
    v66 = 5;
  else
    v66 = 2;
  if ((v110 & 0xFFFFFFFE) == 4)
    v67 = 1;
  else
    v67 = v66;
  v133[0] = v65;
  v133[1] = v64;
  v68 = v136 & 0xFFFFFFFE;
  if (v137 == 32)
    v69 = 5;
  else
    v69 = 2;
  if (v68 == 4)
    v69 = 1;
  v70 = v65 == v69 || v68 == 4;
  v133[2] = v67;
  v133[3] = v69;
  v133[4] = v64;
  if (v70)
    v71 = 5;
  else
    v71 = 4;
  v72 = sub_1C4884024(v63, v133, v71, a7);
  v73 = *(_QWORD *)(a3 + 24);
  v101[4] = 0;
  v74 = *(_QWORD *)(v73 + 32);
  v100[0] = (uint64_t)&off_1E816EC08;
  v100[1] = v74;
  v100[3] = *(_QWORD *)(v74 + 40);
  v100[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v74 + 16) + 104))(*(_QWORD *)(v74 + 16));
  v75 = *(unsigned __int8 **)(a3 + 24);
  v101[2] = (unsigned __int8 *)a3;
  v101[3] = 0;
  v101[0] = 0;
  v101[1] = v75;
  if ((unsigned __int8 **)(a3 + 56) != v101)
  {
    v76 = *(unsigned __int8 **)(a3 + 56);
    v101[0] = v76;
    if (v76)
      llvm::MetadataTracking::track((uint64_t)v101, v76, 2);
  }
  v78 = sub_1C4825F50(&v102);
  if ((_DWORD)v77 == 1)
  if (v78 > 111)
  {
    if (v78 <= 191)
    {
      if (v78 == 112)
      {
        v79 = (__int16 ***)&off_1E7FA6060;
      }
      else if (v78 == 128)
      {
        v79 = (__int16 ***)&off_1E7FA6098;
      }
      else
      {
        v79 = (__int16 ***)&off_1E7FA60D0;
      }
    }
    else if (v78 > 287)
    {
      if (v78 == 288)
        v79 = (__int16 ***)&off_1E7FA6178;
      else
        v79 = (__int16 ***)&off_1E7FA61B0;
    }
    else if (v78 == 192)
    {
      v79 = (__int16 ***)&off_1E7FA6108;
    }
    else
    {
      v79 = (__int16 ***)&off_1E7FA6140;
    }
  }
  else if (v78 <= 47)
  {
    v79 = &off_1E7FA5F10;
    if (v78 != 1 && v78 != 16)
      v79 = &off_1E7FA5F48;
  }
  else if (v78 > 79)
  {
    if (v78 == 80)
      v79 = (__int16 ***)&off_1E7FA6028;
    else
      v79 = (__int16 ***)&off_1E7FA5FB8;
  }
  else if (v78 == 48)
  {
    v79 = (__int16 ***)&off_1E7FA5FF0;
  }
  else
  {
    v79 = (__int16 ***)&off_1E7FA6488;
  }
  v130 = v79;
  LODWORD(v131) = 2;
  v80 = (llvm::MachineFunction *)sub_1C5548620(v100, v72, (uint64_t *)&v130, 1, 0, 0, 0);
  v82 = v81;
  v127 = 1;
  v129 = 0;
  v128 = 0;
  llvm::MachineInstr::addOperand(v81, v80, (const llvm::MachineOperand *)&v127);
  v127 = 1;
  v128 = 0;
  v129 = v40 & 7;
  llvm::MachineInstr::addOperand(v82, v80, (const llvm::MachineOperand *)&v127);
  v98 = v80;
  v99 = v82;
  v130 = (__int16 ***)&v126;
  v131 = a6;
  v132 = &v98;
  v97[0] = &v98;
  v97[1] = (llvm::MachineFunction **)a6;
  v97[2] = (llvm::MachineFunction **)a1;
  sub_1C48BA7A4((uint64_t **)&v130, SHIDWORD(v112), v117, (uint64_t)&v120);
  sub_1C48BAD50(v97, (uint64_t)&v105);
  sub_1C48BAD50(v97, (uint64_t)&v134);
  sub_1C48BA7A4((uint64_t **)&v130, SHIDWORD(v103[0]), v104, (uint64_t)&v118);
  v127 = 1;
  v128 = 0;
  v129 = v96;
  llvm::MachineInstr::addOperand(v99, v98, (const llvm::MachineOperand *)&v127);
  result = sub_1C48B0CD8((_QWORD *)a6, a2, *(_DWORD *)(*((_QWORD *)v99 + 4) + 4));
  v100[0] = (uint64_t)&off_1E816EC08;
  if (v101[0])
    return llvm::MetadataTracking::untrack((uint64_t)v101, v101[0]);
  return result;
}

uint64_t sub_1C48B0CD8(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t result;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  _DWORD v28[6];
  _DWORD v29[4];
  _QWORD v30[4];
  unsigned __int8 *v31[5];

  v5 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
  v6 = a1[3];
  v7 = *(_QWORD *)(v6 + 16 * (v5 & 0x7FFFFFFF));
  if ((v7 & 4) != 0)
    v8 = 0;
  else
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v6 + 16 * (a3 & 0x7FFFFFFF));
  if ((v9 & 4) != 0)
    v10 = 0;
  else
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (v8 == v10 && v10 != 0 && v8 != 0 || v8 == 0)
  {
    v15 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v15 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v15 = a2;
        do
          v15 = *(_QWORD *)(v15 + 8);
        while ((*(_WORD *)(v15 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v15 + 8));
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 176))(*(_QWORD *)(*a1 + 16));
    if ((v5 & 0x80000000) != 0)
      v17 = (uint64_t *)(a1[3] + 16 * (v5 & 0x7FFFFFFF) + 8);
    else
      v17 = (uint64_t *)(a1[34] + 8 * v5);
    result = *v17;
    if (*v17)
    {
      v19 = a3;
      v20 = a3 - 1;
      do
      {
        v21 = *(_QWORD *)(result + 24);
        if (v20 <= 0x3FFFFFFE)
          llvm::MachineOperand::substPhysReg((unsigned int *)result, v19, v16);
        else
          llvm::MachineOperand::setReg(result, v19);
        result = v21;
      }
      while (v21);
    }
  }
  else
  {
    v22 = *(_QWORD *)(a2 + 24);
    v23 = &off_1E816EC08;
    v31[4] = 0;
    v24 = *(_QWORD *)(v22 + 32);
    v30[0] = &off_1E816EC08;
    v30[1] = v24;
    v30[3] = *(_QWORD *)(v24 + 40);
    v30[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v24 + 16) + 104))(*(_QWORD *)(v24 + 16));
    v25 = *(unsigned __int8 **)(a2 + 24);
    v31[2] = (unsigned __int8 *)a2;
    v31[3] = 0;
    v31[0] = 0;
    v31[1] = v25;
    if ((unsigned __int8 **)(a2 + 56) != v31)
    {
      v26 = *(unsigned __int8 **)(a2 + 56);
      v31[0] = v26;
      if (v26)
      {
        llvm::MetadataTracking::track((uint64_t)v31, v26, 2);
        v23 = (uint64_t (**)())v30[0];
      }
    }
    v29[0] = v5;
    v29[2] = 1;
    v28[0] = a3;
    v28[4] = 0;
    ((void (*)(_QWORD *, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))v23[4])(v30, 19, v29, 1, v28, 1, 0);
    v27 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v27 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v27 = a2;
        do
          v27 = *(_QWORD *)(v27 + 8);
        while ((*(_WORD *)(v27 + 44) & 8) != 0);
      }
    }
    result = sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v27 + 8));
    v30[0] = &off_1E816EC08;
    if (v31[0])
      return llvm::MetadataTracking::untrack((uint64_t)v31, v31[0]);
  }
  return result;
}

uint64_t sub_1C48B0F20(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BOOL4 v20;
  llvm::detail::DoubleAPFloat *v21;
  void *v22;
  uint64_t (***v23)();
  int v24;
  uint64_t result;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  llvm::detail::DoubleAPFloat *v31;
  void *v32;
  uint64_t (***v33)();
  int v34;
  uint64_t v35;
  int v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  int v46;
  llvm::MachineFunction *v47;
  llvm::MachineInstr *v48;
  llvm::MachineInstr *v49;
  uint64_t v50;
  int v51;
  llvm::MachineInstr *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (**v59)();
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63[5];
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (**(unsigned __int16 **)(a2 + 16) - 45 > 1)
    return 0;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 40);
  v10 = *(unsigned int *)(v8 + 36);
  v11 = *(unsigned int *)(v8 + 68);
  sub_1C554C050(*(_DWORD *)(v8 + 36), v9);
  if (v12)
  {
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v15 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
    if ((int)v10 >= 0)
      v15 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v10);
    v16 = *v15;
    if ((*(_BYTE *)(v16 + 3) & 1) == 0)
      v16 = *(_QWORD *)(v16 + 24);
    v17 = *(_QWORD *)(v16 + 8);
    if (**(_WORD **)(v17 + 16) == 121)
      v13 = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 48);
    else
      v13 = 0;
    v14 = v13 != 0;
  }
  sub_1C554C050(v11, v9);
  if (v18)
  {
    if (**(_WORD **)(a2 + 16) != 45 && v14)
    {
      v57 = a3;
      v20 = 1;
      goto LABEL_17;
    }
    return 0;
  }
  v26 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
  if ((int)v11 >= 0)
    v26 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v11);
  v27 = *v26;
  if ((*(_BYTE *)(v27 + 3) & 1) == 0)
    v27 = *(_QWORD *)(v27 + 24);
  v28 = *(_QWORD *)(v27 + 8);
  v57 = a3;
  if (**(_WORD **)(v28 + 16) == 121)
    result = *(_QWORD *)(*(_QWORD *)(v28 + 32) + 48);
  else
    result = 0;
  v29 = **(unsigned __int16 **)(a2 + 16);
  v20 = v29 != 45;
  v30 = v29 != 45 && v14;
  if (v30 || result)
  {
    if (result)
    {
      v32 = *(void **)(result + 32);
      v31 = (llvm::detail::DoubleAPFloat *)(result + 32);
      if (v32 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v31, (unsigned int *)&v59);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v31, (unsigned int *)&v59);
      v56 = a4;
      if (v60 >= 0x41)
        v33 = (uint64_t (***)())v59;
      else
        v33 = &v59;
      v58 = (uint64_t)*v33;
      if (v60 >= 0x41 && v59)
        MEMORY[0x1CAA32F9C]();
      v24 = 1;
LABEL_48:
      v34 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if (v34 < 0 && (v34 & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432))
        v35 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * (v34 & 0x7FFFFFFF));
      else
        v35 = 0;
      if (v20)
        v36 = 45;
      else
        v36 = 35;
      v37 = (_BYTE *)(*(_QWORD *)(a1 + 56) + 1328);
      v38 = *(_QWORD *)(a2 + 24);
      v63[4] = 0;
      v39 = *(_QWORD *)(v38 + 32);
      v59 = &off_1E816EC08;
      v60 = v39;
      v62 = *(_QWORD *)(v39 + 40);
      v61 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v39 + 16) + 104))(*(_QWORD *)(v39 + 16));
      v40 = *(unsigned __int8 **)(a2 + 24);
      v63[2] = (unsigned __int8 *)a2;
      v63[3] = 0;
      v63[0] = 0;
      v63[1] = v40;
      if ((unsigned __int8 **)(a2 + 56) != v63)
      {
        v41 = *(unsigned __int8 **)(a2 + 56);
        v63[0] = v41;
        if (v41)
          llvm::MetadataTracking::track((uint64_t)v63, v41, 2);
      }
      if (v58 > 255)
      {
        if (v35 == 257)
          v50 = 241;
        else
          v50 = 380;
        v51 = sub_1C4885524(v36, v50, v37);
        LODWORD(v69) = v34;
        v70 = 1;
        v47 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v59, v51, &v69, 1, 0, 0, 0);
        v49 = v52;
        v64 = 1;
        v66 = 0;
        v67 = 0;
        llvm::MachineInstr::addOperand(v52, v47, (const llvm::MachineOperand *)&v64);
        v66 = 0;
        v67 = 0;
        v64 = 0;
        v65 = v10;
        v68 = 0;
        llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v64);
        v64 = 1;
        v66 = 0;
        v67 = 0;
        llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v64);
        v66 = 0;
        v67 = 0;
        v64 = 0;
        v65 = v11;
        v68 = 0;
        llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v64);
        v64 = 1;
        v66 = 0;
        v67 = 0;
      }
      else
      {
        if (v35 == 257)
          v42 = 220;
        else
          v42 = 323;
        if (v35 == 257)
          v43 = 235;
        else
          v43 = 365;
        v44 = v20 & v24;
        if (v44)
          v45 = v43;
        else
          v45 = v42;
        v46 = sub_1C4885524(v36, v45, v37);
        LODWORD(v69) = v34;
        v70 = 1;
        v47 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v59, v46, &v69, 1, 0, 0, 0);
        v49 = v48;
        v64 = 1;
        v66 = 0;
        v67 = 0;
        llvm::MachineInstr::addOperand(v48, v47, (const llvm::MachineOperand *)&v64);
        if (v44 != 1)
        {
          v64 = 1;
          v66 = 0;
          v67 = v58;
          llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v64);
          v53 = v56;
          v66 = 0;
          v67 = 0;
          if (v20)
            v65 = v11;
          else
            v65 = v10;
          v64 = 0;
          v68 = 0;
          llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v64);
          v54 = v57;
          v64 = 1;
          v66 = 0;
          v67 = 0;
          llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v64);
          goto LABEL_79;
        }
        v66 = 0;
        v67 = 0;
        v64 = 0;
        v65 = v10;
        v68 = 0;
        llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v64);
        v64 = 1;
        v66 = 0;
        v67 = 0;
        llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v64);
        v64 = 1;
        v66 = 0;
        v67 = v58;
      }
      llvm::MachineInstr::addOperand(v49, v47, (const llvm::MachineOperand *)&v64);
      v53 = v56;
      v54 = v57;
LABEL_79:
      v55 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v55 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v55 = a2;
          do
            v55 = *(_QWORD *)(v55 + 8);
          while ((*(_WORD *)(v55 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v55 + 8));
      sub_1C554AE8C(v49, v54, v53);
      v59 = &off_1E816EC08;
      if (v63[0])
        llvm::MetadataTracking::untrack((uint64_t)v63, v63[0]);
      return 1;
    }
LABEL_17:
    v22 = *(void **)(v13 + 32);
    v21 = (llvm::detail::DoubleAPFloat *)(v13 + 32);
    if (v22 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v21, (unsigned int *)&v59);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v21, (unsigned int *)&v59);
    v56 = a4;
    if (v60 >= 0x41)
      v23 = (uint64_t (***)())v59;
    else
      v23 = &v59;
    v58 = (uint64_t)*v23;
    if (v60 >= 0x41 && v59)
      MEMORY[0x1CAA32F9C]();
    v24 = 0;
    goto LABEL_48;
  }
  return result;
}

uint64_t sub_1C48B1530(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  unint64_t v14;
  char v15;
  _BOOL4 v16;
  _BOOL4 v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  llvm::MachineInstr *v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  void (**v32)(uint64_t *);
  uint64_t v33;
  int v34;
  unsigned int v35;
  llvm::MachineInstr *v36;
  llvm::MachineFunction *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  llvm::MachineInstr *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  unsigned int v47;
  llvm::MachineFunction *v49;
  llvm::MachineInstr *v50;
  uint64_t v51[4];
  unsigned __int8 *v52[5];
  void *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 40);
  v8 = *(unsigned int *)(v6 + 36);
  if ((v8 & 0x80000000) != 0)
    v9 = (uint64_t *)(*(_QWORD *)(v7 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  else
    v9 = (uint64_t *)(*(_QWORD *)(v7 + 272) + 8 * v8);
  v10 = *v9;
  if ((*(_BYTE *)(v10 + 3) & 1) == 0)
    v10 = *(_QWORD *)(v10 + 24);
  v11 = *(_QWORD *)(v10 + 8);
  if (**(_WORD **)(v11 + 16) != 269)
  {
    v33 = 0;
    LOBYTE(v34) = 0;
    v35 = 0;
    return v33 & 0x100000000 | v35 | v34;
  }
  v12 = *(_DWORD *)(v6 + 68);
  v13 = (_BYTE *)(*(_QWORD *)(a1 + 56) + 1328);
  v14 = sub_1C554C050(v12, v7);
  v16 = v15 != 0;
  v17 = v14 < 0x100;
  v18 = v16 && v17;
  if (v16 && v17)
    v19 = 235;
  else
    v19 = 241;
  v20 = sub_1C4885524(35, v19, v13);
  v21 = *(_QWORD *)(a2 + 24);
  v52[4] = 0;
  v22 = *(_QWORD *)(v21 + 32);
  v51[0] = (uint64_t)&off_1E816EC08;
  v51[1] = v22;
  v51[3] = *(_QWORD *)(v22 + 40);
  v51[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v22 + 16) + 104))(*(_QWORD *)(v22 + 16));
  v23 = *(unsigned __int8 **)(a2 + 24);
  v52[2] = (unsigned __int8 *)a2;
  v52[3] = 0;
  v52[0] = 0;
  v52[1] = v23;
  if ((unsigned __int8 **)(a2 + 56) != v52)
  {
    v24 = *(unsigned __int8 **)(a2 + 56);
    v52[0] = v24;
    if (v24)
      llvm::MetadataTracking::track((uint64_t)v52, v24, 2);
  }
  v53 = &off_1E7FA5F48;
  LODWORD(v54) = 2;
  v49 = (llvm::MachineFunction *)sub_1C5548620(v51, v20, (uint64_t *)&v53, 1, 0, 0, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
  v50 = v25;
  LODWORD(v53) = 1;
  v54 = 0;
  v55 = 0;
  llvm::MachineInstr::addOperand(v25, v49, (const llvm::MachineOperand *)&v53);
  v26 = *(_DWORD *)(*(_QWORD *)(v11 + 32) + 48);
  LODWORD(v53) = 5;
  v54 = 0;
  LODWORD(v55) = v26;
  llvm::MachineInstr::addOperand(v50, v49, (const llvm::MachineOperand *)&v53);
  LODWORD(v53) = 1;
  v54 = 0;
  v55 = a3 << 6;
  llvm::MachineInstr::addOperand(v50, v49, (const llvm::MachineOperand *)&v53);
  sub_1C48A81A8(a1, *(_QWORD *)(a2 + 32) + 64, (uint64_t)&v53);
  if (v56)
  {
    if ((_DWORD)v54)
    {
      v27 = v53;
      v28 = 32 * v54;
      while (1)
      {
        v29 = (_QWORD *)v27[3];
        if (!v29)
        {
          v60 = 0;
LABEL_54:
          sub_1C485C2F0();
        }
        if (v27 == v29)
        {
          v60 = &v57;
          (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)v27[3] + 24))(v27[3], &v57);
          v30 = (uint64_t)v60;
          if (!v60)
            goto LABEL_54;
        }
        else
        {
          v30 = (*(uint64_t (**)(_QWORD *))(*v29 + 16))(v29);
          v60 = (uint64_t *)v30;
          if (!v30)
            goto LABEL_54;
        }
        (*(void (**)(uint64_t, llvm::MachineFunction **))(*(_QWORD *)v30 + 48))(v30, &v49);
        v31 = v60;
        if (v60 == &v57)
          break;
        if (v60)
        {
          v32 = (void (**)(uint64_t *))(*v60 + 40);
LABEL_25:
          (*v32)(v31);
        }
        v27 += 4;
        v28 -= 32;
        if (!v28)
          goto LABEL_33;
      }
      v32 = (void (**)(uint64_t *))(v57 + 32);
      v31 = &v57;
      goto LABEL_25;
    }
  }
  else
  {
    v37 = v49;
    v36 = v50;
    if (v18)
    {
      LODWORD(v57) = 1;
      v58 = 0;
      v59 = v14;
    }
    else
    {
      v58 = 0;
      v59 = 0;
      LODWORD(v57) = 0;
      HIDWORD(v57) = v12;
      v60 = 0;
      llvm::MachineInstr::addOperand(v50, v49, (const llvm::MachineOperand *)&v57);
      v37 = v49;
      v36 = v50;
      LODWORD(v57) = 1;
      v58 = 0;
      v59 = 0;
    }
    llvm::MachineInstr::addOperand(v36, v37, (const llvm::MachineOperand *)&v57);
  }
LABEL_33:
  if (v56)
  {
    v38 = (char *)v53;
    if ((_DWORD)v54)
    {
      v39 = 32 * v54;
      while (1)
      {
        v40 = *(char **)&v38[v39 - 8];
        if (&v38[v39 - 32] == v40)
          break;
        if (v40)
        {
          v41 = 5;
          goto LABEL_40;
        }
LABEL_41:
        v39 -= 32;
        if (!v39)
        {
          v38 = (char *)v53;
          goto LABEL_43;
        }
      }
      v40 = &v38[v39 - 32];
      v41 = 4;
LABEL_40:
      (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
      goto LABEL_41;
    }
LABEL_43:
    if (v38 != (char *)&v55)
      free(v38);
  }
  v42 = v50;
  if (a3)
  {
    v43 = *((_QWORD *)v50 + 4);
    v44 = *(_DWORD *)(v43 + 176);
    v45 = (v44 >> 6) & 7;
    v46 = v45 >= a3;
    v47 = v45 - a3;
    if (!v46)
    {
      v33 = 0;
      LOBYTE(v34) = 0;
      v35 = 0;
      goto LABEL_50;
    }
    *(_QWORD *)(v43 + 176) = v44 & 0xFFFFFE3F | (v47 << 6);
  }
  sub_1C554AE8C(v42, *(_QWORD *)(a1 + 72), *(_QWORD **)(a1 + 80));
  v34 = *(_DWORD *)(*((_QWORD *)v50 + 4) + 4);
  v35 = v34 & 0xFFFFFF00;
  v33 = 0x100000000;
LABEL_50:
  v51[0] = (uint64_t)&off_1E816EC08;
  if (v52[0])
    llvm::MetadataTracking::untrack((uint64_t)v52, v52[0]);
  return v33 & 0x100000000 | v35 | v34;
}

uint64_t sub_1C48B1970(_QWORD *a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  const char *v20;
  int v21;
  __int16 ***v22;
  unsigned int IncompleteVirtualRegister;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  llvm::MachineInstr *v29;
  llvm::MachineFunction *v30;
  llvm::MachineInstr *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37[4];
  unsigned __int8 *v38[5];
  unint64_t v39;
  unsigned int v40[30];
  unsigned int v41[30];
  llvm::MachineFunction *v42;
  llvm::MachineInstr *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 40);
  v10 = (unsigned __int8 *)(v8 + 32);
  v11 = (unsigned __int8 *)(v8 + 64);
  v12 = *(unsigned int *)(v8 + 36);
  if ((v12 & 0x80000000) != 0)
    v13 = (uint64_t *)(v9[3] + 16 * (v12 & 0x7FFFFFFF) + 8);
  else
    v13 = (uint64_t *)(v9[34] + 8 * v12);
  v14 = *v13;
  if (v14)
  {
    if ((*(_BYTE *)(v14 + 3) & 1) != 0 || (v14 = *(_QWORD *)(v14 + 24)) != 0 && (*(_BYTE *)(v14 + 3) & 1) != 0)
    {
      v36 = *(_QWORD *)(v14 + 8);
      if (v36)
      {
        if (**(_WORD **)(v36 + 16) == 178)
          llvm::MachineOperand::setReg((uint64_t)v10, *(_DWORD *)(*(_QWORD *)(v36 + 32) + 36));
      }
    }
  }
  sub_1C48AA43C((uint64_t)v41, (uint64_t)v9, a1[10], a1[11], v10, 0, 0, 0, 0);
  sub_1C48AA43C((uint64_t)v40, (uint64_t)v9, a1[10], a1[11], v11, 0, 0, 0, 0);
  v15 = 257;
  if (a3)
    v15 = 129;
  v39 = v15;
  v16 = 1;
  if (v41[22] != 16)
    v16 = 2;
  if ((int)v41[20] <= 3)
    v17 = v16;
  else
    v17 = 0;
  if (a4)
    v18 = 29;
  else
    v18 = 28;
  v19 = sub_1C4885524(v18, dword_1C646B4B4[6 * a3 + 2 * v17 + ((signed int)v40[20] < 4)], (_BYTE *)(a1[7] + 1328));
  v21 = sub_1C4825F50(&v39);
  if ((_DWORD)v20 == 1)
  if (v21 > 111)
  {
    if (v21 <= 191)
    {
      if (v21 == 112)
      {
        v22 = (__int16 ***)&off_1E7FA6060;
      }
      else if (v21 == 128)
      {
        v22 = (__int16 ***)&off_1E7FA6098;
      }
      else
      {
        v22 = (__int16 ***)&off_1E7FA60D0;
      }
    }
    else if (v21 > 287)
    {
      if (v21 == 288)
        v22 = (__int16 ***)&off_1E7FA6178;
      else
        v22 = (__int16 ***)&off_1E7FA61B0;
    }
    else if (v21 == 192)
    {
      v22 = (__int16 ***)&off_1E7FA6108;
    }
    else
    {
      v22 = (__int16 ***)&off_1E7FA6140;
    }
  }
  else if (v21 <= 47)
  {
    v22 = &off_1E7FA5F10;
    if (v21 != 1 && v21 != 16)
      v22 = &off_1E7FA5F48;
  }
  else if (v21 > 79)
  {
    if (v21 == 80)
      v22 = (__int16 ***)&off_1E7FA6028;
    else
      v22 = (__int16 ***)&off_1E7FA5FB8;
  }
  else if (v21 == 48)
  {
    v22 = (__int16 ***)&off_1E7FA5FF0;
  }
  else
  {
    v22 = (__int16 ***)&off_1E7FA6488;
  }
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v9, "", 0);
  *(_QWORD *)(v9[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v22;
  v24 = v9[1];
  if (v24)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 24))(v24, IncompleteVirtualRegister);
  v25 = *(_QWORD *)(a2 + 24);
  v38[4] = 0;
  v26 = *(_QWORD *)(v25 + 32);
  v37[0] = (uint64_t)&off_1E816EC08;
  v37[1] = v26;
  v37[3] = *(_QWORD *)(v26 + 40);
  v37[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v26 + 16) + 104))(*(_QWORD *)(v26 + 16));
  v27 = *(unsigned __int8 **)(a2 + 24);
  v38[2] = (unsigned __int8 *)a2;
  v38[3] = 0;
  v38[0] = 0;
  v38[1] = v27;
  if ((unsigned __int8 **)(a2 + 56) != v38)
  {
    v28 = *(unsigned __int8 **)(a2 + 56);
    v38[0] = v28;
    if (v28)
      llvm::MetadataTracking::track((uint64_t)v38, v28, 2);
  }
  LODWORD(v45) = IncompleteVirtualRegister;
  v46 = 1;
  v30 = (llvm::MachineFunction *)sub_1C5548620(v37, v19, &v45, 1, 0, 0, 0);
  v31 = v29;
  v32 = 4096;
  LODWORD(v42) = 1;
  if (!a3)
    v32 = 0;
  v43 = 0;
  v44 = v32;
  llvm::MachineInstr::addOperand(v29, v30, (const llvm::MachineOperand *)&v42);
  v42 = v30;
  v43 = v31;
  v33 = operator new(0x30uLL);
  *v33 = &off_1E7FA16A0;
  v33[1] = sub_1C48ABC08;
  v33[2] = 0;
  v33[3] = a1;
  v33[4] = v9;
  *((_DWORD *)v33 + 10) = 0;
  *((_BYTE *)v33 + 44) = 1;
  sub_1C48B7DE4(v41, (uint64_t)v33);
  (*(void (**)(_QWORD *))(*v33 + 40))(v33);
  v34 = operator new(0x30uLL);
  *v34 = &off_1E7FA16A0;
  v34[1] = sub_1C48ABC08;
  v34[2] = 0;
  v34[3] = a1;
  v34[4] = v9;
  *((_DWORD *)v34 + 10) = 0;
  *((_BYTE *)v34 + 44) = 1;
  sub_1C48B7DE4(v40, (uint64_t)v34);
  (*(void (**)(_QWORD *))(*v34 + 40))(v34);
  sub_1C48B7F84(&v42, (uint64_t)v41);
  sub_1C48B7F84(&v42, (uint64_t)v40);
  sub_1C554AE8C(v31, a1[9], (_QWORD *)a1[10]);
  v37[0] = (uint64_t)&off_1E816EC08;
  if (v38[0])
    llvm::MetadataTracking::untrack((uint64_t)v38, v38[0]);
  return IncompleteVirtualRegister | 0x100000000;
}

BOOL sub_1C48B1E28(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  unsigned __int8 *v20;
  uint64_t (***v21)();
  _BOOL8 v22;
  uint64_t (***v23)();
  uint64_t v24;
  uint64_t v25;
  int i;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int j;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  uint64_t *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  llvm::MachineFunction *v64;
  unint64_t *v65;
  unint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int IncompleteVirtualRegister;
  uint64_t v73;
  uint64_t v74;
  llvm::MachineFunction *v75;
  unint64_t *v76;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  llvm::MachineFunction *v87;
  unint64_t *v88;
  unint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  llvm::MachineFunction *v99;
  unint64_t *v100;
  unint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  llvm::MachineFunction *v123;
  unint64_t *v124;
  unint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  _BYTE *v135;
  unsigned int v136;
  uint64_t v137;
  llvm::MachineFunction *v138;
  unint64_t *v139;
  unint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  __int16 v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t (**v149)();
  const char *v150;
  int v151;
  __int16 ***v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 *v165;
  unsigned int v166;
  uint64_t v167;
  llvm::MachineFunction *v168;
  unint64_t *v169;
  unint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned int v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unsigned int v185;
  uint64_t v186;
  llvm::MachineFunction *v187;
  unint64_t *v188;
  unint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t *v203;
  int v204;
  uint64_t v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  unint64_t v210;
  uint64_t v211;
  char v212;
  int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int8 *v217;
  uint64_t v218;
  llvm::MachineFunction *v219;
  unint64_t *v220;
  unint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  llvm::MachineFunction *v230;
  unint64_t *v231;
  unint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  int v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  llvm::MachineFunction *v242;
  unint64_t *v243;
  unint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  int v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  llvm::MachineFunction *v254;
  unint64_t *v255;
  unint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  int v262;
  uint64_t v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  uint64_t v276;
  llvm::MachineFunction *v277;
  unint64_t *v278;
  unint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  int v285;
  int v286;
  int v287;
  int v288;
  uint64_t v289;
  unsigned __int8 *v290;
  uint64_t v291;
  uint64_t v292;
  unsigned __int8 *v293;
  uint64_t v294;
  llvm::MachineFunction *v295;
  unint64_t *v296;
  unint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  int v303;
  int v304;
  int v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  unsigned __int8 *v309;
  uint64_t v310;
  uint64_t v311;
  llvm::MachineFunction *v312;
  unint64_t *v313;
  unint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  int v320;
  int v321;
  int v322;
  uint64_t v323;
  _BYTE *v324;
  unsigned int v325;
  uint64_t v326;
  llvm::MachineFunction *v327;
  unint64_t *v328;
  unint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  __int16 v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t (**v338)();
  const char *v339;
  int v340;
  __int16 ***v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  char v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t *v367;
  unint64_t v368;
  uint64_t v369;
  char v370;
  uint64_t v371;
  uint64_t *v372;
  unsigned int v373;
  uint64_t v374;
  uint64_t (**v375)();
  int v376;
  int v377;
  unsigned int v378;
  uint64_t v379;
  unsigned int v380;
  uint64_t v381;
  unsigned int v382;
  unsigned int v383;
  int v384;
  int v385;
  unsigned int v386;
  uint64_t v387;
  unsigned int v388;
  int v389;
  uint64_t v390;
  llvm::MachineInstr *v391;
  llvm::MachineInstr *v392;
  llvm::MachineFunction *v393;
  unint64_t v394;
  int v395;
  int v396;
  uint64_t v397;
  int v398;
  int v399;
  unsigned __int16 v400;
  char v401;
  char v402;
  unsigned __int16 v403;
  char v404;
  BOOL v405;
  llvm::MachineFunction *v407;
  llvm::MachineInstr *v408;
  llvm::MachineInstr *v409;
  uint64_t v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  llvm::MachineFunction *v416;
  llvm::MachineInstr *v417;
  llvm::MachineInstr *v418;
  uint64_t v419;
  char v420;
  char v421;
  int v422;
  char v423;
  int v424;
  int v425;
  int v426;
  uint64_t v427;
  char v428;
  char v429;
  uint64_t v430;
  char v431;
  char v432;
  uint64_t v433;
  char v434;
  int v435;
  unsigned __int8 v436;
  uint64_t v437;
  BOOL v438;
  int v439;
  BOOL v440;
  int v441;
  unsigned int v442;
  int v443;
  int v444;
  uint64_t v445;
  llvm::MachineFunction *v446;
  unint64_t *v447;
  unint64_t *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t *v479;
  uint64_t v480;
  uint64_t v481;
  int v482;
  int v483;
  int v484;
  unsigned int v485;
  uint64_t v486;
  unsigned int v487;
  int v488;
  int v489;
  uint64_t v490;
  unsigned __int8 v491;
  uint64_t v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t *v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t *v575;
  uint64_t v576;
  uint64_t v577;
  int v578;
  int v579;
  int v580;
  unsigned int v581;
  uint64_t v582;
  unsigned int v583;
  int v584;
  int v585;
  uint64_t v586;
  unsigned int v587;
  uint64_t v588;
  int v589;
  unsigned int v590;
  int v591;
  _BOOL4 v592;
  uint64_t v593;
  int v594;
  char v595;
  uint64_t v596;
  uint64_t v597;
  unsigned __int8 *v598;
  uint64_t v599;
  llvm::MachineFunction *v600;
  unint64_t *v601;
  unint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  uint64_t v609;
  int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t *v615;
  uint64_t v616;
  uint64_t v617;
  int v618;
  int v619;
  int v620;
  unsigned int v621;
  uint64_t v622;
  unsigned int v623;
  int v624;
  _BOOL4 v625;
  uint64_t v626;
  int v627;
  int v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unsigned __int8 *v632;
  llvm::MachineFunction *v633;
  llvm::MachineInstr *v634;
  uint64_t v635;
  uint64_t v636;
  int v637;
  int v638;
  int v639;
  int v640;
  unsigned int v641;
  uint64_t v642;
  unsigned int v643;
  int v644;
  int v645;
  uint64_t v646;
  unsigned int v647;
  uint64_t v648;
  int v649;
  unsigned int v650;
  _BOOL4 v651;
  uint64_t v652;
  int v653;
  unint64_t v654;
  unsigned int v655;
  int v656;
  int v657;
  uint64_t v658;
  int v659;
  char *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  char v664;
  uint64_t v665;
  unsigned int v666;
  void *v667;
  uint64_t v668;
  char v669;
  uint64_t v670;
  int v671;
  const char *v672;
  uint64_t v673;
  unint64_t v674;
  uint64_t (**v675)();
  uint64_t v676;
  char v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  unint64_t *v681;
  int v682;
  int v683;
  uint64_t v684;
  char v685;
  uint64_t v686;
  int v687;
  int v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  _QWORD v693[4];
  uint64_t (**v694)();
  __int128 v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  void (**v699)();
  _QWORD *v700;
  _QWORD *v701;
  uint64_t v702;
  int v703;
  _QWORD v704[6];
  void *v705;
  uint64_t v706;
  _BYTE v707[32];
  uint64_t v708;
  uint64_t v709;
  uint64_t (***v710)();
  _BYTE v711[24];
  __int128 v712;
  _QWORD v713[5];
  __int128 v714;
  int v715;
  __int128 v716;
  int v717;
  __int128 v718;
  int v719;
  __int128 v720;
  int v721;
  __int128 v722;
  int v723;
  __int128 v724;
  int v725;
  _BYTE *v726;
  uint64_t v727;
  _BYTE v728[64];
  _BYTE *v729;
  uint64_t v730;
  _BYTE v731[48];
  int v732;
  __int128 v733;
  int v734;
  __int128 v735;
  int v736;
  _BYTE *v737;
  uint64_t v738;
  _BYTE v739[208];
  __int128 v740;
  uint64_t v741;
  int v742;
  _BYTE *v743;
  _BYTE *v744;
  uint64_t v745;
  int v746;
  _BYTE v747[32];
  __int128 v748;
  uint64_t v749;
  unsigned int *v750;
  uint64_t v751;
  unsigned int v752;
  uint64_t v753;
  int v754;
  uint64_t v755;
  int v756;
  uint64_t (**v757)(llvm::MachineFunction::Delegate *__hidden);
  void (**v758)();
  _BYTE *v759;
  void *v760;
  uint64_t v761;
  int v762;
  _BYTE v763[32];
  void *v764;
  uint64_t v765;
  _QWORD v766[4];
  void *v767;
  uint64_t v768;
  _BYTE v769[64];
  _QWORD *v770;
  unint64_t v771;
  unsigned int v772;
  void *v773[2];
  _BYTE v774[32];
  _QWORD *v775;
  uint64_t v776;
  unsigned int v777;
  uint64_t (**v778)();
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;

  v782 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(*(_QWORD *)(a2 + 24) + 32);
  v5 = v4[5];
  v6 = *(_BYTE **)(a1 + 56);
  v7 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(unsigned __int8 **)(a2 + 32);
    while (1)
    {
      v10 = *v9;
      v9 += 32;
      if (v10 == 17)
        break;
      if (v7 == ++v8)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    LODWORD(v8) = -1;
  }
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v8 + 16);
  v773[0] = v774;
  v773[1] = (void *)0x400000000;
  v777 = 8;
  v12 = operator new(0x80uLL, (std::align_val_t)8uLL);
  v775 = v12;
  v776 = 0;
  if (v777)
  {
    v13 = 16 * v777;
    do
    {
      *v12 = -4096;
      v12 += 2;
      v13 -= 16;
    }
    while (v13);
  }
  v767 = v769;
  v768 = 0x800000000;
  v772 = 16;
  v14 = operator new(0x100uLL, (std::align_val_t)8uLL);
  v770 = v14;
  v771 = 0;
  if (v772)
  {
    v15 = 16 * v772;
    do
    {
      *v14 = -4096;
      v14 += 2;
      v15 -= 16;
    }
    while (v15);
  }
  v700 = v704;
  v701 = v704;
  v702 = 4;
  v703 = 0;
  v699 = (void (**)())&off_1E7FA0F60;
  v704[4] = v773;
  v704[5] = &v767;
  v759 = v763;
  v760 = v763;
  v761 = 4;
  v762 = 0;
  v757 = &off_1E7FA1778;
  v758 = (void (**)())&unk_1E7FA17D0;
  v764 = v766;
  v766[0] = &v699;
  v765 = 0x400000001;
  v16 = *(_QWORD *)(a2 + 24);
  v698 = 0u;
  v697 = 0u;
  v696 = 0u;
  v695 = 0u;
  v17 = *(_QWORD *)(v16 + 32);
  v18 = *(_QWORD *)(v17 + 40);
  v694 = &off_1E816EC08;
  *(_QWORD *)&v695 = v17;
  v696 = v18;
  *((_QWORD *)&v695 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 16) + 104))(*(_QWORD *)(v17 + 16));
  *(_QWORD *)v711 = 0;
  *((_QWORD *)&v697 + 1) = a2;
  *(_QWORD *)&v698 = 0;
  *(_QWORD *)&v697 = *(_QWORD *)(a2 + 24);
  v19 = (_OWORD *)(a2 + 56);
  if ((__int128 *)(a2 + 56) != (__int128 *)((char *)&v696 + 8))
  {
    v20 = *(unsigned __int8 **)v19;
    *((_QWORD *)&v696 + 1) = v20;
    if (v20)
      llvm::MetadataTracking::track((uint64_t)&v696 + 8, v20, 2);
  }
  *(_QWORD *)&v698 = &v699;
  v693[0] = &v757;
  v693[1] = &v694;
  v693[2] = v773;
  v693[3] = &v767;
  if ((v11 - 1282) < 0x190)
  {
    v778 = &off_1E7FA0FA0;
    *(_QWORD *)&v691 = &off_1E7FA1160;
    *(_QWORD *)&v689 = &off_1E7FA12F8;
    if (*(_BYTE *)(a1 + 98))
    {
      v21 = (uint64_t (***)())&v691;
    }
    else
    {
      v21 = (uint64_t (***)())&v689;
      if (!*(_BYTE *)(a1 + 99) && !*(_BYTE *)(a1 + 101))
        v21 = &v778;
    }
    memset((char *)&v713[1] + 4, 0, 24);
    v714 = 0u;
    v716 = 0u;
    v715 = 0;
    v717 = 0;
    v718 = 0u;
    v720 = 0u;
    v719 = 0;
    v721 = 0;
    v722 = 0u;
    v723 = 0;
    v725 = 0;
    v724 = 0u;
    v726 = v728;
    v727 = 0x800000000;
    v729 = v731;
    v730 = 0x600000000;
    v732 = 0;
    v733 = 0u;
    v734 = 0;
    v736 = 0;
    v735 = 0u;
    v737 = v739;
    v738 = 0x3200000000;
    v740 = 0u;
    v741 = 0;
    v742 = 0;
    v743 = v747;
    v744 = v747;
    v745 = 4;
    v746 = 0;
    v748 = 0u;
    v749 = 0;
    v750 = &v752;
    v751 = 0;
    v752 = 0x80000000;
    v754 = 1;
    v753 = 0;
    v756 = 1;
    v755 = 0;
    v24 = *(_QWORD *)(a1 + 72);
    v25 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)v707 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)&v707[8] = a2;
    *(_QWORD *)&v707[16] = v4;
    *(_QWORD *)&v707[24] = v24;
    v708 = v5;
    v709 = v25;
    v710 = &v694;
    v705 = &off_1E7FA1490;
    v706 = (uint64_t)v21;
    v4[91] = (uint64_t)&v757;
    v22 = 0;
    if (!sub_1C48BBDAC(&v705, a2, v11, v4[43], 3))
      goto LABEL_79;
    sub_1C48BC758(v693);
    for (i = v771; (_DWORD)v771; i = v771)
    {
      v27 = v768;
      do
        v28 = *((_QWORD *)v767 + --v27);
      while (!v28);
      LODWORD(v768) = v27;
      if (v772)
      {
        LODWORD(v29) = (v772 - 1) & ((v28 >> 4) ^ (v28 >> 9));
        v30 = &v770[2 * v29];
        v31 = *v30;
        if (v28 == *v30)
        {
LABEL_35:
          *v30 = -8192;
          v771 = __PAIR64__(HIDWORD(v771), i - 1) + 0x100000000;
        }
        else
        {
          v32 = 1;
          while (v31 != -4096)
          {
            v33 = v29 + v32++;
            v29 = v33 & (v772 - 1);
            v31 = v770[2 * v29];
            if (v28 == v31)
            {
              v30 = &v770[2 * v29];
              goto LABEL_35;
            }
          }
        }
      }
      if (sub_1C554B164(v28, v5))
      {
        v34 = v28;
        if ((*(_BYTE *)v28 & 4) == 0)
        {
          v34 = v28;
          if ((*(_WORD *)(v28 + 44) & 8) != 0)
          {
            v34 = v28;
            do
              v34 = *(_QWORD *)(v34 + 8);
            while ((*(_WORD *)(v34 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v28 + 24) + 40, v28, *(_QWORD *)(v34 + 8));
      }
      else if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v28))
      {
        goto LABEL_75;
      }
    }
    v35 = *(_QWORD *)(a2 + 24);
    v36 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v36 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v36 = a2;
        do
          v36 = *(_QWORD *)(v36 + 8);
        while ((*(_WORD *)(v36 + 44) & 8) != 0);
      }
    }
LABEL_78:
    sub_1C487FE80(v35 + 40, a2, *(_QWORD *)(v36 + 8));
    v22 = 1;
LABEL_79:
    v4[91] = 0;
    sub_1C48C0B5C((uint64_t)v711);
    goto LABEL_80;
  }
  v22 = 0;
  if (v11 <= 2110)
  {
    if ((v11 - 1682) >= 0x8C)
    {
      switch(v11)
      {
        case 1271:
          if (!v6[1725])
            goto LABEL_423;
          v60 = *(_QWORD *)(a2 + 24);
          memset(v713, 0, 32);
          v712 = 0u;
          *(_OWORD *)&v711[8] = 0u;
          v61 = *(_QWORD *)(v60 + 32);
          *(_QWORD *)v711 = &off_1E816EC08;
          *(_QWORD *)&v711[8] = v61;
          *(_QWORD *)&v712 = *(_QWORD *)(v61 + 40);
          *(_QWORD *)&v711[16] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v61 + 16) + 104))(*(_QWORD *)(v61 + 16));
          v705 = 0;
          if (*((_QWORD *)&v712 + 1))
          {
            llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, *((unsigned __int8 **)&v712 + 1));
            *((_QWORD *)&v712 + 1) = v705;
            if (v705)
              llvm::MetadataTracking::retrack((uint64_t)&v705, (unsigned __int8 *)v705, (uint64_t)&v712 + 8);
          }
          else
          {
            *((_QWORD *)&v712 + 1) = 0;
          }
          v713[1] = a2;
          v713[2] = 0;
          v713[0] = *(_QWORD *)(a2 + 24);
          if (v19 != (__int128 *)((char *)&v712 + 8))
          {
            if (*((_QWORD *)&v712 + 1))
              llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, *((unsigned __int8 **)&v712 + 1));
            v62 = *(unsigned __int8 **)v19;
            *((_QWORD *)&v712 + 1) = v62;
            if (v62)
              llvm::MetadataTracking::track((uint64_t)&v712 + 8, v62, 2);
          }
          v64 = sub_1C55437B8(v711, 0xAu);
          v65 = (unint64_t *)v63;
          v66 = (unint64_t *)v713[1];
          v67 = *(_QWORD *)(v713[0] + 40);
          *(_QWORD *)(v63 + 24) = v67;
          v68 = *(_QWORD *)(v67 + 32);
          v69 = *(unsigned int *)(v63 + 40);
          if ((_DWORD)v69)
          {
            v536 = *(_QWORD *)(v63 + 32);
            v537 = *(_QWORD *)(v68 + 40);
            v538 = 32 * v69;
            do
            {
              if (!*(_BYTE *)v536)
              {
                v539 = *(unsigned int *)(v536 + 4);
                if ((int)v539 >= 0)
                  v540 = (uint64_t *)(*(_QWORD *)(v537 + 272) + 8 * v539);
                else
                  v540 = (uint64_t *)(*(_QWORD *)(v537 + 24) + 16 * (v539 & 0x7FFFFFFF) + 8);
                v541 = *v540;
                if (*v540)
                {
                  v542 = *(_QWORD *)(v541 + 16);
                  *(_QWORD *)(v541 + 16) = v536;
                  *(_QWORD *)(v536 + 16) = v542;
                  if ((*(_BYTE *)(v536 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v536 + 24) = v541;
                  }
                  else
                  {
                    *(_QWORD *)(v536 + 24) = 0;
                    v540 = (uint64_t *)(v542 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v536 + 16) = v536;
                  *(_QWORD *)(v536 + 24) = 0;
                }
                *v540 = v536;
              }
              v536 += 32;
              v538 -= 32;
            }
            while (v538);
          }
          v70 = *(_QWORD *)(v68 + 728);
          if (v70)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 24))(v70, v63);
          v71 = *v66 & 0xFFFFFFFFFFFFFFF8;
          *v65 = v71 | *v65 & 7;
          v65[1] = (unint64_t)v66;
          *(_QWORD *)(v71 + 8) = v65;
          *v66 = *v66 & 7 | (unint64_t)v65;
          if (v713[2])
            (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v65);
          IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v5, "", 0);
          *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7FA5F48;
          v73 = *(_QWORD *)(v5 + 8);
          if (v73)
            (*(void (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = IncompleteVirtualRegister;
          LODWORD(v705) = 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v64, (const llvm::MachineOperand *)&v705);
          v75 = sub_1C55437B8(v711, 0x13u);
          v76 = (unint64_t *)v74;
          v77 = (unint64_t *)v713[1];
          v78 = *(_QWORD *)(v713[0] + 40);
          *(_QWORD *)(v74 + 24) = v78;
          v79 = *(_QWORD *)(v78 + 32);
          v80 = *(unsigned int *)(v74 + 40);
          if ((_DWORD)v80)
          {
            v543 = *(_QWORD *)(v74 + 32);
            v544 = *(_QWORD *)(v79 + 40);
            v545 = 32 * v80;
            do
            {
              if (!*(_BYTE *)v543)
              {
                v546 = *(unsigned int *)(v543 + 4);
                if ((int)v546 >= 0)
                  v547 = (uint64_t *)(*(_QWORD *)(v544 + 272) + 8 * v546);
                else
                  v547 = (uint64_t *)(*(_QWORD *)(v544 + 24) + 16 * (v546 & 0x7FFFFFFF) + 8);
                v548 = *v547;
                if (*v547)
                {
                  v549 = *(_QWORD *)(v548 + 16);
                  *(_QWORD *)(v548 + 16) = v543;
                  *(_QWORD *)(v543 + 16) = v549;
                  if ((*(_BYTE *)(v543 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v543 + 24) = v548;
                  }
                  else
                  {
                    *(_QWORD *)(v543 + 24) = 0;
                    v547 = (uint64_t *)(v549 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v543 + 16) = v543;
                  *(_QWORD *)(v543 + 24) = 0;
                }
                *v547 = v543;
              }
              v543 += 32;
              v545 -= 32;
            }
            while (v545);
          }
          v81 = *(_QWORD *)(v79 + 728);
          if (v81)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v81 + 24))(v81, v74);
          v82 = *v77 & 0xFFFFFFFFFFFFFFF8;
          *v76 = v82 | *v76 & 7;
          v76[1] = (unint64_t)v77;
          *(_QWORD *)(v82 + 8) = v76;
          *v77 = *v77 & 7 | (unint64_t)v76;
          if (v713[2])
            (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v76);
          v83 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v5, "", 0);
          *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * (v83 & 0x7FFFFFFF)) = &off_1E7FA5F48;
          v84 = *(_QWORD *)(v5 + 8);
          if (v84)
            (*(void (**)(uint64_t))(*(_QWORD *)v84 + 24))(v84);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v83;
          LODWORD(v705) = 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v76, v75, (const llvm::MachineOperand *)&v705);
          v85 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 612);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v85;
          LODWORD(v705) = 6656;
          v681 = v76;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v76, v75, (const llvm::MachineOperand *)&v705);
          v87 = sub_1C55437B8(v711, 0x13u);
          v88 = (unint64_t *)v86;
          v89 = (unint64_t *)v713[1];
          v90 = *(_QWORD *)(v713[0] + 40);
          *(_QWORD *)(v86 + 24) = v90;
          v91 = *(_QWORD *)(v90 + 32);
          v92 = *(unsigned int *)(v86 + 40);
          if ((_DWORD)v92)
          {
            v550 = *(_QWORD *)(v86 + 32);
            v551 = *(_QWORD *)(v91 + 40);
            v552 = 32 * v92;
            do
            {
              if (!*(_BYTE *)v550)
              {
                v553 = *(unsigned int *)(v550 + 4);
                if ((int)v553 >= 0)
                  v554 = (uint64_t *)(*(_QWORD *)(v551 + 272) + 8 * v553);
                else
                  v554 = (uint64_t *)(*(_QWORD *)(v551 + 24) + 16 * (v553 & 0x7FFFFFFF) + 8);
                v555 = *v554;
                if (*v554)
                {
                  v556 = *(_QWORD *)(v555 + 16);
                  *(_QWORD *)(v555 + 16) = v550;
                  *(_QWORD *)(v550 + 16) = v556;
                  if ((*(_BYTE *)(v550 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v550 + 24) = v555;
                  }
                  else
                  {
                    *(_QWORD *)(v550 + 24) = 0;
                    v554 = (uint64_t *)(v556 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v550 + 16) = v550;
                  *(_QWORD *)(v550 + 24) = 0;
                }
                *v554 = v550;
              }
              v550 += 32;
              v552 -= 32;
            }
            while (v552);
          }
          v93 = *(_QWORD *)(v91 + 728);
          if (v93)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 24))(v93, v86);
          v94 = *v89 & 0xFFFFFFFFFFFFFFF8;
          *v88 = v94 | *v88 & 7;
          v88[1] = (unint64_t)v89;
          *(_QWORD *)(v94 + 8) = v88;
          *v89 = *v89 & 7 | (unint64_t)v88;
          if (v713[2])
            (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v88);
          v95 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v5, "", 0);
          *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * (v95 & 0x7FFFFFFF)) = &off_1E7FA5F48;
          v96 = *(_QWORD *)(v5 + 8);
          if (v96)
            (*(void (**)(uint64_t))(*(_QWORD *)v96 + 24))(v96);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v95;
          LODWORD(v705) = 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v87, (const llvm::MachineOperand *)&v705);
          v97 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 612);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v97;
          LODWORD(v705) = 6400;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v87, (const llvm::MachineOperand *)&v705);
          v99 = sub_1C55437B8(v711, 0x12u);
          v100 = (unint64_t *)v98;
          v101 = (unint64_t *)v713[1];
          v102 = *(_QWORD *)(v713[0] + 40);
          *(_QWORD *)(v98 + 24) = v102;
          v103 = *(_QWORD *)(v102 + 32);
          v104 = *(unsigned int *)(v98 + 40);
          if ((_DWORD)v104)
          {
            v557 = *(_QWORD *)(v98 + 32);
            v558 = *(_QWORD *)(v103 + 40);
            v559 = 32 * v104;
            do
            {
              if (!*(_BYTE *)v557)
              {
                v560 = *(unsigned int *)(v557 + 4);
                if ((int)v560 >= 0)
                  v561 = (uint64_t *)(*(_QWORD *)(v558 + 272) + 8 * v560);
                else
                  v561 = (uint64_t *)(*(_QWORD *)(v558 + 24) + 16 * (v560 & 0x7FFFFFFF) + 8);
                v562 = *v561;
                if (*v561)
                {
                  v563 = *(_QWORD *)(v562 + 16);
                  *(_QWORD *)(v562 + 16) = v557;
                  *(_QWORD *)(v557 + 16) = v563;
                  if ((*(_BYTE *)(v557 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v557 + 24) = v562;
                  }
                  else
                  {
                    *(_QWORD *)(v557 + 24) = 0;
                    v561 = (uint64_t *)(v563 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v557 + 16) = v557;
                  *(_QWORD *)(v557 + 24) = 0;
                }
                *v561 = v557;
              }
              v557 += 32;
              v559 -= 32;
            }
            while (v559);
          }
          v105 = *(_QWORD *)(v103 + 728);
          if (v105)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v105 + 24))(v105, v98);
          v106 = *v101 & 0xFFFFFFFFFFFFFFF8;
          *v100 = v106 | *v100 & 7;
          v100[1] = (unint64_t)v101;
          *(_QWORD *)(v106 + 8) = v100;
          *v101 = *v101 & 7 | (unint64_t)v100;
          if (v713[2])
            (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v100);
          v107 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v5, "", 0);
          *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * (v107 & 0x7FFFFFFF)) = &off_1E7FA61B0;
          v108 = *(_QWORD *)(v5 + 8);
          if (v108)
            (*(void (**)(uint64_t))(*(_QWORD *)v108 + 24))(v108);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v107;
          LODWORD(v705) = 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          v109 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 324);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v109;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 25;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          v110 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 356);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v110;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 26;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          v111 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 388);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v111;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 27;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          v112 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 420);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v112;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 28;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          v113 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 452);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v113;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 29;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          v114 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 484);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v114;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 30;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          v115 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 516);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v115;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 31;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          v116 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 548);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v116;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 32;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          v117 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 580);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v117;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 33;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          v118 = *(_DWORD *)(v88[4] + 4);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v118;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 34;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          v119 = *(_DWORD *)(v681[4] + 4);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v119;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 35;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          v120 = *(_DWORD *)(v65[4] + 4);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v120;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 36;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v99, (const llvm::MachineOperand *)&v705);
          v682 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v5, "", 0);
          *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * (v682 & 0x7FFFFFFF)) = &off_1E7FA6140;
          v121 = *(_QWORD *)(v5 + 8);
          if (v121)
            (*(void (**)(uint64_t))(*(_QWORD *)v121 + 24))(v121);
          v123 = sub_1C55437B8(v711, 0x31Bu);
          v124 = (unint64_t *)v122;
          v125 = (unint64_t *)v713[1];
          v126 = *(_QWORD *)(v713[0] + 40);
          *(_QWORD *)(v122 + 24) = v126;
          v127 = *(_QWORD *)(v126 + 32);
          v128 = *(unsigned int *)(v122 + 40);
          if ((_DWORD)v128)
          {
            v564 = *(_QWORD *)(v122 + 32);
            v565 = *(_QWORD *)(v127 + 40);
            v566 = 32 * v128;
            do
            {
              if (!*(_BYTE *)v564)
              {
                v567 = *(unsigned int *)(v564 + 4);
                if ((int)v567 >= 0)
                  v568 = (uint64_t *)(*(_QWORD *)(v565 + 272) + 8 * v567);
                else
                  v568 = (uint64_t *)(*(_QWORD *)(v565 + 24) + 16 * (v567 & 0x7FFFFFFF) + 8);
                v569 = *v568;
                if (*v568)
                {
                  v570 = *(_QWORD *)(v569 + 16);
                  *(_QWORD *)(v569 + 16) = v564;
                  *(_QWORD *)(v564 + 16) = v570;
                  if ((*(_BYTE *)(v564 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v564 + 24) = v569;
                  }
                  else
                  {
                    *(_QWORD *)(v564 + 24) = 0;
                    v568 = (uint64_t *)(v570 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v564 + 16) = v564;
                  *(_QWORD *)(v564 + 24) = 0;
                }
                *v568 = v564;
              }
              v564 += 32;
              v566 -= 32;
            }
            while (v566);
          }
          v129 = *(_QWORD *)(v127 + 728);
          if (v129)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v129 + 24))(v129, v122);
          v130 = *v125 & 0xFFFFFFFFFFFFFFF8;
          *v124 = v130 | *v124 & 7;
          v124[1] = (unint64_t)v125;
          *(_QWORD *)(v130 + 8) = v124;
          *v125 = *v125 & 7 | (unint64_t)v124;
          if (v713[2])
            (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v124);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v682;
          LODWORD(v705) = 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v124, v123, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v124, v123, (const llvm::MachineOperand *)&v705);
          v131 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 260);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v131;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v124, v123, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v124, v123, (const llvm::MachineOperand *)&v705);
          v132 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 292);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v132;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v124, v123, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v124, v123, (const llvm::MachineOperand *)&v705);
          v133 = *(_DWORD *)(v100[4] + 4);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v133;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v124, v123, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v124, v123, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v124, v123, (const llvm::MachineOperand *)&v705);
          sub_1C554AE8C(v124, *(_QWORD *)(a1 + 72), *(_QWORD **)(a1 + 80));
          v134 = 0;
          v705 = v707;
          *(_OWORD *)v707 = xmmword_1C646B4E4;
          *(_OWORD *)&v707[12] = *(__int128 *)((char *)&xmmword_1C646B4E4 + 12);
          v706 = 0x700000007;
          v135 = v707;
          do
          {
            v136 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v134 + 4);
            if (!sub_1C4778650(v5, v136))
            {
              v138 = sub_1C55437B8(v711, 0x13u);
              v139 = (unint64_t *)v137;
              v140 = (unint64_t *)v713[1];
              v141 = *(_QWORD *)(v713[0] + 40);
              *(_QWORD *)(v137 + 24) = v141;
              v142 = *(_QWORD *)(v141 + 32);
              v143 = *(unsigned int *)(v137 + 40);
              if ((_DWORD)v143)
              {
                v153 = *(_QWORD *)(v137 + 32);
                v154 = *(_QWORD *)(v142 + 40);
                v155 = 32 * v143;
                do
                {
                  if (!*(_BYTE *)v153)
                  {
                    v156 = *(unsigned int *)(v153 + 4);
                    if ((int)v156 >= 0)
                      v157 = (uint64_t *)(*(_QWORD *)(v154 + 272) + 8 * v156);
                    else
                      v157 = (uint64_t *)(*(_QWORD *)(v154 + 24) + 16 * (v156 & 0x7FFFFFFF) + 8);
                    v158 = *v157;
                    if (*v157)
                    {
                      v159 = *(_QWORD *)(v158 + 16);
                      *(_QWORD *)(v158 + 16) = v153;
                      *(_QWORD *)(v153 + 16) = v159;
                      if ((*(_BYTE *)(v153 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v153 + 24) = v158;
                      }
                      else
                      {
                        *(_QWORD *)(v153 + 24) = 0;
                        v157 = (uint64_t *)(v159 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v153 + 16) = v153;
                      *(_QWORD *)(v153 + 24) = 0;
                    }
                    *v157 = v153;
                  }
                  v153 += 32;
                  v155 -= 32;
                }
                while (v155);
              }
              v144 = *(_QWORD *)(v142 + 728);
              if (v144)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v144 + 24))(v144, v137);
              v145 = *v140 & 0xFFFFFFFFFFFFFFF8;
              *v139 = v145 | *v139 & 7;
              v139[1] = (unint64_t)v140;
              *(_QWORD *)(v145 + 8) = v139;
              *v140 = *v140 & 7 | (unint64_t)v139;
              if (v713[2])
                (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v139);
              v779 = 0;
              v780 = 0;
              v781 = 0;
              LODWORD(v778) = 0x1000000;
              HIDWORD(v778) = v136;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v139, v138, (const llvm::MachineOperand *)&v778);
              v146 = *(_DWORD *)v135;
              v779 = 0;
              v780 = 0;
              v781 = 0;
              LODWORD(v778) = (v146 & 0xFFF) << 8;
              HIDWORD(v778) = v682;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v139, v138, (const llvm::MachineOperand *)&v778);
              v147 = v136 & 0x7FFFFFFF;
              v148 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * v147);
              if (v148 < 8 || (v148 & 4) != 0)
              {
                if ((v136 & 0x80000000) != 0 && v147 < *(unsigned int *)(v5 + 432))
                  v149 = *(uint64_t (***)())(*(_QWORD *)(v5 + 424) + 8 * v147);
                else
                  v149 = 0;
                v778 = v149;
                v151 = sub_1C4825F50((unint64_t *)&v778);
                if ((_DWORD)v150 == 1)
                if (v151 > 111)
                {
                  if (v151 <= 191)
                  {
                    if (v151 == 112)
                    {
                      v152 = (__int16 ***)&off_1E7FA6060;
                    }
                    else if (v151 == 128)
                    {
                      v152 = (__int16 ***)&off_1E7FA6098;
                    }
                    else
                    {
                      v152 = (__int16 ***)&off_1E7FA60D0;
                    }
                  }
                  else if (v151 > 287)
                  {
                    if (v151 == 288)
                      v152 = (__int16 ***)&off_1E7FA6178;
                    else
                      v152 = (__int16 ***)&off_1E7FA61B0;
                  }
                  else if (v151 == 192)
                  {
                    v152 = (__int16 ***)&off_1E7FA6108;
                  }
                  else
                  {
                    v152 = (__int16 ***)&off_1E7FA6140;
                  }
                }
                else if (v151 <= 47)
                {
                  v152 = &off_1E7FA5F10;
                  if (v151 != 1 && v151 != 16)
                    v152 = &off_1E7FA5F48;
                }
                else if (v151 > 79)
                {
                  if (v151 == 80)
                    v152 = (__int16 ***)&off_1E7FA6028;
                  else
                    v152 = (__int16 ***)&off_1E7FA5FB8;
                }
                else if (v151 == 48)
                {
                  v152 = (__int16 ***)&off_1E7FA5FF0;
                }
                else
                {
                  v152 = (__int16 ***)&off_1E7FA6488;
                }
                v160 = (_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * v147);
                v161 = *v160 & 0xFFFFFFFFFFFFFFF8;
                if ((*v160 & 4) != 0)
                {
                  if (!v161
                    || ((*(_QWORD *)(*(_QWORD *)(v161 + 24)
                                   + (((unint64_t)*((unsigned __int16 *)*v152 + 12) >> 3) & 0x1FF8)) >> *((_WORD *)*v152 + 12)) & 1) != 0)
                  {
                    *v160 = v152;
                  }
                }
                else
                {
                  sub_1C51A3F30((_QWORD *)v5, v136, v161, (uint64_t)v152, 0);
                }
              }
            }
            v135 += 4;
            ++v134;
          }
          while (v135 != &v707[28]);
          v412 = *(_QWORD *)(a2 + 24);
          v413 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v413 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v413 = a2;
              do
                v413 = *(_QWORD *)(v413 + 8);
              while ((*(_WORD *)(v413 + 44) & 8) != 0);
            }
          }
          goto LABEL_491;
        case 1272:
          if (!v6[1725])
            goto LABEL_423;
          v307 = *(_QWORD *)(a2 + 24);
          memset(v713, 0, 32);
          v712 = 0u;
          *(_OWORD *)&v711[8] = 0u;
          v308 = *(_QWORD *)(v307 + 32);
          *(_QWORD *)v711 = &off_1E816EC08;
          *(_QWORD *)&v711[8] = v308;
          *(_QWORD *)&v712 = *(_QWORD *)(v308 + 40);
          *(_QWORD *)&v711[16] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v308 + 16) + 104))(*(_QWORD *)(v308 + 16));
          v705 = 0;
          if (*((_QWORD *)&v712 + 1))
          {
            llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, *((unsigned __int8 **)&v712 + 1));
            *((_QWORD *)&v712 + 1) = v705;
            if (v705)
              llvm::MetadataTracking::retrack((uint64_t)&v705, (unsigned __int8 *)v705, (uint64_t)&v712 + 8);
          }
          else
          {
            *((_QWORD *)&v712 + 1) = 0;
          }
          v713[1] = a2;
          v713[2] = 0;
          v713[0] = *(_QWORD *)(a2 + 24);
          if (v19 != (__int128 *)((char *)&v712 + 8))
          {
            if (*((_QWORD *)&v712 + 1))
              llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, *((unsigned __int8 **)&v712 + 1));
            v309 = *(unsigned __int8 **)v19;
            *((_QWORD *)&v712 + 1) = v309;
            if (v309)
              llvm::MetadataTracking::track((uint64_t)&v712 + 8, v309, 2);
          }
          v683 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v5, "", 0);
          *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * (v683 & 0x7FFFFFFF)) = &off_1E7FA6140;
          v310 = *(_QWORD *)(v5 + 8);
          if (v310)
            (*(void (**)(uint64_t))(*(_QWORD *)v310 + 24))(v310);
          v312 = sub_1C55437B8(v711, 0x31Cu);
          v313 = (unint64_t *)v311;
          v314 = (unint64_t *)v713[1];
          v315 = *(_QWORD *)(v713[0] + 40);
          *(_QWORD *)(v311 + 24) = v315;
          v316 = *(_QWORD *)(v315 + 32);
          v317 = *(unsigned int *)(v311 + 40);
          if ((_DWORD)v317)
          {
            v571 = *(_QWORD *)(v311 + 32);
            v572 = *(_QWORD *)(v316 + 40);
            v573 = 32 * v317;
            do
            {
              if (!*(_BYTE *)v571)
              {
                v574 = *(unsigned int *)(v571 + 4);
                if ((int)v574 >= 0)
                  v575 = (uint64_t *)(*(_QWORD *)(v572 + 272) + 8 * v574);
                else
                  v575 = (uint64_t *)(*(_QWORD *)(v572 + 24) + 16 * (v574 & 0x7FFFFFFF) + 8);
                v576 = *v575;
                if (*v575)
                {
                  v577 = *(_QWORD *)(v576 + 16);
                  *(_QWORD *)(v576 + 16) = v571;
                  *(_QWORD *)(v571 + 16) = v577;
                  if ((*(_BYTE *)(v571 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v571 + 24) = v576;
                  }
                  else
                  {
                    *(_QWORD *)(v571 + 24) = 0;
                    v575 = (uint64_t *)(v577 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v571 + 16) = v571;
                  *(_QWORD *)(v571 + 24) = 0;
                }
                *v575 = v571;
              }
              v571 += 32;
              v573 -= 32;
            }
            while (v573);
          }
          v318 = *(_QWORD *)(v316 + 728);
          if (v318)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v318 + 24))(v318, v311);
          v319 = *v314 & 0xFFFFFFFFFFFFFFF8;
          *v313 = v319 | *v313 & 7;
          v313[1] = (unint64_t)v314;
          *(_QWORD *)(v319 + 8) = v313;
          *v314 = *v314 & 7 | (unint64_t)v313;
          if (v713[2])
            (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v313);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v683;
          LODWORD(v705) = 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v313, v312, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v313, v312, (const llvm::MachineOperand *)&v705);
          v320 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 260);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v320;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v313, v312, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v313, v312, (const llvm::MachineOperand *)&v705);
          v321 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 292);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v321;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v313, v312, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v313, v312, (const llvm::MachineOperand *)&v705);
          v322 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 324);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v322;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v313, v312, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v313, v312, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v313, v312, (const llvm::MachineOperand *)&v705);
          sub_1C554AE8C(v313, *(_QWORD *)(a1 + 72), *(_QWORD **)(a1 + 80));
          v323 = 0;
          v705 = v707;
          *(_OWORD *)v707 = xmmword_1C646B4E4;
          *(_OWORD *)&v707[12] = *(__int128 *)((char *)&xmmword_1C646B4E4 + 12);
          v706 = 0x700000007;
          v324 = v707;
          do
          {
            v325 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v323 + 4);
            if (!sub_1C4778650(v5, v325))
            {
              v327 = sub_1C55437B8(v711, 0x13u);
              v328 = (unint64_t *)v326;
              v329 = (unint64_t *)v713[1];
              v330 = *(_QWORD *)(v713[0] + 40);
              *(_QWORD *)(v326 + 24) = v330;
              v331 = *(_QWORD *)(v330 + 32);
              v332 = *(unsigned int *)(v326 + 40);
              if ((_DWORD)v332)
              {
                v342 = *(_QWORD *)(v326 + 32);
                v343 = *(_QWORD *)(v331 + 40);
                v344 = 32 * v332;
                do
                {
                  if (!*(_BYTE *)v342)
                  {
                    v345 = *(unsigned int *)(v342 + 4);
                    if ((int)v345 >= 0)
                      v346 = (uint64_t *)(*(_QWORD *)(v343 + 272) + 8 * v345);
                    else
                      v346 = (uint64_t *)(*(_QWORD *)(v343 + 24) + 16 * (v345 & 0x7FFFFFFF) + 8);
                    v347 = *v346;
                    if (*v346)
                    {
                      v348 = *(_QWORD *)(v347 + 16);
                      *(_QWORD *)(v347 + 16) = v342;
                      *(_QWORD *)(v342 + 16) = v348;
                      if ((*(_BYTE *)(v342 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v342 + 24) = v347;
                      }
                      else
                      {
                        *(_QWORD *)(v342 + 24) = 0;
                        v346 = (uint64_t *)(v348 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v342 + 16) = v342;
                      *(_QWORD *)(v342 + 24) = 0;
                    }
                    *v346 = v342;
                  }
                  v342 += 32;
                  v344 -= 32;
                }
                while (v344);
              }
              v333 = *(_QWORD *)(v331 + 728);
              if (v333)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v333 + 24))(v333, v326);
              v334 = *v329 & 0xFFFFFFFFFFFFFFF8;
              *v328 = v334 | *v328 & 7;
              v328[1] = (unint64_t)v329;
              *(_QWORD *)(v334 + 8) = v328;
              *v329 = *v329 & 7 | (unint64_t)v328;
              if (v713[2])
                (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v328);
              v779 = 0;
              v780 = 0;
              v781 = 0;
              LODWORD(v778) = 0x1000000;
              HIDWORD(v778) = v325;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v327, (const llvm::MachineOperand *)&v778);
              v335 = *(_DWORD *)v324;
              v779 = 0;
              v780 = 0;
              v781 = 0;
              LODWORD(v778) = (v335 & 0xFFF) << 8;
              HIDWORD(v778) = v683;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v327, (const llvm::MachineOperand *)&v778);
              v336 = v325 & 0x7FFFFFFF;
              v337 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * v336);
              if (v337 < 8 || (v337 & 4) != 0)
              {
                if ((v325 & 0x80000000) != 0 && v336 < *(unsigned int *)(v5 + 432))
                  v338 = *(uint64_t (***)())(*(_QWORD *)(v5 + 424) + 8 * v336);
                else
                  v338 = 0;
                v778 = v338;
                v340 = sub_1C4825F50((unint64_t *)&v778);
                if ((_DWORD)v339 == 1)
                if (v340 > 111)
                {
                  if (v340 <= 191)
                  {
                    if (v340 == 112)
                    {
                      v341 = (__int16 ***)&off_1E7FA6060;
                    }
                    else if (v340 == 128)
                    {
                      v341 = (__int16 ***)&off_1E7FA6098;
                    }
                    else
                    {
                      v341 = (__int16 ***)&off_1E7FA60D0;
                    }
                  }
                  else if (v340 > 287)
                  {
                    if (v340 == 288)
                      v341 = (__int16 ***)&off_1E7FA6178;
                    else
                      v341 = (__int16 ***)&off_1E7FA61B0;
                  }
                  else if (v340 == 192)
                  {
                    v341 = (__int16 ***)&off_1E7FA6108;
                  }
                  else
                  {
                    v341 = (__int16 ***)&off_1E7FA6140;
                  }
                }
                else if (v340 <= 47)
                {
                  v341 = &off_1E7FA5F10;
                  if (v340 != 1 && v340 != 16)
                    v341 = &off_1E7FA5F48;
                }
                else if (v340 > 79)
                {
                  if (v340 == 80)
                    v341 = (__int16 ***)&off_1E7FA6028;
                  else
                    v341 = (__int16 ***)&off_1E7FA5FB8;
                }
                else if (v340 == 48)
                {
                  v341 = (__int16 ***)&off_1E7FA5FF0;
                }
                else
                {
                  v341 = (__int16 ***)&off_1E7FA6488;
                }
                v349 = (_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * v336);
                v350 = *v349 & 0xFFFFFFFFFFFFFFF8;
                if ((*v349 & 4) != 0)
                {
                  if (!v350
                    || ((*(_QWORD *)(*(_QWORD *)(v350 + 24)
                                   + (((unint64_t)*((unsigned __int16 *)*v341 + 12) >> 3) & 0x1FF8)) >> *((_WORD *)*v341 + 12)) & 1) != 0)
                  {
                    *v349 = v341;
                  }
                }
                else
                {
                  sub_1C51A3F30((_QWORD *)v5, v325, v350, (uint64_t)v341, 0);
                }
              }
            }
            v324 += 4;
            ++v323;
          }
          while (v324 != &v707[28]);
          v412 = *(_QWORD *)(a2 + 24);
          v413 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v413 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v413 = a2;
              do
                v413 = *(_QWORD *)(v413 + 8);
              while ((*(_WORD *)(v413 + 44) & 8) != 0);
            }
          }
LABEL_491:
          sub_1C487FE80(v412 + 40, a2, *(_QWORD *)(v413 + 8));
          if (v705 != v707)
            free(v705);
          *(_QWORD *)v711 = &off_1E816EC08;
          v290 = (unsigned __int8 *)*((_QWORD *)&v712 + 1);
          if (*((_QWORD *)&v712 + 1))
            goto LABEL_925;
          goto LABEL_975;
        case 1273:
          if (!v6[1725])
            goto LABEL_423;
          v215 = *(_QWORD *)(a2 + 24);
          memset(v713, 0, 32);
          v712 = 0u;
          *(_OWORD *)&v711[8] = 0u;
          v216 = *(_QWORD *)(v215 + 32);
          *(_QWORD *)v711 = &off_1E816EC08;
          *(_QWORD *)&v711[8] = v216;
          *(_QWORD *)&v712 = *(_QWORD *)(v216 + 40);
          *(_QWORD *)&v711[16] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v216 + 16) + 104))(*(_QWORD *)(v216 + 16));
          v705 = 0;
          if (*((_QWORD *)&v712 + 1))
          {
            llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, *((unsigned __int8 **)&v712 + 1));
            *((_QWORD *)&v712 + 1) = v705;
            if (v705)
              llvm::MetadataTracking::retrack((uint64_t)&v705, (unsigned __int8 *)v705, (uint64_t)&v712 + 8);
          }
          else
          {
            *((_QWORD *)&v712 + 1) = 0;
          }
          v713[1] = a2;
          v713[2] = 0;
          v713[0] = *(_QWORD *)(a2 + 24);
          if (v19 != (__int128 *)((char *)&v712 + 8))
          {
            if (*((_QWORD *)&v712 + 1))
              llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, *((unsigned __int8 **)&v712 + 1));
            v217 = *(unsigned __int8 **)v19;
            *((_QWORD *)&v712 + 1) = v217;
            if (v217)
              llvm::MetadataTracking::track((uint64_t)&v712 + 8, v217, 2);
          }
          v219 = sub_1C55437B8(v711, 0xAu);
          v220 = (unint64_t *)v218;
          v221 = (unint64_t *)v713[1];
          v222 = *(_QWORD *)(v713[0] + 40);
          *(_QWORD *)(v218 + 24) = v222;
          v223 = *(_QWORD *)(v222 + 32);
          v224 = *(unsigned int *)(v218 + 40);
          if ((_DWORD)v224)
          {
            v494 = *(_QWORD *)(v218 + 32);
            v495 = *(_QWORD *)(v223 + 40);
            v496 = 32 * v224;
            do
            {
              if (!*(_BYTE *)v494)
              {
                v497 = *(unsigned int *)(v494 + 4);
                if ((int)v497 >= 0)
                  v498 = (uint64_t *)(*(_QWORD *)(v495 + 272) + 8 * v497);
                else
                  v498 = (uint64_t *)(*(_QWORD *)(v495 + 24) + 16 * (v497 & 0x7FFFFFFF) + 8);
                v499 = *v498;
                if (*v498)
                {
                  v500 = *(_QWORD *)(v499 + 16);
                  *(_QWORD *)(v499 + 16) = v494;
                  *(_QWORD *)(v494 + 16) = v500;
                  if ((*(_BYTE *)(v494 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v494 + 24) = v499;
                  }
                  else
                  {
                    *(_QWORD *)(v494 + 24) = 0;
                    v498 = (uint64_t *)(v500 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v494 + 16) = v494;
                  *(_QWORD *)(v494 + 24) = 0;
                }
                *v498 = v494;
              }
              v494 += 32;
              v496 -= 32;
            }
            while (v496);
          }
          v225 = *(_QWORD *)(v223 + 728);
          if (v225)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v225 + 24))(v225, v218);
          v226 = *v221 & 0xFFFFFFFFFFFFFFF8;
          *v220 = v226 | *v220 & 7;
          v220[1] = (unint64_t)v221;
          *(_QWORD *)(v226 + 8) = v220;
          *v221 = *v221 & 7 | (unint64_t)v220;
          if (v713[2])
            (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v220);
          v227 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v5, "", 0);
          *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * (v227 & 0x7FFFFFFF)) = &off_1E7FA5F48;
          v228 = *(_QWORD *)(v5 + 8);
          if (v228)
            (*(void (**)(uint64_t))(*(_QWORD *)v228 + 24))(v228);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v227;
          LODWORD(v705) = 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v220, v219, (const llvm::MachineOperand *)&v705);
          v230 = sub_1C55437B8(v711, 0x13u);
          v231 = (unint64_t *)v229;
          v232 = (unint64_t *)v713[1];
          v233 = *(_QWORD *)(v713[0] + 40);
          *(_QWORD *)(v229 + 24) = v233;
          v234 = *(_QWORD *)(v233 + 32);
          v235 = *(unsigned int *)(v229 + 40);
          if ((_DWORD)v235)
          {
            v501 = *(_QWORD *)(v229 + 32);
            v502 = *(_QWORD *)(v234 + 40);
            v503 = 32 * v235;
            do
            {
              if (!*(_BYTE *)v501)
              {
                v504 = *(unsigned int *)(v501 + 4);
                if ((int)v504 >= 0)
                  v505 = (uint64_t *)(*(_QWORD *)(v502 + 272) + 8 * v504);
                else
                  v505 = (uint64_t *)(*(_QWORD *)(v502 + 24) + 16 * (v504 & 0x7FFFFFFF) + 8);
                v506 = *v505;
                if (*v505)
                {
                  v507 = *(_QWORD *)(v506 + 16);
                  *(_QWORD *)(v506 + 16) = v501;
                  *(_QWORD *)(v501 + 16) = v507;
                  if ((*(_BYTE *)(v501 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v501 + 24) = v506;
                  }
                  else
                  {
                    *(_QWORD *)(v501 + 24) = 0;
                    v505 = (uint64_t *)(v507 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v501 + 16) = v501;
                  *(_QWORD *)(v501 + 24) = 0;
                }
                *v505 = v501;
              }
              v501 += 32;
              v503 -= 32;
            }
            while (v503);
          }
          v236 = *(_QWORD *)(v234 + 728);
          if (v236)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v236 + 24))(v236, v229);
          v237 = *v232 & 0xFFFFFFFFFFFFFFF8;
          *v231 = v237 | *v231 & 7;
          v231[1] = (unint64_t)v232;
          *(_QWORD *)(v237 + 8) = v231;
          *v232 = *v232 & 7 | (unint64_t)v231;
          if (v713[2])
            (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v231);
          v238 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v5, "", 0);
          *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * (v238 & 0x7FFFFFFF)) = &off_1E7FA5F48;
          v239 = *(_QWORD *)(v5 + 8);
          if (v239)
            (*(void (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v238;
          LODWORD(v705) = 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v231, v230, (const llvm::MachineOperand *)&v705);
          v240 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 388);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v240;
          LODWORD(v705) = 6656;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v231, v230, (const llvm::MachineOperand *)&v705);
          v242 = sub_1C55437B8(v711, 0x13u);
          v243 = (unint64_t *)v241;
          v244 = (unint64_t *)v713[1];
          v245 = *(_QWORD *)(v713[0] + 40);
          *(_QWORD *)(v241 + 24) = v245;
          v246 = *(_QWORD *)(v245 + 32);
          v247 = *(unsigned int *)(v241 + 40);
          if ((_DWORD)v247)
          {
            v508 = *(_QWORD *)(v241 + 32);
            v509 = *(_QWORD *)(v246 + 40);
            v510 = 32 * v247;
            do
            {
              if (!*(_BYTE *)v508)
              {
                v511 = *(unsigned int *)(v508 + 4);
                if ((int)v511 >= 0)
                  v512 = (uint64_t *)(*(_QWORD *)(v509 + 272) + 8 * v511);
                else
                  v512 = (uint64_t *)(*(_QWORD *)(v509 + 24) + 16 * (v511 & 0x7FFFFFFF) + 8);
                v513 = *v512;
                if (*v512)
                {
                  v514 = *(_QWORD *)(v513 + 16);
                  *(_QWORD *)(v513 + 16) = v508;
                  *(_QWORD *)(v508 + 16) = v514;
                  if ((*(_BYTE *)(v508 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v508 + 24) = v513;
                  }
                  else
                  {
                    *(_QWORD *)(v508 + 24) = 0;
                    v512 = (uint64_t *)(v514 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v508 + 16) = v508;
                  *(_QWORD *)(v508 + 24) = 0;
                }
                *v512 = v508;
              }
              v508 += 32;
              v510 -= 32;
            }
            while (v510);
          }
          v248 = *(_QWORD *)(v246 + 728);
          if (v248)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v248 + 24))(v248, v241);
          v249 = *v244 & 0xFFFFFFFFFFFFFFF8;
          *v243 = v249 | *v243 & 7;
          v243[1] = (unint64_t)v244;
          *(_QWORD *)(v249 + 8) = v243;
          *v244 = *v244 & 7 | (unint64_t)v243;
          if (v713[2])
            (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v243);
          v250 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v5, "", 0);
          *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * (v250 & 0x7FFFFFFF)) = &off_1E7FA5F48;
          v251 = *(_QWORD *)(v5 + 8);
          if (v251)
            (*(void (**)(uint64_t))(*(_QWORD *)v251 + 24))(v251);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v250;
          LODWORD(v705) = 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v243, v242, (const llvm::MachineOperand *)&v705);
          v252 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 388);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v252;
          LODWORD(v705) = 6400;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v243, v242, (const llvm::MachineOperand *)&v705);
          v254 = sub_1C55437B8(v711, 0x12u);
          v255 = (unint64_t *)v253;
          v256 = (unint64_t *)v713[1];
          v257 = *(_QWORD *)(v713[0] + 40);
          *(_QWORD *)(v253 + 24) = v257;
          v258 = *(_QWORD *)(v257 + 32);
          v259 = *(unsigned int *)(v253 + 40);
          if ((_DWORD)v259)
          {
            v515 = *(_QWORD *)(v253 + 32);
            v516 = *(_QWORD *)(v258 + 40);
            v517 = 32 * v259;
            do
            {
              if (!*(_BYTE *)v515)
              {
                v518 = *(unsigned int *)(v515 + 4);
                if ((int)v518 >= 0)
                  v519 = (uint64_t *)(*(_QWORD *)(v516 + 272) + 8 * v518);
                else
                  v519 = (uint64_t *)(*(_QWORD *)(v516 + 24) + 16 * (v518 & 0x7FFFFFFF) + 8);
                v520 = *v519;
                if (*v519)
                {
                  v521 = *(_QWORD *)(v520 + 16);
                  *(_QWORD *)(v520 + 16) = v515;
                  *(_QWORD *)(v515 + 16) = v521;
                  if ((*(_BYTE *)(v515 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v515 + 24) = v520;
                  }
                  else
                  {
                    *(_QWORD *)(v515 + 24) = 0;
                    v519 = (uint64_t *)(v521 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v515 + 16) = v515;
                  *(_QWORD *)(v515 + 24) = 0;
                }
                *v519 = v515;
              }
              v515 += 32;
              v517 -= 32;
            }
            while (v517);
          }
          v260 = *(_QWORD *)(v258 + 728);
          if (v260)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v260 + 24))(v260, v253);
          v261 = *v256 & 0xFFFFFFFFFFFFFFF8;
          *v255 = v261 | *v255 & 7;
          v255[1] = (unint64_t)v256;
          *(_QWORD *)(v261 + 8) = v255;
          *v256 = *v256 & 7 | (unint64_t)v255;
          if (v713[2])
            (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v255);
          v262 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v5, "", 0);
          *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * (v262 & 0x7FFFFFFF)) = &off_1E7FA61B0;
          v263 = *(_QWORD *)(v5 + 8);
          if (v263)
            (*(void (**)(uint64_t))(*(_QWORD *)v263 + 24))(v263);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v262;
          LODWORD(v705) = 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          v264 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 100);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v264;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 25;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          v265 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 132);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v265;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 26;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          v266 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 164);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v266;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 27;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          v267 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 196);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v267;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 28;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          v268 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 228);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v268;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 29;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          v269 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 260);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v269;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 30;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          v270 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 292);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v270;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 31;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          v271 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 324);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v271;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 32;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          v272 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 356);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v272;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 33;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          v273 = *(_DWORD *)(v243[4] + 4);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v273;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 34;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          v274 = *(_DWORD *)(v231[4] + 4);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v274;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 35;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          v275 = *(_DWORD *)(v220[4] + 4);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v275;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 36;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v255, v254, (const llvm::MachineOperand *)&v705);
          v277 = sub_1C55437B8(v711, 0x31Du);
          v278 = (unint64_t *)v276;
          v279 = (unint64_t *)v713[1];
          v280 = *(_QWORD *)(v713[0] + 40);
          *(_QWORD *)(v276 + 24) = v280;
          v281 = *(_QWORD *)(v280 + 32);
          v282 = *(unsigned int *)(v276 + 40);
          if ((_DWORD)v282)
          {
            v522 = *(_QWORD *)(v276 + 32);
            v523 = *(_QWORD *)(v281 + 40);
            v524 = 32 * v282;
            do
            {
              if (!*(_BYTE *)v522)
              {
                v525 = *(unsigned int *)(v522 + 4);
                if ((int)v525 >= 0)
                  v526 = (uint64_t *)(*(_QWORD *)(v523 + 272) + 8 * v525);
                else
                  v526 = (uint64_t *)(*(_QWORD *)(v523 + 24) + 16 * (v525 & 0x7FFFFFFF) + 8);
                v527 = *v526;
                if (*v526)
                {
                  v528 = *(_QWORD *)(v527 + 16);
                  *(_QWORD *)(v527 + 16) = v522;
                  *(_QWORD *)(v522 + 16) = v528;
                  if ((*(_BYTE *)(v522 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v522 + 24) = v527;
                  }
                  else
                  {
                    *(_QWORD *)(v522 + 24) = 0;
                    v526 = (uint64_t *)(v528 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v522 + 16) = v522;
                  *(_QWORD *)(v522 + 24) = 0;
                }
                *v526 = v522;
              }
              v522 += 32;
              v524 -= 32;
            }
            while (v524);
          }
          v283 = *(_QWORD *)(v281 + 728);
          if (v283)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v283 + 24))(v283, v276);
          v284 = *v279 & 0xFFFFFFFFFFFFFFF8;
          *v278 = v284 | *v278 & 7;
          v278[1] = (unint64_t)v279;
          *(_QWORD *)(v284 + 8) = v278;
          *v279 = *v279 & 7 | (unint64_t)v278;
          if (v713[2])
            (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v278);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v278, v277, (const llvm::MachineOperand *)&v705);
          v285 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 420);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v285;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v278, v277, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v278, v277, (const llvm::MachineOperand *)&v705);
          v286 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v286;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v278, v277, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v278, v277, (const llvm::MachineOperand *)&v705);
          v287 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 68);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v287;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v278, v277, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v278, v277, (const llvm::MachineOperand *)&v705);
          v288 = *(_DWORD *)(v255[4] + 4);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v288;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v278, v277, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v278, v277, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v278, v277, (const llvm::MachineOperand *)&v705);
          v289 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v289 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v289 = a2;
              do
                v289 = *(_QWORD *)(v289 + 8);
              while ((*(_WORD *)(v289 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v289 + 8));
          *(_QWORD *)v711 = &off_1E816EC08;
          v290 = (unsigned __int8 *)*((_QWORD *)&v712 + 1);
          if (*((_QWORD *)&v712 + 1))
            goto LABEL_925;
          goto LABEL_975;
        case 1274:
          if (!v6[1725])
            goto LABEL_423;
          v291 = *(_QWORD *)(a2 + 24);
          memset(v713, 0, 32);
          v712 = 0u;
          *(_OWORD *)&v711[8] = 0u;
          v292 = *(_QWORD *)(v291 + 32);
          *(_QWORD *)v711 = &off_1E816EC08;
          *(_QWORD *)&v711[8] = v292;
          *(_QWORD *)&v712 = *(_QWORD *)(v292 + 40);
          *(_QWORD *)&v711[16] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v292 + 16) + 104))(*(_QWORD *)(v292 + 16));
          v705 = 0;
          if (*((_QWORD *)&v712 + 1))
          {
            llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, *((unsigned __int8 **)&v712 + 1));
            *((_QWORD *)&v712 + 1) = v705;
            if (v705)
              llvm::MetadataTracking::retrack((uint64_t)&v705, (unsigned __int8 *)v705, (uint64_t)&v712 + 8);
          }
          else
          {
            *((_QWORD *)&v712 + 1) = 0;
          }
          v713[1] = a2;
          v713[2] = 0;
          v713[0] = *(_QWORD *)(a2 + 24);
          if (v19 != (__int128 *)((char *)&v712 + 8))
          {
            if (*((_QWORD *)&v712 + 1))
              llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, *((unsigned __int8 **)&v712 + 1));
            v293 = *(unsigned __int8 **)v19;
            *((_QWORD *)&v712 + 1) = v293;
            if (v293)
              llvm::MetadataTracking::track((uint64_t)&v712 + 8, v293, 2);
          }
          v295 = sub_1C55437B8(v711, 0x31Eu);
          v296 = (unint64_t *)v294;
          v297 = (unint64_t *)v713[1];
          v298 = *(_QWORD *)(v713[0] + 40);
          *(_QWORD *)(v294 + 24) = v298;
          v299 = *(_QWORD *)(v298 + 32);
          v300 = *(unsigned int *)(v294 + 40);
          if ((_DWORD)v300)
          {
            v529 = *(_QWORD *)(v294 + 32);
            v530 = *(_QWORD *)(v299 + 40);
            v531 = 32 * v300;
            do
            {
              if (!*(_BYTE *)v529)
              {
                v532 = *(unsigned int *)(v529 + 4);
                if ((int)v532 >= 0)
                  v533 = (uint64_t *)(*(_QWORD *)(v530 + 272) + 8 * v532);
                else
                  v533 = (uint64_t *)(*(_QWORD *)(v530 + 24) + 16 * (v532 & 0x7FFFFFFF) + 8);
                v534 = *v533;
                if (*v533)
                {
                  v535 = *(_QWORD *)(v534 + 16);
                  *(_QWORD *)(v534 + 16) = v529;
                  *(_QWORD *)(v529 + 16) = v535;
                  if ((*(_BYTE *)(v529 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v529 + 24) = v534;
                  }
                  else
                  {
                    *(_QWORD *)(v529 + 24) = 0;
                    v533 = (uint64_t *)(v535 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v529 + 16) = v529;
                  *(_QWORD *)(v529 + 24) = 0;
                }
                *v533 = v529;
              }
              v529 += 32;
              v531 -= 32;
            }
            while (v531);
          }
          v301 = *(_QWORD *)(v299 + 728);
          if (v301)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v301 + 24))(v301, v294);
          v302 = *v297 & 0xFFFFFFFFFFFFFFF8;
          *v296 = v302 | *v296 & 7;
          v296[1] = (unint64_t)v297;
          *(_QWORD *)(v302 + 8) = v296;
          *v297 = *v297 & 7 | (unint64_t)v296;
          if (v713[2])
            (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v296);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v296, v295, (const llvm::MachineOperand *)&v705);
          v303 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 132);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v303;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v296, v295, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v296, v295, (const llvm::MachineOperand *)&v705);
          v304 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v304;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v296, v295, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v296, v295, (const llvm::MachineOperand *)&v705);
          v305 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 68);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v305;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v296, v295, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v296, v295, (const llvm::MachineOperand *)&v705);
          v306 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 100);
          v706 = 0;
          *(_OWORD *)v707 = 0uLL;
          HIDWORD(v705) = v306;
          LODWORD(v705) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v296, v295, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v296, v295, (const llvm::MachineOperand *)&v705);
          LODWORD(v705) = 1;
          v706 = 0;
          *(_QWORD *)v707 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v296, v295, (const llvm::MachineOperand *)&v705);
          v195 = *(_QWORD *)(a2 + 24);
          v196 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v196 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v196 = a2;
              do
                v196 = *(_QWORD *)(v196 + 8);
              while ((*(_WORD *)(v196 + 44) & 8) != 0);
            }
          }
          goto LABEL_346;
        default:
          goto LABEL_80;
      }
    }
    v778 = &off_1E7FA0FA0;
    *(_QWORD *)&v691 = &off_1E7FA1160;
    *(_QWORD *)&v689 = &off_1E7FA12F8;
    if (*(_BYTE *)(a1 + 98))
    {
      v23 = (uint64_t (***)())&v691;
    }
    else
    {
      v23 = (uint64_t (***)())&v689;
      if (!*(_BYTE *)(a1 + 99) && !*(_BYTE *)(a1 + 101))
        v23 = &v778;
    }
    memset((char *)&v713[1] + 4, 0, 24);
    v714 = 0u;
    v716 = 0u;
    v715 = 0;
    v717 = 0;
    v718 = 0u;
    v720 = 0u;
    v719 = 0;
    v721 = 0;
    v722 = 0u;
    v723 = 0;
    v725 = 0;
    v724 = 0u;
    v726 = v728;
    v727 = 0x800000000;
    v729 = v731;
    v730 = 0x600000000;
    v732 = 0;
    v733 = 0u;
    v734 = 0;
    v736 = 0;
    v735 = 0u;
    v737 = v739;
    v738 = 0x3200000000;
    v740 = 0u;
    v741 = 0;
    v742 = 0;
    v743 = v747;
    v744 = v747;
    v745 = 4;
    v746 = 0;
    v748 = 0u;
    v749 = 0;
    v750 = &v752;
    v751 = 0;
    v752 = 0x80000000;
    v754 = 1;
    v753 = 0;
    v756 = 1;
    v755 = 0;
    v37 = *(_QWORD *)(a1 + 72);
    v38 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)v707 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)&v707[8] = a2;
    *(_QWORD *)&v707[16] = v4;
    *(_QWORD *)&v707[24] = v37;
    v708 = v5;
    v709 = v38;
    v710 = &v694;
    v705 = &off_1E7FA1490;
    v706 = (uint64_t)v23;
    v4[91] = (uint64_t)&v757;
    v22 = 0;
    if (!sub_1C48BBDAC(&v705, a2, v11, v4[43], 4))
      goto LABEL_79;
    sub_1C48BC758(v693);
    for (j = v771; (_DWORD)v771; j = v771)
    {
      v40 = v768;
      do
        v41 = *((_QWORD *)v767 + --v40);
      while (!v41);
      LODWORD(v768) = v40;
      if (v772)
      {
        LODWORD(v42) = (v772 - 1) & ((v41 >> 4) ^ (v41 >> 9));
        v43 = &v770[2 * v42];
        v44 = *v43;
        if (v41 == *v43)
        {
LABEL_64:
          *v43 = -8192;
          v771 = __PAIR64__(HIDWORD(v771), j - 1) + 0x100000000;
        }
        else
        {
          v45 = 1;
          while (v44 != -4096)
          {
            v46 = v42 + v45++;
            v42 = v46 & (v772 - 1);
            v44 = v770[2 * v42];
            if (v41 == v44)
            {
              v43 = &v770[2 * v42];
              goto LABEL_64;
            }
          }
        }
      }
      if (sub_1C554B164(v41, v5))
      {
        v47 = v41;
        if ((*(_BYTE *)v41 & 4) == 0)
        {
          v47 = v41;
          if ((*(_WORD *)(v41 + 44) & 8) != 0)
          {
            v47 = v41;
            do
              v47 = *(_QWORD *)(v47 + 8);
            while ((*(_WORD *)(v47 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v41 + 24) + 40, v41, *(_QWORD *)(v47 + 8));
      }
      else if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v41))
      {
LABEL_75:
        v22 = 0;
        goto LABEL_79;
      }
    }
    v35 = *(_QWORD *)(a2 + 24);
    v36 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v36 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v36 = a2;
        do
          v36 = *(_QWORD *)(v36 + 8);
        while ((*(_WORD *)(v36 + 44) & 8) != 0);
      }
    }
    goto LABEL_78;
  }
  if (v11 <= 2420)
  {
    if ((v11 - 2111) < 4)
    {
      v49 = *(_QWORD *)(a2 + 24);
      memset(v713, 0, 32);
      v712 = 0u;
      *(_OWORD *)&v711[8] = 0u;
      v50 = *(_QWORD *)(v49 + 32);
      *(_QWORD *)v711 = &off_1E816EC08;
      *(_QWORD *)&v711[8] = v50;
      *(_QWORD *)&v712 = *(_QWORD *)(v50 + 40);
      *(_QWORD *)&v711[16] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v50 + 16) + 104))(*(_QWORD *)(v50 + 16));
      v705 = 0;
      if (*((_QWORD *)&v712 + 1))
      {
        llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, *((unsigned __int8 **)&v712 + 1));
        *((_QWORD *)&v712 + 1) = v705;
        if (v705)
          llvm::MetadataTracking::retrack((uint64_t)&v705, (unsigned __int8 *)v705, (uint64_t)&v712 + 8);
      }
      else
      {
        *((_QWORD *)&v712 + 1) = 0;
      }
      v713[1] = a2;
      v713[2] = 0;
      v713[0] = *(_QWORD *)(a2 + 24);
      if (v19 != (__int128 *)((char *)&v712 + 8))
      {
        if (*((_QWORD *)&v712 + 1))
          llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, *((unsigned __int8 **)&v712 + 1));
        v51 = *(unsigned __int8 **)v19;
        *((_QWORD *)&v712 + 1) = v51;
        if (v51)
          llvm::MetadataTracking::track((uint64_t)&v712 + 8, v51, 2);
      }
      v52 = *(_OWORD **)(a2 + 32);
      v53 = v52[3];
      v691 = v52[2];
      v692 = v53;
      v54 = v52[5];
      v689 = v52[4];
      v690 = v54;
      v55 = DWORD1(v691);
      if ((DWORD1(v691) & 0x80000000) != 0)
        v56 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (DWORD1(v691) & 0x7FFFFFFF) + 8);
      else
        v56 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * DWORD1(v691));
      v197 = *v56;
      if (v197)
      {
        if ((*(_BYTE *)(v197 + 3) & 1) != 0 || (v197 = *(_QWORD *)(v197 + 24)) != 0 && (*(_BYTE *)(v197 + 3) & 1) != 0)
        {
          v661 = *(_QWORD *)(v197 + 8);
          if (v661)
          {
            if (**(_WORD **)(v661 + 16) == 82 && *(_DWORD *)(v661 + 40) == 2)
              v55 = *(unsigned int *)(*(_QWORD *)(v661 + 32) + 36);
          }
        }
      }
      if (v55 >> 31)
        v198 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
      else
        v198 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v55);
      v199 = *v198;
      if ((*(_BYTE *)(v199 + 3) & 1) == 0)
        v199 = *(_QWORD *)(v199 + 24);
      v200 = *(_QWORD *)(v199 + 8);
      if ((**(_WORD **)(v200 + 16) & 0xFFFE) != 0x4C)
        goto LABEL_432;
      v201 = *(_QWORD *)(v200 + 32);
      v202 = *(unsigned int *)(v201 + 36);
      if ((v202 & 0x80000000) != 0)
        v203 = (unint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v202 & 0x7FFFFFFF) + 8);
      else
        v203 = (unint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v202);
      v351 = *v203;
      if (!v351)
        goto LABEL_426;
      if ((*(_BYTE *)(v351 + 3) & 1) == 0)
      {
        v351 = *(_QWORD *)(v351 + 24);
        if (!v351)
          goto LABEL_426;
        if ((*(_BYTE *)(v351 + 3) & 1) == 0)
        {
LABEL_1046:
          v352 = 0;
          v351 = 0;
          goto LABEL_427;
        }
      }
      v351 = *(_QWORD *)(v351 + 8);
      if (v351)
      {
        if (**(_WORD **)(v351 + 16) == 318)
        {
          v353 = 0;
          v352 = *(_QWORD *)(*(_QWORD *)(v351 + 32) + 48);
          v351 = v352 & 0xFFFFFFFFFFFFFF00;
          v352 = v352;
LABEL_428:
          v354 = *(unsigned int *)(v201 + 68);
          if ((v354 & 0x80000000) != 0)
            v355 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v354 & 0x7FFFFFFF) + 8);
          else
            v355 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v354);
          v356 = *v355;
          if (v356)
          {
            if ((*(_BYTE *)(v356 + 3) & 1) != 0
              || (v356 = *(_QWORD *)(v356 + 24)) != 0 && (*(_BYTE *)(v356 + 3) & 1) != 0)
            {
              v663 = *(_QWORD *)(v356 + 8);
              if (v663)
              {
                v664 = **(_WORD **)(v663 + 16) == 318 ? v353 : 1;
                if ((v664 & 1) == 0)
                {
                  v665 = (uint64_t)(v351 | v352) / 2;
                  if ((v55 & 0x80000000) != 0 && (v666 = v55 & 0x7FFFFFFF, v666 < *(_DWORD *)(v5 + 432)))
                    v667 = *(void **)(*(_QWORD *)(v5 + 424) + 8 * v666);
                  else
                    v667 = 0;
                  v705 = v667;
                  v673 = sub_1C4825F50((unint64_t *)&v705);
                  if ((_DWORD)v672 == 1)
                  HIDWORD(v674) = (unint64_t)(v673 + 7) >> 3;
                  LODWORD(v674) = HIDWORD(v674) - 2;
                  LODWORD(v691) = dword_1C65ED558[(int)(v674 >> 1)];
                  DWORD1(v691) = v665;
                  *((_QWORD *)&v691 + 1) = 0;
                  LODWORD(v692) = 64;
                  DWORD2(v692) = HIDWORD(v665);
                  v357 = 1;
LABEL_433:
                  v358 = DWORD1(v689);
                  if ((DWORD1(v689) & 0x80000000) != 0)
                    v359 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (DWORD1(v689) & 0x7FFFFFFF) + 8);
                  else
                    v359 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * DWORD1(v689));
                  v360 = *v359;
                  if (v360)
                  {
                    if ((*(_BYTE *)(v360 + 3) & 1) != 0
                      || (v360 = *(_QWORD *)(v360 + 24)) != 0 && (*(_BYTE *)(v360 + 3) & 1) != 0)
                    {
                      v662 = *(_QWORD *)(v360 + 8);
                      if (v662)
                      {
                        if (**(_WORD **)(v662 + 16) == 82 && *(_DWORD *)(v662 + 40) == 2)
                          v358 = *(unsigned int *)(*(_QWORD *)(v662 + 32) + 36);
                      }
                    }
                  }
                  if (v358 >> 31)
                    v361 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v358 & 0x7FFFFFFF) + 8);
                  else
                    v361 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v358);
                  v362 = *v361;
                  if ((*(_BYTE *)(v362 + 3) & 1) == 0)
                    v362 = *(_QWORD *)(v362 + 24);
                  v363 = *(_QWORD *)(v362 + 8);
                  v364 = **(_WORD **)(v363 + 16) & 0xFFFE;
                  v22 = v364 == 76;
                  if (v364 != 76)
                    goto LABEL_499;
                  v676 = v357;
                  v365 = *(_QWORD *)(v363 + 32);
                  v366 = *(unsigned int *)(v365 + 36);
                  if ((v366 & 0x80000000) != 0)
                    v367 = (unint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v366 & 0x7FFFFFFF) + 8);
                  else
                    v367 = (unint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v366);
                  v368 = *v367;
                  if (!v368)
                    goto LABEL_447;
                  if ((*(_BYTE *)(v368 + 3) & 1) == 0)
                  {
                    v368 = *(_QWORD *)(v368 + 24);
                    if (!v368)
                      goto LABEL_447;
                    if ((*(_BYTE *)(v368 + 3) & 1) == 0)
                    {
LABEL_1047:
                      v369 = 0;
                      v368 = 0;
                      goto LABEL_448;
                    }
                  }
                  v368 = *(_QWORD *)(v368 + 8);
                  if (v368)
                  {
                    if (**(_WORD **)(v368 + 16) == 318)
                    {
                      v370 = 0;
                      v369 = *(_QWORD *)(*(_QWORD *)(v368 + 32) + 48);
                      v368 = v369 & 0xFFFFFFFFFFFFFF00;
                      v369 = v369;
LABEL_449:
                      v371 = *(unsigned int *)(v365 + 68);
                      if ((v371 & 0x80000000) != 0)
                        v372 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v371 & 0x7FFFFFFF) + 8);
                      else
                        v372 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v371);
                      v373 = v11 & 0xFFFFFFFD;
                      v374 = *v372;
                      if (!v374)
                        goto LABEL_453;
                      if ((*(_BYTE *)(v374 + 3) & 1) != 0)
                      {
                        v373 = v11 & 0xFFFFFFFD;
                      }
                      else
                      {
                        v374 = *(_QWORD *)(v374 + 24);
                        v373 = v11 & 0xFFFFFFFD;
                        if (!v374 || (*(_BYTE *)(v374 + 3) & 1) == 0)
                          goto LABEL_453;
                      }
                      v668 = *(_QWORD *)(v374 + 8);
                      if (v668)
                      {
                        v669 = **(_WORD **)(v668 + 16) == 318 ? v370 : 1;
                        if ((v669 & 1) == 0)
                        {
                          v670 = (uint64_t)(v368 | v369) / 2;
                          if (v373 == 2112)
                            v671 = 1799;
                          else
                            v671 = 1543;
                          v689 = __PAIR64__(v670, v671);
                          LODWORD(v690) = 64;
                          DWORD2(v690) = HIDWORD(v670);
                          if (v373 == 2112)
                            v389 = 4;
                          else
                            v389 = 3;
                          v684 = 1;
LABEL_474:
                          v397 = *(_QWORD *)(a2 + 32);
                          v398 = *(_DWORD *)(v397 + 32 * (v389 + 1) + 4);
                          v399 = *(_DWORD *)(v397 + 32 * (v389 + 2) + 4);
                          v400 = sub_1C554C050(v398, v5);
                          v402 = v401;
                          v403 = sub_1C554C050(v399, v5);
                          if (v402)
                            v405 = v404 == 0;
                          else
                            v405 = 1;
                          if (!v405 && ((v400 | v403) & 0xFF00) == 0)
                          {
                            v410 = 1;
                            LODWORD(v705) = 1;
                            v706 = 0;
                            *(_QWORD *)v707 = v400 | ((unint64_t)v403 << 8);
                          }
                          else
                          {
                            v705 = &off_1E7FA5F80;
                            LODWORD(v706) = 2;
                            v407 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)v711, 18, (uint64_t *)&v705, 1, 0, 0, 0);
                            v409 = v408;
                            v706 = 0;
                            *(_OWORD *)v707 = 0uLL;
                            HIDWORD(v705) = v398;
                            LODWORD(v705) = 0;
                            llvm::MachineInstr::addOperand(v408, v407, (const llvm::MachineOperand *)&v705);
                            LODWORD(v705) = 1;
                            v706 = 0;
                            *(_QWORD *)v707 = 1;
                            llvm::MachineInstr::addOperand(v409, v407, (const llvm::MachineOperand *)&v705);
                            v706 = 0;
                            *(_OWORD *)v707 = 0uLL;
                            HIDWORD(v705) = v399;
                            LODWORD(v705) = 0;
                            llvm::MachineInstr::addOperand(v409, v407, (const llvm::MachineOperand *)&v705);
                            LODWORD(v705) = 1;
                            v706 = 0;
                            *(_QWORD *)v707 = 2;
                            llvm::MachineInstr::addOperand(v409, v407, (const llvm::MachineOperand *)&v705);
                            v410 = 0;
                            v411 = *(_DWORD *)(*((_QWORD *)v409 + 4) + 4);
                            LODWORD(v705) = 0;
                            HIDWORD(v705) = v411;
                            *(_OWORD *)v707 = 0uLL;
                            v706 = 0;
                          }
                          v707[16] = 1;
                          v414 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * (v389 + 3) + 4), v5);
                          v415 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * (v389 + 4) + 4), v5) & 1;
                          v416 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)v711, dword_1C646D520[16 * v676+ 8 * v684+ 4 * ((v11 - 2113) < 2)+ 2 * v410+ ((v11 & 0xFFFFFFFD) == 2112)], 0, 0, 0, 0, 0);
                          v418 = v417;
                          LODWORD(v778) = 1;
                          v779 = 0;
                          v780 = v415;
                          llvm::MachineInstr::addOperand(v417, v416, (const llvm::MachineOperand *)&v778);
                          LODWORD(v778) = 1;
                          v779 = 0;
                          v780 = 5;
                          llvm::MachineInstr::addOperand(v418, v416, (const llvm::MachineOperand *)&v778);
                          llvm::MachineInstr::addOperand(v418, v416, (const llvm::MachineOperand *)&v691);
                          llvm::MachineInstr::addOperand(v418, v416, (const llvm::MachineOperand *)&v689);
                          llvm::MachineInstr::addOperand(v418, v416, (const llvm::MachineOperand *)&v705);
                          LODWORD(v778) = 1;
                          v779 = 0;
                          v780 = v414;
                          llvm::MachineInstr::addOperand(v418, v416, (const llvm::MachineOperand *)&v778);
                          v419 = a2;
                          if ((*(_BYTE *)a2 & 4) == 0)
                          {
                            v419 = a2;
                            if ((*(_WORD *)(a2 + 44) & 8) != 0)
                            {
                              v419 = a2;
                              do
                                v419 = *(_QWORD *)(v419 + 8);
                              while ((*(_WORD *)(v419 + 44) & 8) != 0);
                            }
                          }
                          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v419 + 8));
LABEL_499:
                          *(_QWORD *)v711 = &off_1E816EC08;
                          if (*((_QWORD *)&v712 + 1))
                            llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, *((unsigned __int8 **)&v712 + 1));
                          goto LABEL_80;
                        }
                      }
LABEL_453:
                      v375 = (uint64_t (**)())&off_1E7FA5FB8;
                      if (v373 == 2112)
                        v375 = (uint64_t (**)())&off_1E7FA60D0;
                      v675 = v375;
                      v705 = v707;
                      v706 = 0x800000000;
                      v376 = sub_1C48AC2EC(a1, a2, (_QWORD *)v5, 25, v358, (uint64_t)&off_1E7FA5F48);
                      v377 = sub_1C48AC2EC(a1, a2, (_QWORD *)v5, 26, v358, (uint64_t)&off_1E7FA5F48);
                      v378 = v706;
                      if (v706 >= HIDWORD(v706))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v705, (uint64_t)v707, v706 + 1, 4);
                        v378 = v706;
                      }
                      *((_DWORD *)v705 + v378) = v376;
                      v379 = (v706 + 1);
                      LODWORD(v706) = v379;
                      if (v379 >= HIDWORD(v706))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v705, (uint64_t)v707, v379 + 1, 4);
                        LODWORD(v379) = v706;
                      }
                      *((_DWORD *)v705 + v379) = v377;
                      v380 = v706 + 1;
                      LODWORD(v706) = v706 + 1;
                      v381 = *(_QWORD *)(a2 + 32);
                      v382 = *(_DWORD *)(v381 + 100);
                      if (v373 == 2112)
                      {
                        v383 = *(_DWORD *)(v381 + 132);
                        v384 = sub_1C48AC2EC(a1, a2, (_QWORD *)v5, 25, v382, (uint64_t)&off_1E7FA5F48);
                        v385 = sub_1C48AC2EC(a1, a2, (_QWORD *)v5, 26, v382, (uint64_t)&off_1E7FA5F48);
                        v386 = v706;
                        if (v706 >= HIDWORD(v706))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v705, (uint64_t)v707, v706 + 1, 4);
                          v386 = v706;
                        }
                        *((_DWORD *)v705 + v386) = v384;
                        v387 = (v706 + 1);
                        LODWORD(v706) = v387;
                        if (v387 >= HIDWORD(v706))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v705, (uint64_t)v707, v387 + 1, 4);
                          LODWORD(v387) = v706;
                        }
                        *((_DWORD *)v705 + v387) = v385;
                        v388 = HIDWORD(v706);
                        v380 = v706 + 1;
                        LODWORD(v706) = v706 + 1;
                        v389 = 4;
                      }
                      else
                      {
                        v388 = HIDWORD(v706);
                        v389 = 3;
                        v383 = v382;
                      }
                      if (v380 >= v388)
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v705, (uint64_t)v707, v380 + 1, 4);
                        v380 = v706;
                      }
                      *((_DWORD *)v705 + v380) = v383;
                      LODWORD(v706) = v706 + 1;
                      v778 = v675;
                      LODWORD(v779) = 2;
                      v390 = sub_1C5548620((uint64_t *)v711, 18, (uint64_t *)&v778, 1, 0, 0, 0);
                      v392 = v391;
                      if ((_DWORD)v706)
                      {
                        v393 = (llvm::MachineFunction *)v390;
                        v394 = 0;
                        do
                        {
                          v395 = *((_DWORD *)v705 + v394);
                          v779 = 0;
                          LODWORD(v778) = 0;
                          HIDWORD(v778) = v395;
                          v780 = 0;
                          v781 = 0;
                          llvm::MachineInstr::addOperand(v392, v393, (const llvm::MachineOperand *)&v778);
                          LODWORD(v778) = 1;
                          v779 = 0;
                          v780 = (v394 + 25);
                          llvm::MachineInstr::addOperand(v392, v393, (const llvm::MachineOperand *)&v778);
                          ++v394;
                        }
                        while (v394 < v706);
                      }
                      v396 = *(_DWORD *)(*((_QWORD *)v392 + 4) + 4);
                      LODWORD(v689) = 0;
                      DWORD1(v689) = v396;
                      v690 = 0uLL;
                      *((_QWORD *)&v689 + 1) = 0;
                      if (v705 != v707)
                        free(v705);
                      v684 = 0;
                      goto LABEL_474;
                    }
                    goto LABEL_1047;
                  }
LABEL_447:
                  v369 = 0;
LABEL_448:
                  v370 = 1;
                  goto LABEL_449;
                }
              }
            }
          }
LABEL_432:
          v357 = 0;
          goto LABEL_433;
        }
        goto LABEL_1046;
      }
LABEL_426:
      v352 = 0;
LABEL_427:
      v353 = 1;
      goto LABEL_428;
    }
    if ((v11 - 2148) >= 2)
      goto LABEL_80;
    if (v6[1646])
    {
      v162 = 4;
    }
    else if (v6[1647])
    {
      v162 = 5;
    }
    else if (v6[1648])
    {
      v162 = 6;
    }
    else
    {
      v162 = v6[1649] ? 7 : 9;
    }
    v427 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 36), v5);
    v429 = v428;
    v430 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 68), v5);
    v432 = v431;
    v433 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 132), v5);
    v22 = 0;
    if (!v429 || !v432 || !v434)
      goto LABEL_80;
    v686 = v433;
    v435 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 100);
    v678 = sub_1C554C050(v435, v5);
    v680 = v430;
    if (v11 != 2148)
    {
      if (v11 != 2149)
      {
        v660 = "Unexpected intrinsic ID";
        goto LABEL_1004;
      }
      v437 = v436;
      if ((v162 - 7) < 3)
      {
        v438 = v436 == 0;
        v439 = 769;
LABEL_543:
        if (v438)
          v442 = v439 + 1;
        else
          v442 = v439;
        v443 = 67;
        v444 = 1287;
LABEL_547:
        v446 = sub_1C55437B8(&v694, v442);
        v447 = (unint64_t *)v445;
        v448 = (unint64_t *)*((_QWORD *)&v697 + 1);
        v449 = *(_QWORD *)(v697 + 40);
        *(_QWORD *)(v445 + 24) = v449;
        v450 = *(_QWORD *)(v449 + 32);
        v451 = *(unsigned int *)(v445 + 40);
        if ((_DWORD)v451)
        {
          v475 = *(_QWORD *)(v445 + 32);
          v476 = *(_QWORD *)(v450 + 40);
          v477 = 32 * v451;
          do
          {
            if (!*(_BYTE *)v475)
            {
              v478 = *(unsigned int *)(v475 + 4);
              if ((int)v478 >= 0)
                v479 = (uint64_t *)(*(_QWORD *)(v476 + 272) + 8 * v478);
              else
                v479 = (uint64_t *)(*(_QWORD *)(v476 + 24) + 16 * (v478 & 0x7FFFFFFF) + 8);
              v480 = *v479;
              if (*v479)
              {
                v481 = *(_QWORD *)(v480 + 16);
                *(_QWORD *)(v480 + 16) = v475;
                *(_QWORD *)(v475 + 16) = v481;
                if ((*(_BYTE *)(v475 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v475 + 24) = v480;
                }
                else
                {
                  *(_QWORD *)(v475 + 24) = 0;
                  v479 = (uint64_t *)(v481 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v475 + 16) = v475;
                *(_QWORD *)(v475 + 24) = 0;
              }
              *v479 = v475;
            }
            v475 += 32;
            v477 -= 32;
          }
          while (v477);
        }
        v452 = *(_QWORD *)(v450 + 728);
        if (v452)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v452 + 24))(v452, v445);
        v453 = *v448 & 0xFFFFFFFFFFFFFFF8;
        *v447 = v453 | *v447 & 7;
        v447[1] = (unint64_t)v448;
        *(_QWORD *)(v453 + 8) = v447;
        *v448 = *v448 & 7 | (unint64_t)v447;
        if ((_QWORD)v698)
          (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v698 + 24))(v698, v447);
        *(_QWORD *)&v711[8] = 0;
        *(_DWORD *)&v711[16] = v443;
        LODWORD(v712) = HIDWORD(v427);
        *(_DWORD *)&v711[4] = v427;
        *(_DWORD *)v711 = v444;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v447, v446, (const llvm::MachineOperand *)v711);
        *(_DWORD *)v711 = 1;
        *(_QWORD *)&v711[8] = 0;
        *(_QWORD *)&v711[16] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v447, v446, (const llvm::MachineOperand *)v711);
        *(_DWORD *)&v711[12] = 0;
        *(_DWORD *)&v711[16] = 64;
        LODWORD(v712) = (unint64_t)(v680 / 2) >> 32;
        *(_QWORD *)&v711[4] = (v680 / 2);
        *(_DWORD *)v711 = 775;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v447, v446, (const llvm::MachineOperand *)v711);
        if (v437)
        {
          *(_DWORD *)v711 = 1;
          *(_QWORD *)&v711[8] = 0;
          *(_QWORD *)&v711[16] = v678;
        }
        else
        {
          *(_QWORD *)&v711[8] = 0;
          *(_QWORD *)&v711[16] = 0;
          *(_DWORD *)&v711[4] = v435;
          *(_DWORD *)v711 = 0;
          *(_QWORD *)&v712 = 0;
        }
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v447, v446, (const llvm::MachineOperand *)v711);
        *(_DWORD *)v711 = 1;
        *(_QWORD *)&v711[8] = 0;
        *(_QWORD *)&v711[16] = v686;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v447, v446, (const llvm::MachineOperand *)v711);
        *(_DWORD *)v711 = 1;
        *(_QWORD *)&v711[8] = 0;
        *(_QWORD *)&v711[16] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v447, v446, (const llvm::MachineOperand *)v711);
        sub_1C554AE8C(v447, *(_QWORD *)(a1 + 72), *(_QWORD **)(a1 + 80));
        v58 = *(_QWORD *)(a2 + 24);
        v59 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v59 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v59 = a2;
            do
              v59 = *(_QWORD *)(v59 + 8);
            while ((*(_WORD *)(v59 + 44) & 8) != 0);
          }
        }
LABEL_974:
        sub_1C487FE80(v58 + 40, a2, *(_QWORD *)(v59 + 8));
        goto LABEL_975;
      }
      if (v162 == 6)
      {
        v438 = v436 == 0;
        v439 = 767;
        goto LABEL_543;
      }
LABEL_1003:
      v660 = "Invalid device type";
LABEL_1004:
      llvm::report_fatal_error((llvm *)v660, (const char *)1);
    }
    v437 = v436;
    if ((v162 - 7) >= 3)
    {
      if (v162 != 6)
        goto LABEL_1003;
      v440 = v436 == 0;
      v441 = 759;
    }
    else
    {
      v440 = v436 == 0;
      v441 = 761;
    }
    if (v440)
      v442 = v441 + 1;
    else
      v442 = v441;
    v443 = 66;
    v444 = 775;
    goto LABEL_547;
  }
  v57 = (_DWORD)v6 + 1328;
  if (v11 <= 2621)
  {
    if (v11 != 2421)
    {
      if (v11 != 2525)
        goto LABEL_80;
      v163 = *(_QWORD *)(a2 + 24);
      memset(v713, 0, 32);
      v712 = 0u;
      *(_OWORD *)&v711[8] = 0u;
      v164 = *(_QWORD *)(v163 + 32);
      *(_QWORD *)v711 = &off_1E816EC08;
      *(_QWORD *)&v711[8] = v164;
      *(_QWORD *)&v712 = *(_QWORD *)(v164 + 40);
      *(_QWORD *)&v711[16] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v164 + 16) + 104))(*(_QWORD *)(v164 + 16));
      v705 = 0;
      if (*((_QWORD *)&v712 + 1))
      {
        llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, *((unsigned __int8 **)&v712 + 1));
        *((_QWORD *)&v712 + 1) = v705;
        if (v705)
          llvm::MetadataTracking::retrack((uint64_t)&v705, (unsigned __int8 *)v705, (uint64_t)&v712 + 8);
      }
      else
      {
        *((_QWORD *)&v712 + 1) = 0;
      }
      v713[1] = a2;
      v713[2] = 0;
      v713[0] = *(_QWORD *)(a2 + 24);
      if (v19 != (__int128 *)((char *)&v712 + 8))
      {
        if (*((_QWORD *)&v712 + 1))
          llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, *((unsigned __int8 **)&v712 + 1));
        v165 = *(unsigned __int8 **)v19;
        *((_QWORD *)&v712 + 1) = v165;
        if (v165)
          llvm::MetadataTracking::track((uint64_t)&v712 + 8, v165, 2);
      }
      if (v6[1655])
        v166 = 8263;
      else
        v166 = 8262;
      v168 = sub_1C55437B8(v711, v166);
      v169 = (unint64_t *)v167;
      v170 = (unint64_t *)v713[1];
      v171 = *(_QWORD *)(v713[0] + 40);
      *(_QWORD *)(v167 + 24) = v171;
      v172 = *(_QWORD *)(v171 + 32);
      v173 = *(unsigned int *)(v167 + 40);
      if ((_DWORD)v173)
      {
        v454 = *(_QWORD *)(v167 + 32);
        v455 = *(_QWORD *)(v172 + 40);
        v456 = 32 * v173;
        do
        {
          if (!*(_BYTE *)v454)
          {
            v457 = *(unsigned int *)(v454 + 4);
            if ((int)v457 >= 0)
              v458 = (uint64_t *)(*(_QWORD *)(v455 + 272) + 8 * v457);
            else
              v458 = (uint64_t *)(*(_QWORD *)(v455 + 24) + 16 * (v457 & 0x7FFFFFFF) + 8);
            v459 = *v458;
            if (*v458)
            {
              v460 = *(_QWORD *)(v459 + 16);
              *(_QWORD *)(v459 + 16) = v454;
              *(_QWORD *)(v454 + 16) = v460;
              if ((*(_BYTE *)(v454 + 3) & 1) != 0)
              {
                *(_QWORD *)(v454 + 24) = v459;
              }
              else
              {
                *(_QWORD *)(v454 + 24) = 0;
                v458 = (uint64_t *)(v460 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v454 + 16) = v454;
              *(_QWORD *)(v454 + 24) = 0;
            }
            *v458 = v454;
          }
          v454 += 32;
          v456 -= 32;
        }
        while (v456);
      }
      v174 = *(_QWORD *)(v172 + 728);
      if (v174)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v174 + 24))(v174, v167);
      v175 = *v170 & 0xFFFFFFFFFFFFFFF8;
      *v169 = v175 | *v169 & 7;
      v169[1] = (unint64_t)v170;
      *(_QWORD *)(v175 + 8) = v169;
      *v170 = *v170 & 7 | (unint64_t)v169;
      if (v713[2])
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v169);
      LODWORD(v705) = 1;
      v706 = 0;
      *(_QWORD *)v707 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v169, v168, (const llvm::MachineOperand *)&v705);
      LODWORD(v705) = 1;
      v706 = 0;
      *(_QWORD *)v707 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v169, v168, (const llvm::MachineOperand *)&v705);
      if (v6[1655])
        v176 = 2429;
      else
        v176 = 2428;
      sub_1C55437B8(v711, v176);
      v178 = (unint64_t *)v177;
      v179 = (unint64_t *)v713[1];
      v180 = *(_QWORD *)(v713[0] + 40);
      *(_QWORD *)(v177 + 24) = v180;
      v181 = *(_QWORD *)(v180 + 32);
      v182 = *(unsigned int *)(v177 + 40);
      if ((_DWORD)v182)
      {
        v461 = *(_QWORD *)(v177 + 32);
        v462 = *(_QWORD *)(v181 + 40);
        v463 = 32 * v182;
        do
        {
          if (!*(_BYTE *)v461)
          {
            v464 = *(unsigned int *)(v461 + 4);
            if ((int)v464 >= 0)
              v465 = (uint64_t *)(*(_QWORD *)(v462 + 272) + 8 * v464);
            else
              v465 = (uint64_t *)(*(_QWORD *)(v462 + 24) + 16 * (v464 & 0x7FFFFFFF) + 8);
            v466 = *v465;
            if (*v465)
            {
              v467 = *(_QWORD *)(v466 + 16);
              *(_QWORD *)(v466 + 16) = v461;
              *(_QWORD *)(v461 + 16) = v467;
              if ((*(_BYTE *)(v461 + 3) & 1) != 0)
              {
                *(_QWORD *)(v461 + 24) = v466;
              }
              else
              {
                *(_QWORD *)(v461 + 24) = 0;
                v465 = (uint64_t *)(v467 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v461 + 16) = v461;
              *(_QWORD *)(v461 + 24) = 0;
            }
            *v465 = v461;
          }
          v461 += 32;
          v463 -= 32;
        }
        while (v463);
      }
      v183 = *(_QWORD *)(v181 + 728);
      if (v183)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v183 + 24))(v183, v177);
      v184 = *v179 & 0xFFFFFFFFFFFFFFF8;
      *v178 = v184 | *v178 & 7;
      v178[1] = (unint64_t)v179;
      *(_QWORD *)(v184 + 8) = v178;
      *v179 = *v179 & 7 | (unint64_t)v178;
      if (v713[2])
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v178);
      if (v6[1655])
        v185 = 8263;
      else
        v185 = 8262;
      v187 = sub_1C55437B8(v711, v185);
      v188 = (unint64_t *)v186;
      v189 = (unint64_t *)v713[1];
      v190 = *(_QWORD *)(v713[0] + 40);
      *(_QWORD *)(v186 + 24) = v190;
      v191 = *(_QWORD *)(v190 + 32);
      v192 = *(unsigned int *)(v186 + 40);
      if ((_DWORD)v192)
      {
        v468 = *(_QWORD *)(v186 + 32);
        v469 = *(_QWORD *)(v191 + 40);
        v470 = 32 * v192;
        do
        {
          if (!*(_BYTE *)v468)
          {
            v471 = *(unsigned int *)(v468 + 4);
            if ((int)v471 >= 0)
              v472 = (uint64_t *)(*(_QWORD *)(v469 + 272) + 8 * v471);
            else
              v472 = (uint64_t *)(*(_QWORD *)(v469 + 24) + 16 * (v471 & 0x7FFFFFFF) + 8);
            v473 = *v472;
            if (*v472)
            {
              v474 = *(_QWORD *)(v473 + 16);
              *(_QWORD *)(v473 + 16) = v468;
              *(_QWORD *)(v468 + 16) = v474;
              if ((*(_BYTE *)(v468 + 3) & 1) != 0)
              {
                *(_QWORD *)(v468 + 24) = v473;
              }
              else
              {
                *(_QWORD *)(v468 + 24) = 0;
                v472 = (uint64_t *)(v474 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v468 + 16) = v468;
              *(_QWORD *)(v468 + 24) = 0;
            }
            *v472 = v468;
          }
          v468 += 32;
          v470 -= 32;
        }
        while (v470);
      }
      v193 = *(_QWORD *)(v191 + 728);
      if (v193)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v193 + 24))(v193, v186);
      v194 = *v189 & 0xFFFFFFFFFFFFFFF8;
      *v188 = v194 | *v188 & 7;
      v188[1] = (unint64_t)v189;
      *(_QWORD *)(v194 + 8) = v188;
      *v189 = *v189 & 7 | (unint64_t)v188;
      if (v713[2])
        (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v188);
      LODWORD(v705) = 1;
      v706 = 0;
      *(_QWORD *)v707 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v188, v187, (const llvm::MachineOperand *)&v705);
      LODWORD(v705) = 1;
      v706 = 0;
      *(_QWORD *)v707 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v188, v187, (const llvm::MachineOperand *)&v705);
      v195 = *(_QWORD *)(a2 + 24);
      v196 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v196 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v196 = a2;
          do
            v196 = *(_QWORD *)(v196 + 8);
          while ((*(_WORD *)(v196 + 44) & 8) != 0);
        }
      }
LABEL_346:
      sub_1C487FE80(v195 + 40, a2, *(_QWORD *)(v196 + 8));
      *(_QWORD *)v711 = &off_1E816EC08;
      v290 = (unsigned __int8 *)*((_QWORD *)&v712 + 1);
      if (!*((_QWORD *)&v712 + 1))
        goto LABEL_975;
LABEL_925:
      llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, v290);
LABEL_975:
      v22 = 1;
      goto LABEL_80;
    }
    v205 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 36), v5);
    if (!v206
      || (v207 = v205, v208 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 68), v5), !v209)
      || (v210 = v208, v211 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 100), v5), !v212))
    {
LABEL_423:
      v22 = 0;
      goto LABEL_80;
    }
    v213 = v211;
    if (v211 == 2 && v6[1700])
      v213 = 3;
    if ((v207 & 0xFFFFFFFFFFFFFFFDLL) == 0)
    {
      v58 = *(_QWORD *)(a2 + 24);
      v59 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v59 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v59 = a2;
          do
            v59 = *(_QWORD *)(v59 + 8);
          while ((*(_WORD *)(v59 + 44) & 8) != 0);
        }
      }
      goto LABEL_974;
    }
    if (v6[1646])
    {
      v214 = 4;
    }
    else if (v6[1647])
    {
      v214 = 5;
    }
    else if (v6[1648])
    {
      v214 = 6;
    }
    else if (v6[1649])
    {
      v214 = 7;
    }
    else
    {
      v214 = 9;
    }
    if (v6[1692])
      v638 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4[43] + 648))(v4[43]);
    else
      v638 = 1;
    v688 = v214;
    if (v214 == 5)
      v639 = v638;
    else
      v639 = 0;
    if (v6[1700])
      v640 = 3;
    else
      v640 = v639;
    if (v6[1699])
    {
      v641 = 0;
    }
    else
    {
      v642 = *v4;
      *(_DWORD *)v711 = 0;
      if (sub_1C4979B6C((int)v6 + 1328, v642, "MemoryReadCacheCtl", (int *)v711))
        v641 = *(_DWORD *)v711;
      else
        v641 = v640;
      if (!v6[1699])
      {
        v658 = *v4;
        *(_DWORD *)v711 = 0;
        v659 = sub_1C4979B6C((int)v6 + 1328, v658, "MemoryWriteCacheCtl", (int *)v711);
        v643 = *(_DWORD *)v711;
        if (!v659)
          v643 = v640;
        goto LABEL_946;
      }
    }
    v643 = 0;
LABEL_946:
    if (v643 >= v641)
      v644 = v641;
    else
      v644 = v643;
    if (v6[1700])
      v645 = 3;
    else
      v645 = 1;
    v646 = *v4;
    *(_DWORD *)v711 = 0;
    if (sub_1C4979B6C((int)v6 + 1328, v646, "SampleReadCacheCtl", (int *)v711))
      v647 = *(_DWORD *)v711;
    else
      v647 = v645;
    v648 = *v4;
    *(_DWORD *)v711 = 0;
    v649 = sub_1C4979B6C((int)v6 + 1328, v648, "SampleWriteCacheCtl", (int *)v711);
    v650 = *(_DWORD *)v711;
    if (!v649)
      v650 = v645;
    if (v650 < v647)
      v647 = v650;
    v651 = v6[1732] == 0;
    v652 = *v4;
    *(_DWORD *)v711 = 0;
    if (sub_1C4979B6C((int)v6 + 1328, v652, "SampleWriteL2Pers", (int *)v711))
      v653 = *(_DWORD *)v711;
    else
      v653 = v651;
    v654 = v210 - 3;
    v655 = (v210 < 6) & (0x34u >> v210);
    if (v210 - 3 >= 3)
      v656 = 2;
    else
      v656 = 6;
    if (v654 <= 2)
    {
      if (v655)
        v657 = 7;
      else
        v657 = 3;
      sub_1C48BCA5C(a2, v207, v657, v213, 2, v644, v647, v653, v688);
    }
    if (v655)
      sub_1C48BCA5C(a2, v207, v656, v213, 2, v644, v647, v653, v688);
    v58 = *(_QWORD *)(a2 + 24);
    v59 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v59 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v59 = a2;
        do
          v59 = *(_QWORD *)(v59 + 8);
        while ((*(_WORD *)(v59 + 44) & 8) != 0);
      }
    }
    goto LABEL_974;
  }
  if (v11 == 2622)
  {
    if (v6[1697])
    {
      v58 = *(_QWORD *)(a2 + 24);
      v59 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v59 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v59 = a2;
          do
            v59 = *(_QWORD *)(v59 + 8);
          while ((*(_WORD *)(v59 + 44) & 8) != 0);
        }
      }
      goto LABEL_974;
    }
    v677 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 36), v5);
    v679 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 68), v5);
    if (v679 == 2 && v6[1700])
      LODWORD(v679) = 3;
    if (v6[1646])
    {
      v426 = 4;
    }
    else if (v6[1647])
    {
      v426 = 5;
    }
    else if (v6[1648])
    {
      v426 = 6;
    }
    else if (v6[1649])
    {
      v426 = 7;
    }
    else
    {
      v426 = 9;
    }
    v687 = v426;
    if (v6[1692])
      v578 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4[43] + 648))(v4[43]);
    else
      v578 = 1;
    if (v687 == 5)
      v579 = v578;
    else
      v579 = 0;
    if (v6[1700])
      v580 = 3;
    else
      v580 = v579;
    if (v6[1699])
    {
      v581 = 0;
    }
    else
    {
      v582 = *v4;
      *(_DWORD *)v711 = 0;
      if (sub_1C4979B6C((int)v6 + 1328, v582, "MemoryReadCacheCtl", (int *)v711))
        v581 = *(_DWORD *)v711;
      else
        v581 = v580;
      if (!v6[1699])
      {
        v609 = *v4;
        *(_DWORD *)v711 = 0;
        v610 = sub_1C4979B6C((int)v6 + 1328, v609, "MemoryWriteCacheCtl", (int *)v711);
        v583 = *(_DWORD *)v711;
        if (!v610)
          v583 = v580;
LABEL_842:
        if (v583 >= v581)
          v584 = v581;
        else
          v584 = v583;
        if (v6[1700])
          v585 = 3;
        else
          v585 = 1;
        v586 = *v4;
        *(_DWORD *)v711 = 0;
        if (sub_1C4979B6C((int)v6 + 1328, v586, "SampleReadCacheCtl", (int *)v711))
          v587 = *(_DWORD *)v711;
        else
          v587 = v585;
        v588 = *v4;
        *(_DWORD *)v711 = 0;
        v589 = sub_1C4979B6C((int)v6 + 1328, v588, "SampleWriteCacheCtl", (int *)v711);
        v590 = *(_DWORD *)v711;
        if (!v589)
          v590 = v585;
        if (v590 >= v587)
          v591 = v587;
        else
          v591 = v590;
        v592 = v6[1732] == 0;
        v593 = *v4;
        *(_DWORD *)v711 = 0;
        if (sub_1C4979B6C((int)v6 + 1328, v593, "SampleWriteL2Pers", (int *)v711))
          v594 = *(_DWORD *)v711;
        else
          v594 = v592;
        v595 = v677;
        sub_1C48BCA5C(a2, v677, 7, v679, 0, v584, v591, v594, v687);
        v596 = *(_QWORD *)(a2 + 24);
        memset(v713, 0, 32);
        v712 = 0u;
        *(_OWORD *)&v711[8] = 0u;
        v597 = *(_QWORD *)(v596 + 32);
        *(_QWORD *)v711 = &off_1E816EC08;
        *(_QWORD *)&v711[8] = v597;
        *(_QWORD *)&v712 = *(_QWORD *)(v597 + 40);
        *(_QWORD *)&v711[16] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v597 + 16) + 104))(*(_QWORD *)(v597 + 16));
        v705 = 0;
        if (*((_QWORD *)&v712 + 1))
        {
          llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, *((unsigned __int8 **)&v712 + 1));
          *((_QWORD *)&v712 + 1) = v705;
          if (v705)
            llvm::MetadataTracking::retrack((uint64_t)&v705, (unsigned __int8 *)v705, (uint64_t)&v712 + 8);
        }
        else
        {
          *((_QWORD *)&v712 + 1) = 0;
        }
        v713[1] = a2;
        v713[2] = 0;
        v713[0] = *(_QWORD *)(a2 + 24);
        if (v19 != (__int128 *)((char *)&v712 + 8))
        {
          if (*((_QWORD *)&v712 + 1))
            llvm::MetadataTracking::untrack((uint64_t)&v712 + 8, *((unsigned __int8 **)&v712 + 1));
          v598 = *(unsigned __int8 **)v19;
          *((_QWORD *)&v712 + 1) = v598;
          if (v598)
            llvm::MetadataTracking::track((uint64_t)&v712 + 8, v598, 2);
        }
        v600 = sub_1C55437B8(v711, 0x151u);
        v601 = (unint64_t *)v599;
        v602 = (unint64_t *)v713[1];
        v603 = *(_QWORD *)(v713[0] + 40);
        *(_QWORD *)(v599 + 24) = v603;
        v604 = *(_QWORD *)(v603 + 32);
        v605 = *(unsigned int *)(v599 + 40);
        if ((_DWORD)v605)
        {
          v611 = *(_QWORD *)(v599 + 32);
          v612 = *(_QWORD *)(v604 + 40);
          v613 = 32 * v605;
          v595 = v677;
          do
          {
            if (!*(_BYTE *)v611)
            {
              v614 = *(unsigned int *)(v611 + 4);
              if ((int)v614 >= 0)
                v615 = (uint64_t *)(*(_QWORD *)(v612 + 272) + 8 * v614);
              else
                v615 = (uint64_t *)(*(_QWORD *)(v612 + 24) + 16 * (v614 & 0x7FFFFFFF) + 8);
              v616 = *v615;
              if (*v615)
              {
                v617 = *(_QWORD *)(v616 + 16);
                *(_QWORD *)(v616 + 16) = v611;
                *(_QWORD *)(v611 + 16) = v617;
                if ((*(_BYTE *)(v611 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v611 + 24) = v616;
                }
                else
                {
                  *(_QWORD *)(v611 + 24) = 0;
                  v615 = (uint64_t *)(v617 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v611 + 16) = v611;
                *(_QWORD *)(v611 + 24) = 0;
              }
              *v615 = v611;
            }
            v611 += 32;
            v613 -= 32;
          }
          while (v613);
        }
        v606 = *(_QWORD *)(v604 + 728);
        if (v606)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v606 + 24))(v606, v599);
        v607 = *v602 & 0xFFFFFFFFFFFFFFF8;
        *v601 = v607 | *v601 & 7;
        v601[1] = (unint64_t)v602;
        *(_QWORD *)(v607 + 8) = v601;
        *v602 = *v602 & 7 | (unint64_t)v601;
        if (v713[2])
          (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v713[2] + 24))(v713[2], v601);
        LODWORD(v705) = 1;
        v706 = 0;
        *(_QWORD *)v707 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v601, v600, (const llvm::MachineOperand *)&v705);
        sub_1C48BCA5C(a2, v595, 6, v679, 0, v584, v591, v594, v687);
        v608 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v608 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v608 = a2;
            do
              v608 = *(_QWORD *)(v608 + 8);
            while ((*(_WORD *)(v608 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v608 + 8));
        *(_QWORD *)v711 = &off_1E816EC08;
        v290 = (unsigned __int8 *)*((_QWORD *)&v712 + 1);
        if (!*((_QWORD *)&v712 + 1))
          goto LABEL_975;
        goto LABEL_925;
      }
    }
    v583 = 0;
    goto LABEL_842;
  }
  if (v11 != 2663)
  {
    if (v11 != 2668)
      goto LABEL_80;
    if (v6[1697])
    {
      v58 = *(_QWORD *)(a2 + 24);
      v59 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v59 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v59 = a2;
          do
            v59 = *(_QWORD *)(v59 + 8);
          while ((*(_WORD *)(v59 + 44) & 8) != 0);
        }
      }
      goto LABEL_974;
    }
    v685 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 36), v5);
    v421 = v420;
    v422 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 68), v5);
    v22 = 0;
    if (!v421 || !v423)
      goto LABEL_80;
    v424 = v422;
    if (v422 == 2 && v6[1700])
      v424 = 3;
    if (v6[1646])
    {
      v425 = 4;
    }
    else if (v6[1647])
    {
      v425 = 5;
    }
    else if (v6[1648])
    {
      v425 = 6;
    }
    else if (v6[1649])
    {
      v425 = 7;
    }
    else
    {
      v425 = 9;
    }
    if (v6[1692])
      v618 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4[43] + 648))(v4[43]);
    else
      v618 = 1;
    if (v425 == 5)
      v619 = v618;
    else
      v619 = 0;
    if (v6[1700])
      v620 = 3;
    else
      v620 = v619;
    if (v6[1699])
    {
      v621 = 0;
    }
    else
    {
      v622 = *v4;
      *(_DWORD *)v711 = 0;
      if (sub_1C4979B6C((int)v6 + 1328, v622, "MemoryReadCacheCtl", (int *)v711))
        v621 = *(_DWORD *)v711;
      else
        v621 = v620;
      if (!v6[1699])
      {
        v636 = *v4;
        *(_DWORD *)v711 = 0;
        v637 = sub_1C4979B6C((int)v6 + 1328, v636, "MemoryWriteCacheCtl", (int *)v711);
        v623 = *(_DWORD *)v711;
        if (!v637)
          v623 = v620;
LABEL_910:
        if (v623 >= v621)
          v624 = v621;
        else
          v624 = v623;
        v625 = v6[1732] == 0;
        v626 = *v4;
        *(_DWORD *)v711 = 0;
        if (sub_1C4979B6C(v57, v626, "SampleWriteL2Pers", (int *)v711))
          v627 = *(_DWORD *)v711;
        else
          v627 = v625;
        if (*(_BYTE *)(a1 + 96))
          v628 = 489;
        else
          v628 = 490;
        sub_1C48BCA5C(a2, v685, 7, v424, 1, v624, 1, v627, v425);
        v629 = *(_QWORD *)(a2 + 24);
        v713[3] = 0;
        v630 = *(_QWORD *)(v629 + 32);
        *(_QWORD *)v711 = &off_1E816EC08;
        *(_QWORD *)&v711[8] = v630;
        *(_QWORD *)&v712 = *(_QWORD *)(v630 + 40);
        *(_QWORD *)&v711[16] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v630 + 16) + 104))(*(_QWORD *)(v630 + 16));
        v631 = *(_QWORD *)(a2 + 24);
        v713[1] = a2;
        v713[2] = 0;
        *((_QWORD *)&v712 + 1) = 0;
        v713[0] = v631;
        if (v19 != (__int128 *)((char *)&v712 + 8))
        {
          v632 = *(unsigned __int8 **)v19;
          *((_QWORD *)&v712 + 1) = v632;
          if (v632)
            llvm::MetadataTracking::track((uint64_t)&v712 + 8, v632, 2);
        }
        v633 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)v711, v628, 0, 0, 0, 0, 0);
        LODWORD(v705) = 1;
        v706 = 0;
        *(_QWORD *)v707 = 0;
        llvm::MachineInstr::addOperand(v634, v633, (const llvm::MachineOperand *)&v705);
        sub_1C48BCA5C(a2, v685, 6, v424, 1, v624, 1, v627, v425);
        v635 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v635 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v635 = a2;
            do
              v635 = *(_QWORD *)(v635 + 8);
            while ((*(_WORD *)(v635 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v635 + 8));
        *(_QWORD *)v711 = &off_1E816EC08;
        v290 = (unsigned __int8 *)*((_QWORD *)&v712 + 1);
        if (!*((_QWORD *)&v712 + 1))
          goto LABEL_975;
        goto LABEL_925;
      }
    }
    v623 = 0;
    goto LABEL_910;
  }
  if (v6[1646])
  {
    v204 = 4;
  }
  else if (v6[1647])
  {
    v204 = 5;
  }
  else if (v6[1648])
  {
    v204 = 6;
  }
  else if (v6[1649])
  {
    v204 = 7;
  }
  else
  {
    v204 = 9;
  }
  if (v6[1692])
    v482 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4[43] + 648))(v4[43]);
  else
    v482 = 1;
  if (v204 == 5)
    v483 = v482;
  else
    v483 = 0;
  if (v6[1700])
    v484 = 3;
  else
    v484 = v483;
  if (v6[1699])
  {
    v485 = 0;
LABEL_640:
    v487 = 0;
    goto LABEL_641;
  }
  v486 = *v4;
  *(_DWORD *)v711 = 0;
  if (sub_1C4979B6C((int)v6 + 1328, v486, "MemoryReadCacheCtl", (int *)v711))
    v485 = *(_DWORD *)v711;
  else
    v485 = v484;
  if (v6[1699])
    goto LABEL_640;
  v492 = *v4;
  *(_DWORD *)v711 = 0;
  v493 = sub_1C4979B6C((int)v6 + 1328, v492, "MemoryWriteCacheCtl", (int *)v711);
  v487 = *(_DWORD *)v711;
  if (!v493)
    v487 = v484;
LABEL_641:
  if (v487 >= v485)
    v488 = v485;
  else
    v488 = v487;
  v489 = v6[1732] == 0;
  v490 = *v4;
  *(_DWORD *)v711 = 0;
  if (sub_1C4979B6C((int)v6 + 1328, v490, "SampleWriteL2Pers", (int *)v711))
    v489 = *(_DWORD *)v711;
  v491 = sub_1C48BCA5C(a2, 4, 3, 2, 2, v488, 1, v489, v204);
  v22 = 0;
  if (sub_1C48BCA5C(a2, 4, 2, 2, 2, v488, 1, v489, v204) | v491)
  {
    v58 = *(_QWORD *)(a2 + 24);
    v59 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v59 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v59 = a2;
        do
          v59 = *(_QWORD *)(v59 + 8);
        while ((*(_WORD *)(v59 + 44) & 8) != 0);
      }
    }
    goto LABEL_974;
  }
LABEL_80:
  v694 = &off_1E816EC08;
  if (*((_QWORD *)&v696 + 1))
    llvm::MetadataTracking::untrack((uint64_t)&v696 + 8, *((unsigned __int8 **)&v696 + 1));
  v757 = &off_1E7FA1778;
  v758 = (void (**)())&unk_1E7FA17D0;
  if (v764 != v766)
    free(v764);
  v758 = off_1E7FA1810;
  if (v760 != v759)
    free(v760);
  v699 = off_1E7FA1810;
  if (v701 != v700)
    free(v701);
  MEMORY[0x1CAA32FB4](v770, 8);
  if (v767 != v769)
    free(v767);
  MEMORY[0x1CAA32FB4](v775, 8);
  if (v773[0] != v774)
    free(v773[0]);
  return v22;
}

