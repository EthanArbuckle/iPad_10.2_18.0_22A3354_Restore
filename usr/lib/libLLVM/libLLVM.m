_QWORD *sub_1C4762F58()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E7F93BA8;
  return result;
}

void LLVMInitializeAGX3APSTraceSystem()
{
  qword_1EF8F6968 = (uint64_t)sub_1C4762F58;
}

void sub_1C4762FA4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4762FB8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 17) = 0;
  *(_QWORD *)result = &off_1E7F93BE8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 40) = a3;
  *(_QWORD *)(result + 48) = a4;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = a1;
  *a5 = result;
  return result;
}

void sub_1C4763030()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4763044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v8 = *(_OWORD *)(a1 + 40);
  v9 = *(_OWORD *)(a1 + 24);
  result = operator new();
  *(_OWORD *)(result + 40) = v8;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_OWORD *)(result + 24) = v9;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E7F93BE8;
  *(_QWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 15) = *(_DWORD *)(a1 + 15);
  if (a2)
    *(_QWORD *)(result + 24) = a2;
  *a3 = result;
  return result;
}

uint64_t sub_1C47630D4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

void sub_1C47630DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  int v14;
  uint64_t *v15;
  int v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  const std::error_category *v35;
  uint64_t v36;
  const std::error_category *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  std::string *v47;
  std::string::size_type v48;
  const std::error_category *v49;
  uint64_t v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  const std::error_category *v55;
  uint64_t v56;
  int64_t v57;
  _BYTE v58[24];
  uint64_t v59;
  char v60;
  char v61;
  std::string v62;
  std::string v63;
  std::string v64;
  unint64_t v65;
  _QWORD v66[4];
  __int16 v67;
  char v68;
  void *v69;
  uint64_t v70;
  _BYTE v71[768];
  __int128 v72;
  std::string::size_type v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v68 = 0;
  v69 = v71;
  v70 = 0x2000000000;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 24) + 24))(&v59);
  if (!v61)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
    v68 = 1;
    *(_BYTE *)(a2 + 792) &= ~1u;
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = a2 + 24;
    v46 = a2 + 8;
    *(_QWORD *)(a2 + 16) = 0x2000000000;
    if ((_DWORD)v70)
      goto LABEL_75;
    goto LABEL_84;
  }
  v5 = (uint64_t *)(a1 + 8);
  llvm::agxapstrace::AddressTranslator::toSectionRelative(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8), 1, (uint64_t)v58);
  if (!v58[16])
  {
    llvm::agxapstrace::to_string((unint64_t *)(a1 + 8), (uint64_t)&v64);
    v47 = std::string::insert(&v64, 0, "Invalid PC ");
    v48 = v47->__r_.__value_.__r.__words[2];
    v72 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v73 = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = std::generic_category();
    v50 = operator new();
    v67 = 260;
    v66[0] = &v72;
    *(_QWORD *)v50 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v66, (_QWORD *)(v50 + 8));
    *(_QWORD *)(v50 + 32) = 5;
    *(_QWORD *)(v50 + 40) = v49;
    *(_BYTE *)(v50 + 48) = 1;
    *(_BYTE *)(a2 + 792) |= 1u;
    *(_QWORD *)a2 = v50;
    if (SHIBYTE(v73) < 0)
      operator delete((void *)v72);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    goto LABEL_84;
  }
  v6 = v59 + 1;
  while (--v6)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(_QWORD *)(a1 + 8);
    v65 = v9;
    if (!v8 || (v10 = *(_QWORD *)(v8 + 56), v11 = v9 - v10, v9 < v10) || *(_QWORD *)(v8 + 64) <= v9)
    {
      llvm::agxapstrace::AddressTranslator::toSectionRelative(v7, v9, 1, (uint64_t)&v72);
      if (!(_BYTE)v73)
      {
        llvm::agxapstrace::to_string(&v65, (uint64_t)&v62);
        v51 = std::string::insert(&v62, 0, "Invalid PC ");
        v52 = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        v53 = std::string::append(&v63, " after update");
        v54 = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        v55 = std::generic_category();
        v56 = operator new();
        v67 = 260;
        v66[0] = &v64;
        *(_QWORD *)v56 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v66, (_QWORD *)(v56 + 8));
        *(_QWORD *)(v56 + 32) = 5;
        *(_QWORD *)(v56 + 40) = v55;
        *(_BYTE *)(v56 + 48) = 1;
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v63.__r_.__value_.__l.__data_);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        *(_BYTE *)(a2 + 792) |= 1u;
        *(_QWORD *)a2 = v56;
        goto LABEL_84;
      }
      v11 = *((_QWORD *)&v72 + 1);
      v8 = v72;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)v72;
      *(_QWORD *)(a1 + 64) = v8;
    }
    v12 = v8 + 72;
    llvm::agxapstrace::CachedSectionDisassembler::getInstAt(v8 + 72, v11, (uint64_t)&v72);
    v13 = (unsigned int *)v72;
    if ((BYTE8(v72) & 1) != 0)
    {
      *(_BYTE *)(a2 + 792) |= 1u;
      *(_QWORD *)a2 = v13;
      goto LABEL_84;
    }
    v14 = v70;
    if (v70 >= HIDWORD(v70))
    {
      v66[0] = *v5;
      v66[1] = v72;
      v66[2] = v12;
      v41 = v70 + 1;
      if (v69 <= v66 && (char *)v69 + 24 * v70 > (char *)v66)
      {
        v57 = (char *)v66 - (_BYTE *)v69;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, (uint64_t)v71, v41, 24);
        v43 = (char *)v69;
        v42 = (char *)v69 + v57;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, (uint64_t)v71, v41, 24);
        v42 = (char *)v66;
        v43 = (char *)v69;
      }
      v44 = &v43[24 * v70];
      v45 = *(_OWORD *)v42;
      *((_QWORD *)v44 + 2) = *((_QWORD *)v42 + 2);
      *(_OWORD *)v44 = v45;
      v16 = v70 + 1;
    }
    else
    {
      v15 = (uint64_t *)((char *)v69 + 24 * v70);
      *v15 = *v5;
      v15[1] = (uint64_t)v13;
      v15[2] = v12;
      v16 = v14 + 1;
    }
    LODWORD(v70) = v16;
    v64.__r_.__value_.__r.__words[0] = v11;
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
    v18 = *v13;
    if (*v13 == 623)
      goto LABEL_14;
    v25 = **(_QWORD **)(a1 + 48);
    v26 = *(_QWORD *)(v25 + 48 * v18 + 8);
    if ((v26 & 0x800) != 0)
      goto LABEL_44;
    if ((v26 & 0x80) != 0)
    {
      v30 = *(_QWORD *)(v25 + 48 * v18 + 16) & 0x1000000;
      if (v30 | v26 & 0x20)
      {
LABEL_44:
        if (*(_BYTE *)(a1 + 16))
        {
          v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
          if (!v32)
            goto LABEL_52;
          *v5 = v31;
          v19 = v2 & 0xFFFFFFFFFFFFFF00;
          v20 = 1;
        }
        else
        {
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v33 = sub_1C4C915C4(v18);
          if ((v33 & 0xFF00000000) == 0)
            goto LABEL_87;
          if ((_DWORD)v33 == 11)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
            if (!v34)
            {
LABEL_52:
              v35 = std::generic_category();
              v36 = operator new();
              v66[0] = "PC needed but not found in trace";
              v67 = 259;
              *(_QWORD *)v36 = off_1E81A0C88;
              llvm::Twine::str((llvm::Twine *)v66, (_QWORD *)(v36 + 8));
              *(_QWORD *)(v36 + 32) = 5;
              *(_QWORD *)(v36 + 40) = v35;
              *(_BYTE *)(v36 + 48) = 1;
LABEL_53:
              v28 = 0;
              v2 = 0;
              *(_BYTE *)(a2 + 792) |= 1u;
              *(_QWORD *)a2 = v36;
              goto LABEL_38;
            }
            v19 = 1;
          }
          else
          {
LABEL_14:
            v19 = 0;
          }
          *v5 += *((_QWORD *)v13 + 21);
          v20 = v2 & 0xFFFFFFFFFFFFFF00;
        }
        v2 = v19 | v20;
        goto LABEL_17;
      }
      if ((v26 & 0x400) == 0 && v30)
        goto LABEL_14;
    }
    else
    {
      if ((v26 & 0x20) != 0)
        goto LABEL_44;
      if ((v26 & 0x400) == 0)
        goto LABEL_14;
    }
    v39 = sub_1C4C915C4(v18);
    if ((v39 & 0xFF00000000) == 0)
LABEL_87:
      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
    if (((_DWORD)v39 == 6) == (*(_BYTE *)(a1 + 16) != 0))
      goto LABEL_14;
    v63.__r_.__value_.__r.__words[0] = 0;
    if (!llvm::agxapstrace::CachedSectionDisassembler::getBranchTarget(v12, &v64, (uint64_t)v13, *(_QWORD *)(a1 + 40), (unint64_t *)&v63))
    {
      v40 = (char *)v69 + 24 * v70 - 24;
      v36 = operator new();
      v66[0] = "Unable to resolve branch target";
      v67 = 259;
      *(_QWORD *)v36 = off_1E8132BE0;
      llvm::Twine::str((llvm::Twine *)v66, (_QWORD *)(v36 + 8));
      *(_QWORD *)(v36 + 32) = v40;
      goto LABEL_53;
    }
    *v5 = v63.__r_.__value_.__r.__words[0];
    v2 &= 0xFFFFFFFFFFFFFF00;
LABEL_17:
    v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
    if ((v21 & 2) == 0
      || !*(_BYTE *)(a1 + 18)
      || (_BYTE)v2
      || ((*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24)), v22))
    {
      *(_BYTE *)(a1 + 18) = 0;
      v23 = *(_QWORD *)(**(_QWORD **)(a1 + 48) + 48 * *v13 + 16);
      if ((v23 & 0x2000) != 0)
      {
        if ((v23 & 0x400000000) != 0)
        {
          v24 = 64;
LABEL_31:
          v27 = sub_1C4C2FD5C((unsigned __int16)*v13);
        }
        else
        {
          if ((v23 & 0x4000002) != 0)
          {
            v24 = 0x4000000000000000;
            goto LABEL_31;
          }
          v27 = 1;
          v24 = 64;
        }
        if ((*(_QWORD *)(*((_QWORD *)v13 + 2) + 16 * v27 + 8) & v24) != 0)
        {
          if ((v21 & 2) != 0 && !*(_BYTE *)(a1 + 17))
            *(_BYTE *)(a1 + 18) = 1;
          v28 = 1;
          *(_BYTE *)(a1 + 17) = 1;
          goto LABEL_38;
        }
      }
      v28 = 1;
      goto LABEL_38;
    }
    v37 = std::generic_category();
    v38 = operator new();
    v66[0] = "PC needed but not found in trace";
    v67 = 259;
    *(_QWORD *)v38 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v66, (_QWORD *)(v38 + 8));
    v28 = 0;
    *(_QWORD *)(v38 + 32) = 5;
    *(_QWORD *)(v38 + 40) = v37;
    *(_BYTE *)(v38 + 48) = 1;
    *(_BYTE *)(a2 + 792) |= 1u;
    *(_QWORD *)a2 = v38;
LABEL_38:
    if ((BYTE8(v72) & 1) != 0)
    {
      v29 = v72;
      *(_QWORD *)&v72 = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    }
    if ((v28 & 1) == 0)
      goto LABEL_84;
  }
  *(_BYTE *)(a1 + 16) = v60;
  *(_BYTE *)(a2 + 792) &= ~1u;
  *(_BYTE *)a2 = v68;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  v46 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0x2000000000;
  if (!(_DWORD)v70)
    goto LABEL_84;
LABEL_75:
  sub_1C476393C(v46, (uint64_t)&v69);
LABEL_84:
  if (v69 != v71)
    free(v69);
}

uint64_t sub_1C476393C(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 24 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 24 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 24);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 24 * v9), (const void *)(*(_QWORD *)a2 + 24 * v9), *(_QWORD *)a2 + 24 * v10 - (*(_QWORD *)a2 + 24 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

_QWORD *sub_1C4763A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[2] = a2;
  result[3] = a3;
  result[4] = a4;
  *result = &off_1E7F93C20;
  result[1] = a1;
  return result;
}

void LLVMInitializeAGX2ClauseAnalyzer()
{
  qword_1ED82C530 = (uint64_t)sub_1C4763A64;
}

void sub_1C4763ADC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4763AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, a3, a2, a4, a2, *(_QWORD *)(a2 + 16));
}

uint64_t sub_1C4763B10@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *v14;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  sub_1C4764130((uint64_t *)&v16, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 192));
  v14 = v16;
  sub_1C4764200((uint64_t)&v17, a1, a2, a3, a4, a5, a6, v16, (((_DWORD)a4 + 384) & 0xFFFFFFC0) - a4);
  *(_BYTE *)(a7 + 8) = *(_BYTE *)(a7 + 8) & 0xFE | v18 & 1;
  *(_QWORD *)a7 = v17;
  return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
}

void sub_1C4763BFC(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v7;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;

  v7 = a3;
  v63 = *MEMORY[0x1E0C80C00];
  v9 = a3 + 384;
  sub_1C4764130((uint64_t *)&v60, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 192));
  v10 = 0;
  v11 = v9 & 0xFFFFFFC0;
  v12 = v60;
  v56 = a5;
  while (1)
  {
    if (v7 >= a5)
    {
      *(_BYTE *)(a6 + 8) &= ~1u;
      *(_QWORD *)a6 = v12;
      return;
    }
    sub_1C4764200((uint64_t)&v61, a1, v10, a2, v7, a4, a5, v12, v11 - v7);
    v13 = v61;
    if ((v62 & 1) != 0)
      break;
    v61 = 0;
    if (*(_QWORD *)(v13 + 8) != *(_QWORD *)(v13 + 16))
    {
      v14 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, *(_QWORD *)(a1 + 8));
      v16 = *(uint64_t **)(v13 + 8);
      v15 = *(uint64_t **)(v13 + 16);
      if (v16 == v15)
      {
        v17 = 0;
      }
      else
      {
        v17 = 0;
        do
        {
          v18 = *v16++;
          v17 += *(_QWORD *)(v18 + 16);
        }
        while (v16 != v15);
      }
      if (!*(_BYTE *)(v13 + 36) || v12[2] - v12[1] == 240 || *(_DWORD *)(v13 + 32) != 1)
        goto LABEL_27;
      if (v14 >= 7)
      {
        if ((*(_WORD *)(*(_QWORD *)(a1 + 24) + 196) & 0x220) != 0 || v14 != 7)
          goto LABEL_27;
        v21 = (*(uint64_t (**)(_QWORD *))(*v12 + 24))(v12);
        v22 = *(uint64_t **)(v21 + 8);
        v23 = *(uint64_t **)(v21 + 16);
        if (v22 == v23)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          do
          {
            v25 = *v22++;
            v24 += *(_QWORD *)(v25 + 16);
          }
          while (v22 != v23);
        }
        if (v24 != *(_DWORD *)v21)
        {
          v15 = *(uint64_t **)(v13 + 16);
LABEL_27:
          v26 = sub_1C4764D38(*(_DWORD *)(*(v15 - 1) + 24), **(_QWORD **)(a1 + 8), (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 192) & 0x22000000000) != 0);
          v27 = v12[1];
          v28 = (_QWORD *)v12[2];
          v29 = ((uint64_t)v28 - v27) >> 3;
          if (v29 >= v12[4])
            goto LABEL_33;
          v30 = v26;
          if (*(_DWORD *)(v13 + 32) == 1)
          {
            v31 = v12[6];
            if (v31 < v12[5])
            {
              v12[6] = v31 + 1;
              goto LABEL_31;
            }
LABEL_33:
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          }
          else
          {
LABEL_31:
            v32 = v12[3];
            if ((unint64_t)v28 >= v32)
            {
              if ((v29 + 1) >> 61)
                abort();
              v34 = v32 - v27;
              v35 = v34 >> 2;
              if (v34 >> 2 <= v29 + 1)
                v35 = v29 + 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v36 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v36 = v35;
              if (v36)
              {
                if (v36 >> 61)
                  sub_1C4764EE4();
                v37 = (char *)operator new(8 * v36);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[8 * v29];
              v39 = &v37[8 * v36];
              *(_QWORD *)v38 = v13;
              v33 = v38 + 8;
              v40 = (_QWORD *)v12[1];
              v41 = (_QWORD *)v12[2];
              if (v41 == v40)
              {
                v12[1] = v38;
                v12[2] = v33;
                v12[3] = v39;
              }
              else
              {
                do
                {
                  v42 = *--v41;
                  *v41 = 0;
                  *((_QWORD *)v38 - 1) = v42;
                  v38 -= 8;
                }
                while (v41 != v40);
                v41 = (_QWORD *)v12[1];
                v43 = (_QWORD *)v12[2];
                v12[1] = v38;
                v12[2] = v33;
                v12[3] = v39;
                while (v43 != v41)
                {
                  v45 = *--v43;
                  v44 = v45;
                  *v43 = 0;
                  if (v45)
                    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
                }
              }
              if (v41)
                operator delete(v41);
            }
            else
            {
              *v28 = v13;
              v33 = v28 + 1;
            }
            v12[2] = v33;
            if (!v30)
            {
              v46 = (*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
              v47 = *(uint64_t **)(v46 + 8);
              v48 = *(uint64_t **)(v46 + 16);
              if (v47 == v48)
              {
                v49 = 0;
              }
              else
              {
                v49 = 0;
                do
                {
                  v50 = *v47++;
                  v49 += *(_QWORD *)(v50 + 16);
                }
                while (v47 != v48);
              }
              a5 = v56;
              if (v49 == *(_DWORD *)v46)
                goto LABEL_71;
              v51 = (*(uint64_t (**)(_QWORD *))(*v12 + 24))(v12);
              v52 = *(uint64_t **)(v51 + 8);
              v53 = *(uint64_t **)(v51 + 16);
              if (v52 == v53)
              {
                v54 = 0;
              }
              else
              {
                v54 = 0;
                do
                {
                  v55 = *v52++;
                  v54 += *(_QWORD *)(v55 + 16);
                }
                while (v52 != v53);
              }
              if (v54 == *(_DWORD *)v51)
              {
LABEL_71:
                v19 = 0;
                *(_BYTE *)(a6 + 8) &= ~1u;
                *(_QWORD *)a6 = v12;
                v12 = 0;
              }
              else
              {
                v7 += v17;
                v19 = 1;
              }
              goto LABEL_55;
            }
          }
          v19 = 0;
          *(_BYTE *)(a6 + 8) &= ~1u;
          *(_QWORD *)a6 = v12;
          v12 = 0;
          a5 = v56;
          goto LABEL_55;
        }
      }
    }
    *(_BYTE *)(a6 + 8) &= ~1u;
    *(_QWORD *)a6 = v12;
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v12 = 0;
    v19 = 0;
LABEL_55:
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
    ++v10;
    if ((v19 & 1) == 0)
      goto LABEL_75;
  }
  *(_BYTE *)(a6 + 8) |= 1u;
  *(_QWORD *)a6 = v13;
LABEL_75:
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
}

uint64_t sub_1C47640AC(uint64_t a1, uint64_t a2)
{
  return sub_1C4764EF0(*(_DWORD *)(a2 + 24));
}

uint64_t sub_1C47640B4(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a2 + 24);
  if (v2 == 4826 && (v3 = *(_QWORD *)(a2 + 40), *(_BYTE *)(v3 + 16) == 2) && *(_QWORD *)(v3 + 24) == 3)
    return 18;
  else
    return sub_1C4764F18(v2);
}

uint64_t sub_1C47640EC(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(**(_QWORD **)(a1 + 8) + 48 * *(unsigned int *)(a2 + 24) + 21) & 1;
}

BOOL sub_1C476410C(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  unsigned int v4;

  v2 = *(_DWORD *)(a2 + 24);
  v3 = (v2 - 789) >= 3;
  v4 = v2 - 4672;
  return !v3 || v4 <= 1;
}

uint64_t sub_1C4764130(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;

  if ((a2 & 0x22000000000) != 0)
  {
    result = operator new();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_OWORD *)(result + 32) = xmmword_1C63F4FB0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)result = &off_1E7F93C88;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 56) = 384;
    v4 = (_QWORD *)(result + 64);
  }
  else
  {
    result = operator new();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_OWORD *)(result + 32) = xmmword_1C63F4FC0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)result = &off_1E7F93CD8;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 56) = 128;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_DWORD *)(result + 88) = 256;
    v4 = (_QWORD *)(result + 96);
  }
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *a1 = result;
  return result;
}

void sub_1C4764200(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, _QWORD *a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  const std::error_category *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int *v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  int *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  BOOL v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  int *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  int *v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v99;
  int *v100;
  _QWORD *v101;
  int v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  void *__p;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  __int16 v117;
  uint64_t v118;
  char v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 192);
  v14 = *(_QWORD *)(a2 + 8);
  v109 = 1;
  if (a3 == 30)
    v15 = 1;
  else
    v15 = 16;
  v110 = 384;
  v16 = (v13 & 0x22000000000) == 0;
  v111 = 0;
  if ((v13 & 0x22000000000) != 0)
    v17 = 384;
  else
    v17 = v15;
  v18 = 128;
  if (v16)
    v18 = 256;
  v112 = v14;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v19 = !v16;
  v102 = v17;
  v103 = v18;
  v104 = v19;
  v105 = v14;
  __p = 0;
  v107 = 0;
  v108 = 0;
  v20 = operator new();
  v100 = 0;
  v101 = 0;
  *(_OWORD *)(v20 + 8) = 0u;
  *(_OWORD *)(v20 + 24) = 0u;
  v21 = a5 + a9;
  *(_QWORD *)v20 = &off_1E7F93D08;
  v99 = a5 + a9;
  do
  {
    if (a5 >= a7)
      goto LABEL_145;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a4 + 16))(&v118, a4, a5);
    v22 = v118;
    if ((v119 & 1) != 0)
    {
      v118 = 0;
      *(_BYTE *)(a1 + 8) |= 1u;
      *(_QWORD *)a1 = v22;
      v23 = 1;
      goto LABEL_140;
    }
    if (!v118)
    {
      v24 = std::generic_category();
      v25 = operator new();
      v116 = "Internal error";
      v117 = 259;
      *(_QWORD *)v25 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)&v116, (_QWORD *)(v25 + 8));
      *(_QWORD *)(v25 + 32) = 5;
      *(_QWORD *)(v25 + 40) = v24;
      v23 = 1;
      *(_BYTE *)(v25 + 48) = 1;
      *(_BYTE *)(a1 + 8) |= 1u;
      *(_QWORD *)a1 = v25;
      goto LABEL_140;
    }
    if (*(_QWORD *)(v118 + 16) + a5 > v21)
    {
      *(_BYTE *)(v20 + 36) = 1;
      v23 = 9;
      goto LABEL_140;
    }
    if (v101)
    {
      v26 = *(_DWORD *)(v20 + 32);
      v27 = *(_DWORD *)(v118 + 24);
      if (v27)
        v28 = sub_1C4764EBC(v27);
      else
        v28 = 2;
      if (v26 != v28)
      {
        *(_BYTE *)(a1 + 8) &= ~1u;
        *(_QWORD *)a1 = v20;
        v23 = 1;
LABEL_43:
        v20 = 0;
        goto LABEL_140;
      }
      v34 = v101;
    }
    else
    {
      v29 = *(_DWORD *)(v118 + 24);
      if (v29)
      {
        v30 = sub_1C4764EBC(v29);
        v31 = 3;
        if (v30 == 2)
        {
          v31 = 2;
          v32 = 2;
        }
        else
        {
          v32 = 1;
        }
        v33 = &v109;
        if (v30 != 2)
          v33 = &v102;
        v100 = v33;
      }
      else
      {
        v100 = &v109;
        v31 = 2;
        v32 = 2;
      }
      v34 = (_QWORD *)(*(uint64_t (**)(void))(*a8 + 8 * v31))();
      *(_DWORD *)(v20 + 32) = v32;
    }
    v36 = (char *)v34[1];
    v35 = (char *)v34[2];
    v101 = v34;
    if (v36 == v35)
    {
      v37 = 0;
    }
    else
    {
      v37 = 0;
      v38 = (char *)v34[1];
      do
      {
        v39 = *(_QWORD *)v38;
        v38 += 8;
        v37 += *(_QWORD *)(v39 + 16);
      }
      while (v38 != v35);
    }
    if (*(_QWORD *)(v22 + 16) + v37 > (unint64_t)*(unsigned int *)v34)
    {
      v23 = 1;
      *(_BYTE *)(v20 + 36) = 1;
      *(_BYTE *)(a1 + 8) &= ~1u;
      *(_QWORD *)a1 = v20;
      goto LABEL_43;
    }
    v40 = v34[3];
    if ((unint64_t)v35 >= v40)
    {
      v43 = (v35 - v36) >> 3;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 61)
        goto LABEL_153;
      v45 = v40 - (_QWORD)v36;
      if (v45 >> 2 > v44)
        v44 = v45 >> 2;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
        v46 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v46 = v44;
      if (v46)
      {
        if (v46 >> 61)
          goto LABEL_154;
        v47 = (char *)operator new(8 * v46);
      }
      else
      {
        v47 = 0;
      }
      v48 = &v47[8 * v43];
      *(_QWORD *)v48 = v22;
      v42 = v48 + 8;
      if (v36 == v35)
      {
        v50 = v101;
      }
      else
      {
        do
        {
          v49 = *((_QWORD *)v35 - 1);
          v35 -= 8;
          *((_QWORD *)v48 - 1) = v49;
          v48 -= 8;
        }
        while (v35 != v36);
        v50 = v101;
        v36 = (char *)v101[1];
      }
      v50[1] = v48;
      v50[2] = v42;
      v50[3] = &v47[8 * v46];
      if (v36)
      {
        operator delete(v36);
        v41 = v101;
      }
      else
      {
        v41 = v50;
      }
    }
    else
    {
      v41 = v34;
      *(_QWORD *)v35 = v22;
      v42 = v35 + 8;
    }
    v51 = v100;
    v41[2] = v42;
    v53 = (char *)*((_QWORD *)v100 + 5);
    v52 = *((_QWORD *)v100 + 6);
    if ((unint64_t)v53 >= v52)
    {
      v55 = (char *)*((_QWORD *)v100 + 4);
      v56 = (v53 - v55) >> 3;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61)
        goto LABEL_153;
      v58 = v52 - (_QWORD)v55;
      if (v58 >> 2 > v57)
        v57 = v58 >> 2;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (v59)
      {
        if (v59 >> 61)
          goto LABEL_154;
        v60 = (char *)operator new(8 * v59);
      }
      else
      {
        v60 = 0;
      }
      v61 = &v60[8 * v56];
      *(_QWORD *)v61 = v22;
      v54 = v61 + 8;
      if (v53 == v55)
      {
        v51 = v100;
      }
      else
      {
        do
        {
          v62 = *((_QWORD *)v53 - 1);
          v53 -= 8;
          *((_QWORD *)v61 - 1) = v62;
          v61 -= 8;
        }
        while (v53 != v55);
        v51 = v100;
        v53 = (char *)*((_QWORD *)v100 + 4);
      }
      *((_QWORD *)v51 + 4) = v61;
      *((_QWORD *)v51 + 5) = v54;
      *((_QWORD *)v51 + 6) = &v60[8 * v59];
      if (v53)
        operator delete(v53);
    }
    else
    {
      *(_QWORD *)v53 = v22;
      v54 = v53 + 8;
    }
    *((_QWORD *)v51 + 5) = v54;
    v63 = (char *)*((_QWORD *)v51 + 4);
    if (v63 == v54)
    {
      v75 = v51;
      v74 = v54 - 8;
      *((_QWORD *)v75 + 5) = v54 - 8;
    }
    else
    {
      v64 = 0;
      v65 = 0;
      v66 = **((_QWORD **)v51 + 3);
      v67 = (char *)*((_QWORD *)v51 + 4);
      do
      {
        if ((~*(_DWORD *)(v66 + 48 * *(unsigned int *)(*(_QWORD *)v67 + 24) + 16) & 0x1000010) != 0)
        {
          LOBYTE(v70) = 0;
        }
        else
        {
          v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v67 + 40) + 24);
          v69 = (~*(_WORD *)(v66 + 48 * *(unsigned int *)(*(_QWORD *)v67 + 24) + 16) & 0x1010) != 0
             || (v68 & 0x4000000000000000) == 0;
          v70 = (v68 >> 3) & 1;
          if (!v69)
            LOBYTE(v70) = 0;
        }
        v64 += ((*(_QWORD *)(v66 + 48 * *(unsigned int *)(*(_QWORD *)v67 + 24) + 16) & 2) == 0) | ((v65 & 1) == 0);
        v67 += 8;
        v65 = v70;
      }
      while (v67 != v54);
      v71 = 0;
      v72 = (char *)*((_QWORD *)v51 + 4);
      do
      {
        v73 = *(_QWORD *)(*(_QWORD *)v72 + 16);
        if (*((_BYTE *)v51 + 16) && ((v71 + v73 - 1) ^ v71) >= 0x20)
          v71 = (v71 + 31) & 0xFFFFFFFFFFFFFFE0;
        v71 += v73;
        v72 += 8;
      }
      while (v72 != v54);
      v74 = v54 - 8;
      v75 = v100;
      *((_QWORD *)v100 + 5) = v54 - 8;
      if (v64 > *v100 || v71 > *((_QWORD *)v100 + 1))
      {
        v101[2] -= 8;
        v23 = 1;
        *(_BYTE *)(v20 + 36) = 1;
        *(_BYTE *)(a1 + 8) &= ~1u;
        *(_QWORD *)a1 = v20;
        v20 = 0;
        v21 = v99;
        goto LABEL_140;
      }
    }
    v76 = *((_QWORD *)v75 + 6);
    if ((unint64_t)v74 >= v76)
    {
      v77 = (v74 - v63) >> 3;
      v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) >> 61)
        goto LABEL_153;
      v79 = v76 - (_QWORD)v63;
      if (v79 >> 2 > v78)
        v78 = v79 >> 2;
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
        v80 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v80 = v78;
      if (v80)
      {
        if (v80 >> 61)
          goto LABEL_154;
        v81 = (char *)operator new(8 * v80);
      }
      else
      {
        v81 = 0;
      }
      v82 = &v81[8 * v77];
      *(_QWORD *)v82 = v22;
      v54 = v82 + 8;
      if (v74 == v63)
      {
        v84 = v100;
      }
      else
      {
        do
        {
          v83 = *((_QWORD *)v74 - 1);
          v74 -= 8;
          *((_QWORD *)v82 - 1) = v83;
          v82 -= 8;
        }
        while (v74 != v63);
        v84 = v100;
        v63 = (char *)*((_QWORD *)v100 + 4);
      }
      *((_QWORD *)v84 + 4) = v82;
      *((_QWORD *)v84 + 5) = v54;
      *((_QWORD *)v84 + 6) = &v81[8 * v80];
      v21 = v99;
      if (v63)
        operator delete(v63);
    }
    else
    {
      *(_QWORD *)v74 = v22;
      v21 = v99;
    }
    *((_QWORD *)v100 + 5) = v54;
    v86 = *(_QWORD **)(v20 + 16);
    v85 = *(_QWORD *)(v20 + 24);
    if ((unint64_t)v86 >= v85)
    {
      v88 = *(_QWORD **)(v20 + 8);
      v89 = v86 - v88;
      v90 = v89 + 1;
      if ((unint64_t)(v89 + 1) >> 61)
LABEL_153:
        abort();
      v91 = v85 - (_QWORD)v88;
      if (v91 >> 2 > v90)
        v90 = v91 >> 2;
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
        v92 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v92 = v90;
      if (v92)
      {
        if (v92 >> 61)
LABEL_154:
          sub_1C4764EE4();
        v93 = (char *)operator new(8 * v92);
      }
      else
      {
        v93 = 0;
      }
      v94 = &v93[8 * v89];
      *(_QWORD *)v94 = v22;
      v87 = v94 + 8;
      if (v86 != v88)
      {
        do
        {
          v95 = *--v86;
          *((_QWORD *)v94 - 1) = v95;
          v94 -= 8;
        }
        while (v86 != v88);
        v86 = *(_QWORD **)(v20 + 8);
      }
      *(_QWORD *)(v20 + 8) = v94;
      *(_QWORD *)(v20 + 16) = v87;
      *(_QWORD *)(v20 + 24) = &v93[8 * v92];
      if (v86)
        operator delete(v86);
      v21 = v99;
    }
    else
    {
      *v86 = v22;
      v87 = v86 + 1;
    }
    *(_QWORD *)(v20 + 16) = v87;
    if (sub_1C4764D38(*(_DWORD *)(v22 + 24), **(_QWORD **)(a2 + 8), (*(_QWORD *)(*(_QWORD *)(a2 + 24) + 192) & 0x22000000000) != 0))
    {
      *(_BYTE *)(a1 + 8) &= ~1u;
      *(_QWORD *)a1 = v20;
      v23 = 1;
      v20 = 0;
    }
    else
    {
      v23 = 0;
      a5 += *(_QWORD *)(v22 + 16);
    }
LABEL_140:
    if ((v119 & 1) != 0)
    {
      v96 = v118;
      v118 = 0;
      if (v96)
        (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
    }
  }
  while (!v23);
  if (v23 == 9)
  {
LABEL_145:
    *(_BYTE *)(a1 + 8) &= ~1u;
    *(_QWORD *)a1 = v20;
    goto LABEL_148;
  }
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
LABEL_148:
  if (__p)
    operator delete(__p);
  if (v113)
    operator delete(v113);
}

uint64_t sub_1C4764A44(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &off_1E7F93C88;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = &off_1E7F93CB8;
  v4 = (void **)(a1 + 8);
  sub_1C4764BBC(&v4);
  return a1;
}

void sub_1C4764AA4(uint64_t a1)
{
  void *v2;
  void **v3;

  *(_QWORD *)a1 = &off_1E7F93C88;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = &off_1E7F93CB8;
  v3 = (void **)(a1 + 8);
  sub_1C4764BBC(&v3);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4764B14(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_1C4764B1C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_1C4764B24(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E7F93CB8;
  v3 = (void **)(a1 + 8);
  sub_1C4764BBC(&v3);
  return a1;
}

void sub_1C4764B68(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = &off_1E7F93CB8;
  v1 = (void **)(a1 + 8);
  sub_1C4764BBC(&v1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4764BBC(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C4764C38(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &off_1E7F93CD8;
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v3);
  }
  *(_QWORD *)a1 = &off_1E7F93CB8;
  v5 = (void **)(a1 + 8);
  sub_1C4764BBC(&v5);
  return a1;
}

void sub_1C4764CA8(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)a1 = &off_1E7F93CD8;
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v3);
  }
  *(_QWORD *)a1 = &off_1E7F93CB8;
  v4 = (void **)(a1 + 8);
  sub_1C4764BBC(&v4);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4764D28(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_1C4764D30(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_1C4764D38(unsigned int a1, uint64_t a2, int a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 48 * a1 + 8);
  if ((v3 & 0xD00) == 0x400)
    return a3 ^ 1u;
  return (v3 & 0x400) != 0 || a1 - 789 < 3 || a1 - 4672 <= 1;
}

_QWORD *sub_1C4764D8C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E7F93D30;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1C4764DC8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E7F93D30;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4764E14(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 == v3)
    return 0;
  result = 0;
  v5 = 0;
  v6 = *a2;
  do
  {
    if ((~*(_DWORD *)(v6 + 48 * *(unsigned int *)(*(_QWORD *)v2 + 24) + 16) & 0x1000010) != 0)
    {
      LOBYTE(v9) = 0;
    }
    else
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 40) + 24);
      v8 = (~*(_WORD *)(v6 + 48 * *(unsigned int *)(*(_QWORD *)v2 + 24) + 16) & 0x1010) != 0
        || (v7 & 0x4000000000000000) == 0;
      v9 = (v7 >> 3) & 1;
      if (!v8)
        LOBYTE(v9) = 0;
    }
    result += ((*(_QWORD *)(v6 + 48 * *(unsigned int *)(*(_QWORD *)v2 + 24) + 16) & 2) == 0) | ((v5 & 1) == 0);
    v2 += 8;
    v5 = v9;
  }
  while (v2 != v3);
  return result;
}

uint64_t sub_1C4764EBC(int a1)
{
  if ((a1 - 360) >> 1 > 0xF9A)
    return 0;
  else
    return dword_1C63F4FD0[a1 - 360];
}

void sub_1C4764EE4()
{
  abort();
}

uint64_t sub_1C4764EF0(int a1)
{
  if ((a1 - 360) >> 1 > 0xF9A)
    return 0;
  else
    return dword_1C63FCCA8[a1 - 360];
}

uint64_t sub_1C4764F18(int a1)
{
  if ((a1 - 360) >> 1 > 0xF9A)
    return 0;
  else
    return dword_1C6404980[a1 - 360];
}

char *sub_1C4764F40@<X0>(uint64_t a1@<X8>)
{
  char *result;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  result = sub_1C4765AA4((char *)a1, 1uLL, 0);
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

char *sub_1C4764F94@<X0>(uint64_t a1@<X8>)
{
  char *result;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  result = sub_1C4765AA4((char *)a1, 1uLL, 0);
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

char *sub_1C4764FE8@<X0>(uint64_t a1@<X8>)
{
  char *result;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  result = sub_1C4765AA4((char *)a1, 1uLL, 0);
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

uint64_t sub_1C4765044()
{
  return 0;
}

uint64_t sub_1C476504C()
{
  return 0;
}

uint64_t sub_1C4765054(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_1C47650F0(a1 + 5152);
  sub_1C47650F0(a1 + 3944);
  sub_1C47650F0(a1 + 2736);
  sub_1C47650F0(a1 + 1528);
  sub_1C47650F0(a1 + 320);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 288), 8);
  v2 = *(void **)(a1 + 160);
  if (v2 != (void *)(a1 + 176))
    free(v2);
  v3 = *(void **)(a1 + 80);
  if (v3 != (void *)(a1 + 96))
    free(v3);
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 16), 8);
  return a1;
}

uint64_t sub_1C47650F0(uint64_t a1)
{
  void ***v2;
  void ***v3;
  void **v4;
  void *v5;
  void **v7;

  v3 = *(void ****)(a1 + 272);
  v2 = *(void ****)(a1 + 280);
  while (v3 != v2)
  {
    v4 = *v3;
    if (*v3)
    {
      v7 = *v3;
      sub_1C4765410(&v7);
      MEMORY[0x1CAA32FC0](v4, 0x1020C4016EE4530);
      v2 = *(void ****)(a1 + 280);
    }
    ++v3;
  }
  v7 = (void **)(a1 + 1176);
  sub_1C4765250(&v7);
  if (*(char *)(a1 + 1175) < 0)
    operator delete(*(void **)(a1 + 1152));
  sub_1C47652C8(a1 + 728);
  sub_1C47653C0(a1 + 704, *(char **)(a1 + 712));
  v7 = (void **)(a1 + 680);
  sub_1C4765410(&v7);
  sub_1C4765488(a1 + 656, *(char **)(a1 + 664));
  sub_1C47654E4(a1 + 632, *(_QWORD **)(a1 + 640));
  if (*(char *)(a1 + 631) < 0)
    operator delete(*(void **)(a1 + 608));
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  sub_1C6124764(a1 + 432);
  sub_1C4765570((_QWORD *)(a1 + 336));
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  v5 = *(void **)(a1 + 272);
  if (v5)
  {
    *(_QWORD *)(a1 + 280) = v5;
    operator delete(v5);
  }
  sub_1C6124804(a1 + 224);
  sub_1C6124924(a1 + 176);
  sub_1C476582C(a1 + 128);
  sub_1C4765A2C(a1 + 80);
  v7 = (void **)(a1 + 56);
  sub_1C4765410(&v7);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_1C4765250(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 17) < 0)
          operator delete(*(v4 - 5));
        v4 -= 9;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C47652C8(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  if (*(char *)(a1 + 311) < 0)
    operator delete(*(void **)(a1 + 288));
  v3 = (void **)(a1 + 264);
  sub_1C4765410(&v3);
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_1C47653C0(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1C47653C0(a1, *(_QWORD *)a2);
    sub_1C47653C0(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_1C4765410(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C4765488(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1C4765488(a1, *(_QWORD *)a2);
    sub_1C4765488(a1, *((_QWORD *)a2 + 1));
    sub_1C47653C0((uint64_t)(a2 + 56), *((char **)a2 + 8));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_1C47654E4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1C47654E4(a1, *a2);
    sub_1C47654E4(a1, a2[1]);
    sub_1C4765530((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1C4765530(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1C4765570(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[11];
  if (v2)
  {
    sub_1C47655E8(a1[11], *(_QWORD **)(v2 + 8));
    MEMORY[0x1CAA32FC0](v2, 0x1060C40C2B13FB5);
  }
  sub_1C4765628(a1);
  if (*((_BYTE *)a1 + 8) && *a1)
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  *a1 = 0;
  *((_BYTE *)a1 + 8) = 0;
  return a1;
}

void sub_1C47655E8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1C47655E8(a1, *a2);
    sub_1C47655E8(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *sub_1C4765628(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[5];
  if (v2)
  {
    v3 = *result;
    if (*v1)
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    else
      result = (_QWORD *)MEMORY[0x1CAA32F9C](v2, 0x1000C8077774924);
  }
  v1[5] = 0;
  return result;
}

uint64_t sub_1C4765684(uint64_t a1)
{
  void **v3;

  sub_1C47656E4(a1 + 72);
  v3 = (void **)(a1 + 48);
  sub_1C4765410(&v3);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C47656E4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        if (*(char *)(v4 + 55) < 0)
          operator delete(*(void **)(v4 + 32));
        MEMORY[0x1CAA32FC0](v4, 0x1032C40E9BF265ALL);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1C47653C0(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1C4765778(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void **v6;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        sub_1C47656E4(v4 + 88);
        v6 = (void **)(v4 + 24);
        sub_1C4765410(&v6);
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        MEMORY[0x1CAA32FC0](v4, 0x10B2C4072A4B994);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1C47653C0(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1C476582C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void **v6;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        sub_1C4765904((uint64_t *)(v4 + 224), 0);
        sub_1C4765958(v4 + 152);
        sub_1C47656E4(v4 + 72);
        v6 = (void **)(v4 + 48);
        sub_1C4765410(&v6);
        if (*(char *)(v4 + 47) < 0)
          operator delete(*(void **)(v4 + 24));
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        MEMORY[0x1CAA32FC0](v4, 0x10B2C4058EA06FBLL);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1C47653C0(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t *sub_1C4765904(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t sub_1C4765958(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void **v6;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        if (*(char *)(v4 + 207) < 0)
          operator delete(*(void **)(v4 + 184));
        sub_1C47656E4(v4 + 72);
        v6 = (void **)(v4 + 48);
        sub_1C4765410(&v6);
        if (*(char *)(v4 + 47) < 0)
          operator delete(*(void **)(v4 + 24));
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        MEMORY[0x1CAA32FC0](v4, 0x10B2C40559199D4);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1C47653C0(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1C4765A2C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v3 = *(_QWORD **)(a1 + 24);
  v2 = *(_QWORD **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        MEMORY[0x1CAA32FC0](*v3, 0x1020C4001A1C0B8);
        v2 = *(_QWORD **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(_QWORD **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1C47653C0(a1, *(char **)(a1 + 8));
  return a1;
}

char *sub_1C4765AA4(char *result, unint64_t a2, uint64_t a3)
{
  _QWORD **v5;
  _QWORD *v6;
  unint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;

  v5 = (_QWORD **)result;
  if (*((unsigned int *)result + 3) >= a2)
  {
    v9 = *(_QWORD **)result;
    v8 = result + 8;
    v10 = *((unsigned int *)result + 2);
    if (v10 >= a2)
      v11 = a2;
    else
      v11 = *((unsigned int *)result + 2);
    if (v11)
    {
      v12 = *(_QWORD **)result;
      do
      {
        *v12++ = a3;
        --v11;
      }
      while (v11);
    }
    v13 = v10 - a2;
    if (v10 < a2)
    {
      v14 = &v9[v10];
      do
        *v14++ = a3;
      while (!__CFADD__(v13++, 1));
    }
  }
  else
  {
    *((_DWORD *)result + 2) = 0;
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 16), a2, 8);
    v6 = *v5;
    v7 = a2;
    do
    {
      *v6++ = a3;
      --v7;
    }
    while (v7);
    v8 = v5 + 1;
  }
  *v8 = a2;
  return result;
}

uint64_t sub_1C4765B54(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  char v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int16 *v20;
  int v21;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int64_t v30;
  unint64_t v31;
  int v32;
  uint64_t *v33;
  int v34;
  unsigned int v35;
  _DWORD *v36;
  int v37;
  _DWORD *v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  _DWORD *v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v54;
  int v55;
  _DWORD *v56;
  int v57;
  _DWORD *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  int v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  int v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  int v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  int v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  int v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t result;
  int v157;
  _QWORD *v158;
  uint64_t v159;
  unsigned int v160;
  int v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  unsigned int v167;
  int v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _DWORD *v189;
  _DWORD *v190;
  uint64_t v191;
  _DWORD *v192;
  uint64_t v195;
  _DWORD *v196;
  _DWORD *v197;
  _DWORD *v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  _QWORD v206[4];

  v4 = a2;
  v206[2] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 328);
  v191 = a2 + 320;
  if (v6 != a2 + 320)
  {
    v7 = 0;
    v8 = a1 + 24;
    v197 = a1 + 9;
    v198 = a1 + 25;
    v189 = a1 + 8;
    v190 = a1 + 10;
    v196 = a1 + 7;
    v9 = 1;
    v192 = a1 + 24;
    while (1)
    {
      v195 = v6;
      if (!byte_1ED8312F8)
        goto LABEL_308;
      v10 = *(_DWORD *)(a3 + 264);
      if (!v10)
        goto LABEL_120;
      v11 = *(_QWORD *)(a3 + 248);
      v12 = v10 - 1;
      v13 = (v10 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v14 = *(_QWORD *)(v11 + 16 * v13);
      if (v6 != v14)
      {
        v15 = 1;
        do
        {
          if (v14 == -4096)
            goto LABEL_120;
          v16 = v13 + v15++;
          v13 = v16 & v12;
          v14 = *(_QWORD *)(v11 + 16 * v13);
        }
        while (v6 != v14);
      }
      if (*(_QWORD *)(v11 + 16 * v13 + 8))
      {
LABEL_308:
        v17 = v6 + 48;
        v18 = *(_QWORD *)(v6 + 56);
        if (v18 != v6 + 48)
          break;
      }
LABEL_120:
      v6 = *(_QWORD *)(v195 + 8);
      if (v6 == v191)
        goto LABEL_121;
    }
    v199 = 0;
    v19 = 0;
LABEL_12:
    v20 = *(unsigned __int16 **)(v18 + 16);
    v21 = *v20;
    v23 = (v21 - 9) <= 0x3C && ((1 << (v21 - 9)) & 0x1000000000000605) != 0
       || v21 == 0;
    if (v23 || (v20[4] & 0x10) != 0)
      goto LABEL_108;
    v24 = *((_QWORD *)v20 + 2);
    if (!(v9 & 1 | (((v7 ^ v24) & 1) == 0)))
      ++a1[11];
    v25 = 12;
    if ((v24 & 1) != 0)
      v25 = 3;
    ++a1[v25];
    if (v21 == 13430)
    {
      v199 = 0;
      a1[4] += v19;
      v19 = 0;
      if ((v24 & 1) == 0)
        goto LABEL_69;
    }
    else if ((v24 & 0x10120) != 0)
    {
      v19 = 0;
      v199 = 1;
      if ((v24 & 1) == 0)
        goto LABEL_69;
    }
    else
    {
      v19 += v199 & 1;
      if ((v24 & 1) == 0)
        goto LABEL_69;
    }
    v201 = 1;
    v202 = -1;
    v203 = -1;
    v204 = v206;
    v205 = 0x400000000;
    if (!llvm::MachineInstr::getNumExplicitOperands(v18))
      goto LABEL_66;
    v26 = 0;
    v27 = 0;
    while (1)
    {
      v28 = *(_QWORD *)(v18 + 32);
      v29 = *(_DWORD *)(v28 + 32 * v27);
      if (v29 == 7 && (v29 & 0xFFF00u) <= 0x400)
      {
        LODWORD(v200) = 0;
        v30 = *(unsigned int *)(v28 + 32 * v27 + 4) | ((unint64_t)*(unsigned int *)(v28 + 32 * v27 + 24) << 32);
        v31 = (v30 + (unint64_t)(v30 < 0)) >> 1;
        LODWORD(v200) = v31;
        if ((v201 & 1) != 0)
        {
          v32 = 4;
          v33 = &v202;
        }
        else
        {
          v32 = v203;
          if (!(_DWORD)v203)
          {
            v42 = 0;
LABEL_50:
            v43 = sub_1C47686DC((uint64_t)&v201, (uint64_t)&v200, &v200, v42);
            *v43 = v200;
            v44 = v200;
            v45 = v205;
            if (v205 >= (unint64_t)HIDWORD(v205))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)v206, v205 + 1, 4);
              v45 = v205;
            }
            *((_DWORD *)v204 + v45) = v44;
            v26 = v205 + 1;
            LODWORD(v205) = v205 + 1;
            goto LABEL_53;
          }
          v33 = (uint64_t *)v202;
        }
        v34 = v32 - 1;
        v35 = v34 & (37 * v31);
        v36 = (_DWORD *)v33 + v35;
        v37 = *v36;
        if (*v36 != (_DWORD)v31)
        {
          v38 = 0;
          v39 = 1;
          while (v37 != -1)
          {
            if (v38)
              v40 = 0;
            else
              v40 = v37 == -2;
            if (v40)
              v38 = v36;
            v41 = v35 + v39++;
            v35 = v41 & v34;
            v36 = (_DWORD *)v33 + v35;
            v37 = *v36;
            if (*v36 == (_DWORD)v31)
              goto LABEL_53;
          }
          if (v38)
            v42 = v38;
          else
            v42 = v36;
          goto LABEL_50;
        }
      }
LABEL_53:
      if (++v27 >= (unint64_t)llvm::MachineInstr::getNumExplicitOperands(v18))
      {
        v46 = v204;
        if (v26 == 2)
        {
          v47 = *((_DWORD *)v204 + 1);
          if (*(_DWORD *)v204 != v47 && ((v47 ^ *(_DWORD *)v204) & 0xC) == 0)
            ++a1[5];
        }
        v4 = a2;
        v8 = v192;
        if (v46 != v206)
          free(v46);
LABEL_66:
        if ((v201 & 1) == 0)
          MEMORY[0x1CAA32FB4](v202, 4);
        v20 = *(unsigned __int16 **)(v18 + 16);
        v21 = *v20;
LABEL_69:
        if (v21 == 13430)
          ++a1[13];
        v49 = *(_WORD *)(v18 + 44);
        v50 = *((_QWORD *)v20 + 1);
        if ((v49 & 0xC) == 0 || (v49 & 4) != 0)
        {
          if ((v50 & 0x400) == 0)
            goto LABEL_79;
LABEL_78:
          ++a1[14];
          goto LABEL_79;
        }
        v51 = v18;
        if ((v50 & 0x400) != 0)
          goto LABEL_78;
        while ((*(_WORD *)(v51 + 44) & 8) != 0)
        {
          v51 = *(_QWORD *)(v51 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v51 + 16) + 9) & 4) != 0)
            goto LABEL_78;
        }
LABEL_79:
        v52 = *((_QWORD *)v20 + 2);
        if ((v52 & 0x20) != 0)
          ++a1[15];
        if ((v52 - 12440) < 0x30 || (v52 - 12868) <= 3)
          ++a1[16];
        if ((v52 & 0x200) == 0)
        {
          if ((v52 & 0x100) == 0)
            goto LABEL_88;
LABEL_114:
          ++a1[18];
          if ((v52 & 0x2000) != 0)
            goto LABEL_115;
LABEL_89:
          if ((v52 & 0x4000) == 0)
            goto LABEL_90;
LABEL_116:
          ++a1[20];
          if ((v52 & 0x8000) != 0)
            goto LABEL_117;
LABEL_91:
          if ((v52 & 0x10000) == 0)
            goto LABEL_92;
LABEL_118:
          ++a1[22];
          if ((v52 & 0x20000) == 0)
            goto LABEL_94;
LABEL_93:
          ++a1[23];
          goto LABEL_94;
        }
        ++a1[17];
        if ((v52 & 0x100) != 0)
          goto LABEL_114;
LABEL_88:
        if ((v52 & 0x2000) == 0)
          goto LABEL_89;
LABEL_115:
        ++a1[19];
        if ((v52 & 0x4000) != 0)
          goto LABEL_116;
LABEL_90:
        if ((v52 & 0x8000) == 0)
          goto LABEL_91;
LABEL_117:
        ++a1[21];
        if ((v52 & 0x10000) != 0)
          goto LABEL_118;
LABEL_92:
        if ((v52 & 0x20000) != 0)
          goto LABEL_93;
LABEL_94:
        v54 = v8;
        if ((v21 - 2502) < 0x28 || (v54 = v198, (v21 - 11867) <= 7))
          ++*v54;
        if ((v52 & 0x80000) != 0)
        {
          ++a1[6];
          v55 = sub_1C4768200(*(_QWORD *)(v4 + 16), v18);
          v56 = v197;
          if (v55 == 2)
            goto LABEL_101;
          if (v55 == 4)
          {
            v56 = v190;
LABEL_101:
            ++*v56;
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v18 + 16) + 18) & 0x10) != 0)
        {
          ++a1[6];
          v57 = sub_1C4768200(*(_QWORD *)(v4 + 16), v18);
          v58 = v196;
          if (v57 == 2)
            goto LABEL_106;
          if (v57 == 4)
          {
            v58 = v189;
LABEL_106:
            ++*v58;
          }
        }
        v9 = 0;
        ++a1[2];
        v7 = v24;
LABEL_108:
        if ((*(_BYTE *)v18 & 4) == 0)
        {
          while ((*(_WORD *)(v18 + 44) & 8) != 0)
            v18 = *(_QWORD *)(v18 + 8);
        }
        v18 = *(_QWORD *)(v18 + 8);
        if (v18 == v17)
          goto LABEL_120;
        goto LABEL_12;
      }
    }
  }
LABEL_121:
  v59 = sub_1C4768324(v4);
  v60 = a1[26];
  if (v60 <= v59)
    v60 = v59;
  a1[26] = v60;
  v61 = *(_QWORD *)(v4 + 344);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 128))(&v201, v61, 3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 136))(&v200, v61, 3);
  v62 = v200;
  v63 = v201;
  if (v201)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v201 + 16))(&v201, v201);
    v64 = v201;
  }
  else
  {
    v64 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v62 + 16))(&v201, v62);
  v65 = v201;
  v66 = 0;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 24))(v64, v65) & 1) == 0)
  {
    v77 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 32))(v64);
    v78 = *v77;
    v79 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 400))(v61, *v77);
    sub_1C4768AD0(a4, *(_QWORD *)(v78 + 24));
    v82 = v81;
    if ((_DWORD)v80 == 1)
    if (v79 + ((((unint64_t)(v82 + 7) >> 3) + 3) >> 2) > v66)
      v66 = v79 + ((((unint64_t)(v82 + 7) >> 3) + 3) >> 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
  }
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v61 + 128))(&v201, v61, 0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v61 + 136))(&v200, v61, 0);
  v67 = v200;
  v68 = v201;
  if (v201)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v201 + 16))(&v201, v201);
    v69 = v201;
  }
  else
  {
    v69 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v67 + 16))(&v201, v67);
  v70 = v201;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 24))(v69, v70) & 1) == 0)
  {
    v71 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 32))(v69);
    v72 = *v71;
    v73 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 400))(v61, *v71);
    sub_1C4768AD0(a4, *(_QWORD *)(v72 + 24));
    v76 = v75;
    if ((_DWORD)v74 == 1)
    if (v73 + ((((unint64_t)(v76 + 7) >> 3) + 3) >> 2) > v66)
      v66 = v73 + ((((unint64_t)(v76 + 7) >> 3) + 3) >> 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 40))(v69);
  }
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 128))(&v201, v61, 1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 136))(&v200, v61, 1);
  v83 = v200;
  v84 = v201;
  if (v201)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v201 + 16))(&v201, v201);
    v85 = v201;
  }
  else
  {
    v85 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v83 + 16))(&v201, v83);
  v86 = v201;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v85 + 24))(v85, v86) & 1) == 0)
  {
    v87 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 32))(v85);
    v88 = *v87;
    v89 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 400))(v61, *v87);
    sub_1C4768AD0(a4, *(_QWORD *)(v88 + 24));
    v92 = v91;
    if ((_DWORD)v90 == 1)
    if (v89 + ((((unint64_t)(v92 + 7) >> 3) + 3) >> 2) > v66)
      v66 = v89 + ((((unint64_t)(v92 + 7) >> 3) + 3) >> 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 40))(v85);
  }
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 128))(&v201, v61, 5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 136))(&v200, v61, 5);
  v93 = v200;
  v94 = v201;
  if (v201)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v201 + 16))(&v201, v201);
    v95 = v201;
  }
  else
  {
    v95 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v93 + 16))(&v201, v93);
  v96 = v201;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v95 + 24))(v95, v96) & 1) == 0)
  {
    v97 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v95 + 32))(v95);
    v98 = *v97;
    v99 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 400))(v61, *v97);
    sub_1C4768AD0(a4, *(_QWORD *)(v98 + 24));
    v102 = v101;
    if ((_DWORD)v100 == 1)
    if (v99 + ((((unint64_t)(v102 + 7) >> 3) + 3) >> 2) > v66)
      v66 = v99 + ((((unint64_t)(v102 + 7) >> 3) + 3) >> 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 40))(v95);
  }
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 128))(&v201, v61, 4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 136))(&v200, v61, 4);
  v103 = v200;
  v104 = v201;
  if (v201)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v201 + 16))(&v201, v201);
    v105 = v201;
  }
  else
  {
    v105 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v103 + 16))(&v201, v103);
  v106 = v201;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v105 + 24))(v105, v106) & 1) == 0)
  {
    v107 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 32))(v105);
    v108 = *v107;
    v109 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 400))(v61, *v107);
    sub_1C4768AD0(a4, *(_QWORD *)(v108 + 24));
    v112 = v111;
    if ((_DWORD)v110 == 1)
    if (v109 + ((((unint64_t)(v112 + 7) >> 3) + 3) >> 2) > v66)
      v66 = v109 + ((((unint64_t)(v112 + 7) >> 3) + 3) >> 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 40))(v105);
  }
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 128))(&v201, v61, 6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 136))(&v200, v61, 6);
  v113 = v200;
  v114 = v201;
  if (v201)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v201 + 16))(&v201, v201);
    v115 = v201;
  }
  else
  {
    v115 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v113 + 16))(&v201, v113);
  v116 = v201;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v115 + 24))(v115, v116) & 1) == 0)
  {
    v117 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v115 + 32))(v115);
    v118 = *v117;
    v119 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 400))(v61, *v117);
    sub_1C4768AD0(a4, *(_QWORD *)(v118 + 24));
    v122 = v121;
    if ((_DWORD)v120 == 1)
    if (v119 + ((((unint64_t)(v122 + 7) >> 3) + 3) >> 2) > v66)
      v66 = v119 + ((((unint64_t)(v122 + 7) >> 3) + 3) >> 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 40))(v115);
  }
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 128))(&v201, v61, 7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 136))(&v200, v61, 7);
  v123 = v200;
  v124 = v201;
  if (v201)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v201 + 16))(&v201, v201);
    v125 = v201;
  }
  else
  {
    v125 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v123 + 16))(&v201, v123);
  v126 = v201;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v125 + 24))(v125, v126) & 1) == 0)
  {
    v127 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 32))(v125);
    v128 = *v127;
    v129 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 400))(v61, *v127);
    sub_1C4768AD0(a4, *(_QWORD *)(v128 + 24));
    v132 = v131;
    if ((_DWORD)v130 == 1)
    if (v129 + ((((unint64_t)(v132 + 7) >> 3) + 3) >> 2) > v66)
      v66 = v129 + ((((unint64_t)(v132 + 7) >> 3) + 3) >> 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 40))(v125);
  }
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  if (v124)
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  a1[27] = v66;
  v133 = a2;
  v134 = *(_QWORD *)(a2 + 344);
  v135 = sub_1C5EAC85C(v134, 9, 0);
  v136 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 176))(v134, 20);
  if (v136)
  {
    if (v136 == 1)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v134 + 128))(&v201, v134, 20);
      v172 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v201 + 32))(v201);
      v173 = v201;
      v201 = 0;
      if (v173)
        (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
      if (!v172)
        goto LABEL_215;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v134 + 128))(&v201, v134, 20);
      v172 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v201 + 32))(v201);
      v184 = v201;
      v201 = 0;
      if (v184)
        (*(void (**)(uint64_t))(*(_QWORD *)v184 + 8))(v184);
      v133 = a2;
      if (!v172)
        goto LABEL_215;
    }
    v174 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 400))(v134, v172);
    if (v135 <= v174 + 1)
      v135 = (v174 + 1);
    else
      v135 = v135;
  }
LABEL_215:
  v137 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 176))(v134, 21);
  if (!v137)
    goto LABEL_216;
  if (v137 == 1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v134 + 128))(&v201, v134, 21);
    v175 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v201 + 32))(v201);
    v176 = v201;
    v201 = 0;
    if (v176)
      (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
    if (v175)
    {
LABEL_264:
      v177 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 400))(v134, v175);
      if (v135 <= v177 + 1)
        v135 = (v177 + 1);
      else
        v135 = v135;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v134 + 128))(&v201, v134, 21);
    v175 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v201 + 32))(v201);
    v185 = v201;
    v201 = 0;
    if (v185)
      (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
    v133 = a2;
    if (v175)
      goto LABEL_264;
  }
LABEL_216:
  v138 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 176))(v134, 22);
  if (!v138)
    goto LABEL_217;
  if (v138 == 1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v134 + 128))(&v201, v134, 22);
    v178 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v201 + 32))(v201);
    v179 = v201;
    v201 = 0;
    if (v179)
      (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
    if (v178)
    {
LABEL_271:
      v180 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 400))(v134, v178);
      if (v135 <= v180 + 1)
        v135 = (v180 + 1);
      else
        v135 = v135;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v134 + 128))(&v201, v134, 22);
    v178 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v201 + 32))(v201);
    v186 = v201;
    v201 = 0;
    if (v186)
      (*(void (**)(uint64_t))(*(_QWORD *)v186 + 8))(v186);
    v133 = a2;
    if (v178)
      goto LABEL_271;
  }
LABEL_217:
  v139 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 176))(v134, 23);
  if (!v139)
    goto LABEL_218;
  if (v139 == 1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v134 + 128))(&v201, v134, 23);
    v181 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v201 + 32))(v201);
    v182 = v201;
    v201 = 0;
    if (v182)
      (*(void (**)(uint64_t))(*(_QWORD *)v182 + 8))(v182);
    if (v181)
    {
LABEL_278:
      v183 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 400))(v134, v181);
      if (v135 <= v183 + 1)
        v135 = (v183 + 1);
      else
        v135 = v135;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v134 + 128))(&v201, v134, 23);
    v181 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v201 + 32))(v201);
    v187 = v201;
    v201 = 0;
    if (v187)
      (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
    v133 = a2;
    if (v181)
      goto LABEL_278;
  }
LABEL_218:
  v140 = sub_1C5EAC85C(v134, 13, v135);
  a1[29] = sub_1C5EAC85C(v134, 12, v140);
  v141 = *(_QWORD *)(v133 + 344);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v141 + 128))(&v201, v141, 0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v141 + 136))(&v200, v141, 0);
  v143 = v200;
  v142 = v201;
  if (v201)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v201 + 16))(&v201, v201);
    v144 = v201;
  }
  else
  {
    v144 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v143 + 16))(&v201, v143);
  v145 = v201;
  v146 = 0;
  v147 = -1;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v144 + 24))(v144, v145) & 1) == 0)
  {
    v158 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v144 + 32))(v144);
    v159 = *v158;
    v160 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v141 + 400))(v141, *v158);
    if (v147 >= v160)
      v147 = v160;
    v161 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v141 + 400))(v141, v159);
    sub_1C4768AD0(a4, *(_QWORD *)(v159 + 24));
    v164 = v163;
    if ((_DWORD)v162 == 1)
    if (v161 + ((((unint64_t)(v164 + 7) >> 3) + 3) >> 2) > v146)
      v146 = v161 + ((((unint64_t)(v164 + 7) >> 3) + 3) >> 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v144 + 40))(v144);
  }
  if (v145)
    (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
  (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
  (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
  if (v142)
    (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
  v148 = 4 * (v146 - v147);
  if (!v146)
    v148 = 0;
  a1[30] = v148;
  v149 = *(_QWORD *)(a2 + 344);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v149 + 128))(&v201, v149, 0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v149 + 136))(&v200, v149, 0);
  v151 = v200;
  v150 = v201;
  if (v201)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v201 + 16))(&v201, v201);
    v152 = v201;
  }
  else
  {
    v152 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v151 + 16))(&v201, v151);
  v153 = v201;
  v154 = 0;
  v155 = -1;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v152 + 24))(v152, v153) & 1) == 0)
  {
    v165 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 32))(v152);
    v166 = *v165;
    v167 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v149 + 400))(v149, *v165);
    if (v155 >= v167)
      v155 = v167;
    v168 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v149 + 400))(v149, v166);
    sub_1C4768AD0(a4, *(_QWORD *)(v166 + 24));
    v171 = v170;
    if ((_DWORD)v169 == 1)
    if (v168 + ((((unint64_t)(v171 + 7) >> 3) + 3) >> 2) > v154)
      v154 = v168 + ((((unint64_t)(v171 + 7) >> 3) + 3) >> 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v152 + 40))(v152);
  }
  if (v153)
    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  (*(void (**)(uint64_t))(*(_QWORD *)v152 + 8))(v152);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
  if (v150)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
  v157 = 4 * (v154 - v155);
  if (!v154)
    v157 = 0;
  a1[31] = v157;
  return result;
}

uint64_t sub_1C4767220()
{
  return 0;
}

uint64_t sub_1C4767228(uint64_t a1, _QWORD *a2)
{
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;

  v3 = sub_1C4768324((uint64_t)a2);
  if (*(_BYTE *)((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a2[1] + 16))(a2[1], *a2) + 289))
  {
    v4 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a2[1] + 16))(a2[1], *a2) + 303);
    v5 = v3 <= 1 ? 1 : v3;
    if (!v4)
      v3 = v5;
  }
  v6 = (v3 + 7) & 0xFFFFFFF8;
  if (v6 >= 0xF8)
    return 248;
  else
    return v6;
}

uint64_t sub_1C47672A0()
{
  return 0;
}

uint64_t sub_1C47672A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  unsigned int v4;

  v2 = *(_QWORD *)(a2 + 328);
  if (v2 != a2 + 320)
  {
    while (2)
    {
      for (i = *(_QWORD *)(v2 + 56); i != v2 + 48; i = *(_QWORD *)(i + 8))
      {
        v4 = **(unsigned __int16 **)(i + 16);
        if (v4 > 0x2FB6)
        {
          if (v4 == 12215 || v4 == 13429)
            return 1;
        }
        else if (v4 == 11875 || v4 == 12156)
        {
          return 1;
        }
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v2 = *(_QWORD *)(v2 + 8);
      if (v2 != a2 + 320)
        continue;
      break;
    }
  }
  return 0;
}

uint64_t sub_1C4767344(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  v3 = v2 + 2 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  v4 = v3 + 3 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  v5 = v4 + 4 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  v6 = v5 + 5 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  v7 = v6 + 6 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  v8 = v7 + 8 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  v9 = v8 + 12 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  v10 = v9 + 16 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  return v10 + 32 * (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
}

uint64_t sub_1C4767434()
{
  return 0;
}

uint64_t sub_1C476743C()
{
  return 0;
}

uint64_t sub_1C4767444()
{
  return 0;
}

uint64_t sub_1C476744C()
{
  return 0;
}

uint64_t sub_1C4767454()
{
  return 0;
}

uint64_t sub_1C476745C()
{
  return 0;
}

uint64_t sub_1C4767464()
{
  return 0;
}

uint64_t sub_1C476746C()
{
  return 0;
}

uint64_t sub_1C4767474()
{
  return 0;
}

uint64_t sub_1C476747C()
{
  return 0;
}

uint64_t sub_1C4767484()
{
  return 0;
}

uint64_t sub_1C476748C()
{
  return 0;
}

uint64_t sub_1C4767494()
{
  return 0;
}

uint64_t sub_1C476749C()
{
  return 0;
}

uint64_t sub_1C47674A4()
{
  return 0;
}

uint64_t sub_1C47674AC()
{
  return 0;
}

uint64_t sub_1C47674B4()
{
  return 0;
}

uint64_t sub_1C47674BC()
{
  return 0;
}

uint64_t sub_1C47674C4()
{
  return 0;
}

uint64_t sub_1C47674CC()
{
  return 0;
}

uint64_t sub_1C47674D4()
{
  return 0;
}

uint64_t sub_1C47674DC()
{
  return 0;
}

uint64_t sub_1C47674E4()
{
  return 0;
}

uint64_t sub_1C47674EC()
{
  return 0;
}

uint64_t sub_1C47674F4()
{
  return 0;
}

uint64_t sub_1C47674FC()
{
  return 0;
}

uint64_t sub_1C4767504()
{
  return 0;
}

uint64_t sub_1C476750C()
{
  return 0;
}

uint64_t sub_1C4767514()
{
  return 0;
}

uint64_t sub_1C476751C()
{
  return 0;
}

uint64_t sub_1C4767524()
{
  return 0;
}

double sub_1C476752C()
{
  return 0.0;
}

double sub_1C4767534()
{
  return 0.0;
}

double sub_1C476753C()
{
  return 0.0;
}

double sub_1C4767544()
{
  return 0.0;
}

uint64_t sub_1C476754C()
{
  return 0;
}

uint64_t sub_1C4767554()
{
  return 0;
}

uint64_t sub_1C476755C()
{
  return 0;
}

uint64_t sub_1C4767564()
{
  return 0;
}

uint64_t sub_1C476756C()
{
  return 0;
}

uint64_t sub_1C4767574()
{
  return 0;
}

uint64_t sub_1C476757C()
{
  return 0;
}

uint64_t sub_1C4767584()
{
  return 0;
}

uint64_t sub_1C476758C()
{
  return 0;
}

uint64_t sub_1C4767594()
{
  return 0;
}

uint64_t sub_1C476759C()
{
  return 0;
}

uint64_t sub_1C47675A4()
{
  return 0;
}

uint64_t sub_1C47675AC()
{
  return 0;
}

void sub_1C47675B4(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  void *__p[4];
  void **v36;

  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  v4 = a1[2];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "TotalInstructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v4;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v5 = a1[3];
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "DataInstructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v5;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v6 = a1[4];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C680;
  strcpy((char *)__p[0], "LatencyHidingInstructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v6;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v7 = a1[5];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "SharedBankConflicts");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v7;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v8 = a1[6];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "ALUInstructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v8;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v9 = a1[7];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "F16Instructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v9;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v10 = a1[8];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "F32Instructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v10;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v11 = a1[9];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Int16Instructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v11;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v12 = a1[10];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "Int32Instructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v12;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v13 = a1[11];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "ControlDataSwitches");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v13;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v14 = a1[12];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "ControlInstructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v14;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v15 = a1[13];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "WDFInstructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v15;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v16 = a1[14];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "BranchInstructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v16;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v17 = a1[15];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "SampleInstructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v17;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v18 = a1[16];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C690;
  strcpy((char *)__p[0], "TextureWriteInstructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v18;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v19 = a1[17];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "IterateInstructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v19;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v20 = a1[18];
  strcpy((char *)__p, "GlobalLoadInstructions");
  HIBYTE(__p[2]) = 22;
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v20;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v21 = a1[19];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6A0;
  strcpy((char *)__p[0], "GlobalStoreInstructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v21;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v22 = a1[20];
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "LocalLoadInstructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v22;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v23 = a1[21];
  strcpy((char *)__p, "LocalStoreInstructions");
  HIBYTE(__p[2]) = 22;
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v23;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v24 = a1[22];
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "StackLoadInstructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v24;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v25 = a1[23];
  strcpy((char *)__p, "StackStoreInstructions");
  HIBYTE(__p[2]) = 22;
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v25;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v26 = a1[25];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6B0;
  strcpy((char *)__p[0], "ThreadgroupAtomicInstructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v26;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v27 = a1[24];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C690;
  strcpy((char *)__p[0], "DeviceAtomicInstructions");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v27;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v28 = a1[26];
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "TempRegisterCount");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v28;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v29 = a1[27];
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "SharedRegisterCount");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v29;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v30 = a1[28];
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "VIRegisterCount");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v30;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v31 = a1[29];
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "CoeffRegisterCount");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v31;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v32 = a1[30];
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C6A0;
  strcpy((char *)__p[0], "ImageStateBindingsBytes");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v32;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v33 = a1[31];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_1C640C680;
  strcpy((char *)__p[0], "SamplerStateBindingsBytes");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v33;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v34 = a1[32];
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "StackBytes");
  v36 = __p;
  *((_DWORD *)sub_1C4768C98((uint64_t)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v36) + 14) = v34;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

uint64_t sub_1C47681A4(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))
{
  uint64_t result;
  unsigned int v5;

  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 24);
  result = (**a3)(a3, 11, 0, 1, 4);
  v5 = *(_DWORD *)(a1 + 128);
  if (v5 <= result)
    v5 = result;
  *(_DWORD *)(a1 + 128) = v5;
  return result;
}

uint64_t sub_1C47681F8()
{
  return 0;
}

uint64_t sub_1C4768200(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t *v10;
  uint64_t **v11;
  unint64_t v12;
  int v13;
  uint64_t **v14;
  uint64_t v15;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  v4 = *(unsigned int *)(a2 + 40);
  if (!(_DWORD)v4)
    return 0;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = v5 + 32 * v4;
  while (1)
  {
    v7 = *(unsigned int *)(v5 + 4);
    v8 = *(_BYTE *)v5 || (v7 - 1) > 0x3FFFFFFE;
    if (!v8 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 216) + 16) + v7))
      break;
    v5 += 32;
    if (v5 == v6)
      return 0;
  }
  v10 = 0;
  v11 = *(uint64_t ***)(v3 + 248);
  v12 = v7 >> 3;
  v13 = 1 << (v7 & 7);
  v14 = *(uint64_t ***)(v3 + 240);
  do
  {
    v15 = **v14;
    if (v12 < *(unsigned __int16 *)(v15 + 22)
      && (v13 & *(_BYTE *)(*(_QWORD *)(v15 + 8) + v12)) != 0
      && (!v10
       || *v14 != v10
       && ((*(_DWORD *)(v10[1] + ((*(unsigned __int16 *)(v15 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v15 + 24)) & 1) != 0))
    {
      v10 = *v14;
    }
    ++v14;
  }
  while (v14 != v11);
  return *(_DWORD *)(*(_QWORD *)(v3 + 264)
                   + 24
                   * (*(unsigned __int16 *)(*v10 + 24)
                    + *(_DWORD *)(v3 + 272) * (((unint64_t)v11 - *(_QWORD *)(v3 + 240)) >> 3))
                   + 4) >> 3;
}

uint64_t sub_1C4768324(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t j;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  int v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  unsigned __int16 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t NamedMetadata;
  uint64_t **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  int v39;
  void *v41[2];
  _WORD v42[24];
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16));
  v3 = *(_DWORD *)(v2 + 44);
  v41[0] = v42;
  v41[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v41, (v3 + 63) >> 6, 0);
  v43 = v3;
  for (i = *(_QWORD *)(a1 + 328); i != a1 + 320; i = *(_QWORD *)(i + 8))
  {
    for (j = *(_QWORD *)(i + 56); j != i + 48; j = *(_QWORD *)(j + 8))
    {
      v6 = *(unsigned int *)(j + 40);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(j + 32);
        v8 = v7 + 32 * v6;
        v9 = v41[0];
        do
        {
          if (!*(_BYTE *)v7)
          {
            v10 = *(_DWORD *)(v7 + 4);
            if (v10)
            {
              v11 = (unsigned __int16 *)(*(_QWORD *)(v2 + 56)
                                       + (((unint64_t)*(unsigned int *)(*(_QWORD *)(v2 + 8) + 24 * v10 + 16) >> 3) & 0x1FFFFFFE));
              v13 = *v11;
              v12 = v11 + 1;
              v14 = v13 + (*(_DWORD *)(*(_QWORD *)(v2 + 8) + 24 * v10 + 16) & 0xF) * v10;
              do
              {
                v9[(unsigned __int16)v14 >> 6] |= 1 << v14;
                v15 = *v12++;
                v14 += v15;
              }
              while (v15);
            }
          }
          v7 += 32;
        }
        while (v7 != v8);
        if (!j)
          goto LABEL_15;
      }
      if ((*(_BYTE *)j & 4) == 0)
      {
LABEL_15:
        while ((*(_WORD *)(j + 44) & 8) != 0)
          j = *(_QWORD *)(j + 8);
      }
    }
  }
  if (v2)
    v16 = (uint64_t *)(v2 + 8);
  else
    v16 = 0;
  v17 = *v16;
  v18 = v16[6];
  v19 = 258;
  while (2)
  {
    v20 = *(unsigned int *)(v17 + 24 * v19 + 16);
    v21 = (v20 >> 3) & 0x1FFFFFFE;
    v22 = *(_WORD *)(v18 + v21) + (v20 & 0xF) * v19;
    v23 = (unsigned __int16 *)(v18 + 2 + v21);
    do
    {
      if (((*((_QWORD *)v41[0] + (v22 >> 6)) >> v22) & 1) != 0)
      {
        v25 = (v19 - 2);
        goto LABEL_28;
      }
      v24 = *v23++;
      v22 += v24;
    }
    while (v24);
    if ((unint64_t)--v19 > 2)
      continue;
    break;
  }
  v25 = 0;
LABEL_28:
  if (v41[0] != v42)
    free(v41[0]);
  if (((*(unsigned __int16 *)(*(_QWORD *)a1 + 18) >> 4) & 0x3FFu) - 103 <= 1)
  {
    v26 = *(_QWORD *)(a1 + 344);
    v27 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))v26)(v26, 0, 0, 1, 1);
    v28 = v27;
    if (v25 >= v27)
      v29 = v27;
    else
      v29 = 0;
    v30 = *(_QWORD *)(*(_QWORD *)a1 + 40);
    v41[0] = "agx.sample_rate";
    v42[8] = 259;
    NamedMetadata = llvm::Module::getNamedMetadata(v30, (uint64_t)v41);
    if (NamedMetadata
      && (v32 = *(uint64_t ***)(NamedMetadata + 48), *((_DWORD *)v32 + 2))
      && (v33 = **v32, v34 = *(unsigned int *)(v33 + 8), (_DWORD)v34)
      && (v35 = *(_QWORD *)(v33 - 8 * v34), *(_BYTE *)v35 == 1)
      && (v36 = *(_QWORD *)(v35 + 128), *(_BYTE *)(v36 + 16) == 16))
    {
      v37 = (_QWORD *)(v36 + 24);
      if (*(_DWORD *)(v36 + 32) >= 0x41u)
        v37 = (_QWORD *)*v37;
      v38 = *(_DWORD *)v37;
    }
    else
    {
      v38 = 4;
    }
    v39 = v25 - v29;
    if ((*(_WORD *)(*(_QWORD *)a1 + 18) & 0x3FF0) == 0x680
      && !(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 592))(v26, 105))
    {
      v38 = 1;
    }
    return v28 + v38 * v39;
  }
  return v25;
}

uint64_t sub_1C476862C(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_14;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (37 * *a2) & (v4 - 1);
  v7 = (_DWORD *)(v3 + 4 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 4 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_14;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_14:
  *a3 = v7;
  return result;
}

_DWORD *sub_1C47686DC(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _DWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C4768850(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 4;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = (37 * *a3) & v13;
    a4 = (_DWORD *)(v11 + 4 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -1)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -2;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_DWORD *)(v11 + 4 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C4768850(a1, v8);
      v20 = 0;
      sub_1C476862C(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

_QWORD *sub_1C4768850(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t i;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  int v14[4];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(int **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C47689B4((_QWORD *)a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 24; i += 4)
  {
    v10 = *(_DWORD *)(a1 + i);
    if (v10 <= 0xFFFFFFFD)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C47689B4((_QWORD *)a1, v14, v8);
}

_QWORD *sub_1C47689B4(_QWORD *result, int *a2, int *a3)
{
  _QWORD *v5;
  int v6;
  char *v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  int v11;
  int v12;
  char *v13;
  int v14;
  unsigned int v15;
  char *v16;
  int v17;
  char *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v5 = result;
  v6 = *(_DWORD *)result;
  *result = *(_DWORD *)result & 1;
  v7 = (char *)(result + 1);
  if ((v6 & 1) != 0)
  {
    v10 = 16;
    v9 = result + 1;
  }
  else
  {
    v8 = *((unsigned int *)result + 4);
    if (!(_DWORD)v8)
      goto LABEL_5;
    v9 = (void *)result[1];
    v10 = 4 * v8;
  }
  result = memset(v9, 255, v10);
LABEL_5:
  while (a2 != a3)
  {
    v11 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      if ((*(_BYTE *)v5 & 1) != 0)
      {
        v12 = 4;
        v13 = v7;
      }
      else
      {
        v13 = (char *)v5[1];
        v12 = *((_DWORD *)v5 + 4);
      }
      v14 = v12 - 1;
      v15 = (v12 - 1) & (37 * v11);
      v16 = &v13[4 * v15];
      v17 = *(_DWORD *)v16;
      if (v11 != *(_DWORD *)v16)
      {
        v18 = 0;
        v19 = 1;
        while (v17 != -1)
        {
          if (v18)
            v20 = 0;
          else
            v20 = v17 == -2;
          if (v20)
            v18 = v16;
          v21 = v15 + v19++;
          v15 = v21 & v14;
          v16 = &v13[4 * (v21 & v14)];
          v17 = *(_DWORD *)v16;
          if (v11 == *(_DWORD *)v16)
            goto LABEL_21;
        }
        if (v18)
          v16 = v18;
      }
LABEL_21:
      *(_DWORD *)v16 = v11;
      *(_DWORD *)v5 += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1C4768AD0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1C4768B14()
{
  return 32;
}

_OWORD *sub_1C4768C98(uint64_t a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;

  v6 = (void **)sub_1C4768D58(a1, &v15, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    v11 = v15;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v11;
    *v8 = v7;
    v12 = **(_QWORD **)a1;
    v13 = (uint64_t *)v7;
    if (v12)
    {
      *(_QWORD *)a1 = v12;
      v13 = (uint64_t *)*v8;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v13);
    ++*(_QWORD *)(a1 + 16);
  }
  return v7;
}

_QWORD *sub_1C4768D58(uint64_t a1, _QWORD *a2, const void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  size_t v7;
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  const void *v11;
  const void *v12;
  size_t v13;
  const void *v14;
  size_t v15;
  size_t v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  size_t v20;
  int v21;
  _BOOL4 v22;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v6 = *((char *)a3 + 23);
    if (v6 >= 0)
      v7 = *((unsigned __int8 *)a3 + 23);
    else
      v7 = (size_t)a3[1];
    if (v6 >= 0)
      v8 = a3;
    else
      v8 = *a3;
    do
    {
      while (1)
      {
        v9 = v4;
        v12 = (const void *)v4[4];
        v10 = v4 + 4;
        v11 = v12;
        v13 = *((unsigned __int8 *)v10 + 23);
        if ((v13 & 0x80u) == 0)
          v14 = v10;
        else
          v14 = v11;
        v15 = v10[1];
        if ((v13 & 0x80u) == 0)
          v16 = v13 & 0x7F;
        else
          v16 = v10[1];
        if (v16 >= v7)
          v17 = v7;
        else
          v17 = v16;
        v18 = memcmp(v8, v14, v17);
        v19 = v7 < v16;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v4 = (_QWORD *)*v9;
        v5 = v9;
        if (!*v9)
          goto LABEL_33;
      }
      if ((v13 & 0x80u) != 0)
        v13 = v15;
      if (v7 >= v13)
        v20 = v13;
      else
        v20 = v7;
      v21 = memcmp(v14, v8, v20);
      v22 = v13 < v7;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        break;
      v5 = v9 + 1;
      v4 = (_QWORD *)v9[1];
    }
    while (v4);
  }
  else
  {
    v9 = (_QWORD *)(a1 + 8);
  }
LABEL_33:
  *a2 = v9;
  return v5;
}

uint64_t *sub_1C4768E74(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *sub_1C476900C(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  v2 = &llvm::MachineSchedRegistry::Registry;
  while (1)
  {
    v3 = v2;
    v2 = (uint64_t *)*v2;
    if (!v2)
      break;
    if (v2 == a1)
    {
      v4 = a1;
      if (qword_1ED82FB50)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)qword_1ED82FB50 + 32))(qword_1ED82FB50, a1[1], a1[2]);
        v4 = (uint64_t *)*v3;
      }
      *v3 = *v4;
      return a1;
    }
  }
  return a1;
}

_QWORD *sub_1C4769074(_QWORD *a1, char *__s, const char *a3, uint64_t a4)
{
  size_t v8;
  size_t v9;

  *a1 = 0;
  a1[1] = __s;
  if (__s)
    v8 = strlen(__s);
  else
    v8 = 0;
  a1[2] = v8;
  a1[3] = a3;
  if (a3)
    v9 = strlen(a3);
  else
    v9 = 0;
  a1[4] = v9;
  a1[5] = a4;
  *a1 = llvm::MachineSchedRegistry::Registry;
  llvm::MachineSchedRegistry::Registry = (uint64_t)a1;
  if (qword_1ED82FB50)
    (*(void (**)(uint64_t, char *, size_t, uint64_t, const char *))(*(_QWORD *)qword_1ED82FB50 + 24))(qword_1ED82FB50, __s, v8, a4, a3);
  return a1;
}

uint64_t sub_1C4769124(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v11;

  *(_QWORD *)a1 = &off_1E7F94318;
  v2 = *(void **)(a1 + 432);
  if (v2)
  {
    *(_QWORD *)(a1 + 440) = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 408), 4);
  v11 = (void **)(a1 + 384);
  sub_1C476B22C(&v11);
  v11 = (void **)(a1 + 360);
  sub_1C476B22C(&v11);
  v3 = *(void **)(a1 + 336);
  if (v3)
  {
    *(_QWORD *)(a1 + 344) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 264);
  if (v4 != (void *)(a1 + 280))
    free(v4);
  v5 = *(void **)(a1 + 232);
  if (v5)
  {
    *(_QWORD *)(a1 + 240) = v5;
    operator delete(v5);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 208), 8);
  v6 = *(void **)(a1 + 184);
  if (v6)
  {
    *(_QWORD *)(a1 + 192) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 160);
  if (v7)
  {
    *(_QWORD *)(a1 + 168) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 88);
  if (v8 != (void *)(a1 + 104))
    free(v8);
  v9 = *(void **)(a1 + 56);
  if (v9)
  {
    *(_QWORD *)(a1 + 64) = v9;
    operator delete(v9);
  }
  v11 = (void **)(a1 + 32);
  sub_1C476B22C(&v11);
  return a1;
}

void sub_1C4769228(uint64_t a1)
{
  sub_1C4769124(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4769250()
{
  return 1;
}

uint64_t sub_1C4769258()
{
  return 0;
}

void sub_1C4769260(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  void *v51;
  int v52;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t *v76;
  _QWORD *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  int v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t *v103;
  _QWORD *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  int v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  void **v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  unsigned int v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  void *v155;
  void *v156;
  int v157;
  int v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  _BYTE *v165;
  unsigned int v166;
  int v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t *v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  unsigned int v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  int v191;
  uint64_t v192;
  _DWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  signed int v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int *v210;
  int v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  _BYTE *v217;
  unint64_t v218;
  uint64_t v219;
  unsigned int v220;
  int v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t *v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t *v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  float v237;
  float *v238;
  unint64_t v239;
  float *v240;
  float *v241;
  float *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char *v247;
  float *v248;
  char *v249;
  char *v250;
  uint64_t v251;
  unsigned int v252;
  void **v253;
  void **v254;
  float v255;
  float *v256;
  unint64_t v257;
  float *v258;
  float *v259;
  float *v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  char *v265;
  float *v266;
  char *v267;
  char *v268;
  char *v269;
  int v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  float v274;
  float *v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  unsigned int *v279;
  float v280;
  float v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  uint64_t v285;
  float v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  _DWORD *v291;
  uint64_t *v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t **v297;
  uint64_t *v298;
  void **v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  void *v303;
  uint64_t v304;
  _BYTE v305[48];
  unsigned int i;
  void *__src;
  uint64_t v308;
  _BYTE v309[48];
  unsigned int v310;
  uint64_t v311;

  v311 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = -252645135 * ((*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 4);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
  v296 = (uint64_t *)(a1 + 208);
  sub_1C6125098((_DWORD *)(a1 + 208));
  v3 = (_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 232);
  v298 = (uint64_t *)(a1 + 32);
  sub_1C61250E8((uint64_t *)(a1 + 32), *(unsigned int *)(a1 + 16));
  v4 = *(unsigned int *)(a1 + 16);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 2;
  v300 = a1;
  if (v4 <= v5)
  {
    if (v4 < v5)
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 232) + 4 * v4;
  }
  else
  {
    sub_1C476B618((char **)(a1 + 232), v4 - v5);
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
  }
  v6 = *(unsigned int *)(a1 + 272);
  if ((*(_DWORD *)(a1 + 328) & 0x3F) != 0)
  {
    v288 = *(_QWORD *)(a1 + 264) + 8 * v6;
    *(_QWORD *)(v288 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 328) & 0x3F));
  }
  v7 = v6;
  v297 = (uint64_t **)(a1 + 264);
  *(_DWORD *)(a1 + 328) = v4;
  if ((_DWORD)v6 != (v4 + 63) >> 6)
  {
    v8 = (v4 + 63) >> 6;
    if (v6 > v8)
    {
      *(_DWORD *)(a1 + 272) = v8;
      v7 = (v4 + 63) >> 6;
    }
    else
    {
      v9 = v6;
      if (v8 > *(_DWORD *)(a1 + 276))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v297, a1 + 280, v8, 8);
        v9 = *(unsigned int *)(a1 + 272);
        v7 = *(_DWORD *)(a1 + 272);
      }
      if (v8 != v6)
        bzero(&(*v297)[v9], 8 * (v8 - v6));
      v7 += v8 - v6;
      *(_DWORD *)(a1 + 272) = v7;
      LODWORD(v4) = *(_DWORD *)(a1 + 328);
    }
  }
  v10 = v4 & 0x3F;
  if (v10)
    (*v297)[v7 - 1] &= ~(-1 << v10);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(v11 + 48);
  v13 = *(_QWORD *)(v11 + 56);
  if (v12 != v13)
  {
    while (1)
    {
      v14 = *(_QWORD *)(v12 + 8);
      v15 = *(unsigned __int16 **)(v14 + 16);
      if (*v15 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v14 + 32) + 48) & 8) != 0)
        goto LABEL_30;
      v16 = *((_QWORD *)v15 + 1);
      if ((*(_WORD *)(v14 + 44) & 0xC) != 0 && (*(_WORD *)(v14 + 44) & 4) == 0)
        break;
      if ((v16 & 0x80000) != 0)
        goto LABEL_30;
LABEL_23:
      v12 += 272;
      if (v12 == v13)
        goto LABEL_31;
    }
    if ((v16 & 0x80000) == 0)
    {
      while ((*(_WORD *)(v14 + 44) & 8) != 0)
      {
        v14 = *(_QWORD *)(v14 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v14 + 16) + 10) & 8) != 0)
          goto LABEL_30;
      }
      goto LABEL_23;
    }
LABEL_30:
    __src = (void *)v12;
    *((_DWORD *)sub_1C6125254(v296, &__src) + 2) = 1065353216;
    *(uint64_t *)((char *)*v297 + (((unint64_t)*(unsigned int *)(v12 + 192) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v12 + 192);
    goto LABEL_23;
  }
LABEL_31:
  *(_QWORD *)(a1 + 80) = 0;
  if (*(_DWORD *)(a1 + 216))
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    v18 = *(_DWORD *)(a1 + 16);
    v303 = v305;
    v304 = 0x600000000;
    sub_1C4765AA4((char *)&v303, (v18 + 63) >> 6, 0);
    for (i = v18; ; v18 = i)
    {
      v19 = v18 >> 6;
      if (v18 < 0x40)
        break;
      v20 = 0;
      v21 = v303;
      if (v19 <= 1)
        v22 = 1;
      else
        v22 = v18 >> 6;
      v23 = 8 * v22;
      while (*(_QWORD *)((char *)v303 + v20) == -1)
      {
        v20 += 8;
        if (v23 == v20)
          goto LABEL_40;
      }
LABEL_42:
      v24 = *(_QWORD *)(v300 + 8);
      v25 = v304;
      v26 = 8 * v304;
      if ((_DWORD)v304)
      {
        v27 = 8 * v304;
        v28 = v21;
        do
        {
          *v28 = ~*v28;
          ++v28;
          v27 -= 8;
        }
        while (v27);
      }
      v29 = &v21[v25];
      v30 = v18 & 0x3F;
      if ((v18 & 0x3F) != 0)
      {
        *(v29 - 1) &= ~(-1 << v30);
      }
      else if (!v18)
      {
LABEL_54:
        v38 = -1;
        goto LABEL_56;
      }
      v31 = 0;
      v32 = (v18 - 1) & 0xFFFFFFC0;
      v33 = v21;
      while (1)
      {
        v35 = *v33++;
        v34 = v35;
        v36 = v32 == v31 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v18 : -1;
        v37 = v36 & v34;
        if (v37)
          break;
        v31 += 64;
        if (v32 + 64 == v31)
          goto LABEL_54;
      }
      v38 = __clz(__rbit64(v37)) + v31;
LABEL_56:
      v39 = *(_QWORD *)(v24 + 48);
      if ((_DWORD)v25)
      {
        do
        {
          *v21 = ~*v21;
          ++v21;
          v26 -= 8;
        }
        while (v26);
      }
      if ((v18 & 0x3F) != 0)
        *(v29 - 1) &= ~(-1 << v30);
      sub_1C476B84C((_QWORD *)v300, (uint64_t *)&v303, v39 + 272 * v38);
    }
LABEL_40:
    if ((v18 & 0x3F) != 0)
    {
      v21 = v303;
      if (*((_QWORD *)v303 + v19) != ~(-1 << (v18 & 0x3F)))
        goto LABEL_42;
    }
    v40 = *(_QWORD *)(v300 + 32);
    v41 = *(_QWORD *)(v300 + 40);
    while (v41 != v40)
    {
      v43 = *(void **)(v41 - 72);
      v41 -= 72;
      v42 = v43;
      if ((void *)(v41 + 16) != v43)
        free(v42);
    }
    *(_QWORD *)(v300 + 40) = v40;
    v44 = *(_QWORD *)(v300 + 360);
    v45 = *(_QWORD *)(v300 + 368);
    while (v45 != v44)
    {
      v47 = *(void **)(v45 - 72);
      v45 -= 72;
      v46 = v47;
      if ((void *)(v45 + 16) != v47)
        free(v46);
    }
    v289 = v3;
    v301 = (uint64_t *)(v300 + 360);
    *(_QWORD *)(v300 + 368) = v44;
    v48 = *(_DWORD *)(v300 + 16);
    if (v48)
    {
      v49 = 0;
      while (1)
      {
        __src = v309;
        v308 = 0x600000000;
        sub_1C4765AA4((char *)&__src, (v48 + 63) >> 6, 0);
        v310 = v48;
        v50 = *(_QWORD *)(v300 + 40);
        if (v50 >= *(_QWORD *)(v300 + 48))
        {
          v55 = sub_1C476BAB0(v298, (uint64_t)&__src);
          goto LABEL_84;
        }
        v51 = (void *)(v50 + 16);
        *(_QWORD *)v50 = v50 + 16;
        *(_QWORD *)(v50 + 8) = 0x600000000;
        v52 = v308;
        if ((void **)v50 != &__src && v308 != 0)
          break;
LABEL_83:
        *(_DWORD *)(v50 + 64) = v48;
        v55 = v50 + 72;
LABEL_84:
        *(_QWORD *)(v300 + 40) = v55;
        v56 = *(_QWORD *)(v300 + 368);
        if (v56 < *(_QWORD *)(v300 + 376))
        {
          v57 = (void *)(v56 + 16);
          *(_QWORD *)v56 = v56 + 16;
          *(_QWORD *)(v56 + 8) = 0x600000000;
          if ((void **)v56 != &__src)
          {
            v58 = v308;
            if ((_DWORD)v308)
            {
              if (v308 < 7uLL)
              {
                v59 = v308;
                goto LABEL_92;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod(v56, v56 + 16, v308, 8);
              v59 = v308;
              if ((_DWORD)v308)
              {
                v57 = *(void **)v56;
LABEL_92:
                memcpy(v57, __src, 8 * v59);
              }
              *(_DWORD *)(v56 + 8) = v58;
            }
          }
          *(_DWORD *)(v56 + 64) = v310;
          v60 = v56 + 72;
          goto LABEL_95;
        }
        v60 = sub_1C476BAB0(v301, (uint64_t)&__src);
LABEL_95:
        *(_QWORD *)(v300 + 368) = v60;
        if (__src != v309)
          free(__src);
        ++v49;
        v48 = *(_DWORD *)(v300 + 16);
        if (v49 >= v48)
          goto LABEL_98;
      }
      if (v308 >= 7uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v50, v50 + 16, v308, 8);
        v54 = v308;
        if (!(_DWORD)v308)
        {
LABEL_82:
          *(_DWORD *)(v50 + 8) = v52;
          v48 = v310;
          goto LABEL_83;
        }
        v51 = *(void **)v50;
      }
      else
      {
        v54 = v308;
      }
      memcpy(v51, __src, 8 * v54);
      goto LABEL_82;
    }
LABEL_98:
    v61 = *(uint64_t **)(v300 + 56);
    v293 = *(uint64_t **)(v300 + 64);
    v62 = v298;
    if (v61 != v293)
    {
      do
      {
        v63 = *v61;
        v64 = *(unsigned int *)(*v61 + 120);
        if ((_DWORD)v64)
        {
          v65 = *(_QWORD **)(v63 + 112);
          v66 = &v65[2 * v64];
          do
          {
            v67 = *(_DWORD *)((*v65 & 0xFFFFFFFFFFFFFFF8) + 192);
            if (v67 != -1)
            {
              v68 = *v62;
              v69 = *v62 + 72 * v67;
              v70 = *(unsigned int *)(v63 + 192);
              v71 = *(_QWORD **)v69;
              *(_QWORD *)(*(_QWORD *)v69 + ((v70 >> 3) & 0x1FFFFFF8)) |= 1 << v70;
              v72 = v68 + 72 * v70;
              v73 = (unsigned int *)(v69 + 64);
              v74 = *(_DWORD *)(v72 + 64);
              if (*(_DWORD *)(v69 + 64) < v74)
              {
                v79 = *(_DWORD *)(v69 + 64) & 0x3F;
                v80 = *(unsigned int *)(v69 + 8);
                if (v79)
                  v71[v80 - 1] &= ~(-1 << v79);
                v81 = v80;
                *v73 = v74;
                v82 = v74 + 63;
                if ((_DWORD)v80 != (v74 + 63) >> 6)
                {
                  v83 = v82 >> 6;
                  if (v80 > v83)
                  {
                    *(_DWORD *)(v69 + 8) = v83;
                    v81 = v82 >> 6;
                  }
                  else
                  {
                    v84 = v80;
                    if (v83 > *(_DWORD *)(v69 + 12))
                    {
                      v87 = v61;
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v69, v69 + 16, v83, 8);
                      v61 = v87;
                      v84 = *(unsigned int *)(v69 + 8);
                      v81 = *(_DWORD *)(v69 + 8);
                    }
                    if (v83 != v80)
                    {
                      v85 = v61;
                      bzero((void *)(*(_QWORD *)v69 + 8 * v84), 8 * (v83 - v80));
                      v61 = v85;
                    }
                    v81 += v83 - v80;
                    *(_DWORD *)(v69 + 8) = v81;
                    v74 = *v73;
                    v62 = v298;
                  }
                }
                v86 = v74 & 0x3F;
                if (v86)
                  *(_QWORD *)(*(_QWORD *)v69 + 8 * v81 - 8) &= ~(-1 << v86);
              }
              v75 = *(unsigned int *)(v72 + 8);
              if ((_DWORD)v75)
              {
                v76 = *(uint64_t **)v72;
                v77 = *(_QWORD **)v69;
                do
                {
                  v78 = *v76++;
                  *v77++ |= v78;
                  --v75;
                }
                while (v75);
              }
            }
            v65 += 2;
          }
          while (v65 != v66);
        }
        ++v61;
      }
      while (v61 != v293);
      v88 = *(_QWORD *)(v300 + 64);
      v294 = *(_QWORD *)(v300 + 56);
      while (v88 != v294)
      {
        v90 = *(_QWORD *)(v88 - 8);
        v88 -= 8;
        v89 = v90;
        v91 = *(unsigned int *)(v90 + 40);
        if ((_DWORD)v91)
        {
          v92 = *(_QWORD **)(v89 + 32);
          v93 = &v92[2 * v91];
          do
          {
            v94 = *(_DWORD *)((*v92 & 0xFFFFFFFFFFFFFFF8) + 192);
            if (v94 != -1)
            {
              v95 = *v301;
              v96 = *v301 + 72 * v94;
              v97 = *(unsigned int *)(v89 + 192);
              v98 = *(_QWORD **)v96;
              *(_QWORD *)(*(_QWORD *)v96 + ((v97 >> 3) & 0x1FFFFFF8)) |= 1 << v97;
              v99 = v95 + 72 * v97;
              v100 = (unsigned int *)(v96 + 64);
              v101 = *(_DWORD *)(v99 + 64);
              if (*(_DWORD *)(v96 + 64) < v101)
              {
                v106 = *(_DWORD *)(v96 + 64) & 0x3F;
                v107 = *(unsigned int *)(v96 + 8);
                if (v106)
                  v98[v107 - 1] &= ~(-1 << v106);
                v108 = v107;
                *v100 = v101;
                v109 = v101 + 63;
                if ((_DWORD)v107 != (v101 + 63) >> 6)
                {
                  v110 = v109 >> 6;
                  if (v107 > v110)
                  {
                    *(_DWORD *)(v96 + 8) = v110;
                    v108 = v109 >> 6;
                  }
                  else
                  {
                    v111 = v107;
                    if (v110 > *(_DWORD *)(v96 + 12))
                    {
                      v114 = v88;
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v96, v96 + 16, v110, 8);
                      v88 = v114;
                      v62 = v298;
                      v111 = *(unsigned int *)(v96 + 8);
                      v108 = *(_DWORD *)(v96 + 8);
                    }
                    if (v110 != v107)
                    {
                      v112 = v88;
                      bzero((void *)(*(_QWORD *)v96 + 8 * v111), 8 * (v110 - v107));
                      v88 = v112;
                      v62 = v298;
                    }
                    v108 += v110 - v107;
                    *(_DWORD *)(v96 + 8) = v108;
                    v101 = *v100;
                  }
                }
                v113 = v101 & 0x3F;
                if (v113)
                  *(_QWORD *)(*(_QWORD *)v96 + 8 * v108 - 8) &= ~(-1 << v113);
              }
              v102 = *(unsigned int *)(v99 + 8);
              if ((_DWORD)v102)
              {
                v103 = *(uint64_t **)v99;
                v104 = *(_QWORD **)v96;
                do
                {
                  v105 = *v103++;
                  *v104++ |= v105;
                  --v102;
                }
                while (v102);
              }
            }
            v92 += 2;
          }
          while (v92 != v93);
        }
      }
    }
    v115 = v300;
    if (*(_DWORD *)(v300 + 16))
    {
      v116 = 0;
      v117 = *v62;
      do
      {
        v118 = *v301 + 72 * v116;
        v119 = v117 + 72 * v116;
        v120 = (unsigned int *)(v119 + 64);
        v121 = *(_DWORD *)(v118 + 64);
        if (*(_DWORD *)(v119 + 64) < v121)
        {
          v131 = *(_DWORD *)(v119 + 64) & 0x3F;
          v132 = *(unsigned int *)(v119 + 8);
          if (v131)
            *(_QWORD *)(*(_QWORD *)v119 + 8 * v132 - 8) &= ~(-1 << v131);
          v133 = v132;
          *v120 = v121;
          v134 = v121 + 63;
          if ((_DWORD)v132 != (v121 + 63) >> 6)
          {
            v135 = v134 >> 6;
            if (v132 > v135)
            {
              *(_DWORD *)(v119 + 8) = v135;
              v133 = v134 >> 6;
            }
            else
            {
              v136 = v132;
              if (v135 > *(_DWORD *)(v119 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v119, v119 + 16, v135, 8);
                v62 = v298;
                v136 = *(unsigned int *)(v119 + 8);
                v133 = *(_DWORD *)(v119 + 8);
              }
              if (v135 != v132)
              {
                bzero((void *)(*(_QWORD *)v119 + 8 * v136), 8 * (v135 - v132));
                v62 = v298;
              }
              v133 += v135 - v132;
              *(_DWORD *)(v119 + 8) = v133;
              v121 = *v120;
            }
          }
          v137 = v121 & 0x3F;
          v115 = v300;
          if (v137)
            *(_QWORD *)(*(_QWORD *)v119 + 8 * v133 - 8) &= ~(-1 << v137);
        }
        v122 = *(unsigned int *)(v118 + 8);
        if ((_DWORD)v122)
        {
          v123 = *(uint64_t **)v118;
          v124 = *(_QWORD **)v119;
          do
          {
            v125 = *v123++;
            *v124++ |= v125;
            --v122;
          }
          while (v122);
        }
        v117 = *v62;
        v126 = *v62 + 72 * v116;
        v127 = *(_QWORD **)v126;
        v128 = *(unsigned int *)(v126 + 8);
        if ((_DWORD)v128)
        {
          v129 = 8 * v128;
          v130 = v127;
          do
          {
            *v130 = ~*v130;
            ++v130;
            v129 -= 8;
          }
          while (v129);
        }
        if ((*(_DWORD *)(v117 + 72 * v116 + 64) & 0x3F) != 0)
          v127[v128 - 1] &= ~(-1 << (*(_DWORD *)(v117 + 72 * v116 + 64) & 0x3F));
        v127[v116 >> 6] &= ~(1 << v116);
        ++v116;
      }
      while (v116 < *(unsigned int *)(v115 + 16));
    }
    v138 = *(_QWORD *)(v115 + 56);
    v295 = *(_QWORD *)(v115 + 64);
    if (v138 != v295)
    {
      v299 = (void **)(v115 + 88);
      v292 = (uint64_t *)(v115 + 384);
      v290 = v115 + 104;
      v291 = (_DWORD *)(v115 + 408);
      do
      {
        v139 = *(_QWORD *)(v115 + 80);
        v140 = *(_DWORD *)(*(_QWORD *)v138 + 192);
        v141 = *(_QWORD *)(v115 + 32);
        v142 = (void **)(v141 + 72 * v140);
        *(_QWORD *)(v115 + 80) = v142;
        v143 = *((unsigned int *)v142 + 2);
        if ((_DWORD)v143)
        {
          v144 = 0;
          v145 = (char *)*v142;
          while (!*(_QWORD *)&v145[v144])
          {
            v144 += 8;
            if (8 * v143 == v144)
              goto LABEL_183;
          }
          v146 = *(_DWORD *)(v115 + 272) >= v143 ? *((_DWORD *)v142 + 2) : *(_DWORD *)(v115 + 272);
          if (v146)
          {
            v147 = 0;
            v148 = 8 * v146;
            while (((*v297)[v147 / 8] & *(_QWORD *)&v145[v147]) == 0)
            {
              v147 += 8;
              if (v148 == v147)
                goto LABEL_183;
            }
            if (!v139
              || *(_DWORD *)(v141 + 72 * v140 + 64) != *(_DWORD *)(v139 + 64)
              || memcmp(*v142, *(const void **)v139, 8 * v143))
            {
              if (v299 == v142)
                goto LABEL_199;
              v149 = *(unsigned int *)(v115 + 96);
              if (v149 >= v143)
              {
                memmove(*v299, v145, 8 * v143);
                goto LABEL_198;
              }
              if (*(_DWORD *)(v115 + 100) < v143)
              {
                *(_DWORD *)(v115 + 96) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v299, v290, v143, 8);
              }
              else if ((_DWORD)v149)
              {
                memmove(*v299, v145, 8 * v149);
LABEL_196:
                v150 = *((unsigned int *)v142 + 2);
                if (v149 != v150)
                  memcpy((char *)*v299 + 8 * v149, (char *)*v142 + 8 * v149, (_BYTE *)*v142 + 8 * v150 - ((_BYTE *)*v142 + 8 * v149));
LABEL_198:
                *(_DWORD *)(v115 + 96) = v143;
LABEL_199:
                v151 = *(_DWORD *)(v141 + 72 * v140 + 64);
                *(_DWORD *)(v115 + 152) = v151;
                v152 = *(_QWORD *)(v115 + 384);
                v153 = *(_QWORD *)(v115 + 392);
                if (v153 == v152)
                {
                  v154 = v292;
                }
                else
                {
                  v154 = v292;
                  do
                  {
                    v156 = *(void **)(v153 - 72);
                    v153 -= 72;
                    v155 = v156;
                    if ((void *)(v153 + 16) != v156)
                      free(v155);
                  }
                  while (v153 != v152);
                  v151 = *(_DWORD *)(v115 + 152);
                }
                *(_QWORD *)(v115 + 392) = v152;
                v157 = sub_1C476BA0C(v299, 0, v151, 1u);
                if (v157 != -1)
                {
                  v158 = v157;
                  while (1)
                  {
                    v159 = *(_QWORD *)(*(_QWORD *)(v115 + 8) + 48);
                    if (!v159)
                      goto LABEL_255;
                    v160 = *(_DWORD *)(v159 + 272 * v158 + 192);
                    v161 = *v301;
                    v162 = *v301 + 72 * v160;
                    __src = v309;
                    v308 = 0x600000000;
                    v163 = *(_DWORD *)(v162 + 8);
                    if (&__src == (void **)v162 || v163 == 0)
                    {
                      v163 = 0;
                      v165 = v309;
                    }
                    else
                    {
                      v166 = *(_DWORD *)(v162 + 8);
                      v165 = v309;
                      if (v163 < 7
                        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v309, *(unsigned int *)(v162 + 8), 8), v166 = *(_DWORD *)(v162 + 8), v165 = __src, v166))
                      {
                        memcpy(v165, *(const void **)v162, 8 * v166);
                        v165 = __src;
                      }
                      LODWORD(v308) = v163;
                    }
                    v167 = *(_DWORD *)(v161 + 72 * v160 + 64);
                    v310 = v167;
                    v168 = *(_QWORD *)(v115 + 80);
                    v169 = *(_DWORD *)(v168 + 8);
                    if (v169 >= v163)
                      v170 = v163;
                    else
                      v170 = v169;
                    if ((_DWORD)v170)
                    {
                      v171 = *(uint64_t **)v168;
                      v172 = v165;
                      v173 = v170;
                      do
                      {
                        v174 = *v171++;
                        *v172++ &= v174;
                        --v173;
                      }
                      while (v173);
                    }
                    if (v163 > v169)
                    {
                      do
                      {
                        *(_QWORD *)&v165[8 * v170] = 0;
                        LODWORD(v170) = v170 + 1;
                      }
                      while (v163 != (_DWORD)v170);
                    }
                    *(_QWORD *)&v165[8 * (v160 >> 6)] |= 1 << v160;
                    v175 = *(_QWORD *)(v115 + 392);
                    if (v175 < *(_QWORD *)(v115 + 400))
                      break;
                    v179 = sub_1C476BAB0(v154, (uint64_t)&__src);
LABEL_238:
                    *(_QWORD *)(v115 + 392) = v179;
                    v180 = (uint64_t *)__src;
                    v181 = v308;
                    if ((_DWORD)v308)
                    {
                      v182 = 8 * v308;
                      v183 = __src;
                      do
                      {
                        *v183 = ~*v183;
                        ++v183;
                        v182 -= 8;
                      }
                      while (v182);
                    }
                    if ((v310 & 0x3F) != 0)
                      v180[v181 - 1] &= ~(-1 << (v310 & 0x3F));
                    v184 = *(_DWORD *)(v115 + 96);
                    if (v181 >= v184)
                      v185 = v184;
                    else
                      v185 = v181;
                    if ((_DWORD)v185)
                    {
                      v186 = *v299;
                      v187 = v180;
                      v188 = v185;
                      do
                      {
                        v189 = *v187++;
                        *v186++ &= v189;
                        --v188;
                      }
                      while (v188);
                    }
                    if (v184 > v181)
                    {
                      v190 = *v299;
                      do
                      {
                        v190[v185] = 0;
                        LODWORD(v185) = v185 + 1;
                      }
                      while (v184 != (_DWORD)v185);
                    }
                    if (v180 != (uint64_t *)v309)
                      free(v180);
                    v158 = sub_1C476BA0C(v299, v158 + 1, *(_DWORD *)(v115 + 152), 1u);
                    if (v158 == -1)
                      goto LABEL_255;
                  }
                  v176 = (void *)(v175 + 16);
                  *(_QWORD *)v175 = v175 + 16;
                  *(_QWORD *)(v175 + 8) = 0x600000000;
                  if ((void **)v175 != &__src)
                  {
                    v177 = v308;
                    if ((_DWORD)v308)
                    {
                      if (v308 < 7uLL)
                      {
                        v178 = v308;
                        goto LABEL_235;
                      }
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v175, v175 + 16, v308, 8);
                      v178 = v308;
                      if ((_DWORD)v308)
                      {
                        v176 = *(void **)v175;
LABEL_235:
                        memcpy(v176, __src, 8 * v178);
                      }
                      *(_DWORD *)(v175 + 8) = v177;
                      v167 = v310;
                    }
                  }
                  *(_DWORD *)(v175 + 64) = v167;
                  v179 = v175 + 72;
                  goto LABEL_238;
                }
LABEL_255:
                v191 = *(_DWORD *)(v115 + 416);
                if (v191 || *(_DWORD *)(v115 + 420))
                {
                  v192 = *(unsigned int *)(v115 + 424);
                  if (v192 <= 4 * v191 || v192 < 0x41)
                  {
                    if ((_DWORD)v192)
                    {
                      v193 = *(_DWORD **)v291;
                      v194 = 8 * v192;
                      do
                      {
                        *v193 = -1;
                        v193 += 2;
                        v194 -= 8;
                      }
                      while (v194);
                    }
                    *(_QWORD *)(v115 + 416) = 0;
                  }
                  else
                  {
                    sub_1C476BF54(v291);
                  }
                }
                *(_QWORD *)(v115 + 344) = *(_QWORD *)(v115 + 336);
                v196 = *(_QWORD *)(v115 + 384);
                v195 = *(_QWORD *)(v115 + 392);
                while (2)
                {
                  if (v196 == v195)
                    goto LABEL_183;
                  v197 = *(_DWORD *)(v196 + 8);
                  v198 = *(_DWORD *)(v115 + 272);
                  if (v198 >= v197)
                    v199 = v197;
                  else
                    v199 = v198;
                  if ((_DWORD)v199)
                  {
                    v200 = *v297;
                    v201 = *(_QWORD **)v196;
                    v202 = v199;
                    do
                    {
                      v203 = *v200++;
                      *v201++ &= v203;
                      --v202;
                    }
                    while (v202);
                  }
                  if (v197 > v198)
                  {
                    v204 = *(_QWORD **)v196;
                    do
                    {
                      v204[v199] = 0;
                      LODWORD(v199) = v199 + 1;
                    }
                    while (v197 != (_DWORD)v199);
                  }
                  v205 = sub_1C476B7EC(v196);
                  if (v205 == -1)
                  {
LABEL_357:
                    v196 += 72;
                    continue;
                  }
                  break;
                }
                v206 = v205;
                *(_QWORD *)(v115 + 440) = *(_QWORD *)(v115 + 432);
                v207 = *(_QWORD *)(v115 + 408);
                v208 = *(unsigned int *)(v115 + 424);
                if ((_DWORD)v208)
                {
                  LODWORD(v209) = (v208 - 1) & (37 * v205);
                  v210 = (int *)(v207 + 8 * v209);
                  v211 = *v210;
                  if (v205 == *v210)
                    goto LABEL_277;
                  v270 = 1;
                  while (v211 != -1)
                  {
                    v271 = v209 + v270++;
                    v209 = v271 & (v208 - 1);
                    v211 = *(_DWORD *)(v207 + 8 * v209);
                    if (v205 == v211)
                    {
                      v210 = (int *)(v207 + 8 * v209);
                      goto LABEL_277;
                    }
                  }
                }
                v210 = (int *)(v207 + 8 * v208);
LABEL_277:
                if ((int *)(v207 + 8 * v208) != v210)
                {
                  v212 = v210[1];
                  v213 = *v301;
                  v214 = *v301 + 72 * v205;
                  __src = v309;
                  v308 = 0x600000000;
                  v215 = *(_DWORD *)(v214 + 8);
                  if (&__src == (void **)v214 || v215 == 0)
                  {
                    v215 = 0;
                    v217 = v309;
                  }
                  else
                  {
                    v220 = *(_DWORD *)(v214 + 8);
                    v217 = v309;
                    if (v215 < 7
                      || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v309, *(unsigned int *)(v214 + 8), 8), v220 = *(_DWORD *)(v214 + 8), v217 = __src, v220))
                    {
                      memcpy(v217, *(const void **)v214, 8 * v220);
                      v217 = __src;
                    }
                    LODWORD(v308) = v215;
                  }
                  v221 = *(_DWORD *)(v213 + 72 * (int)v206 + 64);
                  v310 = v221;
                  v222 = *(_QWORD *)(v300 + 80);
                  v223 = *(_DWORD *)(v222 + 8);
                  if (v223 >= v215)
                    v224 = v215;
                  else
                    v224 = v223;
                  if ((_DWORD)v224)
                  {
                    v225 = *(uint64_t **)v222;
                    v226 = v217;
                    v227 = v224;
                    do
                    {
                      v228 = *v225++;
                      *v226++ &= v228;
                      --v227;
                    }
                    while (v227);
                  }
                  if (v215 > v223)
                  {
                    do
                    {
                      *(_QWORD *)&v217[8 * v224] = 0;
                      LODWORD(v224) = v224 + 1;
                    }
                    while (v215 != (_DWORD)v224);
                  }
                  v229 = *(_DWORD *)(v300 + 272);
                  if (v229 >= v215)
                    v230 = v215;
                  else
                    v230 = v229;
                  if ((_DWORD)v230)
                  {
                    v231 = *v297;
                    v232 = v217;
                    v233 = v230;
                    do
                    {
                      v234 = *v231++;
                      *v232++ &= v234;
                      --v233;
                    }
                    while (v233);
                  }
                  if (v215 > v229)
                  {
                    do
                    {
                      *(_QWORD *)&v217[8 * v230] = 0;
                      LODWORD(v230) = v230 + 1;
                    }
                    while (v215 != (_DWORD)v230);
                  }
                  *(_QWORD *)&v217[8 * (v206 >> 6)] |= 1 << v206;
                  v235 = sub_1C476BA0C(&__src, 0, v221, 1u);
                  if ((v235 + 1) >= 2)
                  {
                    v236 = v235;
                    v237 = 1.0 / (double)v212;
                    do
                    {
                      v302 = *(_QWORD *)(*(_QWORD *)(v300 + 8) + 48) + 272 * v236;
                      v238 = (float *)sub_1C6125254(v296, &v302);
                      v238[2] = v238[2] + v237;
                      v240 = *(float **)(v300 + 344);
                      v239 = *(_QWORD *)(v300 + 352);
                      if ((unint64_t)v240 >= v239)
                      {
                        v242 = *(float **)(v300 + 336);
                        v243 = ((char *)v240 - (char *)v242) >> 4;
                        v244 = v243 + 1;
                        if ((unint64_t)(v243 + 1) >> 60)
                          goto LABEL_385;
                        v245 = v239 - (_QWORD)v242;
                        if (v245 >> 3 > v244)
                          v244 = v245 >> 3;
                        if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF0)
                          v246 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v246 = v244;
                        if (v246 >> 60)
                          goto LABEL_386;
                        v247 = (char *)operator new(16 * v246);
                        v248 = (float *)&v247[16 * v243];
                        *(_QWORD *)v248 = v302;
                        v248[2] = v237;
                        if (v240 == v242)
                        {
                          v250 = &v247[16 * v243];
                        }
                        else
                        {
                          v249 = &v247[16 * v243];
                          do
                          {
                            v250 = v249 - 16;
                            *((_OWORD *)v249 - 1) = *((_OWORD *)v240 - 1);
                            v240 -= 4;
                            v249 -= 16;
                          }
                          while (v240 != v242);
                        }
                        v241 = v248 + 4;
                        *(_QWORD *)(v300 + 336) = v250;
                        *(_QWORD *)(v300 + 344) = v248 + 4;
                        *(_QWORD *)(v300 + 352) = &v247[16 * v246];
                        if (v242)
                          operator delete(v242);
                      }
                      else
                      {
                        *(_QWORD *)v240 = v302;
                        v240[2] = v237;
                        v241 = v240 + 4;
                      }
                      *(_QWORD *)(v300 + 344) = v241;
                      v236 = sub_1C476BA0C(&__src, v236 + 1, v310, 1u);
                    }
                    while ((v236 + 1) > 1);
                  }
                  if (__src != v309)
                    free(__src);
                  v115 = v300;
                  goto LABEL_357;
                }
                if (v299 == (void **)v196)
                  goto LABEL_338;
                v218 = *(unsigned int *)(v196 + 8);
                v219 = *(unsigned int *)(v115 + 96);
                if (v219 >= v218)
                {
                  if ((_DWORD)v218)
                    memmove(*v299, *(const void **)v196, 8 * v218);
                  goto LABEL_337;
                }
                if (*(_DWORD *)(v115 + 100) < v218)
                {
                  *(_DWORD *)(v115 + 96) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v299, v290, v218, 8);
                }
                else if ((_DWORD)v219)
                {
                  memmove(*v299, *(const void **)v196, 8 * v219);
LABEL_335:
                  v251 = *(unsigned int *)(v196 + 8);
                  if (v219 != v251)
                    memcpy((char *)*v299 + 8 * v219, (const void *)(*(_QWORD *)v196 + 8 * v219), *(_QWORD *)v196 + 8 * v251 - (*(_QWORD *)v196 + 8 * v219));
LABEL_337:
                  *(_DWORD *)(v115 + 96) = v218;
LABEL_338:
                  *(_DWORD *)(v115 + 152) = *(_DWORD *)(v196 + 64);
                  *(_QWORD *)(*(_QWORD *)(v115 + 88) + 8 * (v206 >> 6)) &= ~(1 << v206);
                  v252 = sub_1C476BC6C((_QWORD *)v115, v206, v196);
                  v253 = *(void ***)(v115 + 432);
                  v254 = *(void ***)(v115 + 440);
                  if (v253 != v254)
                  {
                    v255 = 1.0 / (double)v252;
                    do
                    {
                      __src = 0;
                      __src = *v253;
                      v256 = (float *)sub_1C6125254(v296, &__src);
                      v256[2] = v256[2] + v255;
                      v258 = *(float **)(v115 + 344);
                      v257 = *(_QWORD *)(v115 + 352);
                      if ((unint64_t)v258 >= v257)
                      {
                        v260 = *(float **)(v115 + 336);
                        v261 = ((char *)v258 - (char *)v260) >> 4;
                        v262 = v261 + 1;
                        if ((unint64_t)(v261 + 1) >> 60)
LABEL_385:
                          abort();
                        v263 = v257 - (_QWORD)v260;
                        if (v263 >> 3 > v262)
                          v262 = v263 >> 3;
                        if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFF0)
                          v264 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v264 = v262;
                        if (v264 >> 60)
LABEL_386:
                          sub_1C4764EE4();
                        v265 = (char *)operator new(16 * v264);
                        v266 = (float *)&v265[16 * v261];
                        *(_QWORD *)v266 = __src;
                        v266[2] = v255;
                        if (v258 == v260)
                        {
                          v268 = &v265[16 * v261];
                        }
                        else
                        {
                          v267 = &v265[16 * v261];
                          do
                          {
                            v268 = v267 - 16;
                            *((_OWORD *)v267 - 1) = *((_OWORD *)v258 - 1);
                            v258 -= 4;
                            v267 -= 16;
                          }
                          while (v258 != v260);
                        }
                        v269 = &v265[16 * v264];
                        v259 = v266 + 4;
                        v115 = v300;
                        *(_QWORD *)(v300 + 336) = v268;
                        *(_QWORD *)(v300 + 344) = v266 + 4;
                        *(_QWORD *)(v300 + 352) = v269;
                        if (v260)
                          operator delete(v260);
                      }
                      else
                      {
                        *(_QWORD *)v258 = __src;
                        v258[2] = v255;
                        v259 = v258 + 4;
                      }
                      *(_QWORD *)(v115 + 344) = v259;
                      ++v253;
                    }
                    while (v253 != v254);
                  }
                  goto LABEL_357;
                }
                v219 = 0;
                goto LABEL_335;
              }
              v149 = 0;
              goto LABEL_196;
            }
            v273 = *(_QWORD *)(v115 + 336);
            v272 = *(_QWORD *)(v115 + 344);
            while (v273 != v272)
            {
              v274 = *(float *)(v273 + 8);
              v275 = (float *)sub_1C6125254(v296, (_QWORD *)v273);
              v275[2] = v274 + v275[2];
              v273 += 16;
            }
          }
        }
LABEL_183:
        v138 += 8;
      }
      while (v138 != v295);
    }
    if (v303 != v305)
      free(v303);
    if (*(_DWORD *)(v115 + 216))
    {
      v277 = *(_QWORD *)(v115 + 56);
      v276 = *(_QWORD *)(v115 + 64);
      while (v276 != v277)
      {
        v279 = *(unsigned int **)(v276 - 8);
        v276 -= 8;
        v278 = v279;
        __src = v279;
        v280 = 0.0;
        v281 = 0.0;
        if (((*(unint64_t *)((char *)*v297 + (((unint64_t)v279[48] >> 3) & 0x1FFFFFF8)) >> v279[48]) & 1) != 0)
        {
          v281 = *((float *)sub_1C6125254(v296, &__src) + 2);
          v278 = __src;
        }
        v282 = *((unsigned int *)v278 + 30);
        if ((_DWORD)v282)
        {
          v283 = (_QWORD *)v278[14];
          v284 = 16 * v282;
          do
          {
            v285 = *(unsigned int *)((*v283 & 0xFFFFFFFFFFFFFFF8) + 192);
            if ((_DWORD)v285 != -1 && *(float *)(*v289 + 4 * v285) > v280)
              v280 = *(float *)(*v289 + 4 * v285);
            v283 += 2;
            v284 -= 16;
          }
          while (v284);
        }
        v286 = v281 + v280;
        v287 = *((unsigned int *)v278 + 48);
        if (*(float *)(*v289 + 4 * v287) < v286)
          *(float *)(*v289 + 4 * v287) = v286;
      }
    }
  }
}

BOOL sub_1C476A9AC(_BOOL8 result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int64_t v21;

  v1 = *(_QWORD *)(result + 160);
  v2 = *(_QWORD *)(result + 168) - v1;
  if (v2 >= 9)
  {
    v3 = v2 >> 3;
    v4 = (unint64_t)((v2 >> 3) - 2) >> 1;
    v20 = *(uint64_t **)(result + 256);
    v21 = v4;
    v19 = v3;
    do
    {
      v5 = v4;
      if (v21 >= v4)
      {
        v6 = (2 * v4) | 1;
        v7 = (uint64_t *)(v1 + 8 * v6);
        v8 = *v7;
        if (2 * v4 + 2 >= v3)
        {
          v10 = *v20;
        }
        else
        {
          v9 = v7[1];
          v10 = *v20;
          if (sub_1C476C3C4(*v20, *v7, v9))
          {
            v8 = v9;
            ++v7;
            v6 = 2 * v5 + 2;
          }
        }
        v11 = (uint64_t *)(v1 + 8 * v5);
        v12 = *v11;
        result = sub_1C476C3C4(v10, v8, *v11);
        if (!result)
        {
          v18 = v5;
          do
          {
            *v11 = v8;
            v11 = v7;
            if (v21 < v6)
              break;
            v13 = (2 * v6) | 1;
            v7 = (uint64_t *)(v1 + 8 * v13);
            v14 = 2 * v6 + 2;
            v8 = *v7;
            if (v14 >= v3)
            {
              v16 = *v20;
              v6 = (2 * v6) | 1;
            }
            else
            {
              v15 = v7[1];
              v16 = *v20;
              v17 = sub_1C476C3C4(*v20, *v7, v15);
              if (v17)
              {
                v8 = v15;
                ++v7;
              }
              v3 = v19;
              v6 = v17 ? v14 : v13;
            }
            result = sub_1C476C3C4(v16, v8, v12);
          }
          while (!result);
          *v11 = v12;
          v5 = v18;
        }
      }
      v4 = v5 - 1;
    }
    while (v5 > 0);
  }
  return result;
}

uint64_t sub_1C476AB54(_QWORD *a1, _BYTE *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char *v35;
  _BYTE *v36;
  uint64_t *v37;

  v5 = (char *)a1[20];
  v4 = (char *)a1[21];
  if (v5 == v4)
  {
    v7 = a1[23];
    v6 = a1[24];
    if (v7 == v6)
      return 0;
    for (i = v7 + 16; i != v6; i += 16)
    {
      if (*(_DWORD *)(i + 8) < *(_DWORD *)(v7 + 8))
        v7 = i;
    }
    v9 = a1[22];
    if ((unint64_t)v5 >= v9)
    {
      v12 = v9 - (_QWORD)v5;
      v13 = v12 >> 2;
      if ((unint64_t)(v12 >> 2) <= 1)
        v13 = 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14 >> 61)
        sub_1C4764EE4();
      v15 = operator new(8 * v14);
      *v15 = *(_QWORD *)v7;
      v10 = (uint64_t)(v15 + 1);
      a1[20] = v15;
      a1[21] = v15 + 1;
      a1[22] = &v15[v14];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *(_QWORD *)v5 = *(_QWORD *)v7;
      v10 = (uint64_t)(v5 + 8);
    }
    a1[21] = v10;
    v16 = a1[20];
    v37 = (uint64_t *)a1[32];
    sub_1C476C5C4(v16, v10, &v37, (v10 - v16) >> 3);
    v17 = a1[24];
    if (v7 + 16 == v17)
    {
      v18 = v7;
    }
    else
    {
      v18 = v7;
      do
      {
        v19 = *(_QWORD *)(v18 + 16);
        v18 += 16;
        *(_QWORD *)v7 = v19;
        *(_DWORD *)(v7 + 8) = *(_DWORD *)(v7 + 24);
        v20 = v7 + 32;
        v7 = v18;
      }
      while (v20 != v17);
    }
    a1[24] = v18;
    v5 = (char *)a1[20];
    v4 = (char *)a1[21];
  }
  v37 = (uint64_t *)a1[32];
  if (v4 - v5 >= 9)
  {
    v35 = v4;
    v36 = a2;
    v21 = 0;
    v22 = (v4 - v5) >> 3;
    v33 = (_BOOL8)v5;
    v34 = *(_QWORD *)v5;
    v23 = (uint64_t *)v5;
    do
    {
      v24 = &v23[v21];
      v27 = v24[1];
      v25 = v24 + 1;
      v26 = v27;
      v28 = (2 * v21) | 1;
      v29 = 2 * v21 + 2;
      if (v29 < v22)
      {
        v30 = v25[1];
        if (sub_1C476C3C4(*v37, v26, v30))
        {
          v26 = v30;
          ++v25;
          v28 = v29;
        }
      }
      *v23 = v26;
      v23 = v25;
      v21 = v28;
    }
    while (v28 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
    v31 = (uint64_t *)(v35 - 8);
    if (v25 == (uint64_t *)(v35 - 8))
    {
      *v25 = v34;
    }
    else
    {
      *v25 = *v31;
      *v31 = v34;
      sub_1C476C5C4(v33, (uint64_t)(v25 + 1), &v37, ((uint64_t)v25 - v33 + 8) >> 3);
    }
    a2 = v36;
  }
  v32 = a1[21];
  result = *(_QWORD *)(v32 - 8);
  a1[21] = v32 - 8;
  *a2 = 0;
  return result;
}

void sub_1C476ADA8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 16) & 0x20) == 0)
  {
    a1[3] = a2;
    v4 = a1[23];
    v3 = a1[24];
    while (v4 != v3)
    {
      v5 = *(_DWORD *)(v4 + 8);
      v6 = *(unsigned __int16 *)(a1[3] + 226);
      v7 = v5 >= v6;
      v8 = v5 - v6;
      if (v7)
      {
        *(_DWORD *)(v4 + 8) = v8;
        v4 += 16;
      }
      else
      {
        v10 = (_QWORD *)a1[21];
        v9 = a1[22];
        if ((unint64_t)v10 >= v9)
        {
          v12 = (_QWORD *)a1[20];
          v13 = v10 - v12;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            abort();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            if (v16 >> 61)
              sub_1C4764EE4();
            v17 = (char *)operator new(8 * v16);
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[8 * v13];
          *(_QWORD *)v18 = *(_QWORD *)v4;
          v11 = v18 + 8;
          if (v10 != v12)
          {
            do
            {
              v19 = *--v10;
              *((_QWORD *)v18 - 1) = v19;
              v18 -= 8;
            }
            while (v10 != v12);
            v10 = (_QWORD *)a1[20];
          }
          a1[20] = v18;
          a1[21] = v11;
          a1[22] = &v17[8 * v16];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v10 = *(_QWORD *)v4;
          v11 = v10 + 1;
        }
        a1[21] = v11;
        v20 = a1[24];
        v3 = v4;
        if (v4 + 16 != v20)
        {
          v21 = v4;
          v3 = v4;
          do
          {
            v22 = *(_QWORD *)(v3 + 16);
            v3 += 16;
            *(_QWORD *)v21 = v22;
            *(_DWORD *)(v21 + 8) = *(_DWORD *)(v21 + 24);
            v23 = v21 + 32;
            v21 = v3;
          }
          while (v23 != v20);
        }
        a1[24] = v3;
      }
    }
  }
}

void sub_1C476AF28(_QWORD *a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = *(unsigned __int16 *)(a2 + 226);
  if (*(_WORD *)(a2 + 226))
  {
    v6 = (char *)a1[24];
    v5 = a1[25];
    if ((unint64_t)v6 < v5)
    {
      *(_QWORD *)v6 = a2;
      *((_DWORD *)v6 + 2) = v4;
      v7 = v6 + 16;
LABEL_28:
      a1[24] = v7;
      return;
    }
    v11 = (_BYTE *)a1[23];
    v12 = (v6 - v11) >> 4;
    v13 = v12 + 1;
    if (!((unint64_t)(v12 + 1) >> 60))
    {
      v14 = v5 - (_QWORD)v11;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (!(v15 >> 60))
      {
        v16 = (char *)operator new(16 * v15);
        v17 = &v16[16 * v12];
        *(_QWORD *)v17 = a2;
        *((_DWORD *)v17 + 2) = v4;
        v7 = v17 + 16;
        if (v6 == v11)
        {
          v18 = &v16[16 * v12];
        }
        else
        {
          do
          {
            v18 = v17 - 16;
            *((_OWORD *)v17 - 1) = *((_OWORD *)v6 - 1);
            v6 -= 16;
            v17 -= 16;
          }
          while (v6 != v11);
        }
        a1[23] = v18;
        a1[24] = v7;
        a1[25] = &v16[16 * v15];
        if (v11)
          operator delete(v11);
        goto LABEL_28;
      }
LABEL_38:
      sub_1C4764EE4();
    }
LABEL_37:
    abort();
  }
  v9 = (_QWORD *)a1[21];
  v8 = a1[22];
  if ((unint64_t)v9 >= v8)
  {
    v19 = (_QWORD *)a1[20];
    v20 = v9 - v19;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61)
      goto LABEL_37;
    v22 = v8 - (_QWORD)v19;
    if (v22 >> 2 > v21)
      v21 = v22 >> 2;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 61)
        goto LABEL_38;
      v24 = (char *)operator new(8 * v23);
    }
    else
    {
      v24 = 0;
    }
    v25 = &v24[8 * v20];
    *(_QWORD *)v25 = a2;
    v10 = (uint64_t)(v25 + 8);
    if (v9 != v19)
    {
      do
      {
        v26 = *--v9;
        *((_QWORD *)v25 - 1) = v26;
        v25 -= 8;
      }
      while (v9 != v19);
      v9 = (_QWORD *)a1[20];
    }
    a1[20] = v25;
    a1[21] = v10;
    a1[22] = &v24[8 * v23];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = a2;
    v10 = (uint64_t)(v9 + 1);
  }
  a1[21] = v10;
  v27 = a1[20];
  v28 = (uint64_t *)a1[32];
  sub_1C476C5C4(v27, v10, &v28, (v10 - v27) >> 3);
}

_DWORD *sub_1C476B10C(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      do
      {
        *(_QWORD *)result = -4096;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

_DWORD *sub_1C476B19C(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(8 * v4, (std::align_val_t)4uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      do
      {
        *result = -1;
        result += 2;
        v6 -= 8;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void sub_1C476B22C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 - 9);
        v4 -= 72;
        v6 = v7;
        if (v4 + 16 != v7)
          free(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_1C476B2A4(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_QWORD **)result;
      v7 = 16 * v2;
      do
      {
        *v6 = -4096;
        v6 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    return sub_1C476B10C(v1, v5);
  }
  return result;
}

void sub_1C476B33C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  void *__p;
  char *v21;
  char *v22;
  char *v23;
  uint64_t *v24;

  v4 = a1[2];
  v5 = a1[1];
  if (0x8E38E38E38E38E39 * ((v4 - v5) >> 3) < a2)
  {
    v8 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x38E38E38E38E38ELL)
      abort();
    v10 = 0x8E38E38E38E38E39 * ((v4 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v9;
    v24 = a1 + 2;
    if (v11)
    {
      if (v11 > 0x38E38E38E38E38ELL)
        sub_1C4764EE4();
      v12 = (char *)operator new(72 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[72 * v8];
    __p = v12;
    v21 = v13;
    v23 = &v12[72 * v11];
    v14 = &v13[72 * a2];
    v15 = 72 * a2;
    do
    {
      *(_QWORD *)v13 = v13 + 16;
      *((_QWORD *)v13 + 1) = 0x600000000;
      *((_DWORD *)v13 + 16) = 0;
      v13 += 72;
      v15 -= 72;
    }
    while (v15);
    v22 = v14;
    sub_1C612517C(a1, &__p);
    v16 = v21;
LABEL_21:
    v17 = v22;
    while (v17 != v16)
    {
      v19 = (char *)*((_QWORD *)v17 - 9);
      v17 -= 72;
      v18 = v19;
      v22 = v17;
      if (v19 != v17 + 16)
      {
        free(v18);
        goto LABEL_21;
      }
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    if (a2)
    {
      v6 = v5 + 72 * a2;
      v7 = 72 * a2;
      do
      {
        *(_QWORD *)v5 = v5 + 16;
        *(_QWORD *)(v5 + 8) = 0x600000000;
        *(_DWORD *)(v5 + 64) = 0;
        v5 += 72;
        v7 -= 72;
      }
      while (v7);
      v5 = v6;
    }
    a1[1] = v5;
  }
}

uint64_t sub_1C476B4F4(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v12 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v12);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_7;
    }
    v7 = (_DWORD *)(a2 + 8);
    v6 = *(unsigned int *)(a2 + 8);
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 >= v6)
    {
      if ((_DWORD)v6)
        memmove(*(void **)a1, v4, 8 * v6);
LABEL_6:
      *(_DWORD *)(a1 + 8) = v6;
LABEL_7:
      *v7 = 0;
      return a1;
    }
    if (*(_DWORD *)(a1 + 12) < v6)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6, 8);
    }
    else if ((_DWORD)v8)
    {
      v13 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, v4, 8 * v8);
      v10 = v13;
LABEL_12:
      v11 = *v7;
      if (v10 != v11)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v10), (const void *)(*(_QWORD *)a2 + 8 * v10), *(_QWORD *)a2 + 8 * v11 - (*(_QWORD *)a2 + 8 * v10));
      goto LABEL_6;
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

void sub_1C476B618(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 2)
  {
    if (a2)
    {
      bzero(a1[1], 4 * a2);
      v5 += 4 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 2);
    if (v8 >> 62)
      abort();
    v9 = v4 - v6;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 62)
        sub_1C4764EE4();
      v11 = (char *)operator new(4 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[4 * (v7 >> 2)];
    v13 = &v11[4 * v10];
    bzero(v12, 4 * a2);
    while (v5 != v6)
    {
      v14 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    *a1 = v12;
    a1[1] = &v11[4 * a2 + v7];
    a1[2] = v13;
    if (v6)
      operator delete(v6);
  }
}

_QWORD *sub_1C476B734(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6125400(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C476B7EC(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v1 = *(_DWORD *)(a1 + 64);
  if (!v1)
    return 0xFFFFFFFFLL;
  v2 = 0;
  v3 = -v1;
  v4 = v1 - 1;
  v5 = *(uint64_t **)a1;
  v6 = 0xFFFFFFFFFFFFFFFFLL >> v3;
  v7 = v4 & 0xFFFFFFC0;
  while (1)
  {
    v9 = *v5++;
    v8 = v9;
    v10 = v7 == v2 ? v6 : -1;
    v11 = v10 & v8;
    if (v11)
      break;
    v2 += 64;
    if (v7 + 64 == v2)
      return 0xFFFFFFFFLL;
  }
  return __clz(__rbit64(v11)) + v2;
}

void sub_1C476B84C(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v6 = *(unsigned int *)(a3 + 40);
  v7 = *a2;
  if ((_DWORD)v6)
  {
    v8 = *(_QWORD **)(a3 + 32);
    v9 = 16 * v6;
    while (1)
    {
      v10 = *(unsigned int *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 192);
      if ((_DWORD)v10 != -1 && ((*(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFF8)) >> v10) & 1) == 0)
        break;
      v8 += 2;
      v9 -= 16;
      if (!v9)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v11 = *(unsigned int *)(a3 + 192);
    v12 = v11 >> 6;
    v13 = 1 << v11;
    if (((1 << v11) & *(_QWORD *)(v7 + 8 * (v11 >> 6))) == 0)
    {
      v15 = (_QWORD *)a1[8];
      v14 = a1[9];
      if ((unint64_t)v15 >= v14)
      {
        v17 = (_QWORD *)a1[7];
        v18 = v15 - v17;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
          abort();
        v20 = v14 - (_QWORD)v17;
        if (v20 >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          if (v21 >> 61)
            sub_1C4764EE4();
          v22 = (char *)operator new(8 * v21);
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[8 * v18];
        *(_QWORD *)v23 = a3;
        v16 = v23 + 8;
        if (v15 != v17)
        {
          do
          {
            v24 = *--v15;
            *((_QWORD *)v23 - 1) = v24;
            v23 -= 8;
          }
          while (v15 != v17);
          v15 = (_QWORD *)a1[7];
        }
        a1[7] = v23;
        a1[8] = v16;
        a1[9] = &v22[8 * v21];
        if (v15)
        {
          operator delete(v15);
          v25 = *(unsigned int *)(a3 + 192);
          v13 = 1 << v25;
          v12 = v25 >> 6;
        }
      }
      else
      {
        *v15 = a3;
        v16 = v15 + 1;
      }
      a1[8] = v16;
      *(_QWORD *)(*a2 + 8 * v12) |= v13;
      v26 = *(unsigned int *)(a3 + 120);
      if ((_DWORD)v26)
      {
        v27 = *(_QWORD **)(a3 + 112);
        v28 = 16 * v26;
        do
        {
          if (*(_DWORD *)((*v27 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
            sub_1C476B84C(a1, a2);
          v27 += 2;
          v28 -= 16;
        }
        while (v28);
      }
    }
  }
}

uint64_t sub_1C476BA0C(_QWORD *a1, unsigned int a2, int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int i;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  if (a2 == a3)
    return 0xFFFFFFFFLL;
  v4 = a2 >> 6;
  v5 = a3 - 1;
  if (a2 >> 6 > (a3 - 1) >> 6)
    return 0xFFFFFFFFLL;
  v6 = 0;
  v7 = v5 >> 6;
  v8 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v5;
  v9 = v7 - v4;
  if ((a2 & 0x3F) != 0)
    v10 = ~(0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F));
  else
    v10 = -1;
  v11 = *a1 + 8 * v4;
  for (i = -64 * v4; ; i -= 64)
  {
    v13 = v6 ? -1 : v10;
    v14 = v9 == v6 ? v8 : -1;
    v15 = (*(_QWORD *)(v11 + 8 * v6) ^ (a4 - 1)) & v13 & v14;
    if (v15)
      break;
    if (v9 + 1 == ++v6)
      return 0xFFFFFFFFLL;
  }
  return __clz(__rbit64(v15)) - i;
}

uint64_t sub_1C476BAB0(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  unsigned int v10;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *__p;
  char *v20;
  char *v21;
  char *v22;
  uint64_t *v23;

  v2 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL)
    abort();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v3;
  v23 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL)
      sub_1C4764EE4();
    v7 = (char *)operator new(72 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[72 * v2];
  __p = v7;
  v20 = v8;
  v22 = &v7[72 * v6];
  v9 = v8 + 16;
  *(_QWORD *)v8 = v8 + 16;
  *((_QWORD *)v8 + 1) = 0x600000000;
  v10 = *(_DWORD *)(a2 + 8);
  if (v8 == (char *)a2 || v10 == 0)
    goto LABEL_21;
  if (v10 < 7)
  {
    v12 = *(_DWORD *)(a2 + 8);
LABEL_19:
    memcpy(v9, *(const void **)a2, 8 * v12);
    goto LABEL_20;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v7[72 * v2], (uint64_t)(v8 + 16), *(unsigned int *)(a2 + 8), 8);
  v12 = *(_DWORD *)(a2 + 8);
  if (v12)
  {
    v9 = *(void **)v8;
    goto LABEL_19;
  }
LABEL_20:
  *((_DWORD *)v8 + 2) = v10;
LABEL_21:
  *(_DWORD *)&v7[72 * v2 + 64] = *(_DWORD *)(a2 + 64);
  v21 = v8 + 72;
  sub_1C612517C(a1, &__p);
  v13 = a1[1];
  v14 = v20;
LABEL_22:
  v15 = v21;
  while (v15 != v14)
  {
    v17 = (char *)*((_QWORD *)v15 - 9);
    v15 -= 72;
    v16 = v17;
    v21 = v15;
    if (v17 != v15 + 16)
    {
      free(v16);
      goto LABEL_22;
    }
  }
  if (__p)
    operator delete(__p);
  return v13;
}

uint64_t sub_1C476BC6C(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v42;
  void *__dst;
  uint64_t v44;
  _BYTE v45[48];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v42 = a2;
  v4 = a2 >> 6;
  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v4);
  if ((v5 & (1 << a2)) == 0)
    return 0;
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v4) = v5 & ~(1 << a2);
  v8 = *(_QWORD *)(a1[1] + 48) + 272 * a2;
  v10 = (uint64_t *)a1[55];
  v9 = a1[56];
  if ((unint64_t)v10 >= v9)
  {
    v13 = (_QWORD *)a1[54];
    v14 = v10 - v13;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      abort();
    v16 = v9 - (_QWORD)v13;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        sub_1C4764EE4();
      v18 = (char *)operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = (uint64_t *)&v18[8 * v14];
    *v19 = v8;
    v11 = v19 + 1;
    if (v10 != v13)
    {
      do
      {
        v20 = *--v10;
        *--v19 = v20;
      }
      while (v10 != v13);
      v10 = (uint64_t *)a1[54];
    }
    a1[54] = v19;
    a1[55] = v11;
    a1[56] = &v18[8 * v17];
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v10 = v8;
    v11 = v10 + 1;
  }
  v21 = 0;
  a1[55] = v11;
  __dst = v45;
  v44 = 0x600000000;
  if (&__dst != (void **)a3)
  {
    v22 = *(_DWORD *)(a3 + 8);
    if (v22)
    {
      if (v22 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v45, *(unsigned int *)(a3 + 8), 8);
        v24 = *(_DWORD *)(a3 + 8);
        if (!v24)
        {
LABEL_27:
          LODWORD(v44) = v22;
          v21 = v22;
          goto LABEL_28;
        }
        v23 = __dst;
      }
      else
      {
        v23 = v45;
        v24 = *(_DWORD *)(a3 + 8);
      }
      memcpy(v23, *(const void **)a3, 8 * v24);
      goto LABEL_27;
    }
  }
LABEL_28:
  v46 = *(_DWORD *)(a3 + 64);
  v25 = a1[45] + 72 * a2;
  v26 = *(_DWORD *)(v25 + 8);
  if (v26 >= v21)
    v27 = v21;
  else
    v27 = v26;
  if ((_DWORD)v27)
  {
    v28 = *(uint64_t **)v25;
    v29 = __dst;
    v30 = v27;
    do
    {
      v31 = *v28++;
      *v29++ &= v31;
      --v30;
    }
    while (v30);
  }
  if (v21 > v26)
  {
    v32 = __dst;
    do
    {
      v32[v27] = 0;
      LODWORD(v27) = v27 + 1;
    }
    while (v21 != (_DWORD)v27);
  }
  v33 = 0;
  v34 = -1;
  while (1)
  {
    v35 = sub_1C476BA0C(&__dst, v34 + 1, v46, 1u);
    if ((v35 + 1) < 2)
      break;
    v34 = v35;
    v36 = v35 >> 6;
    v37 = a1[11];
    v38 = *(_QWORD *)(v37 + 8 * v36);
    v39 = 1 << v35;
    if ((v38 & (1 << v35)) != 0)
    {
      *(_QWORD *)(v37 + 8 * v36) = v38 & ~v39;
      *((_QWORD *)__dst + v36) &= ~v39;
      v40 = sub_1C476BC6C(a1, v35, a3);
      if (v40 > v33)
        v33 = v40;
    }
  }
  v12 = v33 + 1;
  sub_1C476BFEC((uint64_t)(a1 + 51), &v42)[1] = v12;
  if (__dst != v45)
    free(__dst);
  return v12;
}

_DWORD *sub_1C476BF54(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_DWORD **)result;
      v7 = 8 * v2;
      do
      {
        *v6 = -1;
        v6 += 2;
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)result, 4);
    return sub_1C476B19C(v1, v5);
  }
  return result;
}

_DWORD *sub_1C476BFEC(uint64_t a1, _DWORD *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  _DWORD *v5;
  int v6;
  _DWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _DWORD *v12;
  _DWORD *v13;

  v2 = *(_DWORD *)(a1 + 16);
  if (!v2)
  {
    v12 = a2;
    v13 = 0;
LABEL_14:
    v5 = sub_1C476C0AC(a1, (uint64_t)v12, v12, v13);
    *(_QWORD *)v5 = *v12;
    return v5;
  }
  v3 = v2 - 1;
  v4 = (37 * *a2) & (v2 - 1);
  v5 = (_DWORD *)(*(_QWORD *)a1 + 8 * v4);
  v6 = *v5;
  if (*a2 != *v5)
  {
    v8 = 0;
    v9 = 1;
    while (v6 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v6 == -2;
      if (v10)
        v8 = v5;
      v11 = v4 + v9++;
      v4 = v11 & v3;
      v5 = (_DWORD *)(*(_QWORD *)a1 + 8 * (v11 & v3));
      v6 = *v5;
      if (*a2 == *v5)
        return v5;
    }
    v12 = a2;
    if (v8)
      v13 = v8;
    else
      v13 = v5;
    goto LABEL_14;
  }
  return v5;
}

_DWORD *sub_1C476C0AC(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_1C476C234(a1, v7);
    v15 = *(_DWORD *)(a1 + 16);
    if (v15)
    {
      v16 = v15 - 1;
      v17 = (37 * *a3) & v16;
      a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v17);
      v18 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
      v13 = 0;
      v19 = 1;
      while (v18 != -1)
      {
        if (v13)
          v20 = 0;
        else
          v20 = v18 == -2;
        if (v20)
          v13 = a4;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v17);
        v18 = *a4;
        if (*a3 == *a4)
          goto LABEL_3;
      }
      goto LABEL_10;
    }
LABEL_24:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1C476C234(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_24;
  v10 = v9 - 1;
  v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v11);
  v12 = *a4;
  if (*a3 == *a4)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != -1)
  {
    if (v13)
      v22 = 0;
    else
      v22 = v12 == -2;
    if (v22)
      v13 = a4;
    v23 = v11 + v14++;
    v11 = v23 & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v11);
    v12 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
  }
LABEL_10:
  if (v13)
    a4 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *sub_1C476C234(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C476C2EC(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C476C2EC(uint64_t result, int *a2, int *a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD **)result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = *(_DWORD **)result;
    do
    {
      *v6 = -1;
      v6 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v7 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      v8 = *(_DWORD *)(result + 16) - 1;
      v9 = v8 & (37 * v7);
      v10 = &v3[2 * v9];
      v11 = *v10;
      if (v7 != *v10)
      {
        v12 = 0;
        v13 = 1;
        while (v11 != -1)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == -2;
          if (v14)
            v12 = v10;
          v15 = v9 + v13++;
          v9 = v15 & v8;
          v10 = &v3[2 * (v15 & v8)];
          v11 = *v10;
          if (v7 == *v10)
            goto LABEL_13;
        }
        if (v12)
          v10 = v12;
      }
LABEL_13:
      *v10 = v7;
      v10[1] = a2[1];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

BOOL sub_1C476C3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  int v39;
  int v40;

  v3 = *(unsigned int *)(a2 + 192);
  v4 = *(float *)(a1 + 4 * v3);
  v5 = *(unsigned int *)(a3 + 192);
  v6 = *(float *)(a1 + 4 * v5);
  if (v4 != v6)
    return v6 > v4;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(unsigned __int8 *)(v9 + 4);
  v11 = -v10;
  v12 = *(_QWORD *)(v8 + 32);
  v13 = *(unsigned int *)(v8 + 40);
  if ((*(_BYTE *)(v9 + 8) & 2) != 0)
  {
    if ((_DWORD)v13 == v10)
      goto LABEL_10;
    v14 = *(unsigned __int8 *)(v9 + 4);
    do
    {
      v39 = *(_DWORD *)(v12 + 32 * v10);
      if ((v39 & 0x10000FF) != 0x1000000)
        break;
      v14 += (v39 & 0x2000000) == 0;
      if ((_DWORD)v13 - 1 == v10)
        break;
      ++v10;
    }
    while ((v39 & 0x2000000) == 0);
  }
  else
  {
    v14 = *(unsigned __int8 *)(v9 + 4);
  }
  if (v14 != (_DWORD)v13)
  {
    v15 = (unsigned __int8 *)(v12 + 32 * v14);
    v16 = 32 * v13 - 32 * v14;
    do
    {
      v17 = *v15;
      v15 += 32;
      if (!v17)
        ++v11;
      v16 -= 32;
    }
    while (v16);
  }
LABEL_10:
  v18 = *(_QWORD *)(a3 + 8);
  v19 = *(_QWORD *)(v18 + 16);
  v20 = *(unsigned __int8 *)(v19 + 4);
  v21 = -v20;
  v22 = *(_QWORD *)(v18 + 32);
  v23 = *(unsigned int *)(v18 + 40);
  if ((*(_BYTE *)(v19 + 8) & 2) == 0)
  {
    v24 = *(unsigned __int8 *)(v19 + 4);
    goto LABEL_12;
  }
  if ((_DWORD)v23 != v20)
  {
    v24 = *(unsigned __int8 *)(v19 + 4);
    do
    {
      v40 = *(_DWORD *)(v22 + 32 * v20);
      if ((v40 & 0x10000FF) != 0x1000000)
        break;
      v24 += (v40 & 0x2000000) == 0;
      if ((_DWORD)v23 - 1 == v20)
        break;
      ++v20;
    }
    while ((v40 & 0x2000000) == 0);
LABEL_12:
    if (v24 != (_DWORD)v23)
    {
      v25 = (unsigned __int8 *)(v22 + 32 * v24);
      v26 = 32 * v23 - 32 * v24;
      do
      {
        v27 = *v25;
        v25 += 32;
        if (!v27)
          ++v21;
        v26 -= 32;
      }
      while (v26);
    }
  }
  if (v11 != v21)
    return v21 < v11;
  v28 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v28)
  {
    v29 = 0;
    v30 = *(uint64_t **)(a2 + 32);
    v31 = 16 * v28;
    do
    {
      v32 = *v30;
      v30 += 2;
      if (*(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 212) == 1)
        ++v29;
      v31 -= 16;
    }
    while (v31);
  }
  else
  {
    v29 = 0;
  }
  v33 = *(unsigned int *)(a3 + 40);
  if ((_DWORD)v33)
  {
    v34 = 0;
    v35 = *(uint64_t **)(a3 + 32);
    v36 = 16 * v33;
    do
    {
      v37 = *v35;
      v35 += 2;
      if (*(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFF8) + 212) == 1)
        ++v34;
      v36 -= 16;
    }
    while (v36);
  }
  else
  {
    v34 = 0;
  }
  v38 = v3 < v5;
  if (v29 == v34)
    return v38;
  else
    return v29 < v34;
}

BOOL sub_1C476C5C4(_BOOL8 result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v9 = *v8;
    v11 = (uint64_t *)(a2 - 8);
    v10 = *(_QWORD *)(a2 - 8);
    result = sub_1C476C3C4(**a3, *v8, v10);
    if (result)
    {
      do
      {
        v12 = v8;
        *v11 = v9;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *v8;
        result = sub_1C476C3C4(**a3, *v8, v10);
        v11 = v12;
      }
      while (result);
      *v12 = v10;
    }
  }
  return result;
}

uint64_t sub_1C476C66C()
{
  sub_1C4769074(qword_1ED7EAF10, "balanced", "Balanced scheduler for AGX1.", (uint64_t)sub_1C6124F6C);
  return __cxa_atexit((void (*)(void *))sub_1C476900C, qword_1ED7EAF10, &dword_1C475E000);
}

unint64_t sub_1C476C6C0(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;

  v1 = a1[2];
  if (!(_DWORD)v1)
    return 0;
  LODWORD(v2) = 0;
  v3 = 12 * v1;
  v4 = (int *)(*(_QWORD *)a1 + 4);
  do
  {
    v6 = *v4;
    v4 += 3;
    v5 = v6;
    if ((v6 - 3) >= 0x100)
    {
      if ((v5 - 1283) >= 0x100)
        v8 = -4104;
      else
        v8 = -5128;
      if ((v5 - 1539) >= 0x100)
        v9 = v8;
      else
        v9 = -6152;
      if ((v5 - 1795) >= 0x100)
        v10 = v9;
      else
        v10 = -7176;
      if ((v5 - 18559) >= 0xFF)
        v11 = v10;
      else
        v11 = -74232;
      if ((v5 - 9299) >= 0xFF)
        v12 = v11;
      else
        v12 = -37192;
      if ((v5 - 771) >= 0x100)
        v7 = v12;
      else
        v7 = -3080;
    }
    else
    {
      v7 = -8;
    }
    v13 = v7 + 4 * v5;
    if (v2 <= v13)
      v2 = v13;
    else
      v2 = v2;
    v3 -= 12;
  }
  while (v3);
  return (unint64_t)(v2 + 15) >> 4;
}

BOOL sub_1C476C794(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v8;
  unsigned __int8 v9;
  uint64_t v12;
  int v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;

  LOBYTE(v8) = a4;
  v9 = a3;
  v17 = a2;
  v16 = a3;
  v14 = a4;
  v15 = a1;
  if (a3 > 0x1Bu)
  {
    if (a3 == 28)
      goto LABEL_16;
    if (a3 != 49)
    {
      if (a3 != 76)
        return 1;
      goto LABEL_16;
    }
    return !sub_1C476CB10(&v15, &v17, &v16, &v14, a7);
  }
  switch(a3)
  {
    case 2u:
      v16 = 4;
      if ((a5 & 2) != 0)
      {
        v8 = 1;
      }
      else if ((a5 & 1) != 0)
      {
        v8 = 2;
      }
      else
      {
        v8 = 3;
      }
      v14 = v8;
      v9 = 4;
      break;
    case 4u:
    case 9u:
      break;
    case 5u:
    case 0xAu:
      goto LABEL_16;
    case 6u:
      return !sub_1C476CB10(&v15, &v17, &v16, &v14, a7);
    default:
      return 1;
  }
  v12 = sub_1C476CA98(a7, (uint64_t)&unk_1C640C73C, 0x200uLL);
  if ((_DWORD)v12)
    goto LABEL_17;
  if (v9 == 6)
    return !sub_1C476CB10(&v15, &v17, &v16, &v14, a7);
  if (v9 != 5)
    return 1;
LABEL_16:
  v12 = sub_1C476CA98(a7, (uint64_t)&unk_1C640CB3C, 0x100uLL);
  if ((_DWORD)v12)
  {
LABEL_17:
    sub_1C476CB98(*(_DWORD **)(a7 + 24), a1 | (unint64_t)(v12 << 32), (unsigned __int16)(a2 << 8) | (v9 << 16) | (4 * (v8 & 0x3F)));
    return 0;
  }
  if (v9 == 49 || v9 == 6)
    return !sub_1C476CB10(&v15, &v17, &v16, &v14, a7);
  return 1;
}

uint64_t sub_1C476C900(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v8;
  unsigned __int8 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;

  LOBYTE(v8) = a4;
  v20 = a2;
  v11 = a3;
  v19 = a3;
  v17 = a4;
  v18 = a1;
  switch(a3)
  {
    case 2u:
      v19 = 4;
      if ((a5 & 2) != 0)
      {
        v8 = 1;
      }
      else if ((a5 & 1) != 0)
      {
        v8 = 2;
      }
      else
      {
        v8 = 3;
      }
      v17 = v8;
      v11 = 4;
      goto LABEL_17;
    case 3u:
    case 7u:
    case 8u:
      return 1;
    case 4u:
    case 9u:
LABEL_17:
      v13 = sub_1C476CA98(a7, (uint64_t)&unk_1C640CF3A, 0x200uLL);
      if ((_DWORD)v13)
        goto LABEL_18;
      if (v11 == 6)
        goto LABEL_12;
      if (v11 != 5)
        return 1;
LABEL_7:
      v13 = sub_1C476CA98(a7, (uint64_t)&unk_1C640D33A, 0xFFuLL);
      if ((_DWORD)v13)
      {
LABEL_18:
        sub_1C476CB98(*(_DWORD **)(a7 + 24), a1 | (unint64_t)(v13 << 32), (unsigned __int16)(a2 << 8) | (v11 << 16) | (4 * (v8 & 0x3F)));
      }
      else
      {
        if (v11 > 0x31u)
          return 1;
        v14 = 1 << v11;
        v15 = 0x2010000000040;
LABEL_11:
        if ((v14 & v15) == 0)
          return 1;
LABEL_12:
        if (!sub_1C476CB10(&v18, &v20, &v19, &v17, a7))
          return 1;
      }
      return 0;
    case 5u:
    case 0xAu:
      goto LABEL_7;
    case 6u:
      goto LABEL_12;
    default:
      v12 = a3 - 28;
      if (a3 - 28 > 0x30)
        return 1;
      if (((1 << v12) & 0x1000000000401) != 0)
        goto LABEL_7;
      v14 = 1 << v12;
      v15 = 2101248;
      goto LABEL_11;
  }
}

uint64_t sub_1C476CA98(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  if (a3)
  {
    v3 = 0;
    v4 = 0;
    while (((*(_DWORD *)(*(_QWORD *)(a1 + 48) + ((*(unsigned __int16 *)(a2 + 2 * v3) >> 3) & 0x1FFCLL)) >> *(_WORD *)(a2 + 2 * v3)) & 1) != 0)
    {
      v3 = ++v4;
      if (a3 <= v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v4 = a3;
  }
  if (a3 == v4)
    return 0;
  v5 = *(unsigned __int16 *)(a2 + 2 * v4);
  llvm::CCState::MarkAllocated((unsigned __int16 *)a1, *(unsigned __int16 *)(a2 + 2 * v4));
  return v5;
}

BOOL sub_1C476CB10(unsigned int *a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;

  v10 = sub_1C476CA98(a5, (uint64_t)&unk_1C640CD3C, 0xFFuLL);
  v11 = v10;
  if ((_DWORD)v10)
    sub_1C476CB98(*(_DWORD **)(a5 + 24), *a1 | (unint64_t)(v10 << 32), (*a2 << 8) | (*a3 << 16) | (4 * (*a4 & 0x3F)));
  return v11 != 0;
}

_DWORD *sub_1C476CB98(_DWORD *result, uint64_t a2, int a3)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = result;
  v6 = result[2];
  if (v6 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 12);
    LODWORD(v6) = v5[2];
  }
  v7 = *(_QWORD *)v5 + 12 * v6;
  *(_QWORD *)v7 = a2;
  *(_DWORD *)(v7 + 8) = a3;
  ++v5[2];
  return result;
}

_QWORD *sub_1C476CC0C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (_QWORD *)a1[32];
  if (v2 != a1 + 34)
    free(v2);
  v3 = (_QWORD *)a1[24];
  if (v3 != a1 + 26)
    free(v3);
  v4 = (_QWORD *)a1[16];
  if (v4 != a1 + 18)
    free(v4);
  v5 = (_QWORD *)a1[6];
  if (v5 != a1 + 8)
    free(v5);
  return a1;
}

uint64_t sub_1C476CC88(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, char a4, char a5, unsigned int a6, uint64_t a7)
{
  return sub_1C476CC98(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1C476CC98(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v9;
  uint64_t result;
  uint64_t v13;

  v9 = a3;
  result = 1;
  if (a3 <= 0x1Bu)
  {
    switch(a3)
    {
      case 2u:
        v9 = 4;
        if ((a5 & 2) != 0)
          a4 = 1;
        else
          a4 = a5 & 1 ^ 3;
        goto LABEL_6;
      case 4u:
      case 9u:
LABEL_6:
        v13 = sub_1C476CA98(a7, (uint64_t)&unk_1C640D538, 0x200uLL);
        if ((_DWORD)v13)
          goto LABEL_17;
        if (v9 == 6)
          goto LABEL_16;
        if (v9 != 5)
          return 1;
        goto LABEL_13;
      case 5u:
      case 0xAu:
        goto LABEL_13;
      case 6u:
        goto LABEL_16;
      default:
        return result;
    }
  }
  if (a3 != 28)
  {
    if (a3 == 49)
    {
LABEL_16:
      v13 = sub_1C476CA98(a7, (uint64_t)&unk_1C640DB38, 0xFFuLL);
      if ((_DWORD)v13)
        goto LABEL_17;
      return 1;
    }
    if (a3 != 76)
      return result;
  }
LABEL_13:
  v13 = sub_1C476CA98(a7, (uint64_t)&unk_1C640D938, 0x100uLL);
  if ((_DWORD)v13)
  {
LABEL_17:
    sub_1C476CB98(*(_DWORD **)(a7 + 24), a1 | (unint64_t)(v13 << 32), (unsigned __int16)(a2 << 8) | (v9 << 16) | (4 * (a4 & 0x3F)));
    return 0;
  }
  if (v9 == 49 || v9 == 6)
    goto LABEL_16;
  return 1;
}

uint64_t sub_1C476CDE0(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v8;
  unsigned __int8 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;

  LOBYTE(v8) = a4;
  v20 = a2;
  v11 = a3;
  v19 = a3;
  v17 = a4;
  v18 = a1;
  switch(a3)
  {
    case 2u:
      v19 = 4;
      if ((a5 & 2) != 0)
      {
        v8 = 1;
      }
      else if ((a5 & 1) != 0)
      {
        v8 = 2;
      }
      else
      {
        v8 = 3;
      }
      v17 = v8;
      v11 = 4;
      goto LABEL_17;
    case 3u:
    case 7u:
    case 8u:
      return 1;
    case 4u:
    case 9u:
LABEL_17:
      v13 = sub_1C476CA98(a7, (uint64_t)&unk_1C640DD36, 0x200uLL);
      if ((_DWORD)v13)
        goto LABEL_18;
      if (v11 == 6)
        goto LABEL_12;
      if (v11 != 5)
        return 1;
LABEL_7:
      v13 = sub_1C476CA98(a7, (uint64_t)&unk_1C640E136, 0x100uLL);
      if ((_DWORD)v13)
      {
LABEL_18:
        sub_1C476CB98(*(_DWORD **)(a7 + 24), a1 | (unint64_t)(v13 << 32), (unsigned __int16)(a2 << 8) | (v11 << 16) | (4 * (v8 & 0x3F)));
      }
      else
      {
        if (v11 > 0x31u)
          return 1;
        v14 = 1 << v11;
        v15 = 0x2010000000040;
LABEL_11:
        if ((v14 & v15) == 0)
          return 1;
LABEL_12:
        if (!sub_1C476CB10(&v18, &v20, &v19, &v17, a7))
          return 1;
      }
      return 0;
    case 5u:
    case 0xAu:
      goto LABEL_7;
    case 6u:
      goto LABEL_12;
    default:
      v12 = a3 - 28;
      if (a3 - 28 > 0x30)
        return 1;
      if (((1 << v12) & 0x1000000000401) != 0)
        goto LABEL_7;
      v14 = 1 << v12;
      v15 = 2101248;
      goto LABEL_11;
  }
}

uint64_t sub_1C476CF78(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetPassConfigPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "AGX1 Specific CodeGen Prepare: CFG Modifying Part";
  *(_QWORD *)(v2 + 8) = 49;
  *(_QWORD *)(v2 + 16) = "agx1-codegen-prepare";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EF6F9;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C47767F0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C476D010(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C476D034()
{
  return "AGX1 Specific CodeGen Prepare";
}

uint64_t sub_1C476D044()
{
  return 0;
}

uint64_t sub_1C476D04C()
{
  return 0;
}

void *sub_1C476D054(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1C476D0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  void **v14;
  void *v15;
  llvm::Instruction *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::ValueAsMetadata *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  BOOL v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *Select;
  uint64_t FCmpHelper;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned __int8 *v58;
  llvm::ValueAsMetadata *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  uint64_t *v65;
  llvm::Value *v66;
  uint64_t *v67;
  char v68;
  int v69;
  uint64_t *v70;
  int v71;
  llvm::ValueAsMetadata *v72;
  uint64_t v73;
  llvm::PointerType *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t ***v80;
  uint64_t v81;
  char v82;
  char v83;
  char *v84;
  char *v85;
  llvm::Value *v86;
  uint64_t **v87;
  _QWORD *v88;
  uint64_t **v89;
  llvm::PointerType *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  uint64_t v96;
  char v97;
  char v98;
  char *v99;
  char *v100;
  llvm::Value *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  llvm::ConstantInt *v105;
  llvm::Value **v106;
  unsigned __int8 *v107;
  llvm::Value **v108;
  unsigned __int8 *v109;
  llvm::Type *v110;
  llvm::UndefValue *v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  llvm::Value **v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  int v117;
  int v118;
  uint64_t *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int8 *v132;
  char *v133;
  uint64_t v134;
  char **v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  char *v153;
  char *v154;
  llvm::Value *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  unsigned __int8 *v169;
  unsigned __int8 *v170;
  uint64_t ***v171;
  llvm::ConstantInt *v172;
  llvm::Value **v173;
  uint64_t v174;
  uint64_t *v175;
  char v176;
  char v177;
  char *v178;
  char *v179;
  uint64_t ****v180;
  llvm::Value *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t **v185;
  uint64_t *****v186;
  uint64_t **v187;
  llvm::PointerType *v188;
  llvm::UndefValue *v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  unsigned __int8 *v193;
  unsigned __int8 *v194;
  llvm::ConstantInt *v195;
  llvm::Value **v196;
  uint64_t v197;
  unsigned __int8 *v198;
  llvm::Value **v199;
  uint64_t v200;
  unsigned __int8 *v201;
  llvm::Type *v202;
  llvm::UndefValue *v203;
  unsigned __int8 *v204;
  uint64_t *v205;
  char v206;
  char v207;
  char *v208;
  char *v209;
  unsigned __int8 **v210;
  llvm::Value *v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  unsigned __int8 ***v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  unsigned __int8 *v220;
  char *v221;
  unsigned __int8 **v222;
  int v223;
  unsigned __int8 *v224;
  unsigned __int8 *v225;
  unsigned __int8 *v226;
  unsigned __int8 *v227;
  char *v228;
  unsigned __int8 **v229;
  int v230;
  unsigned __int8 *v231;
  unsigned __int8 *v232;
  unsigned __int8 *v233;
  unsigned int v234;
  unsigned __int8 *v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t *v239;
  unsigned __int8 *v240;
  unsigned __int8 *v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  char **v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  BOOL v253;
  unsigned __int8 *v254;
  uint64_t v255;
  llvm::ValueAsMetadata *v256;
  uint64_t v258;
  char v259;
  char v260;
  char *v261;
  char *v262;
  uint64_t *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  char v269;
  char *v270;
  char *v271;
  llvm::Value *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  llvm::Value *v277;
  unsigned __int8 *v278;
  char *v279;
  unsigned __int8 **v280;
  int v281;
  unsigned __int8 *v282;
  unsigned __int8 *v283;
  unsigned __int8 **v284;
  unsigned __int8 *v285;
  unsigned __int8 *v286;
  char *v287;
  unsigned __int8 **v288;
  int v289;
  unsigned __int8 *v290;
  unsigned __int8 *v291;
  unsigned __int8 *v292;
  uint64_t i;
  uint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  unsigned int v298;
  uint64_t v299;
  int v300;
  uint64_t **v301;
  int v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t *v306;
  uint64_t *v307;
  unsigned __int8 *v308;
  unsigned __int8 *v309;
  uint64_t v310;
  char *v311;
  char *v312;
  uint64_t v313;
  char **v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  BOOL v319;
  llvm::UndefValue *v320;
  llvm::Type *v321;
  const llvm::APInt *v322;
  unsigned int v323;
  unsigned __int8 *v324;
  uint64_t v325;
  unsigned __int8 *v326;
  uint64_t v327;
  uint64_t *v328;
  unsigned int v329;
  uint64_t v330;
  llvm::ConstantInt *v331;
  unsigned int v332;
  unint64_t v333;
  llvm::ValueHandleBase *v334;
  unsigned __int8 *v335;
  uint64_t v336;
  unsigned __int8 *v337;
  char *v338;
  unsigned __int8 **v339;
  int v340;
  unsigned __int8 *v341;
  unsigned __int8 *v342;
  unsigned __int8 *v343;
  unsigned __int8 *v344;
  char *v345;
  unsigned __int8 **v346;
  int v347;
  unsigned __int8 *v348;
  unsigned __int8 *v349;
  unsigned __int8 *v350;
  uint64_t v351;
  const llvm::APInt *v352;
  uint64_t v353;
  llvm::ConstantInt *v354;
  unsigned int v355;
  unint64_t v356;
  llvm::ValueHandleBase *v357;
  unsigned __int8 *v358;
  uint64_t v359;
  uint64_t v360;
  llvm::Value *v361;
  char *v362;
  char *v363;
  uint64_t v364;
  uint64_t j;
  const llvm::APInt *v366;
  unsigned __int8 *v367;
  llvm::ConstantInt *v368;
  unsigned int v369;
  unint64_t v370;
  llvm::ValueHandleBase *v371;
  uint64_t v372;
  llvm::ValueAsMetadata *v373;
  uint64_t v375;
  uint64_t v376;
  int v377;
  void *v378;
  int v379;
  uint64_t *v380;
  uint64_t v381;
  _QWORD *v383;
  uint64_t *v384;
  BOOL v385;
  unint64_t v386;
  _QWORD *v387;
  uint64_t v388;
  int v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  uint64_t v394;
  uint64_t v395;
  unsigned __int8 *v396;
  char *v397;
  void **v398;
  int v399;
  unsigned __int8 *v400;
  unsigned __int8 *v401;
  unsigned __int8 *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  unint64_t v409;
  uint64_t **v410;
  uint64_t *v411;
  int v412;
  uint64_t **v413;
  uint64_t *v414;
  uint64_t v415;
  unsigned int v416;
  BOOL v417;
  int v418;
  int v419;
  char *v420;
  char *v421;
  uint64_t v422;
  unint64_t v423;
  int v424;
  _QWORD *v425;
  int v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  int ItrKind;
  unsigned __int8 *v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t *v440;
  llvm::UndefValue **v441;
  unint64_t v442;
  llvm::UndefValue *AggregateElement;
  int v444;
  BOOL v445;
  unsigned int *v446;
  unsigned int *v447;
  unsigned int *v448;
  int v449;
  BOOL v450;
  unint64_t v451;
  uint64_t v452;
  unint64_t *v453;
  unsigned int v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  unsigned int v460;
  uint64_t v461;
  _QWORD *v462;
  uint64_t v463;
  uint64_t *v464;
  BOOL v466;
  llvm::Type *v467;
  uint64_t v468;
  uint64_t PrimitiveSizeInBits;
  BOOL v470;
  int v471;
  llvm::Value **v472;
  llvm::Value **v473;
  unint64_t v474;
  const llvm::APInt *v475;
  llvm::ConstantInt *v476;
  const llvm::APInt *v477;
  llvm::ValueHandleBase *v478;
  llvm::ConstantInt *v479;
  unsigned int v480;
  char v481;
  const llvm::APInt *v482;
  llvm::ValueHandleBase *v483;
  llvm::ConstantInt *v484;
  unsigned int v485;
  unint64_t v486;
  const llvm::APInt *v487;
  llvm::ValueHandleBase *v488;
  llvm::ConstantInt *v489;
  unsigned int v490;
  unint64_t v491;
  llvm::ValueHandleBase *v492;
  unsigned __int8 *v493;
  uint64_t v494;
  unsigned __int8 *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t **v499;
  uint64_t v500;
  uint64_t v501;
  llvm::ConstantInt *v502;
  unsigned int v503;
  unint64_t v504;
  llvm::ValueHandleBase *v505;
  uint64_t v506;
  unsigned __int8 *v507;
  uint64_t v508;
  uint64_t **v509;
  uint64_t v510;
  unsigned __int8 *v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  _DWORD *v515;
  unint64_t v516;
  int v517;
  uint64_t *v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  uint64_t **v522;
  uint64_t *v523;
  uint64_t *v524;
  llvm::Value *v525;
  void **v526;
  llvm::Value **v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t **v530;
  uint64_t v531;
  uint64_t v532;
  llvm::Value *v533;
  char *v534;
  char *v535;
  uint64_t *v536;
  uint64_t v537;
  _QWORD *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t **v541;
  uint64_t v542;
  unsigned __int8 *v543;
  char *v544;
  unsigned __int8 **v545;
  int v546;
  unsigned __int8 *v547;
  unsigned __int8 *v548;
  unsigned __int8 *v549;
  uint64_t v550;
  uint64_t v551;
  const llvm::APInt *v552;
  uint64_t v553;
  llvm::ConstantInt *v554;
  unsigned int v555;
  unint64_t v556;
  uint64_t *v557;
  uint64_t v558;
  unint64_t v559;
  uint64_t *v560;
  void **v561;
  int v562;
  uint64_t *v563;
  uint64_t v564;
  int v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t *v569;
  uint64_t *v570;
  uint64_t *v571;
  unsigned __int8 *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t *v576;
  uint64_t *v577;
  uint64_t *v578;
  unsigned __int8 *v579;
  uint64_t v580;
  char v581;
  char *v582;
  char *v583;
  uint64_t *v584;
  llvm::Value *v585;
  uint64_t v586;
  _QWORD *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t **v590;
  uint64_t v591;
  unsigned __int8 *v592;
  char *v593;
  unsigned __int8 **v594;
  int v595;
  unsigned __int8 *v596;
  unsigned __int8 *v597;
  unsigned __int8 *v598;
  uint64_t v599;
  unint64_t v600;
  int v601;
  uint64_t **v602;
  int v603;
  uint64_t v604;
  uint64_t v605;
  unsigned int v606;
  BOOL v607;
  uint64_t *v609;
  uint64_t *v610;
  uint64_t *v611;
  uint64_t v612;
  unsigned __int8 *v613;
  unsigned __int8 *v614;
  uint64_t *v615;
  uint64_t v616;
  unsigned __int8 *v617;
  uint64_t v618;
  uint64_t v619;
  int v620;
  int v621;
  uint64_t **v622;
  unsigned __int8 *v623;
  uint64_t *v624;
  uint64_t *v625;
  unsigned __int8 *v626;
  unsigned __int8 *v627;
  uint64_t v628;
  unsigned __int8 *v629;
  unsigned __int8 *v630;
  int v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t **v635;
  uint64_t *v636;
  uint64_t **v637;
  uint64_t v638;
  llvm::Value *v639;
  unsigned __int8 *v640;
  int v641;
  uint64_t Declaration;
  uint64_t v643;
  llvm::LLVMContext *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t **v648;
  llvm::Value *v649;
  uint64_t *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t *v653;
  unint64_t *v654;
  uint64_t v655;
  unint64_t *v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  unint64_t *v661;
  unint64_t *v662;
  unsigned int v663;
  unsigned int v664;
  uint64_t v665;
  char *v666;
  uint64_t v667;
  uint64_t v668;
  char *v669;
  unint64_t v670;
  int v671;
  uint64_t v672;
  unint64_t v673;
  uint64_t v674;
  _QWORD **v675;
  uint64_t v676;
  unint64_t *v677;
  unint64_t v678;
  uint64_t v679;
  unint64_t *v680;
  uint64_t v681;
  unint64_t *v682;
  unint64_t v683;
  uint64_t v684;
  _QWORD *v685;
  unint64_t *v686;
  unint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  int v695;
  unint64_t v696;
  uint64_t v697;
  uint64_t v698;
  unsigned int v699;
  void **v700;
  unint64_t v701;
  uint64_t *v702;
  unsigned __int8 *v703;
  uint64_t v704;
  unsigned __int8 *v705;
  unsigned __int8 *v706;
  int v707;
  uint64_t v708;
  unsigned int v709;
  unsigned int v710;
  unsigned int v711;
  uint64_t v712;
  unsigned __int8 *v713;
  int v714;
  unsigned int v715;
  uint64_t SCEVIter;
  uint64_t v717;
  unsigned int v718;
  unsigned int v719;
  uint64_t v720;
  uint64_t v721;
  int v722;
  unsigned int v723;
  uint64_t v724;
  uint64_t v725;
  _QWORD *v726;
  int v727;
  uint64_t v728;
  llvm::Constant *v729;
  uint64_t v730;
  int v731;
  _BYTE *v732;
  int v733;
  int v734;
  uint64_t v735;
  unsigned __int8 *v736;
  uint64_t v737;
  unsigned __int8 *v738;
  unsigned __int8 *v739;
  unsigned __int8 *v740;
  llvm::Constant *v741;
  BOOL v742;
  int v743;
  unsigned __int8 **v744;
  uint64_t v745;
  uint64_t v746;
  llvm::Type *v747;
  _QWORD *k;
  _QWORD *v749;
  llvm::Type *v750;
  llvm::Type *v751;
  llvm::ConstantFP **v752;
  uint64_t *v753;
  llvm::Type *v754;
  llvm::APFloatBase *v755;
  uint64_t *v756;
  llvm::Value *v757;
  uint64_t v758;
  uint64_t *v759;
  uint64_t v760;
  uint64_t v761;
  void *v762;
  uint64_t v763;
  uint64_t *v764;
  uint64_t v765;
  llvm::ValueSymbolTable *v766;
  _QWORD *v767;
  uint64_t v768;
  uint64_t v769;
  void *v770;
  unsigned int v771;
  _QWORD *v772;
  void *v773;
  _QWORD *v774;
  int v775;
  BOOL v776;
  unsigned int v777;
  _QWORD *v778;
  uint64_t v779;
  uint64_t *m;
  uint64_t *v781;
  unsigned int v782;
  uint64_t v783;
  llvm::Value *v785;
  uint64_t v786;
  llvm::Value *v787;
  _WORD *v788;
  uint64_t v789;
  _QWORD *v790;
  uint64_t v791;
  _QWORD *v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  _QWORD *v796;
  uint64_t v797;
  llvm::ValueSymbolTable *v798;
  unint64_t *v799;
  unint64_t *v800;
  unsigned int v801;
  unsigned int v802;
  uint64_t v803;
  char *v804;
  char v805;
  uint64_t v806;
  char *v807;
  unint64_t v808;
  int v809;
  uint64_t v810;
  unint64_t v811;
  uint64_t v812;
  _QWORD **v813;
  uint64_t v814;
  unint64_t *v815;
  unint64_t v816;
  uint64_t v817;
  unint64_t *v818;
  uint64_t v819;
  unint64_t *v820;
  unint64_t v821;
  uint64_t v822;
  _QWORD *v823;
  unint64_t *v824;
  unint64_t v825;
  int v829;
  unsigned int v830;
  char *v831;
  int v832;
  unsigned int v833;
  char *v834;
  uint64_t v835;
  uint64_t v836;
  int v837;
  int v838;
  uint64_t v839;
  int v840;
  unint64_t v841;
  void **v842;
  unsigned __int8 **v843;
  void **v844;
  uint64_t *v845;
  llvm::Value **v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  unsigned __int8 *v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  int v857;
  char v858;
  char *v859;
  unsigned __int8 **v860;
  unsigned __int8 **v861;
  unsigned __int8 **v862;
  char *v863;
  char *v864;
  char *v865;
  llvm::Value **v866;
  void *v867;
  uint64_t v868;
  unsigned __int8 *v869;
  unint64_t *v870;
  char *v871;
  uint64_t v872;
  int v873;
  _BYTE v874[64];
  llvm::Type *v875;
  llvm::Type *v876;
  uint64_t v877;
  int v878;
  char v879;
  _WORD v880[6];
  unsigned int v881;
  unsigned int v882;
  uint64_t v883[4];
  __int16 v884;
  void *v885[2];
  __int128 v886;
  __int16 v887;
  void *v888;
  uint64_t v889;
  uint64_t v890;
  unsigned int v891;
  __int16 v892;
  unsigned __int8 *v893;
  uint64_t v894;
  _QWORD v895[2];
  uint64_t v896;
  char v897;
  uint64_t v898;
  _QWORD *v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;

  v903 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 40);
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::ScalarEvolutionWrapperPass::ID);
  v7 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v8 = **(void ****)(a1 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::DominatorTreeWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v11 = **(void ****)(a1 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::LoopInfoWrapperPass::ID);
  v13 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::LoopInfoWrapperPass::ID);
  v14 = **(void ****)(a1 + 8);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v16 = (llvm::Instruction *)(v10 + 32);
  v17 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), &llvm::FunctionGroupInfoWrapperPass::ID);
  v18 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v17 + 32) + 24))(*(_QWORD *)(v17 + 32), a2);
  v870 = (unint64_t *)v874;
  v871 = v874;
  v872 = 8;
  v873 = 0;
  v852 = (unsigned __int8 *)(v4 + 272);
  v19 = sub_1C5E9F490(a2, (void **)(v4 + 272), v16);
  v20 = v19 | sub_1C5E9FF40(a2);
  v21 = v20 | sub_1C5EA0CE0(a2, v16);
  sub_1C5EA12A4(a2, *(_BYTE *)(a1 + 28), 0, 0, 0, 0);
  v23 = v21 | v22;
  if (!*(_BYTE *)(a1 + 28))
    v23 |= sub_1C5EA2178((void ***)a2, v18, (uint64_t)v16, (uint64_t *)(v13 + 32));
  v857 = v23;
  v849 = a1;
  v850 = v7;
  v848 = a2;
  v24 = *(_QWORD *)(a2 + 80);
  v853 = a2 + 72;
  if (v24 != a2 + 72)
  {
    v847 = v18;
    while (1)
    {
      v25 = v24 - 24;
      v854 = v24;
      if (!v24)
        v25 = 0;
      v26 = v25 + 40;
      v27 = *(_QWORD *)(v25 + 48);
      if (v27 != v25 + 40)
        break;
LABEL_926:
      v24 = *(_QWORD *)(v854 + 8);
      if (v24 == v853)
        goto LABEL_927;
    }
    v851 = v25;
    v855 = v25 + 40;
    while (1)
    {
      v28 = *(_QWORD *)(v27 + 8);
      v29 = (llvm::ValueAsMetadata *)(v27 - 24);
      if (v27)
        v30 = v27 - 24;
      else
        v30 = 0;
      v31 = *(unsigned __int8 *)(v30 + 16);
      if (v27 && v31 == 85)
      {
        v32 = 0;
        v33 = *(_QWORD *)(v30 - 96);
        if (v33 && *(_BYTE *)(v33 + 16) == 82)
          v32 = **(_QWORD **)(v33 - 64);
        v34 = *(uint64_t **)v30;
        v35 = *(unsigned __int8 *)(*(_QWORD *)v30 + 8);
        v36 = v35 > 6 || v35 == 0;
        v37 = v36 || v32 == 0;
        if (v37 || *(_BYTE *)(v32 + 8))
          goto LABEL_48;
        v889 = 0;
        v888 = 0;
        v888 = *(void **)(v30 - 64);
        v889 = *(_QWORD *)(v30 - 32);
        if ((sub_1C4771F04((uint64_t)&v888) & 1) != 0)
        {
          v38 = (uint64_t *)sub_1C4773D54((uint64_t)&v893, v30, 0, 0, 0);
          v39 = *(_QWORD *)(v30 - 96);
          v880[0] = 257;
          Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect(v38, v39, (uint64_t *)v888, v889, (uint64_t)&v875, 0);
          v880[0] = 257;
          FCmpHelper = (uint64_t)sub_1C47721A0((uint64_t)&v893, Select, v34, (uint64_t)&v875);
LABEL_60:
          v58 = (unsigned __int8 *)FCmpHelper;
          v59 = (llvm::ValueAsMetadata *)v30;
LABEL_61:
          llvm::Value::doRAUW(v59, (llvm::Value *)v58, (llvm::Value *)1);
          v60 = v30;
LABEL_62:
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, v60);
LABEL_63:
          if (v893 != (unsigned __int8 *)v895)
            free(v893);
          goto LABEL_65;
        }
        v31 = *(unsigned __int8 *)(v30 + 16);
      }
      if (v31 == 82)
        v42 = v30;
      else
        v42 = 0;
      if (v27 && v31 == 82)
      {
        if (!*(_BYTE *)(**(_QWORD **)(v42 - 64) + 8))
          goto LABEL_48;
        v889 = 0;
        v888 = 0;
        v888 = *(void **)(v42 - 64);
        v889 = *(_QWORD *)(v42 - 32);
        if ((sub_1C4771F04((uint64_t)&v888) & 1) != 0)
        {
          v43 = sub_1C4773D54((uint64_t)&v893, v30, 0, 0, 0);
          v44 = *(_WORD *)(v42 + 18) & 0x3F;
          v880[0] = 257;
          FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper(v43, v44, (uint64_t *)v888, v889, (uint64_t)&v875, 0, 0);
          goto LABEL_60;
        }
        v31 = *(unsigned __int8 *)(v30 + 16);
      }
      if (v31 == 52)
      {
        v45 = *(_DWORD *)(v30 + 20);
        if ((v45 & 0x40000000) != 0)
          v46 = *(_QWORD *)(v30 - 8);
        else
          v46 = v30 - 32 * (v45 & 0x7FFFFFF);
        v53 = *(uint64_t **)v46;
        v54 = *(_QWORD *)(v46 + 32);
        v55 = sub_1C4773D54((uint64_t)&v893, v30, 0, 0, 0);
        v880[0] = 257;
        v56 = (uint64_t *)sub_1C47721F8(v55, v53, v54, (uint64_t)&v875, 0);
        v880[0] = 257;
        v57 = sub_1C4772428((uint64_t)&v893, v56, v54, (uint64_t)&v875, 0);
        v880[0] = 257;
        FCmpHelper = sub_1C477265C((uint64_t)&v893, v53, v57, (uint64_t)&v875, 0);
        goto LABEL_60;
      }
LABEL_48:
      v893 = 0;
      v875 = (llvm::Type *)&v893;
      if (!sub_1C4E7B6EC((_QWORD **)&v875, v30))
        goto LABEL_87;
      v47 = v893;
      if (!v893)
        goto LABEL_87;
      v48 = *((_QWORD *)v893 + 1);
      if (!v48 || *(_QWORD *)(v48 + 8))
        goto LABEL_87;
      v49 = (uint64_t *)sub_1C4773D54((uint64_t)&v893, v30, 0, 0, 0);
      v50 = *((unsigned __int8 *)v47 + 16);
      switch(v50)
      {
        case 5:
          v63 = *((unsigned __int16 *)v47 + 9);
          if (v63 != 21)
          {
            if (v63 != 18)
              goto LABEL_84;
            v64 = (uint64_t *)&v47[-8 * (v47[5] & 0x7FFFFFF)];
            v51 = *v64;
            if (!*v64)
              goto LABEL_84;
            v52 = v64[4];
            if (!v52)
              goto LABEL_84;
LABEL_73:
            v880[0] = 257;
            v65 = (uint64_t *)sub_1C4772890(v49, v51, (uint64_t)&v875, 0);
            v880[0] = 257;
            v66 = (llvm::Value *)sub_1C4772428((uint64_t)&v893, v65, v52, (uint64_t)&v875, 0);
            if (v66)
              goto LABEL_83;
            goto LABEL_84;
          }
          v67 = (uint64_t *)&v47[-8 * (v47[5] & 0x7FFFFFF)];
          v61 = *v67;
          if (!*v67)
            goto LABEL_84;
          v62 = v67[4];
          if (!v62)
            goto LABEL_81;
          break;
        case 49:
          v61 = *((_QWORD *)v47 - 8);
          if (!v61)
            goto LABEL_84;
          v62 = *((_QWORD *)v47 - 4);
          if (!v62)
            goto LABEL_81;
          break;
        case 46:
          v51 = *((_QWORD *)v47 - 8);
          if (!v51)
            goto LABEL_84;
          v52 = *((_QWORD *)v47 - 4);
          if (!v52)
            goto LABEL_84;
          goto LABEL_73;
        default:
          goto LABEL_84;
      }
      if (*(_BYTE *)(v61 + 16) == 17)
      {
        LODWORD(v885[1]) = 64;
        v885[0] = (void *)0x3FF0000000000000;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v888, (const llvm::APInt **)v885);
        v876 = (llvm::Type *)v888;
        v877 = v889;
        v878 = v890;
        v879 = BYTE4(v890) & 0xF;
        llvm::APFloat::convert((uint64_t)&v875, *(void **)(v61 + 32), 1, &v888);
        v68 = sub_1C47ECB98(v61 + 24, (uint64_t)&v875);
        if (v876 == (llvm::Type *)&unk_1C866F1C0)
        {
          sub_1C4773C74(&v877);
        }
        else if ((*((_DWORD *)v876 + 2) - 64) <= 0xFFFFFF7F && v877)
        {
          MEMORY[0x1CAA32F9C](v877, 0x1000C8000313F17);
        }
        if ((v68 & 1) != 0)
        {
LABEL_81:
          v69 = 1;
          goto LABEL_85;
        }
      }
      v880[0] = 257;
      v70 = (uint64_t *)sub_1C4772890((uint64_t *)&v893, v61, (uint64_t)&v875, 0);
      v880[0] = 257;
      v66 = (llvm::Value *)sub_1C47721F8((uint64_t)&v893, v70, v62, (uint64_t)&v875, 0);
      if (v66)
      {
LABEL_83:
        v857 = 1;
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v30, v66, (llvm::Value *)1);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, v30);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, (uint64_t)v47);
        v69 = 0;
        goto LABEL_85;
      }
LABEL_84:
      v69 = 1;
LABEL_85:
      if (v893 == (unsigned __int8 *)v895)
      {
        if (!v69)
          goto LABEL_277;
      }
      else
      {
        free(v893);
        if (!v69)
          goto LABEL_277;
      }
LABEL_87:
      v868 = v28;
      v71 = *(unsigned __int8 *)(v30 + 16);
      if (v71 == 60)
        v72 = (llvm::ValueAsMetadata *)v30;
      else
        v72 = 0;
      if (v27 && v71 == 60)
      {
        v73 = *(_QWORD *)v72;
        if ((*(_DWORD *)(*(_QWORD *)v72 + 8) & 0xFE) == 0x12
          && *(_DWORD *)(*(_QWORD *)(v73 + 24) + 8) == 2061
          && *(_DWORD *)(v73 + 32) == 3)
        {
          sub_1C4773D54((uint64_t)&v893, v30, 0, 0, 0);
          v74 = (llvm::PointerType *)v73;
          if ((*(_DWORD *)(v73 + 8) & 0xFE) == 0x12)
            v74 = **(llvm::PointerType ***)(v73 + 16);
          v75 = **((_QWORD **)v72 - 4);
          v76 = *(_DWORD *)(v75 + 8);
          if ((v76 & 0xFE) == 0x12)
            v76 = *(_DWORD *)(**(_QWORD **)(v75 + 16) + 8);
          v77 = llvm::PointerType::get(v74, (llvm::Type *)(v76 >> 8));
          v78 = (unsigned __int8 *)*((_QWORD *)v72 - 4);
          v880[0] = 257;
          v79 = sub_1C4773E38((uint64_t *)&v893, 49, v78, v77, (uint64_t)&v875);
          v880[0] = 257;
          v80 = sub_1C4772C18((uint64_t *)&v893, v74, v79, 2u, (uint64_t)&v875);
          v81 = *(*v80)[2];
          v892 = 257;
          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v898 + 56) + 40) + 272, v81);
          v83 = v82;
          v84 = (char *)operator new(0x60uLL);
          v85 = v84;
          *((_QWORD *)v84 + 1) = 0;
          v86 = (llvm::Value *)(v84 + 32);
          *((_QWORD *)v84 + 2) = 0;
          *((_QWORD *)v84 + 3) = v84 + 32;
          v880[0] = 257;
          *((_QWORD *)v84 + 4) = v81;
          *((_QWORD *)v84 + 5) = 0;
          *((_WORD *)v84 + 24) = 60;
          *((_DWORD *)v84 + 13) = 1;
          *(_OWORD *)(v84 + 56) = 0u;
          *(_OWORD *)(v84 + 72) = 0u;
          *((_DWORD *)v84 + 22) = 0;
          *(_QWORD *)v84 = v80;
          v89 = v80[1];
          v88 = v80 + 1;
          v87 = v89;
          *((_QWORD *)v84 + 1) = v89;
          if (v89)
            v87[2] = (uint64_t *)(v84 + 8);
          *((_QWORD *)v84 + 2) = v88;
          *v88 = v84;
          *((_WORD *)v84 + 25) = 2 * (v83 & 0x3F);
          v84[92] = 1;
          llvm::Value::setName((uint64_t ***)v84 + 4, (uint64_t)&v875);
          (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, _QWORD *))(*(_QWORD *)v902 + 16))(v902, v86, &v888, v898, v899);
          if (!(_DWORD)v894)
          {
LABEL_102:
            llvm::FixedVectorType::get(v74, (llvm::Type *)2);
            v91 = **((_QWORD **)v72 - 4);
            v92 = *(_DWORD *)(v91 + 8);
            if ((v92 & 0xFE) == 0x12)
              v92 = *(_DWORD *)(**(_QWORD **)(v91 + 16) + 8);
            v93 = llvm::PointerType::get(v90, (llvm::Type *)(v92 >> 8));
            v94 = (unsigned __int8 *)*((_QWORD *)v72 - 4);
            v880[0] = 257;
            v95 = sub_1C4773E38((uint64_t *)&v893, 49, v94, v93, (uint64_t)&v875);
            v96 = **(_QWORD **)(*(_QWORD *)v95 + 16);
            v892 = 257;
            llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v898 + 56) + 40) + 272, v96);
            v98 = v97;
            v99 = (char *)operator new(0x60uLL);
            v100 = v99;
            *((_QWORD *)v99 + 1) = 0;
            v101 = (llvm::Value *)(v99 + 32);
            *((_QWORD *)v99 + 2) = 0;
            *((_QWORD *)v99 + 3) = v99 + 32;
            v880[0] = 257;
            *((_QWORD *)v99 + 4) = v96;
            *((_QWORD *)v99 + 5) = 0;
            *((_WORD *)v99 + 24) = 60;
            *((_DWORD *)v99 + 13) = 1;
            *(_OWORD *)(v99 + 56) = 0u;
            *(_OWORD *)(v99 + 72) = 0u;
            *((_DWORD *)v99 + 22) = 0;
            *(_QWORD *)v99 = v95;
            v104 = *((_QWORD *)v95 + 1);
            v103 = v95 + 8;
            v102 = v104;
            *((_QWORD *)v99 + 1) = v104;
            if (v104)
              *(_QWORD *)(v102 + 16) = v99 + 8;
            *((_QWORD *)v99 + 2) = v103;
            *v103 = v99;
            *((_WORD *)v99 + 25) = 2 * (v98 & 0x3F);
            v99[92] = 1;
            llvm::Value::setName((uint64_t ***)v99 + 4, (uint64_t)&v875);
            (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, _QWORD *))(*(_QWORD *)v902 + 16))(v902, v101, &v888, v898, v899);
            if (!(_DWORD)v894)
            {
LABEL_107:
              v105 = (llvm::ConstantInt *)(***(_QWORD ***)v30 + 1960);
              v106 = llvm::ConstantInt::get(v105, 0, 0);
              v880[0] = 257;
              v107 = sub_1C4772EE0((uint64_t *)&v893, (uint64_t)v101, (uint64_t)v106, (uint64_t)&v875);
              v108 = llvm::ConstantInt::get(v105, 1, 0);
              v880[0] = 257;
              v109 = sub_1C4772EE0((uint64_t *)&v893, (uint64_t)v101, (uint64_t)v108, (uint64_t)&v875);
              v111 = llvm::UndefValue::get((llvm::UndefValue *)v73, v110);
              v880[0] = 257;
              v112 = sub_1C4773154((uint64_t *)&v893, (uint64_t)v111, (uint64_t)v107, (uint64_t)v106, (uint64_t)&v875);
              v880[0] = 257;
              v113 = sub_1C4773154((uint64_t *)&v893, (uint64_t)v112, (uint64_t)v109, (uint64_t)v108, (uint64_t)&v875);
              v114 = llvm::ConstantInt::get(v105, 2, 0);
              v880[0] = 257;
              v115 = sub_1C4773154((uint64_t *)&v893, (uint64_t)v113, (uint64_t)v86, (uint64_t)v114, (uint64_t)&v875);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v30, (llvm::Value *)v115, (llvm::Value *)1);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, v30);
              if (v893 != (unsigned __int8 *)v895)
                free(v893);
              v857 = 1;
              v26 = v855;
              v28 = v868;
              goto LABEL_277;
            }
            v227 = v893;
            v228 = (char *)&v893[16 * v894];
            v229 = (unsigned __int8 **)(v100 + 80);
            while (1)
            {
              v230 = *(_DWORD *)v227;
              v231 = (unsigned __int8 *)*((_QWORD *)v227 + 1);
              if (v231)
              {
                if (!v230)
                {
                  v885[0] = *((void **)v227 + 1);
                  llvm::MetadataTracking::track((uint64_t)v885, v231, 2);
                  v232 = *v229;
                  goto LABEL_233;
                }
              }
              else
              {
                v232 = *v229;
                if (!*v229 && (v100[55] & 0x20) == 0)
                  goto LABEL_230;
                if (!v230)
                {
                  v885[0] = 0;
LABEL_233:
                  if (v232)
                    llvm::MetadataTracking::untrack((uint64_t)(v100 + 80), v232);
                  v233 = (unsigned __int8 *)v885[0];
                  *v229 = (unsigned __int8 *)v885[0];
                  if (v233)
                    llvm::MetadataTracking::retrack((uint64_t)v885, v233, (uint64_t)(v100 + 80));
                  goto LABEL_230;
                }
              }
              llvm::Value::setMetadata(v101, *(_DWORD *)v227, (llvm::MDNode *)v231);
LABEL_230:
              v227 += 16;
              if (v227 == (unsigned __int8 *)v228)
                goto LABEL_107;
            }
          }
          v220 = v893;
          v221 = (char *)&v893[16 * v894];
          v222 = (unsigned __int8 **)(v85 + 80);
          while (1)
          {
            v223 = *(_DWORD *)v220;
            v224 = (unsigned __int8 *)*((_QWORD *)v220 + 1);
            if (v224)
            {
              if (!v223)
              {
                v885[0] = *((void **)v220 + 1);
                llvm::MetadataTracking::track((uint64_t)v885, v224, 2);
                v225 = *v222;
                goto LABEL_218;
              }
            }
            else
            {
              v225 = *v222;
              if (!*v222 && (v85[55] & 0x20) == 0)
                goto LABEL_215;
              if (!v223)
              {
                v885[0] = 0;
LABEL_218:
                if (v225)
                  llvm::MetadataTracking::untrack((uint64_t)(v85 + 80), v225);
                v226 = (unsigned __int8 *)v885[0];
                *v222 = (unsigned __int8 *)v885[0];
                if (v226)
                  llvm::MetadataTracking::retrack((uint64_t)v885, v226, (uint64_t)(v85 + 80));
                goto LABEL_215;
              }
            }
            llvm::Value::setMetadata(v86, *(_DWORD *)v220, (llvm::MDNode *)v224);
LABEL_215:
            v220 += 16;
            if (v220 == (unsigned __int8 *)v221)
              goto LABEL_102;
          }
        }
        v116 = (unsigned __int8 *)*((_QWORD *)v72 - 4);
        v117 = *(_DWORD *)(*(_QWORD *)v116 + 8);
        if ((v117 & 0xFE) == 0x12)
          v117 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v116 + 16) + 8);
        if ((v117 & 0xFFFFFF00) == 0x4000)
        {
          v118 = v116[16];
          if (v118 == 77)
            v119 = (uint64_t *)*((_QWORD *)v72 - 4);
          else
            v119 = 0;
          if (v119)
          {
            v120 = v119[1];
            if (v120)
            {
              if (!*(_QWORD *)(v120 + 8))
              {
                v116 = (unsigned __int8 *)*(v119 - 4);
                v118 = v116[16];
              }
            }
          }
          if (v118 == 62)
          {
            v121 = *((_DWORD *)v116 + 5);
            v122 = v121 & 0x7FFFFFF;
            if ((v121 & 0x7FFFFFFu) >= 2)
            {
              v123 = &v116[-32 * v122];
              v124 = 1;
              v125 = 0xFFFFFFFFLL;
              v126 = -32 * v122;
              do
              {
                if (*(_BYTE *)(*(_QWORD *)&v116[v126 + 32] + 16) != 16)
                {
                  v36 = v125 == 0xFFFFFFFFLL;
                  v125 = v124;
                  if (!v36)
                    goto LABEL_165;
                }
                v126 += 32;
                ++v124;
              }
              while (v126 != -32);
              if (v125 != 0xFFFFFFFFLL)
              {
                v127 = *(_QWORD *)&v123[32 * v125];
                if (v127)
                {
                  if (*(_BYTE *)(v127 + 16) == 85)
                  {
                    v128 = *(_QWORD *)(v127 + 8);
                    if (v128)
                    {
                      if (!*(_QWORD *)(v128 + 8)
                        && *(_BYTE *)(*(_QWORD *)(v127 - 64) + 16) == 16
                        && *(_BYTE *)(*(_QWORD *)(v127 - 32) + 16) == 16)
                      {
                        llvm::Instruction::clone((llvm::Instruction *)v116);
                        v130 = v129;
                        sub_1C53DF664((_QWORD *)(*((_QWORD *)v116 + 5) + 40), (uint64_t)(v116 + 24), v129);
                        v131 = *(_QWORD *)(v127 - 64);
                        v132 = &v116[-32 * (*((_DWORD *)v116 + 5) & 0x7FFFFFF)];
                        v133 = (char *)&v132[32 * v125];
                        if (*(_QWORD *)v133)
                        {
                          **((_QWORD **)v133 + 2) = *((_QWORD *)v133 + 1);
                          v134 = *((_QWORD *)v133 + 1);
                          if (v134)
                            *(_QWORD *)(v134 + 16) = *((_QWORD *)v133 + 2);
                        }
                        *(_QWORD *)v133 = v131;
                        if (v131)
                        {
                          v137 = *(_QWORD *)(v131 + 8);
                          v135 = (char **)(v131 + 8);
                          v136 = v137;
                          v138 = (char *)&v132[32 * v125];
                          *((_QWORD *)v138 + 1) = v137;
                          if (v137)
                            *(_QWORD *)(v136 + 16) = v138 + 8;
                          *((_QWORD *)v138 + 2) = v135;
                          *v135 = v133;
                        }
                        v139 = *(_QWORD *)(v127 - 32);
                        v140 = *(_DWORD *)(v130 + 20);
                        if ((v140 & 0x40000000) != 0)
                          v141 = *(_QWORD *)(v130 - 8);
                        else
                          v141 = v130 - 32 * (v140 & 0x7FFFFFF);
                        v142 = v141 + 32 * v125;
                        if (*(_QWORD *)v142)
                        {
                          **(_QWORD **)(v142 + 16) = *(_QWORD *)(v142 + 8);
                          v143 = *(_QWORD *)(v142 + 8);
                          if (v143)
                            *(_QWORD *)(v143 + 16) = *(_QWORD *)(v142 + 16);
                        }
                        *(_QWORD *)v142 = v139;
                        if (v139)
                        {
                          v146 = *(_QWORD *)(v139 + 8);
                          v144 = (uint64_t *)(v139 + 8);
                          v145 = v146;
                          v147 = v141 + 32 * v125;
                          *(_QWORD *)(v147 + 8) = v146;
                          if (v146)
                            *(_QWORD *)(v145 + 16) = v147 + 8;
                          *(_QWORD *)(v147 + 16) = v144;
                          *v144 = v142;
                        }
                        v148 = (uint64_t *)sub_1C4773D54((uint64_t)&v893, (uint64_t)v72, 0, 0, 0);
                        v149 = *(_QWORD *)(v127 - 96);
                        v880[0] = 257;
                        v116 = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect(v148, v149, (uint64_t *)v116, v130, (uint64_t)&v875, 0);
                        if (v119)
                        {
                          v150 = *v119;
                          v880[0] = 257;
                          v116 = sub_1C4773E38((uint64_t *)&v893, 49, v116, v150, (uint64_t)&v875);
                          v119 = (uint64_t *)v116;
                        }
                        v151 = **(_QWORD **)(*(_QWORD *)v116 + 16);
                        v892 = 257;
                        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v898 + 56) + 40) + 272, v151);
                        v858 = v152;
                        v153 = (char *)operator new(0x60uLL);
                        v154 = v153;
                        *((_QWORD *)v153 + 1) = 0;
                        v155 = (llvm::Value *)(v153 + 32);
                        *((_QWORD *)v153 + 2) = 0;
                        *((_QWORD *)v153 + 3) = v153 + 32;
                        v880[0] = 257;
                        *((_QWORD *)v153 + 4) = v151;
                        *((_QWORD *)v153 + 5) = 0;
                        *((_WORD *)v153 + 24) = 60;
                        *((_DWORD *)v153 + 13) = 1;
                        *(_OWORD *)(v153 + 56) = 0u;
                        *(_OWORD *)(v153 + 72) = 0u;
                        *((_DWORD *)v153 + 22) = 0;
                        *(_QWORD *)v153 = v116;
                        v156 = v116 + 8;
                        v157 = *((_QWORD *)v116 + 1);
                        *((_QWORD *)v153 + 1) = v157;
                        if (v157)
                          *(_QWORD *)(v157 + 16) = v153 + 8;
                        *((_QWORD *)v153 + 2) = v156;
                        *v156 = v153;
                        *((_WORD *)v153 + 25) = 2 * (v858 & 0x3F);
                        v153[92] = 1;
                        llvm::Value::setName((uint64_t ***)v153 + 4, (uint64_t)&v875);
                        (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, _QWORD *))(*(_QWORD *)v902 + 16))(v902, v155, &v888, v898, v899);
                        if (!(_DWORD)v894)
                        {
LABEL_155:
                          llvm::Value::doRAUW(v72, v155, (llvm::Value *)1);
                          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, (uint64_t)v72);
                          if (v119)
                          {
                            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, (uint64_t)v119);
                            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, v127);
                            v116 = (unsigned __int8 *)*(v119 - 4);
                          }
                          else
                          {
                            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, v127);
                          }
                          if (v893 != (unsigned __int8 *)v895)
                            free(v893);
                          v118 = v116[16];
                          v857 = 1;
                          goto LABEL_158;
                        }
                        v396 = v893;
                        v397 = (char *)&v893[16 * v894];
                        v398 = (void **)(v154 + 80);
                        while (2)
                        {
                          v399 = *(_DWORD *)v396;
                          v400 = (unsigned __int8 *)*((_QWORD *)v396 + 1);
                          if (v400)
                          {
                            if (v399)
                              goto LABEL_515;
                            v885[0] = *((void **)v396 + 1);
                            v864 = v397;
                            v843 = (unsigned __int8 **)v398;
                            llvm::MetadataTracking::track((uint64_t)v885, v400, 2);
                            v398 = (void **)v843;
                            v397 = v864;
                            v401 = *v843;
LABEL_520:
                            if (v401)
                            {
                              v865 = v397;
                              v844 = v398;
                              llvm::MetadataTracking::untrack((uint64_t)v398, v401);
                              v398 = v844;
                              v397 = v865;
                            }
                            v402 = (unsigned __int8 *)v885[0];
                            *v398 = v885[0];
                            if (v402)
                            {
                              v863 = v397;
                              v842 = v398;
                              llvm::MetadataTracking::retrack((uint64_t)v885, v402, (uint64_t)v398);
                              goto LABEL_516;
                            }
                          }
                          else
                          {
                            v401 = (unsigned __int8 *)*v398;
                            if (*v398 || (v154[55] & 0x20) != 0)
                            {
                              if (!v399)
                              {
                                v885[0] = 0;
                                goto LABEL_520;
                              }
LABEL_515:
                              v863 = v397;
                              v842 = v398;
                              llvm::Value::setMetadata(v155, *(_DWORD *)v396, (llvm::MDNode *)v400);
LABEL_516:
                              v398 = v842;
                              v397 = v863;
                            }
                          }
                          v396 += 16;
                          if (v396 == (unsigned __int8 *)v397)
                            goto LABEL_155;
                          continue;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            v155 = (llvm::Value *)(v27 - 24);
LABEL_158:
            if (v118 == 85)
            {
              v158 = *((_QWORD *)v116 + 1);
              if (v158)
              {
                if (!*(_QWORD *)(v158 + 8)
                  && sub_1C5E9DE14(*((_QWORD *)v116 - 8), 0)
                  && sub_1C5E9DE14(*((_QWORD *)v116 - 4), 0))
                {
                  v159 = (uint64_t *)sub_1C4773D54((uint64_t)&v893, (uint64_t)v116, 0, 0, 0);
                  v160 = (unsigned __int8 *)*((_QWORD *)v116 - 8);
                  v161 = (unsigned __int8 *)*((_QWORD *)v116 - 4);
                  if (v119)
                  {
                    v162 = *v119;
                    v880[0] = 257;
                    v160 = sub_1C4773E38(v159, 49, v160, v162, (uint64_t)&v875);
                    v163 = *v119;
                    v880[0] = 257;
                    v161 = sub_1C4773E38((uint64_t *)&v893, 49, v161, v163, (uint64_t)&v875);
                  }
                  v258 = **(_QWORD **)(*(_QWORD *)v160 + 16);
                  v892 = 257;
                  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v898 + 56) + 40) + 272, v258);
                  v260 = v259;
                  v261 = (char *)operator new(0x60uLL);
                  v262 = v261;
                  *((_QWORD *)v261 + 1) = 0;
                  v263 = (uint64_t *)(v261 + 32);
                  *((_QWORD *)v261 + 2) = 0;
                  *((_QWORD *)v261 + 3) = v261 + 32;
                  v880[0] = 257;
                  *((_QWORD *)v261 + 4) = v258;
                  *((_QWORD *)v261 + 5) = 0;
                  *((_WORD *)v261 + 24) = 60;
                  *((_DWORD *)v261 + 13) = 1;
                  *(_OWORD *)(v261 + 56) = 0u;
                  *(_OWORD *)(v261 + 72) = 0u;
                  *((_DWORD *)v261 + 22) = 0;
                  *(_QWORD *)v261 = v160;
                  v266 = *((_QWORD *)v160 + 1);
                  v265 = v160 + 8;
                  v264 = v266;
                  *((_QWORD *)v261 + 1) = v266;
                  if (v266)
                    *(_QWORD *)(v264 + 16) = v261 + 8;
                  *((_QWORD *)v261 + 2) = v265;
                  *v265 = v261;
                  *((_WORD *)v261 + 25) = 2 * (v260 & 0x3F);
                  v261[92] = 1;
                  llvm::Value::setName((uint64_t ***)v261 + 4, (uint64_t)&v875);
                  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, _QWORD *))(*(_QWORD *)v902 + 16))(v902, v263, &v888, v898, v899);
                  if (!(_DWORD)v894)
                  {
LABEL_269:
                    v267 = **(_QWORD **)(*(_QWORD *)v161 + 16);
                    v892 = 257;
                    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v898 + 56) + 40) + 272, v267);
                    v269 = v268;
                    v270 = (char *)operator new(0x60uLL);
                    v271 = v270;
                    *((_QWORD *)v270 + 1) = 0;
                    v272 = (llvm::Value *)(v270 + 32);
                    *((_QWORD *)v270 + 2) = 0;
                    *((_QWORD *)v270 + 3) = v270 + 32;
                    v880[0] = 257;
                    *((_QWORD *)v270 + 4) = v267;
                    *((_QWORD *)v270 + 5) = 0;
                    *((_WORD *)v270 + 24) = 60;
                    *((_DWORD *)v270 + 13) = 1;
                    *(_OWORD *)(v270 + 56) = 0u;
                    *(_OWORD *)(v270 + 72) = 0u;
                    *((_DWORD *)v270 + 22) = 0;
                    *(_QWORD *)v270 = v161;
                    v275 = *((_QWORD *)v161 + 1);
                    v274 = v161 + 8;
                    v273 = v275;
                    *((_QWORD *)v270 + 1) = v275;
                    if (v275)
                      *(_QWORD *)(v273 + 16) = v270 + 8;
                    *((_QWORD *)v270 + 2) = v274;
                    *v274 = v270;
                    *((_WORD *)v270 + 25) = 2 * (v269 & 0x3F);
                    v270[92] = 1;
                    llvm::Value::setName((uint64_t ***)v270 + 4, (uint64_t)&v875);
                    (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, _QWORD *))(*(_QWORD *)v902 + 16))(v902, v272, &v888, v898, v899);
                    if (!(_DWORD)v894)
                    {
LABEL_272:
                      v276 = *((_QWORD *)v116 - 12);
                      v880[0] = 257;
                      v277 = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v893, v276, v263, (uint64_t)v272, (uint64_t)&v875, 0);
                      llvm::Value::doRAUW(v155, v277, (llvm::Value *)1);
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, (uint64_t)v155);
                      if (v119)
                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, (uint64_t)v119);
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, (uint64_t)v116);
                      v28 = v868;
                      if (v893 != (unsigned __int8 *)v895)
                        free(v893);
                      v857 = 1;
                      v26 = v855;
                      goto LABEL_277;
                    }
                    v344 = v893;
                    v345 = (char *)&v893[16 * v894];
                    v346 = (unsigned __int8 **)(v271 + 80);
                    while (1)
                    {
                      v347 = *(_DWORD *)v344;
                      v348 = (unsigned __int8 *)*((_QWORD *)v344 + 1);
                      if (v348)
                      {
                        if (!v347)
                        {
                          v885[0] = *((void **)v344 + 1);
                          llvm::MetadataTracking::track((uint64_t)v885, v348, 2);
                          v349 = *v346;
                          goto LABEL_390;
                        }
                      }
                      else
                      {
                        v349 = *v346;
                        if (!*v346 && (v271[55] & 0x20) == 0)
                          goto LABEL_387;
                        if (!v347)
                        {
                          v885[0] = 0;
LABEL_390:
                          if (v349)
                            llvm::MetadataTracking::untrack((uint64_t)(v271 + 80), v349);
                          v350 = (unsigned __int8 *)v885[0];
                          *v346 = (unsigned __int8 *)v885[0];
                          if (v350)
                            llvm::MetadataTracking::retrack((uint64_t)v885, v350, (uint64_t)(v271 + 80));
                          goto LABEL_387;
                        }
                      }
                      llvm::Value::setMetadata(v272, *(_DWORD *)v344, (llvm::MDNode *)v348);
LABEL_387:
                      v344 += 16;
                      if (v344 == (unsigned __int8 *)v345)
                        goto LABEL_272;
                    }
                  }
                  v337 = v893;
                  v338 = (char *)&v893[16 * v894];
                  v339 = (unsigned __int8 **)(v262 + 80);
                  while (1)
                  {
                    v340 = *(_DWORD *)v337;
                    v341 = (unsigned __int8 *)*((_QWORD *)v337 + 1);
                    if (v341)
                    {
                      if (!v340)
                      {
                        v885[0] = *((void **)v337 + 1);
                        llvm::MetadataTracking::track((uint64_t)v885, v341, 2);
                        v342 = *v339;
                        goto LABEL_375;
                      }
                    }
                    else
                    {
                      v342 = *v339;
                      if (!*v339 && (v262[55] & 0x20) == 0)
                        goto LABEL_372;
                      if (!v340)
                      {
                        v885[0] = 0;
LABEL_375:
                        if (v342)
                          llvm::MetadataTracking::untrack((uint64_t)(v262 + 80), v342);
                        v343 = (unsigned __int8 *)v885[0];
                        *v339 = (unsigned __int8 *)v885[0];
                        if (v343)
                          llvm::MetadataTracking::retrack((uint64_t)v885, v343, (uint64_t)(v262 + 80));
                        goto LABEL_372;
                      }
                    }
                    llvm::Value::setMetadata((llvm::Value *)v263, *(_DWORD *)v337, (llvm::MDNode *)v341);
LABEL_372:
                    v337 += 16;
                    if (v337 == (unsigned __int8 *)v338)
                      goto LABEL_269;
                  }
                }
              }
            }
          }
        }
LABEL_165:
        v71 = *(unsigned __int8 *)(v30 + 16);
        v26 = v855;
      }
      if (v71 == 61)
        v164 = v30;
      else
        v164 = 0;
      v28 = v868;
      if (v27 && v71 == 61)
      {
        v165 = **(_QWORD **)(v164 - 64);
        if ((*(_DWORD *)(v165 + 8) & 0xFE) != 0x12
          || *(_DWORD *)(*(_QWORD *)(v165 + 24) + 8) != 2061
          || *(_DWORD *)(v165 + 32) != 3)
        {
          goto LABEL_277;
        }
        sub_1C4773D54((uint64_t)&v893, v30, 0, 0, 0);
        if ((*(_DWORD *)(v165 + 8) & 0xFE) == 0x12)
          v165 = **(_QWORD **)(v165 + 16);
        v166 = **(_QWORD **)(v164 - 32);
        v167 = *(_DWORD *)(v166 + 8);
        if ((v167 & 0xFE) == 0x12)
          v167 = *(_DWORD *)(**(_QWORD **)(v166 + 16) + 8);
        v168 = llvm::PointerType::get((llvm::PointerType *)v165, (llvm::Type *)(v167 >> 8));
        v169 = *(unsigned __int8 **)(v164 - 32);
        v880[0] = 257;
        v170 = sub_1C4773E38((uint64_t *)&v893, 49, v169, v168, (uint64_t)&v875);
        v880[0] = 257;
        v171 = sub_1C4772C18((uint64_t *)&v893, (llvm::GetElementPtrInst *)v165, v170, 2u, (uint64_t)&v875);
        v172 = (llvm::ConstantInt *)(***(_QWORD ***)v30 + 1960);
        v173 = llvm::ConstantInt::get(v172, 2, 0);
        v174 = *(_QWORD *)(v164 - 64);
        v880[0] = 257;
        v175 = (uint64_t *)sub_1C4772EE0((uint64_t *)&v893, v174, (uint64_t)v173, (uint64_t)&v875);
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v898 + 56) + 40) + 272, *v175);
        v177 = v176;
        v178 = (char *)operator new(0x80uLL);
        v179 = v178;
        *((_DWORD *)v178 + 21) = *((_DWORD *)v178 + 21) & 0x38000000 | 2;
        *(_QWORD *)v178 = 0;
        *((_QWORD *)v178 + 2) = 0;
        *((_QWORD *)v178 + 1) = 0;
        *((_QWORD *)v178 + 5) = 0;
        *((_QWORD *)v178 + 6) = 0;
        *((_QWORD *)v178 + 4) = 0;
        v180 = (uint64_t ****)(v178 + 32);
        *((_QWORD *)v178 + 8) = **(_QWORD **)*v175 + 1576;
        v181 = (llvm::Value *)(v178 + 64);
        *((_QWORD *)v178 + 3) = v178 + 64;
        *((_QWORD *)v178 + 7) = v178 + 64;
        *((_QWORD *)v178 + 9) = 0;
        v178[80] = 61;
        v178[81] = 0;
        *((_WORD *)v178 + 41) = 0;
        *((_DWORD *)v178 + 21) = 2;
        *(_OWORD *)(v178 + 88) = 0u;
        *(_OWORD *)(v178 + 104) = 0u;
        *((_DWORD *)v178 + 30) = 0;
        *(_QWORD *)v178 = v175;
        v184 = v175[1];
        v183 = v175 + 1;
        v182 = v184;
        *((_QWORD *)v178 + 1) = v184;
        if (v184)
          *(_QWORD *)(v182 + 16) = v178 + 8;
        *((_QWORD *)v178 + 2) = v183;
        *v183 = v178;
        if (*((_QWORD *)v178 + 4))
        {
          **((_QWORD **)v178 + 6) = *((_QWORD *)v178 + 5);
          v658 = *((_QWORD *)v178 + 5);
          if (v658)
            *(_QWORD *)(v658 + 16) = *((_QWORD *)v178 + 6);
        }
        *v180 = v171;
        if (v171)
        {
          v187 = v171[1];
          v186 = (uint64_t *****)(v171 + 1);
          v185 = v187;
          *((_QWORD *)v178 + 5) = v187;
          if (v187)
            v185[2] = (uint64_t *)(v178 + 40);
          *((_QWORD *)v178 + 6) = v186;
          *v186 = v180;
        }
        *((_WORD *)v178 + 41) = 2 * (v177 & 0x3F);
        v178[124] = 1;
        v880[0] = 257;
        (*(void (**)(uint64_t, llvm::Value *, llvm::Type **, uint64_t, _QWORD *))(*(_QWORD *)v902 + 16))(v902, v181, &v875, v898, v899);
        if (!(_DWORD)v894)
        {
LABEL_186:
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v165, (llvm::Type *)2);
          v189 = v188;
          v190 = **(_QWORD **)(v164 - 32);
          v191 = *(_DWORD *)(v190 + 8);
          if ((v191 & 0xFE) == 0x12)
            v191 = *(_DWORD *)(**(_QWORD **)(v190 + 16) + 8);
          v192 = llvm::PointerType::get(v188, (llvm::Type *)(v191 >> 8));
          v193 = *(unsigned __int8 **)(v164 - 32);
          v880[0] = 257;
          v194 = sub_1C4773E38((uint64_t *)&v893, 49, v193, v192, (uint64_t)&v875);
          v195 = v172;
          v196 = llvm::ConstantInt::get(v172, 0, 0);
          v197 = *(_QWORD *)(v164 - 64);
          v880[0] = 257;
          v198 = sub_1C4772EE0((uint64_t *)&v893, v197, (uint64_t)v196, (uint64_t)&v875);
          v199 = llvm::ConstantInt::get(v195, 1, 0);
          v200 = *(_QWORD *)(v164 - 64);
          v880[0] = 257;
          v201 = sub_1C4772EE0((uint64_t *)&v893, v200, (uint64_t)v199, (uint64_t)&v875);
          v203 = llvm::UndefValue::get(v189, v202);
          v880[0] = 257;
          v204 = sub_1C4773154((uint64_t *)&v893, (uint64_t)v203, (uint64_t)v198, (uint64_t)v196, (uint64_t)&v875);
          v880[0] = 257;
          v205 = (uint64_t *)sub_1C4773154((uint64_t *)&v893, (uint64_t)v204, (uint64_t)v201, (uint64_t)v199, (uint64_t)&v875);
          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v898 + 56) + 40) + 272, *v205);
          v207 = v206;
          v208 = (char *)operator new(0x80uLL);
          v209 = v208;
          *((_DWORD *)v208 + 21) = *((_DWORD *)v208 + 21) & 0x38000000 | 2;
          *(_QWORD *)v208 = 0;
          *((_QWORD *)v208 + 2) = 0;
          *((_QWORD *)v208 + 1) = 0;
          *((_QWORD *)v208 + 5) = 0;
          *((_QWORD *)v208 + 6) = 0;
          *((_QWORD *)v208 + 4) = 0;
          v210 = (unsigned __int8 **)(v208 + 32);
          *((_QWORD *)v208 + 8) = **(_QWORD **)*v205 + 1576;
          v211 = (llvm::Value *)(v208 + 64);
          *((_QWORD *)v208 + 3) = v208 + 64;
          *((_QWORD *)v208 + 7) = v208 + 64;
          *((_QWORD *)v208 + 9) = 0;
          v208[80] = 61;
          v208[81] = 0;
          *((_WORD *)v208 + 41) = 0;
          *((_DWORD *)v208 + 21) = 2;
          *(_OWORD *)(v208 + 88) = 0u;
          *(_OWORD *)(v208 + 104) = 0u;
          *((_DWORD *)v208 + 30) = 0;
          *(_QWORD *)v208 = v205;
          v214 = v205[1];
          v213 = v205 + 1;
          v212 = v214;
          *((_QWORD *)v208 + 1) = v214;
          if (v214)
            *(_QWORD *)(v212 + 16) = v208 + 8;
          *((_QWORD *)v208 + 2) = v213;
          *v213 = v208;
          if (*((_QWORD *)v208 + 4))
          {
            **((_QWORD **)v208 + 6) = *((_QWORD *)v208 + 5);
            v659 = *((_QWORD *)v208 + 5);
            if (v659)
              *(_QWORD *)(v659 + 16) = *((_QWORD *)v208 + 6);
          }
          *v210 = v194;
          v26 = v855;
          if (v194)
          {
            v217 = *((_QWORD *)v194 + 1);
            v216 = (unsigned __int8 ***)(v194 + 8);
            v215 = v217;
            *((_QWORD *)v208 + 5) = v217;
            if (v217)
              *(_QWORD *)(v215 + 16) = v208 + 40;
            *((_QWORD *)v208 + 6) = v216;
            *v216 = v210;
          }
          *((_WORD *)v208 + 41) = 2 * (v207 & 0x3F);
          v208[124] = 1;
          v880[0] = 257;
          (*(void (**)(uint64_t, llvm::Value *, llvm::Type **, uint64_t, _QWORD *))(*(_QWORD *)v902 + 16))(v902, v211, &v875, v898, v899);
          v28 = v868;
          if (!(_DWORD)v894)
          {
LABEL_196:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, v30);
            if (v893 != (unsigned __int8 *)v895)
              free(v893);
            v857 = 1;
            goto LABEL_277;
          }
          v286 = v893;
          v287 = (char *)&v893[16 * v894];
          v288 = (unsigned __int8 **)(v209 + 112);
          while (1)
          {
            v289 = *(_DWORD *)v286;
            v290 = (unsigned __int8 *)*((_QWORD *)v286 + 1);
            if (v290)
            {
              if (!v289)
              {
                v888 = (void *)*((_QWORD *)v286 + 1);
                llvm::MetadataTracking::track((uint64_t)&v888, v290, 2);
                v291 = *v288;
                goto LABEL_305;
              }
            }
            else
            {
              v291 = *v288;
              if (!*v288 && (v209[87] & 0x20) == 0)
                goto LABEL_302;
              if (!v289)
              {
                v888 = 0;
LABEL_305:
                if (v291)
                  llvm::MetadataTracking::untrack((uint64_t)(v209 + 112), v291);
                v292 = (unsigned __int8 *)v888;
                *v288 = (unsigned __int8 *)v888;
                if (v292)
                  llvm::MetadataTracking::retrack((uint64_t)&v888, v292, (uint64_t)(v209 + 112));
                goto LABEL_302;
              }
            }
            llvm::Value::setMetadata(v211, *(_DWORD *)v286, (llvm::MDNode *)v290);
LABEL_302:
            v286 += 16;
            if (v286 == (unsigned __int8 *)v287)
              goto LABEL_196;
          }
        }
        v278 = v893;
        v279 = (char *)&v893[16 * v894];
        v280 = (unsigned __int8 **)(v179 + 112);
        while (1)
        {
          v281 = *(_DWORD *)v278;
          v282 = (unsigned __int8 *)*((_QWORD *)v278 + 1);
          if (v282)
          {
            if (!v281)
            {
              v888 = (void *)*((_QWORD *)v278 + 1);
              v860 = v280;
              llvm::MetadataTracking::track((uint64_t)&v888, v282, 2);
              v280 = v860;
              v283 = *v860;
              goto LABEL_290;
            }
          }
          else
          {
            v283 = *v280;
            if (!*v280 && (v179[87] & 0x20) == 0)
              goto LABEL_287;
            if (!v281)
            {
              v888 = 0;
LABEL_290:
              if (v283)
              {
                v862 = v280;
                llvm::MetadataTracking::untrack((uint64_t)v280, v283);
                v280 = v862;
              }
              v285 = (unsigned __int8 *)v888;
              *v280 = (unsigned __int8 *)v888;
              if (v285)
              {
                v861 = v280;
                llvm::MetadataTracking::retrack((uint64_t)&v888, v285, (uint64_t)v280);
                v280 = v861;
              }
              goto LABEL_287;
            }
          }
          v859 = v279;
          v284 = v280;
          llvm::Value::setMetadata(v181, *(_DWORD *)v278, (llvm::MDNode *)v282);
          v280 = v284;
          v279 = v859;
LABEL_287:
          v278 += 16;
          if (v278 == (unsigned __int8 *)v279)
            goto LABEL_186;
        }
      }
      if (v71 != 84)
        goto LABEL_277;
      v218 = *(_QWORD *)(v30 - 32);
      if (!v218
        || *(_BYTE *)(v218 + 16)
        || *(_QWORD *)(v218 + 24) != *(_QWORD *)(v30 + 72)
        || (*(_BYTE *)(v218 + 33) & 0x20) == 0)
      {
        goto LABEL_277;
      }
      v219 = *(_DWORD *)(*(_QWORD *)(v27 - 56) + 36);
      if ((v219 - 1282) >= 0x190)
      {
        if (v219 > 1681)
        {
          switch(v219)
          {
            case 1682:
            case 1683:
            case 1684:
            case 1685:
            case 1686:
            case 1687:
            case 1688:
            case 1689:
            case 1690:
            case 1691:
            case 1692:
            case 1693:
            case 1694:
            case 1695:
            case 1696:
            case 1697:
            case 1698:
            case 1699:
            case 1700:
            case 1701:
            case 1702:
            case 1703:
            case 1704:
            case 1705:
            case 1706:
            case 1707:
            case 1708:
            case 1709:
            case 1710:
            case 1711:
            case 1712:
            case 1713:
            case 1714:
            case 1715:
            case 1716:
            case 1717:
            case 1718:
            case 1719:
            case 1720:
            case 1721:
            case 1722:
            case 1723:
            case 1724:
            case 1725:
            case 1726:
            case 1727:
            case 1728:
            case 1729:
            case 1730:
            case 1731:
            case 1732:
            case 1733:
            case 1734:
            case 1735:
            case 1736:
            case 1737:
            case 1738:
            case 1739:
            case 1740:
            case 1741:
            case 1742:
            case 1743:
            case 1744:
            case 1745:
            case 1746:
            case 1747:
            case 1748:
            case 1749:
            case 1750:
            case 1751:
            case 1752:
            case 1753:
            case 1754:
            case 1755:
            case 1756:
            case 1757:
            case 1758:
            case 1759:
            case 1760:
            case 1761:
            case 1762:
            case 1763:
            case 1764:
            case 1765:
            case 1766:
            case 1767:
            case 1768:
            case 1769:
            case 1770:
            case 1771:
            case 1772:
            case 1773:
            case 1774:
            case 1775:
            case 1776:
            case 1777:
            case 1778:
            case 1779:
            case 1780:
            case 1781:
            case 1782:
            case 1783:
            case 1784:
            case 1785:
            case 1786:
            case 1787:
            case 1788:
            case 1789:
            case 1790:
            case 1791:
            case 1792:
            case 1793:
            case 1794:
            case 1795:
            case 1796:
            case 1797:
            case 1798:
            case 1799:
            case 1800:
            case 1801:
            case 1802:
            case 1803:
            case 1804:
            case 1805:
            case 1806:
            case 1807:
            case 1808:
            case 1809:
            case 1810:
            case 1811:
            case 1812:
            case 1813:
            case 1814:
            case 1815:
            case 1816:
            case 1817:
            case 1818:
            case 1819:
            case 1820:
            case 1821:
              goto LABEL_239;
            case 1924:
            case 1925:
              v403 = *((_QWORD *)v29 - 4 * (*(_DWORD *)(v27 - 4) & 0x7FFFFFF));
              if (*(_BYTE *)(v403 + 16) != 90)
                goto LABEL_277;
              v404 = *(_QWORD *)v403;
              v888 = &v890;
              v889 = 0x400000000;
              v875 = (llvm::Type *)v880;
              v876 = (llvm::Type *)v880;
              v877 = 4;
              v878 = 0;
              do
              {
                v405 = *(_QWORD *)(v403 - 64);
                v406 = v889;
                if (v889 >= (unint64_t)HIDWORD(v889))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v888, (uint64_t)&v890, v889 + 1, 8);
                  v406 = v889;
                }
                *((_QWORD *)v888 + v406) = v405;
                LODWORD(v889) = v889 + 1;
                v407 = *(_QWORD *)(v403 - 96);
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v875, v403);
                if (!v407)
                  break;
                v403 = v407;
              }
              while (*(_BYTE *)(v407 + 16) == 90);
              v419 = v889;
              if (!(_DWORD)v889)
                goto LABEL_697;
              v420 = (char *)v888 + 8 * v889 - 8;
              if (v888 < v420)
              {
                v421 = (char *)v888 + 8;
                do
                {
                  v422 = *((_QWORD *)v421 - 1);
                  *((_QWORD *)v421 - 1) = *(_QWORD *)v420;
                  *(_QWORD *)v420 = v422;
                  v420 -= 8;
                  v253 = v421 >= v420;
                  v421 += 8;
                }
                while (!v253);
              }
              if (v419 != 3)
                goto LABEL_697;
              v423 = 0;
              v424 = 0;
              LODWORD(v425) = 0;
              v426 = 0;
              v845 = 0;
              v427 = 0;
              while (2)
              {
                v428 = *((_QWORD *)v888 + v423);
                v429 = *(unsigned __int8 *)(v428 + 16);
                if (v428 && v429 == 74)
                {
                  v428 = *(_QWORD *)(v428 - 32);
                  v429 = *(unsigned __int8 *)(v428 + 16);
                }
                if (v429 == 84)
                {
                  v838 = (int)v425;
                  v430 = *(_QWORD *)(v428 - 32);
                  if (v430)
                  {
                    if (!*(_BYTE *)(v430 + 16) && *(_QWORD *)(v430 + 24) == *(_QWORD *)(v428 + 72))
                    {
                      v837 = v426;
                      if ((*(_BYTE *)(v430 + 33) & 0x20) != 0)
                      {
                        ItrKind = llvm::GetItrKind((llvm *)*(unsigned int *)(v430 + 36));
                        if ((ItrKind - 4) >= 0xFFFFFFFD && (!v423 || ItrKind == v424))
                        {
                          v840 = ItrKind;
                          v432 = *(unsigned __int8 **)(v428 - 32 * (*(_DWORD *)(v428 + 20) & 0x7FFFFFF));
                          v433 = v432[16];
                          if (v433 == 62)
                            v434 = *(_QWORD *)(v428 - 32 * (*(_DWORD *)(v428 + 20) & 0x7FFFFFF));
                          else
                            v434 = 0;
                          if (v433 == 5)
                            v435 = *(_QWORD *)(v428 - 32 * (*(_DWORD *)(v428 + 20) & 0x7FFFFFF));
                          else
                            v435 = 0;
                          if (!(v435 | v434))
                            goto LABEL_852;
                          if (v435 && *(_WORD *)(v435 + 18) == 34)
                          {
                            v436 = 24;
                            if (*(_BYTE *)(v435 + 16) == 62)
                              v436 = 64;
                            v437 = *(_DWORD *)(v435 + 20);
                            if ((v437 & 0x40000000) != 0)
                            {
                              v438 = *(_QWORD *)(v435 - 8);
                              v432 = (unsigned __int8 *)(v438 + 32 * (v437 & 0x7FFFFFF));
                            }
                            else
                            {
                              v438 = v435 - 32 * (v437 & 0x7FFFFFF);
                            }
                            v439 = *(_QWORD *)(v435 + v436) | 4;
                            v440 = (uint64_t *)(v438 + 32);
                            v893 = (unsigned __int8 *)(v438 + 32);
                            v894 = v439;
                            if ((unsigned __int8 *)(v438 + 32) != v432)
                            {
                              v835 = v427;
                              v836 = v404;
                              v441 = (llvm::UndefValue **)(v438 + 32);
                              while (1)
                              {
                                if (*(unsigned __int8 *)(*v440 + 16) - 11 >= 2)
                                {
                                  v442 = v894 & 0xFFFFFFFFFFFFFFF8;
                                  if ((v894 & 4) == 0 || !v442)
                                  {
                                    AggregateElement = *v441;
                                    v444 = *((unsigned __int8 *)*v441 + 16);
                                    if (AggregateElement)
                                      v445 = v444 == 16;
                                    else
                                      v445 = 0;
                                    if (!v445)
                                      AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
                                    v448 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
                                    v446 = (unsigned int *)((char *)AggregateElement + 24);
                                    v447 = v448;
                                    if (v446[2] < 0x41)
                                      v447 = v446;
                                    v442 = *(_QWORD *)(*(_QWORD *)(v442 + 16) + 8 * *v447);
                                  }
                                  v449 = *(unsigned __int8 *)(v442 + 8);
                                  if (v442)
                                    v450 = v449 == 17;
                                  else
                                    v450 = 0;
                                  if (v450 || (v451 = 0, v442) && v449 == 18)
                                    v451 = *(unsigned int *)(v442 + 32);
                                  v452 = *v440;
                                  if (!*v440 || *(_BYTE *)(v452 + 16) != 16)
                                    break;
                                  if ((v894 & 4) != 0)
                                  {
                                    v453 = (unint64_t *)(v452 + 24);
                                    v454 = *(_DWORD *)(v452 + 32);
                                    if (v454 >= 0x41)
                                    {
                                      if (v454
                                         - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v452 + 24)) > 0x40)
                                        break;
                                      v453 = (unint64_t *)*v453;
                                    }
                                    if (*v453 >= v451)
                                      break;
                                  }
                                }
                                sub_1C4774E38((uint64_t)&v893);
                                v441 = (llvm::UndefValue **)v893;
                                v440 += 4;
                                if (v893 == v432)
                                {
                                  v437 = *(_DWORD *)(v435 + 20);
                                  v427 = v835;
                                  v404 = v836;
                                  goto LABEL_620;
                                }
                              }
                              v26 = v855;
                              v427 = v835;
                              v404 = v836;
                              goto LABEL_629;
                            }
LABEL_620:
                            v455 = (uint64_t *)(v435 - 32 * (v437 & 0x7FFFFFF));
                            if (*(_BYTE *)(v455[8] + 16) == 16)
                              v456 = v455[8];
                            else
                              v456 = 0;
                            if (*(_BYTE *)(v455[4] + 16) == 16)
                              v457 = v455[4];
                            else
                              v457 = 0;
                            v458 = (_QWORD *)(v456 + 24);
                            v26 = v855;
                            v28 = v868;
                            if (*(_DWORD *)(v456 + 32) < 0x41u)
                            {
LABEL_642:
                              v425 = (_QWORD *)*v458;
                              v462 = (_QWORD *)(v457 + 24);
                              if (*(_DWORD *)(v457 + 32) >= 0x41u)
                                v462 = (_QWORD *)*v462;
                              v463 = *v455;
                              if (*(_BYTE *)(v463 + 16) == 3)
                                v464 = (uint64_t *)v463;
                              else
                                v464 = 0;
                              if (v423)
                              {
                                v466 = v845 == v464 && v838 + 1 == (_DWORD)v425 && v837 == *(_DWORD *)v462;
                                if (!v466
                                  || *(_QWORD *)(v428 - 32 * (*(_DWORD *)(v428 + 20) & 0x7FFFFFF) + 32) != v427)
                                {
                                  break;
                                }
                              }
                              else
                              {
                                v427 = *(_QWORD *)(v428 - 32 * (*(_DWORD *)(v428 + 20) & 0x7FFFFFF) + 32);
                              }
                              ++v423;
                              v424 = v840;
                              v426 = *(_DWORD *)v462;
                              v845 = v464;
                              if (v423 >= v889)
                              {
                                v467 = (llvm::Type *)v404;
                                if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v847 + 176))(v847, 18))
                                {
                                  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v847 + 128))(&v893, v847, 18);
                                  v468 = *(_QWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v893 + 32))(v893);
                                  v640 = v893;
                                  v893 = 0;
                                  if (v640)
                                    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v640 + 8))(v640);
                                }
                                else
                                {
                                  v468 = 0;
                                }
                                v26 = v855;
                                v28 = v868;
                                if (v468 == v427)
                                {
                                  if ((*(_DWORD *)(v404 + 8) & 0xFE) == 0x12)
                                    v467 = **(llvm::Type ***)(v404 + 16);
                                  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v467);
                                  if (v840 == 1)
                                  {
                                    v470 = PrimitiveSizeInBits == 16;
                                    v471 = 1920;
                                  }
                                  else
                                  {
                                    v470 = PrimitiveSizeInBits == 16;
                                    if (v840 == 2)
                                      v471 = 1922;
                                    else
                                      v471 = 1918;
                                  }
                                  if (v470)
                                    v641 = v471 + 1;
                                  else
                                    v641 = v471;
                                  sub_1C4773D54((uint64_t)&v893, (uint64_t)v29, 0, 0, 0);
                                  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v848 + 40), v641, 0, 0);
                                  v885[0] = &v886;
                                  v885[1] = (void *)0x400000000;
                                  v643 = *v464;
                                  if ((*(_DWORD *)(*v464 + 8) & 0xFE) == 0x12)
                                    v643 = **(_QWORD **)(v643 + 16);
                                  v644 = **(llvm::LLVMContext ***)(v643 + 16);
                                  v884 = 257;
                                  v645 = sub_1C61256F0((uint64_t)&v893, v644, v464, 0, 0, (uint64_t)v883);
                                  v646 = LODWORD(v885[1]);
                                  if (LODWORD(v885[1]) >= (unint64_t)HIDWORD(v885[1]))
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v885, (uint64_t)&v886, LODWORD(v885[1]) + 1, 8);
                                    v646 = LODWORD(v885[1]);
                                  }
                                  *((_QWORD *)v885[0] + v646) = v645;
                                  v647 = ++LODWORD(v885[1]);
                                  if (Declaration)
                                    v648 = *(uint64_t ***)(Declaration + 24);
                                  else
                                    v648 = 0;
                                  v884 = 257;
                                  v649 = (llvm::Value *)sub_1C4774778((uint64_t *)&v893, v648, Declaration, (uint64_t *)v885[0], v647, (uint64_t)v883, 0);
                                  llvm::Value::doRAUW(v29, v649, (llvm::Value *)1);
                                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, (uint64_t)v29);
                                  if (v876 == v875)
                                    v650 = (uint64_t *)((char *)&v877 + 4);
                                  else
                                    v650 = &v877;
                                  v651 = *(unsigned int *)v650;
                                  if ((_DWORD)v651)
                                  {
                                    v652 = 8 * v651;
                                    v653 = (uint64_t *)v876;
                                    while ((unint64_t)*v653 >= 0xFFFFFFFFFFFFFFFELL)
                                    {
                                      ++v653;
                                      v652 -= 8;
                                      if (!v652)
                                        goto LABEL_890;
                                    }
                                  }
                                  else
                                  {
                                    v653 = (uint64_t *)v876;
                                  }
                                  v654 = (unint64_t *)((char *)v876 + 8 * v651);
                                  if (v653 != (uint64_t *)v654)
                                  {
                                    v655 = *v653;
LABEL_884:
                                    if (!*(_QWORD *)(v655 + 8))
                                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, v655);
                                    v656 = (unint64_t *)(v653 + 1);
                                    while (v656 != v654)
                                    {
                                      v657 = *v656++;
                                      v655 = v657;
                                      if (v657 <= 0xFFFFFFFFFFFFFFFDLL)
                                      {
                                        v653 = (uint64_t *)(v656 - 1);
                                        goto LABEL_884;
                                      }
                                    }
                                  }
LABEL_890:
                                  if (v885[0] != &v886)
                                    free(v885[0]);
                                  if (v893 != (unsigned __int8 *)v895)
                                    free(v893);
                                  v857 = 1;
                                  v26 = v855;
LABEL_852:
                                  v28 = v868;
                                  break;
                                }
                                break;
                              }
                              continue;
                            }
                          }
                          else
                          {
LABEL_629:
                            if (!v434)
                              goto LABEL_852;
                            v459 = *(_DWORD *)(v434 + 20) & 0x7FFFFFF;
                            v455 = (uint64_t *)(v434 - 32 * v459);
                            v28 = v868;
                            if ((_DWORD)v459 != 1)
                            {
                              v460 = 1;
                              while (*(_BYTE *)(v455[4 * v460] + 16) == 16)
                              {
                                if ((_DWORD)v459 == ++v460)
                                  goto LABEL_634;
                              }
                              break;
                            }
LABEL_634:
                            if (*(_BYTE *)(v455[8] + 16) == 16)
                              v461 = v455[8];
                            else
                              v461 = 0;
                            if (*(_BYTE *)(v455[4] + 16) == 16)
                              v457 = v455[4];
                            else
                              v457 = 0;
                            v458 = (_QWORD *)(v461 + 24);
                            if (*(_DWORD *)(v461 + 32) < 0x41u)
                              goto LABEL_642;
                          }
                          v458 = (_QWORD *)*v458;
                          goto LABEL_642;
                        }
                      }
                    }
                  }
                }
                break;
              }
LABEL_697:
              if (v876 != v875)
                free(v876);
              if (v888 != &v890)
                free(v888);
              goto LABEL_277;
            case 2022:
            case 2025:
            case 2030:
            case 2031:
            case 2032:
            case 2035:
            case 2036:
            case 2037:
            case 2038:
            case 2041:
            case 2046:
            case 2047:
            case 2048:
            case 2051:
            case 2052:
            case 2053:
            case 2054:
            case 2057:
            case 2062:
            case 2063:
            case 2064:
            case 2067:
            case 2068:
            case 2069:
            case 2070:
            case 2073:
            case 2078:
            case 2079:
            case 2080:
            case 2083:
            case 2084:
            case 2085:
              v296 = (uint64_t *)((_QWORD *)v29 - 4 * (*(_DWORD *)(v27 - 4) & 0x7FFFFFF))[16];
              v297 = v296[1];
              if (!v297 || *(_QWORD *)(v297 + 8))
                goto LABEL_277;
              *(_OWORD *)v885 = 0u;
              v886 = 0u;
              v298 = *((unsigned __int8 *)v296 + 16);
              v299 = *v296;
              v300 = *(_DWORD *)(*v296 + 8);
              if (v298 < 0x1C)
              {
                v301 = 0;
                v302 = 0;
                v303 = 0;
                v304 = v857;
                goto LABEL_534;
              }
              if ((*(_DWORD *)(*v296 + 8) & 0xFE) != 0x12)
                v885[0] = v296;
              v304 = v857;
              do
              {
                if (v298 != 90)
                  break;
                v379 = *((_DWORD *)v296 + 5);
                v380 = (v379 & 0x40000000) != 0 ? (uint64_t *)*(v296 - 1) : &v296[-4 * (v379 & 0x7FFFFFF)];
                v381 = v380[8];
                if (!v381 || *(_BYTE *)(v381 + 16) != 16)
                  break;
                v383 = (_QWORD *)(v381 + 24);
                if (*(_DWORD *)(v381 + 32) >= 0x41u)
                  v383 = (_QWORD *)*v383;
                v384 = (v379 & 0x40000000) != 0 ? (uint64_t *)*(v296 - 1) : &v296[-4 * (v379 & 0x7FFFFFF)];
                v885[*v383] = (void *)v384[4];
                v296 = (uint64_t *)*v384;
                v298 = *((unsigned __int8 *)v296 + 16);
                v385 = v296 && v298 > 0x1B;
              }
              while (v385);
              v301 = (uint64_t **)v885[0];
              if (v885[0])
              {
                v386 = 0;
                v303 = 0;
                v387 = v885[0];
                do
                {
                  v388 = v387[1];
                  if (!v388
                    || *(_QWORD *)(v388 + 8)
                    || *((_BYTE *)v387 + 16) != 74
                    || ((v389 = *((_DWORD *)v387 + 5), (v389 & 0x40000000) != 0)
                      ? (v390 = (uint64_t *)*(v387 - 1))
                      : (v390 = &v387[-4 * (v389 & 0x7FFFFFF)]),
                        (v391 = *v390, (v392 = *(_QWORD *)(v391 + 8)) == 0)
                     || *(_QWORD *)(v392 + 8)
                     || *(_BYTE *)(v391 + 16) != 49
                     || (v393 = *(_DWORD *)(v391 + 20), v303)
                     && ((v393 & 0x40000000) != 0
                       ? (v394 = *(_QWORD *)(v391 - 8))
                       : (v394 = v391 - 32 * (v393 & 0x7FFFFFF)),
                         v303 != *(_QWORD *)(v394 + 32))))
                  {
                    v303 = 0;
                    v302 = v386;
                    break;
                  }
                  if ((v393 & 0x40000000) != 0)
                    v395 = *(_QWORD *)(v391 - 8);
                  else
                    v395 = v391 - 32 * (v393 & 0x7FFFFFF);
                  v303 = *(_QWORD *)(v395 + 32);
                  v302 = v386 + 1;
                  if (v386 > 2)
                    break;
                  v387 = v885[++v386];
                }
                while (v387);
              }
              else
              {
                v302 = 0;
                v303 = 0;
              }
LABEL_534:
              if ((v300 & 0xFE) == 0x12)
                v408 = *(_DWORD *)(v299 + 32);
              else
                v408 = 1;
              if (v303 && v302 == v408 && *(unsigned __int8 *)(v303 + 16) >= 0x1Cu)
              {
                v512 = *v301;
                LOWORD(v896) = 257;
                llvm::CastInst::CreateFPCast((uint64_t *)v303, (uint64_t)v512);
                v514 = v513;
                sub_1C53DF664((_QWORD *)(*(_QWORD *)(v303 + 40) + 40), v303 + 24, v513);
                v515 = v885[0];
                if (!v885[0])
                {
                  v301 = 0;
                  v418 = 0;
                  v304 = 1;
LABEL_756:
                  if (v408 != v418)
                  {
                    v28 = v868;
                    goto LABEL_805;
                  }
                  v559 = 0;
                  v560 = *v301;
                  v561 = v885;
                  while (1)
                  {
                    v562 = *((_DWORD *)v301 + 5);
                    v563 = (v562 & 0x40000000) != 0 ? *(v301 - 1) : (uint64_t *)&v301[-4 * (v562 & 0x7FFFFFF)];
                    v564 = *v563;
                    v565 = *(unsigned __int8 *)(*v563 + 16);
                    v566 = sub_1C4773D54((uint64_t)&v893, *v563, 0, 0, 0);
                    v567 = *(_QWORD *)(v564 - 64);
                    if (v565 == 44 || v565 == 42)
                    {
                      v568 = *(_QWORD *)(v567 + 8);
                      if (v568)
                      {
                        if (!*(_QWORD *)(v568 + 8) && *(_BYTE *)(v567 + 16) == 46)
                          break;
                      }
                    }
                    v880[0] = 257;
                    v573 = (uint64_t)sub_1C47721A0(v566, (uint64_t *)v567, v560, (uint64_t)&v875);
                    v574 = *(_QWORD *)(v564 - 32);
                    if (v565 != 44 && v565 != 42)
                      goto LABEL_773;
                    v575 = *(_QWORD *)(v574 + 8);
                    if (!v575 || *(_QWORD *)(v575 + 8) || *(_BYTE *)(v574 + 16) != 46)
                      goto LABEL_773;
                    v576 = *(uint64_t **)(v574 - 64);
                    v577 = *(uint64_t **)(v574 - 32);
                    v880[0] = 257;
                    v578 = (uint64_t *)sub_1C47721A0((uint64_t)&v893, v576, v560, (uint64_t)&v875);
                    v880[0] = 257;
                    v579 = sub_1C47721A0((uint64_t)&v893, v577, v560, (uint64_t)&v875);
                    v880[0] = 257;
                    v580 = sub_1C4772428((uint64_t)&v893, v578, (uint64_t)v579, (uint64_t)&v875, 0);
                    *(_BYTE *)(v580 + 17) = *(_BYTE *)(v574 + 17) & 0xFE | *(_BYTE *)(v580 + 17) & 1;
LABEL_774:
                    v581 = *(_BYTE *)(v564 + 16);
                    v880[0] = 257;
                    v582 = (char *)operator new(0x80uLL);
                    v583 = v582;
                    *(_QWORD *)v582 = 0;
                    *((_QWORD *)v582 + 1) = 0;
                    *((_QWORD *)v582 + 2) = 0;
                    *((_QWORD *)v582 + 5) = 0;
                    *((_QWORD *)v582 + 6) = 0;
                    *((_QWORD *)v582 + 4) = 0;
                    v584 = (uint64_t *)(v582 + 32);
                    *((_QWORD *)v582 + 8) = *(_QWORD *)v573;
                    v585 = (llvm::Value *)(v582 + 64);
                    *((_QWORD *)v582 + 3) = v582 + 64;
                    *((_QWORD *)v582 + 7) = v582 + 64;
                    *((_QWORD *)v582 + 9) = 0;
                    v582[80] = v581;
                    v582[81] = 0;
                    *((_WORD *)v582 + 41) = 0;
                    *((_DWORD *)v582 + 21) = 2;
                    *((_DWORD *)v582 + 30) = 0;
                    *(_OWORD *)(v582 + 104) = 0u;
                    *(_OWORD *)(v582 + 88) = 0u;
                    *(_QWORD *)v582 = v573;
                    v588 = *(_QWORD *)(v573 + 8);
                    v587 = (_QWORD *)(v573 + 8);
                    v586 = v588;
                    *((_QWORD *)v582 + 1) = v588;
                    if (v588)
                      *(_QWORD *)(v586 + 16) = v582 + 8;
                    *((_QWORD *)v582 + 2) = v587;
                    *v587 = v582;
                    if (*((_QWORD *)v582 + 4))
                    {
                      **((_QWORD **)v582 + 6) = *((_QWORD *)v582 + 5);
                      v599 = *((_QWORD *)v582 + 5);
                      if (v599)
                        *(_QWORD *)(v599 + 16) = *((_QWORD *)v582 + 6);
                    }
                    *v584 = v580;
                    if (v580)
                    {
                      v591 = *(_QWORD *)(v580 + 8);
                      v590 = (uint64_t **)(v580 + 8);
                      v589 = v591;
                      *((_QWORD *)v582 + 5) = v591;
                      if (v591)
                        *(_QWORD *)(v589 + 16) = v582 + 40;
                      *((_QWORD *)v582 + 6) = v590;
                      *v590 = v584;
                    }
                    llvm::Value::setName((uint64_t ***)v582 + 8, (uint64_t)&v875);
                    v880[0] = 257;
                    (*(void (**)(uint64_t, llvm::Value *, llvm::Type **, uint64_t, _QWORD *))(*(_QWORD *)v902 + 16))(v902, v585, &v875, v898, v899);
                    if ((_DWORD)v894)
                    {
                      v592 = v893;
                      v593 = (char *)&v893[16 * v894];
                      v594 = (unsigned __int8 **)(v583 + 112);
                      do
                      {
                        v595 = *(_DWORD *)v592;
                        v596 = (unsigned __int8 *)*((_QWORD *)v592 + 1);
                        if (v596)
                        {
                          if (!v595)
                          {
                            v888 = (void *)*((_QWORD *)v592 + 1);
                            llvm::MetadataTracking::track((uint64_t)&v888, v596, 2);
                            v597 = *v594;
                            if (!*v594)
                            {
LABEL_794:
                              v598 = (unsigned __int8 *)v888;
                              *v594 = (unsigned __int8 *)v888;
                              if (v598)
                                llvm::MetadataTracking::retrack((uint64_t)&v888, v598, (uint64_t)(v583 + 112));
                              goto LABEL_791;
                            }
LABEL_788:
                            llvm::MetadataTracking::untrack((uint64_t)(v583 + 112), v597);
                            goto LABEL_794;
                          }
                        }
                        else
                        {
                          v597 = *v594;
                          if (!*v594 && (v583[87] & 0x20) == 0)
                            goto LABEL_791;
                          if (!v595)
                          {
                            v888 = 0;
                            if (!v597)
                              goto LABEL_794;
                            goto LABEL_788;
                          }
                        }
                        llvm::Value::setMetadata(v585, *(_DWORD *)v592, (llvm::MDNode *)v596);
LABEL_791:
                        v592 += 16;
                      }
                      while (v592 != (unsigned __int8 *)v593);
                    }
                    v583[81] = *(_BYTE *)(v564 + 17) & 0xFE | v583[81] & 1;
                    *v561 = v585;
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v301, v585, (llvm::Value *)1);
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, (uint64_t)v301);
                    if (v893 != (unsigned __int8 *)v895)
                      free(v893);
                    v26 = v855;
                    v28 = v868;
                    if (v559 <= 2)
                    {
                      v561 = &v885[++v559];
                      v301 = (uint64_t **)*v561;
                      if (*v561)
                        continue;
                    }
                    v304 = 1;
                    v301 = (uint64_t **)v885[0];
LABEL_805:
                    v857 = v304;
                    if (v301)
                    {
                      v600 = 0;
                      do
                      {
                        if (*((_BYTE *)v301 + 16) != 74)
                          break;
                        v601 = *((_DWORD *)v301 + 5);
                        if ((v601 & 0x40000000) != 0)
                          v602 = (uint64_t **)*(v301 - 1);
                        else
                          v602 = &v301[-4 * (v601 & 0x7FFFFFF)];
                        v603 = v857;
                        v604 = (*v602)[1];
                        if (v604 && *(_QWORD *)(v604 + 8))
                        {
                          do
                          {
                            v605 = *(_QWORD *)(v604 + 24);
                            v606 = *(unsigned __int8 *)(v605 + 16);
                            if (v605)
                              v607 = v606 >= 0x1C;
                            else
                              v607 = 0;
                            if (v607 && v606 - 59 >= 0xFFFFFFEE)
                            {
                              v609 = *(uint64_t **)(v605 - 64);
                              v610 = *(uint64_t **)(v605 - 32);
                              v611 = *v301;
                              v612 = sub_1C4773D54((uint64_t)&v893, *(_QWORD *)(v604 + 24), 0, 0, 0);
                              v880[0] = 257;
                              v613 = sub_1C47721A0(v612, v609, v611, (uint64_t)&v875);
                              v880[0] = 257;
                              v614 = sub_1C47721A0((uint64_t)&v893, v610, v611, (uint64_t)&v875);
                              v615 = *(uint64_t **)v605;
                              v616 = *(unsigned __int8 *)(v605 + 16) - 28;
                              v880[0] = 257;
                              v617 = sub_1C4773860((uint64_t)&v893, v616, v613, (uint64_t)v614, (uint64_t)&v875, 0);
                              v617[17] = *(_BYTE *)(v605 + 17) & 0xFE | v617[17] & 1;
                              v618 = *(_QWORD *)(v605 + 8);
                              if (v618
                                && !*(_QWORD *)(v618 + 8)
                                && *(_BYTE *)(v605 + 16) == 46
                                && ((v619 = *(_QWORD *)(v618 + 24), v620 = *(unsigned __int8 *)(v619 + 16), v620 == 44)
                                 || v620 == 42))
                              {
                                v621 = *(_DWORD *)(v619 + 20);
                                if ((v621 & 0x40000000) != 0)
                                  v622 = *(uint64_t ***)(v619 - 8);
                                else
                                  v622 = (uint64_t **)(v619 - 32 * (v621 & 0x7FFFFFF));
                                v624 = *v622;
                                v625 = v622[4];
                                sub_1C4773D54((uint64_t)&v875, v619, 0, 0, 0);
                                v892 = 257;
                                if (v624 == (uint64_t *)v605)
                                {
                                  v627 = sub_1C47721A0((uint64_t)&v875, v625, v611, (uint64_t)&v888);
                                  v626 = v617;
                                  v617 = v627;
                                }
                                else
                                {
                                  v626 = sub_1C47721A0((uint64_t)&v875, v624, v611, (uint64_t)&v888);
                                }
                                v628 = *(unsigned __int8 *)(v619 + 16) - 28;
                                v892 = 257;
                                v629 = sub_1C4773860((uint64_t)&v875, v628, v626, (uint64_t)v617, (uint64_t)&v888, 0);
                                v629[17] = *(_BYTE *)(v619 + 17) & 0xFE | v629[17] & 1;
                                v892 = 257;
                                v630 = sub_1C4773A70((uint64_t)&v875, (uint64_t *)v629, v615, (uint64_t)&v888);
                                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v619, (llvm::Value *)v630, (llvm::Value *)1);
                                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, v619);
                                if (v875 != (llvm::Type *)&v877)
                                  free(v875);
                              }
                              else
                              {
                                v880[0] = 257;
                                v623 = sub_1C4773A70((uint64_t)&v893, (uint64_t *)v617, v615, (uint64_t)&v875);
                                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v605, (llvm::Value *)v623, (llvm::Value *)1);
                                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, v605);
                              }
                              v26 = v855;
                              v28 = v868;
                              if (v893 != (unsigned __int8 *)v895)
                                free(v893);
                              v603 = 1;
                            }
                            v604 = *(_QWORD *)(v604 + 8);
                          }
                          while (v604);
                        }
                        v857 = v603;
                        if (v600 > 2)
                          break;
                        v301 = (uint64_t **)v885[++v600];
                      }
                      while (v301);
                    }
                    goto LABEL_277;
                  }
                  v569 = *(uint64_t **)(v567 - 64);
                  v570 = *(uint64_t **)(v567 - 32);
                  v880[0] = 257;
                  v571 = (uint64_t *)sub_1C47721A0(v566, v569, v560, (uint64_t)&v875);
                  v880[0] = 257;
                  v572 = sub_1C47721A0((uint64_t)&v893, v570, v560, (uint64_t)&v875);
                  v880[0] = 257;
                  v573 = sub_1C4772428((uint64_t)&v893, v571, (uint64_t)v572, (uint64_t)&v875, 0);
                  *(_BYTE *)(v573 + 17) = *(_BYTE *)(v567 + 17) & 0xFE | *(_BYTE *)(v573 + 17) & 1;
                  v574 = *(_QWORD *)(v564 - 32);
LABEL_773:
                  v880[0] = 257;
                  v580 = (uint64_t)sub_1C47721A0((uint64_t)&v893, (uint64_t *)v574, v560, (uint64_t)&v875);
                  goto LABEL_774;
                }
                v516 = 0;
                do
                {
                  v517 = v515[5];
                  if ((v517 & 0x40000000) != 0)
                    v518 = (uint64_t *)*((_QWORD *)v515 - 1);
                  else
                    v518 = (uint64_t *)&v515[-8 * (v517 & 0x7FFFFFF)];
                  v519 = *v518;
                  v520 = sub_1C4773D54((uint64_t)&v893, *v518, 0, 0, 0);
                  v521 = *(_DWORD *)(v519 + 20);
                  if ((v521 & 0x40000000) != 0)
                    v522 = *(uint64_t ***)(v519 - 8);
                  else
                    v522 = (uint64_t **)(v519 - 32 * (v521 & 0x7FFFFFF));
                  v523 = *v522;
                  v880[0] = 257;
                  v524 = (uint64_t *)sub_1C47721A0(v520, v523, v512, (uint64_t)&v875);
                  v880[0] = 257;
                  v525 = (llvm::Value *)sub_1C47721F8((uint64_t)&v893, v524, v514, (uint64_t)&v875, 0);
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v515, v525, (llvm::Value *)1);
                  v885[v516] = v525;
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, (uint64_t)v515);
                  if (v893 != (unsigned __int8 *)v895)
                    free(v893);
                  if (v516 > 2)
                    break;
                  v526 = &v885[v516++];
                  v515 = v526[1];
                }
                while (v515);
                v304 = 1;
                v301 = (uint64_t **)v885[0];
                v26 = v855;
                if (!v885[0])
                {
LABEL_755:
                  v418 = 0;
                  goto LABEL_756;
                }
              }
              else if (!v301)
              {
                goto LABEL_755;
              }
              v409 = 0;
              v410 = v301;
              do
              {
                v411 = v410[1];
                if (!v411
                  || v411[1]
                  || *((_BYTE *)v410 + 16) != 74
                  || ((v412 = *((_DWORD *)v410 + 5), (v412 & 0x40000000) != 0)
                    ? (v413 = (uint64_t **)*(v410 - 1))
                    : (v413 = &v410[-4 * (v412 & 0x7FFFFFF)]),
                      (v414 = *v413, (v415 = v414[1]) == 0)
                   || *(_QWORD *)(v415 + 8)
                   || ((v416 = *((unsigned __int8 *)v414 + 16), v416 >= 0x1C)
                     ? (v417 = v416 - 59 >= 0xFFFFFFEE)
                     : (v417 = 0),
                       !v417)))
                {
                  v418 = v409;
                  goto LABEL_756;
                }
                v418 = v409 + 1;
                if (v409 > 2)
                  break;
                v410 = (uint64_t **)v885[++v409];
              }
              while (v410);
              goto LABEL_756;
            default:
              goto LABEL_277;
          }
        }
        if ((v219 - 167) < 2)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, v30);
          goto LABEL_277;
        }
        if (v219 != 52)
        {
          if (v219 != 139)
            goto LABEL_277;
          v375 = *((_QWORD *)v29 - 4 * (*(_DWORD *)(v27 - 4) & 0x7FFFFFF));
          v888 = 0;
          v885[0] = 0;
          v376 = *(_QWORD *)(v375 + 8);
          if (!v376 || *(_QWORD *)(v376 + 8))
            goto LABEL_277;
          v377 = *(unsigned __int8 *)(v375 + 16);
          if (v377 == 5)
          {
            v631 = *(unsigned __int16 *)(v375 + 18);
            if (v631 != 21 && v631 != 18)
              goto LABEL_277;
            v632 = v375 - 32 * (*(_DWORD *)(v375 + 20) & 0x7FFFFFF);
            if (!*(_QWORD *)v632)
              goto LABEL_277;
            v888 = *(void **)v632;
            v378 = *(void **)(v632 + 32);
            if (!v378)
              goto LABEL_277;
          }
          else
          {
            if (v377 != 49 && v377 != 46)
              goto LABEL_277;
            if (!*(_QWORD *)(v375 - 64))
              goto LABEL_277;
            v888 = *(void **)(v375 - 64);
            v378 = *(void **)(v375 - 32);
            if (!v378)
              goto LABEL_277;
          }
          v885[0] = v378;
          sub_1C4773D54((uint64_t)&v893, v30, 0, 0, 0);
          v883[0] = *(_QWORD *)v375;
          v633 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v848 + 40), 139, v883, 1);
          v634 = v633;
          if (v633)
          {
            v635 = *(uint64_t ***)(v633 + 24);
            v880[0] = 257;
            v636 = (uint64_t *)sub_1C4774778((uint64_t *)&v893, v635, v633, (uint64_t *)&v888, 1, (uint64_t)&v875, 0);
            v637 = *(uint64_t ***)(v634 + 24);
          }
          else
          {
            v880[0] = 257;
            v636 = (uint64_t *)sub_1C4774778((uint64_t *)&v893, 0, 0, (uint64_t *)&v888, 1, (uint64_t)&v875, 0);
            v637 = 0;
          }
          v880[0] = 257;
          v638 = sub_1C4774778((uint64_t *)&v893, v637, v634, (uint64_t *)v885, 1, (uint64_t)&v875, 0);
          if (*(_BYTE *)(v375 + 16) == 46)
          {
            v880[0] = 257;
            v639 = (llvm::Value *)sub_1C4772428((uint64_t)&v893, v636, v638, (uint64_t)&v875, 0);
          }
          else
          {
            v880[0] = 257;
            v639 = (llvm::Value *)sub_1C47721F8((uint64_t)&v893, v636, v638, (uint64_t)&v875, 0);
          }
          *((_BYTE *)v639 + 17) = *(_BYTE *)(v375 + 17) & 0xFE | *((_BYTE *)v639 + 17) & 1;
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v27 - 24), v639, (llvm::Value *)1);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, v30);
          v60 = v375;
          goto LABEL_62;
        }
        v472 = llvm::ConstantInt::get((llvm::ConstantInt *)(***(_QWORD ***)(v27 - 24) + 1888), 1, 0);
        v473 = (llvm::Value **)((_QWORD *)v29 - 4 * (*(_DWORD *)(v27 - 4) & 0x7FFFFFF))[4];
        v474 = *(unsigned int *)(*(_QWORD *)(v27 - 24) + 8);
        sub_1C4773D54((uint64_t)&v893, v30, 0, 0, 0);
        if (v474 >> 8 < 0x21)
        {
          v500 = ***(_QWORD ***)v29;
          v501 = ((*(_DWORD *)(*(_QWORD *)v29 + 8) >> 8) - 1);
          v502 = *(llvm::ConstantInt **)(v500 + 1960);
          v503 = *(_DWORD *)(v500 + 1968);
          LODWORD(v876) = v503 >> 8;
          if (v503 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v875, v501, 0);
          }
          else
          {
            if (v503 <= 0xFF)
              v504 = 0;
            else
              v504 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v503);
            v875 = (llvm::Type *)(v504 & v501);
          }
          v505 = llvm::ConstantInt::get(v502, (llvm::LLVMContext *)&v875, v475);
          if (v876 >= 0x41 && v875)
            MEMORY[0x1CAA32F9C](v875, 0x1000C8000313F17);
          v506 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v848 + 40), 1850, 0, 0);
          v888 = 0;
          v507 = (unsigned __int8 *)*((_QWORD *)v29 - 4 * (*(_DWORD *)(v27 - 4) & 0x7FFFFFF));
          v508 = ***(_QWORD ***)v506 + 1960;
          v880[0] = 257;
          v888 = sub_1C4773690((uint64_t *)&v893, v507, v508, (uint64_t)&v875);
          v509 = *(uint64_t ***)(v506 + 24);
          v880[0] = 257;
          v510 = sub_1C4774778((uint64_t *)&v893, v509, v506, (uint64_t *)&v888, 1, (uint64_t)&v875, 0);
          v880[0] = 257;
          v511 = (unsigned __int8 *)sub_1C47733F8((uint64_t)&v893, (uint64_t)v505, v510, (uint64_t)&v875, 0, 0);
        }
        else
        {
          v866 = v473;
          v476 = *(llvm::ConstantInt **)(*(_QWORD *)v900 + 1960);
          LODWORD(v876) = *(_DWORD *)(*(_QWORD *)v900 + 1968) >> 8;
          if (v876 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v875, 0, 0);
          else
            v875 = 0;
          v846 = v472;
          v478 = llvm::ConstantInt::get(v476, (llvm::LLVMContext *)&v875, v475);
          if (v876 >= 0x41 && v875)
            MEMORY[0x1CAA32F9C](v875, 0x1000C8000313F17);
          v479 = *(llvm::ConstantInt **)(*(_QWORD *)v900 + 1960);
          v480 = *(_DWORD *)(*(_QWORD *)v900 + 1968);
          LODWORD(v876) = v480 >> 8;
          if (v480 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v875, 1, 0);
          }
          else
          {
            if (v480 <= 0xFF)
              v481 = 0;
            else
              v481 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v480);
            v875 = (llvm::Type *)(v481 & 1);
          }
          v483 = llvm::ConstantInt::get(v479, (llvm::LLVMContext *)&v875, v477);
          if (v876 >= 0x41 && v875)
            MEMORY[0x1CAA32F9C](v875, 0x1000C8000313F17);
          v484 = *(llvm::ConstantInt **)(*(_QWORD *)v900 + 1960);
          v485 = *(_DWORD *)(*(_QWORD *)v900 + 1968);
          LODWORD(v876) = v485 >> 8;
          if (v485 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v875, 31, 0);
          }
          else
          {
            if (v485 <= 0xFF)
              LOBYTE(v486) = 0;
            else
              v486 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v485);
            v875 = (llvm::Type *)(v486 & 0x1F);
          }
          v488 = llvm::ConstantInt::get(v484, (llvm::LLVMContext *)&v875, v482);
          if (v876 >= 0x41 && v875)
            MEMORY[0x1CAA32F9C](v875, 0x1000C8000313F17);
          v489 = *(llvm::ConstantInt **)(*(_QWORD *)v900 + 1960);
          v490 = *(_DWORD *)(*(_QWORD *)v900 + 1968);
          LODWORD(v876) = v490 >> 8;
          if (v490 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v875, 32, 0);
          }
          else
          {
            if (v490 <= 0xFF)
              LOBYTE(v491) = 0;
            else
              v491 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v490);
            v875 = (llvm::Type *)(v491 & 0x20);
          }
          v492 = llvm::ConstantInt::get(v489, (llvm::LLVMContext *)&v875, v487);
          if (v876 >= 0x41 && v875)
            MEMORY[0x1CAA32F9C](v875, 0x1000C8000313F17);
          llvm::FixedVectorType::get((llvm::FixedVectorType *)(***(_QWORD ***)(v27 - 24) + 1960), (llvm::Type *)2);
          v493 = (unsigned __int8 *)*((_QWORD *)v29 - 4 * (*(_DWORD *)(v27 - 4) & 0x7FFFFFF));
          v880[0] = 257;
          v495 = sub_1C4773E38((uint64_t *)&v893, 49, v493, v494, (uint64_t)&v875);
          v883[0] = 0;
          v880[0] = 257;
          v883[0] = (uint64_t)sub_1C4772EE0((uint64_t *)&v893, (uint64_t)v495, (uint64_t)v478, (uint64_t)&v875);
          v869 = 0;
          v880[0] = 257;
          v869 = sub_1C4772EE0((uint64_t *)&v893, (uint64_t)v495, (uint64_t)v483, (uint64_t)&v875);
          v880[0] = 257;
          v496 = sub_1C4774B48((uint64_t)&v893, 32, (uint64_t)v869, (uint64_t)v478, (uint64_t)&v875);
          v497 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v848 + 40), 1850, 0, 0);
          v498 = v497;
          v839 = (uint64_t)v478;
          if (v497)
            v499 = *(uint64_t ***)(v497 + 24);
          else
            v499 = 0;
          v527 = v866;
          v880[0] = 257;
          v528 = sub_1C4774778((uint64_t *)&v893, v499, v497, (uint64_t *)&v869, 1, (uint64_t)&v875, 0);
          v880[0] = 257;
          v529 = sub_1C47733F8((uint64_t)&v893, (uint64_t)v488, v528, (uint64_t)&v875, 0, 0);
          v841 = v474;
          if (v498)
            v530 = *(uint64_t ***)(v498 + 24);
          else
            v530 = 0;
          v880[0] = 257;
          v531 = sub_1C4774778((uint64_t *)&v893, v530, v498, v883, 1, (uint64_t)&v875, 0);
          v880[0] = 257;
          v532 = sub_1C47733F8((uint64_t)&v893, (uint64_t)v488, v531, (uint64_t)&v875, 0, 0);
          v892 = 257;
          v533 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::ValueHandleBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v901 + 16))(v901, v492, v532, 0, 0);
          if (!v533)
          {
            v880[0] = 257;
            v534 = (char *)operator new(0x80uLL);
            v535 = v534;
            *(_QWORD *)v534 = 0;
            *((_QWORD *)v534 + 1) = 0;
            *((_QWORD *)v534 + 2) = 0;
            *((_QWORD *)v534 + 5) = 0;
            *((_QWORD *)v534 + 6) = 0;
            *((_QWORD *)v534 + 4) = 0;
            v536 = (uint64_t *)(v534 + 32);
            *((_QWORD *)v534 + 8) = *(_QWORD *)v492;
            v533 = (llvm::Value *)(v534 + 64);
            *((_QWORD *)v534 + 3) = v534 + 64;
            *((_QWORD *)v534 + 7) = v534 + 64;
            *((_QWORD *)v534 + 9) = 0;
            v534[80] = 41;
            v534[81] = 0;
            *((_WORD *)v534 + 41) = 0;
            *((_DWORD *)v534 + 21) = 2;
            *((_DWORD *)v534 + 30) = 0;
            *(_OWORD *)(v534 + 104) = 0u;
            *(_OWORD *)(v534 + 88) = 0u;
            *(_QWORD *)v534 = v492;
            v539 = *((_QWORD *)v492 + 1);
            v538 = (_QWORD *)((char *)v492 + 8);
            v537 = v539;
            *((_QWORD *)v534 + 1) = v539;
            if (v539)
              *(_QWORD *)(v537 + 16) = v534 + 8;
            *((_QWORD *)v534 + 2) = v538;
            *v538 = v534;
            if (*((_QWORD *)v534 + 4))
            {
              **((_QWORD **)v534 + 6) = *((_QWORD *)v534 + 5);
              v660 = *((_QWORD *)v534 + 5);
              if (v660)
                *(_QWORD *)(v660 + 16) = *((_QWORD *)v534 + 6);
            }
            *v536 = v532;
            if (v532)
            {
              v542 = *(_QWORD *)(v532 + 8);
              v541 = (uint64_t **)(v532 + 8);
              v540 = v542;
              *((_QWORD *)v534 + 5) = v542;
              if (v542)
                *(_QWORD *)(v540 + 16) = v534 + 40;
              *((_QWORD *)v534 + 6) = v541;
              *v541 = v536;
            }
            llvm::Value::setName((uint64_t ***)v534 + 8, (uint64_t)&v875);
            (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, _QWORD *))(*(_QWORD *)v902 + 16))(v902, v533, &v888, v898, v899);
            if ((_DWORD)v894)
            {
              v543 = v893;
              v544 = (char *)&v893[16 * v894];
              v545 = (unsigned __int8 **)(v535 + 112);
              do
              {
                v546 = *(_DWORD *)v543;
                v547 = (unsigned __int8 *)*((_QWORD *)v543 + 1);
                if (v547)
                {
                  if (!v546)
                  {
                    v885[0] = *((void **)v543 + 1);
                    llvm::MetadataTracking::track((uint64_t)v885, v547, 2);
                    v548 = *v545;
                    goto LABEL_738;
                  }
                }
                else
                {
                  v548 = *v545;
                  if (!*v545 && (v535[87] & 0x20) == 0)
                    goto LABEL_735;
                  if (!v546)
                  {
                    v885[0] = 0;
LABEL_738:
                    if (v548)
                      llvm::MetadataTracking::untrack((uint64_t)(v535 + 112), v548);
                    v549 = (unsigned __int8 *)v885[0];
                    *v545 = (unsigned __int8 *)v885[0];
                    if (v549)
                      llvm::MetadataTracking::retrack((uint64_t)v885, v549, (uint64_t)(v535 + 112));
                    goto LABEL_735;
                  }
                }
                llvm::Value::setMetadata(v533, *(_DWORD *)v543, (llvm::MDNode *)v547);
LABEL_735:
                v543 += 16;
              }
              while (v543 != (unsigned __int8 *)v544);
            }
            v527 = v866;
          }
          v880[0] = 257;
          v511 = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v893, v496, (uint64_t *)v533, v529, (uint64_t)&v875, 0);
          if (v846 == v527)
          {
            v26 = v855;
          }
          else
          {
            v550 = v841 >> 8;
            v880[0] = 257;
            v551 = sub_1C4773594((uint64_t)&v893, v869, v883[0], (uint64_t)&v875);
            v892 = 257;
            v553 = sub_1C4774B48((uint64_t)&v893, 32, v551, v839, (uint64_t)&v888);
            v554 = *(llvm::ConstantInt **)(*(_QWORD *)v900 + 1960);
            v555 = *(_DWORD *)(*(_QWORD *)v900 + 1968);
            LODWORD(v876) = v555 >> 8;
            v26 = v855;
            if (v555 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v875, v550, 0);
            }
            else
            {
              if (v555 <= 0xFF)
                v556 = 0;
              else
                v556 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v555);
              v875 = (llvm::Type *)(v556 & v550);
            }
            v557 = (uint64_t *)llvm::ConstantInt::get(v554, (llvm::LLVMContext *)&v875, v552);
            if (v876 >= 0x41 && v875)
              MEMORY[0x1CAA32F9C](v875, 0x1000C8000313F17);
            v880[0] = 257;
            v511 = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v893, v553, v557, (uint64_t)v511, (uint64_t)&v875, 0);
          }
          v28 = v868;
        }
        v558 = *(_QWORD *)v29;
        v880[0] = 257;
        v58 = sub_1C4773690((uint64_t *)&v893, v511, v558, (uint64_t)&v875);
        v59 = v29;
        goto LABEL_61;
      }
      if (!*(_QWORD *)(v27 - 16))
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, v30);
        goto LABEL_65;
      }
LABEL_239:
      if (!*(_BYTE *)(v849 + 28))
        goto LABEL_277;
      llvm::SampleInfo::SampleInfo((uint64_t)&v875, v219, 1);
      if (BYTE2(v875))
        goto LABEL_277;
      v234 = HIDWORD(v875);
      v235 = (unsigned __int8 *)*((_QWORD *)v29 + 4 * v881 + -4 * (*(_DWORD *)(v27 - 4) & 0x7FFFFFF));
      v236 = v235[16];
      if (v235 && v236 < 0x15)
      {
        sub_1C4773D54((uint64_t)&v893, v27 - 24, 0, 0, 0);
        v237 = *(_QWORD *)v235;
        v238 = (uint64_t *)(*(_QWORD *)v900 + 1672);
        if ((*(_DWORD *)(*(_QWORD *)v235 + 8) & 0xFE) == 0x12)
        {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v900 + 1672), (llvm::Type *)*(unsigned int *)(v237 + 32));
          v238 = v239;
        }
        v26 = v855;
        v892 = 257;
        v240 = sub_1C4773B3C((uint64_t)&v893, (uint64_t *)v235, v238, (uint64_t)&v888);
        v892 = 257;
        v241 = sub_1C4773E38((uint64_t *)&v893, 49, v240, v237, (uint64_t)&v888);
        v242 = v881;
        v243 = (char *)v29 - 32 * (*(_DWORD *)(v27 - 4) & 0x7FFFFFF);
        v244 = &v243[32 * v881];
        if (*(_QWORD *)v244)
        {
          **((_QWORD **)v244 + 2) = *((_QWORD *)v244 + 1);
          v245 = *((_QWORD *)v244 + 1);
          if (v245)
            *(_QWORD *)(v245 + 16) = *((_QWORD *)v244 + 2);
        }
        *(_QWORD *)v244 = v241;
        v28 = v868;
        if (v241)
        {
          v248 = *((_QWORD *)v241 + 1);
          v246 = (char **)(v241 + 8);
          v247 = v248;
          v249 = &v243[32 * v242];
          *((_QWORD *)v249 + 1) = v248;
          if (v248)
            *(_QWORD *)(v247 + 16) = v249 + 8;
          *((_QWORD *)v249 + 2) = v246;
          *v246 = v244;
        }
        v250 = v893;
        if (v893 != (unsigned __int8 *)v895)
          goto LABEL_448;
        goto LABEL_253;
      }
      if (v236 >= 0x1C)
      {
        v318 = *((_QWORD *)v235 + 4);
        if (v318)
          v319 = v318 == *((_QWORD *)v235 + 5) + 40;
        else
          v319 = 1;
        if (v319)
          v294 = 0;
        else
          v294 = v318 - 24;
      }
      else
      {
        for (i = *(_QWORD *)(v851 + 48); i != v855; i = *(_QWORD *)(i + 8))
        {
          v294 = i - 24;
          if (i)
            v295 = i - 24;
          else
            v295 = 0;
          if (*(_BYTE *)(v295 + 16) != 83)
            goto LABEL_336;
        }
        v294 = 0;
      }
LABEL_336:
      v320 = *(llvm::UndefValue **)v235;
      v888 = &v890;
      v889 = 0x400000000;
      sub_1C4773D54((uint64_t)&v893, v294, 0, 0, 0);
      if (v236 == 90)
      {
        if (v235[16] != 90)
        {
          v351 = 0xFFFFFFFFLL;
          v326 = v235;
LABEL_396:
          if (v326 != (unsigned __int8 *)llvm::UndefValue::get(v320, v321))
          {
            v353 = v351 - 1;
            do
            {
              v354 = *(llvm::ConstantInt **)(*(_QWORD *)v900 + 1960);
              v355 = *(_DWORD *)(*(_QWORD *)v900 + 1968);
              LODWORD(v885[1]) = v355 >> 8;
              if (v355 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)v885, v353, 0);
              }
              else
              {
                if (v355 <= 0xFF)
                  LODWORD(v356) = 0;
                else
                  v356 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v355);
                v885[0] = (void *)(v356 & v353);
              }
              v357 = llvm::ConstantInt::get(v354, (llvm::LLVMContext *)v885, v352);
              if (LODWORD(v885[1]) >= 0x41 && v885[0])
                MEMORY[0x1CAA32F9C](v885[0], 0x1000C8000313F17);
              v887 = 257;
              v358 = sub_1C4772EE0((uint64_t *)&v893, (uint64_t)v326, (uint64_t)v357, (uint64_t)v885);
              v359 = v889;
              if (v889 >= (unint64_t)HIDWORD(v889))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v888, (uint64_t)&v890, v889 + 1, 8);
                v359 = v889;
              }
              *((_QWORD *)v888 + v359) = v358;
              LODWORD(v889) = v889 + 1;
              --v353;
            }
            while (v353 != -1);
          }
          goto LABEL_411;
        }
        v323 = v889;
        v324 = v235;
        do
        {
          v325 = *((_QWORD *)v324 - 8);
          if (v323 >= HIDWORD(v889))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v888, (uint64_t)&v890, v323 + 1, 8);
            v323 = v889;
          }
          *((_QWORD *)v888 + v323) = v325;
          v323 = v889 + 1;
          LODWORD(v889) = v889 + 1;
          v326 = (unsigned __int8 *)*((_QWORD *)v324 - 12);
          if (*(_BYTE *)(*((_QWORD *)v324 - 4) + 16) == 16)
            v327 = *((_QWORD *)v324 - 4);
          else
            v327 = 0;
          v328 = (uint64_t *)(v327 + 24);
          if (*(_DWORD *)(v327 + 32) >= 0x41u)
            v328 = (uint64_t *)*v328;
          if (!v326)
            break;
          v324 = (unsigned __int8 *)*((_QWORD *)v324 - 12);
        }
        while (v326[16] == 90);
        v351 = *v328;
        if (*v328)
          goto LABEL_396;
      }
      else if (v234 >= 2)
      {
        v329 = v234 - 1;
        do
        {
          v330 = v329;
          v331 = *(llvm::ConstantInt **)(*(_QWORD *)v900 + 1960);
          v332 = *(_DWORD *)(*(_QWORD *)v900 + 1968);
          LODWORD(v885[1]) = v332 >> 8;
          if (v332 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)v885, v329, 0);
          }
          else
          {
            if (v332 <= 0xFF)
              LODWORD(v333) = 0;
            else
              v333 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v332);
            v885[0] = (void *)(v333 & v329);
          }
          v334 = llvm::ConstantInt::get(v331, (llvm::LLVMContext *)v885, v322);
          if (LODWORD(v885[1]) >= 0x41 && v885[0])
            MEMORY[0x1CAA32F9C](v885[0], 0x1000C8000313F17);
          v887 = 257;
          v335 = sub_1C4772EE0((uint64_t *)&v893, (uint64_t)v235, (uint64_t)v334, (uint64_t)v885);
          v336 = v889;
          if (v889 >= (unint64_t)HIDWORD(v889))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v888, (uint64_t)&v890, v889 + 1, 8);
            v336 = v889;
          }
          *((_QWORD *)v888 + v336) = v335;
          LODWORD(v889) = v889 + 1;
          --v329;
        }
        while (v330);
      }
LABEL_411:
      if (v234 >= v889)
        v360 = v889;
      else
        v360 = v234;
      if (v234 == 1)
      {
        v361 = (llvm::Value *)sub_1C4773AC8((uint64_t *)v235, (uint64_t *)&v893);
        v26 = v855;
      }
      else
      {
        v361 = llvm::UndefValue::get(v320, v321);
        v26 = v855;
        if ((_DWORD)v889)
        {
          v362 = (char *)v888 + 8 * v889 - 8;
          if (v888 < v362)
          {
            v363 = (char *)v888 + 8;
            do
            {
              v364 = *((_QWORD *)v363 - 1);
              *((_QWORD *)v363 - 1) = *(_QWORD *)v362;
              *(_QWORD *)v362 = v364;
              v362 -= 8;
              v253 = v363 >= v362;
              v363 += 8;
            }
            while (!v253);
          }
        }
        if ((_DWORD)v360)
        {
          for (j = 0; j != v360; ++j)
          {
            v367 = sub_1C4773AC8(*((uint64_t **)v888 + j), (uint64_t *)&v893);
            v368 = *(llvm::ConstantInt **)(*(_QWORD *)v900 + 1960);
            v369 = *(_DWORD *)(*(_QWORD *)v900 + 1968);
            LODWORD(v885[1]) = v369 >> 8;
            if (v369 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)v885, j, 0);
            }
            else
            {
              if (v369 <= 0xFF)
                v370 = 0;
              else
                v370 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v369);
              v885[0] = (void *)(v370 & j);
            }
            v371 = llvm::ConstantInt::get(v368, (llvm::LLVMContext *)v885, v366);
            if (LODWORD(v885[1]) >= 0x41 && v885[0])
              MEMORY[0x1CAA32F9C](v885[0], 0x1000C8000313F17);
            v887 = 257;
            v361 = (llvm::Value *)sub_1C4773154((uint64_t *)&v893, (uint64_t)v361, (uint64_t)v367, (uint64_t)v371, (uint64_t)v885);
          }
        }
      }
      v372 = *((_QWORD *)v235 + 1);
      if (v372)
      {
        while (1)
        {
          v373 = *(llvm::ValueAsMetadata **)(v372 + 24);
          if (*((unsigned __int8 *)v373 + 16) >= 0x1Cu && v373 == v29)
            break;
          v372 = *(_QWORD *)(v372 + 8);
          if (!v372)
            goto LABEL_442;
        }
        llvm::User::replaceUsesOfWith((llvm::User *)(v27 - 24), (llvm::Value *)v235, v361);
      }
LABEL_442:
      if (v235[16] >= 0x1Cu && !*((_QWORD *)v235 + 1))
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, (uint64_t)v235);
      if (v893 != (unsigned __int8 *)v895)
        free(v893);
      v250 = v888;
      v28 = v868;
      if (v888 != &v890)
LABEL_448:
        free(v250);
LABEL_253:
      if (v882 != -1)
      {
        v251 = *((_QWORD *)v29 + 4 * v882 + -4 * (*(_DWORD *)(v27 - 4) & 0x7FFFFFF));
        v252 = v27 - 24;
        if (v251)
          v253 = *(unsigned __int8 *)(v251 + 16) >= 0x15u;
        else
          v253 = 1;
        if (v253)
        {
          sub_1C4773D54((uint64_t)&v893, v252, 0, 0, 0);
          v254 = sub_1C4773AC8((uint64_t *)v251, (uint64_t *)&v893);
          v255 = *(_QWORD *)(v251 + 8);
          if (v255)
          {
            while (1)
            {
              v256 = *(llvm::ValueAsMetadata **)(v255 + 24);
              if (*((unsigned __int8 *)v256 + 16) >= 0x1Cu && v256 == v29)
                break;
              v255 = *(_QWORD *)(v255 + 8);
              if (!v255)
                goto LABEL_63;
            }
            llvm::User::replaceUsesOfWith((llvm::User *)(v27 - 24), (llvm::Value *)v251, (llvm::Value *)v254);
          }
        }
        else
        {
          sub_1C4773D54((uint64_t)&v893, v252, 0, 0, 0);
          v305 = *(_QWORD *)v251;
          v306 = (uint64_t *)(*(_QWORD *)v900 + 1672);
          if ((*(_DWORD *)(*(_QWORD *)v251 + 8) & 0xFE) == 0x12)
          {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v900 + 1672), (llvm::Type *)*(unsigned int *)(v305 + 32));
            v306 = v307;
          }
          v892 = 257;
          v308 = sub_1C4773B3C((uint64_t)&v893, (uint64_t *)v251, v306, (uint64_t)&v888);
          v892 = 257;
          v309 = sub_1C4773E38((uint64_t *)&v893, 49, v308, v305, (uint64_t)&v888);
          v310 = v882;
          v311 = (char *)v29 - 32 * (*(_DWORD *)(v27 - 4) & 0x7FFFFFF);
          v312 = &v311[32 * v882];
          if (*(_QWORD *)v312)
          {
            **((_QWORD **)v312 + 2) = *((_QWORD *)v312 + 1);
            v313 = *((_QWORD *)v312 + 1);
            if (v313)
              *(_QWORD *)(v313 + 16) = *((_QWORD *)v312 + 2);
          }
          *(_QWORD *)v312 = v309;
          if (v309)
          {
            v316 = *((_QWORD *)v309 + 1);
            v314 = (char **)(v309 + 8);
            v315 = v316;
            v317 = &v311[32 * v310];
            *((_QWORD *)v317 + 1) = v316;
            if (v316)
              *(_QWORD *)(v315 + 16) = v317 + 8;
            *((_QWORD *)v317 + 2) = v314;
            *v314 = v312;
          }
        }
        goto LABEL_63;
      }
LABEL_65:
      v857 = 1;
LABEL_277:
      v27 = v28;
      if (v28 == v26)
        goto LABEL_926;
    }
  }
LABEL_927:
  v662 = v870;
  v661 = (unint64_t *)v871;
  v664 = v872;
  v663 = HIDWORD(v872);
  if (v871 == (char *)v870)
    v665 = HIDWORD(v872);
  else
    v665 = v872;
  v666 = v871;
  v667 = v850;
  if ((_DWORD)v665)
  {
    v668 = 0;
    while (*(_QWORD *)&v871[v668] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v668 += 8;
      if (8 * v665 == v668)
        goto LABEL_952;
    }
    v666 = &v871[v668];
  }
  v669 = &v871[8 * v665];
  if (v666 != v669)
  {
    v670 = *(_QWORD *)v666;
LABEL_938:
    v671 = *(_DWORD *)(v670 + 20);
    if ((v671 & 0x40000000) != 0)
    {
      v673 = *(_QWORD *)(v670 - 8);
      v672 = v671 & 0x7FFFFFF;
      if (!v672)
        goto LABEL_945;
    }
    else
    {
      v672 = v671 & 0x7FFFFFF;
      v673 = v670 - 32 * v672;
      if (!v672)
        goto LABEL_945;
    }
    v674 = 32 * v672;
    v675 = (_QWORD **)(v673 + 16);
    do
    {
      if (*(v675 - 2))
      {
        **v675 = *(v675 - 1);
        v676 = (uint64_t)*(v675 - 1);
        if (v676)
          *(_QWORD *)(v676 + 16) = *v675;
      }
      *(v675 - 2) = 0;
      v675 += 4;
      v674 -= 32;
    }
    while (v674);
LABEL_945:
    v677 = (unint64_t *)(v666 + 8);
    while (v677 != (unint64_t *)v669)
    {
      v678 = *v677++;
      v670 = v678;
      if (v678 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v666 = (char *)(v677 - 1);
        goto LABEL_938;
      }
    }
    v662 = v870;
    v661 = (unint64_t *)v871;
    v664 = v872;
    v663 = HIDWORD(v872);
  }
LABEL_952:
  if (v661 == v662)
    v679 = v663;
  else
    v679 = v664;
  v680 = v661;
  if ((_DWORD)v679)
  {
    v681 = 0;
    while (v661[v681] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v679 == ++v681)
        goto LABEL_968;
    }
    v680 = &v661[v681];
  }
  v682 = &v661[v679];
  if (v680 != v682)
  {
    v683 = *v680;
LABEL_963:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v683 + 40) + 40, (uint64_t ***)v683);
    v684 = *(_QWORD *)(v683 + 24);
    v685 = *(_QWORD **)(v683 + 32);
    *v685 = v684;
    *(_QWORD *)(v684 + 8) = v685;
    *(_QWORD *)(v683 + 24) = 0;
    *(_QWORD *)(v683 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v683);
    v686 = v680 + 1;
    while (v686 != v682)
    {
      v687 = *v686++;
      v683 = v687;
      if (v687 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v680 = v686 - 1;
        goto LABEL_963;
      }
    }
    v662 = v870;
    v661 = (unint64_t *)v871;
  }
LABEL_968:
  if (v661 != v662)
  {
    if (v872 >= 0x21 && 4 * (HIDWORD(v872) - v873) < v872)
    {
      free(v661);
      v829 = 1 << (33 - __clz(HIDWORD(v872) - v873 - 1));
      v385 = (HIDWORD(v872) - v873) > 0x10;
      HIDWORD(v872) = 0;
      v873 = 0;
      if (v385)
        v830 = v829;
      else
        v830 = 32;
      LODWORD(v872) = v830;
      v831 = (char *)malloc_type_malloc(8 * v830, 0x4065EBACuLL);
      if (!v831)
        goto LABEL_1212;
      v871 = v831;
      memset(v831, 255, 8 * v872);
      goto LABEL_970;
    }
    memset(v661, 255, 8 * v872);
  }
  HIDWORD(v872) = 0;
  v873 = 0;
LABEL_970:
  if (*(_BYTE *)(v849 + 28))
    goto LABEL_1144;
  v688 = *(_QWORD *)(v848 + 80);
  if (v688 == v853)
    goto LABEL_1144;
  do
  {
    v689 = v688 - 24;
    if (!v688)
      v689 = 0;
    v690 = v689 + 40;
    v691 = *(_QWORD *)(v689 + 48);
    if (v691 == v689 + 40)
      goto LABEL_1143;
    v856 = v689;
    do
    {
      v692 = v691;
      v691 = *(_QWORD *)(v691 + 8);
      v693 = v692 - 24;
      if (v692)
        v694 = v692 - 24;
      else
        v694 = 0;
      v695 = *(unsigned __int8 *)(v694 + 16);
      if (v695 == 67)
        v696 = v694;
      else
        v696 = 0;
      if (v692 && v695 == 67 && *(_DWORD *)(*(_QWORD *)v696 + 8) == 16397)
      {
        v697 = *(_QWORD *)(v694 + 8);
        if (v697)
        {
          while (*(_BYTE *)(*(_QWORD *)(v697 + 24) + 16) == 62)
          {
            v697 = *(_QWORD *)(v697 + 8);
            if (!v697)
              goto LABEL_988;
          }
          goto LABEL_1020;
        }
LABEL_988:
        v698 = *(_QWORD *)(v696 - 32);
        if (!*(_QWORD *)(v694 + 40))
        {
          if (!v698
            || *(unsigned __int8 *)(v698 + 16) < 0x1Cu
            || (v693 = *(_QWORD *)(v696 - 32), !*(_QWORD *)(v698 + 40)))
          {
            v693 = 0;
          }
        }
        v893 = v852;
        v894 = 0;
        v895[0] = v693;
        v895[1] = 0;
        v896 = 0;
        v897 = 1;
        sub_1C4F83784(v698, 0, (uint64_t *)&v893, &v888);
        v699 = v889 - 1;
        v700 = &v888;
        if (v889 >= 0x41)
          v700 = (void **)((char *)v888 + 8 * (v699 >> 6));
        v701 = (unint64_t)*v700;
        v702 = (uint64_t *)sub_1C4773D54((uint64_t)&v893, v694, 0, 0, 0);
        v703 = *(unsigned __int8 **)(v696 - 32);
        v704 = *(_QWORD *)v696;
        v880[0] = 257;
        v705 = sub_1C4773B94(v702, v703, v704, (uint64_t)&v875);
        v706 = v705;
        if (((v701 >> v699) & 1) != 0)
        {
LABEL_992:
          LOBYTE(v857) = 1;
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v694, (llvm::Value *)v706, (llvm::Value *)1);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, v694);
          v707 = 0;
          goto LABEL_1015;
        }
        v708 = *(_QWORD *)(v667 + 104);
        v709 = *(_DWORD *)(v667 + 120);
        if (v709)
        {
          v710 = v709 - 1;
          v711 = (v709 - 1) & ((v705 >> 4) ^ (v705 >> 9));
          v712 = v708 + 48 * v711;
          v713 = *(unsigned __int8 **)(v712 + 24);
          if (v713 != v705)
          {
            v714 = 1;
            while (v713 != (unsigned __int8 *)-4096)
            {
              v715 = v711 + v714++;
              v711 = v715 & v710;
              v712 = v708 + 48 * (v715 & v710);
              v713 = *(unsigned __int8 **)(v712 + 24);
              if (v713 == v705)
                goto LABEL_1000;
            }
            goto LABEL_999;
          }
        }
        else
        {
LABEL_999:
          v712 = v708 + 48 * v709;
        }
LABEL_1000:
        if (v712 == v708 + 48 * v709 || (SCEVIter = *(_QWORD *)(v712 + 40)) == 0)
        {
          SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v667, (unint64_t)v705);
          v708 = *(_QWORD *)(v667 + 104);
          v709 = *(_DWORD *)(v667 + 120);
        }
        v717 = v708 + 48 * v709;
        if (v709)
        {
          v718 = v709 - 1;
          v719 = v718 & ((v696 >> 4) ^ (v696 >> 9));
          v720 = v708 + 48 * v719;
          v721 = *(_QWORD *)(v720 + 24);
          if (v721 != v696)
          {
            v722 = 1;
            while (v721 != -4096)
            {
              v723 = v719 + v722++;
              v719 = v723 & v718;
              v720 = v708 + 48 * v719;
              v721 = *(_QWORD *)(v720 + 24);
              if (v721 == v696)
                goto LABEL_1010;
            }
            goto LABEL_1009;
          }
        }
        else
        {
LABEL_1009:
          v720 = v717;
        }
LABEL_1010:
        if (v720 == v717 || (v724 = *(_QWORD *)(v720 + 40)) == 0)
          v724 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v667, v696);
        if (SCEVIter == v724)
          goto LABEL_992;
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v706 + 5) + 40, (uint64_t ***)v706);
        v725 = *((_QWORD *)v706 + 3);
        v726 = (_QWORD *)*((_QWORD *)v706 + 4);
        *v726 = v725;
        *(_QWORD *)(v725 + 8) = v726;
        *((_QWORD *)v706 + 3) = 0;
        *((_QWORD *)v706 + 4) = 0;
        llvm::Value::deleteValue((llvm::Value *)v706);
        v707 = 1;
LABEL_1015:
        if (v893 != (unsigned __int8 *)v895)
          free(v893);
        if (v891 >= 0x41 && v890)
          MEMORY[0x1CAA32F9C](v890, 0x1000C8000313F17);
        if (v889 >= 0x41 && v888)
          MEMORY[0x1CAA32F9C](v888, 0x1000C8000313F17);
        if (!v707)
          continue;
      }
LABEL_1020:
      if (*(_DWORD *)(*(_QWORD *)v694 + 8) != 269)
        continue;
      if (*(_BYTE *)(v694 + 16) == 82)
      {
        v727 = *(_DWORD *)(v694 + 20);
        v728 = (v727 & 0x40000000) != 0 ? *(_QWORD *)(v694 - 8) : v694 - 32 * (v727 & 0x7FFFFFF);
        v729 = *(llvm::Constant **)(v728 + 32);
        if (*((_BYTE *)v729 + 16) == 17 && (llvm::Constant::isNullValue(v729) & 1) != 0)
          continue;
      }
      v730 = *(_QWORD *)(v694 + 8);
      if (!v730)
        continue;
      v731 = 0;
      while (1)
      {
        v732 = *(_BYTE **)(v730 + 24);
        if (!v732 || v732[16] != 85 || *((_QWORD *)v732 - 12) != v694)
          goto LABEL_1032;
        v733 = *(unsigned __int8 *)(v694 + 16);
        if (*(_BYTE *)(*(_QWORD *)v732 + 8) || v733 != 82)
        {
          v736 = (unsigned __int8 *)*((_QWORD *)v732 - 8);
          if ((v733 - 81) > 1)
          {
            v739 = (unsigned __int8 *)*((_QWORD *)v732 - 4);
            goto LABEL_1044;
          }
          v734 = *(_DWORD *)(v694 + 20);
          if ((v734 & 0x40000000) == 0)
          {
LABEL_1040:
            v737 = v734 & 0x7FFFFFF;
            v738 = *(unsigned __int8 **)(v694 - 32 * v737);
            if (v736 == v738)
              goto LABEL_1032;
            v739 = (unsigned __int8 *)*((_QWORD *)v732 - 4);
            if (v739 == v738)
              goto LABEL_1032;
            v740 = *(unsigned __int8 **)(v694 + 32 - 32 * v737);
            goto LABEL_1063;
          }
        }
        else
        {
          v734 = *(_DWORD *)(v694 + 20);
          if ((v734 & 0x40000000) != 0)
            v735 = *(_QWORD *)(v694 - 8);
          else
            v735 = v694 - 32 * (v734 & 0x7FFFFFF);
          v743 = *(_DWORD *)(**(_QWORD **)v735 + 8);
          if (!(_BYTE)v743 || v743 == 4109)
            goto LABEL_1032;
          v736 = (unsigned __int8 *)*((_QWORD *)v732 - 8);
          if ((v734 & 0x40000000) == 0)
            goto LABEL_1040;
        }
        v744 = *(unsigned __int8 ***)(v694 - 8);
        if (v736 == *v744)
          goto LABEL_1032;
        v739 = (unsigned __int8 *)*((_QWORD *)v732 - 4);
        if (v739 == *v744)
          goto LABEL_1032;
        v740 = v744[4];
LABEL_1063:
        if (v736 == v740 || v739 == v740)
          goto LABEL_1032;
LABEL_1044:
        if (v739[16] >= 0x15u)
          v741 = 0;
        else
          v741 = (llvm::Constant *)v739;
        if (v736)
          v742 = v736[16] > 0x14u;
        else
          v742 = 1;
        if (!v742 && (llvm::Constant::isNullValue((llvm::Constant *)v736) & 1) != 0
          || v741 && (llvm::Constant::isNullValue(v741) & 1) != 0)
        {
          goto LABEL_1032;
        }
        if (v731)
          break;
        v731 = 1;
LABEL_1032:
        v730 = *(_QWORD *)(v730 + 8);
        if (!v730)
          goto LABEL_1133;
      }
      llvm::Instruction::clone((llvm::Instruction *)v694);
      v746 = v745;
      sub_1C4773D54((uint64_t)&v893, v694, 0, 0, 0);
      if (*(_BYTE *)(v694 + 16) == 83)
      {
        for (k = *(_QWORD **)(v856 + 48); ; k = (_QWORD *)k[1])
        {
          v749 = k - 3;
          if (!k)
            v749 = 0;
          if (*((_BYTE *)v749 + 16) != 83)
            break;
        }
        v898 = k[2];
        v899 = k;
        v750 = (llvm::Type *)k[3];
        v875 = v750;
        if (v750)
        {
          llvm::MetadataTracking::track((uint64_t)&v875, (unsigned __int8 *)v750, 2);
          v751 = v875;
        }
        else
        {
          v751 = 0;
        }
        sub_1C4774EF4((uint64_t)&v893, 0, (uint64_t)v751);
        v747 = v875;
        if (v875)
          llvm::MetadataTracking::untrack((uint64_t)&v875, (unsigned __int8 *)v875);
      }
      v752 = (llvm::ConstantFP **)(***(_QWORD ***)v694 + 1624);
      v753 = (uint64_t *)llvm::ConstantFP::get(v752, v747, 0.0);
      v755 = llvm::ConstantFP::get(v752, v754, 1.0);
      v880[0] = 257;
      v756 = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v893, v746, v753, (uint64_t)v755, (uint64_t)&v875, 0);
      v880[0] = 257;
      v757 = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v893, 1, v756, (uint64_t)v753, (uint64_t)&v875, 0, 0);
      v758 = v756[5];
      *(_QWORD *)(v746 + 40) = v758;
      *(_WORD *)(v758 + 18) &= ~0x8000u;
      if ((*(_BYTE *)(v746 + 23) & 0x10) != 0)
      {
        v797 = *(_QWORD *)(v758 + 56);
        if (v797)
        {
          v798 = *(llvm::ValueSymbolTable **)(v797 + 104);
          if (v798)
            llvm::ValueSymbolTable::reinsertValue(v798, (llvm::Value *)v746);
        }
      }
      v760 = v756[3];
      v759 = v756 + 3;
      *(_QWORD *)(v746 + 24) = v760;
      *(_QWORD *)(v746 + 32) = v759;
      v761 = v746 + 24;
      *(_QWORD *)(v760 + 8) = v761;
      *v759 = v761;
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v694, v757, (llvm::Value *)1);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v870, v694);
      v762 = (void *)*((_QWORD *)v757 + 5);
      LODWORD(v877) = 0;
      v875 = 0;
      v876 = 0;
      v763 = *((_QWORD *)v757 + 1);
      v867 = v762;
      if (!v763)
      {
LABEL_1129:
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)v762 + 40, (uint64_t ***)v757);
        v795 = *((_QWORD *)v757 + 3);
        v796 = (_QWORD *)*((_QWORD *)v757 + 4);
        *v796 = v795;
        *(_QWORD *)(v795 + 8) = v796;
        *((_QWORD *)v757 + 3) = 0;
        *((_QWORD *)v757 + 4) = 0;
        llvm::Value::deleteValue(v757);
        goto LABEL_1130;
      }
      while (2)
      {
        v767 = (_QWORD *)(v763 + 8);
        v768 = *(_QWORD *)(v763 + 8);
        v769 = *(_QWORD *)(v763 + 24);
        if (*(_BYTE *)(v769 + 16) != 83)
        {
          v770 = *(void **)(v769 + 40);
          v888 = v770;
          if (v770 != v762)
          {
            if (!(_DWORD)v877)
            {
              v778 = 0;
              goto LABEL_1104;
            }
            v771 = (v877 - 1) & ((v770 >> 4) ^ (v770 >> 9));
            v772 = (_QWORD *)((char *)v875 + 16 * v771);
            v773 = (void *)*v772;
            if (v770 != (void *)*v772)
            {
              v774 = 0;
              v775 = 1;
              while (v773 != (void *)-4096)
              {
                if (v774)
                  v776 = 0;
                else
                  v776 = v773 == (void *)-8192;
                if (v776)
                  v774 = v772;
                v777 = v771 + v775++;
                v771 = v777 & (v877 - 1);
                v772 = (_QWORD *)((char *)v875 + 16 * v771);
                v773 = (void *)*v772;
                if (v770 == (void *)*v772)
                  goto LABEL_1105;
              }
              if (v774)
                v778 = v774;
              else
                v778 = v772;
LABEL_1104:
              v772 = sub_1C4775118((uint64_t)&v875, (uint64_t)&v888, (uint64_t *)&v888, v778);
              *v772 = v888;
              v772[1] = 0;
            }
LABEL_1105:
            v779 = v772[1];
            if (!v779)
            {
              v764 = (uint64_t *)((char *)v888 + 40);
              for (m = (uint64_t *)*((_QWORD *)v888 + 6); m != v764; m = (uint64_t *)m[1])
              {
                v781 = m - 3;
                if (!m)
                  v781 = 0;
                if (*((_BYTE *)v781 + 16) != 83)
                {
                  v782 = *((unsigned __int8 *)m - 8) - 38;
                  v385 = v782 > 0x38;
                  v783 = (1 << v782) & 0x100060000000001;
                  if (v385 || v783 == 0)
                    v764 = m;
                  else
                    v764 = (uint64_t *)m[1];
                  break;
                }
              }
              v785 = v757;
              llvm::Instruction::clone(v757);
              v787 = (llvm::Value *)v786;
              v772[1] = v786;
              v788 = v888;
              *(_QWORD *)(v786 + 40) = v888;
              v788[9] &= ~0x8000u;
              if ((*(_BYTE *)(v786 + 23) & 0x10) != 0)
              {
                v765 = *((_QWORD *)v788 + 7);
                if (v765)
                {
                  v766 = *(llvm::ValueSymbolTable **)(v765 + 104);
                  if (v766)
                    llvm::ValueSymbolTable::reinsertValue(v766, v787);
                }
              }
              v789 = *v764;
              *((_QWORD *)v787 + 3) = *v764;
              *((_QWORD *)v787 + 4) = v764;
              v790 = (_QWORD *)((char *)v787 + 24);
              *(_QWORD *)(v789 + 8) = v790;
              *v764 = (uint64_t)v790;
              v779 = v772[1];
              v667 = v850;
              v757 = v785;
              v762 = v867;
            }
            if (*(_QWORD *)v763)
            {
              **(_QWORD **)(v763 + 16) = *(_QWORD *)(v763 + 8);
              v791 = *(_QWORD *)(v763 + 8);
              if (v791)
                *(_QWORD *)(v791 + 16) = *(_QWORD *)(v763 + 16);
            }
            *(_QWORD *)v763 = v779;
            if (v779)
            {
              v794 = *(_QWORD *)(v779 + 8);
              v792 = (_QWORD *)(v779 + 8);
              v793 = v794;
              *v767 = v794;
              if (v794)
                *(_QWORD *)(v793 + 16) = v767;
              *(_QWORD *)(v763 + 16) = v792;
              *v792 = v763;
            }
          }
        }
        v763 = v768;
        if (v768)
          continue;
        break;
      }
      if (!*((_QWORD *)v757 + 1))
      {
        v762 = (void *)*((_QWORD *)v757 + 5);
        goto LABEL_1129;
      }
LABEL_1130:
      MEMORY[0x1CAA32FB4](v875, 8);
      if (v893 != (unsigned __int8 *)v895)
        free(v893);
      LOBYTE(v857) = 1;
LABEL_1133:
      ;
    }
    while (v691 != v690);
LABEL_1143:
    v688 = *(_QWORD *)(v688 + 8);
  }
  while (v688 != v853);
LABEL_1144:
  v800 = v870;
  v799 = (unint64_t *)v871;
  v802 = v872;
  v801 = HIDWORD(v872);
  if (v871 == (char *)v870)
    v803 = HIDWORD(v872);
  else
    v803 = v872;
  v804 = v871;
  v805 = v857;
  if ((_DWORD)v803)
  {
    v806 = 0;
    while (*(_QWORD *)&v871[v806] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v806 += 8;
      if (8 * v803 == v806)
        goto LABEL_1169;
    }
    v804 = &v871[v806];
  }
  v807 = &v871[8 * v803];
  if (v804 != v807)
  {
    v808 = *(_QWORD *)v804;
LABEL_1155:
    v809 = *(_DWORD *)(v808 + 20);
    if ((v809 & 0x40000000) != 0)
    {
      v811 = *(_QWORD *)(v808 - 8);
      v810 = v809 & 0x7FFFFFF;
      if (v810)
        goto LABEL_1157;
    }
    else
    {
      v810 = v809 & 0x7FFFFFF;
      v811 = v808 - 32 * v810;
      if (v810)
      {
LABEL_1157:
        v812 = 32 * v810;
        v813 = (_QWORD **)(v811 + 16);
        do
        {
          if (*(v813 - 2))
          {
            **v813 = *(v813 - 1);
            v814 = (uint64_t)*(v813 - 1);
            if (v814)
              *(_QWORD *)(v814 + 16) = *v813;
          }
          *(v813 - 2) = 0;
          v813 += 4;
          v812 -= 32;
        }
        while (v812);
      }
    }
    v815 = (unint64_t *)(v804 + 8);
    while (v815 != (unint64_t *)v807)
    {
      v816 = *v815++;
      v808 = v816;
      if (v816 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v804 = (char *)(v815 - 1);
        goto LABEL_1155;
      }
    }
    v800 = v870;
    v799 = (unint64_t *)v871;
    v802 = v872;
    v801 = HIDWORD(v872);
  }
LABEL_1169:
  if (v799 == v800)
    v817 = v801;
  else
    v817 = v802;
  v818 = v799;
  if ((_DWORD)v817)
  {
    v819 = 0;
    while (v799[v819] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v817 == ++v819)
        goto LABEL_1185;
    }
    v818 = &v799[v819];
  }
  v820 = &v799[v817];
  if (v818 != v820)
  {
    v821 = *v818;
LABEL_1180:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v821 + 40) + 40, (uint64_t ***)v821);
    v822 = *(_QWORD *)(v821 + 24);
    v823 = *(_QWORD **)(v821 + 32);
    *v823 = v822;
    *(_QWORD *)(v822 + 8) = v823;
    *(_QWORD *)(v821 + 24) = 0;
    *(_QWORD *)(v821 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v821);
    v824 = v818 + 1;
    while (v824 != v820)
    {
      v825 = *v824++;
      v821 = v825;
      if (v825 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v818 = v824 - 1;
        goto LABEL_1180;
      }
    }
    v800 = v870;
    v799 = (unint64_t *)v871;
    v805 = v857;
  }
LABEL_1185:
  if (v799 == v800)
  {
LABEL_1186:
    HIDWORD(v872) = 0;
    v873 = 0;
    goto LABEL_1187;
  }
  if (v872 < 0x21 || 4 * (HIDWORD(v872) - v873) >= v872)
  {
    memset(v799, 255, 8 * v872);
    goto LABEL_1186;
  }
  free(v799);
  v832 = 1 << (33 - __clz(HIDWORD(v872) - v873 - 1));
  v385 = (HIDWORD(v872) - v873) > 0x10;
  HIDWORD(v872) = 0;
  v873 = 0;
  if (v385)
    v833 = v832;
  else
    v833 = 32;
  LODWORD(v872) = v833;
  v834 = (char *)malloc_type_malloc(8 * v833, 0x4065EBACuLL);
  if (!v834)
LABEL_1212:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v871 = v834;
  memset(v834, 255, 8 * v872);
LABEL_1187:
  if (v871 != (char *)v870)
    free(v871);
  return v805 & 1;
}

void *sub_1C4771E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *result;

  v5 = *(_QWORD **)a2;
  v6 = *(unsigned int *)(a2 + 8);
  v7 = *(_QWORD **)a2;
  if ((_DWORD)v6)
  {
    v8 = 8 * v6;
    v7 = *(_QWORD **)a2;
    while (*v7 != a3)
    {
      ++v7;
      v8 -= 8;
      if (!v8)
      {
        v7 = &v5[v6];
        break;
      }
    }
  }
  if (v6 == v7 - v5)
  {
    if (v6 >= *(_DWORD *)(a2 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v6 + 1, 8);
      v5 = *(_QWORD **)a2;
      v6 = *(unsigned int *)(a2 + 8);
    }
    v5[v6] = a3;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t sub_1C4771F04(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  llvm::ConstantFP ***v5;
  int v6;
  llvm::APFloatBase *v7;
  BOOL v8;
  llvm::ConstantFP **v9;
  char v10;
  int v11;
  _BOOL4 v13;
  uint64_t v15;
  uint64_t *v16;
  llvm::ConstantFP **v17;
  unint64_t v18;
  uint64_t v19;
  const llvm::APFloat *v20;
  uint64_t *v21;
  llvm::APFloatBase *v23;
  char v24;
  char v25[8];
  llvm::ConstantFP **v26;
  uint64_t *v27;
  int v28;
  char v29;
  uint64_t v30;

  v2 = 0;
  v30 = *MEMORY[0x1E0C80C00];
  v3 = 1;
  while (1)
  {
    v4 = v3;
    v5 = *(llvm::ConstantFP ****)(a1 + 8 * v2);
    v6 = *((unsigned __int8 *)v5 + 16);
    if (v5 && v6 == 74)
    {
      v7 = (llvm::APFloatBase *)*(v5 - 4);
      if (*(_BYTE *)(*(_QWORD *)v7 + 8))
        return 0;
      goto LABEL_44;
    }
    v8 = v5 && v6 == 17;
    if (!v8 || !*((_BYTE *)*v5 + 8))
      return 0;
    v9 = v5[4];
    if (v9 == (llvm::ConstantFP **)&unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v26, (const llvm::detail::DoubleAPFloat *)(v5 + 4));
    }
    else
    {
      v26 = v5[4];
      if ((*((_DWORD *)v9 + 2) + 64) >= 0x80)
        v27 = (uint64_t *)operator new[]();
      v10 = *((_BYTE *)v5 + 52);
      v11 = v10 & 7;
      v29 = v29 & 0xF0 | v10 & 0xF;
      v28 = *((_DWORD *)v5 + 12);
      v13 = (v10 & 6) != 0 && v11 != 3;
      if (v11 == 1 || v13)
      {
        v15 = *((unsigned int *)v26 + 2);
        v16 = (uint64_t *)&v27;
        if ((v15 - 64) <= 0xFFFFFF7F)
          v16 = v27;
        v17 = (llvm::ConstantFP **)(v5 + 5);
        if ((*((_DWORD *)v5[4] + 2) - 64) < 0xFFFFFF80)
          v17 = v5[5];
        if (v15 <= 0xFFFFFFBF)
        {
          v18 = (unint64_t)(v15 + 64) >> 6;
          do
          {
            v19 = (uint64_t)*v17++;
            *v16++ = v19;
            --v18;
          }
          while (v18);
        }
      }
    }
    v24 = 0;
    if (llvm::APFloat::convert((uint64_t)v25, &unk_1C866F15C, 1, &v24)
      || v24
      || sub_1C4773C58((uint64_t)v25)
      || (v26 != (llvm::ConstantFP **)&unk_1C866F1C0 ? (v21 = (uint64_t *)v25) : (v21 = v27),
          (*((_BYTE *)v21 + 28) & 7) == 0))
    {
      v7 = (llvm::APFloatBase *)v5;
    }
    else
    {
      v7 = llvm::ConstantFP::get(**v5, (llvm::LLVMContext *)v25, v20);
    }
    if (v26 == (llvm::ConstantFP **)&unk_1C866F1C0)
    {
      v23 = v7;
      sub_1C4773C74((uint64_t *)&v27);
LABEL_50:
      v7 = v23;
      goto LABEL_43;
    }
    if ((*((_DWORD *)v26 + 2) - 64) <= 0xFFFFFF7F && v27)
    {
      v23 = v7;
      MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
      goto LABEL_50;
    }
LABEL_43:
    if (v7 == (llvm::APFloatBase *)v5)
      return 0;
LABEL_44:
    v3 = 0;
    *(_QWORD *)(a1 + 8 * v2) = v7;
    v2 = 1;
    if ((v4 & 1) == 0)
      return v2;
  }
}

unsigned __int8 *sub_1C47721A0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 100))
    return (unsigned __int8 *)llvm::IRBuilderBase::CreateConstrainedFPCast(a1, 91, a2, a3, 0, a4, 0, 0, 0);
  else
    return sub_1C4773E38((uint64_t *)a1, 46, (unsigned __int8 *)a2, (uint64_t)a3, a4);
}

uint64_t sub_1C47721F8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, llvm::MDNode *a5)
{
  llvm::MDNode *v5;
  unsigned __int8 *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  _QWORD v29[4];
  __int16 v30;

  v5 = a5;
  if (!*(_BYTE *)(a1 + 100))
  {
    v10 = sub_1C477422C((uint64_t *)a1, 21, (uint64_t)a2, a3, a4);
    if (v10)
      return (uint64_t)v10;
    v30 = 257;
    v11 = (char *)operator new(0x80uLL);
    v12 = v11;
    *((_QWORD *)v11 + 8) = *a2;
    v10 = (unsigned __int8 *)(v11 + 64);
    *((_QWORD *)v11 + 3) = v11 + 64;
    *((_QWORD *)v11 + 5) = 0;
    v13 = v11 + 40;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = v11 + 64;
    *((_QWORD *)v11 + 9) = 0;
    *((_QWORD *)v11 + 10) = 0x200000031;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_DWORD *)v11 + 30) = 0;
    *(_QWORD *)v11 = a2;
    v16 = a2[1];
    v15 = a2 + 1;
    v14 = v16;
    *((_QWORD *)v11 + 1) = v16;
    if (v16)
      *(_QWORD *)(v14 + 16) = v11 + 8;
    *((_QWORD *)v11 + 2) = v15;
    *v15 = v11;
    *((_QWORD *)v11 + 4) = a3;
    if (a3)
    {
      v19 = *(_QWORD *)(a3 + 8);
      v18 = (_QWORD *)(a3 + 8);
      v17 = v19;
      *v13 = v19;
      if (v19)
        *(_QWORD *)(v17 + 16) = v13;
      *((_QWORD *)v11 + 6) = v18;
      *v18 = v11 + 32;
    }
    llvm::Value::setName((uint64_t ***)v11 + 8, (uint64_t)v29);
    v20 = *(_DWORD *)(a1 + 96);
    if (v5 || (v5 = *(llvm::MDNode **)(a1 + 88)) != 0)
      llvm::Value::setMetadata((llvm::Value *)v10, 3, v5);
    v12[81] |= 2 * (_BYTE)v20;
    (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v10, a4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v21 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v21)
      return (uint64_t)v10;
    v23 = *(_QWORD *)a1;
    v24 = *(_QWORD *)a1 + 16 * v21;
    while (1)
    {
      v25 = *(_DWORD *)v23;
      v26 = *(unsigned __int8 **)(v23 + 8);
      if (v26)
      {
        if (!v25)
        {
          v29[0] = *(_QWORD *)(v23 + 8);
          llvm::MetadataTracking::track((uint64_t)v29, v26, 2);
          v27 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
          goto LABEL_24;
        }
      }
      else
      {
        v27 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
        if (!v27 && (v12[87] & 0x20) == 0)
          goto LABEL_21;
        if (!v25)
        {
          v29[0] = 0;
LABEL_24:
          if (v27)
            llvm::MetadataTracking::untrack((uint64_t)(v12 + 112), v27);
          v28 = (unsigned __int8 *)v29[0];
          *((_QWORD *)v12 + 14) = v29[0];
          if (v28)
            llvm::MetadataTracking::retrack((uint64_t)v29, v28, (uint64_t)(v12 + 112));
          goto LABEL_21;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v10, *(_DWORD *)v23, (llvm::MDNode *)v26);
LABEL_21:
      v23 += 16;
      if (v23 == v24)
        return (uint64_t)v10;
    }
  }
  return llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 86, a2, a3, 0, a4, a5, 0, 0);
}

uint64_t sub_1C4772428(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, llvm::MDNode *a5)
{
  llvm::MDNode *v5;
  unsigned __int8 *v10;
  char *v11;
  char *v12;
  llvm::Value *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  _QWORD v30[4];
  __int16 v31;

  v5 = a5;
  if (!*(_BYTE *)(a1 + 100))
  {
    v10 = sub_1C477422C((uint64_t *)a1, 18, (uint64_t)a2, a3, a4);
    if (v10)
      return (uint64_t)v10;
    v31 = 257;
    v11 = (char *)operator new(0x80uLL);
    v12 = v11;
    *((_QWORD *)v11 + 8) = *a2;
    v13 = (llvm::Value *)(v11 + 64);
    *((_QWORD *)v11 + 3) = v11 + 64;
    *((_QWORD *)v11 + 5) = 0;
    v14 = v11 + 40;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = v11 + 64;
    *((_QWORD *)v11 + 9) = 0;
    *((_QWORD *)v11 + 10) = 0x20000002ELL;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_DWORD *)v11 + 30) = 0;
    *(_QWORD *)v11 = a2;
    v17 = a2[1];
    v16 = a2 + 1;
    v15 = v17;
    *((_QWORD *)v11 + 1) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v11 + 8;
    *((_QWORD *)v11 + 2) = v16;
    *v16 = v11;
    *((_QWORD *)v11 + 4) = a3;
    if (a3)
    {
      v20 = *(_QWORD *)(a3 + 8);
      v19 = (_QWORD *)(a3 + 8);
      v18 = v20;
      *v14 = v20;
      if (v20)
        *(_QWORD *)(v18 + 16) = v14;
      *((_QWORD *)v11 + 6) = v19;
      *v19 = v11 + 32;
    }
    llvm::Value::setName((uint64_t ***)v11 + 8, (uint64_t)v30);
    v21 = *(_DWORD *)(a1 + 96);
    if (v5 || (v5 = *(llvm::MDNode **)(a1 + 88)) != 0)
      llvm::Value::setMetadata(v13, 3, v5);
    v12[81] |= 2 * (_BYTE)v21;
    (*(void (**)(_QWORD, llvm::Value *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v13, a4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v22 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v22)
      return (uint64_t)v13;
    v24 = *(_QWORD *)a1;
    v25 = *(_QWORD *)a1 + 16 * v22;
    while (1)
    {
      v26 = *(_DWORD *)v24;
      v27 = *(unsigned __int8 **)(v24 + 8);
      if (v27)
      {
        if (!v26)
        {
          v30[0] = *(_QWORD *)(v24 + 8);
          llvm::MetadataTracking::track((uint64_t)v30, v27, 2);
          v28 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
          goto LABEL_24;
        }
      }
      else
      {
        v28 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
        if (!v28 && (v12[87] & 0x20) == 0)
          goto LABEL_21;
        if (!v26)
        {
          v30[0] = 0;
LABEL_24:
          if (v28)
            llvm::MetadataTracking::untrack((uint64_t)(v12 + 112), v28);
          v29 = (unsigned __int8 *)v30[0];
          *((_QWORD *)v12 + 14) = v30[0];
          if (v29)
            llvm::MetadataTracking::retrack((uint64_t)v30, v29, (uint64_t)(v12 + 112));
          goto LABEL_21;
        }
      }
      llvm::Value::setMetadata(v13, *(_DWORD *)v24, (llvm::MDNode *)v27);
LABEL_21:
      v24 += 16;
      if (v24 == v25)
        return (uint64_t)v13;
    }
  }
  return llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 89, a2, a3, 0, a4, a5, 0, 0);
}

uint64_t sub_1C477265C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, llvm::MDNode *a5)
{
  llvm::MDNode *v5;
  unsigned __int8 *v10;
  char *v11;
  char *v12;
  llvm::Value *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  _QWORD v30[4];
  __int16 v31;

  v5 = a5;
  if (!*(_BYTE *)(a1 + 100))
  {
    v10 = sub_1C477422C((uint64_t *)a1, 16, (uint64_t)a2, a3, a4);
    if (v10)
      return (uint64_t)v10;
    v31 = 257;
    v11 = (char *)operator new(0x80uLL);
    v12 = v11;
    *((_QWORD *)v11 + 8) = *a2;
    v13 = (llvm::Value *)(v11 + 64);
    *((_QWORD *)v11 + 3) = v11 + 64;
    *((_QWORD *)v11 + 5) = 0;
    v14 = v11 + 40;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = v11 + 64;
    *((_QWORD *)v11 + 9) = 0;
    *((_QWORD *)v11 + 10) = 0x20000002CLL;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_DWORD *)v11 + 30) = 0;
    *(_QWORD *)v11 = a2;
    v17 = a2[1];
    v16 = a2 + 1;
    v15 = v17;
    *((_QWORD *)v11 + 1) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v11 + 8;
    *((_QWORD *)v11 + 2) = v16;
    *v16 = v11;
    *((_QWORD *)v11 + 4) = a3;
    if (a3)
    {
      v20 = *(_QWORD *)(a3 + 8);
      v19 = (_QWORD *)(a3 + 8);
      v18 = v20;
      *v14 = v20;
      if (v20)
        *(_QWORD *)(v18 + 16) = v14;
      *((_QWORD *)v11 + 6) = v19;
      *v19 = v11 + 32;
    }
    llvm::Value::setName((uint64_t ***)v11 + 8, (uint64_t)v30);
    v21 = *(_DWORD *)(a1 + 96);
    if (v5 || (v5 = *(llvm::MDNode **)(a1 + 88)) != 0)
      llvm::Value::setMetadata(v13, 3, v5);
    v12[81] |= 2 * (_BYTE)v21;
    (*(void (**)(_QWORD, llvm::Value *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v13, a4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v22 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v22)
      return (uint64_t)v13;
    v24 = *(_QWORD *)a1;
    v25 = *(_QWORD *)a1 + 16 * v22;
    while (1)
    {
      v26 = *(_DWORD *)v24;
      v27 = *(unsigned __int8 **)(v24 + 8);
      if (v27)
      {
        if (!v26)
        {
          v30[0] = *(_QWORD *)(v24 + 8);
          llvm::MetadataTracking::track((uint64_t)v30, v27, 2);
          v28 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
          goto LABEL_24;
        }
      }
      else
      {
        v28 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
        if (!v28 && (v12[87] & 0x20) == 0)
          goto LABEL_21;
        if (!v26)
        {
          v30[0] = 0;
LABEL_24:
          if (v28)
            llvm::MetadataTracking::untrack((uint64_t)(v12 + 112), v28);
          v29 = (unsigned __int8 *)v30[0];
          *((_QWORD *)v12 + 14) = v30[0];
          if (v29)
            llvm::MetadataTracking::retrack((uint64_t)v30, v29, (uint64_t)(v12 + 112));
          goto LABEL_21;
        }
      }
      llvm::Value::setMetadata(v13, *(_DWORD *)v24, (llvm::MDNode *)v27);
LABEL_21:
      v24 += 16;
      if (v24 == v25)
        return (uint64_t)v13;
    }
  }
  return llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 96, a2, a3, 0, a4, a5, 0, 0);
}

unsigned __int8 *sub_1C4772890(uint64_t *a1, uint64_t a2, uint64_t a3, llvm::MDNode *a4)
{
  unsigned __int8 *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 **v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  llvm::Value *v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 **v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26[4];
  __int16 v27;
  unsigned __int8 *v28;

  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u)
  {
    v27 = 257;
    v16 = (llvm::Value *)llvm::UnaryOperator::Create(12, (uint64_t *)a2, (uint64_t)v26, 0);
    v7 = (unsigned __int8 *)v16;
    v17 = *((_DWORD *)a1 + 24);
    if (a4 || (a4 = (llvm::MDNode *)a1[11]) != 0)
      llvm::Value::setMetadata(v16, 3, a4);
    v7[17] |= 2 * (_BYTE)v17;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v7, a3, a1[6], a1[7]);
    v18 = *((unsigned int *)a1 + 2);
    if (!(_DWORD)v18)
      return v7;
    v20 = *a1;
    v21 = *a1 + 16 * v18;
    v22 = (unsigned __int8 **)(v7 + 48);
    while (1)
    {
      v23 = *(_DWORD *)v20;
      v24 = *(unsigned __int8 **)(v20 + 8);
      if (v24)
      {
        if (!v23)
        {
          v28 = *(unsigned __int8 **)(v20 + 8);
          llvm::MetadataTracking::track((uint64_t)&v28, v24, 2);
LABEL_43:
          if (&v28 == v22)
          {
            if (v28)
              llvm::MetadataTracking::untrack((uint64_t)&v28, v28);
          }
          else
          {
            if (*v22)
              llvm::MetadataTracking::untrack((uint64_t)(v7 + 48), *v22);
            v25 = v28;
            *v22 = v28;
            if (v25)
              llvm::MetadataTracking::retrack((uint64_t)&v28, v25, (uint64_t)(v7 + 48));
          }
          goto LABEL_40;
        }
      }
      else
      {
        if (!*v22 && (v7[23] & 0x20) == 0)
          goto LABEL_40;
        if (!v23)
        {
          v28 = 0;
          goto LABEL_43;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v7, v23, (llvm::MDNode *)v24);
LABEL_40:
      v20 += 16;
      if (v20 == v21)
        return v7;
    }
  }
  v7 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[9] + 200))(a1[9]);
  if (v7)
    v8 = v7[16] >= 0x1Cu;
  else
    v8 = 0;
  if (v8)
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v7, a3, a1[6], a1[7]);
    v9 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v9)
    {
      v10 = *a1;
      v11 = *a1 + 16 * v9;
      v12 = (unsigned __int8 **)(v7 + 48);
      do
      {
        v13 = *(_DWORD *)v10;
        v14 = *(unsigned __int8 **)(v10 + 8);
        if (v14)
        {
          if (!v13)
          {
            v26[0] = *(unsigned __int8 **)(v10 + 8);
            llvm::MetadataTracking::track((uint64_t)v26, v14, 2);
LABEL_20:
            if (v26 == v12)
            {
              if (v26[0])
                llvm::MetadataTracking::untrack((uint64_t)v26, v26[0]);
            }
            else
            {
              if (*v12)
                llvm::MetadataTracking::untrack((uint64_t)(v7 + 48), *v12);
              v15 = v26[0];
              *v12 = v26[0];
              if (v15)
                llvm::MetadataTracking::retrack((uint64_t)v26, v15, (uint64_t)(v7 + 48));
            }
            goto LABEL_17;
          }
        }
        else
        {
          if (!*v12 && (v7[23] & 0x20) == 0)
            goto LABEL_17;
          if (!v13)
          {
            v26[0] = 0;
            goto LABEL_20;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v7, v13, (llvm::MDNode *)v14);
LABEL_17:
        v10 += 16;
      }
      while (v10 != v11);
    }
  }
  return v7;
}

uint64_t sub_1C4772AFC(uint64_t a1, double a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];
  int v6;
  char v7;
  const llvm::APInt *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  LODWORD(v9) = 64;
  v8 = *(const llvm::APInt **)&a2;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v5, &v8);
  v9 = v5[0];
  v10 = v5[1];
  v11 = v6;
  v12 = v7 & 0xF;
  llvm::APFloat::convert((uint64_t)&v8, *(void **)(a1 + 32), 1, v5);
  result = sub_1C47ECB98(a1 + 24, (uint64_t)&v8);
  if ((_UNKNOWN *)v9 == &unk_1C866F1C0)
  {
    v4 = result;
    sub_1C4773C74(&v10);
    return v4;
  }
  if ((*(_DWORD *)(v9 + 8) - 64) <= 0xFFFFFF7F && v10)
  {
    v4 = result;
    MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
    return v4;
  }
  return result;
}

uint64_t ***sub_1C4772C18(uint64_t *a1, llvm::GetElementPtrInst *a2, _QWORD *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9;
  llvm::ConstantInt *v10;
  unint64_t v11;
  int v12;
  llvm::ValueHandleBase *v13;
  uint64_t ***v14;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  __int16 v33;
  llvm::ValueHandleBase *v34;
  unsigned __int8 *v35;

  v9 = *(_QWORD *)a1[8];
  v10 = *(llvm::ConstantInt **)(v9 + 1960);
  v11 = *(unsigned int *)(v9 + 1968);
  v32 = v11 >> 8;
  if (v11 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v31, a4, 0);
  }
  else
  {
    if (v11 <= 0xFF)
      v12 = 0;
    else
      v12 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11);
    v31 = v12 & a4;
  }
  v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v31, (const llvm::APInt *)a3);
  if (v32 >= 0x41 && v31)
    MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
  v34 = v13;
  v14 = (uint64_t ***)(*(uint64_t (**)(uint64_t, llvm::GetElementPtrInst *, _QWORD *, llvm::ValueHandleBase **, uint64_t, uint64_t))(*(_QWORD *)a1[9] + 48))(a1[9], a2, a3, &v34, 1, 1);
  if (!v14)
  {
    v33 = 257;
    v16 = (char *)operator new(0x90uLL);
    *((_DWORD *)v16 + 21) = *((_DWORD *)v16 + 21) & 0x38000000 | 2;
    v14 = (uint64_t ***)(v16 + 64);
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = v16 + 64;
    *((_QWORD *)v16 + 4) = 0;
    *((_QWORD *)v16 + 5) = 0;
    *((_QWORD *)v16 + 6) = 0;
    *((_QWORD *)v16 + 7) = v16 + 64;
    sub_1C4774650(a2, a3, (llvm::Value *)&v34, 1);
    *((_QWORD *)v16 + 8) = v17;
    *((_QWORD *)v16 + 9) = 0;
    v18 = *((_DWORD *)v16 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v16 + 20) = 62;
    *((_DWORD *)v16 + 21) = v18;
    *(_OWORD *)(v16 + 88) = 0u;
    *(_OWORD *)(v16 + 104) = 0u;
    *((_DWORD *)v16 + 30) = 0;
    v19 = *(_QWORD *)v16;
    *((_QWORD *)v16 + 16) = a2;
    *((_QWORD *)v16 + 17) = a2;
    if (v19)
    {
      **((_QWORD **)v16 + 2) = *((_QWORD *)v16 + 1);
      v30 = *((_QWORD *)v16 + 1);
      if (v30)
        *(_QWORD *)(v30 + 16) = *((_QWORD *)v16 + 2);
    }
    *(_QWORD *)v16 = a3;
    if (a3)
    {
      v22 = a3[1];
      v21 = a3 + 1;
      v20 = v22;
      *((_QWORD *)v16 + 1) = v22;
      if (v22)
        *(_QWORD *)(v20 + 16) = v16 + 8;
      *((_QWORD *)v16 + 2) = v21;
      *v21 = v16;
    }
    sub_1C5382FD4((uint64_t)&v35, (uint64_t *)&v34, (uint64_t *)&v35, (uint64_t)&v14[-4 * (*((_DWORD *)v16 + 21) & 0x7FFFFFF) + 4]);
    llvm::Value::setName(v14, (uint64_t)&v31);
    v16[81] |= 2u;
    (*(void (**)(uint64_t, uint64_t ***, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v14, a5, a1[6], a1[7]);
    v23 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v23)
    {
      v24 = *a1;
      v25 = *a1 + 16 * v23;
      do
      {
        v26 = *(_DWORD *)v24;
        v27 = *(unsigned __int8 **)(v24 + 8);
        if (v27)
        {
          if (!v26)
          {
            v35 = *(unsigned __int8 **)(v24 + 8);
            llvm::MetadataTracking::track((uint64_t)&v35, v27, 2);
            v28 = (unsigned __int8 *)*((_QWORD *)v16 + 14);
            goto LABEL_29;
          }
        }
        else
        {
          v28 = (unsigned __int8 *)*((_QWORD *)v16 + 14);
          if (!v28 && (v16[87] & 0x20) == 0)
            goto LABEL_23;
          if (!v26)
          {
            v35 = 0;
LABEL_29:
            if (v28)
              llvm::MetadataTracking::untrack((uint64_t)(v16 + 112), v28);
            v29 = v35;
            *((_QWORD *)v16 + 14) = v35;
            if (v29)
              llvm::MetadataTracking::retrack((uint64_t)&v35, v29, (uint64_t)(v16 + 112));
            goto LABEL_23;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v14, *(_DWORD *)v24, (llvm::MDNode *)v27);
LABEL_23:
        v24 += 16;
      }
      while (v24 != v25);
    }
  }
  return v14;
}

unsigned __int8 *sub_1C4772EE0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 **v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27[4];
  __int16 v28;
  unsigned __int8 *v29;

  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u || !a3 || *(unsigned __int8 *)(a3 + 16) > 0x14u)
  {
    v28 = 257;
    v17 = (char *)operator new(0x80uLL);
    *((_DWORD *)v17 + 21) = *((_DWORD *)v17 + 21) & 0x38000000 | 2;
    v8 = (unsigned __int8 *)(v17 + 64);
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = 0;
    *((_QWORD *)v17 + 3) = v17 + 64;
    *((_QWORD *)v17 + 4) = 0;
    *((_QWORD *)v17 + 5) = 0;
    *((_QWORD *)v17 + 6) = 0;
    *((_QWORD *)v17 + 7) = v17 + 64;
    llvm::ExtractElementInst::ExtractElementInst((uint64_t)(v17 + 64), (_QWORD *)a2, a3, (uint64_t)v27, 0);
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v17 + 64, a4, a1[6], a1[7]);
    v18 = *((unsigned int *)a1 + 2);
    if (!(_DWORD)v18)
      return v8;
    v20 = *a1;
    v21 = *a1 + 16 * v18;
    v22 = (unsigned __int8 **)(v17 + 112);
    while (1)
    {
      v23 = *(_DWORD *)v20;
      v24 = *(unsigned __int8 **)(v20 + 8);
      if (v24)
      {
        if (!v23)
        {
          v29 = *(unsigned __int8 **)(v20 + 8);
          llvm::MetadataTracking::track((uint64_t)&v29, v24, 2);
          v25 = *v22;
          goto LABEL_42;
        }
      }
      else
      {
        v25 = *v22;
        if (!*v22 && (v17[87] & 0x20) == 0)
          goto LABEL_39;
        if (!v23)
        {
          v29 = 0;
LABEL_42:
          if (v25)
            llvm::MetadataTracking::untrack((uint64_t)(v17 + 112), v25);
          v26 = v29;
          *v22 = v29;
          if (v26)
            llvm::MetadataTracking::retrack((uint64_t)&v29, v26, (uint64_t)(v17 + 112));
          goto LABEL_39;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v8, *(_DWORD *)v20, (llvm::MDNode *)v24);
LABEL_39:
      v20 += 16;
      if (v20 == v21)
        return v8;
    }
  }
  v8 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[9] + 320))(a1[9], a2, a3);
  if (v8)
    v9 = v8[16] >= 0x1Cu;
  else
    v9 = 0;
  if (v9)
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v8, a4, a1[6], a1[7]);
    v10 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v10)
    {
      v11 = *a1;
      v12 = v11 + 16 * v10;
      v13 = (unsigned __int8 **)(v8 + 48);
      do
      {
        v14 = *(_DWORD *)v11;
        v15 = *(unsigned __int8 **)(v11 + 8);
        if (v15)
        {
          if (!v14)
          {
            v27[0] = *(unsigned __int8 **)(v11 + 8);
            llvm::MetadataTracking::track((uint64_t)v27, v15, 2);
LABEL_22:
            if (v27 == v13)
            {
              if (v27[0])
                llvm::MetadataTracking::untrack((uint64_t)v27, v27[0]);
            }
            else
            {
              if (*v13)
                llvm::MetadataTracking::untrack((uint64_t)(v8 + 48), *v13);
              v16 = v27[0];
              *v13 = v27[0];
              if (v16)
                llvm::MetadataTracking::retrack((uint64_t)v27, v16, (uint64_t)(v8 + 48));
            }
            goto LABEL_19;
          }
        }
        else
        {
          if (!*v13 && (v8[23] & 0x20) == 0)
            goto LABEL_19;
          if (!v14)
          {
            v27[0] = 0;
            goto LABEL_22;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v8, v14, (llvm::MDNode *)v15);
LABEL_19:
        v11 += 16;
      }
      while (v11 != v12);
    }
  }
  return v8;
}

unsigned __int8 *sub_1C4773154(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 **v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32[4];
  __int16 v33;
  unsigned __int8 *v34;

  if (!a2
    || *(unsigned __int8 *)(a2 + 16) > 0x14u
    || !a3
    || *(unsigned __int8 *)(a3 + 16) > 0x14u
    || !a4
    || *(unsigned __int8 *)(a4 + 16) > 0x14u)
  {
    v33 = 257;
    v19 = (char *)operator new(0xA0uLL);
    v20 = v19;
    v21 = 0;
    v10 = (unsigned __int8 *)(v19 + 96);
    *((_DWORD *)v19 + 29) = *((_DWORD *)v19 + 29) & 0x38000000 | 3;
    do
    {
      v22 = &v19[v21];
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = 0;
      *((_QWORD *)v22 + 3) = v10;
      v21 += 32;
    }
    while (v21 != 96);
    llvm::InsertElementInst::InsertElementInst((uint64_t)(v19 + 96), (_QWORD *)a2, a3, a4, (uint64_t)v32, 0);
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v10, a5, a1[6], a1[7]);
    v23 = *((unsigned int *)a1 + 2);
    if (!(_DWORD)v23)
      return v10;
    v25 = *a1;
    v26 = *a1 + 16 * v23;
    v27 = (unsigned __int8 **)(v20 + 144);
    while (1)
    {
      v28 = *(_DWORD *)v25;
      v29 = *(unsigned __int8 **)(v25 + 8);
      if (v29)
      {
        if (!v28)
        {
          v34 = *(unsigned __int8 **)(v25 + 8);
          llvm::MetadataTracking::track((uint64_t)&v34, v29, 2);
          v30 = *v27;
          goto LABEL_46;
        }
      }
      else
      {
        v30 = *v27;
        if (!*v27 && (v20[119] & 0x20) == 0)
          goto LABEL_43;
        if (!v28)
        {
          v34 = 0;
LABEL_46:
          if (v30)
            llvm::MetadataTracking::untrack((uint64_t)(v20 + 144), v30);
          v31 = v34;
          *v27 = v34;
          if (v31)
            llvm::MetadataTracking::retrack((uint64_t)&v34, v31, (uint64_t)(v20 + 144));
          goto LABEL_43;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v10, *(_DWORD *)v25, (llvm::MDNode *)v29);
LABEL_43:
      v25 += 16;
      if (v25 == v26)
        return v10;
    }
  }
  v10 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[9] + 328))(a1[9], a2, a3, a4);
  if (v10)
    v11 = v10[16] >= 0x1Cu;
  else
    v11 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v10, a5, a1[6], a1[7]);
    v12 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v12)
    {
      v13 = *a1;
      v14 = v13 + 16 * v12;
      v15 = (unsigned __int8 **)(v10 + 48);
      do
      {
        v16 = *(_DWORD *)v13;
        v17 = *(unsigned __int8 **)(v13 + 8);
        if (v17)
        {
          if (!v16)
          {
            v32[0] = *(unsigned __int8 **)(v13 + 8);
            llvm::MetadataTracking::track((uint64_t)v32, v17, 2);
LABEL_24:
            if (v32 == v15)
            {
              if (v32[0])
                llvm::MetadataTracking::untrack((uint64_t)v32, v32[0]);
            }
            else
            {
              if (*v15)
                llvm::MetadataTracking::untrack((uint64_t)(v10 + 48), *v15);
              v18 = v32[0];
              *v15 = v32[0];
              if (v18)
                llvm::MetadataTracking::retrack((uint64_t)v32, v18, (uint64_t)(v10 + 48));
            }
            goto LABEL_21;
          }
        }
        else
        {
          if (!*v15 && (v10[23] & 0x20) == 0)
            goto LABEL_21;
          if (!v16)
          {
            v32[0] = 0;
            goto LABEL_24;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v10, v16, (llvm::MDNode *)v17);
LABEL_21:
        v13 += 16;
      }
      while (v13 != v14);
    }
  }
  return v10;
}

uint64_t sub_1C47733F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v8 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72)
                                                                                                  + 72))(*(_QWORD *)(a1 + 72), a2, a3, a5, a6);
    if (v8)
      v9 = v8[16] >= 0x1Cu;
    else
      v9 = 0;
    if (!v9)
      return (uint64_t)v8;
    (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v8, a4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v10 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v10)
      return (uint64_t)v8;
    v12 = *(_QWORD *)a1;
    v13 = *(_QWORD *)a1 + 16 * v10;
    v14 = (unsigned __int8 **)(v8 + 48);
    while (1)
    {
      v15 = *(_DWORD *)v12;
      v16 = *(unsigned __int8 **)(v12 + 8);
      if (v16)
      {
        if (!v15)
        {
          v18 = *(unsigned __int8 **)(v12 + 8);
          llvm::MetadataTracking::track((uint64_t)&v18, v16, 2);
LABEL_24:
          if (&v18 == v14)
          {
            if (v18)
              llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
          }
          else
          {
            if (*v14)
              llvm::MetadataTracking::untrack((uint64_t)(v8 + 48), *v14);
            v17 = v18;
            *v14 = v18;
            if (v17)
              llvm::MetadataTracking::retrack((uint64_t)&v18, v17, (uint64_t)(v8 + 48));
          }
          goto LABEL_21;
        }
      }
      else
      {
        if (!*v14 && (v8[23] & 0x20) == 0)
          goto LABEL_21;
        if (!v15)
        {
          v18 = 0;
          goto LABEL_24;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v8, v15, (llvm::MDNode *)v16);
LABEL_21:
      v12 += 16;
      if (v12 == v13)
        return (uint64_t)v8;
    }
  }
  return sub_1C4774D04((uint64_t *)a1, 15, (_QWORD *)a2, a3, a4, a5, a6);
}

uint64_t sub_1C4773594(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v18[32];
  __int16 v19;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72));
  if (!result)
  {
    v19 = 257;
    v9 = (char *)operator new(0x80uLL);
    *((_QWORD *)v9 + 8) = *a2;
    v10 = (uint64_t)(v9 + 64);
    *((_QWORD *)v9 + 3) = v9 + 64;
    *((_QWORD *)v9 + 5) = 0;
    v11 = v9 + 40;
    *((_QWORD *)v9 + 6) = 0;
    *((_QWORD *)v9 + 7) = v9 + 64;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0x200000039;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_DWORD *)v9 + 30) = 0;
    *(_QWORD *)v9 = a2;
    v14 = a2[1];
    v13 = a2 + 1;
    v12 = v14;
    *((_QWORD *)v9 + 1) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v9 + 8;
    *((_QWORD *)v9 + 2) = v13;
    *v13 = v9;
    *((_QWORD *)v9 + 4) = a3;
    if (a3)
    {
      v17 = *(_QWORD *)(a3 + 8);
      v16 = (_QWORD *)(a3 + 8);
      v15 = v17;
      *v11 = v17;
      if (v17)
        *(_QWORD *)(v15 + 16) = v11;
      *((_QWORD *)v9 + 6) = v16;
      *v16 = v9 + 32;
    }
    llvm::Value::setName((uint64_t ***)v9 + 8, (uint64_t)v18);
    return sub_1C4773754((uint64_t *)a1, v10, a4);
  }
  return result;
}

unsigned __int8 *sub_1C4773690(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v10;
  unsigned int v11;
  uint64_t v12;

  v8 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v8 = (llvm::Type *)**((_QWORD **)v8 + 2);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v8);
  v10 = (llvm::Type *)a3;
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
    v10 = **(llvm::Type ***)(a3 + 16);
  v11 = llvm::Type::getPrimitiveSizeInBits(v10);
  if (PrimitiveSizeInBits < v11)
  {
    v12 = 39;
    return sub_1C4773E38(a1, v12, a2, a3, a4);
  }
  if (PrimitiveSizeInBits > v11)
  {
    v12 = 38;
    return sub_1C4773E38(a1, v12, a2, a3, a4);
  }
  return a2;
}

uint64_t sub_1C4773754(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], a2, a3, a1[6], a1[7]);
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v7 = *a1;
    v8 = v7 + 16 * v5;
    do
    {
      v9 = *(_DWORD *)v7;
      v10 = *(unsigned __int8 **)(v7 + 8);
      if (v10)
      {
        if (!v9)
        {
          v13 = *(unsigned __int8 **)(v7 + 8);
          llvm::MetadataTracking::track((uint64_t)&v13, v10, 2);
LABEL_14:
          v11 = (unsigned __int8 **)(a2 + 48);
          if (&v13 == (unsigned __int8 **)(a2 + 48))
          {
            if (v13)
              llvm::MetadataTracking::untrack((uint64_t)&v13, v13);
          }
          else
          {
            if (*v11)
            {
              llvm::MetadataTracking::untrack(a2 + 48, *v11);
              v11 = (unsigned __int8 **)(a2 + 48);
            }
            v12 = v13;
            *v11 = v13;
            if (v12)
              llvm::MetadataTracking::retrack((uint64_t)&v13, v12, (uint64_t)v11);
          }
          goto LABEL_11;
        }
      }
      else
      {
        if (!*(_QWORD *)(a2 + 48) && (*(_BYTE *)(a2 + 23) & 0x20) == 0)
          goto LABEL_11;
        if (!v9)
        {
          v13 = 0;
          goto LABEL_14;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)a2, v9, (llvm::MDNode *)v10);
LABEL_11:
      v7 += 16;
    }
    while (v7 != v8);
  }
  return a2;
}

unsigned __int8 *sub_1C4773860(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, llvm::MDNode *a6)
{
  char v10;
  unsigned __int8 *v12;
  char *v13;
  char *v14;
  llvm::Value *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  _QWORD v32[4];
  __int16 v33;

  v10 = a2;
  v12 = sub_1C477422C((uint64_t *)a1, a2, (uint64_t)a3, a4, a5);
  if (v12)
    return v12;
  v33 = 257;
  v13 = (char *)operator new(0x80uLL);
  v14 = v13;
  *((_QWORD *)v13 + 8) = *a3;
  v15 = (llvm::Value *)(v13 + 64);
  *((_QWORD *)v13 + 3) = v13 + 64;
  *((_QWORD *)v13 + 5) = 0;
  v16 = v13 + 40;
  *((_QWORD *)v13 + 6) = 0;
  *((_QWORD *)v13 + 7) = v13 + 64;
  *((_QWORD *)v13 + 9) = 0;
  v13[80] = v10 + 28;
  v13[81] = 0;
  *((_WORD *)v13 + 41) = 0;
  *((_DWORD *)v13 + 21) = 2;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *((_DWORD *)v13 + 30) = 0;
  *(_QWORD *)v13 = a3;
  v19 = a3[1];
  v18 = a3 + 1;
  v17 = v19;
  *((_QWORD *)v13 + 1) = v19;
  if (v19)
    *(_QWORD *)(v17 + 16) = v13 + 8;
  *((_QWORD *)v13 + 2) = v18;
  *v18 = v13;
  *((_QWORD *)v13 + 4) = a4;
  if (a4)
  {
    v22 = *(_QWORD *)(a4 + 8);
    v21 = (_QWORD *)(a4 + 8);
    v20 = v22;
    *v16 = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = v16;
    *((_QWORD *)v13 + 6) = v21;
    *v21 = v13 + 32;
  }
  llvm::Value::setName((uint64_t ***)v13 + 8, (uint64_t)v32);
  if (sub_1C4774A9C((uint64_t)v15))
  {
    v25 = *(_DWORD *)(a1 + 96);
    if (a6 || (a6 = *(llvm::MDNode **)(a1 + 88)) != 0)
      llvm::Value::setMetadata(v15, 3, a6);
    v14[81] |= 2 * (_BYTE)v25;
  }
  (*(void (**)(_QWORD, llvm::Value *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v15, a5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v23 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v23)
  {
    v26 = *(_QWORD *)a1;
    v27 = *(_QWORD *)a1 + 16 * v23;
    do
    {
      v28 = *(_DWORD *)v26;
      v29 = *(unsigned __int8 **)(v26 + 8);
      if (v29)
      {
        if (!v28)
        {
          v32[0] = *(_QWORD *)(v26 + 8);
          llvm::MetadataTracking::track((uint64_t)v32, v29, 2);
          v30 = (unsigned __int8 *)*((_QWORD *)v14 + 14);
          goto LABEL_25;
        }
      }
      else
      {
        v30 = (unsigned __int8 *)*((_QWORD *)v14 + 14);
        if (!v30 && (v14[87] & 0x20) == 0)
          goto LABEL_22;
        if (!v28)
        {
          v32[0] = 0;
LABEL_25:
          if (v30)
            llvm::MetadataTracking::untrack((uint64_t)(v14 + 112), v30);
          v31 = (unsigned __int8 *)v32[0];
          *((_QWORD *)v14 + 14) = v32[0];
          if (v31)
            llvm::MetadataTracking::retrack((uint64_t)v32, v31, (uint64_t)(v14 + 112));
          goto LABEL_22;
        }
      }
      llvm::Value::setMetadata(v15, *(_DWORD *)v26, (llvm::MDNode *)v29);
LABEL_22:
      v26 += 16;
    }
    while (v26 != v27);
  }
  return (unsigned __int8 *)v15;
}

unsigned __int8 *sub_1C4773A70(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 100))
    return (unsigned __int8 *)llvm::IRBuilderBase::CreateConstrainedFPCast(a1, 94, a2, a3, 0, a4, 0, 0, 0);
  else
    return sub_1C4773E38((uint64_t *)a1, 45, (unsigned __int8 *)a2, (uint64_t)a3, a4);
}

unsigned __int8 *sub_1C4773AC8(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;

  v4 = (uint64_t *)(**(_QWORD **)*a1 + 1672);
  v9 = 257;
  v5 = sub_1C4773B3C((uint64_t)a2, a1, v4, (uint64_t)v8);
  v6 = *a1;
  v9 = 257;
  return sub_1C4773E38(a2, 49, v5, v6, (uint64_t)v8);
}

unsigned __int8 *sub_1C4773B3C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 100))
    return (unsigned __int8 *)llvm::IRBuilderBase::CreateConstrainedFPCast(a1, 115, a2, a3, 0, a4, 0, 0, 0);
  else
    return sub_1C4773E38((uint64_t *)a1, 44, (unsigned __int8 *)a2, (uint64_t)a3, a4);
}

unsigned __int8 *sub_1C4773B94(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v10;
  unsigned int v11;
  uint64_t v12;

  v8 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v8 = (llvm::Type *)**((_QWORD **)v8 + 2);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v8);
  v10 = (llvm::Type *)a3;
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
    v10 = **(llvm::Type ***)(a3 + 16);
  v11 = llvm::Type::getPrimitiveSizeInBits(v10);
  if (PrimitiveSizeInBits < v11)
  {
    v12 = 40;
    return sub_1C4773E38(a1, v12, a2, a3, a4);
  }
  if (PrimitiveSizeInBits > v11)
  {
    v12 = 38;
    return sub_1C4773E38(a1, v12, a2, a3, a4);
  }
  return a2;
}

BOOL sub_1C4773C58(uint64_t a1)
{
  llvm::detail::DoubleAPFloat *v1;
  void *v2;

  v2 = *(void **)(a1 + 8);
  v1 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v2 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::isDenormal(v1);
  else
    return llvm::detail::IEEEFloat::isDenormal(v1);
}

uint64_t *sub_1C4773C74(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = v1 - 16;
    v3 = *(_QWORD *)(v1 - 8);
    if (!v3)
LABEL_14:
      JUMPOUT(0x1CAA32F9CLL);
    v4 = 32 * v3;
    while (1)
    {
      v5 = *(_QWORD *)(v1 + v4 - 24);
      if ((_UNKNOWN *)v5 == &unk_1C866F1C0)
      {
        v9 = v2;
        v7 = v4;
        v8 = v1;
        sub_1C4773C74(v1 + v4 - 16, 0);
      }
      else
      {
        if ((*(_DWORD *)(v5 + 8) - 64) > 0xFFFFFF7F)
          goto LABEL_6;
        v6 = *(_QWORD *)(v1 + v4 - 16);
        if (!v6)
          goto LABEL_6;
        v9 = v2;
        v7 = v4;
        v8 = v1;
        MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
      }
      v4 = v7;
      v1 = v8;
      v2 = v9;
LABEL_6:
      v4 -= 32;
      if (!v4)
        goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_1C4773D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v10;

  v7 = 0;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 120) = &unk_1E8167888;
  *(_QWORD *)(a1 + 64) = **(_QWORD **)a2;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 128) = &unk_1E8167A08;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 80) = a1 + 128;
  *(_QWORD *)(a1 + 88) = a3;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 104) = a4;
  *(_QWORD *)(a1 + 112) = a5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = a2 + 24;
  v8 = *(unsigned __int8 **)(a2 + 48);
  v10 = v8;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)&v10, v8, 2);
    v7 = v10;
  }
  sub_1C4774EF4(a1, 0, (uint64_t)v7);
  if (v10)
    llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
  return a1;
}

unsigned __int8 *sub_1C4773E38(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 **v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 **v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25[4];
  __int16 v26;
  unsigned __int8 *v27;

  v5 = a3;
  if (*(_QWORD *)a3 == a4)
    return v5;
  if (a3[16] <= 0x14u)
  {
    v5 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1[9] + 224))(a1[9], a2, a3, a4);
    if (v5)
      v16 = v5[16] >= 0x1Cu;
    else
      v16 = 0;
    if (!v16)
      return v5;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v5, a5, a1[6], a1[7]);
    v17 = *((unsigned int *)a1 + 2);
    if (!(_DWORD)v17)
      return v5;
    v19 = *a1;
    v20 = *a1 + 16 * v17;
    v21 = (unsigned __int8 **)(v5 + 48);
    while (1)
    {
      v22 = *(_DWORD *)v19;
      v23 = *(unsigned __int8 **)(v19 + 8);
      if (v23)
      {
        if (!v22)
        {
          v25[0] = *(unsigned __int8 **)(v19 + 8);
          llvm::MetadataTracking::track((uint64_t)v25, v23, 2);
LABEL_40:
          if (v25 == v21)
          {
            if (v25[0])
              llvm::MetadataTracking::untrack((uint64_t)v25, v25[0]);
          }
          else
          {
            if (*v21)
              llvm::MetadataTracking::untrack((uint64_t)(v5 + 48), *v21);
            v24 = v25[0];
            *v21 = v25[0];
            if (v24)
              llvm::MetadataTracking::retrack((uint64_t)v25, v24, (uint64_t)(v5 + 48));
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (!*v21 && (v5[23] & 0x20) == 0)
          goto LABEL_37;
        if (!v22)
        {
          v25[0] = 0;
          goto LABEL_40;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v5, v22, (llvm::MDNode *)v23);
LABEL_37:
      v19 += 16;
      if (v19 == v20)
        return v5;
    }
  }
  v26 = 257;
  llvm::CastInst::Create(a2);
  v5 = v8;
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v8, a5, a1[6], a1[7]);
  v9 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v9)
  {
    v10 = *a1;
    v11 = *a1 + 16 * v9;
    v12 = (unsigned __int8 **)(v5 + 48);
    do
    {
      v13 = *(_DWORD *)v10;
      v14 = *(unsigned __int8 **)(v10 + 8);
      if (v14)
      {
        if (!v13)
        {
          v27 = *(unsigned __int8 **)(v10 + 8);
          llvm::MetadataTracking::track((uint64_t)&v27, v14, 2);
LABEL_15:
          if (&v27 == v12)
          {
            if (v27)
              llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
          }
          else
          {
            if (*v12)
              llvm::MetadataTracking::untrack((uint64_t)(v5 + 48), *v12);
            v15 = v27;
            *v12 = v27;
            if (v15)
              llvm::MetadataTracking::retrack((uint64_t)&v27, v15, (uint64_t)(v5 + 48));
          }
          goto LABEL_12;
        }
      }
      else
      {
        if (!*v12 && (v5[23] & 0x20) == 0)
          goto LABEL_12;
        if (!v13)
        {
          v27 = 0;
          goto LABEL_15;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v5, v13, (llvm::MDNode *)v14);
LABEL_12:
      v10 += 16;
    }
    while (v10 != v11);
  }
  return v5;
}

_QWORD *sub_1C4774094(llvm::SmallPtrSetImplBase *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = *((_QWORD *)this + 1);
  v5 = *((unsigned int *)this + 5);
  if (v4 != *(_QWORD *)this)
  {
    v6 = *((_DWORD *)this + 4);
    goto LABEL_3;
  }
  if (!(_DWORD)v5)
  {
LABEL_32:
    v6 = *((_DWORD *)this + 4);
    if (v5 < v6)
    {
      *((_DWORD *)this + 5) = v5 + 1;
      *(_QWORD *)(v4 + 8 * v5) = a2;
      return (_QWORD *)(*(_QWORD *)this + 8 * v5);
    }
LABEL_3:
    if (3 * v6 <= 4 * ((int)v5 - *((_DWORD *)this + 6)))
    {
      if (v6 >= 0x40)
        v6 *= 2;
      else
        v6 = 128;
    }
    else if (v6 - v5 >= v6 >> 3)
    {
      goto LABEL_5;
    }
    llvm::SmallPtrSetImplBase::Grow(this, v6);
    v6 = *((_DWORD *)this + 4);
    v4 = *((_QWORD *)this + 1);
LABEL_5:
    v7 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    result = (_QWORD *)(v4 + 8 * v7);
    v9 = *result;
    if (*result == -1)
    {
      v10 = 0;
LABEL_25:
      if (v10)
        result = v10;
      if (*result != a2)
      {
        if (*result == -2)
          --*((_DWORD *)this + 6);
        else
          ++*((_DWORD *)this + 5);
        *result = a2;
      }
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v9 != a2)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -2;
        if (v12)
          v10 = result;
        v13 = v7 + v11++;
        v7 = v13 & (v6 - 1);
        result = (_QWORD *)(v4 + 8 * v7);
        v9 = *result;
        if (*result == -1)
          goto LABEL_25;
      }
    }
    return result;
  }
  v14 = 0;
  v15 = 8 * v5;
  result = (_QWORD *)*((_QWORD *)this + 1);
  while (*result != a2)
  {
    if (*result == -2)
      v14 = result;
    ++result;
    v15 -= 8;
    if (!v15)
    {
      if (!v14)
        goto LABEL_32;
      *v14 = a2;
      --*((_DWORD *)this + 6);
      return v14;
    }
  }
  return result;
}

unsigned __int8 *sub_1C477422C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v5;
  BOOL v6;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;

  v5 = 0;
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u)
    a3 = 0;
  if (*(unsigned __int8 *)(a4 + 16) >= 0x15u)
    a4 = 0;
  if (a3)
    v6 = a4 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v5 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[9] + 184))(a1[9]);
    if (v5 && v5[16] >= 0x1Cu)
    {
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v5, a5, a1[6], a1[7]);
      v10 = *((unsigned int *)a1 + 2);
      if ((_DWORD)v10)
      {
        v12 = *a1;
        v13 = *a1 + 16 * v10;
        v14 = (unsigned __int8 **)(v5 + 48);
        do
        {
          v15 = *(_DWORD *)v12;
          v16 = *(unsigned __int8 **)(v12 + 8);
          if (v16)
          {
            if (!v15)
            {
              v18 = *(unsigned __int8 **)(v12 + 8);
              llvm::MetadataTracking::track((uint64_t)&v18, v16, 2);
LABEL_27:
              if (&v18 == v14)
              {
                if (v18)
                  llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
              }
              else
              {
                if (*v14)
                  llvm::MetadataTracking::untrack((uint64_t)(v5 + 48), *v14);
                v17 = v18;
                *v14 = v18;
                if (v17)
                  llvm::MetadataTracking::retrack((uint64_t)&v18, v17, (uint64_t)(v5 + 48));
              }
              goto LABEL_24;
            }
          }
          else
          {
            if (!*v14 && (v5[23] & 0x20) == 0)
              goto LABEL_24;
            if (!v15)
            {
              v18 = 0;
              goto LABEL_27;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v5, v15, (llvm::MDNode *)v16);
LABEL_24:
          v12 += 16;
        }
        while (v12 != v13);
      }
    }
  }
  return v5;
}

uint64_t sub_1C477438C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], a2, a3, a1[6], a1[7]);
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v7 = *a1;
    v8 = *a1 + 16 * v5;
    do
    {
      v9 = *(_DWORD *)v7;
      v10 = *(unsigned __int8 **)(v7 + 8);
      if (v10)
      {
        if (!v9)
        {
          v13 = *(unsigned __int8 **)(v7 + 8);
          llvm::MetadataTracking::track((uint64_t)&v13, v10, 2);
LABEL_14:
          v11 = (unsigned __int8 **)(a2 + 48);
          if (&v13 == (unsigned __int8 **)(a2 + 48))
          {
            if (v13)
              llvm::MetadataTracking::untrack((uint64_t)&v13, v13);
          }
          else
          {
            if (*v11)
              llvm::MetadataTracking::untrack(a2 + 48, *v11);
            v12 = v13;
            *v11 = v13;
            if (v12)
              llvm::MetadataTracking::retrack((uint64_t)&v13, v12, a2 + 48);
          }
          goto LABEL_11;
        }
      }
      else
      {
        if (!*(_QWORD *)(a2 + 48) && (*(_BYTE *)(a2 + 23) & 0x20) == 0)
          goto LABEL_11;
        if (!v9)
        {
          v13 = 0;
          goto LABEL_14;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)a2, v9, (llvm::MDNode *)v10);
LABEL_11:
      v7 += 16;
    }
    while (v7 != v8);
  }
  return a2;
}

uint64_t sub_1C477449C(uint64_t a1, llvm::GetElementPtrInst *a2, uint64_t *a3, llvm::Value *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  llvm::GetElementPtrInst *TypeAtIndex;
  llvm::Value *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  llvm::Type **v20;
  uint64_t v21;
  llvm::Type *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t ***v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::ValueSymbolTable *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;

  TypeAtIndex = a2;
  sub_1C4774650(a2, a3, a4, a5);
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(_DWORD *)(a1 + 20) & 0xC0000000 | a6 & 0x7FFFFFF;
  *(_DWORD *)(a1 + 16) = 62;
  *(_DWORD *)(a1 + 20) = v18;
  *(_OWORD *)(a1 + 24) = 0u;
  v19 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a8)
  {
    v31 = *(_QWORD *)(a8 + 40);
    v32 = (uint64_t *)(a8 + 24);
    *(_QWORD *)(a1 + 40) = v31;
    *(_WORD *)(v31 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v34 = *(_QWORD *)(v31 + 56);
      if (v34)
      {
        v35 = *(llvm::ValueSymbolTable **)(v34 + 104);
        if (v35)
          llvm::ValueSymbolTable::reinsertValue(v35, (llvm::Value *)a1);
      }
    }
    v33 = *v32;
    *(_QWORD *)(a1 + 24) = *v32;
    *(_QWORD *)(a1 + 32) = v32;
    *(_QWORD *)(v33 + 8) = v19;
    *v32 = v19;
  }
  *(_QWORD *)(a1 + 64) = TypeAtIndex;
  if (a5)
  {
    v20 = (llvm::Type **)((char *)a4 + 8);
    v21 = 8 * a5 - 8;
    do
    {
      if (!v21)
        break;
      v22 = *v20++;
      TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v22, v16);
      v21 -= 8;
    }
    while (TypeAtIndex);
  }
  *(_QWORD *)(a1 + 72) = TypeAtIndex;
  v23 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
  v24 = -v23;
  v25 = (uint64_t **)(a1 - 32 * v23);
  if (*v25)
  {
    v36 = a1 + 32 * v24;
    v38 = *(_QWORD **)(v36 + 16);
    v37 = (_QWORD *)(v36 + 16);
    *v38 = *(v37 - 1);
    v39 = *(v37 - 1);
    if (v39)
      *(_QWORD *)(v39 + 16) = *v37;
  }
  *v25 = a3;
  if (a3)
  {
    v28 = a3[1];
    v27 = (uint64_t ***)(a3 + 1);
    v26 = v28;
    v29 = a1 + 32 * v24;
    *(_QWORD *)(v29 + 8) = v28;
    if (v28)
      *(_QWORD *)(v26 + 16) = v29 + 8;
    *(_QWORD *)(v29 + 16) = v27;
    *v27 = v25;
  }
  sub_1C5382FD4((uint64_t)&v40, (uint64_t *)a4, (uint64_t *)a4 + a5, a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
  llvm::Value::setName((uint64_t ***)a1, a7);
  return a1;
}

double sub_1C4774650(llvm::GetElementPtrInst *TypeAtIndex, uint64_t *a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Value *v5;
  uint64_t v7;
  unsigned int v8;
  llvm::Type *v9;
  uint64_t v10;
  llvm::Type **v11;
  uint64_t v12;
  llvm::Type *v13;
  uint64_t **v14;
  double result;
  uint64_t v16;
  int v17;
  llvm::Type *v18;

  v5 = a3;
  v7 = *a2;
  v8 = *(_DWORD *)(*a2 + 8);
  if ((v8 & 0xFE) == 0x12)
  {
    v7 = **(_QWORD **)(v7 + 16);
    v8 = *(_DWORD *)(v7 + 8);
  }
  v9 = (llvm::Type *)(v8 >> 8);
  v10 = 8 * a4;
  if (a4)
  {
    v11 = (llvm::Type **)((char *)a3 + 8);
    v12 = v10 - 8;
    do
    {
      if (!v12)
        break;
      v13 = *v11++;
      TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v13, a3);
      v12 -= 8;
    }
    while (TypeAtIndex);
  }
  if (*(_QWORD *)(v7 + 24))
    v14 = (uint64_t **)llvm::PointerType::get(TypeAtIndex, v9);
  else
    v14 = (uint64_t **)llvm::PointerType::get(*(llvm::PointerType **)v7, v9);
  v16 = *a2;
  if (!*a2 || (v17 = *(_DWORD *)(v16 + 8), (v17 & 0xFE) != 0x12))
  {
    if (!a4)
      return result;
    while (1)
    {
      v16 = **(_QWORD **)v5;
      v17 = *(_DWORD *)(v16 + 8);
      if (v16 && (*(_DWORD *)(v16 + 8) & 0xFE) == 18)
        break;
      v5 = (llvm::Value *)((char *)v5 + 8);
      v10 -= 8;
      if (!v10)
        return result;
    }
  }
  v18 = (llvm::Type *)*(unsigned int *)(v16 + 32);
  if (v17 == 19)
    return llvm::ScalableVectorType::get(v14, v18);
  else
    return llvm::FixedVectorType::get((llvm::FixedVectorType *)v14, v18);
}

uint64_t sub_1C4774778(uint64_t *a1, uint64_t **a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, llvm::MDNode *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD v43[4];
  __int16 v44;

  v11 = a1[13];
  v12 = a1[14];
  v44 = 257;
  if (v12)
  {
    v30 = 0;
    v31 = 48 * v12;
    v32 = (_QWORD *)(v11 + 32);
    do
    {
      v30 += (*v32 - *(v32 - 1)) >> 3;
      v32 += 6;
      v31 -= 48;
    }
    while (v31);
    LODWORD(v13) = a5 + 1;
    v33 = (v30 + a5 + 1);
    v39 = (16 * v12);
    if ((_DWORD)v39)
      v34 = (16 * (_DWORD)v12) | 8u;
    else
      v34 = 0;
    v35 = (char *)operator new(v34 + 32 * v33 + 80);
    v36 = &v35[v34];
    v16 = (uint64_t)&v35[32 * v33 + v34];
    v17 = v16 + 20;
    *(_DWORD *)(v16 + 20) = v33 & 0x7FFFFFF | (((_DWORD)v39 != 0) << 31) | *(_DWORD *)(v16 + 20) & 0x38000000;
    if ((_DWORD)v33)
    {
      do
      {
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v36 + 1) = 0;
        *((_QWORD *)v36 + 2) = 0;
        *((_QWORD *)v36 + 3) = v16;
        v36 += 32;
      }
      while (v36 != (char *)v16);
    }
    if ((_DWORD)v39)
      *(_QWORD *)&v35[v39] = v39;
    v19 = *a2[2];
    v18 = 0;
    v37 = 48 * v12;
    v38 = (_QWORD *)(v11 + 32);
    do
    {
      v18 += (*v38 - *(v38 - 1)) >> 3;
      v38 += 6;
      v37 -= 48;
    }
    while (v37);
  }
  else
  {
    v13 = (a5 + 1);
    v14 = (_DWORD)a5 == -1;
    v15 = operator new(32 * v13 + 80);
    v16 = (uint64_t)&v15[4 * v13];
    v17 = v16 + 20;
    *(_DWORD *)(v16 + 20) = *(_DWORD *)(v16 + 20) & 0x38000000 | v13 & 0x7FFFFFF;
    if (!v14)
    {
      do
      {
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        v15[3] = v16;
        v15 += 4;
      }
      while (v15 != (_QWORD *)v16);
    }
    v18 = 0;
    v19 = *a2[2];
  }
  *(_QWORD *)v16 = v19;
  *(_QWORD *)(v16 + 8) = 0;
  v20 = *(_DWORD *)(v16 + 20) & 0xC0000000 | (v18 + v13) & 0x7FFFFFF;
  *(_DWORD *)(v16 + 16) = 84;
  *(_DWORD *)(v16 + 20) = v20;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_DWORD *)(v16 + 56) = 0;
  *(_QWORD *)(v16 + 64) = 0;
  llvm::CallInst::init((uint64_t ***)v16, a2, a3, a4, a5, v11, v12, (uint64_t)v43);
  if (*((_BYTE *)a1 + 100))
    *(_QWORD *)(v16 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v16 + 64), **(uint64_t ***)v16, -1, 61);
  if (sub_1C4774A9C(v16))
  {
    v21 = *((_DWORD *)a1 + 24);
    if (a7 || (a7 = (llvm::MDNode *)a1[11]) != 0)
      llvm::Value::setMetadata((llvm::Value *)v16, 3, a7);
    *(_BYTE *)(v16 + 17) |= 2 * (_BYTE)v21;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v16, a6, a1[6], a1[7]);
  v22 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v22)
  {
    v24 = *a1;
    v25 = *a1 + 16 * v22;
    do
    {
      v26 = *(_DWORD *)v24;
      v27 = *(unsigned __int8 **)(v24 + 8);
      if (v27)
      {
        if (!v26)
        {
          v43[0] = *(_QWORD *)(v24 + 8);
          llvm::MetadataTracking::track((uint64_t)v43, v27, 2);
          v28 = *(unsigned __int8 **)(v16 + 48);
          goto LABEL_24;
        }
      }
      else
      {
        v28 = *(unsigned __int8 **)(v16 + 48);
        if (!v28 && (*(_BYTE *)(v17 + 3) & 0x20) == 0)
          goto LABEL_21;
        if (!v26)
        {
          v43[0] = 0;
LABEL_24:
          if (v28)
            llvm::MetadataTracking::untrack(v16 + 48, v28);
          v29 = (unsigned __int8 *)v43[0];
          *(_QWORD *)(v16 + 48) = v43[0];
          if (v29)
            llvm::MetadataTracking::retrack((uint64_t)v43, v29, v16 + 48);
          goto LABEL_21;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v16, *(_DWORD *)v24, (llvm::MDNode *)v27);
LABEL_21:
      v24 += 16;
    }
    while (v24 != v25);
  }
  return v16;
}

BOOL sub_1C4774A9C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || (v2 = v1 - 28, v1 < 0x1C))
  {
    v3 = 0;
    if (!a1 || v1 != 5)
      return v3;
    v2 = *(unsigned __int16 *)(a1 + 18);
  }
  if (v2 > 0x39)
    return 0;
  if (((1 << v2) & 0x40000001255000) != 0)
    return 1;
  if (((1 << v2) & 0x380000000000000) == 0)
    return 0;
  do
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
    a1 = *(_QWORD *)a1 + 24;
    if (v4)
      v6 = v5 == 17;
    else
      v6 = 0;
  }
  while (v6);
  if ((v5 & 0xFE) == 0x12)
    v5 = *(unsigned __int8 *)(**(_QWORD **)(v4 + 16) + 8);
  return v5 < 7;
}

uint64_t sub_1C4774B48(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  char *v11;
  uint64_t ***v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[32];
  __int16 v25;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72));
  if (!result)
  {
    v11 = (char *)operator new(0x80uLL);
    *((_DWORD *)v11 + 21) = *((_DWORD *)v11 + 21) & 0x38000000 | 2;
    v12 = (uint64_t ***)(v11 + 64);
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = 0;
    *((_QWORD *)v11 + 3) = v11 + 64;
    *((_QWORD *)v11 + 4) = 0;
    v13 = v11 + 32;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = v11 + 64;
    v25 = 257;
    sub_1C4774CC4(*(_DWORD **)a3);
    *((_QWORD *)v11 + 8) = v14;
    *((_QWORD *)v11 + 9) = 0;
    v15 = *((_DWORD *)v11 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v11 + 20) = 81;
    *((_DWORD *)v11 + 21) = v15;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_DWORD *)v11 + 30) = 0;
    if (*(_QWORD *)v11)
    {
      **((_QWORD **)v11 + 2) = *((_QWORD *)v11 + 1);
      v22 = *((_QWORD *)v11 + 1);
      if (v22)
        *(_QWORD *)(v22 + 16) = *((_QWORD *)v11 + 2);
    }
    *(_QWORD *)v11 = a3;
    v18 = *(_QWORD *)(a3 + 8);
    v17 = (_QWORD *)(a3 + 8);
    v16 = v18;
    *((_QWORD *)v11 + 1) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = v11 + 8;
    *((_QWORD *)v11 + 2) = v17;
    *v17 = v11;
    if (*((_QWORD *)v11 + 4))
    {
      **((_QWORD **)v11 + 6) = *((_QWORD *)v11 + 5);
      v23 = *((_QWORD *)v11 + 5);
      if (v23)
        *(_QWORD *)(v23 + 16) = *((_QWORD *)v11 + 6);
    }
    *v13 = a4;
    if (a4)
    {
      v21 = *(_QWORD *)(a4 + 8);
      v20 = (_QWORD *)(a4 + 8);
      v19 = v21;
      *((_QWORD *)v11 + 5) = v21;
      if (v21)
        *(_QWORD *)(v19 + 16) = v11 + 40;
      *((_QWORD *)v11 + 6) = v20;
      *v20 = v13;
    }
    *((_WORD *)v11 + 41) = a2;
    llvm::Value::setName(v12, (uint64_t)v24);
    return sub_1C477438C((uint64_t *)a1, (uint64_t)v12, a5);
  }
  return result;
}

double sub_1C4774CC4(_DWORD *a1)
{
  uint64_t **v2;
  llvm::Type *v3;
  double result;

  v2 = (uint64_t **)(**(_QWORD **)a1 + 1888);
  if (a1 && (a1[2] & 0xFE) == 0x12)
  {
    v3 = (llvm::Type *)a1[8];
    if (a1[2] == 19)
      return llvm::ScalableVectorType::get(v2, v3);
    else
      return llvm::FixedVectorType::get((llvm::FixedVectorType *)v2, v3);
  }
  return result;
}

uint64_t sub_1C4774D04(uint64_t *a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  _BYTE v24[32];
  __int16 v25;

  v25 = 257;
  v14 = (char *)operator new(0x80uLL);
  *((_QWORD *)v14 + 8) = *a3;
  v15 = (uint64_t)(v14 + 64);
  *((_QWORD *)v14 + 3) = v14 + 64;
  *((_QWORD *)v14 + 5) = 0;
  v16 = v14 + 40;
  *((_QWORD *)v14 + 6) = 0;
  *((_QWORD *)v14 + 7) = v14 + 64;
  *((_QWORD *)v14 + 9) = 0;
  v14[80] = a2 + 28;
  v14[81] = 0;
  *((_WORD *)v14 + 41) = 0;
  *((_DWORD *)v14 + 21) = 2;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *((_DWORD *)v14 + 30) = 0;
  *(_QWORD *)v14 = a3;
  v19 = a3[1];
  v18 = a3 + 1;
  v17 = v19;
  *((_QWORD *)v14 + 1) = v19;
  if (v19)
    *(_QWORD *)(v17 + 16) = v14 + 8;
  *((_QWORD *)v14 + 2) = v18;
  *v18 = v14;
  *((_QWORD *)v14 + 4) = a4;
  if (a4)
  {
    v22 = *(_QWORD *)(a4 + 8);
    v21 = (_QWORD *)(a4 + 8);
    v20 = v22;
    *v16 = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = v16;
    *((_QWORD *)v14 + 6) = v21;
    *v21 = v14 + 32;
  }
  llvm::Value::setName((uint64_t ***)v14 + 8, (uint64_t)v24);
  result = sub_1C4773754(a1, v15, a5);
  if (a6)
    *(_BYTE *)(result + 17) |= 2u;
  if (a7)
    *(_BYTE *)(result + 17) |= 4u;
  return result;
}

uint64_t sub_1C4774E38(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  llvm::UndefValue *AggregateElement;
  BOOL v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(result + 8);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) == 0 || !v2)
  {
    AggregateElement = **(llvm::UndefValue ***)result;
    if (AggregateElement)
      v4 = *((_BYTE *)AggregateElement + 16) == 16;
    else
      v4 = 0;
    if (!v4)
    {
      v13 = v2;
      v14 = result;
      AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
      v2 = v13;
      result = v14;
    }
    v7 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
    v5 = (unsigned int *)((char *)AggregateElement + 24);
    v6 = v7;
    if (v5[2] >= 0x41)
      v5 = v6;
    v2 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * *v5);
  }
  v8 = *(unsigned __int8 *)(v2 + 8);
  if (v2)
    v9 = v8 == 17;
  else
    v9 = 0;
  if (v9 || (v2 ? (v10 = (v8 & 0xFE) == 18) : (v10 = 0), v10))
  {
    v12 = *(_QWORD *)(v2 + 24) | 4;
  }
  else
  {
    v11 = v2 & 0xFFFFFFFFFFFFFFFBLL;
    if (v8 == 16)
      v12 = v11;
    else
      v12 = 0;
  }
  *(_QWORD *)result += 32;
  *(_QWORD *)(result + 8) = v12;
  return result;
}

uint64_t sub_1C4774EF4(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;

  v15 = a2;
  v14 = a3;
  v3 = *(_QWORD *)result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(_QWORD *)result + 16 * v4;
  if (a3)
  {
    if ((_DWORD)v4)
    {
      v6 = (uint64_t *)(v3 + 8);
      v7 = 16 * v4;
      while (*((_DWORD *)v6 - 2) != a2)
      {
        v6 += 2;
        v7 -= 16;
        if (!v7)
          goto LABEL_6;
      }
      *v6 = a3;
    }
    else
    {
LABEL_6:
      if (v4 >= *(_DWORD *)(result + 12))
      {
        return sub_1C4775004(result, &v15, &v14);
      }
      else
      {
        *(_DWORD *)v5 = a2;
        *(_QWORD *)(v3 + 16 * v4 + 8) = a3;
        *(_DWORD *)(result + 8) = v4 + 1;
      }
    }
  }
  else
  {
    if ((_DWORD)v4)
    {
      v8 = 0;
      v9 = 16 * v4;
      v10 = 16 * v4 - 16;
      while (*(_DWORD *)(v3 + v8) != a2)
      {
        v8 += 16;
        if (v9 == v8)
          goto LABEL_10;
      }
      v5 = v3 + v8;
      if (v10 != v8)
      {
        v11 = (_QWORD *)(v5 + 24);
        v12 = v9 - v8 - 16;
        do
        {
          v13 = *((_DWORD *)v11 - 2);
          if (v13 != a2)
          {
            *(_DWORD *)v5 = v13;
            *(_QWORD *)(v5 + 8) = *v11;
            v5 += 16;
          }
          v11 += 2;
          v12 -= 16;
        }
        while (v12);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
    }
LABEL_10:
    *(_DWORD *)(result + 8) = (unint64_t)(v5 - v3) >> 4;
  }
  return result;
}

uint64_t sub_1C4775004(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *a2;
  v5 = *a3;
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

uint64_t sub_1C477507C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_14;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_14:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4775118(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4775244(a1, v7);
      v17 = 0;
      sub_1C477507C((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
  }
  else
  {
    sub_1C4775244(a1, 2 * v7);
    v8 = *a3;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & v9;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
    v11 = *a4;
    if (*a3 == *a4)
      goto LABEL_15;
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a4;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
      v11 = *a4;
      if (v8 == *a4)
        goto LABEL_15;
    }
    if (v12)
      a4 = v12;
  }
  v8 = *a4;
LABEL_15:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4775244(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C47752FC(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C47752FC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    v6 = 0;
    v7 = v3 - 1;
    do
    {
      v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        v10 = (_QWORD *)(*(_QWORD *)result + 16 * v9);
        v11 = *v10;
        if (v8 != *v10)
        {
          v12 = 0;
          v13 = 1;
          while (v11 != -4096)
          {
            if (v12)
              v14 = 0;
            else
              v14 = v11 == -8192;
            if (v14)
              v12 = v10;
            v15 = v9 + v13++;
            v9 = v15 & v7;
            v10 = (_QWORD *)(*(_QWORD *)result + 16 * (v15 & v7));
            v11 = *v10;
            if (v8 == *v10)
              goto LABEL_19;
          }
          if (v12)
            v10 = v12;
        }
LABEL_19:
        *v10 = v8;
        v10[1] = a2[1];
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

void sub_1C47753D0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C47753F4()
{
  return "AGX1 Specific CodeGen Prepare: CFG Modifying Part";
}

void *sub_1C4775404(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::TargetPassConfig::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

void sub_1C4775454(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  int v6;
  unint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  _QWORD *i;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  llvm::Value *v40;
  unsigned int v41;
  llvm::Value *v42;
  int v44;
  unsigned int j;
  uint64_t Successor;
  uint64_t v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unsigned __int8 **v54;
  int v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  llvm::Type *v59;
  uint64_t k;
  uint64_t v61;
  uint64_t v62;
  llvm::UndefValue *v63;
  unint64_t *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD **v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t *v87;
  unint64_t v88;
  unsigned int v89;
  llvm::BasicBlock **v90;
  llvm::BasicBlock **v91;
  llvm::BasicBlock **v92;
  uint64_t v93;
  llvm::BasicBlock *v94;
  llvm::BasicBlock *v95;
  llvm::BasicBlock **v96;
  llvm::BasicBlock *v97;
  llvm::BasicBlock *v98;
  unint64_t v99;
  unint64_t v100;
  llvm::BasicBlock **v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  BOOL v105;
  unsigned int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t m;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *n;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  BOOL v136;
  int v138;
  uint64_t v139;
  unsigned int v140;
  BOOL v141;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  llvm::BasicBlock *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  char *v153;
  char *v154;
  llvm::Value *v155;
  char *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  llvm *v164;
  char *v165;
  uint64_t *v166;
  _QWORD *v167;
  _QWORD *v168;
  int v169;
  uint64_t v170;
  _WORD *v171;
  uint64_t v172;
  _WORD *v173;
  int v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  BOOL v180;
  llvm::Value **v182;
  _DWORD *v183;
  llvm::Value *v184;
  uint64_t v185;
  _DWORD *v186;
  uint64_t v187;
  llvm::BranchInst *v188;
  _QWORD *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  llvm::ValueSymbolTable *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  llvm::Value *v203;
  llvm::Value *v204;
  llvm::Instruction *v205;
  _QWORD v206[4];
  __int16 v207;
  unint64_t *v208;
  unint64_t *v209;
  uint64_t v210;
  int v211;
  _BYTE v212[64];
  void *v213;
  uint64_t *v214;
  uint64_t v215;
  int v216;
  _WORD v217[8];
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  _WORD v224[30];
  unsigned int v225;
  llvm::BasicBlock **v226;
  uint64_t v227;
  _BYTE v228[32];
  _QWORD *v229;
  uint64_t v230;
  _QWORD v231[6];

  v231[4] = *MEMORY[0x1E0C80C00];
  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::TargetPassConfig::ID);
  v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::TargetPassConfig::ID);
  v6 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 112) + 16))(*(_QWORD *)(v5 + 112), a2)+ 280);
  v229 = v231;
  v230 = 0x400000000;
  sub_1C5E9DFC8(a2, 0);
  v7 = (unint64_t *)v212;
  v208 = (unint64_t *)v212;
  v209 = (unint64_t *)v212;
  v210 = 8;
  v211 = 0;
  v226 = (llvm::BasicBlock **)v228;
  v227 = 0x400000000;
  v8 = (_QWORD *)(a2 + 72);
  v9 = *(_QWORD **)(a2 + 80);
  if (v9 == (_QWORD *)(a2 + 72))
  {
    v65 = 0;
    v66 = 8;
    v64 = (unint64_t *)v212;
  }
  else
  {
    do
    {
      v10 = v9 - 3;
      if (!v9)
        v10 = 0;
      v11 = v10 + 5;
      v12 = (_QWORD *)v10[6];
      if (v12 != v10 + 5)
      {
        do
        {
          v13 = (_QWORD *)v12[1];
          v14 = v12 - 3;
          if (v12)
            v15 = (uint64_t)(v12 - 3);
          else
            v15 = 0;
          if (*(_BYTE *)(v15 + 16) == 84)
          {
            v16 = *(_QWORD *)(v15 - 32);
            if (v16)
            {
              if (!*(_BYTE *)(v16 + 16)
                && *(_QWORD *)(v16 + 24) == *(_QWORD *)(v15 + 72)
                && (*(_BYTE *)(v16 + 33) & 0x20) != 0)
              {
                v17 = *(_DWORD *)(*(v12 - 7) + 36);
                if ((v17 & 0xFFFFFFFE) == 0x7CC)
                {
                  v18 = &v14[-4 * (*((_DWORD *)v12 - 1) & 0x7FFFFFF)];
                  v19 = (unsigned int *)(*v18 + 24);
                  if (*(_DWORD *)(*v18 + 32) >= 0x41u)
                    v19 = *(unsigned int **)v19;
                  v20 = *v19;
                  v21 = v18[4];
                  v22 = *(unsigned __int8 *)(v21 + 16);
                  if (v17 == 1996)
                  {
                    if (v22 == 84)
                    {
                      v23 = *(_QWORD *)(v21 - 32);
                      if (v23)
                      {
                        if (!*(_BYTE *)(v23 + 16)
                          && *(_QWORD *)(v23 + 24) == *(_QWORD *)(v21 + 72)
                          && (*(_BYTE *)(v23 + 33) & 0x20) != 0
                          && *(_DWORD *)(v23 + 36) == 1994)
                        {
                          goto LABEL_36;
                        }
                      }
                    }
                  }
                  else if (v22 == 84)
                  {
                    v25 = *(_QWORD *)(v21 - 32);
                    if (v25)
                    {
                      if (!*(_BYTE *)(v25 + 16)
                        && *(_QWORD *)(v25 + 24) == *(_QWORD *)(v21 + 72)
                        && (*(_BYTE *)(v25 + 33) & 0x20) != 0
                        && *(_DWORD *)(v25 + 36) == 1995)
                      {
LABEL_36:
                        v26 = *(_QWORD *)(v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF));
                        v27 = (_QWORD *)(v26 + 24);
                        if (*(_DWORD *)(v26 + 32) >= 0x41u)
                          v27 = (_QWORD *)*v27;
                        if (*v27 == v20)
                        {
                          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v12[2] + 40, (uint64_t ***)v12 - 3);
                          v28 = *v12;
                          v29 = (_QWORD *)v12[1];
                          *v29 = *v12;
                          *(_QWORD *)(v28 + 8) = v29;
                          *v12 = 0;
                          v12[1] = 0;
                          llvm::Value::deleteValue((llvm::Value *)(v12 - 3));
                          if (!*(_QWORD *)(v21 + 8))
                          {
                            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v21 + 40) + 40, (uint64_t ***)v21);
                            v30 = *(_QWORD *)(v21 + 24);
                            v31 = *(_QWORD **)(v21 + 32);
                            *v31 = v30;
                            *(_QWORD *)(v30 + 8) = v31;
                            *(_QWORD *)(v21 + 24) = 0;
                            *(_QWORD *)(v21 + 32) = 0;
                            llvm::Value::deleteValue((llvm::Value *)v21);
                          }
                        }
                      }
                    }
                  }
                }
                else if (v17 == 1838)
                {
                  v24 = v230;
                  if (v230 >= (unint64_t)HIDWORD(v230))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v229, (uint64_t)v231, v230 + 1, 8);
                    v24 = v230;
                  }
                  v229[v24] = v14;
                  LODWORD(v230) = v230 + 1;
                }
                else if (v6 && ((v17 - 1282) < 0x190 || (v17 - 2824) <= 0xB))
                {
                  llvm::SampleInfo::SampleInfo((uint64_t)&v222, v17, 1);
                  if (v225 != -1)
                  {
                    v32 = (uint64_t *)v14[4 * v225 + -4 * (*((_DWORD *)v12 - 1) & 0x7FFFFFF)];
                    if (!*(_BYTE *)(*v32 + 8))
                    {
                      sub_1C4773D54((uint64_t)&v213, (uint64_t)(v12 - 3), 0, 0, 0);
                      v33 = (uint64_t *)(*v220 + 1672);
                      v207 = 257;
                      v34 = (uint64_t *)sub_1C47721A0((uint64_t)&v213, v32, v33, (uint64_t)v206);
                      sub_1C63A38A0((uint64_t)(v12 - 3), v225, v34);
                      if (v213 != &v215)
                        free(v213);
                    }
                  }
                }
                else if (v17 == 295)
                {
                  v202 = v6;
                  for (i = *(_QWORD **)(a2 + 80); ; i = (_QWORD *)i[1])
                  {
                    if (i == v8)
                      goto LABEL_114;
                    if (i)
                      v36 = i - 3;
                    else
                      v36 = 0;
                    v37 = v36[5];
                    if (v37)
                      v38 = v37 - 24;
                    else
                      v38 = 0;
                    if (*(unsigned __int8 *)(v38 + 16) - 29 >= 0xB)
                      v38 = 0;
                    if (*(_BYTE *)(v38 + 16) == 29)
                      break;
                  }
                  v39 = (_QWORD *)*v11;
                  v201 = a2;
                  if ((_QWORD *)*v11 == v11)
                  {
                    v205 = 0;
                  }
                  else
                  {
                    v205 = (llvm::Instruction *)(v39 - 3);
                    if (v39)
                      v40 = (llvm::Value *)(v39 - 3);
                    else
                      v40 = 0;
                    v41 = *((unsigned __int8 *)v40 + 16) - 40;
                    if (v41 >= 0xFFFFFFF5)
                      v42 = v40;
                    else
                      v42 = 0;
                    if (v39)
                    {
                      if (*((_BYTE *)v42 + 16) == 30 && v41 >= 0xFFFFFFF5)
                      {
                        if (*((_BYTE *)v39 - 8) != 30)
                        {
                          v44 = 2;
                          switch(*((_BYTE *)v39 - 8))
                          {
                            case 0x1E:
LABEL_360:
                              __break(1u);
                              return;
                            case 0x1F:
                              v44 = (*((_DWORD *)v39 - 1) >> 1) & 0x3FFFFFF;
                              goto LABEL_117;
                            case 0x20:
                            case 0x26:
                              v44 = (*((_DWORD *)v39 - 1) & 0x7FFFFFF) - 1;
                              goto LABEL_117;
                            case 0x21:
                              goto LABEL_80;
                            case 0x24:
                              v44 = *((_WORD *)v39 - 3) & 1;
                              goto LABEL_117;
                            case 0x25:
                              v44 = 1;
                              goto LABEL_80;
                            case 0x27:
                              v44 = *((_DWORD *)v39 + 14) + 1;
LABEL_117:
                              if (!v44)
                                goto LABEL_86;
                              goto LABEL_80;
                            default:
                              goto LABEL_86;
                          }
                        }
                        if ((*((_DWORD *)v39 - 1) & 0x7FFFFFF) == 3)
                          v44 = 2;
                        else
                          v44 = 1;
LABEL_80:
                        v203 = v42;
                        for (j = 0; j != v44; ++j)
                        {
                          Successor = llvm::Instruction::getSuccessor(v205, j);
                          v47 = v227;
                          if (v227 >= (unint64_t)HIDWORD(v227))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v226, (uint64_t)v228, v227 + 1, 8);
                            v47 = v227;
                          }
                          v226[v47] = (llvm::BasicBlock *)Successor;
                          LODWORD(v227) = v227 + 1;
                        }
                        v205 = v203;
                      }
                    }
                  }
LABEL_86:
                  sub_1C4773D54((uint64_t)&v213, v15, 0, 0, 0);
                  v48 = (char *)operator new(0x60uLL);
                  v49 = v48;
                  *((_DWORD *)v48 + 13) = *((_DWORD *)v48 + 13) & 0x38000000 | 1;
                  *(_QWORD *)v48 = 0;
                  *((_QWORD *)v48 + 2) = 0;
                  *((_QWORD *)v48 + 1) = 0;
                  *((_QWORD *)v48 + 4) = **(_QWORD **)*(i - 3) + 1576;
                  v204 = (llvm::Value *)(v48 + 32);
                  *((_QWORD *)v48 + 3) = v48 + 32;
                  *((_QWORD *)v48 + 5) = 0;
                  v48[48] = 30;
                  v48[49] = 0;
                  *((_WORD *)v48 + 25) = 0;
                  *((_DWORD *)v48 + 13) = 1;
                  *(_OWORD *)(v48 + 56) = 0u;
                  *(_OWORD *)(v48 + 72) = 0u;
                  *((_DWORD *)v48 + 22) = 0;
                  *(_QWORD *)v48 = i - 3;
                  v50 = i - 2;
                  v51 = *(i - 2);
                  *((_QWORD *)v48 + 1) = v51;
                  if (v51)
                    *(_QWORD *)(v51 + 16) = v48 + 8;
                  *((_QWORD *)v48 + 2) = v50;
                  *v50 = v48;
                  v224[8] = 257;
                  (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v221 + 16))(v221, v204, &v222, v218, v219);
                  if (!(_DWORD)v214)
                  {
LABEL_104:
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v208, (uint64_t)v205);
                    if ((_QWORD *)i[2] != i + 2)
                    {
                      for (k = i[3]; ; k = *(_QWORD *)(v61 + 32))
                      {
                        v61 = k - 24;
                        v62 = k ? k - 24 : 0;
                        if (!k || *(_BYTE *)(v62 + 16) != 83)
                          break;
                        v63 = llvm::UndefValue::get(*(llvm::UndefValue **)v61, v59);
                        sub_1C477667C((llvm::PHINode *)v61, (uint64_t)v63, *(_QWORD *)(v15 + 40));
                      }
                    }
                    a2 = v201;
                    if (v213 != &v215)
                      free(v213);
LABEL_114:
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v208, v15);
                    v6 = v202;
                    goto LABEL_47;
                  }
                  v52 = (char *)v213;
                  v53 = (char *)v213 + 16 * v214;
                  v54 = (unsigned __int8 **)(v49 + 80);
                  while (2)
                  {
                    v55 = *(_DWORD *)v52;
                    v56 = (unsigned __int8 *)*((_QWORD *)v52 + 1);
                    if (v56)
                    {
                      if (v55)
                        goto LABEL_96;
                      v206[0] = *((_QWORD *)v52 + 1);
                      llvm::MetadataTracking::track((uint64_t)v206, v56, 2);
                      v57 = *v54;
LABEL_100:
                      if (v57)
                        llvm::MetadataTracking::untrack((uint64_t)(v49 + 80), v57);
                      v58 = (unsigned __int8 *)v206[0];
                      *v54 = (unsigned __int8 *)v206[0];
                      if (v58)
                        llvm::MetadataTracking::retrack((uint64_t)v206, v58, (uint64_t)(v49 + 80));
                    }
                    else
                    {
                      v57 = *v54;
                      if (*v54 || (v49[55] & 0x20) != 0)
                      {
                        if (!v55)
                        {
                          v206[0] = 0;
                          goto LABEL_100;
                        }
LABEL_96:
                        llvm::Value::setMetadata(v204, *(_DWORD *)v52, (llvm::MDNode *)v56);
                      }
                    }
                    v52 += 16;
                    if (v52 == v53)
                      goto LABEL_104;
                    continue;
                  }
                }
              }
            }
          }
LABEL_47:
          v12 = v13;
        }
        while (v13 != v11);
      }
      v9 = (_QWORD *)v9[1];
    }
    while (v9 != v8);
    v7 = v208;
    v64 = v209;
    v66 = v210;
    v65 = HIDWORD(v210);
  }
  if (v64 == v7)
    v67 = v65;
  else
    v67 = v66;
  v68 = v64;
  if ((_DWORD)v67)
  {
    v69 = 0;
    while (v64[v69] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v67 == ++v69)
        goto LABEL_151;
    }
    v68 = &v64[v69];
  }
  v70 = &v64[v67];
  if (v68 == v70)
    goto LABEL_151;
  v71 = *v68;
LABEL_137:
  v72 = *(_DWORD *)(v71 + 20);
  if ((v72 & 0x40000000) != 0)
  {
    v74 = *(_QWORD *)(v71 - 8);
    v73 = v72 & 0x7FFFFFF;
    if (!v73)
      goto LABEL_144;
  }
  else
  {
    v73 = v72 & 0x7FFFFFF;
    v74 = v71 - 32 * v73;
    if (!v73)
      goto LABEL_144;
  }
  v75 = 32 * v73;
  v76 = (_QWORD **)(v74 + 16);
  do
  {
    if (*(v76 - 2))
    {
      **v76 = *(v76 - 1);
      v77 = (uint64_t)*(v76 - 1);
      if (v77)
        *(_QWORD *)(v77 + 16) = *v76;
    }
    *(v76 - 2) = 0;
    v76 += 4;
    v75 -= 32;
  }
  while (v75);
LABEL_144:
  v78 = v68 + 1;
  while (v78 != v70)
  {
    v79 = *v78++;
    v71 = v79;
    if (v79 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v68 = v78 - 1;
      goto LABEL_137;
    }
  }
  v7 = v208;
  v64 = v209;
  v66 = v210;
  v65 = HIDWORD(v210);
LABEL_151:
  if (v64 == v7)
    v80 = v65;
  else
    v80 = v66;
  v81 = v64;
  if ((_DWORD)v80)
  {
    v82 = 8 * v80;
    v81 = v64;
    while (*v81 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v81;
      v82 -= 8;
      if (!v82)
        goto LABEL_165;
    }
  }
  v83 = &v64[v80];
  if (v81 != v83)
  {
    v84 = *v81;
LABEL_161:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v84 + 40) + 40, (uint64_t ***)v84);
    v85 = *(_QWORD *)(v84 + 24);
    v86 = *(_QWORD **)(v84 + 32);
    *v86 = v85;
    *(_QWORD *)(v85 + 8) = v86;
    *(_QWORD *)(v84 + 24) = 0;
    *(_QWORD *)(v84 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v84);
    v87 = v81 + 1;
    while (v87 != v83)
    {
      v88 = *v87++;
      v84 = v88;
      if (v88 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v81 = v87 - 1;
        goto LABEL_161;
      }
    }
  }
LABEL_165:
  v89 = v227;
  v90 = v226;
  if (v227 >= 2)
  {
    qsort(v226, v227, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C4776710);
    v89 = v227;
    v90 = v226;
  }
  v91 = &v90[v89];
  v92 = v90;
  if (v89)
  {
    v92 = v90 - 1;
    v93 = 8 * v89 - 8;
    while (v93)
    {
      v94 = v92[1];
      v95 = v92[2];
      ++v92;
      v93 -= 8;
      if (v94 == v95)
        goto LABEL_171;
    }
  }
  else
  {
LABEL_171:
    if (v92 != v91)
    {
      v96 = v92 + 2;
      if (v92 + 2 != v91)
      {
        v97 = *v92;
        do
        {
          v98 = v97;
          v97 = *v96;
          if (v98 != *v96)
          {
            v92[1] = v97;
            ++v92;
          }
          ++v96;
        }
        while (v96 != v91);
      }
      v91 = v92 + 1;
    }
  }
  v99 = (char *)v91 - (char *)v90;
  v100 = (unint64_t)((char *)v91 - (char *)v90) >> 3;
  LODWORD(v227) = v100;
  if ((v99 >> 3))
  {
    v101 = &v90[v100];
    do
    {
      v102 = *((_QWORD *)*v90 + 1);
      if (v102)
      {
        while (1)
        {
          v103 = *(_QWORD *)(v102 + 24);
          v104 = *(unsigned __int8 *)(v103 + 16);
          v105 = v103 && v104 >= 0x1C;
          if (v105 && v104 - 29 < 0xB)
            break;
          v102 = *(_QWORD *)(v102 + 8);
          if (!v102)
            goto LABEL_190;
        }
      }
      else
      {
LABEL_190:
        llvm::BasicBlock::eraseFromParent(*v90);
      }
      ++v90;
    }
    while (v90 != v101);
  }
  LODWORD(v227) = 0;
  v107 = v230;
  if (!(_DWORD)v230)
    goto LABEL_353;
  do
  {
    v108 = v229[v107 - 1];
    LODWORD(v230) = v107 - 1;
    v109 = *(unsigned __int8 *)(v108 + 16);
    if (v109 == 84)
    {
      v110 = 0;
    }
    else if (v109 == 39)
    {
      v110 = (*(_DWORD *)(v108 + 80) + 1);
    }
    else
    {
      v110 = 2;
    }
    v111 = *(_DWORD *)(v108 + 20);
    if (v111 < 0
      && (v199 = v108 - 32 * (v111 & 0x7FFFFFF), v200 = *(_QWORD *)(v199 - 8), (v200 & 0xFFFFFFFF0) != 0))
    {
      v113 = -(uint64_t)(v111 & 0x7FFFFFF);
      v112 = *(_DWORD *)(v199 - 12) - *(_DWORD *)(v199 - v200);
    }
    else
    {
      v112 = 0;
      v113 = -(uint64_t)(v111 & 0x7FFFFFF);
    }
    v114 = *(uint64_t **)(v108 + 40);
    v115 = v114[7];
    v116 = *(_QWORD *)(v108
                     + 32 * v113
                     + 32
                     * (((-32 * v110 + 32 * (unint64_t)-v112 - 32 * v113 - 32) >> 5)
                      - 1));
    v117 = *(unsigned __int8 *)(v116 + 16);
    if (v117 == 16)
    {
      v118 = (_QWORD *)(v116 + 24);
      if (*(_DWORD *)(v116 + 32) >= 0x41u)
        v118 = (_QWORD *)*v118;
      if (*v118)
      {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v114 + 5), (uint64_t ***)v108);
        v119 = *(_QWORD *)(v108 + 24);
        v120 = *(_QWORD **)(v108 + 32);
        *v120 = v119;
        *(_QWORD *)(v119 + 8) = v120;
        *(_QWORD *)(v108 + 24) = 0;
        *(_QWORD *)(v108 + 32) = 0;
        goto LABEL_339;
      }
    }
    v121 = v115 + 72;
    for (m = *(_QWORD *)(v115 + 80); m != v121; m = *(_QWORD *)(m + 8))
    {
      v123 = (uint64_t *)(m - 24);
      if (m)
        v124 = m - 24;
      else
        v124 = 0;
      v125 = *(_QWORD *)(v124 + 40);
      if (v125)
        v126 = v125 - 24;
      else
        v126 = 0;
      if (*(unsigned __int8 *)(v126 + 16) - 29 >= 0xB)
        v126 = 0;
      if (*(_BYTE *)(v126 + 16) == 29)
        goto LABEL_215;
    }
    v123 = 0;
LABEL_215:
    v127 = (uint64_t *)v123[5];
    if (v127 == v123 + 5)
    {
      v128 = 0;
    }
    else
    {
      if (v127)
        v128 = v127 - 3;
      else
        v128 = 0;
      if (*((unsigned __int8 *)v128 + 16) - 29 >= 0xB)
        v128 = 0;
    }
    for (n = (uint64_t *)v123[6]; n != v123 + 5; n = (uint64_t *)n[1])
    {
      v130 = n - 3;
      if (n)
        v131 = n - 3;
      else
        v131 = 0;
      if (*((_BYTE *)v131 + 16) != 83)
        goto LABEL_231;
    }
    v130 = 0;
LABEL_231:
    if (v130 != v128)
    {
      if (v128)
        v132 = v128 + 3;
      else
        v132 = 0;
      v213 = "early.exit";
      v217[0] = 259;
      v123 = (uint64_t *)llvm::BasicBlock::splitBasicBlock(v123, v132, (uint64_t)&v213, 0);
    }
    v133 = v114[1];
    if (v133)
    {
      while (1)
      {
        v134 = *(_QWORD *)(v133 + 24);
        v135 = *(unsigned __int8 *)(v134 + 16);
        v136 = v134 && v135 >= 0x1C;
        if (v136 && v135 - 29 <= 0xA)
          break;
        v133 = *(_QWORD *)(v133 + 8);
        if (!v133)
          goto LABEL_262;
      }
      v138 = 0;
LABEL_247:
      ++v138;
      while (1)
      {
        v133 = *(_QWORD *)(v133 + 8);
        if (!v133)
          break;
        v139 = *(_QWORD *)(v133 + 24);
        v140 = *(unsigned __int8 *)(v139 + 16);
        if (v139)
          v141 = v140 >= 0x1C;
        else
          v141 = 0;
        if (v141 && v140 - 29 < 0xB)
          goto LABEL_247;
      }
      if ((v138 & 0xFFFFFFFE) != 0)
      {
        if (v108)
          v143 = (uint64_t *)(v108 + 24);
        else
          v143 = 0;
        v213 = "early.exit.br";
        v217[0] = 259;
        v114 = (uint64_t *)llvm::BasicBlock::splitBasicBlock(v114, v143, (uint64_t)&v213, 0);
      }
    }
LABEL_262:
    v144 = (uint64_t *)(v108 + 24);
    if (v108)
      v145 = v108 + 24;
    else
      v145 = 0;
    v146 = *(uint64_t **)(v145 + 8);
    v213 = "skip.early.exit";
    v217[0] = 259;
    v147 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock(v114, v146, (uint64_t)&v213, 0);
    v148 = (uint64_t *)v114[5];
    if (v148 == v114 + 5)
    {
      v150 = 0;
    }
    else
    {
      if (v148)
        v149 = v148 - 3;
      else
        v149 = 0;
      if (*((unsigned __int8 *)v149 + 16) - 29 >= 0xB)
        v150 = 0;
      else
        v150 = v149;
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v150[5] + 40, (uint64_t ***)v150);
    v151 = v150[3];
    v152 = (_QWORD *)v150[4];
    *v152 = v151;
    *(_QWORD *)(v151 + 8) = v152;
    v150[3] = 0;
    v150[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v150);
    if (v117 != 16)
    {
      v182 = llvm::ConstantInt::get((llvm::ConstantInt *)(***(_QWORD ***)v108 + 1936), 0, 0);
      v183 = operator new(0x80uLL);
      v183[21] = v183[21] & 0x38000000 | 2;
      v184 = (llvm::Value *)(v183 + 16);
      *(_QWORD *)v183 = 0;
      *((_QWORD *)v183 + 1) = 0;
      *((_QWORD *)v183 + 2) = 0;
      *((_QWORD *)v183 + 3) = v183 + 16;
      *((_QWORD *)v183 + 4) = 0;
      *((_QWORD *)v183 + 5) = 0;
      *((_QWORD *)v183 + 6) = 0;
      *((_QWORD *)v183 + 7) = v183 + 16;
      v213 = "exit.cond";
      v217[0] = 259;
      sub_1C4774CC4(*(_DWORD **)v116);
      llvm::CmpInst::CmpInst((uint64_t)v184, v185, 53, 32, v116, (uint64_t)v182, (uint64_t)&v213, v108, 0);
      v186 = operator new(0xA0uLL);
      v187 = 0;
      v188 = (llvm::BranchInst *)(v186 + 24);
      v186[29] = v186[29] & 0x38000000 | 3;
      do
      {
        v189 = &v186[v187];
        *v189 = 0;
        v189[1] = 0;
        v189[2] = 0;
        v189[3] = v188;
        v187 += 8;
      }
      while (v187 != 24);
      llvm::BranchInst::BranchInst(v188, (llvm::BasicBlock *)v123, v147, v184, (llvm::Instruction *)v108);
      goto LABEL_338;
    }
    v153 = (char *)operator new(0x60uLL);
    v154 = v153;
    *((_DWORD *)v153 + 13) = *((_DWORD *)v153 + 13) & 0x38000000 | 1;
    *((_QWORD *)v153 + 1) = 0;
    *((_QWORD *)v153 + 2) = 0;
    *(_QWORD *)v153 = 0;
    *((_QWORD *)v153 + 4) = **(_QWORD **)*v123 + 1576;
    v155 = (llvm::Value *)(v153 + 32);
    *((_QWORD *)v153 + 3) = v153 + 32;
    *((_QWORD *)v153 + 5) = 0;
    v153[48] = 30;
    v153[49] = 0;
    *((_WORD *)v153 + 25) = 0;
    *((_DWORD *)v153 + 13) = 1;
    *(_OWORD *)(v153 + 56) = 0u;
    v156 = v153 + 56;
    *(_OWORD *)(v153 + 72) = 0u;
    *((_DWORD *)v153 + 22) = 0;
    if (v108)
    {
      v192 = *(_QWORD *)(v108 + 40);
      *((_QWORD *)v153 + 9) = v192;
      *(_WORD *)(v192 + 18) &= ~0x8000u;
      if ((v153[55] & 0x10) != 0
        && (v194 = *(_QWORD *)(v192 + 56)) != 0
        && (v195 = *(llvm::ValueSymbolTable **)(v194 + 104)) != 0)
      {
        llvm::ValueSymbolTable::reinsertValue(v195, v155);
        v196 = *(_QWORD *)v154;
        v197 = *v144;
        *((_QWORD *)v154 + 7) = *v144;
        *((_QWORD *)v154 + 8) = v144;
        *(_QWORD *)(v197 + 8) = v156;
        *v144 = (uint64_t)v156;
        if (v196)
        {
          **((_QWORD **)v154 + 2) = *((_QWORD *)v154 + 1);
          v198 = *((_QWORD *)v154 + 1);
          if (v198)
            *(_QWORD *)(v198 + 16) = *((_QWORD *)v154 + 2);
        }
      }
      else
      {
        v193 = *v144;
        *((_QWORD *)v154 + 7) = *v144;
        *((_QWORD *)v154 + 8) = v144;
        *(_QWORD *)(v193 + 8) = v156;
        *v144 = (uint64_t)v156;
      }
    }
    *(_QWORD *)v154 = v123;
    v159 = v123[1];
    v158 = v123 + 1;
    v157 = v159;
    *((_QWORD *)v154 + 1) = v159;
    if (v159)
      *(_QWORD *)(v157 + 16) = v154 + 8;
    *((_QWORD *)v154 + 2) = v158;
    *v158 = v154;
    v213 = v217;
    v214 = (uint64_t *)v217;
    v215 = 8;
    v216 = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v213, (uint64_t)v147);
    while (HIDWORD(v215) != v216)
    {
      v160 = v214;
      if (v214 == v213)
        v161 = HIDWORD(v215);
      else
        v161 = v215;
      if ((_DWORD)v161)
      {
        v162 = 8 * v161;
        v163 = &v214[v161];
        while ((unint64_t)*v160 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v160;
          v162 -= 8;
          if (!v162)
          {
            v160 = v163;
            break;
          }
        }
      }
      v164 = (llvm *)*v160;
      v165 = (char *)sub_1C477672C((uint64_t)&v213, *v160);
      if (v214 == v213)
        v166 = (uint64_t *)((char *)&v215 + 4);
      else
        v166 = &v215;
      if (v165 != (char *)&v214[*(unsigned int *)v166])
      {
        *(_QWORD *)v165 = -2;
        ++v216;
      }
      v167 = (_QWORD *)*((_QWORD *)v164 + 5);
      if (v167 == (_QWORD *)((char *)v164 + 40))
      {
LABEL_306:
        v169 = 0;
        v174 = 0;
        v222 = v224;
        HIDWORD(v223) = 2;
        goto LABEL_307;
      }
      if (v167)
        v168 = v167 - 3;
      else
        v168 = 0;
      if (*((_BYTE *)v168 + 16) == 30)
      {
        if ((*((_DWORD *)v168 + 5) & 0x7FFFFFF) == 3)
          v169 = 2;
        else
          v169 = 1;
LABEL_300:
        v222 = v224;
        v223 = 0x200000000;
      }
      else
      {
        v169 = 0;
        switch(*((_BYTE *)v168 + 16))
        {
          case 0x1D:
          case 0x22:
          case 0x23:
            goto LABEL_300;
          case 0x1E:
            goto LABEL_360;
          case 0x1F:
            v169 = (*((_DWORD *)v168 + 5) >> 1) & 0x3FFFFFF;
            break;
          case 0x20:
          case 0x26:
            v169 = (*((_DWORD *)v168 + 5) & 0x7FFFFFF) - 1;
            break;
          case 0x21:
            v169 = 2;
            goto LABEL_300;
          case 0x24:
            v169 = *((_WORD *)v168 + 9) & 1;
            goto LABEL_300;
          case 0x25:
            v169 = 1;
            goto LABEL_300;
          case 0x27:
            v169 = *((_DWORD *)v168 + 20) + 1;
            break;
          default:
            goto LABEL_306;
        }
        v222 = v224;
        v223 = 0x200000000;
        if (v169 >= 3)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)v224, v169, 8);
          v170 = v223;
          v171 = v222;
          goto LABEL_303;
        }
      }
      if (!v169)
      {
        v174 = 0;
        goto LABEL_307;
      }
      v170 = 0;
      v171 = v224;
LABEL_303:
      v172 = 0;
      v173 = &v171[4 * v170];
      do
      {
        *(_QWORD *)&v173[4 * v172] = llvm::Instruction::getSuccessor((llvm::Instruction *)v168, v172);
        ++v172;
      }
      while (v169 != (_DWORD)v172);
      v174 = v223;
LABEL_307:
      LODWORD(v223) = v174 + v169;
      llvm::DeleteDeadBlock(v164, 0, 0);
      v175 = (uint64_t *)v222;
      v176 = (uint64_t *)((char *)v222 + 8 * v223);
      if ((_DWORD)v223)
      {
        do
        {
          v177 = *(_QWORD *)(*v175 + 8);
          if (v177)
          {
            while (1)
            {
              v178 = *(_QWORD *)(v177 + 24);
              v179 = *(unsigned __int8 *)(v178 + 16);
              v180 = v178 && v179 >= 0x1C;
              if (v180 && v179 - 29 < 0xB)
                break;
              v177 = *(_QWORD *)(v177 + 8);
              if (!v177)
                goto LABEL_318;
            }
          }
          else
          {
LABEL_318:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v213, *v175);
          }
          ++v175;
        }
        while (v175 != v176);
        v175 = (uint64_t *)v222;
      }
      if (v175 != (uint64_t *)v224)
        free(v175);
    }
    if (v214 != v213)
      free(v214);
LABEL_338:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v108 + 40) + 40, (uint64_t ***)v108);
    v190 = *(_QWORD *)(v108 + 24);
    v191 = *(_QWORD **)(v108 + 32);
    *v191 = v190;
    *(_QWORD *)(v190 + 8) = v191;
    *v144 = 0;
    *(_QWORD *)(v108 + 32) = 0;
LABEL_339:
    llvm::Value::deleteValue((llvm::Value *)v108);
    v107 = v230;
  }
  while ((_DWORD)v230);
LABEL_353:
  if (v226 != (llvm::BasicBlock **)v228)
    free(v226);
  if (v209 != v208)
    free(v209);
  if (v229 != v231)
    free(v229);
}

uint64_t sub_1C477667C(llvm::PHINode *this, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  char *v11;

  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x7FFFFFF) == *((_DWORD *)this + 15))
  {
    llvm::PHINode::growOperands(this);
    v6 = *((_DWORD *)this + 5);
  }
  v7 = (v6 + 1) & 0x7FFFFFF;
  *((_DWORD *)this + 5) = v6 & 0xF8000000 | v7;
  result = sub_1C6125834((uint64_t)this, v7 - 1, a2);
  v9 = *((_DWORD *)this + 5);
  v10 = v9 & 0x7FFFFFF;
  if ((v9 & 0x40000000) != 0)
    v11 = (char *)*((_QWORD *)this - 1);
  else
    v11 = (char *)this - 32 * v10;
  *(_QWORD *)&v11[32 * *((unsigned int *)this + 15) + 8 * (v10 - 1)] = a3;
  return result;
}

uint64_t sub_1C4776710(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

_QWORD *sub_1C477672C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2 == *(_QWORD **)a1)
  {
    v11 = *(unsigned int *)(a1 + 20);
    result = &v2[v11];
    if ((_DWORD)v11)
    {
      v12 = 8 * v11;
      while (*v2 != a2)
      {
        ++v2;
        v12 -= 8;
        if (!v12)
          return result;
      }
      return v2;
    }
  }
  else
  {
    v3 = *(unsigned int *)(a1 + 16);
    v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    result = &v2[v4];
    v6 = *result;
    if (*result == -1)
    {
      v7 = 0;
LABEL_19:
      if (v7)
        result = v7;
      if (*result != a2)
        return &v2[v3];
    }
    else
    {
      v7 = 0;
      v8 = 1;
      while (v6 != a2)
      {
        if (v7)
          v9 = 0;
        else
          v9 = v6 == -2;
        if (v9)
          v7 = result;
        v10 = v4 + v8++;
        v4 = v10 & (v3 - 1);
        result = &v2[v4];
        v6 = *result;
        if (*result == -1)
          goto LABEL_19;
      }
    }
  }
  return result;
}

uint64_t sub_1C47767F0()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8EF6F9;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E7F94478;
  return result;
}

uint64_t sub_1C4776838(uint64_t a1)
{
  return (**(uint64_t (***)(_QWORD))a1)(**(_QWORD **)(*(_QWORD *)a1 + 8));
}

uint64_t sub_1C4776848(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &unk_1E8144BE8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0x600000000;
  sub_1C4765AA4((char *)(a1 + 32), 1uLL, 0);
  *(_DWORD *)(a1 + 96) = 11;
  *(_QWORD *)(a1 + 104) = a1 + 120;
  *(_QWORD *)(a1 + 112) = 0x600000000;
  sub_1C4765AA4((char *)(a1 + 104), 1uLL, 0);
  *(_DWORD *)(a1 + 168) = 11;
  *(_QWORD *)(a1 + 176) = a1 + 192;
  *(_QWORD *)(a1 + 184) = 0x600000000;
  sub_1C4765AA4((char *)(a1 + 176), 1uLL, 0);
  *(_DWORD *)(a1 + 240) = 11;
  return a1;
}

void sub_1C47768F4(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4776988(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4776A14()
{
  return "AGX1 Common Store backfiller pass";
}

uint64_t sub_1C4776A24(uint64_t a1)
{
  void **v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  void **v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  void **v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *__src;
  uint64_t v25;
  _BYTE v26[48];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (void **)(a1 + 32);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 152))(&__src);
  v3 = __src;
  if (v2 != &__src)
  {
    if (__src != v26)
    {
      v18 = *(void **)(a1 + 32);
      if (v18 != (void *)(a1 + 48))
      {
        free(v18);
        v3 = __src;
      }
      *(_QWORD *)(a1 + 32) = v3;
      *(_QWORD *)(a1 + 40) = v25;
      __src = v26;
      HIDWORD(v25) = 0;
      goto LABEL_7;
    }
    v4 = v25;
    v5 = *(unsigned int *)(a1 + 40);
    if (v5 >= v25)
    {
      if ((_DWORD)v25)
        memmove(*v2, __src, 8 * v25);
LABEL_6:
      *(_DWORD *)(a1 + 40) = v4;
LABEL_7:
      LODWORD(v25) = 0;
      v3 = __src;
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 44) < v25)
    {
      *(_DWORD *)(a1 + 40) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2, a1 + 48, v4, 8);
    }
    else if ((_DWORD)v5)
    {
      v21 = *(unsigned int *)(a1 + 40);
      memmove(*v2, __src, 8 * v5);
      v15 = v21;
LABEL_32:
      if (v15 != v25)
        memcpy((char *)*v2 + 8 * v15, (char *)__src + 8 * v15, 8 * v25 - 8 * v15);
      goto LABEL_6;
    }
    v15 = 0;
    goto LABEL_32;
  }
LABEL_8:
  *(_DWORD *)(a1 + 96) = v27;
  if (v3 != v26)
    free(v3);
  v6 = (void **)(a1 + 104);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&__src, a1);
  v7 = __src;
  if ((void **)(a1 + 104) != &__src)
  {
    if (__src != v26)
    {
      v19 = *(void **)(a1 + 104);
      if (v19 != (void *)(a1 + 120))
      {
        free(v19);
        v7 = __src;
      }
      *(_QWORD *)(a1 + 104) = v7;
      *(_QWORD *)(a1 + 112) = v25;
      __src = v26;
      HIDWORD(v25) = 0;
      goto LABEL_16;
    }
    v8 = v25;
    v9 = *(unsigned int *)(a1 + 112);
    if (v9 >= v25)
    {
      if ((_DWORD)v25)
        memmove(*v6, __src, 8 * v25);
LABEL_15:
      *(_DWORD *)(a1 + 112) = v8;
LABEL_16:
      LODWORD(v25) = 0;
      v7 = __src;
      goto LABEL_17;
    }
    if (*(_DWORD *)(a1 + 116) < v25)
    {
      *(_DWORD *)(a1 + 112) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 104, a1 + 120, v8, 8);
    }
    else if ((_DWORD)v9)
    {
      v22 = *(unsigned int *)(a1 + 112);
      memmove(*v6, __src, 8 * v9);
      v16 = v22;
LABEL_37:
      if (v16 != v25)
        memcpy((char *)*v6 + 8 * v16, (char *)__src + 8 * v16, 8 * v25 - 8 * v16);
      goto LABEL_15;
    }
    v16 = 0;
    goto LABEL_37;
  }
LABEL_17:
  *(_DWORD *)(a1 + 168) = v27;
  if (v7 != v26)
    free(v7);
  v10 = (void **)(a1 + 176);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 168))(&__src, a1);
  v11 = __src;
  if ((void **)(a1 + 176) != &__src)
  {
    if (__src != v26)
    {
      v20 = *(void **)(a1 + 176);
      if (v20 != (void *)(a1 + 192))
      {
        free(v20);
        v11 = __src;
      }
      *(_QWORD *)(a1 + 176) = v11;
      *(_QWORD *)(a1 + 184) = v25;
      __src = v26;
      HIDWORD(v25) = 0;
      goto LABEL_25;
    }
    v12 = v25;
    v13 = *(unsigned int *)(a1 + 184);
    if (v13 >= v25)
    {
      if ((_DWORD)v25)
        memmove(*v10, __src, 8 * v25);
LABEL_24:
      *(_DWORD *)(a1 + 184) = v12;
LABEL_25:
      LODWORD(v25) = 0;
      v11 = __src;
      goto LABEL_26;
    }
    if (*(_DWORD *)(a1 + 188) < v25)
    {
      *(_DWORD *)(a1 + 184) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 176, a1 + 192, v12, 8);
    }
    else if ((_DWORD)v13)
    {
      v23 = *(unsigned int *)(a1 + 184);
      memmove(*v10, __src, 8 * v13);
      v17 = v23;
LABEL_42:
      if (v17 != v25)
        memcpy((char *)*v10 + 8 * v17, (char *)__src + 8 * v17, 8 * v25 - 8 * v17);
      goto LABEL_24;
    }
    v17 = 0;
    goto LABEL_42;
  }
LABEL_26:
  *(_DWORD *)(a1 + 240) = v27;
  if (v11 != v26)
    free(v11);
  return 0;
}

uint64_t sub_1C4776DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  unsigned int v9;
  int v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  _DWORD *v24;
  int v25;
  int v26;
  _DWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  _DWORD *v37;
  int v38;
  _DWORD *v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  int v59;
  int v60;
  int v61;
  char *v62;
  int v63;
  unsigned int v64;
  char *v65;
  int v66;
  char *v67;
  int v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  char *v72;
  _DWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t *v80;
  int v81;
  unsigned int v82;
  _DWORD *v83;
  int v84;
  _DWORD *v85;
  int v86;
  int v87;
  BOOL v88;
  unsigned int v89;
  _DWORD *v90;
  _DWORD *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  uint64_t UniqueVRegDef;
  uint64_t v111;
  uint64_t v112;
  uint64_t **v113;
  uint64_t *v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned int v120;
  __int32 v121;
  unsigned int v122;
  __int32 *v123;
  char *v124;
  unsigned int v125;
  uint64_t v126;
  int *v127;
  int v128;
  int v129;
  int v130;
  __int32 *v131;
  __int32 *v132;
  int v133;
  __int32 *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  const llvm::MachineOperand *v141;
  int v142;
  int v143;
  int v144;
  uint64_t *v145;
  int v146;
  unsigned int v147;
  int v148;
  int v149;
  unsigned int v150;
  uint64_t RegClassConstraint;
  uint64_t v152;
  uint64_t IncompleteVirtualRegister;
  uint64_t v154;
  llvm::MachineFunction *v155;
  llvm::MachineInstr *v156;
  llvm::MachineInstr *v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  char *v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  llvm::MachineFunction *v175;
  llvm::MachineInstr *v176;
  llvm::MachineInstr *v177;
  llvm::MachineInstr *v178;
  unsigned int i;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t **v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int8 **v193;
  int v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  __int128 v199;
  char v200;
  uint64_t v201;
  int32x2_t v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _DWORD *v207;
  uint64_t v208;
  _BYTE v209[16];
  __int128 v210;
  uint64_t v211;
  char *v212;
  size_t __n;
  _BYTE v214[16];
  uint64_t **v215;
  uint64_t v216;
  _BYTE v217[256];
  _QWORD *v218;
  uint64_t v219;
  _QWORD v220[7];

  v220[4] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 328);
  v187 = a2 + 320;
  while (v4 != v187)
  {
    v218 = v220;
    v219 = 0x400000000;
    v201 = 0;
    v202 = 0;
    v203 = 0;
    v215 = (uint64_t **)v217;
    v216 = 0x2000000000;
    v5 = v4 + 48;
    v188 = v4;
    v6 = *(_QWORD *)(v4 + 56);
    v191 = v4 + 48;
    if (v6 == v4 + 48)
      goto LABEL_283;
    do
    {
      v7 = *(unsigned __int16 **)(v6 + 16);
      v8 = *v7;
      if ((v8 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(v6 + 32) + 48) & 8) != 0)
        goto LABEL_158;
      v9 = *(unsigned __int16 *)(v6 + 44);
      v29 = (v9 & 0xC) == 0;
      v10 = (v9 >> 2) & 1;
      v11 = v29 ? 1 : v10;
      v12 = *((_QWORD *)v7 + 1);
      if ((v11 & 1) != 0)
      {
        if ((v12 & 0x80000) != 0)
          goto LABEL_158;
      }
      else
      {
        v101 = v6;
        if ((v12 & 0x80000) != 0)
          goto LABEL_158;
        while ((*(_WORD *)(v101 + 44) & 8) != 0)
        {
          v101 = *(_QWORD *)(v101 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v101 + 16) + 10) & 8) != 0)
            goto LABEL_158;
        }
      }
      if ((v8 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(v6 + 32) + 48) & 0x10) != 0)
      {
LABEL_158:
        if (*v7 <= 0x2E06u)
        {
          if (*v7 <= 0x9C6u)
          {
            if ((v8 - 404) > 0x3B || ((1 << (v8 + 108)) & 0xCC3300330033033) == 0)
            {
              v102 = v8 - 753;
              if (v102 > 0x3B)
                goto LABEL_198;
              v103 = 1 << v102;
              v104 = 0xCC3300330033033;
LABEL_172:
              if ((v103 & v104) == 0)
                goto LABEL_198;
            }
            goto LABEL_185;
          }
          if (*v7 > 0x2D55u)
          {
            if ((v8 - 11705) > 0x19 || ((1 << (v8 + 71)) & 0x3C0780F) == 0)
            {
              v105 = -11606;
LABEL_178:
              v107 = v8 + v105;
              if (v107 > 0x31 || ((1 << v107) & 0x3C0000000000FLL) == 0)
                goto LABEL_198;
            }
            goto LABEL_191;
          }
          if ((v8 - 2503) <= 0x26 && ((1 << (v8 + 57)) & 0x5555000005) != 0)
            goto LABEL_191;
          v109 = -11588;
LABEL_190:
          if ((v8 + v109) >= 4)
            goto LABEL_198;
          goto LABEL_191;
        }
        if (*v7 <= 0x2E87u)
        {
          if ((v8 - 11783) > 0x3F || ((1 << (v8 - 7)) & 0xC003300330033033) == 0)
          {
            v106 = v8 - 11849;
            if (v106 > 0x3C)
              goto LABEL_198;
            v103 = 1 << v106;
            v104 = 0x1801981983C00003;
            goto LABEL_172;
          }
LABEL_185:
          v108 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 36);
          LOBYTE(v210) = 0;
          LOBYTE(__n) = 0;
          sub_1C4778A94((uint64_t)&v210, v108, *(_QWORD *)(a1 + 264), 1003, 2);
        }
        else
        {
          if (*v7 <= 0x33AEu)
          {
            if ((v8 - 11912) <= 0x2B && ((1 << (v8 + 120)) & 0xF0CC0033003) != 0)
              goto LABEL_185;
            v109 = -13213;
            goto LABEL_190;
          }
          if ((v8 - 13330) > 0x19 || ((1 << (v8 - 18)) & 0x3C0780F) == 0)
          {
            v105 = -13231;
            goto LABEL_178;
          }
LABEL_191:
          v108 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 36);
          LOBYTE(v210) = 0;
          LOBYTE(__n) = 0;
          sub_1C477841C((uint64_t)&v210, v108, *(_QWORD *)(a1 + 264));
        }
        if ((_BYTE)__n)
        {
          if ((**(_DWORD **)(v6 + 32) & 0xFFF00) == 0)
          {
            sub_1C4778544(v6, &v210, 1u);
            if (sub_1C4778650(*(_QWORD *)(a1 + 264), v108))
            {
              UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 264), v108);
              v111 = v219;
              if (v219 >= (unint64_t)HIDWORD(v219))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v218, (uint64_t)v220, v219 + 1, 8);
                v111 = v219;
              }
              v218[v111] = UniqueVRegDef;
              LODWORD(v219) = v219 + 1;
            }
          }
        }
        goto LABEL_198;
      }
      if ((v11 & 1) != 0)
      {
        if ((v12 & 0x100000) != 0)
          goto LABEL_158;
      }
      else
      {
        v112 = v6;
        if ((v12 & 0x100000) != 0)
          goto LABEL_158;
        while ((*(_WORD *)(v112 + 44) & 8) != 0)
        {
          v112 = *(_QWORD *)(v112 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v112 + 16) + 10) & 0x10) != 0)
            goto LABEL_158;
        }
      }
      if ((*((_QWORD *)v7 + 2) & 1) == 0)
        goto LABEL_198;
      *(_QWORD *)&v210 = 1;
      *((_QWORD *)&v210 + 1) = -1;
      v211 = -1;
      v212 = v214;
      __n = 0x400000000;
      v204 = 1;
      v205 = -1;
      v206 = -1;
      v207 = v209;
      v208 = 0x400000000;
      v13 = sub_1C47786AC(v6, (uint64_t)&v210, (uint64_t)&v204);
      v14 = v13;
      v15 = v208 + (unint64_t)__n;
      if (v15 <= v13)
      {
        v44 = v13 - v15;
      }
      else
      {
        v16 = v216;
        if (v216 >= (unint64_t)HIDWORD(v216))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v215, (uint64_t)v217, v216 + 1, 8);
          v16 = v216;
        }
        v215[v16] = (uint64_t *)v6;
        LODWORD(v216) = v216 + 1;
        if (__n > v14)
        {
          v17 = (unsigned int *)v212;
          v18 = &v212[4 * __n];
          while (1)
          {
            v19 = *v17;
            if (!v203)
            {
              v31 = 0;
              *(_QWORD *)&v198 = v19 | 0x100000000;
LABEL_54:
              v43 = sub_1C476C0AC((uint64_t)&v201, (uint64_t)&v198, &v198, v31);
              *(_QWORD *)v43 = v198;
              goto LABEL_55;
            }
            v20 = v201;
            v21 = 37 * v19;
            v22 = v203 - 1;
            v23 = (v203 - 1) & (37 * v19);
            v24 = (_DWORD *)(v201 + 8 * v23);
            v25 = *v24;
            if (v19 != *v24)
              break;
            if (v203 == v23)
              goto LABEL_21;
LABEL_40:
            v35 = v24[1] + 1;
            *v24 = -2;
            v202 = vadd_s32(v202, (int32x2_t)0x1FFFFFFFFLL);
            *(_QWORD *)&v198 = __PAIR64__(v35, v19);
            if (!v203)
            {
              v31 = 0;
              goto LABEL_54;
            }
            v36 = (v203 - 1) & v21;
            v37 = (_DWORD *)(v20 + 8 * v36);
            v38 = *v37;
            if (v19 != *v37)
            {
              v39 = 0;
              v40 = 1;
              while (v38 != -1)
              {
                if (v39)
                  v41 = 0;
                else
                  v41 = v38 == -2;
                if (v41)
                  v39 = v37;
                v42 = v36 + v40++;
                v36 = v42 & (v203 - 1);
                v37 = (_DWORD *)(v20 + 8 * v36);
                v38 = *v37;
                if (v19 == *v37)
                  goto LABEL_55;
              }
              if (v39)
                v31 = v39;
              else
                v31 = v37;
              goto LABEL_54;
            }
LABEL_55:
            if (++v17 == (unsigned int *)v18)
              goto LABEL_59;
          }
          v32 = 1;
          LODWORD(v33) = v22 & v21;
          while (v25 != -1)
          {
            v34 = v33 + v32++;
            v33 = v34 & v22;
            v25 = *(_DWORD *)(v201 + 8 * v33);
            if (v19 == v25)
            {
              if ((_DWORD)v33 == v203)
                break;
              v24 = (_DWORD *)(v201 + 8 * v33);
              goto LABEL_40;
            }
          }
LABEL_21:
          LODWORD(v198) = *v17;
          DWORD1(v198) = 1;
          v26 = *v24;
          if (v19 != *v24)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != -1)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v26 == -2;
              if (v29)
                v27 = v24;
              v30 = v23 + v28++;
              v23 = v30 & v22;
              v24 = (_DWORD *)(v201 + 8 * (v30 & v22));
              v26 = *v24;
              if (v19 == *v24)
                goto LABEL_55;
            }
            if (v27)
              v31 = v27;
            else
              v31 = v24;
            goto LABEL_54;
          }
          goto LABEL_55;
        }
LABEL_59:
        v44 = 0;
      }
      v45 = *((unsigned __int8 *)v7 + 4);
      if ((v7[5] & 0x40) != 0 && v7[1])
      {
        v46 = 0;
        v47 = (char *)(*((_QWORD *)v7 + 5) + 2);
        while (1)
        {
          v48 = *v47;
          v47 += 6;
          if ((v48 & 2) != 0)
            break;
          if (v7[1] == ++v46)
            goto LABEL_65;
        }
      }
      else
      {
LABEL_65:
        LODWORD(v46) = -1;
      }
      if (v44 && v46 > v45)
      {
        v49 = v46;
        while (2)
        {
          v50 = *(_QWORD *)(v6 + 32);
          if ((*(_DWORD *)(v50 + 32 * v45) & 0xFFFFF) != 0)
            goto LABEL_127;
          v51 = v50 + 32 * v45;
          v54 = *(_DWORD *)(v51 + 4);
          v53 = (int *)(v51 + 4);
          v52 = v54;
          v55 = *(_QWORD *)(a1 + 264);
          sub_1C477841C((uint64_t)&v198, v54, v55);
          if (!v200)
          {
            sub_1C4778A94((uint64_t)&v198, v52, v55, 1381, 4);
            if (!v200)
              sub_1C4778A94((uint64_t)&v198, v52, v55, 1003, 2);
          }
          v56 = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 264), v52);
          if (v56
            && **(_WORD **)(v56 + 16) == 740
            && (v57 = *(_QWORD *)(v56 + 32), v59 = *(unsigned __int8 *)(v57 + 32), v58 = (__int128 *)(v57 + 32), !v59)
            && (*(_DWORD *)(*(_QWORD *)(v56 + 32) + 36) - 771) > 0xFFFFFDFF)
          {
            v96 = v58[1];
            v195 = *v58;
            v196 = v96;
            LOBYTE(v197) = 1;
          }
          else
          {
            v197 = 0;
            v195 = 0u;
            v196 = 0u;
          }
          if (v200)
          {
            sub_1C4778544(v6, &v198, v45);
            v60 = *v53 + (*(_DWORD *)(v50 + 32 * v45 + 16) << 16);
            v194 = v60;
            if ((v210 & 1) != 0)
            {
              v61 = 4;
              v62 = (char *)&v210 + 8;
              goto LABEL_81;
            }
            v61 = v211;
            if (!(_DWORD)v211)
            {
              v72 = 0;
              goto LABEL_95;
            }
            v62 = (char *)*((_QWORD *)&v210 + 1);
LABEL_81:
            v63 = v61 - 1;
            v64 = v63 & (37 * v60);
            v65 = &v62[4 * v64];
            v66 = *(_DWORD *)v65;
            if (v60 == *(_DWORD *)v65)
            {
              v69 = 0;
            }
            else
            {
              v67 = 0;
              v68 = 1;
              while (v66 != -1)
              {
                v69 = 0;
                if (v67)
                  v70 = 0;
                else
                  v70 = v66 == -2;
                if (v70)
                  v67 = v65;
                v71 = v64 + v68++;
                v64 = v71 & v63;
                v65 = &v62[4 * v64];
                v66 = *(_DWORD *)v65;
                if (v60 == *(_DWORD *)v65)
                  goto LABEL_98;
              }
              if (v67)
                v72 = v67;
              else
                v72 = v65;
LABEL_95:
              v73 = sub_1C47686DC((uint64_t)&v210, (uint64_t)&v194, &v194, v72);
              *v73 = v194;
              v74 = v194;
              v75 = __n;
              if (__n >= (unint64_t)HIDWORD(__n))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, (uint64_t)v214, __n + 1, 4);
                v75 = __n;
              }
              *(_DWORD *)&v212[4 * v75] = v74;
              LODWORD(__n) = __n + 1;
              v69 = -1;
            }
LABEL_98:
            v44 += v69;
            if (sub_1C4778650(*(_QWORD *)(a1 + 264), v52))
            {
              v76 = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 264), v52);
              v77 = v219;
              if (v219 >= (unint64_t)HIDWORD(v219))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v218, (uint64_t)v220, v219 + 1, 8);
                v77 = v219;
              }
              v218[v77] = v76;
              LODWORD(v219) = v219 + 1;
            }
          }
          if ((_BYTE)v197)
          {
            sub_1C4778544(v6, &v195, v45);
            v78 = *v53;
            v194 = *v53;
            if ((v204 & 1) != 0)
            {
              v79 = 4;
              v80 = &v205;
              goto LABEL_105;
            }
            v79 = v206;
            if (!(_DWORD)v206)
            {
              v90 = 0;
              goto LABEL_119;
            }
            v80 = (uint64_t *)v205;
LABEL_105:
            v81 = v79 - 1;
            v82 = v81 & (37 * v78);
            v83 = (_DWORD *)v80 + v82;
            v84 = *v83;
            if (v78 == *v83)
            {
              v87 = 0;
            }
            else
            {
              v85 = 0;
              v86 = 1;
              while (v84 != -1)
              {
                v87 = 0;
                if (v85)
                  v88 = 0;
                else
                  v88 = v84 == -2;
                if (v88)
                  v85 = v83;
                v89 = v82 + v86++;
                v82 = v89 & v81;
                v83 = (_DWORD *)v80 + v82;
                v84 = *v83;
                if (v78 == *v83)
                  goto LABEL_122;
              }
              if (v85)
                v90 = v85;
              else
                v90 = v83;
LABEL_119:
              v91 = sub_1C47686DC((uint64_t)&v204, (uint64_t)&v194, &v194, v90);
              *v91 = v194;
              v92 = v194;
              v93 = v208;
              if (v208 >= (unint64_t)HIDWORD(v208))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v207, (uint64_t)v209, v208 + 1, 4);
                v93 = v208;
              }
              v207[v93] = v92;
              LODWORD(v208) = v208 + 1;
              v87 = -1;
            }
LABEL_122:
            v44 += v87;
            if (sub_1C4778650(*(_QWORD *)(a1 + 264), v52))
            {
              v94 = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 264), v52);
              v95 = v219;
              if (v219 >= (unint64_t)HIDWORD(v219))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v218, (uint64_t)v220, v219 + 1, 8);
                v95 = v219;
              }
              v49 = v46;
              v218[v95] = v94;
              LODWORD(v219) = v219 + 1;
              goto LABEL_127;
            }
          }
          v49 = v46;
LABEL_127:
          if (++v45 >= v49 || !v44)
            break;
          continue;
        }
      }
      v97 = v46 - v45;
      if (v46 > v45)
      {
        v98 = 32 * v45;
        do
        {
          v99 = *(_QWORD *)(v6 + 32);
          if (!*(_BYTE *)(v99 + v98))
          {
            v100 = *(_DWORD *)(v99 + v98 + 4);
            if (v100 < 0)
              sub_1C51A3F30(*(_QWORD **)(a1 + 264), v100, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24) + 16 * (v100 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E7F984F0, 0);
          }
          v98 += 32;
          --v97;
        }
        while (v97);
      }
      if (v207 != (_DWORD *)v209)
        free(v207);
      v5 = v191;
      if ((v204 & 1) == 0)
        MEMORY[0x1CAA32FB4](v205, 4);
      if (v212 != v214)
        free(v212);
      if ((v210 & 1) == 0)
        MEMORY[0x1CAA32FB4](*((_QWORD *)&v210 + 1), 4);
LABEL_198:
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        while ((*(_WORD *)(v6 + 44) & 8) != 0)
          v6 = *(_QWORD *)(v6 + 8);
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6 != v5);
    if ((_DWORD)v216)
    {
      v113 = v215;
      v189 = (char *)&v215[v216];
      while (1)
      {
        v190 = v113;
        v114 = *v113;
        v115 = (*v113)[2];
        *(_QWORD *)&v210 = 1;
        *((_QWORD *)&v210 + 1) = -1;
        v211 = -1;
        v212 = v214;
        __n = 0x400000000;
        v204 = 1;
        v205 = -1;
        v206 = -1;
        v207 = v209;
        v208 = 0x400000000;
        v116 = sub_1C47786AC((uint64_t)v114, (uint64_t)&v210, (uint64_t)&v204);
        v117 = v208;
        v118 = __n;
        if (__n + (unint64_t)v208 > v116)
        {
          v119 = v116;
          v120 = v208;
          do
          {
            if (v120)
            {
              sub_1C4778FB4((uint64_t)&v204, v207[v117 - 1]);
              v120 = v208 - 1;
              LODWORD(v208) = v208 - 1;
            }
            else
            {
              v121 = 0;
              if (v118)
              {
                v122 = 0;
                v123 = (__int32 *)v212;
                v124 = &v212[4 * v118];
                v125 = v203 - 1;
                do
                {
                  if (v203)
                  {
                    LODWORD(v126) = (37 * *v123) & v125;
                    v127 = (int *)(v201 + 8 * v126);
                    v128 = *v127;
                    if (*v123 == *v127)
                    {
LABEL_217:
                      if ((int *)(v201 + 8 * v203) != v127 && v127[1] > v122)
                      {
                        v121 = *v123;
                        v122 = v127[1];
                      }
                    }
                    else
                    {
                      v129 = 1;
                      while (v128 != -1)
                      {
                        v130 = v126 + v129++;
                        v126 = v130 & v125;
                        v128 = *(_DWORD *)(v201 + 8 * v126);
                        if (*v123 == v128)
                        {
                          v127 = (int *)(v201 + 8 * v126);
                          goto LABEL_217;
                        }
                      }
                    }
                  }
                  ++v123;
                }
                while (v123 != (__int32 *)v124);
              }
              if (sub_1C4778FB4((uint64_t)&v210, v121))
              {
                v131 = (__int32 *)&v212[4 * __n];
                v132 = wmemchr((__int32 *)v212, v121, __n);
                if (!v132)
                  v132 = v131;
                v133 = __n;
                v134 = (__int32 *)&v212[4 * __n];
                if (v134 != v132 + 1)
                {
                  memmove(v132, v132 + 1, (char *)v134 - (char *)(v132 + 1));
                  v133 = __n;
                }
                LODWORD(__n) = v133 - 1;
              }
              v120 = v208;
            }
            v117 = v120;
            v118 = __n;
          }
          while (__n + (unint64_t)v120 > v119);
        }
        v135 = *(unsigned __int8 *)(v115 + 4);
        if ((*(_BYTE *)(v115 + 10) & 0x40) == 0 || !*(_WORD *)(v115 + 2))
          break;
        v136 = 0;
        v137 = (char *)(*(_QWORD *)(v115 + 40) + 2);
        while (1)
        {
          v138 = *v137;
          v137 += 6;
          if ((v138 & 2) != 0)
            break;
          if (*(unsigned __int16 *)(v115 + 2) == ++v136)
            goto LABEL_239;
        }
        if (v136 > v135)
          goto LABEL_240;
LABEL_274:
        if (v207 != (_DWORD *)v209)
          free(v207);
        if ((v204 & 1) == 0)
          MEMORY[0x1CAA32FB4](v205, 4);
        if (v212 != v214)
          free(v212);
        if ((v210 & 1) == 0)
          MEMORY[0x1CAA32FB4](*((_QWORD *)&v210 + 1), 4);
        v113 = v190 + 1;
        if (v190 + 1 == (uint64_t **)v189)
          goto LABEL_283;
      }
LABEL_239:
      LODWORD(v136) = -1;
LABEL_240:
      v193 = (unsigned __int8 **)(v114 + 7);
      v139 = v136;
      v192 = v136;
      while (1)
      {
        v140 = v114[4];
        v141 = (const llvm::MachineOperand *)(v140 + 32 * v135);
        v142 = *(unsigned __int8 *)v141;
        if (*(_BYTE *)v141)
          goto LABEL_255;
        v143 = *((_DWORD *)v141 + 1);
        if ((v143 - 259) > 0x1FF)
          goto LABEL_255;
        if ((v204 & 1) != 0)
          break;
        v144 = v206;
        if ((_DWORD)v206)
        {
          v145 = (uint64_t *)v205;
          goto LABEL_245;
        }
LABEL_252:
        RegClassConstraint = llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)v114, v135, *(const llvm::TargetInstrInfo **)(a1 + 248), *(const llvm::TargetRegisterInfo **)(a1 + 256));
        v152 = *(_QWORD *)(a1 + 264);
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v152, "", 0);
        *(_QWORD *)(*(_QWORD *)(v152 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = RegClassConstraint & 0xFFFFFFFFFFFFFFFBLL;
        v154 = *(_QWORD *)(v152 + 8);
        if (v154)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v154 + 24))(v154, IncompleteVirtualRegister);
        sub_1C51A3F30(*(_QWORD **)(a1 + 264), IncompleteVirtualRegister, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E7F984F0, 0);
        v155 = sub_1C4779044(v114[3], (uint64_t)v114, v193, *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 66288, IncompleteVirtualRegister);
        v157 = v156;
        LODWORD(v198) = 1;
        *((_QWORD *)&v198 + 1) = 0;
        *(_QWORD *)&v199 = 0;
        llvm::MachineInstr::addOperand(v156, v155, (const llvm::MachineOperand *)&v198);
        llvm::MachineInstr::addOperand(v157, v155, (const llvm::MachineOperand *)(v140 + 32 * v135));
        LODWORD(v198) = 1;
        *((_QWORD *)&v198 + 1) = 0;
        *(_QWORD *)&v199 = 0;
        llvm::MachineInstr::addOperand(v157, v155, (const llvm::MachineOperand *)&v198);
        llvm::MachineInstr::addOperand(v157, v155, (const llvm::MachineOperand *)(v140 + 32 * v135));
        LODWORD(v198) = 1;
        *((_QWORD *)&v198 + 1) = 0;
        *(_QWORD *)&v199 = 0;
        llvm::MachineInstr::addOperand(v157, v155, (const llvm::MachineOperand *)&v198);
        llvm::MachineInstr::addOperand(v157, v155, (const llvm::MachineOperand *)(v140 + 32 * v135));
        LODWORD(v198) = 1;
        *((_QWORD *)&v198 + 1) = 0;
        *(_QWORD *)&v199 = 0;
        llvm::MachineInstr::addOperand(v157, v155, (const llvm::MachineOperand *)&v198);
        v198 = 0u;
        v199 = 0u;
        llvm::MachineInstr::addOperand(v157, v155, (const llvm::MachineOperand *)&v198);
        LODWORD(v198) = 1;
        *((_QWORD *)&v198 + 1) = 0;
        *(_QWORD *)&v199 = 0;
        llvm::MachineInstr::addOperand(v157, v155, (const llvm::MachineOperand *)&v198);
        v198 = 0u;
        v199 = 0u;
        llvm::MachineInstr::addOperand(v157, v155, (const llvm::MachineOperand *)&v198);
        llvm::MachineOperand::ChangeToRegister(v140 + 32 * v135, IncompleteVirtualRegister, 0, 0, 0, 0, 0, 0);
        v142 = *(unsigned __int8 *)v141;
        v139 = v192;
LABEL_255:
        if (v142 == 7)
        {
          v158 = v140 + 32 * v135;
          v159 = *(_DWORD *)(v158 + 16);
          v160 = *(_DWORD *)(v158 + 4);
          if ((v210 & 1) != 0)
          {
            v161 = 4;
            v162 = (char *)&v210 + 8;
          }
          else
          {
            v161 = v211;
            if (!(_DWORD)v211)
              goto LABEL_265;
            v162 = (char *)*((_QWORD *)&v210 + 1);
          }
          v163 = v160 + (v159 << 16);
          v164 = v161 - 1;
          v165 = (v161 - 1) & (37 * v163);
          v166 = *(_DWORD *)&v162[4 * v165];
          if (v163 != v166)
          {
            v167 = 1;
            while (v166 != -1)
            {
              v168 = v165 + v167++;
              v165 = v168 & v164;
              v166 = *(_DWORD *)&v162[4 * v165];
              if (v163 == v166)
                goto LABEL_271;
            }
LABEL_265:
            v169 = llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)v114, v135, *(const llvm::TargetInstrInfo **)(a1 + 248), *(const llvm::TargetRegisterInfo **)(a1 + 256));
            v170 = *(_QWORD *)(a1 + 264);
            v171 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v170, "", 0);
            *(_QWORD *)(*(_QWORD *)(v170 + 24) + 16 * (v171 & 0x7FFFFFFF)) = v169 & 0xFFFFFFFFFFFFFFFBLL;
            v172 = *(_QWORD *)(v170 + 8);
            if (v172)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v172 + 24))(v172, v171);
            sub_1C51A3F30(*(_QWORD **)(a1 + 264), v171, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24) + 16 * (v171 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E7F984F0, 0);
            v173 = v114[3];
            v174 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8);
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 264)
                           + 24
                           * (*(unsigned __int16 *)(*(_QWORD *)v169 + 24)
                            + *(_DWORD *)(*(_QWORD *)(a1 + 256) + 272)
                            * ((*(_QWORD *)(*(_QWORD *)(a1 + 256) + 248)
                                            - *(_QWORD *)(*(_QWORD *)(a1 + 256) + 240)) >> 3))) == 32)
            {
              v175 = sub_1C4779044(v173, (uint64_t)v114, v193, v174 + 66288, v171);
              v177 = v176;
              LODWORD(v198) = 1;
              *((_QWORD *)&v198 + 1) = 0;
              *(_QWORD *)&v199 = 0;
              llvm::MachineInstr::addOperand(v176, v175, (const llvm::MachineOperand *)&v198);
              llvm::MachineInstr::addOperand(v177, v175, v141);
              LODWORD(v198) = 1;
              *((_QWORD *)&v198 + 1) = 0;
              *(_QWORD *)&v199 = 0;
              llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v198);
              llvm::MachineInstr::addOperand(v177, v175, v141);
              LODWORD(v198) = 1;
              *((_QWORD *)&v198 + 1) = 0;
              *(_QWORD *)&v199 = 0;
              llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v198);
              llvm::MachineInstr::addOperand(v177, v175, v141);
              LODWORD(v198) = 1;
              *((_QWORD *)&v198 + 1) = 0;
              *(_QWORD *)&v199 = 0;
              llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v198);
              v198 = 0u;
              v199 = 0u;
              llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v198);
              LODWORD(v198) = 1;
              v139 = v192;
            }
            else
            {
              v175 = sub_1C4779044(v173, (uint64_t)v114, v193, v174 + 48144, v171);
              v177 = v178;
              LODWORD(v198) = 1;
              *((_QWORD *)&v198 + 1) = 0;
              *(_QWORD *)&v199 = 0;
              llvm::MachineInstr::addOperand(v178, v175, (const llvm::MachineOperand *)&v198);
              llvm::MachineInstr::addOperand(v177, v175, v141);
              LODWORD(v198) = 1;
              *((_QWORD *)&v198 + 1) = 0;
              *(_QWORD *)&v199 = 0;
              llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v198);
              llvm::MachineInstr::addOperand(v177, v175, v141);
              LODWORD(v198) = 1;
              *((_QWORD *)&v198 + 1) = 0;
              *(_QWORD *)&v199 = 0;
              llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v198);
              llvm::MachineInstr::addOperand(v177, v175, v141);
              LODWORD(v198) = 1;
              *((_QWORD *)&v198 + 1) = 0;
              *(_QWORD *)&v199 = 0;
              llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v198);
              llvm::MachineInstr::addOperand(v177, v175, v141);
              LODWORD(v198) = 1;
              *((_QWORD *)&v198 + 1) = 0;
              *(_QWORD *)&v199 = 0;
              llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v198);
              v198 = 0u;
              v199 = 0u;
              llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v198);
              LODWORD(v198) = 1;
            }
            *((_QWORD *)&v198 + 1) = 0;
            *(_QWORD *)&v199 = 0;
            llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v198);
            v198 = 0u;
            v199 = 0u;
            llvm::MachineInstr::addOperand(v177, v175, (const llvm::MachineOperand *)&v198);
            llvm::MachineOperand::ChangeToRegister((uint64_t)v141, v171, 0, 0, 0, 0, 0, 0);
          }
        }
LABEL_271:
        if (++v135 == v139)
          goto LABEL_274;
      }
      v144 = 4;
      v145 = &v205;
LABEL_245:
      v146 = v144 - 1;
      v147 = v146 & (37 * v143);
      v148 = *((_DWORD *)v145 + v147);
      if (v143 == v148)
        goto LABEL_255;
      v149 = 1;
      while (v148 != -1)
      {
        v150 = v147 + v149++;
        v147 = v150 & v146;
        v148 = *((_DWORD *)v145 + v147);
        if (v143 == v148)
          goto LABEL_255;
      }
      goto LABEL_252;
    }
LABEL_283:
    for (i = v219; (_DWORD)v219; i = v219)
    {
      v180 = v218[i - 1];
      LODWORD(v219) = i - 1;
      if (**(_WORD **)(v180 + 16) == 18)
      {
        v181 = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 264), *(_DWORD *)(*(_QWORD *)(v180 + 32) + 36));
        v182 = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 264), *(_DWORD *)(*(_QWORD *)(v180 + 32) + 100));
        v183 = v180;
        if ((*(_BYTE *)v180 & 4) == 0)
        {
          v183 = v180;
          if ((*(_WORD *)(v180 + 44) & 8) != 0)
          {
            v183 = v180;
            do
              v183 = *(_QWORD *)(v183 + 8);
            while ((*(_WORD *)(v183 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v180 + 24) + 40, v180, *(_QWORD *)(v183 + 8));
        if (v181 && sub_1C4778650(*(_QWORD *)(a1 + 264), *(_DWORD *)(*(_QWORD *)(v181 + 32) + 4)))
        {
          v184 = v181;
          if ((*(_BYTE *)v181 & 4) == 0)
          {
            v184 = v181;
            if ((*(_WORD *)(v181 + 44) & 8) != 0)
            {
              v184 = v181;
              do
                v184 = *(_QWORD *)(v184 + 8);
              while ((*(_WORD *)(v184 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v181 + 24) + 40, v181, *(_QWORD *)(v184 + 8));
        }
        if (v181 == v182)
          continue;
        v180 = v182;
        if (!sub_1C4778650(*(_QWORD *)(a1 + 264), *(_DWORD *)(*(_QWORD *)(v182 + 32) + 4)))
          continue;
      }
      v185 = v180;
      if ((*(_BYTE *)v180 & 4) == 0)
      {
        v185 = v180;
        if ((*(_WORD *)(v180 + 44) & 8) != 0)
        {
          v185 = v180;
          do
            v185 = *(_QWORD *)(v185 + 8);
          while ((*(_WORD *)(v185 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v180 + 24) + 40, v180, *(_QWORD *)(v185 + 8));
    }
    if (v215 != (uint64_t **)v217)
      free(v215);
    MEMORY[0x1CAA32FB4](v201, 4);
    if (v218 != v220)
      free(v218);
    v4 = *(_QWORD *)(v188 + 8);
  }
  return 0;
}

double sub_1C477841C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t UniqueVRegDef;
  uint64_t v6;
  uint64_t v7;
  int v8;
  double result;
  _DWORD v10[8];
  char v11;
  int v12;
  _BYTE v13[28];
  char v14;

  UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(a3, a2);
  if (UniqueVRegDef
    && (v6 = UniqueVRegDef, **(_WORD **)(UniqueVRegDef + 16) == 18)
    && *(_DWORD *)(UniqueVRegDef + 40) == 5
    && (sub_1C4778A94((uint64_t)&v12, *(_DWORD *)(*(_QWORD *)(UniqueVRegDef + 32) + 36), a3, 1381, 4), v14)
    && (v7 = *(_QWORD *)(v6 + 32), *(_QWORD *)(v7 + 80) == 33)
    && (sub_1C4778A94((uint64_t)v10, *(_DWORD *)(v7 + 100), a3, 1381, 4), v11)
    && *(_QWORD *)(*(_QWORD *)(v6 + 32) + 144) == 34
    && (*(unsigned int *)v13 | ((unint64_t)*(unsigned int *)&v13[20] << 32)) + 2 == (v10[1] | ((unint64_t)v10[6] << 32)))
  {
    v8 = v12;
    *(_OWORD *)(a1 + 4) = *(_OWORD *)v13;
    result = *(double *)&v13[12];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)&v13[12];
    *(_DWORD *)a1 = v8 & 0xFFF000FF | 0x800;
    *(_BYTE *)(a1 + 32) = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void sub_1C4778544(uint64_t a1, _OWORD *a2, unsigned int a3)
{
  llvm::MachineOperand *v6;
  __int128 v7;
  unsigned int v8;
  llvm::MachineOperand *v9;
  uint64_t v10;
  llvm::MachineOperand *v11;
  uint64_t v12;
  _QWORD v13[33];

  v13[32] = *MEMORY[0x1E0C80C00];
  v11 = (llvm::MachineOperand *)v13;
  v12 = 0x800000000;
  sub_1C4778BB4((unsigned int *)&v11, (uint64_t)v13, (_BYTE *)(*(_QWORD *)(a1 + 32) + 32 * a3), (_BYTE *)(*(_QWORD *)(a1 + 32) + 32 * *(unsigned int *)(a1 + 40)));
  v6 = v11;
  v7 = a2[1];
  *(_OWORD *)v11 = *a2;
  *((_OWORD *)v6 + 1) = v7;
  while (1)
  {
    v8 = *(_DWORD *)(a1 + 40);
    if (v8 <= a3)
      break;
    llvm::MachineInstr::removeOperand(a1, v8 - 1);
  }
  v9 = v11;
  if ((_DWORD)v12)
  {
    v10 = 32 * v12;
    do
    {
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)a1, *(llvm::MachineFunction **)(*(_QWORD *)(a1 + 24) + 32), v9);
      v9 = (llvm::MachineOperand *)((char *)v9 + 32);
      v10 -= 32;
    }
    while (v10);
    v9 = v11;
  }
  if (v9 != (llvm::MachineOperand *)v13)
    free(v9);
}

BOOL sub_1C4778650(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  _BOOL8 result;

  if ((a2 & 0x80000000) != 0)
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * a2);
  v3 = *v2;
  if (!v3)
    return 1;
  if ((*(_BYTE *)(v3 + 3) & 1) == 0)
    return 0;
  do
  {
    v3 = *(_QWORD *)(v3 + 24);
    result = v3 == 0;
  }
  while (v3 && (*(_BYTE *)(v3 + 3) & 1) != 0);
  return result;
}

uint64_t sub_1C47786AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  _DWORD *v31;
  int v32;
  _DWORD *v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  _BOOL4 v37;
  _DWORD *v38;
  _DWORD *v39;
  unsigned int v40;
  unint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  unsigned int v44;
  unint64_t v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v56 = *(_QWORD *)(v6 + 16);
  v58 = &v60;
  v59 = 0x200000000;
  v62 = 0;
  v63 = 0;
  v61 = &v62;
  if ((*(_BYTE *)(v6 + 10) & 0x40) == 0 || !*(_WORD *)(v6 + 2))
  {
LABEL_6:
    v10 = *(unsigned __int8 *)(v6 + 4);
    LODWORD(v7) = -1;
LABEL_7:
    v11 = 0;
    v53 = a2 + 40;
    v54 = a2 + 24;
    v55 = a3 + 8;
    v51 = a3 + 40;
    v52 = a3 + 24;
    v12 = 1;
    while (1)
    {
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(unsigned __int8 *)(v13 + 32 * v10);
      if (v14 == 7)
        break;
      if (v14 != 5)
      {
        if (*(_BYTE *)(v13 + 32 * v10))
        {
          v37 = v14 != 1;
          if (((v37 | v12) & 1) != 0)
          {
            v12 &= v37;
          }
          else
          {
            if ((v56 & 0x10) == 0 || v10 + 1 != (_DWORD)v7)
            {
              v57 = *(_QWORD *)(v13 + 32 * v10 + 16);
              sub_1C4778DC4((uint64_t)&v58, &v57);
            }
            v12 = 0;
          }
          goto LABEL_56;
        }
        v15 = *(_DWORD *)(v13 + 32 * v10 + 4);
        if (v15 - 259 <= 0x1FF)
        {
          v57 = v15;
          if ((*(_BYTE *)a3 & 1) != 0)
          {
            v16 = 4;
            v17 = v55;
            goto LABEL_14;
          }
          v16 = *(_DWORD *)(a3 + 16);
          if (!v16)
          {
            v42 = 0;
            goto LABEL_52;
          }
          v17 = *(_QWORD *)(a3 + 8);
LABEL_14:
          v18 = v16 - 1;
          v19 = v18 & (37 * v15);
          v20 = (_DWORD *)(v17 + 4 * v19);
          v21 = *v20;
          if (v15 != *v20)
          {
            v22 = 0;
            v23 = 1;
            while (v21 != -1)
            {
              if (v22)
                v24 = 0;
              else
                v24 = v21 == -2;
              if (v24)
                v22 = v20;
              v25 = v19 + v23++;
              v19 = v25 & v18;
              v20 = (_DWORD *)(v17 + 4 * v19);
              v21 = *v20;
              if (v15 == *v20)
                goto LABEL_55;
            }
            if (v22)
              v42 = v22;
            else
              v42 = v20;
LABEL_52:
            v43 = sub_1C47686DC(a3, (uint64_t)&v57, &v57, v42);
            *v43 = v57;
            v44 = v57;
            v45 = *(unsigned int *)(a3 + 32);
            if (v45 >= *(unsigned int *)(a3 + 36))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v52, v51, v45 + 1, 4);
              v45 = *(unsigned int *)(a3 + 32);
            }
            *(_DWORD *)(*(_QWORD *)(a3 + 24) + 4 * v45) = v44;
            ++*(_DWORD *)(a3 + 32);
          }
        }
LABEL_55:
        ++v10;
        goto LABEL_56;
      }
      ++v11;
LABEL_56:
      if (++v10 >= v7)
      {
        v46 = v59;
        v47 = v62;
        v48 = v63;
        goto LABEL_64;
      }
    }
    v26 = *(_DWORD *)(v13 + 32 * v10 + 4) + (*(_DWORD *)(v13 + 32 * v10 + 16) << 16);
    v57 = v26;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v27 = 4;
      v28 = a2 + 8;
    }
    else
    {
      v27 = *(_DWORD *)(a2 + 16);
      if (!v27)
      {
        v38 = 0;
        goto LABEL_46;
      }
      v28 = *(_QWORD *)(a2 + 8);
    }
    v29 = v27 - 1;
    v30 = v29 & (37 * v26);
    v31 = (_DWORD *)(v28 + 4 * v30);
    v32 = *v31;
    if (v26 == *v31)
      goto LABEL_55;
    v33 = 0;
    v34 = 1;
    while (v32 != -1)
    {
      if (v33)
        v35 = 0;
      else
        v35 = v32 == -2;
      if (v35)
        v33 = v31;
      v36 = v30 + v34++;
      v30 = v36 & v29;
      v31 = (_DWORD *)(v28 + 4 * v30);
      v32 = *v31;
      if (v26 == *v31)
        goto LABEL_55;
    }
    if (v33)
      v38 = v33;
    else
      v38 = v31;
LABEL_46:
    v39 = sub_1C47686DC(a2, (uint64_t)&v57, &v57, v38);
    *v39 = v57;
    v40 = v57;
    v41 = *(unsigned int *)(a2 + 32);
    if (v41 >= *(unsigned int *)(a2 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v54, v53, v41 + 1, 4);
      v41 = *(unsigned int *)(a2 + 32);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v41) = v40;
    ++*(_DWORD *)(a2 + 32);
    goto LABEL_55;
  }
  v7 = 0;
  v8 = (char *)(*(_QWORD *)(v6 + 40) + 2);
  while (1)
  {
    v9 = *v8;
    v8 += 6;
    if ((v9 & 2) != 0)
      break;
    if (*(unsigned __int16 *)(v6 + 2) == ++v7)
      goto LABEL_6;
  }
  v10 = *(unsigned __int8 *)(v6 + 4);
  if (v7 > v10)
    goto LABEL_7;
  v47 = 0;
  v46 = 0;
  v48 = 0;
  v11 = 0;
LABEL_64:
  sub_1C47655E8((uint64_t)&v61, v47);
  if (v58 != &v60)
    free(v58);
  if (v48)
    v49 = v48;
  else
    v49 = v46;
  return (2 - v11 - v49);
}

__n128 sub_1C4778A94(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5)
{
  uint64_t UniqueVRegDef;
  __n128 result;
  uint64_t v10;
  uint64_t v11;
  const llvm::MachineOperand *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(a3, a2);
  if (!UniqueVRegDef
    || (v10 = UniqueVRegDef, **(unsigned __int16 **)(UniqueVRegDef + 16) != a4)
    || (v11 = *(_QWORD *)(UniqueVRegDef + 32), *(_QWORD *)(v11 + 48))
    || (v12 = (const llvm::MachineOperand *)(v11 + 64), *(_DWORD *)(v11 + 64) != 7)
    || (*(_DWORD *)(v11 + 80) == 64 ? (v13 = ((*(_DWORD *)(v11 + 64) >> 8) & 0xFFF) == a5) : (v13 = 0),
        !v13
     || a5 == 2 && (*(_BYTE *)(v11 + 68) & 1) != 0
     || *(_QWORD *)(v11 + 112)
     || !llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(v11 + 128), (const llvm::MachineOperand *)(v11 + 64))|| (v14 = *(_QWORD *)(v10 + 32), *(_QWORD *)(v14 + 176))|| !llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(v14 + 192), v12)|| (v15 = *(_QWORD *)(v10 + 32), *(_QWORD *)(v15 + 240))|| a4 == 1003&& (!llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(v15 + 256), v12)|| *(_QWORD *)(*(_QWORD *)(v10 + 32) + 304))))
  {
    *(_QWORD *)(a1 + 32) = 0;
    result.n128_u64[0] = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    result = *(__n128 *)v12;
    v16 = *((_OWORD *)v12 + 1);
    *(_OWORD *)a1 = *(_OWORD *)v12;
    *(_OWORD *)(a1 + 16) = v16;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

uint64_t sub_1C4778BB4(unsigned int *a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v10;
  unint64_t v11;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  _BYTE *__src;
  _OWORD *v19;

  v5 = *(_QWORD *)a1;
  v6 = (a2 - *(_QWORD *)a1) >> 5;
  v7 = a1[2];
  if (*(_QWORD *)a1 + 32 * v7 == a2)
  {
    sub_1C4778D38(a1, a3, a4);
    return *(_QWORD *)a1 + 32 * v6;
  }
  v19 = a3;
  v10 = a4 - a3;
  v11 = (a4 - a3) >> 5;
  if (v7 + v11 > a1[3])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v7 + v11, 32);
    v5 = *(_QWORD *)a1;
    v7 = a1[2];
  }
  v13 = (_BYTE *)(v5 + 32 * v7);
  __src = (_BYTE *)(v5 + 32 * v6);
  v14 = (v13 - __src) >> 5;
  if (v14 < v11)
  {
    v15 = v7 + (v10 >> 5);
    a1[2] = v15;
    if (v6 != v7)
    {
      v16 = (_OWORD *)(v5 + 32 * v6);
      memcpy((void *)(v5 + 32 * v15 - 32 * v14), __src, v13 - __src);
      do
      {
        v17 = v19[1];
        *v16 = *v19;
        v16[1] = v17;
        v16 += 2;
        v19 += 2;
        --v14;
      }
      while (v14);
    }
    if (v19 != (_OWORD *)a4)
      memcpy(v13, v19, a4 - (_BYTE *)v19);
    return (uint64_t)__src;
  }
  sub_1C61258E8(a1, &v13[-32 * v11], (char *)(v5 + 32 * v7));
  if (&v13[-32 * v11] != __src)
    memmove(&__src[32 * v11], __src, &v13[-32 * v11] - __src);
  if (v19 == (_OWORD *)a4)
    return (uint64_t)__src;
  memmove(__src, v19, v10);
  return (uint64_t)__src;
}

unsigned int *sub_1C4778D38(unsigned int *result, _BYTE *a2, _BYTE *a3)
{
  unsigned int *v3;
  size_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = result;
  v4 = a3 - a2;
  v5 = result[2];
  v6 = v5 + ((a3 - a2) >> 5);
  if (v6 > result[3])
  {
    v7 = a3;
    v8 = a2;
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6, 32);
    a3 = v7;
    a2 = v8;
    LODWORD(v5) = v3[2];
  }
  if (a2 != a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v3 + 32 * v5), a2, v4);
    LODWORD(v5) = v3[2];
  }
  v3[2] = v5 + (v4 >> 5);
  return result;
}

unint64_t sub_1C4778DC4(uint64_t a1, unsigned int *a2)
{
  unsigned __int8 v4;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int *v11;

  if (*(_QWORD *)(a1 + 40))
  {
    sub_1C4778ED8((uint64_t **)(a1 + 24), a2, a2);
    return ((unint64_t)v4 << 32) | 1;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *a2;
    if (!(_DWORD)v7)
      goto LABEL_11;
    v9 = 4 * v7;
    v10 = *(_DWORD **)a1;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 4;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return 1;
LABEL_10:
    if (v7 > 1)
    {
      do
      {
        v11 = (unsigned int *)(*(_QWORD *)a1 + 4 * v7 - 4);
        sub_1C4778ED8((uint64_t **)(a1 + 24), v11, v11);
        LODWORD(v7) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v7;
      }
      while ((_DWORD)v7);
      sub_1C4778ED8((uint64_t **)(a1 + 24), a2, a2);
    }
    else
    {
LABEL_11:
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v7 + 1, 4);
        v6 = *(_DWORD **)a1;
        v7 = *(unsigned int *)(a1 + 8);
      }
      v6[v7] = v8;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

uint64_t **sub_1C4778ED8(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x20uLL);
    *((_DWORD *)v8 + 7) = *a3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v6 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

uint64_t sub_1C4778FB4(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v3 = 4;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
      return 0;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v4 = v3 - 1;
  LODWORD(v5) = (v3 - 1) & (37 * a2);
  v6 = (int *)(v2 + 4 * v5);
  v7 = *v6;
  if (*v6 == a2)
  {
LABEL_8:
    *v6 = -2;
    v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  v8 = 1;
  while (v7 != -1)
  {
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v7 = *(_DWORD *)(v2 + 4 * v5);
    if (v7 == a2)
    {
      v6 = (int *)(v2 + 4 * v5);
      goto LABEL_8;
    }
  }
  return 0;
}

llvm::MachineFunction *sub_1C4779044(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, int a5)
{
  llvm::MachineFunction *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26[4];

  if ((*(_WORD *)(a2 + 44) & 4) != 0)
    return sub_1C612596C(a1, a2, a3, a4, a5);
  v9 = *(llvm::MachineFunction **)(a1 + 32);
  v10 = *a3;
  v25 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v25, v10, 2);
  v11 = *((_QWORD *)v9 + 28);
  if (v11)
    *((_QWORD *)v9 + 28) = *(_QWORD *)v11;
  else
    v11 = sub_1C484358C((uint64_t)v9 + 128, 72, 3);
  v26[0] = v25;
  if (v25)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v25, v25, (uint64_t)v26);
    v25 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v11, v9, a4, v26, 0);
  if (v26[0])
    llvm::MetadataTracking::untrack((uint64_t)v26, v26[0]);
  if (v25)
    llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v11 + 24) = v12;
  v13 = *(_QWORD *)(v12 + 32);
  v14 = *(unsigned int *)(v11 + 40);
  if ((_DWORD)v14)
  {
    v18 = *(_QWORD *)(v11 + 32);
    v19 = *(_QWORD *)(v13 + 40);
    v20 = 32 * v14;
    do
    {
      if (!*(_BYTE *)v18)
      {
        v21 = *(unsigned int *)(v18 + 4);
        if ((int)v21 >= 0)
          v22 = (uint64_t *)(*(_QWORD *)(v19 + 272) + 8 * v21);
        else
          v22 = (uint64_t *)(*(_QWORD *)(v19 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
        v23 = *v22;
        if (*v22)
        {
          v24 = *(_QWORD *)(v23 + 16);
          *(_QWORD *)(v23 + 16) = v18;
          *(_QWORD *)(v18 + 16) = v24;
          if ((*(_BYTE *)(v18 + 3) & 1) != 0)
          {
            *(_QWORD *)(v18 + 24) = v23;
          }
          else
          {
            *(_QWORD *)(v18 + 24) = 0;
            v22 = (uint64_t *)(v24 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v18 + 16) = v18;
          *(_QWORD *)(v18 + 24) = 0;
        }
        *v22 = v18;
      }
      v18 += 32;
      v20 -= 32;
    }
    while (v20);
  }
  v15 = *(_QWORD *)(v13 + 728);
  if (v15)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 24))(v15, v11);
  v16 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = v16 | *(_QWORD *)v11 & 7;
  *(_QWORD *)(v11 + 8) = a2;
  *(_QWORD *)(v16 + 8) = v11;
  *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v11;
  memset(&v26[1], 0, 24);
  LODWORD(v26[0]) = 0x1000000;
  HIDWORD(v26[0]) = a5;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v11, v9, (const llvm::MachineOperand *)v26);
  return v9;
}

void sub_1C477925C(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, unsigned __int8 **a5, int a6, int a7, int a8, _QWORD *a9)
{
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  llvm::MachineFunction *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  llvm::MachineFunction *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  llvm::MachineFunction *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  llvm::MachineFunction *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unsigned __int8 *v88;
  __int128 v89;
  __int128 v90;

  (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a9 + 264))(a9, a2, 0);
  v16 = a9[1];
  v17 = a2 + 6;
  if (a8)
  {
    if (a7)
      v39 = 34464;
    else
      v39 = 33696;
    v40 = (llvm::MachineFunction *)a2[4];
    v41 = *a5;
    v88 = v41;
    if (v41)
      llvm::MetadataTracking::track((uint64_t)&v88, v41, 2);
    v42 = v16 + v39;
    v43 = *((_QWORD *)v40 + 28);
    if (v43)
      *((_QWORD *)v40 + 28) = *(_QWORD *)v43;
    else
      v43 = sub_1C484358C((uint64_t)v40 + 128, 72, 3);
    *(_QWORD *)&v89 = v88;
    if (v88)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v88, v88, (uint64_t)&v89);
      v88 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v43, v40, v42, (unsigned __int8 **)&v89, 0);
    if ((_QWORD)v89)
      llvm::MetadataTracking::untrack((uint64_t)&v89, (unsigned __int8 *)v89);
    if (v88)
      llvm::MetadataTracking::untrack((uint64_t)&v88, v88);
    v51 = a2[5];
    *(_QWORD *)(v43 + 24) = v51;
    v52 = *(_QWORD *)(v51 + 32);
    v53 = *(unsigned int *)(v43 + 40);
    if ((_DWORD)v53)
    {
      v73 = *(_QWORD *)(v43 + 32);
      v74 = *(_QWORD *)(v52 + 40);
      v75 = 32 * v53;
      do
      {
        if (!*(_BYTE *)v73)
        {
          v76 = *(unsigned int *)(v73 + 4);
          if ((int)v76 >= 0)
            v77 = (uint64_t *)(*(_QWORD *)(v74 + 272) + 8 * v76);
          else
            v77 = (uint64_t *)(*(_QWORD *)(v74 + 24) + 16 * (v76 & 0x7FFFFFFF) + 8);
          v78 = *v77;
          if (*v77)
          {
            v79 = *(_QWORD *)(v78 + 16);
            *(_QWORD *)(v78 + 16) = v73;
            *(_QWORD *)(v73 + 16) = v79;
            if ((*(_BYTE *)(v73 + 3) & 1) != 0)
            {
              *(_QWORD *)(v73 + 24) = v78;
            }
            else
            {
              *(_QWORD *)(v73 + 24) = 0;
              v77 = (uint64_t *)(v79 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v73 + 16) = v73;
            *(_QWORD *)(v73 + 24) = 0;
          }
          *v77 = v73;
        }
        v73 += 32;
        v75 -= 32;
      }
      while (v75);
    }
    v54 = *(_QWORD *)(v52 + 728);
    if (v54)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v54 + 24))(v54, v43);
    v55 = a2[6] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v43 = v55 | *(_QWORD *)v43 & 7;
    *(_QWORD *)(v43 + 8) = v17;
    *(_QWORD *)(v55 + 8) = v43;
    a2[6] = a2[6] & 7 | v43;
    *((_QWORD *)&v89 + 1) = 0;
    v90 = 0uLL;
    LODWORD(v89) = 0x1000000;
    DWORD1(v89) = a6;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v43, v40, (const llvm::MachineOperand *)&v89);
    LODWORD(v89) = 1;
    *((_QWORD *)&v89 + 1) = 0;
    *(_QWORD *)&v90 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v43, v40, (const llvm::MachineOperand *)&v89);
    *((_QWORD *)&v89 + 1) = 0;
    v90 = 0uLL;
    LODWORD(v89) = 0;
    DWORD1(v89) = a6;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v43, v40, (const llvm::MachineOperand *)&v89);
    LODWORD(v89) = 1;
    *((_QWORD *)&v89 + 1) = 0;
    *(_QWORD *)&v90 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v43, v40, (const llvm::MachineOperand *)&v89);
    LODWORD(v89) = 1;
    *((_QWORD *)&v89 + 1) = 0;
    *(_QWORD *)&v90 = 1;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v43, v40, (const llvm::MachineOperand *)&v89);
    LODWORD(v89) = 1;
    *((_QWORD *)&v89 + 1) = 0;
    *(_QWORD *)&v90 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v43, v40, (const llvm::MachineOperand *)&v89);
    v89 = 0u;
    v90 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v43, v40, (const llvm::MachineOperand *)&v89);
    v56 = a9[1];
    v57 = (llvm::MachineFunction *)a2[4];
    v58 = *a5;
    v88 = v58;
    if (v58)
      llvm::MetadataTracking::track((uint64_t)&v88, v58, 2);
    v59 = v56 + 32352;
    v60 = *((_QWORD *)v57 + 28);
    if (v60)
      *((_QWORD *)v57 + 28) = *(_QWORD *)v60;
    else
      v60 = sub_1C484358C((uint64_t)v57 + 128, 72, 3);
    *(_QWORD *)&v89 = v88;
    if (v88)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v88, v88, (uint64_t)&v89);
      v88 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v60, v57, v59, (unsigned __int8 **)&v89, 0);
    if ((_QWORD)v89)
      llvm::MetadataTracking::untrack((uint64_t)&v89, (unsigned __int8 *)v89);
    if (v88)
      llvm::MetadataTracking::untrack((uint64_t)&v88, v88);
    v61 = a2[5];
    *(_QWORD *)(v60 + 24) = v61;
    v62 = *(_QWORD *)(v61 + 32);
    v63 = *(unsigned int *)(v60 + 40);
    if ((_DWORD)v63)
    {
      v80 = *(_QWORD *)(v60 + 32);
      v81 = *(_QWORD *)(v62 + 40);
      v82 = 32 * v63;
      do
      {
        if (!*(_BYTE *)v80)
        {
          v83 = *(unsigned int *)(v80 + 4);
          if ((int)v83 >= 0)
            v84 = (uint64_t *)(*(_QWORD *)(v81 + 272) + 8 * v83);
          else
            v84 = (uint64_t *)(*(_QWORD *)(v81 + 24) + 16 * (v83 & 0x7FFFFFFF) + 8);
          v85 = *v84;
          if (*v84)
          {
            v86 = *(_QWORD *)(v85 + 16);
            *(_QWORD *)(v85 + 16) = v80;
            *(_QWORD *)(v80 + 16) = v86;
            if ((*(_BYTE *)(v80 + 3) & 1) != 0)
            {
              *(_QWORD *)(v80 + 24) = v85;
            }
            else
            {
              *(_QWORD *)(v80 + 24) = 0;
              v84 = (uint64_t *)(v86 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v80 + 16) = v80;
            *(_QWORD *)(v80 + 24) = 0;
          }
          *v84 = v80;
        }
        v80 += 32;
        v82 -= 32;
      }
      while (v82);
    }
    v64 = *(_QWORD *)(v62 + 728);
    if (v64)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v64 + 24))(v64, v60);
    v65 = a2[6] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v60 = v65 | *(_QWORD *)v60 & 7;
    *(_QWORD *)(v60 + 8) = v17;
    *(_QWORD *)(v65 + 8) = v60;
    a2[6] = a2[6] & 7 | v60;
    *((_QWORD *)&v89 + 1) = 0;
    v90 = 0uLL;
    LODWORD(v89) = 0x1000000;
    DWORD1(v89) = a6;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v89);
    LODWORD(v89) = 1;
    *((_QWORD *)&v89 + 1) = 0;
    *(_QWORD *)&v90 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v89);
    LODWORD(v89) = 1;
    *((_QWORD *)&v89 + 1) = 0;
    *(_QWORD *)&v90 = (a8 + 3);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v89);
    LODWORD(v89) = 1;
    *((_QWORD *)&v89 + 1) = 0;
    *(_QWORD *)&v90 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v89);
    LODWORD(v89) = 1;
    *((_QWORD *)&v89 + 1) = 0;
    *(_QWORD *)&v90 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v89);
    v89 = 0u;
    v90 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v89);
    sub_1C61265C4((uint64_t)a2, 0, a5, a6, (uint64_t)a9, 0);
  }
  else
  {
    if (a7)
      v18 = 30624;
    else
      v18 = 31392;
    v19 = (llvm::MachineFunction *)a2[4];
    v20 = *a5;
    v88 = v20;
    if (v20)
      llvm::MetadataTracking::track((uint64_t)&v88, v20, 2);
    v21 = v16 + v18;
    v22 = *((_QWORD *)v19 + 28);
    if (v22)
      *((_QWORD *)v19 + 28) = *(_QWORD *)v22;
    else
      v22 = sub_1C484358C((uint64_t)v19 + 128, 72, 3);
    *(_QWORD *)&v89 = v88;
    if (v88)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v88, v88, (uint64_t)&v89);
      v88 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v22, v19, v21, (unsigned __int8 **)&v89, 0);
    if ((_QWORD)v89)
      llvm::MetadataTracking::untrack((uint64_t)&v89, (unsigned __int8 *)v89);
    if (v88)
      llvm::MetadataTracking::untrack((uint64_t)&v88, v88);
    v23 = a2[5];
    *(_QWORD *)(v22 + 24) = v23;
    v24 = *(_QWORD *)(v23 + 32);
    v25 = *(unsigned int *)(v22 + 40);
    if ((_DWORD)v25)
    {
      v44 = *(_QWORD *)(v22 + 32);
      v45 = *(_QWORD *)(v24 + 40);
      v46 = 32 * v25;
      do
      {
        if (!*(_BYTE *)v44)
        {
          v47 = *(unsigned int *)(v44 + 4);
          if ((int)v47 >= 0)
            v48 = (uint64_t *)(*(_QWORD *)(v45 + 272) + 8 * v47);
          else
            v48 = (uint64_t *)(*(_QWORD *)(v45 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
          v49 = *v48;
          if (*v48)
          {
            v50 = *(_QWORD *)(v49 + 16);
            *(_QWORD *)(v49 + 16) = v44;
            *(_QWORD *)(v44 + 16) = v50;
            if ((*(_BYTE *)(v44 + 3) & 1) != 0)
            {
              *(_QWORD *)(v44 + 24) = v49;
            }
            else
            {
              *(_QWORD *)(v44 + 24) = 0;
              v48 = (uint64_t *)(v50 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v44 + 16) = v44;
            *(_QWORD *)(v44 + 24) = 0;
          }
          *v48 = v44;
        }
        v44 += 32;
        v46 -= 32;
      }
      while (v46);
    }
    v26 = *(_QWORD *)(v24 + 728);
    if (v26)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v26 + 24))(v26, v22);
    v27 = *v17 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v22 = v27 | *(_QWORD *)v22 & 7;
    *(_QWORD *)(v22 + 8) = v17;
    *(_QWORD *)(v27 + 8) = v22;
    *v17 = *v17 & 7 | v22;
    *((_QWORD *)&v89 + 1) = 0;
    v90 = 0uLL;
    LODWORD(v89) = 0x1000000;
    DWORD1(v89) = a6;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v89);
    LODWORD(v89) = 1;
    *((_QWORD *)&v89 + 1) = 0;
    *(_QWORD *)&v90 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v89);
    *((_QWORD *)&v89 + 1) = 0;
    v90 = 0uLL;
    LODWORD(v89) = 0;
    DWORD1(v89) = a6;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v89);
    LODWORD(v89) = 1;
    *((_QWORD *)&v89 + 1) = 0;
    *(_QWORD *)&v90 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v89);
    LODWORD(v89) = 1;
    *((_QWORD *)&v89 + 1) = 0;
    *(_QWORD *)&v90 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v89);
    LODWORD(v89) = 1;
    *((_QWORD *)&v89 + 1) = 0;
    *(_QWORD *)&v90 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v89);
    v89 = 0u;
    v90 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v89);
    v87 = (unint64_t *)a4[7];
    if (a3 && sub_1C4779FA8(a4, a3, &v87))
    {
      v28 = v87;
      v29 = a9[1];
      v30 = (llvm::MachineFunction *)a4[4];
      v31 = *a5;
      v88 = v31;
      if (v31)
        llvm::MetadataTracking::track((uint64_t)&v88, v31, 2);
      v32 = v29 + 19056;
      v33 = *((_QWORD *)v30 + 28);
      if (v33)
        *((_QWORD *)v30 + 28) = *(_QWORD *)v33;
      else
        v33 = sub_1C484358C((uint64_t)v30 + 128, 72, 3);
      *(_QWORD *)&v89 = v88;
      if (v88)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v88, v88, (uint64_t)&v89);
        v88 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v33, v30, v32, (unsigned __int8 **)&v89, 0);
      if ((_QWORD)v89)
        llvm::MetadataTracking::untrack((uint64_t)&v89, (unsigned __int8 *)v89);
      if (v88)
        llvm::MetadataTracking::untrack((uint64_t)&v88, v88);
      v34 = a4[5];
      *(_QWORD *)(v33 + 24) = v34;
      v35 = *(_QWORD *)(v34 + 32);
      v36 = *(unsigned int *)(v33 + 40);
      if ((_DWORD)v36)
      {
        v66 = *(_QWORD *)(v33 + 32);
        v67 = *(_QWORD *)(v35 + 40);
        v68 = 32 * v36;
        do
        {
          if (!*(_BYTE *)v66)
          {
            v69 = *(unsigned int *)(v66 + 4);
            if ((int)v69 >= 0)
              v70 = (uint64_t *)(*(_QWORD *)(v67 + 272) + 8 * v69);
            else
              v70 = (uint64_t *)(*(_QWORD *)(v67 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
            v71 = *v70;
            if (*v70)
            {
              v72 = *(_QWORD *)(v71 + 16);
              *(_QWORD *)(v71 + 16) = v66;
              *(_QWORD *)(v66 + 16) = v72;
              if ((*(_BYTE *)(v66 + 3) & 1) != 0)
              {
                *(_QWORD *)(v66 + 24) = v71;
              }
              else
              {
                *(_QWORD *)(v66 + 24) = 0;
                v70 = (uint64_t *)(v72 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v66 + 16) = v66;
              *(_QWORD *)(v66 + 24) = 0;
            }
            *v70 = v66;
          }
          v66 += 32;
          v68 -= 32;
        }
        while (v68);
      }
      v37 = *(_QWORD *)(v35 + 728);
      if (v37)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v37 + 24))(v37, v33);
      v38 = *v28 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v33 = v38 | *(_QWORD *)v33 & 7;
      *(_QWORD *)(v33 + 8) = v28;
      *(_QWORD *)(v38 + 8) = v33;
      *v28 = *v28 & 7 | v33;
      *((_QWORD *)&v89 + 1) = 0;
      *(_QWORD *)&v90 = a3;
      LODWORD(v89) = 4;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v33, v30, (const llvm::MachineOperand *)&v89);
      LODWORD(v89) = 1;
      *((_QWORD *)&v89 + 1) = 0;
      *(_QWORD *)&v90 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v33, v30, (const llvm::MachineOperand *)&v89);
      v89 = 0u;
      v90 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v33, v30, (const llvm::MachineOperand *)&v89);
    }
  }
}

uint64_t sub_1C4779BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v8;
  _QWORD *v9;
  int v10;
  uint64_t i;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  int v24;
  uint64_t v25;

  v3 = (_QWORD *)(a2 + 320);
  v4 = *(_QWORD **)(a2 + 328);
  if (v4 != (_QWORD *)(a2 + 320))
  {
    v5 = v4[1];
    if ((_QWORD *)v5 != v3 && *(_QWORD **)(v5 + 8) != v3)
    {
      v8 = 0;
      v9 = *(_QWORD **)(a2 + 328);
      do
      {
        v10 = v8;
        for (i = v9[7]; (_QWORD *)i != v9 + 6; i = *(_QWORD *)(i + 8))
        {
          v12 = **(unsigned __int16 **)(i + 16);
          v13 = v12 - 532;
          v14 = v12 - 676;
          if (v12 == 606)
            v15 = -2;
          else
            v15 = 0;
          if (v14 < 0x40)
            v15 = 1;
          if (v13 < 0x40)
            v15 = -1;
          if ((*(_BYTE *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              i = *(_QWORD *)(i + 8);
          }
          v8 += v15;
        }
        v16 = v9;
        if (v10 == 1)
        {
          do
          {
            if (v16 == v4)
              break;
            v17 = (_QWORD *)*v16;
            v18 = -1;
            v19 = *v16 + 48;
            do
            {
              v19 = *(_QWORD *)(v19 + 8);
              ++v18;
            }
            while (v19 != *v16 + 48);
            if (v18 != 1)
              break;
            v20 = v16[7];
            if ((_QWORD *)v20 == v16 + 6)
              break;
            if (**(_WORD **)(v20 + 16) != 590)
              break;
            if (*(_QWORD *)(*(_QWORD *)(v20 + 32) + 144) != 1)
              break;
            v21 = v17[7];
            if (**(_WORD **)(v21 + 16) != 590 || *(_QWORD *)(*(_QWORD *)(v21 + 32) + 144) != 1)
              break;
            v22 = v17[7];
            if ((*(_BYTE *)v21 & 4) == 0)
            {
              v22 = v17[7];
              if ((*(_WORD *)(v21 + 44) & 8) != 0)
              {
                v22 = v17[7];
                do
                  v22 = *(_QWORD *)(v22 + 8);
                while ((*(_WORD *)(v22 + 44) & 8) != 0);
              }
            }
            result = sub_1C487FE80(*(_QWORD *)(v21 + 24) + 40, v21, *(_QWORD *)(v22 + 8));
            *(_QWORD *)(*(_QWORD *)(v20 + 32) + 144) = 2;
            *(_QWORD *)(v20 + 16) = *(_QWORD *)(a3 + 8) + 29088;
            v4 = *(_QWORD **)(a2 + 328);
            if (v17 == v4)
            {
              v4 = v17;
              break;
            }
            v16 = (_QWORD *)*v17;
            v24 = -1;
            v25 = *v17 + 48;
            do
            {
              v25 = *(_QWORD *)(v25 + 8);
              ++v24;
            }
            while (v25 != *v17 + 48);
          }
          while (v24 == 1);
        }
        v9 = (_QWORD *)v9[1];
      }
      while (v9 != v3);
    }
  }
  return result;
}

uint64_t sub_1C4779DC4(uint64_t a1)
{
  uint64_t (***v2)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v2 = *(uint64_t (****)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(a1 + 344);
  v4 = *(_QWORD **)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
  {
    v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8), a1 + 128, a1);
    *(_QWORD *)(a1 + 48) = v3;
  }
  v5 = *(_DWORD *)(v3 + 16) + 7;
  v6 = v5 & 0xFFFFFFF8;
  if ((v5 & 0xFFFFFFF8) != 0)
  {
    for (i = 0; i != v6; ++i)
    {
      v8 = (i + 1795);
      v9 = (_DWORD *)v4[57];
      v10 = (_DWORD *)v4[58];
      v11 = v9;
      if (v10 == v9)
      {
        v12 = (i + 1539);
        v14 = i + 771;
LABEL_19:
        if ((llvm::MachineRegisterInfo::isPhysRegModified(v4, v14, 0) & 1) == 0)
        {
          if (!llvm::MachineRegisterInfo::isPhysRegModified(v4, (int)i + 1795, 0))
            return v8;
          v8 = v12;
          if ((llvm::MachineRegisterInfo::isPhysRegModified(v4, v12, 0) & 1) == 0)
            return v8;
          break;
        }
      }
      else
      {
        while (*v11 != (_DWORD)v8 && v11[1] != (_DWORD)v8)
        {
          v11 += 2;
          if (v11 == v10)
          {
            v12 = (i + 1539);
            v13 = (_DWORD *)v4[57];
            while (*v13 != (_DWORD)v12 && v13[1] != (_DWORD)v12)
            {
              v13 += 2;
              if (v13 == v10)
              {
                v14 = i + 771;
                while (*v9 != v14 && v9[1] != v14)
                {
                  v9 += 2;
                  if (v9 == v10)
                    goto LABEL_19;
                }
                goto LABEL_20;
              }
            }
            break;
          }
        }
      }
LABEL_20:
      ;
    }
  }
  v15 = (**v2)(v2, 0, 0, 1, 1);
  if ((v15 & 0xFFFFFF00) == 0)
  {
    v8 = (v15 + 1283);
    v16 = v15 + 1027;
    do
    {
      if ((llvm::MachineRegisterInfo::isPhysRegModified(v4, v16 - 1024, 0) & 1) == 0)
      {
        if (!llvm::MachineRegisterInfo::isPhysRegModified(v4, v16, 0))
          return (v8 - 256);
        if (!llvm::MachineRegisterInfo::isPhysRegModified(v4, v16 + 256, 0))
          return v8;
      }
      v8 = (v8 + 1);
    }
    while (v16++ != 1282);
  }
  return 1274;
}

uint64_t sub_1C4779FA8(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  unsigned __int16 *v5;
  int v6;
  uint64_t v9;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _QWORD *v16;
  _QWORD *v17;

  v3 = a1[7];
  if ((_QWORD *)v3 != a1 + 6)
  {
    v4 = 0;
    do
    {
      v5 = *(unsigned __int16 **)(v3 + 16);
      v6 = *v5;
      if (((v6 - 9) > 0x3C || ((1 << (v6 - 9)) & 0x1000000000000605) == 0)
        && v6 != 0)
      {
        v9 = *((_QWORD *)v5 + 1);
        if ((v9 & 0x10) == 0)
        {
          if ((*(_WORD *)(v3 + 44) & 0xC) != 0 && (*(_WORD *)(v3 + 44) & 4) == 0)
          {
            v11 = v3;
            if ((v9 & 0x400) != 0)
              goto LABEL_18;
            while ((*(_WORD *)(v11 + 44) & 8) != 0)
            {
              v11 = *(_QWORD *)(v11 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v11 + 16) + 9) & 4) != 0)
                goto LABEL_18;
            }
          }
          else if ((v9 & 0x400) != 0)
          {
            goto LABEL_18;
          }
          if ((v5[8] & 1) == 0)
          {
            *a3 = v3;
            return 1;
          }
          if (++v4 > 4)
            return 1;
        }
      }
LABEL_18:
      if ((*(_BYTE *)v3 & 4) == 0)
      {
        while ((*(_WORD *)(v3 + 44) & 8) != 0)
          v3 = *(_QWORD *)(v3 + 8);
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while ((_QWORD *)v3 != a1 + 6);
  }
  v12 = (char *)a1[11];
  v13 = (char *)a1[12];
  v14 = v12;
  if (v12 != v13)
  {
    while (*(_QWORD *)v14 != a2)
    {
      v14 += 8;
      if (v14 == v13)
      {
        v14 = (char *)a1[12];
        break;
      }
    }
  }
  if (v14 != v13)
    return 0;
  v16 = (_QWORD *)a1[8];
  if (((a1[9] - (_QWORD)v16) & 0x7FFFFFFF8) == 8
    && (v17 = *(_QWORD **)(a2 + 64), ((*(_QWORD *)(a2 + 72) - (_QWORD)v17) & 0x7FFFFFFF8) == 8)
    && *v17 == *v16
    && ((v13 - v12) & 0x7FFFFFFF0) == 0)
  {
    return 0;
  }
  else
  {
    return 1;
  }
}

llvm::MachineFunction *sub_1C477A100(uint64_t a1, unint64_t *a2, unsigned __int8 **a3, uint64_t a4)
{
  llvm::MachineFunction *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;

  v7 = *(llvm::MachineFunction **)(a1 + 32);
  v8 = *a3;
  v23 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v23, v8, 2);
  v9 = *((_QWORD *)v7 + 28);
  if (v9)
    *((_QWORD *)v7 + 28) = *(_QWORD *)v9;
  else
    v9 = sub_1C484358C((uint64_t)v7 + 128, 72, 3);
  v24 = v23;
  if (v23)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v23, v23, (uint64_t)&v24);
    v23 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v9, v7, a4, &v24, 0);
  if (v24)
    llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
  if (v23)
    llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v9 + 24) = v10;
  v11 = *(_QWORD *)(v10 + 32);
  v12 = *(unsigned int *)(v9 + 40);
  if ((_DWORD)v12)
  {
    v16 = *(_QWORD *)(v9 + 32);
    v17 = *(_QWORD *)(v11 + 40);
    v18 = 32 * v12;
    do
    {
      if (!*(_BYTE *)v16)
      {
        v19 = *(unsigned int *)(v16 + 4);
        if ((int)v19 >= 0)
          v20 = (uint64_t *)(*(_QWORD *)(v17 + 272) + 8 * v19);
        else
          v20 = (uint64_t *)(*(_QWORD *)(v17 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8);
        v21 = *v20;
        if (*v20)
        {
          v22 = *(_QWORD *)(v21 + 16);
          *(_QWORD *)(v21 + 16) = v16;
          *(_QWORD *)(v16 + 16) = v22;
          if ((*(_BYTE *)(v16 + 3) & 1) != 0)
          {
            *(_QWORD *)(v16 + 24) = v21;
          }
          else
          {
            *(_QWORD *)(v16 + 24) = 0;
            v20 = (uint64_t *)(v22 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v16 + 16) = v16;
          *(_QWORD *)(v16 + 24) = 0;
        }
        *v20 = v16;
      }
      v16 += 32;
      v18 -= 32;
    }
    while (v18);
  }
  v13 = *(_QWORD *)(v11 + 728);
  if (v13)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v13 + 24))(v13, v9);
  v14 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = v14 | *(_QWORD *)v9 & 7;
  *(_QWORD *)(v9 + 8) = a2;
  *(_QWORD *)(v14 + 8) = v9;
  *a2 = *a2 & 7 | v9;
  return v7;
}

llvm::MachineFunction **sub_1C477A2C4(llvm::MachineFunction **a1)
{
  llvm::MachineInstr *v2;
  llvm::MachineFunction *v3;
  llvm::MachineInstr *v4;
  llvm::MachineFunction *v5;
  __int128 v7;
  __int128 v8;

  v2 = a1[1];
  v3 = *a1;
  LODWORD(v7) = 1;
  *((_QWORD *)&v7 + 1) = 0;
  *(_QWORD *)&v8 = 0;
  llvm::MachineInstr::addOperand(v2, v3, (const llvm::MachineOperand *)&v7);
  v5 = *a1;
  v4 = a1[1];
  v7 = 0u;
  v8 = 0u;
  llvm::MachineInstr::addOperand(v4, v5, (const llvm::MachineOperand *)&v7);
  return a1;
}

llvm::MachineFunction *sub_1C477A31C(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4)
{
  llvm::MachineFunction *v7;
  unsigned __int8 *v8;
  llvm::MachineInstr *v9;
  unsigned __int8 *v11;
  unsigned __int8 *v12;

  v7 = *(llvm::MachineFunction **)(a1 + 32);
  v8 = *a3;
  v11 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v11, v8, 2);
  v9 = (llvm::MachineInstr *)*((_QWORD *)v7 + 28);
  if (v9)
    *((_QWORD *)v7 + 28) = *(_QWORD *)v9;
  else
    v9 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v7 + 128, 72, 3);
  v12 = v11;
  if (v11)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v11, v11, (uint64_t)&v12);
    v11 = 0;
  }
  llvm::MachineInstr::MachineInstr(v9, v7, a4, &v12, 0);
  if (v12)
    llvm::MetadataTracking::untrack((uint64_t)&v12, v12);
  if (v11)
    llvm::MetadataTracking::untrack((uint64_t)&v11, v11);
  if (a1 + 48 != a2 && (*(_WORD *)(a2 + 44) & 4) != 0)
    *((_WORD *)v9 + 22) |= 0xCu;
  sub_1C512CA10((uint64_t *)(a1 + 40), (uint64_t *)a2, (uint64_t)v9);
  return v7;
}

uint64_t sub_1C477A43C()
{
  return __cxa_atexit((void (*)(void *))llvm::GPUConditionalizer::~GPUConditionalizer, &off_1EF8EB060, &dword_1C475E000);
}

void sub_1C477A458(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C477A4EC(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C477A578()
{
  return "AGX1 expand pseudo inst pass";
}

uint64_t sub_1C477A588(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int16 *v18;
  _QWORD *v19;
  llvm::MachineFunction *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int v25;
  unsigned __int16 v26;
  uint64_t v27;
  llvm::MachineInstr *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  llvm::MachineFunction *v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  llvm::MachineFunction *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  const llvm::MachineOperand *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  llvm::MachineFunction *v81;
  unsigned __int8 *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  const llvm::MachineOperand *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t j;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t *v196;
  _BYTE *v197;
  _BYTE *v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v202;
  char v203;
  char v204;
  uint64_t i;
  unsigned __int16 *v206;
  int v207;
  llvm::MachineBasicBlock *v208;
  llvm::MachineBasicBlock *v209;
  llvm::MachineBasicBlock *v210;
  unint64_t v211;
  uint64_t v212;
  _DWORD *v213;
  _DWORD *v214;
  int v215;
  _DWORD *v216;
  int v217;
  _DWORD *v218;
  int v219;
  _DWORD *v220;
  BOOL v221;
  int v222;
  char isPhysRegModified;
  unint64_t FirstTerminator;
  unint64_t v226;
  unint64_t v227;
  llvm::MachineBasicBlock *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v235;
  uint64_t *v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  int v241;
  int v242;
  _QWORD *v243;
  int v244;
  int *v245;
  _BYTE *v246;
  int v247;
  uint64_t v248;
  unint64_t *v249;
  char *v250;
  char *v251;
  uint64_t v252;
  int v253;
  _BYTE v254[39];
  char v255;
  unsigned __int8 *v256;
  unsigned __int8 *v257;
  __int128 v258;
  __int128 v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  _QWORD v264[18];

  v264[16] = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8), *(_QWORD *)a2);
  *(_QWORD *)(a1 + 248) = v4;
  *(_QWORD *)(a1 + 264) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  *(_QWORD *)(a1 + 272) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 176))(*(_QWORD *)(a1 + 248));
  v5 = *(_QWORD *)(a2 + 48);
  v243 = (_QWORD *)a2;
  if (!v5)
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v5;
  }
  *(_QWORD *)(a1 + 256) = v5;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 40);
  v242 = (*(unsigned __int16 *)(*(_QWORD *)a2 + 18) >> 4) & 0x3FF;
  if ((v242 - 102) > 5 || ((1 << ((*(unsigned __int16 *)(*(_QWORD *)a2 + 18) >> 4) - 102)) & 0x31) == 0)
  {
    v245 = (int *)(a1 + 288);
    *(_DWORD *)(a1 + 288) = -1;
    v246 = (_BYTE *)(a1 + 292);
    *(_BYTE *)(a1 + 292) = 0;
    v202 = *(_QWORD *)(a2 + 328);
    if (v202 != a2 + 320)
    {
      v203 = 0;
      v204 = 0;
      while (1)
      {
        for (i = *(_QWORD *)(v202 + 56); i != v202 + 48; i = *(_QWORD *)(i + 8))
        {
          v206 = *(unsigned __int16 **)(i + 16);
          v207 = *v206;
          if ((*((_BYTE *)v206 + 17) & 0x20) != 0 || sub_1C477C96C(v207))
            v203 = 1;
          v204 |= (v207 & 0xFFFE) == 11972;
          if ((v204 & 1) != 0 && (v203 & 1) != 0)
          {
            v204 = 1;
            v203 = 1;
            break;
          }
          if ((*(_BYTE *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              i = *(_QWORD *)(i + 8);
          }
        }
        if ((v204 & 1) != 0 && (v203 & 1) != 0)
          break;
        v202 = *(_QWORD *)(v202 + 8);
        if (v202 == a2 + 320)
          goto LABEL_8;
      }
      (***(void (****)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(a2 + 344))(*(_QWORD *)(a2 + 344), 0, 0, 1, 1);
      v211 = 0;
      v212 = *(_QWORD *)(a1 + 280);
      v213 = *(_DWORD **)(v212 + 456);
      v214 = *(_DWORD **)(v212 + 464);
      while (1)
      {
        v215 = v211 + 1283;
        v216 = v213;
        if (v214 == v213)
          break;
        while (*v216 != v215 && v216[1] != v215)
        {
          v216 += 2;
          if (v216 == v214)
          {
            v217 = v211 + 1027;
            v218 = v213;
            while (*v218 != v217 && v218[1] != v217)
            {
              v218 += 2;
              if (v218 == v214)
              {
                v219 = v211 | 3;
                v220 = v213;
                while (*v220 != v219 && v220[1] != v219)
                {
                  v220 += 2;
                  if (v220 == v214)
                    goto LABEL_505;
                }
                goto LABEL_501;
              }
            }
            break;
          }
        }
LABEL_501:
        v221 = v211 >= 0xFC;
        v211 += 4;
        if (v221)
        {
          LODWORD(v211) = 256;
          goto LABEL_505;
        }
      }
      LODWORD(v211) = 0;
LABEL_505:
      v222 = v211 & 0xFFFFFFFC;
      do
      {
        isPhysRegModified = llvm::MachineRegisterInfo::isPhysRegModified(*(_QWORD **)(a1 + 280), v222 + 3, 0);
        ++v222;
      }
      while ((isPhysRegModified & 1) != 0);
      *v245 = v222 + 2;
      *v246 = 1;
    }
  }
  else
  {
    v245 = (int *)(a1 + 288);
    *(_DWORD *)(a1 + 288) = -1;
    v246 = (_BYTE *)(a1 + 292);
    *(_BYTE *)(a1 + 292) = 0;
  }
LABEL_8:
  v255 = 1;
  v250 = v254;
  v251 = v254;
  v252 = 4;
  v253 = 0;
  v7 = v243 + 40;
  v8 = v243[41];
  if ((_QWORD *)v8 == v243 + 40)
    goto LABEL_457;
  v9 = 0;
  do
  {
    v10 = (char *)sub_1C477672C((uint64_t)&v250, v8);
    if (v251 == v250)
      v11 = (uint64_t *)((char *)&v252 + 4);
    else
      v11 = &v252;
    if (v10 != &v251[8 * *(unsigned int *)v11])
      goto LABEL_454;
    v247 = v9;
    v260 = &v262;
    v261 = 0x400000000;
    v248 = v8;
    v12 = *(_QWORD *)(v8 + 56);
    v249 = (unint64_t *)(v8 + 48);
    if (v12 == v8 + 48)
    {
      v13 = 0;
      goto LABEL_440;
    }
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = v14;
      v16 = *(unsigned __int8 **)(v12 + 56);
      v256 = v16;
      if (v16)
        llvm::MetadataTracking::track((uint64_t)&v256, v16, 2);
      v17 = *(_DWORD *)(*(_QWORD *)(a1 + 256) + 8);
      v18 = *(unsigned __int16 **)(v12 + 16);
      v19 = *(_QWORD **)(v12 + 24);
      v20 = (llvm::MachineFunction *)v19[4];
      v21 = *((_QWORD *)v18 + 2);
      if (v14)
      {
        v23 = *(unsigned int *)(v12 + 40);
        if (!(_DWORD)v23)
          goto LABEL_26;
        v24 = (_DWORD *)(*(_QWORD *)(v12 + 32) + 4);
        while (*((_BYTE *)v24 - 4) || *v24 != 2)
        {
          v24 += 8;
          if (!--v23)
            goto LABEL_26;
        }
      }
      v14 = 0;
LABEL_26:
      v25 = *v18;
      if (v25 > 0x2D3B)
      {
        if (*v18 > 0x3121u)
        {
          if (*v18 > 0x33DBu)
          {
            if (v25 - 13276 <= 0x35 && ((1 << (v25 + 36)) & 0x20408102040801) != 0 || v25 == 13340)
            {
LABEL_115:
              if (!*(_BYTE *)(*(_QWORD *)(a1 + 248) + 280))
                goto LABEL_199;
              if (v12 == v19[7])
              {
                sub_1C477CCB4((_QWORD *)a1, v12, (llvm::SmallPtrSetImplBase *)&v250, &v255);
LABEL_229:
                v44 = 1;
                goto LABEL_230;
              }
              v40 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
              if (!v40 || (*(_BYTE *)v40 & 4) == 0)
              {
                while ((*(_WORD *)(v40 + 44) & 4) != 0)
                  v40 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
              }
              sub_1C477CCB4((_QWORD *)a1, v12, (llvm::SmallPtrSetImplBase *)&v250, &v255);
              goto LABEL_123;
            }
            v41 = 13351;
            goto LABEL_114;
          }
          if (*v18 > 0x31E5u)
          {
            if (v25 - 13212 <= 0x39 && ((1 << (v25 + 100)) & 0x204081020040801) != 0)
              goto LABEL_115;
            if (v25 - 12774 <= 0x3B && ((1 << (v25 + 26)) & 0xC02B00C0300C02BLL) != 0)
              goto LABEL_198;
            if (v25 - 12842 > 0x29)
              goto LABEL_171;
            v37 = 1 << (v25 - 42);
            v38 = 0x2AAAAB00C03;
            goto LABEL_99;
          }
          if (v25 - 12646 <= 0x37 && ((1 << (v25 - 102)) & 0xC02AAAAAB00C03) != 0
            || v25 - 12578 <= 0x3B && ((1 << (v25 - 34)) & 0xC02B00C0300C02BLL) != 0)
          {
LABEL_198:
            v76 = (const llvm::MachineOperand *)(*(_QWORD *)(v12 + 32) + 32 * sub_1C612B500(v25, 15));
            if ((*((_BYTE *)v76 + 4) & 1) == 0)
              goto LABEL_199;
            v77 = *((_QWORD *)v20 + 43);
            v78 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v77 + 376))(v77, 1);
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 328))(v77, 0);
            v79 = *(_QWORD *)(v12 + 24);
            v80 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8);
            v81 = *(llvm::MachineFunction **)(v79 + 32);
            v82 = *(unsigned __int8 **)(v12 + 56);
            v257 = v82;
            if (v82)
              llvm::MetadataTracking::track((uint64_t)&v257, v82, 2);
            v83 = *((_QWORD *)v81 + 28);
            if (v83)
              *((_QWORD *)v81 + 28) = *(_QWORD *)v83;
            else
              v83 = sub_1C484358C((uint64_t)v81 + 128, 72, 3);
            *(_QWORD *)&v258 = v257;
            if (v257)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v257, v257, (uint64_t)&v258);
              v257 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v83, v81, v80 + 48144, (unsigned __int8 **)&v258, 0);
            if ((_QWORD)v258)
              llvm::MetadataTracking::untrack((uint64_t)&v258, (unsigned __int8 *)v258);
            if (v257)
              llvm::MetadataTracking::untrack((uint64_t)&v257, v257);
            v84 = *(_QWORD *)(v79 + 40);
            *(_QWORD *)(v83 + 24) = v84;
            v85 = *(_QWORD *)(v84 + 32);
            v86 = *(unsigned int *)(v83 + 40);
            if ((_DWORD)v86)
            {
              v108 = *(_QWORD *)(v83 + 32);
              v109 = *(_QWORD *)(v85 + 40);
              v110 = 32 * v86;
              do
              {
                if (!*(_BYTE *)v108)
                {
                  v111 = *(unsigned int *)(v108 + 4);
                  if ((int)v111 >= 0)
                    v112 = (uint64_t *)(*(_QWORD *)(v109 + 272) + 8 * v111);
                  else
                    v112 = (uint64_t *)(*(_QWORD *)(v109 + 24) + 16 * (v111 & 0x7FFFFFFF) + 8);
                  v113 = *v112;
                  if (*v112)
                  {
                    v114 = *(_QWORD *)(v113 + 16);
                    *(_QWORD *)(v113 + 16) = v108;
                    *(_QWORD *)(v108 + 16) = v114;
                    if ((*(_BYTE *)(v108 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v108 + 24) = v113;
                    }
                    else
                    {
                      *(_QWORD *)(v108 + 24) = 0;
                      v112 = (uint64_t *)(v114 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v108 + 16) = v108;
                    *(_QWORD *)(v108 + 24) = 0;
                  }
                  *v112 = v108;
                }
                v108 += 32;
                v110 -= 32;
              }
              while (v110);
            }
            v87 = *(_QWORD *)(v85 + 728);
            if (v87)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v87 + 24))(v87, v83);
            v88 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v83 = v88 | *(_QWORD *)v83 & 7;
            *(_QWORD *)(v83 + 8) = v12;
            *(_QWORD *)(v88 + 8) = v83;
            *(_QWORD *)v12 = *(_QWORD *)v12 & 7 | v83;
            HIDWORD(v258) = 0;
            LODWORD(v259) = 64;
            DWORD2(v259) = 0;
            LODWORD(v258) = 519;
            *(_QWORD *)((char *)&v258 + 4) = (2 * v78);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v258);
            LODWORD(v258) = 1;
            *((_QWORD *)&v258 + 1) = 0;
            *(_QWORD *)&v259 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v258);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, v76);
            LODWORD(v258) = 1;
            *((_QWORD *)&v258 + 1) = 0;
            *(_QWORD *)&v259 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v258);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, v76);
            LODWORD(v258) = 1;
            *((_QWORD *)&v258 + 1) = 0;
            *(_QWORD *)&v259 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v258);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, v76);
            LODWORD(v258) = 1;
            *((_QWORD *)&v258 + 1) = 0;
            *(_QWORD *)&v259 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v258);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, v76);
            LODWORD(v258) = 1;
            *((_QWORD *)&v258 + 1) = 0;
            *(_QWORD *)&v259 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v258);
            v258 = 0u;
            v259 = 0u;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v258);
            LODWORD(v258) = 1;
            *((_QWORD *)&v258 + 1) = 0;
            *(_QWORD *)&v259 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v258);
            v258 = 0u;
            v259 = 0u;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v258);
            v89 = *(_QWORD *)(v12 + 32);
            v90 = *(_DWORD *)(v89 + 160);
            if (!(_BYTE)v90)
            {
              v91 = *(_QWORD *)(v89 + 176);
              if (v91)
              {
                v92 = *(_QWORD *)(v89 + 168);
                if (v92)
                {
                  v93 = *(_QWORD *)(v92 + 24);
                  if (v93)
                  {
                    v94 = *(_QWORD *)(v93 + 32);
                    if (v94)
                    {
                      v95 = *(_QWORD *)(v94 + 40);
                      v96 = *(unsigned int *)(v89 + 164);
                      if ((v96 & 0x80000000) != 0)
                        v97 = (_QWORD *)(*(_QWORD *)(v95 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8);
                      else
                        v97 = (_QWORD *)(*(_QWORD *)(v95 + 272) + 8 * v96);
                      v98 = *v97;
                      v99 = *(_QWORD *)(v89 + 184);
                      if (*v97 == v89 + 160)
                        v100 = v97;
                      else
                        v100 = (_QWORD *)(v91 + 24);
                      *v100 = v99;
                      if (v99)
                        v101 = v99;
                      else
                        v101 = v98;
                      *(_QWORD *)(v101 + 16) = v91;
                      *(_QWORD *)(v89 + 176) = 0;
                      *(_QWORD *)(v89 + 184) = 0;
                      v90 = *(_DWORD *)(v89 + 160);
                    }
                  }
                }
              }
            }
            *(_DWORD *)(v89 + 176) = 64;
            *(_DWORD *)(v89 + 184) = 0;
            *(_DWORD *)(v89 + 160) = v90 & 0xFFF00000 | 0x207;
            *(_DWORD *)(v89 + 164) = 2 * v78;
            goto LABEL_229;
          }
          v48 = -12710;
        }
        else
        {
          if (*v18 <= 0x2DCDu)
          {
            if (v25 - 11644 <= 0x3C && ((1 << (v25 - 124)) & 0x1020408102040081) != 0
              || v25 - 11580 <= 0x39 && ((1 << (v25 - 60)) & 0x204081002040081) != 0)
            {
              goto LABEL_115;
            }
            v41 = 11715;
LABEL_114:
            if (v25 == v41)
              goto LABEL_115;
            goto LABEL_171;
          }
          if (*v18 <= 0x3099u)
          {
            if (v25 - 11972 < 2)
            {
              if (*v245 != -1)
              {
                if (*v246)
                {
                  sub_1C477C990(a1, (unint64_t *)v12);
                  *(_BYTE *)(a1 + 292) = 0;
                  v19 = *(_QWORD **)(v12 + 24);
                }
                v29 = *(_QWORD *)(*(_QWORD *)(v12 + 32)
                                + 32 * (llvm::MachineInstr::getNumExplicitOperands(v12) - 3)
                                + 16);
                v30 = v12;
                if ((*(_BYTE *)v12 & 4) == 0)
                {
                  v30 = v12;
                  if ((*(_WORD *)(v12 + 44) & 8) != 0)
                  {
                    v30 = v12;
                    do
                      v30 = *(_QWORD *)(v30 + 8);
                    while ((*(_WORD *)(v30 + 44) & 8) != 0);
                  }
                }
                v31 = *(unint64_t **)(v30 + 8);
                v32 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8);
                v33 = (llvm::MachineFunction *)v19[4];
                v257 = v256;
                if (v256)
                  llvm::MetadataTracking::track((uint64_t)&v257, v256, 2);
                v34 = *((_QWORD *)v33 + 28);
                if (v34)
                  *((_QWORD *)v33 + 28) = *(_QWORD *)v34;
                else
                  v34 = sub_1C484358C((uint64_t)v33 + 128, 72, 3);
                *(_QWORD *)&v258 = v257;
                if (v257)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v257, v257, (uint64_t)&v258);
                  v257 = 0;
                }
                llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v34, v33, v32 + 644640, (unsigned __int8 **)&v258, 0);
                if ((_QWORD)v258)
                  llvm::MetadataTracking::untrack((uint64_t)&v258, (unsigned __int8 *)v258);
                if (v257)
                  llvm::MetadataTracking::untrack((uint64_t)&v257, v257);
                v52 = v19[5];
                *(_QWORD *)(v34 + 24) = v52;
                v53 = *(_QWORD *)(v52 + 32);
                v54 = *(unsigned int *)(v34 + 40);
                if ((_DWORD)v54)
                {
                  v115 = *(_QWORD *)(v34 + 32);
                  v116 = *(_QWORD *)(v53 + 40);
                  v117 = 32 * v54;
                  do
                  {
                    if (!*(_BYTE *)v115)
                    {
                      v118 = *(unsigned int *)(v115 + 4);
                      if ((int)v118 >= 0)
                        v119 = (uint64_t *)(*(_QWORD *)(v116 + 272) + 8 * v118);
                      else
                        v119 = (uint64_t *)(*(_QWORD *)(v116 + 24) + 16 * (v118 & 0x7FFFFFFF) + 8);
                      v120 = *v119;
                      if (*v119)
                      {
                        v121 = *(_QWORD *)(v120 + 16);
                        *(_QWORD *)(v120 + 16) = v115;
                        *(_QWORD *)(v115 + 16) = v121;
                        if ((*(_BYTE *)(v115 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v115 + 24) = v120;
                        }
                        else
                        {
                          *(_QWORD *)(v115 + 24) = 0;
                          v119 = (uint64_t *)(v121 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v115 + 16) = v115;
                        *(_QWORD *)(v115 + 24) = 0;
                      }
                      *v119 = v115;
                    }
                    v115 += 32;
                    v117 -= 32;
                  }
                  while (v117);
                }
                v55 = *(_QWORD *)(v53 + 728);
                if (v55)
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v55 + 24))(v55, v34);
                v56 = *v31 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v34 = v56 | *(_QWORD *)v34 & 7;
                *(_QWORD *)(v34 + 8) = v31;
                *(_QWORD *)(v56 + 8) = v34;
                *v31 = *v31 & 7 | v34;
                LODWORD(v258) = 1;
                *((_QWORD *)&v258 + 1) = 0;
                *(_QWORD *)&v259 = (int)v29;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v33, (const llvm::MachineOperand *)&v258);
                v57 = *(_QWORD *)(v12 + 24);
                v58 = v12;
                if ((*(_BYTE *)v12 & 4) == 0)
                {
                  v58 = v12;
                  if ((*(_WORD *)(v12 + 44) & 8) != 0)
                  {
                    v58 = v12;
                    do
                      v58 = *(_QWORD *)(v58 + 8);
                    while ((*(_WORD *)(v58 + 44) & 8) != 0);
                  }
                }
                v59 = *(unint64_t **)(v58 + 8);
                v60 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8);
                v244 = *(_DWORD *)(a1 + 288);
                v61 = *(llvm::MachineFunction **)(v57 + 32);
                v257 = v256;
                if (v256)
                  llvm::MetadataTracking::track((uint64_t)&v257, v256, 2);
                v62 = *((_QWORD *)v61 + 28);
                if (v62)
                  *((_QWORD *)v61 + 28) = *(_QWORD *)v62;
                else
                  v62 = sub_1C484358C((uint64_t)v61 + 128, 72, 3);
                *(_QWORD *)&v258 = v257;
                if (v257)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v257, v257, (uint64_t)&v258);
                  v257 = 0;
                }
                llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v62, v61, v60 + 585984, (unsigned __int8 **)&v258, 0);
                if ((_QWORD)v258)
                  llvm::MetadataTracking::untrack((uint64_t)&v258, (unsigned __int8 *)v258);
                if (v257)
                  llvm::MetadataTracking::untrack((uint64_t)&v257, v257);
                v63 = *(_QWORD *)(v57 + 40);
                *(_QWORD *)(v62 + 24) = v63;
                v64 = *(_QWORD *)(v63 + 32);
                v65 = *(unsigned int *)(v62 + 40);
                if ((_DWORD)v65)
                {
                  v122 = *(_QWORD *)(v62 + 32);
                  v123 = *(_QWORD *)(v64 + 40);
                  v124 = 32 * v65;
                  do
                  {
                    if (!*(_BYTE *)v122)
                    {
                      v125 = *(unsigned int *)(v122 + 4);
                      if ((int)v125 >= 0)
                        v126 = (uint64_t *)(*(_QWORD *)(v123 + 272) + 8 * v125);
                      else
                        v126 = (uint64_t *)(*(_QWORD *)(v123 + 24) + 16 * (v125 & 0x7FFFFFFF) + 8);
                      v127 = *v126;
                      if (*v126)
                      {
                        v128 = *(_QWORD *)(v127 + 16);
                        *(_QWORD *)(v127 + 16) = v122;
                        *(_QWORD *)(v122 + 16) = v128;
                        if ((*(_BYTE *)(v122 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v122 + 24) = v127;
                        }
                        else
                        {
                          *(_QWORD *)(v122 + 24) = 0;
                          v126 = (uint64_t *)(v128 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v122 + 16) = v122;
                        *(_QWORD *)(v122 + 24) = 0;
                      }
                      *v126 = v122;
                    }
                    v122 += 32;
                    v124 -= 32;
                  }
                  while (v124);
                }
                v66 = *(_QWORD *)(v64 + 728);
                if (v66)
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v66 + 24))(v66, v62);
                v67 = *v59 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v62 = v67 | *(_QWORD *)v62 & 7;
                *(_QWORD *)(v62 + 8) = v59;
                *(_QWORD *)(v67 + 8) = v62;
                *v59 = *v59 & 7 | v62;
                *((_QWORD *)&v258 + 1) = 0;
                v259 = 0uLL;
                LODWORD(v258) = 0x1000000;
                DWORD1(v258) = v244;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v258);
                LODWORD(v258) = 1;
                *((_QWORD *)&v258 + 1) = 0;
                *(_QWORD *)&v259 = (int)v29;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v258);
                LODWORD(v258) = 1;
                *((_QWORD *)&v258 + 1) = 0;
                *(_QWORD *)&v259 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v258);
                v258 = 0u;
                v259 = 0u;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v61, (const llvm::MachineOperand *)&v258);
              }
              goto LABEL_199;
            }
            v41 = 11726;
            goto LABEL_114;
          }
          if (v25 - 12442 <= 0x3F && ((1 << (v25 + 102)) & 0xC02AA49249249249) != 0)
            goto LABEL_198;
          v48 = -12514;
        }
        v49 = v25 + v48;
        if (v49 > 0x37)
          goto LABEL_171;
        v37 = 1 << v49;
        v38 = 0xC0300C02B00C03;
LABEL_99:
        if ((v37 & v38) != 0)
          goto LABEL_198;
        goto LABEL_171;
      }
      if (*v18 <= 0x2C1u)
      {
        switch(*v18)
        {
          case 0x106u:
          case 0x107u:
            if (v12 == v19[7])
            {
              sub_1C477E01C((_QWORD *)a1, v12, (uint64_t)&v260, (llvm::SmallPtrSetImplBase *)&v250, &v255, 0, 0);
              goto LABEL_229;
            }
            v40 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
            if (!v40 || (*(_BYTE *)v40 & 4) == 0)
            {
              while ((*(_WORD *)(v40 + 44) & 4) != 0)
                v40 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
            }
            sub_1C477E01C((_QWORD *)a1, v12, (uint64_t)&v260, (llvm::SmallPtrSetImplBase *)&v250, &v255, 0, 0);
            goto LABEL_123;
          case 0x108u:
            if (v12 != v19[7])
            {
              v40 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
              if (!v40 || (*(_BYTE *)v40 & 4) == 0)
              {
                while ((*(_WORD *)(v40 + 44) & 4) != 0)
                  v40 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
              }
              v44 = 1;
              sub_1C477E01C((_QWORD *)a1, v12, (uint64_t)&v260, (llvm::SmallPtrSetImplBase *)&v250, &v255, 1, 0);
              goto LABEL_124;
            }
            v44 = 1;
            v45 = (_QWORD *)a1;
            v46 = v12;
            v47 = 0;
LABEL_85:
            sub_1C477E01C(v45, v46, (uint64_t)&v260, (llvm::SmallPtrSetImplBase *)&v250, &v255, 1, v47);
            break;
          case 0x109u:
          case 0x10Au:
          case 0x123u:
          case 0x124u:
          case 0x125u:
          case 0x126u:
          case 0x127u:
          case 0x128u:
          case 0x129u:
          case 0x12Au:
          case 0x12Bu:
          case 0x12Cu:
          case 0x12Du:
          case 0x12Eu:
          case 0x12Fu:
          case 0x130u:
          case 0x131u:
          case 0x132u:
          case 0x133u:
          case 0x134u:
          case 0x135u:
          case 0x136u:
          case 0x137u:
            goto LABEL_171;
          case 0x10Bu:
          case 0x10Cu:
          case 0x10Du:
          case 0x10Eu:
          case 0x10Fu:
          case 0x110u:
          case 0x111u:
          case 0x112u:
          case 0x113u:
          case 0x114u:
          case 0x115u:
          case 0x116u:
          case 0x117u:
          case 0x118u:
          case 0x119u:
          case 0x11Au:
          case 0x11Bu:
          case 0x11Cu:
          case 0x11Du:
          case 0x11Eu:
          case 0x11Fu:
          case 0x120u:
          case 0x121u:
          case 0x122u:
            v26 = v25 - 267;
            if (v25 - 267 >= 0x18)
              llvm::llvm_unreachable_internal((llvm *)"Unexpected OpCode", 0, 0);
            v27 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8);
            v257 = v256;
            if (v256)
              llvm::MetadataTracking::track((uint64_t)&v257, v256, 2);
            v28 = (llvm::MachineInstr *)*((_QWORD *)v20 + 28);
            if (v28)
              *((_QWORD *)v20 + 28) = *(_QWORD *)v28;
            else
              v28 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v20 + 128, 72, 3);
            *(_QWORD *)&v258 = v257;
            if (v257)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v257, v257, (uint64_t)&v258);
              v257 = 0;
            }
            llvm::MachineInstr::MachineInstr(v28, v20, v27 + 48 * (v26 + 3745), (unsigned __int8 **)&v258, 0);
            if ((_QWORD)v258)
              llvm::MetadataTracking::untrack((uint64_t)&v258, (unsigned __int8 *)v258);
            if (v257)
              llvm::MetadataTracking::untrack((uint64_t)&v257, v257);
            if (*(int *)(v12 + 40) >= 6)
            {
              v42 = 160;
              v43 = 5;
              do
              {
                llvm::MachineInstr::addOperand(v28, v20, (const llvm::MachineOperand *)(*(_QWORD *)(v12 + 32) + v42));
                ++v43;
                v42 += 32;
              }
              while (v43 < *(int *)(v12 + 40));
            }
            v44 = 1;
            v45 = (_QWORD *)a1;
            v46 = v12;
            v47 = (uint64_t)v28;
            goto LABEL_85;
          case 0x138u:
            v74 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 4);
            v75 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8);
            v257 = v256;
            if (v256)
              llvm::MetadataTracking::track((uint64_t)&v257, v256, 2);
            v51 = *((_QWORD *)v20 + 28);
            if (v51)
              *((_QWORD *)v20 + 28) = *(_QWORD *)v51;
            else
              v51 = sub_1C484358C((uint64_t)v20 + 128, 72, 3);
            *(_QWORD *)&v258 = v257;
            if (v257)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v257, v257, (uint64_t)&v258);
              v257 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v51, v20, v75 + 66288, (unsigned __int8 **)&v258, 0);
            if ((_QWORD)v258)
              llvm::MetadataTracking::untrack((uint64_t)&v258, (unsigned __int8 *)v258);
            if (v257)
              llvm::MetadataTracking::untrack((uint64_t)&v257, v257);
            v102 = v19[5];
            *(_QWORD *)(v51 + 24) = v102;
            v103 = *(_QWORD *)(v102 + 32);
            v104 = *(unsigned int *)(v51 + 40);
            if ((_DWORD)v104)
            {
              v163 = *(_QWORD *)(v51 + 32);
              v164 = *(_QWORD *)(v103 + 40);
              v165 = 32 * v104;
              do
              {
                if (!*(_BYTE *)v163)
                {
                  v166 = *(unsigned int *)(v163 + 4);
                  if ((int)v166 >= 0)
                    v167 = (uint64_t *)(*(_QWORD *)(v164 + 272) + 8 * v166);
                  else
                    v167 = (uint64_t *)(*(_QWORD *)(v164 + 24) + 16 * (v166 & 0x7FFFFFFF) + 8);
                  v168 = *v167;
                  if (*v167)
                  {
                    v169 = *(_QWORD *)(v168 + 16);
                    *(_QWORD *)(v168 + 16) = v163;
                    *(_QWORD *)(v163 + 16) = v169;
                    if ((*(_BYTE *)(v163 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v163 + 24) = v168;
                    }
                    else
                    {
                      *(_QWORD *)(v163 + 24) = 0;
                      v167 = (uint64_t *)(v169 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v163 + 16) = v163;
                    *(_QWORD *)(v163 + 24) = 0;
                  }
                  *v167 = v163;
                }
                v163 += 32;
                v165 -= 32;
              }
              while (v165);
            }
            v105 = *(_QWORD *)(v103 + 728);
            if (v105)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v105 + 24))(v105, v51);
            v106 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v51 = v106 | *(_QWORD *)v51 & 7;
            *(_QWORD *)(v51 + 8) = v12;
            *(_QWORD *)(v106 + 8) = v51;
            *(_QWORD *)v12 = *(_QWORD *)v12 & 7 | v51;
            v259 = 0uLL;
            v258 = 0x10701000000uLL;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, (const llvm::MachineOperand *)&v258);
            LODWORD(v258) = 1;
            *((_QWORD *)&v258 + 1) = 0;
            *(_QWORD *)&v259 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, (const llvm::MachineOperand *)&v258);
            *((_QWORD *)&v258 + 1) = 0;
            LODWORD(v258) = 0;
            DWORD1(v258) = v74;
            v259 = 0uLL;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, (const llvm::MachineOperand *)&v258);
            LODWORD(v258) = 1;
            *((_QWORD *)&v258 + 1) = 0;
            *(_QWORD *)&v259 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, (const llvm::MachineOperand *)&v258);
            *((_QWORD *)&v258 + 1) = 0;
            LODWORD(v258) = 0;
            DWORD1(v258) = v74;
            v259 = 0uLL;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, (const llvm::MachineOperand *)&v258);
            LODWORD(v258) = 1;
            *((_QWORD *)&v258 + 1) = 0;
            *(_QWORD *)&v259 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, (const llvm::MachineOperand *)&v258);
            *((_QWORD *)&v258 + 1) = 0;
            LODWORD(v258) = 0;
            DWORD1(v258) = v74;
            v259 = 0uLL;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, (const llvm::MachineOperand *)&v258);
            LODWORD(v258) = 1;
            *((_QWORD *)&v258 + 1) = 0;
            *(_QWORD *)&v259 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, (const llvm::MachineOperand *)&v258);
            v258 = 0u;
            v259 = 0u;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, (const llvm::MachineOperand *)&v258);
            LODWORD(v258) = 1;
            *((_QWORD *)&v258 + 1) = 0;
            *(_QWORD *)&v259 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, (const llvm::MachineOperand *)&v258);
            v258 = 0u;
            v259 = 0u;
            v107 = (const llvm::MachineOperand *)&v258;
            goto LABEL_371;
          case 0x139u:
            goto LABEL_372;
          default:
            if (v25 != 690)
              goto LABEL_171;
            if (v255)
              goto LABEL_199;
            v68 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8);
            v257 = v256;
            if (v256)
              llvm::MetadataTracking::track((uint64_t)&v257, v256, 2);
            v51 = *((_QWORD *)v20 + 28);
            if (v51)
              *((_QWORD *)v20 + 28) = *(_QWORD *)v51;
            else
              v51 = sub_1C484358C((uint64_t)v20 + 128, 72, 3);
            *(_QWORD *)&v258 = v257;
            if (v257)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v257, v257, (uint64_t)&v258);
              v257 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v51, v20, v68 + 32928, (unsigned __int8 **)&v258, 0);
            if ((_QWORD)v258)
              llvm::MetadataTracking::untrack((uint64_t)&v258, (unsigned __int8 *)v258);
            if (v257)
              llvm::MetadataTracking::untrack((uint64_t)&v257, v257);
            v158 = v19[5];
            *(_QWORD *)(v51 + 24) = v158;
            v131 = *(_QWORD *)(v158 + 32);
            v159 = *(unsigned int *)(v51 + 40);
            if ((_DWORD)v159)
            {
              v181 = *(_QWORD *)(v51 + 32);
              v182 = *(_QWORD *)(v131 + 40);
              v183 = 32 * v159;
              do
              {
                if (!*(_BYTE *)v181)
                {
                  v184 = *(unsigned int *)(v181 + 4);
                  if ((int)v184 >= 0)
                    v185 = (uint64_t *)(*(_QWORD *)(v182 + 272) + 8 * v184);
                  else
                    v185 = (uint64_t *)(*(_QWORD *)(v182 + 24) + 16 * (v184 & 0x7FFFFFFF) + 8);
                  v186 = *v185;
                  if (*v185)
                  {
                    v187 = *(_QWORD *)(v186 + 16);
                    *(_QWORD *)(v186 + 16) = v181;
                    *(_QWORD *)(v181 + 16) = v187;
                    if ((*(_BYTE *)(v181 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v181 + 24) = v186;
                    }
                    else
                    {
                      *(_QWORD *)(v181 + 24) = 0;
                      v185 = (uint64_t *)(v187 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v181 + 16) = v181;
                    *(_QWORD *)(v181 + 24) = 0;
                  }
                  *v185 = v181;
                }
                v181 += 32;
                v183 -= 32;
              }
              while (v183);
            }
            goto LABEL_368;
        }
        goto LABEL_230;
      }
      if (*v18 <= 0x9C9u)
      {
        switch(v25)
        {
          case 0x2C2u:
            if (v255)
              goto LABEL_199;
            v72 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8);
            v257 = v256;
            if (v256)
              llvm::MetadataTracking::track((uint64_t)&v257, v256, 2);
            v51 = *((_QWORD *)v20 + 28);
            if (v51)
              *((_QWORD *)v20 + 28) = *(_QWORD *)v51;
            else
              v51 = sub_1C484358C((uint64_t)v20 + 128, 72, 3);
            *(_QWORD *)&v258 = v257;
            if (v257)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v257, v257, (uint64_t)&v258);
              v257 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v51, v20, v72 + 33696, (unsigned __int8 **)&v258, 0);
            if ((_QWORD)v258)
              llvm::MetadataTracking::untrack((uint64_t)&v258, (unsigned __int8 *)v258);
            if (v257)
              llvm::MetadataTracking::untrack((uint64_t)&v257, v257);
            v130 = v19[5];
            *(_QWORD *)(v51 + 24) = v130;
            v131 = *(_QWORD *)(v130 + 32);
            v132 = *(unsigned int *)(v51 + 40);
            if ((_DWORD)v132)
            {
              v133 = *(_QWORD *)(v51 + 32);
              v134 = *(_QWORD *)(v131 + 40);
              v135 = 32 * v132;
              do
              {
                if (!*(_BYTE *)v133)
                {
                  v136 = *(unsigned int *)(v133 + 4);
                  if ((int)v136 >= 0)
                    v137 = (uint64_t *)(*(_QWORD *)(v134 + 272) + 8 * v136);
                  else
                    v137 = (uint64_t *)(*(_QWORD *)(v134 + 24) + 16 * (v136 & 0x7FFFFFFF) + 8);
                  v138 = *v137;
                  if (*v137)
                  {
                    v139 = *(_QWORD *)(v138 + 16);
                    *(_QWORD *)(v138 + 16) = v133;
                    *(_QWORD *)(v133 + 16) = v139;
                    if ((*(_BYTE *)(v133 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v133 + 24) = v138;
                    }
                    else
                    {
                      *(_QWORD *)(v133 + 24) = 0;
                      v137 = (uint64_t *)(v139 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v133 + 16) = v133;
                    *(_QWORD *)(v133 + 24) = 0;
                  }
                  *v137 = v133;
                }
                v133 += 32;
                v135 -= 32;
              }
              while (v135);
            }
            break;
          case 0x2D2u:
            if (v255)
              goto LABEL_199;
            v73 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8);
            v257 = v256;
            if (v256)
              llvm::MetadataTracking::track((uint64_t)&v257, v256, 2);
            v51 = *((_QWORD *)v20 + 28);
            if (v51)
              *((_QWORD *)v20 + 28) = *(_QWORD *)v51;
            else
              v51 = sub_1C484358C((uint64_t)v20 + 128, 72, 3);
            *(_QWORD *)&v258 = v257;
            if (v257)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v257, v257, (uint64_t)&v258);
              v257 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v51, v20, v73 + 34464, (unsigned __int8 **)&v258, 0);
            if ((_QWORD)v258)
              llvm::MetadataTracking::untrack((uint64_t)&v258, (unsigned __int8 *)v258);
            if (v257)
              llvm::MetadataTracking::untrack((uint64_t)&v257, v257);
            v149 = v19[5];
            *(_QWORD *)(v51 + 24) = v149;
            v131 = *(_QWORD *)(v149 + 32);
            v150 = *(unsigned int *)(v51 + 40);
            if ((_DWORD)v150)
            {
              v151 = *(_QWORD *)(v51 + 32);
              v152 = *(_QWORD *)(v131 + 40);
              v153 = 32 * v150;
              do
              {
                if (!*(_BYTE *)v151)
                {
                  v154 = *(unsigned int *)(v151 + 4);
                  if ((int)v154 >= 0)
                    v155 = (uint64_t *)(*(_QWORD *)(v152 + 272) + 8 * v154);
                  else
                    v155 = (uint64_t *)(*(_QWORD *)(v152 + 24) + 16 * (v154 & 0x7FFFFFFF) + 8);
                  v156 = *v155;
                  if (*v155)
                  {
                    v157 = *(_QWORD *)(v156 + 16);
                    *(_QWORD *)(v156 + 16) = v151;
                    *(_QWORD *)(v151 + 16) = v157;
                    if ((*(_BYTE *)(v151 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v151 + 24) = v156;
                    }
                    else
                    {
                      *(_QWORD *)(v151 + 24) = 0;
                      v155 = (uint64_t *)(v157 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v151 + 16) = v151;
                    *(_QWORD *)(v151 + 24) = 0;
                  }
                  *v155 = v151;
                }
                v151 += 32;
                v153 -= 32;
              }
              while (v153);
            }
            break;
          case 0x2E2u:
            if (v255)
              goto LABEL_199;
            v50 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8);
            v257 = v256;
            if (v256)
              llvm::MetadataTracking::track((uint64_t)&v257, v256, 2);
            v51 = *((_QWORD *)v20 + 28);
            if (v51)
              *((_QWORD *)v20 + 28) = *(_QWORD *)v51;
            else
              v51 = sub_1C484358C((uint64_t)v20 + 128, 72, 3);
            *(_QWORD *)&v258 = v257;
            if (v257)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v257, v257, (uint64_t)&v258);
              v257 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v51, v20, v50 + 35232, (unsigned __int8 **)&v258, 0);
            if ((_QWORD)v258)
              llvm::MetadataTracking::untrack((uint64_t)&v258, (unsigned __int8 *)v258);
            if (v257)
              llvm::MetadataTracking::untrack((uint64_t)&v257, v257);
            v140 = v19[5];
            *(_QWORD *)(v51 + 24) = v140;
            v131 = *(_QWORD *)(v140 + 32);
            v141 = *(unsigned int *)(v51 + 40);
            if ((_DWORD)v141)
            {
              v142 = *(_QWORD *)(v51 + 32);
              v143 = *(_QWORD *)(v131 + 40);
              v144 = 32 * v141;
              do
              {
                if (!*(_BYTE *)v142)
                {
                  v145 = *(unsigned int *)(v142 + 4);
                  if ((int)v145 >= 0)
                    v146 = (uint64_t *)(*(_QWORD *)(v143 + 272) + 8 * v145);
                  else
                    v146 = (uint64_t *)(*(_QWORD *)(v143 + 24) + 16 * (v145 & 0x7FFFFFFF) + 8);
                  v147 = *v146;
                  if (*v146)
                  {
                    v148 = *(_QWORD *)(v147 + 16);
                    *(_QWORD *)(v147 + 16) = v142;
                    *(_QWORD *)(v142 + 16) = v148;
                    if ((*(_BYTE *)(v142 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v142 + 24) = v147;
                    }
                    else
                    {
                      *(_QWORD *)(v142 + 24) = 0;
                      v146 = (uint64_t *)(v148 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v142 + 16) = v142;
                    *(_QWORD *)(v142 + 24) = 0;
                  }
                  *v146 = v142;
                }
                v142 += 32;
                v144 -= 32;
              }
              while (v144);
            }
            break;
          default:
            goto LABEL_171;
        }
LABEL_368:
        v160 = *(_QWORD *)(v131 + 728);
        if (v160)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v160 + 24))(v160, v51);
        v161 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v51 = v161 | *(_QWORD *)v51 & 7;
        *(_QWORD *)(v51 + 8) = v12;
        *(_QWORD *)(v161 + 8) = v51;
        *(_QWORD *)v12 = *(_QWORD *)v12 & 7 | v51;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, *(const llvm::MachineOperand **)(v12 + 32));
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, (const llvm::MachineOperand *)(*(_QWORD *)(v12 + 32) + 32));
        *((_QWORD *)&v258 + 1) = 0;
        LODWORD(v258) = 0;
        DWORD1(v258) = v17;
        v259 = 0uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, (const llvm::MachineOperand *)&v258);
        LODWORD(v258) = 1;
        *((_QWORD *)&v258 + 1) = 0;
        *(_QWORD *)&v259 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, (const llvm::MachineOperand *)&v258);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, (const llvm::MachineOperand *)(*(_QWORD *)(v12 + 32) + 96));
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, (const llvm::MachineOperand *)(*(_QWORD *)(v12 + 32) + 128));
        v107 = (const llvm::MachineOperand *)(*(_QWORD *)(v12 + 32) + 160);
LABEL_371:
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v20, v107);
LABEL_372:
        v162 = v261;
        if (v261 >= (unint64_t)HIDWORD(v261))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v260, (uint64_t)&v262, v261 + 1, 8);
          v162 = v261;
        }
        v44 = 0;
        *((_QWORD *)v260 + v162) = v12;
        LODWORD(v261) = v261 + 1;
        goto LABEL_230;
      }
      if (v25 - 2506 <= 0x13)
      {
        if (((1 << (v25 + 54)) & 0x55555) != 0)
        {
          v35 = *(_QWORD *)(a1 + 248);
          if (*(_BYTE *)(v35 + 287))
            v36 = *(unsigned __int8 *)(v35 + 288) == 0;
          else
            v36 = 0;
          (*(void (**)(_QWORD, uint64_t, _BOOL8, uint64_t, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v20 + 43)
                                                                                             + 8))(*((_QWORD *)v20 + 43), 36, v36, 1, 0, 1, 2);
LABEL_199:
          v44 = 0;
          goto LABEL_230;
        }
        v39 = *(_QWORD *)(a1 + 248);
        if (!*(_BYTE *)(v39 + 287) || !*(_BYTE *)(v39 + 288))
          goto LABEL_199;
        if (v12 == v19[7])
        {
          sub_1C47830BC(a1, (unint64_t *)v12, (llvm::SmallPtrSetImplBase *)&v250, &v255);
          goto LABEL_229;
        }
        v40 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
        if (!v40 || (*(_BYTE *)v40 & 4) == 0)
        {
          while ((*(_WORD *)(v40 + 44) & 4) != 0)
            v40 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
        }
        sub_1C47830BC(a1, (unint64_t *)v12, (llvm::SmallPtrSetImplBase *)&v250, &v255);
LABEL_123:
        v44 = 1;
LABEL_124:
        v12 = v40;
        goto LABEL_230;
      }
LABEL_171:
      v22 = ((*(unsigned __int16 *)(*(_QWORD *)v20 + 18) >> 4) & 0x3FF) - 102;
      if ((v22 > 5) | (0xEu >> v22) & 1 && ((v21 & 0x2000) != 0 || sub_1C477C96C(v25)))
      {
        v69 = v18[1];
        v70 = (v69 - 2);
        v71 = *(_QWORD *)(v12 + 32);
        if (*(_QWORD *)(v71 + 32 * v70 + 16))
        {
          v44 = 0;
          v14 = v15;
          goto LABEL_230;
        }
        if (!v15)
        {
          v129 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8);
          v257 = v256;
          if (v256)
            llvm::MetadataTracking::track((uint64_t)&v257, v256, 2);
          v15 = *((_QWORD *)v20 + 28);
          if (v15)
            *((_QWORD *)v20 + 28) = *(_QWORD *)v15;
          else
            v15 = sub_1C484358C((uint64_t)v20 + 128, 72, 3);
          *(_QWORD *)&v258 = v257;
          if (v257)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v257, v257, (uint64_t)&v258);
            v257 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v15, v20, v129 + 239664, (unsigned __int8 **)&v258, 0);
          if ((_QWORD)v258)
            llvm::MetadataTracking::untrack((uint64_t)&v258, (unsigned __int8 *)v258);
          if (v257)
            llvm::MetadataTracking::untrack((uint64_t)&v257, v257);
          v170 = v19[5];
          *(_QWORD *)(v15 + 24) = v170;
          v171 = *(_QWORD *)(v170 + 32);
          v172 = *(unsigned int *)(v15 + 40);
          if ((_DWORD)v172)
          {
            v188 = *(_QWORD *)(v15 + 32);
            v189 = *(_QWORD *)(v171 + 40);
            v190 = 32 * v172;
            do
            {
              if (!*(_BYTE *)v188)
              {
                v191 = *(unsigned int *)(v188 + 4);
                if ((int)v191 >= 0)
                  v192 = (uint64_t *)(*(_QWORD *)(v189 + 272) + 8 * v191);
                else
                  v192 = (uint64_t *)(*(_QWORD *)(v189 + 24) + 16 * (v191 & 0x7FFFFFFF) + 8);
                v193 = *v192;
                if (*v192)
                {
                  v194 = *(_QWORD *)(v193 + 16);
                  *(_QWORD *)(v193 + 16) = v188;
                  *(_QWORD *)(v188 + 16) = v194;
                  if ((*(_BYTE *)(v188 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v188 + 24) = v193;
                  }
                  else
                  {
                    *(_QWORD *)(v188 + 24) = 0;
                    v192 = (uint64_t *)(v194 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v188 + 16) = v188;
                  *(_QWORD *)(v188 + 24) = 0;
                }
                *v192 = v188;
              }
              v188 += 32;
              v190 -= 32;
            }
            while (v190);
          }
          v173 = *(_QWORD *)(v171 + 728);
          if (v173)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v173 + 24))(v173, v15);
          v174 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v15 = v174 | *(_QWORD *)v15 & 7;
          *(_QWORD *)(v15 + 8) = v12;
          *(_QWORD *)(v174 + 8) = v15;
          *(_QWORD *)v12 = *(_QWORD *)v12 & 7 | v15;
          LODWORD(v258) = 1;
          *((_QWORD *)&v258 + 1) = 0;
          *(_QWORD *)&v259 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v15, v20, (const llvm::MachineOperand *)&v258);
          v175 = *v245;
          if (*v245 == -1)
            v175 = 279;
          *((_QWORD *)&v258 + 1) = 0;
          LODWORD(v258) = 0;
          DWORD1(v258) = v175;
          v259 = 0uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v15, v20, (const llvm::MachineOperand *)&v258);
          LODWORD(v258) = 1;
          *((_QWORD *)&v258 + 1) = 0;
          *(_QWORD *)&v259 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v15, v20, (const llvm::MachineOperand *)&v258);
          LODWORD(v258) = 1;
          *((_QWORD *)&v258 + 1) = 0;
          *(_QWORD *)&v259 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v15, v20, (const llvm::MachineOperand *)&v258);
          v259 = 0uLL;
          v258 = 0x201000000uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v15, v20, (const llvm::MachineOperand *)&v258);
          LODWORD(v258) = 1;
          *((_QWORD *)&v258 + 1) = 0;
          *(_QWORD *)&v259 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v15, v20, (const llvm::MachineOperand *)&v258);
          v258 = 0u;
          v259 = 0u;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v15, v20, (const llvm::MachineOperand *)&v258);
          v71 = *(_QWORD *)(v12 + 32);
        }
        *(_QWORD *)(v71 + 32 * v70 + 16) = 3;
        llvm::MachineOperand::setReg(*(_QWORD *)(v12 + 32) + 32 * (v69 - 1), 2u);
        v176 = *(unsigned int *)(v12 + 40);
        if ((_DWORD)v176)
        {
          v177 = 0;
          for (j = 0; j < v176; ++j)
          {
            v179 = *(_QWORD *)(v12 + 32);
            v180 = *(_DWORD *)(v179 + v177);
            if ((v180 & 0x10000FF) == 0x1000000 && *(_DWORD *)(v179 + v177 + 4) == 2)
            {
              *(_DWORD *)(v179 + v177) = v180 & 0xFBFFFFFF;
              v176 = *(unsigned int *)(v12 + 40);
            }
            v177 += 32;
          }
        }
        v14 = v15;
      }
      v44 = 0;
      if (*v246 && (v21 & 1) != 0)
      {
        sub_1C477C990(a1, (unint64_t *)v12);
        v44 = 0;
        *(_BYTE *)(a1 + 292) = 0;
      }
LABEL_230:
      if (v256)
        llvm::MetadataTracking::untrack((uint64_t)&v256, v256);
      if ((v44 & 1) != 0)
        break;
      if (!v12 || (*(_BYTE *)v12 & 4) == 0)
      {
        while ((*(_WORD *)(v12 + 44) & 8) != 0)
          v12 = *(_QWORD *)(v12 + 8);
      }
      v13 |= v44;
      v12 = *(_QWORD *)(v12 + 8);
      if ((unint64_t *)v12 == v249)
        goto LABEL_440;
    }
    v13 = 1;
LABEL_440:
    if (*v246)
    {
      sub_1C477C990(a1, v249);
      *(_BYTE *)(a1 + 292) = 0;
    }
    v195 = (uint64_t *)v260;
    v196 = (uint64_t *)((char *)v260 + 8 * v261);
    v8 = v248;
    if ((_DWORD)v261)
    {
      do
      {
        v198 = (_BYTE *)*v195;
        v197 = (_BYTE *)*v195;
        if ((*(_BYTE *)*v195 & 4) == 0)
        {
          v197 = (_BYTE *)*v195;
          if ((*((_WORD *)v198 + 22) & 8) != 0)
          {
            v197 = (_BYTE *)*v195;
            do
              v197 = (_BYTE *)*((_QWORD *)v197 + 1);
            while ((*((_WORD *)v197 + 22) & 8) != 0);
          }
        }
        sub_1C487FE80(*((_QWORD *)v198 + 3) + 40, (uint64_t)v198, *((_QWORD *)v197 + 1));
        ++v195;
      }
      while (v195 != v196);
      v195 = (uint64_t *)v260;
    }
    if (v195 != &v262)
      free(v195);
    v9 = v247 | v13;
    v7 = v243 + 40;
LABEL_454:
    v8 = *(_QWORD *)(v8 + 8);
  }
  while ((_QWORD *)v8 != v7);
  if ((v9 & 1) != 0)
  {
    v199 = *(_QWORD **)(**(_QWORD **)(a1 + 280) + 360);
    *v199 &= ~4uLL;
    v200 = 1;
    goto LABEL_458;
  }
LABEL_457:
  v200 = 0;
LABEL_458:
  if ((v242 - 100) <= 7 && ((1 << (v242 - 100)) & 0xC5) != 0
    || !*(_BYTE *)(*(_QWORD *)(a1 + 248) + 297)
    || (*(_WORD *)(*v243 + 18) & 0x3FF0) == 0x690)
  {
    goto LABEL_460;
  }
  v208 = (llvm::MachineBasicBlock *)v243[40];
  v209 = (llvm::MachineBasicBlock *)v243[41];
  *(_QWORD *)&v258 = 0;
  if (v208 == v209)
  {
    v210 = v208;
  }
  else
  {
    do
    {
      v210 = v208;
      if (((*((_QWORD *)v208 + 12) - *((_QWORD *)v208 + 11)) & 0x7FFFFFFF8) == 0)
        break;
      v208 = *(llvm::MachineBasicBlock **)v208;
    }
    while (*(llvm::MachineBasicBlock **)v210 != v209);
  }
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v210);
  if (((*((_QWORD *)v210 + 12) - *((_QWORD *)v210 + 11)) & 0x7FFFFFFF8) != 0
    || (llvm::MachineBasicBlock *)((char *)v210 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
    goto LABEL_582;
  }
  v226 = FirstTerminator;
  v227 = *((_QWORD *)v210 + 7);
  if (v227 != FirstTerminator)
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v226 + 16) + 18) & 4) != 0 && sub_1C612D2DC(v226))
      {
LABEL_523:
        sub_1C4785F58(v226);
        goto LABEL_582;
      }
      v226 = *(_QWORD *)v226 & 0xFFFFFFFFFFFFFFF8;
      if (!v226 || (*(_BYTE *)v226 & 4) == 0)
      {
        while ((*(_WORD *)(v226 + 44) & 4) != 0)
          v226 = *(_QWORD *)v226 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    while (v226 != v227);
    v226 = v227;
  }
  if (v210 == v209)
    goto LABEL_581;
  v228 = *(llvm::MachineBasicBlock **)v210;
  v229 = *(_QWORD *)v210 + 48;
  v260 = v264;
  v261 = (uint64_t)v264;
  v262 = 16;
  v263 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v260, (uint64_t)v210);
  v230 = *((_QWORD *)v209 + 7);
  if (v229 == v230)
  {
LABEL_571:
    v241 = 1;
    goto LABEL_572;
  }
  v231 = 0;
  while (2)
  {
    if (v229 == *((_QWORD *)v228 + 7))
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v260, (uint64_t)v228);
      v228 = *(llvm::MachineBasicBlock **)v228;
      v229 = (unint64_t)v228 + 48;
      goto LABEL_547;
    }
    v229 = *(_QWORD *)v229 & 0xFFFFFFFFFFFFFFF8;
    if (!v229 || (*(_BYTE *)v229 & 4) == 0)
    {
      while ((*(_WORD *)(v229 + 44) & 4) != 0)
        v229 = *(_QWORD *)v229 & 0xFFFFFFFFFFFFFFF8;
    }
    v232 = *(_QWORD *)(v229 + 16);
    if ((*(_BYTE *)(v232 + 18) & 4) != 0)
      v231 = v229;
    if (v229 == v230 || sub_1C612D2DC(v229))
      goto LABEL_569;
    v233 = *(_QWORD *)(v232 + 8);
    if ((*(_WORD *)(v229 + 44) & 0xC) == 0 || (*(_WORD *)(v229 + 44) & 4) != 0)
    {
      if ((v233 & 0x8A0) != 0)
        goto LABEL_569;
      if ((v233 & 0x400) != 0)
        goto LABEL_543;
LABEL_548:
      if (v229 == v230)
        goto LABEL_571;
      continue;
    }
    break;
  }
  v237 = v229;
  if ((v233 & 0x80) == 0)
  {
    while ((*(_WORD *)(v237 + 44) & 8) != 0)
    {
      v237 = *(_QWORD *)(v237 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v237 + 16) + 8) & 0x80) != 0)
        goto LABEL_569;
    }
    if ((v233 & 0x20) == 0)
    {
      v238 = v229;
      while ((*(_WORD *)(v238 + 44) & 8) != 0)
      {
        v238 = *(_QWORD *)(v238 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v238 + 16) + 8) & 0x20) != 0)
          goto LABEL_569;
      }
      if ((v233 & 0x800) == 0)
      {
        v239 = v229;
        while ((*(_WORD *)(v239 + 44) & 8) != 0)
        {
          v239 = *(_QWORD *)(v239 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v239 + 16) + 9) & 8) != 0)
            goto LABEL_569;
        }
        v240 = v229;
        if ((v233 & 0x400) == 0)
        {
          while ((*(_WORD *)(v240 + 44) & 8) != 0)
          {
            v240 = *(_QWORD *)(v240 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v240 + 16) + 9) & 4) != 0)
              goto LABEL_543;
          }
          goto LABEL_548;
        }
LABEL_543:
        v235 = sub_1C477672C((uint64_t)&v260, *(_QWORD *)(*(_QWORD *)(v229 + 32) + 16));
        if ((void *)v261 == v260)
          v236 = (uint64_t *)((char *)&v262 + 4);
        else
          v236 = &v262;
        if (v235 == (_QWORD *)(v261 + 8 * *(unsigned int *)v236))
          goto LABEL_569;
LABEL_547:
        v230 = *((_QWORD *)v209 + 7);
        goto LABEL_548;
      }
    }
  }
LABEL_569:
  if (!v231)
    goto LABEL_571;
  sub_1C4785F58(v231);
  if (v228 != v209)
    goto LABEL_571;
  v241 = 0;
LABEL_572:
  if ((void *)v261 != v260)
    free((void *)v261);
  if (v241)
  {
    v226 = *((_QWORD *)v210 + 7);
LABEL_581:
    while (v226 != llvm::MachineBasicBlock::getFirstTerminator(v210))
    {
      if ((*(_BYTE *)(*(_QWORD *)(v226 + 16) + 18) & 4) != 0)
        goto LABEL_523;
      if ((*(_BYTE *)v226 & 4) == 0)
      {
        while ((*(_WORD *)(v226 + 44) & 8) != 0)
          v226 = *(_QWORD *)(v226 + 8);
      }
      v226 = *(_QWORD *)(v226 + 8);
    }
  }
LABEL_582:
  if ((_QWORD)v258)
    llvm::MetadataTracking::untrack((uint64_t)&v258, (unsigned __int8 *)v258);
LABEL_460:
  if (v251 != v250)
    free(v251);
  return v200;
}

BOOL sub_1C477C96C(int a1)
{
  return (a1 - 12440) < 0x30 || (a1 - 12868) < 4;
}

void sub_1C477C990(uint64_t a1, unint64_t *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  llvm::MachineFunction *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  __int128 v25;
  __int128 v26;

  v4 = (unsigned __int8 *)a2[7];
  v23 = v4;
  if (v4)
  {
    llvm::MetadataTracking::track((uint64_t)&v23, v4, 2);
    v4 = v23;
  }
  v5 = a2[3];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8);
  v7 = *(_DWORD *)(a1 + 288);
  v8 = *(llvm::MachineFunction **)(v5 + 32);
  v24 = v4;
  if (v4)
    llvm::MetadataTracking::track((uint64_t)&v24, v4, 2);
  v9 = v6 + 66288;
  v10 = *((_QWORD *)v8 + 28);
  if (v10)
    *((_QWORD *)v8 + 28) = *(_QWORD *)v10;
  else
    v10 = sub_1C484358C((uint64_t)v8 + 128, 72, 3);
  *(_QWORD *)&v25 = v24;
  if (v24)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v24, v24, (uint64_t)&v25);
    v24 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v10, v8, v9, (unsigned __int8 **)&v25, 0);
  if ((_QWORD)v25)
    llvm::MetadataTracking::untrack((uint64_t)&v25, (unsigned __int8 *)v25);
  if (v24)
    llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
  v11 = *(_QWORD *)(v5 + 40);
  *(_QWORD *)(v10 + 24) = v11;
  v12 = *(_QWORD *)(v11 + 32);
  v13 = *(unsigned int *)(v10 + 40);
  if ((_DWORD)v13)
  {
    v16 = *(_QWORD *)(v10 + 32);
    v17 = *(_QWORD *)(v12 + 40);
    v18 = 32 * v13;
    do
    {
      if (!*(_BYTE *)v16)
      {
        v19 = *(unsigned int *)(v16 + 4);
        if ((int)v19 >= 0)
          v20 = (uint64_t *)(*(_QWORD *)(v17 + 272) + 8 * v19);
        else
          v20 = (uint64_t *)(*(_QWORD *)(v17 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8);
        v21 = *v20;
        if (*v20)
        {
          v22 = *(_QWORD *)(v21 + 16);
          *(_QWORD *)(v21 + 16) = v16;
          *(_QWORD *)(v16 + 16) = v22;
          if ((*(_BYTE *)(v16 + 3) & 1) != 0)
          {
            *(_QWORD *)(v16 + 24) = v21;
          }
          else
          {
            *(_QWORD *)(v16 + 24) = 0;
            v20 = (uint64_t *)(v22 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v16 + 16) = v16;
          *(_QWORD *)(v16 + 24) = 0;
        }
        *v20 = v16;
      }
      v16 += 32;
      v18 -= 32;
    }
    while (v18);
  }
  v14 = *(_QWORD *)(v12 + 728);
  if (v14)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 24))(v14, v10);
  v15 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = v15 | *(_QWORD *)v10 & 7;
  *(_QWORD *)(v10 + 8) = a2;
  *(_QWORD *)(v15 + 8) = v10;
  *a2 = *a2 & 7 | v10;
  *((_QWORD *)&v25 + 1) = 0;
  v26 = 0uLL;
  LODWORD(v25) = 0x1000000;
  DWORD1(v25) = v7;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v8, (const llvm::MachineOperand *)&v25);
  LODWORD(v25) = 1;
  *((_QWORD *)&v25 + 1) = 0;
  *(_QWORD *)&v26 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v8, (const llvm::MachineOperand *)&v25);
  v26 = 0uLL;
  v25 = 0x11700000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v8, (const llvm::MachineOperand *)&v25);
  LODWORD(v25) = 1;
  *((_QWORD *)&v25 + 1) = 0;
  *(_QWORD *)&v26 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v8, (const llvm::MachineOperand *)&v25);
  v26 = 0uLL;
  v25 = 0x11700000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v8, (const llvm::MachineOperand *)&v25);
  LODWORD(v25) = 1;
  *((_QWORD *)&v25 + 1) = 0;
  *(_QWORD *)&v26 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v8, (const llvm::MachineOperand *)&v25);
  v26 = 0uLL;
  v25 = 0x11700000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v8, (const llvm::MachineOperand *)&v25);
  LODWORD(v25) = 1;
  *((_QWORD *)&v25 + 1) = 0;
  *(_QWORD *)&v26 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v8, (const llvm::MachineOperand *)&v25);
  v25 = 0u;
  v26 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v8, (const llvm::MachineOperand *)&v25);
  LODWORD(v25) = 1;
  *((_QWORD *)&v25 + 1) = 0;
  *(_QWORD *)&v26 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v8, (const llvm::MachineOperand *)&v25);
  v25 = 0u;
  v26 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v10, v8, (const llvm::MachineOperand *)&v25);
  if (v23)
    llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
}

void sub_1C477CCB4(_QWORD *a1, uint64_t a2, llvm::SmallPtrSetImplBase *a3, _BYTE *a4)
{
  unint64_t *v7;
  unint64_t v8;
  _BOOL4 v9;
  int v10;
  unsigned __int8 *v11;
  llvm::BasicBlock *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v25;
  uint64_t v26;
  llvm::MachineFunction *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 v46;
  _WORD *v47;
  unsigned __int16 *v48;
  int v49;
  int v50;
  unint64_t *v51;
  uint64_t v52;
  llvm::MachineFunction *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  llvm::MachineFunction *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  llvm::MachineFunction *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  llvm::MachineFunction *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  uint64_t v91;
  llvm::MachineFunction *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  __int128 v156;
  __int128 v157;

  if (!*(_BYTE *)(a1[31] + 290))
    return;
  v7 = *(unint64_t **)(a2 + 24);
  v8 = v7[4];
  if (*a4)
    v9 = v7 != *(unint64_t **)(v8 + 328);
  else
    v9 = 1;
  v10 = *(_DWORD *)(a1[32] + 8);
  *a4 = 0;
  v11 = *(unsigned __int8 **)(a2 + 56);
  v154 = v11;
  if (v11)
    llvm::MetadataTracking::track((uint64_t)&v154, v11, 2);
  v12 = (llvm::BasicBlock *)v7[2];
  v13 = *(_QWORD *)(v8 + 312);
  if (v13)
    *(_QWORD *)(v8 + 312) = *(_QWORD *)v13;
  else
    v13 = sub_1C484358C(v8 + 128, 232, 3);
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = v12;
  *(_DWORD *)(v13 + 24) = -1;
  *(_QWORD *)(v13 + 48) = (v13 + 48) | 4;
  *(_QWORD *)(v13 + 56) = v13 + 48;
  v153 = v13 + 48;
  *(_BYTE *)(v13 + 144) = 0;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 121) = 0u;
  *(_QWORD *)(v13 + 160) = 0;
  *(_QWORD *)(v13 + 168) = 0;
  *(_QWORD *)(v13 + 152) = 0;
  *(_BYTE *)(v13 + 176) = 0;
  *(_DWORD *)(v13 + 187) = 0;
  *(_QWORD *)(v13 + 180) = 0;
  *(_QWORD *)(v13 + 192) = 0;
  *(_DWORD *)(v13 + 199) = 0;
  *(_QWORD *)(v13 + 216) = 0;
  *(_QWORD *)(v13 + 224) = 0;
  *(_QWORD *)(v13 + 208) = 0;
  *(_QWORD *)(v13 + 32) = v8;
  *(_QWORD *)(v13 + 40) = v13;
  if (v12)
  {
    *(_QWORD *)(v13 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v12);
    *(_QWORD *)(v13 + 144) = v14;
  }
  v15 = *(_QWORD *)(v8 + 312);
  if (v15)
    *(_QWORD *)(v8 + 312) = *(_QWORD *)v15;
  else
    v15 = sub_1C484358C(v8 + 128, 232, 3);
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = v12;
  *(_DWORD *)(v15 + 24) = -1;
  *(_QWORD *)(v15 + 48) = (v15 + 48) | 4;
  *(_QWORD *)(v15 + 56) = v15 + 48;
  *(_BYTE *)(v15 + 144) = 0;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_OWORD *)(v15 + 112) = 0u;
  *(_OWORD *)(v15 + 121) = 0u;
  *(_QWORD *)(v15 + 160) = 0;
  *(_QWORD *)(v15 + 168) = 0;
  *(_QWORD *)(v15 + 152) = 0;
  *(_BYTE *)(v15 + 176) = 0;
  *(_DWORD *)(v15 + 187) = 0;
  *(_QWORD *)(v15 + 180) = 0;
  *(_QWORD *)(v15 + 192) = 0;
  *(_DWORD *)(v15 + 199) = 0;
  *(_QWORD *)(v15 + 216) = 0;
  *(_QWORD *)(v15 + 224) = 0;
  *(_QWORD *)(v15 + 208) = 0;
  *(_QWORD *)(v15 + 32) = v8;
  *(_QWORD *)(v15 + 40) = v15;
  if (v12)
  {
    *(_QWORD *)(v15 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v12);
    *(_QWORD *)(v15 + 144) = v16;
  }
  sub_1C4774094(a3, v13);
  v17 = (unint64_t *)v7[1];
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v8 + 320, v13);
  v18 = *v17;
  *(_QWORD *)v13 = *v17;
  *(_QWORD *)(v13 + 8) = v17;
  *(_QWORD *)(v18 + 8) = v13;
  *v17 = v13;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v8 + 320, v15);
  v19 = *v17;
  *(_QWORD *)v15 = *v17;
  *(_QWORD *)(v15 + 8) = v17;
  *(_QWORD *)(v19 + 8) = v15;
  *v17 = v15;
  v20 = *(unint64_t **)(v15 + 56);
  if (a2)
  {
    v21 = a2;
    if ((*(_BYTE *)a2 & 4) != 0)
      goto LABEL_21;
  }
  else
  {
    v21 = 0;
  }
  while ((*(_WORD *)(v21 + 44) & 8) != 0)
    v21 = *(_QWORD *)(v21 + 8);
LABEL_21:
  v22 = *(unint64_t **)(v21 + 8);
  v23 = v7 + 6;
  if (v22 != v7 + 6 && v20 != v23)
  {
    if ((unint64_t *)v15 != v7)
    {
      v135 = *(_QWORD *)(v15 + 40);
      v136 = v22;
      do
      {
        v136[3] = v135;
        v136 = (unint64_t *)v136[1];
      }
      while (v136 != v23);
    }
    sub_1C4785D30(v20, v22, v7 + 6);
  }
  llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v15, (llvm::MachineBasicBlock *)v7);
  if (v23 != (unint64_t *)a2)
  {
    v25 = *(unint64_t **)(v13 + 56);
    if (v25 != v23)
    {
      if ((unint64_t *)v13 != v7)
      {
        v137 = *(_QWORD *)(v13 + 40);
        v138 = (unint64_t *)a2;
        do
        {
          v138[3] = v137;
          v138 = (unint64_t *)v138[1];
        }
        while (v138 != v23);
      }
      sub_1C4785D30(v25, (unint64_t *)a2, v7 + 6);
    }
  }
  llvm::MachineBasicBlock::addSuccessor(v7, (_QWORD *)v13, -1);
  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v13, (_QWORD *)v13, -1);
  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v13, (_QWORD *)v15, -1);
  v26 = *(_QWORD *)(a1[33] + 8);
  if (v9)
  {
    v27 = (llvm::MachineFunction *)v7[4];
    v155 = v154;
    if (v154)
      llvm::MetadataTracking::track((uint64_t)&v155, v154, 2);
    v28 = v26 + 35232;
    v29 = *((_QWORD *)v27 + 28);
    if (v29)
      *((_QWORD *)v27 + 28) = *(_QWORD *)v29;
    else
      v29 = sub_1C484358C((uint64_t)v27 + 128, 72, 3);
    *(_QWORD *)&v156 = v155;
    if (v155)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v155, v155, (uint64_t)&v156);
      v155 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v29, v27, v28, (unsigned __int8 **)&v156, 0);
    if ((_QWORD)v156)
      llvm::MetadataTracking::untrack((uint64_t)&v156, (unsigned __int8 *)v156);
    if (v155)
      llvm::MetadataTracking::untrack((uint64_t)&v155, v155);
    v31 = v7[5];
    *(_QWORD *)(v29 + 24) = v31;
    v32 = *(_QWORD *)(v31 + 32);
    v33 = *(unsigned int *)(v29 + 40);
    if ((_DWORD)v33)
    {
      v139 = *(_QWORD *)(v29 + 32);
      v140 = *(_QWORD *)(v32 + 40);
      v141 = 32 * v33;
      do
      {
        if (!*(_BYTE *)v139)
        {
          v142 = *(unsigned int *)(v139 + 4);
          if ((int)v142 >= 0)
            v143 = (uint64_t *)(*(_QWORD *)(v140 + 272) + 8 * v142);
          else
            v143 = (uint64_t *)(*(_QWORD *)(v140 + 24) + 16 * (v142 & 0x7FFFFFFF) + 8);
          v144 = *v143;
          if (*v143)
          {
            v145 = *(_QWORD *)(v144 + 16);
            *(_QWORD *)(v144 + 16) = v139;
            *(_QWORD *)(v139 + 16) = v145;
            if ((*(_BYTE *)(v139 + 3) & 1) != 0)
            {
              *(_QWORD *)(v139 + 24) = v144;
            }
            else
            {
              *(_QWORD *)(v139 + 24) = 0;
              v143 = (uint64_t *)(v145 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v139 + 16) = v139;
            *(_QWORD *)(v139 + 24) = 0;
          }
          *v143 = v139;
        }
        v139 += 32;
        v141 -= 32;
      }
      while (v141);
    }
    v34 = *(_QWORD *)(v32 + 728);
    if (v34)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v34 + 24))(v34, v29);
    v35 = *v23 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v29 = v35 | *(_QWORD *)v29 & 7;
    *(_QWORD *)(v29 + 8) = v23;
    *(_QWORD *)(v35 + 8) = v29;
    *v23 = *v23 & 7 | v29;
    *((_QWORD *)&v156 + 1) = 0;
    v157 = 0uLL;
    LODWORD(v156) = 0x1000000;
    DWORD1(v156) = v10;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v27, (const llvm::MachineOperand *)&v156);
    LODWORD(v156) = 1;
    *((_QWORD *)&v156 + 1) = 0;
    *(_QWORD *)&v157 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v27, (const llvm::MachineOperand *)&v156);
    *((_QWORD *)&v156 + 1) = 0;
    v157 = 0uLL;
    LODWORD(v156) = 0;
    DWORD1(v156) = v10;
  }
  else
  {
    v27 = (llvm::MachineFunction *)v7[4];
    v155 = v154;
    if (v154)
      llvm::MetadataTracking::track((uint64_t)&v155, v154, 2);
    v30 = v26 + 35424;
    v29 = *((_QWORD *)v27 + 28);
    if (v29)
      *((_QWORD *)v27 + 28) = *(_QWORD *)v29;
    else
      v29 = sub_1C484358C((uint64_t)v27 + 128, 72, 3);
    *(_QWORD *)&v156 = v155;
    if (v155)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v155, v155, (uint64_t)&v156);
      v155 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v29, v27, v30, (unsigned __int8 **)&v156, 0);
    if ((_QWORD)v156)
      llvm::MetadataTracking::untrack((uint64_t)&v156, (unsigned __int8 *)v156);
    if (v155)
      llvm::MetadataTracking::untrack((uint64_t)&v155, v155);
    v36 = v7[5];
    *(_QWORD *)(v29 + 24) = v36;
    v37 = *(_QWORD *)(v36 + 32);
    v38 = *(unsigned int *)(v29 + 40);
    if ((_DWORD)v38)
    {
      v146 = *(_QWORD *)(v29 + 32);
      v147 = *(_QWORD *)(v37 + 40);
      v148 = 32 * v38;
      do
      {
        if (!*(_BYTE *)v146)
        {
          v149 = *(unsigned int *)(v146 + 4);
          if ((int)v149 >= 0)
            v150 = (uint64_t *)(*(_QWORD *)(v147 + 272) + 8 * v149);
          else
            v150 = (uint64_t *)(*(_QWORD *)(v147 + 24) + 16 * (v149 & 0x7FFFFFFF) + 8);
          v151 = *v150;
          if (*v150)
          {
            v152 = *(_QWORD *)(v151 + 16);
            *(_QWORD *)(v151 + 16) = v146;
            *(_QWORD *)(v146 + 16) = v152;
            if ((*(_BYTE *)(v146 + 3) & 1) != 0)
            {
              *(_QWORD *)(v146 + 24) = v151;
            }
            else
            {
              *(_QWORD *)(v146 + 24) = 0;
              v150 = (uint64_t *)(v152 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v146 + 16) = v146;
            *(_QWORD *)(v146 + 24) = 0;
          }
          *v150 = v146;
        }
        v146 += 32;
        v148 -= 32;
      }
      while (v148);
    }
    v39 = *(_QWORD *)(v37 + 728);
    if (v39)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 24))(v39, v29);
    v40 = *v23 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v29 = v40 | *(_QWORD *)v29 & 7;
    *(_QWORD *)(v29 + 8) = v23;
    *(_QWORD *)(v40 + 8) = v29;
    *v23 = *v23 & 7 | v29;
    *((_QWORD *)&v156 + 1) = 0;
    v157 = 0uLL;
    LODWORD(v156) = 0x1000000;
    DWORD1(v156) = v10;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v27, (const llvm::MachineOperand *)&v156);
    LODWORD(v156) = 1;
    *((_QWORD *)&v156 + 1) = 0;
    *(_QWORD *)&v157 = 0;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v27, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v27, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v27, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v27, (const llvm::MachineOperand *)&v156);
  v156 = 0u;
  v157 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v27, (const llvm::MachineOperand *)&v156);
  v41 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
  v42 = (_QWORD *)a1[34];
  v43 = v42[1];
  v44 = v42[7];
  v45 = *(unsigned int *)(v43 + 24 * v41 + 4);
  if (*(_WORD *)(v44 + 2 * v45))
  {
    v46 = *(_WORD *)(v44 + 2 * v45) + v41;
    v47 = (_WORD *)(v42[11] + 2 * *(unsigned int *)(v43 + 24 * v41 + 12));
    v48 = (unsigned __int16 *)(v44 + 2 * v45 + 2);
    while (*v47 != 33)
    {
      v49 = *v48++;
      v46 += v49;
      ++v47;
      if (!v49)
        goto LABEL_66;
    }
    v50 = v46;
  }
  else
  {
LABEL_66:
    v50 = 0;
  }
  v51 = *(unint64_t **)(v13 + 56);
  v52 = *(_QWORD *)(a1[33] + 8);
  v53 = *(llvm::MachineFunction **)(v13 + 32);
  v155 = v154;
  if (v154)
    llvm::MetadataTracking::track((uint64_t)&v155, v154, 2);
  v54 = v52 + 66288;
  v55 = *((_QWORD *)v53 + 28);
  if (v55)
    *((_QWORD *)v53 + 28) = *(_QWORD *)v55;
  else
    v55 = sub_1C484358C((uint64_t)v53 + 128, 72, 3);
  *(_QWORD *)&v156 = v155;
  if (v155)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v155, v155, (uint64_t)&v156);
    v155 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v55, v53, v54, (unsigned __int8 **)&v156, 0);
  if ((_QWORD)v156)
    llvm::MetadataTracking::untrack((uint64_t)&v156, (unsigned __int8 *)v156);
  if (v155)
    llvm::MetadataTracking::untrack((uint64_t)&v155, v155);
  v56 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v55 + 24) = v56;
  v57 = *(_QWORD *)(v56 + 32);
  v58 = *(unsigned int *)(v55 + 40);
  if ((_DWORD)v58)
  {
    v100 = *(_QWORD *)(v55 + 32);
    v101 = *(_QWORD *)(v57 + 40);
    v102 = 32 * v58;
    do
    {
      if (!*(_BYTE *)v100)
      {
        v103 = *(unsigned int *)(v100 + 4);
        if ((int)v103 >= 0)
          v104 = (uint64_t *)(*(_QWORD *)(v101 + 272) + 8 * v103);
        else
          v104 = (uint64_t *)(*(_QWORD *)(v101 + 24) + 16 * (v103 & 0x7FFFFFFF) + 8);
        v105 = *v104;
        if (*v104)
        {
          v106 = *(_QWORD *)(v105 + 16);
          *(_QWORD *)(v105 + 16) = v100;
          *(_QWORD *)(v100 + 16) = v106;
          if ((*(_BYTE *)(v100 + 3) & 1) != 0)
          {
            *(_QWORD *)(v100 + 24) = v105;
          }
          else
          {
            *(_QWORD *)(v100 + 24) = 0;
            v104 = (uint64_t *)(v106 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v100 + 16) = v100;
          *(_QWORD *)(v100 + 24) = 0;
        }
        *v104 = v100;
      }
      v100 += 32;
      v102 -= 32;
    }
    while (v102);
  }
  v59 = *(_QWORD *)(v57 + 728);
  if (v59)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v59 + 24))(v59, v55);
  v60 = *v51 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v55 = v60 | *(_QWORD *)v55 & 7;
  *(_QWORD *)(v55 + 8) = v51;
  *(_QWORD *)(v60 + 8) = v55;
  *v51 = *v51 & 7 | v55;
  v157 = 0uLL;
  v156 = 0x10701000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v156);
  *((_QWORD *)&v156 + 1) = 0;
  v157 = 0uLL;
  LODWORD(v156) = 0;
  DWORD1(v156) = v50;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v156);
  *((_QWORD *)&v156 + 1) = 0;
  v157 = 0uLL;
  LODWORD(v156) = 0;
  DWORD1(v156) = v50;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v156);
  *((_QWORD *)&v156 + 1) = 0;
  v157 = 0uLL;
  LODWORD(v156) = 0;
  DWORD1(v156) = v50;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v156);
  v156 = 0u;
  v157 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v156);
  v156 = 0u;
  v157 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v156);
  v61 = *(_QWORD *)(a1[33] + 8);
  v62 = *(llvm::MachineFunction **)(v13 + 32);
  v155 = v154;
  if (v154)
    llvm::MetadataTracking::track((uint64_t)&v155, v154, 2);
  v63 = v61 + 239568;
  v64 = *((_QWORD *)v62 + 28);
  if (v64)
    *((_QWORD *)v62 + 28) = *(_QWORD *)v64;
  else
    v64 = sub_1C484358C((uint64_t)v62 + 128, 72, 3);
  *(_QWORD *)&v156 = v155;
  if (v155)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v155, v155, (uint64_t)&v156);
    v155 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v64, v62, v63, (unsigned __int8 **)&v156, 0);
  if ((_QWORD)v156)
    llvm::MetadataTracking::untrack((uint64_t)&v156, (unsigned __int8 *)v156);
  if (v155)
    llvm::MetadataTracking::untrack((uint64_t)&v155, v155);
  v65 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v64 + 24) = v65;
  v66 = *(_QWORD *)(v65 + 32);
  v67 = *(unsigned int *)(v64 + 40);
  if ((_DWORD)v67)
  {
    v107 = *(_QWORD *)(v64 + 32);
    v108 = *(_QWORD *)(v66 + 40);
    v109 = 32 * v67;
    do
    {
      if (!*(_BYTE *)v107)
      {
        v110 = *(unsigned int *)(v107 + 4);
        if ((int)v110 >= 0)
          v111 = (uint64_t *)(*(_QWORD *)(v108 + 272) + 8 * v110);
        else
          v111 = (uint64_t *)(*(_QWORD *)(v108 + 24) + 16 * (v110 & 0x7FFFFFFF) + 8);
        v112 = *v111;
        if (*v111)
        {
          v113 = *(_QWORD *)(v112 + 16);
          *(_QWORD *)(v112 + 16) = v107;
          *(_QWORD *)(v107 + 16) = v113;
          if ((*(_BYTE *)(v107 + 3) & 1) != 0)
          {
            *(_QWORD *)(v107 + 24) = v112;
          }
          else
          {
            *(_QWORD *)(v107 + 24) = 0;
            v111 = (uint64_t *)(v113 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v107 + 16) = v107;
          *(_QWORD *)(v107 + 24) = 0;
        }
        *v111 = v107;
      }
      v107 += 32;
      v109 -= 32;
    }
    while (v109);
  }
  v68 = *(_QWORD *)(v66 + 728);
  if (v68)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v68 + 24))(v68, v64);
  v69 = *v51 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v64 = v69 | *(_QWORD *)v64 & 7;
  *(_QWORD *)(v64 + 8) = v51;
  *(_QWORD *)(v69 + 8) = v64;
  *v51 = *v51 & 7 | v64;
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v62, (const llvm::MachineOperand *)&v156);
  v157 = 0uLL;
  v156 = 0x10700000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v62, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v62, (const llvm::MachineOperand *)&v156);
  *((_QWORD *)&v156 + 1) = 0;
  v157 = 0uLL;
  LODWORD(v156) = 0;
  DWORD1(v156) = v50;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v62, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v62, (const llvm::MachineOperand *)&v156);
  v157 = 0uLL;
  v156 = 0x201000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v62, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v62, (const llvm::MachineOperand *)&v156);
  v156 = 0u;
  v157 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v62, (const llvm::MachineOperand *)&v156);
  *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32) &= ~0x4000000u;
  v70 = 160;
  if (**(_WORD **)(a2 + 16) == 11580)
    v70 = 96;
  v71 = 192;
  if (**(_WORD **)(a2 + 16) == 11580)
    v71 = 128;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + v70 + 16) = 1;
  llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + v71, 2u);
  v72 = *(_QWORD *)(a1[33] + 8);
  v73 = *(llvm::MachineFunction **)(v13 + 32);
  v155 = v154;
  if (v154)
    llvm::MetadataTracking::track((uint64_t)&v155, v154, 2);
  v74 = v72 + 30624;
  v75 = *((_QWORD *)v73 + 28);
  if (v75)
    *((_QWORD *)v73 + 28) = *(_QWORD *)v75;
  else
    v75 = sub_1C484358C((uint64_t)v73 + 128, 72, 3);
  *(_QWORD *)&v156 = v155;
  if (v155)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v155, v155, (uint64_t)&v156);
    v155 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v75, v73, v74, (unsigned __int8 **)&v156, 0);
  if ((_QWORD)v156)
    llvm::MetadataTracking::untrack((uint64_t)&v156, (unsigned __int8 *)v156);
  if (v155)
    llvm::MetadataTracking::untrack((uint64_t)&v155, v155);
  v76 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v75 + 24) = v76;
  v77 = *(_QWORD *)(v76 + 32);
  v78 = *(unsigned int *)(v75 + 40);
  if ((_DWORD)v78)
  {
    v114 = *(_QWORD *)(v75 + 32);
    v115 = *(_QWORD *)(v77 + 40);
    v116 = 32 * v78;
    do
    {
      if (!*(_BYTE *)v114)
      {
        v117 = *(unsigned int *)(v114 + 4);
        if ((int)v117 >= 0)
          v118 = (uint64_t *)(*(_QWORD *)(v115 + 272) + 8 * v117);
        else
          v118 = (uint64_t *)(*(_QWORD *)(v115 + 24) + 16 * (v117 & 0x7FFFFFFF) + 8);
        v119 = *v118;
        if (*v118)
        {
          v120 = *(_QWORD *)(v119 + 16);
          *(_QWORD *)(v119 + 16) = v114;
          *(_QWORD *)(v114 + 16) = v120;
          if ((*(_BYTE *)(v114 + 3) & 1) != 0)
          {
            *(_QWORD *)(v114 + 24) = v119;
          }
          else
          {
            *(_QWORD *)(v114 + 24) = 0;
            v118 = (uint64_t *)(v120 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v114 + 16) = v114;
          *(_QWORD *)(v114 + 24) = 0;
        }
        *v118 = v114;
      }
      v114 += 32;
      v116 -= 32;
    }
    while (v116);
  }
  v79 = *(_QWORD *)(v77 + 728);
  if (v79)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v79 + 24))(v79, v75);
  v80 = *(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v75 = v80 | *(_QWORD *)v75 & 7;
  *(_QWORD *)(v75 + 8) = v153;
  *(_QWORD *)(v80 + 8) = v75;
  *(_QWORD *)(v13 + 48) = *(_QWORD *)(v13 + 48) & 7 | v75;
  *((_QWORD *)&v156 + 1) = 0;
  v157 = 0uLL;
  LODWORD(v156) = 0x1000000;
  DWORD1(v156) = v10;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v73, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v73, (const llvm::MachineOperand *)&v156);
  *((_QWORD *)&v156 + 1) = 0;
  v157 = 0uLL;
  LODWORD(v156) = 0;
  DWORD1(v156) = v10;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v73, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v73, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v73, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v73, (const llvm::MachineOperand *)&v156);
  v156 = 0u;
  v157 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v73, (const llvm::MachineOperand *)&v156);
  v81 = *(_QWORD *)(a1[33] + 8);
  v82 = *(llvm::MachineFunction **)(v13 + 32);
  v155 = v154;
  if (v154)
    llvm::MetadataTracking::track((uint64_t)&v155, v154, 2);
  v83 = v81 + 18960;
  v84 = *((_QWORD *)v82 + 28);
  if (v84)
    *((_QWORD *)v82 + 28) = *(_QWORD *)v84;
  else
    v84 = sub_1C484358C((uint64_t)v82 + 128, 72, 3);
  *(_QWORD *)&v156 = v155;
  if (v155)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v155, v155, (uint64_t)&v156);
    v155 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v84, v82, v83, (unsigned __int8 **)&v156, 0);
  if ((_QWORD)v156)
    llvm::MetadataTracking::untrack((uint64_t)&v156, (unsigned __int8 *)v156);
  if (v155)
    llvm::MetadataTracking::untrack((uint64_t)&v155, v155);
  v85 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v84 + 24) = v85;
  v86 = *(_QWORD *)(v85 + 32);
  v87 = *(unsigned int *)(v84 + 40);
  if ((_DWORD)v87)
  {
    v121 = *(_QWORD *)(v84 + 32);
    v122 = *(_QWORD *)(v86 + 40);
    v123 = 32 * v87;
    do
    {
      if (!*(_BYTE *)v121)
      {
        v124 = *(unsigned int *)(v121 + 4);
        if ((int)v124 >= 0)
          v125 = (uint64_t *)(*(_QWORD *)(v122 + 272) + 8 * v124);
        else
          v125 = (uint64_t *)(*(_QWORD *)(v122 + 24) + 16 * (v124 & 0x7FFFFFFF) + 8);
        v126 = *v125;
        if (*v125)
        {
          v127 = *(_QWORD *)(v126 + 16);
          *(_QWORD *)(v126 + 16) = v121;
          *(_QWORD *)(v121 + 16) = v127;
          if ((*(_BYTE *)(v121 + 3) & 1) != 0)
          {
            *(_QWORD *)(v121 + 24) = v126;
          }
          else
          {
            *(_QWORD *)(v121 + 24) = 0;
            v125 = (uint64_t *)(v127 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v121 + 16) = v121;
          *(_QWORD *)(v121 + 24) = 0;
        }
        *v125 = v121;
      }
      v121 += 32;
      v123 -= 32;
    }
    while (v123);
  }
  v88 = *(_QWORD *)(v86 + 728);
  if (v88)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v88 + 24))(v88, v84);
  v89 = *(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v84 = v89 | *(_QWORD *)v84 & 7;
  *(_QWORD *)(v84 + 8) = v153;
  *(_QWORD *)(v89 + 8) = v84;
  *(_QWORD *)(v13 + 48) = *(_QWORD *)(v13 + 48) & 7 | v84;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = v13;
  LODWORD(v156) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v84, v82, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v84, v82, (const llvm::MachineOperand *)&v156);
  v156 = 0u;
  v157 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v84, v82, (const llvm::MachineOperand *)&v156);
  v90 = *(unint64_t **)(v15 + 56);
  v91 = *(_QWORD *)(a1[33] + 8);
  v92 = *(llvm::MachineFunction **)(v15 + 32);
  v155 = v154;
  if (v154)
    llvm::MetadataTracking::track((uint64_t)&v155, v154, 2);
  v93 = v91 + 28320;
  v94 = *((_QWORD *)v92 + 28);
  if (v94)
    *((_QWORD *)v92 + 28) = *(_QWORD *)v94;
  else
    v94 = sub_1C484358C((uint64_t)v92 + 128, 72, 3);
  *(_QWORD *)&v156 = v155;
  if (v155)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v155, v155, (uint64_t)&v156);
    v155 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v94, v92, v93, (unsigned __int8 **)&v156, 0);
  if ((_QWORD)v156)
    llvm::MetadataTracking::untrack((uint64_t)&v156, (unsigned __int8 *)v156);
  if (v155)
    llvm::MetadataTracking::untrack((uint64_t)&v155, v155);
  v95 = *(_QWORD *)(v15 + 40);
  *(_QWORD *)(v94 + 24) = v95;
  v96 = *(_QWORD *)(v95 + 32);
  v97 = *(unsigned int *)(v94 + 40);
  if ((_DWORD)v97)
  {
    v128 = *(_QWORD *)(v94 + 32);
    v129 = *(_QWORD *)(v96 + 40);
    v130 = 32 * v97;
    do
    {
      if (!*(_BYTE *)v128)
      {
        v131 = *(unsigned int *)(v128 + 4);
        if ((int)v131 >= 0)
          v132 = (uint64_t *)(*(_QWORD *)(v129 + 272) + 8 * v131);
        else
          v132 = (uint64_t *)(*(_QWORD *)(v129 + 24) + 16 * (v131 & 0x7FFFFFFF) + 8);
        v133 = *v132;
        if (*v132)
        {
          v134 = *(_QWORD *)(v133 + 16);
          *(_QWORD *)(v133 + 16) = v128;
          *(_QWORD *)(v128 + 16) = v134;
          if ((*(_BYTE *)(v128 + 3) & 1) != 0)
          {
            *(_QWORD *)(v128 + 24) = v133;
          }
          else
          {
            *(_QWORD *)(v128 + 24) = 0;
            v132 = (uint64_t *)(v134 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v128 + 16) = v128;
          *(_QWORD *)(v128 + 24) = 0;
        }
        *v132 = v128;
      }
      v128 += 32;
      v130 -= 32;
    }
    while (v130);
  }
  v98 = *(_QWORD *)(v96 + 728);
  if (v98)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v98 + 24))(v98, v94);
  v99 = *v90 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v94 = v99 | *(_QWORD *)v94 & 7;
  *(_QWORD *)(v94 + 8) = v90;
  *(_QWORD *)(v99 + 8) = v94;
  *v90 = *v90 & 7 | v94;
  *((_QWORD *)&v156 + 1) = 0;
  v157 = 0uLL;
  LODWORD(v156) = 0x1000000;
  DWORD1(v156) = v10;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v156);
  *((_QWORD *)&v156 + 1) = 0;
  v157 = 0uLL;
  LODWORD(v156) = 0;
  DWORD1(v156) = v10;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v156);
  LODWORD(v156) = 1;
  *((_QWORD *)&v156 + 1) = 0;
  *(_QWORD *)&v157 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v156);
  v156 = 0u;
  v157 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v156);
  if (v154)
    llvm::MetadataTracking::untrack((uint64_t)&v154, v154);
}

void sub_1C477E01C(_QWORD *a1, uint64_t a2, uint64_t a3, llvm::SmallPtrSetImplBase *a4, _BYTE *a5, char a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t *v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  llvm::BasicBlock *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  BOOL v44;
  unint64_t *v45;
  unint64_t *v46;
  uint64_t v48;
  llvm::MachineFunction *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  llvm::MachineFunction *v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  llvm::MachineFunction *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  llvm::MachineFunction *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  llvm::MachineFunction *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  llvm::MachineFunction *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  llvm::MachineFunction *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  llvm::MachineFunction *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  llvm::MachineFunction *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  llvm::MachineFunction *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  _WORD *v148;
  unsigned __int16 *v149;
  int v150;
  int v151;
  _QWORD *v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  _WORD *v158;
  unsigned __int16 *v159;
  int v160;
  uint64_t v161;
  llvm::MachineFunction *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  _WORD *v177;
  unsigned __int16 *v178;
  int v179;
  _QWORD *v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  _WORD *v186;
  unsigned __int16 *v187;
  int v188;
  uint64_t v189;
  llvm::MachineFunction *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  _QWORD *v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  _WORD *v203;
  unsigned __int16 *v204;
  int v205;
  _QWORD *v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  _WORD *v212;
  unsigned __int16 *v213;
  int v214;
  uint64_t v215;
  llvm::MachineFunction *v216;
  uint64_t v217;
  unint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  llvm::MachineFunction *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  llvm::MachineFunction *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  llvm::MachineFunction *v244;
  unint64_t v245;
  unint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  _QWORD *v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  _WORD *v258;
  unsigned __int16 *v259;
  int v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  llvm::MachineFunction *v265;
  unint64_t v266;
  llvm::MachineFunction *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int *v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  _WORD *v284;
  unsigned __int16 *v285;
  int v286;
  _QWORD *v287;
  unsigned int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  _WORD *v293;
  unsigned __int16 *v294;
  int v295;
  unsigned int v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  llvm::MachineFunction *v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unsigned int v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  llvm::MachineFunction *v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  _QWORD *v327;
  unsigned int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  _WORD *v333;
  unsigned __int16 *v334;
  int v335;
  _QWORD *v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  _WORD *v342;
  unsigned __int16 *v343;
  int v344;
  unsigned int v345;
  unsigned int v346;
  uint64_t v347;
  llvm::MachineFunction *v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  unsigned int v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  llvm::MachineFunction *v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  llvm::MachineFunction *v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  int NumExplicitOperands;
  uint64_t v411;
  llvm::MachineFunction *v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  llvm::MachineFunction *v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  llvm::MachineFunction *v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  int v440;
  uint64_t v441;
  uint64_t v442;
  llvm::MachineFunction *v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  llvm::MachineFunction *v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  _QWORD *v458;
  unsigned int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  _WORD *v464;
  unsigned __int16 *v465;
  int v466;
  int v467;
  uint64_t v468;
  llvm::MachineFunction *v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  unint64_t *v476;
  uint64_t v477;
  llvm::MachineFunction *v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t *v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t *v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t *v637;
  uint64_t v638;
  uint64_t v639;
  unint64_t v640;
  unint64_t *v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t *v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t *v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t *v688;
  uint64_t v689;
  uint64_t v690;
  char v691;
  uint64_t *v693;
  unint64_t *v694;
  uint64_t v695;
  unint64_t *v696;
  uint64_t *v697;
  BOOL v698;
  _QWORD *v699;
  int v700;
  _QWORD *v701;
  unsigned int v702;
  int v703;
  uint64_t v704;
  unint64_t *v705;
  uint64_t v706;
  _QWORD *v707;
  _QWORD *v708;
  unsigned __int8 *v710;
  __int128 v711;
  __int128 v712;
  unsigned __int8 *v713[2];

  v12 = *(unsigned int *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = a2;
  ++*(_DWORD *)(a3 + 8);
  v13 = *(unint64_t **)(a2 + 24);
  v14 = (uint64_t *)v13[4];
  v702 = 2;
  if ((a6 & 1) == 0)
  {
    if (**(_WORD **)(a2 + 16) == 262)
      v15 = 3;
    else
      v15 = 2;
    v702 = v15;
  }
  if (*a5)
    v16 = v13 != (unint64_t *)v14[41];
  else
    v16 = 1;
  v698 = v16;
  v704 = *(_QWORD *)(a2 + 32);
  v700 = *(_DWORD *)(a1[32] + 8);
  *a5 = 0;
  v17 = *(unsigned __int8 **)(a2 + 56);
  v710 = v17;
  if (v17)
    llvm::MetadataTracking::track((uint64_t)&v710, v17, 2);
  v18 = (llvm::BasicBlock *)v13[2];
  v19 = v14[39];
  if (v19)
    v14[39] = *(_QWORD *)v19;
  else
    v19 = sub_1C484358C((uint64_t)(v14 + 16), 232, 3);
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = v18;
  *(_DWORD *)(v19 + 24) = -1;
  *(_QWORD *)(v19 + 48) = (v19 + 48) | 4;
  *(_QWORD *)(v19 + 56) = v19 + 48;
  *(_BYTE *)(v19 + 144) = 0;
  *(_OWORD *)(v19 + 64) = 0u;
  *(_OWORD *)(v19 + 80) = 0u;
  *(_OWORD *)(v19 + 96) = 0u;
  *(_OWORD *)(v19 + 112) = 0u;
  *(_OWORD *)(v19 + 121) = 0u;
  *(_QWORD *)(v19 + 160) = 0;
  *(_QWORD *)(v19 + 168) = 0;
  *(_QWORD *)(v19 + 152) = 0;
  *(_BYTE *)(v19 + 176) = 0;
  *(_DWORD *)(v19 + 187) = 0;
  *(_QWORD *)(v19 + 180) = 0;
  *(_QWORD *)(v19 + 192) = 0;
  *(_DWORD *)(v19 + 199) = 0;
  *(_QWORD *)(v19 + 216) = 0;
  *(_QWORD *)(v19 + 224) = 0;
  *(_QWORD *)(v19 + 208) = 0;
  *(_QWORD *)(v19 + 32) = v14;
  *(_QWORD *)(v19 + 40) = v19;
  if (v18)
  {
    *(_QWORD *)(v19 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v18);
    *(_QWORD *)(v19 + 144) = v20;
  }
  v21 = v14[39];
  if (v21)
    v14[39] = *(_QWORD *)v21;
  else
    v21 = sub_1C484358C((uint64_t)(v14 + 16), 232, 3);
  v695 = a2;
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = v18;
  *(_DWORD *)(v21 + 24) = -1;
  *(_QWORD *)(v21 + 48) = (v21 + 48) | 4;
  *(_QWORD *)(v21 + 56) = v21 + 48;
  v705 = (unint64_t *)(v21 + 48);
  *(_BYTE *)(v21 + 144) = 0;
  *(_OWORD *)(v21 + 64) = 0u;
  *(_OWORD *)(v21 + 80) = 0u;
  *(_OWORD *)(v21 + 96) = 0u;
  *(_OWORD *)(v21 + 112) = 0u;
  *(_OWORD *)(v21 + 121) = 0u;
  *(_QWORD *)(v21 + 160) = 0;
  *(_QWORD *)(v21 + 168) = 0;
  *(_QWORD *)(v21 + 152) = 0;
  *(_BYTE *)(v21 + 176) = 0;
  *(_DWORD *)(v21 + 187) = 0;
  *(_QWORD *)(v21 + 180) = 0;
  *(_QWORD *)(v21 + 192) = 0;
  *(_DWORD *)(v21 + 199) = 0;
  *(_QWORD *)(v21 + 216) = 0;
  *(_QWORD *)(v21 + 224) = 0;
  *(_QWORD *)(v21 + 208) = 0;
  *(_QWORD *)(v21 + 32) = v14;
  *(_QWORD *)(v21 + 40) = v21;
  if (v18)
  {
    *(_QWORD *)(v21 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v18);
    *(_QWORD *)(v21 + 144) = v22;
  }
  v23 = v14[39];
  if (v23)
    v14[39] = *(_QWORD *)v23;
  else
    v23 = sub_1C484358C((uint64_t)(v14 + 16), 232, 3);
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = v18;
  *(_DWORD *)(v23 + 24) = -1;
  *(_QWORD *)(v23 + 48) = (v23 + 48) | 4;
  *(_QWORD *)(v23 + 56) = v23 + 48;
  v707 = (_QWORD *)(v23 + 48);
  *(_BYTE *)(v23 + 144) = 0;
  *(_OWORD *)(v23 + 64) = 0u;
  *(_OWORD *)(v23 + 80) = 0u;
  *(_OWORD *)(v23 + 96) = 0u;
  *(_OWORD *)(v23 + 112) = 0u;
  *(_OWORD *)(v23 + 121) = 0u;
  *(_QWORD *)(v23 + 160) = 0;
  *(_QWORD *)(v23 + 168) = 0;
  *(_QWORD *)(v23 + 152) = 0;
  *(_BYTE *)(v23 + 176) = 0;
  *(_DWORD *)(v23 + 187) = 0;
  *(_QWORD *)(v23 + 180) = 0;
  *(_QWORD *)(v23 + 192) = 0;
  *(_DWORD *)(v23 + 199) = 0;
  *(_QWORD *)(v23 + 216) = 0;
  *(_QWORD *)(v23 + 224) = 0;
  *(_QWORD *)(v23 + 208) = 0;
  *(_QWORD *)(v23 + 32) = v14;
  *(_QWORD *)(v23 + 40) = v23;
  if (v18)
  {
    *(_QWORD *)(v23 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v18);
    *(_QWORD *)(v23 + 144) = v24;
  }
  v708 = (_QWORD *)v23;
  v25 = v14[39];
  if (v25)
    v14[39] = *(_QWORD *)v25;
  else
    v25 = sub_1C484358C((uint64_t)(v14 + 16), 232, 3);
  v691 = a6;
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = v18;
  *(_DWORD *)(v25 + 24) = -1;
  *(_QWORD *)(v25 + 48) = (v25 + 48) | 4;
  *(_QWORD *)(v25 + 56) = v25 + 48;
  v694 = (unint64_t *)(v25 + 48);
  *(_BYTE *)(v25 + 144) = 0;
  *(_OWORD *)(v25 + 64) = 0u;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_OWORD *)(v25 + 96) = 0u;
  *(_OWORD *)(v25 + 112) = 0u;
  *(_OWORD *)(v25 + 121) = 0u;
  *(_QWORD *)(v25 + 160) = 0;
  *(_QWORD *)(v25 + 168) = 0;
  *(_QWORD *)(v25 + 152) = 0;
  *(_BYTE *)(v25 + 176) = 0;
  *(_DWORD *)(v25 + 187) = 0;
  *(_QWORD *)(v25 + 180) = 0;
  *(_QWORD *)(v25 + 192) = 0;
  *(_DWORD *)(v25 + 199) = 0;
  *(_QWORD *)(v25 + 216) = 0;
  *(_QWORD *)(v25 + 224) = 0;
  *(_QWORD *)(v25 + 208) = 0;
  *(_QWORD *)(v25 + 32) = v14;
  *(_QWORD *)(v25 + 40) = v25;
  if (v18)
  {
    *(_QWORD *)(v25 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v18);
    *(_QWORD *)(v25 + 144) = v26;
  }
  v27 = v14[39];
  if (v27)
    v14[39] = *(_QWORD *)v27;
  else
    v27 = sub_1C484358C((uint64_t)(v14 + 16), 232, 3);
  v696 = (unint64_t *)(v19 + 48);
  v701 = (_QWORD *)v25;
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 16) = v18;
  *(_DWORD *)(v27 + 24) = -1;
  *(_QWORD *)(v27 + 48) = (v27 + 48) | 4;
  *(_QWORD *)(v27 + 56) = v27 + 48;
  *(_BYTE *)(v27 + 144) = 0;
  *(_OWORD *)(v27 + 64) = 0u;
  *(_OWORD *)(v27 + 80) = 0u;
  *(_OWORD *)(v27 + 96) = 0u;
  *(_OWORD *)(v27 + 112) = 0u;
  *(_OWORD *)(v27 + 121) = 0u;
  *(_QWORD *)(v27 + 160) = 0;
  *(_QWORD *)(v27 + 168) = 0;
  *(_QWORD *)(v27 + 152) = 0;
  *(_BYTE *)(v27 + 176) = 0;
  *(_DWORD *)(v27 + 187) = 0;
  *(_QWORD *)(v27 + 180) = 0;
  *(_QWORD *)(v27 + 192) = 0;
  *(_DWORD *)(v27 + 199) = 0;
  *(_QWORD *)(v27 + 216) = 0;
  *(_QWORD *)(v27 + 224) = 0;
  *(_QWORD *)(v27 + 208) = 0;
  *(_QWORD *)(v27 + 32) = v14;
  *(_QWORD *)(v27 + 40) = v27;
  if (v18)
  {
    *(_QWORD *)(v27 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v18);
    *(_QWORD *)(v27 + 144) = v28;
  }
  v29 = v14[39];
  if (v29)
    v14[39] = *(_QWORD *)v29;
  else
    v29 = sub_1C484358C((uint64_t)(v14 + 16), 232, 3);
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = v18;
  *(_DWORD *)(v29 + 24) = -1;
  *(_QWORD *)(v29 + 48) = (v29 + 48) | 4;
  *(_QWORD *)(v29 + 56) = v29 + 48;
  *(_BYTE *)(v29 + 144) = 0;
  *(_OWORD *)(v29 + 64) = 0u;
  *(_OWORD *)(v29 + 80) = 0u;
  *(_OWORD *)(v29 + 96) = 0u;
  *(_OWORD *)(v29 + 112) = 0u;
  *(_OWORD *)(v29 + 121) = 0u;
  *(_QWORD *)(v29 + 160) = 0;
  *(_QWORD *)(v29 + 168) = 0;
  *(_QWORD *)(v29 + 152) = 0;
  *(_BYTE *)(v29 + 176) = 0;
  *(_DWORD *)(v29 + 187) = 0;
  *(_QWORD *)(v29 + 180) = 0;
  *(_QWORD *)(v29 + 192) = 0;
  *(_DWORD *)(v29 + 199) = 0;
  *(_QWORD *)(v29 + 216) = 0;
  *(_QWORD *)(v29 + 224) = 0;
  *(_QWORD *)(v29 + 208) = 0;
  *(_QWORD *)(v29 + 32) = v14;
  *(_QWORD *)(v29 + 40) = v29;
  if (v18)
  {
    *(_QWORD *)(v29 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v18);
    *(_QWORD *)(v29 + 144) = v30;
  }
  v31 = v14[39];
  if (v31)
    v14[39] = *(_QWORD *)v31;
  else
    v31 = sub_1C484358C((uint64_t)(v14 + 16), 232, 3);
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = v18;
  *(_DWORD *)(v31 + 24) = -1;
  *(_QWORD *)(v31 + 48) = (v31 + 48) | 4;
  *(_QWORD *)(v31 + 56) = v31 + 48;
  *(_BYTE *)(v31 + 144) = 0;
  *(_OWORD *)(v31 + 64) = 0u;
  *(_OWORD *)(v31 + 80) = 0u;
  *(_OWORD *)(v31 + 96) = 0u;
  *(_OWORD *)(v31 + 112) = 0u;
  *(_OWORD *)(v31 + 121) = 0u;
  *(_QWORD *)(v31 + 160) = 0;
  *(_QWORD *)(v31 + 168) = 0;
  *(_QWORD *)(v31 + 152) = 0;
  *(_BYTE *)(v31 + 176) = 0;
  *(_DWORD *)(v31 + 187) = 0;
  *(_QWORD *)(v31 + 180) = 0;
  *(_QWORD *)(v31 + 192) = 0;
  *(_DWORD *)(v31 + 199) = 0;
  *(_QWORD *)(v31 + 216) = 0;
  *(_QWORD *)(v31 + 224) = 0;
  *(_QWORD *)(v31 + 208) = 0;
  v693 = v14;
  *(_QWORD *)(v31 + 32) = v14;
  *(_QWORD *)(v31 + 40) = v31;
  if (v18)
  {
    *(_QWORD *)(v31 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v18);
    *(_QWORD *)(v31 + 144) = v32;
  }
  sub_1C4774094(a4, v19);
  sub_1C4774094(a4, v21);
  sub_1C4774094(a4, (uint64_t)v708);
  sub_1C4774094(a4, v25);
  sub_1C4774094(a4, v27);
  sub_1C4774094(a4, v31);
  v703 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v13[4] + 8) + 16))(*(_QWORD *)(v13[4] + 8), *v14)+ 280);
  v33 = (unint64_t *)v13[1];
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v14 + 40), v19);
  v34 = *v33;
  *(_QWORD *)v19 = *v33;
  *(_QWORD *)(v19 + 8) = v33;
  *(_QWORD *)(v34 + 8) = v19;
  *v33 = v19;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v14 + 40), v21);
  v35 = *v33;
  *(_QWORD *)v21 = *v33;
  *(_QWORD *)(v21 + 8) = v33;
  *(_QWORD *)(v35 + 8) = v21;
  *v33 = v21;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v14 + 40), (uint64_t)v708);
  v36 = *v33;
  *v708 = *v33;
  v708[1] = v33;
  *(_QWORD *)(v36 + 8) = v708;
  *v33 = (unint64_t)v708;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v14 + 40), (uint64_t)v701);
  v37 = *v33;
  *v701 = *v33;
  v701[1] = v33;
  *(_QWORD *)(v37 + 8) = v701;
  *v33 = (unint64_t)v701;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v14 + 40), v31);
  v38 = *v33;
  *(_QWORD *)v31 = *v33;
  *(_QWORD *)(v31 + 8) = v33;
  *(_QWORD *)(v38 + 8) = v31;
  *v33 = v31;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v14 + 40), v27);
  v39 = *v33;
  *(_QWORD *)v27 = *v33;
  *(_QWORD *)(v27 + 8) = v33;
  *(_QWORD *)(v39 + 8) = v27;
  *v33 = v27;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v14 + 40), v29);
  v40 = *v33;
  *(_QWORD *)v29 = *v33;
  *(_QWORD *)(v29 + 8) = v33;
  *(_QWORD *)(v40 + 8) = v29;
  *v33 = v29;
  v41 = *(unint64_t **)(v29 + 56);
  v42 = v695;
  if (!v695)
  {
    v43 = v708;
    v44 = v698;
LABEL_46:
    while ((*(_WORD *)(v42 + 44) & 8) != 0)
      v42 = *(_QWORD *)(v42 + 8);
    goto LABEL_47;
  }
  v43 = v708;
  v44 = v698;
  if ((*(_BYTE *)v695 & 4) == 0)
    goto LABEL_46;
LABEL_47:
  v45 = *(unint64_t **)(v42 + 8);
  v46 = v13 + 6;
  if (v45 != v13 + 6 && v41 != v46)
  {
    if ((unint64_t *)v29 != v13)
    {
      v640 = *(_QWORD *)(v29 + 40);
      v641 = v45;
      do
      {
        v641[3] = v640;
        v641 = (unint64_t *)v641[1];
      }
      while (v641 != v46);
    }
    sub_1C4785D30(v41, v45, v13 + 6);
  }
  llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v29, (llvm::MachineBasicBlock *)v13);
  llvm::MachineBasicBlock::addSuccessor(v13, (_QWORD *)v19, -1);
  llvm::MachineBasicBlock::addSuccessor(v13, (_QWORD *)v29, -1);
  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v19, (_QWORD *)v21, -1);
  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v21, (_QWORD *)v21, -1);
  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v21, v43, -1);
  llvm::MachineBasicBlock::addSuccessor(v43, (_QWORD *)v27, -1);
  llvm::MachineBasicBlock::addSuccessor(v43, v701, -1);
  llvm::MachineBasicBlock::addSuccessor(v701, v701, -1);
  llvm::MachineBasicBlock::addSuccessor(v701, (_QWORD *)v31, -1);
  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v31, (_QWORD *)v29, -1);
  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v27, (_QWORD *)v29, -1);
  if (!v44)
  {
    v48 = *(_QWORD *)(a1[33] + 8);
    v49 = (llvm::MachineFunction *)v13[4];
    v713[0] = v710;
    if (v710)
      llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
    v50 = *((_QWORD *)v49 + 28);
    if (v50)
      *((_QWORD *)v49 + 28) = *(_QWORD *)v50;
    else
      v50 = sub_1C484358C((uint64_t)v49 + 128, 72, 3);
    *(unsigned __int8 **)&v711 = v713[0];
    if (v713[0])
    {
      llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
      v713[0] = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v50, v49, v48 + 48720, (unsigned __int8 **)&v711, 0);
    if ((_QWORD)v711)
      llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
    if (v713[0])
      llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
    v51 = v13[5];
    *(_QWORD *)(v50 + 24) = v51;
    v52 = *(_QWORD *)(v51 + 32);
    v53 = *(unsigned int *)(v50 + 40);
    if ((_DWORD)v53)
    {
      v656 = *(_QWORD *)(v50 + 32);
      v657 = *(_QWORD *)(v52 + 40);
      v658 = 32 * v53;
      do
      {
        if (!*(_BYTE *)v656)
        {
          v659 = *(unsigned int *)(v656 + 4);
          if ((int)v659 >= 0)
            v660 = (uint64_t *)(*(_QWORD *)(v657 + 272) + 8 * v659);
          else
            v660 = (uint64_t *)(*(_QWORD *)(v657 + 24) + 16 * (v659 & 0x7FFFFFFF) + 8);
          v661 = *v660;
          if (*v660)
          {
            v662 = *(_QWORD *)(v661 + 16);
            *(_QWORD *)(v661 + 16) = v656;
            *(_QWORD *)(v656 + 16) = v662;
            if ((*(_BYTE *)(v656 + 3) & 1) != 0)
            {
              *(_QWORD *)(v656 + 24) = v661;
            }
            else
            {
              *(_QWORD *)(v656 + 24) = 0;
              v660 = (uint64_t *)(v662 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v656 + 16) = v656;
            *(_QWORD *)(v656 + 24) = 0;
          }
          *v660 = v656;
        }
        v656 += 32;
        v658 -= 32;
      }
      while (v658);
    }
    v54 = *(_QWORD *)(v52 + 728);
    if (v54)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v54 + 24))(v54, v50);
    v55 = *v46 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v50 = v55 | *(_QWORD *)v50 & 7;
    *(_QWORD *)(v50 + 8) = v46;
    *(_QWORD *)(v55 + 8) = v50;
    *v46 = *v46 & 7 | v50;
    *((_QWORD *)&v711 + 1) = 0;
    v712 = 0uLL;
    LODWORD(v711) = 0x1000000;
    DWORD1(v711) = v700;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v49, (const llvm::MachineOperand *)&v711);
    LODWORD(v711) = 1;
    *((_QWORD *)&v711 + 1) = 0;
    *(_QWORD *)&v712 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v49, (const llvm::MachineOperand *)&v711);
    LODWORD(v711) = 1;
    *((_QWORD *)&v711 + 1) = 0;
    *(_QWORD *)&v712 = 0x100000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v49, (const llvm::MachineOperand *)&v711);
    LODWORD(v711) = 1;
    *((_QWORD *)&v711 + 1) = 0;
    *(_QWORD *)&v712 = 0x100000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v49, (const llvm::MachineOperand *)&v711);
    LODWORD(v711) = 1;
    *((_QWORD *)&v711 + 1) = 0;
    *(_QWORD *)&v712 = 0x100000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v49, (const llvm::MachineOperand *)&v711);
    LODWORD(v711) = 1;
    *((_QWORD *)&v711 + 1) = 0;
    *(_QWORD *)&v712 = 0x100000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v49, (const llvm::MachineOperand *)&v711);
    v711 = 0u;
    v712 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v49, (const llvm::MachineOperand *)&v711);
    LODWORD(v711) = 1;
    *((_QWORD *)&v711 + 1) = 0;
    *(_QWORD *)&v712 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v49, (const llvm::MachineOperand *)&v711);
    v711 = 0u;
    v712 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v49, (const llvm::MachineOperand *)&v711);
  }
  v699 = (_QWORD *)v27;
  v56 = *(_QWORD *)(a1[33] + 8);
  if (v703)
    v57 = 19776;
  else
    v57 = 19872;
  v58 = *(_DWORD *)(v704 + 36);
  v59 = (llvm::MachineFunction *)v13[4];
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v60 = v56 + v57;
  v61 = *((_QWORD *)v59 + 28);
  if (v61)
    *((_QWORD *)v59 + 28) = *(_QWORD *)v61;
  else
    v61 = sub_1C484358C((uint64_t)v59 + 128, 72, 3);
  v62 = v699;
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v61, v59, v60, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v63 = v13[5];
  *(_QWORD *)(v61 + 24) = v63;
  v64 = *(_QWORD *)(v63 + 32);
  v65 = *(unsigned int *)(v61 + 40);
  if ((_DWORD)v65)
  {
    v486 = *(_QWORD *)(v61 + 32);
    v487 = *(_QWORD *)(v64 + 40);
    v488 = 32 * v65;
    do
    {
      if (!*(_BYTE *)v486)
      {
        v489 = *(unsigned int *)(v486 + 4);
        if ((int)v489 >= 0)
          v490 = (uint64_t *)(*(_QWORD *)(v487 + 272) + 8 * v489);
        else
          v490 = (uint64_t *)(*(_QWORD *)(v487 + 24) + 16 * (v489 & 0x7FFFFFFF) + 8);
        v491 = *v490;
        if (*v490)
        {
          v492 = *(_QWORD *)(v491 + 16);
          *(_QWORD *)(v491 + 16) = v486;
          *(_QWORD *)(v486 + 16) = v492;
          if ((*(_BYTE *)(v486 + 3) & 1) != 0)
          {
            *(_QWORD *)(v486 + 24) = v491;
          }
          else
          {
            *(_QWORD *)(v486 + 24) = 0;
            v490 = (uint64_t *)(v492 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v486 + 16) = v486;
          *(_QWORD *)(v486 + 24) = 0;
        }
        *v490 = v486;
      }
      v486 += 32;
      v488 -= 32;
    }
    while (v488);
  }
  v66 = *(_QWORD *)(v64 + 728);
  if (v66)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v66 + 24))(v66, v61);
  v67 = v13[6] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v61 = v67 | *(_QWORD *)v61 & 7;
  *(_QWORD *)(v61 + 8) = v46;
  *(_QWORD *)(v67 + 8) = v61;
  v13[6] = v13[6] & 7 | v61;
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0x1000000;
  DWORD1(v711) = v58;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v59, (const llvm::MachineOperand *)&v711);
  v68 = *(_QWORD *)(v704 + 32 * (v702 + 1) + 16);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = v68;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v59, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v59, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v59, (const llvm::MachineOperand *)&v711);
  v711 = 0u;
  v712 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v61, v59, (const llvm::MachineOperand *)&v711);
  v69 = *(_QWORD *)(a1[33] + 8);
  v70 = (llvm::MachineFunction *)v13[4];
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v71 = *((_QWORD *)v70 + 28);
  if (v71)
    *((_QWORD *)v70 + 28) = *(_QWORD *)v71;
  else
    v71 = sub_1C484358C((uint64_t)v70 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v71, v70, v69 + 644640, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v72 = v13[5];
  *(_QWORD *)(v71 + 24) = v72;
  v73 = *(_QWORD *)(v72 + 32);
  v74 = *(unsigned int *)(v71 + 40);
  if ((_DWORD)v74)
  {
    v493 = *(_QWORD *)(v71 + 32);
    v494 = *(_QWORD *)(v73 + 40);
    v495 = 32 * v74;
    do
    {
      if (!*(_BYTE *)v493)
      {
        v496 = *(unsigned int *)(v493 + 4);
        if ((int)v496 >= 0)
          v497 = (uint64_t *)(*(_QWORD *)(v494 + 272) + 8 * v496);
        else
          v497 = (uint64_t *)(*(_QWORD *)(v494 + 24) + 16 * (v496 & 0x7FFFFFFF) + 8);
        v498 = *v497;
        if (*v497)
        {
          v499 = *(_QWORD *)(v498 + 16);
          *(_QWORD *)(v498 + 16) = v493;
          *(_QWORD *)(v493 + 16) = v499;
          if ((*(_BYTE *)(v493 + 3) & 1) != 0)
          {
            *(_QWORD *)(v493 + 24) = v498;
          }
          else
          {
            *(_QWORD *)(v493 + 24) = 0;
            v497 = (uint64_t *)(v499 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v493 + 16) = v493;
          *(_QWORD *)(v493 + 24) = 0;
        }
        *v497 = v493;
      }
      v493 += 32;
      v495 -= 32;
    }
    while (v495);
  }
  v75 = *(_QWORD *)(v73 + 728);
  if (v75)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v75 + 24))(v75, v71);
  v76 = v13[6] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v71 = v76 | *(_QWORD *)v71 & 7;
  *(_QWORD *)(v71 + 8) = v46;
  *(_QWORD *)(v76 + 8) = v71;
  v13[6] = v13[6] & 7 | v71;
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v70, (const llvm::MachineOperand *)&v711);
  v77 = *(_QWORD *)(a1[33] + 8);
  v78 = (llvm::MachineFunction *)v13[4];
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v79 = *((_QWORD *)v78 + 28);
  if (v79)
    *((_QWORD *)v78 + 28) = *(_QWORD *)v79;
  else
    v79 = sub_1C484358C((uint64_t)v78 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v79, v78, v77 + 239856, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v80 = v13[5];
  *(_QWORD *)(v79 + 24) = v80;
  v81 = *(_QWORD *)(v80 + 32);
  v82 = *(unsigned int *)(v79 + 40);
  if ((_DWORD)v82)
  {
    v500 = *(_QWORD *)(v79 + 32);
    v501 = *(_QWORD *)(v81 + 40);
    v502 = 32 * v82;
    do
    {
      if (!*(_BYTE *)v500)
      {
        v503 = *(unsigned int *)(v500 + 4);
        if ((int)v503 >= 0)
          v504 = (uint64_t *)(*(_QWORD *)(v501 + 272) + 8 * v503);
        else
          v504 = (uint64_t *)(*(_QWORD *)(v501 + 24) + 16 * (v503 & 0x7FFFFFFF) + 8);
        v505 = *v504;
        if (*v504)
        {
          v506 = *(_QWORD *)(v505 + 16);
          *(_QWORD *)(v505 + 16) = v500;
          *(_QWORD *)(v500 + 16) = v506;
          if ((*(_BYTE *)(v500 + 3) & 1) != 0)
          {
            *(_QWORD *)(v500 + 24) = v505;
          }
          else
          {
            *(_QWORD *)(v500 + 24) = 0;
            v504 = (uint64_t *)(v506 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v500 + 16) = v500;
          *(_QWORD *)(v500 + 24) = 0;
        }
        *v504 = v500;
      }
      v500 += 32;
      v502 -= 32;
    }
    while (v502);
  }
  v83 = *(_QWORD *)(v81 + 728);
  if (v83)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v83 + 24))(v83, v79);
  v84 = v13[6] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v79 = v84 | *(_QWORD *)v79 & 7;
  *(_QWORD *)(v79 + 8) = v46;
  *(_QWORD *)(v84 + 8) = v79;
  v13[6] = v13[6] & 7 | v79;
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v79, v78, (const llvm::MachineOperand *)&v711);
  v85 = *(_DWORD *)(v704 + 36);
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0;
  DWORD1(v711) = v85;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v79, v78, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v79, v78, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v79, v78, (const llvm::MachineOperand *)&v711);
  v712 = 0uLL;
  v711 = 0x201000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v79, v78, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v79, v78, (const llvm::MachineOperand *)&v711);
  v711 = 0u;
  v712 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v79, v78, (const llvm::MachineOperand *)&v711);
  v86 = *(_QWORD *)(a1[33] + 8);
  v87 = (llvm::MachineFunction *)v13[4];
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v88 = *((_QWORD *)v87 + 28);
  if (v88)
    *((_QWORD *)v87 + 28) = *(_QWORD *)v88;
  else
    v88 = sub_1C484358C((uint64_t)v87 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v88, v87, v86 + 18960, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v89 = v13[5];
  *(_QWORD *)(v88 + 24) = v89;
  v90 = *(_QWORD *)(v89 + 32);
  v91 = *(unsigned int *)(v88 + 40);
  if ((_DWORD)v91)
  {
    v507 = *(_QWORD *)(v88 + 32);
    v508 = *(_QWORD *)(v90 + 40);
    v509 = 32 * v91;
    do
    {
      if (!*(_BYTE *)v507)
      {
        v510 = *(unsigned int *)(v507 + 4);
        if ((int)v510 >= 0)
          v511 = (uint64_t *)(*(_QWORD *)(v508 + 272) + 8 * v510);
        else
          v511 = (uint64_t *)(*(_QWORD *)(v508 + 24) + 16 * (v510 & 0x7FFFFFFF) + 8);
        v512 = *v511;
        if (*v511)
        {
          v513 = *(_QWORD *)(v512 + 16);
          *(_QWORD *)(v512 + 16) = v507;
          *(_QWORD *)(v507 + 16) = v513;
          if ((*(_BYTE *)(v507 + 3) & 1) != 0)
          {
            *(_QWORD *)(v507 + 24) = v512;
          }
          else
          {
            *(_QWORD *)(v507 + 24) = 0;
            v511 = (uint64_t *)(v513 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v507 + 16) = v507;
          *(_QWORD *)(v507 + 24) = 0;
        }
        *v511 = v507;
      }
      v507 += 32;
      v509 -= 32;
    }
    while (v509);
  }
  v92 = *(_QWORD *)(v90 + 728);
  if (v92)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v92 + 24))(v92, v88);
  v93 = *v46 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v88 = v93 | *(_QWORD *)v88 & 7;
  *(_QWORD *)(v88 + 8) = v46;
  *(_QWORD *)(v93 + 8) = v88;
  *v46 = *v46 & 7 | v88;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = v29;
  LODWORD(v711) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v87, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v87, (const llvm::MachineOperand *)&v711);
  v712 = 0uLL;
  v711 = 0x200000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v87, (const llvm::MachineOperand *)&v711);
  v94 = *(_QWORD *)(a1[33] + 8);
  v95 = *(llvm::MachineFunction **)(v19 + 32);
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v96 = *((_QWORD *)v95 + 28);
  if (v96)
    *((_QWORD *)v95 + 28) = *(_QWORD *)v96;
  else
    v96 = sub_1C484358C((uint64_t)v95 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v96, v95, v94 + 239664, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v97 = *(_QWORD *)(v19 + 40);
  *(_QWORD *)(v96 + 24) = v97;
  v98 = *(_QWORD *)(v97 + 32);
  v99 = *(unsigned int *)(v96 + 40);
  if ((_DWORD)v99)
  {
    v514 = *(_QWORD *)(v96 + 32);
    v515 = *(_QWORD *)(v98 + 40);
    v516 = 32 * v99;
    do
    {
      if (!*(_BYTE *)v514)
      {
        v517 = *(unsigned int *)(v514 + 4);
        if ((int)v517 >= 0)
          v518 = (uint64_t *)(*(_QWORD *)(v515 + 272) + 8 * v517);
        else
          v518 = (uint64_t *)(*(_QWORD *)(v515 + 24) + 16 * (v517 & 0x7FFFFFFF) + 8);
        v519 = *v518;
        if (*v518)
        {
          v520 = *(_QWORD *)(v519 + 16);
          *(_QWORD *)(v519 + 16) = v514;
          *(_QWORD *)(v514 + 16) = v520;
          if ((*(_BYTE *)(v514 + 3) & 1) != 0)
          {
            *(_QWORD *)(v514 + 24) = v519;
          }
          else
          {
            *(_QWORD *)(v514 + 24) = 0;
            v518 = (uint64_t *)(v520 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v514 + 16) = v514;
          *(_QWORD *)(v514 + 24) = 0;
        }
        *v518 = v514;
      }
      v514 += 32;
      v516 -= 32;
    }
    while (v516);
  }
  v100 = *(_QWORD *)(v98 + 728);
  if (v100)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v100 + 24))(v100, v96);
  v101 = *(_QWORD *)(v19 + 48) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v96 = v101 | *(_QWORD *)v96 & 7;
  *(_QWORD *)(v96 + 8) = v696;
  *(_QWORD *)(v101 + 8) = v96;
  *(_QWORD *)(v19 + 48) = *(_QWORD *)(v19 + 48) & 7 | v96;
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v711);
  v712 = 0uLL;
  v711 = 0x11300000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v711);
  v712 = 0uLL;
  v711 = 0x201000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v711);
  v711 = 0u;
  v712 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v95, (const llvm::MachineOperand *)&v711);
  v102 = *(_QWORD *)(a1[33] + 8);
  v103 = *(llvm::MachineFunction **)(v19 + 32);
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v104 = *((_QWORD *)v103 + 28);
  if (v104)
    *((_QWORD *)v103 + 28) = *(_QWORD *)v104;
  else
    v104 = sub_1C484358C((uint64_t)v103 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v104, v103, v102 + 34464, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v105 = *(_QWORD *)(v19 + 40);
  *(_QWORD *)(v104 + 24) = v105;
  v106 = *(_QWORD *)(v105 + 32);
  v107 = *(unsigned int *)(v104 + 40);
  if ((_DWORD)v107)
  {
    v521 = *(_QWORD *)(v104 + 32);
    v522 = *(_QWORD *)(v106 + 40);
    v523 = 32 * v107;
    do
    {
      if (!*(_BYTE *)v521)
      {
        v524 = *(unsigned int *)(v521 + 4);
        if ((int)v524 >= 0)
          v525 = (uint64_t *)(*(_QWORD *)(v522 + 272) + 8 * v524);
        else
          v525 = (uint64_t *)(*(_QWORD *)(v522 + 24) + 16 * (v524 & 0x7FFFFFFF) + 8);
        v526 = *v525;
        if (*v525)
        {
          v527 = *(_QWORD *)(v526 + 16);
          *(_QWORD *)(v526 + 16) = v521;
          *(_QWORD *)(v521 + 16) = v527;
          if ((*(_BYTE *)(v521 + 3) & 1) != 0)
          {
            *(_QWORD *)(v521 + 24) = v526;
          }
          else
          {
            *(_QWORD *)(v521 + 24) = 0;
            v525 = (uint64_t *)(v527 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v521 + 16) = v521;
          *(_QWORD *)(v521 + 24) = 0;
        }
        *v525 = v521;
      }
      v521 += 32;
      v523 -= 32;
    }
    while (v523);
  }
  v108 = *(_QWORD *)(v106 + 728);
  if (v108)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v108 + 24))(v108, v104);
  v109 = *v696 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v104 = v109 | *(_QWORD *)v104 & 7;
  *(_QWORD *)(v104 + 8) = v696;
  *(_QWORD *)(v109 + 8) = v104;
  *v696 = *v696 & 7 | v104;
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0x1000000;
  DWORD1(v711) = v700;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v104, v103, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v104, v103, (const llvm::MachineOperand *)&v711);
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0;
  DWORD1(v711) = v700;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v104, v103, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v104, v103, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v104, v103, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v104, v103, (const llvm::MachineOperand *)&v711);
  v711 = 0u;
  v712 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v104, v103, (const llvm::MachineOperand *)&v711);
  v110 = *(_QWORD *)(a1[33] + 8);
  if (v703)
    v111 = 569712;
  else
    v111 = 569808;
  v112 = *(llvm::MachineFunction **)(v21 + 32);
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v113 = v110 + v111;
  v114 = *((_QWORD *)v112 + 28);
  if (v114)
    *((_QWORD *)v112 + 28) = *(_QWORD *)v114;
  else
    v114 = sub_1C484358C((uint64_t)v112 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v114, v112, v113, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v115 = *(_QWORD *)(v21 + 40);
  *(_QWORD *)(v114 + 24) = v115;
  v116 = *(_QWORD *)(v115 + 32);
  v117 = *(unsigned int *)(v114 + 40);
  if ((_DWORD)v117)
  {
    v528 = *(_QWORD *)(v114 + 32);
    v529 = *(_QWORD *)(v116 + 40);
    v530 = 32 * v117;
    do
    {
      if (!*(_BYTE *)v528)
      {
        v531 = *(unsigned int *)(v528 + 4);
        if ((int)v531 >= 0)
          v532 = (uint64_t *)(*(_QWORD *)(v529 + 272) + 8 * v531);
        else
          v532 = (uint64_t *)(*(_QWORD *)(v529 + 24) + 16 * (v531 & 0x7FFFFFFF) + 8);
        v533 = *v532;
        if (*v532)
        {
          v534 = *(_QWORD *)(v533 + 16);
          *(_QWORD *)(v533 + 16) = v528;
          *(_QWORD *)(v528 + 16) = v534;
          if ((*(_BYTE *)(v528 + 3) & 1) != 0)
          {
            *(_QWORD *)(v528 + 24) = v533;
          }
          else
          {
            *(_QWORD *)(v528 + 24) = 0;
            v532 = (uint64_t *)(v534 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v528 + 16) = v528;
          *(_QWORD *)(v528 + 24) = 0;
        }
        *v532 = v528;
      }
      v528 += 32;
      v530 -= 32;
    }
    while (v530);
  }
  v118 = *(_QWORD *)(v116 + 728);
  if (v118)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v118 + 24))(v118, v114);
  v119 = *(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v114 = v119 | *(_QWORD *)v114 & 7;
  *(_QWORD *)(v114 + 8) = v705;
  *(_QWORD *)(v119 + 8) = v114;
  *(_QWORD *)(v21 + 48) = *(_QWORD *)(v21 + 48) & 7 | v114;
  v120 = *(_DWORD *)(v704 + 4);
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0x1000000;
  DWORD1(v711) = v120;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v114, v112, (const llvm::MachineOperand *)&v711);
  v121 = v704 + 32 * v702;
  v122 = *(_QWORD *)(v121 + 16);
  v697 = (uint64_t *)(v121 + 16);
  v123 = v703 == 0;
  if (v703)
    v124 = 11950;
  else
    v124 = 11952;
  if (v703)
    v125 = 2781;
  else
    v125 = 2898;
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = v122 >> v123;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v114, v112, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v114, v112, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v114, v112, (const llvm::MachineOperand *)&v711);
  v711 = 0u;
  v712 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v114, v112, (const llvm::MachineOperand *)&v711);
  v126 = *(_QWORD *)(a1[33] + 8);
  v127 = *(llvm::MachineFunction **)(v21 + 32);
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v128 = *((_QWORD *)v127 + 28);
  if (v128)
    *((_QWORD *)v127 + 28) = *(_QWORD *)v128;
  else
    v128 = sub_1C484358C((uint64_t)v127 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v128, v127, v126 + 644640, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v129 = *(_QWORD *)(v21 + 40);
  *(_QWORD *)(v128 + 24) = v129;
  v130 = *(_QWORD *)(v129 + 32);
  v131 = *(unsigned int *)(v128 + 40);
  if ((_DWORD)v131)
  {
    v535 = *(_QWORD *)(v128 + 32);
    v536 = *(_QWORD *)(v130 + 40);
    v537 = 32 * v131;
    do
    {
      if (!*(_BYTE *)v535)
      {
        v538 = *(unsigned int *)(v535 + 4);
        if ((int)v538 >= 0)
          v539 = (uint64_t *)(*(_QWORD *)(v536 + 272) + 8 * v538);
        else
          v539 = (uint64_t *)(*(_QWORD *)(v536 + 24) + 16 * (v538 & 0x7FFFFFFF) + 8);
        v540 = *v539;
        if (*v539)
        {
          v541 = *(_QWORD *)(v540 + 16);
          *(_QWORD *)(v540 + 16) = v535;
          *(_QWORD *)(v535 + 16) = v541;
          if ((*(_BYTE *)(v535 + 3) & 1) != 0)
          {
            *(_QWORD *)(v535 + 24) = v540;
          }
          else
          {
            *(_QWORD *)(v535 + 24) = 0;
            v539 = (uint64_t *)(v541 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v535 + 16) = v535;
          *(_QWORD *)(v535 + 24) = 0;
        }
        *v539 = v535;
      }
      v535 += 32;
      v537 -= 32;
    }
    while (v537);
  }
  v132 = *(_QWORD *)(v130 + 728);
  if (v132)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v132 + 24))(v132, v128);
  v133 = *(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v128 = v133 | *(_QWORD *)v128 & 7;
  *(_QWORD *)(v128 + 8) = v705;
  *(_QWORD *)(v133 + 8) = v128;
  *(_QWORD *)(v21 + 48) = *(_QWORD *)(v21 + 48) & 7 | v128;
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v128, v127, (const llvm::MachineOperand *)&v711);
  v134 = *(_QWORD *)(a1[33] + 8);
  v135 = *(llvm::MachineFunction **)(v21 + 32);
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v136 = *((_QWORD *)v135 + 28);
  if (v136)
    *((_QWORD *)v135 + 28) = *(_QWORD *)v136;
  else
    v136 = sub_1C484358C((uint64_t)v135 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v136, v135, v134 + 236208, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v137 = *(_QWORD *)(v21 + 40);
  *(_QWORD *)(v136 + 24) = v137;
  v138 = *(_QWORD *)(v137 + 32);
  v139 = *(unsigned int *)(v136 + 40);
  if ((_DWORD)v139)
  {
    v542 = *(_QWORD *)(v136 + 32);
    v543 = *(_QWORD *)(v138 + 40);
    v544 = 32 * v139;
    do
    {
      if (!*(_BYTE *)v542)
      {
        v545 = *(unsigned int *)(v542 + 4);
        if ((int)v545 >= 0)
          v546 = (uint64_t *)(*(_QWORD *)(v543 + 272) + 8 * v545);
        else
          v546 = (uint64_t *)(*(_QWORD *)(v543 + 24) + 16 * (v545 & 0x7FFFFFFF) + 8);
        v547 = *v546;
        if (*v546)
        {
          v548 = *(_QWORD *)(v547 + 16);
          *(_QWORD *)(v547 + 16) = v542;
          *(_QWORD *)(v542 + 16) = v548;
          if ((*(_BYTE *)(v542 + 3) & 1) != 0)
          {
            *(_QWORD *)(v542 + 24) = v547;
          }
          else
          {
            *(_QWORD *)(v542 + 24) = 0;
            v546 = (uint64_t *)(v548 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v542 + 16) = v542;
          *(_QWORD *)(v542 + 24) = 0;
        }
        *v546 = v542;
      }
      v542 += 32;
      v544 -= 32;
    }
    while (v544);
  }
  v140 = *(_QWORD *)(v138 + 728);
  if (v140)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v140 + 24))(v140, v136);
  v141 = *v705 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v136 = v141 | *(_QWORD *)v136 & 7;
  *(_QWORD *)(v136 + 8) = v705;
  *(_QWORD *)(v141 + 8) = v136;
  *v705 = *v705 & 7 | v136;
  v142 = (_QWORD *)a1[34];
  v143 = *(_DWORD *)(v704 + 4);
  v144 = v142[1];
  v145 = v142[7];
  v146 = *(unsigned int *)(v144 + 24 * v143 + 4);
  v147 = *(unsigned __int16 *)(v145 + 2 * v146);
  if (*(_WORD *)(v145 + 2 * v146))
  {
    LOWORD(v147) = v147 + v143;
    v148 = (_WORD *)(v142[11] + 2 * *(unsigned int *)(v144 + 24 * v143 + 12));
    v149 = (unsigned __int16 *)(v145 + 2 * v146 + 2);
    while (*v148 != 1)
    {
      v150 = *v149++;
      LOWORD(v147) = v150 + v147;
      ++v148;
      if (!v150)
      {
        v147 = 0;
        goto LABEL_213;
      }
    }
    v147 = (unsigned __int16)v147;
  }
LABEL_213:
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0x1000000;
  DWORD1(v711) = v147;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v135, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v135, (const llvm::MachineOperand *)&v711);
  v151 = *(_DWORD *)(v704 + 36);
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0;
  DWORD1(v711) = v151;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v135, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v135, (const llvm::MachineOperand *)&v711);
  v152 = (_QWORD *)a1[34];
  v153 = *(_DWORD *)(v704 + 4);
  v154 = v152[1];
  v155 = v152[7];
  v156 = *(unsigned int *)(v154 + 24 * v153 + 4);
  v157 = *(unsigned __int16 *)(v155 + 2 * v156);
  if (*(_WORD *)(v155 + 2 * v156))
  {
    LOWORD(v157) = v157 + v153;
    v158 = (_WORD *)(v152[11] + 2 * *(unsigned int *)(v154 + 24 * v153 + 12));
    v159 = (unsigned __int16 *)(v155 + 2 * v156 + 2);
    while (*v158 != 1)
    {
      v160 = *v159++;
      LOWORD(v157) = v160 + v157;
      ++v158;
      if (!v160)
      {
        v157 = 0;
        goto LABEL_219;
      }
    }
    v157 = (unsigned __int16)v157;
  }
LABEL_219:
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0x4000000;
  DWORD1(v711) = v157;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v135, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v135, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0x10000FFFFLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v135, (const llvm::MachineOperand *)&v711);
  v712 = 0uLL;
  v711 = 0x201000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v135, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v135, (const llvm::MachineOperand *)&v711);
  v711 = 0u;
  v712 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v135, (const llvm::MachineOperand *)&v711);
  v161 = *(_QWORD *)(a1[33] + 8);
  v162 = *(llvm::MachineFunction **)(v21 + 32);
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v163 = v161 + 48 * v125;
  v164 = *((_QWORD *)v162 + 28);
  if (v164)
    *((_QWORD *)v162 + 28) = *(_QWORD *)v164;
  else
    v164 = sub_1C484358C((uint64_t)v162 + 128, 72, 3);
  v165 = v704;
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v164, v162, v163, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v166 = *(_QWORD *)(v21 + 40);
  *(_QWORD *)(v164 + 24) = v166;
  v167 = *(_QWORD *)(v166 + 32);
  v168 = *(unsigned int *)(v164 + 40);
  if ((_DWORD)v168)
  {
    v549 = *(_QWORD *)(v164 + 32);
    v550 = *(_QWORD *)(v167 + 40);
    v551 = 32 * v168;
    do
    {
      if (!*(_BYTE *)v549)
      {
        v552 = *(unsigned int *)(v549 + 4);
        if ((int)v552 >= 0)
          v553 = (uint64_t *)(*(_QWORD *)(v550 + 272) + 8 * v552);
        else
          v553 = (uint64_t *)(*(_QWORD *)(v550 + 24) + 16 * (v552 & 0x7FFFFFFF) + 8);
        v554 = *v553;
        if (*v553)
        {
          v555 = *(_QWORD *)(v554 + 16);
          *(_QWORD *)(v554 + 16) = v549;
          *(_QWORD *)(v549 + 16) = v555;
          if ((*(_BYTE *)(v549 + 3) & 1) != 0)
          {
            *(_QWORD *)(v549 + 24) = v554;
          }
          else
          {
            *(_QWORD *)(v549 + 24) = 0;
            v553 = (uint64_t *)(v555 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v549 + 16) = v549;
          *(_QWORD *)(v549 + 24) = 0;
        }
        *v553 = v549;
      }
      v549 += 32;
      v551 -= 32;
    }
    while (v551);
  }
  v169 = *(_QWORD *)(v167 + 728);
  if (v169)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v169 + 24))(v169, v164);
  v170 = *v705 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v164 = v170 | *(_QWORD *)v164 & 7;
  *(_QWORD *)(v164 + 8) = v705;
  *(_QWORD *)(v170 + 8) = v164;
  *v705 = *v705 & 7 | v164;
  v171 = (_QWORD *)a1[34];
  v172 = *(_DWORD *)(v704 + 4);
  v173 = v171[1];
  v174 = v171[7];
  v175 = *(unsigned int *)(v173 + 24 * v172 + 4);
  v176 = *(unsigned __int16 *)(v174 + 2 * v175);
  if (*(_WORD *)(v174 + 2 * v175))
  {
    LOWORD(v176) = v176 + v172;
    v177 = (_WORD *)(v171[11] + 2 * *(unsigned int *)(v173 + 24 * v172 + 12));
    v178 = (unsigned __int16 *)(v174 + 2 * v175 + 2);
    while (*v177 != 1)
    {
      v179 = *v178++;
      LOWORD(v176) = v179 + v176;
      ++v177;
      if (!v179)
      {
        v176 = 0;
        goto LABEL_239;
      }
    }
    v176 = (unsigned __int16)v176;
  }
LABEL_239:
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0x1000000;
  DWORD1(v711) = v176;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v164, v162, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v164, v162, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v164, v162, (const llvm::MachineOperand *)&v711);
  v180 = (_QWORD *)a1[34];
  v181 = *(_DWORD *)(v704 + 4);
  v182 = v180[1];
  v183 = v180[7];
  v184 = *(unsigned int *)(v182 + 24 * v181 + 4);
  v185 = *(unsigned __int16 *)(v183 + 2 * v184);
  if (*(_WORD *)(v183 + 2 * v184))
  {
    LOWORD(v185) = v185 + v181;
    v186 = (_WORD *)(v180[11] + 2 * *(unsigned int *)(v182 + 24 * v181 + 12));
    v187 = (unsigned __int16 *)(v183 + 2 * v184 + 2);
    while (*v186 != 1)
    {
      v188 = *v187++;
      LOWORD(v185) = v188 + v185;
      ++v186;
      if (!v188)
      {
        v185 = 0;
        goto LABEL_245;
      }
    }
    v185 = (unsigned __int16)v185;
  }
LABEL_245:
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0x4000000;
  DWORD1(v711) = v185;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v164, v162, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v164, v162, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v164, v162, (const llvm::MachineOperand *)&v711);
  v711 = 0u;
  v712 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v164, v162, (const llvm::MachineOperand *)&v711);
  v189 = *(_QWORD *)(a1[33] + 8);
  v190 = *(llvm::MachineFunction **)(v21 + 32);
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v191 = *((_QWORD *)v190 + 28);
  if (v191)
    *((_QWORD *)v190 + 28) = *(_QWORD *)v191;
  else
    v191 = sub_1C484358C((uint64_t)v190 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v191, v190, v189 + 227184, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v192 = *(_QWORD *)(v21 + 40);
  *(_QWORD *)(v191 + 24) = v192;
  v193 = *(_QWORD *)(v192 + 32);
  v194 = *(unsigned int *)(v191 + 40);
  if ((_DWORD)v194)
  {
    v556 = *(_QWORD *)(v191 + 32);
    v557 = *(_QWORD *)(v193 + 40);
    v558 = 32 * v194;
    do
    {
      if (!*(_BYTE *)v556)
      {
        v559 = *(unsigned int *)(v556 + 4);
        if ((int)v559 >= 0)
          v560 = (uint64_t *)(*(_QWORD *)(v557 + 272) + 8 * v559);
        else
          v560 = (uint64_t *)(*(_QWORD *)(v557 + 24) + 16 * (v559 & 0x7FFFFFFF) + 8);
        v561 = *v560;
        if (*v560)
        {
          v562 = *(_QWORD *)(v561 + 16);
          *(_QWORD *)(v561 + 16) = v556;
          *(_QWORD *)(v556 + 16) = v562;
          if ((*(_BYTE *)(v556 + 3) & 1) != 0)
          {
            *(_QWORD *)(v556 + 24) = v561;
          }
          else
          {
            *(_QWORD *)(v556 + 24) = 0;
            v560 = (uint64_t *)(v562 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v556 + 16) = v556;
          *(_QWORD *)(v556 + 24) = 0;
        }
        *v560 = v556;
      }
      v556 += 32;
      v558 -= 32;
    }
    while (v558);
  }
  v195 = *(_QWORD *)(v193 + 728);
  if (v195)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v195 + 24))(v195, v191);
  v196 = *v705 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v191 = v196 | *(_QWORD *)v191 & 7;
  *(_QWORD *)(v191 + 8) = v705;
  *(_QWORD *)(v196 + 8) = v191;
  *v705 = *v705 & 7 | v191;
  v197 = (_QWORD *)a1[34];
  v198 = *(_DWORD *)(v704 + 4);
  v199 = v197[1];
  v200 = v197[7];
  v201 = *(unsigned int *)(v199 + 24 * v198 + 4);
  v202 = *(unsigned __int16 *)(v200 + 2 * v201);
  if (*(_WORD *)(v200 + 2 * v201))
  {
    LOWORD(v202) = v202 + v198;
    v203 = (_WORD *)(v197[11] + 2 * *(unsigned int *)(v199 + 24 * v198 + 12));
    v204 = (unsigned __int16 *)(v200 + 2 * v201 + 2);
    while (*v203 != 2)
    {
      v205 = *v204++;
      LOWORD(v202) = v205 + v202;
      ++v203;
      if (!v205)
      {
        v202 = 0;
        goto LABEL_265;
      }
    }
    v202 = (unsigned __int16)v202;
  }
LABEL_265:
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0x1000000;
  DWORD1(v711) = v202;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v190, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v190, (const llvm::MachineOperand *)&v711);
  v206 = (_QWORD *)a1[34];
  v207 = *(_DWORD *)(v704 + 4);
  v208 = v206[1];
  v209 = v206[7];
  v210 = *(unsigned int *)(v208 + 24 * v207 + 4);
  v211 = *(unsigned __int16 *)(v209 + 2 * v210);
  if (*(_WORD *)(v209 + 2 * v210))
  {
    LOWORD(v211) = v211 + v207;
    v212 = (_WORD *)(v206[11] + 2 * *(unsigned int *)(v208 + 24 * v207 + 12));
    v213 = (unsigned __int16 *)(v209 + 2 * v210 + 2);
    while (*v212 != 2)
    {
      v214 = *v213++;
      LOWORD(v211) = v214 + v211;
      ++v212;
      if (!v214)
      {
        v211 = 0;
        goto LABEL_271;
      }
    }
    v211 = (unsigned __int16)v211;
  }
LABEL_271:
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0x4000000;
  DWORD1(v711) = v211;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v190, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v190, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v190, (const llvm::MachineOperand *)&v711);
  v712 = 0uLL;
  v711 = 0x200000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v190, (const llvm::MachineOperand *)&v711);
  v215 = *(_QWORD *)(a1[33] + 8);
  v216 = *(llvm::MachineFunction **)(v21 + 32);
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v217 = v215 + 48 * v124;
  v218 = *((_QWORD *)v216 + 28);
  if (v218)
    *((_QWORD *)v216 + 28) = *(_QWORD *)v218;
  else
    v218 = sub_1C484358C((uint64_t)v216 + 128, 72, 3);
  v219 = v701;
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v218, v216, v217, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v220 = *(_QWORD *)(v21 + 40);
  *(_QWORD *)(v218 + 24) = v220;
  v221 = *(_QWORD *)(v220 + 32);
  v222 = *(unsigned int *)(v218 + 40);
  if ((_DWORD)v222)
  {
    v563 = *(_QWORD *)(v218 + 32);
    v564 = *(_QWORD *)(v221 + 40);
    v565 = 32 * v222;
    do
    {
      if (!*(_BYTE *)v563)
      {
        v566 = *(unsigned int *)(v563 + 4);
        if ((int)v566 >= 0)
          v567 = (uint64_t *)(*(_QWORD *)(v564 + 272) + 8 * v566);
        else
          v567 = (uint64_t *)(*(_QWORD *)(v564 + 24) + 16 * (v566 & 0x7FFFFFFF) + 8);
        v568 = *v567;
        if (*v567)
        {
          v569 = *(_QWORD *)(v568 + 16);
          *(_QWORD *)(v568 + 16) = v563;
          *(_QWORD *)(v563 + 16) = v569;
          if ((*(_BYTE *)(v563 + 3) & 1) != 0)
          {
            *(_QWORD *)(v563 + 24) = v568;
          }
          else
          {
            *(_QWORD *)(v563 + 24) = 0;
            v567 = (uint64_t *)(v569 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v563 + 16) = v563;
          *(_QWORD *)(v563 + 24) = 0;
        }
        *v567 = v563;
      }
      v563 += 32;
      v565 -= 32;
    }
    while (v565);
  }
  v223 = *(_QWORD *)(v221 + 728);
  if (v223)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v223 + 24))(v223, v218);
  v224 = *v705 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v218 = v224 | *(_QWORD *)v218 & 7;
  *(_QWORD *)(v218 + 8) = v705;
  *(_QWORD *)(v224 + 8) = v218;
  *v705 = *v705 & 7 | v218;
  v225 = *(_DWORD *)(v704 + 4);
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0;
  DWORD1(v711) = v225;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v218, v216, (const llvm::MachineOperand *)&v711);
  v226 = *v697 >> v123;
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = v226;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v218, v216, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v218, v216, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v218, v216, (const llvm::MachineOperand *)&v711);
  v711 = 0u;
  v712 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v218, v216, (const llvm::MachineOperand *)&v711);
  if (v703)
  {
    v227 = *(_QWORD *)(a1[33] + 8);
    v228 = *(llvm::MachineFunction **)(v21 + 32);
    v713[0] = v710;
    if (v710)
      llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
    v229 = *((_QWORD *)v228 + 28);
    if (v229)
      *((_QWORD *)v228 + 28) = *(_QWORD *)v229;
    else
      v229 = sub_1C484358C((uint64_t)v228 + 128, 72, 3);
    *(unsigned __int8 **)&v711 = v713[0];
    if (v713[0])
    {
      llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
      v713[0] = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v229, v228, v227 + 644640, (unsigned __int8 **)&v711, 0);
    if ((_QWORD)v711)
      llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
    if (v713[0])
      llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
    v230 = *(_QWORD *)(v21 + 40);
    *(_QWORD *)(v229 + 24) = v230;
    v231 = *(_QWORD *)(v230 + 32);
    v232 = *(unsigned int *)(v229 + 40);
    if ((_DWORD)v232)
    {
      v642 = *(_QWORD *)(v229 + 32);
      v643 = *(_QWORD *)(v231 + 40);
      v644 = 32 * v232;
      do
      {
        if (!*(_BYTE *)v642)
        {
          v645 = *(unsigned int *)(v642 + 4);
          if ((int)v645 >= 0)
            v646 = (uint64_t *)(*(_QWORD *)(v643 + 272) + 8 * v645);
          else
            v646 = (uint64_t *)(*(_QWORD *)(v643 + 24) + 16 * (v645 & 0x7FFFFFFF) + 8);
          v647 = *v646;
          if (*v646)
          {
            v648 = *(_QWORD *)(v647 + 16);
            *(_QWORD *)(v647 + 16) = v642;
            *(_QWORD *)(v642 + 16) = v648;
            if ((*(_BYTE *)(v642 + 3) & 1) != 0)
            {
              *(_QWORD *)(v642 + 24) = v647;
            }
            else
            {
              *(_QWORD *)(v642 + 24) = 0;
              v646 = (uint64_t *)(v648 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v642 + 16) = v642;
            *(_QWORD *)(v642 + 24) = 0;
          }
          *v646 = v642;
        }
        v642 += 32;
        v644 -= 32;
      }
      while (v644);
    }
    v233 = *(_QWORD *)(v231 + 728);
    if (v233)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v233 + 24))(v233, v229);
    v234 = *v705 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v229 = v234 | *(_QWORD *)v229 & 7;
    *(_QWORD *)(v229 + 8) = v705;
    *(_QWORD *)(v234 + 8) = v229;
    *v705 = *v705 & 7 | v229;
    LODWORD(v711) = 1;
    *((_QWORD *)&v711 + 1) = 0;
    *(_QWORD *)&v712 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v229, v228, (const llvm::MachineOperand *)&v711);
  }
  v235 = *(_QWORD *)(a1[33] + 8);
  v236 = *(llvm::MachineFunction **)(v21 + 32);
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v237 = *((_QWORD *)v236 + 28);
  if (v237)
    *((_QWORD *)v236 + 28) = *(_QWORD *)v237;
  else
    v237 = sub_1C484358C((uint64_t)v236 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v237, v236, v235 + 18960, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v238 = *(_QWORD *)(v21 + 40);
  *(_QWORD *)(v237 + 24) = v238;
  v239 = *(_QWORD *)(v238 + 32);
  v240 = *(unsigned int *)(v237 + 40);
  if ((_DWORD)v240)
  {
    v570 = *(_QWORD *)(v237 + 32);
    v571 = *(_QWORD *)(v239 + 40);
    v572 = 32 * v240;
    do
    {
      if (!*(_BYTE *)v570)
      {
        v573 = *(unsigned int *)(v570 + 4);
        if ((int)v573 >= 0)
          v574 = (uint64_t *)(*(_QWORD *)(v571 + 272) + 8 * v573);
        else
          v574 = (uint64_t *)(*(_QWORD *)(v571 + 24) + 16 * (v573 & 0x7FFFFFFF) + 8);
        v575 = *v574;
        if (*v574)
        {
          v576 = *(_QWORD *)(v575 + 16);
          *(_QWORD *)(v575 + 16) = v570;
          *(_QWORD *)(v570 + 16) = v576;
          if ((*(_BYTE *)(v570 + 3) & 1) != 0)
          {
            *(_QWORD *)(v570 + 24) = v575;
          }
          else
          {
            *(_QWORD *)(v570 + 24) = 0;
            v574 = (uint64_t *)(v576 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v570 + 16) = v570;
          *(_QWORD *)(v570 + 24) = 0;
        }
        *v574 = v570;
      }
      v570 += 32;
      v572 -= 32;
    }
    while (v572);
  }
  v241 = *(_QWORD *)(v239 + 728);
  if (v241)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v241 + 24))(v241, v237);
  v242 = *(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v237 = v242 | *(_QWORD *)v237 & 7;
  *(_QWORD *)(v237 + 8) = v705;
  *(_QWORD *)(v242 + 8) = v237;
  *(_QWORD *)(v21 + 48) = *(_QWORD *)(v21 + 48) & 7 | v237;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = v21;
  LODWORD(v711) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v237, v236, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v237, v236, (const llvm::MachineOperand *)&v711);
  v712 = 0uLL;
  v711 = 0x200000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v237, v236, (const llvm::MachineOperand *)&v711);
  v243 = *(_QWORD *)(a1[33] + 8);
  v244 = (llvm::MachineFunction *)v708[4];
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v245 = *((_QWORD *)v244 + 28);
  v246 = v694;
  if (v245)
    *((_QWORD *)v244 + 28) = *(_QWORD *)v245;
  else
    v245 = sub_1C484358C((uint64_t)v244 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v245, v244, v243 + 239856, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v247 = v708[5];
  *(_QWORD *)(v245 + 24) = v247;
  v248 = *(_QWORD *)(v247 + 32);
  v249 = *(unsigned int *)(v245 + 40);
  if ((_DWORD)v249)
  {
    v577 = *(_QWORD *)(v245 + 32);
    v578 = *(_QWORD *)(v248 + 40);
    v579 = 32 * v249;
    do
    {
      if (!*(_BYTE *)v577)
      {
        v580 = *(unsigned int *)(v577 + 4);
        if ((int)v580 >= 0)
          v581 = (uint64_t *)(*(_QWORD *)(v578 + 272) + 8 * v580);
        else
          v581 = (uint64_t *)(*(_QWORD *)(v578 + 24) + 16 * (v580 & 0x7FFFFFFF) + 8);
        v582 = *v581;
        if (*v581)
        {
          v583 = *(_QWORD *)(v582 + 16);
          *(_QWORD *)(v582 + 16) = v577;
          *(_QWORD *)(v577 + 16) = v583;
          if ((*(_BYTE *)(v577 + 3) & 1) != 0)
          {
            *(_QWORD *)(v577 + 24) = v582;
          }
          else
          {
            *(_QWORD *)(v577 + 24) = 0;
            v581 = (uint64_t *)(v583 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v577 + 16) = v577;
          *(_QWORD *)(v577 + 24) = 0;
        }
        *v581 = v577;
      }
      v577 += 32;
      v579 -= 32;
    }
    while (v579);
  }
  v250 = *(_QWORD *)(v248 + 728);
  if (v250)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v250 + 24))(v250, v245);
  v251 = *v707 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v245 = v251 | *(_QWORD *)v245 & 7;
  *(_QWORD *)(v245 + 8) = v707;
  *(_QWORD *)(v251 + 8) = v245;
  *v707 = *v707 & 7 | v245;
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v245, v244, (const llvm::MachineOperand *)&v711);
  v252 = (_QWORD *)a1[34];
  v253 = *(_DWORD *)(v704 + 4);
  v254 = v252[1];
  v255 = v252[7];
  v256 = *(unsigned int *)(v254 + 24 * v253 + 4);
  v257 = *(unsigned __int16 *)(v255 + 2 * v256);
  if (*(_WORD *)(v255 + 2 * v256))
  {
    LOWORD(v257) = v257 + v253;
    v258 = (_WORD *)(v252[11] + 2 * *(unsigned int *)(v254 + 24 * v253 + 12));
    v259 = (unsigned __int16 *)(v255 + 2 * v256 + 2);
    while (*v258 != 1)
    {
      v260 = *v259++;
      LOWORD(v257) = v260 + v257;
      ++v258;
      if (!v260)
      {
        v257 = 0;
        goto LABEL_335;
      }
    }
    v257 = (unsigned __int16)v257;
  }
LABEL_335:
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0x4000000;
  DWORD1(v711) = v257;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v245, v244, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v245, v244, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v245, v244, (const llvm::MachineOperand *)&v711);
  v712 = 0uLL;
  v711 = 0x201000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v245, v244, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v245, v244, (const llvm::MachineOperand *)&v711);
  v711 = 0u;
  v712 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v245, v244, (const llvm::MachineOperand *)&v711);
  v261 = v708;
  if ((v691 & 1) == 0)
  {
    v262 = v702 + 3;
    v263 = *(_QWORD *)(v695 + 32);
    v264 = *(_QWORD *)(a1[33] + 8);
    if (v703)
    {
      v265 = (llvm::MachineFunction *)v708[4];
      v713[0] = v710;
      if (v710)
        llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
      v266 = *((_QWORD *)v265 + 28);
      if (v266)
        *((_QWORD *)v265 + 28) = *(_QWORD *)v266;
      else
        v266 = sub_1C484358C((uint64_t)v265 + 128, 72, 3);
      *(unsigned __int8 **)&v711 = v713[0];
      if (v713[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
        v713[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v266, v265, v264 + 17904, (unsigned __int8 **)&v711, 0);
      if ((_QWORD)v711)
        llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
      if (v713[0])
        llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
      v270 = v708[5];
      *(_QWORD *)(v266 + 24) = v270;
      v271 = *(_QWORD *)(v270 + 32);
      v272 = *(unsigned int *)(v266 + 40);
      if ((_DWORD)v272)
      {
        v663 = *(_QWORD *)(v266 + 32);
        v664 = *(_QWORD *)(v271 + 40);
        v665 = 32 * v272;
        do
        {
          if (!*(_BYTE *)v663)
          {
            v666 = *(unsigned int *)(v663 + 4);
            if ((int)v666 >= 0)
              v667 = (uint64_t *)(*(_QWORD *)(v664 + 272) + 8 * v666);
            else
              v667 = (uint64_t *)(*(_QWORD *)(v664 + 24) + 16 * (v666 & 0x7FFFFFFF) + 8);
            v668 = *v667;
            if (*v667)
            {
              v669 = *(_QWORD *)(v668 + 16);
              *(_QWORD *)(v668 + 16) = v663;
              *(_QWORD *)(v663 + 16) = v669;
              if ((*(_BYTE *)(v663 + 3) & 1) != 0)
              {
                *(_QWORD *)(v663 + 24) = v668;
              }
              else
              {
                *(_QWORD *)(v663 + 24) = 0;
                v667 = (uint64_t *)(v669 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v663 + 16) = v663;
              *(_QWORD *)(v663 + 24) = 0;
            }
            *v667 = v663;
          }
          v663 += 32;
          v665 -= 32;
        }
        while (v665);
      }
      v273 = *(_QWORD *)(v271 + 728);
      if (v273)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v273 + 24))(v273, v266);
      v274 = *v707 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v266 = v274 | *(_QWORD *)v266 & 7;
      *(_QWORD *)(v266 + 8) = v707;
      *(_QWORD *)(v274 + 8) = v266;
      *v707 = *v707 & 7 | v266;
      v275 = (_QWORD *)a1[34];
      v276 = v263 + 32 * v262;
      v279 = *(_DWORD *)(v276 + 4);
      v278 = (unsigned int *)(v276 + 4);
      v277 = v279;
      v280 = v275[1];
      v281 = v275[7];
      v282 = *(unsigned int *)(v280 + 24 * v279 + 4);
      v283 = *(unsigned __int16 *)(v281 + 2 * v282);
      if (*(_WORD *)(v281 + 2 * v282))
      {
        LOWORD(v283) = v283 + v277;
        v284 = (_WORD *)(v275[11] + 2 * *(unsigned int *)(v280 + 24 * v277 + 12));
        v285 = (unsigned __int16 *)(v281 + 2 * v282 + 2);
        while (*v284 != 1)
        {
          v286 = *v285++;
          LOWORD(v283) = v286 + v283;
          ++v284;
          if (!v286)
          {
            v283 = 0;
            goto LABEL_361;
          }
        }
        v283 = (unsigned __int16)v283;
      }
LABEL_361:
      *((_QWORD *)&v711 + 1) = 0;
      v712 = 0uLL;
      LODWORD(v711) = 0x1000000;
      DWORD1(v711) = v283;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v265, (const llvm::MachineOperand *)&v711);
      LODWORD(v711) = 1;
      *((_QWORD *)&v711 + 1) = 0;
      *(_QWORD *)&v712 = 32;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v265, (const llvm::MachineOperand *)&v711);
      v287 = (_QWORD *)a1[34];
      v288 = *v278;
      v289 = v287[1];
      v290 = v287[7];
      v291 = *(unsigned int *)(v289 + 24 * *v278 + 4);
      v292 = *(unsigned __int16 *)(v290 + 2 * v291);
      if (*(_WORD *)(v290 + 2 * v291))
      {
        LOWORD(v292) = v292 + v288;
        v293 = (_WORD *)(v287[11] + 2 * *(unsigned int *)(v289 + 24 * v288 + 12));
        v294 = (unsigned __int16 *)(v290 + 2 * v291 + 2);
        while (*v293 != 1)
        {
          v295 = *v294++;
          LOWORD(v292) = v295 + v292;
          ++v293;
          if (!v295)
          {
            v292 = 0;
            goto LABEL_367;
          }
        }
        v292 = (unsigned __int16)v292;
      }
LABEL_367:
      *((_QWORD *)&v711 + 1) = 0;
      v712 = 0uLL;
      LODWORD(v711) = 0;
      DWORD1(v711) = v292;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v265, (const llvm::MachineOperand *)&v711);
      LODWORD(v711) = 1;
      *((_QWORD *)&v711 + 1) = 0;
      *(_QWORD *)&v712 = 16;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v265, (const llvm::MachineOperand *)&v711);
      LODWORD(v711) = 1;
      *((_QWORD *)&v711 + 1) = 0;
      *(_QWORD *)&v712 = 0x10000FF0FLL;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v265, (const llvm::MachineOperand *)&v711);
      LODWORD(v711) = 1;
      *((_QWORD *)&v711 + 1) = 0;
      *(_QWORD *)&v712 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v265, (const llvm::MachineOperand *)&v711);
      v712 = 0uLL;
      v711 = 0x200000000uLL;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v265, (const llvm::MachineOperand *)&v711);
      v296 = *v278;
      *((_QWORD *)&v711 + 1) = 0;
      v712 = 0uLL;
      LODWORD(v711) = 100663296;
      DWORD1(v711) = v296;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v265, (const llvm::MachineOperand *)&v711);
      v297 = *v278;
      *((_QWORD *)&v711 + 1) = 0;
      v712 = 0uLL;
      LODWORD(v711) = 50331648;
      DWORD1(v711) = v297;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v266, v265, (const llvm::MachineOperand *)&v711);
      v298 = a1[31];
      v299 = *v693;
      LODWORD(v711) = 0;
      v300 = sub_1C4785D88(v298, v299, "IDFCMode", &v711);
      v301 = v711;
      v302 = a1[31];
      v303 = *v693;
      LODWORD(v711) = 0;
      v304 = sub_1C4785D88(v302, v303, "IDFSLCMode", &v711);
      v305 = v711;
      v306 = *(_QWORD *)(a1[33] + 8);
      v307 = (llvm::MachineFunction *)v708[4];
      v713[0] = v710;
      if (v710)
        llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
      v308 = v306 + 139296;
      v309 = *((_QWORD *)v307 + 28);
      if (v309)
        *((_QWORD *)v307 + 28) = *(_QWORD *)v309;
      else
        v309 = sub_1C484358C((uint64_t)v307 + 128, 72, 3);
      *(unsigned __int8 **)&v711 = v713[0];
      if (v713[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
        v713[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v309, v307, v308, (unsigned __int8 **)&v711, 0);
      if ((_QWORD)v711)
        llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
      if (v713[0])
        llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
      v310 = v708[5];
      *(_QWORD *)(v309 + 24) = v310;
      v311 = *(_QWORD *)(v310 + 32);
      v312 = *(unsigned int *)(v309 + 40);
      if ((_DWORD)v312)
      {
        v670 = *(_QWORD *)(v309 + 32);
        v671 = *(_QWORD *)(v311 + 40);
        v672 = 32 * v312;
        do
        {
          if (!*(_BYTE *)v670)
          {
            v673 = *(unsigned int *)(v670 + 4);
            if ((int)v673 >= 0)
              v674 = (uint64_t *)(*(_QWORD *)(v671 + 272) + 8 * v673);
            else
              v674 = (uint64_t *)(*(_QWORD *)(v671 + 24) + 16 * (v673 & 0x7FFFFFFF) + 8);
            v675 = *v674;
            if (*v674)
            {
              v676 = *(_QWORD *)(v675 + 16);
              *(_QWORD *)(v675 + 16) = v670;
              *(_QWORD *)(v670 + 16) = v676;
              if ((*(_BYTE *)(v670 + 3) & 1) != 0)
              {
                *(_QWORD *)(v670 + 24) = v675;
              }
              else
              {
                *(_QWORD *)(v670 + 24) = 0;
                v674 = (uint64_t *)(v676 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v670 + 16) = v670;
              *(_QWORD *)(v670 + 24) = 0;
            }
            *v674 = v670;
          }
          v670 += 32;
          v672 -= 32;
        }
        while (v672);
      }
      v313 = *(_QWORD *)(v311 + 728);
      if (v313)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v313 + 24))(v313, v309);
      v314 = *v707 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v309 = v314 | *(_QWORD *)v309 & 7;
      *(_QWORD *)(v309 + 8) = v707;
      *(_QWORD *)(v314 + 8) = v309;
      *v707 = *v707 & 7 | v309;
      v315 = *v278;
      *((_QWORD *)&v711 + 1) = 0;
      v712 = 0uLL;
      LODWORD(v711) = 0;
      DWORD1(v711) = v315;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v309, v307, (const llvm::MachineOperand *)&v711);
      LODWORD(v711) = 1;
      if (v300)
        v316 = v301;
      else
        v316 = 0;
      *((_QWORD *)&v711 + 1) = 0;
      *(_QWORD *)&v712 = v316;
      v706 = v316;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v309, v307, (const llvm::MachineOperand *)&v711);
      LODWORD(v711) = 1;
      if (v304)
        v317 = v305;
      else
        v317 = 0;
      *((_QWORD *)&v711 + 1) = 0;
      *(_QWORD *)&v712 = v317;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v309, v307, (const llvm::MachineOperand *)&v711);
      LODWORD(v711) = 1;
      *((_QWORD *)&v711 + 1) = 0;
      *(_QWORD *)&v712 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v309, v307, (const llvm::MachineOperand *)&v711);
      LODWORD(v711) = 1;
      *((_QWORD *)&v711 + 1) = 0;
      *(_QWORD *)&v712 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v309, v307, (const llvm::MachineOperand *)&v711);
      v712 = 0uLL;
      v711 = 0x200000000uLL;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v309, v307, (const llvm::MachineOperand *)&v711);
      v318 = 1;
      v261 = v708;
      do
      {
        v319 = *(_QWORD *)(a1[33] + 8);
        v320 = (llvm::MachineFunction *)v261[4];
        v713[0] = v710;
        if (v710)
          llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
        v321 = *((_QWORD *)v320 + 28);
        if (v321)
          *((_QWORD *)v320 + 28) = *(_QWORD *)v321;
        else
          v321 = sub_1C484358C((uint64_t)v320 + 128, 72, 3);
        *(unsigned __int8 **)&v711 = v713[0];
        if (v713[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
          v713[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v321, v320, v319 + 133392, (unsigned __int8 **)&v711, 0);
        if ((_QWORD)v711)
          llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
        if (v713[0])
          llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
        v322 = v708[5];
        *(_QWORD *)(v321 + 24) = v322;
        v323 = *(_QWORD *)(v322 + 32);
        v324 = *(unsigned int *)(v321 + 40);
        if ((_DWORD)v324)
        {
          v356 = *(_QWORD *)(v321 + 32);
          v357 = *(_QWORD *)(v323 + 40);
          v358 = 32 * v324;
          do
          {
            if (!*(_BYTE *)v356)
            {
              v359 = *(unsigned int *)(v356 + 4);
              if ((int)v359 >= 0)
                v360 = (uint64_t *)(*(_QWORD *)(v357 + 272) + 8 * v359);
              else
                v360 = (uint64_t *)(*(_QWORD *)(v357 + 24) + 16 * (v359 & 0x7FFFFFFF) + 8);
              v361 = *v360;
              if (*v360)
              {
                v362 = *(_QWORD *)(v361 + 16);
                *(_QWORD *)(v361 + 16) = v356;
                *(_QWORD *)(v356 + 16) = v362;
                if ((*(_BYTE *)(v356 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v356 + 24) = v361;
                }
                else
                {
                  *(_QWORD *)(v356 + 24) = 0;
                  v360 = (uint64_t *)(v362 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v356 + 16) = v356;
                *(_QWORD *)(v356 + 24) = 0;
              }
              *v360 = v356;
            }
            v356 += 32;
            v358 -= 32;
          }
          while (v358);
        }
        v325 = *(_QWORD *)(v323 + 728);
        if (v325)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v325 + 24))(v325, v321);
        v326 = *v707 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v321 = v326 | *(_QWORD *)v321 & 7;
        *(_QWORD *)(v321 + 8) = v707;
        *(_QWORD *)(v326 + 8) = v321;
        *v707 = *v707 & 7 | v321;
        v327 = (_QWORD *)a1[34];
        v328 = *v278;
        v329 = v327[1];
        v330 = v327[7];
        v331 = *(unsigned int *)(v329 + 24 * *v278 + 4);
        v332 = *(unsigned __int16 *)(v330 + 2 * v331);
        if (*(_WORD *)(v330 + 2 * v331))
        {
          LOWORD(v332) = v332 + v328;
          v333 = (_WORD *)(v327[11] + 2 * *(unsigned int *)(v329 + 24 * v328 + 12));
          v334 = (unsigned __int16 *)(v330 + 2 * v331 + 2);
          while (*v333 != 1)
          {
            v335 = *v334++;
            LOWORD(v332) = v335 + v332;
            ++v333;
            if (!v335)
            {
              v332 = 0;
              goto LABEL_408;
            }
          }
          v332 = (unsigned __int16)v332;
        }
LABEL_408:
        *((_QWORD *)&v711 + 1) = 0;
        v712 = 0uLL;
        DWORD1(v711) = v332;
        LODWORD(v711) = 0x1000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v321, v320, (const llvm::MachineOperand *)&v711);
        LODWORD(v711) = 1;
        *((_QWORD *)&v711 + 1) = 0;
        *(_QWORD *)&v712 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v321, v320, (const llvm::MachineOperand *)&v711);
        v336 = (_QWORD *)a1[34];
        v337 = *v278;
        v338 = v336[1];
        v339 = v336[7];
        v340 = *(unsigned int *)(v338 + 24 * *v278 + 4);
        v341 = *(unsigned __int16 *)(v339 + 2 * v340);
        if (*(_WORD *)(v339 + 2 * v340))
        {
          LOWORD(v341) = v341 + v337;
          v342 = (_WORD *)(v336[11] + 2 * *(unsigned int *)(v338 + 24 * v337 + 12));
          v343 = (unsigned __int16 *)(v339 + 2 * v340 + 2);
          while (*v342 != 1)
          {
            v344 = *v343++;
            LOWORD(v341) = v344 + v341;
            ++v342;
            if (!v344)
            {
              v341 = 0;
              goto LABEL_414;
            }
          }
          v341 = (unsigned __int16)v341;
        }
LABEL_414:
        *((_QWORD *)&v711 + 1) = 0;
        LODWORD(v711) = 0;
        DWORD1(v711) = v341;
        v712 = 0uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v321, v320, (const llvm::MachineOperand *)&v711);
        LODWORD(v711) = 1;
        *((_QWORD *)&v711 + 1) = 0;
        *(_QWORD *)&v712 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v321, v320, (const llvm::MachineOperand *)&v711);
        LODWORD(v711) = 1;
        *((_QWORD *)&v711 + 1) = 0;
        *(_QWORD *)&v712 = 0x100000010;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v321, v320, (const llvm::MachineOperand *)&v711);
        LODWORD(v711) = 1;
        *((_QWORD *)&v711 + 1) = 0;
        *(_QWORD *)&v712 = 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v321, v320, (const llvm::MachineOperand *)&v711);
        v711 = 0x200000000uLL;
        v712 = 0uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v321, v320, (const llvm::MachineOperand *)&v711);
        v345 = *v278;
        *((_QWORD *)&v711 + 1) = 0;
        v712 = 0uLL;
        LODWORD(v711) = 100663296;
        DWORD1(v711) = v345;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v321, v320, (const llvm::MachineOperand *)&v711);
        v346 = *v278;
        *((_QWORD *)&v711 + 1) = 0;
        v712 = 0uLL;
        LODWORD(v711) = 50331648;
        DWORD1(v711) = v346;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v321, v320, (const llvm::MachineOperand *)&v711);
        v347 = *(_QWORD *)(a1[33] + 8);
        v348 = (llvm::MachineFunction *)v708[4];
        v713[0] = v710;
        if (v710)
          llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
        v349 = *((_QWORD *)v348 + 28);
        if (v349)
          *((_QWORD *)v348 + 28) = *(_QWORD *)v349;
        else
          v349 = sub_1C484358C((uint64_t)v348 + 128, 72, 3);
        *(unsigned __int8 **)&v711 = v713[0];
        if (v713[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
          v713[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v349, v348, v347 + 139296, (unsigned __int8 **)&v711, 0);
        if ((_QWORD)v711)
          llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
        v261 = v708;
        if (v713[0])
          llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
        v350 = v708[5];
        *(_QWORD *)(v349 + 24) = v350;
        v351 = *(_QWORD *)(v350 + 32);
        v352 = *(unsigned int *)(v349 + 40);
        if ((_DWORD)v352)
        {
          v363 = *(_QWORD *)(v349 + 32);
          v364 = *(_QWORD *)(v351 + 40);
          v365 = 32 * v352;
          do
          {
            if (!*(_BYTE *)v363)
            {
              v366 = *(unsigned int *)(v363 + 4);
              if ((int)v366 >= 0)
                v367 = (uint64_t *)(*(_QWORD *)(v364 + 272) + 8 * v366);
              else
                v367 = (uint64_t *)(*(_QWORD *)(v364 + 24) + 16 * (v366 & 0x7FFFFFFF) + 8);
              v368 = *v367;
              if (*v367)
              {
                v369 = *(_QWORD *)(v368 + 16);
                *(_QWORD *)(v368 + 16) = v363;
                *(_QWORD *)(v363 + 16) = v369;
                if ((*(_BYTE *)(v363 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v363 + 24) = v368;
                }
                else
                {
                  *(_QWORD *)(v363 + 24) = 0;
                  v367 = (uint64_t *)(v369 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v363 + 16) = v363;
                *(_QWORD *)(v363 + 24) = 0;
              }
              *v367 = v363;
            }
            v363 += 32;
            v365 -= 32;
          }
          while (v365);
        }
        v353 = *(_QWORD *)(v351 + 728);
        if (v353)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v353 + 24))(v353, v349);
        v354 = *v707 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v349 = v354 | *(_QWORD *)v349 & 7;
        *(_QWORD *)(v349 + 8) = v707;
        *(_QWORD *)(v354 + 8) = v349;
        *v707 = *v707 & 7 | v349;
        v355 = *v278;
        *((_QWORD *)&v711 + 1) = 0;
        LODWORD(v711) = 0;
        DWORD1(v711) = v355;
        v712 = 0uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v349, v348, (const llvm::MachineOperand *)&v711);
        LODWORD(v711) = 1;
        *((_QWORD *)&v711 + 1) = 0;
        *(_QWORD *)&v712 = v706;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v349, v348, (const llvm::MachineOperand *)&v711);
        LODWORD(v711) = 1;
        *((_QWORD *)&v711 + 1) = 0;
        *(_QWORD *)&v712 = v317;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v349, v348, (const llvm::MachineOperand *)&v711);
        LODWORD(v711) = 1;
        *((_QWORD *)&v711 + 1) = 0;
        *(_QWORD *)&v712 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v349, v348, (const llvm::MachineOperand *)&v711);
        LODWORD(v711) = 1;
        *((_QWORD *)&v711 + 1) = 0;
        *(_QWORD *)&v712 = 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v349, v348, (const llvm::MachineOperand *)&v711);
        v711 = 0x200000000uLL;
        v712 = 0uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v349, v348, (const llvm::MachineOperand *)&v711);
        ++v318;
      }
      while (v318 != 16);
      v370 = *(_QWORD *)(a1[33] + 8);
      v371 = (llvm::MachineFunction *)v708[4];
      v713[0] = v710;
      if (v710)
        llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
      v372 = *((_QWORD *)v371 + 28);
      v62 = v699;
      v165 = v704;
      v219 = v701;
      v246 = v694;
      if (v372)
        *((_QWORD *)v371 + 28) = *(_QWORD *)v372;
      else
        v372 = sub_1C484358C((uint64_t)v371 + 128, 72, 3);
      *(unsigned __int8 **)&v711 = v713[0];
      if (v713[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
        v713[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v372, v371, v370 + 644640, (unsigned __int8 **)&v711, 0);
      if ((_QWORD)v711)
        llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
      if (v713[0])
        llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
      v373 = v708[5];
      *(_QWORD *)(v372 + 24) = v373;
      v374 = *(_QWORD *)(v373 + 32);
      v375 = *(unsigned int *)(v372 + 40);
      if ((_DWORD)v375)
      {
        v376 = *(_QWORD *)(v372 + 32);
        v377 = *(_QWORD *)(v374 + 40);
        v378 = 32 * v375;
        do
        {
          if (!*(_BYTE *)v376)
          {
            v379 = *(unsigned int *)(v376 + 4);
            if ((int)v379 >= 0)
              v380 = (uint64_t *)(*(_QWORD *)(v377 + 272) + 8 * v379);
            else
              v380 = (uint64_t *)(*(_QWORD *)(v377 + 24) + 16 * (v379 & 0x7FFFFFFF) + 8);
            v381 = *v380;
            if (*v380)
            {
              v382 = *(_QWORD *)(v381 + 16);
              *(_QWORD *)(v381 + 16) = v376;
              *(_QWORD *)(v376 + 16) = v382;
              if ((*(_BYTE *)(v376 + 3) & 1) != 0)
              {
                *(_QWORD *)(v376 + 24) = v381;
              }
              else
              {
                *(_QWORD *)(v376 + 24) = 0;
                v380 = (uint64_t *)(v382 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v376 + 16) = v376;
              *(_QWORD *)(v376 + 24) = 0;
            }
            *v380 = v376;
          }
          v376 += 32;
          v378 -= 32;
        }
        while (v378);
      }
    }
    else
    {
      v267 = (llvm::MachineFunction *)v708[4];
      v713[0] = v710;
      if (v710)
        llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
      v268 = v264 + 139344;
      v269 = *((_QWORD *)v267 + 28);
      if (v269)
        *((_QWORD *)v267 + 28) = *(_QWORD *)v269;
      else
        v269 = sub_1C484358C((uint64_t)v267 + 128, 72, 3);
      *(unsigned __int8 **)&v711 = v713[0];
      if (v713[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
        v713[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v269, v267, v268, (unsigned __int8 **)&v711, 0);
      if ((_QWORD)v711)
        llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
      if (v713[0])
        llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
      v383 = v708[5];
      *(_QWORD *)(v269 + 24) = v383;
      v384 = *(_QWORD *)(v383 + 32);
      v385 = *(unsigned int *)(v269 + 40);
      if ((_DWORD)v385)
      {
        v677 = *(_QWORD *)(v269 + 32);
        v678 = *(_QWORD *)(v384 + 40);
        v679 = 32 * v385;
        do
        {
          if (!*(_BYTE *)v677)
          {
            v680 = *(unsigned int *)(v677 + 4);
            if ((int)v680 >= 0)
              v681 = (uint64_t *)(*(_QWORD *)(v678 + 272) + 8 * v680);
            else
              v681 = (uint64_t *)(*(_QWORD *)(v678 + 24) + 16 * (v680 & 0x7FFFFFFF) + 8);
            v682 = *v681;
            if (*v681)
            {
              v683 = *(_QWORD *)(v682 + 16);
              *(_QWORD *)(v682 + 16) = v677;
              *(_QWORD *)(v677 + 16) = v683;
              if ((*(_BYTE *)(v677 + 3) & 1) != 0)
              {
                *(_QWORD *)(v677 + 24) = v682;
              }
              else
              {
                *(_QWORD *)(v677 + 24) = 0;
                v681 = (uint64_t *)(v683 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v677 + 16) = v677;
              *(_QWORD *)(v677 + 24) = 0;
            }
            *v681 = v677;
          }
          v677 += 32;
          v679 -= 32;
        }
        while (v679);
      }
      v386 = *(_QWORD *)(v384 + 728);
      if (v386)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v386 + 24))(v386, v269);
      v387 = v708[6] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v269 = v387 | *(_QWORD *)v269 & 7;
      *(_QWORD *)(v269 + 8) = v707;
      *(_QWORD *)(v387 + 8) = v269;
      v708[6] = v708[6] & 7 | v269;
      v388 = *(_DWORD *)(v263 + 32 * v262 + 4);
      *((_QWORD *)&v711 + 1) = 0;
      v712 = 0uLL;
      LODWORD(v711) = 0;
      DWORD1(v711) = v388;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v269, v267, (const llvm::MachineOperand *)&v711);
      LODWORD(v711) = 1;
      *((_QWORD *)&v711 + 1) = 0;
      *(_QWORD *)&v712 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v269, v267, (const llvm::MachineOperand *)&v711);
      LODWORD(v711) = 1;
      *((_QWORD *)&v711 + 1) = 0;
      *(_QWORD *)&v712 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v269, v267, (const llvm::MachineOperand *)&v711);
      LODWORD(v711) = 1;
      *((_QWORD *)&v711 + 1) = 0;
      *(_QWORD *)&v712 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v269, v267, (const llvm::MachineOperand *)&v711);
      LODWORD(v711) = 1;
      *((_QWORD *)&v711 + 1) = 0;
      *(_QWORD *)&v712 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v269, v267, (const llvm::MachineOperand *)&v711);
      LODWORD(v711) = 1;
      *((_QWORD *)&v711 + 1) = 0;
      *(_QWORD *)&v712 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v269, v267, (const llvm::MachineOperand *)&v711);
      LODWORD(v711) = 1;
      *((_QWORD *)&v711 + 1) = 0;
      *(_QWORD *)&v712 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v269, v267, (const llvm::MachineOperand *)&v711);
      v712 = 0uLL;
      v711 = 0x200000000uLL;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v269, v267, (const llvm::MachineOperand *)&v711);
      v389 = *(_QWORD *)(a1[33] + 8);
      v371 = (llvm::MachineFunction *)v708[4];
      v713[0] = v710;
      if (v710)
        llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
      v372 = *((_QWORD *)v371 + 28);
      v62 = v699;
      if (v372)
        *((_QWORD *)v371 + 28) = *(_QWORD *)v372;
      else
        v372 = sub_1C484358C((uint64_t)v371 + 128, 72, 3);
      *(unsigned __int8 **)&v711 = v713[0];
      if (v713[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
        v713[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v372, v371, v389 + 644640, (unsigned __int8 **)&v711, 0);
      if ((_QWORD)v711)
        llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
      if (v713[0])
        llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
      v390 = v708[5];
      *(_QWORD *)(v372 + 24) = v390;
      v374 = *(_QWORD *)(v390 + 32);
      v391 = *(unsigned int *)(v372 + 40);
      if ((_DWORD)v391)
      {
        v684 = *(_QWORD *)(v372 + 32);
        v685 = *(_QWORD *)(v374 + 40);
        v686 = 32 * v391;
        do
        {
          if (!*(_BYTE *)v684)
          {
            v687 = *(unsigned int *)(v684 + 4);
            if ((int)v687 >= 0)
              v688 = (uint64_t *)(*(_QWORD *)(v685 + 272) + 8 * v687);
            else
              v688 = (uint64_t *)(*(_QWORD *)(v685 + 24) + 16 * (v687 & 0x7FFFFFFF) + 8);
            v689 = *v688;
            if (*v688)
            {
              v690 = *(_QWORD *)(v689 + 16);
              *(_QWORD *)(v689 + 16) = v684;
              *(_QWORD *)(v684 + 16) = v690;
              if ((*(_BYTE *)(v684 + 3) & 1) != 0)
              {
                *(_QWORD *)(v684 + 24) = v689;
              }
              else
              {
                *(_QWORD *)(v684 + 24) = 0;
                v688 = (uint64_t *)(v690 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v684 + 16) = v684;
              *(_QWORD *)(v684 + 24) = 0;
            }
            *v688 = v684;
          }
          v684 += 32;
          v686 -= 32;
        }
        while (v686);
      }
    }
    v392 = *(_QWORD *)(v374 + 728);
    if (v392)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v392 + 24))(v392, v372);
    v393 = *v707 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v372 = v393 | *(_QWORD *)v372 & 7;
    *(_QWORD *)(v372 + 8) = v707;
    *(_QWORD *)(v393 + 8) = v372;
    *v707 = *v707 & 7 | v372;
    LODWORD(v711) = 1;
    *((_QWORD *)&v711 + 1) = 0;
    *(_QWORD *)&v712 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v372, v371, (const llvm::MachineOperand *)&v711);
  }
  v394 = *(_QWORD *)(a1[33] + 8);
  v395 = (llvm::MachineFunction *)v261[4];
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v396 = *((_QWORD *)v395 + 28);
  if (v396)
    *((_QWORD *)v395 + 28) = *(_QWORD *)v396;
  else
    v396 = sub_1C484358C((uint64_t)v395 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v396, v395, v394 + 644592, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v397 = v261[5];
  *(_QWORD *)(v396 + 24) = v397;
  v398 = *(_QWORD *)(v397 + 32);
  v399 = *(unsigned int *)(v396 + 40);
  if ((_DWORD)v399)
  {
    v584 = *(_QWORD *)(v396 + 32);
    v585 = *(_QWORD *)(v398 + 40);
    v586 = 32 * v399;
    do
    {
      if (!*(_BYTE *)v584)
      {
        v587 = *(unsigned int *)(v584 + 4);
        if ((int)v587 >= 0)
          v588 = (uint64_t *)(*(_QWORD *)(v585 + 272) + 8 * v587);
        else
          v588 = (uint64_t *)(*(_QWORD *)(v585 + 24) + 16 * (v587 & 0x7FFFFFFF) + 8);
        v589 = *v588;
        if (*v588)
        {
          v590 = *(_QWORD *)(v589 + 16);
          *(_QWORD *)(v589 + 16) = v584;
          *(_QWORD *)(v584 + 16) = v590;
          if ((*(_BYTE *)(v584 + 3) & 1) != 0)
          {
            *(_QWORD *)(v584 + 24) = v589;
          }
          else
          {
            *(_QWORD *)(v584 + 24) = 0;
            v588 = (uint64_t *)(v590 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v584 + 16) = v584;
          *(_QWORD *)(v584 + 24) = 0;
        }
        *v588 = v584;
      }
      v584 += 32;
      v586 -= 32;
    }
    while (v586);
  }
  v400 = *(_QWORD *)(v398 + 728);
  if (v400)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v400 + 24))(v400, v396);
  v401 = *v707 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v396 = v401 | *(_QWORD *)v396 & 7;
  *(_QWORD *)(v396 + 8) = v707;
  *(_QWORD *)(v401 + 8) = v396;
  *v707 = *v707 & 7 | v396;
  v402 = v165 + 32 * (v702 + 2);
  v404 = *(_QWORD *)(v402 + 16);
  v403 = (uint64_t *)(v402 + 16);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = v404;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v396, v395, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v396, v395, (const llvm::MachineOperand *)&v711);
  v712 = 0uLL;
  v711 = 0x200000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v396, v395, (const llvm::MachineOperand *)&v711);
  if (a7)
  {
    v405 = v261[5];
    *(_QWORD *)(a7 + 24) = v405;
    v406 = *(_QWORD *)(v405 + 32);
    v407 = *(unsigned int *)(a7 + 40);
    if ((_DWORD)v407)
    {
      v649 = *(_QWORD *)(a7 + 32);
      v650 = *(_QWORD *)(v406 + 40);
      v651 = 32 * v407;
      do
      {
        if (!*(_BYTE *)v649)
        {
          v652 = *(unsigned int *)(v649 + 4);
          if ((int)v652 >= 0)
            v653 = (uint64_t *)(*(_QWORD *)(v650 + 272) + 8 * v652);
          else
            v653 = (uint64_t *)(*(_QWORD *)(v650 + 24) + 16 * (v652 & 0x7FFFFFFF) + 8);
          v654 = *v653;
          if (*v653)
          {
            v655 = *(_QWORD *)(v654 + 16);
            *(_QWORD *)(v654 + 16) = v649;
            *(_QWORD *)(v649 + 16) = v655;
            if ((*(_BYTE *)(v649 + 3) & 1) != 0)
            {
              *(_QWORD *)(v649 + 24) = v654;
            }
            else
            {
              *(_QWORD *)(v649 + 24) = 0;
              v653 = (uint64_t *)(v655 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v649 + 16) = v649;
            *(_QWORD *)(v649 + 24) = 0;
          }
          *v653 = v649;
        }
        v649 += 32;
        v651 -= 32;
      }
      while (v651);
    }
    v408 = *(_QWORD *)(v406 + 728);
    if (v408)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v408 + 24))(v408, a7);
    v409 = *v707 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)a7 = v409 | *(_QWORD *)a7 & 7;
    *(_QWORD *)(a7 + 8) = v707;
    *(_QWORD *)(v409 + 8) = a7;
    *v707 = *v707 & 7 | a7;
    NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(a7);
    *(_QWORD *)(*(_QWORD *)(a7 + 32) + 32 * (NumExplicitOperands - 2) + 16) = 1;
    llvm::MachineOperand::setReg(*(_QWORD *)(a7 + 32) + 32 * (NumExplicitOperands - 1), 2u);
  }
  v411 = *(_QWORD *)(a1[33] + 8);
  v412 = (llvm::MachineFunction *)v261[4];
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v413 = v411 + 18960;
  v414 = *((_QWORD *)v412 + 28);
  if (v414)
    *((_QWORD *)v412 + 28) = *(_QWORD *)v414;
  else
    v414 = sub_1C484358C((uint64_t)v412 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v414, v412, v413, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v415 = v261[5];
  *(_QWORD *)(v414 + 24) = v415;
  v416 = *(_QWORD *)(v415 + 32);
  v417 = *(unsigned int *)(v414 + 40);
  if ((_DWORD)v417)
  {
    v591 = *(_QWORD *)(v414 + 32);
    v592 = *(_QWORD *)(v416 + 40);
    v593 = 32 * v417;
    do
    {
      if (!*(_BYTE *)v591)
      {
        v594 = *(unsigned int *)(v591 + 4);
        if ((int)v594 >= 0)
          v595 = (uint64_t *)(*(_QWORD *)(v592 + 272) + 8 * v594);
        else
          v595 = (uint64_t *)(*(_QWORD *)(v592 + 24) + 16 * (v594 & 0x7FFFFFFF) + 8);
        v596 = *v595;
        if (*v595)
        {
          v597 = *(_QWORD *)(v596 + 16);
          *(_QWORD *)(v596 + 16) = v591;
          *(_QWORD *)(v591 + 16) = v597;
          if ((*(_BYTE *)(v591 + 3) & 1) != 0)
          {
            *(_QWORD *)(v591 + 24) = v596;
          }
          else
          {
            *(_QWORD *)(v591 + 24) = 0;
            v595 = (uint64_t *)(v597 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v591 + 16) = v591;
          *(_QWORD *)(v591 + 24) = 0;
        }
        *v595 = v591;
      }
      v591 += 32;
      v593 -= 32;
    }
    while (v593);
  }
  v418 = *(_QWORD *)(v416 + 728);
  if (v418)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v418 + 24))(v418, v414);
  v419 = *v707 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v414 = v419 | *(_QWORD *)v414 & 7;
  *(_QWORD *)(v414 + 8) = v707;
  *(_QWORD *)(v419 + 8) = v414;
  *v707 = *v707 & 7 | v414;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = v62;
  LODWORD(v711) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v414, v412, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v414, v412, (const llvm::MachineOperand *)&v711);
  v712 = 0uLL;
  v711 = 0x200000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v414, v412, (const llvm::MachineOperand *)&v711);
  v420 = *(_QWORD *)(a1[33] + 8);
  v421 = (llvm::MachineFunction *)v219[4];
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v422 = v420 + 586320;
  v423 = *((_QWORD *)v421 + 28);
  if (v423)
    *((_QWORD *)v421 + 28) = *(_QWORD *)v423;
  else
    v423 = sub_1C484358C((uint64_t)v421 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v423, v421, v422, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v424 = v219[5];
  *(_QWORD *)(v423 + 24) = v424;
  v425 = *(_QWORD *)(v424 + 32);
  v426 = *(unsigned int *)(v423 + 40);
  if ((_DWORD)v426)
  {
    v598 = *(_QWORD *)(v423 + 32);
    v599 = *(_QWORD *)(v425 + 40);
    v600 = 32 * v426;
    do
    {
      if (!*(_BYTE *)v598)
      {
        v601 = *(unsigned int *)(v598 + 4);
        if ((int)v601 >= 0)
          v602 = (uint64_t *)(*(_QWORD *)(v599 + 272) + 8 * v601);
        else
          v602 = (uint64_t *)(*(_QWORD *)(v599 + 24) + 16 * (v601 & 0x7FFFFFFF) + 8);
        v603 = *v602;
        if (*v602)
        {
          v604 = *(_QWORD *)(v603 + 16);
          *(_QWORD *)(v603 + 16) = v598;
          *(_QWORD *)(v598 + 16) = v604;
          if ((*(_BYTE *)(v598 + 3) & 1) != 0)
          {
            *(_QWORD *)(v598 + 24) = v603;
          }
          else
          {
            *(_QWORD *)(v598 + 24) = 0;
            v602 = (uint64_t *)(v604 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v598 + 16) = v598;
          *(_QWORD *)(v598 + 24) = 0;
        }
        *v602 = v598;
      }
      v598 += 32;
      v600 -= 32;
    }
    while (v600);
  }
  v427 = *(_QWORD *)(v425 + 728);
  if (v427)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v427 + 24))(v427, v423);
  v428 = v219[6] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v423 = v428 | *(_QWORD *)v423 & 7;
  *(_QWORD *)(v423 + 8) = v246;
  *(_QWORD *)(v428 + 8) = v423;
  v219[6] = v219[6] & 7 | v423;
  v429 = *v403;
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = v429;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v423, v421, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v423, v421, (const llvm::MachineOperand *)&v711);
  v711 = 0u;
  v712 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v423, v421, (const llvm::MachineOperand *)&v711);
  v430 = *(_QWORD *)(a1[33] + 8);
  if (v703)
    v431 = 565968;
  else
    v431 = 566064;
  v432 = (llvm::MachineFunction *)v219[4];
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v433 = v430 + v431;
  v434 = *((_QWORD *)v432 + 28);
  if (v434)
    *((_QWORD *)v432 + 28) = *(_QWORD *)v434;
  else
    v434 = sub_1C484358C((uint64_t)v432 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v434, v432, v433, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v435 = v219[5];
  *(_QWORD *)(v434 + 24) = v435;
  v436 = *(_QWORD *)(v435 + 32);
  v437 = *(unsigned int *)(v434 + 40);
  if ((_DWORD)v437)
  {
    v605 = *(_QWORD *)(v434 + 32);
    v606 = *(_QWORD *)(v436 + 40);
    v607 = 32 * v437;
    do
    {
      if (!*(_BYTE *)v605)
      {
        v608 = *(unsigned int *)(v605 + 4);
        if ((int)v608 >= 0)
          v609 = (uint64_t *)(*(_QWORD *)(v606 + 272) + 8 * v608);
        else
          v609 = (uint64_t *)(*(_QWORD *)(v606 + 24) + 16 * (v608 & 0x7FFFFFFF) + 8);
        v610 = *v609;
        if (*v609)
        {
          v611 = *(_QWORD *)(v610 + 16);
          *(_QWORD *)(v610 + 16) = v605;
          *(_QWORD *)(v605 + 16) = v611;
          if ((*(_BYTE *)(v605 + 3) & 1) != 0)
          {
            *(_QWORD *)(v605 + 24) = v610;
          }
          else
          {
            *(_QWORD *)(v605 + 24) = 0;
            v609 = (uint64_t *)(v611 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v605 + 16) = v605;
          *(_QWORD *)(v605 + 24) = 0;
        }
        *v609 = v605;
      }
      v605 += 32;
      v607 -= 32;
    }
    while (v607);
  }
  v438 = *(_QWORD *)(v436 + 728);
  if (v438)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v438 + 24))(v438, v434);
  v439 = v219[6] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v434 = v439 | *(_QWORD *)v434 & 7;
  *(_QWORD *)(v434 + 8) = v246;
  *(_QWORD *)(v439 + 8) = v434;
  v219[6] = v219[6] & 7 | v434;
  v440 = *(_DWORD *)(v165 + 36);
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0x1000000;
  DWORD1(v711) = v440;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v434, v432, (const llvm::MachineOperand *)&v711);
  v441 = *v697 + 1;
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = v441;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v434, v432, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v434, v432, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v434, v432, (const llvm::MachineOperand *)&v711);
  v711 = 0u;
  v712 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v434, v432, (const llvm::MachineOperand *)&v711);
  v442 = *(_QWORD *)(a1[33] + 8);
  v443 = (llvm::MachineFunction *)v219[4];
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v444 = *((_QWORD *)v443 + 28);
  if (v444)
    *((_QWORD *)v443 + 28) = *(_QWORD *)v444;
  else
    v444 = sub_1C484358C((uint64_t)v443 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v444, v443, v442 + 644640, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v445 = v219[5];
  *(_QWORD *)(v444 + 24) = v445;
  v446 = *(_QWORD *)(v445 + 32);
  v447 = *(unsigned int *)(v444 + 40);
  if ((_DWORD)v447)
  {
    v612 = *(_QWORD *)(v444 + 32);
    v613 = *(_QWORD *)(v446 + 40);
    v614 = 32 * v447;
    do
    {
      if (!*(_BYTE *)v612)
      {
        v615 = *(unsigned int *)(v612 + 4);
        if ((int)v615 >= 0)
          v616 = (uint64_t *)(*(_QWORD *)(v613 + 272) + 8 * v615);
        else
          v616 = (uint64_t *)(*(_QWORD *)(v613 + 24) + 16 * (v615 & 0x7FFFFFFF) + 8);
        v617 = *v616;
        if (*v616)
        {
          v618 = *(_QWORD *)(v617 + 16);
          *(_QWORD *)(v617 + 16) = v612;
          *(_QWORD *)(v612 + 16) = v618;
          if ((*(_BYTE *)(v612 + 3) & 1) != 0)
          {
            *(_QWORD *)(v612 + 24) = v617;
          }
          else
          {
            *(_QWORD *)(v612 + 24) = 0;
            v616 = (uint64_t *)(v618 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v612 + 16) = v612;
          *(_QWORD *)(v612 + 24) = 0;
        }
        *v616 = v612;
      }
      v612 += 32;
      v614 -= 32;
    }
    while (v614);
  }
  v448 = *(_QWORD *)(v446 + 728);
  if (v448)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v448 + 24))(v448, v444);
  v449 = v219[6] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v444 = v449 | *(_QWORD *)v444 & 7;
  *(_QWORD *)(v444 + 8) = v246;
  *(_QWORD *)(v449 + 8) = v444;
  v219[6] = v219[6] & 7 | v444;
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v444, v443, (const llvm::MachineOperand *)&v711);
  v450 = *(_QWORD *)(a1[33] + 8);
  v451 = (llvm::MachineFunction *)v219[4];
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v452 = *((_QWORD *)v451 + 28);
  if (v452)
    *((_QWORD *)v451 + 28) = *(_QWORD *)v452;
  else
    v452 = sub_1C484358C((uint64_t)v451 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v452, v451, v450 + 239808, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v453 = v219[5];
  *(_QWORD *)(v452 + 24) = v453;
  v454 = *(_QWORD *)(v453 + 32);
  v455 = *(unsigned int *)(v452 + 40);
  if ((_DWORD)v455)
  {
    v619 = *(_QWORD *)(v452 + 32);
    v620 = *(_QWORD *)(v454 + 40);
    v621 = 32 * v455;
    do
    {
      if (!*(_BYTE *)v619)
      {
        v622 = *(unsigned int *)(v619 + 4);
        if ((int)v622 >= 0)
          v623 = (uint64_t *)(*(_QWORD *)(v620 + 272) + 8 * v622);
        else
          v623 = (uint64_t *)(*(_QWORD *)(v620 + 24) + 16 * (v622 & 0x7FFFFFFF) + 8);
        v624 = *v623;
        if (*v623)
        {
          v625 = *(_QWORD *)(v624 + 16);
          *(_QWORD *)(v624 + 16) = v619;
          *(_QWORD *)(v619 + 16) = v625;
          if ((*(_BYTE *)(v619 + 3) & 1) != 0)
          {
            *(_QWORD *)(v619 + 24) = v624;
          }
          else
          {
            *(_QWORD *)(v619 + 24) = 0;
            v623 = (uint64_t *)(v625 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v619 + 16) = v619;
          *(_QWORD *)(v619 + 24) = 0;
        }
        *v623 = v619;
      }
      v619 += 32;
      v621 -= 32;
    }
    while (v621);
  }
  v456 = *(_QWORD *)(v454 + 728);
  if (v456)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v456 + 24))(v456, v452);
  v457 = *v246 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v452 = v457 | *(_QWORD *)v452 & 7;
  *(_QWORD *)(v452 + 8) = v246;
  *(_QWORD *)(v457 + 8) = v452;
  *v246 = *v246 & 7 | v452;
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v452, v451, (const llvm::MachineOperand *)&v711);
  v458 = (_QWORD *)a1[34];
  v459 = *(_DWORD *)(v165 + 4);
  v460 = v458[1];
  v461 = v458[7];
  v462 = *(unsigned int *)(v460 + 24 * v459 + 4);
  v463 = *(unsigned __int16 *)(v461 + 2 * v462);
  if (*(_WORD *)(v461 + 2 * v462))
  {
    LOWORD(v463) = v463 + v459;
    v464 = (_WORD *)(v458[11] + 2 * *(unsigned int *)(v460 + 24 * v459 + 12));
    v465 = (unsigned __int16 *)(v461 + 2 * v462 + 2);
    while (*v464 != 2)
    {
      v466 = *v465++;
      LOWORD(v463) = v466 + v463;
      ++v464;
      if (!v466)
      {
        v463 = 0;
        goto LABEL_604;
      }
    }
    v463 = (unsigned __int16)v463;
  }
LABEL_604:
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0;
  DWORD1(v711) = v463;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v452, v451, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v452, v451, (const llvm::MachineOperand *)&v711);
  v467 = *(_DWORD *)(v165 + 36);
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0x4000000;
  DWORD1(v711) = v467;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v452, v451, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v452, v451, (const llvm::MachineOperand *)&v711);
  v712 = 0uLL;
  v711 = 0x201000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v452, v451, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v452, v451, (const llvm::MachineOperand *)&v711);
  v711 = 0u;
  v712 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v452, v451, (const llvm::MachineOperand *)&v711);
  v468 = *(_QWORD *)(a1[33] + 8);
  v469 = (llvm::MachineFunction *)v219[4];
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v470 = *((_QWORD *)v469 + 28);
  if (v470)
    *((_QWORD *)v469 + 28) = *(_QWORD *)v470;
  else
    v470 = sub_1C484358C((uint64_t)v469 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v470, v469, v468 + 18960, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v471 = v219[5];
  *(_QWORD *)(v470 + 24) = v471;
  v472 = *(_QWORD *)(v471 + 32);
  v473 = *(unsigned int *)(v470 + 40);
  if ((_DWORD)v473)
  {
    v626 = *(_QWORD *)(v470 + 32);
    v627 = *(_QWORD *)(v472 + 40);
    v628 = 32 * v473;
    do
    {
      if (!*(_BYTE *)v626)
      {
        v629 = *(unsigned int *)(v626 + 4);
        if ((int)v629 >= 0)
          v630 = (uint64_t *)(*(_QWORD *)(v627 + 272) + 8 * v629);
        else
          v630 = (uint64_t *)(*(_QWORD *)(v627 + 24) + 16 * (v629 & 0x7FFFFFFF) + 8);
        v631 = *v630;
        if (*v630)
        {
          v632 = *(_QWORD *)(v631 + 16);
          *(_QWORD *)(v631 + 16) = v626;
          *(_QWORD *)(v626 + 16) = v632;
          if ((*(_BYTE *)(v626 + 3) & 1) != 0)
          {
            *(_QWORD *)(v626 + 24) = v631;
          }
          else
          {
            *(_QWORD *)(v626 + 24) = 0;
            v630 = (uint64_t *)(v632 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v626 + 16) = v626;
          *(_QWORD *)(v626 + 24) = 0;
        }
        *v630 = v626;
      }
      v626 += 32;
      v628 -= 32;
    }
    while (v628);
  }
  v474 = *(_QWORD *)(v472 + 728);
  if (v474)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v474 + 24))(v474, v470);
  v475 = v219[6] & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v470 = v475 | *(_QWORD *)v470 & 7;
  *(_QWORD *)(v470 + 8) = v246;
  *(_QWORD *)(v475 + 8) = v470;
  v219[6] = v219[6] & 7 | v470;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = v219;
  LODWORD(v711) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v470, v469, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v470, v469, (const llvm::MachineOperand *)&v711);
  v712 = 0uLL;
  v711 = 0x200000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v470, v469, (const llvm::MachineOperand *)&v711);
  v476 = (unint64_t *)v699[7];
  v477 = *(_QWORD *)(a1[33] + 8);
  v478 = (llvm::MachineFunction *)v699[4];
  v713[0] = v710;
  if (v710)
    llvm::MetadataTracking::track((uint64_t)v713, v710, 2);
  v479 = v477 + 28320;
  v480 = *((_QWORD *)v478 + 28);
  if (v480)
    *((_QWORD *)v478 + 28) = *(_QWORD *)v480;
  else
    v480 = sub_1C484358C((uint64_t)v478 + 128, 72, 3);
  *(unsigned __int8 **)&v711 = v713[0];
  if (v713[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v713, v713[0], (uint64_t)&v711);
    v713[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v480, v478, v479, (unsigned __int8 **)&v711, 0);
  if ((_QWORD)v711)
    llvm::MetadataTracking::untrack((uint64_t)&v711, (unsigned __int8 *)v711);
  if (v713[0])
    llvm::MetadataTracking::untrack((uint64_t)v713, v713[0]);
  v481 = v699[5];
  *(_QWORD *)(v480 + 24) = v481;
  v482 = *(_QWORD *)(v481 + 32);
  v483 = *(unsigned int *)(v480 + 40);
  if ((_DWORD)v483)
  {
    v633 = *(_QWORD *)(v480 + 32);
    v634 = *(_QWORD *)(v482 + 40);
    v635 = 32 * v483;
    do
    {
      if (!*(_BYTE *)v633)
      {
        v636 = *(unsigned int *)(v633 + 4);
        if ((int)v636 >= 0)
          v637 = (uint64_t *)(*(_QWORD *)(v634 + 272) + 8 * v636);
        else
          v637 = (uint64_t *)(*(_QWORD *)(v634 + 24) + 16 * (v636 & 0x7FFFFFFF) + 8);
        v638 = *v637;
        if (*v637)
        {
          v639 = *(_QWORD *)(v638 + 16);
          *(_QWORD *)(v638 + 16) = v633;
          *(_QWORD *)(v633 + 16) = v639;
          if ((*(_BYTE *)(v633 + 3) & 1) != 0)
          {
            *(_QWORD *)(v633 + 24) = v638;
          }
          else
          {
            *(_QWORD *)(v633 + 24) = 0;
            v637 = (uint64_t *)(v639 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v633 + 16) = v633;
          *(_QWORD *)(v633 + 24) = 0;
        }
        *v637 = v633;
      }
      v633 += 32;
      v635 -= 32;
    }
    while (v635);
  }
  v484 = *(_QWORD *)(v482 + 728);
  if (v484)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v484 + 24))(v484, v480);
  v485 = *v476 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v480 = v485 | *(_QWORD *)v480 & 7;
  *(_QWORD *)(v480 + 8) = v476;
  *(_QWORD *)(v485 + 8) = v480;
  *v476 = *v476 & 7 | v480;
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0x1000000;
  DWORD1(v711) = v700;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v480, v478, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v480, v478, (const llvm::MachineOperand *)&v711);
  *((_QWORD *)&v711 + 1) = 0;
  v712 = 0uLL;
  LODWORD(v711) = 0;
  DWORD1(v711) = v700;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v480, v478, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v480, v478, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v480, v478, (const llvm::MachineOperand *)&v711);
  LODWORD(v711) = 1;
  *((_QWORD *)&v711 + 1) = 0;
  *(_QWORD *)&v712 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v480, v478, (const llvm::MachineOperand *)&v711);
  v711 = 0u;
  v712 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v480, v478, (const llvm::MachineOperand *)&v711);
  if (v710)
    llvm::MetadataTracking::untrack((uint64_t)&v710, v710);
}

void sub_1C47830BC(uint64_t a1, unint64_t *a2, llvm::SmallPtrSetImplBase *a3, _BYTE *a4)
{
  unint64_t *v7;
  uint64_t *v8;
  _BOOL4 v9;
  unsigned __int8 *v10;
  llvm::BasicBlock *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t *v30;
  uint64_t v31;
  llvm::MachineFunction *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  llvm::MachineFunction *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  llvm::MachineFunction *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  llvm::MachineFunction *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  llvm::MachineFunction *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  llvm::MachineFunction *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  llvm::MachineFunction *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  llvm::MachineFunction *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  llvm::MachineFunction *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  llvm::MachineFunction *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  llvm::MachineFunction *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  llvm::MachineFunction *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  llvm::MachineFunction *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  llvm::MachineFunction *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  llvm::MachineFunction *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t *v187;
  uint64_t v188;
  llvm::MachineFunction *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  llvm::MachineFunction *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  llvm::MachineFunction *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  unint64_t *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t v352;
  _BOOL4 v353;
  unint64_t *v354;
  unint64_t v355;
  int v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t *v359;
  uint64_t v360;
  unsigned __int8 *v361;
  unsigned __int8 *v362;
  __int128 v363;
  __int128 v364;

  v7 = (unint64_t *)a2[3];
  v8 = (uint64_t *)v7[4];
  if (*a4)
    v9 = v7 != (unint64_t *)v8[41];
  else
    v9 = 1;
  v353 = v9;
  v357 = a2[4];
  v356 = *(_DWORD *)(*(_QWORD *)(a1 + 256) + 8);
  *a4 = 0;
  v10 = (unsigned __int8 *)a2[7];
  v361 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v361, v10, 2);
  v11 = (llvm::BasicBlock *)v7[2];
  v12 = v8[39];
  if (v12)
    v8[39] = *(_QWORD *)v12;
  else
    v12 = sub_1C484358C((uint64_t)(v8 + 16), 232, 3);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = v11;
  *(_DWORD *)(v12 + 24) = -1;
  *(_QWORD *)(v12 + 48) = (v12 + 48) | 4;
  *(_QWORD *)(v12 + 56) = v12 + 48;
  v358 = v12 + 48;
  *(_BYTE *)(v12 + 144) = 0;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 121) = 0u;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 168) = 0;
  *(_QWORD *)(v12 + 152) = 0;
  *(_BYTE *)(v12 + 176) = 0;
  *(_DWORD *)(v12 + 187) = 0;
  *(_QWORD *)(v12 + 180) = 0;
  *(_QWORD *)(v12 + 192) = 0;
  *(_DWORD *)(v12 + 199) = 0;
  *(_QWORD *)(v12 + 216) = 0;
  *(_QWORD *)(v12 + 224) = 0;
  *(_QWORD *)(v12 + 208) = 0;
  *(_QWORD *)(v12 + 32) = v8;
  *(_QWORD *)(v12 + 40) = v12;
  if (v11)
  {
    *(_QWORD *)(v12 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v11);
    *(_QWORD *)(v12 + 144) = v13;
  }
  v14 = v8[39];
  if (v14)
    v8[39] = *(_QWORD *)v14;
  else
    v14 = sub_1C484358C((uint64_t)(v8 + 16), 232, 3);
  *(_QWORD *)v14 = 0;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 24) = -1;
  *(_QWORD *)(v14 + 48) = (v14 + 48) | 4;
  *(_QWORD *)(v14 + 56) = v14 + 48;
  v354 = (unint64_t *)(v14 + 48);
  *(_BYTE *)(v14 + 144) = 0;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 121) = 0u;
  *(_QWORD *)(v14 + 160) = 0;
  *(_QWORD *)(v14 + 168) = 0;
  *(_QWORD *)(v14 + 152) = 0;
  *(_BYTE *)(v14 + 176) = 0;
  *(_DWORD *)(v14 + 187) = 0;
  *(_QWORD *)(v14 + 180) = 0;
  *(_QWORD *)(v14 + 192) = 0;
  *(_DWORD *)(v14 + 199) = 0;
  *(_QWORD *)(v14 + 216) = 0;
  *(_QWORD *)(v14 + 224) = 0;
  *(_QWORD *)(v14 + 208) = 0;
  *(_QWORD *)(v14 + 32) = v8;
  *(_QWORD *)(v14 + 40) = v14;
  if (v11)
  {
    *(_QWORD *)(v14 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v11);
    *(_QWORD *)(v14 + 144) = v15;
  }
  v16 = v8[39];
  if (v16)
    v8[39] = *(_QWORD *)v16;
  else
    v16 = sub_1C484358C((uint64_t)(v8 + 16), 232, 3);
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 16) = v11;
  *(_DWORD *)(v16 + 24) = -1;
  *(_QWORD *)(v16 + 48) = (v16 + 48) | 4;
  *(_QWORD *)(v16 + 56) = v16 + 48;
  v355 = v16 + 48;
  *(_BYTE *)(v16 + 144) = 0;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 112) = 0u;
  *(_OWORD *)(v16 + 121) = 0u;
  *(_QWORD *)(v16 + 160) = 0;
  *(_QWORD *)(v16 + 168) = 0;
  *(_QWORD *)(v16 + 152) = 0;
  *(_BYTE *)(v16 + 176) = 0;
  *(_DWORD *)(v16 + 187) = 0;
  *(_QWORD *)(v16 + 180) = 0;
  *(_QWORD *)(v16 + 192) = 0;
  *(_DWORD *)(v16 + 199) = 0;
  *(_QWORD *)(v16 + 216) = 0;
  *(_QWORD *)(v16 + 224) = 0;
  *(_QWORD *)(v16 + 208) = 0;
  *(_QWORD *)(v16 + 32) = v8;
  *(_QWORD *)(v16 + 40) = v16;
  if (v11)
  {
    *(_QWORD *)(v16 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v11);
    *(_QWORD *)(v16 + 144) = v17;
  }
  v18 = v8[39];
  if (v18)
    v8[39] = *(_QWORD *)v18;
  else
    v18 = sub_1C484358C((uint64_t)(v8 + 16), 232, 3);
  v359 = a2;
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = v11;
  *(_DWORD *)(v18 + 24) = -1;
  *(_QWORD *)(v18 + 48) = (v18 + 48) | 4;
  *(_QWORD *)(v18 + 56) = v18 + 48;
  *(_BYTE *)(v18 + 144) = 0;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 121) = 0u;
  *(_QWORD *)(v18 + 160) = 0;
  *(_QWORD *)(v18 + 168) = 0;
  *(_QWORD *)(v18 + 152) = 0;
  *(_BYTE *)(v18 + 176) = 0;
  *(_DWORD *)(v18 + 187) = 0;
  *(_QWORD *)(v18 + 180) = 0;
  *(_QWORD *)(v18 + 192) = 0;
  *(_DWORD *)(v18 + 199) = 0;
  *(_QWORD *)(v18 + 216) = 0;
  *(_QWORD *)(v18 + 224) = 0;
  *(_QWORD *)(v18 + 208) = 0;
  *(_QWORD *)(v18 + 32) = v8;
  *(_QWORD *)(v18 + 40) = v18;
  if (v11)
  {
    *(_QWORD *)(v18 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v11);
    *(_QWORD *)(v18 + 144) = v19;
  }
  sub_1C4774094(a3, v12);
  sub_1C4774094(a3, v16);
  sub_1C4774094(a3, v14);
  v20 = (unint64_t *)v7[1];
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v8 + 40), v12);
  v21 = *v20;
  *(_QWORD *)v12 = *v20;
  *(_QWORD *)(v12 + 8) = v20;
  *(_QWORD *)(v21 + 8) = v12;
  *v20 = v12;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v8 + 40), v14);
  v22 = *v20;
  *(_QWORD *)v14 = *v20;
  *(_QWORD *)(v14 + 8) = v20;
  *(_QWORD *)(v22 + 8) = v14;
  *v20 = v14;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v8 + 40), v16);
  v23 = *v20;
  *(_QWORD *)v16 = *v20;
  *(_QWORD *)(v16 + 8) = v20;
  *(_QWORD *)(v23 + 8) = v16;
  *v20 = v16;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)(v8 + 40), v18);
  v24 = *v20;
  *(_QWORD *)v18 = *v20;
  *(_QWORD *)(v18 + 8) = v20;
  *(_QWORD *)(v24 + 8) = v18;
  *v20 = v18;
  v25 = *(unint64_t **)(v18 + 56);
  if (!a2)
  {
    v26 = 0;
LABEL_27:
    while ((*((_WORD *)v26 + 22) & 8) != 0)
      v26 = (unint64_t *)v26[1];
    goto LABEL_28;
  }
  v26 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
    goto LABEL_27;
LABEL_28:
  v27 = (unint64_t *)v26[1];
  v28 = v7 + 6;
  if (v27 != v7 + 6 && v25 != v28)
  {
    if ((unint64_t *)v18 != v7)
    {
      v335 = *(_QWORD *)(v18 + 40);
      v336 = v27;
      do
      {
        v336[3] = v335;
        v336 = (unint64_t *)v336[1];
      }
      while (v336 != v28);
    }
    sub_1C4785D30(v25, v27, v7 + 6);
  }
  llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v18, (llvm::MachineBasicBlock *)v7);
  if (v28 != a2)
  {
    v30 = *(unint64_t **)(v14 + 56);
    if (v30 != v28)
    {
      if ((unint64_t *)v14 != v7)
      {
        v337 = *(_QWORD *)(v14 + 40);
        v338 = a2;
        do
        {
          v338[3] = v337;
          v338 = (unint64_t *)v338[1];
        }
        while (v338 != v28);
      }
      sub_1C4785D30(v30, a2, v7 + 6);
    }
  }
  llvm::MachineBasicBlock::addSuccessor(v7, (_QWORD *)v12, -1);
  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v12, (_QWORD *)v12, -1);
  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v12, (_QWORD *)v14, -1);
  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v14, (_QWORD *)v16, -1);
  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v16, (_QWORD *)v16, -1);
  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v16, (_QWORD *)v18, -1);
  v360 = a1;
  v31 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8);
  v32 = (llvm::MachineFunction *)v7[4];
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v33 = v31 + 570000;
  v34 = *((_QWORD *)v32 + 28);
  if (v34)
    *((_QWORD *)v32 + 28) = *(_QWORD *)v34;
  else
    v34 = sub_1C484358C((uint64_t)v32 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v34, v32, v33, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v35 = v7[5];
  *(_QWORD *)(v34 + 24) = v35;
  v36 = *(_QWORD *)(v35 + 32);
  v37 = *(unsigned int *)(v34 + 40);
  if ((_DWORD)v37)
  {
    v216 = *(_QWORD *)(v34 + 32);
    v217 = *(_QWORD *)(v36 + 40);
    v218 = 32 * v37;
    do
    {
      if (!*(_BYTE *)v216)
      {
        v219 = *(unsigned int *)(v216 + 4);
        if ((int)v219 >= 0)
          v220 = (uint64_t *)(*(_QWORD *)(v217 + 272) + 8 * v219);
        else
          v220 = (uint64_t *)(*(_QWORD *)(v217 + 24) + 16 * (v219 & 0x7FFFFFFF) + 8);
        v221 = *v220;
        if (*v220)
        {
          v222 = *(_QWORD *)(v221 + 16);
          *(_QWORD *)(v221 + 16) = v216;
          *(_QWORD *)(v216 + 16) = v222;
          if ((*(_BYTE *)(v216 + 3) & 1) != 0)
          {
            *(_QWORD *)(v216 + 24) = v221;
          }
          else
          {
            *(_QWORD *)(v216 + 24) = 0;
            v220 = (uint64_t *)(v222 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v216 + 16) = v216;
          *(_QWORD *)(v216 + 24) = 0;
        }
        *v220 = v216;
      }
      v216 += 32;
      v218 -= 32;
    }
    while (v218);
  }
  v38 = *(_QWORD *)(v36 + 728);
  if (v38)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v38 + 24))(v38, v34);
  v39 = *v28 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v34 = v39 | *(_QWORD *)v34 & 7;
  *(_QWORD *)(v34 + 8) = v28;
  *(_QWORD *)(v39 + 8) = v34;
  *v28 = *v28 & 7 | v34;
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v363);
  v363 = 0u;
  v364 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v363);
  v40 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  if (v353)
  {
    v41 = (llvm::MachineFunction *)v7[4];
    v362 = v361;
    if (v361)
      llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
    v42 = v40 + 35232;
    v43 = *((_QWORD *)v41 + 28);
    if (v43)
      *((_QWORD *)v41 + 28) = *(_QWORD *)v43;
    else
      v43 = sub_1C484358C((uint64_t)v41 + 128, 72, 3);
    *(_QWORD *)&v363 = v362;
    if (v362)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
      v362 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v43, v41, v42, (unsigned __int8 **)&v363, 0);
    if ((_QWORD)v363)
      llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
    if (v362)
      llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
    v45 = v7[5];
    *(_QWORD *)(v43 + 24) = v45;
    v46 = *(_QWORD *)(v45 + 32);
    v47 = *(unsigned int *)(v43 + 40);
    if ((_DWORD)v47)
    {
      v339 = *(_QWORD *)(v43 + 32);
      v340 = *(_QWORD *)(v46 + 40);
      v341 = 32 * v47;
      do
      {
        if (!*(_BYTE *)v339)
        {
          v342 = *(unsigned int *)(v339 + 4);
          if ((int)v342 >= 0)
            v343 = (uint64_t *)(*(_QWORD *)(v340 + 272) + 8 * v342);
          else
            v343 = (uint64_t *)(*(_QWORD *)(v340 + 24) + 16 * (v342 & 0x7FFFFFFF) + 8);
          v344 = *v343;
          if (*v343)
          {
            v345 = *(_QWORD *)(v344 + 16);
            *(_QWORD *)(v344 + 16) = v339;
            *(_QWORD *)(v339 + 16) = v345;
            if ((*(_BYTE *)(v339 + 3) & 1) != 0)
            {
              *(_QWORD *)(v339 + 24) = v344;
            }
            else
            {
              *(_QWORD *)(v339 + 24) = 0;
              v343 = (uint64_t *)(v345 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v339 + 16) = v339;
            *(_QWORD *)(v339 + 24) = 0;
          }
          *v343 = v339;
        }
        v339 += 32;
        v341 -= 32;
      }
      while (v341);
    }
    v48 = *(_QWORD *)(v46 + 728);
    if (v48)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v48 + 24))(v48, v43);
    v49 = *v28 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v43 = v49 | *(_QWORD *)v43 & 7;
    *(_QWORD *)(v43 + 8) = v28;
    *(_QWORD *)(v49 + 8) = v43;
    *v28 = *v28 & 7 | v43;
    *((_QWORD *)&v363 + 1) = 0;
    v364 = 0uLL;
    LODWORD(v363) = 0x1000000;
    DWORD1(v363) = v356;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v43, v41, (const llvm::MachineOperand *)&v363);
    LODWORD(v363) = 1;
    *((_QWORD *)&v363 + 1) = 0;
    *(_QWORD *)&v364 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v43, v41, (const llvm::MachineOperand *)&v363);
    *((_QWORD *)&v363 + 1) = 0;
    v364 = 0uLL;
    LODWORD(v363) = 0;
    DWORD1(v363) = v356;
  }
  else
  {
    v41 = (llvm::MachineFunction *)v7[4];
    v362 = v361;
    if (v361)
      llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
    v44 = v40 + 35424;
    v43 = *((_QWORD *)v41 + 28);
    if (v43)
      *((_QWORD *)v41 + 28) = *(_QWORD *)v43;
    else
      v43 = sub_1C484358C((uint64_t)v41 + 128, 72, 3);
    *(_QWORD *)&v363 = v362;
    if (v362)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
      v362 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v43, v41, v44, (unsigned __int8 **)&v363, 0);
    if ((_QWORD)v363)
      llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
    if (v362)
      llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
    v50 = v7[5];
    *(_QWORD *)(v43 + 24) = v50;
    v51 = *(_QWORD *)(v50 + 32);
    v52 = *(unsigned int *)(v43 + 40);
    if ((_DWORD)v52)
    {
      v346 = *(_QWORD *)(v43 + 32);
      v347 = *(_QWORD *)(v51 + 40);
      v348 = 32 * v52;
      do
      {
        if (!*(_BYTE *)v346)
        {
          v349 = *(unsigned int *)(v346 + 4);
          if ((int)v349 >= 0)
            v350 = (uint64_t *)(*(_QWORD *)(v347 + 272) + 8 * v349);
          else
            v350 = (uint64_t *)(*(_QWORD *)(v347 + 24) + 16 * (v349 & 0x7FFFFFFF) + 8);
          v351 = *v350;
          if (*v350)
          {
            v352 = *(_QWORD *)(v351 + 16);
            *(_QWORD *)(v351 + 16) = v346;
            *(_QWORD *)(v346 + 16) = v352;
            if ((*(_BYTE *)(v346 + 3) & 1) != 0)
            {
              *(_QWORD *)(v346 + 24) = v351;
            }
            else
            {
              *(_QWORD *)(v346 + 24) = 0;
              v350 = (uint64_t *)(v352 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v346 + 16) = v346;
            *(_QWORD *)(v346 + 24) = 0;
          }
          *v350 = v346;
        }
        v346 += 32;
        v348 -= 32;
      }
      while (v348);
    }
    v53 = *(_QWORD *)(v51 + 728);
    if (v53)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v53 + 24))(v53, v43);
    v54 = *v28 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v43 = v54 | *(_QWORD *)v43 & 7;
    *(_QWORD *)(v43 + 8) = v28;
    *(_QWORD *)(v54 + 8) = v43;
    *v28 = *v28 & 7 | v43;
    *((_QWORD *)&v363 + 1) = 0;
    v364 = 0uLL;
    LODWORD(v363) = 0x1000000;
    DWORD1(v363) = v356;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v43, v41, (const llvm::MachineOperand *)&v363);
    LODWORD(v363) = 1;
    *((_QWORD *)&v363 + 1) = 0;
    *(_QWORD *)&v364 = 0;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v43, v41, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v43, v41, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v43, v41, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v43, v41, (const llvm::MachineOperand *)&v363);
  v363 = 0u;
  v364 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v43, v41, (const llvm::MachineOperand *)&v363);
  v55 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v56 = *(llvm::MachineFunction **)(v12 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v57 = v55 + 239664;
  v58 = *((_QWORD *)v56 + 28);
  if (v58)
    *((_QWORD *)v56 + 28) = *(_QWORD *)v58;
  else
    v58 = sub_1C484358C((uint64_t)v56 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v58, v56, v57, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v59 = *(_QWORD *)(v12 + 40);
  *(_QWORD *)(v58 + 24) = v59;
  v60 = *(_QWORD *)(v59 + 32);
  v61 = *(unsigned int *)(v58 + 40);
  if ((_DWORD)v61)
  {
    v223 = *(_QWORD *)(v58 + 32);
    v224 = *(_QWORD *)(v60 + 40);
    v225 = 32 * v61;
    do
    {
      if (!*(_BYTE *)v223)
      {
        v226 = *(unsigned int *)(v223 + 4);
        if ((int)v226 >= 0)
          v227 = (uint64_t *)(*(_QWORD *)(v224 + 272) + 8 * v226);
        else
          v227 = (uint64_t *)(*(_QWORD *)(v224 + 24) + 16 * (v226 & 0x7FFFFFFF) + 8);
        v228 = *v227;
        if (*v227)
        {
          v229 = *(_QWORD *)(v228 + 16);
          *(_QWORD *)(v228 + 16) = v223;
          *(_QWORD *)(v223 + 16) = v229;
          if ((*(_BYTE *)(v223 + 3) & 1) != 0)
          {
            *(_QWORD *)(v223 + 24) = v228;
          }
          else
          {
            *(_QWORD *)(v223 + 24) = 0;
            v227 = (uint64_t *)(v229 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v223 + 16) = v223;
          *(_QWORD *)(v223 + 24) = 0;
        }
        *v227 = v223;
      }
      v223 += 32;
      v225 -= 32;
    }
    while (v225);
  }
  v62 = *(_QWORD *)(v60 + 728);
  if (v62)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v62 + 24))(v62, v58);
  v63 = *(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v58 = v63 | *(_QWORD *)v58 & 7;
  *(_QWORD *)(v58 + 8) = v358;
  *(_QWORD *)(v63 + 8) = v58;
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(v12 + 48) & 7 | v58;
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v56, (const llvm::MachineOperand *)&v363);
  v364 = 0uLL;
  v363 = 0x11400000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v56, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v56, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v56, (const llvm::MachineOperand *)&v363);
  v364 = 0uLL;
  v363 = 0x201000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v56, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v56, (const llvm::MachineOperand *)&v363);
  v363 = 0u;
  v364 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v56, (const llvm::MachineOperand *)&v363);
  v64 = *(_QWORD *)(v360 + 248);
  v65 = *v8;
  LODWORD(v363) = 0;
  v66 = sub_1C4785D88(v64, v65, "IDFSLCMode", &v363);
  v67 = v363;
  v68 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v69 = *(llvm::MachineFunction **)(v12 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v70 = v68 + 139296;
  v71 = *((_QWORD *)v69 + 28);
  if (v71)
    *((_QWORD *)v69 + 28) = *(_QWORD *)v71;
  else
    v71 = sub_1C484358C((uint64_t)v69 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v71, v69, v70, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v72 = *(_QWORD *)(v12 + 40);
  *(_QWORD *)(v71 + 24) = v72;
  v73 = *(_QWORD *)(v72 + 32);
  v74 = *(unsigned int *)(v71 + 40);
  if ((_DWORD)v74)
  {
    v230 = *(_QWORD *)(v71 + 32);
    v231 = *(_QWORD *)(v73 + 40);
    v232 = 32 * v74;
    do
    {
      if (!*(_BYTE *)v230)
      {
        v233 = *(unsigned int *)(v230 + 4);
        if ((int)v233 >= 0)
          v234 = (uint64_t *)(*(_QWORD *)(v231 + 272) + 8 * v233);
        else
          v234 = (uint64_t *)(*(_QWORD *)(v231 + 24) + 16 * (v233 & 0x7FFFFFFF) + 8);
        v235 = *v234;
        if (*v234)
        {
          v236 = *(_QWORD *)(v235 + 16);
          *(_QWORD *)(v235 + 16) = v230;
          *(_QWORD *)(v230 + 16) = v236;
          if ((*(_BYTE *)(v230 + 3) & 1) != 0)
          {
            *(_QWORD *)(v230 + 24) = v235;
          }
          else
          {
            *(_QWORD *)(v230 + 24) = 0;
            v234 = (uint64_t *)(v236 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v230 + 16) = v230;
          *(_QWORD *)(v230 + 24) = 0;
        }
        *v234 = v230;
      }
      v230 += 32;
      v232 -= 32;
    }
    while (v232);
  }
  v75 = *(_QWORD *)(v73 + 728);
  if (v75)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v75 + 24))(v75, v71);
  v76 = *(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v71 = v76 | *(_QWORD *)v71 & 7;
  *(_QWORD *)(v71 + 8) = v358;
  *(_QWORD *)(v76 + 8) = v71;
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(v12 + 48) & 7 | v71;
  v77 = *(_DWORD *)(v357 + 68);
  *((_QWORD *)&v363 + 1) = 0;
  v364 = 0uLL;
  LODWORD(v363) = 0;
  DWORD1(v363) = v77;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v69, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v69, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  if (v66)
    v78 = v67;
  else
    v78 = 0;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = v78;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v69, (const llvm::MachineOperand *)&v363);
  v79 = *(_QWORD *)(v357 + 208);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = v79;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v69, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v69, (const llvm::MachineOperand *)&v363);
  v364 = 0uLL;
  v363 = 0x200000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v69, (const llvm::MachineOperand *)&v363);
  v80 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v81 = *(llvm::MachineFunction **)(v12 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v82 = v80 + 30624;
  v83 = *((_QWORD *)v81 + 28);
  if (v83)
    *((_QWORD *)v81 + 28) = *(_QWORD *)v83;
  else
    v83 = sub_1C484358C((uint64_t)v81 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v83, v81, v82, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v84 = *(_QWORD *)(v12 + 40);
  *(_QWORD *)(v83 + 24) = v84;
  v85 = *(_QWORD *)(v84 + 32);
  v86 = *(unsigned int *)(v83 + 40);
  if ((_DWORD)v86)
  {
    v237 = *(_QWORD *)(v83 + 32);
    v238 = *(_QWORD *)(v85 + 40);
    v239 = 32 * v86;
    do
    {
      if (!*(_BYTE *)v237)
      {
        v240 = *(unsigned int *)(v237 + 4);
        if ((int)v240 >= 0)
          v241 = (uint64_t *)(*(_QWORD *)(v238 + 272) + 8 * v240);
        else
          v241 = (uint64_t *)(*(_QWORD *)(v238 + 24) + 16 * (v240 & 0x7FFFFFFF) + 8);
        v242 = *v241;
        if (*v241)
        {
          v243 = *(_QWORD *)(v242 + 16);
          *(_QWORD *)(v242 + 16) = v237;
          *(_QWORD *)(v237 + 16) = v243;
          if ((*(_BYTE *)(v237 + 3) & 1) != 0)
          {
            *(_QWORD *)(v237 + 24) = v242;
          }
          else
          {
            *(_QWORD *)(v237 + 24) = 0;
            v241 = (uint64_t *)(v243 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v237 + 16) = v237;
          *(_QWORD *)(v237 + 24) = 0;
        }
        *v241 = v237;
      }
      v237 += 32;
      v239 -= 32;
    }
    while (v239);
  }
  v87 = *(_QWORD *)(v85 + 728);
  if (v87)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v87 + 24))(v87, v83);
  v88 = *(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v83 = v88 | *(_QWORD *)v83 & 7;
  *(_QWORD *)(v83 + 8) = v358;
  *(_QWORD *)(v88 + 8) = v83;
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(v12 + 48) & 7 | v83;
  *((_QWORD *)&v363 + 1) = 0;
  v364 = 0uLL;
  LODWORD(v363) = 0x1000000;
  DWORD1(v363) = v356;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v363);
  *((_QWORD *)&v363 + 1) = 0;
  v364 = 0uLL;
  LODWORD(v363) = 0;
  DWORD1(v363) = v356;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v363);
  v363 = 0u;
  v364 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v83, v81, (const llvm::MachineOperand *)&v363);
  v89 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v90 = *(llvm::MachineFunction **)(v12 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v91 = v89 + 18960;
  v92 = *((_QWORD *)v90 + 28);
  if (v92)
    *((_QWORD *)v90 + 28) = *(_QWORD *)v92;
  else
    v92 = sub_1C484358C((uint64_t)v90 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v92, v90, v91, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v93 = *(_QWORD *)(v12 + 40);
  *(_QWORD *)(v92 + 24) = v93;
  v94 = *(_QWORD *)(v93 + 32);
  v95 = *(unsigned int *)(v92 + 40);
  if ((_DWORD)v95)
  {
    v244 = *(_QWORD *)(v92 + 32);
    v245 = *(_QWORD *)(v94 + 40);
    v246 = 32 * v95;
    do
    {
      if (!*(_BYTE *)v244)
      {
        v247 = *(unsigned int *)(v244 + 4);
        if ((int)v247 >= 0)
          v248 = (uint64_t *)(*(_QWORD *)(v245 + 272) + 8 * v247);
        else
          v248 = (uint64_t *)(*(_QWORD *)(v245 + 24) + 16 * (v247 & 0x7FFFFFFF) + 8);
        v249 = *v248;
        if (*v248)
        {
          v250 = *(_QWORD *)(v249 + 16);
          *(_QWORD *)(v249 + 16) = v244;
          *(_QWORD *)(v244 + 16) = v250;
          if ((*(_BYTE *)(v244 + 3) & 1) != 0)
          {
            *(_QWORD *)(v244 + 24) = v249;
          }
          else
          {
            *(_QWORD *)(v244 + 24) = 0;
            v248 = (uint64_t *)(v250 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v244 + 16) = v244;
          *(_QWORD *)(v244 + 24) = 0;
        }
        *v248 = v244;
      }
      v244 += 32;
      v246 -= 32;
    }
    while (v246);
  }
  v96 = *(_QWORD *)(v94 + 728);
  if (v96)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v96 + 24))(v96, v92);
  v97 = *(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v92 = v97 | *(_QWORD *)v92 & 7;
  *(_QWORD *)(v92 + 8) = v358;
  *(_QWORD *)(v97 + 8) = v92;
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(v12 + 48) & 7 | v92;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = v12;
  LODWORD(v363) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v92, v90, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v92, v90, (const llvm::MachineOperand *)&v363);
  v363 = 0u;
  v364 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v92, v90, (const llvm::MachineOperand *)&v363);
  v98 = *(unint64_t **)(v14 + 56);
  v99 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v100 = *(llvm::MachineFunction **)(v14 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v101 = v99 + 28320;
  v102 = *((_QWORD *)v100 + 28);
  if (v102)
    *((_QWORD *)v100 + 28) = *(_QWORD *)v102;
  else
    v102 = sub_1C484358C((uint64_t)v100 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v102, v100, v101, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v103 = *(_QWORD *)(v14 + 40);
  *(_QWORD *)(v102 + 24) = v103;
  v104 = *(_QWORD *)(v103 + 32);
  v105 = *(unsigned int *)(v102 + 40);
  if ((_DWORD)v105)
  {
    v251 = *(_QWORD *)(v102 + 32);
    v252 = *(_QWORD *)(v104 + 40);
    v253 = 32 * v105;
    do
    {
      if (!*(_BYTE *)v251)
      {
        v254 = *(unsigned int *)(v251 + 4);
        if ((int)v254 >= 0)
          v255 = (uint64_t *)(*(_QWORD *)(v252 + 272) + 8 * v254);
        else
          v255 = (uint64_t *)(*(_QWORD *)(v252 + 24) + 16 * (v254 & 0x7FFFFFFF) + 8);
        v256 = *v255;
        if (*v255)
        {
          v257 = *(_QWORD *)(v256 + 16);
          *(_QWORD *)(v256 + 16) = v251;
          *(_QWORD *)(v251 + 16) = v257;
          if ((*(_BYTE *)(v251 + 3) & 1) != 0)
          {
            *(_QWORD *)(v251 + 24) = v256;
          }
          else
          {
            *(_QWORD *)(v251 + 24) = 0;
            v255 = (uint64_t *)(v257 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v251 + 16) = v251;
          *(_QWORD *)(v251 + 24) = 0;
        }
        *v255 = v251;
      }
      v251 += 32;
      v253 -= 32;
    }
    while (v253);
  }
  v106 = *(_QWORD *)(v104 + 728);
  if (v106)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v106 + 24))(v106, v102);
  v107 = *v98 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v102 = v107 | *(_QWORD *)v102 & 7;
  *(_QWORD *)(v102 + 8) = v98;
  *(_QWORD *)(v107 + 8) = v102;
  *v98 = *v98 & 7 | v102;
  *((_QWORD *)&v363 + 1) = 0;
  v364 = 0uLL;
  LODWORD(v363) = 0x1000000;
  DWORD1(v363) = v356;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v102, v100, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v102, v100, (const llvm::MachineOperand *)&v363);
  *((_QWORD *)&v363 + 1) = 0;
  v364 = 0uLL;
  LODWORD(v363) = 0;
  DWORD1(v363) = v356;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v102, v100, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v102, v100, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v102, v100, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v102, v100, (const llvm::MachineOperand *)&v363);
  v363 = 0u;
  v364 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v102, v100, (const llvm::MachineOperand *)&v363);
  v108 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v109 = *(llvm::MachineFunction **)(v14 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v110 = v108 + 644640;
  v111 = *((_QWORD *)v109 + 28);
  if (v111)
    *((_QWORD *)v109 + 28) = *(_QWORD *)v111;
  else
    v111 = sub_1C484358C((uint64_t)v109 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v111, v109, v110, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v112 = *(_QWORD *)(v14 + 40);
  *(_QWORD *)(v111 + 24) = v112;
  v113 = *(_QWORD *)(v112 + 32);
  v114 = *(unsigned int *)(v111 + 40);
  if ((_DWORD)v114)
  {
    v258 = *(_QWORD *)(v111 + 32);
    v259 = *(_QWORD *)(v113 + 40);
    v260 = 32 * v114;
    do
    {
      if (!*(_BYTE *)v258)
      {
        v261 = *(unsigned int *)(v258 + 4);
        if ((int)v261 >= 0)
          v262 = (uint64_t *)(*(_QWORD *)(v259 + 272) + 8 * v261);
        else
          v262 = (uint64_t *)(*(_QWORD *)(v259 + 24) + 16 * (v261 & 0x7FFFFFFF) + 8);
        v263 = *v262;
        if (*v262)
        {
          v264 = *(_QWORD *)(v263 + 16);
          *(_QWORD *)(v263 + 16) = v258;
          *(_QWORD *)(v258 + 16) = v264;
          if ((*(_BYTE *)(v258 + 3) & 1) != 0)
          {
            *(_QWORD *)(v258 + 24) = v263;
          }
          else
          {
            *(_QWORD *)(v258 + 24) = 0;
            v262 = (uint64_t *)(v264 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v258 + 16) = v258;
          *(_QWORD *)(v258 + 24) = 0;
        }
        *v262 = v258;
      }
      v258 += 32;
      v260 -= 32;
    }
    while (v260);
  }
  v115 = *(_QWORD *)(v113 + 728);
  if (v115)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v115 + 24))(v115, v111);
  v116 = *v359 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v111 = v116 | *(_QWORD *)v111 & 7;
  *(_QWORD *)(v111 + 8) = v359;
  *(_QWORD *)(v116 + 8) = v111;
  *v359 = *v359 & 7 | v111;
  v117 = *(_QWORD *)(v357 + 208);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = v117;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v109, (const llvm::MachineOperand *)&v363);
  v118 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v119 = *(_DWORD *)(v357 + 4);
  v120 = *(llvm::MachineFunction **)(v14 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v121 = v118 + 558960;
  v122 = *((_QWORD *)v120 + 28);
  if (v122)
    *((_QWORD *)v120 + 28) = *(_QWORD *)v122;
  else
    v122 = sub_1C484358C((uint64_t)v120 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v122, v120, v121, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v123 = *(_QWORD *)(v14 + 40);
  *(_QWORD *)(v122 + 24) = v123;
  v124 = *(_QWORD *)(v123 + 32);
  v125 = *(unsigned int *)(v122 + 40);
  if ((_DWORD)v125)
  {
    v265 = *(_QWORD *)(v122 + 32);
    v266 = *(_QWORD *)(v124 + 40);
    v267 = 32 * v125;
    do
    {
      if (!*(_BYTE *)v265)
      {
        v268 = *(unsigned int *)(v265 + 4);
        if ((int)v268 >= 0)
          v269 = (uint64_t *)(*(_QWORD *)(v266 + 272) + 8 * v268);
        else
          v269 = (uint64_t *)(*(_QWORD *)(v266 + 24) + 16 * (v268 & 0x7FFFFFFF) + 8);
        v270 = *v269;
        if (*v269)
        {
          v271 = *(_QWORD *)(v270 + 16);
          *(_QWORD *)(v270 + 16) = v265;
          *(_QWORD *)(v265 + 16) = v271;
          if ((*(_BYTE *)(v265 + 3) & 1) != 0)
          {
            *(_QWORD *)(v265 + 24) = v270;
          }
          else
          {
            *(_QWORD *)(v265 + 24) = 0;
            v269 = (uint64_t *)(v271 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v265 + 16) = v265;
          *(_QWORD *)(v265 + 24) = 0;
        }
        *v269 = v265;
      }
      v265 += 32;
      v267 -= 32;
    }
    while (v267);
  }
  v126 = *(_QWORD *)(v124 + 728);
  if (v126)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v126 + 24))(v126, v122);
  v127 = *v359 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v122 = v127 | *(_QWORD *)v122 & 7;
  *(_QWORD *)(v122 + 8) = v359;
  *(_QWORD *)(v127 + 8) = v122;
  *v359 = *v359 & 7 | v122;
  *((_QWORD *)&v363 + 1) = 0;
  v364 = 0uLL;
  LODWORD(v363) = 0x1000000;
  DWORD1(v363) = v119;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v122, v120, (const llvm::MachineOperand *)&v363);
  v128 = *(_DWORD *)(v357 + 36);
  *((_QWORD *)&v363 + 1) = 0;
  v364 = 0uLL;
  LODWORD(v363) = 0;
  DWORD1(v363) = v128;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v122, v120, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v122, v120, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v122, v120, (const llvm::MachineOperand *)&v363);
  v129 = *(_QWORD *)(v357 + 208);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = v129;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v122, v120, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v122, v120, (const llvm::MachineOperand *)&v363);
  v363 = 0u;
  v364 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v122, v120, (const llvm::MachineOperand *)&v363);
  v130 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v131 = *(llvm::MachineFunction **)(v14 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v132 = v130 + 644640;
  v133 = *((_QWORD *)v131 + 28);
  if (v133)
    *((_QWORD *)v131 + 28) = *(_QWORD *)v133;
  else
    v133 = sub_1C484358C((uint64_t)v131 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v133, v131, v132, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v134 = *(_QWORD *)(v14 + 40);
  *(_QWORD *)(v133 + 24) = v134;
  v135 = *(_QWORD *)(v134 + 32);
  v136 = *(unsigned int *)(v133 + 40);
  if ((_DWORD)v136)
  {
    v272 = *(_QWORD *)(v133 + 32);
    v273 = *(_QWORD *)(v135 + 40);
    v274 = 32 * v136;
    do
    {
      if (!*(_BYTE *)v272)
      {
        v275 = *(unsigned int *)(v272 + 4);
        if ((int)v275 >= 0)
          v276 = (uint64_t *)(*(_QWORD *)(v273 + 272) + 8 * v275);
        else
          v276 = (uint64_t *)(*(_QWORD *)(v273 + 24) + 16 * (v275 & 0x7FFFFFFF) + 8);
        v277 = *v276;
        if (*v276)
        {
          v278 = *(_QWORD *)(v277 + 16);
          *(_QWORD *)(v277 + 16) = v272;
          *(_QWORD *)(v272 + 16) = v278;
          if ((*(_BYTE *)(v272 + 3) & 1) != 0)
          {
            *(_QWORD *)(v272 + 24) = v277;
          }
          else
          {
            *(_QWORD *)(v272 + 24) = 0;
            v276 = (uint64_t *)(v278 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v272 + 16) = v272;
          *(_QWORD *)(v272 + 24) = 0;
        }
        *v276 = v272;
      }
      v272 += 32;
      v274 -= 32;
    }
    while (v274);
  }
  v137 = *(_QWORD *)(v135 + 728);
  if (v137)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v137 + 24))(v137, v133);
  v138 = *v359 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v133 = v138 | *(_QWORD *)v133 & 7;
  *(_QWORD *)(v133 + 8) = v359;
  *(_QWORD *)(v138 + 8) = v133;
  *v359 = *v359 & 7 | v133;
  v139 = *(_QWORD *)(v357 + 208);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = v139;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v133, v131, (const llvm::MachineOperand *)&v363);
  *(_DWORD *)(v357 + 32) &= ~0x4000000u;
  v140 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v141 = *(llvm::MachineFunction **)(v14 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v142 = v140 + 35232;
  v143 = *((_QWORD *)v141 + 28);
  if (v143)
    *((_QWORD *)v141 + 28) = *(_QWORD *)v143;
  else
    v143 = sub_1C484358C((uint64_t)v141 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v143, v141, v142, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v144 = *(_QWORD *)(v14 + 40);
  *(_QWORD *)(v143 + 24) = v144;
  v145 = *(_QWORD *)(v144 + 32);
  v146 = *(unsigned int *)(v143 + 40);
  if ((_DWORD)v146)
  {
    v279 = *(_QWORD *)(v143 + 32);
    v280 = *(_QWORD *)(v145 + 40);
    v281 = 32 * v146;
    do
    {
      if (!*(_BYTE *)v279)
      {
        v282 = *(unsigned int *)(v279 + 4);
        if ((int)v282 >= 0)
          v283 = (uint64_t *)(*(_QWORD *)(v280 + 272) + 8 * v282);
        else
          v283 = (uint64_t *)(*(_QWORD *)(v280 + 24) + 16 * (v282 & 0x7FFFFFFF) + 8);
        v284 = *v283;
        if (*v283)
        {
          v285 = *(_QWORD *)(v284 + 16);
          *(_QWORD *)(v284 + 16) = v279;
          *(_QWORD *)(v279 + 16) = v285;
          if ((*(_BYTE *)(v279 + 3) & 1) != 0)
          {
            *(_QWORD *)(v279 + 24) = v284;
          }
          else
          {
            *(_QWORD *)(v279 + 24) = 0;
            v283 = (uint64_t *)(v285 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v279 + 16) = v279;
          *(_QWORD *)(v279 + 24) = 0;
        }
        *v283 = v279;
      }
      v279 += 32;
      v281 -= 32;
    }
    while (v281);
  }
  v147 = *(_QWORD *)(v145 + 728);
  if (v147)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v147 + 24))(v147, v143);
  v148 = *v354 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v143 = v148 | *(_QWORD *)v143 & 7;
  *(_QWORD *)(v143 + 8) = v354;
  *(_QWORD *)(v148 + 8) = v143;
  *v354 = *v354 & 7 | v143;
  *((_QWORD *)&v363 + 1) = 0;
  v364 = 0uLL;
  LODWORD(v363) = 0x1000000;
  DWORD1(v363) = v356;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v143, v141, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v143, v141, (const llvm::MachineOperand *)&v363);
  *((_QWORD *)&v363 + 1) = 0;
  v364 = 0uLL;
  LODWORD(v363) = 0;
  DWORD1(v363) = v356;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v143, v141, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v143, v141, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v143, v141, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v143, v141, (const llvm::MachineOperand *)&v363);
  v363 = 0u;
  v364 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v143, v141, (const llvm::MachineOperand *)&v363);
  v149 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v150 = *(llvm::MachineFunction **)(v16 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v151 = v149 + 239664;
  v152 = *((_QWORD *)v150 + 28);
  if (v152)
    *((_QWORD *)v150 + 28) = *(_QWORD *)v152;
  else
    v152 = sub_1C484358C((uint64_t)v150 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v152, v150, v151, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v153 = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v152 + 24) = v153;
  v154 = *(_QWORD *)(v153 + 32);
  v155 = *(unsigned int *)(v152 + 40);
  if ((_DWORD)v155)
  {
    v286 = *(_QWORD *)(v152 + 32);
    v287 = *(_QWORD *)(v154 + 40);
    v288 = 32 * v155;
    do
    {
      if (!*(_BYTE *)v286)
      {
        v289 = *(unsigned int *)(v286 + 4);
        if ((int)v289 >= 0)
          v290 = (uint64_t *)(*(_QWORD *)(v287 + 272) + 8 * v289);
        else
          v290 = (uint64_t *)(*(_QWORD *)(v287 + 24) + 16 * (v289 & 0x7FFFFFFF) + 8);
        v291 = *v290;
        if (*v290)
        {
          v292 = *(_QWORD *)(v291 + 16);
          *(_QWORD *)(v291 + 16) = v286;
          *(_QWORD *)(v286 + 16) = v292;
          if ((*(_BYTE *)(v286 + 3) & 1) != 0)
          {
            *(_QWORD *)(v286 + 24) = v291;
          }
          else
          {
            *(_QWORD *)(v286 + 24) = 0;
            v290 = (uint64_t *)(v292 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v286 + 16) = v286;
          *(_QWORD *)(v286 + 24) = 0;
        }
        *v290 = v286;
      }
      v286 += 32;
      v288 -= 32;
    }
    while (v288);
  }
  v156 = *(_QWORD *)(v154 + 728);
  if (v156)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v156 + 24))(v156, v152);
  v157 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v152 = v157 | *(_QWORD *)v152 & 7;
  *(_QWORD *)(v152 + 8) = v355;
  *(_QWORD *)(v157 + 8) = v152;
  *(_QWORD *)(v16 + 48) = *(_QWORD *)(v16 + 48) & 7 | v152;
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v152, v150, (const llvm::MachineOperand *)&v363);
  v364 = 0uLL;
  v363 = 0x11400000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v152, v150, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v152, v150, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v152, v150, (const llvm::MachineOperand *)&v363);
  v364 = 0uLL;
  v363 = 0x201000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v152, v150, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v152, v150, (const llvm::MachineOperand *)&v363);
  v363 = 0u;
  v364 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v152, v150, (const llvm::MachineOperand *)&v363);
  v158 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v159 = *(llvm::MachineFunction **)(v16 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v160 = v158 + 139296;
  v161 = *((_QWORD *)v159 + 28);
  if (v161)
    *((_QWORD *)v159 + 28) = *(_QWORD *)v161;
  else
    v161 = sub_1C484358C((uint64_t)v159 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v161, v159, v160, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v162 = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v161 + 24) = v162;
  v163 = *(_QWORD *)(v162 + 32);
  v164 = *(unsigned int *)(v161 + 40);
  if ((_DWORD)v164)
  {
    v293 = *(_QWORD *)(v161 + 32);
    v294 = *(_QWORD *)(v163 + 40);
    v295 = 32 * v164;
    do
    {
      if (!*(_BYTE *)v293)
      {
        v296 = *(unsigned int *)(v293 + 4);
        if ((int)v296 >= 0)
          v297 = (uint64_t *)(*(_QWORD *)(v294 + 272) + 8 * v296);
        else
          v297 = (uint64_t *)(*(_QWORD *)(v294 + 24) + 16 * (v296 & 0x7FFFFFFF) + 8);
        v298 = *v297;
        if (*v297)
        {
          v299 = *(_QWORD *)(v298 + 16);
          *(_QWORD *)(v298 + 16) = v293;
          *(_QWORD *)(v293 + 16) = v299;
          if ((*(_BYTE *)(v293 + 3) & 1) != 0)
          {
            *(_QWORD *)(v293 + 24) = v298;
          }
          else
          {
            *(_QWORD *)(v293 + 24) = 0;
            v297 = (uint64_t *)(v299 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v293 + 16) = v293;
          *(_QWORD *)(v293 + 24) = 0;
        }
        *v297 = v293;
      }
      v293 += 32;
      v295 -= 32;
    }
    while (v295);
  }
  v165 = *(_QWORD *)(v163 + 728);
  if (v165)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v165 + 24))(v165, v161);
  v166 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v161 = v166 | *(_QWORD *)v161 & 7;
  *(_QWORD *)(v161 + 8) = v355;
  *(_QWORD *)(v166 + 8) = v161;
  *(_QWORD *)(v16 + 48) = *(_QWORD *)(v16 + 48) & 7 | v161;
  v167 = *(_DWORD *)(v357 + 68);
  *((_QWORD *)&v363 + 1) = 0;
  v364 = 0uLL;
  LODWORD(v363) = 0;
  DWORD1(v363) = v167;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = v78;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v363);
  v168 = *(_QWORD *)(v357 + 208);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = v168;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v363);
  v364 = 0uLL;
  v363 = 0x200000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v159, (const llvm::MachineOperand *)&v363);
  v169 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v170 = *(llvm::MachineFunction **)(v16 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v171 = v169 + 30624;
  v172 = *((_QWORD *)v170 + 28);
  if (v172)
    *((_QWORD *)v170 + 28) = *(_QWORD *)v172;
  else
    v172 = sub_1C484358C((uint64_t)v170 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v172, v170, v171, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v173 = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v172 + 24) = v173;
  v174 = *(_QWORD *)(v173 + 32);
  v175 = *(unsigned int *)(v172 + 40);
  if ((_DWORD)v175)
  {
    v300 = *(_QWORD *)(v172 + 32);
    v301 = *(_QWORD *)(v174 + 40);
    v302 = 32 * v175;
    do
    {
      if (!*(_BYTE *)v300)
      {
        v303 = *(unsigned int *)(v300 + 4);
        if ((int)v303 >= 0)
          v304 = (uint64_t *)(*(_QWORD *)(v301 + 272) + 8 * v303);
        else
          v304 = (uint64_t *)(*(_QWORD *)(v301 + 24) + 16 * (v303 & 0x7FFFFFFF) + 8);
        v305 = *v304;
        if (*v304)
        {
          v306 = *(_QWORD *)(v305 + 16);
          *(_QWORD *)(v305 + 16) = v300;
          *(_QWORD *)(v300 + 16) = v306;
          if ((*(_BYTE *)(v300 + 3) & 1) != 0)
          {
            *(_QWORD *)(v300 + 24) = v305;
          }
          else
          {
            *(_QWORD *)(v300 + 24) = 0;
            v304 = (uint64_t *)(v306 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v300 + 16) = v300;
          *(_QWORD *)(v300 + 24) = 0;
        }
        *v304 = v300;
      }
      v300 += 32;
      v302 -= 32;
    }
    while (v302);
  }
  v176 = *(_QWORD *)(v174 + 728);
  if (v176)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v176 + 24))(v176, v172);
  v177 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v172 = v177 | *(_QWORD *)v172 & 7;
  *(_QWORD *)(v172 + 8) = v355;
  *(_QWORD *)(v177 + 8) = v172;
  *(_QWORD *)(v16 + 48) = *(_QWORD *)(v16 + 48) & 7 | v172;
  *((_QWORD *)&v363 + 1) = 0;
  v364 = 0uLL;
  LODWORD(v363) = 0x1000000;
  DWORD1(v363) = v356;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v172, v170, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v172, v170, (const llvm::MachineOperand *)&v363);
  *((_QWORD *)&v363 + 1) = 0;
  v364 = 0uLL;
  LODWORD(v363) = 0;
  DWORD1(v363) = v356;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v172, v170, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v172, v170, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v172, v170, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v172, v170, (const llvm::MachineOperand *)&v363);
  v363 = 0u;
  v364 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v172, v170, (const llvm::MachineOperand *)&v363);
  v178 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v179 = *(llvm::MachineFunction **)(v16 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v180 = v178 + 18960;
  v181 = *((_QWORD *)v179 + 28);
  if (v181)
    *((_QWORD *)v179 + 28) = *(_QWORD *)v181;
  else
    v181 = sub_1C484358C((uint64_t)v179 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v181, v179, v180, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v182 = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v181 + 24) = v182;
  v183 = *(_QWORD *)(v182 + 32);
  v184 = *(unsigned int *)(v181 + 40);
  if ((_DWORD)v184)
  {
    v307 = *(_QWORD *)(v181 + 32);
    v308 = *(_QWORD *)(v183 + 40);
    v309 = 32 * v184;
    do
    {
      if (!*(_BYTE *)v307)
      {
        v310 = *(unsigned int *)(v307 + 4);
        if ((int)v310 >= 0)
          v311 = (uint64_t *)(*(_QWORD *)(v308 + 272) + 8 * v310);
        else
          v311 = (uint64_t *)(*(_QWORD *)(v308 + 24) + 16 * (v310 & 0x7FFFFFFF) + 8);
        v312 = *v311;
        if (*v311)
        {
          v313 = *(_QWORD *)(v312 + 16);
          *(_QWORD *)(v312 + 16) = v307;
          *(_QWORD *)(v307 + 16) = v313;
          if ((*(_BYTE *)(v307 + 3) & 1) != 0)
          {
            *(_QWORD *)(v307 + 24) = v312;
          }
          else
          {
            *(_QWORD *)(v307 + 24) = 0;
            v311 = (uint64_t *)(v313 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v307 + 16) = v307;
          *(_QWORD *)(v307 + 24) = 0;
        }
        *v311 = v307;
      }
      v307 += 32;
      v309 -= 32;
    }
    while (v309);
  }
  v185 = *(_QWORD *)(v183 + 728);
  if (v185)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v185 + 24))(v185, v181);
  v186 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v181 = v186 | *(_QWORD *)v181 & 7;
  *(_QWORD *)(v181 + 8) = v355;
  *(_QWORD *)(v186 + 8) = v181;
  *(_QWORD *)(v16 + 48) = *(_QWORD *)(v16 + 48) & 7 | v181;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = v16;
  LODWORD(v363) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v181, v179, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v181, v179, (const llvm::MachineOperand *)&v363);
  v363 = 0u;
  v364 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v181, v179, (const llvm::MachineOperand *)&v363);
  v187 = *(unint64_t **)(v18 + 56);
  v188 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v189 = *(llvm::MachineFunction **)(v18 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v190 = v188 + 28320;
  v191 = *((_QWORD *)v189 + 28);
  if (v191)
    *((_QWORD *)v189 + 28) = *(_QWORD *)v191;
  else
    v191 = sub_1C484358C((uint64_t)v189 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v191, v189, v190, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v192 = *(_QWORD *)(v18 + 40);
  *(_QWORD *)(v191 + 24) = v192;
  v193 = *(_QWORD *)(v192 + 32);
  v194 = *(unsigned int *)(v191 + 40);
  if ((_DWORD)v194)
  {
    v314 = *(_QWORD *)(v191 + 32);
    v315 = *(_QWORD *)(v193 + 40);
    v316 = 32 * v194;
    do
    {
      if (!*(_BYTE *)v314)
      {
        v317 = *(unsigned int *)(v314 + 4);
        if ((int)v317 >= 0)
          v318 = (uint64_t *)(*(_QWORD *)(v315 + 272) + 8 * v317);
        else
          v318 = (uint64_t *)(*(_QWORD *)(v315 + 24) + 16 * (v317 & 0x7FFFFFFF) + 8);
        v319 = *v318;
        if (*v318)
        {
          v320 = *(_QWORD *)(v319 + 16);
          *(_QWORD *)(v319 + 16) = v314;
          *(_QWORD *)(v314 + 16) = v320;
          if ((*(_BYTE *)(v314 + 3) & 1) != 0)
          {
            *(_QWORD *)(v314 + 24) = v319;
          }
          else
          {
            *(_QWORD *)(v314 + 24) = 0;
            v318 = (uint64_t *)(v320 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v314 + 16) = v314;
          *(_QWORD *)(v314 + 24) = 0;
        }
        *v318 = v314;
      }
      v314 += 32;
      v316 -= 32;
    }
    while (v316);
  }
  v195 = *(_QWORD *)(v193 + 728);
  if (v195)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v195 + 24))(v195, v191);
  v196 = *v187 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v191 = v196 | *(_QWORD *)v191 & 7;
  *(_QWORD *)(v191 + 8) = v187;
  *(_QWORD *)(v196 + 8) = v191;
  *v187 = *v187 & 7 | v191;
  *((_QWORD *)&v363 + 1) = 0;
  v364 = 0uLL;
  LODWORD(v363) = 0x1000000;
  DWORD1(v363) = v356;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v189, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v189, (const llvm::MachineOperand *)&v363);
  *((_QWORD *)&v363 + 1) = 0;
  v364 = 0uLL;
  LODWORD(v363) = 0;
  DWORD1(v363) = v356;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v189, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v189, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v189, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v189, (const llvm::MachineOperand *)&v363);
  v363 = 0u;
  v364 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v189, (const llvm::MachineOperand *)&v363);
  v197 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v198 = *(llvm::MachineFunction **)(v18 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v199 = v197 + 644640;
  v200 = *((_QWORD *)v198 + 28);
  if (v200)
    *((_QWORD *)v198 + 28) = *(_QWORD *)v200;
  else
    v200 = sub_1C484358C((uint64_t)v198 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v200, v198, v199, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v201 = *(_QWORD *)(v18 + 40);
  *(_QWORD *)(v200 + 24) = v201;
  v202 = *(_QWORD *)(v201 + 32);
  v203 = *(unsigned int *)(v200 + 40);
  if ((_DWORD)v203)
  {
    v321 = *(_QWORD *)(v200 + 32);
    v322 = *(_QWORD *)(v202 + 40);
    v323 = 32 * v203;
    do
    {
      if (!*(_BYTE *)v321)
      {
        v324 = *(unsigned int *)(v321 + 4);
        if ((int)v324 >= 0)
          v325 = (uint64_t *)(*(_QWORD *)(v322 + 272) + 8 * v324);
        else
          v325 = (uint64_t *)(*(_QWORD *)(v322 + 24) + 16 * (v324 & 0x7FFFFFFF) + 8);
        v326 = *v325;
        if (*v325)
        {
          v327 = *(_QWORD *)(v326 + 16);
          *(_QWORD *)(v326 + 16) = v321;
          *(_QWORD *)(v321 + 16) = v327;
          if ((*(_BYTE *)(v321 + 3) & 1) != 0)
          {
            *(_QWORD *)(v321 + 24) = v326;
          }
          else
          {
            *(_QWORD *)(v321 + 24) = 0;
            v325 = (uint64_t *)(v327 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v321 + 16) = v321;
          *(_QWORD *)(v321 + 24) = 0;
        }
        *v325 = v321;
      }
      v321 += 32;
      v323 -= 32;
    }
    while (v323);
  }
  v204 = *(_QWORD *)(v202 + 728);
  if (v204)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v204 + 24))(v204, v200);
  v205 = *v187 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v200 = v205 | *(_QWORD *)v200 & 7;
  *(_QWORD *)(v200 + 8) = v187;
  *(_QWORD *)(v205 + 8) = v200;
  *v187 = *v187 & 7 | v200;
  v206 = *(_QWORD *)(v357 + 208);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = v206;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v200, v198, (const llvm::MachineOperand *)&v363);
  v207 = *(_QWORD *)(*(_QWORD *)(v360 + 264) + 8);
  v208 = *(llvm::MachineFunction **)(v18 + 32);
  v362 = v361;
  if (v361)
    llvm::MetadataTracking::track((uint64_t)&v362, v361, 2);
  v209 = v207 + 583488;
  v210 = *((_QWORD *)v208 + 28);
  if (v210)
    *((_QWORD *)v208 + 28) = *(_QWORD *)v210;
  else
    v210 = sub_1C484358C((uint64_t)v208 + 128, 72, 3);
  *(_QWORD *)&v363 = v362;
  if (v362)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
    v362 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v210, v208, v209, (unsigned __int8 **)&v363, 0);
  if ((_QWORD)v363)
    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
  if (v362)
    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
  v211 = *(_QWORD *)(v18 + 40);
  *(_QWORD *)(v210 + 24) = v211;
  v212 = *(_QWORD *)(v211 + 32);
  v213 = *(unsigned int *)(v210 + 40);
  if ((_DWORD)v213)
  {
    v328 = *(_QWORD *)(v210 + 32);
    v329 = *(_QWORD *)(v212 + 40);
    v330 = 32 * v213;
    do
    {
      if (!*(_BYTE *)v328)
      {
        v331 = *(unsigned int *)(v328 + 4);
        if ((int)v331 >= 0)
          v332 = (uint64_t *)(*(_QWORD *)(v329 + 272) + 8 * v331);
        else
          v332 = (uint64_t *)(*(_QWORD *)(v329 + 24) + 16 * (v331 & 0x7FFFFFFF) + 8);
        v333 = *v332;
        if (*v332)
        {
          v334 = *(_QWORD *)(v333 + 16);
          *(_QWORD *)(v333 + 16) = v328;
          *(_QWORD *)(v328 + 16) = v334;
          if ((*(_BYTE *)(v328 + 3) & 1) != 0)
          {
            *(_QWORD *)(v328 + 24) = v333;
          }
          else
          {
            *(_QWORD *)(v328 + 24) = 0;
            v332 = (uint64_t *)(v334 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v328 + 16) = v328;
          *(_QWORD *)(v328 + 24) = 0;
        }
        *v332 = v328;
      }
      v328 += 32;
      v330 -= 32;
    }
    while (v330);
  }
  v214 = *(_QWORD *)(v212 + 728);
  if (v214)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v214 + 24))(v214, v210);
  v215 = *v187 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v210 = v215 | *(_QWORD *)v210 & 7;
  *(_QWORD *)(v210 + 8) = v187;
  *(_QWORD *)(v215 + 8) = v210;
  *v187 = *v187 & 7 | v210;
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v210, v208, (const llvm::MachineOperand *)&v363);
  LODWORD(v363) = 1;
  *((_QWORD *)&v363 + 1) = 0;
  *(_QWORD *)&v364 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v210, v208, (const llvm::MachineOperand *)&v363);
  v363 = 0u;
  v364 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v210, v208, (const llvm::MachineOperand *)&v363);
  if (v361)
    llvm::MetadataTracking::untrack((uint64_t)&v361, v361);
}

unint64_t *sub_1C4785D30(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (result != a3 && a2 != a3)
  {
    v3 = *a3;
    v4 = *a3 & 0xFFFFFFFFFFFFFFF8;
    v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v5 + 8) = a3;
    *a3 = v5 | v3 & 7;
    v6 = *result & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v4 + 8) = result;
    *a2 = v6 | *a2 & 7;
    *(_QWORD *)(v6 + 8) = a2;
    *result = v3 & 0xFFFFFFFFFFFFFFF8 | *result & 7;
  }
  return result;
}

uint64_t sub_1C4785D88(int a1, uint64_t a2, char *__s, _DWORD *a4)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int i;
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *j;
  int v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a2 + 112);
  if (__s)
  {
    v7 = strlen(__s);
    if (!v6)
      return 0;
  }
  else
  {
    v7 = 0;
    if (!v6)
      return 0;
  }
  if (!*(_DWORD *)(v6 + 8))
    return 0;
  v8 = *(_QWORD *)(v6 + 40);
  if (!v8)
    return 0;
  v9 = *(_DWORD *)(v8 + 40);
  if (!v9)
    return 0;
  v10 = *(_QWORD *)(v8 + 24);
  v11 = sub_1C5E3DF4C(__s, (uint64_t)&__s[v7]);
  v12 = v9 - 1;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v12;
    v15 = v10 + 24 * (v11 & v12);
    v16 = *(const void **)v15;
    if (*(_QWORD *)v15 == -1)
    {
      if (__s == (char *)-1)
        goto LABEL_19;
      goto LABEL_11;
    }
    if (v16 != (const void *)-2)
      break;
    if (__s == (char *)-2)
      goto LABEL_19;
LABEL_11:
    if (v16 == (const void *)-1)
      return 0;
    v11 = i + v14;
  }
  if (v7 != *(_QWORD *)(v15 + 8) || v7 && memcmp(__s, *(const void **)v15, v7))
    goto LABEL_11;
LABEL_19:
  v17 = *(_QWORD *)(v15 + 16);
  if (v17)
  {
    if (*(_BYTE *)(v17 + 8) == 2)
    {
      v18 = *(unsigned int *)(v17 + 16);
      v28 = v17 + *(unsigned int *)(v17 + 12) + 25;
      v29 = v18;
      v19 = sub_1C5E3D4C0((uint64_t)&v28);
      v20 = v29;
      if (v29)
      {
        v21 = 0;
        for (j = (unsigned __int8 *)v28; ; ++j)
        {
          v23 = *j;
          if ((v23 - 48) >= 0xA)
          {
            if ((v23 - 97) >= 0x1A)
            {
              if ((v23 - 65) > 0x19)
                return 0;
              v24 = -55;
            }
            else
            {
              v24 = -87;
            }
          }
          else
          {
            v24 = -48;
          }
          v25 = v24 + v23;
          if (v25 >= v19)
            break;
          v26 = v21 * v19 + v25;
          if (v26 / v19 < v21)
            break;
          v21 = v26;
          if (!--v20)
          {
            if (HIDWORD(v26))
              return 0;
            *a4 = v26;
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C4785F58(uint64_t result)
{
  uint64_t v1;
  unsigned __int16 *v2;
  uint64_t v3;

  v1 = result;
  v2 = *(unsigned __int16 **)(result + 16);
  v3 = *((_QWORD *)v2 + 2);
  if ((v3 & 0x200) != 0 || (v3 & 0x20) != 0)
  {
    result = sub_1C612B500(*v2, 4);
    *(_QWORD *)(*(_QWORD *)(v1 + 32) + 32 * result + 16) = 1;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(result + 32) + 48) |= 0x800uLL;
  }
  return result;
}

_QWORD *sub_1C4785FB8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E819E3B0;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      return sub_1C47A80D0(a1);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C4786018(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(a2 + 40);
  while (1)
  {
    v5 = *(_QWORD *)(v2 + 24);
    if (*(_QWORD *)(v5 + 40) != v4)
      goto LABEL_14;
    v6 = *(unsigned __int8 *)(v5 + 16);
    if ((v6 - 73) >= 2 && v6 != 90)
      break;
    if ((sub_1C4786018(a1) & 1) != 0)
      return 1;
LABEL_14:
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return 0;
  }
  if (v6 != 84)
    goto LABEL_14;
  v7 = *(_QWORD *)(v5 - 32);
  if (!v7
    || *(_BYTE *)(v7 + 16)
    || *(_QWORD *)(v7 + 24) != *(_QWORD *)(v5 + 72)
    || (*(_BYTE *)(v7 + 33) & 0x20) == 0
    || !sub_1C47860D0(*(_DWORD *)(v7 + 36)))
  {
    goto LABEL_14;
  }
  return 1;
}

BOOL sub_1C47860D0(int a1)
{
  return (a1 - 1282) < 0x190 || (a1 - 2824) <= 0xB;
}

uint64_t sub_1C47860F8(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C4786124 + 4 * byte_1C640E757[a1 - 1839]))();
}

void sub_1C4786124(_DWORD *a1@<X1>, _DWORD *a2@<X2>, _DWORD *a3@<X3>, _DWORD *a4@<X4>, int a5@<W8>)
{
  int v5;

  *a1 = v5;
  *a2 = 2;
  *a3 = 0;
  *a4 = a5;
}

void sub_1C4786328()
{
  JUMPOUT(0x1C4786314);
}

uint64_t sub_1C4786340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t **v10;
  uint64_t v11;
  unsigned int v12;
  llvm::DataLayout *v13;
  uint64_t PointerAlignElem;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t *v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  _DWORD *v38;
  unsigned int v39;
  _DWORD *v40;
  unsigned int v41;

  v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 232) + 4);
  v41 = v6;
  if (v6 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v40, 0, 0);
  else
    v40 = 0;
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + 16);
    if (v7 != 62)
      break;
LABEL_7:
    v9 = *(_DWORD *)(a2 + 20);
    if ((v9 & 0x40000000) != 0)
      v10 = *(uint64_t ***)(a2 - 8);
    else
      v10 = (uint64_t **)(a2 - 32 * (v9 & 0x7FFFFFF));
    v11 = **v10;
    v12 = *(_DWORD *)(v11 + 8);
    if ((v12 & 0xFE) == 0x12)
      v12 = *(_DWORD *)(**(_QWORD **)(v11 + 16) + 8);
    v13 = *(llvm::DataLayout **)(a1 + 88);
    PointerAlignElem = llvm::DataLayout::getPointerAlignElem(v13, v12 >> 8);
    v16 = *(_DWORD *)(PointerAlignElem + 4);
    if (v16 != v6)
    {
      v6 = *(_DWORD *)(PointerAlignElem + 4);
      v39 = v6;
      if (v16 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v38, 0, 0);
      else
        v38 = 0;
      if (v41 >= 0x41 && v40)
        MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
      v40 = v38;
      v41 = v39;
      v13 = *(llvm::DataLayout **)(a1 + 88);
    }
    if (!llvm::GEPOperator::accumulateConstantOffset(a2, v13, (uint64_t)&v40, 0, v15))
      goto LABEL_50;
LABEL_23:
    v17 = *(_DWORD *)(a2 + 20);
    if ((v17 & 0x40000000) != 0)
      v18 = *(uint64_t **)(a2 - 8);
    else
      v18 = (uint64_t *)(a2 - 32 * (v17 & 0x7FFFFFF));
    a2 = *v18;
  }
  if (v7 == 5)
  {
    v8 = *(unsigned __int16 *)(a2 + 18);
    if (v8 - 47 < 3)
      goto LABEL_23;
    if (v8 != 34)
      goto LABEL_28;
    goto LABEL_7;
  }
  if (v7 < 0x1C)
    goto LABEL_31;
  if (v7 - 75 <= 2)
    goto LABEL_23;
  v8 = v7 - 28;
LABEL_28:
  if (v8 == 13)
  {
    v19 = *(_DWORD *)(a2 + 20);
    if ((v19 & 0x40000000) != 0)
      v20 = *(_QWORD **)(a2 - 8);
    else
      v20 = (_QWORD *)(a2 - 32 * (v19 & 0x7FFFFFF));
    v31 = sub_1C4786340(a1, *v20, a3);
    if (v31 != -1)
    {
      v32 = v31;
      v33 = *(_DWORD *)(a2 + 20);
      v34 = (v33 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v33 & 0x7FFFFFF);
      v35 = sub_1C4786340(a1, *(_QWORD *)(v34 + 32), a3);
      if (v35 != -1)
      {
        v36 = &v40;
        if (v41 >= 0x41)
          v36 = v40;
        v24 = (v35 + v32 + *v36);
        goto LABEL_51;
      }
    }
LABEL_50:
    v24 = 0xFFFFFFFFLL;
    goto LABEL_51;
  }
LABEL_31:
  if (v7 <= 3)
  {
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 400))(a3, a2);
    v27 = v26;
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 336))(a3);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 24))(v28, v27);
    v30 = &v40;
    if (v41 >= 0x41)
      v30 = v40;
    v24 = (*v30 + v29 * v25);
  }
  else
  {
    if (v7 != 16)
      goto LABEL_50;
    v21 = (_QWORD *)(a2 + 24);
    if (*(_DWORD *)(a2 + 32) >= 0x41u)
      v21 = (_QWORD *)*v21;
    v22 = *(_DWORD *)v21;
    v23 = &v40;
    if (v41 >= 0x41)
      v23 = v40;
    v24 = (*v23 + v22);
  }
LABEL_51:
  if (v41 >= 0x41 && v40)
    MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
  return v24;
}

BOOL sub_1C478664C(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL8 v16;
  _QWORD *v17;
  int v18;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;

  v27 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 232) + 4);
  if (v27 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v26, 0, 0);
  else
    v26 = 0;
  while (1)
  {
    v9 = *(unsigned __int8 *)(a2 + 16);
    if (v9 == 62)
      goto LABEL_7;
    if (v9 == 5)
    {
      v10 = *(unsigned __int16 *)(a2 + 18);
      if (v10 - 47 < 3)
        goto LABEL_11;
      if (v10 != 34)
        goto LABEL_16;
LABEL_7:
      if (!llvm::GEPOperator::accumulateConstantOffset(a2, *(llvm::DataLayout **)(a1 + 88), (uint64_t)&v26, 0, a5))goto LABEL_39;
      goto LABEL_11;
    }
    if (v9 < 0x1C)
      goto LABEL_19;
    if (v9 - 75 > 2)
      break;
LABEL_11:
    v11 = *(_DWORD *)(a2 + 20);
    if ((v11 & 0x40000000) != 0)
      v12 = *(uint64_t **)(a2 - 8);
    else
      v12 = (uint64_t *)(a2 - 32 * (v11 & 0x7FFFFFF));
    a2 = *v12;
  }
  v10 = v9 - 28;
LABEL_16:
  if (v10 == 13)
  {
    v25 = 0;
    v13 = *(_DWORD *)(a2 + 20);
    if ((v13 & 0x40000000) != 0)
      v14 = *(_QWORD **)(a2 - 8);
    else
      v14 = (_QWORD *)(a2 - 32 * (v13 & 0x7FFFFFF));
    if (sub_1C478664C(a1, *v14, a3, (char *)&v25 + 4))
    {
      v21 = *(_DWORD *)(a2 + 20);
      v22 = (v21 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v21 & 0x7FFFFFF);
      if (sub_1C478664C(a1, *(_QWORD *)(v22 + 32), a3, &v25))
      {
        v23 = &v26;
        if (v27 >= 0x41)
          v23 = v26;
        v20 = v25 + HIDWORD(v25) + *v23;
LABEL_38:
        *a4 = v20;
        v16 = 1;
        goto LABEL_40;
      }
    }
    goto LABEL_39;
  }
LABEL_19:
  if (v9 == 16)
  {
    v17 = (_QWORD *)(a2 + 24);
    if (*(_DWORD *)(a2 + 32) >= 0x41u)
      v17 = (_QWORD *)*v17;
    v18 = *(_DWORD *)v17;
    v19 = &v26;
    if (v27 >= 0x41)
      v19 = v26;
    v20 = *v19 + v18;
    goto LABEL_38;
  }
  if (v9 == 59)
  {
    v15 = &v26;
    if (v27 >= 0x41)
      v15 = v26;
    *a4 = *v15;
    v16 = sub_1C478687C(a1, a2, a3);
  }
  else
  {
LABEL_39:
    v16 = 0;
  }
LABEL_40:
  if (v27 >= 0x41 && v26)
    MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
  return v16;
}

BOOL sub_1C478687C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 32);
  v9 = a2;
  v10 = 0;
  if ((sub_1C47A82D8(v5 + 176, &v9, &v10) & 1) != 0)
    v6 = v10;
  else
    v6 = *(_QWORD *)(v5 + 176) + 16 * *(unsigned int *)(v5 + 192);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 176) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 32) + 192);
  if (v6 != v7)
    *a3 = *(_DWORD *)(v6 + 8);
  return v6 != v7;
}

uint64_t sub_1C4786904(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v6;
  int v7;
  int v8;

  if (a2 && (*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
  {
    v8 = 0;
    result = sub_1C4786904(a1, *(_QWORD *)(a2 + 24), &v8);
    if ((_DWORD)result)
      *a3 = *(_DWORD *)(a2 + 32) * v8;
  }
  else
  {
    v6 = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(a2 + 8))
    {
      if (v6 == 15)
      {
        v7 = 64;
      }
      else if (v6 == 2)
      {
        v7 = 32;
      }
      else
      {
        if (*(_DWORD *)(a2 + 8) != 13)
          return 0;
        v7 = *(_DWORD *)(a2 + 8) >> 8;
      }
    }
    else
    {
      v7 = 16;
    }
    *a3 = v7;
    return 1;
  }
  return result;
}

uint64_t sub_1C47869B8(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t IncompleteVirtualRegister;
  unint64_t v8;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int i;
  unsigned __int8 *ElementAsConstant;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  llvm::MachineFunction *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  llvm::MachineFunction *v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  llvm::MachineFunction *v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t j;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned __int8 *v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  _QWORD v117[3];

  v117[2] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v110 = 0;
  v6 = *(_QWORD *)a2;
  IncompleteVirtualRegister = 0;
  if (!sub_1C4786904((uint64_t)a1, *(_QWORD *)a2, (int *)&v110))
    return IncompleteVirtualRegister;
  v8 = v110;
  if ((int)v110 <= 32)
    return sub_1C47A836C((uint64_t)a1, (unsigned __int8 *)a2);
  v10 = v110 & 0x1F;
  if (a3)
    *a3 = v10;
  if (!v10)
  {
    v115 = v117;
    v116 = 0x400000000;
    if (*(_BYTE *)(a2 + 16) == 15)
    {
      for (i = 0; i < *(_DWORD *)(v6 + 32); ++i)
      {
        ElementAsConstant = (unsigned __int8 *)llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantDataSequential *)a2);
        v18 = sub_1C6126A04((uint64_t)a1, ElementAsConstant);
        if (!v18)
        {
          IncompleteVirtualRegister = 0;
          goto LABEL_60;
        }
        v19 = v18;
        v20 = v116;
        if (v116 >= (unint64_t)HIDWORD(v116))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, (uint64_t)v117, v116 + 1, 4);
          v20 = v116;
        }
        *((_DWORD *)v115 + v20) = v19;
        LODWORD(v116) = v116 + 1;
        v6 = *(_QWORD *)a2;
      }
    }
    else
    {
      v21 = sub_1C47A836C((uint64_t)a1, (unsigned __int8 *)a2);
      IncompleteVirtualRegister = v21;
      if (!(_DWORD)v21)
        goto LABEL_60;
      v22 = (_QWORD *)a1[6];
      v23 = *(_QWORD *)(v22[3] + 16 * (v21 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
      v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v22 + 16) + 176))(*(_QWORD *)(*v22 + 16));
      v25 = *(_DWORD *)(*(_QWORD *)(v24 + 264)
                      + 24
                      * (*(unsigned __int16 *)(*(_QWORD *)v23 + 24)
                       + *(_DWORD *)(v24 + 272) * ((*(_QWORD *)(v24 + 248) - *(_QWORD *)(v24 + 240)) >> 3)));
      if (v25 <= v8)
      {
        v37 = v116;
        v38 = v8 / v25;
        do
        {
          if (v37 >= HIDWORD(v116))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, (uint64_t)v117, v37 + 1, 4);
            v37 = v116;
          }
          *((_DWORD *)v115 + v37) = IncompleteVirtualRegister;
          v37 = v116 + 1;
          LODWORD(v116) = v116 + 1;
          LODWORD(IncompleteVirtualRegister) = IncompleteVirtualRegister + 1;
          --v38;
        }
        while (v38);
      }
    }
    if ((_DWORD)v8 == 48)
    {
      v26 = (unint64_t)&off_1E7F987B8;
    }
    else
    {
      IncompleteVirtualRegister = 0;
      if (v8 > 0x21F || (v8 & 0x1F) != 0)
        goto LABEL_60;
      v26 = (unint64_t)off_1E7F94CC8[(v8 >> 5) + 1];
    }
    v27 = a1[6];
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v27, "", 0);
    *(_QWORD *)(*(_QWORD *)(v27 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v26 & 0xFFFFFFFFFFFFFFFBLL;
    v28 = *(_QWORD *)(v27 + 8);
    if (v28)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
      if ((_DWORD)IncompleteVirtualRegister)
        goto LABEL_32;
    }
    else if ((_DWORD)IncompleteVirtualRegister)
    {
LABEL_32:
      v29 = a1[4];
      v30 = *(_QWORD *)(v29 + 640);
      v31 = *(unint64_t **)(v29 + 648);
      v32 = *(_QWORD *)(a1[12] + 8);
      v33 = *(llvm::MachineFunction **)(v30 + 32);
      v34 = (unsigned __int8 *)a1[9];
      v111 = v34;
      if (v34)
        llvm::MetadataTracking::track((uint64_t)&v111, v34, 2);
      v35 = v32 + 864;
      v36 = *((_QWORD *)v33 + 28);
      if (v36)
        *((_QWORD *)v33 + 28) = *(_QWORD *)v36;
      else
        v36 = sub_1C484358C((uint64_t)v33 + 128, 72, 3);
      *(_QWORD *)&v112 = v111;
      if (v111)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v111, v111, (uint64_t)&v112);
        v111 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v36, v33, v35, (unsigned __int8 **)&v112, 0);
      if ((_QWORD)v112)
        llvm::MetadataTracking::untrack((uint64_t)&v112, (unsigned __int8 *)v112);
      if (v111)
        llvm::MetadataTracking::untrack((uint64_t)&v111, v111);
      v39 = *(_QWORD *)(v30 + 40);
      *(_QWORD *)(v36 + 24) = v39;
      v40 = *(_QWORD *)(v39 + 32);
      v41 = *(unsigned int *)(v36 + 40);
      if ((_DWORD)v41)
      {
        v89 = *(_QWORD *)(v36 + 32);
        v90 = *(_QWORD *)(v40 + 40);
        v91 = 32 * v41;
        do
        {
          if (!*(_BYTE *)v89)
          {
            v92 = *(unsigned int *)(v89 + 4);
            if ((int)v92 >= 0)
              v93 = (uint64_t *)(*(_QWORD *)(v90 + 272) + 8 * v92);
            else
              v93 = (uint64_t *)(*(_QWORD *)(v90 + 24) + 16 * (v92 & 0x7FFFFFFF) + 8);
            v94 = *v93;
            if (*v93)
            {
              v95 = *(_QWORD *)(v94 + 16);
              *(_QWORD *)(v94 + 16) = v89;
              *(_QWORD *)(v89 + 16) = v95;
              if ((*(_BYTE *)(v89 + 3) & 1) != 0)
              {
                *(_QWORD *)(v89 + 24) = v94;
              }
              else
              {
                *(_QWORD *)(v89 + 24) = 0;
                v93 = (uint64_t *)(v95 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v89 + 16) = v89;
              *(_QWORD *)(v89 + 24) = 0;
            }
            *v93 = v89;
          }
          v89 += 32;
          v91 -= 32;
        }
        while (v91);
      }
      v42 = *(_QWORD *)(v40 + 728);
      if (v42)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v42 + 24))(v42, v36);
      v43 = *v31 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v36 = v43 | *(_QWORD *)v36 & 7;
      *(_QWORD *)(v36 + 8) = v31;
      *(_QWORD *)(v43 + 8) = v36;
      *v31 = *v31 & 7 | v36;
      *((_QWORD *)&v112 + 1) = 0;
      v113 = 0;
      v114 = 0;
      LODWORD(v112) = 0x1000000;
      DWORD1(v112) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v112);
      v44 = v116;
      if ((_DWORD)v116)
      {
        v45 = 0;
        v46 = 34;
        do
        {
          v47 = (_QWORD *)a1[6];
          v48 = *(_QWORD *)(v47[3] + 16 * (*((_DWORD *)v115 + v45) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          v49 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v47 + 16) + 176))(*(_QWORD *)(*v47 + 16));
          v50 = *(_DWORD *)(*(_QWORD *)(v49 + 264)
                          + 24
                          * (*(unsigned __int16 *)(*(_QWORD *)v48 + 24)
                           + *(_DWORD *)(v49 + 272)
                           * ((*(_QWORD *)(v49 + 248) - *(_QWORD *)(v49 + 240)) >> 3)));
          if (v50 == 64)
          {
            v53 = *((_DWORD *)v115 + v45);
            *((_QWORD *)&v112 + 1) = 0;
            v113 = 0;
            v114 = 0;
            LODWORD(v112) = 8448;
            DWORD1(v112) = v53;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v112);
            LODWORD(v112) = 1;
            *((_QWORD *)&v112 + 1) = 0;
            v113 = v46 - 1;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v112);
            v54 = *((_DWORD *)v115 + v45);
            *((_QWORD *)&v112 + 1) = 0;
            v113 = 0;
            v114 = 0;
            LODWORD(v112) = 8704;
            DWORD1(v112) = v54;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v112);
            LODWORD(v112) = 1;
            v52 = v46;
          }
          else
          {
            if (v50 == 32)
            {
              v51 = *((_DWORD *)v115 + v45);
              *((_QWORD *)&v112 + 1) = 0;
              LODWORD(v112) = 0;
              DWORD1(v112) = v51;
              v113 = 0;
              v114 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v112);
              v52 = (v45 + 33);
            }
            else
            {
              v55 = *((_DWORD *)v115 + v45);
              *((_QWORD *)&v112 + 1) = 0;
              LODWORD(v112) = 0;
              DWORD1(v112) = v55;
              v113 = 0;
              v114 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v112);
              v52 = v45 + 1;
            }
            LODWORD(v112) = 1;
          }
          *((_QWORD *)&v112 + 1) = 0;
          v113 = v52;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v112);
          ++v45;
          v46 += 2;
        }
        while (v44 != v45);
      }
    }
LABEL_60:
    if (v115 != v117)
      free(v115);
    return IncompleteVirtualRegister;
  }
  if (v10 != 16)
    return 0;
  if ((_DWORD)v8 != 48)
    return 0;
  v11 = sub_1C47A836C((uint64_t)a1, (unsigned __int8 *)a2);
  if (!v11)
    return 0;
  v12 = v11;
  if (!a3)
  {
    v56 = a1[6];
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v56, "", 0);
    *(_QWORD *)(*(_QWORD *)(v56 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F98800;
    v57 = *(_QWORD *)(v56 + 8);
    if (v57)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57);
      if (!(_DWORD)IncompleteVirtualRegister)
        return IncompleteVirtualRegister;
    }
    else if (!(_DWORD)IncompleteVirtualRegister)
    {
      return IncompleteVirtualRegister;
    }
    v58 = a1[4];
    v59 = *(_QWORD *)(v58 + 640);
    v60 = *(unint64_t **)(v58 + 648);
    v61 = *(_QWORD *)(a1[12] + 8);
    v62 = *(llvm::MachineFunction **)(v59 + 32);
    v63 = (void *)a1[9];
    v115 = v63;
    if (v63)
      llvm::MetadataTracking::track((uint64_t)&v115, (unsigned __int8 *)v63, 2);
    v64 = v61 + 864;
    v65 = *((_QWORD *)v62 + 28);
    if (v65)
      *((_QWORD *)v62 + 28) = *(_QWORD *)v65;
    else
      v65 = sub_1C484358C((uint64_t)v62 + 128, 72, 3);
    *(_QWORD *)&v112 = v115;
    if (v115)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v115, (unsigned __int8 *)v115, (uint64_t)&v112);
      v115 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v65, v62, v64, (unsigned __int8 **)&v112, 0);
    if ((_QWORD)v112)
      llvm::MetadataTracking::untrack((uint64_t)&v112, (unsigned __int8 *)v112);
    if (v115)
      llvm::MetadataTracking::untrack((uint64_t)&v115, (unsigned __int8 *)v115);
    v83 = *(_QWORD *)(v59 + 40);
    *(_QWORD *)(v65 + 24) = v83;
    v84 = *(_QWORD *)(v83 + 32);
    v85 = *(unsigned int *)(v65 + 40);
    if ((_DWORD)v85)
    {
      v103 = *(_QWORD *)(v65 + 32);
      v104 = *(_QWORD *)(v84 + 40);
      v105 = 32 * v85;
      do
      {
        if (!*(_BYTE *)v103)
        {
          v106 = *(unsigned int *)(v103 + 4);
          if ((int)v106 >= 0)
            v107 = (uint64_t *)(*(_QWORD *)(v104 + 272) + 8 * v106);
          else
            v107 = (uint64_t *)(*(_QWORD *)(v104 + 24) + 16 * (v106 & 0x7FFFFFFF) + 8);
          v108 = *v107;
          if (*v107)
          {
            v109 = *(_QWORD *)(v108 + 16);
            *(_QWORD *)(v108 + 16) = v103;
            *(_QWORD *)(v103 + 16) = v109;
            if ((*(_BYTE *)(v103 + 3) & 1) != 0)
            {
              *(_QWORD *)(v103 + 24) = v108;
            }
            else
            {
              *(_QWORD *)(v103 + 24) = 0;
              v107 = (uint64_t *)(v109 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v103 + 16) = v103;
            *(_QWORD *)(v103 + 24) = 0;
          }
          *v107 = v103;
        }
        v103 += 32;
        v105 -= 32;
      }
      while (v105);
    }
    v86 = *(_QWORD *)(v84 + 728);
    if (v86)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v86 + 24))(v86, v65);
    v87 = *v60 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v65 = v87 | *(_QWORD *)v65 & 7;
    *(_QWORD *)(v65 + 8) = v60;
    *(_QWORD *)(v87 + 8) = v65;
    *v60 = *v60 & 7 | v65;
    *((_QWORD *)&v112 + 1) = 0;
    v113 = 0;
    v114 = 0;
    LODWORD(v112) = 0x1000000;
    DWORD1(v112) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v62, (const llvm::MachineOperand *)&v112);
    for (j = 1; j != 4; ++j)
    {
      HIDWORD(v112) = 0;
      LODWORD(v112) = 0;
      *(_QWORD *)((char *)&v112 + 4) = (v12 + j - 1);
      v113 = 0;
      v114 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v62, (const llvm::MachineOperand *)&v112);
      LODWORD(v112) = 1;
      *((_QWORD *)&v112 + 1) = 0;
      v113 = j;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v62, (const llvm::MachineOperand *)&v112);
    }
    return IncompleteVirtualRegister;
  }
  v13 = *a3;
  v14 = (48 - *a3);
  if (v14 >= 0x21)
  {
    if (v13)
    {
      IncompleteVirtualRegister = 0;
      if (v14 > 0x21F || (v14 & 0x1F) != 0)
        return IncompleteVirtualRegister;
      v15 = (unint64_t)off_1E7F94CC8[(v14 >> 5) + 1];
    }
    else
    {
      v15 = (unint64_t)&off_1E7F987B8;
    }
  }
  else
  {
    v15 = (unint64_t)&off_1E7F984F0;
  }
  v66 = a1[6];
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v66, "", 0);
  *(_QWORD *)(*(_QWORD *)(v66 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v15 & 0xFFFFFFFFFFFFFFFBLL;
  v67 = *(_QWORD *)(v66 + 8);
  if (v67)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67);
    if ((_DWORD)IncompleteVirtualRegister)
      goto LABEL_75;
  }
  else if ((_DWORD)IncompleteVirtualRegister)
  {
LABEL_75:
    v68 = a1[4];
    v69 = *(_QWORD *)(v68 + 640);
    v70 = *(unint64_t **)(v68 + 648);
    v71 = *(_QWORD *)(a1[12] + 8);
    v72 = *(llvm::MachineFunction **)(v69 + 32);
    v73 = (void *)a1[9];
    v115 = v73;
    if (v73)
      llvm::MetadataTracking::track((uint64_t)&v115, (unsigned __int8 *)v73, 2);
    v74 = v71 + 864;
    v75 = *((_QWORD *)v72 + 28);
    if (v75)
      *((_QWORD *)v72 + 28) = *(_QWORD *)v75;
    else
      v75 = sub_1C484358C((uint64_t)v72 + 128, 72, 3);
    *(_QWORD *)&v112 = v115;
    if (v115)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v115, (unsigned __int8 *)v115, (uint64_t)&v112);
      v115 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v75, v72, v74, (unsigned __int8 **)&v112, 0);
    if ((_QWORD)v112)
      llvm::MetadataTracking::untrack((uint64_t)&v112, (unsigned __int8 *)v112);
    if (v115)
      llvm::MetadataTracking::untrack((uint64_t)&v115, (unsigned __int8 *)v115);
    v76 = *(_QWORD *)(v69 + 40);
    *(_QWORD *)(v75 + 24) = v76;
    v77 = *(_QWORD *)(v76 + 32);
    v78 = *(unsigned int *)(v75 + 40);
    if ((_DWORD)v78)
    {
      v96 = *(_QWORD *)(v75 + 32);
      v97 = *(_QWORD *)(v77 + 40);
      v98 = 32 * v78;
      do
      {
        if (!*(_BYTE *)v96)
        {
          v99 = *(unsigned int *)(v96 + 4);
          if ((int)v99 >= 0)
            v100 = (uint64_t *)(*(_QWORD *)(v97 + 272) + 8 * v99);
          else
            v100 = (uint64_t *)(*(_QWORD *)(v97 + 24) + 16 * (v99 & 0x7FFFFFFF) + 8);
          v101 = *v100;
          if (*v100)
          {
            v102 = *(_QWORD *)(v101 + 16);
            *(_QWORD *)(v101 + 16) = v96;
            *(_QWORD *)(v96 + 16) = v102;
            if ((*(_BYTE *)(v96 + 3) & 1) != 0)
            {
              *(_QWORD *)(v96 + 24) = v101;
            }
            else
            {
              *(_QWORD *)(v96 + 24) = 0;
              v100 = (uint64_t *)(v102 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v96 + 16) = v96;
            *(_QWORD *)(v96 + 24) = 0;
          }
          *v100 = v96;
        }
        v96 += 32;
        v98 -= 32;
      }
      while (v98);
    }
    v79 = *(_QWORD *)(v77 + 728);
    if (v79)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v79 + 24))(v79, v75);
    v80 = *v70 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v75 = v80 | *(_QWORD *)v75 & 7;
    *(_QWORD *)(v75 + 8) = v70;
    *(_QWORD *)(v80 + 8) = v75;
    *v70 = *v70 & 7 | v75;
    *((_QWORD *)&v112 + 1) = 0;
    v113 = 0;
    v114 = 0;
    LODWORD(v112) = 0x1000000;
    DWORD1(v112) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v72, (const llvm::MachineOperand *)&v112);
    if (v14 >= 0x10)
    {
      v81 = 0;
      v82 = v14 >> 4;
      do
      {
        HIDWORD(v112) = 0;
        LODWORD(v112) = 0;
        *(_QWORD *)((char *)&v112 + 4) = (v12 + v81);
        v113 = 0;
        v114 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v72, (const llvm::MachineOperand *)&v112);
        ++v81;
        LODWORD(v112) = 1;
        *((_QWORD *)&v112 + 1) = 0;
        v113 = v81;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v72, (const llvm::MachineOperand *)&v112);
      }
      while (v82 != v81);
    }
  }
  return IncompleteVirtualRegister;
}

llvm::MachineFunction *sub_1C4787570(uint64_t a1, unint64_t *a2, unsigned __int8 **a3, uint64_t a4, int a5)
{
  llvm::MachineFunction *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26[4];

  v9 = *(llvm::MachineFunction **)(a1 + 32);
  v10 = *a3;
  v25 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v25, v10, 2);
  v11 = *((_QWORD *)v9 + 28);
  if (v11)
    *((_QWORD *)v9 + 28) = *(_QWORD *)v11;
  else
    v11 = sub_1C484358C((uint64_t)v9 + 128, 72, 3);
  v26[0] = v25;
  if (v25)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v25, v25, (uint64_t)v26);
    v25 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v11, v9, a4, v26, 0);
  if (v26[0])
    llvm::MetadataTracking::untrack((uint64_t)v26, v26[0]);
  if (v25)
    llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v11 + 24) = v12;
  v13 = *(_QWORD *)(v12 + 32);
  v14 = *(unsigned int *)(v11 + 40);
  if ((_DWORD)v14)
  {
    v18 = *(_QWORD *)(v11 + 32);
    v19 = *(_QWORD *)(v13 + 40);
    v20 = 32 * v14;
    do
    {
      if (!*(_BYTE *)v18)
      {
        v21 = *(unsigned int *)(v18 + 4);
        if ((int)v21 >= 0)
          v22 = (uint64_t *)(*(_QWORD *)(v19 + 272) + 8 * v21);
        else
          v22 = (uint64_t *)(*(_QWORD *)(v19 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
        v23 = *v22;
        if (*v22)
        {
          v24 = *(_QWORD *)(v23 + 16);
          *(_QWORD *)(v23 + 16) = v18;
          *(_QWORD *)(v18 + 16) = v24;
          if ((*(_BYTE *)(v18 + 3) & 1) != 0)
          {
            *(_QWORD *)(v18 + 24) = v23;
          }
          else
          {
            *(_QWORD *)(v18 + 24) = 0;
            v22 = (uint64_t *)(v24 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v18 + 16) = v18;
          *(_QWORD *)(v18 + 24) = 0;
        }
        *v22 = v18;
      }
      v18 += 32;
      v20 -= 32;
    }
    while (v20);
  }
  v15 = *(_QWORD *)(v13 + 728);
  if (v15)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 24))(v15, v11);
  v16 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = v16 | *(_QWORD *)v11 & 7;
  *(_QWORD *)(v11 + 8) = a2;
  *(_QWORD *)(v16 + 8) = v11;
  *a2 = *a2 & 7 | v11;
  memset(&v26[1], 0, 24);
  LODWORD(v26[0]) = 0x1000000;
  HIDWORD(v26[0]) = a5;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v11, v9, (const llvm::MachineOperand *)v26);
  return v9;
}

uint64_t sub_1C4787758(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  unsigned int PrimitiveSizeInBits;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  char isZeroValue;
  llvm::Type *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t IncompleteVirtualRegister;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  llvm::MachineFunction *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  llvm::Type *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  llvm::UndefValue *AggregateElement;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  llvm::MachineFunction *v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  llvm::MachineFunction *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  uint64_t v103;
  llvm::MachineFunction *v104;
  unsigned __int8 *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  int v118;
  llvm::Type *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  uint64_t v123;
  llvm::MachineFunction *v124;
  unsigned __int8 *v125;
  unint64_t v126;
  llvm::UndefValue *v127;
  unsigned int v128;
  int v130;
  unsigned __int8 *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  uint64_t v135;
  llvm::MachineFunction *v136;
  unsigned __int8 *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  llvm::MachineInstr *v144;
  llvm::MachineFunction *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t *v182;
  uint64_t v183;
  llvm::MachineFunction *v184;
  unsigned __int8 *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t *v209;
  uint64_t v210;
  unsigned __int8 *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  uint64_t v221;
  llvm::MachineFunction *v222;
  unsigned __int8 *v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  llvm::MachineInstr *v272;
  llvm::MachineFunction *v273;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t *v282;
  uint64_t v283;
  llvm::MachineFunction *v284;
  unsigned __int8 *v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  int v322;
  int v323;
  unsigned int v324;
  llvm::MachineInstr *v325;
  unsigned __int8 *v326;
  __int128 v327;
  __int128 v328;
  void *v329;
  uint64_t v330;
  _QWORD v331[3];

  v331[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a2;
  v5 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  if (*(_QWORD *)a2)
    v6 = v5 == 18;
  else
    v6 = 0;
  if (!v6)
  {
    if ((v5 & 0xFE) == 0x12)
      v4 = **(_QWORD **)(v4 + 16);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v4);
    if (PrimitiveSizeInBits == 32)
    {
      LODWORD(v330) = 1;
      v329 = 0;
      if (!sub_1C4789DF4((uint64_t)a2, &v329))
        goto LABEL_402;
      if (v330 >= 0x41)
        v20 = (uint64_t *)v329;
      else
        v20 = (uint64_t *)&v329;
      v21 = *v20;
      v22 = a1[6];
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v22, (unsigned __int8 *)&unk_1C8767743, 0);
      *(_QWORD *)(*(_QWORD *)(v22 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F98468;
      v24 = *(_QWORD *)(v22 + 8);
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
      v25 = a1[4];
      v26 = *(_QWORD *)(v25 + 640);
      v27 = *(unint64_t **)(v25 + 648);
      v28 = *(_QWORD *)(a1[12] + 8);
      v29 = *(llvm::MachineFunction **)(v26 + 32);
      v30 = (unsigned __int8 *)a1[9];
      v326 = v30;
      if (v30)
        llvm::MetadataTracking::track((uint64_t)&v326, v30, 2);
      v31 = v28 + 69360;
      v32 = *((_QWORD *)v29 + 28);
      if (v32)
        *((_QWORD *)v29 + 28) = *(_QWORD *)v32;
      else
        v32 = sub_1C484358C((uint64_t)v29 + 128, 72, 3);
      *(_QWORD *)&v327 = v326;
      if (v326)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v326, v326, (uint64_t)&v327);
        v326 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v32, v29, v31, (unsigned __int8 **)&v327, 0);
      if ((_QWORD)v327)
        llvm::MetadataTracking::untrack((uint64_t)&v327, (unsigned __int8 *)v327);
      if (v326)
        llvm::MetadataTracking::untrack((uint64_t)&v326, v326);
      v82 = *(_QWORD *)(v26 + 40);
      *(_QWORD *)(v32 + 24) = v82;
      v83 = *(_QWORD *)(v82 + 32);
      v84 = *(unsigned int *)(v32 + 40);
      if ((_DWORD)v84)
      {
        v198 = *(_QWORD *)(v32 + 32);
        v199 = *(_QWORD *)(v83 + 40);
        v200 = 32 * v84;
        do
        {
          if (!*(_BYTE *)v198)
          {
            v201 = *(unsigned int *)(v198 + 4);
            if ((int)v201 >= 0)
              v202 = (uint64_t *)(*(_QWORD *)(v199 + 272) + 8 * v201);
            else
              v202 = (uint64_t *)(*(_QWORD *)(v199 + 24) + 16 * (v201 & 0x7FFFFFFF) + 8);
            v203 = *v202;
            if (*v202)
            {
              v204 = *(_QWORD *)(v203 + 16);
              *(_QWORD *)(v203 + 16) = v198;
              *(_QWORD *)(v198 + 16) = v204;
              if ((*(_BYTE *)(v198 + 3) & 1) != 0)
              {
                *(_QWORD *)(v198 + 24) = v203;
              }
              else
              {
                *(_QWORD *)(v198 + 24) = 0;
                v202 = (uint64_t *)(v204 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v198 + 16) = v198;
              *(_QWORD *)(v198 + 24) = 0;
            }
            *v202 = v198;
          }
          v198 += 32;
          v200 -= 32;
        }
        while (v200);
      }
      v85 = *(_QWORD *)(v83 + 728);
      if (v85)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v85 + 24))(v85, v32);
      v86 = *v27 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v32 = v86 | *(_QWORD *)v32 & 7;
      *(_QWORD *)(v32 + 8) = v27;
      *(_QWORD *)(v86 + 8) = v32;
      *v27 = *v27 & 7 | v32;
      *((_QWORD *)&v327 + 1) = 0;
      v328 = 0uLL;
      LODWORD(v327) = 0x1000000;
      DWORD1(v327) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = v21;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = v21;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = v21;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v327);
      v327 = 0u;
      v328 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
LABEL_147:
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v327);
      v327 = 0u;
      v328 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v327);
LABEL_403:
      if (v330 >= 0x41 && v329)
        MEMORY[0x1CAA32F9C](v329, 0x1000C8000313F17);
      return IncompleteVirtualRegister;
    }
    if (PrimitiveSizeInBits == 64)
    {
      LODWORD(v330) = 1;
      v329 = 0;
      if (sub_1C4789DF4((uint64_t)a2, &v329))
      {
        if (v330 >= 0x41)
          v8 = (unint64_t *)v329;
        else
          v8 = (unint64_t *)&v329;
        v9 = *v8;
        if (*(_BYTE *)(a1[32] + 280))
        {
          v10 = sub_1C47A836C((uint64_t)a1, a2);
          if ((_DWORD)v10)
          {
            v11 = v10;
            v12 = v10 + 1;
            v13 = v10;
LABEL_87:
            v74 = a1[4];
            v75 = *(_QWORD *)(v74 + 640);
            v76 = *(unint64_t **)(v74 + 648);
            v77 = *(_QWORD *)(a1[12] + 8);
            v78 = *(llvm::MachineFunction **)(v75 + 32);
            v79 = (unsigned __int8 *)a1[9];
            v326 = v79;
            if (v79)
              llvm::MetadataTracking::track((uint64_t)&v326, v79, 2);
            v80 = v77 + 69360;
            v81 = *((_QWORD *)v78 + 28);
            if (v81)
              *((_QWORD *)v78 + 28) = *(_QWORD *)v81;
            else
              v81 = sub_1C484358C((uint64_t)v78 + 128, 72, 3);
            *(_QWORD *)&v327 = v326;
            if (v326)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v326, v326, (uint64_t)&v327);
              v326 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v81, v78, v80, (unsigned __int8 **)&v327, 0);
            if ((_QWORD)v327)
              llvm::MetadataTracking::untrack((uint64_t)&v327, (unsigned __int8 *)v327);
            if (v326)
              llvm::MetadataTracking::untrack((uint64_t)&v326, v326);
            v95 = *(_QWORD *)(v75 + 40);
            *(_QWORD *)(v81 + 24) = v95;
            v96 = *(_QWORD *)(v95 + 32);
            v97 = *(unsigned int *)(v81 + 40);
            if ((_DWORD)v97)
            {
              v226 = *(_QWORD *)(v81 + 32);
              v227 = *(_QWORD *)(v96 + 40);
              v228 = 32 * v97;
              do
              {
                if (!*(_BYTE *)v226)
                {
                  v229 = *(unsigned int *)(v226 + 4);
                  if ((int)v229 >= 0)
                    v230 = (uint64_t *)(*(_QWORD *)(v227 + 272) + 8 * v229);
                  else
                    v230 = (uint64_t *)(*(_QWORD *)(v227 + 24) + 16 * (v229 & 0x7FFFFFFF) + 8);
                  v231 = *v230;
                  if (*v230)
                  {
                    v232 = *(_QWORD *)(v231 + 16);
                    *(_QWORD *)(v231 + 16) = v226;
                    *(_QWORD *)(v226 + 16) = v232;
                    if ((*(_BYTE *)(v226 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v226 + 24) = v231;
                    }
                    else
                    {
                      *(_QWORD *)(v226 + 24) = 0;
                      v230 = (uint64_t *)(v232 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v226 + 16) = v226;
                    *(_QWORD *)(v226 + 24) = 0;
                  }
                  *v230 = v226;
                }
                v226 += 32;
                v228 -= 32;
              }
              while (v228);
            }
            v98 = *(_QWORD *)(v96 + 728);
            if (v98)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v98 + 24))(v98, v81);
            v99 = *v76 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v81 = v99 | *(_QWORD *)v81 & 7;
            *(_QWORD *)(v81 + 8) = v76;
            *(_QWORD *)(v99 + 8) = v81;
            *v76 = *v76 & 7 | v81;
            *((_QWORD *)&v327 + 1) = 0;
            v328 = 0uLL;
            LODWORD(v327) = 0x1000000;
            DWORD1(v327) = v12;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v78, (const llvm::MachineOperand *)&v327);
            LODWORD(v327) = 1;
            *((_QWORD *)&v327 + 1) = 0;
            *(_QWORD *)&v328 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v78, (const llvm::MachineOperand *)&v327);
            LODWORD(v327) = 1;
            *((_QWORD *)&v327 + 1) = 0;
            *(_QWORD *)&v328 = HIDWORD(v9);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v78, (const llvm::MachineOperand *)&v327);
            LODWORD(v327) = 1;
            *((_QWORD *)&v327 + 1) = 0;
            *(_QWORD *)&v328 = HIDWORD(v9);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v78, (const llvm::MachineOperand *)&v327);
            LODWORD(v327) = 1;
            *((_QWORD *)&v327 + 1) = 0;
            *(_QWORD *)&v328 = HIDWORD(v9);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v78, (const llvm::MachineOperand *)&v327);
            v327 = 0u;
            v328 = 0u;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v78, (const llvm::MachineOperand *)&v327);
            LODWORD(v327) = 1;
            *((_QWORD *)&v327 + 1) = 0;
            *(_QWORD *)&v328 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v78, (const llvm::MachineOperand *)&v327);
            v327 = 0u;
            v328 = 0u;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v78, (const llvm::MachineOperand *)&v327);
            v100 = a1[4];
            v101 = *(_QWORD *)(v100 + 640);
            v102 = *(unint64_t **)(v100 + 648);
            v103 = *(_QWORD *)(a1[12] + 8);
            v104 = *(llvm::MachineFunction **)(v101 + 32);
            v105 = (unsigned __int8 *)a1[9];
            v326 = v105;
            if (v105)
              llvm::MetadataTracking::track((uint64_t)&v326, v105, 2);
            v106 = v103 + 69360;
            v107 = *((_QWORD *)v104 + 28);
            if (v107)
              *((_QWORD *)v104 + 28) = *(_QWORD *)v107;
            else
              v107 = sub_1C484358C((uint64_t)v104 + 128, 72, 3);
            *(_QWORD *)&v327 = v326;
            if (v326)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v326, v326, (uint64_t)&v327);
              v326 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v107, v104, v106, (unsigned __int8 **)&v327, 0);
            if ((_QWORD)v327)
              llvm::MetadataTracking::untrack((uint64_t)&v327, (unsigned __int8 *)v327);
            if (v326)
              llvm::MetadataTracking::untrack((uint64_t)&v326, v326);
            v108 = *(_QWORD *)(v101 + 40);
            *(_QWORD *)(v107 + 24) = v108;
            v109 = *(_QWORD *)(v108 + 32);
            v110 = *(unsigned int *)(v107 + 40);
            if ((_DWORD)v110)
            {
              v233 = *(_QWORD *)(v107 + 32);
              v234 = *(_QWORD *)(v109 + 40);
              v235 = 32 * v110;
              do
              {
                if (!*(_BYTE *)v233)
                {
                  v236 = *(unsigned int *)(v233 + 4);
                  if ((int)v236 >= 0)
                    v237 = (uint64_t *)(*(_QWORD *)(v234 + 272) + 8 * v236);
                  else
                    v237 = (uint64_t *)(*(_QWORD *)(v234 + 24) + 16 * (v236 & 0x7FFFFFFF) + 8);
                  v238 = *v237;
                  if (*v237)
                  {
                    v239 = *(_QWORD *)(v238 + 16);
                    *(_QWORD *)(v238 + 16) = v233;
                    *(_QWORD *)(v233 + 16) = v239;
                    if ((*(_BYTE *)(v233 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v233 + 24) = v238;
                    }
                    else
                    {
                      *(_QWORD *)(v233 + 24) = 0;
                      v237 = (uint64_t *)(v239 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v233 + 16) = v233;
                    *(_QWORD *)(v233 + 24) = 0;
                  }
                  *v237 = v233;
                }
                v233 += 32;
                v235 -= 32;
              }
              while (v235);
            }
            v111 = *(_QWORD *)(v109 + 728);
            if (v111)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v111 + 24))(v111, v107);
            v112 = *v102 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v107 = v112 | *(_QWORD *)v107 & 7;
            *(_QWORD *)(v107 + 8) = v102;
            *(_QWORD *)(v112 + 8) = v107;
            *v102 = *v102 & 7 | v107;
            *((_QWORD *)&v327 + 1) = 0;
            v328 = 0uLL;
            LODWORD(v327) = 0x1000000;
            DWORD1(v327) = v13;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v104, (const llvm::MachineOperand *)&v327);
            LODWORD(v327) = 1;
            *((_QWORD *)&v327 + 1) = 0;
            *(_QWORD *)&v328 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v104, (const llvm::MachineOperand *)&v327);
            LODWORD(v327) = 1;
            *((_QWORD *)&v327 + 1) = 0;
            *(_QWORD *)&v328 = v9;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v104, (const llvm::MachineOperand *)&v327);
            LODWORD(v327) = 1;
            *((_QWORD *)&v327 + 1) = 0;
            *(_QWORD *)&v328 = v9;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v104, (const llvm::MachineOperand *)&v327);
            LODWORD(v327) = 1;
            *((_QWORD *)&v327 + 1) = 0;
            *(_QWORD *)&v328 = v9;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v104, (const llvm::MachineOperand *)&v327);
            v327 = 0u;
            v328 = 0u;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v104, (const llvm::MachineOperand *)&v327);
            LODWORD(v327) = 1;
            *((_QWORD *)&v327 + 1) = 0;
            *(_QWORD *)&v328 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v104, (const llvm::MachineOperand *)&v327);
            v327 = 0u;
            v328 = 0u;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v104, (const llvm::MachineOperand *)&v327);
            if (v13 != (_DWORD)v11)
              sub_1C4789F18(a1, v11, v13, 0x40u);
            IncompleteVirtualRegister = v11;
            goto LABEL_403;
          }
          goto LABEL_402;
        }
        v68 = a1[6];
        v11 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v68, "", 0);
        *(_QWORD *)(*(_QWORD *)(v68 + 24) + 16 * (v11 & 0x7FFFFFFF)) = &off_1E7F98AB8;
        v69 = *(_QWORD *)(v68 + 8);
        if (v69)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 24))(v69);
          if ((_DWORD)v11)
          {
LABEL_81:
            v70 = a1[6];
            v13 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v70, "", 0);
            *(_QWORD *)(*(_QWORD *)(v70 + 24) + 16 * (v13 & 0x7FFFFFFF)) = &off_1E7F98468;
            v71 = *(_QWORD *)(v70 + 8);
            if (v71)
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 24))(v71);
            v72 = a1[6];
            v12 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v72, "", 0);
            *(_QWORD *)(*(_QWORD *)(v72 + 24) + 16 * (v12 & 0x7FFFFFFF)) = &off_1E7F98468;
            v73 = *(_QWORD *)(v72 + 8);
            if (v73)
              (*(void (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73);
            IncompleteVirtualRegister = 0;
            if (!v13 || !v12)
              goto LABEL_403;
            goto LABEL_87;
          }
        }
        else if ((_DWORD)v11)
        {
          goto LABEL_81;
        }
      }
LABEL_402:
      IncompleteVirtualRegister = 0;
      goto LABEL_403;
    }
    if (PrimitiveSizeInBits <= 0x10)
    {
      LODWORD(v330) = 1;
      v329 = 0;
      if (!sub_1C4789DF4((uint64_t)a2, &v329))
        goto LABEL_402;
      if (v330 >= 0x41)
        v33 = (uint64_t *)v329;
      else
        v33 = (uint64_t *)&v329;
      v34 = *v33;
      v35 = a1[6];
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v35, (unsigned __int8 *)&unk_1C8767743, 0);
      *(_QWORD *)(*(_QWORD *)(v35 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F982A8;
      v36 = *(_QWORD *)(v35 + 8);
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
      v37 = a1[4];
      v38 = *(_QWORD *)(v37 + 640);
      v39 = *(unint64_t **)(v37 + 648);
      v40 = *(_QWORD *)(a1[12] + 8);
      v29 = *(llvm::MachineFunction **)(v38 + 32);
      v41 = (unsigned __int8 *)a1[9];
      v326 = v41;
      if (v41)
        llvm::MetadataTracking::track((uint64_t)&v326, v41, 2);
      v42 = v40 + 48720;
      v32 = *((_QWORD *)v29 + 28);
      if (v32)
        *((_QWORD *)v29 + 28) = *(_QWORD *)v32;
      else
        v32 = sub_1C484358C((uint64_t)v29 + 128, 72, 3);
      *(_QWORD *)&v327 = v326;
      if (v326)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v326, v326, (uint64_t)&v327);
        v326 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v32, v29, v42, (unsigned __int8 **)&v327, 0);
      if ((_QWORD)v327)
        llvm::MetadataTracking::untrack((uint64_t)&v327, (unsigned __int8 *)v327);
      if (v326)
        llvm::MetadataTracking::untrack((uint64_t)&v326, v326);
      v113 = *(_QWORD *)(v38 + 40);
      *(_QWORD *)(v32 + 24) = v113;
      v114 = *(_QWORD *)(v113 + 32);
      v115 = *(unsigned int *)(v32 + 40);
      if ((_DWORD)v115)
      {
        v240 = *(_QWORD *)(v32 + 32);
        v241 = *(_QWORD *)(v114 + 40);
        v242 = 32 * v115;
        do
        {
          if (!*(_BYTE *)v240)
          {
            v243 = *(unsigned int *)(v240 + 4);
            if ((int)v243 >= 0)
              v244 = (uint64_t *)(*(_QWORD *)(v241 + 272) + 8 * v243);
            else
              v244 = (uint64_t *)(*(_QWORD *)(v241 + 24) + 16 * (v243 & 0x7FFFFFFF) + 8);
            v245 = *v244;
            if (*v244)
            {
              v246 = *(_QWORD *)(v245 + 16);
              *(_QWORD *)(v245 + 16) = v240;
              *(_QWORD *)(v240 + 16) = v246;
              if ((*(_BYTE *)(v240 + 3) & 1) != 0)
              {
                *(_QWORD *)(v240 + 24) = v245;
              }
              else
              {
                *(_QWORD *)(v240 + 24) = 0;
                v244 = (uint64_t *)(v246 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v240 + 16) = v240;
              *(_QWORD *)(v240 + 24) = 0;
            }
            *v244 = v240;
          }
          v240 += 32;
          v242 -= 32;
        }
        while (v242);
      }
      v116 = *(_QWORD *)(v114 + 728);
      if (v116)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v116 + 24))(v116, v32);
      v117 = *v39 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v32 = v117 | *(_QWORD *)v32 & 7;
      *(_QWORD *)(v32 + 8) = v39;
      *(_QWORD *)(v117 + 8) = v32;
      *v39 = *v39 & 7 | v32;
      *((_QWORD *)&v327 + 1) = 0;
      v328 = 0uLL;
      LODWORD(v327) = 0x1000000;
      DWORD1(v327) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = v34 | 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = v34 | 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = v34 | 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = v34 | 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v327);
      v327 = 0u;
      v328 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      goto LABEL_147;
    }
    return 0;
  }
  if ((*(_DWORD *)(v4 + 32) - 5) < 0xFFFFFFFD)
    return 0;
  v14 = *(_DWORD *)(*(_QWORD *)(v4 + 24) + 8);
  if ((_BYTE)v14)
    v15 = v14 == 4109;
  else
    v15 = 1;
  v16 = v15;
  if (v14 == 2061)
  {
    isZeroValue = llvm::Constant::isZeroValue((llvm::Constant *)a2);
    LODWORD(v18) = *(_DWORD *)(v4 + 32);
    if ((isZeroValue & 1) == 0)
    {
      if ((_DWORD)v18)
      {
        v55 = 0;
        v19 = 0;
        v18 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a2, v18);
          if (*((_BYTE *)AggregateElement + 16) != 16)
            break;
          v57 = (unsigned __int8 *)AggregateElement + 24;
          if (*((_DWORD *)AggregateElement + 8) >= 0x41u)
            v57 = *(unsigned __int8 **)v57;
          v19 |= (unint64_t)*v57 << v55;
          v18 = (llvm::Type *)((_DWORD)v18 + 1);
          v55 += 8;
          if ((_DWORD)v18 == *(_DWORD *)(v4 + 32))
            goto LABEL_71;
        }
      }
      return 0;
    }
    v19 = 0;
LABEL_71:
    if ((_DWORD)v18 == 2)
    {
      v87 = a1[6];
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v87, (unsigned __int8 *)&unk_1C8767743, 0);
      *(_QWORD *)(*(_QWORD *)(v87 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F982A8;
      v88 = *(_QWORD *)(v87 + 8);
      if (v88)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v88 + 24))(v88);
        if (!(_DWORD)IncompleteVirtualRegister)
          return IncompleteVirtualRegister;
      }
      else if (!(_DWORD)IncompleteVirtualRegister)
      {
        return IncompleteVirtualRegister;
      }
      v89 = a1[4];
      v90 = *(_QWORD *)(v89 + 640);
      v91 = *(unint64_t **)(v89 + 648);
      v92 = *(_QWORD *)(a1[12] + 8);
      v64 = *(llvm::MachineFunction **)(v90 + 32);
      v93 = (void *)a1[9];
      v329 = v93;
      if (v93)
        llvm::MetadataTracking::track((uint64_t)&v329, (unsigned __int8 *)v93, 2);
      v94 = v92 + 48720;
      v67 = *((_QWORD *)v64 + 28);
      if (v67)
        *((_QWORD *)v64 + 28) = *(_QWORD *)v67;
      else
        v67 = sub_1C484358C((uint64_t)v64 + 128, 72, 3);
      *(_QWORD *)&v327 = v329;
      if (v329)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v329, (unsigned __int8 *)v329, (uint64_t)&v327);
        v329 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v67, v64, v94, (unsigned __int8 **)&v327, 0);
      if ((_QWORD)v327)
        llvm::MetadataTracking::untrack((uint64_t)&v327, (unsigned __int8 *)v327);
      if (v329)
        llvm::MetadataTracking::untrack((uint64_t)&v329, (unsigned __int8 *)v329);
      v193 = *(_QWORD *)(v90 + 40);
      *(_QWORD *)(v67 + 24) = v193;
      v194 = *(_QWORD *)(v193 + 32);
      v195 = *(unsigned int *)(v67 + 40);
      if ((_DWORD)v195)
      {
        v254 = *(_QWORD *)(v67 + 32);
        v255 = *(_QWORD *)(v194 + 40);
        v256 = 32 * v195;
        do
        {
          if (!*(_BYTE *)v254)
          {
            v257 = *(unsigned int *)(v254 + 4);
            if ((int)v257 >= 0)
              v258 = (uint64_t *)(*(_QWORD *)(v255 + 272) + 8 * v257);
            else
              v258 = (uint64_t *)(*(_QWORD *)(v255 + 24) + 16 * (v257 & 0x7FFFFFFF) + 8);
            v259 = *v258;
            if (*v258)
            {
              v260 = *(_QWORD *)(v259 + 16);
              *(_QWORD *)(v259 + 16) = v254;
              *(_QWORD *)(v254 + 16) = v260;
              if ((*(_BYTE *)(v254 + 3) & 1) != 0)
              {
                *(_QWORD *)(v254 + 24) = v259;
              }
              else
              {
                *(_QWORD *)(v254 + 24) = 0;
                v258 = (uint64_t *)(v260 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v254 + 16) = v254;
              *(_QWORD *)(v254 + 24) = 0;
            }
            *v258 = v254;
          }
          v254 += 32;
          v256 -= 32;
        }
        while (v256);
      }
      v196 = *(_QWORD *)(v194 + 728);
      if (v196)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v196 + 24))(v196, v67);
      v197 = *v91 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v67 = v197 | *(_QWORD *)v67 & 7;
      *(_QWORD *)(v67 + 8) = v91;
      *(_QWORD *)(v197 + 8) = v67;
      *v91 = *v91 & 7 | v67;
      *((_QWORD *)&v327 + 1) = 0;
      v328 = 0uLL;
      LODWORD(v327) = 0x1000000;
      DWORD1(v327) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v64, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v64, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = v19 | 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v64, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = v19 | 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v64, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = v19 | 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v64, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = v19 | 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v64, (const llvm::MachineOperand *)&v327);
      v327 = 0u;
      v328 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v64, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
    }
    else
    {
      if ((_DWORD)v18 != 4)
        return 0;
      v58 = a1[6];
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v58, (unsigned __int8 *)&unk_1C8767743, 0);
      *(_QWORD *)(*(_QWORD *)(v58 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F98468;
      v59 = *(_QWORD *)(v58 + 8);
      if (v59)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
        if (!(_DWORD)IncompleteVirtualRegister)
          return IncompleteVirtualRegister;
      }
      else if (!(_DWORD)IncompleteVirtualRegister)
      {
        return IncompleteVirtualRegister;
      }
      v60 = a1[4];
      v61 = *(_QWORD *)(v60 + 640);
      v62 = *(unint64_t **)(v60 + 648);
      v63 = *(_QWORD *)(a1[12] + 8);
      v64 = *(llvm::MachineFunction **)(v61 + 32);
      v65 = (void *)a1[9];
      v329 = v65;
      if (v65)
        llvm::MetadataTracking::track((uint64_t)&v329, (unsigned __int8 *)v65, 2);
      v66 = v63 + 69360;
      v67 = *((_QWORD *)v64 + 28);
      if (v67)
        *((_QWORD *)v64 + 28) = *(_QWORD *)v67;
      else
        v67 = sub_1C484358C((uint64_t)v64 + 128, 72, 3);
      *(_QWORD *)&v327 = v329;
      if (v329)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v329, (unsigned __int8 *)v329, (uint64_t)&v327);
        v329 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v67, v64, v66, (unsigned __int8 **)&v327, 0);
      if ((_QWORD)v327)
        llvm::MetadataTracking::untrack((uint64_t)&v327, (unsigned __int8 *)v327);
      if (v329)
        llvm::MetadataTracking::untrack((uint64_t)&v329, (unsigned __int8 *)v329);
      v188 = *(_QWORD *)(v61 + 40);
      *(_QWORD *)(v67 + 24) = v188;
      v189 = *(_QWORD *)(v188 + 32);
      v190 = *(unsigned int *)(v67 + 40);
      if ((_DWORD)v190)
      {
        v247 = *(_QWORD *)(v67 + 32);
        v248 = *(_QWORD *)(v189 + 40);
        v249 = 32 * v190;
        do
        {
          if (!*(_BYTE *)v247)
          {
            v250 = *(unsigned int *)(v247 + 4);
            if ((int)v250 >= 0)
              v251 = (uint64_t *)(*(_QWORD *)(v248 + 272) + 8 * v250);
            else
              v251 = (uint64_t *)(*(_QWORD *)(v248 + 24) + 16 * (v250 & 0x7FFFFFFF) + 8);
            v252 = *v251;
            if (*v251)
            {
              v253 = *(_QWORD *)(v252 + 16);
              *(_QWORD *)(v252 + 16) = v247;
              *(_QWORD *)(v247 + 16) = v253;
              if ((*(_BYTE *)(v247 + 3) & 1) != 0)
              {
                *(_QWORD *)(v247 + 24) = v252;
              }
              else
              {
                *(_QWORD *)(v247 + 24) = 0;
                v251 = (uint64_t *)(v253 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v247 + 16) = v247;
              *(_QWORD *)(v247 + 24) = 0;
            }
            *v251 = v247;
          }
          v247 += 32;
          v249 -= 32;
        }
        while (v249);
      }
      v191 = *(_QWORD *)(v189 + 728);
      if (v191)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v191 + 24))(v191, v67);
      v192 = *v62 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v67 = v192 | *(_QWORD *)v67 & 7;
      *(_QWORD *)(v67 + 8) = v62;
      *(_QWORD *)(v192 + 8) = v67;
      *v62 = *v62 & 7 | v67;
      *((_QWORD *)&v327 + 1) = 0;
      v328 = 0uLL;
      LODWORD(v327) = 0x1000000;
      DWORD1(v327) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v64, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v64, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = v19;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v64, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = v19;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v64, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = v19;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v64, (const llvm::MachineOperand *)&v327);
      v327 = 0u;
      v328 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v64, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
    }
    *((_QWORD *)&v327 + 1) = 0;
    *(_QWORD *)&v328 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v64, (const llvm::MachineOperand *)&v327);
    v327 = 0u;
    v328 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v67, v64, (const llvm::MachineOperand *)&v327);
    return IncompleteVirtualRegister;
  }
  v43 = *(llvm::Type **)a2;
  if ((v5 & 0xFE) == 0x12)
    v43 = **(llvm::Type ***)(v4 + 16);
  v44 = llvm::Type::getPrimitiveSizeInBits(v43);
  v45 = ((unint64_t)v44 >> 3) + 0xFFFFFFFF;
  if (v44 >= 0x20)
    LODWORD(v45) = (v44 >> 5) + 1;
  v46 = (unint64_t)&off_1E7F987B8;
  if (v44 != 8 && v44 != 16)
  {
    if (v44 == 48)
      goto LABEL_57;
    if ((v44 & 0x1F) != 0)
      return 0;
  }
  if (v45 > 0x11uLL)
    return 0;
  v46 = (unint64_t)off_1E7F94CC8[v45];
LABEL_57:
  v322 = v16;
  v47 = a1[6];
  v48 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v47, "", 0);
  v49 = v46 & 0xFFFFFFFFFFFFFFFBLL;
  *(_QWORD *)(*(_QWORD *)(v47 + 24) + 16 * (v48 & 0x7FFFFFFF)) = v49;
  v50 = *(_QWORD *)(v47 + 8);
  v324 = v48;
  if (v50)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
    v48 = v324;
    if (!v324)
      return 0;
  }
  else if (!(_DWORD)v48)
  {
    return 0;
  }
  v51 = *(_DWORD *)(v4 + 32);
  if (!v51)
  {
    v329 = v331;
    v330 = 0x400000000;
    goto LABEL_249;
  }
  do
  {
    v52 = a1[6];
    v53 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v52, "", 0);
    *(_QWORD *)(*(_QWORD *)(v52 + 24) + 16 * (v53 & 0x7FFFFFFF)) = v49;
    v54 = *(_QWORD *)(v52 + 8);
    if (v54)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 24))(v54, v53);
    if (!(_DWORD)v53)
      return 0;
    --v51;
  }
  while (v51);
  v118 = *(_DWORD *)(v4 + 32);
  v329 = v331;
  v330 = 0x400000000;
  v323 = v118;
  if (!v118)
  {
LABEL_248:
    v48 = v324;
LABEL_249:
    if (!v322)
    {
      IncompleteVirtualRegister = v48;
      goto LABEL_437;
    }
    v177 = *(_DWORD *)(v4 + 32);
    if (v177 != 4)
    {
      if (v177 == 3)
      {
        v205 = a1[6];
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v205, "", 0);
        *(_QWORD *)(*(_QWORD *)(v205 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F987B8;
        v206 = *(_QWORD *)(v205 + 8);
        if (v206)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v206 + 24))(v206);
          if (!(_DWORD)IncompleteVirtualRegister)
            goto LABEL_437;
        }
        else if (!(_DWORD)IncompleteVirtualRegister)
        {
          goto LABEL_437;
        }
        v207 = a1[4];
        v208 = *(_QWORD *)(v207 + 640);
        v209 = *(unint64_t **)(v207 + 648);
        v210 = *(_QWORD *)(a1[12] + 8);
        v184 = *(llvm::MachineFunction **)(v208 + 32);
        v211 = (unsigned __int8 *)a1[9];
        v326 = v211;
        if (v211)
          llvm::MetadataTracking::track((uint64_t)&v326, v211, 2);
        v212 = v210 + 864;
        v187 = *((_QWORD *)v184 + 28);
        if (v187)
          *((_QWORD *)v184 + 28) = *(_QWORD *)v187;
        else
          v187 = sub_1C484358C((uint64_t)v184 + 128, 72, 3);
        *(_QWORD *)&v327 = v326;
        if (v326)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v326, v326, (uint64_t)&v327);
          v326 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v187, v184, v212, (unsigned __int8 **)&v327, 0);
        if ((_QWORD)v327)
          llvm::MetadataTracking::untrack((uint64_t)&v327, (unsigned __int8 *)v327);
        if (v326)
          llvm::MetadataTracking::untrack((uint64_t)&v326, v326);
        v261 = *(_QWORD *)(v208 + 40);
        *(_QWORD *)(v187 + 24) = v261;
        v262 = *(_QWORD *)(v261 + 32);
        v263 = *(unsigned int *)(v187 + 40);
        if ((_DWORD)v263)
        {
          v293 = *(_QWORD *)(v187 + 32);
          v294 = *(_QWORD *)(v262 + 40);
          v295 = 32 * v263;
          do
          {
            if (!*(_BYTE *)v293)
            {
              v296 = *(unsigned int *)(v293 + 4);
              if ((int)v296 >= 0)
                v297 = (uint64_t *)(*(_QWORD *)(v294 + 272) + 8 * v296);
              else
                v297 = (uint64_t *)(*(_QWORD *)(v294 + 24) + 16 * (v296 & 0x7FFFFFFF) + 8);
              v298 = *v297;
              if (*v297)
              {
                v299 = *(_QWORD *)(v298 + 16);
                *(_QWORD *)(v298 + 16) = v293;
                *(_QWORD *)(v293 + 16) = v299;
                if ((*(_BYTE *)(v293 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v293 + 24) = v298;
                }
                else
                {
                  *(_QWORD *)(v293 + 24) = 0;
                  v297 = (uint64_t *)(v299 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v293 + 16) = v293;
                *(_QWORD *)(v293 + 24) = 0;
              }
              *v297 = v293;
            }
            v293 += 32;
            v295 -= 32;
          }
          while (v295);
        }
        v264 = *(_QWORD *)(v262 + 728);
        if (v264)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v264 + 24))(v264, v187);
        v265 = *v209 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v187 = v265 | *(_QWORD *)v187 & 7;
        *(_QWORD *)(v187 + 8) = v209;
        *(_QWORD *)(v265 + 8) = v187;
        *v209 = *v209 & 7 | v187;
        *((_QWORD *)&v327 + 1) = 0;
        v328 = 0uLL;
        LODWORD(v327) = 0x1000000;
        DWORD1(v327) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v187, v184, (const llvm::MachineOperand *)&v327);
        *((_QWORD *)&v327 + 1) = 0;
        v328 = 0uLL;
        LODWORD(v327) = 0;
        DWORD1(v327) = v324;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v187, v184, (const llvm::MachineOperand *)&v327);
        LODWORD(v327) = 1;
        *((_QWORD *)&v327 + 1) = 0;
        *(_QWORD *)&v328 = 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v187, v184, (const llvm::MachineOperand *)&v327);
        HIDWORD(v327) = 0;
        v328 = 0uLL;
        LODWORD(v327) = 0;
        *(_QWORD *)((char *)&v327 + 4) = v324 + 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v187, v184, (const llvm::MachineOperand *)&v327);
        LODWORD(v327) = 1;
        *((_QWORD *)&v327 + 1) = 0;
        *(_QWORD *)&v328 = 2;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v187, v184, (const llvm::MachineOperand *)&v327);
        HIDWORD(v327) = 0;
        v328 = 0uLL;
        LODWORD(v327) = 0;
        *(_QWORD *)((char *)&v327 + 4) = v324 + 2;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v187, v184, (const llvm::MachineOperand *)&v327);
        LODWORD(v327) = 1;
        v266 = 3;
      }
      else
      {
        if (v177 != 2)
        {
          IncompleteVirtualRegister = 0;
          goto LABEL_437;
        }
        v178 = a1[6];
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v178, "", 0);
        *(_QWORD *)(*(_QWORD *)(v178 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F984F0;
        v179 = *(_QWORD *)(v178 + 8);
        if (v179)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v179 + 24))(v179);
          if (!(_DWORD)IncompleteVirtualRegister)
            goto LABEL_437;
        }
        else if (!(_DWORD)IncompleteVirtualRegister)
        {
          goto LABEL_437;
        }
        v180 = a1[4];
        v181 = *(_QWORD *)(v180 + 640);
        v182 = *(unint64_t **)(v180 + 648);
        v183 = *(_QWORD *)(a1[12] + 8);
        v184 = *(llvm::MachineFunction **)(v181 + 32);
        v185 = (unsigned __int8 *)a1[9];
        v326 = v185;
        if (v185)
          llvm::MetadataTracking::track((uint64_t)&v326, v185, 2);
        v186 = v183 + 864;
        v187 = *((_QWORD *)v184 + 28);
        if (v187)
          *((_QWORD *)v184 + 28) = *(_QWORD *)v187;
        else
          v187 = sub_1C484358C((uint64_t)v184 + 128, 72, 3);
        *(_QWORD *)&v327 = v326;
        if (v326)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v326, v326, (uint64_t)&v327);
          v326 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v187, v184, v186, (unsigned __int8 **)&v327, 0);
        if ((_QWORD)v327)
          llvm::MetadataTracking::untrack((uint64_t)&v327, (unsigned __int8 *)v327);
        if (v326)
          llvm::MetadataTracking::untrack((uint64_t)&v326, v326);
        v267 = *(_QWORD *)(v181 + 40);
        *(_QWORD *)(v187 + 24) = v267;
        v268 = *(_QWORD *)(v267 + 32);
        v269 = *(unsigned int *)(v187 + 40);
        if ((_DWORD)v269)
        {
          v300 = *(_QWORD *)(v187 + 32);
          v301 = *(_QWORD *)(v268 + 40);
          v302 = 32 * v269;
          do
          {
            if (!*(_BYTE *)v300)
            {
              v303 = *(unsigned int *)(v300 + 4);
              if ((int)v303 >= 0)
                v304 = (uint64_t *)(*(_QWORD *)(v301 + 272) + 8 * v303);
              else
                v304 = (uint64_t *)(*(_QWORD *)(v301 + 24) + 16 * (v303 & 0x7FFFFFFF) + 8);
              v305 = *v304;
              if (*v304)
              {
                v306 = *(_QWORD *)(v305 + 16);
                *(_QWORD *)(v305 + 16) = v300;
                *(_QWORD *)(v300 + 16) = v306;
                if ((*(_BYTE *)(v300 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v300 + 24) = v305;
                }
                else
                {
                  *(_QWORD *)(v300 + 24) = 0;
                  v304 = (uint64_t *)(v306 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v300 + 16) = v300;
                *(_QWORD *)(v300 + 24) = 0;
              }
              *v304 = v300;
            }
            v300 += 32;
            v302 -= 32;
          }
          while (v302);
        }
        v270 = *(_QWORD *)(v268 + 728);
        if (v270)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v270 + 24))(v270, v187);
        v271 = *v182 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v187 = v271 | *(_QWORD *)v187 & 7;
        *(_QWORD *)(v187 + 8) = v182;
        *(_QWORD *)(v271 + 8) = v187;
        *v182 = *v182 & 7 | v187;
        *((_QWORD *)&v327 + 1) = 0;
        v328 = 0uLL;
        LODWORD(v327) = 0x1000000;
        DWORD1(v327) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v187, v184, (const llvm::MachineOperand *)&v327);
        *((_QWORD *)&v327 + 1) = 0;
        v328 = 0uLL;
        LODWORD(v327) = 0;
        DWORD1(v327) = v324;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v187, v184, (const llvm::MachineOperand *)&v327);
        LODWORD(v327) = 1;
        *((_QWORD *)&v327 + 1) = 0;
        *(_QWORD *)&v328 = 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v187, v184, (const llvm::MachineOperand *)&v327);
        HIDWORD(v327) = 0;
        v328 = 0uLL;
        LODWORD(v327) = 0;
        *(_QWORD *)((char *)&v327 + 4) = v324 + 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v187, v184, (const llvm::MachineOperand *)&v327);
        LODWORD(v327) = 1;
        v266 = 2;
      }
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = v266;
      v272 = (llvm::MachineInstr *)v187;
      v273 = v184;
LABEL_436:
      llvm::MachineInstr::addOperand(v272, v273, (const llvm::MachineOperand *)&v327);
      goto LABEL_437;
    }
    v213 = a1[6];
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v213, "", 0);
    *(_QWORD *)(*(_QWORD *)(v213 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F98468;
    v214 = *(_QWORD *)(v213 + 8);
    if (v214)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v214 + 24))(v214);
      if (!(_DWORD)IncompleteVirtualRegister)
        goto LABEL_437;
    }
    else if (!(_DWORD)IncompleteVirtualRegister)
    {
      goto LABEL_437;
    }
    v215 = a1[6];
    v216 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v215, "", 0);
    *(_QWORD *)(*(_QWORD *)(v215 + 24) + 16 * (v216 & 0x7FFFFFFF)) = &off_1E7F98468;
    v217 = *(_QWORD *)(v215 + 8);
    if (v217)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v217 + 24))(v217);
      if (v216)
        goto LABEL_306;
    }
    else if (v216)
    {
LABEL_306:
      v218 = a1[4];
      v219 = *(_QWORD *)(v218 + 640);
      v220 = *(unint64_t **)(v218 + 648);
      v221 = *(_QWORD *)(a1[12] + 8);
      v222 = *(llvm::MachineFunction **)(v219 + 32);
      v223 = (unsigned __int8 *)a1[9];
      v326 = v223;
      if (v223)
        llvm::MetadataTracking::track((uint64_t)&v326, v223, 2);
      v224 = v221 + 864;
      v225 = *((_QWORD *)v222 + 28);
      if (v225)
        *((_QWORD *)v222 + 28) = *(_QWORD *)v225;
      else
        v225 = sub_1C484358C((uint64_t)v222 + 128, 72, 3);
      *(_QWORD *)&v327 = v326;
      if (v326)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v326, v326, (uint64_t)&v327);
        v326 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v225, v222, v224, (unsigned __int8 **)&v327, 0);
      if ((_QWORD)v327)
        llvm::MetadataTracking::untrack((uint64_t)&v327, (unsigned __int8 *)v327);
      if (v326)
        llvm::MetadataTracking::untrack((uint64_t)&v326, v326);
      v275 = *(_QWORD *)(v219 + 40);
      *(_QWORD *)(v225 + 24) = v275;
      v276 = *(_QWORD *)(v275 + 32);
      v277 = *(unsigned int *)(v225 + 40);
      if ((_DWORD)v277)
      {
        v307 = *(_QWORD *)(v225 + 32);
        v308 = *(_QWORD *)(v276 + 40);
        v309 = 32 * v277;
        do
        {
          if (!*(_BYTE *)v307)
          {
            v310 = *(unsigned int *)(v307 + 4);
            if ((int)v310 >= 0)
              v311 = (uint64_t *)(*(_QWORD *)(v308 + 272) + 8 * v310);
            else
              v311 = (uint64_t *)(*(_QWORD *)(v308 + 24) + 16 * (v310 & 0x7FFFFFFF) + 8);
            v312 = *v311;
            if (*v311)
            {
              v313 = *(_QWORD *)(v312 + 16);
              *(_QWORD *)(v312 + 16) = v307;
              *(_QWORD *)(v307 + 16) = v313;
              if ((*(_BYTE *)(v307 + 3) & 1) != 0)
              {
                *(_QWORD *)(v307 + 24) = v312;
              }
              else
              {
                *(_QWORD *)(v307 + 24) = 0;
                v311 = (uint64_t *)(v313 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v307 + 16) = v307;
              *(_QWORD *)(v307 + 24) = 0;
            }
            *v311 = v307;
          }
          v307 += 32;
          v309 -= 32;
        }
        while (v309);
      }
      v278 = *(_QWORD *)(v276 + 728);
      if (v278)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v278 + 24))(v278, v225);
      v279 = *v220 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v225 = v279 | *(_QWORD *)v225 & 7;
      *(_QWORD *)(v225 + 8) = v220;
      *(_QWORD *)(v279 + 8) = v225;
      *v220 = *v220 & 7 | v225;
      *((_QWORD *)&v327 + 1) = 0;
      v328 = 0uLL;
      LODWORD(v327) = 0x1000000;
      DWORD1(v327) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v225, v222, (const llvm::MachineOperand *)&v327);
      *((_QWORD *)&v327 + 1) = 0;
      v328 = 0uLL;
      LODWORD(v327) = 0;
      DWORD1(v327) = v324;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v225, v222, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v225, v222, (const llvm::MachineOperand *)&v327);
      HIDWORD(v327) = 0;
      v328 = 0uLL;
      LODWORD(v327) = 0;
      *(_QWORD *)((char *)&v327 + 4) = v324 + 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v225, v222, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v225, v222, (const llvm::MachineOperand *)&v327);
      v280 = a1[4];
      v281 = *(_QWORD *)(v280 + 640);
      v282 = *(unint64_t **)(v280 + 648);
      v283 = *(_QWORD *)(a1[12] + 8);
      v284 = *(llvm::MachineFunction **)(v281 + 32);
      v285 = (unsigned __int8 *)a1[9];
      v326 = v285;
      if (v285)
        llvm::MetadataTracking::track((uint64_t)&v326, v285, 2);
      v286 = v283 + 864;
      v287 = *((_QWORD *)v284 + 28);
      if (v287)
        *((_QWORD *)v284 + 28) = *(_QWORD *)v287;
      else
        v287 = sub_1C484358C((uint64_t)v284 + 128, 72, 3);
      *(_QWORD *)&v327 = v326;
      if (v326)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v326, v326, (uint64_t)&v327);
        v326 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v287, v284, v286, (unsigned __int8 **)&v327, 0);
      if ((_QWORD)v327)
        llvm::MetadataTracking::untrack((uint64_t)&v327, (unsigned __int8 *)v327);
      if (v326)
        llvm::MetadataTracking::untrack((uint64_t)&v326, v326);
      v288 = *(_QWORD *)(v281 + 40);
      *(_QWORD *)(v287 + 24) = v288;
      v289 = *(_QWORD *)(v288 + 32);
      v290 = *(unsigned int *)(v287 + 40);
      if ((_DWORD)v290)
      {
        v314 = *(_QWORD *)(v287 + 32);
        v315 = *(_QWORD *)(v289 + 40);
        v316 = 32 * v290;
        do
        {
          if (!*(_BYTE *)v314)
          {
            v317 = *(unsigned int *)(v314 + 4);
            if ((int)v317 >= 0)
              v318 = (uint64_t *)(*(_QWORD *)(v315 + 272) + 8 * v317);
            else
              v318 = (uint64_t *)(*(_QWORD *)(v315 + 24) + 16 * (v317 & 0x7FFFFFFF) + 8);
            v319 = *v318;
            if (*v318)
            {
              v320 = *(_QWORD *)(v319 + 16);
              *(_QWORD *)(v319 + 16) = v314;
              *(_QWORD *)(v314 + 16) = v320;
              if ((*(_BYTE *)(v314 + 3) & 1) != 0)
              {
                *(_QWORD *)(v314 + 24) = v319;
              }
              else
              {
                *(_QWORD *)(v314 + 24) = 0;
                v318 = (uint64_t *)(v320 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v314 + 16) = v314;
              *(_QWORD *)(v314 + 24) = 0;
            }
            *v318 = v314;
          }
          v314 += 32;
          v316 -= 32;
        }
        while (v316);
      }
      v291 = *(_QWORD *)(v289 + 728);
      if (v291)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v291 + 24))(v291, v287);
      v292 = *v282 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v287 = v292 | *(_QWORD *)v287 & 7;
      *(_QWORD *)(v287 + 8) = v282;
      *(_QWORD *)(v292 + 8) = v287;
      *v282 = *v282 & 7 | v287;
      *((_QWORD *)&v327 + 1) = 0;
      v328 = 0uLL;
      LODWORD(v327) = 0x1000000;
      DWORD1(v327) = v216;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v287, v284, (const llvm::MachineOperand *)&v327);
      HIDWORD(v327) = 0;
      v328 = 0uLL;
      LODWORD(v327) = 0;
      *(_QWORD *)((char *)&v327 + 4) = v324 + 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v287, v284, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v287, v284, (const llvm::MachineOperand *)&v327);
      HIDWORD(v327) = 0;
      v328 = 0uLL;
      LODWORD(v327) = 0;
      *(_QWORD *)((char *)&v327 + 4) = v324 + 3;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v287, v284, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 2;
      v272 = (llvm::MachineInstr *)v287;
      v273 = v284;
      goto LABEL_436;
    }
    IncompleteVirtualRegister = 0;
    goto LABEL_437;
  }
  v119 = 0;
  v321 = 0;
  while (llvm::Constant::isZeroValue((llvm::Constant *)a2))
  {
    v120 = a1[4];
    v121 = *(_QWORD *)(v120 + 640);
    v122 = *(unint64_t **)(v120 + 648);
    v123 = *(_QWORD *)(a1[12] + 8);
    if (v322)
    {
      v124 = *(llvm::MachineFunction **)(v121 + 32);
      v125 = (unsigned __int8 *)a1[9];
      v326 = v125;
      if (v125)
        llvm::MetadataTracking::track((uint64_t)&v326, v125, 2);
      v126 = *((_QWORD *)v124 + 28);
      if (v126)
        *((_QWORD *)v124 + 28) = *(_QWORD *)v126;
      else
        v126 = sub_1C484358C((uint64_t)v124 + 128, 72, 3);
      *(_QWORD *)&v327 = v326;
      if (v326)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v326, v326, (uint64_t)&v327);
        v326 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v126, v124, v123 + 48720, (unsigned __int8 **)&v327, 0);
      if ((_QWORD)v327)
        llvm::MetadataTracking::untrack((uint64_t)&v327, (unsigned __int8 *)v327);
      if (v326)
        llvm::MetadataTracking::untrack((uint64_t)&v326, v326);
      v146 = *(_QWORD *)(v121 + 40);
      *(_QWORD *)(v126 + 24) = v146;
      v147 = *(_QWORD *)(v146 + 32);
      v148 = *(unsigned int *)(v126 + 40);
      if ((_DWORD)v148)
      {
        v163 = *(_QWORD *)(v126 + 32);
        v164 = *(_QWORD *)(v147 + 40);
        v165 = 32 * v148;
        do
        {
          if (!*(_BYTE *)v163)
          {
            v166 = *(unsigned int *)(v163 + 4);
            if ((int)v166 >= 0)
              v167 = (uint64_t *)(*(_QWORD *)(v164 + 272) + 8 * v166);
            else
              v167 = (uint64_t *)(*(_QWORD *)(v164 + 24) + 16 * (v166 & 0x7FFFFFFF) + 8);
            v168 = *v167;
            if (*v167)
            {
              v169 = *(_QWORD *)(v168 + 16);
              *(_QWORD *)(v168 + 16) = v163;
              *(_QWORD *)(v163 + 16) = v169;
              if ((*(_BYTE *)(v163 + 3) & 1) != 0)
              {
                *(_QWORD *)(v163 + 24) = v168;
              }
              else
              {
                *(_QWORD *)(v163 + 24) = 0;
                v167 = (uint64_t *)(v169 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v163 + 16) = v163;
              *(_QWORD *)(v163 + 24) = 0;
            }
            *v167 = v163;
          }
          v163 += 32;
          v165 -= 32;
        }
        while (v165);
      }
      v149 = *(_QWORD *)(v147 + 728);
      if (v149)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v149 + 24))(v149, v126);
      v150 = *v122 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v126 = v150 | *(_QWORD *)v126 & 7;
      *(_QWORD *)(v126 + 8) = v122;
      *(_QWORD *)(v150 + 8) = v126;
      *v122 = *v122 & 7 | v126;
      HIDWORD(v327) = 0;
      v328 = 0uLL;
      LODWORD(v327) = 0x1000000;
      *(_QWORD *)((char *)&v327 + 4) = v119 + v324;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v126, v124, (const llvm::MachineOperand *)&v327);
      v325 = (llvm::MachineInstr *)v126;
      v326 = (unsigned __int8 *)v124;
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v126, v124, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v126, v124, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v126, v124, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v126, v124, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 0x100000000;
    }
    else
    {
      v124 = *(llvm::MachineFunction **)(v121 + 32);
      v131 = (unsigned __int8 *)a1[9];
      v326 = v131;
      if (v131)
        llvm::MetadataTracking::track((uint64_t)&v326, v131, 2);
      v126 = *((_QWORD *)v124 + 28);
      if (v126)
        *((_QWORD *)v124 + 28) = *(_QWORD *)v126;
      else
        v126 = sub_1C484358C((uint64_t)v124 + 128, 72, 3);
      *(_QWORD *)&v327 = v326;
      if (v326)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v326, v326, (uint64_t)&v327);
        v326 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v126, v124, v123 + 69360, (unsigned __int8 **)&v327, 0);
      if ((_QWORD)v327)
        llvm::MetadataTracking::untrack((uint64_t)&v327, (unsigned __int8 *)v327);
      if (v326)
        llvm::MetadataTracking::untrack((uint64_t)&v326, v326);
      v151 = *(_QWORD *)(v121 + 40);
      *(_QWORD *)(v126 + 24) = v151;
      v152 = *(_QWORD *)(v151 + 32);
      v153 = *(unsigned int *)(v126 + 40);
      if ((_DWORD)v153)
      {
        v170 = *(_QWORD *)(v126 + 32);
        v171 = *(_QWORD *)(v152 + 40);
        v172 = 32 * v153;
        do
        {
          if (!*(_BYTE *)v170)
          {
            v173 = *(unsigned int *)(v170 + 4);
            if ((int)v173 >= 0)
              v174 = (uint64_t *)(*(_QWORD *)(v171 + 272) + 8 * v173);
            else
              v174 = (uint64_t *)(*(_QWORD *)(v171 + 24) + 16 * (v173 & 0x7FFFFFFF) + 8);
            v175 = *v174;
            if (*v174)
            {
              v176 = *(_QWORD *)(v175 + 16);
              *(_QWORD *)(v175 + 16) = v170;
              *(_QWORD *)(v170 + 16) = v176;
              if ((*(_BYTE *)(v170 + 3) & 1) != 0)
              {
                *(_QWORD *)(v170 + 24) = v175;
              }
              else
              {
                *(_QWORD *)(v170 + 24) = 0;
                v174 = (uint64_t *)(v176 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v170 + 16) = v170;
              *(_QWORD *)(v170 + 24) = 0;
            }
            *v174 = v170;
          }
          v170 += 32;
          v172 -= 32;
        }
        while (v172);
      }
      v154 = *(_QWORD *)(v152 + 728);
      if (v154)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v154 + 24))(v154, v126);
      v155 = *v122 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v126 = v155 | *(_QWORD *)v126 & 7;
      *(_QWORD *)(v126 + 8) = v122;
      *(_QWORD *)(v155 + 8) = v126;
      *v122 = *v122 & 7 | v126;
      HIDWORD(v327) = 0;
      v328 = 0uLL;
      LODWORD(v327) = 0x1000000;
      *(_QWORD *)((char *)&v327 + 4) = v119 + v324;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v126, v124, (const llvm::MachineOperand *)&v327);
      v325 = (llvm::MachineInstr *)v126;
      v326 = (unsigned __int8 *)v124;
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v126, v124, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v126, v124, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v126, v124, (const llvm::MachineOperand *)&v327);
      LODWORD(v327) = 1;
      *((_QWORD *)&v327 + 1) = 0;
      *(_QWORD *)&v328 = 0;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v126, v124, (const llvm::MachineOperand *)&v327);
    v327 = 0u;
    v328 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v126, v124, (const llvm::MachineOperand *)&v327);
    LODWORD(v327) = 1;
    *((_QWORD *)&v327 + 1) = 0;
    *(_QWORD *)&v328 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v126, v124, (const llvm::MachineOperand *)&v327);
    v144 = v325;
    v145 = (llvm::MachineFunction *)v326;
    v327 = 0u;
    v328 = 0u;
LABEL_205:
    llvm::MachineInstr::addOperand(v144, v145, (const llvm::MachineOperand *)&v327);
    v119 = (llvm::Type *)((_DWORD)v119 + 1);
    if ((_DWORD)v119 == v323)
      goto LABEL_248;
  }
  v127 = llvm::Constant::getAggregateElement((llvm::Constant *)a2, v119);
  v128 = *((unsigned __int8 *)v127 + 16) - 11;
  if (v128 > 1 || v321 != 0)
  {
    if (v128 >= 2)
      v130 = (*(uint64_t (**)(_QWORD *, llvm::UndefValue *))(*a1 + 104))(a1, v127);
    else
      v130 = v321;
    goto LABEL_167;
  }
  v130 = sub_1C6126ACC((uint64_t)a1, v322, 1);
  v321 = v130;
  if (v130)
  {
LABEL_167:
    v132 = a1[4];
    v133 = *(_QWORD *)(v132 + 640);
    v134 = *(unint64_t **)(v132 + 648);
    v135 = *(_QWORD *)(a1[12] + 8);
    v136 = *(llvm::MachineFunction **)(v133 + 32);
    v137 = (unsigned __int8 *)a1[9];
    v326 = v137;
    if (v137)
      llvm::MetadataTracking::track((uint64_t)&v326, v137, 2);
    v138 = *((_QWORD *)v136 + 28);
    if (v138)
      *((_QWORD *)v136 + 28) = *(_QWORD *)v138;
    else
      v138 = sub_1C484358C((uint64_t)v136 + 128, 72, 3);
    *(_QWORD *)&v327 = v326;
    if (v326)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v326, v326, (uint64_t)&v327);
      v326 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v138, v136, v135 + 912, (unsigned __int8 **)&v327, 0);
    if ((_QWORD)v327)
      llvm::MetadataTracking::untrack((uint64_t)&v327, (unsigned __int8 *)v327);
    if (v326)
      llvm::MetadataTracking::untrack((uint64_t)&v326, v326);
    v139 = *(_QWORD *)(v133 + 40);
    *(_QWORD *)(v138 + 24) = v139;
    v140 = *(_QWORD *)(v139 + 32);
    v141 = *(unsigned int *)(v138 + 40);
    if ((_DWORD)v141)
    {
      v156 = *(_QWORD *)(v138 + 32);
      v157 = *(_QWORD *)(v140 + 40);
      v158 = 32 * v141;
      do
      {
        if (!*(_BYTE *)v156)
        {
          v159 = *(unsigned int *)(v156 + 4);
          if ((int)v159 >= 0)
            v160 = (uint64_t *)(*(_QWORD *)(v157 + 272) + 8 * v159);
          else
            v160 = (uint64_t *)(*(_QWORD *)(v157 + 24) + 16 * (v159 & 0x7FFFFFFF) + 8);
          v161 = *v160;
          if (*v160)
          {
            v162 = *(_QWORD *)(v161 + 16);
            *(_QWORD *)(v161 + 16) = v156;
            *(_QWORD *)(v156 + 16) = v162;
            if ((*(_BYTE *)(v156 + 3) & 1) != 0)
            {
              *(_QWORD *)(v156 + 24) = v161;
            }
            else
            {
              *(_QWORD *)(v156 + 24) = 0;
              v160 = (uint64_t *)(v162 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v156 + 16) = v156;
            *(_QWORD *)(v156 + 24) = 0;
          }
          *v160 = v156;
        }
        v156 += 32;
        v158 -= 32;
      }
      while (v158);
    }
    v142 = *(_QWORD *)(v140 + 728);
    if (v142)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v142 + 24))(v142, v138);
    v143 = *v134 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v138 = v143 | *(_QWORD *)v138 & 7;
    *(_QWORD *)(v138 + 8) = v134;
    *(_QWORD *)(v143 + 8) = v138;
    *v134 = *v134 & 7 | v138;
    HIDWORD(v327) = 0;
    v328 = 0uLL;
    *(_QWORD *)((char *)&v327 + 4) = v119 + v324;
    LODWORD(v327) = 0x1000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v138, v136, (const llvm::MachineOperand *)&v327);
    *((_QWORD *)&v327 + 1) = 0;
    LODWORD(v327) = 0;
    DWORD1(v327) = v130;
    v328 = 0uLL;
    v144 = (llvm::MachineInstr *)v138;
    v145 = v136;
    goto LABEL_205;
  }
  IncompleteVirtualRegister = 0;
LABEL_437:
  if (v329 != v331)
    free(v329);
  return IncompleteVirtualRegister;
}

uint64_t sub_1C4789DF4(uint64_t a1, void **this)
{
  int v3;
  int v4;
  uint64_t v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  const void **v8;
  uint64_t v10;
  void *v11;
  int v12;

  v3 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v3 == 16)
  {
    if (*((_DWORD *)this + 2) > 0x40u || *(_DWORD *)(a1 + 32) > 0x40u)
    {
      v8 = (const void **)(a1 + 24);
      if ((void **)(a1 + 24) != this)
      {
        llvm::APInt::reallocate((uint64_t)this, *(_DWORD *)(a1 + 32));
        v10 = *((unsigned int *)this + 2);
        if (v10 <= 0x40)
          *this = (void *)*v8;
        else
          memcpy(*this, *v8, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8);
      }
      return 1;
    }
    *this = *(void **)(a1 + 24);
    v4 = *(_DWORD *)(a1 + 32);
LABEL_14:
    *((_DWORD *)this + 2) = v4;
    return 1;
  }
  v5 = 0;
  if (a1 && v3 == 17)
  {
    v7 = *(void **)(a1 + 32);
    v6 = (llvm::detail::DoubleAPFloat *)(a1 + 32);
    if (v7 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v6, (unsigned int *)&v11);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v6, (unsigned int *)&v11);
    if (*((_DWORD *)this + 2) >= 0x41u && *this)
      MEMORY[0x1CAA32F9C](*this, 0x1000C8000313F17);
    *this = v11;
    v4 = v12;
    goto LABEL_14;
  }
  return v5;
}

uint64_t sub_1C4789F18(_QWORD *a1, int a2, int a3, unsigned int a4)
{
  int v5;
  _QWORD *v7;
  uint64_t v8;
  _UNKNOWN ***v9;
  _UNKNOWN ***v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t IncompleteVirtualRegister;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  llvm::MachineFunction *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  llvm::MachineFunction *v44;
  unsigned __int8 *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  llvm::MachineFunction *v69;
  unsigned __int8 *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  llvm::MachineFunction *v78;
  unsigned __int8 *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  uint64_t v94;
  llvm::MachineFunction *v95;
  unsigned __int8 *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  uint64_t v131;
  llvm::MachineFunction *v132;
  unsigned __int8 *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  unsigned int v156;
  _UNKNOWN ***v157;
  _UNKNOWN ***v158;
  int v159;
  int v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  unsigned int v165;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 *v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;

  v5 = a3;
  v7 = (_QWORD *)a1[6];
  v8 = v7[3];
  v9 = (_UNKNOWN ***)(*(_QWORD *)(v8 + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  if (a3)
    v10 = (_UNKNOWN ***)(*(_QWORD *)(v8 + 16 * (a3 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  else
    v10 = (_UNKNOWN ***)(*(_QWORD *)(v8 + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v7 + 16) + 176))(*(_QWORD *)(*v7 + 16));
  v12 = *(_DWORD *)(*(_QWORD *)(v11 + 264)
                  + 24
                  * (*((unsigned __int16 *)*v9 + 12)
                   + *(_DWORD *)(v11 + 272) * ((*(_QWORD *)(v11 + 248) - *(_QWORD *)(v11 + 240)) >> 3)));
  v13 = *(_QWORD *)(*(_QWORD *)a1[6] + 16);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 176))(v13);
  v15 = *(_DWORD *)(*(_QWORD *)(v14 + 264)
                  + 24
                  * (*((unsigned __int16 *)*v10 + 12)
                   + *(_DWORD *)(v14 + 272) * ((*(_QWORD *)(v14 + 248) - *(_QWORD *)(v14 + 240)) >> 3)));
  if (v12)
    v16 = v15 == 0;
  else
    v16 = 1;
  if (v16)
    return 0;
  v170 = 0;
  v171 = 0;
  v18 = sub_1C478B5A8(v10, (int *)&v171 + 1, (int *)&v170 + 1);
  IncompleteVirtualRegister = 0;
  if (!v18)
    return IncompleteVirtualRegister;
  IncompleteVirtualRegister = 0;
  if (!sub_1C478B5A8(v9, (int *)&v171, (int *)&v170))
    return IncompleteVirtualRegister;
  v162 = v5;
  if (!v5 && v12 <= v15)
  {
    v19 = a1[6];
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v19, "", 0);
    v20 = 16 * (IncompleteVirtualRegister & 0x7FFFFFFF);
    *(_QWORD *)(*(_QWORD *)(v19 + 24) + v20) = v9;
    v21 = *(_QWORD *)(v19 + 8);
    if (v21)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 24))(v21, IncompleteVirtualRegister);
      if (!(_DWORD)IncompleteVirtualRegister)
        return IncompleteVirtualRegister;
    }
    else if (!(_DWORD)IncompleteVirtualRegister)
    {
      return IncompleteVirtualRegister;
    }
    v167 = IncompleteVirtualRegister;
    v159 = IncompleteVirtualRegister;
    v157 = v9;
    v22 = a1[4];
    IncompleteVirtualRegister = *(_QWORD *)(v22 + 640);
    v23 = *(unint64_t **)(v22 + 648);
    v24 = *(_QWORD *)(a1[12] + 8);
    v25 = *(llvm::MachineFunction **)(IncompleteVirtualRegister + 32);
    v26 = (unsigned __int8 *)a1[9];
    v172 = v26;
    if (v26)
      llvm::MetadataTracking::track((uint64_t)&v172, v26, 2);
    v27 = v24 + 480;
    v28 = *((_QWORD *)v25 + 28);
    if (v28)
      *((_QWORD *)v25 + 28) = *(_QWORD *)v28;
    else
      v28 = sub_1C484358C((uint64_t)v25 + 128, 72, 3);
    *(_QWORD *)&v173 = v172;
    if (v172)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v172, v172, (uint64_t)&v173);
      v172 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v28, v25, v27, (unsigned __int8 **)&v173, 0);
    if ((_QWORD)v173)
      llvm::MetadataTracking::untrack((uint64_t)&v173, (unsigned __int8 *)v173);
    v5 = 0;
    if (v172)
      llvm::MetadataTracking::untrack((uint64_t)&v172, v172);
    v29 = *(_QWORD *)(IncompleteVirtualRegister + 40);
    *(_QWORD *)(v28 + 24) = v29;
    v30 = *(_QWORD *)(v29 + 32);
    v31 = *(unsigned int *)(v28 + 40);
    LODWORD(IncompleteVirtualRegister) = v159;
    if ((_DWORD)v31)
    {
      v147 = *(_QWORD *)(v28 + 32);
      v148 = *(_QWORD *)(v30 + 40);
      v149 = 32 * v31;
      do
      {
        if (!*(_BYTE *)v147)
        {
          v150 = *(unsigned int *)(v147 + 4);
          if ((int)v150 >= 0)
            v151 = (uint64_t *)(*(_QWORD *)(v148 + 272) + 8 * v150);
          else
            v151 = (uint64_t *)(*(_QWORD *)(v148 + 24) + 16 * (v150 & 0x7FFFFFFF) + 8);
          v152 = *v151;
          if (*v151)
          {
            v153 = *(_QWORD *)(v152 + 16);
            *(_QWORD *)(v152 + 16) = v147;
            *(_QWORD *)(v147 + 16) = v153;
            if ((*(_BYTE *)(v147 + 3) & 1) != 0)
            {
              *(_QWORD *)(v147 + 24) = v152;
            }
            else
            {
              *(_QWORD *)(v147 + 24) = 0;
              v151 = (uint64_t *)(v153 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v147 + 16) = v147;
            *(_QWORD *)(v147 + 24) = 0;
          }
          *v151 = v147;
        }
        v147 += 32;
        v149 -= 32;
      }
      while (v149);
    }
    v32 = *(_QWORD *)(v30 + 728);
    if (v32)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v32 + 24))(v32, v28);
    v33 = *v23 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v28 = v33 | *(_QWORD *)v28 & 7;
    *(_QWORD *)(v28 + 8) = v23;
    *(_QWORD *)(v33 + 8) = v28;
    *v23 = *v23 & 7 | v28;
    *((_QWORD *)&v173 + 1) = 0;
    v174 = 0;
    v175 = 0;
    LODWORD(v173) = 0x1000000;
    DWORD1(v173) = v159;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v28, v25, (const llvm::MachineOperand *)&v173);
    v34 = (_QWORD *)a1[6];
    if ((_UNKNOWN ***)(*(_QWORD *)(v34[3] + v20) & 0xFFFFFFFFFFFFFFF8) == &off_1E7F98468)
      sub_1C51A3F30(v34, v167, (uint64_t)&off_1E7F98468, (uint64_t)&off_1E7F984F0, 0);
    v9 = v157;
  }
  if (v12 > v15)
  {
    IncompleteVirtualRegister = 1;
    if (v15 > a4)
      return IncompleteVirtualRegister;
    v158 = v9;
    v169 = 0;
    v59 = 0;
    v161 = HIDWORD(v170);
    v156 = v170;
    v154 = a4 / v15;
    v155 = v170 - 1;
    while (1)
    {
      v60 = v59 % v156;
      v61 = v59 / v161 + v5;
      if (!v5)
        v61 = 0;
      v164 = v61;
      if (v60)
      {
        if (v61)
          goto LABEL_83;
      }
      else
      {
        v72 = a1[6];
        v169 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v72, "", 0);
        *(_QWORD *)(*(_QWORD *)(v72 + 24) + 16 * (v169 & 0x7FFFFFFF)) = v158;
        v73 = *(_QWORD *)(v72 + 8);
        if (v73)
          (*(void (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73);
        v74 = a1[4];
        v75 = *(_QWORD *)(v74 + 640);
        v76 = *(unint64_t **)(v74 + 648);
        v77 = *(_QWORD *)(a1[12] + 8);
        v78 = *(llvm::MachineFunction **)(v75 + 32);
        v79 = (unsigned __int8 *)a1[9];
        v172 = v79;
        if (v79)
          llvm::MetadataTracking::track((uint64_t)&v172, v79, 2);
        v80 = *((_QWORD *)v78 + 28);
        if (v80)
          *((_QWORD *)v78 + 28) = *(_QWORD *)v80;
        else
          v80 = sub_1C484358C((uint64_t)v78 + 128, 72, 3);
        *(_QWORD *)&v173 = v172;
        if (v172)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v172, v172, (uint64_t)&v173);
          v172 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v80, v78, v77 + 480, (unsigned __int8 **)&v173, 0);
        if ((_QWORD)v173)
          llvm::MetadataTracking::untrack((uint64_t)&v173, (unsigned __int8 *)v173);
        if (v172)
          llvm::MetadataTracking::untrack((uint64_t)&v172, v172);
        v86 = *(_QWORD *)(v75 + 40);
        *(_QWORD *)(v80 + 24) = v86;
        v87 = *(_QWORD *)(v86 + 32);
        v88 = *(unsigned int *)(v80 + 40);
        if ((_DWORD)v88)
        {
          v117 = *(_QWORD *)(v80 + 32);
          v118 = *(_QWORD *)(v87 + 40);
          v119 = 32 * v88;
          do
          {
            if (!*(_BYTE *)v117)
            {
              v120 = *(unsigned int *)(v117 + 4);
              if ((int)v120 >= 0)
                v121 = (uint64_t *)(*(_QWORD *)(v118 + 272) + 8 * v120);
              else
                v121 = (uint64_t *)(*(_QWORD *)(v118 + 24) + 16 * (v120 & 0x7FFFFFFF) + 8);
              v122 = *v121;
              if (*v121)
              {
                v123 = *(_QWORD *)(v122 + 16);
                *(_QWORD *)(v122 + 16) = v117;
                *(_QWORD *)(v117 + 16) = v123;
                if ((*(_BYTE *)(v117 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v117 + 24) = v122;
                }
                else
                {
                  *(_QWORD *)(v117 + 24) = 0;
                  v121 = (uint64_t *)(v123 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v117 + 16) = v117;
                *(_QWORD *)(v117 + 24) = 0;
              }
              *v121 = v117;
            }
            v117 += 32;
            v119 -= 32;
          }
          while (v119);
        }
        v89 = *(_QWORD *)(v87 + 728);
        if (v89)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v89 + 24))(v89, v80);
        v90 = *v76 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v80 = v90 | *(_QWORD *)v80 & 7;
        *(_QWORD *)(v80 + 8) = v76;
        *(_QWORD *)(v90 + 8) = v80;
        *v76 = *v76 & 7 | v80;
        *((_QWORD *)&v173 + 1) = 0;
        v174 = 0;
        v175 = 0;
        LODWORD(v173) = 0x1000000;
        DWORD1(v173) = v169;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v78, (const llvm::MachineOperand *)&v173);
        v60 = 0;
        if (v164)
        {
LABEL_83:
          v62 = a1[6];
          v63 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v62, "", 0);
          *(_QWORD *)(*(_QWORD *)(v62 + 24) + 16 * (v63 & 0x7FFFFFFF)) = v158;
          v64 = *(_QWORD *)(v62 + 8);
          if (v64)
            (*(void (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64);
          v65 = a1[4];
          v66 = *(_QWORD *)(v65 + 640);
          v67 = *(unint64_t **)(v65 + 648);
          v68 = *(_QWORD *)(a1[12] + 8);
          v69 = *(llvm::MachineFunction **)(v66 + 32);
          v70 = (unsigned __int8 *)a1[9];
          v172 = v70;
          if (v70)
            llvm::MetadataTracking::track((uint64_t)&v172, v70, 2);
          v71 = *((_QWORD *)v69 + 28);
          if (v71)
            *((_QWORD *)v69 + 28) = *(_QWORD *)v71;
          else
            v71 = sub_1C484358C((uint64_t)v69 + 128, 72, 3);
          *(_QWORD *)&v173 = v172;
          if (v172)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v172, v172, (uint64_t)&v173);
            v172 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v71, v69, v68 + 432, (unsigned __int8 **)&v173, 0);
          if ((_QWORD)v173)
            llvm::MetadataTracking::untrack((uint64_t)&v173, (unsigned __int8 *)v173);
          if (v172)
            llvm::MetadataTracking::untrack((uint64_t)&v172, v172);
          v81 = *(_QWORD *)(v66 + 40);
          *(_QWORD *)(v71 + 24) = v81;
          v82 = *(_QWORD *)(v81 + 32);
          v83 = *(unsigned int *)(v71 + 40);
          if ((_DWORD)v83)
          {
            v103 = *(_QWORD *)(v71 + 32);
            v104 = *(_QWORD *)(v82 + 40);
            v105 = 32 * v83;
            do
            {
              if (!*(_BYTE *)v103)
              {
                v106 = *(unsigned int *)(v103 + 4);
                if ((int)v106 >= 0)
                  v107 = (uint64_t *)(*(_QWORD *)(v104 + 272) + 8 * v106);
                else
                  v107 = (uint64_t *)(*(_QWORD *)(v104 + 24) + 16 * (v106 & 0x7FFFFFFF) + 8);
                v108 = *v107;
                if (*v107)
                {
                  v109 = *(_QWORD *)(v108 + 16);
                  *(_QWORD *)(v108 + 16) = v103;
                  *(_QWORD *)(v103 + 16) = v109;
                  if ((*(_BYTE *)(v103 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v103 + 24) = v108;
                  }
                  else
                  {
                    *(_QWORD *)(v103 + 24) = 0;
                    v107 = (uint64_t *)(v109 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v103 + 16) = v103;
                  *(_QWORD *)(v103 + 24) = 0;
                }
                *v107 = v103;
              }
              v103 += 32;
              v105 -= 32;
            }
            while (v105);
          }
          v84 = *(_QWORD *)(v82 + 728);
          if (v84)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v84 + 24))(v84, v71);
          v85 = *v67 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v71 = v85 | *(_QWORD *)v71 & 7;
          *(_QWORD *)(v71 + 8) = v67;
          *(_QWORD *)(v85 + 8) = v71;
          *v67 = *v67 & 7 | v71;
          *((_QWORD *)&v173 + 1) = 0;
          v174 = 0;
          v175 = 0;
          LODWORD(v173) = 0x1000000;
          DWORD1(v173) = v63;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v69, (const llvm::MachineOperand *)&v173);
          *((_QWORD *)&v173 + 1) = 0;
          LODWORD(v173) = 0;
          DWORD1(v173) = v169;
          v174 = 0;
          v175 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v69, (const llvm::MachineOperand *)&v173);
          *((_QWORD *)&v173 + 1) = 0;
          v174 = 0;
          v175 = 0;
          LODWORD(v173) = ((WORD2(v171) + (unsigned __int16)(v59 % v161)) & 0xFFF) << 8;
          DWORD1(v173) = v164;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v69, (const llvm::MachineOperand *)&v173);
          v60 = v59 % v156;
          LODWORD(v173) = 1;
          *((_QWORD *)&v173 + 1) = 0;
          v174 = v171 + v59 % v156;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v69, (const llvm::MachineOperand *)&v173);
          v169 = v63;
          v5 = v162;
          goto LABEL_118;
        }
      }
      v169 = 0;
LABEL_118:
      if (v60 == v155)
      {
        v91 = a1[4];
        v92 = *(_QWORD *)(v91 + 640);
        v93 = *(unint64_t **)(v91 + 648);
        v94 = *(_QWORD *)(a1[12] + 8);
        v95 = *(llvm::MachineFunction **)(v92 + 32);
        v96 = (unsigned __int8 *)a1[9];
        v172 = v96;
        if (v96)
          llvm::MetadataTracking::track((uint64_t)&v172, v96, 2);
        v97 = *((_QWORD *)v95 + 28);
        if (v97)
          *((_QWORD *)v95 + 28) = *(_QWORD *)v97;
        else
          v97 = sub_1C484358C((uint64_t)v95 + 128, 72, 3);
        *(_QWORD *)&v173 = v172;
        if (v172)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v172, v172, (uint64_t)&v173);
          v172 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v97, v95, v94 + 912, (unsigned __int8 **)&v173, 0);
        if ((_QWORD)v173)
          llvm::MetadataTracking::untrack((uint64_t)&v173, (unsigned __int8 *)v173);
        if (v172)
          llvm::MetadataTracking::untrack((uint64_t)&v172, v172);
        v98 = *(_QWORD *)(v92 + 40);
        *(_QWORD *)(v97 + 24) = v98;
        v99 = *(_QWORD *)(v98 + 32);
        v100 = *(unsigned int *)(v97 + 40);
        if ((_DWORD)v100)
        {
          v110 = *(_QWORD *)(v97 + 32);
          v111 = *(_QWORD *)(v99 + 40);
          v112 = 32 * v100;
          do
          {
            if (!*(_BYTE *)v110)
            {
              v113 = *(unsigned int *)(v110 + 4);
              if ((int)v113 >= 0)
                v114 = (uint64_t *)(*(_QWORD *)(v111 + 272) + 8 * v113);
              else
                v114 = (uint64_t *)(*(_QWORD *)(v111 + 24) + 16 * (v113 & 0x7FFFFFFF) + 8);
              v115 = *v114;
              if (*v114)
              {
                v116 = *(_QWORD *)(v115 + 16);
                *(_QWORD *)(v115 + 16) = v110;
                *(_QWORD *)(v110 + 16) = v116;
                if ((*(_BYTE *)(v110 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v110 + 24) = v115;
                }
                else
                {
                  *(_QWORD *)(v110 + 24) = 0;
                  v114 = (uint64_t *)(v116 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v110 + 16) = v110;
                *(_QWORD *)(v110 + 24) = 0;
              }
              *v114 = v110;
            }
            v110 += 32;
            v112 -= 32;
          }
          while (v112);
        }
        v101 = *(_QWORD *)(v99 + 728);
        if (v101)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v101 + 24))(v101, v97);
        v102 = *v93 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v97 = v102 | *(_QWORD *)v97 & 7;
        *(_QWORD *)(v97 + 8) = v93;
        *(_QWORD *)(v102 + 8) = v97;
        *v93 = *v93 & 7 | v97;
        HIDWORD(v173) = 0;
        v174 = 0;
        v175 = 0;
        *(_QWORD *)((char *)&v173 + 4) = v59 / v156 + a2;
        LODWORD(v173) = 0x1000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v97, v95, (const llvm::MachineOperand *)&v173);
        *((_QWORD *)&v173 + 1) = 0;
        LODWORD(v173) = 0;
        DWORD1(v173) = v169;
        v174 = 0;
        v175 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v97, v95, (const llvm::MachineOperand *)&v173);
      }
      if (++v59 == v154)
        return 1;
    }
  }
  v168 = a4 / v12;
  if (v12 < v15)
  {
    v160 = IncompleteVirtualRegister;
    if (v12 == 64)
    {
      HIDWORD(v171) = 50;
      HIDWORD(v170) = 64;
    }
    if (v12 <= a4)
    {
      v35 = 0;
      v36 = HIDWORD(v170);
      v37 = HIDWORD(v171);
      v163 = HIDWORD(v171);
      v165 = HIDWORD(v170);
      do
      {
        v38 = v35 / v36;
        if (v37 == 50)
        {
          if (v35)
            v39 = 72;
          else
            v39 = 50;
        }
        else
        {
          v39 = v35 % v36 + v37;
        }
        v40 = a1[4];
        v41 = *(_QWORD *)(v40 + 640);
        v42 = *(unint64_t **)(v40 + 648);
        v43 = *(_QWORD *)(a1[12] + 8);
        v44 = *(llvm::MachineFunction **)(v41 + 32);
        v45 = (unsigned __int8 *)a1[9];
        v172 = v45;
        if (v45)
          llvm::MetadataTracking::track((uint64_t)&v172, v45, 2);
        v46 = *((_QWORD *)v44 + 28);
        if (v46)
          *((_QWORD *)v44 + 28) = *(_QWORD *)v46;
        else
          v46 = sub_1C484358C((uint64_t)v44 + 128, 72, 3);
        *(_QWORD *)&v173 = v172;
        if (v172)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v172, v172, (uint64_t)&v173);
          v172 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v46, v44, v43 + 912, (unsigned __int8 **)&v173, 0);
        if ((_QWORD)v173)
          llvm::MetadataTracking::untrack((uint64_t)&v173, (unsigned __int8 *)v173);
        if (v172)
          llvm::MetadataTracking::untrack((uint64_t)&v172, v172);
        v47 = *(_QWORD *)(v41 + 40);
        *(_QWORD *)(v46 + 24) = v47;
        v48 = *(_QWORD *)(v47 + 32);
        v49 = *(unsigned int *)(v46 + 40);
        if ((_DWORD)v49)
        {
          v52 = *(_QWORD *)(v46 + 32);
          v53 = *(_QWORD *)(v48 + 40);
          v54 = 32 * v49;
          do
          {
            if (!*(_BYTE *)v52)
            {
              v55 = *(unsigned int *)(v52 + 4);
              if ((int)v55 >= 0)
                v56 = (uint64_t *)(*(_QWORD *)(v53 + 272) + 8 * v55);
              else
                v56 = (uint64_t *)(*(_QWORD *)(v53 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
              v57 = *v56;
              if (*v56)
              {
                v58 = *(_QWORD *)(v57 + 16);
                *(_QWORD *)(v57 + 16) = v52;
                *(_QWORD *)(v52 + 16) = v58;
                if ((*(_BYTE *)(v52 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v52 + 24) = v57;
                }
                else
                {
                  *(_QWORD *)(v52 + 24) = 0;
                  v56 = (uint64_t *)(v58 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v52 + 16) = v52;
                *(_QWORD *)(v52 + 24) = 0;
              }
              *v56 = v52;
            }
            v52 += 32;
            v54 -= 32;
          }
          while (v54);
        }
        v50 = *(_QWORD *)(v48 + 728);
        if (v50)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v50 + 24))(v50, v46);
        v51 = *v42 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v46 = v51 | *(_QWORD *)v46 & 7;
        *(_QWORD *)(v46 + 8) = v42;
        *(_QWORD *)(v51 + 8) = v46;
        *v42 = *v42 & 7 | v46;
        HIDWORD(v173) = 0;
        v174 = 0;
        v175 = 0;
        *(_QWORD *)((char *)&v173 + 4) = v35 + a2;
        LODWORD(v173) = 0x1000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v44, (const llvm::MachineOperand *)&v173);
        if (v162 && v38 + v162)
        {
          HIDWORD(v173) = 0;
          v174 = 0;
          v175 = 0;
          LODWORD(v173) = (v39 & 0xFFF) << 8;
          *(_QWORD *)((char *)&v173 + 4) = (v38 + v162);
        }
        else
        {
          *((_QWORD *)&v173 + 1) = 0;
          LODWORD(v173) = 0;
          DWORD1(v173) = v160;
          v174 = 0;
          v175 = 0;
        }
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v44, (const llvm::MachineOperand *)&v173);
        v37 = v163;
        v36 = v165;
        ++v35;
        IncompleteVirtualRegister = 1;
      }
      while (v35 != v168);
      return IncompleteVirtualRegister;
    }
    return 1;
  }
  if (v12 > a4)
    return 1;
  v125 = IncompleteVirtualRegister;
  v126 = 0;
  do
  {
    if (v5)
      v127 = v126 + v5;
    else
      v127 = v125;
    v128 = a1[4];
    v129 = *(_QWORD *)(v128 + 640);
    v130 = *(unint64_t **)(v128 + 648);
    v131 = *(_QWORD *)(a1[12] + 8);
    v132 = *(llvm::MachineFunction **)(v129 + 32);
    v133 = (unsigned __int8 *)a1[9];
    v172 = v133;
    if (v133)
      llvm::MetadataTracking::track((uint64_t)&v172, v133, 2);
    v134 = *((_QWORD *)v132 + 28);
    if (v134)
      *((_QWORD *)v132 + 28) = *(_QWORD *)v134;
    else
      v134 = sub_1C484358C((uint64_t)v132 + 128, 72, 3);
    *(_QWORD *)&v173 = v172;
    if (v172)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v172, v172, (uint64_t)&v173);
      v172 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v134, v132, v131 + 912, (unsigned __int8 **)&v173, 0);
    if ((_QWORD)v173)
      llvm::MetadataTracking::untrack((uint64_t)&v173, (unsigned __int8 *)v173);
    v5 = v162;
    if (v172)
      llvm::MetadataTracking::untrack((uint64_t)&v172, v172);
    v135 = *(_QWORD *)(v129 + 40);
    *(_QWORD *)(v134 + 24) = v135;
    v136 = *(_QWORD *)(v135 + 32);
    v137 = *(unsigned int *)(v134 + 40);
    if ((_DWORD)v137)
    {
      v140 = *(_QWORD *)(v134 + 32);
      v141 = *(_QWORD *)(v136 + 40);
      v142 = 32 * v137;
      do
      {
        if (!*(_BYTE *)v140)
        {
          v143 = *(unsigned int *)(v140 + 4);
          if ((int)v143 >= 0)
            v144 = (uint64_t *)(*(_QWORD *)(v141 + 272) + 8 * v143);
          else
            v144 = (uint64_t *)(*(_QWORD *)(v141 + 24) + 16 * (v143 & 0x7FFFFFFF) + 8);
          v145 = *v144;
          if (*v144)
          {
            v146 = *(_QWORD *)(v145 + 16);
            *(_QWORD *)(v145 + 16) = v140;
            *(_QWORD *)(v140 + 16) = v146;
            if ((*(_BYTE *)(v140 + 3) & 1) != 0)
            {
              *(_QWORD *)(v140 + 24) = v145;
            }
            else
            {
              *(_QWORD *)(v140 + 24) = 0;
              v144 = (uint64_t *)(v146 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v140 + 16) = v140;
            *(_QWORD *)(v140 + 24) = 0;
          }
          *v144 = v140;
        }
        v140 += 32;
        v142 -= 32;
      }
      while (v142);
    }
    v138 = *(_QWORD *)(v136 + 728);
    if (v138)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v138 + 24))(v138, v134);
    v139 = *v130 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v134 = v139 | *(_QWORD *)v134 & 7;
    *(_QWORD *)(v134 + 8) = v130;
    *(_QWORD *)(v139 + 8) = v134;
    *v130 = *v130 & 7 | v134;
    HIDWORD(v173) = 0;
    v174 = 0;
    v175 = 0;
    *(_QWORD *)((char *)&v173 + 4) = (v126 + a2);
    LODWORD(v173) = 0x1000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v134, v132, (const llvm::MachineOperand *)&v173);
    *((_QWORD *)&v173 + 1) = 0;
    LODWORD(v173) = 0;
    DWORD1(v173) = v127;
    v174 = 0;
    v175 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v134, v132, (const llvm::MachineOperand *)&v173);
    ++v126;
    IncompleteVirtualRegister = 1;
  }
  while (v126 != v168);
  return IncompleteVirtualRegister;
}

uint64_t sub_1C478AE7C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  _BOOL8 v9;
  BOOL v10;
  _BOOL4 v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  llvm::MachineFunction *v18;
  llvm::MachineFunction *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  llvm::MachineFunction *v36;
  llvm::MachineInstr *v37;
  unsigned int v38;
  _BYTE *v39;
  BOOL v40;
  __int128 v41;
  __int128 v42;

  v4 = *(_QWORD *)a2;
  if ((*(unsigned __int8 *)(*(_QWORD *)a2 + 8) | 2) != 2)
    return 0;
  v5 = a4;
  v6 = a3;
  if ((sub_1C478B1F8(a1, a2, a3, a4) & 1) != 0)
    return 1;
  v10 = *(_BYTE *)(v4 + 8) == 0;
  if (*(_BYTE *)(v4 + 8))
    v11 = 0;
  else
    v11 = v5 == 1;
  v40 = v10;
  v39 = *(_BYTE **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v38 = 0;
  v12 = sub_1C47AE068((uint64_t)a1, (uint64_t *)&v39, (int *)&v38, &v40, v11, *(_QWORD *)(a2 + 40), 7, 1);
  v9 = v12 != 0;
  if (v12)
  {
    v35 = v12;
    if (v11)
      v13 = 946;
    else
      v13 = word_1C640F740[2 * (v5 == 1) + v40];
    v14 = a1[4];
    v15 = *(_QWORD *)(v14 + 640);
    v16 = *(unint64_t **)(v14 + 648);
    v17 = *(_QWORD *)(a1[12] + 8);
    v18 = *(llvm::MachineFunction **)(v15 + 32);
    v19 = (llvm::MachineFunction *)a1[9];
    v36 = v19;
    if (v19)
      llvm::MetadataTracking::track((uint64_t)&v36, (unsigned __int8 *)v19, 2);
    v20 = v17 + 48 * v13;
    v21 = *((_QWORD *)v18 + 28);
    if (v21)
      *((_QWORD *)v18 + 28) = *(_QWORD *)v21;
    else
      v21 = sub_1C484358C((uint64_t)v18 + 128, 72, 3);
    *(_QWORD *)&v41 = v36;
    if (v36)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v36, (unsigned __int8 *)v36, (uint64_t)&v41);
      v36 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v21, v18, v20, (unsigned __int8 **)&v41, 0);
    if ((_QWORD)v41)
      llvm::MetadataTracking::untrack((uint64_t)&v41, (unsigned __int8 *)v41);
    if (v36)
      llvm::MetadataTracking::untrack((uint64_t)&v36, (unsigned __int8 *)v36);
    v22 = *(_QWORD *)(v15 + 40);
    *(_QWORD *)(v21 + 24) = v22;
    v23 = *(_QWORD *)(v22 + 32);
    v24 = *(unsigned int *)(v21 + 40);
    if ((_DWORD)v24)
    {
      v28 = *(_QWORD *)(v21 + 32);
      v29 = *(_QWORD *)(v23 + 40);
      v30 = 32 * v24;
      do
      {
        if (!*(_BYTE *)v28)
        {
          v31 = *(unsigned int *)(v28 + 4);
          if ((int)v31 >= 0)
            v32 = (uint64_t *)(*(_QWORD *)(v29 + 272) + 8 * v31);
          else
            v32 = (uint64_t *)(*(_QWORD *)(v29 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8);
          v33 = *v32;
          if (*v32)
          {
            v34 = *(_QWORD *)(v33 + 16);
            *(_QWORD *)(v33 + 16) = v28;
            *(_QWORD *)(v28 + 16) = v34;
            if ((*(_BYTE *)(v28 + 3) & 1) != 0)
            {
              *(_QWORD *)(v28 + 24) = v33;
            }
            else
            {
              *(_QWORD *)(v28 + 24) = 0;
              v32 = (uint64_t *)(v34 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v28 + 16) = v28;
            *(_QWORD *)(v28 + 24) = 0;
          }
          *v32 = v28;
        }
        v28 += 32;
        v30 -= 32;
      }
      while (v30);
    }
    v25 = *(_QWORD *)(v23 + 728);
    if (v25)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v25 + 24))(v25, v21);
    v26 = *v16 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v21 = v26 | *(_QWORD *)v21 & 7;
    *(_QWORD *)(v21 + 8) = v16;
    *(_QWORD *)(v26 + 8) = v21;
    *v16 = *v16 & 7 | v21;
    *((_QWORD *)&v41 + 1) = 0;
    v42 = 0uLL;
    LODWORD(v41) = 0x1000000;
    DWORD1(v41) = v6;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v18, (const llvm::MachineOperand *)&v41);
    v36 = v18;
    v37 = (llvm::MachineInstr *)v21;
    LODWORD(v41) = 1;
    *((_QWORD *)&v41 + 1) = 0;
    *(_QWORD *)&v42 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v18, (const llvm::MachineOperand *)&v41);
    if ((sub_1C47ADDC8((uint64_t)a1, v39, v11, &v36, 0) & 1) == 0)
    {
      *((_QWORD *)&v41 + 1) = 0;
      v42 = 0uLL;
      LODWORD(v41) = 0;
      DWORD1(v41) = v35;
      llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v41);
    }
    LODWORD(v41) = 1;
    *((_QWORD *)&v41 + 1) = 0;
    *(_QWORD *)&v42 = v38;
    llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v41);
    LODWORD(v41) = 1;
    *((_QWORD *)&v41 + 1) = 0;
    *(_QWORD *)&v42 = 0x100008000;
    llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v41);
    LODWORD(v41) = 1;
    *((_QWORD *)&v41 + 1) = 0;
    *(_QWORD *)&v42 = 0;
    llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v41);
    v41 = 0u;
    v42 = 0u;
    llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v41);
  }
  return v9;
}

uint64_t sub_1C478B1F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  llvm *v24;

  v8 = *(_DWORD *)(a2 + 20);
  if ((v8 & 0x40000000) != 0)
    v9 = *(uint64_t **)(a2 - 8);
  else
    v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF));
  v10 = *v9;
  v11 = *(unsigned __int8 *)(*v9 + 16);
  if (v10)
    v12 = v11 >= 0x1C;
  else
    v12 = 0;
  if (v12)
  {
    if (*(_QWORD *)(v10 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if (v11 < 0x1C)
  {
    return 0;
  }
  v13 = *(_QWORD *)(v10 + 8);
  if (!v13 || *(_QWORD *)(v13 + 8))
    return 0;
  v14 = sub_1C47B66E0((uint64_t)a1, v10, *(_QWORD *)(v10 + 40));
  v15 = *(unsigned __int8 *)(v14 + 16);
  if (!v14 || v15 < 0x1C)
    return 0;
  v17 = *(_QWORD *)(v14 + 8);
  if (!v17)
    return 0;
  if (*(_QWORD *)(v17 + 8))
    return 0;
  v19 = v15 - 40;
  if (v19 > 0x2C)
    return 0;
  if (((1 << v19) & 0x255) != 0)
    return sub_1C47B43B0((uint64_t)a1, (unsigned __int8 *)v14, a3, a4, 1u, 0);
  if (v19 == 33)
  {
    if ((*(_BYTE *)(*(_QWORD *)v14 + 8) != 2) == (_DWORD)a4)
      return sub_1C4790D8C(a1, v14, a3, 1);
    return 0;
  }
  if (v19 != 44)
    return 0;
  v20 = *(_QWORD *)(v14 - 32);
  if (!v20
    || *(_BYTE *)(v20 + 16)
    || *(_QWORD *)(v20 + 24) != *(_QWORD *)(v14 + 72)
    || (*(_BYTE *)(v20 + 33) & 0x20) == 0)
  {
    return 0;
  }
  v24 = (llvm *)v14;
  v21 = *(_DWORD *)(v20 + 36);
  v23 = v21;
  if (v21 > 1850)
  {
    v22 = v21 - 1990;
    if (v22 <= 0x1A)
    {
      if (((1 << v22) & 3) != 0)
        return sub_1C478E2BC(a1, v14, a3, a4, 1);
      if (((1 << v22) & 0xA00) != 0)
        return sub_1C478E5F4(a1, v14, a3, a4, 1);
      if (((1 << v22) & 0x6000000) != 0)
        return sub_1C478F29C(a1, v14, a3, a4, 1);
    }
    if (v23 == 1851)
      return sub_1C478FCB8(a1, (uint64_t *)v14, *(_BYTE **)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF)), 0, a3, a4, 1, 1);
  }
  else
  {
    if ((v21 - 1839) < 8)
    {
      sub_1C47860F8(v21);
      return sub_1C478D888((uint64_t)a1, (uint64_t)v24, a3, 0, 0, 0, a4, 1u);
    }
    if (v21 == 139)
      return sub_1C478EF18(a1, v14, a3, a4, 1u);
    if (v21 == 1830)
      return sub_1C478AE7C(a1, v14, a3, a4);
  }
  if (*(_BYTE *)(a1[32] + 280) || !llvm::GetItrKind((llvm *)v23))
    return 0;
  sub_1C47860F8(v23);
  return sub_1C478D240((uint64_t)a1, (uint64_t)v24, a3, 0, 0, a4, 1);
}

uint64_t sub_1C478B5A8(_UNKNOWN ***a1, int *a2, int *a3)
{
  BOOL v5;
  int v7;
  int v8;

  *a2 = 0;
  *a3 = 0;
  if (a1 != &off_1E7F98670 && a1 != &off_1E7F98468 && a1 != &off_1E7F984F0)
  {
    v5 = a1 == &off_1E7F983D8 || a1 == &off_1E7F982F0;
    if (!v5 && a1 != &off_1E7F982A8)
    {
      if (a1 != &off_1E7F984A0)
      {
        if (a1 == &off_1E7F98AB8)
        {
          v7 = 2;
        }
        else
        {
          v7 = 3;
          v8 = 1;
          if (a1 == &off_1E7F987B8 || a1 == &off_1E7F98800)
            goto LABEL_31;
          if (a1 != &off_1E7F99028)
          {
            if (a1 != &off_1E7F98A70)
            {
              if (a1 != &off_1E7F99598)
                return 0;
              v7 = 4;
              goto LABEL_30;
            }
            v7 = 4;
LABEL_31:
            *a2 = v8;
            goto LABEL_32;
          }
          v7 = 3;
        }
LABEL_30:
        v8 = 33;
        goto LABEL_31;
      }
      v7 = 2;
      v8 = 1;
      goto LABEL_31;
    }
  }
  v7 = 1;
LABEL_32:
  *a3 = v7;
  return 1;
}

uint64_t sub_1C478B6C4(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t IncompleteVirtualRegister;
  uint64_t v9;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::MachineFunction *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  llvm::MachineFunction *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  uint64_t v64;
  llvm::MachineFunction *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  llvm::MachineFunction *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  uint64_t v90;
  llvm::MachineFunction *v91;
  unsigned __int8 *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  int v136;
  int v137;
  int v138;
  int v139;
  unsigned __int8 *v140;
  __int128 v141;
  __int128 v142;

  IncompleteVirtualRegister = 0;
  if (a2)
  {
    if (!*(_BYTE *)(a1[32] + 280))
    {
      IncompleteVirtualRegister = 0;
      if (a4)
      {
        if (a5)
        {
          v9 = *(_QWORD *)(a1[6] + 24);
          if ((_UNKNOWN ***)(*(_QWORD *)(v9 + 16 * (a4 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) != &off_1E7F99028
            || (_UNKNOWN ***)(*(_QWORD *)(v9 + 16 * (a5 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) != &off_1E7F99598)
          {
            return 0;
          }
          IncompleteVirtualRegister = 0;
          v11 = !*(_BYTE *)(a3 + 60) && *(_DWORD *)(a3 + 48) == -1;
          v12 = v11 && *(_BYTE *)(a3 + 61) == 0;
          if (!v12 && *(_DWORD *)(a3 + 72) != -1)
          {
            v13 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
            v14 = *(unsigned int *)(a3 + 44);
            v15 = *(unsigned __int8 **)(v13 + 32 * v14);
            if (*(_DWORD *)(a3 + 64) != -1)
              LODWORD(v14) = v14 + 1;
            v16 = *(unsigned __int8 **)(v13 + 32 * (v14 + 1));
            v17 = *(unsigned __int8 **)(v13 + 32 * (v14 + 2));
            v18 = *(unsigned __int8 **)(v13 + 32 * (v14 + 3));
            v19 = sub_1C47A836C((uint64_t)a1, v15);
            if (!v19)
              return 0;
            v20 = v19;
            v21 = sub_1C47A836C((uint64_t)a1, v16);
            if (!v21)
              return 0;
            v22 = v21;
            v23 = sub_1C47A836C((uint64_t)a1, v17);
            if (!v23)
              return 0;
            v24 = v23;
            v25 = sub_1C47A836C((uint64_t)a1, v18);
            if (!v25)
              return 0;
            v26 = v25;
            v27 = a1[6];
            IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v27, "", 0);
            *(_QWORD *)(*(_QWORD *)(v27 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F9A5E8;
            v28 = *(_QWORD *)(v27 + 8);
            if (v28)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
              if (!(_DWORD)IncompleteVirtualRegister)
                return IncompleteVirtualRegister;
            }
            else if (!(_DWORD)IncompleteVirtualRegister)
            {
              return IncompleteVirtualRegister;
            }
            v29 = a1[6];
            v30 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v29, "", 0);
            *(_QWORD *)(*(_QWORD *)(v29 + 24) + 16 * (v30 & 0x7FFFFFFF)) = &off_1E7F991B0;
            v31 = *(_QWORD *)(v29 + 8);
            if (v31)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
              if (!v30)
                return 0;
            }
            else if (!v30)
            {
              return 0;
            }
            v137 = v26;
            v32 = a1[6];
            v33 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v32, "", 0);
            *(_QWORD *)(*(_QWORD *)(v32 + 24) + 16 * (v33 & 0x7FFFFFFF)) = &off_1E7F9A200;
            v34 = *(_QWORD *)(v32 + 8);
            if (v34)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
              if (v33)
                goto LABEL_29;
            }
            else if (v33)
            {
LABEL_29:
              v138 = v33;
              v139 = v30;
              v136 = IncompleteVirtualRegister;
              v35 = a1[4];
              v36 = *(_QWORD *)(v35 + 640);
              v135 = *(unint64_t **)(v35 + 648);
              v37 = *(_QWORD *)(a1[12] + 8);
              v38 = *(llvm::MachineFunction **)(v36 + 32);
              v39 = (unsigned __int8 *)a1[9];
              v140 = v39;
              if (v39)
                llvm::MetadataTracking::track((uint64_t)&v140, v39, 2);
              v40 = v37 + 864;
              v41 = *((_QWORD *)v38 + 28);
              if (v41)
                *((_QWORD *)v38 + 28) = *(_QWORD *)v41;
              else
                v41 = sub_1C484358C((uint64_t)v38 + 128, 72, 3);
              *(_QWORD *)&v141 = v140;
              if (v140)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v140, v140, (uint64_t)&v141);
                v140 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v41, v38, v40, (unsigned __int8 **)&v141, 0);
              if ((_QWORD)v141)
                llvm::MetadataTracking::untrack((uint64_t)&v141, (unsigned __int8 *)v141);
              if (v140)
                llvm::MetadataTracking::untrack((uint64_t)&v140, v140);
              v42 = *(_QWORD *)(v36 + 40);
              *(_QWORD *)(v41 + 24) = v42;
              v43 = *(_QWORD *)(v42 + 32);
              v44 = *(unsigned int *)(v41 + 40);
              if ((_DWORD)v44)
              {
                v100 = *(_QWORD *)(v41 + 32);
                v101 = *(_QWORD *)(v43 + 40);
                v102 = 32 * v44;
                do
                {
                  if (!*(_BYTE *)v100)
                  {
                    v103 = *(unsigned int *)(v100 + 4);
                    if ((int)v103 >= 0)
                      v104 = (uint64_t *)(*(_QWORD *)(v101 + 272) + 8 * v103);
                    else
                      v104 = (uint64_t *)(*(_QWORD *)(v101 + 24) + 16 * (v103 & 0x7FFFFFFF) + 8);
                    v105 = *v104;
                    if (*v104)
                    {
                      v106 = *(_QWORD *)(v105 + 16);
                      *(_QWORD *)(v105 + 16) = v100;
                      *(_QWORD *)(v100 + 16) = v106;
                      if ((*(_BYTE *)(v100 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v100 + 24) = v105;
                      }
                      else
                      {
                        *(_QWORD *)(v100 + 24) = 0;
                        v104 = (uint64_t *)(v106 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v100 + 16) = v100;
                      *(_QWORD *)(v100 + 24) = 0;
                    }
                    *v104 = v100;
                  }
                  v100 += 32;
                  v102 -= 32;
                }
                while (v102);
              }
              v45 = *(_QWORD *)(v43 + 728);
              if (v45)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v45 + 24))(v45, v41);
              v46 = *v135 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v41 = v46 | *(_QWORD *)v41 & 7;
              *(_QWORD *)(v41 + 8) = v135;
              *(_QWORD *)(v46 + 8) = v41;
              *v135 = *v135 & 7 | v41;
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0x1000000;
              DWORD1(v141) = v139;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v41, v38, (const llvm::MachineOperand *)&v141);
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0;
              DWORD1(v141) = v20;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v41, v38, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 33;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v41, v38, (const llvm::MachineOperand *)&v141);
              HIDWORD(v141) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0;
              *(_QWORD *)((char *)&v141 + 4) = (v20 + 1);
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v41, v38, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 34;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v41, v38, (const llvm::MachineOperand *)&v141);
              HIDWORD(v141) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0;
              *(_QWORD *)((char *)&v141 + 4) = (v20 + 2);
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v41, v38, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 35;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v41, v38, (const llvm::MachineOperand *)&v141);
              v47 = a1[4];
              v48 = *(_QWORD *)(v47 + 640);
              v49 = *(unint64_t **)(v47 + 648);
              v50 = *(_QWORD *)(a1[12] + 8);
              v51 = *(llvm::MachineFunction **)(v48 + 32);
              v52 = (unsigned __int8 *)a1[9];
              v140 = v52;
              if (v52)
                llvm::MetadataTracking::track((uint64_t)&v140, v52, 2);
              v53 = v50 + 864;
              v54 = *((_QWORD *)v51 + 28);
              if (v54)
                *((_QWORD *)v51 + 28) = *(_QWORD *)v54;
              else
                v54 = sub_1C484358C((uint64_t)v51 + 128, 72, 3);
              *(_QWORD *)&v141 = v140;
              if (v140)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v140, v140, (uint64_t)&v141);
                v140 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v54, v51, v53, (unsigned __int8 **)&v141, 0);
              if ((_QWORD)v141)
                llvm::MetadataTracking::untrack((uint64_t)&v141, (unsigned __int8 *)v141);
              if (v140)
                llvm::MetadataTracking::untrack((uint64_t)&v140, v140);
              v55 = *(_QWORD *)(v48 + 40);
              *(_QWORD *)(v54 + 24) = v55;
              v56 = *(_QWORD *)(v55 + 32);
              v57 = *(unsigned int *)(v54 + 40);
              if ((_DWORD)v57)
              {
                v107 = *(_QWORD *)(v54 + 32);
                v108 = *(_QWORD *)(v56 + 40);
                v109 = 32 * v57;
                do
                {
                  if (!*(_BYTE *)v107)
                  {
                    v110 = *(unsigned int *)(v107 + 4);
                    if ((int)v110 >= 0)
                      v111 = (uint64_t *)(*(_QWORD *)(v108 + 272) + 8 * v110);
                    else
                      v111 = (uint64_t *)(*(_QWORD *)(v108 + 24) + 16 * (v110 & 0x7FFFFFFF) + 8);
                    v112 = *v111;
                    if (*v111)
                    {
                      v113 = *(_QWORD *)(v112 + 16);
                      *(_QWORD *)(v112 + 16) = v107;
                      *(_QWORD *)(v107 + 16) = v113;
                      if ((*(_BYTE *)(v107 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v107 + 24) = v112;
                      }
                      else
                      {
                        *(_QWORD *)(v107 + 24) = 0;
                        v111 = (uint64_t *)(v113 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v107 + 16) = v107;
                      *(_QWORD *)(v107 + 24) = 0;
                    }
                    *v111 = v107;
                  }
                  v107 += 32;
                  v109 -= 32;
                }
                while (v109);
              }
              v58 = *(_QWORD *)(v56 + 728);
              v59 = v136;
              if (v58)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v58 + 24))(v58, v54);
              v60 = *v49 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v54 = v60 | *(_QWORD *)v54 & 7;
              *(_QWORD *)(v54 + 8) = v49;
              *(_QWORD *)(v60 + 8) = v54;
              *v49 = *v49 & 7 | v54;
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0x1000000;
              DWORD1(v141) = v138;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v141);
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0;
              DWORD1(v141) = v137;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 33;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v141);
              HIDWORD(v141) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0;
              *(_QWORD *)((char *)&v141 + 4) = (v137 + 1);
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 34;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v141);
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0;
              DWORD1(v141) = v22;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 35;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v141);
              HIDWORD(v141) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0;
              *(_QWORD *)((char *)&v141 + 4) = (v22 + 1);
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 36;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v141);
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0;
              DWORD1(v141) = v24;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 37;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v141);
              HIDWORD(v141) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0;
              *(_QWORD *)((char *)&v141 + 4) = (v24 + 1);
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 38;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v141);
              v61 = a1[4];
              v62 = *(_QWORD *)(v61 + 640);
              v63 = *(unint64_t **)(v61 + 648);
              v64 = *(_QWORD *)(a1[12] + 8);
              v65 = *(llvm::MachineFunction **)(v62 + 32);
              v66 = (unsigned __int8 *)a1[9];
              v140 = v66;
              if (v66)
                llvm::MetadataTracking::track((uint64_t)&v140, v66, 2);
              v67 = v64 + 499536;
              v68 = *((_QWORD *)v65 + 28);
              if (v68)
                *((_QWORD *)v65 + 28) = *(_QWORD *)v68;
              else
                v68 = sub_1C484358C((uint64_t)v65 + 128, 72, 3);
              *(_QWORD *)&v141 = v140;
              if (v140)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v140, v140, (uint64_t)&v141);
                v140 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v68, v65, v67, (unsigned __int8 **)&v141, 0);
              if ((_QWORD)v141)
                llvm::MetadataTracking::untrack((uint64_t)&v141, (unsigned __int8 *)v141);
              if (v140)
                llvm::MetadataTracking::untrack((uint64_t)&v140, v140);
              v69 = *(_QWORD *)(v62 + 40);
              *(_QWORD *)(v68 + 24) = v69;
              v70 = *(_QWORD *)(v69 + 32);
              v71 = *(unsigned int *)(v68 + 40);
              if ((_DWORD)v71)
              {
                v114 = *(_QWORD *)(v68 + 32);
                v115 = *(_QWORD *)(v70 + 40);
                v116 = 32 * v71;
                v59 = v136;
                do
                {
                  if (!*(_BYTE *)v114)
                  {
                    v117 = *(unsigned int *)(v114 + 4);
                    if ((int)v117 >= 0)
                      v118 = (uint64_t *)(*(_QWORD *)(v115 + 272) + 8 * v117);
                    else
                      v118 = (uint64_t *)(*(_QWORD *)(v115 + 24) + 16 * (v117 & 0x7FFFFFFF) + 8);
                    v119 = *v118;
                    if (*v118)
                    {
                      v120 = *(_QWORD *)(v119 + 16);
                      *(_QWORD *)(v119 + 16) = v114;
                      *(_QWORD *)(v114 + 16) = v120;
                      if ((*(_BYTE *)(v114 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v114 + 24) = v119;
                      }
                      else
                      {
                        *(_QWORD *)(v114 + 24) = 0;
                        v118 = (uint64_t *)(v120 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v114 + 16) = v114;
                      *(_QWORD *)(v114 + 24) = 0;
                    }
                    *v118 = v114;
                  }
                  v114 += 32;
                  v116 -= 32;
                }
                while (v116);
              }
              v72 = *(_QWORD *)(v70 + 728);
              if (v72)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v72 + 24))(v72, v68);
              v73 = *v63 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v68 = v73 | *(_QWORD *)v68 & 7;
              *(_QWORD *)(v68 + 8) = v63;
              *(_QWORD *)(v73 + 8) = v68;
              *v63 = *v63 & 7 | v68;
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0x1000000;
              DWORD1(v141) = v59;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v65, (const llvm::MachineOperand *)&v141);
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0;
              DWORD1(v141) = v139;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v65, (const llvm::MachineOperand *)&v141);
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0;
              DWORD1(v141) = v138;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v65, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v65, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v65, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v65, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v65, (const llvm::MachineOperand *)&v141);
              v141 = 0u;
              v142 = 0u;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v65, (const llvm::MachineOperand *)&v141);
              v74 = a1[4];
              v75 = *(_QWORD *)(v74 + 640);
              v76 = *(unint64_t **)(v74 + 648);
              v77 = *(_QWORD *)(a1[12] + 8);
              v78 = *(llvm::MachineFunction **)(v75 + 32);
              v79 = (unsigned __int8 *)a1[9];
              v140 = v79;
              if (v79)
                llvm::MetadataTracking::track((uint64_t)&v140, v79, 2);
              v80 = v77 + 864;
              v81 = *((_QWORD *)v78 + 28);
              if (v81)
                *((_QWORD *)v78 + 28) = *(_QWORD *)v81;
              else
                v81 = sub_1C484358C((uint64_t)v78 + 128, 72, 3);
              *(_QWORD *)&v141 = v140;
              if (v140)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v140, v140, (uint64_t)&v141);
                v140 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v81, v78, v80, (unsigned __int8 **)&v141, 0);
              if ((_QWORD)v141)
                llvm::MetadataTracking::untrack((uint64_t)&v141, (unsigned __int8 *)v141);
              if (v140)
                llvm::MetadataTracking::untrack((uint64_t)&v140, v140);
              v82 = *(_QWORD *)(v75 + 40);
              *(_QWORD *)(v81 + 24) = v82;
              v83 = *(_QWORD *)(v82 + 32);
              v84 = *(unsigned int *)(v81 + 40);
              if ((_DWORD)v84)
              {
                v121 = *(_QWORD *)(v81 + 32);
                v122 = *(_QWORD *)(v83 + 40);
                v123 = 32 * v84;
                v59 = v136;
                do
                {
                  if (!*(_BYTE *)v121)
                  {
                    v124 = *(unsigned int *)(v121 + 4);
                    if ((int)v124 >= 0)
                      v125 = (uint64_t *)(*(_QWORD *)(v122 + 272) + 8 * v124);
                    else
                      v125 = (uint64_t *)(*(_QWORD *)(v122 + 24) + 16 * (v124 & 0x7FFFFFFF) + 8);
                    v126 = *v125;
                    if (*v125)
                    {
                      v127 = *(_QWORD *)(v126 + 16);
                      *(_QWORD *)(v126 + 16) = v121;
                      *(_QWORD *)(v121 + 16) = v127;
                      if ((*(_BYTE *)(v121 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v121 + 24) = v126;
                      }
                      else
                      {
                        *(_QWORD *)(v121 + 24) = 0;
                        v125 = (uint64_t *)(v127 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v121 + 16) = v121;
                      *(_QWORD *)(v121 + 24) = 0;
                    }
                    *v125 = v121;
                  }
                  v121 += 32;
                  v123 -= 32;
                }
                while (v123);
              }
              v85 = *(_QWORD *)(v83 + 728);
              if (v85)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v85 + 24))(v85, v81);
              v86 = *v76 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v81 = v86 | *(_QWORD *)v81 & 7;
              *(_QWORD *)(v81 + 8) = v76;
              *(_QWORD *)(v86 + 8) = v81;
              *v76 = *v76 & 7 | v81;
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0x1000000;
              DWORD1(v141) = a4;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v78, (const llvm::MachineOperand *)&v141);
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 8448;
              DWORD1(v141) = v59;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v78, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 33;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v78, (const llvm::MachineOperand *)&v141);
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 8704;
              DWORD1(v141) = v59;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v78, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 34;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v78, (const llvm::MachineOperand *)&v141);
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 8960;
              DWORD1(v141) = v59;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v78, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 35;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v81, v78, (const llvm::MachineOperand *)&v141);
              v87 = a1[4];
              v88 = *(_QWORD *)(v87 + 640);
              v89 = *(unint64_t **)(v87 + 648);
              v90 = *(_QWORD *)(a1[12] + 8);
              v91 = *(llvm::MachineFunction **)(v88 + 32);
              v92 = (unsigned __int8 *)a1[9];
              v140 = v92;
              if (v92)
                llvm::MetadataTracking::track((uint64_t)&v140, v92, 2);
              v93 = v90 + 864;
              v94 = *((_QWORD *)v91 + 28);
              if (v94)
                *((_QWORD *)v91 + 28) = *(_QWORD *)v94;
              else
                v94 = sub_1C484358C((uint64_t)v91 + 128, 72, 3);
              *(_QWORD *)&v141 = v140;
              if (v140)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v140, v140, (uint64_t)&v141);
                v140 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v94, v91, v93, (unsigned __int8 **)&v141, 0);
              if ((_QWORD)v141)
                llvm::MetadataTracking::untrack((uint64_t)&v141, (unsigned __int8 *)v141);
              if (v140)
                llvm::MetadataTracking::untrack((uint64_t)&v140, v140);
              v95 = *(_QWORD *)(v88 + 40);
              *(_QWORD *)(v94 + 24) = v95;
              v96 = *(_QWORD *)(v95 + 32);
              v97 = *(unsigned int *)(v94 + 40);
              if ((_DWORD)v97)
              {
                v128 = *(_QWORD *)(v94 + 32);
                v129 = *(_QWORD *)(v96 + 40);
                v130 = 32 * v97;
                v59 = v136;
                do
                {
                  if (!*(_BYTE *)v128)
                  {
                    v131 = *(unsigned int *)(v128 + 4);
                    if ((int)v131 >= 0)
                      v132 = (uint64_t *)(*(_QWORD *)(v129 + 272) + 8 * v131);
                    else
                      v132 = (uint64_t *)(*(_QWORD *)(v129 + 24) + 16 * (v131 & 0x7FFFFFFF) + 8);
                    v133 = *v132;
                    if (*v132)
                    {
                      v134 = *(_QWORD *)(v133 + 16);
                      *(_QWORD *)(v133 + 16) = v128;
                      *(_QWORD *)(v128 + 16) = v134;
                      if ((*(_BYTE *)(v128 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v128 + 24) = v133;
                      }
                      else
                      {
                        *(_QWORD *)(v128 + 24) = 0;
                        v132 = (uint64_t *)(v134 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v128 + 16) = v128;
                      *(_QWORD *)(v128 + 24) = 0;
                    }
                    *v132 = v128;
                  }
                  v128 += 32;
                  v130 -= 32;
                }
                while (v130);
              }
              v98 = *(_QWORD *)(v96 + 728);
              if (v98)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v98 + 24))(v98, v94);
              v99 = *v89 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v94 = v99 | *(_QWORD *)v94 & 7;
              *(_QWORD *)(v94 + 8) = v89;
              *(_QWORD *)(v99 + 8) = v94;
              *v89 = *v89 & 7 | v94;
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 0x1000000;
              DWORD1(v141) = a5;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v91, (const llvm::MachineOperand *)&v141);
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 9216;
              DWORD1(v141) = v59;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v91, (const llvm::MachineOperand *)&v141);
              IncompleteVirtualRegister = 1;
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 33;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v91, (const llvm::MachineOperand *)&v141);
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 9472;
              DWORD1(v141) = v59;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v91, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 34;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v91, (const llvm::MachineOperand *)&v141);
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 9728;
              DWORD1(v141) = v59;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v91, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 35;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v91, (const llvm::MachineOperand *)&v141);
              *((_QWORD *)&v141 + 1) = 0;
              v142 = 0uLL;
              LODWORD(v141) = 9984;
              DWORD1(v141) = v59;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v91, (const llvm::MachineOperand *)&v141);
              LODWORD(v141) = 1;
              *((_QWORD *)&v141 + 1) = 0;
              *(_QWORD *)&v142 = 36;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v91, (const llvm::MachineOperand *)&v141);
              return IncompleteVirtualRegister;
            }
            return 0;
          }
        }
      }
    }
  }
  return IncompleteVirtualRegister;
}

uint64_t sub_1C478C684(_QWORD *a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t IncompleteVirtualRegister;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _UNKNOWN ***v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  llvm::MachineFunction *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::MachineFunction *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  llvm::MachineFunction *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  int v81;
  unsigned __int8 *v82;
  __int128 v83;
  __int128 v84;

  if (*(_BYTE *)(a1[32] + 280))
    return 0;
  IncompleteVirtualRegister = 0;
  if (a2)
  {
    if ((_UNKNOWN ***)(*(_QWORD *)(*(_QWORD *)(a1[6] + 24) + 16 * (a4 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E7F99028)
    {
      IncompleteVirtualRegister = 0;
      if (a4)
      {
        v8 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
        if (v8 >= 4)
        {
          v9 = *(_QWORD *)(a2 - 32 * v8 + 32 * a3);
          if (*(_BYTE *)(v9 + 16) == 84)
          {
            v10 = *(_QWORD *)(v9 - 32);
            if (v10)
            {
              if (!*(_BYTE *)(v10 + 16)
                && *(_QWORD *)(v10 + 24) == *(_QWORD *)(v9 + 72)
                && (*(_BYTE *)(v10 + 33) & 0x20) != 0)
              {
                sub_1C47860F8(*(_DWORD *)(v10 + 36));
              }
            }
          }
          v11 = sub_1C47A836C((uint64_t)a1, (unsigned __int8 *)v9);
          if (!v11)
            return 0;
          v12 = v11;
          v13 = a1[6];
          v14 = (_UNKNOWN ***)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 16 * (v11 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
          if (v14 == &off_1E7F991B0)
          {
            LODWORD(IncompleteVirtualRegister) = v11;
          }
          else
          {
            if (v14 != &off_1E7F98468 && v14 != &off_1E7F984F0)
              return 0;
            IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1[6], "", 0);
            *(_QWORD *)(*(_QWORD *)(v13 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F991B0;
            v16 = *(_QWORD *)(v13 + 8);
            if (v16)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
              if (!(_DWORD)IncompleteVirtualRegister)
                return IncompleteVirtualRegister;
            }
            else if (!(_DWORD)IncompleteVirtualRegister)
            {
              return IncompleteVirtualRegister;
            }
            v17 = a1[4];
            v18 = *(_QWORD *)(v17 + 640);
            v19 = *(unint64_t **)(v17 + 648);
            v20 = *(_QWORD *)(a1[12] + 8);
            v21 = *(llvm::MachineFunction **)(v18 + 32);
            v22 = (unsigned __int8 *)a1[9];
            v82 = v22;
            if (v22)
              llvm::MetadataTracking::track((uint64_t)&v82, v22, 2);
            v23 = v20 + 864;
            v24 = *((_QWORD *)v21 + 28);
            if (v24)
              *((_QWORD *)v21 + 28) = *(_QWORD *)v24;
            else
              v24 = sub_1C484358C((uint64_t)v21 + 128, 72, 3);
            *(_QWORD *)&v83 = v82;
            if (v82)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v82, v82, (uint64_t)&v83);
              v82 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v24, v21, v23, (unsigned __int8 **)&v83, 0);
            if ((_QWORD)v83)
              llvm::MetadataTracking::untrack((uint64_t)&v83, (unsigned __int8 *)v83);
            if (v82)
              llvm::MetadataTracking::untrack((uint64_t)&v82, v82);
            v25 = *(_QWORD *)(v18 + 40);
            *(_QWORD *)(v24 + 24) = v25;
            v26 = *(_QWORD *)(v25 + 32);
            v27 = *(unsigned int *)(v24 + 40);
            if ((_DWORD)v27)
            {
              v41 = *(_QWORD *)(v24 + 32);
              v42 = *(_QWORD *)(v26 + 40);
              v43 = 32 * v27;
              do
              {
                if (!*(_BYTE *)v41)
                {
                  v44 = *(unsigned int *)(v41 + 4);
                  if ((int)v44 >= 0)
                    v45 = (uint64_t *)(*(_QWORD *)(v42 + 272) + 8 * v44);
                  else
                    v45 = (uint64_t *)(*(_QWORD *)(v42 + 24) + 16 * (v44 & 0x7FFFFFFF) + 8);
                  v46 = *v45;
                  if (*v45)
                  {
                    v47 = *(_QWORD *)(v46 + 16);
                    *(_QWORD *)(v46 + 16) = v41;
                    *(_QWORD *)(v41 + 16) = v47;
                    if ((*(_BYTE *)(v41 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v41 + 24) = v46;
                    }
                    else
                    {
                      *(_QWORD *)(v41 + 24) = 0;
                      v45 = (uint64_t *)(v47 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v41 + 16) = v41;
                    *(_QWORD *)(v41 + 24) = 0;
                  }
                  *v45 = v41;
                }
                v41 += 32;
                v43 -= 32;
              }
              while (v43);
            }
            v28 = *(_QWORD *)(v26 + 728);
            if (v28)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v28 + 24))(v28, v24);
            v29 = *v19 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v24 = v29 | *(_QWORD *)v24 & 7;
            *(_QWORD *)(v24 + 8) = v19;
            *(_QWORD *)(v29 + 8) = v24;
            *v19 = *v19 & 7 | v24;
            *((_QWORD *)&v83 + 1) = 0;
            v84 = 0uLL;
            LODWORD(v83) = 0x1000000;
            DWORD1(v83) = IncompleteVirtualRegister;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v83);
            *((_QWORD *)&v83 + 1) = 0;
            v84 = 0uLL;
            LODWORD(v83) = 0;
            DWORD1(v83) = v12;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v83);
            LODWORD(v83) = 1;
            *((_QWORD *)&v83 + 1) = 0;
            *(_QWORD *)&v84 = 33;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v83);
            HIDWORD(v83) = 0;
            v84 = 0uLL;
            LODWORD(v83) = 0;
            *(_QWORD *)((char *)&v83 + 4) = (v12 + 1);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v83);
            LODWORD(v83) = 1;
            *((_QWORD *)&v83 + 1) = 0;
            *(_QWORD *)&v84 = 34;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v83);
            HIDWORD(v83) = 0;
            v84 = 0uLL;
            LODWORD(v83) = 0;
            *(_QWORD *)((char *)&v83 + 4) = (v12 + 2);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v83);
            LODWORD(v83) = 1;
            *((_QWORD *)&v83 + 1) = 0;
            *(_QWORD *)&v84 = 35;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v83);
          }
          v30 = a1[6];
          v31 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v30, "", 0);
          *(_QWORD *)(*(_QWORD *)(v30 + 24) + 16 * (v31 & 0x7FFFFFFF)) = &off_1E7F98D28;
          v32 = *(_QWORD *)(v30 + 8);
          if (v32)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
            if (!v31)
              return 0;
          }
          else if (!v31)
          {
            return 0;
          }
          v33 = sub_1C6126ACC((uint64_t)a1, 1, 1);
          if (v33)
          {
            v81 = v33;
            v34 = a1[4];
            v35 = *(_QWORD *)(v34 + 640);
            v80 = *(unint64_t **)(v34 + 648);
            v36 = *(_QWORD *)(a1[12] + 8);
            v37 = *(llvm::MachineFunction **)(v35 + 32);
            v38 = (unsigned __int8 *)a1[9];
            v82 = v38;
            if (v38)
              llvm::MetadataTracking::track((uint64_t)&v82, v38, 2);
            v39 = v36 + 500208;
            v40 = *((_QWORD *)v37 + 28);
            if (v40)
              *((_QWORD *)v37 + 28) = *(_QWORD *)v40;
            else
              v40 = sub_1C484358C((uint64_t)v37 + 128, 72, 3);
            *(_QWORD *)&v83 = v82;
            if (v82)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v82, v82, (uint64_t)&v83);
              v82 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v40, v37, v39, (unsigned __int8 **)&v83, 0);
            if ((_QWORD)v83)
              llvm::MetadataTracking::untrack((uint64_t)&v83, (unsigned __int8 *)v83);
            if (v82)
              llvm::MetadataTracking::untrack((uint64_t)&v82, v82);
            v48 = *(_QWORD *)(v35 + 40);
            *(_QWORD *)(v40 + 24) = v48;
            v49 = *(_QWORD *)(v48 + 32);
            v50 = *(unsigned int *)(v40 + 40);
            if ((_DWORD)v50)
            {
              v66 = *(_QWORD *)(v40 + 32);
              v67 = *(_QWORD *)(v49 + 40);
              v68 = 32 * v50;
              do
              {
                if (!*(_BYTE *)v66)
                {
                  v69 = *(unsigned int *)(v66 + 4);
                  if ((int)v69 >= 0)
                    v70 = (uint64_t *)(*(_QWORD *)(v67 + 272) + 8 * v69);
                  else
                    v70 = (uint64_t *)(*(_QWORD *)(v67 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
                  v71 = *v70;
                  if (*v70)
                  {
                    v72 = *(_QWORD *)(v71 + 16);
                    *(_QWORD *)(v71 + 16) = v66;
                    *(_QWORD *)(v66 + 16) = v72;
                    if ((*(_BYTE *)(v66 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v66 + 24) = v71;
                    }
                    else
                    {
                      *(_QWORD *)(v66 + 24) = 0;
                      v70 = (uint64_t *)(v72 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v66 + 16) = v66;
                    *(_QWORD *)(v66 + 24) = 0;
                  }
                  *v70 = v66;
                }
                v66 += 32;
                v68 -= 32;
              }
              while (v68);
            }
            v51 = *(_QWORD *)(v49 + 728);
            if (v51)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v51 + 24))(v51, v40);
            v52 = *v80 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v40 = v52 | *(_QWORD *)v40 & 7;
            *(_QWORD *)(v40 + 8) = v80;
            *(_QWORD *)(v52 + 8) = v40;
            *v80 = *v80 & 7 | v40;
            *((_QWORD *)&v83 + 1) = 0;
            v84 = 0uLL;
            LODWORD(v83) = 0x1000000;
            DWORD1(v83) = v31;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v37, (const llvm::MachineOperand *)&v83);
            *((_QWORD *)&v83 + 1) = 0;
            v84 = 0uLL;
            LODWORD(v83) = 0;
            DWORD1(v83) = IncompleteVirtualRegister;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v37, (const llvm::MachineOperand *)&v83);
            LODWORD(v83) = 1;
            *((_QWORD *)&v83 + 1) = 0;
            *(_QWORD *)&v84 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v37, (const llvm::MachineOperand *)&v83);
            LODWORD(v83) = 1;
            *((_QWORD *)&v83 + 1) = 0;
            *(_QWORD *)&v84 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v37, (const llvm::MachineOperand *)&v83);
            LODWORD(v83) = 1;
            *((_QWORD *)&v83 + 1) = 0;
            *(_QWORD *)&v84 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v37, (const llvm::MachineOperand *)&v83);
            LODWORD(v83) = 1;
            *((_QWORD *)&v83 + 1) = 0;
            *(_QWORD *)&v84 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v37, (const llvm::MachineOperand *)&v83);
            v83 = 0u;
            v84 = 0u;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v37, (const llvm::MachineOperand *)&v83);
            v53 = a1[4];
            v54 = *(_QWORD *)(v53 + 640);
            v55 = *(unint64_t **)(v53 + 648);
            v56 = *(_QWORD *)(a1[12] + 8);
            v57 = *(llvm::MachineFunction **)(v54 + 32);
            v58 = (unsigned __int8 *)a1[9];
            v82 = v58;
            if (v58)
              llvm::MetadataTracking::track((uint64_t)&v82, v58, 2);
            v59 = v56 + 864;
            v60 = *((_QWORD *)v57 + 28);
            if (v60)
              *((_QWORD *)v57 + 28) = *(_QWORD *)v60;
            else
              v60 = sub_1C484358C((uint64_t)v57 + 128, 72, 3);
            *(_QWORD *)&v83 = v82;
            if (v82)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v82, v82, (uint64_t)&v83);
              v82 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v60, v57, v59, (unsigned __int8 **)&v83, 0);
            if ((_QWORD)v83)
              llvm::MetadataTracking::untrack((uint64_t)&v83, (unsigned __int8 *)v83);
            if (v82)
              llvm::MetadataTracking::untrack((uint64_t)&v82, v82);
            v61 = *(_QWORD *)(v54 + 40);
            *(_QWORD *)(v60 + 24) = v61;
            v62 = *(_QWORD *)(v61 + 32);
            v63 = *(unsigned int *)(v60 + 40);
            if ((_DWORD)v63)
            {
              v73 = *(_QWORD *)(v60 + 32);
              v74 = *(_QWORD *)(v62 + 40);
              v75 = 32 * v63;
              do
              {
                if (!*(_BYTE *)v73)
                {
                  v76 = *(unsigned int *)(v73 + 4);
                  if ((int)v76 >= 0)
                    v77 = (uint64_t *)(*(_QWORD *)(v74 + 272) + 8 * v76);
                  else
                    v77 = (uint64_t *)(*(_QWORD *)(v74 + 24) + 16 * (v76 & 0x7FFFFFFF) + 8);
                  v78 = *v77;
                  if (*v77)
                  {
                    v79 = *(_QWORD *)(v78 + 16);
                    *(_QWORD *)(v78 + 16) = v73;
                    *(_QWORD *)(v73 + 16) = v79;
                    if ((*(_BYTE *)(v73 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v73 + 24) = v78;
                    }
                    else
                    {
                      *(_QWORD *)(v73 + 24) = 0;
                      v77 = (uint64_t *)(v79 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v73 + 16) = v73;
                    *(_QWORD *)(v73 + 24) = 0;
                  }
                  *v77 = v73;
                }
                v73 += 32;
                v75 -= 32;
              }
              while (v75);
            }
            v64 = *(_QWORD *)(v62 + 728);
            if (v64)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v64 + 24))(v64, v60);
            v65 = *v55 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v60 = v65 | *(_QWORD *)v60 & 7;
            *(_QWORD *)(v60 + 8) = v55;
            *(_QWORD *)(v65 + 8) = v60;
            *v55 = *v55 & 7 | v60;
            *((_QWORD *)&v83 + 1) = 0;
            v84 = 0uLL;
            LODWORD(v83) = 0x1000000;
            DWORD1(v83) = a4;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v83);
            *((_QWORD *)&v83 + 1) = 0;
            v84 = 0uLL;
            LODWORD(v83) = 256;
            DWORD1(v83) = v31;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v83);
            IncompleteVirtualRegister = 1;
            LODWORD(v83) = 1;
            *((_QWORD *)&v83 + 1) = 0;
            *(_QWORD *)&v84 = 1;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v83);
            *((_QWORD *)&v83 + 1) = 0;
            v84 = 0uLL;
            LODWORD(v83) = 512;
            DWORD1(v83) = v31;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v83);
            LODWORD(v83) = 1;
            *((_QWORD *)&v83 + 1) = 0;
            *(_QWORD *)&v84 = 2;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v83);
            *((_QWORD *)&v83 + 1) = 0;
            v84 = 0uLL;
            LODWORD(v83) = 768;
            DWORD1(v83) = v31;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v83);
            LODWORD(v83) = 1;
            *((_QWORD *)&v83 + 1) = 0;
            *(_QWORD *)&v84 = 3;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v83);
            *((_QWORD *)&v83 + 1) = 0;
            v84 = 0uLL;
            LODWORD(v83) = 1024;
            DWORD1(v83) = v31;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v83);
            LODWORD(v83) = 1;
            *((_QWORD *)&v83 + 1) = 0;
            *(_QWORD *)&v84 = 4;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v83);
            *((_QWORD *)&v83 + 1) = 0;
            v84 = 0uLL;
            LODWORD(v83) = 1280;
            DWORD1(v83) = v31;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v83);
            LODWORD(v83) = 1;
            *((_QWORD *)&v83 + 1) = 0;
            *(_QWORD *)&v84 = 5;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v83);
            *((_QWORD *)&v83 + 1) = 0;
            v84 = 0uLL;
            LODWORD(v83) = 0;
            DWORD1(v83) = v81;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v83);
            LODWORD(v83) = 1;
            *((_QWORD *)&v83 + 1) = 0;
            *(_QWORD *)&v84 = 6;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v60, v57, (const llvm::MachineOperand *)&v83);
            return IncompleteVirtualRegister;
          }
          return 0;
        }
      }
    }
  }
  return IncompleteVirtualRegister;
}

uint64_t sub_1C478D240(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, int a6, int a7)
{
  unsigned int ItrKind;
  _BOOL4 v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  int v35;
  int IncompleteVirtualRegister;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  llvm::MachineFunction *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned __int8 *v70;
  __int128 v71;
  __int128 v72;

  ItrKind = llvm::GetItrKind((llvm *)*(unsigned int *)(*(_QWORD *)(a2 - 32) + 36));
  v15 = ItrKind < 0xA;
  if (a5 == -1)
    return 0;
  v16 = ItrKind;
  v17 = sub_1C4786340(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), *(_QWORD *)(a1 + 272));
  if (v17 == -1)
    return 0;
  v18 = v17;
  v19 = v15 & (0x38Eu >> v16);
  if (v19)
  {
    v20 = sub_1C4786340(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32), *(_QWORD *)(a1 + 272));
    if (v20 == -1)
      return 0;
    v21 = v20 >> 2;
  }
  else
  {
    v21 = 0;
  }
  if (*(_BYTE *)(a2 + 16) != 84)
    return 0;
  v22 = *(_QWORD *)(a2 - 32);
  if (!v22)
    return 0;
  if (*(_BYTE *)(v22 + 16))
    return 0;
  if (*(_QWORD *)(v22 + 24) != *(_QWORD *)(a2 + 72))
    return 0;
  if ((*(_BYTE *)(v22 + 33) & 0x20) == 0)
    return 0;
  v23 = *(_DWORD *)(v22 + 36);
  v24 = llvm::GetItrKind((llvm *)v23);
  if (!v24)
    return 0;
  v25 = v24;
  LODWORD(v71) = 0;
  LODWORD(v70) = 0;
  sub_1C47860F8(v23);
  if ((v25 - 7) < 3 || (v25 - 1) <= 2)
  {
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 256) + 281))
      return 0;
    v29 = sub_1C6126870((int)v70, v71, a6 == 1, a7);
    if (!v29)
      return 0;
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 256);
    if (!*(_BYTE *)(v28 + 280))
    {
      if (!*(_BYTE *)(v28 + 281))
        return 0;
      v29 = sub_1C61267CC((int)v70, v71, a6 == 1, a7);
      if (!v29)
        return 0;
      goto LABEL_23;
    }
    v29 = sub_1C6126728((int)v70, v71, a6 == 1, a7);
    if (!v29)
      return 0;
  }
LABEL_23:
  if (a6 == 1)
    v30 = 4;
  else
    v30 = 5;
  v31 = a4 << v30;
  v32 = (v31 >> 3) + 0xFFFFFFFF;
  if (v31 >= 0x20)
    v32 = (v31 >> 5) + 1;
  v66 = v31;
  v68 = v29;
  if ((_DWORD)v31 == 16)
    goto LABEL_32;
  if ((_DWORD)v31 == 48)
  {
    v33 = (unint64_t)&off_1E7F987B8;
    goto LABEL_39;
  }
  if ((v31 & 0x10) == 0)
  {
LABEL_32:
    if (v32 <= 0x11uLL)
    {
      if (v32 == 1)
        v33 = (unint64_t)&off_1E7F982F0;
      else
        v33 = (unint64_t)off_1E7F94CC8[v32];
      goto LABEL_39;
    }
  }
  v33 = 0;
LABEL_39:
  v34 = a4 != 1 || a6 == 1;
  v35 = v34;
  v67 = v35;
  IncompleteVirtualRegister = a3;
  if (!v34)
  {
LABEL_57:
    v42 = a4;
    v43 = (a3 & ~(a3 >> 31)) - a3;
    v44 = a3;
    while (v43)
    {
      sub_1C51A3F30(*(_QWORD **)(a1 + 48), v44, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 16 * (v44 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E7F984F0, 0);
      ++v44;
      --v43;
      if (!--v42)
        goto LABEL_60;
    }
    return 0;
  }
  v37 = *(_QWORD *)(a1 + 48);
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v37, "", 0);
  *(_QWORD *)(*(_QWORD *)(v37 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v33 & 0xFFFFFFFFFFFFFFFBLL;
  v38 = *(_QWORD *)(v37 + 8);
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
  if (!IncompleteVirtualRegister)
    return 0;
  if (a6 == 1)
  {
    if (a4)
    {
      v39 = a4;
      v40 = (a3 & ~(a3 >> 31)) - a3;
      v41 = a3;
      while (v40)
      {
        sub_1C51A3F30(*(_QWORD **)(a1 + 48), v41, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 16 * (v41 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E7F982A8, 0);
        ++v41;
        --v40;
        if (!--v39)
          goto LABEL_60;
      }
      return 0;
    }
  }
  else if (a4)
  {
    goto LABEL_57;
  }
LABEL_60:
  v69 = IncompleteVirtualRegister;
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(_QWORD *)(v45 + 640);
  v47 = *(unint64_t **)(v45 + 648);
  v48 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  v49 = *(llvm::MachineFunction **)(v46 + 32);
  v50 = *(unsigned __int8 **)(a1 + 72);
  v70 = v50;
  if (v50)
    llvm::MetadataTracking::track((uint64_t)&v70, v50, 2);
  v51 = v48 + 48 * v68;
  v52 = *((_QWORD *)v49 + 28);
  if (v52)
    *((_QWORD *)v49 + 28) = *(_QWORD *)v52;
  else
    v52 = sub_1C484358C((uint64_t)v49 + 128, 72, 3);
  *(_QWORD *)&v71 = v70;
  if (v70)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v70, v70, (uint64_t)&v71);
    v70 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v52, v49, v51, (unsigned __int8 **)&v71, 0);
  if ((_QWORD)v71)
    llvm::MetadataTracking::untrack((uint64_t)&v71, (unsigned __int8 *)v71);
  if (v70)
    llvm::MetadataTracking::untrack((uint64_t)&v70, v70);
  v53 = *(_QWORD *)(v46 + 40);
  *(_QWORD *)(v52 + 24) = v53;
  v54 = *(_QWORD *)(v53 + 32);
  v55 = *(unsigned int *)(v52 + 40);
  if ((_DWORD)v55)
  {
    v59 = *(_QWORD *)(v52 + 32);
    v60 = *(_QWORD *)(v54 + 40);
    v61 = 32 * v55;
    do
    {
      if (!*(_BYTE *)v59)
      {
        v62 = *(unsigned int *)(v59 + 4);
        if ((int)v62 >= 0)
          v63 = (uint64_t *)(*(_QWORD *)(v60 + 272) + 8 * v62);
        else
          v63 = (uint64_t *)(*(_QWORD *)(v60 + 24) + 16 * (v62 & 0x7FFFFFFF) + 8);
        v64 = *v63;
        if (*v63)
        {
          v65 = *(_QWORD *)(v64 + 16);
          *(_QWORD *)(v64 + 16) = v59;
          *(_QWORD *)(v59 + 16) = v65;
          if ((*(_BYTE *)(v59 + 3) & 1) != 0)
          {
            *(_QWORD *)(v59 + 24) = v64;
          }
          else
          {
            *(_QWORD *)(v59 + 24) = 0;
            v63 = (uint64_t *)(v65 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v59 + 16) = v59;
          *(_QWORD *)(v59 + 24) = 0;
        }
        *v63 = v59;
      }
      v59 += 32;
      v61 -= 32;
    }
    while (v61);
  }
  v56 = v18 >> 2;
  v57 = *(_QWORD *)(v54 + 728);
  if (v57)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v57 + 24))(v57, v52);
  v58 = *v47 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v52 = v58 | *(_QWORD *)v52 & 7;
  *(_QWORD *)(v52 + 8) = v47;
  *(_QWORD *)(v58 + 8) = v52;
  *v47 = *v47 & 7 | v52;
  *((_QWORD *)&v71 + 1) = 0;
  v72 = 0uLL;
  LODWORD(v71) = 0x1000000;
  DWORD1(v71) = v69;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v49, (const llvm::MachineOperand *)&v71);
  LODWORD(v71) = 1;
  *((_QWORD *)&v71 + 1) = 0;
  *(_QWORD *)&v72 = v56;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v49, (const llvm::MachineOperand *)&v71);
  if (v19)
  {
    LODWORD(v71) = 1;
    *((_QWORD *)&v71 + 1) = 0;
    *(_QWORD *)&v72 = v21;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v49, (const llvm::MachineOperand *)&v71);
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 256) + 280))
  {
    LODWORD(v71) = 1;
    *((_QWORD *)&v71 + 1) = 0;
    *(_QWORD *)&v72 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v49, (const llvm::MachineOperand *)&v71);
    LODWORD(v71) = 1;
    *((_QWORD *)&v71 + 1) = 0;
    *(_QWORD *)&v72 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v49, (const llvm::MachineOperand *)&v71);
  }
  v26 = 1;
  LODWORD(v71) = 1;
  *((_QWORD *)&v71 + 1) = 0;
  *(_QWORD *)&v72 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v49, (const llvm::MachineOperand *)&v71);
  LODWORD(v71) = 1;
  *((_QWORD *)&v71 + 1) = 0;
  *(_QWORD *)&v72 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v49, (const llvm::MachineOperand *)&v71);
  v71 = 0u;
  v72 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v49, (const llvm::MachineOperand *)&v71);
  if (v67)
    return sub_1C4789F18((_QWORD *)a1, a3, v69, v66);
  return v26;
}

uint64_t sub_1C478D888(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, int a6, int a7, unsigned int a8)
{
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  llvm::MachineFunction *v33;
  unsigned __int8 *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned __int8 *v55;
  __int128 v56;
  __int128 v57;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 256) + 280))
    return 0;
  v14 = sub_1C4786340(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32), *(_QWORD *)(a1 + 272));
  if (v14 == -1)
    return 0;
  v15 = v14;
  if (a6 == 1)
  {
    v16 = sub_1C4786340(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64), *(_QWORD *)(a1 + 272));
    if (v16 == -1)
      return 0;
    v49 = v16 >> 2;
  }
  else
  {
    v49 = 0;
  }
  v51 = a8;
  if (a7 == 1)
  {
    if (a4)
    {
      v17 = a4;
      v18 = a3;
      v19 = (a3 & ~(a3 >> 31)) - a3;
      while (v19)
      {
        sub_1C51A3F30(*(_QWORD **)(a1 + 48), v18, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 16 * (v18 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E7F982F0, 0);
        ++v18;
        --v19;
        if (!--v17)
          goto LABEL_17;
      }
      return 0;
    }
  }
  else if (a4)
  {
    v20 = a4;
    v21 = a3;
    v22 = (a3 & ~(a3 >> 31)) - a3;
    while (v22)
    {
      sub_1C51A3F30(*(_QWORD **)(a1 + 48), v21, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 16 * (v21 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E7F984F0, 0);
      ++v21;
      --v22;
      if (!--v20)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  if (a5 == -1)
  {
    v23 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (v23)
      v24 = *(_BYTE *)(v23 + 16) == 16;
    else
      v24 = 0;
    if (!v24)
      return 0;
    v25 = (_QWORD *)(v23 + 24);
    if (*(_DWORD *)(v23 + 32) >= 0x41u)
      v25 = (_QWORD *)*v25;
    a5 = *(_DWORD *)v25;
  }
  if (a5 > 3)
    return 0;
  v26 = (uint64_t)*(&off_1E7F952B8 + (int)a5);
  qword_1EF8EF700 = v26;
  v27 = 1;
  if (a4)
  {
    v28 = 0;
    v52 = *(unsigned __int16 *)(v26 + 8 * (a7 == 0) + 4 * v51 + 2 * (a6 == 1));
    v50 = a4;
    do
    {
      v29 = *(_QWORD *)(a1 + 32);
      v30 = *(_QWORD *)(v29 + 640);
      v31 = *(unint64_t **)(v29 + 648);
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
      v33 = *(llvm::MachineFunction **)(v30 + 32);
      v34 = *(unsigned __int8 **)(a1 + 72);
      v55 = v34;
      if (v34)
        llvm::MetadataTracking::track((uint64_t)&v55, v34, 2);
      v35 = *((_QWORD *)v33 + 28);
      if (v35)
        *((_QWORD *)v33 + 28) = *(_QWORD *)v35;
      else
        v35 = sub_1C484358C((uint64_t)v33 + 128, 72, 3);
      *(_QWORD *)&v56 = v55;
      if (v55)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v55, v55, (uint64_t)&v56);
        v55 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v35, v33, v32 + 48 * v52, (unsigned __int8 **)&v56, 0);
      if ((_QWORD)v56)
        llvm::MetadataTracking::untrack((uint64_t)&v56, (unsigned __int8 *)v56);
      if (v55)
        llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
      v36 = *(_QWORD *)(v30 + 40);
      *(_QWORD *)(v35 + 24) = v36;
      v37 = *(_QWORD *)(v36 + 32);
      v38 = *(unsigned int *)(v35 + 40);
      if ((_DWORD)v38)
      {
        v41 = *(_QWORD *)(v35 + 32);
        v42 = *(_QWORD *)(v37 + 40);
        v43 = 32 * v38;
        do
        {
          if (!*(_BYTE *)v41)
          {
            v44 = *(unsigned int *)(v41 + 4);
            if ((int)v44 >= 0)
              v45 = (uint64_t *)(*(_QWORD *)(v42 + 272) + 8 * v44);
            else
              v45 = (uint64_t *)(*(_QWORD *)(v42 + 24) + 16 * (v44 & 0x7FFFFFFF) + 8);
            v46 = *v45;
            if (*v45)
            {
              v47 = *(_QWORD *)(v46 + 16);
              *(_QWORD *)(v46 + 16) = v41;
              *(_QWORD *)(v41 + 16) = v47;
              if ((*(_BYTE *)(v41 + 3) & 1) != 0)
              {
                *(_QWORD *)(v41 + 24) = v46;
              }
              else
              {
                *(_QWORD *)(v41 + 24) = 0;
                v45 = (uint64_t *)(v47 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v41 + 16) = v41;
              *(_QWORD *)(v41 + 24) = 0;
            }
            *v45 = v41;
          }
          v41 += 32;
          v43 -= 32;
        }
        while (v43);
      }
      v39 = *(_QWORD *)(v37 + 728);
      if (v39)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 24))(v39, v35);
      v40 = *v31 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v35 = v40 | *(_QWORD *)v35 & 7;
      *(_QWORD *)(v35 + 8) = v31;
      *(_QWORD *)(v40 + 8) = v35;
      *v31 = *v31 & 7 | v35;
      HIDWORD(v56) = 0;
      v57 = 0uLL;
      *(_QWORD *)((char *)&v56 + 4) = (v28 + a3);
      LODWORD(v56) = 0x1000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v56);
      LODWORD(v56) = 1;
      *((_QWORD *)&v56 + 1) = 0;
      *(_QWORD *)&v57 = (v15 >> 2) + 4 * (_DWORD)v28;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v56);
      if (a6 == 1)
      {
        LODWORD(v56) = 1;
        *((_QWORD *)&v56 + 1) = 0;
        *(_QWORD *)&v57 = v49;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v56);
      }
      LODWORD(v56) = 1;
      *((_QWORD *)&v56 + 1) = 0;
      *(_QWORD *)&v57 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v56);
      LODWORD(v56) = 1;
      *((_QWORD *)&v56 + 1) = 0;
      *(_QWORD *)&v57 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v56);
      v56 = 0u;
      v57 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v56);
      ++v28;
    }
    while (v28 != v50);
    return 1;
  }
  return v27;
}

uint64_t sub_1C478DD3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unsigned int a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _BOOL8 v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;

  if ((a4 & 1) == 0 && !*(_BYTE *)(a1 + 280))
    return 0;
  v9 = *(_DWORD *)(a2 + 20);
  v10 = (v9 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v9 & 0x7FFFFFF);
  v11 = *(_QWORD *)(*(_QWORD *)v10 + 8);
  if (!v11 || *(_QWORD *)(v11 + 8))
    return 0;
  v13 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2;
  v14 = (v9 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v9 & 0x7FFFFFF));
  if (sub_1C632A44C(a1, *v14))
    return 0;
  v15 = *(_DWORD *)(a2 + 20);
  if ((v15 & 0x40000000) != 0)
    v16 = *(uint64_t **)(a2 - 8);
  else
    v16 = (uint64_t *)(a2 - 32 * (v15 & 0x7FFFFFF));
  v17 = *v16;
  v18 = *(unsigned __int8 *)(*v16 + 16);
  if (v17 && v18 >= 0x1C)
  {
    if (*(_QWORD *)(v17 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if (v18 < 0x1C)
  {
    return 0;
  }
  v19 = v18 - 40;
  if (v19 > 0x2C)
    return 0;
  if (((1 << v19) & 0x255) != 0)
    return sub_1C47B43B0(a1, (unsigned __int8 *)v17, a3, v13, a5, 0);
  if (((1 << v19) & 0x180000000) != 0)
  {
    if (a5 != 1)
      return sub_1C4793484((uint64_t *)a1, v17, a3, v13);
    return 0;
  }
  if (v19 != 44)
    return 0;
  v20 = *(_QWORD *)(v17 - 32);
  if (!v20
    || *(_BYTE *)(v20 + 16)
    || *(_QWORD *)(v20 + 24) != *(_QWORD *)(v17 + 72)
    || (*(_BYTE *)(v20 + 33) & 0x20) == 0)
  {
    return 0;
  }
  v21 = *(_DWORD *)(v20 + 36);
  if (v21 > 1826)
  {
    if (v21 <= 1998)
    {
      switch(v21)
      {
        case 1827:
          if (a5 == 1)
            return 0;
          v23 = *(_BYTE **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
          v24 = (_QWORD *)a1;
          v25 = a3;
          v26 = 445;
          return sub_1C47B1160(v24, (uint64_t *)v17, v23, v25, v26, v13);
        case 1828:
        case 1829:
        case 1831:
        case 1832:
        case 1833:
        case 1834:
        case 1835:
        case 1836:
        case 1837:
        case 1838:
        case 1847:
        case 1848:
        case 1849:
        case 1850:
          return 0;
        case 1830:
          return sub_1C478AE7C((uint64_t *)a1, v17, a3, v13);
        case 1839:
        case 1840:
        case 1841:
        case 1842:
        case 1843:
        case 1844:
        case 1845:
        case 1846:
          v22 = v17;
          sub_1C47860F8(v21);
          return sub_1C478D888(a1, v22, a3, 0, 0, 0, v13, a5);
        case 1851:
          return sub_1C478FCB8((uint64_t *)a1, (uint64_t *)v17, *(_BYTE **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF)), 0, a3, v13, 1, 1);
        default:
          if ((v21 - 1990) >= 2)
            return 0;
          return sub_1C478E2BC((_QWORD *)a1, v17, a3, v13, a5);
      }
    }
    switch(v21)
    {
      case 2093:
      case 2095:
        if (a5 == 1)
          return 0;
        if (v21 == 2095)
          v27 = 6;
        else
          v27 = 7;
        result = sub_1C4792FFC(a1, v17, a3, v27, v13);
        break;
      case 2094:
      case 2096:
        if (a5 == 1)
          return 0;
        if (v21 == 2096)
          v28 = 2;
        else
          v28 = 3;
        result = sub_1C47928B0((uint64_t *)a1, v17, a3, v28, v13);
        break;
      default:
        if (v21 != 1999 && v21 != 2001)
          return 0;
        result = sub_1C478E5F4((_QWORD *)a1, v17, a3, v13, a5);
        break;
    }
    return result;
  }
  if (v21 > 174)
  {
    if (v21 > 260)
    {
      if (v21 != 261)
      {
        if (v21 != 280)
          return 0;
        return sub_1C4791358(a1, (uint64_t *)v17, a3, 0, v13, a5);
      }
      v23 = *(_BYTE **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
      v24 = (_QWORD *)a1;
      v25 = a3;
      v26 = 424;
    }
    else
    {
      if (v21 == 175)
      {
        if (a5 == 1)
          return 0;
        return sub_1C47B361C((_QWORD *)a1, v17, a3, v13);
      }
      if (v21 != 177 || a5 == 1)
        return 0;
      v23 = *(_BYTE **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
      v24 = (_QWORD *)a1;
      v25 = a3;
      v26 = 231;
    }
    return sub_1C47B1160(v24, (uint64_t *)v17, v23, v25, v26, v13);
  }
  if (v21 > 138)
  {
    if (v21 == 139)
    {
      return sub_1C478EF18((_QWORD *)a1, v17, a3, v13, a5);
    }
    else
    {
      if (v21 != 140 || a5 == 1)
        return 0;
      return sub_1C4792588((_QWORD *)a1, v17, a3, v13);
    }
  }
  else
  {
    if (v21 != 75)
    {
      if (v21 != 76 || a5 == 1)
        return 0;
      v23 = *(_BYTE **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
      v24 = (_QWORD *)a1;
      v25 = a3;
      v26 = 234;
      return sub_1C47B1160(v24, (uint64_t *)v17, v23, v25, v26, v13);
    }
    if (a5 == 1)
      return 0;
    return sub_1C47B2F00((_QWORD *)a1, v17, a3, v13);
  }
}

BOOL sub_1C478E2BC(_QWORD *a1, uint64_t a2, int a3, int a4, int a5)
{
  int v5;
  int v11;
  _BOOL8 v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  llvm::MachineFunction *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  BOOL v38;
  unsigned __int8 *v39;
  __int128 v40;
  __int128 v41;

  v5 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  if ((v5 | 2) != 2)
    return 0;
  v38 = v5 == 0;
  v37 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v36 = 0;
  v11 = sub_1C47AE068((uint64_t)a1, &v37, (int *)&v36, &v38, 0, *(_QWORD *)(a2 + 40), 0, 1);
  v12 = v11 != 0;
  if (v11)
  {
    v13 = v11;
    v14 = word_1C640F038[8 * (*(_DWORD *)(*(_QWORD *)(a2 - 32) + 36) == 1991) + 4 * (a4 == 1) + 2 * v38 + a5];
    v15 = a1[4];
    v16 = *(_QWORD *)(v15 + 640);
    v17 = *(unint64_t **)(v15 + 648);
    v18 = *(_QWORD *)(a1[12] + 8);
    v19 = *(llvm::MachineFunction **)(v16 + 32);
    v20 = (unsigned __int8 *)a1[9];
    v39 = v20;
    if (v20)
      llvm::MetadataTracking::track((uint64_t)&v39, v20, 2);
    v21 = v18 + 48 * v14;
    v22 = *((_QWORD *)v19 + 28);
    if (v22)
      *((_QWORD *)v19 + 28) = *(_QWORD *)v22;
    else
      v22 = sub_1C484358C((uint64_t)v19 + 128, 72, 3);
    *(_QWORD *)&v40 = v39;
    if (v39)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v39, v39, (uint64_t)&v40);
      v39 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v22, v19, v21, (unsigned __int8 **)&v40, 0);
    if ((_QWORD)v40)
      llvm::MetadataTracking::untrack((uint64_t)&v40, (unsigned __int8 *)v40);
    if (v39)
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    v23 = *(_QWORD *)(v16 + 40);
    *(_QWORD *)(v22 + 24) = v23;
    v24 = *(_QWORD *)(v23 + 32);
    v25 = *(unsigned int *)(v22 + 40);
    if ((_DWORD)v25)
    {
      v29 = *(_QWORD *)(v22 + 32);
      v30 = *(_QWORD *)(v24 + 40);
      v31 = 32 * v25;
      do
      {
        if (!*(_BYTE *)v29)
        {
          v32 = *(unsigned int *)(v29 + 4);
          if ((int)v32 >= 0)
            v33 = (uint64_t *)(*(_QWORD *)(v30 + 272) + 8 * v32);
          else
            v33 = (uint64_t *)(*(_QWORD *)(v30 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8);
          v34 = *v33;
          if (*v33)
          {
            v35 = *(_QWORD *)(v34 + 16);
            *(_QWORD *)(v34 + 16) = v29;
            *(_QWORD *)(v29 + 16) = v35;
            if ((*(_BYTE *)(v29 + 3) & 1) != 0)
            {
              *(_QWORD *)(v29 + 24) = v34;
            }
            else
            {
              *(_QWORD *)(v29 + 24) = 0;
              v33 = (uint64_t *)(v35 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v29 + 16) = v29;
            *(_QWORD *)(v29 + 24) = 0;
          }
          *v33 = v29;
        }
        v29 += 32;
        v31 -= 32;
      }
      while (v31);
    }
    v26 = *(_QWORD *)(v24 + 728);
    if (v26)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v26 + 24))(v26, v22);
    v27 = *v17 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v22 = v27 | *(_QWORD *)v22 & 7;
    *(_QWORD *)(v22 + 8) = v17;
    *(_QWORD *)(v27 + 8) = v22;
    *v17 = *v17 & 7 | v22;
    *((_QWORD *)&v40 + 1) = 0;
    v41 = 0uLL;
    LODWORD(v40) = 0x1000000;
    DWORD1(v40) = a3;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v40);
    LODWORD(v40) = 1;
    *((_QWORD *)&v40 + 1) = 0;
    *(_QWORD *)&v41 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v40);
    *((_QWORD *)&v40 + 1) = 0;
    v41 = 0uLL;
    LODWORD(v40) = 0;
    DWORD1(v40) = v13;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v40);
    LODWORD(v40) = 1;
    *((_QWORD *)&v40 + 1) = 0;
    *(_QWORD *)&v41 = v36;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v40);
    LODWORD(v40) = 1;
    *((_QWORD *)&v40 + 1) = 0;
    *(_QWORD *)&v41 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v40);
    v40 = 0u;
    v41 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v40);
  }
  return v12;
}

uint64_t sub_1C478E5F4(_QWORD *a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v10;
  int IncompleteVirtualRegister;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  llvm::MachineFunction *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  llvm::MachineFunction *v35;
  unsigned __int8 *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  llvm::MachineFunction *v50;
  const llvm::APInt *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  unsigned __int8 *v87;
  __int128 v88;
  int v89;
  char v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 2)
    return 0;
  v10 = a1[6];
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v10, "", 0);
  *(_QWORD *)(*(_QWORD *)(v10 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F98468;
  v12 = *(_QWORD *)(v10 + 8);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    if (!IncompleteVirtualRegister)
      return 0;
  }
  else if (!IncompleteVirtualRegister)
  {
    return 0;
  }
  v13 = a1[6];
  v14 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v13, "", 0);
  *(_QWORD *)(*(_QWORD *)(v13 + 24) + 16 * (v14 & 0x7FFFFFFF)) = &off_1E7F98468;
  v15 = *(_QWORD *)(v13 + 8);
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
    if (v14)
      goto LABEL_6;
    return 0;
  }
  if (!v14)
    return 0;
LABEL_6:
  v81 = a3;
  v82 = v14;
  v16 = *(_DWORD *)(*(_QWORD *)(a2 - 32) + 36) != 1999;
  v17 = a1[4];
  v18 = *(_QWORD *)(v17 + 640);
  v19 = *(unint64_t **)(v17 + 648);
  v20 = *(_QWORD *)(a1[12] + 8);
  v21 = *(llvm::MachineFunction **)(v18 + 32);
  v22 = (unsigned __int8 *)a1[9];
  v87 = v22;
  if (v22)
    llvm::MetadataTracking::track((uint64_t)&v87, v22, 2);
  v23 = v20 + 583296;
  v24 = *((_QWORD *)v21 + 28);
  if (v24)
    *((_QWORD *)v21 + 28) = *(_QWORD *)v24;
  else
    v24 = sub_1C484358C((uint64_t)v21 + 128, 72, 3);
  *(_QWORD *)&v83 = v87;
  if (v87)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v87, v87, (uint64_t)&v83);
    v87 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v24, v21, v23, (unsigned __int8 **)&v83, 0);
  if ((_QWORD)v83)
    llvm::MetadataTracking::untrack((uint64_t)&v83, (unsigned __int8 *)v83);
  if (v87)
    llvm::MetadataTracking::untrack((uint64_t)&v87, v87);
  v25 = *(_QWORD *)(v18 + 40);
  *(_QWORD *)(v24 + 24) = v25;
  v26 = *(_QWORD *)(v25 + 32);
  v27 = *(unsigned int *)(v24 + 40);
  if ((_DWORD)v27)
  {
    v60 = *(_QWORD *)(v24 + 32);
    v61 = *(_QWORD *)(v26 + 40);
    v62 = 32 * v27;
    do
    {
      if (!*(_BYTE *)v60)
      {
        v63 = *(unsigned int *)(v60 + 4);
        if ((int)v63 >= 0)
          v64 = (uint64_t *)(*(_QWORD *)(v61 + 272) + 8 * v63);
        else
          v64 = (uint64_t *)(*(_QWORD *)(v61 + 24) + 16 * (v63 & 0x7FFFFFFF) + 8);
        v65 = *v64;
        if (*v64)
        {
          v66 = *(_QWORD *)(v65 + 16);
          *(_QWORD *)(v65 + 16) = v60;
          *(_QWORD *)(v60 + 16) = v66;
          if ((*(_BYTE *)(v60 + 3) & 1) != 0)
          {
            *(_QWORD *)(v60 + 24) = v65;
          }
          else
          {
            *(_QWORD *)(v60 + 24) = 0;
            v64 = (uint64_t *)(v66 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v60 + 16) = v60;
          *(_QWORD *)(v60 + 24) = 0;
        }
        *v64 = v60;
      }
      v60 += 32;
      v62 -= 32;
    }
    while (v62);
  }
  v28 = 2 * v16;
  v29 = *(_QWORD *)(v26 + 728);
  if (v29)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v29 + 24))(v29, v24);
  v30 = *v19 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v24 = v30 | *(_QWORD *)v24 & 7;
  *(_QWORD *)(v24 + 8) = v19;
  *(_QWORD *)(v30 + 8) = v24;
  *v19 = *v19 & 7 | v24;
  *((_QWORD *)&v83 + 1) = 0;
  v84 = 0uLL;
  LODWORD(v83) = 0x1000000;
  DWORD1(v83) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v83);
  LODWORD(v83) = 1;
  *((_QWORD *)&v83 + 1) = 0;
  *(_QWORD *)&v84 = v28;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v83);
  LODWORD(v83) = 1;
  *((_QWORD *)&v83 + 1) = 0;
  *(_QWORD *)&v84 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v83);
  LODWORD(v83) = 1;
  *((_QWORD *)&v83 + 1) = 0;
  *(_QWORD *)&v84 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v83);
  v83 = 0u;
  v84 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v83);
  v31 = a1[4];
  v32 = *(_QWORD *)(v31 + 640);
  v33 = *(unint64_t **)(v31 + 648);
  v34 = *(_QWORD *)(a1[12] + 8);
  v35 = *(llvm::MachineFunction **)(v32 + 32);
  v36 = (unsigned __int8 *)a1[9];
  v87 = v36;
  if (v36)
    llvm::MetadataTracking::track((uint64_t)&v87, v36, 2);
  v37 = *((_QWORD *)v35 + 28);
  if (v37)
    *((_QWORD *)v35 + 28) = *(_QWORD *)v37;
  else
    v37 = sub_1C484358C((uint64_t)v35 + 128, 72, 3);
  *(_QWORD *)&v83 = v87;
  if (v87)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v87, v87, (uint64_t)&v83);
    v87 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v37, v35, v34 + 643872, (unsigned __int8 **)&v83, 0);
  if ((_QWORD)v83)
    llvm::MetadataTracking::untrack((uint64_t)&v83, (unsigned __int8 *)v83);
  if (v87)
    llvm::MetadataTracking::untrack((uint64_t)&v87, v87);
  v38 = *(_QWORD *)(v32 + 40);
  *(_QWORD *)(v37 + 24) = v38;
  v39 = *(_QWORD *)(v38 + 32);
  v40 = *(unsigned int *)(v37 + 40);
  if ((_DWORD)v40)
  {
    v67 = *(_QWORD *)(v37 + 32);
    v68 = *(_QWORD *)(v39 + 40);
    v69 = 32 * v40;
    do
    {
      if (!*(_BYTE *)v67)
      {
        v70 = *(unsigned int *)(v67 + 4);
        if ((int)v70 >= 0)
          v71 = (uint64_t *)(*(_QWORD *)(v68 + 272) + 8 * v70);
        else
          v71 = (uint64_t *)(*(_QWORD *)(v68 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8);
        v72 = *v71;
        if (*v71)
        {
          v73 = *(_QWORD *)(v72 + 16);
          *(_QWORD *)(v72 + 16) = v67;
          *(_QWORD *)(v67 + 16) = v73;
          if ((*(_BYTE *)(v67 + 3) & 1) != 0)
          {
            *(_QWORD *)(v67 + 24) = v72;
          }
          else
          {
            *(_QWORD *)(v67 + 24) = 0;
            v71 = (uint64_t *)(v73 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v67 + 16) = v67;
          *(_QWORD *)(v67 + 24) = 0;
        }
        *v71 = v67;
      }
      v67 += 32;
      v69 -= 32;
    }
    while (v69);
  }
  v41 = *(_QWORD *)(v39 + 728);
  if (v41)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v41 + 24))(v41, v37);
  v42 = *v33 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v37 = v42 | *(_QWORD *)v37 & 7;
  *(_QWORD *)(v37 + 8) = v33;
  *(_QWORD *)(v42 + 8) = v37;
  *v33 = *v33 & 7 | v37;
  *((_QWORD *)&v83 + 1) = 0;
  v84 = 0uLL;
  LODWORD(v83) = 0x1000000;
  DWORD1(v83) = v82;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v83);
  LODWORD(v83) = 1;
  *((_QWORD *)&v83 + 1) = 0;
  *(_QWORD *)&v84 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v83);
  LODWORD(v83) = 1;
  *((_QWORD *)&v83 + 1) = 0;
  *(_QWORD *)&v84 = 10;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v83);
  *((_QWORD *)&v83 + 1) = 0;
  v84 = 0uLL;
  LODWORD(v83) = 0;
  DWORD1(v83) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v83);
  LODWORD(v83) = 1;
  *((_QWORD *)&v83 + 1) = 0;
  *(_QWORD *)&v84 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v83);
  LODWORD(v83) = 1;
  *((_QWORD *)&v83 + 1) = 0;
  *(_QWORD *)&v84 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v83);
  v83 = 0u;
  v84 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v83);
  v43 = word_1C640F780[2 * a4 + a5];
  v86 = 32;
  v85 = 1031798784;
  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v83, (const llvm::APInt **)&v85);
  v88 = v83;
  v89 = v84;
  v90 = v90 & 0xF0 | BYTE4(v84) & 0xF;
  if ((_UNKNOWN *)v83 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v88, (unsigned int *)&v83);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v88, (unsigned int *)&v83);
  if (DWORD2(v83) >= 0x41)
    v44 = (uint64_t *)v83;
  else
    v44 = (uint64_t *)&v83;
  v45 = *v44;
  if (DWORD2(v83) >= 0x41 && (_QWORD)v83)
    MEMORY[0x1CAA32F9C]();
  v46 = a1[4];
  v47 = *(_QWORD *)(v46 + 640);
  v48 = *(unint64_t **)(v46 + 648);
  v49 = *(_QWORD *)(a1[12] + 8);
  v50 = *(llvm::MachineFunction **)(v47 + 32);
  v51 = (const llvm::APInt *)a1[9];
  v85 = (uint64_t)v51;
  if (v51)
    llvm::MetadataTracking::track((uint64_t)&v85, (unsigned __int8 *)v51, 2);
  v52 = v49 + 48 * v43;
  v53 = *((_QWORD *)v50 + 28);
  if (v53)
    *((_QWORD *)v50 + 28) = *(_QWORD *)v53;
  else
    v53 = sub_1C484358C((uint64_t)v50 + 128, 72, 3);
  *(_QWORD *)&v83 = v85;
  if (v85)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v85, (unsigned __int8 *)v85, (uint64_t)&v83);
    v85 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v53, v50, v52, (unsigned __int8 **)&v83, 0);
  if ((_QWORD)v83)
    llvm::MetadataTracking::untrack((uint64_t)&v83, (unsigned __int8 *)v83);
  if (v85)
    llvm::MetadataTracking::untrack((uint64_t)&v85, (unsigned __int8 *)v85);
  v54 = *(_QWORD *)(v47 + 40);
  *(_QWORD *)(v53 + 24) = v54;
  v55 = *(_QWORD *)(v54 + 32);
  v56 = *(unsigned int *)(v53 + 40);
  if ((_DWORD)v56)
  {
    v74 = *(_QWORD *)(v53 + 32);
    v75 = *(_QWORD *)(v55 + 40);
    v76 = 32 * v56;
    do
    {
      if (!*(_BYTE *)v74)
      {
        v77 = *(unsigned int *)(v74 + 4);
        if ((int)v77 >= 0)
          v78 = (uint64_t *)(*(_QWORD *)(v75 + 272) + 8 * v77);
        else
          v78 = (uint64_t *)(*(_QWORD *)(v75 + 24) + 16 * (v77 & 0x7FFFFFFF) + 8);
        v79 = *v78;
        if (*v78)
        {
          v80 = *(_QWORD *)(v79 + 16);
          *(_QWORD *)(v79 + 16) = v74;
          *(_QWORD *)(v74 + 16) = v80;
          if ((*(_BYTE *)(v74 + 3) & 1) != 0)
          {
            *(_QWORD *)(v74 + 24) = v79;
          }
          else
          {
            *(_QWORD *)(v74 + 24) = 0;
            v78 = (uint64_t *)(v80 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v74 + 16) = v74;
          *(_QWORD *)(v74 + 24) = 0;
        }
        *v78 = v74;
      }
      v74 += 32;
      v76 -= 32;
    }
    while (v76);
  }
  v57 = *(_QWORD *)(v55 + 728);
  if (v57)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v57 + 24))(v57, v53);
  v58 = *v48 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v53 = v58 | *(_QWORD *)v53 & 7;
  *(_QWORD *)(v53 + 8) = v48;
  *(_QWORD *)(v58 + 8) = v53;
  *v48 = *v48 & 7 | v53;
  *((_QWORD *)&v83 + 1) = 0;
  v84 = 0uLL;
  LODWORD(v83) = 0x1000000;
  DWORD1(v83) = v81;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v53, v50, (const llvm::MachineOperand *)&v83);
  LODWORD(v83) = 1;
  *((_QWORD *)&v83 + 1) = 0;
  *(_QWORD *)&v84 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v53, v50, (const llvm::MachineOperand *)&v83);
  *((_QWORD *)&v83 + 1) = 0;
  v84 = 0uLL;
  LODWORD(v83) = 0;
  DWORD1(v83) = v82;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v53, v50, (const llvm::MachineOperand *)&v83);
  LODWORD(v83) = 1;
  *((_QWORD *)&v83 + 1) = 0;
  *(_QWORD *)&v84 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v53, v50, (const llvm::MachineOperand *)&v83);
  LODWORD(v83) = 1;
  *((_QWORD *)&v83 + 1) = 0;
  *(_QWORD *)&v84 = v45;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v53, v50, (const llvm::MachineOperand *)&v83);
  LODWORD(v83) = 1;
  *((_QWORD *)&v83 + 1) = 0;
  *(_QWORD *)&v84 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v53, v50, (const llvm::MachineOperand *)&v83);
  v83 = 0u;
  v84 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v53, v50, (const llvm::MachineOperand *)&v83);
  if ((_UNKNOWN *)v88 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v88 + 1);
  }
  else if ((*(_DWORD *)(v88 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (*((_QWORD *)&v88 + 1))
      MEMORY[0x1CAA32F9C](*((_QWORD *)&v88 + 1), 0x1000C8000313F17);
  }
  return 1;
}

BOOL sub_1C478EF18(_QWORD *a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  int v5;
  BOOL v10;
  _BOOL4 v11;
  int v12;
  uint64_t *v13;
  _BOOL8 v14;
  int v15;
  int v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  llvm::MachineFunction *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  unsigned __int8 *v45;
  __int128 v46;
  __int128 v47;

  v5 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  if ((v5 | 2) != 2)
    return 0;
  v10 = v5 == 0;
  v11 = v10 && a4 == 1;
  v44 = v10;
  v12 = *(_DWORD *)(a2 + 20);
  if ((v12 & 0x40000000) != 0)
    v13 = *(uint64_t **)(a2 - 8);
  else
    v13 = (uint64_t *)(a2 - 32 * (v12 & 0x7FFFFFF));
  v43 = *v13;
  v42 = 0;
  v15 = sub_1C47AE068((uint64_t)a1, &v43, &v42, &v44, v11, *(_QWORD *)(a2 + 40), 0, 1);
  v14 = v15 != 0;
  if (v15)
  {
    v16 = v15;
    v17 = (char *)&unk_1C640F7F0 + 8 * (a4 == 1) + 4 * v44 + 2 * a5;
    v18 = 0x80000000;
    if (v11)
      v18 = 0x100008000;
    v41 = v18;
    if (v11)
      v17 = (char *)&unk_1C640F834 + 2 * a5;
    v19 = *(unsigned __int16 *)v17;
    v20 = a1[4];
    v21 = *(_QWORD *)(v20 + 640);
    v22 = *(unint64_t **)(v20 + 648);
    v23 = *(_QWORD *)(a1[12] + 8);
    v24 = *(llvm::MachineFunction **)(v21 + 32);
    v25 = (unsigned __int8 *)a1[9];
    v45 = v25;
    if (v25)
      llvm::MetadataTracking::track((uint64_t)&v45, v25, 2);
    v26 = v23 + 48 * v19;
    v27 = *((_QWORD *)v24 + 28);
    if (v27)
      *((_QWORD *)v24 + 28) = *(_QWORD *)v27;
    else
      v27 = sub_1C484358C((uint64_t)v24 + 128, 72, 3);
    *(_QWORD *)&v46 = v45;
    if (v45)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v45, v45, (uint64_t)&v46);
      v45 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v27, v24, v26, (unsigned __int8 **)&v46, 0);
    if ((_QWORD)v46)
      llvm::MetadataTracking::untrack((uint64_t)&v46, (unsigned __int8 *)v46);
    if (v45)
      llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
    v28 = *(_QWORD *)(v21 + 40);
    *(_QWORD *)(v27 + 24) = v28;
    v29 = *(_QWORD *)(v28 + 32);
    v30 = *(unsigned int *)(v27 + 40);
    if ((_DWORD)v30)
    {
      v34 = *(_QWORD *)(v27 + 32);
      v35 = *(_QWORD *)(v29 + 40);
      v36 = 32 * v30;
      do
      {
        if (!*(_BYTE *)v34)
        {
          v37 = *(unsigned int *)(v34 + 4);
          if ((int)v37 >= 0)
            v38 = (uint64_t *)(*(_QWORD *)(v35 + 272) + 8 * v37);
          else
            v38 = (uint64_t *)(*(_QWORD *)(v35 + 24) + 16 * (v37 & 0x7FFFFFFF) + 8);
          v39 = *v38;
          if (*v38)
          {
            v40 = *(_QWORD *)(v39 + 16);
            *(_QWORD *)(v39 + 16) = v34;
            *(_QWORD *)(v34 + 16) = v40;
            if ((*(_BYTE *)(v34 + 3) & 1) != 0)
            {
              *(_QWORD *)(v34 + 24) = v39;
            }
            else
            {
              *(_QWORD *)(v34 + 24) = 0;
              v38 = (uint64_t *)(v40 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v34 + 16) = v34;
            *(_QWORD *)(v34 + 24) = 0;
          }
          *v38 = v34;
        }
        v34 += 32;
        v36 -= 32;
      }
      while (v36);
    }
    v31 = *(_QWORD *)(v29 + 728);
    if (v31)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 24))(v31, v27);
    v32 = *v22 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v27 = v32 | *(_QWORD *)v27 & 7;
    *(_QWORD *)(v27 + 8) = v22;
    *(_QWORD *)(v32 + 8) = v27;
    *v22 = *v22 & 7 | v27;
    *((_QWORD *)&v46 + 1) = 0;
    v47 = 0uLL;
    LODWORD(v46) = 0x1000000;
    DWORD1(v46) = a3;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v24, (const llvm::MachineOperand *)&v46);
    LODWORD(v46) = 1;
    *((_QWORD *)&v46 + 1) = 0;
    *(_QWORD *)&v47 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v24, (const llvm::MachineOperand *)&v46);
    *((_QWORD *)&v46 + 1) = 0;
    v47 = 0uLL;
    LODWORD(v46) = 0;
    DWORD1(v46) = v16;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v24, (const llvm::MachineOperand *)&v46);
    LODWORD(v46) = 1;
    *((_QWORD *)&v46 + 1) = 0;
    *(_QWORD *)&v47 = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v24, (const llvm::MachineOperand *)&v46);
    LODWORD(v46) = 1;
    *((_QWORD *)&v46 + 1) = 0;
    *(_QWORD *)&v47 = v41;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v24, (const llvm::MachineOperand *)&v46);
    LODWORD(v46) = 1;
    *((_QWORD *)&v46 + 1) = 0;
    *(_QWORD *)&v47 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v24, (const llvm::MachineOperand *)&v46);
    v46 = 0u;
    v47 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v27, v24, (const llvm::MachineOperand *)&v46);
  }
  return v14;
}

BOOL sub_1C478F29C(_QWORD *a1, uint64_t a2, int a3, int a4, int a5)
{
  int v5;
  _BOOL8 v10;
  _BOOL4 v12;
  int v13;
  int v14;
  _BOOL8 v15;
  _UNKNOWN ***v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int IncompleteVirtualRegister;
  _UNKNOWN ***v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::MachineFunction *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  llvm::MachineFunction *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  llvm::MachineFunction *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  int v88;
  _BOOL8 v89;
  int v90;
  int v91;
  _UNKNOWN ***v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  BOOL v96;
  unsigned __int8 *v97;
  __int128 v98;
  __int128 v99;

  v5 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  if ((v5 | 2) != 2
    || (*(_BYTE *)(a1[32] + 280) != 0) == (*(_DWORD *)(*(_QWORD *)(a2 - 32) + 36) != 2015)
    || a5 == 1 && *(_BYTE *)(a1[32] + 280))
  {
    return 0;
  }
  v12 = v5 == 0;
  v96 = v5 == 0;
  v95 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v94 = 0;
  v13 = sub_1C47AE068((uint64_t)a1, &v95, (int *)&v94, &v96, 0, *(_QWORD *)(a2 + 40), 7, 1);
  v10 = v13 != 0;
  if (v13)
  {
    v14 = v13;
    v88 = a3;
    v15 = v5 == 0;
    v89 = v15;
    if (*(_BYTE *)(a1[32] + 280))
    {
      if (v5)
        v16 = &off_1E7F98468;
      else
        v16 = &off_1E7F982A8;
      v12 = v96;
      v17 = v13;
    }
    else
    {
      v18 = word_1C640F758[2 * v15 + v96];
      v19 = a1[6];
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v19, "", 0);
      v90 = IncompleteVirtualRegister;
      v21 = &off_1E7F98468;
      if (!v5)
        v21 = &off_1E7F982A8;
      v92 = v21;
      *(_QWORD *)(*(_QWORD *)(v19 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v21;
      v22 = *(_QWORD *)(v19 + 8);
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
      v23 = a1[4];
      v87 = *(unint64_t **)(v23 + 648);
      v24 = *(_QWORD *)(a1[12] + 8);
      v25 = *(_QWORD *)(v23 + 640);
      v26 = *(llvm::MachineFunction **)(v25 + 32);
      v27 = (unsigned __int8 *)a1[9];
      v97 = v27;
      if (v27)
        llvm::MetadataTracking::track((uint64_t)&v97, v27, 2);
      v28 = v24 + 48 * v18;
      v29 = *((_QWORD *)v26 + 28);
      if (v29)
        *((_QWORD *)v26 + 28) = *(_QWORD *)v29;
      else
        v29 = sub_1C484358C((uint64_t)v26 + 128, 72, 3);
      *(_QWORD *)&v98 = v97;
      if (v97)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v97, v97, (uint64_t)&v98);
        v97 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v29, v26, v28, (unsigned __int8 **)&v98, 0);
      if ((_QWORD)v98)
        llvm::MetadataTracking::untrack((uint64_t)&v98, (unsigned __int8 *)v98);
      v17 = v90;
      if (v97)
        llvm::MetadataTracking::untrack((uint64_t)&v97, v97);
      v30 = *(_QWORD *)(v25 + 40);
      *(_QWORD *)(v29 + 24) = v30;
      v31 = *(_QWORD *)(v30 + 32);
      v32 = *(unsigned int *)(v29 + 40);
      if ((_DWORD)v32)
      {
        v80 = *(_QWORD *)(v29 + 32);
        v81 = *(_QWORD *)(v31 + 40);
        v82 = 32 * v32;
        do
        {
          if (!*(_BYTE *)v80)
          {
            v83 = *(unsigned int *)(v80 + 4);
            if ((int)v83 >= 0)
              v84 = (uint64_t *)(*(_QWORD *)(v81 + 272) + 8 * v83);
            else
              v84 = (uint64_t *)(*(_QWORD *)(v81 + 24) + 16 * (v83 & 0x7FFFFFFF) + 8);
            v85 = *v84;
            if (*v84)
            {
              v86 = *(_QWORD *)(v85 + 16);
              *(_QWORD *)(v85 + 16) = v80;
              *(_QWORD *)(v80 + 16) = v86;
              if ((*(_BYTE *)(v80 + 3) & 1) != 0)
              {
                *(_QWORD *)(v80 + 24) = v85;
              }
              else
              {
                *(_QWORD *)(v80 + 24) = 0;
                v84 = (uint64_t *)(v86 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v80 + 16) = v80;
              *(_QWORD *)(v80 + 24) = 0;
            }
            *v84 = v80;
          }
          v80 += 32;
          v82 -= 32;
        }
        while (v82);
      }
      v33 = *(_QWORD *)(v31 + 728);
      if (v33)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v33 + 24))(v33, v29);
      v34 = *v87 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v29 = v34 | *(_QWORD *)v29 & 7;
      *(_QWORD *)(v29 + 8) = v87;
      *(_QWORD *)(v34 + 8) = v29;
      *v87 = *v87 & 7 | v29;
      *((_QWORD *)&v98 + 1) = 0;
      v99 = 0uLL;
      LODWORD(v98) = 0x1000000;
      DWORD1(v98) = v90;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v26, (const llvm::MachineOperand *)&v98);
      LODWORD(v98) = 1;
      *((_QWORD *)&v98 + 1) = 0;
      *(_QWORD *)&v99 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v26, (const llvm::MachineOperand *)&v98);
      *((_QWORD *)&v98 + 1) = 0;
      v99 = 0uLL;
      LODWORD(v98) = 0;
      DWORD1(v98) = v14;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v26, (const llvm::MachineOperand *)&v98);
      LODWORD(v98) = 1;
      *((_QWORD *)&v98 + 1) = 0;
      *(_QWORD *)&v99 = v94;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v26, (const llvm::MachineOperand *)&v98);
      LODWORD(v98) = 1;
      *((_QWORD *)&v98 + 1) = 0;
      *(_QWORD *)&v99 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v26, (const llvm::MachineOperand *)&v98);
      v98 = 0u;
      v99 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v29, v26, (const llvm::MachineOperand *)&v98);
      v94 = 0;
      v96 = v12;
      v15 = v89;
      v16 = v92;
    }
    v91 = v17;
    v35 = word_1C640F760[2 * v15 + v12];
    v36 = a1[6];
    v93 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v36, "", 0);
    *(_QWORD *)(*(_QWORD *)(v36 + 24) + 16 * (v93 & 0x7FFFFFFF)) = v16;
    v37 = *(_QWORD *)(v36 + 8);
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
    v38 = a1[4];
    v39 = *(_QWORD *)(v38 + 640);
    v40 = *(unint64_t **)(v38 + 648);
    v41 = *(_QWORD *)(a1[12] + 8);
    v42 = *(llvm::MachineFunction **)(v39 + 32);
    v43 = (unsigned __int8 *)a1[9];
    v97 = v43;
    if (v43)
      llvm::MetadataTracking::track((uint64_t)&v97, v43, 2);
    v44 = v41 + 48 * v35;
    v45 = *((_QWORD *)v42 + 28);
    if (v45)
      *((_QWORD *)v42 + 28) = *(_QWORD *)v45;
    else
      v45 = sub_1C484358C((uint64_t)v42 + 128, 72, 3);
    *(_QWORD *)&v98 = v97;
    if (v97)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v97, v97, (uint64_t)&v98);
      v97 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v45, v42, v44, (unsigned __int8 **)&v98, 0);
    if ((_QWORD)v98)
      llvm::MetadataTracking::untrack((uint64_t)&v98, (unsigned __int8 *)v98);
    if (v97)
      llvm::MetadataTracking::untrack((uint64_t)&v97, v97);
    v46 = *(_QWORD *)(v39 + 40);
    *(_QWORD *)(v45 + 24) = v46;
    v47 = *(_QWORD *)(v46 + 32);
    v48 = *(unsigned int *)(v45 + 40);
    if ((_DWORD)v48)
    {
      v66 = *(_QWORD *)(v45 + 32);
      v67 = *(_QWORD *)(v47 + 40);
      v68 = 32 * v48;
      do
      {
        if (!*(_BYTE *)v66)
        {
          v69 = *(unsigned int *)(v66 + 4);
          if ((int)v69 >= 0)
            v70 = (uint64_t *)(*(_QWORD *)(v67 + 272) + 8 * v69);
          else
            v70 = (uint64_t *)(*(_QWORD *)(v67 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
          v71 = *v70;
          if (*v70)
          {
            v72 = *(_QWORD *)(v71 + 16);
            *(_QWORD *)(v71 + 16) = v66;
            *(_QWORD *)(v66 + 16) = v72;
            if ((*(_BYTE *)(v66 + 3) & 1) != 0)
            {
              *(_QWORD *)(v66 + 24) = v71;
            }
            else
            {
              *(_QWORD *)(v66 + 24) = 0;
              v70 = (uint64_t *)(v72 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v66 + 16) = v66;
            *(_QWORD *)(v66 + 24) = 0;
          }
          *v70 = v66;
        }
        v66 += 32;
        v68 -= 32;
      }
      while (v68);
    }
    v49 = *(_QWORD *)(v47 + 728);
    if (v49)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v49 + 24))(v49, v45);
    v50 = *v40 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v45 = v50 | *(_QWORD *)v45 & 7;
    *(_QWORD *)(v45 + 8) = v40;
    *(_QWORD *)(v50 + 8) = v45;
    *v40 = *v40 & 7 | v45;
    *((_QWORD *)&v98 + 1) = 0;
    v99 = 0uLL;
    LODWORD(v98) = 0x1000000;
    DWORD1(v98) = v93;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v42, (const llvm::MachineOperand *)&v98);
    LODWORD(v98) = 1;
    *((_QWORD *)&v98 + 1) = 0;
    *(_QWORD *)&v99 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v42, (const llvm::MachineOperand *)&v98);
    *((_QWORD *)&v98 + 1) = 0;
    v99 = 0uLL;
    LODWORD(v98) = 0;
    DWORD1(v98) = v91;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v42, (const llvm::MachineOperand *)&v98);
    LODWORD(v98) = 1;
    *((_QWORD *)&v98 + 1) = 0;
    *(_QWORD *)&v99 = v94;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v42, (const llvm::MachineOperand *)&v98);
    LODWORD(v98) = 1;
    *((_QWORD *)&v98 + 1) = 0;
    *(_QWORD *)&v99 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v42, (const llvm::MachineOperand *)&v98);
    v98 = 0u;
    v99 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v42, (const llvm::MachineOperand *)&v98);
    if (*(_BYTE *)(a1[32] + 280))
    {
      v99 = 0uLL;
      v98 = 0x203000000uLL;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v42, (const llvm::MachineOperand *)&v98);
    }
    v51 = word_1C640F058[8 * (a4 == 1) + 4 * v96 + 2 * v89 + (a5 == 1)];
    v52 = a1[4];
    v53 = *(_QWORD *)(v52 + 640);
    v54 = *(unint64_t **)(v52 + 648);
    v55 = *(_QWORD *)(a1[12] + 8);
    v56 = *(llvm::MachineFunction **)(v53 + 32);
    v57 = (unsigned __int8 *)a1[9];
    v97 = v57;
    if (v57)
      llvm::MetadataTracking::track((uint64_t)&v97, v57, 2);
    v58 = v55 + 48 * v51;
    v59 = *((_QWORD *)v56 + 28);
    if (v59)
      *((_QWORD *)v56 + 28) = *(_QWORD *)v59;
    else
      v59 = sub_1C484358C((uint64_t)v56 + 128, 72, 3);
    *(_QWORD *)&v98 = v97;
    if (v97)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v97, v97, (uint64_t)&v98);
      v97 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v59, v56, v58, (unsigned __int8 **)&v98, 0);
    if ((_QWORD)v98)
      llvm::MetadataTracking::untrack((uint64_t)&v98, (unsigned __int8 *)v98);
    if (v97)
      llvm::MetadataTracking::untrack((uint64_t)&v97, v97);
    v60 = *(_QWORD *)(v53 + 40);
    *(_QWORD *)(v59 + 24) = v60;
    v61 = *(_QWORD *)(v60 + 32);
    v62 = *(unsigned int *)(v59 + 40);
    if ((_DWORD)v62)
    {
      v73 = *(_QWORD *)(v59 + 32);
      v74 = *(_QWORD *)(v61 + 40);
      v75 = 32 * v62;
      do
      {
        if (!*(_BYTE *)v73)
        {
          v76 = *(unsigned int *)(v73 + 4);
          if ((int)v76 >= 0)
            v77 = (uint64_t *)(*(_QWORD *)(v74 + 272) + 8 * v76);
          else
            v77 = (uint64_t *)(*(_QWORD *)(v74 + 24) + 16 * (v76 & 0x7FFFFFFF) + 8);
          v78 = *v77;
          if (*v77)
          {
            v79 = *(_QWORD *)(v78 + 16);
            *(_QWORD *)(v78 + 16) = v73;
            *(_QWORD *)(v73 + 16) = v79;
            if ((*(_BYTE *)(v73 + 3) & 1) != 0)
            {
              *(_QWORD *)(v73 + 24) = v78;
            }
            else
            {
              *(_QWORD *)(v73 + 24) = 0;
              v77 = (uint64_t *)(v79 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v73 + 16) = v73;
            *(_QWORD *)(v73 + 24) = 0;
          }
          *v77 = v73;
        }
        v73 += 32;
        v75 -= 32;
      }
      while (v75);
    }
    v63 = *(_QWORD *)(v61 + 728);
    if (v63)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v63 + 24))(v63, v59);
    v64 = *v54 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v59 = v64 | *(_QWORD *)v59 & 7;
    *(_QWORD *)(v59 + 8) = v54;
    *(_QWORD *)(v64 + 8) = v59;
    *v54 = *v54 & 7 | v59;
    *((_QWORD *)&v98 + 1) = 0;
    v99 = 0uLL;
    LODWORD(v98) = 0x1000000;
    DWORD1(v98) = v88;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v98);
    LODWORD(v98) = 1;
    *((_QWORD *)&v98 + 1) = 0;
    *(_QWORD *)&v99 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v98);
    *((_QWORD *)&v98 + 1) = 0;
    v99 = 0uLL;
    LODWORD(v98) = 0;
    DWORD1(v98) = v91;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v98);
    LODWORD(v98) = 1;
    *((_QWORD *)&v98 + 1) = 0;
    *(_QWORD *)&v99 = v94;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v98);
    *((_QWORD *)&v98 + 1) = 0;
    v99 = 0uLL;
    LODWORD(v98) = 0;
    DWORD1(v98) = v93;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v98);
    LODWORD(v98) = 1;
    *((_QWORD *)&v98 + 1) = 0;
    *(_QWORD *)&v99 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v98);
    if (*(_BYTE *)(a1[32] + 280))
    {
      LODWORD(v98) = 1;
      *((_QWORD *)&v98 + 1) = 0;
      *(_QWORD *)&v99 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v98);
      v99 = 0uLL;
      v98 = 0x200000000uLL;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v98);
      *((_QWORD *)&v98 + 1) = 0;
      v99 = 0uLL;
      LODWORD(v98) = 0x2000000;
      DWORD1(v98) = v93;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v98);
      v65 = *(unsigned int **)(v59 + 32);
      v65[64] = v65[64] & 0xFF0FFFFF | 0x100000;
      *v65 = *v65 & 0xFF0FFFFF | 0x900000;
    }
    else
    {
      LODWORD(v98) = 1;
      *((_QWORD *)&v98 + 1) = 0;
      *(_QWORD *)&v99 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v98);
      v98 = 0u;
      v99 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v98);
    }
  }
  return v10;
}

uint64_t sub_1C478FCB8(uint64_t *a1, uint64_t *a2, _BYTE *a3, _BYTE *a4, int a5, uint64_t a6, int a7, int a8)
{
  uint64_t v8;
  int v9;
  _BYTE *v16;
  int v17;
  void *v18;
  _BYTE *v19;
  int v20;
  const llvm::detail::DoubleAPFloat *v21;
  llvm::detail::DoubleAPFloat *v22;
  llvm::MachineFunction **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t IncompleteVirtualRegister;
  _UNKNOWN ***v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  llvm::MachineFunction *v39;
  llvm::MachineFunction *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  llvm::MachineFunction *v53;
  llvm::MachineFunction *v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  llvm::MachineFunction *v62;
  llvm::MachineFunction *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  llvm::MachineFunction *v73;
  llvm::MachineFunction *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  llvm::MachineInstr *v82;
  llvm::MachineFunction *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  llvm::MachineInstr *v91;
  llvm::MachineFunction *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  llvm::MachineFunction *v105;
  llvm::MachineFunction *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  int v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  uint64_t v157;
  int v158;
  llvm::MachineFunction *v159;
  llvm::MachineInstr *v160;
  llvm::MachineFunction **v161;
  llvm::MachineInstr *v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;

  v165 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v9 = *(unsigned __int8 *)(*a2 + 8);
  if ((v9 | 2) != 2)
    return 0;
  if (a4)
  {
    if (a4[16] == 17)
      v16 = a4;
    else
      v16 = 0;
  }
  else
  {
    v16 = 0;
  }
  if (v16)
    v17 = 1;
  else
    v17 = a8;
  v158 = v17;
  if (v17 != 1)
  {
    v20 = sub_1C5CC1648(a1, (uint64_t)a4);
    if (!v20)
      return 0;
    v154 = v20;
    v157 = 0;
    v9 = *(unsigned __int8 *)(v8 + 8);
    if (!a7)
      goto LABEL_46;
    goto LABEL_38;
  }
  if ((a8 & 1) != 0)
    goto LABEL_21;
  if (!v16)
  {
    v18 = (void *)MEMORY[0x20];
    goto LABEL_23;
  }
  v18 = (void *)*((_QWORD *)v16 + 4);
  if (v18 == &unk_1C866F1C0)
    v19 = (_BYTE *)*((_QWORD *)v16 + 5);
  else
    v19 = v16 + 24;
  if ((v19[28] & 7) != 3)
  {
LABEL_23:
    v21 = (const llvm::detail::DoubleAPFloat *)(v16 + 32);
    if (v18 == &unk_1C866F1C0)
      v22 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v163 + 8), v21);
    else
      v22 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v163 + 8, (uint64_t **)v21);
    if (*((_UNKNOWN **)&v163 + 1) == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v22, (unsigned int *)&v161);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v22, (unsigned int *)&v161);
    if (v162 >= 0x41)
      v23 = v161;
    else
      v23 = (llvm::MachineFunction **)&v161;
    v24 = (uint64_t)*v23;
    if (v162 >= 0x41 && v161)
      MEMORY[0x1CAA32F9C]();
    if (*((_UNKNOWN **)&v163 + 1) == &unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v164);
    }
    else if ((*(_DWORD *)(*((_QWORD *)&v163 + 1) + 8) - 64) <= 0xFFFFFF7F && (_QWORD)v164)
    {
      MEMORY[0x1CAA32F9C](v164, 0x1000C8000313F17);
    }
    v154 = 0;
    v9 = *(unsigned __int8 *)(v8 + 8);
    v25 = v24 | 0x100000000;
    if (*(_BYTE *)(v8 + 8))
      v25 = v24;
    v157 = v25;
    if (!a7)
      goto LABEL_46;
    goto LABEL_38;
  }
LABEL_21:
  v154 = 0;
  v157 = 0;
  if (!a7)
    goto LABEL_46;
LABEL_38:
  v26 = a1[6];
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v26, "", 0);
  if ((_DWORD)a6 == 1)
    v28 = &off_1E7F982A8;
  else
    v28 = &off_1E7F98468;
  *(_QWORD *)(*(_QWORD *)(v26 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v28;
  v29 = *(_QWORD *)(v26 + 8);
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
  if (!sub_1C478B1F8(a1, a2, IncompleteVirtualRegister, a6))
  {
    v32 = sub_1C5CC1648(a1, (uint64_t)a3);
    if (!v32)
      return 0;
    v151 = v32;
    v155 = a5;
    v33 = dword_1C640F810[2 * ((_DWORD)a6 == 1) + (v9 == 0)];
    v34 = a1[6];
    LODWORD(IncompleteVirtualRegister) = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v34, "", 0);
    *(_QWORD *)(*(_QWORD *)(v34 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v28;
    v35 = *(_QWORD *)(v34 + 8);
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
    v36 = a1[4];
    v37 = *(unint64_t **)(v36 + 648);
    v38 = *(_QWORD *)(a1[12] + 8);
    v152 = *(_QWORD *)(v36 + 640);
    v39 = *(llvm::MachineFunction **)(v152 + 32);
    v40 = (llvm::MachineFunction *)a1[9];
    v161 = (llvm::MachineFunction **)v40;
    if (v40)
      llvm::MetadataTracking::track((uint64_t)&v161, (unsigned __int8 *)v40, 2);
    v41 = v38 + 48 * v33;
    v42 = *((_QWORD *)v39 + 28);
    if (v42)
      *((_QWORD *)v39 + 28) = *(_QWORD *)v42;
    else
      v42 = sub_1C484358C((uint64_t)v39 + 128, 72, 3);
    *(_QWORD *)&v163 = v161;
    if (v161)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v161, (unsigned __int8 *)v161, (uint64_t)&v163);
      v161 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v42, v39, v41, (unsigned __int8 **)&v163, 0);
    if ((_QWORD)v163)
      llvm::MetadataTracking::untrack((uint64_t)&v163, (unsigned __int8 *)v163);
    if (v161)
      llvm::MetadataTracking::untrack((uint64_t)&v161, (unsigned __int8 *)v161);
    v43 = *(_QWORD *)(v152 + 40);
    *(_QWORD *)(v42 + 24) = v43;
    v44 = *(_QWORD *)(v43 + 32);
    v45 = *(unsigned int *)(v42 + 40);
    if ((_DWORD)v45)
    {
      v129 = *(_QWORD *)(v42 + 32);
      v130 = *(_QWORD *)(v44 + 40);
      v131 = 32 * v45;
      do
      {
        if (!*(_BYTE *)v129)
        {
          v132 = *(unsigned int *)(v129 + 4);
          if ((int)v132 >= 0)
            v133 = (uint64_t *)(*(_QWORD *)(v130 + 272) + 8 * v132);
          else
            v133 = (uint64_t *)(*(_QWORD *)(v130 + 24) + 16 * (v132 & 0x7FFFFFFF) + 8);
          v134 = *v133;
          if (*v133)
          {
            v135 = *(_QWORD *)(v134 + 16);
            *(_QWORD *)(v134 + 16) = v129;
            *(_QWORD *)(v129 + 16) = v135;
            if ((*(_BYTE *)(v129 + 3) & 1) != 0)
            {
              *(_QWORD *)(v129 + 24) = v134;
            }
            else
            {
              *(_QWORD *)(v129 + 24) = 0;
              v133 = (uint64_t *)(v135 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v129 + 16) = v129;
            *(_QWORD *)(v129 + 24) = 0;
          }
          *v133 = v129;
        }
        v129 += 32;
        v131 -= 32;
      }
      while (v131);
    }
    v46 = *(_QWORD *)(v44 + 728);
    if (v46)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v46 + 24))(v46, v42);
    v47 = *v37 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v42 = v47 | *(_QWORD *)v42 & 7;
    *(_QWORD *)(v42 + 8) = v37;
    *(_QWORD *)(v47 + 8) = v42;
    *v37 = *v37 & 7 | v42;
    *((_QWORD *)&v163 + 1) = 0;
    v164 = 0uLL;
    LODWORD(v163) = 0x1000000;
    DWORD1(v163) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v42, v39, (const llvm::MachineOperand *)&v163);
    LODWORD(v163) = 1;
    *((_QWORD *)&v163 + 1) = 0;
    *(_QWORD *)&v164 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v42, v39, (const llvm::MachineOperand *)&v163);
    v161 = (llvm::MachineFunction **)v39;
    v162 = (llvm::MachineInstr *)v42;
    if ((sub_1C47ADDC8((uint64_t)a1, a3, *(_BYTE *)(v8 + 8) == 0, (llvm::MachineFunction **)&v161, 0) & 1) == 0)
    {
      *((_QWORD *)&v163 + 1) = 0;
      v164 = 0uLL;
      LODWORD(v163) = 0;
      DWORD1(v163) = v151;
      llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
    }
    LODWORD(v163) = 1;
    *((_QWORD *)&v163 + 1) = 0;
    *(_QWORD *)&v164 = 0;
    llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
    LODWORD(v163) = 1;
    *((_QWORD *)&v163 + 1) = 0;
    *(_QWORD *)&v164 = 0x100008000;
    llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
    LODWORD(v163) = 1;
    *((_QWORD *)&v163 + 1) = 0;
    *(_QWORD *)&v164 = 0;
    llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
    v163 = 0u;
    v164 = 0u;
    llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
    goto LABEL_68;
  }
  if ((_DWORD)IncompleteVirtualRegister)
  {
    v155 = a5;
LABEL_68:
    v31 = 0;
    goto LABEL_69;
  }
LABEL_46:
  v30 = sub_1C5CC1648(a1, (uint64_t)a3);
  if (!v30)
    return 0;
  LODWORD(IncompleteVirtualRegister) = v30;
  v155 = a5;
  v31 = 1;
LABEL_69:
  if ((_DWORD)a6 != 1)
  {
    v57 = v158;
    if (v157)
      v57 = 0;
    if (v57 == 1)
    {
      v58 = a1[4];
      v59 = *(_QWORD *)(v58 + 640);
      v60 = *(unint64_t **)(v58 + 648);
      v61 = *(_QWORD *)(a1[12] + 8);
      v62 = *(llvm::MachineFunction **)(v59 + 32);
      v63 = (llvm::MachineFunction *)a1[9];
      v161 = (llvm::MachineFunction **)v63;
      if (v63)
        llvm::MetadataTracking::track((uint64_t)&v161, (unsigned __int8 *)v63, 2);
      v64 = v61 + 66336;
      v65 = *((_QWORD *)v62 + 28);
      if (v65)
        *((_QWORD *)v62 + 28) = *(_QWORD *)v65;
      else
        v65 = sub_1C484358C((uint64_t)v62 + 128, 72, 3);
      *(_QWORD *)&v163 = v161;
      if (v161)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v161, (unsigned __int8 *)v161, (uint64_t)&v163);
        v161 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v65, v62, v64, (unsigned __int8 **)&v163, 0);
      if ((_QWORD)v163)
        llvm::MetadataTracking::untrack((uint64_t)&v163, (unsigned __int8 *)v163);
      if (v161)
        llvm::MetadataTracking::untrack((uint64_t)&v161, (unsigned __int8 *)v161);
      v84 = *(_QWORD *)(v59 + 40);
      *(_QWORD *)(v65 + 24) = v84;
      v85 = *(_QWORD *)(v84 + 32);
      v86 = *(unsigned int *)(v65 + 40);
      if ((_DWORD)v86)
      {
        v122 = *(_QWORD *)(v65 + 32);
        v123 = *(_QWORD *)(v85 + 40);
        v124 = 32 * v86;
        do
        {
          if (!*(_BYTE *)v122)
          {
            v125 = *(unsigned int *)(v122 + 4);
            if ((int)v125 >= 0)
              v126 = (uint64_t *)(*(_QWORD *)(v123 + 272) + 8 * v125);
            else
              v126 = (uint64_t *)(*(_QWORD *)(v123 + 24) + 16 * (v125 & 0x7FFFFFFF) + 8);
            v127 = *v126;
            if (*v126)
            {
              v128 = *(_QWORD *)(v127 + 16);
              *(_QWORD *)(v127 + 16) = v122;
              *(_QWORD *)(v122 + 16) = v128;
              if ((*(_BYTE *)(v122 + 3) & 1) != 0)
              {
                *(_QWORD *)(v122 + 24) = v127;
              }
              else
              {
                *(_QWORD *)(v122 + 24) = 0;
                v126 = (uint64_t *)(v128 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v122 + 16) = v122;
              *(_QWORD *)(v122 + 24) = 0;
            }
            *v126 = v122;
          }
          v122 += 32;
          v124 -= 32;
        }
        while (v124);
      }
      v87 = *(_QWORD *)(v85 + 728);
      if (v87)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v87 + 24))(v87, v65);
      v88 = *v60 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v65 = v88 | *(_QWORD *)v65 & 7;
      *(_QWORD *)(v65 + 8) = v60;
      *(_QWORD *)(v88 + 8) = v65;
      *v60 = *v60 & 7 | v65;
      *((_QWORD *)&v163 + 1) = 0;
      v164 = 0uLL;
      LODWORD(v163) = 0x1000000;
      DWORD1(v163) = v155;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v62, (const llvm::MachineOperand *)&v163);
      LODWORD(v163) = 1;
      *((_QWORD *)&v163 + 1) = 0;
      *(_QWORD *)&v164 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v62, (const llvm::MachineOperand *)&v163);
      v161 = (llvm::MachineFunction **)v62;
      v162 = (llvm::MachineInstr *)v65;
      v89 = 3;
      do
      {
        if (!v31 || (sub_1C47ADDC8((uint64_t)a1, a3, 0, (llvm::MachineFunction **)&v161, 0) & 1) == 0)
        {
          *((_QWORD *)&v163 + 1) = 0;
          LODWORD(v163) = 0;
          DWORD1(v163) = IncompleteVirtualRegister;
          v164 = 0uLL;
          llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
        }
        LODWORD(v163) = 1;
        *((_QWORD *)&v163 + 1) = 0;
        *(_QWORD *)&v164 = 2 * (v89 == 3);
        llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
        --v89;
      }
      while (v89);
      goto LABEL_126;
    }
    v66 = a1[6];
    v67 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v66, "", 0);
    *(_QWORD *)(*(_QWORD *)(v66 + 24) + 16 * (v67 & 0x7FFFFFFF)) = &off_1E7F98468;
    v68 = *(_QWORD *)(v66 + 8);
    if (v68)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68);
      if (v67)
        goto LABEL_86;
    }
    else if (v67)
    {
LABEL_86:
      v153 = v67;
      v69 = a1[4];
      v70 = *(_QWORD *)(v69 + 640);
      v71 = *(unint64_t **)(v69 + 648);
      v72 = *(_QWORD *)(a1[12] + 8);
      v73 = *(llvm::MachineFunction **)(v70 + 32);
      v74 = (llvm::MachineFunction *)a1[9];
      v161 = (llvm::MachineFunction **)v74;
      if (v74)
        llvm::MetadataTracking::track((uint64_t)&v161, (unsigned __int8 *)v74, 2);
      v75 = *((_QWORD *)v73 + 28);
      if (v75)
        *((_QWORD *)v73 + 28) = *(_QWORD *)v75;
      else
        v75 = sub_1C484358C((uint64_t)v73 + 128, 72, 3);
      *(_QWORD *)&v163 = v161;
      if (v161)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v161, (unsigned __int8 *)v161, (uint64_t)&v163);
        v161 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v75, v73, v72 + 66288, (unsigned __int8 **)&v163, 0);
      if ((_QWORD)v163)
        llvm::MetadataTracking::untrack((uint64_t)&v163, (unsigned __int8 *)v163);
      if (v161)
        llvm::MetadataTracking::untrack((uint64_t)&v161, (unsigned __int8 *)v161);
      v93 = *(_QWORD *)(v70 + 40);
      *(_QWORD *)(v75 + 24) = v93;
      v94 = *(_QWORD *)(v93 + 32);
      v95 = *(unsigned int *)(v75 + 40);
      if ((_DWORD)v95)
      {
        v136 = *(_QWORD *)(v75 + 32);
        v137 = *(_QWORD *)(v94 + 40);
        v138 = 32 * v95;
        do
        {
          if (!*(_BYTE *)v136)
          {
            v139 = *(unsigned int *)(v136 + 4);
            if ((int)v139 >= 0)
              v140 = (uint64_t *)(*(_QWORD *)(v137 + 272) + 8 * v139);
            else
              v140 = (uint64_t *)(*(_QWORD *)(v137 + 24) + 16 * (v139 & 0x7FFFFFFF) + 8);
            v141 = *v140;
            if (*v140)
            {
              v142 = *(_QWORD *)(v141 + 16);
              *(_QWORD *)(v141 + 16) = v136;
              *(_QWORD *)(v136 + 16) = v142;
              if ((*(_BYTE *)(v136 + 3) & 1) != 0)
              {
                *(_QWORD *)(v136 + 24) = v141;
              }
              else
              {
                *(_QWORD *)(v136 + 24) = 0;
                v140 = (uint64_t *)(v142 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v136 + 16) = v136;
              *(_QWORD *)(v136 + 24) = 0;
            }
            *v140 = v136;
          }
          v136 += 32;
          v138 -= 32;
        }
        while (v138);
      }
      v96 = *(_QWORD *)(v94 + 728);
      if (v96)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v96 + 24))(v96, v75);
      v97 = *v71 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v75 = v97 | *(_QWORD *)v75 & 7;
      *(_QWORD *)(v75 + 8) = v71;
      *(_QWORD *)(v97 + 8) = v75;
      *v71 = *v71 & 7 | v75;
      *((_QWORD *)&v163 + 1) = 0;
      v164 = 0uLL;
      LODWORD(v163) = 0x1000000;
      DWORD1(v163) = v153;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v73, (const llvm::MachineOperand *)&v163);
      LODWORD(v163) = 1;
      *((_QWORD *)&v163 + 1) = 0;
      *(_QWORD *)&v164 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v73, (const llvm::MachineOperand *)&v163);
      v161 = (llvm::MachineFunction **)v73;
      v162 = (llvm::MachineInstr *)v75;
      v98 = 3;
      do
      {
        if (!v31 || (sub_1C47ADDC8((uint64_t)a1, a3, 0, (llvm::MachineFunction **)&v161, 0) & 1) == 0)
        {
          *((_QWORD *)&v163 + 1) = 0;
          LODWORD(v163) = 0;
          DWORD1(v163) = IncompleteVirtualRegister;
          v164 = 0uLL;
          llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
        }
        LODWORD(v163) = 1;
        *((_QWORD *)&v163 + 1) = 0;
        *(_QWORD *)&v164 = 2 * (v98 == 3);
        llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
        --v98;
      }
      while (v98);
      v164 = 0uLL;
      v163 = 0x201000000uLL;
      llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
      LODWORD(v163) = 1;
      *((_QWORD *)&v163 + 1) = 0;
      *(_QWORD *)&v164 = 0;
      llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
      v163 = 0u;
      v164 = 0u;
      llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
      v99 = 8;
      if (!v158)
        v99 = 0;
      v100 = *(_DWORD *)((char *)&unk_1C6416958 + v99);
      v101 = a1[4];
      v102 = *(_QWORD *)(v101 + 640);
      v103 = *(unint64_t **)(v101 + 648);
      v104 = *(_QWORD *)(a1[12] + 8);
      v105 = *(llvm::MachineFunction **)(v102 + 32);
      v106 = (llvm::MachineFunction *)a1[9];
      v159 = v106;
      if (v106)
        llvm::MetadataTracking::track((uint64_t)&v159, (unsigned __int8 *)v106, 2);
      v107 = v104 + 48 * v100;
      v108 = *((_QWORD *)v105 + 28);
      if (v108)
        *((_QWORD *)v105 + 28) = *(_QWORD *)v108;
      else
        v108 = sub_1C484358C((uint64_t)v105 + 128, 72, 3);
      *(_QWORD *)&v163 = v159;
      if (v159)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v159, (unsigned __int8 *)v159, (uint64_t)&v163);
        v159 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v108, v105, v107, (unsigned __int8 **)&v163, 0);
      if ((_QWORD)v163)
        llvm::MetadataTracking::untrack((uint64_t)&v163, (unsigned __int8 *)v163);
      if (v159)
        llvm::MetadataTracking::untrack((uint64_t)&v159, (unsigned __int8 *)v159);
      v109 = *(_QWORD *)(v102 + 40);
      *(_QWORD *)(v108 + 24) = v109;
      v110 = *(_QWORD *)(v109 + 32);
      v111 = *(unsigned int *)(v108 + 40);
      if ((_DWORD)v111)
      {
        v143 = *(_QWORD *)(v108 + 32);
        v144 = *(_QWORD *)(v110 + 40);
        v145 = 32 * v111;
        do
        {
          if (!*(_BYTE *)v143)
          {
            v146 = *(unsigned int *)(v143 + 4);
            if ((int)v146 >= 0)
              v147 = (uint64_t *)(*(_QWORD *)(v144 + 272) + 8 * v146);
            else
              v147 = (uint64_t *)(*(_QWORD *)(v144 + 24) + 16 * (v146 & 0x7FFFFFFF) + 8);
            v148 = *v147;
            if (*v147)
            {
              v149 = *(_QWORD *)(v148 + 16);
              *(_QWORD *)(v148 + 16) = v143;
              *(_QWORD *)(v143 + 16) = v149;
              if ((*(_BYTE *)(v143 + 3) & 1) != 0)
              {
                *(_QWORD *)(v143 + 24) = v148;
              }
              else
              {
                *(_QWORD *)(v143 + 24) = 0;
                v147 = (uint64_t *)(v149 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v143 + 16) = v143;
              *(_QWORD *)(v143 + 24) = 0;
            }
            *v147 = v143;
          }
          v143 += 32;
          v145 -= 32;
        }
        while (v145);
      }
      v112 = *(_QWORD *)(v110 + 728);
      if (v112)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v112 + 24))(v112, v108);
      v113 = *v103 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v108 = v113 | *(_QWORD *)v108 & 7;
      *(_QWORD *)(v108 + 8) = v103;
      *(_QWORD *)(v113 + 8) = v108;
      *v103 = *v103 & 7 | v108;
      *((_QWORD *)&v163 + 1) = 0;
      v164 = 0uLL;
      LODWORD(v163) = 0x1000000;
      DWORD1(v163) = v155;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v108, v105, (const llvm::MachineOperand *)&v163);
      *((_QWORD *)&v163 + 1) = 0;
      v164 = 0uLL;
      LODWORD(v163) = 0;
      DWORD1(v163) = v153;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v108, v105, (const llvm::MachineOperand *)&v163);
      v159 = v105;
      v160 = (llvm::MachineInstr *)v108;
      if ((v158 & 1) != 0)
      {
        LODWORD(v163) = 1;
        *((_QWORD *)&v163 + 1) = 0;
        *(_QWORD *)&v164 = v157;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v108, v105, (const llvm::MachineOperand *)&v163);
      }
      else
      {
        v114 = sub_1C47ADDC8((uint64_t)a1, a4, 0, &v159, 0);
        v105 = v159;
        v108 = (unint64_t)v160;
        if ((v114 & 1) == 0)
        {
          *((_QWORD *)&v163 + 1) = 0;
          v164 = 0uLL;
          LODWORD(v163) = 0;
          DWORD1(v163) = v154;
          llvm::MachineInstr::addOperand(v160, v159, (const llvm::MachineOperand *)&v163);
          v105 = v159;
          v108 = (unint64_t)v160;
        }
      }
      v90 = 1;
      LODWORD(v163) = 1;
      *((_QWORD *)&v163 + 1) = 0;
      *(_QWORD *)&v164 = 3;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v108, v105, (const llvm::MachineOperand *)&v163);
      v92 = v159;
      v91 = v160;
      v164 = 0uLL;
      v163 = 0x200000000uLL;
      goto LABEL_127;
    }
    return 0;
  }
  v48 = a1[4];
  v49 = *(_QWORD *)(v48 + 640);
  v50 = *(unint64_t **)(v48 + 648);
  v51 = *(_QWORD *)(a1[12] + 8);
  if (v158)
    v52 = 48192;
  else
    v52 = 48144;
  v53 = *(llvm::MachineFunction **)(v49 + 32);
  v54 = (llvm::MachineFunction *)a1[9];
  v161 = (llvm::MachineFunction **)v54;
  if (v54)
    llvm::MetadataTracking::track((uint64_t)&v161, (unsigned __int8 *)v54, 2);
  v55 = v51 + v52;
  v56 = *((_QWORD *)v53 + 28);
  if (v56)
    *((_QWORD *)v53 + 28) = *(_QWORD *)v56;
  else
    v56 = sub_1C484358C((uint64_t)v53 + 128, 72, 3);
  *(_QWORD *)&v163 = v161;
  if (v161)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v161, (unsigned __int8 *)v161, (uint64_t)&v163);
    v161 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v56, v53, v55, (unsigned __int8 **)&v163, 0);
  if ((_QWORD)v163)
    llvm::MetadataTracking::untrack((uint64_t)&v163, (unsigned __int8 *)v163);
  if (v161)
    llvm::MetadataTracking::untrack((uint64_t)&v161, (unsigned __int8 *)v161);
  v76 = *(_QWORD *)(v49 + 40);
  *(_QWORD *)(v56 + 24) = v76;
  v77 = *(_QWORD *)(v76 + 32);
  v78 = *(unsigned int *)(v56 + 40);
  if ((_DWORD)v78)
  {
    v115 = *(_QWORD *)(v56 + 32);
    v116 = *(_QWORD *)(v77 + 40);
    v117 = 32 * v78;
    do
    {
      if (!*(_BYTE *)v115)
      {
        v118 = *(unsigned int *)(v115 + 4);
        if ((int)v118 >= 0)
          v119 = (uint64_t *)(*(_QWORD *)(v116 + 272) + 8 * v118);
        else
          v119 = (uint64_t *)(*(_QWORD *)(v116 + 24) + 16 * (v118 & 0x7FFFFFFF) + 8);
        v120 = *v119;
        if (*v119)
        {
          v121 = *(_QWORD *)(v120 + 16);
          *(_QWORD *)(v120 + 16) = v115;
          *(_QWORD *)(v115 + 16) = v121;
          if ((*(_BYTE *)(v115 + 3) & 1) != 0)
          {
            *(_QWORD *)(v115 + 24) = v120;
          }
          else
          {
            *(_QWORD *)(v115 + 24) = 0;
            v119 = (uint64_t *)(v121 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v115 + 16) = v115;
          *(_QWORD *)(v115 + 24) = 0;
        }
        *v119 = v115;
      }
      v115 += 32;
      v117 -= 32;
    }
    while (v117);
  }
  v79 = *(_QWORD *)(v77 + 728);
  if (v79)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v79 + 24))(v79, v56);
  v80 = *v50 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v56 = v80 | *(_QWORD *)v56 & 7;
  *(_QWORD *)(v56 + 8) = v50;
  *(_QWORD *)(v80 + 8) = v56;
  *v50 = *v50 & 7 | v56;
  *((_QWORD *)&v163 + 1) = 0;
  v164 = 0uLL;
  LODWORD(v163) = 0x1000000;
  DWORD1(v163) = v155;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v56, v53, (const llvm::MachineOperand *)&v163);
  LODWORD(v163) = 1;
  *((_QWORD *)&v163 + 1) = 0;
  *(_QWORD *)&v164 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v56, v53, (const llvm::MachineOperand *)&v163);
  v161 = (llvm::MachineFunction **)v53;
  v162 = (llvm::MachineInstr *)v56;
  v81 = 3;
  do
  {
    if (!v31 || (sub_1C47ADDC8((uint64_t)a1, a3, 1, (llvm::MachineFunction **)&v161, 0) & 1) == 0)
    {
      *((_QWORD *)&v163 + 1) = 0;
      LODWORD(v163) = 0;
      DWORD1(v163) = IncompleteVirtualRegister;
      v164 = 0uLL;
      llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
    }
    LODWORD(v163) = 1;
    *((_QWORD *)&v163 + 1) = 0;
    *(_QWORD *)&v164 = 2 * (v81 == 3);
    llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
    --v81;
  }
  while (v81);
  if ((v158 & 1) != 0)
  {
    v83 = (llvm::MachineFunction *)v161;
    v82 = v162;
    LODWORD(v163) = 1;
    *((_QWORD *)&v163 + 1) = 0;
    *(_QWORD *)&v164 = v157;
  }
  else
  {
    if ((sub_1C47ADDC8((uint64_t)a1, a4, 1, (llvm::MachineFunction **)&v161, 0) & 1) == 0)
    {
      *((_QWORD *)&v163 + 1) = 0;
      v164 = 0uLL;
      LODWORD(v163) = 0;
      DWORD1(v163) = v154;
      llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
    }
    v83 = (llvm::MachineFunction *)v161;
    v82 = v162;
    LODWORD(v163) = 1;
    *((_QWORD *)&v163 + 1) = 0;
    *(_QWORD *)&v164 = 0;
  }
  llvm::MachineInstr::addOperand(v82, v83, (const llvm::MachineOperand *)&v163);
LABEL_126:
  v163 = 0u;
  v164 = 0u;
  llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
  v90 = 1;
  LODWORD(v163) = 1;
  *((_QWORD *)&v163 + 1) = 0;
  *(_QWORD *)&v164 = 0;
  llvm::MachineInstr::addOperand(v162, (llvm::MachineFunction *)v161, (const llvm::MachineOperand *)&v163);
  v92 = (llvm::MachineFunction *)v161;
  v91 = v162;
  v163 = 0u;
  v164 = 0u;
LABEL_127:
  llvm::MachineInstr::addOperand(v91, v92, (const llvm::MachineOperand *)&v163);
  return v90;
}

BOOL sub_1C4790D8C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  int v8;
  uint64_t v9;
  _BOOL8 v10;
  int v11;
  _BYTE **v12;
  int v14;
  int v15;
  _BYTE **v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  llvm::MachineFunction *v23;
  llvm::MachineFunction *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  llvm::MachineFunction *v31;
  llvm::MachineFunction *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  llvm::MachineInstr *v39;
  llvm::MachineFunction *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  llvm::MachineFunction *v61;
  llvm::MachineInstr *v62;
  unsigned int v63;
  _BYTE *v64;
  unsigned __int8 v65;
  __int128 v66;
  __int128 v67;

  if (*(_BYTE *)(*(_QWORD *)a2 + 8))
    return 0;
  v4 = a4;
  v5 = a3;
  v8 = *(_DWORD *)(a2 + 20);
  v9 = (v8 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v8 & 0x7FFFFFF);
  if (*(_BYTE *)(**(_QWORD **)v9 + 8) != 2)
    return 0;
  v10 = 1;
  if ((sub_1C478DD3C(a1, a2, a3, 1, a4) & 1) == 0)
  {
    v65 = 0;
    v11 = *(_DWORD *)(a2 + 20);
    v12 = (v11 & 0x40000000) != 0 ? *(_BYTE ***)(a2 - 8) : (_BYTE **)(a2 - 32 * (v11 & 0x7FFFFFF));
    v14 = sub_1C47ADDC8((uint64_t)a1, *v12, 1, 0, 0);
    v15 = *(_DWORD *)(a2 + 20);
    v16 = (v15 & 0x40000000) != 0 ? *(_BYTE ***)(a2 - 8) : (_BYTE **)(a2 - 32 * (v15 & 0x7FFFFFF));
    v64 = *v16;
    v63 = 0;
    v17 = sub_1C47AE068((uint64_t)a1, (uint64_t *)&v64, (int *)&v63, &v65, v14, *(_QWORD *)(a2 + 40), 7, 1);
    v10 = v17 != 0;
    if (v17)
    {
      v60 = v17;
      if (v14)
      {
        if (v4 == 1)
          v18 = 946;
        else
          v18 = 949;
LABEL_20:
        v19 = a1[4];
        v20 = *(_QWORD *)(v19 + 640);
        v21 = *(unint64_t **)(v19 + 648);
        v22 = *(_QWORD *)(a1[12] + 8);
        v23 = *(llvm::MachineFunction **)(v20 + 32);
        v24 = (llvm::MachineFunction *)a1[9];
        v61 = v24;
        if (v24)
          llvm::MetadataTracking::track((uint64_t)&v61, (unsigned __int8 *)v24, 2);
        v25 = v22 + 48 * v18;
        v26 = *((_QWORD *)v23 + 28);
        if (v26)
          *((_QWORD *)v23 + 28) = *(_QWORD *)v26;
        else
          v26 = sub_1C484358C((uint64_t)v23 + 128, 72, 3);
        *(_QWORD *)&v66 = v61;
        if (v61)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v61, (unsigned __int8 *)v61, (uint64_t)&v66);
          v61 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v26, v23, v25, (unsigned __int8 **)&v66, 0);
        if ((_QWORD)v66)
          llvm::MetadataTracking::untrack((uint64_t)&v66, (unsigned __int8 *)v66);
        if (v61)
          llvm::MetadataTracking::untrack((uint64_t)&v61, (unsigned __int8 *)v61);
        v34 = *(_QWORD *)(v20 + 40);
        *(_QWORD *)(v26 + 24) = v34;
        v35 = *(_QWORD *)(v34 + 32);
        v36 = *(unsigned int *)(v26 + 40);
        if ((_DWORD)v36)
        {
          v46 = *(_QWORD *)(v26 + 32);
          v47 = *(_QWORD *)(v35 + 40);
          v48 = 32 * v36;
          do
          {
            if (!*(_BYTE *)v46)
            {
              v49 = *(unsigned int *)(v46 + 4);
              if ((int)v49 >= 0)
                v50 = (uint64_t *)(*(_QWORD *)(v47 + 272) + 8 * v49);
              else
                v50 = (uint64_t *)(*(_QWORD *)(v47 + 24) + 16 * (v49 & 0x7FFFFFFF) + 8);
              v51 = *v50;
              if (*v50)
              {
                v52 = *(_QWORD *)(v51 + 16);
                *(_QWORD *)(v51 + 16) = v46;
                *(_QWORD *)(v46 + 16) = v52;
                if ((*(_BYTE *)(v46 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v46 + 24) = v51;
                }
                else
                {
                  *(_QWORD *)(v46 + 24) = 0;
                  v50 = (uint64_t *)(v52 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v46 + 16) = v46;
                *(_QWORD *)(v46 + 24) = 0;
              }
              *v50 = v46;
            }
            v46 += 32;
            v48 -= 32;
          }
          while (v48);
        }
        v37 = *(_QWORD *)(v35 + 728);
        if (v37)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v37 + 24))(v37, v26);
        v38 = *v21 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v26 = v38 | *(_QWORD *)v26 & 7;
        *(_QWORD *)(v26 + 8) = v21;
        *(_QWORD *)(v38 + 8) = v26;
        *v21 = *v21 & 7 | v26;
        *((_QWORD *)&v66 + 1) = 0;
        v67 = 0uLL;
        LODWORD(v66) = 0x1000000;
        DWORD1(v66) = v5;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v23, (const llvm::MachineOperand *)&v66);
        LODWORD(v66) = 1;
        *((_QWORD *)&v66 + 1) = 0;
        *(_QWORD *)&v67 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v23, (const llvm::MachineOperand *)&v66);
        v61 = v23;
        v62 = (llvm::MachineInstr *)v26;
        if ((sub_1C47ADDC8((uint64_t)a1, v64, v14, &v61, 0) & 1) == 0)
        {
          *((_QWORD *)&v66 + 1) = 0;
          v67 = 0uLL;
          LODWORD(v66) = 0;
          DWORD1(v66) = v60;
          llvm::MachineInstr::addOperand(v62, v61, (const llvm::MachineOperand *)&v66);
        }
        LODWORD(v66) = 1;
        *((_QWORD *)&v66 + 1) = 0;
        *(_QWORD *)&v67 = v63;
        llvm::MachineInstr::addOperand(v62, v61, (const llvm::MachineOperand *)&v66);
        LODWORD(v66) = 1;
        *((_QWORD *)&v66 + 1) = 0;
        *(_QWORD *)&v67 = 0x100008000;
        llvm::MachineInstr::addOperand(v62, v61, (const llvm::MachineOperand *)&v66);
        LODWORD(v66) = 1;
        *((_QWORD *)&v66 + 1) = 0;
        *(_QWORD *)&v67 = 0;
        llvm::MachineInstr::addOperand(v62, v61, (const llvm::MachineOperand *)&v66);
        v40 = v61;
        v39 = v62;
        v66 = 0u;
        v67 = 0u;
        goto LABEL_43;
      }
      v18 = word_1C640F748[2 * v4 + v65];
      if (v4 || !v65)
        goto LABEL_20;
      v27 = a1[4];
      v28 = *(_QWORD *)(v27 + 640);
      v29 = *(unint64_t **)(v27 + 648);
      v30 = *(_QWORD *)(a1[12] + 8);
      v31 = *(llvm::MachineFunction **)(v28 + 32);
      v32 = (llvm::MachineFunction *)a1[9];
      v61 = v32;
      if (v32)
        llvm::MetadataTracking::track((uint64_t)&v61, (unsigned __int8 *)v32, 2);
      v33 = *((_QWORD *)v31 + 28);
      if (v33)
        *((_QWORD *)v31 + 28) = *(_QWORD *)v33;
      else
        v33 = sub_1C484358C((uint64_t)v31 + 128, 72, 3);
      *(_QWORD *)&v66 = v61;
      if (v61)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v61, (unsigned __int8 *)v61, (uint64_t)&v66);
        v61 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v33, v31, v30 + 912, (unsigned __int8 **)&v66, 0);
      if ((_QWORD)v66)
        llvm::MetadataTracking::untrack((uint64_t)&v66, (unsigned __int8 *)v66);
      if (v61)
        llvm::MetadataTracking::untrack((uint64_t)&v61, (unsigned __int8 *)v61);
      v41 = *(_QWORD *)(v28 + 40);
      *(_QWORD *)(v33 + 24) = v41;
      v42 = *(_QWORD *)(v41 + 32);
      v43 = *(unsigned int *)(v33 + 40);
      if ((_DWORD)v43)
      {
        v53 = *(_QWORD *)(v33 + 32);
        v54 = *(_QWORD *)(v42 + 40);
        v55 = 32 * v43;
        do
        {
          if (!*(_BYTE *)v53)
          {
            v56 = *(unsigned int *)(v53 + 4);
            if ((int)v56 >= 0)
              v57 = (uint64_t *)(*(_QWORD *)(v54 + 272) + 8 * v56);
            else
              v57 = (uint64_t *)(*(_QWORD *)(v54 + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
            v58 = *v57;
            if (*v57)
            {
              v59 = *(_QWORD *)(v58 + 16);
              *(_QWORD *)(v58 + 16) = v53;
              *(_QWORD *)(v53 + 16) = v59;
              if ((*(_BYTE *)(v53 + 3) & 1) != 0)
              {
                *(_QWORD *)(v53 + 24) = v58;
              }
              else
              {
                *(_QWORD *)(v53 + 24) = 0;
                v57 = (uint64_t *)(v59 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v53 + 16) = v53;
              *(_QWORD *)(v53 + 24) = 0;
            }
            *v57 = v53;
          }
          v53 += 32;
          v55 -= 32;
        }
        while (v55);
      }
      v44 = *(_QWORD *)(v42 + 728);
      if (v44)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v44 + 24))(v44, v33);
      v45 = *v29 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v33 = v45 | *(_QWORD *)v33 & 7;
      *(_QWORD *)(v33 + 8) = v29;
      *(_QWORD *)(v45 + 8) = v33;
      *v29 = *v29 & 7 | v33;
      *((_QWORD *)&v66 + 1) = 0;
      v67 = 0uLL;
      LODWORD(v66) = 0x1000000;
      DWORD1(v66) = v5;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v33, v31, (const llvm::MachineOperand *)&v66);
      v61 = v31;
      v62 = (llvm::MachineInstr *)v33;
      if ((sub_1C47ADDC8((uint64_t)a1, v64, 0, &v61, 0) & 1) == 0)
      {
        v40 = v61;
        v39 = v62;
        *((_QWORD *)&v66 + 1) = 0;
        v67 = 0uLL;
        LODWORD(v66) = 0;
        DWORD1(v66) = v60;
LABEL_43:
        llvm::MachineInstr::addOperand(v39, v40, (const llvm::MachineOperand *)&v66);
      }
    }
  }
  return v10;
}

uint64_t sub_1C4791358(uint64_t a1, uint64_t *a2, int a3, char a4, int a5, unsigned int a6)
{
  int v6;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t result;
  int v17;
  uint64_t *v18;
  int v19;
  unsigned __int8 **v20;
  _DWORD *v21;
  _BOOL4 v22;
  void *v23;
  uint64_t v24;
  unsigned int IncompleteVirtualRegister;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v34;
  uint64_t *v35;
  int v36;
  int v37;
  const llvm::APFloat *v38;
  llvm::APFloatBase *v39;
  llvm::Type *v40;
  llvm::APFloatBase *v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  _UNKNOWN ***v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  llvm::MachineFunction *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  llvm::MachineFunction *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  uint64_t v92;
  llvm::MachineFunction *v93;
  unsigned __int8 *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  llvm::MachineFunction *v108;
  unsigned __int8 *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  const llvm::APFloat *v118;
  llvm::APFloatBase *v119;
  const llvm::APFloat *v120;
  llvm::APFloatBase *v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  int v154;
  _DWORD *v155;
  int v156;
  unsigned int v157;
  int v158;
  void *v159;
  int v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned __int8 *v164;
  BOOL v165;
  unsigned int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  llvm::APFloatBase *v170;
  llvm::APFloatBase *v171;
  uint64_t v172;
  int v173[4];
  __int128 v174;
  unsigned __int8 *v175;
  llvm::APFloatBase *v176;
  llvm::APFloatBase *v177;
  llvm::APFloatBase *v178;
  unsigned __int8 *v179;
  _DWORD *v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;

  v185 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(*a2 + 8);
  if ((v6 | 2) != 2)
    return 0;
  v13 = **(_QWORD **)*a2;
  v14 = *(unsigned __int8 *)(a1 + 280);
  if (a6 != 1)
    goto LABEL_5;
  if (!*(_BYTE *)(a1 + 280))
    return 0;
  v14 = 1;
LABEL_5:
  if (v14)
    v15 = a5 == 1;
  else
    v15 = 1;
  if (v15 && (a4 & 1) != 0)
    return 0;
  v17 = *((_DWORD *)a2 + 5);
  if ((v17 & 0x40000000) != 0)
    v18 = (uint64_t *)*(a2 - 1);
  else
    v18 = &a2[-4 * (v17 & 0x7FFFFFF)];
  v165 = *(_BYTE *)(*(_QWORD *)*v18 + 8) == 0;
  v19 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 256) + 281);
  v164 = 0;
  if ((v17 & 0x40000000) != 0)
    v20 = (unsigned __int8 **)*(a2 - 1);
  else
    v20 = (unsigned __int8 **)&a2[-4 * (v17 & 0x7FFFFFF)];
  v164 = *v20;
  v163 = 0;
  result = sub_1C47AE068(a1, (uint64_t *)&v164, (int *)&v163, &v165, 0, a2[5], 7, 1);
  v162 = result;
  if ((_DWORD)result)
  {
    v156 = v19;
    v21 = &unk_1C866F15C;
    v22 = v165;
    if (v165)
      v23 = &unk_1C866F15C;
    else
      v23 = &unk_1C866F184;
    v159 = v23;
    v161 = a5;
    if (a5 != 1)
      v21 = &unk_1C866F184;
    v155 = v21;
    v24 = *(_QWORD *)(a1 + 48);
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v24, "", 0);
    *(_QWORD *)(*(_QWORD *)(v24 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F98468;
    v26 = *(_QWORD *)(v24 + 8);
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
    if (*(_BYTE *)(a1 + 280) && (v27 = a2[1]) != 0 && *(_QWORD *)(v27 + 8))
    {
      v28 = 426;
      do
      {
        v29 = *(_QWORD *)(v27 + 24);
        if (v29 && *(_BYTE *)(v29 + 16) == 74)
        {
          while (1)
          {
            v29 = *(_QWORD *)(v29 + 8);
            if (!v29)
              break;
            v30 = *(_QWORD *)(v29 + 24);
            v31 = *(unsigned __int8 *)(v30 + 16);
            if (v31 == 49)
              v32 = 424;
            else
              v32 = v28;
            if (v31 >= 0x1C && v30 != 0)
              v28 = v32;
          }
        }
        v27 = *(_QWORD *)(v27 + 8);
      }
      while (v27);
    }
    else
    {
      v28 = 426;
    }
    v34 = *((_DWORD *)a2 + 5);
    if ((v34 & 0x40000000) != 0)
      v35 = (uint64_t *)*(a2 - 1);
    else
      v35 = &a2[-4 * (v34 & 0x7FFFFFF)];
    v36 = sub_1C47B1160((_QWORD *)a1, a2, (_BYTE *)*v35, IncompleteVirtualRegister, v28, 0);
    result = 0;
    if (v36)
    {
      v160 = a3;
      BYTE12(v184) = BYTE12(v184) & 0xF0 | 3;
      if (v22)
        v37 = -15;
      else
        v37 = -127;
      v154 = v37;
      DWORD2(v184) = v37;
      *((_QWORD *)&v183 + 1) = v159;
      *(_QWORD *)&v184 = 0;
      sub_1C47A8E18((uint64_t)&v183, 0);
      v39 = llvm::ConstantFP::get(*(llvm::ConstantFP **)*a2, (llvm::LLVMContext *)&v183, v38);
      v41 = llvm::ConstantFP::get((llvm::ConstantFP **)(v13 + 1672), v40, 0.0);
      v42 = v165;
      if (v165)
        v43 = 3;
      else
        v43 = 0;
      v181 = 0;
      v182 = 0;
      v179 = v164;
      v180 = 0;
      v169 = v162;
      LODWORD(v170) = 0;
      HIDWORD(v170) = IncompleteVirtualRegister;
      v175 = 0;
      v176 = v39;
      v177 = v41;
      v178 = 0;
      v174 = xmmword_1C640F7D0;
      if (v156)
      {
        v177 = 0;
        v178 = v41;
        v44 = 10;
        v45 = 3;
        v170 = (llvm::APFloatBase *)IncompleteVirtualRegister;
      }
      else
      {
        v44 = 6;
        v45 = 4;
      }
      v47 = v160;
      v46 = v161;
      if ((a4 & 1) == 0)
      {
        v157 = v43;
        v48 = *(_QWORD *)(a1 + 48);
        v47 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v48, "", 0);
        *(_QWORD *)(*(_QWORD *)(v48 + 24) + 16 * (v47 & 0x7FFFFFFF)) = &off_1E7F98468;
        v49 = *(_QWORD *)(v48 + 8);
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
        v46 = v161;
        v43 = v157;
      }
      sub_1C47B1500(a1, v45, (const llvm::APFloat *)v44, v43, v47, v42, 0, (uint64_t)&v179, (int *)&v169, &v175, (unsigned int *)&v174);
      if (*((_UNKNOWN **)&v183 + 1) == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v184);
        v50 = v160;
      }
      else
      {
        v50 = v160;
        if ((*(_DWORD *)(*((_QWORD *)&v183 + 1) + 8) - 64) <= 0xFFFFFF7F && (_QWORD)v184)
          MEMORY[0x1CAA32F9C](v184, 0x1000C8000313F17);
      }
      if ((a4 & 1) == 0)
      {
        if (!*(_BYTE *)(a1 + 280))
        {
          v51 = *(_QWORD *)(a1 + 48);
          v52 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v51, "", 0);
          v50 = v52;
          v53 = &off_1E7F982A8;
          if (v46 != 1)
            v53 = &off_1E7F98468;
          *(_QWORD *)(*(_QWORD *)(v51 + 24) + 16 * (v52 & 0x7FFFFFFF)) = v53;
          v54 = *(_QWORD *)(v51 + 8);
          if (v54)
            (*(void (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
        }
        v152 = v47;
        v158 = v50;
        v55 = word_1C640F7E0[4 * (v46 == 1) + 2 * v165 + a6];
        v56 = *(_QWORD *)(a1 + 32);
        v57 = *(_QWORD *)(v56 + 640);
        v58 = *(unint64_t **)(v56 + 648);
        v59 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
        v60 = *(llvm::MachineFunction **)(v57 + 32);
        v61 = *(unsigned __int8 **)(a1 + 72);
        v179 = v61;
        if (v61)
          llvm::MetadataTracking::track((uint64_t)&v179, v61, 2);
        v62 = v59 + 48 * v55;
        v63 = *((_QWORD *)v60 + 28);
        if (v63)
          *((_QWORD *)v60 + 28) = *(_QWORD *)v63;
        else
          v63 = sub_1C484358C((uint64_t)v60 + 128, 72, 3);
        v64 = v161;
        *(_QWORD *)&v183 = v179;
        if (v179)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v179, v179, (uint64_t)&v183);
          v179 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v63, v60, v62, (unsigned __int8 **)&v183, 0);
        if ((_QWORD)v183)
          llvm::MetadataTracking::untrack((uint64_t)&v183, (unsigned __int8 *)v183);
        if (v179)
          llvm::MetadataTracking::untrack((uint64_t)&v179, v179);
        v65 = *(_QWORD *)(v57 + 40);
        *(_QWORD *)(v63 + 24) = v65;
        v66 = *(_QWORD *)(v65 + 32);
        v67 = *(unsigned int *)(v63 + 40);
        if ((_DWORD)v67)
        {
          v124 = *(_QWORD *)(v63 + 32);
          v125 = *(_QWORD *)(v66 + 40);
          v126 = 32 * v67;
          do
          {
            if (!*(_BYTE *)v124)
            {
              v127 = *(unsigned int *)(v124 + 4);
              if ((int)v127 >= 0)
                v128 = (uint64_t *)(*(_QWORD *)(v125 + 272) + 8 * v127);
              else
                v128 = (uint64_t *)(*(_QWORD *)(v125 + 24) + 16 * (v127 & 0x7FFFFFFF) + 8);
              v129 = *v128;
              if (*v128)
              {
                v130 = *(_QWORD *)(v129 + 16);
                *(_QWORD *)(v129 + 16) = v124;
                *(_QWORD *)(v124 + 16) = v130;
                if ((*(_BYTE *)(v124 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v124 + 24) = v129;
                }
                else
                {
                  *(_QWORD *)(v124 + 24) = 0;
                  v128 = (uint64_t *)(v130 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v124 + 16) = v124;
                *(_QWORD *)(v124 + 24) = 0;
              }
              *v128 = v124;
            }
            v124 += 32;
            v126 -= 32;
          }
          while (v126);
        }
        v68 = *(_QWORD *)(v66 + 728);
        if (v68)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v68 + 24))(v68, v63);
        v69 = *v58 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v63 = v69 | *(_QWORD *)v63 & 7;
        *(_QWORD *)(v63 + 8) = v58;
        *(_QWORD *)(v69 + 8) = v63;
        *v58 = *v58 & 7 | v63;
        *((_QWORD *)&v183 + 1) = 0;
        v184 = 0uLL;
        LODWORD(v183) = 0x1000000;
        DWORD1(v183) = v158;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v63, v60, (const llvm::MachineOperand *)&v183);
        LODWORD(v183) = 1;
        *((_QWORD *)&v183 + 1) = 0;
        *(_QWORD *)&v184 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v63, v60, (const llvm::MachineOperand *)&v183);
        *((_QWORD *)&v183 + 1) = 0;
        v184 = 0uLL;
        LODWORD(v183) = 0;
        DWORD1(v183) = v152;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v63, v60, (const llvm::MachineOperand *)&v183);
        LODWORD(v183) = 1;
        *((_QWORD *)&v183 + 1) = 0;
        *(_QWORD *)&v184 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v63, v60, (const llvm::MachineOperand *)&v183);
        *(_QWORD *)&v174 = v60;
        *((_QWORD *)&v174 + 1) = v63;
        if ((sub_1C47ADDC8(a1, v164, 0, (llvm::MachineFunction **)&v174, 0) & 1) == 0)
        {
          *((_QWORD *)&v183 + 1) = 0;
          v184 = 0uLL;
          LODWORD(v183) = 0;
          DWORD1(v183) = v162;
          llvm::MachineInstr::addOperand(*((llvm::MachineInstr **)&v174 + 1), (llvm::MachineFunction *)v174, (const llvm::MachineOperand *)&v183);
        }
        LODWORD(v183) = 1;
        *((_QWORD *)&v183 + 1) = 0;
        *(_QWORD *)&v184 = v163;
        llvm::MachineInstr::addOperand(*((llvm::MachineInstr **)&v174 + 1), (llvm::MachineFunction *)v174, (const llvm::MachineOperand *)&v183);
        LODWORD(v183) = 1;
        *((_QWORD *)&v183 + 1) = 0;
        *(_QWORD *)&v184 = 0;
        llvm::MachineInstr::addOperand(*((llvm::MachineInstr **)&v174 + 1), (llvm::MachineFunction *)v174, (const llvm::MachineOperand *)&v183);
        v183 = 0u;
        v184 = 0u;
        llvm::MachineInstr::addOperand(*((llvm::MachineInstr **)&v174 + 1), (llvm::MachineFunction *)v174, (const llvm::MachineOperand *)&v183);
        if (!*(_BYTE *)(a1 + 280))
        {
          if (v161 != 1 && v6 && *(_BYTE *)(*(_QWORD *)(a1 + 256) + 300))
          {
            v70 = *(_QWORD *)(a1 + 48);
            v71 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v70, "", 0);
            *(_QWORD *)(*(_QWORD *)(v70 + 24) + 16 * (v71 & 0x7FFFFFFF)) = &off_1E7F98468;
            v72 = *(_QWORD *)(v70 + 8);
            if (v72)
              (*(void (**)(uint64_t))(*(_QWORD *)v72 + 24))(v72);
            v73 = *(_QWORD *)(a1 + 32);
            v74 = *(_QWORD *)(v73 + 640);
            v75 = *(unint64_t **)(v73 + 648);
            v76 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
            v77 = *(llvm::MachineFunction **)(v74 + 32);
            v78 = *(unsigned __int8 **)(a1 + 72);
            v179 = v78;
            if (v78)
              llvm::MetadataTracking::track((uint64_t)&v179, v78, 2);
            v79 = v76 + 61872;
            v80 = *((_QWORD *)v77 + 28);
            if (v80)
              *((_QWORD *)v77 + 28) = *(_QWORD *)v80;
            else
              v80 = sub_1C484358C((uint64_t)v77 + 128, 72, 3);
            *(_QWORD *)&v183 = v179;
            if (v179)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v179, v179, (uint64_t)&v183);
              v179 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v80, v77, v79, (unsigned __int8 **)&v183, 0);
            if ((_QWORD)v183)
              llvm::MetadataTracking::untrack((uint64_t)&v183, (unsigned __int8 *)v183);
            if (v179)
              llvm::MetadataTracking::untrack((uint64_t)&v179, v179);
            v82 = *(_QWORD *)(v74 + 40);
            *(_QWORD *)(v80 + 24) = v82;
            v83 = *(_QWORD *)(v82 + 32);
            v84 = *(unsigned int *)(v80 + 40);
            if ((_DWORD)v84)
            {
              v131 = *(_QWORD *)(v80 + 32);
              v132 = *(_QWORD *)(v83 + 40);
              v133 = 32 * v84;
              do
              {
                if (!*(_BYTE *)v131)
                {
                  v134 = *(unsigned int *)(v131 + 4);
                  if ((int)v134 >= 0)
                    v135 = (uint64_t *)(*(_QWORD *)(v132 + 272) + 8 * v134);
                  else
                    v135 = (uint64_t *)(*(_QWORD *)(v132 + 24) + 16 * (v134 & 0x7FFFFFFF) + 8);
                  v136 = *v135;
                  if (*v135)
                  {
                    v137 = *(_QWORD *)(v136 + 16);
                    *(_QWORD *)(v136 + 16) = v131;
                    *(_QWORD *)(v131 + 16) = v137;
                    if ((*(_BYTE *)(v131 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v131 + 24) = v136;
                    }
                    else
                    {
                      *(_QWORD *)(v131 + 24) = 0;
                      v135 = (uint64_t *)(v137 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v131 + 16) = v131;
                    *(_QWORD *)(v131 + 24) = 0;
                  }
                  *v135 = v131;
                }
                v131 += 32;
                v133 -= 32;
              }
              while (v133);
            }
            v85 = *(_QWORD *)(v83 + 728);
            if (v85)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v85 + 24))(v85, v80);
            v86 = *v75 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v80 = v86 | *(_QWORD *)v80 & 7;
            *(_QWORD *)(v80 + 8) = v75;
            *(_QWORD *)(v86 + 8) = v80;
            *v75 = *v75 & 7 | v80;
            *((_QWORD *)&v183 + 1) = 0;
            v184 = 0uLL;
            LODWORD(v183) = 0x1000000;
            DWORD1(v183) = v71;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v77, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((_QWORD *)&v183 + 1) = 0;
            *(_QWORD *)&v184 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v77, (const llvm::MachineOperand *)&v183);
            *((_QWORD *)&v183 + 1) = 0;
            v184 = 0uLL;
            LODWORD(v183) = 0;
            DWORD1(v183) = v152;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v77, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((_QWORD *)&v183 + 1) = 0;
            *(_QWORD *)&v184 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v77, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((_QWORD *)&v183 + 1) = 0;
            *(_QWORD *)&v184 = 0x10000B800;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v77, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((_QWORD *)&v183 + 1) = 0;
            *(_QWORD *)&v184 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v77, (const llvm::MachineOperand *)&v183);
            v183 = 0u;
            v184 = 0u;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v77, (const llvm::MachineOperand *)&v183);
            v87 = *(_QWORD *)(a1 + 48);
            v153 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v87, "", 0);
            *(_QWORD *)(*(_QWORD *)(v87 + 24) + 16 * (v153 & 0x7FFFFFFF)) = &off_1E7F98468;
            v88 = *(_QWORD *)(v87 + 8);
            if (v88)
              (*(void (**)(uint64_t))(*(_QWORD *)v88 + 24))(v88);
            v89 = *(_QWORD *)(a1 + 32);
            v90 = *(_QWORD *)(v89 + 640);
            v91 = *(unint64_t **)(v89 + 648);
            v92 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
            v93 = *(llvm::MachineFunction **)(v90 + 32);
            v94 = *(unsigned __int8 **)(a1 + 72);
            v179 = v94;
            if (v94)
              llvm::MetadataTracking::track((uint64_t)&v179, v94, 2);
            v95 = v92 + 58416;
            v96 = *((_QWORD *)v93 + 28);
            if (v96)
              *((_QWORD *)v93 + 28) = *(_QWORD *)v96;
            else
              v96 = sub_1C484358C((uint64_t)v93 + 128, 72, 3);
            *(_QWORD *)&v183 = v179;
            if (v179)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v179, v179, (uint64_t)&v183);
              v179 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v96, v93, v95, (unsigned __int8 **)&v183, 0);
            if ((_QWORD)v183)
              llvm::MetadataTracking::untrack((uint64_t)&v183, (unsigned __int8 *)v183);
            if (v179)
              llvm::MetadataTracking::untrack((uint64_t)&v179, v179);
            v97 = *(_QWORD *)(v90 + 40);
            *(_QWORD *)(v96 + 24) = v97;
            v98 = *(_QWORD *)(v97 + 32);
            v99 = *(unsigned int *)(v96 + 40);
            if ((_DWORD)v99)
            {
              v138 = *(_QWORD *)(v96 + 32);
              v139 = *(_QWORD *)(v98 + 40);
              v140 = 32 * v99;
              do
              {
                if (!*(_BYTE *)v138)
                {
                  v141 = *(unsigned int *)(v138 + 4);
                  if ((int)v141 >= 0)
                    v142 = (uint64_t *)(*(_QWORD *)(v139 + 272) + 8 * v141);
                  else
                    v142 = (uint64_t *)(*(_QWORD *)(v139 + 24) + 16 * (v141 & 0x7FFFFFFF) + 8);
                  v143 = *v142;
                  if (*v142)
                  {
                    v144 = *(_QWORD *)(v143 + 16);
                    *(_QWORD *)(v143 + 16) = v138;
                    *(_QWORD *)(v138 + 16) = v144;
                    if ((*(_BYTE *)(v138 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v138 + 24) = v143;
                    }
                    else
                    {
                      *(_QWORD *)(v138 + 24) = 0;
                      v142 = (uint64_t *)(v144 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v138 + 16) = v138;
                    *(_QWORD *)(v138 + 24) = 0;
                  }
                  *v142 = v138;
                }
                v138 += 32;
                v140 -= 32;
              }
              while (v140);
            }
            v100 = *(_QWORD *)(v98 + 728);
            if (v100)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v100 + 24))(v100, v96);
            v101 = *v91 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v96 = v101 | *(_QWORD *)v96 & 7;
            *(_QWORD *)(v96 + 8) = v91;
            *(_QWORD *)(v101 + 8) = v96;
            *v91 = *v91 & 7 | v96;
            *((_QWORD *)&v183 + 1) = 0;
            v184 = 0uLL;
            LODWORD(v183) = 0x1000000;
            DWORD1(v183) = v153;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v93, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((_QWORD *)&v183 + 1) = 0;
            *(_QWORD *)&v184 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v93, (const llvm::MachineOperand *)&v183);
            *((_QWORD *)&v183 + 1) = 0;
            v184 = 0uLL;
            LODWORD(v183) = 0;
            DWORD1(v183) = v71;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v93, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((_QWORD *)&v183 + 1) = 0;
            *(_QWORD *)&v184 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v93, (const llvm::MachineOperand *)&v183);
            *((_QWORD *)&v183 + 1) = 0;
            v184 = 0uLL;
            LODWORD(v183) = 0;
            DWORD1(v183) = v158;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v93, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((_QWORD *)&v183 + 1) = 0;
            *(_QWORD *)&v184 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v93, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((_QWORD *)&v183 + 1) = 0;
            *(_QWORD *)&v184 = 0x100003800;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v93, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((_QWORD *)&v183 + 1) = 0;
            *(_QWORD *)&v184 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v93, (const llvm::MachineOperand *)&v183);
            v183 = 0u;
            v184 = 0u;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v96, v93, (const llvm::MachineOperand *)&v183);
            v102 = *(_QWORD *)(a1 + 48);
            v81 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v102, "", 0);
            *(_QWORD *)(*(_QWORD *)(v102 + 24) + 16 * (v81 & 0x7FFFFFFF)) = &off_1E7F98468;
            v103 = *(_QWORD *)(v102 + 8);
            if (v103)
              (*(void (**)(uint64_t))(*(_QWORD *)v103 + 24))(v103);
            v104 = *(_QWORD *)(a1 + 32);
            v105 = *(_QWORD *)(v104 + 640);
            v106 = *(unint64_t **)(v104 + 648);
            v107 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
            v108 = *(llvm::MachineFunction **)(v105 + 32);
            v109 = *(unsigned __int8 **)(a1 + 72);
            v179 = v109;
            if (v109)
              llvm::MetadataTracking::track((uint64_t)&v179, v109, 2);
            v110 = v107 + 58320;
            v111 = *((_QWORD *)v108 + 28);
            if (v111)
              *((_QWORD *)v108 + 28) = *(_QWORD *)v111;
            else
              v111 = sub_1C484358C((uint64_t)v108 + 128, 72, 3);
            v64 = v161;
            *(_QWORD *)&v183 = v179;
            if (v179)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v179, v179, (uint64_t)&v183);
              v179 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v111, v108, v110, (unsigned __int8 **)&v183, 0);
            if ((_QWORD)v183)
              llvm::MetadataTracking::untrack((uint64_t)&v183, (unsigned __int8 *)v183);
            if (v179)
              llvm::MetadataTracking::untrack((uint64_t)&v179, v179);
            v112 = *(_QWORD *)(v105 + 40);
            *(_QWORD *)(v111 + 24) = v112;
            v113 = *(_QWORD *)(v112 + 32);
            v114 = *(unsigned int *)(v111 + 40);
            if ((_DWORD)v114)
            {
              v145 = *(_QWORD *)(v111 + 32);
              v146 = *(_QWORD *)(v113 + 40);
              v147 = 32 * v114;
              do
              {
                if (!*(_BYTE *)v145)
                {
                  v148 = *(unsigned int *)(v145 + 4);
                  if ((int)v148 >= 0)
                    v149 = (uint64_t *)(*(_QWORD *)(v146 + 272) + 8 * v148);
                  else
                    v149 = (uint64_t *)(*(_QWORD *)(v146 + 24) + 16 * (v148 & 0x7FFFFFFF) + 8);
                  v150 = *v149;
                  if (*v149)
                  {
                    v151 = *(_QWORD *)(v150 + 16);
                    *(_QWORD *)(v150 + 16) = v145;
                    *(_QWORD *)(v145 + 16) = v151;
                    if ((*(_BYTE *)(v145 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v145 + 24) = v150;
                    }
                    else
                    {
                      *(_QWORD *)(v145 + 24) = 0;
                      v149 = (uint64_t *)(v151 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v145 + 16) = v145;
                    *(_QWORD *)(v145 + 24) = 0;
                  }
                  *v149 = v145;
                }
                v145 += 32;
                v147 -= 32;
              }
              while (v147);
            }
            v115 = *(_QWORD *)(v113 + 728);
            if (v115)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v115 + 24))(v115, v111);
            v116 = *v106 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v111 = v116 | *(_QWORD *)v111 & 7;
            *(_QWORD *)(v111 + 8) = v106;
            *(_QWORD *)(v116 + 8) = v111;
            *v106 = *v106 & 7 | v111;
            *((_QWORD *)&v183 + 1) = 0;
            v184 = 0uLL;
            LODWORD(v183) = 0x1000000;
            DWORD1(v183) = v81;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v108, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((_QWORD *)&v183 + 1) = 0;
            *(_QWORD *)&v184 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v108, (const llvm::MachineOperand *)&v183);
            *((_QWORD *)&v183 + 1) = 0;
            v184 = 0uLL;
            LODWORD(v183) = 0;
            DWORD1(v183) = v158;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v108, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((_QWORD *)&v183 + 1) = 0;
            *(_QWORD *)&v184 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v108, (const llvm::MachineOperand *)&v183);
            *((_QWORD *)&v183 + 1) = 0;
            v184 = 0uLL;
            LODWORD(v183) = 0;
            DWORD1(v183) = v153;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v108, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((_QWORD *)&v183 + 1) = 0;
            *(_QWORD *)&v184 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v108, (const llvm::MachineOperand *)&v183);
            *((_QWORD *)&v183 + 1) = 0;
            v184 = 0uLL;
            LODWORD(v183) = 0;
            DWORD1(v183) = v158;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v108, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((_QWORD *)&v183 + 1) = 0;
            *(_QWORD *)&v184 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v108, (const llvm::MachineOperand *)&v183);
            LODWORD(v183) = 1;
            *((_QWORD *)&v183 + 1) = 0;
            *(_QWORD *)&v184 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v108, (const llvm::MachineOperand *)&v183);
            v183 = 0u;
            v184 = 0u;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v111, v108, (const llvm::MachineOperand *)&v183);
          }
          else
          {
            v81 = v158;
          }
          BYTE12(v184) = 3;
          DWORD2(v184) = v154;
          *((_QWORD *)&v183 + 1) = v159;
          *(_QWORD *)&v184 = 0;
          sub_1C47A8F18((uint64_t)&v183, 0);
          BYTE4(v182) = 3;
          if (v64 == 1)
            v117 = -15;
          else
            v117 = -127;
          LODWORD(v182) = v117;
          v180 = v155;
          v181 = 0;
          sub_1C47A8F34((uint64_t)&v179, 0);
          v119 = llvm::ConstantFP::get(*(llvm::ConstantFP **)*a2, (llvm::LLVMContext *)&v183, v118);
          v121 = llvm::ConstantFP::get(*(llvm::ConstantFP **)*a2, (llvm::LLVMContext *)&v179, v120);
          v177 = 0;
          v178 = 0;
          v175 = v164;
          v176 = 0;
          v173[0] = v162;
          v173[1] = 0;
          v173[2] = 0;
          v173[3] = v81;
          v169 = 0;
          v170 = v119;
          v171 = v121;
          v172 = 0;
          v166 = v163;
          v167 = 2;
          v168 = 0;
          if (v64 == 1 && v165)
          {
            sub_1C47B7F70(a1, 2, 6u, 0, v160, (uint64_t)&v175, (uint64_t)v173, (uint64_t)&v169, (uint64_t)&v166);
          }
          else
          {
            if (v165)
              v122 = 3;
            else
              v122 = 0;
            if (v64 == 1)
              v123 = 12;
            else
              v123 = 0;
            sub_1C47B1500(a1, 2, (const llvm::APFloat *)6, v122 | v123, v160, v165, v64 == 1, (uint64_t)&v175, v173, &v169, &v166);
          }
          if (v180 == (_DWORD *)&unk_1C866F1C0)
          {
            sub_1C4773C74(&v181);
          }
          else if ((v180[2] - 64) <= 0xFFFFFF7F && v181)
          {
            MEMORY[0x1CAA32F9C](v181, 0x1000C8000313F17);
          }
          if (*((_UNKNOWN **)&v183 + 1) == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v184);
          }
          else if ((*(_DWORD *)(*((_QWORD *)&v183 + 1) + 8) - 64) <= 0xFFFFFF7F && (_QWORD)v184)
          {
            MEMORY[0x1CAA32F9C](v184, 0x1000C8000313F17);
          }
        }
      }
      return 1;
    }
  }
  return result;
}

BOOL sub_1C4792588(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  int v4;
  int v8;
  _BOOL8 v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  llvm::MachineFunction *v16;
  llvm::MachineFunction *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  llvm::MachineFunction *v33;
  llvm::MachineInstr *v34;
  unsigned int v35;
  _BYTE *v36;
  BOOL v37;
  __int128 v38;
  __int128 v39;

  v4 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  if ((v4 | 2) != 2)
    return 0;
  v37 = v4 == 0;
  v36 = *(_BYTE **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v35 = 0;
  v8 = sub_1C47AE068((uint64_t)a1, (uint64_t *)&v36, (int *)&v35, &v37, 0, *(_QWORD *)(a2 + 40), 7, 1);
  v9 = v8 != 0;
  if (v8)
  {
    v10 = v8;
    v11 = word_1C640F750[2 * (a4 == 1) + v37];
    v12 = a1[4];
    v13 = *(_QWORD *)(v12 + 640);
    v14 = *(unint64_t **)(v12 + 648);
    v15 = *(_QWORD *)(a1[12] + 8);
    v16 = *(llvm::MachineFunction **)(v13 + 32);
    v17 = (llvm::MachineFunction *)a1[9];
    v33 = v17;
    if (v17)
      llvm::MetadataTracking::track((uint64_t)&v33, (unsigned __int8 *)v17, 2);
    v18 = v15 + 48 * v11;
    v19 = *((_QWORD *)v16 + 28);
    if (v19)
      *((_QWORD *)v16 + 28) = *(_QWORD *)v19;
    else
      v19 = sub_1C484358C((uint64_t)v16 + 128, 72, 3);
    *(_QWORD *)&v38 = v33;
    if (v33)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v33, (unsigned __int8 *)v33, (uint64_t)&v38);
      v33 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v19, v16, v18, (unsigned __int8 **)&v38, 0);
    if ((_QWORD)v38)
      llvm::MetadataTracking::untrack((uint64_t)&v38, (unsigned __int8 *)v38);
    if (v33)
      llvm::MetadataTracking::untrack((uint64_t)&v33, (unsigned __int8 *)v33);
    v20 = *(_QWORD *)(v13 + 40);
    *(_QWORD *)(v19 + 24) = v20;
    v21 = *(_QWORD *)(v20 + 32);
    v22 = *(unsigned int *)(v19 + 40);
    if ((_DWORD)v22)
    {
      v26 = *(_QWORD *)(v19 + 32);
      v27 = *(_QWORD *)(v21 + 40);
      v28 = 32 * v22;
      do
      {
        if (!*(_BYTE *)v26)
        {
          v29 = *(unsigned int *)(v26 + 4);
          if ((int)v29 >= 0)
            v30 = (uint64_t *)(*(_QWORD *)(v27 + 272) + 8 * v29);
          else
            v30 = (uint64_t *)(*(_QWORD *)(v27 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
          v31 = *v30;
          if (*v30)
          {
            v32 = *(_QWORD *)(v31 + 16);
            *(_QWORD *)(v31 + 16) = v26;
            *(_QWORD *)(v26 + 16) = v32;
            if ((*(_BYTE *)(v26 + 3) & 1) != 0)
            {
              *(_QWORD *)(v26 + 24) = v31;
            }
            else
            {
              *(_QWORD *)(v26 + 24) = 0;
              v30 = (uint64_t *)(v32 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v26 + 16) = v26;
            *(_QWORD *)(v26 + 24) = 0;
          }
          *v30 = v26;
        }
        v26 += 32;
        v28 -= 32;
      }
      while (v28);
    }
    v23 = *(_QWORD *)(v21 + 728);
    if (v23)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 24))(v23, v19);
    v24 = *v14 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v19 = v24 | *(_QWORD *)v19 & 7;
    *(_QWORD *)(v19 + 8) = v14;
    *(_QWORD *)(v24 + 8) = v19;
    *v14 = *v14 & 7 | v19;
    *((_QWORD *)&v38 + 1) = 0;
    v39 = 0uLL;
    LODWORD(v38) = 0x1000000;
    DWORD1(v38) = a3;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v16, (const llvm::MachineOperand *)&v38);
    LODWORD(v38) = 1;
    *((_QWORD *)&v38 + 1) = 0;
    *(_QWORD *)&v39 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v16, (const llvm::MachineOperand *)&v38);
    v33 = v16;
    v34 = (llvm::MachineInstr *)v19;
    if ((sub_1C47ADDC8((uint64_t)a1, v36, 0, &v33, 0) & 1) == 0)
    {
      *((_QWORD *)&v38 + 1) = 0;
      v39 = 0uLL;
      LODWORD(v38) = 0;
      DWORD1(v38) = v10;
      llvm::MachineInstr::addOperand(v34, v33, (const llvm::MachineOperand *)&v38);
    }
    LODWORD(v38) = 1;
    *((_QWORD *)&v38 + 1) = 0;
    *(_QWORD *)&v39 = v35;
    llvm::MachineInstr::addOperand(v34, v33, (const llvm::MachineOperand *)&v38);
    LODWORD(v38) = 1;
    *((_QWORD *)&v38 + 1) = 0;
    *(_QWORD *)&v39 = 0;
    llvm::MachineInstr::addOperand(v34, v33, (const llvm::MachineOperand *)&v38);
    v38 = 0u;
    v39 = 0u;
    llvm::MachineInstr::addOperand(v34, v33, (const llvm::MachineOperand *)&v38);
  }
  return v9;
}

uint64_t sub_1C47928B0(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, int a5)
{
  int v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t **v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  int IncompleteVirtualRegister;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::MachineFunction *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  llvm::MachineFunction *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v81;
  int v82;
  unsigned __int8 *v83;
  __int128 v84;
  __int128 v85;

  v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(_QWORD *)(a2 - 8);
  else
    v10 = a2 - 32 * (v9 & 0x7FFFFFF);
  v11 = *(_QWORD **)v10;
  v12 = *(unsigned __int8 *)(*(_QWORD *)v10 + 16);
  if (v12 < 0x1C || v11[5] == *(_QWORD *)(a2 + 40))
  {
    v15 = 0;
    if (v12 == 89)
      v14 = v11;
    else
      v14 = 0;
    v13 = v11;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 1;
  }
  v16 = *v11;
  if (*(_BYTE *)(a2 + 16) == 84)
  {
    v17 = *(_QWORD *)(a2 - 32);
    if (v17)
    {
      if (!*(_BYTE *)(v17 + 16) && *(_QWORD *)(v17 + 24) == *(_QWORD *)(a2 + 72) && (*(_BYTE *)(v17 + 33) & 0x20) != 0)
      {
        v18 = *(_DWORD *)(v17 + 36);
        if (v18 == 2094 || v18 == 2096)
        {
          v14 = (_QWORD *)a2;
          goto LABEL_22;
        }
      }
    }
  }
  if (v14 && *(_DWORD *)(v16 + 8) == 2061)
  {
    v9 = *((_DWORD *)v14 + 5);
LABEL_22:
    if ((v9 & 0x40000000) != 0)
      v19 = (uint64_t **)*(v14 - 1);
    else
      v19 = (uint64_t **)&v14[-4 * (v9 & 0x7FFFFFF)];
    v48 = **v19;
    if (v48)
      v49 = *(_BYTE *)(v48 + 8) == 18;
    else
      v49 = 0;
    if (!v49 || *(_DWORD *)(v48 + 32) != 4 || *(_DWORD *)(*(_QWORD *)(v48 + 24) + 8) != 2061)
      return 0;
    if ((v9 & 0x40000000) != 0)
      v50 = (_QWORD *)*(v14 - 1);
    else
      v50 = &v14[-4 * (v9 & 0x7FFFFFF)];
    v56 = 0;
    v69 = v50[4];
    if (!v69 || *(_BYTE *)(v69 + 16) != 16)
      return v56;
    v70 = (unint64_t *)(v69 + 24);
    if (*(_DWORD *)(v69 + 32) >= 0x41u)
      v70 = (unint64_t *)*v70;
    v22 = *v70;
    if (*v70 > 3)
      return 0;
    v71 = (v9 & 0x40000000) != 0 ? (uint64_t *)*(v14 - 1) : &v14[-4 * (v9 & 0x7FFFFFF)];
    v72 = sub_1C5CC1648(a1, *v71);
    if (!v72)
      return 0;
    v21 = v72;
LABEL_28:
    v23 = a1[6];
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v23, "", 0);
    *(_QWORD *)(*(_QWORD *)(v23 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F982A8;
    v25 = *(_QWORD *)(v23 + 8);
    if (v25)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
      if (IncompleteVirtualRegister)
        goto LABEL_30;
    }
    else if (IncompleteVirtualRegister)
    {
LABEL_30:
      v26 = *(_QWORD *)(*(_QWORD *)a1[6] + 16);
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 176))(v26);
      v82 = v21;
      v28 = 16 * (v21 & 0x7FFFFFFF);
      v29 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v27 + 200))(v27, *(_QWORD *)(*(_QWORD *)(a1[6] + 24) + v28) & 0xFFFFFFFFFFFFFFF8, (v22 >> 1) + 1);
      sub_1C51A3F30((_QWORD *)a1[6], v21, *(_QWORD *)(*(_QWORD *)(a1[6] + 24) + v28) & 0xFFFFFFFFFFFFFFF8, v29, 0);
      v30 = a1[4];
      v31 = *(_QWORD *)(v30 + 640);
      v81 = *(unint64_t **)(v30 + 648);
      v32 = *(_QWORD *)(a1[12] + 8);
      v33 = *(llvm::MachineFunction **)(v31 + 32);
      v34 = (unsigned __int8 *)a1[9];
      v83 = v34;
      if (v34)
        llvm::MetadataTracking::track((uint64_t)&v83, v34, 2);
      v35 = v32 + 912;
      v36 = *((_QWORD *)v33 + 28);
      if (v36)
        *((_QWORD *)v33 + 28) = *(_QWORD *)v36;
      else
        v36 = sub_1C484358C((uint64_t)v33 + 128, 72, 3);
      *(_QWORD *)&v84 = v83;
      if (v83)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v83, v83, (uint64_t)&v84);
        v83 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v36, v33, v35, (unsigned __int8 **)&v84, 0);
      if ((_QWORD)v84)
        llvm::MetadataTracking::untrack((uint64_t)&v84, (unsigned __int8 *)v84);
      if (v83)
        llvm::MetadataTracking::untrack((uint64_t)&v83, v83);
      v57 = *(_QWORD *)(v31 + 40);
      *(_QWORD *)(v36 + 24) = v57;
      v58 = *(_QWORD *)(v57 + 32);
      v59 = *(unsigned int *)(v36 + 40);
      if ((_DWORD)v59)
      {
        v73 = *(_QWORD *)(v36 + 32);
        v74 = *(_QWORD *)(v58 + 40);
        v75 = 32 * v59;
        do
        {
          if (!*(_BYTE *)v73)
          {
            v76 = *(unsigned int *)(v73 + 4);
            if ((int)v76 >= 0)
              v77 = (uint64_t *)(*(_QWORD *)(v74 + 272) + 8 * v76);
            else
              v77 = (uint64_t *)(*(_QWORD *)(v74 + 24) + 16 * (v76 & 0x7FFFFFFF) + 8);
            v78 = *v77;
            if (*v77)
            {
              v79 = *(_QWORD *)(v78 + 16);
              *(_QWORD *)(v78 + 16) = v73;
              *(_QWORD *)(v73 + 16) = v79;
              if ((*(_BYTE *)(v73 + 3) & 1) != 0)
              {
                *(_QWORD *)(v73 + 24) = v78;
              }
              else
              {
                *(_QWORD *)(v73 + 24) = 0;
                v77 = (uint64_t *)(v79 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v73 + 16) = v73;
              *(_QWORD *)(v73 + 24) = 0;
            }
            *v77 = v73;
          }
          v73 += 32;
          v75 -= 32;
        }
        while (v75);
      }
      v60 = *(_QWORD *)(v58 + 728);
      if (v60)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v60 + 24))(v60, v36);
      v61 = *v81 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v36 = v61 | *(_QWORD *)v36 & 7;
      *(_QWORD *)(v36 + 8) = v81;
      *(_QWORD *)(v61 + 8) = v36;
      *v81 = *v81 & 7 | v36;
      *((_QWORD *)&v84 + 1) = 0;
      v85 = 0uLL;
      LODWORD(v84) = 0x1000000;
      DWORD1(v84) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v84);
      *((_QWORD *)&v84 + 1) = 0;
      v85 = 0uLL;
      LODWORD(v84) = (((unsigned __int16)(v22 >> 1) + 1) & 0xFFF) << 8;
      DWORD1(v84) = v82;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v84);
      goto LABEL_39;
    }
    return 0;
  }
  if ((v15 & 1) == 0 && *((_BYTE *)v13 + 16) == 66)
  {
    v20 = sub_1C5CC1648(a1, *(v13 - 4));
    if (!v20)
      return 0;
    v21 = v20;
    v22 = 0;
    goto LABEL_28;
  }
  if ((v9 & 0x40000000) != 0)
    v37 = *(uint64_t **)(a2 - 8);
  else
    v37 = (uint64_t *)(a2 - 32 * (v9 & 0x7FFFFFF));
  v38 = sub_1C5CC1648(a1, *v37);
  if (!v38)
    return 0;
  IncompleteVirtualRegister = v38;
  LOBYTE(v22) = 0;
LABEL_39:
  v39 = word_1C640F770[2 * (a5 == 1) + (v22 & 1)];
  v40 = a1[4];
  v41 = *(_QWORD *)(v40 + 640);
  v42 = *(unint64_t **)(v40 + 648);
  v43 = *(_QWORD *)(a1[12] + 8);
  v44 = *(llvm::MachineFunction **)(v41 + 32);
  v45 = (unsigned __int8 *)a1[9];
  v83 = v45;
  if (v45)
    llvm::MetadataTracking::track((uint64_t)&v83, v45, 2);
  v46 = v43 + 48 * v39;
  v47 = *((_QWORD *)v44 + 28);
  if (v47)
    *((_QWORD *)v44 + 28) = *(_QWORD *)v47;
  else
    v47 = sub_1C484358C((uint64_t)v44 + 128, 72, 3);
  *(_QWORD *)&v84 = v83;
  if (v83)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v83, v83, (uint64_t)&v84);
    v83 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v47, v44, v46, (unsigned __int8 **)&v84, 0);
  if ((_QWORD)v84)
    llvm::MetadataTracking::untrack((uint64_t)&v84, (unsigned __int8 *)v84);
  if (v83)
    llvm::MetadataTracking::untrack((uint64_t)&v83, v83);
  v51 = *(_QWORD *)(v41 + 40);
  *(_QWORD *)(v47 + 24) = v51;
  v52 = *(_QWORD *)(v51 + 32);
  v53 = *(unsigned int *)(v47 + 40);
  if ((_DWORD)v53)
  {
    v62 = *(_QWORD *)(v47 + 32);
    v63 = *(_QWORD *)(v52 + 40);
    v64 = 32 * v53;
    do
    {
      if (!*(_BYTE *)v62)
      {
        v65 = *(unsigned int *)(v62 + 4);
        if ((int)v65 >= 0)
          v66 = (uint64_t *)(*(_QWORD *)(v63 + 272) + 8 * v65);
        else
          v66 = (uint64_t *)(*(_QWORD *)(v63 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8);
        v67 = *v66;
        if (*v66)
        {
          v68 = *(_QWORD *)(v67 + 16);
          *(_QWORD *)(v67 + 16) = v62;
          *(_QWORD *)(v62 + 16) = v68;
          if ((*(_BYTE *)(v62 + 3) & 1) != 0)
          {
            *(_QWORD *)(v62 + 24) = v67;
          }
          else
          {
            *(_QWORD *)(v62 + 24) = 0;
            v66 = (uint64_t *)(v68 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v62 + 16) = v62;
          *(_QWORD *)(v62 + 24) = 0;
        }
        *v66 = v62;
      }
      v62 += 32;
      v64 -= 32;
    }
    while (v64);
  }
  v54 = *(_QWORD *)(v52 + 728);
  if (v54)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v54 + 24))(v54, v47);
  v55 = *v42 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v47 = v55 | *(_QWORD *)v47 & 7;
  *(_QWORD *)(v47 + 8) = v42;
  *(_QWORD *)(v55 + 8) = v47;
  *v42 = *v42 & 7 | v47;
  *((_QWORD *)&v84 + 1) = 0;
  v85 = 0uLL;
  LODWORD(v84) = 0x1000000;
  DWORD1(v84) = a3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v47, v44, (const llvm::MachineOperand *)&v84);
  v56 = 1;
  LODWORD(v84) = 1;
  *((_QWORD *)&v84 + 1) = 0;
  *(_QWORD *)&v85 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v47, v44, (const llvm::MachineOperand *)&v84);
  LODWORD(v84) = 1;
  *((_QWORD *)&v84 + 1) = 0;
  *(_QWORD *)&v85 = a4 | 0x100000000;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v47, v44, (const llvm::MachineOperand *)&v84);
  *((_QWORD *)&v84 + 1) = 0;
  v85 = 0uLL;
  LODWORD(v84) = 0;
  DWORD1(v84) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v47, v44, (const llvm::MachineOperand *)&v84);
  LODWORD(v84) = 1;
  *((_QWORD *)&v84 + 1) = 0;
  *(_QWORD *)&v85 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v47, v44, (const llvm::MachineOperand *)&v84);
  LODWORD(v84) = 1;
  *((_QWORD *)&v84 + 1) = 0;
  *(_QWORD *)&v85 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v47, v44, (const llvm::MachineOperand *)&v84);
  v84 = 0u;
  v85 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v47, v44, (const llvm::MachineOperand *)&v84);
  return v56;
}

uint64_t sub_1C4792FFC(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5)
{
  int v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  llvm::MachineFunction *v32;
  llvm::MachineFunction *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  llvm::MachineFunction *v56;
  llvm::MachineInstr *v57;
  __int128 v58;
  __int128 v59;

  v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(uint64_t **)(a2 - 8);
  else
    v11 = (uint64_t *)(a2 - 32 * (v10 & 0x7FFFFFF));
  if ((*(unsigned __int8 *)(*(_QWORD *)a2 + 8) | 2) != 2)
    return 0;
  v12 = (_QWORD *)*v11;
  v13 = *(_QWORD *)*v11;
  v14 = sub_1C5CC1648((uint64_t *)a1, *v11);
  if (!v14)
    return 0;
  v15 = v14;
  v16 = *(_DWORD *)(v13 + 8);
  v17 = *(_DWORD *)(v13 + 8) >> 8;
  v19 = v16 == 13 && v17 == 32;
  if (*(_BYTE *)(a2 + 16) == 84
    && (v20 = *(_QWORD *)(a2 - 32)) != 0
    && !*(_BYTE *)(v20 + 16)
    && *(_QWORD *)(v20 + 24) == *(_QWORD *)(a2 + 72)
    && (*(_BYTE *)(v20 + 33) & 0x20) != 0
    && (*(_DWORD *)(v20 + 36) | 2) == 0x82F)
  {
    v21 = 0;
    v22 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    if (v22 && *(_BYTE *)(v22 + 16) == 16)
    {
      if (*(_DWORD *)(v22 + 32) > 0x40u)
        v23 = **(_QWORD **)(v22 + 24);
      else
        v23 = *(_QWORD *)(v22 + 24);
      if (v23 > 1)
        return 0;
      v55 = a4;
      v49 = (v23 + 1);
      v50 = *(_QWORD *)(**(_QWORD **)(a1 + 48) + 16);
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 176))(v50);
      v52 = 16 * (v15 & 0x7FFFFFFF);
      v54 = v49;
      v53 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v51 + 200))(v51, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + v52) & 0xFFFFFFFFFFFFFFF8, v49);
      sub_1C51A3F30(*(_QWORD **)(a1 + 48), v15, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + v52) & 0xFFFFFFFFFFFFFFF8, v53, 0);
      v26 = 1;
LABEL_33:
      v27 = word_1C640F778[2 * (a5 == 1) + v26];
      v28 = *(_QWORD *)(a1 + 32);
      v29 = *(_QWORD *)(v28 + 640);
      v30 = *(unint64_t **)(v28 + 648);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
      v32 = *(llvm::MachineFunction **)(v29 + 32);
      v33 = *(llvm::MachineFunction **)(a1 + 72);
      v56 = v33;
      if (v33)
        llvm::MetadataTracking::track((uint64_t)&v56, (unsigned __int8 *)v33, 2);
      v34 = v31 + 48 * v27;
      v35 = *((_QWORD *)v32 + 28);
      if (v35)
        *((_QWORD *)v32 + 28) = *(_QWORD *)v35;
      else
        v35 = sub_1C484358C((uint64_t)v32 + 128, 72, 3);
      *(_QWORD *)&v58 = v56;
      if (v56)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v56, (unsigned __int8 *)v56, (uint64_t)&v58);
        v56 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v35, v32, v34, (unsigned __int8 **)&v58, 0);
      if ((_QWORD)v58)
        llvm::MetadataTracking::untrack((uint64_t)&v58, (unsigned __int8 *)v58);
      if (v56)
        llvm::MetadataTracking::untrack((uint64_t)&v56, (unsigned __int8 *)v56);
      v36 = *(_QWORD *)(v29 + 40);
      *(_QWORD *)(v35 + 24) = v36;
      v37 = *(_QWORD *)(v36 + 32);
      v38 = *(unsigned int *)(v35 + 40);
      if ((_DWORD)v38)
      {
        v41 = *(_QWORD *)(v35 + 32);
        v42 = *(_QWORD *)(v37 + 40);
        v43 = 32 * v38;
        do
        {
          if (!*(_BYTE *)v41)
          {
            v44 = *(unsigned int *)(v41 + 4);
            if ((int)v44 >= 0)
              v45 = (uint64_t *)(*(_QWORD *)(v42 + 272) + 8 * v44);
            else
              v45 = (uint64_t *)(*(_QWORD *)(v42 + 24) + 16 * (v44 & 0x7FFFFFFF) + 8);
            v46 = *v45;
            if (*v45)
            {
              v47 = *(_QWORD *)(v46 + 16);
              *(_QWORD *)(v46 + 16) = v41;
              *(_QWORD *)(v41 + 16) = v47;
              if ((*(_BYTE *)(v41 + 3) & 1) != 0)
              {
                *(_QWORD *)(v41 + 24) = v46;
              }
              else
              {
                *(_QWORD *)(v41 + 24) = 0;
                v45 = (uint64_t *)(v47 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v41 + 16) = v41;
              *(_QWORD *)(v41 + 24) = 0;
            }
            *v45 = v41;
          }
          v41 += 32;
          v43 -= 32;
        }
        while (v43);
      }
      v39 = *(_QWORD *)(v37 + 728);
      if (v39)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 24))(v39, v35);
      v40 = *v30 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v35 = v40 | *(_QWORD *)v35 & 7;
      *(_QWORD *)(v35 + 8) = v30;
      *(_QWORD *)(v40 + 8) = v35;
      *v30 = *v30 & 7 | v35;
      *((_QWORD *)&v58 + 1) = 0;
      v59 = 0uLL;
      LODWORD(v58) = 0x1000000;
      DWORD1(v58) = a3;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v32, (const llvm::MachineOperand *)&v58);
      LODWORD(v58) = 1;
      *((_QWORD *)&v58 + 1) = 0;
      *(_QWORD *)&v59 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v32, (const llvm::MachineOperand *)&v58);
      LODWORD(v58) = 1;
      *((_QWORD *)&v58 + 1) = 0;
      *(_QWORD *)&v59 = v55 | 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v32, (const llvm::MachineOperand *)&v58);
      v56 = v32;
      v57 = (llvm::MachineInstr *)v35;
      if (!v54)
      {
        if ((sub_1C47ADDC8(a1, v12, 0, &v56, 0) & 1) != 0)
        {
LABEL_51:
          v21 = 1;
          LODWORD(v58) = 1;
          *((_QWORD *)&v58 + 1) = 0;
          *(_QWORD *)&v59 = 0;
          llvm::MachineInstr::addOperand(v57, v56, (const llvm::MachineOperand *)&v58);
          LODWORD(v58) = 1;
          *((_QWORD *)&v58 + 1) = 0;
          *(_QWORD *)&v59 = 0;
          llvm::MachineInstr::addOperand(v57, v56, (const llvm::MachineOperand *)&v58);
          v58 = 0u;
          v59 = 0u;
          llvm::MachineInstr::addOperand(v57, v56, (const llvm::MachineOperand *)&v58);
          return v21;
        }
        v32 = v56;
        v35 = (unint64_t)v57;
      }
      *((_QWORD *)&v58 + 1) = 0;
      v59 = 0uLL;
      LODWORD(v58) = (v54 & 0xFFF) << 8;
      DWORD1(v58) = v15;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v32, (const llvm::MachineOperand *)&v58);
      goto LABEL_51;
    }
  }
  else
  {
    v21 = 0;
    v24 = v16 == 13 && v17 == 16;
    v25 = v24 || v19;
    v26 = v24 && !v19;
    if (v25 == 1)
    {
      v54 = 0;
      v55 = a4;
      goto LABEL_33;
    }
  }
  return v21;
}

uint64_t sub_1C4793484(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  llvm::ConstantFP **v8;
  int v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::APFloatBase *v25;
  llvm::Type *v26;
  llvm::APFloatBase *v27;

  v8 = *(llvm::ConstantFP ***)a2;
  v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(uint64_t **)(a2 - 8);
  else
    v10 = (uint64_t *)(a2 - 32 * (v9 & 0x7FFFFFF));
  v11 = *((unsigned __int8 *)v8 + 8);
  if ((v11 | 2) != 2)
    return 0;
  v12 = *v10;
  v13 = *(_DWORD *)(*(_QWORD *)*v10 + 8);
  if (v13 != 13)
    return 0;
  v14 = *(unsigned __int8 *)(a2 + 16);
  v15 = v13 >> 8;
  if (v15 > 15)
  {
    if (v15 == 16)
    {
      if (v14 == 72)
        v19 = 5;
      else
        v19 = 4;
    }
    else
    {
      if (v15 != 32)
        return 0;
      if (v14 == 72)
        v17 = 11;
      else
        v17 = 10;
      if (v14 == 72)
        v18 = 9;
      else
        v18 = 8;
      if (a4)
        v19 = v18;
      else
        v19 = v17;
    }
    return sub_1C4792FFC((uint64_t)a1, a2, a3, v19, a4);
  }
  if (v15 == 1)
  {
    if ((v9 & 0x40000000) != 0)
      v20 = *(uint64_t **)(a2 - 8);
    else
      v20 = (uint64_t *)(a2 - 32 * (v9 & 0x7FFFFFF));
    v22 = *v20;
    if (v22 && *(unsigned __int8 *)(v22 + 16) >= 0x1Cu && *(_QWORD *)(v22 + 40) != *(_QWORD *)(a2 + 40)
      || *(_BYTE *)(v12 + 16) != 82)
    {
      v16 = 0;
      return sub_1C47928B0(a1, a2, a3, v16, a4);
    }
    if ((a4 != 0) != (v11 == 2))
    {
      v23 = *(_QWORD *)(v12 - 64);
      v24 = *(_QWORD *)(v12 - 32);
      v25 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)a2, (llvm::Type *)a2, 1.0);
      v27 = llvm::ConstantFP::get(v8, v26, 0.0);
      return sub_1C47B6BD4((uint64_t)a1, (llvm::Type **)a2, v12, v23, v24, (uint64_t)v25, (uint64_t)v27, a3);
    }
    return 0;
  }
  if (v15 != 8)
    return 0;
  v16 = v14 == 72;
  return sub_1C47928B0(a1, a2, a3, v16, a4);
}

BOOL sub_1C4793684(uint64_t a1)
{
  _BOOL8 result;
  llvm::Type *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  llvm::APInt *v9;

  result = 0;
  if (a1 && *(_BYTE *)(a1 + 16) == 58)
  {
    v3 = *(llvm::Type **)a1;
    if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12)
      v3 = (llvm::Type *)**((_QWORD **)v3 + 2);
    if ((llvm::Type::getPrimitiveSizeInBits(v3) & 0xFFFFFFF0) != 0
      && ((v4 = *(_DWORD *)(a1 + 20), (v4 & 0x40000000) != 0)
        ? (v5 = *(_QWORD *)(a1 - 8))
        : (v5 = a1 - 32 * (v4 & 0x7FFFFFF)),
          (v6 = *(_QWORD *)(v5 + 32)) != 0 ? (v7 = *(_BYTE *)(v6 + 16) == 16) : (v7 = 0),
          v7))
    {
      v8 = *(_DWORD *)(v6 + 32);
      if (v8)
      {
        v9 = (llvm::APInt *)(v6 + 24);
        if (v8 > 0x40)
          return llvm::APInt::countTrailingOnesSlowCase(v9) == v8;
        else
          return *(_QWORD *)v9 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C4793754(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, unsigned int a6)
{
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  _BOOL8 v33;
  const char *v34;
  int v35;
  uint64_t v36;
  const char *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  llvm::MachineFunction *v43;
  llvm::MachineFunction *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  llvm::MachineInstr *v52;
  llvm::MachineFunction *v53;
  llvm::MachineInstr *v54;
  llvm::MachineFunction *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  llvm::MachineFunction *v62;
  llvm::MachineFunction *v63;
  unint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  _BYTE *v86;
  int v87;
  llvm::MachineFunction *v88;
  llvm::MachineInstr *v89;
  int v90;
  BOOL v91;
  _BYTE *v92;
  __int128 v93;
  __int128 v94;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = *(_DWORD *)(a2 + 20);
  if ((v12 & 0x40000000) != 0)
    v13 = *(uint64_t **)(a2 - 8);
  else
    v13 = (uint64_t *)(a2 - 32 * (v12 & 0x7FFFFFF));
  v14 = *v13;
  v92 = (_BYTE *)v14;
  if ((a4 & 0x80000000) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a2 - 32) + 33) & 0x20) != 0)
      v15 = a2;
    else
      v15 = 0;
    v16 = *(_QWORD *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) + 32);
    if (v16)
      v17 = *(_BYTE *)(v16 + 16) == 16;
    else
      v17 = 0;
    if (v17)
    {
      v18 = (_QWORD *)(v16 + 24);
      if (*(_DWORD *)(v16 + 32) >= 0x41u)
        v18 = (_QWORD *)*v18;
      v8 = *(_DWORD *)v18;
    }
    else
    {
      v8 = -1;
    }
  }
  v19 = *(unsigned __int8 *)(*(_QWORD *)v14 + 8);
  if ((v19 | 2) != 2)
    return 0;
  v20 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v21 = *(_DWORD *)(*(_QWORD *)a2 + 8) >> 8;
  v22 = v20 == 13 && v21 == 32;
  v23 = v22;
  if (v22)
  {
    if (v8 < 4)
      return 0;
  }
  else
  {
    v24 = 0;
    v26 = v21 == 16 || v21 == 8;
    if (v20 != 13 || !v26)
      return v24;
  }
  v91 = v19 == 0;
  if (v8 != 12)
    goto LABEL_45;
  if (*(_BYTE *)(v14 + 16) != 74)
    goto LABEL_44;
  a2 = *(_QWORD *)(v14 - 32);
  if (a2 && *(_BYTE *)(a2 + 16) == 73)
  {
    v27 = *(_QWORD *)(v10 + 40);
    v28 = v10;
    if (*(_QWORD *)(a2 + 40) == v27)
    {
      v14 = *(_QWORD *)(a2 - 32);
      if (*(_BYTE *)(v14 + 16) != 74)
        goto LABEL_44;
      v27 = *(_QWORD *)(a2 + 40);
      v28 = a2;
    }
  }
  else
  {
    v27 = *(_QWORD *)(v10 + 40);
    v28 = v10;
  }
  a2 = v28;
  if (*(_QWORD *)(v14 + 40) == v27)
  {
    v56 = sub_1C5CC1648(a1, *(_QWORD *)(v14 - 32));
    if (!v56)
      return 0;
    v57 = v56;
    v58 = a1[4];
    v59 = *(_QWORD *)(v58 + 640);
    v60 = *(unint64_t **)(v58 + 648);
    v61 = *(_QWORD *)(a1[12] + 8);
    v62 = *(llvm::MachineFunction **)(v59 + 32);
    v63 = (llvm::MachineFunction *)a1[9];
    v88 = v63;
    if (v63)
      llvm::MetadataTracking::track((uint64_t)&v88, (unsigned __int8 *)v63, 2);
    v64 = *((_QWORD *)v62 + 28);
    if (v64)
      *((_QWORD *)v62 + 28) = *(_QWORD *)v64;
    else
      v64 = sub_1C484358C((uint64_t)v62 + 128, 72, 3);
    *(_QWORD *)&v93 = v88;
    if (v88)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v88, (unsigned __int8 *)v88, (uint64_t)&v93);
      v88 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v64, v62, v61 + 912, (unsigned __int8 **)&v93, 0);
    if ((_QWORD)v93)
      llvm::MetadataTracking::untrack((uint64_t)&v93, (unsigned __int8 *)v93);
    if (v88)
      llvm::MetadataTracking::untrack((uint64_t)&v88, (unsigned __int8 *)v88);
    v66 = *(_QWORD *)(v59 + 40);
    *(_QWORD *)(v64 + 24) = v66;
    v67 = *(_QWORD *)(v66 + 32);
    v68 = *(unsigned int *)(v64 + 40);
    if ((_DWORD)v68)
    {
      v78 = *(_QWORD *)(v64 + 32);
      v79 = *(_QWORD *)(v67 + 40);
      v80 = 32 * v68;
      do
      {
        if (!*(_BYTE *)v78)
        {
          v81 = *(unsigned int *)(v78 + 4);
          if ((int)v81 >= 0)
            v82 = (uint64_t *)(*(_QWORD *)(v79 + 272) + 8 * v81);
          else
            v82 = (uint64_t *)(*(_QWORD *)(v79 + 24) + 16 * (v81 & 0x7FFFFFFF) + 8);
          v83 = *v82;
          if (*v82)
          {
            v84 = *(_QWORD *)(v83 + 16);
            *(_QWORD *)(v83 + 16) = v78;
            *(_QWORD *)(v78 + 16) = v84;
            if ((*(_BYTE *)(v78 + 3) & 1) != 0)
            {
              *(_QWORD *)(v78 + 24) = v83;
            }
            else
            {
              *(_QWORD *)(v78 + 24) = 0;
              v82 = (uint64_t *)(v84 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v78 + 16) = v78;
            *(_QWORD *)(v78 + 24) = 0;
          }
          *v82 = v78;
        }
        v78 += 32;
        v80 -= 32;
      }
      while (v80);
    }
    v69 = *(_QWORD *)(v67 + 728);
    if (v69)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v69 + 24))(v69, v64);
    v70 = *v60 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v64 = v70 | *(_QWORD *)v64 & 7;
    *(_QWORD *)(v64 + 8) = v60;
    *(_QWORD *)(v70 + 8) = v64;
    *v60 = *v60 & 7 | v64;
    *((_QWORD *)&v93 + 1) = 0;
    v94 = 0uLL;
    LODWORD(v93) = 0x1000000;
    DWORD1(v93) = v9;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v62, (const llvm::MachineOperand *)&v93);
    *((_QWORD *)&v93 + 1) = 0;
    v94 = 0uLL;
    LODWORD(v93) = 0;
    DWORD1(v93) = v57;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v62, (const llvm::MachineOperand *)&v93);
    return 1;
  }
LABEL_44:
  v24 = 1;
  if ((sub_1C478DD3C((uint64_t)a1, a2, a3, 1, 0) & 1) == 0)
  {
LABEL_45:
    v90 = 0;
    v29 = sub_1C47AE068((uint64_t)a1, (uint64_t *)&v92, &v90, &v91, 0, *(_QWORD *)(v10 + 40), 0, 1);
    if (v29)
    {
      v30 = v29;
      if ((v8 & 0x80000000) == 0)
      {
        v31 = 0;
        v32 = 0;
        goto LABEL_48;
      }
      v35 = *(_DWORD *)(v10 + 20);
      if ((v35 & 0x40000000) != 0)
        v36 = *(_QWORD *)(v10 - 8);
      else
        v36 = v10 - 32 * (v35 & 0x7FFFFFF);
      v31 = *(_QWORD *)(v36 + 32);
      if (*(_DWORD *)(*(_QWORD *)v31 + 8) == 4109)
      {
        v32 = sub_1C5CC1648(a1, v31);
        if (v32)
        {
LABEL_48:
          v87 = v9;
          v86 = (_BYTE *)v31;
          v85 = v32;
          if (a5)
          {
            v33 = v91;
            v34 = (char *)&unk_1C640F768 + 4 * a6;
          }
          else
          {
            if (!a6)
            {
              v37 = (char *)&unk_1C640F800 + 8 * (v8 >> 31) + 4 * v91 + 2 * (v23 ^ 1);
LABEL_55:
              v38 = *(unsigned __int16 *)v37;
              v39 = a1[4];
              v40 = *(_QWORD *)(v39 + 640);
              v41 = *(unint64_t **)(v39 + 648);
              v42 = *(_QWORD *)(a1[12] + 8);
              v43 = *(llvm::MachineFunction **)(v40 + 32);
              v44 = (llvm::MachineFunction *)a1[9];
              v88 = v44;
              if (v44)
                llvm::MetadataTracking::track((uint64_t)&v88, (unsigned __int8 *)v44, 2);
              v45 = v42 + 48 * v38;
              v46 = *((_QWORD *)v43 + 28);
              if (v46)
                *((_QWORD *)v43 + 28) = *(_QWORD *)v46;
              else
                v46 = sub_1C484358C((uint64_t)v43 + 128, 72, 3);
              *(_QWORD *)&v93 = v88;
              if (v88)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v88, (unsigned __int8 *)v88, (uint64_t)&v93);
                v88 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v46, v43, v45, (unsigned __int8 **)&v93, 0);
              if ((_QWORD)v93)
                llvm::MetadataTracking::untrack((uint64_t)&v93, (unsigned __int8 *)v93);
              if (v88)
                llvm::MetadataTracking::untrack((uint64_t)&v88, (unsigned __int8 *)v88);
              v47 = *(_QWORD *)(v40 + 40);
              *(_QWORD *)(v46 + 24) = v47;
              v48 = *(_QWORD *)(v47 + 32);
              v49 = *(unsigned int *)(v46 + 40);
              if ((_DWORD)v49)
              {
                v71 = *(_QWORD *)(v46 + 32);
                v72 = *(_QWORD *)(v48 + 40);
                v73 = 32 * v49;
                do
                {
                  if (!*(_BYTE *)v71)
                  {
                    v74 = *(unsigned int *)(v71 + 4);
                    if ((int)v74 >= 0)
                      v75 = (uint64_t *)(*(_QWORD *)(v72 + 272) + 8 * v74);
                    else
                      v75 = (uint64_t *)(*(_QWORD *)(v72 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8);
                    v76 = *v75;
                    if (*v75)
                    {
                      v77 = *(_QWORD *)(v76 + 16);
                      *(_QWORD *)(v76 + 16) = v71;
                      *(_QWORD *)(v71 + 16) = v77;
                      if ((*(_BYTE *)(v71 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v71 + 24) = v76;
                      }
                      else
                      {
                        *(_QWORD *)(v71 + 24) = 0;
                        v75 = (uint64_t *)(v77 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v71 + 16) = v71;
                      *(_QWORD *)(v71 + 24) = 0;
                    }
                    *v75 = v71;
                  }
                  v71 += 32;
                  v73 -= 32;
                }
                while (v73);
              }
              v50 = *(_QWORD *)(v48 + 728);
              if (v50)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v50 + 24))(v50, v46);
              v51 = *v41 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v46 = v51 | *(_QWORD *)v46 & 7;
              *(_QWORD *)(v46 + 8) = v41;
              *(_QWORD *)(v51 + 8) = v46;
              *v41 = *v41 & 7 | v46;
              *((_QWORD *)&v93 + 1) = 0;
              v94 = 0uLL;
              LODWORD(v93) = 0x1000000;
              DWORD1(v93) = v87;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v43, (const llvm::MachineOperand *)&v93);
              v88 = v43;
              v89 = (llvm::MachineInstr *)v46;
              LODWORD(v93) = 1;
              *((_QWORD *)&v93 + 1) = 0;
              *(_QWORD *)&v94 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v43, (const llvm::MachineOperand *)&v93);
              if ((v8 & 0x80000000) != 0)
              {
                if ((sub_1C47ADDC8((uint64_t)a1, v86, 0, &v88, 0) & 1) == 0)
                {
                  *((_QWORD *)&v93 + 1) = 0;
                  v94 = 0uLL;
                  LODWORD(v93) = 0;
                  DWORD1(v93) = v85;
                  llvm::MachineInstr::addOperand(v89, v88, (const llvm::MachineOperand *)&v93);
                }
                v53 = v88;
                v52 = v89;
                LODWORD(v93) = 1;
                *((_QWORD *)&v93 + 1) = 0;
                *(_QWORD *)&v94 = 0;
              }
              else
              {
                LODWORD(v93) = 1;
                *((_QWORD *)&v93 + 1) = 0;
                *(_QWORD *)&v94 = v8 | 0x100000000;
                v52 = (llvm::MachineInstr *)v46;
                v53 = v43;
              }
              llvm::MachineInstr::addOperand(v52, v53, (const llvm::MachineOperand *)&v93);
              if ((sub_1C47ADDC8((uint64_t)a1, v92, 0, &v88, 0) & 1) == 0)
              {
                *((_QWORD *)&v93 + 1) = 0;
                v94 = 0uLL;
                LODWORD(v93) = 0;
                DWORD1(v93) = v30;
                llvm::MachineInstr::addOperand(v89, v88, (const llvm::MachineOperand *)&v93);
              }
              LODWORD(v93) = 1;
              *((_QWORD *)&v93 + 1) = 0;
              *(_QWORD *)&v94 = 0;
              llvm::MachineInstr::addOperand(v89, v88, (const llvm::MachineOperand *)&v93);
              if (a5)
              {
                *((_QWORD *)&v93 + 1) = 0;
                v94 = 0uLL;
                LODWORD(v93) = 0;
                DWORD1(v93) = a5;
                llvm::MachineInstr::addOperand(v89, v88, (const llvm::MachineOperand *)&v93);
                v55 = v88;
                v54 = v89;
                LODWORD(v93) = 1;
              }
              else
              {
                if (!a6)
                {
LABEL_81:
                  v24 = 1;
                  LODWORD(v93) = 1;
                  *((_QWORD *)&v93 + 1) = 0;
                  *(_QWORD *)&v94 = 0;
                  llvm::MachineInstr::addOperand(v89, v88, (const llvm::MachineOperand *)&v93);
                  v93 = 0u;
                  v94 = 0u;
                  llvm::MachineInstr::addOperand(v89, v88, (const llvm::MachineOperand *)&v93);
                  return v24;
                }
                v55 = v88;
                v54 = v89;
                LODWORD(v93) = 1;
              }
              *((_QWORD *)&v93 + 1) = 0;
              *(_QWORD *)&v94 = 0;
              llvm::MachineInstr::addOperand(v54, v55, (const llvm::MachineOperand *)&v93);
              goto LABEL_81;
            }
            v33 = v91;
          }
          v37 = &v34[2 * v33];
          goto LABEL_55;
        }
      }
    }
    return 0;
  }
  return v24;
}

uint64_t sub_1C4793F00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  llvm *v5;
  _BOOL4 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  int v18;
  int IsHalfItr;
  char v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  llvm::MachineFunction *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  _BYTE *v35;
  _BOOL4 v36;
  _QWORD *v37;
  uint64_t *v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  llvm::MachineFunction *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  llvm::MachineFunction *v69;
  unsigned __int8 *v70;
  unint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  uint64_t v94;
  unsigned __int8 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  unsigned __int8 *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t *v126;
  uint64_t v127;
  unsigned __int8 *v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  uint64_t v135;
  unsigned __int8 *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t *v150;
  uint64_t v151;
  unsigned __int8 *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  _BYTE *v157;
  _BYTE *v158;
  _BOOL8 v159;
  uint64_t *v160;
  uint64_t *v161;
  int v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t *v168;
  uint64_t v169;
  unsigned __int8 *v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  BOOL v177;
  char v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  int v184;
  unsigned __int16 *v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  uint64_t v192;
  unsigned __int8 *v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t *v201;
  uint64_t v202;
  unsigned __int8 *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t *v208;
  uint64_t v209;
  unsigned __int8 *v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t *v217;
  uint64_t v218;
  unsigned __int8 *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t *v224;
  uint64_t v225;
  unsigned __int8 *v226;
  uint64_t v227;
  llvm::MachineFunction *v228;
  unsigned __int8 *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  BOOL v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  BOOL v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  llvm::MachineInstr *v270;
  llvm::MachineFunction *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  BOOL v278;
  int v279;
  _QWORD *v280;
  int v281;
  unsigned int v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t *v286;
  uint64_t v287;
  unsigned __int8 *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  _QWORD *v450;
  int v451;
  uint64_t v452;
  _QWORD *v453;
  __int128 v454;
  __int128 v455;
  uint64_t v456;
  __int128 v457;
  uint64_t v458;
  uint64_t (**v459)();
  char v460;

  v4 = *(_QWORD *)(a2 - 32);
  v5 = (llvm *)*(unsigned int *)(v4 + 36);
  v6 = sub_1C47860D0(*(_DWORD *)(v4 + 36));
  v7 = *(_QWORD *)(a1 + 256);
  v8 = *(unsigned __int8 *)(v7 + 280);
  if (v6)
  {
    if (*(_BYTE *)(v7 + 280))
    {
      v459 = &off_1E7F94D68;
      v460 = *(_BYTE *)(v7 + 306);
    }
    else
    {
      v460 = 0;
      v459 = &off_1E7F95088;
    }
    v12 = *(_QWORD **)(a1 + 32);
    v13 = v12[80];
    v14 = v12[81];
    v15 = v12[1];
    *(_QWORD *)&v455 = v13;
    *((_QWORD *)&v455 + 1) = v14;
    v456 = v15;
    v457 = *(_OWORD *)(a1 + 88);
    *(_QWORD *)&v454 = &off_1E7F94F20;
    *((_QWORD *)&v454 + 1) = &v459;
    v458 = a1;
    return sub_1C4796EA0(&v454, a2, (int)v5, *(_QWORD *)(v15 + 344));
  }
  if (*(_BYTE *)(v7 + 280) || !llvm::GetItrKind(v5))
  {
    v9 = 0;
    if ((int)v5 > 1884)
    {
      switch((int)v5)
      {
        case 1982:
          v81 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!(_DWORD)v81)
            return 0;
          v77 = v81;
          v78 = (uint64_t *)a1;
          v79 = a2;
          v80 = -1;
          return sub_1C4793754(v78, v79, v77, v80, 0, 0);
        case 1983:
          v97 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!(_DWORD)v97)
            return 0;
          v77 = v97;
          v78 = (uint64_t *)a1;
          v79 = a2;
          v80 = 11;
          return sub_1C4793754(v78, v79, v77, v80, 0, 0);
        case 1984:
          v76 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!(_DWORD)v76)
            return 0;
          v77 = v76;
          v78 = (uint64_t *)a1;
          v79 = a2;
          v80 = 10;
          return sub_1C4793754(v78, v79, v77, v80, 0, 0);
        case 1985:
          v112 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!(_DWORD)v112)
            return 0;
          v77 = v112;
          v78 = (uint64_t *)a1;
          v79 = a2;
          v80 = 7;
          return sub_1C4793754(v78, v79, v77, v80, 0, 0);
        case 1986:
          v113 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!(_DWORD)v113)
            return 0;
          v77 = v113;
          v78 = (uint64_t *)a1;
          v79 = a2;
          v80 = 3;
          return sub_1C4793754(v78, v79, v77, v80, 0, 0);
        case 1987:
          v138 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!(_DWORD)v138)
            return 0;
          v77 = v138;
          v78 = (uint64_t *)a1;
          v79 = a2;
          v80 = 6;
          return sub_1C4793754(v78, v79, v77, v80, 0, 0);
        case 1988:
          v98 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!(_DWORD)v98)
            return 0;
          v77 = v98;
          v78 = (uint64_t *)a1;
          v79 = a2;
          v80 = 2;
          return sub_1C4793754(v78, v79, v77, v80, 0, 0);
        case 1989:
          if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 2)
            return 0;
          v130 = sub_1C5CC1648((uint64_t *)a1, *(_QWORD *)(a2 - 64));
          if ((v130 & 0x80000000) == 0)
            return 0;
          v131 = v130;
          sub_1C51A3F30(*(_QWORD **)(a1 + 48), v131, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 16 * (v131 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E7F98670, 0);
          v132 = *(_QWORD *)(a1 + 32);
          v133 = *(_QWORD *)(v132 + 640);
          v134 = *(unint64_t **)(v132 + 648);
          v135 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
          v28 = *(llvm::MachineFunction **)(v133 + 32);
          v136 = *(unsigned __int8 **)(a1 + 72);
          v459 = (uint64_t (**)())v136;
          if (v136)
            llvm::MetadataTracking::track((uint64_t)&v459, v136, 2);
          v137 = v135 + 39024;
          v31 = *((_QWORD *)v28 + 28);
          if (v31)
            *((_QWORD *)v28 + 28) = *(_QWORD *)v31;
          else
            v31 = sub_1C484358C((uint64_t)v28 + 128, 72, 3);
          *(_QWORD *)&v454 = v459;
          if (v459)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
            v459 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v31, v28, v137, (unsigned __int8 **)&v454, 0);
          if ((_QWORD)v454)
            llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
          if (v459)
            llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
          v323 = *(_QWORD *)(v133 + 40);
          *(_QWORD *)(v31 + 24) = v323;
          v324 = *(_QWORD *)(v323 + 32);
          v325 = *(unsigned int *)(v31 + 40);
          if ((_DWORD)v325)
          {
            v422 = *(_QWORD *)(v31 + 32);
            v423 = *(_QWORD *)(v324 + 40);
            v424 = 32 * v325;
            do
            {
              if (!*(_BYTE *)v422)
              {
                v425 = *(unsigned int *)(v422 + 4);
                if ((int)v425 >= 0)
                  v426 = (uint64_t *)(*(_QWORD *)(v423 + 272) + 8 * v425);
                else
                  v426 = (uint64_t *)(*(_QWORD *)(v423 + 24) + 16 * (v425 & 0x7FFFFFFF) + 8);
                v427 = *v426;
                if (*v426)
                {
                  v428 = *(_QWORD *)(v427 + 16);
                  *(_QWORD *)(v427 + 16) = v422;
                  *(_QWORD *)(v422 + 16) = v428;
                  if ((*(_BYTE *)(v422 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v422 + 24) = v427;
                  }
                  else
                  {
                    *(_QWORD *)(v422 + 24) = 0;
                    v426 = (uint64_t *)(v428 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v422 + 16) = v422;
                  *(_QWORD *)(v422 + 24) = 0;
                }
                *v426 = v422;
              }
              v422 += 32;
              v424 -= 32;
            }
            while (v424);
          }
          v326 = *(_QWORD *)(v324 + 728);
          if (v326)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v326 + 24))(v326, v31);
          v327 = *v134 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v31 = v327 | *(_QWORD *)v31 & 7;
          *(_QWORD *)(v31 + 8) = v134;
          *(_QWORD *)(v327 + 8) = v31;
          *v134 = *v134 & 7 | v31;
          *((_QWORD *)&v454 + 1) = 0;
          v455 = 0uLL;
          LODWORD(v454) = 0;
          DWORD1(v454) = v131;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
          v9 = 1;
          goto LABEL_391;
        case 1990:
        case 1991:
          v10 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!v10)
            return 0;
          return sub_1C478E2BC((_QWORD *)a1, a2, v10, *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2, 0);
        case 1992:
        case 1993:
          if ((_DWORD)v5 != 1993)
            goto LABEL_301;
          v45 = sub_1C5CC1648((uint64_t *)a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
          if ((v45 & 0x80000000) == 0)
            return 0;
          v46 = v45;
          v47 = *(_QWORD *)(a1 + 32);
          v48 = *(_QWORD *)(v47 + 640);
          v49 = *(unint64_t **)(v47 + 648);
          v50 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
          v51 = *(llvm::MachineFunction **)(v48 + 32);
          v52 = *(unsigned __int8 **)(a1 + 72);
          v459 = (uint64_t (**)())v52;
          if (v52)
            llvm::MetadataTracking::track((uint64_t)&v459, v52, 2);
          v53 = v50 + 239904;
          v54 = *((_QWORD *)v51 + 28);
          if (v54)
            *((_QWORD *)v51 + 28) = *(_QWORD *)v54;
          else
            v54 = sub_1C484358C((uint64_t)v51 + 128, 72, 3);
          *(_QWORD *)&v454 = v459;
          if (v459)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
            v459 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v54, v51, v53, (unsigned __int8 **)&v454, 0);
          if ((_QWORD)v454)
            llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
          if (v459)
            llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
          v272 = *(_QWORD *)(v48 + 40);
          *(_QWORD *)(v54 + 24) = v272;
          v273 = *(_QWORD *)(v272 + 32);
          v274 = *(unsigned int *)(v54 + 40);
          if ((_DWORD)v274)
          {
            v380 = *(_QWORD *)(v54 + 32);
            v381 = *(_QWORD *)(v273 + 40);
            v382 = 32 * v274;
            do
            {
              if (!*(_BYTE *)v380)
              {
                v383 = *(unsigned int *)(v380 + 4);
                if ((int)v383 >= 0)
                  v384 = (uint64_t *)(*(_QWORD *)(v381 + 272) + 8 * v383);
                else
                  v384 = (uint64_t *)(*(_QWORD *)(v381 + 24) + 16 * (v383 & 0x7FFFFFFF) + 8);
                v385 = *v384;
                if (*v384)
                {
                  v386 = *(_QWORD *)(v385 + 16);
                  *(_QWORD *)(v385 + 16) = v380;
                  *(_QWORD *)(v380 + 16) = v386;
                  if ((*(_BYTE *)(v380 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v380 + 24) = v385;
                  }
                  else
                  {
                    *(_QWORD *)(v380 + 24) = 0;
                    v384 = (uint64_t *)(v386 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v380 + 16) = v380;
                  *(_QWORD *)(v380 + 24) = 0;
                }
                *v384 = v380;
              }
              v380 += 32;
              v382 -= 32;
            }
            while (v382);
          }
          v275 = *(_QWORD *)(v273 + 728);
          if (v275)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v275 + 24))(v275, v54);
          v276 = *v49 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v54 = v276 | *(_QWORD *)v54 & 7;
          *(_QWORD *)(v54 + 8) = v49;
          *(_QWORD *)(v276 + 8) = v54;
          *v49 = *v49 & 7 | v54;
          LODWORD(v454) = 1;
          *((_QWORD *)&v454 + 1) = 0;
          *(_QWORD *)&v455 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v454);
          *((_QWORD *)&v454 + 1) = 0;
          v455 = 0uLL;
          LODWORD(v454) = 0;
          DWORD1(v454) = v46;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v454);
          LODWORD(v454) = 1;
          *((_QWORD *)&v454 + 1) = 0;
          *(_QWORD *)&v455 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v454);
          LODWORD(v454) = 1;
          *((_QWORD *)&v454 + 1) = 0;
          *(_QWORD *)&v455 = 0x100000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v454);
          v455 = 0uLL;
          v454 = 0x201000000uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v454);
          LODWORD(v454) = 1;
          *((_QWORD *)&v454 + 1) = 0;
          *(_QWORD *)&v455 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v454);
          v454 = 0u;
          v455 = 0u;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v51, (const llvm::MachineOperand *)&v454);
LABEL_301:
          v277 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          if (v277)
            v278 = *(_BYTE *)(v277 + 16) == 16;
          else
            v278 = 0;
          v279 = v278;
          if (v278)
          {
            v280 = (_QWORD *)(v277 + 24);
            if (*(_DWORD *)(v277 + 32) >= 0x41u)
              v280 = (_QWORD *)*v280;
            v281 = 0;
            v453 = (_QWORD *)*v280;
            v282 = 11972;
          }
          else
          {
            v283 = sub_1C5CC1648((uint64_t *)a1, v277);
            if ((v283 & 0x80000000) == 0)
              return 0;
            v281 = v283;
            sub_1C51A3F30(*(_QWORD **)(a1 + 48), v281, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 16 * (v281 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E7F983D8, 0);
            v453 = 0;
            v282 = 11973;
          }
          v284 = *(_QWORD *)(a1 + 32);
          v285 = *(_QWORD *)(v284 + 640);
          v286 = *(unint64_t **)(v284 + 648);
          v287 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
          v28 = *(llvm::MachineFunction **)(v285 + 32);
          v288 = *(unsigned __int8 **)(a1 + 72);
          v459 = (uint64_t (**)())v288;
          if (v288)
            llvm::MetadataTracking::track((uint64_t)&v459, v288, 2);
          v289 = v287 + 48 * v282;
          v31 = *((_QWORD *)v28 + 28);
          if (v31)
            *((_QWORD *)v28 + 28) = *(_QWORD *)v31;
          else
            v31 = sub_1C484358C((uint64_t)v28 + 128, 72, 3);
          *(_QWORD *)&v454 = v459;
          if (v459)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
            v459 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v31, v28, v289, (unsigned __int8 **)&v454, 0);
          if ((_QWORD)v454)
            llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
          if (v459)
            llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
          v290 = *(_QWORD *)(v285 + 40);
          *(_QWORD *)(v31 + 24) = v290;
          v291 = *(_QWORD *)(v290 + 32);
          v292 = *(unsigned int *)(v31 + 40);
          if ((_DWORD)v292)
          {
            v338 = *(_QWORD *)(v31 + 32);
            v339 = *(_QWORD *)(v291 + 40);
            v340 = 32 * v292;
            do
            {
              if (!*(_BYTE *)v338)
              {
                v341 = *(unsigned int *)(v338 + 4);
                if ((int)v341 >= 0)
                  v342 = (uint64_t *)(*(_QWORD *)(v339 + 272) + 8 * v341);
                else
                  v342 = (uint64_t *)(*(_QWORD *)(v339 + 24) + 16 * (v341 & 0x7FFFFFFF) + 8);
                v343 = *v342;
                if (*v342)
                {
                  v344 = *(_QWORD *)(v343 + 16);
                  *(_QWORD *)(v343 + 16) = v338;
                  *(_QWORD *)(v338 + 16) = v344;
                  if ((*(_BYTE *)(v338 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v338 + 24) = v343;
                  }
                  else
                  {
                    *(_QWORD *)(v338 + 24) = 0;
                    v342 = (uint64_t *)(v344 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v338 + 16) = v338;
                  *(_QWORD *)(v338 + 24) = 0;
                }
                *v342 = v338;
              }
              v338 += 32;
              v340 -= 32;
            }
            while (v340);
          }
          v293 = *(_QWORD *)(v291 + 728);
          if (v293)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v293 + 24))(v293, v31);
          v294 = *v286 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v31 = v294 | *(_QWORD *)v31 & 7;
          *(_QWORD *)(v31 + 8) = v286;
          *(_QWORD *)(v294 + 8) = v31;
          *v286 = *v286 & 7 | v31;
          if (v279)
          {
            LODWORD(v454) = 1;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = v453;
          }
          else
          {
            *((_QWORD *)&v454 + 1) = 0;
            v455 = 0uLL;
            LODWORD(v454) = 0;
            DWORD1(v454) = v281;
          }
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
          v9 = 1;
          LODWORD(v454) = 1;
          *((_QWORD *)&v454 + 1) = 0;
          *(_QWORD *)&v455 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
          if ((_DWORD)v5 == 1993)
          {
            LODWORD(v454) = 1;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = 1;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            v455 = 0uLL;
            v454 = 0x200000000uLL;
            goto LABEL_392;
          }
          goto LABEL_391;
        case 1994:
          v99 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          v100 = (_QWORD *)(v99 + 24);
          if (*(_DWORD *)(v99 + 32) >= 0x41u)
            v100 = (_QWORD *)*v100;
          v84 = (_QWORD *)*v100;
          v9 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!(_DWORD)v9)
            return v9;
          v101 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
          v102 = *(_QWORD *)(a1 + 256);
          if (*(_BYTE *)(v102 + 280))
          {
            LODWORD(v454) = 0;
            v103 = sub_1C4785D88(v102, v101, "LoadCMode", &v454);
            v449 = v454;
            v104 = *(_QWORD *)(a1 + 256);
            LODWORD(v454) = 0;
            v105 = sub_1C4785D88(v104, v101, "LoadSLCMode", &v454);
            v90 = v454;
            v106 = *(_QWORD *)(a1 + 32);
            v107 = *(_QWORD *)(v106 + 640);
            v108 = *(unint64_t **)(v106 + 648);
            v109 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
            v28 = *(llvm::MachineFunction **)(v107 + 32);
            v110 = *(unsigned __int8 **)(a1 + 72);
            v459 = (uint64_t (**)())v110;
            if (v110)
              llvm::MetadataTracking::track((uint64_t)&v459, v110, 2);
            v111 = v109 + 564624;
            v31 = *((_QWORD *)v28 + 28);
            if (v31)
              *((_QWORD *)v28 + 28) = *(_QWORD *)v31;
            else
              v31 = sub_1C484358C((uint64_t)v28 + 128, 72, 3);
            *(_QWORD *)&v454 = v459;
            if (v459)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
              v459 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v31, v28, v111, (unsigned __int8 **)&v454, 0);
            if ((_QWORD)v454)
              llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
            if (v459)
              llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
            v245 = *(_QWORD *)(v107 + 40);
            *(_QWORD *)(v31 + 24) = v245;
            v246 = *(_QWORD *)(v245 + 32);
            v247 = *(unsigned int *)(v31 + 40);
            if ((_DWORD)v247)
            {
              v352 = *(_QWORD *)(v31 + 32);
              v353 = *(_QWORD *)(v246 + 40);
              v354 = 32 * v247;
              do
              {
                if (!*(_BYTE *)v352)
                {
                  v355 = *(unsigned int *)(v352 + 4);
                  if ((int)v355 >= 0)
                    v356 = (uint64_t *)(*(_QWORD *)(v353 + 272) + 8 * v355);
                  else
                    v356 = (uint64_t *)(*(_QWORD *)(v353 + 24) + 16 * (v355 & 0x7FFFFFFF) + 8);
                  v357 = *v356;
                  if (*v356)
                  {
                    v358 = *(_QWORD *)(v357 + 16);
                    *(_QWORD *)(v357 + 16) = v352;
                    *(_QWORD *)(v352 + 16) = v358;
                    if ((*(_BYTE *)(v352 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v352 + 24) = v357;
                    }
                    else
                    {
                      *(_QWORD *)(v352 + 24) = 0;
                      v356 = (uint64_t *)(v358 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v352 + 16) = v352;
                    *(_QWORD *)(v352 + 24) = 0;
                  }
                  *v356 = v352;
                }
                v352 += 32;
                v354 -= 32;
              }
              while (v354);
            }
            v248 = *(_QWORD *)(v246 + 728);
            if (v248)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v248 + 24))(v248, v31);
            v249 = *v108 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v31 = v249 | *(_QWORD *)v31 & 7;
            *(_QWORD *)(v31 + 8) = v108;
            *(_QWORD *)(v249 + 8) = v31;
            *v108 = *v108 & 7 | v31;
            *((_QWORD *)&v454 + 1) = 0;
            v455 = 0uLL;
            LODWORD(v454) = 0x1000000;
            DWORD1(v454) = v9;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            v9 = 1;
            LODWORD(v454) = 1;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = 2 * (_QWORD)v84;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            LODWORD(v454) = 1;
            v250 = v449;
            if (!v103)
              v250 = 0;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = v250;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            v244 = v105 == 0;
            goto LABEL_246;
          }
          LODWORD(v454) = 0;
          v195 = sub_1C4785D88(v102, v101, "LoadMCUCohMode", &v454);
          v452 = v454;
          v205 = *(_QWORD *)(a1 + 256);
          LODWORD(v454) = 0;
          v197 = sub_1C4785D88(v205, v101, "LoadSLCCohMode", &v454);
          v198 = v454;
          v206 = *(_QWORD *)(a1 + 32);
          v207 = *(_QWORD *)(v206 + 640);
          v208 = *(unint64_t **)(v206 + 648);
          v209 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
          v28 = *(llvm::MachineFunction **)(v207 + 32);
          v210 = *(unsigned __int8 **)(a1 + 72);
          v459 = (uint64_t (**)())v210;
          if (v210)
            llvm::MetadataTracking::track((uint64_t)&v459, v210, 2);
          v211 = v209 + 564672;
          v31 = *((_QWORD *)v28 + 28);
          if (v31)
            *((_QWORD *)v28 + 28) = *(_QWORD *)v31;
          else
            v31 = sub_1C484358C((uint64_t)v28 + 128, 72, 3);
          *(_QWORD *)&v454 = v459;
          if (v459)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
            v459 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v31, v28, v211, (unsigned __int8 **)&v454, 0);
          if ((_QWORD)v454)
            llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
          if (v459)
            llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
          v300 = *(_QWORD *)(v207 + 40);
          *(_QWORD *)(v31 + 24) = v300;
          v301 = *(_QWORD *)(v300 + 32);
          v302 = *(unsigned int *)(v31 + 40);
          if ((_DWORD)v302)
          {
            v394 = *(_QWORD *)(v31 + 32);
            v395 = *(_QWORD *)(v301 + 40);
            v396 = 32 * v302;
            do
            {
              if (!*(_BYTE *)v394)
              {
                v397 = *(unsigned int *)(v394 + 4);
                if ((int)v397 >= 0)
                  v398 = (uint64_t *)(*(_QWORD *)(v395 + 272) + 8 * v397);
                else
                  v398 = (uint64_t *)(*(_QWORD *)(v395 + 24) + 16 * (v397 & 0x7FFFFFFF) + 8);
                v399 = *v398;
                if (*v398)
                {
                  v400 = *(_QWORD *)(v399 + 16);
                  *(_QWORD *)(v399 + 16) = v394;
                  *(_QWORD *)(v394 + 16) = v400;
                  if ((*(_BYTE *)(v394 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v394 + 24) = v399;
                  }
                  else
                  {
                    *(_QWORD *)(v394 + 24) = 0;
                    v398 = (uint64_t *)(v400 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v394 + 16) = v394;
                  *(_QWORD *)(v394 + 24) = 0;
                }
                *v398 = v394;
              }
              v394 += 32;
              v396 -= 32;
            }
            while (v396);
          }
          v303 = *(_QWORD *)(v301 + 728);
          if (v303)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v303 + 24))(v303, v31);
          v304 = *v208 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v31 = v304 | *(_QWORD *)v31 & 7;
          *(_QWORD *)(v31 + 8) = v208;
          *(_QWORD *)(v304 + 8) = v31;
          *v208 = *v208 & 7 | v31;
          *((_QWORD *)&v454 + 1) = 0;
          v455 = 0uLL;
          LODWORD(v454) = 0x1000000;
          DWORD1(v454) = v9;
          goto LABEL_356;
        case 1995:
          v139 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          v140 = (_QWORD *)(v139 + 24);
          if (*(_DWORD *)(v139 + 32) >= 0x41u)
            v140 = (_QWORD *)*v140;
          v116 = (_QWORD *)*v140;
          v9 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!(_DWORD)v9)
            return v9;
          v141 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
          v142 = (_QWORD *)(v141 + 24);
          if (*(_DWORD *)(v141 + 32) >= 0x41u)
            v142 = (_QWORD *)*v142;
          v450 = (_QWORD *)*v142;
          v143 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
          v144 = *(_QWORD *)(a1 + 256);
          if (*(_BYTE *)(v144 + 280))
          {
            LODWORD(v454) = 0;
            v145 = sub_1C4785D88(v144, v143, "LoadCMode", &v454);
            v446 = v454;
            v146 = *(_QWORD *)(a1 + 256);
            LODWORD(v454) = 0;
            v147 = sub_1C4785D88(v146, v143, "LoadSLCMode", &v454);
            v443 = v454;
            v148 = *(_QWORD *)(a1 + 32);
            v149 = *(_QWORD *)(v148 + 640);
            v150 = *(unint64_t **)(v148 + 648);
            v151 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
            v28 = *(llvm::MachineFunction **)(v149 + 32);
            v152 = *(unsigned __int8 **)(a1 + 72);
            v459 = (uint64_t (**)())v152;
            if (v152)
              llvm::MetadataTracking::track((uint64_t)&v459, v152, 2);
            v153 = v151 + 13968;
            v31 = *((_QWORD *)v28 + 28);
            if (v31)
              *((_QWORD *)v28 + 28) = *(_QWORD *)v31;
            else
              v31 = sub_1C484358C((uint64_t)v28 + 128, 72, 3);
            *(_QWORD *)&v454 = v459;
            if (v459)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
              v459 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v31, v28, v153, (unsigned __int8 **)&v454, 0);
            if ((_QWORD)v454)
              llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
            if (v459)
              llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
            v259 = *(_QWORD *)(v149 + 40);
            *(_QWORD *)(v31 + 24) = v259;
            v260 = *(_QWORD *)(v259 + 32);
            v261 = *(unsigned int *)(v31 + 40);
            if ((_DWORD)v261)
            {
              v366 = *(_QWORD *)(v31 + 32);
              v367 = *(_QWORD *)(v260 + 40);
              v368 = 32 * v261;
              do
              {
                if (!*(_BYTE *)v366)
                {
                  v369 = *(unsigned int *)(v366 + 4);
                  if ((int)v369 >= 0)
                    v370 = (uint64_t *)(*(_QWORD *)(v367 + 272) + 8 * v369);
                  else
                    v370 = (uint64_t *)(*(_QWORD *)(v367 + 24) + 16 * (v369 & 0x7FFFFFFF) + 8);
                  v371 = *v370;
                  if (*v370)
                  {
                    v372 = *(_QWORD *)(v371 + 16);
                    *(_QWORD *)(v371 + 16) = v366;
                    *(_QWORD *)(v366 + 16) = v372;
                    if ((*(_BYTE *)(v366 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v366 + 24) = v371;
                    }
                    else
                    {
                      *(_QWORD *)(v366 + 24) = 0;
                      v370 = (uint64_t *)(v372 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v366 + 16) = v366;
                    *(_QWORD *)(v366 + 24) = 0;
                  }
                  *v370 = v366;
                }
                v366 += 32;
                v368 -= 32;
              }
              while (v368);
            }
            v262 = *(_QWORD *)(v260 + 728);
            if (v262)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v262 + 24))(v262, v31);
            v263 = *v150 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v31 = v263 | *(_QWORD *)v31 & 7;
            *(_QWORD *)(v31 + 8) = v150;
            *(_QWORD *)(v263 + 8) = v31;
            *v150 = *v150 & 7 | v31;
            *((_QWORD *)&v454 + 1) = 0;
            v455 = 0uLL;
            LODWORD(v454) = 0x1000000;
            DWORD1(v454) = v9;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            v9 = 1;
            LODWORD(v454) = 1;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = 2 * (_QWORD)v116;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            LODWORD(v454) = 1;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = 2 * (_QWORD)v450;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            LODWORD(v454) = 1;
            v264 = v446;
            if (!v145)
              v264 = 0;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = v264;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            v258 = v147 == 0;
            goto LABEL_275;
          }
          LODWORD(v454) = 0;
          v212 = sub_1C4785D88(v144, v143, "LoadMCUCohMode", &v454);
          v447 = v454;
          v221 = *(_QWORD *)(a1 + 256);
          LODWORD(v454) = 0;
          v214 = sub_1C4785D88(v221, v143, "LoadSLCCohMode", &v454);
          v444 = v454;
          v222 = *(_QWORD *)(a1 + 32);
          v223 = *(_QWORD *)(v222 + 640);
          v224 = *(unint64_t **)(v222 + 648);
          v225 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
          v28 = *(llvm::MachineFunction **)(v223 + 32);
          v226 = *(unsigned __int8 **)(a1 + 72);
          v459 = (uint64_t (**)())v226;
          if (v226)
            llvm::MetadataTracking::track((uint64_t)&v459, v226, 2);
          v227 = v225 + 14016;
          v31 = *((_QWORD *)v28 + 28);
          if (v31)
            *((_QWORD *)v28 + 28) = *(_QWORD *)v31;
          else
            v31 = sub_1C484358C((uint64_t)v28 + 128, 72, 3);
          *(_QWORD *)&v454 = v459;
          if (v459)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
            v459 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v31, v28, v227, (unsigned __int8 **)&v454, 0);
          if ((_QWORD)v454)
            llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
          if (v459)
            llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
          v312 = *(_QWORD *)(v223 + 40);
          *(_QWORD *)(v31 + 24) = v312;
          v313 = *(_QWORD *)(v312 + 32);
          v314 = *(unsigned int *)(v31 + 40);
          if ((_DWORD)v314)
          {
            v408 = *(_QWORD *)(v31 + 32);
            v409 = *(_QWORD *)(v313 + 40);
            v410 = 32 * v314;
            do
            {
              if (!*(_BYTE *)v408)
              {
                v411 = *(unsigned int *)(v408 + 4);
                if ((int)v411 >= 0)
                  v412 = (uint64_t *)(*(_QWORD *)(v409 + 272) + 8 * v411);
                else
                  v412 = (uint64_t *)(*(_QWORD *)(v409 + 24) + 16 * (v411 & 0x7FFFFFFF) + 8);
                v413 = *v412;
                if (*v412)
                {
                  v414 = *(_QWORD *)(v413 + 16);
                  *(_QWORD *)(v413 + 16) = v408;
                  *(_QWORD *)(v408 + 16) = v414;
                  if ((*(_BYTE *)(v408 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v408 + 24) = v413;
                  }
                  else
                  {
                    *(_QWORD *)(v408 + 24) = 0;
                    v412 = (uint64_t *)(v414 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v408 + 16) = v408;
                  *(_QWORD *)(v408 + 24) = 0;
                }
                *v412 = v408;
              }
              v408 += 32;
              v410 -= 32;
            }
            while (v410);
          }
          v315 = *(_QWORD *)(v313 + 728);
          if (v315)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v315 + 24))(v315, v31);
          v316 = *v224 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v31 = v316 | *(_QWORD *)v31 & 7;
          *(_QWORD *)(v31 + 8) = v224;
          *(_QWORD *)(v316 + 8) = v31;
          *v224 = *v224 & 7 | v31;
          *((_QWORD *)&v454 + 1) = 0;
          v455 = 0uLL;
          LODWORD(v454) = 0x1000000;
          DWORD1(v454) = v9;
          goto LABEL_383;
        case 1996:
          v82 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          v83 = (_QWORD *)(*v82 + 24);
          if (*(_DWORD *)(*v82 + 32) >= 0x41u)
            v83 = (_QWORD *)*v83;
          v84 = (_QWORD *)*v83;
          v9 = sub_1C5CC1648((uint64_t *)a1, v82[4]);
          if (!(_DWORD)v9)
            return v9;
          v85 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
          v86 = *(_QWORD *)(a1 + 256);
          if (*(_BYTE *)(v86 + 280))
          {
            LODWORD(v454) = 0;
            v87 = sub_1C4785D88(v86, v85, "StoreCMode", &v454);
            v448 = v454;
            v88 = *(_QWORD *)(a1 + 256);
            LODWORD(v454) = 0;
            v89 = sub_1C4785D88(v88, v85, "StoreSLCMode", &v454);
            v90 = v454;
            v91 = *(_QWORD *)(a1 + 32);
            v92 = *(_QWORD *)(v91 + 640);
            v93 = *(unint64_t **)(v91 + 648);
            v94 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
            v28 = *(llvm::MachineFunction **)(v92 + 32);
            v95 = *(unsigned __int8 **)(a1 + 72);
            v459 = (uint64_t (**)())v95;
            if (v95)
              llvm::MetadataTracking::track((uint64_t)&v459, v95, 2);
            v96 = v94 + 642720;
            v31 = *((_QWORD *)v28 + 28);
            if (v31)
              *((_QWORD *)v28 + 28) = *(_QWORD *)v31;
            else
              v31 = sub_1C484358C((uint64_t)v28 + 128, 72, 3);
            *(_QWORD *)&v454 = v459;
            if (v459)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
              v459 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v31, v28, v96, (unsigned __int8 **)&v454, 0);
            if ((_QWORD)v454)
              llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
            if (v459)
              llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
            v238 = *(_QWORD *)(v92 + 40);
            *(_QWORD *)(v31 + 24) = v238;
            v239 = *(_QWORD *)(v238 + 32);
            v240 = *(unsigned int *)(v31 + 40);
            if ((_DWORD)v240)
            {
              v345 = *(_QWORD *)(v31 + 32);
              v346 = *(_QWORD *)(v239 + 40);
              v347 = 32 * v240;
              do
              {
                if (!*(_BYTE *)v345)
                {
                  v348 = *(unsigned int *)(v345 + 4);
                  if ((int)v348 >= 0)
                    v349 = (uint64_t *)(*(_QWORD *)(v346 + 272) + 8 * v348);
                  else
                    v349 = (uint64_t *)(*(_QWORD *)(v346 + 24) + 16 * (v348 & 0x7FFFFFFF) + 8);
                  v350 = *v349;
                  if (*v349)
                  {
                    v351 = *(_QWORD *)(v350 + 16);
                    *(_QWORD *)(v350 + 16) = v345;
                    *(_QWORD *)(v345 + 16) = v351;
                    if ((*(_BYTE *)(v345 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v345 + 24) = v350;
                    }
                    else
                    {
                      *(_QWORD *)(v345 + 24) = 0;
                      v349 = (uint64_t *)(v351 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v345 + 16) = v345;
                    *(_QWORD *)(v345 + 24) = 0;
                  }
                  *v349 = v345;
                }
                v345 += 32;
                v347 -= 32;
              }
              while (v347);
            }
            v241 = *(_QWORD *)(v239 + 728);
            if (v241)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v241 + 24))(v241, v31);
            v242 = *v93 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v31 = v242 | *(_QWORD *)v31 & 7;
            *(_QWORD *)(v31 + 8) = v93;
            *(_QWORD *)(v242 + 8) = v31;
            *v93 = *v93 & 7 | v31;
            *((_QWORD *)&v454 + 1) = 0;
            v455 = 0uLL;
            LODWORD(v454) = 0;
            DWORD1(v454) = v9;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            v9 = 1;
            LODWORD(v454) = 1;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = 2 * (_QWORD)v84;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            v243 = 2;
            LODWORD(v454) = 1;
            if (v87)
              v243 = v448;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = v243;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            v244 = v89 == 0;
LABEL_246:
            LODWORD(v454) = 1;
            if (v244)
              v251 = 1;
            else
              v251 = v90;
            goto LABEL_278;
          }
          LODWORD(v454) = 0;
          v195 = sub_1C4785D88(v86, v85, "StoreMCUCohMode", &v454);
          v452 = v454;
          v196 = *(_QWORD *)(a1 + 256);
          LODWORD(v454) = 0;
          v197 = sub_1C4785D88(v196, v85, "StoreSLCCohMode", &v454);
          v198 = v454;
          v199 = *(_QWORD *)(a1 + 32);
          v200 = *(_QWORD *)(v199 + 640);
          v201 = *(unint64_t **)(v199 + 648);
          v202 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
          v28 = *(llvm::MachineFunction **)(v200 + 32);
          v203 = *(unsigned __int8 **)(a1 + 72);
          v459 = (uint64_t (**)())v203;
          if (v203)
            llvm::MetadataTracking::track((uint64_t)&v459, v203, 2);
          v204 = v202 + 642768;
          v31 = *((_QWORD *)v28 + 28);
          if (v31)
            *((_QWORD *)v28 + 28) = *(_QWORD *)v31;
          else
            v31 = sub_1C484358C((uint64_t)v28 + 128, 72, 3);
          *(_QWORD *)&v454 = v459;
          if (v459)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
            v459 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v31, v28, v204, (unsigned __int8 **)&v454, 0);
          if ((_QWORD)v454)
            llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
          if (v459)
            llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
          v295 = *(_QWORD *)(v200 + 40);
          *(_QWORD *)(v31 + 24) = v295;
          v296 = *(_QWORD *)(v295 + 32);
          v297 = *(unsigned int *)(v31 + 40);
          if ((_DWORD)v297)
          {
            v387 = *(_QWORD *)(v31 + 32);
            v388 = *(_QWORD *)(v296 + 40);
            v389 = 32 * v297;
            do
            {
              if (!*(_BYTE *)v387)
              {
                v390 = *(unsigned int *)(v387 + 4);
                if ((int)v390 >= 0)
                  v391 = (uint64_t *)(*(_QWORD *)(v388 + 272) + 8 * v390);
                else
                  v391 = (uint64_t *)(*(_QWORD *)(v388 + 24) + 16 * (v390 & 0x7FFFFFFF) + 8);
                v392 = *v391;
                if (*v391)
                {
                  v393 = *(_QWORD *)(v392 + 16);
                  *(_QWORD *)(v392 + 16) = v387;
                  *(_QWORD *)(v387 + 16) = v393;
                  if ((*(_BYTE *)(v387 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v387 + 24) = v392;
                  }
                  else
                  {
                    *(_QWORD *)(v387 + 24) = 0;
                    v391 = (uint64_t *)(v393 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v387 + 16) = v387;
                  *(_QWORD *)(v387 + 24) = 0;
                }
                *v391 = v387;
              }
              v387 += 32;
              v389 -= 32;
            }
            while (v389);
          }
          v298 = *(_QWORD *)(v296 + 728);
          if (v298)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v298 + 24))(v298, v31);
          v299 = *v201 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v31 = v299 | *(_QWORD *)v31 & 7;
          *(_QWORD *)(v31 + 8) = v201;
          *(_QWORD *)(v299 + 8) = v31;
          *v201 = *v201 & 7 | v31;
          *((_QWORD *)&v454 + 1) = 0;
          v455 = 0uLL;
          LODWORD(v454) = 0;
          DWORD1(v454) = v9;
LABEL_356:
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
          v9 = 1;
          LODWORD(v454) = 1;
          *((_QWORD *)&v454 + 1) = 0;
          *(_QWORD *)&v455 = 2 * (_QWORD)v84;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
          LODWORD(v454) = 1;
          v305 = v452;
          if (!v195)
            v305 = 0;
          *((_QWORD *)&v454 + 1) = 0;
          *(_QWORD *)&v455 = v305;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
          LODWORD(v454) = 1;
          if (v197)
            v306 = v198;
          else
            v306 = 0;
          goto LABEL_387;
        case 1997:
          v114 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          v115 = (_QWORD *)(*v114 + 24);
          if (*(_DWORD *)(*v114 + 32) >= 0x41u)
            v115 = (_QWORD *)*v115;
          v116 = (_QWORD *)*v115;
          v9 = sub_1C5CC1648((uint64_t *)a1, v114[4]);
          if (!(_DWORD)v9)
            return v9;
          v117 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
          v118 = (_QWORD *)(v117 + 24);
          if (*(_DWORD *)(v117 + 32) >= 0x41u)
            v118 = (_QWORD *)*v118;
          v450 = (_QWORD *)*v118;
          v119 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
          v120 = *(_QWORD *)(a1 + 256);
          if (*(_BYTE *)(v120 + 280))
          {
            LODWORD(v454) = 0;
            v121 = sub_1C4785D88(v120, v119, "StoreCMode", &v454);
            v445 = v454;
            v122 = *(_QWORD *)(a1 + 256);
            LODWORD(v454) = 0;
            v123 = sub_1C4785D88(v122, v119, "StoreSLCMode", &v454);
            v443 = v454;
            v124 = *(_QWORD *)(a1 + 32);
            v125 = *(_QWORD *)(v124 + 640);
            v126 = *(unint64_t **)(v124 + 648);
            v127 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
            v28 = *(llvm::MachineFunction **)(v125 + 32);
            v128 = *(unsigned __int8 **)(a1 + 72);
            v459 = (uint64_t (**)())v128;
            if (v128)
              llvm::MetadataTracking::track((uint64_t)&v459, v128, 2);
            v129 = v127 + 15072;
            v31 = *((_QWORD *)v28 + 28);
            if (v31)
              *((_QWORD *)v28 + 28) = *(_QWORD *)v31;
            else
              v31 = sub_1C484358C((uint64_t)v28 + 128, 72, 3);
            *(_QWORD *)&v454 = v459;
            if (v459)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
              v459 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v31, v28, v129, (unsigned __int8 **)&v454, 0);
            if ((_QWORD)v454)
              llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
            if (v459)
              llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
            v252 = *(_QWORD *)(v125 + 40);
            *(_QWORD *)(v31 + 24) = v252;
            v253 = *(_QWORD *)(v252 + 32);
            v254 = *(unsigned int *)(v31 + 40);
            if ((_DWORD)v254)
            {
              v359 = *(_QWORD *)(v31 + 32);
              v360 = *(_QWORD *)(v253 + 40);
              v361 = 32 * v254;
              do
              {
                if (!*(_BYTE *)v359)
                {
                  v362 = *(unsigned int *)(v359 + 4);
                  if ((int)v362 >= 0)
                    v363 = (uint64_t *)(*(_QWORD *)(v360 + 272) + 8 * v362);
                  else
                    v363 = (uint64_t *)(*(_QWORD *)(v360 + 24) + 16 * (v362 & 0x7FFFFFFF) + 8);
                  v364 = *v363;
                  if (*v363)
                  {
                    v365 = *(_QWORD *)(v364 + 16);
                    *(_QWORD *)(v364 + 16) = v359;
                    *(_QWORD *)(v359 + 16) = v365;
                    if ((*(_BYTE *)(v359 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v359 + 24) = v364;
                    }
                    else
                    {
                      *(_QWORD *)(v359 + 24) = 0;
                      v363 = (uint64_t *)(v365 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v359 + 16) = v359;
                    *(_QWORD *)(v359 + 24) = 0;
                  }
                  *v363 = v359;
                }
                v359 += 32;
                v361 -= 32;
              }
              while (v361);
            }
            v255 = *(_QWORD *)(v253 + 728);
            if (v255)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v255 + 24))(v255, v31);
            v256 = *v126 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v31 = v256 | *(_QWORD *)v31 & 7;
            *(_QWORD *)(v31 + 8) = v126;
            *(_QWORD *)(v256 + 8) = v31;
            *v126 = *v126 & 7 | v31;
            *((_QWORD *)&v454 + 1) = 0;
            v455 = 0uLL;
            LODWORD(v454) = 0;
            DWORD1(v454) = v9;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            v9 = 1;
            LODWORD(v454) = 1;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = 2 * (_QWORD)v116;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            LODWORD(v454) = 1;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = 2 * (_QWORD)v450;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            v257 = 2;
            LODWORD(v454) = 1;
            if (v121)
              v257 = v445;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = v257;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            v258 = v123 == 0;
LABEL_275:
            LODWORD(v454) = 1;
            v251 = v443;
            if (v258)
              v251 = 1;
LABEL_278:
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = v251;
          }
          else
          {
            LODWORD(v454) = 0;
            v212 = sub_1C4785D88(v120, v119, "StoreMCUCohMode", &v454);
            v447 = v454;
            v213 = *(_QWORD *)(a1 + 256);
            LODWORD(v454) = 0;
            v214 = sub_1C4785D88(v213, v119, "StoreSLCCohMode", &v454);
            v444 = v454;
            v215 = *(_QWORD *)(a1 + 32);
            v216 = *(_QWORD *)(v215 + 640);
            v217 = *(unint64_t **)(v215 + 648);
            v218 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
            v28 = *(llvm::MachineFunction **)(v216 + 32);
            v219 = *(unsigned __int8 **)(a1 + 72);
            v459 = (uint64_t (**)())v219;
            if (v219)
              llvm::MetadataTracking::track((uint64_t)&v459, v219, 2);
            v220 = v218 + 15120;
            v31 = *((_QWORD *)v28 + 28);
            if (v31)
              *((_QWORD *)v28 + 28) = *(_QWORD *)v31;
            else
              v31 = sub_1C484358C((uint64_t)v28 + 128, 72, 3);
            *(_QWORD *)&v454 = v459;
            if (v459)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
              v459 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v31, v28, v220, (unsigned __int8 **)&v454, 0);
            if ((_QWORD)v454)
              llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
            if (v459)
              llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
            v307 = *(_QWORD *)(v216 + 40);
            *(_QWORD *)(v31 + 24) = v307;
            v308 = *(_QWORD *)(v307 + 32);
            v309 = *(unsigned int *)(v31 + 40);
            if ((_DWORD)v309)
            {
              v401 = *(_QWORD *)(v31 + 32);
              v402 = *(_QWORD *)(v308 + 40);
              v403 = 32 * v309;
              do
              {
                if (!*(_BYTE *)v401)
                {
                  v404 = *(unsigned int *)(v401 + 4);
                  if ((int)v404 >= 0)
                    v405 = (uint64_t *)(*(_QWORD *)(v402 + 272) + 8 * v404);
                  else
                    v405 = (uint64_t *)(*(_QWORD *)(v402 + 24) + 16 * (v404 & 0x7FFFFFFF) + 8);
                  v406 = *v405;
                  if (*v405)
                  {
                    v407 = *(_QWORD *)(v406 + 16);
                    *(_QWORD *)(v406 + 16) = v401;
                    *(_QWORD *)(v401 + 16) = v407;
                    if ((*(_BYTE *)(v401 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v401 + 24) = v406;
                    }
                    else
                    {
                      *(_QWORD *)(v401 + 24) = 0;
                      v405 = (uint64_t *)(v407 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v401 + 16) = v401;
                    *(_QWORD *)(v401 + 24) = 0;
                  }
                  *v405 = v401;
                }
                v401 += 32;
                v403 -= 32;
              }
              while (v403);
            }
            v310 = *(_QWORD *)(v308 + 728);
            if (v310)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v310 + 24))(v310, v31);
            v311 = *v217 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v31 = v311 | *(_QWORD *)v31 & 7;
            *(_QWORD *)(v31 + 8) = v217;
            *(_QWORD *)(v311 + 8) = v31;
            *v217 = *v217 & 7 | v31;
            *((_QWORD *)&v454 + 1) = 0;
            v455 = 0uLL;
            LODWORD(v454) = 0;
            DWORD1(v454) = v9;
LABEL_383:
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            v9 = 1;
            LODWORD(v454) = 1;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = 2 * (_QWORD)v116;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            LODWORD(v454) = 1;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = 2 * (_QWORD)v450;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            LODWORD(v454) = 1;
            v317 = v447;
            if (!v212)
              v317 = 0;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = v317;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            LODWORD(v454) = 1;
            v306 = v444;
            if (!v214)
              v306 = 0;
LABEL_387:
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = v306;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            LODWORD(v454) = 1;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = 0;
          }
          goto LABEL_388;
        case 1998:
        case 2000:
        case 2002:
        case 2003:
        case 2004:
        case 2005:
        case 2006:
        case 2007:
        case 2008:
        case 2009:
        case 2010:
        case 2011:
        case 2012:
        case 2013:
        case 2014:
          return v9;
        case 1999:
        case 2001:
          v43 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!v43)
            return 0;
          return sub_1C478E5F4((_QWORD *)a1, a2, v43, *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2, 0);
        case 2015:
        case 2016:
          v44 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!v44)
            return 0;
          return sub_1C478F29C((_QWORD *)a1, a2, v44, *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2, 0);
        default:
          v20 = (_BYTE)v5 - 45;
          if (((_DWORD)v5 - 2093) > 0xB)
            goto LABEL_78;
          if (((1 << v20) & 0xFE0) != 0)
          {
            v21 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
            v22 = (_QWORD *)(*v21 + 24);
            if (*(_DWORD *)(*v21 + 32) >= 0x41u)
              v22 = (_QWORD *)*v22;
            v23 = (_QWORD *)*v22;
            v9 = sub_1C5CC1648((uint64_t *)a1, v21[4]);
            if ((_DWORD)v9)
            {
              v24 = *(_QWORD *)(a1 + 32);
              v25 = *(_QWORD *)(v24 + 640);
              v26 = *(unint64_t **)(v24 + 648);
              v27 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
              v28 = *(llvm::MachineFunction **)(v25 + 32);
              v29 = *(unsigned __int8 **)(a1 + 72);
              v459 = (uint64_t (**)())v29;
              if (v29)
                llvm::MetadataTracking::track((uint64_t)&v459, v29, 2);
              v30 = v27 + 644496;
              v31 = *((_QWORD *)v28 + 28);
              if (v31)
                *((_QWORD *)v28 + 28) = *(_QWORD *)v31;
              else
                v31 = sub_1C484358C((uint64_t)v28 + 128, 72, 3);
              *(_QWORD *)&v454 = v459;
              if (v459)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
                v459 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v31, v28, v30, (unsigned __int8 **)&v454, 0);
              if ((_QWORD)v454)
                llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
              if (v459)
                llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
              v58 = *(_QWORD *)(v25 + 40);
              *(_QWORD *)(v31 + 24) = v58;
              v59 = *(_QWORD *)(v58 + 32);
              v60 = *(unsigned int *)(v31 + 40);
              if ((_DWORD)v60)
              {
                v231 = *(_QWORD *)(v31 + 32);
                v232 = *(_QWORD *)(v59 + 40);
                v233 = 32 * v60;
                do
                {
                  if (!*(_BYTE *)v231)
                  {
                    v234 = *(unsigned int *)(v231 + 4);
                    if ((int)v234 >= 0)
                      v235 = (uint64_t *)(*(_QWORD *)(v232 + 272) + 8 * v234);
                    else
                      v235 = (uint64_t *)(*(_QWORD *)(v232 + 24) + 16 * (v234 & 0x7FFFFFFF) + 8);
                    v236 = *v235;
                    if (*v235)
                    {
                      v237 = *(_QWORD *)(v236 + 16);
                      *(_QWORD *)(v236 + 16) = v231;
                      *(_QWORD *)(v231 + 16) = v237;
                      if ((*(_BYTE *)(v231 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v231 + 24) = v236;
                      }
                      else
                      {
                        *(_QWORD *)(v231 + 24) = 0;
                        v235 = (uint64_t *)(v237 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v231 + 16) = v231;
                      *(_QWORD *)(v231 + 24) = 0;
                    }
                    *v235 = v231;
                  }
                  v231 += 32;
                  v233 -= 32;
                }
                while (v233);
              }
              v61 = *(_QWORD *)(v59 + 728);
              if (v61)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v61 + 24))(v61, v31);
              v62 = *v26 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v31 = v62 | *(_QWORD *)v31 & 7;
              *(_QWORD *)(v31 + 8) = v26;
              *(_QWORD *)(v62 + 8) = v31;
              *v26 = *v26 & 7 | v31;
              *((_QWORD *)&v454 + 1) = 0;
              v455 = 0uLL;
              LODWORD(v454) = 0;
              DWORD1(v454) = v9;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
              v9 = 1;
              LODWORD(v454) = 1;
              *((_QWORD *)&v454 + 1) = 0;
              *(_QWORD *)&v455 = v23;
              goto LABEL_390;
            }
            return v9;
          }
          if (((1 << v20) & 5) != 0)
          {
            v56 = sub_1C5CC1648((uint64_t *)a1, a2);
            if (!v56)
              return 0;
            if ((_DWORD)v5 == 2095)
              v57 = 6;
            else
              v57 = 7;
            return sub_1C4792FFC(a1, a2, v56, v57, 0);
          }
          if (((1 << v20) & 0xA) != 0)
          {
            v40 = sub_1C5CC1648((uint64_t *)a1, a2);
            if (!v40)
              return 0;
            if ((_DWORD)v5 == 2096)
              v41 = 2;
            else
              v41 = 3;
            return sub_1C47928B0((uint64_t *)a1, a2, v40, v41, 0);
          }
LABEL_78:
          if ((_DWORD)v5 != 1885)
            return v9;
          v63 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!v63)
            return 0;
          v64 = v63;
          v65 = *(_QWORD *)(a1 + 32);
          v66 = *(_QWORD *)(v65 + 640);
          v67 = *(unint64_t **)(v65 + 648);
          v68 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
          if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 280))
          {
            v69 = *(llvm::MachineFunction **)(v66 + 32);
            v70 = *(unsigned __int8 **)(a1 + 72);
            v459 = (uint64_t (**)())v70;
            if (v70)
              llvm::MetadataTracking::track((uint64_t)&v459, v70, 2);
            v71 = *((_QWORD *)v69 + 28);
            if (v71)
              *((_QWORD *)v69 + 28) = *(_QWORD *)v71;
            else
              v71 = sub_1C484358C((uint64_t)v69 + 128, 72, 3);
            *(_QWORD *)&v454 = v459;
            if (v459)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
              v459 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v71, v69, v68 + 532560, (unsigned __int8 **)&v454, 0);
            if ((_QWORD)v454)
              llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
            if (v459)
              llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
            v265 = *(_QWORD *)(v66 + 40);
            *(_QWORD *)(v71 + 24) = v265;
            v266 = *(_QWORD *)(v265 + 32);
            v267 = *(unsigned int *)(v71 + 40);
            if ((_DWORD)v267)
            {
              v373 = *(_QWORD *)(v71 + 32);
              v374 = *(_QWORD *)(v266 + 40);
              v375 = 32 * v267;
              do
              {
                if (!*(_BYTE *)v373)
                {
                  v376 = *(unsigned int *)(v373 + 4);
                  if ((int)v376 >= 0)
                    v377 = (uint64_t *)(*(_QWORD *)(v374 + 272) + 8 * v376);
                  else
                    v377 = (uint64_t *)(*(_QWORD *)(v374 + 24) + 16 * (v376 & 0x7FFFFFFF) + 8);
                  v378 = *v377;
                  if (*v377)
                  {
                    v379 = *(_QWORD *)(v378 + 16);
                    *(_QWORD *)(v378 + 16) = v373;
                    *(_QWORD *)(v373 + 16) = v379;
                    if ((*(_BYTE *)(v373 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v373 + 24) = v378;
                    }
                    else
                    {
                      *(_QWORD *)(v373 + 24) = 0;
                      v377 = (uint64_t *)(v379 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v373 + 16) = v373;
                    *(_QWORD *)(v373 + 24) = 0;
                  }
                  *v377 = v373;
                }
                v373 += 32;
                v375 -= 32;
              }
              while (v375);
            }
            v268 = *(_QWORD *)(v266 + 728);
            if (v268)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v268 + 24))(v268, v71);
            v269 = *v67 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v71 = v269 | *(_QWORD *)v71 & 7;
            *(_QWORD *)(v71 + 8) = v67;
            *(_QWORD *)(v269 + 8) = v71;
            *v67 = *v67 & 7 | v71;
            *((_QWORD *)&v454 + 1) = 0;
            v455 = 0uLL;
            LODWORD(v454) = 0x1000000;
            DWORD1(v454) = v64;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v69, (const llvm::MachineOperand *)&v454);
            v9 = 1;
            LODWORD(v454) = 1;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v69, (const llvm::MachineOperand *)&v454);
            LODWORD(v454) = 1;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v69, (const llvm::MachineOperand *)&v454);
            v454 = 0u;
            v455 = 0u;
            v270 = (llvm::MachineInstr *)v71;
            v271 = v69;
            goto LABEL_393;
          }
          v228 = *(llvm::MachineFunction **)(v66 + 32);
          v229 = *(unsigned __int8 **)(a1 + 72);
          v459 = (uint64_t (**)())v229;
          if (v229)
            llvm::MetadataTracking::track((uint64_t)&v459, v229, 2);
          v230 = *((_QWORD *)v228 + 28);
          if (v230)
            *((_QWORD *)v228 + 28) = *(_QWORD *)v230;
          else
            v230 = sub_1C484358C((uint64_t)v228 + 128, 72, 3);
          *(_QWORD *)&v454 = v459;
          if (v459)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
            v459 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v230, v228, v68 + 912, (unsigned __int8 **)&v454, 0);
          if ((_QWORD)v454)
            llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
          if (v459)
            llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
          v318 = *(_QWORD *)(v66 + 40);
          *(_QWORD *)(v230 + 24) = v318;
          v319 = *(_QWORD *)(v318 + 32);
          v320 = *(unsigned int *)(v230 + 40);
          if ((_DWORD)v320)
          {
            v415 = *(_QWORD *)(v230 + 32);
            v416 = *(_QWORD *)(v319 + 40);
            v417 = 32 * v320;
            do
            {
              if (!*(_BYTE *)v415)
              {
                v418 = *(unsigned int *)(v415 + 4);
                if ((int)v418 >= 0)
                  v419 = (uint64_t *)(*(_QWORD *)(v416 + 272) + 8 * v418);
                else
                  v419 = (uint64_t *)(*(_QWORD *)(v416 + 24) + 16 * (v418 & 0x7FFFFFFF) + 8);
                v420 = *v419;
                if (*v419)
                {
                  v421 = *(_QWORD *)(v420 + 16);
                  *(_QWORD *)(v420 + 16) = v415;
                  *(_QWORD *)(v415 + 16) = v421;
                  if ((*(_BYTE *)(v415 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v415 + 24) = v420;
                  }
                  else
                  {
                    *(_QWORD *)(v415 + 24) = 0;
                    v419 = (uint64_t *)(v421 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v415 + 16) = v415;
                  *(_QWORD *)(v415 + 24) = 0;
                }
                *v419 = v415;
              }
              v415 += 32;
              v417 -= 32;
            }
            while (v417);
          }
          v321 = *(_QWORD *)(v319 + 728);
          if (v321)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v321 + 24))(v321, v230);
          v322 = *v67 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v230 = v322 | *(_QWORD *)v230 & 7;
          *(_QWORD *)(v230 + 8) = v67;
          *(_QWORD *)(v322 + 8) = v230;
          *v67 = *v67 & 7 | v230;
          *((_QWORD *)&v454 + 1) = 0;
          v455 = 0uLL;
          LODWORD(v454) = 0x1000000;
          DWORD1(v454) = v64;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v230, v228, (const llvm::MachineOperand *)&v454);
          v455 = 0uLL;
          v454 = 0x11B00000000uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v230, v228, (const llvm::MachineOperand *)&v454);
          v9 = 1;
          break;
      }
      return v9;
    }
    if ((int)v5 > 260)
    {
      switch((int)v5)
      {
        case 1827:
          v174 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!v174)
            return 0;
          v34 = v174;
          v35 = *(_BYTE **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          v36 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2;
          v37 = (_QWORD *)a1;
          v38 = (uint64_t *)a2;
          v39 = 445;
          return sub_1C47B1160(v37, v38, v35, v34, v39, v36);
        case 1828:
        case 1829:
        case 1832:
        case 1833:
        case 1834:
        case 1835:
        case 1836:
        case 1837:
        case 1838:
        case 1848:
        case 1849:
          return v9;
        case 1830:
          v172 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!(_DWORD)v172)
            return 0;
          return sub_1C478AE7C((uint64_t *)a1, a2, v172, *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2);
        case 1831:
          v175 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
          v176 = *(_QWORD *)(a2 - 32 * v175);
          if (v176)
            v177 = *(_BYTE *)(v176 + 16) == 16;
          else
            v177 = 0;
          v178 = !v177;
          if (v177)
          {
            v181 = -v175;
            v185 = (unsigned __int16 *)(v176 + 24);
            if (*(_DWORD *)(v176 + 32) >= 0x41u)
              v185 = *(unsigned __int16 **)v185;
            v180 = 0;
            v182 = *v185 | 0x100000000;
            v183 = 467;
          }
          else
          {
            v179 = sub_1C5CC1648((uint64_t *)a1, v176);
            if ((v179 & 0x80000000) == 0)
              return 0;
            v180 = v179;
            v181 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
            v182 = 0x100000000;
            v183 = 466;
          }
          v186 = sub_1C5CC1648((uint64_t *)a1, *(_QWORD *)(a2 + 32 * v181 + 32));
          if ((v186 & 0x80000000) == 0)
            return 0;
          v187 = v186;
          v188 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!v188)
            return 0;
          v451 = v188;
          v189 = *(_QWORD *)(a1 + 32);
          v190 = *(_QWORD *)(v189 + 640);
          v191 = *(unint64_t **)(v189 + 648);
          v192 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
          v28 = *(llvm::MachineFunction **)(v190 + 32);
          v193 = *(unsigned __int8 **)(a1 + 72);
          v459 = (uint64_t (**)())v193;
          if (v193)
            llvm::MetadataTracking::track((uint64_t)&v459, v193, 2);
          v194 = v192 + 48 * v183;
          v31 = *((_QWORD *)v28 + 28);
          if (v31)
            *((_QWORD *)v28 + 28) = *(_QWORD *)v31;
          else
            v31 = sub_1C484358C((uint64_t)v28 + 128, 72, 3);
          *(_QWORD *)&v454 = v459;
          if (v459)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
            v459 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v31, v28, v194, (unsigned __int8 **)&v454, 0);
          if ((_QWORD)v454)
            llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
          if (v459)
            llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
          v333 = *(_QWORD *)(v190 + 40);
          *(_QWORD *)(v31 + 24) = v333;
          v334 = *(_QWORD *)(v333 + 32);
          v335 = *(unsigned int *)(v31 + 40);
          if ((_DWORD)v335)
          {
            v436 = *(_QWORD *)(v31 + 32);
            v437 = *(_QWORD *)(v334 + 40);
            v438 = 32 * v335;
            do
            {
              if (!*(_BYTE *)v436)
              {
                v439 = *(unsigned int *)(v436 + 4);
                if ((int)v439 >= 0)
                  v440 = (uint64_t *)(*(_QWORD *)(v437 + 272) + 8 * v439);
                else
                  v440 = (uint64_t *)(*(_QWORD *)(v437 + 24) + 16 * (v439 & 0x7FFFFFFF) + 8);
                v441 = *v440;
                if (*v440)
                {
                  v442 = *(_QWORD *)(v441 + 16);
                  *(_QWORD *)(v441 + 16) = v436;
                  *(_QWORD *)(v436 + 16) = v442;
                  if ((*(_BYTE *)(v436 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v436 + 24) = v441;
                  }
                  else
                  {
                    *(_QWORD *)(v436 + 24) = 0;
                    v440 = (uint64_t *)(v442 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v436 + 16) = v436;
                  *(_QWORD *)(v436 + 24) = 0;
                }
                *v440 = v436;
              }
              v436 += 32;
              v438 -= 32;
            }
            while (v438);
          }
          v336 = *(_QWORD *)(v334 + 728);
          if (v336)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v336 + 24))(v336, v31);
          v337 = *v191 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v31 = v337 | *(_QWORD *)v31 & 7;
          *(_QWORD *)(v31 + 8) = v191;
          *(_QWORD *)(v337 + 8) = v31;
          *v191 = *v191 & 7 | v31;
          *((_QWORD *)&v454 + 1) = 0;
          v455 = 0uLL;
          LODWORD(v454) = 0x1000000;
          DWORD1(v454) = v451;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
          LODWORD(v454) = 1;
          *((_QWORD *)&v454 + 1) = 0;
          *(_QWORD *)&v455 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
          if ((v178 & 1) != 0)
          {
            *((_QWORD *)&v454 + 1) = 0;
            v455 = 0uLL;
            LODWORD(v454) = 0;
            DWORD1(v454) = v180;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
            LODWORD(v454) = 1;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = 0;
          }
          else
          {
            LODWORD(v454) = 1;
            *((_QWORD *)&v454 + 1) = 0;
            *(_QWORD *)&v455 = v182;
          }
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
          *((_QWORD *)&v454 + 1) = 0;
          v455 = 0uLL;
          LODWORD(v454) = 0;
          DWORD1(v454) = v187;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
          v9 = 1;
LABEL_389:
          LODWORD(v454) = 1;
          *((_QWORD *)&v454 + 1) = 0;
          *(_QWORD *)&v455 = 0;
LABEL_390:
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
LABEL_391:
          LODWORD(v454) = 1;
          *((_QWORD *)&v454 + 1) = 0;
          *(_QWORD *)&v455 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
          v454 = 0u;
          v455 = 0u;
LABEL_392:
          v270 = (llvm::MachineInstr *)v31;
          v271 = v28;
LABEL_393:
          llvm::MachineInstr::addOperand(v270, v271, (const llvm::MachineOperand *)&v454);
          return v9;
        case 1839:
        case 1840:
        case 1841:
        case 1842:
        case 1843:
        case 1844:
        case 1845:
        case 1846:
          if (!v8)
            return 0;
          LODWORD(v459) = 0;
          sub_1C47860F8((int)v5);
          v42 = sub_1C47A836C(a1, (unsigned __int8 *)a2);
          if (!v42)
            return 0;
          return sub_1C478D888(a1, a2, v42, 0, v459, 0, 0, 0);
        case 1847:
          v154 = sub_1C47A836C(a1, (unsigned __int8 *)a2);
          if (!v154)
            return 0;
          v155 = v154;
          v156 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
          v157 = *(_BYTE **)v156;
          v158 = *(_BYTE **)(v156 + 32);
          v159 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2;
          v160 = (uint64_t *)a1;
          v161 = (uint64_t *)a2;
          v162 = 0;
          v163 = 0;
          return sub_1C478FCB8(v160, v161, v157, v158, v155, v159, v162, v163);
        case 1850:
          if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 2)
            return 0;
          v9 = sub_1C47A836C(a1, (unsigned __int8 *)a2);
          if (!(_DWORD)v9)
            return v9;
          v164 = sub_1C5CC1648((uint64_t *)a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
          if (!v164)
            return 0;
          v165 = v164;
          v166 = *(_QWORD *)(a1 + 32);
          v167 = *(_QWORD *)(v166 + 640);
          v168 = *(unint64_t **)(v166 + 648);
          v169 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
          v28 = *(llvm::MachineFunction **)(v167 + 32);
          v170 = *(unsigned __int8 **)(a1 + 72);
          v459 = (uint64_t (**)())v170;
          if (v170)
            llvm::MetadataTracking::track((uint64_t)&v459, v170, 2);
          v171 = v169 + 120048;
          v31 = *((_QWORD *)v28 + 28);
          if (v31)
            *((_QWORD *)v28 + 28) = *(_QWORD *)v31;
          else
            v31 = sub_1C484358C((uint64_t)v28 + 128, 72, 3);
          *(_QWORD *)&v454 = v459;
          if (v459)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v459, (unsigned __int8 *)v459, (uint64_t)&v454);
            v459 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v31, v28, v171, (unsigned __int8 **)&v454, 0);
          if ((_QWORD)v454)
            llvm::MetadataTracking::untrack((uint64_t)&v454, (unsigned __int8 *)v454);
          if (v459)
            llvm::MetadataTracking::untrack((uint64_t)&v459, (unsigned __int8 *)v459);
          v328 = *(_QWORD *)(v167 + 40);
          *(_QWORD *)(v31 + 24) = v328;
          v329 = *(_QWORD *)(v328 + 32);
          v330 = *(unsigned int *)(v31 + 40);
          if ((_DWORD)v330)
          {
            v429 = *(_QWORD *)(v31 + 32);
            v430 = *(_QWORD *)(v329 + 40);
            v431 = 32 * v330;
            do
            {
              if (!*(_BYTE *)v429)
              {
                v432 = *(unsigned int *)(v429 + 4);
                if ((int)v432 >= 0)
                  v433 = (uint64_t *)(*(_QWORD *)(v430 + 272) + 8 * v432);
                else
                  v433 = (uint64_t *)(*(_QWORD *)(v430 + 24) + 16 * (v432 & 0x7FFFFFFF) + 8);
                v434 = *v433;
                if (*v433)
                {
                  v435 = *(_QWORD *)(v434 + 16);
                  *(_QWORD *)(v434 + 16) = v429;
                  *(_QWORD *)(v429 + 16) = v435;
                  if ((*(_BYTE *)(v429 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v429 + 24) = v434;
                  }
                  else
                  {
                    *(_QWORD *)(v429 + 24) = 0;
                    v433 = (uint64_t *)(v435 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v429 + 16) = v429;
                  *(_QWORD *)(v429 + 24) = 0;
                }
                *v433 = v429;
              }
              v429 += 32;
              v431 -= 32;
            }
            while (v431);
          }
          v331 = *(_QWORD *)(v329 + 728);
          if (v331)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v331 + 24))(v331, v31);
          v332 = *v168 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v31 = v332 | *(_QWORD *)v31 & 7;
          *(_QWORD *)(v31 + 8) = v168;
          *(_QWORD *)(v332 + 8) = v31;
          *v168 = *v168 & 7 | v31;
          *((_QWORD *)&v454 + 1) = 0;
          v455 = 0uLL;
          LODWORD(v454) = 0x1000000;
          DWORD1(v454) = v9;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
          v9 = 1;
          LODWORD(v454) = 1;
          *((_QWORD *)&v454 + 1) = 0;
          *(_QWORD *)&v455 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
          *((_QWORD *)&v454 + 1) = 0;
          v455 = 0uLL;
          LODWORD(v454) = 0;
          DWORD1(v454) = v165;
LABEL_388:
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v31, v28, (const llvm::MachineOperand *)&v454);
          goto LABEL_389;
        case 1851:
          v173 = sub_1C47A836C(a1, (unsigned __int8 *)a2);
          if (!v173)
            return 0;
          v155 = v173;
          v157 = *(_BYTE **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          v159 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2;
          v160 = (uint64_t *)a1;
          v161 = (uint64_t *)a2;
          v158 = 0;
          v162 = 1;
          v163 = 1;
          return sub_1C478FCB8(v160, v161, v157, v158, v155, v159, v162, v163);
        default:
          if ((_DWORD)v5 != 261)
          {
            if ((_DWORD)v5 != 280)
              return v9;
            v55 = sub_1C5CC1648((uint64_t *)a1, a2);
            if (v55)
              return sub_1C4791358(a1, (uint64_t *)a2, v55, 0, *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2, 0);
            return 0;
          }
          v184 = sub_1C5CC1648((uint64_t *)a1, a2);
          if (!v184)
            return 0;
          v34 = v184;
          v35 = *(_BYTE **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          v36 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2;
          v37 = (_QWORD *)a1;
          v38 = (uint64_t *)a2;
          v39 = 424;
          break;
      }
      return sub_1C47B1160(v37, v38, v35, v34, v39, v36);
    }
    if ((int)v5 > 139)
    {
      if ((_DWORD)v5 == 140)
      {
        v73 = sub_1C5CC1648((uint64_t *)a1, a2);
        if (v73)
          return sub_1C4792588((_QWORD *)a1, a2, v73, *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2);
        return 0;
      }
      if ((_DWORD)v5 == 175)
      {
        v75 = sub_1C5CC1648((uint64_t *)a1, a2);
        if (v75)
          return sub_1C47B361C((_QWORD *)a1, a2, v75, *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2);
        return 0;
      }
      if ((_DWORD)v5 != 177)
        return v9;
      v33 = sub_1C5CC1648((uint64_t *)a1, a2);
      if (!v33)
        return 0;
      v34 = v33;
      v35 = *(_BYTE **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      v36 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2;
      v37 = (_QWORD *)a1;
      v38 = (uint64_t *)a2;
      v39 = 231;
    }
    else
    {
      if ((_DWORD)v5 == 75)
      {
        v72 = sub_1C5CC1648((uint64_t *)a1, a2);
        if (v72)
          return sub_1C47B2F00((_QWORD *)a1, a2, v72, *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2);
        return 0;
      }
      if ((_DWORD)v5 != 76)
      {
        if ((_DWORD)v5 != 139)
          return v9;
        v32 = sub_1C5CC1648((uint64_t *)a1, a2);
        if (v32)
          return sub_1C478EF18((_QWORD *)a1, a2, v32, *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2, 0);
        return 0;
      }
      v74 = sub_1C5CC1648((uint64_t *)a1, a2);
      if (!v74)
        return 0;
      v34 = v74;
      v35 = *(_BYTE **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      v36 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8) != 2;
      v37 = (_QWORD *)a1;
      v38 = (uint64_t *)a2;
      v39 = 234;
    }
    return sub_1C47B1160(v37, v38, v35, v34, v39, v36);
  }
  LODWORD(v454) = 0;
  LODWORD(v459) = 0;
  sub_1C47860F8((int)v5);
  v17 = sub_1C47A836C(a1, (unsigned __int8 *)a2);
  v9 = 0;
  if (!v17)
    return v9;
  v18 = v17;
  IsHalfItr = llvm::IsHalfItr((llvm *)*(unsigned int *)(*(_QWORD *)(a2 - 32) + 36));
  return sub_1C478D240(a1, a2, v18, v454, (int)v459, IsHalfItr, 0);
}

BOOL sub_1C4796EA0(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  _BOOL8 v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  char v11;
  int v12;
  int v13;
  char v14;
  char v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  int v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  BOOL v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  char v52;
  BOOL v53;
  unsigned int v54;
  unsigned int v55;
  _OWORD v56[2];
  uint64_t v57;
  _OWORD v58[2];
  uint64_t v59;
  _OWORD v60[2];
  uint64_t v61;
  _OWORD v62[2];
  uint64_t v63;
  _QWORD v64[2];
  char v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  _OWORD v82[2];
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  char v94;
  char v95;
  _BYTE v96[2];
  unsigned __int8 v97;
  unsigned int v98;
  unsigned __int8 v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD v126[2];
  _DWORD *v127;
  uint64_t v128;
  _BYTE v129[16];
  _QWORD *v130;
  uint64_t v131;
  _QWORD v132[4];

  v132[1] = *MEMORY[0x1E0C80C00];
  llvm::SampleInfo::SampleInfo((uint64_t)v96, a3, 2);
  v95 = 0;
  (*(void (**)(_OWORD *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *))(*a1 + 48))(v82, a1, a4, a2, v103, v104, v105, &v95);
  v7 = 0;
  if (v95 || !v94)
    return v7;
  v81 = v90;
  v78 = v82[0];
  v79 = v82[1];
  v80 = v83;
  v75 = v84;
  v76 = v85;
  v77 = v86;
  v72 = v87;
  v73 = v88;
  v74 = v89;
  v69 = v91;
  v70 = v92;
  v71 = v93;
  v127 = v129;
  v128 = 0x400000000;
  v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 16))(a1, a2, v106);
  v9 = v98 + v109;
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 200))(a1[1]);
  if (v97)
    v11 = v10;
  else
    v11 = 0;
  v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 168))(a1[1]);
  if (v108 == -1)
    v13 = 0;
  else
    v13 = v12;
  v14 = v13 & v11;
  if ((v115 & v107) == 0xFFFFFFFF)
    v14 = v11;
  if ((_DWORD)v9 == 2)
    v15 = ((v113 == -1) | ~(_BYTE)v13) & v14;
  else
    v15 = v14;
  if ((_DWORD)v9 == 1)
  {
    if (v115 == -1)
    {
      if (v107 == -1)
        LOBYTE(v13) = 0;
      if ((v13 & 1) != 0)
      {
LABEL_17:
        if ((v112 & v114) == 0xFFFFFFFF)
          v16 = v15;
        else
          v16 = 0;
        v125 = 0;
        v126[0] = 0;
        v124 = v8;
        if ((v16 & 1) == 0)
        {
LABEL_53:
          v27 = &v124;
          do
          {
            v28 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 168))(a1, *v27);
            v95 |= v28 == 0;
            v29 = v128;
            if (v128 >= (unint64_t)HIDWORD(v128))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, (uint64_t)v129, v128 + 1, 4);
              v29 = v128;
            }
            v127[v29] = v28;
            LODWORD(v128) = v128 + 1;
            ++v27;
            --v9;
          }
          while (v9);
          goto LABEL_60;
        }
        goto LABEL_32;
      }
    }
    else if (v13)
    {
      goto LABEL_17;
    }
    v125 = 0;
    v126[0] = 0;
    v124 = v8;
    if ((v15 & 1) == 0)
      goto LABEL_53;
LABEL_32:
    v19 = 1;
    goto LABEL_33;
  }
  v124 = 0;
  v125 = 0;
  v126[0] = 0;
  if (!(_DWORD)v9)
  {
    v124 = v8;
    if ((v15 & 1) == 0)
    {
LABEL_59:
      v9 = 0;
      goto LABEL_60;
    }
    v21 = 0;
    v130 = 0;
    v131 = 0;
    v132[0] = 0;
    goto LABEL_44;
  }
  v17 = &v124;
  (*(void (**)(_QWORD *, _QWORD *, _QWORD **, uint64_t))(*a1 + 120))(a1, v8, &v124, v9);
  v18 = v9;
  do
  {
    if (!*v17)
    {
      (*(void (**)(_QWORD *, _QWORD *, _DWORD **, uint64_t))(*a1 + 80))(a1, v8, &v127, v9);
      goto LABEL_59;
    }
    ++v17;
    --v18;
  }
  while (v18);
  if ((v15 & 1) == 0)
    goto LABEL_53;
  v19 = v9;
LABEL_33:
  v20 = 0;
  v21 = 0;
  v130 = 0;
  v131 = 0;
  v132[0] = 0;
  while (1)
  {
    v121 = 0;
    v118 = 0;
    if (!(*(unsigned int (**)(_QWORD *, _QWORD *, uint64_t **, uint64_t **))(*a1 + 128))(a1, (&v124)[v20], &v121, &v118))
    {
      v121 = 0;
      v118 = 0;
      if (!(*(unsigned int (**)(_QWORD *, _QWORD *, uint64_t **, uint64_t **))(*a1 + 136))(a1, (&v124)[v20], &v121, &v118))break;
    }
    (&v130)[v20] = v121;
    if (v21)
    {
      if (v21 != v118)
        break;
    }
    else
    {
      v21 = v118;
    }
    if (v19 == ++v20)
      goto LABEL_48;
  }
  if ((_DWORD)v9 != (_DWORD)v20)
    goto LABEL_53;
LABEL_48:
  v24 = &v130;
  do
  {
    v25 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 168))(a1, *v24);
    v95 |= v25 == 0;
    v26 = v128;
    if (v128 >= (unint64_t)HIDWORD(v128))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, (uint64_t)v129, v128 + 1, 4);
      v26 = v128;
    }
    v127[v26] = v25;
    LODWORD(v128) = v128 + 1;
    ++v24;
    --v19;
  }
  while (v19);
LABEL_44:
  v22 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*a1 + 168))(a1, v21);
  v95 |= v22 == 0;
  v23 = v128;
  if (v128 >= HIDWORD(v128))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, (uint64_t)v129, v128 + 1, 4);
    v23 = v128;
  }
  v127[v23] = v22;
  LODWORD(v128) = v128 + 1;
  v9 = 1;
LABEL_60:
  if (!v95)
  {
    v68 = -1;
    v124 = v126;
    v125 = 0x400000000;
    (*(void (**)(_QWORD *, _BYTE *, uint64_t, uint64_t, unsigned int *, _QWORD **, char *))(*a1 + 256))(a1, v96, a4, a2, &v68, &v124, &v95);
    if (v95)
    {
      v7 = 0;
LABEL_92:
      if (v124 != v126)
        free(v124);
      goto LABEL_94;
    }
    v130 = v132;
    v131 = 0x200000000;
    if (v108 != -1 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)a1[1] + 168))(a1[1]))
    {
      v30 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 16))(a1, a2, v108);
      (*(void (**)(_QWORD *, uint64_t, _QWORD **, uint64_t))(*a1 + 80))(a1, v30, &v130, 0xFFFFFFFFLL);
    }
    if (v95)
    {
      v7 = 0;
LABEL_90:
      if (v130 != v132)
        free(v130);
      goto LABEL_92;
    }
    v31 = (v115 & v111) != -1;
    v121 = &v123;
    v122 = 0x200000000;
    (*(void (**)(_QWORD *, _BYTE *, uint64_t, uint64_t **))(*a1 + 264))(a1, v96, a2, &v121);
    v32 = v99;
    v67 = -1;
    v33 = v110;
    v55 = v98;
    if (!v110 || v116 == -1)
    {
      if (!v110)
      {
LABEL_76:
        if (v110)
          v33 = 1;
        v54 = v33;
        v118 = &v120;
        v119 = 0x200000000;
        if (v101 != -1)
        {
          v35 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 16))(a1, a2, v117);
          (*(void (**)(_QWORD *, uint64_t, uint64_t **, uint64_t))(*a1 + 80))(a1, v35, &v118, 0xFFFFFFFFLL);
        }
        if (v95)
        {
          v7 = 0;
        }
        else
        {
          v53 = v31;
          (*(void (**)(_QWORD *, _BYTE *, uint64_t, _DWORD **, _QWORD **, _QWORD, uint64_t **, _QWORD **, uint64_t **))(*a1 + 272))(a1, v96, a2, &v127, &v124, v68, &v121, &v130, &v118);
          v66 = -1;
          if (v102 != -1)
          {
            v36 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
            (*(void (**)(_QWORD *, uint64_t, unsigned int *, _QWORD))(*a1 + 144))(a1, v36, &v66, 0);
          }
          v52 = (*(uint64_t (**)(_QWORD *, _BYTE *, uint64_t))(*a1 + 200))(a1, v96, a2);
          v37 = (*(uint64_t (**)(_QWORD *, _BYTE *, uint64_t))(*a1 + 208))(a1, v96, a2);
          v38 = a1[1];
          v39 = v68;
          v49 = v101;
          v50 = v100;
          v51 = v67;
          v47 = v111 != -1;
          v48 = v97;
          v46 = v96[1];
          v40 = (*(uint64_t (**)(uint64_t, _QWORD, _BYTE *, uint64_t))(*(_QWORD *)v38 + 104))(v38, v68, v96, v9);
          HIDWORD(v44) = v66;
          BYTE1(v44) = v37;
          LOBYTE(v44) = v52;
          HIBYTE(v43) = v46;
          BYTE2(v43) = v32 == 0;
          BYTE1(v43) = v47;
          LOBYTE(v43) = v53;
          v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int, int *, char, uint64_t))(*(_QWORD *)v38 + 112))(v38, v39, v55, v50, v49, v48, v54, v51, v43, &v81, v40, v44);
          v62[0] = v78;
          v62[1] = v79;
          v63 = v80;
          v60[0] = v75;
          v60[1] = v76;
          v61 = v77;
          v58[0] = v72;
          v58[1] = v73;
          v59 = v74;
          v56[0] = v69;
          v56[1] = v70;
          v57 = v71;
          HIDWORD(v45) = v68;
          BYTE2(v45) = v37;
          BYTE1(v45) = v52;
          LOBYTE(v45) = v9;
          (*(void (**)(_QWORD *__return_ptr, _QWORD *, _BYTE *, uint64_t, uint64_t, _OWORD *, _OWORD *, _OWORD *, _OWORD *, _DWORD *, _QWORD, _QWORD *, _QWORD, uint64_t *, _QWORD, uint64_t *, _QWORD, uint64_t, unsigned int))(*a1 + 88))(v64, a1, v96, a2, v41, v62, v60, v58, v56, v127, v128, v124, v125, v121, v122, v118, v119, v45, v67);
          v7 = v65 != 0;
          if (v65)
          {
            (*(void (**)(_QWORD *, _BYTE *, uint64_t, _QWORD *))(*a1 + 104))(a1, v96, a2, v64);
            (*(void (**)(_QWORD *, _BYTE *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*a1 + 112))(a1, v96, a2, v64[0], v64[1], v67, v66);
          }
        }
        if (v118 != &v120)
          free(v118);
        if (v121 != &v123)
          free(v121);
        goto LABEL_90;
      }
    }
    else
    {
      v34 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
      (*(void (**)(_QWORD *, uint64_t, unsigned int *, _QWORD))(*a1 + 144))(a1, v34, &v67, 0);
      if (v67 < 4)
        goto LABEL_75;
    }
    v67 = 0;
LABEL_75:
    v33 = -1;
    goto LABEL_76;
  }
  v7 = 0;
LABEL_94:
  if (v127 != (_DWORD *)v129)
    free(v127);
  return v7;
}

uint64_t sub_1C479783C(uint64_t a1, uint64_t a2, int a3, int a4, int a5, _DWORD *a6)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  const llvm::APInt *v14;
  BOOL v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t **v19;
  unsigned __int8 **v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  _QWORD **v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  const char *v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  const char *v52;
  char v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  BOOL v65;
  int v66;
  int v67;
  unsigned __int8 *v68;
  int v69;
  unsigned __int8 *v70;
  int v71;
  unsigned __int8 *v72;
  uint64_t v73;
  BOOL v74;
  _QWORD *v75;
  unsigned int v76;
  unsigned __int8 *v77;
  uint64_t v78;
  BOOL v79;
  _QWORD *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  llvm::MachineFunction *v86;
  uint64_t v87;
  unsigned __int8 *v88;
  unint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  uint64_t v96;
  llvm::MachineFunction *v97;
  unsigned __int8 *v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  unsigned __int8 *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  unsigned __int8 **v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  _DWORD *v144;
  int v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  llvm::ConstantInt *v150;
  unint64_t v151;
  unint64_t v152;
  int v153;
  unsigned __int8 *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  uint64_t v159;
  llvm::MachineFunction *v160;
  unsigned __int8 *v161;
  uint64_t v162;
  unint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  uint64_t v168;
  unsigned __int8 *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t *v182;
  uint64_t v183;
  llvm::MachineFunction *v184;
  unsigned __int8 *v185;
  unint64_t v186;
  uint64_t v187;
  int IncompleteVirtualRegister;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t *v192;
  uint64_t v193;
  llvm::MachineFunction *v194;
  unsigned __int8 *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t *v216;
  uint64_t v217;
  llvm::MachineFunction *v218;
  unsigned __int8 *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t *v228;
  uint64_t v229;
  unsigned __int8 *v230;
  uint64_t v231;
  unsigned __int16 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t *v244;
  uint64_t v245;
  llvm::MachineFunction *v246;
  unsigned __int8 *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t *v256;
  uint64_t v257;
  unsigned __int8 *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned __int8 *v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  BOOL v334;
  int v335;
  int v336;
  int v337;
  int v338;
  int v339;
  int v340;
  uint64_t v341;
  _QWORD *v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  _DWORD *v350;
  int v351;
  unint64_t v352;
  unint64_t v353;
  unsigned __int16 v354;
  unint64_t v355;
  unint64_t v356;
  BOOL v357;
  unsigned __int8 *v358;
  __int128 v359;
  __int128 v360;

  v11 = a1;
  v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 256) + 281);
  if (a6)
    *a6 = 0;
  v13 = sub_1C4786340(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), *(_QWORD *)(a1 + 272));
  v15 = v13 != -1;
  if (v13 == -1)
  {
    v18 = sub_1C47A836C(v11, *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
    if (!v18)
      return 0;
    v16 = 0xFFFFFFFFLL;
  }
  else
  {
    v16 = v13;
    if (a5)
    {
      if ((v13 & 1) != 0)
        return 0;
      v343 = a3;
      v17 = a5;
      v16 = (unint64_t)v13 >> 1;
    }
    else
    {
      v343 = a3;
      v17 = 0;
    }
    v148 = *(_DWORD *)(a2 + 20);
    v149 = *****(_QWORD *****)(v11 + 32);
    v150 = *(llvm::ConstantInt **)(v149 + 1936);
    v151 = *(unsigned int *)(v149 + 1944);
    DWORD2(v359) = v151 >> 8;
    if (v151 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v359, v16, 0);
    }
    else
    {
      if (v151 <= 0xFF)
        v152 = 0;
      else
        v152 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v151);
      *(_QWORD *)&v359 = v152 & v16;
    }
    v153 = v148 & 0x7FFFFFF;
    v154 = (unsigned __int8 *)llvm::ConstantInt::get(v150, (llvm::LLVMContext *)&v359, v14);
    if (DWORD2(v359) >= 0x41 && (_QWORD)v359)
      MEMORY[0x1CAA32F9C](v359, 0x1000C8000313F17);
    v18 = sub_1C6126A04(v11, v154);
    if (v153 == 1)
    {
      if (!v18)
        return 0;
      v155 = v18;
      if (a4)
      {
        v156 = *(_QWORD *)(v11 + 32);
        v157 = *(_QWORD *)(v156 + 640);
        v158 = *(unint64_t **)(v156 + 648);
        v159 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 8);
        v160 = *(llvm::MachineFunction **)(v157 + 32);
        v161 = *(unsigned __int8 **)(v11 + 72);
        v358 = v161;
        if (v161)
          llvm::MetadataTracking::track((uint64_t)&v358, v161, 2);
        v162 = v159 + 912;
        v163 = *((_QWORD *)v160 + 28);
        if (v163)
          *((_QWORD *)v160 + 28) = *(_QWORD *)v163;
        else
          v163 = sub_1C484358C((uint64_t)v160 + 128, 72, 3);
        *(_QWORD *)&v359 = v358;
        if (v358)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v358, v358, (uint64_t)&v359);
          v358 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v163, v160, v162, (unsigned __int8 **)&v359, 0);
        if ((_QWORD)v359)
          llvm::MetadataTracking::untrack((uint64_t)&v359, (unsigned __int8 *)v359);
        if (v358)
          llvm::MetadataTracking::untrack((uint64_t)&v358, v358);
        v197 = *(_QWORD *)(v157 + 40);
        *(_QWORD *)(v163 + 24) = v197;
        v198 = *(_QWORD *)(v197 + 32);
        v199 = *(unsigned int *)(v163 + 40);
        if ((_DWORD)v199)
        {
          v306 = *(_QWORD *)(v163 + 32);
          v307 = *(_QWORD *)(v198 + 40);
          v308 = 32 * v199;
          do
          {
            if (!*(_BYTE *)v306)
            {
              v309 = *(unsigned int *)(v306 + 4);
              if ((int)v309 >= 0)
                v310 = (uint64_t *)(*(_QWORD *)(v307 + 272) + 8 * v309);
              else
                v310 = (uint64_t *)(*(_QWORD *)(v307 + 24) + 16 * (v309 & 0x7FFFFFFF) + 8);
              v311 = *v310;
              if (*v310)
              {
                v312 = *(_QWORD *)(v311 + 16);
                *(_QWORD *)(v311 + 16) = v306;
                *(_QWORD *)(v306 + 16) = v312;
                if ((*(_BYTE *)(v306 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v306 + 24) = v311;
                }
                else
                {
                  *(_QWORD *)(v306 + 24) = 0;
                  v310 = (uint64_t *)(v312 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v306 + 16) = v306;
                *(_QWORD *)(v306 + 24) = 0;
              }
              *v310 = v306;
            }
            v306 += 32;
            v308 -= 32;
          }
          while (v308);
        }
        v200 = *(_QWORD *)(v198 + 728);
        if (v200)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v200 + 24))(v200, v163);
        v201 = *v158 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v163 = v201 | *(_QWORD *)v163 & 7;
        *(_QWORD *)(v163 + 8) = v158;
        *(_QWORD *)(v201 + 8) = v163;
        *v158 = *v158 & 7 | v163;
        *((_QWORD *)&v359 + 1) = 0;
        v360 = 0uLL;
        LODWORD(v359) = 0x1000000;
        DWORD1(v359) = v343;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v163, v160, (const llvm::MachineOperand *)&v359);
        *((_QWORD *)&v359 + 1) = 0;
        *(_QWORD *)&v360 = 0;
        DWORD1(v359) = v155;
LABEL_270:
        LODWORD(v359) = 0;
        *((_QWORD *)&v360 + 1) = 0;
LABEL_271:
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v163, v160, (const llvm::MachineOperand *)&v359);
        return 1;
      }
      v187 = *(_QWORD *)(v11 + 48);
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v187, "", 0);
      *(_QWORD *)(*(_QWORD *)(v187 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F982A8;
      v189 = *(_QWORD *)(v187 + 8);
      if (v189)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v189 + 24))(v189);
        if (!IncompleteVirtualRegister)
          return 0;
      }
      else if (!IncompleteVirtualRegister)
      {
        return 0;
      }
      v190 = *(_QWORD *)(v11 + 32);
      v191 = *(_QWORD *)(v190 + 640);
      v192 = *(unint64_t **)(v190 + 648);
      v193 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 8);
      v194 = *(llvm::MachineFunction **)(v191 + 32);
      v195 = *(unsigned __int8 **)(v11 + 72);
      v358 = v195;
      if (v195)
        llvm::MetadataTracking::track((uint64_t)&v358, v195, 2);
      v196 = *((_QWORD *)v194 + 28);
      if (v196)
        *((_QWORD *)v194 + 28) = *(_QWORD *)v196;
      else
        v196 = sub_1C484358C((uint64_t)v194 + 128, 72, 3);
      *(_QWORD *)&v359 = v358;
      if (v358)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v358, v358, (uint64_t)&v359);
        v358 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v196, v194, v193 + 480, (unsigned __int8 **)&v359, 0);
      if ((_QWORD)v359)
        llvm::MetadataTracking::untrack((uint64_t)&v359, (unsigned __int8 *)v359);
      if (v358)
        llvm::MetadataTracking::untrack((uint64_t)&v358, v358);
      v209 = *(_QWORD *)(v191 + 40);
      *(_QWORD *)(v196 + 24) = v209;
      v210 = *(_QWORD *)(v209 + 32);
      v211 = *(unsigned int *)(v196 + 40);
      if ((_DWORD)v211)
      {
        v313 = *(_QWORD *)(v196 + 32);
        v314 = *(_QWORD *)(v210 + 40);
        v315 = 32 * v211;
        do
        {
          if (!*(_BYTE *)v313)
          {
            v316 = *(unsigned int *)(v313 + 4);
            if ((int)v316 >= 0)
              v317 = (uint64_t *)(*(_QWORD *)(v314 + 272) + 8 * v316);
            else
              v317 = (uint64_t *)(*(_QWORD *)(v314 + 24) + 16 * (v316 & 0x7FFFFFFF) + 8);
            v318 = *v317;
            if (*v317)
            {
              v319 = *(_QWORD *)(v318 + 16);
              *(_QWORD *)(v318 + 16) = v313;
              *(_QWORD *)(v313 + 16) = v319;
              if ((*(_BYTE *)(v313 + 3) & 1) != 0)
              {
                *(_QWORD *)(v313 + 24) = v318;
              }
              else
              {
                *(_QWORD *)(v313 + 24) = 0;
                v317 = (uint64_t *)(v319 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v313 + 16) = v313;
              *(_QWORD *)(v313 + 24) = 0;
            }
            *v317 = v313;
          }
          v313 += 32;
          v315 -= 32;
        }
        while (v315);
      }
      v212 = *(_QWORD *)(v210 + 728);
      if (v212)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v212 + 24))(v212, v196);
      v213 = *v192 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v196 = v213 | *(_QWORD *)v196 & 7;
      *(_QWORD *)(v196 + 8) = v192;
      *(_QWORD *)(v213 + 8) = v196;
      *v192 = *v192 & 7 | v196;
      *((_QWORD *)&v359 + 1) = 0;
      v360 = 0uLL;
      LODWORD(v359) = 0x1000000;
      DWORD1(v359) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v196, v194, (const llvm::MachineOperand *)&v359);
      v214 = *(_QWORD *)(v11 + 32);
      v215 = *(_QWORD *)(v214 + 640);
      v216 = *(unint64_t **)(v214 + 648);
      v217 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 8);
      v218 = *(llvm::MachineFunction **)(v215 + 32);
      v219 = *(unsigned __int8 **)(v11 + 72);
      v358 = v219;
      if (v219)
        llvm::MetadataTracking::track((uint64_t)&v358, v219, 2);
      v220 = *((_QWORD *)v218 + 28);
      if (v220)
        *((_QWORD *)v218 + 28) = *(_QWORD *)v220;
      else
        v220 = sub_1C484358C((uint64_t)v218 + 128, 72, 3);
      *(_QWORD *)&v359 = v358;
      if (v358)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v358, v358, (uint64_t)&v359);
        v358 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v220, v218, v217 + 864, (unsigned __int8 **)&v359, 0);
      if ((_QWORD)v359)
        llvm::MetadataTracking::untrack((uint64_t)&v359, (unsigned __int8 *)v359);
      if (v358)
        llvm::MetadataTracking::untrack((uint64_t)&v358, v358);
      v221 = *(_QWORD *)(v215 + 40);
      *(_QWORD *)(v220 + 24) = v221;
      v222 = *(_QWORD *)(v221 + 32);
      v223 = *(unsigned int *)(v220 + 40);
      if ((_DWORD)v223)
      {
        v320 = *(_QWORD *)(v220 + 32);
        v321 = *(_QWORD *)(v222 + 40);
        v322 = 32 * v223;
        do
        {
          if (!*(_BYTE *)v320)
          {
            v323 = *(unsigned int *)(v320 + 4);
            if ((int)v323 >= 0)
              v324 = (uint64_t *)(*(_QWORD *)(v321 + 272) + 8 * v323);
            else
              v324 = (uint64_t *)(*(_QWORD *)(v321 + 24) + 16 * (v323 & 0x7FFFFFFF) + 8);
            v325 = *v324;
            if (*v324)
            {
              v326 = *(_QWORD *)(v325 + 16);
              *(_QWORD *)(v325 + 16) = v320;
              *(_QWORD *)(v320 + 16) = v326;
              if ((*(_BYTE *)(v320 + 3) & 1) != 0)
              {
                *(_QWORD *)(v320 + 24) = v325;
              }
              else
              {
                *(_QWORD *)(v320 + 24) = 0;
                v324 = (uint64_t *)(v326 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v320 + 16) = v320;
              *(_QWORD *)(v320 + 24) = 0;
            }
            *v324 = v320;
          }
          v320 += 32;
          v322 -= 32;
        }
        while (v322);
      }
      v224 = *(_QWORD *)(v222 + 728);
      if (v224)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v224 + 24))(v224, v220);
      v225 = *v216 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v220 = v225 | *(_QWORD *)v220 & 7;
      *(_QWORD *)(v220 + 8) = v216;
      *(_QWORD *)(v225 + 8) = v220;
      *v216 = *v216 & 7 | v220;
      *((_QWORD *)&v359 + 1) = 0;
      v360 = 0uLL;
      LODWORD(v359) = 0x1000000;
      DWORD1(v359) = v343;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v220, v218, (const llvm::MachineOperand *)&v359);
      *((_QWORD *)&v359 + 1) = 0;
      v360 = 0uLL;
      LODWORD(v359) = 0;
      DWORD1(v359) = v155;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v220, v218, (const llvm::MachineOperand *)&v359);
      v176 = 1;
      LODWORD(v359) = 1;
      *((_QWORD *)&v359 + 1) = 0;
      *(_QWORD *)&v360 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v220, v218, (const llvm::MachineOperand *)&v359);
      *((_QWORD *)&v359 + 1) = 0;
      v360 = 0uLL;
      LODWORD(v359) = 0;
      DWORD1(v359) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v220, v218, (const llvm::MachineOperand *)&v359);
      LODWORD(v359) = 1;
      *((_QWORD *)&v359 + 1) = 0;
      *(_QWORD *)&v360 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v220, v218, (const llvm::MachineOperand *)&v359);
      if (v12)
      {
LABEL_337:
        *((_QWORD *)&v359 + 1) = 0;
        v360 = 0uLL;
        LODWORD(v359) = 0;
        DWORD1(v359) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v220, v218, (const llvm::MachineOperand *)&v359);
        LODWORD(v359) = 1;
        *((_QWORD *)&v359 + 1) = 0;
        *(_QWORD *)&v360 = 3;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v220, v218, (const llvm::MachineOperand *)&v359);
        *((_QWORD *)&v359 + 1) = 0;
        v360 = 0uLL;
        LODWORD(v359) = 0;
        DWORD1(v359) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v220, v218, (const llvm::MachineOperand *)&v359);
        LODWORD(v359) = 1;
        *((_QWORD *)&v359 + 1) = 0;
        *(_QWORD *)&v360 = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v220, v218, (const llvm::MachineOperand *)&v359);
        return v176;
      }
      v226 = *(_QWORD *)(v11 + 32);
      v227 = *(_QWORD *)(v226 + 640);
      v228 = *(unint64_t **)(v226 + 648);
      v229 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 8);
      v160 = *(llvm::MachineFunction **)(v227 + 32);
      v230 = *(unsigned __int8 **)(v11 + 72);
      v358 = v230;
      if (v230)
        llvm::MetadataTracking::track((uint64_t)&v358, v230, 2);
      v231 = v229 + 480;
      v163 = *((_QWORD *)v160 + 28);
      if (v163)
        *((_QWORD *)v160 + 28) = *(_QWORD *)v163;
      else
        v163 = sub_1C484358C((uint64_t)v160 + 128, 72, 3);
      *(_QWORD *)&v359 = v358;
      if (v358)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v358, v358, (uint64_t)&v359);
        v358 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v163, v160, v231, (unsigned __int8 **)&v359, 0);
      if ((_QWORD)v359)
        llvm::MetadataTracking::untrack((uint64_t)&v359, (unsigned __int8 *)v359);
      if (v358)
        llvm::MetadataTracking::untrack((uint64_t)&v358, v358);
      v269 = v343 + 1;
      v290 = *(_QWORD *)(v227 + 40);
      *(_QWORD *)(v163 + 24) = v290;
      v271 = *(_QWORD *)(v290 + 32);
      v291 = *(unsigned int *)(v163 + 40);
      if ((_DWORD)v291)
      {
        v292 = *(_QWORD *)(v163 + 32);
        v293 = *(_QWORD *)(v271 + 40);
        v294 = 32 * v291;
        do
        {
          if (!*(_BYTE *)v292)
          {
            v295 = *(unsigned int *)(v292 + 4);
            if ((int)v295 >= 0)
              v296 = (uint64_t *)(*(_QWORD *)(v293 + 272) + 8 * v295);
            else
              v296 = (uint64_t *)(*(_QWORD *)(v293 + 24) + 16 * (v295 & 0x7FFFFFFF) + 8);
            v297 = *v296;
            if (*v296)
            {
              v298 = *(_QWORD *)(v297 + 16);
              *(_QWORD *)(v297 + 16) = v292;
              *(_QWORD *)(v292 + 16) = v298;
              if ((*(_BYTE *)(v292 + 3) & 1) != 0)
              {
                *(_QWORD *)(v292 + 24) = v297;
              }
              else
              {
                *(_QWORD *)(v292 + 24) = 0;
                v296 = (uint64_t *)(v298 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v292 + 16) = v292;
              *(_QWORD *)(v292 + 24) = 0;
            }
            *v296 = v292;
          }
          v292 += 32;
          v294 -= 32;
        }
        while (v294);
      }
LABEL_396:
      v273 = *(_QWORD *)(v271 + 728);
      if (v273)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v273 + 24))(v273, v163);
      v274 = *v228 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v163 = v274 | *(_QWORD *)v163 & 7;
      *(_QWORD *)(v163 + 8) = v228;
      *(_QWORD *)(v274 + 8) = v163;
      *v228 = *v228 & 7 | v163;
      *((_QWORD *)&v359 + 1) = 0;
      v360 = 0uLL;
      LODWORD(v359) = 0x1000000;
      DWORD1(v359) = v269;
      goto LABEL_271;
    }
    a5 = v17;
    a3 = v343;
    if (!v18)
      return 0;
  }
  v350 = a6;
  v345 = a4;
  v351 = v18;
  v19 = (uint64_t **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v20 = (unsigned __int8 **)(v19 + 4);
  if (v19 + 4 == (uint64_t **)a2)
  {
    v144 = v350;
    if (!v350)
    {
      v145 = v12;
      v147 = v18;
      if (!a4)
      {
LABEL_353:
        v238 = *(_QWORD *)(v11 + 48);
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v238, "", 0);
        *(_QWORD *)(*(_QWORD *)(v238 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F982A8;
        v239 = *(_QWORD *)(v238 + 8);
        if (v239)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239);
          if (!IncompleteVirtualRegister)
            return 0;
        }
        else if (!IncompleteVirtualRegister)
        {
          return 0;
        }
        v240 = (_QWORD *)v11;
        v241 = a3;
        v242 = v240[4];
        v243 = *(_QWORD *)(v242 + 640);
        v244 = *(unint64_t **)(v242 + 648);
        v245 = *(_QWORD *)(v240[12] + 8);
        v246 = *(llvm::MachineFunction **)(v243 + 32);
        v342 = v240;
        v247 = (unsigned __int8 *)v240[9];
        v358 = v247;
        if (v247)
          llvm::MetadataTracking::track((uint64_t)&v358, v247, 2);
        v248 = *((_QWORD *)v246 + 28);
        if (v248)
          *((_QWORD *)v246 + 28) = *(_QWORD *)v248;
        else
          v248 = sub_1C484358C((uint64_t)v246 + 128, 72, 3);
        *(_QWORD *)&v359 = v358;
        if (v358)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v358, v358, (uint64_t)&v359);
          v358 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v248, v246, v245 + 480, (unsigned __int8 **)&v359, 0);
        if ((_QWORD)v359)
          llvm::MetadataTracking::untrack((uint64_t)&v359, (unsigned __int8 *)v359);
        if (v358)
          llvm::MetadataTracking::untrack((uint64_t)&v358, v358);
        v249 = *(_QWORD *)(v243 + 40);
        *(_QWORD *)(v248 + 24) = v249;
        v250 = *(_QWORD *)(v249 + 32);
        v251 = *(unsigned int *)(v248 + 40);
        if ((_DWORD)v251)
        {
          v275 = *(_QWORD *)(v248 + 32);
          v276 = *(_QWORD *)(v250 + 40);
          v277 = 32 * v251;
          do
          {
            if (!*(_BYTE *)v275)
            {
              v278 = *(unsigned int *)(v275 + 4);
              if ((int)v278 >= 0)
                v279 = (uint64_t *)(*(_QWORD *)(v276 + 272) + 8 * v278);
              else
                v279 = (uint64_t *)(*(_QWORD *)(v276 + 24) + 16 * (v278 & 0x7FFFFFFF) + 8);
              v280 = *v279;
              if (*v279)
              {
                v281 = *(_QWORD *)(v280 + 16);
                *(_QWORD *)(v280 + 16) = v275;
                *(_QWORD *)(v275 + 16) = v281;
                if ((*(_BYTE *)(v275 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v275 + 24) = v280;
                }
                else
                {
                  *(_QWORD *)(v275 + 24) = 0;
                  v279 = (uint64_t *)(v281 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v275 + 16) = v275;
                *(_QWORD *)(v275 + 24) = 0;
              }
              *v279 = v275;
            }
            v275 += 32;
            v277 -= 32;
          }
          while (v277);
        }
        v252 = *(_QWORD *)(v250 + 728);
        if (v252)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v252 + 24))(v252, v248);
        v253 = *v244 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v248 = v253 | *(_QWORD *)v248 & 7;
        *(_QWORD *)(v248 + 8) = v244;
        *(_QWORD *)(v253 + 8) = v248;
        *v244 = *v244 & 7 | v248;
        *((_QWORD *)&v359 + 1) = 0;
        v360 = 0uLL;
        LODWORD(v359) = 0x1000000;
        DWORD1(v359) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v248, v246, (const llvm::MachineOperand *)&v359);
        v254 = v342[4];
        v255 = *(_QWORD *)(v254 + 640);
        v256 = *(unint64_t **)(v254 + 648);
        v257 = *(_QWORD *)(v342[12] + 8);
        v218 = *(llvm::MachineFunction **)(v255 + 32);
        v258 = (unsigned __int8 *)v342[9];
        v358 = v258;
        if (v258)
          llvm::MetadataTracking::track((uint64_t)&v358, v258, 2);
        v220 = *((_QWORD *)v218 + 28);
        if (v220)
          *((_QWORD *)v218 + 28) = *(_QWORD *)v220;
        else
          v220 = sub_1C484358C((uint64_t)v218 + 128, 72, 3);
        *(_QWORD *)&v359 = v358;
        if (v358)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v358, v358, (uint64_t)&v359);
          v358 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v220, v218, v257 + 864, (unsigned __int8 **)&v359, 0);
        if ((_QWORD)v359)
          llvm::MetadataTracking::untrack((uint64_t)&v359, (unsigned __int8 *)v359);
        if (v358)
          llvm::MetadataTracking::untrack((uint64_t)&v358, v358);
        v259 = *(_QWORD *)(v255 + 40);
        *(_QWORD *)(v220 + 24) = v259;
        v260 = *(_QWORD *)(v259 + 32);
        v261 = *(unsigned int *)(v220 + 40);
        if ((_DWORD)v261)
        {
          v282 = *(_QWORD *)(v220 + 32);
          v283 = *(_QWORD *)(v260 + 40);
          v284 = 32 * v261;
          do
          {
            if (!*(_BYTE *)v282)
            {
              v285 = *(unsigned int *)(v282 + 4);
              if ((int)v285 >= 0)
                v286 = (uint64_t *)(*(_QWORD *)(v283 + 272) + 8 * v285);
              else
                v286 = (uint64_t *)(*(_QWORD *)(v283 + 24) + 16 * (v285 & 0x7FFFFFFF) + 8);
              v287 = *v286;
              if (*v286)
              {
                v288 = *(_QWORD *)(v287 + 16);
                *(_QWORD *)(v287 + 16) = v282;
                *(_QWORD *)(v282 + 16) = v288;
                if ((*(_BYTE *)(v282 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v282 + 24) = v287;
                }
                else
                {
                  *(_QWORD *)(v282 + 24) = 0;
                  v286 = (uint64_t *)(v288 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v282 + 16) = v282;
                *(_QWORD *)(v282 + 24) = 0;
              }
              *v286 = v282;
            }
            v282 += 32;
            v284 -= 32;
          }
          while (v284);
        }
        v262 = *(_QWORD *)(v260 + 728);
        if (v262)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v262 + 24))(v262, v220);
        v263 = *v256 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v220 = v263 | *(_QWORD *)v220 & 7;
        *(_QWORD *)(v220 + 8) = v256;
        *(_QWORD *)(v263 + 8) = v220;
        *v256 = *v256 & 7 | v220;
        *((_QWORD *)&v359 + 1) = 0;
        v360 = 0uLL;
        LODWORD(v359) = 0x1000000;
        DWORD1(v359) = v241;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v220, v218, (const llvm::MachineOperand *)&v359);
        *((_QWORD *)&v359 + 1) = 0;
        v360 = 0uLL;
        LODWORD(v359) = 0;
        DWORD1(v359) = v147;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v220, v218, (const llvm::MachineOperand *)&v359);
        v176 = 1;
        LODWORD(v359) = 1;
        *((_QWORD *)&v359 + 1) = 0;
        *(_QWORD *)&v360 = 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v220, v218, (const llvm::MachineOperand *)&v359);
        *((_QWORD *)&v359 + 1) = 0;
        v360 = 0uLL;
        LODWORD(v359) = 0;
        DWORD1(v359) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v220, v218, (const llvm::MachineOperand *)&v359);
        LODWORD(v359) = 1;
        *((_QWORD *)&v359 + 1) = 0;
        *(_QWORD *)&v360 = 2;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v220, v218, (const llvm::MachineOperand *)&v359);
        if (v145)
          goto LABEL_337;
        v264 = v342[4];
        v265 = *(_QWORD *)(v264 + 640);
        v228 = *(unint64_t **)(v264 + 648);
        v266 = *(_QWORD *)(v342[12] + 8);
        v160 = *(llvm::MachineFunction **)(v265 + 32);
        v267 = (unsigned __int8 *)v342[9];
        v358 = v267;
        if (v267)
          llvm::MetadataTracking::track((uint64_t)&v358, v267, 2);
        v268 = v266 + 480;
        v163 = *((_QWORD *)v160 + 28);
        if (v163)
          *((_QWORD *)v160 + 28) = *(_QWORD *)v163;
        else
          v163 = sub_1C484358C((uint64_t)v160 + 128, 72, 3);
        *(_QWORD *)&v359 = v358;
        if (v358)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v358, v358, (uint64_t)&v359);
          v358 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v163, v160, v268, (unsigned __int8 **)&v359, 0);
        if ((_QWORD)v359)
          llvm::MetadataTracking::untrack((uint64_t)&v359, (unsigned __int8 *)v359);
        if (v358)
          llvm::MetadataTracking::untrack((uint64_t)&v358, v358);
        v269 = v241 + 1;
        v270 = *(_QWORD *)(v265 + 40);
        *(_QWORD *)(v163 + 24) = v270;
        v271 = *(_QWORD *)(v270 + 32);
        v272 = *(unsigned int *)(v163 + 40);
        if ((_DWORD)v272)
        {
          v299 = *(_QWORD *)(v163 + 32);
          v300 = *(_QWORD *)(v271 + 40);
          v301 = 32 * v272;
          do
          {
            if (!*(_BYTE *)v299)
            {
              v302 = *(unsigned int *)(v299 + 4);
              if ((int)v302 >= 0)
                v303 = (uint64_t *)(*(_QWORD *)(v300 + 272) + 8 * v302);
              else
                v303 = (uint64_t *)(*(_QWORD *)(v300 + 24) + 16 * (v302 & 0x7FFFFFFF) + 8);
              v304 = *v303;
              if (*v303)
              {
                v305 = *(_QWORD *)(v304 + 16);
                *(_QWORD *)(v304 + 16) = v299;
                *(_QWORD *)(v299 + 16) = v305;
                if ((*(_BYTE *)(v299 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v299 + 24) = v304;
                }
                else
                {
                  *(_QWORD *)(v299 + 24) = 0;
                  v303 = (uint64_t *)(v305 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v299 + 16) = v299;
                *(_QWORD *)(v299 + 24) = 0;
              }
              *v303 = v299;
            }
            v299 += 32;
            v301 -= 32;
          }
          while (v301);
        }
        goto LABEL_396;
      }
LABEL_253:
      v164 = a3;
      v165 = *(_QWORD *)(v11 + 32);
      v166 = *(_QWORD *)(v165 + 640);
      v167 = *(unint64_t **)(v165 + 648);
      v168 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 8);
      v160 = *(llvm::MachineFunction **)(v166 + 32);
      v169 = *(unsigned __int8 **)(v11 + 72);
      v358 = v169;
      if (v169)
        llvm::MetadataTracking::track((uint64_t)&v358, v169, 2);
      v170 = v168 + 912;
      v163 = *((_QWORD *)v160 + 28);
      if (v163)
        *((_QWORD *)v160 + 28) = *(_QWORD *)v163;
      else
        v163 = sub_1C484358C((uint64_t)v160 + 128, 72, 3);
      *(_QWORD *)&v359 = v358;
      if (v358)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v358, v358, (uint64_t)&v359);
        v358 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v163, v160, v170, (unsigned __int8 **)&v359, 0);
      if ((_QWORD)v359)
        llvm::MetadataTracking::untrack((uint64_t)&v359, (unsigned __int8 *)v359);
      if (v358)
        llvm::MetadataTracking::untrack((uint64_t)&v358, v358);
      v171 = *(_QWORD *)(v166 + 40);
      *(_QWORD *)(v163 + 24) = v171;
      v172 = *(_QWORD *)(v171 + 32);
      v173 = *(unsigned int *)(v163 + 40);
      if ((_DWORD)v173)
      {
        v202 = *(_QWORD *)(v163 + 32);
        v203 = *(_QWORD *)(v172 + 40);
        v204 = 32 * v173;
        do
        {
          if (!*(_BYTE *)v202)
          {
            v205 = *(unsigned int *)(v202 + 4);
            if ((int)v205 >= 0)
              v206 = (uint64_t *)(*(_QWORD *)(v203 + 272) + 8 * v205);
            else
              v206 = (uint64_t *)(*(_QWORD *)(v203 + 24) + 16 * (v205 & 0x7FFFFFFF) + 8);
            v207 = *v206;
            if (*v206)
            {
              v208 = *(_QWORD *)(v207 + 16);
              *(_QWORD *)(v207 + 16) = v202;
              *(_QWORD *)(v202 + 16) = v208;
              if ((*(_BYTE *)(v202 + 3) & 1) != 0)
              {
                *(_QWORD *)(v202 + 24) = v207;
              }
              else
              {
                *(_QWORD *)(v202 + 24) = 0;
                v206 = (uint64_t *)(v208 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v202 + 16) = v202;
              *(_QWORD *)(v202 + 24) = 0;
            }
            *v206 = v202;
          }
          v202 += 32;
          v204 -= 32;
        }
        while (v204);
      }
      v174 = *(_QWORD *)(v172 + 728);
      if (v174)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v174 + 24))(v174, v163);
      v175 = *v167 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v163 = v175 | *(_QWORD *)v163 & 7;
      *(_QWORD *)(v163 + 8) = v167;
      *(_QWORD *)(v175 + 8) = v163;
      *v167 = *v167 & 7 | v163;
      *((_QWORD *)&v359 + 1) = 0;
      v360 = 0uLL;
      LODWORD(v359) = 0x1000000;
      DWORD1(v359) = v164;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v163, v160, (const llvm::MachineOperand *)&v359);
      *((_QWORD *)&v359 + 1) = 0;
      *(_QWORD *)&v360 = 0;
      DWORD1(v359) = v147;
      goto LABEL_270;
    }
    v145 = v12;
    LOWORD(v21) = 0;
    v146 = a4;
    goto LABEL_235;
  }
  v357 = v15;
  v355 = v16;
  v348 = a5;
  v344 = a3;
  v21 = 0;
  v335 = v12;
  v22 = v12 == 0;
  v23 = **v19;
  if (v22)
    v24 = 3356;
  else
    v24 = 3677;
  v25 = 3680;
  if (v22)
    v25 = 3357;
  v339 = v25;
  v340 = v24;
  if (v22)
    v26 = 4679;
  else
    v26 = 4720;
  v27 = 2885;
  if (v22)
    v27 = 2779;
  v337 = v27;
  v338 = v26;
  v28 = 2882;
  if (v22)
    v28 = 2778;
  v336 = v28;
  while (1)
  {
    v29 = *v20;
    v30 = *(unsigned __int8 *)(v23 + 8);
    if (v23 && v30 == 16)
    {
      v31 = (unsigned int *)(v29 + 24);
      if (*((_DWORD *)v29 + 8) >= 0x41u)
        v31 = *(unsigned int **)v31;
      v32 = *v31;
      if (*v31)
        v21 += *((_QWORD *)llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)(v11 + 88), (llvm::StructType *)v23)
               + v32
               + 2);
      v23 = *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * v32);
      goto LABEL_185;
    }
    if (v23 && v30 == 15)
    {
      v33 = *(uint64_t **)(v23 + 16);
LABEL_38:
      v23 = *v33;
      goto LABEL_39;
    }
    if (v23 && v30 == 17 || v23 && (v30 & 0xFE) == 0x12)
    {
      v33 = (uint64_t *)(v23 + 24);
      goto LABEL_38;
    }
LABEL_39:
    if (!v29 || v29[16] != 16)
      break;
    v34 = v21;
    v35 = (_QWORD **)(v29 + 24);
    v36 = *((_DWORD *)v29 + 8);
    if (v36 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v29 + 24)) != v36)
      {
LABEL_43:
        v37 = *(_QWORD *)(v11 + 88);
        sub_1C4768AD0(v37, v23);
        v39 = v38;
        v41 = v40 == 1;
        llvm::DataLayout::getAlignment(v37, v23);
        v44 = v43;
        v45 = *((_DWORD *)v29 + 8);
        if (v45 > 0x40)
          v46 = **v35;
        else
          v46 = (uint64_t)((_QWORD)*v35 << -(char)v45) >> -(char)v45;
        if (v41)
        v21 = v46 * (((1 << v44) + ((unint64_t)(v39 + 7) >> 3) - 1) & -(1 << v44)) + v34;
        goto LABEL_185;
      }
    }
    else if (*v35)
    {
      goto LABEL_43;
    }
    v21 = v34;
LABEL_185:
    v20 += 4;
    if (v20 == (unsigned __int8 **)a2)
    {
      v146 = v345;
      v144 = v350;
      if (!v350)
      {
        v145 = v335;
        a3 = v344;
        if (v21)
        {
          v177 = *(_QWORD *)(v11 + 48);
          v147 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v177, "", 0);
          *(_QWORD *)(*(_QWORD *)(v177 + 24) + 16 * (v147 & 0x7FFFFFFF)) = &off_1E7F982A8;
          v178 = *(_QWORD *)(v177 + 8);
          if (v178)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v178 + 24))(v178);
            if (!v147)
              return 0;
          }
          else if (!v147)
          {
            return 0;
          }
          if (v348)
          {
            if ((v21 & 1) != 0)
              return 0;
            v21 >>= 1;
          }
          v179 = v344;
          v354 = v21;
          v180 = *(_QWORD *)(v11 + 32);
          v181 = *(_QWORD *)(v180 + 640);
          v182 = *(unint64_t **)(v180 + 648);
          v183 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 8);
          v184 = *(llvm::MachineFunction **)(v181 + 32);
          v185 = *(unsigned __int8 **)(v11 + 72);
          v358 = v185;
          if (v185)
            llvm::MetadataTracking::track((uint64_t)&v358, v185, 2);
          v186 = *((_QWORD *)v184 + 28);
          if (v186)
            *((_QWORD *)v184 + 28) = *(_QWORD *)v186;
          else
            v186 = sub_1C484358C((uint64_t)v184 + 128, 72, 3);
          *(_QWORD *)&v359 = v358;
          if (v358)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v358, v358, (uint64_t)&v359);
            v358 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v186, v184, v183 + 133392, (unsigned __int8 **)&v359, 0);
          if ((_QWORD)v359)
            llvm::MetadataTracking::untrack((uint64_t)&v359, (unsigned __int8 *)v359);
          v232 = v354;
          if (v358)
            llvm::MetadataTracking::untrack((uint64_t)&v358, v358);
          v233 = *(_QWORD *)(v181 + 40);
          *(_QWORD *)(v186 + 24) = v233;
          v234 = *(_QWORD *)(v233 + 32);
          v235 = *(unsigned int *)(v186 + 40);
          if ((_DWORD)v235)
          {
            v327 = *(_QWORD *)(v186 + 32);
            v328 = *(_QWORD *)(v234 + 40);
            v329 = 32 * v235;
            do
            {
              if (!*(_BYTE *)v327)
              {
                v330 = *(unsigned int *)(v327 + 4);
                if ((int)v330 >= 0)
                  v331 = (uint64_t *)(*(_QWORD *)(v328 + 272) + 8 * v330);
                else
                  v331 = (uint64_t *)(*(_QWORD *)(v328 + 24) + 16 * (v330 & 0x7FFFFFFF) + 8);
                v332 = *v331;
                if (*v331)
                {
                  v333 = *(_QWORD *)(v332 + 16);
                  *(_QWORD *)(v332 + 16) = v327;
                  *(_QWORD *)(v327 + 16) = v333;
                  if ((*(_BYTE *)(v327 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v327 + 24) = v332;
                  }
                  else
                  {
                    *(_QWORD *)(v327 + 24) = 0;
                    v331 = (uint64_t *)(v333 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v327 + 16) = v327;
                  *(_QWORD *)(v327 + 24) = 0;
                }
                *v331 = v327;
                v179 = v344;
                v232 = v354;
              }
              v327 += 32;
              v329 -= 32;
            }
            while (v329);
          }
          v236 = *(_QWORD *)(v234 + 728);
          if (v236)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v236 + 24))(v236, v186);
          v237 = *v182 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v186 = v237 | *(_QWORD *)v186 & 7;
          *(_QWORD *)(v186 + 8) = v182;
          *(_QWORD *)(v237 + 8) = v186;
          *v182 = *v182 & 7 | v186;
          *((_QWORD *)&v359 + 1) = 0;
          v360 = 0uLL;
          LODWORD(v359) = 0x1000000;
          DWORD1(v359) = v147;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v186, v184, (const llvm::MachineOperand *)&v359);
          LODWORD(v359) = 1;
          *((_QWORD *)&v359 + 1) = 0;
          *(_QWORD *)&v360 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v186, v184, (const llvm::MachineOperand *)&v359);
          *((_QWORD *)&v359 + 1) = 0;
          v360 = 0uLL;
          LODWORD(v359) = 0;
          DWORD1(v359) = v351;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v186, v184, (const llvm::MachineOperand *)&v359);
          LODWORD(v359) = 1;
          *((_QWORD *)&v359 + 1) = 0;
          *(_QWORD *)&v360 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v186, v184, (const llvm::MachineOperand *)&v359);
          LODWORD(v359) = 1;
          *((_QWORD *)&v359 + 1) = 0;
          *(_QWORD *)&v360 = v232 | 0x100000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v186, v184, (const llvm::MachineOperand *)&v359);
          LODWORD(v359) = 1;
          *((_QWORD *)&v359 + 1) = 0;
          *(_QWORD *)&v360 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v186, v184, (const llvm::MachineOperand *)&v359);
          v359 = 0u;
          v360 = 0u;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v186, v184, (const llvm::MachineOperand *)&v359);
          a3 = v179;
          if (!v345)
            goto LABEL_353;
          goto LABEL_253;
        }
        goto LABEL_236;
      }
      v145 = v335;
      a3 = v344;
LABEL_235:
      *v144 = (unsigned __int16)(*v144 + v21);
LABEL_236:
      v147 = v351;
      if (!v146)
        goto LABEL_353;
      goto LABEL_253;
    }
  }
  v352 = v21;
  v47 = *(_QWORD *)(v11 + 88);
  sub_1C4768AD0(v47, v23);
  v49 = v48;
  v51 = v50 == 1;
  llvm::DataLayout::getAlignment(v47, v23);
  v54 = v53;
  if (v51)
  v55 = 0;
  v56 = ((1 << v54) + ((unint64_t)(v49 + 7) >> 3) - 1) & -(1 << v54);
  if (!v29)
  {
    v57 = v348;
    goto LABEL_58;
  }
  v57 = v348;
  if (v29[16] < 0x1Cu)
    goto LABEL_58;
  v58 = *(_QWORD *)(a2 + 40);
  if (*((_QWORD *)v29 + 5) != v58)
  {
    v55 = 0;
    goto LABEL_58;
  }
  v55 = 0;
  while (2)
  {
    v66 = v29[16];
    if ((v66 - 67) > 1)
    {
      if (v66 != 41 || !v357)
        goto LABEL_81;
      v69 = *((_DWORD *)v29 + 5);
      if ((v69 & 0x40000000) != 0)
        v70 = (unsigned __int8 *)*((_QWORD *)v29 - 1);
      else
        v70 = &v29[-32 * (v69 & 0x7FFFFFF)];
      v78 = *((_QWORD *)v70 + 4);
      if (v78)
        v79 = *(_BYTE *)(v78 + 16) == 16;
      else
        v79 = 0;
      if (!v79)
        goto LABEL_58;
      v80 = (_QWORD *)(v78 + 24);
      if (*(_DWORD *)(v78 + 32) >= 0x41u)
        v80 = (_QWORD *)*v80;
      if ((v69 & 0x40000000) != 0)
        v77 = (unsigned __int8 *)*((_QWORD *)v29 - 1);
      else
        v77 = &v29[-32 * (v69 & 0x7FFFFFF)];
      v55 += *v80 * v56;
      goto LABEL_112;
    }
    v67 = *((_DWORD *)v29 + 5);
    if ((v67 & 0x40000000) == 0)
    {
      v68 = *(unsigned __int8 **)&v29[-32 * (v67 & 0x7FFFFFF)];
      if (*(_DWORD *)(*(_QWORD *)v68 + 8) <= 0xFFFu)
        goto LABEL_81;
LABEL_79:
      v29 = v68;
      if (v68[16] < 0x1Cu)
        goto LABEL_58;
LABEL_113:
      if (*((_QWORD *)v29 + 5) != v58)
        goto LABEL_58;
      continue;
    }
    break;
  }
  v68 = (unsigned __int8 *)**((_QWORD **)v29 - 1);
  if (*(_DWORD *)(*(_QWORD *)v68 + 8) >= 0x1000u)
    goto LABEL_79;
LABEL_81:
  if (v66 == 45 || v66 == 53)
  {
    v71 = *((_DWORD *)v29 + 5);
    if ((v71 & 0x40000000) != 0)
      v72 = (unsigned __int8 *)*((_QWORD *)v29 - 1);
    else
      v72 = &v29[-32 * (v71 & 0x7FFFFFF)];
    v73 = *((_QWORD *)v72 + 4);
    if (v73)
      v74 = *(_BYTE *)(v73 + 16) == 16;
    else
      v74 = 0;
    if (!v74)
      goto LABEL_58;
    v75 = (_QWORD *)(v73 + 24);
    v76 = *(_DWORD *)(v73 + 32);
    if (v66 == 53)
    {
      if (v76 >= 0x41)
        v75 = (_QWORD *)*v75;
      v56 <<= *v75;
      if ((v71 & 0x40000000) != 0)
        goto LABEL_95;
LABEL_99:
      v77 = &v29[-32 * (v71 & 0x7FFFFFF)];
    }
    else
    {
      if (v76 >= 0x41)
        v75 = (_QWORD *)*v75;
      v56 *= *v75;
      if ((v71 & 0x40000000) == 0)
        goto LABEL_99;
LABEL_95:
      v77 = (unsigned __int8 *)*((_QWORD *)v29 - 1);
    }
LABEL_112:
    v29 = *(unsigned __int8 **)v77;
    if (*(unsigned __int8 *)(*(_QWORD *)v77 + 16) <= 0x1Bu)
      goto LABEL_58;
    goto LABEL_113;
  }
  if (v66 == 67)
  {
    v121 = *((_DWORD *)v29 + 5);
    if ((v121 & 0x40000000) != 0)
      v122 = (unsigned __int8 **)*((_QWORD *)v29 - 1);
    else
      v122 = (unsigned __int8 **)&v29[-32 * (v121 & 0x7FFFFFF)];
    v29 = *v122;
  }
LABEL_58:
  if (!v57)
  {
LABEL_61:
    v59 = sub_1C47A836C(v11, v29);
    if (!v59)
      return 0;
    v347 = v59;
    v346 = sub_1C6126FBC(v11, v59);
    v60 = *(_QWORD *)(v11 + 48);
    v61 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v60, "", 0);
    *(_QWORD *)(*(_QWORD *)(v60 + 24) + 16 * (v61 & 0x7FFFFFFF)) = &off_1E7F982A8;
    v62 = *(_QWORD *)(v60 + 8);
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 24))(v62);
    v63 = v352;
    if (!v61)
      return 0;
    v356 = v55 + v355;
    if (v357 && v352 != 0)
    {
      if (v56 <= 1 && !v356)
      {
        v64 = 0;
        v65 = v357;
        goto LABEL_123;
      }
      if (!v57 || (v352 & 1) != 0)
        v64 = v356 + v352;
      else
        v64 = v356 + (v352 >> 1);
      v63 = 0;
    }
    else
    {
      v64 = v356;
    }
    v65 = v357;
    if (v350 && v357 && v64 != 0)
    {
      v81 = *v350 + v64;
      v64 = 0;
      *v350 = v81;
    }
LABEL_123:
    v353 = v63;
    v349 = v61;
    if (v56 == 1)
    {
      if (v65 && v64 == 0)
      {
        v82 = *(_QWORD *)(v11 + 32);
        v83 = *(_QWORD *)(v82 + 640);
        v84 = *(unint64_t **)(v82 + 648);
        v85 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 8);
        v86 = *(llvm::MachineFunction **)(v83 + 32);
        v87 = v11;
        v88 = *(unsigned __int8 **)(v11 + 72);
        v358 = v88;
        if (v88)
          llvm::MetadataTracking::track((uint64_t)&v358, v88, 2);
        v89 = *((_QWORD *)v86 + 28);
        if (v89)
          *((_QWORD *)v86 + 28) = *(_QWORD *)v89;
        else
          v89 = sub_1C484358C((uint64_t)v86 + 128, 72, 3);
        *(_QWORD *)&v359 = v358;
        if (v358)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v358, v358, (uint64_t)&v359);
          v358 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v89, v86, v85 + 912, (unsigned __int8 **)&v359, 0);
        if ((_QWORD)v359)
          llvm::MetadataTracking::untrack((uint64_t)&v359, (unsigned __int8 *)v359);
        if (v358)
          llvm::MetadataTracking::untrack((uint64_t)&v358, v358);
        v111 = *(_QWORD *)(v83 + 40);
        *(_QWORD *)(v89 + 24) = v111;
        v112 = *(_QWORD *)(v111 + 32);
        v113 = *(unsigned int *)(v89 + 40);
        if ((_DWORD)v113)
        {
          v130 = *(_QWORD *)(v89 + 32);
          v131 = *(_QWORD *)(v112 + 40);
          v132 = 32 * v113;
          do
          {
            if (!*(_BYTE *)v130)
            {
              v133 = *(unsigned int *)(v130 + 4);
              if ((int)v133 >= 0)
                v134 = (uint64_t *)(*(_QWORD *)(v131 + 272) + 8 * v133);
              else
                v134 = (uint64_t *)(*(_QWORD *)(v131 + 24) + 16 * (v133 & 0x7FFFFFFF) + 8);
              v135 = *v134;
              if (*v134)
              {
                v136 = *(_QWORD *)(v135 + 16);
                *(_QWORD *)(v135 + 16) = v130;
                *(_QWORD *)(v130 + 16) = v136;
                if ((*(_BYTE *)(v130 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v130 + 24) = v135;
                }
                else
                {
                  *(_QWORD *)(v130 + 24) = 0;
                  v134 = (uint64_t *)(v136 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v130 + 16) = v130;
                *(_QWORD *)(v130 + 24) = 0;
              }
              *v134 = v130;
            }
            v130 += 32;
            v132 -= 32;
          }
          while (v132);
        }
        v114 = *(_QWORD *)(v112 + 728);
        if (v114)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v114 + 24))(v114, v89);
        v115 = *v84 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v89 = v115 | *(_QWORD *)v89 & 7;
        *(_QWORD *)(v89 + 8) = v84;
        *(_QWORD *)(v115 + 8) = v89;
        *v84 = *v84 & 7 | v89;
        *((_QWORD *)&v359 + 1) = 0;
        v360 = 0uLL;
        LODWORD(v359) = 0x1000000;
        DWORD1(v359) = v349;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v86, (const llvm::MachineOperand *)&v359);
        *((_QWORD *)&v359 + 1) = 0;
        v360 = 0uLL;
        LODWORD(v359) = v346 << 8;
        DWORD1(v359) = v347;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v89, v86, (const llvm::MachineOperand *)&v359);
        v355 = 0;
        v357 = 0;
        v351 = v349;
        v11 = v87;
        goto LABEL_184;
      }
      v355 = v64;
      if (v65)
        v100 = v337;
      else
        v100 = v336;
      v101 = *(_QWORD *)(v11 + 32);
      v102 = *(_QWORD *)(v101 + 640);
      v103 = *(unint64_t **)(v101 + 648);
      v104 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 8);
      v97 = *(llvm::MachineFunction **)(v102 + 32);
      v105 = *(unsigned __int8 **)(v11 + 72);
      v358 = v105;
      if (v105)
        llvm::MetadataTracking::track((uint64_t)&v358, v105, 2);
      v99 = *((_QWORD *)v97 + 28);
      if (v99)
        *((_QWORD *)v97 + 28) = *(_QWORD *)v99;
      else
        v99 = sub_1C484358C((uint64_t)v97 + 128, 72, 3);
      *(_QWORD *)&v359 = v358;
      if (v358)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v358, v358, (uint64_t)&v359);
        v358 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v99, v97, v104 + 48 * v100, (unsigned __int8 **)&v359, 0);
      if ((_QWORD)v359)
        llvm::MetadataTracking::untrack((uint64_t)&v359, (unsigned __int8 *)v359);
      if (v358)
        llvm::MetadataTracking::untrack((uint64_t)&v358, v358);
      v116 = *(_QWORD *)(v102 + 40);
      *(_QWORD *)(v99 + 24) = v116;
      v117 = *(_QWORD *)(v116 + 32);
      v118 = *(unsigned int *)(v99 + 40);
      if ((_DWORD)v118)
      {
        v137 = *(_QWORD *)(v99 + 32);
        v138 = *(_QWORD *)(v117 + 40);
        v139 = 32 * v118;
        do
        {
          if (!*(_BYTE *)v137)
          {
            v140 = *(unsigned int *)(v137 + 4);
            if ((int)v140 >= 0)
              v141 = (uint64_t *)(*(_QWORD *)(v138 + 272) + 8 * v140);
            else
              v141 = (uint64_t *)(*(_QWORD *)(v138 + 24) + 16 * (v140 & 0x7FFFFFFF) + 8);
            v142 = *v141;
            if (*v141)
            {
              v143 = *(_QWORD *)(v142 + 16);
              *(_QWORD *)(v142 + 16) = v137;
              *(_QWORD *)(v137 + 16) = v143;
              if ((*(_BYTE *)(v137 + 3) & 1) != 0)
              {
                *(_QWORD *)(v137 + 24) = v142;
              }
              else
              {
                *(_QWORD *)(v137 + 24) = 0;
                v141 = (uint64_t *)(v143 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v137 + 16) = v137;
              *(_QWORD *)(v137 + 24) = 0;
            }
            *v141 = v137;
          }
          v137 += 32;
          v139 -= 32;
        }
        while (v139);
      }
      v119 = *(_QWORD *)(v117 + 728);
      if (v119)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v119 + 24))(v119, v99);
      v120 = *v103 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v99 = v120 | *(_QWORD *)v99 & 7;
      *(_QWORD *)(v99 + 8) = v103;
      *(_QWORD *)(v120 + 8) = v99;
      *v103 = *v103 & 7 | v99;
      *((_QWORD *)&v359 + 1) = 0;
      v360 = 0uLL;
      LODWORD(v359) = 0x1000000;
      DWORD1(v359) = v349;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v99, v97, (const llvm::MachineOperand *)&v359);
      LODWORD(v359) = 1;
      *((_QWORD *)&v359 + 1) = 0;
      *(_QWORD *)&v360 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v99, v97, (const llvm::MachineOperand *)&v359);
      *((_QWORD *)&v359 + 1) = 0;
      v360 = 0uLL;
      LODWORD(v359) = v346 << 8;
      DWORD1(v359) = v347;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v99, v97, (const llvm::MachineOperand *)&v359);
      LODWORD(v359) = 1;
      *((_QWORD *)&v359 + 1) = 0;
      *(_QWORD *)&v360 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v99, v97, (const llvm::MachineOperand *)&v359);
    }
    else
    {
      v334 = v65 && v64 == 0;
      v355 = v64;
      v90 = v339;
      if (!v64)
        v90 = v338;
      if (v65)
        v91 = v90;
      else
        v91 = v340;
      v92 = *(_QWORD *)(v11 + 32);
      v93 = v11;
      v94 = *(_QWORD *)(v92 + 640);
      v95 = *(unint64_t **)(v92 + 648);
      v96 = *(_QWORD *)(*(_QWORD *)(v93 + 96) + 8);
      v97 = *(llvm::MachineFunction **)(v94 + 32);
      v341 = v93;
      v98 = *(unsigned __int8 **)(v93 + 72);
      v358 = v98;
      if (v98)
        llvm::MetadataTracking::track((uint64_t)&v358, v98, 2);
      v99 = *((_QWORD *)v97 + 28);
      if (v99)
        *((_QWORD *)v97 + 28) = *(_QWORD *)v99;
      else
        v99 = sub_1C484358C((uint64_t)v97 + 128, 72, 3);
      *(_QWORD *)&v359 = v358;
      if (v358)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v358, v358, (uint64_t)&v359);
        v358 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v99, v97, v96 + 48 * v91, (unsigned __int8 **)&v359, 0);
      if ((_QWORD)v359)
        llvm::MetadataTracking::untrack((uint64_t)&v359, (unsigned __int8 *)v359);
      if (v358)
        llvm::MetadataTracking::untrack((uint64_t)&v358, v358);
      v106 = *(_QWORD *)(v94 + 40);
      *(_QWORD *)(v99 + 24) = v106;
      v107 = *(_QWORD *)(v106 + 32);
      v108 = *(unsigned int *)(v99 + 40);
      v11 = v341;
      if ((_DWORD)v108)
      {
        v123 = *(_QWORD *)(v99 + 32);
        v124 = *(_QWORD *)(v107 + 40);
        v125 = 32 * v108;
        do
        {
          if (!*(_BYTE *)v123)
          {
            v126 = *(unsigned int *)(v123 + 4);
            if ((int)v126 >= 0)
              v127 = (uint64_t *)(*(_QWORD *)(v124 + 272) + 8 * v126);
            else
              v127 = (uint64_t *)(*(_QWORD *)(v124 + 24) + 16 * (v126 & 0x7FFFFFFF) + 8);
            v128 = *v127;
            if (*v127)
            {
              v129 = *(_QWORD *)(v128 + 16);
              *(_QWORD *)(v128 + 16) = v123;
              *(_QWORD *)(v123 + 16) = v129;
              if ((*(_BYTE *)(v123 + 3) & 1) != 0)
              {
                *(_QWORD *)(v123 + 24) = v128;
              }
              else
              {
                *(_QWORD *)(v123 + 24) = 0;
                v127 = (uint64_t *)(v129 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v123 + 16) = v123;
              *(_QWORD *)(v123 + 24) = 0;
            }
            *v127 = v123;
          }
          v123 += 32;
          v125 -= 32;
        }
        while (v125);
      }
      v109 = *(_QWORD *)(v107 + 728);
      if (v109)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v109 + 24))(v109, v99);
      v110 = *v95 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v99 = v110 | *(_QWORD *)v99 & 7;
      *(_QWORD *)(v99 + 8) = v95;
      *(_QWORD *)(v110 + 8) = v99;
      *v95 = *v95 & 7 | v99;
      *((_QWORD *)&v359 + 1) = 0;
      v360 = 0uLL;
      LODWORD(v359) = 0x1000000;
      DWORD1(v359) = v349;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v99, v97, (const llvm::MachineOperand *)&v359);
      LODWORD(v359) = 1;
      *((_QWORD *)&v359 + 1) = 0;
      *(_QWORD *)&v360 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v99, v97, (const llvm::MachineOperand *)&v359);
      *((_QWORD *)&v359 + 1) = 0;
      v360 = 0uLL;
      LODWORD(v359) = v346 << 8;
      DWORD1(v359) = v347;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v99, v97, (const llvm::MachineOperand *)&v359);
      LODWORD(v359) = 1;
      *((_QWORD *)&v359 + 1) = 0;
      *(_QWORD *)&v360 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v99, v97, (const llvm::MachineOperand *)&v359);
      LODWORD(v359) = 1;
      *((_QWORD *)&v359 + 1) = 0;
      *(_QWORD *)&v360 = (unsigned __int16)v56 | 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v99, v97, (const llvm::MachineOperand *)&v359);
      if (v334)
        goto LABEL_183;
    }
    if (v357)
    {
      LODWORD(v359) = 1;
      *((_QWORD *)&v359 + 1) = 0;
      *(_QWORD *)&v360 = (unsigned __int16)v355 | 0x100000000;
    }
    else
    {
      *((_QWORD *)&v359 + 1) = 0;
      LODWORD(v359) = 0;
      DWORD1(v359) = v351;
      v360 = 0uLL;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v99, v97, (const llvm::MachineOperand *)&v359);
      LODWORD(v359) = 1;
      *((_QWORD *)&v359 + 1) = 0;
      *(_QWORD *)&v360 = 0;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v99, v97, (const llvm::MachineOperand *)&v359);
LABEL_183:
    LODWORD(v359) = 1;
    *((_QWORD *)&v359 + 1) = 0;
    *(_QWORD *)&v360 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v99, v97, (const llvm::MachineOperand *)&v359);
    v359 = 0u;
    v360 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v99, v97, (const llvm::MachineOperand *)&v359);
    v357 = 0;
    v351 = v349;
LABEL_184:
    v21 = v353;
    goto LABEL_185;
  }
  if (((v56 | v55) & 1) == 0)
  {
    v56 >>= 1;
    v55 >>= 1;
    goto LABEL_61;
  }
  return 0;
}

uint64_t sub_1C4799A28(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  _QWORD **v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  const char *v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _BOOL4 v42;
  _BOOL4 v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  const char *v50;
  char v51;
  char v52;
  uint64_t v53;
  int IncompleteVirtualRegister;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  llvm::MachineFunction *v63;
  llvm::MachineFunction *v64;
  unint64_t v65;
  uint8x8_t v66;
  unsigned int v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  llvm::MachineFunction *v78;
  llvm::MachineFunction *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  _QWORD *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  llvm::MachineFunction *v99;
  llvm::MachineFunction *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  llvm::MachineFunction *v141;
  llvm::MachineFunction *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  int v161;
  int v162;
  _QWORD *v163;
  int v164;
  int v165;
  _BOOL4 v166;
  uint64_t v167;
  unsigned int v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  llvm::MachineFunction *v175;
  llvm::MachineInstr *v176;
  int v177;
  int v178;
  __int128 v179;
  __int128 v180;

  v5 = a2;
  v6 = a1;
  v170 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 256) + 280);
  v178 = 0;
  v177 = 0;
  v7 = 0;
  if (sub_1C478664C(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), &v177, &v178, a5)
    || (result = sub_1C47A836C(v6, *(unsigned __int8 **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF))),
        (v7 = result) != 0))
  {
    v9 = v178;
    v10 = (uint64_t **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
    v11 = (uint64_t *)(v10 + 4);
    v163 = (_QWORD *)v6;
    if (v10 + 4 != (uint64_t **)v5)
    {
      v173 = v5;
      v12 = **v10;
      if (v170)
        v13 = 2764;
      else
        v13 = 2832;
      v14 = 2848;
      if (v170)
        v14 = 2771;
      v158 = v14;
      v159 = v13;
      if (v170)
        v15 = 3346;
      else
        v15 = 3547;
      v16 = 3551;
      if (v170)
        v16 = 3348;
      v161 = v16;
      v162 = v15;
      while (1)
      {
        v17 = *v11;
        v18 = *(unsigned __int8 *)(v12 + 8);
        if (v12 && v18 == 16)
        {
          v19 = (unsigned int *)(v17 + 24);
          if (*(_DWORD *)(v17 + 32) >= 0x41u)
            v19 = *(unsigned int **)v19;
          v20 = *v19;
          if (*v19)
            v9 += *((_QWORD *)llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)(v6 + 88), (llvm::StructType *)v12)+ v20+ 2);
          v12 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * v20);
          goto LABEL_142;
        }
        if (v12 && v18 == 15)
          break;
        if (v12 && v18 == 17 || v12 && (v18 & 0xFE) == 0x12)
        {
          v21 = (uint64_t *)(v12 + 24);
          goto LABEL_30;
        }
LABEL_31:
        v22 = *(unsigned __int8 *)(v17 + 16);
        if (v22 != 16 || v17 == 0)
        {
          if (v22 <= 0x1B)
            v24 = 0;
          else
            v24 = *v11;
          v25 = v22 - 67 > 1 || v24 == 0;
          if (v25
            || ((v26 = *(_DWORD *)(v24 + 20), (v26 & 0x40000000) != 0)
              ? (v27 = *(_QWORD *)(v24 - 8))
              : (v27 = v24 - 32 * (v26 & 0x7FFFFFF)),
                v40 = *(_DWORD *)(**(_QWORD **)v27 + 8),
                v40 < 0x1000))
          {
            v166 = 0;
            v43 = 0;
          }
          else
          {
            v41 = v40 & 0xFFFFFF00;
            v42 = v22 == 68;
            v43 = v41 == 4096;
            if (v41 != 4096)
              v42 = 0;
            v166 = v42;
            if ((v26 & 0x40000000) != 0)
              v44 = *(uint64_t **)(v24 - 8);
            else
              v44 = (uint64_t *)(v24 - 32 * (v26 & 0x7FFFFFF));
            v17 = *v44;
          }
          v45 = *(_QWORD *)(v6 + 88);
          sub_1C4768AD0(v45, v12);
          v47 = v46;
          v49 = v48 == 1;
          llvm::DataLayout::getAlignment(v45, v12);
          v52 = v51;
          if (v49)
          result = sub_1C47A836C(v6, (unsigned __int8 *)v17);
          if (!(_DWORD)result)
            return result;
          v169 = result;
          v174 = v7;
          v53 = *(_QWORD *)(v6 + 48);
          IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v53, "", 0);
          *(_QWORD *)(*(_QWORD *)(v53 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F98468;
          v55 = *(_QWORD *)(v53 + 8);
          if (v55)
            (*(void (**)(uint64_t))(*(_QWORD *)v55 + 24))(v55);
          if (!IncompleteVirtualRegister)
            return 0;
          v56 = ((1 << v52) + ((unint64_t)(v47 + 7) >> 3) - 1) & -(1 << v52);
          if (v43)
          {
            if (v56 >> 16)
              return 0;
            v164 = IncompleteVirtualRegister;
            v171 = v9;
            if (v174)
              v57 = v162;
            else
              v57 = v161;
            v58 = *(_QWORD *)(v6 + 32);
            v59 = v6;
            v60 = *(_QWORD *)(v58 + 640);
            v61 = *(unint64_t **)(v58 + 648);
            v62 = *(_QWORD *)(*(_QWORD *)(v59 + 96) + 8);
            v63 = *(llvm::MachineFunction **)(v60 + 32);
            v64 = *(llvm::MachineFunction **)(v59 + 72);
            v175 = v64;
            if (v64)
              llvm::MetadataTracking::track((uint64_t)&v175, (unsigned __int8 *)v64, 2);
            v65 = *((_QWORD *)v63 + 28);
            if (v65)
              *((_QWORD *)v63 + 28) = *(_QWORD *)v65;
            else
              v65 = sub_1C484358C((uint64_t)v63 + 128, 72, 3);
            *(_QWORD *)&v179 = v175;
            if (v175)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v175, (unsigned __int8 *)v175, (uint64_t)&v179);
              v175 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v65, v63, v62 + 48 * v57, (unsigned __int8 **)&v179, 0);
            if ((_QWORD)v179)
              llvm::MetadataTracking::untrack((uint64_t)&v179, (unsigned __int8 *)v179);
            v9 = v171;
            v5 = v173;
            if (v175)
              llvm::MetadataTracking::untrack((uint64_t)&v175, (unsigned __int8 *)v175);
            v81 = *(_QWORD *)(v60 + 40);
            *(_QWORD *)(v65 + 24) = v81;
            v82 = *(_QWORD *)(v81 + 32);
            v83 = *(unsigned int *)(v65 + 40);
            v6 = (uint64_t)v163;
            if ((_DWORD)v83)
            {
              v110 = *(_QWORD *)(v65 + 32);
              v111 = *(_QWORD *)(v82 + 40);
              v112 = 32 * v83;
              do
              {
                if (!*(_BYTE *)v110)
                {
                  v113 = *(unsigned int *)(v110 + 4);
                  if ((int)v113 >= 0)
                    v114 = (uint64_t *)(*(_QWORD *)(v111 + 272) + 8 * v113);
                  else
                    v114 = (uint64_t *)(*(_QWORD *)(v111 + 24) + 16 * (v113 & 0x7FFFFFFF) + 8);
                  v115 = *v114;
                  if (*v114)
                  {
                    v116 = *(_QWORD *)(v115 + 16);
                    *(_QWORD *)(v115 + 16) = v110;
                    *(_QWORD *)(v110 + 16) = v116;
                    if ((*(_BYTE *)(v110 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v110 + 24) = v115;
                    }
                    else
                    {
                      *(_QWORD *)(v110 + 24) = 0;
                      v114 = (uint64_t *)(v116 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v110 + 16) = v110;
                    *(_QWORD *)(v110 + 24) = 0;
                  }
                  *v114 = v110;
                }
                v110 += 32;
                v112 -= 32;
              }
              while (v112);
            }
            v84 = *(_QWORD *)(v82 + 728);
            if (v84)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v84 + 24))(v84, v65);
            v85 = *v61 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v65 = v85 | *(_QWORD *)v65 & 7;
            *(_QWORD *)(v65 + 8) = v61;
            *(_QWORD *)(v85 + 8) = v65;
            *v61 = *v61 & 7 | v65;
            *((_QWORD *)&v179 + 1) = 0;
            v180 = 0uLL;
            LODWORD(v179) = 0x1000000;
            DWORD1(v179) = v164;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v63, (const llvm::MachineOperand *)&v179);
            LODWORD(v179) = 1;
            *((_QWORD *)&v179 + 1) = 0;
            *(_QWORD *)&v180 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v63, (const llvm::MachineOperand *)&v179);
            v175 = v63;
            v176 = (llvm::MachineInstr *)v65;
            if ((sub_1C47ADDC8((uint64_t)v163, (_BYTE *)v17, 0, &v175, 0) & 1) == 0)
            {
              *((_QWORD *)&v179 + 1) = 0;
              LODWORD(v179) = 0;
              DWORD1(v179) = v169;
              v180 = 0uLL;
              llvm::MachineInstr::addOperand(v176, v175, (const llvm::MachineOperand *)&v179);
            }
            v86 = 8;
            if (!v166)
              v86 = 0;
            LODWORD(v179) = 1;
            *((_QWORD *)&v179 + 1) = 0;
            *(_QWORD *)&v180 = v86;
            llvm::MachineInstr::addOperand(v176, v175, (const llvm::MachineOperand *)&v179);
            LODWORD(v179) = 1;
            *((_QWORD *)&v179 + 1) = 0;
            *(_QWORD *)&v180 = v56 | 0x100000000;
            llvm::MachineInstr::addOperand(v176, v175, (const llvm::MachineOperand *)&v179);
            if (v174)
            {
              v109 = sub_1C6127088((uint64_t)v163, v174);
              *((_QWORD *)&v179 + 1) = 0;
              v180 = 0uLL;
              LODWORD(v179) = v109 << 8;
              DWORD1(v179) = v174;
              llvm::MachineInstr::addOperand(v176, v175, (const llvm::MachineOperand *)&v179);
              LODWORD(v179) = 1;
              *((_QWORD *)&v179 + 1) = 0;
              *(_QWORD *)&v180 = 0;
            }
            else
            {
              LODWORD(v179) = 5;
              *((_QWORD *)&v179 + 1) = 0;
              LODWORD(v180) = v177;
            }
            llvm::MachineInstr::addOperand(v176, v175, (const llvm::MachineOperand *)&v179);
            LODWORD(v179) = 1;
            *((_QWORD *)&v179 + 1) = 0;
            *(_QWORD *)&v180 = 0;
            llvm::MachineInstr::addOperand(v176, v175, (const llvm::MachineOperand *)&v179);
            v179 = 0u;
            v180 = 0u;
            llvm::MachineInstr::addOperand(v176, v175, (const llvm::MachineOperand *)&v179);
            v7 = v164;
            goto LABEL_142;
          }
          v66 = (uint8x8_t)vcnt_s8((int8x8_t)v56);
          v66.i16[0] = vaddlv_u8(v66);
          if (v66.u32[0] != 1)
            return 0;
          v67 = __clz(v56);
          v68 = 31 - v67;
          v69 = v67 == 31 || v170 == 0;
          if (v69 && v68 < 5)
          {
            v168 = 31 - v67;
            v172 = v9;
            v165 = v169;
          }
          else
          {
            v70 = *(_QWORD *)(v6 + 48);
            v71 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v70, "", 0);
            *(_QWORD *)(*(_QWORD *)(v70 + 24) + 16 * (v71 & 0x7FFFFFFF)) = &off_1E7F98468;
            v72 = *(_QWORD *)(v70 + 8);
            if (v72)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v72 + 24))(v72);
              if (!v71)
                return 0;
            }
            else if (!v71)
            {
              return 0;
            }
            v167 = v68;
            v165 = v71;
            v73 = IncompleteVirtualRegister;
            v74 = *(_QWORD *)(v6 + 32);
            v75 = *(_QWORD *)(v74 + 640);
            v76 = *(unint64_t **)(v74 + 648);
            v77 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8);
            v78 = *(llvm::MachineFunction **)(v75 + 32);
            v79 = *(llvm::MachineFunction **)(v6 + 72);
            v175 = v79;
            if (v79)
              llvm::MetadataTracking::track((uint64_t)&v175, (unsigned __int8 *)v79, 2);
            v80 = *((_QWORD *)v78 + 28);
            if (v80)
              *((_QWORD *)v78 + 28) = *(_QWORD *)v80;
            else
              v80 = sub_1C484358C((uint64_t)v78 + 128, 72, 3);
            *(_QWORD *)&v179 = v175;
            if (v175)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v175, (unsigned __int8 *)v175, (uint64_t)&v179);
              v175 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v80, v78, v77 + 594000, (unsigned __int8 **)&v179, 0);
            if ((_QWORD)v179)
              llvm::MetadataTracking::untrack((uint64_t)&v179, (unsigned __int8 *)v179);
            IncompleteVirtualRegister = v73;
            if (v175)
              llvm::MetadataTracking::untrack((uint64_t)&v175, (unsigned __int8 *)v175);
            v87 = *(_QWORD *)(v75 + 40);
            *(_QWORD *)(v80 + 24) = v87;
            v88 = *(_QWORD *)(v87 + 32);
            v89 = *(unsigned int *)(v80 + 40);
            if ((_DWORD)v89)
            {
              v124 = *(_QWORD *)(v80 + 32);
              v125 = *(_QWORD *)(v88 + 40);
              v126 = 32 * v89;
              do
              {
                if (!*(_BYTE *)v124)
                {
                  v127 = *(unsigned int *)(v124 + 4);
                  if ((int)v127 >= 0)
                    v128 = (uint64_t *)(*(_QWORD *)(v125 + 272) + 8 * v127);
                  else
                    v128 = (uint64_t *)(*(_QWORD *)(v125 + 24) + 16 * (v127 & 0x7FFFFFFF) + 8);
                  v129 = *v128;
                  if (*v128)
                  {
                    v130 = *(_QWORD *)(v129 + 16);
                    *(_QWORD *)(v129 + 16) = v124;
                    *(_QWORD *)(v124 + 16) = v130;
                    if ((*(_BYTE *)(v124 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v124 + 24) = v129;
                    }
                    else
                    {
                      *(_QWORD *)(v124 + 24) = 0;
                      v128 = (uint64_t *)(v130 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v124 + 16) = v124;
                    *(_QWORD *)(v124 + 24) = 0;
                  }
                  *v128 = v124;
                }
                v124 += 32;
                v126 -= 32;
              }
              while (v126);
            }
            v90 = *(_QWORD *)(v88 + 728);
            if (v90)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v90 + 24))(v90, v80);
            v172 = v9;
            v91 = *v76 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v80 = v91 | *(_QWORD *)v80 & 7;
            *(_QWORD *)(v80 + 8) = v76;
            *(_QWORD *)(v91 + 8) = v80;
            *v76 = *v76 & 7 | v80;
            *((_QWORD *)&v179 + 1) = 0;
            v180 = 0uLL;
            LODWORD(v179) = 0x1000000;
            DWORD1(v179) = v165;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v78, (const llvm::MachineOperand *)&v179);
            LODWORD(v179) = 1;
            *((_QWORD *)&v179 + 1) = 0;
            *(_QWORD *)&v180 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v78, (const llvm::MachineOperand *)&v179);
            LODWORD(v179) = 1;
            *((_QWORD *)&v179 + 1) = 0;
            *(_QWORD *)&v180 = 0x100000000;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v78, (const llvm::MachineOperand *)&v179);
            v92 = sub_1C6127088(v6, v169);
            *((_QWORD *)&v179 + 1) = 0;
            v180 = 0uLL;
            LODWORD(v179) = v92 << 8;
            DWORD1(v179) = v169;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v78, (const llvm::MachineOperand *)&v179);
            LODWORD(v179) = 1;
            *((_QWORD *)&v179 + 1) = 0;
            *(_QWORD *)&v180 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v78, (const llvm::MachineOperand *)&v179);
            LODWORD(v179) = 1;
            *((_QWORD *)&v179 + 1) = 0;
            *(_QWORD *)&v180 = v167 | 0x100000000;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v78, (const llvm::MachineOperand *)&v179);
            LODWORD(v179) = 1;
            *((_QWORD *)&v179 + 1) = 0;
            *(_QWORD *)&v180 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v78, (const llvm::MachineOperand *)&v179);
            LODWORD(v179) = 1;
            *((_QWORD *)&v179 + 1) = 0;
            *(_QWORD *)&v180 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v78, (const llvm::MachineOperand *)&v179);
            v179 = 0u;
            v180 = 0u;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v80, v78, (const llvm::MachineOperand *)&v179);
            v168 = 0;
          }
          v93 = (_QWORD *)v6;
          if (v174)
            v94 = v159;
          else
            v94 = v158;
          v95 = v93[4];
          v96 = *(_QWORD *)(v95 + 640);
          v97 = *(unint64_t **)(v95 + 648);
          v98 = *(_QWORD *)(v93[12] + 8);
          v99 = *(llvm::MachineFunction **)(v96 + 32);
          v100 = (llvm::MachineFunction *)v93[9];
          v175 = v100;
          if (v100)
            llvm::MetadataTracking::track((uint64_t)&v175, (unsigned __int8 *)v100, 2);
          v101 = *((_QWORD *)v99 + 28);
          if (v101)
            *((_QWORD *)v99 + 28) = *(_QWORD *)v101;
          else
            v101 = sub_1C484358C((uint64_t)v99 + 128, 72, 3);
          *(_QWORD *)&v179 = v175;
          if (v175)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v175, (unsigned __int8 *)v175, (uint64_t)&v179);
            v175 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v101, v99, v98 + 48 * v94, (unsigned __int8 **)&v179, 0);
          if ((_QWORD)v179)
            llvm::MetadataTracking::untrack((uint64_t)&v179, (unsigned __int8 *)v179);
          v6 = (uint64_t)v163;
          if (v175)
            llvm::MetadataTracking::untrack((uint64_t)&v175, (unsigned __int8 *)v175);
          v102 = *(_QWORD *)(v96 + 40);
          *(_QWORD *)(v101 + 24) = v102;
          v103 = *(_QWORD *)(v102 + 32);
          v104 = *(unsigned int *)(v101 + 40);
          if ((_DWORD)v104)
          {
            v117 = *(_QWORD *)(v101 + 32);
            v118 = *(_QWORD *)(v103 + 40);
            v119 = 32 * v104;
            do
            {
              if (!*(_BYTE *)v117)
              {
                v120 = *(unsigned int *)(v117 + 4);
                if ((int)v120 >= 0)
                  v121 = (uint64_t *)(*(_QWORD *)(v118 + 272) + 8 * v120);
                else
                  v121 = (uint64_t *)(*(_QWORD *)(v118 + 24) + 16 * (v120 & 0x7FFFFFFF) + 8);
                v122 = *v121;
                if (*v121)
                {
                  v123 = *(_QWORD *)(v122 + 16);
                  *(_QWORD *)(v122 + 16) = v117;
                  *(_QWORD *)(v117 + 16) = v123;
                  if ((*(_BYTE *)(v117 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v117 + 24) = v122;
                  }
                  else
                  {
                    *(_QWORD *)(v117 + 24) = 0;
                    v121 = (uint64_t *)(v123 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v117 + 16) = v117;
                  *(_QWORD *)(v117 + 24) = 0;
                }
                *v121 = v117;
              }
              v117 += 32;
              v119 -= 32;
            }
            while (v119);
          }
          v105 = *(_QWORD *)(v103 + 728);
          if (v105)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v105 + 24))(v105, v101);
          v106 = *v97 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v101 = v106 | *(_QWORD *)v101 & 7;
          *(_QWORD *)(v101 + 8) = v97;
          *(_QWORD *)(v106 + 8) = v101;
          *v97 = *v97 & 7 | v101;
          *((_QWORD *)&v179 + 1) = 0;
          v180 = 0uLL;
          LODWORD(v179) = 0x1000000;
          DWORD1(v179) = IncompleteVirtualRegister;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v101, v99, (const llvm::MachineOperand *)&v179);
          LODWORD(v179) = 1;
          *((_QWORD *)&v179 + 1) = 0;
          *(_QWORD *)&v180 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v101, v99, (const llvm::MachineOperand *)&v179);
          if (v174)
          {
            v107 = sub_1C6127088((uint64_t)v163, v174);
            *((_QWORD *)&v179 + 1) = 0;
            v180 = 0uLL;
            LODWORD(v179) = v107 << 8;
            DWORD1(v179) = v174;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v101, v99, (const llvm::MachineOperand *)&v179);
            LODWORD(v179) = 1;
            *((_QWORD *)&v179 + 1) = 0;
            *(_QWORD *)&v180 = 0;
          }
          else
          {
            LODWORD(v179) = 5;
            *((_QWORD *)&v179 + 1) = 0;
            LODWORD(v180) = v177;
          }
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v101, v99, (const llvm::MachineOperand *)&v179);
          v108 = sub_1C6127088((uint64_t)v163, v165);
          *((_QWORD *)&v179 + 1) = 0;
          v180 = 0uLL;
          LODWORD(v179) = v108 << 8;
          DWORD1(v179) = v165;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v101, v99, (const llvm::MachineOperand *)&v179);
          LODWORD(v179) = 1;
          *((_QWORD *)&v179 + 1) = 0;
          *(_QWORD *)&v180 = v168 << 6;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v101, v99, (const llvm::MachineOperand *)&v179);
          LODWORD(v179) = 1;
          *((_QWORD *)&v179 + 1) = 0;
          *(_QWORD *)&v180 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v101, v99, (const llvm::MachineOperand *)&v179);
          v179 = 0u;
          v180 = 0u;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v101, v99, (const llvm::MachineOperand *)&v179);
          v7 = IncompleteVirtualRegister;
          v9 = v172;
          goto LABEL_141;
        }
        v28 = (_QWORD **)(v17 + 24);
        v29 = *(_DWORD *)(v17 + 32);
        if (v29 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v17 + 24)) != v29)
          {
LABEL_49:
            v30 = *(_QWORD *)(v6 + 88);
            sub_1C4768AD0(v30, v12);
            v32 = v31;
            v34 = v33 == 1;
            llvm::DataLayout::getAlignment(v30, v12);
            v37 = v36;
            v38 = *(_DWORD *)(v17 + 32);
            if (v38 > 0x40)
              v39 = **v28;
            else
              v39 = (uint64_t)((_QWORD)*v28 << -(char)v38) >> -(char)v38;
            if (v34)
            v9 += v39 * (((1 << v37) + ((unint64_t)(v32 + 7) >> 3) - 1) & -(1 << v37));
          }
        }
        else if (*v28)
        {
          goto LABEL_49;
        }
LABEL_141:
        v5 = v173;
LABEL_142:
        v11 += 4;
        if (v11 == (uint64_t *)v5)
          goto LABEL_187;
      }
      v21 = *(uint64_t **)(v12 + 16);
LABEL_30:
      v12 = *v21;
      goto LABEL_31;
    }
LABEL_187:
    if (v7
      || (result = sub_1C47A836C(v6, *(unsigned __int8 **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF))),
          (v7 = result) != 0))
    {
      if (v9)
      {
        v131 = *(_QWORD *)(v6 + 48);
        v132 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v131, "", 0);
        *(_QWORD *)(*(_QWORD *)(v131 + 24) + 16 * (v132 & 0x7FFFFFFF)) = &off_1E7F98468;
        v133 = *(_QWORD *)(v131 + 8);
        if (v133)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v133 + 24))(v133);
          if (!v132)
            return 0;
        }
        else if (!v132)
        {
          return 0;
        }
        v135 = v7;
        v136 = v163[4];
        v137 = *(_QWORD *)(v136 + 640);
        v138 = *(unint64_t **)(v136 + 648);
        v139 = *(_QWORD *)(v163[12] + 8);
        if (v170)
          v140 = 132768;
        else
          v140 = 136128;
        v141 = *(llvm::MachineFunction **)(v137 + 32);
        v142 = (llvm::MachineFunction *)v163[9];
        v175 = v142;
        if (v142)
          llvm::MetadataTracking::track((uint64_t)&v175, (unsigned __int8 *)v142, 2);
        v143 = v139 + v140;
        v144 = *((_QWORD *)v141 + 28);
        if (v144)
          *((_QWORD *)v141 + 28) = *(_QWORD *)v144;
        else
          v144 = sub_1C484358C((uint64_t)v141 + 128, 72, 3);
        *(_QWORD *)&v179 = v175;
        if (v175)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v175, (unsigned __int8 *)v175, (uint64_t)&v179);
          v175 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v144, v141, v143, (unsigned __int8 **)&v179, 0);
        if ((_QWORD)v179)
          llvm::MetadataTracking::untrack((uint64_t)&v179, (unsigned __int8 *)v179);
        if (v175)
          llvm::MetadataTracking::untrack((uint64_t)&v175, (unsigned __int8 *)v175);
        v145 = *(_QWORD *)(v137 + 40);
        *(_QWORD *)(v144 + 24) = v145;
        v146 = *(_QWORD *)(v145 + 32);
        v147 = *(unsigned int *)(v144 + 40);
        if ((_DWORD)v147)
        {
          v151 = *(_QWORD *)(v144 + 32);
          v152 = *(_QWORD *)(v146 + 40);
          v153 = 32 * v147;
          do
          {
            if (!*(_BYTE *)v151)
            {
              v154 = *(unsigned int *)(v151 + 4);
              if ((int)v154 >= 0)
                v155 = (uint64_t *)(*(_QWORD *)(v152 + 272) + 8 * v154);
              else
                v155 = (uint64_t *)(*(_QWORD *)(v152 + 24) + 16 * (v154 & 0x7FFFFFFF) + 8);
              v156 = *v155;
              if (*v155)
              {
                v157 = *(_QWORD *)(v156 + 16);
                *(_QWORD *)(v156 + 16) = v151;
                *(_QWORD *)(v151 + 16) = v157;
                if ((*(_BYTE *)(v151 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v151 + 24) = v156;
                }
                else
                {
                  *(_QWORD *)(v151 + 24) = 0;
                  v155 = (uint64_t *)(v157 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v151 + 16) = v151;
                *(_QWORD *)(v151 + 24) = 0;
              }
              *v155 = v151;
            }
            v151 += 32;
            v153 -= 32;
          }
          while (v153);
        }
        v148 = *(_QWORD *)(v146 + 728);
        if (v148)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v148 + 24))(v148, v144);
        v149 = *v138 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v144 = v149 | *(_QWORD *)v144 & 7;
        *(_QWORD *)(v144 + 8) = v138;
        *(_QWORD *)(v149 + 8) = v144;
        *v138 = *v138 & 7 | v144;
        *((_QWORD *)&v179 + 1) = 0;
        v180 = 0uLL;
        LODWORD(v179) = 0x1000000;
        DWORD1(v179) = v132;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v141, (const llvm::MachineOperand *)&v179);
        LODWORD(v179) = 1;
        *((_QWORD *)&v179 + 1) = 0;
        *(_QWORD *)&v180 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v141, (const llvm::MachineOperand *)&v179);
        v134 = (uint64_t)v163;
        v150 = sub_1C6127088((uint64_t)v163, v135);
        *((_QWORD *)&v179 + 1) = 0;
        v180 = 0uLL;
        LODWORD(v179) = v150 << 8;
        DWORD1(v179) = v135;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v141, (const llvm::MachineOperand *)&v179);
        LODWORD(v179) = 1;
        *((_QWORD *)&v179 + 1) = 0;
        *(_QWORD *)&v180 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v141, (const llvm::MachineOperand *)&v179);
        LODWORD(v179) = 1;
        *((_QWORD *)&v179 + 1) = 0;
        *(_QWORD *)&v180 = v9;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v141, (const llvm::MachineOperand *)&v179);
        LODWORD(v179) = 1;
        *((_QWORD *)&v179 + 1) = 0;
        *(_QWORD *)&v180 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v141, (const llvm::MachineOperand *)&v179);
        v179 = 0u;
        v180 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v141, (const llvm::MachineOperand *)&v179);
      }
      else
      {
        v134 = v6;
        v132 = v7;
      }
      return sub_1C61279C0(v134, v132, a3);
    }
  }
  return result;
}

uint64_t sub_1C479AAC0(_QWORD *a1, uint64_t a2)
{
  uint64_t IncompleteVirtualRegister;
  signed int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  llvm::MachineFunction *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  llvm::MachineFunction *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  llvm::MachineFunction *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  llvm::MachineFunction *v69;
  unsigned __int8 *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  llvm::MachineFunction *v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  __int128 v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  llvm::MachineFunction *v99;
  unsigned __int8 *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  int v152;
  unsigned __int8 *v153;
  __int128 v154;
  __int128 v155;

  if (!*(_BYTE *)(a1[32] + 280))
    return 0;
  v152 = 0;
  IncompleteVirtualRegister = 0;
  if (!sub_1C4786904((uint64_t)a1, *(_QWORD *)a2, &v152))
    return IncompleteVirtualRegister;
  v5 = v152;
  if (v152 == 8)
    return 0;
  if (v152 == 16)
  {
    v6 = *(unsigned __int8 **)(a2 - 32);
    if (v6[16] - 11 < 2)
      return 0;
LABEL_6:
    v7 = v152 / 8 - 1;
    goto LABEL_7;
  }
  IncompleteVirtualRegister = 0;
  if (v152 > 512 || (v152 & 0x1F) != 0)
    return IncompleteVirtualRegister;
  v6 = *(unsigned __int8 **)(a2 - 32);
  if (v6[16] - 11 < 2)
    return 0;
  if (v152 <= 31)
    goto LABEL_6;
  v7 = (v152 >> 5) + 1;
LABEL_7:
  v8 = (char *)&unk_1E7F949F8 + 16 * v7;
  v9 = *(_DWORD *)v8;
  v10 = *((_QWORD *)v8 + 1);
  v11 = a1[6];
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v11, "", 0);
  *(_QWORD *)(*(_QWORD *)(v11 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F98AB8;
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    if (!(_DWORD)IncompleteVirtualRegister)
      return IncompleteVirtualRegister;
  }
  else if (!(_DWORD)IncompleteVirtualRegister)
  {
    return IncompleteVirtualRegister;
  }
  v13 = sub_1C47A836C((uint64_t)a1, (unsigned __int8 *)a2);
  if (!v13)
    return 0;
  v14 = v13;
  v151 = v9;
  v15 = a1[6];
  if (v5 > 32
    || v5 == 16
    || (v16 = v13,
        (_UNKNOWN ***)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 16 * (v13 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) != &off_1E7F984F0))
  {
    v16 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1[6], "", 0);
    *(_QWORD *)(*(_QWORD *)(v15 + 24) + 16 * (v16 & 0x7FFFFFFF)) = v10 & 0xFFFFFFFFFFFFFFFBLL;
    v17 = *(_QWORD *)(v15 + 8);
    if (v17)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
      if (!v16)
        return 0;
    }
    else if (!v16)
    {
      return 0;
    }
  }
  v18 = sub_1C47A836C((uint64_t)a1, v6);
  if (!v18)
    return 0;
  v149 = v18;
  v19 = a1[6];
  v20 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v19, "", 0);
  *(_QWORD *)(*(_QWORD *)(v19 + 24) + 16 * (v20 & 0x7FFFFFFF)) = &off_1E7F984F0;
  v21 = *(_QWORD *)(v19 + 8);
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    if (!v20)
      return 0;
  }
  else if (!v20)
  {
    return 0;
  }
  v22 = a1[6];
  v23 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v22, "", 0);
  *(_QWORD *)(*(_QWORD *)(v22 + 24) + 16 * (v23 & 0x7FFFFFFF)) = &off_1E7F984F0;
  v24 = *(_QWORD *)(v22 + 8);
  if (v24)
  {
    v136 = v23;
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
    v23 = v136;
    if (v136)
      goto LABEL_20;
    return 0;
  }
  if (!v23)
    return 0;
LABEL_20:
  v147 = v20;
  v148 = v16;
  v145 = v14;
  v25 = a1[4];
  v26 = *(_QWORD *)(v25 + 640);
  v27 = *(unint64_t **)(v25 + 648);
  v28 = *(_QWORD *)(a1[12] + 8);
  v29 = *(llvm::MachineFunction **)(v26 + 32);
  v30 = (unsigned __int8 *)a1[9];
  v153 = v30;
  if (v30)
  {
    v144 = v23;
    llvm::MetadataTracking::track((uint64_t)&v153, v30, 2);
    v23 = v144;
  }
  v146 = v23;
  v31 = v28 + 912;
  v32 = *((_QWORD *)v29 + 28);
  if (v32)
    *((_QWORD *)v29 + 28) = *(_QWORD *)v32;
  else
    v32 = sub_1C484358C((uint64_t)v29 + 128, 72, 3);
  *(_QWORD *)&v154 = v153;
  if (v153)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v153, v153, (uint64_t)&v154);
    v153 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v32, v29, v31, (unsigned __int8 **)&v154, 0);
  if ((_QWORD)v154)
    llvm::MetadataTracking::untrack((uint64_t)&v154, (unsigned __int8 *)v154);
  if (v153)
    llvm::MetadataTracking::untrack((uint64_t)&v153, v153);
  v34 = *(_QWORD *)(v26 + 40);
  *(_QWORD *)(v32 + 24) = v34;
  v35 = *(_QWORD *)(v34 + 32);
  v36 = *(unsigned int *)(v32 + 40);
  if ((_DWORD)v36)
  {
    v108 = *(_QWORD *)(v32 + 32);
    v109 = *(_QWORD *)(v35 + 40);
    v110 = 32 * v36;
    do
    {
      if (!*(_BYTE *)v108)
      {
        v111 = *(unsigned int *)(v108 + 4);
        if ((int)v111 >= 0)
          v112 = (uint64_t *)(*(_QWORD *)(v109 + 272) + 8 * v111);
        else
          v112 = (uint64_t *)(*(_QWORD *)(v109 + 24) + 16 * (v111 & 0x7FFFFFFF) + 8);
        v113 = *v112;
        if (*v112)
        {
          v114 = *(_QWORD *)(v113 + 16);
          *(_QWORD *)(v113 + 16) = v108;
          *(_QWORD *)(v108 + 16) = v114;
          if ((*(_BYTE *)(v108 + 3) & 1) != 0)
          {
            *(_QWORD *)(v108 + 24) = v113;
          }
          else
          {
            *(_QWORD *)(v108 + 24) = 0;
            v112 = (uint64_t *)(v114 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v108 + 16) = v108;
          *(_QWORD *)(v108 + 24) = 0;
        }
        *v112 = v108;
      }
      v108 += 32;
      v110 -= 32;
    }
    while (v110);
  }
  v37 = *(_QWORD *)(v35 + 728);
  if (v37)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v37 + 24))(v37, v32);
  v38 = *v27 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v32 = v38 | *(_QWORD *)v32 & 7;
  *(_QWORD *)(v32 + 8) = v27;
  *(_QWORD *)(v38 + 8) = v32;
  *v27 = *v27 & 7 | v32;
  *((_QWORD *)&v154 + 1) = 0;
  v155 = 0uLL;
  LODWORD(v154) = 0x1000000;
  DWORD1(v154) = v146;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v154);
  *((_QWORD *)&v154 + 1) = 0;
  v155 = 0uLL;
  LODWORD(v154) = 0;
  DWORD1(v154) = v149;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v154);
  v39 = a1[4];
  v40 = *(_QWORD *)(v39 + 640);
  v41 = *(unint64_t **)(v39 + 648);
  v42 = *(_QWORD *)(a1[12] + 8);
  v43 = *(llvm::MachineFunction **)(v40 + 32);
  v44 = (unsigned __int8 *)a1[9];
  v153 = v44;
  if (v44)
    llvm::MetadataTracking::track((uint64_t)&v153, v44, 2);
  v45 = v42 + 912;
  v46 = *((_QWORD *)v43 + 28);
  if (v46)
    *((_QWORD *)v43 + 28) = *(_QWORD *)v46;
  else
    v46 = sub_1C484358C((uint64_t)v43 + 128, 72, 3);
  *(_QWORD *)&v154 = v153;
  if (v153)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v153, v153, (uint64_t)&v154);
    v153 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v46, v43, v45, (unsigned __int8 **)&v154, 0);
  if ((_QWORD)v154)
    llvm::MetadataTracking::untrack((uint64_t)&v154, (unsigned __int8 *)v154);
  if (v153)
    llvm::MetadataTracking::untrack((uint64_t)&v153, v153);
  v47 = *(_QWORD *)(v40 + 40);
  *(_QWORD *)(v46 + 24) = v47;
  v48 = *(_QWORD *)(v47 + 32);
  v49 = *(unsigned int *)(v46 + 40);
  if ((_DWORD)v49)
  {
    v115 = *(_QWORD *)(v46 + 32);
    v116 = *(_QWORD *)(v48 + 40);
    v117 = 32 * v49;
    do
    {
      if (!*(_BYTE *)v115)
      {
        v118 = *(unsigned int *)(v115 + 4);
        if ((int)v118 >= 0)
          v119 = (uint64_t *)(*(_QWORD *)(v116 + 272) + 8 * v118);
        else
          v119 = (uint64_t *)(*(_QWORD *)(v116 + 24) + 16 * (v118 & 0x7FFFFFFF) + 8);
        v120 = *v119;
        if (*v119)
        {
          v121 = *(_QWORD *)(v120 + 16);
          *(_QWORD *)(v120 + 16) = v115;
          *(_QWORD *)(v115 + 16) = v121;
          if ((*(_BYTE *)(v115 + 3) & 1) != 0)
          {
            *(_QWORD *)(v115 + 24) = v120;
          }
          else
          {
            *(_QWORD *)(v115 + 24) = 0;
            v119 = (uint64_t *)(v121 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v115 + 16) = v115;
          *(_QWORD *)(v115 + 24) = 0;
        }
        *v119 = v115;
      }
      v115 += 32;
      v117 -= 32;
    }
    while (v117);
  }
  v50 = *(_QWORD *)(v48 + 728);
  if (v50)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v50 + 24))(v50, v46);
  v51 = *v41 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v46 = v51 | *(_QWORD *)v46 & 7;
  *(_QWORD *)(v46 + 8) = v41;
  *(_QWORD *)(v51 + 8) = v46;
  *v41 = *v41 & 7 | v46;
  *((_QWORD *)&v154 + 1) = 0;
  v155 = 0uLL;
  LODWORD(v154) = 0x1000000;
  DWORD1(v154) = v147;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v43, (const llvm::MachineOperand *)&v154);
  HIDWORD(v154) = 0;
  v155 = 0uLL;
  LODWORD(v154) = 0;
  *(_QWORD *)((char *)&v154 + 4) = (v149 + 1);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v43, (const llvm::MachineOperand *)&v154);
  v52 = a1[4];
  v53 = *(_QWORD *)(v52 + 640);
  v54 = *(unint64_t **)(v52 + 648);
  v55 = *(_QWORD *)(a1[12] + 8);
  v56 = *(llvm::MachineFunction **)(v53 + 32);
  v57 = (unsigned __int8 *)a1[9];
  v153 = v57;
  if (v57)
    llvm::MetadataTracking::track((uint64_t)&v153, v57, 2);
  v58 = v55 + 864;
  v59 = *((_QWORD *)v56 + 28);
  if (v59)
    *((_QWORD *)v56 + 28) = *(_QWORD *)v59;
  else
    v59 = sub_1C484358C((uint64_t)v56 + 128, 72, 3);
  *(_QWORD *)&v154 = v153;
  if (v153)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v153, v153, (uint64_t)&v154);
    v153 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v59, v56, v58, (unsigned __int8 **)&v154, 0);
  if ((_QWORD)v154)
    llvm::MetadataTracking::untrack((uint64_t)&v154, (unsigned __int8 *)v154);
  if (v153)
    llvm::MetadataTracking::untrack((uint64_t)&v153, v153);
  v60 = *(_QWORD *)(v53 + 40);
  *(_QWORD *)(v59 + 24) = v60;
  v61 = *(_QWORD *)(v60 + 32);
  v62 = *(unsigned int *)(v59 + 40);
  if ((_DWORD)v62)
  {
    v122 = *(_QWORD *)(v59 + 32);
    v123 = *(_QWORD *)(v61 + 40);
    v124 = 32 * v62;
    do
    {
      if (!*(_BYTE *)v122)
      {
        v125 = *(unsigned int *)(v122 + 4);
        if ((int)v125 >= 0)
          v126 = (uint64_t *)(*(_QWORD *)(v123 + 272) + 8 * v125);
        else
          v126 = (uint64_t *)(*(_QWORD *)(v123 + 24) + 16 * (v125 & 0x7FFFFFFF) + 8);
        v127 = *v126;
        if (*v126)
        {
          v128 = *(_QWORD *)(v127 + 16);
          *(_QWORD *)(v127 + 16) = v122;
          *(_QWORD *)(v122 + 16) = v128;
          if ((*(_BYTE *)(v122 + 3) & 1) != 0)
          {
            *(_QWORD *)(v122 + 24) = v127;
          }
          else
          {
            *(_QWORD *)(v122 + 24) = 0;
            v126 = (uint64_t *)(v128 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v122 + 16) = v122;
          *(_QWORD *)(v122 + 24) = 0;
        }
        *v126 = v122;
      }
      v122 += 32;
      v124 -= 32;
    }
    while (v124);
  }
  v63 = *(_QWORD *)(v61 + 728);
  if (v63)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v63 + 24))(v63, v59);
  v64 = *v54 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v59 = v64 | *(_QWORD *)v59 & 7;
  *(_QWORD *)(v59 + 8) = v54;
  *(_QWORD *)(v64 + 8) = v59;
  *v54 = *v54 & 7 | v59;
  *((_QWORD *)&v154 + 1) = 0;
  v155 = 0uLL;
  LODWORD(v154) = 0x1000000;
  DWORD1(v154) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v154);
  *((_QWORD *)&v154 + 1) = 0;
  v155 = 0uLL;
  LODWORD(v154) = 0;
  DWORD1(v154) = v146;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v154);
  LODWORD(v154) = 1;
  *((_QWORD *)&v154 + 1) = 0;
  *(_QWORD *)&v155 = 33;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v154);
  *((_QWORD *)&v154 + 1) = 0;
  v155 = 0uLL;
  LODWORD(v154) = 0;
  DWORD1(v154) = v147;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v154);
  LODWORD(v154) = 1;
  *((_QWORD *)&v154 + 1) = 0;
  *(_QWORD *)&v155 = 34;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)&v154);
  v150 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
  v65 = a1[4];
  v66 = *(_QWORD *)(v65 + 640);
  v67 = *(unint64_t **)(v65 + 648);
  v68 = *(_QWORD *)(a1[12] + 8);
  v69 = *(llvm::MachineFunction **)(v66 + 32);
  v70 = (unsigned __int8 *)a1[9];
  v153 = v70;
  if (v70)
    llvm::MetadataTracking::track((uint64_t)&v153, v70, 2);
  v71 = v68 + 48 * v151;
  v72 = *((_QWORD *)v69 + 28);
  if (v72)
    *((_QWORD *)v69 + 28) = *(_QWORD *)v72;
  else
    v72 = sub_1C484358C((uint64_t)v69 + 128, 72, 3);
  *(_QWORD *)&v154 = v153;
  if (v153)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v153, v153, (uint64_t)&v154);
    v153 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v72, v69, v71, (unsigned __int8 **)&v154, 0);
  if ((_QWORD)v154)
    llvm::MetadataTracking::untrack((uint64_t)&v154, (unsigned __int8 *)v154);
  if (v153)
    llvm::MetadataTracking::untrack((uint64_t)&v153, v153);
  v73 = *(_QWORD *)(v66 + 40);
  *(_QWORD *)(v72 + 24) = v73;
  v74 = *(_QWORD *)(v73 + 32);
  v75 = *(unsigned int *)(v72 + 40);
  if ((_DWORD)v75)
  {
    v129 = *(_QWORD *)(v72 + 32);
    v130 = *(_QWORD *)(v74 + 40);
    v131 = 32 * v75;
    do
    {
      if (!*(_BYTE *)v129)
      {
        v132 = *(unsigned int *)(v129 + 4);
        if ((int)v132 >= 0)
          v133 = (uint64_t *)(*(_QWORD *)(v130 + 272) + 8 * v132);
        else
          v133 = (uint64_t *)(*(_QWORD *)(v130 + 24) + 16 * (v132 & 0x7FFFFFFF) + 8);
        v134 = *v133;
        if (*v133)
        {
          v135 = *(_QWORD *)(v134 + 16);
          *(_QWORD *)(v134 + 16) = v129;
          *(_QWORD *)(v129 + 16) = v135;
          if ((*(_BYTE *)(v129 + 3) & 1) != 0)
          {
            *(_QWORD *)(v129 + 24) = v134;
          }
          else
          {
            *(_QWORD *)(v129 + 24) = 0;
            v133 = (uint64_t *)(v135 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v129 + 16) = v129;
          *(_QWORD *)(v129 + 24) = 0;
        }
        *v133 = v129;
      }
      v129 += 32;
      v131 -= 32;
    }
    while (v131);
  }
  v76 = *(_QWORD *)(v74 + 728);
  if (v76)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v76 + 24))(v76, v72);
  v77 = *v67 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v72 = v77 | *(_QWORD *)v72 & 7;
  *(_QWORD *)(v72 + 8) = v67;
  *(_QWORD *)(v77 + 8) = v72;
  *v67 = *v67 & 7 | v72;
  *((_QWORD *)&v154 + 1) = 0;
  v155 = 0uLL;
  LODWORD(v154) = 0x1000000;
  DWORD1(v154) = v148;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v69, (const llvm::MachineOperand *)&v154);
  *((_QWORD *)&v154 + 1) = 0;
  v155 = 0uLL;
  LODWORD(v154) = 0;
  DWORD1(v154) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v69, (const llvm::MachineOperand *)&v154);
  v78 = a1[32];
  LODWORD(v154) = 0;
  v79 = sub_1C4785D88(v78, v150, "LoadCMode", &v154);
  v80 = v154;
  IncompleteVirtualRegister = 1;
  LODWORD(v154) = 1;
  if (!v79)
    v80 = 0;
  *((_QWORD *)&v154 + 1) = 0;
  *(_QWORD *)&v155 = v80;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v69, (const llvm::MachineOperand *)&v154);
  v81 = a1[32];
  LODWORD(v154) = 0;
  v82 = sub_1C4785D88(v81, v150, "LoadSLCMode", &v154);
  v83 = v154;
  if (!v82)
    v83 = 1;
  LODWORD(v154) = 1;
  *((_QWORD *)&v154 + 1) = 0;
  *(_QWORD *)&v155 = v83;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v69, (const llvm::MachineOperand *)&v154);
  LODWORD(v154) = 1;
  *((_QWORD *)&v154 + 1) = 0;
  *(_QWORD *)&v155 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v69, (const llvm::MachineOperand *)&v154);
  LODWORD(v154) = 1;
  *((_QWORD *)&v154 + 1) = 0;
  *(_QWORD *)&v155 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v69, (const llvm::MachineOperand *)&v154);
  v154 = 0u;
  v155 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v69, (const llvm::MachineOperand *)&v154);
  v84 = (unint64_t)v6 & 0xFFFFFFFFFFFFFFFBLL;
  v85 = *(_DWORD *)(*(_QWORD *)v6 + 8);
  if ((v85 & 0xFE) == 0x12)
    v85 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v6 + 16) + 8);
  v86 = v85 >> 8;
  v87 = *(llvm::MachineFunction **)(*(_QWORD *)(v72 + 24) + 32);
  if (v5 >= 0)
    v88 = v5;
  else
    v88 = v5 + 7;
  v89 = *(unsigned __int8 *)(a2 + 18);
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, &v154);
  v90 = sub_1C484358C((uint64_t)v87 + 128, 80, 3);
  if ((v5 + 15) >= 8)
    v91 = ((unint64_t)(v88 >> 3) << 6) | 1;
  else
    v91 = 0;
  *(_QWORD *)v90 = v84;
  *(_QWORD *)(v90 + 8) = 0;
  *(_DWORD *)(v90 + 16) = v86;
  *(_BYTE *)(v90 + 20) = 0;
  *(_QWORD *)(v90 + 24) = v91;
  v92 = v155;
  *(_OWORD *)(v90 + 40) = v154;
  *(_WORD *)(v90 + 32) = 1;
  *(_BYTE *)(v90 + 34) = (v89 >> 1) & 0x3F;
  *(_OWORD *)(v90 + 56) = v92;
  *(_QWORD *)(v90 + 72) = 0;
  *(_WORD *)(v90 + 36) = 1;
  llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v72, v87, (llvm::MachineMemOperand *)v90);
  v93 = v145;
  v94 = v148;
  if (v148 != v145)
  {
    if (v5 == 16)
    {
      v95 = a1[4];
      v96 = *(_QWORD *)(v95 + 640);
      v97 = *(unint64_t **)(v95 + 648);
      v98 = *(_QWORD *)(a1[12] + 8);
      v99 = *(llvm::MachineFunction **)(v96 + 32);
      v100 = (unsigned __int8 *)a1[9];
      v153 = v100;
      if (v100)
        llvm::MetadataTracking::track((uint64_t)&v153, v100, 2);
      v101 = v98 + 912;
      v102 = *((_QWORD *)v99 + 28);
      if (v102)
        *((_QWORD *)v99 + 28) = *(_QWORD *)v102;
      else
        v102 = sub_1C484358C((uint64_t)v99 + 128, 72, 3);
      *(_QWORD *)&v154 = v153;
      if (v153)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v153, v153, (uint64_t)&v154);
        v153 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v102, v99, v101, (unsigned __int8 **)&v154, 0);
      if ((_QWORD)v154)
        llvm::MetadataTracking::untrack((uint64_t)&v154, (unsigned __int8 *)v154);
      if (v153)
        llvm::MetadataTracking::untrack((uint64_t)&v153, v153);
      v103 = *(_QWORD *)(v96 + 40);
      *(_QWORD *)(v102 + 24) = v103;
      v104 = *(_QWORD *)(v103 + 32);
      v105 = *(unsigned int *)(v102 + 40);
      if ((_DWORD)v105)
      {
        v137 = *(_QWORD *)(v102 + 32);
        v138 = *(_QWORD *)(v104 + 40);
        v139 = 32 * v105;
        do
        {
          if (!*(_BYTE *)v137)
          {
            v140 = *(unsigned int *)(v137 + 4);
            if ((int)v140 >= 0)
              v141 = (uint64_t *)(*(_QWORD *)(v138 + 272) + 8 * v140);
            else
              v141 = (uint64_t *)(*(_QWORD *)(v138 + 24) + 16 * (v140 & 0x7FFFFFFF) + 8);
            v142 = *v141;
            if (*v141)
            {
              v143 = *(_QWORD *)(v142 + 16);
              *(_QWORD *)(v142 + 16) = v137;
              *(_QWORD *)(v137 + 16) = v143;
              if ((*(_BYTE *)(v137 + 3) & 1) != 0)
              {
                *(_QWORD *)(v137 + 24) = v142;
              }
              else
              {
                *(_QWORD *)(v137 + 24) = 0;
                v141 = (uint64_t *)(v143 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v137 + 16) = v137;
              *(_QWORD *)(v137 + 24) = 0;
            }
            *v141 = v137;
            v93 = v145;
            v94 = v148;
          }
          v137 += 32;
          v139 -= 32;
        }
        while (v139);
      }
      v106 = *(_QWORD *)(v104 + 728);
      if (v106)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v106 + 24))(v106, v102);
      v107 = *v97 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v102 = v107 | *(_QWORD *)v102 & 7;
      *(_QWORD *)(v102 + 8) = v97;
      *(_QWORD *)(v107 + 8) = v102;
      *v97 = *v97 & 7 | v102;
      *((_QWORD *)&v154 + 1) = 0;
      v155 = 0uLL;
      LODWORD(v154) = 0x1000000;
      DWORD1(v154) = v93;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v102, v99, (const llvm::MachineOperand *)&v154);
      *((_QWORD *)&v154 + 1) = 0;
      v155 = 0uLL;
      LODWORD(v154) = 256;
      DWORD1(v154) = v94;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v102, v99, (const llvm::MachineOperand *)&v154);
    }
    else
    {
      sub_1C4789F18(a1, v145, v148, v5);
    }
    return 1;
  }
  return IncompleteVirtualRegister;
}

uint64_t sub_1C479B900(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  int IncompleteVirtualRegister;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  llvm::MachineFunction *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  llvm::MachineFunction *v50;
  unsigned __int8 *v51;
  unint64_t v52;
  _QWORD *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t result;
  uint64_t v62;
  int v63;
  int v66;
  unsigned __int8 *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  llvm::MachineFunction *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int v98;
  llvm::MachineFunction *v99;
  unsigned int v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  llvm::MachineFunction *v107;
  unsigned __int8 *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  uint64_t v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  unint64_t *v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  unsigned __int8 *v167;
  __int128 v168;
  __int128 v169;

  v4 = *(unsigned __int8 *)(a1[32] + 280);
  v5 = *(_QWORD *)a2;
  v166 = 0;
  if (!sub_1C4786904((uint64_t)a1, v5, (int *)&v166))
    goto LABEL_85;
  v6 = v166;
  v7 = v166 > 0x30 || ((1 << v166) & 0x1000000010100) == 0;
  if (v7 && ((int)v166 > 512 || (v166 & 0x1F) != 0))
    goto LABEL_85;
  v8 = sub_1C47A836C((uint64_t)a1, (unsigned __int8 *)a2);
  if (!v8)
    goto LABEL_85;
  v10 = v8;
  v11 = *(_QWORD *)(a2 - 32);
  v164 = 0;
  v165 = 0;
  if (!sub_1C478664C((uint64_t)a1, v11, &v164, &v165, v9))
    goto LABEL_85;
  if ((int)v6 > 31)
  {
    if (v6 > 0x3F)
    {
      v12 = (v6 >> 5) + 2;
      v14 = *((_DWORD *)&unk_1E7F94718 + 4 * v12 + v4);
      goto LABEL_21;
    }
    LODWORD(v12) = v6 >> 4;
  }
  else
  {
    LODWORD(v12) = (int)v6 / 8 - 1;
  }
  v14 = *((_DWORD *)&unk_1E7F94718 + 4 * v12 + v4);
  v12 = v12;
  if ((int)v6 <= 32)
  {
    IncompleteVirtualRegister = v10;
    if ((_DWORD)v6 != 16)
      goto LABEL_23;
  }
LABEL_21:
  v16 = *((_QWORD *)&unk_1E7F94718 + 2 * v12 + 1);
  v17 = a1[6];
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v17, "", 0);
  *(_QWORD *)(*(_QWORD *)(v17 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v16 & 0xFFFFFFFFFFFFFFFBLL;
  v18 = *(_QWORD *)(v17 + 8);
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
    if (IncompleteVirtualRegister)
      goto LABEL_23;
  }
  else if (IncompleteVirtualRegister)
  {
LABEL_23:
    v162 = IncompleteVirtualRegister;
    v160 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
    v19 = a1[4];
    v20 = *(_QWORD *)(v19 + 640);
    v21 = *(unint64_t **)(v19 + 648);
    v22 = *(_QWORD *)(a1[12] + 8);
    v23 = *(llvm::MachineFunction **)(v20 + 32);
    v24 = (unsigned __int8 *)a1[9];
    v167 = v24;
    if (v24)
      llvm::MetadataTracking::track((uint64_t)&v167, v24, 2);
    v25 = v22 + 48 * v14;
    v26 = *((_QWORD *)v23 + 28);
    if (v26)
      *((_QWORD *)v23 + 28) = *(_QWORD *)v26;
    else
      v26 = sub_1C484358C((uint64_t)v23 + 128, 72, 3);
    *(_QWORD *)&v168 = v167;
    if (v167)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v167, v167, (uint64_t)&v168);
      v167 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v26, v23, v25, (unsigned __int8 **)&v168, 0);
    if ((_QWORD)v168)
      llvm::MetadataTracking::untrack((uint64_t)&v168, (unsigned __int8 *)v168);
    if (v167)
      llvm::MetadataTracking::untrack((uint64_t)&v167, v167);
    v27 = *(_QWORD *)(v20 + 40);
    *(_QWORD *)(v26 + 24) = v27;
    v28 = *(_QWORD *)(v27 + 32);
    v29 = *(unsigned int *)(v26 + 40);
    if ((_DWORD)v29)
    {
      v39 = *(_QWORD *)(v26 + 32);
      v40 = *(_QWORD *)(v28 + 40);
      v41 = 32 * v29;
      do
      {
        if (!*(_BYTE *)v39)
        {
          v42 = *(unsigned int *)(v39 + 4);
          if ((int)v42 >= 0)
            v43 = (uint64_t *)(*(_QWORD *)(v40 + 272) + 8 * v42);
          else
            v43 = (uint64_t *)(*(_QWORD *)(v40 + 24) + 16 * (v42 & 0x7FFFFFFF) + 8);
          v44 = *v43;
          if (*v43)
          {
            v45 = *(_QWORD *)(v44 + 16);
            *(_QWORD *)(v44 + 16) = v39;
            *(_QWORD *)(v39 + 16) = v45;
            if ((*(_BYTE *)(v39 + 3) & 1) != 0)
            {
              *(_QWORD *)(v39 + 24) = v44;
            }
            else
            {
              *(_QWORD *)(v39 + 24) = 0;
              v43 = (uint64_t *)(v45 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v39 + 16) = v39;
            *(_QWORD *)(v39 + 24) = 0;
          }
          *v43 = v39;
        }
        v39 += 32;
        v41 -= 32;
      }
      while (v41);
    }
    v30 = *(_QWORD *)(v28 + 728);
    if (v30)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v30 + 24))(v30, v26);
    v31 = *v21 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v26 = v31 | *(_QWORD *)v26 & 7;
    *(_QWORD *)(v26 + 8) = v21;
    *(_QWORD *)(v31 + 8) = v26;
    *v21 = *v21 & 7 | v26;
    *((_QWORD *)&v168 + 1) = 0;
    v169 = 0uLL;
    LODWORD(v168) = 0x1000000;
    DWORD1(v168) = v162;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v23, (const llvm::MachineOperand *)&v168);
    LODWORD(v168) = 5;
    *((_QWORD *)&v168 + 1) = 0;
    LODWORD(v169) = v164;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v23, (const llvm::MachineOperand *)&v168);
    LODWORD(v168) = 1;
    *((_QWORD *)&v168 + 1) = 0;
    *(_QWORD *)&v169 = v165;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v23, (const llvm::MachineOperand *)&v168);
    v32 = (_BYTE *)a1[32];
    if ((_DWORD)v4)
    {
      LODWORD(v168) = 0;
      v33 = sub_1C4785D88((int)v32, v160, "LoadCMode", &v168);
      v34 = v168;
      if (!v33)
        v34 = 0;
      LODWORD(v168) = 1;
      *((_QWORD *)&v168 + 1) = 0;
      *(_QWORD *)&v169 = v34;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v23, (const llvm::MachineOperand *)&v168);
      v35 = a1[32];
      LODWORD(v168) = 0;
      v36 = sub_1C4785D88(v35, v160, "LoadSLCMode", &v168);
      v37 = v168;
      if (!v36)
        v37 = 1;
      LODWORD(v168) = 1;
      *((_QWORD *)&v168 + 1) = 0;
      *(_QWORD *)&v169 = v37;
    }
    else
    {
      if (v32[310])
      {
        v38 = 1;
      }
      else if (v32[311])
      {
        v38 = 2;
      }
      else
      {
        v38 = 3;
        if (!v32[312])
          v38 = 0;
      }
      LODWORD(v168) = 1;
      *((_QWORD *)&v168 + 1) = 0;
      *(_QWORD *)&v169 = v38;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v23, (const llvm::MachineOperand *)&v168);
      LODWORD(v168) = 1;
      *((_QWORD *)&v168 + 1) = 0;
      *(_QWORD *)&v169 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v23, (const llvm::MachineOperand *)&v168);
      LODWORD(v168) = 1;
      *((_QWORD *)&v168 + 1) = 0;
      *(_QWORD *)&v169 = 0;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v23, (const llvm::MachineOperand *)&v168);
    LODWORD(v168) = 1;
    *((_QWORD *)&v168 + 1) = 0;
    *(_QWORD *)&v169 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v23, (const llvm::MachineOperand *)&v168);
    LODWORD(v168) = 1;
    *((_QWORD *)&v168 + 1) = 0;
    *(_QWORD *)&v169 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v23, (const llvm::MachineOperand *)&v168);
    v168 = 0u;
    v169 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v23, (const llvm::MachineOperand *)&v168);
    if (v162 == v10)
      return 1;
    if ((_DWORD)v6 == 16)
    {
      v46 = a1[4];
      v47 = *(_QWORD *)(v46 + 640);
      v48 = *(unint64_t **)(v46 + 648);
      v49 = *(_QWORD *)(a1[12] + 8);
      v50 = *(llvm::MachineFunction **)(v47 + 32);
      v51 = (unsigned __int8 *)a1[9];
      v167 = v51;
      if (v51)
        llvm::MetadataTracking::track((uint64_t)&v167, v51, 2);
      v52 = *((_QWORD *)v50 + 28);
      if (v52)
        *((_QWORD *)v50 + 28) = *(_QWORD *)v52;
      else
        v52 = sub_1C484358C((uint64_t)v50 + 128, 72, 3);
      *(_QWORD *)&v168 = v167;
      if (v167)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v167, v167, (uint64_t)&v168);
        v167 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v52, v50, v49 + 912, (unsigned __int8 **)&v168, 0);
      if ((_QWORD)v168)
        llvm::MetadataTracking::untrack((uint64_t)&v168, (unsigned __int8 *)v168);
      if (v167)
        llvm::MetadataTracking::untrack((uint64_t)&v167, v167);
      v56 = *(_QWORD *)(v47 + 40);
      *(_QWORD *)(v52 + 24) = v56;
      v57 = *(_QWORD *)(v56 + 32);
      v58 = *(unsigned int *)(v52 + 40);
      if ((_DWORD)v58)
      {
        v133 = *(_QWORD *)(v52 + 32);
        v134 = *(_QWORD *)(v57 + 40);
        v135 = 32 * v58;
        do
        {
          if (!*(_BYTE *)v133)
          {
            v136 = *(unsigned int *)(v133 + 4);
            if ((int)v136 >= 0)
              v137 = (uint64_t *)(*(_QWORD *)(v134 + 272) + 8 * v136);
            else
              v137 = (uint64_t *)(*(_QWORD *)(v134 + 24) + 16 * (v136 & 0x7FFFFFFF) + 8);
            v138 = *v137;
            if (*v137)
            {
              v139 = *(_QWORD *)(v138 + 16);
              *(_QWORD *)(v138 + 16) = v133;
              *(_QWORD *)(v133 + 16) = v139;
              if ((*(_BYTE *)(v133 + 3) & 1) != 0)
              {
                *(_QWORD *)(v133 + 24) = v138;
              }
              else
              {
                *(_QWORD *)(v133 + 24) = 0;
                v137 = (uint64_t *)(v139 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v133 + 16) = v133;
              *(_QWORD *)(v133 + 24) = 0;
            }
            *v137 = v133;
          }
          v133 += 32;
          v135 -= 32;
        }
        while (v135);
      }
      v59 = *(_QWORD *)(v57 + 728);
      if (v59)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v59 + 24))(v59, v52);
      v60 = *v48 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v52 = v60 | *(_QWORD *)v52 & 7;
      *(_QWORD *)(v52 + 8) = v48;
      *(_QWORD *)(v60 + 8) = v52;
      *v48 = *v48 & 7 | v52;
      *((_QWORD *)&v168 + 1) = 0;
      v169 = 0uLL;
      LODWORD(v168) = 0x1000000;
      DWORD1(v168) = v10;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v50, (const llvm::MachineOperand *)&v168);
      *((_QWORD *)&v168 + 1) = 0;
      v169 = 0uLL;
      DWORD1(v168) = v162;
LABEL_82:
      LODWORD(v168) = 256;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v50, (const llvm::MachineOperand *)&v168);
      return 1;
    }
    v53 = a1;
    v54 = v10;
    v55 = v162;
LABEL_70:
    sub_1C4789F18(v53, v54, v55, v6);
    return 1;
  }
LABEL_85:
  v62 = *(unsigned __int8 *)(a1[32] + 280);
  v166 = 0;
  v63 = sub_1C4786904((uint64_t)a1, *(_QWORD *)a2, (int *)&v166);
  result = 0;
  if (!v63)
    return result;
  LODWORD(v6) = v166;
  if ((v166 > 0x30 || ((1 << v166) & 0x1000000010100) == 0) && (v166 & 0x1F) != 0)
    return 0;
  v66 = (_DWORD)v62 ? 512 : 128;
  if ((int)v166 > v66 || (int)v166 < 16)
    return 0;
  v68 = *(unsigned __int8 **)(a2 - 32);
  if (v68[16] - 11 < 2)
    return 0;
  v69 = v166 > 0x1F ? ((v166 + 16) >> 5) + 1 : (v166 >> 3) - 1;
  v70 = *((_DWORD *)&unk_1E7F94B18 + 4 * v69 + v62);
  if (!v70)
    return 0;
  v71 = *((_QWORD *)&unk_1E7F94B18 + 2 * v69 + 1);
  result = sub_1C47A836C((uint64_t)a1, (unsigned __int8 *)a2);
  v161 = result;
  if (!(_DWORD)result)
    return result;
  result = sub_1C47A836C((uint64_t)a1, v68);
  if (!(_DWORD)result)
    return result;
  v72 = result;
  if ((_DWORD)v62)
  {
    result = sub_1C6127C28((uint64_t)a1, result);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    LODWORD(result) = 0;
  }
  v159 = result;
  v73 = a1[6];
  v74 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v73, "", 0);
  *(_QWORD *)(*(_QWORD *)(v73 + 24) + 16 * (v74 & 0x7FFFFFFF)) = v71 & 0xFFFFFFFFFFFFFFFBLL;
  v75 = *(_QWORD *)(v73 + 8);
  if (v75)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75);
    if (v74)
      goto LABEL_112;
    return 0;
  }
  if (!v74)
    return 0;
LABEL_112:
  v157 = v72;
  v163 = v74;
  v76 = a1[4];
  v77 = *(_QWORD *)(v76 + 640);
  v158 = *(unint64_t **)(v76 + 648);
  v78 = *(_QWORD *)(a1[12] + 8);
  v79 = *(llvm::MachineFunction **)(v77 + 32);
  v80 = (unsigned __int8 *)a1[9];
  v167 = v80;
  if (v80)
    llvm::MetadataTracking::track((uint64_t)&v167, v80, 2);
  v81 = v78 + 48 * v70;
  v82 = *((_QWORD *)v79 + 28);
  if (v82)
    *((_QWORD *)v79 + 28) = *(_QWORD *)v82;
  else
    v82 = sub_1C484358C((uint64_t)v79 + 128, 72, 3);
  *(_QWORD *)&v168 = v167;
  if (v167)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v167, v167, (uint64_t)&v168);
    v167 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v82, v79, v81, (unsigned __int8 **)&v168, 0);
  if ((_QWORD)v168)
    llvm::MetadataTracking::untrack((uint64_t)&v168, (unsigned __int8 *)v168);
  v83 = v161;
  if (v167)
    llvm::MetadataTracking::untrack((uint64_t)&v167, v167);
  v84 = *(_QWORD *)(v77 + 40);
  *(_QWORD *)(v82 + 24) = v84;
  v85 = *(_QWORD *)(v84 + 32);
  v86 = *(unsigned int *)(v82 + 40);
  if ((_DWORD)v86)
  {
    v143 = *(_QWORD *)(v82 + 32);
    v144 = *(_QWORD *)(v85 + 40);
    v145 = 32 * v86;
    do
    {
      if (!*(_BYTE *)v143)
      {
        v146 = *(unsigned int *)(v143 + 4);
        if ((int)v146 >= 0)
          v147 = (uint64_t *)(*(_QWORD *)(v144 + 272) + 8 * v146);
        else
          v147 = (uint64_t *)(*(_QWORD *)(v144 + 24) + 16 * (v146 & 0x7FFFFFFF) + 8);
        v148 = *v147;
        if (*v147)
        {
          v149 = *(_QWORD *)(v148 + 16);
          *(_QWORD *)(v148 + 16) = v143;
          *(_QWORD *)(v143 + 16) = v149;
          if ((*(_BYTE *)(v143 + 3) & 1) != 0)
          {
            *(_QWORD *)(v143 + 24) = v148;
          }
          else
          {
            *(_QWORD *)(v143 + 24) = 0;
            v147 = (uint64_t *)(v149 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v143 + 16) = v143;
          *(_QWORD *)(v143 + 24) = 0;
        }
        *v147 = v143;
      }
      v143 += 32;
      v145 -= 32;
    }
    while (v145);
  }
  v87 = *(_QWORD *)(v85 + 728);
  if (v87)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v87 + 24))(v87, v82);
  v88 = *v158 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v82 = v88 | *(_QWORD *)v82 & 7;
  *(_QWORD *)(v82 + 8) = v158;
  *(_QWORD *)(v88 + 8) = v82;
  *v158 = *v158 & 7 | v82;
  *((_QWORD *)&v168 + 1) = 0;
  v169 = 0uLL;
  LODWORD(v168) = 0x1000000;
  DWORD1(v168) = v74;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v82, v79, (const llvm::MachineOperand *)&v168);
  if ((_DWORD)v62)
  {
    v89 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
    *((_QWORD *)&v168 + 1) = 0;
    v169 = 0uLL;
    LODWORD(v168) = 0;
    DWORD1(v168) = v159;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v82, v79, (const llvm::MachineOperand *)&v168);
    v90 = a1[32];
    LODWORD(v168) = 0;
    v91 = sub_1C4785D88(v90, v89, "LoadCMode", &v168);
    v92 = v168;
    LODWORD(v168) = 1;
    if (!v91)
      v92 = 0;
    *((_QWORD *)&v168 + 1) = 0;
    *(_QWORD *)&v169 = v92;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v82, v79, (const llvm::MachineOperand *)&v168);
    v93 = a1[32];
    LODWORD(v168) = 0;
    v94 = sub_1C4785D88(v93, v89, "LoadSLCMode", &v168);
    v95 = v168;
    if (!v94)
      v95 = 1;
    LODWORD(v168) = 1;
    *((_QWORD *)&v168 + 1) = 0;
    *(_QWORD *)&v169 = v95;
  }
  else
  {
    v140 = sub_1C6127088((uint64_t)a1, v157);
    *((_QWORD *)&v168 + 1) = 0;
    v169 = 0uLL;
    LODWORD(v168) = v140 << 8;
    DWORD1(v168) = v157;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v82, v79, (const llvm::MachineOperand *)&v168);
    v141 = (_BYTE *)a1[32];
    if (v141[310])
    {
      v142 = 1;
    }
    else if (v141[311])
    {
      v142 = 2;
    }
    else
    {
      v7 = v141[312] == 0;
      v142 = 3;
      if (v7)
        v142 = 0;
    }
    LODWORD(v168) = 1;
    *((_QWORD *)&v168 + 1) = 0;
    *(_QWORD *)&v169 = v142;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v82, v79, (const llvm::MachineOperand *)&v168);
    LODWORD(v168) = 1;
    *((_QWORD *)&v168 + 1) = 0;
    *(_QWORD *)&v169 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v82, v79, (const llvm::MachineOperand *)&v168);
    LODWORD(v168) = 1;
    *((_QWORD *)&v168 + 1) = 0;
    *(_QWORD *)&v169 = 0;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v82, v79, (const llvm::MachineOperand *)&v168);
  LODWORD(v168) = 1;
  *((_QWORD *)&v168 + 1) = 0;
  *(_QWORD *)&v169 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v82, v79, (const llvm::MachineOperand *)&v168);
  LODWORD(v168) = 1;
  *((_QWORD *)&v168 + 1) = 0;
  *(_QWORD *)&v169 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v82, v79, (const llvm::MachineOperand *)&v168);
  v168 = 0u;
  v169 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v82, v79, (const llvm::MachineOperand *)&v168);
  v96 = (unint64_t)v68 & 0xFFFFFFFFFFFFFFFBLL;
  v97 = *(_DWORD *)(*(_QWORD *)v68 + 8);
  if ((v97 & 0xFE) == 0x12)
    v97 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v68 + 16) + 8);
  v98 = v97 >> 8;
  v99 = *(llvm::MachineFunction **)(*(_QWORD *)(v82 + 24) + 32);
  v100 = *(unsigned __int8 *)(a2 + 18);
  v101 = sub_1C484358C((uint64_t)v99 + 128, 80, 3);
  *(_QWORD *)v101 = v96;
  *(_QWORD *)(v101 + 8) = 0;
  *(_DWORD *)(v101 + 16) = v98;
  *(_BYTE *)(v101 + 20) = 0;
  *(_QWORD *)(v101 + 24) = ((unint64_t)(v6 >> 3) << 6) | 1;
  *(_WORD *)(v101 + 32) = 1;
  *(_BYTE *)(v101 + 34) = (v100 >> 1) & 0x3F;
  *(_OWORD *)(v101 + 40) = 0u;
  *(_OWORD *)(v101 + 56) = 0u;
  *(_QWORD *)(v101 + 72) = 0;
  *(_WORD *)(v101 + 36) = 1;
  llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v82, v99, (llvm::MachineMemOperand *)v101);
  if ((_DWORD)v6 == 16)
  {
    v122 = a1[4];
    v123 = *(_QWORD *)(v122 + 640);
    v124 = *(unint64_t **)(v122 + 648);
    v125 = *(_QWORD *)(a1[12] + 8);
    v50 = *(llvm::MachineFunction **)(v123 + 32);
    v126 = (unsigned __int8 *)a1[9];
    v167 = v126;
    if (v126)
      llvm::MetadataTracking::track((uint64_t)&v167, v126, 2);
    v127 = v125 + 912;
    v52 = *((_QWORD *)v50 + 28);
    if (v52)
      *((_QWORD *)v50 + 28) = *(_QWORD *)v52;
    else
      v52 = sub_1C484358C((uint64_t)v50 + 128, 72, 3);
    *(_QWORD *)&v168 = v167;
    if (v167)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v167, v167, (uint64_t)&v168);
      v167 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v52, v50, v127, (unsigned __int8 **)&v168, 0);
    if ((_QWORD)v168)
      llvm::MetadataTracking::untrack((uint64_t)&v168, (unsigned __int8 *)v168);
    if (v167)
      llvm::MetadataTracking::untrack((uint64_t)&v167, v167);
    v128 = *(_QWORD *)(v123 + 40);
    *(_QWORD *)(v52 + 24) = v128;
    v129 = *(_QWORD *)(v128 + 32);
    v130 = *(unsigned int *)(v52 + 40);
    if ((_DWORD)v130)
    {
      v150 = *(_QWORD *)(v52 + 32);
      v151 = *(_QWORD *)(v129 + 40);
      v152 = 32 * v130;
      do
      {
        if (!*(_BYTE *)v150)
        {
          v153 = *(unsigned int *)(v150 + 4);
          if ((int)v153 >= 0)
            v154 = (uint64_t *)(*(_QWORD *)(v151 + 272) + 8 * v153);
          else
            v154 = (uint64_t *)(*(_QWORD *)(v151 + 24) + 16 * (v153 & 0x7FFFFFFF) + 8);
          v155 = *v154;
          if (*v154)
          {
            v156 = *(_QWORD *)(v155 + 16);
            *(_QWORD *)(v155 + 16) = v150;
            *(_QWORD *)(v150 + 16) = v156;
            if ((*(_BYTE *)(v150 + 3) & 1) != 0)
            {
              *(_QWORD *)(v150 + 24) = v155;
            }
            else
            {
              *(_QWORD *)(v150 + 24) = 0;
              v154 = (uint64_t *)(v156 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v150 + 16) = v150;
            *(_QWORD *)(v150 + 24) = 0;
          }
          *v154 = v150;
          v83 = v161;
        }
        v150 += 32;
        v152 -= 32;
      }
      while (v152);
    }
    v131 = *(_QWORD *)(v129 + 728);
    if (v131)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v131 + 24))(v131, v52);
    v132 = *v124 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v52 = v132 | *(_QWORD *)v52 & 7;
    *(_QWORD *)(v52 + 8) = v124;
    *(_QWORD *)(v132 + 8) = v52;
    *v124 = *v124 & 7 | v52;
    *((_QWORD *)&v168 + 1) = 0;
    v169 = 0uLL;
    LODWORD(v168) = 0x1000000;
    DWORD1(v168) = v83;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v50, (const llvm::MachineOperand *)&v168);
    *((_QWORD *)&v168 + 1) = 0;
    v169 = 0uLL;
    DWORD1(v168) = v163;
    goto LABEL_82;
  }
  if ((_DWORD)v6 != 48)
  {
    v53 = a1;
    v54 = v161;
    v55 = v163;
    goto LABEL_70;
  }
  v102 = 0;
  do
  {
    v103 = a1[4];
    v104 = *(_QWORD *)(v103 + 640);
    v105 = *(unint64_t **)(v103 + 648);
    v106 = *(_QWORD *)(a1[12] + 8);
    v107 = *(llvm::MachineFunction **)(v104 + 32);
    v108 = (unsigned __int8 *)a1[9];
    v167 = v108;
    if (v108)
      llvm::MetadataTracking::track((uint64_t)&v167, v108, 2);
    v109 = *((_QWORD *)v107 + 28);
    if (v109)
      *((_QWORD *)v107 + 28) = *(_QWORD *)v109;
    else
      v109 = sub_1C484358C((uint64_t)v107 + 128, 72, 3);
    *(_QWORD *)&v168 = v167;
    if (v167)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v167, v167, (uint64_t)&v168);
      v167 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v109, v107, v106 + 912, (unsigned __int8 **)&v168, 0);
    if ((_QWORD)v168)
      llvm::MetadataTracking::untrack((uint64_t)&v168, (unsigned __int8 *)v168);
    if (v167)
      llvm::MetadataTracking::untrack((uint64_t)&v167, v167);
    v110 = *(_QWORD *)(v104 + 40);
    *(_QWORD *)(v109 + 24) = v110;
    v111 = *(_QWORD *)(v110 + 32);
    v112 = *(unsigned int *)(v109 + 40);
    if ((_DWORD)v112)
    {
      v115 = *(_QWORD *)(v109 + 32);
      v116 = *(_QWORD *)(v111 + 40);
      v117 = 32 * v112;
      do
      {
        if (!*(_BYTE *)v115)
        {
          v118 = *(unsigned int *)(v115 + 4);
          if ((int)v118 >= 0)
            v119 = (uint64_t *)(*(_QWORD *)(v116 + 272) + 8 * v118);
          else
            v119 = (uint64_t *)(*(_QWORD *)(v116 + 24) + 16 * (v118 & 0x7FFFFFFF) + 8);
          v120 = *v119;
          if (*v119)
          {
            v121 = *(_QWORD *)(v120 + 16);
            *(_QWORD *)(v120 + 16) = v115;
            *(_QWORD *)(v115 + 16) = v121;
            if ((*(_BYTE *)(v115 + 3) & 1) != 0)
            {
              *(_QWORD *)(v115 + 24) = v120;
            }
            else
            {
              *(_QWORD *)(v115 + 24) = 0;
              v119 = (uint64_t *)(v121 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v115 + 16) = v115;
            *(_QWORD *)(v115 + 24) = 0;
          }
          *v119 = v115;
        }
        v115 += 32;
        v117 -= 32;
      }
      while (v117);
    }
    v113 = *(_QWORD *)(v111 + 728);
    if (v113)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v113 + 24))(v113, v109);
    v114 = *v105 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v109 = v114 | *(_QWORD *)v109 & 7;
    *(_QWORD *)(v109 + 8) = v105;
    *(_QWORD *)(v114 + 8) = v109;
    *v105 = *v105 & 7 | v109;
    HIDWORD(v168) = 0;
    v169 = 0uLL;
    LODWORD(v168) = 0x1000000;
    *(_QWORD *)((char *)&v168 + 4) = (v102 + v161);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v109, v107, (const llvm::MachineOperand *)&v168);
    ++v102;
    *((_QWORD *)&v168 + 1) = 0;
    v169 = 0uLL;
    LODWORD(v168) = v102 << 8;
    DWORD1(v168) = v163;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v109, v107, (const llvm::MachineOperand *)&v168);
    result = 1;
  }
  while (v102 != 3);
  return result;
}

uint64_t sub_1C479C924(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  llvm::MachineFunction *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v32;
  BOOL v33;
  char v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  llvm::MachineFunction *v42;
  unsigned __int8 *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  llvm::MachineFunction *v86;
  unsigned __int8 *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  llvm::MachineFunction *v98;
  unsigned __int8 *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  llvm::MachineFunction *v110;
  unsigned __int8 *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t *v141;
  _QWORD *v142;
  uint64_t v143;
  unsigned __int8 *v144;
  uint64_t v145;
  _QWORD *v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  uint64_t v153;
  llvm::MachineFunction *v154;
  unsigned __int8 *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  _BOOL4 v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t *v173;
  _QWORD *v174;
  uint64_t v175;
  unsigned __int8 *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t *v183;
  _QWORD *v184;
  uint64_t v185;
  llvm::MachineFunction *v186;
  unsigned __int8 *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t *v196;
  uint64_t v197;
  llvm::MachineFunction *v198;
  unsigned __int8 *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  _QWORD *v206;
  int v207;
  int v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int8 *v217;
  uint64_t v218;
  char *v219;
  unsigned int v220;
  int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  unsigned int v232;
  int v233;
  int v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  _QWORD *v243;
  uint64_t v244;
  llvm::MachineFunction *v245;
  unsigned __int8 *v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t *v308;
  _QWORD *v309;
  uint64_t v310;
  llvm::MachineFunction *v311;
  unsigned __int8 *v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unsigned int v321;
  unsigned int v322;
  llvm::MachineFunction *v323;
  unsigned int v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int v340;
  int v341;
  llvm::MachineFunction *v342;
  int v343;
  unsigned int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int IncompleteVirtualRegister;
  int v352;
  int v353;
  unsigned int v354;
  int v355;
  unsigned int v356;
  uint64_t v357;
  int v358;
  _QWORD *v359;
  int v360;
  int v361;
  unsigned __int8 *v362;
  __int128 v363;
  __int128 v364;

  v3 = (_QWORD *)a1;
  v360 = 0;
  v4 = 0;
  if (!sub_1C4786904(a1, *(_QWORD *)a2, &v360))
    return v4;
  v5 = sub_1C47A836C((uint64_t)v3, (unsigned __int8 *)a2);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(_QWORD *)a2;
  v8 = sub_1C4786340((uint64_t)v3, *(_QWORD *)(a2 - 32), v3[34]);
  v359 = v3;
  if (v8 == -1)
  {
    v23 = v3[32];
    v24 = *(unsigned __int8 *)(v23 + 280);
    v25 = *(_BYTE *)(v23 + 280) != 0;
    v26 = *(_QWORD *)(a2 - 32);
    v27 = *(_DWORD *)(*(_QWORD *)v26 + 8);
    if ((v27 & 0xFE) == 0x12)
      v27 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v26 + 16) + 8);
    if ((v27 & 0xFFFFFF00) != 0x4000 || *(unsigned __int8 *)(v26 + 16) - 11 < 2)
      return 0;
    v361 = 0;
    v4 = 0;
    if (!sub_1C4786904((uint64_t)v3, *(_QWORD *)a2, &v361))
      return v4;
    v4 = 0;
    v28 = v361;
    if (v361 > 95)
    {
      if (v361 > 255)
      {
        if (v361 == 256)
        {
          v29 = 6;
        }
        else
        {
          if (v361 != 512)
            return v4;
          v29 = 7;
        }
      }
      else if (v361 == 96)
      {
        v29 = 4;
      }
      else
      {
        if (v361 != 128)
          return v4;
        v29 = 5;
      }
    }
    else if (v361 > 47)
    {
      if (v361 == 48)
      {
        v29 = 2;
      }
      else
      {
        if (v361 != 64)
          return v4;
        v29 = 3;
      }
    }
    else if (v361 == 16)
    {
      v29 = 0;
    }
    else
    {
      if (v361 != 32)
        return v4;
      v29 = 1;
    }
    v219 = (char *)&dword_1E7F94848[6 * v29];
    v220 = *(_DWORD *)&v219[8 * (v24 != 0)];
    if (!v220)
      return 0;
    v357 = *((_QWORD *)v219 + 2);
    v221 = sub_1C47A836C((uint64_t)v3, (unsigned __int8 *)a2);
    if (!v221)
      return 0;
    v222 = *(unsigned __int8 *)(v26 + 16);
    v355 = v221;
    if (v222 == 77)
    {
      if (*(_QWORD *)(a2 + 40) != *(_QWORD *)(v26 + 40))
        goto LABEL_333;
      v26 = *(_QWORD *)(v26 - 32);
      v222 = *(unsigned __int8 *)(v26 + 16);
    }
    if (v222 == 62)
    {
      v223 = *(_QWORD *)(v26 + 8);
      if (v223)
      {
        if (!*(_QWORD *)(v223 + 8) && *(_QWORD *)(v26 + 40) == *(_QWORD *)(a2 + 40))
        {
          v224 = **(_QWORD **)(v26 - 32 * (*(_DWORD *)(v26 + 20) & 0x7FFFFFF));
          v225 = *(_DWORD *)(v224 + 8);
          if ((v225 & 0xFE) == 0x12)
            v225 = *(_DWORD *)(**(_QWORD **)(v224 + 16) + 8);
          if ((v225 & 0xFFFFFF00) == 0x4000)
          {
            if (!v24)
            {
              LODWORD(v363) = 0;
              v226 = v3[6];
              IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v226, "", 0);
              *(_QWORD *)(*(_QWORD *)(v226 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F982A8;
              v227 = *(_QWORD *)(v226 + 8);
              if (v227)
                (*(void (**)(uint64_t))(*(_QWORD *)v227 + 24))(v227);
              if (sub_1C479783C((uint64_t)v3, v26, IncompleteVirtualRegister, 1, 0, &v363))
              {
                v228 = dword_1E7F94848[6 * v29 + 3];
                if (v363 % v228)
                {
                  if ((v363 & 3) != 0)
                    goto LABEL_326;
                  v340 = v363 >> 2;
                  v220 = *((_DWORD *)v219 + 1);
                }
                else
                {
                  v340 = v363 / v228;
                }
                v25 = 0;
                v232 = v340;
LABEL_506:
                v234 = IncompleteVirtualRegister;
                if (IncompleteVirtualRegister)
                {
LABEL_335:
                  v352 = v234;
                  v235 = v355;
                  if (v28 >= 0x21)
                  {
                    v236 = v3[6];
                    v235 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v236, "", 0);
                    *(_QWORD *)(*(_QWORD *)(v236 + 24) + 16 * (v235 & 0x7FFFFFFF)) = v357 & 0xFFFFFFFFFFFFFFFBLL;
                    v237 = *(_QWORD *)(v236 + 8);
                    if (v237)
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v237 + 24))(v237);
                      if (!v235)
                        return 0;
                    }
                    else if (!v235)
                    {
                      return 0;
                    }
                  }
                  v358 = v235;
                  if (v25)
                  {
                    v341 = sub_1C6126FBC((uint64_t)v3, v352);
                    v238 = v3[6];
                    v348 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v238, "", 0);
                    *(_QWORD *)(*(_QWORD *)(v238 + 24) + 16 * (v348 & 0x7FFFFFFF)) = &off_1E7F982A8;
                    v239 = *(_QWORD *)(v238 + 8);
                    if (v239)
                      (*(void (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239);
                    v240 = v3[4];
                    v241 = *(_QWORD *)(v240 + 640);
                    v242 = *(uint64_t **)(v240 + 648);
                    v243 = v3;
                    v244 = *(_QWORD *)(v3[12] + 8);
                    v245 = *(llvm::MachineFunction **)(v241 + 32);
                    v246 = (unsigned __int8 *)v243[9];
                    v362 = v246;
                    v342 = v245;
                    if (v246)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v362, v246, 2);
                      v245 = v342;
                    }
                    v247 = v244 + 622896;
                    v248 = *((_QWORD *)v245 + 28);
                    if (v248)
                    {
                      *((_QWORD *)v245 + 28) = *(_QWORD *)v248;
                    }
                    else
                    {
                      v300 = sub_1C484358C((uint64_t)v245 + 128, 72, 3);
                      v245 = v342;
                      v248 = v300;
                    }
                    *(_QWORD *)&v363 = v362;
                    if (v362)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
                      v245 = v342;
                      v362 = 0;
                    }
                    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v248, v245, v247, (unsigned __int8 **)&v363, 0);
                    if ((_QWORD)v363)
                      llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
                    if (v362)
                      llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
                    v301 = *(_QWORD *)(v241 + 40);
                    *(_QWORD *)(v248 + 24) = v301;
                    v302 = *(_QWORD *)(v301 + 32);
                    v303 = *(unsigned int *)(v248 + 40);
                    if ((_DWORD)v303)
                    {
                      v333 = *(_QWORD *)(v248 + 32);
                      v334 = *(_QWORD *)(v302 + 40);
                      v335 = 32 * v303;
                      do
                      {
                        if (!*(_BYTE *)v333)
                        {
                          v336 = *(unsigned int *)(v333 + 4);
                          if ((int)v336 >= 0)
                            v337 = (uint64_t *)(*(_QWORD *)(v334 + 272) + 8 * v336);
                          else
                            v337 = (uint64_t *)(*(_QWORD *)(v334 + 24) + 16 * (v336 & 0x7FFFFFFF) + 8);
                          v338 = *v337;
                          if (*v337)
                          {
                            v339 = *(_QWORD *)(v338 + 16);
                            *(_QWORD *)(v338 + 16) = v333;
                            *(_QWORD *)(v333 + 16) = v339;
                            if ((*(_BYTE *)(v333 + 3) & 1) != 0)
                            {
                              *(_QWORD *)(v333 + 24) = v338;
                            }
                            else
                            {
                              *(_QWORD *)(v333 + 24) = 0;
                              v337 = (uint64_t *)(v339 + 24);
                            }
                          }
                          else
                          {
                            *(_QWORD *)(v333 + 16) = v333;
                            *(_QWORD *)(v333 + 24) = 0;
                          }
                          *v337 = v333;
                        }
                        v333 += 32;
                        v335 -= 32;
                      }
                      while (v335);
                    }
                    v304 = *(_QWORD *)(v302 + 728);
                    if (v304)
                      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v304 + 24))(v304, v248);
                    v305 = *v242 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v248 = v305 | *(_QWORD *)v248 & 7;
                    *(_QWORD *)(v248 + 8) = v242;
                    *(_QWORD *)(v305 + 8) = v248;
                    *v242 = *v242 & 7 | v248;
                    *((_QWORD *)&v363 + 1) = 0;
                    v364 = 0uLL;
                    v278 = v348;
                    LODWORD(v363) = 0x1000000;
                    DWORD1(v363) = v348;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v248, v342, (const llvm::MachineOperand *)&v363);
                    LODWORD(v363) = 1;
                    *((_QWORD *)&v363 + 1) = 0;
                    *(_QWORD *)&v364 = 0;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v248, v342, (const llvm::MachineOperand *)&v363);
                    *((_QWORD *)&v363 + 1) = 0;
                    v364 = 0uLL;
                    LODWORD(v363) = v341 << 8;
                    DWORD1(v363) = v352;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v248, v342, (const llvm::MachineOperand *)&v363);
                    LODWORD(v363) = 1;
                    *((_QWORD *)&v363 + 1) = 0;
                    *(_QWORD *)&v364 = 0;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v248, v342, (const llvm::MachineOperand *)&v363);
                    LODWORD(v363) = 1;
                    *((_QWORD *)&v363 + 1) = 0;
                    *(_QWORD *)&v364 = 0x100000001;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v248, v342, (const llvm::MachineOperand *)&v363);
                    LODWORD(v363) = 1;
                    *((_QWORD *)&v363 + 1) = 0;
                    *(_QWORD *)&v364 = 0;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v248, v342, (const llvm::MachineOperand *)&v363);
                    v363 = 0u;
                    v364 = 0u;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v248, v342, (const llvm::MachineOperand *)&v363);
                    v3 = v359;
                  }
                  else
                  {
                    v278 = v352;
                  }
                  v344 = v232;
                  v349 = v278;
                  v353 = sub_1C6126FBC((uint64_t)v3, v278);
                  v306 = v3[4];
                  v307 = *(_QWORD *)(v306 + 640);
                  v308 = *(unint64_t **)(v306 + 648);
                  v309 = v3;
                  v310 = *(_QWORD *)(v3[12] + 8);
                  v311 = *(llvm::MachineFunction **)(v307 + 32);
                  v312 = (unsigned __int8 *)v309[9];
                  v362 = v312;
                  if (v312)
                    llvm::MetadataTracking::track((uint64_t)&v362, v312, 2);
                  v313 = v310 + 48 * v220;
                  v314 = *((_QWORD *)v311 + 28);
                  if (v314)
                    *((_QWORD *)v311 + 28) = *(_QWORD *)v314;
                  else
                    v314 = sub_1C484358C((uint64_t)v311 + 128, 72, 3);
                  *(_QWORD *)&v363 = v362;
                  if (v362)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
                    v362 = 0;
                  }
                  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v314, v311, v313, (unsigned __int8 **)&v363, 0);
                  if ((_QWORD)v363)
                    llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
                  if (v362)
                    llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
                  v315 = *(_QWORD *)(v307 + 40);
                  *(_QWORD *)(v314 + 24) = v315;
                  v316 = *(_QWORD *)(v315 + 32);
                  v317 = *(unsigned int *)(v314 + 40);
                  if ((_DWORD)v317)
                  {
                    v326 = *(_QWORD *)(v314 + 32);
                    v327 = *(_QWORD *)(v316 + 40);
                    v328 = 32 * v317;
                    do
                    {
                      if (!*(_BYTE *)v326)
                      {
                        v329 = *(unsigned int *)(v326 + 4);
                        if ((int)v329 >= 0)
                          v330 = (uint64_t *)(*(_QWORD *)(v327 + 272) + 8 * v329);
                        else
                          v330 = (uint64_t *)(*(_QWORD *)(v327 + 24) + 16 * (v329 & 0x7FFFFFFF) + 8);
                        v331 = *v330;
                        if (*v330)
                        {
                          v332 = *(_QWORD *)(v331 + 16);
                          *(_QWORD *)(v331 + 16) = v326;
                          *(_QWORD *)(v326 + 16) = v332;
                          if ((*(_BYTE *)(v326 + 3) & 1) != 0)
                          {
                            *(_QWORD *)(v326 + 24) = v331;
                          }
                          else
                          {
                            *(_QWORD *)(v326 + 24) = 0;
                            v330 = (uint64_t *)(v332 + 24);
                          }
                        }
                        else
                        {
                          *(_QWORD *)(v326 + 16) = v326;
                          *(_QWORD *)(v326 + 24) = 0;
                        }
                        *v330 = v326;
                      }
                      v326 += 32;
                      v328 -= 32;
                    }
                    while (v328);
                  }
                  v318 = *(_QWORD *)(v316 + 728);
                  if (v318)
                    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v318 + 24))(v318, v314);
                  v319 = *v308 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v314 = v319 | *(_QWORD *)v314 & 7;
                  *(_QWORD *)(v314 + 8) = v308;
                  *(_QWORD *)(v319 + 8) = v314;
                  *v308 = *v308 & 7 | v314;
                  *((_QWORD *)&v363 + 1) = 0;
                  v364 = 0uLL;
                  LODWORD(v363) = 0x1000000;
                  DWORD1(v363) = v358;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v314, v311, (const llvm::MachineOperand *)&v363);
                  *((_QWORD *)&v363 + 1) = 0;
                  v364 = 0uLL;
                  LODWORD(v363) = v353 << 8;
                  DWORD1(v363) = v349;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v314, v311, (const llvm::MachineOperand *)&v363);
                  if (!v24)
                  {
                    LODWORD(v363) = 1;
                    *((_QWORD *)&v363 + 1) = 0;
                    *(_QWORD *)&v364 = v344;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v314, v311, (const llvm::MachineOperand *)&v363);
                  }
                  v4 = 1;
                  LODWORD(v363) = 1;
                  *((_QWORD *)&v363 + 1) = 0;
                  *(_QWORD *)&v364 = 0;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v314, v311, (const llvm::MachineOperand *)&v363);
                  LODWORD(v363) = 1;
                  *((_QWORD *)&v363 + 1) = 0;
                  *(_QWORD *)&v364 = 0;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v314, v311, (const llvm::MachineOperand *)&v363);
                  v363 = 0u;
                  v364 = 0u;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v314, v311, (const llvm::MachineOperand *)&v363);
                  v320 = v26 & 0xFFFFFFFFFFFFFFFBLL;
                  v321 = *(_DWORD *)(*(_QWORD *)v26 + 8);
                  if ((v321 & 0xFE) == 0x12)
                    v321 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v26 + 16) + 8);
                  v322 = v321 >> 8;
                  v323 = *(llvm::MachineFunction **)(*(_QWORD *)(v314 + 24) + 32);
                  v324 = *(unsigned __int8 *)(a2 + 18);
                  v325 = sub_1C484358C((uint64_t)v323 + 128, 80, 3);
                  *(_QWORD *)v325 = v320;
                  *(_QWORD *)(v325 + 8) = 0;
                  *(_DWORD *)(v325 + 16) = v322;
                  *(_BYTE *)(v325 + 20) = 0;
                  *(_QWORD *)(v325 + 24) = ((unint64_t)((unsigned __int16)v28 >> 3) << 6) | 1;
                  *(_BYTE *)(v325 + 34) = (v324 >> 1) & 0x3F;
                  *(_OWORD *)(v325 + 40) = 0u;
                  *(_OWORD *)(v325 + 56) = 0u;
                  *(_QWORD *)(v325 + 72) = 0;
                  *(_WORD *)(v325 + 36) = 1;
                  *(_WORD *)(v325 + 32) = 33;
                  llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v314, v323, (llvm::MachineMemOperand *)v325);
                  v207 = v355;
                  v208 = v358;
                  v206 = v359;
                  if (v358 == v355)
                    return v4;
                  v209 = v28;
                  goto LABEL_285;
                }
LABEL_334:
                v234 = sub_1C47A836C((uint64_t)v3, (unsigned __int8 *)v26);
                if (!v234)
                  return 0;
                goto LABEL_335;
              }
            }
LABEL_326:
            v229 = v3[6];
            v230 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v229, "", 0);
            *(_QWORD *)(*(_QWORD *)(v229 + 24) + 16 * (v230 & 0x7FFFFFFF)) = &off_1E7F982A8;
            v231 = *(_QWORD *)(v229 + 8);
            if (v231)
              (*(void (**)(uint64_t))(*(_QWORD *)v231 + 24))(v231);
            IncompleteVirtualRegister = v230;
            v232 = 0;
            v233 = sub_1C479783C((uint64_t)v3, v26, v230, 1, v24 != 0, 0) ^ 1;
            if (v24)
              v25 = v233;
            else
              v25 = 0;
            if ((v233 & 1) != 0)
              goto LABEL_334;
            goto LABEL_506;
          }
        }
      }
    }
LABEL_333:
    v232 = 0;
    goto LABEL_334;
  }
  if ((v8 & 1) != 0 && *(_DWORD *)(v7 + 8) != 2061)
    return 0;
  v9 = **(_QWORD **)(a2 - 32);
  v10 = *(_DWORD *)(v9 + 8);
  if ((v10 & 0xFE) == 0x12)
    v10 = *(_DWORD *)(**(_QWORD **)(v9 + 16) + 8);
  v354 = v10 >> 8;
  v356 = v8 >> 1;
  v11 = *(_DWORD *)(v7 + 8);
  v12 = v11 != 18 || v7 == 0;
  v350 = v6;
  if (v12)
  {
    if (v11 == 2 || (v13 = *(_DWORD *)(v7 + 8) >> 8, v11 == 13) && v13 == 32)
    {
      v14 = v3[4];
      v15 = *(_QWORD *)(v14 + 640);
      v16 = *(unint64_t **)(v14 + 648);
      v17 = v3;
      v18 = *(_QWORD *)(v3[12] + 8);
      v19 = *(llvm::MachineFunction **)(v15 + 32);
      v20 = (unsigned __int8 *)v17[9];
      v362 = v20;
      if (v20)
        llvm::MetadataTracking::track((uint64_t)&v362, v20, 2);
      v21 = v18 + 66288;
      v22 = *((_QWORD *)v19 + 28);
      if (v22)
        *((_QWORD *)v19 + 28) = *(_QWORD *)v22;
      else
        v22 = sub_1C484358C((uint64_t)v19 + 128, 72, 3);
      *(_QWORD *)&v363 = v362;
      if (v362)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
        v362 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v22, v19, v21, (unsigned __int8 **)&v363, 0);
      if ((_QWORD)v363)
        llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
      if (v362)
        llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
      v57 = *(_QWORD *)(v15 + 40);
      *(_QWORD *)(v22 + 24) = v57;
      v58 = *(_QWORD *)(v57 + 32);
      v59 = *(unsigned int *)(v22 + 40);
      if ((_DWORD)v59)
      {
        v210 = *(_QWORD *)(v22 + 32);
        v211 = *(_QWORD *)(v58 + 40);
        v212 = 32 * v59;
        do
        {
          if (!*(_BYTE *)v210)
          {
            v213 = *(unsigned int *)(v210 + 4);
            if ((int)v213 >= 0)
              v214 = (uint64_t *)(*(_QWORD *)(v211 + 272) + 8 * v213);
            else
              v214 = (uint64_t *)(*(_QWORD *)(v211 + 24) + 16 * (v213 & 0x7FFFFFFF) + 8);
            v215 = *v214;
            if (*v214)
            {
              v216 = *(_QWORD *)(v215 + 16);
              *(_QWORD *)(v215 + 16) = v210;
              *(_QWORD *)(v210 + 16) = v216;
              if ((*(_BYTE *)(v210 + 3) & 1) != 0)
              {
                *(_QWORD *)(v210 + 24) = v215;
              }
              else
              {
                *(_QWORD *)(v210 + 24) = 0;
                v214 = (uint64_t *)(v216 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v210 + 16) = v210;
              *(_QWORD *)(v210 + 24) = 0;
            }
            *v214 = v210;
          }
          v210 += 32;
          v212 -= 32;
        }
        while (v212);
      }
      v60 = *(_QWORD *)(v58 + 728);
      if (v60)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v60 + 24))(v60, v22);
      v61 = *v16 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v22 = v61 | *(_QWORD *)v22 & 7;
      *(_QWORD *)(v22 + 8) = v16;
      *(_QWORD *)(v61 + 8) = v22;
      *v16 = *v16 & 7 | v22;
      *((_QWORD *)&v363 + 1) = 0;
      v364 = 0uLL;
      LODWORD(v363) = 0x1000000;
      DWORD1(v363) = v6;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
      v4 = 1;
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
      *((_QWORD *)&v363 + 1) = 0;
      v63 = v354;
      v62 = v356;
      LODWORD(v364) = v354;
      DWORD2(v364) = 0;
      v64 = 1031;
      goto LABEL_86;
    }
    if (v11 != 15)
    {
      if (v11 == 13 && v13 == 8)
      {
        v139 = v3[4];
        v140 = *(_QWORD *)(v139 + 640);
        v141 = *(unint64_t **)(v139 + 648);
        v142 = v3;
        v143 = *(_QWORD *)(v3[12] + 8);
        if ((v8 & 1) != 0)
        {
          v19 = *(llvm::MachineFunction **)(v140 + 32);
          v217 = (unsigned __int8 *)v142[9];
          v362 = v217;
          if (v217)
            llvm::MetadataTracking::track((uint64_t)&v362, v217, 2);
          v218 = v143 + 633648;
          v22 = *((_QWORD *)v19 + 28);
          if (v22)
            *((_QWORD *)v19 + 28) = *(_QWORD *)v22;
          else
            v22 = sub_1C484358C((uint64_t)v19 + 128, 72, 3);
          *(_QWORD *)&v363 = v362;
          if (v362)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
            v362 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v22, v19, v218, (unsigned __int8 **)&v363, 0);
          if ((_QWORD)v363)
            llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
          if (v362)
            llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
          v259 = *(_QWORD *)(v140 + 40);
          *(_QWORD *)(v22 + 24) = v259;
          v260 = *(_QWORD *)(v259 + 32);
          v261 = *(unsigned int *)(v22 + 40);
          if ((_DWORD)v261)
          {
            v293 = *(_QWORD *)(v22 + 32);
            v294 = *(_QWORD *)(v260 + 40);
            v295 = 32 * v261;
            do
            {
              if (!*(_BYTE *)v293)
              {
                v296 = *(unsigned int *)(v293 + 4);
                if ((int)v296 >= 0)
                  v297 = (uint64_t *)(*(_QWORD *)(v294 + 272) + 8 * v296);
                else
                  v297 = (uint64_t *)(*(_QWORD *)(v294 + 24) + 16 * (v296 & 0x7FFFFFFF) + 8);
                v298 = *v297;
                if (*v297)
                {
                  v299 = *(_QWORD *)(v298 + 16);
                  *(_QWORD *)(v298 + 16) = v293;
                  *(_QWORD *)(v293 + 16) = v299;
                  if ((*(_BYTE *)(v293 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v293 + 24) = v298;
                  }
                  else
                  {
                    *(_QWORD *)(v293 + 24) = 0;
                    v297 = (uint64_t *)(v299 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v293 + 16) = v293;
                  *(_QWORD *)(v293 + 24) = 0;
                }
                *v297 = v293;
                v6 = v350;
              }
              v293 += 32;
              v295 -= 32;
            }
            while (v295);
          }
          v262 = *(_QWORD *)(v260 + 728);
          if (v262)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v262 + 24))(v262, v22);
          v263 = *v141 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v22 = v263 | *(_QWORD *)v22 & 7;
          *(_QWORD *)(v22 + 8) = v141;
          *(_QWORD *)(v263 + 8) = v22;
          *v141 = *v141 & 7 | v22;
          *((_QWORD *)&v363 + 1) = 0;
          v364 = 0uLL;
          LODWORD(v363) = 0x1000000;
          DWORD1(v363) = v6;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
          v4 = 1;
          LODWORD(v363) = 1;
          *((_QWORD *)&v363 + 1) = 0;
          *(_QWORD *)&v364 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
          LODWORD(v363) = 1;
          *((_QWORD *)&v363 + 1) = 0;
          *(_QWORD *)&v364 = 0x100000008;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
          *((_QWORD *)&v363 + 1) = 0;
          LODWORD(v364) = v354;
          DWORD2(v364) = 0;
          LODWORD(v363) = 519;
          DWORD1(v363) = v356;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
          LODWORD(v363) = 1;
          *((_QWORD *)&v363 + 1) = 0;
          *(_QWORD *)&v364 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
          LODWORD(v363) = 1;
          *((_QWORD *)&v363 + 1) = 0;
          *(_QWORD *)&v364 = 0x100000008;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
          LODWORD(v363) = 1;
          *((_QWORD *)&v363 + 1) = 0;
          *(_QWORD *)&v364 = 0;
        }
        else
        {
          v19 = *(llvm::MachineFunction **)(v140 + 32);
          v144 = (unsigned __int8 *)v142[9];
          v362 = v144;
          if (v144)
            llvm::MetadataTracking::track((uint64_t)&v362, v144, 2);
          v145 = v143 + 17904;
          v22 = *((_QWORD *)v19 + 28);
          if (v22)
            *((_QWORD *)v19 + 28) = *(_QWORD *)v22;
          else
            v22 = sub_1C484358C((uint64_t)v19 + 128, 72, 3);
          *(_QWORD *)&v363 = v362;
          if (v362)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
            v362 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v22, v19, v145, (unsigned __int8 **)&v363, 0);
          if ((_QWORD)v363)
            llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
          if (v362)
            llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
          v254 = *(_QWORD *)(v140 + 40);
          *(_QWORD *)(v22 + 24) = v254;
          v255 = *(_QWORD *)(v254 + 32);
          v256 = *(unsigned int *)(v22 + 40);
          if ((_DWORD)v256)
          {
            v286 = *(_QWORD *)(v22 + 32);
            v287 = *(_QWORD *)(v255 + 40);
            v288 = 32 * v256;
            do
            {
              if (!*(_BYTE *)v286)
              {
                v289 = *(unsigned int *)(v286 + 4);
                if ((int)v289 >= 0)
                  v290 = (uint64_t *)(*(_QWORD *)(v287 + 272) + 8 * v289);
                else
                  v290 = (uint64_t *)(*(_QWORD *)(v287 + 24) + 16 * (v289 & 0x7FFFFFFF) + 8);
                v291 = *v290;
                if (*v290)
                {
                  v292 = *(_QWORD *)(v291 + 16);
                  *(_QWORD *)(v291 + 16) = v286;
                  *(_QWORD *)(v286 + 16) = v292;
                  if ((*(_BYTE *)(v286 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v286 + 24) = v291;
                  }
                  else
                  {
                    *(_QWORD *)(v286 + 24) = 0;
                    v290 = (uint64_t *)(v292 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v286 + 16) = v286;
                  *(_QWORD *)(v286 + 24) = 0;
                }
                *v290 = v286;
                v6 = v350;
              }
              v286 += 32;
              v288 -= 32;
            }
            while (v288);
          }
          v257 = *(_QWORD *)(v255 + 728);
          if (v257)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v257 + 24))(v257, v22);
          v258 = *v141 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v22 = v258 | *(_QWORD *)v22 & 7;
          *(_QWORD *)(v22 + 8) = v141;
          *(_QWORD *)(v258 + 8) = v22;
          *v141 = *v141 & 7 | v22;
          *((_QWORD *)&v363 + 1) = 0;
          v364 = 0uLL;
          LODWORD(v363) = 0x1000000;
          DWORD1(v363) = v6;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
          v4 = 1;
          LODWORD(v363) = 1;
          *((_QWORD *)&v363 + 1) = 0;
          *(_QWORD *)&v364 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
          *((_QWORD *)&v363 + 1) = 0;
          LODWORD(v364) = v354;
          DWORD2(v364) = 0;
          LODWORD(v363) = 519;
          DWORD1(v363) = v356;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
          LODWORD(v363) = 1;
          *((_QWORD *)&v363 + 1) = 0;
          *(_QWORD *)&v364 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
          LODWORD(v363) = 1;
          *((_QWORD *)&v363 + 1) = 0;
          *(_QWORD *)&v364 = 0x1000000FFLL;
        }
        goto LABEL_87;
      }
      v170 = v11 == 13 && v13 == 16;
      if (*(_DWORD *)(v7 + 8) && !v170)
        return 0;
      v171 = v3[4];
      v172 = *(_QWORD *)(v171 + 640);
      v173 = *(unint64_t **)(v171 + 648);
      v174 = v3;
      v175 = *(_QWORD *)(v3[12] + 8);
      v19 = *(llvm::MachineFunction **)(v172 + 32);
      v176 = (unsigned __int8 *)v174[9];
      v362 = v176;
      if (v176)
        llvm::MetadataTracking::track((uint64_t)&v362, v176, 2);
      v177 = v175 + 48144;
      v22 = *((_QWORD *)v19 + 28);
      if (v22)
        *((_QWORD *)v19 + 28) = *(_QWORD *)v22;
      else
        v22 = sub_1C484358C((uint64_t)v19 + 128, 72, 3);
      *(_QWORD *)&v363 = v362;
      if (v362)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
        v362 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v22, v19, v177, (unsigned __int8 **)&v363, 0);
      if ((_QWORD)v363)
        llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
      if (v362)
        llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
      v249 = *(_QWORD *)(v172 + 40);
      *(_QWORD *)(v22 + 24) = v249;
      v250 = *(_QWORD *)(v249 + 32);
      v251 = *(unsigned int *)(v22 + 40);
      if ((_DWORD)v251)
      {
        v279 = *(_QWORD *)(v22 + 32);
        v280 = *(_QWORD *)(v250 + 40);
        v281 = 32 * v251;
        do
        {
          if (!*(_BYTE *)v279)
          {
            v282 = *(unsigned int *)(v279 + 4);
            if ((int)v282 >= 0)
              v283 = (uint64_t *)(*(_QWORD *)(v280 + 272) + 8 * v282);
            else
              v283 = (uint64_t *)(*(_QWORD *)(v280 + 24) + 16 * (v282 & 0x7FFFFFFF) + 8);
            v284 = *v283;
            if (*v283)
            {
              v285 = *(_QWORD *)(v284 + 16);
              *(_QWORD *)(v284 + 16) = v279;
              *(_QWORD *)(v279 + 16) = v285;
              if ((*(_BYTE *)(v279 + 3) & 1) != 0)
              {
                *(_QWORD *)(v279 + 24) = v284;
              }
              else
              {
                *(_QWORD *)(v279 + 24) = 0;
                v283 = (uint64_t *)(v285 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v279 + 16) = v279;
              *(_QWORD *)(v279 + 24) = 0;
            }
            *v283 = v279;
            v6 = v350;
          }
          v279 += 32;
          v281 -= 32;
        }
        while (v281);
      }
      v252 = *(_QWORD *)(v250 + 728);
      if (v252)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v252 + 24))(v252, v22);
      v253 = *v173 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v22 = v253 | *(_QWORD *)v22 & 7;
      *(_QWORD *)(v22 + 8) = v173;
      *(_QWORD *)(v253 + 8) = v22;
      *v173 = *v173 & 7 | v22;
      *((_QWORD *)&v363 + 1) = 0;
      v364 = 0uLL;
      LODWORD(v363) = 0x1000000;
      DWORD1(v363) = v6;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
      v4 = 1;
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
      *((_QWORD *)&v363 + 1) = 0;
      v63 = v354;
      v62 = v356;
      LODWORD(v364) = v354;
      DWORD2(v364) = 0;
      v64 = 519;
      LODWORD(v363) = 519;
      DWORD1(v363) = v356;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
      *((_QWORD *)&v363 + 1) = 0;
      LODWORD(v364) = v354;
      DWORD2(v364) = 0;
LABEL_86:
      *(_QWORD *)&v363 = __PAIR64__(v62, v64);
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
      LODWORD(v364) = v63;
      DWORD2(v364) = 0;
      v363 = __PAIR64__(v62, v64);
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
      LODWORD(v364) = v63;
      DWORD2(v364) = 0;
      v363 = __PAIR64__(v62, v64);
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
      v363 = 0u;
      v364 = 0u;
LABEL_87:
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
      v363 = 0u;
      v364 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v19, (const llvm::MachineOperand *)&v363);
      return v4;
    }
    v65 = v3[6];
    if ((_UNKNOWN ***)(*(_QWORD *)(*(_QWORD *)(v65 + 24) + 16 * (v6 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E7F98AB8)
    {
      v67 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v3[6], "", 0);
      *(_QWORD *)(*(_QWORD *)(v65 + 24) + 16 * (v67 & 0x7FFFFFFF)) = &off_1E7F98468;
      v178 = *(_QWORD *)(v65 + 8);
      if (v178)
        (*(void (**)(uint64_t))(*(_QWORD *)v178 + 24))(v178);
      v179 = v3[6];
      v66 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v179, "", 0);
      *(_QWORD *)(*(_QWORD *)(v179 + 24) + 16 * (v66 & 0x7FFFFFFF)) = &off_1E7F98468;
      v180 = *(_QWORD *)(v179 + 8);
      if (v180)
        (*(void (**)(uint64_t))(*(_QWORD *)v180 + 24))(v180);
    }
    else
    {
      v66 = v6 + 1;
      v67 = v6;
    }
    v181 = v3[4];
    v182 = *(_QWORD *)(v181 + 640);
    v183 = *(unint64_t **)(v181 + 648);
    v184 = v3;
    v185 = *(_QWORD *)(v3[12] + 8);
    v186 = *(llvm::MachineFunction **)(v182 + 32);
    v187 = (unsigned __int8 *)v184[9];
    v362 = v187;
    if (v187)
      llvm::MetadataTracking::track((uint64_t)&v362, v187, 2);
    v188 = *((_QWORD *)v186 + 28);
    if (v188)
      *((_QWORD *)v186 + 28) = *(_QWORD *)v188;
    else
      v188 = sub_1C484358C((uint64_t)v186 + 128, 72, 3);
    *(_QWORD *)&v363 = v362;
    if (v362)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
      v362 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v188, v186, v185 + 66288, (unsigned __int8 **)&v363, 0);
    if ((_QWORD)v363)
      llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
    if (v362)
      llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
    v189 = *(_QWORD *)(v182 + 40);
    *(_QWORD *)(v188 + 24) = v189;
    v190 = *(_QWORD *)(v189 + 32);
    v191 = *(unsigned int *)(v188 + 40);
    if ((_DWORD)v191)
    {
      v264 = *(_QWORD *)(v188 + 32);
      v265 = *(_QWORD *)(v190 + 40);
      v266 = 32 * v191;
      do
      {
        if (!*(_BYTE *)v264)
        {
          v267 = *(unsigned int *)(v264 + 4);
          if ((int)v267 >= 0)
            v268 = (uint64_t *)(*(_QWORD *)(v265 + 272) + 8 * v267);
          else
            v268 = (uint64_t *)(*(_QWORD *)(v265 + 24) + 16 * (v267 & 0x7FFFFFFF) + 8);
          v269 = *v268;
          if (*v268)
          {
            v270 = *(_QWORD *)(v269 + 16);
            *(_QWORD *)(v269 + 16) = v264;
            *(_QWORD *)(v264 + 16) = v270;
            if ((*(_BYTE *)(v264 + 3) & 1) != 0)
            {
              *(_QWORD *)(v264 + 24) = v269;
            }
            else
            {
              *(_QWORD *)(v264 + 24) = 0;
              v268 = (uint64_t *)(v270 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v264 + 16) = v264;
            *(_QWORD *)(v264 + 24) = 0;
          }
          *v268 = v264;
        }
        v264 += 32;
        v266 -= 32;
      }
      while (v266);
    }
    v192 = *(_QWORD *)(v190 + 728);
    if (v192)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v192 + 24))(v192, v188);
    v193 = *v183 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v188 = v193 | *(_QWORD *)v188 & 7;
    *(_QWORD *)(v188 + 8) = v183;
    *(_QWORD *)(v193 + 8) = v188;
    *v183 = *v183 & 7 | v188;
    *((_QWORD *)&v363 + 1) = 0;
    v364 = 0uLL;
    LODWORD(v363) = 0x1000000;
    DWORD1(v363) = v66;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v188, v186, (const llvm::MachineOperand *)&v363);
    LODWORD(v363) = 1;
    *((_QWORD *)&v363 + 1) = 0;
    *(_QWORD *)&v364 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v188, v186, (const llvm::MachineOperand *)&v363);
    HIDWORD(v363) = 0;
    LODWORD(v364) = v354;
    DWORD2(v364) = 0;
    LODWORD(v363) = 1031;
    *(_QWORD *)((char *)&v363 + 4) = v356 + 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v188, v186, (const llvm::MachineOperand *)&v363);
    LODWORD(v363) = 1;
    *((_QWORD *)&v363 + 1) = 0;
    *(_QWORD *)&v364 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v188, v186, (const llvm::MachineOperand *)&v363);
    HIDWORD(v363) = 0;
    LODWORD(v364) = v354;
    DWORD2(v364) = 0;
    LODWORD(v363) = 1031;
    *(_QWORD *)((char *)&v363 + 4) = v356 + 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v188, v186, (const llvm::MachineOperand *)&v363);
    LODWORD(v363) = 1;
    *((_QWORD *)&v363 + 1) = 0;
    *(_QWORD *)&v364 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v188, v186, (const llvm::MachineOperand *)&v363);
    HIDWORD(v363) = 0;
    LODWORD(v364) = v354;
    DWORD2(v364) = 0;
    LODWORD(v363) = 1031;
    *(_QWORD *)((char *)&v363 + 4) = v356 + 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v188, v186, (const llvm::MachineOperand *)&v363);
    LODWORD(v363) = 1;
    *((_QWORD *)&v363 + 1) = 0;
    *(_QWORD *)&v364 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v188, v186, (const llvm::MachineOperand *)&v363);
    v363 = 0u;
    v364 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v188, v186, (const llvm::MachineOperand *)&v363);
    LODWORD(v363) = 1;
    *((_QWORD *)&v363 + 1) = 0;
    *(_QWORD *)&v364 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v188, v186, (const llvm::MachineOperand *)&v363);
    v363 = 0u;
    v364 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v188, v186, (const llvm::MachineOperand *)&v363);
    v194 = v359[4];
    v195 = *(_QWORD *)(v194 + 640);
    v196 = *(unint64_t **)(v194 + 648);
    v197 = *(_QWORD *)(v359[12] + 8);
    v198 = *(llvm::MachineFunction **)(v195 + 32);
    v199 = (unsigned __int8 *)v359[9];
    v362 = v199;
    if (v199)
      llvm::MetadataTracking::track((uint64_t)&v362, v199, 2);
    v200 = *((_QWORD *)v198 + 28);
    if (v200)
      *((_QWORD *)v198 + 28) = *(_QWORD *)v200;
    else
      v200 = sub_1C484358C((uint64_t)v198 + 128, 72, 3);
    *(_QWORD *)&v363 = v362;
    if (v362)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
      v362 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v200, v198, v197 + 66288, (unsigned __int8 **)&v363, 0);
    if ((_QWORD)v363)
      llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
    if (v362)
      llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
    v201 = *(_QWORD *)(v195 + 40);
    *(_QWORD *)(v200 + 24) = v201;
    v202 = *(_QWORD *)(v201 + 32);
    v203 = *(unsigned int *)(v200 + 40);
    if ((_DWORD)v203)
    {
      v271 = *(_QWORD *)(v200 + 32);
      v272 = *(_QWORD *)(v202 + 40);
      v273 = 32 * v203;
      do
      {
        if (!*(_BYTE *)v271)
        {
          v274 = *(unsigned int *)(v271 + 4);
          if ((int)v274 >= 0)
            v275 = (uint64_t *)(*(_QWORD *)(v272 + 272) + 8 * v274);
          else
            v275 = (uint64_t *)(*(_QWORD *)(v272 + 24) + 16 * (v274 & 0x7FFFFFFF) + 8);
          v276 = *v275;
          if (*v275)
          {
            v277 = *(_QWORD *)(v276 + 16);
            *(_QWORD *)(v276 + 16) = v271;
            *(_QWORD *)(v271 + 16) = v277;
            if ((*(_BYTE *)(v271 + 3) & 1) != 0)
            {
              *(_QWORD *)(v271 + 24) = v276;
            }
            else
            {
              *(_QWORD *)(v271 + 24) = 0;
              v275 = (uint64_t *)(v277 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v271 + 16) = v271;
            *(_QWORD *)(v271 + 24) = 0;
          }
          *v275 = v271;
        }
        v271 += 32;
        v273 -= 32;
      }
      while (v273);
    }
    v204 = *(_QWORD *)(v202 + 728);
    if (v204)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v204 + 24))(v204, v200);
    v205 = *v196 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v200 = v205 | *(_QWORD *)v200 & 7;
    *(_QWORD *)(v200 + 8) = v196;
    *(_QWORD *)(v205 + 8) = v200;
    *v196 = *v196 & 7 | v200;
    *((_QWORD *)&v363 + 1) = 0;
    v364 = 0uLL;
    LODWORD(v363) = 0x1000000;
    DWORD1(v363) = v67;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v200, v198, (const llvm::MachineOperand *)&v363);
    v4 = 1;
    LODWORD(v363) = 1;
    *((_QWORD *)&v363 + 1) = 0;
    *(_QWORD *)&v364 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v200, v198, (const llvm::MachineOperand *)&v363);
    *((_QWORD *)&v363 + 1) = 0;
    LODWORD(v364) = v354;
    DWORD2(v364) = 0;
    LODWORD(v363) = 1031;
    DWORD1(v363) = v356;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v200, v198, (const llvm::MachineOperand *)&v363);
    LODWORD(v363) = 1;
    *((_QWORD *)&v363 + 1) = 0;
    *(_QWORD *)&v364 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v200, v198, (const llvm::MachineOperand *)&v363);
    *((_QWORD *)&v363 + 1) = 0;
    LODWORD(v364) = v354;
    DWORD2(v364) = 0;
    LODWORD(v363) = 1031;
    DWORD1(v363) = v356;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v200, v198, (const llvm::MachineOperand *)&v363);
    LODWORD(v363) = 1;
    *((_QWORD *)&v363 + 1) = 0;
    *(_QWORD *)&v364 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v200, v198, (const llvm::MachineOperand *)&v363);
    *((_QWORD *)&v363 + 1) = 0;
    LODWORD(v364) = v354;
    DWORD2(v364) = 0;
    LODWORD(v363) = 1031;
    DWORD1(v363) = v356;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v200, v198, (const llvm::MachineOperand *)&v363);
    LODWORD(v363) = 1;
    *((_QWORD *)&v363 + 1) = 0;
    *(_QWORD *)&v364 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v200, v198, (const llvm::MachineOperand *)&v363);
    v363 = 0u;
    v364 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v200, v198, (const llvm::MachineOperand *)&v363);
    LODWORD(v363) = 1;
    *((_QWORD *)&v363 + 1) = 0;
    *(_QWORD *)&v364 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v200, v198, (const llvm::MachineOperand *)&v363);
    v363 = 0u;
    v364 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v200, v198, (const llvm::MachineOperand *)&v363);
    v206 = v359;
    if (v67 == v6)
      return v4;
    v207 = v6;
    v208 = v67;
    v209 = 64;
LABEL_285:
    sub_1C4789F18(v206, v207, v208, v209);
    return 1;
  }
  v30 = *(_DWORD *)(v7 + 32);
  if ((v30 - 5) < 0xFFFFFFFD)
    return 0;
  v32 = *(_DWORD *)(*(_QWORD *)(v7 + 24) + 8);
  if (v32 == 2
    || (v32 >> 8 != 32 ? (v33 = v32 >> 8 == 16) : (v33 = 1),
        !v33 ? (v34 = 0) : (v34 = 1),
        v32 == 13 && (v34 & 1) != 0))
  {
    if ((v30 & 1) != 0 && v32 == 4109)
      goto LABEL_44;
  }
  else
  {
    if (*(_DWORD *)(*(_QWORD *)(v7 + 24) + 8))
      return 0;
    if ((v30 & 1) != 0)
    {
LABEL_44:
      v345 = v360;
      if (v360 >= 1)
      {
        v35 = 0;
        v36 = 0;
        do
        {
          v37 = v3[4];
          v38 = *(_QWORD *)(v37 + 640);
          v39 = *(unint64_t **)(v37 + 648);
          v40 = v3;
          v41 = *(_QWORD *)(v3[12] + 8);
          v42 = *(llvm::MachineFunction **)(v38 + 32);
          v43 = (unsigned __int8 *)v40[9];
          v362 = v43;
          if (v43)
            llvm::MetadataTracking::track((uint64_t)&v362, v43, 2);
          v44 = *((_QWORD *)v42 + 28);
          if (v44)
            *((_QWORD *)v42 + 28) = *(_QWORD *)v44;
          else
            v44 = sub_1C484358C((uint64_t)v42 + 128, 72, 3);
          *(_QWORD *)&v363 = v362;
          if (v362)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
            v362 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v44, v42, v41 + 48144, (unsigned __int8 **)&v363, 0);
          if ((_QWORD)v363)
            llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
          v3 = v359;
          if (v362)
            llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
          v45 = *(_QWORD *)(v38 + 40);
          *(_QWORD *)(v44 + 24) = v45;
          v46 = *(_QWORD *)(v45 + 32);
          v47 = *(unsigned int *)(v44 + 40);
          if ((_DWORD)v47)
          {
            v50 = *(_QWORD *)(v44 + 32);
            v51 = *(_QWORD *)(v46 + 40);
            v52 = 32 * v47;
            do
            {
              if (!*(_BYTE *)v50)
              {
                v53 = *(unsigned int *)(v50 + 4);
                if ((int)v53 >= 0)
                  v54 = (uint64_t *)(*(_QWORD *)(v51 + 272) + 8 * v53);
                else
                  v54 = (uint64_t *)(*(_QWORD *)(v51 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8);
                v55 = *v54;
                if (*v54)
                {
                  v56 = *(_QWORD *)(v55 + 16);
                  *(_QWORD *)(v55 + 16) = v50;
                  *(_QWORD *)(v50 + 16) = v56;
                  if ((*(_BYTE *)(v50 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v50 + 24) = v55;
                  }
                  else
                  {
                    *(_QWORD *)(v50 + 24) = 0;
                    v54 = (uint64_t *)(v56 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v50 + 16) = v50;
                  *(_QWORD *)(v50 + 24) = 0;
                }
                *v54 = v50;
              }
              v50 += 32;
              v52 -= 32;
            }
            while (v52);
          }
          v48 = *(_QWORD *)(v46 + 728);
          if (v48)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v48 + 24))(v48, v44);
          v49 = *v39 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v44 = v49 | *(_QWORD *)v44 & 7;
          *(_QWORD *)(v44 + 8) = v39;
          *(_QWORD *)(v49 + 8) = v44;
          *v39 = *v39 & 7 | v44;
          HIDWORD(v363) = 0;
          v364 = 0uLL;
          *(_QWORD *)((char *)&v363 + 4) = (v35 + v6);
          LODWORD(v363) = 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v363);
          v4 = 1;
          LODWORD(v363) = 1;
          *((_QWORD *)&v363 + 1) = 0;
          *(_QWORD *)&v364 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v363);
          HIDWORD(v363) = 0;
          LODWORD(v364) = v354;
          DWORD2(v364) = 0;
          LODWORD(v363) = 519;
          *(_QWORD *)((char *)&v363 + 4) = v35 + v356;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v363);
          LODWORD(v363) = 1;
          *((_QWORD *)&v363 + 1) = 0;
          *(_QWORD *)&v364 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v363);
          HIDWORD(v363) = 0;
          LODWORD(v364) = v354;
          DWORD2(v364) = 0;
          LODWORD(v363) = 519;
          *(_QWORD *)((char *)&v363 + 4) = v35 + v356;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v363);
          LODWORD(v363) = 1;
          *((_QWORD *)&v363 + 1) = 0;
          *(_QWORD *)&v364 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v363);
          HIDWORD(v363) = 0;
          LODWORD(v364) = v354;
          DWORD2(v364) = 0;
          LODWORD(v363) = 519;
          *(_QWORD *)((char *)&v363 + 4) = v35 + v356;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v363);
          LODWORD(v363) = 1;
          *((_QWORD *)&v363 + 1) = 0;
          *(_QWORD *)&v364 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v363);
          HIDWORD(v363) = 0;
          LODWORD(v364) = v354;
          DWORD2(v364) = 0;
          LODWORD(v363) = 519;
          *(_QWORD *)((char *)&v363 + 4) = v35 + v356;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v363);
          LODWORD(v363) = 1;
          *((_QWORD *)&v363 + 1) = 0;
          *(_QWORD *)&v364 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v363);
          v363 = 0u;
          v364 = 0u;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v363);
          LODWORD(v363) = 1;
          *((_QWORD *)&v363 + 1) = 0;
          *(_QWORD *)&v364 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v363);
          v363 = 0u;
          v364 = 0u;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v42, (const llvm::MachineOperand *)&v363);
          v36 += 16;
          ++v35;
        }
        while (v36 < v345);
        return v4;
      }
      return 1;
    }
  }
  v68 = (_QWORD *)v3[6];
  v69 = v3;
  v70 = *(_QWORD *)(v68[3] + 16 * (v6 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  v71 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v68 + 16) + 176))(*(_QWORD *)(*v68 + 16));
  v72 = *(_DWORD *)(*(_QWORD *)(v71 + 264)
                  + 24
                  * (*(unsigned __int16 *)(*(_QWORD *)v70 + 24)
                   + *(_DWORD *)(v71 + 272) * ((*(_QWORD *)(v71 + 248) - *(_QWORD *)(v71 + 240)) >> 3)));
  if (v72 == 64)
  {
    if (v360 < 1)
      return 1;
    v73 = 0;
    v74 = 0;
    v75 = v359;
    do
    {
      v76 = v75[6];
      v77 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v76, "", 0);
      *(_QWORD *)(*(_QWORD *)(v76 + 24) + 16 * (v77 & 0x7FFFFFFF)) = &off_1E7F984F0;
      v78 = *(_QWORD *)(v76 + 8);
      if (v78)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v78 + 24))(v78);
        if (!v77)
          return 0;
      }
      else if (!v77)
      {
        return 0;
      }
      v79 = v75[6];
      v80 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v79, "", 0);
      *(_QWORD *)(*(_QWORD *)(v79 + 24) + 16 * (v80 & 0x7FFFFFFF)) = &off_1E7F984F0;
      v81 = *(_QWORD *)(v79 + 8);
      if (v81)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81);
        if (!v80)
          return 0;
      }
      else if (!v80)
      {
        return 0;
      }
      v346 = v77;
      v343 = v74;
      v82 = v75[4];
      v83 = *(_QWORD *)(v82 + 640);
      v84 = *(unint64_t **)(v82 + 648);
      v85 = *(_QWORD *)(v75[12] + 8);
      v86 = *(llvm::MachineFunction **)(v83 + 32);
      v87 = (unsigned __int8 *)v75[9];
      v362 = v87;
      if (v87)
        llvm::MetadataTracking::track((uint64_t)&v362, v87, 2);
      v88 = *((_QWORD *)v86 + 28);
      if (v88)
        *((_QWORD *)v86 + 28) = *(_QWORD *)v88;
      else
        v88 = sub_1C484358C((uint64_t)v86 + 128, 72, 3);
      *(_QWORD *)&v363 = v362;
      if (v362)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
        v362 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v88, v86, v85 + 66288, (unsigned __int8 **)&v363, 0);
      if ((_QWORD)v363)
        llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
      if (v362)
        llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
      v89 = *(_QWORD *)(v83 + 40);
      *(_QWORD *)(v88 + 24) = v89;
      v90 = *(_QWORD *)(v89 + 32);
      v91 = *(unsigned int *)(v88 + 40);
      if ((_DWORD)v91)
      {
        v118 = *(_QWORD *)(v88 + 32);
        v119 = *(_QWORD *)(v90 + 40);
        v120 = 32 * v91;
        do
        {
          if (!*(_BYTE *)v118)
          {
            v121 = *(unsigned int *)(v118 + 4);
            if ((int)v121 >= 0)
              v122 = (uint64_t *)(*(_QWORD *)(v119 + 272) + 8 * v121);
            else
              v122 = (uint64_t *)(*(_QWORD *)(v119 + 24) + 16 * (v121 & 0x7FFFFFFF) + 8);
            v123 = *v122;
            if (*v122)
            {
              v124 = *(_QWORD *)(v123 + 16);
              *(_QWORD *)(v123 + 16) = v118;
              *(_QWORD *)(v118 + 16) = v124;
              if ((*(_BYTE *)(v118 + 3) & 1) != 0)
              {
                *(_QWORD *)(v118 + 24) = v123;
              }
              else
              {
                *(_QWORD *)(v118 + 24) = 0;
                v122 = (uint64_t *)(v124 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v118 + 16) = v118;
              *(_QWORD *)(v118 + 24) = 0;
            }
            *v122 = v118;
          }
          v118 += 32;
          v120 -= 32;
        }
        while (v120);
      }
      v92 = *(_QWORD *)(v90 + 728);
      if (v92)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v92 + 24))(v92, v88);
      v93 = *v84 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v88 = v93 | *(_QWORD *)v88 & 7;
      *(_QWORD *)(v88 + 8) = v84;
      *(_QWORD *)(v93 + 8) = v88;
      *v84 = *v84 & 7 | v88;
      *((_QWORD *)&v363 + 1) = 0;
      v364 = 0uLL;
      LODWORD(v363) = 0x1000000;
      DWORD1(v363) = v346;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v363);
      HIDWORD(v363) = 0;
      LODWORD(v364) = v354;
      DWORD2(v364) = 0;
      LODWORD(v363) = 1031;
      *(_QWORD *)((char *)&v363 + 4) = v356 + 2 * v73;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v363);
      HIDWORD(v363) = 0;
      LODWORD(v364) = v354;
      DWORD2(v364) = 0;
      LODWORD(v363) = 1031;
      *(_QWORD *)((char *)&v363 + 4) = v356 + 2 * v73;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v363);
      HIDWORD(v363) = 0;
      LODWORD(v364) = v354;
      DWORD2(v364) = 0;
      LODWORD(v363) = 1031;
      *(_QWORD *)((char *)&v363 + 4) = v356 + 2 * v73;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v363);
      v363 = 0u;
      v364 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v363);
      v363 = 0u;
      v364 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v88, v86, (const llvm::MachineOperand *)&v363);
      v94 = v359[4];
      v95 = *(_QWORD *)(v94 + 640);
      v96 = *(unint64_t **)(v94 + 648);
      v97 = *(_QWORD *)(v359[12] + 8);
      v98 = *(llvm::MachineFunction **)(v95 + 32);
      v99 = (unsigned __int8 *)v359[9];
      v362 = v99;
      if (v99)
        llvm::MetadataTracking::track((uint64_t)&v362, v99, 2);
      v100 = *((_QWORD *)v98 + 28);
      if (v100)
        *((_QWORD *)v98 + 28) = *(_QWORD *)v100;
      else
        v100 = sub_1C484358C((uint64_t)v98 + 128, 72, 3);
      *(_QWORD *)&v363 = v362;
      if (v362)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
        v362 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v100, v98, v97 + 66288, (unsigned __int8 **)&v363, 0);
      if ((_QWORD)v363)
        llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
      if (v362)
        llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
      v101 = *(_QWORD *)(v95 + 40);
      *(_QWORD *)(v100 + 24) = v101;
      v102 = *(_QWORD *)(v101 + 32);
      v103 = *(unsigned int *)(v100 + 40);
      if ((_DWORD)v103)
      {
        v125 = *(_QWORD *)(v100 + 32);
        v126 = *(_QWORD *)(v102 + 40);
        v127 = 32 * v103;
        do
        {
          if (!*(_BYTE *)v125)
          {
            v128 = *(unsigned int *)(v125 + 4);
            if ((int)v128 >= 0)
              v129 = (uint64_t *)(*(_QWORD *)(v126 + 272) + 8 * v128);
            else
              v129 = (uint64_t *)(*(_QWORD *)(v126 + 24) + 16 * (v128 & 0x7FFFFFFF) + 8);
            v130 = *v129;
            if (*v129)
            {
              v131 = *(_QWORD *)(v130 + 16);
              *(_QWORD *)(v130 + 16) = v125;
              *(_QWORD *)(v125 + 16) = v131;
              if ((*(_BYTE *)(v125 + 3) & 1) != 0)
              {
                *(_QWORD *)(v125 + 24) = v130;
              }
              else
              {
                *(_QWORD *)(v125 + 24) = 0;
                v129 = (uint64_t *)(v131 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v125 + 16) = v125;
              *(_QWORD *)(v125 + 24) = 0;
            }
            *v129 = v125;
          }
          v125 += 32;
          v127 -= 32;
        }
        while (v127);
      }
      v104 = *(_QWORD *)(v102 + 728);
      if (v104)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v104 + 24))(v104, v100);
      v105 = *v96 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v100 = v105 | *(_QWORD *)v100 & 7;
      *(_QWORD *)(v100 + 8) = v96;
      *(_QWORD *)(v105 + 8) = v100;
      *v96 = *v96 & 7 | v100;
      *((_QWORD *)&v363 + 1) = 0;
      v364 = 0uLL;
      LODWORD(v363) = 0x1000000;
      DWORD1(v363) = v80;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v98, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v98, (const llvm::MachineOperand *)&v363);
      HIDWORD(v363) = 0;
      LODWORD(v364) = v354;
      DWORD2(v364) = 0;
      LODWORD(v363) = 1031;
      *(_QWORD *)((char *)&v363 + 4) = ((2 * v73) | 2) + v356;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v98, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v98, (const llvm::MachineOperand *)&v363);
      HIDWORD(v363) = 0;
      LODWORD(v364) = v354;
      DWORD2(v364) = 0;
      LODWORD(v363) = 1031;
      *(_QWORD *)((char *)&v363 + 4) = ((2 * v73) | 2) + v356;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v98, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v98, (const llvm::MachineOperand *)&v363);
      HIDWORD(v363) = 0;
      LODWORD(v364) = v354;
      DWORD2(v364) = 0;
      LODWORD(v363) = 1031;
      *(_QWORD *)((char *)&v363 + 4) = ((2 * v73) | 2) + v356;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v98, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v98, (const llvm::MachineOperand *)&v363);
      v363 = 0u;
      v364 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v98, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v98, (const llvm::MachineOperand *)&v363);
      v363 = 0u;
      v364 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v100, v98, (const llvm::MachineOperand *)&v363);
      v75 = v359;
      v106 = v359[4];
      v107 = *(_QWORD *)(v106 + 640);
      v108 = *(unint64_t **)(v106 + 648);
      v109 = *(_QWORD *)(v359[12] + 8);
      v110 = *(llvm::MachineFunction **)(v107 + 32);
      v111 = (unsigned __int8 *)v359[9];
      v362 = v111;
      if (v111)
        llvm::MetadataTracking::track((uint64_t)&v362, v111, 2);
      v112 = *((_QWORD *)v110 + 28);
      if (v112)
        *((_QWORD *)v110 + 28) = *(_QWORD *)v112;
      else
        v112 = sub_1C484358C((uint64_t)v110 + 128, 72, 3);
      *(_QWORD *)&v363 = v362;
      if (v362)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
        v362 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v112, v110, v109 + 864, (unsigned __int8 **)&v363, 0);
      if ((_QWORD)v363)
        llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
      if (v362)
        llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
      v113 = *(_QWORD *)(v107 + 40);
      *(_QWORD *)(v112 + 24) = v113;
      v114 = *(_QWORD *)(v113 + 32);
      v115 = *(unsigned int *)(v112 + 40);
      if ((_DWORD)v115)
      {
        v132 = *(_QWORD *)(v112 + 32);
        v133 = *(_QWORD *)(v114 + 40);
        v134 = 32 * v115;
        do
        {
          if (!*(_BYTE *)v132)
          {
            v135 = *(unsigned int *)(v132 + 4);
            if ((int)v135 >= 0)
              v136 = (uint64_t *)(*(_QWORD *)(v133 + 272) + 8 * v135);
            else
              v136 = (uint64_t *)(*(_QWORD *)(v133 + 24) + 16 * (v135 & 0x7FFFFFFF) + 8);
            v137 = *v136;
            if (*v136)
            {
              v138 = *(_QWORD *)(v137 + 16);
              *(_QWORD *)(v137 + 16) = v132;
              *(_QWORD *)(v132 + 16) = v138;
              if ((*(_BYTE *)(v132 + 3) & 1) != 0)
              {
                *(_QWORD *)(v132 + 24) = v137;
              }
              else
              {
                *(_QWORD *)(v132 + 24) = 0;
                v136 = (uint64_t *)(v138 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v132 + 16) = v132;
              *(_QWORD *)(v132 + 24) = 0;
            }
            *v136 = v132;
          }
          v132 += 32;
          v134 -= 32;
        }
        while (v134);
      }
      v116 = *(_QWORD *)(v114 + 728);
      if (v116)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v116 + 24))(v116, v112);
      v117 = *v108 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v112 = v117 | *(_QWORD *)v112 & 7;
      *(_QWORD *)(v112 + 8) = v108;
      *(_QWORD *)(v117 + 8) = v112;
      *v108 = *v108 & 7 | v112;
      HIDWORD(v363) = 0;
      v364 = 0uLL;
      *(_QWORD *)((char *)&v363 + 4) = v350 + (v73 >> 1);
      LODWORD(v363) = 0x1000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v112, v110, (const llvm::MachineOperand *)&v363);
      *((_QWORD *)&v363 + 1) = 0;
      LODWORD(v363) = 0;
      DWORD1(v363) = v346;
      v364 = 0uLL;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v112, v110, (const llvm::MachineOperand *)&v363);
      v4 = 1;
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 33;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v112, v110, (const llvm::MachineOperand *)&v363);
      *((_QWORD *)&v363 + 1) = 0;
      LODWORD(v363) = 0;
      DWORD1(v363) = v80;
      v364 = 0uLL;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v112, v110, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 34;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v112, v110, (const llvm::MachineOperand *)&v363);
      v74 = v343 + 64;
      v73 += 2;
    }
    while (v343 + 64 < v360);
  }
  else
  {
    if (v72 != 32 && *(_BYTE *)(v69[32] + 280) == 0)
      return 0;
    v347 = v360;
    if (v360 < 1)
      return 1;
    v147 = v69;
    v148 = 0;
    v149 = 0;
    do
    {
      v150 = v147[4];
      v151 = *(_QWORD *)(v150 + 640);
      v152 = *(unint64_t **)(v150 + 648);
      v153 = *(_QWORD *)(v147[12] + 8);
      v154 = *(llvm::MachineFunction **)(v151 + 32);
      v155 = (unsigned __int8 *)v147[9];
      v362 = v155;
      if (v155)
        llvm::MetadataTracking::track((uint64_t)&v362, v155, 2);
      v156 = *((_QWORD *)v154 + 28);
      if (v156)
        *((_QWORD *)v154 + 28) = *(_QWORD *)v156;
      else
        v156 = sub_1C484358C((uint64_t)v154 + 128, 72, 3);
      *(_QWORD *)&v363 = v362;
      if (v362)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v362, v362, (uint64_t)&v363);
        v362 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v156, v154, v153 + 66288, (unsigned __int8 **)&v363, 0);
      if ((_QWORD)v363)
        llvm::MetadataTracking::untrack((uint64_t)&v363, (unsigned __int8 *)v363);
      if (v362)
        llvm::MetadataTracking::untrack((uint64_t)&v362, v362);
      v157 = *(_QWORD *)(v151 + 40);
      *(_QWORD *)(v156 + 24) = v157;
      v158 = *(_QWORD *)(v157 + 32);
      v159 = *(unsigned int *)(v156 + 40);
      if ((_DWORD)v159)
      {
        v162 = *(_QWORD *)(v156 + 32);
        v163 = *(_QWORD *)(v158 + 40);
        v164 = 32 * v159;
        do
        {
          if (!*(_BYTE *)v162)
          {
            v165 = *(unsigned int *)(v162 + 4);
            if ((int)v165 >= 0)
              v166 = (uint64_t *)(*(_QWORD *)(v163 + 272) + 8 * v165);
            else
              v166 = (uint64_t *)(*(_QWORD *)(v163 + 24) + 16 * (v165 & 0x7FFFFFFF) + 8);
            v167 = *v166;
            if (*v166)
            {
              v168 = *(_QWORD *)(v167 + 16);
              *(_QWORD *)(v167 + 16) = v162;
              *(_QWORD *)(v162 + 16) = v168;
              if ((*(_BYTE *)(v162 + 3) & 1) != 0)
              {
                *(_QWORD *)(v162 + 24) = v167;
              }
              else
              {
                *(_QWORD *)(v162 + 24) = 0;
                v166 = (uint64_t *)(v168 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v162 + 16) = v162;
              *(_QWORD *)(v162 + 24) = 0;
            }
            *v166 = v162;
          }
          v162 += 32;
          v164 -= 32;
        }
        while (v164);
      }
      v160 = *(_QWORD *)(v158 + 728);
      if (v160)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v160 + 24))(v160, v156);
      v161 = *v152 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v156 = v161 | *(_QWORD *)v156 & 7;
      *(_QWORD *)(v156 + 8) = v152;
      *(_QWORD *)(v161 + 8) = v156;
      *v152 = *v152 & 7 | v156;
      HIDWORD(v363) = 0;
      v364 = 0uLL;
      *(_QWORD *)((char *)&v363 + 4) = (v148 + v6);
      LODWORD(v363) = 0x1000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v156, v154, (const llvm::MachineOperand *)&v363);
      v4 = 1;
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v156, v154, (const llvm::MachineOperand *)&v363);
      HIDWORD(v363) = 0;
      LODWORD(v364) = v354;
      DWORD2(v364) = 0;
      LODWORD(v363) = 1031;
      *(_QWORD *)((char *)&v363 + 4) = v356 + 2 * v148;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v156, v154, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v156, v154, (const llvm::MachineOperand *)&v363);
      HIDWORD(v363) = 0;
      LODWORD(v364) = v354;
      DWORD2(v364) = 0;
      LODWORD(v363) = 1031;
      *(_QWORD *)((char *)&v363 + 4) = v356 + 2 * v148;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v156, v154, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v156, v154, (const llvm::MachineOperand *)&v363);
      HIDWORD(v363) = 0;
      LODWORD(v364) = v354;
      DWORD2(v364) = 0;
      LODWORD(v363) = 1031;
      *(_QWORD *)((char *)&v363 + 4) = v356 + 2 * v148;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v156, v154, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v156, v154, (const llvm::MachineOperand *)&v363);
      v363 = 0u;
      v364 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v156, v154, (const llvm::MachineOperand *)&v363);
      LODWORD(v363) = 1;
      *((_QWORD *)&v363 + 1) = 0;
      *(_QWORD *)&v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v156, v154, (const llvm::MachineOperand *)&v363);
      v363 = 0u;
      v364 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v156, v154, (const llvm::MachineOperand *)&v363);
      v149 += 32;
      ++v148;
      v147 = v359;
    }
    while (v149 < v347);
  }
  return v4;
}

uint64_t sub_1C479F454(uint64_t **a1, _QWORD *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t IncompleteVirtualRegister;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  llvm::MachineFunction *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v33 = 0;
  IncompleteVirtualRegister = 0;
  if (sub_1C479F740(a1, a4, (int *)&v33 + 1, &v33))
  {
    v9 = HIDWORD(v33);
    if (!HIDWORD(v33))
      return a3;
    v10 = a2[6];
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v10, "", 0);
    *(_QWORD *)(*(_QWORD *)(v10 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F984F0;
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
      if (!(_DWORD)IncompleteVirtualRegister)
        return IncompleteVirtualRegister;
    }
    else if (!(_DWORD)IncompleteVirtualRegister)
    {
      return IncompleteVirtualRegister;
    }
    v12 = a2[4];
    v13 = *(_QWORD *)(v12 + 640);
    v14 = *(unint64_t **)(v12 + 648);
    v15 = *(_QWORD *)(a2[12] + 8);
    v16 = *(llvm::MachineFunction **)(v13 + 32);
    v17 = (unsigned __int8 *)a2[9];
    v34 = v17;
    if (v17)
      llvm::MetadataTracking::track((uint64_t)&v34, v17, 2);
    v18 = v15 + 432;
    v19 = *((_QWORD *)v16 + 28);
    if (v19)
      *((_QWORD *)v16 + 28) = *(_QWORD *)v19;
    else
      v19 = sub_1C484358C((uint64_t)v16 + 128, 72, 3);
    v35 = v34;
    if (v34)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v34, v34, (uint64_t)&v35);
      v34 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v19, v16, v18, &v35, 0);
    if (v35)
      llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
    if (v34)
      llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
    v20 = *(_QWORD *)(v13 + 40);
    *(_QWORD *)(v19 + 24) = v20;
    v21 = *(_QWORD *)(v20 + 32);
    v22 = *(unsigned int *)(v19 + 40);
    if ((_DWORD)v22)
    {
      v26 = *(_QWORD *)(v19 + 32);
      v27 = *(_QWORD *)(v21 + 40);
      v28 = 32 * v22;
      do
      {
        if (!*(_BYTE *)v26)
        {
          v29 = *(unsigned int *)(v26 + 4);
          if ((int)v29 >= 0)
            v30 = (uint64_t *)(*(_QWORD *)(v27 + 272) + 8 * v29);
          else
            v30 = (uint64_t *)(*(_QWORD *)(v27 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
          v31 = *v30;
          if (*v30)
          {
            v32 = *(_QWORD *)(v31 + 16);
            *(_QWORD *)(v31 + 16) = v26;
            *(_QWORD *)(v26 + 16) = v32;
            if ((*(_BYTE *)(v26 + 3) & 1) != 0)
            {
              *(_QWORD *)(v26 + 24) = v31;
            }
            else
            {
              *(_QWORD *)(v26 + 24) = 0;
              v30 = (uint64_t *)(v32 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v26 + 16) = v26;
            *(_QWORD *)(v26 + 24) = 0;
          }
          *v30 = v26;
        }
        v26 += 32;
        v28 -= 32;
      }
      while (v28);
    }
    v23 = *(_QWORD *)(v21 + 728);
    if (v23)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 24))(v23, v19);
    v24 = *v14 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v19 = v24 | *(_QWORD *)v19 & 7;
    *(_QWORD *)(v19 + 8) = v14;
    *(_QWORD *)(v24 + 8) = v19;
    *v14 = *v14 & 7 | v19;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    LODWORD(v35) = 0x1000000;
    HIDWORD(v35) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v16, (const llvm::MachineOperand *)&v35);
    v36 = 0;
    v37 = 0;
    LODWORD(v35) = 0;
    HIDWORD(v35) = a3;
    v38 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v16, (const llvm::MachineOperand *)&v35);
    v36 = 0;
    v37 = 0;
    v38 = 0;
    LODWORD(v35) = (v33 & 0xFFF) << 8;
    HIDWORD(v35) = v9;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v16, (const llvm::MachineOperand *)&v35);
    LODWORD(v35) = 1;
    v36 = 0;
    v37 = a5;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v16, (const llvm::MachineOperand *)&v35);
  }
  return IncompleteVirtualRegister;
}

uint64_t sub_1C479F740(uint64_t **a1, unsigned int a2, int *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t result;
  unsigned int v13;
  uint64_t v15;
  llvm::Value **NullValue;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  int v23;
  llvm::Constant **v24;
  llvm::Value **v25;

  v4 = (uint64_t)a1[3];
  *a3 = 0;
  *a4 = 0;
  v5 = **a1;
  v6 = *(_DWORD *)(*(_QWORD *)(v5 + 64) + 4 * a2);
  if (v6 == -1)
    return 1;
  v8 = *(_DWORD *)a1[1];
  v9 = *(unsigned __int8 **)(v5 + 32 * (v6 / v8) - 64);
  v10 = v9[16];
  if ((v10 - 11) < 2)
    return 1;
  v13 = v6 % v8;
  if (v10 == 13)
  {
    v15 = *(_QWORD *)v9;
    if (*(_DWORD *)(*(_QWORD *)v9 + 8) == 17 || (*(_DWORD *)(*(_QWORD *)v9 + 8) & 0xFE) == 18)
      v24 = (llvm::Constant **)(v15 + 24);
    else
      v24 = (llvm::Constant **)(*(_QWORD *)(v15 + 16) + 8 * v13);
    NullValue = llvm::Constant::getNullValue(*v24, (llvm::Type *)v9);
    v18 = a1[2];
    v25 = NullValue;
    v19 = (uint64_t *)*v18;
    v20 = v18[1];
    goto LABEL_16;
  }
  if (v10 == 10)
  {
    v21 = a1[2];
    v25 = *(llvm::Value ***)&v9[32 * (v6 % v8) + -32 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
    v19 = (uint64_t *)*v21;
    v20 = v21[1];
LABEL_16:
    v22 = sub_1C6128C08(v19, &v25);
    v23 = *((_DWORD *)v22 + 2);
    if (!v23)
    {
      v23 = (*(uint64_t (**)(uint64_t, llvm::Value **))(*(_QWORD *)v20 + 104))(v20, v25);
      *((_DWORD *)v22 + 2) = v23;
    }
    *a3 = v23;
    return v23 != 0;
  }
  result = sub_1C47A836C(v4, v9);
  *a3 = result;
  if ((_DWORD)result)
  {
    sub_1C6127154(v4, *(_DWORD *)a1[1], *(_DWORD *)a1[4], v13, a3, a4);
    v23 = *a3;
    return v23 != 0;
  }
  return result;
}

uint64_t sub_1C479F8BC(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t ***v5;
  uint64_t v6;
  llvm::SmallPtrSetImplBase *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t **v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  int v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t **v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  int v42;
  int v44;
  uint64_t **v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  void *v60;
  int v61;
  int v62;
  unsigned int v63;
  _QWORD *v64;
  void *v65;
  _QWORD *v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  _QWORD *v70;
  void *v71;
  int v72;
  unsigned __int8 **v73;
  uint64_t **v74;
  llvm::Type *v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned __int8 **v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  int v88;
  unsigned __int8 **v89;
  unsigned __int8 *v90;
  uint64_t v91;
  llvm::Type *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  llvm::MachineFunction *v110;
  uint64_t v111;
  void *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t **v129;
  _BOOL4 v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v134;
  int v135;
  uint64_t *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  int v142;
  uint64_t *v143;
  unsigned int v144;
  unsigned __int8 *v145;
  unint64_t v146;
  unsigned int v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  uint64_t v155;
  llvm::MachineFunction *v156;
  void *v157;
  unint64_t v158;
  unsigned __int8 *v159;
  uint64_t v160;
  llvm::Type *v161;
  unsigned int PrimitiveSizeInBits;
  unsigned int v163;
  unsigned __int8 *v165;
  _QWORD *v166;
  int v167;
  _QWORD *v168;
  int v169;
  int v170;
  unsigned int v171;
  BOOL v172;
  int v173;
  int v174;
  _UNKNOWN ***v175;
  BOOL v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  llvm::MachineFunction *v182;
  void *v183;
  uint64_t v184;
  unint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  unsigned int v189;
  _QWORD *v190;
  void *v191;
  _QWORD *v192;
  int v193;
  BOOL v194;
  unsigned int v195;
  _QWORD *v196;
  int v197;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  unint64_t *v204;
  uint64_t v205;
  llvm::MachineFunction *v206;
  _QWORD *v207;
  void *v208;
  unint64_t v209;
  unsigned int v210;
  uint64_t v211;
  int v213;
  int v214;
  int v215;
  int v216;
  uint64_t ***v217;
  uint64_t *v218;
  int v219;
  int v220;
  int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t *v225;
  uint64_t v226;
  llvm::MachineFunction *v227;
  void *v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t *v234;
  uint64_t v235;
  unsigned int v236;
  int v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  int v242;
  uint64_t *v243;
  const char *v244;
  unint64_t v245;
  unint64_t v246;
  int v247;
  uint64_t *v248;
  unsigned __int8 *v249;
  unsigned __int8 *v250;
  uint64_t v251;
  llvm::MachineFunction *v252;
  llvm::MachineFunction *v253;
  int v254;
  int v255;
  int v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t **v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  uint64_t v269;
  llvm::MachineFunction *v270;
  void *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  __int32 v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t *v284;
  uint64_t v285;
  llvm::MachineFunction *v286;
  void *v287;
  uint64_t v288;
  unint64_t v289;
  int v290;
  int v291;
  uint64_t v292;
  int32x2_t *v293;
  const llvm::APInt *v294;
  _BYTE *v295;
  BOOL v296;
  __int32 v297;
  void *v298;
  char v299;
  uint64_t *v300;
  llvm::MachineFunction *v301;
  llvm::MachineInstr *v302;
  int v303;
  _BOOL4 v304;
  llvm::MachineInstr *v305;
  uint64_t v306;
  int v307;
  int v308;
  uint64_t v309;
  llvm::ConstantInt *v310;
  llvm::ConstantInt *v311;
  unsigned int v312;
  _UNKNOWN ***v313;
  llvm::ConstantInt *v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  uint64_t *v319;
  int v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  llvm::MachineFunction *v325;
  void *v326;
  uint64_t v327;
  unint64_t v328;
  int v329;
  BOOL v330;
  int v331;
  unsigned int v332;
  _BOOL4 v333;
  _BOOL4 v334;
  unsigned int v335;
  unsigned int v336;
  _BOOL4 v337;
  _BOOL4 v338;
  uint64_t v339;
  unsigned int v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t *v343;
  uint64_t v344;
  llvm::MachineFunction *v345;
  llvm::MachineFunction *v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  int32x2_t *v353;
  int8x16_t *v354;
  void **v355;
  char *v356;
  unint64_t *v357;
  unint64_t v358;
  llvm::MachineInstr *v359;
  llvm::MachineFunction *v360;
  __int32 v361;
  llvm::MachineInstr *v362;
  llvm::MachineFunction *v363;
  unsigned int v364;
  unsigned int v365;
  uint64_t v366;
  uint64_t v367;
  _QWORD *v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  void **v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unsigned int v376;
  BOOL v378;
  uint64_t ***v379;
  int v380;
  unsigned __int8 **v381;
  _QWORD *v382;
  int v383;
  _QWORD *v384;
  unsigned int v385;
  int v386;
  uint64_t **v387;
  int v388;
  int v389;
  uint64_t v390;
  int v391;
  uint64_t v392;
  _BOOL4 v393;
  int v394;
  int v395;
  int v396;
  uint64_t v397;
  _UNKNOWN ***v398;
  int v399;
  uint64_t v400;
  int v401;
  unsigned int v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t *v405;
  uint64_t v406;
  llvm::MachineFunction *v407;
  void *v408;
  uint64_t v409;
  unint64_t v410;
  _QWORD *v411;
  __int32 *v412;
  __int32 *v413;
  __int32 v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t *v417;
  uint64_t v418;
  llvm::MachineFunction *v419;
  unsigned __int8 *v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  __int32 *v434;
  __int32 v435;
  __int32 v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t *v439;
  uint64_t v440;
  llvm::MachineFunction *v441;
  unsigned __int8 *v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t *v453;
  uint64_t v454;
  uint64_t v455;
  int v456;
  uint64_t *v457;
  uint64_t v458;
  int v459;
  char v460;
  uint64_t v461;
  unsigned int v462;
  uint64_t v463;
  int v464;
  uint64_t v465;
  uint64_t v466;
  unint64_t *v467;
  uint64_t v468;
  void *v469;
  uint64_t v470;
  int v471;
  uint64_t *v472;
  BOOL v473;
  unsigned int v474;
  uint64_t *v475;
  int v476;
  uint64_t v477;
  unsigned int v478;
  char v479;
  char v480;
  int v481;
  uint64_t ***v482;
  uint64_t v483;
  int v484;
  BOOL v485;
  BOOL v486;
  __int32 v487;
  llvm::detail::DoubleAPFloat *v488;
  void *v489;
  unsigned int v490;
  void *v491;
  void **v492;
  _QWORD *v493;
  int v494;
  uint64_t v495;
  unsigned int v496;
  int v497;
  uint64_t v498;
  uint64_t v499;
  unsigned int v500;
  int v501;
  int v502;
  uint64_t ***v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t *v507;
  uint64_t v508;
  llvm::MachineFunction *v509;
  uint64_t v510;
  void *v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  unsigned __int8 *v515;
  unsigned __int8 *v516;
  uint64_t v517;
  __int32 v518;
  int v519;
  int v520;
  _QWORD *v521;
  int v522;
  int v523;
  _QWORD *v524;
  _QWORD *v525;
  _QWORD *v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  unint64_t v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  uint64_t v536;
  uint64_t v537;
  int v538;
  uint64_t v539;
  _BYTE *v540;
  uint64_t v541;
  int v542;
  int v543;
  unsigned int v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  uint64_t v549;
  llvm::MachineFunction *v550;
  uint64_t v551;
  void *v552;
  uint64_t v553;
  unint64_t v554;
  int v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t *v559;
  uint64_t v560;
  llvm::MachineFunction *v561;
  void *v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  llvm::MachineInstr *v569;
  llvm::MachineFunction *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t *v575;
  uint64_t v576;
  uint64_t v577;
  int v578;
  uint64_t v579;
  unsigned int v580;
  int v581;
  uint64_t v582;
  uint64_t ****v583;
  uint64_t ***v584;
  BOOL v585;
  int v586;
  uint64_t *v587;
  int v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t *v591;
  uint64_t v592;
  llvm::MachineFunction *v593;
  void *v594;
  uint64_t v595;
  unint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t *v613;
  uint64_t v614;
  uint64_t v615;
  unsigned int v616;
  uint64_t v617;
  unsigned int IncompleteVirtualRegister;
  uint64_t v619;
  int v620;
  int v621;
  uint64_t v622;
  unint64_t *v623;
  uint64_t v624;
  uint64_t v625;
  llvm::MachineFunction *v626;
  void *v627;
  uint64_t v628;
  unint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  int v635;
  llvm::MachineInstr *v636;
  llvm::MachineFunction *v637;
  unsigned int v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t v643;
  uint64_t v644;
  uint64_t *v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  unint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  unint64_t v656;
  uint64_t v657;
  uint64_t v658;
  unint64_t *v659;
  uint64_t v660;
  llvm::MachineFunction *v661;
  void *v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  unint64_t v668;
  int v669;
  uint64_t *v670;
  char v671;
  uint64_t v672;
  uint64_t *v673;
  uint64_t v674;
  unint64_t *v675;
  uint64_t v676;
  llvm::MachineFunction *v677;
  void *v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t *v689;
  uint64_t v690;
  uint64_t v691;
  int v692;
  uint64_t v693;
  int v694;
  uint64_t v695;
  int v696;
  uint64_t v697;
  _QWORD *v698;
  uint64_t v699;
  unint64_t *v700;
  uint64_t v701;
  uint64_t v702;
  llvm::MachineFunction *v703;
  void *v704;
  uint64_t v705;
  unint64_t v706;
  int v707;
  uint64_t v708;
  uint64_t v709;
  unint64_t *v710;
  uint64_t v711;
  llvm::MachineFunction *v712;
  void *v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  unint64_t v719;
  uint64_t v720;
  uint64_t v721;
  unint64_t *v722;
  uint64_t v723;
  llvm::MachineFunction *v724;
  void *v725;
  unint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  unint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  unint64_t v736;
  int v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  _QWORD *v741;
  uint64_t v742;
  unint64_t *v743;
  uint64_t v744;
  llvm::MachineFunction *v745;
  _QWORD *v746;
  void *v747;
  unint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  unint64_t v753;
  uint64_t v754;
  uint64_t v755;
  unint64_t *v756;
  uint64_t v757;
  void *v758;
  int v759;
  uint64_t v760;
  uint64_t v761;
  int v762;
  _UNKNOWN ***v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  unint64_t *v767;
  uint64_t v768;
  llvm::MachineFunction *v769;
  llvm::MachineFunction *v770;
  unint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  unint64_t v776;
  unsigned __int8 v777;
  llvm::detail::DoubleAPFloat *v778;
  void **v779;
  uint64_t v780;
  llvm::MachineInstr *v781;
  llvm::MachineFunction *v782;
  uint64_t *v783;
  uint64_t v784;
  unsigned int v785;
  uint64_t v786;
  uint64_t v787;
  unint64_t *v788;
  uint64_t v789;
  llvm::MachineFunction *v790;
  llvm::MachineFunction *v791;
  unint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  unint64_t v797;
  char v798;
  llvm::detail::DoubleAPFloat *v799;
  void **v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t v806;
  _UNKNOWN ***v807;
  BOOL v808;
  char v809;
  int v810;
  llvm::MachineInstr *v811;
  llvm::MachineFunction *v812;
  uint64_t v813;
  uint64_t v814;
  unint64_t *v815;
  uint64_t v816;
  void *v817;
  uint64_t v818;
  unint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  unint64_t v824;
  uint64_t *v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  llvm::MachineFunction *v829;
  uint64_t v830;
  void *v831;
  unint64_t v832;
  uint64_t v833;
  int v834;
  int v835;
  int v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t *v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t *v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  unint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  unint64_t v861;
  uint64_t v862;
  _QWORD *v863;
  _QWORD *v864;
  unsigned __int8 **v865;
  int v866;
  int v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t *v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t *v880;
  uint64_t v881;
  uint64_t v882;
  int v883;
  _QWORD *v884;
  unint64_t v885;
  uint64_t v886;
  int v887;
  llvm::MachineFunction *v888;
  char v889;
  uint64_t v890;
  uint64_t v891;
  unint64_t *v892;
  uint64_t v893;
  llvm::MachineFunction *v894;
  uint64_t v895;
  void *v896;
  unint64_t v897;
  void *v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  unint64_t v903;
  int v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  unint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t *v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t *v921;
  uint64_t v922;
  uint64_t v923;
  int v924;
  int v925;
  unsigned int v926;
  unint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t *v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  unint64_t v939;
  uint64_t v940;
  uint64_t v941;
  int v942;
  uint64_t v943;
  uint64_t v944;
  int v945;
  uint64_t v946;
  unsigned int v947;
  unsigned int v948;
  unsigned int v949;
  unsigned int v950;
  uint64_t v951;
  unint64_t v952;
  unint64_t v953;
  uint64_t v954;
  uint64_t v955;
  unint64_t *v956;
  uint64_t v957;
  uint64_t v958;
  llvm::MachineFunction *v959;
  void *v960;
  uint64_t v961;
  unint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  unint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t *v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t *v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  unint64_t v986;
  int v987;
  uint64_t ***v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t *v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t *v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t *v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t *v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  unint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  int v1024;
  uint64_t v1025;
  uint64_t v1026;
  int v1027;
  uint64_t v1028;
  _BYTE *v1029;
  uint64_t v1030;
  uint64_t v1031;
  int v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  unint64_t *v1036;
  uint64_t v1037;
  llvm::MachineFunction *v1038;
  void *v1039;
  unint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  unint64_t v1045;
  llvm::MachineFunction *v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t *v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t *v1059;
  uint64_t v1060;
  uint64_t v1061;
  int v1062;
  uint64_t v1063;
  uint64_t v1064;
  _UNKNOWN ***v1065;
  int v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  unint64_t *v1070;
  uint64_t v1071;
  llvm::MachineFunction *v1072;
  void *v1073;
  uint64_t v1074;
  unint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t *v1080;
  uint64_t v1081;
  uint64_t v1082;
  _UNKNOWN ***v1083;
  _BOOL4 v1085;
  uint64_t v1086;
  uint64_t v1087;
  unint64_t *v1088;
  uint64_t v1089;
  llvm::MachineFunction *v1090;
  void *v1091;
  unint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t *v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t *v1104;
  uint64_t v1105;
  uint64_t v1106;
  int v1107;
  _QWORD *v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t *v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t *v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t *v1127;
  uint64_t v1128;
  uint64_t v1129;
  int v1130;
  _BYTE *v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t *v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t *v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  unint64_t v1151;
  uint64_t v1152;
  _UNKNOWN ***v1153;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  unint64_t *v1158;
  uint64_t v1159;
  void *v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t *v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  unint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t *v1178;
  uint64_t v1179;
  uint64_t v1180;
  unsigned int v1181;
  unsigned int v1182;
  unint64_t v1183;
  unsigned int v1184;
  unint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  unint64_t *v1191;
  uint64_t v1192;
  llvm::MachineFunction *v1193;
  void *v1194;
  uint64_t v1195;
  unint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  unint64_t *v1199;
  uint64_t v1200;
  llvm::MachineFunction *v1201;
  void *v1202;
  uint64_t v1203;
  unint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  unint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  unint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  unint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t *v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  unint64_t v1231;
  int v1232;
  int v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t *v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t *v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t *v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t *v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t *v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  unsigned int v1271;
  unint64_t *v1272;
  __int32 v1273;
  int v1274;
  uint64_t v1275;
  int v1276;
  int v1277;
  int v1278;
  int v1279;
  int v1280;
  int v1281;
  unsigned int v1282;
  int v1283;
  char v1284;
  int v1285;
  unint64_t v1286;
  int v1287;
  unsigned int v1288;
  int v1289;
  int v1290;
  llvm::MachineFunction *v1291;
  unint64_t v1292;
  uint64_t ***v1293;
  int v1294;
  int v1295;
  uint64_t ***v1296;
  unsigned int v1297;
  int v1298;
  int v1299;
  llvm::Value **v1300;
  uint64_t v1301;
  BOOL v1302;
  int v1303;
  uint64_t v1304;
  unint64_t v1305;
  uint64_t v1306;
  _QWORD *v1307;
  uint64_t *v1308;
  _QWORD *v1309;
  _QWORD *v1310;
  _QWORD *v1311;
  llvm::MachineFunction *v1312;
  llvm::MachineFunction *v1313;
  unsigned int v1314;
  int v1315;
  llvm::Value **v1316;
  llvm::MachineFunction *v1317;
  int v1318;
  llvm::MachineFunction *v1319;
  _BOOL4 v1320;
  unsigned __int32 v1321;
  int v1322;
  int v1323;
  llvm::MachineFunction *v1324;
  llvm::MachineFunction *v1325;
  llvm::MachineInstr *v1326;
  int32x2_t v1327;
  void *v1328[2];
  _BYTE v1329[64];
  void *v1330[2];
  _OWORD v1331[8];
  int8x16_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  llvm::MachineFunction *v1335;
  llvm::MachineInstr *v1336;
  int32x2_t v1337;
  int8x16_t v1338;
  uint64_t v1339;

  v1339 = *MEMORY[0x1E0C80C00];
  v2 = dword_1ED7EAF48++;
  if (v2 > dword_1ED7EAFD0)
    return 0;
  v5 = (uint64_t ***)a2;
  v6 = a1;
  v7 = (llvm::SmallPtrSetImplBase *)(a1 + 160);
  v8 = sub_1C477672C(a1 + 160, *(_QWORD *)(a2 + 40));
  v9 = *(_QWORD *)(v6 + 168);
  v10 = 176;
  if (v9 == *(_QWORD *)(v6 + 160))
    v10 = 180;
  if (v8 == (_QWORD *)(v9 + 8 * *(unsigned int *)(v6 + v10)))
  {
    sub_1C4774094(v7, (uint64_t)v5[5]);
    v12 = v5[5];
    v13 = v12 + 5;
    v14 = (uint64_t **)v12[6];
    if (v14 != v12 + 5)
    {
      while (1)
      {
        v15 = v14 - 3;
        if (!v14)
          v15 = 0;
        v16 = *((unsigned __int8 *)v15 + 16);
        switch(*((_BYTE *)v15 + 16))
        {
          case 'T':
            v17 = (uint64_t)*(v15 - 4);
            if (v17
              && !*(_BYTE *)(v17 + 16)
              && *(uint64_t **)(v17 + 24) == v15[9]
              && (*(_BYTE *)(v17 + 33) & 0x20) != 0
              && (*((_DWORD *)*(v14 - 7) + 9) - 2022) < 0x40
              && ((0xEF7FEF7FEF7FEF7FLL >> (*((_BYTE *)*(v14 - 7) + 36) + 26)) & 1) != 0)
            {
              return 0;
            }
            goto LABEL_54;
          case 'U':
          case 'V':
          case 'W':
          case 'X':
            goto LABEL_54;
          case 'Y':
            v20 = *((_DWORD *)v15 + 5);
            if ((v20 & 0x40000000) != 0)
              v21 = *(v15 - 1);
            else
              v21 = (uint64_t *)&v15[-4 * (v20 & 0x7FFFFFF)];
            v15 = (uint64_t **)*v21;
            goto LABEL_52;
          case 'Z':
            goto LABEL_52;
          case '[':
            v22 = *v15;
            if (((*v15)[1] & 0xFE) != 0x12)
              goto LABEL_32;
            if (*((_DWORD *)v22 + 8) > 4u)
              return 0;
            v22 = *(uint64_t **)v22[2];
LABEL_32:
            if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v22) < 9)
              return 0;
            goto LABEL_54;
          case '\\':
            v23 = **(v15 - 4);
            if (*(_DWORD *)(v23 + 12) != 2)
              return 0;
            v24 = *(_QWORD **)(v23 + 16);
            v25 = *v24;
            v26 = *v24 && *(_BYTE *)(*v24 + 8) == 18;
            if (!v26
              || *(_DWORD *)(v25 + 32) != 4
              || (*(unsigned __int8 *)(*(_QWORD *)(v25 + 24) + 8) | 2) != 2
              || *(_DWORD *)(v24[1] + 8) != 2061
              || *((_DWORD *)v15 + 18) != 1
              || *(_DWORD *)v15[8])
            {
              return 0;
            }
            goto LABEL_54;
          default:
            if (v16 == 60)
            {
              v27 = **(v15 - 4);
              v28 = *(_DWORD *)(v27 + 8);
              if ((v28 & 0xFE) == 0x12)
                v28 = *(_DWORD *)(**(_QWORD **)(v27 + 16) + 8);
              if ((v28 & 0xFFFFBF00) != 0)
                return 0;
            }
            else
            {
              if (v16 != 61)
                goto LABEL_54;
              v18 = **(v15 - 4);
              v19 = *(_DWORD *)(v18 + 8);
              if ((v19 & 0xFE) == 0x12)
                v19 = *(_DWORD *)(**(_QWORD **)(v18 + 16) + 8);
              if (v19 > 0xFF)
                return 0;
              v15 = (uint64_t **)*(v15 - 8);
            }
LABEL_52:
            v29 = *v15;
            if ((v29[1] & 0xFE) == 0x12 && *((_DWORD *)v29 + 8) > 4u)
              return 0;
LABEL_54:
            v14 = (uint64_t **)v14[1];
            if (v14 == v13)
              goto LABEL_7;
            break;
        }
      }
    }
  }
LABEL_7:
  v3 = 0;
  *(_BYTE *)(v6 + 280) = *(_BYTE *)(*(_QWORD *)(v6 + 80) + 1020) & 1;
  switch(*((_BYTE *)v5 + 16))
  {
    case 0x1D:
      sub_1C612865C(v6, (uint64_t)v5);
      return 1;
    case 0x1E:
      if ((*((_DWORD *)v5 + 5) & 0x7FFFFFF) == 1)
      {
        v1330[0] = *(v5 - 4);
        v382 = sub_1C61294C8((_DWORD *)(*(_QWORD *)(v6 + 32) + 56), v1330);
        sub_1C632B2B0(v6, (uint64_t *)v382[1], (uint64_t)(v5 + 6));
        return 1;
      }
      v56 = (uint64_t)*(v5 - 12);
      if (v56 && *(unsigned __int8 *)(v56 + 16) >= 0x1Cu && *(uint64_t ***)(v56 + 40) != v5[5])
        v56 = 0;
      v57 = *(_QWORD *)(v6 + 32);
      v58 = (_DWORD *)(v57 + 56);
      v59 = *(_QWORD *)(v57 + 56);
      v60 = *(v5 - 4);
      v1330[0] = v60;
      v61 = *(_DWORD *)(v57 + 72);
      if (v61)
      {
        v62 = v61 - 1;
        v63 = ((v60 >> 4) ^ (v60 >> 9)) & (v61 - 1);
        v64 = (_QWORD *)(v59 + 16 * v63);
        v65 = (void *)*v64;
        if (v60 == (void *)*v64)
        {
          v70 = (_QWORD *)v64[1];
          v71 = *(v5 - 8);
          v1330[0] = v71;
          goto LABEL_236;
        }
        v66 = 0;
        v67 = 1;
        while (v65 != (void *)-4096)
        {
          if (v66)
            v68 = 0;
          else
            v68 = v65 == (void *)-8192;
          if (v68)
            v66 = v64;
          v69 = v63 + v67++;
          v63 = v69 & v62;
          v64 = (_QWORD *)(v59 + 16 * v63);
          v65 = (void *)*v64;
          if (v60 == (void *)*v64)
          {
            v70 = (_QWORD *)v64[1];
            goto LABEL_103;
          }
        }
        if (v66)
          v525 = v66;
        else
          v525 = v64;
      }
      else
      {
        v525 = 0;
      }
      v526 = sub_1C47AD254(v58, (uint64_t)v1330, v1330, v525);
      v70 = 0;
      *v526 = v1330[0];
      v526[1] = 0;
      v57 = *(_QWORD *)(v6 + 32);
      v59 = *(_QWORD *)(v57 + 56);
      v61 = *(_DWORD *)(v57 + 72);
LABEL_103:
      v58 = (_DWORD *)(v57 + 56);
      v71 = *(v5 - 8);
      v1330[0] = v71;
      if (!v61)
      {
        v524 = 0;
        goto LABEL_686;
      }
      v62 = v61 - 1;
LABEL_236:
      v189 = ((v71 >> 4) ^ (v71 >> 9)) & v62;
      v190 = (_QWORD *)(v59 + 16 * v189);
      v191 = (void *)*v190;
      if (v71 == (void *)*v190)
      {
LABEL_245:
        v196 = (_QWORD *)v190[1];
        if (v56)
        {
          v197 = *(unsigned __int8 *)(v56 + 16);
          if (v197 == 81)
            return sub_1C47B9EB0((uint64_t *)v6, (uint64_t)v5, v56, *(_QWORD *)(v56 - 64), *(_QWORD *)(v56 - 32), v70, v196);
          if (v197 == 82)
            return sub_1C47B9614((_QWORD *)v6, (uint64_t)v5, v56, *(llvm::ConstantInt ****)(v56 - 64), *(llvm::ConstantInt ****)(v56 - 32), v70, v196);
        }
        v199 = sub_1C5CC1648((uint64_t *)v6, (uint64_t)*(v5 - 12));
        if (!v199)
          return 0;
        v200 = v199;
        v1293 = v5;
        v201 = *(_QWORD *)(v6 + 32);
        v202 = *(_QWORD *)(v201 + 640);
        v203 = (_QWORD *)v6;
        v204 = *(unint64_t **)(v201 + 648);
        v205 = *(_QWORD *)(v203[12] + 8);
        v206 = *(llvm::MachineFunction **)(v202 + 32);
        v207 = v203;
        v208 = (void *)v203[9];
        v1328[0] = v208;
        if (v208)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v208, 2);
        v209 = *((_QWORD *)v206 + 28);
        if (v209)
          *((_QWORD *)v206 + 28) = *(_QWORD *)v209;
        else
          v209 = sub_1C484358C((uint64_t)v206 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v209, v206, v205 + 239904, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v261 = *(_QWORD *)(v202 + 40);
        *(_QWORD *)(v209 + 24) = v261;
        v262 = *(_QWORD *)(v261 + 32);
        v263 = *(unsigned int *)(v209 + 40);
        if ((_DWORD)v263)
        {
          v602 = *(_QWORD *)(v209 + 32);
          v603 = *(_QWORD *)(v262 + 40);
          v604 = 32 * v263;
          do
          {
            if (!*(_BYTE *)v602)
            {
              v605 = *(unsigned int *)(v602 + 4);
              if ((int)v605 >= 0)
                v606 = (uint64_t *)(*(_QWORD *)(v603 + 272) + 8 * v605);
              else
                v606 = (uint64_t *)(*(_QWORD *)(v603 + 24) + 16 * (v605 & 0x7FFFFFFF) + 8);
              v607 = *v606;
              if (*v606)
              {
                v608 = *(_QWORD *)(v607 + 16);
                *(_QWORD *)(v607 + 16) = v602;
                *(_QWORD *)(v602 + 16) = v608;
                if ((*(_BYTE *)(v602 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v602 + 24) = v607;
                }
                else
                {
                  *(_QWORD *)(v602 + 24) = 0;
                  v606 = (uint64_t *)(v608 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v602 + 16) = v602;
                *(_QWORD *)(v602 + 24) = 0;
              }
              *v606 = v602;
            }
            v602 += 32;
            v604 -= 32;
          }
          while (v604);
        }
        v264 = *(_QWORD *)(v262 + 728);
        if (v264)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v264 + 24))(v264, v209);
        v265 = *v204 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v209 = v265 | *(_QWORD *)v209 & 7;
        *(_QWORD *)(v209 + 8) = v204;
        *(_QWORD *)(v265 + 8) = v209;
        *v204 = *v204 & 7 | v209;
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v209, v206, (const llvm::MachineOperand *)v1330);
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0;
        HIDWORD(v1330[0]) = v200;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v209, v206, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v209, v206, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0x100000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v209, v206, (const llvm::MachineOperand *)v1330);
        v1330[1] = 0;
        v1331[0] = 0uLL;
        v1330[0] = (void *)0x201000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v209, v206, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v209, v206, (const llvm::MachineOperand *)v1330);
        *(_OWORD *)v1330 = 0u;
        v1331[0] = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v209, v206, (const llvm::MachineOperand *)v1330);
        v266 = v207[4];
        v267 = *(_QWORD *)(v266 + 640);
        v268 = *(unint64_t **)(v266 + 648);
        v269 = *(_QWORD *)(v207[12] + 8);
        v270 = *(llvm::MachineFunction **)(v267 + 32);
        v271 = (void *)v207[9];
        v1328[0] = v271;
        if (v271)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v271, 2);
        v272 = *((_QWORD *)v270 + 28);
        if (v272)
          *((_QWORD *)v270 + 28) = *(_QWORD *)v272;
        else
          v272 = sub_1C484358C((uint64_t)v270 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v272, v270, v269 + 555648, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v273 = *(_QWORD *)(v267 + 40);
        *(_QWORD *)(v272 + 24) = v273;
        v274 = *(_QWORD *)(v273 + 32);
        v275 = *(unsigned int *)(v272 + 40);
        v276 = v207;
        if ((_DWORD)v275)
        {
          v609 = *(_QWORD *)(v272 + 32);
          v610 = *(_QWORD *)(v274 + 40);
          v611 = 32 * v275;
          do
          {
            if (!*(_BYTE *)v609)
            {
              v612 = *(unsigned int *)(v609 + 4);
              if ((int)v612 >= 0)
                v613 = (uint64_t *)(*(_QWORD *)(v610 + 272) + 8 * v612);
              else
                v613 = (uint64_t *)(*(_QWORD *)(v610 + 24) + 16 * (v612 & 0x7FFFFFFF) + 8);
              v614 = *v613;
              if (*v613)
              {
                v615 = *(_QWORD *)(v614 + 16);
                *(_QWORD *)(v614 + 16) = v609;
                *(_QWORD *)(v609 + 16) = v615;
                if ((*(_BYTE *)(v609 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v609 + 24) = v614;
                }
                else
                {
                  *(_QWORD *)(v609 + 24) = 0;
                  v613 = (uint64_t *)(v615 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v609 + 16) = v609;
                *(_QWORD *)(v609 + 24) = 0;
              }
              *v613 = v609;
              v276 = v207;
            }
            v609 += 32;
            v611 -= 32;
          }
          while (v611);
        }
        v277 = *(_QWORD *)(v274 + 728);
        if (v277)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v277 + 24))(v277, v272);
        v278 = *v268 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v272 = v278 | *(_QWORD *)v272 & 7;
        *(_QWORD *)(v272 + 8) = v268;
        *(_QWORD *)(v278 + 8) = v272;
        *v268 = *v268 & 7 | v272;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = v70;
        LODWORD(v1330[0]) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v272, v270, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v272, v270, (const llvm::MachineOperand *)v1330);
        v279 = v276[12];
        v280 = *(_QWORD *)(v276[4] + 640);
        v1330[0] = v1331;
        v1330[1] = 0;
        (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, _OWORD *, _QWORD, uint64_t ***, _QWORD))(*(_QWORD *)v279 + 272))(v279, v280, v196, 0, v1331, 0, v1293 + 6, 0);
        if (v1330[0] != v1331)
          free(v1330[0]);
        llvm::MachineBasicBlock::addSuccessor(*(_QWORD **)(v276[4] + 640), v196, -1);
        llvm::MachineBasicBlock::addSuccessor(*(_QWORD **)(v276[4] + 640), v70, -1);
        return 1;
      }
      v192 = 0;
      v193 = 1;
      while (v191 != (void *)-4096)
      {
        if (v192)
          v194 = 0;
        else
          v194 = v191 == (void *)-8192;
        if (v194)
          v192 = v190;
        v195 = v189 + v193++;
        v189 = v195 & v62;
        v190 = (_QWORD *)(v59 + 16 * (v195 & v62));
        v191 = (void *)*v190;
        if (v71 == (void *)*v190)
          goto LABEL_245;
      }
      if (v192)
        v524 = v192;
      else
        v524 = v190;
LABEL_686:
      v190 = sub_1C47AD254(v58, (uint64_t)v1330, v1330, v524);
      *v190 = v1330[0];
      v190[1] = 0;
      goto LABEL_245;
    case 0x28:
    case 0x2A:
    case 0x2C:
    case 0x2E:
    case 0x31:
      v11 = sub_1C5CC1648((uint64_t *)v6, (uint64_t)v5);
      if (!v11)
        return 0;
      return sub_1C47B43B0(v6, (unsigned __int8 *)v5, v11, *((unsigned __int8 *)*v5 + 8) != 2, 0, 0);
    case 0x29:
    case 0x2B:
      v34 = sub_1C5CC1648((uint64_t *)v6, (uint64_t)v5);
      if (!v34)
        return 0;
      if ((sub_1C6129604((uint64_t *)v6, (uint64_t)v5, v34) & 1) != 0)
        return 1;
      return sub_1C47AE80C(v6, (unsigned __int8 *)v5);
    case 0x2D:
      return sub_1C47BAFBC((uint64_t *)v6, (uint64_t)v5);
    case 0x35:
    case 0x36:
    case 0x37:
      return sub_1C47BA714((uint64_t *)v6, (uint64_t)v5);
    case 0x38:
    case 0x39:
    case 0x3A:
      v3 = 0;
      v1312 = (llvm::MachineFunction *)*v5;
      if (*((_DWORD *)*v5 + 2) != 13
        || (vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqq_s32(vdupq_n_s32(*((_DWORD *)*v5 + 2) >> 8), (int32x4_t)xmmword_1C640F790), (int8x16_t)xmmword_1C640F7A0)) & 0xF) == 0)
      {
        return v3;
      }
      v30 = sub_1C5CC1648((uint64_t *)v6, (uint64_t)v5);
      if (!v30)
        return 0;
      v1299 = v30;
      if (sub_1C4793684((uint64_t)v5))
      {
        v31 = *((_DWORD *)v5 + 5);
        if ((v31 & 0x40000000) != 0)
          v32 = (uint64_t *)*(v5 - 1);
        else
          v32 = (uint64_t *)&v5[-4 * (v31 & 0x7FFFFFF)];
        v235 = *v32;
        if (v235 && (v236 = *(unsigned __int8 *)(v235 + 16), v236 >= 0x1C) && v236 - 56 < 3)
        {
          v1284 = 0;
          v186 = 1;
          v188 = 2;
          v187 = 1;
          v5 = (uint64_t ***)v235;
        }
        else
        {
          v187 = 0;
          v1284 = 1;
          v186 = 10;
          v188 = 1;
        }
      }
      else
      {
        v186 = 0;
        v1284 = 0;
        v187 = 1;
        v188 = 2;
      }
      v1328[0] = 0;
      v1328[1] = 0;
      v237 = *((_DWORD *)v5 + 5);
      if ((v237 & 0x40000000) != 0)
        v238 = (uint64_t *)*(v5 - 1);
      else
        v238 = (uint64_t *)&v5[-4 * (v237 & 0x7FFFFFF)];
      v239 = *v238;
      v240 = v238[4];
      v1332.i64[0] = *v238;
      v1332.i64[1] = v240;
      v1338 = 0uLL;
      v1327 = 0;
      v1335 = v1312;
      v1336 = v1312;
      v1337 = 0;
      v1279 = v187;
      if (v187)
      {
        if (sub_1C4793684(v240))
        {
          v1332.i64[0] = v240;
          v1332.i64[1] = v239;
        }
        else
        {
          v240 = v239;
        }
        if (sub_1C4793684(v240))
        {
          v186 |= 2u;
          v242 = *(_DWORD *)(v240 + 20);
          if ((v242 & 0x40000000) != 0)
            v243 = *(uint64_t **)(v240 - 8);
          else
            v243 = (uint64_t *)(v240 - 32 * (v242 & 0x7FFFFFF));
          v1332.i64[0] = *v243;
        }
        v241 = (uint64_t *)v6;
        v290 = *((unsigned __int8 *)v5 + 16);
        v291 = v186 + 4;
        if (v290 != 57)
          v291 = v186 + 8;
        if (v290 != 56)
          v186 = v291;
        v1294 = v186;
      }
      else
      {
        v1294 = v186;
        v241 = (uint64_t *)v6;
      }
      v292 = 0;
      v293 = &v1337;
      v294 = (const llvm::APInt *)&v1327;
      do
      {
        v295 = (_BYTE *)v1332.i64[v292];
        if (v295)
          v296 = v295[16] == 16;
        else
          v296 = 0;
        if (v296)
        {
          v1328[v292] = v295;
        }
        else
        {
          v1338.i64[v292] = (uint64_t)v295;
          v297 = sub_1C47AD824(v241, &v1338.i64[v292], v294, (llvm::MachineFunction **)((char *)&v1335 + v292 * 8), (uint64_t)v5[5], 0, 0);
          v293->i32[0] = v297;
          if (!v297)
            return 0;
        }
        v293 = (int32x2_t *)((char *)v293 + 4);
        ++v292;
        v294 = (const llvm::APInt *)((char *)v294 + 4);
      }
      while (v188 != v292);
      v298 = v1328[0];
      if (v1328[0])
      {
        if (v1328[1])
          v299 = 1;
        else
          v299 = v1284;
        if ((v299 & 1) != 0)
          return 0;
        v300 = v241;
        v301 = v1335;
        v302 = v1336;
        v303 = v1294;
        if (v1279)
        {
          v304 = 0;
          v1338 = vextq_s8(v1338, v1338, 8uLL);
          v1337 = vrev64_s32(v1337);
          v1328[0] = 0;
          v1328[1] = v298;
          v1327 = vrev64_s32(v1327);
          v1335 = v1336;
          v1336 = v301;
          v305 = v301;
          v301 = v302;
        }
        else
        {
          v304 = 1;
          v305 = v1336;
        }
      }
      else
      {
        v304 = v1328[1] == 0;
        v301 = v1335;
        v305 = v1336;
        v300 = v241;
        v303 = v1294;
      }
      v329 = *((_DWORD *)v1312 + 2) >> 8;
      v330 = v329 == 64;
      v331 = v329 == 32 && *((_DWORD *)v1312 + 2) == 13;
      v332 = *((_DWORD *)v301 + 2);
      v333 = v332 == 13;
      v332 >>= 8;
      v334 = v332 == 64;
      v335 = v332 == 32 && v333;
      v336 = *((_DWORD *)v305 + 2);
      v337 = v336 == 13;
      v336 >>= 8;
      v338 = v336 == 64;
      v339 = v336 == 32 && v337;
      if (v337 && v338)
        v339 = 2;
      if (*((_DWORD *)v1312 + 2) == 13 && v330)
        v331 = 2;
      if (v333 && v334)
        v335 = 2;
      if (!v304)
        v339 = 2;
      v340 = *((unsigned __int16 *)&word_1C640F078 + 12 * v303 + 6 * v331 + 3 * v335 + v339);
      v341 = v300[4];
      v342 = *(_QWORD *)(v341 + 640);
      v343 = *(unint64_t **)(v341 + 648);
      v344 = *(_QWORD *)(v300[12] + 8);
      v345 = *(llvm::MachineFunction **)(v342 + 32);
      v346 = (llvm::MachineFunction *)v300[9];
      v1325 = v346;
      if (v346)
        llvm::MetadataTracking::track((uint64_t)&v1325, (unsigned __int8 *)v346, 2);
      v347 = *((_QWORD *)v345 + 28);
      if (v347)
        *((_QWORD *)v345 + 28) = *(_QWORD *)v347;
      else
        v347 = sub_1C484358C((uint64_t)v345 + 128, 72, 3);
      v1330[0] = v1325;
      if (v1325)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v1325, (unsigned __int8 *)v1325, (uint64_t)v1330);
        v1325 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v347, v345, v344 + 48 * v340, (unsigned __int8 **)v1330, 0);
      if (v1330[0])
        llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
      if (v1325)
        llvm::MetadataTracking::untrack((uint64_t)&v1325, (unsigned __int8 *)v1325);
      v348 = *(_QWORD *)(v342 + 40);
      *(_QWORD *)(v347 + 24) = v348;
      v349 = *(_QWORD *)(v348 + 32);
      v350 = *(unsigned int *)(v347 + 40);
      if ((_DWORD)v350)
      {
        v571 = *(_QWORD *)(v347 + 32);
        v572 = *(_QWORD *)(v349 + 40);
        v573 = 32 * v350;
        do
        {
          if (!*(_BYTE *)v571)
          {
            v574 = *(unsigned int *)(v571 + 4);
            if ((int)v574 >= 0)
              v575 = (uint64_t *)(*(_QWORD *)(v572 + 272) + 8 * v574);
            else
              v575 = (uint64_t *)(*(_QWORD *)(v572 + 24) + 16 * (v574 & 0x7FFFFFFF) + 8);
            v576 = *v575;
            if (*v575)
            {
              v577 = *(_QWORD *)(v576 + 16);
              *(_QWORD *)(v576 + 16) = v571;
              *(_QWORD *)(v571 + 16) = v577;
              if ((*(_BYTE *)(v571 + 3) & 1) != 0)
              {
                *(_QWORD *)(v571 + 24) = v576;
              }
              else
              {
                *(_QWORD *)(v571 + 24) = 0;
                v575 = (uint64_t *)(v577 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v571 + 16) = v571;
              *(_QWORD *)(v571 + 24) = 0;
            }
            *v575 = v571;
          }
          v571 += 32;
          v573 -= 32;
        }
        while (v573);
      }
      v351 = *(_QWORD *)(v349 + 728);
      if (v351)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v351 + 24))(v351, v347);
      v352 = *v343 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v347 = v352 | *(_QWORD *)v347 & 7;
      *(_QWORD *)(v347 + 8) = v343;
      *(_QWORD *)(v352 + 8) = v347;
      *v343 = *v343 & 7 | v347;
      v1330[1] = 0;
      v1331[0] = 0uLL;
      LODWORD(v1330[0]) = 0x1000000;
      HIDWORD(v1330[0]) = v1299;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v347, v345, (const llvm::MachineOperand *)v1330);
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v347, v345, (const llvm::MachineOperand *)v1330);
      v1325 = v345;
      v1326 = (llvm::MachineInstr *)v347;
      v353 = &v1337;
      v354 = &v1338;
      v355 = v1328;
      do
      {
        v356 = (char *)*v355;
        if (*v355)
        {
          v357 = (unint64_t *)(v356 + 24);
          if (*((_DWORD *)v356 + 8) >= 0x41u)
            v357 = (unint64_t *)*v357;
          v358 = *v357;
          if (v358 < 0x10000)
            v358 |= 0x100000000uLL;
          v360 = v1325;
          v359 = v1326;
          LODWORD(v1330[0]) = 1;
          v1330[1] = 0;
          *(_QWORD *)&v1331[0] = v358;
        }
        else
        {
          if ((sub_1C47ADDC8((uint64_t)v300, v354->i64[0], 0, &v1325, 0) & 1) == 0)
          {
            v361 = v353->i32[0];
            v1330[1] = 0;
            LODWORD(v1330[0]) = 0;
            HIDWORD(v1330[0]) = v361;
            v1331[0] = 0uLL;
            llvm::MachineInstr::addOperand(v1326, v1325, (const llvm::MachineOperand *)v1330);
          }
          v360 = v1325;
          v359 = v1326;
          LODWORD(v1330[0]) = 1;
          v1330[1] = 0;
          *(_QWORD *)&v1331[0] = 0;
        }
        llvm::MachineInstr::addOperand(v359, v360, (const llvm::MachineOperand *)v1330);
        v353 = (int32x2_t *)((char *)v353 + 4);
        v354 = (int8x16_t *)((char *)v354 + 8);
        ++v355;
        --v188;
      }
      while (v188);
      v3 = 1;
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0;
      llvm::MachineInstr::addOperand(v1326, v1325, (const llvm::MachineOperand *)v1330);
      v363 = v1325;
      v362 = v1326;
LABEL_446:
      *(_OWORD *)v1330 = 0u;
      v1331[0] = 0u;
      goto LABEL_447;
    case 0x3C:
      return sub_1C6127F10((_QWORD *)v6, (uint64_t)v5);
    case 0x3D:
      v80 = (uint64_t)*(v5 - 4);
      v81 = *(_DWORD *)(*(_QWORD *)v80 + 8);
      if ((v81 & 0xFE) == 0x12)
        v81 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v80 + 16) + 8);
      if (v81 > 0xFF)
        return 0;
      v82 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 256) + 280);
      v83 = (uint64_t *)*(v5 - 8);
      v84 = *v83;
      v1332.i32[0] = 0;
      v1338.i32[0] = 0;
      LODWORD(v1335) = 0;
      if (sub_1C4786904(v6, v84, v1332.i32))
      {
        if ((v86 = v1332.i32[0], v1332.i32[0] <= 0x30u) && ((1 << v1332.i8[0]) & 0x1000000010100) != 0
          || v1332.i32[0] <= 512 && (v1332.i8[0] & 0x1F) == 0)
        {
          if (sub_1C478664C(v6, v80, &v1335, &v1338, v85))
          {
            if (v86 > 31)
              v87 = v86 > 0x3F ? (v86 >> 5) + 2 : v86 >> 4;
            else
              v87 = v86 / 8 - 1;
            v500 = *((_DWORD *)&dword_1C640F180 + 2 * v87 + v82);
            v501 = sub_1C47869B8((_QWORD *)v6, (uint64_t)v83, 0);
            if (v501)
            {
              v502 = v501;
              v503 = v5;
              v504 = *(_QWORD *)(v6 + 32);
              v505 = v6;
              v506 = *(_QWORD *)(v504 + 640);
              v507 = *(unint64_t **)(v504 + 648);
              v508 = *(_QWORD *)(*(_QWORD *)(v505 + 96) + 8);
              v509 = *(llvm::MachineFunction **)(v506 + 32);
              v510 = v505;
              v511 = *(void **)(v505 + 72);
              v1328[0] = v511;
              if (v511)
                llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v511, 2);
              v512 = v508 + 48 * v500;
              v513 = *((_QWORD *)v509 + 28);
              if (v513)
                *((_QWORD *)v509 + 28) = *(_QWORD *)v513;
              else
                v513 = sub_1C484358C((uint64_t)v509 + 128, 72, 3);
              v1330[0] = v1328[0];
              if (v1328[0])
              {
                llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
                v1328[0] = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v513, v509, v512, (unsigned __int8 **)v1330, 0);
              if (v1330[0])
                llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
              if (v1328[0])
                llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
              v527 = *(_QWORD *)(v506 + 40);
              *(_QWORD *)(v513 + 24) = v527;
              v528 = *(_QWORD *)(v527 + 32);
              v529 = *(unsigned int *)(v513 + 40);
              if ((_DWORD)v529)
              {
                v869 = *(_QWORD *)(v513 + 32);
                v870 = *(_QWORD *)(v528 + 40);
                v871 = 32 * v529;
                do
                {
                  if (!*(_BYTE *)v869)
                  {
                    v872 = *(unsigned int *)(v869 + 4);
                    if ((int)v872 >= 0)
                      v873 = (uint64_t *)(*(_QWORD *)(v870 + 272) + 8 * v872);
                    else
                      v873 = (uint64_t *)(*(_QWORD *)(v870 + 24) + 16 * (v872 & 0x7FFFFFFF) + 8);
                    v874 = *v873;
                    if (*v873)
                    {
                      v875 = *(_QWORD *)(v874 + 16);
                      *(_QWORD *)(v874 + 16) = v869;
                      *(_QWORD *)(v869 + 16) = v875;
                      if ((*(_BYTE *)(v869 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v869 + 24) = v874;
                      }
                      else
                      {
                        *(_QWORD *)(v869 + 24) = 0;
                        v873 = (uint64_t *)(v875 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v869 + 16) = v869;
                      *(_QWORD *)(v869 + 24) = 0;
                    }
                    *v873 = v869;
                  }
                  v869 += 32;
                  v871 -= 32;
                }
                while (v871);
              }
              v530 = *(_QWORD *)(v528 + 728);
              v531 = v510;
              if (v530)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v530 + 24))(v530, v513);
              v532 = *v507 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v513 = v532 | *(_QWORD *)v513 & 7;
              *(_QWORD *)(v513 + 8) = v507;
              *(_QWORD *)(v532 + 8) = v513;
              *v507 = *v507 & 7 | v513;
              v1330[1] = 0;
              v1331[0] = 0uLL;
              LODWORD(v1330[0]) = 0;
              HIDWORD(v1330[0]) = v502;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v513, v509, (const llvm::MachineOperand *)v1330);
              LODWORD(v1330[0]) = 5;
              v1330[1] = 0;
              LODWORD(v1331[0]) = (_DWORD)v1335;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v513, v509, (const llvm::MachineOperand *)v1330);
              LODWORD(v1330[0]) = 1;
              v1330[1] = 0;
              *(_QWORD *)&v1331[0] = v1338.i32[0];
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v513, v509, (const llvm::MachineOperand *)v1330);
              if ((_DWORD)v82)
              {
                v533 = (uint64_t)v503[5][7];
                v534 = *(_QWORD *)(v531 + 256);
                LODWORD(v1330[0]) = 0;
                v535 = sub_1C4785D88(v534, v533, "StoreCMode", v1330);
                v536 = LODWORD(v1330[0]);
                LODWORD(v1330[0]) = 1;
                if (!v535)
                  v536 = 2;
                v1330[1] = 0;
                *(_QWORD *)&v1331[0] = v536;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v513, v509, (const llvm::MachineOperand *)v1330);
                v537 = *(_QWORD *)(v531 + 256);
                LODWORD(v1330[0]) = 0;
                v538 = sub_1C4785D88(v537, v533, "StoreSLCMode", v1330);
                v539 = LODWORD(v1330[0]);
                if (!v538)
                  v539 = 1;
                LODWORD(v1330[0]) = 1;
                v1330[1] = 0;
                *(_QWORD *)&v1331[0] = v539;
              }
              else
              {
                v540 = *(_BYTE **)(v510 + 256);
                if (v540[310])
                {
                  v541 = 1;
                }
                else if (v540[311])
                {
                  v541 = 2;
                }
                else
                {
                  v26 = v540[312] == 0;
                  v541 = 3;
                  if (v26)
                    v541 = 0;
                }
                LODWORD(v1330[0]) = 1;
                v1330[1] = 0;
                *(_QWORD *)&v1331[0] = v541;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v513, v509, (const llvm::MachineOperand *)v1330);
                LODWORD(v1330[0]) = 1;
                v1330[1] = 0;
                *(_QWORD *)&v1331[0] = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v513, v509, (const llvm::MachineOperand *)v1330);
                LODWORD(v1330[0]) = 1;
                v1330[1] = 0;
                *(_QWORD *)&v1331[0] = 0;
              }
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v513, v509, (const llvm::MachineOperand *)v1330);
              v3 = 1;
              LODWORD(v1330[0]) = 1;
              v1330[1] = 0;
              *(_QWORD *)&v1331[0] = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v513, v509, (const llvm::MachineOperand *)v1330);
              LODWORD(v1330[0]) = 1;
              v1330[1] = 0;
              *(_QWORD *)&v1331[0] = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v513, v509, (const llvm::MachineOperand *)v1330);
              *(_OWORD *)v1330 = 0u;
              v1331[0] = 0u;
              v362 = (llvm::MachineInstr *)v513;
              goto LABEL_1256;
            }
          }
        }
      }
      v514 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 256) + 280);
      v515 = (unsigned __int8 *)*(v5 - 8);
      v516 = (unsigned __int8 *)*(v5 - 4);
      v517 = *(_QWORD *)v515;
      v1332.i32[0] = 0;
      v3 = 0;
      if (!sub_1C4786904(v6, v517, v1332.i32))
        return v3;
      if (v516[16] - 11 < 2)
        return 0;
      v518 = v1332.i32[0];
      if (v1332.i32[0] > 0x30u || ((1 << v1332.i8[0]) & 0x1000000010100) == 0)
      {
        v3 = 0;
        v523 = (_DWORD)v514 ? 513 : 129;
        if (v1332.i32[0] >= v523 || (v1332.i8[0] & 0x1F) != 0)
          return v3;
      }
      v1338.i32[0] = 0;
      v519 = sub_1C47869B8((_QWORD *)v6, (uint64_t)v515, v1338.i32);
      if (!v519)
        return 0;
      v520 = v519;
      v1309 = (_QWORD *)v6;
      v521 = *(_QWORD **)(v6 + 48);
      if ((_UNKNOWN ***)(*(_QWORD *)(v521[3] + 16 * (v520 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E7F98468)
        sub_1C51A3F30(v521, v520, (uint64_t)&off_1E7F98468, (uint64_t)&off_1E7F984F0, 0);
      if (v1338.i32[0])
      {
        v522 = v518 - v1338.i32[0];
        v1332.i32[0] = v518 - v1338.i32[0];
        if ((v1338.i32[0] & 0xFFFFFFEF) != 0)
          return 0;
      }
      else
      {
        v522 = v518;
      }
      v578 = v522 > 31 ? (v522 >> 5) + 1 : v522 / 8 - 1;
      v3 = *((unsigned int *)&dword_1C640F218 + 2 * v578 + v514);
      if (!(_DWORD)v3)
        return v3;
      v616 = sub_1C47A836C(v6, v516);
      if (!v616)
        return 0;
      v1321 = v518 - v1338.i32[0];
      v1296 = v5;
      v1304 = (v518 - v1338.i32[0]) >> 3;
      v1288 = v616;
      if (v1338.i32[0] == 16)
      {
        v617 = *(_QWORD *)(v6 + 48);
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v617, "", 0);
        *(_QWORD *)(*(_QWORD *)(v617 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F98468;
        v619 = *(_QWORD *)(v617 + 8);
        if (v619)
          (*(void (**)(uint64_t))(*(_QWORD *)v619 + 24))(v619);
        v1282 = IncompleteVirtualRegister;
        if (!IncompleteVirtualRegister)
          return 0;
        v620 = sub_1C47A836C(v6, v515);
        if (!v620)
          return 0;
        v621 = v620;
        v622 = *(_QWORD *)(v6 + 32);
        v623 = *(unint64_t **)(v622 + 648);
        v624 = *(_QWORD *)(v1309[12] + 8);
        if ((_DWORD)v514)
          v625 = 132768;
        else
          v625 = 136128;
        v1275 = *(_QWORD *)(v622 + 640);
        v626 = *(llvm::MachineFunction **)(v1275 + 32);
        v627 = (void *)v1309[9];
        v1328[0] = v627;
        if (v627)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v627, 2);
        v628 = v624 + v625;
        v629 = *((_QWORD *)v626 + 28);
        if (v629)
          *((_QWORD *)v626 + 28) = *(_QWORD *)v629;
        else
          v629 = sub_1C484358C((uint64_t)v626 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v629, v626, v628, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v1227 = *(_QWORD *)(v1275 + 40);
        *(_QWORD *)(v629 + 24) = v1227;
        v1228 = *(_QWORD *)(v1227 + 32);
        v1229 = *(unsigned int *)(v629 + 40);
        if ((_DWORD)v1229)
        {
          v1263 = *(_QWORD *)(v629 + 32);
          v1264 = *(_QWORD *)(v1228 + 40);
          v1265 = 32 * v1229;
          do
          {
            if (!*(_BYTE *)v1263)
            {
              v1266 = *(unsigned int *)(v1263 + 4);
              if ((int)v1266 >= 0)
                v1267 = (uint64_t *)(*(_QWORD *)(v1264 + 272) + 8 * v1266);
              else
                v1267 = (uint64_t *)(*(_QWORD *)(v1264 + 24) + 16 * (v1266 & 0x7FFFFFFF) + 8);
              v1268 = *v1267;
              if (*v1267)
              {
                v1269 = *(_QWORD *)(v1268 + 16);
                *(_QWORD *)(v1268 + 16) = v1263;
                *(_QWORD *)(v1263 + 16) = v1269;
                if ((*(_BYTE *)(v1263 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v1263 + 24) = v1268;
                }
                else
                {
                  *(_QWORD *)(v1263 + 24) = 0;
                  v1267 = (uint64_t *)(v1269 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v1263 + 16) = v1263;
                *(_QWORD *)(v1263 + 24) = 0;
              }
              *v1267 = v1263;
            }
            v1263 += 32;
            v1265 -= 32;
          }
          while (v1265);
        }
        HIDWORD(v1270) = v621 + (v1321 >> 4);
        v1230 = *(_QWORD *)(v1228 + 728);
        if (v1230)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v1230 + 24))(v1230, v629);
        v1231 = *v623 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v629 = v1231 | *(_QWORD *)v629 & 7;
        *(_QWORD *)(v629 + 8) = v623;
        *(_QWORD *)(v1231 + 8) = v629;
        *v623 = *v623 & 7 | v629;
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0x1000000;
        HIDWORD(v1330[0]) = v1282;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v629, v626, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v629, v626, (const llvm::MachineOperand *)v1330);
        v1232 = sub_1C6127088((uint64_t)v1309, v1288);
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = v1232 << 8;
        HIDWORD(v1330[0]) = v1288;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v629, v626, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v629, v626, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = v1304;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v629, v626, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v629, v626, (const llvm::MachineOperand *)v1330);
        *(_OWORD *)v1330 = 0u;
        v1331[0] = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v629, v626, (const llvm::MachineOperand *)v1330);
        if (!(_DWORD)v514)
        {
          LODWORD(v1270) = 0;
          v1276 = 0;
          goto LABEL_1155;
        }
        LODWORD(v1270) = sub_1C6127C28((uint64_t)v1309, v1282);
        if (!(_DWORD)v1270)
          return 0;
      }
      else
      {
        v1270 = 0;
        v1282 = 0;
        v1276 = 0;
        if (!(_DWORD)v514)
        {
LABEL_1155:
          v827 = v1309[4];
          v828 = *(_QWORD *)(v827 + 640);
          v829 = *(llvm::MachineFunction **)(v828 + 32);
          v1272 = *(unint64_t **)(v827 + 648);
          v830 = *(_QWORD *)(v1309[12] + 8);
          v831 = (void *)v1309[9];
          v1328[0] = v831;
          if (v831)
            llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v831, 2);
          v832 = *((_QWORD *)v829 + 28);
          v1324 = v829;
          if (v832)
            *((_QWORD *)v829 + 28) = *(_QWORD *)v832;
          else
            v832 = sub_1C484358C((uint64_t)v829 + 128, 72, 3);
          v1330[0] = v1328[0];
          if (v1328[0])
          {
            llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
            v1328[0] = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v832, v829, v830 + 48 * v3, (unsigned __int8 **)v1330, 0);
          if (v1330[0])
            llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
          if (v1328[0])
            llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
          v935 = *(_QWORD *)(v828 + 40);
          *(_QWORD *)(v832 + 24) = v935;
          v936 = *(_QWORD *)(v935 + 32);
          v937 = *(unsigned int *)(v832 + 40);
          if ((_DWORD)v937)
          {
            v1133 = *(_QWORD *)(v832 + 32);
            v1134 = *(_QWORD *)(v936 + 40);
            v1135 = 32 * v937;
            do
            {
              if (!*(_BYTE *)v1133)
              {
                v1136 = *(unsigned int *)(v1133 + 4);
                if ((int)v1136 >= 0)
                  v1137 = (uint64_t *)(*(_QWORD *)(v1134 + 272) + 8 * v1136);
                else
                  v1137 = (uint64_t *)(*(_QWORD *)(v1134 + 24) + 16 * (v1136 & 0x7FFFFFFF) + 8);
                v1138 = *v1137;
                if (*v1137)
                {
                  v1139 = *(_QWORD *)(v1138 + 16);
                  *(_QWORD *)(v1138 + 16) = v1133;
                  *(_QWORD *)(v1133 + 16) = v1139;
                  if ((*(_BYTE *)(v1133 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v1133 + 24) = v1138;
                  }
                  else
                  {
                    *(_QWORD *)(v1133 + 24) = 0;
                    v1137 = (uint64_t *)(v1139 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v1133 + 16) = v1133;
                  *(_QWORD *)(v1133 + 24) = 0;
                }
                *v1137 = v1133;
              }
              v1133 += 32;
              v1135 -= 32;
            }
            while (v1135);
          }
          v938 = *(_QWORD *)(v936 + 728);
          if (v938)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v938 + 24))(v938, v832);
          v939 = *v1272 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v832 = v939 | *(_QWORD *)v832 & 7;
          *(_QWORD *)(v832 + 8) = v1272;
          *(_QWORD *)(v939 + 8) = v832;
          *v1272 = *v1272 & 7 | v832;
          v1330[1] = 0;
          v1331[0] = 0uLL;
          LODWORD(v1330[0]) = 0;
          HIDWORD(v1330[0]) = v520;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v832, v829, (const llvm::MachineOperand *)v1330);
          if ((_DWORD)v514)
          {
            v940 = (uint64_t)v1296[5][7];
            v1330[1] = 0;
            v1331[0] = 0uLL;
            LODWORD(v1330[0]) = 0;
            HIDWORD(v1330[0]) = v1276;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v832, v829, (const llvm::MachineOperand *)v1330);
            v941 = v1309[32];
            LODWORD(v1330[0]) = 0;
            v942 = sub_1C4785D88(v941, v940, "StoreCMode", v1330);
            v943 = LODWORD(v1330[0]);
            LODWORD(v1330[0]) = 1;
            if (!v942)
              v943 = 2;
            v1330[1] = 0;
            *(_QWORD *)&v1331[0] = v943;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v832, v829, (const llvm::MachineOperand *)v1330);
            v944 = v1309[32];
            LODWORD(v1330[0]) = 0;
            v945 = sub_1C4785D88(v944, v940, "StoreSLCMode", v1330);
            v946 = LODWORD(v1330[0]);
            if (!v945)
              v946 = 1;
            LODWORD(v1330[0]) = 1;
            v1330[1] = 0;
            *(_QWORD *)&v1331[0] = v946;
          }
          else
          {
            v1130 = sub_1C6127088((uint64_t)v1309, v1288);
            v1330[1] = 0;
            v1331[0] = 0uLL;
            LODWORD(v1330[0]) = v1130 << 8;
            HIDWORD(v1330[0]) = v1288;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v832, v829, (const llvm::MachineOperand *)v1330);
            v1131 = (_BYTE *)v1309[32];
            if (v1131[310])
            {
              v1132 = 1;
            }
            else if (v1131[311])
            {
              v1132 = 2;
            }
            else
            {
              v26 = v1131[312] == 0;
              v1132 = 3;
              if (v26)
                v1132 = 0;
            }
            LODWORD(v1330[0]) = 1;
            v1330[1] = 0;
            *(_QWORD *)&v1331[0] = v1132;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v832, v829, (const llvm::MachineOperand *)v1330);
            LODWORD(v1330[0]) = 1;
            v1330[1] = 0;
            *(_QWORD *)&v1331[0] = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v832, v829, (const llvm::MachineOperand *)v1330);
            LODWORD(v1330[0]) = 1;
            v1330[1] = 0;
            *(_QWORD *)&v1331[0] = 0;
          }
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v832, v829, (const llvm::MachineOperand *)v1330);
          v3 = 1;
          LODWORD(v1330[0]) = 1;
          v1330[1] = 0;
          *(_QWORD *)&v1331[0] = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v832, v829, (const llvm::MachineOperand *)v1330);
          LODWORD(v1330[0]) = 1;
          v1330[1] = 0;
          *(_QWORD *)&v1331[0] = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v832, v829, (const llvm::MachineOperand *)v1330);
          *(_OWORD *)v1330 = 0u;
          v1331[0] = 0u;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v832, v829, (const llvm::MachineOperand *)v1330);
          v1292 = (unint64_t)v516 & 0xFFFFFFFFFFFFFFFBLL;
          v947 = *(_DWORD *)(*(_QWORD *)v516 + 8);
          if ((v947 & 0xFE) == 0x12)
            v947 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v516 + 16) + 8);
          v948 = v947 >> 8;
          if (v522 >= 0)
            v949 = v522;
          else
            v949 = v522 + 7;
          v950 = *((unsigned __int8 *)v1296 + 18);
          v951 = (uint64_t)v829 + 128;
          v952 = sub_1C484358C((uint64_t)v829 + 128, 80, 3);
          *(_QWORD *)v952 = v1292;
          *(_QWORD *)(v952 + 8) = 0;
          *(_DWORD *)(v952 + 16) = v948;
          if ((v522 + 15) >= 8)
            v953 = ((unint64_t)(v949 >> 3) << 6) | 1;
          else
            v953 = 0;
          *(_BYTE *)(v952 + 20) = 0;
          *(_QWORD *)(v952 + 24) = v953;
          *(_WORD *)(v952 + 32) = 2;
          *(_BYTE *)(v952 + 34) = (v950 >> 1) & 0x3F;
          *(_OWORD *)(v952 + 40) = 0u;
          *(_OWORD *)(v952 + 56) = 0u;
          *(_QWORD *)(v952 + 72) = 0;
          *(_WORD *)(v952 + 36) = 1;
          llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v832, v829, (llvm::MachineMemOperand *)v952);
          if (v1338.i32[0])
          {
            v954 = v1309[4];
            v955 = *(_QWORD *)(v954 + 640);
            v956 = *(unint64_t **)(v954 + 648);
            v957 = *(_QWORD *)(v1309[12] + 8);
            if ((_DWORD)v514)
              v958 = 635040;
            else
              v958 = 123504;
            v959 = *(llvm::MachineFunction **)(v955 + 32);
            v960 = (void *)v1309[9];
            v1328[0] = v960;
            if (v960)
              llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v960, 2);
            v961 = v957 + v958;
            v962 = *((_QWORD *)v959 + 28);
            if (v962)
              *((_QWORD *)v959 + 28) = *(_QWORD *)v962;
            else
              v962 = sub_1C484358C((uint64_t)v959 + 128, 72, 3);
            v1330[0] = v1328[0];
            if (v1328[0])
            {
              llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
              v1328[0] = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v962, v959, v961, (unsigned __int8 **)v1330, 0);
            if (v1330[0])
              llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
            if (v1328[0])
              llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
            v1017 = *(_QWORD *)(v955 + 40);
            *(_QWORD *)(v962 + 24) = v1017;
            v1018 = *(_QWORD *)(v1017 + 32);
            v1019 = *(unsigned int *)(v962 + 40);
            if ((_DWORD)v1019)
            {
              v1174 = *(_QWORD *)(v962 + 32);
              v1175 = *(_QWORD *)(v1018 + 40);
              v1176 = 32 * v1019;
              do
              {
                if (!*(_BYTE *)v1174)
                {
                  v1177 = *(unsigned int *)(v1174 + 4);
                  if ((int)v1177 >= 0)
                    v1178 = (uint64_t *)(*(_QWORD *)(v1175 + 272) + 8 * v1177);
                  else
                    v1178 = (uint64_t *)(*(_QWORD *)(v1175 + 24) + 16 * (v1177 & 0x7FFFFFFF) + 8);
                  v1179 = *v1178;
                  if (*v1178)
                  {
                    v1180 = *(_QWORD *)(v1179 + 16);
                    *(_QWORD *)(v1179 + 16) = v1174;
                    *(_QWORD *)(v1174 + 16) = v1180;
                    if ((*(_BYTE *)(v1174 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v1174 + 24) = v1179;
                    }
                    else
                    {
                      *(_QWORD *)(v1174 + 24) = 0;
                      v1178 = (uint64_t *)(v1180 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v1174 + 16) = v1174;
                    *(_QWORD *)(v1174 + 24) = 0;
                  }
                  *v1178 = v1174;
                }
                v1174 += 32;
                v1176 -= 32;
              }
              while (v1176);
            }
            v1020 = *(_QWORD *)(v1018 + 728);
            if (v1020)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v1020 + 24))(v1020, v962);
            v1021 = *v956 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v962 = v1021 | *(_QWORD *)v962 & 7;
            *(_QWORD *)(v962 + 8) = v956;
            *(_QWORD *)(v1021 + 8) = v962;
            *v956 = *v956 & 7 | v962;
            v1330[1] = 0;
            v1331[0] = 0uLL;
            LODWORD(v1330[0]) = 0;
            HIDWORD(v1330[0]) = HIDWORD(v1270);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v962, v959, (const llvm::MachineOperand *)v1330);
            if ((_DWORD)v514)
            {
              v1022 = (uint64_t)v1296[5][7];
              v1330[1] = 0;
              v1331[0] = 0uLL;
              LODWORD(v1330[0]) = 0;
              HIDWORD(v1330[0]) = v1270;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v962, v959, (const llvm::MachineOperand *)v1330);
              v1023 = v1309[32];
              LODWORD(v1330[0]) = 0;
              v1024 = sub_1C4785D88(v1023, v1022, "StoreCMode", v1330);
              v1025 = LODWORD(v1330[0]);
              LODWORD(v1330[0]) = 1;
              if (!v1024)
                v1025 = 2;
              v1330[1] = 0;
              *(_QWORD *)&v1331[0] = v1025;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v962, v959, (const llvm::MachineOperand *)v1330);
              v1026 = v1309[32];
              LODWORD(v1330[0]) = 0;
              v1027 = sub_1C4785D88(v1026, v1022, "StoreSLCMode", v1330);
              v1028 = LODWORD(v1330[0]);
              if (!v1027)
                v1028 = 1;
              LODWORD(v1330[0]) = 1;
              v1330[1] = 0;
              *(_QWORD *)&v1331[0] = v1028;
            }
            else
            {
              v1330[1] = 0;
              v1331[0] = 0uLL;
              LODWORD(v1330[0]) = 0;
              HIDWORD(v1330[0]) = v1282;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v962, v959, (const llvm::MachineOperand *)v1330);
              v1029 = (_BYTE *)v1309[32];
              if (v1029[310])
              {
                v1030 = 1;
              }
              else if (v1029[311])
              {
                v1030 = 2;
              }
              else
              {
                v26 = v1029[312] == 0;
                v1030 = 3;
                if (v26)
                  v1030 = 0;
              }
              LODWORD(v1330[0]) = 1;
              v1330[1] = 0;
              *(_QWORD *)&v1331[0] = v1030;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v962, v959, (const llvm::MachineOperand *)v1330);
              LODWORD(v1330[0]) = 1;
              v1330[1] = 0;
              *(_QWORD *)&v1331[0] = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v962, v959, (const llvm::MachineOperand *)v1330);
              LODWORD(v1330[0]) = 1;
              v1330[1] = 0;
              *(_QWORD *)&v1331[0] = 0;
            }
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v962, v959, (const llvm::MachineOperand *)v1330);
            v3 = 1;
            LODWORD(v1330[0]) = 1;
            v1330[1] = 0;
            *(_QWORD *)&v1331[0] = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v962, v959, (const llvm::MachineOperand *)v1330);
            LODWORD(v1330[0]) = 1;
            v1330[1] = 0;
            *(_QWORD *)&v1331[0] = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v962, v959, (const llvm::MachineOperand *)v1330);
            *(_OWORD *)v1330 = 0u;
            v1331[0] = 0u;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v962, v959, (const llvm::MachineOperand *)v1330);
            v1181 = *(_DWORD *)(*(_QWORD *)v516 + 8);
            if ((v1181 & 0xFE) == 0x12)
              v1181 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v516 + 16) + 8);
            v1182 = v1181 >> 8;
            v1183 = (unint64_t)v1338.u32[0] >> 3;
            v1184 = *((unsigned __int8 *)v1296 + 18);
            v1185 = sub_1C484358C(v951, 80, 3);
            *(_QWORD *)v1185 = v1292;
            *(_QWORD *)(v1185 + 8) = v1304;
            *(_DWORD *)(v1185 + 16) = v1182;
            *(_BYTE *)(v1185 + 20) = 0;
            *(_QWORD *)(v1185 + 24) = ((v1183 & 0x1FFFFFFF) << 6) | 1;
            *(_WORD *)(v1185 + 32) = 2;
            *(_BYTE *)(v1185 + 34) = (v1184 >> 1) & 0x3F;
            *(_OWORD *)(v1185 + 40) = 0u;
            *(_OWORD *)(v1185 + 56) = 0u;
            *(_QWORD *)(v1185 + 72) = 0;
            *(_WORD *)(v1185 + 36) = 1;
            llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v962, v1324, (llvm::MachineMemOperand *)v1185);
          }
          return v3;
        }
      }
      v1276 = sub_1C6127C28((uint64_t)v1309, v1288);
      if (!v1276)
        return 0;
      goto LABEL_1155;
    case 0x3E:
      return sub_1C6127B84(v6, (uint64_t)v5);
    case 0x42:
      v72 = *((_DWORD *)v5 + 5);
      if ((v72 & 0x40000000) != 0)
        v73 = (unsigned __int8 **)*(v5 - 1);
      else
        v73 = (unsigned __int8 **)&v5[-4 * (v72 & 0x7FFFFFF)];
      v144 = *((_DWORD *)*v5 + 2);
      if (v144 != 13)
        return 0;
      v145 = *v73;
      v146 = *(unsigned int *)(*(_QWORD *)*v73 + 8);
      if (*(_DWORD *)(*(_QWORD *)*v73 + 8) != 13)
        return 0;
      if ((v146 >> 8) - 16 > 0x30 || ((1 << (BYTE1(v146) - 16)) & 0x1000000010001) == 0)
        return 0;
      v3 = 0;
      v148 = v144 >> 8;
      if (v144 >> 8 > 0x20 || ((1 << SBYTE1(v144)) & 0x100010100) == 0)
        return v3;
      v149 = sub_1C5CC1648((uint64_t *)v6, (uint64_t)v5);
      if (!v149)
        return 0;
      v150 = v149;
      v151 = sub_1C47ADDC8(v6, v5, 0, 0, 0);
      if (v148 == 16 && v151)
      {
        v152 = *(_QWORD *)(v6 + 32);
        v153 = *(_QWORD *)(v152 + 640);
        v154 = *(unint64_t **)(v152 + 648);
        v155 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8);
        v156 = *(llvm::MachineFunction **)(v153 + 32);
        v157 = *(void **)(v6 + 72);
        v1328[0] = v157;
        if (v157)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v157, 2);
        v158 = *((_QWORD *)v156 + 28);
        if (v158)
          *((_QWORD *)v156 + 28) = *(_QWORD *)v158;
        else
          v158 = sub_1C484358C((uint64_t)v156 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v158, v156, v155 + 48144, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v630 = *(_QWORD *)(v153 + 40);
        *(_QWORD *)(v158 + 24) = v630;
        v631 = *(_QWORD *)(v630 + 32);
        v632 = *(unsigned int *)(v158 + 40);
        if ((_DWORD)v632)
        {
          v968 = *(_QWORD *)(v158 + 32);
          v969 = *(_QWORD *)(v631 + 40);
          v970 = 32 * v632;
          do
          {
            if (!*(_BYTE *)v968)
            {
              v971 = *(unsigned int *)(v968 + 4);
              if ((int)v971 >= 0)
                v972 = (uint64_t *)(*(_QWORD *)(v969 + 272) + 8 * v971);
              else
                v972 = (uint64_t *)(*(_QWORD *)(v969 + 24) + 16 * (v971 & 0x7FFFFFFF) + 8);
              v973 = *v972;
              if (*v972)
              {
                v974 = *(_QWORD *)(v973 + 16);
                *(_QWORD *)(v973 + 16) = v968;
                *(_QWORD *)(v968 + 16) = v974;
                if ((*(_BYTE *)(v968 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v968 + 24) = v973;
                }
                else
                {
                  *(_QWORD *)(v968 + 24) = 0;
                  v972 = (uint64_t *)(v974 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v968 + 16) = v968;
                *(_QWORD *)(v968 + 24) = 0;
              }
              *v972 = v968;
            }
            v968 += 32;
            v970 -= 32;
          }
          while (v970);
        }
        v633 = *(_QWORD *)(v631 + 728);
        if (v633)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v633 + 24))(v633, v158);
        v634 = *v154 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v158 = v634 | *(_QWORD *)v158 & 7;
        *(_QWORD *)(v158 + 8) = v154;
        *(_QWORD *)(v634 + 8) = v158;
        *v154 = *v154 & 7 | v158;
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0x1000000;
        HIDWORD(v1330[0]) = v150;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v158, v156, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v158, v156, (const llvm::MachineOperand *)v1330);
        v1328[0] = v156;
        v1328[1] = (void *)v158;
        v635 = 4;
        do
        {
          sub_1C47ADDC8(v6, v5, 0, (llvm::MachineFunction **)v1328, 0);
          LODWORD(v1330[0]) = 1;
          v1330[1] = 0;
          *(_QWORD *)&v1331[0] = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1328[1], (llvm::MachineFunction *)v1328[0], (const llvm::MachineOperand *)v1330);
          --v635;
        }
        while (v635);
        *(_OWORD *)v1330 = 0u;
        v1331[0] = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1328[1], (llvm::MachineFunction *)v1328[0], (const llvm::MachineOperand *)v1330);
        v637 = (llvm::MachineFunction *)v1328[0];
        v636 = (llvm::MachineInstr *)v1328[1];
        v3 = 1;
        goto LABEL_858;
      }
      v456 = *((_DWORD *)v5 + 5);
      if ((v456 & 0x40000000) != 0)
        v457 = (uint64_t *)*(v5 - 1);
      else
        v457 = (uint64_t *)&v5[-4 * (v456 & 0x7FFFFFF)];
      v579 = *v457;
      v580 = *(unsigned __int8 *)(v579 + 16);
      if (v579 && v580 >= 0x1C && *(uint64_t ***)(v579 + 40) != v5[5])
        goto LABEL_1236;
      if (v580 <= 0x1B)
        v579 = 0;
      if (v146 < 0x2000 || !v579 || (*(_BYTE *)(v579 + 16) & 0xFE) != 0x36)
        goto LABEL_1236;
      v581 = *(_DWORD *)(v579 + 20);
      v582 = (v581 & 0x40000000) != 0 ? *(_QWORD *)(v579 - 8) : v579 - 32 * (v581 & 0x7FFFFFF);
      v862 = *(_QWORD *)(v582 + 32);
      if (*(_BYTE *)(v862 + 16) != 16)
        goto LABEL_1236;
      v863 = (_QWORD *)v6;
      v864 = (_QWORD *)(v862 + 24);
      if (*(_DWORD *)(v862 + 32) >= 0x41u)
        v864 = (_QWORD *)*v864;
      if (*v864 == v146 >> 9)
      {
        if ((v581 & 0x40000000) != 0)
          v865 = *(unsigned __int8 ***)(v579 - 8);
        else
          v865 = (unsigned __int8 **)(v579 - 32 * (v581 & 0x7FFFFFF));
        v1107 = sub_1C47A836C(v6, *v865);
        if (!v1107)
          return 0;
        v867 = v1107;
        v1108 = *(_QWORD **)(v6 + 48);
        if (v146 >> 8 == 64)
        {
          if ((_UNKNOWN ***)(*(_QWORD *)(v1108[3] + 16 * (v1107 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E7F98AB8)
          {
            if (v148 == 32)
              v868 = 34;
            else
              v868 = 3;
          }
          else
          {
            v867 = v1107 + 1;
            if (v148 == 32)
            {
              LOWORD(v868) = 0;
              goto LABEL_1801;
            }
            v868 = 1;
          }
        }
        else
        {
          v868 = 2;
        }
        v1186 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v1108 + 16) + 176))(*(_QWORD *)(*v1108 + 16));
        v1187 = 16 * (v867 & 0x7FFFFFFF);
        v1188 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v1186 + 200))(v1186, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 24) + v1187) & 0xFFFFFFFFFFFFFFF8, v868);
        sub_1C51A3F30(*(_QWORD **)(v6 + 48), v867, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 24) + v1187) & 0xFFFFFFFFFFFFFFF8, v1188, 0);
      }
      else
      {
LABEL_1236:
        v866 = sub_1C47A836C(v6, v145);
        if (!v866)
          return 0;
        v867 = v866;
        v863 = (_QWORD *)v6;
        if (v148 == 32)
        {
          LOWORD(v868) = sub_1C6127088(v6, v866);
LABEL_1801:
          v1197 = v863[4];
          v1198 = *(_QWORD *)(v1197 + 640);
          v1199 = *(unint64_t **)(v1197 + 648);
          v1200 = *(_QWORD *)(v863[12] + 8);
          v1201 = *(llvm::MachineFunction **)(v1198 + 32);
          v1202 = (void *)v863[9];
          v1328[0] = v1202;
          if (v1202)
            llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v1202, 2);
          v1203 = v1200 + 912;
          v1204 = *((_QWORD *)v1201 + 28);
          if (v1204)
            *((_QWORD *)v1201 + 28) = *(_QWORD *)v1204;
          else
            v1204 = sub_1C484358C((uint64_t)v1201 + 128, 72, 3);
          v1330[0] = v1328[0];
          if (v1328[0])
          {
            llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
            v1328[0] = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v1204, v1201, v1203, (unsigned __int8 **)v1330, 0);
          if (v1330[0])
            llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
          if (v1328[0])
            llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
          v1205 = *(_QWORD *)(v1198 + 40);
          *(_QWORD *)(v1204 + 24) = v1205;
          v1206 = *(_QWORD *)(v1205 + 32);
          v1207 = *(unsigned int *)(v1204 + 40);
          if ((_DWORD)v1207)
          {
            v1220 = *(_QWORD *)(v1204 + 32);
            v1221 = *(_QWORD *)(v1206 + 40);
            v1222 = 32 * v1207;
            do
            {
              if (!*(_BYTE *)v1220)
              {
                v1223 = *(unsigned int *)(v1220 + 4);
                if ((int)v1223 >= 0)
                  v1224 = (uint64_t *)(*(_QWORD *)(v1221 + 272) + 8 * v1223);
                else
                  v1224 = (uint64_t *)(*(_QWORD *)(v1221 + 24) + 16 * (v1223 & 0x7FFFFFFF) + 8);
                v1225 = *v1224;
                if (*v1224)
                {
                  v1226 = *(_QWORD *)(v1225 + 16);
                  *(_QWORD *)(v1225 + 16) = v1220;
                  *(_QWORD *)(v1220 + 16) = v1226;
                  if ((*(_BYTE *)(v1220 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v1220 + 24) = v1225;
                  }
                  else
                  {
                    *(_QWORD *)(v1220 + 24) = 0;
                    v1224 = (uint64_t *)(v1226 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v1220 + 16) = v1220;
                  *(_QWORD *)(v1220 + 24) = 0;
                }
                *v1224 = v1220;
              }
              v1220 += 32;
              v1222 -= 32;
            }
            while (v1222);
          }
          v1208 = *(_QWORD *)(v1206 + 728);
          if (v1208)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v1208 + 24))(v1208, v1204);
          v1209 = *v1199 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v1204 = v1209 | *(_QWORD *)v1204 & 7;
          *(_QWORD *)(v1204 + 8) = v1199;
          *(_QWORD *)(v1209 + 8) = v1204;
          *v1199 = *v1199 & 7 | v1204;
          v1330[1] = 0;
          v1331[0] = 0uLL;
          LODWORD(v1330[0]) = 0x1000000;
          HIDWORD(v1330[0]) = v150;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1204, v1201, (const llvm::MachineOperand *)v1330);
          v1330[1] = 0;
          v1331[0] = 0uLL;
          LODWORD(v1330[0]) = (v868 & 0xFFF) << 8;
          HIDWORD(v1330[0]) = v867;
          v569 = (llvm::MachineInstr *)v1204;
          v570 = v1201;
          goto LABEL_1152;
        }
        LOWORD(v868) = sub_1C6126FBC(v6, v866);
      }
      if (v148 != 8)
        goto LABEL_1801;
      v1189 = v863[4];
      v1190 = *(_QWORD *)(v1189 + 640);
      v1191 = *(unint64_t **)(v1189 + 648);
      v1192 = *(_QWORD *)(v863[12] + 8);
      v1193 = *(llvm::MachineFunction **)(v1190 + 32);
      v1194 = (void *)v863[9];
      v1328[0] = v1194;
      if (v1194)
        llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v1194, 2);
      v1195 = v1192 + 17904;
      v1196 = *((_QWORD *)v1193 + 28);
      if (v1196)
        *((_QWORD *)v1193 + 28) = *(_QWORD *)v1196;
      else
        v1196 = sub_1C484358C((uint64_t)v1193 + 128, 72, 3);
      v1330[0] = v1328[0];
      if (v1328[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
        v1328[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v1196, v1193, v1195, (unsigned __int8 **)v1330, 0);
      if (v1330[0])
        llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
      if (v1328[0])
        llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
      v1210 = *(_QWORD *)(v1190 + 40);
      *(_QWORD *)(v1196 + 24) = v1210;
      v1211 = *(_QWORD *)(v1210 + 32);
      v1212 = *(unsigned int *)(v1196 + 40);
      if ((_DWORD)v1212)
      {
        v1235 = *(_QWORD *)(v1196 + 32);
        v1236 = *(_QWORD *)(v1211 + 40);
        v1237 = 32 * v1212;
        do
        {
          if (!*(_BYTE *)v1235)
          {
            v1238 = *(unsigned int *)(v1235 + 4);
            if ((int)v1238 >= 0)
              v1239 = (uint64_t *)(*(_QWORD *)(v1236 + 272) + 8 * v1238);
            else
              v1239 = (uint64_t *)(*(_QWORD *)(v1236 + 24) + 16 * (v1238 & 0x7FFFFFFF) + 8);
            v1240 = *v1239;
            if (*v1239)
            {
              v1241 = *(_QWORD *)(v1240 + 16);
              *(_QWORD *)(v1240 + 16) = v1235;
              *(_QWORD *)(v1235 + 16) = v1241;
              if ((*(_BYTE *)(v1235 + 3) & 1) != 0)
              {
                *(_QWORD *)(v1235 + 24) = v1240;
              }
              else
              {
                *(_QWORD *)(v1235 + 24) = 0;
                v1239 = (uint64_t *)(v1241 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v1235 + 16) = v1235;
              *(_QWORD *)(v1235 + 24) = 0;
            }
            *v1239 = v1235;
          }
          v1235 += 32;
          v1237 -= 32;
        }
        while (v1237);
      }
      v1213 = *(_QWORD *)(v1211 + 728);
      if (v1213)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v1213 + 24))(v1213, v1196);
      v1214 = *v1191 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v1196 = v1214 | *(_QWORD *)v1196 & 7;
      *(_QWORD *)(v1196 + 8) = v1191;
      *(_QWORD *)(v1214 + 8) = v1196;
      *v1191 = *v1191 & 7 | v1196;
      v1330[1] = 0;
      v1331[0] = 0uLL;
      LODWORD(v1330[0]) = 0x1000000;
      HIDWORD(v1330[0]) = v150;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1196, v1193, (const llvm::MachineOperand *)v1330);
      v3 = 1;
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1196, v1193, (const llvm::MachineOperand *)v1330);
      v1330[1] = 0;
      v1331[0] = 0uLL;
      LODWORD(v1330[0]) = (v868 & 0xFFF) << 8;
      HIDWORD(v1330[0]) = v867;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1196, v1193, (const llvm::MachineOperand *)v1330);
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1196, v1193, (const llvm::MachineOperand *)v1330);
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0x1000000FFLL;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1196, v1193, (const llvm::MachineOperand *)v1330);
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1196, v1193, (const llvm::MachineOperand *)v1330);
      *(_OWORD *)v1330 = 0u;
      v1331[0] = 0u;
      v362 = (llvm::MachineInstr *)v1196;
      v363 = v1193;
      goto LABEL_447;
    case 0x43:
      v54 = *((_DWORD *)v5 + 5);
      if ((v54 & 0x40000000) != 0)
        v55 = (uint64_t *)*(v5 - 1);
      else
        v55 = (uint64_t *)&v5[-4 * (v54 & 0x7FFFFFF)];
      v132 = *((_DWORD *)*v5 + 2) >> 8;
      HIDWORD(v134) = v132;
      LODWORD(v134) = v132 - 8;
      v133 = v134 >> 3;
      v172 = v133 > 7;
      v135 = (1 << v133) & 0x8B;
      if (v172 || v135 == 0)
        return 0;
      v137 = (uint64_t *)v6;
      v138 = *v55;
      v139 = *(unsigned int *)(*(_QWORD *)*v55 + 8);
      v140 = v139 >> 8;
      if (*(_DWORD *)(*(_QWORD *)*v55 + 8) >> 8 > 0x20u || ((1 << SBYTE1(v139)) & 0x100010102) == 0)
        return 0;
      if (v132 == 64)
      {
        if ((_DWORD)v140 != 32)
          return 0;
        v1315 = sub_1C47A836C((uint64_t)v137, (unsigned __int8 *)v5);
        if (!v1315)
          return 0;
        v142 = *((_DWORD *)v5 + 5);
        v143 = (v142 & 0x40000000) != 0 ? (uint64_t *)*(v5 - 1) : (uint64_t *)&v5[-4 * (v142 & 0x7FFFFFF)];
        v388 = sub_1C5CC1648(v137, *v143);
        if (!v388)
          return 0;
        v389 = v388;
        v390 = v137[6];
        if ((_UNKNOWN ***)(*(_QWORD *)(*(_QWORD *)(v390 + 24) + 16 * (v1315 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E7F98AB8)
        {
          v391 = v1315;
        }
        else
        {
          v391 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v137[6], "", 0);
          *(_QWORD *)(*(_QWORD *)(v390 + 24) + 16 * (v391 & 0x7FFFFFFF)) = &off_1E7F98AB8;
          v392 = *(_QWORD *)(v390 + 8);
          if (v392)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v392 + 24))(v392);
            if (!v391)
              return 0;
          }
          else if (!v391)
          {
            return 0;
          }
          v390 = v137[6];
        }
        v555 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v390, "", 0);
        *(_QWORD *)(*(_QWORD *)(v390 + 24) + 16 * (v555 & 0x7FFFFFFF)) = &off_1E7F98468;
        v556 = *(_QWORD *)(v390 + 8);
        if (v556)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v556 + 24))(v556);
          if (!v555)
            return 0;
        }
        else if (!v555)
        {
          return 0;
        }
        v557 = v137[4];
        v558 = *(_QWORD *)(v557 + 640);
        v559 = *(unint64_t **)(v557 + 648);
        v560 = *(_QWORD *)(v137[12] + 8);
        v561 = *(llvm::MachineFunction **)(v558 + 32);
        v562 = (void *)v137[9];
        v1328[0] = v562;
        if (v562)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v562, 2);
        v563 = *((_QWORD *)v561 + 28);
        if (v563)
          *((_QWORD *)v561 + 28) = *(_QWORD *)v563;
        else
          v563 = sub_1C484358C((uint64_t)v561 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v563, v561, v560 + 69360, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v652 = *(_QWORD *)(v558 + 40);
        *(_QWORD *)(v563 + 24) = v652;
        v653 = *(_QWORD *)(v652 + 32);
        v654 = *(unsigned int *)(v563 + 40);
        if ((_DWORD)v654)
        {
          v1048 = *(_QWORD *)(v563 + 32);
          v1049 = *(_QWORD *)(v653 + 40);
          v1050 = 32 * v654;
          do
          {
            if (!*(_BYTE *)v1048)
            {
              v1051 = *(unsigned int *)(v1048 + 4);
              if ((int)v1051 >= 0)
                v1052 = (uint64_t *)(*(_QWORD *)(v1049 + 272) + 8 * v1051);
              else
                v1052 = (uint64_t *)(*(_QWORD *)(v1049 + 24) + 16 * (v1051 & 0x7FFFFFFF) + 8);
              v1053 = *v1052;
              if (*v1052)
              {
                v1054 = *(_QWORD *)(v1053 + 16);
                *(_QWORD *)(v1053 + 16) = v1048;
                *(_QWORD *)(v1048 + 16) = v1054;
                if ((*(_BYTE *)(v1048 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v1048 + 24) = v1053;
                }
                else
                {
                  *(_QWORD *)(v1048 + 24) = 0;
                  v1052 = (uint64_t *)(v1054 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v1048 + 16) = v1048;
                *(_QWORD *)(v1048 + 24) = 0;
              }
              *v1052 = v1048;
            }
            v1048 += 32;
            v1050 -= 32;
          }
          while (v1050);
        }
        v655 = *(_QWORD *)(v653 + 728);
        if (v655)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v655 + 24))(v655, v563);
        v656 = *v559 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v563 = v656 | *(_QWORD *)v563 & 7;
        *(_QWORD *)(v563 + 8) = v559;
        *(_QWORD *)(v656 + 8) = v563;
        *v559 = *v559 & 7 | v563;
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0x1000000;
        HIDWORD(v1330[0]) = v555;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v563, v561, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v563, v561, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v563, v561, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v563, v561, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v563, v561, (const llvm::MachineOperand *)v1330);
        *(_OWORD *)v1330 = 0u;
        v1331[0] = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v563, v561, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v563, v561, (const llvm::MachineOperand *)v1330);
        *(_OWORD *)v1330 = 0u;
        v1331[0] = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v563, v561, (const llvm::MachineOperand *)v1330);
        v657 = v137[4];
        v658 = *(_QWORD *)(v657 + 640);
        v659 = *(unint64_t **)(v657 + 648);
        v660 = *(_QWORD *)(v137[12] + 8);
        v661 = *(llvm::MachineFunction **)(v658 + 32);
        v662 = (void *)v137[9];
        v1328[0] = v662;
        if (v662)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v662, 2);
        v663 = *((_QWORD *)v661 + 28);
        if (v663)
          *((_QWORD *)v661 + 28) = *(_QWORD *)v663;
        else
          v663 = sub_1C484358C((uint64_t)v661 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v663, v661, v660 + 864, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v664 = *(_QWORD *)(v658 + 40);
        *(_QWORD *)(v663 + 24) = v664;
        v665 = *(_QWORD *)(v664 + 32);
        v666 = *(unsigned int *)(v663 + 40);
        if ((_DWORD)v666)
        {
          v1055 = *(_QWORD *)(v663 + 32);
          v1056 = *(_QWORD *)(v665 + 40);
          v1057 = 32 * v666;
          do
          {
            if (!*(_BYTE *)v1055)
            {
              v1058 = *(unsigned int *)(v1055 + 4);
              if ((int)v1058 >= 0)
                v1059 = (uint64_t *)(*(_QWORD *)(v1056 + 272) + 8 * v1058);
              else
                v1059 = (uint64_t *)(*(_QWORD *)(v1056 + 24) + 16 * (v1058 & 0x7FFFFFFF) + 8);
              v1060 = *v1059;
              if (*v1059)
              {
                v1061 = *(_QWORD *)(v1060 + 16);
                *(_QWORD *)(v1060 + 16) = v1055;
                *(_QWORD *)(v1055 + 16) = v1061;
                if ((*(_BYTE *)(v1055 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v1055 + 24) = v1060;
                }
                else
                {
                  *(_QWORD *)(v1055 + 24) = 0;
                  v1059 = (uint64_t *)(v1061 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v1055 + 16) = v1055;
                *(_QWORD *)(v1055 + 24) = 0;
              }
              *v1059 = v1055;
            }
            v1055 += 32;
            v1057 -= 32;
          }
          while (v1057);
        }
        v667 = *(_QWORD *)(v665 + 728);
        if (v667)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v667 + 24))(v667, v663);
        v668 = *v659 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v663 = v668 | *(_QWORD *)v663 & 7;
        *(_QWORD *)(v663 + 8) = v659;
        *(_QWORD *)(v668 + 8) = v663;
        *v659 = *v659 & 7 | v663;
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0x1000000;
        HIDWORD(v1330[0]) = v391;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v663, v661, (const llvm::MachineOperand *)v1330);
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0;
        HIDWORD(v1330[0]) = v389;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v663, v661, (const llvm::MachineOperand *)v1330);
        v3 = 1;
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 33;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v663, v661, (const llvm::MachineOperand *)v1330);
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0;
        HIDWORD(v1330[0]) = v555;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v663, v661, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 34;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v663, v661, (const llvm::MachineOperand *)v1330);
        if (v391 != v1315)
        {
          v669 = v391;
          v670 = v137;
          LODWORD(v3) = 0;
          do
          {
            v671 = v3;
            v672 = v670[4];
            v673 = v670;
            v674 = *(_QWORD *)(v672 + 640);
            v675 = *(unint64_t **)(v672 + 648);
            v676 = *(_QWORD *)(v670[12] + 8);
            v677 = *(llvm::MachineFunction **)(v674 + 32);
            v678 = (void *)v673[9];
            v1328[0] = v678;
            if (v678)
              llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v678, 2);
            v679 = *((_QWORD *)v677 + 28);
            if (v679)
              *((_QWORD *)v677 + 28) = *(_QWORD *)v679;
            else
              v679 = sub_1C484358C((uint64_t)v677 + 128, 72, 3);
            v1330[0] = v1328[0];
            if (v1328[0])
            {
              llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
              v1328[0] = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v679, v677, v676 + 912, (unsigned __int8 **)v1330, 0);
            if (v1330[0])
              llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
            if (v1328[0])
              llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
            v680 = *(_QWORD *)(v674 + 40);
            *(_QWORD *)(v679 + 24) = v680;
            v681 = *(_QWORD *)(v680 + 32);
            v682 = *(unsigned int *)(v679 + 40);
            v670 = v137;
            if ((_DWORD)v682)
            {
              v685 = *(_QWORD *)(v679 + 32);
              v686 = *(_QWORD *)(v681 + 40);
              v687 = 32 * v682;
              do
              {
                if (!*(_BYTE *)v685)
                {
                  v688 = *(unsigned int *)(v685 + 4);
                  if ((int)v688 >= 0)
                    v689 = (uint64_t *)(*(_QWORD *)(v686 + 272) + 8 * v688);
                  else
                    v689 = (uint64_t *)(*(_QWORD *)(v686 + 24) + 16 * (v688 & 0x7FFFFFFF) + 8);
                  v690 = *v689;
                  if (*v689)
                  {
                    v691 = *(_QWORD *)(v690 + 16);
                    *(_QWORD *)(v690 + 16) = v685;
                    *(_QWORD *)(v685 + 16) = v691;
                    if ((*(_BYTE *)(v685 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v685 + 24) = v690;
                    }
                    else
                    {
                      *(_QWORD *)(v685 + 24) = 0;
                      v689 = (uint64_t *)(v691 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v685 + 16) = v685;
                    *(_QWORD *)(v685 + 24) = 0;
                  }
                  *v689 = v685;
                }
                v685 += 32;
                v687 -= 32;
              }
              while (v687);
            }
            v683 = *(_QWORD *)(v681 + 728);
            if (v683)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v683 + 24))(v683, v679);
            v684 = *v675 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v679 = v684 | *(_QWORD *)v679 & 7;
            *(_QWORD *)(v679 + 8) = v675;
            *(_QWORD *)(v684 + 8) = v679;
            *v675 = *v675 & 7 | v679;
            HIDWORD(v1330[1]) = 0;
            v1331[0] = 0uLL;
            *(void **)((char *)v1330 + 4) = (void *)(v3 + v1315);
            LODWORD(v1330[0]) = 0x1000000;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v679, v677, (const llvm::MachineOperand *)v1330);
            v1330[1] = 0;
            v1331[0] = 0uLL;
            LODWORD(v1330[0]) = ((_DWORD)v3 << 8) + 8448;
            HIDWORD(v1330[0]) = v669;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v679, v677, (const llvm::MachineOperand *)v1330);
            v3 = 1;
          }
          while ((v671 & 1) == 0);
        }
        return v3;
      }
      v219 = sub_1C5CC1648(v137, (uint64_t)v5);
      if (!v219)
        return 0;
      v220 = v219;
      if (v132 <= 0x10 && v139 <= 0xFFF)
      {
        v221 = sub_1C5CC1648(v137, v138);
        if (!v221)
          return 0;
        v222 = v221;
        v223 = v137[4];
        v224 = *(_QWORD *)(v223 + 640);
        v225 = *(unint64_t **)(v223 + 648);
        v226 = *(_QWORD *)(v137[12] + 8);
        v227 = *(llvm::MachineFunction **)(v224 + 32);
        v228 = (void *)v137[9];
        v1328[0] = v228;
        if (v228)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v228, 2);
        v229 = v226 + 912;
        v230 = *((_QWORD *)v227 + 28);
        if (v230)
          *((_QWORD *)v227 + 28) = *(_QWORD *)v230;
        else
          v230 = sub_1C484358C((uint64_t)v227 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v230, v227, v229, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v564 = *(_QWORD *)(v224 + 40);
        *(_QWORD *)(v230 + 24) = v564;
        v565 = *(_QWORD *)(v564 + 32);
        v566 = *(unsigned int *)(v230 + 40);
        if ((_DWORD)v566)
        {
          v876 = *(_QWORD *)(v230 + 32);
          v877 = *(_QWORD *)(v565 + 40);
          v878 = 32 * v566;
          do
          {
            if (!*(_BYTE *)v876)
            {
              v879 = *(unsigned int *)(v876 + 4);
              if ((int)v879 >= 0)
                v880 = (uint64_t *)(*(_QWORD *)(v877 + 272) + 8 * v879);
              else
                v880 = (uint64_t *)(*(_QWORD *)(v877 + 24) + 16 * (v879 & 0x7FFFFFFF) + 8);
              v881 = *v880;
              if (*v880)
              {
                v882 = *(_QWORD *)(v881 + 16);
                *(_QWORD *)(v881 + 16) = v876;
                *(_QWORD *)(v876 + 16) = v882;
                if ((*(_BYTE *)(v876 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v876 + 24) = v881;
                }
                else
                {
                  *(_QWORD *)(v876 + 24) = 0;
                  v880 = (uint64_t *)(v882 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v876 + 16) = v876;
                *(_QWORD *)(v876 + 24) = 0;
              }
              *v880 = v876;
            }
            v876 += 32;
            v878 -= 32;
          }
          while (v878);
        }
        v567 = *(_QWORD *)(v565 + 728);
        if (v567)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v567 + 24))(v567, v230);
        v568 = *v225 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v230 = v568 | *(_QWORD *)v230 & 7;
        *(_QWORD *)(v230 + 8) = v225;
        *(_QWORD *)(v568 + 8) = v230;
        *v225 = *v225 & 7 | v230;
        v1330[1] = 0;
        v1331[0] = 0uLL;
        HIDWORD(v1330[0]) = v220;
        goto LABEL_733;
      }
      if (*(_BYTE *)(v138 + 16) == 66)
        v138 = *(_QWORD *)(v138 - 32);
      v320 = sub_1C5CC1648(v137, v138);
      if (!v320)
        return 0;
      v321 = v320;
      v1285 = sub_1C6126FBC((uint64_t)v137, v320);
      v322 = v137[4];
      v1317 = *(llvm::MachineFunction **)(v322 + 648);
      if (v132 <= 0x10)
        v323 = 17904;
      else
        v323 = 17328;
      v324 = *(_QWORD *)(v137[12] + 8);
      v1301 = *(_QWORD *)(v322 + 640);
      v325 = *(llvm::MachineFunction **)(v1301 + 32);
      v326 = (void *)v137[9];
      v1328[0] = v326;
      if (v326)
        llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v326, 2);
      v327 = v324 + v323;
      v328 = *((_QWORD *)v325 + 28);
      if (v328)
        *((_QWORD *)v325 + 28) = *(_QWORD *)v328;
      else
        v328 = sub_1C484358C((uint64_t)v325 + 128, 72, 3);
      v1330[0] = v1328[0];
      if (v1328[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
        v1328[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v328, v325, v327, (unsigned __int8 **)v1330, 0);
      if (v1330[0])
        llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
      if (v1328[0])
        llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
      v982 = *(_QWORD *)(v1301 + 40);
      *(_QWORD *)(v328 + 24) = v982;
      v983 = *(_QWORD *)(v982 + 32);
      v984 = *(unsigned int *)(v328 + 40);
      if ((_DWORD)v984)
      {
        v1162 = *(_QWORD *)(v328 + 32);
        v1163 = *(_QWORD *)(v983 + 40);
        v1164 = 32 * v984;
        do
        {
          if (!*(_BYTE *)v1162)
          {
            v1165 = *(unsigned int *)(v1162 + 4);
            if ((int)v1165 >= 0)
              v1166 = (uint64_t *)(*(_QWORD *)(v1163 + 272) + 8 * v1165);
            else
              v1166 = (uint64_t *)(*(_QWORD *)(v1163 + 24) + 16 * (v1165 & 0x7FFFFFFF) + 8);
            v1167 = *v1166;
            if (*v1166)
            {
              v1168 = *(_QWORD *)(v1167 + 16);
              *(_QWORD *)(v1167 + 16) = v1162;
              *(_QWORD *)(v1162 + 16) = v1168;
              if ((*(_BYTE *)(v1162 + 3) & 1) != 0)
              {
                *(_QWORD *)(v1162 + 24) = v1167;
              }
              else
              {
                *(_QWORD *)(v1162 + 24) = 0;
                v1166 = (uint64_t *)(v1168 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v1162 + 16) = v1162;
              *(_QWORD *)(v1162 + 24) = 0;
            }
            *v1166 = v1162;
          }
          v1162 += 32;
          v1164 -= 32;
        }
        while (v1164);
      }
      v985 = *(_QWORD *)(v983 + 728);
      if (v985)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v985 + 24))(v985, v328);
      v986 = *(_QWORD *)v1317 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v328 = v986 | *(_QWORD *)v328 & 7;
      *(_QWORD *)(v328 + 8) = v1317;
      *(_QWORD *)(v986 + 8) = v328;
      *(_QWORD *)v1317 = *(_QWORD *)v1317 & 7 | v328;
      v1330[1] = 0;
      v1331[0] = 0uLL;
      LODWORD(v1330[0]) = 0x1000000;
      HIDWORD(v1330[0]) = v220;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v325, (const llvm::MachineOperand *)v1330);
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v328, v325, (const llvm::MachineOperand *)v1330);
      v1328[0] = v325;
      v1328[1] = (void *)v328;
      v987 = *((_DWORD *)v5 + 5);
      if ((v987 & 0x40000000) != 0)
        v988 = (uint64_t ***)*(v5 - 1);
      else
        v988 = &v5[-4 * (v987 & 0x7FFFFFF)];
      if ((sub_1C47ADDC8((uint64_t)v137, *v988, 0, (llvm::MachineFunction **)v1328, 0) & 1) == 0)
      {
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = v1285 << 8;
        HIDWORD(v1330[0]) = v321;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1328[1], (llvm::MachineFunction *)v1328[0], (const llvm::MachineOperand *)v1330);
      }
      v3 = 1;
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1328[1], (llvm::MachineFunction *)v1328[0], (const llvm::MachineOperand *)v1330);
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = ~(-1 << v140) | 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1328[1], (llvm::MachineFunction *)v1328[0], (const llvm::MachineOperand *)v1330);
      v637 = (llvm::MachineFunction *)v1328[0];
      v636 = (llvm::MachineInstr *)v1328[1];
LABEL_858:
      LODWORD(v1330[0]) = 1;
      goto LABEL_893;
    case 0x44:
      v38 = *((_DWORD *)*v5 + 2);
      v39 = v38 >> 8;
      HIDWORD(v41) = v38 >> 8;
      LODWORD(v41) = (v38 >> 8) - 8;
      v40 = v41 >> 3;
      v172 = v40 > 7;
      v42 = (1 << v40) & 0x8B;
      if (v172 || v42 == 0)
        return 0;
      v44 = *((_DWORD *)v5 + 5);
      v45 = (v44 & 0x40000000) != 0 ? *(v5 - 1) : (uint64_t **)&v5[-4 * (v44 & 0x7FFFFFF)];
      v210 = *(_DWORD *)(**v45 + 8) >> 8;
      v211 = (1 << BYTE1(*(_DWORD *)(**v45 + 8))) & 0x100010102;
      if (v210 > 0x20 || v211 == 0)
        return 0;
      v213 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 256) + 280);
      v214 = sub_1C47A836C(v6, (unsigned __int8 *)v5);
      if (!v214)
        return 0;
      v215 = v214;
      v216 = *((_DWORD *)v5 + 5);
      if (v210 == 1)
      {
        v217 = v5;
        if ((v216 & 0x40000000) != 0)
          v218 = (uint64_t *)*(v5 - 1);
        else
          v218 = (uint64_t *)&v5[-4 * (v216 & 0x7FFFFFF)];
        v306 = *v218;
        if (!v306 || *(unsigned __int8 *)(v306 + 16) < 0x1Cu || *(uint64_t ***)(v306 + 40) == v5[5])
        {
          v307 = v213;
          v308 = v214;
          v309 = ***v5;
          v310 = (llvm::ConstantInt *)(v309 + 1936);
          v311 = (llvm::ConstantInt *)(v309 + 1960);
          v312 = v38 >> 13;
          if (v38 >> 13)
            v313 = &off_1E7F98468;
          else
            v313 = &off_1E7F982A8;
          if (v312)
            v314 = v311;
          else
            v314 = v310;
          if (v39 == 8)
            v315 = 255;
          else
            v315 = -1;
          v1316 = llvm::ConstantInt::get(v314, v315, 0);
          v1300 = llvm::ConstantInt::get(v314, 0, 0);
          v316 = *(_QWORD *)(v6 + 48);
          v317 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v316, "", 0);
          *(_QWORD *)(*(_QWORD *)(v316 + 24) + 16 * (v317 & 0x7FFFFFFF)) = v313;
          v318 = *(_QWORD *)(v316 + 8);
          if (v318)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v318 + 24))(v318);
            if (!v317)
              return 0;
          }
          else if (!v317)
          {
            return 0;
          }
          v216 = *((_DWORD *)v217 + 5);
          if ((v216 & 0x40000000) != 0)
            v319 = (uint64_t *)*(v217 - 1);
          else
            v319 = (uint64_t *)&v217[-4 * (v216 & 0x7FFFFFF)];
          v458 = *v319;
          v459 = *(unsigned __int8 *)(*v319 + 16);
          v215 = v308;
          if (v458)
          {
            v213 = v307;
            if (v459 == 82)
            {
              v460 = sub_1C47B6BD4(v6, (llvm::Type **)v217, v458, *(_QWORD *)(v458 - 64), *(_QWORD *)(v458 - 32), (uint64_t)v1316, (uint64_t)v1300, v317);
              goto LABEL_764;
            }
          }
          else
          {
            v213 = v307;
          }
          if (v459 == 81)
          {
            v460 = sub_1C47B891C(v6, (uint64_t *)v217, v458, *(_QWORD *)(v458 - 64), *(_QWORD *)(v458 - 32), (uint64_t)v1316, (uint64_t)v1300, v317);
LABEL_764:
            if (v312)
              v210 = 32;
            else
              v210 = v39;
            if ((v460 & 1) == 0)
              return 0;
LABEL_785:
            if (v213)
              goto LABEL_959;
            goto LABEL_786;
          }
        }
      }
      else
      {
        v217 = v5;
      }
      if ((v216 & 0x40000000) != 0)
        v583 = (uint64_t ****)*(v217 - 1);
      else
        v583 = (uint64_t ****)&v217[-4 * (v216 & 0x7FFFFFF)];
      v584 = *v583;
      if (*((_BYTE *)v584 + 16) != 66)
        v584 = 0;
      if (v584)
        v585 = v210 == 8;
      else
        v585 = 0;
      if (!v585)
        v584 = v217;
      v586 = *((_DWORD *)v584 + 5);
      if ((v586 & 0x40000000) != 0)
        v587 = (uint64_t *)*(v584 - 1);
      else
        v587 = (uint64_t *)&v584[-4 * (v586 & 0x7FFFFFF)];
      v588 = sub_1C5CC1648((uint64_t *)v6, *v587);
      if (!v588)
        return 0;
      v317 = v588;
      if (v210 == 1)
      {
        if (v39 >= 0x20)
          v210 = 32;
        else
          v210 = v39;
        v692 = sub_1C6127534(v6, v588, v210);
        if (!v692)
          return 0;
      }
      else
      {
        if (v210 != 8)
          goto LABEL_785;
        if (v39 >= 0x20)
          v210 = 32;
        else
          v210 = v39;
        v692 = sub_1C61276B0(v6, v588, v210);
        if (!v692)
          return 0;
      }
      v317 = v692;
      if (v213)
        goto LABEL_959;
LABEL_786:
      if (v39 == 64 && v210 == 16)
      {
        v589 = *(_QWORD *)(v6 + 32);
        v590 = *(_QWORD *)(v589 + 640);
        v591 = *(unint64_t **)(v589 + 648);
        v592 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8);
        v593 = *(llvm::MachineFunction **)(v590 + 32);
        v594 = *(void **)(v6 + 72);
        v1328[0] = v594;
        if (v594)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v594, 2);
        v595 = v592 + 134640;
        v596 = *((_QWORD *)v593 + 28);
        if (v596)
          *((_QWORD *)v593 + 28) = *(_QWORD *)v596;
        else
          v596 = sub_1C484358C((uint64_t)v593 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v596, v593, v595, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v597 = *(_QWORD *)(v590 + 40);
        *(_QWORD *)(v596 + 24) = v597;
        v598 = *(_QWORD *)(v597 + 32);
        v599 = *(unsigned int *)(v596 + 40);
        if ((_DWORD)v599)
        {
          v838 = *(_QWORD *)(v596 + 32);
          v839 = *(_QWORD *)(v598 + 40);
          v840 = 32 * v599;
          do
          {
            if (!*(_BYTE *)v838)
            {
              v841 = *(unsigned int *)(v838 + 4);
              if ((int)v841 >= 0)
                v842 = (uint64_t *)(*(_QWORD *)(v839 + 272) + 8 * v841);
              else
                v842 = (uint64_t *)(*(_QWORD *)(v839 + 24) + 16 * (v841 & 0x7FFFFFFF) + 8);
              v843 = *v842;
              if (*v842)
              {
                v844 = *(_QWORD *)(v843 + 16);
                *(_QWORD *)(v843 + 16) = v838;
                *(_QWORD *)(v838 + 16) = v844;
                if ((*(_BYTE *)(v838 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v838 + 24) = v843;
                }
                else
                {
                  *(_QWORD *)(v838 + 24) = 0;
                  v842 = (uint64_t *)(v844 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v838 + 16) = v838;
                *(_QWORD *)(v838 + 24) = 0;
              }
              *v842 = v838;
            }
            v838 += 32;
            v840 -= 32;
          }
          while (v840);
        }
        v600 = *(_QWORD *)(v598 + 728);
        if (v600)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v600 + 24))(v600, v596);
        v601 = *v591 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v596 = v601 | *(_QWORD *)v596 & 7;
        *(_QWORD *)(v596 + 8) = v591;
        *(_QWORD *)(v601 + 8) = v596;
        *v591 = *v591 & 7 | v596;
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0x1000000;
        HIDWORD(v1330[0]) = v215;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v596, v593, (const llvm::MachineOperand *)v1330);
        v3 = 1;
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v596, v593, (const llvm::MachineOperand *)v1330);
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0;
        HIDWORD(v1330[0]) = v317;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v596, v593, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 8;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v596, v593, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0x100000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v596, v593, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v596, v593, (const llvm::MachineOperand *)v1330);
        *(_OWORD *)v1330 = 0u;
        v1331[0] = 0u;
        goto LABEL_803;
      }
LABEL_959:
      if (v39 < 0x11 || v210 != 16)
      {
        if (!v213)
        {
          v694 = v317;
          if (v39 == 64)
            goto LABEL_1017;
        }
        v707 = v213;
        v1289 = v215;
        v708 = *(_QWORD *)(v6 + 32);
        v709 = *(_QWORD *)(v708 + 640);
        v710 = *(unint64_t **)(v708 + 648);
        v711 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8);
        v712 = *(llvm::MachineFunction **)(v709 + 32);
        v713 = *(void **)(v6 + 72);
        v1328[0] = v713;
        if (v713)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v713, 2);
        v714 = *((_QWORD *)v712 + 28);
        if (v714)
          *((_QWORD *)v712 + 28) = *(_QWORD *)v714;
        else
          v714 = sub_1C484358C((uint64_t)v712 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v714, v712, v711 + 912, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v732 = *(_QWORD *)(v709 + 40);
        *(_QWORD *)(v714 + 24) = v732;
        v733 = *(_QWORD *)(v732 + 32);
        v734 = *(unsigned int *)(v714 + 40);
        if ((_DWORD)v734)
        {
          v1076 = *(_QWORD *)(v714 + 32);
          v1077 = *(_QWORD *)(v733 + 40);
          v1078 = 32 * v734;
          do
          {
            if (!*(_BYTE *)v1076)
            {
              v1079 = *(unsigned int *)(v1076 + 4);
              if ((int)v1079 >= 0)
                v1080 = (uint64_t *)(*(_QWORD *)(v1077 + 272) + 8 * v1079);
              else
                v1080 = (uint64_t *)(*(_QWORD *)(v1077 + 24) + 16 * (v1079 & 0x7FFFFFFF) + 8);
              v1081 = *v1080;
              if (*v1080)
              {
                v1082 = *(_QWORD *)(v1081 + 16);
                *(_QWORD *)(v1081 + 16) = v1076;
                *(_QWORD *)(v1076 + 16) = v1082;
                if ((*(_BYTE *)(v1076 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v1076 + 24) = v1081;
                }
                else
                {
                  *(_QWORD *)(v1076 + 24) = 0;
                  v1080 = (uint64_t *)(v1082 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v1076 + 16) = v1076;
                *(_QWORD *)(v1076 + 24) = 0;
              }
              *v1080 = v1076;
            }
            v1076 += 32;
            v1078 -= 32;
            v213 = v707;
          }
          while (v1078);
        }
        v735 = *(_QWORD *)(v733 + 728);
        v215 = v1289;
        if (v735)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v735 + 24))(v735, v714);
        v736 = *v710 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v714 = v736 | *(_QWORD *)v714 & 7;
        *(_QWORD *)(v714 + 8) = v710;
        *(_QWORD *)(v736 + 8) = v714;
        *v710 = *v710 & 7 | v714;
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0x1000000;
        HIDWORD(v1330[0]) = v1289;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v714, v712, (const llvm::MachineOperand *)v1330);
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0;
        HIDWORD(v1330[0]) = v317;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v714, v712, (const llvm::MachineOperand *)v1330);
        v694 = v317;
LABEL_1014:
        if (v39 != 64)
          return 1;
        if (v213)
        {
          v737 = v213;
          v1323 = v215 + 1;
LABEL_1019:
          v1290 = v215;
          v740 = *(_QWORD *)(v6 + 32);
          v741 = (_QWORD *)v6;
          v742 = *(_QWORD *)(v740 + 640);
          v743 = *(unint64_t **)(v740 + 648);
          v744 = *(_QWORD *)(v741[12] + 8);
          v745 = *(llvm::MachineFunction **)(v742 + 32);
          v746 = v741;
          v747 = (void *)v741[9];
          v1328[0] = v747;
          if (v747)
            llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v747, 2);
          v748 = *((_QWORD *)v745 + 28);
          if (v748)
            *((_QWORD *)v745 + 28) = *(_QWORD *)v748;
          else
            v748 = sub_1C484358C((uint64_t)v745 + 128, 72, 3);
          v1330[0] = v1328[0];
          if (v1328[0])
          {
            llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
            v1328[0] = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v748, v745, v744 + 622128, (unsigned __int8 **)v1330, 0);
          if (v1330[0])
            llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
          if (v1328[0])
            llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
          v749 = *(_QWORD *)(v742 + 40);
          *(_QWORD *)(v748 + 24) = v749;
          v750 = *(_QWORD *)(v749 + 32);
          v751 = *(unsigned int *)(v748 + 40);
          if ((_DWORD)v751)
          {
            v928 = *(_QWORD *)(v748 + 32);
            v929 = *(_QWORD *)(v750 + 40);
            v930 = 32 * v751;
            do
            {
              if (!*(_BYTE *)v928)
              {
                v931 = *(unsigned int *)(v928 + 4);
                if ((int)v931 >= 0)
                  v932 = (uint64_t *)(*(_QWORD *)(v929 + 272) + 8 * v931);
                else
                  v932 = (uint64_t *)(*(_QWORD *)(v929 + 24) + 16 * (v931 & 0x7FFFFFFF) + 8);
                v933 = *v932;
                if (*v932)
                {
                  v934 = *(_QWORD *)(v933 + 16);
                  *(_QWORD *)(v933 + 16) = v928;
                  *(_QWORD *)(v928 + 16) = v934;
                  if ((*(_BYTE *)(v928 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v928 + 24) = v933;
                  }
                  else
                  {
                    *(_QWORD *)(v928 + 24) = 0;
                    v932 = (uint64_t *)(v934 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v928 + 16) = v928;
                  *(_QWORD *)(v928 + 24) = 0;
                }
                *v932 = v928;
              }
              v928 += 32;
              v930 -= 32;
            }
            while (v930);
          }
          v752 = *(_QWORD *)(v750 + 728);
          if (v752)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v752 + 24))(v752, v748);
          v753 = *v743 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v748 = v753 | *(_QWORD *)v748 & 7;
          *(_QWORD *)(v748 + 8) = v743;
          *(_QWORD *)(v753 + 8) = v748;
          *v743 = *v743 & 7 | v748;
          v1330[1] = 0;
          v1331[0] = 0uLL;
          LODWORD(v1330[0]) = 0x1000000;
          HIDWORD(v1330[0]) = v1323;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v748, v745, (const llvm::MachineOperand *)v1330);
          v3 = 1;
          LODWORD(v1330[0]) = 1;
          v1330[1] = 0;
          *(_QWORD *)&v1331[0] = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v748, v745, (const llvm::MachineOperand *)v1330);
          v1330[1] = 0;
          v1331[0] = 0uLL;
          LODWORD(v1330[0]) = 0;
          HIDWORD(v1330[0]) = v694;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v748, v745, (const llvm::MachineOperand *)v1330);
          LODWORD(v1330[0]) = 1;
          v1330[1] = 0;
          *(_QWORD *)&v1331[0] = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v748, v745, (const llvm::MachineOperand *)v1330);
          LODWORD(v1330[0]) = 1;
          v1330[1] = 0;
          *(_QWORD *)&v1331[0] = 0x10000001FLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v748, v745, (const llvm::MachineOperand *)v1330);
          LODWORD(v1330[0]) = 1;
          v1330[1] = 0;
          *(_QWORD *)&v1331[0] = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v748, v745, (const llvm::MachineOperand *)v1330);
          *(_OWORD *)v1330 = 0u;
          v1331[0] = 0u;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v748, v745, (const llvm::MachineOperand *)v1330);
          if (v737)
            return v3;
          v754 = v746[4];
          v755 = *(_QWORD *)(v754 + 640);
          v756 = *(unint64_t **)(v754 + 648);
          v757 = *(_QWORD *)(v746[12] + 8);
          v593 = *(llvm::MachineFunction **)(v755 + 32);
          v758 = (void *)v746[9];
          v1328[0] = v758;
          v759 = v317;
          if (v758)
            llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v758, 2);
          v760 = v757 + 864;
          v596 = *((_QWORD *)v593 + 28);
          if (v596)
            *((_QWORD *)v593 + 28) = *(_QWORD *)v596;
          else
            v596 = sub_1C484358C((uint64_t)v593 + 128, 72, 3);
          v1330[0] = v1328[0];
          if (v1328[0])
          {
            llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
            v1328[0] = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v596, v593, v760, (unsigned __int8 **)v1330, 0);
          if (v1330[0])
            llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
          if (v1328[0])
            llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
          v820 = *(_QWORD *)(v755 + 40);
          *(_QWORD *)(v596 + 24) = v820;
          v821 = *(_QWORD *)(v820 + 32);
          v822 = *(unsigned int *)(v596 + 40);
          if ((_DWORD)v822)
          {
            v1100 = *(_QWORD *)(v596 + 32);
            v1101 = *(_QWORD *)(v821 + 40);
            v1102 = 32 * v822;
            do
            {
              if (!*(_BYTE *)v1100)
              {
                v1103 = *(unsigned int *)(v1100 + 4);
                if ((int)v1103 >= 0)
                  v1104 = (uint64_t *)(*(_QWORD *)(v1101 + 272) + 8 * v1103);
                else
                  v1104 = (uint64_t *)(*(_QWORD *)(v1101 + 24) + 16 * (v1103 & 0x7FFFFFFF) + 8);
                v1105 = *v1104;
                if (*v1104)
                {
                  v1106 = *(_QWORD *)(v1105 + 16);
                  *(_QWORD *)(v1105 + 16) = v1100;
                  *(_QWORD *)(v1100 + 16) = v1106;
                  if ((*(_BYTE *)(v1100 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v1100 + 24) = v1105;
                  }
                  else
                  {
                    *(_QWORD *)(v1100 + 24) = 0;
                    v1104 = (uint64_t *)(v1106 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v1100 + 16) = v1100;
                  *(_QWORD *)(v1100 + 24) = 0;
                }
                *v1104 = v1100;
              }
              v1100 += 32;
              v1102 -= 32;
              v759 = v317;
            }
            while (v1102);
          }
          v823 = *(_QWORD *)(v821 + 728);
          if (v823)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v823 + 24))(v823, v596);
          v824 = *v756 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v596 = v824 | *(_QWORD *)v596 & 7;
          *(_QWORD *)(v596 + 8) = v756;
          *(_QWORD *)(v824 + 8) = v596;
          *v756 = *v756 & 7 | v596;
          v1330[1] = 0;
          v1331[0] = 0uLL;
          LODWORD(v1330[0]) = 0x1000000;
          HIDWORD(v1330[0]) = v1290;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v596, v593, (const llvm::MachineOperand *)v1330);
          v1330[1] = 0;
          v1331[0] = 0uLL;
          LODWORD(v1330[0]) = 0;
          HIDWORD(v1330[0]) = v759;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v596, v593, (const llvm::MachineOperand *)v1330);
          v3 = 1;
          LODWORD(v1330[0]) = 1;
          v1330[1] = 0;
          *(_QWORD *)&v1331[0] = 33;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v596, v593, (const llvm::MachineOperand *)v1330);
          v1330[1] = 0;
          v1331[0] = 0uLL;
          LODWORD(v1330[0]) = 0;
          HIDWORD(v1330[0]) = v1323;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v596, v593, (const llvm::MachineOperand *)v1330);
          LODWORD(v1330[0]) = 1;
          v1330[1] = 0;
          *(_QWORD *)&v1331[0] = 34;
LABEL_803:
          v362 = (llvm::MachineInstr *)v596;
          v363 = v593;
          goto LABEL_447;
        }
LABEL_1017:
        v738 = *(_QWORD *)(v6 + 48);
        v1323 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v738, "", 0);
        *(_QWORD *)(*(_QWORD *)(v738 + 24) + 16 * (v1323 & 0x7FFFFFFF)) = &off_1E7F98468;
        v739 = *(_QWORD *)(v738 + 8);
        v737 = v213;
        if (v739)
          (*(void (**)(uint64_t))(*(_QWORD *)v739 + 24))(v739);
        goto LABEL_1019;
      }
      v693 = *(_QWORD *)(v6 + 48);
      v694 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v693, "", 0);
      *(_QWORD *)(*(_QWORD *)(v693 + 24) + 16 * (v694 & 0x7FFFFFFF)) = &off_1E7F98468;
      v695 = *(_QWORD *)(v693 + 8);
      if (v695)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v695 + 24))(v695);
        if (v694)
          goto LABEL_963;
      }
      else if (v694)
      {
LABEL_963:
        v696 = v215;
        v697 = *(_QWORD *)(v6 + 32);
        v698 = (_QWORD *)v6;
        v699 = *(_QWORD *)(v697 + 640);
        v700 = *(unint64_t **)(v697 + 648);
        v701 = *(_QWORD *)(v698[12] + 8);
        v1322 = v213;
        if (v213)
          v702 = 132960;
        else
          v702 = 136560;
        v703 = *(llvm::MachineFunction **)(v699 + 32);
        v1310 = v698;
        v704 = (void *)v698[9];
        v1328[0] = v704;
        if (v704)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v704, 2);
        v705 = v701 + v702;
        v706 = *((_QWORD *)v703 + 28);
        if (v706)
          *((_QWORD *)v703 + 28) = *(_QWORD *)v706;
        else
          v706 = sub_1C484358C((uint64_t)v703 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v706, v703, v705, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v715 = *(_QWORD *)(v699 + 40);
        *(_QWORD *)(v706 + 24) = v715;
        v716 = *(_QWORD *)(v715 + 32);
        v717 = *(unsigned int *)(v706 + 40);
        if ((_DWORD)v717)
        {
          v996 = *(_QWORD *)(v706 + 32);
          v997 = *(_QWORD *)(v716 + 40);
          v998 = 32 * v717;
          do
          {
            if (!*(_BYTE *)v996)
            {
              v999 = *(unsigned int *)(v996 + 4);
              if ((int)v999 >= 0)
                v1000 = (uint64_t *)(*(_QWORD *)(v997 + 272) + 8 * v999);
              else
                v1000 = (uint64_t *)(*(_QWORD *)(v997 + 24) + 16 * (v999 & 0x7FFFFFFF) + 8);
              v1001 = *v1000;
              if (*v1000)
              {
                v1002 = *(_QWORD *)(v1001 + 16);
                *(_QWORD *)(v1001 + 16) = v996;
                *(_QWORD *)(v996 + 16) = v1002;
                if ((*(_BYTE *)(v996 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v996 + 24) = v1001;
                }
                else
                {
                  *(_QWORD *)(v996 + 24) = 0;
                  v1000 = (uint64_t *)(v1002 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v996 + 16) = v996;
                *(_QWORD *)(v996 + 24) = 0;
              }
              *v1000 = v996;
            }
            v996 += 32;
            v998 -= 32;
          }
          while (v998);
        }
        v718 = *(_QWORD *)(v716 + 728);
        if (v718)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v718 + 24))(v718, v706);
        v719 = *v700 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v706 = v719 | *(_QWORD *)v706 & 7;
        *(_QWORD *)(v706 + 8) = v700;
        *(_QWORD *)(v719 + 8) = v706;
        *v700 = *v700 & 7 | v706;
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0x1000000;
        HIDWORD(v1330[0]) = v694;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v706, v703, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v706, v703, (const llvm::MachineOperand *)v1330);
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0;
        HIDWORD(v1330[0]) = v317;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v706, v703, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 8;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v706, v703, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0x100000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v706, v703, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v706, v703, (const llvm::MachineOperand *)v1330);
        *(_OWORD *)v1330 = 0u;
        v1331[0] = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v706, v703, (const llvm::MachineOperand *)v1330);
        v720 = v1310[4];
        v721 = *(_QWORD *)(v720 + 640);
        v722 = *(unint64_t **)(v720 + 648);
        v723 = *(_QWORD *)(v1310[12] + 8);
        v724 = *(llvm::MachineFunction **)(v721 + 32);
        v725 = (void *)v1310[9];
        v1328[0] = v725;
        if (v725)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v725, 2);
        v726 = *((_QWORD *)v724 + 28);
        if (v726)
          *((_QWORD *)v724 + 28) = *(_QWORD *)v726;
        else
          v726 = sub_1C484358C((uint64_t)v724 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v726, v724, v723 + 912, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v727 = *(_QWORD *)(v721 + 40);
        *(_QWORD *)(v726 + 24) = v727;
        v728 = *(_QWORD *)(v727 + 32);
        v729 = *(unsigned int *)(v726 + 40);
        if ((_DWORD)v729)
        {
          v1003 = *(_QWORD *)(v726 + 32);
          v1004 = *(_QWORD *)(v728 + 40);
          v1005 = 32 * v729;
          do
          {
            if (!*(_BYTE *)v1003)
            {
              v1006 = *(unsigned int *)(v1003 + 4);
              if ((int)v1006 >= 0)
                v1007 = (uint64_t *)(*(_QWORD *)(v1004 + 272) + 8 * v1006);
              else
                v1007 = (uint64_t *)(*(_QWORD *)(v1004 + 24) + 16 * (v1006 & 0x7FFFFFFF) + 8);
              v1008 = *v1007;
              if (*v1007)
              {
                v1009 = *(_QWORD *)(v1008 + 16);
                *(_QWORD *)(v1008 + 16) = v1003;
                *(_QWORD *)(v1003 + 16) = v1009;
                if ((*(_BYTE *)(v1003 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v1003 + 24) = v1008;
                }
                else
                {
                  *(_QWORD *)(v1003 + 24) = 0;
                  v1007 = (uint64_t *)(v1009 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v1003 + 16) = v1003;
                *(_QWORD *)(v1003 + 24) = 0;
              }
              *v1007 = v1003;
            }
            v1003 += 32;
            v1005 -= 32;
          }
          while (v1005);
        }
        v730 = *(_QWORD *)(v728 + 728);
        v6 = (uint64_t)v1310;
        if (v730)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v730 + 24))(v730, v726);
        v731 = *v722 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v726 = v731 | *(_QWORD *)v726 & 7;
        *(_QWORD *)(v726 + 8) = v722;
        *(_QWORD *)(v731 + 8) = v726;
        *v722 = *v722 & 7 | v726;
        v1330[1] = 0;
        v1331[0] = 0uLL;
        v215 = v696;
        LODWORD(v1330[0]) = 0x1000000;
        HIDWORD(v1330[0]) = v696;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v726, v724, (const llvm::MachineOperand *)v1330);
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0;
        HIDWORD(v1330[0]) = v694;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v726, v724, (const llvm::MachineOperand *)v1330);
        v213 = v1322;
        goto LABEL_1014;
      }
      return 0;
    case 0x45:
    case 0x46:
      v33 = sub_1C5CC1648((uint64_t *)v6, (uint64_t)v5);
      if (!(_DWORD)v33)
        return 0;
      return sub_1C6127918((uint64_t *)v6, (uint64_t)v5, v33);
    case 0x47:
    case 0x48:
      v35 = sub_1C5CC1648((uint64_t *)v6, (uint64_t)v5);
      if (!v35)
        return 0;
      return sub_1C4793484((uint64_t *)v6, (uint64_t)v5, v35, *((unsigned __int8 *)*v5 + 8) != 2);
    case 0x49:
      v126 = sub_1C5CC1648((uint64_t *)v6, (uint64_t)v5);
      if (!(_DWORD)v126)
        return 0;
      return sub_1C4790D8C((_QWORD *)v6, (uint64_t)v5, v126, 0);
    case 0x4A:
      if (*((_BYTE *)*v5 + 8) != 2)
        return 0;
      v36 = *((_DWORD *)v5 + 5);
      v37 = (v36 & 0x40000000) != 0 ? *(v5 - 1) : (uint64_t **)&v5[-4 * (v36 & 0x7FFFFFF)];
      if (*(_BYTE *)(**v37 + 8))
        return 0;
      v231 = sub_1C5CC1648((uint64_t *)v6, (uint64_t)v5);
      if (!(_DWORD)v231)
        return 0;
      v232 = v231;
      if (!*(_BYTE *)(v6 + 280))
        goto LABEL_603;
      v233 = *((_DWORD *)v5 + 5);
      if ((v233 & 0x40000000) != 0)
        v234 = (uint64_t *)*(v5 - 1);
      else
        v234 = (uint64_t *)&v5[-4 * (v233 & 0x7FFFFFF)];
      v461 = *v234;
      v462 = *(unsigned __int8 *)(*v234 + 16);
      if (v461 && v462 >= 0x1C)
      {
        if (v462 != 73 || *(uint64_t ***)(v461 + 40) != v5[5])
          goto LABEL_603;
      }
      else if (v462 != 73)
      {
        goto LABEL_603;
      }
      if (!sub_1C47AD4FC(v6, v461) || sub_1C4786018(v6, (uint64_t)v5))
      {
        v463 = *(_QWORD *)(v461 - 32);
        if (v463)
        {
          v464 = sub_1C5CC1648((uint64_t *)v6, v463);
          if (!v464)
            return 0;
          v222 = v464;
          v465 = *(_QWORD *)(v6 + 32);
          v466 = *(_QWORD *)(v465 + 640);
          v467 = *(unint64_t **)(v465 + 648);
          v468 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8);
          v227 = *(llvm::MachineFunction **)(v466 + 32);
          v469 = *(void **)(v6 + 72);
          v1328[0] = v469;
          if (v469)
            llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v469, 2);
          v470 = v468 + 912;
          v230 = *((_QWORD *)v227 + 28);
          if (v230)
            *((_QWORD *)v227 + 28) = *(_QWORD *)v230;
          else
            v230 = sub_1C484358C((uint64_t)v227 + 128, 72, 3);
          v1330[0] = v1328[0];
          if (v1328[0])
          {
            llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
            v1328[0] = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v230, v227, v470, (unsigned __int8 **)v1330, 0);
          if (v1330[0])
            llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
          if (v1328[0])
            llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
          v857 = *(_QWORD *)(v466 + 40);
          *(_QWORD *)(v230 + 24) = v857;
          v858 = *(_QWORD *)(v857 + 32);
          v859 = *(unsigned int *)(v230 + 40);
          if ((_DWORD)v859)
          {
            v1123 = *(_QWORD *)(v230 + 32);
            v1124 = *(_QWORD *)(v858 + 40);
            v1125 = 32 * v859;
            do
            {
              if (!*(_BYTE *)v1123)
              {
                v1126 = *(unsigned int *)(v1123 + 4);
                if ((int)v1126 >= 0)
                  v1127 = (uint64_t *)(*(_QWORD *)(v1124 + 272) + 8 * v1126);
                else
                  v1127 = (uint64_t *)(*(_QWORD *)(v1124 + 24) + 16 * (v1126 & 0x7FFFFFFF) + 8);
                v1128 = *v1127;
                if (*v1127)
                {
                  v1129 = *(_QWORD *)(v1128 + 16);
                  *(_QWORD *)(v1128 + 16) = v1123;
                  *(_QWORD *)(v1123 + 16) = v1129;
                  if ((*(_BYTE *)(v1123 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v1123 + 24) = v1128;
                  }
                  else
                  {
                    *(_QWORD *)(v1123 + 24) = 0;
                    v1127 = (uint64_t *)(v1129 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v1123 + 16) = v1123;
                  *(_QWORD *)(v1123 + 24) = 0;
                }
                *v1127 = v1123;
              }
              v1123 += 32;
              v1125 -= 32;
            }
            while (v1125);
          }
          v860 = *(_QWORD *)(v858 + 728);
          if (v860)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v860 + 24))(v860, v230);
          v861 = *v467 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v230 = v861 | *(_QWORD *)v230 & 7;
          *(_QWORD *)(v230 + 8) = v467;
          *(_QWORD *)(v861 + 8) = v230;
          *v467 = *v467 & 7 | v230;
          v1330[1] = 0;
          v1331[0] = 0uLL;
          HIDWORD(v1330[0]) = v232;
LABEL_733:
          LODWORD(v1330[0]) = 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v230, v227, (const llvm::MachineOperand *)v1330);
          v1330[1] = 0;
          v1331[0] = 0uLL;
          LODWORD(v1330[0]) = 0;
          HIDWORD(v1330[0]) = v222;
          v569 = (llvm::MachineInstr *)v230;
          v570 = v227;
          goto LABEL_1152;
        }
      }
LABEL_603:
      if ((sub_1C478DD3C(v6, (uint64_t)v5, v232, 0, 0) & 1) != 0)
        return 1;
      v471 = *((_DWORD *)v5 + 5);
      if ((v471 & 0x40000000) != 0)
        v472 = (uint64_t *)*(v5 - 1);
      else
        v472 = (uint64_t *)&v5[-4 * (v471 & 0x7FFFFFF)];
      v1332.i64[0] = *v472;
      LOBYTE(v1335) = 1;
      v1338.i32[0] = 0;
      v542 = sub_1C47AE068(v6, v1332.i64, v1338.i32, &v1335, 0, (uint64_t)v5[5], 7, 1);
      v3 = v542 != 0;
      if (v542)
      {
        v543 = v542;
        v544 = *((unsigned __int16 *)&word_1C640F830 + v1335);
        v545 = *(_QWORD *)(v6 + 32);
        v546 = v6;
        v547 = *(_QWORD *)(v545 + 640);
        v548 = *(unint64_t **)(v545 + 648);
        v549 = *(_QWORD *)(*(_QWORD *)(v546 + 96) + 8);
        v550 = *(llvm::MachineFunction **)(v547 + 32);
        v551 = v546;
        v552 = *(void **)(v546 + 72);
        v1328[0] = v552;
        if (v552)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v552, 2);
        v553 = v549 + 48 * v544;
        v554 = *((_QWORD *)v550 + 28);
        if (v554)
          *((_QWORD *)v550 + 28) = *(_QWORD *)v554;
        else
          v554 = sub_1C484358C((uint64_t)v550 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v554, v550, v553, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v647 = *(_QWORD *)(v547 + 40);
        *(_QWORD *)(v554 + 24) = v647;
        v648 = *(_QWORD *)(v647 + 32);
        v649 = *(unsigned int *)(v554 + 40);
        if ((_DWORD)v649)
        {
          v1010 = *(_QWORD *)(v554 + 32);
          v1011 = *(_QWORD *)(v648 + 40);
          v1012 = 32 * v649;
          do
          {
            if (!*(_BYTE *)v1010)
            {
              v1013 = *(unsigned int *)(v1010 + 4);
              if ((int)v1013 >= 0)
                v1014 = (uint64_t *)(*(_QWORD *)(v1011 + 272) + 8 * v1013);
              else
                v1014 = (uint64_t *)(*(_QWORD *)(v1011 + 24) + 16 * (v1013 & 0x7FFFFFFF) + 8);
              v1015 = *v1014;
              if (*v1014)
              {
                v1016 = *(_QWORD *)(v1015 + 16);
                *(_QWORD *)(v1015 + 16) = v1010;
                *(_QWORD *)(v1010 + 16) = v1016;
                if ((*(_BYTE *)(v1010 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v1010 + 24) = v1015;
                }
                else
                {
                  *(_QWORD *)(v1010 + 24) = 0;
                  v1014 = (uint64_t *)(v1016 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v1010 + 16) = v1010;
                *(_QWORD *)(v1010 + 24) = 0;
              }
              *v1014 = v1010;
            }
            v1010 += 32;
            v1012 -= 32;
          }
          while (v1012);
        }
        v650 = *(_QWORD *)(v648 + 728);
        if (v650)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v650 + 24))(v650, v554);
        v651 = *v548 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v554 = v651 | *(_QWORD *)v554 & 7;
        *(_QWORD *)(v554 + 8) = v548;
        *(_QWORD *)(v651 + 8) = v554;
        *v548 = *v548 & 7 | v554;
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0x1000000;
        HIDWORD(v1330[0]) = v232;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v554, v550, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v554, v550, (const llvm::MachineOperand *)v1330);
        v1328[0] = v550;
        v1328[1] = (void *)v554;
        if ((sub_1C47ADDC8(v551, v1332.i64[0], 0, (llvm::MachineFunction **)v1328, 0) & 1) == 0)
        {
          v1330[1] = 0;
          v1331[0] = 0uLL;
          LODWORD(v1330[0]) = 0;
          HIDWORD(v1330[0]) = v543;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1328[1], (llvm::MachineFunction *)v1328[0], (const llvm::MachineOperand *)v1330);
        }
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = v1338.u32[0];
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1328[1], (llvm::MachineFunction *)v1328[0], (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0x100008000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1328[1], (llvm::MachineFunction *)v1328[0], (const llvm::MachineOperand *)v1330);
        v637 = (llvm::MachineFunction *)v1328[0];
        v636 = (llvm::MachineInstr *)v1328[1];
        LODWORD(v1330[0]) = 1;
LABEL_893:
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand(v636, v637, (const llvm::MachineOperand *)v1330);
        v363 = (llvm::MachineFunction *)v1328[0];
        v362 = (llvm::MachineInstr *)v1328[1];
        goto LABEL_446;
      }
      return v3;
    case 0x4D:
      v380 = *((_DWORD *)v5 + 5);
      if ((v380 & 0x40000000) != 0)
        v381 = (unsigned __int8 **)*(v5 - 1);
      else
        v381 = (unsigned __int8 **)&v5[-4 * (v380 & 0x7FFFFFF)];
      return sub_1C6126EA8((_QWORD *)v6, (unsigned __int8 *)v5, *v381);
    case 0x51:
      return sub_1C6127418((uint64_t *)v6, (uint64_t)v5);
    case 0x52:
      return sub_1C61272C8((uint64_t *)v6, (uint64_t)v5);
    case 0x54:
      v131 = (uint64_t)*(v5 - 4);
      if (!v131 || *(_BYTE *)(v131 + 16) || *(uint64_t ***)(v131 + 24) != v5[9] || (*(_BYTE *)(v131 + 33) & 0x20) == 0)
        return 0;
      return sub_1C4793F00(v6, (uint64_t)v5);
    case 0x55:
      v127 = sub_1C5CC1648((uint64_t *)v6, (uint64_t)v5);
      if (!v127)
        return 0;
      v128 = v127;
      v129 = *v5;
      if (*((_DWORD *)*v5 + 2))
        v130 = *((_DWORD *)*v5 + 2) == 13 && *((_DWORD *)*v5 + 2) >> 8 < 0x11u;
      else
        v130 = 1;
      sub_1C4768AD0(*(_QWORD *)(v6 + 88), (uint64_t)*v5);
      v246 = v245;
      if ((_DWORD)v244 == 1)
      if (v246 > 0x20)
        return 0;
      v247 = *((_DWORD *)v5 + 5);
      if ((v247 & 0x40000000) != 0)
        v248 = (uint64_t *)*(v5 - 1);
      else
        v248 = (uint64_t *)&v5[-4 * (v247 & 0x7FFFFFF)];
      v257 = *v248;
      v258 = *(unsigned __int8 *)(*v248 + 16);
      if (v257 && v258 >= 0x1C && *(uint64_t ***)(v257 + 40) != v5[5])
        goto LABEL_614;
      if (v258 == 81)
      {
        v375 = *(_QWORD *)(v257 - 64);
        v376 = *(_DWORD *)(*(_QWORD *)v375 + 8);
        v378 = v376 >> 8 < 0x11 && *(_DWORD *)(*(_QWORD *)v375 + 8) == 13;
        if ((v247 & 0x40000000) != 0)
          v379 = (uint64_t ***)*(v5 - 1);
        else
          v379 = &v5[-4 * (v247 & 0x7FFFFFF)];
        v26 = v376 == 8205;
        v473 = !v378;
        if (v26)
          v473 = 0;
        if (!v473)
          return sub_1C47B891C(v6, (uint64_t *)v5, v257, v375, *(_QWORD *)(v257 - 32), (uint64_t)v379[4], (uint64_t)v379[8], v128);
      }
      else if (v258 == 82)
      {
        v259 = *(_QWORD *)(v257 - 64);
        v260 = (v247 & 0x40000000) != 0 ? *(v5 - 1) : (uint64_t **)&v5[-4 * (v247 & 0x7FFFFFF)];
        if ((*(_DWORD *)(*(_QWORD *)v259 + 8) | 2) == 2)
          return sub_1C47B6BD4(v6, (llvm::Type **)v5, v257, v259, *(_QWORD *)(v257 - 32), (uint64_t)v260[4], (uint64_t)v260[8], v128);
      }
LABEL_614:
      v3 = 0;
      v474 = *((_DWORD *)v129 + 2);
      if (v474 > 0xD)
        return v3;
      v1287 = *((_DWORD *)v129 + 2);
      v1303 = v128;
      v1320 = v130;
      if (((1 << v474) & 0x2005) == 0)
        return v3;
      v1328[0] = 0;
      v1328[1] = 0;
      v1332 = 0uLL;
      v1338 = 0uLL;
      v1337 = 0;
      if ((v247 & 0x40000000) != 0)
        v475 = (uint64_t *)*(v5 - 1);
      else
        v475 = (uint64_t *)&v5[-4 * (v247 & 0x7FFFFFF)];
      v476 = sub_1C5CC1648((uint64_t *)v6, *v475);
      if (!v476)
        return 0;
      v1281 = v476;
      v1308 = (uint64_t *)v6;
      v477 = 0;
      v478 = 0;
      v1327.i16[0] = 0;
      v479 = 1;
      do
      {
        v480 = v479;
        v481 = *((_DWORD *)v5 + 5);
        if ((v481 & 0x40000000) != 0)
          v482 = (uint64_t ***)*(v5 - 1);
        else
          v482 = &v5[-4 * (v481 & 0x7FFFFFF)];
        v483 = (uint64_t)v482[4 * v477 + 4];
        v1338.i64[v477] = v483;
        v484 = *(unsigned __int8 *)(v483 + 16);
        if (v483)
          v485 = v484 == 17;
        else
          v485 = 0;
        if (v485)
        {
          v1328[v477] = (void *)v483;
          v489 = *(void **)(v483 + 32);
          v488 = (llvm::detail::DoubleAPFloat *)(v483 + 32);
          if (v489 == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v488, (unsigned int *)v1330);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v488, (unsigned int *)v1330);
          v490 = v1330[1];
          v491 = v1330[0];
          if (LODWORD(v1330[1]) >= 0x41)
            v492 = (void **)v1330[0];
          else
            v492 = v1330;
          v1327.i8[v477] = *v492 == 0;
          if (v490 >= 0x41 && v491)
            MEMORY[0x1CAA32F9C](v491, 0x1000C8000313F17);
          v478 |= 1 << v477;
        }
        else
        {
          if (v483)
            v486 = v484 == 16;
          else
            v486 = 0;
          if (v486)
          {
            v1332.i64[v477] = v483;
            v493 = (_QWORD *)(v483 + 24);
            if (*(_DWORD *)(v483 + 32) >= 0x41u)
              v493 = (_QWORD *)*v493;
            v478 |= 1 << v477;
            v1327.i8[v477] = *v493 == 0;
          }
          else
          {
            v487 = sub_1C5CC1648(v1308, v483);
            v1337.i32[v477] = v487;
            if (!v487)
              return 0;
          }
        }
        v479 = 0;
        v477 = 1;
      }
      while ((v480 & 1) != 0);
      if (v1327.i8[0])
      {
        v494 = 0;
        LODWORD(v495) = v478 & 2;
        v496 = *(unsigned __int16 *)((char *)&word_1C640F820 + 4 * v130 + (v478 & 2));
        v1295 = v1303;
        goto LABEL_1044;
      }
      v497 = v1327.u8[1];
      if ((v478 & 2) != 0 && v1327.i8[1])
      {
        v498 = v1338.i64[1];
        v499 = v1338.i64[0];
      }
      else
      {
        v498 = v1338.i64[1];
        v638 = sub_1C47B6194((uint64_t)v1308, v1338.i64[1]);
        v499 = v1338.i64[0];
        if (v638 <= sub_1C47B6194((uint64_t)v1308, v1338.i64[0]))
        {
          LODWORD(v495) = v478 & 2;
          v496 = *(unsigned __int16 *)((char *)&word_1C640F820 + 4 * v130 + (v478 & 2));
          goto LABEL_1039;
        }
      }
      v494 = 0;
      v1337 = vrev64_s32(v1337);
      v1338.i64[0] = v498;
      v1338.i64[1] = v499;
      *(int8x16_t *)v1328 = vextq_s8(*(int8x16_t *)v1328, *(int8x16_t *)v1328, 8uLL);
      v1332 = vextq_s8(v1332, v1332, 8uLL);
      v1327.i16[0] = v497;
      v478 = __rbit32(v478) >> 30;
      v495 = v478 & 2;
      v496 = *(unsigned __int16 *)((char *)&word_1C640F820 + 4 * v130 + v495 + 8);
      v1295 = v1303;
      if (v497)
        goto LABEL_1044;
LABEL_1039:
      v761 = v1308[6];
      v762 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v761, "", 0);
      v1295 = v762;
      v763 = &off_1E7F98468;
      if (v130)
        v763 = &off_1E7F982A8;
      *(_QWORD *)(*(_QWORD *)(v761 + 24) + 16 * (v762 & 0x7FFFFFFF)) = v763;
      v764 = *(_QWORD *)(v761 + 8);
      if (v764)
        (*(void (**)(uint64_t))(*(_QWORD *)v764 + 24))(v764);
      v494 = 1;
LABEL_1044:
      v765 = v1308[4];
      v766 = *(_QWORD *)(v765 + 640);
      v767 = *(unint64_t **)(v765 + 648);
      v768 = *(_QWORD *)(v1308[12] + 8);
      v769 = *(llvm::MachineFunction **)(v766 + 32);
      v770 = (llvm::MachineFunction *)v1308[9];
      v1335 = v770;
      if (v770)
        llvm::MetadataTracking::track((uint64_t)&v1335, (unsigned __int8 *)v770, 2);
      v771 = *((_QWORD *)v769 + 28);
      if (v771)
        *((_QWORD *)v769 + 28) = *(_QWORD *)v771;
      else
        v771 = sub_1C484358C((uint64_t)v769 + 128, 72, 3);
      v1330[0] = v1335;
      if (v1335)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v1335, (unsigned __int8 *)v1335, (uint64_t)v1330);
        v1335 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v771, v769, v768 + 48 * v496, (unsigned __int8 **)v1330, 0);
      if (v1330[0])
        llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
      if (v1335)
        llvm::MetadataTracking::untrack((uint64_t)&v1335, (unsigned __int8 *)v1335);
      v772 = *(_QWORD *)(v766 + 40);
      *(_QWORD *)(v771 + 24) = v772;
      v773 = *(_QWORD *)(v772 + 32);
      v774 = *(unsigned int *)(v771 + 40);
      if ((_DWORD)v774)
      {
        v845 = *(_QWORD *)(v771 + 32);
        v846 = *(_QWORD *)(v773 + 40);
        v847 = 32 * v774;
        do
        {
          if (!*(_BYTE *)v845)
          {
            v848 = *(unsigned int *)(v845 + 4);
            if ((int)v848 >= 0)
              v849 = (uint64_t *)(*(_QWORD *)(v846 + 272) + 8 * v848);
            else
              v849 = (uint64_t *)(*(_QWORD *)(v846 + 24) + 16 * (v848 & 0x7FFFFFFF) + 8);
            v850 = *v849;
            if (*v849)
            {
              v851 = *(_QWORD *)(v850 + 16);
              *(_QWORD *)(v850 + 16) = v845;
              *(_QWORD *)(v845 + 16) = v851;
              if ((*(_BYTE *)(v845 + 3) & 1) != 0)
              {
                *(_QWORD *)(v845 + 24) = v850;
              }
              else
              {
                *(_QWORD *)(v845 + 24) = 0;
                v849 = (uint64_t *)(v851 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v845 + 16) = v845;
              *(_QWORD *)(v845 + 24) = 0;
            }
            *v849 = v845;
          }
          v845 += 32;
          v847 -= 32;
        }
        while (v847);
      }
      v775 = *(_QWORD *)(v773 + 728);
      if (v775)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v775 + 24))(v775, v771);
      v776 = *v767 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v771 = v776 | *(_QWORD *)v771 & 7;
      *(_QWORD *)(v771 + 8) = v767;
      *(_QWORD *)(v776 + 8) = v771;
      *v767 = *v767 & 7 | v771;
      v1330[1] = 0;
      v1331[0] = 0uLL;
      LODWORD(v1330[0]) = 0x1000000;
      HIDWORD(v1330[0]) = v1295;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v771, v769, (const llvm::MachineOperand *)v1330);
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v771, v769, (const llvm::MachineOperand *)v1330);
      v1330[1] = 0;
      v1331[0] = 0uLL;
      LODWORD(v1330[0]) = 0;
      HIDWORD(v1330[0]) = v1281;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v771, v769, (const llvm::MachineOperand *)v1330);
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v771, v769, (const llvm::MachineOperand *)v1330);
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0x100000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v771, v769, (const llvm::MachineOperand *)v1330);
      v1335 = v769;
      v1336 = (llvm::MachineInstr *)v771;
      if ((_DWORD)v495)
      {
        v777 = v1287;
        if ((v1287 | 2) == 2)
        {
          v778 = (llvm::detail::DoubleAPFloat *)((char *)v1328[1] + 32);
          if (*((_UNKNOWN **)v1328[1] + 4) == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v778, (unsigned int *)v1330);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v778, (unsigned int *)v1330);
          if (LODWORD(v1330[1]) >= 0x41)
            v779 = (void **)v1330[0];
          else
            v779 = v1330;
          v780 = (uint64_t)*v779;
          if (LODWORD(v1330[1]) >= 0x41 && v1330[0])
            MEMORY[0x1CAA32F9C]();
        }
        else
        {
          v783 = (uint64_t *)(v1332.i64[1] + 24);
          if (*(_DWORD *)(v1332.i64[1] + 32) >= 0x41u)
            v783 = (uint64_t *)*v783;
          v780 = *v783;
        }
        v784 = v780 | 0x100000000;
        LODWORD(v1330[0]) = 1;
        if (!v1320)
          v784 = v780;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = v784;
        v781 = (llvm::MachineInstr *)v771;
        v782 = v769;
LABEL_1079:
        llvm::MachineInstr::addOperand(v781, v782, (const llvm::MachineOperand *)v1330);
        if (v494)
        {
          v1330[1] = 0;
          v1331[0] = 0uLL;
          v1330[0] = (void *)0x201000000;
        }
        else
        {
          *(_OWORD *)v1330 = 0u;
          v1331[0] = 0u;
        }
        llvm::MachineInstr::addOperand(v1336, v1335, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand(v1336, v1335, (const llvm::MachineOperand *)v1330);
        *(_OWORD *)v1330 = 0u;
        v1331[0] = 0u;
        llvm::MachineInstr::addOperand(v1336, v1335, (const llvm::MachineOperand *)v1330);
        if (v494)
        {
          v785 = dword_1C6416958[v1320 & 0xFFFFFFFD | (2 * (v478 & 1))];
          v786 = v1308[4];
          v787 = *(_QWORD *)(v786 + 640);
          v788 = *(unint64_t **)(v786 + 648);
          v789 = *(_QWORD *)(v1308[12] + 8);
          v790 = *(llvm::MachineFunction **)(v787 + 32);
          v791 = (llvm::MachineFunction *)v1308[9];
          v1325 = v791;
          if (v791)
            llvm::MetadataTracking::track((uint64_t)&v1325, (unsigned __int8 *)v791, 2);
          v792 = *((_QWORD *)v790 + 28);
          if (v792)
            *((_QWORD *)v790 + 28) = *(_QWORD *)v792;
          else
            v792 = sub_1C484358C((uint64_t)v790 + 128, 72, 3);
          v1330[0] = v1325;
          if (v1325)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v1325, (unsigned __int8 *)v1325, (uint64_t)v1330);
            v1325 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v792, v790, v789 + 48 * v785, (unsigned __int8 **)v1330, 0);
          if (v1330[0])
            llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
          if (v1325)
            llvm::MetadataTracking::untrack((uint64_t)&v1325, (unsigned __int8 *)v1325);
          v793 = *(_QWORD *)(v787 + 40);
          *(_QWORD *)(v792 + 24) = v793;
          v794 = *(_QWORD *)(v793 + 32);
          v795 = *(unsigned int *)(v792 + 40);
          if ((_DWORD)v795)
          {
            v975 = *(_QWORD *)(v792 + 32);
            v976 = *(_QWORD *)(v794 + 40);
            v977 = 32 * v795;
            v777 = v1287;
            do
            {
              if (!*(_BYTE *)v975)
              {
                v978 = *(unsigned int *)(v975 + 4);
                if ((int)v978 >= 0)
                  v979 = (uint64_t *)(*(_QWORD *)(v976 + 272) + 8 * v978);
                else
                  v979 = (uint64_t *)(*(_QWORD *)(v976 + 24) + 16 * (v978 & 0x7FFFFFFF) + 8);
                v980 = *v979;
                if (*v979)
                {
                  v981 = *(_QWORD *)(v980 + 16);
                  *(_QWORD *)(v980 + 16) = v975;
                  *(_QWORD *)(v975 + 16) = v981;
                  if ((*(_BYTE *)(v975 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v975 + 24) = v980;
                  }
                  else
                  {
                    *(_QWORD *)(v975 + 24) = 0;
                    v979 = (uint64_t *)(v981 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v975 + 16) = v975;
                  *(_QWORD *)(v975 + 24) = 0;
                }
                *v979 = v975;
              }
              v975 += 32;
              v977 -= 32;
            }
            while (v977);
          }
          v796 = *(_QWORD *)(v794 + 728);
          if (v796)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v796 + 24))(v796, v792);
          v797 = *v788 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v792 = v797 | *(_QWORD *)v792 & 7;
          *(_QWORD *)(v792 + 8) = v788;
          *(_QWORD *)(v797 + 8) = v792;
          *v788 = *v788 & 7 | v792;
          v1330[1] = 0;
          v1331[0] = 0uLL;
          LODWORD(v1330[0]) = 0x1000000;
          HIDWORD(v1330[0]) = v1303;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v792, v790, (const llvm::MachineOperand *)v1330);
          v1325 = v790;
          v1326 = (llvm::MachineInstr *)v792;
          v1330[1] = 0;
          v1331[0] = 0uLL;
          LODWORD(v1330[0]) = 0;
          HIDWORD(v1330[0]) = v1295;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v792, v790, (const llvm::MachineOperand *)v1330);
          if ((v478 & 1) != 0)
          {
            if ((v777 | 2) == 2)
            {
              v799 = (llvm::detail::DoubleAPFloat *)((char *)v1328[0] + 32);
              if (*((_UNKNOWN **)v1328[0] + 4) == &unk_1C866F1C0)
                llvm::detail::DoubleAPFloat::bitcastToAPInt(v799, (unsigned int *)v1330);
              else
                llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v799, (unsigned int *)v1330);
              if (LODWORD(v1330[1]) >= 0x41)
                v800 = (void **)v1330[0];
              else
                v800 = v1330;
              v801 = (uint64_t)*v800;
              if (LODWORD(v1330[1]) >= 0x41 && v1330[0])
                MEMORY[0x1CAA32F9C]();
            }
            else
            {
              v825 = (uint64_t *)(v1332.i64[0] + 24);
              if (*(_DWORD *)(v1332.i64[0] + 32) >= 0x41u)
                v825 = (uint64_t *)*v825;
              v801 = *v825;
            }
            v826 = v801 | 0x100000000;
            LODWORD(v1330[0]) = 1;
            if (!v1320)
              v826 = v801;
            v1330[1] = 0;
            *(_QWORD *)&v1331[0] = v826;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v792, v790, (const llvm::MachineOperand *)v1330);
          }
          else if (!v1338.i64[0]
                 || (v798 = sub_1C47ADDC8((uint64_t)v1308, v1338.i64[0], 0, &v1325, 0),
                     v790 = v1325,
                     v792 = (unint64_t)v1326,
                     (v798 & 1) == 0))
          {
            v1330[1] = 0;
            v1331[0] = 0uLL;
            LODWORD(v1330[0]) = 0;
            HIDWORD(v1330[0]) = v1337.i32[0];
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v792, v790, (const llvm::MachineOperand *)v1330);
            v790 = v1325;
            v792 = (unint64_t)v1326;
          }
          LODWORD(v1330[0]) = 1;
          v1330[1] = 0;
          *(_QWORD *)&v1331[0] = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v792, v790, (const llvm::MachineOperand *)v1330);
          v570 = v1325;
          v569 = v1326;
          v1330[1] = 0;
          v1331[0] = 0uLL;
          v1330[0] = (void *)0x200000000;
LABEL_1152:
          llvm::MachineInstr::addOperand(v569, v570, (const llvm::MachineOperand *)v1330);
        }
        return 1;
      }
      v777 = v1287;
      if (!v1338.i64[1])
        goto LABEL_1071;
      if ((sub_1C47ADDC8((uint64_t)v1308, (_BYTE *)v1338.i64[1], 0, &v1335, 0) & 1) == 0)
      {
        v769 = v1335;
        v771 = (unint64_t)v1336;
LABEL_1071:
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0;
        HIDWORD(v1330[0]) = v1337.i32[1];
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v771, v769, (const llvm::MachineOperand *)v1330);
      }
      v782 = v1335;
      v781 = v1336;
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0;
      goto LABEL_1079;
    case 0x59:
      v88 = *((_DWORD *)v5 + 5);
      if ((v88 & 0x40000000) != 0)
        v89 = (unsigned __int8 **)*(v5 - 1);
      else
        v89 = (unsigned __int8 **)&v5[-4 * (v88 & 0x7FFFFFF)];
      v159 = *v89;
      v160 = *(_QWORD *)*v89;
      v161 = (llvm::Type *)v160;
      if ((*(_DWORD *)(v160 + 8) & 0xFE) == 0x12)
        v161 = **(llvm::Type ***)(v160 + 16);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v161);
      v163 = PrimitiveSizeInBits;
      if (PrimitiveSizeInBits > 0x20 || ((1 << PrimitiveSizeInBits) & 0x100010100) == 0)
        return 0;
      v3 = 0;
      v165 = v89[4];
      if (!v165 || v165[16] != 16)
        return v3;
      v166 = v165 + 24;
      if (*((_DWORD *)v165 + 8) >= 0x41u)
        v166 = (_QWORD *)*v166;
      v167 = *(_DWORD *)(v160 + 32);
      v168 = (_QWORD *)*v166;
      v169 = sub_1C5CC1648((uint64_t *)v6, (uint64_t)v5);
      if (!v169)
        return 0;
      v170 = v169;
      if (v163 != 8)
      {
        v281 = sub_1C47A836C(v6, v159);
        if (!v281)
          return 0;
        v1332.i32[0] = 0;
        v1338.i32[0] = v281;
        sub_1C6127154(v6, v167, v163, v168, v1338.i32, &v1332);
        v282 = *(_QWORD *)(v6 + 32);
        v283 = *(_QWORD *)(v282 + 640);
        v284 = *(unint64_t **)(v282 + 648);
        v285 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8);
        v286 = *(llvm::MachineFunction **)(v283 + 32);
        v287 = *(void **)(v6 + 72);
        v1328[0] = v287;
        if (v287)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v287, 2);
        v288 = v285 + 912;
        v289 = *((_QWORD *)v286 + 28);
        if (v289)
          *((_QWORD *)v286 + 28) = *(_QWORD *)v289;
        else
          v289 = sub_1C484358C((uint64_t)v286 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v289, v286, v288, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v963 = *(_QWORD *)(v283 + 40);
        *(_QWORD *)(v289 + 24) = v963;
        v964 = *(_QWORD *)(v963 + 32);
        v965 = *(unsigned int *)(v289 + 40);
        if ((_DWORD)v965)
        {
          v1140 = *(_QWORD *)(v289 + 32);
          v1141 = *(_QWORD *)(v964 + 40);
          v1142 = 32 * v965;
          do
          {
            if (!*(_BYTE *)v1140)
            {
              v1143 = *(unsigned int *)(v1140 + 4);
              if ((int)v1143 >= 0)
                v1144 = (uint64_t *)(*(_QWORD *)(v1141 + 272) + 8 * v1143);
              else
                v1144 = (uint64_t *)(*(_QWORD *)(v1141 + 24) + 16 * (v1143 & 0x7FFFFFFF) + 8);
              v1145 = *v1144;
              if (*v1144)
              {
                v1146 = *(_QWORD *)(v1145 + 16);
                *(_QWORD *)(v1145 + 16) = v1140;
                *(_QWORD *)(v1140 + 16) = v1146;
                if ((*(_BYTE *)(v1140 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v1140 + 24) = v1145;
                }
                else
                {
                  *(_QWORD *)(v1140 + 24) = 0;
                  v1144 = (uint64_t *)(v1146 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v1140 + 16) = v1140;
                *(_QWORD *)(v1140 + 24) = 0;
              }
              *v1144 = v1140;
            }
            v1140 += 32;
            v1142 -= 32;
          }
          while (v1142);
        }
        v966 = *(_QWORD *)(v964 + 728);
        if (v966)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v966 + 24))(v966, v289);
        v967 = *v284 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v289 = v967 | *(_QWORD *)v289 & 7;
        *(_QWORD *)(v289 + 8) = v284;
        *(_QWORD *)(v967 + 8) = v289;
        *v284 = *v284 & 7 | v289;
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0x1000000;
        HIDWORD(v1330[0]) = v170;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v289, v286, (const llvm::MachineOperand *)v1330);
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = (v1332.i16[0] & 0xFFF) << 8;
        HIDWORD(v1330[0]) = v1338.i32[0];
        v569 = (llvm::MachineInstr *)v289;
        v570 = v286;
        goto LABEL_1152;
      }
      v171 = *(_DWORD *)(*(_QWORD *)v159 + 32);
      v172 = v171 <= 4 && v171 > v168;
      if (!v172)
        return 0;
      v173 = sub_1C5CC1648((uint64_t *)v6, (uint64_t)v159);
      if (!v173)
        return 0;
      v174 = v173;
      v175 = (_UNKNOWN ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 24) + 16 * (v173 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
      v176 = v175 == &off_1E7F982F0 || v175 == &off_1E7F982A8;
      v177 = *(_QWORD *)(v6 + 32);
      v178 = *(_QWORD *)(v177 + 640);
      v179 = *(unint64_t **)(v177 + 648);
      v180 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8);
      if (v176)
        v181 = 633648;
      else
        v181 = 633456;
      v182 = *(llvm::MachineFunction **)(v178 + 32);
      v183 = *(void **)(v6 + 72);
      v1328[0] = v183;
      if (v183)
        llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v183, 2);
      v184 = v180 + v181;
      v185 = *((_QWORD *)v182 + 28);
      if (v185)
        *((_QWORD *)v182 + 28) = *(_QWORD *)v185;
      else
        v185 = sub_1C484358C((uint64_t)v182 + 128, 72, 3);
      v1330[0] = v1328[0];
      if (v1328[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
        v1328[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v185, v182, v184, (unsigned __int8 **)v1330, 0);
      if (v1330[0])
        llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
      if (v1328[0])
        llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
      v639 = *(_QWORD *)(v178 + 40);
      *(_QWORD *)(v185 + 24) = v639;
      v640 = *(_QWORD *)(v639 + 32);
      v641 = *(unsigned int *)(v185 + 40);
      if ((_DWORD)v641)
      {
        v989 = *(_QWORD *)(v185 + 32);
        v990 = *(_QWORD *)(v640 + 40);
        v991 = 32 * v641;
        do
        {
          if (!*(_BYTE *)v989)
          {
            v992 = *(unsigned int *)(v989 + 4);
            if ((int)v992 >= 0)
              v993 = (uint64_t *)(*(_QWORD *)(v990 + 272) + 8 * v992);
            else
              v993 = (uint64_t *)(*(_QWORD *)(v990 + 24) + 16 * (v992 & 0x7FFFFFFF) + 8);
            v994 = *v993;
            if (*v993)
            {
              v995 = *(_QWORD *)(v994 + 16);
              *(_QWORD *)(v994 + 16) = v989;
              *(_QWORD *)(v989 + 16) = v995;
              if ((*(_BYTE *)(v989 + 3) & 1) != 0)
              {
                *(_QWORD *)(v989 + 24) = v994;
              }
              else
              {
                *(_QWORD *)(v989 + 24) = 0;
                v993 = (uint64_t *)(v995 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v989 + 16) = v989;
              *(_QWORD *)(v989 + 24) = 0;
            }
            *v993 = v989;
          }
          v989 += 32;
          v991 -= 32;
        }
        while (v991);
      }
      v642 = *(_QWORD *)(v640 + 728);
      if (v642)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v642 + 24))(v642, v185);
      v643 = *v179 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v185 = v643 | *(_QWORD *)v185 & 7;
      *(_QWORD *)(v185 + 8) = v179;
      *(_QWORD *)(v643 + 8) = v185;
      *v179 = *v179 & 7 | v185;
      v1330[1] = 0;
      v1331[0] = 0uLL;
      LODWORD(v1330[0]) = 0x1000000;
      HIDWORD(v1330[0]) = v170;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v185, v182, (const llvm::MachineOperand *)v1330);
      v3 = 1;
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v185, v182, (const llvm::MachineOperand *)v1330);
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v185, v182, (const llvm::MachineOperand *)v1330);
      v1330[1] = 0;
      v1331[0] = 0uLL;
      LODWORD(v1330[0]) = 0;
      HIDWORD(v1330[0]) = v174;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v185, v182, (const llvm::MachineOperand *)v1330);
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v185, v182, (const llvm::MachineOperand *)v1330);
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = (8 * (_DWORD)v168);
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v185, v182, (const llvm::MachineOperand *)v1330);
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = (8 * (_DWORD)v168 + 8);
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v185, v182, (const llvm::MachineOperand *)v1330);
      LODWORD(v1330[0]) = 1;
      v1330[1] = 0;
      *(_QWORD *)&v1331[0] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v185, v182, (const llvm::MachineOperand *)v1330);
      *(_OWORD *)v1330 = 0u;
      v1331[0] = 0u;
      v362 = (llvm::MachineInstr *)v185;
      v363 = v182;
      goto LABEL_447;
    case 0x5A:
      v74 = *v5;
      v75 = (llvm::Type *)(*v5)[3];
      if ((*((_DWORD *)v75 + 2) & 0xFE) == 0x12)
        v75 = (llvm::Type *)**((_QWORD **)v75 + 2);
      v76 = llvm::Type::getPrimitiveSizeInBits(v75);
      v77 = v76;
      v3 = 0;
      if (v76 > 0x20 || ((1 << v76) & 0x100010100) == 0)
        return v3;
      v1313 = (llvm::MachineFunction *)*((unsigned int *)v74 + 8);
      if (((_DWORD)v1313 - 5) < 0xFFFFFFFD)
        return 0;
      v78 = *((_DWORD *)v5 + 5);
      if ((v78 & 0x40000000) != 0)
        v79 = (unsigned __int8 **)*(v5 - 1);
      else
        v79 = (unsigned __int8 **)&v5[-4 * (v78 & 0x7FFFFFF)];
      v3 = 0;
      v249 = v79[8];
      if (!v249 || v249[16] != 16)
        return v3;
      v250 = *v79;
      v251 = (uint64_t)v79[4];
      v252 = (llvm::MachineFunction *)(v249 + 24);
      if (*((_DWORD *)v249 + 8) >= 0x41u)
        v252 = *(llvm::MachineFunction **)v252;
      v253 = *(llvm::MachineFunction **)v252;
      v254 = sub_1C47A836C(v6, (unsigned __int8 *)v5);
      if (!v254)
        return 0;
      v255 = v254;
      if (v250[16] - 11 >= 2)
      {
        v383 = sub_1C47A836C(v6, v250);
        if (!v383)
          return 0;
        v256 = v383;
        v384 = *(_QWORD **)(v6 + 48);
        if ((_UNKNOWN ***)(*(_QWORD *)(v384[3] + 16 * (v256 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E7F98468)
          sub_1C51A3F30(v384, v256, (uint64_t)&off_1E7F98468, (uint64_t)&off_1E7F984F0, 0);
      }
      else
      {
        v256 = 0;
      }
      v385 = *(unsigned __int8 *)(v251 + 16);
      if (v385 < 0x1C || !v251)
      {
        v393 = v77 == 8;
        v1302 = v256 != 0;
LABEL_505:
        v394 = sub_1C5CC1648((uint64_t *)v6, v251);
        if (!v394)
          return 0;
        v395 = v394;
        if (v77 <= 0x10)
        {
          v1274 = sub_1C6126FBC(v6, v394);
          if (v393)
            goto LABEL_509;
          v396 = v1274;
        }
        else
        {
          v396 = 0;
          if (v393)
          {
            v1274 = 0;
            goto LABEL_509;
          }
        }
        v1283 = v395;
        v1291 = v253;
        if (v1302)
        {
          v883 = -1;
        }
        else
        {
          v883 = sub_1C6126ACC(v6, v77 < 0x11, 0);
          if (!v883)
            return 0;
        }
        v884 = *(_QWORD **)(v6 + 48);
        v885 = *(_QWORD *)(v884[3] + 16 * (v255 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
        v886 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v884 + 16) + 176))(*(_QWORD *)(*v884 + 16));
        v887 = *(_DWORD *)(*(_QWORD *)(v886 + 264)
                         + 24
                         * (*(unsigned __int16 *)(*(_QWORD *)v885 + 24)
                          + *(_DWORD *)(v886 + 272)
                          * ((*(_QWORD *)(v886 + 248) - *(_QWORD *)(v886 + 240)) >> 3)));
        v1298 = v255;
        v1273 = v256;
        if (v887 != v77)
        {
          v1271 = (_DWORD)v1313 * v77;
          v924 = v396;
          if ((_DWORD)v1313 * v77 == 32)
          {
            sub_1C51A3F30(*(_QWORD **)(v6 + 48), v255, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 24) + 16 * (v255 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (uint64_t)&off_1E7F984F0, 0);
            v925 = v255;
          }
          else
          {
            v925 = v255;
            if ((_DWORD)v1313 * v77 != v887)
            {
              if (v1271)
                v926 = (v1271 >> 5) + 1;
              else
                v926 = -1;
              if (v926 > 0x11)
                v927 = 0;
              else
                v927 = (unint64_t)off_1E7F94CC8[v926] & 0xFFFFFFFFFFFFFFFBLL;
              v1031 = *(_QWORD *)(v6 + 48);
              v1032 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v1031, "", 0);
              *(_QWORD *)(*(_QWORD *)(v1031 + 24) + 16 * (v1032 & 0x7FFFFFFF)) = v927;
              v1033 = *(_QWORD *)(v1031 + 8);
              if (v1033)
                (*(void (**)(uint64_t))(*(_QWORD *)v1033 + 24))(v1033);
              v925 = v1032;
              if (!v1032)
                return 0;
            }
          }
          v1278 = v925;
          v1034 = *(_QWORD *)(v6 + 32);
          v1035 = *(_QWORD *)(v1034 + 640);
          v1036 = *(unint64_t **)(v1034 + 648);
          v1037 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8);
          v1038 = *(llvm::MachineFunction **)(v1035 + 32);
          v1311 = (_QWORD *)v6;
          v1039 = *(void **)(v6 + 72);
          v1328[0] = v1039;
          if (v1039)
            llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v1039, 2);
          v1040 = *((_QWORD *)v1038 + 28);
          if (v1040)
            *((_QWORD *)v1038 + 28) = *(_QWORD *)v1040;
          else
            v1040 = sub_1C484358C((uint64_t)v1038 + 128, 72, 3);
          v1330[0] = v1328[0];
          if (v1328[0])
          {
            llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
            v1328[0] = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v1040, v1038, v1037 + 864, (unsigned __int8 **)v1330, 0);
          if (v1330[0])
            llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
          if (v1328[0])
            llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
          v1041 = *(_QWORD *)(v1035 + 40);
          *(_QWORD *)(v1040 + 24) = v1041;
          v1042 = *(_QWORD *)(v1041 + 32);
          v1043 = *(unsigned int *)(v1040 + 40);
          if ((_DWORD)v1043)
          {
            v1109 = *(_QWORD *)(v1040 + 32);
            v1110 = *(_QWORD *)(v1042 + 40);
            v1111 = 32 * v1043;
            do
            {
              if (!*(_BYTE *)v1109)
              {
                v1112 = *(unsigned int *)(v1109 + 4);
                if ((int)v1112 >= 0)
                  v1113 = (uint64_t *)(*(_QWORD *)(v1110 + 272) + 8 * v1112);
                else
                  v1113 = (uint64_t *)(*(_QWORD *)(v1110 + 24) + 16 * (v1112 & 0x7FFFFFFF) + 8);
                v1114 = *v1113;
                if (*v1113)
                {
                  v1115 = *(_QWORD *)(v1114 + 16);
                  *(_QWORD *)(v1114 + 16) = v1109;
                  *(_QWORD *)(v1109 + 16) = v1115;
                  if ((*(_BYTE *)(v1109 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v1109 + 24) = v1114;
                  }
                  else
                  {
                    *(_QWORD *)(v1109 + 24) = 0;
                    v1113 = (uint64_t *)(v1115 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v1109 + 16) = v1109;
                  *(_QWORD *)(v1109 + 24) = 0;
                }
                *v1113 = v1109;
              }
              v1109 += 32;
              v1111 -= 32;
            }
            while (v1111);
          }
          v1044 = *(_QWORD *)(v1042 + 728);
          if (v1044)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v1044 + 24))(v1044, v1040);
          v1045 = *v1036 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v1040 = v1045 | *(_QWORD *)v1040 & 7;
          *(_QWORD *)(v1040 + 8) = v1036;
          *(_QWORD *)(v1045 + 8) = v1040;
          *v1036 = *v1036 & 7 | v1040;
          v1330[1] = 0;
          v1331[0] = 0uLL;
          LODWORD(v1330[0]) = 0x1000000;
          HIDWORD(v1330[0]) = v1278;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1040, v1038, (const llvm::MachineOperand *)v1330);
          v1046 = 0;
          if (v77 == 16)
            v1047 = 1;
          else
            v1047 = 33;
          do
          {
            if (v1291 == v1046)
            {
              v1330[1] = 0;
              v1331[0] = 0uLL;
              LODWORD(v1330[0]) = v924 << 8;
              HIDWORD(v1330[0]) = v1283;
            }
            else if (v1302)
            {
              LODWORD(v1328[0]) = 0;
              v1332.i32[0] = v1273;
              sub_1C6127154((uint64_t)v1311, (int)v1313, v77, v1046, v1332.i32, v1328);
              v1330[1] = 0;
              v1331[0] = 0uLL;
              LODWORD(v1330[0]) = ((uint64_t)v1328[0] & 0xFFF) << 8;
              HIDWORD(v1330[0]) = v1332.i32[0];
            }
            else
            {
              v1330[1] = 0;
              LODWORD(v1330[0]) = 0;
              HIDWORD(v1330[0]) = v883;
              v1331[0] = 0uLL;
            }
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1040, v1038, (const llvm::MachineOperand *)v1330);
            LODWORD(v1330[0]) = 1;
            v1330[1] = 0;
            *(_QWORD *)&v1331[0] = (char *)v1046 + v1047;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1040, v1038, (const llvm::MachineOperand *)v1330);
            v1046 = (llvm::MachineFunction *)((char *)v1046 + 1);
          }
          while (v1313 != v1046);
          if (v1278 != v1298)
            sub_1C4789F18(v1311, v1298, v1278, v1271);
          return 1;
        }
        v888 = 0;
        v1277 = v396 << 8;
        while (1)
        {
          v889 = v1302;
          if (v1291 == v888)
            v889 = 1;
          v890 = *(_QWORD *)(v6 + 32);
          v891 = *(_QWORD *)(v890 + 640);
          v892 = *(unint64_t **)(v890 + 648);
          v893 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8);
          if ((v889 & 1) != 0)
          {
            v894 = *(llvm::MachineFunction **)(v891 + 32);
            v895 = v6;
            v896 = *(void **)(v6 + 72);
            v1328[0] = v896;
            if (v896)
              llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v896, 2);
            v897 = *((_QWORD *)v894 + 28);
            if (v897)
              *((_QWORD *)v894 + 28) = *(_QWORD *)v897;
            else
              v897 = sub_1C484358C((uint64_t)v894 + 128, 72, 3);
            v1330[0] = v1328[0];
            if (v1328[0])
            {
              llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
              v1328[0] = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v897, v894, v893 + 912, (unsigned __int8 **)v1330, 0);
            if (v1330[0])
              llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
            if (v1328[0])
              llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
            v899 = *(_QWORD *)(v891 + 40);
            *(_QWORD *)(v897 + 24) = v899;
            v900 = *(_QWORD *)(v899 + 32);
            v901 = *(unsigned int *)(v897 + 40);
            if ((_DWORD)v901)
            {
              v910 = *(_QWORD *)(v897 + 32);
              v911 = *(_QWORD *)(v900 + 40);
              v912 = 32 * v901;
              do
              {
                if (!*(_BYTE *)v910)
                {
                  v913 = *(unsigned int *)(v910 + 4);
                  if ((int)v913 >= 0)
                    v914 = (uint64_t *)(*(_QWORD *)(v911 + 272) + 8 * v913);
                  else
                    v914 = (uint64_t *)(*(_QWORD *)(v911 + 24) + 16 * (v913 & 0x7FFFFFFF) + 8);
                  v915 = *v914;
                  if (*v914)
                  {
                    v916 = *(_QWORD *)(v915 + 16);
                    *(_QWORD *)(v915 + 16) = v910;
                    *(_QWORD *)(v910 + 16) = v916;
                    if ((*(_BYTE *)(v910 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v910 + 24) = v915;
                    }
                    else
                    {
                      *(_QWORD *)(v910 + 24) = 0;
                      v914 = (uint64_t *)(v916 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v910 + 16) = v910;
                    *(_QWORD *)(v910 + 24) = 0;
                  }
                  *v914 = v910;
                }
                v910 += 32;
                v912 -= 32;
              }
              while (v912);
            }
            v902 = *(_QWORD *)(v900 + 728);
            if (v902)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v902 + 24))(v902, v897);
            v903 = *v892 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v897 = v903 | *(_QWORD *)v897 & 7;
            *(_QWORD *)(v897 + 8) = v892;
            *(_QWORD *)(v903 + 8) = v897;
            *v892 = *v892 & 7 | v897;
            HIDWORD(v1330[1]) = 0;
            v1331[0] = 0uLL;
            LODWORD(v1330[0]) = 0x1000000;
            *(void **)((char *)v1330 + 4) = (void *)(v255 + (_DWORD)v888);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v897, v894, (const llvm::MachineOperand *)v1330);
            if (v1291 != v888)
            {
              LODWORD(v1328[0]) = 0;
              v1332.i32[0] = v256;
              sub_1C6127154(v895, (int)v1313, v77, v888, v1332.i32, v1328);
              v1330[1] = 0;
              v1331[0] = 0uLL;
              LODWORD(v1330[0]) = ((uint64_t)v1328[0] & 0xFFF) << 8;
              HIDWORD(v1330[0]) = v1332.i32[0];
              goto LABEL_1311;
            }
            v1330[1] = 0;
            v1331[0] = 0uLL;
            HIDWORD(v1330[0]) = v1283;
            v904 = v1277;
          }
          else
          {
            v894 = *(llvm::MachineFunction **)(v891 + 32);
            v895 = v6;
            v898 = *(void **)(v6 + 72);
            v1328[0] = v898;
            if (v898)
              llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v898, 2);
            v897 = *((_QWORD *)v894 + 28);
            if (v897)
              *((_QWORD *)v894 + 28) = *(_QWORD *)v897;
            else
              v897 = sub_1C484358C((uint64_t)v894 + 128, 72, 3);
            v1330[0] = v1328[0];
            if (v1328[0])
            {
              llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
              v1328[0] = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v897, v894, v893 + 480, (unsigned __int8 **)v1330, 0);
            if (v1330[0])
              llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
            if (v1328[0])
              llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
            v905 = *(_QWORD *)(v891 + 40);
            *(_QWORD *)(v897 + 24) = v905;
            v906 = *(_QWORD *)(v905 + 32);
            v907 = *(unsigned int *)(v897 + 40);
            if ((_DWORD)v907)
            {
              v917 = *(_QWORD *)(v897 + 32);
              v918 = *(_QWORD *)(v906 + 40);
              v919 = 32 * v907;
              do
              {
                if (!*(_BYTE *)v917)
                {
                  v920 = *(unsigned int *)(v917 + 4);
                  if ((int)v920 >= 0)
                    v921 = (uint64_t *)(*(_QWORD *)(v918 + 272) + 8 * v920);
                  else
                    v921 = (uint64_t *)(*(_QWORD *)(v918 + 24) + 16 * (v920 & 0x7FFFFFFF) + 8);
                  v922 = *v921;
                  if (*v921)
                  {
                    v923 = *(_QWORD *)(v922 + 16);
                    *(_QWORD *)(v922 + 16) = v917;
                    *(_QWORD *)(v917 + 16) = v923;
                    if ((*(_BYTE *)(v917 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v917 + 24) = v922;
                    }
                    else
                    {
                      *(_QWORD *)(v917 + 24) = 0;
                      v921 = (uint64_t *)(v923 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v917 + 16) = v917;
                    *(_QWORD *)(v917 + 24) = 0;
                  }
                  *v921 = v917;
                }
                v917 += 32;
                v919 -= 32;
              }
              while (v919);
            }
            v908 = *(_QWORD *)(v906 + 728);
            if (v908)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v908 + 24))(v908, v897);
            v909 = *v892 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v897 = v909 | *(_QWORD *)v897 & 7;
            *(_QWORD *)(v897 + 8) = v892;
            *(_QWORD *)(v909 + 8) = v897;
            *v892 = *v892 & 7 | v897;
            HIDWORD(v1330[1]) = 0;
            v1331[0] = 0uLL;
            *(void **)((char *)v1330 + 4) = (void *)(v255 + (_DWORD)v888);
            v904 = 0x1000000;
          }
          LODWORD(v1330[0]) = v904;
LABEL_1311:
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v897, v894, (const llvm::MachineOperand *)v1330);
          v888 = (llvm::MachineFunction *)((char *)v888 + 1);
          v3 = 1;
          v6 = v895;
          if (v888 == v1313)
            return v3;
        }
      }
      if (v385 != 66)
        goto LABEL_879;
      v386 = *(_DWORD *)(v251 + 20);
      if ((v386 & 0x40000000) != 0)
        v387 = *(uint64_t ***)(v251 - 8);
      else
        v387 = (uint64_t **)(v251 - 32 * (v386 & 0x7FFFFFF));
      v644 = **v387;
      if ((*(_DWORD *)(v644 + 8) & 0xFE) == 0x12)
        v644 = **(_QWORD **)(v644 + 16);
      if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v644) <= 0x20)
      {
        if ((v386 & 0x40000000) != 0)
          v645 = *(uint64_t **)(v251 - 8);
        else
          v645 = (uint64_t *)(v251 - 32 * (v386 & 0x7FFFFFF));
        v251 = *v645;
        if (*(unsigned __int8 *)(*v645 + 16) <= 0x1Bu)
          v646 = 0;
        else
          v646 = *v645;
      }
      else
      {
LABEL_879:
        v646 = v251;
      }
      v393 = v77 == 8;
      v1302 = v256 != 0;
      if (!v256 || v77 != 8 || !v646)
        goto LABEL_505;
      v833 = *(_QWORD *)(v646 + 8);
      if (!v833)
      {
        v834 = sub_1C5CC1648((uint64_t *)v6, v251);
        if (!v834)
          return 0;
        v395 = v834;
        v1274 = sub_1C6126FBC(v6, v834);
        v1302 = 1;
LABEL_509:
        v397 = *(_QWORD *)(v6 + 48);
        v398 = (_UNKNOWN ***)(*(_QWORD *)(*(_QWORD *)(v397 + 24) + 16 * (v255 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
        v399 = v255;
        if (v398 != &off_1E7F982A8)
        {
          v399 = v255;
          if (v398 != &off_1E7F982F0)
          {
            v399 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*(_QWORD *)(v6 + 48), "", 0);
            *(_QWORD *)(*(_QWORD *)(v397 + 24) + 16 * (v399 & 0x7FFFFFFF)) = &off_1E7F982A8;
            v400 = *(_QWORD *)(v397 + 8);
            if (v400)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v400 + 24))(v400);
              if (!v399)
                return 0;
            }
            else if (!v399)
            {
              return 0;
            }
          }
        }
        v1286 = (unint64_t)v253;
        v1307 = (_QWORD *)v6;
        v1280 = v395;
        v401 = v255;
        if (v1302)
        {
          v1318 = -1;
          v402 = 12407;
        }
        else
        {
          v1083 = (_UNKNOWN ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 24) + 16 * (v255 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
          v1085 = v1083 == &off_1E7F982A8 || v1083 == &off_1E7F982F0;
          v1318 = sub_1C6126ACC(v6, v1085, 0);
          if ((v1286 & 1) == 0)
          {
            v1086 = *(_QWORD *)(v6 + 32);
            v1087 = *(_QWORD *)(v1086 + 640);
            v1088 = *(unint64_t **)(v1086 + 648);
            v1089 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8);
            v1090 = *(llvm::MachineFunction **)(v1087 + 32);
            v1091 = (void *)v1307[9];
            v1328[0] = v1091;
            if (v1091)
              llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v1091, 2);
            v1092 = *((_QWORD *)v1090 + 28);
            if (v1092)
              *((_QWORD *)v1090 + 28) = *(_QWORD *)v1092;
            else
              v1092 = sub_1C484358C((uint64_t)v1090 + 128, 72, 3);
            v1330[0] = v1328[0];
            if (v1328[0])
            {
              llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
              v1328[0] = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v1092, v1090, v1089 + 912, (unsigned __int8 **)v1330, 0);
            if (v1330[0])
              llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
            if (v1328[0])
              llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
            v1169 = *(_QWORD *)(v1087 + 40);
            *(_QWORD *)(v1092 + 24) = v1169;
            v1170 = *(_QWORD *)(v1169 + 32);
            v1171 = *(unsigned int *)(v1092 + 40);
            if ((_DWORD)v1171)
            {
              v1249 = *(_QWORD *)(v1092 + 32);
              v1250 = *(_QWORD *)(v1170 + 40);
              v1251 = 32 * v1171;
              do
              {
                if (!*(_BYTE *)v1249)
                {
                  v1252 = *(unsigned int *)(v1249 + 4);
                  if ((int)v1252 >= 0)
                    v1253 = (uint64_t *)(*(_QWORD *)(v1250 + 272) + 8 * v1252);
                  else
                    v1253 = (uint64_t *)(*(_QWORD *)(v1250 + 24) + 16 * (v1252 & 0x7FFFFFFF) + 8);
                  v1254 = *v1253;
                  if (*v1253)
                  {
                    v1255 = *(_QWORD *)(v1254 + 16);
                    *(_QWORD *)(v1254 + 16) = v1249;
                    *(_QWORD *)(v1249 + 16) = v1255;
                    if ((*(_BYTE *)(v1249 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v1249 + 24) = v1254;
                    }
                    else
                    {
                      *(_QWORD *)(v1249 + 24) = 0;
                      v1253 = (uint64_t *)(v1255 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v1249 + 16) = v1249;
                    *(_QWORD *)(v1249 + 24) = 0;
                  }
                  *v1253 = v1249;
                }
                v1249 += 32;
                v1251 -= 32;
              }
              while (v1251);
            }
            v1172 = *(_QWORD *)(v1170 + 728);
            if (v1172)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v1172 + 24))(v1172, v1092);
            v1173 = *v1088 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1092 = v1173 | *(_QWORD *)v1092 & 7;
            *(_QWORD *)(v1092 + 8) = v1088;
            *(_QWORD *)(v1173 + 8) = v1092;
            *v1088 = *v1088 & 7 | v1092;
            v1330[1] = 0;
            v1331[0] = 0uLL;
            LODWORD(v1330[0]) = 0x1000000;
            HIDWORD(v1330[0]) = v399;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1092, v1090, (const llvm::MachineOperand *)v1330);
            v1330[1] = 0;
            v1331[0] = 0uLL;
            LODWORD(v1330[0]) = v1274 << 8;
            HIDWORD(v1330[0]) = v395;
            v811 = (llvm::MachineInstr *)v1092;
            v812 = v1090;
            goto LABEL_1129;
          }
          v402 = 12435;
        }
        v403 = *(_QWORD *)(v6 + 32);
        v404 = *(_QWORD *)(v403 + 640);
        v405 = *(unint64_t **)(v403 + 648);
        v406 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8);
        v407 = *(llvm::MachineFunction **)(v404 + 32);
        v408 = *(void **)(v6 + 72);
        v1328[0] = v408;
        if (v408)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v408, 2);
        v409 = v406 + 48 * v402;
        v410 = *((_QWORD *)v407 + 28);
        if (v410)
          *((_QWORD *)v407 + 28) = *(_QWORD *)v410;
        else
          v410 = sub_1C484358C((uint64_t)v407 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v410, v407, v409, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v802 = *(_QWORD *)(v404 + 40);
        *(_QWORD *)(v410 + 24) = v802;
        v803 = *(_QWORD *)(v802 + 32);
        v804 = *(unsigned int *)(v410 + 40);
        if ((_DWORD)v804)
        {
          v1093 = *(_QWORD *)(v410 + 32);
          v1094 = *(_QWORD *)(v803 + 40);
          v1095 = 32 * v804;
          do
          {
            if (!*(_BYTE *)v1093)
            {
              v1096 = *(unsigned int *)(v1093 + 4);
              if ((int)v1096 >= 0)
                v1097 = (uint64_t *)(*(_QWORD *)(v1094 + 272) + 8 * v1096);
              else
                v1097 = (uint64_t *)(*(_QWORD *)(v1094 + 24) + 16 * (v1096 & 0x7FFFFFFF) + 8);
              v1098 = *v1097;
              if (*v1097)
              {
                v1099 = *(_QWORD *)(v1098 + 16);
                *(_QWORD *)(v1098 + 16) = v1093;
                *(_QWORD *)(v1093 + 16) = v1099;
                if ((*(_BYTE *)(v1093 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v1093 + 24) = v1098;
                }
                else
                {
                  *(_QWORD *)(v1093 + 24) = 0;
                  v1097 = (uint64_t *)(v1099 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v1093 + 16) = v1093;
                *(_QWORD *)(v1093 + 24) = 0;
              }
              *v1097 = v1093;
            }
            v1093 += 32;
            v1095 -= 32;
          }
          while (v1095);
        }
        v805 = *(_QWORD *)(v803 + 728);
        if (v805)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v805 + 24))(v805, v410);
        v806 = *v405 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v410 = v806 | *(_QWORD *)v410 & 7;
        *(_QWORD *)(v410 + 8) = v405;
        *(_QWORD *)(v806 + 8) = v410;
        *v405 = *v405 & 7 | v410;
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0x1000000;
        HIDWORD(v1330[0]) = v399;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v410, v407, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v410, v407, (const llvm::MachineOperand *)v1330);
        if (v1302)
        {
          v807 = (_UNKNOWN ***)(*(_QWORD *)(*(_QWORD *)(v1307[6] + 24) + 16 * (v256 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
          v808 = v807 == &off_1E7F982F0 || v807 == &off_1E7F982A8;
          v809 = v1286;
          v1330[1] = 0;
          *(_QWORD *)&v1331[0] = 0;
          v810 = (((_DWORD)v1286 << 7) + 256) & 0xFFF00;
          if (v808)
            v810 = 0;
          *((_QWORD *)&v1331[0] + 1) = 0;
          v1330[0] = (void *)__PAIR64__(v256, v810);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v410, v407, (const llvm::MachineOperand *)v1330);
          LODWORD(v1330[0]) = 1;
          v1330[1] = 0;
          *(_QWORD *)&v1331[0] = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v410, v407, (const llvm::MachineOperand *)v1330);
          v1318 = v256;
        }
        else
        {
          LODWORD(v1330[0]) = 1;
          v1330[1] = 0;
          *(_QWORD *)&v1331[0] = 0x100000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v410, v407, (const llvm::MachineOperand *)v1330);
          v809 = v1286;
        }
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = v1274 << 8;
        HIDWORD(v1330[0]) = v1280;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v410, v407, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v410, v407, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = (8 * (v809 & 1)) | 0x100000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v410, v407, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 8;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v410, v407, (const llvm::MachineOperand *)v1330);
        LODWORD(v1330[0]) = 1;
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v410, v407, (const llvm::MachineOperand *)v1330);
        *(_OWORD *)v1330 = 0u;
        v1331[0] = 0u;
        v811 = (llvm::MachineInstr *)v410;
        v812 = v407;
LABEL_1129:
        llvm::MachineInstr::addOperand(v811, v812, (const llvm::MachineOperand *)v1330);
        if (v401 == v399)
          return 1;
        v813 = v1307[4];
        v814 = *(_QWORD *)(v813 + 640);
        v815 = *(unint64_t **)(v813 + 648);
        v816 = *(_QWORD *)(v1307[12] + 8);
        v509 = *(llvm::MachineFunction **)(v814 + 32);
        v817 = (void *)v1307[9];
        v1328[0] = v817;
        if (v817)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v817, 2);
        v818 = v816 + 432;
        v819 = *((_QWORD *)v509 + 28);
        if (v819)
          *((_QWORD *)v509 + 28) = *(_QWORD *)v819;
        else
          v819 = sub_1C484358C((uint64_t)v509 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v819, v509, v818, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v852 = *(_QWORD *)(v814 + 40);
        *(_QWORD *)(v819 + 24) = v852;
        v853 = *(_QWORD *)(v852 + 32);
        v854 = *(unsigned int *)(v819 + 40);
        if ((_DWORD)v854)
        {
          v1116 = *(_QWORD *)(v819 + 32);
          v1117 = *(_QWORD *)(v853 + 40);
          v1118 = 32 * v854;
          do
          {
            if (!*(_BYTE *)v1116)
            {
              v1119 = *(unsigned int *)(v1116 + 4);
              if ((int)v1119 >= 0)
                v1120 = (uint64_t *)(*(_QWORD *)(v1117 + 272) + 8 * v1119);
              else
                v1120 = (uint64_t *)(*(_QWORD *)(v1117 + 24) + 16 * (v1119 & 0x7FFFFFFF) + 8);
              v1121 = *v1120;
              if (*v1120)
              {
                v1122 = *(_QWORD *)(v1121 + 16);
                *(_QWORD *)(v1121 + 16) = v1116;
                *(_QWORD *)(v1116 + 16) = v1122;
                if ((*(_BYTE *)(v1116 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v1116 + 24) = v1121;
                }
                else
                {
                  *(_QWORD *)(v1116 + 24) = 0;
                  v1120 = (uint64_t *)(v1122 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v1116 + 16) = v1116;
                *(_QWORD *)(v1116 + 24) = 0;
              }
              *v1120 = v1116;
            }
            v1116 += 32;
            v1118 -= 32;
          }
          while (v1118);
        }
        v855 = *(_QWORD *)(v853 + 728);
        if (v855)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v855 + 24))(v855, v819);
        v856 = *v815 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v819 = v856 | *(_QWORD *)v819 & 7;
        *(_QWORD *)(v819 + 8) = v815;
        *(_QWORD *)(v856 + 8) = v819;
        *v815 = *v815 & 7 | v819;
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0x1000000;
        HIDWORD(v1330[0]) = v401;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v819, v509, (const llvm::MachineOperand *)v1330);
        v1330[1] = 0;
        v1331[0] = 0uLL;
        LODWORD(v1330[0]) = 0;
        HIDWORD(v1330[0]) = v1318;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v819, v509, (const llvm::MachineOperand *)v1330);
        v1330[1] = 0;
        *(_QWORD *)&v1331[0] = 0;
        HIDWORD(v1330[0]) = v399;
        goto LABEL_1217;
      }
      if (*(_QWORD *)(v833 + 8))
      {
        v1302 = 1;
        v393 = 1;
        goto LABEL_505;
      }
      v835 = v256;
      v1297 = v255;
      v1286 = (unint64_t)v253;
      v836 = *(unsigned __int8 *)(v646 + 16);
      switch(v836)
      {
        case 'E':
          LODWORD(v1305) = 0;
          goto LABEL_1580;
        case 'F':
          v1062 = 1;
          break;
        case 'T':
          v837 = *(_QWORD *)(v646 - 32);
          if (!v837
            || *(_BYTE *)(v837 + 16)
            || *(_QWORD *)(v837 + 24) != *(_QWORD *)(v646 + 72)
            || (*(_BYTE *)(v837 + 33) & 0x20) == 0)
          {
            goto LABEL_1178;
          }
          v1233 = *(_DWORD *)(v837 + 36);
          if (v1233 == 1988)
          {
            v1062 = 2;
          }
          else
          {
            if (v1233 != 1986)
            {
              if (v1233 == 1982)
              {
                v1234 = *(_QWORD *)(v646 - 32 * (*(_DWORD *)(v646 + 20) & 0x7FFFFFF) + 32);
                v1302 = 1;
                if (!v1234 || *(_BYTE *)(v1234 + 16) != 16)
                  goto LABEL_1179;
                if (*(_DWORD *)(v1234 + 32) > 0x40u)
                {
                  v1305 = **(_QWORD **)(v1234 + 24);
                  if (v1305 <= 3)
                  {
LABEL_1580:
                    v1063 = *(_QWORD *)(v6 + 48);
                    v1064 = *(_QWORD *)(v1063 + 24);
                    v1065 = (_UNKNOWN ***)(*(_QWORD *)(v1064 + 16 * (v256 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
                    if (v1065 == &off_1E7F982A8 || v1065 == &off_1E7F982F0)
                    {
                      v1066 = v256;
                    }
                    else
                    {
                      v1066 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*(_QWORD *)(v6 + 48), "", 0);
                      *(_QWORD *)(*(_QWORD *)(v1063 + 24) + 16 * (v1066 & 0x7FFFFFFF)) = &off_1E7F982A8;
                      v1067 = *(_QWORD *)(v1063 + 8);
                      if (v1067)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v1067 + 24))(v1067);
                        if (!v1066)
                          return 0;
                      }
                      else if (!v1066)
                      {
                        return 0;
                      }
                      v1068 = *(_QWORD *)(v6 + 32);
                      v1069 = *(_QWORD *)(v1068 + 640);
                      v1070 = *(unint64_t **)(v1068 + 648);
                      v1071 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8);
                      v1072 = *(llvm::MachineFunction **)(v1069 + 32);
                      v1073 = *(void **)(v6 + 72);
                      v1328[0] = v1073;
                      if (v1073)
                        llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v1073, 2);
                      v1074 = v1071 + 912;
                      v1075 = *((_QWORD *)v1072 + 28);
                      if (v1075)
                        *((_QWORD *)v1072 + 28) = *(_QWORD *)v1075;
                      else
                        v1075 = sub_1C484358C((uint64_t)v1072 + 128, 72, 3);
                      v1330[0] = v1328[0];
                      if (v1328[0])
                      {
                        llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
                        v1328[0] = 0;
                      }
                      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v1075, v1072, v1074, (unsigned __int8 **)v1330, 0);
                      if (v1330[0])
                        llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
                      if (v1328[0])
                        llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
                      v1147 = *(_QWORD *)(v1069 + 40);
                      *(_QWORD *)(v1075 + 24) = v1147;
                      v1148 = *(_QWORD *)(v1147 + 32);
                      v1149 = *(unsigned int *)(v1075 + 40);
                      if ((_DWORD)v1149)
                      {
                        v1242 = *(_QWORD *)(v1075 + 32);
                        v1243 = *(_QWORD *)(v1148 + 40);
                        v1244 = 32 * v1149;
                        do
                        {
                          if (!*(_BYTE *)v1242)
                          {
                            v1245 = *(unsigned int *)(v1242 + 4);
                            if ((int)v1245 >= 0)
                              v1246 = (uint64_t *)(*(_QWORD *)(v1243 + 272) + 8 * v1245);
                            else
                              v1246 = (uint64_t *)(*(_QWORD *)(v1243 + 24) + 16 * (v1245 & 0x7FFFFFFF) + 8);
                            v1247 = *v1246;
                            if (*v1246)
                            {
                              v1248 = *(_QWORD *)(v1247 + 16);
                              *(_QWORD *)(v1247 + 16) = v1242;
                              *(_QWORD *)(v1242 + 16) = v1248;
                              if ((*(_BYTE *)(v1242 + 3) & 1) != 0)
                              {
                                *(_QWORD *)(v1242 + 24) = v1247;
                              }
                              else
                              {
                                *(_QWORD *)(v1242 + 24) = 0;
                                v1246 = (uint64_t *)(v1248 + 24);
                              }
                            }
                            else
                            {
                              *(_QWORD *)(v1242 + 16) = v1242;
                              *(_QWORD *)(v1242 + 24) = 0;
                            }
                            *v1246 = v1242;
                          }
                          v1242 += 32;
                          v1244 -= 32;
                        }
                        while (v1244);
                      }
                      v1150 = *(_QWORD *)(v1148 + 728);
                      if (v1150)
                        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v1150 + 24))(v1150, v1075);
                      v1151 = *v1070 & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v1075 = v1151 | *(_QWORD *)v1075 & 7;
                      *(_QWORD *)(v1075 + 8) = v1070;
                      *(_QWORD *)(v1151 + 8) = v1075;
                      *v1070 = *v1070 & 7 | v1075;
                      v1330[1] = 0;
                      v1331[0] = 0uLL;
                      LODWORD(v1330[0]) = 0x1000000;
                      HIDWORD(v1330[0]) = v1066;
                      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1075, v1072, (const llvm::MachineOperand *)v1330);
                      v1330[1] = 0;
                      v1331[0] = 0uLL;
                      LODWORD(v1330[0]) = (((_DWORD)v1286 << 7) + 256) & 0xFFF00;
                      HIDWORD(v1330[0]) = v835;
                      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1075, v1072, (const llvm::MachineOperand *)v1330);
                      v1063 = *(_QWORD *)(v6 + 48);
                      v1064 = *(_QWORD *)(v1063 + 24);
                    }
                    v1152 = v1297;
                    v1153 = (_UNKNOWN ***)(*(_QWORD *)(v1064 + 16 * (v1297 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
                    if (v1153 != &off_1E7F982A8 && v1153 != &off_1E7F982F0)
                    {
                      v1152 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v1063, "", 0);
                      *(_QWORD *)(*(_QWORD *)(v1063 + 24) + 16 * (v1152 & 0x7FFFFFFF)) = &off_1E7F982A8;
                      v1155 = *(_QWORD *)(v1063 + 8);
                      if (v1155)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v1155 + 24))(v1155);
                        if (!(_DWORD)v1152)
                          return 0;
                      }
                      else if (!(_DWORD)v1152)
                      {
                        return 0;
                      }
                    }
                    if (!sub_1C4793754((uint64_t *)v6, v646, v1152, v1305, v1066, v1286 & 1))
                      return 0;
                    if ((_DWORD)v1152 == v1297)
                      return 1;
                    v1156 = *(_QWORD *)(v6 + 32);
                    v1157 = *(_QWORD *)(v1156 + 640);
                    v1158 = *(unint64_t **)(v1156 + 648);
                    v1159 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8);
                    v509 = *(llvm::MachineFunction **)(v1157 + 32);
                    v1160 = *(void **)(v6 + 72);
                    v1328[0] = v1160;
                    if (v1160)
                      llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v1160, 2);
                    v1161 = v1159 + 432;
                    v819 = *((_QWORD *)v509 + 28);
                    if (v819)
                      *((_QWORD *)v509 + 28) = *(_QWORD *)v819;
                    else
                      v819 = sub_1C484358C((uint64_t)v509 + 128, 72, 3);
                    v1330[0] = v1328[0];
                    if (v1328[0])
                    {
                      llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
                      v1328[0] = 0;
                    }
                    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v819, v509, v1161, (unsigned __int8 **)v1330, 0);
                    if (v1330[0])
                      llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
                    if (v1328[0])
                      llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
                    v1215 = *(_QWORD *)(v1157 + 40);
                    *(_QWORD *)(v819 + 24) = v1215;
                    v1216 = *(_QWORD *)(v1215 + 32);
                    v1217 = *(unsigned int *)(v819 + 40);
                    if ((_DWORD)v1217)
                    {
                      v1256 = *(_QWORD *)(v819 + 32);
                      v1257 = *(_QWORD *)(v1216 + 40);
                      v1258 = 32 * v1217;
                      do
                      {
                        if (!*(_BYTE *)v1256)
                        {
                          v1259 = *(unsigned int *)(v1256 + 4);
                          if ((int)v1259 >= 0)
                            v1260 = (uint64_t *)(*(_QWORD *)(v1257 + 272) + 8 * v1259);
                          else
                            v1260 = (uint64_t *)(*(_QWORD *)(v1257 + 24) + 16 * (v1259 & 0x7FFFFFFF) + 8);
                          v1261 = *v1260;
                          if (*v1260)
                          {
                            v1262 = *(_QWORD *)(v1261 + 16);
                            *(_QWORD *)(v1261 + 16) = v1256;
                            *(_QWORD *)(v1256 + 16) = v1262;
                            if ((*(_BYTE *)(v1256 + 3) & 1) != 0)
                            {
                              *(_QWORD *)(v1256 + 24) = v1261;
                            }
                            else
                            {
                              *(_QWORD *)(v1256 + 24) = 0;
                              v1260 = (uint64_t *)(v1262 + 24);
                            }
                          }
                          else
                          {
                            *(_QWORD *)(v1256 + 16) = v1256;
                            *(_QWORD *)(v1256 + 24) = 0;
                          }
                          *v1260 = v1256;
                        }
                        v1256 += 32;
                        v1258 -= 32;
                      }
                      while (v1258);
                    }
                    v1218 = *(_QWORD *)(v1216 + 728);
                    if (v1218)
                      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v1218 + 24))(v1218, v819);
                    v1219 = *v1158 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v819 = v1219 | *(_QWORD *)v819 & 7;
                    *(_QWORD *)(v819 + 8) = v1158;
                    *(_QWORD *)(v1219 + 8) = v819;
                    *v1158 = *v1158 & 7 | v819;
                    v1330[1] = 0;
                    v1331[0] = 0uLL;
                    LODWORD(v1330[0]) = 0x1000000;
                    HIDWORD(v1330[0]) = v1297;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v819, v509, (const llvm::MachineOperand *)v1330);
                    v1330[1] = 0;
                    v1331[0] = 0uLL;
                    LODWORD(v1330[0]) = 0;
                    HIDWORD(v1330[0]) = v835;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v819, v509, (const llvm::MachineOperand *)v1330);
                    v1330[1] = 0;
                    *(_QWORD *)&v1331[0] = 0;
                    HIDWORD(v1330[0]) = v1152;
LABEL_1217:
                    LODWORD(v1330[0]) = 0;
                    *((_QWORD *)&v1331[0] + 1) = 0;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v819, v509, (const llvm::MachineOperand *)v1330);
                    v3 = 1;
                    LODWORD(v1330[0]) = 1;
                    v1330[1] = 0;
                    *(_QWORD *)&v1331[0] = (v1286 >> 1) + 1;
                    v362 = (llvm::MachineInstr *)v819;
LABEL_1256:
                    v363 = v509;
LABEL_447:
                    llvm::MachineInstr::addOperand(v362, v363, (const llvm::MachineOperand *)v1330);
                    return v3;
                  }
                }
                else
                {
                  v1305 = *(_QWORD *)(v1234 + 24);
                  if (v1305 < 4)
                    goto LABEL_1580;
                }
              }
LABEL_1178:
              v1302 = 1;
LABEL_1179:
              v393 = 1;
              goto LABEL_505;
            }
            v1062 = 3;
          }
          break;
        default:
          goto LABEL_1178;
      }
      LODWORD(v1305) = v1062;
      goto LABEL_1580;
    case 0x5B:
      return sub_1C6127F34(v6, (unsigned __int8 *)v5);
    case 0x5C:
      v90 = (unsigned __int8 *)*(v5 - 4);
      v91 = **(_QWORD **)(*(_QWORD *)v90 + 16);
      v92 = (llvm::Type *)v91;
      if ((*(_DWORD *)(v91 + 8) & 0xFE) == 0x12)
        v92 = **(llvm::Type ***)(v91 + 16);
      v93 = llvm::Type::getPrimitiveSizeInBits(v92);
      v94 = *(_DWORD *)(v91 + 32);
      v95 = sub_1C47A836C(v6, v90);
      if (!v95)
        return 0;
      v96 = v95;
      v97 = sub_1C47A836C(v6, (unsigned __int8 *)v5);
      if (!v97)
        return 0;
      v98 = v97;
      v99 = *(_QWORD **)(v6 + 48);
      v100 = *(_QWORD *)(v99[3] + 16 * (v97 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
      v101 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v99 + 16) + 176))(*(_QWORD *)(*v99 + 16));
      v102 = *(_DWORD *)(*(_QWORD *)(v101 + 264)
                       + 24
                       * (*(unsigned __int16 *)(*(_QWORD *)v100 + 24)
                        + *(_DWORD *)(v101 + 272)
                        * ((*(_QWORD *)(v101 + 248) - *(_QWORD *)(v101 + 240)) >> 3)));
      if (v102 > v94 * v93)
        return 1;
      v103 = 0;
      v104 = v94 * v93 / v102;
      if (v104 <= 1)
        v104 = 1;
      v1314 = v104;
      do
      {
        v105 = *(_QWORD *)(v6 + 32);
        v106 = v6;
        v107 = *(_QWORD *)(v105 + 640);
        v108 = *(unint64_t **)(v105 + 648);
        v109 = *(_QWORD *)(*(_QWORD *)(v106 + 96) + 8);
        v110 = *(llvm::MachineFunction **)(v107 + 32);
        v111 = v106;
        v112 = *(void **)(v106 + 72);
        v1328[0] = v112;
        if (v112)
          llvm::MetadataTracking::track((uint64_t)v1328, (unsigned __int8 *)v112, 2);
        v113 = *((_QWORD *)v110 + 28);
        if (v113)
          *((_QWORD *)v110 + 28) = *(_QWORD *)v113;
        else
          v113 = sub_1C484358C((uint64_t)v110 + 128, 72, 3);
        v1330[0] = v1328[0];
        if (v1328[0])
        {
          llvm::MetadataTracking::retrack((uint64_t)v1328, (unsigned __int8 *)v1328[0], (uint64_t)v1330);
          v1328[0] = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v113, v110, v109 + 912, (unsigned __int8 **)v1330, 0);
        if (v1330[0])
          llvm::MetadataTracking::untrack((uint64_t)v1330, (unsigned __int8 *)v1330[0]);
        if (v1328[0])
          llvm::MetadataTracking::untrack((uint64_t)v1328, (unsigned __int8 *)v1328[0]);
        v114 = *(_QWORD *)(v107 + 40);
        *(_QWORD *)(v113 + 24) = v114;
        v115 = *(_QWORD *)(v114 + 32);
        v116 = *(unsigned int *)(v113 + 40);
        v6 = v111;
        if ((_DWORD)v116)
        {
          v119 = *(_QWORD *)(v113 + 32);
          v120 = *(_QWORD *)(v115 + 40);
          v121 = 32 * v116;
          do
          {
            if (!*(_BYTE *)v119)
            {
              v122 = *(unsigned int *)(v119 + 4);
              if ((int)v122 >= 0)
                v123 = (uint64_t *)(*(_QWORD *)(v120 + 272) + 8 * v122);
              else
                v123 = (uint64_t *)(*(_QWORD *)(v120 + 24) + 16 * (v122 & 0x7FFFFFFF) + 8);
              v124 = *v123;
              if (*v123)
              {
                v125 = *(_QWORD *)(v124 + 16);
                *(_QWORD *)(v124 + 16) = v119;
                *(_QWORD *)(v119 + 16) = v125;
                if ((*(_BYTE *)(v119 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v119 + 24) = v124;
                }
                else
                {
                  *(_QWORD *)(v119 + 24) = 0;
                  v123 = (uint64_t *)(v125 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v119 + 16) = v119;
                *(_QWORD *)(v119 + 24) = 0;
              }
              *v123 = v119;
            }
            v119 += 32;
            v121 -= 32;
          }
          while (v121);
        }
        v117 = *(_QWORD *)(v115 + 728);
        if (v117)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v117 + 24))(v117, v113);
        v118 = *v108 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v113 = v118 | *(_QWORD *)v113 & 7;
        *(_QWORD *)(v113 + 8) = v108;
        *(_QWORD *)(v118 + 8) = v113;
        *v108 = *v108 & 7 | v113;
        HIDWORD(v1330[1]) = 0;
        v1331[0] = 0uLL;
        *(void **)((char *)v1330 + 4) = (void *)(v103 + v98);
        LODWORD(v1330[0]) = 0x1000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v113, v110, (const llvm::MachineOperand *)v1330);
        HIDWORD(v1330[1]) = 0;
        LODWORD(v1330[0]) = 0;
        *(void **)((char *)v1330 + 4) = (void *)(v103 + v96);
        v1331[0] = 0uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v113, v110, (const llvm::MachineOperand *)v1330);
        ++v103;
        v3 = 1;
      }
      while (v103 != v1314);
      return v3;
    case 0x5D:
      v46 = (unsigned __int8 *)*(v5 - 8);
      v47 = *(_QWORD *)v46;
      if (*(_BYTE *)(*(_QWORD *)v46 + 8) != 16 || *((_DWORD *)v5 + 18) != 1)
        return 0;
      v48 = (unsigned __int8 *)*(v5 - 4);
      v49 = v6;
      v50 = *(unsigned int *)v5[8];
      v1330[0] = v1331;
      v1330[1] = (void *)0x1000000000;
      v1328[0] = v1329;
      v1328[1] = (void *)0x1000000000;
      v1306 = v49;
      v3 = sub_1C47A836C(v49, (unsigned __int8 *)v5);
      if (!(_DWORD)v3)
        goto LABEL_652;
      v51 = v46[16] - 13;
      if (v51 > 0xFFFFFFFD)
      {
        v53 = 0;
        v52 = v1306;
      }
      else
      {
        v52 = v1306;
        v53 = sub_1C47A836C(v1306, v46);
        if (!v53)
          goto LABEL_467;
      }
      v364 = sub_1C47A836C(v52, v48);
      if (!v364)
      {
LABEL_467:
        v3 = 0;
        goto LABEL_652;
      }
      if (*(_DWORD *)(v47 + 12))
      {
        v365 = v364;
        v366 = 0;
        while (1)
        {
          v367 = *(_QWORD *)(*(_QWORD *)(v47 + 16) + 8 * v366);
          v1332.i32[0] = 0;
          if (!sub_1C4786904(v1306, v367, v1332.i32))
            break;
          v368 = *(_QWORD **)(v1306 + 48);
          v369 = *(_QWORD *)(v368[3] + 16 * ((v3 + v366) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          v370 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v368 + 16) + 176))(*(_QWORD *)(*v368 + 16));
          if (v1332.i32[0] != *(_DWORD *)(*(_QWORD *)(v370 + 264)
                                         + 24
                                         * (*(unsigned __int16 *)(*(_QWORD *)v369 + 24)
                                          + *(_DWORD *)(v370 + 272)
                                          * ((*(_QWORD *)(v370 + 248) - *(_QWORD *)(v370 + 240)) >> 3))))
            break;
          if (v51 < 0xFFFFFFFE || v50 == v366)
          {
            if (v50 == v366)
              v373 = v365;
            else
              v373 = (v53 + v366);
            v374 = LODWORD(v1330[1]);
            if (LODWORD(v1330[1]) >= (unint64_t)HIDWORD(v1330[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1330, (uint64_t)v1331, LODWORD(v1330[1]) + 1, 8);
              v374 = LODWORD(v1330[1]);
            }
            *((_QWORD *)v1330[0] + v374) = (v3 + v366) | (unint64_t)(v373 << 32);
            v372 = &v1330[1];
          }
          else
          {
            v371 = LODWORD(v1328[1]);
            if (LODWORD(v1328[1]) >= (unint64_t)HIDWORD(v1328[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1328, (uint64_t)v1329, LODWORD(v1328[1]) + 1, 4);
              v371 = LODWORD(v1328[1]);
            }
            *((_DWORD *)v1328[0] + v371) = v3 + v366;
            v372 = &v1328[1];
          }
          ++*(_DWORD *)v372;
          if (++v366 >= (unint64_t)*(unsigned int *)(v47 + 12))
            goto LABEL_519;
        }
        v3 = 0;
      }
      else
      {
LABEL_519:
        v411 = (_QWORD *)v1306;
        if (LODWORD(v1328[1]))
        {
          v412 = (__int32 *)v1328[0];
          v413 = (__int32 *)((char *)v1328[0] + 4 * LODWORD(v1328[1]));
          do
          {
            v414 = *v412;
            v415 = v411[4];
            v416 = *(_QWORD *)(v415 + 640);
            v417 = *(unint64_t **)(v415 + 648);
            v418 = *(_QWORD *)(v411[12] + 8);
            v419 = *(llvm::MachineFunction **)(v416 + 32);
            v420 = (unsigned __int8 *)v411[9];
            v1338.i64[0] = (uint64_t)v420;
            if (v420)
              llvm::MetadataTracking::track((uint64_t)&v1338, v420, 2);
            v421 = *((_QWORD *)v419 + 28);
            if (v421)
              *((_QWORD *)v419 + 28) = *(_QWORD *)v421;
            else
              v421 = sub_1C484358C((uint64_t)v419 + 128, 72, 3);
            v1332.i64[0] = v1338.i64[0];
            if (v1338.i64[0])
            {
              llvm::MetadataTracking::retrack((uint64_t)&v1338, (unsigned __int8 *)v1338.i64[0], (uint64_t)&v1332);
              v1338.i64[0] = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v421, v419, v418 + 480, (unsigned __int8 **)&v1332, 0);
            if (v1332.i64[0])
              llvm::MetadataTracking::untrack((uint64_t)&v1332, (unsigned __int8 *)v1332.i64[0]);
            v411 = (_QWORD *)v1306;
            if (v1338.i64[0])
              llvm::MetadataTracking::untrack((uint64_t)&v1338, (unsigned __int8 *)v1338.i64[0]);
            v422 = *(_QWORD *)(v416 + 40);
            *(_QWORD *)(v421 + 24) = v422;
            v423 = *(_QWORD *)(v422 + 32);
            v424 = *(unsigned int *)(v421 + 40);
            if ((_DWORD)v424)
            {
              v427 = *(_QWORD *)(v421 + 32);
              v428 = *(_QWORD *)(v423 + 40);
              v429 = 32 * v424;
              do
              {
                if (!*(_BYTE *)v427)
                {
                  v430 = *(unsigned int *)(v427 + 4);
                  if ((int)v430 >= 0)
                    v431 = (uint64_t *)(*(_QWORD *)(v428 + 272) + 8 * v430);
                  else
                    v431 = (uint64_t *)(*(_QWORD *)(v428 + 24) + 16 * (v430 & 0x7FFFFFFF) + 8);
                  v432 = *v431;
                  if (*v431)
                  {
                    v433 = *(_QWORD *)(v432 + 16);
                    *(_QWORD *)(v432 + 16) = v427;
                    *(_QWORD *)(v427 + 16) = v433;
                    if ((*(_BYTE *)(v427 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v427 + 24) = v432;
                    }
                    else
                    {
                      *(_QWORD *)(v427 + 24) = 0;
                      v431 = (uint64_t *)(v433 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v427 + 16) = v427;
                    *(_QWORD *)(v427 + 24) = 0;
                  }
                  *v431 = v427;
                }
                v427 += 32;
                v429 -= 32;
              }
              while (v429);
            }
            v425 = *(_QWORD *)(v423 + 728);
            if (v425)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v425 + 24))(v425, v421);
            v426 = *v417 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v421 = v426 | *(_QWORD *)v421 & 7;
            *(_QWORD *)(v421 + 8) = v417;
            *(_QWORD *)(v426 + 8) = v421;
            *v417 = *v417 & 7 | v421;
            v1332.i64[1] = 0;
            v1333 = 0;
            v1334 = 0;
            v1332.i32[0] = 0x1000000;
            v1332.i32[1] = v414;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v421, v419, (const llvm::MachineOperand *)&v1332);
            ++v412;
          }
          while (v412 != v413);
        }
        if (LODWORD(v1330[1]))
        {
          v434 = (__int32 *)v1330[0];
          v1319 = (llvm::MachineFunction *)((char *)v1330[0] + 8 * LODWORD(v1330[1]));
          do
          {
            v435 = *v434;
            v436 = v434[1];
            v437 = v411[4];
            v438 = *(_QWORD *)(v437 + 640);
            v439 = *(unint64_t **)(v437 + 648);
            v440 = *(_QWORD *)(v411[12] + 8);
            v441 = *(llvm::MachineFunction **)(v438 + 32);
            v442 = (unsigned __int8 *)v411[9];
            v1338.i64[0] = (uint64_t)v442;
            if (v442)
              llvm::MetadataTracking::track((uint64_t)&v1338, v442, 2);
            v443 = *((_QWORD *)v441 + 28);
            if (v443)
              *((_QWORD *)v441 + 28) = *(_QWORD *)v443;
            else
              v443 = sub_1C484358C((uint64_t)v441 + 128, 72, 3);
            v1332.i64[0] = v1338.i64[0];
            if (v1338.i64[0])
            {
              llvm::MetadataTracking::retrack((uint64_t)&v1338, (unsigned __int8 *)v1338.i64[0], (uint64_t)&v1332);
              v1338.i64[0] = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v443, v441, v440 + 912, (unsigned __int8 **)&v1332, 0);
            if (v1332.i64[0])
              llvm::MetadataTracking::untrack((uint64_t)&v1332, (unsigned __int8 *)v1332.i64[0]);
            if (v1338.i64[0])
              llvm::MetadataTracking::untrack((uint64_t)&v1338, (unsigned __int8 *)v1338.i64[0]);
            v444 = *(_QWORD *)(v438 + 40);
            *(_QWORD *)(v443 + 24) = v444;
            v445 = *(_QWORD *)(v444 + 32);
            v446 = *(unsigned int *)(v443 + 40);
            v411 = (_QWORD *)v1306;
            if ((_DWORD)v446)
            {
              v449 = *(_QWORD *)(v443 + 32);
              v450 = *(_QWORD *)(v445 + 40);
              v451 = 32 * v446;
              do
              {
                if (!*(_BYTE *)v449)
                {
                  v452 = *(unsigned int *)(v449 + 4);
                  if ((int)v452 >= 0)
                    v453 = (uint64_t *)(*(_QWORD *)(v450 + 272) + 8 * v452);
                  else
                    v453 = (uint64_t *)(*(_QWORD *)(v450 + 24) + 16 * (v452 & 0x7FFFFFFF) + 8);
                  v454 = *v453;
                  if (*v453)
                  {
                    v455 = *(_QWORD *)(v454 + 16);
                    *(_QWORD *)(v454 + 16) = v449;
                    *(_QWORD *)(v449 + 16) = v455;
                    if ((*(_BYTE *)(v449 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v449 + 24) = v454;
                    }
                    else
                    {
                      *(_QWORD *)(v449 + 24) = 0;
                      v453 = (uint64_t *)(v455 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v449 + 16) = v449;
                    *(_QWORD *)(v449 + 24) = 0;
                  }
                  *v453 = v449;
                }
                v449 += 32;
                v451 -= 32;
              }
              while (v451);
            }
            v447 = *(_QWORD *)(v445 + 728);
            if (v447)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v447 + 24))(v447, v443);
            v448 = *v439 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v443 = v448 | *(_QWORD *)v443 & 7;
            *(_QWORD *)(v443 + 8) = v439;
            *(_QWORD *)(v448 + 8) = v443;
            *v439 = *v439 & 7 | v443;
            v1332.i64[1] = 0;
            v1333 = 0;
            v1334 = 0;
            v1332.i32[0] = 0x1000000;
            v1332.i32[1] = v435;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v443, v441, (const llvm::MachineOperand *)&v1332);
            v1332.i64[1] = 0;
            v1332.i32[0] = 0;
            v1332.i32[1] = v436;
            v1333 = 0;
            v1334 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v443, v441, (const llvm::MachineOperand *)&v1332);
            v434 += 2;
          }
          while (v434 != (__int32 *)v1319);
        }
        v3 = 1;
      }
LABEL_652:
      if (v1328[0] != v1329)
        free(v1328[0]);
      if (v1330[0] != v1331)
        free(v1330[0]);
      return v3;
    default:
      return v3;
  }
}

unint64_t sub_1C47A7FD0(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Type *a4)
{
  unint64_t v5;
  unint64_t v6;
  llvm::EVT *v7;
  llvm::EVT *v8;
  llvm::LLVMContext *v9;
  unint64_t EVT;
  uint64_t v11;
  char v13[8];
  uint64_t v14;

  if (a3 && *(_DWORD *)(a3 + 8) == 15)
  {
    LOBYTE(v5) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2, *(_DWORD *)(a3 + 8) >> 8);
    v6 = 0;
  }
  else if (a3 && (*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
  {
    v7 = *(llvm::EVT **)(a3 + 24);
    if (v7 && *((_DWORD *)v7 + 2) == 15)
    {
      v13[0] = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2, *((_DWORD *)v7 + 2) >> 8);
      v14 = 0;
      llvm::EVT::getTypeForEVT((llvm::EVT *)v13, *(llvm::LLVMContext **)a3);
      v7 = v8;
    }
    v9 = *(llvm::LLVMContext **)a3;
    EVT = llvm::EVT::getEVT(v7, 0, a3);
    v5 = sub_1C47AC578(v9, EVT, v11, (llvm::Type *)(*(unsigned int *)(a3 + 32) | ((unint64_t)(*(_BYTE *)(a3 + 8) == 19) << 32)));
    v6 = v5 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    v5 = llvm::EVT::getEVT((llvm::EVT *)a3, a4, a3);
    v6 = v5 & 0xFFFFFFFFFFFFFF00;
  }
  return v6 | v5;
}

_QWORD *sub_1C47A80D0(_QWORD *result)
{
  void *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *result = &unk_1E819E9D0;
  v1 = (void *)result[12];
  if (v1 != (void *)result[11])
  {
    v3 = result;
    free(v1);
    result = v3;
  }
  v2 = (_QWORD *)result[8];
  if (v2 != result + 10)
  {
    v4 = result;
    free(v2);
    return v4;
  }
  return result;
}

llvm::detail::DoubleAPFloat *sub_1C47A813C(llvm::detail::DoubleAPFloat *result, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  char v4;
  int v5;
  _BOOL4 v7;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  llvm::detail::DoubleAPFloat *v20;

  v2 = *a2;
  if ((_UNKNOWN *)*a2 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::DoubleAPFloat(result, (const llvm::detail::DoubleAPFloat *)a2);
  *(_QWORD *)result = v2;
  if ((*(_DWORD *)(v2 + 8) + 64) >= 0x80)
  {
    v19 = a2;
    v20 = result;
    v18 = operator new[]();
    a2 = v19;
    result = v20;
    *((_QWORD *)v20 + 1) = v18;
  }
  v3 = *((_BYTE *)result + 20) & 0xF7 | *((_BYTE *)a2 + 20) & 8;
  *((_BYTE *)result + 20) = v3;
  v4 = *((_BYTE *)a2 + 20);
  v5 = v4 & 7;
  *((_BYTE *)result + 20) = v3 & 0xF8 | v4 & 7;
  *((_DWORD *)result + 4) = *((_DWORD *)a2 + 4);
  v7 = (v4 & 6) != 0 && v5 != 3;
  if (v5 == 1 || v7)
  {
    v9 = (_QWORD *)((char *)result + 8);
    v10 = *(unsigned int *)(*(_QWORD *)result + 8);
    if ((v10 - 64) <= 0xFFFFFF7F)
      v9 = (_QWORD *)*v9;
    v11 = *(_DWORD *)(*a2 + 8) - 64;
    v14 = (uint64_t *)a2[1];
    v12 = a2 + 1;
    v13 = v14;
    if (v11 >= 0xFFFFFF80)
      v15 = v12;
    else
      v15 = v13;
    if (v10 <= 0xFFFFFFBF)
    {
      v16 = (unint64_t)(v10 + 64) >> 6;
      do
      {
        v17 = *v15++;
        *v9++ = v17;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t *sub_1C47A8258(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;

  if ((_UNKNOWN *)*result == &unk_1C866F1C0)
  {
    v2 = result;
    sub_1C4773C74(result + 1);
    return v2;
  }
  if ((*(_DWORD *)(*result + 8) - 64) <= 0xFFFFFF7F)
  {
    v1 = result[1];
    if (v1)
    {
      v2 = result;
      MEMORY[0x1CAA32F9C](v1, 0x1000C8000313F17);
      return v2;
    }
  }
  return result;
}

uint64_t sub_1C47A82D8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t result;
  BOOL v11;
  unsigned int v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_14:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v11 = 0;
        else
          v11 = v7 == -8192;
        if (v11)
          v8 = v6;
        v12 = v5 + v9++;
        v5 = v12 & v4;
        v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v12 & v4));
        v7 = *v6;
        if (*a2 == *v6)
          goto LABEL_14;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_1C47A836C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t result;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  _BOOL4 v15;
  BOOL v16;
  BOOL v17;
  uint64_t *v19;
  uint64_t v20;
  unsigned __int8 *v21;

  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if (*(_QWORD *)a2)
    v6 = *(_DWORD *)(*(_QWORD *)a2 + 8) == 18;
  else
    v6 = 0;
  if (v6)
  {
    v9 = *(_DWORD *)(v4 + 32);
    if ((v9 - 5) >= 0xFFFFFFFD)
    {
      v10 = *(_DWORD *)(*(_QWORD *)(v4 + 24) + 8);
      v11 = v10;
      if (v10 == 2)
        goto LABEL_44;
      v12 = v10 >> 8;
      if (v11 == 13 && v12 == 32)
        goto LABEL_44;
      if (v11 == 13 && v12 == 8)
      {
        if (v9 == 2 || v9 == 4)
          goto LABEL_44;
      }
      else
      {
        v15 = v11 == 13 && v12 == 16;
        if (v11)
          v16 = !v15;
        else
          v16 = 0;
        if (!v16)
          goto LABEL_44;
      }
    }
    return 0;
  }
  if (v5 == 16397)
    goto LABEL_44;
  result = 0;
  v8 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if (v8 <= 0xC)
  {
    if (*(_DWORD *)(*(_QWORD *)a2 + 8))
      v17 = v8 == 2;
    else
      v17 = 1;
    if (v17)
      goto LABEL_44;
  }
  else
  {
    if (v8 == 13)
    {
      if (v5 >> 8 <= 0x20)
      {
LABEL_44:
        v19 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 80);
        v20 = 0;
        v21 = a2;
        if (sub_1C61252B8(v19, &v21, &v20))
          return sub_1C632A44C(a1, (uint64_t)a2);
        else
          return sub_1C6126A04(a1, a2);
      }
      return 0;
    }
    if (v8 == 16 || v8 == 15)
      goto LABEL_44;
  }
  return result;
}

uint64_t sub_1C47A84B0(llvm::DataLayout **a1, uint64_t a2, unsigned __int8 a3)
{
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  llvm::Constant *IntPtrType;
  llvm::Type *v11;
  llvm::Value **NullValue;
  uint64_t v13;
  llvm::DataLayout *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  BOOL v19;
  llvm::LLVMContext **v21;
  unsigned __int8 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int IncompleteVirtualRegister;
  uint64_t v27;
  llvm::DataLayout *v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  llvm::MachineFunction *v32;
  unsigned __int8 *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ExtendedSizeInBits;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  const llvm::APInt *v51;
  llvm::ValueHandleBase *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  char v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64[3];

  v64[2] = *(unsigned __int8 **)MEMORY[0x1E0C80C00];
  v59 = a2;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v6 == 16)
  {
    v7 = (_QWORD *)(a2 + 24);
    v8 = *(_DWORD *)(a2 + 32);
    if (v8 >= 0x41)
    {
      if (v8 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a2 + 24)) > 0x40)
        goto LABEL_15;
      v7 = (_QWORD *)*v7;
    }
    v9 = (*((uint64_t (**)(llvm::DataLayout **, _QWORD, _QWORD, uint64_t, _QWORD))*a1 + 11))(a1, a3, a3, 11, *v7);
    goto LABEL_11;
  }
  if (v6 == 19)
  {
    IntPtrType = (llvm::Constant *)llvm::DataLayout::getIntPtrType(a1[11], **(llvm::LLVMContext ***)a2, 0);
    NullValue = llvm::Constant::getNullValue(IntPtrType, v11);
    v9 = sub_1C5CC1648((uint64_t *)a1, (uint64_t)NullValue);
    goto LABEL_11;
  }
  if (v6 == 59)
  {
    v9 = (*((uint64_t (**)(llvm::DataLayout **, uint64_t))*a1 + 14))(a1, a2);
LABEL_11:
    v13 = v9;
    goto LABEL_12;
  }
  if (a2 && v6 == 17)
  {
    if (llvm::Constant::isNullValue((llvm::Constant *)a2))
      v16 = (*((uint64_t (**)(llvm::DataLayout **, uint64_t))*a1 + 15))(a1, a2);
    else
      v16 = (*((uint64_t (**)(llvm::DataLayout **, _QWORD, _QWORD, uint64_t, uint64_t))*a1 + 12))(a1, a3, a3, 12, a2);
    v13 = v16;
    if ((_DWORD)v16)
    {
LABEL_16:
      *((_DWORD *)sub_1C6128C08((uint64_t *)a1 + 1, &v59) + 2) = v13;
      v14 = a1[6];
      if ((v13 & 0x80000000) != 0)
        v15 = (uint64_t *)(*((_QWORD *)v14 + 3) + 16 * (v13 & 0x7FFFFFFF) + 8);
      else
        v15 = (uint64_t *)(*((_QWORD *)v14 + 34) + 8 * v13);
      v49 = *v15;
      if (!v49)
        goto LABEL_80;
      if ((*(_BYTE *)(v49 + 3) & 1) == 0)
      {
        v49 = *(_QWORD *)(v49 + 24);
        if (!v49)
        {
LABEL_80:
          a1[17] = (llvm::DataLayout *)v49;
          return v13;
        }
        if ((*(_BYTE *)(v49 + 3) & 1) == 0)
        {
          v49 = 0;
          goto LABEL_80;
        }
      }
      v49 = *(_QWORD *)(v49 + 8);
      goto LABEL_80;
    }
    LOBYTE(v60) = (*(uint64_t (**)(llvm::DataLayout *, uint64_t, _QWORD))(*(_QWORD *)a1[13] + 32))(a1[13], *(_QWORD *)(*(_QWORD *)a1[5] + 40) + 272, 0);
    v61 = 0;
    if ((_BYTE)v60)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v60);
    else
      ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v60);
    v50 = ExtendedSizeInBits;
    if ((_DWORD)v48 == 1)
    v58 = 0;
    sub_1C47A8BBC(a2 + 24, (llvm::APInt *)v64, 2, v50, 1, 0, &v58);
    if (v58)
    {
      v57 = v50;
      llvm::APInt::initFromArray((unsigned int *)&v56, (uint64_t *)v64, 2u);
      v52 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)a2, (llvm::LLVMContext *)&v56, v51);
      v53 = sub_1C5CC1648((uint64_t *)a1, (uint64_t)v52);
      if ((_DWORD)v53)
        v13 = (*((uint64_t (**)(llvm::DataLayout **, _QWORD, _QWORD, uint64_t, uint64_t))*a1 + 8))(a1, v60, a3, 202, v53);
      else
        v13 = 0;
      if (v57 >= 0x41 && v56)
        MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
    }
    else
    {
      v13 = 0;
    }
    goto LABEL_12;
  }
  v17 = v6 - 28;
  v19 = v6 < 0x1C && v6 != 5;
  if (a2 && !v19)
  {
    if (v6 <= 0x1B)
      v17 = *(unsigned __int16 *)(a2 + 18);
    if ((sub_1C5CC1CF8(a1, a2, v17) & 1) == 0
      && (*(unsigned __int8 *)(a2 + 16) < 0x1Cu
       || !(*((unsigned int (**)(llvm::DataLayout **, uint64_t))*a1 + 3))(a1, a2)))
    {
      return 0;
    }
    v9 = sub_1C632A44C((uint64_t)a1, a2);
    goto LABEL_11;
  }
  if (v6 - 11 <= 1)
  {
    v21 = *(llvm::LLVMContext ***)a2;
    v22 = sub_1C47A8BD8((unint64_t)a1[13], **(llvm::EVT ***)a2, a3, 0);
    v55 = (*(uint64_t (**)(llvm::DataLayout *, llvm::LLVMContext *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1[13] + 584))(a1[13], *v21, a3, 0, 0);
    if (!v55)
    {
LABEL_13:
      v6 = *(unsigned __int8 *)(a2 + 16);
      goto LABEL_14;
    }
    v23 = 0;
    LODWORD(v13) = 0;
    v54 = v22;
    do
    {
      v24 = (*(uint64_t (**)(llvm::DataLayout *, uint64_t, _QWORD))(*(_QWORD *)a1[13] + 424))(a1[13], v54, 0);
      v25 = (uint64_t)a1[6];
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v25, (unsigned __int8 *)&unk_1C8767743, 0);
      *(_QWORD *)(*(_QWORD *)(v25 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v24 & 0xFFFFFFFFFFFFFFFBLL;
      v27 = *(_QWORD *)(v25 + 8);
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
      if ((_DWORD)v13)
        v13 = v13;
      else
        v13 = IncompleteVirtualRegister;
      v28 = a1[4];
      v29 = *((_QWORD *)v28 + 80);
      v30 = (unint64_t *)*((_QWORD *)v28 + 81);
      v31 = *((_QWORD *)a1[12] + 1);
      v32 = *(llvm::MachineFunction **)(v29 + 32);
      v33 = (unsigned __int8 *)a1[9];
      v64[0] = v33;
      if (v33)
        llvm::MetadataTracking::track((uint64_t)v64, v33, 2);
      v34 = *((_QWORD *)v32 + 28);
      if (v34)
        *((_QWORD *)v32 + 28) = *(_QWORD *)v34;
      else
        v34 = sub_1C484358C((uint64_t)v32 + 128, 72, 3);
      v60 = v64[0];
      if (v64[0])
      {
        llvm::MetadataTracking::retrack((uint64_t)v64, v64[0], (uint64_t)&v60);
        v64[0] = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v34, v32, v31 + 480, &v60, 0);
      if (v60)
        llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
      if (v64[0])
        llvm::MetadataTracking::untrack((uint64_t)v64, v64[0]);
      v35 = *(_QWORD *)(v29 + 40);
      *(_QWORD *)(v34 + 24) = v35;
      v36 = *(_QWORD *)(v35 + 32);
      v37 = *(unsigned int *)(v34 + 40);
      if ((_DWORD)v37)
      {
        v40 = *(_QWORD *)(v34 + 32);
        v41 = *(_QWORD *)(v36 + 40);
        v42 = 32 * v37;
        do
        {
          if (!*(_BYTE *)v40)
          {
            v43 = *(unsigned int *)(v40 + 4);
            if ((int)v43 >= 0)
              v44 = (uint64_t *)(*(_QWORD *)(v41 + 272) + 8 * v43);
            else
              v44 = (uint64_t *)(*(_QWORD *)(v41 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
            v45 = *v44;
            if (*v44)
            {
              v46 = *(_QWORD *)(v45 + 16);
              *(_QWORD *)(v45 + 16) = v40;
              *(_QWORD *)(v40 + 16) = v46;
              if ((*(_BYTE *)(v40 + 3) & 1) != 0)
              {
                *(_QWORD *)(v40 + 24) = v45;
              }
              else
              {
                *(_QWORD *)(v40 + 24) = 0;
                v44 = (uint64_t *)(v46 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v40 + 16) = v40;
              *(_QWORD *)(v40 + 24) = 0;
            }
            *v44 = v40;
          }
          v40 += 32;
          v42 -= 32;
        }
        while (v42);
      }
      v38 = *(_QWORD *)(v36 + 728);
      if (v38)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v38 + 24))(v38, v34);
      v39 = *v30 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v34 = v39 | *(_QWORD *)v34 & 7;
      *(_QWORD *)(v34 + 8) = v30;
      *(_QWORD *)(v39 + 8) = v34;
      *v30 = *v30 & 7 | v34;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      LODWORD(v60) = 0x1000000;
      HIDWORD(v60) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v60);
      ++v23;
    }
    while (v23 != v55);
LABEL_12:
    if ((_DWORD)v13)
      goto LABEL_16;
    goto LABEL_13;
  }
LABEL_14:
  if (v6 > 0x14)
    return 0;
LABEL_15:
  v13 = (*((uint64_t (**)(llvm::DataLayout **, uint64_t))*a1 + 13))(a1, a2);
  if ((_DWORD)v13)
    goto LABEL_16;
  return v13;
}

_QWORD *sub_1C47A8B04(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6128D18(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C47A8BBC(uint64_t a1, llvm::APInt *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  llvm::detail::DoubleAPFloat *v7;
  void *v8;

  v8 = *(void **)(a1 + 8);
  v7 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v8 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::convertToInteger(v7, (uint64_t)a2, a3, a4, a5, a6, (uint64_t)a7);
  else
    return llvm::detail::IEEEFloat::convertToInteger((uint64_t)v7, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1C47A8BD8(unint64_t a1, llvm::EVT *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_BYTE)a3)
    return *(unsigned __int8 *)(a1 + a3 + 1886);
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
  {
    LOBYTE(v9) = 0;
    v10 = 0;
    v8 = 0;
    v7 = 0;
    llvm::TargetLoweringBase::getVectorTypeBreakdown(a1, a2, a3, a4, &v9, &v7, &v8);
    return v8;
  }
  else
  {
    llvm::TargetLoweringBase::getTypeConversion(a1, a2, a3, a4, (uint64_t)&v9);
    return sub_1C47A8BD8(a1, a2, v10, v11);
  }
}

uint64_t sub_1C47A8C74(unsigned __int8 *a1)
{
  return ((uint64_t (*)(uint64_t, _QWORD))((char *)sub_1C47A8C9C + 4 * byte_1C640E90A[*a1 - 2]))(1, 0);
}

uint64_t sub_1C47A8C9C()
{
  return 32;
}

uint64_t sub_1C47A8CA8()
{
  return 64;
}

uint64_t sub_1C47A8CB4()
{
  return 16;
}

uint64_t sub_1C47A8CC0()
{
  return 128;
}

uint64_t sub_1C47A8CCC()
{
  return 8;
}

uint64_t sub_1C47A8CD8()
{
  return 2048;
}

uint64_t sub_1C47A8CE4()
{
  return 80;
}

uint64_t sub_1C47A8CF0()
{
  return 4;
}

void sub_1C47A8DA8()
{
  JUMPOUT(0x1C47A8CD0);
}

void sub_1C47A8DB0()
{
  JUMPOUT(0x1C47A8CB8);
}

void sub_1C47A8DB8()
{
  JUMPOUT(0x1C47A8CA0);
}

void sub_1C47A8DC0()
{
  JUMPOUT(0x1C47A8CACLL);
}

void sub_1C47A8DC8()
{
  JUMPOUT(0x1C47A8CC4);
}

void sub_1C47A8DF4()
{
  JUMPOUT(0x1C47A8CDCLL);
}

uint64_t sub_1C47A8E00()
{
  return 0;
}

void sub_1C47A8E18(uint64_t a1, int a2)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;

  v3 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v3 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::makeSmallestNormalized(v2, a2);
  else
    llvm::detail::IEEEFloat::makeSmallestNormalized((uint64_t *)v2, a2);
}

_QWORD *sub_1C47A8E34(_QWORD *result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  if ((_UNKNOWN *)a2 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::DoubleAPFloat(result, (uint64_t)&unk_1C866F1C0);
  *result = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80)
  {
    v5 = result;
    v3 = operator new[]();
    result = v5;
    v5[1] = v3;
    a2 = *v5;
  }
  *((_BYTE *)result + 20) = *((_BYTE *)result + 20) & 0xF0 | 3;
  v2 = *(_DWORD *)(a2 + 8);
  *((_DWORD *)result + 4) = *(_DWORD *)(a2 + 4) - 1;
  if ((v2 - 64) < 0xFFFFFF80)
  {
    v4 = (_QWORD *)result[1];
    *v4 = 0;
    v6 = result;
    bzero(v4 + 1, 8 * (((v2 + 64) >> 6) - 2) + 8);
    return v6;
  }
  else
  {
    result[1] = 0;
  }
  return result;
}

uint64_t *sub_1C47A8F18(uint64_t a1, int a2)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;

  v3 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v3 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::makeLargest(v2, a2);
  else
    return (uint64_t *)llvm::detail::IEEEFloat::makeLargest(v2, a2);
}

void sub_1C47A8F34(uint64_t a1, int a2)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;

  v3 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v3 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::makeInf(v2);
  else
    llvm::detail::IEEEFloat::makeInf((int **)v2, a2);
}

void sub_1C47A8F50()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C47A8F64()
{
  return 0;
}

uint64_t sub_1C47A8F6C()
{
  return 1;
}

uint64_t sub_1C47A8F74()
{
  return 0;
}

uint64_t sub_1C47A8F7C()
{
  return 16;
}

uint64_t sub_1C47A8F84()
{
  return 16;
}

uint64_t sub_1C47A8F8C(uint64_t a1, unsigned int a2)
{
  return a2 >> 1;
}

uint64_t sub_1C47A8F94()
{
  return 0;
}

uint64_t sub_1C47A8F9C()
{
  return 0;
}

uint64_t sub_1C47A8FA4(uint64_t a1, _DWORD *a2)
{
  *a2 = 4;
  return 0;
}

uint64_t sub_1C47A8FB4()
{
  return 0;
}

uint64_t sub_1C47A8FBC()
{
  return 0;
}

uint64_t sub_1C47A8FC4()
{
  return 0;
}

uint64_t sub_1C47A8FCC(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, __int16 a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  char *v15;
  char *v16;
  char *v17;

  if (a14 == -1 && a4 == -1)
  {
    v17 = (char *)*(&off_1E7F952D8 + (int)a2);
    return *(unsigned int *)v17;
  }
  if (a7 == 1)
  {
    v15 = (char *)&unk_1C640F2F8;
    if (a10)
    {
      v15 = (char *)&unk_1C640F2E8;
      v16 = (char *)&unk_1C640F308;
    }
    else
    {
      v16 = (char *)&unk_1C640F318;
    }
    if (a2 - 1 < 2)
      v16 = v15;
    v17 = &v16[4 * a8];
    return *(unsigned int *)v17;
  }
  if (a7)
    return 0xFFFFFFFFLL;
  else
    return ((uint64_t (*)(void))((char *)&loc_1C47A9034 + 4 * byte_1C640E9BB[a2]))();
}

uint64_t sub_1C47A90DC()
{
  return 0;
}

uint64_t sub_1C47A90E4()
{
  return 0;
}

uint64_t sub_1C47A90EC(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1C47A9100(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1C47A9114(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1C47A9128()
{
  return 423;
}

uint64_t sub_1C47A9130()
{
  return 1;
}

uint64_t sub_1C47A9138()
{
  return 2;
}

uint64_t sub_1C47A9140()
{
  return 0;
}

uint64_t sub_1C47A9148()
{
  return 1;
}

BOOL sub_1C47A9150(uint64_t a1)
{
  return *(_BYTE *)(a1 + 8) == 0;
}

uint64_t sub_1C47A9160()
{
  return 3;
}

uint64_t sub_1C47A9168()
{
  return 1;
}

uint64_t sub_1C47A9170()
{
  return 6;
}

uint64_t sub_1C47A9178()
{
  return 1;
}

uint64_t sub_1C47A9180()
{
  return 0;
}

uint64_t sub_1C47A9188(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
    return *(unsigned __int16 *)(*(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, a2, 1)+ 24);
  else
    return dword_1C640F688[(int)a2 - 2];
}

uint64_t sub_1C47A91C8(uint64_t a1, int a2, int a3)
{
  _UNKNOWN ****v3;

  v3 = &off_1E7F95310[a2 - 1];
  if (!a3)
    v3 = &off_1E7F94EF0[a2 - 1];
  return (uint64_t)*v3;
}

uint64_t sub_1C47A91F8()
{
  return 0x2100000001;
}

uint64_t sub_1C47A9204()
{
  return 0;
}

uint64_t sub_1C47A920C(uint64_t a1, int a2)
{
  return dword_1C640F6C4[a2];
}

uint64_t sub_1C47A921C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;

  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3[1] + 16))(a3[1], *a3);
  v17 = *(_DWORD *)(a2 + 4);
  v18 = *(unsigned __int8 *)(a2 + 61);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, a4);
  v20 = *(_DWORD *)(a2 + 56);
  v51 = *(_DWORD *)(a2 + 80);
  v52 = *(_DWORD *)(a2 + 52);
  v53 = *(unsigned __int8 *)(a2 + 2);
  v21 = *a3;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    v56 = 0;
    result = sub_1C4785D88(v16, v21, "SMPWriteCMode", &v56);
    if ((_DWORD)result)
      v23 = v56;
    else
      v23 = 2;
  }
  else
  {
    v55 = 0;
    result = sub_1C4785D88(v16, v21, "SMPCMode", &v55);
    if ((_DWORD)result)
      v23 = v55;
    else
      v23 = 0;
  }
  v24 = (v17 + v18);
  if (*(_BYTE *)(v16 + 287))
  {
    v25 = *a3;
    v57 = 0;
    result = sub_1C4785D88(v16, v25, "SMPSLCMode", &v57);
    if ((_DWORD)result)
      v26 = v57;
    else
      v26 = 1;
  }
  else
  {
    v26 = 0;
  }
  v27 = *(unsigned int *)(a10 + 8);
  if (v27 >= *(_DWORD *)(a10 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v27 + 1, 8);
    LODWORD(v27) = *(_DWORD *)(a10 + 8);
  }
  v28 = a4 - 5;
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v27) = v24;
  v29 = *(_DWORD *)(a10 + 12);
  v30 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v30;
  if (v30 >= v29)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v30 + 1, 8);
    LODWORD(v30) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v30) = v19;
  v31 = *(_DWORD *)(a10 + 12);
  v32 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v32;
  if (v32 >= v31)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v32 + 1, 8);
    LODWORD(v32) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v32) = v28 < 2;
  v33 = *(_DWORD *)(a10 + 12);
  v34 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v34;
  if (v34 >= v33)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v34 + 1, 8);
    LODWORD(v34) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v34) = a7;
  v35 = *(_DWORD *)(a10 + 12);
  v36 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v36;
  if (v36 >= v35)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v36) = v20 != -1;
  v37 = *(_DWORD *)(a10 + 12);
  v38 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v38;
  if (v38 >= v37)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v38 + 1, 8);
    LODWORD(v38) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v38) = v51 != -1;
  v39 = *(_DWORD *)(a10 + 12);
  v40 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v40;
  if (v40 >= v39)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v40 + 1, 8);
    LODWORD(v40) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v40) = v52 != -1;
  v41 = *(_DWORD *)(a10 + 12);
  v42 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v42;
  if (v42 >= v41)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v42 + 1, 8);
    LODWORD(v42) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v42) = a11 ^ 1u;
  v43 = *(_DWORD *)(a10 + 12);
  v44 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v44;
  if (v44 >= v43)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v44 + 1, 8);
    LODWORD(v44) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v44) = v53 == 0;
  v45 = *(_DWORD *)(a10 + 12);
  v46 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v46;
  if (v46 >= v45)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v46 + 1, 8);
    LODWORD(v46) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v46) = v23;
  v47 = *(_DWORD *)(a10 + 12);
  v48 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v48;
  if (v48 >= v47)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v48 + 1, 8);
    LODWORD(v48) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v48) = v26;
  v49 = *(_DWORD *)(a10 + 12);
  v50 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v50;
  if (v50 >= v49)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v50 + 1, 8);
    LODWORD(v50) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v50) = a5 != -1;
  ++*(_DWORD *)(a10 + 8);
  return result;
}

void *sub_1C47A9658(uint64_t a1, unsigned int a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  __int128 v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void *result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  *a3 = 1445;
  v8 = *(unsigned int *)(a5 + 8);
  if (v8 >= *(_DWORD *)(a5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a5 + 8);
  }
  v9 = xmmword_1C640F7B0;
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v8) = xmmword_1C640F7B0;
  v10 = *(_DWORD *)(a5 + 12);
  v11 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v11;
  v12 = a2 | 0x100000000;
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v11 + 1, 16);
    v9 = xmmword_1C640F7B0;
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  v13 = (uint64_t *)(*(_QWORD *)a5 + 16 * v11);
  *v13 = v12;
  v13[1] = -1;
  v14 = *(_DWORD *)(a5 + 12);
  v15 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v15;
  if (v15 >= v14)
  {
    v29 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v15 + 1, 16);
    v9 = v29;
    LODWORD(v15) = *(_DWORD *)(a5 + 8);
  }
  v16 = (uint64_t *)(*(_QWORD *)a5 + 16 * v15);
  *v16 = v12;
  v16[1] = -1;
  v17 = *(_DWORD *)(a5 + 12);
  v18 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v18;
  if (v18 >= v17)
  {
    v30 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v18 + 1, 16);
    v9 = v30;
    LODWORD(v18) = *(_DWORD *)(a5 + 8);
  }
  v19 = (uint64_t *)(*(_QWORD *)a5 + 16 * v18);
  *v19 = v12;
  v19[1] = -1;
  v20 = *(_DWORD *)(a5 + 12);
  v21 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v21;
  if (v21 >= v20)
  {
    v31 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v21 + 1, 16);
    v9 = v31;
    LODWORD(v21) = *(_DWORD *)(a5 + 8);
  }
  v22 = xmmword_1C640F7C0;
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v21) = xmmword_1C640F7C0;
  v23 = *(_DWORD *)(a5 + 12);
  v24 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v24;
  if (v24 >= v23)
  {
    v32 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v24 + 1, 16);
    v22 = xmmword_1C640F7C0;
    v9 = v32;
    LODWORD(v24) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v24) = v9;
  v25 = *(_DWORD *)(a5 + 12);
  v26 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v26;
  if (v26 >= v25)
  {
    v28 = v22;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v26 + 1, 16);
    v22 = v28;
    LODWORD(v26) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v26) = v22;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E7F982A8;
  return result;
}

void *sub_1C47A9888(uint64_t a1, unsigned int a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  __int128 v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void *result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  *a3 = 1445;
  v8 = *(unsigned int *)(a5 + 8);
  if (v8 >= *(_DWORD *)(a5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a5 + 8);
  }
  v9 = xmmword_1C640F7B0;
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v8) = xmmword_1C640F7B0;
  v10 = *(_DWORD *)(a5 + 12);
  v11 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v11;
  v12 = a2 | 0x100000000;
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v11 + 1, 16);
    v9 = xmmword_1C640F7B0;
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  v13 = (uint64_t *)(*(_QWORD *)a5 + 16 * v11);
  *v13 = v12;
  v13[1] = -1;
  v14 = *(_DWORD *)(a5 + 12);
  v15 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v15;
  if (v15 >= v14)
  {
    v29 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v15 + 1, 16);
    v9 = v29;
    LODWORD(v15) = *(_DWORD *)(a5 + 8);
  }
  v16 = (uint64_t *)(*(_QWORD *)a5 + 16 * v15);
  *v16 = v12;
  v16[1] = -1;
  v17 = *(_DWORD *)(a5 + 12);
  v18 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v18;
  if (v18 >= v17)
  {
    v30 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v18 + 1, 16);
    v9 = v30;
    LODWORD(v18) = *(_DWORD *)(a5 + 8);
  }
  v19 = (uint64_t *)(*(_QWORD *)a5 + 16 * v18);
  *v19 = v12;
  v19[1] = -1;
  v20 = *(_DWORD *)(a5 + 12);
  v21 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v21;
  if (v21 >= v20)
  {
    v31 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v21 + 1, 16);
    v9 = v31;
    LODWORD(v21) = *(_DWORD *)(a5 + 8);
  }
  v22 = xmmword_1C640F7C0;
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v21) = xmmword_1C640F7C0;
  v23 = *(_DWORD *)(a5 + 12);
  v24 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v24;
  if (v24 >= v23)
  {
    v32 = v9;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v24 + 1, 16);
    v22 = xmmword_1C640F7C0;
    v9 = v32;
    LODWORD(v24) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v24) = v9;
  v25 = *(_DWORD *)(a5 + 12);
  v26 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v26;
  if (v26 >= v25)
  {
    v28 = v22;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v26 + 1, 16);
    v22 = v28;
    LODWORD(v26) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v26) = v22;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E7F98468;
  return result;
}

uint64_t sub_1C47A9AB8(uint64_t a1, llvm::GlobalValue *a2, uint64_t a3)
{
  uint64_t NamedMetadata;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::GlobalValue *Section;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  llvm::GlobalValue *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD v41[4];
  __int16 v42;

  v41[0] = "agx.driver_bindings";
  v42 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a3, (uint64_t)v41);
  if (NamedMetadata)
  {
    v6 = NamedMetadata;
    v7 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v7)
    {
      v8 = 0;
      while (1)
      {
        v9 = *(_QWORD *)(**(_QWORD **)(v6 + 48) + 8 * v8);
        v10 = *(_QWORD *)(v9 - 8 * *(unsigned int *)(v9 + 8));
        if (v10)
        {
          if (*(llvm::GlobalValue **)(v10 + 128) == a2)
          {
            Section = llvm::GlobalValue::getSection(a2);
            if (v12 == 11
              && *(_QWORD *)Section == 0x74735F6567616D69
              && *(_QWORD *)((char *)Section + 3) == 0x65746174735F6567)
            {
              v14 = *(unsigned int *)(v9 + 8);
              if (v14 >= 5)
                break;
            }
          }
        }
LABEL_21:
        if (++v8 == v7)
          return 0;
      }
      v15 = -8 * v14;
      while (1)
      {
        v16 = *(_QWORD *)(v9 + v15 + 24);
        if (!*(_BYTE *)v16)
        {
          v17 = *(_QWORD *)(v16 + 8);
          if (*(_QWORD *)v17 == 7)
          {
            v18 = *(_DWORD *)(v17 + 24);
            v19 = *(_DWORD *)(v17 + 27);
            if (v18 == 1601069926 && v19 == 1953063519)
              break;
          }
        }
        v15 += 8;
        if (v15 == -24)
          goto LABEL_21;
      }
      v37 = (unsigned __int8 *)(v9 + v15);
      goto LABEL_50;
    }
    return 0;
  }
  v41[0] = "agx.compute_driver_bindings";
  v42 = 259;
  result = llvm::Module::getNamedMetadata(a3, (uint64_t)v41);
  if (!result)
    return result;
  v22 = ***(_QWORD ***)(result + 48);
  v23 = *(unsigned int *)(v22 + 8);
  if (!(_DWORD)v23)
    return 0;
  v24 = 0;
  while (1)
  {
    v25 = *(unsigned __int8 **)(v22 - 8 * v23 + 8 * v24);
    if (!v25 || *v25 - 4 > 0x1E)
      goto LABEL_46;
    v26 = *(_QWORD *)&v25[-8 * *((unsigned int *)v25 + 2)];
    if (v26)
    {
      if (*(llvm::GlobalValue **)(v26 + 128) == a2)
      {
        v27 = llvm::GlobalValue::getSection(a2);
        if (v28 == 11 && *(_QWORD *)v27 == 0x74735F6567616D69 && *(_QWORD *)((char *)v27 + 3) == 0x65746174735F6567)
        {
          v30 = *((unsigned int *)v25 + 2);
          if (v30 >= 5)
            break;
        }
      }
    }
LABEL_45:
    v23 = *(unsigned int *)(v22 + 8);
LABEL_46:
    if (++v24 >= v23)
      return 0;
  }
  v31 = -8 * v30;
  while (1)
  {
    v32 = *(_QWORD *)&v25[v31 + 24];
    if (!*(_BYTE *)v32)
    {
      v33 = *(_QWORD *)(v32 + 8);
      if (*(_QWORD *)v33 == 7)
      {
        v34 = *(_DWORD *)(v33 + 24);
        v35 = *(_DWORD *)(v33 + 27);
        if (v34 == 1601069926 && v35 == 1953063519)
          break;
      }
    }
    v31 += 8;
    if (v31 == -24)
      goto LABEL_45;
  }
  v37 = &v25[v31];
LABEL_50:
  v38 = *(_QWORD *)(*((_QWORD *)v37 + 4) + 128);
  if (*(_BYTE *)(v38 + 16) == 16)
    v39 = v38;
  else
    v39 = 0;
  v40 = (_QWORD *)(v39 + 24);
  if (*(_DWORD *)(v39 + 32) >= 0x41u)
    v40 = (_QWORD *)*v40;
  return *v40 == 0;
}

uint64_t sub_1C47A9D80()
{
  return 1;
}

uint64_t sub_1C47A9D88()
{
  return 0;
}

uint64_t sub_1C47A9D90()
{
  return 1;
}

uint64_t sub_1C47A9D98()
{
  return 0;
}

uint64_t sub_1C47A9DA0()
{
  return 1;
}

uint64_t sub_1C47A9DA8()
{
  return 395;
}

uint64_t sub_1C47A9DB0()
{
  return 0;
}

uint64_t sub_1C47A9DB8()
{
  return 1;
}

uint64_t sub_1C47A9DC0()
{
  return 1;
}

void sub_1C47A9DC8(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int PrimitiveSizeInBits;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int IncompleteVirtualRegister;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  llvm::MachineFunction *v26;
  unint64_t v27;
  int v28;
  llvm::Type *ElementAsConstant;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  llvm::MachineInstr *v36;
  llvm::MachineFunction *v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  llvm::MachineFunction *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __int16 v48;
  uint64_t v49;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  llvm::Constant **v67;
  unsigned int v68;
  unsigned __int8 *v69;
  llvm::ConstantDataSequential *v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  v72 = a2[16];
  if (v72 <= 0x1B)
    v8 = 0;
  else
    v8 = a2;
  v69 = v8;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v9 = *(_QWORD *)a2;
  else
    v9 = 0;
  if (v9)
    v10 = v9;
  else
    v10 = *(_QWORD *)a2;
  if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
    v10 = **(_QWORD **)(v10 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v10);
  if (v9)
    v12 = *(_DWORD *)(v9 + 32);
  else
    v12 = 1;
  if (v12 >= a4)
    v12 = a4;
  v13 = PrimitiveSizeInBits >> 5;
  if (PrimitiveSizeInBits <= 0x20)
    v13 = 1;
  v14 = v12 * v13;
  if (PrimitiveSizeInBits >= 0x20)
    v15 = 32;
  else
    v15 = PrimitiveSizeInBits;
  v74 = v15;
  v70 = (llvm::ConstantDataSequential *)a2;
  v71 = (*(uint64_t (**)(_QWORD *, unsigned __int8 *))(*a1 + 296))(a1, a2);
  v16 = a1[4];
  v17 = *(_QWORD *)(v16 + 40);
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 16) + 176))(*(_QWORD *)(v16 + 16));
  v73 = v14;
  if ((_DWORD)v14)
  {
    v19 = 0;
    v68 = *(_DWORD *)(*(_QWORD *)(v18 + 264)
                    + 24
                    * (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 24) + 16 * (v71 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                           + 24)
                     + *(_DWORD *)(v18 + 272) * ((*(_QWORD *)(v18 + 248) - *(_QWORD *)(v18 + 240)) >> 3)))
        / v74;
    do
    {
      v20 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 336))(a1, v74);
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v17, "", 0);
      *(_QWORD *)(*(_QWORD *)(v17 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v20 & 0xFFFFFFFFFFFFFFFBLL;
      v22 = *(_QWORD *)(v17 + 8);
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
      if (v72 - 11 > 1)
      {
        if (v72 <= 0x14)
        {
          v28 = *((unsigned __int8 *)v70 + 16);
          if (v28 == 10)
          {
            ElementAsConstant = (llvm::Type *)*((_QWORD *)v70 + 4 * v19 + -4 * (*((_DWORD *)v70 + 5) & 0x7FFFFFF));
          }
          else
          {
            if ((v28 & 0xFE) == 0xE)
            {
              ElementAsConstant = llvm::ConstantDataSequential::getElementAsConstant(v70);
              v28 = *((unsigned __int8 *)v70 + 16);
            }
            else
            {
              ElementAsConstant = 0;
            }
            if (v28 == 13)
            {
              v49 = *(_QWORD *)v70;
              if (*(_DWORD *)(*(_QWORD *)v70 + 8) == 17
                || (*(_DWORD *)(*(_QWORD *)v70 + 8) & 0xFE) == 18)
              {
                v67 = (llvm::Constant **)(v49 + 24);
              }
              else
              {
                v67 = (llvm::Constant **)(*(_QWORD *)(v49 + 16) + 8 * v19);
              }
              ElementAsConstant = (llvm::Type *)llvm::Constant::getNullValue(*v67, ElementAsConstant);
            }
          }
          LODWORD(v77) = 0;
          (*(void (**)(_QWORD *, llvm::Type *, __int128 *, _QWORD))(*a1 + 144))(a1, ElementAsConstant, &v77, 0);
          if ((_DWORD)v74 == 16)
            v51 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 56))(a1, (unsigned __int16)v77);
          else
            v51 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 64))(a1, v77);
          IncompleteVirtualRegister = v51;
          goto LABEL_81;
        }
        if (v69)
        {
          v30 = (unsigned __int8 *)*((_QWORD *)v69 + 6);
          v75 = v30;
          if (v30)
          {
            llvm::MetadataTracking::track((uint64_t)&v75, v30, 2);
            v30 = v75;
          }
        }
        else
        {
          v30 = 0;
          v75 = 0;
        }
        v38 = a1[2];
        v39 = (unint64_t *)a1[3];
        v40 = *(_QWORD *)(a1[6] + 8);
        v41 = *(llvm::MachineFunction **)(v38 + 32);
        v76 = v30;
        if (v30)
          llvm::MetadataTracking::track((uint64_t)&v76, v30, 2);
        v42 = *((_QWORD *)v41 + 28);
        if (v42)
          *((_QWORD *)v41 + 28) = *(_QWORD *)v42;
        else
          v42 = sub_1C484358C((uint64_t)v41 + 128, 72, 3);
        *(_QWORD *)&v77 = v76;
        if (v76)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v76, v76, (uint64_t)&v77);
          v76 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v42, v41, v40 + 912, (unsigned __int8 **)&v77, 0);
        if ((_QWORD)v77)
          llvm::MetadataTracking::untrack((uint64_t)&v77, (unsigned __int8 *)v77);
        if (v76)
          llvm::MetadataTracking::untrack((uint64_t)&v76, v76);
        v43 = *(_QWORD *)(v38 + 40);
        *(_QWORD *)(v42 + 24) = v43;
        v44 = *(_QWORD *)(v43 + 32);
        v45 = *(unsigned int *)(v42 + 40);
        if ((_DWORD)v45)
        {
          v60 = *(_QWORD *)(v42 + 32);
          v61 = *(_QWORD *)(v44 + 40);
          v62 = 32 * v45;
          do
          {
            if (!*(_BYTE *)v60)
            {
              v63 = *(unsigned int *)(v60 + 4);
              if ((int)v63 >= 0)
                v64 = (uint64_t *)(*(_QWORD *)(v61 + 272) + 8 * v63);
              else
                v64 = (uint64_t *)(*(_QWORD *)(v61 + 24) + 16 * (v63 & 0x7FFFFFFF) + 8);
              v65 = *v64;
              if (*v64)
              {
                v66 = *(_QWORD *)(v65 + 16);
                *(_QWORD *)(v65 + 16) = v60;
                *(_QWORD *)(v60 + 16) = v66;
                if ((*(_BYTE *)(v60 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v60 + 24) = v65;
                }
                else
                {
                  *(_QWORD *)(v60 + 24) = 0;
                  v64 = (uint64_t *)(v66 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v60 + 16) = v60;
                *(_QWORD *)(v60 + 24) = 0;
              }
              *v64 = v60;
            }
            v60 += 32;
            v62 -= 32;
          }
          while (v62);
        }
        v46 = *(_QWORD *)(v44 + 728);
        if (v46)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v46 + 24))(v46, v42);
        v47 = *v39 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v42 = v47 | *(_QWORD *)v42 & 7;
        *(_QWORD *)(v42 + 8) = v39;
        *(_QWORD *)(v47 + 8) = v42;
        *v39 = *v39 & 7 | v42;
        *((_QWORD *)&v77 + 1) = 0;
        v78 = 0;
        v79 = 0;
        LODWORD(v77) = 0x1000000;
        DWORD1(v77) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v42, v41, (const llvm::MachineOperand *)&v77);
        if (v68 < 2)
          v48 = 0;
        else
          v48 = (*(uint64_t (**)(_QWORD *, BOOL, _QWORD))(*a1 + 312))(a1, (_DWORD)v74 == 16, v19 % v68);
        HIDWORD(v77) = 0;
        v78 = 0;
        v79 = 0;
        LODWORD(v77) = (v48 & 0xFFF) << 8;
        *(_QWORD *)((char *)&v77 + 4) = v19 / v68 + v71;
        v36 = (llvm::MachineInstr *)v42;
        v37 = v41;
      }
      else
      {
        v23 = a1[2];
        v24 = (unint64_t *)a1[3];
        v75 = 0;
        v76 = 0;
        v25 = *(_QWORD *)(a1[6] + 8);
        v26 = *(llvm::MachineFunction **)(v23 + 32);
        v27 = *((_QWORD *)v26 + 28);
        if (v27)
        {
          *((_QWORD *)v26 + 28) = *(_QWORD *)v27;
          *(_QWORD *)&v77 = 0;
        }
        else
        {
          v27 = sub_1C484358C((uint64_t)v26 + 128, 72, 3);
          *(_QWORD *)&v77 = v76;
          if (v76)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v76, v76, (uint64_t)&v77);
            v76 = 0;
          }
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v27, v26, v25 + 480, (unsigned __int8 **)&v77, 0);
        if ((_QWORD)v77)
          llvm::MetadataTracking::untrack((uint64_t)&v77, (unsigned __int8 *)v77);
        if (v76)
          llvm::MetadataTracking::untrack((uint64_t)&v76, v76);
        v31 = *(_QWORD *)(v23 + 40);
        *(_QWORD *)(v27 + 24) = v31;
        v32 = *(_QWORD *)(v31 + 32);
        v33 = *(unsigned int *)(v27 + 40);
        if ((_DWORD)v33)
        {
          v53 = *(_QWORD *)(v27 + 32);
          v54 = *(_QWORD *)(v32 + 40);
          v55 = 32 * v33;
          do
          {
            if (!*(_BYTE *)v53)
            {
              v56 = *(unsigned int *)(v53 + 4);
              if ((int)v56 >= 0)
                v57 = (uint64_t *)(*(_QWORD *)(v54 + 272) + 8 * v56);
              else
                v57 = (uint64_t *)(*(_QWORD *)(v54 + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
              v58 = *v57;
              if (*v57)
              {
                v59 = *(_QWORD *)(v58 + 16);
                *(_QWORD *)(v58 + 16) = v53;
                *(_QWORD *)(v53 + 16) = v59;
                if ((*(_BYTE *)(v53 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v53 + 24) = v58;
                }
                else
                {
                  *(_QWORD *)(v53 + 24) = 0;
                  v57 = (uint64_t *)(v59 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v53 + 16) = v53;
                *(_QWORD *)(v53 + 24) = 0;
              }
              *v57 = v53;
            }
            v53 += 32;
            v55 -= 32;
          }
          while (v55);
        }
        v34 = *(_QWORD *)(v32 + 728);
        if (v34)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v34 + 24))(v34, v27);
        v35 = *v24 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v27 = v35 | *(_QWORD *)v27 & 7;
        *(_QWORD *)(v27 + 8) = v24;
        *(_QWORD *)(v35 + 8) = v27;
        *v24 = *v24 & 7 | v27;
        *((_QWORD *)&v77 + 1) = 0;
        v78 = 0;
        v79 = 0;
        LODWORD(v77) = 0x1000000;
        DWORD1(v77) = IncompleteVirtualRegister;
        v36 = (llvm::MachineInstr *)v27;
        v37 = v26;
      }
      llvm::MachineInstr::addOperand(v36, v37, (const llvm::MachineOperand *)&v77);
      if (v75)
        llvm::MetadataTracking::untrack((uint64_t)&v75, v75);
LABEL_81:
      v52 = *(unsigned int *)(a3 + 8);
      if (v52 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v52 + 1, 4);
        v52 = *(unsigned int *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v52) = IncompleteVirtualRegister;
      ++*(_DWORD *)(a3 + 8);
      ++v19;
    }
    while (v19 != v73);
  }
}

uint64_t sub_1C47AA4DC(uint64_t a1, uint64_t a2, _DWORD *a3, _BYTE *a4)
{
  int v6;
  _QWORD *v7;
  uint64_t result;
  llvm::detail::DoubleAPFloat *v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;

  v6 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v6 == 16)
  {
    v7 = (_QWORD *)(a2 + 24);
    if (*(_DWORD *)(a2 + 32) >= 0x41u)
      v7 = (_QWORD *)*v7;
    *a3 = *v7;
    if (a4)
      *a4 = 0;
    return 1;
  }
  result = 0;
  if (a2 && v6 == 17)
  {
    v9 = (llvm::detail::DoubleAPFloat *)(a2 + 32);
    v10 = *(void **)(a2 + 32);
    if (v10 == &unk_1C866F1C0)
      v11 = *(_QWORD *)(a2 + 40);
    else
      v11 = a2 + 24;
    if ((*(_BYTE *)(v11 + 28) & 7) != 3)
    {
      if ((*(unsigned __int8 *)(*(_QWORD *)a2 + 8) | 2) != 2)
        return 0;
      if (v10 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v9, (unsigned int *)&v15);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v9, (unsigned int *)&v15);
      v12 = v16;
      v13 = v15;
      v14 = &v15;
      if (v16 >= 0x41)
        v14 = v15;
      *a3 = *v14;
      if (a4)
        *a4 = 1;
      if (v12 >= 0x41 && v13)
        MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
      return 1;
    }
    *a3 = 0;
    result = 1;
    if (a4)
      *a4 = 1;
  }
  return result;
}

uint64_t sub_1C47AA618(uint64_t a1, uint64_t a2, _DWORD *a3, _BYTE *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  llvm::detail::DoubleAPFloat *v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;

  v6 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v6 == 16)
  {
    v7 = *(_DWORD *)(a2 + 32);
    if (v7 > 0x40)
      v8 = **(_QWORD **)(a2 + 24);
    else
      v8 = (uint64_t)(*(_QWORD *)(a2 + 24) << -(char)v7) >> -(char)v7;
    *a3 = v8;
    if (a4)
      *a4 = 0;
    return 1;
  }
  result = 0;
  if (a2 && v6 == 17)
  {
    v10 = (llvm::detail::DoubleAPFloat *)(a2 + 32);
    v11 = *(void **)(a2 + 32);
    if (v11 == &unk_1C866F1C0)
      v12 = *(_QWORD *)(a2 + 40);
    else
      v12 = a2 + 24;
    if ((*(_BYTE *)(v12 + 28) & 7) != 3)
    {
      if ((*(unsigned __int8 *)(*(_QWORD *)a2 + 8) | 2) != 2)
        return 0;
      if (v11 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v10, (unsigned int *)&v16);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v10, (unsigned int *)&v16);
      v13 = v17;
      v14 = v16;
      if (v17 > 0x40)
        v15 = *v16;
      else
        v15 = (uint64_t)((_QWORD)v16 << -(char)v17) >> -(char)v17;
      *a3 = v15;
      if (a4)
        *a4 = 1;
      if (v13 >= 0x41 && v14)
        MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
      return 1;
    }
    *a3 = 0;
    result = 1;
    if (a4)
      *a4 = 1;
  }
  return result;
}

uint64_t sub_1C47AA774(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  _QWORD **v10;
  BOOL v11;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t i;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char v40;
  _QWORD v41[66];

  v10 = (_QWORD **)result;
  v41[65] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 72) != -1)
  {
    if (*(_BYTE *)(a2 + 61))
      v11 = 0;
    else
      v11 = *(_BYTE *)(a2 + 60) == 0;
    if (v11 && *(_DWORD *)(a2 + 48) == -1)
    {
      v13 = *(_DWORD *)(a2 + 4);
      if (!v13)
      {
LABEL_22:
        v20 = 8;
LABEL_23:
        *a5 = v20;
        return result;
      }
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 8) + 224))(*(_QWORD *)(result + 8), a2);
      v13 = result >> 1;
      if (!(result >> 1))
        goto LABEL_22;
    }
    v18 = 0;
    do
    {
      v19 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD))(*v10)[2])(v10, a4, (v18 + *(_DWORD *)(a2 + 72)));
      result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t, uint64_t))(*v10)[10])(v10, v19, a6, 0xFFFFFFFFLL);
      ++v18;
    }
    while (v13 != v18);
    goto LABEL_22;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 168))(*(_QWORD *)(result + 8));
  if (*(_DWORD *)(a2 + 56) == -1)
    v14 = 0;
  else
    v14 = result;
  if (v14 == 1)
  {
    v15 = ((uint64_t (*)(_QWORD **, uint64_t))(*v10)[2])(v10, a4);
    v41[0] = 1;
    for (i = 1; i != 65; ++i)
      LODWORD(v41[i]) = 0x7FFFFFFF;
    result = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD *, _QWORD))(*v10)[27])(v10, v15, v41, 0);
    v17 = result;
    if ((v41[0] & 1) == 0)
      result = MEMORY[0x1CAA32FB4](v41[1], 4);
  }
  else
  {
    v17 = 1;
  }
  v21 = *(_DWORD *)(a2 + 76);
  v22 = *(_DWORD *)(a2 + 68);
  if (v21 != -1 || v22 != -1)
  {
LABEL_29:
    if (v22 == -1)
      v24 = v21;
    else
      v24 = v22;
    v25 = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*v10)[2])(v10, a4, v24);
    if (*(_DWORD *)(a2 + 92) != -1 && (*(unsigned int (**)(_QWORD *))(*v10[1] + 328))(v10[1]))
    {
      LODWORD(v41[0]) = -1;
      v26 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD *, _QWORD))(*v10)[18])(v10, v25, v41, 0);
      if ((v26 & (LODWORD(v41[0]) < 0xFF)) != 0)
        v27 = 7;
      else
        v27 = 6;
      *a5 = v27;
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*v10)[21])(v10, v25);
      goto LABEL_83;
    }
    if ((((uint64_t (*)(_QWORD **, uint64_t))(*v10)[30])(v10, v25) & 1) != 0
      || ((unsigned int (*)(_QWORD **, uint64_t))(*v10)[28])(v10, v25))
    {
      if ((*(unsigned int (**)(_QWORD *))(*v10[1] + 176))(v10[1]))
        goto LABEL_49;
    }
    else if ((((uint64_t (*)(_QWORD **, uint64_t))(*v10)[31])(v10, v25) & 1) == 0
           && !((unsigned int (*)(_QWORD **, uint64_t))(*v10)[29])(v10, v25)
           || (*(unsigned int (**)(_QWORD *))(*v10[1] + 176))(v10[1]) != 2)
    {
LABEL_49:
      llvm::report_fatal_error((llvm *)"Invalid sample LOD operand for architecture", (const char *)1);
    }
    LODWORD(v41[0]) = -1;
    v40 = 0;
    result = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD *, char *))(*v10)[18])(v10, v25, v41, &v40);
    v31 = result ^ 1;
    if (LODWORD(v41[0]))
      v31 = 1;
    v32 = v14 | v31;
    if (v22 == -1)
      v33 = v32;
    else
      v33 = 1;
    if ((v33 & v17) != 1)
      goto LABEL_74;
    if ((_DWORD)result)
    {
      result = sub_1C47AB6D8((uint64_t)v10, LODWORD(v41[0]));
    }
    else
    {
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*v10)[22])(v10, v25);
      if ((_DWORD)result == -1)
      {
LABEL_74:
        if (v33)
        {
          result = ((uint64_t (*)(_QWORD **, uint64_t))(*v10)[21])(v10, v25);
          v36 = result;
          v37 = *(unsigned int *)(a6 + 8);
          if (v37 >= *(_DWORD *)(a6 + 12))
          {
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v37 + 1, 4);
            LODWORD(v37) = *(_DWORD *)(a6 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a6 + 4 * v37) = v36;
          ++*(_DWORD *)(a6 + 8);
          if (v22 == -1)
            v20 = 5;
          else
            v20 = 6;
          goto LABEL_23;
        }
        goto LABEL_79;
      }
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v10[1] + 56))(v10[1], result);
    }
    if ((_DWORD)result != -1)
    {
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*v10)[20])(v10, result);
      v34 = result;
      v35 = *(unsigned int *)(a6 + 8);
      if (v35 >= *(_DWORD *)(a6 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v35 + 1, 4);
        LODWORD(v35) = *(_DWORD *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v35) = v34;
      ++*(_DWORD *)(a6 + 8);
      if (v22 == -1)
        v20 = 1;
      else
        v20 = 2;
      goto LABEL_23;
    }
    goto LABEL_74;
  }
  if (*(_BYTE *)(a2 + 62))
  {
    result = (*(uint64_t (**)(_QWORD *))(*v10[1] + 384))(v10[1]);
    if (((v14 | result ^ 1) & 1) == 0)
    {
      v28 = sub_1C47AB6D8((uint64_t)v10, 0);
      v29 = 2;
LABEL_51:
      *a5 = v29;
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*v10)[20])(v10, v28);
      goto LABEL_83;
    }
  }
  if ((v14 & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 92) == -1
      || (result = (*(uint64_t (**)(_QWORD *))(*v10[1] + 328))(v10[1]), (result & 1) == 0))
    {
LABEL_79:
      *a5 = 0;
      return result;
    }
  }
  if (*(_DWORD *)(a2 + 92) == -1 || !(*(unsigned int (**)(_QWORD *))(*v10[1] + 328))(v10[1]))
  {
    if (!v14)
    {
      v22 = *(_DWORD *)(a2 + 68);
      v21 = *(_DWORD *)(a2 + 76);
      goto LABEL_29;
    }
    if (!v17 || (v30 = sub_1C47AB6D8((uint64_t)v10, 0), (_DWORD)v30 == -1))
    {
      *a5 = 5;
      result = ((uint64_t (*)(_QWORD **, _QWORD))(*v10)[8])(v10, 0);
      goto LABEL_83;
    }
    v28 = v30;
    v29 = 1;
    goto LABEL_51;
  }
  *a5 = 7;
  result = ((uint64_t (*)(_QWORD **, _QWORD))(*v10)[9])(v10, 0);
LABEL_83:
  v38 = result;
  v39 = *(unsigned int *)(a6 + 8);
  if (v39 >= *(_DWORD *)(a6 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v39 + 1, 4);
    LODWORD(v39) = *(_DWORD *)(a6 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a6 + 4 * v39) = v38;
  ++*(_DWORD *)(a6 + 8);
  return result;
}

void *sub_1C47AAD2C(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  void *result;
  int v10;
  uint64_t v11;
  uint64_t (*v13)(_QWORD **, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  _DWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a2 + 64);
  result = (void *)(*(uint64_t (**)(_QWORD *))(*a1[1] + 192))(a1[1]);
  if (v8 == -1)
    v10 = 1;
  else
    v10 = (int)result;
  v11 = *(unsigned int *)(a2 + 80);
  if (v10 != 1 || (_DWORD)v11 != -1)
  {
    v13 = (uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[2];
    if ((_DWORD)v11 == -1 || *(_DWORD *)(a2 + 64) == -1)
    {
      if ((_DWORD)v11 == -1)
        v11 = *(unsigned int *)(a2 + 64);
      v15 = v13(a1, a3, v11);
      result = (void *)((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v15);
    }
    else
    {
      v16 = ((uint64_t (*)(_QWORD **, uint64_t))v13)(a1, a3);
      v17 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD))(*a1)[2])(a1, a3, *(unsigned int *)(a2 + 64));
      v18 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v17);
      v19 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v16);
      v22[0] = v18;
      v22[1] = v19;
      result = (void *)((uint64_t (*)(_QWORD **, uint64_t, _DWORD *, uint64_t))(*a1)[12])(a1, a3, v22, 2);
    }
    v20 = (int)result;
    v21 = *(unsigned int *)(a4 + 8);
    if (v21 >= *(_DWORD *)(a4 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v21 + 1, 4);
      LODWORD(v21) = *(_DWORD *)(a4 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a4 + 4 * v21) = v20;
    ++*(_DWORD *)(a4 + 8);
  }
  return result;
}

uint64_t sub_1C47AAEBC(_QWORD **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  int *v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  BOOL v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD v63[2];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD *))(*a1[1] + 240))(a1[1]);
  if ((_DWORD)result)
  {
    if (a2[12] != -1)
    {
      v18 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[2])(a1, a3);
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v18);
      v19 = result;
      v20 = *(unsigned int *)(a4 + 8);
      if (v20 >= *(_DWORD *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v20 + 1, 4);
        LODWORD(v20) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v20) = v19;
      ++*(_DWORD *)(a4 + 8);
    }
    if (a2[14] != -1)
    {
      v21 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[2])(a1, a3);
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v21);
      v22 = result;
      v23 = *(unsigned int *)(a4 + 8);
      if (v23 >= *(_DWORD *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v23 + 1, 4);
        LODWORD(v23) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v23) = v22;
      ++*(_DWORD *)(a4 + 8);
    }
    if (a2[13] != -1)
    {
      v24 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[2])(a1, a3);
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v24);
      v25 = result;
      v26 = *(unsigned int *)(a4 + 8);
      if (v26 >= *(_DWORD *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v26 + 1, 4);
        LODWORD(v26) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v26) = v25;
      ++*(_DWORD *)(a4 + 8);
    }
    return result;
  }
  if (a6 <= 8 && ((1 << a6) & 0x160) != 0)
  {
    v27 = *(unsigned int *)(a5 + 8);
    if ((_DWORD)v27)
    {
      v28 = *(int **)a5;
      v29 = a4 + 16;
      v30 = *(_DWORD *)(a4 + 8);
      v31 = 4 * v27;
      do
      {
        v32 = *v28;
        if (v30 >= *(_DWORD *)(a4 + 12))
        {
          v59 = v29;
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v29, v30 + 1, 4);
          v29 = v59;
          v30 = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v30) = v32;
        v30 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v30;
        ++v28;
        v31 -= 4;
      }
      while (v31);
    }
    *(_DWORD *)(a5 + 8) = 0;
  }
  v34 = *(unsigned int *)(a8 + 8);
  if ((_DWORD)v34)
  {
    v35 = *(int **)a8;
    v36 = *(_DWORD *)(a4 + 8);
    v37 = 4 * v34;
    do
    {
      v38 = *v35;
      if (v36 >= *(_DWORD *)(a4 + 12))
      {
        v60 = a9;
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v36 + 1, 4);
        a9 = v60;
        v36 = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v36) = v38;
      v36 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v36;
      ++v35;
      v37 -= 4;
    }
    while (v37);
  }
  *(_DWORD *)(a8 + 8) = 0;
  v62 = 0;
  if (a2[20] != -1)
  {
    v61 = a9;
    v39 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[2])(a1, a3);
    result = ((uint64_t (*)(_QWORD **, uint64_t, char *, _QWORD))(*a1)[18])(a1, v39, (char *)&v62 + 4, 0);
    v40 = result;
    if ((result & 1) != 0)
    {
      v41 = 0;
    }
    else
    {
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v39);
      v41 = result;
    }
    *(_DWORD *)(a7 + 8) = 0;
    if (a2[13] == -1)
    {
      v44 = 0;
      v43 = 1;
      goto LABEL_43;
    }
LABEL_34:
    v42 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[2])(a1, a3);
    result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t *, _QWORD))(*a1)[18])(a1, v42, &v62, 0);
    v43 = result;
    if ((result & 1) != 0)
    {
      v44 = 0;
    }
    else
    {
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v42);
      v44 = result;
    }
    if (v40 != v43 && a2[20] != -1)
    {
      v44 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v42);
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v39);
      v41 = result;
      goto LABEL_48;
    }
LABEL_43:
    if (v40)
      v46 = v43 == 0;
    else
      v46 = 1;
    if (!v46)
    {
      result = ((uint64_t (*)(_QWORD **, _QWORD))(*a1)[8])(a1, (HIDWORD(v62) | ((_DWORD)v62 << 16)));
LABEL_54:
      v49 = result;
      v50 = *(unsigned int *)(a4 + 8);
      if (v50 >= *(_DWORD *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v50 + 1, 4);
        LODWORD(v50) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v50) = v49;
      ++*(_DWORD *)(a4 + 8);
      a9 = v61;
      goto LABEL_57;
    }
LABEL_48:
    v47 = a2[20];
    v48 = a2[13];
    if (v47 == -1 || v48 != -1)
    {
      if (v47 != -1 || v48 == -1)
      {
        a9 = v61;
        if (v47 != -1 && v48 != -1)
        {
          v63[0] = v44;
          v63[1] = v41;
          result = ((uint64_t (*)(_QWORD **, uint64_t, _DWORD *, uint64_t))(*a1)[12])(a1, a3, v63, 2);
          v57 = result;
          v58 = *(unsigned int *)(a4 + 8);
          if (v58 >= *(_DWORD *)(a4 + 12))
          {
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v58 + 1, 4);
            LODWORD(v58) = *(_DWORD *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v58) = v57;
          ++*(_DWORD *)(a4 + 8);
          a9 = v61;
        }
        goto LABEL_57;
      }
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[23])(a1, v44);
    }
    else
    {
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[24])(a1, v41);
    }
    goto LABEL_54;
  }
  if (a2[13] != -1)
  {
    v61 = a9;
    v41 = 0;
    v39 = 0;
    v40 = 1;
    goto LABEL_34;
  }
LABEL_57:
  v51 = *(unsigned int *)(a9 + 8);
  if ((_DWORD)v51)
  {
    v52 = *(int **)a9;
    v53 = *(_DWORD *)(a4 + 8);
    v54 = 4 * v51;
    do
    {
      v55 = *v52;
      if (v53 >= *(_DWORD *)(a4 + 12))
      {
        v56 = a9;
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v53 + 1, 4);
        a9 = v56;
        v53 = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v53) = v55;
      v53 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v53;
      ++v52;
      v54 -= 4;
    }
    while (v54);
  }
  *(_DWORD *)(a9 + 8) = 0;
  return result;
}

uint64_t sub_1C47AB4C4(uint64_t a1, _UNKNOWN ***a2, _DWORD *a3)
{
  *a3 = 16;
  if (a2 == &off_1E7F982A8 || a2 == &off_1E7F982F0)
    return 1;
  if (a2 == &off_1E7F987B8)
    return 3;
  *a3 = 32;
  if (a2 == &off_1E7F984F0 || a2 == &off_1E7F98468)
    return 1;
  if (a2 == &off_1E7F98AB8)
    return 2;
  if (a2 == &off_1E7F99028)
    return 3;
  if (a2 == &off_1E7F99598)
    return 4;
  if (a2 == &off_1E7F99B08)
    return 5;
  if (a2 == &off_1E7F9A078)
    return 6;
  if (a2 == &off_1E7F9A5E8)
    return 7;
  if (a2 == &off_1E7F9AB58)
    return 8;
  if (a2 == &off_1E7F9ADC8)
    return 9;
  if (a2 == &off_1E7F9AE90)
    return 10;
  if (a2 == &off_1E7F9AF58)
    return 11;
  if (a2 == &off_1E7F9B020)
    return 12;
  if (a2 == &off_1E7F9B0E8)
    return 13;
  if (a2 == &off_1E7F9B1B0)
    return 14;
  if (a2 == &off_1E7F9B278)
    return 15;
  if (a2 == &off_1E7F9B340)
    return 16;
  if (a2 == &off_1E7F98670)
    return 1;
  if (a2 == &off_1E7F98C40)
    return 2;
  if (a2 == &off_1E7F991B0)
    return 3;
  if (a2 == &off_1E7F99720)
    return 4;
  else
    return 6;
}

uint64_t sub_1C47AB6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(*(_QWORD *)(v2 + 8) + 544) == 1)
    return 0xFFFFFFFFLL;
  v6 = *(_QWORD *)(v2 + 344);
  v7 = a2;
  v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 224))(v6, a2);
  if ((v8 & 0xFF00000000) != 0)
  {
    v9 = v8;
  }
  else
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 376))(v6, 1);
    if ((_DWORD)v10 == -1)
      return 0xFFFFFFFFLL;
    v9 = v10;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 232))(v6, v7, v10);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 328))(v6, a2);
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), (4 * v9));
}

void sub_1C47AB7BC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C47AB7D0()
{
  return 24;
}

uint64_t sub_1C47AB7D8()
{
  return 8;
}

uint64_t sub_1C47AB7E0()
{
  return 1;
}

uint64_t sub_1C47AB7E8()
{
  return 0;
}

uint64_t sub_1C47AB7F0(uint64_t a1, _DWORD *a2)
{
  *a2 = 2;
  return 1;
}

uint64_t sub_1C47AB800(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, char a10, _DWORD *a11)
{
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;

  if (a4 != -1)
    __asm { BR              X15 }
  v11 = (unsigned int *)&unk_1C640F610;
  if (a10)
    v11 = (unsigned int *)&unk_1C640F5F0;
  v12 = (unsigned int *)&unk_1C640F650;
  if (a10)
    v12 = (unsigned int *)&unk_1C640F630;
  v13 = (unsigned int *)&unk_1C640F5D0;
  if (a10)
    v13 = (unsigned int *)&unk_1C640F5B0;
  if ((a2 - 5) >= 2)
    v12 = v13;
  if ((a2 - 1) >= 2)
    v14 = v12;
  else
    v14 = v11;
  return v14[4 * ((*a11 & 0xFFFFFFFE) == 2) + a5 - 1];
}

uint64_t sub_1C47ABE90()
{
  return 1;
}

uint64_t sub_1C47ABE98()
{
  return 13201;
}

uint64_t sub_1C47ABEA0(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1C47ABEB4(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1C47ABEC8()
{
  return 0;
}

uint64_t sub_1C47ABED0()
{
  return 0;
}

uint64_t sub_1C47ABED8()
{
  return 1;
}

uint64_t sub_1C47ABEE0()
{
  return 0;
}

uint64_t sub_1C47ABEE8()
{
  return 0;
}

uint64_t sub_1C47ABEF0()
{
  return 3;
}

uint64_t sub_1C47ABEF8()
{
  return 0;
}

uint64_t sub_1C47ABF00()
{
  return 4;
}

uint64_t sub_1C47ABF08()
{
  return 0;
}

uint64_t sub_1C47ABF10()
{
  return 1;
}

_UNKNOWN ***sub_1C47ABF18(uint64_t a1, int a2, int a3)
{
  return (&off_1E7F95210[2 * (a2 - 1)])[a3];
}

uint64_t sub_1C47ABF30(uint64_t a1, int a2)
{
  return dword_1C640F6E8[a2];
}

uint64_t sub_1C47ABF40(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _BYTE *v16;
  _BOOL8 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;

  v16 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3[1] + 16))(a3[1], *a3);
  if (*(_DWORD *)(a2 + 12) != -1)
  {
    v17 = *(_BYTE *)(a2 + 2) == 0;
    v18 = *(unsigned int *)(a10 + 8);
    if (v18 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v18 + 1, 8);
      LODWORD(v18) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v18) = v17;
    ++*(_DWORD *)(a10 + 8);
  }
  v19 = *(_DWORD *)(a2 + 4);
  if (v19 == 1)
  {
    v20 = *(_DWORD *)(a2 + 56) != -1;
  }
  else if (v19 == 2)
  {
    if (*(_DWORD *)(a2 + 48) != -1 || *(unsigned __int8 *)(a2 + 61) | *(unsigned __int8 *)(a2 + 60))
    {
      v20 = 6;
    }
    else if (*(_DWORD *)(a2 + 52) == -1)
    {
      if (*(_DWORD *)(a2 + 56) == -1)
        v20 = 2;
      else
        v20 = 3;
    }
    else
    {
      v20 = 4;
    }
  }
  else
  {
    v20 = 5;
  }
  v21 = *(unsigned int *)(a10 + 8);
  if (v21 >= *(_DWORD *)(a10 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v21) = v20;
  ++*(_DWORD *)(a10 + 8);
  v22 = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, a4);
  v23 = *(unsigned int *)(a10 + 8);
  if (v23 >= *(_DWORD *)(a10 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v23 + 1, 8);
    LODWORD(v23) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v23) = v22;
  v24 = (*(_DWORD *)(a10 + 8) + 1);
  *(_DWORD *)(a10 + 8) = v24;
  if (*(_DWORD *)(a2 + 12) != -1)
  {
    v25 = *(_DWORD *)(a2 + 64);
    v26 = v25 == -1;
    v27 = 2 * (v25 != -1);
    v28 = 3;
    if (v26)
      v28 = 1;
    if (*(_DWORD *)(a2 + 80) == -1)
      v29 = v27;
    else
      v29 = v28;
    if (v24 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v24 + 1, 8);
      LODWORD(v24) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v24) = v29;
    v24 = (*(_DWORD *)(a10 + 8) + 1);
    *(_DWORD *)(a10 + 8) = v24;
    if (*(_BYTE *)(a2 + 62))
    {
      if (*(_DWORD *)(a2 + 84) == -1)
      {
        v31 = *(_DWORD *)(a10 + 12);
        v30 = 4;
LABEL_37:
        if (v24 >= v31)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v24 + 1, 8);
          LODWORD(v24) = *(_DWORD *)(a10 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a10 + 8 * v24) = v30;
        LODWORD(v24) = *(_DWORD *)(a10 + 8) + 1;
        *(_DWORD *)(a10 + 8) = v24;
        goto LABEL_40;
      }
      if (a5 >= 4)
        v30 = 0xFFFFFFFFLL;
      else
        v30 = a5 + 4;
    }
    else
    {
      v30 = 0;
    }
    v31 = *(_DWORD *)(a10 + 12);
    goto LABEL_37;
  }
LABEL_40:
  if (*(_DWORD *)(a2 + 24) != -1)
  {
    if (v24 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v24 + 1, 8);
      LODWORD(v24) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v24) = a6;
    ++*(_DWORD *)(a10 + 8);
  }
  v32 = *a3;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    v33 = sub_1C61292A4(v16, v32, "ImageWritePersist");
    v34 = *(unsigned int *)(a10 + 8);
    if (v34 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v34 + 1, 8);
      LODWORD(v34) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v34) = v33;
    ++*(_DWORD *)(a10 + 8);
    v35 = *a3;
    v56 = 0;
    if (sub_1C4785D88((int)v16, v35, "ImageWriteTPUCohMode", &v56))
      v36 = v56;
    else
      v36 = 0;
    v37 = *(unsigned int *)(a10 + 8);
    if (v37 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v37 + 1, 8);
      LODWORD(v37) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v37) = v36;
    ++*(_DWORD *)(a10 + 8);
    v38 = *a3;
    v56 = 0;
    if (sub_1C4785D88((int)v16, v38, "ImageWriteMCUCohMode", &v56))
      v39 = v56;
    else
      v39 = 0;
    v40 = *(unsigned int *)(a10 + 8);
    if (v40 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v40 + 1, 8);
      LODWORD(v40) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v40) = v39;
    ++*(_DWORD *)(a10 + 8);
    v41 = *a3;
    v56 = 0;
    result = sub_1C4785D88((int)v16, v41, "ImageWriteSLCCohMode", &v56);
    if ((_DWORD)result)
      v43 = v56;
    else
      v43 = 1;
  }
  else
  {
    v44 = sub_1C61292A4(v16, v32, "ImageReadPersist");
    v45 = *(unsigned int *)(a10 + 8);
    if (v45 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v45 + 1, 8);
      LODWORD(v45) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v45) = v44;
    ++*(_DWORD *)(a10 + 8);
    v46 = *a3;
    v56 = 0;
    if (sub_1C4785D88((int)v16, v46, "ImageReadTPUCohMode", &v56))
      v47 = v56;
    else
      v47 = 0;
    v48 = *(unsigned int *)(a10 + 8);
    if (v48 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v48 + 1, 8);
      LODWORD(v48) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v48) = v47;
    ++*(_DWORD *)(a10 + 8);
    v49 = *a3;
    v56 = 0;
    if (sub_1C4785D88((int)v16, v49, "ImageReadMCUCohMode", &v56))
      v50 = v56;
    else
      v50 = 0;
    v51 = *(unsigned int *)(a10 + 8);
    if (v51 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v51 + 1, 8);
      LODWORD(v51) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v51) = v50;
    ++*(_DWORD *)(a10 + 8);
    v52 = *a3;
    v56 = 0;
    result = sub_1C4785D88((int)v16, v52, "ImageReadSLCCohMode", &v56);
    if ((_DWORD)result)
      v43 = v56;
    else
      v43 = 0;
  }
  v53 = *(unsigned int *)(a10 + 8);
  if (v53 >= *(_DWORD *)(a10 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v53 + 1, 8);
    LODWORD(v53) = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v53) = v43;
  v54 = *(_DWORD *)(a10 + 12);
  v55 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v55;
  if (v55 >= v54)
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a10, a10 + 16, v55 + 1, 8);
    v55 = *(_DWORD *)(a10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a10 + 8 * v55) = 0;
  ++*(_DWORD *)(a10 + 8);
  return result;
}

uint64_t sub_1C47AC548()
{
  return 1;
}

uint64_t sub_1C47AC550()
{
  return 0;
}

uint64_t sub_1C47AC558()
{
  return 1;
}

uint64_t sub_1C47AC560()
{
  return 0;
}

uint64_t sub_1C47AC568()
{
  return 0;
}

uint64_t sub_1C47AC570()
{
  return 0;
}

unint64_t sub_1C47AC578(llvm::LLVMContext *a1, uint64_t a2, uint64_t a3, llvm::Type *a4)
{
  uint64_t ExtendedVectorVT;
  unint64_t v9;

  if ((unint64_t)a4 >> 32 == 1)
    LOBYTE(ExtendedVectorVT) = sub_1C47AC5FC(a2, (int)a4);
  else
    LOBYTE(ExtendedVectorVT) = sub_1C47AC934(a2, (int)a4);
  if ((_BYTE)ExtendedVectorVT)
  {
    v9 = 0;
  }
  else
  {
    ExtendedVectorVT = llvm::EVT::getExtendedVectorVT(a1, a2, a3, a4);
    v9 = ExtendedVectorVT & 0xFFFFFFFFFFFFFF00;
  }
  return v9 | ExtendedVectorVT;
}

unint64_t sub_1C47AC5FC(char a1, int a2)
{
  unint64_t result;

  switch(a1)
  {
    case 2:
      if (a2 > 15)
      {
        switch(a2)
        {
          case 16:
            result = 124;
            break;
          case 32:
            result = 125;
            break;
          case 64:
            result = 126;
            break;
          default:
            goto LABEL_67;
        }
      }
      else
      {
        result = 120;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            result = 121;
            break;
          case 4:
            result = 122;
            break;
          case 8:
            result = 123;
            break;
          default:
            goto LABEL_67;
        }
      }
      break;
    case 3:
      if (a2 > 15)
      {
        switch(a2)
        {
          case 16:
            result = 131;
            break;
          case 32:
            result = 132;
            break;
          case 64:
            result = 133;
            break;
          default:
            goto LABEL_67;
        }
      }
      else
      {
        result = 127;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            result = 128;
            break;
          case 4:
            result = 129;
            break;
          case 8:
            result = 130;
            break;
          default:
            goto LABEL_67;
        }
      }
      break;
    case 4:
      result = 134;
      switch(a2)
      {
        case 1:
          return result;
        case 2:
          return 135;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_67;
        case 4:
          return 136;
        case 8:
          return 137;
        default:
          if (a2 == 16)
            return 138;
          if (a2 != 32)
            goto LABEL_67;
          result = 139;
          break;
      }
      break;
    case 5:
      result = 140;
      switch(a2)
      {
        case 1:
          return result;
        case 2:
          return 141;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_67;
        case 4:
          return 142;
        case 8:
          return 143;
        default:
          if (a2 == 16)
            return 144;
          if (a2 != 32)
            goto LABEL_67;
          result = 145;
          break;
      }
      break;
    case 6:
      result = 146;
      switch(a2)
      {
        case 1:
          return result;
        case 2:
          return 147;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_67;
        case 4:
          return 148;
        case 8:
          return 149;
        default:
          if (a2 == 16)
            return 150;
          if (a2 != 32)
            goto LABEL_67;
          result = 151;
          break;
      }
      break;
    case 8:
      if ((a2 - 1) >= 8)
        goto LABEL_67;
      result = 0xA1000000A0009F9ELL >> (8 * (a2 - 1));
      break;
    case 9:
      result = 152;
      switch(a2)
      {
        case 1:
          return result;
        case 2:
          return 153;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_67;
        case 4:
          return 154;
        case 8:
          return 155;
        default:
          if (a2 == 16)
            return 156;
          if (a2 != 32)
            goto LABEL_67;
          result = 157;
          break;
      }
      break;
    case 10:
      result = 162;
      switch(a2)
      {
        case 1:
          return result;
        case 2:
          result = 163;
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_67;
        case 4:
          result = 164;
          break;
        case 8:
          result = 165;
          break;
        default:
          if (a2 != 16)
            goto LABEL_67;
          result = 166;
          break;
      }
      break;
    case 11:
      if ((a2 - 1) >= 8)
        goto LABEL_67;
      result = 0xAA000000A900A8A7 >> (8 * (a2 - 1));
      break;
    default:
LABEL_67:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1C47AC934(char a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 2:
      if (a2 > 15)
      {
        if (a2 <= 63)
        {
          if (a2 == 16)
          {
            result = 19;
          }
          else
          {
            if (a2 != 32)
              goto LABEL_178;
            result = 20;
          }
        }
        else if (a2 > 255)
        {
          switch(a2)
          {
            case 256:
              result = 23;
              break;
            case 512:
              result = 24;
              break;
            case 1024:
              result = 25;
              break;
            default:
              goto LABEL_178;
          }
        }
        else if (a2 == 64)
        {
          result = 21;
        }
        else
        {
          if (a2 != 128)
            goto LABEL_178;
          result = 22;
        }
      }
      else
      {
        result = 15;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            result = 16;
            break;
          case 4:
            result = 17;
            break;
          case 8:
            result = 18;
            break;
          default:
            goto LABEL_178;
        }
      }
      break;
    case 3:
      if (a2 > 15)
      {
        if (a2 > 127)
        {
          if (a2 <= 255)
          {
            if (a2 != 128)
              goto LABEL_178;
            result = 33;
          }
          else
          {
            switch(a2)
            {
              case 256:
                result = 34;
                break;
              case 512:
                result = 35;
                break;
              case 1024:
                result = 36;
                break;
              default:
                goto LABEL_178;
            }
          }
        }
        else
        {
          switch(a2)
          {
            case 16:
              result = 30;
              break;
            case 32:
              result = 31;
              break;
            case 64:
              result = 32;
              break;
            default:
              goto LABEL_178;
          }
        }
      }
      else
      {
        result = 26;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            result = 27;
            break;
          case 4:
            result = 28;
            break;
          case 8:
            result = 29;
            break;
          default:
            goto LABEL_178;
        }
      }
      break;
    case 4:
      if (a2 == 2)
      {
        result = 38;
      }
      else if (a2 > 63)
      {
        if (a2 <= 127)
        {
          if (a2 != 64)
            goto LABEL_178;
          result = 44;
        }
        else
        {
          switch(a2)
          {
            case 128:
              result = 45;
              break;
            case 256:
              result = 46;
              break;
            case 512:
              result = 47;
              break;
            default:
              goto LABEL_178;
          }
        }
      }
      else
      {
        result = 37;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
          case 5:
          case 6:
          case 7:
            goto LABEL_178;
          case 3:
            return 39;
          case 4:
            return 40;
          case 8:
            return 41;
          default:
            if (a2 == 16)
              return 42;
            if (a2 != 32)
              goto LABEL_178;
            result = 43;
            break;
        }
      }
      break;
    case 5:
      if (a2 > 63)
      {
        if (a2 > 127)
        {
          if (a2 > 511)
          {
            switch(a2)
            {
              case 512:
                result = 61;
                break;
              case 1024:
                result = 62;
                break;
              case 2048:
                result = 63;
                break;
              default:
                goto LABEL_178;
            }
          }
          else if (a2 == 128)
          {
            result = 59;
          }
          else
          {
            if (a2 != 256)
              goto LABEL_178;
            result = 60;
          }
        }
        else
        {
          if (a2 != 64)
            goto LABEL_178;
          result = 58;
        }
      }
      else
      {
        result = 48;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            result = 49;
            break;
          case 3:
            result = 50;
            break;
          case 4:
            result = 51;
            break;
          case 5:
            result = 52;
            break;
          case 6:
            result = 53;
            break;
          case 7:
            result = 54;
            break;
          case 8:
            result = 55;
            break;
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
            goto LABEL_178;
          case 16:
            result = 56;
            break;
          default:
            if (a2 != 32)
              goto LABEL_178;
            result = 57;
            break;
        }
      }
      break;
    case 6:
      if (a2 > 15)
      {
        if (a2 > 63)
        {
          switch(a2)
          {
            case 64:
              result = 71;
              break;
            case 128:
              result = 72;
              break;
            case 256:
              result = 73;
              break;
            default:
              goto LABEL_178;
          }
        }
        else if (a2 == 16)
        {
          result = 69;
        }
        else
        {
          if (a2 != 32)
            goto LABEL_178;
          result = 70;
        }
      }
      else
      {
        result = 64;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            result = 65;
            break;
          case 3:
            result = 66;
            break;
          case 4:
            result = 67;
            break;
          case 8:
            result = 68;
            break;
          default:
            goto LABEL_178;
        }
      }
      break;
    case 7:
      if (a2 != 1)
        goto LABEL_178;
      result = 74;
      break;
    case 8:
      if (a2 > 15)
      {
        if (a2 <= 31)
        {
          if (a2 != 16)
            goto LABEL_178;
          result = 90;
        }
        else
        {
          switch(a2)
          {
            case 32:
              result = 91;
              break;
            case 64:
              result = 92;
              break;
            case 128:
              result = 93;
              break;
            default:
              goto LABEL_178;
          }
        }
      }
      else
      {
        result = 86;
        switch(a2)
        {
          case 2:
            return result;
          case 3:
            result = 87;
            break;
          case 4:
            result = 88;
            break;
          case 8:
            result = 89;
            break;
          default:
            goto LABEL_178;
        }
      }
      break;
    case 9:
      if (a2 > 15)
      {
        if (a2 > 63)
        {
          if (a2 <= 127)
          {
            if (a2 != 64)
              goto LABEL_178;
            result = 82;
          }
          else
          {
            switch(a2)
            {
              case 128:
                result = 83;
                break;
              case 256:
                result = 84;
                break;
              case 512:
                result = 85;
                break;
              default:
                goto LABEL_178;
            }
          }
        }
        else if (a2 == 16)
        {
          result = 80;
        }
        else
        {
          if (a2 != 32)
            goto LABEL_178;
          result = 81;
        }
      }
      else
      {
        result = 75;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            result = 76;
            break;
          case 3:
            result = 77;
            break;
          case 4:
            result = 78;
            break;
          case 8:
            result = 79;
            break;
          default:
            goto LABEL_178;
        }
      }
      break;
    case 10:
      if (a2 == 8)
      {
        result = 101;
      }
      else if (a2 > 63)
      {
        if (a2 > 127)
        {
          if (a2 > 511)
          {
            switch(a2)
            {
              case 512:
                result = 107;
                break;
              case 1024:
                result = 108;
                break;
              case 2048:
                result = 109;
                break;
              default:
                goto LABEL_178;
            }
          }
          else if (a2 == 128)
          {
            result = 105;
          }
          else
          {
            if (a2 != 256)
              goto LABEL_178;
            result = 106;
          }
        }
        else
        {
          if (a2 != 64)
            goto LABEL_178;
          result = 104;
        }
      }
      else
      {
        result = 94;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            result = 95;
            break;
          case 3:
            result = 96;
            break;
          case 4:
            result = 97;
            break;
          case 5:
            result = 98;
            break;
          case 6:
            result = 99;
            break;
          case 7:
            result = 100;
            break;
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
            goto LABEL_178;
          case 16:
            result = 102;
            break;
          default:
            if (a2 != 32)
              goto LABEL_178;
            result = 103;
            break;
        }
      }
      break;
    case 11:
      if (a2 > 15)
      {
        if (a2 > 63)
        {
          switch(a2)
          {
            case 64:
              result = 117;
              break;
            case 128:
              result = 118;
              break;
            case 256:
              result = 119;
              break;
            default:
              goto LABEL_178;
          }
        }
        else if (a2 == 16)
        {
          result = 115;
        }
        else
        {
          if (a2 != 32)
            goto LABEL_178;
          result = 116;
        }
      }
      else
      {
        result = 110;
        switch(a2)
        {
          case 1:
            return result;
          case 2:
            result = 111;
            break;
          case 3:
            result = 112;
            break;
          case 4:
            result = 113;
            break;
          case 8:
            result = 114;
            break;
          default:
            goto LABEL_178;
        }
      }
      break;
    default:
LABEL_178:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1C47AD050(uint64_t a1, char a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *GeneralCategory;
  uint64_t v7;
  uint64_t *v9;

  *(_QWORD *)a1 = &unk_1E819E9D0;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) = a2 & 7 | (32 * (a3 & 3)) | *(_WORD *)(a1 + 10) & 0x8000;
  v4 = a1 + 80;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v5 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v7 = *(unsigned int *)(a1 + 72);
  if (v7 >= *(_DWORD *)(a1 + 76))
  {
    v9 = GeneralCategory;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v4, v7 + 1, 8);
    GeneralCategory = v9;
    LODWORD(v7) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v7) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  return a1;
}

__n128 sub_1C47AD138(_WORD *a1, __n128 *a2, int **a3)
{
  __n128 result;
  int *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7EAF50, "max-agx1-fast-isel", 0x12uLL);
  word_1ED7EAF5A = (32 * (*a1 & 3)) | word_1ED7EAF5A & 0xFF9F;
  result = *a2;
  xmmword_1ED7EAF70 = (__int128)*a2;
  v7 = *a3;
  dword_1ED7EAFD0 = **a3;
  byte_1ED7EAFE4 = 1;
  dword_1ED7EAFE0 = *v7;
  return result;
}

uint64_t sub_1C47AD1C0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
        v7 = *v6;
        if (*a2 == *v6)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a3 = v6;
  return result;
}

_QWORD *sub_1C47AD254(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C47AD304((uint64_t)a1, v7);
  v9 = 0;
  sub_1C47AD1C0((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_1C47AD304(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C47AD3BC(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C47AD3BC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    v6 = 0;
    v7 = v3 - 1;
    do
    {
      v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        v10 = (_QWORD *)(*(_QWORD *)result + 16 * v9);
        v11 = *v10;
        if (v8 != *v10)
        {
          v12 = 0;
          v13 = 1;
          while (v11 != -4096)
          {
            if (v12)
              v14 = 0;
            else
              v14 = v11 == -8192;
            if (v14)
              v12 = v10;
            v15 = v9 + v13++;
            v9 = v15 & v7;
            v10 = (_QWORD *)(*(_QWORD *)result + 16 * (v15 & v7));
            v11 = *v10;
            if (v8 == *v10)
              goto LABEL_16;
          }
          if (v12)
            v10 = v12;
        }
LABEL_16:
        *v10 = v8;
        v10[1] = a2[1];
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_1C47AD490()
{
  int v1;
  int *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Limit the AGX1 \"fast\" instruction selector";
  v3.n128_u64[1] = 42;
  v1 = -1;
  v2 = &v1;
  sub_1C612939C(&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7EAF50, &dword_1C475E000);
}

uint64_t sub_1C47AD4FC(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  llvm *v14;

  v2 = *(_DWORD *)(a2 + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = *(uint64_t **)(a2 - 8);
  else
    v3 = (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  v4 = *v3;
  v5 = *(unsigned __int8 *)(*v3 + 16);
  if (*v3)
    v6 = v5 >= 0x1C;
  else
    v6 = 0;
  if (!v6 || (v7 = *(_QWORD *)(v4 + 40), v7 == *(_QWORD *)(a2 + 40)))
  {
    if (v5 == 73)
    {
      v8 = *(_DWORD *)(v4 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(uint64_t **)(v4 - 8);
      else
        v9 = (uint64_t *)(v4 - 32 * (v8 & 0x7FFFFFF));
      v7 = *v9;
      v5 = *(unsigned __int8 *)(v7 + 16);
      if (v7)
        v10 = v5 >= 0x1C;
      else
        v10 = 0;
      if (v10 && *(_QWORD *)(v7 + 40) != *(_QWORD *)(v4 + 40))
        goto LABEL_26;
    }
    else
    {
      v7 = v4;
    }
    if (v5 == 84)
    {
      v11 = *(_QWORD *)(v7 - 32);
      if (v11)
      {
        if (!*(_BYTE *)(v11 + 16)
          && *(_QWORD *)(v11 + 24) == *(_QWORD *)(v7 + 72)
          && (*(_BYTE *)(v11 + 33) & 0x20) != 0)
        {
          v7 = *(_QWORD *)(v7 + 8);
          if (v7)
          {
            if (*(_QWORD *)(v7 + 8))
            {
              LODWORD(v7) = 0;
            }
            else
            {
              v14 = (llvm *)*(unsigned int *)(v11 + 36);
              if (((_DWORD)v14 - 1839) >= 8 && !llvm::GetItrKind(v14))
                goto LABEL_26;
              LODWORD(v7) = 1;
            }
          }
          v12 = 1;
          return v7 & v12;
        }
      }
    }
  }
LABEL_26:
  v12 = 0;
  return v7 & v12;
}

uint64_t sub_1C47AD608(uint64_t a1)
{
  unsigned int v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 < 0x1C)
    return 0;
  v3 = v1 - 42;
  if (v3 > 0x2A)
    return 0;
  if (((1 << v3) & 0x10178000095) != 0)
    return 1;
  if (v3 != 42)
    return 0;
  v4 = *(_QWORD *)(a1 - 32);
  if (!v4 || *(_BYTE *)(v4 + 16) || *(_QWORD *)(v4 + 24) != *(_QWORD *)(a1 + 72) || (*(_BYTE *)(v4 + 33) & 0x20) == 0)
    return 0;
  v5 = *(_DWORD *)(v4 + 36);
  result = 1;
  if (v5 <= 1826)
  {
    if (((v5 - 139) > 0x26 || ((1 << (v5 + 117)) & 0x5000000003) == 0)
      && (v5 - 75) >= 2
      && v5 != 280)
    {
      return 0;
    }
  }
  else if (v5 > 1989)
  {
    if (((v5 - 1990) > 0xB || ((1 << (v5 + 58)) & 0xA03) == 0) && v5 != 2094 && v5 != 2096)
      return 0;
  }
  else
  {
    v6 = v5 - 1827;
    if (v6 > 0x13 || ((1 << v6) & 0xFF009) == 0)
      return 0;
  }
  return result;
}

uint64_t sub_1C47AD730(uint64_t a1, uint64_t a2, char a3)
{
  int v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (sub_1C47AD4FC(a1, a2))
    return sub_1C4786018(a1, a2);
  if ((a3 & 1) != 0)
    return 1;
  v7 = *(_DWORD *)(a2 + 20);
  if ((v7 & 0x40000000) != 0)
    v8 = *(uint64_t **)(a2 - 8);
  else
    v8 = (uint64_t *)(a2 - 32 * (v7 & 0x7FFFFFF));
  v9 = *v8;
  v10 = *(unsigned __int8 *)(*v8 + 16);
  if (v9)
    v11 = v10 >= 0x1C;
  else
    v11 = 0;
  if (!v11
    || *(_QWORD *)(a2 + 40) != *(_QWORD *)(v9 + 40)
    || (v15 = *(_QWORD *)(v9 + 8)) == 0
    || *(_QWORD *)(v15 + 8)
    || (sub_1C47AD608(v9) & 1) == 0)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if (v12 && *(_QWORD *)(v12 + 8))
    {
      while (1)
      {
        v13 = *(_QWORD *)(v12 + 24);
        v14 = v13 && *(unsigned __int8 *)(v13 + 16) >= 0x1Cu;
        if (!v14 || *(_QWORD *)(a2 + 40) != *(_QWORD *)(v13 + 40) || (sub_1C47AD608(v13) & 1) == 0)
          break;
        v12 = *(_QWORD *)(v12 + 8);
        if (!v12)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t sub_1C47AD824(uint64_t *a1, uint64_t *a2, const llvm::APInt *a3, llvm::Type **a4, uint64_t a5, int a6, int a7)
{
  llvm::ValueHandleBase *v14;
  unsigned int v15;
  uint64_t v16;
  llvm::Type *v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  llvm::ConstantInt *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  llvm::ValueHandleBase **v31;
  BOOL v32;
  uint64_t v33;
  llvm::Type *v34;
  int v35;
  unsigned int v36;
  _BOOL4 v37;
  uint16x4_t v38;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  llvm::ValueHandleBase **v48;
  char v49;
  unint64_t v51;
  unsigned int v52;

  v14 = (llvm::ValueHandleBase *)*a2;
  v15 = *(unsigned __int8 *)(*a2 + 16);
  if (v15 <= 0x1B)
    v16 = 0;
  else
    v16 = *a2;
  v17 = *(llvm::Type **)v14;
  v18 = v15 == 16;
  if (v15 == 16)
    v19 = *a2;
  else
    v19 = 0;
  v20 = !v18 || a6 == 0;
  if (!v20 && *(_DWORD *)(*(_QWORD *)v19 + 8) == 16397)
  {
    v21 = *(unsigned int *)(v19 + 32);
    if (v21 > 0x40)
    {
      v25 = **(_QWORD **)(v19 + 24);
      if (v25 < 0xFFFFFFFF80000000)
        goto LABEL_24;
    }
    else
    {
      v22 = *(_QWORD *)(v19 + 24);
      v23 = -v21;
      v24 = v22 << -(char)v21;
      if ((v24 & 0x8000000000000000) == 0)
        goto LABEL_24;
      v25 = v24 >> v23;
      if ((unint64_t)(v24 >> v23) <= 0xFFFFFFFF7FFFFFFFLL)
        goto LABEL_24;
    }
    v26 = **(_QWORD **)v17;
    v27 = *(llvm::ConstantInt **)(v26 + 1960);
    v28 = *(unsigned int *)(v26 + 1968);
    v52 = v28 >> 8;
    if (v28 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v51, v25, 0);
    }
    else
    {
      if (v28 <= 0xFF)
        v29 = 0;
      else
        v29 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v28);
      v51 = v29 & v25;
    }
    v14 = llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v51, a3);
    if (v52 >= 0x41 && v51)
      MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
    *a2 = (uint64_t)v14;
  }
LABEL_24:
  if (a7)
  {
    LODWORD(v51) = 0;
    if (sub_1C47ADB9C((uint64_t)v14, a5, &v51))
    {
      *(_DWORD *)a3 |= (_DWORD)v51 << 6;
      v30 = *(_DWORD *)(v16 + 20);
      if ((v30 & 0x40000000) != 0)
        v31 = *(llvm::ValueHandleBase ***)(v16 - 8);
      else
        v31 = (llvm::ValueHandleBase **)(v16 - 32 * (v30 & 0x7FFFFFF));
      v14 = *v31;
      *a2 = (uint64_t)*v31;
      if (*((unsigned __int8 *)v14 + 16) <= 0x1Bu)
        v16 = 0;
      else
        v16 = (uint64_t)v14;
    }
  }
  if (v16
    && *(_QWORD *)(v16 + 40) == a5
    && ((v32 = *(_BYTE *)(v16 + 16) == 67) || (*(_BYTE *)(v16 + 16) == 68 ? (v46 = a6 == 0) : (v46 = 1), !v46)))
  {
    v47 = *(_DWORD *)(v16 + 20);
    if ((v47 & 0x40000000) != 0)
      v48 = *(llvm::ValueHandleBase ***)(v16 - 8);
    else
      v48 = (llvm::ValueHandleBase **)(v16 - 32 * (v47 & 0x7FFFFFF));
    v14 = *v48;
    *a2 = (uint64_t)*v48;
  }
  else
  {
    v32 = 0;
  }
  v33 = 0;
  v34 = *(llvm::Type **)v14;
  *a4 = *(llvm::Type **)v14;
  LODWORD(v34) = *((_DWORD *)v34 + 2);
  v35 = v34;
  v36 = v34 >> 8;
  v37 = v34 >> 8 == 64;
  if (v35 == 13)
  {
    v38 = (uint16x4_t)vmovn_s32(vceqq_s32(vdupq_n_s32(v36), (int32x4_t)xmmword_1C640F790));
    v38.i16[0] = vmaxv_u16(v38);
    if (((v38.i32[0] | v37) & 1) != 0)
    {
      v33 = sub_1C5CC1648(a1, *a2);
      if ((_DWORD)v33)
      {
        if ((*((_DWORD *)v17 + 2) & 0xFE) == 0x12)
          v17 = (llvm::Type *)**((_QWORD **)v17 + 2);
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v17);
        v40 = *a4;
        v41 = *((_DWORD *)*a4 + 2);
        if ((v41 & 0xFE) == 0x12)
          v40 = (llvm::Type *)**((_QWORD **)v40 + 2);
        v42 = llvm::Type::getPrimitiveSizeInBits(v40);
        v43 = v41 >> 8;
        if (v41 == 13 && v43 == 1)
        {
          v44 = PrimitiveSizeInBits <= v42 || v32;
          if ((v44 & 1) == 0)
          {
            v45 = sub_1C6127534((uint64_t)a1, v33, 0x10u);
LABEL_68:
            v33 = v45;
            *a4 = (llvm::Type *)(***(_QWORD ***)*a2 + 1936);
LABEL_69:
            *(_DWORD *)a3 |= 8u;
            return v33;
          }
        }
        else
        {
          v49 = PrimitiveSizeInBits <= v42 || v32;
          if (v41 != 13 || v43 != 8)
          {
            if ((v49 & 1) != 0)
              return v33;
            goto LABEL_69;
          }
          if ((v49 & 1) == 0)
          {
            v45 = sub_1C61276B0((uint64_t)a1, v33, 16);
            goto LABEL_68;
          }
        }
        *a4 = (llvm::Type *)(***(_QWORD ***)*a2 + 1936);
      }
    }
  }
  return v33;
}

uint64_t sub_1C47ADB9C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD **v11;
  unsigned int v12;
  _QWORD *v13;

  result = 0;
  if (a1)
  {
    v5 = *(unsigned __int8 *)(a1 + 16);
    if (v5 >= 0x1C)
    {
      if (v5 != 53 || *(_QWORD *)(a1 + 40) != a2)
        return 0;
      v7 = *(_DWORD *)(a1 + 20);
      v8 = (v7 & 0x40000000) != 0 ? *(_QWORD *)(a1 - 8) : a1 - 32 * (v7 & 0x7FFFFFF);
      v9 = *(_QWORD *)(v8 + 32);
      if (!v9 || *(_BYTE *)(v9 + 16) != 16)
        return 0;
      v11 = (_QWORD **)(v9 + 24);
      v12 = *(_DWORD *)(v9 + 32);
      v13 = v11;
      if (v12 >= 0x41)
        v13 = *v11;
      if (*v13 <= 4uLL)
      {
        if (a3)
        {
          if (v12 >= 0x41)
            v11 = (_QWORD **)*v11;
          *a3 = *v11;
        }
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1C47ADC3C(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4, int *a5, _BYTE *a6, _BYTE *a7, unsigned int a8)
{
  BOOL v8;
  int *v11;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  uint64_t result;
  char v26;

  if (*(_BYTE *)(a1 + 280))
    v8 = *a6 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v11 = a5;
    v16 = a8;
    v17 = a8;
    v18 = a5;
    while (1)
    {
      v19 = *(_BYTE *)v18++;
      if ((v19 & 1) != 0)
        break;
      if (!--v17)
      {
        v20 = 0;
        v26 = 0;
        do
        {
          v21 = a3[v20];
          if (v21
            && *(_BYTE *)(v21 + 16) == 73
            && *(_QWORD *)(a2 + 40) == *(_QWORD *)(v21 + 40)
            && sub_1C47AD730(a1, a3[v20], 0)
            && (sub_1C47ADDC8(a1, (_BYTE *)v21, 1, 0, 0) & 1) == 0)
          {
            v22 = *(_QWORD *)(v21 + 8);
            if (v22)
            {
              v23 = -2;
              do
              {
                v24 = v23 == 0;
                if (!v23)
                  break;
                v22 = *(_QWORD *)(v22 + 8);
                ++v23;
              }
              while (v22);
            }
            else
            {
              v24 = 0;
            }
            v26 |= !v24;
          }
          ++v20;
        }
        while (v20 != v16);
        if ((v26 & 1) == 0)
          return 1;
        *a6 = 0;
        while (1)
        {
          if (*a3)
          {
            result = sub_1C47AE068(a1, a3, v11, a7, *a6, *(_QWORD *)(a2 + 40), 7, 1);
            *a4 = result;
            if (!(_DWORD)result)
              break;
          }
          ++a4;
          ++a7;
          ++v11;
          ++a3;
          if (!--v16)
            return 1;
        }
        return result;
      }
    }
  }
  return 1;
}

uint64_t sub_1C47ADDC8(uint64_t a1, _BYTE *a2, int a3, llvm::MachineFunction **a4, int a5)
{
  _BYTE *v7;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v14;
  BOOL v15;
  int v16;
  _BOOL8 v17;
  int v18;
  unsigned int v19;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v31;
  llvm::MachineInstr *v32;
  llvm::MachineFunction *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;

  v7 = a2;
  v9 = *(_QWORD *)a2;
  v10 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v11 = v10 >> 8;
  v14 = v10 >> 8 == 16 || v11 == 32 || v11 == 64;
  if (*(_DWORD *)(*(_QWORD *)a2 + 8) != 13 || !v14)
  {
    if ((v10 | 2) != 2)
      return 0;
    if (*(_DWORD *)(*(_QWORD *)a2 + 8))
      v15 = 1;
    else
      v15 = a3 == 0;
    if (!v15 && a2[16] == 73)
    {
      v7 = (_BYTE *)*((_QWORD *)a2 - 4);
      v9 = *(_QWORD *)v7;
    }
  }
  v34 = 0;
  v16 = sub_1C4786904(a1, v9, (int *)&v34);
  v17 = 0;
  if (!v16)
    return v17;
  if (*(_DWORD *)(v9 + 8) != 4109 || v7[16] != 66)
    goto LABEL_36;
  v18 = 0;
  v7 = (_BYTE *)*((_QWORD *)v7 - 4);
  if (v7)
  {
    v19 = v7[16];
    if (v19 >= 0x1C && v19 - 59 >= 0xFFFFFFEE)
    {
      v18 = 0;
      v21 = *((_QWORD *)v7 - 4);
      if (*(_BYTE *)(v21 + 16) != 16)
        v21 = 0;
      if (v19 == 54 && v21)
      {
        v22 = (_QWORD *)(v21 + 24);
        if (*(_DWORD *)(v21 + 32) >= 0x41u)
          v22 = (_QWORD *)*v22;
        if (*v22 == 16)
        {
          v7 = (_BYTE *)*((_QWORD *)v7 - 8);
          v18 = 16;
          goto LABEL_37;
        }
LABEL_36:
        v18 = 0;
      }
    }
  }
LABEL_37:
  v23 = v7[16];
  if (v7 && v23 == 77)
  {
    v7 = (_BYTE *)*((_QWORD *)v7 - 4);
    v23 = v7[16];
  }
  if (v23 == 89)
  {
    v35 = 0;
    if (sub_1C4786904(a1, *(_QWORD *)v7, (int *)&v35))
    {
      v24 = *((_QWORD *)v7 - 4);
      if (v24)
      {
        if (*(_BYTE *)(v24 + 16) == 16)
        {
          v7 = (_BYTE *)*((_QWORD *)v7 - 8);
          v25 = (_QWORD *)(v24 + 24);
          if (*(_DWORD *)(v24 + 32) >= 0x41u)
            v25 = (_QWORD *)*v25;
          v18 += v35 * *(_DWORD *)v25;
          v23 = v7[16];
          goto LABEL_47;
        }
      }
    }
    return 0;
  }
LABEL_47:
  if (v23 == 77)
  {
    v7 = (_BYTE *)*((_QWORD *)v7 - 4);
    v23 = v7[16];
  }
  if (v23 != 60)
    return 0;
  v26 = *((_QWORD *)v7 - 4);
  v27 = *(_DWORD *)(*(_QWORD *)v26 + 8);
  if ((v27 & 0xFE) == 0x12)
    v27 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v26 + 16) + 8);
  if ((v27 & 0xFFFFFF00) != 0x4000)
    return 0;
  v28 = sub_1C4786340(a1, v26, *(_QWORD *)(a1 + 272));
  v17 = v28 != -1;
  if (a4 && v28 != -1)
  {
    if (a5 != 1)
    {
      if (a5 != 2)
      {
        if ((int)v34 <= 8)
          v29 = 519;
        else
          v29 = (((v34 >> 3) & 0xFFF) << 8) | 7;
        goto LABEL_64;
      }
      v28 += 2;
    }
    v29 = 519;
LABEL_64:
    v31 = v28 >> 1;
    v33 = *a4;
    v32 = a4[1];
    v37 = 0;
    v38 = 64;
    v39 = 0;
    v35 = v29;
    v36 = v31 + v18 / 16;
    llvm::MachineInstr::addOperand(v32, v33, (const llvm::MachineOperand *)&v35);
    return 1;
  }
  return v17;
}

uint64_t sub_1C47AE068(uint64_t a1, uint64_t *a2, int *a3, _BYTE *a4, int a5, uint64_t a6, char a7, char a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  char v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t IncompleteVirtualRegister;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  llvm::MachineFunction *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  int v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  unsigned __int8 *v67;

  v9 = *a2;
  if (*(unsigned __int8 *)(*a2 + 16) <= 0x1Bu)
    v10 = 0;
  else
    v10 = *a2;
  v64 = v10;
  if (!v10 || *(_QWORD *)(v10 + 40) != a6)
    return sub_1C5CC1648((uint64_t *)a1, v9);
  if (*(_BYTE *)(v10 + 16) == 84
    && (v18 = *(_QWORD *)(v10 - 32)) != 0
    && !*(_BYTE *)(v18 + 16)
    && *(_QWORD *)(v18 + 24) == *(_QWORD *)(v10 + 72))
  {
    if ((*(_BYTE *)(v18 + 33) & 0x20) != 0)
      v19 = v10;
    else
      v19 = 0;
    if ((a7 & 1) == 0)
      goto LABEL_38;
  }
  else
  {
    v19 = 0;
    if ((a7 & 1) == 0)
      goto LABEL_38;
  }
  if (!a5)
    goto LABEL_38;
  v20 = *a3;
  if ((*a3 & 2) != 0)
    goto LABEL_38;
  if ((v20 & 4) != 0)
    goto LABEL_38;
  if (!v19)
    goto LABEL_38;
  v21 = *(_DWORD *)(*(_QWORD *)(v19 - 32) + 36);
  if (v21 != 1851)
  {
    if (v21 != 1830)
      goto LABEL_38;
    v61 = a8;
    v22 = sub_1C47AD4FC(a1, v19);
    a8 = v61;
    v21 = 1830;
    if ((v22 & 1) != 0)
      goto LABEL_38;
  }
  v62 = a8;
  v63 = v21;
  if ((sub_1C47AE6F8(v19) & 1) == 0)
    return sub_1C5CC1648((uint64_t *)a1, v9);
  *a3 = v20 | 1;
  v23 = *(unsigned __int8 **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
  if (v63 != 1851)
  {
    *a2 = (uint64_t)v23;
    if (v23[16] <= 0x1Bu)
      v37 = 0;
    else
      v37 = (uint64_t)v23;
    v64 = v37;
    a8 = v62;
    if (!v37 || *(_QWORD *)(v37 + 40) != a6)
      return sub_1C5CC1648((uint64_t *)a1, (uint64_t)v23);
LABEL_38:
    if ((a5 & 1) != 0 || (v43 = a8, v44 = sub_1C6129524(a1, a2, &v64, a4, a6, a8), a8 = v43, (v44 & 1) != 0))
    {
      if ((a7 & 2) != 0)
      {
        v38 = a8;
        v39 = v64;
        v40 = *(unsigned __int8 *)(a1 + 280);
        v67 = 0;
        if (v40 && (*((_QWORD *)&v65 + 1) = &v67, sub_1C5EAFBF8((uint64_t)&v65, 16, v64))
          || (*(_QWORD *)&v65 = &v67, sub_1C4E7B6EC((_QWORD **)&v65, v39)))
        {
          v23 = v67;
          a8 = v38;
          if (v67)
          {
            *a3 ^= 2u;
            *a2 = (uint64_t)v23;
            v60 = v23[16] <= 0x1Bu ? 0 : (uint64_t)v23;
            v64 = v60;
            if (!v60 || *(_QWORD *)(v60 + 40) != a6)
              return sub_1C5CC1648((uint64_t *)a1, (uint64_t)v23);
          }
        }
        else
        {
          a8 = v38;
        }
      }
      if ((a5 & 1) != 0 || (v45 = a8, v46 = sub_1C6129524(a1, a2, &v64, a4, a6, a8), a8 = v45, (v46 & 1) != 0))
      {
        v41 = v64;
        if (*(_BYTE *)(v64 + 16) == 84)
        {
          v42 = *(_QWORD *)(v64 - 32);
          if (v42)
          {
            if (!*(_BYTE *)(v42 + 16) && *(_QWORD *)(v42 + 24) == *(_QWORD *)(v64 + 72))
            {
              if ((*(_BYTE *)(v42 + 33) & 0x20) == 0)
                v41 = 0;
              if ((a7 & 4) != 0 && v41 && *(_DWORD *)(*(_QWORD *)(v41 - 32) + 36) == 139)
              {
                *a3 |= 4u;
                v23 = *(unsigned __int8 **)(v41 - 32 * (*(_DWORD *)(v41 + 20) & 0x7FFFFFF));
                *a2 = (uint64_t)v23;
                v47 = v23[16] <= 0x1Bu ? 0 : (uint64_t)v23;
                v64 = v47;
                if (!v47 || *(_QWORD *)(v47 + 40) != a6)
                  return sub_1C5CC1648((uint64_t *)a1, (uint64_t)v23);
              }
            }
          }
        }
        if (!a5)
          sub_1C6129524(a1, a2, &v64, a4, a6, a8);
      }
    }
    v23 = (unsigned __int8 *)*a2;
    return sub_1C5CC1648((uint64_t *)a1, (uint64_t)v23);
  }
  v24 = sub_1C5CC1648((uint64_t *)a1, (uint64_t)v23);
  if (!v24)
    return 0;
  v25 = v24;
  v26 = *(_QWORD *)(a1 + 48);
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v26, "", 0);
  *(_QWORD *)(*(_QWORD *)(v26 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F982A8;
  v28 = *(_QWORD *)(v26 + 8);
  if (v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
    if ((_DWORD)IncompleteVirtualRegister)
      goto LABEL_24;
  }
  else if ((_DWORD)IncompleteVirtualRegister)
  {
LABEL_24:
    v29 = *(_QWORD *)(a1 + 32);
    v30 = *(_QWORD *)(v29 + 640);
    v31 = *(unint64_t **)(v29 + 648);
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v33 = *(llvm::MachineFunction **)(v30 + 32);
    v34 = *(unsigned __int8 **)(a1 + 72);
    v67 = v34;
    if (v34)
      llvm::MetadataTracking::track((uint64_t)&v67, v34, 2);
    v35 = v32 + 48192;
    v36 = *((_QWORD *)v33 + 28);
    if (v36)
      *((_QWORD *)v33 + 28) = *(_QWORD *)v36;
    else
      v36 = sub_1C484358C((uint64_t)v33 + 128, 72, 3);
    *(_QWORD *)&v65 = v67;
    if (v67)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v67, v67, (uint64_t)&v65);
      v67 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v36, v33, v35, (unsigned __int8 **)&v65, 0);
    if ((_QWORD)v65)
      llvm::MetadataTracking::untrack((uint64_t)&v65, (unsigned __int8 *)v65);
    if (v67)
      llvm::MetadataTracking::untrack((uint64_t)&v67, v67);
    v48 = *(_QWORD *)(v30 + 40);
    *(_QWORD *)(v36 + 24) = v48;
    v49 = *(_QWORD *)(v48 + 32);
    v50 = *(unsigned int *)(v36 + 40);
    if ((_DWORD)v50)
    {
      v53 = *(_QWORD *)(v36 + 32);
      v54 = *(_QWORD *)(v49 + 40);
      v55 = 32 * v50;
      do
      {
        if (!*(_BYTE *)v53)
        {
          v56 = *(unsigned int *)(v53 + 4);
          if ((int)v56 >= 0)
            v57 = (uint64_t *)(*(_QWORD *)(v54 + 272) + 8 * v56);
          else
            v57 = (uint64_t *)(*(_QWORD *)(v54 + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
          v58 = *v57;
          if (*v57)
          {
            v59 = *(_QWORD *)(v58 + 16);
            *(_QWORD *)(v58 + 16) = v53;
            *(_QWORD *)(v53 + 16) = v59;
            if ((*(_BYTE *)(v53 + 3) & 1) != 0)
            {
              *(_QWORD *)(v53 + 24) = v58;
            }
            else
            {
              *(_QWORD *)(v53 + 24) = 0;
              v57 = (uint64_t *)(v59 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v53 + 16) = v53;
            *(_QWORD *)(v53 + 24) = 0;
          }
          *v57 = v53;
        }
        v53 += 32;
        v55 -= 32;
      }
      while (v55);
    }
    v51 = *(_QWORD *)(v49 + 728);
    if (v51)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v51 + 24))(v51, v36);
    v52 = *v31 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v36 = v52 | *(_QWORD *)v36 & 7;
    *(_QWORD *)(v36 + 8) = v31;
    *(_QWORD *)(v52 + 8) = v36;
    *v31 = *v31 & 7 | v36;
    *((_QWORD *)&v65 + 1) = 0;
    v66 = 0uLL;
    LODWORD(v65) = 0x1000000;
    DWORD1(v65) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v65);
    LODWORD(v65) = 1;
    *((_QWORD *)&v65 + 1) = 0;
    *(_QWORD *)&v66 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v65);
    *((_QWORD *)&v65 + 1) = 0;
    v66 = 0uLL;
    LODWORD(v65) = 0;
    DWORD1(v65) = v25;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v65);
    LODWORD(v65) = 1;
    *((_QWORD *)&v65 + 1) = 0;
    *(_QWORD *)&v66 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v65);
    *((_QWORD *)&v65 + 1) = 0;
    v66 = 0uLL;
    LODWORD(v65) = 0;
    DWORD1(v65) = v25;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v65);
    LODWORD(v65) = 1;
    *((_QWORD *)&v65 + 1) = 0;
    *(_QWORD *)&v66 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v65);
    *((_QWORD *)&v65 + 1) = 0;
    v66 = 0uLL;
    LODWORD(v65) = 0;
    DWORD1(v65) = v25;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v65);
    LODWORD(v65) = 1;
    *((_QWORD *)&v65 + 1) = 0;
    *(_QWORD *)&v66 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v65);
    LODWORD(v65) = 1;
    *((_QWORD *)&v65 + 1) = 0;
    *(_QWORD *)&v66 = 0x100000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v65);
    v65 = 0u;
    v66 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v65);
    LODWORD(v65) = 1;
    *((_QWORD *)&v65 + 1) = 0;
    *(_QWORD *)&v66 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v65);
    v65 = 0u;
    v66 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v65);
  }
  return IncompleteVirtualRegister;
}

uint64_t sub_1C47AE6F8(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  for (i = *(_QWORD *)(a1 + 8); i; i = *(_QWORD *)(i + 8))
  {
    v2 = *(_QWORD *)(i + 24);
    v3 = *(unsigned __int8 *)(v2 + 16);
    if (v3 == 84)
    {
      v4 = *(_QWORD *)(v2 - 32);
      if (!v4)
        return v4;
      if (*(_BYTE *)(v4 + 16)
        || *(_QWORD *)(v4 + 24) != *(_QWORD *)(v2 + 72)
        || (*(_BYTE *)(v4 + 33) & 0x20) == 0
        || *(_DWORD *)(v4 + 36) != 1830)
      {
        return 0;
      }
    }
    else
    {
      if (v3 < 0x1C)
        return 0;
      v4 = 0;
      if (*(unsigned __int8 *)(v2 + 16) > 0x2Du)
      {
        if (v3 != 46)
        {
          if (v3 != 82)
            return v4;
          v7 = *(_DWORD *)(v2 + 20);
          v8 = (v7 & 0x40000000) != 0 ? *(_QWORD *)(v2 - 8) : v2 - 32 * (v7 & 0x7FFFFFF);
          if (*(_QWORD *)(v8 + 32) == a1)
            return 0;
        }
      }
      else if (v3 != 42)
      {
        if (v3 != 44)
          return v4;
        v5 = *(_DWORD *)(v2 + 20);
        v6 = (v5 & 0x40000000) != 0 ? *(uint64_t **)(v2 - 8) : (uint64_t *)(v2 - 32 * (v5 & 0x7FFFFFF));
        if (v6[4] == a1)
        {
          v9 = *v6;
          v10 = *(unsigned __int8 *)(v9 + 16);
          if (v9 && v10 >= 0x1C)
          {
            v4 = 0;
            if (v10 == 46 || v10 == 49)
              return v4;
          }
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1C47AE80C(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  _BOOL4 v6;
  uint64_t v8;
  int v10;

  v2 = *(_DWORD *)(*(_QWORD *)a2 + 8) >> 8;
  v6 = v2 == 8 || v2 == 16 || v2 == 32 || v2 == 64;
  if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 13 && v6)
  {
    v10 = a2[16];
    if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 281) || v2 != 64)
    {
      HIDWORD(v8) = v10 - 41;
      LODWORD(v8) = v10 - 41;
      __asm { BR              X10 }
    }
  }
  return 0;
}

uint64_t sub_1C47AF384(_DWORD *a1)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _BOOL4 v6;
  int v7;
  _BOOL4 v8;

  v1 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 8) >> 8;
  if (v1 == 13 && v2 == 64)
    return 1;
  v3 = 0;
  if (v1 == 13 && v2 == 32)
  {
    v4 = a1[5];
    if ((v4 & 0x40000000) != 0)
      v5 = (_QWORD *)*((_QWORD *)a1 - 1);
    else
      v5 = &a1[-8 * (v4 & 0x7FFFFFF)];
    v6 = *(unsigned __int8 *)(*v5 + 16) - 69 < 0xFFFFFFFE;
    v7 = *(unsigned __int8 *)(v5[4] + 16);
    v8 = v7 != 67 && v7 != 68;
    return v6 | v8;
  }
  return v3;
}

uint64_t sub_1C47AF418(uint64_t *a1, uint64_t *a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  int v7;
  _BOOL4 v11;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  const llvm::APInt *v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  llvm::ValueHandleBase *v26;
  _QWORD *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD **v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t result;
  uint64_t v37;
  llvm::ConstantInt *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  _BOOL8 v47;
  uint64_t v48;
  unsigned int v49;
  _BOOL4 v50;
  unsigned int v51;
  _BOOL4 v52;
  _BOOL8 v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  _BOOL4 v57;
  int v58;
  int v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  _BOOL4 v63;
  uint64_t v64;
  char *v65;
  unsigned int v66;
  unsigned int v67;
  int IncompleteVirtualRegister;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  llvm::MachineFunction *v76;
  llvm::MachineFunction *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  _BYTE *v89;
  __int32 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  uint64_t v94;
  llvm::MachineFunction *v95;
  unsigned __int8 *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  char v120;
  llvm::MachineFunction *v122;
  llvm::MachineInstr *v123;
  unsigned __int8 *v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int32x2_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int8x16_t v135;
  uint64_t v136;
  _QWORD v137[3];
  int32x2_t v138;
  int v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = *(_DWORD *)(*a2 + 8) >> 8;
  v11 = v7 == 8 || v7 == 16 || v7 == 32 || v7 == 64;
  if (*(_DWORD *)(*a2 + 8) != 13 || !v11)
    return 0;
  v14 = a1;
  v15 = a1[32];
  v16 = *(unsigned __int8 *)(v15 + 281);
  if (!*(_BYTE *)(v15 + 281) && v7 == 64)
    return 0;
  v17 = 0;
  v18 = 0;
  v19 = *((unsigned __int8 *)a2 + 16);
  v139 = 0;
  v119 = v6;
  v120 = v19 == 43;
  v137[2] = a5;
  v138 = 0;
  v137[0] = a3;
  v137[1] = a4;
  v135 = 0uLL;
  v136 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v131 = 0;
  v20 = (const llvm::APInt *)&v130;
  v129 = v6;
  v130 = 0;
  v127 = v6;
  v128 = v6;
  do
  {
    v21 = v137[v18];
    if (v21)
      v22 = *(_BYTE *)(v21 + 16) == 16;
    else
      v22 = 0;
    if (v22)
    {
      if (v18 == 2)
      {
        v23 = *(_DWORD *)(v21 + 32);
        if (v23 > 0x40)
        {
          v25 = **(_QWORD **)(v21 + 24);
          if (v25 < 0)
            goto LABEL_58;
        }
        else
        {
          v24 = *(_QWORD *)(v21 + 24) << -(char)v23;
          if (v24 < 0)
          {
            v25 = v24 >> (64 - v23);
LABEL_58:
            v37 = -v25;
            v38 = **(llvm::ConstantInt ***)v21;
            v39 = *(_DWORD *)(*(_QWORD *)v21 + 8);
            DWORD2(v125) = v39 >> 8;
            if (v39 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v125, v37, 0);
            }
            else
            {
              if (v39 <= 0xFF)
                v40 = 0;
              else
                v40 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v39);
              *(_QWORD *)&v125 = v40 & v37;
            }
            v26 = llvm::ConstantInt::get(v38, (llvm::LLVMContext *)&v125, a3);
            if (DWORD2(v125) >= 0x41 && (_QWORD)v125)
              MEMORY[0x1CAA32F9C](v125, 0x1000C8000313F17);
            v120 ^= 1u;
LABEL_31:
            v27 = (_QWORD *)((char *)v26 + 24);
            v28 = *((_DWORD *)v26 + 8);
            v29 = (unint64_t *)((char *)v26 + 24);
            if (v28 >= 0x41)
              v29 = (unint64_t *)*v27;
            if (*((_DWORD *)v29 + 1))
            {
LABEL_46:
              v14 = a1;
              goto LABEL_47;
            }
            if (v18 >= 2)
            {
              v32 = (_QWORD **)*a2;
            }
            else
            {
              v30 = (unint64_t *)((char *)v26 + 24);
              if (v28 >= 0x41)
                v30 = (unint64_t *)*v27;
              v31 = *v30;
              v32 = (_QWORD **)*a2;
              if (!(v31 >> 16))
              {
                v33 = **v32 + 1936;
LABEL_41:
                *(&v127 + v18) = v33;
                if (v28 > 0x40)
                {
                  if ((*(_QWORD *)*v27 & 0x8000000000000000) == 0)
                    goto LABEL_55;
                }
                else if ((((uint64_t)(*v27 << -(char)v28) >> -(char)v28) & 0x8000000000000000) == 0)
                {
                  goto LABEL_55;
                }
                if (*(_DWORD *)(v33 + 8) >> 8 >= *(_DWORD *)(v119 + 8) >> 8)
                {
LABEL_55:
                  *(&v132 + v18) = (uint64_t)v26;
                  v14 = a1;
                  goto LABEL_56;
                }
                goto LABEL_46;
              }
            }
            v33 = **v32 + 1960;
            goto LABEL_41;
          }
        }
      }
      v26 = (llvm::ValueHandleBase *)v137[v18];
      goto LABEL_31;
    }
LABEL_47:
    v135.i64[v18] = v21;
    if (v16)
      v34 = v18 == 2;
    else
      v34 = 0;
    v35 = v34;
    result = sub_1C47AD824(v14, &v135.i64[v17], v20, (llvm::Type **)((char *)&v127 + v17 * 8), a2[5], 1, v35);
    v138.i32[v18] = result;
    if (!(_DWORD)result)
      return result;
LABEL_56:
    ++v18;
    ++v17;
    v20 = (const llvm::APInt *)((char *)v20 + 4);
  }
  while (v18 != 3);
  v41 = v132;
  if (v132 && v133)
    return 0;
  v42 = v127;
  v43 = v128;
  if (v132)
  {
    v135 = vextq_s8(v135, v135, 8uLL);
    v138 = vrev64_s32(v138);
    v132 = v133;
    v133 = v41;
    v130 = vrev64_s32(v130);
    v127 = v128;
    v128 = v42;
    v44 = v42;
  }
  else
  {
    v44 = v128;
    v43 = v127;
    v41 = v133;
  }
  v45 = *(_DWORD *)(v119 + 8);
  v46 = *(_DWORD *)(v119 + 8) >> 8;
  v47 = v46 == 32 && v45 == 13;
  if (v45 == 13 && v46 == 64)
    v48 = 2;
  else
    v48 = v47;
  v49 = *(_DWORD *)(v43 + 8);
  v50 = v49 == 13;
  v51 = v49 >> 8;
  v52 = v51 == 64 && v50;
  v53 = v51 == 32 && v50;
  v54 = *(_DWORD *)(v44 + 8);
  v55 = v54 == 13;
  v56 = v54 >> 8;
  v57 = v56 == 32 && v55;
  v58 = v55 && v56 == 64;
  if (v58)
    v59 = 2;
  else
    v59 = v57;
  v60 = *(_DWORD *)(v129 + 8) >> 8;
  v61 = v60 == 64;
  v62 = v60 == 32 && *(_DWORD *)(v129 + 8) == 13;
  if (*(_DWORD *)(v129 + 8) == 13 && v61)
    v62 = 2;
  if (v16)
  {
    if (((v52 | v58) & 1) != 0)
      return 0;
    if (v41)
      v66 = v59 + 2;
    else
      v66 = v59;
    if (v134)
      v62 = 3;
    v65 = (char *)&unk_1C640FA0A + 192 * (v120 & 1) + 64 * v48 + 32 * v53 + 8 * v66 + 2 * v62;
LABEL_111:
    v67 = *(unsigned __int16 *)v65;
    IncompleteVirtualRegister = a6;
    if (v45 == 13)
    {
      IncompleteVirtualRegister = a6;
      if (v46 == 8)
      {
        v69 = v14[6];
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v69, "", 0);
        *(_QWORD *)(*(_QWORD *)(v69 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F982A8;
        v70 = *(_QWORD *)(v69 + 8);
        if (v70)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70);
      }
    }
    v71 = v14[4];
    v72 = v14;
    v73 = *(_QWORD *)(v71 + 640);
    v74 = *(unint64_t **)(v71 + 648);
    v75 = *(_QWORD *)(v72[12] + 8);
    v76 = *(llvm::MachineFunction **)(v73 + 32);
    v77 = (llvm::MachineFunction *)v72[9];
    v122 = v77;
    if (v77)
      llvm::MetadataTracking::track((uint64_t)&v122, (unsigned __int8 *)v77, 2);
    v78 = v75 + 48 * v67;
    v79 = *((_QWORD *)v76 + 28);
    if (v79)
      *((_QWORD *)v76 + 28) = *(_QWORD *)v79;
    else
      v79 = sub_1C484358C((uint64_t)v76 + 128, 72, 3);
    *(_QWORD *)&v125 = v122;
    if (v122)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v122, (unsigned __int8 *)v122, (uint64_t)&v125);
      v122 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v79, v76, v78, (unsigned __int8 **)&v125, 0);
    if ((_QWORD)v125)
      llvm::MetadataTracking::untrack((uint64_t)&v125, (unsigned __int8 *)v125);
    if (v122)
      llvm::MetadataTracking::untrack((uint64_t)&v122, (unsigned __int8 *)v122);
    v80 = *(_QWORD *)(v73 + 40);
    *(_QWORD *)(v79 + 24) = v80;
    v81 = *(_QWORD *)(v80 + 32);
    v82 = *(unsigned int *)(v79 + 40);
    if ((_DWORD)v82)
    {
      v104 = *(_QWORD *)(v79 + 32);
      v105 = *(_QWORD *)(v81 + 40);
      v106 = 32 * v82;
      do
      {
        if (!*(_BYTE *)v104)
        {
          v107 = *(unsigned int *)(v104 + 4);
          if ((int)v107 >= 0)
            v108 = (uint64_t *)(*(_QWORD *)(v105 + 272) + 8 * v107);
          else
            v108 = (uint64_t *)(*(_QWORD *)(v105 + 24) + 16 * (v107 & 0x7FFFFFFF) + 8);
          v109 = *v108;
          if (*v108)
          {
            v110 = *(_QWORD *)(v109 + 16);
            *(_QWORD *)(v109 + 16) = v104;
            *(_QWORD *)(v104 + 16) = v110;
            if ((*(_BYTE *)(v104 + 3) & 1) != 0)
            {
              *(_QWORD *)(v104 + 24) = v109;
            }
            else
            {
              *(_QWORD *)(v104 + 24) = 0;
              v108 = (uint64_t *)(v110 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v104 + 16) = v104;
            *(_QWORD *)(v104 + 24) = 0;
          }
          *v108 = v104;
        }
        v104 += 32;
        v106 -= 32;
      }
      while (v106);
    }
    v83 = *(_QWORD *)(v81 + 728);
    if (v83)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v83 + 24))(v83, v79);
    v84 = *v74 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v79 = v84 | *(_QWORD *)v79 & 7;
    *(_QWORD *)(v79 + 8) = v74;
    *(_QWORD *)(v84 + 8) = v79;
    *v74 = *v74 & 7 | v79;
    *((_QWORD *)&v125 + 1) = 0;
    v126 = 0uLL;
    LODWORD(v125) = 0x1000000;
    DWORD1(v125) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v79, v76, (const llvm::MachineOperand *)&v125);
    LODWORD(v125) = 1;
    *((_QWORD *)&v125 + 1) = 0;
    *(_QWORD *)&v126 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v79, v76, (const llvm::MachineOperand *)&v125);
    v85 = 0;
    v122 = v76;
    v123 = (llvm::MachineInstr *)v79;
    do
    {
      v86 = *(&v132 + v85);
      if (v86)
      {
        v87 = (unint64_t *)(v86 + 24);
        if (*(_DWORD *)(v86 + 32) >= 0x41u)
          v87 = (unint64_t *)*v87;
        v88 = *v87;
        if (v88 < 0x10000)
          v88 |= 0x100000000uLL;
      }
      else
      {
        v89 = (_BYTE *)v135.i64[v85];
        if (!v89 || (sub_1C47ADDC8((uint64_t)a1, v89, 0, &v122, 0) & 1) == 0)
        {
          v90 = v138.i32[v85];
          *((_QWORD *)&v125 + 1) = 0;
          LODWORD(v125) = 0;
          DWORD1(v125) = v90;
          v126 = 0uLL;
          llvm::MachineInstr::addOperand(v123, v122, (const llvm::MachineOperand *)&v125);
        }
        v88 = v130.u32[v85];
      }
      LODWORD(v125) = 1;
      *((_QWORD *)&v125 + 1) = 0;
      *(_QWORD *)&v126 = v88;
      llvm::MachineInstr::addOperand(v123, v122, (const llvm::MachineOperand *)&v125);
      ++v85;
    }
    while (v85 != 3);
    LODWORD(v125) = 1;
    *((_QWORD *)&v125 + 1) = 0;
    *(_QWORD *)&v126 = 0;
    llvm::MachineInstr::addOperand(v123, v122, (const llvm::MachineOperand *)&v125);
    v125 = 0u;
    v126 = 0u;
    llvm::MachineInstr::addOperand(v123, v122, (const llvm::MachineOperand *)&v125);
    if (*(_DWORD *)(v119 + 8) == 2061)
    {
      v91 = a1[4];
      v92 = *(_QWORD *)(v91 + 640);
      v93 = *(unint64_t **)(v91 + 648);
      v94 = *(_QWORD *)(a1[12] + 8);
      v95 = *(llvm::MachineFunction **)(v92 + 32);
      v96 = (unsigned __int8 *)a1[9];
      v124 = v96;
      if (v96)
        llvm::MetadataTracking::track((uint64_t)&v124, v96, 2);
      v97 = v94 + 17904;
      v98 = *((_QWORD *)v95 + 28);
      if (v98)
        *((_QWORD *)v95 + 28) = *(_QWORD *)v98;
      else
        v98 = sub_1C484358C((uint64_t)v95 + 128, 72, 3);
      *(_QWORD *)&v125 = v124;
      if (v124)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v124, v124, (uint64_t)&v125);
        v124 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v98, v95, v97, (unsigned __int8 **)&v125, 0);
      if ((_QWORD)v125)
        llvm::MetadataTracking::untrack((uint64_t)&v125, (unsigned __int8 *)v125);
      if (v124)
        llvm::MetadataTracking::untrack((uint64_t)&v124, v124);
      v99 = *(_QWORD *)(v92 + 40);
      *(_QWORD *)(v98 + 24) = v99;
      v100 = *(_QWORD *)(v99 + 32);
      v101 = *(unsigned int *)(v98 + 40);
      if ((_DWORD)v101)
      {
        v111 = *(_QWORD *)(v98 + 32);
        v112 = *(_QWORD *)(v100 + 40);
        v113 = 32 * v101;
        do
        {
          if (!*(_BYTE *)v111)
          {
            v114 = *(unsigned int *)(v111 + 4);
            if ((int)v114 >= 0)
              v115 = (uint64_t *)(*(_QWORD *)(v112 + 272) + 8 * v114);
            else
              v115 = (uint64_t *)(*(_QWORD *)(v112 + 24) + 16 * (v114 & 0x7FFFFFFF) + 8);
            v116 = *v115;
            if (*v115)
            {
              v117 = *(_QWORD *)(v116 + 16);
              *(_QWORD *)(v116 + 16) = v111;
              *(_QWORD *)(v111 + 16) = v117;
              if ((*(_BYTE *)(v111 + 3) & 1) != 0)
              {
                *(_QWORD *)(v111 + 24) = v116;
              }
              else
              {
                *(_QWORD *)(v111 + 24) = 0;
                v115 = (uint64_t *)(v117 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v111 + 16) = v111;
              *(_QWORD *)(v111 + 24) = 0;
            }
            *v115 = v111;
          }
          v111 += 32;
          v113 -= 32;
        }
        while (v113);
      }
      v102 = *(_QWORD *)(v100 + 728);
      if (v102)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v102 + 24))(v102, v98);
      v103 = *v93 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v98 = v103 | *(_QWORD *)v98 & 7;
      *(_QWORD *)(v98 + 8) = v93;
      *(_QWORD *)(v103 + 8) = v98;
      *v93 = *v93 & 7 | v98;
      *((_QWORD *)&v125 + 1) = 0;
      v126 = 0uLL;
      LODWORD(v125) = 0x1000000;
      DWORD1(v125) = a6;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v98, v95, (const llvm::MachineOperand *)&v125);
      LODWORD(v125) = 1;
      *((_QWORD *)&v125 + 1) = 0;
      *(_QWORD *)&v126 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v98, v95, (const llvm::MachineOperand *)&v125);
      *((_QWORD *)&v125 + 1) = 0;
      v126 = 0uLL;
      LODWORD(v125) = 0;
      DWORD1(v125) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v98, v95, (const llvm::MachineOperand *)&v125);
      LODWORD(v125) = 1;
      *((_QWORD *)&v125 + 1) = 0;
      *(_QWORD *)&v126 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v98, v95, (const llvm::MachineOperand *)&v125);
      LODWORD(v125) = 1;
      *((_QWORD *)&v125 + 1) = 0;
      *(_QWORD *)&v126 = 0x1000000FFLL;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v98, v95, (const llvm::MachineOperand *)&v125);
      LODWORD(v125) = 1;
      *((_QWORD *)&v125 + 1) = 0;
      *(_QWORD *)&v126 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v98, v95, (const llvm::MachineOperand *)&v125);
      v125 = 0u;
      v126 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v98, v95, (const llvm::MachineOperand *)&v125);
    }
    return 1;
  }
  else
  {
    result = 0;
    if (!v52 && !v53 && ((v58 | v57) & 1) == 0)
    {
      v63 = v41 != 0;
      v64 = 2;
      if (!v134)
        v64 = v62;
      v65 = (char *)&unk_1C640F9DA + 24 * (v120 & 1) + 12 * v48 + 6 * v63 + 2 * v64;
      goto LABEL_111;
    }
  }
  return result;
}

uint64_t sub_1C47AFE88(uint64_t a1, unsigned __int8 *a2, int a3, int a4, unsigned int a5, int a6)
{
  uint64_t v6;
  int v7;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;
  unsigned __int8 *v20;
  uint64_t v21;
  char v22;
  char v23;
  llvm::ConstantFP ***v24;
  BOOL v25;
  int8x16_t *v26;
  void *v27;
  void *v28;
  int v30;
  BOOL v31;
  int v32;
  void *v33;
  uint64_t v34;
  const llvm::APFloat *v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  _BOOL4 v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t *v47;
  int v48;
  int v49;
  char *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  llvm::MachineFunction *v56;
  llvm::MachineFunction *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  _QWORD *v70;
  int v71;
  llvm::detail::DoubleAPFloat *v72;
  void *v73;
  const llvm::APInt **v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  llvm::MachineInstr *v80;
  llvm::MachineFunction *v81;
  const llvm::APInt *v82;
  _BYTE *v83;
  int v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned __int8 *v89;
  uint64_t v90;
  unsigned int IncompleteVirtualRegister;
  llvm::Type *v92;
  uint64_t v93;
  llvm::Type *v94;
  llvm::Type *v95;
  llvm::MachineFunction *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  uint64_t v103;
  llvm::MachineFunction *v104;
  unsigned __int8 *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  uint64_t v117;
  llvm::MachineFunction *v118;
  unsigned __int8 *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  uint64_t v131;
  llvm::MachineFunction *v132;
  unsigned __int8 *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  const llvm::APFloat *v140;
  uint64_t *v141;
  const llvm::APInt *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  int v172;
  unsigned int v173;
  int v174;
  _BOOL4 v175;
  int v176;
  int v177;
  void *v181;
  int v182;
  _QWORD *v183;
  BOOL v184;
  __int16 v185;
  const llvm::APInt *v186;
  __int128 v187;
  _QWORD v188[4];
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  llvm::MachineInstr *v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  int8x16_t v197;
  llvm::APFloatBase *v198;
  llvm::MachineFunction *v199;
  unint64_t v200;
  const llvm::APInt *v201[8];

  v201[5] = *(const llvm::APInt **)MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  if ((v7 | 2) != 2)
    return 0;
  v11 = a2[16] - 28;
  v199 = 0;
  v200 = 0;
  v198 = 0;
  v197 = 0uLL;
  v196 = 0uLL;
  v12 = a4 == 1 && v7 == 0;
  v13 = v12;
  HIBYTE(v185) = v13;
  if (v11 == 12)
  {
    v198 = llvm::ConstantFP::get((llvm::ConstantFP **)v6, (llvm::Type *)a2, 0.0);
    v14 = *((_DWORD *)a2 + 5);
    v15 = (v14 & 0x40000000) != 0 ? (uint64_t *)*((_QWORD *)a2 - 1) : (uint64_t *)&a2[-32 * (v14 & 0x7FFFFFF)];
    v199 = (llvm::MachineFunction *)*v15;
    v11 = 16;
  }
  else
  {
    v16 = 0;
    v17 = *((_DWORD *)a2 + 5);
    v18 = 1;
    do
    {
      v19 = v18;
      v20 = &a2[-32 * (v17 & 0x7FFFFFF)];
      if ((v17 & 0x40000000) != 0)
        v20 = (unsigned __int8 *)*((_QWORD *)a2 - 1);
      v18 = 0;
      *(&v198 + v16) = *(llvm::APFloatBase **)&v20[32 * v16];
      v16 = 1;
    }
    while ((v19 & 1) != 0);
  }
  v21 = 0;
  v22 = 1;
  do
  {
    v23 = v22;
    v24 = (llvm::ConstantFP ***)*(&v198 + v21);
    if (v24)
      v25 = *((_BYTE *)v24 + 16) == 17;
    else
      v25 = 0;
    if (v25)
    {
      v24 = sub_1C6126914(a1, (uint64_t *)v24);
      v26 = (int8x16_t *)&v196;
    }
    else
    {
      v26 = &v197;
    }
    v22 = 0;
    v26->i64[v21] = (uint64_t)v24;
    v21 = 1;
  }
  while ((v23 & 1) != 0);
  v27 = (void *)*((_QWORD *)&v196 + 1);
  v28 = (void *)v196;
  if ((_QWORD)v196 && *((_QWORD *)&v196 + 1) != 0)
    return 0;
  v30 = *(unsigned __int8 *)(v6 + 8);
  v31 = *(_BYTE *)(v6 + 8) == 0;
  v184 = v31;
  LOBYTE(v185) = v31;
  v183 = (_QWORD *)a1;
  v177 = a3;
  if (v11 != 21)
    goto LABEL_41;
  if (*((_QWORD *)&v196 + 1))
  {
    v32 = *(unsigned __int8 *)(**((_QWORD **)&v196 + 1) + 8);
    if (!*(_BYTE *)(**((_QWORD **)&v196 + 1) + 8) || *(_BYTE *)(a1 + 280))
    {
LABEL_38:
      v34 = (uint64_t)v27 + 24;
      if (v32)
      {
        LODWORD(v201[1]) = 32;
        v201[0] = (const llvm::APInt *)1065353216;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v192, v201);
        v201[1] = (const llvm::APInt *)v192;
        v201[2] = v193;
        LODWORD(v201[3]) = v194;
        BYTE4(v201[3]) = BYTE4(v201[3]) & 0xF0 | BYTE4(v194) & 0xF;
        sub_1C47B1140((uint64_t)v201, v34, 1);
        v27 = llvm::ConstantFP::get(**(llvm::ConstantFP ***)a2, (llvm::LLVMContext *)v201, v35);
        *((_QWORD *)&v196 + 1) = v27;
        if ((_UNKNOWN *)v201[1] != &unk_1C866F1C0)
        {
          if ((*((_DWORD *)v201[1] + 2) - 64) > 0xFFFFFF7F)
            goto LABEL_41;
          v142 = v201[2];
          if (!v201[2])
            goto LABEL_41;
          goto LABEL_236;
        }
      }
      else
      {
        LODWORD(v193) = 16;
        v192 = 15360;
        llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v201[1], (const llvm::APInt **)&v192);
        sub_1C47B1140((uint64_t)v201, v34, 1);
        v141 = (uint64_t *)llvm::ConstantFP::get(**(llvm::ConstantFP ***)a2, (llvm::LLVMContext *)v201, v140);
        v27 = sub_1C6126914(a1, v141);
        *((_QWORD *)&v196 + 1) = v27;
        if ((_UNKNOWN *)v201[1] != &unk_1C866F1C0)
        {
          if ((*((_DWORD *)v201[1] + 2) - 64) > 0xFFFFFF7F)
            goto LABEL_41;
          v142 = v201[2];
          if (!v201[2])
            goto LABEL_41;
LABEL_236:
          v171 = v27;
          MEMORY[0x1CAA32F9C](v142, 0x1000C8000313F17);
          goto LABEL_237;
        }
      }
      v171 = v27;
      sub_1C4773C74((uint64_t *)&v201[2]);
LABEL_237:
      v27 = v171;
LABEL_41:
      v36 = 0;
      v37 = 0;
      v38 = v31;
      goto LABEL_42;
    }
    v33 = (void *)*((_QWORD *)&v196 + 1);
    if (fabsf(llvm::APFloat::convertToFloat((llvm::APFloat *)(*((_QWORD *)&v196 + 1) + 24))) < 8.5071e37)
    {
      v32 = *(unsigned __int8 *)(*(_QWORD *)v33 + 8);
      v27 = v33;
      goto LABEL_38;
    }
    v30 = *(unsigned __int8 *)(v6 + 8);
    v27 = v33;
  }
  if (v30 && !*(_BYTE *)(a1 + 280))
  {
    v90 = *(_QWORD *)(a1 + 48);
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v90, "", 0);
    v92 = (llvm::Type *)IncompleteVirtualRegister;
    *(_QWORD *)(*(_QWORD *)(v90 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F98468;
    v93 = *(_QWORD *)(v90 + 8);
    if (v93)
      (*(void (**)(uint64_t))(*(_QWORD *)v93 + 24))(v93);
    v193 = 0;
    v194 = 0;
    v195 = 0;
    v191 = 0;
    v190 = 0;
    v188[0] = 0;
    v188[1] = llvm::ConstantFP::get((llvm::ConstantFP **)v6, v92, -8.50705917e37);
    v188[2] = llvm::ConstantFP::get((llvm::ConstantFP **)v6, v94, 0.25);
    v188[3] = llvm::ConstantFP::get((llvm::ConstantFP **)v6, v95, 1.0);
    v187 = xmmword_1C640F860;
    v172 = sub_1C5CC1648((uint64_t *)a1, (uint64_t)v198);
    LODWORD(v200) = v172;
    v96 = v199;
    v97 = sub_1C5CC1648((uint64_t *)a1, (uint64_t)v199);
    HIDWORD(v200) = v97;
    v189 = v97;
    v192 = (uint64_t)v96;
    v173 = IncompleteVirtualRegister;
    sub_1C47B1500(a1, 2, (const llvm::APFloat *)0xE, 0, IncompleteVirtualRegister, 0, 0, (uint64_t)&v192, &v189, v188, (unsigned int *)&v187);
    v98 = *(_QWORD *)(a1 + 48);
    v176 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v98, "", 0);
    *(_QWORD *)(*(_QWORD *)(v98 + 24) + 16 * (v176 & 0x7FFFFFFF)) = &off_1E7F98468;
    v99 = *(_QWORD *)(v98 + 8);
    if (v99)
      (*(void (**)(uint64_t))(*(_QWORD *)v99 + 24))(v99);
    v100 = *(_QWORD *)(a1 + 32);
    v101 = *(_QWORD *)(v100 + 640);
    v102 = *(unint64_t **)(v100 + 648);
    v103 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v104 = *(llvm::MachineFunction **)(v101 + 32);
    v105 = *(unsigned __int8 **)(a1 + 72);
    v186 = (const llvm::APInt *)v105;
    if (v105)
      llvm::MetadataTracking::track((uint64_t)&v186, v105, 2);
    v106 = *((_QWORD *)v104 + 28);
    if (v106)
      *((_QWORD *)v104 + 28) = *(_QWORD *)v106;
    else
      v106 = sub_1C484358C((uint64_t)v104 + 128, 72, 3);
    v201[0] = v186;
    if (v186)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v186, (unsigned __int8 *)v186, (uint64_t)v201);
      v186 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v106, v104, v103 + 61776, (unsigned __int8 **)v201, 0);
    if (v201[0])
      llvm::MetadataTracking::untrack((uint64_t)v201, (unsigned __int8 *)v201[0]);
    if (v186)
      llvm::MetadataTracking::untrack((uint64_t)&v186, (unsigned __int8 *)v186);
    v107 = *(_QWORD *)(v101 + 40);
    *(_QWORD *)(v106 + 24) = v107;
    v108 = *(_QWORD *)(v107 + 32);
    v109 = *(unsigned int *)(v106 + 40);
    if ((_DWORD)v109)
    {
      v150 = *(_QWORD *)(v106 + 32);
      v151 = *(_QWORD *)(v108 + 40);
      v152 = 32 * v109;
      do
      {
        if (!*(_BYTE *)v150)
        {
          v153 = *(unsigned int *)(v150 + 4);
          if ((int)v153 >= 0)
            v154 = (uint64_t *)(*(_QWORD *)(v151 + 272) + 8 * v153);
          else
            v154 = (uint64_t *)(*(_QWORD *)(v151 + 24) + 16 * (v153 & 0x7FFFFFFF) + 8);
          v155 = *v154;
          if (*v154)
          {
            v156 = *(_QWORD *)(v155 + 16);
            *(_QWORD *)(v155 + 16) = v150;
            *(_QWORD *)(v150 + 16) = v156;
            if ((*(_BYTE *)(v150 + 3) & 1) != 0)
            {
              *(_QWORD *)(v150 + 24) = v155;
            }
            else
            {
              *(_QWORD *)(v150 + 24) = 0;
              v154 = (uint64_t *)(v156 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v150 + 16) = v150;
            *(_QWORD *)(v150 + 24) = 0;
          }
          *v154 = v150;
        }
        v150 += 32;
        v152 -= 32;
      }
      while (v152);
    }
    v110 = *(_QWORD *)(v108 + 728);
    if (v110)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v110 + 24))(v110, v106);
    v111 = *v102 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v106 = v111 | *(_QWORD *)v106 & 7;
    *(_QWORD *)(v106 + 8) = v102;
    *(_QWORD *)(v111 + 8) = v106;
    *v102 = *v102 & 7 | v106;
    memset(&v201[1], 0, 24);
    LODWORD(v201[0]) = 0x1000000;
    HIDWORD(v201[0]) = v176;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v106, v104, (const llvm::MachineOperand *)v201);
    LODWORD(v201[0]) = 1;
    v201[1] = 0;
    v201[2] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v106, v104, (const llvm::MachineOperand *)v201);
    memset(&v201[1], 0, 24);
    LODWORD(v201[0]) = 0;
    HIDWORD(v201[0]) = v97;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v106, v104, (const llvm::MachineOperand *)v201);
    LODWORD(v201[0]) = 1;
    v201[1] = 0;
    v201[2] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v106, v104, (const llvm::MachineOperand *)v201);
    memset(&v201[1], 0, 24);
    LODWORD(v201[0]) = 0;
    HIDWORD(v201[0]) = v173;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v106, v104, (const llvm::MachineOperand *)v201);
    LODWORD(v201[0]) = 1;
    v201[1] = 0;
    v201[2] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v106, v104, (const llvm::MachineOperand *)v201);
    LODWORD(v201[0]) = 1;
    v201[1] = 0;
    v201[2] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v106, v104, (const llvm::MachineOperand *)v201);
    memset(v201, 0, 32);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v106, v104, (const llvm::MachineOperand *)v201);
    v112 = *(_QWORD *)(a1 + 48);
    v174 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v112, "", 0);
    *(_QWORD *)(*(_QWORD *)(v112 + 24) + 16 * (v174 & 0x7FFFFFFF)) = &off_1E7F98468;
    v113 = *(_QWORD *)(v112 + 8);
    if (v113)
      (*(void (**)(uint64_t))(*(_QWORD *)v113 + 24))(v113);
    v114 = *(_QWORD *)(a1 + 32);
    v115 = *(_QWORD *)(v114 + 640);
    v116 = *(unint64_t **)(v114 + 648);
    v117 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v118 = *(llvm::MachineFunction **)(v115 + 32);
    v119 = *(unsigned __int8 **)(a1 + 72);
    v186 = (const llvm::APInt *)v119;
    if (v119)
      llvm::MetadataTracking::track((uint64_t)&v186, v119, 2);
    v120 = *((_QWORD *)v118 + 28);
    if (v120)
      *((_QWORD *)v118 + 28) = *(_QWORD *)v120;
    else
      v120 = sub_1C484358C((uint64_t)v118 + 128, 72, 3);
    v201[0] = v186;
    if (v186)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v186, (unsigned __int8 *)v186, (uint64_t)v201);
      v186 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v120, v118, v117 + 61776, (unsigned __int8 **)v201, 0);
    if (v201[0])
      llvm::MetadataTracking::untrack((uint64_t)v201, (unsigned __int8 *)v201[0]);
    if (v186)
      llvm::MetadataTracking::untrack((uint64_t)&v186, (unsigned __int8 *)v186);
    v121 = *(_QWORD *)(v115 + 40);
    *(_QWORD *)(v120 + 24) = v121;
    v122 = *(_QWORD *)(v121 + 32);
    v123 = *(unsigned int *)(v120 + 40);
    if ((_DWORD)v123)
    {
      v157 = *(_QWORD *)(v120 + 32);
      v158 = *(_QWORD *)(v122 + 40);
      v159 = 32 * v123;
      do
      {
        if (!*(_BYTE *)v157)
        {
          v160 = *(unsigned int *)(v157 + 4);
          if ((int)v160 >= 0)
            v161 = (uint64_t *)(*(_QWORD *)(v158 + 272) + 8 * v160);
          else
            v161 = (uint64_t *)(*(_QWORD *)(v158 + 24) + 16 * (v160 & 0x7FFFFFFF) + 8);
          v162 = *v161;
          if (*v161)
          {
            v163 = *(_QWORD *)(v162 + 16);
            *(_QWORD *)(v162 + 16) = v157;
            *(_QWORD *)(v157 + 16) = v163;
            if ((*(_BYTE *)(v157 + 3) & 1) != 0)
            {
              *(_QWORD *)(v157 + 24) = v162;
            }
            else
            {
              *(_QWORD *)(v157 + 24) = 0;
              v161 = (uint64_t *)(v163 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v157 + 16) = v157;
            *(_QWORD *)(v157 + 24) = 0;
          }
          *v161 = v157;
        }
        v157 += 32;
        v159 -= 32;
      }
      while (v159);
    }
    v124 = *(_QWORD *)(v122 + 728);
    if (v124)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v124 + 24))(v124, v120);
    v125 = *v116 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v120 = v125 | *(_QWORD *)v120 & 7;
    *(_QWORD *)(v120 + 8) = v116;
    *(_QWORD *)(v125 + 8) = v120;
    *v116 = *v116 & 7 | v120;
    memset(&v201[1], 0, 24);
    LODWORD(v201[0]) = 0x1000000;
    HIDWORD(v201[0]) = v174;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v120, v118, (const llvm::MachineOperand *)v201);
    LODWORD(v201[0]) = 1;
    v201[1] = 0;
    v201[2] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v120, v118, (const llvm::MachineOperand *)v201);
    memset(&v201[1], 0, 24);
    LODWORD(v201[0]) = 0;
    HIDWORD(v201[0]) = v172;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v120, v118, (const llvm::MachineOperand *)v201);
    LODWORD(v201[0]) = 1;
    v201[1] = 0;
    v201[2] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v120, v118, (const llvm::MachineOperand *)v201);
    memset(&v201[1], 0, 24);
    LODWORD(v201[0]) = 0;
    HIDWORD(v201[0]) = v173;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v120, v118, (const llvm::MachineOperand *)v201);
    LODWORD(v201[0]) = 1;
    v201[1] = 0;
    v201[2] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v120, v118, (const llvm::MachineOperand *)v201);
    LODWORD(v201[0]) = 1;
    v201[1] = 0;
    v201[2] = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v120, v118, (const llvm::MachineOperand *)v201);
    memset(v201, 0, 32);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v120, v118, (const llvm::MachineOperand *)v201);
    v126 = *(_QWORD *)(a1 + 48);
    v37 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v126, "", 0);
    *(_QWORD *)(*(_QWORD *)(v126 + 24) + 16 * (v37 & 0x7FFFFFFF)) = &off_1E7F98468;
    v127 = *(_QWORD *)(v126 + 8);
    if (v127)
      (*(void (**)(uint64_t))(*(_QWORD *)v127 + 24))(v127);
    v128 = *(_QWORD *)(a1 + 32);
    v129 = *(_QWORD *)(v128 + 640);
    v130 = *(unint64_t **)(v128 + 648);
    v131 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
    v132 = *(llvm::MachineFunction **)(v129 + 32);
    v133 = *(unsigned __int8 **)(a1 + 72);
    v186 = (const llvm::APInt *)v133;
    if (v133)
      llvm::MetadataTracking::track((uint64_t)&v186, v133, 2);
    v134 = *((_QWORD *)v132 + 28);
    if (v134)
      *((_QWORD *)v132 + 28) = *(_QWORD *)v134;
    else
      v134 = sub_1C484358C((uint64_t)v132 + 128, 72, 3);
    v201[0] = v186;
    if (v186)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v186, (unsigned __int8 *)v186, (uint64_t)v201);
      v186 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v134, v132, v131 + 62928, (unsigned __int8 **)v201, 0);
    if (v201[0])
      llvm::MetadataTracking::untrack((uint64_t)v201, (unsigned __int8 *)v201[0]);
    if (v186)
      llvm::MetadataTracking::untrack((uint64_t)&v186, (unsigned __int8 *)v186);
    v135 = *(_QWORD *)(v129 + 40);
    *(_QWORD *)(v134 + 24) = v135;
    v136 = *(_QWORD *)(v135 + 32);
    v137 = *(unsigned int *)(v134 + 40);
    if ((_DWORD)v137)
    {
      v164 = *(_QWORD *)(v134 + 32);
      v165 = *(_QWORD *)(v136 + 40);
      v166 = 32 * v137;
      do
      {
        if (!*(_BYTE *)v164)
        {
          v167 = *(unsigned int *)(v164 + 4);
          if ((int)v167 >= 0)
            v168 = (uint64_t *)(*(_QWORD *)(v165 + 272) + 8 * v167);
          else
            v168 = (uint64_t *)(*(_QWORD *)(v165 + 24) + 16 * (v167 & 0x7FFFFFFF) + 8);
          v169 = *v168;
          if (*v168)
          {
            v170 = *(_QWORD *)(v169 + 16);
            *(_QWORD *)(v169 + 16) = v164;
            *(_QWORD *)(v164 + 16) = v170;
            if ((*(_BYTE *)(v164 + 3) & 1) != 0)
            {
              *(_QWORD *)(v164 + 24) = v169;
            }
            else
            {
              *(_QWORD *)(v164 + 24) = 0;
              v168 = (uint64_t *)(v170 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v164 + 16) = v164;
            *(_QWORD *)(v164 + 24) = 0;
          }
          *v168 = v164;
        }
        v164 += 32;
        v166 -= 32;
      }
      while (v166);
    }
    v138 = *(_QWORD *)(v136 + 728);
    if (v138)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v138 + 24))(v138, v134);
    v139 = *v130 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v134 = v139 | *(_QWORD *)v134 & 7;
    *(_QWORD *)(v134 + 8) = v130;
    *(_QWORD *)(v139 + 8) = v134;
    *v130 = *v130 & 7 | v134;
    memset(&v201[1], 0, 24);
    LODWORD(v201[0]) = 0x1000000;
    HIDWORD(v201[0]) = v37;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v134, v132, (const llvm::MachineOperand *)v201);
    LODWORD(v201[0]) = 1;
    *(_OWORD *)&v201[1] = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v134, v132, (const llvm::MachineOperand *)v201);
    memset(&v201[1], 0, 24);
    LODWORD(v201[0]) = 0;
    HIDWORD(v201[0]) = v176;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v134, v132, (const llvm::MachineOperand *)v201);
    LODWORD(v201[0]) = 1;
    *(_OWORD *)&v201[1] = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v134, v132, (const llvm::MachineOperand *)v201);
    LODWORD(v201[0]) = 1;
    *(_OWORD *)&v201[1] = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v134, v132, (const llvm::MachineOperand *)v201);
    memset(v201, 0, 32);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v134, v132, (const llvm::MachineOperand *)v201);
    v13 = 0;
    v28 = 0;
    v27 = 0;
    v196 = 0u;
    v197 = 0u;
    v36 = v174;
    v200 = __PAIR64__(v174, v37);
    v38 = v31;
    HIBYTE(v185) = 0;
LABEL_42:
    if (((v11 - 14) & 0xFFFFFFFD) != 0)
      v39 = 1;
    else
      v39 = 3;
    if (a6 != 1)
      v39 = 0;
    if (v11 == 16)
      v39 ^= 2u;
    v41 = v11 == 18 || v11 == 21;
    if (v27)
      v42 = v41;
    else
      v42 = 0;
    if (v39 == 1 && v42)
      v43 = 2;
    else
      v43 = v39;
    v175 = v41;
    if (v28)
    {
      v197 = vextq_s8(v197, v197, 8uLL);
      v200 = __PAIR64__(v37, v36);
      *(_QWORD *)&v196 = v27;
      *((_QWORD *)&v196 + 1) = v28;
      v184 = v38;
      LOBYTE(v185) = v31;
      v43 = __rbit32(v43) >> 30;
      v181 = v28;
    }
    else
    {
      v181 = v27;
    }
    v44 = 0;
    v45 = 1;
    v188[0] = 0;
    while (1)
    {
      v46 = v45;
      if (((v43 >> v44) & 1) != 0)
        *((_DWORD *)v188 + v44) = 2;
      v47 = &v197.i64[v44];
      if (*v47)
      {
        v48 = sub_1C47AE068((uint64_t)v183, v47, (int *)v188 + v44, &v184 + v44, v13, *((_QWORD *)a2 + 5), 7, 1);
        *((_DWORD *)&v201[-1] + v44) = v48;
        if (!v48)
          break;
      }
      v45 = 0;
      v44 = 1;
      if ((v46 & 1) == 0)
      {
        if (!sub_1C47ADC3C((uint64_t)v183, (uint64_t)a2, v197.i64, &v200, (int *)v188, (_BYTE *)&v185 + 1, &v184, 2u))return 0;
        v49 = v185;
        if (v181)
          v49 = 2;
        v50 = (char *)&unk_1C640FB8A + 48 * v175 + 24 * (a4 == 1) + 12 * v184 + 4 * v49 + 2 * a5;
        v182 = HIBYTE(v185);
        if (HIBYTE(v185))
          v50 = (char *)&unk_1C640FBEA + 8 * v175 + 4 * (v49 - 1) + 2 * a5;
        v51 = *(unsigned __int16 *)v50;
        v52 = v183[4];
        v53 = *(_QWORD *)(v52 + 640);
        v54 = *(unint64_t **)(v52 + 648);
        v55 = *(_QWORD *)(v183[12] + 8);
        v56 = *(llvm::MachineFunction **)(v53 + 32);
        v57 = (llvm::MachineFunction *)v183[9];
        v192 = (uint64_t)v57;
        if (v57)
          llvm::MetadataTracking::track((uint64_t)&v192, (unsigned __int8 *)v57, 2);
        v58 = v55 + 48 * v51;
        v59 = *((_QWORD *)v56 + 28);
        if (v59)
          *((_QWORD *)v56 + 28) = *(_QWORD *)v59;
        else
          v59 = sub_1C484358C((uint64_t)v56 + 128, 72, 3);
        v201[0] = (const llvm::APInt *)v192;
        if (v192)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v192, (unsigned __int8 *)v192, (uint64_t)v201);
          v192 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v59, v56, v58, (unsigned __int8 **)v201, 0);
        if (v201[0])
          llvm::MetadataTracking::untrack((uint64_t)v201, (unsigned __int8 *)v201[0]);
        if (v192)
          llvm::MetadataTracking::untrack((uint64_t)&v192, (unsigned __int8 *)v192);
        v62 = *(_QWORD *)(v53 + 40);
        *(_QWORD *)(v59 + 24) = v62;
        v63 = *(_QWORD *)(v62 + 32);
        v64 = *(unsigned int *)(v59 + 40);
        if ((_DWORD)v64)
        {
          v143 = *(_QWORD *)(v59 + 32);
          v144 = *(_QWORD *)(v63 + 40);
          v145 = 32 * v64;
          do
          {
            if (!*(_BYTE *)v143)
            {
              v146 = *(unsigned int *)(v143 + 4);
              if ((int)v146 >= 0)
                v147 = (uint64_t *)(*(_QWORD *)(v144 + 272) + 8 * v146);
              else
                v147 = (uint64_t *)(*(_QWORD *)(v144 + 24) + 16 * (v146 & 0x7FFFFFFF) + 8);
              v148 = *v147;
              if (*v147)
              {
                v149 = *(_QWORD *)(v148 + 16);
                *(_QWORD *)(v148 + 16) = v143;
                *(_QWORD *)(v143 + 16) = v149;
                if ((*(_BYTE *)(v143 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v143 + 24) = v148;
                }
                else
                {
                  *(_QWORD *)(v143 + 24) = 0;
                  v147 = (uint64_t *)(v149 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v143 + 16) = v143;
                *(_QWORD *)(v143 + 24) = 0;
              }
              *v147 = v143;
            }
            v143 += 32;
            v145 -= 32;
          }
          while (v145);
        }
        v65 = *(_QWORD *)(v63 + 728);
        if (v65)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v65 + 24))(v65, v59);
        v66 = *v54 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v59 = v66 | *(_QWORD *)v59 & 7;
        *(_QWORD *)(v59 + 8) = v54;
        *(_QWORD *)(v66 + 8) = v59;
        *v54 = *v54 & 7 | v59;
        memset(&v201[1], 0, 24);
        LODWORD(v201[0]) = 0x1000000;
        HIDWORD(v201[0]) = v177;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)v201);
        LODWORD(v201[0]) = 1;
        v201[1] = 0;
        v201[2] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v59, v56, (const llvm::MachineOperand *)v201);
        v67 = 0;
        v192 = (uint64_t)v56;
        v193 = (llvm::MachineInstr *)v59;
        v68 = 1;
        do
        {
          v69 = v68;
          v70 = (_QWORD *)*((_QWORD *)&v196 + v67);
          if (v70)
          {
            v71 = *(unsigned __int8 *)(*v70 + 8);
            v73 = (void *)v70[4];
            v72 = (llvm::detail::DoubleAPFloat *)(v70 + 4);
            if (v73 == &unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::bitcastToAPInt(v72, (unsigned int *)v201);
            else
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v72, (unsigned int *)v201);
            v74 = v201;
            if (LODWORD(v201[1]) >= 0x41)
              v74 = (const llvm::APInt **)v201[0];
            v75 = (uint64_t)*v74;
            if (LODWORD(v201[1]) >= 0x41 && v201[0] != 0)
              MEMORY[0x1CAA32F9C]();
            v77 = v75 | 0x100000000;
            if (v71)
              v77 = v75;
            v78 = 0x80000000;
            if (!v71)
              v78 = 0x8000;
            if ((*((_DWORD *)v188 + v67) & 2) != 0)
              v79 = v78;
            else
              v79 = 0;
            v81 = (llvm::MachineFunction *)v192;
            v80 = v193;
            LODWORD(v201[0]) = 1;
            v82 = (const llvm::APInt *)(v79 ^ v77);
          }
          else
          {
            v83 = (_BYTE *)v197.i64[v67];
            if (!v83 || (sub_1C47ADDC8((uint64_t)v183, v83, v182 != 0, (llvm::MachineFunction **)&v192, 0) & 1) == 0)
            {
              v84 = *((_DWORD *)&v201[-1] + v67);
              memset(&v201[1], 0, 24);
              LODWORD(v201[0]) = 0;
              HIDWORD(v201[0]) = v84;
              llvm::MachineInstr::addOperand(v193, (llvm::MachineFunction *)v192, (const llvm::MachineOperand *)v201);
            }
            v82 = (const llvm::APInt *)*((unsigned int *)v188 + v67);
            v81 = (llvm::MachineFunction *)v192;
            v80 = v193;
            LODWORD(v201[0]) = 1;
          }
          v201[1] = 0;
          v201[2] = v82;
          llvm::MachineInstr::addOperand(v80, v81, (const llvm::MachineOperand *)v201);
          v68 = 0;
          v67 = 1;
        }
        while ((v69 & 1) != 0);
        v60 = 1;
        LODWORD(v201[0]) = 1;
        v201[1] = 0;
        v201[2] = 0;
        llvm::MachineInstr::addOperand(v193, (llvm::MachineFunction *)v192, (const llvm::MachineOperand *)v201);
        memset(v201, 0, 32);
        llvm::MachineInstr::addOperand(v193, (llvm::MachineFunction *)v192, (const llvm::MachineOperand *)v201);
        return v60;
      }
    }
    return 0;
  }
  v85 = v27;
  v86 = *(_QWORD *)(a1 + 48);
  v36 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v86, "", 0);
  *(_QWORD *)(*(_QWORD *)(v86 + 24) + 16 * (v36 & 0x7FFFFFFF)) = &off_1E7F98468;
  v87 = *(_QWORD *)(v86 + 8);
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 24))(v87);
  v88 = *((_DWORD *)a2 + 5);
  if ((v88 & 0x40000000) != 0)
    v89 = (unsigned __int8 *)*((_QWORD *)a2 - 1);
  else
    v89 = &a2[-32 * (v88 & 0x7FFFFFF)];
  v60 = 0;
  if (sub_1C47B1160((_QWORD *)a1, (uint64_t *)a2, *((_BYTE **)v89 + 4), v36, 423, 0))
  {
    v38 = 0;
    v13 = 0;
    v37 = 0;
    v197.i64[1] = 0;
    HIDWORD(v200) = v36;
    v185 = 0;
    v27 = v85;
    goto LABEL_42;
  }
  return v60;
}

uint64_t sub_1C47B1140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::detail::DoubleAPFloat *v3;
  void *v4;
  llvm::detail::DoubleAPFloat *v5;

  v4 = *(void **)(a1 + 8);
  v3 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v5 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v4 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::divide(v3, v5, a3);
  else
    return llvm::detail::IEEEFloat::divide(v3, v5, a3);
}

uint64_t sub_1C47B1160(_QWORD *a1, uint64_t *a2, _BYTE *a3, int a4, int a5, int a6)
{
  int v6;
  char v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  llvm::MachineFunction *v21;
  llvm::MachineFunction *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::MachineFunction *v39;
  llvm::MachineInstr *v40;
  unsigned int v41;
  _BYTE *v42;
  BOOL v43;
  __int128 v44;
  __int128 v45;

  v6 = *(unsigned __int8 *)(*a2 + 8);
  if ((v6 | 2) == 2)
  {
    v43 = v6 == 0;
    v42 = a3;
    v41 = 0;
    v11 = 1;
    if (a5 == 423 && a6 != 1)
      v11 = *(_BYTE *)(a1[32] + 294) == 0;
    v12 = sub_1C47AE068((uint64_t)a1, (uint64_t *)&v42, (int *)&v41, &v43, 0, a2[5], 6, v11);
    if (v12)
    {
      v13 = v12;
      if (a5 <= 423)
      {
        v14 = 1;
        v15 = 3;
        if (a5 == 234)
          v15 = 0;
        if (a5 != 231)
          v14 = v15;
LABEL_18:
        v16 = word_1C640FD4E[4 * v14 + 2 * (a6 == 1) + v43];
        v17 = a1[4];
        v18 = *(_QWORD *)(v17 + 640);
        v19 = *(unint64_t **)(v17 + 648);
        v20 = *(_QWORD *)(a1[12] + 8);
        v21 = *(llvm::MachineFunction **)(v18 + 32);
        v22 = (llvm::MachineFunction *)a1[9];
        v39 = v22;
        if (v22)
          llvm::MetadataTracking::track((uint64_t)&v39, (unsigned __int8 *)v22, 2);
        v23 = v20 + 48 * v16;
        v24 = *((_QWORD *)v21 + 28);
        if (v24)
          *((_QWORD *)v21 + 28) = *(_QWORD *)v24;
        else
          v24 = sub_1C484358C((uint64_t)v21 + 128, 72, 3);
        *(_QWORD *)&v44 = v39;
        if (v39)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v39, (unsigned __int8 *)v39, (uint64_t)&v44);
          v39 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v24, v21, v23, (unsigned __int8 **)&v44, 0);
        if ((_QWORD)v44)
          llvm::MetadataTracking::untrack((uint64_t)&v44, (unsigned __int8 *)v44);
        if (v39)
          llvm::MetadataTracking::untrack((uint64_t)&v39, (unsigned __int8 *)v39);
        v26 = *(_QWORD *)(v18 + 40);
        *(_QWORD *)(v24 + 24) = v26;
        v27 = *(_QWORD *)(v26 + 32);
        v28 = *(unsigned int *)(v24 + 40);
        if ((_DWORD)v28)
        {
          v32 = *(_QWORD *)(v24 + 32);
          v33 = *(_QWORD *)(v27 + 40);
          v34 = 32 * v28;
          do
          {
            if (!*(_BYTE *)v32)
            {
              v35 = *(unsigned int *)(v32 + 4);
              if ((int)v35 >= 0)
                v36 = (uint64_t *)(*(_QWORD *)(v33 + 272) + 8 * v35);
              else
                v36 = (uint64_t *)(*(_QWORD *)(v33 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
              v37 = *v36;
              if (*v36)
              {
                v38 = *(_QWORD *)(v37 + 16);
                *(_QWORD *)(v37 + 16) = v32;
                *(_QWORD *)(v32 + 16) = v38;
                if ((*(_BYTE *)(v32 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v32 + 24) = v37;
                }
                else
                {
                  *(_QWORD *)(v32 + 24) = 0;
                  v36 = (uint64_t *)(v38 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v32 + 16) = v32;
                *(_QWORD *)(v32 + 24) = 0;
              }
              *v36 = v32;
            }
            v32 += 32;
            v34 -= 32;
          }
          while (v34);
        }
        v29 = *(_QWORD *)(v27 + 728);
        if (v29)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v29 + 24))(v29, v24);
        v30 = *v19 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v24 = v30 | *(_QWORD *)v24 & 7;
        *(_QWORD *)(v24 + 8) = v19;
        *(_QWORD *)(v30 + 8) = v24;
        *v19 = *v19 & 7 | v24;
        *((_QWORD *)&v44 + 1) = 0;
        v45 = 0uLL;
        LODWORD(v44) = 0x1000000;
        DWORD1(v44) = a4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v44);
        v39 = v21;
        v40 = (llvm::MachineInstr *)v24;
        LODWORD(v44) = 1;
        *((_QWORD *)&v44 + 1) = 0;
        *(_QWORD *)&v45 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v44);
        if (v42)
        {
          if ((sub_1C47ADDC8((uint64_t)a1, v42, 0, &v39, 0) & 1) != 0)
          {
LABEL_37:
            v25 = 1;
            LODWORD(v44) = 1;
            *((_QWORD *)&v44 + 1) = 0;
            *(_QWORD *)&v45 = v41;
            llvm::MachineInstr::addOperand(v40, v39, (const llvm::MachineOperand *)&v44);
            LODWORD(v44) = 1;
            *((_QWORD *)&v44 + 1) = 0;
            *(_QWORD *)&v45 = 0;
            llvm::MachineInstr::addOperand(v40, v39, (const llvm::MachineOperand *)&v44);
            v44 = 0u;
            v45 = 0u;
            llvm::MachineInstr::addOperand(v40, v39, (const llvm::MachineOperand *)&v44);
            return v25;
          }
          v21 = v39;
          v24 = (unint64_t)v40;
        }
        *((_QWORD *)&v44 + 1) = 0;
        v45 = 0uLL;
        LODWORD(v44) = 0;
        DWORD1(v44) = v13;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v44);
        goto LABEL_37;
      }
      if (a5 == 424)
      {
        v14 = 2;
        goto LABEL_18;
      }
      if (a5 == 426)
      {
        v14 = 5;
        goto LABEL_18;
      }
      if (*(_BYTE *)(a1[32] + 280))
      {
        v14 = 4;
        goto LABEL_18;
      }
    }
  }
  return 0;
}

void sub_1C47B1500(uint64_t a1, int a2, const llvm::APFloat *a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int *a9, _QWORD *a10, unsigned int *a11)
{
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  _BOOL4 v17;
  char v18;
  int v19;
  _BOOL4 v21;
  uint64_t v23;
  __int128 *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _BOOL4 v35;
  llvm::detail::DoubleAPFloat *v36;
  void *v37;
  __int128 *v38;
  int v39;
  _BOOL4 v40;
  int v41;
  _BOOL4 v42;
  int v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _BOOL4 v50;
  llvm::detail::DoubleAPFloat *v51;
  void *v52;
  __int128 *v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  llvm::MachineFunction *v60;
  llvm::MachineFunction *v61;
  uint64_t v62;
  unint64_t v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  int v74;
  BOOL v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  _BYTE *v79;
  int v80;
  llvm::detail::DoubleAPFloat *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  llvm::MachineInstr *v85;
  llvm::MachineFunction *v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  llvm::detail::DoubleAPFloat *v91;
  void *v92;
  __int128 *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  llvm::detail::DoubleAPFloat *v100;
  void *v101;
  __int128 *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  _BOOL4 v106;
  unsigned int v107;
  uint64_t v108;
  _UNKNOWN ***v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  llvm::MachineFunction *v115;
  llvm::MachineFunction *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unsigned __int8 *v125;
  int v126;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  _BYTE *v131;
  int v132;
  llvm::detail::DoubleAPFloat *v133;
  uint64_t *v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t *v139;
  uint64_t v140;
  llvm::MachineFunction *v141;
  llvm::MachineFunction *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  _BYTE *v150;
  char v151;
  int v152;
  unsigned __int8 *v153;
  int v154;
  llvm::detail::DoubleAPFloat *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _BOOL4 v183;
  int v184;
  _BOOL4 v185;
  unsigned int v186;
  int IncompleteVirtualRegister;
  _QWORD *v190;
  llvm::MachineFunction *v192;
  llvm::MachineInstr *v193;
  llvm::MachineFunction *v194;
  llvm::MachineInstr *v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;

  v11 = a3;
  v198 = *MEMORY[0x1E0C80C00];
  v190 = (_QWORD *)a1;
  if ((a3 & 2) != 0)
  {
    v13 = a10[1];
    if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 281))
    {
      if (*(_UNKNOWN **)(v13 + 32) == &unk_1C866F1C0)
        v14 = *(_QWORD *)(v13 + 40);
      else
        v14 = v13 + 24;
      v15 = (*(_BYTE *)(v14 + 28) & 7) == 3;
    }
    else
    {
      v15 = 0;
    }
    if ((a11[1] & 2) != 0)
    {
      v16 = *(_QWORD *)(v13 + 32);
      v17 = v15;
      if ((_UNKNOWN *)v16 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v196 + 8), (const llvm::detail::DoubleAPFloat *)(v13 + 32));
      }
      else
      {
        *((_QWORD *)&v196 + 1) = *(_QWORD *)(v13 + 32);
        if ((*(_DWORD *)(v16 + 8) + 64) >= 0x80)
        {
          a1 = operator new[]();
          *(_QWORD *)&v197 = a1;
        }
        v18 = *(_BYTE *)(v13 + 52);
        v19 = v18 & 7;
        BYTE12(v197) = v18 & 0xF;
        DWORD2(v197) = *(_DWORD *)(v13 + 48);
        v21 = (v18 & 6) != 0 && v19 != 3;
        if (v19 == 1 || v21)
        {
          v23 = *(unsigned int *)(v16 + 8);
          if ((v23 - 64) <= 0xFFFFFF7F)
            v24 = (__int128 *)a1;
          else
            v24 = &v197;
          v25 = (uint64_t *)(v13 + 40);
          if ((*(_DWORD *)(*(_QWORD *)(v13 + 32) + 8) - 64) < 0xFFFFFF80)
            v25 = *(uint64_t **)(v13 + 40);
          if (v23 <= 0xFFFFFFBF)
          {
            v26 = (unint64_t)(v23 + 64) >> 6;
            do
            {
              v27 = *v25++;
              *(_QWORD *)v24 = v27;
              v24 = (__int128 *)((char *)v24 + 8);
              --v26;
            }
            while (v26);
          }
        }
      }
      if (*((_UNKNOWN **)&v196 + 1) == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)((char *)&v196 + 8));
      else
        BYTE12(v197) ^= 8u;
      a10[1] = llvm::ConstantFP::get(**(llvm::ConstantFP ***)v13, (llvm::LLVMContext *)&v196, a3);
      a11[1] ^= 2u;
      if (*((_UNKNOWN **)&v196 + 1) == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v197);
        v15 = v17;
      }
      else
      {
        v15 = v17;
        if ((*(_DWORD *)(*((_QWORD *)&v196 + 1) + 8) - 64) <= 0xFFFFFF7F && (_QWORD)v197)
        {
          MEMORY[0x1CAA32F9C](v197, 0x1000C8000313F17);
          v15 = v17;
        }
      }
    }
  }
  else
  {
    v15 = 0;
  }
  if ((v11 & 4) != 0)
  {
    v29 = a10[2];
    v30 = *(unsigned __int8 *)(v29 + 16);
    if (v29)
      v31 = v30 == 17;
    else
      v31 = 0;
    if (v31)
    {
      v35 = v15;
      v37 = *(void **)(v29 + 32);
      v36 = (llvm::detail::DoubleAPFloat *)(v29 + 32);
      if (v37 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v36, (unsigned int *)&v196);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v36, (unsigned int *)&v196);
      if (DWORD2(v196) >= 0x41)
        v38 = (__int128 *)v196;
      else
        v38 = &v196;
      v34 = *(_QWORD **)v38;
      if (DWORD2(v196) >= 0x41 && (_QWORD)v196)
        MEMORY[0x1CAA32F9C]();
      v15 = v35;
    }
    else
    {
      if (v30 == 16)
        v32 = a10[2];
      else
        v32 = 0;
      v33 = (_QWORD *)(v32 + 24);
      if (*(_DWORD *)(v32 + 32) >= 0x41u)
        v33 = (_QWORD *)*v33;
      v34 = (_QWORD *)*v33;
    }
    if ((_DWORD)v34 == 1)
      v39 = 1;
    else
      v39 = 2;
    if ((_DWORD)v34)
      v28 = v39;
    else
      v28 = 0;
  }
  else
  {
    v28 = 3;
  }
  if ((v11 & 8) != 0)
  {
    v44 = a10[3];
    v45 = *(unsigned __int8 *)(v44 + 16);
    if (v44)
      v46 = v45 == 17;
    else
      v46 = 0;
    if (v46)
    {
      v50 = v15;
      v52 = *(void **)(v44 + 32);
      v51 = (llvm::detail::DoubleAPFloat *)(v44 + 32);
      if (v52 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v51, (unsigned int *)&v196);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v51, (unsigned int *)&v196);
      if (DWORD2(v196) >= 0x41)
        v53 = (__int128 *)v196;
      else
        v53 = &v196;
      v49 = *(_QWORD **)v53;
      if (DWORD2(v196) >= 0x41 && (_QWORD)v196)
        MEMORY[0x1CAA32F9C]();
      v15 = v50;
    }
    else
    {
      if (v45 == 16)
        v47 = a10[3];
      else
        v47 = 0;
      v48 = (_QWORD *)(v47 + 24);
      if (*(_DWORD *)(v47 + 32) >= 0x41u)
        v48 = (_QWORD *)*v48;
      v49 = (_QWORD *)*v48;
    }
    if ((_DWORD)v49 == 1)
      v54 = 1;
    else
      v54 = 2;
    if ((_DWORD)v49)
      v41 = v54;
    else
      v41 = 0;
    v40 = v28 == 0;
    if (!v28 && (_DWORD)v49 == 1)
    {
      v42 = 0;
      v43 = 0;
      v40 = 1;
      v41 = 1;
      goto LABEL_95;
    }
  }
  else
  {
    v40 = v28 == 0;
    v41 = 3;
  }
  v42 = v41 != 0;
  if (v41)
    v43 = 1;
  else
    v43 = v28 != 1;
LABEL_95:
  if ((a2 - 1) >= 6)
    a2 = 0;
  if (v42 && (v15 & v43) != 0)
  {
    v55 = sub_1C47C0074(a2);
    v56 = v190[4];
    v57 = *(_QWORD *)(v56 + 640);
    v58 = *(unint64_t **)(v56 + 648);
    v59 = *(_QWORD *)(v190[12] + 8);
    v60 = *(llvm::MachineFunction **)(v57 + 32);
    v61 = (llvm::MachineFunction *)v190[9];
    v194 = v61;
    if (v61)
      llvm::MetadataTracking::track((uint64_t)&v194, (unsigned __int8 *)v61, 2);
    v62 = v59 + 48 * v55;
    v63 = *((_QWORD *)v60 + 28);
    if (v63)
      *((_QWORD *)v60 + 28) = *(_QWORD *)v63;
    else
      v63 = sub_1C484358C((uint64_t)v60 + 128, 72, 3);
    *(_QWORD *)&v196 = v194;
    if (v194)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v194, (unsigned __int8 *)v194, (uint64_t)&v196);
      v194 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v63, v60, v62, (unsigned __int8 **)&v196, 0);
    if ((_QWORD)v196)
      llvm::MetadataTracking::untrack((uint64_t)&v196, (unsigned __int8 *)v196);
    if (v194)
      llvm::MetadataTracking::untrack((uint64_t)&v194, (unsigned __int8 *)v194);
    v65 = *(_QWORD *)(v57 + 40);
    *(_QWORD *)(v63 + 24) = v65;
    v66 = *(_QWORD *)(v65 + 32);
    v67 = *(unsigned int *)(v63 + 40);
    if ((_DWORD)v67)
    {
      v168 = *(_QWORD *)(v63 + 32);
      v169 = *(_QWORD *)(v66 + 40);
      v170 = 32 * v67;
      do
      {
        if (!*(_BYTE *)v168)
        {
          v171 = *(unsigned int *)(v168 + 4);
          if ((int)v171 >= 0)
            v172 = (uint64_t *)(*(_QWORD *)(v169 + 272) + 8 * v171);
          else
            v172 = (uint64_t *)(*(_QWORD *)(v169 + 24) + 16 * (v171 & 0x7FFFFFFF) + 8);
          v173 = *v172;
          if (*v172)
          {
            v174 = *(_QWORD *)(v173 + 16);
            *(_QWORD *)(v173 + 16) = v168;
            *(_QWORD *)(v168 + 16) = v174;
            if ((*(_BYTE *)(v168 + 3) & 1) != 0)
            {
              *(_QWORD *)(v168 + 24) = v173;
            }
            else
            {
              *(_QWORD *)(v168 + 24) = 0;
              v172 = (uint64_t *)(v174 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v168 + 16) = v168;
            *(_QWORD *)(v168 + 24) = 0;
          }
          *v172 = v168;
        }
        v168 += 32;
        v170 -= 32;
      }
      while (v170);
    }
    v68 = *(_QWORD *)(v66 + 728);
    if (v68)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v68 + 24))(v68, v63);
    v69 = *v58 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v63 = v69 | *(_QWORD *)v63 & 7;
    *(_QWORD *)(v63 + 8) = v58;
    *(_QWORD *)(v69 + 8) = v63;
    *v58 = *v58 & 7 | v63;
    *((_QWORD *)&v196 + 1) = 0;
    v197 = 0uLL;
    LODWORD(v196) = 0x1000000;
    DWORD1(v196) = a5;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v63, v60, (const llvm::MachineOperand *)&v196);
    LODWORD(v196) = 1;
    *((_QWORD *)&v196 + 1) = 0;
    *(_QWORD *)&v197 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v63, v60, (const llvm::MachineOperand *)&v196);
    v194 = v60;
    v195 = (llvm::MachineInstr *)v63;
    if (*(_QWORD *)a8)
    {
      if ((sub_1C47ADDC8((uint64_t)v190, *(_BYTE **)a8, 0, &v194, 0) & 1) != 0)
        goto LABEL_125;
      v60 = v194;
      v63 = (unint64_t)v195;
    }
    v70 = *a9;
    *((_QWORD *)&v196 + 1) = 0;
    v197 = 0uLL;
    LODWORD(v196) = 0;
    DWORD1(v196) = v70;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v63, v60, (const llvm::MachineOperand *)&v196);
LABEL_125:
    v71 = *a11;
    LODWORD(v196) = 1;
    *((_QWORD *)&v196 + 1) = 0;
    *(_QWORD *)&v197 = v71;
    llvm::MachineInstr::addOperand(v195, v194, (const llvm::MachineOperand *)&v196);
    v72 = 3;
    do
    {
      if (((v11 >> v72) & 1) != 0)
      {
        v73 = (unsigned __int8 *)a10[v72];
        v74 = v73[16];
        if (v73)
          v75 = v74 == 17;
        else
          v75 = 0;
        if (v75)
        {
          v81 = (llvm::detail::DoubleAPFloat *)(v73 + 32);
          if (*((_UNKNOWN **)v73 + 4) == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v81, (unsigned int *)&v196);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v81, (unsigned int *)&v196);
          if (DWORD2(v196) >= 0x41)
            v82 = (unint64_t *)v196;
          else
            v82 = (unint64_t *)&v196;
          v83 = *v82;
          if (DWORD2(v196) >= 0x41 && (_QWORD)v196)
            MEMORY[0x1CAA32F9C](v196);
          if (*(_BYTE *)(*(_QWORD *)v73 + 8))
            v78 = v83;
          else
            v78 = v83 | 0x100000000;
        }
        else
        {
          if (v74 == 16)
            v76 = a10[v72];
          else
            v76 = 0;
          v77 = (unint64_t *)(v76 + 24);
          if (*(_DWORD *)(v76 + 32) >= 0x41u)
            v77 = (unint64_t *)*v77;
          v78 = *v77;
          if (v78 < 0x10000)
            v78 |= 0x100000000uLL;
        }
      }
      else
      {
        v79 = *(_BYTE **)(a8 + 8 * v72);
        if (!v79 || (sub_1C47ADDC8((uint64_t)v190, v79, 0, &v194, 0) & 1) == 0)
        {
          v80 = a9[v72];
          *((_QWORD *)&v196 + 1) = 0;
          LODWORD(v196) = 0;
          DWORD1(v196) = v80;
          v197 = 0uLL;
          llvm::MachineInstr::addOperand(v195, v194, (const llvm::MachineOperand *)&v196);
        }
        v78 = a11[v72];
      }
      LODWORD(v196) = 1;
      *((_QWORD *)&v196 + 1) = 0;
      *(_QWORD *)&v197 = v78;
      llvm::MachineInstr::addOperand(v195, v194, (const llvm::MachineOperand *)&v196);
      v84 = v72 - 3;
      v72 = 2;
    }
    while (v84 < 0xFFFFFFFFFFFFFFFELL);
    v196 = 0u;
    v197 = 0u;
    llvm::MachineInstr::addOperand(v195, v194, (const llvm::MachineOperand *)&v196);
    LODWORD(v196) = 1;
    *((_QWORD *)&v196 + 1) = 0;
    *(_QWORD *)&v197 = 0;
    llvm::MachineInstr::addOperand(v195, v194, (const llvm::MachineOperand *)&v196);
    v86 = v194;
    v85 = v195;
    v196 = 0u;
    v197 = 0u;
LABEL_299:
    llvm::MachineInstr::addOperand(v85, v86, (const llvm::MachineOperand *)&v196);
    return;
  }
  if (!v42)
  {
    if ((~v11 & 0xA) != 0 || !v41)
      goto LABEL_207;
    v64 = 0;
    goto LABEL_159;
  }
  if (*(_QWORD *)(a8 + 8) == *(_QWORD *)(a8 + 24))
  {
    v87 = a9[1];
    v88 = a9[3];
    v64 = v87 != v88;
    if ((~v11 & 0xA) == 0 && v41)
    {
LABEL_159:
      v89 = a10[1];
      v90 = *(unsigned __int8 *)(v89 + 16);
      v185 = v40;
      v183 = v64;
      if (v89 && v90 == 17)
      {
        v92 = *(void **)(v89 + 32);
        v91 = (llvm::detail::DoubleAPFloat *)(v89 + 32);
        if (v92 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v91, (unsigned int *)&v196);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v91, (unsigned int *)&v196);
        if (DWORD2(v196) >= 0x41)
          v93 = (__int128 *)v196;
        else
          v93 = &v196;
        v94 = *(_QWORD **)v93;
        if (DWORD2(v196) >= 0x41 && (_QWORD)v196)
        {
          v95 = *(_QWORD **)v93;
          MEMORY[0x1CAA32F9C]();
          v94 = v95;
        }
        v40 = v185;
        v64 = v183;
      }
      else
      {
        if (v90 == 16)
          v96 = a10[1];
        else
          v96 = 0;
        v97 = (_QWORD *)(v96 + 24);
        if (*(_DWORD *)(v96 + 32) >= 0x41u)
          v97 = (_QWORD *)*v97;
        v94 = (_QWORD *)*v97;
      }
      v98 = a10[3];
      v99 = *(unsigned __int8 *)(v98 + 16);
      if (v98 && v99 == 17)
      {
        v182 = v94;
        v101 = *(void **)(v98 + 32);
        v100 = (llvm::detail::DoubleAPFloat *)(v98 + 32);
        if (v101 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v100, (unsigned int *)&v196);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v100, (unsigned int *)&v196);
        if (DWORD2(v196) >= 0x41)
          v102 = (__int128 *)v196;
        else
          v102 = &v196;
        v103 = *(_QWORD **)v102;
        if (DWORD2(v196) >= 0x41 && (_QWORD)v196)
          MEMORY[0x1CAA32F9C]();
        v40 = v185;
        v64 = v183;
        v94 = v182;
      }
      else
      {
        if (v99 == 16)
          v104 = a10[3];
        else
          v104 = 0;
        v105 = (_QWORD *)(v104 + 24);
        if (*(_DWORD *)(v104 + 32) >= 0x41u)
          v105 = (_QWORD *)*v105;
        v103 = (_QWORD *)*v105;
      }
      v106 = v94 != v103 && v42;
      if (v106 || v64)
        goto LABEL_197;
LABEL_207:
      v107 = sub_1C47C0074(a2);
      v184 = 0;
      IncompleteVirtualRegister = a5;
      goto LABEL_208;
    }
    if (v87 == v88)
      goto LABEL_207;
  }
  else if ((~v11 & 0xA) == 0 && v41)
  {
    v64 = 1;
    goto LABEL_159;
  }
LABEL_197:
  if (v28 == 1)
    v43 = 0;
  else
    v43 &= !v40;
  v107 = sub_1C47C0074(a2);
  v108 = v190[6];
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v108, "", 0);
  if (a7)
    v109 = &off_1E7F982A8;
  else
    v109 = &off_1E7F98468;
  *(_QWORD *)(*(_QWORD *)(v108 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v109;
  v110 = *(_QWORD *)(v108 + 8);
  if (v110)
    (*(void (**)(uint64_t))(*(_QWORD *)v110 + 24))(v110);
  v184 = 1;
LABEL_208:
  v111 = v190[4];
  v112 = *(_QWORD *)(v111 + 640);
  v113 = *(unint64_t **)(v111 + 648);
  v114 = *(_QWORD *)(v190[12] + 8);
  v115 = *(llvm::MachineFunction **)(v112 + 32);
  v116 = (llvm::MachineFunction *)v190[9];
  v194 = v116;
  if (v116)
    llvm::MetadataTracking::track((uint64_t)&v194, (unsigned __int8 *)v116, 2);
  v117 = v114 + 48 * v107;
  v118 = *((_QWORD *)v115 + 28);
  if (v118)
    *((_QWORD *)v115 + 28) = *(_QWORD *)v118;
  else
    v118 = sub_1C484358C((uint64_t)v115 + 128, 72, 3);
  *(_QWORD *)&v196 = v194;
  if (v194)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v194, (unsigned __int8 *)v194, (uint64_t)&v196);
    v194 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v118, v115, v117, (unsigned __int8 **)&v196, 0);
  if ((_QWORD)v196)
    llvm::MetadataTracking::untrack((uint64_t)&v196, (unsigned __int8 *)v196);
  if (v194)
    llvm::MetadataTracking::untrack((uint64_t)&v194, (unsigned __int8 *)v194);
  v119 = *(_QWORD *)(v112 + 40);
  *(_QWORD *)(v118 + 24) = v119;
  v120 = *(_QWORD *)(v119 + 32);
  v121 = *(unsigned int *)(v118 + 40);
  if ((_DWORD)v121)
  {
    v161 = *(_QWORD *)(v118 + 32);
    v162 = *(_QWORD *)(v120 + 40);
    v163 = 32 * v121;
    do
    {
      if (!*(_BYTE *)v161)
      {
        v164 = *(unsigned int *)(v161 + 4);
        if ((int)v164 >= 0)
          v165 = (uint64_t *)(*(_QWORD *)(v162 + 272) + 8 * v164);
        else
          v165 = (uint64_t *)(*(_QWORD *)(v162 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8);
        v166 = *v165;
        if (*v165)
        {
          v167 = *(_QWORD *)(v166 + 16);
          *(_QWORD *)(v166 + 16) = v161;
          *(_QWORD *)(v161 + 16) = v167;
          if ((*(_BYTE *)(v161 + 3) & 1) != 0)
          {
            *(_QWORD *)(v161 + 24) = v166;
          }
          else
          {
            *(_QWORD *)(v161 + 24) = 0;
            v165 = (uint64_t *)(v167 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v161 + 16) = v161;
          *(_QWORD *)(v161 + 24) = 0;
        }
        *v165 = v161;
      }
      v161 += 32;
      v163 -= 32;
    }
    while (v163);
  }
  v186 = v11 & 8;
  v122 = *(_QWORD *)(v120 + 728);
  if (v122)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v122 + 24))(v122, v118);
  v123 = *v113 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v118 = v123 | *(_QWORD *)v118 & 7;
  *(_QWORD *)(v118 + 8) = v113;
  *(_QWORD *)(v123 + 8) = v118;
  *v113 = *v113 & 7 | v118;
  *((_QWORD *)&v196 + 1) = 0;
  v197 = 0uLL;
  LODWORD(v196) = 0x1000000;
  DWORD1(v196) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v118, v115, (const llvm::MachineOperand *)&v196);
  LODWORD(v196) = 1;
  *((_QWORD *)&v196 + 1) = 0;
  *(_QWORD *)&v197 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v118, v115, (const llvm::MachineOperand *)&v196);
  v124 = 0;
  v194 = v115;
  v195 = (llvm::MachineInstr *)v118;
  do
  {
    if (((v124 == 2) & ~v43) != 0)
      break;
    if (((v11 >> v124) & 1) != 0)
    {
      v125 = (unsigned __int8 *)a10[v124];
      v126 = v125[16];
      if (v125 && v126 == 17)
      {
        v133 = (llvm::detail::DoubleAPFloat *)(v125 + 32);
        if (*((_UNKNOWN **)v125 + 4) == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v133, (unsigned int *)&v196);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v133, (unsigned int *)&v196);
        if (DWORD2(v196) >= 0x41)
          v134 = (uint64_t *)v196;
        else
          v134 = (uint64_t *)&v196;
        v135 = *v134;
        if (DWORD2(v196) >= 0x41 && (_QWORD)v196)
          MEMORY[0x1CAA32F9C](v196);
        v130 = *(_BYTE *)(*(_QWORD *)v125 + 8) ? v135 : v135 | 0x100000000;
      }
      else
      {
        if (v126 == 16)
          v128 = a10[v124];
        else
          v128 = 0;
        v129 = (unint64_t *)(v128 + 24);
        if (*(_DWORD *)(v128 + 32) >= 0x41u)
          v129 = (unint64_t *)*v129;
        v130 = *v129;
        if (v130 < 0x10000)
          v130 |= 0x100000000uLL;
      }
    }
    else
    {
      v131 = *(_BYTE **)(a8 + 8 * v124);
      if (!v131 || (sub_1C47ADDC8((uint64_t)v190, v131, 0, &v194, 0) & 1) == 0)
      {
        v132 = a9[v124];
        *((_QWORD *)&v196 + 1) = 0;
        LODWORD(v196) = 0;
        DWORD1(v196) = v132;
        v197 = 0uLL;
        llvm::MachineInstr::addOperand(v195, v194, (const llvm::MachineOperand *)&v196);
      }
      v130 = a11[v124];
    }
    LODWORD(v196) = 1;
    *((_QWORD *)&v196 + 1) = 0;
    *(_QWORD *)&v197 = v130;
    llvm::MachineInstr::addOperand(v195, v194, (const llvm::MachineOperand *)&v196);
    ++v124;
  }
  while (v124 != 3);
  if ((v184 & 1) != 0)
  {
    v197 = 0uLL;
    v196 = 0x201000000uLL;
  }
  else
  {
    v196 = 0u;
    v197 = 0u;
  }
  llvm::MachineInstr::addOperand(v195, v194, (const llvm::MachineOperand *)&v196);
  LODWORD(v196) = 1;
  *((_QWORD *)&v196 + 1) = 0;
  *(_QWORD *)&v197 = 0;
  llvm::MachineInstr::addOperand(v195, v194, (const llvm::MachineOperand *)&v196);
  v196 = 0u;
  v197 = 0u;
  llvm::MachineInstr::addOperand(v195, v194, (const llvm::MachineOperand *)&v196);
  if (v184)
  {
    v136 = dword_1C6416958[a7 | (v186 >> 2)];
    v137 = v190[4];
    v138 = *(_QWORD *)(v137 + 640);
    v139 = *(unint64_t **)(v137 + 648);
    v140 = *(_QWORD *)(v190[12] + 8);
    v141 = *(llvm::MachineFunction **)(v138 + 32);
    v142 = (llvm::MachineFunction *)v190[9];
    v192 = v142;
    if (v142)
      llvm::MetadataTracking::track((uint64_t)&v192, (unsigned __int8 *)v142, 2);
    v143 = v140 + 48 * v136;
    v144 = *((_QWORD *)v141 + 28);
    if (v144)
      *((_QWORD *)v141 + 28) = *(_QWORD *)v144;
    else
      v144 = sub_1C484358C((uint64_t)v141 + 128, 72, 3);
    *(_QWORD *)&v196 = v192;
    if (v192)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v192, (unsigned __int8 *)v192, (uint64_t)&v196);
      v192 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v144, v141, v143, (unsigned __int8 **)&v196, 0);
    if ((_QWORD)v196)
      llvm::MetadataTracking::untrack((uint64_t)&v196, (unsigned __int8 *)v196);
    if (v192)
      llvm::MetadataTracking::untrack((uint64_t)&v192, (unsigned __int8 *)v192);
    v145 = *(_QWORD *)(v138 + 40);
    *(_QWORD *)(v144 + 24) = v145;
    v146 = *(_QWORD *)(v145 + 32);
    v147 = *(unsigned int *)(v144 + 40);
    if ((_DWORD)v147)
    {
      v175 = *(_QWORD *)(v144 + 32);
      v176 = *(_QWORD *)(v146 + 40);
      v177 = 32 * v147;
      do
      {
        if (!*(_BYTE *)v175)
        {
          v178 = *(unsigned int *)(v175 + 4);
          if ((int)v178 >= 0)
            v179 = (uint64_t *)(*(_QWORD *)(v176 + 272) + 8 * v178);
          else
            v179 = (uint64_t *)(*(_QWORD *)(v176 + 24) + 16 * (v178 & 0x7FFFFFFF) + 8);
          v180 = *v179;
          if (*v179)
          {
            v181 = *(_QWORD *)(v180 + 16);
            *(_QWORD *)(v180 + 16) = v175;
            *(_QWORD *)(v175 + 16) = v181;
            if ((*(_BYTE *)(v175 + 3) & 1) != 0)
            {
              *(_QWORD *)(v175 + 24) = v180;
            }
            else
            {
              *(_QWORD *)(v175 + 24) = 0;
              v179 = (uint64_t *)(v181 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v175 + 16) = v175;
            *(_QWORD *)(v175 + 24) = 0;
          }
          *v179 = v175;
        }
        v175 += 32;
        v177 -= 32;
      }
      while (v177);
    }
    v148 = *(_QWORD *)(v146 + 728);
    if (v148)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v148 + 24))(v148, v144);
    v149 = *v139 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v144 = v149 | *(_QWORD *)v144 & 7;
    *(_QWORD *)(v144 + 8) = v139;
    *(_QWORD *)(v149 + 8) = v144;
    *v139 = *v139 & 7 | v144;
    *((_QWORD *)&v196 + 1) = 0;
    v197 = 0uLL;
    LODWORD(v196) = 0x1000000;
    DWORD1(v196) = a5;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v141, (const llvm::MachineOperand *)&v196);
    v192 = v141;
    v193 = (llvm::MachineInstr *)v144;
    *((_QWORD *)&v196 + 1) = 0;
    v197 = 0uLL;
    LODWORD(v196) = 0;
    DWORD1(v196) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v141, (const llvm::MachineOperand *)&v196);
    if (v186)
    {
      v153 = (unsigned __int8 *)a10[3];
      v154 = v153[16];
      if (v153 && v154 == 17)
      {
        v155 = (llvm::detail::DoubleAPFloat *)(v153 + 32);
        if (*((_UNKNOWN **)v153 + 4) == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v155, (unsigned int *)&v196);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v155, (unsigned int *)&v196);
        if (DWORD2(v196) >= 0x41)
          v156 = (unint64_t *)v196;
        else
          v156 = (unint64_t *)&v196;
        v157 = *v156;
        if (DWORD2(v196) >= 0x41 && (_QWORD)v196)
          MEMORY[0x1CAA32F9C](v196);
        if (*(_BYTE *)(*(_QWORD *)v153 + 8))
          v158 = v157;
        else
          v158 = v157 | 0x100000000;
      }
      else
      {
        if (v154 == 16)
          v159 = a10[3];
        else
          v159 = 0;
        v160 = (unint64_t *)(v159 + 24);
        if (*(_DWORD *)(v159 + 32) >= 0x41u)
          v160 = (unint64_t *)*v160;
        v158 = *v160;
        if (v158 < 0x10000)
          v158 |= 0x100000000uLL;
      }
      LODWORD(v196) = 1;
      *((_QWORD *)&v196 + 1) = 0;
      *(_QWORD *)&v197 = v158;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v141, (const llvm::MachineOperand *)&v196);
    }
    else
    {
      v150 = *(_BYTE **)(a8 + 24);
      if (!v150
        || (v151 = sub_1C47ADDC8((uint64_t)v190, v150, 0, &v192, 0),
            v141 = v192,
            v144 = (unint64_t)v193,
            (v151 & 1) == 0))
      {
        v152 = a9[3];
        *((_QWORD *)&v196 + 1) = 0;
        v197 = 0uLL;
        LODWORD(v196) = 0;
        DWORD1(v196) = v152;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v141, (const llvm::MachineOperand *)&v196);
        v141 = v192;
        v144 = (unint64_t)v193;
      }
    }
    LODWORD(v196) = 1;
    *((_QWORD *)&v196 + 1) = 0;
    *(_QWORD *)&v197 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v144, v141, (const llvm::MachineOperand *)&v196);
    v86 = v192;
    v85 = v193;
    v197 = 0uLL;
    v196 = 0x200000000uLL;
    goto LABEL_299;
  }
}

uint64_t sub_1C47B2774(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7, int a8, unsigned int a9, int a10, unsigned int a11)
{
  int v11;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _UNKNOWN ***v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unsigned int v28;
  int8x16_t *v29;
  int *v30;
  int v31;
  _UNKNOWN ***v32;
  BOOL v34;
  uint64_t v35;
  int v36;
  char *v37;
  char *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  llvm::MachineFunction *v44;
  llvm::MachineFunction *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  llvm::detail::DoubleAPFloat *v56;
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  llvm::MachineInstr *v64;
  llvm::MachineFunction *v65;
  uint64_t v66;
  _BYTE *v67;
  int v68;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  llvm::MachineFunction *v87;
  llvm::MachineInstr *v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  char v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int8x16_t v100;
  uint64_t v101;
  _QWORD v102[3];
  uint64_t v103;
  int v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v11 = *(unsigned __int8 *)(*a2 + 8);
  if ((v11 | 2) != 2)
    return 0;
  v83 = *a2;
  v14 = 0;
  v15 = 0;
  v104 = 0;
  v102[2] = a5;
  v103 = 0;
  v102[0] = a3;
  v102[1] = a4;
  v100 = 0uLL;
  v101 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v16 = a10 == 1 && v11 == 0;
  v17 = v16;
  v18 = 16 * (a6 & 0x7FFFFFFF);
  do
  {
    v19 = v102[v14];
    if (a6 && v14 == 1)
    {
      v20 = (_UNKNOWN ***)(*(_QWORD *)(*(_QWORD *)(a1[6] + 24) + v18) & 0xFFFFFFFFFFFFFFF8);
      if (v20 != &off_1E7F982F0 && v20 != &off_1E7F982A8)
        v17 = 0;
      v15 = a6;
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)v19 + 8))
        v17 = 0;
      if (*(_BYTE *)(v19 + 16) == 17)
        *(uint64_t *)((char *)&v97 + v14 * 8) = (uint64_t)sub_1C6126914((uint64_t)a1, (uint64_t *)v19);
      else
        v100.i64[v14] = v19;
    }
    ++v14;
  }
  while (v14 != 3);
  HIDWORD(v103) = v15;
  v92 = v17;
  v22 = v97;
  if (v97)
  {
    if (v98 && v99)
      return 0;
  }
  v81 = v99;
  if (a8 == 141)
  {
    v24 = v83;
    if (!v97 || v98)
    {
      v80 = v97;
      v22 = v98;
    }
    else
    {
      v80 = 0;
      v100 = vextq_s8(v100, v100, 8uLL);
      v103 = v15;
      v97 = 0;
      v98 = v22;
    }
  }
  else
  {
    v80 = v97;
    v22 = v98;
    v24 = v83;
  }
  v25 = 0;
  v84 = v22;
  if (v22)
    v26 = a8 == 141;
  else
    v26 = 0;
  if (v26 && (a9 & 3) == 1)
    v28 = a9 & 4 | 2;
  else
    v28 = a9;
  v96 = 0;
  v95 = 0;
  v89 = *(_BYTE *)(v24 + 8) == 0;
  v90 = v89;
  v91 = v89;
  v29 = &v100;
  v30 = (int *)&v95;
  do
  {
    if (((v28 >> v25) & 1) != 0)
      *((_DWORD *)&v95 + v25) = 2;
    v31 = *((_DWORD *)&v103 + v25);
    if (v31)
    {
      v32 = (_UNKNOWN ***)(*(_QWORD *)(*(_QWORD *)(a1[6] + 24) + 16 * (v31 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
      v34 = v32 == &off_1E7F982A8 || v32 == &off_1E7F982F0;
      *(&v89 + v25) = v34;
    }
    else
    {
      v35 = v100.i64[v25];
      if (v35 && !*(&v97 + v25))
      {
        *(&v89 + v25) = *(_BYTE *)(*(_QWORD *)v35 + 8) == 0;
        v36 = sub_1C47AE068((uint64_t)a1, v29->i64, v30, &v89 + v25, v17 != 0, a2[5], 7, 1);
        *((_DWORD *)&v103 + v25) = v36;
        if (!v36)
          return 0;
        if (a8 == 443 && v25 == 1)
          HIDWORD(v95) &= ~1u;
      }
    }
    ++v25;
    ++v30;
    v29 = (int8x16_t *)((char *)v29 + 8);
  }
  while (v25 != 3);
  if (a8 != 141)
  {
    v38 = (char *)&unk_1C640FCF2 + 16 * (v80 != 0) + 8 * (v84 != 0) + 4 * (v81 != 0);
LABEL_67:
    v37 = &v38[2 * a11];
    goto LABEL_68;
  }
  if (!sub_1C47ADC3C((uint64_t)a1, (uint64_t)a2, v100.i64, &v103, (int *)&v95, &v92, &v89, 3u))
    return 0;
  if (!v92)
  {
    v17 = 0;
    v70 = v89;
    v71 = v90;
    v72 = 2;
    if (v80)
      v70 = 2;
    if (v84)
      v71 = 2;
    if (!v81)
      v72 = v91;
    v38 = (char *)&unk_1C640FC1A + 108 * (a10 == 1) + 36 * v70 + 12 * v71 + 4 * v72;
    goto LABEL_67;
  }
  v37 = (char *)&unk_1C640FBFA + 16 * (v80 != 0) + 8 * (v84 != 0) + 4 * (v81 != 0) + 2 * a11;
  v17 = 1;
LABEL_68:
  v39 = *(unsigned __int16 *)v37;
  v40 = a1[4];
  v41 = *(_QWORD *)(v40 + 640);
  v42 = *(unint64_t **)(v40 + 648);
  v43 = *(_QWORD *)(a1[12] + 8);
  v44 = *(llvm::MachineFunction **)(v41 + 32);
  v45 = (llvm::MachineFunction *)a1[9];
  v87 = v45;
  if (v45)
    llvm::MetadataTracking::track((uint64_t)&v87, (unsigned __int8 *)v45, 2);
  v46 = v43 + 48 * v39;
  v47 = *((_QWORD *)v44 + 28);
  if (v47)
    *((_QWORD *)v44 + 28) = *(_QWORD *)v47;
  else
    v47 = sub_1C484358C((uint64_t)v44 + 128, 72, 3);
  *(_QWORD *)&v93 = v87;
  if (v87)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v87, (unsigned __int8 *)v87, (uint64_t)&v93);
    v87 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v47, v44, v46, (unsigned __int8 **)&v93, 0);
  if ((_QWORD)v93)
    llvm::MetadataTracking::untrack((uint64_t)&v93, (unsigned __int8 *)v93);
  if (v87)
    llvm::MetadataTracking::untrack((uint64_t)&v87, (unsigned __int8 *)v87);
  v48 = *(_QWORD *)(v41 + 40);
  *(_QWORD *)(v47 + 24) = v48;
  v49 = *(_QWORD *)(v48 + 32);
  v50 = *(unsigned int *)(v47 + 40);
  if ((_DWORD)v50)
  {
    v73 = *(_QWORD *)(v47 + 32);
    v74 = *(_QWORD *)(v49 + 40);
    v75 = 32 * v50;
    do
    {
      if (!*(_BYTE *)v73)
      {
        v76 = *(unsigned int *)(v73 + 4);
        if ((int)v76 >= 0)
          v77 = (uint64_t *)(*(_QWORD *)(v74 + 272) + 8 * v76);
        else
          v77 = (uint64_t *)(*(_QWORD *)(v74 + 24) + 16 * (v76 & 0x7FFFFFFF) + 8);
        v78 = *v77;
        if (*v77)
        {
          v79 = *(_QWORD *)(v78 + 16);
          *(_QWORD *)(v78 + 16) = v73;
          *(_QWORD *)(v73 + 16) = v79;
          if ((*(_BYTE *)(v73 + 3) & 1) != 0)
          {
            *(_QWORD *)(v73 + 24) = v78;
          }
          else
          {
            *(_QWORD *)(v73 + 24) = 0;
            v77 = (uint64_t *)(v79 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v73 + 16) = v73;
          *(_QWORD *)(v73 + 24) = 0;
        }
        *v77 = v73;
      }
      v73 += 32;
      v75 -= 32;
    }
    while (v75);
  }
  v51 = *(_QWORD *)(v49 + 728);
  if (v51)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v51 + 24))(v51, v47);
  v52 = *v42 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v47 = v52 | *(_QWORD *)v47 & 7;
  *(_QWORD *)(v47 + 8) = v42;
  *(_QWORD *)(v52 + 8) = v47;
  *v42 = *v42 & 7 | v47;
  *((_QWORD *)&v93 + 1) = 0;
  v94 = 0uLL;
  LODWORD(v93) = 0x1000000;
  DWORD1(v93) = a7;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v47, v44, (const llvm::MachineOperand *)&v93);
  LODWORD(v93) = 1;
  *((_QWORD *)&v93 + 1) = 0;
  *(_QWORD *)&v94 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v47, v44, (const llvm::MachineOperand *)&v93);
  v53 = 0;
  v87 = v44;
  v88 = (llvm::MachineInstr *)v47;
  do
  {
    v54 = (_QWORD *)*(&v97 + v53);
    if (v54)
    {
      v55 = *(unsigned __int8 *)(*v54 + 8);
      v57 = (void *)v54[4];
      v56 = (llvm::detail::DoubleAPFloat *)(v54 + 4);
      if (v57 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v56, (unsigned int *)&v93);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v56, (unsigned int *)&v93);
      v58 = (uint64_t *)&v93;
      if (DWORD2(v93) >= 0x41)
        v58 = (uint64_t *)v93;
      v59 = *v58;
      if (DWORD2(v93) >= 0x41 && (_QWORD)v93 != 0)
        MEMORY[0x1CAA32F9C]();
      v61 = v59 | 0x100000000;
      if (v55)
        v61 = v59;
      v62 = 0x80000000;
      if (!v55)
        v62 = 0x8000;
      if ((*((_DWORD *)&v95 + v53) & 2) != 0)
        v63 = v62;
      else
        v63 = 0;
      v65 = v87;
      v64 = v88;
      LODWORD(v93) = 1;
      v66 = v63 ^ v61;
    }
    else
    {
      v67 = (_BYTE *)v100.i64[v53];
      if (!v67 || (sub_1C47ADDC8((uint64_t)a1, v67, v17 != 0, &v87, 0) & 1) == 0)
      {
        v68 = *((_DWORD *)&v103 + v53);
        *((_QWORD *)&v93 + 1) = 0;
        LODWORD(v93) = 0;
        DWORD1(v93) = v68;
        v94 = 0uLL;
        llvm::MachineInstr::addOperand(v88, v87, (const llvm::MachineOperand *)&v93);
      }
      v66 = *((unsigned int *)&v95 + v53);
      v65 = v87;
      v64 = v88;
      LODWORD(v93) = 1;
    }
    *((_QWORD *)&v93 + 1) = 0;
    *(_QWORD *)&v94 = v66;
    llvm::MachineInstr::addOperand(v64, v65, (const llvm::MachineOperand *)&v93);
    ++v53;
  }
  while (v53 != 3);
  v23 = 1;
  LODWORD(v93) = 1;
  *((_QWORD *)&v93 + 1) = 0;
  *(_QWORD *)&v94 = 0;
  llvm::MachineInstr::addOperand(v88, v87, (const llvm::MachineOperand *)&v93);
  v93 = 0u;
  v94 = 0u;
  llvm::MachineInstr::addOperand(v88, v87, (const llvm::MachineOperand *)&v93);
  return v23;
}

BOOL sub_1C47B2F00(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  int v4;
  int v8;
  _BYTE **v9;
  _BOOL8 v10;
  int v11;
  int v12;
  uint64_t v13;
  int IncompleteVirtualRegister;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::MachineFunction *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  llvm::MachineFunction *v37;
  const llvm::APInt *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  llvm::MachineFunction *v62;
  llvm::MachineInstr *v63;
  unsigned int v64;
  _BYTE *v65;
  BOOL v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  unsigned int v70;
  unsigned __int8 *v71;
  __int128 v72;
  int v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  if ((v4 | 2) != 2)
    return 0;
  v66 = v4 == 0;
  v8 = *(_DWORD *)(a2 + 20);
  if ((v8 & 0x40000000) != 0)
    v9 = *(_BYTE ***)(a2 - 8);
  else
    v9 = (_BYTE **)(a2 - 32 * (v8 & 0x7FFFFFF));
  v65 = *v9;
  v64 = 0;
  v11 = sub_1C47AE068((uint64_t)a1, (uint64_t *)&v65, (int *)&v64, &v66, 0, *(_QWORD *)(a2 + 40), 7, 1);
  v10 = v11 != 0;
  if (v11)
  {
    v12 = v11;
    v61 = a3;
    v13 = a1[6];
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v13, "", 0);
    *(_QWORD *)(*(_QWORD *)(v13 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F98468;
    v15 = *(_QWORD *)(v13 + 8);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
    v16 = a1[4];
    v17 = *(_QWORD *)(v16 + 640);
    v18 = *(unint64_t **)(v16 + 648);
    v19 = *(_QWORD *)(a1[12] + 8);
    if (v66)
      v20 = 62016;
    else
      v20 = 61872;
    v21 = *(llvm::MachineFunction **)(v17 + 32);
    v22 = (unsigned __int8 *)a1[9];
    v71 = v22;
    if (v22)
      llvm::MetadataTracking::track((uint64_t)&v71, v22, 2);
    v23 = v19 + v20;
    v24 = *((_QWORD *)v21 + 28);
    if (v24)
      *((_QWORD *)v21 + 28) = *(_QWORD *)v24;
    else
      v24 = sub_1C484358C((uint64_t)v21 + 128, 72, 3);
    *(_QWORD *)&v67 = v71;
    if (v71)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v71, v71, (uint64_t)&v67);
      v71 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v24, v21, v23, (unsigned __int8 **)&v67, 0);
    if ((_QWORD)v67)
      llvm::MetadataTracking::untrack((uint64_t)&v67, (unsigned __int8 *)v67);
    if (v71)
      llvm::MetadataTracking::untrack((uint64_t)&v71, v71);
    v25 = *(_QWORD *)(v17 + 40);
    *(_QWORD *)(v24 + 24) = v25;
    v26 = *(_QWORD *)(v25 + 32);
    v27 = *(unsigned int *)(v24 + 40);
    if ((_DWORD)v27)
    {
      v47 = *(_QWORD *)(v24 + 32);
      v48 = *(_QWORD *)(v26 + 40);
      v49 = 32 * v27;
      do
      {
        if (!*(_BYTE *)v47)
        {
          v50 = *(unsigned int *)(v47 + 4);
          if ((int)v50 >= 0)
            v51 = (uint64_t *)(*(_QWORD *)(v48 + 272) + 8 * v50);
          else
            v51 = (uint64_t *)(*(_QWORD *)(v48 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
          v52 = *v51;
          if (*v51)
          {
            v53 = *(_QWORD *)(v52 + 16);
            *(_QWORD *)(v52 + 16) = v47;
            *(_QWORD *)(v47 + 16) = v53;
            if ((*(_BYTE *)(v47 + 3) & 1) != 0)
            {
              *(_QWORD *)(v47 + 24) = v52;
            }
            else
            {
              *(_QWORD *)(v47 + 24) = 0;
              v51 = (uint64_t *)(v53 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v47 + 16) = v47;
            *(_QWORD *)(v47 + 24) = 0;
          }
          *v51 = v47;
        }
        v47 += 32;
        v49 -= 32;
      }
      while (v49);
    }
    v28 = *(_QWORD *)(v26 + 728);
    if (v28)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v28 + 24))(v28, v24);
    v29 = *v18 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v24 = v29 | *(_QWORD *)v24 & 7;
    *(_QWORD *)(v24 + 8) = v18;
    *(_QWORD *)(v29 + 8) = v24;
    *v18 = *v18 & 7 | v24;
    *((_QWORD *)&v67 + 1) = 0;
    v68 = 0uLL;
    LODWORD(v67) = 0x1000000;
    DWORD1(v67) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v67);
    v62 = v21;
    v63 = (llvm::MachineInstr *)v24;
    LODWORD(v67) = 1;
    *((_QWORD *)&v67 + 1) = 0;
    *(_QWORD *)&v68 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v67);
    if (v65)
    {
      if ((sub_1C47ADDC8((uint64_t)a1, v65, 0, &v62, 0) & 1) != 0)
      {
LABEL_30:
        LODWORD(v67) = 1;
        *((_QWORD *)&v67 + 1) = 0;
        *(_QWORD *)&v68 = v64;
        llvm::MachineInstr::addOperand(v63, v62, (const llvm::MachineOperand *)&v67);
        v70 = 32;
        v69 = 1069066811;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v67, (const llvm::APInt **)&v69);
        v72 = v67;
        v73 = v68;
        v74 = v74 & 0xF0 | BYTE4(v68) & 0xF;
        if ((_UNKNOWN *)v67 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v72, (unsigned int *)&v69);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v72, (unsigned int *)&v69);
        v30 = &v69;
        if (v70 >= 0x41)
          v30 = (uint64_t *)v69;
        v31 = *v30;
        LODWORD(v67) = 1;
        *((_QWORD *)&v67 + 1) = 0;
        *(_QWORD *)&v68 = v31;
        llvm::MachineInstr::addOperand(v63, v62, (const llvm::MachineOperand *)&v67);
        if (v70 >= 0x41 && v69)
          MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
        LODWORD(v67) = 1;
        *((_QWORD *)&v67 + 1) = 0;
        *(_QWORD *)&v68 = 0;
        llvm::MachineInstr::addOperand(v63, v62, (const llvm::MachineOperand *)&v67);
        v67 = 0u;
        v68 = 0u;
        llvm::MachineInstr::addOperand(v63, v62, (const llvm::MachineOperand *)&v67);
        if (a4 == 1)
          v32 = 53376;
        else
          v32 = 53232;
        v33 = a1[4];
        v34 = *(_QWORD *)(v33 + 640);
        v35 = *(unint64_t **)(v33 + 648);
        v36 = *(_QWORD *)(a1[12] + 8);
        v37 = *(llvm::MachineFunction **)(v34 + 32);
        v38 = (const llvm::APInt *)a1[9];
        v69 = (uint64_t)v38;
        if (v38)
          llvm::MetadataTracking::track((uint64_t)&v69, (unsigned __int8 *)v38, 2);
        v39 = v36 + v32;
        v40 = *((_QWORD *)v37 + 28);
        if (v40)
          *((_QWORD *)v37 + 28) = *(_QWORD *)v40;
        else
          v40 = sub_1C484358C((uint64_t)v37 + 128, 72, 3);
        *(_QWORD *)&v67 = v69;
        if (v69)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v69, (unsigned __int8 *)v69, (uint64_t)&v67);
          v69 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v40, v37, v39, (unsigned __int8 **)&v67, 0);
        if ((_QWORD)v67)
          llvm::MetadataTracking::untrack((uint64_t)&v67, (unsigned __int8 *)v67);
        if (v69)
          llvm::MetadataTracking::untrack((uint64_t)&v69, (unsigned __int8 *)v69);
        v41 = *(_QWORD *)(v34 + 40);
        *(_QWORD *)(v40 + 24) = v41;
        v42 = *(_QWORD *)(v41 + 32);
        v43 = *(unsigned int *)(v40 + 40);
        if ((_DWORD)v43)
        {
          v54 = *(_QWORD *)(v40 + 32);
          v55 = *(_QWORD *)(v42 + 40);
          v56 = 32 * v43;
          do
          {
            if (!*(_BYTE *)v54)
            {
              v57 = *(unsigned int *)(v54 + 4);
              if ((int)v57 >= 0)
                v58 = (uint64_t *)(*(_QWORD *)(v55 + 272) + 8 * v57);
              else
                v58 = (uint64_t *)(*(_QWORD *)(v55 + 24) + 16 * (v57 & 0x7FFFFFFF) + 8);
              v59 = *v58;
              if (*v58)
              {
                v60 = *(_QWORD *)(v59 + 16);
                *(_QWORD *)(v59 + 16) = v54;
                *(_QWORD *)(v54 + 16) = v60;
                if ((*(_BYTE *)(v54 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v54 + 24) = v59;
                }
                else
                {
                  *(_QWORD *)(v54 + 24) = 0;
                  v58 = (uint64_t *)(v60 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v54 + 16) = v54;
                *(_QWORD *)(v54 + 24) = 0;
              }
              *v58 = v54;
            }
            v54 += 32;
            v56 -= 32;
          }
          while (v56);
        }
        v44 = *(_QWORD *)(v42 + 728);
        if (v44)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v44 + 24))(v44, v40);
        v45 = *v35 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v40 = v45 | *(_QWORD *)v40 & 7;
        *(_QWORD *)(v40 + 8) = v35;
        *(_QWORD *)(v45 + 8) = v40;
        *v35 = *v35 & 7 | v40;
        *((_QWORD *)&v67 + 1) = 0;
        v68 = 0uLL;
        LODWORD(v67) = 0x1000000;
        DWORD1(v67) = v61;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v37, (const llvm::MachineOperand *)&v67);
        LODWORD(v67) = 1;
        *((_QWORD *)&v67 + 1) = 0;
        *(_QWORD *)&v68 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v37, (const llvm::MachineOperand *)&v67);
        *((_QWORD *)&v67 + 1) = 0;
        v68 = 0uLL;
        LODWORD(v67) = 0;
        DWORD1(v67) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v37, (const llvm::MachineOperand *)&v67);
        LODWORD(v67) = 1;
        *((_QWORD *)&v67 + 1) = 0;
        *(_QWORD *)&v68 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v37, (const llvm::MachineOperand *)&v67);
        LODWORD(v67) = 1;
        *((_QWORD *)&v67 + 1) = 0;
        *(_QWORD *)&v68 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v37, (const llvm::MachineOperand *)&v67);
        v67 = 0u;
        v68 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v37, (const llvm::MachineOperand *)&v67);
        if ((_UNKNOWN *)v72 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v72 + 1);
        }
        else if ((*(_DWORD *)(v72 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v72 + 1))
        {
          MEMORY[0x1CAA32F9C](*((_QWORD *)&v72 + 1), 0x1000C8000313F17);
        }
        return v10;
      }
      v21 = v62;
      v24 = (unint64_t)v63;
    }
    *((_QWORD *)&v67 + 1) = 0;
    v68 = 0uLL;
    LODWORD(v67) = 0;
    DWORD1(v67) = v12;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v67);
    goto LABEL_30;
  }
  return v10;
}

BOOL sub_1C47B361C(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  int v4;
  int v8;
  _BYTE **v9;
  _BOOL8 v10;
  int v11;
  int v12;
  uint64_t v13;
  int IncompleteVirtualRegister;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::MachineFunction *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  llvm::MachineFunction *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  llvm::MachineFunction *v62;
  llvm::MachineInstr *v63;
  unsigned int v64;
  _BYTE *v65;
  BOOL v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  unsigned int v70;
  unsigned __int8 *v71;
  __int128 v72;
  int v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  if ((v4 | 2) != 2)
    return 0;
  v66 = v4 == 0;
  v8 = *(_DWORD *)(a2 + 20);
  if ((v8 & 0x40000000) != 0)
    v9 = *(_BYTE ***)(a2 - 8);
  else
    v9 = (_BYTE **)(a2 - 32 * (v8 & 0x7FFFFFF));
  v65 = *v9;
  v64 = 0;
  v11 = sub_1C47AE068((uint64_t)a1, (uint64_t *)&v65, (int *)&v64, &v66, 0, *(_QWORD *)(a2 + 40), 7, 1);
  v10 = v11 != 0;
  if (v11)
  {
    v12 = v11;
    v61 = a3;
    v13 = a1[6];
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v13, "", 0);
    *(_QWORD *)(*(_QWORD *)(v13 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F98468;
    v15 = *(_QWORD *)(v13 + 8);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
    v16 = a1[4];
    v17 = *(_QWORD *)(v16 + 640);
    v18 = *(unint64_t **)(v16 + 648);
    v19 = *(_QWORD *)(a1[12] + 8);
    if (v66)
      v20 = 55488;
    else
      v20 = 55440;
    v21 = *(llvm::MachineFunction **)(v17 + 32);
    v22 = (unsigned __int8 *)a1[9];
    v71 = v22;
    if (v22)
      llvm::MetadataTracking::track((uint64_t)&v71, v22, 2);
    v23 = v19 + v20;
    v24 = *((_QWORD *)v21 + 28);
    if (v24)
      *((_QWORD *)v21 + 28) = *(_QWORD *)v24;
    else
      v24 = sub_1C484358C((uint64_t)v21 + 128, 72, 3);
    *(_QWORD *)&v67 = v71;
    if (v71)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v71, v71, (uint64_t)&v67);
      v71 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v24, v21, v23, (unsigned __int8 **)&v67, 0);
    if ((_QWORD)v67)
      llvm::MetadataTracking::untrack((uint64_t)&v67, (unsigned __int8 *)v67);
    if (v71)
      llvm::MetadataTracking::untrack((uint64_t)&v71, v71);
    v25 = *(_QWORD *)(v17 + 40);
    *(_QWORD *)(v24 + 24) = v25;
    v26 = *(_QWORD *)(v25 + 32);
    v27 = *(unsigned int *)(v24 + 40);
    if ((_DWORD)v27)
    {
      v47 = *(_QWORD *)(v24 + 32);
      v48 = *(_QWORD *)(v26 + 40);
      v49 = 32 * v27;
      do
      {
        if (!*(_BYTE *)v47)
        {
          v50 = *(unsigned int *)(v47 + 4);
          if ((int)v50 >= 0)
            v51 = (uint64_t *)(*(_QWORD *)(v48 + 272) + 8 * v50);
          else
            v51 = (uint64_t *)(*(_QWORD *)(v48 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
          v52 = *v51;
          if (*v51)
          {
            v53 = *(_QWORD *)(v52 + 16);
            *(_QWORD *)(v52 + 16) = v47;
            *(_QWORD *)(v47 + 16) = v53;
            if ((*(_BYTE *)(v47 + 3) & 1) != 0)
            {
              *(_QWORD *)(v47 + 24) = v52;
            }
            else
            {
              *(_QWORD *)(v47 + 24) = 0;
              v51 = (uint64_t *)(v53 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v47 + 16) = v47;
            *(_QWORD *)(v47 + 24) = 0;
          }
          *v51 = v47;
        }
        v47 += 32;
        v49 -= 32;
      }
      while (v49);
    }
    v28 = *(_QWORD *)(v26 + 728);
    if (v28)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v28 + 24))(v28, v24);
    v29 = *v18 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v24 = v29 | *(_QWORD *)v24 & 7;
    *(_QWORD *)(v24 + 8) = v18;
    *(_QWORD *)(v29 + 8) = v24;
    *v18 = *v18 & 7 | v24;
    *((_QWORD *)&v67 + 1) = 0;
    v68 = 0uLL;
    LODWORD(v67) = 0x1000000;
    DWORD1(v67) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v67);
    v62 = v21;
    v63 = (llvm::MachineInstr *)v24;
    LODWORD(v67) = 1;
    *((_QWORD *)&v67 + 1) = 0;
    *(_QWORD *)&v68 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v67);
    if (v65)
    {
      if ((sub_1C47ADDC8((uint64_t)a1, v65, 0, &v62, 0) & 1) != 0)
      {
LABEL_30:
        LODWORD(v67) = 1;
        *((_QWORD *)&v67 + 1) = 0;
        *(_QWORD *)&v68 = v64;
        llvm::MachineInstr::addOperand(v63, v62, (const llvm::MachineOperand *)&v67);
        LODWORD(v67) = 1;
        *((_QWORD *)&v67 + 1) = 0;
        *(_QWORD *)&v68 = 0;
        llvm::MachineInstr::addOperand(v63, v62, (const llvm::MachineOperand *)&v67);
        v67 = 0u;
        v68 = 0u;
        llvm::MachineInstr::addOperand(v63, v62, (const llvm::MachineOperand *)&v67);
        if (a4 == 1)
          v30 = 62304;
        else
          v30 = 61872;
        v31 = a1[4];
        v32 = *(_QWORD *)(v31 + 640);
        v33 = *(unint64_t **)(v31 + 648);
        v34 = *(_QWORD *)(a1[12] + 8);
        v35 = *(llvm::MachineFunction **)(v32 + 32);
        v36 = (unsigned __int8 *)a1[9];
        v71 = v36;
        if (v36)
          llvm::MetadataTracking::track((uint64_t)&v71, v36, 2);
        v37 = v34 + v30;
        v38 = *((_QWORD *)v35 + 28);
        if (v38)
          *((_QWORD *)v35 + 28) = *(_QWORD *)v38;
        else
          v38 = sub_1C484358C((uint64_t)v35 + 128, 72, 3);
        *(_QWORD *)&v67 = v71;
        if (v71)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v71, v71, (uint64_t)&v67);
          v71 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v38, v35, v37, (unsigned __int8 **)&v67, 0);
        if ((_QWORD)v67)
          llvm::MetadataTracking::untrack((uint64_t)&v67, (unsigned __int8 *)v67);
        if (v71)
          llvm::MetadataTracking::untrack((uint64_t)&v71, v71);
        v39 = *(_QWORD *)(v32 + 40);
        *(_QWORD *)(v38 + 24) = v39;
        v40 = *(_QWORD *)(v39 + 32);
        v41 = *(unsigned int *)(v38 + 40);
        if ((_DWORD)v41)
        {
          v54 = *(_QWORD *)(v38 + 32);
          v55 = *(_QWORD *)(v40 + 40);
          v56 = 32 * v41;
          do
          {
            if (!*(_BYTE *)v54)
            {
              v57 = *(unsigned int *)(v54 + 4);
              if ((int)v57 >= 0)
                v58 = (uint64_t *)(*(_QWORD *)(v55 + 272) + 8 * v57);
              else
                v58 = (uint64_t *)(*(_QWORD *)(v55 + 24) + 16 * (v57 & 0x7FFFFFFF) + 8);
              v59 = *v58;
              if (*v58)
              {
                v60 = *(_QWORD *)(v59 + 16);
                *(_QWORD *)(v59 + 16) = v54;
                *(_QWORD *)(v54 + 16) = v60;
                if ((*(_BYTE *)(v54 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v54 + 24) = v59;
                }
                else
                {
                  *(_QWORD *)(v54 + 24) = 0;
                  v58 = (uint64_t *)(v60 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v54 + 16) = v54;
                *(_QWORD *)(v54 + 24) = 0;
              }
              *v58 = v54;
            }
            v54 += 32;
            v56 -= 32;
          }
          while (v56);
        }
        v42 = *(_QWORD *)(v40 + 728);
        if (v42)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v42 + 24))(v42, v38);
        v43 = *v33 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v38 = v43 | *(_QWORD *)v38 & 7;
        *(_QWORD *)(v38 + 8) = v33;
        *(_QWORD *)(v43 + 8) = v38;
        *v33 = *v33 & 7 | v38;
        *((_QWORD *)&v67 + 1) = 0;
        v68 = 0uLL;
        LODWORD(v67) = 0x1000000;
        DWORD1(v67) = v61;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v35, (const llvm::MachineOperand *)&v67);
        LODWORD(v67) = 1;
        *((_QWORD *)&v67 + 1) = 0;
        *(_QWORD *)&v68 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v35, (const llvm::MachineOperand *)&v67);
        *((_QWORD *)&v67 + 1) = 0;
        v68 = 0uLL;
        LODWORD(v67) = 0;
        DWORD1(v67) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v35, (const llvm::MachineOperand *)&v67);
        LODWORD(v67) = 1;
        *((_QWORD *)&v67 + 1) = 0;
        *(_QWORD *)&v68 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v35, (const llvm::MachineOperand *)&v67);
        v70 = 32;
        v69 = 1060205080;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v67, (const llvm::APInt **)&v69);
        v72 = v67;
        v73 = v68;
        v74 = v74 & 0xF0 | BYTE4(v68) & 0xF;
        if ((_UNKNOWN *)v67 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v72, (unsigned int *)&v69);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v72, (unsigned int *)&v69);
        v44 = &v69;
        if (v70 >= 0x41)
          v44 = (uint64_t *)v69;
        v45 = *v44;
        LODWORD(v67) = 1;
        *((_QWORD *)&v67 + 1) = 0;
        *(_QWORD *)&v68 = v45;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v35, (const llvm::MachineOperand *)&v67);
        if (v70 >= 0x41 && v69)
          MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
        LODWORD(v67) = 1;
        *((_QWORD *)&v67 + 1) = 0;
        *(_QWORD *)&v68 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v35, (const llvm::MachineOperand *)&v67);
        v67 = 0u;
        v68 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v35, (const llvm::MachineOperand *)&v67);
        if ((_UNKNOWN *)v72 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v72 + 1);
        }
        else if ((*(_DWORD *)(v72 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v72 + 1))
        {
          MEMORY[0x1CAA32F9C](*((_QWORD *)&v72 + 1), 0x1000C8000313F17);
        }
        return v10;
      }
      v21 = v62;
      v24 = (unint64_t)v63;
    }
    *((_QWORD *)&v67 + 1) = 0;
    v68 = 0uLL;
    LODWORD(v67) = 0;
    DWORD1(v67) = v12;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v21, (const llvm::MachineOperand *)&v67);
    goto LABEL_30;
  }
  return v10;
}

uint64_t sub_1C47B3D3C(_QWORD *a1, uint64_t *a2, int a3, int a4, unsigned int a5)
{
  uint64_t result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char v55;
  uint64_t v56;
  _QWORD v57[2];
  int v58;
  char v59;
  uint64_t v60;
  int v61;
  _QWORD v62[2];
  char v63[8];
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*a2 + 8))
    return 0;
  v11 = *((_DWORD *)a2 + 5);
  if ((v11 & 0x40000000) != 0)
    v12 = (uint64_t *)*(a2 - 1);
  else
    v12 = &a2[-4 * (v11 & 0x7FFFFFF)];
  v13 = *v12;
  if (v13)
    v14 = *(unsigned __int8 *)(v13 + 16) >= 0x1Cu;
  else
    v14 = 0;
  if (v14 && *(_QWORD *)(v13 + 40) != a2[5])
    v13 = 0;
  if ((v11 & 0x40000000) != 0)
    v15 = (uint64_t *)*(a2 - 1);
  else
    v15 = &a2[-4 * (v11 & 0x7FFFFFF)];
  v16 = v15[4];
  if (v16)
    v17 = *(unsigned __int8 *)(v16 + 16) >= 0x1Cu;
  else
    v17 = 0;
  if (v17 && *(_QWORD *)(v16 + 40) != a2[5])
    v16 = 0;
  if (v13 && *(unsigned __int8 *)(v13 + 16) <= 0x1Bu)
    v13 = 0;
  if (!v16)
    return 0;
  result = 0;
  v18 = *(unsigned __int8 *)(v16 + 16);
  if (v18 <= 0x1B)
    v19 = 0;
  else
    v19 = v16;
  if (v13 && v18 >= 0x1C)
  {
    if (*(_BYTE *)(v13 + 16) == 46 && *(_BYTE *)(v19 + 16) == 46)
    {
      v20 = 0;
      v62[0] = v13;
      v62[1] = v19;
      v54 = a1;
      v21 = 1;
      while (2)
      {
        v22 = 0;
        v55 = v21;
        v23 = v62[v20];
        v56 = v20 ^ 1;
        v24 = 1;
        do
        {
          v25 = v24;
          v26 = *(_DWORD *)(v23 + 20);
          if ((v26 & 0x40000000) != 0)
            v27 = *(_QWORD *)(v23 - 8);
          else
            v27 = v23 - 32 * (v26 & 0x7FFFFFF);
          v28 = *(_QWORD *)(v27 + 32 * v22);
          v29 = *(unsigned __int8 *)(v28 + 16);
          if (v28)
            v30 = v29 >= 0x1C;
          else
            v30 = 0;
          if ((!v30 || *(_QWORD *)(v28 + 40) == *(_QWORD *)(v23 + 40)) && v29 == 44)
          {
            v31 = *(_DWORD *)(v28 + 20);
            v32 = (v31 & 0x40000000) != 0 ? *(uint64_t **)(v28 - 8) : (uint64_t *)(v28 - 32 * (v31 & 0x7FFFFFF));
            v33 = *v32;
            v34 = *(unsigned __int8 *)(*v32 + 16);
            if (v33 && v34 == 17)
            {
              v61 = 64;
              v60 = 0x3FF0000000000000;
              llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v57, (const llvm::APInt **)&v60);
              v64 = v57[0];
              v65 = v57[1];
              v66 = v58;
              v67 = v59 & 0xF;
              llvm::APFloat::convert((uint64_t)v63, *(void **)(v33 + 32), 1, v57);
              v37 = sub_1C47ECB98(v33 + 24, (uint64_t)v63);
              if ((_UNKNOWN *)v64 == &unk_1C866F1C0)
              {
                sub_1C4773C74(&v65);
              }
              else if ((*(_DWORD *)(v64 + 8) - 64) <= 0xFFFFFF7F && v65)
              {
                MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
              }
              if (v37)
              {
                v38 = *(_DWORD *)(v28 + 20);
                v39 = (v38 & 0x40000000) != 0 ? *(_QWORD *)(v28 - 8) : v28 - 32 * (v38 & 0x7FFFFFF);
                v40 = *(_QWORD *)(v39 + 32);
                v41 = v40 && *(unsigned __int8 *)(v40 + 16) >= 0x1Cu;
                if ((!v41 || *(_QWORD *)(v40 + 40) == *(_QWORD *)(v28 + 40))
                  && llvm::ValueIsKnownClamped((llvm *)v40, 0, v36))
                {
                  v42 = 0;
                  v43 = *(_DWORD *)(v28 + 20);
                  v44 = v62[v56];
                  v45 = *(_DWORD *)(v44 + 20);
                  v46 = v44 - 32 * (v45 & 0x7FFFFFF);
                  v47 = 1;
                  while (1)
                  {
                    v48 = v47;
                    v49 = v28 - 32 * (v43 & 0x7FFFFFF);
                    if ((v43 & 0x40000000) != 0)
                      v49 = *(_QWORD *)(v28 - 8);
                    v50 = v44 - 32 * (v45 & 0x7FFFFFF);
                    if ((v45 & 0x40000000) != 0)
                      v50 = *(_QWORD *)(v44 - 8);
                    if (*(_QWORD *)(v49 + 32) == *(_QWORD *)(v50 + 32 * v42))
                      break;
                    v47 = 0;
                    v42 = 1;
                    if ((v48 & 1) == 0)
                      goto LABEL_75;
                  }
                  if (!a3)
                    return 1;
                  v51 = *(_DWORD *)(v23 + 20);
                  if ((v51 & 0x40000000) != 0)
                    v52 = *(_QWORD *)(v23 - 8);
                  else
                    v52 = v23 - 32 * (v51 & 0x7FFFFFF);
                  v53 = v42 ^ 1;
                  if ((v45 & 0x40000000) != 0)
                    v46 = *(_QWORD *)(v44 - 8);
                  return sub_1C47B2774(v54, a2, *(_QWORD *)(v52 + 32 * (v22 ^ 1)), v40, *(_QWORD *)(v46 + 32 * v53), 0, a3, 443, 0, a4, a5);
                }
              }
            }
          }
LABEL_75:
          v24 = 0;
          v22 = 1;
        }
        while ((v25 & 1) != 0);
        v21 = 0;
        v20 = 1;
        if ((v55 & 1) != 0)
          continue;
        break;
      }
    }
    return 0;
  }
  return result;
}

void sub_1C47B4138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  void *v4;
  uint64_t *v5;

  v4 = *(void **)(a1 + 8);
  v3 = (uint64_t *)(a1 + 8);
  v5 = (uint64_t *)(a2 + 8);
  if (v4 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::add(v3, v5, a3);
  else
    llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)v3, (const llvm::detail::IEEEFloat *)v5, a3, 0);
}

void sub_1C47B415C(uint64_t a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  const llvm::detail::DoubleAPFloat *v4;

  v3 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v4 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v3 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::compare(v2, v4);
  else
    llvm::detail::IEEEFloat::compare(v2, v4);
}

uint64_t sub_1C47B417C(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17[2];
  uint64_t v18;

  if (!*(_BYTE *)(*a2 + 8))
  {
    if (a3 > 4)
      return 0;
LABEL_7:
    v6 = a2[1];
    if (!v6)
      return 1;
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 24);
      v8 = *(_QWORD *)(v7 + 8);
      if (!v8 || *(_QWORD *)(v8 + 8) || *(_QWORD *)(a2[1] + 24) != *(_QWORD *)(v8 + 24))
      {
        if (*(_QWORD *)(v7 + 40) != a2[5])
          return 0;
        v9 = *(unsigned __int8 *)(v7 + 16);
        if ((v9 - 73) < 2
          || ((v10 = *(unsigned __int8 *)(a1 + 280), v18 = 0, v10)
           && (v17[1] = &v18, sub_1C5EAFBF8((uint64_t)v17, 16, (uint64_t)a2))
           || (v17[0] = &v18, sub_1C4E7B6EC(v17, (uint64_t)a2)))
          && v18)
        {
          if ((sub_1C47B417C(a1) & 1) == 0)
            return 0;
          goto LABEL_25;
        }
        if (v9 != 44 && v9 != 42)
          return 0;
        if (*(_BYTE *)(*a2 + 8) || *(_BYTE *)(*(_QWORD *)v7 + 8))
        {
          v11 = *(_DWORD *)(v7 + 20);
          v12 = (v11 & 0x40000000) != 0 ? *(_QWORD **)(v7 - 8) : (_QWORD *)(v7 - 32 * (v11 & 0x7FFFFFF));
          if ((_QWORD *)v12[4] == a2)
          {
            v13 = (_QWORD *)*v12;
            if ((_QWORD *)*v12 == a2)
              return 0;
            if (v13 && *((_BYTE *)v13 + 16) == 46)
            {
              v14 = v13[1];
              if (v14 && !*(_QWORD *)(v14 + 8))
                goto LABEL_36;
              v15 = a2[1];
              if (v15 && !*(_QWORD *)(v15 + 8))
                goto LABEL_25;
              if (v14 && !*(_QWORD *)(v14 + 8))
              {
LABEL_36:
                v16 = a2[1];
                if (!v16 || *(_QWORD *)(v16 + 8))
                  return 0;
              }
              if ((sub_1C47B417C(a1) & 1) != 0)
                return 0;
            }
          }
        }
      }
LABEL_25:
      v6 = *(_QWORD *)(v6 + 8);
      if (!v6)
        return 1;
    }
  }
  result = 0;
  if (a3 <= 4 && *(_BYTE *)(*a2 + 8) == 2)
    goto LABEL_7;
  return result;
}

uint64_t sub_1C47B436C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 17)
    return 1;
  if (v2 >= 0x1C)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      if (!*(_QWORD *)(v4 + 8))
        return sub_1C47ADDC8(a1, (_BYTE *)a2, 1, 0, 0);
    }
  }
  return 0;
}

uint64_t sub_1C47B43B0(uint64_t a1, unsigned __int8 *a2, int a3, int a4, unsigned int a5, int a6)
{
  uint64_t v6;
  int v7;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  int v37;
  uint64_t v38;
  int v39;
  llvm::MachineFunction **v40;
  llvm::MachineFunction *v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  _BOOL4 v47;
  int v48;
  llvm::MachineFunction *v49;
  uint64_t v50;
  int v51;
  char v53;
  int v54;
  char *v55;
  int v56;
  uint64_t *v57;
  uint64_t *v58;
  unsigned int v59;
  int v60;
  uint64_t **v61;
  uint64_t *v62;
  BOOL v63;
  int v64;
  uint64_t *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char *v77;
  uint64_t v78;
  int v79;
  unsigned __int8 *v80;
  uint64_t v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  _UNKNOWN ***v87;
  uint64_t v88;
  BOOL v89;
  int v90;
  unsigned __int8 *v91;
  uint64_t v92;
  int v93;
  BOOL v94;
  int v95;
  int v96;
  unsigned __int8 *v97;
  llvm::MachineFunction *v98;
  unsigned __int8 *v99;
  unsigned int v100;
  uint64_t v101;
  _BYTE *v102;
  int v103;
  _QWORD *v104;
  int v105;
  int v106;
  int v107;
  unsigned __int8 *v108;
  uint64_t v109;
  int v110;
  BOOL v111;
  int v112;
  int v114;
  unsigned __int8 *v115;
  uint64_t *v116;
  unsigned int v117;
  int v118;
  uint64_t **v119;
  uint64_t *v120;
  BOOL v121;
  uint64_t v122;
  uint64_t *v123;
  llvm::ConstantFP **v124;
  int v125;
  unsigned __int8 *v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  llvm::Type *v131;
  llvm::APFloatBase *v132;
  int v133;
  uint64_t *v134;
  int v135;
  unsigned __int8 *v136;
  int v137;
  llvm::MachineFunction *v138;
  int v139;
  unsigned int v140;
  int v141;
  llvm::MachineFunction **v142;
  int v143;
  int v144;
  unsigned int v145;
  int v146;
  unsigned __int8 *v147;
  int v148;
  uint64_t v149;
  int v150;
  _BYTE *v151;
  int v152;
  int v153;
  uint64_t v154;
  BOOL v155;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t *v160;
  uint64_t v161;
  llvm::MachineFunction *v162;
  llvm::MachineInstr *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int64x2_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  BOOL v174;
  BOOL v176;
  int v177;
  int8x16_t v178;
  __int32 v179;
  unsigned int v180;
  unint64_t v181;
  int8x16_t *v182;
  int *v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t *v187;
  uint64_t v188;
  llvm::MachineFunction *v189;
  llvm::MachineFunction *v190;
  unint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  int v196;
  _UNKNOWN ***v198;
  int v199;
  int v200;
  uint64_t v201;
  int IncompleteVirtualRegister;
  uint64_t v203;
  int v204;
  int v205;
  llvm::ConstantFP ***v206;
  unsigned int v207;
  char v208;
  char *v209;
  char *v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t *v214;
  uint64_t v215;
  llvm::MachineFunction *v216;
  llvm::MachineFunction *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  llvm::MachineInstr *v225;
  llvm::MachineFunction *v226;
  int v227;
  llvm::detail::DoubleAPFloat *v228;
  llvm::ConstantFP **v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  llvm::MachineInstr *v233;
  llvm::MachineFunction *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  llvm::detail::DoubleAPFloat *v242;
  void *v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v247;
  uint64_t v248;
  _BYTE *v249;
  int v250;
  llvm::ConstantFP ***v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  uint64_t v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v275;
  int v276;
  unsigned int v277;
  int v278;
  _QWORD *v279;
  llvm::MachineFunction *v280;
  llvm::MachineInstr *v281;
  _QWORD v282[2];
  int64x2_t v283;
  int64x2_t v284;
  int8x16_t v285;
  int8x16_t v286;
  llvm::MachineFunction *v287;
  llvm::MachineInstr *v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD v291[2];
  __int128 v292;
  __int128 v293;
  uint64_t v294;

  v294 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  if ((*(unsigned __int8 *)(*(_QWORD *)a2 + 8) | 2) != 2)
    return 0;
  v7 = a6;
  v11 = a1;
  v12 = a2[16];
  if (!a6)
  {
    if ((v13 = *(unsigned __int8 *)(a1 + 280), v287 = 0, v13)
      && (*((_QWORD *)&v292 + 1) = &v287, a1 = sub_1C5EAFBF8((uint64_t)&v292, 16, (uint64_t)a2), (a1 & 1) != 0)
      || (*(_QWORD *)&v292 = &v287, a1 = sub_1C4E7B6EC((_QWORD **)&v292, (uint64_t)a2), (a1 & 1) != 0))
    {
      if (v287)
      {
        v266 = *((unsigned __int8 *)v287 + 16);
        if (v266 >= 0x1C)
        {
          v267 = *((_QWORD *)v287 + 1);
          if (v267)
          {
            if (!*(_QWORD *)(v267 + 8) && v266 <= 0x31 && ((1 << v266) & 0x2540000000000) != 0)
            {
              v28 = 1;
              a1 = sub_1C47B43B0(v11);
              if ((a1 & 1) != 0)
                return v28;
            }
          }
        }
      }
    }
  }
  v273 = v12 - 28;
  if (*(_BYTE *)(*(_QWORD *)(v11 + 256) + 313) && *(_BYTE *)(v11 + 280) && !*(_BYTE *)(v6 + 8))
  {
    if (a4 && v7 != 1)
    {
      if (v12 == 42)
      {
        if ((sub_1C47B3D3C((_QWORD *)v11, (uint64_t *)a2, a3, a4, a5) & 1) == 0)
        {
          a1 = sub_1C61299EC((_QWORD *)v11, (uint64_t *)a2, a3, a4, a5);
          if ((a1 & 1) == 0)
            goto LABEL_8;
        }
      }
      else
      {
        if (v12 != 46)
          goto LABEL_8;
        a1 = sub_1C61297E0((_QWORD *)v11, (uint64_t *)a2, a3, a4, a5);
        if ((a1 & 1) == 0)
          goto LABEL_8;
      }
      return 1;
    }
    if (v12 == 42)
    {
      v28 = 0;
      if ((sub_1C47B3D3C((_QWORD *)v11, (uint64_t *)a2, 0, 1, a5) & 1) != 0)
        return v28;
      a1 = sub_1C61299EC((_QWORD *)v11, (uint64_t *)a2, 0, 1, a5);
      v28 = 0;
      if ((a1 & 1) != 0)
        return v28;
    }
    else if (v12 == 46)
    {
      a1 = sub_1C61297E0((_QWORD *)v11, (uint64_t *)a2, 0, 1, a5);
      v28 = 0;
      if ((a1 & 1) != 0)
        return v28;
    }
  }
LABEL_8:
  v275 = a4;
  v279 = (_QWORD *)v11;
  if (!*(_BYTE *)(*(_QWORD *)(v11 + 256) + 313)
    || !*(_BYTE *)(v11 + 280)
    || *(_BYTE *)(v6 + 8)
    || v12 != 44 && v12 != 42)
  {
    goto LABEL_11;
  }
  v26 = *((_DWORD *)a2 + 5);
  if ((v26 & 0x40000000) != 0)
    v27 = (uint64_t *)*((_QWORD *)a2 - 1);
  else
    v27 = (uint64_t *)&a2[-32 * (v26 & 0x7FFFFFF)];
  v29 = *v27;
  if (v29 && *(unsigned __int8 *)(v29 + 16) >= 0x1Cu && *(_QWORD *)(v29 + 40) != *((_QWORD *)a2 + 5))
    v29 = 0;
  if ((v26 & 0x40000000) != 0)
    v30 = (unsigned __int8 *)*((_QWORD *)a2 - 1);
  else
    v30 = &a2[-32 * (v26 & 0x7FFFFFF)];
  v31 = *((_QWORD *)v30 + 4);
  if (v31 && *(unsigned __int8 *)(v31 + 16) >= 0x1Cu && *(_QWORD *)(v31 + 40) != *((_QWORD *)a2 + 5))
    v31 = 0;
  if (v29)
  {
    if (*(unsigned __int8 *)(v29 + 16) <= 0x1Bu)
      v32 = 0;
    else
      v32 = v29;
    if (!v31)
      goto LABEL_11;
  }
  else
  {
    v32 = 0;
    if (!v31)
      goto LABEL_11;
  }
  if (!v32 || *(unsigned __int8 *)(v31 + 16) < 0x1Cu)
    goto LABEL_11;
  v287 = 0;
  *((_QWORD *)&v292 + 1) = &v287;
  if (sub_1C5EAFBF8((uint64_t)&v292, 16, v32))
  {
    v98 = v287;
  }
  else
  {
    *(_QWORD *)&v292 = &v287;
    if (sub_1C4E7B6EC((_QWORD **)&v292, v32))
      v98 = v287;
    else
      v98 = 0;
  }
  v137 = *(unsigned __int8 *)(v11 + 280);
  v287 = 0;
  if (v137)
  {
    *((_QWORD *)&v292 + 1) = &v287;
    a1 = sub_1C5EAFBF8((uint64_t)&v292, 16, v31);
    if ((_DWORD)a1)
    {
      v138 = v287;
      if (!v98)
        goto LABEL_321;
      goto LABEL_318;
    }
  }
  *(_QWORD *)&v292 = &v287;
  a1 = sub_1C4E7B6EC((_QWORD **)&v292, v31);
  if ((_DWORD)a1)
    v138 = v287;
  else
    v138 = 0;
  if (v98)
  {
LABEL_318:
    if (*((unsigned __int8 *)v98 + 16) <= 0x1Bu)
      v32 = 0;
    else
      v32 = (uint64_t)v98;
  }
LABEL_321:
  if (v138)
  {
    if (*((unsigned __int8 *)v138 + 16) <= 0x1Bu)
      v31 = 0;
    else
      v31 = (uint64_t)v138;
  }
  if (v32)
  {
    if (v31)
    {
      if (*(_BYTE *)(v32 + 16) == 46 && *(_BYTE *)(v31 + 16) == 46)
      {
        a1 = sub_1C47B417C(v11, (_QWORD *)v32, 0);
        if ((_DWORD)a1)
        {
          a1 = sub_1C47B417C(v11, (_QWORD *)v31, 0);
          if ((_DWORD)a1)
          {
            if (v275)
            {
              if (v7 == 1)
                v139 = 5;
              else
                v139 = 0;
              v140 = v139 ^ (v98 != 0);
              if (v138)
                v140 ^= 4u;
              if (a2[16] == 44)
                v140 ^= 4u;
              v141 = *(_DWORD *)(v32 + 20);
              if ((v141 & 0x40000000) != 0)
                v142 = *(llvm::MachineFunction ***)(v32 - 8);
              else
                v142 = (llvm::MachineFunction **)(v32 - 32 * (v141 & 0x7FFFFFF));
              v159 = *(_DWORD *)(v31 + 20);
              if ((v159 & 0x40000000) != 0)
                v160 = *(uint64_t **)(v31 - 8);
              else
                v160 = (uint64_t *)(v31 - 32 * (v159 & 0x7FFFFFF));
              if ((*(unsigned __int8 *)(*(_QWORD *)a2 + 8) | 2) != 2)
                return 0;
              v161 = 0;
              v162 = *v142;
              v163 = v142[4];
              v164 = v160[4];
              v165 = *v160;
              v291[0] = 0;
              v291[1] = 0;
              v287 = v162;
              v288 = v163;
              v289 = v165;
              v290 = v164;
              v285 = 0u;
              v286 = 0u;
              v283 = 0u;
              v284 = 0u;
              do
              {
                v166 = *(uint64_t *)((char *)&v287 + v161 * 8);
                if (*(_BYTE *)(v166 + 16) != 17 || v166 == 0)
                  v168 = (int64x2_t *)&v285;
                else
                  v168 = &v283;
                v168->i64[v161++] = v166;
              }
              while (v161 != 4);
              v169 = v283.i64[1];
              v170 = v283.i64[0];
              v171 = v284.i64[1];
              v172 = v284.i64[0];
              v173 = !v283.i64[0] || v283.i64[1] == 0;
              v174 = v173 || v284.i64[0] == 0;
              if (!v174 && v284.i64[1] != 0)
                return 0;
              if (v283.i64[0] && !v283.i64[1])
              {
                v285 = vextq_s8(v285, v285, 8uLL);
                v283.i64[0] = 0;
                v283.i64[1] = v170;
                v169 = v170;
              }
              if (v284.i64[0] && !v284.i64[1])
              {
                v286 = vextq_s8(v286, v286, 8uLL);
                v284.i64[0] = 0;
                v284.i64[1] = v172;
                v171 = v172;
              }
              v272 = a3;
              if (v169)
                v176 = (v140 & 3) == 1;
              else
                v176 = 0;
              v177 = v140 & 4 | 2;
              if (!v176)
                v177 = v140;
              v178 = vbicq_s8((int8x16_t)xmmword_1C640F7A0, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v283), (int32x4_t)vceqzq_s64(v284)));
              *(int8x8_t *)v178.i8 = vorr_s8(*(int8x8_t *)v178.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v178, v178, 8uLL));
              v179 = v178.i32[0] | v178.i32[1];
              v180 = ((v171 != 0) & (v140 >> 2)) != 0 ? v177 & 3 | 8 : v177;
              if (!word_1C640FD12[2 * v179 + a5])
                return 0;
              v277 = word_1C640FD12[2 * v179 + a5];
              v181 = 0;
              v28 = 0;
              v282[0] = 0;
              v282[1] = 0;
              v182 = &v285;
              v183 = (int *)v282;
              do
              {
                if (((v180 >> v181) & 1) != 0)
                  *((_DWORD *)v282 + v181) = 2;
                if (v285.i64[v181])
                {
                  if (!v283.i64[v181])
                  {
                    v184 = sub_1C47AE068((uint64_t)v279, v182->i64, v183, &v292, 1, *((_QWORD *)a2 + 5), 7, 1);
                    *((_DWORD *)v291 + v181) = v184;
                    if (!v184)
                      return v28;
                  }
                }
                v28 = v181 > 2;
                ++v183;
                v182 = (int8x16_t *)((char *)v182 + 8);
                ++v181;
              }
              while (v181 != 4);
              v185 = v279[4];
              v186 = *(_QWORD *)(v185 + 640);
              v187 = *(unint64_t **)(v185 + 648);
              v188 = *(_QWORD *)(v279[12] + 8);
              v189 = *(llvm::MachineFunction **)(v186 + 32);
              v190 = (llvm::MachineFunction *)v279[9];
              v280 = v190;
              if (v190)
                llvm::MetadataTracking::track((uint64_t)&v280, (unsigned __int8 *)v190, 2);
              v191 = *((_QWORD *)v189 + 28);
              if (v191)
                *((_QWORD *)v189 + 28) = *(_QWORD *)v191;
              else
                v191 = sub_1C484358C((uint64_t)v189 + 128, 72, 3);
              *(_QWORD *)&v292 = v280;
              if (v280)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v280, (unsigned __int8 *)v280, (uint64_t)&v292);
                v280 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v191, v189, v188 + 48 * v277, (unsigned __int8 **)&v292, 0);
              if ((_QWORD)v292)
                llvm::MetadataTracking::untrack((uint64_t)&v292, (unsigned __int8 *)v292);
              if (v280)
                llvm::MetadataTracking::untrack((uint64_t)&v280, (unsigned __int8 *)v280);
              v235 = *(_QWORD *)(v186 + 40);
              *(_QWORD *)(v191 + 24) = v235;
              v236 = *(_QWORD *)(v235 + 32);
              v237 = *(unsigned int *)(v191 + 40);
              if ((_DWORD)v237)
              {
                v259 = *(_QWORD *)(v191 + 32);
                v260 = *(_QWORD *)(v236 + 40);
                v261 = 32 * v237;
                do
                {
                  if (!*(_BYTE *)v259)
                  {
                    v262 = *(unsigned int *)(v259 + 4);
                    if ((int)v262 >= 0)
                      v263 = (uint64_t *)(*(_QWORD *)(v260 + 272) + 8 * v262);
                    else
                      v263 = (uint64_t *)(*(_QWORD *)(v260 + 24) + 16 * (v262 & 0x7FFFFFFF) + 8);
                    v264 = *v263;
                    if (*v263)
                    {
                      v265 = *(_QWORD *)(v264 + 16);
                      *(_QWORD *)(v264 + 16) = v259;
                      *(_QWORD *)(v259 + 16) = v265;
                      if ((*(_BYTE *)(v259 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v259 + 24) = v264;
                      }
                      else
                      {
                        *(_QWORD *)(v259 + 24) = 0;
                        v263 = (uint64_t *)(v265 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v259 + 16) = v259;
                      *(_QWORD *)(v259 + 24) = 0;
                    }
                    *v263 = v259;
                  }
                  v259 += 32;
                  v261 -= 32;
                }
                while (v261);
              }
              v238 = *(_QWORD *)(v236 + 728);
              if (v238)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v238 + 24))(v238, v191);
              v239 = *v187 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v191 = v239 | *(_QWORD *)v191 & 7;
              *(_QWORD *)(v191 + 8) = v187;
              *(_QWORD *)(v239 + 8) = v191;
              *v187 = *v187 & 7 | v191;
              *((_QWORD *)&v292 + 1) = 0;
              v293 = 0uLL;
              LODWORD(v292) = 0x1000000;
              DWORD1(v292) = v272;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v189, (const llvm::MachineOperand *)&v292);
              LODWORD(v292) = 1;
              *((_QWORD *)&v292 + 1) = 0;
              *(_QWORD *)&v293 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v191, v189, (const llvm::MachineOperand *)&v292);
              v240 = 0;
              v280 = v189;
              v281 = (llvm::MachineInstr *)v191;
              do
              {
                v241 = v283.i64[v240];
                if (v241)
                {
                  v243 = *(void **)(v241 + 32);
                  v242 = (llvm::detail::DoubleAPFloat *)(v241 + 32);
                  if (v243 == &unk_1C866F1C0)
                    llvm::detail::DoubleAPFloat::bitcastToAPInt(v242, (unsigned int *)&v292);
                  else
                    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v242, (unsigned int *)&v292);
                  if (DWORD2(v292) >= 0x41)
                    v244 = (uint64_t *)v292;
                  else
                    v244 = (uint64_t *)&v292;
                  v245 = *v244;
                  if (DWORD2(v292) >= 0x41 && (_QWORD)v292 != 0)
                    MEMORY[0x1CAA32F9C]();
                  if ((*((_DWORD *)v282 + v240) & 2) != 0)
                    v247 = v245 ^ 0x8000;
                  else
                    v247 = v245;
                  v248 = v247 | 0x100000000;
                }
                else
                {
                  v249 = (_BYTE *)v285.i64[v240];
                  if (!v249 || (sub_1C47ADDC8((uint64_t)v279, v249, 1, &v280, 0) & 1) == 0)
                  {
                    v250 = *((_DWORD *)v291 + v240);
                    *((_QWORD *)&v292 + 1) = 0;
                    LODWORD(v292) = 0;
                    DWORD1(v292) = v250;
                    v293 = 0uLL;
                    llvm::MachineInstr::addOperand(v281, v280, (const llvm::MachineOperand *)&v292);
                  }
                  v248 = *((unsigned int *)v282 + v240);
                }
                LODWORD(v292) = 1;
                *((_QWORD *)&v292 + 1) = 0;
                *(_QWORD *)&v293 = v248;
                llvm::MachineInstr::addOperand(v281, v280, (const llvm::MachineOperand *)&v292);
                ++v240;
              }
              while (v240 != 4);
              v28 = 1;
              LODWORD(v292) = 1;
              *((_QWORD *)&v292 + 1) = 0;
              *(_QWORD *)&v293 = 0;
              llvm::MachineInstr::addOperand(v281, v280, (const llvm::MachineOperand *)&v292);
              v234 = v280;
              v233 = v281;
LABEL_526:
              v292 = 0u;
              v293 = 0u;
              llvm::MachineInstr::addOperand(v233, v234, (const llvm::MachineOperand *)&v292);
              return v28;
            }
            v157 = *(_QWORD *)(v32 + 8);
            if (v157)
            {
              if (!*(_QWORD *)(v157 + 8))
              {
                v158 = *(_QWORD *)(v31 + 8);
                if (v158)
                {
                  if (!*(_QWORD *)(v158 + 8))
                    return 0;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_11:
  if (!*(_BYTE *)(v11 + 280))
  {
    if (v12 == 44)
    {
LABEL_285:
      if (v275 == 1)
      {
        v124 = *(llvm::ConstantFP ***)a2;
        if (!*(_BYTE *)(*(_QWORD *)a2 + 8))
        {
          v125 = *((_DWORD *)a2 + 5);
          v126 = (v125 & 0x40000000) != 0 ? (unsigned __int8 *)*((_QWORD *)a2 - 1) : &a2[-32 * (v125 & 0x7FFFFFF)];
          v127 = *((_QWORD *)v126 + 4);
          v128 = *(unsigned __int8 *)(v127 + 16);
          if ((!v127 || v128 < 0x1C || *(_QWORD *)(v127 + 40) == *((_QWORD *)a2 + 5)) && v128 == 84)
          {
            v129 = *(_QWORD *)(v127 - 32);
            if (v129)
            {
              if (!*(_BYTE *)(v129 + 16)
                && *(_QWORD *)(v129 + 24) == *(_QWORD *)(v127 + 72)
                && (*(_BYTE *)(v129 + 33) & 0x20) != 0)
              {
                v130 = *(_DWORD *)(v129 + 36);
                if (v130 == 1851 || v130 == 1830 && (sub_1C47AD4FC(a1, v127) & 1) == 0)
                {
                  if (sub_1C47AE6F8(v127))
                  {
                    v132 = llvm::ConstantFP::get(v124, v131, -1.0);
                    v133 = *((_DWORD *)a2 + 5);
                    if ((v133 & 0x40000000) != 0)
                      v134 = (uint64_t *)*((_QWORD *)a2 - 1);
                    else
                      v134 = (uint64_t *)&a2[-32 * (v133 & 0x7FFFFFF)];
                    return sub_1C47B2774((_QWORD *)v11, (uint64_t *)a2, v127, (uint64_t)v132, *v134, 0, a3, 141, 0, 1, a5);
                  }
                }
              }
            }
          }
        }
      }
      return sub_1C47AFE88(v11, a2, a3, v275, a5, v7);
    }
    if (v12 != 49)
      return sub_1C47AFE88(v11, a2, a3, v275, a5, v7);
    goto LABEL_239;
  }
  if (v12 != 44 && v12 != 42)
  {
    v25 = 1;
LABEL_197:
    if (v25)
      v89 = v273 == 21;
    else
      v89 = 0;
    if (v89)
    {
      v90 = *((_DWORD *)a2 + 5);
      if ((v90 & 0x40000000) != 0)
        v91 = (unsigned __int8 *)*((_QWORD *)a2 - 1);
      else
        v91 = &a2[-32 * (v90 & 0x7FFFFFF)];
      v92 = *(_QWORD *)v91;
      v93 = *(unsigned __int8 *)(*(_QWORD *)v91 + 16);
      if (v92)
        v94 = v93 == 17;
      else
        v94 = 0;
      if (v94)
      {
        DWORD2(v292) = 64;
        *(_QWORD *)&v292 = 0x3FF0000000000000;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v287, (const llvm::APInt **)&v292);
        *((_QWORD *)&v292 + 1) = v287;
        *(_QWORD *)&v293 = v288;
        DWORD2(v293) = v289;
        BYTE12(v293) = BYTE4(v289) & 0xF;
        llvm::APFloat::convert((uint64_t)&v292, *(void **)(v92 + 32), 1, &v287);
        a1 = sub_1C47ECB98(v92 + 24, (uint64_t)&v292);
        v95 = a1;
        if (*((_UNKNOWN **)&v292 + 1) == &unk_1C866F1C0)
        {
          a1 = (uint64_t)sub_1C4773C74((uint64_t *)&v293);
        }
        else if ((*(_DWORD *)(*((_QWORD *)&v292 + 1) + 8) - 64) <= 0xFFFFFF7F)
        {
          a1 = v293;
          if ((_QWORD)v293)
            a1 = MEMORY[0x1CAA32F9C](v293, 0x1000C8000313F17);
        }
        if (v95)
        {
          v96 = *((_DWORD *)a2 + 5);
          v97 = (v96 & 0x40000000) != 0 ? (unsigned __int8 *)*((_QWORD *)a2 - 1) : &a2[-32 * (v96 & 0x7FFFFFF)];
          v99 = (unsigned __int8 *)*((_QWORD *)v97 + 4);
          v100 = v99[16];
          if ((!v99 || v100 < 0x1C || *((_QWORD *)v99 + 5) == *((_QWORD *)a2 + 5)) && v100 == 84)
          {
            v101 = *((_QWORD *)v99 - 4);
            if (v101)
            {
              if (!*(_BYTE *)(v101 + 16)
                && *(_QWORD *)(v101 + 24) == *((_QWORD *)v99 + 9)
                && (*(_BYTE *)(v101 + 33) & 0x20) != 0
                && *(_DWORD *)(v101 + 36) == 280)
              {
                if (v7 | a5)
                  return 0;
                v102 = *(_BYTE **)&v99[-32 * (*((_DWORD *)v99 + 5) & 0x7FFFFFF)];
                v103 = v275;
                v104 = (_QWORD *)v11;
                v105 = a3;
                v106 = 424;
                return sub_1C47B1160(v104, (uint64_t *)v99, v102, v105, v106, v103);
              }
            }
          }
        }
      }
    }
    else if (v273 != 21)
    {
      goto LABEL_284;
    }
LABEL_239:
    v107 = *((_DWORD *)a2 + 5);
    if ((v107 & 0x40000000) != 0)
      v108 = (unsigned __int8 *)*((_QWORD *)a2 - 1);
    else
      v108 = &a2[-32 * (v107 & 0x7FFFFFF)];
    v109 = *(_QWORD *)v108;
    v110 = *(unsigned __int8 *)(*(_QWORD *)v108 + 16);
    if (v109)
      v111 = v110 == 17;
    else
      v111 = 0;
    if (v111)
    {
      DWORD2(v292) = 64;
      *(_QWORD *)&v292 = 0x3FF0000000000000;
      llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v287, (const llvm::APInt **)&v292);
      *((_QWORD *)&v292 + 1) = v287;
      *(_QWORD *)&v293 = v288;
      DWORD2(v293) = v289;
      BYTE12(v293) = BYTE4(v289) & 0xF;
      llvm::APFloat::convert((uint64_t)&v292, *(void **)(v109 + 32), 1, &v287);
      a1 = sub_1C47ECB98(v109 + 24, (uint64_t)&v292);
      v112 = a1;
      if (*((_UNKNOWN **)&v292 + 1) == &unk_1C866F1C0)
      {
        a1 = (uint64_t)sub_1C4773C74((uint64_t *)&v293);
      }
      else if ((*(_DWORD *)(*((_QWORD *)&v292 + 1) + 8) - 64) <= 0xFFFFFF7F)
      {
        a1 = v293;
        if ((_QWORD)v293)
          a1 = MEMORY[0x1CAA32F9C](v293, 0x1000C8000313F17);
      }
      if (v112)
      {
        if (v7 | a5)
          return 0;
        v135 = *((_DWORD *)a2 + 5);
        if ((v135 & 0x40000000) != 0)
          v136 = (unsigned __int8 *)*((_QWORD *)a2 - 1);
        else
          v136 = &a2[-32 * (v135 & 0x7FFFFFF)];
        v103 = v275;
        v102 = (_BYTE *)*((_QWORD *)v136 + 4);
        v104 = (_QWORD *)v11;
        v99 = a2;
        v105 = a3;
        v106 = 423;
        return sub_1C47B1160(v104, (uint64_t *)v99, v102, v105, v106, v103);
      }
    }
    if (!*(_BYTE *)(v11 + 280))
      return sub_1C47AFE88(v11, a2, a3, v275, a5, v7);
    v114 = *((_DWORD *)a2 + 5);
    if ((v114 & 0x40000000) != 0)
      v115 = (unsigned __int8 *)*((_QWORD *)a2 - 1);
    else
      v115 = &a2[-32 * (v114 & 0x7FFFFFF)];
    v116 = (uint64_t *)*((_QWORD *)v115 + 4);
    v117 = *((unsigned __int8 *)v116 + 16);
    if (v116 && v117 >= 0x1C)
    {
      if (v116[5] != *((_QWORD *)a2 + 5))
        goto LABEL_284;
    }
    else if (v117 < 0x1C)
    {
      goto LABEL_284;
    }
    if (v117 - 73 > 1)
    {
      v120 = v116;
    }
    else
    {
      do
      {
        v118 = *((_DWORD *)v116 + 5);
        if ((v118 & 0x40000000) != 0)
          v119 = (uint64_t **)*(v116 - 1);
        else
          v119 = (uint64_t **)&v116[-4 * (v118 & 0x7FFFFFF)];
        v120 = *v119;
        v117 = *((unsigned __int8 *)*v119 + 16);
        if (v120)
          v121 = v117 >= 0x1C;
        else
          v121 = 0;
        if (v121)
        {
          if (v120[5] != v116[5])
            goto LABEL_284;
        }
        else if (v117 < 0x1C)
        {
          goto LABEL_284;
        }
        v116 = v120;
      }
      while (v117 - 73 < 2);
    }
    if (v117 != 84
      || (v122 = *(v120 - 4)) == 0
      || *(_BYTE *)(v122 + 16)
      || *(_QWORD *)(v122 + 24) != v120[9]
      || (*(_BYTE *)(v122 + 33) & 0x20) == 0
      || *(_DWORD *)(v122 + 36) != 280)
    {
LABEL_284:
      if (v273 != 16)
        return sub_1C47AFE88(v11, a2, a3, v275, a5, v7);
      goto LABEL_285;
    }
    if ((v114 & 0x40000000) != 0)
      v123 = (uint64_t *)*((_QWORD *)a2 - 1);
    else
      v123 = (uint64_t *)&a2[-32 * (v114 & 0x7FFFFFF)];
    v148 = *(_DWORD *)(*v120 + 8);
    if ((v148 | 2) != 2)
      return 0;
    v269 = v7;
    v149 = *v123;
    v150 = *(unsigned __int8 *)(*(_QWORD *)*v123 + 8);
    if ((v150 | 2) != 2)
      return 0;
    v151 = (_BYTE *)v120[-4 * (*((_DWORD *)v120 + 5) & 0x7FFFFFF)];
    LOBYTE(v291[0]) = v150 == 0;
    v152 = v275 == 1;
    v153 = v148;
    v154 = v120[1];
    v271 = a3;
    if (v154)
    {
      if (v153)
        v155 = 1;
      else
        v155 = *(_QWORD *)(v154 + 8) == 0;
      if (v155)
      {
        v152 = v275 == 1 && v153 == 0;
        if (!v153)
          goto LABEL_447;
      }
      else
      {
        v192 = 1;
        do
        {
          v193 = *(_QWORD *)(v154 + 24);
          if (v193 && *(_BYTE *)(v193 + 16) == 74)
          {
            while (1)
            {
              v193 = *(_QWORD *)(v193 + 8);
              if (!v193)
                break;
              v194 = *(_QWORD *)(v193 + 24);
              v195 = *(unsigned __int8 *)(v194 + 16);
              if (v195 == 49)
                v196 = 0;
              else
                v196 = v192;
              if (v195 >= 0x1C && v194 != 0)
                v192 = v196;
            }
          }
          v154 = *(_QWORD *)(v154 + 8);
        }
        while (v154);
        if ((v192 & 1) != 0)
        {
          v152 = (v275 == 1) & v192;
LABEL_447:
          v198 = &off_1E7F982A8;
          v199 = 1;
          goto LABEL_449;
        }
      }
    }
    else if (!v153)
    {
      goto LABEL_447;
    }
    v152 = 0;
    v199 = 0;
    v198 = &off_1E7F98468;
LABEL_449:
    if (v150)
      v200 = 0;
    else
      v200 = v152;
    v201 = *(_QWORD *)(v11 + 48);
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v201, "", 0);
    *(_QWORD *)(*(_QWORD *)(v201 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v198;
    v203 = *(_QWORD *)(v201 + 8);
    if (v203)
      (*(void (**)(uint64_t))(*(_QWORD *)v203 + 24))(v203);
    if (!sub_1C47B1160((_QWORD *)v11, v120, v151, IncompleteVirtualRegister, 424, v199))
      return 0;
    v278 = IncompleteVirtualRegister;
    v285.i64[0] = 0;
    if (*(_BYTE *)(v149 + 16) == 17)
    {
      v251 = sub_1C6126914(v11, (uint64_t *)v149);
      v283.i32[0] = 0;
      if (v251)
      {
        v206 = v251;
        v208 = 0;
        v205 = 0;
        v207 = 2;
        goto LABEL_459;
      }
    }
    else
    {
      v285.i64[0] = v149;
      v283.i32[0] = 0;
    }
    v204 = sub_1C47AE068(v11, v285.i64, v283.i32, v291, v200, v120[5], 7, 1);
    if (!v204)
      return 0;
    v205 = v204;
    v206 = 0;
    v207 = LOBYTE(v291[0]);
    v208 = 1;
LABEL_459:
    v209 = (char *)&unk_1C640FDAE + 4 * v207 - 4;
    v210 = (char *)&unk_1C640FD7E + 24 * (v275 == 1) + 12 * v199 + 4 * v207;
    if (v200)
      v210 = v209;
    v211 = *(unsigned __int16 *)&v210[2 * a5];
    v212 = *(_QWORD *)(v11 + 32);
    v213 = *(_QWORD *)(v212 + 640);
    v214 = *(unint64_t **)(v212 + 648);
    v215 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 8);
    v216 = *(llvm::MachineFunction **)(v213 + 32);
    v217 = *(llvm::MachineFunction **)(v11 + 72);
    v287 = v217;
    if (v217)
      llvm::MetadataTracking::track((uint64_t)&v287, (unsigned __int8 *)v217, 2);
    v218 = v215 + 48 * v211;
    v219 = *((_QWORD *)v216 + 28);
    if (v219)
      *((_QWORD *)v216 + 28) = *(_QWORD *)v219;
    else
      v219 = sub_1C484358C((uint64_t)v216 + 128, 72, 3);
    *(_QWORD *)&v292 = v287;
    if (v287)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v287, (unsigned __int8 *)v287, (uint64_t)&v292);
      v287 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v219, v216, v218, (unsigned __int8 **)&v292, 0);
    if ((_QWORD)v292)
      llvm::MetadataTracking::untrack((uint64_t)&v292, (unsigned __int8 *)v292);
    if (v287)
      llvm::MetadataTracking::untrack((uint64_t)&v287, (unsigned __int8 *)v287);
    v220 = *(_QWORD *)(v213 + 40);
    *(_QWORD *)(v219 + 24) = v220;
    v221 = *(_QWORD *)(v220 + 32);
    v222 = *(unsigned int *)(v219 + 40);
    if ((_DWORD)v222)
    {
      v252 = *(_QWORD *)(v219 + 32);
      v253 = *(_QWORD *)(v221 + 40);
      v254 = 32 * v222;
      do
      {
        if (!*(_BYTE *)v252)
        {
          v255 = *(unsigned int *)(v252 + 4);
          if ((int)v255 >= 0)
            v256 = (uint64_t *)(*(_QWORD *)(v253 + 272) + 8 * v255);
          else
            v256 = (uint64_t *)(*(_QWORD *)(v253 + 24) + 16 * (v255 & 0x7FFFFFFF) + 8);
          v257 = *v256;
          if (*v256)
          {
            v258 = *(_QWORD *)(v257 + 16);
            *(_QWORD *)(v257 + 16) = v252;
            *(_QWORD *)(v252 + 16) = v258;
            if ((*(_BYTE *)(v252 + 3) & 1) != 0)
            {
              *(_QWORD *)(v252 + 24) = v257;
            }
            else
            {
              *(_QWORD *)(v252 + 24) = 0;
              v256 = (uint64_t *)(v258 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v252 + 16) = v252;
            *(_QWORD *)(v252 + 24) = 0;
          }
          *v256 = v252;
        }
        v252 += 32;
        v254 -= 32;
      }
      while (v254);
    }
    v223 = *(_QWORD *)(v221 + 728);
    if (v223)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v223 + 24))(v223, v219);
    v224 = *v214 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v219 = v224 | *(_QWORD *)v219 & 7;
    *(_QWORD *)(v219 + 8) = v214;
    *(_QWORD *)(v224 + 8) = v219;
    *v214 = *v214 & 7 | v219;
    *((_QWORD *)&v292 + 1) = 0;
    v293 = 0uLL;
    LODWORD(v292) = 0x1000000;
    DWORD1(v292) = v271;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v219, v216, (const llvm::MachineOperand *)&v292);
    LODWORD(v292) = 1;
    *((_QWORD *)&v292 + 1) = 0;
    *(_QWORD *)&v293 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v219, v216, (const llvm::MachineOperand *)&v292);
    v287 = v216;
    v288 = (llvm::MachineInstr *)v219;
    if ((v208 & 1) == 0)
    {
      v227 = *((unsigned __int8 *)*v206 + 8);
      v229 = v206[4];
      v228 = (llvm::detail::DoubleAPFloat *)(v206 + 4);
      if (v229 == (llvm::ConstantFP **)&unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v228, (unsigned int *)&v292);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v228, (unsigned int *)&v292);
      if (DWORD2(v292) >= 0x41)
        v230 = (uint64_t *)v292;
      else
        v230 = (uint64_t *)&v292;
      v231 = *v230;
      if (DWORD2(v292) >= 0x41 && (_QWORD)v292)
        MEMORY[0x1CAA32F9C]();
      v232 = v231 | 0x100000000;
      if (v227)
        v232 = v231;
      v226 = v287;
      v225 = v288;
      LODWORD(v292) = 1;
      *((_QWORD *)&v292 + 1) = 0;
      *(_QWORD *)&v293 = v232;
      llvm::MachineInstr::addOperand(v288, v287, (const llvm::MachineOperand *)&v292);
      goto LABEL_492;
    }
    if (v285.i64[0])
    {
      if ((sub_1C47ADDC8((uint64_t)v279, v285.i64[0], 0, &v287, 0) & 1) != 0)
      {
LABEL_480:
        LODWORD(v292) = 1;
        *((_QWORD *)&v292 + 1) = 0;
        *(_QWORD *)&v293 = v283.u32[0];
        llvm::MachineInstr::addOperand(v288, v287, (const llvm::MachineOperand *)&v292);
        v226 = v287;
        v225 = v288;
LABEL_492:
        *((_QWORD *)&v292 + 1) = 0;
        v293 = 0uLL;
        LODWORD(v292) = 0;
        DWORD1(v292) = v278;
        llvm::MachineInstr::addOperand(v225, v226, (const llvm::MachineOperand *)&v292);
        v28 = 1;
        LODWORD(v292) = 1;
        *((_QWORD *)&v292 + 1) = 0;
        *(_QWORD *)&v293 = 2 * (v269 == 1);
        llvm::MachineInstr::addOperand(v288, v287, (const llvm::MachineOperand *)&v292);
        LODWORD(v292) = 1;
        *((_QWORD *)&v292 + 1) = 0;
        *(_QWORD *)&v293 = 0;
        llvm::MachineInstr::addOperand(v288, v287, (const llvm::MachineOperand *)&v292);
        v234 = v287;
        v233 = v288;
        goto LABEL_526;
      }
      v216 = v287;
      v219 = (unint64_t)v288;
    }
    *((_QWORD *)&v292 + 1) = 0;
    v293 = 0uLL;
    LODWORD(v292) = 0;
    DWORD1(v292) = v205;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v219, v216, (const llvm::MachineOperand *)&v292);
    goto LABEL_480;
  }
  v14 = 0;
  v283 = 0uLL;
  v15 = *((_DWORD *)a2 + 5);
  v16 = 1;
  do
  {
    v17 = v16;
    v18 = &a2[-32 * (v15 & 0x7FFFFFF)];
    if ((v15 & 0x40000000) != 0)
      v18 = (unsigned __int8 *)*((_QWORD *)a2 - 1);
    v19 = *(_QWORD *)&v18[32 * v14];
    v20 = *(unsigned __int8 *)(v19 + 16);
    if (v19)
      v21 = v20 >= 0x1C;
    else
      v21 = 0;
    if (!v21 || *(_QWORD *)(v19 + 40) == *((_QWORD *)a2 + 5))
    {
      if (v20 <= 0x1B)
        v22 = 0;
      else
        v22 = v19;
    }
    else
    {
      v22 = 0;
    }
    v16 = 0;
    v283.i64[v14] = v22;
    v14 = 1;
  }
  while ((v17 & 1) != 0);
  v23 = 0;
  if (v283.i64[0] && v283.i64[1])
  {
    v24 = *(_QWORD *)(v283.i64[1] + 8);
    if (v24 && !*(_QWORD *)(v24 + 8))
    {
      v33 = *(_QWORD *)(v283.i64[0] + 8);
      if (v33)
        LODWORD(v33) = *(_QWORD *)(v33 + 8) == 0;
      v23 = v33 ^ 1;
    }
    else
    {
      v23 = 0;
    }
  }
  v268 = v7;
  v270 = a3;
  v34 = 0;
  v35 = 1;
  while (1)
  {
    v36 = v35;
    v37 = v34 ^ v23;
    v38 = v283.i64[v34 ^ v23];
    if (!v38)
      goto LABEL_180;
    if (*(unsigned __int8 *)(v38 + 16) - 73 > 1)
    {
      v41 = (llvm::MachineFunction *)v283.i64[v37];
    }
    else
    {
      do
      {
        v39 = *(_DWORD *)(v38 + 20);
        if ((v39 & 0x40000000) != 0)
          v40 = *(llvm::MachineFunction ***)(v38 - 8);
        else
          v40 = (llvm::MachineFunction **)(v38 - 32 * (v39 & 0x7FFFFFF));
        v41 = *v40;
        v42 = *((unsigned __int8 *)*v40 + 16);
        if (v41)
          v43 = v42 >= 0x1C;
        else
          v43 = 0;
        if (v43)
        {
          if (*((_QWORD *)v41 + 5) != *(_QWORD *)(v38 + 40))
            goto LABEL_180;
        }
        else if (v42 < 0x1C)
        {
          goto LABEL_180;
        }
        v38 = (uint64_t)v41;
      }
      while (v42 - 73 < 2);
    }
    if (((v44 = *(unsigned __int8 *)(v11 + 280), v287 = 0, v44)
       && (*((_QWORD *)&v292 + 1) = &v287, a1 = sub_1C5EAFBF8((uint64_t)&v292, 16, (uint64_t)v41), (a1 & 1) != 0)
       || (*(_QWORD *)&v292 = &v287, a1 = sub_1C4E7B6EC((_QWORD **)&v292, (uint64_t)v41), (a1 & 1) != 0))
      && v287)
    {
      v45 = *((unsigned __int8 *)v287 + 16);
      if (v45 < 0x1C)
        goto LABEL_180;
      v276 = 1;
      v41 = v287;
    }
    else
    {
      v276 = 0;
      v45 = *((unsigned __int8 *)v41 + 16);
    }
    v47 = v45 == 84
       && (v46 = *((_QWORD *)v41 - 4)) != 0
       && !*(_BYTE *)(v46 + 16)
       && *(_QWORD *)(v46 + 24) == *((_QWORD *)v41 + 9)
       && (*(_BYTE *)(v46 + 33) & 0x20) != 0
       && *(_DWORD *)(v46 + 36) == 280;
    if (v45 == 49)
    {
      v48 = *((_DWORD *)v41 + 5);
      v49 = (v48 & 0x40000000) != 0
          ? (llvm::MachineFunction *)*((_QWORD *)v41 - 1)
          : (llvm::MachineFunction *)((char *)v41 - 32 * (v48 & 0x7FFFFFF));
      v50 = *(_QWORD *)v49;
      v51 = *(unsigned __int8 *)(*(_QWORD *)v49 + 16);
      if (v50 && v51 == 17)
      {
        v285.i32[2] = 64;
        v285.i64[0] = 0x3FF0000000000000;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v287, (const llvm::APInt **)&v285);
        *((_QWORD *)&v292 + 1) = v287;
        *(_QWORD *)&v293 = v288;
        DWORD2(v293) = v289;
        BYTE12(v293) = BYTE4(v289) & 0xF;
        llvm::APFloat::convert((uint64_t)&v292, *(void **)(v50 + 32), 1, &v287);
        a1 = sub_1C47ECB98(v50 + 24, (uint64_t)&v292);
        v53 = a1;
        if (*((_UNKNOWN **)&v292 + 1) == &unk_1C866F1C0)
        {
          a1 = (uint64_t)sub_1C4773C74((uint64_t *)&v293);
        }
        else if ((*(_DWORD *)(*((_QWORD *)&v292 + 1) + 8) - 64) <= 0xFFFFFF7F)
        {
          a1 = v293;
          if ((_QWORD)v293)
            a1 = MEMORY[0x1CAA32F9C](v293, 0x1000C8000313F17);
        }
        if ((v53 & 1) != 0)
          goto LABEL_180;
      }
    }
    if (!v47 && v45 != 49 && v45 != 46)
      goto LABEL_180;
    a1 = sub_1C47B417C(v11, v41, 0);
    if (!(_DWORD)a1)
      goto LABEL_180;
    if (v45 != 49)
      break;
    v54 = *((_DWORD *)v41 + 5);
    if ((v54 & 0x40000000) != 0)
      v55 = (char *)*((_QWORD *)v41 - 1);
    else
      v55 = (char *)v41 - 32 * (v54 & 0x7FFFFFF);
    v58 = (uint64_t *)*((_QWORD *)v55 + 4);
    v59 = *((unsigned __int8 *)v58 + 16);
    if (v58 && v59 >= 0x1C)
    {
      if (v58[5] != *((_QWORD *)v41 + 5))
        goto LABEL_157;
    }
    else if (v59 < 0x1C)
    {
      goto LABEL_157;
    }
    if (v59 - 73 > 1)
    {
      v62 = v58;
    }
    else
    {
      do
      {
        v60 = *((_DWORD *)v58 + 5);
        if ((v60 & 0x40000000) != 0)
          v61 = (uint64_t **)*(v58 - 1);
        else
          v61 = (uint64_t **)&v58[-4 * (v60 & 0x7FFFFFF)];
        v62 = *v61;
        v59 = *((unsigned __int8 *)*v61 + 16);
        if (v62)
          v63 = v59 >= 0x1C;
        else
          v63 = 0;
        if (v63)
        {
          if (v62[5] != v58[5])
            goto LABEL_157;
        }
        else if (v59 < 0x1C)
        {
          goto LABEL_157;
        }
        v58 = v62;
      }
      while (v59 - 73 < 2);
    }
    if (v59 != 84
      || (v71 = *(v62 - 4)) == 0
      || *(_BYTE *)(v71 + 16)
      || *(_QWORD *)(v71 + 24) != v62[9]
      || (*(_BYTE *)(v71 + 33) & 0x20) == 0
      || *(_DWORD *)(v71 + 36) != 280)
    {
LABEL_157:
      if ((v54 & 0x40000000) != 0)
        v73 = (uint64_t *)*((_QWORD *)v41 - 1);
      else
        v73 = (uint64_t *)((char *)v41 - 32 * (v54 & 0x7FFFFFF));
      v67 = *v73;
      v74 = *(_QWORD *)(v11 + 48);
      v66 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v74, "", 0);
      *(_QWORD *)(*(_QWORD *)(v74 + 24) + 16 * (v66 & 0x7FFFFFFF)) = &off_1E7F98468;
      v75 = *(_QWORD *)(v74 + 8);
      if (v75)
        (*(void (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75);
      v76 = *((_DWORD *)v41 + 5);
      if ((v76 & 0x40000000) != 0)
        v77 = (char *)*((_QWORD *)v41 - 1);
      else
        v77 = (char *)v41 - 32 * (v76 & 0x7FFFFFF);
      a1 = sub_1C47B1160((_QWORD *)v11, (uint64_t *)v41, *((_BYTE **)v77 + 4), v66, 423, 0);
      if (!(_DWORD)a1)
        goto LABEL_180;
      goto LABEL_166;
    }
    if ((v54 & 0x40000000) != 0)
      v72 = (uint64_t *)*((_QWORD *)v41 - 1);
    else
      v72 = (uint64_t *)((char *)v41 - 32 * (v54 & 0x7FFFFFF));
    v84 = *(unsigned __int8 *)(*v62 + 8);
    v67 = *v72;
    v85 = *(_QWORD *)(v11 + 48);
    v86 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v85, "", 0);
    v66 = v86;
    v87 = &off_1E7F98468;
    if (!v84)
      v87 = &off_1E7F982A8;
    *(_QWORD *)(*(_QWORD *)(v85 + 24) + 16 * (v86 & 0x7FFFFFFF)) = v87;
    v88 = *(_QWORD *)(v85 + 8);
    if (v88)
      (*(void (**)(uint64_t))(*(_QWORD *)v88 + 24))(v88);
    a1 = sub_1C47B1160((_QWORD *)v11, v62, (_BYTE *)v62[-4 * (*((_DWORD *)v62 + 5) & 0x7FFFFFF)], v66, 424, *(unsigned __int8 *)(*v62 + 8) != 2);
    if ((a1 & 1) == 0)
      goto LABEL_180;
LABEL_166:
    v68 = 0;
LABEL_167:
    if (v66 || v67 == v68)
      goto LABEL_342;
    v78 = v37 ^ 1u;
    v79 = *((_DWORD *)a2 + 5);
    if ((v79 & 0x40000000) != 0)
      v80 = (unsigned __int8 *)*((_QWORD *)a2 - 1);
    else
      v80 = &a2[-32 * (v79 & 0x7FFFFFF)];
    v81 = *(_QWORD *)&v80[32 * (v37 ^ 1)];
    if (v67 == v81
      || v68 == v81
      || !sub_1C47B436C(v11, v67)
      || !sub_1C47B436C(v11, v68)
      || ((v82 = *((_DWORD *)a2 + 5), (v82 & 0x40000000) != 0)
        ? (v83 = (unsigned __int8 *)*((_QWORD *)a2 - 1))
        : (v83 = &a2[-32 * (v82 & 0x7FFFFFF)]),
          a1 = sub_1C47B436C(v11, *(_QWORD *)&v83[32 * v78]),
          (a1 & 1) == 0))
    {
      v66 = 0;
      goto LABEL_343;
    }
LABEL_180:
    v35 = 0;
    v34 = 1;
    if ((v36 & 1) == 0)
    {
      v25 = *(unsigned __int8 *)(v11 + 280);
      v7 = v268;
      a3 = v270;
      goto LABEL_197;
    }
  }
  if (v45 == 46)
  {
    v56 = *((_DWORD *)v41 + 5);
    if ((v56 & 0x40000000) != 0)
      v57 = (uint64_t *)*((_QWORD *)v41 - 1);
    else
      v57 = (uint64_t *)((char *)v41 - 32 * (v56 & 0x7FFFFFF));
    v66 = 0;
    v67 = *v57;
    v68 = v57[4];
    goto LABEL_167;
  }
  if (v47)
  {
    v64 = *((_DWORD *)v41 + 5);
    if ((v64 & 0x40000000) != 0)
      v65 = (uint64_t *)*((_QWORD *)v41 - 1);
    else
      v65 = (uint64_t *)((char *)v41 - 32 * (v64 & 0x7FFFFFF));
    v67 = *v65;
    v69 = *(_QWORD *)(v11 + 48);
    v66 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v69, "", 0);
    *(_QWORD *)(*(_QWORD *)(v69 + 24) + 16 * (v66 & 0x7FFFFFFF)) = &off_1E7F98468;
    v70 = *(_QWORD *)(v69 + 8);
    if (v70)
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70);
    a1 = sub_1C4791358(v11, (uint64_t *)v41, v66, 1, 0, 0);
    if ((a1 & 1) == 0)
      goto LABEL_180;
    goto LABEL_166;
  }
  v67 = 0;
  v68 = 0;
  v66 = 0;
LABEL_342:
  LODWORD(v78) = v37 ^ 1;
LABEL_343:
  if (v268 == 1)
    v143 = 5;
  else
    v143 = 0;
  if (v37)
    v144 = 1;
  else
    v144 = 4;
  if (v273 != 16)
    v144 = 0;
  v145 = v144 ^ v143 ^ v276;
  v146 = *((_DWORD *)a2 + 5);
  if ((v146 & 0x40000000) != 0)
    v147 = (unsigned __int8 *)*((_QWORD *)a2 - 1);
  else
    v147 = &a2[-32 * (v146 & 0x7FFFFFF)];
  return sub_1C47B2774((_QWORD *)v11, (uint64_t *)a2, v67, v68, *(_QWORD *)&v147[32 * v78], v66, v270, 141, v145, v275, a5);
}

uint64_t sub_1C47B6078(int *a1, llvm::ConstantInt ****a2, llvm::ConstantInt ****a3, llvm::ConstantInt ***a4, llvm::ConstantInt ***a5, int a6)
{
  llvm::ConstantInt ***v12;
  BOOL v13;
  BOOL v14;
  uint64_t result;
  int v16;
  int v17;

  if ((sub_1C47B6238((uint64_t)*a2) || sub_1C47B6238((uint64_t)*a3))
    && ((v12 = *a3, *a2 == a4) ? (v13 = v12 == a5) : (v13 = 0), v13 || (*a2 == a5 ? (v14 = v12 == a4) : (v14 = 0), v14)))
  {
    result = 0;
    v16 = *a1;
    switch(*a1)
    {
      case '#':
        v17 = 34;
        goto LABEL_22;
      case '$':
      case '&':
      case '(':
        return result;
      case '%':
        v17 = 36;
        goto LABEL_22;
      case '\'':
        v17 = 38;
        goto LABEL_22;
      case ')':
        v17 = 40;
        goto LABEL_22;
      default:
        if (v16 == 5)
        {
          v17 = 4;
        }
        else
        {
          if (v16 != 3)
            return result;
          v17 = 2;
        }
LABEL_22:
        *a1 = v17;
        break;
    }
  }
  else if ((sub_1C47B62A8(a1, a3, a6 ^ 1u) & 1) == 0)
  {
    return sub_1C47B62A8(a1, a2, a6);
  }
  return 1;
}

uint64_t sub_1C47B6194(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v3 = a2;
    while (!*(_QWORD *)(v2 + 8)
         && *(unsigned __int8 *)(v3 + 16) >= 0x1Cu
         && (sub_1C47ADDC8(a1, (_BYTE *)v3, 0, 0, 0) & 1) == 0)
    {
      v5 = *(unsigned __int8 *)(v3 + 16);
      if (v5 != 77)
      {
        if ((v5 - 66) > 0x19 || ((1 << (v5 - 66)) & 0x3800001) == 0)
        {
          if (v5 == 85)
            return 1;
          else
            return 2;
        }
        return 0;
      }
      v3 = *(_QWORD *)(v3 - 32);
      v2 = *(_QWORD *)(v3 + 8);
      if (!v2)
        return 0;
    }
  }
  return 0;
}

BOOL sub_1C47B6238(uint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 == 16)
    return 1;
  if (v1 == 17)
  {
    v3 = a1 + 24;
    v4 = v3;
    if (*(_UNKNOWN **)(a1 + 32) == &unk_1C866F1C0)
      v4 = *(_QWORD *)(a1 + 40);
    if ((*(_BYTE *)(v4 + 28) & 7) != 3)
      return !sub_1C4773C58(v3);
  }
  return 0;
}

uint64_t sub_1C47B62A8(int *a1, llvm::ConstantInt ****a2, int a3)
{
  llvm::ConstantInt ***v6;
  int v7;
  BOOL v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const llvm::detail::DoubleAPFloat *v13;
  llvm::detail::DoubleAPFloat *v14;
  unint64_t **v15;
  uint64_t v16;
  _BOOL4 v18;
  const llvm::APFloat *v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int64_t v24;
  unint64_t v26;
  int v27;
  const llvm::APInt *v28;
  int v29;
  uint64_t v30;
  unint64_t *v32;
  uint64_t v33;
  unint64_t **v34;
  int v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = *((unsigned __int8 *)*a2 + 16);
  if (*a2)
    v8 = v7 == 16;
  else
    v8 = 0;
  if (v8)
  {
    v11 = *((unsigned int *)v6 + 8);
    LODWORD(v33) = v11;
    if (v11 > 0x40)
    {
      v12 = operator new[]();
      memcpy((void *)v12, v6[3], ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v12 = (uint64_t)v6[3];
    }
    v32 = (unint64_t *)v12;
    v21 = *a1;
    if (*a1 == 41 || v21 == 37)
      a3 ^= 1u;
    if ((v21 - 38) <= 3)
    {
      v22 = v11 - 1;
      if (a3)
      {
        if (v11 > 0x40)
        {
          if (((*(_QWORD *)(v12 + 8 * (v22 >> 6)) >> v22) & 1) != 0
            && llvm::APInt::countTrailingZerosSlowCase(&v32) == v22)
          {
            goto LABEL_64;
          }
        }
        else if (1 << v22 == v12)
        {
          goto LABEL_64;
        }
        goto LABEL_59;
      }
      if (v11 > 0x40)
      {
        if (((*(_QWORD *)(v12 + 8 * (v22 >> 6)) >> v22) & 1) == 0
          && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v32) == v22)
        {
          goto LABEL_64;
        }
      }
      else if (v12 == ~(-1 << v22))
      {
        goto LABEL_64;
      }
LABEL_61:
      llvm::APInt::operator++((uint64_t)&v32);
      goto LABEL_62;
    }
    if (a3)
    {
      if (v11 > 0x40)
      {
        v23 = 0;
        v24 = (unint64_t)(v11 + 63) >> 6;
        do
        {
          if (v24-- < 1)
            break;
          v26 = *(_QWORD *)(v12 + 8 * v24);
          v23 += __clz(v26);
        }
        while (!v26);
        a3 = 0;
        v27 = v11 | 0xFFFFFFC0;
        if ((v11 & 0x3F) == 0)
          v27 = 0;
        if (v23 + v27 == (_DWORD)v11)
        {
LABEL_67:
          if (v12)
          {
            v30 = v12;
LABEL_69:
            MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
          }
LABEL_77:
          v10 = 1;
          return a3 & v10;
        }
      }
      else if (!v12)
      {
        goto LABEL_52;
      }
LABEL_59:
      llvm::APInt::operator--((uint64_t)&v32);
LABEL_62:
      v29 = *a1 - 35;
      if (v29 <= 6 && ((0x55u >> v29) & 1) != 0)
      {
        *a1 = dword_1C640FEA4[v29];
        *a2 = (llvm::ConstantInt ***)llvm::ConstantInt::get(***a2, (llvm::LLVMContext *)&v32, v28);
        a3 = 1;
        goto LABEL_65;
      }
LABEL_64:
      a3 = 0;
LABEL_65:
      if (v33 < 0x41)
        goto LABEL_77;
      v12 = (uint64_t)v32;
      goto LABEL_67;
    }
    if ((_DWORD)v11)
    {
      if (v11 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v32) == (_DWORD)v11)
          goto LABEL_64;
      }
      else if (0xFFFFFFFFFFFFFFFFLL >> -(char)v11 == v12)
      {
        goto LABEL_64;
      }
      goto LABEL_61;
    }
LABEL_52:
    a3 = 0;
    goto LABEL_77;
  }
  if (v6)
    v9 = v7 == 17;
  else
    v9 = 0;
  if (v9)
  {
    v13 = (const llvm::detail::DoubleAPFloat *)(v6 + 4);
    if (v6[4] == (llvm::ConstantInt **)&unk_1C866F1C0)
      v14 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v33, v13);
    else
      v14 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v33, (uint64_t **)v13);
    v15 = v34;
    if ((_UNKNOWN *)v33 != &unk_1C866F1C0)
      v15 = &v32;
    if ((*((_BYTE *)v15 + 28) & 6) == 0)
      goto LABEL_74;
    v16 = (*a1 == 5) ^ a3;
    if ((_DWORD)v16 == 1)
    {
      if (sub_1C612A0C8((uint64_t)&v32))
        goto LABEL_74;
    }
    else if ((_UNKNOWN *)v33 == &unk_1C866F1C0)
    {
      if (llvm::detail::DoubleAPFloat::isLargest(v14))
        goto LABEL_74;
    }
    else
    {
      v18 = (v36 & 6) != 0 && (v36 & 7) != 3;
      if (*(_DWORD *)(v33 + 16) == 1)
      {
        if (v18 && v35 == *(_DWORD *)v33 && llvm::detail::IEEEFloat::isSignificandAllOnesExceptLSB(v14))
          goto LABEL_74;
      }
      else if (v18 && v35 == *(_DWORD *)v33 && llvm::detail::IEEEFloat::isSignificandAllOnes(v14))
      {
        goto LABEL_74;
      }
    }
    sub_1C612A0E4((uint64_t)&v32, v16);
    if (!sub_1C4773C58((uint64_t)&v32))
    {
      if (*a1 == 3)
      {
        v20 = 2;
        goto LABEL_72;
      }
      if (*a1 == 5)
      {
        v20 = 4;
LABEL_72:
        *a1 = v20;
        *a2 = (llvm::ConstantInt ***)llvm::ConstantFP::get(***a2, (llvm::LLVMContext *)&v32, v19);
        a3 = 1;
LABEL_75:
        if ((_UNKNOWN *)v33 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v34);
          goto LABEL_77;
        }
        if ((*(_DWORD *)(v33 + 8) - 64) > 0xFFFFFF7F)
          goto LABEL_77;
        v30 = (uint64_t)v34;
        if (!v34)
          goto LABEL_77;
        goto LABEL_69;
      }
    }
LABEL_74:
    a3 = 0;
    goto LABEL_75;
  }
  v10 = 0;
  return a3 & v10;
}

uint64_t sub_1C47B66E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = a2;
  if (a2)
  {
    if (*(_BYTE *)(a2 + 16) == 74)
    {
      if (*(_BYTE *)(a1 + 280))
      {
        v5 = *(_QWORD *)(a2 - 32);
        if (v5)
        {
          if (*(_BYTE *)(v5 + 16) == 73
            && *(_QWORD *)(v5 + 40) == a3
            && (!sub_1C47AD4FC(a1, *(_QWORD *)(a2 - 32)) || sub_1C4786018(a1, v5)))
          {
            return *(_QWORD *)(v5 - 32);
          }
        }
      }
    }
  }
  return v3;
}

uint64_t sub_1C47B6764(uint64_t a1, int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, int a8)
{
  uint64_t result;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  llvm::detail::DoubleAPFloat *v26;
  void *v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  llvm::detail::DoubleAPFloat *v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  _BOOL4 v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t *v46;
  unsigned int v47;

  *a3 = sub_1C47B66E0(a1, *a3, a7);
  *a4 = sub_1C47B66E0(a1, *a4, a7);
  *a5 = sub_1C47B66E0(a1, *a5, a7);
  result = sub_1C47B66E0(a1, *a6, a7);
  *a6 = result;
  v17 = *(unsigned __int8 *)(result + 16);
  if (*a4 == result && v17 > 0x14)
    return result;
  v19 = result;
  v20 = *a5;
  v21 = *(unsigned __int8 *)(*a5 + 16);
  if (v21 == 17)
    result = *a5;
  else
    result = 0;
  if (v17 == 16)
    v22 = v19;
  else
    v22 = 0;
  if (v17 == 17)
    v23 = v19;
  else
    v23 = 0;
  if (v20 && v21 == 16)
  {
    v24 = (unint64_t *)(v20 + 24);
    if (*(_DWORD *)(v20 + 32) >= 0x41u)
      v24 = (unint64_t *)*v24;
    v25 = *v24;
    if (!v22)
      goto LABEL_39;
LABEL_30:
    v29 = (uint64_t *)(v22 + 24);
    if (*(_DWORD *)(v22 + 32) >= 0x41u)
      v29 = (uint64_t *)*v29;
    v30 = *v29;
    goto LABEL_33;
  }
  if (result)
  {
    v27 = *(void **)(result + 32);
    v26 = (llvm::detail::DoubleAPFloat *)(result + 32);
    if (v27 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v26, (unsigned int *)&v46);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v26, (unsigned int *)&v46);
    result = (uint64_t)v46;
    if (v47 >= 0x41)
      v28 = v46;
    else
      v28 = (unint64_t *)&v46;
    v25 = *v28;
    if (v47 >= 0x41 && v46)
      result = MEMORY[0x1CAA32F9C]();
    if (!v22)
      goto LABEL_39;
    goto LABEL_30;
  }
  v25 = -1;
  if (v22)
    goto LABEL_30;
LABEL_39:
  if (!v23)
  {
    v30 = -1;
    if (!a8)
      goto LABEL_51;
    goto LABEL_49;
  }
  v32 = *(void **)(v23 + 32);
  v31 = (llvm::detail::DoubleAPFloat *)(v23 + 32);
  if (v32 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v31, (unsigned int *)&v46);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v31, (unsigned int *)&v46);
  result = (uint64_t)v46;
  if (v47 >= 0x41)
    v33 = (uint64_t *)v46;
  else
    v33 = (uint64_t *)&v46;
  v30 = *v33;
  if (v47 >= 0x41 && v46)
    result = MEMORY[0x1CAA32F9C]();
LABEL_33:
  if (!v30 || !v25 && v30 == 1)
    return result;
  if (a8)
  {
LABEL_49:
    if (v25 <= 1 && v30 != 1)
    {
      result = sub_1C6129EBC(*(_BYTE *)(*(_QWORD *)(a1 + 256) + 281), a2, (llvm::ConstantInt ****)a3, (llvm::ConstantInt ****)a4, (llvm::ConstantInt ****)a5, (llvm::ConstantInt ****)a6, 0);
      if ((_DWORD)result)
        goto LABEL_74;
    }
  }
LABEL_51:
  v34 = *a3;
  if (*a3 == *a6 && *(_BYTE *)(v34 + 16) != 17)
  {
    *a3 = *a4;
    *a4 = v34;
    *a2 = dword_1C640FEC0[*a2];
    return result;
  }
  if (a8)
  {
    v35 = *a5;
    if (*a4 == *a5)
    {
      v35 = *a4;
      if (*(_BYTE *)(*a4 + 16) != 17)
      {
        result = sub_1C6129EBC(*(_BYTE *)(*(_QWORD *)(a1 + 256) + 281), a2, (llvm::ConstantInt ****)a3, (llvm::ConstantInt ****)a4, (llvm::ConstantInt ****)a5, (llvm::ConstantInt ****)a6, 0);
        if ((result & 1) != 0)
          goto LABEL_74;
        v34 = *a3;
        v35 = *a5;
      }
    }
    if (v34 == v35 && *(_BYTE *)(v35 + 16) != 17)
    {
      result = sub_1C6129EBC(*(_BYTE *)(*(_QWORD *)(a1 + 256) + 281), a2, (llvm::ConstantInt ****)a3, (llvm::ConstantInt ****)a4, (llvm::ConstantInt ****)a5, (llvm::ConstantInt ****)a6, 1);
      if ((_DWORD)result)
      {
        v45 = *a3;
        *a3 = *a4;
        *a4 = v45;
        goto LABEL_74;
      }
    }
  }
  v36 = *a4;
  if (!*a4 || *(_BYTE *)(v36 + 16) != 16)
    goto LABEL_75;
  result = v36 + 24;
  v37 = *(_DWORD *)(v36 + 32);
  if (v37 > 0x40)
  {
    result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
    v38 = (_DWORD)result == v37;
  }
  else
  {
    v38 = *(_QWORD *)result == 0;
  }
  v39 = v38;
  if (*a2 != 32 || !v39)
    goto LABEL_75;
  v40 = *a5;
  if (*a5 && *(_BYTE *)(v40 + 16) == 16)
  {
    result = v40 + 24;
    v41 = *(_DWORD *)(v40 + 32);
    if (v41 <= 0x40)
    {
      if (*(_QWORD *)result)
        goto LABEL_72;
LABEL_82:
      *a2 = 34;
      *a5 = *a6;
      *a6 = v40;
      return result;
    }
    result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
    if ((_DWORD)result == v41)
      goto LABEL_82;
  }
LABEL_72:
  v42 = sub_1C47B6194(a1, v40);
  result = sub_1C47B6194(a1, *a6);
  if (v42 > result)
  {
    *a2 = 34;
LABEL_74:
    v43 = *a5;
    *a5 = *a6;
    *a6 = v43;
    return result;
  }
LABEL_75:
  if (a8)
  {
    v44 = sub_1C47B6194(a1, *a5);
    result = sub_1C47B6194(a1, *a6);
    if (v44 > result)
    {
      result = sub_1C6129EBC(*(_BYTE *)(*(_QWORD *)(a1 + 256) + 281), a2, (llvm::ConstantInt ****)a3, (llvm::ConstantInt ****)a4, (llvm::ConstantInt ****)a5, (llvm::ConstantInt ****)a6, 0);
      if ((_DWORD)result)
        goto LABEL_74;
    }
  }
  return result;
}

uint64_t sub_1C47B6BD4(uint64_t a1, llvm::Type **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v14;
  llvm::Type *v15;
  unsigned int v16;
  _BOOL4 v17;
  llvm::ConstantInt **v18;
  uint64_t v19;
  uint64_t result;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::MachineFunction *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  llvm::ConstantInt ***v38;
  llvm::ConstantInt ***v39;
  int *v40;
  uint64_t *v41;
  unsigned __int8 *v42;
  BOOL v43;
  const llvm::APFloat *v44;
  unsigned int v45;
  BOOL v46;
  int v48;
  char v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int IncompleteVirtualRegister;
  _UNKNOWN ***v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  llvm::MachineFunction *v69;
  unsigned __int8 *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  _UNKNOWN ***v96;
  uint64_t v97;
  unsigned int v98;
  const llvm::APFloat *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  llvm::MachineFunction *v110;
  unsigned __int8 *v111;
  uint64_t v112;
  unint64_t v113;
  int v114;
  llvm::Constant *v115;
  int v116;
  llvm::detail::DoubleAPFloat *v117;
  int v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  const llvm::APFloat *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  uint64_t v135;
  unsigned __int8 *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  llvm::Constant *v150;
  uint64_t *v151;
  int v152;
  llvm::detail::DoubleAPFloat *v153;
  int v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  unsigned int v158;
  _BOOL4 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  BOOL v168;
  BOOL v169;
  int isZeroValue;
  llvm::Type *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  int v187;
  llvm::ConstantInt ***v188;
  int v189;
  unsigned int v190;
  int v191;
  int v192;
  int v194;
  int v195;
  int v196;
  int v198;
  uint64_t v199;
  int v200;
  unsigned int v201;
  unsigned __int8 v202;
  __int16 v203;
  int v204;
  llvm::ConstantInt ***v205;
  llvm::ConstantInt ***v206;
  llvm::ConstantInt ***v207;
  llvm::ConstantInt ***v208;
  int v209;
  int v210;
  int v211;
  int v212;
  unsigned __int8 *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  int v218;
  int v219;
  int v220;
  __int128 v221;
  _QWORD v222[4];
  _QWORD v223[5];
  unsigned __int8 *v224;
  llvm::ConstantInt ***v225;
  llvm::ConstantInt ***v226;
  llvm::ConstantInt ***v227;
  _QWORD v228[2];
  unsigned __int8 *v229;
  uint64_t v230;
  llvm::Type **v231;
  uint64_t v232;
  uint64_t v233;

  v233 = *MEMORY[0x1E0C80C00];
  v207 = (llvm::ConstantInt ***)a5;
  v208 = (llvm::ConstantInt ***)a4;
  v205 = (llvm::ConstantInt ***)a7;
  v206 = (llvm::ConstantInt ***)a6;
  v14 = *(_WORD *)(a3 + 18) & 0x3F;
  v204 = v14;
  v15 = *a2;
  v16 = *((_DWORD *)*a2 + 2);
  if ((_BYTE)v16)
    v17 = *((_DWORD *)*a2 + 2) == 13 && v16 >> 8 < 0x11;
  else
    v17 = 1;
  v194 = v17;
  v18 = *(llvm::ConstantInt ***)a4;
  if ((*(_DWORD *)(*(_QWORD *)a4 + 8) & 0xFE) == 0x12)
    v18 = *(llvm::ConstantInt ***)v18[2];
  v200 = *(unsigned __int8 *)(**(_QWORD **)(a3 - 64) + 8);
  if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v18) > 0x20)
    return 0;
  if ((v16 & 0xFE) == 0x12)
    v15 = (llvm::Type *)**((_QWORD **)v15 + 2);
  if (llvm::Type::getPrimitiveSizeInBits(v15) > 0x20)
    return 0;
  v21 = v14 - 9;
  if (*(_BYTE *)(a1 + 280) && v21 >= 0xFFFFFFFE)
  {
    if (v14 == 7)
    {
      result = sub_1C5CC1648((uint64_t *)a1, a6);
      if ((_DWORD)result)
      {
        v22 = result;
        v23 = a8;
        v24 = *(_QWORD *)(a1 + 32);
        v25 = *(_QWORD *)(v24 + 640);
        v26 = *(unint64_t **)(v24 + 648);
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
        v28 = a1;
        v29 = *(llvm::MachineFunction **)(v25 + 32);
        v30 = *(unsigned __int8 **)(v28 + 72);
        v224 = v30;
        if (v30)
          llvm::MetadataTracking::track((uint64_t)&v224, v30, 2);
        v31 = v27 + 912;
        v32 = *((_QWORD *)v29 + 28);
        if (v32)
          *((_QWORD *)v29 + 28) = *(_QWORD *)v32;
        else
          v32 = sub_1C484358C((uint64_t)v29 + 128, 72, 3);
        v229 = v224;
        if (v224)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v224, v224, (uint64_t)&v229);
          v224 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v32, v29, v31, &v229, 0);
        if (v229)
          llvm::MetadataTracking::untrack((uint64_t)&v229, v229);
        if (v224)
          llvm::MetadataTracking::untrack((uint64_t)&v224, v224);
        v72 = *(_QWORD *)(v25 + 40);
        *(_QWORD *)(v32 + 24) = v72;
        v73 = *(_QWORD *)(v72 + 32);
        v74 = *(unsigned int *)(v32 + 40);
        if ((_DWORD)v74)
        {
          v75 = *(_QWORD *)(v32 + 32);
          v76 = *(_QWORD *)(v73 + 40);
          v77 = 32 * v74;
          do
          {
            if (!*(_BYTE *)v75)
            {
              v78 = *(unsigned int *)(v75 + 4);
              if ((int)v78 >= 0)
                v79 = (uint64_t *)(*(_QWORD *)(v76 + 272) + 8 * v78);
              else
                v79 = (uint64_t *)(*(_QWORD *)(v76 + 24) + 16 * (v78 & 0x7FFFFFFF) + 8);
              v80 = *v79;
              if (*v79)
              {
                v81 = *(_QWORD *)(v80 + 16);
                *(_QWORD *)(v80 + 16) = v75;
                *(_QWORD *)(v75 + 16) = v81;
                if ((*(_BYTE *)(v75 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v75 + 24) = v80;
                }
                else
                {
                  *(_QWORD *)(v75 + 24) = 0;
                  v79 = (uint64_t *)(v81 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v75 + 16) = v75;
                *(_QWORD *)(v75 + 24) = 0;
              }
              *v79 = v75;
            }
            v75 += 32;
            v77 -= 32;
          }
          while (v77);
        }
LABEL_111:
        v84 = *(_QWORD *)(v73 + 728);
        if (v84)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v84 + 24))(v84, v32);
        v85 = *v26 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v32 = v85 | *(_QWORD *)v32 & 7;
        *(_QWORD *)(v32 + 8) = v26;
        *(_QWORD *)(v85 + 8) = v32;
        *v26 = *v26 & 7 | v32;
        v230 = 0;
        v231 = 0;
        v232 = 0;
        LODWORD(v229) = 0x1000000;
        HIDWORD(v229) = v23;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v229);
        v230 = 0;
        v231 = 0;
        LODWORD(v229) = 0;
        HIDWORD(v229) = v22;
        v232 = 0;
LABEL_114:
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v229);
        return 1;
      }
    }
    else
    {
      result = sub_1C5CC1648((uint64_t *)a1, a7);
      if ((_DWORD)result)
      {
        v22 = result;
        v23 = a8;
        v58 = *(_QWORD *)(a1 + 32);
        v59 = *(_QWORD *)(v58 + 640);
        v26 = *(unint64_t **)(v58 + 648);
        v60 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
        v61 = a1;
        v29 = *(llvm::MachineFunction **)(v59 + 32);
        v62 = *(unsigned __int8 **)(v61 + 72);
        v224 = v62;
        if (v62)
          llvm::MetadataTracking::track((uint64_t)&v224, v62, 2);
        v63 = v60 + 912;
        v32 = *((_QWORD *)v29 + 28);
        if (v32)
          *((_QWORD *)v29 + 28) = *(_QWORD *)v32;
        else
          v32 = sub_1C484358C((uint64_t)v29 + 128, 72, 3);
        v229 = v224;
        if (v224)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v224, v224, (uint64_t)&v229);
          v224 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v32, v29, v63, &v229, 0);
        if (v229)
          llvm::MetadataTracking::untrack((uint64_t)&v229, v229);
        if (v224)
          llvm::MetadataTracking::untrack((uint64_t)&v224, v224);
        v82 = *(_QWORD *)(v59 + 40);
        *(_QWORD *)(v32 + 24) = v82;
        v73 = *(_QWORD *)(v82 + 32);
        v83 = *(unsigned int *)(v32 + 40);
        if ((_DWORD)v83)
        {
          v143 = *(_QWORD *)(v32 + 32);
          v144 = *(_QWORD *)(v73 + 40);
          v145 = 32 * v83;
          do
          {
            if (!*(_BYTE *)v143)
            {
              v146 = *(unsigned int *)(v143 + 4);
              if ((int)v146 >= 0)
                v147 = (uint64_t *)(*(_QWORD *)(v144 + 272) + 8 * v146);
              else
                v147 = (uint64_t *)(*(_QWORD *)(v144 + 24) + 16 * (v146 & 0x7FFFFFFF) + 8);
              v148 = *v147;
              if (*v147)
              {
                v149 = *(_QWORD *)(v148 + 16);
                *(_QWORD *)(v148 + 16) = v143;
                *(_QWORD *)(v143 + 16) = v149;
                if ((*(_BYTE *)(v143 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v143 + 24) = v148;
                }
                else
                {
                  *(_QWORD *)(v143 + 24) = 0;
                  v147 = (uint64_t *)(v149 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v143 + 16) = v143;
                *(_QWORD *)(v143 + 24) = 0;
              }
              *v147 = v143;
            }
            v143 += 32;
            v145 -= 32;
          }
          while (v145);
        }
        goto LABEL_111;
      }
    }
    return result;
  }
  v203 = 0;
  v33 = v194;
  if (v200)
    v33 = 0;
  v202 = v33;
  v199 = a1;
  v190 = v14 - 9;
  if (!v33)
  {
    v34 = 0;
    v189 = 0;
    goto LABEL_26;
  }
  v114 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 256) + 281);
  v196 = *(unsigned __int8 *)(a4 + 16);
  if (*(_BYTE *)(a5 + 16) == 17)
    v115 = (llvm::Constant *)a5;
  else
    v115 = 0;
  if (sub_1C6129FC8(a1, (_BYTE *)a4, (_BYTE *)a5, (_BYTE *)a6, (_BYTE *)a7, 1) < 3)
  {
    v189 = 0;
LABEL_204:
    v34 = 1;
LABEL_278:
    v21 = v14 - 9;
    goto LABEL_26;
  }
  v116 = *(unsigned __int8 *)(a6 + 16);
  if (a6 && v116 == 17)
  {
    v117 = (llvm::detail::DoubleAPFloat *)(a6 + 32);
    v118 = a8;
    if (*(_UNKNOWN **)(a6 + 32) == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v117, (unsigned int *)&v229);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v117, (unsigned int *)&v229);
    if (v230 >= 0x41)
      v119 = (uint64_t *)v229;
    else
      v119 = (uint64_t *)&v229;
    v120 = *v119;
    if (v230 >= 0x41 && v229)
      MEMORY[0x1CAA32F9C]();
    goto LABEL_223;
  }
  v118 = a8;
  v120 = 2;
  if (!a6)
  {
LABEL_223:
    v150 = v115;
    goto LABEL_224;
  }
  v150 = v115;
  if (v116 == 16)
  {
    v151 = (uint64_t *)(a6 + 24);
    if (*(_DWORD *)(a6 + 32) >= 0x41u)
      v151 = (uint64_t *)*v151;
    v120 = *v151;
  }
LABEL_224:
  v152 = *(unsigned __int8 *)(a7 + 16);
  if (a7 && v152 == 17)
  {
    v153 = (llvm::detail::DoubleAPFloat *)(a7 + 32);
    v154 = v114;
    if (*(_UNKNOWN **)(a7 + 32) == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v153, (unsigned int *)&v229);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v153, (unsigned int *)&v229);
    if (v230 >= 0x41)
      v155 = (unint64_t *)v229;
    else
      v155 = (unint64_t *)&v229;
    v156 = *v155;
    if (v230 >= 0x41 && v229)
      MEMORY[0x1CAA32F9C]();
    v150 = v115;
  }
  else
  {
    v154 = v114;
    v156 = 2;
    if (a7 && v152 == 16)
    {
      v157 = (unint64_t *)(a7 + 24);
      if (*(_DWORD *)(a7 + 32) >= 0x41u)
        v157 = (unint64_t *)*v157;
      v156 = *v157;
    }
  }
  v158 = (*(_WORD *)(a3 + 18) & 0x3F) - 1;
  v160 = (v158 >= 0xE || ((0x2121u >> v158) & 1) == 0) && (v196 == 17 || v150 != 0);
  v168 = (v154 || v160) && *(_BYTE *)(v199 + 280) != 0;
  if (v156)
    v169 = v120 == 0;
  else
    v169 = 1;
  if (v169 && v150)
  {
    isZeroValue = llvm::Constant::isZeroValue(v150);
    v150 = v115;
    if (isZeroValue)
    {
      v189 = 0;
      v207 = (llvm::ConstantInt ***)llvm::ConstantFP::get(*(llvm::ConstantFP ***)a5, v171, -0.0);
      v34 = 1;
LABEL_277:
      a8 = v118;
      a1 = v199;
      goto LABEL_278;
    }
  }
  else if (!v150)
  {
    goto LABEL_279;
  }
  if ((llvm::Constant::isZeroValue(v150) & 1) != 0)
  {
    v34 = 1;
    v189 = 1;
    goto LABEL_277;
  }
LABEL_279:
  if (!v120)
  {
    v186 = v156 < 2 || v168;
    a8 = v118;
    a1 = v199;
    v21 = v14 - 9;
    if ((v186 & 1) == 0)
      goto LABEL_281;
    goto LABEL_312;
  }
  a8 = v118;
  a1 = v199;
  v21 = v14 - 9;
  if (!v156)
  {
LABEL_312:
    v187 = sub_1C6129FC8(a1, (_BYTE *)a4, (_BYTE *)a5, (_BYTE *)a6, (_BYTE *)a7, 1);
    if (v187 == sub_1C6129FC8(a1, (_BYTE *)a4, (_BYTE *)a5, (_BYTE *)a6, (_BYTE *)a7, 0))
    {
      v34 = 0;
      v189 = 0;
      v202 = 0;
      goto LABEL_278;
    }
    v189 = 0;
    goto LABEL_204;
  }
LABEL_281:
  v189 = 0;
  v34 = 1;
LABEL_26:
  if (v21 < 0xFFFFFFFE)
  {
    sub_1C6129D28(a1, &v204, &v208, &v207, &v206, &v205, (_BYTE *)&v203 + 1, &v203, &v202, 0);
    v34 = v202;
  }
  else
  {
    HIBYTE(v203) = 1;
    LOBYTE(v203) = v14 == 8;
  }
  v192 = a8;
  v195 = v34;
  if (!v34)
  {
    sub_1C47B6764(a1, &v204, (uint64_t *)&v208, (uint64_t *)&v207, (uint64_t *)&v206, (uint64_t *)&v205, *(_QWORD *)(a3 + 40), *(unsigned __int8 *)(a1 + 280));
    v34 = 0;
  }
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v228[0] = 0;
  v228[1] = 0;
  v188 = v208;
  v224 = (unsigned __int8 *)v208;
  v225 = v207;
  v38 = v205;
  v39 = v206;
  v226 = v206;
  v227 = v205;
  memset(v223, 0, 32);
  v40 = (int *)&v221;
  v41 = v223;
  v221 = xmmword_1C640F840;
  memset(v222, 0, sizeof(v222));
  do
  {
    v42 = (&v224)[v35];
    if (v42)
      v43 = v42[16] - 18 > 0xFFFFFFFD;
    else
      v43 = 0;
    if (v43)
    {
      v37 = (1 << v35) | v37;
      v222[v35] = v42;
    }
    else
    {
      v44 = (const llvm::APFloat *)v37;
      v45 = v36;
      if (v34)
        v46 = 1;
      else
        v46 = v35 >= 2;
      v48 = !v46 && v200 == 0;
      LOBYTE(v229) = v48;
      v223[v35] = v42;
      if (v35 > 1)
      {
        result = sub_1C5CC1648((uint64_t *)v199, (uint64_t)v42);
      }
      else
      {
        if (v42 == (unsigned __int8 *)v38 || v42 == (unsigned __int8 *)v39)
          v50 = 0;
        else
          v50 = 7;
        result = sub_1C47AE068(v199, v41, v40, &v229, v34 != 0, *(_QWORD *)(a3 + 40), v50, 1);
        v48 = v229;
      }
      *((_DWORD *)v228 + v35) = result;
      if (!(_DWORD)result)
        return result;
      v36 = (v48 << v35) | v45;
      v34 = v195;
      v37 = (unint64_t)v44;
    }
    ++v35;
    ++v40;
    ++v41;
  }
  while (v35 != 4);
  if (v189)
  {
    v225 = v188;
    HIDWORD(v228[0]) = v228[0];
    v222[1] = 0;
    v37 = v37 & 0xFFFFFFFD;
    v36 = v36 & 0xFFFFFFFD | (2 * (v36 & 1));
    DWORD1(v221) = 7;
  }
  v51 = a8;
  v52 = HIBYTE(v203);
  v53 = a8;
  v201 = v37;
  if (HIBYTE(v203))
  {
    v54 = *(_QWORD *)(v199 + 48);
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v54, "", 0);
    v53 = IncompleteVirtualRegister;
    if (v194)
      v56 = &off_1E7F982A8;
    else
      v56 = &off_1E7F98468;
    *(_QWORD *)(*(_QWORD *)(v54 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v56;
    v57 = *(_QWORD *)(v54 + 8);
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57);
    v34 = v195;
    v37 = v201;
  }
  if (v190 >= 0xFFFFFFFE)
  {
    v64 = 3;
    if (v204 == 7)
      v64 = 2;
    result = sub_1C5CC1648((uint64_t *)v199, (uint64_t)(&v224)[v64]);
    if (!(_DWORD)result)
      return result;
    v191 = result;
    v65 = *(_QWORD *)(v199 + 32);
    v66 = *(_QWORD *)(v65 + 640);
    v67 = *(unint64_t **)(v65 + 648);
    v68 = *(_QWORD *)(*(_QWORD *)(v199 + 96) + 8);
    v69 = *(llvm::MachineFunction **)(v66 + 32);
    v70 = *(unsigned __int8 **)(v199 + 72);
    v213 = v70;
    if (v70)
      llvm::MetadataTracking::track((uint64_t)&v213, v70, 2);
    v71 = *((_QWORD *)v69 + 28);
    if (v71)
      *((_QWORD *)v69 + 28) = *(_QWORD *)v71;
    else
      v71 = sub_1C484358C((uint64_t)v69 + 128, 72, 3);
    v229 = v213;
    if (v213)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v213, v213, (uint64_t)&v229);
      v213 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v71, v69, v68 + 912, &v229, 0);
    if (v229)
      llvm::MetadataTracking::untrack((uint64_t)&v229, v229);
    if (v213)
      llvm::MetadataTracking::untrack((uint64_t)&v213, v213);
    v86 = *(_QWORD *)(v66 + 40);
    *(_QWORD *)(v71 + 24) = v86;
    v87 = *(_QWORD *)(v86 + 32);
    v88 = *(unsigned int *)(v71 + 40);
    v51 = v192;
    if ((_DWORD)v88)
    {
      v161 = *(_QWORD *)(v71 + 32);
      v162 = *(_QWORD *)(v87 + 40);
      v163 = 32 * v88;
      do
      {
        if (!*(_BYTE *)v161)
        {
          v164 = *(unsigned int *)(v161 + 4);
          if ((int)v164 >= 0)
            v165 = (uint64_t *)(*(_QWORD *)(v162 + 272) + 8 * v164);
          else
            v165 = (uint64_t *)(*(_QWORD *)(v162 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8);
          v166 = *v165;
          if (*v165)
          {
            v167 = *(_QWORD *)(v166 + 16);
            *(_QWORD *)(v166 + 16) = v161;
            *(_QWORD *)(v161 + 16) = v167;
            if ((*(_BYTE *)(v161 + 3) & 1) != 0)
            {
              *(_QWORD *)(v161 + 24) = v166;
            }
            else
            {
              *(_QWORD *)(v161 + 24) = 0;
              v165 = (uint64_t *)(v167 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v161 + 16) = v161;
            *(_QWORD *)(v161 + 24) = 0;
          }
          *v165 = v161;
        }
        v161 += 32;
        v163 -= 32;
      }
      while (v163);
    }
    v89 = *(_QWORD *)(v87 + 728);
    if (v89)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v89 + 24))(v89, v71);
    v90 = *v67 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v71 = v90 | *(_QWORD *)v71 & 7;
    *(_QWORD *)(v71 + 8) = v67;
    *(_QWORD *)(v90 + 8) = v71;
    *v67 = *v67 & 7 | v71;
    v230 = 0;
    v231 = 0;
    v232 = 0;
    LODWORD(v229) = 0x1000000;
    HIDWORD(v229) = v53;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v69, (const llvm::MachineOperand *)&v229);
    v230 = 0;
    v231 = 0;
    LODWORD(v229) = 0;
    HIDWORD(v229) = v191;
    v232 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v71, v69, (const llvm::MachineOperand *)&v229);
  }
  else if (v34)
  {
    sub_1C47B7F70(v199, v204, v37, v19, v53, (uint64_t)v223, (uint64_t)v228, (uint64_t)v222, (uint64_t)&v221);
  }
  else
  {
    sub_1C47B1500(v199, v204, (const llvm::APFloat *)v37, v36, v53, 0, v194, (uint64_t)v223, (int *)v228, v222, (unsigned int *)&v221);
  }
  if (!v52)
    return 1;
  v198 = v36;
  if ((_BYTE)v203)
    v91 = 2;
  else
    v91 = 3;
  v92 = *(_QWORD *)(v199 + 48);
  v93 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v92, "", 0);
  v95 = v93;
  if (v194)
    v96 = &off_1E7F982A8;
  else
    v96 = &off_1E7F98468;
  *(_QWORD *)(*(_QWORD *)(v92 + 24) + 16 * (v93 & 0x7FFFFFFF)) = v96;
  v97 = *(_QWORD *)(v92 + 8);
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 24))(v97);
  v98 = v201;
  if ((v201 & 1) != 0)
  {
    v103 = v222[0];
    if (*(_BYTE *)(v222[0] + 16) != 17)
      v103 = 0;
    if (*(_UNKNOWN **)(v103 + 32) == &unk_1C866F1C0)
      v104 = *(_QWORD *)(v103 + 40);
    else
      v104 = v103 + 24;
    if ((*(_BYTE *)(v104 + 28) & 7) == 1)
    {
      result = sub_1C5CC1648((uint64_t *)v199, v223[v91]);
      v53 = result;
      if (!(_DWORD)result)
        return result;
    }
    v105 = v95;
    v106 = *(_QWORD *)(v199 + 32);
    v107 = *(_QWORD *)(v106 + 640);
    v108 = *(unint64_t **)(v106 + 648);
    v109 = *(_QWORD *)(*(_QWORD *)(v199 + 96) + 8);
    v110 = *(llvm::MachineFunction **)(v107 + 32);
    v111 = *(unsigned __int8 **)(v199 + 72);
    v213 = v111;
    if (v111)
      llvm::MetadataTracking::track((uint64_t)&v213, v111, 2);
    v112 = v109 + 912;
    v113 = *((_QWORD *)v110 + 28);
    if (v113)
      *((_QWORD *)v110 + 28) = *(_QWORD *)v113;
    else
      v113 = sub_1C484358C((uint64_t)v110 + 128, 72, 3);
    v51 = v192;
    v229 = v213;
    if (v213)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v213, v213, (uint64_t)&v229);
      v213 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v113, v110, v112, &v229, 0);
    if (v229)
      llvm::MetadataTracking::untrack((uint64_t)&v229, v229);
    v98 = v201;
    if (v213)
      llvm::MetadataTracking::untrack((uint64_t)&v213, v213);
    v121 = *(_QWORD *)(v107 + 40);
    *(_QWORD *)(v113 + 24) = v121;
    v122 = *(_QWORD *)(v121 + 32);
    v123 = *(unsigned int *)(v113 + 40);
    if ((_DWORD)v123)
    {
      v172 = *(_QWORD *)(v113 + 32);
      v173 = *(_QWORD *)(v122 + 40);
      v174 = 32 * v123;
      do
      {
        if (!*(_BYTE *)v172)
        {
          v175 = *(unsigned int *)(v172 + 4);
          if ((int)v175 >= 0)
            v176 = (uint64_t *)(*(_QWORD *)(v173 + 272) + 8 * v175);
          else
            v176 = (uint64_t *)(*(_QWORD *)(v173 + 24) + 16 * (v175 & 0x7FFFFFFF) + 8);
          v177 = *v176;
          if (*v176)
          {
            v178 = *(_QWORD *)(v177 + 16);
            *(_QWORD *)(v177 + 16) = v172;
            *(_QWORD *)(v172 + 16) = v178;
            if ((*(_BYTE *)(v172 + 3) & 1) != 0)
            {
              *(_QWORD *)(v172 + 24) = v177;
            }
            else
            {
              *(_QWORD *)(v172 + 24) = 0;
              v176 = (uint64_t *)(v178 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v172 + 16) = v172;
            *(_QWORD *)(v172 + 24) = 0;
          }
          *v176 = v172;
        }
        v172 += 32;
        v174 -= 32;
      }
      while (v174);
    }
    v124 = *(_QWORD *)(v122 + 728);
    if (v124)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v124 + 24))(v124, v113);
    v125 = *v108 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v113 = v125 | *(_QWORD *)v113 & 7;
    *(_QWORD *)(v113 + 8) = v108;
    *(_QWORD *)(v125 + 8) = v113;
    *v108 = *v108 & 7 | v113;
    v230 = 0;
    v231 = 0;
    v232 = 0;
    v95 = v105;
    LODWORD(v229) = 0x1000000;
    HIDWORD(v229) = v105;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v113, v110, (const llvm::MachineOperand *)&v229);
    v230 = 0;
    v231 = 0;
    LODWORD(v229) = 0;
    HIDWORD(v229) = v53;
    v232 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v113, v110, (const llvm::MachineOperand *)&v229);
  }
  else
  {
    v99 = (const llvm::APFloat *)(8 * ((v201 >> v91) & 1));
    v229 = (unsigned __int8 *)v223[0];
    v230 = v223[0];
    v100 = v223[v91];
    v231 = a2;
    v232 = v100;
    v217 = v228[0];
    v218 = v228[0];
    LODWORD(v100) = *((_DWORD *)v228 + v91);
    v219 = v53;
    v220 = v100;
    v101 = v222[v91];
    v213 = (unsigned __int8 *)v222[0];
    v214 = v222[0];
    v215 = 0;
    v216 = v101;
    v209 = v221;
    v210 = v221 ^ 2;
    LODWORD(v100) = *((_DWORD *)&v222[-2] + v91);
    v211 = 0;
    v212 = v100;
    if (v195)
      sub_1C47B7F70(v199, 1, v99, v94, v95, (uint64_t)&v229, (uint64_t)&v217, (uint64_t)&v213, (uint64_t)&v209);
    else
      sub_1C47B1500(v199, 1, v99, ((int)((_DWORD)v36 << 31) >> 31) & 3, v95, 0, v194, (uint64_t)&v229, &v217, &v213, (unsigned int *)&v209);
  }
  if ((v98 & 2) == 0)
  {
    v126 = (const llvm::APFloat *)(8 * ((v98 >> v91) & 1));
    v229 = (unsigned __int8 *)v223[1];
    v230 = v223[1];
    v127 = v223[v91];
    v231 = a2;
    v232 = v127;
    v217 = HIDWORD(v228[0]);
    v218 = HIDWORD(v228[0]);
    LODWORD(v127) = *((_DWORD *)v228 + v91);
    v219 = v95;
    v220 = v127;
    v128 = v222[v91];
    v213 = (unsigned __int8 *)v222[1];
    v214 = v222[1];
    v215 = 0;
    v216 = v128;
    v209 = DWORD1(v221) ^ 2;
    v210 = DWORD1(v221);
    LODWORD(v127) = *((_DWORD *)&v222[-2] + v91);
    v211 = 0;
    v212 = v127;
    if (v195)
      sub_1C47B7F70(v199, 1, v126, v102, v51, (uint64_t)&v229, (uint64_t)&v217, (uint64_t)&v213, (uint64_t)&v209);
    else
      sub_1C47B1500(v199, 1, v126, (v198 << 30 >> 31) & 3, v51, 0, v194, (uint64_t)&v229, &v217, &v213, (unsigned int *)&v209);
    return 1;
  }
  v129 = v222[1];
  if (*(_BYTE *)(v222[1] + 16) != 17)
    v129 = 0;
  if (*(_UNKNOWN **)(v129 + 32) == &unk_1C866F1C0)
    v130 = *(_QWORD *)(v129 + 40);
  else
    v130 = v129 + 24;
  if ((*(_BYTE *)(v130 + 28) & 7) != 1 || (result = sub_1C5CC1648((uint64_t *)v199, v223[v91]), (v95 = result) != 0))
  {
    v131 = v95;
    v132 = *(_QWORD *)(v199 + 32);
    v133 = *(_QWORD *)(v132 + 640);
    v134 = *(unint64_t **)(v132 + 648);
    v135 = *(_QWORD *)(*(_QWORD *)(v199 + 96) + 8);
    v29 = *(llvm::MachineFunction **)(v133 + 32);
    v136 = *(unsigned __int8 **)(v199 + 72);
    v213 = v136;
    if (v136)
      llvm::MetadataTracking::track((uint64_t)&v213, v136, 2);
    v137 = v135 + 912;
    v32 = *((_QWORD *)v29 + 28);
    if (v32)
      *((_QWORD *)v29 + 28) = *(_QWORD *)v32;
    else
      v32 = sub_1C484358C((uint64_t)v29 + 128, 72, 3);
    v229 = v213;
    if (v213)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v213, v213, (uint64_t)&v229);
      v213 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v32, v29, v137, &v229, 0);
    if (v229)
      llvm::MetadataTracking::untrack((uint64_t)&v229, v229);
    if (v213)
      llvm::MetadataTracking::untrack((uint64_t)&v213, v213);
    v138 = *(_QWORD *)(v133 + 40);
    *(_QWORD *)(v32 + 24) = v138;
    v139 = *(_QWORD *)(v138 + 32);
    v140 = *(unsigned int *)(v32 + 40);
    if ((_DWORD)v140)
    {
      v179 = *(_QWORD *)(v32 + 32);
      v180 = *(_QWORD *)(v139 + 40);
      v181 = 32 * v140;
      do
      {
        if (!*(_BYTE *)v179)
        {
          v182 = *(unsigned int *)(v179 + 4);
          if ((int)v182 >= 0)
            v183 = (uint64_t *)(*(_QWORD *)(v180 + 272) + 8 * v182);
          else
            v183 = (uint64_t *)(*(_QWORD *)(v180 + 24) + 16 * (v182 & 0x7FFFFFFF) + 8);
          v184 = *v183;
          if (*v183)
          {
            v185 = *(_QWORD *)(v184 + 16);
            *(_QWORD *)(v184 + 16) = v179;
            *(_QWORD *)(v179 + 16) = v185;
            if ((*(_BYTE *)(v179 + 3) & 1) != 0)
            {
              *(_QWORD *)(v179 + 24) = v184;
            }
            else
            {
              *(_QWORD *)(v179 + 24) = 0;
              v183 = (uint64_t *)(v185 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v179 + 16) = v179;
            *(_QWORD *)(v179 + 24) = 0;
          }
          *v183 = v179;
        }
        v179 += 32;
        v181 -= 32;
      }
      while (v181);
    }
    v141 = *(_QWORD *)(v139 + 728);
    if (v141)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v141 + 24))(v141, v32);
    v142 = *v134 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v32 = v142 | *(_QWORD *)v32 & 7;
    *(_QWORD *)(v32 + 8) = v134;
    *(_QWORD *)(v142 + 8) = v32;
    *v134 = *v134 & 7 | v32;
    v230 = 0;
    v231 = 0;
    v232 = 0;
    LODWORD(v229) = 0x1000000;
    HIDWORD(v229) = v192;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v29, (const llvm::MachineOperand *)&v229);
    v230 = 0;
    v231 = 0;
    LODWORD(v229) = 0;
    HIDWORD(v229) = v131;
    v232 = 0;
    goto LABEL_114;
  }
  return result;
}

void sub_1C47B7F70(uint64_t a1, int a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  const llvm::detail::DoubleAPFloat *v18;
  void *v19;
  void *v20;
  llvm::MachineFunction **v21;
  llvm::MachineFunction *v22;
  BOOL v23;
  llvm::MachineFunction **v24;
  llvm::MachineFunction **v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *i;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t v35;
  int IncompleteVirtualRegister;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  llvm::MachineFunction *v44;
  llvm::MachineFunction *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  llvm::MachineFunction *v71;
  llvm::MachineFunction *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v96;
  llvm::MachineFunction *v97;
  llvm::MachineInstr *v98;
  void *v99;
  uint64_t v100;
  _BYTE v101[32];
  _QWORD **v102;
  _QWORD *v103;
  unint64_t v104;
  _OWORD v105[2];
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v9 = a8;
  v11 = a6;
  v13 = (_QWORD *)a1;
  v108 = *MEMORY[0x1E0C80C00];
  if ((a2 - 1) > 3)
    v14 = 0xFFFFFFFFLL;
  else
    v14 = qword_1C640FF68[a2 - 1];
  v91 = v14;
  v15 = 0;
  memset(v105, 0, sizeof(v105));
  v99 = v101;
  v100 = 0x400000000;
  v16 = (uint64_t **)&v102;
  v103 = 0;
  v104 = 0;
  v102 = &v103;
  do
  {
    v17 = *(_QWORD *)(v9 + 8 * v15);
    if (!v17)
      goto LABEL_71;
    if (*(_BYTE *)(v17 + 16) == 17)
    {
      v19 = *(void **)(v17 + 32);
      v18 = (const llvm::detail::DoubleAPFloat *)(v17 + 32);
      if (v19 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v106 + 8), v18);
      else
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v106 + 8, (uint64_t **)v18);
      v20 = (void *)*((_QWORD *)&v106 + 1);
      if ((*(_DWORD *)(a9 + 4 * v15) & 2) != 0)
      {
        if (*((_UNKNOWN **)&v106 + 1) != &unk_1C866F1C0)
        {
          BYTE12(v107) ^= 8u;
          goto LABEL_16;
        }
        llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)((char *)&v106 + 8));
        v20 = (void *)*((_QWORD *)&v106 + 1);
      }
      if (v20 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)((char *)&v106 + 8), (unsigned int *)&v97);
LABEL_17:
        v22 = v97;
        v23 = v98 >= 0x41;
        v24 = &v97;
        if (v98 >= 0x41)
          v24 = (llvm::MachineFunction **)v97;
        v21 = (llvm::MachineFunction **)v105 + v15;
        *v21 = *v24;
        if (v23 && v22)
          MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
        if (*((_UNKNOWN **)&v106 + 1) == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v107);
        }
        else if ((*(_DWORD *)(*((_QWORD *)&v106 + 1) + 8) - 64) <= 0xFFFFFF7F && (_QWORD)v107)
        {
          MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
        }
        goto LABEL_25;
      }
LABEL_16:
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v106 + 8, (unsigned int *)&v97);
      goto LABEL_17;
    }
    v21 = (llvm::MachineFunction **)(v17 + 24);
    if (*(_DWORD *)(v17 + 32) >= 0x41u)
      v21 = (llvm::MachineFunction **)*v21;
LABEL_25:
    v25 = (llvm::MachineFunction **)*v21;
    v26 = (uint64_t *)v105 + v15;
    v27 = (unint64_t)v25 | 0x100000000;
    *v26 = (unint64_t)v25 | 0x100000000;
    v28 = v100;
    if (v104)
      v29 = v104;
    else
      v29 = v100;
    if (v29 >= 2)
    {
      if (v104)
      {
        for (i = v103; i; i = (_QWORD *)*i)
        {
          v31 = i[4];
          if (v27 >= v31)
          {
            if (v31 >= v27)
              goto LABEL_42;
            ++i;
          }
        }
LABEL_44:
        v96 = a3;
        v34 = v16;
        v35 = v13[6];
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v35, "", 0);
        *(_QWORD *)(*(_QWORD *)(v35 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F982A8;
        v37 = *(_QWORD *)(v35 + 8);
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
        v38 = a7;
        *(_DWORD *)(a7 + 4 * v15) = IncompleteVirtualRegister;
        *(_QWORD *)(v11 + 8 * v15) = 0;
        v39 = v13[4];
        v40 = *(_QWORD *)(v39 + 640);
        v41 = *(unint64_t **)(v39 + 648);
        v42 = *(_QWORD *)(v13[12] + 8);
        v43 = v13;
        v44 = *(llvm::MachineFunction **)(v40 + 32);
        v45 = (llvm::MachineFunction *)v43[9];
        v97 = v45;
        if (v45)
          llvm::MetadataTracking::track((uint64_t)&v97, (unsigned __int8 *)v45, 2);
        v46 = *((_QWORD *)v44 + 28);
        if (v46)
          *((_QWORD *)v44 + 28) = *(_QWORD *)v46;
        else
          v46 = sub_1C484358C((uint64_t)v44 + 128, 72, 3);
        *(_QWORD *)&v106 = v97;
        if (v97)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v97, (unsigned __int8 *)v97, (uint64_t)&v106);
          v97 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v46, v44, v42 + 48720, (unsigned __int8 **)&v106, 0);
        if ((_QWORD)v106)
          llvm::MetadataTracking::untrack((uint64_t)&v106, (unsigned __int8 *)v106);
        a7 = v38;
        if (v97)
          llvm::MetadataTracking::untrack((uint64_t)&v97, (unsigned __int8 *)v97);
        v50 = *(_QWORD *)(v40 + 40);
        *(_QWORD *)(v46 + 24) = v50;
        v51 = *(_QWORD *)(v50 + 32);
        v52 = *(unsigned int *)(v46 + 40);
        v16 = v34;
        if ((_DWORD)v52)
        {
          v59 = *(_QWORD *)(v46 + 32);
          v60 = *(_QWORD *)(v51 + 40);
          v61 = 32 * v52;
          do
          {
            if (!*(_BYTE *)v59)
            {
              v62 = *(unsigned int *)(v59 + 4);
              if ((int)v62 >= 0)
                v63 = (uint64_t *)(*(_QWORD *)(v60 + 272) + 8 * v62);
              else
                v63 = (uint64_t *)(*(_QWORD *)(v60 + 24) + 16 * (v62 & 0x7FFFFFFF) + 8);
              v64 = *v63;
              if (*v63)
              {
                v65 = *(_QWORD *)(v64 + 16);
                *(_QWORD *)(v64 + 16) = v59;
                *(_QWORD *)(v59 + 16) = v65;
                if ((*(_BYTE *)(v59 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v59 + 24) = v64;
                }
                else
                {
                  *(_QWORD *)(v59 + 24) = 0;
                  v63 = (uint64_t *)(v65 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v59 + 16) = v59;
                *(_QWORD *)(v59 + 24) = 0;
              }
              *v63 = v59;
            }
            v59 += 32;
            v61 -= 32;
          }
          while (v61);
        }
        v53 = *(_QWORD *)(v51 + 728);
        if (v53)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v53 + 24))(v53, v46);
        a3 = (1 << v15) ^ v96;
        v54 = *v41 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v46 = v54 | *(_QWORD *)v46 & 7;
        *(_QWORD *)(v46 + 8) = v41;
        *(_QWORD *)(v54 + 8) = v46;
        *v41 = *v41 & 7 | v46;
        *((_QWORD *)&v106 + 1) = 0;
        v107 = 0uLL;
        LODWORD(v106) = 0x1000000;
        DWORD1(v106) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v44, (const llvm::MachineOperand *)&v106);
        LODWORD(v106) = 1;
        *((_QWORD *)&v106 + 1) = 0;
        *(_QWORD *)&v107 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v44, (const llvm::MachineOperand *)&v106);
        v55 = *v26;
        LODWORD(v106) = 1;
        *((_QWORD *)&v106 + 1) = 0;
        *(_QWORD *)&v107 = v55;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v44, (const llvm::MachineOperand *)&v106);
        v56 = *v26;
        LODWORD(v106) = 1;
        *((_QWORD *)&v106 + 1) = 0;
        *(_QWORD *)&v107 = v56;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v44, (const llvm::MachineOperand *)&v106);
        v57 = *v26;
        LODWORD(v106) = 1;
        *((_QWORD *)&v106 + 1) = 0;
        *(_QWORD *)&v107 = v57;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v44, (const llvm::MachineOperand *)&v106);
        v58 = *v26;
        LODWORD(v106) = 1;
        *((_QWORD *)&v106 + 1) = 0;
        *(_QWORD *)&v107 = v58;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v44, (const llvm::MachineOperand *)&v106);
        v107 = 0u;
        v106 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v44, (const llvm::MachineOperand *)&v106);
        LODWORD(v106) = 1;
        *((_QWORD *)&v106 + 1) = 0;
        *(_QWORD *)&v107 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v44, (const llvm::MachineOperand *)&v106);
        v107 = 0u;
        v106 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v44, (const llvm::MachineOperand *)&v106);
        v13 = (_QWORD *)a1;
        v11 = a6;
        v9 = a8;
        goto LABEL_71;
      }
      if (!(_DWORD)v100)
        goto LABEL_44;
      v32 = v99;
      v33 = 8 * v100;
      while (*v32 != v27)
      {
        ++v32;
        v33 -= 8;
        if (!v33)
          goto LABEL_44;
      }
      if (!v33)
        goto LABEL_44;
    }
LABEL_42:
    if (v104)
      goto LABEL_43;
    v47 = v99;
    if ((_DWORD)v100)
    {
      v48 = 8 * v100;
      v49 = v99;
      while (*v49 != v27)
      {
        ++v49;
        v48 -= 8;
        if (!v48)
          goto LABEL_67;
      }
      if (v48)
        goto LABEL_71;
LABEL_67:
      if (v100 >= 4)
      {
        do
        {
          sub_1C47BC21C(v16, (unint64_t *)v99 + v28 - 1, (uint64_t **)v99 + v28 - 1);
          LODWORD(v28) = v100 - 1;
          LODWORD(v100) = v100 - 1;
        }
        while ((_DWORD)v100);
LABEL_43:
        sub_1C47BC21C(v16, (unint64_t *)v105 + v15, (uint64_t **)v105 + v15);
        goto LABEL_71;
      }
    }
    if (v100 >= HIDWORD(v100))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, (uint64_t)v101, v100 + 1, 8);
      v47 = v99;
      v28 = v100;
    }
    v47[v28] = v27;
    LODWORD(v100) = v100 + 1;
LABEL_71:
    ++v15;
  }
  while (v15 != 4);
  v66 = word_1C640FDB6[16 * v91 + a3];
  v67 = v13[4];
  v68 = *(_QWORD *)(v67 + 640);
  v69 = *(unint64_t **)(v67 + 648);
  v70 = *(_QWORD *)(v13[12] + 8);
  v71 = *(llvm::MachineFunction **)(v68 + 32);
  v72 = (llvm::MachineFunction *)v13[9];
  v97 = v72;
  if (v72)
    llvm::MetadataTracking::track((uint64_t)&v97, (unsigned __int8 *)v72, 2);
  v73 = v70 + 48 * v66;
  v74 = *((_QWORD *)v71 + 28);
  if (v74)
    *((_QWORD *)v71 + 28) = *(_QWORD *)v74;
  else
    v74 = sub_1C484358C((uint64_t)v71 + 128, 72, 3);
  *(_QWORD *)&v106 = v97;
  if (v97)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v97, (unsigned __int8 *)v97, (uint64_t)&v106);
    v97 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v74, v71, v73, (unsigned __int8 **)&v106, 0);
  if ((_QWORD)v106)
    llvm::MetadataTracking::untrack((uint64_t)&v106, (unsigned __int8 *)v106);
  if (v97)
    llvm::MetadataTracking::untrack((uint64_t)&v97, (unsigned __int8 *)v97);
  v75 = *(_QWORD *)(v68 + 40);
  *(_QWORD *)(v74 + 24) = v75;
  v76 = *(_QWORD *)(v75 + 32);
  v77 = *(unsigned int *)(v74 + 40);
  if ((_DWORD)v77)
  {
    v84 = *(_QWORD *)(v74 + 32);
    v85 = *(_QWORD *)(v76 + 40);
    v86 = 32 * v77;
    do
    {
      if (!*(_BYTE *)v84)
      {
        v87 = *(unsigned int *)(v84 + 4);
        if ((int)v87 >= 0)
          v88 = (uint64_t *)(*(_QWORD *)(v85 + 272) + 8 * v87);
        else
          v88 = (uint64_t *)(*(_QWORD *)(v85 + 24) + 16 * (v87 & 0x7FFFFFFF) + 8);
        v89 = *v88;
        if (*v88)
        {
          v90 = *(_QWORD *)(v89 + 16);
          *(_QWORD *)(v89 + 16) = v84;
          *(_QWORD *)(v84 + 16) = v90;
          if ((*(_BYTE *)(v84 + 3) & 1) != 0)
          {
            *(_QWORD *)(v84 + 24) = v89;
          }
          else
          {
            *(_QWORD *)(v84 + 24) = 0;
            v88 = (uint64_t *)(v90 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v84 + 16) = v84;
          *(_QWORD *)(v84 + 24) = 0;
        }
        *v88 = v84;
      }
      v84 += 32;
      v86 -= 32;
    }
    while (v86);
  }
  v78 = *(_QWORD *)(v76 + 728);
  if (v78)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v78 + 24))(v78, v74);
  v79 = *v69 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v74 = v79 | *(_QWORD *)v74 & 7;
  *(_QWORD *)(v74 + 8) = v69;
  *(_QWORD *)(v79 + 8) = v74;
  *v69 = *v69 & 7 | v74;
  *((_QWORD *)&v106 + 1) = 0;
  v107 = 0uLL;
  LODWORD(v106) = 0x1000000;
  DWORD1(v106) = a5;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v71, (const llvm::MachineOperand *)&v106);
  LODWORD(v106) = 1;
  *((_QWORD *)&v106 + 1) = 0;
  *(_QWORD *)&v107 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v71, (const llvm::MachineOperand *)&v106);
  v80 = 0;
  v97 = v71;
  v98 = (llvm::MachineInstr *)v74;
  do
  {
    if (((a3 >> v80) & 1) != 0)
    {
      v81 = *((_QWORD *)v105 + v80);
    }
    else
    {
      v82 = *(_BYTE **)(a6 + 8 * v80);
      if (!v82 || (sub_1C47ADDC8(a1, v82, 1, &v97, 0) & 1) == 0)
      {
        v83 = *(_DWORD *)(a7 + 4 * v80);
        *((_QWORD *)&v106 + 1) = 0;
        LODWORD(v106) = 0;
        DWORD1(v106) = v83;
        v107 = 0uLL;
        llvm::MachineInstr::addOperand(v98, v97, (const llvm::MachineOperand *)&v106);
      }
      v81 = *(unsigned int *)(a9 + 4 * v80);
    }
    LODWORD(v106) = 1;
    *((_QWORD *)&v106 + 1) = 0;
    *(_QWORD *)&v107 = v81;
    llvm::MachineInstr::addOperand(v98, v97, (const llvm::MachineOperand *)&v106);
    ++v80;
  }
  while (v80 != 4);
  v107 = 0u;
  v106 = 0u;
  llvm::MachineInstr::addOperand(v98, v97, (const llvm::MachineOperand *)&v106);
  LODWORD(v106) = 1;
  *((_QWORD *)&v106 + 1) = 0;
  *(_QWORD *)&v107 = 0;
  llvm::MachineInstr::addOperand(v98, v97, (const llvm::MachineOperand *)&v106);
  v107 = 0u;
  v106 = 0u;
  llvm::MachineInstr::addOperand(v98, v97, (const llvm::MachineOperand *)&v106);
  sub_1C47655E8((uint64_t)v16, v103);
  if (v99 != v101)
    free(v99);
}

BOOL sub_1C47B891C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v13;
  llvm::Type *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  char v30;
  int v31;
  uint64_t *v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  int v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  llvm::detail::DoubleAPFloat *v54;
  void *v55;
  uint64_t v56;
  BOOL v57;
  int *v58;
  int v59;
  int v60;
  BOOL v61;
  _BOOL4 v62;
  int v63;
  int v64;
  int v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  int IncompleteVirtualRegister;
  _UNKNOWN ***v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  llvm::MachineFunction *v79;
  llvm::MachineFunction *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t *v90;
  llvm::detail::DoubleAPFloat *v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t *v96;
  _BYTE *v97;
  int v98;
  llvm::MachineInstr *v99;
  llvm::MachineFunction *v100;
  uint64_t *v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  llvm::MachineFunction *v109;
  llvm::MachineFunction *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  _QWORD *v119;
  _QWORD *v120;
  llvm::detail::DoubleAPFloat *v121;
  __int128 *v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  uint64_t *v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  llvm::MachineFunction *v148;
  llvm::MachineInstr *v149;
  llvm::MachineFunction *v150;
  llvm::MachineInstr *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _QWORD v160[4];
  uint64_t v161;
  uint64_t v162;
  _DWORD v163[1];
  unsigned int v164;
  _QWORD v165[4];

  v165[1] = *MEMORY[0x1E0C80C00];
  v146 = a5;
  v147 = a4;
  v144 = a7;
  v145 = a6;
  v13 = *(_WORD *)(a3 + 18) & 0x3F;
  v143 = v13;
  v14 = *(llvm::Type **)a4;
  if ((*(_DWORD *)(*(_QWORD *)a4 + 8) & 0xFE) == 0x12)
    v14 = (llvm::Type *)**((_QWORD **)v14 + 2);
  v15 = *a2;
  if (llvm::Type::getPrimitiveSizeInBits(v14) > 0x20)
    return 0;
  v16 = *(_DWORD *)(v15 + 8);
  if ((v16 & 0xFE) == 0x12)
    v15 = **(_QWORD **)(v15 + 16);
  if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v15) > 0x20)
    return 0;
  v142 = v16;
  v19 = v16 >> 8 < 0x11 && v16 == 13 || v16 == 0;
  v140 = v19;
  switch(v13)
  {
    case '!':
      v20 = 32;
      goto LABEL_20;
    case '#':
      v20 = 36;
      goto LABEL_20;
    case '%':
      v20 = 34;
      goto LABEL_20;
    case '\'':
      v20 = 40;
      goto LABEL_20;
    case ')':
      v20 = 38;
LABEL_20:
      v143 = v20;
      v144 = a6;
      v145 = a7;
      break;
    default:
      break;
  }
  sub_1C47B6764(a1, (int *)&v143, &v147, &v146, &v145, &v144, *(_QWORD *)(a3 + 40), 1);
  v21 = 0;
  v161 = 0;
  v162 = 0;
  v160[0] = v147;
  v160[1] = v146;
  v160[2] = v145;
  v160[3] = v144;
  v158 = 0u;
  v159 = 0u;
  v156 = 0u;
  v157 = 0u;
  v22 = v143;
  v24 = v143 - 38 < 4 || (v143 & 0xFFFFFFFE) == 32;
  v154 = 0uLL;
  v155 = 0uLL;
  v25 = !v24;
  v26 = 1;
  do
  {
    v27 = v26;
    v28 = v160[v21];
    v29 = *(unsigned __int8 *)(v28 + 16);
    if (v29 <= 0x1B)
      v28 = 0;
    if (v29 == 68)
      v30 = v25;
    else
      v30 = 1;
    if ((v30 & 1) != 0)
    {
      if (v29 == 67 && (v22 > 0x29 || ((1 << v22) & 0x3C300000000) == 0))
      {
        v33 = *(_DWORD *)(v28 + 20);
        if ((v33 & 0x40000000) != 0)
          v34 = *(uint64_t **)(v28 - 8);
        else
          v34 = (uint64_t *)(v28 - 32 * (v33 & 0x7FFFFFF));
        v35 = *v34;
LABEL_43:
        v160[v21] = v35;
      }
    }
    else
    {
      v31 = *(_DWORD *)(v28 + 20);
      if ((v31 & 0x40000000) != 0)
        v32 = *(uint64_t **)(v28 - 8);
      else
        v32 = (uint64_t *)(v28 - 32 * (v31 & 0x7FFFFFF));
      v35 = *v32;
      if (*(_DWORD *)(*(_QWORD *)v35 + 8) > 0xFFFu)
        goto LABEL_43;
    }
    v26 = 0;
    v21 = 1;
  }
  while ((v27 & 1) != 0);
  v139 = a8;
  v141 = (uint64_t *)a1;
  v36 = 0;
  v17 = 0;
  v37 = 0;
  v38 = 0;
  v39 = v140;
  do
  {
    v40 = (unsigned __int8 *)v160[v36];
    v41 = v39;
    if (v36 <= 1)
      v41 = *(_DWORD *)(*(_QWORD *)v40 + 8) >> 8 < 0x11u;
    v42 = v40[16];
    if (v42 != 16 || v40 == 0)
    {
      if (v42 != 17 || v40 == 0)
      {
        *((_QWORD *)&v158 + v36) = v40;
        v45 = sub_1C5CC1648(v141, (uint64_t)v40);
        *((_DWORD *)&v161 + v36) = v45;
        if (!v45)
          return v17;
        v39 = v140;
      }
      else
      {
        v38 |= 1 << v36;
        *((_QWORD *)&v154 + v36) = v40;
      }
    }
    else
    {
      v38 |= 1 << v36;
      *((_QWORD *)&v156 + v36) = v40;
    }
    v37 |= v41 << v36;
    v17 = v36++ > 2;
  }
  while (v36 != 4);
  v46 = 0;
  v165[0] = 0x300000003;
  v47 = 1;
  do
  {
    v48 = v47;
    if (((v38 >> v46) & 4) != 0)
    {
      v49 = v46 | 2;
      if (v16 == 13)
      {
        v50 = *((_QWORD *)&v156 + v49);
        v51 = (_QWORD *)(v50 + 24);
        if (*(_DWORD *)(v50 + 32) >= 0x41u)
          v51 = (_QWORD *)*v51;
        v52 = *(_DWORD *)v51;
        v163[v46] = *(_DWORD *)v51;
      }
      else
      {
        v53 = *((_QWORD *)&v154 + v49);
        v55 = *(void **)(v53 + 32);
        v54 = (llvm::detail::DoubleAPFloat *)(v53 + 32);
        if (v55 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v54, (unsigned int *)&v152);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v54, (unsigned int *)&v152);
        v56 = v152;
        v57 = DWORD2(v152) >= 0x41;
        if (DWORD2(v152) >= 0x41)
          v58 = (int *)v152;
        else
          v58 = (int *)&v152;
        v52 = *v58;
        v163[v46] = *v58;
        if (v57 && v56)
          MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
      }
      if (v52 == 1)
        v59 = 1;
      else
        v59 = 2;
      if (!v52)
        v59 = 0;
      *((_DWORD *)v165 + v46) = v59;
    }
    v47 = 0;
    v46 = 1;
  }
  while ((v48 & 1) != 0);
  v60 = HIDWORD(v165[0]);
  if (LODWORD(v165[0]))
    v61 = 0;
  else
    v61 = HIDWORD(v165[0]) == 1;
  if (v61)
  {
    v62 = 0;
    v63 = 0;
  }
  else
  {
    v62 = HIDWORD(v165[0]) != 0;
    if (HIDWORD(v165[0]))
      v63 = 1;
    else
      v63 = LODWORD(v165[0]) != 1;
  }
  v64 = a8;
  if (v22 - 32 > 9)
  {
    v65 = 16;
    if (!v62)
      goto LABEL_108;
  }
  else
  {
    v65 = dword_1C640FF88[v22 - 32];
    if (!v62)
      goto LABEL_108;
  }
  if ((~v38 & 0xA) != 0)
  {
    v67 = (_QWORD *)*((_QWORD *)&v158 + 1);
    v68 = *((_QWORD *)&v159 + 1);
  }
  else
  {
    v66 = (_QWORD *)(*((_QWORD *)&v156 + 1) + 24);
    if (*(_DWORD *)(*((_QWORD *)&v156 + 1) + 32) >= 0x41u)
      v66 = (_QWORD *)*v66;
    v67 = (_QWORD *)*v66;
    v68 = v164;
  }
  if (v67 == (_QWORD *)v68)
  {
LABEL_108:
    v69 = 0;
    if ((v38 & 1) == 0)
      goto LABEL_110;
LABEL_109:
    v37 |= (*(_DWORD *)(*(_QWORD *)v156 + 8) & 0xFFFFFF00) == 4096;
    goto LABEL_110;
  }
  if (LODWORD(v165[0]) == 1)
  {
    v60 = 0;
    v63 = 0;
  }
  else if (LODWORD(v165[0]))
  {
    v60 = 0;
  }
  else
  {
    v63 = 0;
    v60 = 1;
  }
  HIDWORD(v165[0]) = v60;
  v69 = 1;
  if ((v38 & 1) != 0)
    goto LABEL_109;
LABEL_110:
  if ((v38 & 2) != 0 && (*(_DWORD *)(**((_QWORD **)&v156 + 1) + 8) & 0xFFFFFF00) == 0x1000)
    v37 |= 2u;
  v70 = sub_1C47C01E0(v65, *(unsigned __int8 *)(v141[32] + 280), v140, v38 & 1, v37 & 1, (v38 >> 1) & 1, (v37 >> 1) & 1, v165[0], (v37 & 4) != 0, v60);
  if (v69)
  {
    v71 = v141[6];
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v71, "", 0);
    v64 = IncompleteVirtualRegister;
    v73 = &off_1E7F98468;
    if (v140)
      v73 = &off_1E7F982A8;
    *(_QWORD *)(*(_QWORD *)(v71 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v73;
    v74 = *(_QWORD *)(v71 + 8);
    if (v74)
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 24))(v74);
  }
  v138 = v69;
  v75 = v141[4];
  v76 = *(_QWORD *)(v75 + 640);
  v77 = *(unint64_t **)(v75 + 648);
  v78 = *(_QWORD *)(v141[12] + 8);
  v79 = *(llvm::MachineFunction **)(v76 + 32);
  v80 = (llvm::MachineFunction *)v141[9];
  v150 = v80;
  if (v80)
    llvm::MetadataTracking::track((uint64_t)&v150, (unsigned __int8 *)v80, 2);
  v81 = v78 + 48 * v70;
  v82 = *((_QWORD *)v79 + 28);
  if (v82)
    *((_QWORD *)v79 + 28) = *(_QWORD *)v82;
  else
    v82 = sub_1C484358C((uint64_t)v79 + 128, 72, 3);
  *(_QWORD *)&v152 = v150;
  if (v150)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v150, (unsigned __int8 *)v150, (uint64_t)&v152);
    v150 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v82, v79, v81, (unsigned __int8 **)&v152, 0);
  if ((_QWORD)v152)
    llvm::MetadataTracking::untrack((uint64_t)&v152, (unsigned __int8 *)v152);
  if (v150)
    llvm::MetadataTracking::untrack((uint64_t)&v150, (unsigned __int8 *)v150);
  v83 = *(_QWORD *)(v76 + 40);
  *(_QWORD *)(v82 + 24) = v83;
  v84 = *(_QWORD *)(v83 + 32);
  v85 = *(unsigned int *)(v82 + 40);
  if ((_DWORD)v85)
  {
    v124 = *(_QWORD *)(v82 + 32);
    v125 = *(_QWORD *)(v84 + 40);
    v126 = 32 * v85;
    do
    {
      if (!*(_BYTE *)v124)
      {
        v127 = *(unsigned int *)(v124 + 4);
        if ((int)v127 >= 0)
          v128 = (uint64_t *)(*(_QWORD *)(v125 + 272) + 8 * v127);
        else
          v128 = (uint64_t *)(*(_QWORD *)(v125 + 24) + 16 * (v127 & 0x7FFFFFFF) + 8);
        v129 = *v128;
        if (*v128)
        {
          v130 = *(_QWORD *)(v129 + 16);
          *(_QWORD *)(v129 + 16) = v124;
          *(_QWORD *)(v124 + 16) = v130;
          if ((*(_BYTE *)(v124 + 3) & 1) != 0)
          {
            *(_QWORD *)(v124 + 24) = v129;
          }
          else
          {
            *(_QWORD *)(v124 + 24) = 0;
            v128 = (uint64_t *)(v130 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v124 + 16) = v124;
          *(_QWORD *)(v124 + 24) = 0;
        }
        *v128 = v124;
      }
      v124 += 32;
      v126 -= 32;
    }
    while (v126);
  }
  v86 = *(_QWORD *)(v84 + 728);
  if (v86)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v86 + 24))(v86, v82);
  v87 = *v77 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v82 = v87 | *(_QWORD *)v82 & 7;
  *(_QWORD *)(v82 + 8) = v77;
  *(_QWORD *)(v87 + 8) = v82;
  *v77 = *v77 & 7 | v82;
  *((_QWORD *)&v152 + 1) = 0;
  v153 = 0uLL;
  v88 = v64;
  LODWORD(v152) = 0x1000000;
  DWORD1(v152) = v64;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v82, v79, (const llvm::MachineOperand *)&v152);
  LODWORD(v152) = 1;
  *((_QWORD *)&v152 + 1) = 0;
  *(_QWORD *)&v153 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v82, v79, (const llvm::MachineOperand *)&v152);
  v89 = 0;
  v150 = v79;
  v151 = (llvm::MachineInstr *)v82;
  v90 = (uint64_t *)v155;
  v91 = (llvm::detail::DoubleAPFloat *)(v155 + 32);
  do
  {
    if (((v89 == 2) & ~v63) != 0)
      break;
    if (((v38 >> v89) & 1) != 0)
    {
      if (v142 == 13 || v89 < 2)
      {
        v96 = (uint64_t *)*((_QWORD *)&v156 + v89);
        v101 = v96 + 3;
        if (*((_DWORD *)v96 + 8) >= 0x41u)
          v101 = (uint64_t *)*v101;
        v93 = *v101;
        v94 = 4096;
        v95 = -256;
      }
      else
      {
        if (*(_UNKNOWN **)v91 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v91, (unsigned int *)&v152);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v91, (unsigned int *)&v152);
        v92 = (uint64_t *)&v152;
        if (DWORD2(v152) >= 0x41)
          v92 = (uint64_t *)v152;
        v93 = *v92;
        if (DWORD2(v152) >= 0x41 && (_QWORD)v152)
          MEMORY[0x1CAA32F9C]();
        v94 = 0;
        v95 = 255;
        v96 = v90;
      }
      v102 = (*(_DWORD *)(*v96 + 8) & v95) == v94 ? v93 | 0x100000000 : v93;
      v100 = v150;
      v99 = v151;
      LODWORD(v152) = 1;
      *((_QWORD *)&v152 + 1) = 0;
      *(_QWORD *)&v153 = v102;
    }
    else
    {
      v97 = (_BYTE *)*((_QWORD *)&v158 + v89);
      if (!v97 || (sub_1C47ADDC8((uint64_t)v141, v97, 0, &v150, 0) & 1) == 0)
      {
        v98 = *((_DWORD *)&v161 + v89);
        *((_QWORD *)&v152 + 1) = 0;
        LODWORD(v152) = 0;
        DWORD1(v152) = v98;
        v153 = 0uLL;
        llvm::MachineInstr::addOperand(v151, v150, (const llvm::MachineOperand *)&v152);
      }
      v100 = v150;
      v99 = v151;
      LODWORD(v152) = 1;
      *((_QWORD *)&v152 + 1) = 0;
      *(_QWORD *)&v153 = 0;
    }
    llvm::MachineInstr::addOperand(v99, v100, (const llvm::MachineOperand *)&v152);
    ++v89;
  }
  while (v89 != 3);
  if ((v138 & 1) != 0)
  {
    v153 = 0uLL;
    v152 = 0x201000000uLL;
  }
  else
  {
    v152 = 0u;
    v153 = 0u;
  }
  llvm::MachineInstr::addOperand(v151, v150, (const llvm::MachineOperand *)&v152);
  LODWORD(v152) = 1;
  *((_QWORD *)&v152 + 1) = 0;
  *(_QWORD *)&v153 = 0;
  llvm::MachineInstr::addOperand(v151, v150, (const llvm::MachineOperand *)&v152);
  v152 = 0u;
  v153 = 0u;
  llvm::MachineInstr::addOperand(v151, v150, (const llvm::MachineOperand *)&v152);
  if (v138)
  {
    v103 = v38 & 8;
    v104 = dword_1C6416958[v140 | (v103 >> 2)];
    v105 = v141[4];
    v106 = *(_QWORD *)(v105 + 640);
    v107 = *(unint64_t **)(v105 + 648);
    v108 = *(_QWORD *)(v141[12] + 8);
    v109 = *(llvm::MachineFunction **)(v106 + 32);
    v110 = (llvm::MachineFunction *)v141[9];
    v148 = v110;
    if (v110)
      llvm::MetadataTracking::track((uint64_t)&v148, (unsigned __int8 *)v110, 2);
    v111 = v108 + 48 * v104;
    v112 = *((_QWORD *)v109 + 28);
    if (v112)
      *((_QWORD *)v109 + 28) = *(_QWORD *)v112;
    else
      v112 = sub_1C484358C((uint64_t)v109 + 128, 72, 3);
    *(_QWORD *)&v152 = v148;
    if (v148)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v148, (unsigned __int8 *)v148, (uint64_t)&v152);
      v148 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v112, v109, v111, (unsigned __int8 **)&v152, 0);
    if ((_QWORD)v152)
      llvm::MetadataTracking::untrack((uint64_t)&v152, (unsigned __int8 *)v152);
    if (v148)
      llvm::MetadataTracking::untrack((uint64_t)&v148, (unsigned __int8 *)v148);
    v113 = *(_QWORD *)(v106 + 40);
    *(_QWORD *)(v112 + 24) = v113;
    v114 = *(_QWORD *)(v113 + 32);
    v115 = *(unsigned int *)(v112 + 40);
    if ((_DWORD)v115)
    {
      v131 = *(_QWORD *)(v112 + 32);
      v132 = *(_QWORD *)(v114 + 40);
      v133 = 32 * v115;
      do
      {
        if (!*(_BYTE *)v131)
        {
          v134 = *(unsigned int *)(v131 + 4);
          if ((int)v134 >= 0)
            v135 = (uint64_t *)(*(_QWORD *)(v132 + 272) + 8 * v134);
          else
            v135 = (uint64_t *)(*(_QWORD *)(v132 + 24) + 16 * (v134 & 0x7FFFFFFF) + 8);
          v136 = *v135;
          if (*v135)
          {
            v137 = *(_QWORD *)(v136 + 16);
            *(_QWORD *)(v136 + 16) = v131;
            *(_QWORD *)(v131 + 16) = v137;
            if ((*(_BYTE *)(v131 + 3) & 1) != 0)
            {
              *(_QWORD *)(v131 + 24) = v136;
            }
            else
            {
              *(_QWORD *)(v131 + 24) = 0;
              v135 = (uint64_t *)(v137 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v131 + 16) = v131;
            *(_QWORD *)(v131 + 24) = 0;
          }
          *v135 = v131;
        }
        v131 += 32;
        v133 -= 32;
      }
      while (v133);
    }
    v116 = *(_QWORD *)(v114 + 728);
    if (v116)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v116 + 24))(v116, v112);
    v117 = *v107 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v112 = v117 | *(_QWORD *)v112 & 7;
    *(_QWORD *)(v112 + 8) = v107;
    *(_QWORD *)(v117 + 8) = v112;
    *v107 = *v107 & 7 | v112;
    *((_QWORD *)&v152 + 1) = 0;
    v153 = 0uLL;
    LODWORD(v152) = 0x1000000;
    DWORD1(v152) = v139;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v112, v109, (const llvm::MachineOperand *)&v152);
    v148 = v109;
    v149 = (llvm::MachineInstr *)v112;
    *((_QWORD *)&v152 + 1) = 0;
    v153 = 0uLL;
    LODWORD(v152) = 0;
    DWORD1(v152) = v88;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v112, v109, (const llvm::MachineOperand *)&v152);
    if (v103)
    {
      if (v142 == 13)
      {
        v119 = (_QWORD *)(*((_QWORD *)&v157 + 1) + 24);
        if (*(_DWORD *)(*((_QWORD *)&v157 + 1) + 32) >= 0x41u)
          v119 = (_QWORD *)*v119;
        v120 = (_QWORD *)*v119;
      }
      else
      {
        v121 = (llvm::detail::DoubleAPFloat *)(*((_QWORD *)&v155 + 1) + 32);
        if (*(_UNKNOWN **)(*((_QWORD *)&v155 + 1) + 32) == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v121, (unsigned int *)&v152);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v121, (unsigned int *)&v152);
        if (DWORD2(v152) >= 0x41)
          v122 = (__int128 *)v152;
        else
          v122 = &v152;
        v120 = *(_QWORD **)v122;
        if (DWORD2(v152) >= 0x41 && (_QWORD)v152)
          MEMORY[0x1CAA32F9C]();
      }
      LODWORD(v152) = 1;
      *((_QWORD *)&v152 + 1) = 0;
      *(_QWORD *)&v153 = v120;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v112, v109, (const llvm::MachineOperand *)&v152);
    }
    else if (!*((_QWORD *)&v159 + 1)
           || (v118 = sub_1C47ADDC8((uint64_t)v141, *((_BYTE **)&v159 + 1), 0, &v148, 0),
               v109 = v148,
               v112 = (unint64_t)v149,
               (v118 & 1) == 0))
    {
      *((_QWORD *)&v152 + 1) = 0;
      v153 = 0uLL;
      LODWORD(v152) = 0;
      DWORD1(v152) = HIDWORD(v162);
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v112, v109, (const llvm::MachineOperand *)&v152);
      v109 = v148;
      v112 = (unint64_t)v149;
    }
    LODWORD(v152) = 1;
    *((_QWORD *)&v152 + 1) = 0;
    *(_QWORD *)&v153 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v112, v109, (const llvm::MachineOperand *)&v152);
    v153 = 0uLL;
    v152 = 0x200000000uLL;
    llvm::MachineInstr::addOperand(v149, v148, (const llvm::MachineOperand *)&v152);
  }
  return 1;
}

uint64_t sub_1C47B9614(_QWORD *a1, uint64_t a2, uint64_t a3, llvm::ConstantInt ***a4, llvm::ConstantInt ***a5, _QWORD *a6, _QWORD *a7)
{
  int v12;
  llvm::Type **v13;
  llvm::Type *v14;
  int v15;
  int v16;
  int v17;
  uint64_t result;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  char v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  llvm::MachineFunction *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char i;
  char v47;
  uint64_t v48;
  const llvm::detail::DoubleAPFloat *v49;
  void *v50;
  void *v51;
  _BYTE *v52;
  int v53;
  uint64_t v54;
  void **v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  llvm::MachineFunction *v61;
  unsigned __int8 *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _BOOL4 v88;
  llvm::MachineFunction *v89;
  llvm::MachineInstr *v90;
  llvm::ConstantInt ***v91;
  llvm::ConstantInt ***v92;
  unsigned __int8 v93;
  char v94;
  BOOL v95;
  int v96;
  llvm::ConstantInt ***v97;
  llvm::ConstantInt ***v98;
  void *v99[2];
  __int128 v100;
  unsigned __int8 *v101;
  _DWORD *v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[2];
  _QWORD v108[2];
  _QWORD v109[4];

  v109[2] = *MEMORY[0x1E0C80C00];
  v97 = a5;
  v98 = a4;
  v12 = *(_WORD *)(a3 + 18) & 0x3F;
  v96 = v12;
  v13 = *(llvm::Type ***)(a3 - 64);
  v14 = *v13;
  v15 = *((_DWORD *)*v13 + 2);
  v16 = v15;
  v95 = (_BYTE)v15 == 0;
  if ((v15 & 0xFE) == 0x12)
    v14 = (llvm::Type *)**((_QWORD **)v14 + 2);
  v17 = *(unsigned __int8 *)(a1[32] + 280);
  if (llvm::Type::getPrimitiveSizeInBits(v14) > 0x20 || (v12 - 7) < 2)
    return 0;
  v94 = 0;
  v93 = 0;
  v91 = 0;
  v92 = 0;
  sub_1C6129D28((uint64_t)a1, &v96, &v98, &v97, &v92, &v91, &v94, &v93, &v95, 1);
  result = 0;
  if (!v94)
  {
    v85 = a2;
    v86 = a7;
    v87 = a6;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v88 = v95;
    v109[0] = 0;
    v109[1] = 0;
    v108[0] = v98;
    v108[1] = v97;
    v107[0] = 0;
    v107[1] = 0;
    v106 = 0;
    v23 = (v16 | v95) == 0;
    v105 = 0x200000000;
    v24 = 1;
    do
    {
      v25 = v24;
      v26 = v108[v20];
      if (v26)
        v27 = *(_BYTE *)(v26 + 16) == 17;
      else
        v27 = 0;
      if (v27)
      {
        v109[v20] = v26;
        v22 |= 1 << v20;
      }
      else
      {
        v28 = &v107[v20];
        *v28 = v26;
        LOBYTE(v99[0]) = v23;
        result = sub_1C47AE068((uint64_t)a1, v28, (int *)&v105 + v20, v99, v88, *(_QWORD *)(a3 + 40), 7, 1);
        *((_DWORD *)&v107[-1] + v20) = result;
        if (!(_DWORD)result)
          return result;
        v21 |= LOBYTE(v99[0]) << v20;
      }
      v24 = 0;
      v20 = 1;
    }
    while ((v25 & 1) != 0);
    if ((v96 - 1) >= 6)
      v29 = 0;
    else
      v29 = v96;
    if (v88)
    {
      v30 = 6;
      if (v29 != 2)
        v30 = 3;
      if (v29 == 1)
        v30 = 0;
      v31 = dword_1C6416634[v30 + (__rbit32(v22) >> 30)];
    }
    else
    {
      v31 = sub_1C612CEF0(v29, v17 != 0, v22 & 1, v21 & 1, (v22 >> 1) & 1, (v21 >> 1) & 1);
    }
    v32 = a1[4];
    v33 = *(_QWORD *)(v32 + 640);
    v34 = *(unint64_t **)(v32 + 648);
    v35 = *(_QWORD *)(a1[12] + 8);
    v36 = *(llvm::MachineFunction **)(v33 + 32);
    v37 = (unsigned __int8 *)a1[9];
    v101 = v37;
    if (v37)
      llvm::MetadataTracking::track((uint64_t)&v101, v37, 2);
    v38 = v35 + 48 * v31;
    v39 = *((_QWORD *)v36 + 28);
    if (v39)
      *((_QWORD *)v36 + 28) = *(_QWORD *)v39;
    else
      v39 = sub_1C484358C((uint64_t)v36 + 128, 72, 3);
    v99[0] = v101;
    if (v101)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v101, v101, (uint64_t)v99);
      v101 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v39, v36, v38, (unsigned __int8 **)v99, 0);
    if (v99[0])
      llvm::MetadataTracking::untrack((uint64_t)v99, (unsigned __int8 *)v99[0]);
    if (v101)
      llvm::MetadataTracking::untrack((uint64_t)&v101, v101);
    v40 = *(_QWORD *)(v33 + 40);
    *(_QWORD *)(v39 + 24) = v40;
    v41 = *(_QWORD *)(v40 + 32);
    v42 = *(unsigned int *)(v39 + 40);
    if ((_DWORD)v42)
    {
      v71 = *(_QWORD *)(v39 + 32);
      v72 = *(_QWORD *)(v41 + 40);
      v73 = 32 * v42;
      do
      {
        if (!*(_BYTE *)v71)
        {
          v74 = *(unsigned int *)(v71 + 4);
          if ((int)v74 >= 0)
            v75 = (uint64_t *)(*(_QWORD *)(v72 + 272) + 8 * v74);
          else
            v75 = (uint64_t *)(*(_QWORD *)(v72 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8);
          v76 = *v75;
          if (*v75)
          {
            v77 = *(_QWORD *)(v76 + 16);
            *(_QWORD *)(v76 + 16) = v71;
            *(_QWORD *)(v71 + 16) = v77;
            if ((*(_BYTE *)(v71 + 3) & 1) != 0)
            {
              *(_QWORD *)(v71 + 24) = v76;
            }
            else
            {
              *(_QWORD *)(v71 + 24) = 0;
              v75 = (uint64_t *)(v77 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v71 + 16) = v71;
            *(_QWORD *)(v71 + 24) = 0;
          }
          *v75 = v71;
        }
        v71 += 32;
        v73 -= 32;
      }
      while (v73);
    }
    v43 = *(_QWORD *)(v41 + 728);
    if (v43)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v43 + 24))(v43, v39);
    v44 = *v34 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v39 = v44 | *(_QWORD *)v39 & 7;
    *(_QWORD *)(v39 + 8) = v34;
    *(_QWORD *)(v44 + 8) = v39;
    *v34 = *v34 & 7 | v39;
    LODWORD(v99[0]) = 1;
    v99[1] = 0;
    *(_QWORD *)&v100 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v36, (const llvm::MachineOperand *)v99);
    v45 = 0;
    v89 = v36;
    v90 = (llvm::MachineInstr *)v39;
    for (i = 1; ; i = 0)
    {
      v47 = i;
      if (((v22 >> v45) & 1) == 0)
      {
        v52 = (_BYTE *)v107[v45];
        if (!v52 || (sub_1C47ADDC8((uint64_t)a1, v52, v88, &v89, 0) & 1) == 0)
        {
          v53 = *((_DWORD *)&v107[-1] + v45);
          v99[1] = 0;
          LODWORD(v99[0]) = 0;
          HIDWORD(v99[0]) = v53;
          v100 = 0uLL;
          llvm::MachineInstr::addOperand(v90, v89, (const llvm::MachineOperand *)v99);
        }
        v54 = *((unsigned int *)&v105 + v45);
        LODWORD(v99[0]) = 1;
        v99[1] = 0;
        *(_QWORD *)&v100 = v54;
        llvm::MachineInstr::addOperand(v90, v89, (const llvm::MachineOperand *)v99);
        goto LABEL_64;
      }
      v48 = v109[v45];
      v50 = *(void **)(v48 + 32);
      v49 = (const llvm::detail::DoubleAPFloat *)(v48 + 32);
      if (v50 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v102, v49);
      else
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v102, (uint64_t **)v49);
      v51 = v102;
      if ((*((_DWORD *)&v105 + v45) & 2) != 0)
      {
        if (v102 != (_DWORD *)&unk_1C866F1C0)
        {
          v104 ^= 8u;
LABEL_55:
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v102, (unsigned int *)v99);
          goto LABEL_56;
        }
        llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v102);
        v51 = v102;
      }
      if (v51 != &unk_1C866F1C0)
        goto LABEL_55;
      llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v102, (unsigned int *)v99);
LABEL_56:
      if (LODWORD(v99[1]) >= 0x41)
        v55 = (void **)v99[0];
      else
        v55 = v99;
      v56 = *v55;
      if (LODWORD(v99[1]) >= 0x41 && v99[0])
        MEMORY[0x1CAA32F9C]();
      LODWORD(v99[0]) = 1;
      v99[1] = 0;
      *(_QWORD *)&v100 = v56;
      llvm::MachineInstr::addOperand(v90, v89, (const llvm::MachineOperand *)v99);
      if (v102 == (_DWORD *)&unk_1C866F1C0)
      {
        sub_1C4773C74(&v103);
      }
      else if ((v102[2] - 64) <= 0xFFFFFF7F && v103)
      {
        MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
      }
LABEL_64:
      v45 = 1;
      if ((v47 & 1) == 0)
      {
        v99[1] = 0;
        v100 = 0uLL;
        v99[0] = (void *)0x201000000;
        llvm::MachineInstr::addOperand(v90, v89, (const llvm::MachineOperand *)v99);
        LODWORD(v99[0]) = 1;
        v99[1] = 0;
        *(_QWORD *)&v100 = 0;
        llvm::MachineInstr::addOperand(v90, v89, (const llvm::MachineOperand *)v99);
        *(_OWORD *)v99 = 0u;
        v100 = 0u;
        llvm::MachineInstr::addOperand(v90, v89, (const llvm::MachineOperand *)v99);
        v57 = a1[4];
        v58 = *(_QWORD *)(v57 + 640);
        v59 = *(unint64_t **)(v57 + 648);
        v60 = *(_QWORD *)(a1[12] + 8);
        v61 = *(llvm::MachineFunction **)(v58 + 32);
        v62 = (unsigned __int8 *)a1[9];
        v101 = v62;
        if (v62)
          llvm::MetadataTracking::track((uint64_t)&v101, v62, 2);
        v63 = *((_QWORD *)v61 + 28);
        if (v63)
          *((_QWORD *)v61 + 28) = *(_QWORD *)v63;
        else
          v63 = sub_1C484358C((uint64_t)v61 + 128, 72, 3);
        v99[0] = v101;
        if (v101)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v101, v101, (uint64_t)v99);
          v101 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v63, v61, v60 + 555648, (unsigned __int8 **)v99, 0);
        if (v99[0])
          llvm::MetadataTracking::untrack((uint64_t)v99, (unsigned __int8 *)v99[0]);
        if (v101)
          llvm::MetadataTracking::untrack((uint64_t)&v101, v101);
        v64 = *(_QWORD *)(v58 + 40);
        *(_QWORD *)(v63 + 24) = v64;
        v65 = *(_QWORD *)(v64 + 32);
        v66 = *(unsigned int *)(v63 + 40);
        if ((_DWORD)v66)
        {
          v78 = *(_QWORD *)(v63 + 32);
          v79 = *(_QWORD *)(v65 + 40);
          v80 = 32 * v66;
          do
          {
            if (!*(_BYTE *)v78)
            {
              v81 = *(unsigned int *)(v78 + 4);
              if ((int)v81 >= 0)
                v82 = (uint64_t *)(*(_QWORD *)(v79 + 272) + 8 * v81);
              else
                v82 = (uint64_t *)(*(_QWORD *)(v79 + 24) + 16 * (v81 & 0x7FFFFFFF) + 8);
              v83 = *v82;
              if (*v82)
              {
                v84 = *(_QWORD *)(v83 + 16);
                *(_QWORD *)(v83 + 16) = v78;
                *(_QWORD *)(v78 + 16) = v84;
                if ((*(_BYTE *)(v78 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v78 + 24) = v83;
                }
                else
                {
                  *(_QWORD *)(v78 + 24) = 0;
                  v82 = (uint64_t *)(v84 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v78 + 16) = v78;
                *(_QWORD *)(v78 + 24) = 0;
              }
              *v82 = v78;
            }
            v78 += 32;
            v80 -= 32;
          }
          while (v80);
        }
        v67 = *(_QWORD *)(v65 + 728);
        if (v67)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v67 + 24))(v67, v63);
        v68 = *v59 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v63 = v68 | *(_QWORD *)v63 & 7;
        *(_QWORD *)(v63 + 8) = v59;
        *(_QWORD *)(v68 + 8) = v63;
        *v59 = *v59 & 7 | v63;
        v99[1] = 0;
        *(_QWORD *)&v100 = v87;
        LODWORD(v99[0]) = 4;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v63, v61, (const llvm::MachineOperand *)v99);
        LODWORD(v99[0]) = 1;
        v99[1] = 0;
        *(_QWORD *)&v100 = v93;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v63, v61, (const llvm::MachineOperand *)v99);
        v69 = a1[12];
        v70 = *(_QWORD *)(a1[4] + 640);
        v99[0] = &v100;
        v99[1] = 0;
        (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v69 + 272))(v69, v70, v86, 0, &v100, 0, v85 + 48, 0);
        if (v99[0] != &v100)
          free(v99[0]);
        llvm::MachineBasicBlock::addSuccessor(*(_QWORD **)(a1[4] + 640), v86, -1);
        llvm::MachineBasicBlock::addSuccessor(*(_QWORD **)(a1[4] + 640), v87, -1);
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1C47B9EB0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  char v17;
  BOOL v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  int v27;
  uint64_t *v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  char v36;
  _BYTE *v37;
  BOOL v38;
  llvm::Type *v39;
  unsigned int PrimitiveSizeInBits;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  llvm::MachineFunction *v47;
  llvm::MachineFunction *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  llvm::MachineInstr *v63;
  llvm::MachineFunction *v64;
  _BYTE *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  llvm::MachineFunction *v71;
  unsigned __int8 *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  llvm::MachineFunction *v101;
  llvm::MachineInstr *v102;
  void *v103[2];
  __int128 v104;
  unsigned __int8 *v105;
  uint64_t v106;
  _QWORD v107[2];
  _QWORD v108[2];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v13 = **(_QWORD **)(a3 - 64);
  if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12)
    v13 = **(_QWORD **)(v13 + 16);
  if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v13) > 0x20)
    return 0;
  v15 = *(_WORD *)(a3 + 18) & 0x3F;
  v16 = v15 - 33;
  v98 = a7;
  v99 = a6;
  v97 = a2;
  if ((v15 - 33) <= 8 && ((0x155u >> v16) & 1) != 0)
  {
    LODWORD(v15) = dword_1C640FFB0[v16];
    v96 = 1;
  }
  else
  {
    v96 = 0;
  }
  v17 = 0;
  v109 = 0;
  v110 = 0;
  v19 = (v15 & 0xFFFFFFFE) == 0x20 || (v15 - 38) < 4;
  v108[0] = a4;
  v108[1] = a5;
  v107[0] = 0;
  v107[1] = 0;
  v106 = 0;
  v20 = !v19;
  v21 = v108;
  v22 = 1;
  do
  {
    v23 = v17;
    v24 = *v21;
    v25 = *(unsigned __int8 *)(*v21 + 16);
    if (v25 <= 0x1B)
      v24 = 0;
    if (v25 == 68)
      v26 = v20;
    else
      v26 = 1;
    if ((v26 & 1) != 0)
    {
      if (v25 == 67 && (v15 > 0x29 || ((1 << v15) & 0x3C300000000) == 0))
      {
        v29 = *(_DWORD *)(v24 + 20);
        if ((v29 & 0x40000000) != 0)
          v30 = *(uint64_t **)(v24 - 8);
        else
          v30 = (uint64_t *)(v24 - 32 * (v29 & 0x7FFFFFF));
        v31 = *v30;
LABEL_31:
        *v21 = v31;
      }
    }
    else
    {
      v27 = *(_DWORD *)(v24 + 20);
      if ((v27 & 0x40000000) != 0)
        v28 = *(uint64_t **)(v24 - 8);
      else
        v28 = (uint64_t *)(v24 - 32 * (v27 & 0x7FFFFFF));
      v31 = *v28;
      if (*(_DWORD *)(*(_QWORD *)v31 + 8) > 0xFFFu)
        goto LABEL_31;
    }
    v21 = &v108[v22];
    v17 = 1;
    v22 = 2;
  }
  while ((v23 & 1) == 0);
  v95 = v15;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  do
  {
    v36 = v35;
    v37 = (_BYTE *)v108[v32];
    if (v37)
      v38 = v37[16] == 16;
    else
      v38 = 0;
    if (v38)
    {
      *(&v109 + v32) = (uint64_t)v37;
      v33 |= 1 << v32;
    }
    else
    {
      v107[v32] = v37;
      v39 = *(llvm::Type **)v37;
      if ((*(_DWORD *)(*(_QWORD *)v37 + 8) & 0xFE) == 0x12)
        v39 = (llvm::Type *)**((_QWORD **)v39 + 2);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v39);
      result = sub_1C5CC1648(a1, (uint64_t)v37);
      *((_DWORD *)&v107[-1] + v32) = result;
      if (!(_DWORD)result)
        return result;
      v34 |= (PrimitiveSizeInBits < 0x11) << v32;
    }
    v35 = 0;
    v32 = 1;
  }
  while ((v36 & 1) != 0);
  if ((v95 - 32) > 8)
    v41 = 16;
  else
    v41 = dword_1C640FFD4[v95 - 32];
  if ((v33 & 1) != 0)
    v34 |= (*(_DWORD *)(*(_QWORD *)v109 + 8) & 0xFFFFFF00) == 4096;
  if ((v33 & 2) != 0 && (*(_DWORD *)(*(_QWORD *)v110 + 8) & 0xFFFFFF00) == 0x1000)
    v34 |= 2u;
  v42 = sub_1C612CF5C(v41, *(unsigned __int8 *)(a1[32] + 280) != 0, v33 & 1, v34 & 1, (v33 >> 1) & 1, (v34 >> 1) & 1);
  v43 = a1[4];
  v44 = *(_QWORD *)(v43 + 640);
  v45 = *(unint64_t **)(v43 + 648);
  v46 = *(_QWORD *)(a1[12] + 8);
  v47 = *(llvm::MachineFunction **)(v44 + 32);
  v48 = (llvm::MachineFunction *)a1[9];
  v101 = v48;
  if (v48)
    llvm::MetadataTracking::track((uint64_t)&v101, (unsigned __int8 *)v48, 2);
  v49 = v46 + 48 * v42;
  v50 = *((_QWORD *)v47 + 28);
  if (v50)
    *((_QWORD *)v47 + 28) = *(_QWORD *)v50;
  else
    v50 = sub_1C484358C((uint64_t)v47 + 128, 72, 3);
  v103[0] = v101;
  if (v101)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v101, (unsigned __int8 *)v101, (uint64_t)v103);
    v101 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v50, v47, v49, (unsigned __int8 **)v103, 0);
  if (v103[0])
    llvm::MetadataTracking::untrack((uint64_t)v103, (unsigned __int8 *)v103[0]);
  if (v101)
    llvm::MetadataTracking::untrack((uint64_t)&v101, (unsigned __int8 *)v101);
  v51 = *(_QWORD *)(v44 + 40);
  *(_QWORD *)(v50 + 24) = v51;
  v52 = *(_QWORD *)(v51 + 32);
  v53 = *(unsigned int *)(v50 + 40);
  if ((_DWORD)v53)
  {
    v81 = *(_QWORD *)(v50 + 32);
    v82 = *(_QWORD *)(v52 + 40);
    v83 = 32 * v53;
    do
    {
      if (!*(_BYTE *)v81)
      {
        v84 = *(unsigned int *)(v81 + 4);
        if ((int)v84 >= 0)
          v85 = (uint64_t *)(*(_QWORD *)(v82 + 272) + 8 * v84);
        else
          v85 = (uint64_t *)(*(_QWORD *)(v82 + 24) + 16 * (v84 & 0x7FFFFFFF) + 8);
        v86 = *v85;
        if (*v85)
        {
          v87 = *(_QWORD *)(v86 + 16);
          *(_QWORD *)(v86 + 16) = v81;
          *(_QWORD *)(v81 + 16) = v87;
          if ((*(_BYTE *)(v81 + 3) & 1) != 0)
          {
            *(_QWORD *)(v81 + 24) = v86;
          }
          else
          {
            *(_QWORD *)(v81 + 24) = 0;
            v85 = (uint64_t *)(v87 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v81 + 16) = v81;
          *(_QWORD *)(v81 + 24) = 0;
        }
        *v85 = v81;
      }
      v81 += 32;
      v83 -= 32;
    }
    while (v83);
  }
  v54 = *(_QWORD *)(v52 + 728);
  if (v54)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v54 + 24))(v54, v50);
  v55 = *v45 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v50 = v55 | *(_QWORD *)v50 & 7;
  *(_QWORD *)(v50 + 8) = v45;
  *(_QWORD *)(v55 + 8) = v50;
  *v45 = *v45 & 7 | v50;
  LODWORD(v103[0]) = 1;
  v103[1] = 0;
  *(_QWORD *)&v104 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v50, v47, (const llvm::MachineOperand *)v103);
  v56 = 0;
  v101 = v47;
  v102 = (llvm::MachineInstr *)v50;
  v57 = 1;
  do
  {
    v58 = v57;
    if (((v33 >> v56) & 1) != 0)
    {
      v59 = (uint64_t *)*(&v109 + v56);
      v60 = v59 + 3;
      if (*((_DWORD *)v59 + 8) >= 0x41u)
        v60 = (uint64_t *)*v60;
      v61 = *v60;
      if ((*(_DWORD *)(*v59 + 8) & 0xFFFFFF00) == 0x1000)
        v62 = v61 | 0x100000000;
      else
        v62 = v61;
      v64 = v101;
      v63 = v102;
      LODWORD(v103[0]) = 1;
      v103[1] = 0;
      *(_QWORD *)&v104 = v62;
    }
    else
    {
      v65 = (_BYTE *)v107[v56];
      if (!v65 || (sub_1C47ADDC8((uint64_t)a1, v65, 0, &v101, 0) & 1) == 0)
      {
        v66 = *((_DWORD *)&v107[-1] + v56);
        v103[1] = 0;
        LODWORD(v103[0]) = 0;
        HIDWORD(v103[0]) = v66;
        v104 = 0uLL;
        llvm::MachineInstr::addOperand(v102, v101, (const llvm::MachineOperand *)v103);
      }
      v64 = v101;
      v63 = v102;
      LODWORD(v103[0]) = 1;
      v103[1] = 0;
      *(_QWORD *)&v104 = 0;
    }
    llvm::MachineInstr::addOperand(v63, v64, (const llvm::MachineOperand *)v103);
    v57 = 0;
    v56 = 1;
  }
  while ((v58 & 1) != 0);
  v103[1] = 0;
  v104 = 0uLL;
  v103[0] = (void *)0x201000000;
  llvm::MachineInstr::addOperand(v102, v101, (const llvm::MachineOperand *)v103);
  LODWORD(v103[0]) = 1;
  v103[1] = 0;
  *(_QWORD *)&v104 = 0;
  llvm::MachineInstr::addOperand(v102, v101, (const llvm::MachineOperand *)v103);
  *(_OWORD *)v103 = 0u;
  v104 = 0u;
  llvm::MachineInstr::addOperand(v102, v101, (const llvm::MachineOperand *)v103);
  v67 = a1[4];
  v68 = *(_QWORD *)(v67 + 640);
  v69 = *(unint64_t **)(v67 + 648);
  v70 = *(_QWORD *)(a1[12] + 8);
  v71 = *(llvm::MachineFunction **)(v68 + 32);
  v72 = (unsigned __int8 *)a1[9];
  v105 = v72;
  if (v72)
    llvm::MetadataTracking::track((uint64_t)&v105, v72, 2);
  v73 = *((_QWORD *)v71 + 28);
  if (v73)
    *((_QWORD *)v71 + 28) = *(_QWORD *)v73;
  else
    v73 = sub_1C484358C((uint64_t)v71 + 128, 72, 3);
  v103[0] = v105;
  if (v105)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v105, v105, (uint64_t)v103);
    v105 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v73, v71, v70 + 555648, (unsigned __int8 **)v103, 0);
  if (v103[0])
    llvm::MetadataTracking::untrack((uint64_t)v103, (unsigned __int8 *)v103[0]);
  if (v105)
    llvm::MetadataTracking::untrack((uint64_t)&v105, v105);
  v74 = *(_QWORD *)(v68 + 40);
  *(_QWORD *)(v73 + 24) = v74;
  v75 = *(_QWORD *)(v74 + 32);
  v76 = *(unsigned int *)(v73 + 40);
  if ((_DWORD)v76)
  {
    v88 = *(_QWORD *)(v73 + 32);
    v89 = *(_QWORD *)(v75 + 40);
    v90 = 32 * v76;
    do
    {
      if (!*(_BYTE *)v88)
      {
        v91 = *(unsigned int *)(v88 + 4);
        if ((int)v91 >= 0)
          v92 = (uint64_t *)(*(_QWORD *)(v89 + 272) + 8 * v91);
        else
          v92 = (uint64_t *)(*(_QWORD *)(v89 + 24) + 16 * (v91 & 0x7FFFFFFF) + 8);
        v93 = *v92;
        if (*v92)
        {
          v94 = *(_QWORD *)(v93 + 16);
          *(_QWORD *)(v93 + 16) = v88;
          *(_QWORD *)(v88 + 16) = v94;
          if ((*(_BYTE *)(v88 + 3) & 1) != 0)
          {
            *(_QWORD *)(v88 + 24) = v93;
          }
          else
          {
            *(_QWORD *)(v88 + 24) = 0;
            v92 = (uint64_t *)(v94 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v88 + 16) = v88;
          *(_QWORD *)(v88 + 24) = 0;
        }
        *v92 = v88;
      }
      v88 += 32;
      v90 -= 32;
    }
    while (v90);
  }
  v77 = *(_QWORD *)(v75 + 728);
  if (v77)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v77 + 24))(v77, v73);
  v78 = *v69 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v73 = v78 | *(_QWORD *)v73 & 7;
  *(_QWORD *)(v73 + 8) = v69;
  *(_QWORD *)(v78 + 8) = v73;
  *v69 = *v69 & 7 | v73;
  v103[1] = 0;
  *(_QWORD *)&v104 = v99;
  LODWORD(v103[0]) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v73, v71, (const llvm::MachineOperand *)v103);
  LODWORD(v103[0]) = 1;
  v103[1] = 0;
  *(_QWORD *)&v104 = v96;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v73, v71, (const llvm::MachineOperand *)v103);
  v79 = a1[12];
  v80 = *(_QWORD *)(a1[4] + 640);
  v103[0] = &v104;
  v103[1] = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v79
                                                                                                  + 272))(v79, v80, v98, 0, &v104, 0, v97 + 48, 0);
  if (v103[0] != &v104)
    free(v103[0]);
  llvm::MachineBasicBlock::addSuccessor(*(_QWORD **)(a1[4] + 640), v98, -1);
  llvm::MachineBasicBlock::addSuccessor(*(_QWORD **)(a1[4] + 640), v99, -1);
  return 1;
}

uint64_t sub_1C47BA714(uint64_t *a1, uint64_t a2)
{
  llvm::Type *v2;
  int v3;
  _BOOL4 v5;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  _BOOL8 v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  llvm::MachineFunction *v33;
  llvm::MachineFunction *v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  llvm::MachineFunction *v42;
  BOOL v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  int v48;
  int v49;
  BOOL v50;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  int v55;
  BOOL v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  uint64_t v64;
  llvm::MachineFunction *v65;
  llvm::MachineFunction *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  llvm::MachineInstr *v80;
  llvm::MachineFunction *v81;
  int v82;
  llvm::MachineInstr *v83;
  llvm::MachineFunction *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  llvm::MachineFunction *v105;
  llvm::MachineInstr *v106;
  __int128 v107;
  __int128 v108;
  _BYTE *v109;
  llvm::Type *v110;
  uint64_t v111;
  uint64_t v112;
  llvm::Type *v113[2];
  llvm::MachineFunction *v114;
  llvm::MachineInstr *v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v2 = *(llvm::Type **)a2;
  v3 = *(_DWORD *)(*(_QWORD *)a2 + 8) >> 8;
  v5 = v3 == 16 || v3 == 32;
  if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 13 && v5)
  {
    v9 = sub_1C5CC1648(a1, a2);
    if (v9)
    {
      v10 = v9;
      v11 = *(unsigned __int8 *)(a2 + 16) - 28;
      v12 = *(_DWORD *)(a2 + 20);
      if ((v12 & 0x40000000) != 0)
        v13 = *(_QWORD *)(a2 - 8);
      else
        v13 = a2 - 32 * (v12 & 0x7FFFFFF);
      v14 = *(_QWORD *)(v13 + 32);
      if (*(_BYTE *)(v14 + 16) == 16)
        v15 = v14;
      else
        v15 = 0;
      if (*(_BYTE *)(a1[32] + 281))
        v16 = v11 == 25;
      else
        v16 = 0;
      if (v16 && v15 != 0)
      {
        v18 = (_QWORD *)(v15 + 24);
        if (*(_DWORD *)(v15 + 32) >= 0x41u)
          v18 = (_QWORD *)*v18;
        if (*v18 <= 4uLL)
        {
          v113[0] = v2;
          v109 = (_BYTE *)a2;
          LODWORD(v105) = 0;
          v19 = sub_1C47AD824(a1, (uint64_t *)&v109, (const llvm::APInt *)&v105, v113, *(_QWORD *)(a2 + 40), 1, 1);
          if (v19)
          {
            v20 = v19;
            v21 = *((_DWORD *)v113[0] + 2) >> 8;
            v22 = v21 == 64;
            v23 = v21 == 32 && *((_DWORD *)v113[0] + 2) == 13;
            v24 = 2;
            if (*((_DWORD *)v113[0] + 2) == 13 && v22)
              v23 = 2;
            v25 = *((_DWORD *)v2 + 2) >> 8;
            v26 = v25 == 64;
            v27 = v25 == 32 && *((_DWORD *)v2 + 2) == 13;
            if (*((_DWORD *)v2 + 2) != 13 || !v26)
              v24 = v27;
            v28 = word_1C640FE16[2 * v24 + v23];
            v29 = a1[4];
            v30 = *(_QWORD *)(v29 + 640);
            v31 = *(unint64_t **)(v29 + 648);
            v32 = *(_QWORD *)(a1[12] + 8);
            v33 = *(llvm::MachineFunction **)(v30 + 32);
            v34 = (llvm::MachineFunction *)a1[9];
            v114 = v34;
            if (v34)
              llvm::MetadataTracking::track((uint64_t)&v114, (unsigned __int8 *)v34, 2);
            v35 = v32 + 48 * v28;
            v36 = *((_QWORD *)v33 + 28);
            if (v36)
              *((_QWORD *)v33 + 28) = *(_QWORD *)v36;
            else
              v36 = sub_1C484358C((uint64_t)v33 + 128, 72, 3);
            *(_QWORD *)&v107 = v114;
            if (v114)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v114, (unsigned __int8 *)v114, (uint64_t)&v107);
              v114 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v36, v33, v35, (unsigned __int8 **)&v107, 0);
            if ((_QWORD)v107)
              llvm::MetadataTracking::untrack((uint64_t)&v107, (unsigned __int8 *)v107);
            if (v114)
              llvm::MetadataTracking::untrack((uint64_t)&v114, (unsigned __int8 *)v114);
            v85 = *(_QWORD *)(v30 + 40);
            *(_QWORD *)(v36 + 24) = v85;
            v86 = *(_QWORD *)(v85 + 32);
            v87 = *(unsigned int *)(v36 + 40);
            if ((_DWORD)v87)
            {
              v97 = *(_QWORD *)(v36 + 32);
              v98 = *(_QWORD *)(v86 + 40);
              v99 = 32 * v87;
              do
              {
                if (!*(_BYTE *)v97)
                {
                  v100 = *(unsigned int *)(v97 + 4);
                  if ((int)v100 >= 0)
                    v101 = (uint64_t *)(*(_QWORD *)(v98 + 272) + 8 * v100);
                  else
                    v101 = (uint64_t *)(*(_QWORD *)(v98 + 24) + 16 * (v100 & 0x7FFFFFFF) + 8);
                  v102 = *v101;
                  if (*v101)
                  {
                    v103 = *(_QWORD *)(v102 + 16);
                    *(_QWORD *)(v102 + 16) = v97;
                    *(_QWORD *)(v97 + 16) = v103;
                    if ((*(_BYTE *)(v97 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v97 + 24) = v102;
                    }
                    else
                    {
                      *(_QWORD *)(v97 + 24) = 0;
                      v101 = (uint64_t *)(v103 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v97 + 16) = v97;
                    *(_QWORD *)(v97 + 24) = 0;
                  }
                  *v101 = v97;
                }
                v97 += 32;
                v99 -= 32;
              }
              while (v99);
            }
            v88 = *(_QWORD *)(v86 + 728);
            if (v88)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v88 + 24))(v88, v36);
            v89 = *v31 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v36 = v89 | *(_QWORD *)v36 & 7;
            *(_QWORD *)(v36 + 8) = v31;
            *(_QWORD *)(v89 + 8) = v36;
            *v31 = *v31 & 7 | v36;
            *((_QWORD *)&v107 + 1) = 0;
            v108 = 0uLL;
            LODWORD(v107) = 0x1000000;
            DWORD1(v107) = v10;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v107);
            v46 = 1;
            LODWORD(v107) = 1;
            *((_QWORD *)&v107 + 1) = 0;
            *(_QWORD *)&v108 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v107);
            LODWORD(v107) = 1;
            *((_QWORD *)&v107 + 1) = 0;
            *(_QWORD *)&v108 = 0x100000000;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v107);
            v114 = v33;
            v115 = (llvm::MachineInstr *)v36;
            if ((sub_1C47ADDC8((uint64_t)a1, v109, 0, &v114, 0) & 1) == 0)
            {
              *((_QWORD *)&v107 + 1) = 0;
              v108 = 0uLL;
              LODWORD(v107) = 0;
              DWORD1(v107) = v20;
              llvm::MachineInstr::addOperand(v115, v114, (const llvm::MachineOperand *)&v107);
            }
            LODWORD(v107) = 1;
            *((_QWORD *)&v107 + 1) = 0;
            *(_QWORD *)&v108 = v105;
            llvm::MachineInstr::addOperand(v115, v114, (const llvm::MachineOperand *)&v107);
            LODWORD(v107) = 1;
            *((_QWORD *)&v107 + 1) = 0;
            *(_QWORD *)&v108 = 0;
            llvm::MachineInstr::addOperand(v115, v114, (const llvm::MachineOperand *)&v107);
            v84 = v114;
            v83 = v115;
LABEL_125:
            v107 = 0u;
            v108 = 0u;
            llvm::MachineInstr::addOperand(v83, v84, (const llvm::MachineOperand *)&v107);
            return v46;
          }
        }
      }
      v104 = v11;
      v37 = 0;
      v38 = 0;
      v114 = 0;
      v115 = 0;
      v113[0] = 0;
      v113[1] = 0;
      v111 = 0;
      v112 = 0;
      v109 = v2;
      v110 = v2;
      do
      {
        v39 = v37;
        v40 = *(_DWORD *)(a2 + 20);
        if ((v40 & 0x40000000) != 0)
          v41 = *(_QWORD *)(a2 - 8);
        else
          v41 = a2 - 32 * (v40 & 0x7FFFFFF);
        v42 = *(llvm::MachineFunction **)(v41 + 32 * v38);
        if (v42)
          v43 = *((_BYTE *)v42 + 16) == 16;
        else
          v43 = 0;
        if (v43)
        {
          *(&v114 + v38) = v42;
        }
        else
        {
          v44 = (uint64_t *)&v113[v38];
          *v44 = (uint64_t)v42;
          v45 = sub_1C47AD824(a1, v44, (const llvm::APInt *)((char *)&v111 + 4 * v38), (llvm::Type **)&(&v109)[v38], *(_QWORD *)(a2 + 40), 0, 0);
          *((_DWORD *)&v113[-1] + v38) = v45;
          if (!v45)
            return 0;
        }
        v37 = 1;
        v38 = 1;
      }
      while ((v39 & 1) == 0);
      if (!v114 || !v115)
      {
        v48 = 2 * (v104 == 27);
        if (v104 == 25)
          v48 = 1;
        v49 = *((_DWORD *)v2 + 2) >> 8;
        v50 = v49 == 64;
        v51 = v49 == 32 && *((_DWORD *)v2 + 2) == 13;
        if (*((_DWORD *)v2 + 2) == 13 && v50)
          v51 = 2;
        v52 = *((_DWORD *)v109 + 2) >> 8;
        v53 = v52 == 64;
        v54 = v52 == 32 && *((_DWORD *)v109 + 2) == 13;
        if (*((_DWORD *)v109 + 2) == 13 && v53)
          v54 = 2;
        v55 = *((_DWORD *)v110 + 2) >> 8;
        v56 = v55 == 64;
        v57 = v55 == 32 && *((_DWORD *)v110 + 2) == 13;
        if (*((_DWORD *)v110 + 2) == 13 && v56)
          v57 = 2;
        if (v114)
          v58 = 2;
        else
          v58 = v54;
        if (v115)
          v59 = 2;
        else
          v59 = v57;
        v60 = word_1C640FE1E[18 * v48 + 9 * v51 + 3 * v58 + v59];
        v61 = a1[4];
        v62 = *(_QWORD *)(v61 + 640);
        v63 = *(unint64_t **)(v61 + 648);
        v64 = *(_QWORD *)(a1[12] + 8);
        v65 = *(llvm::MachineFunction **)(v62 + 32);
        v66 = (llvm::MachineFunction *)a1[9];
        v105 = v66;
        if (v66)
          llvm::MetadataTracking::track((uint64_t)&v105, (unsigned __int8 *)v66, 2);
        v67 = v64 + 48 * v60;
        v68 = *((_QWORD *)v65 + 28);
        if (v68)
          *((_QWORD *)v65 + 28) = *(_QWORD *)v68;
        else
          v68 = sub_1C484358C((uint64_t)v65 + 128, 72, 3);
        *(_QWORD *)&v107 = v105;
        if (v105)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v105, (unsigned __int8 *)v105, (uint64_t)&v107);
          v105 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v68, v65, v67, (unsigned __int8 **)&v107, 0);
        if ((_QWORD)v107)
          llvm::MetadataTracking::untrack((uint64_t)&v107, (unsigned __int8 *)v107);
        if (v105)
          llvm::MetadataTracking::untrack((uint64_t)&v105, (unsigned __int8 *)v105);
        v69 = *(_QWORD *)(v62 + 40);
        *(_QWORD *)(v68 + 24) = v69;
        v70 = *(_QWORD *)(v69 + 32);
        v71 = *(unsigned int *)(v68 + 40);
        if ((_DWORD)v71)
        {
          v90 = *(_QWORD *)(v68 + 32);
          v91 = *(_QWORD *)(v70 + 40);
          v92 = 32 * v71;
          do
          {
            if (!*(_BYTE *)v90)
            {
              v93 = *(unsigned int *)(v90 + 4);
              if ((int)v93 >= 0)
                v94 = (uint64_t *)(*(_QWORD *)(v91 + 272) + 8 * v93);
              else
                v94 = (uint64_t *)(*(_QWORD *)(v91 + 24) + 16 * (v93 & 0x7FFFFFFF) + 8);
              v95 = *v94;
              if (*v94)
              {
                v96 = *(_QWORD *)(v95 + 16);
                *(_QWORD *)(v95 + 16) = v90;
                *(_QWORD *)(v90 + 16) = v96;
                if ((*(_BYTE *)(v90 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v90 + 24) = v95;
                }
                else
                {
                  *(_QWORD *)(v90 + 24) = 0;
                  v94 = (uint64_t *)(v96 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v90 + 16) = v90;
                *(_QWORD *)(v90 + 24) = 0;
              }
              *v94 = v90;
            }
            v90 += 32;
            v92 -= 32;
          }
          while (v92);
        }
        v72 = *(_QWORD *)(v70 + 728);
        if (v72)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v72 + 24))(v72, v68);
        v73 = *v63 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v68 = v73 | *(_QWORD *)v68 & 7;
        *(_QWORD *)(v68 + 8) = v63;
        *(_QWORD *)(v73 + 8) = v68;
        *v63 = *v63 & 7 | v68;
        *((_QWORD *)&v107 + 1) = 0;
        v108 = 0uLL;
        LODWORD(v107) = 0x1000000;
        DWORD1(v107) = v10;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v65, (const llvm::MachineOperand *)&v107);
        LODWORD(v107) = 1;
        *((_QWORD *)&v107 + 1) = 0;
        *(_QWORD *)&v108 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v65, (const llvm::MachineOperand *)&v107);
        v105 = v65;
        v106 = (llvm::MachineInstr *)v68;
        if (v104 != 27)
        {
          LODWORD(v107) = 1;
          *((_QWORD *)&v107 + 1) = 0;
          *(_QWORD *)&v108 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v65, (const llvm::MachineOperand *)&v107);
        }
        v74 = 0;
        v75 = 0;
        do
        {
          v76 = v74;
          v77 = (uint64_t)*(&v114 + v75);
          if (v77)
          {
            v78 = (unint64_t *)(v77 + 24);
            if (*(_DWORD *)(v77 + 32) >= 0x41u)
              v78 = (unint64_t *)*v78;
            v79 = *v78;
            if (v79 < 0x10000)
              v79 |= 0x100000000uLL;
            v81 = v105;
            v80 = v106;
            LODWORD(v107) = 1;
            *((_QWORD *)&v107 + 1) = 0;
            *(_QWORD *)&v108 = v79;
          }
          else
          {
            if ((sub_1C47ADDC8((uint64_t)a1, v113[v75], 0, &v105, 0) & 1) == 0)
            {
              v82 = *((_DWORD *)&v113[-1] + v75);
              *((_QWORD *)&v107 + 1) = 0;
              LODWORD(v107) = 0;
              DWORD1(v107) = v82;
              v108 = 0uLL;
              llvm::MachineInstr::addOperand(v106, v105, (const llvm::MachineOperand *)&v107);
            }
            v81 = v105;
            v80 = v106;
            LODWORD(v107) = 1;
            *((_QWORD *)&v107 + 1) = 0;
            *(_QWORD *)&v108 = 0;
          }
          llvm::MachineInstr::addOperand(v80, v81, (const llvm::MachineOperand *)&v107);
          v74 = 1;
          v75 = 1;
        }
        while ((v76 & 1) == 0);
        if (v104 != 27)
        {
          LODWORD(v107) = 1;
          *((_QWORD *)&v107 + 1) = 0;
          *(_QWORD *)&v108 = 0;
          llvm::MachineInstr::addOperand(v106, v105, (const llvm::MachineOperand *)&v107);
        }
        v46 = 1;
        LODWORD(v107) = 1;
        *((_QWORD *)&v107 + 1) = 0;
        *(_QWORD *)&v108 = 0;
        llvm::MachineInstr::addOperand(v106, v105, (const llvm::MachineOperand *)&v107);
        v84 = v105;
        v83 = v106;
        goto LABEL_125;
      }
    }
  }
  return 0;
}

uint64_t sub_1C47BAFBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  int v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  uint64_t v25;
  int IncompleteVirtualRegister;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  llvm::MachineFunction *v33;
  llvm::MachineFunction *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  unsigned __int16 *v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  llvm::MachineFunction *v66;
  llvm::MachineFunction *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  llvm::MachineFunction *v73;
  llvm::MachineFunction *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  char v83;
  char v84;
  int v85;
  char v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  llvm::MachineInstr *v90;
  llvm::MachineFunction *v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  llvm::MachineFunction *v115;
  llvm::MachineFunction *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  char v125;
  char v126;
  int v127;
  char v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  llvm::MachineInstr *v132;
  llvm::MachineFunction *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  uint64_t v138;
  llvm::MachineFunction *v139;
  llvm::MachineFunction *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  int v185;
  int v186;
  uint64_t *v187;
  unsigned int v188;
  llvm::MachineFunction *v189;
  llvm::MachineInstr *v190;
  llvm::MachineFunction *v191;
  llvm::MachineInstr *v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD v197[2];
  uint64_t v198;
  _QWORD v199[2];
  _QWORD v200[2];
  _QWORD v201[4];

  v2 = 0;
  v201[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a2;
  if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 13
    && (vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqq_s32(vdupq_n_s32(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8), (int32x4_t)xmmword_1C640F850), (int8x16_t)xmmword_1C640F7A0)) & 0xF) != 0)
  {
    v6 = *(unsigned __int8 *)(a1[32] + 280);
    v2 = sub_1C5CC1648(a1, a2);
    if ((_DWORD)v2)
    {
      v7 = *(_DWORD *)(a2 + 20);
      if ((v7 & 0x40000000) != 0)
        v8 = *(_QWORD **)(a2 - 8);
      else
        v8 = (_QWORD *)(a2 - 32 * (v7 & 0x7FFFFFF));
      v9 = *(unsigned __int8 *)(*v8 + 16) - 67 < 2;
      v10 = *(unsigned __int8 *)(v8[4] + 16);
      v11 = v10 == 67 || v10 == 68;
      if (v9 == v11 || *(_DWORD *)(v3 + 8) != 8205)
      {
        if ((sub_1C47AE80C((uint64_t)a1, (unsigned __int8 *)a2) & 1) != 0)
          return 1;
        if (*(_DWORD *)(v3 + 8) != 8205)
          return 0;
      }
      v13 = *(_DWORD *)(a2 + 20);
      v186 = v6;
      v187 = a1;
      v185 = v2;
      v14 = (v13 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v13 & 0x7FFFFFF));
      v15 = 0;
      v188 = 0;
      v16 = *v14;
      v17 = v14[4];
      v201[0] = v16;
      v201[1] = v17;
      v200[0] = 0;
      v200[1] = 0;
      v199[0] = 0;
      v199[1] = 0;
      v197[1] = v3;
      v198 = 0;
      v196 = 0;
      v197[0] = v3;
      v18 = 1;
      v195 = 0;
      do
      {
        v19 = v18;
        v20 = v201[v15];
        if (v20)
          v21 = *(_BYTE *)(v20 + 16) == 16;
        else
          v21 = 0;
        if (v21)
        {
          v188 |= 1 << v15;
          v200[v15] = v20;
        }
        else
        {
          v22 = &v199[v15];
          *v22 = v20;
          v23 = sub_1C47AD824(v187, v22, (const llvm::APInt *)((char *)&v197[-1] + 4 * v15), (llvm::Type **)&v197[v15], *(_QWORD *)(a2 + 40), 1, 0);
          *((_DWORD *)&v199[-1] + v15) = v23;
          if (!v23)
            return 0;
          *((_DWORD *)&v195 + v15) = sub_1C6126FBC((uint64_t)v187, v23);
        }
        v18 = 0;
        v15 = 1;
      }
      while ((v19 & 1) != 0);
      if (v188 > 2)
        return 0;
      v25 = v187[6];
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v25, "", 0);
      *(_QWORD *)(*(_QWORD *)(v25 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7F984F0;
      v27 = *(_QWORD *)(v25 + 8);
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
      v28 = word_1C640FE8A[3 * v6 + v188];
      v29 = v187[4];
      v30 = *(_QWORD *)(v29 + 640);
      v31 = *(unint64_t **)(v29 + 648);
      v32 = *(_QWORD *)(v187[12] + 8);
      v33 = *(llvm::MachineFunction **)(v30 + 32);
      v34 = (llvm::MachineFunction *)v187[9];
      v191 = v34;
      if (v34)
        llvm::MetadataTracking::track((uint64_t)&v191, (unsigned __int8 *)v34, 2);
      v35 = *((_QWORD *)v33 + 28);
      if (v35)
        *((_QWORD *)v33 + 28) = *(_QWORD *)v35;
      else
        v35 = sub_1C484358C((uint64_t)v33 + 128, 72, 3);
      *(_QWORD *)&v193 = v191;
      if (v191)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v191, (unsigned __int8 *)v191, (uint64_t)&v193);
        v191 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v35, v33, v32 + 48 * v28, (unsigned __int8 **)&v193, 0);
      if ((_QWORD)v193)
        llvm::MetadataTracking::untrack((uint64_t)&v193, (unsigned __int8 *)v193);
      if (v191)
        llvm::MetadataTracking::untrack((uint64_t)&v191, (unsigned __int8 *)v191);
      v36 = *(_QWORD *)(v30 + 40);
      *(_QWORD *)(v35 + 24) = v36;
      v37 = *(_QWORD *)(v36 + 32);
      v38 = *(unsigned int *)(v35 + 40);
      if ((_DWORD)v38)
      {
        v148 = *(_QWORD *)(v35 + 32);
        v149 = *(_QWORD *)(v37 + 40);
        v150 = 32 * v38;
        do
        {
          if (!*(_BYTE *)v148)
          {
            v151 = *(unsigned int *)(v148 + 4);
            if ((int)v151 >= 0)
              v152 = (uint64_t *)(*(_QWORD *)(v149 + 272) + 8 * v151);
            else
              v152 = (uint64_t *)(*(_QWORD *)(v149 + 24) + 16 * (v151 & 0x7FFFFFFF) + 8);
            v153 = *v152;
            if (*v152)
            {
              v154 = *(_QWORD *)(v153 + 16);
              *(_QWORD *)(v153 + 16) = v148;
              *(_QWORD *)(v148 + 16) = v154;
              if ((*(_BYTE *)(v148 + 3) & 1) != 0)
              {
                *(_QWORD *)(v148 + 24) = v153;
              }
              else
              {
                *(_QWORD *)(v148 + 24) = 0;
                v152 = (uint64_t *)(v154 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v148 + 16) = v148;
              *(_QWORD *)(v148 + 24) = 0;
            }
            *v152 = v148;
          }
          v148 += 32;
          v150 -= 32;
        }
        while (v150);
      }
      v39 = *(_QWORD *)(v37 + 728);
      if (v39)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 24))(v39, v35);
      v40 = *v31 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v35 = v40 | *(_QWORD *)v35 & 7;
      *(_QWORD *)(v35 + 8) = v31;
      *(_QWORD *)(v40 + 8) = v35;
      *v31 = *v31 & 7 | v35;
      *((_QWORD *)&v193 + 1) = 0;
      v194 = 0uLL;
      v183 = IncompleteVirtualRegister;
      LODWORD(v193) = 0x1000000;
      DWORD1(v193) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v193);
      v191 = v33;
      v192 = (llvm::MachineInstr *)v35;
      LODWORD(v193) = 1;
      *((_QWORD *)&v193 + 1) = 0;
      *(_QWORD *)&v194 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v193);
      v41 = 0;
      v42 = 1;
      v43 = v188;
      do
      {
        v44 = v42;
        if (((v43 >> v41) & 1) != 0)
        {
          v45 = v200[v41];
          v46 = (unsigned __int16 *)(v45 + 24);
          if (*(_DWORD *)(v45 + 32) >= 0x41u)
            v46 = *(unsigned __int16 **)v46;
          v47 = *v46 | 0x100000000;
          LODWORD(v193) = 1;
          *((_QWORD *)&v193 + 1) = 0;
          *(_QWORD *)&v194 = v47;
          llvm::MachineInstr::addOperand(v192, v191, (const llvm::MachineOperand *)&v193);
        }
        else
        {
          v48 = *((_DWORD *)&v195 + v41);
          if ((sub_1C47ADDC8((uint64_t)v187, (_BYTE *)v199[v41], 0, &v191, v48) & 1) == 0)
          {
            v49 = *((_DWORD *)&v199[-1] + v41);
            *((_QWORD *)&v193 + 1) = 0;
            v194 = 0uLL;
            LODWORD(v193) = (v48 & 0xFFF) << 8;
            DWORD1(v193) = v49;
            llvm::MachineInstr::addOperand(v192, v191, (const llvm::MachineOperand *)&v193);
          }
          v50 = *((unsigned int *)&v197[-1] + v41);
          LODWORD(v193) = 1;
          *((_QWORD *)&v193 + 1) = 0;
          *(_QWORD *)&v194 = v50;
          llvm::MachineInstr::addOperand(v192, v191, (const llvm::MachineOperand *)&v193);
          v43 = v188;
        }
        v42 = 0;
        v41 = 1;
      }
      while ((v44 & 1) != 0);
      LODWORD(v193) = 1;
      *((_QWORD *)&v193 + 1) = 0;
      *(_QWORD *)&v194 = 0;
      llvm::MachineInstr::addOperand(v192, v191, (const llvm::MachineOperand *)&v193);
      v193 = 0u;
      v194 = 0u;
      llvm::MachineInstr::addOperand(v192, v191, (const llvm::MachineOperand *)&v193);
      v51 = v187;
      v52 = v187[6];
      v184 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v52, "", 0);
      *(_QWORD *)(*(_QWORD *)(v52 + 24) + 16 * (v184 & 0x7FFFFFFF)) = &off_1E7F982A8;
      v53 = *(_QWORD *)(v52 + 8);
      if (v53)
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
      v54 = 0;
      v55 = 1;
      do
      {
        v56 = v55;
        if (((v43 >> v54) & 1) != 0)
        {
          v57 = v200[v54];
          v58 = (unint64_t *)(v57 + 24);
          if (*(_DWORD *)(v57 + 32) >= 0x41u)
            v58 = (unint64_t *)*v58;
          v59 = *v58;
          if ((v56 & 1) != 0)
            v60 = 4294901760;
          else
            v60 = 0xFFFFLL;
          if ((v59 & v60) == 0)
            goto LABEL_75;
        }
        else
        {
          if ((v55 & 1) == 0)
            break;
          if (*(_DWORD *)(v197[0] + 8) == 4109)
          {
LABEL_75:
            v69 = v187[4];
            v70 = *(_QWORD *)(v69 + 640);
            v71 = *(unint64_t **)(v69 + 648);
            v72 = *(_QWORD *)(v187[12] + 8);
            v73 = *(llvm::MachineFunction **)(v70 + 32);
            v74 = (llvm::MachineFunction *)v187[9];
            v189 = v74;
            if (v74)
              llvm::MetadataTracking::track((uint64_t)&v189, (unsigned __int8 *)v74, 2);
            v75 = *((_QWORD *)v73 + 28);
            if (v75)
              *((_QWORD *)v73 + 28) = *(_QWORD *)v75;
            else
              v75 = sub_1C484358C((uint64_t)v73 + 128, 72, 3);
            *(_QWORD *)&v193 = v189;
            if (v189)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v189, (unsigned __int8 *)v189, (uint64_t)&v193);
              v189 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v75, v73, v72 + 912, (unsigned __int8 **)&v193, 0);
            if ((_QWORD)v193)
              llvm::MetadataTracking::untrack((uint64_t)&v193, (unsigned __int8 *)v193);
            if (v189)
              llvm::MetadataTracking::untrack((uint64_t)&v189, (unsigned __int8 *)v189);
            v94 = *(_QWORD *)(v70 + 40);
            *(_QWORD *)(v75 + 24) = v94;
            v95 = *(_QWORD *)(v94 + 32);
            v96 = *(unsigned int *)(v75 + 40);
            if ((_DWORD)v96)
            {
              v176 = *(_QWORD *)(v75 + 32);
              v177 = *(_QWORD *)(v95 + 40);
              v178 = 32 * v96;
              v51 = v187;
              v43 = v188;
              do
              {
                if (!*(_BYTE *)v176)
                {
                  v179 = *(unsigned int *)(v176 + 4);
                  if ((int)v179 >= 0)
                    v180 = (uint64_t *)(*(_QWORD *)(v177 + 272) + 8 * v179);
                  else
                    v180 = (uint64_t *)(*(_QWORD *)(v177 + 24) + 16 * (v179 & 0x7FFFFFFF) + 8);
                  v181 = *v180;
                  if (*v180)
                  {
                    v182 = *(_QWORD *)(v181 + 16);
                    *(_QWORD *)(v181 + 16) = v176;
                    *(_QWORD *)(v176 + 16) = v182;
                    if ((*(_BYTE *)(v176 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v176 + 24) = v181;
                    }
                    else
                    {
                      *(_QWORD *)(v176 + 24) = 0;
                      v180 = (uint64_t *)(v182 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v176 + 16) = v176;
                    *(_QWORD *)(v176 + 24) = 0;
                  }
                  *v180 = v176;
                }
                v176 += 32;
                v178 -= 32;
              }
              while (v178);
            }
            v97 = *(_QWORD *)(v95 + 728);
            if (v97)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v97 + 24))(v97, v75);
            v98 = *v71 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v75 = v98 | *(_QWORD *)v75 & 7;
            *(_QWORD *)(v75 + 8) = v71;
            *(_QWORD *)(v98 + 8) = v75;
            *v71 = *v71 & 7 | v75;
            *((_QWORD *)&v193 + 1) = 0;
            v194 = 0uLL;
            LODWORD(v193) = 0x1000000;
            DWORD1(v193) = v184;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v73, (const llvm::MachineOperand *)&v193);
            *((_QWORD *)&v193 + 1) = 0;
            v194 = 0uLL;
            v93 = v183;
            LODWORD(v193) = 512;
            DWORD1(v193) = v183;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v73, (const llvm::MachineOperand *)&v193);
            goto LABEL_115;
          }
        }
        v55 = 0;
        v54 = 1;
      }
      while ((v56 & 1) != 0);
      v61 = word_1C640FE96[3 * v186 + v188];
      v62 = v187[4];
      v63 = *(_QWORD *)(v62 + 640);
      v64 = *(unint64_t **)(v62 + 648);
      v65 = *(_QWORD *)(v187[12] + 8);
      v66 = *(llvm::MachineFunction **)(v63 + 32);
      v67 = (llvm::MachineFunction *)v187[9];
      v189 = v67;
      if (v67)
        llvm::MetadataTracking::track((uint64_t)&v189, (unsigned __int8 *)v67, 2);
      v68 = *((_QWORD *)v66 + 28);
      if (v68)
        *((_QWORD *)v66 + 28) = *(_QWORD *)v68;
      else
        v68 = sub_1C484358C((uint64_t)v66 + 128, 72, 3);
      *(_QWORD *)&v193 = v189;
      if (v189)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v189, (unsigned __int8 *)v189, (uint64_t)&v193);
        v189 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v68, v66, v65 + 48 * v61, (unsigned __int8 **)&v193, 0);
      if ((_QWORD)v193)
        llvm::MetadataTracking::untrack((uint64_t)&v193, (unsigned __int8 *)v193);
      if (v189)
        llvm::MetadataTracking::untrack((uint64_t)&v189, (unsigned __int8 *)v189);
      v76 = *(_QWORD *)(v63 + 40);
      *(_QWORD *)(v68 + 24) = v76;
      v77 = *(_QWORD *)(v76 + 32);
      v78 = *(unsigned int *)(v68 + 40);
      if ((_DWORD)v78)
      {
        v162 = *(_QWORD *)(v68 + 32);
        v163 = *(_QWORD *)(v77 + 40);
        v164 = 32 * v78;
        do
        {
          if (!*(_BYTE *)v162)
          {
            v165 = *(unsigned int *)(v162 + 4);
            if ((int)v165 >= 0)
              v166 = (uint64_t *)(*(_QWORD *)(v163 + 272) + 8 * v165);
            else
              v166 = (uint64_t *)(*(_QWORD *)(v163 + 24) + 16 * (v165 & 0x7FFFFFFF) + 8);
            v167 = *v166;
            if (*v166)
            {
              v168 = *(_QWORD *)(v167 + 16);
              *(_QWORD *)(v167 + 16) = v162;
              *(_QWORD *)(v162 + 16) = v168;
              if ((*(_BYTE *)(v162 + 3) & 1) != 0)
              {
                *(_QWORD *)(v162 + 24) = v167;
              }
              else
              {
                *(_QWORD *)(v162 + 24) = 0;
                v166 = (uint64_t *)(v168 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v162 + 16) = v162;
              *(_QWORD *)(v162 + 24) = 0;
            }
            *v166 = v162;
          }
          v162 += 32;
          v164 -= 32;
        }
        while (v164);
      }
      v79 = *(_QWORD *)(v77 + 728);
      if (v79)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v79 + 24))(v79, v68);
      v80 = *v64 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v68 = v80 | *(_QWORD *)v68 & 7;
      *(_QWORD *)(v68 + 8) = v64;
      *(_QWORD *)(v80 + 8) = v68;
      *v64 = *v64 & 7 | v68;
      *((_QWORD *)&v193 + 1) = 0;
      v194 = 0uLL;
      LODWORD(v193) = 0x1000000;
      DWORD1(v193) = v184;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v66, (const llvm::MachineOperand *)&v193);
      v189 = v66;
      v190 = (llvm::MachineInstr *)v68;
      LODWORD(v193) = 1;
      *((_QWORD *)&v193 + 1) = 0;
      *(_QWORD *)&v194 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v66, (const llvm::MachineOperand *)&v193);
      v81 = 0;
      v82 = HIDWORD(v195);
      v83 = 1;
      do
      {
        v84 = v83;
        if ((v83 & 1) != 0)
          v85 = 2;
        else
          v85 = v82;
        if (((v188 >> v81) & 1) != 0)
        {
          v86 = 16;
          if ((v84 & 1) == 0)
            v86 = 0;
          v87 = v200[v81];
          v88 = (_QWORD *)(v87 + 24);
          if (*(_DWORD *)(v87 + 32) >= 0x41u)
            v88 = (_QWORD *)*v88;
          v89 = (unsigned __int16)(*v88 >> v86) | 0x100000000;
          v91 = v189;
          v90 = v190;
          LODWORD(v193) = 1;
          *((_QWORD *)&v193 + 1) = 0;
          *(_QWORD *)&v194 = v89;
        }
        else
        {
          if ((sub_1C47ADDC8((uint64_t)v187, (_BYTE *)v199[v81], 0, &v189, v85) & 1) == 0)
          {
            v92 = *((_DWORD *)&v199[-1] + v81);
            *((_QWORD *)&v193 + 1) = 0;
            v194 = 0uLL;
            LODWORD(v193) = (v85 & 0xFFF) << 8;
            DWORD1(v193) = v92;
            llvm::MachineInstr::addOperand(v190, v189, (const llvm::MachineOperand *)&v193);
          }
          v91 = v189;
          v90 = v190;
          LODWORD(v193) = 1;
          *((_QWORD *)&v193 + 1) = 0;
          *(_QWORD *)&v194 = 0;
        }
        llvm::MachineInstr::addOperand(v90, v91, (const llvm::MachineOperand *)&v193);
        v83 = 0;
        v81 = 1;
      }
      while ((v84 & 1) != 0);
      *((_QWORD *)&v193 + 1) = 0;
      v194 = 0uLL;
      v93 = v183;
      LODWORD(v193) = 512;
      DWORD1(v193) = v183;
      llvm::MachineInstr::addOperand(v190, v189, (const llvm::MachineOperand *)&v193);
      LODWORD(v193) = 1;
      *((_QWORD *)&v193 + 1) = 0;
      *(_QWORD *)&v194 = 0;
      llvm::MachineInstr::addOperand(v190, v189, (const llvm::MachineOperand *)&v193);
      LODWORD(v193) = 1;
      *((_QWORD *)&v193 + 1) = 0;
      *(_QWORD *)&v194 = 0;
      llvm::MachineInstr::addOperand(v190, v189, (const llvm::MachineOperand *)&v193);
      v193 = 0u;
      v194 = 0u;
      llvm::MachineInstr::addOperand(v190, v189, (const llvm::MachineOperand *)&v193);
      v51 = v187;
      v43 = v188;
LABEL_115:
      v99 = 0;
      v100 = 1;
      do
      {
        while (1)
        {
          v101 = v99;
          v102 = v100;
          if (((v43 >> v99) & 1) == 0)
            break;
          v103 = v200[v99];
          v104 = (unint64_t *)(v103 + 24);
          if (*(_DWORD *)(v103 + 32) >= 0x41u)
            v104 = (unint64_t *)*v104;
          v105 = *v104;
          if ((v102 & 1) != 0)
            v106 = 0xFFFFLL;
          else
            v106 = 4294901760;
          if ((v105 & v106) == 0)
            goto LABEL_127;
          v100 = 0;
          v99 = 1;
          if ((v102 & 1) == 0)
            goto LABEL_128;
        }
        v100 = 0;
        v99 = 1;
      }
      while ((v102 & 1) != 0);
      if (*(_DWORD *)(v197[v101] + 8) == 4109)
      {
LABEL_127:
        v107 = v184;
        goto LABEL_159;
      }
LABEL_128:
      v108 = v51[6];
      v107 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v108, "", 0);
      *(_QWORD *)(*(_QWORD *)(v108 + 24) + 16 * (v107 & 0x7FFFFFFF)) = &off_1E7F982A8;
      v109 = *(_QWORD *)(v108 + 8);
      if (v109)
        (*(void (**)(uint64_t))(*(_QWORD *)v109 + 24))(v109);
      v110 = word_1C640FE96[3 * v186 + v188];
      v111 = v51[4];
      v112 = *(_QWORD *)(v111 + 640);
      v113 = *(unint64_t **)(v111 + 648);
      v114 = *(_QWORD *)(v51[12] + 8);
      v115 = *(llvm::MachineFunction **)(v112 + 32);
      v116 = (llvm::MachineFunction *)v51[9];
      v189 = v116;
      if (v116)
        llvm::MetadataTracking::track((uint64_t)&v189, (unsigned __int8 *)v116, 2);
      v117 = *((_QWORD *)v115 + 28);
      if (v117)
        *((_QWORD *)v115 + 28) = *(_QWORD *)v117;
      else
        v117 = sub_1C484358C((uint64_t)v115 + 128, 72, 3);
      *(_QWORD *)&v193 = v189;
      if (v189)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v189, (unsigned __int8 *)v189, (uint64_t)&v193);
        v189 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v117, v115, v114 + 48 * v110, (unsigned __int8 **)&v193, 0);
      if ((_QWORD)v193)
        llvm::MetadataTracking::untrack((uint64_t)&v193, (unsigned __int8 *)v193);
      if (v189)
        llvm::MetadataTracking::untrack((uint64_t)&v189, (unsigned __int8 *)v189);
      v118 = *(_QWORD *)(v112 + 40);
      *(_QWORD *)(v117 + 24) = v118;
      v119 = *(_QWORD *)(v118 + 32);
      v120 = *(unsigned int *)(v117 + 40);
      if ((_DWORD)v120)
      {
        v169 = *(_QWORD *)(v117 + 32);
        v170 = *(_QWORD *)(v119 + 40);
        v171 = 32 * v120;
        do
        {
          if (!*(_BYTE *)v169)
          {
            v172 = *(unsigned int *)(v169 + 4);
            if ((int)v172 >= 0)
              v173 = (uint64_t *)(*(_QWORD *)(v170 + 272) + 8 * v172);
            else
              v173 = (uint64_t *)(*(_QWORD *)(v170 + 24) + 16 * (v172 & 0x7FFFFFFF) + 8);
            v174 = *v173;
            if (*v173)
            {
              v175 = *(_QWORD *)(v174 + 16);
              *(_QWORD *)(v174 + 16) = v169;
              *(_QWORD *)(v169 + 16) = v175;
              if ((*(_BYTE *)(v169 + 3) & 1) != 0)
              {
                *(_QWORD *)(v169 + 24) = v174;
              }
              else
              {
                *(_QWORD *)(v169 + 24) = 0;
                v173 = (uint64_t *)(v175 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v169 + 16) = v169;
              *(_QWORD *)(v169 + 24) = 0;
            }
            *v173 = v169;
          }
          v169 += 32;
          v171 -= 32;
        }
        while (v171);
      }
      v121 = *(_QWORD *)(v119 + 728);
      if (v121)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v121 + 24))(v121, v117);
      v122 = *v113 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v117 = v122 | *(_QWORD *)v117 & 7;
      *(_QWORD *)(v117 + 8) = v113;
      *(_QWORD *)(v122 + 8) = v117;
      *v113 = *v113 & 7 | v117;
      *((_QWORD *)&v193 + 1) = 0;
      v194 = 0uLL;
      LODWORD(v193) = 0x1000000;
      DWORD1(v193) = v107;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v117, v115, (const llvm::MachineOperand *)&v193);
      v189 = v115;
      v190 = (llvm::MachineInstr *)v117;
      LODWORD(v193) = 1;
      *((_QWORD *)&v193 + 1) = 0;
      *(_QWORD *)&v194 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v117, v115, (const llvm::MachineOperand *)&v193);
      v123 = 0;
      v124 = v195;
      v125 = 1;
      do
      {
        v126 = v125;
        if ((v125 & 1) != 0)
          v127 = v124;
        else
          v127 = 2;
        if (((v188 >> v123) & 1) != 0)
        {
          v128 = 16;
          if ((v126 & 1) != 0)
            v128 = 0;
          v129 = v200[v123];
          v130 = (_QWORD *)(v129 + 24);
          if (*(_DWORD *)(v129 + 32) >= 0x41u)
            v130 = (_QWORD *)*v130;
          v131 = (unsigned __int16)(*v130 >> v128) | 0x100000000;
          v133 = v189;
          v132 = v190;
          LODWORD(v193) = 1;
          *((_QWORD *)&v193 + 1) = 0;
          *(_QWORD *)&v194 = v131;
        }
        else
        {
          if ((sub_1C47ADDC8((uint64_t)v187, (_BYTE *)v199[v123], 0, &v189, v127) & 1) == 0)
          {
            v134 = *((_DWORD *)&v199[-1] + v123);
            *((_QWORD *)&v193 + 1) = 0;
            v194 = 0uLL;
            LODWORD(v193) = (v127 & 0xFFF) << 8;
            DWORD1(v193) = v134;
            llvm::MachineInstr::addOperand(v190, v189, (const llvm::MachineOperand *)&v193);
          }
          v133 = v189;
          v132 = v190;
          LODWORD(v193) = 1;
          *((_QWORD *)&v193 + 1) = 0;
          *(_QWORD *)&v194 = 0;
        }
        llvm::MachineInstr::addOperand(v132, v133, (const llvm::MachineOperand *)&v193);
        v125 = 0;
        v123 = 1;
      }
      while ((v126 & 1) != 0);
      *((_QWORD *)&v193 + 1) = 0;
      v194 = 0uLL;
      LODWORD(v193) = 0;
      DWORD1(v193) = v184;
      llvm::MachineInstr::addOperand(v190, v189, (const llvm::MachineOperand *)&v193);
      LODWORD(v193) = 1;
      *((_QWORD *)&v193 + 1) = 0;
      *(_QWORD *)&v194 = 0;
      llvm::MachineInstr::addOperand(v190, v189, (const llvm::MachineOperand *)&v193);
      LODWORD(v193) = 1;
      *((_QWORD *)&v193 + 1) = 0;
      *(_QWORD *)&v194 = 0;
      llvm::MachineInstr::addOperand(v190, v189, (const llvm::MachineOperand *)&v193);
      v193 = 0u;
      v194 = 0u;
      llvm::MachineInstr::addOperand(v190, v189, (const llvm::MachineOperand *)&v193);
      v51 = v187;
      v93 = v183;
LABEL_159:
      sub_1C6126FBC((uint64_t)v51, v185);
      v135 = v51[4];
      v136 = *(_QWORD *)(v135 + 640);
      v137 = *(unint64_t **)(v135 + 648);
      v138 = *(_QWORD *)(v51[12] + 8);
      v139 = *(llvm::MachineFunction **)(v136 + 32);
      v140 = (llvm::MachineFunction *)v51[9];
      v189 = v140;
      if (v140)
        llvm::MetadataTracking::track((uint64_t)&v189, (unsigned __int8 *)v140, 2);
      v141 = v138 + 864;
      v142 = *((_QWORD *)v139 + 28);
      if (v142)
        *((_QWORD *)v139 + 28) = *(_QWORD *)v142;
      else
        v142 = sub_1C484358C((uint64_t)v139 + 128, 72, 3);
      *(_QWORD *)&v193 = v189;
      if (v189)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v189, (unsigned __int8 *)v189, (uint64_t)&v193);
        v189 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v142, v139, v141, (unsigned __int8 **)&v193, 0);
      if ((_QWORD)v193)
        llvm::MetadataTracking::untrack((uint64_t)&v193, (unsigned __int8 *)v193);
      if (v189)
        llvm::MetadataTracking::untrack((uint64_t)&v189, (unsigned __int8 *)v189);
      v143 = *(_QWORD *)(v136 + 40);
      *(_QWORD *)(v142 + 24) = v143;
      v144 = *(_QWORD *)(v143 + 32);
      v145 = *(unsigned int *)(v142 + 40);
      if ((_DWORD)v145)
      {
        v155 = *(_QWORD *)(v142 + 32);
        v156 = *(_QWORD *)(v144 + 40);
        v157 = 32 * v145;
        do
        {
          if (!*(_BYTE *)v155)
          {
            v158 = *(unsigned int *)(v155 + 4);
            if ((int)v158 >= 0)
              v159 = (uint64_t *)(*(_QWORD *)(v156 + 272) + 8 * v158);
            else
              v159 = (uint64_t *)(*(_QWORD *)(v156 + 24) + 16 * (v158 & 0x7FFFFFFF) + 8);
            v160 = *v159;
            if (*v159)
            {
              v161 = *(_QWORD *)(v160 + 16);
              *(_QWORD *)(v160 + 16) = v155;
              *(_QWORD *)(v155 + 16) = v161;
              if ((*(_BYTE *)(v155 + 3) & 1) != 0)
              {
                *(_QWORD *)(v155 + 24) = v160;
              }
              else
              {
                *(_QWORD *)(v155 + 24) = 0;
                v159 = (uint64_t *)(v161 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v155 + 16) = v155;
              *(_QWORD *)(v155 + 24) = 0;
            }
            *v159 = v155;
            v93 = v183;
          }
          v155 += 32;
          v157 -= 32;
        }
        while (v157);
      }
      v146 = *(_QWORD *)(v144 + 728);
      if (v146)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v146 + 24))(v146, v142);
      v147 = *v137 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v142 = v147 | *(_QWORD *)v142 & 7;
      *(_QWORD *)(v142 + 8) = v137;
      *(_QWORD *)(v147 + 8) = v142;
      *v137 = *v137 & 7 | v142;
      *((_QWORD *)&v193 + 1) = 0;
      v194 = 0uLL;
      LODWORD(v193) = 0x1000000;
      DWORD1(v193) = v185;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v142, v139, (const llvm::MachineOperand *)&v193);
      *((_QWORD *)&v193 + 1) = 0;
      v194 = 0uLL;
      LODWORD(v193) = 256;
      DWORD1(v193) = v93;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v142, v139, (const llvm::MachineOperand *)&v193);
      v2 = 1;
      LODWORD(v193) = 1;
      *((_QWORD *)&v193 + 1) = 0;
      *(_QWORD *)&v194 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v142, v139, (const llvm::MachineOperand *)&v193);
      *((_QWORD *)&v193 + 1) = 0;
      v194 = 0uLL;
      LODWORD(v193) = 0;
      DWORD1(v193) = v107;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v142, v139, (const llvm::MachineOperand *)&v193);
      LODWORD(v193) = 1;
      *((_QWORD *)&v193 + 1) = 0;
      *(_QWORD *)&v194 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v142, v139, (const llvm::MachineOperand *)&v193);
    }
  }
  return v2;
}

uint64_t sub_1C47BC1BC(uint64_t a1, double a2)
{
  uint64_t v3;
  _QWORD v5[2];
  int v6;
  char v7;
  const llvm::APInt *v8;
  int v9;

  v9 = 64;
  v8 = *(const llvm::APInt **)&a2;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v5, &v8);
  v3 = v5[1];
  *(_QWORD *)(a1 + 8) = v5[0];
  *(_QWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a1 + 28) & 0xF0 | v7 & 0xF;
  return a1;
}

uint64_t **sub_1C47BC21C(uint64_t **a1, unint64_t *a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x28uLL);
    v8[4] = *a3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v6 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

void sub_1C47BC2F8(int a1, llvm::MachineFunction **this, int a3, int a4, int a5, int a6, int a7, unsigned int a8, unsigned __int8 a9, unsigned __int8 a10, char a11, uint64_t a12)
{
  llvm::MachineBasicBlock *FirstTerminator;
  _QWORD *v20;
  llvm::MachineBasicBlock *v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  unsigned __int8 *v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  llvm::MachineFunction *v32;
  uint64_t v33;
  unint64_t v34;
  llvm::MachineFunction *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::MachineFunction *v43;
  unint64_t v44;
  llvm::MachineFunction *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  llvm::MachineFunction *v51;
  unint64_t v52;
  llvm::MachineFunction *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  llvm::MachineFunction *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  llvm::MachineFunction *v64;
  uint64_t v65;
  unint64_t v66;
  llvm::MachineFunction *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  llvm::MachineFunction *v73;
  unint64_t v74;
  llvm::MachineFunction *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  llvm::MachineFunction *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unsigned __int8 *v130;
  __int128 v131;
  __int128 v132;
  unsigned __int8 *v133;

  FirstTerminator = (llvm::MachineBasicBlock *)llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)this);
  v20 = FirstTerminator;
  if (this + 6 == (llvm::MachineFunction **)FirstTerminator)
  {
LABEL_8:
    v130 = 0;
    if ((a7 & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    v21 = FirstTerminator;
    while (1)
    {
      v22 = **((unsigned __int16 **)v21 + 2);
      v23 = v22 > 0x17;
      v24 = (1 << v22) & 0x83E000;
      if (v23 || v24 == 0)
        break;
      v21 = (llvm::MachineBasicBlock *)*((_QWORD *)v21 + 1);
      if (v21 == (llvm::MachineBasicBlock *)(this + 6))
        goto LABEL_8;
    }
    v26 = (unsigned __int8 *)*((_QWORD *)v21 + 7);
    v130 = v26;
    if (v26)
    {
      llvm::MetadataTracking::track((uint64_t)&v130, v26, 2);
      if ((a7 & 1) != 0)
        goto LABEL_14;
    }
    else if ((a7 & 1) != 0)
    {
      goto LABEL_14;
    }
  }
  if ((a11 & 1) == 0 && !a9)
    goto LABEL_74;
LABEL_14:
  if (a7 && (a5 & 1) == 0 && (a9 & 1) == 0)
  {
    v129 = a3;
    v27 = a4;
    v28 = a6;
    v29 = v130;
LABEL_21:
    if (a5)
      v30 = a10;
    else
      v30 = a8;
    v31 = *(_QWORD *)(a12 + 8);
    v32 = this[4];
    v133 = v29;
    if (v29)
      llvm::MetadataTracking::track((uint64_t)&v133, v29, 2);
    v33 = v31 + 48720;
    v34 = *((_QWORD *)v32 + 28);
    if (v34)
      *((_QWORD *)v32 + 28) = *(_QWORD *)v34;
    else
      v34 = sub_1C484358C((uint64_t)v32 + 128, 72, 3);
    *(_QWORD *)&v131 = v133;
    if (v133)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v133, v133, (uint64_t)&v131);
      v133 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v34, v32, v33, (unsigned __int8 **)&v131, 0);
    if ((_QWORD)v131)
      llvm::MetadataTracking::untrack((uint64_t)&v131, (unsigned __int8 *)v131);
    a6 = v28;
    if (v133)
      llvm::MetadataTracking::untrack((uint64_t)&v133, v133);
    v35 = this[5];
    *(_QWORD *)(v34 + 24) = v35;
    v36 = *((_QWORD *)v35 + 4);
    v37 = *(unsigned int *)(v34 + 40);
    if ((_DWORD)v37)
    {
      v99 = *(_QWORD *)(v34 + 32);
      v100 = *(_QWORD *)(v36 + 40);
      v101 = 32 * v37;
      do
      {
        if (!*(_BYTE *)v99)
        {
          v102 = *(unsigned int *)(v99 + 4);
          if ((int)v102 >= 0)
            v103 = (uint64_t *)(*(_QWORD *)(v100 + 272) + 8 * v102);
          else
            v103 = (uint64_t *)(*(_QWORD *)(v100 + 24) + 16 * (v102 & 0x7FFFFFFF) + 8);
          v104 = *v103;
          if (*v103)
          {
            v105 = *(_QWORD *)(v104 + 16);
            *(_QWORD *)(v104 + 16) = v99;
            *(_QWORD *)(v99 + 16) = v105;
            if ((*(_BYTE *)(v99 + 3) & 1) != 0)
            {
              *(_QWORD *)(v99 + 24) = v104;
            }
            else
            {
              *(_QWORD *)(v99 + 24) = 0;
              v103 = (uint64_t *)(v105 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v99 + 16) = v99;
            *(_QWORD *)(v99 + 24) = 0;
          }
          *v103 = v99;
        }
        v99 += 32;
        v101 -= 32;
      }
      while (v101);
    }
    v38 = *(_QWORD *)(v36 + 728);
    if (v38)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v38 + 24))(v38, v34);
    v39 = *v20 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v34 = v39 | *(_QWORD *)v34 & 7;
    *(_QWORD *)(v34 + 8) = v20;
    *(_QWORD *)(v39 + 8) = v34;
    *v20 = *v20 & 7 | v34;
    *((_QWORD *)&v131 + 1) = 0;
    v132 = 0uLL;
    LODWORD(v131) = 0x1000000;
    DWORD1(v131) = v27;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = v30;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = v30;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v131);
    v131 = 0u;
    v132 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v131);
    v131 = 0u;
    v132 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v131);
    a3 = v129;
    goto LABEL_74;
  }
  v29 = v130;
  if ((a9 & ~(_BYTE)a5 & 1) == 0 && (a7 & 1) == 0)
  {
    v129 = a3;
    v27 = a4;
    v28 = a6;
    goto LABEL_21;
  }
  if (a5)
    v40 = a10;
  else
    v40 = a8;
  if (a5)
    v41 = a8;
  else
    v41 = a10;
  v127 = v40;
  v128 = v41;
  v42 = *(_QWORD *)(a12 + 8);
  v43 = this[4];
  v133 = v130;
  if (v130)
    llvm::MetadataTracking::track((uint64_t)&v133, v130, 2);
  v44 = *((_QWORD *)v43 + 28);
  if (v44)
    *((_QWORD *)v43 + 28) = *(_QWORD *)v44;
  else
    v44 = sub_1C484358C((uint64_t)v43 + 128, 72, 3);
  *(_QWORD *)&v131 = v133;
  if (v133)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v133, v133, (uint64_t)&v131);
    v133 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v44, v43, v42 + 48720, (unsigned __int8 **)&v131, 0);
  if ((_QWORD)v131)
    llvm::MetadataTracking::untrack((uint64_t)&v131, (unsigned __int8 *)v131);
  if (v133)
    llvm::MetadataTracking::untrack((uint64_t)&v133, v133);
  v45 = this[5];
  *(_QWORD *)(v44 + 24) = v45;
  v46 = *((_QWORD *)v45 + 4);
  v47 = *(unsigned int *)(v44 + 40);
  if ((_DWORD)v47)
  {
    v113 = *(_QWORD *)(v44 + 32);
    v114 = *(_QWORD *)(v46 + 40);
    v115 = 32 * v47;
    do
    {
      if (!*(_BYTE *)v113)
      {
        v116 = *(unsigned int *)(v113 + 4);
        if ((int)v116 >= 0)
          v117 = (uint64_t *)(*(_QWORD *)(v114 + 272) + 8 * v116);
        else
          v117 = (uint64_t *)(*(_QWORD *)(v114 + 24) + 16 * (v116 & 0x7FFFFFFF) + 8);
        v118 = *v117;
        if (*v117)
        {
          v119 = *(_QWORD *)(v118 + 16);
          *(_QWORD *)(v118 + 16) = v113;
          *(_QWORD *)(v113 + 16) = v119;
          if ((*(_BYTE *)(v113 + 3) & 1) != 0)
          {
            *(_QWORD *)(v113 + 24) = v118;
          }
          else
          {
            *(_QWORD *)(v113 + 24) = 0;
            v117 = (uint64_t *)(v119 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v113 + 16) = v113;
          *(_QWORD *)(v113 + 24) = 0;
        }
        *v117 = v113;
      }
      v113 += 32;
      v115 -= 32;
    }
    while (v115);
  }
  v48 = *(_QWORD *)(v46 + 728);
  if (v48)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v48 + 24))(v48, v44);
  v49 = *v20 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v44 = v49 | *(_QWORD *)v44 & 7;
  *(_QWORD *)(v44 + 8) = v20;
  *(_QWORD *)(v49 + 8) = v44;
  *v20 = *v20 & 7 | v44;
  *((_QWORD *)&v131 + 1) = 0;
  v132 = 0uLL;
  LODWORD(v131) = 0x1000000;
  DWORD1(v131) = a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
  LODWORD(v131) = 1;
  *((_QWORD *)&v131 + 1) = 0;
  *(_QWORD *)&v132 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
  LODWORD(v131) = 1;
  *((_QWORD *)&v131 + 1) = 0;
  *(_QWORD *)&v132 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
  LODWORD(v131) = 1;
  *((_QWORD *)&v131 + 1) = 0;
  *(_QWORD *)&v132 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
  LODWORD(v131) = 1;
  *((_QWORD *)&v131 + 1) = 0;
  *(_QWORD *)&v132 = v127;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
  LODWORD(v131) = 1;
  *((_QWORD *)&v131 + 1) = 0;
  *(_QWORD *)&v132 = v127;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
  v131 = 0u;
  v132 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
  LODWORD(v131) = 1;
  *((_QWORD *)&v131 + 1) = 0;
  *(_QWORD *)&v132 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
  v132 = 0uLL;
  v131 = 0x200000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
  v50 = *(_QWORD *)(a12 + 8);
  v51 = this[4];
  v133 = v130;
  if (v130)
    llvm::MetadataTracking::track((uint64_t)&v133, v130, 2);
  v52 = *((_QWORD *)v51 + 28);
  if (v52)
    *((_QWORD *)v51 + 28) = *(_QWORD *)v52;
  else
    v52 = sub_1C484358C((uint64_t)v51 + 128, 72, 3);
  *(_QWORD *)&v131 = v133;
  if (v133)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v133, v133, (uint64_t)&v131);
    v133 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v52, v51, v50 + 48720, (unsigned __int8 **)&v131, 0);
  if ((_QWORD)v131)
    llvm::MetadataTracking::untrack((uint64_t)&v131, (unsigned __int8 *)v131);
  if (v133)
    llvm::MetadataTracking::untrack((uint64_t)&v133, v133);
  v53 = this[5];
  *(_QWORD *)(v52 + 24) = v53;
  v54 = *((_QWORD *)v53 + 4);
  v55 = *(unsigned int *)(v52 + 40);
  if ((_DWORD)v55)
  {
    v120 = *(_QWORD *)(v52 + 32);
    v121 = *(_QWORD *)(v54 + 40);
    v122 = 32 * v55;
    do
    {
      if (!*(_BYTE *)v120)
      {
        v123 = *(unsigned int *)(v120 + 4);
        if ((int)v123 >= 0)
          v124 = (uint64_t *)(*(_QWORD *)(v121 + 272) + 8 * v123);
        else
          v124 = (uint64_t *)(*(_QWORD *)(v121 + 24) + 16 * (v123 & 0x7FFFFFFF) + 8);
        v125 = *v124;
        if (*v124)
        {
          v126 = *(_QWORD *)(v125 + 16);
          *(_QWORD *)(v125 + 16) = v120;
          *(_QWORD *)(v120 + 16) = v126;
          if ((*(_BYTE *)(v120 + 3) & 1) != 0)
          {
            *(_QWORD *)(v120 + 24) = v125;
          }
          else
          {
            *(_QWORD *)(v120 + 24) = 0;
            v124 = (uint64_t *)(v126 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v120 + 16) = v120;
          *(_QWORD *)(v120 + 24) = 0;
        }
        *v124 = v120;
      }
      v120 += 32;
      v122 -= 32;
    }
    while (v122);
  }
  v56 = *(_QWORD *)(v54 + 728);
  if (v56)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v56 + 24))(v56, v52);
  v57 = *v20 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v52 = v57 | *(_QWORD *)v52 & 7;
  *(_QWORD *)(v52 + 8) = v20;
  *(_QWORD *)(v57 + 8) = v52;
  *v20 = *v20 & 7 | v52;
  *((_QWORD *)&v131 + 1) = 0;
  v132 = 0uLL;
  LODWORD(v131) = 0x1000000;
  DWORD1(v131) = a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v51, (const llvm::MachineOperand *)&v131);
  LODWORD(v131) = 1;
  *((_QWORD *)&v131 + 1) = 0;
  *(_QWORD *)&v132 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v51, (const llvm::MachineOperand *)&v131);
  LODWORD(v131) = 1;
  *((_QWORD *)&v131 + 1) = 0;
  *(_QWORD *)&v132 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v51, (const llvm::MachineOperand *)&v131);
  LODWORD(v131) = 1;
  *((_QWORD *)&v131 + 1) = 0;
  *(_QWORD *)&v132 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v51, (const llvm::MachineOperand *)&v131);
  LODWORD(v131) = 1;
  *((_QWORD *)&v131 + 1) = 0;
  *(_QWORD *)&v132 = v128;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v51, (const llvm::MachineOperand *)&v131);
  LODWORD(v131) = 1;
  *((_QWORD *)&v131 + 1) = 0;
  *(_QWORD *)&v132 = v128;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v51, (const llvm::MachineOperand *)&v131);
  v131 = 0u;
  v132 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v51, (const llvm::MachineOperand *)&v131);
  LODWORD(v131) = 1;
  *((_QWORD *)&v131 + 1) = 0;
  *(_QWORD *)&v132 = 3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v51, (const llvm::MachineOperand *)&v131);
  v132 = 0uLL;
  v131 = 0x200000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v52, v51, (const llvm::MachineOperand *)&v131);
LABEL_74:
  v58 = *(_QWORD *)(a12 + 8);
  if (a6)
  {
    if (a5)
      v59 = 34464;
    else
      v59 = 33696;
    v60 = this[4];
    v133 = v130;
    if (v130)
      llvm::MetadataTracking::track((uint64_t)&v133, v130, 2);
    v61 = v58 + v59;
    v62 = *((_QWORD *)v60 + 28);
    if (v62)
      *((_QWORD *)v60 + 28) = *(_QWORD *)v62;
    else
      v62 = sub_1C484358C((uint64_t)v60 + 128, 72, 3);
    *(_QWORD *)&v131 = v133;
    if (v133)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v133, v133, (uint64_t)&v131);
      v133 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v62, v60, v61, (unsigned __int8 **)&v131, 0);
    if ((_QWORD)v131)
      llvm::MetadataTracking::untrack((uint64_t)&v131, (unsigned __int8 *)v131);
    if (v133)
      llvm::MetadataTracking::untrack((uint64_t)&v133, v133);
    v67 = this[5];
    *(_QWORD *)(v62 + 24) = v67;
    v68 = *((_QWORD *)v67 + 4);
    v69 = *(unsigned int *)(v62 + 40);
    if ((_DWORD)v69)
    {
      v85 = *(_QWORD *)(v62 + 32);
      v86 = *(_QWORD *)(v68 + 40);
      v87 = 32 * v69;
      do
      {
        if (!*(_BYTE *)v85)
        {
          v88 = *(unsigned int *)(v85 + 4);
          if ((int)v88 >= 0)
            v89 = (uint64_t *)(*(_QWORD *)(v86 + 272) + 8 * v88);
          else
            v89 = (uint64_t *)(*(_QWORD *)(v86 + 24) + 16 * (v88 & 0x7FFFFFFF) + 8);
          v90 = *v89;
          if (*v89)
          {
            v91 = *(_QWORD *)(v90 + 16);
            *(_QWORD *)(v90 + 16) = v85;
            *(_QWORD *)(v85 + 16) = v91;
            if ((*(_BYTE *)(v85 + 3) & 1) != 0)
            {
              *(_QWORD *)(v85 + 24) = v90;
            }
            else
            {
              *(_QWORD *)(v85 + 24) = 0;
              v89 = (uint64_t *)(v91 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v85 + 16) = v85;
            *(_QWORD *)(v85 + 24) = 0;
          }
          *v89 = v85;
        }
        v85 += 32;
        v87 -= 32;
      }
      while (v87);
    }
    v70 = *(_QWORD *)(v68 + 728);
    if (v70)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v70 + 24))(v70, v62);
    v71 = *v20 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v62 = v71 | *(_QWORD *)v62 & 7;
    *(_QWORD *)(v62 + 8) = v20;
    *(_QWORD *)(v71 + 8) = v62;
    *v20 = *v20 & 7 | v62;
    *((_QWORD *)&v131 + 1) = 0;
    v132 = 0uLL;
    LODWORD(v131) = 0x1000000;
    DWORD1(v131) = a3;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v60, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v60, (const llvm::MachineOperand *)&v131);
    *((_QWORD *)&v131 + 1) = 0;
    v132 = 0uLL;
    LODWORD(v131) = 0;
    DWORD1(v131) = a3;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v60, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v60, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = 1;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v60, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v60, (const llvm::MachineOperand *)&v131);
    v131 = 0u;
    v132 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v62, v60, (const llvm::MachineOperand *)&v131);
    v72 = *(_QWORD *)(a12 + 8);
    v73 = this[4];
    v133 = v130;
    if (v130)
      llvm::MetadataTracking::track((uint64_t)&v133, v130, 2);
    v74 = *((_QWORD *)v73 + 28);
    if (v74)
      *((_QWORD *)v73 + 28) = *(_QWORD *)v74;
    else
      v74 = sub_1C484358C((uint64_t)v73 + 128, 72, 3);
    *(_QWORD *)&v131 = v133;
    if (v133)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v133, v133, (uint64_t)&v131);
      v133 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v74, v73, v72 + 32352, (unsigned __int8 **)&v131, 0);
    if ((_QWORD)v131)
      llvm::MetadataTracking::untrack((uint64_t)&v131, (unsigned __int8 *)v131);
    if (v133)
      llvm::MetadataTracking::untrack((uint64_t)&v133, v133);
    v75 = this[5];
    *(_QWORD *)(v74 + 24) = v75;
    v76 = *((_QWORD *)v75 + 4);
    v77 = *(unsigned int *)(v74 + 40);
    if ((_DWORD)v77)
    {
      v92 = *(_QWORD *)(v74 + 32);
      v93 = *(_QWORD *)(v76 + 40);
      v94 = 32 * v77;
      do
      {
        if (!*(_BYTE *)v92)
        {
          v95 = *(unsigned int *)(v92 + 4);
          if ((int)v95 >= 0)
            v96 = (uint64_t *)(*(_QWORD *)(v93 + 272) + 8 * v95);
          else
            v96 = (uint64_t *)(*(_QWORD *)(v93 + 24) + 16 * (v95 & 0x7FFFFFFF) + 8);
          v97 = *v96;
          if (*v96)
          {
            v98 = *(_QWORD *)(v97 + 16);
            *(_QWORD *)(v97 + 16) = v92;
            *(_QWORD *)(v92 + 16) = v98;
            if ((*(_BYTE *)(v92 + 3) & 1) != 0)
            {
              *(_QWORD *)(v92 + 24) = v97;
            }
            else
            {
              *(_QWORD *)(v92 + 24) = 0;
              v96 = (uint64_t *)(v98 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v92 + 16) = v92;
            *(_QWORD *)(v92 + 24) = 0;
          }
          *v96 = v92;
        }
        v92 += 32;
        v94 -= 32;
      }
      while (v94);
    }
    v78 = *(_QWORD *)(v76 + 728);
    if (v78)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v78 + 24))(v78, v74);
    v79 = *v20 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v74 = v79 | *(_QWORD *)v74 & 7;
    *(_QWORD *)(v74 + 8) = v20;
    *(_QWORD *)(v79 + 8) = v74;
    *v20 = *v20 & 7 | v74;
    *((_QWORD *)&v131 + 1) = 0;
    v132 = 0uLL;
    LODWORD(v131) = 0x1000000;
    DWORD1(v131) = a3;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v73, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v73, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = (a6 + 3);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v73, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v73, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v73, (const llvm::MachineOperand *)&v131);
    v131 = 0u;
    v132 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v73, (const llvm::MachineOperand *)&v131);
    sub_1C47BF0D0((llvm::MachineBasicBlock *)this, 0, &v130, a3, a12, 0, -1);
  }
  else
  {
    if (a5)
      v63 = 30624;
    else
      v63 = 31392;
    v64 = this[4];
    v133 = v130;
    if (v130)
      llvm::MetadataTracking::track((uint64_t)&v133, v130, 2);
    v65 = v58 + v63;
    v66 = *((_QWORD *)v64 + 28);
    if (v66)
      *((_QWORD *)v64 + 28) = *(_QWORD *)v66;
    else
      v66 = sub_1C484358C((uint64_t)v64 + 128, 72, 3);
    *(_QWORD *)&v131 = v133;
    if (v133)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v133, v133, (uint64_t)&v131);
      v133 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v66, v64, v65, (unsigned __int8 **)&v131, 0);
    if ((_QWORD)v131)
      llvm::MetadataTracking::untrack((uint64_t)&v131, (unsigned __int8 *)v131);
    if (v133)
      llvm::MetadataTracking::untrack((uint64_t)&v133, v133);
    v80 = this[5];
    *(_QWORD *)(v66 + 24) = v80;
    v81 = *((_QWORD *)v80 + 4);
    v82 = *(unsigned int *)(v66 + 40);
    if ((_DWORD)v82)
    {
      v106 = *(_QWORD *)(v66 + 32);
      v107 = *(_QWORD *)(v81 + 40);
      v108 = 32 * v82;
      do
      {
        if (!*(_BYTE *)v106)
        {
          v109 = *(unsigned int *)(v106 + 4);
          if ((int)v109 >= 0)
            v110 = (uint64_t *)(*(_QWORD *)(v107 + 272) + 8 * v109);
          else
            v110 = (uint64_t *)(*(_QWORD *)(v107 + 24) + 16 * (v109 & 0x7FFFFFFF) + 8);
          v111 = *v110;
          if (*v110)
          {
            v112 = *(_QWORD *)(v111 + 16);
            *(_QWORD *)(v111 + 16) = v106;
            *(_QWORD *)(v106 + 16) = v112;
            if ((*(_BYTE *)(v106 + 3) & 1) != 0)
            {
              *(_QWORD *)(v106 + 24) = v111;
            }
            else
            {
              *(_QWORD *)(v106 + 24) = 0;
              v110 = (uint64_t *)(v112 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v106 + 16) = v106;
            *(_QWORD *)(v106 + 24) = 0;
          }
          *v110 = v106;
        }
        v106 += 32;
        v108 -= 32;
      }
      while (v108);
    }
    v83 = *(_QWORD *)(v81 + 728);
    if (v83)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v83 + 24))(v83, v66);
    v84 = *v20 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v66 = v84 | *(_QWORD *)v66 & 7;
    *(_QWORD *)(v66 + 8) = v20;
    *(_QWORD *)(v84 + 8) = v66;
    *v20 = *v20 & 7 | v66;
    *((_QWORD *)&v131 + 1) = 0;
    v132 = 0uLL;
    LODWORD(v131) = 0x1000000;
    DWORD1(v131) = a3;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v66, v64, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v66, v64, (const llvm::MachineOperand *)&v131);
    *((_QWORD *)&v131 + 1) = 0;
    v132 = 0uLL;
    LODWORD(v131) = 0;
    DWORD1(v131) = a3;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v66, v64, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v66, v64, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v66, v64, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    *((_QWORD *)&v131 + 1) = 0;
    *(_QWORD *)&v132 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v66, v64, (const llvm::MachineOperand *)&v131);
    v131 = 0u;
    v132 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v66, v64, (const llvm::MachineOperand *)&v131);
  }
  if (v130)
    llvm::MetadataTracking::untrack((uint64_t)&v130, v130);
}

void sub_1C47BD2B0(int a1, llvm::MachineBasicBlock *a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, char a12, char a13, llvm::TargetInstrInfo *a14)
{
  unint64_t v20;
  unint64_t FirstTerminator;
  _QWORD *v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  llvm::MachineFunction *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::MachineFunction *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  llvm::MachineFunction *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  llvm::MachineFunction *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  llvm::MachineFunction *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  llvm::MachineFunction *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  llvm::MachineFunction *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  llvm::MachineFunction *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  unsigned __int8 *v168;
  unsigned __int8 *v169;
  __int128 v170;
  __int128 v171;

  v20 = sub_1C47BEE4C((uint64_t)a2, a14);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  v22 = (_QWORD *)FirstTerminator;
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_8:
    v168 = 0;
    if (!v20)
      goto LABEL_125;
  }
  else
  {
    v23 = FirstTerminator;
    while (1)
    {
      v24 = **(unsigned __int16 **)(v23 + 16);
      v25 = v24 > 0x17;
      v26 = (1 << v24) & 0x83E000;
      if (v25 || v26 == 0)
        break;
      v23 = *(_QWORD *)(v23 + 8);
      if ((llvm::MachineBasicBlock *)v23 == (llvm::MachineBasicBlock *)((char *)a2 + 48))
        goto LABEL_8;
    }
    v28 = *(unsigned __int8 **)(v23 + 56);
    v168 = v28;
    if (v28)
    {
      llvm::MetadataTracking::track((uint64_t)&v168, v28, 2);
      if (!v20)
        goto LABEL_125;
    }
    else if (!v20)
    {
      goto LABEL_125;
    }
  }
  if ((a8 & 1) != 0 || (a12 & 1) != 0 || a10)
  {
    v166 = a7;
    if (!a8 || (a6 & 1) != 0 || (a10 & 1) != 0)
    {
      v29 = v168;
      if ((a10 & ~(_BYTE)a6 & 1) != 0 || (a8 & 1) != 0)
      {
        if (a6)
          v40 = a11;
        else
          v40 = a9;
        if (a6)
          v41 = a9;
        else
          v41 = a11;
        v165 = v41;
        v42 = *((_QWORD *)a14 + 1);
        v43 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
        v169 = v168;
        if (v168)
          llvm::MetadataTracking::track((uint64_t)&v169, v168, 2);
        v44 = v42 + 48720;
        v45 = *((_QWORD *)v43 + 28);
        if (v45)
          *((_QWORD *)v43 + 28) = *(_QWORD *)v45;
        else
          v45 = sub_1C484358C((uint64_t)v43 + 128, 72, 3);
        *(_QWORD *)&v170 = v169;
        if (v169)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v169, v169, (uint64_t)&v170);
          v169 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v45, v43, v44, (unsigned __int8 **)&v170, 0);
        if ((_QWORD)v170)
          llvm::MetadataTracking::untrack((uint64_t)&v170, (unsigned __int8 *)v170);
        if (v169)
          llvm::MetadataTracking::untrack((uint64_t)&v169, v169);
        v46 = *((_QWORD *)a2 + 5);
        *(_QWORD *)(v45 + 24) = v46;
        v47 = *(_QWORD *)(v46 + 32);
        v48 = *(unsigned int *)(v45 + 40);
        if ((_DWORD)v48)
        {
          v151 = *(_QWORD *)(v45 + 32);
          v152 = *(_QWORD *)(v47 + 40);
          v153 = 32 * v48;
          do
          {
            if (!*(_BYTE *)v151)
            {
              v154 = *(unsigned int *)(v151 + 4);
              if ((int)v154 >= 0)
                v155 = (uint64_t *)(*(_QWORD *)(v152 + 272) + 8 * v154);
              else
                v155 = (uint64_t *)(*(_QWORD *)(v152 + 24) + 16 * (v154 & 0x7FFFFFFF) + 8);
              v156 = *v155;
              if (*v155)
              {
                v157 = *(_QWORD *)(v156 + 16);
                *(_QWORD *)(v156 + 16) = v151;
                *(_QWORD *)(v151 + 16) = v157;
                if ((*(_BYTE *)(v151 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v151 + 24) = v156;
                }
                else
                {
                  *(_QWORD *)(v151 + 24) = 0;
                  v155 = (uint64_t *)(v157 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v151 + 16) = v151;
                *(_QWORD *)(v151 + 24) = 0;
              }
              *v155 = v151;
            }
            v151 += 32;
            v153 -= 32;
          }
          while (v153);
        }
        v49 = *(_QWORD *)(v47 + 728);
        if (v49)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v49 + 24))(v49, v45);
        v50 = *v22 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v45 = v50 | *(_QWORD *)v45 & 7;
        *(_QWORD *)(v45 + 8) = v22;
        *(_QWORD *)(v50 + 8) = v45;
        *v22 = *v22 & 7 | v45;
        *((_QWORD *)&v170 + 1) = 0;
        v171 = 0uLL;
        LODWORD(v170) = 0x1000000;
        DWORD1(v170) = a5;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v43, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        *((_QWORD *)&v170 + 1) = 0;
        *(_QWORD *)&v171 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v43, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        *((_QWORD *)&v170 + 1) = 0;
        *(_QWORD *)&v171 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v43, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        *((_QWORD *)&v170 + 1) = 0;
        *(_QWORD *)&v171 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v43, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        *((_QWORD *)&v170 + 1) = 0;
        *(_QWORD *)&v171 = v40;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v43, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        *((_QWORD *)&v170 + 1) = 0;
        *(_QWORD *)&v171 = v40;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v43, (const llvm::MachineOperand *)&v170);
        v170 = 0u;
        v171 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v43, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        *((_QWORD *)&v170 + 1) = 0;
        *(_QWORD *)&v171 = 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v43, (const llvm::MachineOperand *)&v170);
        v171 = 0uLL;
        v170 = 0x200000000uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v43, (const llvm::MachineOperand *)&v170);
        v51 = *((_QWORD *)a14 + 1);
        v52 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
        v169 = v168;
        if (v168)
          llvm::MetadataTracking::track((uint64_t)&v169, v168, 2);
        v53 = v51 + 48720;
        v54 = *((_QWORD *)v52 + 28);
        if (v54)
          *((_QWORD *)v52 + 28) = *(_QWORD *)v54;
        else
          v54 = sub_1C484358C((uint64_t)v52 + 128, 72, 3);
        a7 = v166;
        *(_QWORD *)&v170 = v169;
        if (v169)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v169, v169, (uint64_t)&v170);
          v169 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v54, v52, v53, (unsigned __int8 **)&v170, 0);
        if ((_QWORD)v170)
          llvm::MetadataTracking::untrack((uint64_t)&v170, (unsigned __int8 *)v170);
        if (v169)
          llvm::MetadataTracking::untrack((uint64_t)&v169, v169);
        v55 = *((_QWORD *)a2 + 5);
        *(_QWORD *)(v54 + 24) = v55;
        v56 = *(_QWORD *)(v55 + 32);
        v57 = *(unsigned int *)(v54 + 40);
        if ((_DWORD)v57)
        {
          v158 = *(_QWORD *)(v54 + 32);
          v159 = *(_QWORD *)(v56 + 40);
          v160 = 32 * v57;
          do
          {
            if (!*(_BYTE *)v158)
            {
              v161 = *(unsigned int *)(v158 + 4);
              if ((int)v161 >= 0)
                v162 = (uint64_t *)(*(_QWORD *)(v159 + 272) + 8 * v161);
              else
                v162 = (uint64_t *)(*(_QWORD *)(v159 + 24) + 16 * (v161 & 0x7FFFFFFF) + 8);
              v163 = *v162;
              if (*v162)
              {
                v164 = *(_QWORD *)(v163 + 16);
                *(_QWORD *)(v163 + 16) = v158;
                *(_QWORD *)(v158 + 16) = v164;
                if ((*(_BYTE *)(v158 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v158 + 24) = v163;
                }
                else
                {
                  *(_QWORD *)(v158 + 24) = 0;
                  v162 = (uint64_t *)(v164 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v158 + 16) = v158;
                *(_QWORD *)(v158 + 24) = 0;
              }
              *v162 = v158;
            }
            v158 += 32;
            v160 -= 32;
          }
          while (v160);
        }
        v58 = *(_QWORD *)(v56 + 728);
        if (v58)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v58 + 24))(v58, v54);
        v59 = *v22 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v54 = v59 | *(_QWORD *)v54 & 7;
        *(_QWORD *)(v54 + 8) = v22;
        *(_QWORD *)(v59 + 8) = v54;
        *v22 = *v22 & 7 | v54;
        *((_QWORD *)&v170 + 1) = 0;
        v171 = 0uLL;
        LODWORD(v170) = 0x1000000;
        DWORD1(v170) = a5;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v52, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        *((_QWORD *)&v170 + 1) = 0;
        *(_QWORD *)&v171 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v52, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        *((_QWORD *)&v170 + 1) = 0;
        *(_QWORD *)&v171 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v52, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        *((_QWORD *)&v170 + 1) = 0;
        *(_QWORD *)&v171 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v52, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        *((_QWORD *)&v170 + 1) = 0;
        *(_QWORD *)&v171 = v165;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v52, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        *((_QWORD *)&v170 + 1) = 0;
        *(_QWORD *)&v171 = v165;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v52, (const llvm::MachineOperand *)&v170);
        v170 = 0u;
        v171 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v52, (const llvm::MachineOperand *)&v170);
        LODWORD(v170) = 1;
        *((_QWORD *)&v170 + 1) = 0;
        *(_QWORD *)&v171 = 3;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v52, (const llvm::MachineOperand *)&v170);
        v171 = 0uLL;
        v170 = 0x200000000uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v54, v52, (const llvm::MachineOperand *)&v170);
        goto LABEL_74;
      }
    }
    else
    {
      v29 = v168;
    }
    if (a6)
      v30 = a11;
    else
      v30 = a9;
    v31 = *((_QWORD *)a14 + 1);
    v32 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
    v169 = v29;
    if (v29)
      llvm::MetadataTracking::track((uint64_t)&v169, v29, 2);
    v33 = v31 + 48720;
    v34 = *((_QWORD *)v32 + 28);
    if (v34)
      *((_QWORD *)v32 + 28) = *(_QWORD *)v34;
    else
      v34 = sub_1C484358C((uint64_t)v32 + 128, 72, 3);
    *(_QWORD *)&v170 = v169;
    if (v169)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v169, v169, (uint64_t)&v170);
      v169 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v34, v32, v33, (unsigned __int8 **)&v170, 0);
    if ((_QWORD)v170)
      llvm::MetadataTracking::untrack((uint64_t)&v170, (unsigned __int8 *)v170);
    if (v169)
      llvm::MetadataTracking::untrack((uint64_t)&v169, v169);
    v35 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v34 + 24) = v35;
    v36 = *(_QWORD *)(v35 + 32);
    v37 = *(unsigned int *)(v34 + 40);
    if ((_DWORD)v37)
    {
      v137 = *(_QWORD *)(v34 + 32);
      v138 = *(_QWORD *)(v36 + 40);
      v139 = 32 * v37;
      do
      {
        if (!*(_BYTE *)v137)
        {
          v140 = *(unsigned int *)(v137 + 4);
          if ((int)v140 >= 0)
            v141 = (uint64_t *)(*(_QWORD *)(v138 + 272) + 8 * v140);
          else
            v141 = (uint64_t *)(*(_QWORD *)(v138 + 24) + 16 * (v140 & 0x7FFFFFFF) + 8);
          v142 = *v141;
          if (*v141)
          {
            v143 = *(_QWORD *)(v142 + 16);
            *(_QWORD *)(v142 + 16) = v137;
            *(_QWORD *)(v137 + 16) = v143;
            if ((*(_BYTE *)(v137 + 3) & 1) != 0)
            {
              *(_QWORD *)(v137 + 24) = v142;
            }
            else
            {
              *(_QWORD *)(v137 + 24) = 0;
              v141 = (uint64_t *)(v143 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v137 + 16) = v137;
            *(_QWORD *)(v137 + 24) = 0;
          }
          *v141 = v137;
        }
        v137 += 32;
        v139 -= 32;
      }
      while (v139);
    }
    v38 = *(_QWORD *)(v36 + 728);
    if (v38)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v38 + 24))(v38, v34);
    v39 = *v22 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v34 = v39 | *(_QWORD *)v34 & 7;
    *(_QWORD *)(v34 + 8) = v22;
    *(_QWORD *)(v39 + 8) = v34;
    *v22 = *v22 & 7 | v34;
    *((_QWORD *)&v170 + 1) = 0;
    v171 = 0uLL;
    LODWORD(v170) = 0x1000000;
    DWORD1(v170) = a5;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = v30;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = v30;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v170);
    v170 = 0u;
    v171 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v170);
    v170 = 0u;
    v171 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v34, v32, (const llvm::MachineOperand *)&v170);
    a7 = v166;
  }
LABEL_74:
  v60 = *((_QWORD *)a14 + 1);
  if (a7)
  {
    v61 = a7;
    if (a6)
      v62 = 34464;
    else
      v62 = 33696;
    v63 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
    v169 = v168;
    if (v168)
      llvm::MetadataTracking::track((uint64_t)&v169, v168, 2);
    v64 = v60 + v62;
    v65 = *((_QWORD *)v63 + 28);
    if (v65)
      *((_QWORD *)v63 + 28) = *(_QWORD *)v65;
    else
      v65 = sub_1C484358C((uint64_t)v63 + 128, 72, 3);
    *(_QWORD *)&v170 = v169;
    if (v169)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v169, v169, (uint64_t)&v170);
      v169 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v65, v63, v64, (unsigned __int8 **)&v170, 0);
    if ((_QWORD)v170)
      llvm::MetadataTracking::untrack((uint64_t)&v170, (unsigned __int8 *)v170);
    if (v169)
      llvm::MetadataTracking::untrack((uint64_t)&v169, v169);
    v70 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v65 + 24) = v70;
    v71 = *(_QWORD *)(v70 + 32);
    v72 = *(unsigned int *)(v65 + 40);
    if ((_DWORD)v72)
    {
      v123 = *(_QWORD *)(v65 + 32);
      v124 = *(_QWORD *)(v71 + 40);
      v125 = 32 * v72;
      do
      {
        if (!*(_BYTE *)v123)
        {
          v126 = *(unsigned int *)(v123 + 4);
          if ((int)v126 >= 0)
            v127 = (uint64_t *)(*(_QWORD *)(v124 + 272) + 8 * v126);
          else
            v127 = (uint64_t *)(*(_QWORD *)(v124 + 24) + 16 * (v126 & 0x7FFFFFFF) + 8);
          v128 = *v127;
          if (*v127)
          {
            v129 = *(_QWORD *)(v128 + 16);
            *(_QWORD *)(v128 + 16) = v123;
            *(_QWORD *)(v123 + 16) = v129;
            if ((*(_BYTE *)(v123 + 3) & 1) != 0)
            {
              *(_QWORD *)(v123 + 24) = v128;
            }
            else
            {
              *(_QWORD *)(v123 + 24) = 0;
              v127 = (uint64_t *)(v129 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v123 + 16) = v123;
            *(_QWORD *)(v123 + 24) = 0;
          }
          *v127 = v123;
        }
        v123 += 32;
        v125 -= 32;
      }
      while (v125);
    }
    v73 = *(_QWORD *)(v71 + 728);
    if (v73)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v73 + 24))(v73, v65);
    v74 = *v22 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v65 = v74 | *(_QWORD *)v65 & 7;
    *(_QWORD *)(v65 + 8) = v22;
    *(_QWORD *)(v74 + 8) = v65;
    *v22 = *v22 & 7 | v65;
    *((_QWORD *)&v170 + 1) = 0;
    v171 = 0uLL;
    LODWORD(v170) = 0x1000000;
    DWORD1(v170) = a4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v63, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v63, (const llvm::MachineOperand *)&v170);
    *((_QWORD *)&v170 + 1) = 0;
    v171 = 0uLL;
    LODWORD(v170) = 0;
    DWORD1(v170) = a4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v63, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v63, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = 1;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v63, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v63, (const llvm::MachineOperand *)&v170);
    v170 = 0u;
    v171 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v65, v63, (const llvm::MachineOperand *)&v170);
    v75 = *((_QWORD *)a14 + 1);
    v76 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
    v169 = v168;
    if (v168)
      llvm::MetadataTracking::track((uint64_t)&v169, v168, 2);
    v77 = v75 + 32352;
    v78 = *((_QWORD *)v76 + 28);
    if (v78)
      *((_QWORD *)v76 + 28) = *(_QWORD *)v78;
    else
      v78 = sub_1C484358C((uint64_t)v76 + 128, 72, 3);
    *(_QWORD *)&v170 = v169;
    if (v169)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v169, v169, (uint64_t)&v170);
      v169 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v78, v76, v77, (unsigned __int8 **)&v170, 0);
    if ((_QWORD)v170)
      llvm::MetadataTracking::untrack((uint64_t)&v170, (unsigned __int8 *)v170);
    if (v169)
      llvm::MetadataTracking::untrack((uint64_t)&v169, v169);
    v79 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v78 + 24) = v79;
    v80 = *(_QWORD *)(v79 + 32);
    v81 = *(unsigned int *)(v78 + 40);
    if ((_DWORD)v81)
    {
      v130 = *(_QWORD *)(v78 + 32);
      v131 = *(_QWORD *)(v80 + 40);
      v132 = 32 * v81;
      do
      {
        if (!*(_BYTE *)v130)
        {
          v133 = *(unsigned int *)(v130 + 4);
          if ((int)v133 >= 0)
            v134 = (uint64_t *)(*(_QWORD *)(v131 + 272) + 8 * v133);
          else
            v134 = (uint64_t *)(*(_QWORD *)(v131 + 24) + 16 * (v133 & 0x7FFFFFFF) + 8);
          v135 = *v134;
          if (*v134)
          {
            v136 = *(_QWORD *)(v135 + 16);
            *(_QWORD *)(v135 + 16) = v130;
            *(_QWORD *)(v130 + 16) = v136;
            if ((*(_BYTE *)(v130 + 3) & 1) != 0)
            {
              *(_QWORD *)(v130 + 24) = v135;
            }
            else
            {
              *(_QWORD *)(v130 + 24) = 0;
              v134 = (uint64_t *)(v136 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v130 + 16) = v130;
            *(_QWORD *)(v130 + 24) = 0;
          }
          *v134 = v130;
        }
        v130 += 32;
        v132 -= 32;
      }
      while (v132);
    }
    v82 = *(_QWORD *)(v80 + 728);
    if (v82)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v82 + 24))(v82, v78);
    v83 = *v22 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v78 = v83 | *(_QWORD *)v78 & 7;
    *(_QWORD *)(v78 + 8) = v22;
    *(_QWORD *)(v83 + 8) = v78;
    *v22 = *v22 & 7 | v78;
    *((_QWORD *)&v170 + 1) = 0;
    v171 = 0uLL;
    LODWORD(v170) = 0x1000000;
    DWORD1(v170) = a4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v78, v76, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v78, v76, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = (v61 + 3);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v78, v76, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v78, v76, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v78, v76, (const llvm::MachineOperand *)&v170);
    v170 = 0u;
    v171 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v78, v76, (const llvm::MachineOperand *)&v170);
    sub_1C47BF0D0(a2, 0, &v168, a4, (uint64_t)a14, 0, -1);
  }
  else
  {
    if (a6)
      v66 = 30624;
    else
      v66 = 31392;
    v67 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
    v169 = v168;
    if (v168)
      llvm::MetadataTracking::track((uint64_t)&v169, v168, 2);
    v68 = v60 + v66;
    v69 = *((_QWORD *)v67 + 28);
    if (v69)
      *((_QWORD *)v67 + 28) = *(_QWORD *)v69;
    else
      v69 = sub_1C484358C((uint64_t)v67 + 128, 72, 3);
    *(_QWORD *)&v170 = v169;
    if (v169)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v169, v169, (uint64_t)&v170);
      v169 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v69, v67, v68, (unsigned __int8 **)&v170, 0);
    if ((_QWORD)v170)
      llvm::MetadataTracking::untrack((uint64_t)&v170, (unsigned __int8 *)v170);
    if (v169)
      llvm::MetadataTracking::untrack((uint64_t)&v169, v169);
    v84 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v69 + 24) = v84;
    v85 = *(_QWORD *)(v84 + 32);
    v86 = *(unsigned int *)(v69 + 40);
    if ((_DWORD)v86)
    {
      v144 = *(_QWORD *)(v69 + 32);
      v145 = *(_QWORD *)(v85 + 40);
      v146 = 32 * v86;
      do
      {
        if (!*(_BYTE *)v144)
        {
          v147 = *(unsigned int *)(v144 + 4);
          if ((int)v147 >= 0)
            v148 = (uint64_t *)(*(_QWORD *)(v145 + 272) + 8 * v147);
          else
            v148 = (uint64_t *)(*(_QWORD *)(v145 + 24) + 16 * (v147 & 0x7FFFFFFF) + 8);
          v149 = *v148;
          if (*v148)
          {
            v150 = *(_QWORD *)(v149 + 16);
            *(_QWORD *)(v149 + 16) = v144;
            *(_QWORD *)(v144 + 16) = v150;
            if ((*(_BYTE *)(v144 + 3) & 1) != 0)
            {
              *(_QWORD *)(v144 + 24) = v149;
            }
            else
            {
              *(_QWORD *)(v144 + 24) = 0;
              v148 = (uint64_t *)(v150 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v144 + 16) = v144;
            *(_QWORD *)(v144 + 24) = 0;
          }
          *v148 = v144;
        }
        v144 += 32;
        v146 -= 32;
      }
      while (v146);
    }
    v87 = *(_QWORD *)(v85 + 728);
    if (v87)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v87 + 24))(v87, v69);
    v88 = *v22 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v69 = v88 | *(_QWORD *)v69 & 7;
    *(_QWORD *)(v69 + 8) = v22;
    *(_QWORD *)(v88 + 8) = v69;
    *v22 = *v22 & 7 | v69;
    *((_QWORD *)&v170 + 1) = 0;
    v171 = 0uLL;
    LODWORD(v170) = 0x1000000;
    DWORD1(v170) = a4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v67, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v67, (const llvm::MachineOperand *)&v170);
    *((_QWORD *)&v170 + 1) = 0;
    v171 = 0uLL;
    LODWORD(v170) = 0;
    DWORD1(v170) = a4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v67, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v67, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v67, (const llvm::MachineOperand *)&v170);
    LODWORD(v170) = 1;
    *((_QWORD *)&v170 + 1) = 0;
    *(_QWORD *)&v171 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v67, (const llvm::MachineOperand *)&v170);
    v170 = 0u;
    v171 = 0u;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v69, v67, (const llvm::MachineOperand *)&v170);
  }
LABEL_125:
  v89 = v168;
  if (a5)
  {
    v90 = a3;
    if ((a13 & 1) == 0)
    {
      v91 = *((_QWORD *)a14 + 1);
      v92 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
      v169 = v168;
      if (v168)
        llvm::MetadataTracking::track((uint64_t)&v169, v168, 2);
      v93 = v91 + 48720;
      v94 = *((_QWORD *)v92 + 28);
      if (v94)
        *((_QWORD *)v92 + 28) = *(_QWORD *)v94;
      else
        v94 = sub_1C484358C((uint64_t)v92 + 128, 72, 3);
      *(_QWORD *)&v170 = v169;
      if (v169)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v169, v169, (uint64_t)&v170);
        v169 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v94, v92, v93, (unsigned __int8 **)&v170, 0);
      if ((_QWORD)v170)
        llvm::MetadataTracking::untrack((uint64_t)&v170, (unsigned __int8 *)v170);
      if (v169)
        llvm::MetadataTracking::untrack((uint64_t)&v169, v169);
      v95 = *((_QWORD *)a2 + 5);
      *(_QWORD *)(v94 + 24) = v95;
      v96 = *(_QWORD *)(v95 + 32);
      v97 = *(unsigned int *)(v94 + 40);
      if ((_DWORD)v97)
      {
        v116 = *(_QWORD *)(v94 + 32);
        v117 = *(_QWORD *)(v96 + 40);
        v118 = 32 * v97;
        do
        {
          if (!*(_BYTE *)v116)
          {
            v119 = *(unsigned int *)(v116 + 4);
            if ((int)v119 >= 0)
              v120 = (uint64_t *)(*(_QWORD *)(v117 + 272) + 8 * v119);
            else
              v120 = (uint64_t *)(*(_QWORD *)(v117 + 24) + 16 * (v119 & 0x7FFFFFFF) + 8);
            v121 = *v120;
            if (*v120)
            {
              v122 = *(_QWORD *)(v121 + 16);
              *(_QWORD *)(v121 + 16) = v116;
              *(_QWORD *)(v116 + 16) = v122;
              if ((*(_BYTE *)(v116 + 3) & 1) != 0)
              {
                *(_QWORD *)(v116 + 24) = v121;
              }
              else
              {
                *(_QWORD *)(v116 + 24) = 0;
                v120 = (uint64_t *)(v122 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v116 + 16) = v116;
              *(_QWORD *)(v116 + 24) = 0;
            }
            *v120 = v116;
          }
          v116 += 32;
          v118 -= 32;
        }
        while (v118);
      }
      v98 = *(_QWORD *)(v96 + 728);
      if (v98)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v98 + 24))(v98, v94);
      v99 = *v22 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v94 = v99 | *(_QWORD *)v94 & 7;
      *(_QWORD *)(v94 + 8) = v22;
      *(_QWORD *)(v99 + 8) = v94;
      *v22 = *v22 & 7 | v94;
      *((_QWORD *)&v170 + 1) = 0;
      v171 = 0uLL;
      LODWORD(v170) = 0x1000000;
      DWORD1(v170) = a5;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v170);
      LODWORD(v170) = 1;
      *((_QWORD *)&v170 + 1) = 0;
      *(_QWORD *)&v171 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v170);
      LODWORD(v170) = 1;
      *((_QWORD *)&v170 + 1) = 0;
      *(_QWORD *)&v171 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v170);
      LODWORD(v170) = 1;
      *((_QWORD *)&v170 + 1) = 0;
      *(_QWORD *)&v171 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v170);
      LODWORD(v170) = 1;
      *((_QWORD *)&v170 + 1) = 0;
      *(_QWORD *)&v171 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v170);
      LODWORD(v170) = 1;
      *((_QWORD *)&v170 + 1) = 0;
      *(_QWORD *)&v171 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v170);
      v170 = 0u;
      v171 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v170);
      LODWORD(v170) = 1;
      *((_QWORD *)&v170 + 1) = 0;
      *(_QWORD *)&v171 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v170);
      v170 = 0u;
      v171 = 0u;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v94, v92, (const llvm::MachineOperand *)&v170);
      v89 = v168;
    }
  }
  else
  {
    v90 = a3;
  }
  v100 = *((_QWORD *)a14 + 1);
  v101 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
  v169 = v89;
  if (v89)
    llvm::MetadataTracking::track((uint64_t)&v169, v89, 2);
  v102 = v100 + 18960;
  v103 = *((_QWORD *)v101 + 28);
  if (v103)
    *((_QWORD *)v101 + 28) = *(_QWORD *)v103;
  else
    v103 = sub_1C484358C((uint64_t)v101 + 128, 72, 3);
  *(_QWORD *)&v170 = v169;
  if (v169)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v169, v169, (uint64_t)&v170);
    v169 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v103, v101, v102, (unsigned __int8 **)&v170, 0);
  if ((_QWORD)v170)
    llvm::MetadataTracking::untrack((uint64_t)&v170, (unsigned __int8 *)v170);
  if (v169)
    llvm::MetadataTracking::untrack((uint64_t)&v169, v169);
  v104 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v103 + 24) = v104;
  v105 = *(_QWORD *)(v104 + 32);
  v106 = *(unsigned int *)(v103 + 40);
  if ((_DWORD)v106)
  {
    v109 = *(_QWORD *)(v103 + 32);
    v110 = *(_QWORD *)(v105 + 40);
    v111 = 32 * v106;
    do
    {
      if (!*(_BYTE *)v109)
      {
        v112 = *(unsigned int *)(v109 + 4);
        if ((int)v112 >= 0)
          v113 = (uint64_t *)(*(_QWORD *)(v110 + 272) + 8 * v112);
        else
          v113 = (uint64_t *)(*(_QWORD *)(v110 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
        v114 = *v113;
        if (*v113)
        {
          v115 = *(_QWORD *)(v114 + 16);
          *(_QWORD *)(v114 + 16) = v109;
          *(_QWORD *)(v109 + 16) = v115;
          if ((*(_BYTE *)(v109 + 3) & 1) != 0)
          {
            *(_QWORD *)(v109 + 24) = v114;
          }
          else
          {
            *(_QWORD *)(v109 + 24) = 0;
            v113 = (uint64_t *)(v115 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v109 + 16) = v109;
          *(_QWORD *)(v109 + 24) = 0;
        }
        *v113 = v109;
      }
      v109 += 32;
      v111 -= 32;
    }
    while (v111);
  }
  v107 = *(_QWORD *)(v105 + 728);
  if (v107)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v107 + 24))(v107, v103);
  v108 = *v22 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v103 = v108 | *(_QWORD *)v103 & 7;
  *(_QWORD *)(v103 + 8) = v22;
  *(_QWORD *)(v108 + 8) = v103;
  *v22 = *v22 & 7 | v103;
  *((_QWORD *)&v170 + 1) = 0;
  *(_QWORD *)&v171 = v90;
  LODWORD(v170) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v103, v101, (const llvm::MachineOperand *)&v170);
  LODWORD(v170) = 1;
  *((_QWORD *)&v170 + 1) = 0;
  *(_QWORD *)&v171 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v103, v101, (const llvm::MachineOperand *)&v170);
  v170 = 0u;
  v171 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v103, v101, (const llvm::MachineOperand *)&v170);
  if (v168)
    llvm::MetadataTracking::untrack((uint64_t)&v168, v168);
}

unint64_t sub_1C47BE6CC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v7;
  unint64_t *v8;
  int v9;
  uint64_t v10;
  unsigned __int16 *v11;
  int v12;
  uint64_t v15;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t *v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  unsigned __int8 *v29;
  uint64_t v30;
  llvm::MachineFunction *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  __int128 v47;
  __int128 v48;

  v7 = a2 + 6;
  v8 = (unint64_t *)a2[7];
  if (v8 != a2 + 6)
  {
    v9 = 0;
    v10 = a2[7];
    do
    {
      v11 = *(unsigned __int16 **)(v10 + 16);
      v12 = *v11;
      if ((v12 - 9) <= 0x3C && ((1 << (v12 - 9)) & 0x1000000000000605) != 0
        || v12 == 0)
      {
        goto LABEL_18;
      }
      v15 = *((_QWORD *)v11 + 1);
      if ((v15 & 0x10) != 0)
        goto LABEL_18;
      if ((*(_WORD *)(v10 + 44) & 0xC) != 0 && (*(_WORD *)(v10 + 44) & 4) == 0)
      {
        v17 = v10;
        if ((v15 & 0x400) != 0)
          goto LABEL_18;
        while ((*(_WORD *)(v17 + 44) & 8) != 0)
        {
          v17 = *(_QWORD *)(v17 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v17 + 16) + 9) & 4) != 0)
            goto LABEL_18;
        }
      }
      else if ((v15 & 0x400) != 0)
      {
        goto LABEL_18;
      }
      if ((v11[8] & 1) == 0)
      {
        v8 = (unint64_t *)v10;
        goto LABEL_39;
      }
      if (++v9 > 4)
        goto LABEL_39;
LABEL_18:
      if ((*(_BYTE *)v10 & 4) == 0)
      {
        while ((*(_WORD *)(v10 + 44) & 8) != 0)
          v10 = *(_QWORD *)(v10 + 8);
      }
      v10 = *(_QWORD *)(v10 + 8);
    }
    while ((unint64_t *)v10 != v7);
  }
  v18 = (char *)a2[11];
  v19 = (char *)a2[12];
  v20 = v18;
  if (v18 != v19)
  {
    while (*(_QWORD *)v20 != a3)
    {
      v20 += 8;
      if (v20 == v19)
      {
        v20 = (char *)a2[12];
        break;
      }
    }
  }
  if (v20 != v19)
    return 0;
  v22 = (_QWORD *)a2[8];
  if (((a2[9] - (_QWORD)v22) & 0x7FFFFFFF8) == 8)
  {
    v23 = *(_QWORD **)(a3 + 64);
    if (((*(_QWORD *)(a3 + 72) - (_QWORD)v23) & 0x7FFFFFFF8) == 8
      && *v23 == *v22
      && ((v19 - v18) & 0x7FFFFFFF0) == 0)
    {
      return 0;
    }
  }
LABEL_39:
  if (v7 == v8)
  {
LABEL_46:
    v45 = 0;
  }
  else
  {
    v24 = v8;
    while (1)
    {
      v25 = *(unsigned __int16 *)v24[2];
      v26 = v25 > 0x17;
      v27 = (1 << v25) & 0x83E000;
      if (v26 || v27 == 0)
        break;
      v24 = (unint64_t *)v24[1];
      if (v24 == v7)
        goto LABEL_46;
    }
    v29 = (unsigned __int8 *)v24[7];
    v45 = v29;
    if (v29)
    {
      llvm::MetadataTracking::track((uint64_t)&v45, v29, 2);
      v30 = *(_QWORD *)(a4 + 8) + 19056;
      v31 = (llvm::MachineFunction *)a2[4];
      v46 = v45;
      if (v45)
        llvm::MetadataTracking::track((uint64_t)&v46, v45, 2);
      goto LABEL_49;
    }
  }
  v30 = *(_QWORD *)(a4 + 8) + 19056;
  v31 = (llvm::MachineFunction *)a2[4];
  v46 = 0;
LABEL_49:
  v21 = *((_QWORD *)v31 + 28);
  if (v21)
    *((_QWORD *)v31 + 28) = *(_QWORD *)v21;
  else
    v21 = sub_1C484358C((uint64_t)v31 + 128, 72, 3);
  *(_QWORD *)&v47 = v46;
  if (v46)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v46, v46, (uint64_t)&v47);
    v46 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v21, v31, v30, (unsigned __int8 **)&v47, 0);
  if ((_QWORD)v47)
    llvm::MetadataTracking::untrack((uint64_t)&v47, (unsigned __int8 *)v47);
  if (v46)
    llvm::MetadataTracking::untrack((uint64_t)&v46, v46);
  v32 = a2[5];
  *(_QWORD *)(v21 + 24) = v32;
  v33 = *(_QWORD *)(v32 + 32);
  v34 = *(unsigned int *)(v21 + 40);
  if ((_DWORD)v34)
  {
    v38 = *(_QWORD *)(v21 + 32);
    v39 = *(_QWORD *)(v33 + 40);
    v40 = 32 * v34;
    do
    {
      if (!*(_BYTE *)v38)
      {
        v41 = *(unsigned int *)(v38 + 4);
        if ((int)v41 >= 0)
          v42 = (uint64_t *)(*(_QWORD *)(v39 + 272) + 8 * v41);
        else
          v42 = (uint64_t *)(*(_QWORD *)(v39 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
        v43 = *v42;
        if (*v42)
        {
          v44 = *(_QWORD *)(v43 + 16);
          *(_QWORD *)(v43 + 16) = v38;
          *(_QWORD *)(v38 + 16) = v44;
          if ((*(_BYTE *)(v38 + 3) & 1) != 0)
          {
            *(_QWORD *)(v38 + 24) = v43;
          }
          else
          {
            *(_QWORD *)(v38 + 24) = 0;
            v42 = (uint64_t *)(v44 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v38 + 16) = v38;
          *(_QWORD *)(v38 + 24) = 0;
        }
        *v42 = v38;
      }
      v38 += 32;
      v40 -= 32;
    }
    while (v40);
  }
  v35 = *(_QWORD *)(v33 + 728);
  if (v35)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v35 + 24))(v35, v21);
  v36 = *v8 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v21 = v36 | *(_QWORD *)v21 & 7;
  *(_QWORD *)(v21 + 8) = v8;
  *(_QWORD *)(v36 + 8) = v21;
  *v8 = *v8 & 7 | v21;
  *((_QWORD *)&v47 + 1) = 0;
  *(_QWORD *)&v48 = a3;
  LODWORD(v47) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v31, (const llvm::MachineOperand *)&v47);
  LODWORD(v47) = 1;
  *((_QWORD *)&v47 + 1) = 0;
  *(_QWORD *)&v48 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v31, (const llvm::MachineOperand *)&v47);
  v47 = 0u;
  v48 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v31, (const llvm::MachineOperand *)&v47);
  if (v45)
    llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
  return v21;
}

uint64_t sub_1C47BEABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _WORD *v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned __int16 *v18;
  int v19;
  int v20;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16));
  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 24) + 160);
  v7 = (_QWORD *)(v5 + 8);
  if (!v5)
    v7 = 0;
  v8 = *(unsigned int *)(*v7 + 24 * a2 + 16);
  v9 = (_WORD *)(v7[6] + ((v8 >> 3) & 0x1FFFFFFE));
  v10 = *v9 + (v8 & 0xF) * a2;
  do
  {
    v11 = v6[5];
    v12 = v10;
    v13 = 4 * v10;
    v14 = *(unsigned __int16 *)(v11 + v13);
    if (*(_WORD *)(v11 + v13))
    {
      v15 = *(unsigned __int16 *)(v11 + 4 * v12 + 2);
      do
      {
        v16 = v14;
        v14 = v15;
        v17 = v6[6];
        if (v17)
        {
          v18 = (unsigned __int16 *)(v17 + 2 * *(unsigned int *)(*v6 + 24 * (unsigned __int16)v16 + 8));
          do
          {
            llvm::MachineRegisterInfo::clearKillFlags(v4, (unsigned __int16)v16);
            v19 = *v18++;
            v16 += v19;
          }
          while (v19);
        }
        v15 = 0;
      }
      while ((_WORD)v14);
    }
    v20 = (unsigned __int16)v9[1];
    ++v9;
    v10 = v20 + v12;
  }
  while (v20);
  return a2;
}

unint64_t sub_1C47BEBC8(uint64_t a1)
{
  void (***v2)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int v14;
  unint64_t v15;
  _DWORD *v16;
  int v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  BOOL v23;
  uint64_t v24;

  v2 = *(void (****)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(a1 + 344);
  v4 = *(_QWORD **)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
  {
    v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8), a1 + 128, a1);
    *(_QWORD *)(a1 + 48) = v3;
  }
  v5 = *(_DWORD *)(v3 + 16) + 7;
  v6 = v5 & 0xFFFFFFF8;
  if ((v5 & 0xFFFFFFF8) != 0)
  {
    for (i = 0; i != v6; ++i)
    {
      v8 = (i + 1795);
      v9 = (_DWORD *)v4[57];
      v10 = (_DWORD *)v4[58];
      v11 = v9;
      if (v10 == v9)
      {
        v12 = i + 1539;
        v14 = i + 771;
LABEL_19:
        if ((llvm::MachineRegisterInfo::isPhysRegModified(v4, v14, 0) & 1) == 0)
        {
          if ((llvm::MachineRegisterInfo::isPhysRegModified(v4, (int)i + 1795, 0) & 1) == 0
            && (llvm::MachineRegisterInfo::isPhysRegModified(v4, v12, 0) & 1) == 0)
          {
            return v12 | (unint64_t)(v8 << 32);
          }
          break;
        }
      }
      else
      {
        while (*v11 != (_DWORD)v8 && v11[1] != (_DWORD)v8)
        {
          v11 += 2;
          if (v11 == v10)
          {
            v12 = i + 1539;
            v13 = (_DWORD *)v4[57];
            while (*v13 != v12 && v13[1] != v12)
            {
              v13 += 2;
              if (v13 == v10)
              {
                v14 = i + 771;
                while (*v9 != v14 && v9[1] != v14)
                {
                  v9 += 2;
                  if (v9 == v10)
                    goto LABEL_19;
                }
                goto LABEL_20;
              }
            }
            break;
          }
        }
      }
LABEL_20:
      ;
    }
  }
  (**v2)(v2, 0, 0, 1, 1);
  v15 = 0;
  v16 = (_DWORD *)v4[58];
  while (1)
  {
    v17 = v15 + 1283;
    v18 = (_DWORD *)v4[57];
    if (v16 == v18)
      break;
    while (*v18 != v17 && v18[1] != v17)
    {
      v18 += 2;
      if (v18 == v16)
      {
        v19 = v15 + 1027;
        v20 = (_DWORD *)v4[57];
        while (*v20 != v19 && v20[1] != v19)
        {
          v20 += 2;
          if (v20 == v16)
          {
            v21 = v15 | 3;
            v22 = (_DWORD *)v4[57];
            while (*v22 != v21 && v22[1] != v21)
            {
              v22 += 2;
              if (v22 == v16)
                goto LABEL_39;
            }
            goto LABEL_35;
          }
        }
        break;
      }
    }
LABEL_35:
    v23 = v15 >= 0xFC;
    v15 += 4;
    if (v23)
    {
LABEL_44:
      v8 = 1530;
      v12 = 1274;
      return v12 | (unint64_t)(v8 << 32);
    }
  }
  LODWORD(v15) = 0;
LABEL_39:
  v24 = v15 & 0xFFFFFFFC;
  while ((llvm::MachineRegisterInfo::isPhysRegModified(v4, (int)v24 + 3, 0) & 1) != 0
       || (llvm::MachineRegisterInfo::isPhysRegModified(v4, (int)v24 + 1283, 0) & 1) != 0
       || llvm::MachineRegisterInfo::isPhysRegModified(v4, (int)v24 + 1027, 0))
  {
    if (++v24 == 256)
      goto LABEL_44;
  }
  v8 = (v24 + 1283);
  v12 = v24 + 1027;
  return v12 | (unint64_t)(v8 << 32);
}

unint64_t sub_1C47BEE4C(uint64_t a1, llvm::TargetInstrInfo *this)
{
  uint64_t v2;
  unint64_t v5;
  unsigned __int16 *v6;
  int v7;
  BOOL v8;
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 56);
  if (a1 + 48 == v2)
    return 0;
  v5 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (*(_BYTE *)v5 & 4) == 0)
  {
    while ((*(_WORD *)(v5 + 44) & 4) != 0)
      v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    v6 = *(unsigned __int16 **)(v5 + 16);
    v7 = *v6;
    v8 = (v7 - 9) > 0x3C || ((1 << (v7 - 9)) & 0x1000000000000605) == 0;
    v9 = !v8 || v7 == 0;
    if (!v9 && (v6[4] & 0x10) == 0)
      break;
    if (v5 == v2)
      return 0;
    v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    if (!v5 || (*(_BYTE *)v5 & 4) == 0)
    {
      while ((*(_WORD *)(v5 + 44) & 4) != 0)
        v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  while (**(_WORD **)(v5 + 16) != 11576)
  {
    if (v5 != *(_QWORD *)(a1 + 56))
    {
      v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
      if (!v5 || (*(_BYTE *)v5 & 4) == 0)
      {
        while ((*(_WORD *)(v5 + 44) & 4) != 0)
          v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((llvm::TargetInstrInfo::isUnpredicatedTerminator(this, (const llvm::MachineInstr *)v5) & 1) != 0)
        continue;
    }
    return 0;
  }
  return v5;
}

uint64_t sub_1C47BEF78(uint64_t a1)
{
  unsigned __int16 *v1;
  int v2;

  v1 = *(unsigned __int16 **)(a1 + 16);
  v2 = *v1;
  if ((v2 - 9) <= 0x3C && ((1 << (v2 - 9)) & 0x1000000000000605) != 0 || v2 == 0)
    return 1;
  else
    return (*((unsigned __int8 *)v1 + 8) >> 4) & 1;
}

BOOL sub_1C47BEFBC(uint64_t a1, signed int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v8;
  _BOOL8 result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a2;
  v3 = a2 & 0x7FFFFFFF;
  v4 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * v3 + 8);
  if (a2 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * a2);
  v5 = *v4;
  if (v5)
  {
    if ((*(_BYTE *)(v5 + 3) & 1) != 0 || (v5 = *(_QWORD *)(v5 + 24)) != 0 && (*(_BYTE *)(v5 + 3) & 1) != 0)
    {
      v8 = *(_QWORD *)(v5 + 24);
      if (!v8 || (*(_BYTE *)(v8 + 3) & 1) == 0)
      {
        result = sub_1C4778650(a1, a2);
        if (!result)
          return result;
        v10 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * v3 + 8);
        if (a2 >= 0)
          v10 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v2);
        v11 = *v10;
        if ((*(_BYTE *)(v11 + 3) & 1) == 0)
        {
          v11 = *(_QWORD *)(v11 + 24);
          if ((*(_BYTE *)(v11 + 3) & 1) == 0)
            v11 = 0;
        }
        v12 = *(_QWORD *)(v11 + 8);
        if (**(_WORD **)(v12 + 16) == 1015)
        {
          v13 = *(_QWORD *)(v12 + 32);
          if (*(_DWORD *)(v13 + 4) == a2
            && !*(_QWORD *)(v13 + 80)
            && !*(_QWORD *)(v13 + 112)
            && !*(_QWORD *)(v13 + 144)
            && !*(_QWORD *)(v13 + 176))
          {
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

void sub_1C47BF0D0(llvm::MachineBasicBlock *this, int a2, unsigned __int8 **a3, int a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7;
  uint64_t *FirstInstrTerminator;
  uint64_t v14;
  llvm::MachineFunction *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  llvm::MachineInstr *v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  unsigned __int8 *v22;

  LODWORD(v7) = a7;
  if (a6)
    FirstInstrTerminator = (uint64_t *)*((_QWORD *)this + 7);
  else
    FirstInstrTerminator = (uint64_t *)llvm::MachineBasicBlock::getFirstInstrTerminator(this);
  v14 = *(_QWORD *)(a5 + 8);
  v15 = (llvm::MachineFunction *)*((_QWORD *)this + 4);
  v16 = *a3;
  v22 = v16;
  if (v16)
    llvm::MetadataTracking::track((uint64_t)&v22, v16, 2);
  v17 = v14 + 28320;
  v18 = (llvm::MachineInstr *)*((_QWORD *)v15 + 28);
  if (v18)
    *((_QWORD *)v15 + 28) = *(_QWORD *)v18;
  else
    v18 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v15 + 128, 72, 3);
  *(_QWORD *)&v20 = v22;
  if (v22)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v22, v22, (uint64_t)&v20);
    v22 = 0;
  }
  llvm::MachineInstr::MachineInstr(v18, v15, v17, (unsigned __int8 **)&v20, 0);
  if ((_QWORD)v20)
    llvm::MetadataTracking::untrack((uint64_t)&v20, (unsigned __int8 *)v20);
  if (v22)
    llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
  if ((uint64_t *)((char *)this + 48) != FirstInstrTerminator && (*((_WORD *)FirstInstrTerminator + 22) & 4) != 0)
    *((_WORD *)v18 + 22) |= 0xCu;
  if (a2)
    v19 = 2;
  else
    v19 = 1;
  if ((_DWORD)v7 == -1)
    v7 = v19;
  else
    v7 = v7;
  sub_1C512CA10((uint64_t *)this + 5, FirstInstrTerminator, (uint64_t)v18);
  *((_QWORD *)&v20 + 1) = 0;
  v21 = 0uLL;
  LODWORD(v20) = 0x1000000;
  DWORD1(v20) = a4;
  llvm::MachineInstr::addOperand(v18, v15, (const llvm::MachineOperand *)&v20);
  LODWORD(v20) = 1;
  *((_QWORD *)&v20 + 1) = 0;
  *(_QWORD *)&v21 = 0;
  llvm::MachineInstr::addOperand(v18, v15, (const llvm::MachineOperand *)&v20);
  *((_QWORD *)&v20 + 1) = 0;
  v21 = 0uLL;
  LODWORD(v20) = 0;
  DWORD1(v20) = a4;
  llvm::MachineInstr::addOperand(v18, v15, (const llvm::MachineOperand *)&v20);
  LODWORD(v20) = 1;
  *((_QWORD *)&v20 + 1) = 0;
  *(_QWORD *)&v21 = 0;
  llvm::MachineInstr::addOperand(v18, v15, (const llvm::MachineOperand *)&v20);
  LODWORD(v20) = 1;
  *((_QWORD *)&v20 + 1) = 0;
  *(_QWORD *)&v21 = v7;
  llvm::MachineInstr::addOperand(v18, v15, (const llvm::MachineOperand *)&v20);
  LODWORD(v20) = 1;
  *((_QWORD *)&v20 + 1) = 0;
  *(_QWORD *)&v21 = 2;
  llvm::MachineInstr::addOperand(v18, v15, (const llvm::MachineOperand *)&v20);
  v20 = 0u;
  v21 = 0u;
  llvm::MachineInstr::addOperand(v18, v15, (const llvm::MachineOperand *)&v20);
}

void sub_1C47BF2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  BOOL v10;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int StackObject;
  uint64_t v19;
  _QWORD *v20;

  v3 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(v3 + 8);
  v4 = *(_QWORD *)(v3 + 16);
  if (v5 != v4)
  {
    v7 = -858993459 * ((unint64_t)(v4 - v5) >> 3);
    if (v7 - *(_DWORD *)(v3 + 32) > -*(_DWORD *)(v3 + 32))
    {
      v8 = (_BYTE *)(v5 + 18);
      do
      {
        v9 = *(_QWORD *)(v8 - 10);
        if (*v8)
          v10 = v9 == -1;
        else
          v10 = 1;
        if (!v10 && v9 >= 5 && (v9 & 3) != 0)
          *(_QWORD *)(v8 - 10) = (v9 + 2);
        v8 += 40;
        --v7;
      }
      while (v7);
    }
    v13 = *(unsigned __int8 **)(a2 + 16);
    v14 = v13[280];
    v15 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v13 + 176))(v13);
    if (v14)
      v16 = 18;
    else
      v16 = 6;
    v17 = *(_QWORD *)(v15 + 264)
        + 24 * (v16 + *(_DWORD *)(v15 + 272) * ((*(_QWORD *)(v15 + 248) - *(_QWORD *)(v15 + 240)) >> 3));
    StackObject = llvm::MachineFrameInfo::CreateStackObject((unsigned __int8 *)v3, (unint64_t)*(unsigned int *)(v17 + 4) >> 3, 63 - __clz((unint64_t)*(unsigned int *)(v17 + 8) >> 3), 0, 0, 0);
    v19 = *(unsigned int *)(a3 + 56);
    if (v19 >= *(_DWORD *)(a3 + 60))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 48, a3 + 64, v19 + 1, 16);
      LODWORD(v19) = *(_DWORD *)(a3 + 56);
    }
    v20 = (_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v19);
    *v20 = StackObject;
    v20[1] = 0;
    ++*(_DWORD *)(a3 + 56);
  }
}

uint64_t sub_1C47BF444(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t sub_1C47BF450()
{
  return 0;
}

uint64_t sub_1C47BF458()
{
  return 0;
}

uint64_t sub_1C47BF460()
{
  return 0;
}

uint64_t sub_1C47BF46C()
{
  return 0;
}

uint64_t sub_1C47BF474(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1) ^ 1;
}

uint64_t sub_1C47BF494(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 200))(a1, a2);
}

uint64_t sub_1C47BF4EC()
{
  return 1;
}

llvm::MachineFunction **sub_1C47BF4F4(llvm::MachineFunction **a1, int a2, unsigned int a3, __int16 a4)
{
  llvm::MachineInstr *v5;
  llvm::MachineFunction *v6;
  _DWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a1[1];
  v6 = *a1;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v8[0] = (a3 << 23) & 0x13000000 | (((a3 >> 9) & 1) << 27) & 0x1FF000FF | (((a3 >> 8) & 1) << 29) & 0x3FF000FF | ((a3 >> 6) << 30) | (((a3 & 0x18) != 0) << 26) | ((a4 & 0xFFF) << 8);
  v8[1] = a2;
  llvm::MachineInstr::addOperand(v5, v6, (const llvm::MachineOperand *)v8);
  return a1;
}

unint64_t sub_1C47BF56C(_QWORD *a1, _QWORD *a2, unint64_t *a3, unsigned __int8 **a4, int a5, unsigned int a6, int a7)
{
  uint64_t v14;
  unint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  __int16 v26;
  _WORD *v27;
  __int16 v28;
  unint64_t v29;
  uint64_t v30;
  __int16 v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  __int16 v34;
  int v35;
  unint64_t v36;
  uint64_t v39;
  llvm::MachineFunction *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  const llvm::MachineOperand *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  __int128 v71;
  __int128 v72;

  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 1288))(a1);
  v15 = (unint64_t *)a2[7];
  if (v15 == a3)
    return 0;
  v16 = 0;
  v17 = *(_QWORD *)(v14 + 8);
  v18 = *(_QWORD *)(v14 + 56);
  v19 = (unint64_t)a3;
  while (1)
  {
    v19 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8;
    if (!v19 || (*(_BYTE *)v19 & 4) == 0)
    {
      while ((*(_WORD *)(v19 + 44) & 4) != 0)
        v19 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((*(_BYTE *)(*(_QWORD *)(v19 + 16) + 9) & 0x20) != 0)
    {
      v20 = *(_QWORD *)(v19 + 32);
      if (*(_DWORD *)(v20 + 4) == a6)
        break;
    }
    v21 = *(unsigned int *)(v19 + 40);
    if ((_DWORD)v21)
    {
      v22 = 0;
      v23 = *(_QWORD *)(v19 + 32);
      while ((*(_DWORD *)(v23 + 32 * v22) & 0x30000FF) != 0x1000000)
      {
LABEL_18:
        if (++v22 == v21)
          goto LABEL_19;
      }
      v24 = *(_DWORD *)(v23 + 32 * v22 + 4);
      v25 = *(unsigned int *)(v17 + 24 * v24 + 16);
      v26 = v25 & 0xF;
      v27 = (_WORD *)(v18 + ((v25 >> 3) & 0x1FFFFFFE));
      v28 = *v27 + v26 * v24;
      v29 = *(unsigned int *)(v17 + 24 * a6 + 16);
      v30 = (v29 >> 3) & 0x1FFFFFFE;
      v31 = *(_WORD *)(v18 + v30) + (v29 & 0xF) * a6;
      v32 = (unsigned __int16 *)(v18 + 2 + v30);
LABEL_14:
      ++v27;
      v33 = v32;
      v34 = v31;
      while (v28 != v34)
      {
        v35 = *v33++;
        v34 += v35;
        if (!v35)
        {
          v28 += *v27;
          if (*v27)
            goto LABEL_14;
          goto LABEL_18;
        }
      }
      return 0;
    }
LABEL_19:
    v36 = 0;
    if ((unint64_t *)v19 != v15 && v16++ < 0xF)
      continue;
    return v36;
  }
  if (*(_QWORD *)(v20 + 32 * llvm::MachineInstr::findFirstPredOperandIdx((llvm::MachineInstr *)v19) + 16))
    return 0;
  v39 = a1[1];
  if (a7)
  {
    v40 = (llvm::MachineFunction *)a2[4];
    v41 = *a4;
    v70 = v41;
    if (v41)
      llvm::MetadataTracking::track((uint64_t)&v70, v41, 2);
    v42 = v39 + 69360;
    v36 = *((_QWORD *)v40 + 28);
    if (v36)
      *((_QWORD *)v40 + 28) = *(_QWORD *)v36;
    else
      v36 = sub_1C484358C((uint64_t)v40 + 128, 72, 3);
    *(_QWORD *)&v71 = v70;
    if (v70)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v70, v70, (uint64_t)&v71);
      v70 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v36, v40, v42, (unsigned __int8 **)&v71, 0);
    if ((_QWORD)v71)
      llvm::MetadataTracking::untrack((uint64_t)&v71, (unsigned __int8 *)v71);
    if (v70)
      llvm::MetadataTracking::untrack((uint64_t)&v70, v70);
    v45 = a2[5];
    *(_QWORD *)(v36 + 24) = v45;
    v46 = *(_QWORD *)(v45 + 32);
    v47 = *(unsigned int *)(v36 + 40);
    if ((_DWORD)v47)
    {
      v56 = *(_QWORD *)(v36 + 32);
      v57 = *(_QWORD *)(v46 + 40);
      v58 = 32 * v47;
      do
      {
        if (!*(_BYTE *)v56)
        {
          v59 = *(unsigned int *)(v56 + 4);
          if ((int)v59 >= 0)
            v60 = (uint64_t *)(*(_QWORD *)(v57 + 272) + 8 * v59);
          else
            v60 = (uint64_t *)(*(_QWORD *)(v57 + 24) + 16 * (v59 & 0x7FFFFFFF) + 8);
          v61 = *v60;
          if (*v60)
          {
            v62 = *(_QWORD *)(v61 + 16);
            *(_QWORD *)(v61 + 16) = v56;
            *(_QWORD *)(v56 + 16) = v62;
            if ((*(_BYTE *)(v56 + 3) & 1) != 0)
            {
              *(_QWORD *)(v56 + 24) = v61;
            }
            else
            {
              *(_QWORD *)(v56 + 24) = 0;
              v60 = (uint64_t *)(v62 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v56 + 16) = v56;
            *(_QWORD *)(v56 + 24) = 0;
          }
          *v60 = v56;
        }
        v56 += 32;
        v58 -= 32;
      }
      while (v58);
    }
    v48 = *(_QWORD *)(v46 + 728);
    if (v48)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v48 + 24))(v48, v36);
    v49 = *a3 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v36 = v49 | *(_QWORD *)v36 & 7;
    *(_QWORD *)(v36 + 8) = a3;
    *(_QWORD *)(v49 + 8) = v36;
    *a3 = *a3 & 7 | v36;
    *((_QWORD *)&v71 + 1) = 0;
    v72 = 0uLL;
    LODWORD(v71) = 0x1000000;
    DWORD1(v71) = a5;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v40, (const llvm::MachineOperand *)&v71);
    LODWORD(v71) = 1;
    *((_QWORD *)&v71 + 1) = 0;
    *(_QWORD *)&v72 = 0;
    v50 = (const llvm::MachineOperand *)&v71;
  }
  else
  {
    v40 = (llvm::MachineFunction *)a2[4];
    v43 = *a4;
    v70 = v43;
    if (v43)
      llvm::MetadataTracking::track((uint64_t)&v70, v43, 2);
    v44 = v39 + 48720;
    v36 = *((_QWORD *)v40 + 28);
    if (v36)
      *((_QWORD *)v40 + 28) = *(_QWORD *)v36;
    else
      v36 = sub_1C484358C((uint64_t)v40 + 128, 72, 3);
    *(_QWORD *)&v71 = v70;
    if (v70)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v70, v70, (uint64_t)&v71);
      v70 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v36, v40, v44, (unsigned __int8 **)&v71, 0);
    if ((_QWORD)v71)
      llvm::MetadataTracking::untrack((uint64_t)&v71, (unsigned __int8 *)v71);
    if (v70)
      llvm::MetadataTracking::untrack((uint64_t)&v70, v70);
    v51 = a2[5];
    *(_QWORD *)(v36 + 24) = v51;
    v52 = *(_QWORD *)(v51 + 32);
    v53 = *(unsigned int *)(v36 + 40);
    if ((_DWORD)v53)
    {
      v63 = *(_QWORD *)(v36 + 32);
      v64 = *(_QWORD *)(v52 + 40);
      v65 = 32 * v53;
      do
      {
        if (!*(_BYTE *)v63)
        {
          v66 = *(unsigned int *)(v63 + 4);
          if ((int)v66 >= 0)
            v67 = (uint64_t *)(*(_QWORD *)(v64 + 272) + 8 * v66);
          else
            v67 = (uint64_t *)(*(_QWORD *)(v64 + 24) + 16 * (v66 & 0x7FFFFFFF) + 8);
          v68 = *v67;
          if (*v67)
          {
            v69 = *(_QWORD *)(v68 + 16);
            *(_QWORD *)(v68 + 16) = v63;
            *(_QWORD *)(v63 + 16) = v69;
            if ((*(_BYTE *)(v63 + 3) & 1) != 0)
            {
              *(_QWORD *)(v63 + 24) = v68;
            }
            else
            {
              *(_QWORD *)(v63 + 24) = 0;
              v67 = (uint64_t *)(v69 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v63 + 16) = v63;
            *(_QWORD *)(v63 + 24) = 0;
          }
          *v67 = v63;
        }
        v63 += 32;
        v65 -= 32;
      }
      while (v65);
    }
    v54 = *(_QWORD *)(v52 + 728);
    if (v54)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v54 + 24))(v54, v36);
    v55 = *a3 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v36 = v55 | *(_QWORD *)v36 & 7;
    *(_QWORD *)(v36 + 8) = a3;
    *(_QWORD *)(v55 + 8) = v36;
    *a3 = *a3 & 7 | v36;
    *((_QWORD *)&v71 + 1) = 0;
    v72 = 0uLL;
    LODWORD(v71) = 0x1000000;
    DWORD1(v71) = a5;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v40, (const llvm::MachineOperand *)&v71);
    LODWORD(v71) = 1;
    *((_QWORD *)&v71 + 1) = 0;
    *(_QWORD *)&v72 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v40, (const llvm::MachineOperand *)&v71);
    v50 = (const llvm::MachineOperand *)(*(_QWORD *)(v19 + 32) + 64);
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v40, v50);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v40, (const llvm::MachineOperand *)(*(_QWORD *)(v19 + 32) + 64));
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v40, (const llvm::MachineOperand *)(*(_QWORD *)(v19 + 32) + 64));
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v40, (const llvm::MachineOperand *)(*(_QWORD *)(v19 + 32) + 64));
  v71 = 0u;
  v72 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v40, (const llvm::MachineOperand *)&v71);
  LODWORD(v71) = 1;
  *((_QWORD *)&v71 + 1) = 0;
  *(_QWORD *)&v72 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v40, (const llvm::MachineOperand *)&v71);
  v71 = 0u;
  v72 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v40, (const llvm::MachineOperand *)&v71);
  return v36;
}

void sub_1C47BFB50(_QWORD *a1, _QWORD *a2, unint64_t *a3, unsigned __int8 **a4, unsigned int a5, unsigned int a6, int a7)
{
  unsigned int v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  int v37;
  _BOOL4 v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned __int16 v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  int v53;
  int v54;
  unsigned __int8 *v55;
  llvm::MachineFunction *v56;
  unsigned __int8 *v57;
  unsigned __int8 **v58;
  unsigned int v59;
  unsigned __int8 *v60;
  llvm::MachineFunction *v61;
  int v62;
  int v63;
  int v64;
  llvm::MachineFunction *v68;
  llvm::MachineInstr *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v11 = a5 - 1;
  v12 = a5 >> 3;
  if (a5 - 1 > 0x3FFFFFFE)
    goto LABEL_17;
  if (a5 > 0x407)
  {
    if (a5 > 0x807)
      goto LABEL_17;
    v15 = v12;
    v13 = 1 << (a5 & 7);
  }
  else
  {
    v13 = 1 << (a5 & 7);
    v14 = (v13 & byte_1C6872272[v12]) == 0 || a6 - 1 > 0x3FFFFFFE;
    if (v14 || a6 > 0x407)
    {
      v15 = a5 >> 3;
    }
    else
    {
      v15 = a5 >> 3;
      if (((byte_1C6872272[a6 >> 3] >> (a6 & 7)) & 1) != 0)
      {
        v16 = *a4;
        v73 = v16;
        if (v16)
          llvm::MetadataTracking::track((uint64_t)&v73, v16, 2);
        sub_1C612BD5C(a1, a2, a3, &v73, a5, a6, a7);
        v17 = v73;
        if (v73)
        {
          v18 = &v73;
LABEL_79:
          llvm::MetadataTracking::untrack((uint64_t)v18, v17);
          return;
        }
        return;
      }
    }
  }
  if ((v13 & byte_1C68704E6[v15]) == 0)
  {
LABEL_17:
    v19 = (*(uint64_t (**)(_QWORD *))(*a1 + 1288))(a1);
    v20 = (_QWORD *)v19;
    v21 = 0;
    v22 = (unint64_t)a6 >> 3;
    while (1)
    {
      if (v11 <= 0x3FFFFFFE)
      {
        v23 = (uint64_t)*(&off_1E7F95628)[v21];
        v24 = *(unsigned __int16 *)(v23 + 22);
        if (v12 < v24)
        {
          v25 = *(_QWORD *)(v23 + 8);
          v26 = ((1 << (a5 & 7)) & *(unsigned __int8 *)(v25 + v12)) == 0 || a6 - 1 > 0x3FFFFFFE;
          v27 = v26 || v22 >= v24;
          if (!v27 && ((1 << (a6 & 7)) & *(unsigned __int8 *)(v25 + v22)) != 0)
            break;
        }
      }
      v21 += 3;
      if (v21 == 87)
        return;
    }
    v28 = HIDWORD((&off_1E7F95628)[v21 + 1]);
    v29 = a5;
    v30 = (_QWORD *)(v19 + 8);
    v31 = v20[1];
    v32 = v20[7];
    v33 = *(unsigned int *)(v31 + 24 * a5 + 4);
    v34 = *(unsigned __int16 *)(v32 + 2 * v33);
    if (!*(_WORD *)(v32 + 2 * v33))
      goto LABEL_36;
    LOWORD(v34) = v34 + a5;
    v35 = (unsigned __int16 *)(v20[11] + 2 * *(unsigned int *)(v31 + 24 * a5 + 12));
    v36 = (unsigned __int16 *)(v32 + 2 * v33 + 2);
    while (v28 != *v35)
    {
      v37 = *v36++;
      LOWORD(v34) = v37 + v34;
      ++v35;
      if (!v37)
      {
        v34 = 0;
        goto LABEL_36;
      }
    }
    v34 = (unsigned __int16)v34;
LABEL_36:
    if (v34 == a6)
    {
      v62 = 1;
    }
    else if (v34 - 1 > 0x3FFFFFFE)
    {
      v62 = 0;
    }
    else
    {
      v38 = llvm::MCRegisterInfo::regsOverlap(v30, a6, v34);
      v29 = a5;
      v62 = v38;
    }
    v39 = 0;
    v64 = (int)(&off_1E7F95628)[v21 + 2];
    v61 = (llvm::MachineFunction *)a2[4];
    v63 = LOBYTE((&off_1E7F95628)[v21 + 1]);
    while (1)
    {
      v40 = v64 - v39;
      if (!v62)
        v40 = v39 + v28;
      v41 = v20[1];
      v42 = v20[7];
      v43 = *(unsigned int *)(v41 + 24 * a6 + 4);
      if (*(_WORD *)(v42 + 2 * v43))
      {
        v44 = *(_WORD *)(v42 + 2 * v43) + a6;
        v45 = (unsigned __int16 *)(v20[11] + 2 * *(unsigned int *)(v41 + 24 * a6 + 12));
        v46 = (unsigned __int16 *)(v42 + 2 * v43 + 2);
        while (v40 != *v45)
        {
          v47 = *v46++;
          v44 += v47;
          ++v45;
          if (!v47)
            goto LABEL_48;
        }
        v48 = v44;
      }
      else
      {
LABEL_48:
        v48 = 0;
      }
      v49 = *(unsigned int *)(v41 + 24 * v29 + 4);
      if (*(_WORD *)(v42 + 2 * v49))
      {
        v50 = *(_WORD *)(v42 + 2 * v49) + a5;
        v51 = (unsigned __int16 *)(v20[11] + 2 * *(unsigned int *)(v41 + 24 * v29 + 12));
        v52 = (unsigned __int16 *)(v42 + 2 * v49 + 2);
        while (v40 != *v51)
        {
          v53 = *v52++;
          v50 += v53;
          ++v51;
          if (!v53)
            goto LABEL_54;
        }
        v54 = v50;
      }
      else
      {
LABEL_54:
        v54 = 0;
      }
      v55 = *a4;
      if (v63)
      {
        v71 = *a4;
        if (v55)
          llvm::MetadataTracking::track((uint64_t)&v71, v55, 2);
        v56 = sub_1C612BD5C(a1, a2, a3, &v71, v54, v48, a7);
        v57 = v71;
        if (!v71)
          goto LABEL_66;
        v58 = &v71;
      }
      else
      {
        v70 = *a4;
        if (v55)
          llvm::MetadataTracking::track((uint64_t)&v70, v55, 2);
        v56 = sub_1C612BF28(a1, a2, a3, &v70, v54, v48, a7);
        v57 = v70;
        if (!v70)
          goto LABEL_66;
        v58 = &v70;
      }
      llvm::MetadataTracking::untrack((uint64_t)v58, v57);
LABEL_66:
      v68 = v61;
      v69 = v56;
      if (*(_BYTE *)(*(_QWORD *)(a2[4] + 40) + 16))
      {
        if (((v39 != 0) & a7) != 0)
          v59 = 36;
        else
          v59 = 4;
        sub_1C47BF4F4(&v68, a6, v59, 0);
      }
      else
      {
        v76 = 0;
        v77 = 0;
        v78 = 0;
        v74 = 50331648;
        v75 = a5;
        llvm::MachineInstr::addOperand(v56, v61, (const llvm::MachineOperand *)&v74);
        if (v39)
        {
          v76 = 0;
          v77 = 0;
          v78 = 0;
          v74 = 0x2000000;
          v75 = a5;
          llvm::MachineInstr::addOperand(v69, v68, (const llvm::MachineOperand *)&v74);
        }
      }
      ++v39;
      v29 = a5;
      if (v39 > v64 - v28)
        return;
    }
  }
  v60 = *a4;
  v72 = v60;
  if (v60)
    llvm::MetadataTracking::track((uint64_t)&v72, v60, 2);
  sub_1C612BF28(a1, a2, a3, &v72, a5, a6, a7);
  v17 = v72;
  if (v72)
  {
    v18 = &v72;
    goto LABEL_79;
  }
}

uint64_t sub_1C47C0074(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C47C009C + 4 * byte_1C641061C[a1 - 1]))();
}

uint64_t sub_1C47C009C@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, unsigned int a8@<W7>, int a9@<W8>)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  char *v28;

  if ((a7 || v9 != 1) && (a7 != 1 || v9))
  {
    if (a2)
      v19 = 64;
    else
      v19 = 0;
    v20 = v19 | (a1 << 7);
    if (a3)
      v21 = 32;
    else
      v21 = 0;
    if (a4)
      v22 = 16;
    else
      v22 = 0;
    v23 = v21 | v22;
    if (a5)
      v24 = 8;
    else
      v24 = 0;
    v25 = v20 | v23 | v24;
    if (a6)
      v26 = 4;
    else
      v26 = 0;
    v27 = v25 | v26 | (2 * (a7 != 3)) | a8;
    if (v9 || (a9 & 1) != 0)
    {
      if (a9)
        v28 = (char *)&unk_1C6412774;
      else
        v28 = (char *)&unk_1C6410974;
    }
    else
    {
      v28 = (char *)&unk_1C6411574;
    }
    v18 = &v28[4 * v27];
  }
  else
  {
    if (a2)
      v10 = 32;
    else
      v10 = 0;
    v11 = v10 | (a1 << 6);
    if (a3)
      v12 = 16;
    else
      v12 = 0;
    if (a4)
      v13 = 8;
    else
      v13 = 0;
    v14 = v12 | v13;
    if (a5)
      v15 = 4;
    else
      v15 = 0;
    v16 = v11 | v14 | v15;
    if (a6)
      v17 = 2;
    else
      v17 = 0;
    v18 = (char *)&unk_1C6412174 + 4 * (v16 | v17 | (a7 == 0));
  }
  return *(unsigned int *)v18;
}

uint64_t sub_1C47C01E0(int a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, int a10)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  char *v29;
  char *v30;

  v10 = dword_1C6416980[a1 - 10];
  if ((a8 || a10 != 1) && (a8 != 1 || a10))
  {
    if (a3)
      v20 = 64;
    else
      v20 = 0;
    v21 = v20 | (v10 << 7);
    if (a4)
      v22 = 32;
    else
      v22 = 0;
    if (a5)
      v23 = 16;
    else
      v23 = 0;
    v24 = v22 | v23;
    if (a6)
      v25 = 8;
    else
      v25 = 0;
    v26 = v24 | v25;
    if (a7)
      v27 = 4;
    else
      v27 = 0;
    v28 = v21 | v26 | v27 | (2 * (a8 != 3)) | a9;
    v29 = (char *)&unk_1C6413374 + 4 * v28;
    v30 = (char *)&unk_1C6414774 + 4 * v28;
    if (a10)
      v19 = (unsigned int *)v29;
    else
      v19 = (unsigned int *)v30;
  }
  else
  {
    if (a3)
      v11 = 32;
    else
      v11 = 0;
    v12 = v11 | (v10 << 6);
    if (a4)
      v13 = 16;
    else
      v13 = 0;
    if (a5)
      v14 = 8;
    else
      v14 = 0;
    v15 = v13 | v14;
    if (a6)
      v16 = 4;
    else
      v16 = 0;
    v17 = v15 | v16;
    if (a7)
      v18 = 2;
    else
      v18 = 0;
    v19 = (unsigned int *)((char *)&unk_1C6415B74 + 4 * (v12 | v17 | v18 | (a8 == 0)));
  }
  return *v19;
}

uint64_t sub_1C47C0304(char a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  int v17;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  result = 0;
  if (a1 || (a2 & 0x80000000) == 0)
    return result;
  v20 = v3;
  v21 = v4;
  if (!llvm::MachineRegisterInfo::hasOneNonDBGUse(a3, a2))
    return 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  if (!v9)
    return 0;
  if ((*(_BYTE *)(v9 + 3) & 1) == 0)
  {
    v9 = *(_QWORD *)(v9 + 24);
    if (!v9 || (*(_BYTE *)(v9 + 3) & 1) == 0)
      return 0;
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    return 0;
  if ((*(_WORD *)(v10 + 44) & 0xC) != 0 && (*(_WORD *)(v10 + 44) & 4) == 0)
  {
    for (i = *(_QWORD *)(v9 + 8); ; i = *(_QWORD *)(i + 8))
    {
      v14 = *(_QWORD *)(i + 16);
      if ((*(_BYTE *)(v14 + 10) & 0x40) == 0 && *(_WORD *)v14 != 20)
        break;
      if ((*(_WORD *)(i + 44) & 8) == 0)
      {
        v12 = *(_QWORD *)(v10 + 16);
        goto LABEL_23;
      }
    }
    return 0;
  }
  v12 = *(_QWORD *)(v10 + 16);
  if ((*(_BYTE *)(v12 + 10) & 0x40) == 0)
    return 0;
LABEL_23:
  if ((*(_BYTE *)(v12 + 17) & 2) != 0)
    return 0;
  v15 = *(_DWORD *)(v10 + 40) - 1;
  if (*(_DWORD *)(v10 + 40) != 1)
  {
    v16 = (_DWORD *)(*(_QWORD *)(v10 + 32) + 36);
    do
    {
      v17 = *(v16 - 1);
      if ((_BYTE)v17)
      {
        if (v17 - 5 < 2 || v17 == 8)
          return 0;
      }
      else if ((v17 & 0xF00000) != 0
             || (*v16 - 1) < 0x3FFFFFFF
             || (v17 & 0x1000000) != 0 && (v17 & 0x5000000) != 0x5000000)
      {
        return 0;
      }
      v16 += 8;
      --v15;
    }
    while (v15);
  }
  v19 = 1;
  if (llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v10, 0, &v19))
    return v10;
  else
    return 0;
}

BOOL sub_1C47C0480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int v10;
  int v11;
  char v12;
  char v13;
  int v14;
  uint64_t v15;
  char v16;
  int v17;
  _BOOL8 v18;
  int v19;
  uint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  BOOL v26;
  int v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int *v35;
  unint64_t v36;
  int *v37;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  void **v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v54;
  int v55;
  int v56;
  uint64_t *v57;
  uint64_t i;
  _BYTE *v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  _DWORD v65[2];
  _QWORD v66[2];
  void *__s1;
  uint64_t v68;
  uint64_t v69;
  int v70;
  void *__s2;
  uint64_t v72;
  _BYTE v73[48];
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  __s1 = &v69;
  v68 = 0x600000000;
  sub_1C4765AA4((char *)&__s1, 2uLL, 0);
  v70 = 128;
  __s2 = v73;
  v72 = 0x600000000;
  sub_1C4765AA4((char *)&__s2, 2uLL, 0);
  v5 = 0;
  v74 = 128;
  v6 = *(unsigned __int16 **)(a2 + 16);
  v7 = *((_QWORD *)v6 + 2);
  v8 = *(unsigned __int16 **)(a3 + 16);
  v9 = *((_QWORD *)v8 + 2);
  v66[0] = v7;
  v66[1] = v9;
  v10 = *v6;
  v11 = *v8;
  v65[0] = v10;
  v65[1] = v11;
  v64[0] = a2;
  v64[1] = a3;
  v12 = 1;
  do
  {
    v13 = v12;
    v14 = v65[v5];
    if ((v14 - 11972) < 2 || v14 == 813)
    {
      v15 = v5 ^ 1;
      if (sub_1C477C96C(v65[v5 ^ 1]) || (v66[v15] & 0x2000) != 0)
        goto LABEL_14;
    }
    v12 = 0;
    v5 = 1;
  }
  while ((v13 & 1) != 0);
  if (((v7 | v9) & 0x20) != 0)
  {
    if (!sub_1C477C96C(v10) || !sub_1C477C96C(v11))
      goto LABEL_86;
LABEL_14:
    v18 = 0;
    goto LABEL_87;
  }
  if ((v10 - 13424) < 3)
    goto LABEL_11;
  if (v10 == 13427)
  {
    v17 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 48);
    v16 = 1;
  }
  else
  {
    if (v10 == 13428)
    {
LABEL_11:
      v16 = 1;
      v17 = -1;
      goto LABEL_17;
    }
    v17 = 0;
    v16 = 0;
  }
LABEL_17:
  v19 = -1;
  if ((v11 - 13424) < 3 || v11 == 13428)
    goto LABEL_21;
  if (v11 == 13427)
  {
    v19 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 48);
LABEL_21:
    if ((v16 & 1) == 0)
      goto LABEL_86;
    v18 = (v17 | v19) >= 0 && v17 != v19;
    goto LABEL_87;
  }
  v18 = 1;
  if ((v16 & 1) != 0)
    goto LABEL_87;
  v21 = 0;
  v22 = 1;
  do
  {
    v23 = v22;
    HIDWORD(v25) = v65[v21] - 11791;
    LODWORD(v25) = HIDWORD(v25);
    v24 = v25 >> 1;
    v26 = v24 > 9;
    v27 = (1 << v24) & 0x303;
    if (!v26 && v27 != 0)
    {
      v29 = *(&__s1 + 9 * v21);
      *v29 |= 8uLL;
      goto LABEL_35;
    }
    v34 = v64[v21];
    v35 = (int *)(v34 + 48);
    v36 = *(_QWORD *)(v34 + 48);
    if (v36 >= 8)
    {
      if ((v36 & 7) == 0)
      {
        *(_QWORD *)(v34 + 48) = v36 & 0xFFFFFFFFFFFFFFF8;
        v41 = (int *)(v34 + 56);
LABEL_57:
        v42 = &__s1 + 9 * v21;
        while (1)
        {
          v43 = *(_DWORD *)(*(_QWORD *)v35 + 16);
          if (!v43 && (v66[v21] & 0x30000) == 0)
            goto LABEL_14;
          v29 = *v42;
          *((_QWORD *)*v42 + (v43 >> 6)) |= 1 << v43;
          v35 += 2;
          if (v35 == v41)
            goto LABEL_35;
        }
      }
      v37 = (int *)(v36 & 0xFFFFFFFFFFFFFFF8);
      if ((*(_QWORD *)(v34 + 48) & 7) == 3 && v37 != 0)
      {
        v40 = *v37;
        v35 = v37 + 2;
        v39 = v40;
        if ((_DWORD)v40)
        {
          v41 = &v35[2 * v39];
          goto LABEL_57;
        }
      }
    }
    v29 = *(&__s1 + 9 * v21);
LABEL_35:
    v30 = *((unsigned int *)&__s1 + 18 * v21 + 2);
    v31 = 8 * v30;
    if ((_DWORD)v30)
    {
      v32 = 8 * v30;
      v33 = v29;
      while (!*v33)
      {
        ++v33;
        v32 -= 8;
        if (!v32)
          goto LABEL_39;
      }
    }
    else
    {
LABEL_39:
      if ((v66[v21] & 0x30000) != 0)
        *v29 |= 1uLL;
    }
    if (!(_DWORD)v30)
      goto LABEL_14;
    while (!*v29)
    {
      v18 = 0;
      ++v29;
      v31 -= 8;
      if (!v31)
        goto LABEL_87;
    }
    v22 = 0;
    v21 = 1;
  }
  while ((v23 & 1) != 0);
  v44 = v68;
  if (v70 != v74)
    goto LABEL_67;
  if (memcmp(__s1, __s2, 8 * v68))
    goto LABEL_67;
  v62 = 0;
  v63 = 0;
  v61 = 0;
  if (!sub_1C612D454(a2, (int *)&v61 + 1, (_DWORD *)&v63 + 1, (int *)&v62 + 1)
    || !sub_1C612D454(a3, (int *)&v61, &v63, (int *)&v62)
    || HIDWORD(v61) != (_DWORD)v61)
  {
    goto LABEL_67;
  }
  v55 = HIDWORD(v63);
  if (SHIDWORD(v63) >= (int)v63)
    v56 = v63;
  else
    v56 = HIDWORD(v63);
  if (SHIDWORD(v63) <= (int)v63)
    v55 = v63;
  v57 = (uint64_t *)((char *)&v62 + 4);
  if (SHIDWORD(v63) > (int)v63)
    v57 = &v62;
  if (*(_DWORD *)v57 + v56 > v55)
  {
LABEL_67:
    v45 = v72 >= v44 ? v44 : v72;
    if ((_DWORD)v45)
    {
      v46 = (uint64_t *)__s1;
      v47 = (uint64_t *)__s2;
      v48 = v45 - 1;
      do
      {
        v50 = *v46++;
        v49 = v50;
        v51 = *v47++;
        v52 = v51 & v49;
        v18 = (v51 & v49) == 0;
        v54 = v48-- != 0;
      }
      while (!v52 && v54);
      goto LABEL_87;
    }
  }
LABEL_86:
  v18 = 1;
LABEL_87:
  for (i = 0; i != -144; i -= 72)
  {
    v59 = *(void **)((char *)&__s2 + i);
    if (&v73[i] != v59)
      free(v59);
  }
  return v18;
}

uint64_t sub_1C47C0910()
{
  return 0;
}

uint64_t sub_1C47C0918()
{
  return 0;
}

uint64_t sub_1C47C0920()
{
  return 0;
}

uint64_t sub_1C47C0928()
{
  return 0;
}

uint64_t sub_1C47C0930()
{
  return 0;
}

uint64_t sub_1C47C0938(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((*(_WORD *)(a2 + 44) & 0xC) == 0 || (*(_WORD *)(a2 + 44) & 4) != 0)
    return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 11) >> 6) & 1;
  while (1)
  {
    v4 = *(_QWORD *)(a2 + 16);
    if ((*(_BYTE *)(v4 + 11) & 0x40) == 0 && *(_WORD *)v4 != 20)
      break;
    if ((*(_WORD *)(a2 + 44) & 8) == 0)
      return 1;
    a2 = *(_QWORD *)(a2 + 8);
  }
  return 0;
}

void sub_1C47C0994(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t sub_1C47C09A0()
{
  return 0;
}

uint64_t sub_1C47C09A8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 448))(a1, a2, a3, a4);
}

uint64_t sub_1C47C09B8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 464))(a1, a2, a3, a4);
}

uint64_t sub_1C47C09C8()
{
  return 0;
}

uint64_t sub_1C47C09D0()
{
  return 0;
}

uint64_t sub_1C47C09D8()
{
  return 0;
}

double sub_1C47C09E0@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1C64169D0;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_BYTE *)(a1 + 160) = 0;
  *(_DWORD *)a1 = 12022;
  *(_OWORD *)(a1 + 48) = xmmword_1C64169D0;
  *(_OWORD *)(a1 + 64) = xmmword_1C64169D0;
  *(_OWORD *)(a1 + 80) = xmmword_1C64169E0;
  *(_QWORD *)&result = 0x800000004;
  *(_QWORD *)(a1 + 24) = 0x800000004;
  return result;
}

uint64_t sub_1C47C0A24()
{
  return 1;
}

uint64_t sub_1C47C0A2C()
{
  return 0;
}

uint64_t sub_1C47C0A34()
{
  return 0;
}

uint64_t sub_1C47C0A3C()
{
  return 5;
}

uint64_t sub_1C47C0A44()
{
  return 1;
}

uint64_t sub_1C47C0A4C()
{
  return 16;
}

uint64_t sub_1C47C0A54(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
  if ((*(_WORD *)(a2 + 44) & 0xC) == 0 || (*(_WORD *)(a2 + 44) & 4) != 0)
  {
    if ((v2 & 0x20) != 0)
      return (v2 >> 7) & 1;
    return 0;
  }
  if ((v2 & 0x20) == 0)
  {
    v5 = a2;
    while ((*(_WORD *)(v5 + 44) & 8) != 0)
    {
      v5 = *(_QWORD *)(v5 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v5 + 16) + 8) & 0x20) != 0)
        goto LABEL_12;
    }
    return 0;
  }
LABEL_12:
  if ((v2 & 0x80) != 0)
    return 1;
  do
  {
    v6 = *(unsigned __int16 *)(a2 + 44);
    result = (v6 >> 3) & 1;
    if ((v6 & 8) == 0)
      break;
    a2 = *(_QWORD *)(a2 + 8);
  }
  while ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + 8) & 0x80) == 0);
  return result;
}

uint64_t sub_1C47C0AD4()
{
  return 0;
}

unint64_t sub_1C47C0ADC(uint64_t a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, int a5, int a6)
{
  uint64_t v10;
  llvm::MachineFunction *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(llvm::MachineFunction **)(a2 + 32);
  v12 = *a4;
  v28 = v12;
  if (v12)
    llvm::MetadataTracking::track((uint64_t)&v28, v12, 2);
  v13 = v10 + 912;
  v14 = *((_QWORD *)v11 + 28);
  if (v14)
    *((_QWORD *)v11 + 28) = *(_QWORD *)v14;
  else
    v14 = sub_1C484358C((uint64_t)v11 + 128, 72, 3);
  v29 = v28;
  if (v28)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v28, v28, (uint64_t)&v29);
    v28 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v14, v11, v13, &v29, 0);
  if (v29)
    llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
  if (v28)
    llvm::MetadataTracking::untrack((uint64_t)&v28, v28);
  v15 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v14 + 24) = v15;
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(unsigned int *)(v14 + 40);
  if ((_DWORD)v17)
  {
    v21 = *(_QWORD *)(v14 + 32);
    v22 = *(_QWORD *)(v16 + 40);
    v23 = 32 * v17;
    do
    {
      if (!*(_BYTE *)v21)
      {
        v24 = *(unsigned int *)(v21 + 4);
        if ((int)v24 >= 0)
          v25 = (uint64_t *)(*(_QWORD *)(v22 + 272) + 8 * v24);
        else
          v25 = (uint64_t *)(*(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
        v26 = *v25;
        if (*v25)
        {
          v27 = *(_QWORD *)(v26 + 16);
          *(_QWORD *)(v26 + 16) = v21;
          *(_QWORD *)(v21 + 16) = v27;
          if ((*(_BYTE *)(v21 + 3) & 1) != 0)
          {
            *(_QWORD *)(v21 + 24) = v26;
          }
          else
          {
            *(_QWORD *)(v21 + 24) = 0;
            v25 = (uint64_t *)(v27 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v21 + 16) = v21;
          *(_QWORD *)(v21 + 24) = 0;
        }
        *v25 = v21;
      }
      v21 += 32;
      v23 -= 32;
    }
    while (v23);
  }
  v18 = *(_QWORD *)(v16 + 728);
  if (v18)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v18 + 24))(v18, v14);
  v19 = *a3 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = v19 | *(_QWORD *)v14 & 7;
  *(_QWORD *)(v14 + 8) = a3;
  *(_QWORD *)(v19 + 8) = v14;
  *a3 = *a3 & 7 | v14;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  LODWORD(v29) = 0x1000000;
  HIDWORD(v29) = a6;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v11, (const llvm::MachineOperand *)&v29);
  v30 = 0;
  v31 = 0;
  LODWORD(v29) = 0;
  HIDWORD(v29) = a5;
  v32 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v11, (const llvm::MachineOperand *)&v29);
  return v14;
}

unint64_t sub_1C47C0CEC(uint64_t a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, int a5, __int16 a6, int a7)
{
  uint64_t v12;
  llvm::MachineFunction *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(llvm::MachineFunction **)(a2 + 32);
  v14 = *a4;
  v30 = v14;
  if (v14)
    llvm::MetadataTracking::track((uint64_t)&v30, v14, 2);
  v15 = v12 + 912;
  v16 = *((_QWORD *)v13 + 28);
  if (v16)
    *((_QWORD *)v13 + 28) = *(_QWORD *)v16;
  else
    v16 = sub_1C484358C((uint64_t)v13 + 128, 72, 3);
  v31 = v30;
  if (v30)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v30, v30, (uint64_t)&v31);
    v30 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v16, v13, v15, &v31, 0);
  if (v31)
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
  if (v30)
    llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  v17 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v16 + 24) = v17;
  v18 = *(_QWORD *)(v17 + 32);
  v19 = *(unsigned int *)(v16 + 40);
  if ((_DWORD)v19)
  {
    v23 = *(_QWORD *)(v16 + 32);
    v24 = *(_QWORD *)(v18 + 40);
    v25 = 32 * v19;
    do
    {
      if (!*(_BYTE *)v23)
      {
        v26 = *(unsigned int *)(v23 + 4);
        if ((int)v26 >= 0)
          v27 = (uint64_t *)(*(_QWORD *)(v24 + 272) + 8 * v26);
        else
          v27 = (uint64_t *)(*(_QWORD *)(v24 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
        v28 = *v27;
        if (*v27)
        {
          v29 = *(_QWORD *)(v28 + 16);
          *(_QWORD *)(v28 + 16) = v23;
          *(_QWORD *)(v23 + 16) = v29;
          if ((*(_BYTE *)(v23 + 3) & 1) != 0)
          {
            *(_QWORD *)(v23 + 24) = v28;
          }
          else
          {
            *(_QWORD *)(v23 + 24) = 0;
            v27 = (uint64_t *)(v29 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v23 + 16) = v23;
          *(_QWORD *)(v23 + 24) = 0;
        }
        *v27 = v23;
      }
      v23 += 32;
      v25 -= 32;
    }
    while (v25);
  }
  v20 = *(_QWORD *)(v18 + 728);
  if (v20)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v20 + 24))(v20, v16);
  v21 = *a3 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = v21 | *(_QWORD *)v16 & 7;
  *(_QWORD *)(v16 + 8) = a3;
  *(_QWORD *)(v21 + 8) = v16;
  *a3 = *a3 & 7 | v16;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  LODWORD(v31) = 0x1000000;
  HIDWORD(v31) = a7;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v13, (const llvm::MachineOperand *)&v31);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  LODWORD(v31) = (a6 & 0xFFF) << 8;
  HIDWORD(v31) = a5;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v16, v13, (const llvm::MachineOperand *)&v31);
  return v16;
}

unsigned __int8 **sub_1C47C0F04(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v4;

  if (a2 != a1)
  {
    if (*a1)
      llvm::MetadataTracking::untrack((uint64_t)a1, *a1);
    v4 = *a2;
    *a1 = *a2;
    if (v4)
      llvm::MetadataTracking::track((uint64_t)a1, v4, 2);
  }
  return a1;
}

unint64_t sub_1C47C0F60(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 32 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 32);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 32);
    }
  }
  return v3;
}

uint64_t sub_1C47C0FD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v9;
  int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  int v29;

  LODWORD(v9) = a3;
  v12 = *(unsigned __int16 *)(a2 + 24);
  if ((v12 - 198) <= 2)
  {
    v13 = *(uint64_t **)(a2 + 32);
    if (*(_BYTE *)(*(_QWORD *)(*v13 + 40) + 16 * *((unsigned int *)v13 + 2)) == 4)
    {
      if (v12 == 198)
        v14 = a6 | 8;
      else
        v14 = a6;
      return sub_1C47C1164(a1, *v13, v13[1], a4, a5, 0, 1, 0, 0, 0, v14);
    }
  }
  if (v12 != 171)
    return 0;
  v16 = *(uint64_t **)(a2 + 32);
  v17 = v16[5];
  v18 = *(unsigned __int16 *)(v17 + 24);
  if (v18 != 35 && v18 != 11)
    return 0;
  v20 = *(_QWORD *)(v17 + 80);
  if (*(_DWORD *)(v20 + 32) > 0x40u)
  {
    v21 = **(_QWORD **)(v20 + 24);
    if (v21 >> 16)
      return 0;
  }
  else
  {
    v21 = *(_QWORD *)(v20 + 24);
    if (v21 >= 0x10000)
      return 0;
  }
  v22 = a2;
  if (v21 == 0xFFFF)
  {
    v22 = *v16;
    v9 = v16[1];
  }
  v23 = *(_QWORD *)(a1 + 296);
  v24 = *(unsigned __int8 **)(a2 + 64);
  v28 = v24;
  if (v24)
    llvm::MetadataTracking::track((uint64_t)&v28, v24, 2);
  v29 = *(_DWORD *)(a2 + 60);
  v25 = sub_1C636E638(v23, 1, (const llvm::APInt *)&v28, (llvm *)4, 0, v22, v9);
  v27 = v26;
  if (v28)
    llvm::MetadataTracking::untrack((uint64_t)&v28, v28);
  return sub_1C47C1164(a1, (uint64_t)v25, v27, a4, a5, 0, 1, 0, 0, 0, a6);
}

uint64_t sub_1C47C1164(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, char a9, char a10, unsigned int a11)
{
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  const char *v45;
  int v46;
  uint64_t v47;
  llvm *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  llvm **v52;
  llvm *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  int v68;
  unsigned __int8 *v69;
  uint64_t v70;

  v13 = a2;
  v15 = *(unsigned __int16 *)(a2 + 24);
  if ((v15 - 11) > 1)
  {
    v21 = a11;
    if (a8)
    {
      v22 = (a11 & 6) != 0 || a7 == 0;
      if (!v22 && v15 == 46)
      {
        v23 = *(_QWORD *)(a2 + 32);
        v24 = *(_QWORD *)(*(_QWORD *)v23 + 80);
        v25 = (_QWORD *)(v24 + 24);
        if (*(_DWORD *)(v24 + 32) >= 0x41u)
          v25 = (_QWORD *)*v25;
        if (*v25 == 1830)
        {
          v13 = *(_QWORD *)(v23 + 40);
          a3 = *(_DWORD *)(v23 + 48);
          v21 = a11 | 1;
        }
      }
      if (a9 && (v21 & 4) == 0 && *(_WORD *)(v13 + 24) == 222)
      {
        v26 = *(_QWORD *)(v13 + 32);
        v13 = *(_QWORD *)v26;
        a3 = *(_DWORD *)(v26 + 8);
        v21 ^= 2u;
      }
      if (*(_WORD *)(v13 + 24) == 223)
      {
        v27 = *(_QWORD *)(v13 + 32);
        v13 = *(_QWORD *)v27;
        a3 = *(_DWORD *)(v27 + 8);
        v21 |= 4u;
      }
    }
    else if (v15 == 57 && a9 != 0)
    {
      v29 = *(_QWORD *)(a2 + 32);
      v30 = *(unsigned __int16 *)(*(_QWORD *)v29 + 24);
      if (v30 == 35 || v30 == 11)
      {
        v32 = *(_QWORD *)(*(_QWORD *)v29 + 80);
        v33 = (_QWORD *)(v32 + 24);
        if (*(_DWORD *)(v32 + 32) >= 0x41u)
          v33 = (_QWORD *)*v33;
        if (!*v33)
        {
          v13 = *(_QWORD *)(v29 + 40);
          a3 = *(_DWORD *)(v29 + 48);
          v21 = a11 | 2;
        }
      }
    }
    v34 = *(unsigned __int16 *)(v13 + 24);
    switch(v34)
    {
      case 201:
        v52 = (llvm **)(*(_QWORD *)(v13 + 40) + 16 * a3);
        v53 = *v52;
        if (*v52 != 4)
          goto LABEL_73;
        v54 = **(_QWORD **)(v13 + 32);
        if (*(_WORD *)(v54 + 24) != 395)
          goto LABEL_73;
        v55 = **(_QWORD **)(v54 + 32);
        v56 = *(unsigned __int16 *)(v55 + 24);
        if (v56 != 35 && v56 != 11)
          goto LABEL_73;
        v47 = *(_QWORD *)(a1 + 296);
        v49 = (uint64_t)v52[1];
        v58 = *(_QWORD *)(v55 + 80);
        v59 = (_QWORD *)(v58 + 24);
        if (*(_DWORD *)(v58 + 32) >= 0x41u)
          v59 = (_QWORD *)*v59;
        v50 = *v59 >> 1;
        v48 = v53;
        v46 = 2;
        break;
      case 395:
        v35 = **(_QWORD **)(v13 + 32);
        v36 = *(unsigned __int16 *)(v35 + 24);
        if (v36 != 35 && v36 != 11)
          goto LABEL_73;
        v38 = *(_QWORD *)(a1 + 296);
        v39 = *(_QWORD *)(v13 + 40) + 16 * a3;
        v40 = *(unsigned __int8 **)v39;
        v41 = *(_QWORD *)(v39 + 8);
        v42 = *(_QWORD *)(v35 + 80);
        v43 = (_QWORD *)(v42 + 24);
        if (*(_DWORD *)(v42 + 32) >= 0x41u)
          v43 = (_QWORD *)*v43;
        v44 = *v43 >> 1;
        v69 = v40;
        v70 = v41;
        v46 = sub_1C47C1C70((unsigned __int8 *)&v69);
        if ((_DWORD)v45 == 1)
        {
          v68 = v46;
          v46 = v68;
        }
        v47 = v38;
        v48 = (llvm *)v40;
        v49 = v41;
        v50 = v44;
        break;
      case 212:
        if (!a10)
          goto LABEL_73;
        v60 = **(_QWORD **)(v13 + 32);
        if (*(_WORD *)(v60 + 24) != 395)
          goto LABEL_73;
        v61 = **(_QWORD **)(v60 + 32);
        v62 = *(unsigned __int16 *)(v61 + 24);
        if (v62 != 35 && v62 != 11)
          goto LABEL_73;
        v47 = *(_QWORD *)(a1 + 296);
        v64 = *(_QWORD *)(v13 + 40) + 16 * a3;
        v48 = *(llvm **)v64;
        v49 = *(_QWORD *)(v64 + 8);
        v65 = *(_QWORD *)(v61 + 80);
        v66 = (_QWORD *)(v65 + 24);
        if (*(_DWORD *)(v65 + 32) >= 0x41u)
          v66 = (_QWORD *)*v66;
        v50 = *v66 >> 1;
        v46 = 4;
        break;
      default:
        goto LABEL_73;
    }
    v13 = sub_1C5D410E8(v47, 64, v48, v49, v50, v46);
    a3 = v51;
LABEL_73:
    *(_QWORD *)a4 = v13;
    *(_DWORD *)(a4 + 8) = a3;
    v19 = *(_QWORD *)(a1 + 296);
    v20 = v21;
    v69 = 0;
    v70 = 0;
    goto LABEL_74;
  }
  if (*(_BYTE *)(*(_QWORD *)(a2 + 40) + 16 * a3) == 6)
  {
    v16 = *(_QWORD *)(a2 + 80);
    v17 = (uint64_t *)(v16 + 24);
    if (*(_DWORD *)(v16 + 32) >= 0x41u)
      v17 = (uint64_t *)*v17;
    if (!*((_DWORD *)v17 + 1) && (a6 & 1) == 0)
      return 0;
  }
  else if (!a6)
  {
    return 0;
  }
  *(_QWORD *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  v19 = *(_QWORD *)(a1 + 296);
  v69 = 0;
  v70 = 0;
  v20 = 0;
LABEL_74:
  *(_QWORD *)a5 = sub_1C6366AB4(v19, v20, (const llvm::APInt *)&v69, (llvm *)5, 0, 1, 0);
  *(_DWORD *)(a5 + 8) = v67;
  if (v69)
    llvm::MetadataTracking::untrack((uint64_t)&v69, v69);
  return 1;
}

uint64_t sub_1C47C14FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;
  int v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  _QWORD *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned __int8 *v26;
  int v27;

  LODWORD(v8) = a3;
  v11 = *(unsigned __int16 *)(a2 + 24);
  if ((v11 - 198) <= 2)
  {
    v12 = *(uint64_t **)(a2 + 32);
    if (*(_BYTE *)(*(_QWORD *)(*v12 + 40) + 16 * *((unsigned int *)v12 + 2)) == 4)
      return sub_1C47C1164(a1, *v12, v12[1], a4, a5, 0, 1, 0, 0, 0, 8 * (v11 == 198));
  }
  if (v11 != 171)
    return sub_1C47C16B8(a1, a2, a3, a4, a5, 16, a6);
  v14 = *(uint64_t **)(a2 + 32);
  v15 = v14[5];
  v16 = *(unsigned __int16 *)(v15 + 24);
  if (v16 != 35 && v16 != 11)
    return sub_1C47C16B8(a1, a2, a3, a4, a5, 16, a6);
  v18 = *(_QWORD *)(v15 + 80);
  if (*(_DWORD *)(v18 + 32) > 0x40u)
  {
    v19 = **(_QWORD **)(v18 + 24);
    if (v19 >> 16)
      return sub_1C47C16B8(a1, a2, a3, a4, a5, 16, a6);
  }
  else
  {
    v19 = *(_QWORD *)(v18 + 24);
    if (v19 >= 0x10000)
      return sub_1C47C16B8(a1, a2, a3, a4, a5, 16, a6);
  }
  v20 = a2;
  if (v19 == 0xFFFF)
  {
    v20 = *v14;
    v8 = v14[1];
  }
  v21 = *(_QWORD *)(a1 + 296);
  v22 = *(unsigned __int8 **)(a2 + 64);
  v26 = v22;
  if (v22)
    llvm::MetadataTracking::track((uint64_t)&v26, v22, 2);
  v27 = *(_DWORD *)(a2 + 60);
  v23 = sub_1C636E638(v21, 1, (const llvm::APInt *)&v26, (llvm *)4, 0, v20, v8);
  v25 = v24;
  if (v26)
    llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
  return sub_1C47C1164(a1, (uint64_t)v23, v25, a4, a5, 0, 1, 0, 0, 0, 0);
}

uint64_t sub_1C47C16B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int v7;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  _QWORD *v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  _QWORD *v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  uint64_t v55;
  __int128 v56;
  unsigned __int8 *v57;
  int v58;
  __int128 v59;
  unsigned __int8 *v60;
  int v61;
  unsigned __int8 *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _QWORD v66[17];

  v66[16] = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int16 *)(a2 + 24);
  if (v7 != 35 && v7 != 11)
    return 0;
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_DWORD *)(v15 + 32);
  if (v16 > 0x40)
    v17 = **(_QWORD **)(v15 + 24);
  else
    v17 = (uint64_t)(*(_QWORD *)(v15 + 24) << -(char)v16) >> -(char)v16;
  v19 = *(unsigned __int8 **)(a2 + 64);
  v60 = v19;
  if (v19)
    llvm::MetadataTracking::track((uint64_t)&v60, v19, 2);
  v61 = *(_DWORD *)(a2 + 60);
  if (a6 == 32)
  {
    if (v17 > 0xFFFFFFFF7FFFFFFFLL || a7 != 0)
    {
      v38 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), v17, (const llvm::APInt *)&v60, (llvm *)6, 0, 1, 0);
      v40 = (uint64_t)v38;
      v41 = v39;
      *(_QWORD *)&v59 = v38;
      *((_QWORD *)&v59 + 1) = v39;
      v42 = *(_QWORD *)(a1 + 296);
      v53 = v60;
      v43 = v42;
      if (v60)
      {
        llvm::MetadataTracking::track((uint64_t)&v53, v60, 2);
        v43 = *(_QWORD *)(a1 + 296);
      }
      v54 = v61;
      *(_QWORD *)&v56 = sub_1C5D428B0(v43, 0, (llvm *)5, 0);
      *((_QWORD *)&v56 + 1) = v44;
      v55 = 0;
      v63 = 0;
      v64 = v66;
      v65 = 0x700000000;
      v62 = 0;
      v46 = sub_1C6366AB4(v42, 0, (const llvm::APInt *)&v62, (llvm *)6, 0, 1, 0);
      v47 = v65;
      if (v65 >= HIDWORD(v65))
      {
        v51 = v45;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v65 + 1, 16);
        v45 = v51;
        v47 = v65;
      }
      v48 = (char *)v64 + 16 * v47;
      *v48 = v46;
      v48[1] = v45;
      LODWORD(v65) = v65 + 1;
      if (v62)
        llvm::MetadataTracking::untrack((uint64_t)&v62, v62);
      sub_1C47C1CA4(v42, (uint64_t)&v64, v40, v41, &v59, &v59, &v56, (uint64_t)&v55);
      v49 = sub_1C636E56C(v42, 1445, (uint64_t)&v53, (llvm *)5, 0, (uint64_t *)v64, v65);
      if (v64 != v66)
        free(v64);
      *(_QWORD *)a4 = v49;
      *(_DWORD *)(a4 + 8) = 0;
      if (v53)
        llvm::MetadataTracking::untrack((uint64_t)&v53, v53);
      v34 = *(_QWORD *)(a1 + 296);
      v18 = 1;
      v35 = 8;
      goto LABEL_50;
    }
LABEL_35:
    v18 = 0;
    goto LABEL_36;
  }
  if (a6 != 16)
    goto LABEL_35;
  if (v17 <= 0xFFFFFFFFFFFF7FFFLL && a7 == 0)
    goto LABEL_35;
  v21 = sub_1C6366AB4(*(_QWORD *)(a1 + 296), (unsigned __int16)v17 | 0x100000000, (const llvm::APInt *)&v60, (llvm *)6, 0, 1, 0);
  v23 = v22;
  *(_QWORD *)&v59 = v21;
  *((_QWORD *)&v59 + 1) = v22;
  v24 = *(_QWORD *)(a1 + 296);
  v57 = v60;
  v25 = v24;
  if (v60)
  {
    llvm::MetadataTracking::track((uint64_t)&v57, v60, 2);
    v25 = *(_QWORD *)(a1 + 296);
  }
  v58 = v61;
  *(_QWORD *)&v56 = sub_1C5D428B0(v25, 0, (llvm *)5, 0);
  *((_QWORD *)&v56 + 1) = v26;
  v55 = 0;
  v63 = 0;
  v64 = v66;
  v65 = 0x800000000;
  v62 = 0;
  v28 = sub_1C6366AB4(v24, 0, (const llvm::APInt *)&v62, (llvm *)6, 0, 1, 0);
  v29 = v65;
  if (v65 >= HIDWORD(v65))
  {
    v52 = v27;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v65 + 1, 16);
    v27 = v52;
    v29 = v65;
  }
  v30 = (char *)v64 + 16 * v29;
  *v30 = v28;
  v30[1] = v27;
  v31 = v65 + 1;
  LODWORD(v65) = v65 + 1;
  if (v62)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v62, v62);
    v31 = v65;
  }
  if (v31 >= HIDWORD(v65))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v31 + 1, 16);
    v31 = v65;
  }
  v32 = (char *)v64 + 16 * v31;
  *v32 = v21;
  v32[1] = v23;
  LODWORD(v65) = v65 + 1;
  sub_1C47C1CA4(v24, (uint64_t)&v64, (uint64_t)v21, v23, &v59, &v59, &v56, (uint64_t)&v55);
  v33 = sub_1C636E56C(v24, 1015, (uint64_t)&v57, (llvm *)4, 0, (uint64_t *)v64, v65);
  if (v64 != v66)
    free(v64);
  *(_QWORD *)a4 = v33;
  *(_DWORD *)(a4 + 8) = 0;
  if (v57)
    llvm::MetadataTracking::untrack((uint64_t)&v57, v57);
  v34 = *(_QWORD *)(a1 + 296);
  v18 = 1;
  v35 = 8 * (v17 > 0xFFFFFFFFFFFF7FFFLL);
LABEL_50:
  *(_QWORD *)a5 = sub_1C6366AB4(v34, v35, (const llvm::APInt *)&v60, (llvm *)5, 0, 1, 0);
  *(_DWORD *)(a5 + 8) = v50;
LABEL_36:
  if (v60)
    llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
  return v18;
}

uint64_t sub_1C47C1B70(_DWORD *a1)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v1 = *(_QWORD *)a1;
  v2 = *(unsigned __int16 *)(*(_QWORD *)a1 + 24);
  if (v2 == 58)
  {
    v9 = *(uint64_t **)(v1 + 32);
    v10 = v9[5];
    v11 = *(unsigned __int16 *)(v10 + 24);
    if (v11 != 35 && v11 != 11)
      return 0;
    v13 = *(_QWORD *)(v10 + 80);
    if (*(_DWORD *)(v13 + 32) > 0x40u)
    {
      v14 = **(_QWORD **)(v13 + 24);
      if (v14 > 0x10)
        return 0;
    }
    else
    {
      v14 = *(_QWORD *)(v13 + 24);
      if (v14 >= 0x11)
        return 0;
    }
    v17 = 31 - __clz(v14);
    if (1 << v17 == v14)
    {
      v18 = *v9;
      a1[2] = *((_DWORD *)v9 + 2);
      *(_QWORD *)a1 = v18;
      return v17 << 6;
    }
    return 0;
  }
  if (v2 != 175)
    return 0;
  v3 = *(uint64_t **)(v1 + 32);
  v4 = v3[5];
  v5 = *(unsigned __int16 *)(v4 + 24);
  if (v5 != 35 && v5 != 11)
    return 0;
  v7 = *(_QWORD *)(v4 + 80);
  if (*(_DWORD *)(v7 + 32) <= 0x40u)
  {
    v8 = *(_QWORD *)(v7 + 24);
    if (v8 >= 5)
      return 0;
    goto LABEL_20;
  }
  v8 = **(_QWORD **)(v7 + 24);
  if (v8 > 4)
    return 0;
LABEL_20:
  v15 = ((_DWORD)v8 << 6);
  v16 = *v3;
  a1[2] = *((_DWORD *)v3 + 2);
  *(_QWORD *)a1 = v16;
  return v15;
}

unint64_t sub_1C47C1C70(unsigned __int8 *a1)
{
  uint64_t ExtendedSizeInBits;

  if (*a1)
    ExtendedSizeInBits = sub_1C47A8C74(a1);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)a1);
  return (unint64_t)(ExtendedSizeInBits + 7) >> 3;
}

uint64_t sub_1C47C1CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, __int128 *a6, __int128 *a7, uint64_t a8)
{
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unsigned __int8 *v42[2];

  v16 = *(unsigned int *)(a2 + 8);
  if (v16 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 16);
    LODWORD(v16) = *(_DWORD *)(a2 + 8);
  }
  v17 = (_QWORD *)(*(_QWORD *)a2 + 16 * v16);
  *v17 = a3;
  v17[1] = a4;
  v18 = *(_DWORD *)(a2 + 12);
  v19 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v19;
  v20 = *a5;
  if (v19 >= v18)
  {
    v39 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19 + 1, 16);
    v20 = v39;
    LODWORD(v19) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v19) = v20;
  v21 = *(_DWORD *)(a2 + 12);
  v22 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v22;
  v23 = *a6;
  if (v22 >= v21)
  {
    v40 = *a6;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v22 + 1, 16);
    v23 = v40;
    LODWORD(v22) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v22) = v23;
  v24 = *(_DWORD *)(a2 + 12);
  v25 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v25;
  v26 = *a7;
  if (v25 >= v24)
  {
    v41 = *a7;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
    v26 = v41;
    LODWORD(v25) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v25) = v26;
  ++*(_DWORD *)(a2 + 8);
  v27 = *(unsigned int *)(a8 + 4);
  v42[0] = 0;
  v42[1] = 0;
  v28 = sub_1C6366AB4(a1, v27, (const llvm::APInt *)v42, (llvm *)5, 0, 1, 0);
  v30 = v29;
  v31 = *(unsigned int *)(a2 + 8);
  if (v31 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v31 + 1, 16);
    LODWORD(v31) = *(_DWORD *)(a2 + 8);
  }
  v32 = (_QWORD *)(*(_QWORD *)a2 + 16 * v31);
  *v32 = v28;
  v32[1] = v30;
  ++*(_DWORD *)(a2 + 8);
  if (v42[0])
    llvm::MetadataTracking::untrack((uint64_t)v42, v42[0]);
  result = sub_1C5D428B0(a1, *(_DWORD *)a8, (llvm *)5, 0);
  v34 = result;
  v36 = v35;
  v37 = *(unsigned int *)(a2 + 8);
  if (v37 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v37 + 1, 16);
    LODWORD(v37) = *(_DWORD *)(a2 + 8);
  }
  v38 = (uint64_t *)(*(_QWORD *)a2 + 16 * v37);
  *v38 = v34;
  v38[1] = v36;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_1C47C1EE4(llvm::Pass *a1)
{
  sub_1C637217C(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C47C1F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  __int128 v19;
  _QWORD *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  uint64_t i;
  uint64_t **v58;
  unint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  BOOL v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  _QWORD *v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t *v94;
  llvm *v95;
  void *v96;
  uint64_t v97;
  int v98;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  llvm *v104;
  char v105;
  char v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t *v112;
  uint64_t v113;
  int v114;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  int v121;
  int v122;
  uint64_t *v123;
  uint64_t v124;
  int v125;
  uint64_t v127;
  unsigned int *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  int v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t *v147;
  llvm *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t *v157;
  int v158;
  uint64_t *v159;
  uint64_t v160;
  _QWORD *v161;
  int v162;
  unint64_t v163;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  int v173;
  BOOL v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  unsigned int v178;
  char v179;
  _QWORD *v180;
  int v181;
  uint64_t v182;
  _BOOL8 *v183;
  llvm *v184;
  uint64_t v185;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  int v198;
  __int128 v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v208;
  uint64_t ExtendedSizeInBits;
  const char *v210;
  _QWORD *v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  BOOL v218;
  _QWORD *v219;
  int v220;
  uint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  llvm *v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  int v238;
  uint64_t v239;
  int v240;
  int v241;
  uint64_t *v242;
  uint64_t v243;
  int v244;
  uint64_t v246;
  unint64_t *v247;
  uint64_t v248;
  _QWORD *v249;
  unint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  uint64_t v259;
  const char *v260;
  uint64_t *v261;
  uint64_t v262;
  int v263;
  uint64_t v265;
  _QWORD *v266;
  unsigned int v267;
  _QWORD *v268;
  uint64_t v269;
  int v270;
  BOOL v271;
  uint64_t v272;
  unsigned int v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  int v279;
  uint64_t *v280;
  uint64_t v281;
  int v282;
  BOOL v283;
  BOOL v284;
  uint64_t v285;
  int v286;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  int v291;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  int v298;
  uint64_t v300;
  _QWORD *v301;
  _BOOL4 v302;
  int v303;
  uint64_t v304;
  _BOOL4 v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  int v311;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  int v317;
  unint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  __int16 v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  unsigned int v325;
  int v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  llvm *v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t *v337;
  int v338;
  int v339;
  uint64_t j;
  void **v341;
  unsigned int v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  _QWORD *v346;
  unint64_t v347;
  uint64_t v348;
  __int16 v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  int v353;
  uint64_t *v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  size_t v359;
  unint64_t v360;
  unint64_t v361;
  size_t v362;
  uint64_t v363;
  _BOOL4 v364;
  unint64_t k;
  void **v366;
  void *v367;
  void *v368;
  unsigned __int8 *v369;
  uint64_t *v370;
  _QWORD *v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t *v374;
  uint64_t *v375;
  uint64_t *v376;
  uint64_t v377;
  _QWORD *v378;
  _QWORD *v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  int v384;
  int v385;
  uint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  uint64_t v390;
  _QWORD *v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  int v398;
  uint64_t v399;
  int64_t v400;
  int v401;
  unint64_t v402;
  int v403;
  uint64_t v404;
  llvm *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t *v409;
  unsigned int v410;
  unsigned int v411;
  uint64_t v412;
  _QWORD *v413;
  uint64_t v414;
  void *v415;
  uint64_t v416;
  uint64_t *v417;
  int v418;
  int v419;
  unsigned __int8 *v420;
  unsigned __int8 **v421;
  uint64_t *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  _QWORD *v426;
  uint64_t v427;
  void *v428;
  uint64_t v429;
  uint64_t *v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  _QWORD *v434;
  unint64_t v435;
  uint64_t v436;
  __int16 v437;
  uint64_t v438;
  uint64_t *v439;
  unsigned int v440;
  unsigned int v441;
  uint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  void *v445;
  uint64_t v446;
  unsigned int v447;
  int v448;
  uint64_t v449;
  uint64_t v450;
  _QWORD *v451;
  uint64_t v452;
  uint64_t *v453;
  unint64_t v454;
  unint64_t v455;
  uint64_t v456;
  int v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t *v461;
  int v462;
  int v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  _QWORD *v467;
  uint64_t v468;
  _QWORD *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unsigned int v473;
  unsigned int v474;
  uint64_t v475;
  _QWORD *v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  int v480;
  uint64_t v481;
  _QWORD *v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  int v486;
  unsigned int v487;
  void **v488;
  unsigned int v489;
  void **v490;
  uint64_t *v491;
  int v492;
  uint64_t *v493;
  unint64_t v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  _QWORD *v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  unint64_t v502;
  unint64_t v503;
  __int16 v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t *v508;
  unint64_t v509;
  unint64_t v510;
  __int16 v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t *v514;
  uint64_t v515;
  unint64_t v516;
  __int16 v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t *v521;
  unint64_t v522;
  unint64_t v523;
  __int16 v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t *v528;
  unint64_t v529;
  unint64_t v530;
  __int16 v531;
  uint64_t v532;
  uint64_t v533;
  llvm *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t *v539;
  unint64_t v540;
  unint64_t v541;
  uint64_t v542;
  uint64_t v543;
  llvm *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t *v547;
  unint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t v552;
  uint64_t *v553;
  __int16 v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t *v557;
  int v558;
  uint64_t v559;
  _QWORD *v560;
  uint64_t v561;
  unint64_t v562;
  unint64_t v563;
  uint64_t v564;
  unint64_t v565;
  unint64_t v566;
  __int16 v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t *v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  int v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t *v578;
  unint64_t v579;
  unint64_t v580;
  _QWORD *v581;
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  __int16 v586;
  uint64_t v587;
  unsigned int v588;
  uint64_t v589;
  uint64_t v590;
  llvm::APInt *v591;
  unsigned int v592;
  unint64_t v593;
  uint64_t v594;
  _QWORD *v595;
  int v596;
  __int16 v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t *v600;
  unsigned int v601;
  int v602;
  uint64_t v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  _QWORD *v607;
  unint64_t v608;
  uint64_t v609;
  __int16 v610;
  uint64_t v611;
  unint64_t v612;
  uint64_t *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t *v616;
  uint64_t v617;
  unint64_t v618;
  uint64_t v619;
  _QWORD *v620;
  uint64_t v621;
  void *v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t *v625;
  int v626;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  void *v631;
  unint64_t v632;
  uint64_t v633;
  unint64_t v634;
  unint64_t v635;
  unint64_t v636;
  unint64_t v637;
  uint64_t v638;
  uint64_t v639;
  int v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  int v645;
  unint64_t v646;
  uint64_t v647;
  uint64_t v648;
  int v649;
  _QWORD *v650;
  uint64_t v651;
  uint64_t v652;
  _QWORD *v653;
  _QWORD *v654;
  int v655;
  __int128 v656;
  _QWORD *v657;
  _QWORD *v658;
  void *v659;
  _QWORD *v660;
  uint64_t *v661;
  _QWORD *v662;
  _QWORD *v663;
  uint64_t v664;
  unsigned __int8 *v665;
  int v666;
  unsigned __int8 *v667;
  int v668;
  unsigned __int8 *v669;
  int v670;
  unsigned __int8 *v671;
  int v672;
  unsigned __int8 *v673;
  int v674;
  void *v675;
  unsigned int v676;
  void *v677;
  unsigned int v678;
  unsigned __int8 *v679;
  int v680;
  unsigned __int8 *v681;
  int v682;
  unsigned __int8 *v683;
  int v684;
  unsigned __int8 *v685;
  int v686;
  __int16 v687;
  unsigned __int8 v688;
  void *__src[2];
  uint64_t v690;
  unsigned int v691;
  void *v692;
  unsigned int v693;
  uint64_t *v694;
  _DWORD v695[54];
  __int128 v696;
  uint64_t *v697;
  unsigned int v698;
  uint64_t v699;

  v8 = a1;
  v699 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD **)(a1 + 296);
  v10 = v9 + 26;
  v11 = (_QWORD *)v9[27];
  if (v11 != v9 + 26)
  {
    v655 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 480) + 281);
    v631 = &unk_1C640E000;
    v664 = v8;
    v663 = v9 + 26;
    while (1)
    {
      if (v11)
        v12 = (uint64_t)(v11 - 1);
      else
        v12 = 0;
      v13 = *(unsigned __int8 **)(v12 + 64);
      v681 = v13;
      if (v13)
        llvm::MetadataTracking::track((uint64_t)&v681, v13, 2);
      v682 = *(_DWORD *)(v12 + 60);
      v14 = *(unsigned __int16 *)(v12 + 24);
      if (v14 == 65517)
      {
        __src[0] = &v690;
        __src[1] = (void *)0x1000000000;
        LOWORD(v15) = *(_WORD *)(v12 + 56);
        if ((_WORD)v15)
        {
          v16 = 0;
          v17 = 0;
          v18 = 0;
          do
          {
            v19 = *(_OWORD *)(*(_QWORD *)(v12 + 32) + v16);
            if (v17 >= HIDWORD(__src[1]))
            {
              v656 = *(_OWORD *)(*(_QWORD *)(v12 + 32) + v16);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v690, v17 + 1, 16);
              v19 = v656;
              v17 = __src[1];
            }
            *((_OWORD *)__src[0] + v17) = v19;
            v17 = ++LODWORD(__src[1]);
            ++v18;
            v15 = (char *)*(unsigned __int16 *)(v12 + 56);
            v16 += 40;
          }
          while (v18 < (unint64_t)v15);
          v20 = v11;
          if ((_DWORD)v15 == 4)
            goto LABEL_57;
        }
        else
        {
          v20 = v11;
        }
        v21 = 0;
        v22 = 1;
        while (1)
        {
          v23 = *(_QWORD *)(v12 + 32);
          v24 = *(_QWORD *)(*(_QWORD *)(v23 + 40 * (v22 + 1)) + 80);
          v25 = (_QWORD *)(v24 + 24);
          if (*(_DWORD *)(v24 + 32) >= 0x41u)
            v25 = (_QWORD *)*v25;
          v26 = *(_QWORD *)(*(_QWORD *)(v23 + 40 * (v22 + 3)) + 80);
          v27 = (_QWORD *)(v26 + 24);
          if (*(_DWORD *)(v26 + 32) >= 0x41u)
            v27 = (_QWORD *)*v27;
          v28 = *(_DWORD *)v25 - 1;
          v29 = *(_DWORD *)v27 - 1;
          v30 = v28 > 0xF || v29 > 0xF;
          if (v30 || v29 - v28 != 1 || (v28 & 1) != 0)
            goto LABEL_47;
          v33 = (uint64_t *)(v23 + 40 * v22);
          v34 = *v33;
          v35 = v33[1];
          v36 = v22 + 2;
          v37 = (uint64_t *)(v23 + 40 * v36);
          v38 = *v37;
          v39 = v37[1];
          v679 = v681;
          if (v681)
            llvm::MetadataTracking::track((uint64_t)&v679, v681, 2);
          v680 = v682;
          v40 = sub_1C47DF390(v664, v34, v35, v38, v39, (const llvm::APInt *)&v679, (llvm *)0x26, 0);
          if (v679)
            llvm::MetadataTracking::untrack((uint64_t)&v679, v679);
          if (v40)
          {
            v41 = sub_1C6366AB4(*(_QWORD *)(v664 + 296), 0, (const llvm::APInt *)&v681, (llvm *)5, 0, 0, 0);
            v43 = v42;
            v657 = sub_1C6366AB4(*(_QWORD *)(v664 + 296), 1, (const llvm::APInt *)&v681, (llvm *)5, 0, 0, 0);
            v46 = v45;
            v47 = *(_QWORD *)(v664 + 296);
            v48 = *(_QWORD *)(v47 + 832);
            if (v48)
              LOWORD(v48) = *(_WORD *)(v48 + 8);
            v49 = sub_1C5D56C70(v47, 437, (const llvm::APInt *)&v681, (llvm *)4, 0, (uint64_t)v40, 0, v44, (uint64_t)v41, v43, v48);
            v51 = (char *)__src[0] + 16 * v22;
            *(_QWORD *)v51 = v49;
            *((_DWORD *)v51 + 2) = v52;
            v53 = *(_QWORD *)(v664 + 296);
            v54 = *(_QWORD *)(v53 + 832);
            if (v54)
              LOWORD(v54) = *(_WORD *)(v54 + 8);
            v55 = sub_1C5D56C70(v53, 437, (const llvm::APInt *)&v681, (llvm *)4, 0, (uint64_t)v40, 0, v50, (uint64_t)v657, v46, v54);
            v15 = (char *)__src[0] + 16 * v36;
            *(_QWORD *)v15 = v55;
            *((_DWORD *)v15 + 2) = v56;
            v22 += 4;
            LODWORD(v15) = *(unsigned __int16 *)(v12 + 56);
            v21 = 1;
            if (v22 > (int)v15 - 4)
              goto LABEL_56;
          }
          else
          {
            LOWORD(v15) = *(_WORD *)(v12 + 56);
LABEL_47:
            v22 += 4;
            if (v22 > (unsigned __int16)v15 - 4)
            {
              if ((v21 & 1) == 0)
                goto LABEL_57;
LABEL_56:
              sub_1C636DEEC(*(_QWORD *)(v664 + 296), v12, (uint64_t *)__src[0], LODWORD(__src[1]));
LABEL_57:
              if (__src[0] != &v690)
                free(__src[0]);
              v8 = v664;
LABEL_60:
              v11 = v20;
              v10 = v663;
              goto LABEL_61;
            }
          }
        }
      }
      if (!sub_1C47DF7BC(*(unsigned __int16 *)(v12 + 24))
        || (*(_WORD *)(**(_QWORD **)(v8 + 296) + 1020) & 1) == 0
        || **(_BYTE **)(v12 + 40) != 9)
      {
        goto LABEL_144;
      }
      if (v14 == 98)
      {
        for (i = *(_QWORD *)(v12 + 48); i; i = *(_QWORD *)(i + 32))
        {
          if (*(_WORD *)(*(_QWORD *)(i + 16) + 24) == 141)
            goto LABEL_144;
        }
      }
      else if (v14 == 141 && *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 80) + 24) == 98)
      {
        goto LABEL_144;
      }
      v688 = 0;
      v687 = 0;
      LODWORD(v58) = *(unsigned __int16 *)(v12 + 56);
      if (!*(_WORD *)(v12 + 56))
      {
        v92 = 0;
        v91 = 0;
        goto LABEL_142;
      }
      v59 = 0;
      do
      {
        v60 = (_DWORD *)(*(_QWORD *)(v12 + 32) + 40 * v59);
        v61 = *(_QWORD *)v60;
        v62 = *(unsigned __int16 *)(*(_QWORD *)v60 + 24);
        if (v62 == 46)
        {
          v63 = *(_QWORD *)(v61 + 32);
          v64 = *(_QWORD *)(*(_QWORD *)v63 + 80);
          v65 = (_QWORD *)(v64 + 24);
          if (*(_DWORD *)(v64 + 32) >= 0x41u)
            v65 = (_QWORD *)*v65;
          if (*v65 == 1830)
          {
            v66 = *(_QWORD *)(v63 + 40);
            v67 = *(_QWORD *)(v66 + 48);
            if (!v67)
              goto LABEL_144;
            v68 = *(_DWORD *)(v63 + 48);
            v69 = 1;
            do
            {
              if (*(_DWORD *)(v67 + 8) == v68)
              {
                if (!v69)
                  goto LABEL_144;
                --v69;
              }
              v67 = *(_QWORD *)(v67 + 32);
            }
            while (v67);
            if (v69)
              goto LABEL_144;
            v70 = *(unsigned __int16 *)(v66 + 24);
            v71 = (v70 - 96) > 0x2D || ((1 << (v70 - 96)) & 0x200000000005) == 0;
            if (v71 && v70 != 443)
              goto LABEL_144;
            goto LABEL_138;
          }
          v62 = 46;
          goto LABEL_98;
        }
        v72 = v60[2];
        if (v62 == 222)
        {
          v73 = *(_QWORD *)(v61 + 48);
          if (!v73)
            goto LABEL_138;
          v74 = 1;
          do
          {
            if (*(_DWORD *)(v73 + 8) == v72)
            {
              if (!v74)
                goto LABEL_138;
              --v74;
            }
            v73 = *(_QWORD *)(v73 + 32);
          }
          while (v73);
          if (v74)
            goto LABEL_138;
          v60 = *(_DWORD **)(v61 + 32);
          v61 = *(_QWORD *)v60;
          v62 = *(unsigned __int16 *)(*(_QWORD *)v60 + 24);
LABEL_98:
          v72 = v60[2];
        }
        if (v62 == 223)
        {
          v75 = *(_QWORD *)(v61 + 48);
          if (!v75)
            goto LABEL_138;
          v76 = 1;
          do
          {
            if (*(_DWORD *)(v75 + 8) == v72)
            {
              if (!v76)
                goto LABEL_138;
              --v76;
            }
            v75 = *(_QWORD *)(v75 + 32);
          }
          while (v75);
          if (v76)
            goto LABEL_138;
          v77 = *(_QWORD *)(v61 + 32);
          v61 = *(_QWORD *)v77;
          v72 = *(_DWORD *)(v77 + 8);
          v62 = *(unsigned __int16 *)(v61 + 24);
        }
        if (v62 != 212)
          goto LABEL_138;
        v78 = *(_QWORD *)(v61 + 48);
        if (!v78)
          goto LABEL_116;
        v79 = 1;
        do
        {
          if (*(_DWORD *)(v78 + 8) == v72)
          {
            if (!v79)
              goto LABEL_116;
            --v79;
          }
          v78 = *(_QWORD *)(v78 + 32);
        }
        while (v78);
        if (v79)
        {
LABEL_116:
          __src[0] = &v692;
          __src[1] = &v692;
          v690 = 8;
          v691 = 0;
          v80 = sub_1C47E2A40(v61, (llvm::SmallPtrSetImplBase *)__src);
          if (__src[1] != __src[0])
            free(__src[1]);
          if (!v80)
            goto LABEL_138;
        }
        v81 = *(uint64_t **)(v61 + 32);
        v82 = *v81;
        v83 = *(unsigned __int16 *)(*v81 + 24);
        if (v83 != 395)
        {
          v84 = v81[1];
          if (v83 != 47)
            goto LABEL_124;
          v85 = *(_QWORD *)(v81[5] + 80);
          v86 = (_QWORD *)(v85 + 24);
          if (*(_DWORD *)(v85 + 32) >= 0x41u)
            v86 = (_QWORD *)*v86;
          if ((*(_DWORD *)v86 - 2022) >= 0x40)
          {
LABEL_124:
            v87 = *(_QWORD *)(v82 + 48);
            if (!v87)
              goto LABEL_131;
            v88 = 1;
            do
            {
              if (*(_DWORD *)(v87 + 8) == (_DWORD)v84)
              {
                if (!v88)
                  goto LABEL_131;
                --v88;
              }
              v87 = *(_QWORD *)(v87 + 32);
            }
            while (v87);
            if (v88)
LABEL_131:
              *((_BYTE *)&v687 + v59) = 1;
            if ((sub_1C47E2AD4(v82) & 1) == 0)
            {
              if (v83 != 46)
                goto LABEL_137;
              v89 = *(_QWORD *)(**(_QWORD **)(v82 + 32) + 80);
              v90 = (_QWORD *)(v89 + 24);
              if (*(_DWORD *)(v89 + 32) >= 0x41u)
                v90 = (_QWORD *)*v90;
              if (*v90 != 1830)
LABEL_137:
                *((_BYTE *)&v687 + v59) = 1;
            }
          }
        }
LABEL_138:
        ++v59;
        v58 = (uint64_t **)*(unsigned __int16 *)(v12 + 56);
      }
      while (v59 < (unint64_t)v58);
      v91 = HIBYTE(v687);
      v92 = v688;
      if ((_BYTE)v687)
      {
LABEL_439:
        v369 = *(unsigned __int8 **)(v12 + 64);
        v685 = v369;
        if (v369)
        {
          llvm::MetadataTracking::track((uint64_t)&v685, v369, 2);
          LODWORD(v58) = *(unsigned __int16 *)(v12 + 56);
        }
        v686 = *(_DWORD *)(v12 + 60);
        v370 = &v690;
        __src[0] = &v690;
        __src[1] = (void *)0x300000000;
        if ((_DWORD)v58)
        {
          v371 = v11;
          v372 = 0;
          v373 = 0;
          do
          {
            v374 = sub_1C47E2B70(*(_QWORD *)(*(_QWORD *)(v12 + 32) + v372), *(_QWORD *)(*(_QWORD *)(v12 + 32) + v372 + 8), *(_QWORD *)(v8 + 296), *((unsigned __int8 *)&v687 + v373), 0, 0);
            v376 = v375;
            v377 = LODWORD(__src[1]);
            if (LODWORD(__src[1]) >= (unint64_t)HIDWORD(__src[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v690, LODWORD(__src[1]) + 1, 16);
              v377 = LODWORD(__src[1]);
            }
            v58 = (uint64_t **)((char *)__src[0] + 16 * v377);
            *v58 = v374;
            v58[1] = v376;
            LODWORD(v58) = ++LODWORD(__src[1]);
            ++v373;
            v372 += 40;
          }
          while (v373 < *(unsigned __int16 *)(v12 + 56));
          v370 = (uint64_t *)__src[0];
          v11 = v371;
          v10 = v663;
        }
        v449 = *(_QWORD *)(v8 + 296);
        v450 = *(_QWORD *)(v449 + 832);
        v451 = v11;
        if (v450)
          v452 = *(unsigned __int16 *)(v450 + 8);
        else
          v452 = 0;
        v453 = sub_1C636D0C8(v449, (const char *)*(unsigned __int16 *)(v12 + 24), (const llvm::APInt *)&v685, (llvm *)0xA, 0, v370, v58, v452);
        v455 = v454;
        v456 = *(_QWORD *)(v12 + 48);
        if (!v456)
          goto LABEL_544;
        v457 = 1;
        v458 = *(_QWORD *)(v12 + 48);
        do
        {
          if (!*(_DWORD *)(v458 + 8))
          {
            if (!v457)
              goto LABEL_525;
            --v457;
          }
          v458 = *(_QWORD *)(v458 + 32);
        }
        while (v458);
        if (!v457)
        {
          v459 = *(_QWORD *)(v456 + 16);
          if (*(_WORD *)(v459 + 24) == 215)
          {
            v460 = *(_QWORD *)(v8 + 296);
            v461 = v453;
            v462 = v455;
            goto LABEL_521;
          }
        }
LABEL_525:
        v463 = 1;
        v464 = *(_QWORD *)(v12 + 48);
        do
        {
          if (!*(_DWORD *)(v464 + 8))
          {
            if (!v463)
              goto LABEL_544;
            --v463;
          }
          v464 = *(_QWORD *)(v464 + 32);
        }
        while (v464);
        if (v463)
          goto LABEL_544;
        v465 = *(_QWORD *)(v456 + 16);
        if (*(_WORD *)(v465 + 24) != 46)
          goto LABEL_544;
        v466 = *(_QWORD *)(**(_QWORD **)(v465 + 32) + 80);
        v467 = (_QWORD *)(v466 + 24);
        if (*(_DWORD *)(v466 + 32) >= 0x41u)
          v467 = (_QWORD *)*v467;
        if (*v467 == 1830)
        {
          v683 = v685;
          if (v685)
            llvm::MetadataTracking::track((uint64_t)&v683, v685, 2);
          v684 = v686;
          v468 = *(_QWORD *)(v8 + 296);
          v469 = sub_1C6366AB4(v468, 1830, (const llvm::APInt *)&v683, (llvm *)5, 0, 1, 0);
          v470 = 0;
          *(_QWORD *)&v696 = v469;
          *((_QWORD *)&v696 + 1) = v471;
          v697 = v453;
          v698 = v455;
          v472 = *(_QWORD *)(v468 + 832);
          if (v472)
            v470 = *(unsigned __int16 *)(v472 + 8);
          v661 = sub_1C636D0C8(v468, (const char *)0x2E, (const llvm::APInt *)&v683, (llvm *)0xA, 0, (uint64_t *)&v696, 2, v470);
          v474 = v473;
          if (v683)
            llvm::MetadataTracking::untrack((uint64_t)&v683, v683);
          v475 = *(_QWORD *)(v8 + 296);
          v476 = sub_1C6366AB4(v475, 0, (const llvm::APInt *)&v685, (llvm *)5, 0, 0, 0);
          v479 = *(_QWORD *)(v475 + 832);
          if (v479)
            LOWORD(v479) = *(_WORD *)(v479 + 8);
          v461 = sub_1C5D56C70(v475, 212, (const llvm::APInt *)&v685, (llvm *)9, 0, (uint64_t)v661, v455 & 0xFFFFFFFF00000000 | v474, v478, (uint64_t)v476, v477, v479);
          v462 = v480;
          v460 = *(_QWORD *)(v8 + 296);
          v459 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 16);
        }
        else
        {
LABEL_544:
          v481 = *(_QWORD *)(v8 + 296);
          v482 = sub_1C6366AB4(v481, 0, (const llvm::APInt *)&v685, (llvm *)5, 0, 0, 0);
          v485 = *(_QWORD *)(v481 + 832);
          if (v485)
            LOWORD(v485) = *(_WORD *)(v485 + 8);
          v461 = sub_1C5D56C70(v481, 212, (const llvm::APInt *)&v685, (llvm *)9, 0, (uint64_t)v453, v455, v484, (uint64_t)v482, v483, v485);
          v462 = v486;
          v460 = *(_QWORD *)(v8 + 296);
          v459 = v12;
        }
LABEL_521:
        sub_1C636EE88(v460, v459, 0, (uint64_t)v461, v462);
        v11 = v451;
        if (__src[0] != &v690)
          free(__src[0]);
        if (v685)
          llvm::MetadataTracking::untrack((uint64_t)&v685, v685);
        goto LABEL_144;
      }
LABEL_142:
      if (v91 || v92)
        goto LABEL_439;
LABEL_144:
      if (v14 > 171)
      {
        switch(v14)
        {
          case 172:
            for (j = 0; j != 8; j += 4)
            {
              v341 = &__src[j];
              *((_DWORD *)v341 + 2) = 1;
              *v341 = 0;
              *((_DWORD *)v341 + 6) = 1;
              v341[2] = 0;
            }
            sub_1C6368768(*(_QWORD *)(v8 + 296), **(_QWORD **)(v12 + 32), *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8), 0, (uint64_t)&v696);
            if (LODWORD(__src[1]) >= 0x41 && __src[0])
              MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
            __src[0] = (void *)v696;
            LODWORD(__src[1]) = DWORD2(v696);
            DWORD2(v696) = 0;
            if (v691 >= 0x41 && v690)
            {
              MEMORY[0x1CAA32F9C](v690, 0x1000C8000313F17);
              v690 = (uint64_t)v697;
              v691 = v698;
              v698 = 0;
              if (DWORD2(v696) >= 0x41 && (_QWORD)v696)
                MEMORY[0x1CAA32F9C](v696, 0x1000C8000313F17);
            }
            else
            {
              v690 = (uint64_t)v697;
              v691 = v698;
            }
            sub_1C6368768(*(_QWORD *)(v8 + 296), *(_QWORD *)(*(_QWORD *)(v12 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v12 + 32) + 48), 0, (uint64_t)&v696);
            if (v693 >= 0x41 && v692)
              MEMORY[0x1CAA32F9C](v692, 0x1000C8000313F17);
            v692 = (void *)v696;
            v693 = DWORD2(v696);
            DWORD2(v696) = 0;
            if (v695[0] >= 0x41u && v694)
            {
              MEMORY[0x1CAA32F9C](v694, 0x1000C8000313F17);
              v694 = v697;
              v695[0] = v698;
              v698 = 0;
              if (DWORD2(v696) >= 0x41 && (_QWORD)v696)
                MEMORY[0x1CAA32F9C](v696, 0x1000C8000313F17);
            }
            else
            {
              v694 = v697;
              v695[0] = v698;
            }
            v342 = __src[1];
            v678 = __src[1];
            if (LODWORD(__src[1]) > 0x40)
            {
              v359 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
              v677 = (void *)operator new[]();
              memcpy(v677, __src[0], v359);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v677);
              v342 = v678;
              v344 = (uint64_t)v677;
            }
            else
            {
              if (LODWORD(__src[1]))
                v343 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
              else
                v343 = 0;
              v344 = v343 & ~(uint64_t)__src[0];
              v677 = (void *)v344;
            }
            v678 = 0;
            v676 = v693;
            if (v693 <= 0x40)
            {
              if (v693)
                v360 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v693;
              else
                v360 = 0;
              v361 = v360 & ~(unint64_t)v692;
              v675 = (void *)v361;
              v676 = 0;
              goto LABEL_424;
            }
            v362 = (((unint64_t)v693 + 63) >> 3) & 0x3FFFFFF8;
            v675 = (void *)operator new[]();
            memcpy(v675, v692, v362);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v675);
            v363 = v676;
            v361 = (unint64_t)v675;
            v676 = 0;
            if (v363 < 0x41)
            {
LABEL_424:
              v364 = (v361 & v344) == 0;
              goto LABEL_425;
            }
            v399 = 0;
            v400 = (unint64_t)(v363 + 63) >> 6;
            do
            {
              *(_QWORD *)(v361 + v399) &= *(_QWORD *)(v344 + v399);
              v399 += 8;
            }
            while (8 * v400 != v399);
            v401 = 0;
            do
            {
              v30 = v400-- < 1;
              if (v30)
                break;
              v402 = *(_QWORD *)(v361 + 8 * v400);
              v401 += __clz(v402);
            }
            while (!v402);
            v364 = 0;
            v403 = v363 | 0xFFFFFFC0;
            if ((v363 & 0x3F) == 0)
              v403 = 0;
            if ((v363 - v401 - v403) <= 0x40)
              v364 = *(_QWORD *)v361 == 0;
            if (v361)
              MEMORY[0x1CAA32F9C](v361, 0x1000C8000313F17);
LABEL_425:
            if (v342 >= 0x41 && v344)
              MEMORY[0x1CAA32F9C](v344, 0x1000C8000313F17);
            if (v364)
            {
              v487 = v631 & 0xFFFFF000 | 3;
              if (LODWORD(__src[1]) >= 0x41)
                v488 = (void **)((char *)__src[0] + 8 * ((LODWORD(__src[1]) - 1) >> 6));
              else
                v488 = __src;
              if ((((unint64_t)*v488 >> (LOBYTE(__src[1]) - 1)) & 1) != 0)
              {
                v489 = v693 - 1;
                v490 = &v692;
                if (v693 >= 0x41)
                  v490 = (void **)((char *)v692 + 8 * (v489 >> 6));
                if ((((unint64_t)*v490 >> v489) & 1) != 0)
                  v487 = v631 & 0xFFFFF000 | 7;
              }
              LODWORD(v631) = v487;
              v491 = sub_1C5D56C70(*(_QWORD *)(v8 + 296), 56, (const llvm::APInt *)&v681, **(llvm ***)(v12 + 40), *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8), **(_QWORD **)(v12 + 32), *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8), a8, *(_QWORD *)(*(_QWORD *)(v12 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v12 + 32) + 48), v487);
              sub_1C5D6146C(*(_QWORD *)(v8 + 296), v12, 0, (uint64_t)v491, v492);
              sub_1C63725DC((uint64_t)v491);
            }
            if (**(_BYTE **)(v12 + 40) == 6)
            {
              v662 = v11;
              v493 = *(uint64_t **)(v12 + 32);
              v495 = *v493;
              v494 = v493[1];
              v496 = v493[6];
              v647 = v493[5];
              v497 = v8;
              v498 = sub_1C6366AB4(*(_QWORD *)(v8 + 296), 0, (const llvm::APInt *)&v681, (llvm *)5, 0, 0, 0);
              v500 = v499;
              v653 = sub_1C6366AB4(*(_QWORD *)(v497 + 296), 1, (const llvm::APInt *)&v681, (llvm *)5, 0, 0, 0);
              v503 = v502;
              v504 = 0;
              v505 = *(_QWORD *)(v497 + 296);
              v506 = *(_QWORD *)(v505 + 832);
              if (v506)
                v504 = *(_WORD *)(v506 + 8);
              v508 = sub_1C5D56C70(v505, 437, (const llvm::APInt *)&v681, (llvm *)5, 0, v495, v494, v501, (uint64_t)v498, v500, v504);
              v510 = v509;
              v511 = 0;
              v512 = *(_QWORD *)(v664 + 296);
              v513 = *(_QWORD *)(v512 + 832);
              if (v513)
                v511 = *(_WORD *)(v513 + 8);
              v514 = sub_1C5D56C70(v512, 437, (const llvm::APInt *)&v681, (llvm *)5, 0, v495, v494, v507, (uint64_t)v653, v503, v511);
              v637 = v516;
              v642 = (uint64_t)v514;
              v517 = 0;
              v518 = *(_QWORD *)(v664 + 296);
              v519 = *(_QWORD *)(v518 + 832);
              if (v519)
                v517 = *(_WORD *)(v519 + 8);
              v521 = sub_1C5D56C70(v518, 437, (const llvm::APInt *)&v681, (llvm *)5, 0, v647, v496, v515, (uint64_t)v498, v500, v517);
              v523 = v522;
              v524 = 0;
              v525 = *(_QWORD *)(v664 + 296);
              v526 = *(_QWORD *)(v525 + 832);
              if (v526)
                v524 = *(_WORD *)(v526 + 8);
              v528 = sub_1C5D56C70(v525, 437, (const llvm::APInt *)&v681, (llvm *)5, 0, v647, v496, v520, (uint64_t)v653, v503, v524);
              v530 = v529;
              v531 = 0;
              v532 = *(_QWORD *)(v664 + 296);
              v533 = v508[5] + 16 * v510;
              v534 = *(llvm **)v533;
              v535 = *(_QWORD *)(v533 + 8);
              v536 = *(_QWORD *)(v532 + 832);
              if (v536)
                v531 = *(_WORD *)(v536 + 8);
              v537 = v510;
              v539 = sub_1C5D56C70(v532, 172, (const llvm::APInt *)&v681, v534, v535, (uint64_t)v508, v510, v527, (uint64_t)v521, v523, v531);
              v541 = v540;
              v8 = v664;
              v542 = *(_QWORD *)(v664 + 296);
              v543 = v508[5] + 16 * v537;
              v544 = *(llvm **)v543;
              v545 = *(_QWORD *)(v543 + 8);
              v546 = *(_QWORD *)(v542 + 832);
              if (v546)
                LOWORD(v546) = *(_WORD *)(v546 + 8);
              v11 = v662;
              v547 = sub_1C5D56C70(v542, 172, (const llvm::APInt *)&v681, v544, v545, v642, v637, v538, (uint64_t)v528, v530, v546);
              v550 = *(_QWORD *)(v664 + 296);
              v551 = *(_QWORD *)(v550 + 832);
              v10 = v663;
              if (v551)
                LOWORD(v551) = *(_WORD *)(v551 + 8);
              v553 = sub_1C5D56C70(v550, 146, (const llvm::APInt *)&v681, (llvm *)0x31, 0, (uint64_t)v539, v541, v549, (uint64_t)v547, v548, v551);
              v554 = 0;
              v555 = *(_QWORD *)(v664 + 296);
              v556 = *(_QWORD *)(v555 + 832);
              if (v556)
                v554 = *(_WORD *)(v556 + 8);
              v557 = sub_1C5D52060(v555, 216, (const llvm::APInt *)&v681, (llvm *)6, 0, (uint64_t)v553, v552, v554);
              sub_1C5D6146C(*(_QWORD *)(v664 + 296), v12, 0, (uint64_t)v557, v558);
              sub_1C63725DC((uint64_t)v557);
            }
            for (k = 0; k != 0x3FFFFFFFFFFFFFF0; k -= 8)
            {
              v366 = &__src[k / 2];
              if (v695[k] >= 0x41u)
              {
                v367 = v366[6];
                if (v367)
                  MEMORY[0x1CAA32F9C](v367, 0x1000C8000313F17);
              }
              if (*((_DWORD *)v366 + 10) >= 0x41u)
              {
                v368 = v366[4];
                if (v368)
                  MEMORY[0x1CAA32F9C](v368, 0x1000C8000313F17);
              }
            }
            goto LABEL_61;
          case 173:
            v199 = *(_OWORD *)*(_QWORD *)(v12 + 40);
            *(_OWORD *)__src = v199;
            if (*(_WORD *)(v12 + 24) != 173)
              goto LABEL_61;
            v200 = *(uint64_t **)(v12 + 32);
            v201 = *v200;
            if (*(_WORD *)(*v200 + 24) != 56)
              goto LABEL_61;
            v202 = v200[5];
            v203 = *(_QWORD *)(v201 + 32);
            if (*(_QWORD *)(v203 + 40) != v202)
              goto LABEL_61;
            if (*(_DWORD *)(v203 + 48) != *((_DWORD *)v200 + 12))
              goto LABEL_61;
            if (*(_WORD *)(v202 + 24) != 176)
              goto LABEL_61;
            v204 = *(_QWORD *)(v202 + 32);
            if (*(_QWORD *)v204 != *(_QWORD *)v203 || *(_DWORD *)(v204 + 8) != *(_DWORD *)(v203 + 8))
              goto LABEL_61;
            v205 = *(_QWORD *)(v204 + 40);
            v206 = *(unsigned __int16 *)(v205 + 24);
            if (v206 != 35 && v206 != 11)
              goto LABEL_61;
            v208 = *(_QWORD *)(v205 + 80);
            if ((_BYTE)v199)
              ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)__src);
            else
              ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
            v590 = ExtendedSizeInBits;
            if ((_DWORD)v210 == 1)
            v591 = (llvm::APInt *)(v208 + 24);
            v592 = *(_DWORD *)(v208 + 32);
            if (v592 < 0x41)
              goto LABEL_590;
            if (v592 - llvm::APInt::countLeadingZerosSlowCase(v591) <= 0x40)
            {
              v591 = *(llvm::APInt **)v591;
LABEL_590:
              if (*(_QWORD *)v591 == v590 - 1)
              {
                v595 = sub_1C6366AB4(*(_QWORD *)(v8 + 296), 0, (const llvm::APInt *)&v681, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
                v596 = v593;
                v597 = 0;
                v598 = *(_QWORD *)(v8 + 296);
                v599 = *(_QWORD *)(v598 + 832);
                if (v599)
                  v597 = *(_WORD *)(v599 + 8);
                v600 = sub_1C5D56C70(v598, 57, (const llvm::APInt *)&v681, (llvm *)__src[0], (uint64_t)__src[1], (uint64_t)v595, v593, v594, **(_QWORD **)(v201 + 32), *(_QWORD *)(*(_QWORD *)(v201 + 32) + 8), v597);
                v157 = sub_1C47DF81C(*(_QWORD **)(v8 + 296), (const llvm::APInt *)&v681, **(_QWORD **)(v201 + 32), *(_QWORD *)(*(_QWORD *)(v201 + 32) + 8), (uint64_t)v595, v596, (uint64_t)v600, v601, **(_QWORD **)(v201 + 32), *(_QWORD *)(*(_QWORD *)(v201 + 32) + 8), HIDWORD(*(_QWORD *)(*(_QWORD *)(v201 + 32) + 8)), 0x14u);
                goto LABEL_268;
              }
            }
            goto LABEL_61;
          case 174:
          case 176:
            goto LABEL_61;
          case 175:
          case 177:
            v94 = *(uint64_t **)(v12 + 32);
            v93 = *(_QWORD *)(v12 + 40);
            v95 = *(llvm **)v93;
            v96 = *(void **)(v93 + 8);
            __src[0] = *(void **)v93;
            __src[1] = v96;
            v97 = v94[5];
            v98 = *(unsigned __int16 *)(v97 + 24);
            if (v98 != 35 && v98 != 11 || v95 == 6)
              goto LABEL_154;
            v236 = *v94;
            v237 = v94[6];
            v238 = *(unsigned __int16 *)(*v94 + 24);
            if (v14 != 177)
              goto LABEL_288;
            if ((v238 - 171) > 2)
              goto LABEL_288;
            v239 = *(_QWORD *)(v236 + 48);
            if (!v239)
              goto LABEL_288;
            v240 = *((_DWORD *)v94 + 2);
            v241 = 1;
            do
            {
              if (*(_DWORD *)(v239 + 8) == v240)
              {
                if (!v241)
                  goto LABEL_288;
                --v241;
              }
              v239 = *(_QWORD *)(v239 + 32);
            }
            while (v239);
            if (v241)
              goto LABEL_288;
            v242 = *(uint64_t **)(v236 + 32);
            v243 = v242[5];
            v244 = *(unsigned __int16 *)(v243 + 24);
            if (v244 != 35 && v244 != 11)
              goto LABEL_288;
            v246 = *(_QWORD *)(v243 + 80);
            v247 = (unint64_t *)(v246 + 24);
            if (*(_DWORD *)(v246 + 32) >= 0x41u)
              v247 = (unint64_t *)*v247;
            v248 = *(_QWORD *)(v97 + 80);
            v249 = (_QWORD *)(v248 + 24);
            if (*(_DWORD *)(v248 + 32) >= 0x41u)
              v249 = (_QWORD *)*v249;
            v250 = *v247;
            v251 = (_QWORD *)*v249;
            v252 = v250 >> (char)v251;
            if (v250 >> (char)v251 << (char)v251 == v250)
            {
              v576 = *(_QWORD *)(v664 + 296);
              v577 = *(_QWORD *)(v576 + 832);
              if (v577)
                LOWORD(v577) = *(_WORD *)(v577 + 8);
              v578 = sub_1C5D56C70(v576, 177, (const llvm::APInt *)&v681, v95, (uint64_t)v96, *v242, v242[1], a8, v97, v237, v577);
              v580 = v579;
              v581 = sub_1C6366AB4(*(_QWORD *)(v664 + 296), v252, (const llvm::APInt *)&v681, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
              v584 = *(_QWORD *)(v664 + 296);
              v585 = *(_QWORD *)(v584 + 832);
              if (v585)
                v586 = *(_WORD *)(v585 + 8);
              else
                v586 = 0;
              v337 = sub_1C5D56C70(v584, *(unsigned __int16 *)(v236 + 24), (const llvm::APInt *)&v681, (llvm *)__src[0], (uint64_t)__src[1], (uint64_t)v578, v580, v583, (uint64_t)v581, v582, v586);
              v339 = v602;
              v327 = v664;
            }
            else
            {
LABEL_288:
              if (v238 != 176)
                goto LABEL_154;
              v253 = *(_QWORD *)(*(_QWORD *)(v236 + 32) + 40);
              v254 = *(unsigned __int16 *)(v253 + 24);
              if (v254 != 35 && v254 != 11)
                goto LABEL_154;
              v256 = *(_QWORD *)(v253 + 80);
              v257 = (_QWORD *)(v256 + 24);
              if (*(_DWORD *)(v256 + 32) >= 0x41u)
                v257 = (_QWORD *)*v257;
              v258 = (_QWORD *)*v257;
              if ((_BYTE)v95)
                v259 = sub_1C47A8C74((unsigned __int8 *)__src);
              else
                v259 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
              v315 = v259;
              if ((_DWORD)v260 == 1)
              if (v258 != (_QWORD *)(v315 - 1))
                goto LABEL_154;
              v660 = v11;
              v650 = sub_1C6366AB4(*(_QWORD *)(v664 + 296), 0, (const llvm::APInt *)&v681, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
              v317 = v316;
              v319 = sub_1C6366AB4(*(_QWORD *)(v664 + 296), -1, (const llvm::APInt *)&v681, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
              v321 = 0;
              v322 = *(_QWORD *)(v664 + 296);
              v323 = *(_QWORD *)(v322 + 832);
              if (v323)
                v321 = *(_WORD *)(v323 + 8);
              v324 = sub_1C5D56C70(v322, *(unsigned __int16 *)(v12 + 24), (const llvm::APInt *)&v681, (llvm *)__src[0], (uint64_t)__src[1], (uint64_t)v319, v318, v320, v97, v237, v321);
              v326 = v325;
              v327 = v664;
              v328 = *(_QWORD **)(v664 + 296);
              v329 = *(uint64_t **)(v236 + 32);
              v330 = v329[1];
              v644 = *v329;
              v331 = v324[5] + 16 * v325;
              v332 = *(llvm **)v331;
              v333 = *(_QWORD *)(v331 + 8);
              v334 = sub_1C6367818(v328, 0x14u);
              v337 = sub_1C63698B8((uint64_t)v328, (const char *)0xC0, (const llvm::APInt *)&v681, v332, v333, v644, v330, v336, (uint64_t)v650, v317, (uint64_t)v324, v326, (uint64_t)v650, v317, v334, v335);
              v339 = v338;
              v11 = v660;
              v10 = v663;
            }
            sub_1C5D6146C(*(_QWORD *)(v327 + 296), v12, 0, (uint64_t)v337, v339);
            sub_1C63725DC((uint64_t)v337);
LABEL_154:
            v8 = v664;
            goto LABEL_61;
          default:
            if (v14 == 192)
            {
              v221 = *(_QWORD *)(v12 + 32);
              *(_OWORD *)__src = *(_OWORD *)v221;
              v696 = *(_OWORD *)(v221 + 40);
              LODWORD(v685) = *(_DWORD *)(*(_QWORD *)(v221 + 160) + 76);
              if (!sub_1C47DF8BC(v8, (unint64_t *)__src, &v696, (int *)&v685))
                goto LABEL_61;
              v222 = *(_QWORD **)(v8 + 296);
              v659 = __src[0];
              v649 = (int)__src[1];
              v640 = DWORD2(v696);
              v643 = v696;
              v223 = *(_QWORD **)(v12 + 32);
              v224 = v223[10];
              v225 = v223[11];
              v226 = v223[15];
              v227 = v223[16];
              v228 = *(_QWORD *)(v224 + 40) + 16 * v225;
              v229 = v11;
              v230 = *(llvm **)v228;
              v231 = *(_QWORD *)(v228 + 8);
              v630 = sub_1C6367818(v222, v685);
              v629 = v226;
              v8 = v664;
              v232 = v231;
              v11 = v229;
              v10 = v663;
              v157 = sub_1C63698B8((uint64_t)v222, (const char *)0xC0, (const llvm::APInt *)&v681, v230, v232, (uint64_t)v659, v649, v234, v643, v640, v224, v225, v629, v227, v630, v233);
            }
            else
            {
              if (v14 != 260)
                goto LABEL_61;
              v144 = *(_QWORD *)(v12 + 32);
              LODWORD(v685) = *(_DWORD *)(*(_QWORD *)(v144 + 40) + 76);
              *(_OWORD *)__src = *(_OWORD *)(v144 + 80);
              v696 = *(_OWORD *)(v144 + 120);
              if (!sub_1C47DF8BC(v8, (unint64_t *)__src, &v696, (int *)&v685))
                goto LABEL_61;
              v145 = *(_QWORD **)(v8 + 296);
              v147 = *(uint64_t **)(v12 + 32);
              v146 = *(_QWORD *)(v12 + 40);
              v148 = *(llvm **)v146;
              v149 = *(_QWORD *)(v146 + 8);
              v150 = v11;
              v151 = *v147;
              v152 = v147[1];
              v153 = sub_1C6367818(v145, v685);
              v154 = v152;
              v11 = v150;
              v10 = v663;
              v157 = sub_1C63698B8((uint64_t)v145, (const char *)0x104, (const llvm::APInt *)&v681, v148, v149, v151, v154, v156, v153, v155, (uint64_t)__src[0], (int)__src[1], v696, SDWORD2(v696), *(_QWORD *)(*(_QWORD *)(v12 + 32) + 160), *(_QWORD *)(*(_QWORD *)(v12 + 32) + 168));
            }
LABEL_268:
            v235 = (uint64_t)v157;
            sub_1C5D6146C(*(_QWORD *)(v8 + 296), v12, 0, (uint64_t)v157, v158);
            sub_1C63725DC(v235);
            goto LABEL_61;
        }
      }
      if (v14 <= 55)
      {
        if (v14 != 46)
        {
          if (v14 != 47)
            goto LABEL_61;
          v159 = *(uint64_t **)(v12 + 32);
          v160 = *(_QWORD *)(v159[5] + 80);
          v161 = (_QWORD *)(v160 + 24);
          if (*(_DWORD *)(v160 + 32) >= 0x41u)
            v161 = (_QWORD *)*v161;
          v162 = *(_DWORD *)v161;
          v163 = (1 << (*(_DWORD *)v161 + 26)) & 0xE709E709E709E709;
          if ((v162 - 2022) > 0x3F || v163 == 0)
            goto LABEL_61;
          v165 = *(_QWORD *)(v12 + 48);
          if (v165)
          {
            while (*(_DWORD *)(v165 + 8))
            {
              v165 = *(_QWORD *)(v165 + 32);
              if (!v165)
                goto LABEL_210;
            }
          }
          else
          {
LABEL_210:
            v166 = *v159;
            sub_1C5D6146C(*(_QWORD *)(v8 + 296), v12, 1, *v159, v159[1]);
            sub_1C63725DC(v166);
          }
          sub_1C47DFF34(v8, v12, v162);
          goto LABEL_61;
        }
        v211 = *(_QWORD **)(v12 + 32);
        v212 = *(_QWORD *)(*v211 + 80);
        v213 = (_QWORD *)(v212 + 24);
        if (*(_DWORD *)(v212 + 32) >= 0x41u)
          v213 = (_QWORD *)*v213;
        if (*(_DWORD *)v213 != 1851)
          goto LABEL_61;
        v214 = *(_QWORD *)(v12 + 48);
        v215 = v214;
        if (v214)
        {
          while (1)
          {
            v216 = *(_QWORD *)(v215 + 16);
            v217 = *(unsigned __int16 *)(v216 + 24);
            v218 = (v217 - 96) > 0x2D || ((1 << (v217 - 96)) & 0x200000000005) == 0;
            if (v218 && v217 != 443 || **(_BYTE **)(v216 + 40) != 9)
              break;
            v215 = *(_QWORD *)(v215 + 32);
            if (!v215)
              goto LABEL_265;
          }
          v219 = v11;
          v220 = 0;
        }
        else
        {
LABEL_265:
          v219 = v11;
          v220 = 1;
        }
        v404 = *(_QWORD *)(v12 + 40);
        v405 = *(llvm **)v404;
        v406 = *(_QWORD *)(v404 + 8);
        v407 = v211[5];
        v408 = v211[6];
        if (v220)
        {
          sub_1C5D404C4(*(_QWORD *)(v8 + 296), (const llvm::APInt *)&v681, *(_QWORD *)v404, *(_QWORD *)(v404 + 8), 1, 0.0);
          v673 = v681;
          if (v681)
            llvm::MetadataTracking::track((uint64_t)&v673, v681, 2);
          v674 = v682;
          v409 = sub_1C47DFE44(v405, v406, v407, v408, (const llvm::APInt *)&v673, *(_QWORD *)(v8 + 296));
          v411 = v410;
          if (v673)
            llvm::MetadataTracking::untrack((uint64_t)&v673, v673);
          v671 = v681;
          if (v681)
            llvm::MetadataTracking::track((uint64_t)&v671, v681, 2);
          v672 = v682;
          v412 = *(_QWORD *)(v8 + 296);
          v413 = sub_1C6366AB4(v412, 1830, (const llvm::APInt *)&v671, (llvm *)5, 0, 1, 0);
          v414 = 0;
          __src[0] = v413;
          __src[1] = v415;
          v690 = (uint64_t)v409;
          v691 = v411;
          v416 = *(_QWORD *)(v412 + 832);
          if (v416)
            v414 = *(unsigned __int16 *)(v416 + 8);
          v417 = sub_1C636D0C8(v412, (const char *)0x2E, (const llvm::APInt *)&v671, v405, v406, (uint64_t *)__src, 2, v414);
          v419 = v418;
          v420 = v671;
          if (v671)
          {
            v421 = &v671;
            goto LABEL_507;
          }
        }
        else
        {
          if (v214 && !*(_QWORD *)(v214 + 32) && *(_WORD *)(v407 + 24) == 212)
          {
            v422 = *(uint64_t **)(v407 + 32);
            v424 = *v422;
            v423 = v422[1];
            v669 = v681;
            if (v681)
              llvm::MetadataTracking::track((uint64_t)&v669, v681, 2);
            v670 = v682;
            v425 = *(_QWORD *)(v8 + 296);
            v426 = sub_1C6366AB4(v425, 1830, (const llvm::APInt *)&v669, (llvm *)5, 0, 1, 0);
            v427 = 0;
            __src[0] = v426;
            __src[1] = v428;
            v690 = v424;
            v691 = v423;
            v429 = *(_QWORD *)(v425 + 832);
            if (v429)
              v427 = *(unsigned __int16 *)(v429 + 8);
            v430 = sub_1C636D0C8(v425, (const char *)0x2E, (const llvm::APInt *)&v669, (llvm *)0xA, 0, (uint64_t *)__src, 2, v427);
            v432 = v431;
            if (v669)
              llvm::MetadataTracking::untrack((uint64_t)&v669, v669);
            v433 = *(_QWORD *)(v8 + 296);
            v434 = sub_1C6366AB4(v433, 0, (const llvm::APInt *)&v681, (llvm *)5, 0, 0, 0);
            v437 = 0;
            v438 = *(_QWORD *)(v433 + 832);
            if (v438)
              v437 = *(_WORD *)(v438 + 8);
            v439 = sub_1C5D56C70(v433, 212, (const llvm::APInt *)&v681, (llvm *)9, 0, (uint64_t)v430, v432, v436, (uint64_t)v434, v435, v437);
            v441 = v440;
          }
          else
          {
            v667 = v681;
            if (v681)
              llvm::MetadataTracking::track((uint64_t)&v667, v681, 2);
            v668 = v682;
            v442 = *(_QWORD *)(v8 + 296);
            v443 = sub_1C6366AB4(v442, 1830, (const llvm::APInt *)&v667, (llvm *)5, 0, 1, 0);
            v444 = 0;
            __src[0] = v443;
            __src[1] = v445;
            v690 = v407;
            v691 = v408;
            v446 = *(_QWORD *)(v442 + 832);
            if (v446)
              v444 = *(unsigned __int16 *)(v446 + 8);
            v439 = sub_1C636D0C8(v442, (const char *)0x2E, (const llvm::APInt *)&v667, v405, v406, (uint64_t *)__src, 2, v444);
            v441 = v447;
            if (v667)
              llvm::MetadataTracking::untrack((uint64_t)&v667, v667);
          }
          sub_1C5D404C4(*(_QWORD *)(v8 + 296), (const llvm::APInt *)&v681, (_BOOL8)v405, v406, 1, 0.0);
          v665 = v681;
          if (v681)
            llvm::MetadataTracking::track((uint64_t)&v665, v681, 2);
          v666 = v682;
          v632 = v441 | v632 & 0xFFFFFFFF00000000;
          v417 = sub_1C47DFE44(v405, v406, (uint64_t)v439, v441, (const llvm::APInt *)&v665, *(_QWORD *)(v8 + 296));
          v419 = v448;
          v420 = v665;
          if (v665)
          {
            v421 = &v665;
LABEL_507:
            llvm::MetadataTracking::untrack((uint64_t)v421, v420);
          }
        }
        sub_1C5D6146C(*(_QWORD *)(v8 + 296), v12, 0, (uint64_t)v417, v419);
        sub_1C63725DC((uint64_t)v417);
        v11 = v219;
        goto LABEL_61;
      }
      if ((v14 - 56) < 2)
      {
        v658 = v11;
        v101 = 0;
        v102 = *(_QWORD *)(v12 + 40);
        v104 = *(llvm **)v102;
        v103 = *(_QWORD *)(v102 + 8);
        v105 = 1;
        do
        {
          v106 = v105;
          v107 = (uint64_t *)(*(_QWORD *)(v12 + 32) + 40 * v101);
          v108 = *v107;
          if (*(_WORD *)(*v107 + 24) == 171)
          {
            v109 = *(_QWORD *)(v108 + 48);
            if (v109)
            {
              v110 = v107[1];
              v111 = 1;
              do
              {
                if (*(_DWORD *)(v109 + 8) == (_DWORD)v110)
                {
                  if (!v111)
                    goto LABEL_166;
                  --v111;
                }
                v109 = *(_QWORD *)(v109 + 32);
              }
              while (v109);
              if (!v111)
              {
                v112 = *(uint64_t **)(v108 + 32);
                v113 = v112[5];
                v114 = *(unsigned __int16 *)(v113 + 24);
                if (v114 == 35 || v114 == 11)
                {
                  v116 = *(_QWORD *)(v113 + 80);
                  v117 = (_QWORD *)(v116 + 24);
                  if (*(_DWORD *)(v116 + 32) >= 0x41u)
                    v117 = (_QWORD *)*v117;
                  v118 = *v112;
                  if (*(_WORD *)(*v112 + 24) == 175)
                  {
                    v119 = *(_QWORD *)(v118 + 48);
                    if (v119)
                    {
                      v120 = *(_DWORD *)v117;
                      v121 = *((_DWORD *)v112 + 2);
                      v122 = 1;
                      do
                      {
                        if (*(_DWORD *)(v119 + 8) == v121)
                        {
                          if (!v122)
                            goto LABEL_166;
                          --v122;
                        }
                        v119 = *(_QWORD *)(v119 + 32);
                      }
                      while (v119);
                      if (!v122)
                      {
                        v123 = *(uint64_t **)(v118 + 32);
                        v124 = v123[5];
                        v125 = *(unsigned __int16 *)(v124 + 24);
                        if (v125 == 35 || v125 == 11)
                        {
                          v127 = *(_QWORD *)(v124 + 80);
                          v128 = (unsigned int *)(v127 + 24);
                          if (*(_DWORD *)(v127 + 32) >= 0x41u)
                            v128 = *(unsigned int **)v128;
                          v129 = *v128;
                          v130 = *(_QWORD *)(v8 + 296);
                          v634 = v123[1];
                          v638 = *v123;
                          v648 = v103;
                          v131 = sub_1C6366AB4(v130, v120 >> v129, (const llvm::APInt *)&v681, v104, v103, 0, 0);
                          v134 = *(_QWORD *)(v130 + 832);
                          if (v134)
                            LOWORD(v134) = *(_WORD *)(v134 + 8);
                          v135 = sub_1C5D56C70(v130, 171, (const llvm::APInt *)&v681, v104, v648, v638, v634, v133, (uint64_t)v131, v132, v134);
                          v635 = v136;
                          v639 = (uint64_t)v135;
                          v137 = *(_QWORD *)(v664 + 296);
                          v138 = sub_1C6366AB4(v137, v129, (const llvm::APInt *)&v681, v104, v648, 0, 0);
                          v141 = *(_QWORD *)(v137 + 832);
                          if (v141)
                            LOWORD(v141) = *(_WORD *)(v141 + 8);
                          v142 = sub_1C5D56C70(v137, 175, (const llvm::APInt *)&v681, v104, v648, v639, v635, v140, (uint64_t)v138, v139, v141);
                          v8 = v664;
                          sub_1C5D6146C(*(_QWORD *)(v664 + 296), v108, v110, (uint64_t)v142, v143);
                          sub_1C63725DC((uint64_t)v142);
                          v103 = v648;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_166:
          v105 = 0;
          v101 = 1;
        }
        while ((v106 & 1) != 0);
        if (v104 == 4)
        {
          v167 = *(uint64_t **)(v12 + 32);
          v168 = *v167;
          v170 = v167[5];
          v169 = v167[6];
          if (*(_WORD *)(*v167 + 24) != 175
            || ((v171 = *(uint64_t **)(v168 + 32), v172 = v171[5], v173 = *(unsigned __int16 *)(v172 + 24), v173 != 35)
              ? (v174 = v173 == 11)
              : (v174 = 1),
                !v174))
          {
            v181 = 0;
            goto LABEL_299;
          }
          v175 = v167[1];
          v176 = *(_QWORD *)(v172 + 80);
          if (v655)
          {
            v177 = (_QWORD *)(v176 + 24);
            v178 = *(_DWORD *)(v176 + 32);
            if (v178 >= 0x41)
              v177 = (_QWORD *)*v177;
            if (*v177 < 5uLL)
            {
              v179 = 0;
              goto LABEL_224;
            }
          }
          else
          {
            v178 = *(_DWORD *)(v176 + 32);
          }
          v378 = (_QWORD *)(v176 + 24);
          v645 = v175;
          if (v178 >= 0x41)
            v378 = (_QWORD *)*v378;
          v641 = *v171;
          v633 = *(_QWORD *)(v664 + 296);
          v636 = v171[1];
          v651 = v103;
          v379 = sub_1C6366AB4(v633, (1 << *(_DWORD *)v378), (const llvm::APInt *)&v681, v104, v103, 0, 0);
          v382 = *(_QWORD *)(v633 + 832);
          if (v382)
            LOWORD(v382) = *(_WORD *)(v382 + 8);
          v383 = sub_1C5D56C70(v633, 58, (const llvm::APInt *)&v681, v104, v651, v641, v636, v381, (uint64_t)v379, v380, v382);
          v385 = v384;
          v386 = v168;
          v387 = (uint64_t)v383;
          sub_1C5D6146C(*(_QWORD *)(v664 + 296), v386, v645, (uint64_t)v383, v385);
          sub_1C63725DC(v387);
          v103 = v651;
          if (v655)
          {
            v176 = *(_QWORD *)(v172 + 80);
            v178 = *(_DWORD *)(v176 + 32);
            v179 = 1;
LABEL_224:
            v180 = (_QWORD *)(v176 + 24);
            if (v178 >= 0x41)
              v180 = (_QWORD *)*v180;
            v181 = *v180 < 5uLL;
            if ((v179 & 1) == 0)
            {
LABEL_299:
              if (*(_WORD *)(v170 + 24) != 175)
                goto LABEL_309;
              v261 = *(uint64_t **)(v170 + 32);
              v262 = v261[5];
              v263 = *(unsigned __int16 *)(v262 + 24);
              if (v263 != 35 && v263 != 11)
                goto LABEL_309;
              v265 = *(_QWORD *)(v262 + 80);
              if (v655)
              {
                v266 = (_QWORD *)(v265 + 24);
                v267 = *(_DWORD *)(v265 + 32);
                if (v267 >= 0x41)
                  v266 = (_QWORD *)*v266;
                if (((*v266 < 5uLL) & ~v181) != 0)
                  goto LABEL_309;
              }
              else
              {
                v267 = *(_DWORD *)(v265 + 32);
              }
              v388 = (_QWORD *)(v265 + 24);
              if (v267 >= 0x41)
                v388 = (_QWORD *)*v388;
              v389 = *(_QWORD *)(v664 + 296);
              v652 = *v261;
              v646 = v261[1];
              v390 = v103;
              v391 = sub_1C6366AB4(v389, (1 << *(_DWORD *)v388), (const llvm::APInt *)&v681, v104, v103, 0, 0);
              v394 = *(_QWORD *)(v389 + 832);
              if (v394)
                LOWORD(v394) = *(_WORD *)(v394 + 8);
              v628 = (uint64_t)v391;
              v395 = v389;
              v396 = v390;
              v397 = sub_1C5D56C70(v395, 58, (const llvm::APInt *)&v681, v104, v390, v652, v646, v393, v628, v392, v394);
              sub_1C5D6146C(*(_QWORD *)(v664 + 296), v170, v169, (uint64_t)v397, v398);
              sub_1C63725DC((uint64_t)v397);
              v103 = v396;
            }
          }
        }
LABEL_309:
        if (v14 == 56)
        {
          v268 = *(_QWORD **)(v12 + 32);
          v269 = v268[5];
          v270 = *(unsigned __int16 *)(v269 + 24);
          v271 = v270 == 35 || v270 == 11;
          v8 = v664;
          if (!v271)
            goto LABEL_349;
          v272 = *(_QWORD *)(v269 + 80);
          v273 = *(_DWORD *)(v272 + 32);
          v274 = v273 > 0x40
               ? **(_QWORD **)(v272 + 24)
               : (uint64_t)(*(_QWORD *)(v272 + 24) << -(char)v273) >> -(char)v273;
          if (v274 < 0x8000000000000001)
            goto LABEL_349;
          if (v655 && *(_WORD *)(*v268 + 24) == 175)
          {
            v285 = *(_QWORD *)(*(_QWORD *)(*v268 + 32) + 40);
            v286 = *(unsigned __int16 *)(v285 + 24);
            if (v286 == 35 || v286 == 11)
            {
              v288 = *(_QWORD *)(v285 + 80);
              v289 = (_QWORD *)(v288 + 24);
              if (*(_DWORD *)(v288 + 32) >= 0x41u)
                v289 = (_QWORD *)*v289;
              if (*v289 < 5uLL)
              {
LABEL_349:
                if (!v655 || v104 != 6)
                  goto LABEL_461;
LABEL_350:
                if (v270 == 175)
                {
                  v290 = *(_QWORD *)(*(_QWORD *)(v269 + 32) + 40);
                  v291 = *(unsigned __int16 *)(v290 + 24);
                  if (v291 == 35 || v291 == 11)
                  {
                    v293 = *(_QWORD *)(v290 + 80);
                    v294 = (_QWORD *)(v293 + 24);
                    if (*(_DWORD *)(v293 + 32) >= 0x41u)
                      v294 = (_QWORD *)*v294;
                    if (*v294 < 5uLL)
                      goto LABEL_461;
                  }
                }
                if (v14 != 56)
                {
                  v295 = *v268;
                  v296 = *(unsigned __int16 *)(*v268 + 24);
                  goto LABEL_371;
                }
                v295 = *v268;
                v296 = *(unsigned __int16 *)(*v268 + 24);
                if (v296 == 175)
                {
                  v297 = *(_QWORD *)(*(_QWORD *)(v295 + 32) + 40);
                  v298 = *(unsigned __int16 *)(v297 + 24);
                  if (v298 != 35 && v298 != 11)
                    goto LABEL_369;
                  v300 = *(_QWORD *)(v297 + 80);
                  v301 = (_QWORD *)(v300 + 24);
                  if (*(_DWORD *)(v300 + 32) >= 0x41u)
                    v301 = (_QWORD *)*v301;
                  if (*v301 >= 5uLL)
                  {
LABEL_369:
                    v296 = 175;
                    goto LABEL_371;
                  }
LABEL_461:
                  v11 = v658;
                  goto LABEL_61;
                }
LABEL_371:
                v302 = v14 == 56;
                v303 = *((_DWORD *)v268 + 2);
                v304 = v268[6];
                v305 = v296 == 175;
                if (v302 && v305)
                  v306 = v295;
                else
                  v306 = v269;
                if (v302 && v305)
                  v307 = v303;
                else
                  v307 = v304;
                if (*(_WORD *)(v306 + 24) != 175)
                  goto LABEL_461;
                v308 = *(_QWORD *)(v306 + 48);
                if (!v308)
                  goto LABEL_461;
                v309 = 1;
                do
                {
                  if (*(_DWORD *)(v308 + 8) == v307)
                  {
                    if (!v309)
                      goto LABEL_461;
                    --v309;
                  }
                  v308 = *(_QWORD *)(v308 + 32);
                }
                while (v308);
                if (v309)
                  goto LABEL_461;
                v310 = *(_QWORD *)(*(_QWORD *)(v306 + 32) + 40);
                v311 = *(unsigned __int16 *)(v310 + 24);
                if (v311 != 35 && v311 != 11)
                  goto LABEL_461;
                v313 = *(_QWORD *)(v310 + 80);
                if (*(_DWORD *)(v313 + 32) > 0x40u)
                {
                  v314 = **(_QWORD **)(v313 + 24);
                  if ((unint64_t)(v314 - 5) > 3)
                    goto LABEL_461;
                }
                else
                {
                  v314 = *(_QWORD *)(v313 + 24);
                  if ((unint64_t)(v314 - 5) >= 4)
                    goto LABEL_461;
                }
                v559 = v103;
                v560 = sub_1C6366AB4(*(_QWORD *)(v8 + 296), v314 - 4, (const llvm::APInt *)&v681, (llvm *)5, 0, 0, 0);
                v561 = v8;
                v563 = v562;
                v654 = sub_1C6366AB4(*(_QWORD *)(v561 + 296), 4, (const llvm::APInt *)&v681, (llvm *)5, 0, 0, 0);
                v566 = v565;
                v567 = 0;
                v568 = *(_QWORD *)(v561 + 296);
                v569 = *(_QWORD *)(v568 + 832);
                if (v569)
                  v567 = *(_WORD *)(v569 + 8);
                v571 = sub_1C5D56C70(v568, 175, (const llvm::APInt *)&v681, v104, v559, **(_QWORD **)(v306 + 32), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 8), v564, (uint64_t)v560, v563, v567);
                v8 = v664;
                v573 = *(_QWORD *)(v664 + 296);
                v574 = *(_QWORD *)(v573 + 832);
                if (v574)
                  LOWORD(v574) = *(_WORD *)(v574 + 8);
                v354 = sub_1C5D56C70(v573, 175, (const llvm::APInt *)&v681, v104, v559, (uint64_t)v571, v570, v572, (uint64_t)v654, v566, v574);
                v355 = v575;
                v356 = *(_QWORD *)(v664 + 296);
                v357 = v306;
                v358 = v307;
LABEL_417:
                sub_1C5D6146C(v356, v357, v358, (uint64_t)v354, v355);
                sub_1C63725DC((uint64_t)v354);
                goto LABEL_461;
              }
            }
          }
          v345 = v103;
          v346 = sub_1C6366AB4(*(_QWORD *)(v664 + 296), -(uint64_t)v274, (const llvm::APInt *)&v681, v104, v103, 0, 0);
          v349 = 0;
          v350 = *(_QWORD *)(v664 + 296);
          v351 = *(_QWORD *)(v350 + 832);
          if (v351)
            v349 = *(_WORD *)(v351 + 8);
          v352 = sub_1C5D56C70(v350, 57, (const llvm::APInt *)&v681, v104, v345, **(_QWORD **)(v12 + 32), *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8), v348, (uint64_t)v346, v347, v349);
        }
        else
        {
          if (v14 != 57)
            goto LABEL_333;
          v275 = *(_QWORD *)(v12 + 32);
          v276 = *(_QWORD *)(v275 + 40);
          if (*(_WORD *)(v276 + 24) != 58)
            goto LABEL_333;
          v277 = *(_QWORD *)(v276 + 48);
          if (!v277)
            goto LABEL_333;
          v278 = *(_DWORD *)(v275 + 48);
          v279 = 1;
          do
          {
            if (*(_DWORD *)(v277 + 8) == v278)
            {
              if (!v279)
                goto LABEL_333;
              --v279;
            }
            v277 = *(_QWORD *)(v277 + 32);
          }
          while (v277);
          if (v279
            || ((v280 = *(uint64_t **)(v276 + 32), v281 = v280[5], v282 = *(unsigned __int16 *)(v281 + 24), v282 != 35)
              ? (v283 = v282 == 11)
              : (v283 = 1),
                v283 ? (v284 = (v104 & 0xFE) == 4) : (v284 = 0),
                !v284))
          {
LABEL_333:
            v8 = v664;
            if (v655 && v104 == 6)
            {
              v268 = *(_QWORD **)(v12 + 32);
              v269 = v268[5];
              v270 = *(unsigned __int16 *)(v269 + 24);
              goto LABEL_350;
            }
            goto LABEL_461;
          }
          v587 = *(_QWORD *)(v281 + 80);
          v588 = *(_DWORD *)(v587 + 32);
          v8 = v664;
          if (v588 > 0x40)
            v589 = **(_QWORD **)(v587 + 24);
          else
            v589 = (uint64_t)(*(_QWORD *)(v587 + 24) << -(char)v588) >> -(char)v588;
          v603 = *(_QWORD *)(v664 + 296);
          v605 = *v280;
          v604 = v280[1];
          v606 = v103;
          v607 = sub_1C6366AB4(v603, -v589, (const llvm::APInt *)&v681, v104, v103, 0, 0);
          v610 = 0;
          v611 = *(_QWORD *)(v603 + 832);
          if (v611)
            v610 = *(_WORD *)(v611 + 8);
          v613 = sub_1C5D56C70(v603, 58, (const llvm::APInt *)&v681, v104, v606, v605, v604, v609, (uint64_t)v607, v608, v610);
          v615 = *(_QWORD *)(v664 + 296);
          v616 = *(uint64_t **)(v12 + 32);
          v617 = *v616;
          v618 = v616[1];
          v619 = *(_QWORD *)(v615 + 832);
          if (v619)
            LOWORD(v619) = *(_WORD *)(v619 + 8);
          v352 = sub_1C5D56C70(v615, 56, (const llvm::APInt *)&v681, v104, v606, (uint64_t)v613, v612, v614, v617, v618, v619);
        }
        v354 = v352;
        v355 = v353;
        v356 = *(_QWORD *)(v8 + 296);
        v357 = v12;
        v358 = 0;
        goto LABEL_417;
      }
      if (v14 == 141)
      {
        v182 = *(_QWORD *)(v12 + 32);
        v183 = *(_BOOL8 **)(v12 + 40);
        v184 = (llvm *)*v183;
        v185 = *(_QWORD *)(v182 + 80);
        if (*(_WORD *)(v185 + 24) == 96 && *v183 == 9)
        {
          v187 = *(_QWORD *)(v185 + 32);
          v188 = *(_QWORD *)v187;
          if (*(_QWORD *)v187 == *(_QWORD *)(v187 + 40) && *(_DWORD *)(v187 + 8) == *(_DWORD *)(v187 + 48))
          {
            v20 = v11;
            v189 = v183[1];
            v190 = *(_QWORD *)(v182 + 88);
            v191 = *(_QWORD *)(v8 + 296);
            v192 = *(_QWORD *)(v187 + 8);
            v193 = sub_1C5D404C4(v191, (const llvm::APInt *)&v681, *v183, v189, 0, 2.0);
            v196 = *(_QWORD *)(v191 + 832);
            if (v196)
              LOWORD(v196) = *(_WORD *)(v196 + 8);
            v197 = sub_1C5D56C70(v191, 98, (const llvm::APInt *)&v681, v184, v189, v188, v192, v195, (uint64_t)v193, v194, v196);
            v8 = v664;
            sub_1C5D6146C(*(_QWORD *)(v664 + 296), v185, v190, (uint64_t)v197, v198);
            sub_1C63725DC((uint64_t)v197);
            goto LABEL_60;
          }
        }
      }
LABEL_61:
      if (v681)
        llvm::MetadataTracking::untrack((uint64_t)&v681, v681);
      v11 = (_QWORD *)v11[1];
      if (v11 == v10)
      {
        v9 = *(_QWORD **)(v8 + 296);
        v10 = (_QWORD *)v9[27];
        break;
      }
    }
  }
  v620 = v9 + 26;
  if (v10 != v9 + 26)
  {
    do
    {
      if (v10)
        v621 = (uint64_t)(v10 - 1);
      else
        v621 = 0;
      v622 = *(void **)(v621 + 64);
      __src[0] = v622;
      if (v622)
        llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v622, 2);
      LODWORD(__src[1]) = *(_DWORD *)(v621 + 60);
      if (*(_WORD *)(v621 + 24) == 429)
      {
        v623 = *(_QWORD *)(v8 + 296);
        v624 = *(_QWORD *)(v623 + 832);
        if (v624)
          LOWORD(v624) = *(_WORD *)(v624 + 8);
        v625 = sub_1C5D56C70(v623, 58, (const llvm::APInt *)__src, **(llvm ***)(v621 + 40), *(_QWORD *)(*(_QWORD *)(v621 + 40) + 8), **(_QWORD **)(v621 + 32), *(_QWORD *)(*(_QWORD *)(v621 + 32) + 8), a8, *(_QWORD *)(*(_QWORD *)(v621 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v621 + 32) + 48), v624);
        sub_1C5D6146C(*(_QWORD *)(v8 + 296), v621, 0, (uint64_t)v625, v626);
        sub_1C63725DC((uint64_t)v625);
      }
      if (__src[0])
        llvm::MetadataTracking::untrack((uint64_t)__src, (unsigned __int8 *)__src[0]);
      v10 = (_QWORD *)v10[1];
    }
    while (v10 != v620);
    v9 = *(_QWORD **)(v8 + 296);
  }
  return sub_1C6365284(v9);
}

